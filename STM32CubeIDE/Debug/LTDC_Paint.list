
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d350  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026bc  9000d5f0  9000d5f0  0000e5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000fcac  9000fcac  000110cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000fcac  9000fcac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000fcb4  9000fcb4  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000fcb4  9000fcb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000fcb8  9000fcb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000fcbc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  200000d0  9000fd88  000110d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200014a0  9000fd88  000114a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a77a  00000000  00000000  000110fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053b0  00000000  00000000  0003b874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  00040c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019ae  00000000  00000000  00042d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041163  00000000  00000000  000446e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c8aa  00000000  00000000  00085849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018da73  00000000  00000000  000b20f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023fb66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097b8  00000000  00000000  0023fbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00249364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000d5d8 	.word	0x9000d5d8

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000d5d8 	.word	0x9000d5d8

900002e0 <strlen>:
900002e0:	4603      	mov	r3, r0
900002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
900002e6:	2a00      	cmp	r2, #0
900002e8:	d1fb      	bne.n	900002e2 <strlen+0x2>
900002ea:	1a18      	subs	r0, r3, r0
900002ec:	3801      	subs	r0, #1
900002ee:	4770      	bx	lr

900002f0 <memchr>:
900002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002f4:	2a10      	cmp	r2, #16
900002f6:	db2b      	blt.n	90000350 <memchr+0x60>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	d008      	beq.n	90000310 <memchr+0x20>
900002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
90000302:	3a01      	subs	r2, #1
90000304:	428b      	cmp	r3, r1
90000306:	d02d      	beq.n	90000364 <memchr+0x74>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	b342      	cbz	r2, 90000360 <memchr+0x70>
9000030e:	d1f6      	bne.n	900002fe <memchr+0xe>
90000310:	b4f0      	push	{r4, r5, r6, r7}
90000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000031a:	f022 0407 	bic.w	r4, r2, #7
9000031e:	f07f 0700 	mvns.w	r7, #0
90000322:	2300      	movs	r3, #0
90000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000328:	3c08      	subs	r4, #8
9000032a:	ea85 0501 	eor.w	r5, r5, r1
9000032e:	ea86 0601 	eor.w	r6, r6, r1
90000332:	fa85 f547 	uadd8	r5, r5, r7
90000336:	faa3 f587 	sel	r5, r3, r7
9000033a:	fa86 f647 	uadd8	r6, r6, r7
9000033e:	faa5 f687 	sel	r6, r5, r7
90000342:	b98e      	cbnz	r6, 90000368 <memchr+0x78>
90000344:	d1ee      	bne.n	90000324 <memchr+0x34>
90000346:	bcf0      	pop	{r4, r5, r6, r7}
90000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000034c:	f002 0207 	and.w	r2, r2, #7
90000350:	b132      	cbz	r2, 90000360 <memchr+0x70>
90000352:	f810 3b01 	ldrb.w	r3, [r0], #1
90000356:	3a01      	subs	r2, #1
90000358:	ea83 0301 	eor.w	r3, r3, r1
9000035c:	b113      	cbz	r3, 90000364 <memchr+0x74>
9000035e:	d1f8      	bne.n	90000352 <memchr+0x62>
90000360:	2000      	movs	r0, #0
90000362:	4770      	bx	lr
90000364:	3801      	subs	r0, #1
90000366:	4770      	bx	lr
90000368:	2d00      	cmp	r5, #0
9000036a:	bf06      	itte	eq
9000036c:	4635      	moveq	r5, r6
9000036e:	3803      	subeq	r0, #3
90000370:	3807      	subne	r0, #7
90000372:	f015 0f01 	tst.w	r5, #1
90000376:	d107      	bne.n	90000388 <memchr+0x98>
90000378:	3001      	adds	r0, #1
9000037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000037e:	bf02      	ittt	eq
90000380:	3001      	addeq	r0, #1
90000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000386:	3001      	addeq	r0, #1
90000388:	bcf0      	pop	{r4, r5, r6, r7}
9000038a:	3801      	subs	r0, #1
9000038c:	4770      	bx	lr
9000038e:	bf00      	nop

90000390 <__aeabi_uldivmod>:
90000390:	b953      	cbnz	r3, 900003a8 <__aeabi_uldivmod+0x18>
90000392:	b94a      	cbnz	r2, 900003a8 <__aeabi_uldivmod+0x18>
90000394:	2900      	cmp	r1, #0
90000396:	bf08      	it	eq
90000398:	2800      	cmpeq	r0, #0
9000039a:	bf1c      	itt	ne
9000039c:	f04f 31ff 	movne.w	r1, #4294967295
900003a0:	f04f 30ff 	movne.w	r0, #4294967295
900003a4:	f000 b988 	b.w	900006b8 <__aeabi_idiv0>
900003a8:	f1ad 0c08 	sub.w	ip, sp, #8
900003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003b0:	f000 f806 	bl	900003c0 <__udivmoddi4>
900003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003bc:	b004      	add	sp, #16
900003be:	4770      	bx	lr

900003c0 <__udivmoddi4>:
900003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003c4:	9d08      	ldr	r5, [sp, #32]
900003c6:	468e      	mov	lr, r1
900003c8:	4604      	mov	r4, r0
900003ca:	4688      	mov	r8, r1
900003cc:	2b00      	cmp	r3, #0
900003ce:	d14a      	bne.n	90000466 <__udivmoddi4+0xa6>
900003d0:	428a      	cmp	r2, r1
900003d2:	4617      	mov	r7, r2
900003d4:	d962      	bls.n	9000049c <__udivmoddi4+0xdc>
900003d6:	fab2 f682 	clz	r6, r2
900003da:	b14e      	cbz	r6, 900003f0 <__udivmoddi4+0x30>
900003dc:	f1c6 0320 	rsb	r3, r6, #32
900003e0:	fa01 f806 	lsl.w	r8, r1, r6
900003e4:	fa20 f303 	lsr.w	r3, r0, r3
900003e8:	40b7      	lsls	r7, r6
900003ea:	ea43 0808 	orr.w	r8, r3, r8
900003ee:	40b4      	lsls	r4, r6
900003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003f4:	fa1f fc87 	uxth.w	ip, r7
900003f8:	fbb8 f1fe 	udiv	r1, r8, lr
900003fc:	0c23      	lsrs	r3, r4, #16
900003fe:	fb0e 8811 	mls	r8, lr, r1, r8
90000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
90000406:	fb01 f20c 	mul.w	r2, r1, ip
9000040a:	429a      	cmp	r2, r3
9000040c:	d909      	bls.n	90000422 <__udivmoddi4+0x62>
9000040e:	18fb      	adds	r3, r7, r3
90000410:	f101 30ff 	add.w	r0, r1, #4294967295
90000414:	f080 80ea 	bcs.w	900005ec <__udivmoddi4+0x22c>
90000418:	429a      	cmp	r2, r3
9000041a:	f240 80e7 	bls.w	900005ec <__udivmoddi4+0x22c>
9000041e:	3902      	subs	r1, #2
90000420:	443b      	add	r3, r7
90000422:	1a9a      	subs	r2, r3, r2
90000424:	b2a3      	uxth	r3, r4
90000426:	fbb2 f0fe 	udiv	r0, r2, lr
9000042a:	fb0e 2210 	mls	r2, lr, r0, r2
9000042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000432:	fb00 fc0c 	mul.w	ip, r0, ip
90000436:	459c      	cmp	ip, r3
90000438:	d909      	bls.n	9000044e <__udivmoddi4+0x8e>
9000043a:	18fb      	adds	r3, r7, r3
9000043c:	f100 32ff 	add.w	r2, r0, #4294967295
90000440:	f080 80d6 	bcs.w	900005f0 <__udivmoddi4+0x230>
90000444:	459c      	cmp	ip, r3
90000446:	f240 80d3 	bls.w	900005f0 <__udivmoddi4+0x230>
9000044a:	443b      	add	r3, r7
9000044c:	3802      	subs	r0, #2
9000044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000452:	eba3 030c 	sub.w	r3, r3, ip
90000456:	2100      	movs	r1, #0
90000458:	b11d      	cbz	r5, 90000462 <__udivmoddi4+0xa2>
9000045a:	40f3      	lsrs	r3, r6
9000045c:	2200      	movs	r2, #0
9000045e:	e9c5 3200 	strd	r3, r2, [r5]
90000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000466:	428b      	cmp	r3, r1
90000468:	d905      	bls.n	90000476 <__udivmoddi4+0xb6>
9000046a:	b10d      	cbz	r5, 90000470 <__udivmoddi4+0xb0>
9000046c:	e9c5 0100 	strd	r0, r1, [r5]
90000470:	2100      	movs	r1, #0
90000472:	4608      	mov	r0, r1
90000474:	e7f5      	b.n	90000462 <__udivmoddi4+0xa2>
90000476:	fab3 f183 	clz	r1, r3
9000047a:	2900      	cmp	r1, #0
9000047c:	d146      	bne.n	9000050c <__udivmoddi4+0x14c>
9000047e:	4573      	cmp	r3, lr
90000480:	d302      	bcc.n	90000488 <__udivmoddi4+0xc8>
90000482:	4282      	cmp	r2, r0
90000484:	f200 8105 	bhi.w	90000692 <__udivmoddi4+0x2d2>
90000488:	1a84      	subs	r4, r0, r2
9000048a:	eb6e 0203 	sbc.w	r2, lr, r3
9000048e:	2001      	movs	r0, #1
90000490:	4690      	mov	r8, r2
90000492:	2d00      	cmp	r5, #0
90000494:	d0e5      	beq.n	90000462 <__udivmoddi4+0xa2>
90000496:	e9c5 4800 	strd	r4, r8, [r5]
9000049a:	e7e2      	b.n	90000462 <__udivmoddi4+0xa2>
9000049c:	2a00      	cmp	r2, #0
9000049e:	f000 8090 	beq.w	900005c2 <__udivmoddi4+0x202>
900004a2:	fab2 f682 	clz	r6, r2
900004a6:	2e00      	cmp	r6, #0
900004a8:	f040 80a4 	bne.w	900005f4 <__udivmoddi4+0x234>
900004ac:	1a8a      	subs	r2, r1, r2
900004ae:	0c03      	lsrs	r3, r0, #16
900004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004b4:	b280      	uxth	r0, r0
900004b6:	b2bc      	uxth	r4, r7
900004b8:	2101      	movs	r1, #1
900004ba:	fbb2 fcfe 	udiv	ip, r2, lr
900004be:	fb0e 221c 	mls	r2, lr, ip, r2
900004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004c6:	fb04 f20c 	mul.w	r2, r4, ip
900004ca:	429a      	cmp	r2, r3
900004cc:	d907      	bls.n	900004de <__udivmoddi4+0x11e>
900004ce:	18fb      	adds	r3, r7, r3
900004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004d4:	d202      	bcs.n	900004dc <__udivmoddi4+0x11c>
900004d6:	429a      	cmp	r2, r3
900004d8:	f200 80e0 	bhi.w	9000069c <__udivmoddi4+0x2dc>
900004dc:	46c4      	mov	ip, r8
900004de:	1a9b      	subs	r3, r3, r2
900004e0:	fbb3 f2fe 	udiv	r2, r3, lr
900004e4:	fb0e 3312 	mls	r3, lr, r2, r3
900004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004ec:	fb02 f404 	mul.w	r4, r2, r4
900004f0:	429c      	cmp	r4, r3
900004f2:	d907      	bls.n	90000504 <__udivmoddi4+0x144>
900004f4:	18fb      	adds	r3, r7, r3
900004f6:	f102 30ff 	add.w	r0, r2, #4294967295
900004fa:	d202      	bcs.n	90000502 <__udivmoddi4+0x142>
900004fc:	429c      	cmp	r4, r3
900004fe:	f200 80ca 	bhi.w	90000696 <__udivmoddi4+0x2d6>
90000502:	4602      	mov	r2, r0
90000504:	1b1b      	subs	r3, r3, r4
90000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
9000050a:	e7a5      	b.n	90000458 <__udivmoddi4+0x98>
9000050c:	f1c1 0620 	rsb	r6, r1, #32
90000510:	408b      	lsls	r3, r1
90000512:	fa22 f706 	lsr.w	r7, r2, r6
90000516:	431f      	orrs	r7, r3
90000518:	fa0e f401 	lsl.w	r4, lr, r1
9000051c:	fa20 f306 	lsr.w	r3, r0, r6
90000520:	fa2e fe06 	lsr.w	lr, lr, r6
90000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000528:	4323      	orrs	r3, r4
9000052a:	fa00 f801 	lsl.w	r8, r0, r1
9000052e:	fa1f fc87 	uxth.w	ip, r7
90000532:	fbbe f0f9 	udiv	r0, lr, r9
90000536:	0c1c      	lsrs	r4, r3, #16
90000538:	fb09 ee10 	mls	lr, r9, r0, lr
9000053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000540:	fb00 fe0c 	mul.w	lr, r0, ip
90000544:	45a6      	cmp	lr, r4
90000546:	fa02 f201 	lsl.w	r2, r2, r1
9000054a:	d909      	bls.n	90000560 <__udivmoddi4+0x1a0>
9000054c:	193c      	adds	r4, r7, r4
9000054e:	f100 3aff 	add.w	sl, r0, #4294967295
90000552:	f080 809c 	bcs.w	9000068e <__udivmoddi4+0x2ce>
90000556:	45a6      	cmp	lr, r4
90000558:	f240 8099 	bls.w	9000068e <__udivmoddi4+0x2ce>
9000055c:	3802      	subs	r0, #2
9000055e:	443c      	add	r4, r7
90000560:	eba4 040e 	sub.w	r4, r4, lr
90000564:	fa1f fe83 	uxth.w	lr, r3
90000568:	fbb4 f3f9 	udiv	r3, r4, r9
9000056c:	fb09 4413 	mls	r4, r9, r3, r4
90000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000574:	fb03 fc0c 	mul.w	ip, r3, ip
90000578:	45a4      	cmp	ip, r4
9000057a:	d908      	bls.n	9000058e <__udivmoddi4+0x1ce>
9000057c:	193c      	adds	r4, r7, r4
9000057e:	f103 3eff 	add.w	lr, r3, #4294967295
90000582:	f080 8082 	bcs.w	9000068a <__udivmoddi4+0x2ca>
90000586:	45a4      	cmp	ip, r4
90000588:	d97f      	bls.n	9000068a <__udivmoddi4+0x2ca>
9000058a:	3b02      	subs	r3, #2
9000058c:	443c      	add	r4, r7
9000058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000592:	eba4 040c 	sub.w	r4, r4, ip
90000596:	fba0 ec02 	umull	lr, ip, r0, r2
9000059a:	4564      	cmp	r4, ip
9000059c:	4673      	mov	r3, lr
9000059e:	46e1      	mov	r9, ip
900005a0:	d362      	bcc.n	90000668 <__udivmoddi4+0x2a8>
900005a2:	d05f      	beq.n	90000664 <__udivmoddi4+0x2a4>
900005a4:	b15d      	cbz	r5, 900005be <__udivmoddi4+0x1fe>
900005a6:	ebb8 0203 	subs.w	r2, r8, r3
900005aa:	eb64 0409 	sbc.w	r4, r4, r9
900005ae:	fa04 f606 	lsl.w	r6, r4, r6
900005b2:	fa22 f301 	lsr.w	r3, r2, r1
900005b6:	431e      	orrs	r6, r3
900005b8:	40cc      	lsrs	r4, r1
900005ba:	e9c5 6400 	strd	r6, r4, [r5]
900005be:	2100      	movs	r1, #0
900005c0:	e74f      	b.n	90000462 <__udivmoddi4+0xa2>
900005c2:	fbb1 fcf2 	udiv	ip, r1, r2
900005c6:	0c01      	lsrs	r1, r0, #16
900005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005cc:	b280      	uxth	r0, r0
900005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005d2:	463b      	mov	r3, r7
900005d4:	4638      	mov	r0, r7
900005d6:	463c      	mov	r4, r7
900005d8:	46b8      	mov	r8, r7
900005da:	46be      	mov	lr, r7
900005dc:	2620      	movs	r6, #32
900005de:	fbb1 f1f7 	udiv	r1, r1, r7
900005e2:	eba2 0208 	sub.w	r2, r2, r8
900005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005ea:	e766      	b.n	900004ba <__udivmoddi4+0xfa>
900005ec:	4601      	mov	r1, r0
900005ee:	e718      	b.n	90000422 <__udivmoddi4+0x62>
900005f0:	4610      	mov	r0, r2
900005f2:	e72c      	b.n	9000044e <__udivmoddi4+0x8e>
900005f4:	f1c6 0220 	rsb	r2, r6, #32
900005f8:	fa2e f302 	lsr.w	r3, lr, r2
900005fc:	40b7      	lsls	r7, r6
900005fe:	40b1      	lsls	r1, r6
90000600:	fa20 f202 	lsr.w	r2, r0, r2
90000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000608:	430a      	orrs	r2, r1
9000060a:	fbb3 f8fe 	udiv	r8, r3, lr
9000060e:	b2bc      	uxth	r4, r7
90000610:	fb0e 3318 	mls	r3, lr, r8, r3
90000614:	0c11      	lsrs	r1, r2, #16
90000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000061a:	fb08 f904 	mul.w	r9, r8, r4
9000061e:	40b0      	lsls	r0, r6
90000620:	4589      	cmp	r9, r1
90000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000626:	b280      	uxth	r0, r0
90000628:	d93e      	bls.n	900006a8 <__udivmoddi4+0x2e8>
9000062a:	1879      	adds	r1, r7, r1
9000062c:	f108 3cff 	add.w	ip, r8, #4294967295
90000630:	d201      	bcs.n	90000636 <__udivmoddi4+0x276>
90000632:	4589      	cmp	r9, r1
90000634:	d81f      	bhi.n	90000676 <__udivmoddi4+0x2b6>
90000636:	eba1 0109 	sub.w	r1, r1, r9
9000063a:	fbb1 f9fe 	udiv	r9, r1, lr
9000063e:	fb09 f804 	mul.w	r8, r9, r4
90000642:	fb0e 1119 	mls	r1, lr, r9, r1
90000646:	b292      	uxth	r2, r2
90000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000064c:	4542      	cmp	r2, r8
9000064e:	d229      	bcs.n	900006a4 <__udivmoddi4+0x2e4>
90000650:	18ba      	adds	r2, r7, r2
90000652:	f109 31ff 	add.w	r1, r9, #4294967295
90000656:	d2c4      	bcs.n	900005e2 <__udivmoddi4+0x222>
90000658:	4542      	cmp	r2, r8
9000065a:	d2c2      	bcs.n	900005e2 <__udivmoddi4+0x222>
9000065c:	f1a9 0102 	sub.w	r1, r9, #2
90000660:	443a      	add	r2, r7
90000662:	e7be      	b.n	900005e2 <__udivmoddi4+0x222>
90000664:	45f0      	cmp	r8, lr
90000666:	d29d      	bcs.n	900005a4 <__udivmoddi4+0x1e4>
90000668:	ebbe 0302 	subs.w	r3, lr, r2
9000066c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000670:	3801      	subs	r0, #1
90000672:	46e1      	mov	r9, ip
90000674:	e796      	b.n	900005a4 <__udivmoddi4+0x1e4>
90000676:	eba7 0909 	sub.w	r9, r7, r9
9000067a:	4449      	add	r1, r9
9000067c:	f1a8 0c02 	sub.w	ip, r8, #2
90000680:	fbb1 f9fe 	udiv	r9, r1, lr
90000684:	fb09 f804 	mul.w	r8, r9, r4
90000688:	e7db      	b.n	90000642 <__udivmoddi4+0x282>
9000068a:	4673      	mov	r3, lr
9000068c:	e77f      	b.n	9000058e <__udivmoddi4+0x1ce>
9000068e:	4650      	mov	r0, sl
90000690:	e766      	b.n	90000560 <__udivmoddi4+0x1a0>
90000692:	4608      	mov	r0, r1
90000694:	e6fd      	b.n	90000492 <__udivmoddi4+0xd2>
90000696:	443b      	add	r3, r7
90000698:	3a02      	subs	r2, #2
9000069a:	e733      	b.n	90000504 <__udivmoddi4+0x144>
9000069c:	f1ac 0c02 	sub.w	ip, ip, #2
900006a0:	443b      	add	r3, r7
900006a2:	e71c      	b.n	900004de <__udivmoddi4+0x11e>
900006a4:	4649      	mov	r1, r9
900006a6:	e79c      	b.n	900005e2 <__udivmoddi4+0x222>
900006a8:	eba1 0109 	sub.w	r1, r1, r9
900006ac:	46c4      	mov	ip, r8
900006ae:	fbb1 f9fe 	udiv	r9, r1, lr
900006b2:	fb09 f804 	mul.w	r8, r9, r4
900006b6:	e7c4      	b.n	90000642 <__udivmoddi4+0x282>

900006b8 <__aeabi_idiv0>:
900006b8:	4770      	bx	lr
900006ba:	bf00      	nop

900006bc <clearInput>:
#include "appLogic.h"

uint32_t lastCursorTime = 0;

void clearInput(AppContext *ctx) {
900006bc:	b480      	push	{r7}
900006be:	b083      	sub	sp, #12
900006c0:	af00      	add	r7, sp, #0
900006c2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006c4:	687b      	ldr	r3, [r7, #4]
900006c6:	2200      	movs	r2, #0
900006c8:	809a      	strh	r2, [r3, #4]
}
900006ca:	bf00      	nop
900006cc:	370c      	adds	r7, #12
900006ce:	46bd      	mov	sp, r7
900006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006d4:	4770      	bx	lr

900006d6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006d6:	b480      	push	{r7}
900006d8:	b083      	sub	sp, #12
900006da:	af00      	add	r7, sp, #0
900006dc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006de:	687b      	ldr	r3, [r7, #4]
900006e0:	2200      	movs	r2, #0
900006e2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006e4:	687b      	ldr	r3, [r7, #4]
900006e6:	2200      	movs	r2, #0
900006e8:	719a      	strb	r2, [r3, #6]
}
900006ea:	bf00      	nop
900006ec:	370c      	adds	r7, #12
900006ee:	46bd      	mov	sp, r7
900006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006f4:	4770      	bx	lr
	...

900006f8 <backspace>:

void backspace(AppContext *ctx) {
900006f8:	b480      	push	{r7}
900006fa:	b083      	sub	sp, #12
900006fc:	af00      	add	r7, sp, #0
900006fe:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
90000700:	687b      	ldr	r3, [r7, #4]
90000702:	889b      	ldrh	r3, [r3, #4]
90000704:	4a06      	ldr	r2, [pc, #24]	@ (90000720 <backspace+0x28>)
90000706:	fba2 2303 	umull	r2, r3, r2, r3
9000070a:	08db      	lsrs	r3, r3, #3
9000070c:	b29a      	uxth	r2, r3
9000070e:	687b      	ldr	r3, [r7, #4]
90000710:	809a      	strh	r2, [r3, #4]
}
90000712:	bf00      	nop
90000714:	370c      	adds	r7, #12
90000716:	46bd      	mov	sp, r7
90000718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000071c:	4770      	bx	lr
9000071e:	bf00      	nop
90000720:	cccccccd 	.word	0xcccccccd

90000724 <stopPWM>:

void stopPWM(AppContext *ctx) {
90000724:	b480      	push	{r7}
90000726:	b083      	sub	sp, #12
90000728:	af00      	add	r7, sp, #0
9000072a:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = false;
9000072c:	687b      	ldr	r3, [r7, #4]
9000072e:	2200      	movs	r2, #0
90000730:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
  // TODO callbakc
}
90000732:	bf00      	nop
90000734:	370c      	adds	r7, #12
90000736:	46bd      	mov	sp, r7
90000738:	f85d 7b04 	ldr.w	r7, [sp], #4
9000073c:	4770      	bx	lr

9000073e <startPWM>:

void startPWM(AppContext *ctx) {
9000073e:	b480      	push	{r7}
90000740:	b083      	sub	sp, #12
90000742:	af00      	add	r7, sp, #0
90000744:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = true;
90000746:	687b      	ldr	r3, [r7, #4]
90000748:	2201      	movs	r2, #1
9000074a:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ctx->voltage / 4);
  // TODO callbakc
}
9000074c:	bf00      	nop
9000074e:	370c      	adds	r7, #12
90000750:	46bd      	mov	sp, r7
90000752:	f85d 7b04 	ldr.w	r7, [sp], #4
90000756:	4770      	bx	lr

90000758 <setSTATE_F3>:

void setSTATE_F3(AppContext *ctx) {
90000758:	b480      	push	{r7}
9000075a:	b083      	sub	sp, #12
9000075c:	af00      	add	r7, sp, #0
9000075e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F3;
90000760:	687b      	ldr	r3, [r7, #4]
90000762:	2202      	movs	r2, #2
90000764:	701a      	strb	r2, [r3, #0]
}
90000766:	bf00      	nop
90000768:	370c      	adds	r7, #12
9000076a:	46bd      	mov	sp, r7
9000076c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000770:	4770      	bx	lr

90000772 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000772:	b480      	push	{r7}
90000774:	b083      	sub	sp, #12
90000776:	af00      	add	r7, sp, #0
90000778:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
9000077a:	687b      	ldr	r3, [r7, #4]
9000077c:	2201      	movs	r2, #1
9000077e:	701a      	strb	r2, [r3, #0]
}
90000780:	bf00      	nop
90000782:	370c      	adds	r7, #12
90000784:	46bd      	mov	sp, r7
90000786:	f85d 7b04 	ldr.w	r7, [sp], #4
9000078a:	4770      	bx	lr

9000078c <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
9000078c:	b480      	push	{r7}
9000078e:	b083      	sub	sp, #12
90000790:	af00      	add	r7, sp, #0
90000792:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
90000794:	687b      	ldr	r3, [r7, #4]
90000796:	2200      	movs	r2, #0
90000798:	701a      	strb	r2, [r3, #0]
}
9000079a:	bf00      	nop
9000079c:	370c      	adds	r7, #12
9000079e:	46bd      	mov	sp, r7
900007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900007a4:	4770      	bx	lr
	...

900007a8 <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
900007a8:	b5b0      	push	{r4, r5, r7, lr}
900007aa:	b082      	sub	sp, #8
900007ac:	af00      	add	r7, sp, #0
900007ae:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
900007b0:	687b      	ldr	r3, [r7, #4]
900007b2:	889b      	ldrh	r3, [r3, #4]
900007b4:	2b4f      	cmp	r3, #79	@ 0x4f
900007b6:	d904      	bls.n	900007c2 <validateAndSetVoltage+0x1a>
900007b8:	687b      	ldr	r3, [r7, #4]
900007ba:	889b      	ldrh	r3, [r3, #4]
900007bc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
900007c0:	d914      	bls.n	900007ec <validateAndSetVoltage+0x44>
  {
    strcpy(ctx->message, "Not in range 80 - 400!");
900007c2:	687b      	ldr	r3, [r7, #4]
900007c4:	3309      	adds	r3, #9
900007c6:	4a10      	ldr	r2, [pc, #64]	@ (90000808 <validateAndSetVoltage+0x60>)
900007c8:	461c      	mov	r4, r3
900007ca:	4615      	mov	r5, r2
900007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900007ce:	6020      	str	r0, [r4, #0]
900007d0:	6061      	str	r1, [r4, #4]
900007d2:	60a2      	str	r2, [r4, #8]
900007d4:	60e3      	str	r3, [r4, #12]
900007d6:	6828      	ldr	r0, [r5, #0]
900007d8:	6120      	str	r0, [r4, #16]
900007da:	88ab      	ldrh	r3, [r5, #4]
900007dc:	79aa      	ldrb	r2, [r5, #6]
900007de:	82a3      	strh	r3, [r4, #20]
900007e0:	4613      	mov	r3, r2
900007e2:	75a3      	strb	r3, [r4, #22]
    clearInput(ctx);
900007e4:	6878      	ldr	r0, [r7, #4]
900007e6:	f7ff ff69 	bl	900006bc <clearInput>
    return;
900007ea:	e009      	b.n	90000800 <validateAndSetVoltage+0x58>
  }
  ctx->isVoltageEntered = true;
900007ec:	687b      	ldr	r3, [r7, #4]
900007ee:	2201      	movs	r2, #1
900007f0:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
900007f2:	687b      	ldr	r3, [r7, #4]
900007f4:	889a      	ldrh	r2, [r3, #4]
900007f6:	687b      	ldr	r3, [r7, #4]
900007f8:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
900007fa:	687b      	ldr	r3, [r7, #4]
900007fc:	2200      	movs	r2, #0
900007fe:	809a      	strh	r2, [r3, #4]
}
90000800:	3708      	adds	r7, #8
90000802:	46bd      	mov	sp, r7
90000804:	bdb0      	pop	{r4, r5, r7, pc}
90000806:	bf00      	nop
90000808:	9000d5f0 	.word	0x9000d5f0

9000080c <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
9000080c:	b4b0      	push	{r4, r5, r7}
9000080e:	b085      	sub	sp, #20
90000810:	af00      	add	r7, sp, #0
90000812:	6078      	str	r0, [r7, #4]
90000814:	460b      	mov	r3, r1
90000816:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
90000818:	78fb      	ldrb	r3, [r7, #3]
9000081a:	3b30      	subs	r3, #48	@ 0x30
9000081c:	73fb      	strb	r3, [r7, #15]
  if (ctx->inputValue > 40) {
9000081e:	687b      	ldr	r3, [r7, #4]
90000820:	889b      	ldrh	r3, [r3, #4]
90000822:	2b28      	cmp	r3, #40	@ 0x28
90000824:	d90a      	bls.n	9000083c <updateInput+0x30>
    strcpy(ctx->message, "Input too high!");
90000826:	687b      	ldr	r3, [r7, #4]
90000828:	3309      	adds	r3, #9
9000082a:	4a0d      	ldr	r2, [pc, #52]	@ (90000860 <updateInput+0x54>)
9000082c:	461c      	mov	r4, r3
9000082e:	4615      	mov	r5, r2
90000830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90000832:	6020      	str	r0, [r4, #0]
90000834:	6061      	str	r1, [r4, #4]
90000836:	60a2      	str	r2, [r4, #8]
90000838:	60e3      	str	r3, [r4, #12]
    return;
9000083a:	e00c      	b.n	90000856 <updateInput+0x4a>
  }
  ctx->inputValue = ctx->inputValue * 10 + digit;
9000083c:	687b      	ldr	r3, [r7, #4]
9000083e:	889b      	ldrh	r3, [r3, #4]
90000840:	461a      	mov	r2, r3
90000842:	0092      	lsls	r2, r2, #2
90000844:	4413      	add	r3, r2
90000846:	005b      	lsls	r3, r3, #1
90000848:	b29a      	uxth	r2, r3
9000084a:	7bfb      	ldrb	r3, [r7, #15]
9000084c:	b29b      	uxth	r3, r3
9000084e:	4413      	add	r3, r2
90000850:	b29a      	uxth	r2, r3
90000852:	687b      	ldr	r3, [r7, #4]
90000854:	809a      	strh	r2, [r3, #4]
}
90000856:	3714      	adds	r7, #20
90000858:	46bd      	mov	sp, r7
9000085a:	bcb0      	pop	{r4, r5, r7}
9000085c:	4770      	bx	lr
9000085e:	bf00      	nop
90000860:	9000d608 	.word	0x9000d608

90000864 <handle_event>:

bool handle_event(AppContext *ctx, KeyboardButton key)
{
90000864:	b580      	push	{r7, lr}
90000866:	b084      	sub	sp, #16
90000868:	af00      	add	r7, sp, #0
9000086a:	6078      	str	r0, [r7, #4]
9000086c:	460b      	mov	r3, r1
9000086e:	70fb      	strb	r3, [r7, #3]
  if (key == KEY_NULL)
90000870:	78fb      	ldrb	r3, [r7, #3]
90000872:	2b4e      	cmp	r3, #78	@ 0x4e
90000874:	d11f      	bne.n	900008b6 <handle_event+0x52>
  {
	  // cursor logic
	  uint32_t now = HAL_GetTick();
90000876:	f002 fd8b 	bl	90003390 <HAL_GetTick>
9000087a:	60f8      	str	r0, [r7, #12]
	  if (now - lastCursorTime > 500)
9000087c:	4b47      	ldr	r3, [pc, #284]	@ (9000099c <handle_event+0x138>)
9000087e:	681b      	ldr	r3, [r3, #0]
90000880:	68fa      	ldr	r2, [r7, #12]
90000882:	1ad3      	subs	r3, r2, r3
90000884:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
90000888:	d913      	bls.n	900008b2 <handle_event+0x4e>
	  {
		  ctx->displayCursor = !ctx->displayCursor;
9000088a:	687b      	ldr	r3, [r7, #4]
9000088c:	7a1b      	ldrb	r3, [r3, #8]
9000088e:	2b00      	cmp	r3, #0
90000890:	bf14      	ite	ne
90000892:	2301      	movne	r3, #1
90000894:	2300      	moveq	r3, #0
90000896:	b2db      	uxtb	r3, r3
90000898:	f083 0301 	eor.w	r3, r3, #1
9000089c:	b2db      	uxtb	r3, r3
9000089e:	f003 0301 	and.w	r3, r3, #1
900008a2:	b2da      	uxtb	r2, r3
900008a4:	687b      	ldr	r3, [r7, #4]
900008a6:	721a      	strb	r2, [r3, #8]
		  lastCursorTime = now;
900008a8:	4a3c      	ldr	r2, [pc, #240]	@ (9000099c <handle_event+0x138>)
900008aa:	68fb      	ldr	r3, [r7, #12]
900008ac:	6013      	str	r3, [r2, #0]
		  return true;
900008ae:	2301      	movs	r3, #1
900008b0:	e070      	b.n	90000994 <handle_event+0x130>
	  }
	  return false;
900008b2:	2300      	movs	r3, #0
900008b4:	e06e      	b.n	90000994 <handle_event+0x130>
  }
  strcpy(ctx->message, "");
900008b6:	687b      	ldr	r3, [r7, #4]
900008b8:	3309      	adds	r3, #9
900008ba:	2200      	movs	r2, #0
900008bc:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
900008be:	687b      	ldr	r3, [r7, #4]
900008c0:	781b      	ldrb	r3, [r3, #0]
900008c2:	2b00      	cmp	r3, #0
900008c4:	d145      	bne.n	90000952 <handle_event+0xee>
	if (ctx->isPwmRunning == true)
900008c6:	687b      	ldr	r3, [r7, #4]
900008c8:	79db      	ldrb	r3, [r3, #7]
900008ca:	2b00      	cmp	r3, #0
900008cc:	d007      	beq.n	900008de <handle_event+0x7a>
	{
	  if (key == KEY_Stop) stopPWM(ctx);
900008ce:	78fb      	ldrb	r3, [r7, #3]
900008d0:	2b73      	cmp	r3, #115	@ 0x73
900008d2:	d102      	bne.n	900008da <handle_event+0x76>
900008d4:	6878      	ldr	r0, [r7, #4]
900008d6:	f7ff ff25 	bl	90000724 <stopPWM>
	  return false; // when PWM is running, we can only press the "STOP" button
900008da:	2300      	movs	r3, #0
900008dc:	e05a      	b.n	90000994 <handle_event+0x130>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
900008de:	687b      	ldr	r3, [r7, #4]
900008e0:	799b      	ldrb	r3, [r3, #6]
900008e2:	2b00      	cmp	r3, #0
900008e4:	d00c      	beq.n	90000900 <handle_event+0x9c>
	{
	  if (key == KEY_Start) startPWM(ctx);
900008e6:	78fb      	ldrb	r3, [r7, #3]
900008e8:	2b53      	cmp	r3, #83	@ 0x53
900008ea:	d102      	bne.n	900008f2 <handle_event+0x8e>
900008ec:	6878      	ldr	r0, [r7, #4]
900008ee:	f7ff ff26 	bl	9000073e <startPWM>
      if (key == KEY_Clear) clearVoltage(ctx);
900008f2:	78fb      	ldrb	r3, [r7, #3]
900008f4:	2b63      	cmp	r3, #99	@ 0x63
900008f6:	d120      	bne.n	9000093a <handle_event+0xd6>
900008f8:	6878      	ldr	r0, [r7, #4]
900008fa:	f7ff feec 	bl	900006d6 <clearVoltage>
900008fe:	e01c      	b.n	9000093a <handle_event+0xd6>
	} else
	{
	  if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
90000900:	78fb      	ldrb	r3, [r7, #3]
90000902:	2b2f      	cmp	r3, #47	@ 0x2f
90000904:	d907      	bls.n	90000916 <handle_event+0xb2>
90000906:	78fb      	ldrb	r3, [r7, #3]
90000908:	2b39      	cmp	r3, #57	@ 0x39
9000090a:	d804      	bhi.n	90000916 <handle_event+0xb2>
9000090c:	78fb      	ldrb	r3, [r7, #3]
9000090e:	4619      	mov	r1, r3
90000910:	6878      	ldr	r0, [r7, #4]
90000912:	f7ff ff7b 	bl	9000080c <updateInput>
	  if (key == KEY_Enter) validateAndSetVoltage(ctx);
90000916:	78fb      	ldrb	r3, [r7, #3]
90000918:	2b65      	cmp	r3, #101	@ 0x65
9000091a:	d102      	bne.n	90000922 <handle_event+0xbe>
9000091c:	6878      	ldr	r0, [r7, #4]
9000091e:	f7ff ff43 	bl	900007a8 <validateAndSetVoltage>
	  if (key == KEY_BkSp) backspace(ctx);
90000922:	78fb      	ldrb	r3, [r7, #3]
90000924:	2b62      	cmp	r3, #98	@ 0x62
90000926:	d102      	bne.n	9000092e <handle_event+0xca>
90000928:	6878      	ldr	r0, [r7, #4]
9000092a:	f7ff fee5 	bl	900006f8 <backspace>
	  if (key == KEY_ESC) clearInput(ctx);
9000092e:	78fb      	ldrb	r3, [r7, #3]
90000930:	2b60      	cmp	r3, #96	@ 0x60
90000932:	d102      	bne.n	9000093a <handle_event+0xd6>
90000934:	6878      	ldr	r0, [r7, #4]
90000936:	f7ff fec1 	bl	900006bc <clearInput>
	}

    if (key == KEY_F2) setSTATE_F2(ctx);
9000093a:	78fb      	ldrb	r3, [r7, #3]
9000093c:	2b40      	cmp	r3, #64	@ 0x40
9000093e:	d102      	bne.n	90000946 <handle_event+0xe2>
90000940:	6878      	ldr	r0, [r7, #4]
90000942:	f7ff ff16 	bl	90000772 <setSTATE_F2>
    if (key == KEY_F3) setSTATE_F3(ctx);
90000946:	78fb      	ldrb	r3, [r7, #3]
90000948:	2b23      	cmp	r3, #35	@ 0x23
9000094a:	d102      	bne.n	90000952 <handle_event+0xee>
9000094c:	6878      	ldr	r0, [r7, #4]
9000094e:	f7ff ff03 	bl	90000758 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F2) {
90000952:	687b      	ldr	r3, [r7, #4]
90000954:	781b      	ldrb	r3, [r3, #0]
90000956:	2b01      	cmp	r3, #1
90000958:	d10b      	bne.n	90000972 <handle_event+0x10e>
	if (key == KEY_F1) setSTATE_F1(ctx);
9000095a:	78fb      	ldrb	r3, [r7, #3]
9000095c:	2b21      	cmp	r3, #33	@ 0x21
9000095e:	d102      	bne.n	90000966 <handle_event+0x102>
90000960:	6878      	ldr	r0, [r7, #4]
90000962:	f7ff ff13 	bl	9000078c <setSTATE_F1>
	if (key == KEY_F3) setSTATE_F3(ctx);
90000966:	78fb      	ldrb	r3, [r7, #3]
90000968:	2b23      	cmp	r3, #35	@ 0x23
9000096a:	d102      	bne.n	90000972 <handle_event+0x10e>
9000096c:	6878      	ldr	r0, [r7, #4]
9000096e:	f7ff fef3 	bl	90000758 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F3) {
90000972:	687b      	ldr	r3, [r7, #4]
90000974:	781b      	ldrb	r3, [r3, #0]
90000976:	2b02      	cmp	r3, #2
90000978:	d10b      	bne.n	90000992 <handle_event+0x12e>
	if (key == KEY_F1) setSTATE_F1(ctx);
9000097a:	78fb      	ldrb	r3, [r7, #3]
9000097c:	2b21      	cmp	r3, #33	@ 0x21
9000097e:	d102      	bne.n	90000986 <handle_event+0x122>
90000980:	6878      	ldr	r0, [r7, #4]
90000982:	f7ff ff03 	bl	9000078c <setSTATE_F1>
	if (key == KEY_F2) setSTATE_F2(ctx);
90000986:	78fb      	ldrb	r3, [r7, #3]
90000988:	2b40      	cmp	r3, #64	@ 0x40
9000098a:	d102      	bne.n	90000992 <handle_event+0x12e>
9000098c:	6878      	ldr	r0, [r7, #4]
9000098e:	f7ff fef0 	bl	90000772 <setSTATE_F2>
  }
return true;
90000992:	2301      	movs	r3, #1
}
90000994:	4618      	mov	r0, r3
90000996:	3710      	adds	r7, #16
90000998:	46bd      	mov	sp, r7
9000099a:	bd80      	pop	{r7, pc}
9000099c:	200000ec 	.word	0x200000ec

900009a0 <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
900009a0:	b480      	push	{r7}
900009a2:	b083      	sub	sp, #12
900009a4:	af00      	add	r7, sp, #0
900009a6:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
900009a8:	687b      	ldr	r3, [r7, #4]
900009aa:	2200      	movs	r2, #0
900009ac:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
900009ae:	687b      	ldr	r3, [r7, #4]
900009b0:	2200      	movs	r2, #0
900009b2:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
900009b4:	687b      	ldr	r3, [r7, #4]
900009b6:	2200      	movs	r2, #0
900009b8:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
900009ba:	687b      	ldr	r3, [r7, #4]
900009bc:	2200      	movs	r2, #0
900009be:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
900009c0:	687b      	ldr	r3, [r7, #4]
900009c2:	2200      	movs	r2, #0
900009c4:	809a      	strh	r2, [r3, #4]
}
900009c6:	bf00      	nop
900009c8:	370c      	adds	r7, #12
900009ca:	46bd      	mov	sp, r7
900009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900009d0:	4770      	bx	lr
	...

900009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900009d4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000a10 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900009d8:	f002 fc34 	bl	90003244 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900009dc:	f002 fbd0 	bl	90003180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900009e0:	480c      	ldr	r0, [pc, #48]	@ (90000a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900009e2:	490d      	ldr	r1, [pc, #52]	@ (90000a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900009e4:	4a0d      	ldr	r2, [pc, #52]	@ (90000a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
900009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
900009e8:	e002      	b.n	900009f0 <LoopCopyDataInit>

900009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900009ee:	3304      	adds	r3, #4

900009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
900009f4:	d3f9      	bcc.n	900009ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900009f6:	4a0a      	ldr	r2, [pc, #40]	@ (90000a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900009f8:	4c0a      	ldr	r4, [pc, #40]	@ (90000a24 <LoopFillZerobss+0x22>)
  movs r3, #0
900009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
900009fc:	e001      	b.n	90000a02 <LoopFillZerobss>

900009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000a00:	3204      	adds	r2, #4

90000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000a04:	d3fb      	bcc.n	900009fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000a06:	f00b ffc1 	bl	9000c98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000a0a:	f000 f827 	bl	90000a5c <main>
  bx  lr
90000a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000a18:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
90000a1c:	9000fcbc 	.word	0x9000fcbc
  ldr r2, =_sbss
90000a20:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
90000a24:	200014a0 	.word	0x200014a0

90000a28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000a28:	e7fe      	b.n	90000a28 <ADC3_IRQHandler>
	...

90000a2c <__io_putchar>:
static void Error_Handler(void);
static void CPU_CACHE_Enable(void);
static void MPU_Config(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
90000a2c:	b580      	push	{r7, lr}
90000a2e:	b082      	sub	sp, #8
90000a30:	af00      	add	r7, sp, #0
90000a32:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
90000a34:	1d39      	adds	r1, r7, #4
90000a36:	f04f 33ff 	mov.w	r3, #4294967295
90000a3a:	2201      	movs	r2, #1
90000a3c:	4806      	ldr	r0, [pc, #24]	@ (90000a58 <__io_putchar+0x2c>)
90000a3e:	f009 f9bb 	bl	90009db8 <HAL_UART_Transmit>
90000a42:	4603      	mov	r3, r0
90000a44:	2b00      	cmp	r3, #0
90000a46:	d002      	beq.n	90000a4e <__io_putchar+0x22>
    return -1;
90000a48:	f04f 33ff 	mov.w	r3, #4294967295
90000a4c:	e000      	b.n	90000a50 <__io_putchar+0x24>
  }
  return ch;
90000a4e:	687b      	ldr	r3, [r7, #4]
}
90000a50:	4618      	mov	r0, r3
90000a52:	3708      	adds	r7, #8
90000a54:	46bd      	mov	sp, r7
90000a56:	bd80      	pop	{r7, pc}
90000a58:	200000f0 	.word	0x200000f0

90000a5c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000a5c:	b580      	push	{r7, lr}
90000a5e:	b096      	sub	sp, #88	@ 0x58
90000a60:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000a62:	f000 fa8b 	bl	90000f7c <MPU_Config>
  CPU_CACHE_Enable();
90000a66:	f000 f9f7 	bl	90000e58 <CPU_CACHE_Enable>
  HAL_Init();
90000a6a:	f002 fc03 	bl	90003274 <HAL_Init>
  SystemClock_Config();
90000a6e:	f000 f8ef 	bl	90000c50 <SystemClock_Config>
  MX_USART3_UART_Init();
90000a72:	f000 f833 	bl	90000adc <MX_USART3_UART_Init>
  
  printf("Starting...\r\n");
90000a76:	4818      	ldr	r0, [pc, #96]	@ (90000ad8 <main+0x7c>)
90000a78:	f00b fe22 	bl	9000c6c0 <puts>

  AppContext ctx;
  InitializeAppContext(&ctx);
90000a7c:	1d3b      	adds	r3, r7, #4
90000a7e:	4618      	mov	r0, r3
90000a80:	f7ff ff8e 	bl	900009a0 <InitializeAppContext>

  InitializeLcd();
90000a84:	f000 fc1a 	bl	900012bc <InitializeLcd>
  UartClearScreen();
90000a88:	f000 fc56 	bl	90001338 <UartClearScreen>

  InitFlexiKeyboard(); // has to be AFTER InitializeLcd, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a8c:	f00a ff76 	bl	9000b97c <InitFlexiKeyboard>

  while (1)
  {
	  HAL_Delay(200);
90000a90:	20c8      	movs	r0, #200	@ 0xc8
90000a92:	f002 fc89 	bl	900033a8 <HAL_Delay>
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000a96:	f00a ff07 	bl	9000b8a8 <ReadFlexiKeyboard>
90000a9a:	4603      	mov	r3, r0
90000a9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  bool ctxChanged = handle_event(&ctx, key);
90000aa0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
90000aa4:	1d3b      	adds	r3, r7, #4
90000aa6:	4611      	mov	r1, r2
90000aa8:	4618      	mov	r0, r3
90000aaa:	f7ff fedb 	bl	90000864 <handle_event>
90000aae:	4603      	mov	r3, r0
90000ab0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	  if (!ctxChanged) continue;
90000ab4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
90000ab8:	f083 0301 	eor.w	r3, r3, #1
90000abc:	b2db      	uxtb	r3, r3
90000abe:	2b00      	cmp	r3, #0
90000ac0:	d108      	bne.n	90000ad4 <main+0x78>
	  UartRenderState(&ctx);
90000ac2:	1d3b      	adds	r3, r7, #4
90000ac4:	4618      	mov	r0, r3
90000ac6:	f000 fc45 	bl	90001354 <UartRenderState>
	  DisplayRenderState(&ctx);
90000aca:	1d3b      	adds	r3, r7, #4
90000acc:	4618      	mov	r0, r3
90000ace:	f000 fcc5 	bl	9000145c <DisplayRenderState>
90000ad2:	e7dd      	b.n	90000a90 <main+0x34>
	  if (!ctxChanged) continue;
90000ad4:	bf00      	nop
  {
90000ad6:	e7db      	b.n	90000a90 <main+0x34>
90000ad8:	9000d618 	.word	0x9000d618

90000adc <MX_USART3_UART_Init>:
  }
}

static void MX_USART3_UART_Init(void)
{
90000adc:	b580      	push	{r7, lr}
90000ade:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000ae0:	4b22      	ldr	r3, [pc, #136]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000ae2:	4a23      	ldr	r2, [pc, #140]	@ (90000b70 <MX_USART3_UART_Init+0x94>)
90000ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000ae6:	4b21      	ldr	r3, [pc, #132]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000aee:	4b1f      	ldr	r3, [pc, #124]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000af0:	2200      	movs	r2, #0
90000af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000af4:	4b1d      	ldr	r3, [pc, #116]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000af6:	2200      	movs	r2, #0
90000af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000afa:	4b1c      	ldr	r3, [pc, #112]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000afc:	2200      	movs	r2, #0
90000afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000b00:	4b1a      	ldr	r3, [pc, #104]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b02:	220c      	movs	r2, #12
90000b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000b06:	4b19      	ldr	r3, [pc, #100]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b08:	2200      	movs	r2, #0
90000b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000b0c:	4b17      	ldr	r3, [pc, #92]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b0e:	2200      	movs	r2, #0
90000b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000b12:	4b16      	ldr	r3, [pc, #88]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b14:	2200      	movs	r2, #0
90000b16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000b18:	4b14      	ldr	r3, [pc, #80]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b1a:	2200      	movs	r2, #0
90000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000b1e:	4b13      	ldr	r3, [pc, #76]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b20:	2200      	movs	r2, #0
90000b22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000b24:	4811      	ldr	r0, [pc, #68]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b26:	f009 f8f7 	bl	90009d18 <HAL_UART_Init>
90000b2a:	4603      	mov	r3, r0
90000b2c:	2b00      	cmp	r3, #0
90000b2e:	d001      	beq.n	90000b34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000b30:	f000 f88a 	bl	90000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b34:	2100      	movs	r1, #0
90000b36:	480d      	ldr	r0, [pc, #52]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b38:	f00a f98d 	bl	9000ae56 <HAL_UARTEx_SetTxFifoThreshold>
90000b3c:	4603      	mov	r3, r0
90000b3e:	2b00      	cmp	r3, #0
90000b40:	d001      	beq.n	90000b46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000b42:	f000 f881 	bl	90000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b46:	2100      	movs	r1, #0
90000b48:	4808      	ldr	r0, [pc, #32]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b4a:	f00a f9c2 	bl	9000aed2 <HAL_UARTEx_SetRxFifoThreshold>
90000b4e:	4603      	mov	r3, r0
90000b50:	2b00      	cmp	r3, #0
90000b52:	d001      	beq.n	90000b58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000b54:	f000 f878 	bl	90000c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000b58:	4804      	ldr	r0, [pc, #16]	@ (90000b6c <MX_USART3_UART_Init+0x90>)
90000b5a:	f00a f943 	bl	9000ade4 <HAL_UARTEx_DisableFifoMode>
90000b5e:	4603      	mov	r3, r0
90000b60:	2b00      	cmp	r3, #0
90000b62:	d001      	beq.n	90000b68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000b64:	f000 f870 	bl	90000c48 <Error_Handler>
  }
}
90000b68:	bf00      	nop
90000b6a:	bd80      	pop	{r7, pc}
90000b6c:	200000f0 	.word	0x200000f0
90000b70:	40004800 	.word	0x40004800

90000b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000b74:	b580      	push	{r7, lr}
90000b76:	b0ba      	sub	sp, #232	@ 0xe8
90000b78:	af00      	add	r7, sp, #0
90000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000b80:	2200      	movs	r2, #0
90000b82:	601a      	str	r2, [r3, #0]
90000b84:	605a      	str	r2, [r3, #4]
90000b86:	609a      	str	r2, [r3, #8]
90000b88:	60da      	str	r2, [r3, #12]
90000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b8c:	f107 0310 	add.w	r3, r7, #16
90000b90:	22c0      	movs	r2, #192	@ 0xc0
90000b92:	2100      	movs	r1, #0
90000b94:	4618      	mov	r0, r3
90000b96:	f00b fe95 	bl	9000c8c4 <memset>
  if(huart->Instance==USART3)
90000b9a:	687b      	ldr	r3, [r7, #4]
90000b9c:	681b      	ldr	r3, [r3, #0]
90000b9e:	4a27      	ldr	r2, [pc, #156]	@ (90000c3c <HAL_UART_MspInit+0xc8>)
90000ba0:	4293      	cmp	r3, r2
90000ba2:	d146      	bne.n	90000c32 <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000ba4:	f04f 0202 	mov.w	r2, #2
90000ba8:	f04f 0300 	mov.w	r3, #0
90000bac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000bb0:	2300      	movs	r3, #0
90000bb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000bb6:	f107 0310 	add.w	r3, r7, #16
90000bba:	4618      	mov	r0, r3
90000bbc:	f007 f876 	bl	90007cac <HAL_RCCEx_PeriphCLKConfig>
90000bc0:	4603      	mov	r3, r0
90000bc2:	2b00      	cmp	r3, #0
90000bc4:	d001      	beq.n	90000bca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000bc6:	f000 f83f 	bl	90000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000bca:	4b1d      	ldr	r3, [pc, #116]	@ (90000c40 <HAL_UART_MspInit+0xcc>)
90000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (90000c40 <HAL_UART_MspInit+0xcc>)
90000bd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000bda:	4b19      	ldr	r3, [pc, #100]	@ (90000c40 <HAL_UART_MspInit+0xcc>)
90000bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000be0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000be4:	60fb      	str	r3, [r7, #12]
90000be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000be8:	4b15      	ldr	r3, [pc, #84]	@ (90000c40 <HAL_UART_MspInit+0xcc>)
90000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000bee:	4a14      	ldr	r2, [pc, #80]	@ (90000c40 <HAL_UART_MspInit+0xcc>)
90000bf0:	f043 0302 	orr.w	r3, r3, #2
90000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000bf8:	4b11      	ldr	r3, [pc, #68]	@ (90000c40 <HAL_UART_MspInit+0xcc>)
90000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000bfe:	f003 0302 	and.w	r3, r3, #2
90000c02:	60bb      	str	r3, [r7, #8]
90000c04:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000c06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c0e:	2302      	movs	r3, #2
90000c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c14:	2300      	movs	r3, #0
90000c16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c1a:	2300      	movs	r3, #0
90000c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000c20:	2307      	movs	r3, #7
90000c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000c26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000c2a:	4619      	mov	r1, r3
90000c2c:	4805      	ldr	r0, [pc, #20]	@ (90000c44 <HAL_UART_MspInit+0xd0>)
90000c2e:	f003 f859 	bl	90003ce4 <HAL_GPIO_Init>
  }
}
90000c32:	bf00      	nop
90000c34:	37e8      	adds	r7, #232	@ 0xe8
90000c36:	46bd      	mov	sp, r7
90000c38:	bd80      	pop	{r7, pc}
90000c3a:	bf00      	nop
90000c3c:	40004800 	.word	0x40004800
90000c40:	58024400 	.word	0x58024400
90000c44:	58020400 	.word	0x58020400

90000c48 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000c48:	b480      	push	{r7}
90000c4a:	af00      	add	r7, sp, #0
  while(1)
90000c4c:	bf00      	nop
90000c4e:	e7fd      	b.n	90000c4c <Error_Handler+0x4>

90000c50 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000c50:	b580      	push	{r7, lr}
90000c52:	b0ce      	sub	sp, #312	@ 0x138
90000c54:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000c56:	2300      	movs	r3, #0
90000c58:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000c5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c64:	2200      	movs	r2, #0
90000c66:	601a      	str	r2, [r3, #0]
90000c68:	4b78      	ldr	r3, [pc, #480]	@ (90000e4c <SystemClock_Config+0x1fc>)
90000c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c6c:	4a77      	ldr	r2, [pc, #476]	@ (90000e4c <SystemClock_Config+0x1fc>)
90000c6e:	f023 0301 	bic.w	r3, r3, #1
90000c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000c74:	4b75      	ldr	r3, [pc, #468]	@ (90000e4c <SystemClock_Config+0x1fc>)
90000c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c78:	f003 0201 	and.w	r2, r3, #1
90000c7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c84:	601a      	str	r2, [r3, #0]
90000c86:	4b72      	ldr	r3, [pc, #456]	@ (90000e50 <SystemClock_Config+0x200>)
90000c88:	699b      	ldr	r3, [r3, #24]
90000c8a:	4a71      	ldr	r2, [pc, #452]	@ (90000e50 <SystemClock_Config+0x200>)
90000c8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000c90:	6193      	str	r3, [r2, #24]
90000c92:	4b6f      	ldr	r3, [pc, #444]	@ (90000e50 <SystemClock_Config+0x200>)
90000c94:	699b      	ldr	r3, [r3, #24]
90000c96:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000c9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c9e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000ca2:	601a      	str	r2, [r3, #0]
90000ca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ca8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000cac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000cae:	bf00      	nop
90000cb0:	4b67      	ldr	r3, [pc, #412]	@ (90000e50 <SystemClock_Config+0x200>)
90000cb2:	699b      	ldr	r3, [r3, #24]
90000cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000cbc:	d1f8      	bne.n	90000cb0 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000cbe:	2301      	movs	r3, #1
90000cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000cc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000ccc:	2300      	movs	r3, #0
90000cce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000cd2:	2300      	movs	r3, #0
90000cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000cd8:	2302      	movs	r3, #2
90000cda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000cde:	2302      	movs	r3, #2
90000ce0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000ce4:	2305      	movs	r3, #5
90000ce6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000cea:	23a0      	movs	r3, #160	@ 0xa0
90000cec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000cf0:	2300      	movs	r3, #0
90000cf2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000cf6:	2302      	movs	r3, #2
90000cf8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000cfc:	2302      	movs	r3, #2
90000cfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000d02:	2304      	movs	r3, #4
90000d04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000d08:	2300      	movs	r3, #0
90000d0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000d0e:	2308      	movs	r3, #8
90000d10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000d14:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000d18:	4618      	mov	r0, r3
90000d1a:	f005 ffe1 	bl	90006ce0 <HAL_RCC_OscConfig>
90000d1e:	4603      	mov	r3, r0
90000d20:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000d24:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000d28:	2b00      	cmp	r3, #0
90000d2a:	d001      	beq.n	90000d30 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000d2c:	f7ff ff8c 	bl	90000c48 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d38:	2205      	movs	r2, #5
90000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000d3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d44:	2260      	movs	r2, #96	@ 0x60
90000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d50:	2202      	movs	r2, #2
90000d52:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000d54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d58:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d5c:	220a      	movs	r2, #10
90000d5e:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000d60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d64:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d68:	2212      	movs	r2, #18
90000d6a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000d6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d70:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d74:	2200      	movs	r2, #0
90000d76:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000d78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d7c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000d84:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d8a:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000d8e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000d92:	f04f 0300 	mov.w	r3, #0
90000d96:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000d9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d9e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000da2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000daa:	f107 0308 	add.w	r3, r7, #8
90000dae:	4618      	mov	r0, r3
90000db0:	f006 ff7c 	bl	90007cac <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000db4:	233f      	movs	r3, #63	@ 0x3f
90000db6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000dba:	2303      	movs	r3, #3
90000dbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000dc0:	2300      	movs	r3, #0
90000dc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000dc6:	2308      	movs	r3, #8
90000dc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000dcc:	2340      	movs	r3, #64	@ 0x40
90000dce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000dd2:	2340      	movs	r3, #64	@ 0x40
90000dd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000ddc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000de0:	2340      	movs	r3, #64	@ 0x40
90000de2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000de6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000dea:	2104      	movs	r1, #4
90000dec:	4618      	mov	r0, r3
90000dee:	f006 fbd1 	bl	90007594 <HAL_RCC_ClockConfig>
90000df2:	4603      	mov	r3, r0
90000df4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000df8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000dfc:	2b00      	cmp	r3, #0
90000dfe:	d001      	beq.n	90000e04 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000e00:	f7ff ff22 	bl	90000c48 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000e04:	4b13      	ldr	r3, [pc, #76]	@ (90000e54 <SystemClock_Config+0x204>)
90000e06:	681b      	ldr	r3, [r3, #0]
90000e08:	4a12      	ldr	r2, [pc, #72]	@ (90000e54 <SystemClock_Config+0x204>)
90000e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000e0e:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000e10:	4b10      	ldr	r3, [pc, #64]	@ (90000e54 <SystemClock_Config+0x204>)
90000e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000e16:	4a0f      	ldr	r2, [pc, #60]	@ (90000e54 <SystemClock_Config+0x204>)
90000e18:	f043 0302 	orr.w	r3, r3, #2
90000e1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000e20:	4b0c      	ldr	r3, [pc, #48]	@ (90000e54 <SystemClock_Config+0x204>)
90000e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000e26:	f003 0202 	and.w	r2, r3, #2
90000e2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e32:	601a      	str	r2, [r3, #0]
90000e34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e3c:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000e3e:	f002 fae3 	bl	90003408 <HAL_EnableCompensationCell>
}
90000e42:	bf00      	nop
90000e44:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000e48:	46bd      	mov	sp, r7
90000e4a:	bd80      	pop	{r7, pc}
90000e4c:	58000400 	.word	0x58000400
90000e50:	58024800 	.word	0x58024800
90000e54:	58024400 	.word	0x58024400

90000e58 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000e58:	b480      	push	{r7}
90000e5a:	b085      	sub	sp, #20
90000e5c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e5e:	4b34      	ldr	r3, [pc, #208]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000e60:	695b      	ldr	r3, [r3, #20]
90000e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000e66:	2b00      	cmp	r3, #0
90000e68:	d11b      	bne.n	90000ea2 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000e6a:	f3bf 8f4f 	dsb	sy
}
90000e6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e70:	f3bf 8f6f 	isb	sy
}
90000e74:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000e76:	4b2e      	ldr	r3, [pc, #184]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000e78:	2200      	movs	r2, #0
90000e7a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000e7e:	f3bf 8f4f 	dsb	sy
}
90000e82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e84:	f3bf 8f6f 	isb	sy
}
90000e88:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000e8a:	4b29      	ldr	r3, [pc, #164]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000e8c:	695b      	ldr	r3, [r3, #20]
90000e8e:	4a28      	ldr	r2, [pc, #160]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000e94:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e96:	f3bf 8f4f 	dsb	sy
}
90000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e9c:	f3bf 8f6f 	isb	sy
}
90000ea0:	e000      	b.n	90000ea4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000ea2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000ea4:	4b22      	ldr	r3, [pc, #136]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000ea6:	695b      	ldr	r3, [r3, #20]
90000ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000eac:	2b00      	cmp	r3, #0
90000eae:	d138      	bne.n	90000f22 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000eb2:	2200      	movs	r2, #0
90000eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000eb8:	f3bf 8f4f 	dsb	sy
}
90000ebc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000ec4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000ec6:	68fb      	ldr	r3, [r7, #12]
90000ec8:	0b5b      	lsrs	r3, r3, #13
90000eca:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000ece:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000ed0:	68fb      	ldr	r3, [r7, #12]
90000ed2:	08db      	lsrs	r3, r3, #3
90000ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000ed8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000eda:	68bb      	ldr	r3, [r7, #8]
90000edc:	015a      	lsls	r2, r3, #5
90000ede:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000ee2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000ee4:	687a      	ldr	r2, [r7, #4]
90000ee6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000ee8:	4911      	ldr	r1, [pc, #68]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000eea:	4313      	orrs	r3, r2
90000eec:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000ef0:	687b      	ldr	r3, [r7, #4]
90000ef2:	1e5a      	subs	r2, r3, #1
90000ef4:	607a      	str	r2, [r7, #4]
90000ef6:	2b00      	cmp	r3, #0
90000ef8:	d1ef      	bne.n	90000eda <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000efa:	68bb      	ldr	r3, [r7, #8]
90000efc:	1e5a      	subs	r2, r3, #1
90000efe:	60ba      	str	r2, [r7, #8]
90000f00:	2b00      	cmp	r3, #0
90000f02:	d1e5      	bne.n	90000ed0 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000f04:	f3bf 8f4f 	dsb	sy
}
90000f08:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000f0a:	4b09      	ldr	r3, [pc, #36]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000f0c:	695b      	ldr	r3, [r3, #20]
90000f0e:	4a08      	ldr	r2, [pc, #32]	@ (90000f30 <CPU_CACHE_Enable+0xd8>)
90000f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000f14:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000f16:	f3bf 8f4f 	dsb	sy
}
90000f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000f1c:	f3bf 8f6f 	isb	sy
}
90000f20:	e000      	b.n	90000f24 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000f22:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000f24:	bf00      	nop
90000f26:	3714      	adds	r7, #20
90000f28:	46bd      	mov	sp, r7
90000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f2e:	4770      	bx	lr
90000f30:	e000ed00 	.word	0xe000ed00

90000f34 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000f34:	b580      	push	{r7, lr}
90000f36:	b082      	sub	sp, #8
90000f38:	af00      	add	r7, sp, #0
90000f3a:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000f3c:	490e      	ldr	r1, [pc, #56]	@ (90000f78 <MX_LTDC_ClockConfig+0x44>)
90000f3e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000f42:	f04f 0300 	mov.w	r3, #0
90000f46:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (90000f78 <MX_LTDC_ClockConfig+0x44>)
90000f4c:	2205      	movs	r2, #5
90000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000f50:	4b09      	ldr	r3, [pc, #36]	@ (90000f78 <MX_LTDC_ClockConfig+0x44>)
90000f52:	22c0      	movs	r2, #192	@ 0xc0
90000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000f56:	4b08      	ldr	r3, [pc, #32]	@ (90000f78 <MX_LTDC_ClockConfig+0x44>)
90000f58:	2202      	movs	r2, #2
90000f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000f5c:	4b06      	ldr	r3, [pc, #24]	@ (90000f78 <MX_LTDC_ClockConfig+0x44>)
90000f5e:	2214      	movs	r2, #20
90000f60:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000f62:	4b05      	ldr	r3, [pc, #20]	@ (90000f78 <MX_LTDC_ClockConfig+0x44>)
90000f64:	2263      	movs	r2, #99	@ 0x63
90000f66:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000f68:	4803      	ldr	r0, [pc, #12]	@ (90000f78 <MX_LTDC_ClockConfig+0x44>)
90000f6a:	f006 fe9f 	bl	90007cac <HAL_RCCEx_PeriphCLKConfig>
90000f6e:	4603      	mov	r3, r0
}
90000f70:	4618      	mov	r0, r3
90000f72:	3708      	adds	r7, #8
90000f74:	46bd      	mov	sp, r7
90000f76:	bd80      	pop	{r7, pc}
90000f78:	20000188 	.word	0x20000188

90000f7c <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000f7c:	b580      	push	{r7, lr}
90000f7e:	b084      	sub	sp, #16
90000f80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000f82:	f002 fb61 	bl	90003648 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000f86:	2301      	movs	r3, #1
90000f88:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000f8a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000f8e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000f90:	2318      	movs	r3, #24
90000f92:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000f94:	2303      	movs	r3, #3
90000f96:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000f98:	2300      	movs	r3, #0
90000f9a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000f9c:	2301      	movs	r3, #1
90000f9e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000fa0:	2300      	movs	r3, #0
90000fa2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000fa4:	2301      	movs	r3, #1
90000fa6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000fa8:	2300      	movs	r3, #0
90000faa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000fac:	2300      	movs	r3, #0
90000fae:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000fb0:	2300      	movs	r3, #0
90000fb2:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000fb4:	463b      	mov	r3, r7
90000fb6:	4618      	mov	r0, r3
90000fb8:	f002 fb7e 	bl	900036b8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000fbc:	2004      	movs	r0, #4
90000fbe:	f002 fb5b 	bl	90003678 <HAL_MPU_Enable>
}
90000fc2:	bf00      	nop
90000fc4:	3710      	adds	r7, #16
90000fc6:	46bd      	mov	sp, r7
90000fc8:	bd80      	pop	{r7, pc}

90000fca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000fca:	b480      	push	{r7}
90000fcc:	af00      	add	r7, sp, #0
}
90000fce:	bf00      	nop
90000fd0:	46bd      	mov	sp, r7
90000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fd6:	4770      	bx	lr

90000fd8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000fd8:	b480      	push	{r7}
90000fda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000fdc:	bf00      	nop
90000fde:	e7fd      	b.n	90000fdc <HardFault_Handler+0x4>

90000fe0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000fe0:	b480      	push	{r7}
90000fe2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000fe4:	bf00      	nop
90000fe6:	e7fd      	b.n	90000fe4 <MemManage_Handler+0x4>

90000fe8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000fe8:	b480      	push	{r7}
90000fea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000fec:	bf00      	nop
90000fee:	e7fd      	b.n	90000fec <BusFault_Handler+0x4>

90000ff0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000ff0:	b480      	push	{r7}
90000ff2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000ff4:	bf00      	nop
90000ff6:	e7fd      	b.n	90000ff4 <UsageFault_Handler+0x4>

90000ff8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000ff8:	b480      	push	{r7}
90000ffa:	af00      	add	r7, sp, #0
}
90000ffc:	bf00      	nop
90000ffe:	46bd      	mov	sp, r7
90001000:	f85d 7b04 	ldr.w	r7, [sp], #4
90001004:	4770      	bx	lr

90001006 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90001006:	b480      	push	{r7}
90001008:	af00      	add	r7, sp, #0
}
9000100a:	bf00      	nop
9000100c:	46bd      	mov	sp, r7
9000100e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001012:	4770      	bx	lr

90001014 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90001014:	b480      	push	{r7}
90001016:	af00      	add	r7, sp, #0
}
90001018:	bf00      	nop
9000101a:	46bd      	mov	sp, r7
9000101c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001020:	4770      	bx	lr

90001022 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90001022:	b580      	push	{r7, lr}
90001024:	af00      	add	r7, sp, #0
  HAL_IncTick();
90001026:	f002 f99f 	bl	90003368 <HAL_IncTick>
}
9000102a:	bf00      	nop
9000102c:	bd80      	pop	{r7, pc}
	...

90001030 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90001030:	b580      	push	{r7, lr}
90001032:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90001034:	4802      	ldr	r0, [pc, #8]	@ (90001040 <OTG_FS_IRQHandler+0x10>)
90001036:	f003 f836 	bl	900040a6 <HAL_HCD_IRQHandler>
}
9000103a:	bf00      	nop
9000103c:	bd80      	pop	{r7, pc}
9000103e:	bf00      	nop
90001040:	2000024c 	.word	0x2000024c

90001044 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001044:	b580      	push	{r7, lr}
90001046:	b086      	sub	sp, #24
90001048:	af00      	add	r7, sp, #0
9000104a:	60f8      	str	r0, [r7, #12]
9000104c:	60b9      	str	r1, [r7, #8]
9000104e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001050:	2300      	movs	r3, #0
90001052:	617b      	str	r3, [r7, #20]
90001054:	e00a      	b.n	9000106c <_read+0x28>
  {
    *ptr++ = __io_getchar();
90001056:	f3af 8000 	nop.w
9000105a:	4601      	mov	r1, r0
9000105c:	68bb      	ldr	r3, [r7, #8]
9000105e:	1c5a      	adds	r2, r3, #1
90001060:	60ba      	str	r2, [r7, #8]
90001062:	b2ca      	uxtb	r2, r1
90001064:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001066:	697b      	ldr	r3, [r7, #20]
90001068:	3301      	adds	r3, #1
9000106a:	617b      	str	r3, [r7, #20]
9000106c:	697a      	ldr	r2, [r7, #20]
9000106e:	687b      	ldr	r3, [r7, #4]
90001070:	429a      	cmp	r2, r3
90001072:	dbf0      	blt.n	90001056 <_read+0x12>
  }

  return len;
90001074:	687b      	ldr	r3, [r7, #4]
}
90001076:	4618      	mov	r0, r3
90001078:	3718      	adds	r7, #24
9000107a:	46bd      	mov	sp, r7
9000107c:	bd80      	pop	{r7, pc}

9000107e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000107e:	b580      	push	{r7, lr}
90001080:	b086      	sub	sp, #24
90001082:	af00      	add	r7, sp, #0
90001084:	60f8      	str	r0, [r7, #12]
90001086:	60b9      	str	r1, [r7, #8]
90001088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000108a:	2300      	movs	r3, #0
9000108c:	617b      	str	r3, [r7, #20]
9000108e:	e009      	b.n	900010a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
90001090:	68bb      	ldr	r3, [r7, #8]
90001092:	1c5a      	adds	r2, r3, #1
90001094:	60ba      	str	r2, [r7, #8]
90001096:	781b      	ldrb	r3, [r3, #0]
90001098:	4618      	mov	r0, r3
9000109a:	f7ff fcc7 	bl	90000a2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000109e:	697b      	ldr	r3, [r7, #20]
900010a0:	3301      	adds	r3, #1
900010a2:	617b      	str	r3, [r7, #20]
900010a4:	697a      	ldr	r2, [r7, #20]
900010a6:	687b      	ldr	r3, [r7, #4]
900010a8:	429a      	cmp	r2, r3
900010aa:	dbf1      	blt.n	90001090 <_write+0x12>
  }
  return len;
900010ac:	687b      	ldr	r3, [r7, #4]
}
900010ae:	4618      	mov	r0, r3
900010b0:	3718      	adds	r7, #24
900010b2:	46bd      	mov	sp, r7
900010b4:	bd80      	pop	{r7, pc}

900010b6 <_close>:

int _close(int file)
{
900010b6:	b480      	push	{r7}
900010b8:	b083      	sub	sp, #12
900010ba:	af00      	add	r7, sp, #0
900010bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
900010be:	f04f 33ff 	mov.w	r3, #4294967295
}
900010c2:	4618      	mov	r0, r3
900010c4:	370c      	adds	r7, #12
900010c6:	46bd      	mov	sp, r7
900010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900010cc:	4770      	bx	lr

900010ce <_fstat>:


int _fstat(int file, struct stat *st)
{
900010ce:	b480      	push	{r7}
900010d0:	b083      	sub	sp, #12
900010d2:	af00      	add	r7, sp, #0
900010d4:	6078      	str	r0, [r7, #4]
900010d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
900010d8:	683b      	ldr	r3, [r7, #0]
900010da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
900010de:	605a      	str	r2, [r3, #4]
  return 0;
900010e0:	2300      	movs	r3, #0
}
900010e2:	4618      	mov	r0, r3
900010e4:	370c      	adds	r7, #12
900010e6:	46bd      	mov	sp, r7
900010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
900010ec:	4770      	bx	lr

900010ee <_isatty>:

int _isatty(int file)
{
900010ee:	b480      	push	{r7}
900010f0:	b083      	sub	sp, #12
900010f2:	af00      	add	r7, sp, #0
900010f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
900010f6:	2301      	movs	r3, #1
}
900010f8:	4618      	mov	r0, r3
900010fa:	370c      	adds	r7, #12
900010fc:	46bd      	mov	sp, r7
900010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90001102:	4770      	bx	lr

90001104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001104:	b480      	push	{r7}
90001106:	b085      	sub	sp, #20
90001108:	af00      	add	r7, sp, #0
9000110a:	60f8      	str	r0, [r7, #12]
9000110c:	60b9      	str	r1, [r7, #8]
9000110e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90001110:	2300      	movs	r3, #0
}
90001112:	4618      	mov	r0, r3
90001114:	3714      	adds	r7, #20
90001116:	46bd      	mov	sp, r7
90001118:	f85d 7b04 	ldr.w	r7, [sp], #4
9000111c:	4770      	bx	lr
	...

90001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001120:	b580      	push	{r7, lr}
90001122:	b086      	sub	sp, #24
90001124:	af00      	add	r7, sp, #0
90001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001128:	4a14      	ldr	r2, [pc, #80]	@ (9000117c <_sbrk+0x5c>)
9000112a:	4b15      	ldr	r3, [pc, #84]	@ (90001180 <_sbrk+0x60>)
9000112c:	1ad3      	subs	r3, r2, r3
9000112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001130:	697b      	ldr	r3, [r7, #20]
90001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001134:	4b13      	ldr	r3, [pc, #76]	@ (90001184 <_sbrk+0x64>)
90001136:	681b      	ldr	r3, [r3, #0]
90001138:	2b00      	cmp	r3, #0
9000113a:	d102      	bne.n	90001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
9000113c:	4b11      	ldr	r3, [pc, #68]	@ (90001184 <_sbrk+0x64>)
9000113e:	4a12      	ldr	r2, [pc, #72]	@ (90001188 <_sbrk+0x68>)
90001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001142:	4b10      	ldr	r3, [pc, #64]	@ (90001184 <_sbrk+0x64>)
90001144:	681a      	ldr	r2, [r3, #0]
90001146:	687b      	ldr	r3, [r7, #4]
90001148:	4413      	add	r3, r2
9000114a:	693a      	ldr	r2, [r7, #16]
9000114c:	429a      	cmp	r2, r3
9000114e:	d207      	bcs.n	90001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
90001150:	f00b fc16 	bl	9000c980 <__errno>
90001154:	4603      	mov	r3, r0
90001156:	220c      	movs	r2, #12
90001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
9000115a:	f04f 33ff 	mov.w	r3, #4294967295
9000115e:	e009      	b.n	90001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001160:	4b08      	ldr	r3, [pc, #32]	@ (90001184 <_sbrk+0x64>)
90001162:	681b      	ldr	r3, [r3, #0]
90001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001166:	4b07      	ldr	r3, [pc, #28]	@ (90001184 <_sbrk+0x64>)
90001168:	681a      	ldr	r2, [r3, #0]
9000116a:	687b      	ldr	r3, [r7, #4]
9000116c:	4413      	add	r3, r2
9000116e:	4a05      	ldr	r2, [pc, #20]	@ (90001184 <_sbrk+0x64>)
90001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001172:	68fb      	ldr	r3, [r7, #12]
}
90001174:	4618      	mov	r0, r3
90001176:	3718      	adds	r7, #24
90001178:	46bd      	mov	sp, r7
9000117a:	bd80      	pop	{r7, pc}
9000117c:	20020000 	.word	0x20020000
90001180:	00001000 	.word	0x00001000
90001184:	20000248 	.word	0x20000248
90001188:	200014a0 	.word	0x200014a0

9000118c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
9000118c:	b580      	push	{r7, lr}
9000118e:	b082      	sub	sp, #8
90001190:	af00      	add	r7, sp, #0
90001192:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001194:	687b      	ldr	r3, [r7, #4]
90001196:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000119a:	4618      	mov	r0, r3
9000119c:	f00a fcb8 	bl	9000bb10 <USBH_LL_IncTimer>
}
900011a0:	bf00      	nop
900011a2:	3708      	adds	r7, #8
900011a4:	46bd      	mov	sp, r7
900011a6:	bd80      	pop	{r7, pc}

900011a8 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
900011a8:	b580      	push	{r7, lr}
900011aa:	b082      	sub	sp, #8
900011ac:	af00      	add	r7, sp, #0
900011ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
900011b0:	687b      	ldr	r3, [r7, #4]
900011b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011b6:	4618      	mov	r0, r3
900011b8:	f00a fcf4 	bl	9000bba4 <USBH_LL_Connect>
}
900011bc:	bf00      	nop
900011be:	3708      	adds	r7, #8
900011c0:	46bd      	mov	sp, r7
900011c2:	bd80      	pop	{r7, pc}

900011c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
900011c4:	b580      	push	{r7, lr}
900011c6:	b082      	sub	sp, #8
900011c8:	af00      	add	r7, sp, #0
900011ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
900011cc:	687b      	ldr	r3, [r7, #4]
900011ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011d2:	4618      	mov	r0, r3
900011d4:	f00a fcfd 	bl	9000bbd2 <USBH_LL_Disconnect>
}
900011d8:	bf00      	nop
900011da:	3708      	adds	r7, #8
900011dc:	46bd      	mov	sp, r7
900011de:	bd80      	pop	{r7, pc}

900011e0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011e0:	b580      	push	{r7, lr}
900011e2:	b082      	sub	sp, #8
900011e4:	af00      	add	r7, sp, #0
900011e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
900011e8:	687b      	ldr	r3, [r7, #4]
900011ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011ee:	4618      	mov	r0, r3
900011f0:	f00a fcb8 	bl	9000bb64 <USBH_LL_PortEnabled>
}
900011f4:	bf00      	nop
900011f6:	3708      	adds	r7, #8
900011f8:	46bd      	mov	sp, r7
900011fa:	bd80      	pop	{r7, pc}

900011fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011fc:	b580      	push	{r7, lr}
900011fe:	b082      	sub	sp, #8
90001200:	af00      	add	r7, sp, #0
90001202:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90001204:	687b      	ldr	r3, [r7, #4]
90001206:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000120a:	4618      	mov	r0, r3
9000120c:	f00a fcb8 	bl	9000bb80 <USBH_LL_PortDisabled>
}
90001210:	bf00      	nop
90001212:	3708      	adds	r7, #8
90001214:	46bd      	mov	sp, r7
90001216:	bd80      	pop	{r7, pc}

90001218 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001218:	b480      	push	{r7}
9000121a:	b083      	sub	sp, #12
9000121c:	af00      	add	r7, sp, #0
9000121e:	6078      	str	r0, [r7, #4]
90001220:	460b      	mov	r3, r1
90001222:	70fb      	strb	r3, [r7, #3]
90001224:	4613      	mov	r3, r2
90001226:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90001228:	bf00      	nop
9000122a:	370c      	adds	r7, #12
9000122c:	46bd      	mov	sp, r7
9000122e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001232:	4770      	bx	lr

90001234 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90001234:	b580      	push	{r7, lr}
90001236:	b082      	sub	sp, #8
90001238:	af00      	add	r7, sp, #0
9000123a:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
9000123c:	687b      	ldr	r3, [r7, #4]
9000123e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001242:	4618      	mov	r0, r3
90001244:	f003 f83f 	bl	900042c6 <HAL_HCD_Stop>
  return USBH_OK;
90001248:	2300      	movs	r3, #0
}
9000124a:	4618      	mov	r0, r3
9000124c:	3708      	adds	r7, #8
9000124e:	46bd      	mov	sp, r7
90001250:	bd80      	pop	{r7, pc}
	...

90001254 <ClearCache>:

uint32_t x_size, y_size;
#define LCD_LINE_WIDTH 24

void ClearCache()
{
90001254:	b480      	push	{r7}
90001256:	b085      	sub	sp, #20
90001258:	af00      	add	r7, sp, #0
9000125a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
9000125e:	60fb      	str	r3, [r7, #12]
90001260:	f44f 23ff 	mov.w	r3, #522240	@ 0x7f800
90001264:	60bb      	str	r3, [r7, #8]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
90001266:	68bb      	ldr	r3, [r7, #8]
90001268:	2b00      	cmp	r3, #0
9000126a:	dd1d      	ble.n	900012a8 <ClearCache+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
9000126c:	68fb      	ldr	r3, [r7, #12]
9000126e:	f003 021f 	and.w	r2, r3, #31
90001272:	68bb      	ldr	r3, [r7, #8]
90001274:	4413      	add	r3, r2
90001276:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
90001278:	68fb      	ldr	r3, [r7, #12]
9000127a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
9000127c:	f3bf 8f4f 	dsb	sy
}
90001280:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
90001282:	4a0d      	ldr	r2, [pc, #52]	@ (900012b8 <ClearCache+0x64>)
90001284:	683b      	ldr	r3, [r7, #0]
90001286:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
9000128a:	683b      	ldr	r3, [r7, #0]
9000128c:	3320      	adds	r3, #32
9000128e:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
90001290:	687b      	ldr	r3, [r7, #4]
90001292:	3b20      	subs	r3, #32
90001294:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
90001296:	687b      	ldr	r3, [r7, #4]
90001298:	2b00      	cmp	r3, #0
9000129a:	dcf2      	bgt.n	90001282 <ClearCache+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
9000129c:	f3bf 8f4f 	dsb	sy
}
900012a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900012a2:	f3bf 8f6f 	isb	sy
}
900012a6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
900012a8:	bf00      	nop
	// otherwise I get LCD artefacts
	SCB_CleanDCache_by_Addr((void *)SDRAM_DEVICE_ADDR, 480*272*4);
}
900012aa:	bf00      	nop
900012ac:	3714      	adds	r7, #20
900012ae:	46bd      	mov	sp, r7
900012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900012b4:	4770      	bx	lr
900012b6:	bf00      	nop
900012b8:	e000ed00 	.word	0xe000ed00

900012bc <InitializeLcd>:

void InitializeLcd(void)
{
900012bc:	b580      	push	{r7, lr}
900012be:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
900012c0:	2101      	movs	r1, #1
900012c2:	2000      	movs	r0, #0
900012c4:	f000 fefc 	bl	900020c0 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
900012c8:	480f      	ldr	r0, [pc, #60]	@ (90001308 <InitializeLcd+0x4c>)
900012ca:	f00a fcc7 	bl	9000bc5c <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
900012ce:	2000      	movs	r0, #0
900012d0:	f00a fd1a 	bl	9000bd08 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
900012d4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900012d8:	f00a fd8c 	bl	9000bdf4 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
900012dc:	490b      	ldr	r1, [pc, #44]	@ (9000130c <InitializeLcd+0x50>)
900012de:	2000      	movs	r0, #0
900012e0:	f001 f8a8 	bl	90002434 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
900012e4:	490a      	ldr	r1, [pc, #40]	@ (90001310 <InitializeLcd+0x54>)
900012e6:	2000      	movs	r0, #0
900012e8:	f001 f8c2 	bl	90002470 <BSP_LCD_GetYSize>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
900012ec:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
900012f0:	f00a fd28 	bl	9000bd44 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
900012f4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900012f8:	f00a fd38 	bl	9000bd6c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
900012fc:	4805      	ldr	r0, [pc, #20]	@ (90001314 <InitializeLcd+0x58>)
900012fe:	f00a fd49 	bl	9000bd94 <UTIL_LCD_SetFont>
}
90001302:	bf00      	nop
90001304:	bd80      	pop	{r7, pc}
90001306:	bf00      	nop
90001308:	9000d858 	.word	0x9000d858
9000130c:	2000062c 	.word	0x2000062c
90001310:	20000630 	.word	0x20000630
90001314:	20000068 	.word	0x20000068

90001318 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
90001318:	b580      	push	{r7, lr}
9000131a:	b082      	sub	sp, #8
9000131c:	af00      	add	r7, sp, #0
9000131e:	6078      	str	r0, [r7, #4]
90001320:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
90001322:	683a      	ldr	r2, [r7, #0]
90001324:	6879      	ldr	r1, [r7, #4]
90001326:	4803      	ldr	r0, [pc, #12]	@ (90001334 <uartSetCursorPosition+0x1c>)
90001328:	f00b f962 	bl	9000c5f0 <iprintf>
}
9000132c:	bf00      	nop
9000132e:	3708      	adds	r7, #8
90001330:	46bd      	mov	sp, r7
90001332:	bd80      	pop	{r7, pc}
90001334:	9000d628 	.word	0x9000d628

90001338 <UartClearScreen>:

void UartClearScreen() {
90001338:	b580      	push	{r7, lr}
9000133a:	af00      	add	r7, sp, #0
  printf("\033[2J");
9000133c:	4803      	ldr	r0, [pc, #12]	@ (9000134c <UartClearScreen+0x14>)
9000133e:	f00b f957 	bl	9000c5f0 <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
90001342:	4803      	ldr	r0, [pc, #12]	@ (90001350 <UartClearScreen+0x18>)
90001344:	f00b f954 	bl	9000c5f0 <iprintf>
}
90001348:	bf00      	nop
9000134a:	bd80      	pop	{r7, pc}
9000134c:	9000d634 	.word	0x9000d634
90001350:	9000d63c 	.word	0x9000d63c

90001354 <UartRenderState>:

void UartRenderState(AppContext *ctx) {
90001354:	b580      	push	{r7, lr}
90001356:	b082      	sub	sp, #8
90001358:	af00      	add	r7, sp, #0
9000135a:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
9000135c:	2101      	movs	r1, #1
9000135e:	2001      	movs	r0, #1
90001360:	f7ff ffda 	bl	90001318 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
90001364:	687b      	ldr	r3, [r7, #4]
90001366:	781b      	ldrb	r3, [r3, #0]
90001368:	2b00      	cmp	r3, #0
9000136a:	d13a      	bne.n	900013e2 <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
9000136c:	481f      	ldr	r0, [pc, #124]	@ (900013ec <UartRenderState+0x98>)
9000136e:	f00b f93f 	bl	9000c5f0 <iprintf>
    uartSetCursorPosition(2, 1);
90001372:	2101      	movs	r1, #1
90001374:	2002      	movs	r0, #2
90001376:	f7ff ffcf 	bl	90001318 <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
9000137a:	687b      	ldr	r3, [r7, #4]
9000137c:	889b      	ldrh	r3, [r3, #4]
9000137e:	4619      	mov	r1, r3
90001380:	481b      	ldr	r0, [pc, #108]	@ (900013f0 <UartRenderState+0x9c>)
90001382:	f00b f935 	bl	9000c5f0 <iprintf>
    uartSetCursorPosition(3, 1);
90001386:	2101      	movs	r1, #1
90001388:	2003      	movs	r0, #3
9000138a:	f7ff ffc5 	bl	90001318 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
9000138e:	687b      	ldr	r3, [r7, #4]
90001390:	885b      	ldrh	r3, [r3, #2]
90001392:	2b00      	cmp	r3, #0
90001394:	d006      	beq.n	900013a4 <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
90001396:	687b      	ldr	r3, [r7, #4]
90001398:	885b      	ldrh	r3, [r3, #2]
9000139a:	4619      	mov	r1, r3
9000139c:	4815      	ldr	r0, [pc, #84]	@ (900013f4 <UartRenderState+0xa0>)
9000139e:	f00b f927 	bl	9000c5f0 <iprintf>
900013a2:	e002      	b.n	900013aa <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
900013a4:	4814      	ldr	r0, [pc, #80]	@ (900013f8 <UartRenderState+0xa4>)
900013a6:	f00b f923 	bl	9000c5f0 <iprintf>
    }
    uartSetCursorPosition(4, 1);
900013aa:	2101      	movs	r1, #1
900013ac:	2004      	movs	r0, #4
900013ae:	f7ff ffb3 	bl	90001318 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
900013b2:	687b      	ldr	r3, [r7, #4]
900013b4:	79db      	ldrb	r3, [r3, #7]
900013b6:	2b00      	cmp	r3, #0
900013b8:	d006      	beq.n	900013c8 <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
900013ba:	687b      	ldr	r3, [r7, #4]
900013bc:	885b      	ldrh	r3, [r3, #2]
900013be:	4619      	mov	r1, r3
900013c0:	480e      	ldr	r0, [pc, #56]	@ (900013fc <UartRenderState+0xa8>)
900013c2:	f00b f915 	bl	9000c5f0 <iprintf>
900013c6:	e002      	b.n	900013ce <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
900013c8:	480d      	ldr	r0, [pc, #52]	@ (90001400 <UartRenderState+0xac>)
900013ca:	f00b f911 	bl	9000c5f0 <iprintf>
    }
    uartSetCursorPosition(5, 1);
900013ce:	2101      	movs	r1, #1
900013d0:	2005      	movs	r0, #5
900013d2:	f7ff ffa1 	bl	90001318 <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
900013d6:	687b      	ldr	r3, [r7, #4]
900013d8:	3309      	adds	r3, #9
900013da:	4619      	mov	r1, r3
900013dc:	4809      	ldr	r0, [pc, #36]	@ (90001404 <UartRenderState+0xb0>)
900013de:	f00b f907 	bl	9000c5f0 <iprintf>
  }
}
900013e2:	bf00      	nop
900013e4:	3708      	adds	r7, #8
900013e6:	46bd      	mov	sp, r7
900013e8:	bd80      	pop	{r7, pc}
900013ea:	bf00      	nop
900013ec:	9000d640 	.word	0x9000d640
900013f0:	9000d658 	.word	0x9000d658
900013f4:	9000d670 	.word	0x9000d670
900013f8:	9000d684 	.word	0x9000d684
900013fc:	9000d698 	.word	0x9000d698
90001400:	9000d6b4 	.word	0x9000d6b4
90001404:	9000d6d0 	.word	0x9000d6d0

90001408 <displayPaddedLine>:

void displayPaddedLine(uint16_t y, const char *text)
{
90001408:	b580      	push	{r7, lr}
9000140a:	b08a      	sub	sp, #40	@ 0x28
9000140c:	af00      	add	r7, sp, #0
9000140e:	4603      	mov	r3, r0
90001410:	6039      	str	r1, [r7, #0]
90001412:	80fb      	strh	r3, [r7, #6]
	// the sole purpose of this helper method is to overwrite the whole row so that we do not need to rely on clear screen

    char padded[LCD_LINE_WIDTH];
    memset(padded, ' ', LCD_LINE_WIDTH);
90001414:	f107 030c 	add.w	r3, r7, #12
90001418:	2218      	movs	r2, #24
9000141a:	2120      	movs	r1, #32
9000141c:	4618      	mov	r0, r3
9000141e:	f00b fa51 	bl	9000c8c4 <memset>

    // Copy up to 24 characters from text
    size_t len = strlen(text);
90001422:	6838      	ldr	r0, [r7, #0]
90001424:	f7fe ff5c 	bl	900002e0 <strlen>
90001428:	6278      	str	r0, [r7, #36]	@ 0x24
    if (len > LCD_LINE_WIDTH) len = LCD_LINE_WIDTH;
9000142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000142c:	2b18      	cmp	r3, #24
9000142e:	d901      	bls.n	90001434 <displayPaddedLine+0x2c>
90001430:	2318      	movs	r3, #24
90001432:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(padded, text, len);
90001434:	f107 030c 	add.w	r3, r7, #12
90001438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000143a:	6839      	ldr	r1, [r7, #0]
9000143c:	4618      	mov	r0, r3
9000143e:	f00b facc 	bl	9000c9da <memcpy>

    // Display the padded string
    UTIL_LCD_DisplayStringAt(0, y*32, (uint8_t *)padded, LEFT_MODE);
90001442:	88fb      	ldrh	r3, [r7, #6]
90001444:	015b      	lsls	r3, r3, #5
90001446:	4619      	mov	r1, r3
90001448:	f107 020c 	add.w	r2, r7, #12
9000144c:	2303      	movs	r3, #3
9000144e:	2000      	movs	r0, #0
90001450:	f00a fd1c 	bl	9000be8c <UTIL_LCD_DisplayStringAt>
}
90001454:	bf00      	nop
90001456:	3728      	adds	r7, #40	@ 0x28
90001458:	46bd      	mov	sp, r7
9000145a:	bd80      	pop	{r7, pc}

9000145c <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
9000145c:	b580      	push	{r7, lr}
9000145e:	b08a      	sub	sp, #40	@ 0x28
90001460:	af00      	add	r7, sp, #0
90001462:	6078      	str	r0, [r7, #4]
  char buffer[LCD_LINE_WIDTH+1];

  if (ctx->currentState == STATE_F1) {
90001464:	687b      	ldr	r3, [r7, #4]
90001466:	781b      	ldrb	r3, [r3, #0]
90001468:	2b00      	cmp	r3, #0
9000146a:	d15f      	bne.n	9000152c <DisplayRenderState+0xd0>
	displayPaddedLine(0, "F1: Voltage control");
9000146c:	494d      	ldr	r1, [pc, #308]	@ (900015a4 <DisplayRenderState+0x148>)
9000146e:	2000      	movs	r0, #0
90001470:	f7ff ffca 	bl	90001408 <displayPaddedLine>
    if (ctx->isPwmRunning == true) {
90001474:	687b      	ldr	r3, [r7, #4]
90001476:	79db      	ldrb	r3, [r3, #7]
90001478:	2b00      	cmp	r3, #0
9000147a:	d013      	beq.n	900014a4 <DisplayRenderState+0x48>
      sprintf(buffer, "PWM is running at %dV", ctx->voltage);
9000147c:	687b      	ldr	r3, [r7, #4]
9000147e:	885b      	ldrh	r3, [r3, #2]
90001480:	461a      	mov	r2, r3
90001482:	f107 030c 	add.w	r3, r7, #12
90001486:	4948      	ldr	r1, [pc, #288]	@ (900015a8 <DisplayRenderState+0x14c>)
90001488:	4618      	mov	r0, r3
9000148a:	f00b f921 	bl	9000c6d0 <siprintf>
      displayPaddedLine(2, buffer);
9000148e:	f107 030c 	add.w	r3, r7, #12
90001492:	4619      	mov	r1, r3
90001494:	2002      	movs	r0, #2
90001496:	f7ff ffb7 	bl	90001408 <displayPaddedLine>
      displayPaddedLine(3, "Press STOP");
9000149a:	4944      	ldr	r1, [pc, #272]	@ (900015ac <DisplayRenderState+0x150>)
9000149c:	2003      	movs	r0, #3
9000149e:	f7ff ffb3 	bl	90001408 <displayPaddedLine>
900014a2:	e06c      	b.n	9000157e <DisplayRenderState+0x122>
    }
    else if (ctx->isVoltageEntered)
900014a4:	687b      	ldr	r3, [r7, #4]
900014a6:	799b      	ldrb	r3, [r3, #6]
900014a8:	2b00      	cmp	r3, #0
900014aa:	d013      	beq.n	900014d4 <DisplayRenderState+0x78>
    {
	  sprintf(buffer, "Voltage: %dV", ctx->voltage);
900014ac:	687b      	ldr	r3, [r7, #4]
900014ae:	885b      	ldrh	r3, [r3, #2]
900014b0:	461a      	mov	r2, r3
900014b2:	f107 030c 	add.w	r3, r7, #12
900014b6:	493e      	ldr	r1, [pc, #248]	@ (900015b0 <DisplayRenderState+0x154>)
900014b8:	4618      	mov	r0, r3
900014ba:	f00b f909 	bl	9000c6d0 <siprintf>
      displayPaddedLine(2, buffer);
900014be:	f107 030c 	add.w	r3, r7, #12
900014c2:	4619      	mov	r1, r3
900014c4:	2002      	movs	r0, #2
900014c6:	f7ff ff9f 	bl	90001408 <displayPaddedLine>
      displayPaddedLine(3, "Press START or Clear");
900014ca:	493a      	ldr	r1, [pc, #232]	@ (900015b4 <DisplayRenderState+0x158>)
900014cc:	2003      	movs	r0, #3
900014ce:	f7ff ff9b 	bl	90001408 <displayPaddedLine>
900014d2:	e054      	b.n	9000157e <DisplayRenderState+0x122>
    }
    else
    {
	  char cursor = ' ';
900014d4:	2320      	movs	r3, #32
900014d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if (ctx->displayCursor) cursor = '_';
900014da:	687b      	ldr	r3, [r7, #4]
900014dc:	7a1b      	ldrb	r3, [r3, #8]
900014de:	2b00      	cmp	r3, #0
900014e0:	d002      	beq.n	900014e8 <DisplayRenderState+0x8c>
900014e2:	235f      	movs	r3, #95	@ 0x5f
900014e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if (ctx->inputValue != 0)
900014e8:	687b      	ldr	r3, [r7, #4]
900014ea:	889b      	ldrh	r3, [r3, #4]
900014ec:	2b00      	cmp	r3, #0
900014ee:	d00a      	beq.n	90001506 <DisplayRenderState+0xaa>
		  sprintf(buffer, "Enter voltage: %d%c", ctx->inputValue, cursor);
900014f0:	687b      	ldr	r3, [r7, #4]
900014f2:	889b      	ldrh	r3, [r3, #4]
900014f4:	461a      	mov	r2, r3
900014f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900014fa:	f107 000c 	add.w	r0, r7, #12
900014fe:	492e      	ldr	r1, [pc, #184]	@ (900015b8 <DisplayRenderState+0x15c>)
90001500:	f00b f8e6 	bl	9000c6d0 <siprintf>
90001504:	e007      	b.n	90001516 <DisplayRenderState+0xba>
	  else
		  sprintf(buffer, "Enter voltage: %c", cursor);
90001506:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
9000150a:	f107 030c 	add.w	r3, r7, #12
9000150e:	492b      	ldr	r1, [pc, #172]	@ (900015bc <DisplayRenderState+0x160>)
90001510:	4618      	mov	r0, r3
90001512:	f00b f8dd 	bl	9000c6d0 <siprintf>

      displayPaddedLine(2, buffer);
90001516:	f107 030c 	add.w	r3, r7, #12
9000151a:	4619      	mov	r1, r3
9000151c:	2002      	movs	r0, #2
9000151e:	f7ff ff73 	bl	90001408 <displayPaddedLine>
      displayPaddedLine(3, "Press Enter");
90001522:	4927      	ldr	r1, [pc, #156]	@ (900015c0 <DisplayRenderState+0x164>)
90001524:	2003      	movs	r0, #3
90001526:	f7ff ff6f 	bl	90001408 <displayPaddedLine>
9000152a:	e028      	b.n	9000157e <DisplayRenderState+0x122>
    }
  }
  else if (ctx->currentState == STATE_F2)
9000152c:	687b      	ldr	r3, [r7, #4]
9000152e:	781b      	ldrb	r3, [r3, #0]
90001530:	2b01      	cmp	r3, #1
90001532:	d110      	bne.n	90001556 <DisplayRenderState+0xfa>
  {
    displayPaddedLine(0, "F2: Voltage and current");
90001534:	4923      	ldr	r1, [pc, #140]	@ (900015c4 <DisplayRenderState+0x168>)
90001536:	2000      	movs	r0, #0
90001538:	f7ff ff66 	bl	90001408 <displayPaddedLine>
    displayPaddedLine(1, "");
9000153c:	4922      	ldr	r1, [pc, #136]	@ (900015c8 <DisplayRenderState+0x16c>)
9000153e:	2001      	movs	r0, #1
90001540:	f7ff ff62 	bl	90001408 <displayPaddedLine>
    displayPaddedLine(2, "");
90001544:	4920      	ldr	r1, [pc, #128]	@ (900015c8 <DisplayRenderState+0x16c>)
90001546:	2002      	movs	r0, #2
90001548:	f7ff ff5e 	bl	90001408 <displayPaddedLine>
    displayPaddedLine(3, "");
9000154c:	491e      	ldr	r1, [pc, #120]	@ (900015c8 <DisplayRenderState+0x16c>)
9000154e:	2003      	movs	r0, #3
90001550:	f7ff ff5a 	bl	90001408 <displayPaddedLine>
90001554:	e013      	b.n	9000157e <DisplayRenderState+0x122>
  }
  else if (ctx->currentState == STATE_F3)
90001556:	687b      	ldr	r3, [r7, #4]
90001558:	781b      	ldrb	r3, [r3, #0]
9000155a:	2b02      	cmp	r3, #2
9000155c:	d10f      	bne.n	9000157e <DisplayRenderState+0x122>
  {
	displayPaddedLine(0, "F3: Calibration");
9000155e:	491b      	ldr	r1, [pc, #108]	@ (900015cc <DisplayRenderState+0x170>)
90001560:	2000      	movs	r0, #0
90001562:	f7ff ff51 	bl	90001408 <displayPaddedLine>
    displayPaddedLine(1, "");
90001566:	4918      	ldr	r1, [pc, #96]	@ (900015c8 <DisplayRenderState+0x16c>)
90001568:	2001      	movs	r0, #1
9000156a:	f7ff ff4d 	bl	90001408 <displayPaddedLine>
    displayPaddedLine(2, "");
9000156e:	4916      	ldr	r1, [pc, #88]	@ (900015c8 <DisplayRenderState+0x16c>)
90001570:	2002      	movs	r0, #2
90001572:	f7ff ff49 	bl	90001408 <displayPaddedLine>
    displayPaddedLine(3, "");
90001576:	4914      	ldr	r1, [pc, #80]	@ (900015c8 <DisplayRenderState+0x16c>)
90001578:	2003      	movs	r0, #3
9000157a:	f7ff ff45 	bl	90001408 <displayPaddedLine>
  }

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000157e:	4814      	ldr	r0, [pc, #80]	@ (900015d0 <DisplayRenderState+0x174>)
90001580:	f00a fbe0 	bl	9000bd44 <UTIL_LCD_SetTextColor>
  displayPaddedLine(4, ctx->message);
90001584:	687b      	ldr	r3, [r7, #4]
90001586:	3309      	adds	r3, #9
90001588:	4619      	mov	r1, r3
9000158a:	2004      	movs	r0, #4
9000158c:	f7ff ff3c 	bl	90001408 <displayPaddedLine>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90001590:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90001594:	f00a fbd6 	bl	9000bd44 <UTIL_LCD_SetTextColor>

  ClearCache();
90001598:	f7ff fe5c 	bl	90001254 <ClearCache>
}
9000159c:	bf00      	nop
9000159e:	3728      	adds	r7, #40	@ 0x28
900015a0:	46bd      	mov	sp, r7
900015a2:	bd80      	pop	{r7, pc}
900015a4:	9000d714 	.word	0x9000d714
900015a8:	9000d728 	.word	0x9000d728
900015ac:	9000d740 	.word	0x9000d740
900015b0:	9000d74c 	.word	0x9000d74c
900015b4:	9000d75c 	.word	0x9000d75c
900015b8:	9000d774 	.word	0x9000d774
900015bc:	9000d788 	.word	0x9000d788
900015c0:	9000d79c 	.word	0x9000d79c
900015c4:	9000d7a8 	.word	0x9000d7a8
900015c8:	9000d7c0 	.word	0x9000d7c0
900015cc:	9000d7c4 	.word	0x9000d7c4
900015d0:	ffff0000 	.word	0xffff0000

900015d4 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
900015d4:	b580      	push	{r7, lr}
900015d6:	b084      	sub	sp, #16
900015d8:	af00      	add	r7, sp, #0
900015da:	6078      	str	r0, [r7, #4]
900015dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
900015de:	687b      	ldr	r3, [r7, #4]
900015e0:	2b00      	cmp	r3, #0
900015e2:	d103      	bne.n	900015ec <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
900015e4:	f04f 33ff 	mov.w	r3, #4294967295
900015e8:	60fb      	str	r3, [r7, #12]
900015ea:	e02c      	b.n	90001646 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
900015ec:	683b      	ldr	r3, [r7, #0]
900015ee:	681a      	ldr	r2, [r3, #0]
900015f0:	687b      	ldr	r3, [r7, #4]
900015f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
900015f4:	683b      	ldr	r3, [r7, #0]
900015f6:	685a      	ldr	r2, [r3, #4]
900015f8:	687b      	ldr	r3, [r7, #4]
900015fa:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
900015fc:	683b      	ldr	r3, [r7, #0]
900015fe:	891a      	ldrh	r2, [r3, #8]
90001600:	687b      	ldr	r3, [r7, #4]
90001602:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90001604:	683b      	ldr	r3, [r7, #0]
90001606:	68da      	ldr	r2, [r3, #12]
90001608:	687b      	ldr	r3, [r7, #4]
9000160a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
9000160c:	683b      	ldr	r3, [r7, #0]
9000160e:	691a      	ldr	r2, [r3, #16]
90001610:	687b      	ldr	r3, [r7, #4]
90001612:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90001614:	683b      	ldr	r3, [r7, #0]
90001616:	695a      	ldr	r2, [r3, #20]
90001618:	687b      	ldr	r3, [r7, #4]
9000161a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
9000161c:	687b      	ldr	r3, [r7, #4]
9000161e:	4a0c      	ldr	r2, [pc, #48]	@ (90001650 <FT5336_RegisterBusIO+0x7c>)
90001620:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90001622:	687b      	ldr	r3, [r7, #4]
90001624:	4a0b      	ldr	r2, [pc, #44]	@ (90001654 <FT5336_RegisterBusIO+0x80>)
90001626:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
90001628:	687b      	ldr	r3, [r7, #4]
9000162a:	687a      	ldr	r2, [r7, #4]
9000162c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
9000162e:	687b      	ldr	r3, [r7, #4]
90001630:	681b      	ldr	r3, [r3, #0]
90001632:	2b00      	cmp	r3, #0
90001634:	d004      	beq.n	90001640 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
90001636:	687b      	ldr	r3, [r7, #4]
90001638:	681b      	ldr	r3, [r3, #0]
9000163a:	4798      	blx	r3
9000163c:	60f8      	str	r0, [r7, #12]
9000163e:	e002      	b.n	90001646 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90001640:	f04f 33ff 	mov.w	r3, #4294967295
90001644:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
90001646:	68fb      	ldr	r3, [r7, #12]
}
90001648:	4618      	mov	r0, r3
9000164a:	3710      	adds	r7, #16
9000164c:	46bd      	mov	sp, r7
9000164e:	bd80      	pop	{r7, pc}
90001650:	90001679 	.word	0x90001679
90001654:	900016ad 	.word	0x900016ad

90001658 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90001658:	b580      	push	{r7, lr}
9000165a:	b082      	sub	sp, #8
9000165c:	af00      	add	r7, sp, #0
9000165e:	6078      	str	r0, [r7, #4]
90001660:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90001662:	687b      	ldr	r3, [r7, #4]
90001664:	3318      	adds	r3, #24
90001666:	6839      	ldr	r1, [r7, #0]
90001668:	4618      	mov	r0, r3
9000166a:	f000 f850 	bl	9000170e <ft5336_chip_id>
9000166e:	4603      	mov	r3, r0
}
90001670:	4618      	mov	r0, r3
90001672:	3708      	adds	r7, #8
90001674:	46bd      	mov	sp, r7
90001676:	bd80      	pop	{r7, pc}

90001678 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001678:	b590      	push	{r4, r7, lr}
9000167a:	b087      	sub	sp, #28
9000167c:	af00      	add	r7, sp, #0
9000167e:	60f8      	str	r0, [r7, #12]
90001680:	607a      	str	r2, [r7, #4]
90001682:	461a      	mov	r2, r3
90001684:	460b      	mov	r3, r1
90001686:	72fb      	strb	r3, [r7, #11]
90001688:	4613      	mov	r3, r2
9000168a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
9000168c:	68fb      	ldr	r3, [r7, #12]
9000168e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001690:	697b      	ldr	r3, [r7, #20]
90001692:	691c      	ldr	r4, [r3, #16]
90001694:	697b      	ldr	r3, [r7, #20]
90001696:	8918      	ldrh	r0, [r3, #8]
90001698:	7afb      	ldrb	r3, [r7, #11]
9000169a:	b299      	uxth	r1, r3
9000169c:	893b      	ldrh	r3, [r7, #8]
9000169e:	687a      	ldr	r2, [r7, #4]
900016a0:	47a0      	blx	r4
900016a2:	4603      	mov	r3, r0
}
900016a4:	4618      	mov	r0, r3
900016a6:	371c      	adds	r7, #28
900016a8:	46bd      	mov	sp, r7
900016aa:	bd90      	pop	{r4, r7, pc}

900016ac <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900016ac:	b590      	push	{r4, r7, lr}
900016ae:	b087      	sub	sp, #28
900016b0:	af00      	add	r7, sp, #0
900016b2:	60f8      	str	r0, [r7, #12]
900016b4:	607a      	str	r2, [r7, #4]
900016b6:	461a      	mov	r2, r3
900016b8:	460b      	mov	r3, r1
900016ba:	72fb      	strb	r3, [r7, #11]
900016bc:	4613      	mov	r3, r2
900016be:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
900016c0:	68fb      	ldr	r3, [r7, #12]
900016c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900016c4:	697b      	ldr	r3, [r7, #20]
900016c6:	68dc      	ldr	r4, [r3, #12]
900016c8:	697b      	ldr	r3, [r7, #20]
900016ca:	8918      	ldrh	r0, [r3, #8]
900016cc:	7afb      	ldrb	r3, [r7, #11]
900016ce:	b299      	uxth	r1, r3
900016d0:	893b      	ldrh	r3, [r7, #8]
900016d2:	687a      	ldr	r2, [r7, #4]
900016d4:	47a0      	blx	r4
900016d6:	4603      	mov	r3, r0
}
900016d8:	4618      	mov	r0, r3
900016da:	371c      	adds	r7, #28
900016dc:	46bd      	mov	sp, r7
900016de:	bd90      	pop	{r4, r7, pc}

900016e0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900016e0:	b590      	push	{r4, r7, lr}
900016e2:	b085      	sub	sp, #20
900016e4:	af00      	add	r7, sp, #0
900016e6:	60f8      	str	r0, [r7, #12]
900016e8:	607a      	str	r2, [r7, #4]
900016ea:	461a      	mov	r2, r3
900016ec:	460b      	mov	r3, r1
900016ee:	72fb      	strb	r3, [r7, #11]
900016f0:	4613      	mov	r3, r2
900016f2:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900016f4:	68fb      	ldr	r3, [r7, #12]
900016f6:	685c      	ldr	r4, [r3, #4]
900016f8:	68fb      	ldr	r3, [r7, #12]
900016fa:	6898      	ldr	r0, [r3, #8]
900016fc:	893b      	ldrh	r3, [r7, #8]
900016fe:	7af9      	ldrb	r1, [r7, #11]
90001700:	687a      	ldr	r2, [r7, #4]
90001702:	47a0      	blx	r4
90001704:	4603      	mov	r3, r0
}
90001706:	4618      	mov	r0, r3
90001708:	3714      	adds	r7, #20
9000170a:	46bd      	mov	sp, r7
9000170c:	bd90      	pop	{r4, r7, pc}

9000170e <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
9000170e:	b580      	push	{r7, lr}
90001710:	b084      	sub	sp, #16
90001712:	af00      	add	r7, sp, #0
90001714:	6078      	str	r0, [r7, #4]
90001716:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
90001718:	2301      	movs	r3, #1
9000171a:	683a      	ldr	r2, [r7, #0]
9000171c:	21a8      	movs	r1, #168	@ 0xa8
9000171e:	6878      	ldr	r0, [r7, #4]
90001720:	f7ff ffde 	bl	900016e0 <ft5336_read_reg>
90001724:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90001726:	68fb      	ldr	r3, [r7, #12]
90001728:	2b00      	cmp	r3, #0
9000172a:	d107      	bne.n	9000173c <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
9000172c:	683b      	ldr	r3, [r7, #0]
9000172e:	781a      	ldrb	r2, [r3, #0]
90001730:	683b      	ldr	r3, [r7, #0]
90001732:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
90001734:	683b      	ldr	r3, [r7, #0]
90001736:	781a      	ldrb	r2, [r3, #0]
90001738:	683b      	ldr	r3, [r7, #0]
9000173a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
9000173c:	68fb      	ldr	r3, [r7, #12]
}
9000173e:	4618      	mov	r0, r3
90001740:	3710      	adds	r7, #16
90001742:	46bd      	mov	sp, r7
90001744:	bd80      	pop	{r7, pc}

90001746 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001746:	b580      	push	{r7, lr}
90001748:	b084      	sub	sp, #16
9000174a:	af00      	add	r7, sp, #0
9000174c:	6078      	str	r0, [r7, #4]
9000174e:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001750:	f04f 33ff 	mov.w	r3, #4294967295
90001754:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001756:	683b      	ldr	r3, [r7, #0]
90001758:	681b      	ldr	r3, [r3, #0]
9000175a:	4619      	mov	r1, r3
9000175c:	6878      	ldr	r0, [r7, #4]
9000175e:	f000 f831 	bl	900017c4 <MT48LC4M32B2_ClockEnable>
90001762:	4603      	mov	r3, r0
90001764:	2b00      	cmp	r3, #0
90001766:	d128      	bne.n	900017ba <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90001768:	2001      	movs	r0, #1
9000176a:	f000 f8e1 	bl	90001930 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000176e:	683b      	ldr	r3, [r7, #0]
90001770:	681b      	ldr	r3, [r3, #0]
90001772:	4619      	mov	r1, r3
90001774:	6878      	ldr	r0, [r7, #4]
90001776:	f000 f849 	bl	9000180c <MT48LC4M32B2_Precharge>
9000177a:	4603      	mov	r3, r0
9000177c:	2b00      	cmp	r3, #0
9000177e:	d11c      	bne.n	900017ba <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90001780:	683b      	ldr	r3, [r7, #0]
90001782:	6819      	ldr	r1, [r3, #0]
90001784:	683b      	ldr	r3, [r7, #0]
90001786:	685b      	ldr	r3, [r3, #4]
90001788:	461a      	mov	r2, r3
9000178a:	6878      	ldr	r0, [r7, #4]
9000178c:	f000 f896 	bl	900018bc <MT48LC4M32B2_RefreshMode>
90001790:	4603      	mov	r3, r0
90001792:	2b00      	cmp	r3, #0
90001794:	d111      	bne.n	900017ba <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001796:	6839      	ldr	r1, [r7, #0]
90001798:	6878      	ldr	r0, [r7, #4]
9000179a:	f000 f85b 	bl	90001854 <MT48LC4M32B2_ModeRegConfig>
9000179e:	4603      	mov	r3, r0
900017a0:	2b00      	cmp	r3, #0
900017a2:	d10a      	bne.n	900017ba <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
900017a4:	683b      	ldr	r3, [r7, #0]
900017a6:	689b      	ldr	r3, [r3, #8]
900017a8:	4619      	mov	r1, r3
900017aa:	6878      	ldr	r0, [r7, #4]
900017ac:	f000 f8ac 	bl	90001908 <MT48LC4M32B2_RefreshRate>
900017b0:	4603      	mov	r3, r0
900017b2:	2b00      	cmp	r3, #0
900017b4:	d101      	bne.n	900017ba <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
900017b6:	2300      	movs	r3, #0
900017b8:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
900017ba:	68fb      	ldr	r3, [r7, #12]
}
900017bc:	4618      	mov	r0, r3
900017be:	3710      	adds	r7, #16
900017c0:	46bd      	mov	sp, r7
900017c2:	bd80      	pop	{r7, pc}

900017c4 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900017c4:	b580      	push	{r7, lr}
900017c6:	b082      	sub	sp, #8
900017c8:	af00      	add	r7, sp, #0
900017ca:	6078      	str	r0, [r7, #4]
900017cc:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900017ce:	4b0e      	ldr	r3, [pc, #56]	@ (90001808 <MT48LC4M32B2_ClockEnable+0x44>)
900017d0:	2201      	movs	r2, #1
900017d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900017d4:	4a0c      	ldr	r2, [pc, #48]	@ (90001808 <MT48LC4M32B2_ClockEnable+0x44>)
900017d6:	683b      	ldr	r3, [r7, #0]
900017d8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900017da:	4b0b      	ldr	r3, [pc, #44]	@ (90001808 <MT48LC4M32B2_ClockEnable+0x44>)
900017dc:	2201      	movs	r2, #1
900017de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900017e0:	4b09      	ldr	r3, [pc, #36]	@ (90001808 <MT48LC4M32B2_ClockEnable+0x44>)
900017e2:	2200      	movs	r2, #0
900017e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900017e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900017ea:	4907      	ldr	r1, [pc, #28]	@ (90001808 <MT48LC4M32B2_ClockEnable+0x44>)
900017ec:	6878      	ldr	r0, [r7, #4]
900017ee:	f008 f8cf 	bl	90009990 <HAL_SDRAM_SendCommand>
900017f2:	4603      	mov	r3, r0
900017f4:	2b00      	cmp	r3, #0
900017f6:	d002      	beq.n	900017fe <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900017f8:	f04f 33ff 	mov.w	r3, #4294967295
900017fc:	e000      	b.n	90001800 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900017fe:	2300      	movs	r3, #0
  }
}
90001800:	4618      	mov	r0, r3
90001802:	3708      	adds	r7, #8
90001804:	46bd      	mov	sp, r7
90001806:	bd80      	pop	{r7, pc}
90001808:	20000634 	.word	0x20000634

9000180c <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
9000180c:	b580      	push	{r7, lr}
9000180e:	b082      	sub	sp, #8
90001810:	af00      	add	r7, sp, #0
90001812:	6078      	str	r0, [r7, #4]
90001814:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90001816:	4b0e      	ldr	r3, [pc, #56]	@ (90001850 <MT48LC4M32B2_Precharge+0x44>)
90001818:	2202      	movs	r2, #2
9000181a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
9000181c:	4a0c      	ldr	r2, [pc, #48]	@ (90001850 <MT48LC4M32B2_Precharge+0x44>)
9000181e:	683b      	ldr	r3, [r7, #0]
90001820:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001822:	4b0b      	ldr	r3, [pc, #44]	@ (90001850 <MT48LC4M32B2_Precharge+0x44>)
90001824:	2201      	movs	r2, #1
90001826:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001828:	4b09      	ldr	r3, [pc, #36]	@ (90001850 <MT48LC4M32B2_Precharge+0x44>)
9000182a:	2200      	movs	r2, #0
9000182c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000182e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001832:	4907      	ldr	r1, [pc, #28]	@ (90001850 <MT48LC4M32B2_Precharge+0x44>)
90001834:	6878      	ldr	r0, [r7, #4]
90001836:	f008 f8ab 	bl	90009990 <HAL_SDRAM_SendCommand>
9000183a:	4603      	mov	r3, r0
9000183c:	2b00      	cmp	r3, #0
9000183e:	d002      	beq.n	90001846 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001840:	f04f 33ff 	mov.w	r3, #4294967295
90001844:	e000      	b.n	90001848 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001846:	2300      	movs	r3, #0
  }
}
90001848:	4618      	mov	r0, r3
9000184a:	3708      	adds	r7, #8
9000184c:	46bd      	mov	sp, r7
9000184e:	bd80      	pop	{r7, pc}
90001850:	20000634 	.word	0x20000634

90001854 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001854:	b580      	push	{r7, lr}
90001856:	b084      	sub	sp, #16
90001858:	af00      	add	r7, sp, #0
9000185a:	6078      	str	r0, [r7, #4]
9000185c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000185e:	683b      	ldr	r3, [r7, #0]
90001860:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90001862:	683b      	ldr	r3, [r7, #0]
90001864:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001866:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001868:	683b      	ldr	r3, [r7, #0]
9000186a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
9000186c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
9000186e:	683b      	ldr	r3, [r7, #0]
90001870:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001872:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001874:	683b      	ldr	r3, [r7, #0]
90001876:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001878:	4313      	orrs	r3, r2
9000187a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000187c:	4b0e      	ldr	r3, [pc, #56]	@ (900018b8 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000187e:	2204      	movs	r2, #4
90001880:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001882:	683b      	ldr	r3, [r7, #0]
90001884:	681b      	ldr	r3, [r3, #0]
90001886:	4a0c      	ldr	r2, [pc, #48]	@ (900018b8 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001888:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000188a:	4b0b      	ldr	r3, [pc, #44]	@ (900018b8 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000188c:	2201      	movs	r2, #1
9000188e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001890:	4a09      	ldr	r2, [pc, #36]	@ (900018b8 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001892:	68fb      	ldr	r3, [r7, #12]
90001894:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000189a:	4907      	ldr	r1, [pc, #28]	@ (900018b8 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000189c:	6878      	ldr	r0, [r7, #4]
9000189e:	f008 f877 	bl	90009990 <HAL_SDRAM_SendCommand>
900018a2:	4603      	mov	r3, r0
900018a4:	2b00      	cmp	r3, #0
900018a6:	d002      	beq.n	900018ae <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
900018a8:	f04f 33ff 	mov.w	r3, #4294967295
900018ac:	e000      	b.n	900018b0 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900018ae:	2300      	movs	r3, #0
  }
}
900018b0:	4618      	mov	r0, r3
900018b2:	3710      	adds	r7, #16
900018b4:	46bd      	mov	sp, r7
900018b6:	bd80      	pop	{r7, pc}
900018b8:	20000634 	.word	0x20000634

900018bc <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
900018bc:	b580      	push	{r7, lr}
900018be:	b084      	sub	sp, #16
900018c0:	af00      	add	r7, sp, #0
900018c2:	60f8      	str	r0, [r7, #12]
900018c4:	60b9      	str	r1, [r7, #8]
900018c6:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
900018c8:	4a0e      	ldr	r2, [pc, #56]	@ (90001904 <MT48LC4M32B2_RefreshMode+0x48>)
900018ca:	687b      	ldr	r3, [r7, #4]
900018cc:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
900018ce:	4a0d      	ldr	r2, [pc, #52]	@ (90001904 <MT48LC4M32B2_RefreshMode+0x48>)
900018d0:	68bb      	ldr	r3, [r7, #8]
900018d2:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
900018d4:	4b0b      	ldr	r3, [pc, #44]	@ (90001904 <MT48LC4M32B2_RefreshMode+0x48>)
900018d6:	2208      	movs	r2, #8
900018d8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900018da:	4b0a      	ldr	r3, [pc, #40]	@ (90001904 <MT48LC4M32B2_RefreshMode+0x48>)
900018dc:	2200      	movs	r2, #0
900018de:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900018e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900018e4:	4907      	ldr	r1, [pc, #28]	@ (90001904 <MT48LC4M32B2_RefreshMode+0x48>)
900018e6:	68f8      	ldr	r0, [r7, #12]
900018e8:	f008 f852 	bl	90009990 <HAL_SDRAM_SendCommand>
900018ec:	4603      	mov	r3, r0
900018ee:	2b00      	cmp	r3, #0
900018f0:	d002      	beq.n	900018f8 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
900018f2:	f04f 33ff 	mov.w	r3, #4294967295
900018f6:	e000      	b.n	900018fa <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
900018f8:	2300      	movs	r3, #0
  }
}
900018fa:	4618      	mov	r0, r3
900018fc:	3710      	adds	r7, #16
900018fe:	46bd      	mov	sp, r7
90001900:	bd80      	pop	{r7, pc}
90001902:	bf00      	nop
90001904:	20000634 	.word	0x20000634

90001908 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90001908:	b580      	push	{r7, lr}
9000190a:	b082      	sub	sp, #8
9000190c:	af00      	add	r7, sp, #0
9000190e:	6078      	str	r0, [r7, #4]
90001910:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90001912:	6839      	ldr	r1, [r7, #0]
90001914:	6878      	ldr	r0, [r7, #4]
90001916:	f008 f870 	bl	900099fa <HAL_SDRAM_ProgramRefreshRate>
9000191a:	4603      	mov	r3, r0
9000191c:	2b00      	cmp	r3, #0
9000191e:	d002      	beq.n	90001926 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001920:	f04f 33ff 	mov.w	r3, #4294967295
90001924:	e000      	b.n	90001928 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001926:	2300      	movs	r3, #0
  }
}
90001928:	4618      	mov	r0, r3
9000192a:	3708      	adds	r7, #8
9000192c:	46bd      	mov	sp, r7
9000192e:	bd80      	pop	{r7, pc}

90001930 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001930:	b580      	push	{r7, lr}
90001932:	b084      	sub	sp, #16
90001934:	af00      	add	r7, sp, #0
90001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90001938:	f001 fd2a 	bl	90003390 <HAL_GetTick>
9000193c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
9000193e:	bf00      	nop
90001940:	f001 fd26 	bl	90003390 <HAL_GetTick>
90001944:	4602      	mov	r2, r0
90001946:	68fb      	ldr	r3, [r7, #12]
90001948:	1ad3      	subs	r3, r2, r3
9000194a:	687a      	ldr	r2, [r7, #4]
9000194c:	429a      	cmp	r2, r3
9000194e:	d8f7      	bhi.n	90001940 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001950:	2300      	movs	r3, #0
}
90001952:	4618      	mov	r0, r3
90001954:	3710      	adds	r7, #16
90001956:	46bd      	mov	sp, r7
90001958:	bd80      	pop	{r7, pc}
	...

9000195c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
9000195c:	b580      	push	{r7, lr}
9000195e:	b082      	sub	sp, #8
90001960:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001962:	2300      	movs	r3, #0
90001964:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001966:	4b16      	ldr	r3, [pc, #88]	@ (900019c0 <BSP_I2C4_Init+0x64>)
90001968:	4a16      	ldr	r2, [pc, #88]	@ (900019c4 <BSP_I2C4_Init+0x68>)
9000196a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
9000196c:	4b16      	ldr	r3, [pc, #88]	@ (900019c8 <BSP_I2C4_Init+0x6c>)
9000196e:	681b      	ldr	r3, [r3, #0]
90001970:	2b00      	cmp	r3, #0
90001972:	d11f      	bne.n	900019b4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001974:	4b14      	ldr	r3, [pc, #80]	@ (900019c8 <BSP_I2C4_Init+0x6c>)
90001976:	681b      	ldr	r3, [r3, #0]
90001978:	3301      	adds	r3, #1
9000197a:	4a13      	ldr	r2, [pc, #76]	@ (900019c8 <BSP_I2C4_Init+0x6c>)
9000197c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
9000197e:	4810      	ldr	r0, [pc, #64]	@ (900019c0 <BSP_I2C4_Init+0x64>)
90001980:	f004 faf8 	bl	90005f74 <HAL_I2C_GetState>
90001984:	4603      	mov	r3, r0
90001986:	2b00      	cmp	r3, #0
90001988:	d114      	bne.n	900019b4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
9000198a:	480d      	ldr	r0, [pc, #52]	@ (900019c0 <BSP_I2C4_Init+0x64>)
9000198c:	f000 fb06 	bl	90001f9c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001990:	f006 f976 	bl	90007c80 <HAL_RCC_GetPCLK2Freq>
90001994:	4603      	mov	r3, r0
90001996:	490d      	ldr	r1, [pc, #52]	@ (900019cc <BSP_I2C4_Init+0x70>)
90001998:	4618      	mov	r0, r3
9000199a:	f000 f889 	bl	90001ab0 <I2C_GetTiming>
9000199e:	4603      	mov	r3, r0
900019a0:	4619      	mov	r1, r3
900019a2:	4807      	ldr	r0, [pc, #28]	@ (900019c0 <BSP_I2C4_Init+0x64>)
900019a4:	f000 f814 	bl	900019d0 <MX_I2C4_Init>
900019a8:	4603      	mov	r3, r0
900019aa:	2b00      	cmp	r3, #0
900019ac:	d002      	beq.n	900019b4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
900019ae:	f06f 0307 	mvn.w	r3, #7
900019b2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
900019b4:	687b      	ldr	r3, [r7, #4]
}
900019b6:	4618      	mov	r0, r3
900019b8:	3708      	adds	r7, #8
900019ba:	46bd      	mov	sp, r7
900019bc:	bd80      	pop	{r7, pc}
900019be:	bf00      	nop
900019c0:	2000104c 	.word	0x2000104c
900019c4:	58001c00 	.word	0x58001c00
900019c8:	20000644 	.word	0x20000644
900019cc:	000186a0 	.word	0x000186a0

900019d0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
900019d0:	b580      	push	{r7, lr}
900019d2:	b084      	sub	sp, #16
900019d4:	af00      	add	r7, sp, #0
900019d6:	6078      	str	r0, [r7, #4]
900019d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
900019da:	2300      	movs	r3, #0
900019dc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
900019de:	687b      	ldr	r3, [r7, #4]
900019e0:	683a      	ldr	r2, [r7, #0]
900019e2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
900019e4:	687b      	ldr	r3, [r7, #4]
900019e6:	2200      	movs	r2, #0
900019e8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
900019ea:	687b      	ldr	r3, [r7, #4]
900019ec:	2201      	movs	r2, #1
900019ee:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
900019f0:	687b      	ldr	r3, [r7, #4]
900019f2:	2200      	movs	r2, #0
900019f4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
900019f6:	687b      	ldr	r3, [r7, #4]
900019f8:	2200      	movs	r2, #0
900019fa:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
900019fc:	687b      	ldr	r3, [r7, #4]
900019fe:	2200      	movs	r2, #0
90001a00:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001a02:	687b      	ldr	r3, [r7, #4]
90001a04:	2200      	movs	r2, #0
90001a06:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001a08:	687b      	ldr	r3, [r7, #4]
90001a0a:	2200      	movs	r2, #0
90001a0c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001a0e:	6878      	ldr	r0, [r7, #4]
90001a10:	f004 f8f0 	bl	90005bf4 <HAL_I2C_Init>
90001a14:	4603      	mov	r3, r0
90001a16:	2b00      	cmp	r3, #0
90001a18:	d002      	beq.n	90001a20 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001a1a:	2301      	movs	r3, #1
90001a1c:	73fb      	strb	r3, [r7, #15]
90001a1e:	e014      	b.n	90001a4a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001a20:	2300      	movs	r3, #0
90001a22:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001a24:	68b9      	ldr	r1, [r7, #8]
90001a26:	6878      	ldr	r0, [r7, #4]
90001a28:	f004 fd2c 	bl	90006484 <HAL_I2CEx_ConfigAnalogFilter>
90001a2c:	4603      	mov	r3, r0
90001a2e:	2b00      	cmp	r3, #0
90001a30:	d002      	beq.n	90001a38 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90001a32:	2301      	movs	r3, #1
90001a34:	73fb      	strb	r3, [r7, #15]
90001a36:	e008      	b.n	90001a4a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001a38:	2100      	movs	r1, #0
90001a3a:	6878      	ldr	r0, [r7, #4]
90001a3c:	f004 fd6d 	bl	9000651a <HAL_I2CEx_ConfigDigitalFilter>
90001a40:	4603      	mov	r3, r0
90001a42:	2b00      	cmp	r3, #0
90001a44:	d001      	beq.n	90001a4a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001a46:	2301      	movs	r3, #1
90001a48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
90001a4c:	4618      	mov	r0, r3
90001a4e:	3710      	adds	r7, #16
90001a50:	46bd      	mov	sp, r7
90001a52:	bd80      	pop	{r7, pc}

90001a54 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001a54:	b580      	push	{r7, lr}
90001a56:	b088      	sub	sp, #32
90001a58:	af02      	add	r7, sp, #8
90001a5a:	60ba      	str	r2, [r7, #8]
90001a5c:	461a      	mov	r2, r3
90001a5e:	4603      	mov	r3, r0
90001a60:	81fb      	strh	r3, [r7, #14]
90001a62:	460b      	mov	r3, r1
90001a64:	81bb      	strh	r3, [r7, #12]
90001a66:	4613      	mov	r3, r2
90001a68:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001a6a:	89b9      	ldrh	r1, [r7, #12]
90001a6c:	89f8      	ldrh	r0, [r7, #14]
90001a6e:	88fb      	ldrh	r3, [r7, #6]
90001a70:	9300      	str	r3, [sp, #0]
90001a72:	68bb      	ldr	r3, [r7, #8]
90001a74:	2201      	movs	r2, #1
90001a76:	f000 fafd 	bl	90002074 <I2C4_ReadReg>
90001a7a:	4603      	mov	r3, r0
90001a7c:	2b00      	cmp	r3, #0
90001a7e:	d102      	bne.n	90001a86 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001a80:	2300      	movs	r3, #0
90001a82:	617b      	str	r3, [r7, #20]
90001a84:	e00c      	b.n	90001aa0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001a86:	4809      	ldr	r0, [pc, #36]	@ (90001aac <BSP_I2C4_ReadReg+0x58>)
90001a88:	f004 fa82 	bl	90005f90 <HAL_I2C_GetError>
90001a8c:	4603      	mov	r3, r0
90001a8e:	2b04      	cmp	r3, #4
90001a90:	d103      	bne.n	90001a9a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001a92:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001a96:	617b      	str	r3, [r7, #20]
90001a98:	e002      	b.n	90001aa0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001a9a:	f06f 0303 	mvn.w	r3, #3
90001a9e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001aa0:	697b      	ldr	r3, [r7, #20]
}
90001aa2:	4618      	mov	r0, r3
90001aa4:	3718      	adds	r7, #24
90001aa6:	46bd      	mov	sp, r7
90001aa8:	bd80      	pop	{r7, pc}
90001aaa:	bf00      	nop
90001aac:	2000104c 	.word	0x2000104c

90001ab0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001ab0:	b580      	push	{r7, lr}
90001ab2:	b086      	sub	sp, #24
90001ab4:	af00      	add	r7, sp, #0
90001ab6:	6078      	str	r0, [r7, #4]
90001ab8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001aba:	2300      	movs	r3, #0
90001abc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001abe:	687b      	ldr	r3, [r7, #4]
90001ac0:	2b00      	cmp	r3, #0
90001ac2:	d06b      	beq.n	90001b9c <I2C_GetTiming+0xec>
90001ac4:	683b      	ldr	r3, [r7, #0]
90001ac6:	2b00      	cmp	r3, #0
90001ac8:	d068      	beq.n	90001b9c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001aca:	2300      	movs	r3, #0
90001acc:	613b      	str	r3, [r7, #16]
90001ace:	e060      	b.n	90001b92 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001ad0:	4a35      	ldr	r2, [pc, #212]	@ (90001ba8 <I2C_GetTiming+0xf8>)
90001ad2:	693b      	ldr	r3, [r7, #16]
90001ad4:	212c      	movs	r1, #44	@ 0x2c
90001ad6:	fb01 f303 	mul.w	r3, r1, r3
90001ada:	4413      	add	r3, r2
90001adc:	3304      	adds	r3, #4
90001ade:	681b      	ldr	r3, [r3, #0]
90001ae0:	683a      	ldr	r2, [r7, #0]
90001ae2:	429a      	cmp	r2, r3
90001ae4:	d352      	bcc.n	90001b8c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001ae6:	4a30      	ldr	r2, [pc, #192]	@ (90001ba8 <I2C_GetTiming+0xf8>)
90001ae8:	693b      	ldr	r3, [r7, #16]
90001aea:	212c      	movs	r1, #44	@ 0x2c
90001aec:	fb01 f303 	mul.w	r3, r1, r3
90001af0:	4413      	add	r3, r2
90001af2:	3308      	adds	r3, #8
90001af4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001af6:	683a      	ldr	r2, [r7, #0]
90001af8:	429a      	cmp	r2, r3
90001afa:	d847      	bhi.n	90001b8c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001afc:	6939      	ldr	r1, [r7, #16]
90001afe:	6878      	ldr	r0, [r7, #4]
90001b00:	f000 f856 	bl	90001bb0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001b04:	6939      	ldr	r1, [r7, #16]
90001b06:	6878      	ldr	r0, [r7, #4]
90001b08:	f000 f940 	bl	90001d8c <I2C_Compute_SCLL_SCLH>
90001b0c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001b0e:	68fb      	ldr	r3, [r7, #12]
90001b10:	2b7f      	cmp	r3, #127	@ 0x7f
90001b12:	d842      	bhi.n	90001b9a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001b14:	4925      	ldr	r1, [pc, #148]	@ (90001bac <I2C_GetTiming+0xfc>)
90001b16:	68fa      	ldr	r2, [r7, #12]
90001b18:	4613      	mov	r3, r2
90001b1a:	009b      	lsls	r3, r3, #2
90001b1c:	4413      	add	r3, r2
90001b1e:	009b      	lsls	r3, r3, #2
90001b20:	440b      	add	r3, r1
90001b22:	681b      	ldr	r3, [r3, #0]
90001b24:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001b26:	4821      	ldr	r0, [pc, #132]	@ (90001bac <I2C_GetTiming+0xfc>)
90001b28:	68fa      	ldr	r2, [r7, #12]
90001b2a:	4613      	mov	r3, r2
90001b2c:	009b      	lsls	r3, r3, #2
90001b2e:	4413      	add	r3, r2
90001b30:	009b      	lsls	r3, r3, #2
90001b32:	4403      	add	r3, r0
90001b34:	3304      	adds	r3, #4
90001b36:	681b      	ldr	r3, [r3, #0]
90001b38:	051b      	lsls	r3, r3, #20
90001b3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001b3e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001b40:	481a      	ldr	r0, [pc, #104]	@ (90001bac <I2C_GetTiming+0xfc>)
90001b42:	68fa      	ldr	r2, [r7, #12]
90001b44:	4613      	mov	r3, r2
90001b46:	009b      	lsls	r3, r3, #2
90001b48:	4413      	add	r3, r2
90001b4a:	009b      	lsls	r3, r3, #2
90001b4c:	4403      	add	r3, r0
90001b4e:	3308      	adds	r3, #8
90001b50:	681b      	ldr	r3, [r3, #0]
90001b52:	041b      	lsls	r3, r3, #16
90001b54:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001b58:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001b5a:	4814      	ldr	r0, [pc, #80]	@ (90001bac <I2C_GetTiming+0xfc>)
90001b5c:	68fa      	ldr	r2, [r7, #12]
90001b5e:	4613      	mov	r3, r2
90001b60:	009b      	lsls	r3, r3, #2
90001b62:	4413      	add	r3, r2
90001b64:	009b      	lsls	r3, r3, #2
90001b66:	4403      	add	r3, r0
90001b68:	330c      	adds	r3, #12
90001b6a:	681b      	ldr	r3, [r3, #0]
90001b6c:	021b      	lsls	r3, r3, #8
90001b6e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001b70:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001b72:	480e      	ldr	r0, [pc, #56]	@ (90001bac <I2C_GetTiming+0xfc>)
90001b74:	68fa      	ldr	r2, [r7, #12]
90001b76:	4613      	mov	r3, r2
90001b78:	009b      	lsls	r3, r3, #2
90001b7a:	4413      	add	r3, r2
90001b7c:	009b      	lsls	r3, r3, #2
90001b7e:	4403      	add	r3, r0
90001b80:	3310      	adds	r3, #16
90001b82:	681b      	ldr	r3, [r3, #0]
90001b84:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001b86:	430b      	orrs	r3, r1
90001b88:	617b      	str	r3, [r7, #20]
        }
        break;
90001b8a:	e006      	b.n	90001b9a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001b8c:	693b      	ldr	r3, [r7, #16]
90001b8e:	3301      	adds	r3, #1
90001b90:	613b      	str	r3, [r7, #16]
90001b92:	693b      	ldr	r3, [r7, #16]
90001b94:	2b02      	cmp	r3, #2
90001b96:	d99b      	bls.n	90001ad0 <I2C_GetTiming+0x20>
90001b98:	e000      	b.n	90001b9c <I2C_GetTiming+0xec>
        break;
90001b9a:	bf00      	nop
      }
    }
  }

  return ret;
90001b9c:	697b      	ldr	r3, [r7, #20]
}
90001b9e:	4618      	mov	r0, r3
90001ba0:	3718      	adds	r7, #24
90001ba2:	46bd      	mov	sp, r7
90001ba4:	bd80      	pop	{r7, pc}
90001ba6:	bf00      	nop
90001ba8:	9000d7d4 	.word	0x9000d7d4
90001bac:	20000648 	.word	0x20000648

90001bb0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001bb0:	b480      	push	{r7}
90001bb2:	b08f      	sub	sp, #60	@ 0x3c
90001bb4:	af00      	add	r7, sp, #0
90001bb6:	6078      	str	r0, [r7, #4]
90001bb8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001bba:	2310      	movs	r3, #16
90001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001bbe:	687b      	ldr	r3, [r7, #4]
90001bc0:	085a      	lsrs	r2, r3, #1
90001bc2:	4b6e      	ldr	r3, [pc, #440]	@ (90001d7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001bc4:	4413      	add	r3, r2
90001bc6:	687a      	ldr	r2, [r7, #4]
90001bc8:	fbb3 f3f2 	udiv	r3, r3, r2
90001bcc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001bce:	2332      	movs	r3, #50	@ 0x32
90001bd0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001bd2:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001bd6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001bd8:	4a69      	ldr	r2, [pc, #420]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001bda:	683b      	ldr	r3, [r7, #0]
90001bdc:	212c      	movs	r1, #44	@ 0x2c
90001bde:	fb01 f303 	mul.w	r3, r1, r3
90001be2:	4413      	add	r3, r2
90001be4:	3324      	adds	r3, #36	@ 0x24
90001be6:	681b      	ldr	r3, [r3, #0]
90001be8:	4618      	mov	r0, r3
90001bea:	4a65      	ldr	r2, [pc, #404]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001bec:	683b      	ldr	r3, [r7, #0]
90001bee:	212c      	movs	r1, #44	@ 0x2c
90001bf0:	fb01 f303 	mul.w	r3, r1, r3
90001bf4:	4413      	add	r3, r2
90001bf6:	330c      	adds	r3, #12
90001bf8:	681b      	ldr	r3, [r3, #0]
90001bfa:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001bfc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001bfe:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001c00:	495f      	ldr	r1, [pc, #380]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001c02:	683b      	ldr	r3, [r7, #0]
90001c04:	202c      	movs	r0, #44	@ 0x2c
90001c06:	fb00 f303 	mul.w	r3, r0, r3
90001c0a:	440b      	add	r3, r1
90001c0c:	3328      	adds	r3, #40	@ 0x28
90001c0e:	681b      	ldr	r3, [r3, #0]
90001c10:	3303      	adds	r3, #3
90001c12:	69f9      	ldr	r1, [r7, #28]
90001c14:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001c18:	1ad3      	subs	r3, r2, r3
90001c1a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001c1c:	4a58      	ldr	r2, [pc, #352]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001c1e:	683b      	ldr	r3, [r7, #0]
90001c20:	212c      	movs	r1, #44	@ 0x2c
90001c22:	fb01 f303 	mul.w	r3, r1, r3
90001c26:	4413      	add	r3, r2
90001c28:	3310      	adds	r3, #16
90001c2a:	681b      	ldr	r3, [r3, #0]
90001c2c:	4618      	mov	r0, r3
90001c2e:	4a54      	ldr	r2, [pc, #336]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001c30:	683b      	ldr	r3, [r7, #0]
90001c32:	212c      	movs	r1, #44	@ 0x2c
90001c34:	fb01 f303 	mul.w	r3, r1, r3
90001c38:	4413      	add	r3, r2
90001c3a:	3320      	adds	r3, #32
90001c3c:	681b      	ldr	r3, [r3, #0]
90001c3e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001c40:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001c42:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001c44:	494e      	ldr	r1, [pc, #312]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001c46:	683b      	ldr	r3, [r7, #0]
90001c48:	202c      	movs	r0, #44	@ 0x2c
90001c4a:	fb00 f303 	mul.w	r3, r0, r3
90001c4e:	440b      	add	r3, r1
90001c50:	3328      	adds	r3, #40	@ 0x28
90001c52:	681b      	ldr	r3, [r3, #0]
90001c54:	3304      	adds	r3, #4
90001c56:	69f9      	ldr	r1, [r7, #28]
90001c58:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001c5c:	1ad3      	subs	r3, r2, r3
90001c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001c60:	4a47      	ldr	r2, [pc, #284]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001c62:	683b      	ldr	r3, [r7, #0]
90001c64:	212c      	movs	r1, #44	@ 0x2c
90001c66:	fb01 f303 	mul.w	r3, r1, r3
90001c6a:	4413      	add	r3, r2
90001c6c:	3320      	adds	r3, #32
90001c6e:	681b      	ldr	r3, [r3, #0]
90001c70:	4618      	mov	r0, r3
90001c72:	4a43      	ldr	r2, [pc, #268]	@ (90001d80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001c74:	683b      	ldr	r3, [r7, #0]
90001c76:	212c      	movs	r1, #44	@ 0x2c
90001c78:	fb01 f303 	mul.w	r3, r1, r3
90001c7c:	4413      	add	r3, r2
90001c7e:	3314      	adds	r3, #20
90001c80:	681b      	ldr	r3, [r3, #0]
90001c82:	4403      	add	r3, r0
90001c84:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c88:	2b00      	cmp	r3, #0
90001c8a:	dc01      	bgt.n	90001c90 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001c8c:	2300      	movs	r3, #0
90001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001c92:	2b00      	cmp	r3, #0
90001c94:	dc01      	bgt.n	90001c9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001c96:	2300      	movs	r3, #0
90001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001c9a:	2300      	movs	r3, #0
90001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
90001c9e:	e062      	b.n	90001d66 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001ca0:	2300      	movs	r3, #0
90001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
90001ca4:	e059      	b.n	90001d5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001ca8:	3301      	adds	r3, #1
90001caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001cac:	3201      	adds	r2, #1
90001cae:	fb03 f202 	mul.w	r2, r3, r2
90001cb2:	69fb      	ldr	r3, [r7, #28]
90001cb4:	fb02 f303 	mul.w	r3, r2, r3
90001cb8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001cba:	693b      	ldr	r3, [r7, #16]
90001cbc:	68fa      	ldr	r2, [r7, #12]
90001cbe:	429a      	cmp	r2, r3
90001cc0:	d348      	bcc.n	90001d54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001cc2:	2300      	movs	r3, #0
90001cc4:	623b      	str	r3, [r7, #32]
90001cc6:	e042      	b.n	90001d4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001cca:	3301      	adds	r3, #1
90001ccc:	6a3a      	ldr	r2, [r7, #32]
90001cce:	fb03 f202 	mul.w	r2, r3, r2
90001cd2:	69fb      	ldr	r3, [r7, #28]
90001cd4:	fb02 f303 	mul.w	r3, r2, r3
90001cd8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001cdc:	68ba      	ldr	r2, [r7, #8]
90001cde:	429a      	cmp	r2, r3
90001ce0:	d332      	bcc.n	90001d48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ce4:	68ba      	ldr	r2, [r7, #8]
90001ce6:	429a      	cmp	r2, r3
90001ce8:	d82e      	bhi.n	90001d48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001cee:	429a      	cmp	r2, r3
90001cf0:	d02a      	beq.n	90001d48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001cf2:	4b24      	ldr	r3, [pc, #144]	@ (90001d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001cf4:	681a      	ldr	r2, [r3, #0]
90001cf6:	4924      	ldr	r1, [pc, #144]	@ (90001d88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001cf8:	4613      	mov	r3, r2
90001cfa:	009b      	lsls	r3, r3, #2
90001cfc:	4413      	add	r3, r2
90001cfe:	009b      	lsls	r3, r3, #2
90001d00:	440b      	add	r3, r1
90001d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001d04:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001d06:	4b1f      	ldr	r3, [pc, #124]	@ (90001d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001d08:	681a      	ldr	r2, [r3, #0]
90001d0a:	491f      	ldr	r1, [pc, #124]	@ (90001d88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001d0c:	4613      	mov	r3, r2
90001d0e:	009b      	lsls	r3, r3, #2
90001d10:	4413      	add	r3, r2
90001d12:	009b      	lsls	r3, r3, #2
90001d14:	440b      	add	r3, r1
90001d16:	3304      	adds	r3, #4
90001d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001d1a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001d1c:	4b19      	ldr	r3, [pc, #100]	@ (90001d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001d1e:	681a      	ldr	r2, [r3, #0]
90001d20:	4919      	ldr	r1, [pc, #100]	@ (90001d88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001d22:	4613      	mov	r3, r2
90001d24:	009b      	lsls	r3, r3, #2
90001d26:	4413      	add	r3, r2
90001d28:	009b      	lsls	r3, r3, #2
90001d2a:	440b      	add	r3, r1
90001d2c:	3308      	adds	r3, #8
90001d2e:	6a3a      	ldr	r2, [r7, #32]
90001d30:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001d34:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001d36:	4b13      	ldr	r3, [pc, #76]	@ (90001d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001d38:	681b      	ldr	r3, [r3, #0]
90001d3a:	3301      	adds	r3, #1
90001d3c:	4a11      	ldr	r2, [pc, #68]	@ (90001d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001d3e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001d40:	4b10      	ldr	r3, [pc, #64]	@ (90001d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001d42:	681b      	ldr	r3, [r3, #0]
90001d44:	2b7f      	cmp	r3, #127	@ 0x7f
90001d46:	d812      	bhi.n	90001d6e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001d48:	6a3b      	ldr	r3, [r7, #32]
90001d4a:	3301      	adds	r3, #1
90001d4c:	623b      	str	r3, [r7, #32]
90001d4e:	6a3b      	ldr	r3, [r7, #32]
90001d50:	2b0f      	cmp	r3, #15
90001d52:	d9b9      	bls.n	90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001d56:	3301      	adds	r3, #1
90001d58:	627b      	str	r3, [r7, #36]	@ 0x24
90001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001d5c:	2b0f      	cmp	r3, #15
90001d5e:	d9a2      	bls.n	90001ca6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001d62:	3301      	adds	r3, #1
90001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
90001d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001d68:	2b0f      	cmp	r3, #15
90001d6a:	d999      	bls.n	90001ca0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001d6c:	e000      	b.n	90001d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001d6e:	bf00      	nop
          }
        }
      }
    }
  }
}
90001d70:	373c      	adds	r7, #60	@ 0x3c
90001d72:	46bd      	mov	sp, r7
90001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
90001d78:	4770      	bx	lr
90001d7a:	bf00      	nop
90001d7c:	3b9aca00 	.word	0x3b9aca00
90001d80:	9000d7d4 	.word	0x9000d7d4
90001d84:	20001048 	.word	0x20001048
90001d88:	20000648 	.word	0x20000648

90001d8c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001d8c:	b480      	push	{r7}
90001d8e:	b093      	sub	sp, #76	@ 0x4c
90001d90:	af00      	add	r7, sp, #0
90001d92:	6078      	str	r0, [r7, #4]
90001d94:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001d96:	f04f 33ff 	mov.w	r3, #4294967295
90001d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001d9c:	687b      	ldr	r3, [r7, #4]
90001d9e:	085a      	lsrs	r2, r3, #1
90001da0:	4b7a      	ldr	r3, [pc, #488]	@ (90001f8c <I2C_Compute_SCLL_SCLH+0x200>)
90001da2:	4413      	add	r3, r2
90001da4:	687a      	ldr	r2, [r7, #4]
90001da6:	fbb3 f3f2 	udiv	r3, r3, r2
90001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001dac:	4a78      	ldr	r2, [pc, #480]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001dae:	683b      	ldr	r3, [r7, #0]
90001db0:	212c      	movs	r1, #44	@ 0x2c
90001db2:	fb01 f303 	mul.w	r3, r1, r3
90001db6:	4413      	add	r3, r2
90001db8:	681b      	ldr	r3, [r3, #0]
90001dba:	085a      	lsrs	r2, r3, #1
90001dbc:	4b73      	ldr	r3, [pc, #460]	@ (90001f8c <I2C_Compute_SCLL_SCLH+0x200>)
90001dbe:	4413      	add	r3, r2
90001dc0:	4973      	ldr	r1, [pc, #460]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001dc2:	683a      	ldr	r2, [r7, #0]
90001dc4:	202c      	movs	r0, #44	@ 0x2c
90001dc6:	fb00 f202 	mul.w	r2, r0, r2
90001dca:	440a      	add	r2, r1
90001dcc:	6812      	ldr	r2, [r2, #0]
90001dce:	fbb3 f3f2 	udiv	r3, r3, r2
90001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001dd4:	2332      	movs	r3, #50	@ 0x32
90001dd6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001dd8:	4a6d      	ldr	r2, [pc, #436]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001dda:	683b      	ldr	r3, [r7, #0]
90001ddc:	212c      	movs	r1, #44	@ 0x2c
90001dde:	fb01 f303 	mul.w	r3, r1, r3
90001de2:	4413      	add	r3, r2
90001de4:	3328      	adds	r3, #40	@ 0x28
90001de6:	681a      	ldr	r2, [r3, #0]
90001de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001dea:	fb02 f303 	mul.w	r3, r2, r3
90001dee:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001df0:	4a67      	ldr	r2, [pc, #412]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001df2:	683b      	ldr	r3, [r7, #0]
90001df4:	212c      	movs	r1, #44	@ 0x2c
90001df6:	fb01 f303 	mul.w	r3, r1, r3
90001dfa:	4413      	add	r3, r2
90001dfc:	3304      	adds	r3, #4
90001dfe:	681b      	ldr	r3, [r3, #0]
90001e00:	4a62      	ldr	r2, [pc, #392]	@ (90001f8c <I2C_Compute_SCLL_SCLH+0x200>)
90001e02:	fbb2 f3f3 	udiv	r3, r2, r3
90001e06:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001e08:	4a61      	ldr	r2, [pc, #388]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001e0a:	683b      	ldr	r3, [r7, #0]
90001e0c:	212c      	movs	r1, #44	@ 0x2c
90001e0e:	fb01 f303 	mul.w	r3, r1, r3
90001e12:	4413      	add	r3, r2
90001e14:	3308      	adds	r3, #8
90001e16:	681b      	ldr	r3, [r3, #0]
90001e18:	4a5c      	ldr	r2, [pc, #368]	@ (90001f8c <I2C_Compute_SCLL_SCLH+0x200>)
90001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
90001e1e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e22:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001e24:	2300      	movs	r3, #0
90001e26:	637b      	str	r3, [r7, #52]	@ 0x34
90001e28:	e0a3      	b.n	90001f72 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001e2a:	495a      	ldr	r1, [pc, #360]	@ (90001f94 <I2C_Compute_SCLL_SCLH+0x208>)
90001e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001e2e:	4613      	mov	r3, r2
90001e30:	009b      	lsls	r3, r3, #2
90001e32:	4413      	add	r3, r2
90001e34:	009b      	lsls	r3, r3, #2
90001e36:	440b      	add	r3, r1
90001e38:	681b      	ldr	r3, [r3, #0]
90001e3a:	1c5a      	adds	r2, r3, #1
90001e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001e3e:	fb02 f303 	mul.w	r3, r2, r3
90001e42:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001e44:	2300      	movs	r3, #0
90001e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001e48:	e08c      	b.n	90001f64 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001e4c:	6a3b      	ldr	r3, [r7, #32]
90001e4e:	441a      	add	r2, r3
90001e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001e52:	3301      	adds	r3, #1
90001e54:	6979      	ldr	r1, [r7, #20]
90001e56:	fb03 f101 	mul.w	r1, r3, r1
90001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001e5c:	005b      	lsls	r3, r3, #1
90001e5e:	440b      	add	r3, r1
90001e60:	4413      	add	r3, r2
90001e62:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001e64:	4a4a      	ldr	r2, [pc, #296]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001e66:	683b      	ldr	r3, [r7, #0]
90001e68:	212c      	movs	r1, #44	@ 0x2c
90001e6a:	fb01 f303 	mul.w	r3, r1, r3
90001e6e:	4413      	add	r3, r2
90001e70:	3318      	adds	r3, #24
90001e72:	681b      	ldr	r3, [r3, #0]
90001e74:	693a      	ldr	r2, [r7, #16]
90001e76:	429a      	cmp	r2, r3
90001e78:	d971      	bls.n	90001f5e <I2C_Compute_SCLL_SCLH+0x1d2>
90001e7a:	693a      	ldr	r2, [r7, #16]
90001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001e7e:	1ad2      	subs	r2, r2, r3
90001e80:	6a3b      	ldr	r3, [r7, #32]
90001e82:	1ad3      	subs	r3, r2, r3
90001e84:	089b      	lsrs	r3, r3, #2
90001e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001e88:	429a      	cmp	r2, r3
90001e8a:	d268      	bcs.n	90001f5e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001e8c:	2300      	movs	r3, #0
90001e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
90001e90:	e062      	b.n	90001f58 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001e94:	6a3b      	ldr	r3, [r7, #32]
90001e96:	441a      	add	r2, r3
90001e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001e9a:	3301      	adds	r3, #1
90001e9c:	6979      	ldr	r1, [r7, #20]
90001e9e:	fb03 f101 	mul.w	r1, r3, r1
90001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ea4:	005b      	lsls	r3, r3, #1
90001ea6:	440b      	add	r3, r1
90001ea8:	4413      	add	r3, r2
90001eaa:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001eac:	693a      	ldr	r2, [r7, #16]
90001eae:	68fb      	ldr	r3, [r7, #12]
90001eb0:	441a      	add	r2, r3
90001eb2:	4937      	ldr	r1, [pc, #220]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001eb4:	683b      	ldr	r3, [r7, #0]
90001eb6:	202c      	movs	r0, #44	@ 0x2c
90001eb8:	fb00 f303 	mul.w	r3, r0, r3
90001ebc:	440b      	add	r3, r1
90001ebe:	3320      	adds	r3, #32
90001ec0:	681b      	ldr	r3, [r3, #0]
90001ec2:	441a      	add	r2, r3
90001ec4:	4932      	ldr	r1, [pc, #200]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001ec6:	683b      	ldr	r3, [r7, #0]
90001ec8:	202c      	movs	r0, #44	@ 0x2c
90001eca:	fb00 f303 	mul.w	r3, r0, r3
90001ece:	440b      	add	r3, r1
90001ed0:	3324      	adds	r3, #36	@ 0x24
90001ed2:	681b      	ldr	r3, [r3, #0]
90001ed4:	4413      	add	r3, r2
90001ed6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001ed8:	68ba      	ldr	r2, [r7, #8]
90001eda:	69bb      	ldr	r3, [r7, #24]
90001edc:	429a      	cmp	r2, r3
90001ede:	d338      	bcc.n	90001f52 <I2C_Compute_SCLL_SCLH+0x1c6>
90001ee0:	68ba      	ldr	r2, [r7, #8]
90001ee2:	69fb      	ldr	r3, [r7, #28]
90001ee4:	429a      	cmp	r2, r3
90001ee6:	d834      	bhi.n	90001f52 <I2C_Compute_SCLL_SCLH+0x1c6>
90001ee8:	4a29      	ldr	r2, [pc, #164]	@ (90001f90 <I2C_Compute_SCLL_SCLH+0x204>)
90001eea:	683b      	ldr	r3, [r7, #0]
90001eec:	212c      	movs	r1, #44	@ 0x2c
90001eee:	fb01 f303 	mul.w	r3, r1, r3
90001ef2:	4413      	add	r3, r2
90001ef4:	331c      	adds	r3, #28
90001ef6:	681b      	ldr	r3, [r3, #0]
90001ef8:	68fa      	ldr	r2, [r7, #12]
90001efa:	429a      	cmp	r2, r3
90001efc:	d329      	bcc.n	90001f52 <I2C_Compute_SCLL_SCLH+0x1c6>
90001efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001f00:	68fb      	ldr	r3, [r7, #12]
90001f02:	429a      	cmp	r2, r3
90001f04:	d225      	bcs.n	90001f52 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001f06:	68ba      	ldr	r2, [r7, #8]
90001f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001f0a:	1ad3      	subs	r3, r2, r3
90001f0c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001f10:	2b00      	cmp	r3, #0
90001f12:	da02      	bge.n	90001f1a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001f16:	425b      	negs	r3, r3
90001f18:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001f1e:	429a      	cmp	r2, r3
90001f20:	d917      	bls.n	90001f52 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001f24:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001f26:	491b      	ldr	r1, [pc, #108]	@ (90001f94 <I2C_Compute_SCLL_SCLH+0x208>)
90001f28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001f2a:	4613      	mov	r3, r2
90001f2c:	009b      	lsls	r3, r3, #2
90001f2e:	4413      	add	r3, r2
90001f30:	009b      	lsls	r3, r3, #2
90001f32:	440b      	add	r3, r1
90001f34:	3310      	adds	r3, #16
90001f36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001f38:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001f3a:	4916      	ldr	r1, [pc, #88]	@ (90001f94 <I2C_Compute_SCLL_SCLH+0x208>)
90001f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001f3e:	4613      	mov	r3, r2
90001f40:	009b      	lsls	r3, r3, #2
90001f42:	4413      	add	r3, r2
90001f44:	009b      	lsls	r3, r3, #2
90001f46:	440b      	add	r3, r1
90001f48:	330c      	adds	r3, #12
90001f4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001f4c:	601a      	str	r2, [r3, #0]
              ret = count;
90001f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001f50:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001f54:	3301      	adds	r3, #1
90001f56:	63bb      	str	r3, [r7, #56]	@ 0x38
90001f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001f5a:	2bff      	cmp	r3, #255	@ 0xff
90001f5c:	d999      	bls.n	90001e92 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001f60:	3301      	adds	r3, #1
90001f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001f66:	2bff      	cmp	r3, #255	@ 0xff
90001f68:	f67f af6f 	bls.w	90001e4a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001f6e:	3301      	adds	r3, #1
90001f70:	637b      	str	r3, [r7, #52]	@ 0x34
90001f72:	4b09      	ldr	r3, [pc, #36]	@ (90001f98 <I2C_Compute_SCLL_SCLH+0x20c>)
90001f74:	681b      	ldr	r3, [r3, #0]
90001f76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001f78:	429a      	cmp	r2, r3
90001f7a:	f4ff af56 	bcc.w	90001e2a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001f80:	4618      	mov	r0, r3
90001f82:	374c      	adds	r7, #76	@ 0x4c
90001f84:	46bd      	mov	sp, r7
90001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f8a:	4770      	bx	lr
90001f8c:	3b9aca00 	.word	0x3b9aca00
90001f90:	9000d7d4 	.word	0x9000d7d4
90001f94:	20000648 	.word	0x20000648
90001f98:	20001048 	.word	0x20001048

90001f9c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001f9c:	b580      	push	{r7, lr}
90001f9e:	b08a      	sub	sp, #40	@ 0x28
90001fa0:	af00      	add	r7, sp, #0
90001fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001fa4:	4b31      	ldr	r3, [pc, #196]	@ (9000206c <I2C4_MspInit+0xd0>)
90001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001faa:	4a30      	ldr	r2, [pc, #192]	@ (9000206c <I2C4_MspInit+0xd0>)
90001fac:	f043 0308 	orr.w	r3, r3, #8
90001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001fb4:	4b2d      	ldr	r3, [pc, #180]	@ (9000206c <I2C4_MspInit+0xd0>)
90001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001fba:	f003 0308 	and.w	r3, r3, #8
90001fbe:	613b      	str	r3, [r7, #16]
90001fc0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (9000206c <I2C4_MspInit+0xd0>)
90001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001fc8:	4a28      	ldr	r2, [pc, #160]	@ (9000206c <I2C4_MspInit+0xd0>)
90001fca:	f043 0308 	orr.w	r3, r3, #8
90001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001fd2:	4b26      	ldr	r3, [pc, #152]	@ (9000206c <I2C4_MspInit+0xd0>)
90001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001fd8:	f003 0308 	and.w	r3, r3, #8
90001fdc:	60fb      	str	r3, [r7, #12]
90001fde:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001fe4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001fe6:	2312      	movs	r3, #18
90001fe8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001fea:	2300      	movs	r3, #0
90001fec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001fee:	2302      	movs	r3, #2
90001ff0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001ff2:	2304      	movs	r3, #4
90001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001ff6:	f107 0314 	add.w	r3, r7, #20
90001ffa:	4619      	mov	r1, r3
90001ffc:	481c      	ldr	r0, [pc, #112]	@ (90002070 <I2C4_MspInit+0xd4>)
90001ffe:	f001 fe71 	bl	90003ce4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90002002:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90002006:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90002008:	2312      	movs	r3, #18
9000200a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
9000200c:	2300      	movs	r3, #0
9000200e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002010:	2302      	movs	r3, #2
90002012:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90002014:	2304      	movs	r3, #4
90002016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90002018:	f107 0314 	add.w	r3, r7, #20
9000201c:	4619      	mov	r1, r3
9000201e:	4814      	ldr	r0, [pc, #80]	@ (90002070 <I2C4_MspInit+0xd4>)
90002020:	f001 fe60 	bl	90003ce4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90002024:	4b11      	ldr	r3, [pc, #68]	@ (9000206c <I2C4_MspInit+0xd0>)
90002026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000202a:	4a10      	ldr	r2, [pc, #64]	@ (9000206c <I2C4_MspInit+0xd0>)
9000202c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002030:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90002034:	4b0d      	ldr	r3, [pc, #52]	@ (9000206c <I2C4_MspInit+0xd0>)
90002036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000203a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000203e:	60bb      	str	r3, [r7, #8]
90002040:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90002042:	4b0a      	ldr	r3, [pc, #40]	@ (9000206c <I2C4_MspInit+0xd0>)
90002044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002048:	4a08      	ldr	r2, [pc, #32]	@ (9000206c <I2C4_MspInit+0xd0>)
9000204a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000204e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90002052:	4b06      	ldr	r3, [pc, #24]	@ (9000206c <I2C4_MspInit+0xd0>)
90002054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002058:	4a04      	ldr	r2, [pc, #16]	@ (9000206c <I2C4_MspInit+0xd0>)
9000205a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000205e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90002062:	bf00      	nop
90002064:	3728      	adds	r7, #40	@ 0x28
90002066:	46bd      	mov	sp, r7
90002068:	bd80      	pop	{r7, pc}
9000206a:	bf00      	nop
9000206c:	58024400 	.word	0x58024400
90002070:	58020c00 	.word	0x58020c00

90002074 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90002074:	b580      	push	{r7, lr}
90002076:	b088      	sub	sp, #32
90002078:	af04      	add	r7, sp, #16
9000207a:	607b      	str	r3, [r7, #4]
9000207c:	4603      	mov	r3, r0
9000207e:	81fb      	strh	r3, [r7, #14]
90002080:	460b      	mov	r3, r1
90002082:	81bb      	strh	r3, [r7, #12]
90002084:	4613      	mov	r3, r2
90002086:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90002088:	8978      	ldrh	r0, [r7, #10]
9000208a:	89ba      	ldrh	r2, [r7, #12]
9000208c:	89f9      	ldrh	r1, [r7, #14]
9000208e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90002092:	9302      	str	r3, [sp, #8]
90002094:	8b3b      	ldrh	r3, [r7, #24]
90002096:	9301      	str	r3, [sp, #4]
90002098:	687b      	ldr	r3, [r7, #4]
9000209a:	9300      	str	r3, [sp, #0]
9000209c:	4603      	mov	r3, r0
9000209e:	4807      	ldr	r0, [pc, #28]	@ (900020bc <I2C4_ReadReg+0x48>)
900020a0:	f003 fe4e 	bl	90005d40 <HAL_I2C_Mem_Read>
900020a4:	4603      	mov	r3, r0
900020a6:	2b00      	cmp	r3, #0
900020a8:	d101      	bne.n	900020ae <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
900020aa:	2300      	movs	r3, #0
900020ac:	e001      	b.n	900020b2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
900020ae:	f06f 0307 	mvn.w	r3, #7
}
900020b2:	4618      	mov	r0, r3
900020b4:	3710      	adds	r7, #16
900020b6:	46bd      	mov	sp, r7
900020b8:	bd80      	pop	{r7, pc}
900020ba:	bf00      	nop
900020bc:	2000104c 	.word	0x2000104c

900020c0 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
900020c0:	b580      	push	{r7, lr}
900020c2:	b084      	sub	sp, #16
900020c4:	af02      	add	r7, sp, #8
900020c6:	6078      	str	r0, [r7, #4]
900020c8:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
900020ca:	f44f 7388 	mov.w	r3, #272	@ 0x110
900020ce:	9300      	str	r3, [sp, #0]
900020d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
900020d4:	2200      	movs	r2, #0
900020d6:	6839      	ldr	r1, [r7, #0]
900020d8:	6878      	ldr	r0, [r7, #4]
900020da:	f000 f805 	bl	900020e8 <BSP_LCD_InitEx>
900020de:	4603      	mov	r3, r0
}
900020e0:	4618      	mov	r0, r3
900020e2:	3708      	adds	r7, #8
900020e4:	46bd      	mov	sp, r7
900020e6:	bd80      	pop	{r7, pc}

900020e8 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
900020e8:	b580      	push	{r7, lr}
900020ea:	b09e      	sub	sp, #120	@ 0x78
900020ec:	af00      	add	r7, sp, #0
900020ee:	60f8      	str	r0, [r7, #12]
900020f0:	60b9      	str	r1, [r7, #8]
900020f2:	607a      	str	r2, [r7, #4]
900020f4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900020f6:	2300      	movs	r3, #0
900020f8:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
900020fa:	2300      	movs	r3, #0
900020fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
900020fe:	68bb      	ldr	r3, [r7, #8]
90002100:	2b01      	cmp	r3, #1
90002102:	d808      	bhi.n	90002116 <BSP_LCD_InitEx+0x2e>
90002104:	68fb      	ldr	r3, [r7, #12]
90002106:	2b00      	cmp	r3, #0
90002108:	d105      	bne.n	90002116 <BSP_LCD_InitEx+0x2e>
9000210a:	687b      	ldr	r3, [r7, #4]
9000210c:	2b02      	cmp	r3, #2
9000210e:	d006      	beq.n	9000211e <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90002110:	687b      	ldr	r3, [r7, #4]
90002112:	2b00      	cmp	r3, #0
90002114:	d003      	beq.n	9000211e <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002116:	f06f 0301 	mvn.w	r3, #1
9000211a:	677b      	str	r3, [r7, #116]	@ 0x74
9000211c:	e0a8      	b.n	90002270 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000211e:	687b      	ldr	r3, [r7, #4]
90002120:	2b02      	cmp	r3, #2
90002122:	d109      	bne.n	90002138 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90002124:	2302      	movs	r3, #2
90002126:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90002128:	4a54      	ldr	r2, [pc, #336]	@ (9000227c <BSP_LCD_InitEx+0x194>)
9000212a:	68fb      	ldr	r3, [r7, #12]
9000212c:	015b      	lsls	r3, r3, #5
9000212e:	4413      	add	r3, r2
90002130:	3310      	adds	r3, #16
90002132:	2202      	movs	r2, #2
90002134:	601a      	str	r2, [r3, #0]
90002136:	e008      	b.n	9000214a <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90002138:	2300      	movs	r3, #0
9000213a:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
9000213c:	4a4f      	ldr	r2, [pc, #316]	@ (9000227c <BSP_LCD_InitEx+0x194>)
9000213e:	68fb      	ldr	r3, [r7, #12]
90002140:	015b      	lsls	r3, r3, #5
90002142:	4413      	add	r3, r2
90002144:	3310      	adds	r3, #16
90002146:	2204      	movs	r2, #4
90002148:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
9000214a:	4a4c      	ldr	r2, [pc, #304]	@ (9000227c <BSP_LCD_InitEx+0x194>)
9000214c:	68fb      	ldr	r3, [r7, #12]
9000214e:	015b      	lsls	r3, r3, #5
90002150:	4413      	add	r3, r2
90002152:	330c      	adds	r3, #12
90002154:	687a      	ldr	r2, [r7, #4]
90002156:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90002158:	4a48      	ldr	r2, [pc, #288]	@ (9000227c <BSP_LCD_InitEx+0x194>)
9000215a:	68fb      	ldr	r3, [r7, #12]
9000215c:	015b      	lsls	r3, r3, #5
9000215e:	4413      	add	r3, r2
90002160:	683a      	ldr	r2, [r7, #0]
90002162:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90002164:	4a45      	ldr	r2, [pc, #276]	@ (9000227c <BSP_LCD_InitEx+0x194>)
90002166:	68fb      	ldr	r3, [r7, #12]
90002168:	015b      	lsls	r3, r3, #5
9000216a:	4413      	add	r3, r2
9000216c:	3304      	adds	r3, #4
9000216e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002172:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90002174:	4b42      	ldr	r3, [pc, #264]	@ (90002280 <BSP_LCD_InitEx+0x198>)
90002176:	4a43      	ldr	r2, [pc, #268]	@ (90002284 <BSP_LCD_InitEx+0x19c>)
90002178:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
9000217a:	4b43      	ldr	r3, [pc, #268]	@ (90002288 <BSP_LCD_InitEx+0x1a0>)
9000217c:	4a43      	ldr	r2, [pc, #268]	@ (9000228c <BSP_LCD_InitEx+0x1a4>)
9000217e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90002180:	483f      	ldr	r0, [pc, #252]	@ (90002280 <BSP_LCD_InitEx+0x198>)
90002182:	f000 fcf9 	bl	90002b78 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90002186:	4840      	ldr	r0, [pc, #256]	@ (90002288 <BSP_LCD_InitEx+0x1a0>)
90002188:	f000 fdc2 	bl	90002d10 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
9000218c:	4b40      	ldr	r3, [pc, #256]	@ (90002290 <BSP_LCD_InitEx+0x1a8>)
9000218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90002190:	4b40      	ldr	r3, [pc, #256]	@ (90002294 <BSP_LCD_InitEx+0x1ac>)
90002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90002194:	2370      	movs	r3, #112	@ 0x70
90002196:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90002198:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
9000219c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
900021a0:	4611      	mov	r1, r2
900021a2:	4618      	mov	r0, r3
900021a4:	f7ff fa16 	bl	900015d4 <FT5336_RegisterBusIO>
900021a8:	4603      	mov	r3, r0
900021aa:	2b00      	cmp	r3, #0
900021ac:	da03      	bge.n	900021b6 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
900021ae:	f06f 0304 	mvn.w	r3, #4
900021b2:	677b      	str	r3, [r7, #116]	@ 0x74
900021b4:	e02b      	b.n	9000220e <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
900021b6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
900021ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
900021be:	4611      	mov	r1, r2
900021c0:	4618      	mov	r0, r3
900021c2:	f7ff fa49 	bl	90001658 <FT5336_ReadID>
900021c6:	4603      	mov	r3, r0
900021c8:	2b00      	cmp	r3, #0
900021ca:	da03      	bge.n	900021d4 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
900021cc:	f06f 0304 	mvn.w	r3, #4
900021d0:	677b      	str	r3, [r7, #116]	@ 0x74
900021d2:	e01c      	b.n	9000220e <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
900021d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
900021d6:	2b51      	cmp	r3, #81	@ 0x51
900021d8:	d003      	beq.n	900021e2 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
900021da:	f06f 0306 	mvn.w	r3, #6
900021de:	677b      	str	r3, [r7, #116]	@ 0x74
900021e0:	e015      	b.n	9000220e <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
900021e2:	4827      	ldr	r0, [pc, #156]	@ (90002280 <BSP_LCD_InitEx+0x198>)
900021e4:	f7fe fea6 	bl	90000f34 <MX_LTDC_ClockConfig>
900021e8:	4603      	mov	r3, r0
900021ea:	2b00      	cmp	r3, #0
900021ec:	d003      	beq.n	900021f6 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900021ee:	f06f 0303 	mvn.w	r3, #3
900021f2:	677b      	str	r3, [r7, #116]	@ 0x74
900021f4:	e00b      	b.n	9000220e <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
900021f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
900021fa:	6839      	ldr	r1, [r7, #0]
900021fc:	4820      	ldr	r0, [pc, #128]	@ (90002280 <BSP_LCD_InitEx+0x198>)
900021fe:	f000 f84d 	bl	9000229c <MX_LTDC_Init>
90002202:	4603      	mov	r3, r0
90002204:	2b00      	cmp	r3, #0
90002206:	d002      	beq.n	9000220e <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90002208:	f06f 0303 	mvn.w	r3, #3
9000220c:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
9000220e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90002210:	2b00      	cmp	r3, #0
90002212:	d12d      	bne.n	90002270 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90002214:	2000      	movs	r0, #0
90002216:	f000 fe0d 	bl	90002e34 <BSP_SDRAM_Init>
9000221a:	4603      	mov	r3, r0
9000221c:	2b00      	cmp	r3, #0
9000221e:	d002      	beq.n	90002226 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90002220:	f06f 0303 	mvn.w	r3, #3
90002224:	e025      	b.n	90002272 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90002226:	2300      	movs	r3, #0
90002228:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
9000222a:	683b      	ldr	r3, [r7, #0]
9000222c:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
9000222e:	2300      	movs	r3, #0
90002230:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90002232:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90002236:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90002238:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
9000223a:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
9000223c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90002240:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90002242:	f107 0314 	add.w	r3, r7, #20
90002246:	461a      	mov	r2, r3
90002248:	2100      	movs	r1, #0
9000224a:	480d      	ldr	r0, [pc, #52]	@ (90002280 <BSP_LCD_InitEx+0x198>)
9000224c:	f000 f872 	bl	90002334 <MX_LTDC_ConfigLayer>
90002250:	4603      	mov	r3, r0
90002252:	2b00      	cmp	r3, #0
90002254:	d002      	beq.n	9000225c <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90002256:	f06f 0303 	mvn.w	r3, #3
9000225a:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
9000225c:	480e      	ldr	r0, [pc, #56]	@ (90002298 <BSP_LCD_InitEx+0x1b0>)
9000225e:	f000 fdbf 	bl	90002de0 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90002262:	4a06      	ldr	r2, [pc, #24]	@ (9000227c <BSP_LCD_InitEx+0x194>)
90002264:	68fb      	ldr	r3, [r7, #12]
90002266:	015b      	lsls	r3, r3, #5
90002268:	4413      	add	r3, r2
9000226a:	3318      	adds	r3, #24
9000226c:	2201      	movs	r2, #1
9000226e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90002270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90002272:	4618      	mov	r0, r3
90002274:	3778      	adds	r7, #120	@ 0x78
90002276:	46bd      	mov	sp, r7
90002278:	bd80      	pop	{r7, pc}
9000227a:	bf00      	nop
9000227c:	200011fc 	.word	0x200011fc
90002280:	20001154 	.word	0x20001154
90002284:	50001000 	.word	0x50001000
90002288:	200010ec 	.word	0x200010ec
9000228c:	52001000 	.word	0x52001000
90002290:	9000195d 	.word	0x9000195d
90002294:	90001a55 	.word	0x90001a55
90002298:	200010a0 	.word	0x200010a0

9000229c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
9000229c:	b580      	push	{r7, lr}
9000229e:	b084      	sub	sp, #16
900022a0:	af00      	add	r7, sp, #0
900022a2:	60f8      	str	r0, [r7, #12]
900022a4:	60b9      	str	r1, [r7, #8]
900022a6:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
900022a8:	68fb      	ldr	r3, [r7, #12]
900022aa:	4a21      	ldr	r2, [pc, #132]	@ (90002330 <MX_LTDC_Init+0x94>)
900022ac:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
900022ae:	68fb      	ldr	r3, [r7, #12]
900022b0:	2200      	movs	r2, #0
900022b2:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
900022b4:	68fb      	ldr	r3, [r7, #12]
900022b6:	2200      	movs	r2, #0
900022b8:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
900022ba:	68fb      	ldr	r3, [r7, #12]
900022bc:	2200      	movs	r2, #0
900022be:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
900022c0:	68fb      	ldr	r3, [r7, #12]
900022c2:	2200      	movs	r2, #0
900022c4:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
900022c6:	68fb      	ldr	r3, [r7, #12]
900022c8:	2228      	movs	r2, #40	@ 0x28
900022ca:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
900022cc:	68fb      	ldr	r3, [r7, #12]
900022ce:	222a      	movs	r2, #42	@ 0x2a
900022d0:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
900022d2:	68bb      	ldr	r3, [r7, #8]
900022d4:	f103 0235 	add.w	r2, r3, #53	@ 0x35
900022d8:	68fb      	ldr	r3, [r7, #12]
900022da:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
900022dc:	68bb      	ldr	r3, [r7, #8]
900022de:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
900022e2:	68fb      	ldr	r3, [r7, #12]
900022e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
900022e6:	68fb      	ldr	r3, [r7, #12]
900022e8:	2209      	movs	r2, #9
900022ea:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
900022ec:	68fb      	ldr	r3, [r7, #12]
900022ee:	220b      	movs	r2, #11
900022f0:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
900022f2:	687b      	ldr	r3, [r7, #4]
900022f4:	f103 020b 	add.w	r2, r3, #11
900022f8:	68fb      	ldr	r3, [r7, #12]
900022fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
900022fc:	687b      	ldr	r3, [r7, #4]
900022fe:	f103 020d 	add.w	r2, r3, #13
90002302:	68fb      	ldr	r3, [r7, #12]
90002304:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90002306:	68fb      	ldr	r3, [r7, #12]
90002308:	22ff      	movs	r2, #255	@ 0xff
9000230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
9000230e:	68fb      	ldr	r3, [r7, #12]
90002310:	22ff      	movs	r2, #255	@ 0xff
90002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90002316:	68fb      	ldr	r3, [r7, #12]
90002318:	22ff      	movs	r2, #255	@ 0xff
9000231a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
9000231e:	68f8      	ldr	r0, [r7, #12]
90002320:	f004 f947 	bl	900065b2 <HAL_LTDC_Init>
90002324:	4603      	mov	r3, r0
}
90002326:	4618      	mov	r0, r3
90002328:	3710      	adds	r7, #16
9000232a:	46bd      	mov	sp, r7
9000232c:	bd80      	pop	{r7, pc}
9000232e:	bf00      	nop
90002330:	50001000 	.word	0x50001000

90002334 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90002334:	b580      	push	{r7, lr}
90002336:	b092      	sub	sp, #72	@ 0x48
90002338:	af00      	add	r7, sp, #0
9000233a:	60f8      	str	r0, [r7, #12]
9000233c:	60b9      	str	r1, [r7, #8]
9000233e:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90002340:	687b      	ldr	r3, [r7, #4]
90002342:	681b      	ldr	r3, [r3, #0]
90002344:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90002346:	687b      	ldr	r3, [r7, #4]
90002348:	685b      	ldr	r3, [r3, #4]
9000234a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
9000234c:	687b      	ldr	r3, [r7, #4]
9000234e:	689b      	ldr	r3, [r3, #8]
90002350:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90002352:	687b      	ldr	r3, [r7, #4]
90002354:	68db      	ldr	r3, [r3, #12]
90002356:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90002358:	687b      	ldr	r3, [r7, #4]
9000235a:	691b      	ldr	r3, [r3, #16]
9000235c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
9000235e:	23ff      	movs	r3, #255	@ 0xff
90002360:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90002362:	2300      	movs	r3, #0
90002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90002366:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
9000236a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000236c:	2307      	movs	r3, #7
9000236e:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90002370:	687b      	ldr	r3, [r7, #4]
90002372:	695b      	ldr	r3, [r3, #20]
90002374:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90002376:	687b      	ldr	r3, [r7, #4]
90002378:	685a      	ldr	r2, [r3, #4]
9000237a:	687b      	ldr	r3, [r7, #4]
9000237c:	681b      	ldr	r3, [r3, #0]
9000237e:	1ad3      	subs	r3, r2, r3
90002380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90002382:	687b      	ldr	r3, [r7, #4]
90002384:	68da      	ldr	r2, [r3, #12]
90002386:	687b      	ldr	r3, [r7, #4]
90002388:	689b      	ldr	r3, [r3, #8]
9000238a:	1ad3      	subs	r3, r2, r3
9000238c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
9000238e:	2300      	movs	r3, #0
90002390:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90002394:	2300      	movs	r3, #0
90002396:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
9000239a:	2300      	movs	r3, #0
9000239c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
900023a0:	f107 0314 	add.w	r3, r7, #20
900023a4:	68ba      	ldr	r2, [r7, #8]
900023a6:	4619      	mov	r1, r3
900023a8:	68f8      	ldr	r0, [r7, #12]
900023aa:	f004 f9a9 	bl	90006700 <HAL_LTDC_ConfigLayer>
900023ae:	4603      	mov	r3, r0
}
900023b0:	4618      	mov	r0, r3
900023b2:	3748      	adds	r7, #72	@ 0x48
900023b4:	46bd      	mov	sp, r7
900023b6:	bd80      	pop	{r7, pc}

900023b8 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
900023b8:	b480      	push	{r7}
900023ba:	b085      	sub	sp, #20
900023bc:	af00      	add	r7, sp, #0
900023be:	6078      	str	r0, [r7, #4]
900023c0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900023c2:	2300      	movs	r3, #0
900023c4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900023c6:	687b      	ldr	r3, [r7, #4]
900023c8:	2b00      	cmp	r3, #0
900023ca:	d003      	beq.n	900023d4 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900023cc:	f06f 0301 	mvn.w	r3, #1
900023d0:	60fb      	str	r3, [r7, #12]
900023d2:	e007      	b.n	900023e4 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
900023d4:	4a07      	ldr	r2, [pc, #28]	@ (900023f4 <BSP_LCD_GetPixelFormat+0x3c>)
900023d6:	687b      	ldr	r3, [r7, #4]
900023d8:	015b      	lsls	r3, r3, #5
900023da:	4413      	add	r3, r2
900023dc:	330c      	adds	r3, #12
900023de:	681a      	ldr	r2, [r3, #0]
900023e0:	683b      	ldr	r3, [r7, #0]
900023e2:	601a      	str	r2, [r3, #0]
  }

  return ret;
900023e4:	68fb      	ldr	r3, [r7, #12]
}
900023e6:	4618      	mov	r0, r3
900023e8:	3714      	adds	r7, #20
900023ea:	46bd      	mov	sp, r7
900023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900023f0:	4770      	bx	lr
900023f2:	bf00      	nop
900023f4:	200011fc 	.word	0x200011fc

900023f8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
900023f8:	b480      	push	{r7}
900023fa:	b085      	sub	sp, #20
900023fc:	af00      	add	r7, sp, #0
900023fe:	6078      	str	r0, [r7, #4]
90002400:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002402:	2300      	movs	r3, #0
90002404:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002406:	687b      	ldr	r3, [r7, #4]
90002408:	2b00      	cmp	r3, #0
9000240a:	d003      	beq.n	90002414 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000240c:	f06f 0301 	mvn.w	r3, #1
90002410:	60fb      	str	r3, [r7, #12]
90002412:	e006      	b.n	90002422 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002414:	4a06      	ldr	r2, [pc, #24]	@ (90002430 <BSP_LCD_SetActiveLayer+0x38>)
90002416:	687b      	ldr	r3, [r7, #4]
90002418:	015b      	lsls	r3, r3, #5
9000241a:	4413      	add	r3, r2
9000241c:	3308      	adds	r3, #8
9000241e:	683a      	ldr	r2, [r7, #0]
90002420:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002422:	68fb      	ldr	r3, [r7, #12]
}
90002424:	4618      	mov	r0, r3
90002426:	3714      	adds	r7, #20
90002428:	46bd      	mov	sp, r7
9000242a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000242e:	4770      	bx	lr
90002430:	200011fc 	.word	0x200011fc

90002434 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002434:	b480      	push	{r7}
90002436:	b085      	sub	sp, #20
90002438:	af00      	add	r7, sp, #0
9000243a:	6078      	str	r0, [r7, #4]
9000243c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000243e:	2300      	movs	r3, #0
90002440:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002442:	687b      	ldr	r3, [r7, #4]
90002444:	2b00      	cmp	r3, #0
90002446:	d003      	beq.n	90002450 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002448:	f06f 0301 	mvn.w	r3, #1
9000244c:	60fb      	str	r3, [r7, #12]
9000244e:	e006      	b.n	9000245e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90002450:	4a06      	ldr	r2, [pc, #24]	@ (9000246c <BSP_LCD_GetXSize+0x38>)
90002452:	687b      	ldr	r3, [r7, #4]
90002454:	015b      	lsls	r3, r3, #5
90002456:	4413      	add	r3, r2
90002458:	681a      	ldr	r2, [r3, #0]
9000245a:	683b      	ldr	r3, [r7, #0]
9000245c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000245e:	68fb      	ldr	r3, [r7, #12]
}
90002460:	4618      	mov	r0, r3
90002462:	3714      	adds	r7, #20
90002464:	46bd      	mov	sp, r7
90002466:	f85d 7b04 	ldr.w	r7, [sp], #4
9000246a:	4770      	bx	lr
9000246c:	200011fc 	.word	0x200011fc

90002470 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90002470:	b480      	push	{r7}
90002472:	b085      	sub	sp, #20
90002474:	af00      	add	r7, sp, #0
90002476:	6078      	str	r0, [r7, #4]
90002478:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000247a:	2300      	movs	r3, #0
9000247c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000247e:	687b      	ldr	r3, [r7, #4]
90002480:	2b00      	cmp	r3, #0
90002482:	d003      	beq.n	9000248c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002484:	f06f 0301 	mvn.w	r3, #1
90002488:	60fb      	str	r3, [r7, #12]
9000248a:	e007      	b.n	9000249c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
9000248c:	4a07      	ldr	r2, [pc, #28]	@ (900024ac <BSP_LCD_GetYSize+0x3c>)
9000248e:	687b      	ldr	r3, [r7, #4]
90002490:	015b      	lsls	r3, r3, #5
90002492:	4413      	add	r3, r2
90002494:	3304      	adds	r3, #4
90002496:	681a      	ldr	r2, [r3, #0]
90002498:	683b      	ldr	r3, [r7, #0]
9000249a:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000249c:	68fb      	ldr	r3, [r7, #12]
}
9000249e:	4618      	mov	r0, r3
900024a0:	3714      	adds	r7, #20
900024a2:	46bd      	mov	sp, r7
900024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900024a8:	4770      	bx	lr
900024aa:	bf00      	nop
900024ac:	200011fc 	.word	0x200011fc

900024b0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900024b0:	b580      	push	{r7, lr}
900024b2:	b08e      	sub	sp, #56	@ 0x38
900024b4:	af02      	add	r7, sp, #8
900024b6:	60f8      	str	r0, [r7, #12]
900024b8:	60b9      	str	r1, [r7, #8]
900024ba:	607a      	str	r2, [r7, #4]
900024bc:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900024be:	2300      	movs	r3, #0
900024c0:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
900024c2:	683b      	ldr	r3, [r7, #0]
900024c4:	330a      	adds	r3, #10
900024c6:	781b      	ldrb	r3, [r3, #0]
900024c8:	461a      	mov	r2, r3
900024ca:	683b      	ldr	r3, [r7, #0]
900024cc:	330b      	adds	r3, #11
900024ce:	781b      	ldrb	r3, [r3, #0]
900024d0:	021b      	lsls	r3, r3, #8
900024d2:	441a      	add	r2, r3
900024d4:	683b      	ldr	r3, [r7, #0]
900024d6:	330c      	adds	r3, #12
900024d8:	781b      	ldrb	r3, [r3, #0]
900024da:	041b      	lsls	r3, r3, #16
900024dc:	441a      	add	r2, r3
900024de:	683b      	ldr	r3, [r7, #0]
900024e0:	330d      	adds	r3, #13
900024e2:	781b      	ldrb	r3, [r3, #0]
900024e4:	061b      	lsls	r3, r3, #24
900024e6:	4413      	add	r3, r2
900024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
900024ea:	683b      	ldr	r3, [r7, #0]
900024ec:	3312      	adds	r3, #18
900024ee:	781b      	ldrb	r3, [r3, #0]
900024f0:	461a      	mov	r2, r3
900024f2:	683b      	ldr	r3, [r7, #0]
900024f4:	3313      	adds	r3, #19
900024f6:	781b      	ldrb	r3, [r3, #0]
900024f8:	021b      	lsls	r3, r3, #8
900024fa:	441a      	add	r2, r3
900024fc:	683b      	ldr	r3, [r7, #0]
900024fe:	3314      	adds	r3, #20
90002500:	781b      	ldrb	r3, [r3, #0]
90002502:	041b      	lsls	r3, r3, #16
90002504:	441a      	add	r2, r3
90002506:	683b      	ldr	r3, [r7, #0]
90002508:	3315      	adds	r3, #21
9000250a:	781b      	ldrb	r3, [r3, #0]
9000250c:	061b      	lsls	r3, r3, #24
9000250e:	4413      	add	r3, r2
90002510:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
90002512:	683b      	ldr	r3, [r7, #0]
90002514:	3316      	adds	r3, #22
90002516:	781b      	ldrb	r3, [r3, #0]
90002518:	461a      	mov	r2, r3
9000251a:	683b      	ldr	r3, [r7, #0]
9000251c:	3317      	adds	r3, #23
9000251e:	781b      	ldrb	r3, [r3, #0]
90002520:	021b      	lsls	r3, r3, #8
90002522:	441a      	add	r2, r3
90002524:	683b      	ldr	r3, [r7, #0]
90002526:	3318      	adds	r3, #24
90002528:	781b      	ldrb	r3, [r3, #0]
9000252a:	041b      	lsls	r3, r3, #16
9000252c:	441a      	add	r2, r3
9000252e:	683b      	ldr	r3, [r7, #0]
90002530:	3319      	adds	r3, #25
90002532:	781b      	ldrb	r3, [r3, #0]
90002534:	061b      	lsls	r3, r3, #24
90002536:	4413      	add	r3, r2
90002538:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
9000253a:	683b      	ldr	r3, [r7, #0]
9000253c:	331c      	adds	r3, #28
9000253e:	781b      	ldrb	r3, [r3, #0]
90002540:	461a      	mov	r2, r3
90002542:	683b      	ldr	r3, [r7, #0]
90002544:	331d      	adds	r3, #29
90002546:	781b      	ldrb	r3, [r3, #0]
90002548:	021b      	lsls	r3, r3, #8
9000254a:	4413      	add	r3, r2
9000254c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000254e:	4a37      	ldr	r2, [pc, #220]	@ (9000262c <BSP_LCD_DrawBitmap+0x17c>)
90002550:	68fb      	ldr	r3, [r7, #12]
90002552:	015b      	lsls	r3, r3, #5
90002554:	4413      	add	r3, r2
90002556:	3308      	adds	r3, #8
90002558:	681b      	ldr	r3, [r3, #0]
9000255a:	4a35      	ldr	r2, [pc, #212]	@ (90002630 <BSP_LCD_DrawBitmap+0x180>)
9000255c:	2134      	movs	r1, #52	@ 0x34
9000255e:	fb01 f303 	mul.w	r3, r1, r3
90002562:	4413      	add	r3, r2
90002564:	335c      	adds	r3, #92	@ 0x5c
90002566:	681a      	ldr	r2, [r3, #0]
90002568:	4930      	ldr	r1, [pc, #192]	@ (9000262c <BSP_LCD_DrawBitmap+0x17c>)
9000256a:	68fb      	ldr	r3, [r7, #12]
9000256c:	015b      	lsls	r3, r3, #5
9000256e:	440b      	add	r3, r1
90002570:	681b      	ldr	r3, [r3, #0]
90002572:	6879      	ldr	r1, [r7, #4]
90002574:	fb03 f101 	mul.w	r1, r3, r1
90002578:	68bb      	ldr	r3, [r7, #8]
9000257a:	440b      	add	r3, r1
9000257c:	482b      	ldr	r0, [pc, #172]	@ (9000262c <BSP_LCD_DrawBitmap+0x17c>)
9000257e:	68f9      	ldr	r1, [r7, #12]
90002580:	0149      	lsls	r1, r1, #5
90002582:	4401      	add	r1, r0
90002584:	3110      	adds	r1, #16
90002586:	6809      	ldr	r1, [r1, #0]
90002588:	fb01 f303 	mul.w	r3, r1, r3
9000258c:	4413      	add	r3, r2
9000258e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90002590:	693b      	ldr	r3, [r7, #16]
90002592:	3b20      	subs	r3, #32
90002594:	2b07      	cmp	r3, #7
90002596:	d802      	bhi.n	9000259e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002598:	2300      	movs	r3, #0
9000259a:	627b      	str	r3, [r7, #36]	@ 0x24
9000259c:	e008      	b.n	900025b0 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
9000259e:	693b      	ldr	r3, [r7, #16]
900025a0:	3b10      	subs	r3, #16
900025a2:	2b07      	cmp	r3, #7
900025a4:	d802      	bhi.n	900025ac <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900025a6:	2302      	movs	r3, #2
900025a8:	627b      	str	r3, [r7, #36]	@ 0x24
900025aa:	e001      	b.n	900025b0 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
900025ac:	2301      	movs	r3, #1
900025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900025b0:	697b      	ldr	r3, [r7, #20]
900025b2:	3b01      	subs	r3, #1
900025b4:	69ba      	ldr	r2, [r7, #24]
900025b6:	fb02 f303 	mul.w	r3, r2, r3
900025ba:	693a      	ldr	r2, [r7, #16]
900025bc:	08d2      	lsrs	r2, r2, #3
900025be:	fb03 f202 	mul.w	r2, r3, r2
900025c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900025c4:	4413      	add	r3, r2
900025c6:	683a      	ldr	r2, [r7, #0]
900025c8:	4413      	add	r3, r2
900025ca:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
900025cc:	2300      	movs	r3, #0
900025ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
900025d0:	e023      	b.n	9000261a <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
900025d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900025d6:	9300      	str	r3, [sp, #0]
900025d8:	69bb      	ldr	r3, [r7, #24]
900025da:	6a39      	ldr	r1, [r7, #32]
900025dc:	68f8      	ldr	r0, [r7, #12]
900025de:	f000 fa77 	bl	90002ad0 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
900025e2:	4a12      	ldr	r2, [pc, #72]	@ (9000262c <BSP_LCD_DrawBitmap+0x17c>)
900025e4:	68fb      	ldr	r3, [r7, #12]
900025e6:	015b      	lsls	r3, r3, #5
900025e8:	4413      	add	r3, r2
900025ea:	681b      	ldr	r3, [r3, #0]
900025ec:	490f      	ldr	r1, [pc, #60]	@ (9000262c <BSP_LCD_DrawBitmap+0x17c>)
900025ee:	68fa      	ldr	r2, [r7, #12]
900025f0:	0152      	lsls	r2, r2, #5
900025f2:	440a      	add	r2, r1
900025f4:	3210      	adds	r2, #16
900025f6:	6812      	ldr	r2, [r2, #0]
900025f8:	fb02 f303 	mul.w	r3, r2, r3
900025fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900025fe:	4413      	add	r3, r2
90002600:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
90002602:	693b      	ldr	r3, [r7, #16]
90002604:	08db      	lsrs	r3, r3, #3
90002606:	69ba      	ldr	r2, [r7, #24]
90002608:	fb02 f303 	mul.w	r3, r2, r3
9000260c:	425b      	negs	r3, r3
9000260e:	6a3a      	ldr	r2, [r7, #32]
90002610:	4413      	add	r3, r2
90002612:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002616:	3301      	adds	r3, #1
90002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
9000261a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000261c:	697b      	ldr	r3, [r7, #20]
9000261e:	429a      	cmp	r2, r3
90002620:	d3d7      	bcc.n	900025d2 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
90002622:	69fb      	ldr	r3, [r7, #28]
}
90002624:	4618      	mov	r0, r3
90002626:	3730      	adds	r7, #48	@ 0x30
90002628:	46bd      	mov	sp, r7
9000262a:	bd80      	pop	{r7, pc}
9000262c:	200011fc 	.word	0x200011fc
90002630:	20001154 	.word	0x20001154

90002634 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002634:	b580      	push	{r7, lr}
90002636:	b088      	sub	sp, #32
90002638:	af00      	add	r7, sp, #0
9000263a:	60f8      	str	r0, [r7, #12]
9000263c:	60b9      	str	r1, [r7, #8]
9000263e:	607a      	str	r2, [r7, #4]
90002640:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
90002642:	683b      	ldr	r3, [r7, #0]
90002644:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002646:	2300      	movs	r3, #0
90002648:	61fb      	str	r3, [r7, #28]
9000264a:	e032      	b.n	900026b2 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
9000264c:	2300      	movs	r3, #0
9000264e:	617b      	str	r3, [r7, #20]
90002650:	e028      	b.n	900026a4 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
90002652:	69bb      	ldr	r3, [r7, #24]
90002654:	781b      	ldrb	r3, [r3, #0]
90002656:	461a      	mov	r2, r3
90002658:	69bb      	ldr	r3, [r7, #24]
9000265a:	3301      	adds	r3, #1
9000265c:	781b      	ldrb	r3, [r3, #0]
9000265e:	021b      	lsls	r3, r3, #8
90002660:	431a      	orrs	r2, r3
90002662:	69bb      	ldr	r3, [r7, #24]
90002664:	3302      	adds	r3, #2
90002666:	781b      	ldrb	r3, [r3, #0]
90002668:	041b      	lsls	r3, r3, #16
9000266a:	431a      	orrs	r2, r3
9000266c:	69bb      	ldr	r3, [r7, #24]
9000266e:	3303      	adds	r3, #3
90002670:	781b      	ldrb	r3, [r3, #0]
90002672:	061b      	lsls	r3, r3, #24
90002674:	4313      	orrs	r3, r2
90002676:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002678:	68ba      	ldr	r2, [r7, #8]
9000267a:	697b      	ldr	r3, [r7, #20]
9000267c:	18d1      	adds	r1, r2, r3
9000267e:	687a      	ldr	r2, [r7, #4]
90002680:	69fb      	ldr	r3, [r7, #28]
90002682:	441a      	add	r2, r3
90002684:	693b      	ldr	r3, [r7, #16]
90002686:	68f8      	ldr	r0, [r7, #12]
90002688:	f000 f95e 	bl	90002948 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
9000268c:	4a0d      	ldr	r2, [pc, #52]	@ (900026c4 <BSP_LCD_FillRGBRect+0x90>)
9000268e:	68fb      	ldr	r3, [r7, #12]
90002690:	015b      	lsls	r3, r3, #5
90002692:	4413      	add	r3, r2
90002694:	3310      	adds	r3, #16
90002696:	681b      	ldr	r3, [r3, #0]
90002698:	69ba      	ldr	r2, [r7, #24]
9000269a:	4413      	add	r3, r2
9000269c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
9000269e:	697b      	ldr	r3, [r7, #20]
900026a0:	3301      	adds	r3, #1
900026a2:	617b      	str	r3, [r7, #20]
900026a4:	697a      	ldr	r2, [r7, #20]
900026a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900026a8:	429a      	cmp	r2, r3
900026aa:	d3d2      	bcc.n	90002652 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
900026ac:	69fb      	ldr	r3, [r7, #28]
900026ae:	3301      	adds	r3, #1
900026b0:	61fb      	str	r3, [r7, #28]
900026b2:	69fa      	ldr	r2, [r7, #28]
900026b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900026b6:	429a      	cmp	r2, r3
900026b8:	d3c8      	bcc.n	9000264c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
900026ba:	2300      	movs	r3, #0
}
900026bc:	4618      	mov	r0, r3
900026be:	3720      	adds	r7, #32
900026c0:	46bd      	mov	sp, r7
900026c2:	bd80      	pop	{r7, pc}
900026c4:	200011fc 	.word	0x200011fc

900026c8 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900026c8:	b580      	push	{r7, lr}
900026ca:	b088      	sub	sp, #32
900026cc:	af02      	add	r7, sp, #8
900026ce:	60f8      	str	r0, [r7, #12]
900026d0:	60b9      	str	r1, [r7, #8]
900026d2:	607a      	str	r2, [r7, #4]
900026d4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900026d6:	4a21      	ldr	r2, [pc, #132]	@ (9000275c <BSP_LCD_DrawHLine+0x94>)
900026d8:	68fb      	ldr	r3, [r7, #12]
900026da:	015b      	lsls	r3, r3, #5
900026dc:	4413      	add	r3, r2
900026de:	3308      	adds	r3, #8
900026e0:	681b      	ldr	r3, [r3, #0]
900026e2:	4a1f      	ldr	r2, [pc, #124]	@ (90002760 <BSP_LCD_DrawHLine+0x98>)
900026e4:	2134      	movs	r1, #52	@ 0x34
900026e6:	fb01 f303 	mul.w	r3, r1, r3
900026ea:	4413      	add	r3, r2
900026ec:	335c      	adds	r3, #92	@ 0x5c
900026ee:	681a      	ldr	r2, [r3, #0]
900026f0:	491a      	ldr	r1, [pc, #104]	@ (9000275c <BSP_LCD_DrawHLine+0x94>)
900026f2:	68fb      	ldr	r3, [r7, #12]
900026f4:	015b      	lsls	r3, r3, #5
900026f6:	440b      	add	r3, r1
900026f8:	3310      	adds	r3, #16
900026fa:	681b      	ldr	r3, [r3, #0]
900026fc:	4817      	ldr	r0, [pc, #92]	@ (9000275c <BSP_LCD_DrawHLine+0x94>)
900026fe:	68f9      	ldr	r1, [r7, #12]
90002700:	0149      	lsls	r1, r1, #5
90002702:	4401      	add	r1, r0
90002704:	6809      	ldr	r1, [r1, #0]
90002706:	6878      	ldr	r0, [r7, #4]
90002708:	fb01 f000 	mul.w	r0, r1, r0
9000270c:	68b9      	ldr	r1, [r7, #8]
9000270e:	4401      	add	r1, r0
90002710:	fb01 f303 	mul.w	r3, r1, r3
90002714:	4413      	add	r3, r2
90002716:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002718:	68ba      	ldr	r2, [r7, #8]
9000271a:	683b      	ldr	r3, [r7, #0]
9000271c:	441a      	add	r2, r3
9000271e:	490f      	ldr	r1, [pc, #60]	@ (9000275c <BSP_LCD_DrawHLine+0x94>)
90002720:	68fb      	ldr	r3, [r7, #12]
90002722:	015b      	lsls	r3, r3, #5
90002724:	440b      	add	r3, r1
90002726:	681b      	ldr	r3, [r3, #0]
90002728:	429a      	cmp	r2, r3
9000272a:	d907      	bls.n	9000273c <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
9000272c:	4a0b      	ldr	r2, [pc, #44]	@ (9000275c <BSP_LCD_DrawHLine+0x94>)
9000272e:	68fb      	ldr	r3, [r7, #12]
90002730:	015b      	lsls	r3, r3, #5
90002732:	4413      	add	r3, r2
90002734:	681a      	ldr	r2, [r3, #0]
90002736:	68bb      	ldr	r3, [r7, #8]
90002738:	1ad3      	subs	r3, r2, r3
9000273a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
9000273c:	6979      	ldr	r1, [r7, #20]
9000273e:	6a3b      	ldr	r3, [r7, #32]
90002740:	9301      	str	r3, [sp, #4]
90002742:	2300      	movs	r3, #0
90002744:	9300      	str	r3, [sp, #0]
90002746:	2301      	movs	r3, #1
90002748:	683a      	ldr	r2, [r7, #0]
9000274a:	68f8      	ldr	r0, [r7, #12]
9000274c:	f000 f956 	bl	900029fc <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002750:	2300      	movs	r3, #0
}
90002752:	4618      	mov	r0, r3
90002754:	3718      	adds	r7, #24
90002756:	46bd      	mov	sp, r7
90002758:	bd80      	pop	{r7, pc}
9000275a:	bf00      	nop
9000275c:	200011fc 	.word	0x200011fc
90002760:	20001154 	.word	0x20001154

90002764 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002764:	b580      	push	{r7, lr}
90002766:	b088      	sub	sp, #32
90002768:	af02      	add	r7, sp, #8
9000276a:	60f8      	str	r0, [r7, #12]
9000276c:	60b9      	str	r1, [r7, #8]
9000276e:	607a      	str	r2, [r7, #4]
90002770:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002772:	4a24      	ldr	r2, [pc, #144]	@ (90002804 <BSP_LCD_DrawVLine+0xa0>)
90002774:	68fb      	ldr	r3, [r7, #12]
90002776:	015b      	lsls	r3, r3, #5
90002778:	4413      	add	r3, r2
9000277a:	3308      	adds	r3, #8
9000277c:	681b      	ldr	r3, [r3, #0]
9000277e:	4a22      	ldr	r2, [pc, #136]	@ (90002808 <BSP_LCD_DrawVLine+0xa4>)
90002780:	2134      	movs	r1, #52	@ 0x34
90002782:	fb01 f303 	mul.w	r3, r1, r3
90002786:	4413      	add	r3, r2
90002788:	335c      	adds	r3, #92	@ 0x5c
9000278a:	681a      	ldr	r2, [r3, #0]
9000278c:	491d      	ldr	r1, [pc, #116]	@ (90002804 <BSP_LCD_DrawVLine+0xa0>)
9000278e:	68fb      	ldr	r3, [r7, #12]
90002790:	015b      	lsls	r3, r3, #5
90002792:	440b      	add	r3, r1
90002794:	3310      	adds	r3, #16
90002796:	681b      	ldr	r3, [r3, #0]
90002798:	481a      	ldr	r0, [pc, #104]	@ (90002804 <BSP_LCD_DrawVLine+0xa0>)
9000279a:	68f9      	ldr	r1, [r7, #12]
9000279c:	0149      	lsls	r1, r1, #5
9000279e:	4401      	add	r1, r0
900027a0:	6809      	ldr	r1, [r1, #0]
900027a2:	6878      	ldr	r0, [r7, #4]
900027a4:	fb01 f000 	mul.w	r0, r1, r0
900027a8:	68b9      	ldr	r1, [r7, #8]
900027aa:	4401      	add	r1, r0
900027ac:	fb01 f303 	mul.w	r3, r1, r3
900027b0:	4413      	add	r3, r2
900027b2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
900027b4:	687a      	ldr	r2, [r7, #4]
900027b6:	683b      	ldr	r3, [r7, #0]
900027b8:	441a      	add	r2, r3
900027ba:	4912      	ldr	r1, [pc, #72]	@ (90002804 <BSP_LCD_DrawVLine+0xa0>)
900027bc:	68fb      	ldr	r3, [r7, #12]
900027be:	015b      	lsls	r3, r3, #5
900027c0:	440b      	add	r3, r1
900027c2:	3304      	adds	r3, #4
900027c4:	681b      	ldr	r3, [r3, #0]
900027c6:	429a      	cmp	r2, r3
900027c8:	d908      	bls.n	900027dc <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
900027ca:	4a0e      	ldr	r2, [pc, #56]	@ (90002804 <BSP_LCD_DrawVLine+0xa0>)
900027cc:	68fb      	ldr	r3, [r7, #12]
900027ce:	015b      	lsls	r3, r3, #5
900027d0:	4413      	add	r3, r2
900027d2:	3304      	adds	r3, #4
900027d4:	681a      	ldr	r2, [r3, #0]
900027d6:	687b      	ldr	r3, [r7, #4]
900027d8:	1ad3      	subs	r3, r2, r3
900027da:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
900027dc:	6979      	ldr	r1, [r7, #20]
900027de:	4a09      	ldr	r2, [pc, #36]	@ (90002804 <BSP_LCD_DrawVLine+0xa0>)
900027e0:	68fb      	ldr	r3, [r7, #12]
900027e2:	015b      	lsls	r3, r3, #5
900027e4:	4413      	add	r3, r2
900027e6:	681b      	ldr	r3, [r3, #0]
900027e8:	3b01      	subs	r3, #1
900027ea:	6a3a      	ldr	r2, [r7, #32]
900027ec:	9201      	str	r2, [sp, #4]
900027ee:	9300      	str	r3, [sp, #0]
900027f0:	683b      	ldr	r3, [r7, #0]
900027f2:	2201      	movs	r2, #1
900027f4:	68f8      	ldr	r0, [r7, #12]
900027f6:	f000 f901 	bl	900029fc <LL_FillBuffer>

  return BSP_ERROR_NONE;
900027fa:	2300      	movs	r3, #0
}
900027fc:	4618      	mov	r0, r3
900027fe:	3718      	adds	r7, #24
90002800:	46bd      	mov	sp, r7
90002802:	bd80      	pop	{r7, pc}
90002804:	200011fc 	.word	0x200011fc
90002808:	20001154 	.word	0x20001154

9000280c <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000280c:	b580      	push	{r7, lr}
9000280e:	b088      	sub	sp, #32
90002810:	af02      	add	r7, sp, #8
90002812:	60f8      	str	r0, [r7, #12]
90002814:	60b9      	str	r1, [r7, #8]
90002816:	607a      	str	r2, [r7, #4]
90002818:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000281a:	4a1b      	ldr	r2, [pc, #108]	@ (90002888 <BSP_LCD_FillRect+0x7c>)
9000281c:	68fb      	ldr	r3, [r7, #12]
9000281e:	015b      	lsls	r3, r3, #5
90002820:	4413      	add	r3, r2
90002822:	3308      	adds	r3, #8
90002824:	681b      	ldr	r3, [r3, #0]
90002826:	4a19      	ldr	r2, [pc, #100]	@ (9000288c <BSP_LCD_FillRect+0x80>)
90002828:	2134      	movs	r1, #52	@ 0x34
9000282a:	fb01 f303 	mul.w	r3, r1, r3
9000282e:	4413      	add	r3, r2
90002830:	335c      	adds	r3, #92	@ 0x5c
90002832:	681a      	ldr	r2, [r3, #0]
90002834:	4914      	ldr	r1, [pc, #80]	@ (90002888 <BSP_LCD_FillRect+0x7c>)
90002836:	68fb      	ldr	r3, [r7, #12]
90002838:	015b      	lsls	r3, r3, #5
9000283a:	440b      	add	r3, r1
9000283c:	3310      	adds	r3, #16
9000283e:	681b      	ldr	r3, [r3, #0]
90002840:	4811      	ldr	r0, [pc, #68]	@ (90002888 <BSP_LCD_FillRect+0x7c>)
90002842:	68f9      	ldr	r1, [r7, #12]
90002844:	0149      	lsls	r1, r1, #5
90002846:	4401      	add	r1, r0
90002848:	6809      	ldr	r1, [r1, #0]
9000284a:	6878      	ldr	r0, [r7, #4]
9000284c:	fb01 f000 	mul.w	r0, r1, r0
90002850:	68b9      	ldr	r1, [r7, #8]
90002852:	4401      	add	r1, r0
90002854:	fb01 f303 	mul.w	r3, r1, r3
90002858:	4413      	add	r3, r2
9000285a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
9000285c:	6979      	ldr	r1, [r7, #20]
9000285e:	4a0a      	ldr	r2, [pc, #40]	@ (90002888 <BSP_LCD_FillRect+0x7c>)
90002860:	68fb      	ldr	r3, [r7, #12]
90002862:	015b      	lsls	r3, r3, #5
90002864:	4413      	add	r3, r2
90002866:	681a      	ldr	r2, [r3, #0]
90002868:	683b      	ldr	r3, [r7, #0]
9000286a:	1ad3      	subs	r3, r2, r3
9000286c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000286e:	9201      	str	r2, [sp, #4]
90002870:	9300      	str	r3, [sp, #0]
90002872:	6a3b      	ldr	r3, [r7, #32]
90002874:	683a      	ldr	r2, [r7, #0]
90002876:	68f8      	ldr	r0, [r7, #12]
90002878:	f000 f8c0 	bl	900029fc <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000287c:	2300      	movs	r3, #0
}
9000287e:	4618      	mov	r0, r3
90002880:	3718      	adds	r7, #24
90002882:	46bd      	mov	sp, r7
90002884:	bd80      	pop	{r7, pc}
90002886:	bf00      	nop
90002888:	200011fc 	.word	0x200011fc
9000288c:	20001154 	.word	0x20001154

90002890 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002890:	b480      	push	{r7}
90002892:	b085      	sub	sp, #20
90002894:	af00      	add	r7, sp, #0
90002896:	60f8      	str	r0, [r7, #12]
90002898:	60b9      	str	r1, [r7, #8]
9000289a:	607a      	str	r2, [r7, #4]
9000289c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000289e:	4a28      	ldr	r2, [pc, #160]	@ (90002940 <BSP_LCD_ReadPixel+0xb0>)
900028a0:	68fb      	ldr	r3, [r7, #12]
900028a2:	015b      	lsls	r3, r3, #5
900028a4:	4413      	add	r3, r2
900028a6:	3308      	adds	r3, #8
900028a8:	681b      	ldr	r3, [r3, #0]
900028aa:	4a26      	ldr	r2, [pc, #152]	@ (90002944 <BSP_LCD_ReadPixel+0xb4>)
900028ac:	2134      	movs	r1, #52	@ 0x34
900028ae:	fb01 f303 	mul.w	r3, r1, r3
900028b2:	4413      	add	r3, r2
900028b4:	3348      	adds	r3, #72	@ 0x48
900028b6:	681b      	ldr	r3, [r3, #0]
900028b8:	2b00      	cmp	r3, #0
900028ba:	d11c      	bne.n	900028f6 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900028bc:	4a20      	ldr	r2, [pc, #128]	@ (90002940 <BSP_LCD_ReadPixel+0xb0>)
900028be:	68fb      	ldr	r3, [r7, #12]
900028c0:	015b      	lsls	r3, r3, #5
900028c2:	4413      	add	r3, r2
900028c4:	3308      	adds	r3, #8
900028c6:	681b      	ldr	r3, [r3, #0]
900028c8:	4a1e      	ldr	r2, [pc, #120]	@ (90002944 <BSP_LCD_ReadPixel+0xb4>)
900028ca:	2134      	movs	r1, #52	@ 0x34
900028cc:	fb01 f303 	mul.w	r3, r1, r3
900028d0:	4413      	add	r3, r2
900028d2:	335c      	adds	r3, #92	@ 0x5c
900028d4:	681a      	ldr	r2, [r3, #0]
900028d6:	491a      	ldr	r1, [pc, #104]	@ (90002940 <BSP_LCD_ReadPixel+0xb0>)
900028d8:	68fb      	ldr	r3, [r7, #12]
900028da:	015b      	lsls	r3, r3, #5
900028dc:	440b      	add	r3, r1
900028de:	681b      	ldr	r3, [r3, #0]
900028e0:	6879      	ldr	r1, [r7, #4]
900028e2:	fb03 f101 	mul.w	r1, r3, r1
900028e6:	68bb      	ldr	r3, [r7, #8]
900028e8:	440b      	add	r3, r1
900028ea:	009b      	lsls	r3, r3, #2
900028ec:	4413      	add	r3, r2
900028ee:	681a      	ldr	r2, [r3, #0]
900028f0:	683b      	ldr	r3, [r7, #0]
900028f2:	601a      	str	r2, [r3, #0]
900028f4:	e01d      	b.n	90002932 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900028f6:	4a12      	ldr	r2, [pc, #72]	@ (90002940 <BSP_LCD_ReadPixel+0xb0>)
900028f8:	68fb      	ldr	r3, [r7, #12]
900028fa:	015b      	lsls	r3, r3, #5
900028fc:	4413      	add	r3, r2
900028fe:	3308      	adds	r3, #8
90002900:	681b      	ldr	r3, [r3, #0]
90002902:	4a10      	ldr	r2, [pc, #64]	@ (90002944 <BSP_LCD_ReadPixel+0xb4>)
90002904:	2134      	movs	r1, #52	@ 0x34
90002906:	fb01 f303 	mul.w	r3, r1, r3
9000290a:	4413      	add	r3, r2
9000290c:	335c      	adds	r3, #92	@ 0x5c
9000290e:	681a      	ldr	r2, [r3, #0]
90002910:	490b      	ldr	r1, [pc, #44]	@ (90002940 <BSP_LCD_ReadPixel+0xb0>)
90002912:	68fb      	ldr	r3, [r7, #12]
90002914:	015b      	lsls	r3, r3, #5
90002916:	440b      	add	r3, r1
90002918:	681b      	ldr	r3, [r3, #0]
9000291a:	6879      	ldr	r1, [r7, #4]
9000291c:	fb03 f101 	mul.w	r1, r3, r1
90002920:	68bb      	ldr	r3, [r7, #8]
90002922:	440b      	add	r3, r1
90002924:	005b      	lsls	r3, r3, #1
90002926:	4413      	add	r3, r2
90002928:	881b      	ldrh	r3, [r3, #0]
9000292a:	b29b      	uxth	r3, r3
9000292c:	461a      	mov	r2, r3
9000292e:	683b      	ldr	r3, [r7, #0]
90002930:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002932:	2300      	movs	r3, #0
}
90002934:	4618      	mov	r0, r3
90002936:	3714      	adds	r7, #20
90002938:	46bd      	mov	sp, r7
9000293a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000293e:	4770      	bx	lr
90002940:	200011fc 	.word	0x200011fc
90002944:	20001154 	.word	0x20001154

90002948 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002948:	b480      	push	{r7}
9000294a:	b085      	sub	sp, #20
9000294c:	af00      	add	r7, sp, #0
9000294e:	60f8      	str	r0, [r7, #12]
90002950:	60b9      	str	r1, [r7, #8]
90002952:	607a      	str	r2, [r7, #4]
90002954:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002956:	4a27      	ldr	r2, [pc, #156]	@ (900029f4 <BSP_LCD_WritePixel+0xac>)
90002958:	68fb      	ldr	r3, [r7, #12]
9000295a:	015b      	lsls	r3, r3, #5
9000295c:	4413      	add	r3, r2
9000295e:	3308      	adds	r3, #8
90002960:	681b      	ldr	r3, [r3, #0]
90002962:	4a25      	ldr	r2, [pc, #148]	@ (900029f8 <BSP_LCD_WritePixel+0xb0>)
90002964:	2134      	movs	r1, #52	@ 0x34
90002966:	fb01 f303 	mul.w	r3, r1, r3
9000296a:	4413      	add	r3, r2
9000296c:	3348      	adds	r3, #72	@ 0x48
9000296e:	681b      	ldr	r3, [r3, #0]
90002970:	2b00      	cmp	r3, #0
90002972:	d11c      	bne.n	900029ae <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002974:	4a1f      	ldr	r2, [pc, #124]	@ (900029f4 <BSP_LCD_WritePixel+0xac>)
90002976:	68fb      	ldr	r3, [r7, #12]
90002978:	015b      	lsls	r3, r3, #5
9000297a:	4413      	add	r3, r2
9000297c:	3308      	adds	r3, #8
9000297e:	681b      	ldr	r3, [r3, #0]
90002980:	4a1d      	ldr	r2, [pc, #116]	@ (900029f8 <BSP_LCD_WritePixel+0xb0>)
90002982:	2134      	movs	r1, #52	@ 0x34
90002984:	fb01 f303 	mul.w	r3, r1, r3
90002988:	4413      	add	r3, r2
9000298a:	335c      	adds	r3, #92	@ 0x5c
9000298c:	681a      	ldr	r2, [r3, #0]
9000298e:	4919      	ldr	r1, [pc, #100]	@ (900029f4 <BSP_LCD_WritePixel+0xac>)
90002990:	68fb      	ldr	r3, [r7, #12]
90002992:	015b      	lsls	r3, r3, #5
90002994:	440b      	add	r3, r1
90002996:	681b      	ldr	r3, [r3, #0]
90002998:	6879      	ldr	r1, [r7, #4]
9000299a:	fb03 f101 	mul.w	r1, r3, r1
9000299e:	68bb      	ldr	r3, [r7, #8]
900029a0:	440b      	add	r3, r1
900029a2:	009b      	lsls	r3, r3, #2
900029a4:	4413      	add	r3, r2
900029a6:	461a      	mov	r2, r3
900029a8:	683b      	ldr	r3, [r7, #0]
900029aa:	6013      	str	r3, [r2, #0]
900029ac:	e01b      	b.n	900029e6 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
900029ae:	4a11      	ldr	r2, [pc, #68]	@ (900029f4 <BSP_LCD_WritePixel+0xac>)
900029b0:	68fb      	ldr	r3, [r7, #12]
900029b2:	015b      	lsls	r3, r3, #5
900029b4:	4413      	add	r3, r2
900029b6:	3308      	adds	r3, #8
900029b8:	681b      	ldr	r3, [r3, #0]
900029ba:	4a0f      	ldr	r2, [pc, #60]	@ (900029f8 <BSP_LCD_WritePixel+0xb0>)
900029bc:	2134      	movs	r1, #52	@ 0x34
900029be:	fb01 f303 	mul.w	r3, r1, r3
900029c2:	4413      	add	r3, r2
900029c4:	335c      	adds	r3, #92	@ 0x5c
900029c6:	681a      	ldr	r2, [r3, #0]
900029c8:	490a      	ldr	r1, [pc, #40]	@ (900029f4 <BSP_LCD_WritePixel+0xac>)
900029ca:	68fb      	ldr	r3, [r7, #12]
900029cc:	015b      	lsls	r3, r3, #5
900029ce:	440b      	add	r3, r1
900029d0:	681b      	ldr	r3, [r3, #0]
900029d2:	6879      	ldr	r1, [r7, #4]
900029d4:	fb03 f101 	mul.w	r1, r3, r1
900029d8:	68bb      	ldr	r3, [r7, #8]
900029da:	440b      	add	r3, r1
900029dc:	005b      	lsls	r3, r3, #1
900029de:	4413      	add	r3, r2
900029e0:	683a      	ldr	r2, [r7, #0]
900029e2:	b292      	uxth	r2, r2
900029e4:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
900029e6:	2300      	movs	r3, #0
}
900029e8:	4618      	mov	r0, r3
900029ea:	3714      	adds	r7, #20
900029ec:	46bd      	mov	sp, r7
900029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900029f2:	4770      	bx	lr
900029f4:	200011fc 	.word	0x200011fc
900029f8:	20001154 	.word	0x20001154

900029fc <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
900029fc:	b580      	push	{r7, lr}
900029fe:	b088      	sub	sp, #32
90002a00:	af02      	add	r7, sp, #8
90002a02:	60f8      	str	r0, [r7, #12]
90002a04:	60b9      	str	r1, [r7, #8]
90002a06:	607a      	str	r2, [r7, #4]
90002a08:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002a0c:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002a0e:	4a2d      	ldr	r2, [pc, #180]	@ (90002ac4 <LL_FillBuffer+0xc8>)
90002a10:	68fb      	ldr	r3, [r7, #12]
90002a12:	015b      	lsls	r3, r3, #5
90002a14:	4413      	add	r3, r2
90002a16:	330c      	adds	r3, #12
90002a18:	681b      	ldr	r3, [r3, #0]
90002a1a:	2b02      	cmp	r3, #2
90002a1c:	d129      	bne.n	90002a72 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002a1e:	2302      	movs	r3, #2
90002a20:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002a24:	0adb      	lsrs	r3, r3, #11
90002a26:	f003 021f 	and.w	r2, r3, #31
90002a2a:	4613      	mov	r3, r2
90002a2c:	011b      	lsls	r3, r3, #4
90002a2e:	4413      	add	r3, r2
90002a30:	015a      	lsls	r2, r3, #5
90002a32:	1ad3      	subs	r3, r2, r3
90002a34:	3317      	adds	r3, #23
90002a36:	099b      	lsrs	r3, r3, #6
90002a38:	0419      	lsls	r1, r3, #16
90002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002a3c:	095b      	lsrs	r3, r3, #5
90002a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002a42:	4613      	mov	r3, r2
90002a44:	01db      	lsls	r3, r3, #7
90002a46:	4413      	add	r3, r2
90002a48:	005b      	lsls	r3, r3, #1
90002a4a:	4413      	add	r3, r2
90002a4c:	3321      	adds	r3, #33	@ 0x21
90002a4e:	099b      	lsrs	r3, r3, #6
90002a50:	021b      	lsls	r3, r3, #8
90002a52:	4319      	orrs	r1, r3
90002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002a56:	f003 021f 	and.w	r2, r3, #31
90002a5a:	4613      	mov	r3, r2
90002a5c:	011b      	lsls	r3, r3, #4
90002a5e:	4413      	add	r3, r2
90002a60:	015a      	lsls	r2, r3, #5
90002a62:	1ad3      	subs	r3, r2, r3
90002a64:	3317      	adds	r3, #23
90002a66:	099b      	lsrs	r3, r3, #6
90002a68:	430b      	orrs	r3, r1
90002a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
90002a6e:	613b      	str	r3, [r7, #16]
    break;
90002a70:	e002      	b.n	90002a78 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002a72:	2300      	movs	r3, #0
90002a74:	617b      	str	r3, [r7, #20]
    break;
90002a76:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002a78:	4b13      	ldr	r3, [pc, #76]	@ (90002ac8 <LL_FillBuffer+0xcc>)
90002a7a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
90002a7e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002a80:	4a11      	ldr	r2, [pc, #68]	@ (90002ac8 <LL_FillBuffer+0xcc>)
90002a82:	697b      	ldr	r3, [r7, #20]
90002a84:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002a86:	4a10      	ldr	r2, [pc, #64]	@ (90002ac8 <LL_FillBuffer+0xcc>)
90002a88:	6a3b      	ldr	r3, [r7, #32]
90002a8a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
90002a8c:	4b0e      	ldr	r3, [pc, #56]	@ (90002ac8 <LL_FillBuffer+0xcc>)
90002a8e:	4a0f      	ldr	r2, [pc, #60]	@ (90002acc <LL_FillBuffer+0xd0>)
90002a90:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002a92:	480d      	ldr	r0, [pc, #52]	@ (90002ac8 <LL_FillBuffer+0xcc>)
90002a94:	f000 fe50 	bl	90003738 <HAL_DMA2D_Init>
90002a98:	4603      	mov	r3, r0
90002a9a:	2b00      	cmp	r3, #0
90002a9c:	d10e      	bne.n	90002abc <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90002a9e:	68ba      	ldr	r2, [r7, #8]
90002aa0:	683b      	ldr	r3, [r7, #0]
90002aa2:	9300      	str	r3, [sp, #0]
90002aa4:	687b      	ldr	r3, [r7, #4]
90002aa6:	6939      	ldr	r1, [r7, #16]
90002aa8:	4807      	ldr	r0, [pc, #28]	@ (90002ac8 <LL_FillBuffer+0xcc>)
90002aaa:	f000 feb3 	bl	90003814 <HAL_DMA2D_Start>
90002aae:	4603      	mov	r3, r0
90002ab0:	2b00      	cmp	r3, #0
90002ab2:	d103      	bne.n	90002abc <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002ab4:	2132      	movs	r1, #50	@ 0x32
90002ab6:	4804      	ldr	r0, [pc, #16]	@ (90002ac8 <LL_FillBuffer+0xcc>)
90002ab8:	f000 fed7 	bl	9000386a <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002abc:	bf00      	nop
90002abe:	3718      	adds	r7, #24
90002ac0:	46bd      	mov	sp, r7
90002ac2:	bd80      	pop	{r7, pc}
90002ac4:	200011fc 	.word	0x200011fc
90002ac8:	200010ec 	.word	0x200010ec
90002acc:	52001000 	.word	0x52001000

90002ad0 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002ad0:	b580      	push	{r7, lr}
90002ad2:	b088      	sub	sp, #32
90002ad4:	af02      	add	r7, sp, #8
90002ad6:	60f8      	str	r0, [r7, #12]
90002ad8:	60b9      	str	r1, [r7, #8]
90002ada:	607a      	str	r2, [r7, #4]
90002adc:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002ade:	4a23      	ldr	r2, [pc, #140]	@ (90002b6c <LL_ConvertLineToRGB+0x9c>)
90002ae0:	68fb      	ldr	r3, [r7, #12]
90002ae2:	015b      	lsls	r3, r3, #5
90002ae4:	4413      	add	r3, r2
90002ae6:	330c      	adds	r3, #12
90002ae8:	681b      	ldr	r3, [r3, #0]
90002aea:	2b02      	cmp	r3, #2
90002aec:	d102      	bne.n	90002af4 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002aee:	2302      	movs	r3, #2
90002af0:	617b      	str	r3, [r7, #20]
    break;
90002af2:	e002      	b.n	90002afa <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002af4:	2300      	movs	r3, #0
90002af6:	617b      	str	r3, [r7, #20]
    break;
90002af8:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002afa:	4b1d      	ldr	r3, [pc, #116]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002afc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002b00:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002b02:	4a1b      	ldr	r2, [pc, #108]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b04:	697b      	ldr	r3, [r7, #20]
90002b06:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002b08:	4b19      	ldr	r3, [pc, #100]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b0a:	2200      	movs	r2, #0
90002b0c:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002b0e:	4b18      	ldr	r3, [pc, #96]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b10:	2200      	movs	r2, #0
90002b12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002b14:	4b16      	ldr	r3, [pc, #88]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b16:	22ff      	movs	r2, #255	@ 0xff
90002b18:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002b1a:	4a15      	ldr	r2, [pc, #84]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b1c:	6a3b      	ldr	r3, [r7, #32]
90002b1e:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002b20:	4b13      	ldr	r3, [pc, #76]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b22:	2200      	movs	r2, #0
90002b24:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002b26:	4b12      	ldr	r3, [pc, #72]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b28:	4a12      	ldr	r2, [pc, #72]	@ (90002b74 <LL_ConvertLineToRGB+0xa4>)
90002b2a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002b2c:	4810      	ldr	r0, [pc, #64]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b2e:	f000 fe03 	bl	90003738 <HAL_DMA2D_Init>
90002b32:	4603      	mov	r3, r0
90002b34:	2b00      	cmp	r3, #0
90002b36:	d115      	bne.n	90002b64 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002b38:	2101      	movs	r1, #1
90002b3a:	480d      	ldr	r0, [pc, #52]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b3c:	f000 ff7e 	bl	90003a3c <HAL_DMA2D_ConfigLayer>
90002b40:	4603      	mov	r3, r0
90002b42:	2b00      	cmp	r3, #0
90002b44:	d10e      	bne.n	90002b64 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002b46:	68b9      	ldr	r1, [r7, #8]
90002b48:	687a      	ldr	r2, [r7, #4]
90002b4a:	2301      	movs	r3, #1
90002b4c:	9300      	str	r3, [sp, #0]
90002b4e:	683b      	ldr	r3, [r7, #0]
90002b50:	4807      	ldr	r0, [pc, #28]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b52:	f000 fe5f 	bl	90003814 <HAL_DMA2D_Start>
90002b56:	4603      	mov	r3, r0
90002b58:	2b00      	cmp	r3, #0
90002b5a:	d103      	bne.n	90002b64 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002b5c:	2132      	movs	r1, #50	@ 0x32
90002b5e:	4804      	ldr	r0, [pc, #16]	@ (90002b70 <LL_ConvertLineToRGB+0xa0>)
90002b60:	f000 fe83 	bl	9000386a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002b64:	bf00      	nop
90002b66:	3718      	adds	r7, #24
90002b68:	46bd      	mov	sp, r7
90002b6a:	bd80      	pop	{r7, pc}
90002b6c:	200011fc 	.word	0x200011fc
90002b70:	200010ec 	.word	0x200010ec
90002b74:	52001000 	.word	0x52001000

90002b78 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002b78:	b580      	push	{r7, lr}
90002b7a:	b08e      	sub	sp, #56	@ 0x38
90002b7c:	af00      	add	r7, sp, #0
90002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002b80:	687b      	ldr	r3, [r7, #4]
90002b82:	681b      	ldr	r3, [r3, #0]
90002b84:	4a5b      	ldr	r2, [pc, #364]	@ (90002cf4 <LTDC_MspInit+0x17c>)
90002b86:	4293      	cmp	r3, r2
90002b88:	f040 80b0 	bne.w	90002cec <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002b8c:	4b5a      	ldr	r3, [pc, #360]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002b8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002b92:	4a59      	ldr	r2, [pc, #356]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002b94:	f043 0308 	orr.w	r3, r3, #8
90002b98:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002b9c:	4b56      	ldr	r3, [pc, #344]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002b9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002ba2:	f003 0308 	and.w	r3, r3, #8
90002ba6:	623b      	str	r3, [r7, #32]
90002ba8:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002baa:	4b53      	ldr	r3, [pc, #332]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bb0:	4a51      	ldr	r2, [pc, #324]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002bba:	4b4f      	ldr	r3, [pc, #316]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002bc4:	61fb      	str	r3, [r7, #28]
90002bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002bc8:	4b4b      	ldr	r3, [pc, #300]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bce:	4a4a      	ldr	r2, [pc, #296]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002bd8:	4b47      	ldr	r3, [pc, #284]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002be2:	61bb      	str	r3, [r7, #24]
90002be4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002be6:	4b44      	ldr	r3, [pc, #272]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bec:	4a42      	ldr	r2, [pc, #264]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002bf6:	4b40      	ldr	r3, [pc, #256]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002c00:	617b      	str	r3, [r7, #20]
90002c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002c04:	4b3c      	ldr	r3, [pc, #240]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c0a:	4a3b      	ldr	r2, [pc, #236]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002c14:	4b38      	ldr	r3, [pc, #224]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002c1e:	613b      	str	r3, [r7, #16]
90002c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002c22:	4b35      	ldr	r3, [pc, #212]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c28:	4a33      	ldr	r2, [pc, #204]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002c2a:	f043 0308 	orr.w	r3, r3, #8
90002c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002c32:	4b31      	ldr	r3, [pc, #196]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c38:	f003 0308 	and.w	r3, r3, #8
90002c3c:	60fb      	str	r3, [r7, #12]
90002c3e:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002c40:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002c44:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002c46:	2302      	movs	r3, #2
90002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002c4a:	2300      	movs	r3, #0
90002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002c4e:	2302      	movs	r3, #2
90002c50:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002c52:	230e      	movs	r3, #14
90002c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c5a:	4619      	mov	r1, r3
90002c5c:	4827      	ldr	r0, [pc, #156]	@ (90002cfc <LTDC_MspInit+0x184>)
90002c5e:	f001 f841 	bl	90003ce4 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002c66:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002c68:	230e      	movs	r3, #14
90002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c70:	4619      	mov	r1, r3
90002c72:	4823      	ldr	r0, [pc, #140]	@ (90002d00 <LTDC_MspInit+0x188>)
90002c74:	f001 f836 	bl	90003ce4 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002c78:	23ff      	movs	r3, #255	@ 0xff
90002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002c7c:	230e      	movs	r3, #14
90002c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c84:	4619      	mov	r1, r3
90002c86:	481f      	ldr	r0, [pc, #124]	@ (90002d04 <LTDC_MspInit+0x18c>)
90002c88:	f001 f82c 	bl	90003ce4 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002c8c:	f240 2302 	movw	r3, #514	@ 0x202
90002c90:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002c92:	2302      	movs	r3, #2
90002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002c96:	2300      	movs	r3, #0
90002c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002c9a:	2302      	movs	r3, #2
90002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002c9e:	230e      	movs	r3, #14
90002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ca6:	4619      	mov	r1, r3
90002ca8:	4817      	ldr	r0, [pc, #92]	@ (90002d08 <LTDC_MspInit+0x190>)
90002caa:	f001 f81b 	bl	90003ce4 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002cae:	2380      	movs	r3, #128	@ 0x80
90002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002cb2:	2301      	movs	r3, #1
90002cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002cba:	4619      	mov	r1, r3
90002cbc:	4813      	ldr	r0, [pc, #76]	@ (90002d0c <LTDC_MspInit+0x194>)
90002cbe:	f001 f811 	bl	90003ce4 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002cc2:	2201      	movs	r2, #1
90002cc4:	2180      	movs	r1, #128	@ 0x80
90002cc6:	4811      	ldr	r0, [pc, #68]	@ (90002d0c <LTDC_MspInit+0x194>)
90002cc8:	f001 f9d4 	bl	90004074 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002cd2:	4a09      	ldr	r2, [pc, #36]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002cd4:	f043 0308 	orr.w	r3, r3, #8
90002cd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002cdc:	4b06      	ldr	r3, [pc, #24]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002ce2:	4a05      	ldr	r2, [pc, #20]	@ (90002cf8 <LTDC_MspInit+0x180>)
90002ce4:	f023 0308 	bic.w	r3, r3, #8
90002ce8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002cec:	bf00      	nop
90002cee:	3738      	adds	r7, #56	@ 0x38
90002cf0:	46bd      	mov	sp, r7
90002cf2:	bd80      	pop	{r7, pc}
90002cf4:	50001000 	.word	0x50001000
90002cf8:	58024400 	.word	0x58024400
90002cfc:	58022000 	.word	0x58022000
90002d00:	58022400 	.word	0x58022400
90002d04:	58022800 	.word	0x58022800
90002d08:	58021c00 	.word	0x58021c00
90002d0c:	58020c00 	.word	0x58020c00

90002d10 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002d10:	b480      	push	{r7}
90002d12:	b085      	sub	sp, #20
90002d14:	af00      	add	r7, sp, #0
90002d16:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002d18:	687b      	ldr	r3, [r7, #4]
90002d1a:	681b      	ldr	r3, [r3, #0]
90002d1c:	4a11      	ldr	r2, [pc, #68]	@ (90002d64 <DMA2D_MspInit+0x54>)
90002d1e:	4293      	cmp	r3, r2
90002d20:	d11a      	bne.n	90002d58 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002d22:	4b11      	ldr	r3, [pc, #68]	@ (90002d68 <DMA2D_MspInit+0x58>)
90002d24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002d28:	4a0f      	ldr	r2, [pc, #60]	@ (90002d68 <DMA2D_MspInit+0x58>)
90002d2a:	f043 0310 	orr.w	r3, r3, #16
90002d2e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002d32:	4b0d      	ldr	r3, [pc, #52]	@ (90002d68 <DMA2D_MspInit+0x58>)
90002d34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002d38:	f003 0310 	and.w	r3, r3, #16
90002d3c:	60fb      	str	r3, [r7, #12]
90002d3e:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002d40:	4b09      	ldr	r3, [pc, #36]	@ (90002d68 <DMA2D_MspInit+0x58>)
90002d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002d44:	4a08      	ldr	r2, [pc, #32]	@ (90002d68 <DMA2D_MspInit+0x58>)
90002d46:	f043 0310 	orr.w	r3, r3, #16
90002d4a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002d4c:	4b06      	ldr	r3, [pc, #24]	@ (90002d68 <DMA2D_MspInit+0x58>)
90002d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002d50:	4a05      	ldr	r2, [pc, #20]	@ (90002d68 <DMA2D_MspInit+0x58>)
90002d52:	f023 0310 	bic.w	r3, r3, #16
90002d56:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002d58:	bf00      	nop
90002d5a:	3714      	adds	r7, #20
90002d5c:	46bd      	mov	sp, r7
90002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002d62:	4770      	bx	lr
90002d64:	52001000 	.word	0x52001000
90002d68:	58024400 	.word	0x58024400

90002d6c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002d6c:	b580      	push	{r7, lr}
90002d6e:	b08a      	sub	sp, #40	@ 0x28
90002d70:	af00      	add	r7, sp, #0
90002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002d74:	4b18      	ldr	r3, [pc, #96]	@ (90002dd8 <TIMx_PWM_MspInit+0x6c>)
90002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d7a:	4a17      	ldr	r2, [pc, #92]	@ (90002dd8 <TIMx_PWM_MspInit+0x6c>)
90002d7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d84:	4b14      	ldr	r3, [pc, #80]	@ (90002dd8 <TIMx_PWM_MspInit+0x6c>)
90002d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002d8e:	613b      	str	r3, [r7, #16]
90002d90:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002d92:	4b11      	ldr	r3, [pc, #68]	@ (90002dd8 <TIMx_PWM_MspInit+0x6c>)
90002d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002d98:	4a0f      	ldr	r2, [pc, #60]	@ (90002dd8 <TIMx_PWM_MspInit+0x6c>)
90002d9a:	f043 0302 	orr.w	r3, r3, #2
90002d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002da2:	4b0d      	ldr	r3, [pc, #52]	@ (90002dd8 <TIMx_PWM_MspInit+0x6c>)
90002da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002da8:	f003 0302 	and.w	r3, r3, #2
90002dac:	60fb      	str	r3, [r7, #12]
90002dae:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002db0:	2302      	movs	r3, #2
90002db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002db4:	2300      	movs	r3, #0
90002db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002db8:	2301      	movs	r3, #1
90002dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002dbc:	2303      	movs	r3, #3
90002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002dc0:	2301      	movs	r3, #1
90002dc2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002dc4:	f107 0314 	add.w	r3, r7, #20
90002dc8:	4619      	mov	r1, r3
90002dca:	4804      	ldr	r0, [pc, #16]	@ (90002ddc <TIMx_PWM_MspInit+0x70>)
90002dcc:	f000 ff8a 	bl	90003ce4 <HAL_GPIO_Init>
}
90002dd0:	bf00      	nop
90002dd2:	3728      	adds	r7, #40	@ 0x28
90002dd4:	46bd      	mov	sp, r7
90002dd6:	bd80      	pop	{r7, pc}
90002dd8:	58024400 	.word	0x58024400
90002ddc:	58022800 	.word	0x58022800

90002de0 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002de0:	b580      	push	{r7, lr}
90002de2:	b082      	sub	sp, #8
90002de4:	af00      	add	r7, sp, #0
90002de6:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002de8:	687b      	ldr	r3, [r7, #4]
90002dea:	4a11      	ldr	r2, [pc, #68]	@ (90002e30 <TIMx_PWM_Init+0x50>)
90002dec:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002dee:	6878      	ldr	r0, [r7, #4]
90002df0:	f006 fe82 	bl	90009af8 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002df4:	6878      	ldr	r0, [r7, #4]
90002df6:	f7ff ffb9 	bl	90002d6c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002dfa:	687b      	ldr	r3, [r7, #4]
90002dfc:	2204      	movs	r2, #4
90002dfe:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002e00:	687b      	ldr	r3, [r7, #4]
90002e02:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002e06:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002e08:	687b      	ldr	r3, [r7, #4]
90002e0a:	2200      	movs	r2, #0
90002e0c:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002e0e:	687b      	ldr	r3, [r7, #4]
90002e10:	2200      	movs	r2, #0
90002e12:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002e14:	687b      	ldr	r3, [r7, #4]
90002e16:	2200      	movs	r2, #0
90002e18:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002e1a:	687b      	ldr	r3, [r7, #4]
90002e1c:	2200      	movs	r2, #0
90002e1e:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002e20:	6878      	ldr	r0, [r7, #4]
90002e22:	f006 fe12 	bl	90009a4a <HAL_TIM_PWM_Init>
}
90002e26:	bf00      	nop
90002e28:	3708      	adds	r7, #8
90002e2a:	46bd      	mov	sp, r7
90002e2c:	bd80      	pop	{r7, pc}
90002e2e:	bf00      	nop
90002e30:	40010400 	.word	0x40010400

90002e34 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002e34:	b580      	push	{r7, lr}
90002e36:	b084      	sub	sp, #16
90002e38:	af00      	add	r7, sp, #0
90002e3a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002e3c:	2300      	movs	r3, #0
90002e3e:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002e40:	687b      	ldr	r3, [r7, #4]
90002e42:	2b00      	cmp	r3, #0
90002e44:	d003      	beq.n	90002e4e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002e46:	f06f 0301 	mvn.w	r3, #1
90002e4a:	60fb      	str	r3, [r7, #12]
90002e4c:	e044      	b.n	90002ed8 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002e4e:	687b      	ldr	r3, [r7, #4]
90002e50:	2234      	movs	r2, #52	@ 0x34
90002e52:	fb02 f303 	mul.w	r3, r2, r3
90002e56:	4a23      	ldr	r2, [pc, #140]	@ (90002ee4 <BSP_SDRAM_Init+0xb0>)
90002e58:	4413      	add	r3, r2
90002e5a:	4618      	mov	r0, r3
90002e5c:	f000 f892 	bl	90002f84 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002e60:	687b      	ldr	r3, [r7, #4]
90002e62:	2234      	movs	r2, #52	@ 0x34
90002e64:	fb02 f303 	mul.w	r3, r2, r3
90002e68:	4a1e      	ldr	r2, [pc, #120]	@ (90002ee4 <BSP_SDRAM_Init+0xb0>)
90002e6a:	4413      	add	r3, r2
90002e6c:	2210      	movs	r2, #16
90002e6e:	2104      	movs	r1, #4
90002e70:	4618      	mov	r0, r3
90002e72:	f000 f83b 	bl	90002eec <MX_SDRAM_BANK2_Init>
90002e76:	4603      	mov	r3, r0
90002e78:	2b00      	cmp	r3, #0
90002e7a:	d003      	beq.n	90002e84 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002e7c:	f04f 33ff 	mov.w	r3, #4294967295
90002e80:	60fb      	str	r3, [r7, #12]
90002e82:	e029      	b.n	90002ed8 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002e84:	4b18      	ldr	r3, [pc, #96]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002e86:	2208      	movs	r2, #8
90002e88:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002e8a:	4b17      	ldr	r3, [pc, #92]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002e8c:	2203      	movs	r2, #3
90002e8e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002e90:	4b15      	ldr	r3, [pc, #84]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002e92:	f240 6203 	movw	r2, #1539	@ 0x603
90002e96:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002e98:	4b13      	ldr	r3, [pc, #76]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002e9a:	2200      	movs	r2, #0
90002e9c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002e9e:	4b12      	ldr	r3, [pc, #72]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002ea0:	2200      	movs	r2, #0
90002ea2:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002ea4:	4b10      	ldr	r3, [pc, #64]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002ea6:	2230      	movs	r2, #48	@ 0x30
90002ea8:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002eac:	2200      	movs	r2, #0
90002eae:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002eb0:	4b0d      	ldr	r3, [pc, #52]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002eb6:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002eb8:	687b      	ldr	r3, [r7, #4]
90002eba:	2234      	movs	r2, #52	@ 0x34
90002ebc:	fb02 f303 	mul.w	r3, r2, r3
90002ec0:	4a08      	ldr	r2, [pc, #32]	@ (90002ee4 <BSP_SDRAM_Init+0xb0>)
90002ec2:	4413      	add	r3, r2
90002ec4:	4908      	ldr	r1, [pc, #32]	@ (90002ee8 <BSP_SDRAM_Init+0xb4>)
90002ec6:	4618      	mov	r0, r3
90002ec8:	f7fe fc3d 	bl	90001746 <MT48LC4M32B2_Init>
90002ecc:	4603      	mov	r3, r0
90002ece:	2b00      	cmp	r3, #0
90002ed0:	d002      	beq.n	90002ed8 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002ed2:	f06f 0304 	mvn.w	r3, #4
90002ed6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002ed8:	68fb      	ldr	r3, [r7, #12]
}
90002eda:	4618      	mov	r0, r3
90002edc:	3710      	adds	r7, #16
90002ede:	46bd      	mov	sp, r7
90002ee0:	bd80      	pop	{r7, pc}
90002ee2:	bf00      	nop
90002ee4:	2000121c 	.word	0x2000121c
90002ee8:	20001250 	.word	0x20001250

90002eec <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002eec:	b580      	push	{r7, lr}
90002eee:	b08c      	sub	sp, #48	@ 0x30
90002ef0:	af00      	add	r7, sp, #0
90002ef2:	60f8      	str	r0, [r7, #12]
90002ef4:	60b9      	str	r1, [r7, #8]
90002ef6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002ef8:	4b20      	ldr	r3, [pc, #128]	@ (90002f7c <MX_SDRAM_BANK2_Init+0x90>)
90002efa:	4a21      	ldr	r2, [pc, #132]	@ (90002f80 <MX_SDRAM_BANK2_Init+0x94>)
90002efc:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002efe:	68fb      	ldr	r3, [r7, #12]
90002f00:	2201      	movs	r2, #1
90002f02:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002f04:	68fb      	ldr	r3, [r7, #12]
90002f06:	2200      	movs	r2, #0
90002f08:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002f0a:	68fb      	ldr	r3, [r7, #12]
90002f0c:	68ba      	ldr	r2, [r7, #8]
90002f0e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002f10:	68fb      	ldr	r3, [r7, #12]
90002f12:	687a      	ldr	r2, [r7, #4]
90002f14:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002f16:	4b19      	ldr	r3, [pc, #100]	@ (90002f7c <MX_SDRAM_BANK2_Init+0x90>)
90002f18:	2240      	movs	r2, #64	@ 0x40
90002f1a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002f1c:	68fb      	ldr	r3, [r7, #12]
90002f1e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002f22:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002f24:	68fb      	ldr	r3, [r7, #12]
90002f26:	2200      	movs	r2, #0
90002f28:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002f2a:	68fb      	ldr	r3, [r7, #12]
90002f2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002f30:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002f32:	68fb      	ldr	r3, [r7, #12]
90002f34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002f38:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002f3a:	68fb      	ldr	r3, [r7, #12]
90002f3c:	2200      	movs	r2, #0
90002f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002f40:	2302      	movs	r3, #2
90002f42:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002f44:	2307      	movs	r3, #7
90002f46:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002f48:	2304      	movs	r3, #4
90002f4a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002f4c:	2307      	movs	r3, #7
90002f4e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002f50:	2302      	movs	r3, #2
90002f52:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002f54:	2302      	movs	r3, #2
90002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002f58:	2302      	movs	r3, #2
90002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002f5c:	f107 0314 	add.w	r3, r7, #20
90002f60:	4619      	mov	r1, r3
90002f62:	68f8      	ldr	r0, [r7, #12]
90002f64:	f006 fcce 	bl	90009904 <HAL_SDRAM_Init>
90002f68:	4603      	mov	r3, r0
90002f6a:	2b00      	cmp	r3, #0
90002f6c:	d001      	beq.n	90002f72 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002f6e:	2301      	movs	r3, #1
90002f70:	e000      	b.n	90002f74 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002f72:	2300      	movs	r3, #0
}
90002f74:	4618      	mov	r0, r3
90002f76:	3730      	adds	r7, #48	@ 0x30
90002f78:	46bd      	mov	sp, r7
90002f7a:	bd80      	pop	{r7, pc}
90002f7c:	2000121c 	.word	0x2000121c
90002f80:	52004140 	.word	0x52004140

90002f84 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002f84:	b580      	push	{r7, lr}
90002f86:	b08e      	sub	sp, #56	@ 0x38
90002f88:	af00      	add	r7, sp, #0
90002f8a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002f8c:	4b73      	ldr	r3, [pc, #460]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002f8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002f92:	4a72      	ldr	r2, [pc, #456]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002f94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002f98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002f9c:	4b6f      	ldr	r3, [pc, #444]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002f9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002fa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002fa6:	623b      	str	r3, [r7, #32]
90002fa8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002faa:	4b6c      	ldr	r3, [pc, #432]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002fb0:	4a6a      	ldr	r2, [pc, #424]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fb2:	f043 0301 	orr.w	r3, r3, #1
90002fb6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002fba:	4b68      	ldr	r3, [pc, #416]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fbc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002fc0:	f003 0301 	and.w	r3, r3, #1
90002fc4:	61fb      	str	r3, [r7, #28]
90002fc6:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002fc8:	4b64      	ldr	r3, [pc, #400]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002fce:	4a63      	ldr	r2, [pc, #396]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fd0:	f043 0308 	orr.w	r3, r3, #8
90002fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002fd8:	4b60      	ldr	r3, [pc, #384]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002fde:	f003 0308 	and.w	r3, r3, #8
90002fe2:	61bb      	str	r3, [r7, #24]
90002fe4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002fe6:	4b5d      	ldr	r3, [pc, #372]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002fec:	4a5b      	ldr	r2, [pc, #364]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002fee:	f043 0310 	orr.w	r3, r3, #16
90002ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ff6:	4b59      	ldr	r3, [pc, #356]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90002ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ffc:	f003 0310 	and.w	r3, r3, #16
90003000:	617b      	str	r3, [r7, #20]
90003002:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90003004:	4b55      	ldr	r3, [pc, #340]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000300a:	4a54      	ldr	r2, [pc, #336]	@ (9000315c <SDRAM_MspInit+0x1d8>)
9000300c:	f043 0320 	orr.w	r3, r3, #32
90003010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003014:	4b51      	ldr	r3, [pc, #324]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90003016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000301a:	f003 0320 	and.w	r3, r3, #32
9000301e:	613b      	str	r3, [r7, #16]
90003020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90003022:	4b4e      	ldr	r3, [pc, #312]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003028:	4a4c      	ldr	r2, [pc, #304]	@ (9000315c <SDRAM_MspInit+0x1d8>)
9000302a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000302e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003032:	4b4a      	ldr	r3, [pc, #296]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000303c:	60fb      	str	r3, [r7, #12]
9000303e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90003040:	4b46      	ldr	r3, [pc, #280]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90003042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003046:	4a45      	ldr	r2, [pc, #276]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90003048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000304c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003050:	4b42      	ldr	r3, [pc, #264]	@ (9000315c <SDRAM_MspInit+0x1d8>)
90003052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000305a:	60bb      	str	r3, [r7, #8]
9000305c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
9000305e:	2302      	movs	r3, #2
90003060:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90003062:	2301      	movs	r3, #1
90003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90003066:	2303      	movs	r3, #3
90003068:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000306a:	230c      	movs	r3, #12
9000306c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000306e:	f24c 7303 	movw	r3, #50947	@ 0xc703
90003072:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90003074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003078:	4619      	mov	r1, r3
9000307a:	4839      	ldr	r0, [pc, #228]	@ (90003160 <SDRAM_MspInit+0x1dc>)
9000307c:	f000 fe32 	bl	90003ce4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90003080:	f64f 7383 	movw	r3, #65411	@ 0xff83
90003084:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90003086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000308a:	4619      	mov	r1, r3
9000308c:	4835      	ldr	r0, [pc, #212]	@ (90003164 <SDRAM_MspInit+0x1e0>)
9000308e:	f000 fe29 	bl	90003ce4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90003092:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90003096:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90003098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000309c:	4619      	mov	r1, r3
9000309e:	4832      	ldr	r0, [pc, #200]	@ (90003168 <SDRAM_MspInit+0x1e4>)
900030a0:	f000 fe20 	bl	90003ce4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900030a4:	f248 1333 	movw	r3, #33075	@ 0x8133
900030a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900030aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900030ae:	4619      	mov	r1, r3
900030b0:	482e      	ldr	r0, [pc, #184]	@ (9000316c <SDRAM_MspInit+0x1e8>)
900030b2:	f000 fe17 	bl	90003ce4 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900030b6:	23e0      	movs	r3, #224	@ 0xe0
900030b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900030ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900030be:	4619      	mov	r1, r3
900030c0:	482b      	ldr	r0, [pc, #172]	@ (90003170 <SDRAM_MspInit+0x1ec>)
900030c2:	f000 fe0f 	bl	90003ce4 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900030c6:	4b2b      	ldr	r3, [pc, #172]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
900030cc:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900030ce:	4b29      	ldr	r3, [pc, #164]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
900030d4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900030d6:	4b27      	ldr	r3, [pc, #156]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030d8:	2280      	movs	r2, #128	@ 0x80
900030da:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900030dc:	4b25      	ldr	r3, [pc, #148]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030de:	2200      	movs	r2, #0
900030e0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900030e2:	4b24      	ldr	r3, [pc, #144]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030e4:	f240 2202 	movw	r2, #514	@ 0x202
900030e8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900030ea:	4b22      	ldr	r3, [pc, #136]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030ec:	f640 0208 	movw	r2, #2056	@ 0x808
900030f0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900030f2:	4b20      	ldr	r3, [pc, #128]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030f4:	2220      	movs	r2, #32
900030f6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900030f8:	4b1e      	ldr	r3, [pc, #120]	@ (90003174 <SDRAM_MspInit+0x1f0>)
900030fa:	2280      	movs	r2, #128	@ 0x80
900030fc:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900030fe:	4b1d      	ldr	r3, [pc, #116]	@ (90003174 <SDRAM_MspInit+0x1f0>)
90003100:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90003104:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90003106:	4b1b      	ldr	r3, [pc, #108]	@ (90003174 <SDRAM_MspInit+0x1f0>)
90003108:	2200      	movs	r2, #0
9000310a:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
9000310c:	4b19      	ldr	r3, [pc, #100]	@ (90003174 <SDRAM_MspInit+0x1f0>)
9000310e:	2200      	movs	r2, #0
90003110:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90003112:	4b18      	ldr	r3, [pc, #96]	@ (90003174 <SDRAM_MspInit+0x1f0>)
90003114:	2280      	movs	r2, #128	@ 0x80
90003116:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90003118:	4b16      	ldr	r3, [pc, #88]	@ (90003174 <SDRAM_MspInit+0x1f0>)
9000311a:	2200      	movs	r2, #0
9000311c:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
9000311e:	4b15      	ldr	r3, [pc, #84]	@ (90003174 <SDRAM_MspInit+0x1f0>)
90003120:	2200      	movs	r2, #0
90003122:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90003124:	4b13      	ldr	r3, [pc, #76]	@ (90003174 <SDRAM_MspInit+0x1f0>)
90003126:	4a14      	ldr	r2, [pc, #80]	@ (90003178 <SDRAM_MspInit+0x1f4>)
90003128:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000312a:	4b14      	ldr	r3, [pc, #80]	@ (9000317c <SDRAM_MspInit+0x1f8>)
9000312c:	4a11      	ldr	r2, [pc, #68]	@ (90003174 <SDRAM_MspInit+0x1f0>)
9000312e:	631a      	str	r2, [r3, #48]	@ 0x30
90003130:	4b10      	ldr	r3, [pc, #64]	@ (90003174 <SDRAM_MspInit+0x1f0>)
90003132:	4a12      	ldr	r2, [pc, #72]	@ (9000317c <SDRAM_MspInit+0x1f8>)
90003134:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90003136:	480f      	ldr	r0, [pc, #60]	@ (90003174 <SDRAM_MspInit+0x1f0>)
90003138:	f003 fce2 	bl	90006b00 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
9000313c:	480d      	ldr	r0, [pc, #52]	@ (90003174 <SDRAM_MspInit+0x1f0>)
9000313e:	f003 fc93 	bl	90006a68 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90003142:	2200      	movs	r2, #0
90003144:	210f      	movs	r1, #15
90003146:	207a      	movs	r0, #122	@ 0x7a
90003148:	f000 fa49 	bl	900035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
9000314c:	207a      	movs	r0, #122	@ 0x7a
9000314e:	f000 fa60 	bl	90003612 <HAL_NVIC_EnableIRQ>
}
90003152:	bf00      	nop
90003154:	3738      	adds	r7, #56	@ 0x38
90003156:	46bd      	mov	sp, r7
90003158:	bd80      	pop	{r7, pc}
9000315a:	bf00      	nop
9000315c:	58024400 	.word	0x58024400
90003160:	58020c00 	.word	0x58020c00
90003164:	58021000 	.word	0x58021000
90003168:	58021400 	.word	0x58021400
9000316c:	58021800 	.word	0x58021800
90003170:	58021c00 	.word	0x58021c00
90003174:	20001270 	.word	0x20001270
90003178:	52000040 	.word	0x52000040
9000317c:	2000121c 	.word	0x2000121c

90003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90003180:	b480      	push	{r7}
90003182:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90003184:	4b29      	ldr	r3, [pc, #164]	@ (9000322c <SystemInit+0xac>)
90003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000318a:	4a28      	ldr	r2, [pc, #160]	@ (9000322c <SystemInit+0xac>)
9000318c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90003190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90003194:	4b26      	ldr	r3, [pc, #152]	@ (90003230 <SystemInit+0xb0>)
90003196:	681b      	ldr	r3, [r3, #0]
90003198:	4a25      	ldr	r2, [pc, #148]	@ (90003230 <SystemInit+0xb0>)
9000319a:	f043 0301 	orr.w	r3, r3, #1
9000319e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900031a0:	4b23      	ldr	r3, [pc, #140]	@ (90003230 <SystemInit+0xb0>)
900031a2:	2200      	movs	r2, #0
900031a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900031a6:	4b22      	ldr	r3, [pc, #136]	@ (90003230 <SystemInit+0xb0>)
900031a8:	681a      	ldr	r2, [r3, #0]
900031aa:	4921      	ldr	r1, [pc, #132]	@ (90003230 <SystemInit+0xb0>)
900031ac:	4b21      	ldr	r3, [pc, #132]	@ (90003234 <SystemInit+0xb4>)
900031ae:	4013      	ands	r3, r2
900031b0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
900031b2:	4b1f      	ldr	r3, [pc, #124]	@ (90003230 <SystemInit+0xb0>)
900031b4:	2200      	movs	r2, #0
900031b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
900031b8:	4b1d      	ldr	r3, [pc, #116]	@ (90003230 <SystemInit+0xb0>)
900031ba:	2200      	movs	r2, #0
900031bc:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
900031be:	4b1c      	ldr	r3, [pc, #112]	@ (90003230 <SystemInit+0xb0>)
900031c0:	2200      	movs	r2, #0
900031c2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
900031c4:	4b1a      	ldr	r3, [pc, #104]	@ (90003230 <SystemInit+0xb0>)
900031c6:	2200      	movs	r2, #0
900031c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
900031ca:	4b19      	ldr	r3, [pc, #100]	@ (90003230 <SystemInit+0xb0>)
900031cc:	2200      	movs	r2, #0
900031ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
900031d0:	4b17      	ldr	r3, [pc, #92]	@ (90003230 <SystemInit+0xb0>)
900031d2:	2200      	movs	r2, #0
900031d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
900031d6:	4b16      	ldr	r3, [pc, #88]	@ (90003230 <SystemInit+0xb0>)
900031d8:	2200      	movs	r2, #0
900031da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
900031dc:	4b14      	ldr	r3, [pc, #80]	@ (90003230 <SystemInit+0xb0>)
900031de:	2200      	movs	r2, #0
900031e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
900031e2:	4b13      	ldr	r3, [pc, #76]	@ (90003230 <SystemInit+0xb0>)
900031e4:	2200      	movs	r2, #0
900031e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
900031e8:	4b11      	ldr	r3, [pc, #68]	@ (90003230 <SystemInit+0xb0>)
900031ea:	2200      	movs	r2, #0
900031ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
900031ee:	4b10      	ldr	r3, [pc, #64]	@ (90003230 <SystemInit+0xb0>)
900031f0:	2200      	movs	r2, #0
900031f2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
900031f4:	4b0e      	ldr	r3, [pc, #56]	@ (90003230 <SystemInit+0xb0>)
900031f6:	681b      	ldr	r3, [r3, #0]
900031f8:	4a0d      	ldr	r2, [pc, #52]	@ (90003230 <SystemInit+0xb0>)
900031fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
900031fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90003200:	4b0b      	ldr	r3, [pc, #44]	@ (90003230 <SystemInit+0xb0>)
90003202:	2200      	movs	r2, #0
90003204:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90003206:	4b0c      	ldr	r3, [pc, #48]	@ (90003238 <SystemInit+0xb8>)
90003208:	681a      	ldr	r2, [r3, #0]
9000320a:	4b0c      	ldr	r3, [pc, #48]	@ (9000323c <SystemInit+0xbc>)
9000320c:	4013      	ands	r3, r2
9000320e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003212:	d202      	bcs.n	9000321a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90003214:	4b0a      	ldr	r3, [pc, #40]	@ (90003240 <SystemInit+0xc0>)
90003216:	2201      	movs	r2, #1
90003218:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
9000321a:	4b04      	ldr	r3, [pc, #16]	@ (9000322c <SystemInit+0xac>)
9000321c:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90003220:	609a      	str	r2, [r3, #8]
#endif  


}
90003222:	bf00      	nop
90003224:	46bd      	mov	sp, r7
90003226:	f85d 7b04 	ldr.w	r7, [sp], #4
9000322a:	4770      	bx	lr
9000322c:	e000ed00 	.word	0xe000ed00
90003230:	58024400 	.word	0x58024400
90003234:	eaf6ed7f 	.word	0xeaf6ed7f
90003238:	5c001000 	.word	0x5c001000
9000323c:	ffff0000 	.word	0xffff0000
90003240:	51008108 	.word	0x51008108

90003244 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90003244:	b480      	push	{r7}
90003246:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90003248:	4b09      	ldr	r3, [pc, #36]	@ (90003270 <ExitRun0Mode+0x2c>)
9000324a:	68db      	ldr	r3, [r3, #12]
9000324c:	4a08      	ldr	r2, [pc, #32]	@ (90003270 <ExitRun0Mode+0x2c>)
9000324e:	f043 0302 	orr.w	r3, r3, #2
90003252:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90003254:	bf00      	nop
90003256:	4b06      	ldr	r3, [pc, #24]	@ (90003270 <ExitRun0Mode+0x2c>)
90003258:	685b      	ldr	r3, [r3, #4]
9000325a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000325e:	2b00      	cmp	r3, #0
90003260:	d0f9      	beq.n	90003256 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90003262:	bf00      	nop
90003264:	bf00      	nop
90003266:	46bd      	mov	sp, r7
90003268:	f85d 7b04 	ldr.w	r7, [sp], #4
9000326c:	4770      	bx	lr
9000326e:	bf00      	nop
90003270:	58024800 	.word	0x58024800

90003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90003274:	b580      	push	{r7, lr}
90003276:	b082      	sub	sp, #8
90003278:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000327a:	2003      	movs	r0, #3
9000327c:	f000 f9a4 	bl	900035c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90003280:	f004 fb3e 	bl	90007900 <HAL_RCC_GetSysClockFreq>
90003284:	4602      	mov	r2, r0
90003286:	4b15      	ldr	r3, [pc, #84]	@ (900032dc <HAL_Init+0x68>)
90003288:	699b      	ldr	r3, [r3, #24]
9000328a:	0a1b      	lsrs	r3, r3, #8
9000328c:	f003 030f 	and.w	r3, r3, #15
90003290:	4913      	ldr	r1, [pc, #76]	@ (900032e0 <HAL_Init+0x6c>)
90003292:	5ccb      	ldrb	r3, [r1, r3]
90003294:	f003 031f 	and.w	r3, r3, #31
90003298:	fa22 f303 	lsr.w	r3, r2, r3
9000329c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000329e:	4b0f      	ldr	r3, [pc, #60]	@ (900032dc <HAL_Init+0x68>)
900032a0:	699b      	ldr	r3, [r3, #24]
900032a2:	f003 030f 	and.w	r3, r3, #15
900032a6:	4a0e      	ldr	r2, [pc, #56]	@ (900032e0 <HAL_Init+0x6c>)
900032a8:	5cd3      	ldrb	r3, [r2, r3]
900032aa:	f003 031f 	and.w	r3, r3, #31
900032ae:	687a      	ldr	r2, [r7, #4]
900032b0:	fa22 f303 	lsr.w	r3, r2, r3
900032b4:	4a0b      	ldr	r2, [pc, #44]	@ (900032e4 <HAL_Init+0x70>)
900032b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900032b8:	4a0b      	ldr	r2, [pc, #44]	@ (900032e8 <HAL_Init+0x74>)
900032ba:	687b      	ldr	r3, [r7, #4]
900032bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
900032be:	200f      	movs	r0, #15
900032c0:	f000 f81c 	bl	900032fc <HAL_InitTick>
900032c4:	4603      	mov	r3, r0
900032c6:	2b00      	cmp	r3, #0
900032c8:	d001      	beq.n	900032ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
900032ca:	2301      	movs	r3, #1
900032cc:	e002      	b.n	900032d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
900032ce:	f000 f80d 	bl	900032ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
900032d2:	2300      	movs	r3, #0
}
900032d4:	4618      	mov	r0, r3
900032d6:	3708      	adds	r7, #8
900032d8:	46bd      	mov	sp, r7
900032da:	bd80      	pop	{r7, pc}
900032dc:	58024400 	.word	0x58024400
900032e0:	9000d884 	.word	0x9000d884
900032e4:	20000004 	.word	0x20000004
900032e8:	20000000 	.word	0x20000000

900032ec <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
900032ec:	b480      	push	{r7}
900032ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
900032f0:	bf00      	nop
900032f2:	46bd      	mov	sp, r7
900032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900032f8:	4770      	bx	lr
	...

900032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900032fc:	b580      	push	{r7, lr}
900032fe:	b082      	sub	sp, #8
90003300:	af00      	add	r7, sp, #0
90003302:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90003304:	4b15      	ldr	r3, [pc, #84]	@ (9000335c <HAL_InitTick+0x60>)
90003306:	781b      	ldrb	r3, [r3, #0]
90003308:	2b00      	cmp	r3, #0
9000330a:	d101      	bne.n	90003310 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
9000330c:	2301      	movs	r3, #1
9000330e:	e021      	b.n	90003354 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90003310:	4b13      	ldr	r3, [pc, #76]	@ (90003360 <HAL_InitTick+0x64>)
90003312:	681a      	ldr	r2, [r3, #0]
90003314:	4b11      	ldr	r3, [pc, #68]	@ (9000335c <HAL_InitTick+0x60>)
90003316:	781b      	ldrb	r3, [r3, #0]
90003318:	4619      	mov	r1, r3
9000331a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000331e:	fbb3 f3f1 	udiv	r3, r3, r1
90003322:	fbb2 f3f3 	udiv	r3, r2, r3
90003326:	4618      	mov	r0, r3
90003328:	f000 f981 	bl	9000362e <HAL_SYSTICK_Config>
9000332c:	4603      	mov	r3, r0
9000332e:	2b00      	cmp	r3, #0
90003330:	d001      	beq.n	90003336 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90003332:	2301      	movs	r3, #1
90003334:	e00e      	b.n	90003354 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90003336:	687b      	ldr	r3, [r7, #4]
90003338:	2b0f      	cmp	r3, #15
9000333a:	d80a      	bhi.n	90003352 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
9000333c:	2200      	movs	r2, #0
9000333e:	6879      	ldr	r1, [r7, #4]
90003340:	f04f 30ff 	mov.w	r0, #4294967295
90003344:	f000 f94b 	bl	900035de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003348:	4a06      	ldr	r2, [pc, #24]	@ (90003364 <HAL_InitTick+0x68>)
9000334a:	687b      	ldr	r3, [r7, #4]
9000334c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000334e:	2300      	movs	r3, #0
90003350:	e000      	b.n	90003354 <HAL_InitTick+0x58>
    return HAL_ERROR;
90003352:	2301      	movs	r3, #1
}
90003354:	4618      	mov	r0, r3
90003356:	3708      	adds	r7, #8
90003358:	46bd      	mov	sp, r7
9000335a:	bd80      	pop	{r7, pc}
9000335c:	2000000c 	.word	0x2000000c
90003360:	20000000 	.word	0x20000000
90003364:	20000008 	.word	0x20000008

90003368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003368:	b480      	push	{r7}
9000336a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
9000336c:	4b06      	ldr	r3, [pc, #24]	@ (90003388 <HAL_IncTick+0x20>)
9000336e:	781b      	ldrb	r3, [r3, #0]
90003370:	461a      	mov	r2, r3
90003372:	4b06      	ldr	r3, [pc, #24]	@ (9000338c <HAL_IncTick+0x24>)
90003374:	681b      	ldr	r3, [r3, #0]
90003376:	4413      	add	r3, r2
90003378:	4a04      	ldr	r2, [pc, #16]	@ (9000338c <HAL_IncTick+0x24>)
9000337a:	6013      	str	r3, [r2, #0]
}
9000337c:	bf00      	nop
9000337e:	46bd      	mov	sp, r7
90003380:	f85d 7b04 	ldr.w	r7, [sp], #4
90003384:	4770      	bx	lr
90003386:	bf00      	nop
90003388:	2000000c 	.word	0x2000000c
9000338c:	200012dc 	.word	0x200012dc

90003390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90003390:	b480      	push	{r7}
90003392:	af00      	add	r7, sp, #0
  return uwTick;
90003394:	4b03      	ldr	r3, [pc, #12]	@ (900033a4 <HAL_GetTick+0x14>)
90003396:	681b      	ldr	r3, [r3, #0]
}
90003398:	4618      	mov	r0, r3
9000339a:	46bd      	mov	sp, r7
9000339c:	f85d 7b04 	ldr.w	r7, [sp], #4
900033a0:	4770      	bx	lr
900033a2:	bf00      	nop
900033a4:	200012dc 	.word	0x200012dc

900033a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900033a8:	b580      	push	{r7, lr}
900033aa:	b084      	sub	sp, #16
900033ac:	af00      	add	r7, sp, #0
900033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900033b0:	f7ff ffee 	bl	90003390 <HAL_GetTick>
900033b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
900033b6:	687b      	ldr	r3, [r7, #4]
900033b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900033ba:	68fb      	ldr	r3, [r7, #12]
900033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
900033c0:	d005      	beq.n	900033ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
900033c2:	4b0a      	ldr	r3, [pc, #40]	@ (900033ec <HAL_Delay+0x44>)
900033c4:	781b      	ldrb	r3, [r3, #0]
900033c6:	461a      	mov	r2, r3
900033c8:	68fb      	ldr	r3, [r7, #12]
900033ca:	4413      	add	r3, r2
900033cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
900033ce:	bf00      	nop
900033d0:	f7ff ffde 	bl	90003390 <HAL_GetTick>
900033d4:	4602      	mov	r2, r0
900033d6:	68bb      	ldr	r3, [r7, #8]
900033d8:	1ad3      	subs	r3, r2, r3
900033da:	68fa      	ldr	r2, [r7, #12]
900033dc:	429a      	cmp	r2, r3
900033de:	d8f7      	bhi.n	900033d0 <HAL_Delay+0x28>
  {
  }
}
900033e0:	bf00      	nop
900033e2:	bf00      	nop
900033e4:	3710      	adds	r7, #16
900033e6:	46bd      	mov	sp, r7
900033e8:	bd80      	pop	{r7, pc}
900033ea:	bf00      	nop
900033ec:	2000000c 	.word	0x2000000c

900033f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
900033f0:	b480      	push	{r7}
900033f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
900033f4:	4b03      	ldr	r3, [pc, #12]	@ (90003404 <HAL_GetREVID+0x14>)
900033f6:	681b      	ldr	r3, [r3, #0]
900033f8:	0c1b      	lsrs	r3, r3, #16
}
900033fa:	4618      	mov	r0, r3
900033fc:	46bd      	mov	sp, r7
900033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90003402:	4770      	bx	lr
90003404:	5c001000 	.word	0x5c001000

90003408 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90003408:	b480      	push	{r7}
9000340a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
9000340c:	4b05      	ldr	r3, [pc, #20]	@ (90003424 <HAL_EnableCompensationCell+0x1c>)
9000340e:	6a1b      	ldr	r3, [r3, #32]
90003410:	4a04      	ldr	r2, [pc, #16]	@ (90003424 <HAL_EnableCompensationCell+0x1c>)
90003412:	f043 0301 	orr.w	r3, r3, #1
90003416:	6213      	str	r3, [r2, #32]
}
90003418:	bf00      	nop
9000341a:	46bd      	mov	sp, r7
9000341c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003420:	4770      	bx	lr
90003422:	bf00      	nop
90003424:	58000400 	.word	0x58000400

90003428 <__NVIC_SetPriorityGrouping>:
{
90003428:	b480      	push	{r7}
9000342a:	b085      	sub	sp, #20
9000342c:	af00      	add	r7, sp, #0
9000342e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003430:	687b      	ldr	r3, [r7, #4]
90003432:	f003 0307 	and.w	r3, r3, #7
90003436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003438:	4b0b      	ldr	r3, [pc, #44]	@ (90003468 <__NVIC_SetPriorityGrouping+0x40>)
9000343a:	68db      	ldr	r3, [r3, #12]
9000343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000343e:	68ba      	ldr	r2, [r7, #8]
90003440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003444:	4013      	ands	r3, r2
90003446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003448:	68fb      	ldr	r3, [r7, #12]
9000344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000344c:	68bb      	ldr	r3, [r7, #8]
9000344e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003450:	4b06      	ldr	r3, [pc, #24]	@ (9000346c <__NVIC_SetPriorityGrouping+0x44>)
90003452:	4313      	orrs	r3, r2
90003454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003456:	4a04      	ldr	r2, [pc, #16]	@ (90003468 <__NVIC_SetPriorityGrouping+0x40>)
90003458:	68bb      	ldr	r3, [r7, #8]
9000345a:	60d3      	str	r3, [r2, #12]
}
9000345c:	bf00      	nop
9000345e:	3714      	adds	r7, #20
90003460:	46bd      	mov	sp, r7
90003462:	f85d 7b04 	ldr.w	r7, [sp], #4
90003466:	4770      	bx	lr
90003468:	e000ed00 	.word	0xe000ed00
9000346c:	05fa0000 	.word	0x05fa0000

90003470 <__NVIC_GetPriorityGrouping>:
{
90003470:	b480      	push	{r7}
90003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003474:	4b04      	ldr	r3, [pc, #16]	@ (90003488 <__NVIC_GetPriorityGrouping+0x18>)
90003476:	68db      	ldr	r3, [r3, #12]
90003478:	0a1b      	lsrs	r3, r3, #8
9000347a:	f003 0307 	and.w	r3, r3, #7
}
9000347e:	4618      	mov	r0, r3
90003480:	46bd      	mov	sp, r7
90003482:	f85d 7b04 	ldr.w	r7, [sp], #4
90003486:	4770      	bx	lr
90003488:	e000ed00 	.word	0xe000ed00

9000348c <__NVIC_EnableIRQ>:
{
9000348c:	b480      	push	{r7}
9000348e:	b083      	sub	sp, #12
90003490:	af00      	add	r7, sp, #0
90003492:	4603      	mov	r3, r0
90003494:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000349a:	2b00      	cmp	r3, #0
9000349c:	db0b      	blt.n	900034b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000349e:	88fb      	ldrh	r3, [r7, #6]
900034a0:	f003 021f 	and.w	r2, r3, #31
900034a4:	4907      	ldr	r1, [pc, #28]	@ (900034c4 <__NVIC_EnableIRQ+0x38>)
900034a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034aa:	095b      	lsrs	r3, r3, #5
900034ac:	2001      	movs	r0, #1
900034ae:	fa00 f202 	lsl.w	r2, r0, r2
900034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900034b6:	bf00      	nop
900034b8:	370c      	adds	r7, #12
900034ba:	46bd      	mov	sp, r7
900034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900034c0:	4770      	bx	lr
900034c2:	bf00      	nop
900034c4:	e000e100 	.word	0xe000e100

900034c8 <__NVIC_SetPriority>:
{
900034c8:	b480      	push	{r7}
900034ca:	b083      	sub	sp, #12
900034cc:	af00      	add	r7, sp, #0
900034ce:	4603      	mov	r3, r0
900034d0:	6039      	str	r1, [r7, #0]
900034d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900034d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034d8:	2b00      	cmp	r3, #0
900034da:	db0a      	blt.n	900034f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900034dc:	683b      	ldr	r3, [r7, #0]
900034de:	b2da      	uxtb	r2, r3
900034e0:	490c      	ldr	r1, [pc, #48]	@ (90003514 <__NVIC_SetPriority+0x4c>)
900034e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034e6:	0112      	lsls	r2, r2, #4
900034e8:	b2d2      	uxtb	r2, r2
900034ea:	440b      	add	r3, r1
900034ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
900034f0:	e00a      	b.n	90003508 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900034f2:	683b      	ldr	r3, [r7, #0]
900034f4:	b2da      	uxtb	r2, r3
900034f6:	4908      	ldr	r1, [pc, #32]	@ (90003518 <__NVIC_SetPriority+0x50>)
900034f8:	88fb      	ldrh	r3, [r7, #6]
900034fa:	f003 030f 	and.w	r3, r3, #15
900034fe:	3b04      	subs	r3, #4
90003500:	0112      	lsls	r2, r2, #4
90003502:	b2d2      	uxtb	r2, r2
90003504:	440b      	add	r3, r1
90003506:	761a      	strb	r2, [r3, #24]
}
90003508:	bf00      	nop
9000350a:	370c      	adds	r7, #12
9000350c:	46bd      	mov	sp, r7
9000350e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003512:	4770      	bx	lr
90003514:	e000e100 	.word	0xe000e100
90003518:	e000ed00 	.word	0xe000ed00

9000351c <NVIC_EncodePriority>:
{
9000351c:	b480      	push	{r7}
9000351e:	b089      	sub	sp, #36	@ 0x24
90003520:	af00      	add	r7, sp, #0
90003522:	60f8      	str	r0, [r7, #12]
90003524:	60b9      	str	r1, [r7, #8]
90003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003528:	68fb      	ldr	r3, [r7, #12]
9000352a:	f003 0307 	and.w	r3, r3, #7
9000352e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003530:	69fb      	ldr	r3, [r7, #28]
90003532:	f1c3 0307 	rsb	r3, r3, #7
90003536:	2b04      	cmp	r3, #4
90003538:	bf28      	it	cs
9000353a:	2304      	movcs	r3, #4
9000353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000353e:	69fb      	ldr	r3, [r7, #28]
90003540:	3304      	adds	r3, #4
90003542:	2b06      	cmp	r3, #6
90003544:	d902      	bls.n	9000354c <NVIC_EncodePriority+0x30>
90003546:	69fb      	ldr	r3, [r7, #28]
90003548:	3b03      	subs	r3, #3
9000354a:	e000      	b.n	9000354e <NVIC_EncodePriority+0x32>
9000354c:	2300      	movs	r3, #0
9000354e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003550:	f04f 32ff 	mov.w	r2, #4294967295
90003554:	69bb      	ldr	r3, [r7, #24]
90003556:	fa02 f303 	lsl.w	r3, r2, r3
9000355a:	43da      	mvns	r2, r3
9000355c:	68bb      	ldr	r3, [r7, #8]
9000355e:	401a      	ands	r2, r3
90003560:	697b      	ldr	r3, [r7, #20]
90003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003564:	f04f 31ff 	mov.w	r1, #4294967295
90003568:	697b      	ldr	r3, [r7, #20]
9000356a:	fa01 f303 	lsl.w	r3, r1, r3
9000356e:	43d9      	mvns	r1, r3
90003570:	687b      	ldr	r3, [r7, #4]
90003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003574:	4313      	orrs	r3, r2
}
90003576:	4618      	mov	r0, r3
90003578:	3724      	adds	r7, #36	@ 0x24
9000357a:	46bd      	mov	sp, r7
9000357c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003580:	4770      	bx	lr
	...

90003584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003584:	b580      	push	{r7, lr}
90003586:	b082      	sub	sp, #8
90003588:	af00      	add	r7, sp, #0
9000358a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
9000358c:	687b      	ldr	r3, [r7, #4]
9000358e:	3b01      	subs	r3, #1
90003590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003594:	d301      	bcc.n	9000359a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003596:	2301      	movs	r3, #1
90003598:	e00f      	b.n	900035ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000359a:	4a0a      	ldr	r2, [pc, #40]	@ (900035c4 <SysTick_Config+0x40>)
9000359c:	687b      	ldr	r3, [r7, #4]
9000359e:	3b01      	subs	r3, #1
900035a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900035a2:	210f      	movs	r1, #15
900035a4:	f04f 30ff 	mov.w	r0, #4294967295
900035a8:	f7ff ff8e 	bl	900034c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900035ac:	4b05      	ldr	r3, [pc, #20]	@ (900035c4 <SysTick_Config+0x40>)
900035ae:	2200      	movs	r2, #0
900035b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900035b2:	4b04      	ldr	r3, [pc, #16]	@ (900035c4 <SysTick_Config+0x40>)
900035b4:	2207      	movs	r2, #7
900035b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900035b8:	2300      	movs	r3, #0
}
900035ba:	4618      	mov	r0, r3
900035bc:	3708      	adds	r7, #8
900035be:	46bd      	mov	sp, r7
900035c0:	bd80      	pop	{r7, pc}
900035c2:	bf00      	nop
900035c4:	e000e010 	.word	0xe000e010

900035c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900035c8:	b580      	push	{r7, lr}
900035ca:	b082      	sub	sp, #8
900035cc:	af00      	add	r7, sp, #0
900035ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
900035d0:	6878      	ldr	r0, [r7, #4]
900035d2:	f7ff ff29 	bl	90003428 <__NVIC_SetPriorityGrouping>
}
900035d6:	bf00      	nop
900035d8:	3708      	adds	r7, #8
900035da:	46bd      	mov	sp, r7
900035dc:	bd80      	pop	{r7, pc}

900035de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
900035de:	b580      	push	{r7, lr}
900035e0:	b086      	sub	sp, #24
900035e2:	af00      	add	r7, sp, #0
900035e4:	4603      	mov	r3, r0
900035e6:	60b9      	str	r1, [r7, #8]
900035e8:	607a      	str	r2, [r7, #4]
900035ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
900035ec:	f7ff ff40 	bl	90003470 <__NVIC_GetPriorityGrouping>
900035f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
900035f2:	687a      	ldr	r2, [r7, #4]
900035f4:	68b9      	ldr	r1, [r7, #8]
900035f6:	6978      	ldr	r0, [r7, #20]
900035f8:	f7ff ff90 	bl	9000351c <NVIC_EncodePriority>
900035fc:	4602      	mov	r2, r0
900035fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003602:	4611      	mov	r1, r2
90003604:	4618      	mov	r0, r3
90003606:	f7ff ff5f 	bl	900034c8 <__NVIC_SetPriority>
}
9000360a:	bf00      	nop
9000360c:	3718      	adds	r7, #24
9000360e:	46bd      	mov	sp, r7
90003610:	bd80      	pop	{r7, pc}

90003612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003612:	b580      	push	{r7, lr}
90003614:	b082      	sub	sp, #8
90003616:	af00      	add	r7, sp, #0
90003618:	4603      	mov	r3, r0
9000361a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
9000361c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003620:	4618      	mov	r0, r3
90003622:	f7ff ff33 	bl	9000348c <__NVIC_EnableIRQ>
}
90003626:	bf00      	nop
90003628:	3708      	adds	r7, #8
9000362a:	46bd      	mov	sp, r7
9000362c:	bd80      	pop	{r7, pc}

9000362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000362e:	b580      	push	{r7, lr}
90003630:	b082      	sub	sp, #8
90003632:	af00      	add	r7, sp, #0
90003634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90003636:	6878      	ldr	r0, [r7, #4]
90003638:	f7ff ffa4 	bl	90003584 <SysTick_Config>
9000363c:	4603      	mov	r3, r0
}
9000363e:	4618      	mov	r0, r3
90003640:	3708      	adds	r7, #8
90003642:	46bd      	mov	sp, r7
90003644:	bd80      	pop	{r7, pc}
	...

90003648 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003648:	b480      	push	{r7}
9000364a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
9000364c:	f3bf 8f5f 	dmb	sy
}
90003650:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003652:	4b07      	ldr	r3, [pc, #28]	@ (90003670 <HAL_MPU_Disable+0x28>)
90003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003656:	4a06      	ldr	r2, [pc, #24]	@ (90003670 <HAL_MPU_Disable+0x28>)
90003658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000365c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000365e:	4b05      	ldr	r3, [pc, #20]	@ (90003674 <HAL_MPU_Disable+0x2c>)
90003660:	2200      	movs	r2, #0
90003662:	605a      	str	r2, [r3, #4]
}
90003664:	bf00      	nop
90003666:	46bd      	mov	sp, r7
90003668:	f85d 7b04 	ldr.w	r7, [sp], #4
9000366c:	4770      	bx	lr
9000366e:	bf00      	nop
90003670:	e000ed00 	.word	0xe000ed00
90003674:	e000ed90 	.word	0xe000ed90

90003678 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003678:	b480      	push	{r7}
9000367a:	b083      	sub	sp, #12
9000367c:	af00      	add	r7, sp, #0
9000367e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003680:	4a0b      	ldr	r2, [pc, #44]	@ (900036b0 <HAL_MPU_Enable+0x38>)
90003682:	687b      	ldr	r3, [r7, #4]
90003684:	f043 0301 	orr.w	r3, r3, #1
90003688:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000368a:	4b0a      	ldr	r3, [pc, #40]	@ (900036b4 <HAL_MPU_Enable+0x3c>)
9000368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000368e:	4a09      	ldr	r2, [pc, #36]	@ (900036b4 <HAL_MPU_Enable+0x3c>)
90003690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003694:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003696:	f3bf 8f4f 	dsb	sy
}
9000369a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000369c:	f3bf 8f6f 	isb	sy
}
900036a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900036a2:	bf00      	nop
900036a4:	370c      	adds	r7, #12
900036a6:	46bd      	mov	sp, r7
900036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
900036ac:	4770      	bx	lr
900036ae:	bf00      	nop
900036b0:	e000ed90 	.word	0xe000ed90
900036b4:	e000ed00 	.word	0xe000ed00

900036b8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
900036b8:	b480      	push	{r7}
900036ba:	b083      	sub	sp, #12
900036bc:	af00      	add	r7, sp, #0
900036be:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900036c0:	687b      	ldr	r3, [r7, #4]
900036c2:	785a      	ldrb	r2, [r3, #1]
900036c4:	4b1b      	ldr	r3, [pc, #108]	@ (90003734 <HAL_MPU_ConfigRegion+0x7c>)
900036c6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
900036c8:	4b1a      	ldr	r3, [pc, #104]	@ (90003734 <HAL_MPU_ConfigRegion+0x7c>)
900036ca:	691b      	ldr	r3, [r3, #16]
900036cc:	4a19      	ldr	r2, [pc, #100]	@ (90003734 <HAL_MPU_ConfigRegion+0x7c>)
900036ce:	f023 0301 	bic.w	r3, r3, #1
900036d2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
900036d4:	4a17      	ldr	r2, [pc, #92]	@ (90003734 <HAL_MPU_ConfigRegion+0x7c>)
900036d6:	687b      	ldr	r3, [r7, #4]
900036d8:	685b      	ldr	r3, [r3, #4]
900036da:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900036dc:	687b      	ldr	r3, [r7, #4]
900036de:	7b1b      	ldrb	r3, [r3, #12]
900036e0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900036e2:	687b      	ldr	r3, [r7, #4]
900036e4:	7adb      	ldrb	r3, [r3, #11]
900036e6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900036e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900036ea:	687b      	ldr	r3, [r7, #4]
900036ec:	7a9b      	ldrb	r3, [r3, #10]
900036ee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900036f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900036f2:	687b      	ldr	r3, [r7, #4]
900036f4:	7b5b      	ldrb	r3, [r3, #13]
900036f6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900036f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900036fa:	687b      	ldr	r3, [r7, #4]
900036fc:	7b9b      	ldrb	r3, [r3, #14]
900036fe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003702:	687b      	ldr	r3, [r7, #4]
90003704:	7bdb      	ldrb	r3, [r3, #15]
90003706:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000370a:	687b      	ldr	r3, [r7, #4]
9000370c:	7a5b      	ldrb	r3, [r3, #9]
9000370e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003712:	687b      	ldr	r3, [r7, #4]
90003714:	7a1b      	ldrb	r3, [r3, #8]
90003716:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003718:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000371a:	687a      	ldr	r2, [r7, #4]
9000371c:	7812      	ldrb	r2, [r2, #0]
9000371e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003720:	4a04      	ldr	r2, [pc, #16]	@ (90003734 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003722:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003724:	6113      	str	r3, [r2, #16]
}
90003726:	bf00      	nop
90003728:	370c      	adds	r7, #12
9000372a:	46bd      	mov	sp, r7
9000372c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003730:	4770      	bx	lr
90003732:	bf00      	nop
90003734:	e000ed90 	.word	0xe000ed90

90003738 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003738:	b580      	push	{r7, lr}
9000373a:	b082      	sub	sp, #8
9000373c:	af00      	add	r7, sp, #0
9000373e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003740:	687b      	ldr	r3, [r7, #4]
90003742:	2b00      	cmp	r3, #0
90003744:	d101      	bne.n	9000374a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90003746:	2301      	movs	r3, #1
90003748:	e04f      	b.n	900037ea <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
9000374a:	687b      	ldr	r3, [r7, #4]
9000374c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003750:	b2db      	uxtb	r3, r3
90003752:	2b00      	cmp	r3, #0
90003754:	d106      	bne.n	90003764 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90003756:	687b      	ldr	r3, [r7, #4]
90003758:	2200      	movs	r2, #0
9000375a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
9000375e:	6878      	ldr	r0, [r7, #4]
90003760:	f000 f84e 	bl	90003800 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003764:	687b      	ldr	r3, [r7, #4]
90003766:	2202      	movs	r2, #2
90003768:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000376c:	687b      	ldr	r3, [r7, #4]
9000376e:	681b      	ldr	r3, [r3, #0]
90003770:	681a      	ldr	r2, [r3, #0]
90003772:	4b20      	ldr	r3, [pc, #128]	@ (900037f4 <HAL_DMA2D_Init+0xbc>)
90003774:	4013      	ands	r3, r2
90003776:	687a      	ldr	r2, [r7, #4]
90003778:	6851      	ldr	r1, [r2, #4]
9000377a:	687a      	ldr	r2, [r7, #4]
9000377c:	69d2      	ldr	r2, [r2, #28]
9000377e:	4311      	orrs	r1, r2
90003780:	687a      	ldr	r2, [r7, #4]
90003782:	6812      	ldr	r2, [r2, #0]
90003784:	430b      	orrs	r3, r1
90003786:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003788:	687b      	ldr	r3, [r7, #4]
9000378a:	681b      	ldr	r3, [r3, #0]
9000378c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000378e:	4b1a      	ldr	r3, [pc, #104]	@ (900037f8 <HAL_DMA2D_Init+0xc0>)
90003790:	4013      	ands	r3, r2
90003792:	687a      	ldr	r2, [r7, #4]
90003794:	6891      	ldr	r1, [r2, #8]
90003796:	687a      	ldr	r2, [r7, #4]
90003798:	6992      	ldr	r2, [r2, #24]
9000379a:	4311      	orrs	r1, r2
9000379c:	687a      	ldr	r2, [r7, #4]
9000379e:	6812      	ldr	r2, [r2, #0]
900037a0:	430b      	orrs	r3, r1
900037a2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900037a4:	687b      	ldr	r3, [r7, #4]
900037a6:	681b      	ldr	r3, [r3, #0]
900037a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
900037aa:	4b14      	ldr	r3, [pc, #80]	@ (900037fc <HAL_DMA2D_Init+0xc4>)
900037ac:	4013      	ands	r3, r2
900037ae:	687a      	ldr	r2, [r7, #4]
900037b0:	68d1      	ldr	r1, [r2, #12]
900037b2:	687a      	ldr	r2, [r7, #4]
900037b4:	6812      	ldr	r2, [r2, #0]
900037b6:	430b      	orrs	r3, r1
900037b8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
900037ba:	687b      	ldr	r3, [r7, #4]
900037bc:	681b      	ldr	r3, [r3, #0]
900037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900037c0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900037c4:	687b      	ldr	r3, [r7, #4]
900037c6:	691b      	ldr	r3, [r3, #16]
900037c8:	051a      	lsls	r2, r3, #20
900037ca:	687b      	ldr	r3, [r7, #4]
900037cc:	695b      	ldr	r3, [r3, #20]
900037ce:	055b      	lsls	r3, r3, #21
900037d0:	431a      	orrs	r2, r3
900037d2:	687b      	ldr	r3, [r7, #4]
900037d4:	681b      	ldr	r3, [r3, #0]
900037d6:	430a      	orrs	r2, r1
900037d8:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
900037da:	687b      	ldr	r3, [r7, #4]
900037dc:	2200      	movs	r2, #0
900037de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
900037e0:	687b      	ldr	r3, [r7, #4]
900037e2:	2201      	movs	r2, #1
900037e4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
900037e8:	2300      	movs	r3, #0
}
900037ea:	4618      	mov	r0, r3
900037ec:	3708      	adds	r7, #8
900037ee:	46bd      	mov	sp, r7
900037f0:	bd80      	pop	{r7, pc}
900037f2:	bf00      	nop
900037f4:	fff8ffbf 	.word	0xfff8ffbf
900037f8:	fffffef8 	.word	0xfffffef8
900037fc:	ffff0000 	.word	0xffff0000

90003800 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003800:	b480      	push	{r7}
90003802:	b083      	sub	sp, #12
90003804:	af00      	add	r7, sp, #0
90003806:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003808:	bf00      	nop
9000380a:	370c      	adds	r7, #12
9000380c:	46bd      	mov	sp, r7
9000380e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003812:	4770      	bx	lr

90003814 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003814:	b580      	push	{r7, lr}
90003816:	b086      	sub	sp, #24
90003818:	af02      	add	r7, sp, #8
9000381a:	60f8      	str	r0, [r7, #12]
9000381c:	60b9      	str	r1, [r7, #8]
9000381e:	607a      	str	r2, [r7, #4]
90003820:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003822:	68fb      	ldr	r3, [r7, #12]
90003824:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003828:	2b01      	cmp	r3, #1
9000382a:	d101      	bne.n	90003830 <HAL_DMA2D_Start+0x1c>
9000382c:	2302      	movs	r3, #2
9000382e:	e018      	b.n	90003862 <HAL_DMA2D_Start+0x4e>
90003830:	68fb      	ldr	r3, [r7, #12]
90003832:	2201      	movs	r2, #1
90003834:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003838:	68fb      	ldr	r3, [r7, #12]
9000383a:	2202      	movs	r2, #2
9000383c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003840:	69bb      	ldr	r3, [r7, #24]
90003842:	9300      	str	r3, [sp, #0]
90003844:	683b      	ldr	r3, [r7, #0]
90003846:	687a      	ldr	r2, [r7, #4]
90003848:	68b9      	ldr	r1, [r7, #8]
9000384a:	68f8      	ldr	r0, [r7, #12]
9000384c:	f000 f9a4 	bl	90003b98 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003850:	68fb      	ldr	r3, [r7, #12]
90003852:	681b      	ldr	r3, [r3, #0]
90003854:	681a      	ldr	r2, [r3, #0]
90003856:	68fb      	ldr	r3, [r7, #12]
90003858:	681b      	ldr	r3, [r3, #0]
9000385a:	f042 0201 	orr.w	r2, r2, #1
9000385e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003860:	2300      	movs	r3, #0
}
90003862:	4618      	mov	r0, r3
90003864:	3710      	adds	r7, #16
90003866:	46bd      	mov	sp, r7
90003868:	bd80      	pop	{r7, pc}

9000386a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
9000386a:	b580      	push	{r7, lr}
9000386c:	b086      	sub	sp, #24
9000386e:	af00      	add	r7, sp, #0
90003870:	6078      	str	r0, [r7, #4]
90003872:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90003874:	2300      	movs	r3, #0
90003876:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003878:	687b      	ldr	r3, [r7, #4]
9000387a:	681b      	ldr	r3, [r3, #0]
9000387c:	681b      	ldr	r3, [r3, #0]
9000387e:	f003 0301 	and.w	r3, r3, #1
90003882:	2b00      	cmp	r3, #0
90003884:	d056      	beq.n	90003934 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003886:	f7ff fd83 	bl	90003390 <HAL_GetTick>
9000388a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000388c:	e04b      	b.n	90003926 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000388e:	687b      	ldr	r3, [r7, #4]
90003890:	681b      	ldr	r3, [r3, #0]
90003892:	685b      	ldr	r3, [r3, #4]
90003894:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003896:	68fb      	ldr	r3, [r7, #12]
90003898:	f003 0321 	and.w	r3, r3, #33	@ 0x21
9000389c:	2b00      	cmp	r3, #0
9000389e:	d023      	beq.n	900038e8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900038a0:	68fb      	ldr	r3, [r7, #12]
900038a2:	f003 0320 	and.w	r3, r3, #32
900038a6:	2b00      	cmp	r3, #0
900038a8:	d005      	beq.n	900038b6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900038aa:	687b      	ldr	r3, [r7, #4]
900038ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038ae:	f043 0202 	orr.w	r2, r3, #2
900038b2:	687b      	ldr	r3, [r7, #4]
900038b4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900038b6:	68fb      	ldr	r3, [r7, #12]
900038b8:	f003 0301 	and.w	r3, r3, #1
900038bc:	2b00      	cmp	r3, #0
900038be:	d005      	beq.n	900038cc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900038c0:	687b      	ldr	r3, [r7, #4]
900038c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038c4:	f043 0201 	orr.w	r2, r3, #1
900038c8:	687b      	ldr	r3, [r7, #4]
900038ca:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900038cc:	687b      	ldr	r3, [r7, #4]
900038ce:	681b      	ldr	r3, [r3, #0]
900038d0:	2221      	movs	r2, #33	@ 0x21
900038d2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900038d4:	687b      	ldr	r3, [r7, #4]
900038d6:	2204      	movs	r2, #4
900038d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900038dc:	687b      	ldr	r3, [r7, #4]
900038de:	2200      	movs	r2, #0
900038e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
900038e4:	2301      	movs	r3, #1
900038e6:	e0a5      	b.n	90003a34 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900038e8:	683b      	ldr	r3, [r7, #0]
900038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
900038ee:	d01a      	beq.n	90003926 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900038f0:	f7ff fd4e 	bl	90003390 <HAL_GetTick>
900038f4:	4602      	mov	r2, r0
900038f6:	697b      	ldr	r3, [r7, #20]
900038f8:	1ad3      	subs	r3, r2, r3
900038fa:	683a      	ldr	r2, [r7, #0]
900038fc:	429a      	cmp	r2, r3
900038fe:	d302      	bcc.n	90003906 <HAL_DMA2D_PollForTransfer+0x9c>
90003900:	683b      	ldr	r3, [r7, #0]
90003902:	2b00      	cmp	r3, #0
90003904:	d10f      	bne.n	90003926 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003906:	687b      	ldr	r3, [r7, #4]
90003908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000390a:	f043 0220 	orr.w	r2, r3, #32
9000390e:	687b      	ldr	r3, [r7, #4]
90003910:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003912:	687b      	ldr	r3, [r7, #4]
90003914:	2203      	movs	r2, #3
90003916:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000391a:	687b      	ldr	r3, [r7, #4]
9000391c:	2200      	movs	r2, #0
9000391e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003922:	2303      	movs	r3, #3
90003924:	e086      	b.n	90003a34 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003926:	687b      	ldr	r3, [r7, #4]
90003928:	681b      	ldr	r3, [r3, #0]
9000392a:	685b      	ldr	r3, [r3, #4]
9000392c:	f003 0302 	and.w	r3, r3, #2
90003930:	2b00      	cmp	r3, #0
90003932:	d0ac      	beq.n	9000388e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003934:	687b      	ldr	r3, [r7, #4]
90003936:	681b      	ldr	r3, [r3, #0]
90003938:	69db      	ldr	r3, [r3, #28]
9000393a:	f003 0320 	and.w	r3, r3, #32
9000393e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003940:	687b      	ldr	r3, [r7, #4]
90003942:	681b      	ldr	r3, [r3, #0]
90003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003946:	f003 0320 	and.w	r3, r3, #32
9000394a:	693a      	ldr	r2, [r7, #16]
9000394c:	4313      	orrs	r3, r2
9000394e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003950:	693b      	ldr	r3, [r7, #16]
90003952:	2b00      	cmp	r3, #0
90003954:	d061      	beq.n	90003a1a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003956:	f7ff fd1b 	bl	90003390 <HAL_GetTick>
9000395a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
9000395c:	e056      	b.n	90003a0c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000395e:	687b      	ldr	r3, [r7, #4]
90003960:	681b      	ldr	r3, [r3, #0]
90003962:	685b      	ldr	r3, [r3, #4]
90003964:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003966:	68fb      	ldr	r3, [r7, #12]
90003968:	f003 0329 	and.w	r3, r3, #41	@ 0x29
9000396c:	2b00      	cmp	r3, #0
9000396e:	d02e      	beq.n	900039ce <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003970:	68fb      	ldr	r3, [r7, #12]
90003972:	f003 0308 	and.w	r3, r3, #8
90003976:	2b00      	cmp	r3, #0
90003978:	d005      	beq.n	90003986 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
9000397a:	687b      	ldr	r3, [r7, #4]
9000397c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000397e:	f043 0204 	orr.w	r2, r3, #4
90003982:	687b      	ldr	r3, [r7, #4]
90003984:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003986:	68fb      	ldr	r3, [r7, #12]
90003988:	f003 0320 	and.w	r3, r3, #32
9000398c:	2b00      	cmp	r3, #0
9000398e:	d005      	beq.n	9000399c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003990:	687b      	ldr	r3, [r7, #4]
90003992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003994:	f043 0202 	orr.w	r2, r3, #2
90003998:	687b      	ldr	r3, [r7, #4]
9000399a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000399c:	68fb      	ldr	r3, [r7, #12]
9000399e:	f003 0301 	and.w	r3, r3, #1
900039a2:	2b00      	cmp	r3, #0
900039a4:	d005      	beq.n	900039b2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900039a6:	687b      	ldr	r3, [r7, #4]
900039a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900039aa:	f043 0201 	orr.w	r2, r3, #1
900039ae:	687b      	ldr	r3, [r7, #4]
900039b0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900039b2:	687b      	ldr	r3, [r7, #4]
900039b4:	681b      	ldr	r3, [r3, #0]
900039b6:	2229      	movs	r2, #41	@ 0x29
900039b8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900039ba:	687b      	ldr	r3, [r7, #4]
900039bc:	2204      	movs	r2, #4
900039be:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900039c2:	687b      	ldr	r3, [r7, #4]
900039c4:	2200      	movs	r2, #0
900039c6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
900039ca:	2301      	movs	r3, #1
900039cc:	e032      	b.n	90003a34 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900039ce:	683b      	ldr	r3, [r7, #0]
900039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
900039d4:	d01a      	beq.n	90003a0c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900039d6:	f7ff fcdb 	bl	90003390 <HAL_GetTick>
900039da:	4602      	mov	r2, r0
900039dc:	697b      	ldr	r3, [r7, #20]
900039de:	1ad3      	subs	r3, r2, r3
900039e0:	683a      	ldr	r2, [r7, #0]
900039e2:	429a      	cmp	r2, r3
900039e4:	d302      	bcc.n	900039ec <HAL_DMA2D_PollForTransfer+0x182>
900039e6:	683b      	ldr	r3, [r7, #0]
900039e8:	2b00      	cmp	r3, #0
900039ea:	d10f      	bne.n	90003a0c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900039ec:	687b      	ldr	r3, [r7, #4]
900039ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900039f0:	f043 0220 	orr.w	r2, r3, #32
900039f4:	687b      	ldr	r3, [r7, #4]
900039f6:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
900039f8:	687b      	ldr	r3, [r7, #4]
900039fa:	2203      	movs	r2, #3
900039fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003a00:	687b      	ldr	r3, [r7, #4]
90003a02:	2200      	movs	r2, #0
90003a04:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003a08:	2303      	movs	r3, #3
90003a0a:	e013      	b.n	90003a34 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003a0c:	687b      	ldr	r3, [r7, #4]
90003a0e:	681b      	ldr	r3, [r3, #0]
90003a10:	685b      	ldr	r3, [r3, #4]
90003a12:	f003 0310 	and.w	r3, r3, #16
90003a16:	2b00      	cmp	r3, #0
90003a18:	d0a1      	beq.n	9000395e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003a1a:	687b      	ldr	r3, [r7, #4]
90003a1c:	681b      	ldr	r3, [r3, #0]
90003a1e:	2212      	movs	r2, #18
90003a20:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003a22:	687b      	ldr	r3, [r7, #4]
90003a24:	2201      	movs	r2, #1
90003a26:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003a2a:	687b      	ldr	r3, [r7, #4]
90003a2c:	2200      	movs	r2, #0
90003a2e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003a32:	2300      	movs	r3, #0
}
90003a34:	4618      	mov	r0, r3
90003a36:	3718      	adds	r7, #24
90003a38:	46bd      	mov	sp, r7
90003a3a:	bd80      	pop	{r7, pc}

90003a3c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003a3c:	b480      	push	{r7}
90003a3e:	b087      	sub	sp, #28
90003a40:	af00      	add	r7, sp, #0
90003a42:	6078      	str	r0, [r7, #4]
90003a44:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003a46:	687b      	ldr	r3, [r7, #4]
90003a48:	685b      	ldr	r3, [r3, #4]
90003a4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003a4e:	683b      	ldr	r3, [r7, #0]
90003a50:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003a52:	687b      	ldr	r3, [r7, #4]
90003a54:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003a58:	2b01      	cmp	r3, #1
90003a5a:	d101      	bne.n	90003a60 <HAL_DMA2D_ConfigLayer+0x24>
90003a5c:	2302      	movs	r3, #2
90003a5e:	e092      	b.n	90003b86 <HAL_DMA2D_ConfigLayer+0x14a>
90003a60:	687b      	ldr	r3, [r7, #4]
90003a62:	2201      	movs	r2, #1
90003a64:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003a68:	687b      	ldr	r3, [r7, #4]
90003a6a:	2202      	movs	r2, #2
90003a6c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003a70:	683a      	ldr	r2, [r7, #0]
90003a72:	4613      	mov	r3, r2
90003a74:	00db      	lsls	r3, r3, #3
90003a76:	1a9b      	subs	r3, r3, r2
90003a78:	009b      	lsls	r3, r3, #2
90003a7a:	3328      	adds	r3, #40	@ 0x28
90003a7c:	687a      	ldr	r2, [r7, #4]
90003a7e:	4413      	add	r3, r2
90003a80:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a82:	68fb      	ldr	r3, [r7, #12]
90003a84:	685a      	ldr	r2, [r3, #4]
90003a86:	68fb      	ldr	r3, [r7, #12]
90003a88:	689b      	ldr	r3, [r3, #8]
90003a8a:	041b      	lsls	r3, r3, #16
90003a8c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003a8e:	68fb      	ldr	r3, [r7, #12]
90003a90:	691b      	ldr	r3, [r3, #16]
90003a92:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003a96:	68fb      	ldr	r3, [r7, #12]
90003a98:	695b      	ldr	r3, [r3, #20]
90003a9a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a9c:	4313      	orrs	r3, r2
90003a9e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003aa0:	4b3c      	ldr	r3, [pc, #240]	@ (90003b94 <HAL_DMA2D_ConfigLayer+0x158>)
90003aa2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003aa4:	68fb      	ldr	r3, [r7, #12]
90003aa6:	685b      	ldr	r3, [r3, #4]
90003aa8:	2b0a      	cmp	r3, #10
90003aaa:	d003      	beq.n	90003ab4 <HAL_DMA2D_ConfigLayer+0x78>
90003aac:	68fb      	ldr	r3, [r7, #12]
90003aae:	685b      	ldr	r3, [r3, #4]
90003ab0:	2b09      	cmp	r3, #9
90003ab2:	d107      	bne.n	90003ac4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003ab4:	68fb      	ldr	r3, [r7, #12]
90003ab6:	68db      	ldr	r3, [r3, #12]
90003ab8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003abc:	693a      	ldr	r2, [r7, #16]
90003abe:	4313      	orrs	r3, r2
90003ac0:	613b      	str	r3, [r7, #16]
90003ac2:	e005      	b.n	90003ad0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003ac4:	68fb      	ldr	r3, [r7, #12]
90003ac6:	68db      	ldr	r3, [r3, #12]
90003ac8:	061b      	lsls	r3, r3, #24
90003aca:	693a      	ldr	r2, [r7, #16]
90003acc:	4313      	orrs	r3, r2
90003ace:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003ad0:	683b      	ldr	r3, [r7, #0]
90003ad2:	2b00      	cmp	r3, #0
90003ad4:	d120      	bne.n	90003b18 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003ad6:	687b      	ldr	r3, [r7, #4]
90003ad8:	681b      	ldr	r3, [r3, #0]
90003ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003adc:	697b      	ldr	r3, [r7, #20]
90003ade:	43db      	mvns	r3, r3
90003ae0:	ea02 0103 	and.w	r1, r2, r3
90003ae4:	687b      	ldr	r3, [r7, #4]
90003ae6:	681b      	ldr	r3, [r3, #0]
90003ae8:	693a      	ldr	r2, [r7, #16]
90003aea:	430a      	orrs	r2, r1
90003aec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003aee:	687b      	ldr	r3, [r7, #4]
90003af0:	681b      	ldr	r3, [r3, #0]
90003af2:	68fa      	ldr	r2, [r7, #12]
90003af4:	6812      	ldr	r2, [r2, #0]
90003af6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003af8:	68fb      	ldr	r3, [r7, #12]
90003afa:	685b      	ldr	r3, [r3, #4]
90003afc:	2b0a      	cmp	r3, #10
90003afe:	d003      	beq.n	90003b08 <HAL_DMA2D_ConfigLayer+0xcc>
90003b00:	68fb      	ldr	r3, [r7, #12]
90003b02:	685b      	ldr	r3, [r3, #4]
90003b04:	2b09      	cmp	r3, #9
90003b06:	d135      	bne.n	90003b74 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003b08:	68fb      	ldr	r3, [r7, #12]
90003b0a:	68da      	ldr	r2, [r3, #12]
90003b0c:	687b      	ldr	r3, [r7, #4]
90003b0e:	681b      	ldr	r3, [r3, #0]
90003b10:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003b14:	629a      	str	r2, [r3, #40]	@ 0x28
90003b16:	e02d      	b.n	90003b74 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003b18:	68fb      	ldr	r3, [r7, #12]
90003b1a:	685b      	ldr	r3, [r3, #4]
90003b1c:	2b0b      	cmp	r3, #11
90003b1e:	d109      	bne.n	90003b34 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003b20:	68fb      	ldr	r3, [r7, #12]
90003b22:	699b      	ldr	r3, [r3, #24]
90003b24:	049b      	lsls	r3, r3, #18
90003b26:	693a      	ldr	r2, [r7, #16]
90003b28:	4313      	orrs	r3, r2
90003b2a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003b2c:	697b      	ldr	r3, [r7, #20]
90003b2e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003b32:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003b34:	687b      	ldr	r3, [r7, #4]
90003b36:	681b      	ldr	r3, [r3, #0]
90003b38:	69da      	ldr	r2, [r3, #28]
90003b3a:	697b      	ldr	r3, [r7, #20]
90003b3c:	43db      	mvns	r3, r3
90003b3e:	ea02 0103 	and.w	r1, r2, r3
90003b42:	687b      	ldr	r3, [r7, #4]
90003b44:	681b      	ldr	r3, [r3, #0]
90003b46:	693a      	ldr	r2, [r7, #16]
90003b48:	430a      	orrs	r2, r1
90003b4a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003b4c:	687b      	ldr	r3, [r7, #4]
90003b4e:	681b      	ldr	r3, [r3, #0]
90003b50:	68fa      	ldr	r2, [r7, #12]
90003b52:	6812      	ldr	r2, [r2, #0]
90003b54:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003b56:	68fb      	ldr	r3, [r7, #12]
90003b58:	685b      	ldr	r3, [r3, #4]
90003b5a:	2b0a      	cmp	r3, #10
90003b5c:	d003      	beq.n	90003b66 <HAL_DMA2D_ConfigLayer+0x12a>
90003b5e:	68fb      	ldr	r3, [r7, #12]
90003b60:	685b      	ldr	r3, [r3, #4]
90003b62:	2b09      	cmp	r3, #9
90003b64:	d106      	bne.n	90003b74 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003b66:	68fb      	ldr	r3, [r7, #12]
90003b68:	68da      	ldr	r2, [r3, #12]
90003b6a:	687b      	ldr	r3, [r7, #4]
90003b6c:	681b      	ldr	r3, [r3, #0]
90003b6e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003b72:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003b74:	687b      	ldr	r3, [r7, #4]
90003b76:	2201      	movs	r2, #1
90003b78:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003b7c:	687b      	ldr	r3, [r7, #4]
90003b7e:	2200      	movs	r2, #0
90003b80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003b84:	2300      	movs	r3, #0
}
90003b86:	4618      	mov	r0, r3
90003b88:	371c      	adds	r7, #28
90003b8a:	46bd      	mov	sp, r7
90003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b90:	4770      	bx	lr
90003b92:	bf00      	nop
90003b94:	ff33000f 	.word	0xff33000f

90003b98 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003b98:	b480      	push	{r7}
90003b9a:	b08b      	sub	sp, #44	@ 0x2c
90003b9c:	af00      	add	r7, sp, #0
90003b9e:	60f8      	str	r0, [r7, #12]
90003ba0:	60b9      	str	r1, [r7, #8]
90003ba2:	607a      	str	r2, [r7, #4]
90003ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003ba6:	68fb      	ldr	r3, [r7, #12]
90003ba8:	681b      	ldr	r3, [r3, #0]
90003baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003bac:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003bb0:	683b      	ldr	r3, [r7, #0]
90003bb2:	041a      	lsls	r2, r3, #16
90003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003bb6:	431a      	orrs	r2, r3
90003bb8:	68fb      	ldr	r3, [r7, #12]
90003bba:	681b      	ldr	r3, [r3, #0]
90003bbc:	430a      	orrs	r2, r1
90003bbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003bc0:	68fb      	ldr	r3, [r7, #12]
90003bc2:	681b      	ldr	r3, [r3, #0]
90003bc4:	687a      	ldr	r2, [r7, #4]
90003bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003bc8:	68fb      	ldr	r3, [r7, #12]
90003bca:	685b      	ldr	r3, [r3, #4]
90003bcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003bd0:	d174      	bne.n	90003cbc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003bd2:	68bb      	ldr	r3, [r7, #8]
90003bd4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003bd8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003bda:	68bb      	ldr	r3, [r7, #8]
90003bdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003be0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003be2:	68bb      	ldr	r3, [r7, #8]
90003be4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003be8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003bea:	68bb      	ldr	r3, [r7, #8]
90003bec:	b2db      	uxtb	r3, r3
90003bee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003bf0:	68fb      	ldr	r3, [r7, #12]
90003bf2:	689b      	ldr	r3, [r3, #8]
90003bf4:	2b00      	cmp	r3, #0
90003bf6:	d108      	bne.n	90003c0a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003bf8:	69ba      	ldr	r2, [r7, #24]
90003bfa:	69fb      	ldr	r3, [r7, #28]
90003bfc:	431a      	orrs	r2, r3
90003bfe:	6a3b      	ldr	r3, [r7, #32]
90003c00:	4313      	orrs	r3, r2
90003c02:	697a      	ldr	r2, [r7, #20]
90003c04:	4313      	orrs	r3, r2
90003c06:	627b      	str	r3, [r7, #36]	@ 0x24
90003c08:	e053      	b.n	90003cb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003c0a:	68fb      	ldr	r3, [r7, #12]
90003c0c:	689b      	ldr	r3, [r3, #8]
90003c0e:	2b01      	cmp	r3, #1
90003c10:	d106      	bne.n	90003c20 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003c12:	69ba      	ldr	r2, [r7, #24]
90003c14:	69fb      	ldr	r3, [r7, #28]
90003c16:	4313      	orrs	r3, r2
90003c18:	697a      	ldr	r2, [r7, #20]
90003c1a:	4313      	orrs	r3, r2
90003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
90003c1e:	e048      	b.n	90003cb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003c20:	68fb      	ldr	r3, [r7, #12]
90003c22:	689b      	ldr	r3, [r3, #8]
90003c24:	2b02      	cmp	r3, #2
90003c26:	d111      	bne.n	90003c4c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003c28:	69fb      	ldr	r3, [r7, #28]
90003c2a:	0cdb      	lsrs	r3, r3, #19
90003c2c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003c2e:	69bb      	ldr	r3, [r7, #24]
90003c30:	0a9b      	lsrs	r3, r3, #10
90003c32:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003c34:	697b      	ldr	r3, [r7, #20]
90003c36:	08db      	lsrs	r3, r3, #3
90003c38:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003c3a:	69bb      	ldr	r3, [r7, #24]
90003c3c:	015a      	lsls	r2, r3, #5
90003c3e:	69fb      	ldr	r3, [r7, #28]
90003c40:	02db      	lsls	r3, r3, #11
90003c42:	4313      	orrs	r3, r2
90003c44:	697a      	ldr	r2, [r7, #20]
90003c46:	4313      	orrs	r3, r2
90003c48:	627b      	str	r3, [r7, #36]	@ 0x24
90003c4a:	e032      	b.n	90003cb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003c4c:	68fb      	ldr	r3, [r7, #12]
90003c4e:	689b      	ldr	r3, [r3, #8]
90003c50:	2b03      	cmp	r3, #3
90003c52:	d117      	bne.n	90003c84 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003c54:	6a3b      	ldr	r3, [r7, #32]
90003c56:	0fdb      	lsrs	r3, r3, #31
90003c58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003c5a:	69fb      	ldr	r3, [r7, #28]
90003c5c:	0cdb      	lsrs	r3, r3, #19
90003c5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003c60:	69bb      	ldr	r3, [r7, #24]
90003c62:	0adb      	lsrs	r3, r3, #11
90003c64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003c66:	697b      	ldr	r3, [r7, #20]
90003c68:	08db      	lsrs	r3, r3, #3
90003c6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003c6c:	69bb      	ldr	r3, [r7, #24]
90003c6e:	015a      	lsls	r2, r3, #5
90003c70:	69fb      	ldr	r3, [r7, #28]
90003c72:	029b      	lsls	r3, r3, #10
90003c74:	431a      	orrs	r2, r3
90003c76:	6a3b      	ldr	r3, [r7, #32]
90003c78:	03db      	lsls	r3, r3, #15
90003c7a:	4313      	orrs	r3, r2
90003c7c:	697a      	ldr	r2, [r7, #20]
90003c7e:	4313      	orrs	r3, r2
90003c80:	627b      	str	r3, [r7, #36]	@ 0x24
90003c82:	e016      	b.n	90003cb2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003c84:	6a3b      	ldr	r3, [r7, #32]
90003c86:	0f1b      	lsrs	r3, r3, #28
90003c88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003c8a:	69fb      	ldr	r3, [r7, #28]
90003c8c:	0d1b      	lsrs	r3, r3, #20
90003c8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003c90:	69bb      	ldr	r3, [r7, #24]
90003c92:	0b1b      	lsrs	r3, r3, #12
90003c94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003c96:	697b      	ldr	r3, [r7, #20]
90003c98:	091b      	lsrs	r3, r3, #4
90003c9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003c9c:	69bb      	ldr	r3, [r7, #24]
90003c9e:	011a      	lsls	r2, r3, #4
90003ca0:	69fb      	ldr	r3, [r7, #28]
90003ca2:	021b      	lsls	r3, r3, #8
90003ca4:	431a      	orrs	r2, r3
90003ca6:	6a3b      	ldr	r3, [r7, #32]
90003ca8:	031b      	lsls	r3, r3, #12
90003caa:	4313      	orrs	r3, r2
90003cac:	697a      	ldr	r2, [r7, #20]
90003cae:	4313      	orrs	r3, r2
90003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003cb2:	68fb      	ldr	r3, [r7, #12]
90003cb4:	681b      	ldr	r3, [r3, #0]
90003cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003cba:	e00d      	b.n	90003cd8 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003cbc:	68fb      	ldr	r3, [r7, #12]
90003cbe:	685b      	ldr	r3, [r3, #4]
90003cc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003cc4:	d104      	bne.n	90003cd0 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003cc6:	68fb      	ldr	r3, [r7, #12]
90003cc8:	681b      	ldr	r3, [r3, #0]
90003cca:	68ba      	ldr	r2, [r7, #8]
90003ccc:	615a      	str	r2, [r3, #20]
}
90003cce:	e003      	b.n	90003cd8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003cd0:	68fb      	ldr	r3, [r7, #12]
90003cd2:	681b      	ldr	r3, [r3, #0]
90003cd4:	68ba      	ldr	r2, [r7, #8]
90003cd6:	60da      	str	r2, [r3, #12]
}
90003cd8:	bf00      	nop
90003cda:	372c      	adds	r7, #44	@ 0x2c
90003cdc:	46bd      	mov	sp, r7
90003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ce2:	4770      	bx	lr

90003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003ce4:	b480      	push	{r7}
90003ce6:	b089      	sub	sp, #36	@ 0x24
90003ce8:	af00      	add	r7, sp, #0
90003cea:	6078      	str	r0, [r7, #4]
90003cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003cee:	2300      	movs	r3, #0
90003cf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003cf2:	4b89      	ldr	r3, [pc, #548]	@ (90003f18 <HAL_GPIO_Init+0x234>)
90003cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003cf6:	e194      	b.n	90004022 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003cf8:	683b      	ldr	r3, [r7, #0]
90003cfa:	681a      	ldr	r2, [r3, #0]
90003cfc:	2101      	movs	r1, #1
90003cfe:	69fb      	ldr	r3, [r7, #28]
90003d00:	fa01 f303 	lsl.w	r3, r1, r3
90003d04:	4013      	ands	r3, r2
90003d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003d08:	693b      	ldr	r3, [r7, #16]
90003d0a:	2b00      	cmp	r3, #0
90003d0c:	f000 8186 	beq.w	9000401c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003d10:	683b      	ldr	r3, [r7, #0]
90003d12:	685b      	ldr	r3, [r3, #4]
90003d14:	f003 0303 	and.w	r3, r3, #3
90003d18:	2b01      	cmp	r3, #1
90003d1a:	d005      	beq.n	90003d28 <HAL_GPIO_Init+0x44>
90003d1c:	683b      	ldr	r3, [r7, #0]
90003d1e:	685b      	ldr	r3, [r3, #4]
90003d20:	f003 0303 	and.w	r3, r3, #3
90003d24:	2b02      	cmp	r3, #2
90003d26:	d130      	bne.n	90003d8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003d28:	687b      	ldr	r3, [r7, #4]
90003d2a:	689b      	ldr	r3, [r3, #8]
90003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003d2e:	69fb      	ldr	r3, [r7, #28]
90003d30:	005b      	lsls	r3, r3, #1
90003d32:	2203      	movs	r2, #3
90003d34:	fa02 f303 	lsl.w	r3, r2, r3
90003d38:	43db      	mvns	r3, r3
90003d3a:	69ba      	ldr	r2, [r7, #24]
90003d3c:	4013      	ands	r3, r2
90003d3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003d40:	683b      	ldr	r3, [r7, #0]
90003d42:	68da      	ldr	r2, [r3, #12]
90003d44:	69fb      	ldr	r3, [r7, #28]
90003d46:	005b      	lsls	r3, r3, #1
90003d48:	fa02 f303 	lsl.w	r3, r2, r3
90003d4c:	69ba      	ldr	r2, [r7, #24]
90003d4e:	4313      	orrs	r3, r2
90003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003d52:	687b      	ldr	r3, [r7, #4]
90003d54:	69ba      	ldr	r2, [r7, #24]
90003d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003d58:	687b      	ldr	r3, [r7, #4]
90003d5a:	685b      	ldr	r3, [r3, #4]
90003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003d5e:	2201      	movs	r2, #1
90003d60:	69fb      	ldr	r3, [r7, #28]
90003d62:	fa02 f303 	lsl.w	r3, r2, r3
90003d66:	43db      	mvns	r3, r3
90003d68:	69ba      	ldr	r2, [r7, #24]
90003d6a:	4013      	ands	r3, r2
90003d6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003d6e:	683b      	ldr	r3, [r7, #0]
90003d70:	685b      	ldr	r3, [r3, #4]
90003d72:	091b      	lsrs	r3, r3, #4
90003d74:	f003 0201 	and.w	r2, r3, #1
90003d78:	69fb      	ldr	r3, [r7, #28]
90003d7a:	fa02 f303 	lsl.w	r3, r2, r3
90003d7e:	69ba      	ldr	r2, [r7, #24]
90003d80:	4313      	orrs	r3, r2
90003d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003d84:	687b      	ldr	r3, [r7, #4]
90003d86:	69ba      	ldr	r2, [r7, #24]
90003d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003d8a:	683b      	ldr	r3, [r7, #0]
90003d8c:	685b      	ldr	r3, [r3, #4]
90003d8e:	f003 0303 	and.w	r3, r3, #3
90003d92:	2b03      	cmp	r3, #3
90003d94:	d017      	beq.n	90003dc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003d96:	687b      	ldr	r3, [r7, #4]
90003d98:	68db      	ldr	r3, [r3, #12]
90003d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003d9c:	69fb      	ldr	r3, [r7, #28]
90003d9e:	005b      	lsls	r3, r3, #1
90003da0:	2203      	movs	r2, #3
90003da2:	fa02 f303 	lsl.w	r3, r2, r3
90003da6:	43db      	mvns	r3, r3
90003da8:	69ba      	ldr	r2, [r7, #24]
90003daa:	4013      	ands	r3, r2
90003dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003dae:	683b      	ldr	r3, [r7, #0]
90003db0:	689a      	ldr	r2, [r3, #8]
90003db2:	69fb      	ldr	r3, [r7, #28]
90003db4:	005b      	lsls	r3, r3, #1
90003db6:	fa02 f303 	lsl.w	r3, r2, r3
90003dba:	69ba      	ldr	r2, [r7, #24]
90003dbc:	4313      	orrs	r3, r2
90003dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003dc0:	687b      	ldr	r3, [r7, #4]
90003dc2:	69ba      	ldr	r2, [r7, #24]
90003dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003dc6:	683b      	ldr	r3, [r7, #0]
90003dc8:	685b      	ldr	r3, [r3, #4]
90003dca:	f003 0303 	and.w	r3, r3, #3
90003dce:	2b02      	cmp	r3, #2
90003dd0:	d123      	bne.n	90003e1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003dd2:	69fb      	ldr	r3, [r7, #28]
90003dd4:	08da      	lsrs	r2, r3, #3
90003dd6:	687b      	ldr	r3, [r7, #4]
90003dd8:	3208      	adds	r2, #8
90003dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003de0:	69fb      	ldr	r3, [r7, #28]
90003de2:	f003 0307 	and.w	r3, r3, #7
90003de6:	009b      	lsls	r3, r3, #2
90003de8:	220f      	movs	r2, #15
90003dea:	fa02 f303 	lsl.w	r3, r2, r3
90003dee:	43db      	mvns	r3, r3
90003df0:	69ba      	ldr	r2, [r7, #24]
90003df2:	4013      	ands	r3, r2
90003df4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003df6:	683b      	ldr	r3, [r7, #0]
90003df8:	691a      	ldr	r2, [r3, #16]
90003dfa:	69fb      	ldr	r3, [r7, #28]
90003dfc:	f003 0307 	and.w	r3, r3, #7
90003e00:	009b      	lsls	r3, r3, #2
90003e02:	fa02 f303 	lsl.w	r3, r2, r3
90003e06:	69ba      	ldr	r2, [r7, #24]
90003e08:	4313      	orrs	r3, r2
90003e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003e0c:	69fb      	ldr	r3, [r7, #28]
90003e0e:	08da      	lsrs	r2, r3, #3
90003e10:	687b      	ldr	r3, [r7, #4]
90003e12:	3208      	adds	r2, #8
90003e14:	69b9      	ldr	r1, [r7, #24]
90003e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003e1a:	687b      	ldr	r3, [r7, #4]
90003e1c:	681b      	ldr	r3, [r3, #0]
90003e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003e20:	69fb      	ldr	r3, [r7, #28]
90003e22:	005b      	lsls	r3, r3, #1
90003e24:	2203      	movs	r2, #3
90003e26:	fa02 f303 	lsl.w	r3, r2, r3
90003e2a:	43db      	mvns	r3, r3
90003e2c:	69ba      	ldr	r2, [r7, #24]
90003e2e:	4013      	ands	r3, r2
90003e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003e32:	683b      	ldr	r3, [r7, #0]
90003e34:	685b      	ldr	r3, [r3, #4]
90003e36:	f003 0203 	and.w	r2, r3, #3
90003e3a:	69fb      	ldr	r3, [r7, #28]
90003e3c:	005b      	lsls	r3, r3, #1
90003e3e:	fa02 f303 	lsl.w	r3, r2, r3
90003e42:	69ba      	ldr	r2, [r7, #24]
90003e44:	4313      	orrs	r3, r2
90003e46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003e48:	687b      	ldr	r3, [r7, #4]
90003e4a:	69ba      	ldr	r2, [r7, #24]
90003e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003e4e:	683b      	ldr	r3, [r7, #0]
90003e50:	685b      	ldr	r3, [r3, #4]
90003e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003e56:	2b00      	cmp	r3, #0
90003e58:	f000 80e0 	beq.w	9000401c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003e5c:	4b2f      	ldr	r3, [pc, #188]	@ (90003f1c <HAL_GPIO_Init+0x238>)
90003e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003e62:	4a2e      	ldr	r2, [pc, #184]	@ (90003f1c <HAL_GPIO_Init+0x238>)
90003e64:	f043 0302 	orr.w	r3, r3, #2
90003e68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003e6c:	4b2b      	ldr	r3, [pc, #172]	@ (90003f1c <HAL_GPIO_Init+0x238>)
90003e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003e72:	f003 0302 	and.w	r3, r3, #2
90003e76:	60fb      	str	r3, [r7, #12]
90003e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003e7a:	4a29      	ldr	r2, [pc, #164]	@ (90003f20 <HAL_GPIO_Init+0x23c>)
90003e7c:	69fb      	ldr	r3, [r7, #28]
90003e7e:	089b      	lsrs	r3, r3, #2
90003e80:	3302      	adds	r3, #2
90003e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003e88:	69fb      	ldr	r3, [r7, #28]
90003e8a:	f003 0303 	and.w	r3, r3, #3
90003e8e:	009b      	lsls	r3, r3, #2
90003e90:	220f      	movs	r2, #15
90003e92:	fa02 f303 	lsl.w	r3, r2, r3
90003e96:	43db      	mvns	r3, r3
90003e98:	69ba      	ldr	r2, [r7, #24]
90003e9a:	4013      	ands	r3, r2
90003e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003e9e:	687b      	ldr	r3, [r7, #4]
90003ea0:	4a20      	ldr	r2, [pc, #128]	@ (90003f24 <HAL_GPIO_Init+0x240>)
90003ea2:	4293      	cmp	r3, r2
90003ea4:	d052      	beq.n	90003f4c <HAL_GPIO_Init+0x268>
90003ea6:	687b      	ldr	r3, [r7, #4]
90003ea8:	4a1f      	ldr	r2, [pc, #124]	@ (90003f28 <HAL_GPIO_Init+0x244>)
90003eaa:	4293      	cmp	r3, r2
90003eac:	d031      	beq.n	90003f12 <HAL_GPIO_Init+0x22e>
90003eae:	687b      	ldr	r3, [r7, #4]
90003eb0:	4a1e      	ldr	r2, [pc, #120]	@ (90003f2c <HAL_GPIO_Init+0x248>)
90003eb2:	4293      	cmp	r3, r2
90003eb4:	d02b      	beq.n	90003f0e <HAL_GPIO_Init+0x22a>
90003eb6:	687b      	ldr	r3, [r7, #4]
90003eb8:	4a1d      	ldr	r2, [pc, #116]	@ (90003f30 <HAL_GPIO_Init+0x24c>)
90003eba:	4293      	cmp	r3, r2
90003ebc:	d025      	beq.n	90003f0a <HAL_GPIO_Init+0x226>
90003ebe:	687b      	ldr	r3, [r7, #4]
90003ec0:	4a1c      	ldr	r2, [pc, #112]	@ (90003f34 <HAL_GPIO_Init+0x250>)
90003ec2:	4293      	cmp	r3, r2
90003ec4:	d01f      	beq.n	90003f06 <HAL_GPIO_Init+0x222>
90003ec6:	687b      	ldr	r3, [r7, #4]
90003ec8:	4a1b      	ldr	r2, [pc, #108]	@ (90003f38 <HAL_GPIO_Init+0x254>)
90003eca:	4293      	cmp	r3, r2
90003ecc:	d019      	beq.n	90003f02 <HAL_GPIO_Init+0x21e>
90003ece:	687b      	ldr	r3, [r7, #4]
90003ed0:	4a1a      	ldr	r2, [pc, #104]	@ (90003f3c <HAL_GPIO_Init+0x258>)
90003ed2:	4293      	cmp	r3, r2
90003ed4:	d013      	beq.n	90003efe <HAL_GPIO_Init+0x21a>
90003ed6:	687b      	ldr	r3, [r7, #4]
90003ed8:	4a19      	ldr	r2, [pc, #100]	@ (90003f40 <HAL_GPIO_Init+0x25c>)
90003eda:	4293      	cmp	r3, r2
90003edc:	d00d      	beq.n	90003efa <HAL_GPIO_Init+0x216>
90003ede:	687b      	ldr	r3, [r7, #4]
90003ee0:	4a18      	ldr	r2, [pc, #96]	@ (90003f44 <HAL_GPIO_Init+0x260>)
90003ee2:	4293      	cmp	r3, r2
90003ee4:	d007      	beq.n	90003ef6 <HAL_GPIO_Init+0x212>
90003ee6:	687b      	ldr	r3, [r7, #4]
90003ee8:	4a17      	ldr	r2, [pc, #92]	@ (90003f48 <HAL_GPIO_Init+0x264>)
90003eea:	4293      	cmp	r3, r2
90003eec:	d101      	bne.n	90003ef2 <HAL_GPIO_Init+0x20e>
90003eee:	2309      	movs	r3, #9
90003ef0:	e02d      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003ef2:	230a      	movs	r3, #10
90003ef4:	e02b      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003ef6:	2308      	movs	r3, #8
90003ef8:	e029      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003efa:	2307      	movs	r3, #7
90003efc:	e027      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003efe:	2306      	movs	r3, #6
90003f00:	e025      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003f02:	2305      	movs	r3, #5
90003f04:	e023      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003f06:	2304      	movs	r3, #4
90003f08:	e021      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003f0a:	2303      	movs	r3, #3
90003f0c:	e01f      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003f0e:	2302      	movs	r3, #2
90003f10:	e01d      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003f12:	2301      	movs	r3, #1
90003f14:	e01b      	b.n	90003f4e <HAL_GPIO_Init+0x26a>
90003f16:	bf00      	nop
90003f18:	58000080 	.word	0x58000080
90003f1c:	58024400 	.word	0x58024400
90003f20:	58000400 	.word	0x58000400
90003f24:	58020000 	.word	0x58020000
90003f28:	58020400 	.word	0x58020400
90003f2c:	58020800 	.word	0x58020800
90003f30:	58020c00 	.word	0x58020c00
90003f34:	58021000 	.word	0x58021000
90003f38:	58021400 	.word	0x58021400
90003f3c:	58021800 	.word	0x58021800
90003f40:	58021c00 	.word	0x58021c00
90003f44:	58022000 	.word	0x58022000
90003f48:	58022400 	.word	0x58022400
90003f4c:	2300      	movs	r3, #0
90003f4e:	69fa      	ldr	r2, [r7, #28]
90003f50:	f002 0203 	and.w	r2, r2, #3
90003f54:	0092      	lsls	r2, r2, #2
90003f56:	4093      	lsls	r3, r2
90003f58:	69ba      	ldr	r2, [r7, #24]
90003f5a:	4313      	orrs	r3, r2
90003f5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003f5e:	4938      	ldr	r1, [pc, #224]	@ (90004040 <HAL_GPIO_Init+0x35c>)
90003f60:	69fb      	ldr	r3, [r7, #28]
90003f62:	089b      	lsrs	r3, r3, #2
90003f64:	3302      	adds	r3, #2
90003f66:	69ba      	ldr	r2, [r7, #24]
90003f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003f70:	681b      	ldr	r3, [r3, #0]
90003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f74:	693b      	ldr	r3, [r7, #16]
90003f76:	43db      	mvns	r3, r3
90003f78:	69ba      	ldr	r2, [r7, #24]
90003f7a:	4013      	ands	r3, r2
90003f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003f7e:	683b      	ldr	r3, [r7, #0]
90003f80:	685b      	ldr	r3, [r3, #4]
90003f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003f86:	2b00      	cmp	r3, #0
90003f88:	d003      	beq.n	90003f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003f8a:	69ba      	ldr	r2, [r7, #24]
90003f8c:	693b      	ldr	r3, [r7, #16]
90003f8e:	4313      	orrs	r3, r2
90003f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003f96:	69bb      	ldr	r3, [r7, #24]
90003f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003f9e:	685b      	ldr	r3, [r3, #4]
90003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003fa2:	693b      	ldr	r3, [r7, #16]
90003fa4:	43db      	mvns	r3, r3
90003fa6:	69ba      	ldr	r2, [r7, #24]
90003fa8:	4013      	ands	r3, r2
90003faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003fac:	683b      	ldr	r3, [r7, #0]
90003fae:	685b      	ldr	r3, [r3, #4]
90003fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003fb4:	2b00      	cmp	r3, #0
90003fb6:	d003      	beq.n	90003fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003fb8:	69ba      	ldr	r2, [r7, #24]
90003fba:	693b      	ldr	r3, [r7, #16]
90003fbc:	4313      	orrs	r3, r2
90003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003fc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003fc4:	69bb      	ldr	r3, [r7, #24]
90003fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003fc8:	697b      	ldr	r3, [r7, #20]
90003fca:	685b      	ldr	r3, [r3, #4]
90003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003fce:	693b      	ldr	r3, [r7, #16]
90003fd0:	43db      	mvns	r3, r3
90003fd2:	69ba      	ldr	r2, [r7, #24]
90003fd4:	4013      	ands	r3, r2
90003fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003fd8:	683b      	ldr	r3, [r7, #0]
90003fda:	685b      	ldr	r3, [r3, #4]
90003fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003fe0:	2b00      	cmp	r3, #0
90003fe2:	d003      	beq.n	90003fec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003fe4:	69ba      	ldr	r2, [r7, #24]
90003fe6:	693b      	ldr	r3, [r7, #16]
90003fe8:	4313      	orrs	r3, r2
90003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003fec:	697b      	ldr	r3, [r7, #20]
90003fee:	69ba      	ldr	r2, [r7, #24]
90003ff0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003ff2:	697b      	ldr	r3, [r7, #20]
90003ff4:	681b      	ldr	r3, [r3, #0]
90003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003ff8:	693b      	ldr	r3, [r7, #16]
90003ffa:	43db      	mvns	r3, r3
90003ffc:	69ba      	ldr	r2, [r7, #24]
90003ffe:	4013      	ands	r3, r2
90004000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90004002:	683b      	ldr	r3, [r7, #0]
90004004:	685b      	ldr	r3, [r3, #4]
90004006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
9000400a:	2b00      	cmp	r3, #0
9000400c:	d003      	beq.n	90004016 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
9000400e:	69ba      	ldr	r2, [r7, #24]
90004010:	693b      	ldr	r3, [r7, #16]
90004012:	4313      	orrs	r3, r2
90004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90004016:	697b      	ldr	r3, [r7, #20]
90004018:	69ba      	ldr	r2, [r7, #24]
9000401a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
9000401c:	69fb      	ldr	r3, [r7, #28]
9000401e:	3301      	adds	r3, #1
90004020:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90004022:	683b      	ldr	r3, [r7, #0]
90004024:	681a      	ldr	r2, [r3, #0]
90004026:	69fb      	ldr	r3, [r7, #28]
90004028:	fa22 f303 	lsr.w	r3, r2, r3
9000402c:	2b00      	cmp	r3, #0
9000402e:	f47f ae63 	bne.w	90003cf8 <HAL_GPIO_Init+0x14>
  }
}
90004032:	bf00      	nop
90004034:	bf00      	nop
90004036:	3724      	adds	r7, #36	@ 0x24
90004038:	46bd      	mov	sp, r7
9000403a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000403e:	4770      	bx	lr
90004040:	58000400 	.word	0x58000400

90004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90004044:	b480      	push	{r7}
90004046:	b085      	sub	sp, #20
90004048:	af00      	add	r7, sp, #0
9000404a:	6078      	str	r0, [r7, #4]
9000404c:	460b      	mov	r3, r1
9000404e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90004050:	687b      	ldr	r3, [r7, #4]
90004052:	691a      	ldr	r2, [r3, #16]
90004054:	887b      	ldrh	r3, [r7, #2]
90004056:	4013      	ands	r3, r2
90004058:	2b00      	cmp	r3, #0
9000405a:	d002      	beq.n	90004062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
9000405c:	2301      	movs	r3, #1
9000405e:	73fb      	strb	r3, [r7, #15]
90004060:	e001      	b.n	90004066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90004062:	2300      	movs	r3, #0
90004064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90004066:	7bfb      	ldrb	r3, [r7, #15]
}
90004068:	4618      	mov	r0, r3
9000406a:	3714      	adds	r7, #20
9000406c:	46bd      	mov	sp, r7
9000406e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004072:	4770      	bx	lr

90004074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90004074:	b480      	push	{r7}
90004076:	b083      	sub	sp, #12
90004078:	af00      	add	r7, sp, #0
9000407a:	6078      	str	r0, [r7, #4]
9000407c:	460b      	mov	r3, r1
9000407e:	807b      	strh	r3, [r7, #2]
90004080:	4613      	mov	r3, r2
90004082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90004084:	787b      	ldrb	r3, [r7, #1]
90004086:	2b00      	cmp	r3, #0
90004088:	d003      	beq.n	90004092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
9000408a:	887a      	ldrh	r2, [r7, #2]
9000408c:	687b      	ldr	r3, [r7, #4]
9000408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90004090:	e003      	b.n	9000409a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90004092:	887b      	ldrh	r3, [r7, #2]
90004094:	041a      	lsls	r2, r3, #16
90004096:	687b      	ldr	r3, [r7, #4]
90004098:	619a      	str	r2, [r3, #24]
}
9000409a:	bf00      	nop
9000409c:	370c      	adds	r7, #12
9000409e:	46bd      	mov	sp, r7
900040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900040a4:	4770      	bx	lr

900040a6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900040a6:	b580      	push	{r7, lr}
900040a8:	b086      	sub	sp, #24
900040aa:	af00      	add	r7, sp, #0
900040ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900040ae:	687b      	ldr	r3, [r7, #4]
900040b0:	681b      	ldr	r3, [r3, #0]
900040b2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
900040b4:	693b      	ldr	r3, [r7, #16]
900040b6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
900040b8:	687b      	ldr	r3, [r7, #4]
900040ba:	681b      	ldr	r3, [r3, #0]
900040bc:	4618      	mov	r0, r3
900040be:	f007 f9a5 	bl	9000b40c <USB_GetMode>
900040c2:	4603      	mov	r3, r0
900040c4:	2b01      	cmp	r3, #1
900040c6:	f040 80fb 	bne.w	900042c0 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
900040ca:	687b      	ldr	r3, [r7, #4]
900040cc:	681b      	ldr	r3, [r3, #0]
900040ce:	4618      	mov	r0, r3
900040d0:	f007 f968 	bl	9000b3a4 <USB_ReadInterrupts>
900040d4:	4603      	mov	r3, r0
900040d6:	2b00      	cmp	r3, #0
900040d8:	f000 80f1 	beq.w	900042be <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
900040dc:	687b      	ldr	r3, [r7, #4]
900040de:	681b      	ldr	r3, [r3, #0]
900040e0:	4618      	mov	r0, r3
900040e2:	f007 f95f 	bl	9000b3a4 <USB_ReadInterrupts>
900040e6:	4603      	mov	r3, r0
900040e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
900040ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900040f0:	d104      	bne.n	900040fc <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
900040f2:	687b      	ldr	r3, [r7, #4]
900040f4:	681b      	ldr	r3, [r3, #0]
900040f6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
900040fa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
900040fc:	687b      	ldr	r3, [r7, #4]
900040fe:	681b      	ldr	r3, [r3, #0]
90004100:	4618      	mov	r0, r3
90004102:	f007 f94f 	bl	9000b3a4 <USB_ReadInterrupts>
90004106:	4603      	mov	r3, r0
90004108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
9000410c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90004110:	d104      	bne.n	9000411c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90004112:	687b      	ldr	r3, [r7, #4]
90004114:	681b      	ldr	r3, [r3, #0]
90004116:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
9000411a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
9000411c:	687b      	ldr	r3, [r7, #4]
9000411e:	681b      	ldr	r3, [r3, #0]
90004120:	4618      	mov	r0, r3
90004122:	f007 f93f 	bl	9000b3a4 <USB_ReadInterrupts>
90004126:	4603      	mov	r3, r0
90004128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
9000412c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90004130:	d104      	bne.n	9000413c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90004132:	687b      	ldr	r3, [r7, #4]
90004134:	681b      	ldr	r3, [r3, #0]
90004136:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
9000413a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
9000413c:	687b      	ldr	r3, [r7, #4]
9000413e:	681b      	ldr	r3, [r3, #0]
90004140:	4618      	mov	r0, r3
90004142:	f007 f92f 	bl	9000b3a4 <USB_ReadInterrupts>
90004146:	4603      	mov	r3, r0
90004148:	f003 0302 	and.w	r3, r3, #2
9000414c:	2b02      	cmp	r3, #2
9000414e:	d103      	bne.n	90004158 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90004150:	687b      	ldr	r3, [r7, #4]
90004152:	681b      	ldr	r3, [r3, #0]
90004154:	2202      	movs	r2, #2
90004156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90004158:	687b      	ldr	r3, [r7, #4]
9000415a:	681b      	ldr	r3, [r3, #0]
9000415c:	4618      	mov	r0, r3
9000415e:	f007 f921 	bl	9000b3a4 <USB_ReadInterrupts>
90004162:	4603      	mov	r3, r0
90004164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90004168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000416c:	d120      	bne.n	900041b0 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000416e:	687b      	ldr	r3, [r7, #4]
90004170:	681b      	ldr	r3, [r3, #0]
90004172:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90004176:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90004178:	68fb      	ldr	r3, [r7, #12]
9000417a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000417e:	681b      	ldr	r3, [r3, #0]
90004180:	f003 0301 	and.w	r3, r3, #1
90004184:	2b00      	cmp	r3, #0
90004186:	d113      	bne.n	900041b0 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90004188:	2110      	movs	r1, #16
9000418a:	6938      	ldr	r0, [r7, #16]
9000418c:	f007 f852 	bl	9000b234 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90004190:	6938      	ldr	r0, [r7, #16]
90004192:	f007 f881 	bl	9000b298 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90004196:	687b      	ldr	r3, [r7, #4]
90004198:	7a5b      	ldrb	r3, [r3, #9]
9000419a:	2b02      	cmp	r3, #2
9000419c:	d105      	bne.n	900041aa <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000419e:	687b      	ldr	r3, [r7, #4]
900041a0:	681b      	ldr	r3, [r3, #0]
900041a2:	2101      	movs	r1, #1
900041a4:	4618      	mov	r0, r3
900041a6:	f007 f93f 	bl	9000b428 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
900041aa:	6878      	ldr	r0, [r7, #4]
900041ac:	f7fd f80a 	bl	900011c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
900041b0:	687b      	ldr	r3, [r7, #4]
900041b2:	681b      	ldr	r3, [r3, #0]
900041b4:	4618      	mov	r0, r3
900041b6:	f007 f8f5 	bl	9000b3a4 <USB_ReadInterrupts>
900041ba:	4603      	mov	r3, r0
900041bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
900041c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900041c4:	d102      	bne.n	900041cc <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
900041c6:	6878      	ldr	r0, [r7, #4]
900041c8:	f001 fca1 	bl	90005b0e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
900041cc:	687b      	ldr	r3, [r7, #4]
900041ce:	681b      	ldr	r3, [r3, #0]
900041d0:	4618      	mov	r0, r3
900041d2:	f007 f8e7 	bl	9000b3a4 <USB_ReadInterrupts>
900041d6:	4603      	mov	r3, r0
900041d8:	f003 0308 	and.w	r3, r3, #8
900041dc:	2b08      	cmp	r3, #8
900041de:	d106      	bne.n	900041ee <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
900041e0:	6878      	ldr	r0, [r7, #4]
900041e2:	f7fc ffd3 	bl	9000118c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
900041e6:	687b      	ldr	r3, [r7, #4]
900041e8:	681b      	ldr	r3, [r3, #0]
900041ea:	2208      	movs	r2, #8
900041ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
900041ee:	687b      	ldr	r3, [r7, #4]
900041f0:	681b      	ldr	r3, [r3, #0]
900041f2:	4618      	mov	r0, r3
900041f4:	f007 f8d6 	bl	9000b3a4 <USB_ReadInterrupts>
900041f8:	4603      	mov	r3, r0
900041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900041fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90004202:	d139      	bne.n	90004278 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90004204:	687b      	ldr	r3, [r7, #4]
90004206:	681b      	ldr	r3, [r3, #0]
90004208:	4618      	mov	r0, r3
9000420a:	f007 f94a 	bl	9000b4a2 <USB_HC_ReadInterrupt>
9000420e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004210:	2300      	movs	r3, #0
90004212:	617b      	str	r3, [r7, #20]
90004214:	e025      	b.n	90004262 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90004216:	697b      	ldr	r3, [r7, #20]
90004218:	f003 030f 	and.w	r3, r3, #15
9000421c:	68ba      	ldr	r2, [r7, #8]
9000421e:	fa22 f303 	lsr.w	r3, r2, r3
90004222:	f003 0301 	and.w	r3, r3, #1
90004226:	2b00      	cmp	r3, #0
90004228:	d018      	beq.n	9000425c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
9000422a:	697b      	ldr	r3, [r7, #20]
9000422c:	015a      	lsls	r2, r3, #5
9000422e:	68fb      	ldr	r3, [r7, #12]
90004230:	4413      	add	r3, r2
90004232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004236:	681b      	ldr	r3, [r3, #0]
90004238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000423c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90004240:	d106      	bne.n	90004250 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90004242:	697b      	ldr	r3, [r7, #20]
90004244:	b2db      	uxtb	r3, r3
90004246:	4619      	mov	r1, r3
90004248:	6878      	ldr	r0, [r7, #4]
9000424a:	f000 f859 	bl	90004300 <HCD_HC_IN_IRQHandler>
9000424e:	e005      	b.n	9000425c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90004250:	697b      	ldr	r3, [r7, #20]
90004252:	b2db      	uxtb	r3, r3
90004254:	4619      	mov	r1, r3
90004256:	6878      	ldr	r0, [r7, #4]
90004258:	f000 febb 	bl	90004fd2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000425c:	697b      	ldr	r3, [r7, #20]
9000425e:	3301      	adds	r3, #1
90004260:	617b      	str	r3, [r7, #20]
90004262:	687b      	ldr	r3, [r7, #4]
90004264:	795b      	ldrb	r3, [r3, #5]
90004266:	461a      	mov	r2, r3
90004268:	697b      	ldr	r3, [r7, #20]
9000426a:	4293      	cmp	r3, r2
9000426c:	d3d3      	bcc.n	90004216 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000426e:	687b      	ldr	r3, [r7, #4]
90004270:	681b      	ldr	r3, [r3, #0]
90004272:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90004276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90004278:	687b      	ldr	r3, [r7, #4]
9000427a:	681b      	ldr	r3, [r3, #0]
9000427c:	4618      	mov	r0, r3
9000427e:	f007 f891 	bl	9000b3a4 <USB_ReadInterrupts>
90004282:	4603      	mov	r3, r0
90004284:	f003 0310 	and.w	r3, r3, #16
90004288:	2b10      	cmp	r3, #16
9000428a:	d101      	bne.n	90004290 <HAL_HCD_IRQHandler+0x1ea>
9000428c:	2301      	movs	r3, #1
9000428e:	e000      	b.n	90004292 <HAL_HCD_IRQHandler+0x1ec>
90004290:	2300      	movs	r3, #0
90004292:	2b00      	cmp	r3, #0
90004294:	d014      	beq.n	900042c0 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004296:	687b      	ldr	r3, [r7, #4]
90004298:	681b      	ldr	r3, [r3, #0]
9000429a:	699a      	ldr	r2, [r3, #24]
9000429c:	687b      	ldr	r3, [r7, #4]
9000429e:	681b      	ldr	r3, [r3, #0]
900042a0:	f022 0210 	bic.w	r2, r2, #16
900042a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
900042a6:	6878      	ldr	r0, [r7, #4]
900042a8:	f001 fb52 	bl	90005950 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900042ac:	687b      	ldr	r3, [r7, #4]
900042ae:	681b      	ldr	r3, [r3, #0]
900042b0:	699a      	ldr	r2, [r3, #24]
900042b2:	687b      	ldr	r3, [r7, #4]
900042b4:	681b      	ldr	r3, [r3, #0]
900042b6:	f042 0210 	orr.w	r2, r2, #16
900042ba:	619a      	str	r2, [r3, #24]
900042bc:	e000      	b.n	900042c0 <HAL_HCD_IRQHandler+0x21a>
      return;
900042be:	bf00      	nop
    }
  }
}
900042c0:	3718      	adds	r7, #24
900042c2:	46bd      	mov	sp, r7
900042c4:	bd80      	pop	{r7, pc}

900042c6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
900042c6:	b580      	push	{r7, lr}
900042c8:	b082      	sub	sp, #8
900042ca:	af00      	add	r7, sp, #0
900042cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
900042ce:	687b      	ldr	r3, [r7, #4]
900042d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
900042d4:	2b01      	cmp	r3, #1
900042d6:	d101      	bne.n	900042dc <HAL_HCD_Stop+0x16>
900042d8:	2302      	movs	r3, #2
900042da:	e00d      	b.n	900042f8 <HAL_HCD_Stop+0x32>
900042dc:	687b      	ldr	r3, [r7, #4]
900042de:	2201      	movs	r2, #1
900042e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
900042e4:	687b      	ldr	r3, [r7, #4]
900042e6:	681b      	ldr	r3, [r3, #0]
900042e8:	4618      	mov	r0, r3
900042ea:	f007 fa0b 	bl	9000b704 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
900042ee:	687b      	ldr	r3, [r7, #4]
900042f0:	2200      	movs	r2, #0
900042f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
900042f6:	2300      	movs	r3, #0
}
900042f8:	4618      	mov	r0, r3
900042fa:	3708      	adds	r7, #8
900042fc:	46bd      	mov	sp, r7
900042fe:	bd80      	pop	{r7, pc}

90004300 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004300:	b580      	push	{r7, lr}
90004302:	b086      	sub	sp, #24
90004304:	af00      	add	r7, sp, #0
90004306:	6078      	str	r0, [r7, #4]
90004308:	460b      	mov	r3, r1
9000430a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000430c:	687b      	ldr	r3, [r7, #4]
9000430e:	681b      	ldr	r3, [r3, #0]
90004310:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004312:	697b      	ldr	r3, [r7, #20]
90004314:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004316:	687b      	ldr	r3, [r7, #4]
90004318:	681b      	ldr	r3, [r3, #0]
9000431a:	78fa      	ldrb	r2, [r7, #3]
9000431c:	4611      	mov	r1, r2
9000431e:	4618      	mov	r0, r3
90004320:	f007 f853 	bl	9000b3ca <USB_ReadChInterrupts>
90004324:	4603      	mov	r3, r0
90004326:	f003 0304 	and.w	r3, r3, #4
9000432a:	2b04      	cmp	r3, #4
9000432c:	d11a      	bne.n	90004364 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
9000432e:	78fb      	ldrb	r3, [r7, #3]
90004330:	015a      	lsls	r2, r3, #5
90004332:	693b      	ldr	r3, [r7, #16]
90004334:	4413      	add	r3, r2
90004336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000433a:	461a      	mov	r2, r3
9000433c:	2304      	movs	r3, #4
9000433e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004340:	78fa      	ldrb	r2, [r7, #3]
90004342:	6879      	ldr	r1, [r7, #4]
90004344:	4613      	mov	r3, r2
90004346:	011b      	lsls	r3, r3, #4
90004348:	1a9b      	subs	r3, r3, r2
9000434a:	009b      	lsls	r3, r3, #2
9000434c:	440b      	add	r3, r1
9000434e:	334d      	adds	r3, #77	@ 0x4d
90004350:	2207      	movs	r2, #7
90004352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004354:	687b      	ldr	r3, [r7, #4]
90004356:	681b      	ldr	r3, [r3, #0]
90004358:	78fa      	ldrb	r2, [r7, #3]
9000435a:	4611      	mov	r1, r2
9000435c:	4618      	mov	r0, r3
9000435e:	f007 f8b1 	bl	9000b4c4 <USB_HC_Halt>
90004362:	e09e      	b.n	900044a2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90004364:	687b      	ldr	r3, [r7, #4]
90004366:	681b      	ldr	r3, [r3, #0]
90004368:	78fa      	ldrb	r2, [r7, #3]
9000436a:	4611      	mov	r1, r2
9000436c:	4618      	mov	r0, r3
9000436e:	f007 f82c 	bl	9000b3ca <USB_ReadChInterrupts>
90004372:	4603      	mov	r3, r0
90004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90004378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000437c:	d11b      	bne.n	900043b6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
9000437e:	78fb      	ldrb	r3, [r7, #3]
90004380:	015a      	lsls	r2, r3, #5
90004382:	693b      	ldr	r3, [r7, #16]
90004384:	4413      	add	r3, r2
90004386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000438a:	461a      	mov	r2, r3
9000438c:	f44f 7380 	mov.w	r3, #256	@ 0x100
90004390:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
90004392:	78fa      	ldrb	r2, [r7, #3]
90004394:	6879      	ldr	r1, [r7, #4]
90004396:	4613      	mov	r3, r2
90004398:	011b      	lsls	r3, r3, #4
9000439a:	1a9b      	subs	r3, r3, r2
9000439c:	009b      	lsls	r3, r3, #2
9000439e:	440b      	add	r3, r1
900043a0:	334d      	adds	r3, #77	@ 0x4d
900043a2:	2208      	movs	r2, #8
900043a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900043a6:	687b      	ldr	r3, [r7, #4]
900043a8:	681b      	ldr	r3, [r3, #0]
900043aa:	78fa      	ldrb	r2, [r7, #3]
900043ac:	4611      	mov	r1, r2
900043ae:	4618      	mov	r0, r3
900043b0:	f007 f888 	bl	9000b4c4 <USB_HC_Halt>
900043b4:	e075      	b.n	900044a2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900043b6:	687b      	ldr	r3, [r7, #4]
900043b8:	681b      	ldr	r3, [r3, #0]
900043ba:	78fa      	ldrb	r2, [r7, #3]
900043bc:	4611      	mov	r1, r2
900043be:	4618      	mov	r0, r3
900043c0:	f007 f803 	bl	9000b3ca <USB_ReadChInterrupts>
900043c4:	4603      	mov	r3, r0
900043c6:	f003 0308 	and.w	r3, r3, #8
900043ca:	2b08      	cmp	r3, #8
900043cc:	d11a      	bne.n	90004404 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900043ce:	78fb      	ldrb	r3, [r7, #3]
900043d0:	015a      	lsls	r2, r3, #5
900043d2:	693b      	ldr	r3, [r7, #16]
900043d4:	4413      	add	r3, r2
900043d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043da:	461a      	mov	r2, r3
900043dc:	2308      	movs	r3, #8
900043de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900043e0:	78fa      	ldrb	r2, [r7, #3]
900043e2:	6879      	ldr	r1, [r7, #4]
900043e4:	4613      	mov	r3, r2
900043e6:	011b      	lsls	r3, r3, #4
900043e8:	1a9b      	subs	r3, r3, r2
900043ea:	009b      	lsls	r3, r3, #2
900043ec:	440b      	add	r3, r1
900043ee:	334d      	adds	r3, #77	@ 0x4d
900043f0:	2206      	movs	r2, #6
900043f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900043f4:	687b      	ldr	r3, [r7, #4]
900043f6:	681b      	ldr	r3, [r3, #0]
900043f8:	78fa      	ldrb	r2, [r7, #3]
900043fa:	4611      	mov	r1, r2
900043fc:	4618      	mov	r0, r3
900043fe:	f007 f861 	bl	9000b4c4 <USB_HC_Halt>
90004402:	e04e      	b.n	900044a2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004404:	687b      	ldr	r3, [r7, #4]
90004406:	681b      	ldr	r3, [r3, #0]
90004408:	78fa      	ldrb	r2, [r7, #3]
9000440a:	4611      	mov	r1, r2
9000440c:	4618      	mov	r0, r3
9000440e:	f006 ffdc 	bl	9000b3ca <USB_ReadChInterrupts>
90004412:	4603      	mov	r3, r0
90004414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000441c:	d11b      	bne.n	90004456 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
9000441e:	78fb      	ldrb	r3, [r7, #3]
90004420:	015a      	lsls	r2, r3, #5
90004422:	693b      	ldr	r3, [r7, #16]
90004424:	4413      	add	r3, r2
90004426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000442a:	461a      	mov	r2, r3
9000442c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90004430:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90004432:	78fa      	ldrb	r2, [r7, #3]
90004434:	6879      	ldr	r1, [r7, #4]
90004436:	4613      	mov	r3, r2
90004438:	011b      	lsls	r3, r3, #4
9000443a:	1a9b      	subs	r3, r3, r2
9000443c:	009b      	lsls	r3, r3, #2
9000443e:	440b      	add	r3, r1
90004440:	334d      	adds	r3, #77	@ 0x4d
90004442:	2209      	movs	r2, #9
90004444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004446:	687b      	ldr	r3, [r7, #4]
90004448:	681b      	ldr	r3, [r3, #0]
9000444a:	78fa      	ldrb	r2, [r7, #3]
9000444c:	4611      	mov	r1, r2
9000444e:	4618      	mov	r0, r3
90004450:	f007 f838 	bl	9000b4c4 <USB_HC_Halt>
90004454:	e025      	b.n	900044a2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004456:	687b      	ldr	r3, [r7, #4]
90004458:	681b      	ldr	r3, [r3, #0]
9000445a:	78fa      	ldrb	r2, [r7, #3]
9000445c:	4611      	mov	r1, r2
9000445e:	4618      	mov	r0, r3
90004460:	f006 ffb3 	bl	9000b3ca <USB_ReadChInterrupts>
90004464:	4603      	mov	r3, r0
90004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000446a:	2b80      	cmp	r3, #128	@ 0x80
9000446c:	d119      	bne.n	900044a2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000446e:	78fb      	ldrb	r3, [r7, #3]
90004470:	015a      	lsls	r2, r3, #5
90004472:	693b      	ldr	r3, [r7, #16]
90004474:	4413      	add	r3, r2
90004476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000447a:	461a      	mov	r2, r3
9000447c:	2380      	movs	r3, #128	@ 0x80
9000447e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004480:	78fa      	ldrb	r2, [r7, #3]
90004482:	6879      	ldr	r1, [r7, #4]
90004484:	4613      	mov	r3, r2
90004486:	011b      	lsls	r3, r3, #4
90004488:	1a9b      	subs	r3, r3, r2
9000448a:	009b      	lsls	r3, r3, #2
9000448c:	440b      	add	r3, r1
9000448e:	334d      	adds	r3, #77	@ 0x4d
90004490:	2207      	movs	r2, #7
90004492:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004494:	687b      	ldr	r3, [r7, #4]
90004496:	681b      	ldr	r3, [r3, #0]
90004498:	78fa      	ldrb	r2, [r7, #3]
9000449a:	4611      	mov	r1, r2
9000449c:	4618      	mov	r0, r3
9000449e:	f007 f811 	bl	9000b4c4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900044a2:	687b      	ldr	r3, [r7, #4]
900044a4:	681b      	ldr	r3, [r3, #0]
900044a6:	78fa      	ldrb	r2, [r7, #3]
900044a8:	4611      	mov	r1, r2
900044aa:	4618      	mov	r0, r3
900044ac:	f006 ff8d 	bl	9000b3ca <USB_ReadChInterrupts>
900044b0:	4603      	mov	r3, r0
900044b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900044b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900044ba:	d112      	bne.n	900044e2 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900044bc:	687b      	ldr	r3, [r7, #4]
900044be:	681b      	ldr	r3, [r3, #0]
900044c0:	78fa      	ldrb	r2, [r7, #3]
900044c2:	4611      	mov	r1, r2
900044c4:	4618      	mov	r0, r3
900044c6:	f006 fffd 	bl	9000b4c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900044ca:	78fb      	ldrb	r3, [r7, #3]
900044cc:	015a      	lsls	r2, r3, #5
900044ce:	693b      	ldr	r3, [r7, #16]
900044d0:	4413      	add	r3, r2
900044d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044d6:	461a      	mov	r2, r3
900044d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
900044dc:	6093      	str	r3, [r2, #8]
900044de:	f000 bd75 	b.w	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900044e2:	687b      	ldr	r3, [r7, #4]
900044e4:	681b      	ldr	r3, [r3, #0]
900044e6:	78fa      	ldrb	r2, [r7, #3]
900044e8:	4611      	mov	r1, r2
900044ea:	4618      	mov	r0, r3
900044ec:	f006 ff6d 	bl	9000b3ca <USB_ReadChInterrupts>
900044f0:	4603      	mov	r3, r0
900044f2:	f003 0301 	and.w	r3, r3, #1
900044f6:	2b01      	cmp	r3, #1
900044f8:	f040 8128 	bne.w	9000474c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900044fc:	78fb      	ldrb	r3, [r7, #3]
900044fe:	015a      	lsls	r2, r3, #5
90004500:	693b      	ldr	r3, [r7, #16]
90004502:	4413      	add	r3, r2
90004504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004508:	461a      	mov	r2, r3
9000450a:	2320      	movs	r3, #32
9000450c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
9000450e:	78fa      	ldrb	r2, [r7, #3]
90004510:	6879      	ldr	r1, [r7, #4]
90004512:	4613      	mov	r3, r2
90004514:	011b      	lsls	r3, r3, #4
90004516:	1a9b      	subs	r3, r3, r2
90004518:	009b      	lsls	r3, r3, #2
9000451a:	440b      	add	r3, r1
9000451c:	331b      	adds	r3, #27
9000451e:	781b      	ldrb	r3, [r3, #0]
90004520:	2b01      	cmp	r3, #1
90004522:	d119      	bne.n	90004558 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004524:	78fa      	ldrb	r2, [r7, #3]
90004526:	6879      	ldr	r1, [r7, #4]
90004528:	4613      	mov	r3, r2
9000452a:	011b      	lsls	r3, r3, #4
9000452c:	1a9b      	subs	r3, r3, r2
9000452e:	009b      	lsls	r3, r3, #2
90004530:	440b      	add	r3, r1
90004532:	331b      	adds	r3, #27
90004534:	2200      	movs	r2, #0
90004536:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004538:	78fb      	ldrb	r3, [r7, #3]
9000453a:	015a      	lsls	r2, r3, #5
9000453c:	693b      	ldr	r3, [r7, #16]
9000453e:	4413      	add	r3, r2
90004540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004544:	685b      	ldr	r3, [r3, #4]
90004546:	78fa      	ldrb	r2, [r7, #3]
90004548:	0151      	lsls	r1, r2, #5
9000454a:	693a      	ldr	r2, [r7, #16]
9000454c:	440a      	add	r2, r1
9000454e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004556:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90004558:	687b      	ldr	r3, [r7, #4]
9000455a:	799b      	ldrb	r3, [r3, #6]
9000455c:	2b00      	cmp	r3, #0
9000455e:	d01b      	beq.n	90004598 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004560:	78fa      	ldrb	r2, [r7, #3]
90004562:	6879      	ldr	r1, [r7, #4]
90004564:	4613      	mov	r3, r2
90004566:	011b      	lsls	r3, r3, #4
90004568:	1a9b      	subs	r3, r3, r2
9000456a:	009b      	lsls	r3, r3, #2
9000456c:	440b      	add	r3, r1
9000456e:	3330      	adds	r3, #48	@ 0x30
90004570:	6819      	ldr	r1, [r3, #0]
90004572:	78fb      	ldrb	r3, [r7, #3]
90004574:	015a      	lsls	r2, r3, #5
90004576:	693b      	ldr	r3, [r7, #16]
90004578:	4413      	add	r3, r2
9000457a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000457e:	691b      	ldr	r3, [r3, #16]
90004580:	f3c3 0312 	ubfx	r3, r3, #0, #19
90004584:	78fa      	ldrb	r2, [r7, #3]
90004586:	1ac9      	subs	r1, r1, r3
90004588:	6878      	ldr	r0, [r7, #4]
9000458a:	4613      	mov	r3, r2
9000458c:	011b      	lsls	r3, r3, #4
9000458e:	1a9b      	subs	r3, r3, r2
90004590:	009b      	lsls	r3, r3, #2
90004592:	4403      	add	r3, r0
90004594:	3338      	adds	r3, #56	@ 0x38
90004596:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004598:	78fa      	ldrb	r2, [r7, #3]
9000459a:	6879      	ldr	r1, [r7, #4]
9000459c:	4613      	mov	r3, r2
9000459e:	011b      	lsls	r3, r3, #4
900045a0:	1a9b      	subs	r3, r3, r2
900045a2:	009b      	lsls	r3, r3, #2
900045a4:	440b      	add	r3, r1
900045a6:	334d      	adds	r3, #77	@ 0x4d
900045a8:	2201      	movs	r2, #1
900045aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
900045ac:	78fa      	ldrb	r2, [r7, #3]
900045ae:	6879      	ldr	r1, [r7, #4]
900045b0:	4613      	mov	r3, r2
900045b2:	011b      	lsls	r3, r3, #4
900045b4:	1a9b      	subs	r3, r3, r2
900045b6:	009b      	lsls	r3, r3, #2
900045b8:	440b      	add	r3, r1
900045ba:	3344      	adds	r3, #68	@ 0x44
900045bc:	2200      	movs	r2, #0
900045be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900045c0:	78fb      	ldrb	r3, [r7, #3]
900045c2:	015a      	lsls	r2, r3, #5
900045c4:	693b      	ldr	r3, [r7, #16]
900045c6:	4413      	add	r3, r2
900045c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900045cc:	461a      	mov	r2, r3
900045ce:	2301      	movs	r3, #1
900045d0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900045d2:	78fa      	ldrb	r2, [r7, #3]
900045d4:	6879      	ldr	r1, [r7, #4]
900045d6:	4613      	mov	r3, r2
900045d8:	011b      	lsls	r3, r3, #4
900045da:	1a9b      	subs	r3, r3, r2
900045dc:	009b      	lsls	r3, r3, #2
900045de:	440b      	add	r3, r1
900045e0:	3326      	adds	r3, #38	@ 0x26
900045e2:	781b      	ldrb	r3, [r3, #0]
900045e4:	2b00      	cmp	r3, #0
900045e6:	d00a      	beq.n	900045fe <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900045e8:	78fa      	ldrb	r2, [r7, #3]
900045ea:	6879      	ldr	r1, [r7, #4]
900045ec:	4613      	mov	r3, r2
900045ee:	011b      	lsls	r3, r3, #4
900045f0:	1a9b      	subs	r3, r3, r2
900045f2:	009b      	lsls	r3, r3, #2
900045f4:	440b      	add	r3, r1
900045f6:	3326      	adds	r3, #38	@ 0x26
900045f8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900045fa:	2b02      	cmp	r3, #2
900045fc:	d110      	bne.n	90004620 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900045fe:	687b      	ldr	r3, [r7, #4]
90004600:	681b      	ldr	r3, [r3, #0]
90004602:	78fa      	ldrb	r2, [r7, #3]
90004604:	4611      	mov	r1, r2
90004606:	4618      	mov	r0, r3
90004608:	f006 ff5c 	bl	9000b4c4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000460c:	78fb      	ldrb	r3, [r7, #3]
9000460e:	015a      	lsls	r2, r3, #5
90004610:	693b      	ldr	r3, [r7, #16]
90004612:	4413      	add	r3, r2
90004614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004618:	461a      	mov	r2, r3
9000461a:	2310      	movs	r3, #16
9000461c:	6093      	str	r3, [r2, #8]
9000461e:	e03d      	b.n	9000469c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004620:	78fa      	ldrb	r2, [r7, #3]
90004622:	6879      	ldr	r1, [r7, #4]
90004624:	4613      	mov	r3, r2
90004626:	011b      	lsls	r3, r3, #4
90004628:	1a9b      	subs	r3, r3, r2
9000462a:	009b      	lsls	r3, r3, #2
9000462c:	440b      	add	r3, r1
9000462e:	3326      	adds	r3, #38	@ 0x26
90004630:	781b      	ldrb	r3, [r3, #0]
90004632:	2b03      	cmp	r3, #3
90004634:	d00a      	beq.n	9000464c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
90004636:	78fa      	ldrb	r2, [r7, #3]
90004638:	6879      	ldr	r1, [r7, #4]
9000463a:	4613      	mov	r3, r2
9000463c:	011b      	lsls	r3, r3, #4
9000463e:	1a9b      	subs	r3, r3, r2
90004640:	009b      	lsls	r3, r3, #2
90004642:	440b      	add	r3, r1
90004644:	3326      	adds	r3, #38	@ 0x26
90004646:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004648:	2b01      	cmp	r3, #1
9000464a:	d127      	bne.n	9000469c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
9000464c:	78fb      	ldrb	r3, [r7, #3]
9000464e:	015a      	lsls	r2, r3, #5
90004650:	693b      	ldr	r3, [r7, #16]
90004652:	4413      	add	r3, r2
90004654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004658:	681b      	ldr	r3, [r3, #0]
9000465a:	78fa      	ldrb	r2, [r7, #3]
9000465c:	0151      	lsls	r1, r2, #5
9000465e:	693a      	ldr	r2, [r7, #16]
90004660:	440a      	add	r2, r1
90004662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004666:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
9000466a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000466c:	78fa      	ldrb	r2, [r7, #3]
9000466e:	6879      	ldr	r1, [r7, #4]
90004670:	4613      	mov	r3, r2
90004672:	011b      	lsls	r3, r3, #4
90004674:	1a9b      	subs	r3, r3, r2
90004676:	009b      	lsls	r3, r3, #2
90004678:	440b      	add	r3, r1
9000467a:	334c      	adds	r3, #76	@ 0x4c
9000467c:	2201      	movs	r2, #1
9000467e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004680:	78fa      	ldrb	r2, [r7, #3]
90004682:	6879      	ldr	r1, [r7, #4]
90004684:	4613      	mov	r3, r2
90004686:	011b      	lsls	r3, r3, #4
90004688:	1a9b      	subs	r3, r3, r2
9000468a:	009b      	lsls	r3, r3, #2
9000468c:	440b      	add	r3, r1
9000468e:	334c      	adds	r3, #76	@ 0x4c
90004690:	781a      	ldrb	r2, [r3, #0]
90004692:	78fb      	ldrb	r3, [r7, #3]
90004694:	4619      	mov	r1, r3
90004696:	6878      	ldr	r0, [r7, #4]
90004698:	f7fc fdbe 	bl	90001218 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
9000469c:	687b      	ldr	r3, [r7, #4]
9000469e:	799b      	ldrb	r3, [r3, #6]
900046a0:	2b01      	cmp	r3, #1
900046a2:	d13b      	bne.n	9000471c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900046a4:	78fa      	ldrb	r2, [r7, #3]
900046a6:	6879      	ldr	r1, [r7, #4]
900046a8:	4613      	mov	r3, r2
900046aa:	011b      	lsls	r3, r3, #4
900046ac:	1a9b      	subs	r3, r3, r2
900046ae:	009b      	lsls	r3, r3, #2
900046b0:	440b      	add	r3, r1
900046b2:	3338      	adds	r3, #56	@ 0x38
900046b4:	6819      	ldr	r1, [r3, #0]
900046b6:	78fa      	ldrb	r2, [r7, #3]
900046b8:	6878      	ldr	r0, [r7, #4]
900046ba:	4613      	mov	r3, r2
900046bc:	011b      	lsls	r3, r3, #4
900046be:	1a9b      	subs	r3, r3, r2
900046c0:	009b      	lsls	r3, r3, #2
900046c2:	4403      	add	r3, r0
900046c4:	3328      	adds	r3, #40	@ 0x28
900046c6:	881b      	ldrh	r3, [r3, #0]
900046c8:	440b      	add	r3, r1
900046ca:	1e59      	subs	r1, r3, #1
900046cc:	78fa      	ldrb	r2, [r7, #3]
900046ce:	6878      	ldr	r0, [r7, #4]
900046d0:	4613      	mov	r3, r2
900046d2:	011b      	lsls	r3, r3, #4
900046d4:	1a9b      	subs	r3, r3, r2
900046d6:	009b      	lsls	r3, r3, #2
900046d8:	4403      	add	r3, r0
900046da:	3328      	adds	r3, #40	@ 0x28
900046dc:	881b      	ldrh	r3, [r3, #0]
900046de:	fbb1 f3f3 	udiv	r3, r1, r3
900046e2:	f003 0301 	and.w	r3, r3, #1
900046e6:	2b00      	cmp	r3, #0
900046e8:	f000 8470 	beq.w	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
900046ec:	78fa      	ldrb	r2, [r7, #3]
900046ee:	6879      	ldr	r1, [r7, #4]
900046f0:	4613      	mov	r3, r2
900046f2:	011b      	lsls	r3, r3, #4
900046f4:	1a9b      	subs	r3, r3, r2
900046f6:	009b      	lsls	r3, r3, #2
900046f8:	440b      	add	r3, r1
900046fa:	333c      	adds	r3, #60	@ 0x3c
900046fc:	781b      	ldrb	r3, [r3, #0]
900046fe:	78fa      	ldrb	r2, [r7, #3]
90004700:	f083 0301 	eor.w	r3, r3, #1
90004704:	b2d8      	uxtb	r0, r3
90004706:	6879      	ldr	r1, [r7, #4]
90004708:	4613      	mov	r3, r2
9000470a:	011b      	lsls	r3, r3, #4
9000470c:	1a9b      	subs	r3, r3, r2
9000470e:	009b      	lsls	r3, r3, #2
90004710:	440b      	add	r3, r1
90004712:	333c      	adds	r3, #60	@ 0x3c
90004714:	4602      	mov	r2, r0
90004716:	701a      	strb	r2, [r3, #0]
90004718:	f000 bc58 	b.w	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
9000471c:	78fa      	ldrb	r2, [r7, #3]
9000471e:	6879      	ldr	r1, [r7, #4]
90004720:	4613      	mov	r3, r2
90004722:	011b      	lsls	r3, r3, #4
90004724:	1a9b      	subs	r3, r3, r2
90004726:	009b      	lsls	r3, r3, #2
90004728:	440b      	add	r3, r1
9000472a:	333c      	adds	r3, #60	@ 0x3c
9000472c:	781b      	ldrb	r3, [r3, #0]
9000472e:	78fa      	ldrb	r2, [r7, #3]
90004730:	f083 0301 	eor.w	r3, r3, #1
90004734:	b2d8      	uxtb	r0, r3
90004736:	6879      	ldr	r1, [r7, #4]
90004738:	4613      	mov	r3, r2
9000473a:	011b      	lsls	r3, r3, #4
9000473c:	1a9b      	subs	r3, r3, r2
9000473e:	009b      	lsls	r3, r3, #2
90004740:	440b      	add	r3, r1
90004742:	333c      	adds	r3, #60	@ 0x3c
90004744:	4602      	mov	r2, r0
90004746:	701a      	strb	r2, [r3, #0]
90004748:	f000 bc40 	b.w	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
9000474c:	687b      	ldr	r3, [r7, #4]
9000474e:	681b      	ldr	r3, [r3, #0]
90004750:	78fa      	ldrb	r2, [r7, #3]
90004752:	4611      	mov	r1, r2
90004754:	4618      	mov	r0, r3
90004756:	f006 fe38 	bl	9000b3ca <USB_ReadChInterrupts>
9000475a:	4603      	mov	r3, r0
9000475c:	f003 0320 	and.w	r3, r3, #32
90004760:	2b20      	cmp	r3, #32
90004762:	d131      	bne.n	900047c8 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004764:	78fb      	ldrb	r3, [r7, #3]
90004766:	015a      	lsls	r2, r3, #5
90004768:	693b      	ldr	r3, [r7, #16]
9000476a:	4413      	add	r3, r2
9000476c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004770:	461a      	mov	r2, r3
90004772:	2320      	movs	r3, #32
90004774:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
90004776:	78fa      	ldrb	r2, [r7, #3]
90004778:	6879      	ldr	r1, [r7, #4]
9000477a:	4613      	mov	r3, r2
9000477c:	011b      	lsls	r3, r3, #4
9000477e:	1a9b      	subs	r3, r3, r2
90004780:	009b      	lsls	r3, r3, #2
90004782:	440b      	add	r3, r1
90004784:	331a      	adds	r3, #26
90004786:	781b      	ldrb	r3, [r3, #0]
90004788:	2b01      	cmp	r3, #1
9000478a:	f040 841f 	bne.w	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
9000478e:	78fa      	ldrb	r2, [r7, #3]
90004790:	6879      	ldr	r1, [r7, #4]
90004792:	4613      	mov	r3, r2
90004794:	011b      	lsls	r3, r3, #4
90004796:	1a9b      	subs	r3, r3, r2
90004798:	009b      	lsls	r3, r3, #2
9000479a:	440b      	add	r3, r1
9000479c:	331b      	adds	r3, #27
9000479e:	2201      	movs	r2, #1
900047a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900047a2:	78fa      	ldrb	r2, [r7, #3]
900047a4:	6879      	ldr	r1, [r7, #4]
900047a6:	4613      	mov	r3, r2
900047a8:	011b      	lsls	r3, r3, #4
900047aa:	1a9b      	subs	r3, r3, r2
900047ac:	009b      	lsls	r3, r3, #2
900047ae:	440b      	add	r3, r1
900047b0:	334d      	adds	r3, #77	@ 0x4d
900047b2:	2203      	movs	r2, #3
900047b4:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
900047b6:	687b      	ldr	r3, [r7, #4]
900047b8:	681b      	ldr	r3, [r3, #0]
900047ba:	78fa      	ldrb	r2, [r7, #3]
900047bc:	4611      	mov	r1, r2
900047be:	4618      	mov	r0, r3
900047c0:	f006 fe80 	bl	9000b4c4 <USB_HC_Halt>
900047c4:	f000 bc02 	b.w	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900047c8:	687b      	ldr	r3, [r7, #4]
900047ca:	681b      	ldr	r3, [r3, #0]
900047cc:	78fa      	ldrb	r2, [r7, #3]
900047ce:	4611      	mov	r1, r2
900047d0:	4618      	mov	r0, r3
900047d2:	f006 fdfa 	bl	9000b3ca <USB_ReadChInterrupts>
900047d6:	4603      	mov	r3, r0
900047d8:	f003 0302 	and.w	r3, r3, #2
900047dc:	2b02      	cmp	r3, #2
900047de:	f040 8305 	bne.w	90004dec <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900047e2:	78fb      	ldrb	r3, [r7, #3]
900047e4:	015a      	lsls	r2, r3, #5
900047e6:	693b      	ldr	r3, [r7, #16]
900047e8:	4413      	add	r3, r2
900047ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047ee:	461a      	mov	r2, r3
900047f0:	2302      	movs	r3, #2
900047f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900047f4:	78fa      	ldrb	r2, [r7, #3]
900047f6:	6879      	ldr	r1, [r7, #4]
900047f8:	4613      	mov	r3, r2
900047fa:	011b      	lsls	r3, r3, #4
900047fc:	1a9b      	subs	r3, r3, r2
900047fe:	009b      	lsls	r3, r3, #2
90004800:	440b      	add	r3, r1
90004802:	334d      	adds	r3, #77	@ 0x4d
90004804:	781b      	ldrb	r3, [r3, #0]
90004806:	2b01      	cmp	r3, #1
90004808:	d114      	bne.n	90004834 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000480a:	78fa      	ldrb	r2, [r7, #3]
9000480c:	6879      	ldr	r1, [r7, #4]
9000480e:	4613      	mov	r3, r2
90004810:	011b      	lsls	r3, r3, #4
90004812:	1a9b      	subs	r3, r3, r2
90004814:	009b      	lsls	r3, r3, #2
90004816:	440b      	add	r3, r1
90004818:	334d      	adds	r3, #77	@ 0x4d
9000481a:	2202      	movs	r2, #2
9000481c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000481e:	78fa      	ldrb	r2, [r7, #3]
90004820:	6879      	ldr	r1, [r7, #4]
90004822:	4613      	mov	r3, r2
90004824:	011b      	lsls	r3, r3, #4
90004826:	1a9b      	subs	r3, r3, r2
90004828:	009b      	lsls	r3, r3, #2
9000482a:	440b      	add	r3, r1
9000482c:	334c      	adds	r3, #76	@ 0x4c
9000482e:	2201      	movs	r2, #1
90004830:	701a      	strb	r2, [r3, #0]
90004832:	e2cc      	b.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90004834:	78fa      	ldrb	r2, [r7, #3]
90004836:	6879      	ldr	r1, [r7, #4]
90004838:	4613      	mov	r3, r2
9000483a:	011b      	lsls	r3, r3, #4
9000483c:	1a9b      	subs	r3, r3, r2
9000483e:	009b      	lsls	r3, r3, #2
90004840:	440b      	add	r3, r1
90004842:	334d      	adds	r3, #77	@ 0x4d
90004844:	781b      	ldrb	r3, [r3, #0]
90004846:	2b06      	cmp	r3, #6
90004848:	d114      	bne.n	90004874 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000484a:	78fa      	ldrb	r2, [r7, #3]
9000484c:	6879      	ldr	r1, [r7, #4]
9000484e:	4613      	mov	r3, r2
90004850:	011b      	lsls	r3, r3, #4
90004852:	1a9b      	subs	r3, r3, r2
90004854:	009b      	lsls	r3, r3, #2
90004856:	440b      	add	r3, r1
90004858:	334d      	adds	r3, #77	@ 0x4d
9000485a:	2202      	movs	r2, #2
9000485c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
9000485e:	78fa      	ldrb	r2, [r7, #3]
90004860:	6879      	ldr	r1, [r7, #4]
90004862:	4613      	mov	r3, r2
90004864:	011b      	lsls	r3, r3, #4
90004866:	1a9b      	subs	r3, r3, r2
90004868:	009b      	lsls	r3, r3, #2
9000486a:	440b      	add	r3, r1
9000486c:	334c      	adds	r3, #76	@ 0x4c
9000486e:	2205      	movs	r2, #5
90004870:	701a      	strb	r2, [r3, #0]
90004872:	e2ac      	b.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004874:	78fa      	ldrb	r2, [r7, #3]
90004876:	6879      	ldr	r1, [r7, #4]
90004878:	4613      	mov	r3, r2
9000487a:	011b      	lsls	r3, r3, #4
9000487c:	1a9b      	subs	r3, r3, r2
9000487e:	009b      	lsls	r3, r3, #2
90004880:	440b      	add	r3, r1
90004882:	334d      	adds	r3, #77	@ 0x4d
90004884:	781b      	ldrb	r3, [r3, #0]
90004886:	2b07      	cmp	r3, #7
90004888:	d00b      	beq.n	900048a2 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000488a:	78fa      	ldrb	r2, [r7, #3]
9000488c:	6879      	ldr	r1, [r7, #4]
9000488e:	4613      	mov	r3, r2
90004890:	011b      	lsls	r3, r3, #4
90004892:	1a9b      	subs	r3, r3, r2
90004894:	009b      	lsls	r3, r3, #2
90004896:	440b      	add	r3, r1
90004898:	334d      	adds	r3, #77	@ 0x4d
9000489a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000489c:	2b09      	cmp	r3, #9
9000489e:	f040 80a6 	bne.w	900049ee <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900048a2:	78fa      	ldrb	r2, [r7, #3]
900048a4:	6879      	ldr	r1, [r7, #4]
900048a6:	4613      	mov	r3, r2
900048a8:	011b      	lsls	r3, r3, #4
900048aa:	1a9b      	subs	r3, r3, r2
900048ac:	009b      	lsls	r3, r3, #2
900048ae:	440b      	add	r3, r1
900048b0:	334d      	adds	r3, #77	@ 0x4d
900048b2:	2202      	movs	r2, #2
900048b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900048b6:	78fa      	ldrb	r2, [r7, #3]
900048b8:	6879      	ldr	r1, [r7, #4]
900048ba:	4613      	mov	r3, r2
900048bc:	011b      	lsls	r3, r3, #4
900048be:	1a9b      	subs	r3, r3, r2
900048c0:	009b      	lsls	r3, r3, #2
900048c2:	440b      	add	r3, r1
900048c4:	3344      	adds	r3, #68	@ 0x44
900048c6:	681b      	ldr	r3, [r3, #0]
900048c8:	1c59      	adds	r1, r3, #1
900048ca:	6878      	ldr	r0, [r7, #4]
900048cc:	4613      	mov	r3, r2
900048ce:	011b      	lsls	r3, r3, #4
900048d0:	1a9b      	subs	r3, r3, r2
900048d2:	009b      	lsls	r3, r3, #2
900048d4:	4403      	add	r3, r0
900048d6:	3344      	adds	r3, #68	@ 0x44
900048d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900048da:	78fa      	ldrb	r2, [r7, #3]
900048dc:	6879      	ldr	r1, [r7, #4]
900048de:	4613      	mov	r3, r2
900048e0:	011b      	lsls	r3, r3, #4
900048e2:	1a9b      	subs	r3, r3, r2
900048e4:	009b      	lsls	r3, r3, #2
900048e6:	440b      	add	r3, r1
900048e8:	3344      	adds	r3, #68	@ 0x44
900048ea:	681b      	ldr	r3, [r3, #0]
900048ec:	2b02      	cmp	r3, #2
900048ee:	d943      	bls.n	90004978 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900048f0:	78fa      	ldrb	r2, [r7, #3]
900048f2:	6879      	ldr	r1, [r7, #4]
900048f4:	4613      	mov	r3, r2
900048f6:	011b      	lsls	r3, r3, #4
900048f8:	1a9b      	subs	r3, r3, r2
900048fa:	009b      	lsls	r3, r3, #2
900048fc:	440b      	add	r3, r1
900048fe:	3344      	adds	r3, #68	@ 0x44
90004900:	2200      	movs	r2, #0
90004902:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90004904:	78fa      	ldrb	r2, [r7, #3]
90004906:	6879      	ldr	r1, [r7, #4]
90004908:	4613      	mov	r3, r2
9000490a:	011b      	lsls	r3, r3, #4
9000490c:	1a9b      	subs	r3, r3, r2
9000490e:	009b      	lsls	r3, r3, #2
90004910:	440b      	add	r3, r1
90004912:	331a      	adds	r3, #26
90004914:	781b      	ldrb	r3, [r3, #0]
90004916:	2b01      	cmp	r3, #1
90004918:	d123      	bne.n	90004962 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
9000491a:	78fa      	ldrb	r2, [r7, #3]
9000491c:	6879      	ldr	r1, [r7, #4]
9000491e:	4613      	mov	r3, r2
90004920:	011b      	lsls	r3, r3, #4
90004922:	1a9b      	subs	r3, r3, r2
90004924:	009b      	lsls	r3, r3, #2
90004926:	440b      	add	r3, r1
90004928:	331b      	adds	r3, #27
9000492a:	2200      	movs	r2, #0
9000492c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
9000492e:	78fa      	ldrb	r2, [r7, #3]
90004930:	6879      	ldr	r1, [r7, #4]
90004932:	4613      	mov	r3, r2
90004934:	011b      	lsls	r3, r3, #4
90004936:	1a9b      	subs	r3, r3, r2
90004938:	009b      	lsls	r3, r3, #2
9000493a:	440b      	add	r3, r1
9000493c:	331c      	adds	r3, #28
9000493e:	2200      	movs	r2, #0
90004940:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004942:	78fb      	ldrb	r3, [r7, #3]
90004944:	015a      	lsls	r2, r3, #5
90004946:	693b      	ldr	r3, [r7, #16]
90004948:	4413      	add	r3, r2
9000494a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000494e:	685b      	ldr	r3, [r3, #4]
90004950:	78fa      	ldrb	r2, [r7, #3]
90004952:	0151      	lsls	r1, r2, #5
90004954:	693a      	ldr	r2, [r7, #16]
90004956:	440a      	add	r2, r1
90004958:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000495c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004960:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90004962:	78fa      	ldrb	r2, [r7, #3]
90004964:	6879      	ldr	r1, [r7, #4]
90004966:	4613      	mov	r3, r2
90004968:	011b      	lsls	r3, r3, #4
9000496a:	1a9b      	subs	r3, r3, r2
9000496c:	009b      	lsls	r3, r3, #2
9000496e:	440b      	add	r3, r1
90004970:	334c      	adds	r3, #76	@ 0x4c
90004972:	2204      	movs	r2, #4
90004974:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004976:	e229      	b.n	90004dcc <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004978:	78fa      	ldrb	r2, [r7, #3]
9000497a:	6879      	ldr	r1, [r7, #4]
9000497c:	4613      	mov	r3, r2
9000497e:	011b      	lsls	r3, r3, #4
90004980:	1a9b      	subs	r3, r3, r2
90004982:	009b      	lsls	r3, r3, #2
90004984:	440b      	add	r3, r1
90004986:	334c      	adds	r3, #76	@ 0x4c
90004988:	2202      	movs	r2, #2
9000498a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000498c:	78fa      	ldrb	r2, [r7, #3]
9000498e:	6879      	ldr	r1, [r7, #4]
90004990:	4613      	mov	r3, r2
90004992:	011b      	lsls	r3, r3, #4
90004994:	1a9b      	subs	r3, r3, r2
90004996:	009b      	lsls	r3, r3, #2
90004998:	440b      	add	r3, r1
9000499a:	3326      	adds	r3, #38	@ 0x26
9000499c:	781b      	ldrb	r3, [r3, #0]
9000499e:	2b00      	cmp	r3, #0
900049a0:	d00b      	beq.n	900049ba <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900049a2:	78fa      	ldrb	r2, [r7, #3]
900049a4:	6879      	ldr	r1, [r7, #4]
900049a6:	4613      	mov	r3, r2
900049a8:	011b      	lsls	r3, r3, #4
900049aa:	1a9b      	subs	r3, r3, r2
900049ac:	009b      	lsls	r3, r3, #2
900049ae:	440b      	add	r3, r1
900049b0:	3326      	adds	r3, #38	@ 0x26
900049b2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900049b4:	2b02      	cmp	r3, #2
900049b6:	f040 8209 	bne.w	90004dcc <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900049ba:	78fb      	ldrb	r3, [r7, #3]
900049bc:	015a      	lsls	r2, r3, #5
900049be:	693b      	ldr	r3, [r7, #16]
900049c0:	4413      	add	r3, r2
900049c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049c6:	681b      	ldr	r3, [r3, #0]
900049c8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900049ca:	68fb      	ldr	r3, [r7, #12]
900049cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900049d0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900049d2:	68fb      	ldr	r3, [r7, #12]
900049d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900049d8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
900049da:	78fb      	ldrb	r3, [r7, #3]
900049dc:	015a      	lsls	r2, r3, #5
900049de:	693b      	ldr	r3, [r7, #16]
900049e0:	4413      	add	r3, r2
900049e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049e6:	461a      	mov	r2, r3
900049e8:	68fb      	ldr	r3, [r7, #12]
900049ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900049ec:	e1ee      	b.n	90004dcc <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900049ee:	78fa      	ldrb	r2, [r7, #3]
900049f0:	6879      	ldr	r1, [r7, #4]
900049f2:	4613      	mov	r3, r2
900049f4:	011b      	lsls	r3, r3, #4
900049f6:	1a9b      	subs	r3, r3, r2
900049f8:	009b      	lsls	r3, r3, #2
900049fa:	440b      	add	r3, r1
900049fc:	334d      	adds	r3, #77	@ 0x4d
900049fe:	781b      	ldrb	r3, [r3, #0]
90004a00:	2b05      	cmp	r3, #5
90004a02:	f040 80c8 	bne.w	90004b96 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a06:	78fa      	ldrb	r2, [r7, #3]
90004a08:	6879      	ldr	r1, [r7, #4]
90004a0a:	4613      	mov	r3, r2
90004a0c:	011b      	lsls	r3, r3, #4
90004a0e:	1a9b      	subs	r3, r3, r2
90004a10:	009b      	lsls	r3, r3, #2
90004a12:	440b      	add	r3, r1
90004a14:	334d      	adds	r3, #77	@ 0x4d
90004a16:	2202      	movs	r2, #2
90004a18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004a1a:	78fa      	ldrb	r2, [r7, #3]
90004a1c:	6879      	ldr	r1, [r7, #4]
90004a1e:	4613      	mov	r3, r2
90004a20:	011b      	lsls	r3, r3, #4
90004a22:	1a9b      	subs	r3, r3, r2
90004a24:	009b      	lsls	r3, r3, #2
90004a26:	440b      	add	r3, r1
90004a28:	331b      	adds	r3, #27
90004a2a:	781b      	ldrb	r3, [r3, #0]
90004a2c:	2b01      	cmp	r3, #1
90004a2e:	f040 81ce 	bne.w	90004dce <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004a32:	78fa      	ldrb	r2, [r7, #3]
90004a34:	6879      	ldr	r1, [r7, #4]
90004a36:	4613      	mov	r3, r2
90004a38:	011b      	lsls	r3, r3, #4
90004a3a:	1a9b      	subs	r3, r3, r2
90004a3c:	009b      	lsls	r3, r3, #2
90004a3e:	440b      	add	r3, r1
90004a40:	3326      	adds	r3, #38	@ 0x26
90004a42:	781b      	ldrb	r3, [r3, #0]
90004a44:	2b03      	cmp	r3, #3
90004a46:	d16b      	bne.n	90004b20 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004a48:	78fa      	ldrb	r2, [r7, #3]
90004a4a:	6879      	ldr	r1, [r7, #4]
90004a4c:	4613      	mov	r3, r2
90004a4e:	011b      	lsls	r3, r3, #4
90004a50:	1a9b      	subs	r3, r3, r2
90004a52:	009b      	lsls	r3, r3, #2
90004a54:	440b      	add	r3, r1
90004a56:	3348      	adds	r3, #72	@ 0x48
90004a58:	681b      	ldr	r3, [r3, #0]
90004a5a:	1c59      	adds	r1, r3, #1
90004a5c:	6878      	ldr	r0, [r7, #4]
90004a5e:	4613      	mov	r3, r2
90004a60:	011b      	lsls	r3, r3, #4
90004a62:	1a9b      	subs	r3, r3, r2
90004a64:	009b      	lsls	r3, r3, #2
90004a66:	4403      	add	r3, r0
90004a68:	3348      	adds	r3, #72	@ 0x48
90004a6a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
90004a6c:	78fa      	ldrb	r2, [r7, #3]
90004a6e:	6879      	ldr	r1, [r7, #4]
90004a70:	4613      	mov	r3, r2
90004a72:	011b      	lsls	r3, r3, #4
90004a74:	1a9b      	subs	r3, r3, r2
90004a76:	009b      	lsls	r3, r3, #2
90004a78:	440b      	add	r3, r1
90004a7a:	3348      	adds	r3, #72	@ 0x48
90004a7c:	681b      	ldr	r3, [r3, #0]
90004a7e:	2b02      	cmp	r3, #2
90004a80:	d943      	bls.n	90004b0a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90004a82:	78fa      	ldrb	r2, [r7, #3]
90004a84:	6879      	ldr	r1, [r7, #4]
90004a86:	4613      	mov	r3, r2
90004a88:	011b      	lsls	r3, r3, #4
90004a8a:	1a9b      	subs	r3, r3, r2
90004a8c:	009b      	lsls	r3, r3, #2
90004a8e:	440b      	add	r3, r1
90004a90:	3348      	adds	r3, #72	@ 0x48
90004a92:	2200      	movs	r2, #0
90004a94:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
90004a96:	78fa      	ldrb	r2, [r7, #3]
90004a98:	6879      	ldr	r1, [r7, #4]
90004a9a:	4613      	mov	r3, r2
90004a9c:	011b      	lsls	r3, r3, #4
90004a9e:	1a9b      	subs	r3, r3, r2
90004aa0:	009b      	lsls	r3, r3, #2
90004aa2:	440b      	add	r3, r1
90004aa4:	331b      	adds	r3, #27
90004aa6:	2200      	movs	r2, #0
90004aa8:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
90004aaa:	78fa      	ldrb	r2, [r7, #3]
90004aac:	6879      	ldr	r1, [r7, #4]
90004aae:	4613      	mov	r3, r2
90004ab0:	011b      	lsls	r3, r3, #4
90004ab2:	1a9b      	subs	r3, r3, r2
90004ab4:	009b      	lsls	r3, r3, #2
90004ab6:	440b      	add	r3, r1
90004ab8:	3344      	adds	r3, #68	@ 0x44
90004aba:	681b      	ldr	r3, [r3, #0]
90004abc:	2b02      	cmp	r3, #2
90004abe:	d809      	bhi.n	90004ad4 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004ac0:	78fa      	ldrb	r2, [r7, #3]
90004ac2:	6879      	ldr	r1, [r7, #4]
90004ac4:	4613      	mov	r3, r2
90004ac6:	011b      	lsls	r3, r3, #4
90004ac8:	1a9b      	subs	r3, r3, r2
90004aca:	009b      	lsls	r3, r3, #2
90004acc:	440b      	add	r3, r1
90004ace:	331c      	adds	r3, #28
90004ad0:	2201      	movs	r2, #1
90004ad2:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004ad4:	78fb      	ldrb	r3, [r7, #3]
90004ad6:	015a      	lsls	r2, r3, #5
90004ad8:	693b      	ldr	r3, [r7, #16]
90004ada:	4413      	add	r3, r2
90004adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ae0:	685b      	ldr	r3, [r3, #4]
90004ae2:	78fa      	ldrb	r2, [r7, #3]
90004ae4:	0151      	lsls	r1, r2, #5
90004ae6:	693a      	ldr	r2, [r7, #16]
90004ae8:	440a      	add	r2, r1
90004aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004af2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004af4:	78fa      	ldrb	r2, [r7, #3]
90004af6:	6879      	ldr	r1, [r7, #4]
90004af8:	4613      	mov	r3, r2
90004afa:	011b      	lsls	r3, r3, #4
90004afc:	1a9b      	subs	r3, r3, r2
90004afe:	009b      	lsls	r3, r3, #2
90004b00:	440b      	add	r3, r1
90004b02:	334c      	adds	r3, #76	@ 0x4c
90004b04:	2204      	movs	r2, #4
90004b06:	701a      	strb	r2, [r3, #0]
90004b08:	e014      	b.n	90004b34 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b0a:	78fa      	ldrb	r2, [r7, #3]
90004b0c:	6879      	ldr	r1, [r7, #4]
90004b0e:	4613      	mov	r3, r2
90004b10:	011b      	lsls	r3, r3, #4
90004b12:	1a9b      	subs	r3, r3, r2
90004b14:	009b      	lsls	r3, r3, #2
90004b16:	440b      	add	r3, r1
90004b18:	334c      	adds	r3, #76	@ 0x4c
90004b1a:	2202      	movs	r2, #2
90004b1c:	701a      	strb	r2, [r3, #0]
90004b1e:	e009      	b.n	90004b34 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b20:	78fa      	ldrb	r2, [r7, #3]
90004b22:	6879      	ldr	r1, [r7, #4]
90004b24:	4613      	mov	r3, r2
90004b26:	011b      	lsls	r3, r3, #4
90004b28:	1a9b      	subs	r3, r3, r2
90004b2a:	009b      	lsls	r3, r3, #2
90004b2c:	440b      	add	r3, r1
90004b2e:	334c      	adds	r3, #76	@ 0x4c
90004b30:	2202      	movs	r2, #2
90004b32:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b34:	78fa      	ldrb	r2, [r7, #3]
90004b36:	6879      	ldr	r1, [r7, #4]
90004b38:	4613      	mov	r3, r2
90004b3a:	011b      	lsls	r3, r3, #4
90004b3c:	1a9b      	subs	r3, r3, r2
90004b3e:	009b      	lsls	r3, r3, #2
90004b40:	440b      	add	r3, r1
90004b42:	3326      	adds	r3, #38	@ 0x26
90004b44:	781b      	ldrb	r3, [r3, #0]
90004b46:	2b00      	cmp	r3, #0
90004b48:	d00b      	beq.n	90004b62 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004b4a:	78fa      	ldrb	r2, [r7, #3]
90004b4c:	6879      	ldr	r1, [r7, #4]
90004b4e:	4613      	mov	r3, r2
90004b50:	011b      	lsls	r3, r3, #4
90004b52:	1a9b      	subs	r3, r3, r2
90004b54:	009b      	lsls	r3, r3, #2
90004b56:	440b      	add	r3, r1
90004b58:	3326      	adds	r3, #38	@ 0x26
90004b5a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b5c:	2b02      	cmp	r3, #2
90004b5e:	f040 8136 	bne.w	90004dce <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004b62:	78fb      	ldrb	r3, [r7, #3]
90004b64:	015a      	lsls	r2, r3, #5
90004b66:	693b      	ldr	r3, [r7, #16]
90004b68:	4413      	add	r3, r2
90004b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b6e:	681b      	ldr	r3, [r3, #0]
90004b70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b72:	68fb      	ldr	r3, [r7, #12]
90004b74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004b78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b7a:	68fb      	ldr	r3, [r7, #12]
90004b7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004b80:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004b82:	78fb      	ldrb	r3, [r7, #3]
90004b84:	015a      	lsls	r2, r3, #5
90004b86:	693b      	ldr	r3, [r7, #16]
90004b88:	4413      	add	r3, r2
90004b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b8e:	461a      	mov	r2, r3
90004b90:	68fb      	ldr	r3, [r7, #12]
90004b92:	6013      	str	r3, [r2, #0]
90004b94:	e11b      	b.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004b96:	78fa      	ldrb	r2, [r7, #3]
90004b98:	6879      	ldr	r1, [r7, #4]
90004b9a:	4613      	mov	r3, r2
90004b9c:	011b      	lsls	r3, r3, #4
90004b9e:	1a9b      	subs	r3, r3, r2
90004ba0:	009b      	lsls	r3, r3, #2
90004ba2:	440b      	add	r3, r1
90004ba4:	334d      	adds	r3, #77	@ 0x4d
90004ba6:	781b      	ldrb	r3, [r3, #0]
90004ba8:	2b03      	cmp	r3, #3
90004baa:	f040 8081 	bne.w	90004cb0 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004bae:	78fa      	ldrb	r2, [r7, #3]
90004bb0:	6879      	ldr	r1, [r7, #4]
90004bb2:	4613      	mov	r3, r2
90004bb4:	011b      	lsls	r3, r3, #4
90004bb6:	1a9b      	subs	r3, r3, r2
90004bb8:	009b      	lsls	r3, r3, #2
90004bba:	440b      	add	r3, r1
90004bbc:	334d      	adds	r3, #77	@ 0x4d
90004bbe:	2202      	movs	r2, #2
90004bc0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004bc2:	78fa      	ldrb	r2, [r7, #3]
90004bc4:	6879      	ldr	r1, [r7, #4]
90004bc6:	4613      	mov	r3, r2
90004bc8:	011b      	lsls	r3, r3, #4
90004bca:	1a9b      	subs	r3, r3, r2
90004bcc:	009b      	lsls	r3, r3, #2
90004bce:	440b      	add	r3, r1
90004bd0:	331b      	adds	r3, #27
90004bd2:	781b      	ldrb	r3, [r3, #0]
90004bd4:	2b01      	cmp	r3, #1
90004bd6:	f040 80fa 	bne.w	90004dce <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004bda:	78fa      	ldrb	r2, [r7, #3]
90004bdc:	6879      	ldr	r1, [r7, #4]
90004bde:	4613      	mov	r3, r2
90004be0:	011b      	lsls	r3, r3, #4
90004be2:	1a9b      	subs	r3, r3, r2
90004be4:	009b      	lsls	r3, r3, #2
90004be6:	440b      	add	r3, r1
90004be8:	334c      	adds	r3, #76	@ 0x4c
90004bea:	2202      	movs	r2, #2
90004bec:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004bee:	78fb      	ldrb	r3, [r7, #3]
90004bf0:	015a      	lsls	r2, r3, #5
90004bf2:	693b      	ldr	r3, [r7, #16]
90004bf4:	4413      	add	r3, r2
90004bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004bfa:	685b      	ldr	r3, [r3, #4]
90004bfc:	78fa      	ldrb	r2, [r7, #3]
90004bfe:	0151      	lsls	r1, r2, #5
90004c00:	693a      	ldr	r2, [r7, #16]
90004c02:	440a      	add	r2, r1
90004c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004c0c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004c0e:	78fb      	ldrb	r3, [r7, #3]
90004c10:	015a      	lsls	r2, r3, #5
90004c12:	693b      	ldr	r3, [r7, #16]
90004c14:	4413      	add	r3, r2
90004c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c1a:	68db      	ldr	r3, [r3, #12]
90004c1c:	78fa      	ldrb	r2, [r7, #3]
90004c1e:	0151      	lsls	r1, r2, #5
90004c20:	693a      	ldr	r2, [r7, #16]
90004c22:	440a      	add	r2, r1
90004c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004c2c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004c2e:	78fb      	ldrb	r3, [r7, #3]
90004c30:	015a      	lsls	r2, r3, #5
90004c32:	693b      	ldr	r3, [r7, #16]
90004c34:	4413      	add	r3, r2
90004c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c3a:	68db      	ldr	r3, [r3, #12]
90004c3c:	78fa      	ldrb	r2, [r7, #3]
90004c3e:	0151      	lsls	r1, r2, #5
90004c40:	693a      	ldr	r2, [r7, #16]
90004c42:	440a      	add	r2, r1
90004c44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004c48:	f023 0320 	bic.w	r3, r3, #32
90004c4c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c4e:	78fa      	ldrb	r2, [r7, #3]
90004c50:	6879      	ldr	r1, [r7, #4]
90004c52:	4613      	mov	r3, r2
90004c54:	011b      	lsls	r3, r3, #4
90004c56:	1a9b      	subs	r3, r3, r2
90004c58:	009b      	lsls	r3, r3, #2
90004c5a:	440b      	add	r3, r1
90004c5c:	3326      	adds	r3, #38	@ 0x26
90004c5e:	781b      	ldrb	r3, [r3, #0]
90004c60:	2b00      	cmp	r3, #0
90004c62:	d00b      	beq.n	90004c7c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004c64:	78fa      	ldrb	r2, [r7, #3]
90004c66:	6879      	ldr	r1, [r7, #4]
90004c68:	4613      	mov	r3, r2
90004c6a:	011b      	lsls	r3, r3, #4
90004c6c:	1a9b      	subs	r3, r3, r2
90004c6e:	009b      	lsls	r3, r3, #2
90004c70:	440b      	add	r3, r1
90004c72:	3326      	adds	r3, #38	@ 0x26
90004c74:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c76:	2b02      	cmp	r3, #2
90004c78:	f040 80a9 	bne.w	90004dce <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004c7c:	78fb      	ldrb	r3, [r7, #3]
90004c7e:	015a      	lsls	r2, r3, #5
90004c80:	693b      	ldr	r3, [r7, #16]
90004c82:	4413      	add	r3, r2
90004c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c88:	681b      	ldr	r3, [r3, #0]
90004c8a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004c8c:	68fb      	ldr	r3, [r7, #12]
90004c8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004c92:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004c94:	68fb      	ldr	r3, [r7, #12]
90004c96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004c9a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004c9c:	78fb      	ldrb	r3, [r7, #3]
90004c9e:	015a      	lsls	r2, r3, #5
90004ca0:	693b      	ldr	r3, [r7, #16]
90004ca2:	4413      	add	r3, r2
90004ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ca8:	461a      	mov	r2, r3
90004caa:	68fb      	ldr	r3, [r7, #12]
90004cac:	6013      	str	r3, [r2, #0]
90004cae:	e08e      	b.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004cb0:	78fa      	ldrb	r2, [r7, #3]
90004cb2:	6879      	ldr	r1, [r7, #4]
90004cb4:	4613      	mov	r3, r2
90004cb6:	011b      	lsls	r3, r3, #4
90004cb8:	1a9b      	subs	r3, r3, r2
90004cba:	009b      	lsls	r3, r3, #2
90004cbc:	440b      	add	r3, r1
90004cbe:	334d      	adds	r3, #77	@ 0x4d
90004cc0:	781b      	ldrb	r3, [r3, #0]
90004cc2:	2b04      	cmp	r3, #4
90004cc4:	d143      	bne.n	90004d4e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004cc6:	78fa      	ldrb	r2, [r7, #3]
90004cc8:	6879      	ldr	r1, [r7, #4]
90004cca:	4613      	mov	r3, r2
90004ccc:	011b      	lsls	r3, r3, #4
90004cce:	1a9b      	subs	r3, r3, r2
90004cd0:	009b      	lsls	r3, r3, #2
90004cd2:	440b      	add	r3, r1
90004cd4:	334d      	adds	r3, #77	@ 0x4d
90004cd6:	2202      	movs	r2, #2
90004cd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004cda:	78fa      	ldrb	r2, [r7, #3]
90004cdc:	6879      	ldr	r1, [r7, #4]
90004cde:	4613      	mov	r3, r2
90004ce0:	011b      	lsls	r3, r3, #4
90004ce2:	1a9b      	subs	r3, r3, r2
90004ce4:	009b      	lsls	r3, r3, #2
90004ce6:	440b      	add	r3, r1
90004ce8:	334c      	adds	r3, #76	@ 0x4c
90004cea:	2202      	movs	r2, #2
90004cec:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004cee:	78fa      	ldrb	r2, [r7, #3]
90004cf0:	6879      	ldr	r1, [r7, #4]
90004cf2:	4613      	mov	r3, r2
90004cf4:	011b      	lsls	r3, r3, #4
90004cf6:	1a9b      	subs	r3, r3, r2
90004cf8:	009b      	lsls	r3, r3, #2
90004cfa:	440b      	add	r3, r1
90004cfc:	3326      	adds	r3, #38	@ 0x26
90004cfe:	781b      	ldrb	r3, [r3, #0]
90004d00:	2b00      	cmp	r3, #0
90004d02:	d00a      	beq.n	90004d1a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004d04:	78fa      	ldrb	r2, [r7, #3]
90004d06:	6879      	ldr	r1, [r7, #4]
90004d08:	4613      	mov	r3, r2
90004d0a:	011b      	lsls	r3, r3, #4
90004d0c:	1a9b      	subs	r3, r3, r2
90004d0e:	009b      	lsls	r3, r3, #2
90004d10:	440b      	add	r3, r1
90004d12:	3326      	adds	r3, #38	@ 0x26
90004d14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004d16:	2b02      	cmp	r3, #2
90004d18:	d159      	bne.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004d1a:	78fb      	ldrb	r3, [r7, #3]
90004d1c:	015a      	lsls	r2, r3, #5
90004d1e:	693b      	ldr	r3, [r7, #16]
90004d20:	4413      	add	r3, r2
90004d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d26:	681b      	ldr	r3, [r3, #0]
90004d28:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004d2a:	68fb      	ldr	r3, [r7, #12]
90004d2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004d30:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004d32:	68fb      	ldr	r3, [r7, #12]
90004d34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004d38:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004d3a:	78fb      	ldrb	r3, [r7, #3]
90004d3c:	015a      	lsls	r2, r3, #5
90004d3e:	693b      	ldr	r3, [r7, #16]
90004d40:	4413      	add	r3, r2
90004d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d46:	461a      	mov	r2, r3
90004d48:	68fb      	ldr	r3, [r7, #12]
90004d4a:	6013      	str	r3, [r2, #0]
90004d4c:	e03f      	b.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004d4e:	78fa      	ldrb	r2, [r7, #3]
90004d50:	6879      	ldr	r1, [r7, #4]
90004d52:	4613      	mov	r3, r2
90004d54:	011b      	lsls	r3, r3, #4
90004d56:	1a9b      	subs	r3, r3, r2
90004d58:	009b      	lsls	r3, r3, #2
90004d5a:	440b      	add	r3, r1
90004d5c:	334d      	adds	r3, #77	@ 0x4d
90004d5e:	781b      	ldrb	r3, [r3, #0]
90004d60:	2b08      	cmp	r3, #8
90004d62:	d126      	bne.n	90004db2 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004d64:	78fa      	ldrb	r2, [r7, #3]
90004d66:	6879      	ldr	r1, [r7, #4]
90004d68:	4613      	mov	r3, r2
90004d6a:	011b      	lsls	r3, r3, #4
90004d6c:	1a9b      	subs	r3, r3, r2
90004d6e:	009b      	lsls	r3, r3, #2
90004d70:	440b      	add	r3, r1
90004d72:	334d      	adds	r3, #77	@ 0x4d
90004d74:	2202      	movs	r2, #2
90004d76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004d78:	78fa      	ldrb	r2, [r7, #3]
90004d7a:	6879      	ldr	r1, [r7, #4]
90004d7c:	4613      	mov	r3, r2
90004d7e:	011b      	lsls	r3, r3, #4
90004d80:	1a9b      	subs	r3, r3, r2
90004d82:	009b      	lsls	r3, r3, #2
90004d84:	440b      	add	r3, r1
90004d86:	3344      	adds	r3, #68	@ 0x44
90004d88:	681b      	ldr	r3, [r3, #0]
90004d8a:	1c59      	adds	r1, r3, #1
90004d8c:	6878      	ldr	r0, [r7, #4]
90004d8e:	4613      	mov	r3, r2
90004d90:	011b      	lsls	r3, r3, #4
90004d92:	1a9b      	subs	r3, r3, r2
90004d94:	009b      	lsls	r3, r3, #2
90004d96:	4403      	add	r3, r0
90004d98:	3344      	adds	r3, #68	@ 0x44
90004d9a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004d9c:	78fa      	ldrb	r2, [r7, #3]
90004d9e:	6879      	ldr	r1, [r7, #4]
90004da0:	4613      	mov	r3, r2
90004da2:	011b      	lsls	r3, r3, #4
90004da4:	1a9b      	subs	r3, r3, r2
90004da6:	009b      	lsls	r3, r3, #2
90004da8:	440b      	add	r3, r1
90004daa:	334c      	adds	r3, #76	@ 0x4c
90004dac:	2204      	movs	r2, #4
90004dae:	701a      	strb	r2, [r3, #0]
90004db0:	e00d      	b.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004db2:	78fa      	ldrb	r2, [r7, #3]
90004db4:	6879      	ldr	r1, [r7, #4]
90004db6:	4613      	mov	r3, r2
90004db8:	011b      	lsls	r3, r3, #4
90004dba:	1a9b      	subs	r3, r3, r2
90004dbc:	009b      	lsls	r3, r3, #2
90004dbe:	440b      	add	r3, r1
90004dc0:	334d      	adds	r3, #77	@ 0x4d
90004dc2:	781b      	ldrb	r3, [r3, #0]
90004dc4:	2b02      	cmp	r3, #2
90004dc6:	f000 8100 	beq.w	90004fca <HCD_HC_IN_IRQHandler+0xcca>
90004dca:	e000      	b.n	90004dce <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004dcc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004dce:	78fa      	ldrb	r2, [r7, #3]
90004dd0:	6879      	ldr	r1, [r7, #4]
90004dd2:	4613      	mov	r3, r2
90004dd4:	011b      	lsls	r3, r3, #4
90004dd6:	1a9b      	subs	r3, r3, r2
90004dd8:	009b      	lsls	r3, r3, #2
90004dda:	440b      	add	r3, r1
90004ddc:	334c      	adds	r3, #76	@ 0x4c
90004dde:	781a      	ldrb	r2, [r3, #0]
90004de0:	78fb      	ldrb	r3, [r7, #3]
90004de2:	4619      	mov	r1, r3
90004de4:	6878      	ldr	r0, [r7, #4]
90004de6:	f7fc fa17 	bl	90001218 <HAL_HCD_HC_NotifyURBChange_Callback>
90004dea:	e0ef      	b.n	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004dec:	687b      	ldr	r3, [r7, #4]
90004dee:	681b      	ldr	r3, [r3, #0]
90004df0:	78fa      	ldrb	r2, [r7, #3]
90004df2:	4611      	mov	r1, r2
90004df4:	4618      	mov	r0, r3
90004df6:	f006 fae8 	bl	9000b3ca <USB_ReadChInterrupts>
90004dfa:	4603      	mov	r3, r0
90004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004e00:	2b40      	cmp	r3, #64	@ 0x40
90004e02:	d12f      	bne.n	90004e64 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004e04:	78fb      	ldrb	r3, [r7, #3]
90004e06:	015a      	lsls	r2, r3, #5
90004e08:	693b      	ldr	r3, [r7, #16]
90004e0a:	4413      	add	r3, r2
90004e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e10:	461a      	mov	r2, r3
90004e12:	2340      	movs	r3, #64	@ 0x40
90004e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004e16:	78fa      	ldrb	r2, [r7, #3]
90004e18:	6879      	ldr	r1, [r7, #4]
90004e1a:	4613      	mov	r3, r2
90004e1c:	011b      	lsls	r3, r3, #4
90004e1e:	1a9b      	subs	r3, r3, r2
90004e20:	009b      	lsls	r3, r3, #2
90004e22:	440b      	add	r3, r1
90004e24:	334d      	adds	r3, #77	@ 0x4d
90004e26:	2205      	movs	r2, #5
90004e28:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004e2a:	78fa      	ldrb	r2, [r7, #3]
90004e2c:	6879      	ldr	r1, [r7, #4]
90004e2e:	4613      	mov	r3, r2
90004e30:	011b      	lsls	r3, r3, #4
90004e32:	1a9b      	subs	r3, r3, r2
90004e34:	009b      	lsls	r3, r3, #2
90004e36:	440b      	add	r3, r1
90004e38:	331a      	adds	r3, #26
90004e3a:	781b      	ldrb	r3, [r3, #0]
90004e3c:	2b00      	cmp	r3, #0
90004e3e:	d109      	bne.n	90004e54 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004e40:	78fa      	ldrb	r2, [r7, #3]
90004e42:	6879      	ldr	r1, [r7, #4]
90004e44:	4613      	mov	r3, r2
90004e46:	011b      	lsls	r3, r3, #4
90004e48:	1a9b      	subs	r3, r3, r2
90004e4a:	009b      	lsls	r3, r3, #2
90004e4c:	440b      	add	r3, r1
90004e4e:	3344      	adds	r3, #68	@ 0x44
90004e50:	2200      	movs	r2, #0
90004e52:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e54:	687b      	ldr	r3, [r7, #4]
90004e56:	681b      	ldr	r3, [r3, #0]
90004e58:	78fa      	ldrb	r2, [r7, #3]
90004e5a:	4611      	mov	r1, r2
90004e5c:	4618      	mov	r0, r3
90004e5e:	f006 fb31 	bl	9000b4c4 <USB_HC_Halt>
90004e62:	e0b3      	b.n	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004e64:	687b      	ldr	r3, [r7, #4]
90004e66:	681b      	ldr	r3, [r3, #0]
90004e68:	78fa      	ldrb	r2, [r7, #3]
90004e6a:	4611      	mov	r1, r2
90004e6c:	4618      	mov	r0, r3
90004e6e:	f006 faac 	bl	9000b3ca <USB_ReadChInterrupts>
90004e72:	4603      	mov	r3, r0
90004e74:	f003 0310 	and.w	r3, r3, #16
90004e78:	2b10      	cmp	r3, #16
90004e7a:	f040 80a7 	bne.w	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004e7e:	78fa      	ldrb	r2, [r7, #3]
90004e80:	6879      	ldr	r1, [r7, #4]
90004e82:	4613      	mov	r3, r2
90004e84:	011b      	lsls	r3, r3, #4
90004e86:	1a9b      	subs	r3, r3, r2
90004e88:	009b      	lsls	r3, r3, #2
90004e8a:	440b      	add	r3, r1
90004e8c:	3326      	adds	r3, #38	@ 0x26
90004e8e:	781b      	ldrb	r3, [r3, #0]
90004e90:	2b03      	cmp	r3, #3
90004e92:	d11b      	bne.n	90004ecc <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004e94:	78fa      	ldrb	r2, [r7, #3]
90004e96:	6879      	ldr	r1, [r7, #4]
90004e98:	4613      	mov	r3, r2
90004e9a:	011b      	lsls	r3, r3, #4
90004e9c:	1a9b      	subs	r3, r3, r2
90004e9e:	009b      	lsls	r3, r3, #2
90004ea0:	440b      	add	r3, r1
90004ea2:	3344      	adds	r3, #68	@ 0x44
90004ea4:	2200      	movs	r2, #0
90004ea6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004ea8:	78fa      	ldrb	r2, [r7, #3]
90004eaa:	6879      	ldr	r1, [r7, #4]
90004eac:	4613      	mov	r3, r2
90004eae:	011b      	lsls	r3, r3, #4
90004eb0:	1a9b      	subs	r3, r3, r2
90004eb2:	009b      	lsls	r3, r3, #2
90004eb4:	440b      	add	r3, r1
90004eb6:	334d      	adds	r3, #77	@ 0x4d
90004eb8:	2204      	movs	r2, #4
90004eba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ebc:	687b      	ldr	r3, [r7, #4]
90004ebe:	681b      	ldr	r3, [r3, #0]
90004ec0:	78fa      	ldrb	r2, [r7, #3]
90004ec2:	4611      	mov	r1, r2
90004ec4:	4618      	mov	r0, r3
90004ec6:	f006 fafd 	bl	9000b4c4 <USB_HC_Halt>
90004eca:	e03f      	b.n	90004f4c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ecc:	78fa      	ldrb	r2, [r7, #3]
90004ece:	6879      	ldr	r1, [r7, #4]
90004ed0:	4613      	mov	r3, r2
90004ed2:	011b      	lsls	r3, r3, #4
90004ed4:	1a9b      	subs	r3, r3, r2
90004ed6:	009b      	lsls	r3, r3, #2
90004ed8:	440b      	add	r3, r1
90004eda:	3326      	adds	r3, #38	@ 0x26
90004edc:	781b      	ldrb	r3, [r3, #0]
90004ede:	2b00      	cmp	r3, #0
90004ee0:	d00a      	beq.n	90004ef8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ee2:	78fa      	ldrb	r2, [r7, #3]
90004ee4:	6879      	ldr	r1, [r7, #4]
90004ee6:	4613      	mov	r3, r2
90004ee8:	011b      	lsls	r3, r3, #4
90004eea:	1a9b      	subs	r3, r3, r2
90004eec:	009b      	lsls	r3, r3, #2
90004eee:	440b      	add	r3, r1
90004ef0:	3326      	adds	r3, #38	@ 0x26
90004ef2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ef4:	2b02      	cmp	r3, #2
90004ef6:	d129      	bne.n	90004f4c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004ef8:	78fa      	ldrb	r2, [r7, #3]
90004efa:	6879      	ldr	r1, [r7, #4]
90004efc:	4613      	mov	r3, r2
90004efe:	011b      	lsls	r3, r3, #4
90004f00:	1a9b      	subs	r3, r3, r2
90004f02:	009b      	lsls	r3, r3, #2
90004f04:	440b      	add	r3, r1
90004f06:	3344      	adds	r3, #68	@ 0x44
90004f08:	2200      	movs	r2, #0
90004f0a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004f0c:	687b      	ldr	r3, [r7, #4]
90004f0e:	799b      	ldrb	r3, [r3, #6]
90004f10:	2b00      	cmp	r3, #0
90004f12:	d00a      	beq.n	90004f2a <HCD_HC_IN_IRQHandler+0xc2a>
90004f14:	78fa      	ldrb	r2, [r7, #3]
90004f16:	6879      	ldr	r1, [r7, #4]
90004f18:	4613      	mov	r3, r2
90004f1a:	011b      	lsls	r3, r3, #4
90004f1c:	1a9b      	subs	r3, r3, r2
90004f1e:	009b      	lsls	r3, r3, #2
90004f20:	440b      	add	r3, r1
90004f22:	331b      	adds	r3, #27
90004f24:	781b      	ldrb	r3, [r3, #0]
90004f26:	2b01      	cmp	r3, #1
90004f28:	d110      	bne.n	90004f4c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004f2a:	78fa      	ldrb	r2, [r7, #3]
90004f2c:	6879      	ldr	r1, [r7, #4]
90004f2e:	4613      	mov	r3, r2
90004f30:	011b      	lsls	r3, r3, #4
90004f32:	1a9b      	subs	r3, r3, r2
90004f34:	009b      	lsls	r3, r3, #2
90004f36:	440b      	add	r3, r1
90004f38:	334d      	adds	r3, #77	@ 0x4d
90004f3a:	2204      	movs	r2, #4
90004f3c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f3e:	687b      	ldr	r3, [r7, #4]
90004f40:	681b      	ldr	r3, [r3, #0]
90004f42:	78fa      	ldrb	r2, [r7, #3]
90004f44:	4611      	mov	r1, r2
90004f46:	4618      	mov	r0, r3
90004f48:	f006 fabc 	bl	9000b4c4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004f4c:	78fa      	ldrb	r2, [r7, #3]
90004f4e:	6879      	ldr	r1, [r7, #4]
90004f50:	4613      	mov	r3, r2
90004f52:	011b      	lsls	r3, r3, #4
90004f54:	1a9b      	subs	r3, r3, r2
90004f56:	009b      	lsls	r3, r3, #2
90004f58:	440b      	add	r3, r1
90004f5a:	331b      	adds	r3, #27
90004f5c:	781b      	ldrb	r3, [r3, #0]
90004f5e:	2b01      	cmp	r3, #1
90004f60:	d129      	bne.n	90004fb6 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004f62:	78fa      	ldrb	r2, [r7, #3]
90004f64:	6879      	ldr	r1, [r7, #4]
90004f66:	4613      	mov	r3, r2
90004f68:	011b      	lsls	r3, r3, #4
90004f6a:	1a9b      	subs	r3, r3, r2
90004f6c:	009b      	lsls	r3, r3, #2
90004f6e:	440b      	add	r3, r1
90004f70:	331b      	adds	r3, #27
90004f72:	2200      	movs	r2, #0
90004f74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004f76:	78fb      	ldrb	r3, [r7, #3]
90004f78:	015a      	lsls	r2, r3, #5
90004f7a:	693b      	ldr	r3, [r7, #16]
90004f7c:	4413      	add	r3, r2
90004f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f82:	685b      	ldr	r3, [r3, #4]
90004f84:	78fa      	ldrb	r2, [r7, #3]
90004f86:	0151      	lsls	r1, r2, #5
90004f88:	693a      	ldr	r2, [r7, #16]
90004f8a:	440a      	add	r2, r1
90004f8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004f94:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004f96:	78fb      	ldrb	r3, [r7, #3]
90004f98:	015a      	lsls	r2, r3, #5
90004f9a:	693b      	ldr	r3, [r7, #16]
90004f9c:	4413      	add	r3, r2
90004f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fa2:	68db      	ldr	r3, [r3, #12]
90004fa4:	78fa      	ldrb	r2, [r7, #3]
90004fa6:	0151      	lsls	r1, r2, #5
90004fa8:	693a      	ldr	r2, [r7, #16]
90004faa:	440a      	add	r2, r1
90004fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004fb0:	f043 0320 	orr.w	r3, r3, #32
90004fb4:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004fb6:	78fb      	ldrb	r3, [r7, #3]
90004fb8:	015a      	lsls	r2, r3, #5
90004fba:	693b      	ldr	r3, [r7, #16]
90004fbc:	4413      	add	r3, r2
90004fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fc2:	461a      	mov	r2, r3
90004fc4:	2310      	movs	r3, #16
90004fc6:	6093      	str	r3, [r2, #8]
90004fc8:	e000      	b.n	90004fcc <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004fca:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004fcc:	3718      	adds	r7, #24
90004fce:	46bd      	mov	sp, r7
90004fd0:	bd80      	pop	{r7, pc}

90004fd2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004fd2:	b580      	push	{r7, lr}
90004fd4:	b086      	sub	sp, #24
90004fd6:	af00      	add	r7, sp, #0
90004fd8:	6078      	str	r0, [r7, #4]
90004fda:	460b      	mov	r3, r1
90004fdc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004fde:	687b      	ldr	r3, [r7, #4]
90004fe0:	681b      	ldr	r3, [r3, #0]
90004fe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004fe4:	697b      	ldr	r3, [r7, #20]
90004fe6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004fe8:	687b      	ldr	r3, [r7, #4]
90004fea:	681b      	ldr	r3, [r3, #0]
90004fec:	78fa      	ldrb	r2, [r7, #3]
90004fee:	4611      	mov	r1, r2
90004ff0:	4618      	mov	r0, r3
90004ff2:	f006 f9ea 	bl	9000b3ca <USB_ReadChInterrupts>
90004ff6:	4603      	mov	r3, r0
90004ff8:	f003 0304 	and.w	r3, r3, #4
90004ffc:	2b04      	cmp	r3, #4
90004ffe:	d11b      	bne.n	90005038 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90005000:	78fb      	ldrb	r3, [r7, #3]
90005002:	015a      	lsls	r2, r3, #5
90005004:	693b      	ldr	r3, [r7, #16]
90005006:	4413      	add	r3, r2
90005008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000500c:	461a      	mov	r2, r3
9000500e:	2304      	movs	r3, #4
90005010:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90005012:	78fa      	ldrb	r2, [r7, #3]
90005014:	6879      	ldr	r1, [r7, #4]
90005016:	4613      	mov	r3, r2
90005018:	011b      	lsls	r3, r3, #4
9000501a:	1a9b      	subs	r3, r3, r2
9000501c:	009b      	lsls	r3, r3, #2
9000501e:	440b      	add	r3, r1
90005020:	334d      	adds	r3, #77	@ 0x4d
90005022:	2207      	movs	r2, #7
90005024:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005026:	687b      	ldr	r3, [r7, #4]
90005028:	681b      	ldr	r3, [r3, #0]
9000502a:	78fa      	ldrb	r2, [r7, #3]
9000502c:	4611      	mov	r1, r2
9000502e:	4618      	mov	r0, r3
90005030:	f006 fa48 	bl	9000b4c4 <USB_HC_Halt>
90005034:	f000 bc89 	b.w	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90005038:	687b      	ldr	r3, [r7, #4]
9000503a:	681b      	ldr	r3, [r3, #0]
9000503c:	78fa      	ldrb	r2, [r7, #3]
9000503e:	4611      	mov	r1, r2
90005040:	4618      	mov	r0, r3
90005042:	f006 f9c2 	bl	9000b3ca <USB_ReadChInterrupts>
90005046:	4603      	mov	r3, r0
90005048:	f003 0320 	and.w	r3, r3, #32
9000504c:	2b20      	cmp	r3, #32
9000504e:	f040 8082 	bne.w	90005156 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90005052:	78fb      	ldrb	r3, [r7, #3]
90005054:	015a      	lsls	r2, r3, #5
90005056:	693b      	ldr	r3, [r7, #16]
90005058:	4413      	add	r3, r2
9000505a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000505e:	461a      	mov	r2, r3
90005060:	2320      	movs	r3, #32
90005062:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90005064:	78fa      	ldrb	r2, [r7, #3]
90005066:	6879      	ldr	r1, [r7, #4]
90005068:	4613      	mov	r3, r2
9000506a:	011b      	lsls	r3, r3, #4
9000506c:	1a9b      	subs	r3, r3, r2
9000506e:	009b      	lsls	r3, r3, #2
90005070:	440b      	add	r3, r1
90005072:	3319      	adds	r3, #25
90005074:	781b      	ldrb	r3, [r3, #0]
90005076:	2b01      	cmp	r3, #1
90005078:	d124      	bne.n	900050c4 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
9000507a:	78fa      	ldrb	r2, [r7, #3]
9000507c:	6879      	ldr	r1, [r7, #4]
9000507e:	4613      	mov	r3, r2
90005080:	011b      	lsls	r3, r3, #4
90005082:	1a9b      	subs	r3, r3, r2
90005084:	009b      	lsls	r3, r3, #2
90005086:	440b      	add	r3, r1
90005088:	3319      	adds	r3, #25
9000508a:	2200      	movs	r2, #0
9000508c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000508e:	78fa      	ldrb	r2, [r7, #3]
90005090:	6879      	ldr	r1, [r7, #4]
90005092:	4613      	mov	r3, r2
90005094:	011b      	lsls	r3, r3, #4
90005096:	1a9b      	subs	r3, r3, r2
90005098:	009b      	lsls	r3, r3, #2
9000509a:	440b      	add	r3, r1
9000509c:	334c      	adds	r3, #76	@ 0x4c
9000509e:	2202      	movs	r2, #2
900050a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900050a2:	78fa      	ldrb	r2, [r7, #3]
900050a4:	6879      	ldr	r1, [r7, #4]
900050a6:	4613      	mov	r3, r2
900050a8:	011b      	lsls	r3, r3, #4
900050aa:	1a9b      	subs	r3, r3, r2
900050ac:	009b      	lsls	r3, r3, #2
900050ae:	440b      	add	r3, r1
900050b0:	334d      	adds	r3, #77	@ 0x4d
900050b2:	2203      	movs	r2, #3
900050b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900050b6:	687b      	ldr	r3, [r7, #4]
900050b8:	681b      	ldr	r3, [r3, #0]
900050ba:	78fa      	ldrb	r2, [r7, #3]
900050bc:	4611      	mov	r1, r2
900050be:	4618      	mov	r0, r3
900050c0:	f006 fa00 	bl	9000b4c4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
900050c4:	78fa      	ldrb	r2, [r7, #3]
900050c6:	6879      	ldr	r1, [r7, #4]
900050c8:	4613      	mov	r3, r2
900050ca:	011b      	lsls	r3, r3, #4
900050cc:	1a9b      	subs	r3, r3, r2
900050ce:	009b      	lsls	r3, r3, #2
900050d0:	440b      	add	r3, r1
900050d2:	331a      	adds	r3, #26
900050d4:	781b      	ldrb	r3, [r3, #0]
900050d6:	2b01      	cmp	r3, #1
900050d8:	f040 8437 	bne.w	9000594a <HCD_HC_OUT_IRQHandler+0x978>
900050dc:	78fa      	ldrb	r2, [r7, #3]
900050de:	6879      	ldr	r1, [r7, #4]
900050e0:	4613      	mov	r3, r2
900050e2:	011b      	lsls	r3, r3, #4
900050e4:	1a9b      	subs	r3, r3, r2
900050e6:	009b      	lsls	r3, r3, #2
900050e8:	440b      	add	r3, r1
900050ea:	331b      	adds	r3, #27
900050ec:	781b      	ldrb	r3, [r3, #0]
900050ee:	2b00      	cmp	r3, #0
900050f0:	f040 842b 	bne.w	9000594a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
900050f4:	78fa      	ldrb	r2, [r7, #3]
900050f6:	6879      	ldr	r1, [r7, #4]
900050f8:	4613      	mov	r3, r2
900050fa:	011b      	lsls	r3, r3, #4
900050fc:	1a9b      	subs	r3, r3, r2
900050fe:	009b      	lsls	r3, r3, #2
90005100:	440b      	add	r3, r1
90005102:	3326      	adds	r3, #38	@ 0x26
90005104:	781b      	ldrb	r3, [r3, #0]
90005106:	2b01      	cmp	r3, #1
90005108:	d009      	beq.n	9000511e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
9000510a:	78fa      	ldrb	r2, [r7, #3]
9000510c:	6879      	ldr	r1, [r7, #4]
9000510e:	4613      	mov	r3, r2
90005110:	011b      	lsls	r3, r3, #4
90005112:	1a9b      	subs	r3, r3, r2
90005114:	009b      	lsls	r3, r3, #2
90005116:	440b      	add	r3, r1
90005118:	331b      	adds	r3, #27
9000511a:	2201      	movs	r2, #1
9000511c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
9000511e:	78fa      	ldrb	r2, [r7, #3]
90005120:	6879      	ldr	r1, [r7, #4]
90005122:	4613      	mov	r3, r2
90005124:	011b      	lsls	r3, r3, #4
90005126:	1a9b      	subs	r3, r3, r2
90005128:	009b      	lsls	r3, r3, #2
9000512a:	440b      	add	r3, r1
9000512c:	334d      	adds	r3, #77	@ 0x4d
9000512e:	2203      	movs	r2, #3
90005130:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005132:	687b      	ldr	r3, [r7, #4]
90005134:	681b      	ldr	r3, [r3, #0]
90005136:	78fa      	ldrb	r2, [r7, #3]
90005138:	4611      	mov	r1, r2
9000513a:	4618      	mov	r0, r3
9000513c:	f006 f9c2 	bl	9000b4c4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90005140:	78fa      	ldrb	r2, [r7, #3]
90005142:	6879      	ldr	r1, [r7, #4]
90005144:	4613      	mov	r3, r2
90005146:	011b      	lsls	r3, r3, #4
90005148:	1a9b      	subs	r3, r3, r2
9000514a:	009b      	lsls	r3, r3, #2
9000514c:	440b      	add	r3, r1
9000514e:	3344      	adds	r3, #68	@ 0x44
90005150:	2200      	movs	r2, #0
90005152:	601a      	str	r2, [r3, #0]
90005154:	e3f9      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90005156:	687b      	ldr	r3, [r7, #4]
90005158:	681b      	ldr	r3, [r3, #0]
9000515a:	78fa      	ldrb	r2, [r7, #3]
9000515c:	4611      	mov	r1, r2
9000515e:	4618      	mov	r0, r3
90005160:	f006 f933 	bl	9000b3ca <USB_ReadChInterrupts>
90005164:	4603      	mov	r3, r0
90005166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000516a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000516e:	d111      	bne.n	90005194 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90005170:	78fb      	ldrb	r3, [r7, #3]
90005172:	015a      	lsls	r2, r3, #5
90005174:	693b      	ldr	r3, [r7, #16]
90005176:	4413      	add	r3, r2
90005178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000517c:	461a      	mov	r2, r3
9000517e:	f44f 7300 	mov.w	r3, #512	@ 0x200
90005182:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005184:	687b      	ldr	r3, [r7, #4]
90005186:	681b      	ldr	r3, [r3, #0]
90005188:	78fa      	ldrb	r2, [r7, #3]
9000518a:	4611      	mov	r1, r2
9000518c:	4618      	mov	r0, r3
9000518e:	f006 f999 	bl	9000b4c4 <USB_HC_Halt>
90005192:	e3da      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90005194:	687b      	ldr	r3, [r7, #4]
90005196:	681b      	ldr	r3, [r3, #0]
90005198:	78fa      	ldrb	r2, [r7, #3]
9000519a:	4611      	mov	r1, r2
9000519c:	4618      	mov	r0, r3
9000519e:	f006 f914 	bl	9000b3ca <USB_ReadChInterrupts>
900051a2:	4603      	mov	r3, r0
900051a4:	f003 0301 	and.w	r3, r3, #1
900051a8:	2b01      	cmp	r3, #1
900051aa:	d168      	bne.n	9000527e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900051ac:	78fa      	ldrb	r2, [r7, #3]
900051ae:	6879      	ldr	r1, [r7, #4]
900051b0:	4613      	mov	r3, r2
900051b2:	011b      	lsls	r3, r3, #4
900051b4:	1a9b      	subs	r3, r3, r2
900051b6:	009b      	lsls	r3, r3, #2
900051b8:	440b      	add	r3, r1
900051ba:	3344      	adds	r3, #68	@ 0x44
900051bc:	2200      	movs	r2, #0
900051be:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
900051c0:	687b      	ldr	r3, [r7, #4]
900051c2:	681b      	ldr	r3, [r3, #0]
900051c4:	78fa      	ldrb	r2, [r7, #3]
900051c6:	4611      	mov	r1, r2
900051c8:	4618      	mov	r0, r3
900051ca:	f006 f8fe 	bl	9000b3ca <USB_ReadChInterrupts>
900051ce:	4603      	mov	r3, r0
900051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900051d4:	2b40      	cmp	r3, #64	@ 0x40
900051d6:	d112      	bne.n	900051fe <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
900051d8:	78fa      	ldrb	r2, [r7, #3]
900051da:	6879      	ldr	r1, [r7, #4]
900051dc:	4613      	mov	r3, r2
900051de:	011b      	lsls	r3, r3, #4
900051e0:	1a9b      	subs	r3, r3, r2
900051e2:	009b      	lsls	r3, r3, #2
900051e4:	440b      	add	r3, r1
900051e6:	3319      	adds	r3, #25
900051e8:	2201      	movs	r2, #1
900051ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
900051ec:	78fb      	ldrb	r3, [r7, #3]
900051ee:	015a      	lsls	r2, r3, #5
900051f0:	693b      	ldr	r3, [r7, #16]
900051f2:	4413      	add	r3, r2
900051f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051f8:	461a      	mov	r2, r3
900051fa:	2340      	movs	r3, #64	@ 0x40
900051fc:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
900051fe:	78fa      	ldrb	r2, [r7, #3]
90005200:	6879      	ldr	r1, [r7, #4]
90005202:	4613      	mov	r3, r2
90005204:	011b      	lsls	r3, r3, #4
90005206:	1a9b      	subs	r3, r3, r2
90005208:	009b      	lsls	r3, r3, #2
9000520a:	440b      	add	r3, r1
9000520c:	331b      	adds	r3, #27
9000520e:	781b      	ldrb	r3, [r3, #0]
90005210:	2b00      	cmp	r3, #0
90005212:	d019      	beq.n	90005248 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90005214:	78fa      	ldrb	r2, [r7, #3]
90005216:	6879      	ldr	r1, [r7, #4]
90005218:	4613      	mov	r3, r2
9000521a:	011b      	lsls	r3, r3, #4
9000521c:	1a9b      	subs	r3, r3, r2
9000521e:	009b      	lsls	r3, r3, #2
90005220:	440b      	add	r3, r1
90005222:	331b      	adds	r3, #27
90005224:	2200      	movs	r2, #0
90005226:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005228:	78fb      	ldrb	r3, [r7, #3]
9000522a:	015a      	lsls	r2, r3, #5
9000522c:	693b      	ldr	r3, [r7, #16]
9000522e:	4413      	add	r3, r2
90005230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005234:	685b      	ldr	r3, [r3, #4]
90005236:	78fa      	ldrb	r2, [r7, #3]
90005238:	0151      	lsls	r1, r2, #5
9000523a:	693a      	ldr	r2, [r7, #16]
9000523c:	440a      	add	r2, r1
9000523e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005246:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90005248:	78fb      	ldrb	r3, [r7, #3]
9000524a:	015a      	lsls	r2, r3, #5
9000524c:	693b      	ldr	r3, [r7, #16]
9000524e:	4413      	add	r3, r2
90005250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005254:	461a      	mov	r2, r3
90005256:	2301      	movs	r3, #1
90005258:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
9000525a:	78fa      	ldrb	r2, [r7, #3]
9000525c:	6879      	ldr	r1, [r7, #4]
9000525e:	4613      	mov	r3, r2
90005260:	011b      	lsls	r3, r3, #4
90005262:	1a9b      	subs	r3, r3, r2
90005264:	009b      	lsls	r3, r3, #2
90005266:	440b      	add	r3, r1
90005268:	334d      	adds	r3, #77	@ 0x4d
9000526a:	2201      	movs	r2, #1
9000526c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000526e:	687b      	ldr	r3, [r7, #4]
90005270:	681b      	ldr	r3, [r3, #0]
90005272:	78fa      	ldrb	r2, [r7, #3]
90005274:	4611      	mov	r1, r2
90005276:	4618      	mov	r0, r3
90005278:	f006 f924 	bl	9000b4c4 <USB_HC_Halt>
9000527c:	e365      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
9000527e:	687b      	ldr	r3, [r7, #4]
90005280:	681b      	ldr	r3, [r3, #0]
90005282:	78fa      	ldrb	r2, [r7, #3]
90005284:	4611      	mov	r1, r2
90005286:	4618      	mov	r0, r3
90005288:	f006 f89f 	bl	9000b3ca <USB_ReadChInterrupts>
9000528c:	4603      	mov	r3, r0
9000528e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005292:	2b40      	cmp	r3, #64	@ 0x40
90005294:	d139      	bne.n	9000530a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90005296:	78fa      	ldrb	r2, [r7, #3]
90005298:	6879      	ldr	r1, [r7, #4]
9000529a:	4613      	mov	r3, r2
9000529c:	011b      	lsls	r3, r3, #4
9000529e:	1a9b      	subs	r3, r3, r2
900052a0:	009b      	lsls	r3, r3, #2
900052a2:	440b      	add	r3, r1
900052a4:	334d      	adds	r3, #77	@ 0x4d
900052a6:	2205      	movs	r2, #5
900052a8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900052aa:	78fa      	ldrb	r2, [r7, #3]
900052ac:	6879      	ldr	r1, [r7, #4]
900052ae:	4613      	mov	r3, r2
900052b0:	011b      	lsls	r3, r3, #4
900052b2:	1a9b      	subs	r3, r3, r2
900052b4:	009b      	lsls	r3, r3, #2
900052b6:	440b      	add	r3, r1
900052b8:	331a      	adds	r3, #26
900052ba:	781b      	ldrb	r3, [r3, #0]
900052bc:	2b00      	cmp	r3, #0
900052be:	d109      	bne.n	900052d4 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
900052c0:	78fa      	ldrb	r2, [r7, #3]
900052c2:	6879      	ldr	r1, [r7, #4]
900052c4:	4613      	mov	r3, r2
900052c6:	011b      	lsls	r3, r3, #4
900052c8:	1a9b      	subs	r3, r3, r2
900052ca:	009b      	lsls	r3, r3, #2
900052cc:	440b      	add	r3, r1
900052ce:	3319      	adds	r3, #25
900052d0:	2201      	movs	r2, #1
900052d2:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
900052d4:	78fa      	ldrb	r2, [r7, #3]
900052d6:	6879      	ldr	r1, [r7, #4]
900052d8:	4613      	mov	r3, r2
900052da:	011b      	lsls	r3, r3, #4
900052dc:	1a9b      	subs	r3, r3, r2
900052de:	009b      	lsls	r3, r3, #2
900052e0:	440b      	add	r3, r1
900052e2:	3344      	adds	r3, #68	@ 0x44
900052e4:	2200      	movs	r2, #0
900052e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900052e8:	687b      	ldr	r3, [r7, #4]
900052ea:	681b      	ldr	r3, [r3, #0]
900052ec:	78fa      	ldrb	r2, [r7, #3]
900052ee:	4611      	mov	r1, r2
900052f0:	4618      	mov	r0, r3
900052f2:	f006 f8e7 	bl	9000b4c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
900052f6:	78fb      	ldrb	r3, [r7, #3]
900052f8:	015a      	lsls	r2, r3, #5
900052fa:	693b      	ldr	r3, [r7, #16]
900052fc:	4413      	add	r3, r2
900052fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005302:	461a      	mov	r2, r3
90005304:	2340      	movs	r3, #64	@ 0x40
90005306:	6093      	str	r3, [r2, #8]
90005308:	e31f      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000530a:	687b      	ldr	r3, [r7, #4]
9000530c:	681b      	ldr	r3, [r3, #0]
9000530e:	78fa      	ldrb	r2, [r7, #3]
90005310:	4611      	mov	r1, r2
90005312:	4618      	mov	r0, r3
90005314:	f006 f859 	bl	9000b3ca <USB_ReadChInterrupts>
90005318:	4603      	mov	r3, r0
9000531a:	f003 0308 	and.w	r3, r3, #8
9000531e:	2b08      	cmp	r3, #8
90005320:	d11a      	bne.n	90005358 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90005322:	78fb      	ldrb	r3, [r7, #3]
90005324:	015a      	lsls	r2, r3, #5
90005326:	693b      	ldr	r3, [r7, #16]
90005328:	4413      	add	r3, r2
9000532a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000532e:	461a      	mov	r2, r3
90005330:	2308      	movs	r3, #8
90005332:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90005334:	78fa      	ldrb	r2, [r7, #3]
90005336:	6879      	ldr	r1, [r7, #4]
90005338:	4613      	mov	r3, r2
9000533a:	011b      	lsls	r3, r3, #4
9000533c:	1a9b      	subs	r3, r3, r2
9000533e:	009b      	lsls	r3, r3, #2
90005340:	440b      	add	r3, r1
90005342:	334d      	adds	r3, #77	@ 0x4d
90005344:	2206      	movs	r2, #6
90005346:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005348:	687b      	ldr	r3, [r7, #4]
9000534a:	681b      	ldr	r3, [r3, #0]
9000534c:	78fa      	ldrb	r2, [r7, #3]
9000534e:	4611      	mov	r1, r2
90005350:	4618      	mov	r0, r3
90005352:	f006 f8b7 	bl	9000b4c4 <USB_HC_Halt>
90005356:	e2f8      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90005358:	687b      	ldr	r3, [r7, #4]
9000535a:	681b      	ldr	r3, [r3, #0]
9000535c:	78fa      	ldrb	r2, [r7, #3]
9000535e:	4611      	mov	r1, r2
90005360:	4618      	mov	r0, r3
90005362:	f006 f832 	bl	9000b3ca <USB_ReadChInterrupts>
90005366:	4603      	mov	r3, r0
90005368:	f003 0310 	and.w	r3, r3, #16
9000536c:	2b10      	cmp	r3, #16
9000536e:	d144      	bne.n	900053fa <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005370:	78fa      	ldrb	r2, [r7, #3]
90005372:	6879      	ldr	r1, [r7, #4]
90005374:	4613      	mov	r3, r2
90005376:	011b      	lsls	r3, r3, #4
90005378:	1a9b      	subs	r3, r3, r2
9000537a:	009b      	lsls	r3, r3, #2
9000537c:	440b      	add	r3, r1
9000537e:	3344      	adds	r3, #68	@ 0x44
90005380:	2200      	movs	r2, #0
90005382:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90005384:	78fa      	ldrb	r2, [r7, #3]
90005386:	6879      	ldr	r1, [r7, #4]
90005388:	4613      	mov	r3, r2
9000538a:	011b      	lsls	r3, r3, #4
9000538c:	1a9b      	subs	r3, r3, r2
9000538e:	009b      	lsls	r3, r3, #2
90005390:	440b      	add	r3, r1
90005392:	334d      	adds	r3, #77	@ 0x4d
90005394:	2204      	movs	r2, #4
90005396:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90005398:	78fa      	ldrb	r2, [r7, #3]
9000539a:	6879      	ldr	r1, [r7, #4]
9000539c:	4613      	mov	r3, r2
9000539e:	011b      	lsls	r3, r3, #4
900053a0:	1a9b      	subs	r3, r3, r2
900053a2:	009b      	lsls	r3, r3, #2
900053a4:	440b      	add	r3, r1
900053a6:	3319      	adds	r3, #25
900053a8:	781b      	ldrb	r3, [r3, #0]
900053aa:	2b00      	cmp	r3, #0
900053ac:	d114      	bne.n	900053d8 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
900053ae:	78fa      	ldrb	r2, [r7, #3]
900053b0:	6879      	ldr	r1, [r7, #4]
900053b2:	4613      	mov	r3, r2
900053b4:	011b      	lsls	r3, r3, #4
900053b6:	1a9b      	subs	r3, r3, r2
900053b8:	009b      	lsls	r3, r3, #2
900053ba:	440b      	add	r3, r1
900053bc:	3318      	adds	r3, #24
900053be:	781b      	ldrb	r3, [r3, #0]
900053c0:	2b00      	cmp	r3, #0
900053c2:	d109      	bne.n	900053d8 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
900053c4:	78fa      	ldrb	r2, [r7, #3]
900053c6:	6879      	ldr	r1, [r7, #4]
900053c8:	4613      	mov	r3, r2
900053ca:	011b      	lsls	r3, r3, #4
900053cc:	1a9b      	subs	r3, r3, r2
900053ce:	009b      	lsls	r3, r3, #2
900053d0:	440b      	add	r3, r1
900053d2:	3319      	adds	r3, #25
900053d4:	2201      	movs	r2, #1
900053d6:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
900053d8:	687b      	ldr	r3, [r7, #4]
900053da:	681b      	ldr	r3, [r3, #0]
900053dc:	78fa      	ldrb	r2, [r7, #3]
900053de:	4611      	mov	r1, r2
900053e0:	4618      	mov	r0, r3
900053e2:	f006 f86f 	bl	9000b4c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900053e6:	78fb      	ldrb	r3, [r7, #3]
900053e8:	015a      	lsls	r2, r3, #5
900053ea:	693b      	ldr	r3, [r7, #16]
900053ec:	4413      	add	r3, r2
900053ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053f2:	461a      	mov	r2, r3
900053f4:	2310      	movs	r3, #16
900053f6:	6093      	str	r3, [r2, #8]
900053f8:	e2a7      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900053fa:	687b      	ldr	r3, [r7, #4]
900053fc:	681b      	ldr	r3, [r3, #0]
900053fe:	78fa      	ldrb	r2, [r7, #3]
90005400:	4611      	mov	r1, r2
90005402:	4618      	mov	r0, r3
90005404:	f005 ffe1 	bl	9000b3ca <USB_ReadChInterrupts>
90005408:	4603      	mov	r3, r0
9000540a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000540e:	2b80      	cmp	r3, #128	@ 0x80
90005410:	f040 8083 	bne.w	9000551a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90005414:	687b      	ldr	r3, [r7, #4]
90005416:	799b      	ldrb	r3, [r3, #6]
90005418:	2b00      	cmp	r3, #0
9000541a:	d111      	bne.n	90005440 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
9000541c:	78fa      	ldrb	r2, [r7, #3]
9000541e:	6879      	ldr	r1, [r7, #4]
90005420:	4613      	mov	r3, r2
90005422:	011b      	lsls	r3, r3, #4
90005424:	1a9b      	subs	r3, r3, r2
90005426:	009b      	lsls	r3, r3, #2
90005428:	440b      	add	r3, r1
9000542a:	334d      	adds	r3, #77	@ 0x4d
9000542c:	2207      	movs	r2, #7
9000542e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005430:	687b      	ldr	r3, [r7, #4]
90005432:	681b      	ldr	r3, [r3, #0]
90005434:	78fa      	ldrb	r2, [r7, #3]
90005436:	4611      	mov	r1, r2
90005438:	4618      	mov	r0, r3
9000543a:	f006 f843 	bl	9000b4c4 <USB_HC_Halt>
9000543e:	e062      	b.n	90005506 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005440:	78fa      	ldrb	r2, [r7, #3]
90005442:	6879      	ldr	r1, [r7, #4]
90005444:	4613      	mov	r3, r2
90005446:	011b      	lsls	r3, r3, #4
90005448:	1a9b      	subs	r3, r3, r2
9000544a:	009b      	lsls	r3, r3, #2
9000544c:	440b      	add	r3, r1
9000544e:	3344      	adds	r3, #68	@ 0x44
90005450:	681b      	ldr	r3, [r3, #0]
90005452:	1c59      	adds	r1, r3, #1
90005454:	6878      	ldr	r0, [r7, #4]
90005456:	4613      	mov	r3, r2
90005458:	011b      	lsls	r3, r3, #4
9000545a:	1a9b      	subs	r3, r3, r2
9000545c:	009b      	lsls	r3, r3, #2
9000545e:	4403      	add	r3, r0
90005460:	3344      	adds	r3, #68	@ 0x44
90005462:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005464:	78fa      	ldrb	r2, [r7, #3]
90005466:	6879      	ldr	r1, [r7, #4]
90005468:	4613      	mov	r3, r2
9000546a:	011b      	lsls	r3, r3, #4
9000546c:	1a9b      	subs	r3, r3, r2
9000546e:	009b      	lsls	r3, r3, #2
90005470:	440b      	add	r3, r1
90005472:	3344      	adds	r3, #68	@ 0x44
90005474:	681b      	ldr	r3, [r3, #0]
90005476:	2b02      	cmp	r3, #2
90005478:	d922      	bls.n	900054c0 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
9000547a:	78fa      	ldrb	r2, [r7, #3]
9000547c:	6879      	ldr	r1, [r7, #4]
9000547e:	4613      	mov	r3, r2
90005480:	011b      	lsls	r3, r3, #4
90005482:	1a9b      	subs	r3, r3, r2
90005484:	009b      	lsls	r3, r3, #2
90005486:	440b      	add	r3, r1
90005488:	3344      	adds	r3, #68	@ 0x44
9000548a:	2200      	movs	r2, #0
9000548c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
9000548e:	78fa      	ldrb	r2, [r7, #3]
90005490:	6879      	ldr	r1, [r7, #4]
90005492:	4613      	mov	r3, r2
90005494:	011b      	lsls	r3, r3, #4
90005496:	1a9b      	subs	r3, r3, r2
90005498:	009b      	lsls	r3, r3, #2
9000549a:	440b      	add	r3, r1
9000549c:	334c      	adds	r3, #76	@ 0x4c
9000549e:	2204      	movs	r2, #4
900054a0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900054a2:	78fa      	ldrb	r2, [r7, #3]
900054a4:	6879      	ldr	r1, [r7, #4]
900054a6:	4613      	mov	r3, r2
900054a8:	011b      	lsls	r3, r3, #4
900054aa:	1a9b      	subs	r3, r3, r2
900054ac:	009b      	lsls	r3, r3, #2
900054ae:	440b      	add	r3, r1
900054b0:	334c      	adds	r3, #76	@ 0x4c
900054b2:	781a      	ldrb	r2, [r3, #0]
900054b4:	78fb      	ldrb	r3, [r7, #3]
900054b6:	4619      	mov	r1, r3
900054b8:	6878      	ldr	r0, [r7, #4]
900054ba:	f7fb fead 	bl	90001218 <HAL_HCD_HC_NotifyURBChange_Callback>
900054be:	e022      	b.n	90005506 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900054c0:	78fa      	ldrb	r2, [r7, #3]
900054c2:	6879      	ldr	r1, [r7, #4]
900054c4:	4613      	mov	r3, r2
900054c6:	011b      	lsls	r3, r3, #4
900054c8:	1a9b      	subs	r3, r3, r2
900054ca:	009b      	lsls	r3, r3, #2
900054cc:	440b      	add	r3, r1
900054ce:	334c      	adds	r3, #76	@ 0x4c
900054d0:	2202      	movs	r2, #2
900054d2:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
900054d4:	78fb      	ldrb	r3, [r7, #3]
900054d6:	015a      	lsls	r2, r3, #5
900054d8:	693b      	ldr	r3, [r7, #16]
900054da:	4413      	add	r3, r2
900054dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054e0:	681b      	ldr	r3, [r3, #0]
900054e2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900054e4:	68fb      	ldr	r3, [r7, #12]
900054e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900054ea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900054ec:	68fb      	ldr	r3, [r7, #12]
900054ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900054f2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900054f4:	78fb      	ldrb	r3, [r7, #3]
900054f6:	015a      	lsls	r2, r3, #5
900054f8:	693b      	ldr	r3, [r7, #16]
900054fa:	4413      	add	r3, r2
900054fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005500:	461a      	mov	r2, r3
90005502:	68fb      	ldr	r3, [r7, #12]
90005504:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90005506:	78fb      	ldrb	r3, [r7, #3]
90005508:	015a      	lsls	r2, r3, #5
9000550a:	693b      	ldr	r3, [r7, #16]
9000550c:	4413      	add	r3, r2
9000550e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005512:	461a      	mov	r2, r3
90005514:	2380      	movs	r3, #128	@ 0x80
90005516:	6093      	str	r3, [r2, #8]
90005518:	e217      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
9000551a:	687b      	ldr	r3, [r7, #4]
9000551c:	681b      	ldr	r3, [r3, #0]
9000551e:	78fa      	ldrb	r2, [r7, #3]
90005520:	4611      	mov	r1, r2
90005522:	4618      	mov	r0, r3
90005524:	f005 ff51 	bl	9000b3ca <USB_ReadChInterrupts>
90005528:	4603      	mov	r3, r0
9000552a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000552e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90005532:	d11b      	bne.n	9000556c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005534:	78fa      	ldrb	r2, [r7, #3]
90005536:	6879      	ldr	r1, [r7, #4]
90005538:	4613      	mov	r3, r2
9000553a:	011b      	lsls	r3, r3, #4
9000553c:	1a9b      	subs	r3, r3, r2
9000553e:	009b      	lsls	r3, r3, #2
90005540:	440b      	add	r3, r1
90005542:	334d      	adds	r3, #77	@ 0x4d
90005544:	2209      	movs	r2, #9
90005546:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005548:	687b      	ldr	r3, [r7, #4]
9000554a:	681b      	ldr	r3, [r3, #0]
9000554c:	78fa      	ldrb	r2, [r7, #3]
9000554e:	4611      	mov	r1, r2
90005550:	4618      	mov	r0, r3
90005552:	f005 ffb7 	bl	9000b4c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005556:	78fb      	ldrb	r3, [r7, #3]
90005558:	015a      	lsls	r2, r3, #5
9000555a:	693b      	ldr	r3, [r7, #16]
9000555c:	4413      	add	r3, r2
9000555e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005562:	461a      	mov	r2, r3
90005564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005568:	6093      	str	r3, [r2, #8]
9000556a:	e1ee      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000556c:	687b      	ldr	r3, [r7, #4]
9000556e:	681b      	ldr	r3, [r3, #0]
90005570:	78fa      	ldrb	r2, [r7, #3]
90005572:	4611      	mov	r1, r2
90005574:	4618      	mov	r0, r3
90005576:	f005 ff28 	bl	9000b3ca <USB_ReadChInterrupts>
9000557a:	4603      	mov	r3, r0
9000557c:	f003 0302 	and.w	r3, r3, #2
90005580:	2b02      	cmp	r3, #2
90005582:	f040 81df 	bne.w	90005944 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005586:	78fb      	ldrb	r3, [r7, #3]
90005588:	015a      	lsls	r2, r3, #5
9000558a:	693b      	ldr	r3, [r7, #16]
9000558c:	4413      	add	r3, r2
9000558e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005592:	461a      	mov	r2, r3
90005594:	2302      	movs	r3, #2
90005596:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005598:	78fa      	ldrb	r2, [r7, #3]
9000559a:	6879      	ldr	r1, [r7, #4]
9000559c:	4613      	mov	r3, r2
9000559e:	011b      	lsls	r3, r3, #4
900055a0:	1a9b      	subs	r3, r3, r2
900055a2:	009b      	lsls	r3, r3, #2
900055a4:	440b      	add	r3, r1
900055a6:	334d      	adds	r3, #77	@ 0x4d
900055a8:	781b      	ldrb	r3, [r3, #0]
900055aa:	2b01      	cmp	r3, #1
900055ac:	f040 8093 	bne.w	900056d6 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900055b0:	78fa      	ldrb	r2, [r7, #3]
900055b2:	6879      	ldr	r1, [r7, #4]
900055b4:	4613      	mov	r3, r2
900055b6:	011b      	lsls	r3, r3, #4
900055b8:	1a9b      	subs	r3, r3, r2
900055ba:	009b      	lsls	r3, r3, #2
900055bc:	440b      	add	r3, r1
900055be:	334d      	adds	r3, #77	@ 0x4d
900055c0:	2202      	movs	r2, #2
900055c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900055c4:	78fa      	ldrb	r2, [r7, #3]
900055c6:	6879      	ldr	r1, [r7, #4]
900055c8:	4613      	mov	r3, r2
900055ca:	011b      	lsls	r3, r3, #4
900055cc:	1a9b      	subs	r3, r3, r2
900055ce:	009b      	lsls	r3, r3, #2
900055d0:	440b      	add	r3, r1
900055d2:	334c      	adds	r3, #76	@ 0x4c
900055d4:	2201      	movs	r2, #1
900055d6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900055d8:	78fa      	ldrb	r2, [r7, #3]
900055da:	6879      	ldr	r1, [r7, #4]
900055dc:	4613      	mov	r3, r2
900055de:	011b      	lsls	r3, r3, #4
900055e0:	1a9b      	subs	r3, r3, r2
900055e2:	009b      	lsls	r3, r3, #2
900055e4:	440b      	add	r3, r1
900055e6:	3326      	adds	r3, #38	@ 0x26
900055e8:	781b      	ldrb	r3, [r3, #0]
900055ea:	2b02      	cmp	r3, #2
900055ec:	d00b      	beq.n	90005606 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
900055ee:	78fa      	ldrb	r2, [r7, #3]
900055f0:	6879      	ldr	r1, [r7, #4]
900055f2:	4613      	mov	r3, r2
900055f4:	011b      	lsls	r3, r3, #4
900055f6:	1a9b      	subs	r3, r3, r2
900055f8:	009b      	lsls	r3, r3, #2
900055fa:	440b      	add	r3, r1
900055fc:	3326      	adds	r3, #38	@ 0x26
900055fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005600:	2b03      	cmp	r3, #3
90005602:	f040 8190 	bne.w	90005926 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
90005606:	687b      	ldr	r3, [r7, #4]
90005608:	799b      	ldrb	r3, [r3, #6]
9000560a:	2b00      	cmp	r3, #0
9000560c:	d115      	bne.n	9000563a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
9000560e:	78fa      	ldrb	r2, [r7, #3]
90005610:	6879      	ldr	r1, [r7, #4]
90005612:	4613      	mov	r3, r2
90005614:	011b      	lsls	r3, r3, #4
90005616:	1a9b      	subs	r3, r3, r2
90005618:	009b      	lsls	r3, r3, #2
9000561a:	440b      	add	r3, r1
9000561c:	333d      	adds	r3, #61	@ 0x3d
9000561e:	781b      	ldrb	r3, [r3, #0]
90005620:	78fa      	ldrb	r2, [r7, #3]
90005622:	f083 0301 	eor.w	r3, r3, #1
90005626:	b2d8      	uxtb	r0, r3
90005628:	6879      	ldr	r1, [r7, #4]
9000562a:	4613      	mov	r3, r2
9000562c:	011b      	lsls	r3, r3, #4
9000562e:	1a9b      	subs	r3, r3, r2
90005630:	009b      	lsls	r3, r3, #2
90005632:	440b      	add	r3, r1
90005634:	333d      	adds	r3, #61	@ 0x3d
90005636:	4602      	mov	r2, r0
90005638:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
9000563a:	687b      	ldr	r3, [r7, #4]
9000563c:	799b      	ldrb	r3, [r3, #6]
9000563e:	2b01      	cmp	r3, #1
90005640:	f040 8171 	bne.w	90005926 <HCD_HC_OUT_IRQHandler+0x954>
90005644:	78fa      	ldrb	r2, [r7, #3]
90005646:	6879      	ldr	r1, [r7, #4]
90005648:	4613      	mov	r3, r2
9000564a:	011b      	lsls	r3, r3, #4
9000564c:	1a9b      	subs	r3, r3, r2
9000564e:	009b      	lsls	r3, r3, #2
90005650:	440b      	add	r3, r1
90005652:	3334      	adds	r3, #52	@ 0x34
90005654:	681b      	ldr	r3, [r3, #0]
90005656:	2b00      	cmp	r3, #0
90005658:	f000 8165 	beq.w	90005926 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
9000565c:	78fa      	ldrb	r2, [r7, #3]
9000565e:	6879      	ldr	r1, [r7, #4]
90005660:	4613      	mov	r3, r2
90005662:	011b      	lsls	r3, r3, #4
90005664:	1a9b      	subs	r3, r3, r2
90005666:	009b      	lsls	r3, r3, #2
90005668:	440b      	add	r3, r1
9000566a:	3334      	adds	r3, #52	@ 0x34
9000566c:	6819      	ldr	r1, [r3, #0]
9000566e:	78fa      	ldrb	r2, [r7, #3]
90005670:	6878      	ldr	r0, [r7, #4]
90005672:	4613      	mov	r3, r2
90005674:	011b      	lsls	r3, r3, #4
90005676:	1a9b      	subs	r3, r3, r2
90005678:	009b      	lsls	r3, r3, #2
9000567a:	4403      	add	r3, r0
9000567c:	3328      	adds	r3, #40	@ 0x28
9000567e:	881b      	ldrh	r3, [r3, #0]
90005680:	440b      	add	r3, r1
90005682:	1e59      	subs	r1, r3, #1
90005684:	78fa      	ldrb	r2, [r7, #3]
90005686:	6878      	ldr	r0, [r7, #4]
90005688:	4613      	mov	r3, r2
9000568a:	011b      	lsls	r3, r3, #4
9000568c:	1a9b      	subs	r3, r3, r2
9000568e:	009b      	lsls	r3, r3, #2
90005690:	4403      	add	r3, r0
90005692:	3328      	adds	r3, #40	@ 0x28
90005694:	881b      	ldrh	r3, [r3, #0]
90005696:	fbb1 f3f3 	udiv	r3, r1, r3
9000569a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
9000569c:	68bb      	ldr	r3, [r7, #8]
9000569e:	f003 0301 	and.w	r3, r3, #1
900056a2:	2b00      	cmp	r3, #0
900056a4:	f000 813f 	beq.w	90005926 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
900056a8:	78fa      	ldrb	r2, [r7, #3]
900056aa:	6879      	ldr	r1, [r7, #4]
900056ac:	4613      	mov	r3, r2
900056ae:	011b      	lsls	r3, r3, #4
900056b0:	1a9b      	subs	r3, r3, r2
900056b2:	009b      	lsls	r3, r3, #2
900056b4:	440b      	add	r3, r1
900056b6:	333d      	adds	r3, #61	@ 0x3d
900056b8:	781b      	ldrb	r3, [r3, #0]
900056ba:	78fa      	ldrb	r2, [r7, #3]
900056bc:	f083 0301 	eor.w	r3, r3, #1
900056c0:	b2d8      	uxtb	r0, r3
900056c2:	6879      	ldr	r1, [r7, #4]
900056c4:	4613      	mov	r3, r2
900056c6:	011b      	lsls	r3, r3, #4
900056c8:	1a9b      	subs	r3, r3, r2
900056ca:	009b      	lsls	r3, r3, #2
900056cc:	440b      	add	r3, r1
900056ce:	333d      	adds	r3, #61	@ 0x3d
900056d0:	4602      	mov	r2, r0
900056d2:	701a      	strb	r2, [r3, #0]
900056d4:	e127      	b.n	90005926 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
900056d6:	78fa      	ldrb	r2, [r7, #3]
900056d8:	6879      	ldr	r1, [r7, #4]
900056da:	4613      	mov	r3, r2
900056dc:	011b      	lsls	r3, r3, #4
900056de:	1a9b      	subs	r3, r3, r2
900056e0:	009b      	lsls	r3, r3, #2
900056e2:	440b      	add	r3, r1
900056e4:	334d      	adds	r3, #77	@ 0x4d
900056e6:	781b      	ldrb	r3, [r3, #0]
900056e8:	2b03      	cmp	r3, #3
900056ea:	d120      	bne.n	9000572e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900056ec:	78fa      	ldrb	r2, [r7, #3]
900056ee:	6879      	ldr	r1, [r7, #4]
900056f0:	4613      	mov	r3, r2
900056f2:	011b      	lsls	r3, r3, #4
900056f4:	1a9b      	subs	r3, r3, r2
900056f6:	009b      	lsls	r3, r3, #2
900056f8:	440b      	add	r3, r1
900056fa:	334d      	adds	r3, #77	@ 0x4d
900056fc:	2202      	movs	r2, #2
900056fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005700:	78fa      	ldrb	r2, [r7, #3]
90005702:	6879      	ldr	r1, [r7, #4]
90005704:	4613      	mov	r3, r2
90005706:	011b      	lsls	r3, r3, #4
90005708:	1a9b      	subs	r3, r3, r2
9000570a:	009b      	lsls	r3, r3, #2
9000570c:	440b      	add	r3, r1
9000570e:	331b      	adds	r3, #27
90005710:	781b      	ldrb	r3, [r3, #0]
90005712:	2b01      	cmp	r3, #1
90005714:	f040 8107 	bne.w	90005926 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005718:	78fa      	ldrb	r2, [r7, #3]
9000571a:	6879      	ldr	r1, [r7, #4]
9000571c:	4613      	mov	r3, r2
9000571e:	011b      	lsls	r3, r3, #4
90005720:	1a9b      	subs	r3, r3, r2
90005722:	009b      	lsls	r3, r3, #2
90005724:	440b      	add	r3, r1
90005726:	334c      	adds	r3, #76	@ 0x4c
90005728:	2202      	movs	r2, #2
9000572a:	701a      	strb	r2, [r3, #0]
9000572c:	e0fb      	b.n	90005926 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
9000572e:	78fa      	ldrb	r2, [r7, #3]
90005730:	6879      	ldr	r1, [r7, #4]
90005732:	4613      	mov	r3, r2
90005734:	011b      	lsls	r3, r3, #4
90005736:	1a9b      	subs	r3, r3, r2
90005738:	009b      	lsls	r3, r3, #2
9000573a:	440b      	add	r3, r1
9000573c:	334d      	adds	r3, #77	@ 0x4d
9000573e:	781b      	ldrb	r3, [r3, #0]
90005740:	2b04      	cmp	r3, #4
90005742:	d13a      	bne.n	900057ba <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005744:	78fa      	ldrb	r2, [r7, #3]
90005746:	6879      	ldr	r1, [r7, #4]
90005748:	4613      	mov	r3, r2
9000574a:	011b      	lsls	r3, r3, #4
9000574c:	1a9b      	subs	r3, r3, r2
9000574e:	009b      	lsls	r3, r3, #2
90005750:	440b      	add	r3, r1
90005752:	334d      	adds	r3, #77	@ 0x4d
90005754:	2202      	movs	r2, #2
90005756:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005758:	78fa      	ldrb	r2, [r7, #3]
9000575a:	6879      	ldr	r1, [r7, #4]
9000575c:	4613      	mov	r3, r2
9000575e:	011b      	lsls	r3, r3, #4
90005760:	1a9b      	subs	r3, r3, r2
90005762:	009b      	lsls	r3, r3, #2
90005764:	440b      	add	r3, r1
90005766:	334c      	adds	r3, #76	@ 0x4c
90005768:	2202      	movs	r2, #2
9000576a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000576c:	78fa      	ldrb	r2, [r7, #3]
9000576e:	6879      	ldr	r1, [r7, #4]
90005770:	4613      	mov	r3, r2
90005772:	011b      	lsls	r3, r3, #4
90005774:	1a9b      	subs	r3, r3, r2
90005776:	009b      	lsls	r3, r3, #2
90005778:	440b      	add	r3, r1
9000577a:	331b      	adds	r3, #27
9000577c:	781b      	ldrb	r3, [r3, #0]
9000577e:	2b01      	cmp	r3, #1
90005780:	f040 80d1 	bne.w	90005926 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
90005784:	78fa      	ldrb	r2, [r7, #3]
90005786:	6879      	ldr	r1, [r7, #4]
90005788:	4613      	mov	r3, r2
9000578a:	011b      	lsls	r3, r3, #4
9000578c:	1a9b      	subs	r3, r3, r2
9000578e:	009b      	lsls	r3, r3, #2
90005790:	440b      	add	r3, r1
90005792:	331b      	adds	r3, #27
90005794:	2200      	movs	r2, #0
90005796:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005798:	78fb      	ldrb	r3, [r7, #3]
9000579a:	015a      	lsls	r2, r3, #5
9000579c:	693b      	ldr	r3, [r7, #16]
9000579e:	4413      	add	r3, r2
900057a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057a4:	685b      	ldr	r3, [r3, #4]
900057a6:	78fa      	ldrb	r2, [r7, #3]
900057a8:	0151      	lsls	r1, r2, #5
900057aa:	693a      	ldr	r2, [r7, #16]
900057ac:	440a      	add	r2, r1
900057ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900057b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900057b6:	6053      	str	r3, [r2, #4]
900057b8:	e0b5      	b.n	90005926 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900057ba:	78fa      	ldrb	r2, [r7, #3]
900057bc:	6879      	ldr	r1, [r7, #4]
900057be:	4613      	mov	r3, r2
900057c0:	011b      	lsls	r3, r3, #4
900057c2:	1a9b      	subs	r3, r3, r2
900057c4:	009b      	lsls	r3, r3, #2
900057c6:	440b      	add	r3, r1
900057c8:	334d      	adds	r3, #77	@ 0x4d
900057ca:	781b      	ldrb	r3, [r3, #0]
900057cc:	2b05      	cmp	r3, #5
900057ce:	d114      	bne.n	900057fa <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900057d0:	78fa      	ldrb	r2, [r7, #3]
900057d2:	6879      	ldr	r1, [r7, #4]
900057d4:	4613      	mov	r3, r2
900057d6:	011b      	lsls	r3, r3, #4
900057d8:	1a9b      	subs	r3, r3, r2
900057da:	009b      	lsls	r3, r3, #2
900057dc:	440b      	add	r3, r1
900057de:	334d      	adds	r3, #77	@ 0x4d
900057e0:	2202      	movs	r2, #2
900057e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
900057e4:	78fa      	ldrb	r2, [r7, #3]
900057e6:	6879      	ldr	r1, [r7, #4]
900057e8:	4613      	mov	r3, r2
900057ea:	011b      	lsls	r3, r3, #4
900057ec:	1a9b      	subs	r3, r3, r2
900057ee:	009b      	lsls	r3, r3, #2
900057f0:	440b      	add	r3, r1
900057f2:	334c      	adds	r3, #76	@ 0x4c
900057f4:	2202      	movs	r2, #2
900057f6:	701a      	strb	r2, [r3, #0]
900057f8:	e095      	b.n	90005926 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
900057fa:	78fa      	ldrb	r2, [r7, #3]
900057fc:	6879      	ldr	r1, [r7, #4]
900057fe:	4613      	mov	r3, r2
90005800:	011b      	lsls	r3, r3, #4
90005802:	1a9b      	subs	r3, r3, r2
90005804:	009b      	lsls	r3, r3, #2
90005806:	440b      	add	r3, r1
90005808:	334d      	adds	r3, #77	@ 0x4d
9000580a:	781b      	ldrb	r3, [r3, #0]
9000580c:	2b06      	cmp	r3, #6
9000580e:	d114      	bne.n	9000583a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005810:	78fa      	ldrb	r2, [r7, #3]
90005812:	6879      	ldr	r1, [r7, #4]
90005814:	4613      	mov	r3, r2
90005816:	011b      	lsls	r3, r3, #4
90005818:	1a9b      	subs	r3, r3, r2
9000581a:	009b      	lsls	r3, r3, #2
9000581c:	440b      	add	r3, r1
9000581e:	334d      	adds	r3, #77	@ 0x4d
90005820:	2202      	movs	r2, #2
90005822:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
90005824:	78fa      	ldrb	r2, [r7, #3]
90005826:	6879      	ldr	r1, [r7, #4]
90005828:	4613      	mov	r3, r2
9000582a:	011b      	lsls	r3, r3, #4
9000582c:	1a9b      	subs	r3, r3, r2
9000582e:	009b      	lsls	r3, r3, #2
90005830:	440b      	add	r3, r1
90005832:	334c      	adds	r3, #76	@ 0x4c
90005834:	2205      	movs	r2, #5
90005836:	701a      	strb	r2, [r3, #0]
90005838:	e075      	b.n	90005926 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000583a:	78fa      	ldrb	r2, [r7, #3]
9000583c:	6879      	ldr	r1, [r7, #4]
9000583e:	4613      	mov	r3, r2
90005840:	011b      	lsls	r3, r3, #4
90005842:	1a9b      	subs	r3, r3, r2
90005844:	009b      	lsls	r3, r3, #2
90005846:	440b      	add	r3, r1
90005848:	334d      	adds	r3, #77	@ 0x4d
9000584a:	781b      	ldrb	r3, [r3, #0]
9000584c:	2b07      	cmp	r3, #7
9000584e:	d00a      	beq.n	90005866 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005850:	78fa      	ldrb	r2, [r7, #3]
90005852:	6879      	ldr	r1, [r7, #4]
90005854:	4613      	mov	r3, r2
90005856:	011b      	lsls	r3, r3, #4
90005858:	1a9b      	subs	r3, r3, r2
9000585a:	009b      	lsls	r3, r3, #2
9000585c:	440b      	add	r3, r1
9000585e:	334d      	adds	r3, #77	@ 0x4d
90005860:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005862:	2b09      	cmp	r3, #9
90005864:	d170      	bne.n	90005948 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005866:	78fa      	ldrb	r2, [r7, #3]
90005868:	6879      	ldr	r1, [r7, #4]
9000586a:	4613      	mov	r3, r2
9000586c:	011b      	lsls	r3, r3, #4
9000586e:	1a9b      	subs	r3, r3, r2
90005870:	009b      	lsls	r3, r3, #2
90005872:	440b      	add	r3, r1
90005874:	334d      	adds	r3, #77	@ 0x4d
90005876:	2202      	movs	r2, #2
90005878:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000587a:	78fa      	ldrb	r2, [r7, #3]
9000587c:	6879      	ldr	r1, [r7, #4]
9000587e:	4613      	mov	r3, r2
90005880:	011b      	lsls	r3, r3, #4
90005882:	1a9b      	subs	r3, r3, r2
90005884:	009b      	lsls	r3, r3, #2
90005886:	440b      	add	r3, r1
90005888:	3344      	adds	r3, #68	@ 0x44
9000588a:	681b      	ldr	r3, [r3, #0]
9000588c:	1c59      	adds	r1, r3, #1
9000588e:	6878      	ldr	r0, [r7, #4]
90005890:	4613      	mov	r3, r2
90005892:	011b      	lsls	r3, r3, #4
90005894:	1a9b      	subs	r3, r3, r2
90005896:	009b      	lsls	r3, r3, #2
90005898:	4403      	add	r3, r0
9000589a:	3344      	adds	r3, #68	@ 0x44
9000589c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000589e:	78fa      	ldrb	r2, [r7, #3]
900058a0:	6879      	ldr	r1, [r7, #4]
900058a2:	4613      	mov	r3, r2
900058a4:	011b      	lsls	r3, r3, #4
900058a6:	1a9b      	subs	r3, r3, r2
900058a8:	009b      	lsls	r3, r3, #2
900058aa:	440b      	add	r3, r1
900058ac:	3344      	adds	r3, #68	@ 0x44
900058ae:	681b      	ldr	r3, [r3, #0]
900058b0:	2b02      	cmp	r3, #2
900058b2:	d914      	bls.n	900058de <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900058b4:	78fa      	ldrb	r2, [r7, #3]
900058b6:	6879      	ldr	r1, [r7, #4]
900058b8:	4613      	mov	r3, r2
900058ba:	011b      	lsls	r3, r3, #4
900058bc:	1a9b      	subs	r3, r3, r2
900058be:	009b      	lsls	r3, r3, #2
900058c0:	440b      	add	r3, r1
900058c2:	3344      	adds	r3, #68	@ 0x44
900058c4:	2200      	movs	r2, #0
900058c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900058c8:	78fa      	ldrb	r2, [r7, #3]
900058ca:	6879      	ldr	r1, [r7, #4]
900058cc:	4613      	mov	r3, r2
900058ce:	011b      	lsls	r3, r3, #4
900058d0:	1a9b      	subs	r3, r3, r2
900058d2:	009b      	lsls	r3, r3, #2
900058d4:	440b      	add	r3, r1
900058d6:	334c      	adds	r3, #76	@ 0x4c
900058d8:	2204      	movs	r2, #4
900058da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900058dc:	e022      	b.n	90005924 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900058de:	78fa      	ldrb	r2, [r7, #3]
900058e0:	6879      	ldr	r1, [r7, #4]
900058e2:	4613      	mov	r3, r2
900058e4:	011b      	lsls	r3, r3, #4
900058e6:	1a9b      	subs	r3, r3, r2
900058e8:	009b      	lsls	r3, r3, #2
900058ea:	440b      	add	r3, r1
900058ec:	334c      	adds	r3, #76	@ 0x4c
900058ee:	2202      	movs	r2, #2
900058f0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
900058f2:	78fb      	ldrb	r3, [r7, #3]
900058f4:	015a      	lsls	r2, r3, #5
900058f6:	693b      	ldr	r3, [r7, #16]
900058f8:	4413      	add	r3, r2
900058fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900058fe:	681b      	ldr	r3, [r3, #0]
90005900:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005902:	68fb      	ldr	r3, [r7, #12]
90005904:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005908:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
9000590a:	68fb      	ldr	r3, [r7, #12]
9000590c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005910:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005912:	78fb      	ldrb	r3, [r7, #3]
90005914:	015a      	lsls	r2, r3, #5
90005916:	693b      	ldr	r3, [r7, #16]
90005918:	4413      	add	r3, r2
9000591a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000591e:	461a      	mov	r2, r3
90005920:	68fb      	ldr	r3, [r7, #12]
90005922:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005924:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005926:	78fa      	ldrb	r2, [r7, #3]
90005928:	6879      	ldr	r1, [r7, #4]
9000592a:	4613      	mov	r3, r2
9000592c:	011b      	lsls	r3, r3, #4
9000592e:	1a9b      	subs	r3, r3, r2
90005930:	009b      	lsls	r3, r3, #2
90005932:	440b      	add	r3, r1
90005934:	334c      	adds	r3, #76	@ 0x4c
90005936:	781a      	ldrb	r2, [r3, #0]
90005938:	78fb      	ldrb	r3, [r7, #3]
9000593a:	4619      	mov	r1, r3
9000593c:	6878      	ldr	r0, [r7, #4]
9000593e:	f7fb fc6b 	bl	90001218 <HAL_HCD_HC_NotifyURBChange_Callback>
90005942:	e002      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005944:	bf00      	nop
90005946:	e000      	b.n	9000594a <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005948:	bf00      	nop
  }
}
9000594a:	3718      	adds	r7, #24
9000594c:	46bd      	mov	sp, r7
9000594e:	bd80      	pop	{r7, pc}

90005950 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005950:	b580      	push	{r7, lr}
90005952:	b08a      	sub	sp, #40	@ 0x28
90005954:	af00      	add	r7, sp, #0
90005956:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005958:	687b      	ldr	r3, [r7, #4]
9000595a:	681b      	ldr	r3, [r3, #0]
9000595c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
9000595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005960:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005962:	687b      	ldr	r3, [r7, #4]
90005964:	681b      	ldr	r3, [r3, #0]
90005966:	6a1b      	ldr	r3, [r3, #32]
90005968:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
9000596a:	69fb      	ldr	r3, [r7, #28]
9000596c:	f003 030f 	and.w	r3, r3, #15
90005970:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005972:	69fb      	ldr	r3, [r7, #28]
90005974:	0c5b      	lsrs	r3, r3, #17
90005976:	f003 030f 	and.w	r3, r3, #15
9000597a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
9000597c:	69fb      	ldr	r3, [r7, #28]
9000597e:	091b      	lsrs	r3, r3, #4
90005980:	f3c3 030a 	ubfx	r3, r3, #0, #11
90005984:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90005986:	697b      	ldr	r3, [r7, #20]
90005988:	2b02      	cmp	r3, #2
9000598a:	d004      	beq.n	90005996 <HCD_RXQLVL_IRQHandler+0x46>
9000598c:	697b      	ldr	r3, [r7, #20]
9000598e:	2b05      	cmp	r3, #5
90005990:	f000 80b6 	beq.w	90005b00 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90005994:	e0b7      	b.n	90005b06 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
90005996:	693b      	ldr	r3, [r7, #16]
90005998:	2b00      	cmp	r3, #0
9000599a:	f000 80b3 	beq.w	90005b04 <HCD_RXQLVL_IRQHandler+0x1b4>
9000599e:	6879      	ldr	r1, [r7, #4]
900059a0:	69ba      	ldr	r2, [r7, #24]
900059a2:	4613      	mov	r3, r2
900059a4:	011b      	lsls	r3, r3, #4
900059a6:	1a9b      	subs	r3, r3, r2
900059a8:	009b      	lsls	r3, r3, #2
900059aa:	440b      	add	r3, r1
900059ac:	332c      	adds	r3, #44	@ 0x2c
900059ae:	681b      	ldr	r3, [r3, #0]
900059b0:	2b00      	cmp	r3, #0
900059b2:	f000 80a7 	beq.w	90005b04 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
900059b6:	6879      	ldr	r1, [r7, #4]
900059b8:	69ba      	ldr	r2, [r7, #24]
900059ba:	4613      	mov	r3, r2
900059bc:	011b      	lsls	r3, r3, #4
900059be:	1a9b      	subs	r3, r3, r2
900059c0:	009b      	lsls	r3, r3, #2
900059c2:	440b      	add	r3, r1
900059c4:	3338      	adds	r3, #56	@ 0x38
900059c6:	681a      	ldr	r2, [r3, #0]
900059c8:	693b      	ldr	r3, [r7, #16]
900059ca:	18d1      	adds	r1, r2, r3
900059cc:	6878      	ldr	r0, [r7, #4]
900059ce:	69ba      	ldr	r2, [r7, #24]
900059d0:	4613      	mov	r3, r2
900059d2:	011b      	lsls	r3, r3, #4
900059d4:	1a9b      	subs	r3, r3, r2
900059d6:	009b      	lsls	r3, r3, #2
900059d8:	4403      	add	r3, r0
900059da:	3334      	adds	r3, #52	@ 0x34
900059dc:	681b      	ldr	r3, [r3, #0]
900059de:	4299      	cmp	r1, r3
900059e0:	f200 8083 	bhi.w	90005aea <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
900059e4:	687b      	ldr	r3, [r7, #4]
900059e6:	6818      	ldr	r0, [r3, #0]
900059e8:	6879      	ldr	r1, [r7, #4]
900059ea:	69ba      	ldr	r2, [r7, #24]
900059ec:	4613      	mov	r3, r2
900059ee:	011b      	lsls	r3, r3, #4
900059f0:	1a9b      	subs	r3, r3, r2
900059f2:	009b      	lsls	r3, r3, #2
900059f4:	440b      	add	r3, r1
900059f6:	332c      	adds	r3, #44	@ 0x2c
900059f8:	681b      	ldr	r3, [r3, #0]
900059fa:	693a      	ldr	r2, [r7, #16]
900059fc:	b292      	uxth	r2, r2
900059fe:	4619      	mov	r1, r3
90005a00:	f005 fc78 	bl	9000b2f4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90005a04:	6879      	ldr	r1, [r7, #4]
90005a06:	69ba      	ldr	r2, [r7, #24]
90005a08:	4613      	mov	r3, r2
90005a0a:	011b      	lsls	r3, r3, #4
90005a0c:	1a9b      	subs	r3, r3, r2
90005a0e:	009b      	lsls	r3, r3, #2
90005a10:	440b      	add	r3, r1
90005a12:	332c      	adds	r3, #44	@ 0x2c
90005a14:	681a      	ldr	r2, [r3, #0]
90005a16:	693b      	ldr	r3, [r7, #16]
90005a18:	18d1      	adds	r1, r2, r3
90005a1a:	6878      	ldr	r0, [r7, #4]
90005a1c:	69ba      	ldr	r2, [r7, #24]
90005a1e:	4613      	mov	r3, r2
90005a20:	011b      	lsls	r3, r3, #4
90005a22:	1a9b      	subs	r3, r3, r2
90005a24:	009b      	lsls	r3, r3, #2
90005a26:	4403      	add	r3, r0
90005a28:	332c      	adds	r3, #44	@ 0x2c
90005a2a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005a2c:	6879      	ldr	r1, [r7, #4]
90005a2e:	69ba      	ldr	r2, [r7, #24]
90005a30:	4613      	mov	r3, r2
90005a32:	011b      	lsls	r3, r3, #4
90005a34:	1a9b      	subs	r3, r3, r2
90005a36:	009b      	lsls	r3, r3, #2
90005a38:	440b      	add	r3, r1
90005a3a:	3338      	adds	r3, #56	@ 0x38
90005a3c:	681a      	ldr	r2, [r3, #0]
90005a3e:	693b      	ldr	r3, [r7, #16]
90005a40:	18d1      	adds	r1, r2, r3
90005a42:	6878      	ldr	r0, [r7, #4]
90005a44:	69ba      	ldr	r2, [r7, #24]
90005a46:	4613      	mov	r3, r2
90005a48:	011b      	lsls	r3, r3, #4
90005a4a:	1a9b      	subs	r3, r3, r2
90005a4c:	009b      	lsls	r3, r3, #2
90005a4e:	4403      	add	r3, r0
90005a50:	3338      	adds	r3, #56	@ 0x38
90005a52:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005a54:	69bb      	ldr	r3, [r7, #24]
90005a56:	015a      	lsls	r2, r3, #5
90005a58:	6a3b      	ldr	r3, [r7, #32]
90005a5a:	4413      	add	r3, r2
90005a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a60:	691b      	ldr	r3, [r3, #16]
90005a62:	0cdb      	lsrs	r3, r3, #19
90005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005a68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90005a6a:	6879      	ldr	r1, [r7, #4]
90005a6c:	69ba      	ldr	r2, [r7, #24]
90005a6e:	4613      	mov	r3, r2
90005a70:	011b      	lsls	r3, r3, #4
90005a72:	1a9b      	subs	r3, r3, r2
90005a74:	009b      	lsls	r3, r3, #2
90005a76:	440b      	add	r3, r1
90005a78:	3328      	adds	r3, #40	@ 0x28
90005a7a:	881b      	ldrh	r3, [r3, #0]
90005a7c:	461a      	mov	r2, r3
90005a7e:	693b      	ldr	r3, [r7, #16]
90005a80:	4293      	cmp	r3, r2
90005a82:	d13f      	bne.n	90005b04 <HCD_RXQLVL_IRQHandler+0x1b4>
90005a84:	68fb      	ldr	r3, [r7, #12]
90005a86:	2b00      	cmp	r3, #0
90005a88:	d03c      	beq.n	90005b04 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
90005a8a:	69bb      	ldr	r3, [r7, #24]
90005a8c:	015a      	lsls	r2, r3, #5
90005a8e:	6a3b      	ldr	r3, [r7, #32]
90005a90:	4413      	add	r3, r2
90005a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a96:	681b      	ldr	r3, [r3, #0]
90005a98:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005a9a:	68bb      	ldr	r3, [r7, #8]
90005a9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005aa0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90005aa2:	68bb      	ldr	r3, [r7, #8]
90005aa4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005aa8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
90005aaa:	69bb      	ldr	r3, [r7, #24]
90005aac:	015a      	lsls	r2, r3, #5
90005aae:	6a3b      	ldr	r3, [r7, #32]
90005ab0:	4413      	add	r3, r2
90005ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005ab6:	461a      	mov	r2, r3
90005ab8:	68bb      	ldr	r3, [r7, #8]
90005aba:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90005abc:	6879      	ldr	r1, [r7, #4]
90005abe:	69ba      	ldr	r2, [r7, #24]
90005ac0:	4613      	mov	r3, r2
90005ac2:	011b      	lsls	r3, r3, #4
90005ac4:	1a9b      	subs	r3, r3, r2
90005ac6:	009b      	lsls	r3, r3, #2
90005ac8:	440b      	add	r3, r1
90005aca:	333c      	adds	r3, #60	@ 0x3c
90005acc:	781b      	ldrb	r3, [r3, #0]
90005ace:	f083 0301 	eor.w	r3, r3, #1
90005ad2:	b2d8      	uxtb	r0, r3
90005ad4:	6879      	ldr	r1, [r7, #4]
90005ad6:	69ba      	ldr	r2, [r7, #24]
90005ad8:	4613      	mov	r3, r2
90005ada:	011b      	lsls	r3, r3, #4
90005adc:	1a9b      	subs	r3, r3, r2
90005ade:	009b      	lsls	r3, r3, #2
90005ae0:	440b      	add	r3, r1
90005ae2:	333c      	adds	r3, #60	@ 0x3c
90005ae4:	4602      	mov	r2, r0
90005ae6:	701a      	strb	r2, [r3, #0]
      break;
90005ae8:	e00c      	b.n	90005b04 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005aea:	6879      	ldr	r1, [r7, #4]
90005aec:	69ba      	ldr	r2, [r7, #24]
90005aee:	4613      	mov	r3, r2
90005af0:	011b      	lsls	r3, r3, #4
90005af2:	1a9b      	subs	r3, r3, r2
90005af4:	009b      	lsls	r3, r3, #2
90005af6:	440b      	add	r3, r1
90005af8:	334c      	adds	r3, #76	@ 0x4c
90005afa:	2204      	movs	r2, #4
90005afc:	701a      	strb	r2, [r3, #0]
      break;
90005afe:	e001      	b.n	90005b04 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90005b00:	bf00      	nop
90005b02:	e000      	b.n	90005b06 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005b04:	bf00      	nop
  }
}
90005b06:	bf00      	nop
90005b08:	3728      	adds	r7, #40	@ 0x28
90005b0a:	46bd      	mov	sp, r7
90005b0c:	bd80      	pop	{r7, pc}

90005b0e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005b0e:	b580      	push	{r7, lr}
90005b10:	b086      	sub	sp, #24
90005b12:	af00      	add	r7, sp, #0
90005b14:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005b16:	687b      	ldr	r3, [r7, #4]
90005b18:	681b      	ldr	r3, [r3, #0]
90005b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005b1c:	697b      	ldr	r3, [r7, #20]
90005b1e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005b20:	693b      	ldr	r3, [r7, #16]
90005b22:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005b26:	681b      	ldr	r3, [r3, #0]
90005b28:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005b2a:	693b      	ldr	r3, [r7, #16]
90005b2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005b30:	681b      	ldr	r3, [r3, #0]
90005b32:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005b34:	68bb      	ldr	r3, [r7, #8]
90005b36:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005b3a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005b3c:	68fb      	ldr	r3, [r7, #12]
90005b3e:	f003 0302 	and.w	r3, r3, #2
90005b42:	2b02      	cmp	r3, #2
90005b44:	d10b      	bne.n	90005b5e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005b46:	68fb      	ldr	r3, [r7, #12]
90005b48:	f003 0301 	and.w	r3, r3, #1
90005b4c:	2b01      	cmp	r3, #1
90005b4e:	d102      	bne.n	90005b56 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005b50:	6878      	ldr	r0, [r7, #4]
90005b52:	f7fb fb29 	bl	900011a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005b56:	68bb      	ldr	r3, [r7, #8]
90005b58:	f043 0302 	orr.w	r3, r3, #2
90005b5c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005b5e:	68fb      	ldr	r3, [r7, #12]
90005b60:	f003 0308 	and.w	r3, r3, #8
90005b64:	2b08      	cmp	r3, #8
90005b66:	d132      	bne.n	90005bce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005b68:	68bb      	ldr	r3, [r7, #8]
90005b6a:	f043 0308 	orr.w	r3, r3, #8
90005b6e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005b70:	68fb      	ldr	r3, [r7, #12]
90005b72:	f003 0304 	and.w	r3, r3, #4
90005b76:	2b04      	cmp	r3, #4
90005b78:	d126      	bne.n	90005bc8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005b7a:	687b      	ldr	r3, [r7, #4]
90005b7c:	7a5b      	ldrb	r3, [r3, #9]
90005b7e:	2b02      	cmp	r3, #2
90005b80:	d113      	bne.n	90005baa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005b82:	68fb      	ldr	r3, [r7, #12]
90005b84:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005b88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90005b8c:	d106      	bne.n	90005b9c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005b8e:	687b      	ldr	r3, [r7, #4]
90005b90:	681b      	ldr	r3, [r3, #0]
90005b92:	2102      	movs	r1, #2
90005b94:	4618      	mov	r0, r3
90005b96:	f005 fc47 	bl	9000b428 <USB_InitFSLSPClkSel>
90005b9a:	e011      	b.n	90005bc0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005b9c:	687b      	ldr	r3, [r7, #4]
90005b9e:	681b      	ldr	r3, [r3, #0]
90005ba0:	2101      	movs	r1, #1
90005ba2:	4618      	mov	r0, r3
90005ba4:	f005 fc40 	bl	9000b428 <USB_InitFSLSPClkSel>
90005ba8:	e00a      	b.n	90005bc0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90005baa:	687b      	ldr	r3, [r7, #4]
90005bac:	79db      	ldrb	r3, [r3, #7]
90005bae:	2b01      	cmp	r3, #1
90005bb0:	d106      	bne.n	90005bc0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005bb2:	693b      	ldr	r3, [r7, #16]
90005bb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005bb8:	461a      	mov	r2, r3
90005bba:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005bbe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005bc0:	6878      	ldr	r0, [r7, #4]
90005bc2:	f7fb fb0d 	bl	900011e0 <HAL_HCD_PortEnabled_Callback>
90005bc6:	e002      	b.n	90005bce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005bc8:	6878      	ldr	r0, [r7, #4]
90005bca:	f7fb fb17 	bl	900011fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005bce:	68fb      	ldr	r3, [r7, #12]
90005bd0:	f003 0320 	and.w	r3, r3, #32
90005bd4:	2b20      	cmp	r3, #32
90005bd6:	d103      	bne.n	90005be0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005bd8:	68bb      	ldr	r3, [r7, #8]
90005bda:	f043 0320 	orr.w	r3, r3, #32
90005bde:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005be0:	693b      	ldr	r3, [r7, #16]
90005be2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005be6:	461a      	mov	r2, r3
90005be8:	68bb      	ldr	r3, [r7, #8]
90005bea:	6013      	str	r3, [r2, #0]
}
90005bec:	bf00      	nop
90005bee:	3718      	adds	r7, #24
90005bf0:	46bd      	mov	sp, r7
90005bf2:	bd80      	pop	{r7, pc}

90005bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005bf4:	b580      	push	{r7, lr}
90005bf6:	b082      	sub	sp, #8
90005bf8:	af00      	add	r7, sp, #0
90005bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005bfc:	687b      	ldr	r3, [r7, #4]
90005bfe:	2b00      	cmp	r3, #0
90005c00:	d101      	bne.n	90005c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005c02:	2301      	movs	r3, #1
90005c04:	e08b      	b.n	90005d1e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005c06:	687b      	ldr	r3, [r7, #4]
90005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005c0c:	b2db      	uxtb	r3, r3
90005c0e:	2b00      	cmp	r3, #0
90005c10:	d106      	bne.n	90005c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005c12:	687b      	ldr	r3, [r7, #4]
90005c14:	2200      	movs	r2, #0
90005c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005c1a:	6878      	ldr	r0, [r7, #4]
90005c1c:	f000 f886 	bl	90005d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005c20:	687b      	ldr	r3, [r7, #4]
90005c22:	2224      	movs	r2, #36	@ 0x24
90005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005c28:	687b      	ldr	r3, [r7, #4]
90005c2a:	681b      	ldr	r3, [r3, #0]
90005c2c:	681a      	ldr	r2, [r3, #0]
90005c2e:	687b      	ldr	r3, [r7, #4]
90005c30:	681b      	ldr	r3, [r3, #0]
90005c32:	f022 0201 	bic.w	r2, r2, #1
90005c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005c38:	687b      	ldr	r3, [r7, #4]
90005c3a:	685a      	ldr	r2, [r3, #4]
90005c3c:	687b      	ldr	r3, [r7, #4]
90005c3e:	681b      	ldr	r3, [r3, #0]
90005c40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005c44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005c46:	687b      	ldr	r3, [r7, #4]
90005c48:	681b      	ldr	r3, [r3, #0]
90005c4a:	689a      	ldr	r2, [r3, #8]
90005c4c:	687b      	ldr	r3, [r7, #4]
90005c4e:	681b      	ldr	r3, [r3, #0]
90005c50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005c54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005c56:	687b      	ldr	r3, [r7, #4]
90005c58:	68db      	ldr	r3, [r3, #12]
90005c5a:	2b01      	cmp	r3, #1
90005c5c:	d107      	bne.n	90005c6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005c5e:	687b      	ldr	r3, [r7, #4]
90005c60:	689a      	ldr	r2, [r3, #8]
90005c62:	687b      	ldr	r3, [r7, #4]
90005c64:	681b      	ldr	r3, [r3, #0]
90005c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005c6a:	609a      	str	r2, [r3, #8]
90005c6c:	e006      	b.n	90005c7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005c6e:	687b      	ldr	r3, [r7, #4]
90005c70:	689a      	ldr	r2, [r3, #8]
90005c72:	687b      	ldr	r3, [r7, #4]
90005c74:	681b      	ldr	r3, [r3, #0]
90005c76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005c7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005c7c:	687b      	ldr	r3, [r7, #4]
90005c7e:	68db      	ldr	r3, [r3, #12]
90005c80:	2b02      	cmp	r3, #2
90005c82:	d108      	bne.n	90005c96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005c84:	687b      	ldr	r3, [r7, #4]
90005c86:	681b      	ldr	r3, [r3, #0]
90005c88:	685a      	ldr	r2, [r3, #4]
90005c8a:	687b      	ldr	r3, [r7, #4]
90005c8c:	681b      	ldr	r3, [r3, #0]
90005c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005c92:	605a      	str	r2, [r3, #4]
90005c94:	e007      	b.n	90005ca6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005c96:	687b      	ldr	r3, [r7, #4]
90005c98:	681b      	ldr	r3, [r3, #0]
90005c9a:	685a      	ldr	r2, [r3, #4]
90005c9c:	687b      	ldr	r3, [r7, #4]
90005c9e:	681b      	ldr	r3, [r3, #0]
90005ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005ca4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005ca6:	687b      	ldr	r3, [r7, #4]
90005ca8:	681b      	ldr	r3, [r3, #0]
90005caa:	6859      	ldr	r1, [r3, #4]
90005cac:	687b      	ldr	r3, [r7, #4]
90005cae:	681a      	ldr	r2, [r3, #0]
90005cb0:	4b1d      	ldr	r3, [pc, #116]	@ (90005d28 <HAL_I2C_Init+0x134>)
90005cb2:	430b      	orrs	r3, r1
90005cb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005cb6:	687b      	ldr	r3, [r7, #4]
90005cb8:	681b      	ldr	r3, [r3, #0]
90005cba:	68da      	ldr	r2, [r3, #12]
90005cbc:	687b      	ldr	r3, [r7, #4]
90005cbe:	681b      	ldr	r3, [r3, #0]
90005cc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005cc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005cc6:	687b      	ldr	r3, [r7, #4]
90005cc8:	691a      	ldr	r2, [r3, #16]
90005cca:	687b      	ldr	r3, [r7, #4]
90005ccc:	695b      	ldr	r3, [r3, #20]
90005cce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005cd2:	687b      	ldr	r3, [r7, #4]
90005cd4:	699b      	ldr	r3, [r3, #24]
90005cd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005cd8:	687b      	ldr	r3, [r7, #4]
90005cda:	681b      	ldr	r3, [r3, #0]
90005cdc:	430a      	orrs	r2, r1
90005cde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005ce0:	687b      	ldr	r3, [r7, #4]
90005ce2:	69d9      	ldr	r1, [r3, #28]
90005ce4:	687b      	ldr	r3, [r7, #4]
90005ce6:	6a1a      	ldr	r2, [r3, #32]
90005ce8:	687b      	ldr	r3, [r7, #4]
90005cea:	681b      	ldr	r3, [r3, #0]
90005cec:	430a      	orrs	r2, r1
90005cee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005cf0:	687b      	ldr	r3, [r7, #4]
90005cf2:	681b      	ldr	r3, [r3, #0]
90005cf4:	681a      	ldr	r2, [r3, #0]
90005cf6:	687b      	ldr	r3, [r7, #4]
90005cf8:	681b      	ldr	r3, [r3, #0]
90005cfa:	f042 0201 	orr.w	r2, r2, #1
90005cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005d00:	687b      	ldr	r3, [r7, #4]
90005d02:	2200      	movs	r2, #0
90005d04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005d06:	687b      	ldr	r3, [r7, #4]
90005d08:	2220      	movs	r2, #32
90005d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005d0e:	687b      	ldr	r3, [r7, #4]
90005d10:	2200      	movs	r2, #0
90005d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005d14:	687b      	ldr	r3, [r7, #4]
90005d16:	2200      	movs	r2, #0
90005d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005d1c:	2300      	movs	r3, #0
}
90005d1e:	4618      	mov	r0, r3
90005d20:	3708      	adds	r7, #8
90005d22:	46bd      	mov	sp, r7
90005d24:	bd80      	pop	{r7, pc}
90005d26:	bf00      	nop
90005d28:	02008000 	.word	0x02008000

90005d2c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005d2c:	b480      	push	{r7}
90005d2e:	b083      	sub	sp, #12
90005d30:	af00      	add	r7, sp, #0
90005d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005d34:	bf00      	nop
90005d36:	370c      	adds	r7, #12
90005d38:	46bd      	mov	sp, r7
90005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d3e:	4770      	bx	lr

90005d40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005d40:	b580      	push	{r7, lr}
90005d42:	b088      	sub	sp, #32
90005d44:	af02      	add	r7, sp, #8
90005d46:	60f8      	str	r0, [r7, #12]
90005d48:	4608      	mov	r0, r1
90005d4a:	4611      	mov	r1, r2
90005d4c:	461a      	mov	r2, r3
90005d4e:	4603      	mov	r3, r0
90005d50:	817b      	strh	r3, [r7, #10]
90005d52:	460b      	mov	r3, r1
90005d54:	813b      	strh	r3, [r7, #8]
90005d56:	4613      	mov	r3, r2
90005d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005d5a:	68fb      	ldr	r3, [r7, #12]
90005d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005d60:	b2db      	uxtb	r3, r3
90005d62:	2b20      	cmp	r3, #32
90005d64:	f040 80fd 	bne.w	90005f62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005d68:	6a3b      	ldr	r3, [r7, #32]
90005d6a:	2b00      	cmp	r3, #0
90005d6c:	d002      	beq.n	90005d74 <HAL_I2C_Mem_Read+0x34>
90005d6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005d70:	2b00      	cmp	r3, #0
90005d72:	d105      	bne.n	90005d80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005d74:	68fb      	ldr	r3, [r7, #12]
90005d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005d7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005d7c:	2301      	movs	r3, #1
90005d7e:	e0f1      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005d80:	68fb      	ldr	r3, [r7, #12]
90005d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005d86:	2b01      	cmp	r3, #1
90005d88:	d101      	bne.n	90005d8e <HAL_I2C_Mem_Read+0x4e>
90005d8a:	2302      	movs	r3, #2
90005d8c:	e0ea      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
90005d8e:	68fb      	ldr	r3, [r7, #12]
90005d90:	2201      	movs	r2, #1
90005d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005d96:	f7fd fafb 	bl	90003390 <HAL_GetTick>
90005d9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005d9c:	697b      	ldr	r3, [r7, #20]
90005d9e:	9300      	str	r3, [sp, #0]
90005da0:	2319      	movs	r3, #25
90005da2:	2201      	movs	r2, #1
90005da4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005da8:	68f8      	ldr	r0, [r7, #12]
90005daa:	f000 f975 	bl	90006098 <I2C_WaitOnFlagUntilTimeout>
90005dae:	4603      	mov	r3, r0
90005db0:	2b00      	cmp	r3, #0
90005db2:	d001      	beq.n	90005db8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005db4:	2301      	movs	r3, #1
90005db6:	e0d5      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005db8:	68fb      	ldr	r3, [r7, #12]
90005dba:	2222      	movs	r2, #34	@ 0x22
90005dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005dc0:	68fb      	ldr	r3, [r7, #12]
90005dc2:	2240      	movs	r2, #64	@ 0x40
90005dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005dc8:	68fb      	ldr	r3, [r7, #12]
90005dca:	2200      	movs	r2, #0
90005dcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005dce:	68fb      	ldr	r3, [r7, #12]
90005dd0:	6a3a      	ldr	r2, [r7, #32]
90005dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005dd4:	68fb      	ldr	r3, [r7, #12]
90005dd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005dda:	68fb      	ldr	r3, [r7, #12]
90005ddc:	2200      	movs	r2, #0
90005dde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005de0:	88f8      	ldrh	r0, [r7, #6]
90005de2:	893a      	ldrh	r2, [r7, #8]
90005de4:	8979      	ldrh	r1, [r7, #10]
90005de6:	697b      	ldr	r3, [r7, #20]
90005de8:	9301      	str	r3, [sp, #4]
90005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005dec:	9300      	str	r3, [sp, #0]
90005dee:	4603      	mov	r3, r0
90005df0:	68f8      	ldr	r0, [r7, #12]
90005df2:	f000 f8d9 	bl	90005fa8 <I2C_RequestMemoryRead>
90005df6:	4603      	mov	r3, r0
90005df8:	2b00      	cmp	r3, #0
90005dfa:	d005      	beq.n	90005e08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005dfc:	68fb      	ldr	r3, [r7, #12]
90005dfe:	2200      	movs	r2, #0
90005e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005e04:	2301      	movs	r3, #1
90005e06:	e0ad      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005e08:	68fb      	ldr	r3, [r7, #12]
90005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e0c:	b29b      	uxth	r3, r3
90005e0e:	2bff      	cmp	r3, #255	@ 0xff
90005e10:	d90e      	bls.n	90005e30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005e12:	68fb      	ldr	r3, [r7, #12]
90005e14:	22ff      	movs	r2, #255	@ 0xff
90005e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005e18:	68fb      	ldr	r3, [r7, #12]
90005e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e1c:	b2da      	uxtb	r2, r3
90005e1e:	8979      	ldrh	r1, [r7, #10]
90005e20:	4b52      	ldr	r3, [pc, #328]	@ (90005f6c <HAL_I2C_Mem_Read+0x22c>)
90005e22:	9300      	str	r3, [sp, #0]
90005e24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005e28:	68f8      	ldr	r0, [r7, #12]
90005e2a:	f000 faf9 	bl	90006420 <I2C_TransferConfig>
90005e2e:	e00f      	b.n	90005e50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005e30:	68fb      	ldr	r3, [r7, #12]
90005e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e34:	b29a      	uxth	r2, r3
90005e36:	68fb      	ldr	r3, [r7, #12]
90005e38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005e3a:	68fb      	ldr	r3, [r7, #12]
90005e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e3e:	b2da      	uxtb	r2, r3
90005e40:	8979      	ldrh	r1, [r7, #10]
90005e42:	4b4a      	ldr	r3, [pc, #296]	@ (90005f6c <HAL_I2C_Mem_Read+0x22c>)
90005e44:	9300      	str	r3, [sp, #0]
90005e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005e4a:	68f8      	ldr	r0, [r7, #12]
90005e4c:	f000 fae8 	bl	90006420 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005e50:	697b      	ldr	r3, [r7, #20]
90005e52:	9300      	str	r3, [sp, #0]
90005e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005e56:	2200      	movs	r2, #0
90005e58:	2104      	movs	r1, #4
90005e5a:	68f8      	ldr	r0, [r7, #12]
90005e5c:	f000 f91c 	bl	90006098 <I2C_WaitOnFlagUntilTimeout>
90005e60:	4603      	mov	r3, r0
90005e62:	2b00      	cmp	r3, #0
90005e64:	d001      	beq.n	90005e6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005e66:	2301      	movs	r3, #1
90005e68:	e07c      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005e6a:	68fb      	ldr	r3, [r7, #12]
90005e6c:	681b      	ldr	r3, [r3, #0]
90005e6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005e70:	68fb      	ldr	r3, [r7, #12]
90005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005e74:	b2d2      	uxtb	r2, r2
90005e76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005e78:	68fb      	ldr	r3, [r7, #12]
90005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005e7c:	1c5a      	adds	r2, r3, #1
90005e7e:	68fb      	ldr	r3, [r7, #12]
90005e80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005e82:	68fb      	ldr	r3, [r7, #12]
90005e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e86:	3b01      	subs	r3, #1
90005e88:	b29a      	uxth	r2, r3
90005e8a:	68fb      	ldr	r3, [r7, #12]
90005e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005e8e:	68fb      	ldr	r3, [r7, #12]
90005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e92:	b29b      	uxth	r3, r3
90005e94:	3b01      	subs	r3, #1
90005e96:	b29a      	uxth	r2, r3
90005e98:	68fb      	ldr	r3, [r7, #12]
90005e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005e9c:	68fb      	ldr	r3, [r7, #12]
90005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ea0:	b29b      	uxth	r3, r3
90005ea2:	2b00      	cmp	r3, #0
90005ea4:	d034      	beq.n	90005f10 <HAL_I2C_Mem_Read+0x1d0>
90005ea6:	68fb      	ldr	r3, [r7, #12]
90005ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005eaa:	2b00      	cmp	r3, #0
90005eac:	d130      	bne.n	90005f10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005eae:	697b      	ldr	r3, [r7, #20]
90005eb0:	9300      	str	r3, [sp, #0]
90005eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005eb4:	2200      	movs	r2, #0
90005eb6:	2180      	movs	r1, #128	@ 0x80
90005eb8:	68f8      	ldr	r0, [r7, #12]
90005eba:	f000 f8ed 	bl	90006098 <I2C_WaitOnFlagUntilTimeout>
90005ebe:	4603      	mov	r3, r0
90005ec0:	2b00      	cmp	r3, #0
90005ec2:	d001      	beq.n	90005ec8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005ec4:	2301      	movs	r3, #1
90005ec6:	e04d      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005ec8:	68fb      	ldr	r3, [r7, #12]
90005eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ecc:	b29b      	uxth	r3, r3
90005ece:	2bff      	cmp	r3, #255	@ 0xff
90005ed0:	d90e      	bls.n	90005ef0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005ed2:	68fb      	ldr	r3, [r7, #12]
90005ed4:	22ff      	movs	r2, #255	@ 0xff
90005ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005ed8:	68fb      	ldr	r3, [r7, #12]
90005eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005edc:	b2da      	uxtb	r2, r3
90005ede:	8979      	ldrh	r1, [r7, #10]
90005ee0:	2300      	movs	r3, #0
90005ee2:	9300      	str	r3, [sp, #0]
90005ee4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005ee8:	68f8      	ldr	r0, [r7, #12]
90005eea:	f000 fa99 	bl	90006420 <I2C_TransferConfig>
90005eee:	e00f      	b.n	90005f10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005ef0:	68fb      	ldr	r3, [r7, #12]
90005ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ef4:	b29a      	uxth	r2, r3
90005ef6:	68fb      	ldr	r3, [r7, #12]
90005ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005efa:	68fb      	ldr	r3, [r7, #12]
90005efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005efe:	b2da      	uxtb	r2, r3
90005f00:	8979      	ldrh	r1, [r7, #10]
90005f02:	2300      	movs	r3, #0
90005f04:	9300      	str	r3, [sp, #0]
90005f06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005f0a:	68f8      	ldr	r0, [r7, #12]
90005f0c:	f000 fa88 	bl	90006420 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005f10:	68fb      	ldr	r3, [r7, #12]
90005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005f14:	b29b      	uxth	r3, r3
90005f16:	2b00      	cmp	r3, #0
90005f18:	d19a      	bne.n	90005e50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005f1a:	697a      	ldr	r2, [r7, #20]
90005f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005f1e:	68f8      	ldr	r0, [r7, #12]
90005f20:	f000 f95a 	bl	900061d8 <I2C_WaitOnSTOPFlagUntilTimeout>
90005f24:	4603      	mov	r3, r0
90005f26:	2b00      	cmp	r3, #0
90005f28:	d001      	beq.n	90005f2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005f2a:	2301      	movs	r3, #1
90005f2c:	e01a      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005f2e:	68fb      	ldr	r3, [r7, #12]
90005f30:	681b      	ldr	r3, [r3, #0]
90005f32:	2220      	movs	r2, #32
90005f34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005f36:	68fb      	ldr	r3, [r7, #12]
90005f38:	681b      	ldr	r3, [r3, #0]
90005f3a:	6859      	ldr	r1, [r3, #4]
90005f3c:	68fb      	ldr	r3, [r7, #12]
90005f3e:	681a      	ldr	r2, [r3, #0]
90005f40:	4b0b      	ldr	r3, [pc, #44]	@ (90005f70 <HAL_I2C_Mem_Read+0x230>)
90005f42:	400b      	ands	r3, r1
90005f44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005f46:	68fb      	ldr	r3, [r7, #12]
90005f48:	2220      	movs	r2, #32
90005f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005f4e:	68fb      	ldr	r3, [r7, #12]
90005f50:	2200      	movs	r2, #0
90005f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005f56:	68fb      	ldr	r3, [r7, #12]
90005f58:	2200      	movs	r2, #0
90005f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005f5e:	2300      	movs	r3, #0
90005f60:	e000      	b.n	90005f64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005f62:	2302      	movs	r3, #2
  }
}
90005f64:	4618      	mov	r0, r3
90005f66:	3718      	adds	r7, #24
90005f68:	46bd      	mov	sp, r7
90005f6a:	bd80      	pop	{r7, pc}
90005f6c:	80002400 	.word	0x80002400
90005f70:	fe00e800 	.word	0xfe00e800

90005f74 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005f74:	b480      	push	{r7}
90005f76:	b083      	sub	sp, #12
90005f78:	af00      	add	r7, sp, #0
90005f7a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005f7c:	687b      	ldr	r3, [r7, #4]
90005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005f82:	b2db      	uxtb	r3, r3
}
90005f84:	4618      	mov	r0, r3
90005f86:	370c      	adds	r7, #12
90005f88:	46bd      	mov	sp, r7
90005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005f8e:	4770      	bx	lr

90005f90 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005f90:	b480      	push	{r7}
90005f92:	b083      	sub	sp, #12
90005f94:	af00      	add	r7, sp, #0
90005f96:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005f98:	687b      	ldr	r3, [r7, #4]
90005f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005f9c:	4618      	mov	r0, r3
90005f9e:	370c      	adds	r7, #12
90005fa0:	46bd      	mov	sp, r7
90005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
90005fa6:	4770      	bx	lr

90005fa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005fa8:	b580      	push	{r7, lr}
90005faa:	b086      	sub	sp, #24
90005fac:	af02      	add	r7, sp, #8
90005fae:	60f8      	str	r0, [r7, #12]
90005fb0:	4608      	mov	r0, r1
90005fb2:	4611      	mov	r1, r2
90005fb4:	461a      	mov	r2, r3
90005fb6:	4603      	mov	r3, r0
90005fb8:	817b      	strh	r3, [r7, #10]
90005fba:	460b      	mov	r3, r1
90005fbc:	813b      	strh	r3, [r7, #8]
90005fbe:	4613      	mov	r3, r2
90005fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005fc2:	88fb      	ldrh	r3, [r7, #6]
90005fc4:	b2da      	uxtb	r2, r3
90005fc6:	8979      	ldrh	r1, [r7, #10]
90005fc8:	4b20      	ldr	r3, [pc, #128]	@ (9000604c <I2C_RequestMemoryRead+0xa4>)
90005fca:	9300      	str	r3, [sp, #0]
90005fcc:	2300      	movs	r3, #0
90005fce:	68f8      	ldr	r0, [r7, #12]
90005fd0:	f000 fa26 	bl	90006420 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005fd4:	69fa      	ldr	r2, [r7, #28]
90005fd6:	69b9      	ldr	r1, [r7, #24]
90005fd8:	68f8      	ldr	r0, [r7, #12]
90005fda:	f000 f8b6 	bl	9000614a <I2C_WaitOnTXISFlagUntilTimeout>
90005fde:	4603      	mov	r3, r0
90005fe0:	2b00      	cmp	r3, #0
90005fe2:	d001      	beq.n	90005fe8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005fe4:	2301      	movs	r3, #1
90005fe6:	e02c      	b.n	90006042 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005fe8:	88fb      	ldrh	r3, [r7, #6]
90005fea:	2b01      	cmp	r3, #1
90005fec:	d105      	bne.n	90005ffa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005fee:	893b      	ldrh	r3, [r7, #8]
90005ff0:	b2da      	uxtb	r2, r3
90005ff2:	68fb      	ldr	r3, [r7, #12]
90005ff4:	681b      	ldr	r3, [r3, #0]
90005ff6:	629a      	str	r2, [r3, #40]	@ 0x28
90005ff8:	e015      	b.n	90006026 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005ffa:	893b      	ldrh	r3, [r7, #8]
90005ffc:	0a1b      	lsrs	r3, r3, #8
90005ffe:	b29b      	uxth	r3, r3
90006000:	b2da      	uxtb	r2, r3
90006002:	68fb      	ldr	r3, [r7, #12]
90006004:	681b      	ldr	r3, [r3, #0]
90006006:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006008:	69fa      	ldr	r2, [r7, #28]
9000600a:	69b9      	ldr	r1, [r7, #24]
9000600c:	68f8      	ldr	r0, [r7, #12]
9000600e:	f000 f89c 	bl	9000614a <I2C_WaitOnTXISFlagUntilTimeout>
90006012:	4603      	mov	r3, r0
90006014:	2b00      	cmp	r3, #0
90006016:	d001      	beq.n	9000601c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90006018:	2301      	movs	r3, #1
9000601a:	e012      	b.n	90006042 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000601c:	893b      	ldrh	r3, [r7, #8]
9000601e:	b2da      	uxtb	r2, r3
90006020:	68fb      	ldr	r3, [r7, #12]
90006022:	681b      	ldr	r3, [r3, #0]
90006024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90006026:	69fb      	ldr	r3, [r7, #28]
90006028:	9300      	str	r3, [sp, #0]
9000602a:	69bb      	ldr	r3, [r7, #24]
9000602c:	2200      	movs	r2, #0
9000602e:	2140      	movs	r1, #64	@ 0x40
90006030:	68f8      	ldr	r0, [r7, #12]
90006032:	f000 f831 	bl	90006098 <I2C_WaitOnFlagUntilTimeout>
90006036:	4603      	mov	r3, r0
90006038:	2b00      	cmp	r3, #0
9000603a:	d001      	beq.n	90006040 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
9000603c:	2301      	movs	r3, #1
9000603e:	e000      	b.n	90006042 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90006040:	2300      	movs	r3, #0
}
90006042:	4618      	mov	r0, r3
90006044:	3710      	adds	r7, #16
90006046:	46bd      	mov	sp, r7
90006048:	bd80      	pop	{r7, pc}
9000604a:	bf00      	nop
9000604c:	80002000 	.word	0x80002000

90006050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90006050:	b480      	push	{r7}
90006052:	b083      	sub	sp, #12
90006054:	af00      	add	r7, sp, #0
90006056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90006058:	687b      	ldr	r3, [r7, #4]
9000605a:	681b      	ldr	r3, [r3, #0]
9000605c:	699b      	ldr	r3, [r3, #24]
9000605e:	f003 0302 	and.w	r3, r3, #2
90006062:	2b02      	cmp	r3, #2
90006064:	d103      	bne.n	9000606e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90006066:	687b      	ldr	r3, [r7, #4]
90006068:	681b      	ldr	r3, [r3, #0]
9000606a:	2200      	movs	r2, #0
9000606c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000606e:	687b      	ldr	r3, [r7, #4]
90006070:	681b      	ldr	r3, [r3, #0]
90006072:	699b      	ldr	r3, [r3, #24]
90006074:	f003 0301 	and.w	r3, r3, #1
90006078:	2b01      	cmp	r3, #1
9000607a:	d007      	beq.n	9000608c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000607c:	687b      	ldr	r3, [r7, #4]
9000607e:	681b      	ldr	r3, [r3, #0]
90006080:	699a      	ldr	r2, [r3, #24]
90006082:	687b      	ldr	r3, [r7, #4]
90006084:	681b      	ldr	r3, [r3, #0]
90006086:	f042 0201 	orr.w	r2, r2, #1
9000608a:	619a      	str	r2, [r3, #24]
  }
}
9000608c:	bf00      	nop
9000608e:	370c      	adds	r7, #12
90006090:	46bd      	mov	sp, r7
90006092:	f85d 7b04 	ldr.w	r7, [sp], #4
90006096:	4770      	bx	lr

90006098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90006098:	b580      	push	{r7, lr}
9000609a:	b084      	sub	sp, #16
9000609c:	af00      	add	r7, sp, #0
9000609e:	60f8      	str	r0, [r7, #12]
900060a0:	60b9      	str	r1, [r7, #8]
900060a2:	603b      	str	r3, [r7, #0]
900060a4:	4613      	mov	r3, r2
900060a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900060a8:	e03b      	b.n	90006122 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900060aa:	69ba      	ldr	r2, [r7, #24]
900060ac:	6839      	ldr	r1, [r7, #0]
900060ae:	68f8      	ldr	r0, [r7, #12]
900060b0:	f000 f8d6 	bl	90006260 <I2C_IsErrorOccurred>
900060b4:	4603      	mov	r3, r0
900060b6:	2b00      	cmp	r3, #0
900060b8:	d001      	beq.n	900060be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
900060ba:	2301      	movs	r3, #1
900060bc:	e041      	b.n	90006142 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900060be:	683b      	ldr	r3, [r7, #0]
900060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
900060c4:	d02d      	beq.n	90006122 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900060c6:	f7fd f963 	bl	90003390 <HAL_GetTick>
900060ca:	4602      	mov	r2, r0
900060cc:	69bb      	ldr	r3, [r7, #24]
900060ce:	1ad3      	subs	r3, r2, r3
900060d0:	683a      	ldr	r2, [r7, #0]
900060d2:	429a      	cmp	r2, r3
900060d4:	d302      	bcc.n	900060dc <I2C_WaitOnFlagUntilTimeout+0x44>
900060d6:	683b      	ldr	r3, [r7, #0]
900060d8:	2b00      	cmp	r3, #0
900060da:	d122      	bne.n	90006122 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900060dc:	68fb      	ldr	r3, [r7, #12]
900060de:	681b      	ldr	r3, [r3, #0]
900060e0:	699a      	ldr	r2, [r3, #24]
900060e2:	68bb      	ldr	r3, [r7, #8]
900060e4:	4013      	ands	r3, r2
900060e6:	68ba      	ldr	r2, [r7, #8]
900060e8:	429a      	cmp	r2, r3
900060ea:	bf0c      	ite	eq
900060ec:	2301      	moveq	r3, #1
900060ee:	2300      	movne	r3, #0
900060f0:	b2db      	uxtb	r3, r3
900060f2:	461a      	mov	r2, r3
900060f4:	79fb      	ldrb	r3, [r7, #7]
900060f6:	429a      	cmp	r2, r3
900060f8:	d113      	bne.n	90006122 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900060fa:	68fb      	ldr	r3, [r7, #12]
900060fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900060fe:	f043 0220 	orr.w	r2, r3, #32
90006102:	68fb      	ldr	r3, [r7, #12]
90006104:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006106:	68fb      	ldr	r3, [r7, #12]
90006108:	2220      	movs	r2, #32
9000610a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000610e:	68fb      	ldr	r3, [r7, #12]
90006110:	2200      	movs	r2, #0
90006112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006116:	68fb      	ldr	r3, [r7, #12]
90006118:	2200      	movs	r2, #0
9000611a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
9000611e:	2301      	movs	r3, #1
90006120:	e00f      	b.n	90006142 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006122:	68fb      	ldr	r3, [r7, #12]
90006124:	681b      	ldr	r3, [r3, #0]
90006126:	699a      	ldr	r2, [r3, #24]
90006128:	68bb      	ldr	r3, [r7, #8]
9000612a:	4013      	ands	r3, r2
9000612c:	68ba      	ldr	r2, [r7, #8]
9000612e:	429a      	cmp	r2, r3
90006130:	bf0c      	ite	eq
90006132:	2301      	moveq	r3, #1
90006134:	2300      	movne	r3, #0
90006136:	b2db      	uxtb	r3, r3
90006138:	461a      	mov	r2, r3
9000613a:	79fb      	ldrb	r3, [r7, #7]
9000613c:	429a      	cmp	r2, r3
9000613e:	d0b4      	beq.n	900060aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90006140:	2300      	movs	r3, #0
}
90006142:	4618      	mov	r0, r3
90006144:	3710      	adds	r7, #16
90006146:	46bd      	mov	sp, r7
90006148:	bd80      	pop	{r7, pc}

9000614a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000614a:	b580      	push	{r7, lr}
9000614c:	b084      	sub	sp, #16
9000614e:	af00      	add	r7, sp, #0
90006150:	60f8      	str	r0, [r7, #12]
90006152:	60b9      	str	r1, [r7, #8]
90006154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006156:	e033      	b.n	900061c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006158:	687a      	ldr	r2, [r7, #4]
9000615a:	68b9      	ldr	r1, [r7, #8]
9000615c:	68f8      	ldr	r0, [r7, #12]
9000615e:	f000 f87f 	bl	90006260 <I2C_IsErrorOccurred>
90006162:	4603      	mov	r3, r0
90006164:	2b00      	cmp	r3, #0
90006166:	d001      	beq.n	9000616c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006168:	2301      	movs	r3, #1
9000616a:	e031      	b.n	900061d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000616c:	68bb      	ldr	r3, [r7, #8]
9000616e:	f1b3 3fff 	cmp.w	r3, #4294967295
90006172:	d025      	beq.n	900061c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006174:	f7fd f90c 	bl	90003390 <HAL_GetTick>
90006178:	4602      	mov	r2, r0
9000617a:	687b      	ldr	r3, [r7, #4]
9000617c:	1ad3      	subs	r3, r2, r3
9000617e:	68ba      	ldr	r2, [r7, #8]
90006180:	429a      	cmp	r2, r3
90006182:	d302      	bcc.n	9000618a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90006184:	68bb      	ldr	r3, [r7, #8]
90006186:	2b00      	cmp	r3, #0
90006188:	d11a      	bne.n	900061c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000618a:	68fb      	ldr	r3, [r7, #12]
9000618c:	681b      	ldr	r3, [r3, #0]
9000618e:	699b      	ldr	r3, [r3, #24]
90006190:	f003 0302 	and.w	r3, r3, #2
90006194:	2b02      	cmp	r3, #2
90006196:	d013      	beq.n	900061c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006198:	68fb      	ldr	r3, [r7, #12]
9000619a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000619c:	f043 0220 	orr.w	r2, r3, #32
900061a0:	68fb      	ldr	r3, [r7, #12]
900061a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900061a4:	68fb      	ldr	r3, [r7, #12]
900061a6:	2220      	movs	r2, #32
900061a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900061ac:	68fb      	ldr	r3, [r7, #12]
900061ae:	2200      	movs	r2, #0
900061b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
900061b4:	68fb      	ldr	r3, [r7, #12]
900061b6:	2200      	movs	r2, #0
900061b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
900061bc:	2301      	movs	r3, #1
900061be:	e007      	b.n	900061d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900061c0:	68fb      	ldr	r3, [r7, #12]
900061c2:	681b      	ldr	r3, [r3, #0]
900061c4:	699b      	ldr	r3, [r3, #24]
900061c6:	f003 0302 	and.w	r3, r3, #2
900061ca:	2b02      	cmp	r3, #2
900061cc:	d1c4      	bne.n	90006158 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
900061ce:	2300      	movs	r3, #0
}
900061d0:	4618      	mov	r0, r3
900061d2:	3710      	adds	r7, #16
900061d4:	46bd      	mov	sp, r7
900061d6:	bd80      	pop	{r7, pc}

900061d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900061d8:	b580      	push	{r7, lr}
900061da:	b084      	sub	sp, #16
900061dc:	af00      	add	r7, sp, #0
900061de:	60f8      	str	r0, [r7, #12]
900061e0:	60b9      	str	r1, [r7, #8]
900061e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900061e4:	e02f      	b.n	90006246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900061e6:	687a      	ldr	r2, [r7, #4]
900061e8:	68b9      	ldr	r1, [r7, #8]
900061ea:	68f8      	ldr	r0, [r7, #12]
900061ec:	f000 f838 	bl	90006260 <I2C_IsErrorOccurred>
900061f0:	4603      	mov	r3, r0
900061f2:	2b00      	cmp	r3, #0
900061f4:	d001      	beq.n	900061fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900061f6:	2301      	movs	r3, #1
900061f8:	e02d      	b.n	90006256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900061fa:	f7fd f8c9 	bl	90003390 <HAL_GetTick>
900061fe:	4602      	mov	r2, r0
90006200:	687b      	ldr	r3, [r7, #4]
90006202:	1ad3      	subs	r3, r2, r3
90006204:	68ba      	ldr	r2, [r7, #8]
90006206:	429a      	cmp	r2, r3
90006208:	d302      	bcc.n	90006210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
9000620a:	68bb      	ldr	r3, [r7, #8]
9000620c:	2b00      	cmp	r3, #0
9000620e:	d11a      	bne.n	90006246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90006210:	68fb      	ldr	r3, [r7, #12]
90006212:	681b      	ldr	r3, [r3, #0]
90006214:	699b      	ldr	r3, [r3, #24]
90006216:	f003 0320 	and.w	r3, r3, #32
9000621a:	2b20      	cmp	r3, #32
9000621c:	d013      	beq.n	90006246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000621e:	68fb      	ldr	r3, [r7, #12]
90006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006222:	f043 0220 	orr.w	r2, r3, #32
90006226:	68fb      	ldr	r3, [r7, #12]
90006228:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
9000622a:	68fb      	ldr	r3, [r7, #12]
9000622c:	2220      	movs	r2, #32
9000622e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90006232:	68fb      	ldr	r3, [r7, #12]
90006234:	2200      	movs	r2, #0
90006236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
9000623a:	68fb      	ldr	r3, [r7, #12]
9000623c:	2200      	movs	r2, #0
9000623e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90006242:	2301      	movs	r3, #1
90006244:	e007      	b.n	90006256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006246:	68fb      	ldr	r3, [r7, #12]
90006248:	681b      	ldr	r3, [r3, #0]
9000624a:	699b      	ldr	r3, [r3, #24]
9000624c:	f003 0320 	and.w	r3, r3, #32
90006250:	2b20      	cmp	r3, #32
90006252:	d1c8      	bne.n	900061e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006254:	2300      	movs	r3, #0
}
90006256:	4618      	mov	r0, r3
90006258:	3710      	adds	r7, #16
9000625a:	46bd      	mov	sp, r7
9000625c:	bd80      	pop	{r7, pc}
	...

90006260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90006260:	b580      	push	{r7, lr}
90006262:	b08a      	sub	sp, #40	@ 0x28
90006264:	af00      	add	r7, sp, #0
90006266:	60f8      	str	r0, [r7, #12]
90006268:	60b9      	str	r1, [r7, #8]
9000626a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
9000626c:	2300      	movs	r3, #0
9000626e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90006272:	68fb      	ldr	r3, [r7, #12]
90006274:	681b      	ldr	r3, [r3, #0]
90006276:	699b      	ldr	r3, [r3, #24]
90006278:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
9000627a:	2300      	movs	r3, #0
9000627c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
9000627e:	687b      	ldr	r3, [r7, #4]
90006280:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90006282:	69bb      	ldr	r3, [r7, #24]
90006284:	f003 0310 	and.w	r3, r3, #16
90006288:	2b00      	cmp	r3, #0
9000628a:	d068      	beq.n	9000635e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000628c:	68fb      	ldr	r3, [r7, #12]
9000628e:	681b      	ldr	r3, [r3, #0]
90006290:	2210      	movs	r2, #16
90006292:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006294:	e049      	b.n	9000632a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90006296:	68bb      	ldr	r3, [r7, #8]
90006298:	f1b3 3fff 	cmp.w	r3, #4294967295
9000629c:	d045      	beq.n	9000632a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000629e:	f7fd f877 	bl	90003390 <HAL_GetTick>
900062a2:	4602      	mov	r2, r0
900062a4:	69fb      	ldr	r3, [r7, #28]
900062a6:	1ad3      	subs	r3, r2, r3
900062a8:	68ba      	ldr	r2, [r7, #8]
900062aa:	429a      	cmp	r2, r3
900062ac:	d302      	bcc.n	900062b4 <I2C_IsErrorOccurred+0x54>
900062ae:	68bb      	ldr	r3, [r7, #8]
900062b0:	2b00      	cmp	r3, #0
900062b2:	d13a      	bne.n	9000632a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900062b4:	68fb      	ldr	r3, [r7, #12]
900062b6:	681b      	ldr	r3, [r3, #0]
900062b8:	685b      	ldr	r3, [r3, #4]
900062ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
900062be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
900062c0:	68fb      	ldr	r3, [r7, #12]
900062c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
900062c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900062c8:	68fb      	ldr	r3, [r7, #12]
900062ca:	681b      	ldr	r3, [r3, #0]
900062cc:	699b      	ldr	r3, [r3, #24]
900062ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
900062d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900062d6:	d121      	bne.n	9000631c <I2C_IsErrorOccurred+0xbc>
900062d8:	697b      	ldr	r3, [r7, #20]
900062da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900062de:	d01d      	beq.n	9000631c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
900062e0:	7cfb      	ldrb	r3, [r7, #19]
900062e2:	2b20      	cmp	r3, #32
900062e4:	d01a      	beq.n	9000631c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900062e6:	68fb      	ldr	r3, [r7, #12]
900062e8:	681b      	ldr	r3, [r3, #0]
900062ea:	685a      	ldr	r2, [r3, #4]
900062ec:	68fb      	ldr	r3, [r7, #12]
900062ee:	681b      	ldr	r3, [r3, #0]
900062f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
900062f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
900062f6:	f7fd f84b 	bl	90003390 <HAL_GetTick>
900062fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900062fc:	e00e      	b.n	9000631c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900062fe:	f7fd f847 	bl	90003390 <HAL_GetTick>
90006302:	4602      	mov	r2, r0
90006304:	69fb      	ldr	r3, [r7, #28]
90006306:	1ad3      	subs	r3, r2, r3
90006308:	2b19      	cmp	r3, #25
9000630a:	d907      	bls.n	9000631c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000630c:	6a3b      	ldr	r3, [r7, #32]
9000630e:	f043 0320 	orr.w	r3, r3, #32
90006312:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006314:	2301      	movs	r3, #1
90006316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
9000631a:	e006      	b.n	9000632a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000631c:	68fb      	ldr	r3, [r7, #12]
9000631e:	681b      	ldr	r3, [r3, #0]
90006320:	699b      	ldr	r3, [r3, #24]
90006322:	f003 0320 	and.w	r3, r3, #32
90006326:	2b20      	cmp	r3, #32
90006328:	d1e9      	bne.n	900062fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000632a:	68fb      	ldr	r3, [r7, #12]
9000632c:	681b      	ldr	r3, [r3, #0]
9000632e:	699b      	ldr	r3, [r3, #24]
90006330:	f003 0320 	and.w	r3, r3, #32
90006334:	2b20      	cmp	r3, #32
90006336:	d003      	beq.n	90006340 <I2C_IsErrorOccurred+0xe0>
90006338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000633c:	2b00      	cmp	r3, #0
9000633e:	d0aa      	beq.n	90006296 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006344:	2b00      	cmp	r3, #0
90006346:	d103      	bne.n	90006350 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006348:	68fb      	ldr	r3, [r7, #12]
9000634a:	681b      	ldr	r3, [r3, #0]
9000634c:	2220      	movs	r2, #32
9000634e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006350:	6a3b      	ldr	r3, [r7, #32]
90006352:	f043 0304 	orr.w	r3, r3, #4
90006356:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006358:	2301      	movs	r3, #1
9000635a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000635e:	68fb      	ldr	r3, [r7, #12]
90006360:	681b      	ldr	r3, [r3, #0]
90006362:	699b      	ldr	r3, [r3, #24]
90006364:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006366:	69bb      	ldr	r3, [r7, #24]
90006368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000636c:	2b00      	cmp	r3, #0
9000636e:	d00b      	beq.n	90006388 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90006370:	6a3b      	ldr	r3, [r7, #32]
90006372:	f043 0301 	orr.w	r3, r3, #1
90006376:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006378:	68fb      	ldr	r3, [r7, #12]
9000637a:	681b      	ldr	r3, [r3, #0]
9000637c:	f44f 7280 	mov.w	r2, #256	@ 0x100
90006380:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006382:	2301      	movs	r3, #1
90006384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006388:	69bb      	ldr	r3, [r7, #24]
9000638a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000638e:	2b00      	cmp	r3, #0
90006390:	d00b      	beq.n	900063aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
90006392:	6a3b      	ldr	r3, [r7, #32]
90006394:	f043 0308 	orr.w	r3, r3, #8
90006398:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000639a:	68fb      	ldr	r3, [r7, #12]
9000639c:	681b      	ldr	r3, [r3, #0]
9000639e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900063a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900063a4:	2301      	movs	r3, #1
900063a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900063aa:	69bb      	ldr	r3, [r7, #24]
900063ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900063b0:	2b00      	cmp	r3, #0
900063b2:	d00b      	beq.n	900063cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
900063b4:	6a3b      	ldr	r3, [r7, #32]
900063b6:	f043 0302 	orr.w	r3, r3, #2
900063ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900063bc:	68fb      	ldr	r3, [r7, #12]
900063be:	681b      	ldr	r3, [r3, #0]
900063c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
900063c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900063c6:	2301      	movs	r3, #1
900063c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
900063cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900063d0:	2b00      	cmp	r3, #0
900063d2:	d01c      	beq.n	9000640e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
900063d4:	68f8      	ldr	r0, [r7, #12]
900063d6:	f7ff fe3b 	bl	90006050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900063da:	68fb      	ldr	r3, [r7, #12]
900063dc:	681b      	ldr	r3, [r3, #0]
900063de:	6859      	ldr	r1, [r3, #4]
900063e0:	68fb      	ldr	r3, [r7, #12]
900063e2:	681a      	ldr	r2, [r3, #0]
900063e4:	4b0d      	ldr	r3, [pc, #52]	@ (9000641c <I2C_IsErrorOccurred+0x1bc>)
900063e6:	400b      	ands	r3, r1
900063e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
900063ea:	68fb      	ldr	r3, [r7, #12]
900063ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
900063ee:	6a3b      	ldr	r3, [r7, #32]
900063f0:	431a      	orrs	r2, r3
900063f2:	68fb      	ldr	r3, [r7, #12]
900063f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900063f6:	68fb      	ldr	r3, [r7, #12]
900063f8:	2220      	movs	r2, #32
900063fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900063fe:	68fb      	ldr	r3, [r7, #12]
90006400:	2200      	movs	r2, #0
90006402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006406:	68fb      	ldr	r3, [r7, #12]
90006408:	2200      	movs	r2, #0
9000640a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
9000640e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
90006412:	4618      	mov	r0, r3
90006414:	3728      	adds	r7, #40	@ 0x28
90006416:	46bd      	mov	sp, r7
90006418:	bd80      	pop	{r7, pc}
9000641a:	bf00      	nop
9000641c:	fe00e800 	.word	0xfe00e800

90006420 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006420:	b480      	push	{r7}
90006422:	b087      	sub	sp, #28
90006424:	af00      	add	r7, sp, #0
90006426:	60f8      	str	r0, [r7, #12]
90006428:	607b      	str	r3, [r7, #4]
9000642a:	460b      	mov	r3, r1
9000642c:	817b      	strh	r3, [r7, #10]
9000642e:	4613      	mov	r3, r2
90006430:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006432:	897b      	ldrh	r3, [r7, #10]
90006434:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006438:	7a7b      	ldrb	r3, [r7, #9]
9000643a:	041b      	lsls	r3, r3, #16
9000643c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006440:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006442:	687b      	ldr	r3, [r7, #4]
90006444:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006446:	6a3b      	ldr	r3, [r7, #32]
90006448:	4313      	orrs	r3, r2
9000644a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000644e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90006450:	68fb      	ldr	r3, [r7, #12]
90006452:	681b      	ldr	r3, [r3, #0]
90006454:	685a      	ldr	r2, [r3, #4]
90006456:	6a3b      	ldr	r3, [r7, #32]
90006458:	0d5b      	lsrs	r3, r3, #21
9000645a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
9000645e:	4b08      	ldr	r3, [pc, #32]	@ (90006480 <I2C_TransferConfig+0x60>)
90006460:	430b      	orrs	r3, r1
90006462:	43db      	mvns	r3, r3
90006464:	ea02 0103 	and.w	r1, r2, r3
90006468:	68fb      	ldr	r3, [r7, #12]
9000646a:	681b      	ldr	r3, [r3, #0]
9000646c:	697a      	ldr	r2, [r7, #20]
9000646e:	430a      	orrs	r2, r1
90006470:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90006472:	bf00      	nop
90006474:	371c      	adds	r7, #28
90006476:	46bd      	mov	sp, r7
90006478:	f85d 7b04 	ldr.w	r7, [sp], #4
9000647c:	4770      	bx	lr
9000647e:	bf00      	nop
90006480:	03ff63ff 	.word	0x03ff63ff

90006484 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90006484:	b480      	push	{r7}
90006486:	b083      	sub	sp, #12
90006488:	af00      	add	r7, sp, #0
9000648a:	6078      	str	r0, [r7, #4]
9000648c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000648e:	687b      	ldr	r3, [r7, #4]
90006490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006494:	b2db      	uxtb	r3, r3
90006496:	2b20      	cmp	r3, #32
90006498:	d138      	bne.n	9000650c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000649a:	687b      	ldr	r3, [r7, #4]
9000649c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900064a0:	2b01      	cmp	r3, #1
900064a2:	d101      	bne.n	900064a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
900064a4:	2302      	movs	r3, #2
900064a6:	e032      	b.n	9000650e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
900064a8:	687b      	ldr	r3, [r7, #4]
900064aa:	2201      	movs	r2, #1
900064ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900064b0:	687b      	ldr	r3, [r7, #4]
900064b2:	2224      	movs	r2, #36	@ 0x24
900064b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900064b8:	687b      	ldr	r3, [r7, #4]
900064ba:	681b      	ldr	r3, [r3, #0]
900064bc:	681a      	ldr	r2, [r3, #0]
900064be:	687b      	ldr	r3, [r7, #4]
900064c0:	681b      	ldr	r3, [r3, #0]
900064c2:	f022 0201 	bic.w	r2, r2, #1
900064c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
900064c8:	687b      	ldr	r3, [r7, #4]
900064ca:	681b      	ldr	r3, [r3, #0]
900064cc:	681a      	ldr	r2, [r3, #0]
900064ce:	687b      	ldr	r3, [r7, #4]
900064d0:	681b      	ldr	r3, [r3, #0]
900064d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
900064d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
900064d8:	687b      	ldr	r3, [r7, #4]
900064da:	681b      	ldr	r3, [r3, #0]
900064dc:	6819      	ldr	r1, [r3, #0]
900064de:	687b      	ldr	r3, [r7, #4]
900064e0:	681b      	ldr	r3, [r3, #0]
900064e2:	683a      	ldr	r2, [r7, #0]
900064e4:	430a      	orrs	r2, r1
900064e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900064e8:	687b      	ldr	r3, [r7, #4]
900064ea:	681b      	ldr	r3, [r3, #0]
900064ec:	681a      	ldr	r2, [r3, #0]
900064ee:	687b      	ldr	r3, [r7, #4]
900064f0:	681b      	ldr	r3, [r3, #0]
900064f2:	f042 0201 	orr.w	r2, r2, #1
900064f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900064f8:	687b      	ldr	r3, [r7, #4]
900064fa:	2220      	movs	r2, #32
900064fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006500:	687b      	ldr	r3, [r7, #4]
90006502:	2200      	movs	r2, #0
90006504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006508:	2300      	movs	r3, #0
9000650a:	e000      	b.n	9000650e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
9000650c:	2302      	movs	r3, #2
  }
}
9000650e:	4618      	mov	r0, r3
90006510:	370c      	adds	r7, #12
90006512:	46bd      	mov	sp, r7
90006514:	f85d 7b04 	ldr.w	r7, [sp], #4
90006518:	4770      	bx	lr

9000651a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
9000651a:	b480      	push	{r7}
9000651c:	b085      	sub	sp, #20
9000651e:	af00      	add	r7, sp, #0
90006520:	6078      	str	r0, [r7, #4]
90006522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006524:	687b      	ldr	r3, [r7, #4]
90006526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
9000652a:	b2db      	uxtb	r3, r3
9000652c:	2b20      	cmp	r3, #32
9000652e:	d139      	bne.n	900065a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006530:	687b      	ldr	r3, [r7, #4]
90006532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006536:	2b01      	cmp	r3, #1
90006538:	d101      	bne.n	9000653e <HAL_I2CEx_ConfigDigitalFilter+0x24>
9000653a:	2302      	movs	r3, #2
9000653c:	e033      	b.n	900065a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000653e:	687b      	ldr	r3, [r7, #4]
90006540:	2201      	movs	r2, #1
90006542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006546:	687b      	ldr	r3, [r7, #4]
90006548:	2224      	movs	r2, #36	@ 0x24
9000654a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000654e:	687b      	ldr	r3, [r7, #4]
90006550:	681b      	ldr	r3, [r3, #0]
90006552:	681a      	ldr	r2, [r3, #0]
90006554:	687b      	ldr	r3, [r7, #4]
90006556:	681b      	ldr	r3, [r3, #0]
90006558:	f022 0201 	bic.w	r2, r2, #1
9000655c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
9000655e:	687b      	ldr	r3, [r7, #4]
90006560:	681b      	ldr	r3, [r3, #0]
90006562:	681b      	ldr	r3, [r3, #0]
90006564:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006566:	68fb      	ldr	r3, [r7, #12]
90006568:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
9000656c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000656e:	683b      	ldr	r3, [r7, #0]
90006570:	021b      	lsls	r3, r3, #8
90006572:	68fa      	ldr	r2, [r7, #12]
90006574:	4313      	orrs	r3, r2
90006576:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006578:	687b      	ldr	r3, [r7, #4]
9000657a:	681b      	ldr	r3, [r3, #0]
9000657c:	68fa      	ldr	r2, [r7, #12]
9000657e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006580:	687b      	ldr	r3, [r7, #4]
90006582:	681b      	ldr	r3, [r3, #0]
90006584:	681a      	ldr	r2, [r3, #0]
90006586:	687b      	ldr	r3, [r7, #4]
90006588:	681b      	ldr	r3, [r3, #0]
9000658a:	f042 0201 	orr.w	r2, r2, #1
9000658e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006590:	687b      	ldr	r3, [r7, #4]
90006592:	2220      	movs	r2, #32
90006594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006598:	687b      	ldr	r3, [r7, #4]
9000659a:	2200      	movs	r2, #0
9000659c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900065a0:	2300      	movs	r3, #0
900065a2:	e000      	b.n	900065a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900065a4:	2302      	movs	r3, #2
  }
}
900065a6:	4618      	mov	r0, r3
900065a8:	3714      	adds	r7, #20
900065aa:	46bd      	mov	sp, r7
900065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900065b0:	4770      	bx	lr

900065b2 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900065b2:	b580      	push	{r7, lr}
900065b4:	b084      	sub	sp, #16
900065b6:	af00      	add	r7, sp, #0
900065b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900065ba:	687b      	ldr	r3, [r7, #4]
900065bc:	2b00      	cmp	r3, #0
900065be:	d101      	bne.n	900065c4 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
900065c0:	2301      	movs	r3, #1
900065c2:	e08f      	b.n	900066e4 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
900065c4:	687b      	ldr	r3, [r7, #4]
900065c6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
900065ca:	b2db      	uxtb	r3, r3
900065cc:	2b00      	cmp	r3, #0
900065ce:	d106      	bne.n	900065de <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
900065d0:	687b      	ldr	r3, [r7, #4]
900065d2:	2200      	movs	r2, #0
900065d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
900065d8:	6878      	ldr	r0, [r7, #4]
900065da:	f000 f887 	bl	900066ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900065de:	687b      	ldr	r3, [r7, #4]
900065e0:	2202      	movs	r2, #2
900065e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
900065e6:	687b      	ldr	r3, [r7, #4]
900065e8:	681b      	ldr	r3, [r3, #0]
900065ea:	699a      	ldr	r2, [r3, #24]
900065ec:	687b      	ldr	r3, [r7, #4]
900065ee:	681b      	ldr	r3, [r3, #0]
900065f0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
900065f4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900065f6:	687b      	ldr	r3, [r7, #4]
900065f8:	681b      	ldr	r3, [r3, #0]
900065fa:	6999      	ldr	r1, [r3, #24]
900065fc:	687b      	ldr	r3, [r7, #4]
900065fe:	685a      	ldr	r2, [r3, #4]
90006600:	687b      	ldr	r3, [r7, #4]
90006602:	689b      	ldr	r3, [r3, #8]
90006604:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006606:	687b      	ldr	r3, [r7, #4]
90006608:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000660a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000660c:	687b      	ldr	r3, [r7, #4]
9000660e:	691b      	ldr	r3, [r3, #16]
90006610:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006612:	687b      	ldr	r3, [r7, #4]
90006614:	681b      	ldr	r3, [r3, #0]
90006616:	430a      	orrs	r2, r1
90006618:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000661a:	687b      	ldr	r3, [r7, #4]
9000661c:	695b      	ldr	r3, [r3, #20]
9000661e:	041b      	lsls	r3, r3, #16
90006620:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
90006622:	687b      	ldr	r3, [r7, #4]
90006624:	6999      	ldr	r1, [r3, #24]
90006626:	687b      	ldr	r3, [r7, #4]
90006628:	681b      	ldr	r3, [r3, #0]
9000662a:	68fa      	ldr	r2, [r7, #12]
9000662c:	430a      	orrs	r2, r1
9000662e:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90006630:	687b      	ldr	r3, [r7, #4]
90006632:	69db      	ldr	r3, [r3, #28]
90006634:	041b      	lsls	r3, r3, #16
90006636:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90006638:	687b      	ldr	r3, [r7, #4]
9000663a:	6a19      	ldr	r1, [r3, #32]
9000663c:	687b      	ldr	r3, [r7, #4]
9000663e:	681b      	ldr	r3, [r3, #0]
90006640:	68fa      	ldr	r2, [r7, #12]
90006642:	430a      	orrs	r2, r1
90006644:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90006646:	687b      	ldr	r3, [r7, #4]
90006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000664a:	041b      	lsls	r3, r3, #16
9000664c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
9000664e:	687b      	ldr	r3, [r7, #4]
90006650:	6a99      	ldr	r1, [r3, #40]	@ 0x28
90006652:	687b      	ldr	r3, [r7, #4]
90006654:	681b      	ldr	r3, [r3, #0]
90006656:	68fa      	ldr	r2, [r7, #12]
90006658:	430a      	orrs	r2, r1
9000665a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
9000665c:	687b      	ldr	r3, [r7, #4]
9000665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006660:	041b      	lsls	r3, r3, #16
90006662:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006664:	687b      	ldr	r3, [r7, #4]
90006666:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006668:	687b      	ldr	r3, [r7, #4]
9000666a:	681b      	ldr	r3, [r3, #0]
9000666c:	68fa      	ldr	r2, [r7, #12]
9000666e:	430a      	orrs	r2, r1
90006670:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90006672:	687b      	ldr	r3, [r7, #4]
90006674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90006678:	021b      	lsls	r3, r3, #8
9000667a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000667c:	687b      	ldr	r3, [r7, #4]
9000667e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
90006682:	041b      	lsls	r3, r3, #16
90006684:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006686:	687b      	ldr	r3, [r7, #4]
90006688:	681b      	ldr	r3, [r3, #0]
9000668a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000668c:	687b      	ldr	r3, [r7, #4]
9000668e:	681b      	ldr	r3, [r3, #0]
90006690:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90006694:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006696:	687b      	ldr	r3, [r7, #4]
90006698:	681b      	ldr	r3, [r3, #0]
9000669a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
9000669c:	68ba      	ldr	r2, [r7, #8]
9000669e:	68fb      	ldr	r3, [r7, #12]
900066a0:	4313      	orrs	r3, r2
900066a2:	687a      	ldr	r2, [r7, #4]
900066a4:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
900066a8:	431a      	orrs	r2, r3
900066aa:	687b      	ldr	r3, [r7, #4]
900066ac:	681b      	ldr	r3, [r3, #0]
900066ae:	430a      	orrs	r2, r1
900066b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900066b2:	687b      	ldr	r3, [r7, #4]
900066b4:	681b      	ldr	r3, [r3, #0]
900066b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900066b8:	687b      	ldr	r3, [r7, #4]
900066ba:	681b      	ldr	r3, [r3, #0]
900066bc:	f042 0206 	orr.w	r2, r2, #6
900066c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
900066c2:	687b      	ldr	r3, [r7, #4]
900066c4:	681b      	ldr	r3, [r3, #0]
900066c6:	699a      	ldr	r2, [r3, #24]
900066c8:	687b      	ldr	r3, [r7, #4]
900066ca:	681b      	ldr	r3, [r3, #0]
900066cc:	f042 0201 	orr.w	r2, r2, #1
900066d0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900066d2:	687b      	ldr	r3, [r7, #4]
900066d4:	2200      	movs	r2, #0
900066d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
900066da:	687b      	ldr	r3, [r7, #4]
900066dc:	2201      	movs	r2, #1
900066de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
900066e2:	2300      	movs	r3, #0
}
900066e4:	4618      	mov	r0, r3
900066e6:	3710      	adds	r7, #16
900066e8:	46bd      	mov	sp, r7
900066ea:	bd80      	pop	{r7, pc}

900066ec <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900066ec:	b480      	push	{r7}
900066ee:	b083      	sub	sp, #12
900066f0:	af00      	add	r7, sp, #0
900066f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
900066f4:	bf00      	nop
900066f6:	370c      	adds	r7, #12
900066f8:	46bd      	mov	sp, r7
900066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
900066fe:	4770      	bx	lr

90006700 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006700:	b5b0      	push	{r4, r5, r7, lr}
90006702:	b084      	sub	sp, #16
90006704:	af00      	add	r7, sp, #0
90006706:	60f8      	str	r0, [r7, #12]
90006708:	60b9      	str	r1, [r7, #8]
9000670a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000670c:	68fb      	ldr	r3, [r7, #12]
9000670e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90006712:	2b01      	cmp	r3, #1
90006714:	d101      	bne.n	9000671a <HAL_LTDC_ConfigLayer+0x1a>
90006716:	2302      	movs	r3, #2
90006718:	e02c      	b.n	90006774 <HAL_LTDC_ConfigLayer+0x74>
9000671a:	68fb      	ldr	r3, [r7, #12]
9000671c:	2201      	movs	r2, #1
9000671e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006722:	68fb      	ldr	r3, [r7, #12]
90006724:	2202      	movs	r2, #2
90006726:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000672a:	68fa      	ldr	r2, [r7, #12]
9000672c:	687b      	ldr	r3, [r7, #4]
9000672e:	2134      	movs	r1, #52	@ 0x34
90006730:	fb01 f303 	mul.w	r3, r1, r3
90006734:	4413      	add	r3, r2
90006736:	f103 0238 	add.w	r2, r3, #56	@ 0x38
9000673a:	68bb      	ldr	r3, [r7, #8]
9000673c:	4614      	mov	r4, r2
9000673e:	461d      	mov	r5, r3
90006740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000674a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000674c:	682b      	ldr	r3, [r5, #0]
9000674e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90006750:	687a      	ldr	r2, [r7, #4]
90006752:	68b9      	ldr	r1, [r7, #8]
90006754:	68f8      	ldr	r0, [r7, #12]
90006756:	f000 f811 	bl	9000677c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000675a:	68fb      	ldr	r3, [r7, #12]
9000675c:	681b      	ldr	r3, [r3, #0]
9000675e:	2201      	movs	r2, #1
90006760:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90006762:	68fb      	ldr	r3, [r7, #12]
90006764:	2201      	movs	r2, #1
90006766:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
9000676a:	68fb      	ldr	r3, [r7, #12]
9000676c:	2200      	movs	r2, #0
9000676e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90006772:	2300      	movs	r3, #0
}
90006774:	4618      	mov	r0, r3
90006776:	3710      	adds	r7, #16
90006778:	46bd      	mov	sp, r7
9000677a:	bdb0      	pop	{r4, r5, r7, pc}

9000677c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000677c:	b480      	push	{r7}
9000677e:	b089      	sub	sp, #36	@ 0x24
90006780:	af00      	add	r7, sp, #0
90006782:	60f8      	str	r0, [r7, #12]
90006784:	60b9      	str	r1, [r7, #8]
90006786:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006788:	68bb      	ldr	r3, [r7, #8]
9000678a:	685a      	ldr	r2, [r3, #4]
9000678c:	68fb      	ldr	r3, [r7, #12]
9000678e:	681b      	ldr	r3, [r3, #0]
90006790:	68db      	ldr	r3, [r3, #12]
90006792:	0c1b      	lsrs	r3, r3, #16
90006794:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006798:	4413      	add	r3, r2
9000679a:	041b      	lsls	r3, r3, #16
9000679c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000679e:	68fb      	ldr	r3, [r7, #12]
900067a0:	681b      	ldr	r3, [r3, #0]
900067a2:	461a      	mov	r2, r3
900067a4:	687b      	ldr	r3, [r7, #4]
900067a6:	01db      	lsls	r3, r3, #7
900067a8:	4413      	add	r3, r2
900067aa:	3384      	adds	r3, #132	@ 0x84
900067ac:	685b      	ldr	r3, [r3, #4]
900067ae:	68fa      	ldr	r2, [r7, #12]
900067b0:	6812      	ldr	r2, [r2, #0]
900067b2:	4611      	mov	r1, r2
900067b4:	687a      	ldr	r2, [r7, #4]
900067b6:	01d2      	lsls	r2, r2, #7
900067b8:	440a      	add	r2, r1
900067ba:	3284      	adds	r2, #132	@ 0x84
900067bc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900067c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900067c2:	68bb      	ldr	r3, [r7, #8]
900067c4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900067c6:	68fb      	ldr	r3, [r7, #12]
900067c8:	681b      	ldr	r3, [r3, #0]
900067ca:	68db      	ldr	r3, [r3, #12]
900067cc:	0c1b      	lsrs	r3, r3, #16
900067ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900067d2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900067d4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900067d6:	68fb      	ldr	r3, [r7, #12]
900067d8:	681b      	ldr	r3, [r3, #0]
900067da:	4619      	mov	r1, r3
900067dc:	687b      	ldr	r3, [r7, #4]
900067de:	01db      	lsls	r3, r3, #7
900067e0:	440b      	add	r3, r1
900067e2:	3384      	adds	r3, #132	@ 0x84
900067e4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900067e6:	69fb      	ldr	r3, [r7, #28]
900067e8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900067ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900067ec:	68bb      	ldr	r3, [r7, #8]
900067ee:	68da      	ldr	r2, [r3, #12]
900067f0:	68fb      	ldr	r3, [r7, #12]
900067f2:	681b      	ldr	r3, [r3, #0]
900067f4:	68db      	ldr	r3, [r3, #12]
900067f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
900067fa:	4413      	add	r3, r2
900067fc:	041b      	lsls	r3, r3, #16
900067fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90006800:	68fb      	ldr	r3, [r7, #12]
90006802:	681b      	ldr	r3, [r3, #0]
90006804:	461a      	mov	r2, r3
90006806:	687b      	ldr	r3, [r7, #4]
90006808:	01db      	lsls	r3, r3, #7
9000680a:	4413      	add	r3, r2
9000680c:	3384      	adds	r3, #132	@ 0x84
9000680e:	689b      	ldr	r3, [r3, #8]
90006810:	68fa      	ldr	r2, [r7, #12]
90006812:	6812      	ldr	r2, [r2, #0]
90006814:	4611      	mov	r1, r2
90006816:	687a      	ldr	r2, [r7, #4]
90006818:	01d2      	lsls	r2, r2, #7
9000681a:	440a      	add	r2, r1
9000681c:	3284      	adds	r2, #132	@ 0x84
9000681e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006822:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90006824:	68bb      	ldr	r3, [r7, #8]
90006826:	689a      	ldr	r2, [r3, #8]
90006828:	68fb      	ldr	r3, [r7, #12]
9000682a:	681b      	ldr	r3, [r3, #0]
9000682c:	68db      	ldr	r3, [r3, #12]
9000682e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006832:	4413      	add	r3, r2
90006834:	1c5a      	adds	r2, r3, #1
90006836:	68fb      	ldr	r3, [r7, #12]
90006838:	681b      	ldr	r3, [r3, #0]
9000683a:	4619      	mov	r1, r3
9000683c:	687b      	ldr	r3, [r7, #4]
9000683e:	01db      	lsls	r3, r3, #7
90006840:	440b      	add	r3, r1
90006842:	3384      	adds	r3, #132	@ 0x84
90006844:	4619      	mov	r1, r3
90006846:	69fb      	ldr	r3, [r7, #28]
90006848:	4313      	orrs	r3, r2
9000684a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000684c:	68fb      	ldr	r3, [r7, #12]
9000684e:	681b      	ldr	r3, [r3, #0]
90006850:	461a      	mov	r2, r3
90006852:	687b      	ldr	r3, [r7, #4]
90006854:	01db      	lsls	r3, r3, #7
90006856:	4413      	add	r3, r2
90006858:	3384      	adds	r3, #132	@ 0x84
9000685a:	691b      	ldr	r3, [r3, #16]
9000685c:	68fa      	ldr	r2, [r7, #12]
9000685e:	6812      	ldr	r2, [r2, #0]
90006860:	4611      	mov	r1, r2
90006862:	687a      	ldr	r2, [r7, #4]
90006864:	01d2      	lsls	r2, r2, #7
90006866:	440a      	add	r2, r1
90006868:	3284      	adds	r2, #132	@ 0x84
9000686a:	f023 0307 	bic.w	r3, r3, #7
9000686e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90006870:	68fb      	ldr	r3, [r7, #12]
90006872:	681b      	ldr	r3, [r3, #0]
90006874:	461a      	mov	r2, r3
90006876:	687b      	ldr	r3, [r7, #4]
90006878:	01db      	lsls	r3, r3, #7
9000687a:	4413      	add	r3, r2
9000687c:	3384      	adds	r3, #132	@ 0x84
9000687e:	461a      	mov	r2, r3
90006880:	68bb      	ldr	r3, [r7, #8]
90006882:	691b      	ldr	r3, [r3, #16]
90006884:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90006886:	68bb      	ldr	r3, [r7, #8]
90006888:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
9000688c:	021b      	lsls	r3, r3, #8
9000688e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006890:	68bb      	ldr	r3, [r7, #8]
90006892:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90006896:	041b      	lsls	r3, r3, #16
90006898:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000689a:	68bb      	ldr	r3, [r7, #8]
9000689c:	699b      	ldr	r3, [r3, #24]
9000689e:	061b      	lsls	r3, r3, #24
900068a0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
900068a2:	68bb      	ldr	r3, [r7, #8]
900068a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
900068a8:	461a      	mov	r2, r3
900068aa:	69fb      	ldr	r3, [r7, #28]
900068ac:	431a      	orrs	r2, r3
900068ae:	69bb      	ldr	r3, [r7, #24]
900068b0:	431a      	orrs	r2, r3
900068b2:	68fb      	ldr	r3, [r7, #12]
900068b4:	681b      	ldr	r3, [r3, #0]
900068b6:	4619      	mov	r1, r3
900068b8:	687b      	ldr	r3, [r7, #4]
900068ba:	01db      	lsls	r3, r3, #7
900068bc:	440b      	add	r3, r1
900068be:	3384      	adds	r3, #132	@ 0x84
900068c0:	4619      	mov	r1, r3
900068c2:	697b      	ldr	r3, [r7, #20]
900068c4:	4313      	orrs	r3, r2
900068c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900068c8:	68fb      	ldr	r3, [r7, #12]
900068ca:	681b      	ldr	r3, [r3, #0]
900068cc:	461a      	mov	r2, r3
900068ce:	687b      	ldr	r3, [r7, #4]
900068d0:	01db      	lsls	r3, r3, #7
900068d2:	4413      	add	r3, r2
900068d4:	3384      	adds	r3, #132	@ 0x84
900068d6:	695b      	ldr	r3, [r3, #20]
900068d8:	68fa      	ldr	r2, [r7, #12]
900068da:	6812      	ldr	r2, [r2, #0]
900068dc:	4611      	mov	r1, r2
900068de:	687a      	ldr	r2, [r7, #4]
900068e0:	01d2      	lsls	r2, r2, #7
900068e2:	440a      	add	r2, r1
900068e4:	3284      	adds	r2, #132	@ 0x84
900068e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
900068ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900068ec:	68fb      	ldr	r3, [r7, #12]
900068ee:	681b      	ldr	r3, [r3, #0]
900068f0:	461a      	mov	r2, r3
900068f2:	687b      	ldr	r3, [r7, #4]
900068f4:	01db      	lsls	r3, r3, #7
900068f6:	4413      	add	r3, r2
900068f8:	3384      	adds	r3, #132	@ 0x84
900068fa:	461a      	mov	r2, r3
900068fc:	68bb      	ldr	r3, [r7, #8]
900068fe:	695b      	ldr	r3, [r3, #20]
90006900:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90006902:	68fb      	ldr	r3, [r7, #12]
90006904:	681b      	ldr	r3, [r3, #0]
90006906:	461a      	mov	r2, r3
90006908:	687b      	ldr	r3, [r7, #4]
9000690a:	01db      	lsls	r3, r3, #7
9000690c:	4413      	add	r3, r2
9000690e:	3384      	adds	r3, #132	@ 0x84
90006910:	69da      	ldr	r2, [r3, #28]
90006912:	68fb      	ldr	r3, [r7, #12]
90006914:	681b      	ldr	r3, [r3, #0]
90006916:	4619      	mov	r1, r3
90006918:	687b      	ldr	r3, [r7, #4]
9000691a:	01db      	lsls	r3, r3, #7
9000691c:	440b      	add	r3, r1
9000691e:	3384      	adds	r3, #132	@ 0x84
90006920:	4619      	mov	r1, r3
90006922:	4b4f      	ldr	r3, [pc, #316]	@ (90006a60 <LTDC_SetConfig+0x2e4>)
90006924:	4013      	ands	r3, r2
90006926:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006928:	68bb      	ldr	r3, [r7, #8]
9000692a:	69da      	ldr	r2, [r3, #28]
9000692c:	68bb      	ldr	r3, [r7, #8]
9000692e:	6a1b      	ldr	r3, [r3, #32]
90006930:	68f9      	ldr	r1, [r7, #12]
90006932:	6809      	ldr	r1, [r1, #0]
90006934:	4608      	mov	r0, r1
90006936:	6879      	ldr	r1, [r7, #4]
90006938:	01c9      	lsls	r1, r1, #7
9000693a:	4401      	add	r1, r0
9000693c:	3184      	adds	r1, #132	@ 0x84
9000693e:	4313      	orrs	r3, r2
90006940:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90006942:	68fb      	ldr	r3, [r7, #12]
90006944:	681b      	ldr	r3, [r3, #0]
90006946:	461a      	mov	r2, r3
90006948:	687b      	ldr	r3, [r7, #4]
9000694a:	01db      	lsls	r3, r3, #7
9000694c:	4413      	add	r3, r2
9000694e:	3384      	adds	r3, #132	@ 0x84
90006950:	461a      	mov	r2, r3
90006952:	68bb      	ldr	r3, [r7, #8]
90006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006956:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006958:	68bb      	ldr	r3, [r7, #8]
9000695a:	691b      	ldr	r3, [r3, #16]
9000695c:	2b00      	cmp	r3, #0
9000695e:	d102      	bne.n	90006966 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006960:	2304      	movs	r3, #4
90006962:	61fb      	str	r3, [r7, #28]
90006964:	e01b      	b.n	9000699e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006966:	68bb      	ldr	r3, [r7, #8]
90006968:	691b      	ldr	r3, [r3, #16]
9000696a:	2b01      	cmp	r3, #1
9000696c:	d102      	bne.n	90006974 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
9000696e:	2303      	movs	r3, #3
90006970:	61fb      	str	r3, [r7, #28]
90006972:	e014      	b.n	9000699e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006974:	68bb      	ldr	r3, [r7, #8]
90006976:	691b      	ldr	r3, [r3, #16]
90006978:	2b04      	cmp	r3, #4
9000697a:	d00b      	beq.n	90006994 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
9000697c:	68bb      	ldr	r3, [r7, #8]
9000697e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006980:	2b02      	cmp	r3, #2
90006982:	d007      	beq.n	90006994 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006984:	68bb      	ldr	r3, [r7, #8]
90006986:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006988:	2b03      	cmp	r3, #3
9000698a:	d003      	beq.n	90006994 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
9000698c:	68bb      	ldr	r3, [r7, #8]
9000698e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006990:	2b07      	cmp	r3, #7
90006992:	d102      	bne.n	9000699a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90006994:	2302      	movs	r3, #2
90006996:	61fb      	str	r3, [r7, #28]
90006998:	e001      	b.n	9000699e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
9000699a:	2301      	movs	r3, #1
9000699c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000699e:	68fb      	ldr	r3, [r7, #12]
900069a0:	681b      	ldr	r3, [r3, #0]
900069a2:	461a      	mov	r2, r3
900069a4:	687b      	ldr	r3, [r7, #4]
900069a6:	01db      	lsls	r3, r3, #7
900069a8:	4413      	add	r3, r2
900069aa:	3384      	adds	r3, #132	@ 0x84
900069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900069ae:	68fa      	ldr	r2, [r7, #12]
900069b0:	6812      	ldr	r2, [r2, #0]
900069b2:	4611      	mov	r1, r2
900069b4:	687a      	ldr	r2, [r7, #4]
900069b6:	01d2      	lsls	r2, r2, #7
900069b8:	440a      	add	r2, r1
900069ba:	3284      	adds	r2, #132	@ 0x84
900069bc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
900069c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
900069c2:	68bb      	ldr	r3, [r7, #8]
900069c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900069c6:	69fa      	ldr	r2, [r7, #28]
900069c8:	fb02 f303 	mul.w	r3, r2, r3
900069cc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
900069ce:	68bb      	ldr	r3, [r7, #8]
900069d0:	6859      	ldr	r1, [r3, #4]
900069d2:	68bb      	ldr	r3, [r7, #8]
900069d4:	681b      	ldr	r3, [r3, #0]
900069d6:	1acb      	subs	r3, r1, r3
900069d8:	69f9      	ldr	r1, [r7, #28]
900069da:	fb01 f303 	mul.w	r3, r1, r3
900069de:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
900069e0:	68f9      	ldr	r1, [r7, #12]
900069e2:	6809      	ldr	r1, [r1, #0]
900069e4:	4608      	mov	r0, r1
900069e6:	6879      	ldr	r1, [r7, #4]
900069e8:	01c9      	lsls	r1, r1, #7
900069ea:	4401      	add	r1, r0
900069ec:	3184      	adds	r1, #132	@ 0x84
900069ee:	4313      	orrs	r3, r2
900069f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900069f2:	68fb      	ldr	r3, [r7, #12]
900069f4:	681b      	ldr	r3, [r3, #0]
900069f6:	461a      	mov	r2, r3
900069f8:	687b      	ldr	r3, [r7, #4]
900069fa:	01db      	lsls	r3, r3, #7
900069fc:	4413      	add	r3, r2
900069fe:	3384      	adds	r3, #132	@ 0x84
90006a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90006a02:	68fb      	ldr	r3, [r7, #12]
90006a04:	681b      	ldr	r3, [r3, #0]
90006a06:	4619      	mov	r1, r3
90006a08:	687b      	ldr	r3, [r7, #4]
90006a0a:	01db      	lsls	r3, r3, #7
90006a0c:	440b      	add	r3, r1
90006a0e:	3384      	adds	r3, #132	@ 0x84
90006a10:	4619      	mov	r1, r3
90006a12:	4b14      	ldr	r3, [pc, #80]	@ (90006a64 <LTDC_SetConfig+0x2e8>)
90006a14:	4013      	ands	r3, r2
90006a16:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006a18:	68fb      	ldr	r3, [r7, #12]
90006a1a:	681b      	ldr	r3, [r3, #0]
90006a1c:	461a      	mov	r2, r3
90006a1e:	687b      	ldr	r3, [r7, #4]
90006a20:	01db      	lsls	r3, r3, #7
90006a22:	4413      	add	r3, r2
90006a24:	3384      	adds	r3, #132	@ 0x84
90006a26:	461a      	mov	r2, r3
90006a28:	68bb      	ldr	r3, [r7, #8]
90006a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006a2c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90006a2e:	68fb      	ldr	r3, [r7, #12]
90006a30:	681b      	ldr	r3, [r3, #0]
90006a32:	461a      	mov	r2, r3
90006a34:	687b      	ldr	r3, [r7, #4]
90006a36:	01db      	lsls	r3, r3, #7
90006a38:	4413      	add	r3, r2
90006a3a:	3384      	adds	r3, #132	@ 0x84
90006a3c:	681b      	ldr	r3, [r3, #0]
90006a3e:	68fa      	ldr	r2, [r7, #12]
90006a40:	6812      	ldr	r2, [r2, #0]
90006a42:	4611      	mov	r1, r2
90006a44:	687a      	ldr	r2, [r7, #4]
90006a46:	01d2      	lsls	r2, r2, #7
90006a48:	440a      	add	r2, r1
90006a4a:	3284      	adds	r2, #132	@ 0x84
90006a4c:	f043 0301 	orr.w	r3, r3, #1
90006a50:	6013      	str	r3, [r2, #0]
}
90006a52:	bf00      	nop
90006a54:	3724      	adds	r7, #36	@ 0x24
90006a56:	46bd      	mov	sp, r7
90006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a5c:	4770      	bx	lr
90006a5e:	bf00      	nop
90006a60:	fffff8f8 	.word	0xfffff8f8
90006a64:	fffff800 	.word	0xfffff800

90006a68 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006a68:	b580      	push	{r7, lr}
90006a6a:	b084      	sub	sp, #16
90006a6c:	af00      	add	r7, sp, #0
90006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006a70:	f7fc fc8e 	bl	90003390 <HAL_GetTick>
90006a74:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006a76:	687b      	ldr	r3, [r7, #4]
90006a78:	2b00      	cmp	r3, #0
90006a7a:	d101      	bne.n	90006a80 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
90006a7c:	2301      	movs	r3, #1
90006a7e:	e03b      	b.n	90006af8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006a80:	687b      	ldr	r3, [r7, #4]
90006a82:	2200      	movs	r2, #0
90006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006a88:	687b      	ldr	r3, [r7, #4]
90006a8a:	2202      	movs	r2, #2
90006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006a90:	687b      	ldr	r3, [r7, #4]
90006a92:	681b      	ldr	r3, [r3, #0]
90006a94:	68da      	ldr	r2, [r3, #12]
90006a96:	687b      	ldr	r3, [r7, #4]
90006a98:	681b      	ldr	r3, [r3, #0]
90006a9a:	f022 0201 	bic.w	r2, r2, #1
90006a9e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006aa0:	e00f      	b.n	90006ac2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006aa2:	f7fc fc75 	bl	90003390 <HAL_GetTick>
90006aa6:	4602      	mov	r2, r0
90006aa8:	68fb      	ldr	r3, [r7, #12]
90006aaa:	1ad3      	subs	r3, r2, r3
90006aac:	2b05      	cmp	r3, #5
90006aae:	d908      	bls.n	90006ac2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006ab0:	687b      	ldr	r3, [r7, #4]
90006ab2:	2240      	movs	r2, #64	@ 0x40
90006ab4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006ab6:	687b      	ldr	r3, [r7, #4]
90006ab8:	2203      	movs	r2, #3
90006aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90006abe:	2301      	movs	r3, #1
90006ac0:	e01a      	b.n	90006af8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006ac2:	687b      	ldr	r3, [r7, #4]
90006ac4:	681b      	ldr	r3, [r3, #0]
90006ac6:	68db      	ldr	r3, [r3, #12]
90006ac8:	f003 0301 	and.w	r3, r3, #1
90006acc:	2b00      	cmp	r3, #0
90006ace:	d1e8      	bne.n	90006aa2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006ad0:	6878      	ldr	r0, [r7, #4]
90006ad2:	f000 f86d 	bl	90006bb0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006ad6:	687b      	ldr	r3, [r7, #4]
90006ad8:	2200      	movs	r2, #0
90006ada:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006adc:	687b      	ldr	r3, [r7, #4]
90006ade:	2200      	movs	r2, #0
90006ae0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006ae2:	687b      	ldr	r3, [r7, #4]
90006ae4:	2200      	movs	r2, #0
90006ae6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006ae8:	687b      	ldr	r3, [r7, #4]
90006aea:	2200      	movs	r2, #0
90006aec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
90006aee:	687b      	ldr	r3, [r7, #4]
90006af0:	2201      	movs	r2, #1
90006af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006af6:	2300      	movs	r3, #0
}
90006af8:	4618      	mov	r0, r3
90006afa:	3710      	adds	r7, #16
90006afc:	46bd      	mov	sp, r7
90006afe:	bd80      	pop	{r7, pc}

90006b00 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90006b00:	b480      	push	{r7}
90006b02:	b083      	sub	sp, #12
90006b04:	af00      	add	r7, sp, #0
90006b06:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006b08:	687b      	ldr	r3, [r7, #4]
90006b0a:	2b00      	cmp	r3, #0
90006b0c:	d101      	bne.n	90006b12 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
90006b0e:	2301      	movs	r3, #1
90006b10:	e048      	b.n	90006ba4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90006b12:	687b      	ldr	r3, [r7, #4]
90006b14:	681b      	ldr	r3, [r3, #0]
90006b16:	68da      	ldr	r2, [r3, #12]
90006b18:	687b      	ldr	r3, [r7, #4]
90006b1a:	681b      	ldr	r3, [r3, #0]
90006b1c:	f022 0201 	bic.w	r2, r2, #1
90006b20:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90006b22:	687b      	ldr	r3, [r7, #4]
90006b24:	681b      	ldr	r3, [r3, #0]
90006b26:	2200      	movs	r2, #0
90006b28:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006b2a:	687b      	ldr	r3, [r7, #4]
90006b2c:	681b      	ldr	r3, [r3, #0]
90006b2e:	2200      	movs	r2, #0
90006b30:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006b32:	687b      	ldr	r3, [r7, #4]
90006b34:	681b      	ldr	r3, [r3, #0]
90006b36:	2200      	movs	r2, #0
90006b38:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006b3a:	687b      	ldr	r3, [r7, #4]
90006b3c:	681b      	ldr	r3, [r3, #0]
90006b3e:	2200      	movs	r2, #0
90006b40:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006b42:	687b      	ldr	r3, [r7, #4]
90006b44:	681b      	ldr	r3, [r3, #0]
90006b46:	2200      	movs	r2, #0
90006b48:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006b4a:	687b      	ldr	r3, [r7, #4]
90006b4c:	681b      	ldr	r3, [r3, #0]
90006b4e:	2200      	movs	r2, #0
90006b50:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006b52:	687b      	ldr	r3, [r7, #4]
90006b54:	681b      	ldr	r3, [r3, #0]
90006b56:	2200      	movs	r2, #0
90006b58:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006b5a:	687b      	ldr	r3, [r7, #4]
90006b5c:	681b      	ldr	r3, [r3, #0]
90006b5e:	2200      	movs	r2, #0
90006b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006b62:	687b      	ldr	r3, [r7, #4]
90006b64:	681b      	ldr	r3, [r3, #0]
90006b66:	2200      	movs	r2, #0
90006b68:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006b6a:	687b      	ldr	r3, [r7, #4]
90006b6c:	681b      	ldr	r3, [r3, #0]
90006b6e:	2200      	movs	r2, #0
90006b70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006b72:	687b      	ldr	r3, [r7, #4]
90006b74:	681b      	ldr	r3, [r3, #0]
90006b76:	221f      	movs	r2, #31
90006b78:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006b7a:	687b      	ldr	r3, [r7, #4]
90006b7c:	2200      	movs	r2, #0
90006b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006b80:	687b      	ldr	r3, [r7, #4]
90006b82:	2200      	movs	r2, #0
90006b84:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006b86:	687b      	ldr	r3, [r7, #4]
90006b88:	2200      	movs	r2, #0
90006b8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006b8c:	687b      	ldr	r3, [r7, #4]
90006b8e:	2200      	movs	r2, #0
90006b90:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006b92:	687b      	ldr	r3, [r7, #4]
90006b94:	2200      	movs	r2, #0
90006b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006b9a:	687b      	ldr	r3, [r7, #4]
90006b9c:	2200      	movs	r2, #0
90006b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006ba2:	2300      	movs	r3, #0
}
90006ba4:	4618      	mov	r0, r3
90006ba6:	370c      	adds	r7, #12
90006ba8:	46bd      	mov	sp, r7
90006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
90006bae:	4770      	bx	lr

90006bb0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006bb0:	b480      	push	{r7}
90006bb2:	b085      	sub	sp, #20
90006bb4:	af00      	add	r7, sp, #0
90006bb6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006bb8:	687b      	ldr	r3, [r7, #4]
90006bba:	68d9      	ldr	r1, [r3, #12]
90006bbc:	687b      	ldr	r3, [r7, #4]
90006bbe:	691a      	ldr	r2, [r3, #16]
90006bc0:	687b      	ldr	r3, [r7, #4]
90006bc2:	681b      	ldr	r3, [r3, #0]
90006bc4:	430a      	orrs	r2, r1
90006bc6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006bc8:	687b      	ldr	r3, [r7, #4]
90006bca:	695a      	ldr	r2, [r3, #20]
90006bcc:	687b      	ldr	r3, [r7, #4]
90006bce:	699b      	ldr	r3, [r3, #24]
90006bd0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006bd2:	687b      	ldr	r3, [r7, #4]
90006bd4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006bd6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006bd8:	687b      	ldr	r3, [r7, #4]
90006bda:	6a1b      	ldr	r3, [r3, #32]
90006bdc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006bde:	687b      	ldr	r3, [r7, #4]
90006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006be2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006be4:	687b      	ldr	r3, [r7, #4]
90006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006be8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006bea:	687b      	ldr	r3, [r7, #4]
90006bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006bee:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006bf0:	687b      	ldr	r3, [r7, #4]
90006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006bf4:	3b01      	subs	r3, #1
90006bf6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006bf8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006bfc:	687b      	ldr	r3, [r7, #4]
90006bfe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006c00:	687b      	ldr	r3, [r7, #4]
90006c02:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006c04:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006c06:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006c08:	687b      	ldr	r3, [r7, #4]
90006c0a:	685b      	ldr	r3, [r3, #4]
90006c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006c10:	d107      	bne.n	90006c22 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006c12:	687b      	ldr	r3, [r7, #4]
90006c14:	681b      	ldr	r3, [r3, #0]
90006c16:	691a      	ldr	r2, [r3, #16]
90006c18:	687b      	ldr	r3, [r7, #4]
90006c1a:	681b      	ldr	r3, [r3, #0]
90006c1c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006c20:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006c22:	687b      	ldr	r3, [r7, #4]
90006c24:	681b      	ldr	r3, [r3, #0]
90006c26:	2200      	movs	r2, #0
90006c28:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006c2a:	687b      	ldr	r3, [r7, #4]
90006c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006c2e:	2b00      	cmp	r3, #0
90006c30:	da11      	bge.n	90006c56 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006c32:	687b      	ldr	r3, [r7, #4]
90006c34:	681b      	ldr	r3, [r3, #0]
90006c36:	695a      	ldr	r2, [r3, #20]
90006c38:	687b      	ldr	r3, [r7, #4]
90006c3a:	681b      	ldr	r3, [r3, #0]
90006c3c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006c40:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006c42:	687b      	ldr	r3, [r7, #4]
90006c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006c46:	425b      	negs	r3, r3
90006c48:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006c4a:	687b      	ldr	r3, [r7, #4]
90006c4c:	681b      	ldr	r3, [r3, #0]
90006c4e:	68fa      	ldr	r2, [r7, #12]
90006c50:	b292      	uxth	r2, r2
90006c52:	621a      	str	r2, [r3, #32]
90006c54:	e006      	b.n	90006c64 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006c56:	687b      	ldr	r3, [r7, #4]
90006c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006c5a:	461a      	mov	r2, r3
90006c5c:	687b      	ldr	r3, [r7, #4]
90006c5e:	681b      	ldr	r3, [r3, #0]
90006c60:	b292      	uxth	r2, r2
90006c62:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006c64:	687b      	ldr	r3, [r7, #4]
90006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006c68:	2b00      	cmp	r3, #0
90006c6a:	da15      	bge.n	90006c98 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006c6c:	687b      	ldr	r3, [r7, #4]
90006c6e:	681b      	ldr	r3, [r3, #0]
90006c70:	695a      	ldr	r2, [r3, #20]
90006c72:	687b      	ldr	r3, [r7, #4]
90006c74:	681b      	ldr	r3, [r3, #0]
90006c76:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006c7a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006c7c:	687b      	ldr	r3, [r7, #4]
90006c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006c80:	425b      	negs	r3, r3
90006c82:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006c84:	687b      	ldr	r3, [r7, #4]
90006c86:	681b      	ldr	r3, [r3, #0]
90006c88:	6a19      	ldr	r1, [r3, #32]
90006c8a:	68fb      	ldr	r3, [r7, #12]
90006c8c:	041a      	lsls	r2, r3, #16
90006c8e:	687b      	ldr	r3, [r7, #4]
90006c90:	681b      	ldr	r3, [r3, #0]
90006c92:	430a      	orrs	r2, r1
90006c94:	621a      	str	r2, [r3, #32]
90006c96:	e009      	b.n	90006cac <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006c98:	687b      	ldr	r3, [r7, #4]
90006c9a:	681b      	ldr	r3, [r3, #0]
90006c9c:	6a19      	ldr	r1, [r3, #32]
90006c9e:	687b      	ldr	r3, [r7, #4]
90006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006ca2:	041a      	lsls	r2, r3, #16
90006ca4:	687b      	ldr	r3, [r7, #4]
90006ca6:	681b      	ldr	r3, [r3, #0]
90006ca8:	430a      	orrs	r2, r1
90006caa:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006cac:	687b      	ldr	r3, [r7, #4]
90006cae:	685b      	ldr	r3, [r3, #4]
90006cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006cb4:	d006      	beq.n	90006cc4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006cb6:	687b      	ldr	r3, [r7, #4]
90006cb8:	685a      	ldr	r2, [r3, #4]
90006cba:	687b      	ldr	r3, [r7, #4]
90006cbc:	681b      	ldr	r3, [r3, #0]
90006cbe:	b2d2      	uxtb	r2, r2
90006cc0:	629a      	str	r2, [r3, #40]	@ 0x28
90006cc2:	e003      	b.n	90006ccc <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006cc4:	687b      	ldr	r3, [r7, #4]
90006cc6:	681b      	ldr	r3, [r3, #0]
90006cc8:	2200      	movs	r2, #0
90006cca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006ccc:	687b      	ldr	r3, [r7, #4]
90006cce:	681b      	ldr	r3, [r3, #0]
90006cd0:	2200      	movs	r2, #0
90006cd2:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006cd4:	bf00      	nop
90006cd6:	3714      	adds	r7, #20
90006cd8:	46bd      	mov	sp, r7
90006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
90006cde:	4770      	bx	lr

90006ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006ce0:	b580      	push	{r7, lr}
90006ce2:	b08c      	sub	sp, #48	@ 0x30
90006ce4:	af00      	add	r7, sp, #0
90006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006ce8:	687b      	ldr	r3, [r7, #4]
90006cea:	2b00      	cmp	r3, #0
90006cec:	d102      	bne.n	90006cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006cee:	2301      	movs	r3, #1
90006cf0:	f000 bc48 	b.w	90007584 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006cf4:	687b      	ldr	r3, [r7, #4]
90006cf6:	681b      	ldr	r3, [r3, #0]
90006cf8:	f003 0301 	and.w	r3, r3, #1
90006cfc:	2b00      	cmp	r3, #0
90006cfe:	f000 8088 	beq.w	90006e12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006d02:	4b99      	ldr	r3, [pc, #612]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d04:	691b      	ldr	r3, [r3, #16]
90006d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006d0c:	4b96      	ldr	r3, [pc, #600]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006d14:	2b10      	cmp	r3, #16
90006d16:	d007      	beq.n	90006d28 <HAL_RCC_OscConfig+0x48>
90006d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006d1a:	2b18      	cmp	r3, #24
90006d1c:	d111      	bne.n	90006d42 <HAL_RCC_OscConfig+0x62>
90006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006d20:	f003 0303 	and.w	r3, r3, #3
90006d24:	2b02      	cmp	r3, #2
90006d26:	d10c      	bne.n	90006d42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006d28:	4b8f      	ldr	r3, [pc, #572]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d2a:	681b      	ldr	r3, [r3, #0]
90006d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006d30:	2b00      	cmp	r3, #0
90006d32:	d06d      	beq.n	90006e10 <HAL_RCC_OscConfig+0x130>
90006d34:	687b      	ldr	r3, [r7, #4]
90006d36:	685b      	ldr	r3, [r3, #4]
90006d38:	2b00      	cmp	r3, #0
90006d3a:	d169      	bne.n	90006e10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006d3c:	2301      	movs	r3, #1
90006d3e:	f000 bc21 	b.w	90007584 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006d42:	687b      	ldr	r3, [r7, #4]
90006d44:	685b      	ldr	r3, [r3, #4]
90006d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006d4a:	d106      	bne.n	90006d5a <HAL_RCC_OscConfig+0x7a>
90006d4c:	4b86      	ldr	r3, [pc, #536]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d4e:	681b      	ldr	r3, [r3, #0]
90006d50:	4a85      	ldr	r2, [pc, #532]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006d56:	6013      	str	r3, [r2, #0]
90006d58:	e02e      	b.n	90006db8 <HAL_RCC_OscConfig+0xd8>
90006d5a:	687b      	ldr	r3, [r7, #4]
90006d5c:	685b      	ldr	r3, [r3, #4]
90006d5e:	2b00      	cmp	r3, #0
90006d60:	d10c      	bne.n	90006d7c <HAL_RCC_OscConfig+0x9c>
90006d62:	4b81      	ldr	r3, [pc, #516]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d64:	681b      	ldr	r3, [r3, #0]
90006d66:	4a80      	ldr	r2, [pc, #512]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006d6c:	6013      	str	r3, [r2, #0]
90006d6e:	4b7e      	ldr	r3, [pc, #504]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d70:	681b      	ldr	r3, [r3, #0]
90006d72:	4a7d      	ldr	r2, [pc, #500]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006d78:	6013      	str	r3, [r2, #0]
90006d7a:	e01d      	b.n	90006db8 <HAL_RCC_OscConfig+0xd8>
90006d7c:	687b      	ldr	r3, [r7, #4]
90006d7e:	685b      	ldr	r3, [r3, #4]
90006d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006d84:	d10c      	bne.n	90006da0 <HAL_RCC_OscConfig+0xc0>
90006d86:	4b78      	ldr	r3, [pc, #480]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d88:	681b      	ldr	r3, [r3, #0]
90006d8a:	4a77      	ldr	r2, [pc, #476]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006d90:	6013      	str	r3, [r2, #0]
90006d92:	4b75      	ldr	r3, [pc, #468]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d94:	681b      	ldr	r3, [r3, #0]
90006d96:	4a74      	ldr	r2, [pc, #464]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006d9c:	6013      	str	r3, [r2, #0]
90006d9e:	e00b      	b.n	90006db8 <HAL_RCC_OscConfig+0xd8>
90006da0:	4b71      	ldr	r3, [pc, #452]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006da2:	681b      	ldr	r3, [r3, #0]
90006da4:	4a70      	ldr	r2, [pc, #448]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006daa:	6013      	str	r3, [r2, #0]
90006dac:	4b6e      	ldr	r3, [pc, #440]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006dae:	681b      	ldr	r3, [r3, #0]
90006db0:	4a6d      	ldr	r2, [pc, #436]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006db8:	687b      	ldr	r3, [r7, #4]
90006dba:	685b      	ldr	r3, [r3, #4]
90006dbc:	2b00      	cmp	r3, #0
90006dbe:	d013      	beq.n	90006de8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006dc0:	f7fc fae6 	bl	90003390 <HAL_GetTick>
90006dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006dc6:	e008      	b.n	90006dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006dc8:	f7fc fae2 	bl	90003390 <HAL_GetTick>
90006dcc:	4602      	mov	r2, r0
90006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006dd0:	1ad3      	subs	r3, r2, r3
90006dd2:	2b64      	cmp	r3, #100	@ 0x64
90006dd4:	d901      	bls.n	90006dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006dd6:	2303      	movs	r3, #3
90006dd8:	e3d4      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006dda:	4b63      	ldr	r3, [pc, #396]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006ddc:	681b      	ldr	r3, [r3, #0]
90006dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006de2:	2b00      	cmp	r3, #0
90006de4:	d0f0      	beq.n	90006dc8 <HAL_RCC_OscConfig+0xe8>
90006de6:	e014      	b.n	90006e12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006de8:	f7fc fad2 	bl	90003390 <HAL_GetTick>
90006dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006dee:	e008      	b.n	90006e02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006df0:	f7fc face 	bl	90003390 <HAL_GetTick>
90006df4:	4602      	mov	r2, r0
90006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006df8:	1ad3      	subs	r3, r2, r3
90006dfa:	2b64      	cmp	r3, #100	@ 0x64
90006dfc:	d901      	bls.n	90006e02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006dfe:	2303      	movs	r3, #3
90006e00:	e3c0      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006e02:	4b59      	ldr	r3, [pc, #356]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006e04:	681b      	ldr	r3, [r3, #0]
90006e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006e0a:	2b00      	cmp	r3, #0
90006e0c:	d1f0      	bne.n	90006df0 <HAL_RCC_OscConfig+0x110>
90006e0e:	e000      	b.n	90006e12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006e12:	687b      	ldr	r3, [r7, #4]
90006e14:	681b      	ldr	r3, [r3, #0]
90006e16:	f003 0302 	and.w	r3, r3, #2
90006e1a:	2b00      	cmp	r3, #0
90006e1c:	f000 80ca 	beq.w	90006fb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006e20:	4b51      	ldr	r3, [pc, #324]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006e22:	691b      	ldr	r3, [r3, #16]
90006e24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006e28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006e2a:	4b4f      	ldr	r3, [pc, #316]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006e2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006e30:	6a3b      	ldr	r3, [r7, #32]
90006e32:	2b00      	cmp	r3, #0
90006e34:	d007      	beq.n	90006e46 <HAL_RCC_OscConfig+0x166>
90006e36:	6a3b      	ldr	r3, [r7, #32]
90006e38:	2b18      	cmp	r3, #24
90006e3a:	d156      	bne.n	90006eea <HAL_RCC_OscConfig+0x20a>
90006e3c:	69fb      	ldr	r3, [r7, #28]
90006e3e:	f003 0303 	and.w	r3, r3, #3
90006e42:	2b00      	cmp	r3, #0
90006e44:	d151      	bne.n	90006eea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e46:	4b48      	ldr	r3, [pc, #288]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006e48:	681b      	ldr	r3, [r3, #0]
90006e4a:	f003 0304 	and.w	r3, r3, #4
90006e4e:	2b00      	cmp	r3, #0
90006e50:	d005      	beq.n	90006e5e <HAL_RCC_OscConfig+0x17e>
90006e52:	687b      	ldr	r3, [r7, #4]
90006e54:	68db      	ldr	r3, [r3, #12]
90006e56:	2b00      	cmp	r3, #0
90006e58:	d101      	bne.n	90006e5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006e5a:	2301      	movs	r3, #1
90006e5c:	e392      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006e5e:	4b42      	ldr	r3, [pc, #264]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006e60:	681b      	ldr	r3, [r3, #0]
90006e62:	f023 0219 	bic.w	r2, r3, #25
90006e66:	687b      	ldr	r3, [r7, #4]
90006e68:	68db      	ldr	r3, [r3, #12]
90006e6a:	493f      	ldr	r1, [pc, #252]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006e6c:	4313      	orrs	r3, r2
90006e6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e70:	f7fc fa8e 	bl	90003390 <HAL_GetTick>
90006e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e76:	e008      	b.n	90006e8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006e78:	f7fc fa8a 	bl	90003390 <HAL_GetTick>
90006e7c:	4602      	mov	r2, r0
90006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e80:	1ad3      	subs	r3, r2, r3
90006e82:	2b02      	cmp	r3, #2
90006e84:	d901      	bls.n	90006e8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006e86:	2303      	movs	r3, #3
90006e88:	e37c      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e8a:	4b37      	ldr	r3, [pc, #220]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006e8c:	681b      	ldr	r3, [r3, #0]
90006e8e:	f003 0304 	and.w	r3, r3, #4
90006e92:	2b00      	cmp	r3, #0
90006e94:	d0f0      	beq.n	90006e78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e96:	f7fc faab 	bl	900033f0 <HAL_GetREVID>
90006e9a:	4603      	mov	r3, r0
90006e9c:	f241 0203 	movw	r2, #4099	@ 0x1003
90006ea0:	4293      	cmp	r3, r2
90006ea2:	d817      	bhi.n	90006ed4 <HAL_RCC_OscConfig+0x1f4>
90006ea4:	687b      	ldr	r3, [r7, #4]
90006ea6:	691b      	ldr	r3, [r3, #16]
90006ea8:	2b40      	cmp	r3, #64	@ 0x40
90006eaa:	d108      	bne.n	90006ebe <HAL_RCC_OscConfig+0x1de>
90006eac:	4b2e      	ldr	r3, [pc, #184]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006eae:	685b      	ldr	r3, [r3, #4]
90006eb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006eb4:	4a2c      	ldr	r2, [pc, #176]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006eba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006ebc:	e07a      	b.n	90006fb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006ebe:	4b2a      	ldr	r3, [pc, #168]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006ec0:	685b      	ldr	r3, [r3, #4]
90006ec2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006ec6:	687b      	ldr	r3, [r7, #4]
90006ec8:	691b      	ldr	r3, [r3, #16]
90006eca:	031b      	lsls	r3, r3, #12
90006ecc:	4926      	ldr	r1, [pc, #152]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006ece:	4313      	orrs	r3, r2
90006ed0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006ed2:	e06f      	b.n	90006fb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006ed4:	4b24      	ldr	r3, [pc, #144]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006ed6:	685b      	ldr	r3, [r3, #4]
90006ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006edc:	687b      	ldr	r3, [r7, #4]
90006ede:	691b      	ldr	r3, [r3, #16]
90006ee0:	061b      	lsls	r3, r3, #24
90006ee2:	4921      	ldr	r1, [pc, #132]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006ee4:	4313      	orrs	r3, r2
90006ee6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006ee8:	e064      	b.n	90006fb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006eea:	687b      	ldr	r3, [r7, #4]
90006eec:	68db      	ldr	r3, [r3, #12]
90006eee:	2b00      	cmp	r3, #0
90006ef0:	d047      	beq.n	90006f82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006ef2:	4b1d      	ldr	r3, [pc, #116]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006ef4:	681b      	ldr	r3, [r3, #0]
90006ef6:	f023 0219 	bic.w	r2, r3, #25
90006efa:	687b      	ldr	r3, [r7, #4]
90006efc:	68db      	ldr	r3, [r3, #12]
90006efe:	491a      	ldr	r1, [pc, #104]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006f00:	4313      	orrs	r3, r2
90006f02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f04:	f7fc fa44 	bl	90003390 <HAL_GetTick>
90006f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006f0a:	e008      	b.n	90006f1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006f0c:	f7fc fa40 	bl	90003390 <HAL_GetTick>
90006f10:	4602      	mov	r2, r0
90006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f14:	1ad3      	subs	r3, r2, r3
90006f16:	2b02      	cmp	r3, #2
90006f18:	d901      	bls.n	90006f1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006f1a:	2303      	movs	r3, #3
90006f1c:	e332      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006f1e:	4b12      	ldr	r3, [pc, #72]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006f20:	681b      	ldr	r3, [r3, #0]
90006f22:	f003 0304 	and.w	r3, r3, #4
90006f26:	2b00      	cmp	r3, #0
90006f28:	d0f0      	beq.n	90006f0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006f2a:	f7fc fa61 	bl	900033f0 <HAL_GetREVID>
90006f2e:	4603      	mov	r3, r0
90006f30:	f241 0203 	movw	r2, #4099	@ 0x1003
90006f34:	4293      	cmp	r3, r2
90006f36:	d819      	bhi.n	90006f6c <HAL_RCC_OscConfig+0x28c>
90006f38:	687b      	ldr	r3, [r7, #4]
90006f3a:	691b      	ldr	r3, [r3, #16]
90006f3c:	2b40      	cmp	r3, #64	@ 0x40
90006f3e:	d108      	bne.n	90006f52 <HAL_RCC_OscConfig+0x272>
90006f40:	4b09      	ldr	r3, [pc, #36]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006f42:	685b      	ldr	r3, [r3, #4]
90006f44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006f48:	4a07      	ldr	r2, [pc, #28]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006f4e:	6053      	str	r3, [r2, #4]
90006f50:	e030      	b.n	90006fb4 <HAL_RCC_OscConfig+0x2d4>
90006f52:	4b05      	ldr	r3, [pc, #20]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006f54:	685b      	ldr	r3, [r3, #4]
90006f56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006f5a:	687b      	ldr	r3, [r7, #4]
90006f5c:	691b      	ldr	r3, [r3, #16]
90006f5e:	031b      	lsls	r3, r3, #12
90006f60:	4901      	ldr	r1, [pc, #4]	@ (90006f68 <HAL_RCC_OscConfig+0x288>)
90006f62:	4313      	orrs	r3, r2
90006f64:	604b      	str	r3, [r1, #4]
90006f66:	e025      	b.n	90006fb4 <HAL_RCC_OscConfig+0x2d4>
90006f68:	58024400 	.word	0x58024400
90006f6c:	4b9a      	ldr	r3, [pc, #616]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006f6e:	685b      	ldr	r3, [r3, #4]
90006f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006f74:	687b      	ldr	r3, [r7, #4]
90006f76:	691b      	ldr	r3, [r3, #16]
90006f78:	061b      	lsls	r3, r3, #24
90006f7a:	4997      	ldr	r1, [pc, #604]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006f7c:	4313      	orrs	r3, r2
90006f7e:	604b      	str	r3, [r1, #4]
90006f80:	e018      	b.n	90006fb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006f82:	4b95      	ldr	r3, [pc, #596]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006f84:	681b      	ldr	r3, [r3, #0]
90006f86:	4a94      	ldr	r2, [pc, #592]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006f88:	f023 0301 	bic.w	r3, r3, #1
90006f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f8e:	f7fc f9ff 	bl	90003390 <HAL_GetTick>
90006f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006f94:	e008      	b.n	90006fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006f96:	f7fc f9fb 	bl	90003390 <HAL_GetTick>
90006f9a:	4602      	mov	r2, r0
90006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f9e:	1ad3      	subs	r3, r2, r3
90006fa0:	2b02      	cmp	r3, #2
90006fa2:	d901      	bls.n	90006fa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006fa4:	2303      	movs	r3, #3
90006fa6:	e2ed      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006fa8:	4b8b      	ldr	r3, [pc, #556]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006faa:	681b      	ldr	r3, [r3, #0]
90006fac:	f003 0304 	and.w	r3, r3, #4
90006fb0:	2b00      	cmp	r3, #0
90006fb2:	d1f0      	bne.n	90006f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006fb4:	687b      	ldr	r3, [r7, #4]
90006fb6:	681b      	ldr	r3, [r3, #0]
90006fb8:	f003 0310 	and.w	r3, r3, #16
90006fbc:	2b00      	cmp	r3, #0
90006fbe:	f000 80a9 	beq.w	90007114 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006fc2:	4b85      	ldr	r3, [pc, #532]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006fc4:	691b      	ldr	r3, [r3, #16]
90006fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006fca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006fcc:	4b82      	ldr	r3, [pc, #520]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006fd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006fd2:	69bb      	ldr	r3, [r7, #24]
90006fd4:	2b08      	cmp	r3, #8
90006fd6:	d007      	beq.n	90006fe8 <HAL_RCC_OscConfig+0x308>
90006fd8:	69bb      	ldr	r3, [r7, #24]
90006fda:	2b18      	cmp	r3, #24
90006fdc:	d13a      	bne.n	90007054 <HAL_RCC_OscConfig+0x374>
90006fde:	697b      	ldr	r3, [r7, #20]
90006fe0:	f003 0303 	and.w	r3, r3, #3
90006fe4:	2b01      	cmp	r3, #1
90006fe6:	d135      	bne.n	90007054 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006fe8:	4b7b      	ldr	r3, [pc, #492]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90006fea:	681b      	ldr	r3, [r3, #0]
90006fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006ff0:	2b00      	cmp	r3, #0
90006ff2:	d005      	beq.n	90007000 <HAL_RCC_OscConfig+0x320>
90006ff4:	687b      	ldr	r3, [r7, #4]
90006ff6:	69db      	ldr	r3, [r3, #28]
90006ff8:	2b80      	cmp	r3, #128	@ 0x80
90006ffa:	d001      	beq.n	90007000 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006ffc:	2301      	movs	r3, #1
90006ffe:	e2c1      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007000:	f7fc f9f6 	bl	900033f0 <HAL_GetREVID>
90007004:	4603      	mov	r3, r0
90007006:	f241 0203 	movw	r2, #4099	@ 0x1003
9000700a:	4293      	cmp	r3, r2
9000700c:	d817      	bhi.n	9000703e <HAL_RCC_OscConfig+0x35e>
9000700e:	687b      	ldr	r3, [r7, #4]
90007010:	6a1b      	ldr	r3, [r3, #32]
90007012:	2b20      	cmp	r3, #32
90007014:	d108      	bne.n	90007028 <HAL_RCC_OscConfig+0x348>
90007016:	4b70      	ldr	r3, [pc, #448]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007018:	685b      	ldr	r3, [r3, #4]
9000701a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000701e:	4a6e      	ldr	r2, [pc, #440]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90007024:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007026:	e075      	b.n	90007114 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007028:	4b6b      	ldr	r3, [pc, #428]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
9000702a:	685b      	ldr	r3, [r3, #4]
9000702c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90007030:	687b      	ldr	r3, [r7, #4]
90007032:	6a1b      	ldr	r3, [r3, #32]
90007034:	069b      	lsls	r3, r3, #26
90007036:	4968      	ldr	r1, [pc, #416]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007038:	4313      	orrs	r3, r2
9000703a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000703c:	e06a      	b.n	90007114 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000703e:	4b66      	ldr	r3, [pc, #408]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007040:	68db      	ldr	r3, [r3, #12]
90007042:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90007046:	687b      	ldr	r3, [r7, #4]
90007048:	6a1b      	ldr	r3, [r3, #32]
9000704a:	061b      	lsls	r3, r3, #24
9000704c:	4962      	ldr	r1, [pc, #392]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
9000704e:	4313      	orrs	r3, r2
90007050:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007052:	e05f      	b.n	90007114 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90007054:	687b      	ldr	r3, [r7, #4]
90007056:	69db      	ldr	r3, [r3, #28]
90007058:	2b00      	cmp	r3, #0
9000705a:	d042      	beq.n	900070e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
9000705c:	4b5e      	ldr	r3, [pc, #376]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
9000705e:	681b      	ldr	r3, [r3, #0]
90007060:	4a5d      	ldr	r2, [pc, #372]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90007066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007068:	f7fc f992 	bl	90003390 <HAL_GetTick>
9000706c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000706e:	e008      	b.n	90007082 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90007070:	f7fc f98e 	bl	90003390 <HAL_GetTick>
90007074:	4602      	mov	r2, r0
90007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007078:	1ad3      	subs	r3, r2, r3
9000707a:	2b02      	cmp	r3, #2
9000707c:	d901      	bls.n	90007082 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
9000707e:	2303      	movs	r3, #3
90007080:	e280      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007082:	4b55      	ldr	r3, [pc, #340]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007084:	681b      	ldr	r3, [r3, #0]
90007086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000708a:	2b00      	cmp	r3, #0
9000708c:	d0f0      	beq.n	90007070 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000708e:	f7fc f9af 	bl	900033f0 <HAL_GetREVID>
90007092:	4603      	mov	r3, r0
90007094:	f241 0203 	movw	r2, #4099	@ 0x1003
90007098:	4293      	cmp	r3, r2
9000709a:	d817      	bhi.n	900070cc <HAL_RCC_OscConfig+0x3ec>
9000709c:	687b      	ldr	r3, [r7, #4]
9000709e:	6a1b      	ldr	r3, [r3, #32]
900070a0:	2b20      	cmp	r3, #32
900070a2:	d108      	bne.n	900070b6 <HAL_RCC_OscConfig+0x3d6>
900070a4:	4b4c      	ldr	r3, [pc, #304]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070a6:	685b      	ldr	r3, [r3, #4]
900070a8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
900070ac:	4a4a      	ldr	r2, [pc, #296]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
900070b2:	6053      	str	r3, [r2, #4]
900070b4:	e02e      	b.n	90007114 <HAL_RCC_OscConfig+0x434>
900070b6:	4b48      	ldr	r3, [pc, #288]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070b8:	685b      	ldr	r3, [r3, #4]
900070ba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
900070be:	687b      	ldr	r3, [r7, #4]
900070c0:	6a1b      	ldr	r3, [r3, #32]
900070c2:	069b      	lsls	r3, r3, #26
900070c4:	4944      	ldr	r1, [pc, #272]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070c6:	4313      	orrs	r3, r2
900070c8:	604b      	str	r3, [r1, #4]
900070ca:	e023      	b.n	90007114 <HAL_RCC_OscConfig+0x434>
900070cc:	4b42      	ldr	r3, [pc, #264]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070ce:	68db      	ldr	r3, [r3, #12]
900070d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
900070d4:	687b      	ldr	r3, [r7, #4]
900070d6:	6a1b      	ldr	r3, [r3, #32]
900070d8:	061b      	lsls	r3, r3, #24
900070da:	493f      	ldr	r1, [pc, #252]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070dc:	4313      	orrs	r3, r2
900070de:	60cb      	str	r3, [r1, #12]
900070e0:	e018      	b.n	90007114 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
900070e2:	4b3d      	ldr	r3, [pc, #244]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070e4:	681b      	ldr	r3, [r3, #0]
900070e6:	4a3c      	ldr	r2, [pc, #240]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900070e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
900070ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900070ee:	f7fc f94f 	bl	90003390 <HAL_GetTick>
900070f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900070f4:	e008      	b.n	90007108 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
900070f6:	f7fc f94b 	bl	90003390 <HAL_GetTick>
900070fa:	4602      	mov	r2, r0
900070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070fe:	1ad3      	subs	r3, r2, r3
90007100:	2b02      	cmp	r3, #2
90007102:	d901      	bls.n	90007108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90007104:	2303      	movs	r3, #3
90007106:	e23d      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007108:	4b33      	ldr	r3, [pc, #204]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
9000710a:	681b      	ldr	r3, [r3, #0]
9000710c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007110:	2b00      	cmp	r3, #0
90007112:	d1f0      	bne.n	900070f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90007114:	687b      	ldr	r3, [r7, #4]
90007116:	681b      	ldr	r3, [r3, #0]
90007118:	f003 0308 	and.w	r3, r3, #8
9000711c:	2b00      	cmp	r3, #0
9000711e:	d036      	beq.n	9000718e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90007120:	687b      	ldr	r3, [r7, #4]
90007122:	695b      	ldr	r3, [r3, #20]
90007124:	2b00      	cmp	r3, #0
90007126:	d019      	beq.n	9000715c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90007128:	4b2b      	ldr	r3, [pc, #172]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
9000712a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
9000712c:	4a2a      	ldr	r2, [pc, #168]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
9000712e:	f043 0301 	orr.w	r3, r3, #1
90007132:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007134:	f7fc f92c 	bl	90003390 <HAL_GetTick>
90007138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000713a:	e008      	b.n	9000714e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000713c:	f7fc f928 	bl	90003390 <HAL_GetTick>
90007140:	4602      	mov	r2, r0
90007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007144:	1ad3      	subs	r3, r2, r3
90007146:	2b02      	cmp	r3, #2
90007148:	d901      	bls.n	9000714e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
9000714a:	2303      	movs	r3, #3
9000714c:	e21a      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000714e:	4b22      	ldr	r3, [pc, #136]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007152:	f003 0302 	and.w	r3, r3, #2
90007156:	2b00      	cmp	r3, #0
90007158:	d0f0      	beq.n	9000713c <HAL_RCC_OscConfig+0x45c>
9000715a:	e018      	b.n	9000718e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
9000715c:	4b1e      	ldr	r3, [pc, #120]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
9000715e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007160:	4a1d      	ldr	r2, [pc, #116]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007162:	f023 0301 	bic.w	r3, r3, #1
90007166:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007168:	f7fc f912 	bl	90003390 <HAL_GetTick>
9000716c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000716e:	e008      	b.n	90007182 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007170:	f7fc f90e 	bl	90003390 <HAL_GetTick>
90007174:	4602      	mov	r2, r0
90007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007178:	1ad3      	subs	r3, r2, r3
9000717a:	2b02      	cmp	r3, #2
9000717c:	d901      	bls.n	90007182 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
9000717e:	2303      	movs	r3, #3
90007180:	e200      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90007182:	4b15      	ldr	r3, [pc, #84]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
90007184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007186:	f003 0302 	and.w	r3, r3, #2
9000718a:	2b00      	cmp	r3, #0
9000718c:	d1f0      	bne.n	90007170 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000718e:	687b      	ldr	r3, [r7, #4]
90007190:	681b      	ldr	r3, [r3, #0]
90007192:	f003 0320 	and.w	r3, r3, #32
90007196:	2b00      	cmp	r3, #0
90007198:	d039      	beq.n	9000720e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000719a:	687b      	ldr	r3, [r7, #4]
9000719c:	699b      	ldr	r3, [r3, #24]
9000719e:	2b00      	cmp	r3, #0
900071a0:	d01c      	beq.n	900071dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
900071a2:	4b0d      	ldr	r3, [pc, #52]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900071a4:	681b      	ldr	r3, [r3, #0]
900071a6:	4a0c      	ldr	r2, [pc, #48]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900071a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
900071ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900071ae:	f7fc f8ef 	bl	90003390 <HAL_GetTick>
900071b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
900071b4:	e008      	b.n	900071c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
900071b6:	f7fc f8eb 	bl	90003390 <HAL_GetTick>
900071ba:	4602      	mov	r2, r0
900071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071be:	1ad3      	subs	r3, r2, r3
900071c0:	2b02      	cmp	r3, #2
900071c2:	d901      	bls.n	900071c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
900071c4:	2303      	movs	r3, #3
900071c6:	e1dd      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
900071c8:	4b03      	ldr	r3, [pc, #12]	@ (900071d8 <HAL_RCC_OscConfig+0x4f8>)
900071ca:	681b      	ldr	r3, [r3, #0]
900071cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900071d0:	2b00      	cmp	r3, #0
900071d2:	d0f0      	beq.n	900071b6 <HAL_RCC_OscConfig+0x4d6>
900071d4:	e01b      	b.n	9000720e <HAL_RCC_OscConfig+0x52e>
900071d6:	bf00      	nop
900071d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
900071dc:	4b9b      	ldr	r3, [pc, #620]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900071de:	681b      	ldr	r3, [r3, #0]
900071e0:	4a9a      	ldr	r2, [pc, #616]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900071e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
900071e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900071e8:	f7fc f8d2 	bl	90003390 <HAL_GetTick>
900071ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900071ee:	e008      	b.n	90007202 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
900071f0:	f7fc f8ce 	bl	90003390 <HAL_GetTick>
900071f4:	4602      	mov	r2, r0
900071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071f8:	1ad3      	subs	r3, r2, r3
900071fa:	2b02      	cmp	r3, #2
900071fc:	d901      	bls.n	90007202 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
900071fe:	2303      	movs	r3, #3
90007200:	e1c0      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007202:	4b92      	ldr	r3, [pc, #584]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007204:	681b      	ldr	r3, [r3, #0]
90007206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000720a:	2b00      	cmp	r3, #0
9000720c:	d1f0      	bne.n	900071f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000720e:	687b      	ldr	r3, [r7, #4]
90007210:	681b      	ldr	r3, [r3, #0]
90007212:	f003 0304 	and.w	r3, r3, #4
90007216:	2b00      	cmp	r3, #0
90007218:	f000 8081 	beq.w	9000731e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
9000721c:	4b8c      	ldr	r3, [pc, #560]	@ (90007450 <HAL_RCC_OscConfig+0x770>)
9000721e:	681b      	ldr	r3, [r3, #0]
90007220:	4a8b      	ldr	r2, [pc, #556]	@ (90007450 <HAL_RCC_OscConfig+0x770>)
90007222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90007226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90007228:	f7fc f8b2 	bl	90003390 <HAL_GetTick>
9000722c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000722e:	e008      	b.n	90007242 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007230:	f7fc f8ae 	bl	90003390 <HAL_GetTick>
90007234:	4602      	mov	r2, r0
90007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007238:	1ad3      	subs	r3, r2, r3
9000723a:	2b64      	cmp	r3, #100	@ 0x64
9000723c:	d901      	bls.n	90007242 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
9000723e:	2303      	movs	r3, #3
90007240:	e1a0      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007242:	4b83      	ldr	r3, [pc, #524]	@ (90007450 <HAL_RCC_OscConfig+0x770>)
90007244:	681b      	ldr	r3, [r3, #0]
90007246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000724a:	2b00      	cmp	r3, #0
9000724c:	d0f0      	beq.n	90007230 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000724e:	687b      	ldr	r3, [r7, #4]
90007250:	689b      	ldr	r3, [r3, #8]
90007252:	2b01      	cmp	r3, #1
90007254:	d106      	bne.n	90007264 <HAL_RCC_OscConfig+0x584>
90007256:	4b7d      	ldr	r3, [pc, #500]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000725a:	4a7c      	ldr	r2, [pc, #496]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000725c:	f043 0301 	orr.w	r3, r3, #1
90007260:	6713      	str	r3, [r2, #112]	@ 0x70
90007262:	e02d      	b.n	900072c0 <HAL_RCC_OscConfig+0x5e0>
90007264:	687b      	ldr	r3, [r7, #4]
90007266:	689b      	ldr	r3, [r3, #8]
90007268:	2b00      	cmp	r3, #0
9000726a:	d10c      	bne.n	90007286 <HAL_RCC_OscConfig+0x5a6>
9000726c:	4b77      	ldr	r3, [pc, #476]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000726e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007270:	4a76      	ldr	r2, [pc, #472]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007272:	f023 0301 	bic.w	r3, r3, #1
90007276:	6713      	str	r3, [r2, #112]	@ 0x70
90007278:	4b74      	ldr	r3, [pc, #464]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000727a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000727c:	4a73      	ldr	r2, [pc, #460]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000727e:	f023 0304 	bic.w	r3, r3, #4
90007282:	6713      	str	r3, [r2, #112]	@ 0x70
90007284:	e01c      	b.n	900072c0 <HAL_RCC_OscConfig+0x5e0>
90007286:	687b      	ldr	r3, [r7, #4]
90007288:	689b      	ldr	r3, [r3, #8]
9000728a:	2b05      	cmp	r3, #5
9000728c:	d10c      	bne.n	900072a8 <HAL_RCC_OscConfig+0x5c8>
9000728e:	4b6f      	ldr	r3, [pc, #444]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007292:	4a6e      	ldr	r2, [pc, #440]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007294:	f043 0304 	orr.w	r3, r3, #4
90007298:	6713      	str	r3, [r2, #112]	@ 0x70
9000729a:	4b6c      	ldr	r3, [pc, #432]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000729c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000729e:	4a6b      	ldr	r2, [pc, #428]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900072a0:	f043 0301 	orr.w	r3, r3, #1
900072a4:	6713      	str	r3, [r2, #112]	@ 0x70
900072a6:	e00b      	b.n	900072c0 <HAL_RCC_OscConfig+0x5e0>
900072a8:	4b68      	ldr	r3, [pc, #416]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900072aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900072ac:	4a67      	ldr	r2, [pc, #412]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900072ae:	f023 0301 	bic.w	r3, r3, #1
900072b2:	6713      	str	r3, [r2, #112]	@ 0x70
900072b4:	4b65      	ldr	r3, [pc, #404]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900072b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900072b8:	4a64      	ldr	r2, [pc, #400]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900072ba:	f023 0304 	bic.w	r3, r3, #4
900072be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
900072c0:	687b      	ldr	r3, [r7, #4]
900072c2:	689b      	ldr	r3, [r3, #8]
900072c4:	2b00      	cmp	r3, #0
900072c6:	d015      	beq.n	900072f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900072c8:	f7fc f862 	bl	90003390 <HAL_GetTick>
900072cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900072ce:	e00a      	b.n	900072e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900072d0:	f7fc f85e 	bl	90003390 <HAL_GetTick>
900072d4:	4602      	mov	r2, r0
900072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072d8:	1ad3      	subs	r3, r2, r3
900072da:	f241 3288 	movw	r2, #5000	@ 0x1388
900072de:	4293      	cmp	r3, r2
900072e0:	d901      	bls.n	900072e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
900072e2:	2303      	movs	r3, #3
900072e4:	e14e      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900072e6:	4b59      	ldr	r3, [pc, #356]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900072e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900072ea:	f003 0302 	and.w	r3, r3, #2
900072ee:	2b00      	cmp	r3, #0
900072f0:	d0ee      	beq.n	900072d0 <HAL_RCC_OscConfig+0x5f0>
900072f2:	e014      	b.n	9000731e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900072f4:	f7fc f84c 	bl	90003390 <HAL_GetTick>
900072f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900072fa:	e00a      	b.n	90007312 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900072fc:	f7fc f848 	bl	90003390 <HAL_GetTick>
90007300:	4602      	mov	r2, r0
90007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007304:	1ad3      	subs	r3, r2, r3
90007306:	f241 3288 	movw	r2, #5000	@ 0x1388
9000730a:	4293      	cmp	r3, r2
9000730c:	d901      	bls.n	90007312 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
9000730e:	2303      	movs	r3, #3
90007310:	e138      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007312:	4b4e      	ldr	r3, [pc, #312]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007316:	f003 0302 	and.w	r3, r3, #2
9000731a:	2b00      	cmp	r3, #0
9000731c:	d1ee      	bne.n	900072fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000731e:	687b      	ldr	r3, [r7, #4]
90007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007322:	2b00      	cmp	r3, #0
90007324:	f000 812d 	beq.w	90007582 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007328:	4b48      	ldr	r3, [pc, #288]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000732a:	691b      	ldr	r3, [r3, #16]
9000732c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007330:	2b18      	cmp	r3, #24
90007332:	f000 80bd 	beq.w	900074b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90007336:	687b      	ldr	r3, [r7, #4]
90007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000733a:	2b02      	cmp	r3, #2
9000733c:	f040 809e 	bne.w	9000747c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007340:	4b42      	ldr	r3, [pc, #264]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007342:	681b      	ldr	r3, [r3, #0]
90007344:	4a41      	ldr	r2, [pc, #260]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
9000734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000734c:	f7fc f820 	bl	90003390 <HAL_GetTick>
90007350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007352:	e008      	b.n	90007366 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007354:	f7fc f81c 	bl	90003390 <HAL_GetTick>
90007358:	4602      	mov	r2, r0
9000735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000735c:	1ad3      	subs	r3, r2, r3
9000735e:	2b02      	cmp	r3, #2
90007360:	d901      	bls.n	90007366 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90007362:	2303      	movs	r3, #3
90007364:	e10e      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007366:	4b39      	ldr	r3, [pc, #228]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007368:	681b      	ldr	r3, [r3, #0]
9000736a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000736e:	2b00      	cmp	r3, #0
90007370:	d1f0      	bne.n	90007354 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90007372:	4b36      	ldr	r3, [pc, #216]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90007376:	4b37      	ldr	r3, [pc, #220]	@ (90007454 <HAL_RCC_OscConfig+0x774>)
90007378:	4013      	ands	r3, r2
9000737a:	687a      	ldr	r2, [r7, #4]
9000737c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
9000737e:	687a      	ldr	r2, [r7, #4]
90007380:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
90007382:	0112      	lsls	r2, r2, #4
90007384:	430a      	orrs	r2, r1
90007386:	4931      	ldr	r1, [pc, #196]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007388:	4313      	orrs	r3, r2
9000738a:	628b      	str	r3, [r1, #40]	@ 0x28
9000738c:	687b      	ldr	r3, [r7, #4]
9000738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007390:	3b01      	subs	r3, #1
90007392:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007396:	687b      	ldr	r3, [r7, #4]
90007398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000739a:	3b01      	subs	r3, #1
9000739c:	025b      	lsls	r3, r3, #9
9000739e:	b29b      	uxth	r3, r3
900073a0:	431a      	orrs	r2, r3
900073a2:	687b      	ldr	r3, [r7, #4]
900073a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900073a6:	3b01      	subs	r3, #1
900073a8:	041b      	lsls	r3, r3, #16
900073aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900073ae:	431a      	orrs	r2, r3
900073b0:	687b      	ldr	r3, [r7, #4]
900073b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900073b4:	3b01      	subs	r3, #1
900073b6:	061b      	lsls	r3, r3, #24
900073b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900073bc:	4923      	ldr	r1, [pc, #140]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073be:	4313      	orrs	r3, r2
900073c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
900073c2:	4b22      	ldr	r3, [pc, #136]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900073c6:	4a21      	ldr	r2, [pc, #132]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073c8:	f023 0301 	bic.w	r3, r3, #1
900073cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900073ce:	4b1f      	ldr	r3, [pc, #124]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900073d2:	4b21      	ldr	r3, [pc, #132]	@ (90007458 <HAL_RCC_OscConfig+0x778>)
900073d4:	4013      	ands	r3, r2
900073d6:	687a      	ldr	r2, [r7, #4]
900073d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
900073da:	00d2      	lsls	r2, r2, #3
900073dc:	491b      	ldr	r1, [pc, #108]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073de:	4313      	orrs	r3, r2
900073e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
900073e2:	4b1a      	ldr	r3, [pc, #104]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900073e6:	f023 020c 	bic.w	r2, r3, #12
900073ea:	687b      	ldr	r3, [r7, #4]
900073ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900073ee:	4917      	ldr	r1, [pc, #92]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073f0:	4313      	orrs	r3, r2
900073f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
900073f4:	4b15      	ldr	r3, [pc, #84]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
900073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900073f8:	f023 0202 	bic.w	r2, r3, #2
900073fc:	687b      	ldr	r3, [r7, #4]
900073fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90007400:	4912      	ldr	r1, [pc, #72]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007402:	4313      	orrs	r3, r2
90007404:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90007406:	4b11      	ldr	r3, [pc, #68]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000740a:	4a10      	ldr	r2, [pc, #64]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000740c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007412:	4b0e      	ldr	r3, [pc, #56]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007416:	4a0d      	ldr	r2, [pc, #52]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000741c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000741e:	4b0b      	ldr	r3, [pc, #44]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007422:	4a0a      	ldr	r2, [pc, #40]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
9000742a:	4b08      	ldr	r3, [pc, #32]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000742e:	4a07      	ldr	r2, [pc, #28]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007430:	f043 0301 	orr.w	r3, r3, #1
90007434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90007436:	4b05      	ldr	r3, [pc, #20]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
90007438:	681b      	ldr	r3, [r3, #0]
9000743a:	4a04      	ldr	r2, [pc, #16]	@ (9000744c <HAL_RCC_OscConfig+0x76c>)
9000743c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90007440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007442:	f7fb ffa5 	bl	90003390 <HAL_GetTick>
90007446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007448:	e011      	b.n	9000746e <HAL_RCC_OscConfig+0x78e>
9000744a:	bf00      	nop
9000744c:	58024400 	.word	0x58024400
90007450:	58024800 	.word	0x58024800
90007454:	fffffc0c 	.word	0xfffffc0c
90007458:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000745c:	f7fb ff98 	bl	90003390 <HAL_GetTick>
90007460:	4602      	mov	r2, r0
90007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007464:	1ad3      	subs	r3, r2, r3
90007466:	2b02      	cmp	r3, #2
90007468:	d901      	bls.n	9000746e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
9000746a:	2303      	movs	r3, #3
9000746c:	e08a      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000746e:	4b47      	ldr	r3, [pc, #284]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
90007470:	681b      	ldr	r3, [r3, #0]
90007472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007476:	2b00      	cmp	r3, #0
90007478:	d0f0      	beq.n	9000745c <HAL_RCC_OscConfig+0x77c>
9000747a:	e082      	b.n	90007582 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000747c:	4b43      	ldr	r3, [pc, #268]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
9000747e:	681b      	ldr	r3, [r3, #0]
90007480:	4a42      	ldr	r2, [pc, #264]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
90007482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007488:	f7fb ff82 	bl	90003390 <HAL_GetTick>
9000748c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000748e:	e008      	b.n	900074a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007490:	f7fb ff7e 	bl	90003390 <HAL_GetTick>
90007494:	4602      	mov	r2, r0
90007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007498:	1ad3      	subs	r3, r2, r3
9000749a:	2b02      	cmp	r3, #2
9000749c:	d901      	bls.n	900074a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
9000749e:	2303      	movs	r3, #3
900074a0:	e070      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900074a2:	4b3a      	ldr	r3, [pc, #232]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
900074a4:	681b      	ldr	r3, [r3, #0]
900074a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900074aa:	2b00      	cmp	r3, #0
900074ac:	d1f0      	bne.n	90007490 <HAL_RCC_OscConfig+0x7b0>
900074ae:	e068      	b.n	90007582 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
900074b0:	4b36      	ldr	r3, [pc, #216]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
900074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900074b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
900074b6:	4b35      	ldr	r3, [pc, #212]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
900074b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900074ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900074bc:	687b      	ldr	r3, [r7, #4]
900074be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900074c0:	2b01      	cmp	r3, #1
900074c2:	d031      	beq.n	90007528 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900074c4:	693b      	ldr	r3, [r7, #16]
900074c6:	f003 0203 	and.w	r2, r3, #3
900074ca:	687b      	ldr	r3, [r7, #4]
900074cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900074ce:	429a      	cmp	r2, r3
900074d0:	d12a      	bne.n	90007528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900074d2:	693b      	ldr	r3, [r7, #16]
900074d4:	091b      	lsrs	r3, r3, #4
900074d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
900074da:	687b      	ldr	r3, [r7, #4]
900074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900074de:	429a      	cmp	r2, r3
900074e0:	d122      	bne.n	90007528 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900074e2:	68fb      	ldr	r3, [r7, #12]
900074e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
900074e8:	687b      	ldr	r3, [r7, #4]
900074ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900074ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900074ee:	429a      	cmp	r2, r3
900074f0:	d11a      	bne.n	90007528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900074f2:	68fb      	ldr	r3, [r7, #12]
900074f4:	0a5b      	lsrs	r3, r3, #9
900074f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900074fa:	687b      	ldr	r3, [r7, #4]
900074fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900074fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007500:	429a      	cmp	r2, r3
90007502:	d111      	bne.n	90007528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007504:	68fb      	ldr	r3, [r7, #12]
90007506:	0c1b      	lsrs	r3, r3, #16
90007508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000750c:	687b      	ldr	r3, [r7, #4]
9000750e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007510:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007512:	429a      	cmp	r2, r3
90007514:	d108      	bne.n	90007528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90007516:	68fb      	ldr	r3, [r7, #12]
90007518:	0e1b      	lsrs	r3, r3, #24
9000751a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000751e:	687b      	ldr	r3, [r7, #4]
90007520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007522:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007524:	429a      	cmp	r2, r3
90007526:	d001      	beq.n	9000752c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90007528:	2301      	movs	r3, #1
9000752a:	e02b      	b.n	90007584 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000752c:	4b17      	ldr	r3, [pc, #92]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
9000752e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007530:	08db      	lsrs	r3, r3, #3
90007532:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007536:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90007538:	687b      	ldr	r3, [r7, #4]
9000753a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000753c:	693a      	ldr	r2, [r7, #16]
9000753e:	429a      	cmp	r2, r3
90007540:	d01f      	beq.n	90007582 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90007542:	4b12      	ldr	r3, [pc, #72]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
90007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007546:	4a11      	ldr	r2, [pc, #68]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
90007548:	f023 0301 	bic.w	r3, r3, #1
9000754c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
9000754e:	f7fb ff1f 	bl	90003390 <HAL_GetTick>
90007552:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007554:	bf00      	nop
90007556:	f7fb ff1b 	bl	90003390 <HAL_GetTick>
9000755a:	4602      	mov	r2, r0
9000755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000755e:	4293      	cmp	r3, r2
90007560:	d0f9      	beq.n	90007556 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007562:	4b0a      	ldr	r3, [pc, #40]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
90007564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007566:	4b0a      	ldr	r3, [pc, #40]	@ (90007590 <HAL_RCC_OscConfig+0x8b0>)
90007568:	4013      	ands	r3, r2
9000756a:	687a      	ldr	r2, [r7, #4]
9000756c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000756e:	00d2      	lsls	r2, r2, #3
90007570:	4906      	ldr	r1, [pc, #24]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
90007572:	4313      	orrs	r3, r2
90007574:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90007576:	4b05      	ldr	r3, [pc, #20]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
90007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000757a:	4a04      	ldr	r2, [pc, #16]	@ (9000758c <HAL_RCC_OscConfig+0x8ac>)
9000757c:	f043 0301 	orr.w	r3, r3, #1
90007580:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
90007582:	2300      	movs	r3, #0
}
90007584:	4618      	mov	r0, r3
90007586:	3730      	adds	r7, #48	@ 0x30
90007588:	46bd      	mov	sp, r7
9000758a:	bd80      	pop	{r7, pc}
9000758c:	58024400 	.word	0x58024400
90007590:	ffff0007 	.word	0xffff0007

90007594 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90007594:	b580      	push	{r7, lr}
90007596:	b086      	sub	sp, #24
90007598:	af00      	add	r7, sp, #0
9000759a:	6078      	str	r0, [r7, #4]
9000759c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
9000759e:	687b      	ldr	r3, [r7, #4]
900075a0:	2b00      	cmp	r3, #0
900075a2:	d101      	bne.n	900075a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900075a4:	2301      	movs	r3, #1
900075a6:	e19c      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900075a8:	4b8a      	ldr	r3, [pc, #552]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900075aa:	681b      	ldr	r3, [r3, #0]
900075ac:	f003 030f 	and.w	r3, r3, #15
900075b0:	683a      	ldr	r2, [r7, #0]
900075b2:	429a      	cmp	r2, r3
900075b4:	d910      	bls.n	900075d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900075b6:	4b87      	ldr	r3, [pc, #540]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900075b8:	681b      	ldr	r3, [r3, #0]
900075ba:	f023 020f 	bic.w	r2, r3, #15
900075be:	4985      	ldr	r1, [pc, #532]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900075c0:	683b      	ldr	r3, [r7, #0]
900075c2:	4313      	orrs	r3, r2
900075c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900075c6:	4b83      	ldr	r3, [pc, #524]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900075c8:	681b      	ldr	r3, [r3, #0]
900075ca:	f003 030f 	and.w	r3, r3, #15
900075ce:	683a      	ldr	r2, [r7, #0]
900075d0:	429a      	cmp	r2, r3
900075d2:	d001      	beq.n	900075d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
900075d4:	2301      	movs	r3, #1
900075d6:	e184      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
900075d8:	687b      	ldr	r3, [r7, #4]
900075da:	681b      	ldr	r3, [r3, #0]
900075dc:	f003 0304 	and.w	r3, r3, #4
900075e0:	2b00      	cmp	r3, #0
900075e2:	d010      	beq.n	90007606 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
900075e4:	687b      	ldr	r3, [r7, #4]
900075e6:	691a      	ldr	r2, [r3, #16]
900075e8:	4b7b      	ldr	r3, [pc, #492]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900075ea:	699b      	ldr	r3, [r3, #24]
900075ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900075f0:	429a      	cmp	r2, r3
900075f2:	d908      	bls.n	90007606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900075f4:	4b78      	ldr	r3, [pc, #480]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900075f6:	699b      	ldr	r3, [r3, #24]
900075f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900075fc:	687b      	ldr	r3, [r7, #4]
900075fe:	691b      	ldr	r3, [r3, #16]
90007600:	4975      	ldr	r1, [pc, #468]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007602:	4313      	orrs	r3, r2
90007604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007606:	687b      	ldr	r3, [r7, #4]
90007608:	681b      	ldr	r3, [r3, #0]
9000760a:	f003 0308 	and.w	r3, r3, #8
9000760e:	2b00      	cmp	r3, #0
90007610:	d010      	beq.n	90007634 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007612:	687b      	ldr	r3, [r7, #4]
90007614:	695a      	ldr	r2, [r3, #20]
90007616:	4b70      	ldr	r3, [pc, #448]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007618:	69db      	ldr	r3, [r3, #28]
9000761a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000761e:	429a      	cmp	r2, r3
90007620:	d908      	bls.n	90007634 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007622:	4b6d      	ldr	r3, [pc, #436]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007624:	69db      	ldr	r3, [r3, #28]
90007626:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000762a:	687b      	ldr	r3, [r7, #4]
9000762c:	695b      	ldr	r3, [r3, #20]
9000762e:	496a      	ldr	r1, [pc, #424]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007630:	4313      	orrs	r3, r2
90007632:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007634:	687b      	ldr	r3, [r7, #4]
90007636:	681b      	ldr	r3, [r3, #0]
90007638:	f003 0310 	and.w	r3, r3, #16
9000763c:	2b00      	cmp	r3, #0
9000763e:	d010      	beq.n	90007662 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007640:	687b      	ldr	r3, [r7, #4]
90007642:	699a      	ldr	r2, [r3, #24]
90007644:	4b64      	ldr	r3, [pc, #400]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007646:	69db      	ldr	r3, [r3, #28]
90007648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
9000764c:	429a      	cmp	r2, r3
9000764e:	d908      	bls.n	90007662 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007650:	4b61      	ldr	r3, [pc, #388]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007652:	69db      	ldr	r3, [r3, #28]
90007654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007658:	687b      	ldr	r3, [r7, #4]
9000765a:	699b      	ldr	r3, [r3, #24]
9000765c:	495e      	ldr	r1, [pc, #376]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
9000765e:	4313      	orrs	r3, r2
90007660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007662:	687b      	ldr	r3, [r7, #4]
90007664:	681b      	ldr	r3, [r3, #0]
90007666:	f003 0320 	and.w	r3, r3, #32
9000766a:	2b00      	cmp	r3, #0
9000766c:	d010      	beq.n	90007690 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000766e:	687b      	ldr	r3, [r7, #4]
90007670:	69da      	ldr	r2, [r3, #28]
90007672:	4b59      	ldr	r3, [pc, #356]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007674:	6a1b      	ldr	r3, [r3, #32]
90007676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000767a:	429a      	cmp	r2, r3
9000767c:	d908      	bls.n	90007690 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000767e:	4b56      	ldr	r3, [pc, #344]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007680:	6a1b      	ldr	r3, [r3, #32]
90007682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007686:	687b      	ldr	r3, [r7, #4]
90007688:	69db      	ldr	r3, [r3, #28]
9000768a:	4953      	ldr	r1, [pc, #332]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
9000768c:	4313      	orrs	r3, r2
9000768e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007690:	687b      	ldr	r3, [r7, #4]
90007692:	681b      	ldr	r3, [r3, #0]
90007694:	f003 0302 	and.w	r3, r3, #2
90007698:	2b00      	cmp	r3, #0
9000769a:	d010      	beq.n	900076be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000769c:	687b      	ldr	r3, [r7, #4]
9000769e:	68da      	ldr	r2, [r3, #12]
900076a0:	4b4d      	ldr	r3, [pc, #308]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900076a2:	699b      	ldr	r3, [r3, #24]
900076a4:	f003 030f 	and.w	r3, r3, #15
900076a8:	429a      	cmp	r2, r3
900076aa:	d908      	bls.n	900076be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900076ac:	4b4a      	ldr	r3, [pc, #296]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900076ae:	699b      	ldr	r3, [r3, #24]
900076b0:	f023 020f 	bic.w	r2, r3, #15
900076b4:	687b      	ldr	r3, [r7, #4]
900076b6:	68db      	ldr	r3, [r3, #12]
900076b8:	4947      	ldr	r1, [pc, #284]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900076ba:	4313      	orrs	r3, r2
900076bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900076be:	687b      	ldr	r3, [r7, #4]
900076c0:	681b      	ldr	r3, [r3, #0]
900076c2:	f003 0301 	and.w	r3, r3, #1
900076c6:	2b00      	cmp	r3, #0
900076c8:	d055      	beq.n	90007776 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
900076ca:	4b43      	ldr	r3, [pc, #268]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900076cc:	699b      	ldr	r3, [r3, #24]
900076ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
900076d2:	687b      	ldr	r3, [r7, #4]
900076d4:	689b      	ldr	r3, [r3, #8]
900076d6:	4940      	ldr	r1, [pc, #256]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900076d8:	4313      	orrs	r3, r2
900076da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
900076dc:	687b      	ldr	r3, [r7, #4]
900076de:	685b      	ldr	r3, [r3, #4]
900076e0:	2b02      	cmp	r3, #2
900076e2:	d107      	bne.n	900076f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900076e4:	4b3c      	ldr	r3, [pc, #240]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900076e6:	681b      	ldr	r3, [r3, #0]
900076e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900076ec:	2b00      	cmp	r3, #0
900076ee:	d121      	bne.n	90007734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900076f0:	2301      	movs	r3, #1
900076f2:	e0f6      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
900076f4:	687b      	ldr	r3, [r7, #4]
900076f6:	685b      	ldr	r3, [r3, #4]
900076f8:	2b03      	cmp	r3, #3
900076fa:	d107      	bne.n	9000770c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900076fc:	4b36      	ldr	r3, [pc, #216]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900076fe:	681b      	ldr	r3, [r3, #0]
90007700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007704:	2b00      	cmp	r3, #0
90007706:	d115      	bne.n	90007734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007708:	2301      	movs	r3, #1
9000770a:	e0ea      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000770c:	687b      	ldr	r3, [r7, #4]
9000770e:	685b      	ldr	r3, [r3, #4]
90007710:	2b01      	cmp	r3, #1
90007712:	d107      	bne.n	90007724 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007714:	4b30      	ldr	r3, [pc, #192]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007716:	681b      	ldr	r3, [r3, #0]
90007718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000771c:	2b00      	cmp	r3, #0
9000771e:	d109      	bne.n	90007734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007720:	2301      	movs	r3, #1
90007722:	e0de      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007724:	4b2c      	ldr	r3, [pc, #176]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007726:	681b      	ldr	r3, [r3, #0]
90007728:	f003 0304 	and.w	r3, r3, #4
9000772c:	2b00      	cmp	r3, #0
9000772e:	d101      	bne.n	90007734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007730:	2301      	movs	r3, #1
90007732:	e0d6      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007734:	4b28      	ldr	r3, [pc, #160]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007736:	691b      	ldr	r3, [r3, #16]
90007738:	f023 0207 	bic.w	r2, r3, #7
9000773c:	687b      	ldr	r3, [r7, #4]
9000773e:	685b      	ldr	r3, [r3, #4]
90007740:	4925      	ldr	r1, [pc, #148]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007742:	4313      	orrs	r3, r2
90007744:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007746:	f7fb fe23 	bl	90003390 <HAL_GetTick>
9000774a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000774c:	e00a      	b.n	90007764 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000774e:	f7fb fe1f 	bl	90003390 <HAL_GetTick>
90007752:	4602      	mov	r2, r0
90007754:	697b      	ldr	r3, [r7, #20]
90007756:	1ad3      	subs	r3, r2, r3
90007758:	f241 3288 	movw	r2, #5000	@ 0x1388
9000775c:	4293      	cmp	r3, r2
9000775e:	d901      	bls.n	90007764 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90007760:	2303      	movs	r3, #3
90007762:	e0be      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007764:	4b1c      	ldr	r3, [pc, #112]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007766:	691b      	ldr	r3, [r3, #16]
90007768:	f003 0238 	and.w	r2, r3, #56	@ 0x38
9000776c:	687b      	ldr	r3, [r7, #4]
9000776e:	685b      	ldr	r3, [r3, #4]
90007770:	00db      	lsls	r3, r3, #3
90007772:	429a      	cmp	r2, r3
90007774:	d1eb      	bne.n	9000774e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007776:	687b      	ldr	r3, [r7, #4]
90007778:	681b      	ldr	r3, [r3, #0]
9000777a:	f003 0302 	and.w	r3, r3, #2
9000777e:	2b00      	cmp	r3, #0
90007780:	d010      	beq.n	900077a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007782:	687b      	ldr	r3, [r7, #4]
90007784:	68da      	ldr	r2, [r3, #12]
90007786:	4b14      	ldr	r3, [pc, #80]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007788:	699b      	ldr	r3, [r3, #24]
9000778a:	f003 030f 	and.w	r3, r3, #15
9000778e:	429a      	cmp	r2, r3
90007790:	d208      	bcs.n	900077a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007792:	4b11      	ldr	r3, [pc, #68]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
90007794:	699b      	ldr	r3, [r3, #24]
90007796:	f023 020f 	bic.w	r2, r3, #15
9000779a:	687b      	ldr	r3, [r7, #4]
9000779c:	68db      	ldr	r3, [r3, #12]
9000779e:	490e      	ldr	r1, [pc, #56]	@ (900077d8 <HAL_RCC_ClockConfig+0x244>)
900077a0:	4313      	orrs	r3, r2
900077a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900077a4:	4b0b      	ldr	r3, [pc, #44]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900077a6:	681b      	ldr	r3, [r3, #0]
900077a8:	f003 030f 	and.w	r3, r3, #15
900077ac:	683a      	ldr	r2, [r7, #0]
900077ae:	429a      	cmp	r2, r3
900077b0:	d214      	bcs.n	900077dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900077b2:	4b08      	ldr	r3, [pc, #32]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900077b4:	681b      	ldr	r3, [r3, #0]
900077b6:	f023 020f 	bic.w	r2, r3, #15
900077ba:	4906      	ldr	r1, [pc, #24]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900077bc:	683b      	ldr	r3, [r7, #0]
900077be:	4313      	orrs	r3, r2
900077c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900077c2:	4b04      	ldr	r3, [pc, #16]	@ (900077d4 <HAL_RCC_ClockConfig+0x240>)
900077c4:	681b      	ldr	r3, [r3, #0]
900077c6:	f003 030f 	and.w	r3, r3, #15
900077ca:	683a      	ldr	r2, [r7, #0]
900077cc:	429a      	cmp	r2, r3
900077ce:	d005      	beq.n	900077dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
900077d0:	2301      	movs	r3, #1
900077d2:	e086      	b.n	900078e2 <HAL_RCC_ClockConfig+0x34e>
900077d4:	52002000 	.word	0x52002000
900077d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
900077dc:	687b      	ldr	r3, [r7, #4]
900077de:	681b      	ldr	r3, [r3, #0]
900077e0:	f003 0304 	and.w	r3, r3, #4
900077e4:	2b00      	cmp	r3, #0
900077e6:	d010      	beq.n	9000780a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
900077e8:	687b      	ldr	r3, [r7, #4]
900077ea:	691a      	ldr	r2, [r3, #16]
900077ec:	4b3f      	ldr	r3, [pc, #252]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
900077ee:	699b      	ldr	r3, [r3, #24]
900077f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900077f4:	429a      	cmp	r2, r3
900077f6:	d208      	bcs.n	9000780a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900077f8:	4b3c      	ldr	r3, [pc, #240]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
900077fa:	699b      	ldr	r3, [r3, #24]
900077fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007800:	687b      	ldr	r3, [r7, #4]
90007802:	691b      	ldr	r3, [r3, #16]
90007804:	4939      	ldr	r1, [pc, #228]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007806:	4313      	orrs	r3, r2
90007808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000780a:	687b      	ldr	r3, [r7, #4]
9000780c:	681b      	ldr	r3, [r3, #0]
9000780e:	f003 0308 	and.w	r3, r3, #8
90007812:	2b00      	cmp	r3, #0
90007814:	d010      	beq.n	90007838 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007816:	687b      	ldr	r3, [r7, #4]
90007818:	695a      	ldr	r2, [r3, #20]
9000781a:	4b34      	ldr	r3, [pc, #208]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
9000781c:	69db      	ldr	r3, [r3, #28]
9000781e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007822:	429a      	cmp	r2, r3
90007824:	d208      	bcs.n	90007838 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007826:	4b31      	ldr	r3, [pc, #196]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007828:	69db      	ldr	r3, [r3, #28]
9000782a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000782e:	687b      	ldr	r3, [r7, #4]
90007830:	695b      	ldr	r3, [r3, #20]
90007832:	492e      	ldr	r1, [pc, #184]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007834:	4313      	orrs	r3, r2
90007836:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007838:	687b      	ldr	r3, [r7, #4]
9000783a:	681b      	ldr	r3, [r3, #0]
9000783c:	f003 0310 	and.w	r3, r3, #16
90007840:	2b00      	cmp	r3, #0
90007842:	d010      	beq.n	90007866 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007844:	687b      	ldr	r3, [r7, #4]
90007846:	699a      	ldr	r2, [r3, #24]
90007848:	4b28      	ldr	r3, [pc, #160]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
9000784a:	69db      	ldr	r3, [r3, #28]
9000784c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007850:	429a      	cmp	r2, r3
90007852:	d208      	bcs.n	90007866 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007854:	4b25      	ldr	r3, [pc, #148]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007856:	69db      	ldr	r3, [r3, #28]
90007858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
9000785c:	687b      	ldr	r3, [r7, #4]
9000785e:	699b      	ldr	r3, [r3, #24]
90007860:	4922      	ldr	r1, [pc, #136]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007862:	4313      	orrs	r3, r2
90007864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007866:	687b      	ldr	r3, [r7, #4]
90007868:	681b      	ldr	r3, [r3, #0]
9000786a:	f003 0320 	and.w	r3, r3, #32
9000786e:	2b00      	cmp	r3, #0
90007870:	d010      	beq.n	90007894 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90007872:	687b      	ldr	r3, [r7, #4]
90007874:	69da      	ldr	r2, [r3, #28]
90007876:	4b1d      	ldr	r3, [pc, #116]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007878:	6a1b      	ldr	r3, [r3, #32]
9000787a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000787e:	429a      	cmp	r2, r3
90007880:	d208      	bcs.n	90007894 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90007882:	4b1a      	ldr	r3, [pc, #104]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007884:	6a1b      	ldr	r3, [r3, #32]
90007886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000788a:	687b      	ldr	r3, [r7, #4]
9000788c:	69db      	ldr	r3, [r3, #28]
9000788e:	4917      	ldr	r1, [pc, #92]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
90007890:	4313      	orrs	r3, r2
90007892:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007894:	f000 f834 	bl	90007900 <HAL_RCC_GetSysClockFreq>
90007898:	4602      	mov	r2, r0
9000789a:	4b14      	ldr	r3, [pc, #80]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
9000789c:	699b      	ldr	r3, [r3, #24]
9000789e:	0a1b      	lsrs	r3, r3, #8
900078a0:	f003 030f 	and.w	r3, r3, #15
900078a4:	4912      	ldr	r1, [pc, #72]	@ (900078f0 <HAL_RCC_ClockConfig+0x35c>)
900078a6:	5ccb      	ldrb	r3, [r1, r3]
900078a8:	f003 031f 	and.w	r3, r3, #31
900078ac:	fa22 f303 	lsr.w	r3, r2, r3
900078b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900078b2:	4b0e      	ldr	r3, [pc, #56]	@ (900078ec <HAL_RCC_ClockConfig+0x358>)
900078b4:	699b      	ldr	r3, [r3, #24]
900078b6:	f003 030f 	and.w	r3, r3, #15
900078ba:	4a0d      	ldr	r2, [pc, #52]	@ (900078f0 <HAL_RCC_ClockConfig+0x35c>)
900078bc:	5cd3      	ldrb	r3, [r2, r3]
900078be:	f003 031f 	and.w	r3, r3, #31
900078c2:	693a      	ldr	r2, [r7, #16]
900078c4:	fa22 f303 	lsr.w	r3, r2, r3
900078c8:	4a0a      	ldr	r2, [pc, #40]	@ (900078f4 <HAL_RCC_ClockConfig+0x360>)
900078ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900078cc:	4a0a      	ldr	r2, [pc, #40]	@ (900078f8 <HAL_RCC_ClockConfig+0x364>)
900078ce:	693b      	ldr	r3, [r7, #16]
900078d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
900078d2:	4b0a      	ldr	r3, [pc, #40]	@ (900078fc <HAL_RCC_ClockConfig+0x368>)
900078d4:	681b      	ldr	r3, [r3, #0]
900078d6:	4618      	mov	r0, r3
900078d8:	f7fb fd10 	bl	900032fc <HAL_InitTick>
900078dc:	4603      	mov	r3, r0
900078de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
900078e0:	7bfb      	ldrb	r3, [r7, #15]
}
900078e2:	4618      	mov	r0, r3
900078e4:	3718      	adds	r7, #24
900078e6:	46bd      	mov	sp, r7
900078e8:	bd80      	pop	{r7, pc}
900078ea:	bf00      	nop
900078ec:	58024400 	.word	0x58024400
900078f0:	9000d884 	.word	0x9000d884
900078f4:	20000004 	.word	0x20000004
900078f8:	20000000 	.word	0x20000000
900078fc:	20000008 	.word	0x20000008

90007900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007900:	b480      	push	{r7}
90007902:	b089      	sub	sp, #36	@ 0x24
90007904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90007906:	4bb3      	ldr	r3, [pc, #716]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007908:	691b      	ldr	r3, [r3, #16]
9000790a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000790e:	2b18      	cmp	r3, #24
90007910:	f200 8155 	bhi.w	90007bbe <HAL_RCC_GetSysClockFreq+0x2be>
90007914:	a201      	add	r2, pc, #4	@ (adr r2, 9000791c <HAL_RCC_GetSysClockFreq+0x1c>)
90007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000791a:	bf00      	nop
9000791c:	90007981 	.word	0x90007981
90007920:	90007bbf 	.word	0x90007bbf
90007924:	90007bbf 	.word	0x90007bbf
90007928:	90007bbf 	.word	0x90007bbf
9000792c:	90007bbf 	.word	0x90007bbf
90007930:	90007bbf 	.word	0x90007bbf
90007934:	90007bbf 	.word	0x90007bbf
90007938:	90007bbf 	.word	0x90007bbf
9000793c:	900079a7 	.word	0x900079a7
90007940:	90007bbf 	.word	0x90007bbf
90007944:	90007bbf 	.word	0x90007bbf
90007948:	90007bbf 	.word	0x90007bbf
9000794c:	90007bbf 	.word	0x90007bbf
90007950:	90007bbf 	.word	0x90007bbf
90007954:	90007bbf 	.word	0x90007bbf
90007958:	90007bbf 	.word	0x90007bbf
9000795c:	900079ad 	.word	0x900079ad
90007960:	90007bbf 	.word	0x90007bbf
90007964:	90007bbf 	.word	0x90007bbf
90007968:	90007bbf 	.word	0x90007bbf
9000796c:	90007bbf 	.word	0x90007bbf
90007970:	90007bbf 	.word	0x90007bbf
90007974:	90007bbf 	.word	0x90007bbf
90007978:	90007bbf 	.word	0x90007bbf
9000797c:	900079b3 	.word	0x900079b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007980:	4b94      	ldr	r3, [pc, #592]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007982:	681b      	ldr	r3, [r3, #0]
90007984:	f003 0320 	and.w	r3, r3, #32
90007988:	2b00      	cmp	r3, #0
9000798a:	d009      	beq.n	900079a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000798c:	4b91      	ldr	r3, [pc, #580]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000798e:	681b      	ldr	r3, [r3, #0]
90007990:	08db      	lsrs	r3, r3, #3
90007992:	f003 0303 	and.w	r3, r3, #3
90007996:	4a90      	ldr	r2, [pc, #576]	@ (90007bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007998:	fa22 f303 	lsr.w	r3, r2, r3
9000799c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
9000799e:	e111      	b.n	90007bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900079a0:	4b8d      	ldr	r3, [pc, #564]	@ (90007bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
900079a2:	61bb      	str	r3, [r7, #24]
      break;
900079a4:	e10e      	b.n	90007bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900079a6:	4b8d      	ldr	r3, [pc, #564]	@ (90007bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
900079a8:	61bb      	str	r3, [r7, #24]
      break;
900079aa:	e10b      	b.n	90007bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
900079ac:	4b8c      	ldr	r3, [pc, #560]	@ (90007be0 <HAL_RCC_GetSysClockFreq+0x2e0>)
900079ae:	61bb      	str	r3, [r7, #24]
      break;
900079b0:	e108      	b.n	90007bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900079b2:	4b88      	ldr	r3, [pc, #544]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900079b6:	f003 0303 	and.w	r3, r3, #3
900079ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
900079bc:	4b85      	ldr	r3, [pc, #532]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900079c0:	091b      	lsrs	r3, r3, #4
900079c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900079c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
900079c8:	4b82      	ldr	r3, [pc, #520]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900079cc:	f003 0301 	and.w	r3, r3, #1
900079d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
900079d2:	4b80      	ldr	r3, [pc, #512]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900079d6:	08db      	lsrs	r3, r3, #3
900079d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
900079dc:	68fa      	ldr	r2, [r7, #12]
900079de:	fb02 f303 	mul.w	r3, r2, r3
900079e2:	ee07 3a90 	vmov	s15, r3
900079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
900079ee:	693b      	ldr	r3, [r7, #16]
900079f0:	2b00      	cmp	r3, #0
900079f2:	f000 80e1 	beq.w	90007bb8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
900079f6:	697b      	ldr	r3, [r7, #20]
900079f8:	2b02      	cmp	r3, #2
900079fa:	f000 8083 	beq.w	90007b04 <HAL_RCC_GetSysClockFreq+0x204>
900079fe:	697b      	ldr	r3, [r7, #20]
90007a00:	2b02      	cmp	r3, #2
90007a02:	f200 80a1 	bhi.w	90007b48 <HAL_RCC_GetSysClockFreq+0x248>
90007a06:	697b      	ldr	r3, [r7, #20]
90007a08:	2b00      	cmp	r3, #0
90007a0a:	d003      	beq.n	90007a14 <HAL_RCC_GetSysClockFreq+0x114>
90007a0c:	697b      	ldr	r3, [r7, #20]
90007a0e:	2b01      	cmp	r3, #1
90007a10:	d056      	beq.n	90007ac0 <HAL_RCC_GetSysClockFreq+0x1c0>
90007a12:	e099      	b.n	90007b48 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007a14:	4b6f      	ldr	r3, [pc, #444]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a16:	681b      	ldr	r3, [r3, #0]
90007a18:	f003 0320 	and.w	r3, r3, #32
90007a1c:	2b00      	cmp	r3, #0
90007a1e:	d02d      	beq.n	90007a7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007a20:	4b6c      	ldr	r3, [pc, #432]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a22:	681b      	ldr	r3, [r3, #0]
90007a24:	08db      	lsrs	r3, r3, #3
90007a26:	f003 0303 	and.w	r3, r3, #3
90007a2a:	4a6b      	ldr	r2, [pc, #428]	@ (90007bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007a2c:	fa22 f303 	lsr.w	r3, r2, r3
90007a30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a32:	687b      	ldr	r3, [r7, #4]
90007a34:	ee07 3a90 	vmov	s15, r3
90007a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a3c:	693b      	ldr	r3, [r7, #16]
90007a3e:	ee07 3a90 	vmov	s15, r3
90007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a4a:	4b62      	ldr	r3, [pc, #392]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a52:	ee07 3a90 	vmov	s15, r3
90007a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a5a:	ed97 6a02 	vldr	s12, [r7, #8]
90007a5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007be4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a72:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90007a7a:	e087      	b.n	90007b8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a7c:	693b      	ldr	r3, [r7, #16]
90007a7e:	ee07 3a90 	vmov	s15, r3
90007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007be8 <HAL_RCC_GetSysClockFreq+0x2e8>
90007a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a8e:	4b51      	ldr	r3, [pc, #324]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a96:	ee07 3a90 	vmov	s15, r3
90007a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a9e:	ed97 6a02 	vldr	s12, [r7, #8]
90007aa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007be4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
90007aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007abe:	e065      	b.n	90007b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007ac0:	693b      	ldr	r3, [r7, #16]
90007ac2:	ee07 3a90 	vmov	s15, r3
90007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007aca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007bec <HAL_RCC_GetSysClockFreq+0x2ec>
90007ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007ad2:	4b40      	ldr	r3, [pc, #256]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007ada:	ee07 3a90 	vmov	s15, r3
90007ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007ae2:	ed97 6a02 	vldr	s12, [r7, #8]
90007ae6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007be4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007afa:	ee67 7a27 	vmul.f32	s15, s14, s15
90007afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007b02:	e043      	b.n	90007b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007b04:	693b      	ldr	r3, [r7, #16]
90007b06:	ee07 3a90 	vmov	s15, r3
90007b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007b0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007bf0 <HAL_RCC_GetSysClockFreq+0x2f0>
90007b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007b16:	4b2f      	ldr	r3, [pc, #188]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007b1e:	ee07 3a90 	vmov	s15, r3
90007b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007b26:	ed97 6a02 	vldr	s12, [r7, #8]
90007b2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007be4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007b46:	e021      	b.n	90007b8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007b48:	693b      	ldr	r3, [r7, #16]
90007b4a:	ee07 3a90 	vmov	s15, r3
90007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007b52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007bec <HAL_RCC_GetSysClockFreq+0x2ec>
90007b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007b5a:	4b1e      	ldr	r3, [pc, #120]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007b62:	ee07 3a90 	vmov	s15, r3
90007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007b6a:	ed97 6a02 	vldr	s12, [r7, #8]
90007b6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007be4 <HAL_RCC_GetSysClockFreq+0x2e4>
90007b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007b82:	ee67 7a27 	vmul.f32	s15, s14, s15
90007b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007b8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007b8c:	4b11      	ldr	r3, [pc, #68]	@ (90007bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007b90:	0a5b      	lsrs	r3, r3, #9
90007b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007b96:	3301      	adds	r3, #1
90007b98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007b9a:	683b      	ldr	r3, [r7, #0]
90007b9c:	ee07 3a90 	vmov	s15, r3
90007ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007ba4:	edd7 6a07 	vldr	s13, [r7, #28]
90007ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007bb0:	ee17 3a90 	vmov	r3, s15
90007bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007bb6:	e005      	b.n	90007bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007bb8:	2300      	movs	r3, #0
90007bba:	61bb      	str	r3, [r7, #24]
      break;
90007bbc:	e002      	b.n	90007bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007bbe:	4b07      	ldr	r3, [pc, #28]	@ (90007bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
90007bc0:	61bb      	str	r3, [r7, #24]
      break;
90007bc2:	bf00      	nop
  }

  return sysclockfreq;
90007bc4:	69bb      	ldr	r3, [r7, #24]
}
90007bc6:	4618      	mov	r0, r3
90007bc8:	3724      	adds	r7, #36	@ 0x24
90007bca:	46bd      	mov	sp, r7
90007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
90007bd0:	4770      	bx	lr
90007bd2:	bf00      	nop
90007bd4:	58024400 	.word	0x58024400
90007bd8:	03d09000 	.word	0x03d09000
90007bdc:	003d0900 	.word	0x003d0900
90007be0:	017d7840 	.word	0x017d7840
90007be4:	46000000 	.word	0x46000000
90007be8:	4c742400 	.word	0x4c742400
90007bec:	4a742400 	.word	0x4a742400
90007bf0:	4bbebc20 	.word	0x4bbebc20

90007bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007bf4:	b580      	push	{r7, lr}
90007bf6:	b082      	sub	sp, #8
90007bf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007bfa:	f7ff fe81 	bl	90007900 <HAL_RCC_GetSysClockFreq>
90007bfe:	4602      	mov	r2, r0
90007c00:	4b10      	ldr	r3, [pc, #64]	@ (90007c44 <HAL_RCC_GetHCLKFreq+0x50>)
90007c02:	699b      	ldr	r3, [r3, #24]
90007c04:	0a1b      	lsrs	r3, r3, #8
90007c06:	f003 030f 	and.w	r3, r3, #15
90007c0a:	490f      	ldr	r1, [pc, #60]	@ (90007c48 <HAL_RCC_GetHCLKFreq+0x54>)
90007c0c:	5ccb      	ldrb	r3, [r1, r3]
90007c0e:	f003 031f 	and.w	r3, r3, #31
90007c12:	fa22 f303 	lsr.w	r3, r2, r3
90007c16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007c18:	4b0a      	ldr	r3, [pc, #40]	@ (90007c44 <HAL_RCC_GetHCLKFreq+0x50>)
90007c1a:	699b      	ldr	r3, [r3, #24]
90007c1c:	f003 030f 	and.w	r3, r3, #15
90007c20:	4a09      	ldr	r2, [pc, #36]	@ (90007c48 <HAL_RCC_GetHCLKFreq+0x54>)
90007c22:	5cd3      	ldrb	r3, [r2, r3]
90007c24:	f003 031f 	and.w	r3, r3, #31
90007c28:	687a      	ldr	r2, [r7, #4]
90007c2a:	fa22 f303 	lsr.w	r3, r2, r3
90007c2e:	4a07      	ldr	r2, [pc, #28]	@ (90007c4c <HAL_RCC_GetHCLKFreq+0x58>)
90007c30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007c32:	4a07      	ldr	r2, [pc, #28]	@ (90007c50 <HAL_RCC_GetHCLKFreq+0x5c>)
90007c34:	687b      	ldr	r3, [r7, #4]
90007c36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007c38:	4b04      	ldr	r3, [pc, #16]	@ (90007c4c <HAL_RCC_GetHCLKFreq+0x58>)
90007c3a:	681b      	ldr	r3, [r3, #0]
}
90007c3c:	4618      	mov	r0, r3
90007c3e:	3708      	adds	r7, #8
90007c40:	46bd      	mov	sp, r7
90007c42:	bd80      	pop	{r7, pc}
90007c44:	58024400 	.word	0x58024400
90007c48:	9000d884 	.word	0x9000d884
90007c4c:	20000004 	.word	0x20000004
90007c50:	20000000 	.word	0x20000000

90007c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007c54:	b580      	push	{r7, lr}
90007c56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007c58:	f7ff ffcc 	bl	90007bf4 <HAL_RCC_GetHCLKFreq>
90007c5c:	4602      	mov	r2, r0
90007c5e:	4b06      	ldr	r3, [pc, #24]	@ (90007c78 <HAL_RCC_GetPCLK1Freq+0x24>)
90007c60:	69db      	ldr	r3, [r3, #28]
90007c62:	091b      	lsrs	r3, r3, #4
90007c64:	f003 0307 	and.w	r3, r3, #7
90007c68:	4904      	ldr	r1, [pc, #16]	@ (90007c7c <HAL_RCC_GetPCLK1Freq+0x28>)
90007c6a:	5ccb      	ldrb	r3, [r1, r3]
90007c6c:	f003 031f 	and.w	r3, r3, #31
90007c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007c74:	4618      	mov	r0, r3
90007c76:	bd80      	pop	{r7, pc}
90007c78:	58024400 	.word	0x58024400
90007c7c:	9000d884 	.word	0x9000d884

90007c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007c80:	b580      	push	{r7, lr}
90007c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007c84:	f7ff ffb6 	bl	90007bf4 <HAL_RCC_GetHCLKFreq>
90007c88:	4602      	mov	r2, r0
90007c8a:	4b06      	ldr	r3, [pc, #24]	@ (90007ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
90007c8c:	69db      	ldr	r3, [r3, #28]
90007c8e:	0a1b      	lsrs	r3, r3, #8
90007c90:	f003 0307 	and.w	r3, r3, #7
90007c94:	4904      	ldr	r1, [pc, #16]	@ (90007ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
90007c96:	5ccb      	ldrb	r3, [r1, r3]
90007c98:	f003 031f 	and.w	r3, r3, #31
90007c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007ca0:	4618      	mov	r0, r3
90007ca2:	bd80      	pop	{r7, pc}
90007ca4:	58024400 	.word	0x58024400
90007ca8:	9000d884 	.word	0x9000d884

90007cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007cb0:	b0ca      	sub	sp, #296	@ 0x128
90007cb2:	af00      	add	r7, sp, #0
90007cb4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007cb8:	2300      	movs	r3, #0
90007cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007cbe:	2300      	movs	r3, #0
90007cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ccc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007cd0:	2500      	movs	r5, #0
90007cd2:	ea54 0305 	orrs.w	r3, r4, r5
90007cd6:	d049      	beq.n	90007d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007ce2:	d02f      	beq.n	90007d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007ce8:	d828      	bhi.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
90007cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007cee:	d01a      	beq.n	90007d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007cf4:	d822      	bhi.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
90007cf6:	2b00      	cmp	r3, #0
90007cf8:	d003      	beq.n	90007d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
90007cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007cfe:	d007      	beq.n	90007d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007d00:	e01c      	b.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d02:	4bb8      	ldr	r3, [pc, #736]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007d06:	4ab7      	ldr	r2, [pc, #732]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007d0e:	e01a      	b.n	90007d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d14:	3308      	adds	r3, #8
90007d16:	2102      	movs	r1, #2
90007d18:	4618      	mov	r0, r3
90007d1a:	f001 fc8f 	bl	9000963c <RCCEx_PLL2_Config>
90007d1e:	4603      	mov	r3, r0
90007d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007d24:	e00f      	b.n	90007d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d2a:	3328      	adds	r3, #40	@ 0x28
90007d2c:	2102      	movs	r1, #2
90007d2e:	4618      	mov	r0, r3
90007d30:	f001 fd36 	bl	900097a0 <RCCEx_PLL3_Config>
90007d34:	4603      	mov	r3, r0
90007d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007d3a:	e004      	b.n	90007d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007d3c:	2301      	movs	r3, #1
90007d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007d42:	e000      	b.n	90007d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007d44:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d4a:	2b00      	cmp	r3, #0
90007d4c:	d10a      	bne.n	90007d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007d4e:	4ba5      	ldr	r3, [pc, #660]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007d5c:	4aa1      	ldr	r2, [pc, #644]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d5e:	430b      	orrs	r3, r1
90007d60:	6513      	str	r3, [r2, #80]	@ 0x50
90007d62:	e003      	b.n	90007d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007d78:	f04f 0900 	mov.w	r9, #0
90007d7c:	ea58 0309 	orrs.w	r3, r8, r9
90007d80:	d047      	beq.n	90007e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007d88:	2b04      	cmp	r3, #4
90007d8a:	d82a      	bhi.n	90007de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
90007d8c:	a201      	add	r2, pc, #4	@ (adr r2, 90007d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007d92:	bf00      	nop
90007d94:	90007da9 	.word	0x90007da9
90007d98:	90007db7 	.word	0x90007db7
90007d9c:	90007dcd 	.word	0x90007dcd
90007da0:	90007deb 	.word	0x90007deb
90007da4:	90007deb 	.word	0x90007deb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007da8:	4b8e      	ldr	r3, [pc, #568]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dac:	4a8d      	ldr	r2, [pc, #564]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007db4:	e01a      	b.n	90007dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dba:	3308      	adds	r3, #8
90007dbc:	2100      	movs	r1, #0
90007dbe:	4618      	mov	r0, r3
90007dc0:	f001 fc3c 	bl	9000963c <RCCEx_PLL2_Config>
90007dc4:	4603      	mov	r3, r0
90007dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007dca:	e00f      	b.n	90007dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dd0:	3328      	adds	r3, #40	@ 0x28
90007dd2:	2100      	movs	r1, #0
90007dd4:	4618      	mov	r0, r3
90007dd6:	f001 fce3 	bl	900097a0 <RCCEx_PLL3_Config>
90007dda:	4603      	mov	r3, r0
90007ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007de0:	e004      	b.n	90007dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007de2:	2301      	movs	r3, #1
90007de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007de8:	e000      	b.n	90007dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007dea:	bf00      	nop
    }

    if (ret == HAL_OK)
90007dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007df0:	2b00      	cmp	r3, #0
90007df2:	d10a      	bne.n	90007e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007df4:	4b7b      	ldr	r3, [pc, #492]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007df8:	f023 0107 	bic.w	r1, r3, #7
90007dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007e02:	4a78      	ldr	r2, [pc, #480]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e04:	430b      	orrs	r3, r1
90007e06:	6513      	str	r3, [r2, #80]	@ 0x50
90007e08:	e003      	b.n	90007e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007e1e:	f04f 0b00 	mov.w	fp, #0
90007e22:	ea5a 030b 	orrs.w	r3, sl, fp
90007e26:	d04c      	beq.n	90007ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007e32:	d030      	beq.n	90007e96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007e38:	d829      	bhi.n	90007e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007e3a:	2bc0      	cmp	r3, #192	@ 0xc0
90007e3c:	d02d      	beq.n	90007e9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007e3e:	2bc0      	cmp	r3, #192	@ 0xc0
90007e40:	d825      	bhi.n	90007e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007e42:	2b80      	cmp	r3, #128	@ 0x80
90007e44:	d018      	beq.n	90007e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007e46:	2b80      	cmp	r3, #128	@ 0x80
90007e48:	d821      	bhi.n	90007e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007e4a:	2b00      	cmp	r3, #0
90007e4c:	d002      	beq.n	90007e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007e4e:	2b40      	cmp	r3, #64	@ 0x40
90007e50:	d007      	beq.n	90007e62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007e52:	e01c      	b.n	90007e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e54:	4b63      	ldr	r3, [pc, #396]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e58:	4a62      	ldr	r2, [pc, #392]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007e60:	e01c      	b.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e66:	3308      	adds	r3, #8
90007e68:	2100      	movs	r1, #0
90007e6a:	4618      	mov	r0, r3
90007e6c:	f001 fbe6 	bl	9000963c <RCCEx_PLL2_Config>
90007e70:	4603      	mov	r3, r0
90007e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007e76:	e011      	b.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e7c:	3328      	adds	r3, #40	@ 0x28
90007e7e:	2100      	movs	r1, #0
90007e80:	4618      	mov	r0, r3
90007e82:	f001 fc8d 	bl	900097a0 <RCCEx_PLL3_Config>
90007e86:	4603      	mov	r3, r0
90007e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007e8c:	e006      	b.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007e8e:	2301      	movs	r3, #1
90007e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007e94:	e002      	b.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007e96:	bf00      	nop
90007e98:	e000      	b.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ea0:	2b00      	cmp	r3, #0
90007ea2:	d10a      	bne.n	90007eba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007ea4:	4b4f      	ldr	r3, [pc, #316]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007ea8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007eb2:	4a4c      	ldr	r2, [pc, #304]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007eb4:	430b      	orrs	r3, r1
90007eb6:	6513      	str	r3, [r2, #80]	@ 0x50
90007eb8:	e003      	b.n	90007ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007eca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007ece:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007ed2:	2300      	movs	r3, #0
90007ed4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007ed8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007edc:	460b      	mov	r3, r1
90007ede:	4313      	orrs	r3, r2
90007ee0:	d053      	beq.n	90007f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007eea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007eee:	d035      	beq.n	90007f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007ef4:	d82e      	bhi.n	90007f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007efa:	d031      	beq.n	90007f60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007efc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007f00:	d828      	bhi.n	90007f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007f06:	d01a      	beq.n	90007f3e <HAL_RCCEx_PeriphCLKConfig+0x292>
90007f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007f0c:	d822      	bhi.n	90007f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007f0e:	2b00      	cmp	r3, #0
90007f10:	d003      	beq.n	90007f1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007f16:	d007      	beq.n	90007f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007f18:	e01c      	b.n	90007f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f1a:	4b32      	ldr	r3, [pc, #200]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f1e:	4a31      	ldr	r2, [pc, #196]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f26:	e01c      	b.n	90007f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f2c:	3308      	adds	r3, #8
90007f2e:	2100      	movs	r1, #0
90007f30:	4618      	mov	r0, r3
90007f32:	f001 fb83 	bl	9000963c <RCCEx_PLL2_Config>
90007f36:	4603      	mov	r3, r0
90007f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007f3c:	e011      	b.n	90007f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f42:	3328      	adds	r3, #40	@ 0x28
90007f44:	2100      	movs	r1, #0
90007f46:	4618      	mov	r0, r3
90007f48:	f001 fc2a 	bl	900097a0 <RCCEx_PLL3_Config>
90007f4c:	4603      	mov	r3, r0
90007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f52:	e006      	b.n	90007f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007f54:	2301      	movs	r3, #1
90007f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f5a:	e002      	b.n	90007f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007f5c:	bf00      	nop
90007f5e:	e000      	b.n	90007f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007f60:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f66:	2b00      	cmp	r3, #0
90007f68:	d10b      	bne.n	90007f82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007f6a:	4b1e      	ldr	r3, [pc, #120]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007f6e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007f7a:	4a1a      	ldr	r2, [pc, #104]	@ (90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f7c:	430b      	orrs	r3, r1
90007f7e:	6593      	str	r3, [r2, #88]	@ 0x58
90007f80:	e003      	b.n	90007f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007f96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007f9a:	2300      	movs	r3, #0
90007f9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007fa0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007fa4:	460b      	mov	r3, r1
90007fa6:	4313      	orrs	r3, r2
90007fa8:	d056      	beq.n	90008058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007fb6:	d038      	beq.n	9000802a <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007fbc:	d831      	bhi.n	90008022 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007fc2:	d034      	beq.n	9000802e <HAL_RCCEx_PeriphCLKConfig+0x382>
90007fc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007fc8:	d82b      	bhi.n	90008022 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007fce:	d01d      	beq.n	9000800c <HAL_RCCEx_PeriphCLKConfig+0x360>
90007fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007fd4:	d825      	bhi.n	90008022 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007fd6:	2b00      	cmp	r3, #0
90007fd8:	d006      	beq.n	90007fe8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007fda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007fde:	d00a      	beq.n	90007ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007fe0:	e01f      	b.n	90008022 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007fe2:	bf00      	nop
90007fe4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007fe8:	4ba2      	ldr	r3, [pc, #648]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fec:	4aa1      	ldr	r2, [pc, #644]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ff4:	e01c      	b.n	90008030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ffa:	3308      	adds	r3, #8
90007ffc:	2100      	movs	r1, #0
90007ffe:	4618      	mov	r0, r3
90008000:	f001 fb1c 	bl	9000963c <RCCEx_PLL2_Config>
90008004:	4603      	mov	r3, r0
90008006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
9000800a:	e011      	b.n	90008030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008010:	3328      	adds	r3, #40	@ 0x28
90008012:	2100      	movs	r1, #0
90008014:	4618      	mov	r0, r3
90008016:	f001 fbc3 	bl	900097a0 <RCCEx_PLL3_Config>
9000801a:	4603      	mov	r3, r0
9000801c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008020:	e006      	b.n	90008030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90008022:	2301      	movs	r3, #1
90008024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008028:	e002      	b.n	90008030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
9000802a:	bf00      	nop
9000802c:	e000      	b.n	90008030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
9000802e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008034:	2b00      	cmp	r3, #0
90008036:	d10b      	bne.n	90008050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90008038:	4b8e      	ldr	r3, [pc, #568]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000803a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000803c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008044:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90008048:	4a8a      	ldr	r2, [pc, #552]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000804a:	430b      	orrs	r3, r1
9000804c:	6593      	str	r3, [r2, #88]	@ 0x58
9000804e:	e003      	b.n	90008058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90008058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000805c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008060:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90008064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90008068:	2300      	movs	r3, #0
9000806a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
9000806e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90008072:	460b      	mov	r3, r1
90008074:	4313      	orrs	r3, r2
90008076:	d03a      	beq.n	900080ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000807c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000807e:	2b30      	cmp	r3, #48	@ 0x30
90008080:	d01f      	beq.n	900080c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
90008082:	2b30      	cmp	r3, #48	@ 0x30
90008084:	d819      	bhi.n	900080ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
90008086:	2b20      	cmp	r3, #32
90008088:	d00c      	beq.n	900080a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000808a:	2b20      	cmp	r3, #32
9000808c:	d815      	bhi.n	900080ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
9000808e:	2b00      	cmp	r3, #0
90008090:	d019      	beq.n	900080c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90008092:	2b10      	cmp	r3, #16
90008094:	d111      	bne.n	900080ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008096:	4b77      	ldr	r3, [pc, #476]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000809a:	4a76      	ldr	r2, [pc, #472]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000809c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900080a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
900080a2:	e011      	b.n	900080c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080a8:	3308      	adds	r3, #8
900080aa:	2102      	movs	r1, #2
900080ac:	4618      	mov	r0, r3
900080ae:	f001 fac5 	bl	9000963c <RCCEx_PLL2_Config>
900080b2:	4603      	mov	r3, r0
900080b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
900080b8:	e006      	b.n	900080c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
900080ba:	2301      	movs	r3, #1
900080bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900080c0:	e002      	b.n	900080c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
900080c2:	bf00      	nop
900080c4:	e000      	b.n	900080c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
900080c6:	bf00      	nop
    }

    if (ret == HAL_OK)
900080c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080cc:	2b00      	cmp	r3, #0
900080ce:	d10a      	bne.n	900080e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
900080d0:	4b68      	ldr	r3, [pc, #416]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900080d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
900080d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900080de:	4a65      	ldr	r2, [pc, #404]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080e0:	430b      	orrs	r3, r1
900080e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
900080e4:	e003      	b.n	900080ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
900080e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
900080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
900080f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
900080fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
900080fe:	2300      	movs	r3, #0
90008100:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90008104:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90008108:	460b      	mov	r3, r1
9000810a:	4313      	orrs	r3, r2
9000810c:	d051      	beq.n	900081b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
9000810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008118:	d035      	beq.n	90008186 <HAL_RCCEx_PeriphCLKConfig+0x4da>
9000811a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000811e:	d82e      	bhi.n	9000817e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90008124:	d031      	beq.n	9000818a <HAL_RCCEx_PeriphCLKConfig+0x4de>
90008126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
9000812a:	d828      	bhi.n	9000817e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
9000812c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008130:	d01a      	beq.n	90008168 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90008132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008136:	d822      	bhi.n	9000817e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008138:	2b00      	cmp	r3, #0
9000813a:	d003      	beq.n	90008144 <HAL_RCCEx_PeriphCLKConfig+0x498>
9000813c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008140:	d007      	beq.n	90008152 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90008142:	e01c      	b.n	9000817e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008144:	4b4b      	ldr	r3, [pc, #300]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008148:	4a4a      	ldr	r2, [pc, #296]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000814a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000814e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008150:	e01c      	b.n	9000818c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008156:	3308      	adds	r3, #8
90008158:	2100      	movs	r1, #0
9000815a:	4618      	mov	r0, r3
9000815c:	f001 fa6e 	bl	9000963c <RCCEx_PLL2_Config>
90008160:	4603      	mov	r3, r0
90008162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008166:	e011      	b.n	9000818c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000816c:	3328      	adds	r3, #40	@ 0x28
9000816e:	2100      	movs	r1, #0
90008170:	4618      	mov	r0, r3
90008172:	f001 fb15 	bl	900097a0 <RCCEx_PLL3_Config>
90008176:	4603      	mov	r3, r0
90008178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000817c:	e006      	b.n	9000818c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000817e:	2301      	movs	r3, #1
90008180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008184:	e002      	b.n	9000818c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008186:	bf00      	nop
90008188:	e000      	b.n	9000818c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000818a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000818c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008190:	2b00      	cmp	r3, #0
90008192:	d10a      	bne.n	900081aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90008194:	4b37      	ldr	r3, [pc, #220]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008198:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
9000819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
900081a2:	4a34      	ldr	r2, [pc, #208]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081a4:	430b      	orrs	r3, r1
900081a6:	6513      	str	r3, [r2, #80]	@ 0x50
900081a8:	e003      	b.n	900081b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
900081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900081b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
900081ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
900081be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
900081c2:	2300      	movs	r3, #0
900081c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
900081c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
900081cc:	460b      	mov	r3, r1
900081ce:	4313      	orrs	r3, r2
900081d0:	d056      	beq.n	90008280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
900081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900081d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
900081dc:	d033      	beq.n	90008246 <HAL_RCCEx_PeriphCLKConfig+0x59a>
900081de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
900081e2:	d82c      	bhi.n	9000823e <HAL_RCCEx_PeriphCLKConfig+0x592>
900081e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900081e8:	d02f      	beq.n	9000824a <HAL_RCCEx_PeriphCLKConfig+0x59e>
900081ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900081ee:	d826      	bhi.n	9000823e <HAL_RCCEx_PeriphCLKConfig+0x592>
900081f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
900081f4:	d02b      	beq.n	9000824e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
900081f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
900081fa:	d820      	bhi.n	9000823e <HAL_RCCEx_PeriphCLKConfig+0x592>
900081fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008200:	d012      	beq.n	90008228 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90008202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008206:	d81a      	bhi.n	9000823e <HAL_RCCEx_PeriphCLKConfig+0x592>
90008208:	2b00      	cmp	r3, #0
9000820a:	d022      	beq.n	90008252 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
9000820c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008210:	d115      	bne.n	9000823e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008216:	3308      	adds	r3, #8
90008218:	2101      	movs	r1, #1
9000821a:	4618      	mov	r0, r3
9000821c:	f001 fa0e 	bl	9000963c <RCCEx_PLL2_Config>
90008220:	4603      	mov	r3, r0
90008222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008226:	e015      	b.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000822c:	3328      	adds	r3, #40	@ 0x28
9000822e:	2101      	movs	r1, #1
90008230:	4618      	mov	r0, r3
90008232:	f001 fab5 	bl	900097a0 <RCCEx_PLL3_Config>
90008236:	4603      	mov	r3, r0
90008238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000823c:	e00a      	b.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000823e:	2301      	movs	r3, #1
90008240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008244:	e006      	b.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008246:	bf00      	nop
90008248:	e004      	b.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000824a:	bf00      	nop
9000824c:	e002      	b.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000824e:	bf00      	nop
90008250:	e000      	b.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008252:	bf00      	nop
    }

    if (ret == HAL_OK)
90008254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008258:	2b00      	cmp	r3, #0
9000825a:	d10d      	bne.n	90008278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000825c:	4b05      	ldr	r3, [pc, #20]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000825e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008260:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000826a:	4a02      	ldr	r2, [pc, #8]	@ (90008274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000826c:	430b      	orrs	r3, r1
9000826e:	6513      	str	r3, [r2, #80]	@ 0x50
90008270:	e006      	b.n	90008280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90008272:	bf00      	nop
90008274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000827c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008284:	e9d3 2300 	ldrd	r2, r3, [r3]
90008288:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
9000828c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90008290:	2300      	movs	r3, #0
90008292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90008296:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
9000829a:	460b      	mov	r3, r1
9000829c:	4313      	orrs	r3, r2
9000829e:	d055      	beq.n	9000834c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900082a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900082a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900082ac:	d033      	beq.n	90008316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
900082ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900082b2:	d82c      	bhi.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x662>
900082b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900082b8:	d02f      	beq.n	9000831a <HAL_RCCEx_PeriphCLKConfig+0x66e>
900082ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900082be:	d826      	bhi.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x662>
900082c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900082c4:	d02b      	beq.n	9000831e <HAL_RCCEx_PeriphCLKConfig+0x672>
900082c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900082ca:	d820      	bhi.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x662>
900082cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900082d0:	d012      	beq.n	900082f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
900082d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900082d6:	d81a      	bhi.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x662>
900082d8:	2b00      	cmp	r3, #0
900082da:	d022      	beq.n	90008322 <HAL_RCCEx_PeriphCLKConfig+0x676>
900082dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900082e0:	d115      	bne.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082e6:	3308      	adds	r3, #8
900082e8:	2101      	movs	r1, #1
900082ea:	4618      	mov	r0, r3
900082ec:	f001 f9a6 	bl	9000963c <RCCEx_PLL2_Config>
900082f0:	4603      	mov	r3, r0
900082f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
900082f6:	e015      	b.n	90008324 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082fc:	3328      	adds	r3, #40	@ 0x28
900082fe:	2101      	movs	r1, #1
90008300:	4618      	mov	r0, r3
90008302:	f001 fa4d 	bl	900097a0 <RCCEx_PLL3_Config>
90008306:	4603      	mov	r3, r0
90008308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000830c:	e00a      	b.n	90008324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000830e:	2301      	movs	r3, #1
90008310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008314:	e006      	b.n	90008324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008316:	bf00      	nop
90008318:	e004      	b.n	90008324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000831a:	bf00      	nop
9000831c:	e002      	b.n	90008324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000831e:	bf00      	nop
90008320:	e000      	b.n	90008324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008322:	bf00      	nop
    }

    if (ret == HAL_OK)
90008324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008328:	2b00      	cmp	r3, #0
9000832a:	d10b      	bne.n	90008344 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000832c:	4ba3      	ldr	r3, [pc, #652]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000832e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008330:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
9000833c:	4a9f      	ldr	r2, [pc, #636]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000833e:	430b      	orrs	r3, r1
90008340:	6593      	str	r3, [r2, #88]	@ 0x58
90008342:	e003      	b.n	9000834c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000834c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008350:	e9d3 2300 	ldrd	r2, r3, [r3]
90008354:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90008358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
9000835c:	2300      	movs	r3, #0
9000835e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90008362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008366:	460b      	mov	r3, r1
90008368:	4313      	orrs	r3, r2
9000836a:	d037      	beq.n	900083dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
9000836c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008376:	d00e      	beq.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000837c:	d816      	bhi.n	900083ac <HAL_RCCEx_PeriphCLKConfig+0x700>
9000837e:	2b00      	cmp	r3, #0
90008380:	d018      	beq.n	900083b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
90008382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008386:	d111      	bne.n	900083ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008388:	4b8c      	ldr	r3, [pc, #560]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000838c:	4a8b      	ldr	r2, [pc, #556]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000838e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008394:	e00f      	b.n	900083b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000839a:	3308      	adds	r3, #8
9000839c:	2101      	movs	r1, #1
9000839e:	4618      	mov	r0, r3
900083a0:	f001 f94c 	bl	9000963c <RCCEx_PLL2_Config>
900083a4:	4603      	mov	r3, r0
900083a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900083aa:	e004      	b.n	900083b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900083ac:	2301      	movs	r3, #1
900083ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900083b2:	e000      	b.n	900083b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900083b4:	bf00      	nop
    }

    if (ret == HAL_OK)
900083b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083ba:	2b00      	cmp	r3, #0
900083bc:	d10a      	bne.n	900083d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
900083be:	4b7f      	ldr	r3, [pc, #508]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900083c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
900083c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900083cc:	4a7b      	ldr	r2, [pc, #492]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083ce:	430b      	orrs	r3, r1
900083d0:	6513      	str	r3, [r2, #80]	@ 0x50
900083d2:	e003      	b.n	900083dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
900083d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
900083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
900083e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
900083e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
900083ec:	2300      	movs	r3, #0
900083ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
900083f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
900083f6:	460b      	mov	r3, r1
900083f8:	4313      	orrs	r3, r2
900083fa:	d039      	beq.n	90008470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
900083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008402:	2b03      	cmp	r3, #3
90008404:	d81c      	bhi.n	90008440 <HAL_RCCEx_PeriphCLKConfig+0x794>
90008406:	a201      	add	r2, pc, #4	@ (adr r2, 9000840c <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000840c:	90008449 	.word	0x90008449
90008410:	9000841d 	.word	0x9000841d
90008414:	9000842b 	.word	0x9000842b
90008418:	90008449 	.word	0x90008449
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000841c:	4b67      	ldr	r3, [pc, #412]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000841e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008420:	4a66      	ldr	r2, [pc, #408]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008428:	e00f      	b.n	9000844a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000842a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000842e:	3308      	adds	r3, #8
90008430:	2102      	movs	r1, #2
90008432:	4618      	mov	r0, r3
90008434:	f001 f902 	bl	9000963c <RCCEx_PLL2_Config>
90008438:	4603      	mov	r3, r0
9000843a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
9000843e:	e004      	b.n	9000844a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008440:	2301      	movs	r3, #1
90008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008446:	e000      	b.n	9000844a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008448:	bf00      	nop
    }

    if (ret == HAL_OK)
9000844a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000844e:	2b00      	cmp	r3, #0
90008450:	d10a      	bne.n	90008468 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90008452:	4b5a      	ldr	r3, [pc, #360]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008456:	f023 0103 	bic.w	r1, r3, #3
9000845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000845e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008460:	4a56      	ldr	r2, [pc, #344]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008462:	430b      	orrs	r3, r1
90008464:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008466:	e003      	b.n	90008470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000846c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008474:	e9d3 2300 	ldrd	r2, r3, [r3]
90008478:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
9000847c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
90008480:	2300      	movs	r3, #0
90008482:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
90008486:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
9000848a:	460b      	mov	r3, r1
9000848c:	4313      	orrs	r3, r2
9000848e:	f000 809f 	beq.w	900085d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90008492:	4b4b      	ldr	r3, [pc, #300]	@ (900085c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008494:	681b      	ldr	r3, [r3, #0]
90008496:	4a4a      	ldr	r2, [pc, #296]	@ (900085c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000849c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000849e:	f7fa ff77 	bl	90003390 <HAL_GetTick>
900084a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900084a6:	e00b      	b.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900084a8:	f7fa ff72 	bl	90003390 <HAL_GetTick>
900084ac:	4602      	mov	r2, r0
900084ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900084b2:	1ad3      	subs	r3, r2, r3
900084b4:	2b64      	cmp	r3, #100	@ 0x64
900084b6:	d903      	bls.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
900084b8:	2303      	movs	r3, #3
900084ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900084be:	e005      	b.n	900084cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900084c0:	4b3f      	ldr	r3, [pc, #252]	@ (900085c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900084c2:	681b      	ldr	r3, [r3, #0]
900084c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900084c8:	2b00      	cmp	r3, #0
900084ca:	d0ed      	beq.n	900084a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
900084cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084d0:	2b00      	cmp	r3, #0
900084d2:	d179      	bne.n	900085c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
900084d4:	4b39      	ldr	r3, [pc, #228]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
900084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900084e0:	4053      	eors	r3, r2
900084e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
900084e6:	2b00      	cmp	r3, #0
900084e8:	d015      	beq.n	90008516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
900084ea:	4b34      	ldr	r3, [pc, #208]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900084ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
900084f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
900084f6:	4b31      	ldr	r3, [pc, #196]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900084fa:	4a30      	ldr	r2, [pc, #192]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90008500:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90008502:	4b2e      	ldr	r3, [pc, #184]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008506:	4a2d      	ldr	r2, [pc, #180]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000850c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
9000850e:	4a2b      	ldr	r2, [pc, #172]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008514:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000851a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000851e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008522:	d118      	bne.n	90008556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008524:	f7fa ff34 	bl	90003390 <HAL_GetTick>
90008528:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000852c:	e00d      	b.n	9000854a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000852e:	f7fa ff2f 	bl	90003390 <HAL_GetTick>
90008532:	4602      	mov	r2, r0
90008534:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008538:	1ad2      	subs	r2, r2, r3
9000853a:	f241 3388 	movw	r3, #5000	@ 0x1388
9000853e:	429a      	cmp	r2, r3
90008540:	d903      	bls.n	9000854a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90008542:	2303      	movs	r3, #3
90008544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90008548:	e005      	b.n	90008556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000854a:	4b1c      	ldr	r3, [pc, #112]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000854c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000854e:	f003 0302 	and.w	r3, r3, #2
90008552:	2b00      	cmp	r3, #0
90008554:	d0eb      	beq.n	9000852e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90008556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000855a:	2b00      	cmp	r3, #0
9000855c:	d129      	bne.n	900085b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000856a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000856e:	d10e      	bne.n	9000858e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90008570:	4b12      	ldr	r3, [pc, #72]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008572:	691b      	ldr	r3, [r3, #16]
90008574:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000857c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008580:	091a      	lsrs	r2, r3, #4
90008582:	4b10      	ldr	r3, [pc, #64]	@ (900085c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
90008584:	4013      	ands	r3, r2
90008586:	4a0d      	ldr	r2, [pc, #52]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008588:	430b      	orrs	r3, r1
9000858a:	6113      	str	r3, [r2, #16]
9000858c:	e005      	b.n	9000859a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000858e:	4b0b      	ldr	r3, [pc, #44]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008590:	691b      	ldr	r3, [r3, #16]
90008592:	4a0a      	ldr	r2, [pc, #40]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90008598:	6113      	str	r3, [r2, #16]
9000859a:	4b08      	ldr	r3, [pc, #32]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000859c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
9000859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900085a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
900085aa:	4a04      	ldr	r2, [pc, #16]	@ (900085bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
900085ac:	430b      	orrs	r3, r1
900085ae:	6713      	str	r3, [r2, #112]	@ 0x70
900085b0:	e00e      	b.n	900085d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900085b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
900085ba:	e009      	b.n	900085d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
900085bc:	58024400 	.word	0x58024400
900085c0:	58024800 	.word	0x58024800
900085c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
900085c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
900085d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
900085d8:	f002 0301 	and.w	r3, r2, #1
900085dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
900085e0:	2300      	movs	r3, #0
900085e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
900085e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
900085ea:	460b      	mov	r3, r1
900085ec:	4313      	orrs	r3, r2
900085ee:	f000 8089 	beq.w	90008704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
900085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900085f8:	2b28      	cmp	r3, #40	@ 0x28
900085fa:	d86b      	bhi.n	900086d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
900085fc:	a201      	add	r2, pc, #4	@ (adr r2, 90008604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
900085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008602:	bf00      	nop
90008604:	900086dd 	.word	0x900086dd
90008608:	900086d5 	.word	0x900086d5
9000860c:	900086d5 	.word	0x900086d5
90008610:	900086d5 	.word	0x900086d5
90008614:	900086d5 	.word	0x900086d5
90008618:	900086d5 	.word	0x900086d5
9000861c:	900086d5 	.word	0x900086d5
90008620:	900086d5 	.word	0x900086d5
90008624:	900086a9 	.word	0x900086a9
90008628:	900086d5 	.word	0x900086d5
9000862c:	900086d5 	.word	0x900086d5
90008630:	900086d5 	.word	0x900086d5
90008634:	900086d5 	.word	0x900086d5
90008638:	900086d5 	.word	0x900086d5
9000863c:	900086d5 	.word	0x900086d5
90008640:	900086d5 	.word	0x900086d5
90008644:	900086bf 	.word	0x900086bf
90008648:	900086d5 	.word	0x900086d5
9000864c:	900086d5 	.word	0x900086d5
90008650:	900086d5 	.word	0x900086d5
90008654:	900086d5 	.word	0x900086d5
90008658:	900086d5 	.word	0x900086d5
9000865c:	900086d5 	.word	0x900086d5
90008660:	900086d5 	.word	0x900086d5
90008664:	900086dd 	.word	0x900086dd
90008668:	900086d5 	.word	0x900086d5
9000866c:	900086d5 	.word	0x900086d5
90008670:	900086d5 	.word	0x900086d5
90008674:	900086d5 	.word	0x900086d5
90008678:	900086d5 	.word	0x900086d5
9000867c:	900086d5 	.word	0x900086d5
90008680:	900086d5 	.word	0x900086d5
90008684:	900086dd 	.word	0x900086dd
90008688:	900086d5 	.word	0x900086d5
9000868c:	900086d5 	.word	0x900086d5
90008690:	900086d5 	.word	0x900086d5
90008694:	900086d5 	.word	0x900086d5
90008698:	900086d5 	.word	0x900086d5
9000869c:	900086d5 	.word	0x900086d5
900086a0:	900086d5 	.word	0x900086d5
900086a4:	900086dd 	.word	0x900086dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900086a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ac:	3308      	adds	r3, #8
900086ae:	2101      	movs	r1, #1
900086b0:	4618      	mov	r0, r3
900086b2:	f000 ffc3 	bl	9000963c <RCCEx_PLL2_Config>
900086b6:	4603      	mov	r3, r0
900086b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900086bc:	e00f      	b.n	900086de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086c2:	3328      	adds	r3, #40	@ 0x28
900086c4:	2101      	movs	r1, #1
900086c6:	4618      	mov	r0, r3
900086c8:	f001 f86a 	bl	900097a0 <RCCEx_PLL3_Config>
900086cc:	4603      	mov	r3, r0
900086ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900086d2:	e004      	b.n	900086de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086d4:	2301      	movs	r3, #1
900086d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086da:	e000      	b.n	900086de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
900086dc:	bf00      	nop
    }

    if (ret == HAL_OK)
900086de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086e2:	2b00      	cmp	r3, #0
900086e4:	d10a      	bne.n	900086fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
900086e6:	4bbf      	ldr	r3, [pc, #764]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900086ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
900086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900086f4:	4abb      	ldr	r2, [pc, #748]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086f6:	430b      	orrs	r3, r1
900086f8:	6553      	str	r3, [r2, #84]	@ 0x54
900086fa:	e003      	b.n	90008704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008708:	e9d3 2300 	ldrd	r2, r3, [r3]
9000870c:	f002 0302 	and.w	r3, r2, #2
90008710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008714:	2300      	movs	r3, #0
90008716:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000871a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
9000871e:	460b      	mov	r3, r1
90008720:	4313      	orrs	r3, r2
90008722:	d041      	beq.n	900087a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
9000872a:	2b05      	cmp	r3, #5
9000872c:	d824      	bhi.n	90008778 <HAL_RCCEx_PeriphCLKConfig+0xacc>
9000872e:	a201      	add	r2, pc, #4	@ (adr r2, 90008734 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008734:	90008781 	.word	0x90008781
90008738:	9000874d 	.word	0x9000874d
9000873c:	90008763 	.word	0x90008763
90008740:	90008781 	.word	0x90008781
90008744:	90008781 	.word	0x90008781
90008748:	90008781 	.word	0x90008781
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008750:	3308      	adds	r3, #8
90008752:	2101      	movs	r1, #1
90008754:	4618      	mov	r0, r3
90008756:	f000 ff71 	bl	9000963c <RCCEx_PLL2_Config>
9000875a:	4603      	mov	r3, r0
9000875c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008760:	e00f      	b.n	90008782 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008766:	3328      	adds	r3, #40	@ 0x28
90008768:	2101      	movs	r1, #1
9000876a:	4618      	mov	r0, r3
9000876c:	f001 f818 	bl	900097a0 <RCCEx_PLL3_Config>
90008770:	4603      	mov	r3, r0
90008772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008776:	e004      	b.n	90008782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008778:	2301      	movs	r3, #1
9000877a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000877e:	e000      	b.n	90008782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90008780:	bf00      	nop
    }

    if (ret == HAL_OK)
90008782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008786:	2b00      	cmp	r3, #0
90008788:	d10a      	bne.n	900087a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000878a:	4b96      	ldr	r3, [pc, #600]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000878c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000878e:	f023 0107 	bic.w	r1, r3, #7
90008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008798:	4a92      	ldr	r2, [pc, #584]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000879a:	430b      	orrs	r3, r1
9000879c:	6553      	str	r3, [r2, #84]	@ 0x54
9000879e:	e003      	b.n	900087a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900087a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
900087b0:	f002 0304 	and.w	r3, r2, #4
900087b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
900087b8:	2300      	movs	r3, #0
900087ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
900087be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
900087c2:	460b      	mov	r3, r1
900087c4:	4313      	orrs	r3, r2
900087c6:	d044      	beq.n	90008852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
900087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
900087d0:	2b05      	cmp	r3, #5
900087d2:	d825      	bhi.n	90008820 <HAL_RCCEx_PeriphCLKConfig+0xb74>
900087d4:	a201      	add	r2, pc, #4	@ (adr r2, 900087dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
900087d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900087da:	bf00      	nop
900087dc:	90008829 	.word	0x90008829
900087e0:	900087f5 	.word	0x900087f5
900087e4:	9000880b 	.word	0x9000880b
900087e8:	90008829 	.word	0x90008829
900087ec:	90008829 	.word	0x90008829
900087f0:	90008829 	.word	0x90008829
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087f8:	3308      	adds	r3, #8
900087fa:	2101      	movs	r1, #1
900087fc:	4618      	mov	r0, r3
900087fe:	f000 ff1d 	bl	9000963c <RCCEx_PLL2_Config>
90008802:	4603      	mov	r3, r0
90008804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008808:	e00f      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000880e:	3328      	adds	r3, #40	@ 0x28
90008810:	2101      	movs	r1, #1
90008812:	4618      	mov	r0, r3
90008814:	f000 ffc4 	bl	900097a0 <RCCEx_PLL3_Config>
90008818:	4603      	mov	r3, r0
9000881a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000881e:	e004      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008820:	2301      	movs	r3, #1
90008822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008826:	e000      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008828:	bf00      	nop
    }

    if (ret == HAL_OK)
9000882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000882e:	2b00      	cmp	r3, #0
90008830:	d10b      	bne.n	9000884a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90008832:	4b6c      	ldr	r3, [pc, #432]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008836:	f023 0107 	bic.w	r1, r3, #7
9000883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000883e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008842:	4a68      	ldr	r2, [pc, #416]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008844:	430b      	orrs	r3, r1
90008846:	6593      	str	r3, [r2, #88]	@ 0x58
90008848:	e003      	b.n	90008852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000884a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000884e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008856:	e9d3 2300 	ldrd	r2, r3, [r3]
9000885a:	f002 0320 	and.w	r3, r2, #32
9000885e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90008862:	2300      	movs	r3, #0
90008864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
9000886c:	460b      	mov	r3, r1
9000886e:	4313      	orrs	r3, r2
90008870:	d055      	beq.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000887a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000887e:	d033      	beq.n	900088e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008884:	d82c      	bhi.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000888a:	d02f      	beq.n	900088ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
9000888c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008890:	d826      	bhi.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008896:	d02b      	beq.n	900088f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90008898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000889c:	d820      	bhi.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000889e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900088a2:	d012      	beq.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900088a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900088a8:	d81a      	bhi.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900088aa:	2b00      	cmp	r3, #0
900088ac:	d022      	beq.n	900088f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
900088ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900088b2:	d115      	bne.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088b8:	3308      	adds	r3, #8
900088ba:	2100      	movs	r1, #0
900088bc:	4618      	mov	r0, r3
900088be:	f000 febd 	bl	9000963c <RCCEx_PLL2_Config>
900088c2:	4603      	mov	r3, r0
900088c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900088c8:	e015      	b.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088ce:	3328      	adds	r3, #40	@ 0x28
900088d0:	2102      	movs	r1, #2
900088d2:	4618      	mov	r0, r3
900088d4:	f000 ff64 	bl	900097a0 <RCCEx_PLL3_Config>
900088d8:	4603      	mov	r3, r0
900088da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900088de:	e00a      	b.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900088e0:	2301      	movs	r3, #1
900088e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900088e6:	e006      	b.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900088e8:	bf00      	nop
900088ea:	e004      	b.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900088ec:	bf00      	nop
900088ee:	e002      	b.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900088f0:	bf00      	nop
900088f2:	e000      	b.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900088f4:	bf00      	nop
    }

    if (ret == HAL_OK)
900088f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900088fa:	2b00      	cmp	r3, #0
900088fc:	d10b      	bne.n	90008916 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
900088fe:	4b39      	ldr	r3, [pc, #228]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008902:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000890a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000890e:	4a35      	ldr	r2, [pc, #212]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008910:	430b      	orrs	r3, r1
90008912:	6553      	str	r3, [r2, #84]	@ 0x54
90008914:	e003      	b.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000891a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008922:	e9d3 2300 	ldrd	r2, r3, [r3]
90008926:	f002 0340 	and.w	r3, r2, #64	@ 0x40
9000892a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
9000892e:	2300      	movs	r3, #0
90008930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008934:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008938:	460b      	mov	r3, r1
9000893a:	4313      	orrs	r3, r2
9000893c:	d058      	beq.n	900089f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
9000893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008946:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000894a:	d033      	beq.n	900089b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
9000894c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008950:	d82c      	bhi.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008956:	d02f      	beq.n	900089b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000895c:	d826      	bhi.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000895e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008962:	d02b      	beq.n	900089bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008968:	d820      	bhi.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000896a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000896e:	d012      	beq.n	90008996 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008974:	d81a      	bhi.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008976:	2b00      	cmp	r3, #0
90008978:	d022      	beq.n	900089c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
9000897a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000897e:	d115      	bne.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008984:	3308      	adds	r3, #8
90008986:	2100      	movs	r1, #0
90008988:	4618      	mov	r0, r3
9000898a:	f000 fe57 	bl	9000963c <RCCEx_PLL2_Config>
9000898e:	4603      	mov	r3, r0
90008990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008994:	e015      	b.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000899a:	3328      	adds	r3, #40	@ 0x28
9000899c:	2102      	movs	r1, #2
9000899e:	4618      	mov	r0, r3
900089a0:	f000 fefe 	bl	900097a0 <RCCEx_PLL3_Config>
900089a4:	4603      	mov	r3, r0
900089a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900089aa:	e00a      	b.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089ac:	2301      	movs	r3, #1
900089ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089b2:	e006      	b.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900089b4:	bf00      	nop
900089b6:	e004      	b.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900089b8:	bf00      	nop
900089ba:	e002      	b.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900089bc:	bf00      	nop
900089be:	e000      	b.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900089c0:	bf00      	nop
    }

    if (ret == HAL_OK)
900089c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089c6:	2b00      	cmp	r3, #0
900089c8:	d10e      	bne.n	900089e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
900089ca:	4b06      	ldr	r3, [pc, #24]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900089cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900089ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
900089d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900089da:	4a02      	ldr	r2, [pc, #8]	@ (900089e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900089dc:	430b      	orrs	r3, r1
900089de:	6593      	str	r3, [r2, #88]	@ 0x58
900089e0:	e006      	b.n	900089f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
900089e2:	bf00      	nop
900089e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900089e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
900089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
900089f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
900089fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90008a00:	2300      	movs	r3, #0
90008a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90008a06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90008a0a:	460b      	mov	r3, r1
90008a0c:	4313      	orrs	r3, r2
90008a0e:	d055      	beq.n	90008abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008a18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008a1c:	d033      	beq.n	90008a86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008a1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008a22:	d82c      	bhi.n	90008a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008a28:	d02f      	beq.n	90008a8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008a2e:	d826      	bhi.n	90008a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008a30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008a34:	d02b      	beq.n	90008a8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
90008a36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008a3a:	d820      	bhi.n	90008a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008a40:	d012      	beq.n	90008a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90008a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008a46:	d81a      	bhi.n	90008a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008a48:	2b00      	cmp	r3, #0
90008a4a:	d022      	beq.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008a50:	d115      	bne.n	90008a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a56:	3308      	adds	r3, #8
90008a58:	2100      	movs	r1, #0
90008a5a:	4618      	mov	r0, r3
90008a5c:	f000 fdee 	bl	9000963c <RCCEx_PLL2_Config>
90008a60:	4603      	mov	r3, r0
90008a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008a66:	e015      	b.n	90008a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a6c:	3328      	adds	r3, #40	@ 0x28
90008a6e:	2102      	movs	r1, #2
90008a70:	4618      	mov	r0, r3
90008a72:	f000 fe95 	bl	900097a0 <RCCEx_PLL3_Config>
90008a76:	4603      	mov	r3, r0
90008a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008a7c:	e00a      	b.n	90008a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008a7e:	2301      	movs	r3, #1
90008a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a84:	e006      	b.n	90008a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008a86:	bf00      	nop
90008a88:	e004      	b.n	90008a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008a8a:	bf00      	nop
90008a8c:	e002      	b.n	90008a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008a8e:	bf00      	nop
90008a90:	e000      	b.n	90008a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008a92:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a98:	2b00      	cmp	r3, #0
90008a9a:	d10b      	bne.n	90008ab4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90008a9c:	4ba1      	ldr	r3, [pc, #644]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008aa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008aac:	4a9d      	ldr	r2, [pc, #628]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008aae:	430b      	orrs	r3, r1
90008ab0:	6593      	str	r3, [r2, #88]	@ 0x58
90008ab2:	e003      	b.n	90008abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ac4:	f002 0308 	and.w	r3, r2, #8
90008ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90008acc:	2300      	movs	r3, #0
90008ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008ad2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008ad6:	460b      	mov	r3, r1
90008ad8:	4313      	orrs	r3, r2
90008ada:	d01e      	beq.n	90008b1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008ae8:	d10c      	bne.n	90008b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aee:	3328      	adds	r3, #40	@ 0x28
90008af0:	2102      	movs	r1, #2
90008af2:	4618      	mov	r0, r3
90008af4:	f000 fe54 	bl	900097a0 <RCCEx_PLL3_Config>
90008af8:	4603      	mov	r3, r0
90008afa:	2b00      	cmp	r3, #0
90008afc:	d002      	beq.n	90008b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008afe:	2301      	movs	r3, #1
90008b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008b04:	4b87      	ldr	r3, [pc, #540]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008b08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008b14:	4a83      	ldr	r2, [pc, #524]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b16:	430b      	orrs	r3, r1
90008b18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b22:	f002 0310 	and.w	r3, r2, #16
90008b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008b2a:	2300      	movs	r3, #0
90008b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
90008b30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008b34:	460b      	mov	r3, r1
90008b36:	4313      	orrs	r3, r2
90008b38:	d01e      	beq.n	90008b78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008b46:	d10c      	bne.n	90008b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b4c:	3328      	adds	r3, #40	@ 0x28
90008b4e:	2102      	movs	r1, #2
90008b50:	4618      	mov	r0, r3
90008b52:	f000 fe25 	bl	900097a0 <RCCEx_PLL3_Config>
90008b56:	4603      	mov	r3, r0
90008b58:	2b00      	cmp	r3, #0
90008b5a:	d002      	beq.n	90008b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008b5c:	2301      	movs	r3, #1
90008b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008b62:	4b70      	ldr	r3, [pc, #448]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008b72:	4a6c      	ldr	r2, [pc, #432]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b74:	430b      	orrs	r3, r1
90008b76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008b88:	2300      	movs	r3, #0
90008b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008b8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008b92:	460b      	mov	r3, r1
90008b94:	4313      	orrs	r3, r2
90008b96:	d03e      	beq.n	90008c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008ba4:	d022      	beq.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008baa:	d81b      	bhi.n	90008be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008bac:	2b00      	cmp	r3, #0
90008bae:	d003      	beq.n	90008bb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008bb4:	d00b      	beq.n	90008bce <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008bb6:	e015      	b.n	90008be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bbc:	3308      	adds	r3, #8
90008bbe:	2100      	movs	r1, #0
90008bc0:	4618      	mov	r0, r3
90008bc2:	f000 fd3b 	bl	9000963c <RCCEx_PLL2_Config>
90008bc6:	4603      	mov	r3, r0
90008bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008bcc:	e00f      	b.n	90008bee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bd2:	3328      	adds	r3, #40	@ 0x28
90008bd4:	2102      	movs	r1, #2
90008bd6:	4618      	mov	r0, r3
90008bd8:	f000 fde2 	bl	900097a0 <RCCEx_PLL3_Config>
90008bdc:	4603      	mov	r3, r0
90008bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008be2:	e004      	b.n	90008bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008be4:	2301      	movs	r3, #1
90008be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008bea:	e000      	b.n	90008bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008bec:	bf00      	nop
    }

    if (ret == HAL_OK)
90008bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bf2:	2b00      	cmp	r3, #0
90008bf4:	d10b      	bne.n	90008c0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008bf6:	4b4b      	ldr	r3, [pc, #300]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008bfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008c06:	4a47      	ldr	r2, [pc, #284]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c08:	430b      	orrs	r3, r1
90008c0a:	6593      	str	r3, [r2, #88]	@ 0x58
90008c0c:	e003      	b.n	90008c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008c22:	67bb      	str	r3, [r7, #120]	@ 0x78
90008c24:	2300      	movs	r3, #0
90008c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008c28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008c2c:	460b      	mov	r3, r1
90008c2e:	4313      	orrs	r3, r2
90008c30:	d03b      	beq.n	90008caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008c3e:	d01f      	beq.n	90008c80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008c40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008c44:	d818      	bhi.n	90008c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008c4a:	d003      	beq.n	90008c54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008c50:	d007      	beq.n	90008c62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008c52:	e011      	b.n	90008c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008c54:	4b33      	ldr	r3, [pc, #204]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008c58:	4a32      	ldr	r2, [pc, #200]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008c60:	e00f      	b.n	90008c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c66:	3328      	adds	r3, #40	@ 0x28
90008c68:	2101      	movs	r1, #1
90008c6a:	4618      	mov	r0, r3
90008c6c:	f000 fd98 	bl	900097a0 <RCCEx_PLL3_Config>
90008c70:	4603      	mov	r3, r0
90008c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008c76:	e004      	b.n	90008c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008c78:	2301      	movs	r3, #1
90008c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c7e:	e000      	b.n	90008c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008c80:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c86:	2b00      	cmp	r3, #0
90008c88:	d10b      	bne.n	90008ca2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008c8a:	4b26      	ldr	r3, [pc, #152]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008c9a:	4a22      	ldr	r2, [pc, #136]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c9c:	430b      	orrs	r3, r1
90008c9e:	6553      	str	r3, [r2, #84]	@ 0x54
90008ca0:	e003      	b.n	90008caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cae:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cb2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008cb6:	673b      	str	r3, [r7, #112]	@ 0x70
90008cb8:	2300      	movs	r3, #0
90008cba:	677b      	str	r3, [r7, #116]	@ 0x74
90008cbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008cc0:	460b      	mov	r3, r1
90008cc2:	4313      	orrs	r3, r2
90008cc4:	d034      	beq.n	90008d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008ccc:	2b00      	cmp	r3, #0
90008cce:	d003      	beq.n	90008cd8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008cd4:	d007      	beq.n	90008ce6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008cd6:	e011      	b.n	90008cfc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008cd8:	4b12      	ldr	r3, [pc, #72]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008cdc:	4a11      	ldr	r2, [pc, #68]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008ce4:	e00e      	b.n	90008d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cea:	3308      	adds	r3, #8
90008cec:	2102      	movs	r1, #2
90008cee:	4618      	mov	r0, r3
90008cf0:	f000 fca4 	bl	9000963c <RCCEx_PLL2_Config>
90008cf4:	4603      	mov	r3, r0
90008cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008cfa:	e003      	b.n	90008d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008cfc:	2301      	movs	r3, #1
90008cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d02:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d08:	2b00      	cmp	r3, #0
90008d0a:	d10d      	bne.n	90008d28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008d0c:	4b05      	ldr	r3, [pc, #20]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008d10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008d1a:	4a02      	ldr	r2, [pc, #8]	@ (90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d1c:	430b      	orrs	r3, r1
90008d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008d20:	e006      	b.n	90008d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008d22:	bf00      	nop
90008d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
90008d3e:	2300      	movs	r3, #0
90008d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008d42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008d46:	460b      	mov	r3, r1
90008d48:	4313      	orrs	r3, r2
90008d4a:	d00c      	beq.n	90008d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d50:	3328      	adds	r3, #40	@ 0x28
90008d52:	2102      	movs	r1, #2
90008d54:	4618      	mov	r0, r3
90008d56:	f000 fd23 	bl	900097a0 <RCCEx_PLL3_Config>
90008d5a:	4603      	mov	r3, r0
90008d5c:	2b00      	cmp	r3, #0
90008d5e:	d002      	beq.n	90008d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008d60:	2301      	movs	r3, #1
90008d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008d72:	663b      	str	r3, [r7, #96]	@ 0x60
90008d74:	2300      	movs	r3, #0
90008d76:	667b      	str	r3, [r7, #100]	@ 0x64
90008d78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008d7c:	460b      	mov	r3, r1
90008d7e:	4313      	orrs	r3, r2
90008d80:	d038      	beq.n	90008df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008d8e:	d018      	beq.n	90008dc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008d94:	d811      	bhi.n	90008dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008d9a:	d014      	beq.n	90008dc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008da0:	d80b      	bhi.n	90008dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008da2:	2b00      	cmp	r3, #0
90008da4:	d011      	beq.n	90008dca <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008daa:	d106      	bne.n	90008dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008dac:	4bc3      	ldr	r3, [pc, #780]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008db0:	4ac2      	ldr	r2, [pc, #776]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008db8:	e008      	b.n	90008dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008dba:	2301      	movs	r3, #1
90008dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008dc0:	e004      	b.n	90008dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008dc2:	bf00      	nop
90008dc4:	e002      	b.n	90008dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008dc6:	bf00      	nop
90008dc8:	e000      	b.n	90008dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008dca:	bf00      	nop
    }

    if (ret == HAL_OK)
90008dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dd0:	2b00      	cmp	r3, #0
90008dd2:	d10b      	bne.n	90008dec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008dd4:	4bb9      	ldr	r3, [pc, #740]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008dd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008de4:	4ab5      	ldr	r2, [pc, #724]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008de6:	430b      	orrs	r3, r1
90008de8:	6553      	str	r3, [r2, #84]	@ 0x54
90008dea:	e003      	b.n	90008df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
90008dfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008e00:	65bb      	str	r3, [r7, #88]	@ 0x58
90008e02:	2300      	movs	r3, #0
90008e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008e06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008e0a:	460b      	mov	r3, r1
90008e0c:	4313      	orrs	r3, r2
90008e0e:	d009      	beq.n	90008e24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008e10:	4baa      	ldr	r3, [pc, #680]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008e14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008e1e:	4aa7      	ldr	r2, [pc, #668]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e20:	430b      	orrs	r3, r1
90008e22:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008e30:	653b      	str	r3, [r7, #80]	@ 0x50
90008e32:	2300      	movs	r3, #0
90008e34:	657b      	str	r3, [r7, #84]	@ 0x54
90008e36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008e3a:	460b      	mov	r3, r1
90008e3c:	4313      	orrs	r3, r2
90008e3e:	d00a      	beq.n	90008e56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008e40:	4b9e      	ldr	r3, [pc, #632]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e42:	691b      	ldr	r3, [r3, #16]
90008e44:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008e50:	4a9a      	ldr	r2, [pc, #616]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e52:	430b      	orrs	r3, r1
90008e54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e5e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008e62:	64bb      	str	r3, [r7, #72]	@ 0x48
90008e64:	2300      	movs	r3, #0
90008e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008e68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008e6c:	460b      	mov	r3, r1
90008e6e:	4313      	orrs	r3, r2
90008e70:	d009      	beq.n	90008e86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008e72:	4b92      	ldr	r3, [pc, #584]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008e76:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008e80:	4a8e      	ldr	r2, [pc, #568]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e82:	430b      	orrs	r3, r1
90008e84:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008e92:	643b      	str	r3, [r7, #64]	@ 0x40
90008e94:	2300      	movs	r3, #0
90008e96:	647b      	str	r3, [r7, #68]	@ 0x44
90008e98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008e9c:	460b      	mov	r3, r1
90008e9e:	4313      	orrs	r3, r2
90008ea0:	d00e      	beq.n	90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008ea2:	4b86      	ldr	r3, [pc, #536]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ea4:	691b      	ldr	r3, [r3, #16]
90008ea6:	4a85      	ldr	r2, [pc, #532]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ea8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008eac:	6113      	str	r3, [r2, #16]
90008eae:	4b83      	ldr	r3, [pc, #524]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008eb0:	6919      	ldr	r1, [r3, #16]
90008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008eba:	4a80      	ldr	r2, [pc, #512]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ebc:	430b      	orrs	r3, r1
90008ebe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ec8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
90008ece:	2300      	movs	r3, #0
90008ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008ed2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008ed6:	460b      	mov	r3, r1
90008ed8:	4313      	orrs	r3, r2
90008eda:	d009      	beq.n	90008ef0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008edc:	4b77      	ldr	r3, [pc, #476]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008ee0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008eea:	4a74      	ldr	r2, [pc, #464]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008eec:	430b      	orrs	r3, r1
90008eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ef8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008efc:	633b      	str	r3, [r7, #48]	@ 0x30
90008efe:	2300      	movs	r3, #0
90008f00:	637b      	str	r3, [r7, #52]	@ 0x34
90008f02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008f06:	460b      	mov	r3, r1
90008f08:	4313      	orrs	r3, r2
90008f0a:	d00a      	beq.n	90008f22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008f0c:	4b6b      	ldr	r3, [pc, #428]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008f10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008f1c:	4a67      	ldr	r2, [pc, #412]	@ (900090bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f1e:	430b      	orrs	r3, r1
90008f20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f2a:	2100      	movs	r1, #0
90008f2c:	62b9      	str	r1, [r7, #40]	@ 0x28
90008f2e:	f003 0301 	and.w	r3, r3, #1
90008f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008f34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008f38:	460b      	mov	r3, r1
90008f3a:	4313      	orrs	r3, r2
90008f3c:	d011      	beq.n	90008f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f42:	3308      	adds	r3, #8
90008f44:	2100      	movs	r1, #0
90008f46:	4618      	mov	r0, r3
90008f48:	f000 fb78 	bl	9000963c <RCCEx_PLL2_Config>
90008f4c:	4603      	mov	r3, r0
90008f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f56:	2b00      	cmp	r3, #0
90008f58:	d003      	beq.n	90008f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f6a:	2100      	movs	r1, #0
90008f6c:	6239      	str	r1, [r7, #32]
90008f6e:	f003 0302 	and.w	r3, r3, #2
90008f72:	627b      	str	r3, [r7, #36]	@ 0x24
90008f74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008f78:	460b      	mov	r3, r1
90008f7a:	4313      	orrs	r3, r2
90008f7c:	d011      	beq.n	90008fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f82:	3308      	adds	r3, #8
90008f84:	2101      	movs	r1, #1
90008f86:	4618      	mov	r0, r3
90008f88:	f000 fb58 	bl	9000963c <RCCEx_PLL2_Config>
90008f8c:	4603      	mov	r3, r0
90008f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f96:	2b00      	cmp	r3, #0
90008f98:	d003      	beq.n	90008fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008faa:	2100      	movs	r1, #0
90008fac:	61b9      	str	r1, [r7, #24]
90008fae:	f003 0304 	and.w	r3, r3, #4
90008fb2:	61fb      	str	r3, [r7, #28]
90008fb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008fb8:	460b      	mov	r3, r1
90008fba:	4313      	orrs	r3, r2
90008fbc:	d011      	beq.n	90008fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fc2:	3308      	adds	r3, #8
90008fc4:	2102      	movs	r1, #2
90008fc6:	4618      	mov	r0, r3
90008fc8:	f000 fb38 	bl	9000963c <RCCEx_PLL2_Config>
90008fcc:	4603      	mov	r3, r0
90008fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fd6:	2b00      	cmp	r3, #0
90008fd8:	d003      	beq.n	90008fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fea:	2100      	movs	r1, #0
90008fec:	6139      	str	r1, [r7, #16]
90008fee:	f003 0308 	and.w	r3, r3, #8
90008ff2:	617b      	str	r3, [r7, #20]
90008ff4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008ff8:	460b      	mov	r3, r1
90008ffa:	4313      	orrs	r3, r2
90008ffc:	d011      	beq.n	90009022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009002:	3328      	adds	r3, #40	@ 0x28
90009004:	2100      	movs	r1, #0
90009006:	4618      	mov	r0, r3
90009008:	f000 fbca 	bl	900097a0 <RCCEx_PLL3_Config>
9000900c:	4603      	mov	r3, r0
9000900e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90009012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009016:	2b00      	cmp	r3, #0
90009018:	d003      	beq.n	90009022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000901a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000901e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009026:	e9d3 2300 	ldrd	r2, r3, [r3]
9000902a:	2100      	movs	r1, #0
9000902c:	60b9      	str	r1, [r7, #8]
9000902e:	f003 0310 	and.w	r3, r3, #16
90009032:	60fb      	str	r3, [r7, #12]
90009034:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90009038:	460b      	mov	r3, r1
9000903a:	4313      	orrs	r3, r2
9000903c:	d011      	beq.n	90009062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009042:	3328      	adds	r3, #40	@ 0x28
90009044:	2101      	movs	r1, #1
90009046:	4618      	mov	r0, r3
90009048:	f000 fbaa 	bl	900097a0 <RCCEx_PLL3_Config>
9000904c:	4603      	mov	r3, r0
9000904e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009056:	2b00      	cmp	r3, #0
90009058:	d003      	beq.n	90009062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000905a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000905e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90009062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009066:	e9d3 2300 	ldrd	r2, r3, [r3]
9000906a:	2100      	movs	r1, #0
9000906c:	6039      	str	r1, [r7, #0]
9000906e:	f003 0320 	and.w	r3, r3, #32
90009072:	607b      	str	r3, [r7, #4]
90009074:	e9d7 1200 	ldrd	r1, r2, [r7]
90009078:	460b      	mov	r3, r1
9000907a:	4313      	orrs	r3, r2
9000907c:	d011      	beq.n	900090a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000907e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009082:	3328      	adds	r3, #40	@ 0x28
90009084:	2102      	movs	r1, #2
90009086:	4618      	mov	r0, r3
90009088:	f000 fb8a 	bl	900097a0 <RCCEx_PLL3_Config>
9000908c:	4603      	mov	r3, r0
9000908e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009096:	2b00      	cmp	r3, #0
90009098:	d003      	beq.n	900090a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000909a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000909e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
900090a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
900090a6:	2b00      	cmp	r3, #0
900090a8:	d101      	bne.n	900090ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
900090aa:	2300      	movs	r3, #0
900090ac:	e000      	b.n	900090b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
900090ae:	2301      	movs	r3, #1
}
900090b0:	4618      	mov	r0, r3
900090b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
900090b6:	46bd      	mov	sp, r7
900090b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
900090bc:	58024400 	.word	0x58024400

900090c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
900090c0:	b580      	push	{r7, lr}
900090c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
900090c4:	f7fe fd96 	bl	90007bf4 <HAL_RCC_GetHCLKFreq>
900090c8:	4602      	mov	r2, r0
900090ca:	4b06      	ldr	r3, [pc, #24]	@ (900090e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
900090cc:	6a1b      	ldr	r3, [r3, #32]
900090ce:	091b      	lsrs	r3, r3, #4
900090d0:	f003 0307 	and.w	r3, r3, #7
900090d4:	4904      	ldr	r1, [pc, #16]	@ (900090e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
900090d6:	5ccb      	ldrb	r3, [r1, r3]
900090d8:	f003 031f 	and.w	r3, r3, #31
900090dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
900090e0:	4618      	mov	r0, r3
900090e2:	bd80      	pop	{r7, pc}
900090e4:	58024400 	.word	0x58024400
900090e8:	9000d884 	.word	0x9000d884

900090ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
900090ec:	b480      	push	{r7}
900090ee:	b089      	sub	sp, #36	@ 0x24
900090f0:	af00      	add	r7, sp, #0
900090f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900090f4:	4ba1      	ldr	r3, [pc, #644]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900090f8:	f003 0303 	and.w	r3, r3, #3
900090fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
900090fe:	4b9f      	ldr	r3, [pc, #636]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009102:	0b1b      	lsrs	r3, r3, #12
90009104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009108:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000910a:	4b9c      	ldr	r3, [pc, #624]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000910e:	091b      	lsrs	r3, r3, #4
90009110:	f003 0301 	and.w	r3, r3, #1
90009114:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90009116:	4b99      	ldr	r3, [pc, #612]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9000911a:	08db      	lsrs	r3, r3, #3
9000911c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009120:	693a      	ldr	r2, [r7, #16]
90009122:	fb02 f303 	mul.w	r3, r2, r3
90009126:	ee07 3a90 	vmov	s15, r3
9000912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000912e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90009132:	697b      	ldr	r3, [r7, #20]
90009134:	2b00      	cmp	r3, #0
90009136:	f000 8111 	beq.w	9000935c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
9000913a:	69bb      	ldr	r3, [r7, #24]
9000913c:	2b02      	cmp	r3, #2
9000913e:	f000 8083 	beq.w	90009248 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90009142:	69bb      	ldr	r3, [r7, #24]
90009144:	2b02      	cmp	r3, #2
90009146:	f200 80a1 	bhi.w	9000928c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
9000914a:	69bb      	ldr	r3, [r7, #24]
9000914c:	2b00      	cmp	r3, #0
9000914e:	d003      	beq.n	90009158 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90009150:	69bb      	ldr	r3, [r7, #24]
90009152:	2b01      	cmp	r3, #1
90009154:	d056      	beq.n	90009204 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90009156:	e099      	b.n	9000928c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009158:	4b88      	ldr	r3, [pc, #544]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000915a:	681b      	ldr	r3, [r3, #0]
9000915c:	f003 0320 	and.w	r3, r3, #32
90009160:	2b00      	cmp	r3, #0
90009162:	d02d      	beq.n	900091c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009164:	4b85      	ldr	r3, [pc, #532]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009166:	681b      	ldr	r3, [r3, #0]
90009168:	08db      	lsrs	r3, r3, #3
9000916a:	f003 0303 	and.w	r3, r3, #3
9000916e:	4a84      	ldr	r2, [pc, #528]	@ (90009380 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90009170:	fa22 f303 	lsr.w	r3, r2, r3
90009174:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009176:	68bb      	ldr	r3, [r7, #8]
90009178:	ee07 3a90 	vmov	s15, r3
9000917c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009180:	697b      	ldr	r3, [r7, #20]
90009182:	ee07 3a90 	vmov	s15, r3
90009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000918a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000918e:	4b7b      	ldr	r3, [pc, #492]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009192:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009196:	ee07 3a90 	vmov	s15, r3
9000919a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000919e:	ed97 6a03 	vldr	s12, [r7, #12]
900091a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900091a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900091aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
900091ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900091b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900091b6:	ee67 7a27 	vmul.f32	s15, s14, s15
900091ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
900091be:	e087      	b.n	900092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900091c0:	697b      	ldr	r3, [r7, #20]
900091c2:	ee07 3a90 	vmov	s15, r3
900091c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009388 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
900091ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091d2:	4b6a      	ldr	r3, [pc, #424]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091da:	ee07 3a90 	vmov	s15, r3
900091de:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091e2:	ed97 6a03 	vldr	s12, [r7, #12]
900091e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900091ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
900091ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
900091f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900091f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900091fa:	ee67 7a27 	vmul.f32	s15, s14, s15
900091fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009202:	e065      	b.n	900092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009204:	697b      	ldr	r3, [r7, #20]
90009206:	ee07 3a90 	vmov	s15, r3
9000920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000920e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 9000938c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90009212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009216:	4b59      	ldr	r3, [pc, #356]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000921a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000921e:	ee07 3a90 	vmov	s15, r3
90009222:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009226:	ed97 6a03 	vldr	s12, [r7, #12]
9000922a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000922e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009232:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000923a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000923e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009246:	e043      	b.n	900092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009248:	697b      	ldr	r3, [r7, #20]
9000924a:	ee07 3a90 	vmov	s15, r3
9000924e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009252:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90009256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000925a:	4b48      	ldr	r3, [pc, #288]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009262:	ee07 3a90 	vmov	s15, r3
90009266:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000926a:	ed97 6a03 	vldr	s12, [r7, #12]
9000926e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009272:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009276:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000927a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000927e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009282:	ee67 7a27 	vmul.f32	s15, s14, s15
90009286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000928a:	e021      	b.n	900092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000928c:	697b      	ldr	r3, [r7, #20]
9000928e:	ee07 3a90 	vmov	s15, r3
90009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009296:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 9000938c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000929a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000929e:	4b37      	ldr	r3, [pc, #220]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900092a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900092a6:	ee07 3a90 	vmov	s15, r3
900092aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
900092ae:	ed97 6a03 	vldr	s12, [r7, #12]
900092b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900092b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900092ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
900092be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900092c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900092c6:	ee67 7a27 	vmul.f32	s15, s14, s15
900092ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900092ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
900092d0:	4b2a      	ldr	r3, [pc, #168]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900092d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900092d4:	0a5b      	lsrs	r3, r3, #9
900092d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900092da:	ee07 3a90 	vmov	s15, r3
900092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900092e6:	ee37 7a87 	vadd.f32	s14, s15, s14
900092ea:	edd7 6a07 	vldr	s13, [r7, #28]
900092ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
900092f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900092f6:	ee17 2a90 	vmov	r2, s15
900092fa:	687b      	ldr	r3, [r7, #4]
900092fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
900092fe:	4b1f      	ldr	r3, [pc, #124]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009302:	0c1b      	lsrs	r3, r3, #16
90009304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009308:	ee07 3a90 	vmov	s15, r3
9000930c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009314:	ee37 7a87 	vadd.f32	s14, s15, s14
90009318:	edd7 6a07 	vldr	s13, [r7, #28]
9000931c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009324:	ee17 2a90 	vmov	r2, s15
90009328:	687b      	ldr	r3, [r7, #4]
9000932a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000932c:	4b13      	ldr	r3, [pc, #76]	@ (9000937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009330:	0e1b      	lsrs	r3, r3, #24
90009332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009336:	ee07 3a90 	vmov	s15, r3
9000933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000933e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009342:	ee37 7a87 	vadd.f32	s14, s15, s14
90009346:	edd7 6a07 	vldr	s13, [r7, #28]
9000934a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000934e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009352:	ee17 2a90 	vmov	r2, s15
90009356:	687b      	ldr	r3, [r7, #4]
90009358:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
9000935a:	e008      	b.n	9000936e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
9000935c:	687b      	ldr	r3, [r7, #4]
9000935e:	2200      	movs	r2, #0
90009360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90009362:	687b      	ldr	r3, [r7, #4]
90009364:	2200      	movs	r2, #0
90009366:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009368:	687b      	ldr	r3, [r7, #4]
9000936a:	2200      	movs	r2, #0
9000936c:	609a      	str	r2, [r3, #8]
}
9000936e:	bf00      	nop
90009370:	3724      	adds	r7, #36	@ 0x24
90009372:	46bd      	mov	sp, r7
90009374:	f85d 7b04 	ldr.w	r7, [sp], #4
90009378:	4770      	bx	lr
9000937a:	bf00      	nop
9000937c:	58024400 	.word	0x58024400
90009380:	03d09000 	.word	0x03d09000
90009384:	46000000 	.word	0x46000000
90009388:	4c742400 	.word	0x4c742400
9000938c:	4a742400 	.word	0x4a742400
90009390:	4bbebc20 	.word	0x4bbebc20

90009394 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90009394:	b480      	push	{r7}
90009396:	b089      	sub	sp, #36	@ 0x24
90009398:	af00      	add	r7, sp, #0
9000939a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000939c:	4ba1      	ldr	r3, [pc, #644]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000939e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900093a0:	f003 0303 	and.w	r3, r3, #3
900093a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
900093a6:	4b9f      	ldr	r3, [pc, #636]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900093aa:	0d1b      	lsrs	r3, r3, #20
900093ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900093b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
900093b2:	4b9c      	ldr	r3, [pc, #624]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900093b6:	0a1b      	lsrs	r3, r3, #8
900093b8:	f003 0301 	and.w	r3, r3, #1
900093bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
900093be:	4b99      	ldr	r3, [pc, #612]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900093c2:	08db      	lsrs	r3, r3, #3
900093c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
900093c8:	693a      	ldr	r2, [r7, #16]
900093ca:	fb02 f303 	mul.w	r3, r2, r3
900093ce:	ee07 3a90 	vmov	s15, r3
900093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
900093da:	697b      	ldr	r3, [r7, #20]
900093dc:	2b00      	cmp	r3, #0
900093de:	f000 8111 	beq.w	90009604 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
900093e2:	69bb      	ldr	r3, [r7, #24]
900093e4:	2b02      	cmp	r3, #2
900093e6:	f000 8083 	beq.w	900094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
900093ea:	69bb      	ldr	r3, [r7, #24]
900093ec:	2b02      	cmp	r3, #2
900093ee:	f200 80a1 	bhi.w	90009534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
900093f2:	69bb      	ldr	r3, [r7, #24]
900093f4:	2b00      	cmp	r3, #0
900093f6:	d003      	beq.n	90009400 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
900093f8:	69bb      	ldr	r3, [r7, #24]
900093fa:	2b01      	cmp	r3, #1
900093fc:	d056      	beq.n	900094ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
900093fe:	e099      	b.n	90009534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009400:	4b88      	ldr	r3, [pc, #544]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009402:	681b      	ldr	r3, [r3, #0]
90009404:	f003 0320 	and.w	r3, r3, #32
90009408:	2b00      	cmp	r3, #0
9000940a:	d02d      	beq.n	90009468 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000940c:	4b85      	ldr	r3, [pc, #532]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000940e:	681b      	ldr	r3, [r3, #0]
90009410:	08db      	lsrs	r3, r3, #3
90009412:	f003 0303 	and.w	r3, r3, #3
90009416:	4a84      	ldr	r2, [pc, #528]	@ (90009628 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90009418:	fa22 f303 	lsr.w	r3, r2, r3
9000941c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000941e:	68bb      	ldr	r3, [r7, #8]
90009420:	ee07 3a90 	vmov	s15, r3
90009424:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009428:	697b      	ldr	r3, [r7, #20]
9000942a:	ee07 3a90 	vmov	s15, r3
9000942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009436:	4b7b      	ldr	r3, [pc, #492]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000943e:	ee07 3a90 	vmov	s15, r3
90009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009446:	ed97 6a03 	vldr	s12, [r7, #12]
9000944a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 9000962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000945e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009466:	e087      	b.n	90009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009468:	697b      	ldr	r3, [r7, #20]
9000946a:	ee07 3a90 	vmov	s15, r3
9000946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009472:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009630 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
90009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000947a:	4b6a      	ldr	r3, [pc, #424]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000947c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009482:	ee07 3a90 	vmov	s15, r3
90009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000948a:	ed97 6a03 	vldr	s12, [r7, #12]
9000948e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 9000962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000949a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
900094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
900094a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900094aa:	e065      	b.n	90009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900094ac:	697b      	ldr	r3, [r7, #20]
900094ae:	ee07 3a90 	vmov	s15, r3
900094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
900094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900094be:	4b59      	ldr	r3, [pc, #356]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900094c6:	ee07 3a90 	vmov	s15, r3
900094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
900094ce:	ed97 6a03 	vldr	s12, [r7, #12]
900094d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 9000962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
900094de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
900094ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900094ee:	e043      	b.n	90009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900094f0:	697b      	ldr	r3, [r7, #20]
900094f2:	ee07 3a90 	vmov	s15, r3
900094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
900094fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009502:	4b48      	ldr	r3, [pc, #288]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000950a:	ee07 3a90 	vmov	s15, r3
9000950e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009512:	ed97 6a03 	vldr	s12, [r7, #12]
90009516:	eddf 5a45 	vldr	s11, [pc, #276]	@ 9000962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000951a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000951e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000952a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000952e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009532:	e021      	b.n	90009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009534:	697b      	ldr	r3, [r7, #20]
90009536:	ee07 3a90 	vmov	s15, r3
9000953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000953e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009546:	4b37      	ldr	r3, [pc, #220]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000954a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000954e:	ee07 3a90 	vmov	s15, r3
90009552:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009556:	ed97 6a03 	vldr	s12, [r7, #12]
9000955a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 9000962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000955e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009562:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000956a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000956e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009576:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90009578:	4b2a      	ldr	r3, [pc, #168]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000957a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000957c:	0a5b      	lsrs	r3, r3, #9
9000957e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009582:	ee07 3a90 	vmov	s15, r3
90009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000958a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000958e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009592:	edd7 6a07 	vldr	s13, [r7, #28]
90009596:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000959a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000959e:	ee17 2a90 	vmov	r2, s15
900095a2:	687b      	ldr	r3, [r7, #4]
900095a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
900095a6:	4b1f      	ldr	r3, [pc, #124]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900095a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900095aa:	0c1b      	lsrs	r3, r3, #16
900095ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900095b0:	ee07 3a90 	vmov	s15, r3
900095b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
900095b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900095bc:	ee37 7a87 	vadd.f32	s14, s15, s14
900095c0:	edd7 6a07 	vldr	s13, [r7, #28]
900095c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
900095c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900095cc:	ee17 2a90 	vmov	r2, s15
900095d0:	687b      	ldr	r3, [r7, #4]
900095d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
900095d4:	4b13      	ldr	r3, [pc, #76]	@ (90009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900095d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900095d8:	0e1b      	lsrs	r3, r3, #24
900095da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900095de:	ee07 3a90 	vmov	s15, r3
900095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900095e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900095ea:	ee37 7a87 	vadd.f32	s14, s15, s14
900095ee:	edd7 6a07 	vldr	s13, [r7, #28]
900095f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
900095f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900095fa:	ee17 2a90 	vmov	r2, s15
900095fe:	687b      	ldr	r3, [r7, #4]
90009600:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90009602:	e008      	b.n	90009616 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90009604:	687b      	ldr	r3, [r7, #4]
90009606:	2200      	movs	r2, #0
90009608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000960a:	687b      	ldr	r3, [r7, #4]
9000960c:	2200      	movs	r2, #0
9000960e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90009610:	687b      	ldr	r3, [r7, #4]
90009612:	2200      	movs	r2, #0
90009614:	609a      	str	r2, [r3, #8]
}
90009616:	bf00      	nop
90009618:	3724      	adds	r7, #36	@ 0x24
9000961a:	46bd      	mov	sp, r7
9000961c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009620:	4770      	bx	lr
90009622:	bf00      	nop
90009624:	58024400 	.word	0x58024400
90009628:	03d09000 	.word	0x03d09000
9000962c:	46000000 	.word	0x46000000
90009630:	4c742400 	.word	0x4c742400
90009634:	4a742400 	.word	0x4a742400
90009638:	4bbebc20 	.word	0x4bbebc20

9000963c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000963c:	b580      	push	{r7, lr}
9000963e:	b084      	sub	sp, #16
90009640:	af00      	add	r7, sp, #0
90009642:	6078      	str	r0, [r7, #4]
90009644:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009646:	2300      	movs	r3, #0
90009648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000964a:	4b53      	ldr	r3, [pc, #332]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
9000964c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000964e:	f003 0303 	and.w	r3, r3, #3
90009652:	2b03      	cmp	r3, #3
90009654:	d101      	bne.n	9000965a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90009656:	2301      	movs	r3, #1
90009658:	e099      	b.n	9000978e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000965a:	4b4f      	ldr	r3, [pc, #316]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
9000965c:	681b      	ldr	r3, [r3, #0]
9000965e:	4a4e      	ldr	r2, [pc, #312]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009660:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009666:	f7f9 fe93 	bl	90003390 <HAL_GetTick>
9000966a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000966c:	e008      	b.n	90009680 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000966e:	f7f9 fe8f 	bl	90003390 <HAL_GetTick>
90009672:	4602      	mov	r2, r0
90009674:	68bb      	ldr	r3, [r7, #8]
90009676:	1ad3      	subs	r3, r2, r3
90009678:	2b02      	cmp	r3, #2
9000967a:	d901      	bls.n	90009680 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000967c:	2303      	movs	r3, #3
9000967e:	e086      	b.n	9000978e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009680:	4b45      	ldr	r3, [pc, #276]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009682:	681b      	ldr	r3, [r3, #0]
90009684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009688:	2b00      	cmp	r3, #0
9000968a:	d1f0      	bne.n	9000966e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000968c:	4b42      	ldr	r3, [pc, #264]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
9000968e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009690:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009694:	687b      	ldr	r3, [r7, #4]
90009696:	681b      	ldr	r3, [r3, #0]
90009698:	031b      	lsls	r3, r3, #12
9000969a:	493f      	ldr	r1, [pc, #252]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
9000969c:	4313      	orrs	r3, r2
9000969e:	628b      	str	r3, [r1, #40]	@ 0x28
900096a0:	687b      	ldr	r3, [r7, #4]
900096a2:	685b      	ldr	r3, [r3, #4]
900096a4:	3b01      	subs	r3, #1
900096a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
900096aa:	687b      	ldr	r3, [r7, #4]
900096ac:	689b      	ldr	r3, [r3, #8]
900096ae:	3b01      	subs	r3, #1
900096b0:	025b      	lsls	r3, r3, #9
900096b2:	b29b      	uxth	r3, r3
900096b4:	431a      	orrs	r2, r3
900096b6:	687b      	ldr	r3, [r7, #4]
900096b8:	68db      	ldr	r3, [r3, #12]
900096ba:	3b01      	subs	r3, #1
900096bc:	041b      	lsls	r3, r3, #16
900096be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900096c2:	431a      	orrs	r2, r3
900096c4:	687b      	ldr	r3, [r7, #4]
900096c6:	691b      	ldr	r3, [r3, #16]
900096c8:	3b01      	subs	r3, #1
900096ca:	061b      	lsls	r3, r3, #24
900096cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900096d0:	4931      	ldr	r1, [pc, #196]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
900096d2:	4313      	orrs	r3, r2
900096d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
900096d6:	4b30      	ldr	r3, [pc, #192]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
900096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
900096de:	687b      	ldr	r3, [r7, #4]
900096e0:	695b      	ldr	r3, [r3, #20]
900096e2:	492d      	ldr	r1, [pc, #180]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
900096e4:	4313      	orrs	r3, r2
900096e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
900096e8:	4b2b      	ldr	r3, [pc, #172]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
900096ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096ec:	f023 0220 	bic.w	r2, r3, #32
900096f0:	687b      	ldr	r3, [r7, #4]
900096f2:	699b      	ldr	r3, [r3, #24]
900096f4:	4928      	ldr	r1, [pc, #160]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
900096f6:	4313      	orrs	r3, r2
900096f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
900096fa:	4b27      	ldr	r3, [pc, #156]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
900096fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096fe:	4a26      	ldr	r2, [pc, #152]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009700:	f023 0310 	bic.w	r3, r3, #16
90009704:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90009706:	4b24      	ldr	r3, [pc, #144]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000970a:	4b24      	ldr	r3, [pc, #144]	@ (9000979c <RCCEx_PLL2_Config+0x160>)
9000970c:	4013      	ands	r3, r2
9000970e:	687a      	ldr	r2, [r7, #4]
90009710:	69d2      	ldr	r2, [r2, #28]
90009712:	00d2      	lsls	r2, r2, #3
90009714:	4920      	ldr	r1, [pc, #128]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009716:	4313      	orrs	r3, r2
90009718:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000971a:	4b1f      	ldr	r3, [pc, #124]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
9000971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000971e:	4a1e      	ldr	r2, [pc, #120]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009720:	f043 0310 	orr.w	r3, r3, #16
90009724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009726:	683b      	ldr	r3, [r7, #0]
90009728:	2b00      	cmp	r3, #0
9000972a:	d106      	bne.n	9000973a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000972c:	4b1a      	ldr	r3, [pc, #104]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
9000972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009730:	4a19      	ldr	r2, [pc, #100]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
90009736:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009738:	e00f      	b.n	9000975a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000973a:	683b      	ldr	r3, [r7, #0]
9000973c:	2b01      	cmp	r3, #1
9000973e:	d106      	bne.n	9000974e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90009740:	4b15      	ldr	r3, [pc, #84]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009744:	4a14      	ldr	r2, [pc, #80]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000974a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000974c:	e005      	b.n	9000975a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000974e:	4b12      	ldr	r3, [pc, #72]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009752:	4a11      	ldr	r2, [pc, #68]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009754:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
90009758:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000975a:	4b0f      	ldr	r3, [pc, #60]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
9000975c:	681b      	ldr	r3, [r3, #0]
9000975e:	4a0e      	ldr	r2, [pc, #56]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009760:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009766:	f7f9 fe13 	bl	90003390 <HAL_GetTick>
9000976a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000976c:	e008      	b.n	90009780 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000976e:	f7f9 fe0f 	bl	90003390 <HAL_GetTick>
90009772:	4602      	mov	r2, r0
90009774:	68bb      	ldr	r3, [r7, #8]
90009776:	1ad3      	subs	r3, r2, r3
90009778:	2b02      	cmp	r3, #2
9000977a:	d901      	bls.n	90009780 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000977c:	2303      	movs	r3, #3
9000977e:	e006      	b.n	9000978e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009780:	4b05      	ldr	r3, [pc, #20]	@ (90009798 <RCCEx_PLL2_Config+0x15c>)
90009782:	681b      	ldr	r3, [r3, #0]
90009784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009788:	2b00      	cmp	r3, #0
9000978a:	d0f0      	beq.n	9000976e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000978c:	7bfb      	ldrb	r3, [r7, #15]
}
9000978e:	4618      	mov	r0, r3
90009790:	3710      	adds	r7, #16
90009792:	46bd      	mov	sp, r7
90009794:	bd80      	pop	{r7, pc}
90009796:	bf00      	nop
90009798:	58024400 	.word	0x58024400
9000979c:	ffff0007 	.word	0xffff0007

900097a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
900097a0:	b580      	push	{r7, lr}
900097a2:	b084      	sub	sp, #16
900097a4:	af00      	add	r7, sp, #0
900097a6:	6078      	str	r0, [r7, #4]
900097a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900097aa:	2300      	movs	r3, #0
900097ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900097ae:	4b53      	ldr	r3, [pc, #332]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900097b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900097b2:	f003 0303 	and.w	r3, r3, #3
900097b6:	2b03      	cmp	r3, #3
900097b8:	d101      	bne.n	900097be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
900097ba:	2301      	movs	r3, #1
900097bc:	e099      	b.n	900098f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
900097be:	4b4f      	ldr	r3, [pc, #316]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900097c0:	681b      	ldr	r3, [r3, #0]
900097c2:	4a4e      	ldr	r2, [pc, #312]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900097c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
900097c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900097ca:	f7f9 fde1 	bl	90003390 <HAL_GetTick>
900097ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900097d0:	e008      	b.n	900097e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
900097d2:	f7f9 fddd 	bl	90003390 <HAL_GetTick>
900097d6:	4602      	mov	r2, r0
900097d8:	68bb      	ldr	r3, [r7, #8]
900097da:	1ad3      	subs	r3, r2, r3
900097dc:	2b02      	cmp	r3, #2
900097de:	d901      	bls.n	900097e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
900097e0:	2303      	movs	r3, #3
900097e2:	e086      	b.n	900098f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900097e4:	4b45      	ldr	r3, [pc, #276]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900097e6:	681b      	ldr	r3, [r3, #0]
900097e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900097ec:	2b00      	cmp	r3, #0
900097ee:	d1f0      	bne.n	900097d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
900097f0:	4b42      	ldr	r3, [pc, #264]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900097f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900097f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
900097f8:	687b      	ldr	r3, [r7, #4]
900097fa:	681b      	ldr	r3, [r3, #0]
900097fc:	051b      	lsls	r3, r3, #20
900097fe:	493f      	ldr	r1, [pc, #252]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009800:	4313      	orrs	r3, r2
90009802:	628b      	str	r3, [r1, #40]	@ 0x28
90009804:	687b      	ldr	r3, [r7, #4]
90009806:	685b      	ldr	r3, [r3, #4]
90009808:	3b01      	subs	r3, #1
9000980a:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000980e:	687b      	ldr	r3, [r7, #4]
90009810:	689b      	ldr	r3, [r3, #8]
90009812:	3b01      	subs	r3, #1
90009814:	025b      	lsls	r3, r3, #9
90009816:	b29b      	uxth	r3, r3
90009818:	431a      	orrs	r2, r3
9000981a:	687b      	ldr	r3, [r7, #4]
9000981c:	68db      	ldr	r3, [r3, #12]
9000981e:	3b01      	subs	r3, #1
90009820:	041b      	lsls	r3, r3, #16
90009822:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009826:	431a      	orrs	r2, r3
90009828:	687b      	ldr	r3, [r7, #4]
9000982a:	691b      	ldr	r3, [r3, #16]
9000982c:	3b01      	subs	r3, #1
9000982e:	061b      	lsls	r3, r3, #24
90009830:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009834:	4931      	ldr	r1, [pc, #196]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009836:	4313      	orrs	r3, r2
90009838:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000983a:	4b30      	ldr	r3, [pc, #192]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
9000983c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000983e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
90009842:	687b      	ldr	r3, [r7, #4]
90009844:	695b      	ldr	r3, [r3, #20]
90009846:	492d      	ldr	r1, [pc, #180]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009848:	4313      	orrs	r3, r2
9000984a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000984c:	4b2b      	ldr	r3, [pc, #172]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
9000984e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009850:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90009854:	687b      	ldr	r3, [r7, #4]
90009856:	699b      	ldr	r3, [r3, #24]
90009858:	4928      	ldr	r1, [pc, #160]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
9000985a:	4313      	orrs	r3, r2
9000985c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000985e:	4b27      	ldr	r3, [pc, #156]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009862:	4a26      	ldr	r2, [pc, #152]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90009868:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000986a:	4b24      	ldr	r3, [pc, #144]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
9000986c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000986e:	4b24      	ldr	r3, [pc, #144]	@ (90009900 <RCCEx_PLL3_Config+0x160>)
90009870:	4013      	ands	r3, r2
90009872:	687a      	ldr	r2, [r7, #4]
90009874:	69d2      	ldr	r2, [r2, #28]
90009876:	00d2      	lsls	r2, r2, #3
90009878:	4920      	ldr	r1, [pc, #128]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
9000987a:	4313      	orrs	r3, r2
9000987c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000987e:	4b1f      	ldr	r3, [pc, #124]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009882:	4a1e      	ldr	r2, [pc, #120]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90009888:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000988a:	683b      	ldr	r3, [r7, #0]
9000988c:	2b00      	cmp	r3, #0
9000988e:	d106      	bne.n	9000989e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90009890:	4b1a      	ldr	r3, [pc, #104]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009894:	4a19      	ldr	r2, [pc, #100]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
90009896:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000989a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000989c:	e00f      	b.n	900098be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000989e:	683b      	ldr	r3, [r7, #0]
900098a0:	2b01      	cmp	r3, #1
900098a2:	d106      	bne.n	900098b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
900098a4:	4b15      	ldr	r3, [pc, #84]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900098a8:	4a14      	ldr	r2, [pc, #80]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900098aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
900098ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
900098b0:	e005      	b.n	900098be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
900098b2:	4b12      	ldr	r3, [pc, #72]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900098b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900098b6:	4a11      	ldr	r2, [pc, #68]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900098b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900098bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
900098be:	4b0f      	ldr	r3, [pc, #60]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900098c0:	681b      	ldr	r3, [r3, #0]
900098c2:	4a0e      	ldr	r2, [pc, #56]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900098c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
900098c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900098ca:	f7f9 fd61 	bl	90003390 <HAL_GetTick>
900098ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900098d0:	e008      	b.n	900098e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
900098d2:	f7f9 fd5d 	bl	90003390 <HAL_GetTick>
900098d6:	4602      	mov	r2, r0
900098d8:	68bb      	ldr	r3, [r7, #8]
900098da:	1ad3      	subs	r3, r2, r3
900098dc:	2b02      	cmp	r3, #2
900098de:	d901      	bls.n	900098e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
900098e0:	2303      	movs	r3, #3
900098e2:	e006      	b.n	900098f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900098e4:	4b05      	ldr	r3, [pc, #20]	@ (900098fc <RCCEx_PLL3_Config+0x15c>)
900098e6:	681b      	ldr	r3, [r3, #0]
900098e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900098ec:	2b00      	cmp	r3, #0
900098ee:	d0f0      	beq.n	900098d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
900098f0:	7bfb      	ldrb	r3, [r7, #15]
}
900098f2:	4618      	mov	r0, r3
900098f4:	3710      	adds	r7, #16
900098f6:	46bd      	mov	sp, r7
900098f8:	bd80      	pop	{r7, pc}
900098fa:	bf00      	nop
900098fc:	58024400 	.word	0x58024400
90009900:	ffff0007 	.word	0xffff0007

90009904 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009904:	b580      	push	{r7, lr}
90009906:	b082      	sub	sp, #8
90009908:	af00      	add	r7, sp, #0
9000990a:	6078      	str	r0, [r7, #4]
9000990c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000990e:	687b      	ldr	r3, [r7, #4]
90009910:	2b00      	cmp	r3, #0
90009912:	d101      	bne.n	90009918 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90009914:	2301      	movs	r3, #1
90009916:	e02b      	b.n	90009970 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
90009918:	687b      	ldr	r3, [r7, #4]
9000991a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000991e:	b2db      	uxtb	r3, r3
90009920:	2b00      	cmp	r3, #0
90009922:	d106      	bne.n	90009932 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90009924:	687b      	ldr	r3, [r7, #4]
90009926:	2200      	movs	r2, #0
90009928:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
9000992c:	6878      	ldr	r0, [r7, #4]
9000992e:	f000 f825 	bl	9000997c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90009932:	687b      	ldr	r3, [r7, #4]
90009934:	2202      	movs	r2, #2
90009936:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000993a:	687b      	ldr	r3, [r7, #4]
9000993c:	681a      	ldr	r2, [r3, #0]
9000993e:	687b      	ldr	r3, [r7, #4]
90009940:	3304      	adds	r3, #4
90009942:	4619      	mov	r1, r3
90009944:	4610      	mov	r0, r2
90009946:	f001 fb51 	bl	9000afec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000994a:	687b      	ldr	r3, [r7, #4]
9000994c:	6818      	ldr	r0, [r3, #0]
9000994e:	687b      	ldr	r3, [r7, #4]
90009950:	685b      	ldr	r3, [r3, #4]
90009952:	461a      	mov	r2, r3
90009954:	6839      	ldr	r1, [r7, #0]
90009956:	f001 fba5 	bl	9000b0a4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000995a:	4b07      	ldr	r3, [pc, #28]	@ (90009978 <HAL_SDRAM_Init+0x74>)
9000995c:	681b      	ldr	r3, [r3, #0]
9000995e:	4a06      	ldr	r2, [pc, #24]	@ (90009978 <HAL_SDRAM_Init+0x74>)
90009960:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009964:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009966:	687b      	ldr	r3, [r7, #4]
90009968:	2201      	movs	r2, #1
9000996a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000996e:	2300      	movs	r3, #0
}
90009970:	4618      	mov	r0, r3
90009972:	3708      	adds	r7, #8
90009974:	46bd      	mov	sp, r7
90009976:	bd80      	pop	{r7, pc}
90009978:	52004000 	.word	0x52004000

9000997c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
9000997c:	b480      	push	{r7}
9000997e:	b083      	sub	sp, #12
90009980:	af00      	add	r7, sp, #0
90009982:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009984:	bf00      	nop
90009986:	370c      	adds	r7, #12
90009988:	46bd      	mov	sp, r7
9000998a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000998e:	4770      	bx	lr

90009990 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90009990:	b580      	push	{r7, lr}
90009992:	b086      	sub	sp, #24
90009994:	af00      	add	r7, sp, #0
90009996:	60f8      	str	r0, [r7, #12]
90009998:	60b9      	str	r1, [r7, #8]
9000999a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000999c:	68fb      	ldr	r3, [r7, #12]
9000999e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900099a2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900099a4:	7dfb      	ldrb	r3, [r7, #23]
900099a6:	2b02      	cmp	r3, #2
900099a8:	d101      	bne.n	900099ae <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
900099aa:	2302      	movs	r3, #2
900099ac:	e021      	b.n	900099f2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
900099ae:	7dfb      	ldrb	r3, [r7, #23]
900099b0:	2b01      	cmp	r3, #1
900099b2:	d002      	beq.n	900099ba <HAL_SDRAM_SendCommand+0x2a>
900099b4:	7dfb      	ldrb	r3, [r7, #23]
900099b6:	2b05      	cmp	r3, #5
900099b8:	d118      	bne.n	900099ec <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900099ba:	68fb      	ldr	r3, [r7, #12]
900099bc:	2202      	movs	r2, #2
900099be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900099c2:	68fb      	ldr	r3, [r7, #12]
900099c4:	681b      	ldr	r3, [r3, #0]
900099c6:	687a      	ldr	r2, [r7, #4]
900099c8:	68b9      	ldr	r1, [r7, #8]
900099ca:	4618      	mov	r0, r3
900099cc:	f001 fbd4 	bl	9000b178 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900099d0:	68bb      	ldr	r3, [r7, #8]
900099d2:	681b      	ldr	r3, [r3, #0]
900099d4:	2b02      	cmp	r3, #2
900099d6:	d104      	bne.n	900099e2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
900099d8:	68fb      	ldr	r3, [r7, #12]
900099da:	2205      	movs	r2, #5
900099dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900099e0:	e006      	b.n	900099f0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
900099e2:	68fb      	ldr	r3, [r7, #12]
900099e4:	2201      	movs	r2, #1
900099e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900099ea:	e001      	b.n	900099f0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
900099ec:	2301      	movs	r3, #1
900099ee:	e000      	b.n	900099f2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
900099f0:	2300      	movs	r3, #0
}
900099f2:	4618      	mov	r0, r3
900099f4:	3718      	adds	r7, #24
900099f6:	46bd      	mov	sp, r7
900099f8:	bd80      	pop	{r7, pc}

900099fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
900099fa:	b580      	push	{r7, lr}
900099fc:	b082      	sub	sp, #8
900099fe:	af00      	add	r7, sp, #0
90009a00:	6078      	str	r0, [r7, #4]
90009a02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009a04:	687b      	ldr	r3, [r7, #4]
90009a06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009a0a:	b2db      	uxtb	r3, r3
90009a0c:	2b02      	cmp	r3, #2
90009a0e:	d101      	bne.n	90009a14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90009a10:	2302      	movs	r3, #2
90009a12:	e016      	b.n	90009a42 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90009a14:	687b      	ldr	r3, [r7, #4]
90009a16:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009a1a:	b2db      	uxtb	r3, r3
90009a1c:	2b01      	cmp	r3, #1
90009a1e:	d10f      	bne.n	90009a40 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009a20:	687b      	ldr	r3, [r7, #4]
90009a22:	2202      	movs	r2, #2
90009a24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90009a28:	687b      	ldr	r3, [r7, #4]
90009a2a:	681b      	ldr	r3, [r3, #0]
90009a2c:	6839      	ldr	r1, [r7, #0]
90009a2e:	4618      	mov	r0, r3
90009a30:	f001 fbc6 	bl	9000b1c0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90009a34:	687b      	ldr	r3, [r7, #4]
90009a36:	2201      	movs	r2, #1
90009a38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90009a3c:	2300      	movs	r3, #0
90009a3e:	e000      	b.n	90009a42 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90009a40:	2301      	movs	r3, #1
}
90009a42:	4618      	mov	r0, r3
90009a44:	3708      	adds	r7, #8
90009a46:	46bd      	mov	sp, r7
90009a48:	bd80      	pop	{r7, pc}

90009a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
90009a4a:	b580      	push	{r7, lr}
90009a4c:	b082      	sub	sp, #8
90009a4e:	af00      	add	r7, sp, #0
90009a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90009a52:	687b      	ldr	r3, [r7, #4]
90009a54:	2b00      	cmp	r3, #0
90009a56:	d101      	bne.n	90009a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
90009a58:	2301      	movs	r3, #1
90009a5a:	e049      	b.n	90009af0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90009a5c:	687b      	ldr	r3, [r7, #4]
90009a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009a62:	b2db      	uxtb	r3, r3
90009a64:	2b00      	cmp	r3, #0
90009a66:	d106      	bne.n	90009a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009a68:	687b      	ldr	r3, [r7, #4]
90009a6a:	2200      	movs	r2, #0
90009a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90009a70:	6878      	ldr	r0, [r7, #4]
90009a72:	f000 f89d 	bl	90009bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90009a76:	687b      	ldr	r3, [r7, #4]
90009a78:	2202      	movs	r2, #2
90009a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90009a7e:	687b      	ldr	r3, [r7, #4]
90009a80:	681a      	ldr	r2, [r3, #0]
90009a82:	687b      	ldr	r3, [r7, #4]
90009a84:	3304      	adds	r3, #4
90009a86:	4619      	mov	r1, r3
90009a88:	4610      	mov	r0, r2
90009a8a:	f000 f8a5 	bl	90009bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90009a8e:	687b      	ldr	r3, [r7, #4]
90009a90:	2201      	movs	r2, #1
90009a92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009a96:	687b      	ldr	r3, [r7, #4]
90009a98:	2201      	movs	r2, #1
90009a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009a9e:	687b      	ldr	r3, [r7, #4]
90009aa0:	2201      	movs	r2, #1
90009aa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009aa6:	687b      	ldr	r3, [r7, #4]
90009aa8:	2201      	movs	r2, #1
90009aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009aae:	687b      	ldr	r3, [r7, #4]
90009ab0:	2201      	movs	r2, #1
90009ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009ab6:	687b      	ldr	r3, [r7, #4]
90009ab8:	2201      	movs	r2, #1
90009aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009abe:	687b      	ldr	r3, [r7, #4]
90009ac0:	2201      	movs	r2, #1
90009ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009ac6:	687b      	ldr	r3, [r7, #4]
90009ac8:	2201      	movs	r2, #1
90009aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009ace:	687b      	ldr	r3, [r7, #4]
90009ad0:	2201      	movs	r2, #1
90009ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009ad6:	687b      	ldr	r3, [r7, #4]
90009ad8:	2201      	movs	r2, #1
90009ada:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009ade:	687b      	ldr	r3, [r7, #4]
90009ae0:	2201      	movs	r2, #1
90009ae2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009ae6:	687b      	ldr	r3, [r7, #4]
90009ae8:	2201      	movs	r2, #1
90009aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90009aee:	2300      	movs	r3, #0
}
90009af0:	4618      	mov	r0, r3
90009af2:	3708      	adds	r7, #8
90009af4:	46bd      	mov	sp, r7
90009af6:	bd80      	pop	{r7, pc}

90009af8 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009af8:	b580      	push	{r7, lr}
90009afa:	b082      	sub	sp, #8
90009afc:	af00      	add	r7, sp, #0
90009afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
90009b00:	687b      	ldr	r3, [r7, #4]
90009b02:	2202      	movs	r2, #2
90009b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009b08:	687b      	ldr	r3, [r7, #4]
90009b0a:	681b      	ldr	r3, [r3, #0]
90009b0c:	6a1a      	ldr	r2, [r3, #32]
90009b0e:	f241 1311 	movw	r3, #4369	@ 0x1111
90009b12:	4013      	ands	r3, r2
90009b14:	2b00      	cmp	r3, #0
90009b16:	d10f      	bne.n	90009b38 <HAL_TIM_PWM_DeInit+0x40>
90009b18:	687b      	ldr	r3, [r7, #4]
90009b1a:	681b      	ldr	r3, [r3, #0]
90009b1c:	6a1a      	ldr	r2, [r3, #32]
90009b1e:	f240 4344 	movw	r3, #1092	@ 0x444
90009b22:	4013      	ands	r3, r2
90009b24:	2b00      	cmp	r3, #0
90009b26:	d107      	bne.n	90009b38 <HAL_TIM_PWM_DeInit+0x40>
90009b28:	687b      	ldr	r3, [r7, #4]
90009b2a:	681b      	ldr	r3, [r3, #0]
90009b2c:	681a      	ldr	r2, [r3, #0]
90009b2e:	687b      	ldr	r3, [r7, #4]
90009b30:	681b      	ldr	r3, [r3, #0]
90009b32:	f022 0201 	bic.w	r2, r2, #1
90009b36:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
90009b38:	6878      	ldr	r0, [r7, #4]
90009b3a:	f000 f843 	bl	90009bc4 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
90009b3e:	687b      	ldr	r3, [r7, #4]
90009b40:	2200      	movs	r2, #0
90009b42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009b46:	687b      	ldr	r3, [r7, #4]
90009b48:	2200      	movs	r2, #0
90009b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009b4e:	687b      	ldr	r3, [r7, #4]
90009b50:	2200      	movs	r2, #0
90009b52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009b56:	687b      	ldr	r3, [r7, #4]
90009b58:	2200      	movs	r2, #0
90009b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009b5e:	687b      	ldr	r3, [r7, #4]
90009b60:	2200      	movs	r2, #0
90009b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009b66:	687b      	ldr	r3, [r7, #4]
90009b68:	2200      	movs	r2, #0
90009b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009b6e:	687b      	ldr	r3, [r7, #4]
90009b70:	2200      	movs	r2, #0
90009b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009b76:	687b      	ldr	r3, [r7, #4]
90009b78:	2200      	movs	r2, #0
90009b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009b7e:	687b      	ldr	r3, [r7, #4]
90009b80:	2200      	movs	r2, #0
90009b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009b86:	687b      	ldr	r3, [r7, #4]
90009b88:	2200      	movs	r2, #0
90009b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009b8e:	687b      	ldr	r3, [r7, #4]
90009b90:	2200      	movs	r2, #0
90009b92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009b96:	687b      	ldr	r3, [r7, #4]
90009b98:	2200      	movs	r2, #0
90009b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
90009b9e:	687b      	ldr	r3, [r7, #4]
90009ba0:	2200      	movs	r2, #0
90009ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90009ba6:	2300      	movs	r3, #0
}
90009ba8:	4618      	mov	r0, r3
90009baa:	3708      	adds	r7, #8
90009bac:	46bd      	mov	sp, r7
90009bae:	bd80      	pop	{r7, pc}

90009bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009bb0:	b480      	push	{r7}
90009bb2:	b083      	sub	sp, #12
90009bb4:	af00      	add	r7, sp, #0
90009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009bb8:	bf00      	nop
90009bba:	370c      	adds	r7, #12
90009bbc:	46bd      	mov	sp, r7
90009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
90009bc2:	4770      	bx	lr

90009bc4 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009bc4:	b480      	push	{r7}
90009bc6:	b083      	sub	sp, #12
90009bc8:	af00      	add	r7, sp, #0
90009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009bcc:	bf00      	nop
90009bce:	370c      	adds	r7, #12
90009bd0:	46bd      	mov	sp, r7
90009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
90009bd6:	4770      	bx	lr

90009bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009bd8:	b480      	push	{r7}
90009bda:	b085      	sub	sp, #20
90009bdc:	af00      	add	r7, sp, #0
90009bde:	6078      	str	r0, [r7, #4]
90009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009be2:	687b      	ldr	r3, [r7, #4]
90009be4:	681b      	ldr	r3, [r3, #0]
90009be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009be8:	687b      	ldr	r3, [r7, #4]
90009bea:	4a43      	ldr	r2, [pc, #268]	@ (90009cf8 <TIM_Base_SetConfig+0x120>)
90009bec:	4293      	cmp	r3, r2
90009bee:	d013      	beq.n	90009c18 <TIM_Base_SetConfig+0x40>
90009bf0:	687b      	ldr	r3, [r7, #4]
90009bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009bf6:	d00f      	beq.n	90009c18 <TIM_Base_SetConfig+0x40>
90009bf8:	687b      	ldr	r3, [r7, #4]
90009bfa:	4a40      	ldr	r2, [pc, #256]	@ (90009cfc <TIM_Base_SetConfig+0x124>)
90009bfc:	4293      	cmp	r3, r2
90009bfe:	d00b      	beq.n	90009c18 <TIM_Base_SetConfig+0x40>
90009c00:	687b      	ldr	r3, [r7, #4]
90009c02:	4a3f      	ldr	r2, [pc, #252]	@ (90009d00 <TIM_Base_SetConfig+0x128>)
90009c04:	4293      	cmp	r3, r2
90009c06:	d007      	beq.n	90009c18 <TIM_Base_SetConfig+0x40>
90009c08:	687b      	ldr	r3, [r7, #4]
90009c0a:	4a3e      	ldr	r2, [pc, #248]	@ (90009d04 <TIM_Base_SetConfig+0x12c>)
90009c0c:	4293      	cmp	r3, r2
90009c0e:	d003      	beq.n	90009c18 <TIM_Base_SetConfig+0x40>
90009c10:	687b      	ldr	r3, [r7, #4]
90009c12:	4a3d      	ldr	r2, [pc, #244]	@ (90009d08 <TIM_Base_SetConfig+0x130>)
90009c14:	4293      	cmp	r3, r2
90009c16:	d108      	bne.n	90009c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009c18:	68fb      	ldr	r3, [r7, #12]
90009c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
90009c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009c20:	683b      	ldr	r3, [r7, #0]
90009c22:	685b      	ldr	r3, [r3, #4]
90009c24:	68fa      	ldr	r2, [r7, #12]
90009c26:	4313      	orrs	r3, r2
90009c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90009c2a:	687b      	ldr	r3, [r7, #4]
90009c2c:	4a32      	ldr	r2, [pc, #200]	@ (90009cf8 <TIM_Base_SetConfig+0x120>)
90009c2e:	4293      	cmp	r3, r2
90009c30:	d01f      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c32:	687b      	ldr	r3, [r7, #4]
90009c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009c38:	d01b      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c3a:	687b      	ldr	r3, [r7, #4]
90009c3c:	4a2f      	ldr	r2, [pc, #188]	@ (90009cfc <TIM_Base_SetConfig+0x124>)
90009c3e:	4293      	cmp	r3, r2
90009c40:	d017      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c42:	687b      	ldr	r3, [r7, #4]
90009c44:	4a2e      	ldr	r2, [pc, #184]	@ (90009d00 <TIM_Base_SetConfig+0x128>)
90009c46:	4293      	cmp	r3, r2
90009c48:	d013      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c4a:	687b      	ldr	r3, [r7, #4]
90009c4c:	4a2d      	ldr	r2, [pc, #180]	@ (90009d04 <TIM_Base_SetConfig+0x12c>)
90009c4e:	4293      	cmp	r3, r2
90009c50:	d00f      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c52:	687b      	ldr	r3, [r7, #4]
90009c54:	4a2c      	ldr	r2, [pc, #176]	@ (90009d08 <TIM_Base_SetConfig+0x130>)
90009c56:	4293      	cmp	r3, r2
90009c58:	d00b      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c5a:	687b      	ldr	r3, [r7, #4]
90009c5c:	4a2b      	ldr	r2, [pc, #172]	@ (90009d0c <TIM_Base_SetConfig+0x134>)
90009c5e:	4293      	cmp	r3, r2
90009c60:	d007      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c62:	687b      	ldr	r3, [r7, #4]
90009c64:	4a2a      	ldr	r2, [pc, #168]	@ (90009d10 <TIM_Base_SetConfig+0x138>)
90009c66:	4293      	cmp	r3, r2
90009c68:	d003      	beq.n	90009c72 <TIM_Base_SetConfig+0x9a>
90009c6a:	687b      	ldr	r3, [r7, #4]
90009c6c:	4a29      	ldr	r2, [pc, #164]	@ (90009d14 <TIM_Base_SetConfig+0x13c>)
90009c6e:	4293      	cmp	r3, r2
90009c70:	d108      	bne.n	90009c84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009c72:	68fb      	ldr	r3, [r7, #12]
90009c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90009c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009c7a:	683b      	ldr	r3, [r7, #0]
90009c7c:	68db      	ldr	r3, [r3, #12]
90009c7e:	68fa      	ldr	r2, [r7, #12]
90009c80:	4313      	orrs	r3, r2
90009c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009c84:	68fb      	ldr	r3, [r7, #12]
90009c86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
90009c8a:	683b      	ldr	r3, [r7, #0]
90009c8c:	695b      	ldr	r3, [r3, #20]
90009c8e:	4313      	orrs	r3, r2
90009c90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009c92:	683b      	ldr	r3, [r7, #0]
90009c94:	689a      	ldr	r2, [r3, #8]
90009c96:	687b      	ldr	r3, [r7, #4]
90009c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90009c9a:	683b      	ldr	r3, [r7, #0]
90009c9c:	681a      	ldr	r2, [r3, #0]
90009c9e:	687b      	ldr	r3, [r7, #4]
90009ca0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009ca2:	687b      	ldr	r3, [r7, #4]
90009ca4:	4a14      	ldr	r2, [pc, #80]	@ (90009cf8 <TIM_Base_SetConfig+0x120>)
90009ca6:	4293      	cmp	r3, r2
90009ca8:	d00f      	beq.n	90009cca <TIM_Base_SetConfig+0xf2>
90009caa:	687b      	ldr	r3, [r7, #4]
90009cac:	4a16      	ldr	r2, [pc, #88]	@ (90009d08 <TIM_Base_SetConfig+0x130>)
90009cae:	4293      	cmp	r3, r2
90009cb0:	d00b      	beq.n	90009cca <TIM_Base_SetConfig+0xf2>
90009cb2:	687b      	ldr	r3, [r7, #4]
90009cb4:	4a15      	ldr	r2, [pc, #84]	@ (90009d0c <TIM_Base_SetConfig+0x134>)
90009cb6:	4293      	cmp	r3, r2
90009cb8:	d007      	beq.n	90009cca <TIM_Base_SetConfig+0xf2>
90009cba:	687b      	ldr	r3, [r7, #4]
90009cbc:	4a14      	ldr	r2, [pc, #80]	@ (90009d10 <TIM_Base_SetConfig+0x138>)
90009cbe:	4293      	cmp	r3, r2
90009cc0:	d003      	beq.n	90009cca <TIM_Base_SetConfig+0xf2>
90009cc2:	687b      	ldr	r3, [r7, #4]
90009cc4:	4a13      	ldr	r2, [pc, #76]	@ (90009d14 <TIM_Base_SetConfig+0x13c>)
90009cc6:	4293      	cmp	r3, r2
90009cc8:	d103      	bne.n	90009cd2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90009cca:	683b      	ldr	r3, [r7, #0]
90009ccc:	691a      	ldr	r2, [r3, #16]
90009cce:	687b      	ldr	r3, [r7, #4]
90009cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009cd2:	687b      	ldr	r3, [r7, #4]
90009cd4:	681b      	ldr	r3, [r3, #0]
90009cd6:	f043 0204 	orr.w	r2, r3, #4
90009cda:	687b      	ldr	r3, [r7, #4]
90009cdc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009cde:	687b      	ldr	r3, [r7, #4]
90009ce0:	2201      	movs	r2, #1
90009ce2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009ce4:	687b      	ldr	r3, [r7, #4]
90009ce6:	68fa      	ldr	r2, [r7, #12]
90009ce8:	601a      	str	r2, [r3, #0]
}
90009cea:	bf00      	nop
90009cec:	3714      	adds	r7, #20
90009cee:	46bd      	mov	sp, r7
90009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
90009cf4:	4770      	bx	lr
90009cf6:	bf00      	nop
90009cf8:	40010000 	.word	0x40010000
90009cfc:	40000400 	.word	0x40000400
90009d00:	40000800 	.word	0x40000800
90009d04:	40000c00 	.word	0x40000c00
90009d08:	40010400 	.word	0x40010400
90009d0c:	40014000 	.word	0x40014000
90009d10:	40014400 	.word	0x40014400
90009d14:	40014800 	.word	0x40014800

90009d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009d18:	b580      	push	{r7, lr}
90009d1a:	b082      	sub	sp, #8
90009d1c:	af00      	add	r7, sp, #0
90009d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009d20:	687b      	ldr	r3, [r7, #4]
90009d22:	2b00      	cmp	r3, #0
90009d24:	d101      	bne.n	90009d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009d26:	2301      	movs	r3, #1
90009d28:	e042      	b.n	90009db0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009d2a:	687b      	ldr	r3, [r7, #4]
90009d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009d30:	2b00      	cmp	r3, #0
90009d32:	d106      	bne.n	90009d42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009d34:	687b      	ldr	r3, [r7, #4]
90009d36:	2200      	movs	r2, #0
90009d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009d3c:	6878      	ldr	r0, [r7, #4]
90009d3e:	f7f6 ff19 	bl	90000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009d42:	687b      	ldr	r3, [r7, #4]
90009d44:	2224      	movs	r2, #36	@ 0x24
90009d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009d4a:	687b      	ldr	r3, [r7, #4]
90009d4c:	681b      	ldr	r3, [r3, #0]
90009d4e:	681a      	ldr	r2, [r3, #0]
90009d50:	687b      	ldr	r3, [r7, #4]
90009d52:	681b      	ldr	r3, [r3, #0]
90009d54:	f022 0201 	bic.w	r2, r2, #1
90009d58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009d5a:	687b      	ldr	r3, [r7, #4]
90009d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009d5e:	2b00      	cmp	r3, #0
90009d60:	d002      	beq.n	90009d68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009d62:	6878      	ldr	r0, [r7, #4]
90009d64:	f000 fe1e 	bl	9000a9a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009d68:	6878      	ldr	r0, [r7, #4]
90009d6a:	f000 f8b3 	bl	90009ed4 <UART_SetConfig>
90009d6e:	4603      	mov	r3, r0
90009d70:	2b01      	cmp	r3, #1
90009d72:	d101      	bne.n	90009d78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009d74:	2301      	movs	r3, #1
90009d76:	e01b      	b.n	90009db0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009d78:	687b      	ldr	r3, [r7, #4]
90009d7a:	681b      	ldr	r3, [r3, #0]
90009d7c:	685a      	ldr	r2, [r3, #4]
90009d7e:	687b      	ldr	r3, [r7, #4]
90009d80:	681b      	ldr	r3, [r3, #0]
90009d82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009d88:	687b      	ldr	r3, [r7, #4]
90009d8a:	681b      	ldr	r3, [r3, #0]
90009d8c:	689a      	ldr	r2, [r3, #8]
90009d8e:	687b      	ldr	r3, [r7, #4]
90009d90:	681b      	ldr	r3, [r3, #0]
90009d92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009d98:	687b      	ldr	r3, [r7, #4]
90009d9a:	681b      	ldr	r3, [r3, #0]
90009d9c:	681a      	ldr	r2, [r3, #0]
90009d9e:	687b      	ldr	r3, [r7, #4]
90009da0:	681b      	ldr	r3, [r3, #0]
90009da2:	f042 0201 	orr.w	r2, r2, #1
90009da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009da8:	6878      	ldr	r0, [r7, #4]
90009daa:	f000 fe9d 	bl	9000aae8 <UART_CheckIdleState>
90009dae:	4603      	mov	r3, r0
}
90009db0:	4618      	mov	r0, r3
90009db2:	3708      	adds	r7, #8
90009db4:	46bd      	mov	sp, r7
90009db6:	bd80      	pop	{r7, pc}

90009db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009db8:	b580      	push	{r7, lr}
90009dba:	b08a      	sub	sp, #40	@ 0x28
90009dbc:	af02      	add	r7, sp, #8
90009dbe:	60f8      	str	r0, [r7, #12]
90009dc0:	60b9      	str	r1, [r7, #8]
90009dc2:	603b      	str	r3, [r7, #0]
90009dc4:	4613      	mov	r3, r2
90009dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009dc8:	68fb      	ldr	r3, [r7, #12]
90009dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009dce:	2b20      	cmp	r3, #32
90009dd0:	d17b      	bne.n	90009eca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009dd2:	68bb      	ldr	r3, [r7, #8]
90009dd4:	2b00      	cmp	r3, #0
90009dd6:	d002      	beq.n	90009dde <HAL_UART_Transmit+0x26>
90009dd8:	88fb      	ldrh	r3, [r7, #6]
90009dda:	2b00      	cmp	r3, #0
90009ddc:	d101      	bne.n	90009de2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009dde:	2301      	movs	r3, #1
90009de0:	e074      	b.n	90009ecc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009de2:	68fb      	ldr	r3, [r7, #12]
90009de4:	2200      	movs	r2, #0
90009de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009dea:	68fb      	ldr	r3, [r7, #12]
90009dec:	2221      	movs	r2, #33	@ 0x21
90009dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009df2:	f7f9 facd 	bl	90003390 <HAL_GetTick>
90009df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009df8:	68fb      	ldr	r3, [r7, #12]
90009dfa:	88fa      	ldrh	r2, [r7, #6]
90009dfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009e00:	68fb      	ldr	r3, [r7, #12]
90009e02:	88fa      	ldrh	r2, [r7, #6]
90009e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009e08:	68fb      	ldr	r3, [r7, #12]
90009e0a:	689b      	ldr	r3, [r3, #8]
90009e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009e10:	d108      	bne.n	90009e24 <HAL_UART_Transmit+0x6c>
90009e12:	68fb      	ldr	r3, [r7, #12]
90009e14:	691b      	ldr	r3, [r3, #16]
90009e16:	2b00      	cmp	r3, #0
90009e18:	d104      	bne.n	90009e24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009e1a:	2300      	movs	r3, #0
90009e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009e1e:	68bb      	ldr	r3, [r7, #8]
90009e20:	61bb      	str	r3, [r7, #24]
90009e22:	e003      	b.n	90009e2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009e24:	68bb      	ldr	r3, [r7, #8]
90009e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009e28:	2300      	movs	r3, #0
90009e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009e2c:	e030      	b.n	90009e90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009e2e:	683b      	ldr	r3, [r7, #0]
90009e30:	9300      	str	r3, [sp, #0]
90009e32:	697b      	ldr	r3, [r7, #20]
90009e34:	2200      	movs	r2, #0
90009e36:	2180      	movs	r1, #128	@ 0x80
90009e38:	68f8      	ldr	r0, [r7, #12]
90009e3a:	f000 feff 	bl	9000ac3c <UART_WaitOnFlagUntilTimeout>
90009e3e:	4603      	mov	r3, r0
90009e40:	2b00      	cmp	r3, #0
90009e42:	d005      	beq.n	90009e50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009e44:	68fb      	ldr	r3, [r7, #12]
90009e46:	2220      	movs	r2, #32
90009e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009e4c:	2303      	movs	r3, #3
90009e4e:	e03d      	b.n	90009ecc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009e50:	69fb      	ldr	r3, [r7, #28]
90009e52:	2b00      	cmp	r3, #0
90009e54:	d10b      	bne.n	90009e6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009e56:	69bb      	ldr	r3, [r7, #24]
90009e58:	881b      	ldrh	r3, [r3, #0]
90009e5a:	461a      	mov	r2, r3
90009e5c:	68fb      	ldr	r3, [r7, #12]
90009e5e:	681b      	ldr	r3, [r3, #0]
90009e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009e64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009e66:	69bb      	ldr	r3, [r7, #24]
90009e68:	3302      	adds	r3, #2
90009e6a:	61bb      	str	r3, [r7, #24]
90009e6c:	e007      	b.n	90009e7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009e6e:	69fb      	ldr	r3, [r7, #28]
90009e70:	781a      	ldrb	r2, [r3, #0]
90009e72:	68fb      	ldr	r3, [r7, #12]
90009e74:	681b      	ldr	r3, [r3, #0]
90009e76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009e78:	69fb      	ldr	r3, [r7, #28]
90009e7a:	3301      	adds	r3, #1
90009e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009e7e:	68fb      	ldr	r3, [r7, #12]
90009e80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009e84:	b29b      	uxth	r3, r3
90009e86:	3b01      	subs	r3, #1
90009e88:	b29a      	uxth	r2, r3
90009e8a:	68fb      	ldr	r3, [r7, #12]
90009e8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009e90:	68fb      	ldr	r3, [r7, #12]
90009e92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009e96:	b29b      	uxth	r3, r3
90009e98:	2b00      	cmp	r3, #0
90009e9a:	d1c8      	bne.n	90009e2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009e9c:	683b      	ldr	r3, [r7, #0]
90009e9e:	9300      	str	r3, [sp, #0]
90009ea0:	697b      	ldr	r3, [r7, #20]
90009ea2:	2200      	movs	r2, #0
90009ea4:	2140      	movs	r1, #64	@ 0x40
90009ea6:	68f8      	ldr	r0, [r7, #12]
90009ea8:	f000 fec8 	bl	9000ac3c <UART_WaitOnFlagUntilTimeout>
90009eac:	4603      	mov	r3, r0
90009eae:	2b00      	cmp	r3, #0
90009eb0:	d005      	beq.n	90009ebe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009eb2:	68fb      	ldr	r3, [r7, #12]
90009eb4:	2220      	movs	r2, #32
90009eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009eba:	2303      	movs	r3, #3
90009ebc:	e006      	b.n	90009ecc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009ebe:	68fb      	ldr	r3, [r7, #12]
90009ec0:	2220      	movs	r2, #32
90009ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009ec6:	2300      	movs	r3, #0
90009ec8:	e000      	b.n	90009ecc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009eca:	2302      	movs	r3, #2
  }
}
90009ecc:	4618      	mov	r0, r3
90009ece:	3720      	adds	r7, #32
90009ed0:	46bd      	mov	sp, r7
90009ed2:	bd80      	pop	{r7, pc}

90009ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009ed8:	b092      	sub	sp, #72	@ 0x48
90009eda:	af00      	add	r7, sp, #0
90009edc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009ede:	2300      	movs	r3, #0
90009ee0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009ee4:	697b      	ldr	r3, [r7, #20]
90009ee6:	689a      	ldr	r2, [r3, #8]
90009ee8:	697b      	ldr	r3, [r7, #20]
90009eea:	691b      	ldr	r3, [r3, #16]
90009eec:	431a      	orrs	r2, r3
90009eee:	697b      	ldr	r3, [r7, #20]
90009ef0:	695b      	ldr	r3, [r3, #20]
90009ef2:	431a      	orrs	r2, r3
90009ef4:	697b      	ldr	r3, [r7, #20]
90009ef6:	69db      	ldr	r3, [r3, #28]
90009ef8:	4313      	orrs	r3, r2
90009efa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009efc:	697b      	ldr	r3, [r7, #20]
90009efe:	681b      	ldr	r3, [r3, #0]
90009f00:	681a      	ldr	r2, [r3, #0]
90009f02:	4bbe      	ldr	r3, [pc, #760]	@ (9000a1fc <UART_SetConfig+0x328>)
90009f04:	4013      	ands	r3, r2
90009f06:	697a      	ldr	r2, [r7, #20]
90009f08:	6812      	ldr	r2, [r2, #0]
90009f0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009f0c:	430b      	orrs	r3, r1
90009f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009f10:	697b      	ldr	r3, [r7, #20]
90009f12:	681b      	ldr	r3, [r3, #0]
90009f14:	685b      	ldr	r3, [r3, #4]
90009f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009f1a:	697b      	ldr	r3, [r7, #20]
90009f1c:	68da      	ldr	r2, [r3, #12]
90009f1e:	697b      	ldr	r3, [r7, #20]
90009f20:	681b      	ldr	r3, [r3, #0]
90009f22:	430a      	orrs	r2, r1
90009f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009f26:	697b      	ldr	r3, [r7, #20]
90009f28:	699b      	ldr	r3, [r3, #24]
90009f2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009f2c:	697b      	ldr	r3, [r7, #20]
90009f2e:	681b      	ldr	r3, [r3, #0]
90009f30:	4ab3      	ldr	r2, [pc, #716]	@ (9000a200 <UART_SetConfig+0x32c>)
90009f32:	4293      	cmp	r3, r2
90009f34:	d004      	beq.n	90009f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009f36:	697b      	ldr	r3, [r7, #20]
90009f38:	6a1b      	ldr	r3, [r3, #32]
90009f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009f3c:	4313      	orrs	r3, r2
90009f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009f40:	697b      	ldr	r3, [r7, #20]
90009f42:	681b      	ldr	r3, [r3, #0]
90009f44:	689a      	ldr	r2, [r3, #8]
90009f46:	4baf      	ldr	r3, [pc, #700]	@ (9000a204 <UART_SetConfig+0x330>)
90009f48:	4013      	ands	r3, r2
90009f4a:	697a      	ldr	r2, [r7, #20]
90009f4c:	6812      	ldr	r2, [r2, #0]
90009f4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009f50:	430b      	orrs	r3, r1
90009f52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009f54:	697b      	ldr	r3, [r7, #20]
90009f56:	681b      	ldr	r3, [r3, #0]
90009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009f5a:	f023 010f 	bic.w	r1, r3, #15
90009f5e:	697b      	ldr	r3, [r7, #20]
90009f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009f62:	697b      	ldr	r3, [r7, #20]
90009f64:	681b      	ldr	r3, [r3, #0]
90009f66:	430a      	orrs	r2, r1
90009f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009f6a:	697b      	ldr	r3, [r7, #20]
90009f6c:	681b      	ldr	r3, [r3, #0]
90009f6e:	4aa6      	ldr	r2, [pc, #664]	@ (9000a208 <UART_SetConfig+0x334>)
90009f70:	4293      	cmp	r3, r2
90009f72:	d177      	bne.n	9000a064 <UART_SetConfig+0x190>
90009f74:	4ba5      	ldr	r3, [pc, #660]	@ (9000a20c <UART_SetConfig+0x338>)
90009f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009f7c:	2b28      	cmp	r3, #40	@ 0x28
90009f7e:	d86d      	bhi.n	9000a05c <UART_SetConfig+0x188>
90009f80:	a201      	add	r2, pc, #4	@ (adr r2, 90009f88 <UART_SetConfig+0xb4>)
90009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f86:	bf00      	nop
90009f88:	9000a02d 	.word	0x9000a02d
90009f8c:	9000a05d 	.word	0x9000a05d
90009f90:	9000a05d 	.word	0x9000a05d
90009f94:	9000a05d 	.word	0x9000a05d
90009f98:	9000a05d 	.word	0x9000a05d
90009f9c:	9000a05d 	.word	0x9000a05d
90009fa0:	9000a05d 	.word	0x9000a05d
90009fa4:	9000a05d 	.word	0x9000a05d
90009fa8:	9000a035 	.word	0x9000a035
90009fac:	9000a05d 	.word	0x9000a05d
90009fb0:	9000a05d 	.word	0x9000a05d
90009fb4:	9000a05d 	.word	0x9000a05d
90009fb8:	9000a05d 	.word	0x9000a05d
90009fbc:	9000a05d 	.word	0x9000a05d
90009fc0:	9000a05d 	.word	0x9000a05d
90009fc4:	9000a05d 	.word	0x9000a05d
90009fc8:	9000a03d 	.word	0x9000a03d
90009fcc:	9000a05d 	.word	0x9000a05d
90009fd0:	9000a05d 	.word	0x9000a05d
90009fd4:	9000a05d 	.word	0x9000a05d
90009fd8:	9000a05d 	.word	0x9000a05d
90009fdc:	9000a05d 	.word	0x9000a05d
90009fe0:	9000a05d 	.word	0x9000a05d
90009fe4:	9000a05d 	.word	0x9000a05d
90009fe8:	9000a045 	.word	0x9000a045
90009fec:	9000a05d 	.word	0x9000a05d
90009ff0:	9000a05d 	.word	0x9000a05d
90009ff4:	9000a05d 	.word	0x9000a05d
90009ff8:	9000a05d 	.word	0x9000a05d
90009ffc:	9000a05d 	.word	0x9000a05d
9000a000:	9000a05d 	.word	0x9000a05d
9000a004:	9000a05d 	.word	0x9000a05d
9000a008:	9000a04d 	.word	0x9000a04d
9000a00c:	9000a05d 	.word	0x9000a05d
9000a010:	9000a05d 	.word	0x9000a05d
9000a014:	9000a05d 	.word	0x9000a05d
9000a018:	9000a05d 	.word	0x9000a05d
9000a01c:	9000a05d 	.word	0x9000a05d
9000a020:	9000a05d 	.word	0x9000a05d
9000a024:	9000a05d 	.word	0x9000a05d
9000a028:	9000a055 	.word	0x9000a055
9000a02c:	2301      	movs	r3, #1
9000a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a032:	e222      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a034:	2304      	movs	r3, #4
9000a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a03a:	e21e      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a03c:	2308      	movs	r3, #8
9000a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a042:	e21a      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a044:	2310      	movs	r3, #16
9000a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a04a:	e216      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a04c:	2320      	movs	r3, #32
9000a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a052:	e212      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a054:	2340      	movs	r3, #64	@ 0x40
9000a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a05a:	e20e      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a05c:	2380      	movs	r3, #128	@ 0x80
9000a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a062:	e20a      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a064:	697b      	ldr	r3, [r7, #20]
9000a066:	681b      	ldr	r3, [r3, #0]
9000a068:	4a69      	ldr	r2, [pc, #420]	@ (9000a210 <UART_SetConfig+0x33c>)
9000a06a:	4293      	cmp	r3, r2
9000a06c:	d130      	bne.n	9000a0d0 <UART_SetConfig+0x1fc>
9000a06e:	4b67      	ldr	r3, [pc, #412]	@ (9000a20c <UART_SetConfig+0x338>)
9000a070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a072:	f003 0307 	and.w	r3, r3, #7
9000a076:	2b05      	cmp	r3, #5
9000a078:	d826      	bhi.n	9000a0c8 <UART_SetConfig+0x1f4>
9000a07a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a080 <UART_SetConfig+0x1ac>)
9000a07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a080:	9000a099 	.word	0x9000a099
9000a084:	9000a0a1 	.word	0x9000a0a1
9000a088:	9000a0a9 	.word	0x9000a0a9
9000a08c:	9000a0b1 	.word	0x9000a0b1
9000a090:	9000a0b9 	.word	0x9000a0b9
9000a094:	9000a0c1 	.word	0x9000a0c1
9000a098:	2300      	movs	r3, #0
9000a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a09e:	e1ec      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a0a0:	2304      	movs	r3, #4
9000a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0a6:	e1e8      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a0a8:	2308      	movs	r3, #8
9000a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ae:	e1e4      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a0b0:	2310      	movs	r3, #16
9000a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0b6:	e1e0      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a0b8:	2320      	movs	r3, #32
9000a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0be:	e1dc      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a0c0:	2340      	movs	r3, #64	@ 0x40
9000a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0c6:	e1d8      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a0c8:	2380      	movs	r3, #128	@ 0x80
9000a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ce:	e1d4      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a0d0:	697b      	ldr	r3, [r7, #20]
9000a0d2:	681b      	ldr	r3, [r3, #0]
9000a0d4:	4a4f      	ldr	r2, [pc, #316]	@ (9000a214 <UART_SetConfig+0x340>)
9000a0d6:	4293      	cmp	r3, r2
9000a0d8:	d130      	bne.n	9000a13c <UART_SetConfig+0x268>
9000a0da:	4b4c      	ldr	r3, [pc, #304]	@ (9000a20c <UART_SetConfig+0x338>)
9000a0dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a0de:	f003 0307 	and.w	r3, r3, #7
9000a0e2:	2b05      	cmp	r3, #5
9000a0e4:	d826      	bhi.n	9000a134 <UART_SetConfig+0x260>
9000a0e6:	a201      	add	r2, pc, #4	@ (adr r2, 9000a0ec <UART_SetConfig+0x218>)
9000a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a0ec:	9000a105 	.word	0x9000a105
9000a0f0:	9000a10d 	.word	0x9000a10d
9000a0f4:	9000a115 	.word	0x9000a115
9000a0f8:	9000a11d 	.word	0x9000a11d
9000a0fc:	9000a125 	.word	0x9000a125
9000a100:	9000a12d 	.word	0x9000a12d
9000a104:	2300      	movs	r3, #0
9000a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a10a:	e1b6      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a10c:	2304      	movs	r3, #4
9000a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a112:	e1b2      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a114:	2308      	movs	r3, #8
9000a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a11a:	e1ae      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a11c:	2310      	movs	r3, #16
9000a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a122:	e1aa      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a124:	2320      	movs	r3, #32
9000a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a12a:	e1a6      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a12c:	2340      	movs	r3, #64	@ 0x40
9000a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a132:	e1a2      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a134:	2380      	movs	r3, #128	@ 0x80
9000a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a13a:	e19e      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a13c:	697b      	ldr	r3, [r7, #20]
9000a13e:	681b      	ldr	r3, [r3, #0]
9000a140:	4a35      	ldr	r2, [pc, #212]	@ (9000a218 <UART_SetConfig+0x344>)
9000a142:	4293      	cmp	r3, r2
9000a144:	d130      	bne.n	9000a1a8 <UART_SetConfig+0x2d4>
9000a146:	4b31      	ldr	r3, [pc, #196]	@ (9000a20c <UART_SetConfig+0x338>)
9000a148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a14a:	f003 0307 	and.w	r3, r3, #7
9000a14e:	2b05      	cmp	r3, #5
9000a150:	d826      	bhi.n	9000a1a0 <UART_SetConfig+0x2cc>
9000a152:	a201      	add	r2, pc, #4	@ (adr r2, 9000a158 <UART_SetConfig+0x284>)
9000a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a158:	9000a171 	.word	0x9000a171
9000a15c:	9000a179 	.word	0x9000a179
9000a160:	9000a181 	.word	0x9000a181
9000a164:	9000a189 	.word	0x9000a189
9000a168:	9000a191 	.word	0x9000a191
9000a16c:	9000a199 	.word	0x9000a199
9000a170:	2300      	movs	r3, #0
9000a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a176:	e180      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a178:	2304      	movs	r3, #4
9000a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a17e:	e17c      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a180:	2308      	movs	r3, #8
9000a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a186:	e178      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a188:	2310      	movs	r3, #16
9000a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a18e:	e174      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a190:	2320      	movs	r3, #32
9000a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a196:	e170      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a198:	2340      	movs	r3, #64	@ 0x40
9000a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a19e:	e16c      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a1a0:	2380      	movs	r3, #128	@ 0x80
9000a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1a6:	e168      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a1a8:	697b      	ldr	r3, [r7, #20]
9000a1aa:	681b      	ldr	r3, [r3, #0]
9000a1ac:	4a1b      	ldr	r2, [pc, #108]	@ (9000a21c <UART_SetConfig+0x348>)
9000a1ae:	4293      	cmp	r3, r2
9000a1b0:	d142      	bne.n	9000a238 <UART_SetConfig+0x364>
9000a1b2:	4b16      	ldr	r3, [pc, #88]	@ (9000a20c <UART_SetConfig+0x338>)
9000a1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a1b6:	f003 0307 	and.w	r3, r3, #7
9000a1ba:	2b05      	cmp	r3, #5
9000a1bc:	d838      	bhi.n	9000a230 <UART_SetConfig+0x35c>
9000a1be:	a201      	add	r2, pc, #4	@ (adr r2, 9000a1c4 <UART_SetConfig+0x2f0>)
9000a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a1c4:	9000a1dd 	.word	0x9000a1dd
9000a1c8:	9000a1e5 	.word	0x9000a1e5
9000a1cc:	9000a1ed 	.word	0x9000a1ed
9000a1d0:	9000a1f5 	.word	0x9000a1f5
9000a1d4:	9000a221 	.word	0x9000a221
9000a1d8:	9000a229 	.word	0x9000a229
9000a1dc:	2300      	movs	r3, #0
9000a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1e2:	e14a      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a1e4:	2304      	movs	r3, #4
9000a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1ea:	e146      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a1ec:	2308      	movs	r3, #8
9000a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1f2:	e142      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a1f4:	2310      	movs	r3, #16
9000a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1fa:	e13e      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a1fc:	cfff69f3 	.word	0xcfff69f3
9000a200:	58000c00 	.word	0x58000c00
9000a204:	11fff4ff 	.word	0x11fff4ff
9000a208:	40011000 	.word	0x40011000
9000a20c:	58024400 	.word	0x58024400
9000a210:	40004400 	.word	0x40004400
9000a214:	40004800 	.word	0x40004800
9000a218:	40004c00 	.word	0x40004c00
9000a21c:	40005000 	.word	0x40005000
9000a220:	2320      	movs	r3, #32
9000a222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a226:	e128      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a228:	2340      	movs	r3, #64	@ 0x40
9000a22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a22e:	e124      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a230:	2380      	movs	r3, #128	@ 0x80
9000a232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a236:	e120      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a238:	697b      	ldr	r3, [r7, #20]
9000a23a:	681b      	ldr	r3, [r3, #0]
9000a23c:	4acb      	ldr	r2, [pc, #812]	@ (9000a56c <UART_SetConfig+0x698>)
9000a23e:	4293      	cmp	r3, r2
9000a240:	d176      	bne.n	9000a330 <UART_SetConfig+0x45c>
9000a242:	4bcb      	ldr	r3, [pc, #812]	@ (9000a570 <UART_SetConfig+0x69c>)
9000a244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a24a:	2b28      	cmp	r3, #40	@ 0x28
9000a24c:	d86c      	bhi.n	9000a328 <UART_SetConfig+0x454>
9000a24e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a254 <UART_SetConfig+0x380>)
9000a250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a254:	9000a2f9 	.word	0x9000a2f9
9000a258:	9000a329 	.word	0x9000a329
9000a25c:	9000a329 	.word	0x9000a329
9000a260:	9000a329 	.word	0x9000a329
9000a264:	9000a329 	.word	0x9000a329
9000a268:	9000a329 	.word	0x9000a329
9000a26c:	9000a329 	.word	0x9000a329
9000a270:	9000a329 	.word	0x9000a329
9000a274:	9000a301 	.word	0x9000a301
9000a278:	9000a329 	.word	0x9000a329
9000a27c:	9000a329 	.word	0x9000a329
9000a280:	9000a329 	.word	0x9000a329
9000a284:	9000a329 	.word	0x9000a329
9000a288:	9000a329 	.word	0x9000a329
9000a28c:	9000a329 	.word	0x9000a329
9000a290:	9000a329 	.word	0x9000a329
9000a294:	9000a309 	.word	0x9000a309
9000a298:	9000a329 	.word	0x9000a329
9000a29c:	9000a329 	.word	0x9000a329
9000a2a0:	9000a329 	.word	0x9000a329
9000a2a4:	9000a329 	.word	0x9000a329
9000a2a8:	9000a329 	.word	0x9000a329
9000a2ac:	9000a329 	.word	0x9000a329
9000a2b0:	9000a329 	.word	0x9000a329
9000a2b4:	9000a311 	.word	0x9000a311
9000a2b8:	9000a329 	.word	0x9000a329
9000a2bc:	9000a329 	.word	0x9000a329
9000a2c0:	9000a329 	.word	0x9000a329
9000a2c4:	9000a329 	.word	0x9000a329
9000a2c8:	9000a329 	.word	0x9000a329
9000a2cc:	9000a329 	.word	0x9000a329
9000a2d0:	9000a329 	.word	0x9000a329
9000a2d4:	9000a319 	.word	0x9000a319
9000a2d8:	9000a329 	.word	0x9000a329
9000a2dc:	9000a329 	.word	0x9000a329
9000a2e0:	9000a329 	.word	0x9000a329
9000a2e4:	9000a329 	.word	0x9000a329
9000a2e8:	9000a329 	.word	0x9000a329
9000a2ec:	9000a329 	.word	0x9000a329
9000a2f0:	9000a329 	.word	0x9000a329
9000a2f4:	9000a321 	.word	0x9000a321
9000a2f8:	2301      	movs	r3, #1
9000a2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2fe:	e0bc      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a300:	2304      	movs	r3, #4
9000a302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a306:	e0b8      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a308:	2308      	movs	r3, #8
9000a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a30e:	e0b4      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a310:	2310      	movs	r3, #16
9000a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a316:	e0b0      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a318:	2320      	movs	r3, #32
9000a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a31e:	e0ac      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a320:	2340      	movs	r3, #64	@ 0x40
9000a322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a326:	e0a8      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a328:	2380      	movs	r3, #128	@ 0x80
9000a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a32e:	e0a4      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a330:	697b      	ldr	r3, [r7, #20]
9000a332:	681b      	ldr	r3, [r3, #0]
9000a334:	4a8f      	ldr	r2, [pc, #572]	@ (9000a574 <UART_SetConfig+0x6a0>)
9000a336:	4293      	cmp	r3, r2
9000a338:	d130      	bne.n	9000a39c <UART_SetConfig+0x4c8>
9000a33a:	4b8d      	ldr	r3, [pc, #564]	@ (9000a570 <UART_SetConfig+0x69c>)
9000a33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a33e:	f003 0307 	and.w	r3, r3, #7
9000a342:	2b05      	cmp	r3, #5
9000a344:	d826      	bhi.n	9000a394 <UART_SetConfig+0x4c0>
9000a346:	a201      	add	r2, pc, #4	@ (adr r2, 9000a34c <UART_SetConfig+0x478>)
9000a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a34c:	9000a365 	.word	0x9000a365
9000a350:	9000a36d 	.word	0x9000a36d
9000a354:	9000a375 	.word	0x9000a375
9000a358:	9000a37d 	.word	0x9000a37d
9000a35c:	9000a385 	.word	0x9000a385
9000a360:	9000a38d 	.word	0x9000a38d
9000a364:	2300      	movs	r3, #0
9000a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a36a:	e086      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a36c:	2304      	movs	r3, #4
9000a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a372:	e082      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a374:	2308      	movs	r3, #8
9000a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a37a:	e07e      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a37c:	2310      	movs	r3, #16
9000a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a382:	e07a      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a384:	2320      	movs	r3, #32
9000a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a38a:	e076      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a38c:	2340      	movs	r3, #64	@ 0x40
9000a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a392:	e072      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a394:	2380      	movs	r3, #128	@ 0x80
9000a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a39a:	e06e      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a39c:	697b      	ldr	r3, [r7, #20]
9000a39e:	681b      	ldr	r3, [r3, #0]
9000a3a0:	4a75      	ldr	r2, [pc, #468]	@ (9000a578 <UART_SetConfig+0x6a4>)
9000a3a2:	4293      	cmp	r3, r2
9000a3a4:	d130      	bne.n	9000a408 <UART_SetConfig+0x534>
9000a3a6:	4b72      	ldr	r3, [pc, #456]	@ (9000a570 <UART_SetConfig+0x69c>)
9000a3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a3aa:	f003 0307 	and.w	r3, r3, #7
9000a3ae:	2b05      	cmp	r3, #5
9000a3b0:	d826      	bhi.n	9000a400 <UART_SetConfig+0x52c>
9000a3b2:	a201      	add	r2, pc, #4	@ (adr r2, 9000a3b8 <UART_SetConfig+0x4e4>)
9000a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a3b8:	9000a3d1 	.word	0x9000a3d1
9000a3bc:	9000a3d9 	.word	0x9000a3d9
9000a3c0:	9000a3e1 	.word	0x9000a3e1
9000a3c4:	9000a3e9 	.word	0x9000a3e9
9000a3c8:	9000a3f1 	.word	0x9000a3f1
9000a3cc:	9000a3f9 	.word	0x9000a3f9
9000a3d0:	2300      	movs	r3, #0
9000a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3d6:	e050      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a3d8:	2304      	movs	r3, #4
9000a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3de:	e04c      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a3e0:	2308      	movs	r3, #8
9000a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3e6:	e048      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a3e8:	2310      	movs	r3, #16
9000a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3ee:	e044      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a3f0:	2320      	movs	r3, #32
9000a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3f6:	e040      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a3f8:	2340      	movs	r3, #64	@ 0x40
9000a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3fe:	e03c      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a400:	2380      	movs	r3, #128	@ 0x80
9000a402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a406:	e038      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a408:	697b      	ldr	r3, [r7, #20]
9000a40a:	681b      	ldr	r3, [r3, #0]
9000a40c:	4a5b      	ldr	r2, [pc, #364]	@ (9000a57c <UART_SetConfig+0x6a8>)
9000a40e:	4293      	cmp	r3, r2
9000a410:	d130      	bne.n	9000a474 <UART_SetConfig+0x5a0>
9000a412:	4b57      	ldr	r3, [pc, #348]	@ (9000a570 <UART_SetConfig+0x69c>)
9000a414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a416:	f003 0307 	and.w	r3, r3, #7
9000a41a:	2b05      	cmp	r3, #5
9000a41c:	d826      	bhi.n	9000a46c <UART_SetConfig+0x598>
9000a41e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a424 <UART_SetConfig+0x550>)
9000a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a424:	9000a43d 	.word	0x9000a43d
9000a428:	9000a445 	.word	0x9000a445
9000a42c:	9000a44d 	.word	0x9000a44d
9000a430:	9000a455 	.word	0x9000a455
9000a434:	9000a45d 	.word	0x9000a45d
9000a438:	9000a465 	.word	0x9000a465
9000a43c:	2302      	movs	r3, #2
9000a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a442:	e01a      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a444:	2304      	movs	r3, #4
9000a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a44a:	e016      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a44c:	2308      	movs	r3, #8
9000a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a452:	e012      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a454:	2310      	movs	r3, #16
9000a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a45a:	e00e      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a45c:	2320      	movs	r3, #32
9000a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a462:	e00a      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a464:	2340      	movs	r3, #64	@ 0x40
9000a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a46a:	e006      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a46c:	2380      	movs	r3, #128	@ 0x80
9000a46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a472:	e002      	b.n	9000a47a <UART_SetConfig+0x5a6>
9000a474:	2380      	movs	r3, #128	@ 0x80
9000a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a47a:	697b      	ldr	r3, [r7, #20]
9000a47c:	681b      	ldr	r3, [r3, #0]
9000a47e:	4a3f      	ldr	r2, [pc, #252]	@ (9000a57c <UART_SetConfig+0x6a8>)
9000a480:	4293      	cmp	r3, r2
9000a482:	f040 80f8 	bne.w	9000a676 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a486:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a48a:	2b20      	cmp	r3, #32
9000a48c:	dc46      	bgt.n	9000a51c <UART_SetConfig+0x648>
9000a48e:	2b02      	cmp	r3, #2
9000a490:	f2c0 8082 	blt.w	9000a598 <UART_SetConfig+0x6c4>
9000a494:	3b02      	subs	r3, #2
9000a496:	2b1e      	cmp	r3, #30
9000a498:	d87e      	bhi.n	9000a598 <UART_SetConfig+0x6c4>
9000a49a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a4a0 <UART_SetConfig+0x5cc>)
9000a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a4a0:	9000a523 	.word	0x9000a523
9000a4a4:	9000a599 	.word	0x9000a599
9000a4a8:	9000a52b 	.word	0x9000a52b
9000a4ac:	9000a599 	.word	0x9000a599
9000a4b0:	9000a599 	.word	0x9000a599
9000a4b4:	9000a599 	.word	0x9000a599
9000a4b8:	9000a53b 	.word	0x9000a53b
9000a4bc:	9000a599 	.word	0x9000a599
9000a4c0:	9000a599 	.word	0x9000a599
9000a4c4:	9000a599 	.word	0x9000a599
9000a4c8:	9000a599 	.word	0x9000a599
9000a4cc:	9000a599 	.word	0x9000a599
9000a4d0:	9000a599 	.word	0x9000a599
9000a4d4:	9000a599 	.word	0x9000a599
9000a4d8:	9000a54b 	.word	0x9000a54b
9000a4dc:	9000a599 	.word	0x9000a599
9000a4e0:	9000a599 	.word	0x9000a599
9000a4e4:	9000a599 	.word	0x9000a599
9000a4e8:	9000a599 	.word	0x9000a599
9000a4ec:	9000a599 	.word	0x9000a599
9000a4f0:	9000a599 	.word	0x9000a599
9000a4f4:	9000a599 	.word	0x9000a599
9000a4f8:	9000a599 	.word	0x9000a599
9000a4fc:	9000a599 	.word	0x9000a599
9000a500:	9000a599 	.word	0x9000a599
9000a504:	9000a599 	.word	0x9000a599
9000a508:	9000a599 	.word	0x9000a599
9000a50c:	9000a599 	.word	0x9000a599
9000a510:	9000a599 	.word	0x9000a599
9000a514:	9000a599 	.word	0x9000a599
9000a518:	9000a58b 	.word	0x9000a58b
9000a51c:	2b40      	cmp	r3, #64	@ 0x40
9000a51e:	d037      	beq.n	9000a590 <UART_SetConfig+0x6bc>
9000a520:	e03a      	b.n	9000a598 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a522:	f7fe fdcd 	bl	900090c0 <HAL_RCCEx_GetD3PCLK1Freq>
9000a526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a528:	e03c      	b.n	9000a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a52a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a52e:	4618      	mov	r0, r3
9000a530:	f7fe fddc 	bl	900090ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a538:	e034      	b.n	9000a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a53a:	f107 0318 	add.w	r3, r7, #24
9000a53e:	4618      	mov	r0, r3
9000a540:	f7fe ff28 	bl	90009394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a544:	69fb      	ldr	r3, [r7, #28]
9000a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a548:	e02c      	b.n	9000a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a54a:	4b09      	ldr	r3, [pc, #36]	@ (9000a570 <UART_SetConfig+0x69c>)
9000a54c:	681b      	ldr	r3, [r3, #0]
9000a54e:	f003 0320 	and.w	r3, r3, #32
9000a552:	2b00      	cmp	r3, #0
9000a554:	d016      	beq.n	9000a584 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a556:	4b06      	ldr	r3, [pc, #24]	@ (9000a570 <UART_SetConfig+0x69c>)
9000a558:	681b      	ldr	r3, [r3, #0]
9000a55a:	08db      	lsrs	r3, r3, #3
9000a55c:	f003 0303 	and.w	r3, r3, #3
9000a560:	4a07      	ldr	r2, [pc, #28]	@ (9000a580 <UART_SetConfig+0x6ac>)
9000a562:	fa22 f303 	lsr.w	r3, r2, r3
9000a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a568:	e01c      	b.n	9000a5a4 <UART_SetConfig+0x6d0>
9000a56a:	bf00      	nop
9000a56c:	40011400 	.word	0x40011400
9000a570:	58024400 	.word	0x58024400
9000a574:	40007800 	.word	0x40007800
9000a578:	40007c00 	.word	0x40007c00
9000a57c:	58000c00 	.word	0x58000c00
9000a580:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a584:	4b9d      	ldr	r3, [pc, #628]	@ (9000a7fc <UART_SetConfig+0x928>)
9000a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a588:	e00c      	b.n	9000a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a58a:	4b9d      	ldr	r3, [pc, #628]	@ (9000a800 <UART_SetConfig+0x92c>)
9000a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a58e:	e009      	b.n	9000a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a596:	e005      	b.n	9000a5a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a598:	2300      	movs	r3, #0
9000a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a59c:	2301      	movs	r3, #1
9000a59e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a5a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a5a6:	2b00      	cmp	r3, #0
9000a5a8:	f000 81de 	beq.w	9000a968 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a5ac:	697b      	ldr	r3, [r7, #20]
9000a5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a5b0:	4a94      	ldr	r2, [pc, #592]	@ (9000a804 <UART_SetConfig+0x930>)
9000a5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a5b6:	461a      	mov	r2, r3
9000a5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a5ba:	fbb3 f3f2 	udiv	r3, r3, r2
9000a5be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a5c0:	697b      	ldr	r3, [r7, #20]
9000a5c2:	685a      	ldr	r2, [r3, #4]
9000a5c4:	4613      	mov	r3, r2
9000a5c6:	005b      	lsls	r3, r3, #1
9000a5c8:	4413      	add	r3, r2
9000a5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a5cc:	429a      	cmp	r2, r3
9000a5ce:	d305      	bcc.n	9000a5dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a5d0:	697b      	ldr	r3, [r7, #20]
9000a5d2:	685b      	ldr	r3, [r3, #4]
9000a5d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a5d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a5d8:	429a      	cmp	r2, r3
9000a5da:	d903      	bls.n	9000a5e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a5dc:	2301      	movs	r3, #1
9000a5de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a5e2:	e1c1      	b.n	9000a968 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a5e6:	2200      	movs	r2, #0
9000a5e8:	60bb      	str	r3, [r7, #8]
9000a5ea:	60fa      	str	r2, [r7, #12]
9000a5ec:	697b      	ldr	r3, [r7, #20]
9000a5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a5f0:	4a84      	ldr	r2, [pc, #528]	@ (9000a804 <UART_SetConfig+0x930>)
9000a5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a5f6:	b29b      	uxth	r3, r3
9000a5f8:	2200      	movs	r2, #0
9000a5fa:	603b      	str	r3, [r7, #0]
9000a5fc:	607a      	str	r2, [r7, #4]
9000a5fe:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a606:	f7f5 fec3 	bl	90000390 <__aeabi_uldivmod>
9000a60a:	4602      	mov	r2, r0
9000a60c:	460b      	mov	r3, r1
9000a60e:	4610      	mov	r0, r2
9000a610:	4619      	mov	r1, r3
9000a612:	f04f 0200 	mov.w	r2, #0
9000a616:	f04f 0300 	mov.w	r3, #0
9000a61a:	020b      	lsls	r3, r1, #8
9000a61c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a620:	0202      	lsls	r2, r0, #8
9000a622:	6979      	ldr	r1, [r7, #20]
9000a624:	6849      	ldr	r1, [r1, #4]
9000a626:	0849      	lsrs	r1, r1, #1
9000a628:	2000      	movs	r0, #0
9000a62a:	460c      	mov	r4, r1
9000a62c:	4605      	mov	r5, r0
9000a62e:	eb12 0804 	adds.w	r8, r2, r4
9000a632:	eb43 0905 	adc.w	r9, r3, r5
9000a636:	697b      	ldr	r3, [r7, #20]
9000a638:	685b      	ldr	r3, [r3, #4]
9000a63a:	2200      	movs	r2, #0
9000a63c:	469a      	mov	sl, r3
9000a63e:	4693      	mov	fp, r2
9000a640:	4652      	mov	r2, sl
9000a642:	465b      	mov	r3, fp
9000a644:	4640      	mov	r0, r8
9000a646:	4649      	mov	r1, r9
9000a648:	f7f5 fea2 	bl	90000390 <__aeabi_uldivmod>
9000a64c:	4602      	mov	r2, r0
9000a64e:	460b      	mov	r3, r1
9000a650:	4613      	mov	r3, r2
9000a652:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a65a:	d308      	bcc.n	9000a66e <UART_SetConfig+0x79a>
9000a65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a65e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a662:	d204      	bcs.n	9000a66e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a664:	697b      	ldr	r3, [r7, #20]
9000a666:	681b      	ldr	r3, [r3, #0]
9000a668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a66a:	60da      	str	r2, [r3, #12]
9000a66c:	e17c      	b.n	9000a968 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a66e:	2301      	movs	r3, #1
9000a670:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a674:	e178      	b.n	9000a968 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a676:	697b      	ldr	r3, [r7, #20]
9000a678:	69db      	ldr	r3, [r3, #28]
9000a67a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a67e:	f040 80c5 	bne.w	9000a80c <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a682:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a686:	2b20      	cmp	r3, #32
9000a688:	dc48      	bgt.n	9000a71c <UART_SetConfig+0x848>
9000a68a:	2b00      	cmp	r3, #0
9000a68c:	db7b      	blt.n	9000a786 <UART_SetConfig+0x8b2>
9000a68e:	2b20      	cmp	r3, #32
9000a690:	d879      	bhi.n	9000a786 <UART_SetConfig+0x8b2>
9000a692:	a201      	add	r2, pc, #4	@ (adr r2, 9000a698 <UART_SetConfig+0x7c4>)
9000a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a698:	9000a723 	.word	0x9000a723
9000a69c:	9000a72b 	.word	0x9000a72b
9000a6a0:	9000a787 	.word	0x9000a787
9000a6a4:	9000a787 	.word	0x9000a787
9000a6a8:	9000a733 	.word	0x9000a733
9000a6ac:	9000a787 	.word	0x9000a787
9000a6b0:	9000a787 	.word	0x9000a787
9000a6b4:	9000a787 	.word	0x9000a787
9000a6b8:	9000a743 	.word	0x9000a743
9000a6bc:	9000a787 	.word	0x9000a787
9000a6c0:	9000a787 	.word	0x9000a787
9000a6c4:	9000a787 	.word	0x9000a787
9000a6c8:	9000a787 	.word	0x9000a787
9000a6cc:	9000a787 	.word	0x9000a787
9000a6d0:	9000a787 	.word	0x9000a787
9000a6d4:	9000a787 	.word	0x9000a787
9000a6d8:	9000a753 	.word	0x9000a753
9000a6dc:	9000a787 	.word	0x9000a787
9000a6e0:	9000a787 	.word	0x9000a787
9000a6e4:	9000a787 	.word	0x9000a787
9000a6e8:	9000a787 	.word	0x9000a787
9000a6ec:	9000a787 	.word	0x9000a787
9000a6f0:	9000a787 	.word	0x9000a787
9000a6f4:	9000a787 	.word	0x9000a787
9000a6f8:	9000a787 	.word	0x9000a787
9000a6fc:	9000a787 	.word	0x9000a787
9000a700:	9000a787 	.word	0x9000a787
9000a704:	9000a787 	.word	0x9000a787
9000a708:	9000a787 	.word	0x9000a787
9000a70c:	9000a787 	.word	0x9000a787
9000a710:	9000a787 	.word	0x9000a787
9000a714:	9000a787 	.word	0x9000a787
9000a718:	9000a779 	.word	0x9000a779
9000a71c:	2b40      	cmp	r3, #64	@ 0x40
9000a71e:	d02e      	beq.n	9000a77e <UART_SetConfig+0x8aa>
9000a720:	e031      	b.n	9000a786 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a722:	f7fd fa97 	bl	90007c54 <HAL_RCC_GetPCLK1Freq>
9000a726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a728:	e033      	b.n	9000a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a72a:	f7fd faa9 	bl	90007c80 <HAL_RCC_GetPCLK2Freq>
9000a72e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a730:	e02f      	b.n	9000a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a736:	4618      	mov	r0, r3
9000a738:	f7fe fcd8 	bl	900090ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a740:	e027      	b.n	9000a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a742:	f107 0318 	add.w	r3, r7, #24
9000a746:	4618      	mov	r0, r3
9000a748:	f7fe fe24 	bl	90009394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a74c:	69fb      	ldr	r3, [r7, #28]
9000a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a750:	e01f      	b.n	9000a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a752:	4b2d      	ldr	r3, [pc, #180]	@ (9000a808 <UART_SetConfig+0x934>)
9000a754:	681b      	ldr	r3, [r3, #0]
9000a756:	f003 0320 	and.w	r3, r3, #32
9000a75a:	2b00      	cmp	r3, #0
9000a75c:	d009      	beq.n	9000a772 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a75e:	4b2a      	ldr	r3, [pc, #168]	@ (9000a808 <UART_SetConfig+0x934>)
9000a760:	681b      	ldr	r3, [r3, #0]
9000a762:	08db      	lsrs	r3, r3, #3
9000a764:	f003 0303 	and.w	r3, r3, #3
9000a768:	4a24      	ldr	r2, [pc, #144]	@ (9000a7fc <UART_SetConfig+0x928>)
9000a76a:	fa22 f303 	lsr.w	r3, r2, r3
9000a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a770:	e00f      	b.n	9000a792 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a772:	4b22      	ldr	r3, [pc, #136]	@ (9000a7fc <UART_SetConfig+0x928>)
9000a774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a776:	e00c      	b.n	9000a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a778:	4b21      	ldr	r3, [pc, #132]	@ (9000a800 <UART_SetConfig+0x92c>)
9000a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a77c:	e009      	b.n	9000a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a77e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a784:	e005      	b.n	9000a792 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a786:	2300      	movs	r3, #0
9000a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a78a:	2301      	movs	r3, #1
9000a78c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a794:	2b00      	cmp	r3, #0
9000a796:	f000 80e7 	beq.w	9000a968 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a79a:	697b      	ldr	r3, [r7, #20]
9000a79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a79e:	4a19      	ldr	r2, [pc, #100]	@ (9000a804 <UART_SetConfig+0x930>)
9000a7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a7a4:	461a      	mov	r2, r3
9000a7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a7a8:	fbb3 f3f2 	udiv	r3, r3, r2
9000a7ac:	005a      	lsls	r2, r3, #1
9000a7ae:	697b      	ldr	r3, [r7, #20]
9000a7b0:	685b      	ldr	r3, [r3, #4]
9000a7b2:	085b      	lsrs	r3, r3, #1
9000a7b4:	441a      	add	r2, r3
9000a7b6:	697b      	ldr	r3, [r7, #20]
9000a7b8:	685b      	ldr	r3, [r3, #4]
9000a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
9000a7be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7c2:	2b0f      	cmp	r3, #15
9000a7c4:	d916      	bls.n	9000a7f4 <UART_SetConfig+0x920>
9000a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a7cc:	d212      	bcs.n	9000a7f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7d0:	b29b      	uxth	r3, r3
9000a7d2:	f023 030f 	bic.w	r3, r3, #15
9000a7d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7da:	085b      	lsrs	r3, r3, #1
9000a7dc:	b29b      	uxth	r3, r3
9000a7de:	f003 0307 	and.w	r3, r3, #7
9000a7e2:	b29a      	uxth	r2, r3
9000a7e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a7e6:	4313      	orrs	r3, r2
9000a7e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a7ea:	697b      	ldr	r3, [r7, #20]
9000a7ec:	681b      	ldr	r3, [r3, #0]
9000a7ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a7f0:	60da      	str	r2, [r3, #12]
9000a7f2:	e0b9      	b.n	9000a968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a7f4:	2301      	movs	r3, #1
9000a7f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a7fa:	e0b5      	b.n	9000a968 <UART_SetConfig+0xa94>
9000a7fc:	03d09000 	.word	0x03d09000
9000a800:	003d0900 	.word	0x003d0900
9000a804:	9000d894 	.word	0x9000d894
9000a808:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a80c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a810:	2b20      	cmp	r3, #32
9000a812:	dc49      	bgt.n	9000a8a8 <UART_SetConfig+0x9d4>
9000a814:	2b00      	cmp	r3, #0
9000a816:	db7c      	blt.n	9000a912 <UART_SetConfig+0xa3e>
9000a818:	2b20      	cmp	r3, #32
9000a81a:	d87a      	bhi.n	9000a912 <UART_SetConfig+0xa3e>
9000a81c:	a201      	add	r2, pc, #4	@ (adr r2, 9000a824 <UART_SetConfig+0x950>)
9000a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a822:	bf00      	nop
9000a824:	9000a8af 	.word	0x9000a8af
9000a828:	9000a8b7 	.word	0x9000a8b7
9000a82c:	9000a913 	.word	0x9000a913
9000a830:	9000a913 	.word	0x9000a913
9000a834:	9000a8bf 	.word	0x9000a8bf
9000a838:	9000a913 	.word	0x9000a913
9000a83c:	9000a913 	.word	0x9000a913
9000a840:	9000a913 	.word	0x9000a913
9000a844:	9000a8cf 	.word	0x9000a8cf
9000a848:	9000a913 	.word	0x9000a913
9000a84c:	9000a913 	.word	0x9000a913
9000a850:	9000a913 	.word	0x9000a913
9000a854:	9000a913 	.word	0x9000a913
9000a858:	9000a913 	.word	0x9000a913
9000a85c:	9000a913 	.word	0x9000a913
9000a860:	9000a913 	.word	0x9000a913
9000a864:	9000a8df 	.word	0x9000a8df
9000a868:	9000a913 	.word	0x9000a913
9000a86c:	9000a913 	.word	0x9000a913
9000a870:	9000a913 	.word	0x9000a913
9000a874:	9000a913 	.word	0x9000a913
9000a878:	9000a913 	.word	0x9000a913
9000a87c:	9000a913 	.word	0x9000a913
9000a880:	9000a913 	.word	0x9000a913
9000a884:	9000a913 	.word	0x9000a913
9000a888:	9000a913 	.word	0x9000a913
9000a88c:	9000a913 	.word	0x9000a913
9000a890:	9000a913 	.word	0x9000a913
9000a894:	9000a913 	.word	0x9000a913
9000a898:	9000a913 	.word	0x9000a913
9000a89c:	9000a913 	.word	0x9000a913
9000a8a0:	9000a913 	.word	0x9000a913
9000a8a4:	9000a905 	.word	0x9000a905
9000a8a8:	2b40      	cmp	r3, #64	@ 0x40
9000a8aa:	d02e      	beq.n	9000a90a <UART_SetConfig+0xa36>
9000a8ac:	e031      	b.n	9000a912 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a8ae:	f7fd f9d1 	bl	90007c54 <HAL_RCC_GetPCLK1Freq>
9000a8b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a8b4:	e033      	b.n	9000a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a8b6:	f7fd f9e3 	bl	90007c80 <HAL_RCC_GetPCLK2Freq>
9000a8ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a8bc:	e02f      	b.n	9000a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a8be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a8c2:	4618      	mov	r0, r3
9000a8c4:	f7fe fc12 	bl	900090ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a8cc:	e027      	b.n	9000a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a8ce:	f107 0318 	add.w	r3, r7, #24
9000a8d2:	4618      	mov	r0, r3
9000a8d4:	f7fe fd5e 	bl	90009394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a8d8:	69fb      	ldr	r3, [r7, #28]
9000a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a8dc:	e01f      	b.n	9000a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a8de:	4b2d      	ldr	r3, [pc, #180]	@ (9000a994 <UART_SetConfig+0xac0>)
9000a8e0:	681b      	ldr	r3, [r3, #0]
9000a8e2:	f003 0320 	and.w	r3, r3, #32
9000a8e6:	2b00      	cmp	r3, #0
9000a8e8:	d009      	beq.n	9000a8fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a8ea:	4b2a      	ldr	r3, [pc, #168]	@ (9000a994 <UART_SetConfig+0xac0>)
9000a8ec:	681b      	ldr	r3, [r3, #0]
9000a8ee:	08db      	lsrs	r3, r3, #3
9000a8f0:	f003 0303 	and.w	r3, r3, #3
9000a8f4:	4a28      	ldr	r2, [pc, #160]	@ (9000a998 <UART_SetConfig+0xac4>)
9000a8f6:	fa22 f303 	lsr.w	r3, r2, r3
9000a8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a8fc:	e00f      	b.n	9000a91e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a8fe:	4b26      	ldr	r3, [pc, #152]	@ (9000a998 <UART_SetConfig+0xac4>)
9000a900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a902:	e00c      	b.n	9000a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a904:	4b25      	ldr	r3, [pc, #148]	@ (9000a99c <UART_SetConfig+0xac8>)
9000a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a908:	e009      	b.n	9000a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a90a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a910:	e005      	b.n	9000a91e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a912:	2300      	movs	r3, #0
9000a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a916:	2301      	movs	r3, #1
9000a918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a91c:	bf00      	nop
    }

    if (pclk != 0U)
9000a91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a920:	2b00      	cmp	r3, #0
9000a922:	d021      	beq.n	9000a968 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a924:	697b      	ldr	r3, [r7, #20]
9000a926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a928:	4a1d      	ldr	r2, [pc, #116]	@ (9000a9a0 <UART_SetConfig+0xacc>)
9000a92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a92e:	461a      	mov	r2, r3
9000a930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a932:	fbb3 f2f2 	udiv	r2, r3, r2
9000a936:	697b      	ldr	r3, [r7, #20]
9000a938:	685b      	ldr	r3, [r3, #4]
9000a93a:	085b      	lsrs	r3, r3, #1
9000a93c:	441a      	add	r2, r3
9000a93e:	697b      	ldr	r3, [r7, #20]
9000a940:	685b      	ldr	r3, [r3, #4]
9000a942:	fbb2 f3f3 	udiv	r3, r2, r3
9000a946:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a94a:	2b0f      	cmp	r3, #15
9000a94c:	d909      	bls.n	9000a962 <UART_SetConfig+0xa8e>
9000a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a954:	d205      	bcs.n	9000a962 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a958:	b29a      	uxth	r2, r3
9000a95a:	697b      	ldr	r3, [r7, #20]
9000a95c:	681b      	ldr	r3, [r3, #0]
9000a95e:	60da      	str	r2, [r3, #12]
9000a960:	e002      	b.n	9000a968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a962:	2301      	movs	r3, #1
9000a964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a968:	697b      	ldr	r3, [r7, #20]
9000a96a:	2201      	movs	r2, #1
9000a96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a970:	697b      	ldr	r3, [r7, #20]
9000a972:	2201      	movs	r2, #1
9000a974:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a978:	697b      	ldr	r3, [r7, #20]
9000a97a:	2200      	movs	r2, #0
9000a97c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a97e:	697b      	ldr	r3, [r7, #20]
9000a980:	2200      	movs	r2, #0
9000a982:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a984:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a988:	4618      	mov	r0, r3
9000a98a:	3748      	adds	r7, #72	@ 0x48
9000a98c:	46bd      	mov	sp, r7
9000a98e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a992:	bf00      	nop
9000a994:	58024400 	.word	0x58024400
9000a998:	03d09000 	.word	0x03d09000
9000a99c:	003d0900 	.word	0x003d0900
9000a9a0:	9000d894 	.word	0x9000d894

9000a9a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a9a4:	b480      	push	{r7}
9000a9a6:	b083      	sub	sp, #12
9000a9a8:	af00      	add	r7, sp, #0
9000a9aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a9ac:	687b      	ldr	r3, [r7, #4]
9000a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a9b0:	f003 0308 	and.w	r3, r3, #8
9000a9b4:	2b00      	cmp	r3, #0
9000a9b6:	d00a      	beq.n	9000a9ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a9b8:	687b      	ldr	r3, [r7, #4]
9000a9ba:	681b      	ldr	r3, [r3, #0]
9000a9bc:	685b      	ldr	r3, [r3, #4]
9000a9be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a9c2:	687b      	ldr	r3, [r7, #4]
9000a9c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a9c6:	687b      	ldr	r3, [r7, #4]
9000a9c8:	681b      	ldr	r3, [r3, #0]
9000a9ca:	430a      	orrs	r2, r1
9000a9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a9ce:	687b      	ldr	r3, [r7, #4]
9000a9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a9d2:	f003 0301 	and.w	r3, r3, #1
9000a9d6:	2b00      	cmp	r3, #0
9000a9d8:	d00a      	beq.n	9000a9f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a9da:	687b      	ldr	r3, [r7, #4]
9000a9dc:	681b      	ldr	r3, [r3, #0]
9000a9de:	685b      	ldr	r3, [r3, #4]
9000a9e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a9e4:	687b      	ldr	r3, [r7, #4]
9000a9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a9e8:	687b      	ldr	r3, [r7, #4]
9000a9ea:	681b      	ldr	r3, [r3, #0]
9000a9ec:	430a      	orrs	r2, r1
9000a9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a9f0:	687b      	ldr	r3, [r7, #4]
9000a9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a9f4:	f003 0302 	and.w	r3, r3, #2
9000a9f8:	2b00      	cmp	r3, #0
9000a9fa:	d00a      	beq.n	9000aa12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a9fc:	687b      	ldr	r3, [r7, #4]
9000a9fe:	681b      	ldr	r3, [r3, #0]
9000aa00:	685b      	ldr	r3, [r3, #4]
9000aa02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000aa06:	687b      	ldr	r3, [r7, #4]
9000aa08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000aa0a:	687b      	ldr	r3, [r7, #4]
9000aa0c:	681b      	ldr	r3, [r3, #0]
9000aa0e:	430a      	orrs	r2, r1
9000aa10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000aa12:	687b      	ldr	r3, [r7, #4]
9000aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aa16:	f003 0304 	and.w	r3, r3, #4
9000aa1a:	2b00      	cmp	r3, #0
9000aa1c:	d00a      	beq.n	9000aa34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000aa1e:	687b      	ldr	r3, [r7, #4]
9000aa20:	681b      	ldr	r3, [r3, #0]
9000aa22:	685b      	ldr	r3, [r3, #4]
9000aa24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000aa28:	687b      	ldr	r3, [r7, #4]
9000aa2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000aa2c:	687b      	ldr	r3, [r7, #4]
9000aa2e:	681b      	ldr	r3, [r3, #0]
9000aa30:	430a      	orrs	r2, r1
9000aa32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000aa34:	687b      	ldr	r3, [r7, #4]
9000aa36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aa38:	f003 0310 	and.w	r3, r3, #16
9000aa3c:	2b00      	cmp	r3, #0
9000aa3e:	d00a      	beq.n	9000aa56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000aa40:	687b      	ldr	r3, [r7, #4]
9000aa42:	681b      	ldr	r3, [r3, #0]
9000aa44:	689b      	ldr	r3, [r3, #8]
9000aa46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000aa4a:	687b      	ldr	r3, [r7, #4]
9000aa4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000aa4e:	687b      	ldr	r3, [r7, #4]
9000aa50:	681b      	ldr	r3, [r3, #0]
9000aa52:	430a      	orrs	r2, r1
9000aa54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000aa56:	687b      	ldr	r3, [r7, #4]
9000aa58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aa5a:	f003 0320 	and.w	r3, r3, #32
9000aa5e:	2b00      	cmp	r3, #0
9000aa60:	d00a      	beq.n	9000aa78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000aa62:	687b      	ldr	r3, [r7, #4]
9000aa64:	681b      	ldr	r3, [r3, #0]
9000aa66:	689b      	ldr	r3, [r3, #8]
9000aa68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000aa6c:	687b      	ldr	r3, [r7, #4]
9000aa6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000aa70:	687b      	ldr	r3, [r7, #4]
9000aa72:	681b      	ldr	r3, [r3, #0]
9000aa74:	430a      	orrs	r2, r1
9000aa76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000aa78:	687b      	ldr	r3, [r7, #4]
9000aa7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aa7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000aa80:	2b00      	cmp	r3, #0
9000aa82:	d01a      	beq.n	9000aaba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000aa84:	687b      	ldr	r3, [r7, #4]
9000aa86:	681b      	ldr	r3, [r3, #0]
9000aa88:	685b      	ldr	r3, [r3, #4]
9000aa8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000aa8e:	687b      	ldr	r3, [r7, #4]
9000aa90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000aa92:	687b      	ldr	r3, [r7, #4]
9000aa94:	681b      	ldr	r3, [r3, #0]
9000aa96:	430a      	orrs	r2, r1
9000aa98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000aa9a:	687b      	ldr	r3, [r7, #4]
9000aa9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000aa9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000aaa2:	d10a      	bne.n	9000aaba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000aaa4:	687b      	ldr	r3, [r7, #4]
9000aaa6:	681b      	ldr	r3, [r3, #0]
9000aaa8:	685b      	ldr	r3, [r3, #4]
9000aaaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000aaae:	687b      	ldr	r3, [r7, #4]
9000aab0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000aab2:	687b      	ldr	r3, [r7, #4]
9000aab4:	681b      	ldr	r3, [r3, #0]
9000aab6:	430a      	orrs	r2, r1
9000aab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000aaba:	687b      	ldr	r3, [r7, #4]
9000aabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aabe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000aac2:	2b00      	cmp	r3, #0
9000aac4:	d00a      	beq.n	9000aadc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000aac6:	687b      	ldr	r3, [r7, #4]
9000aac8:	681b      	ldr	r3, [r3, #0]
9000aaca:	685b      	ldr	r3, [r3, #4]
9000aacc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000aad0:	687b      	ldr	r3, [r7, #4]
9000aad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000aad4:	687b      	ldr	r3, [r7, #4]
9000aad6:	681b      	ldr	r3, [r3, #0]
9000aad8:	430a      	orrs	r2, r1
9000aada:	605a      	str	r2, [r3, #4]
  }
}
9000aadc:	bf00      	nop
9000aade:	370c      	adds	r7, #12
9000aae0:	46bd      	mov	sp, r7
9000aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aae6:	4770      	bx	lr

9000aae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000aae8:	b580      	push	{r7, lr}
9000aaea:	b098      	sub	sp, #96	@ 0x60
9000aaec:	af02      	add	r7, sp, #8
9000aaee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000aaf0:	687b      	ldr	r3, [r7, #4]
9000aaf2:	2200      	movs	r2, #0
9000aaf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000aaf8:	f7f8 fc4a 	bl	90003390 <HAL_GetTick>
9000aafc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000aafe:	687b      	ldr	r3, [r7, #4]
9000ab00:	681b      	ldr	r3, [r3, #0]
9000ab02:	681b      	ldr	r3, [r3, #0]
9000ab04:	f003 0308 	and.w	r3, r3, #8
9000ab08:	2b08      	cmp	r3, #8
9000ab0a:	d12f      	bne.n	9000ab6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000ab0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000ab10:	9300      	str	r3, [sp, #0]
9000ab12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000ab14:	2200      	movs	r2, #0
9000ab16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000ab1a:	6878      	ldr	r0, [r7, #4]
9000ab1c:	f000 f88e 	bl	9000ac3c <UART_WaitOnFlagUntilTimeout>
9000ab20:	4603      	mov	r3, r0
9000ab22:	2b00      	cmp	r3, #0
9000ab24:	d022      	beq.n	9000ab6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000ab26:	687b      	ldr	r3, [r7, #4]
9000ab28:	681b      	ldr	r3, [r3, #0]
9000ab2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ab2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ab2e:	e853 3f00 	ldrex	r3, [r3]
9000ab32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000ab34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000ab36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000ab3a:	653b      	str	r3, [r7, #80]	@ 0x50
9000ab3c:	687b      	ldr	r3, [r7, #4]
9000ab3e:	681b      	ldr	r3, [r3, #0]
9000ab40:	461a      	mov	r2, r3
9000ab42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000ab44:	647b      	str	r3, [r7, #68]	@ 0x44
9000ab46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ab48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000ab4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000ab4c:	e841 2300 	strex	r3, r2, [r1]
9000ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000ab52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000ab54:	2b00      	cmp	r3, #0
9000ab56:	d1e6      	bne.n	9000ab26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000ab58:	687b      	ldr	r3, [r7, #4]
9000ab5a:	2220      	movs	r2, #32
9000ab5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000ab60:	687b      	ldr	r3, [r7, #4]
9000ab62:	2200      	movs	r2, #0
9000ab64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000ab68:	2303      	movs	r3, #3
9000ab6a:	e063      	b.n	9000ac34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000ab6c:	687b      	ldr	r3, [r7, #4]
9000ab6e:	681b      	ldr	r3, [r3, #0]
9000ab70:	681b      	ldr	r3, [r3, #0]
9000ab72:	f003 0304 	and.w	r3, r3, #4
9000ab76:	2b04      	cmp	r3, #4
9000ab78:	d149      	bne.n	9000ac0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000ab7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000ab7e:	9300      	str	r3, [sp, #0]
9000ab80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000ab82:	2200      	movs	r2, #0
9000ab84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000ab88:	6878      	ldr	r0, [r7, #4]
9000ab8a:	f000 f857 	bl	9000ac3c <UART_WaitOnFlagUntilTimeout>
9000ab8e:	4603      	mov	r3, r0
9000ab90:	2b00      	cmp	r3, #0
9000ab92:	d03c      	beq.n	9000ac0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000ab94:	687b      	ldr	r3, [r7, #4]
9000ab96:	681b      	ldr	r3, [r3, #0]
9000ab98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ab9c:	e853 3f00 	ldrex	r3, [r3]
9000aba0:	623b      	str	r3, [r7, #32]
   return(result);
9000aba2:	6a3b      	ldr	r3, [r7, #32]
9000aba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000aba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000abaa:	687b      	ldr	r3, [r7, #4]
9000abac:	681b      	ldr	r3, [r3, #0]
9000abae:	461a      	mov	r2, r3
9000abb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000abb2:	633b      	str	r3, [r7, #48]	@ 0x30
9000abb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000abb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000abb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000abba:	e841 2300 	strex	r3, r2, [r1]
9000abbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000abc2:	2b00      	cmp	r3, #0
9000abc4:	d1e6      	bne.n	9000ab94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000abc6:	687b      	ldr	r3, [r7, #4]
9000abc8:	681b      	ldr	r3, [r3, #0]
9000abca:	3308      	adds	r3, #8
9000abcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000abce:	693b      	ldr	r3, [r7, #16]
9000abd0:	e853 3f00 	ldrex	r3, [r3]
9000abd4:	60fb      	str	r3, [r7, #12]
   return(result);
9000abd6:	68fb      	ldr	r3, [r7, #12]
9000abd8:	f023 0301 	bic.w	r3, r3, #1
9000abdc:	64bb      	str	r3, [r7, #72]	@ 0x48
9000abde:	687b      	ldr	r3, [r7, #4]
9000abe0:	681b      	ldr	r3, [r3, #0]
9000abe2:	3308      	adds	r3, #8
9000abe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000abe6:	61fa      	str	r2, [r7, #28]
9000abe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000abea:	69b9      	ldr	r1, [r7, #24]
9000abec:	69fa      	ldr	r2, [r7, #28]
9000abee:	e841 2300 	strex	r3, r2, [r1]
9000abf2:	617b      	str	r3, [r7, #20]
   return(result);
9000abf4:	697b      	ldr	r3, [r7, #20]
9000abf6:	2b00      	cmp	r3, #0
9000abf8:	d1e5      	bne.n	9000abc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000abfa:	687b      	ldr	r3, [r7, #4]
9000abfc:	2220      	movs	r2, #32
9000abfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000ac02:	687b      	ldr	r3, [r7, #4]
9000ac04:	2200      	movs	r2, #0
9000ac06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000ac0a:	2303      	movs	r3, #3
9000ac0c:	e012      	b.n	9000ac34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000ac0e:	687b      	ldr	r3, [r7, #4]
9000ac10:	2220      	movs	r2, #32
9000ac12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000ac16:	687b      	ldr	r3, [r7, #4]
9000ac18:	2220      	movs	r2, #32
9000ac1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ac1e:	687b      	ldr	r3, [r7, #4]
9000ac20:	2200      	movs	r2, #0
9000ac22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000ac24:	687b      	ldr	r3, [r7, #4]
9000ac26:	2200      	movs	r2, #0
9000ac28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000ac2a:	687b      	ldr	r3, [r7, #4]
9000ac2c:	2200      	movs	r2, #0
9000ac2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ac32:	2300      	movs	r3, #0
}
9000ac34:	4618      	mov	r0, r3
9000ac36:	3758      	adds	r7, #88	@ 0x58
9000ac38:	46bd      	mov	sp, r7
9000ac3a:	bd80      	pop	{r7, pc}

9000ac3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000ac3c:	b580      	push	{r7, lr}
9000ac3e:	b084      	sub	sp, #16
9000ac40:	af00      	add	r7, sp, #0
9000ac42:	60f8      	str	r0, [r7, #12]
9000ac44:	60b9      	str	r1, [r7, #8]
9000ac46:	603b      	str	r3, [r7, #0]
9000ac48:	4613      	mov	r3, r2
9000ac4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000ac4c:	e04f      	b.n	9000acee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000ac4e:	69bb      	ldr	r3, [r7, #24]
9000ac50:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ac54:	d04b      	beq.n	9000acee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ac56:	f7f8 fb9b 	bl	90003390 <HAL_GetTick>
9000ac5a:	4602      	mov	r2, r0
9000ac5c:	683b      	ldr	r3, [r7, #0]
9000ac5e:	1ad3      	subs	r3, r2, r3
9000ac60:	69ba      	ldr	r2, [r7, #24]
9000ac62:	429a      	cmp	r2, r3
9000ac64:	d302      	bcc.n	9000ac6c <UART_WaitOnFlagUntilTimeout+0x30>
9000ac66:	69bb      	ldr	r3, [r7, #24]
9000ac68:	2b00      	cmp	r3, #0
9000ac6a:	d101      	bne.n	9000ac70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000ac6c:	2303      	movs	r3, #3
9000ac6e:	e04e      	b.n	9000ad0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000ac70:	68fb      	ldr	r3, [r7, #12]
9000ac72:	681b      	ldr	r3, [r3, #0]
9000ac74:	681b      	ldr	r3, [r3, #0]
9000ac76:	f003 0304 	and.w	r3, r3, #4
9000ac7a:	2b00      	cmp	r3, #0
9000ac7c:	d037      	beq.n	9000acee <UART_WaitOnFlagUntilTimeout+0xb2>
9000ac7e:	68bb      	ldr	r3, [r7, #8]
9000ac80:	2b80      	cmp	r3, #128	@ 0x80
9000ac82:	d034      	beq.n	9000acee <UART_WaitOnFlagUntilTimeout+0xb2>
9000ac84:	68bb      	ldr	r3, [r7, #8]
9000ac86:	2b40      	cmp	r3, #64	@ 0x40
9000ac88:	d031      	beq.n	9000acee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000ac8a:	68fb      	ldr	r3, [r7, #12]
9000ac8c:	681b      	ldr	r3, [r3, #0]
9000ac8e:	69db      	ldr	r3, [r3, #28]
9000ac90:	f003 0308 	and.w	r3, r3, #8
9000ac94:	2b08      	cmp	r3, #8
9000ac96:	d110      	bne.n	9000acba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000ac98:	68fb      	ldr	r3, [r7, #12]
9000ac9a:	681b      	ldr	r3, [r3, #0]
9000ac9c:	2208      	movs	r2, #8
9000ac9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000aca0:	68f8      	ldr	r0, [r7, #12]
9000aca2:	f000 f839 	bl	9000ad18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000aca6:	68fb      	ldr	r3, [r7, #12]
9000aca8:	2208      	movs	r2, #8
9000acaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000acae:	68fb      	ldr	r3, [r7, #12]
9000acb0:	2200      	movs	r2, #0
9000acb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000acb6:	2301      	movs	r3, #1
9000acb8:	e029      	b.n	9000ad0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000acba:	68fb      	ldr	r3, [r7, #12]
9000acbc:	681b      	ldr	r3, [r3, #0]
9000acbe:	69db      	ldr	r3, [r3, #28]
9000acc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000acc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000acc8:	d111      	bne.n	9000acee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000acca:	68fb      	ldr	r3, [r7, #12]
9000accc:	681b      	ldr	r3, [r3, #0]
9000acce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000acd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000acd4:	68f8      	ldr	r0, [r7, #12]
9000acd6:	f000 f81f 	bl	9000ad18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000acda:	68fb      	ldr	r3, [r7, #12]
9000acdc:	2220      	movs	r2, #32
9000acde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ace2:	68fb      	ldr	r3, [r7, #12]
9000ace4:	2200      	movs	r2, #0
9000ace6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000acea:	2303      	movs	r3, #3
9000acec:	e00f      	b.n	9000ad0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000acee:	68fb      	ldr	r3, [r7, #12]
9000acf0:	681b      	ldr	r3, [r3, #0]
9000acf2:	69da      	ldr	r2, [r3, #28]
9000acf4:	68bb      	ldr	r3, [r7, #8]
9000acf6:	4013      	ands	r3, r2
9000acf8:	68ba      	ldr	r2, [r7, #8]
9000acfa:	429a      	cmp	r2, r3
9000acfc:	bf0c      	ite	eq
9000acfe:	2301      	moveq	r3, #1
9000ad00:	2300      	movne	r3, #0
9000ad02:	b2db      	uxtb	r3, r3
9000ad04:	461a      	mov	r2, r3
9000ad06:	79fb      	ldrb	r3, [r7, #7]
9000ad08:	429a      	cmp	r2, r3
9000ad0a:	d0a0      	beq.n	9000ac4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000ad0c:	2300      	movs	r3, #0
}
9000ad0e:	4618      	mov	r0, r3
9000ad10:	3710      	adds	r7, #16
9000ad12:	46bd      	mov	sp, r7
9000ad14:	bd80      	pop	{r7, pc}
	...

9000ad18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000ad18:	b480      	push	{r7}
9000ad1a:	b095      	sub	sp, #84	@ 0x54
9000ad1c:	af00      	add	r7, sp, #0
9000ad1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000ad20:	687b      	ldr	r3, [r7, #4]
9000ad22:	681b      	ldr	r3, [r3, #0]
9000ad24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ad26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000ad28:	e853 3f00 	ldrex	r3, [r3]
9000ad2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000ad30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000ad34:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000ad36:	687b      	ldr	r3, [r7, #4]
9000ad38:	681b      	ldr	r3, [r3, #0]
9000ad3a:	461a      	mov	r2, r3
9000ad3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000ad3e:	643b      	str	r3, [r7, #64]	@ 0x40
9000ad40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ad42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000ad44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000ad46:	e841 2300 	strex	r3, r2, [r1]
9000ad4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000ad4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ad4e:	2b00      	cmp	r3, #0
9000ad50:	d1e6      	bne.n	9000ad20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000ad52:	687b      	ldr	r3, [r7, #4]
9000ad54:	681b      	ldr	r3, [r3, #0]
9000ad56:	3308      	adds	r3, #8
9000ad58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ad5a:	6a3b      	ldr	r3, [r7, #32]
9000ad5c:	e853 3f00 	ldrex	r3, [r3]
9000ad60:	61fb      	str	r3, [r7, #28]
   return(result);
9000ad62:	69fa      	ldr	r2, [r7, #28]
9000ad64:	4b1e      	ldr	r3, [pc, #120]	@ (9000ade0 <UART_EndRxTransfer+0xc8>)
9000ad66:	4013      	ands	r3, r2
9000ad68:	64bb      	str	r3, [r7, #72]	@ 0x48
9000ad6a:	687b      	ldr	r3, [r7, #4]
9000ad6c:	681b      	ldr	r3, [r3, #0]
9000ad6e:	3308      	adds	r3, #8
9000ad70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000ad72:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000ad74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ad76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000ad78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000ad7a:	e841 2300 	strex	r3, r2, [r1]
9000ad7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ad82:	2b00      	cmp	r3, #0
9000ad84:	d1e5      	bne.n	9000ad52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000ad86:	687b      	ldr	r3, [r7, #4]
9000ad88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000ad8a:	2b01      	cmp	r3, #1
9000ad8c:	d118      	bne.n	9000adc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000ad8e:	687b      	ldr	r3, [r7, #4]
9000ad90:	681b      	ldr	r3, [r3, #0]
9000ad92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ad94:	68fb      	ldr	r3, [r7, #12]
9000ad96:	e853 3f00 	ldrex	r3, [r3]
9000ad9a:	60bb      	str	r3, [r7, #8]
   return(result);
9000ad9c:	68bb      	ldr	r3, [r7, #8]
9000ad9e:	f023 0310 	bic.w	r3, r3, #16
9000ada2:	647b      	str	r3, [r7, #68]	@ 0x44
9000ada4:	687b      	ldr	r3, [r7, #4]
9000ada6:	681b      	ldr	r3, [r3, #0]
9000ada8:	461a      	mov	r2, r3
9000adaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000adac:	61bb      	str	r3, [r7, #24]
9000adae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000adb0:	6979      	ldr	r1, [r7, #20]
9000adb2:	69ba      	ldr	r2, [r7, #24]
9000adb4:	e841 2300 	strex	r3, r2, [r1]
9000adb8:	613b      	str	r3, [r7, #16]
   return(result);
9000adba:	693b      	ldr	r3, [r7, #16]
9000adbc:	2b00      	cmp	r3, #0
9000adbe:	d1e6      	bne.n	9000ad8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000adc0:	687b      	ldr	r3, [r7, #4]
9000adc2:	2220      	movs	r2, #32
9000adc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000adc8:	687b      	ldr	r3, [r7, #4]
9000adca:	2200      	movs	r2, #0
9000adcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000adce:	687b      	ldr	r3, [r7, #4]
9000add0:	2200      	movs	r2, #0
9000add2:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000add4:	bf00      	nop
9000add6:	3754      	adds	r7, #84	@ 0x54
9000add8:	46bd      	mov	sp, r7
9000adda:	f85d 7b04 	ldr.w	r7, [sp], #4
9000adde:	4770      	bx	lr
9000ade0:	effffffe 	.word	0xeffffffe

9000ade4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000ade4:	b480      	push	{r7}
9000ade6:	b085      	sub	sp, #20
9000ade8:	af00      	add	r7, sp, #0
9000adea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000adec:	687b      	ldr	r3, [r7, #4]
9000adee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000adf2:	2b01      	cmp	r3, #1
9000adf4:	d101      	bne.n	9000adfa <HAL_UARTEx_DisableFifoMode+0x16>
9000adf6:	2302      	movs	r3, #2
9000adf8:	e027      	b.n	9000ae4a <HAL_UARTEx_DisableFifoMode+0x66>
9000adfa:	687b      	ldr	r3, [r7, #4]
9000adfc:	2201      	movs	r2, #1
9000adfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ae02:	687b      	ldr	r3, [r7, #4]
9000ae04:	2224      	movs	r2, #36	@ 0x24
9000ae06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ae0a:	687b      	ldr	r3, [r7, #4]
9000ae0c:	681b      	ldr	r3, [r3, #0]
9000ae0e:	681b      	ldr	r3, [r3, #0]
9000ae10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ae12:	687b      	ldr	r3, [r7, #4]
9000ae14:	681b      	ldr	r3, [r3, #0]
9000ae16:	681a      	ldr	r2, [r3, #0]
9000ae18:	687b      	ldr	r3, [r7, #4]
9000ae1a:	681b      	ldr	r3, [r3, #0]
9000ae1c:	f022 0201 	bic.w	r2, r2, #1
9000ae20:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000ae22:	68fb      	ldr	r3, [r7, #12]
9000ae24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000ae28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000ae2a:	687b      	ldr	r3, [r7, #4]
9000ae2c:	2200      	movs	r2, #0
9000ae2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ae30:	687b      	ldr	r3, [r7, #4]
9000ae32:	681b      	ldr	r3, [r3, #0]
9000ae34:	68fa      	ldr	r2, [r7, #12]
9000ae36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ae38:	687b      	ldr	r3, [r7, #4]
9000ae3a:	2220      	movs	r2, #32
9000ae3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ae40:	687b      	ldr	r3, [r7, #4]
9000ae42:	2200      	movs	r2, #0
9000ae44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ae48:	2300      	movs	r3, #0
}
9000ae4a:	4618      	mov	r0, r3
9000ae4c:	3714      	adds	r7, #20
9000ae4e:	46bd      	mov	sp, r7
9000ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae54:	4770      	bx	lr

9000ae56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ae56:	b580      	push	{r7, lr}
9000ae58:	b084      	sub	sp, #16
9000ae5a:	af00      	add	r7, sp, #0
9000ae5c:	6078      	str	r0, [r7, #4]
9000ae5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ae60:	687b      	ldr	r3, [r7, #4]
9000ae62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ae66:	2b01      	cmp	r3, #1
9000ae68:	d101      	bne.n	9000ae6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000ae6a:	2302      	movs	r3, #2
9000ae6c:	e02d      	b.n	9000aeca <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000ae6e:	687b      	ldr	r3, [r7, #4]
9000ae70:	2201      	movs	r2, #1
9000ae72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ae76:	687b      	ldr	r3, [r7, #4]
9000ae78:	2224      	movs	r2, #36	@ 0x24
9000ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ae7e:	687b      	ldr	r3, [r7, #4]
9000ae80:	681b      	ldr	r3, [r3, #0]
9000ae82:	681b      	ldr	r3, [r3, #0]
9000ae84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ae86:	687b      	ldr	r3, [r7, #4]
9000ae88:	681b      	ldr	r3, [r3, #0]
9000ae8a:	681a      	ldr	r2, [r3, #0]
9000ae8c:	687b      	ldr	r3, [r7, #4]
9000ae8e:	681b      	ldr	r3, [r3, #0]
9000ae90:	f022 0201 	bic.w	r2, r2, #1
9000ae94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000ae96:	687b      	ldr	r3, [r7, #4]
9000ae98:	681b      	ldr	r3, [r3, #0]
9000ae9a:	689b      	ldr	r3, [r3, #8]
9000ae9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000aea0:	687b      	ldr	r3, [r7, #4]
9000aea2:	681b      	ldr	r3, [r3, #0]
9000aea4:	683a      	ldr	r2, [r7, #0]
9000aea6:	430a      	orrs	r2, r1
9000aea8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000aeaa:	6878      	ldr	r0, [r7, #4]
9000aeac:	f000 f850 	bl	9000af50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000aeb0:	687b      	ldr	r3, [r7, #4]
9000aeb2:	681b      	ldr	r3, [r3, #0]
9000aeb4:	68fa      	ldr	r2, [r7, #12]
9000aeb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000aeb8:	687b      	ldr	r3, [r7, #4]
9000aeba:	2220      	movs	r2, #32
9000aebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000aec0:	687b      	ldr	r3, [r7, #4]
9000aec2:	2200      	movs	r2, #0
9000aec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000aec8:	2300      	movs	r3, #0
}
9000aeca:	4618      	mov	r0, r3
9000aecc:	3710      	adds	r7, #16
9000aece:	46bd      	mov	sp, r7
9000aed0:	bd80      	pop	{r7, pc}

9000aed2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000aed2:	b580      	push	{r7, lr}
9000aed4:	b084      	sub	sp, #16
9000aed6:	af00      	add	r7, sp, #0
9000aed8:	6078      	str	r0, [r7, #4]
9000aeda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000aedc:	687b      	ldr	r3, [r7, #4]
9000aede:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000aee2:	2b01      	cmp	r3, #1
9000aee4:	d101      	bne.n	9000aeea <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000aee6:	2302      	movs	r3, #2
9000aee8:	e02d      	b.n	9000af46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000aeea:	687b      	ldr	r3, [r7, #4]
9000aeec:	2201      	movs	r2, #1
9000aeee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000aef2:	687b      	ldr	r3, [r7, #4]
9000aef4:	2224      	movs	r2, #36	@ 0x24
9000aef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000aefa:	687b      	ldr	r3, [r7, #4]
9000aefc:	681b      	ldr	r3, [r3, #0]
9000aefe:	681b      	ldr	r3, [r3, #0]
9000af00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000af02:	687b      	ldr	r3, [r7, #4]
9000af04:	681b      	ldr	r3, [r3, #0]
9000af06:	681a      	ldr	r2, [r3, #0]
9000af08:	687b      	ldr	r3, [r7, #4]
9000af0a:	681b      	ldr	r3, [r3, #0]
9000af0c:	f022 0201 	bic.w	r2, r2, #1
9000af10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000af12:	687b      	ldr	r3, [r7, #4]
9000af14:	681b      	ldr	r3, [r3, #0]
9000af16:	689b      	ldr	r3, [r3, #8]
9000af18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000af1c:	687b      	ldr	r3, [r7, #4]
9000af1e:	681b      	ldr	r3, [r3, #0]
9000af20:	683a      	ldr	r2, [r7, #0]
9000af22:	430a      	orrs	r2, r1
9000af24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000af26:	6878      	ldr	r0, [r7, #4]
9000af28:	f000 f812 	bl	9000af50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000af2c:	687b      	ldr	r3, [r7, #4]
9000af2e:	681b      	ldr	r3, [r3, #0]
9000af30:	68fa      	ldr	r2, [r7, #12]
9000af32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000af34:	687b      	ldr	r3, [r7, #4]
9000af36:	2220      	movs	r2, #32
9000af38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000af3c:	687b      	ldr	r3, [r7, #4]
9000af3e:	2200      	movs	r2, #0
9000af40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000af44:	2300      	movs	r3, #0
}
9000af46:	4618      	mov	r0, r3
9000af48:	3710      	adds	r7, #16
9000af4a:	46bd      	mov	sp, r7
9000af4c:	bd80      	pop	{r7, pc}
	...

9000af50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000af50:	b480      	push	{r7}
9000af52:	b085      	sub	sp, #20
9000af54:	af00      	add	r7, sp, #0
9000af56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000af58:	687b      	ldr	r3, [r7, #4]
9000af5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000af5c:	2b00      	cmp	r3, #0
9000af5e:	d108      	bne.n	9000af72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000af60:	687b      	ldr	r3, [r7, #4]
9000af62:	2201      	movs	r2, #1
9000af64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000af68:	687b      	ldr	r3, [r7, #4]
9000af6a:	2201      	movs	r2, #1
9000af6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000af70:	e031      	b.n	9000afd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000af72:	2310      	movs	r3, #16
9000af74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000af76:	2310      	movs	r3, #16
9000af78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000af7a:	687b      	ldr	r3, [r7, #4]
9000af7c:	681b      	ldr	r3, [r3, #0]
9000af7e:	689b      	ldr	r3, [r3, #8]
9000af80:	0e5b      	lsrs	r3, r3, #25
9000af82:	b2db      	uxtb	r3, r3
9000af84:	f003 0307 	and.w	r3, r3, #7
9000af88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000af8a:	687b      	ldr	r3, [r7, #4]
9000af8c:	681b      	ldr	r3, [r3, #0]
9000af8e:	689b      	ldr	r3, [r3, #8]
9000af90:	0f5b      	lsrs	r3, r3, #29
9000af92:	b2db      	uxtb	r3, r3
9000af94:	f003 0307 	and.w	r3, r3, #7
9000af98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000af9a:	7bbb      	ldrb	r3, [r7, #14]
9000af9c:	7b3a      	ldrb	r2, [r7, #12]
9000af9e:	4911      	ldr	r1, [pc, #68]	@ (9000afe4 <UARTEx_SetNbDataToProcess+0x94>)
9000afa0:	5c8a      	ldrb	r2, [r1, r2]
9000afa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000afa6:	7b3a      	ldrb	r2, [r7, #12]
9000afa8:	490f      	ldr	r1, [pc, #60]	@ (9000afe8 <UARTEx_SetNbDataToProcess+0x98>)
9000afaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000afac:	fb93 f3f2 	sdiv	r3, r3, r2
9000afb0:	b29a      	uxth	r2, r3
9000afb2:	687b      	ldr	r3, [r7, #4]
9000afb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000afb8:	7bfb      	ldrb	r3, [r7, #15]
9000afba:	7b7a      	ldrb	r2, [r7, #13]
9000afbc:	4909      	ldr	r1, [pc, #36]	@ (9000afe4 <UARTEx_SetNbDataToProcess+0x94>)
9000afbe:	5c8a      	ldrb	r2, [r1, r2]
9000afc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000afc4:	7b7a      	ldrb	r2, [r7, #13]
9000afc6:	4908      	ldr	r1, [pc, #32]	@ (9000afe8 <UARTEx_SetNbDataToProcess+0x98>)
9000afc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000afca:	fb93 f3f2 	sdiv	r3, r3, r2
9000afce:	b29a      	uxth	r2, r3
9000afd0:	687b      	ldr	r3, [r7, #4]
9000afd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000afd6:	bf00      	nop
9000afd8:	3714      	adds	r7, #20
9000afda:	46bd      	mov	sp, r7
9000afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000afe0:	4770      	bx	lr
9000afe2:	bf00      	nop
9000afe4:	9000d8ac 	.word	0x9000d8ac
9000afe8:	9000d8b4 	.word	0x9000d8b4

9000afec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000afec:	b480      	push	{r7}
9000afee:	b083      	sub	sp, #12
9000aff0:	af00      	add	r7, sp, #0
9000aff2:	6078      	str	r0, [r7, #4]
9000aff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000aff6:	683b      	ldr	r3, [r7, #0]
9000aff8:	681b      	ldr	r3, [r3, #0]
9000affa:	2b00      	cmp	r3, #0
9000affc:	d121      	bne.n	9000b042 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000affe:	687b      	ldr	r3, [r7, #4]
9000b000:	681a      	ldr	r2, [r3, #0]
9000b002:	4b27      	ldr	r3, [pc, #156]	@ (9000b0a0 <FMC_SDRAM_Init+0xb4>)
9000b004:	4013      	ands	r3, r2
9000b006:	683a      	ldr	r2, [r7, #0]
9000b008:	6851      	ldr	r1, [r2, #4]
9000b00a:	683a      	ldr	r2, [r7, #0]
9000b00c:	6892      	ldr	r2, [r2, #8]
9000b00e:	4311      	orrs	r1, r2
9000b010:	683a      	ldr	r2, [r7, #0]
9000b012:	68d2      	ldr	r2, [r2, #12]
9000b014:	4311      	orrs	r1, r2
9000b016:	683a      	ldr	r2, [r7, #0]
9000b018:	6912      	ldr	r2, [r2, #16]
9000b01a:	4311      	orrs	r1, r2
9000b01c:	683a      	ldr	r2, [r7, #0]
9000b01e:	6952      	ldr	r2, [r2, #20]
9000b020:	4311      	orrs	r1, r2
9000b022:	683a      	ldr	r2, [r7, #0]
9000b024:	6992      	ldr	r2, [r2, #24]
9000b026:	4311      	orrs	r1, r2
9000b028:	683a      	ldr	r2, [r7, #0]
9000b02a:	69d2      	ldr	r2, [r2, #28]
9000b02c:	4311      	orrs	r1, r2
9000b02e:	683a      	ldr	r2, [r7, #0]
9000b030:	6a12      	ldr	r2, [r2, #32]
9000b032:	4311      	orrs	r1, r2
9000b034:	683a      	ldr	r2, [r7, #0]
9000b036:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000b038:	430a      	orrs	r2, r1
9000b03a:	431a      	orrs	r2, r3
9000b03c:	687b      	ldr	r3, [r7, #4]
9000b03e:	601a      	str	r2, [r3, #0]
9000b040:	e026      	b.n	9000b090 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000b042:	687b      	ldr	r3, [r7, #4]
9000b044:	681b      	ldr	r3, [r3, #0]
9000b046:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000b04a:	683b      	ldr	r3, [r7, #0]
9000b04c:	69d9      	ldr	r1, [r3, #28]
9000b04e:	683b      	ldr	r3, [r7, #0]
9000b050:	6a1b      	ldr	r3, [r3, #32]
9000b052:	4319      	orrs	r1, r3
9000b054:	683b      	ldr	r3, [r7, #0]
9000b056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b058:	430b      	orrs	r3, r1
9000b05a:	431a      	orrs	r2, r3
9000b05c:	687b      	ldr	r3, [r7, #4]
9000b05e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000b060:	687b      	ldr	r3, [r7, #4]
9000b062:	685a      	ldr	r2, [r3, #4]
9000b064:	4b0e      	ldr	r3, [pc, #56]	@ (9000b0a0 <FMC_SDRAM_Init+0xb4>)
9000b066:	4013      	ands	r3, r2
9000b068:	683a      	ldr	r2, [r7, #0]
9000b06a:	6851      	ldr	r1, [r2, #4]
9000b06c:	683a      	ldr	r2, [r7, #0]
9000b06e:	6892      	ldr	r2, [r2, #8]
9000b070:	4311      	orrs	r1, r2
9000b072:	683a      	ldr	r2, [r7, #0]
9000b074:	68d2      	ldr	r2, [r2, #12]
9000b076:	4311      	orrs	r1, r2
9000b078:	683a      	ldr	r2, [r7, #0]
9000b07a:	6912      	ldr	r2, [r2, #16]
9000b07c:	4311      	orrs	r1, r2
9000b07e:	683a      	ldr	r2, [r7, #0]
9000b080:	6952      	ldr	r2, [r2, #20]
9000b082:	4311      	orrs	r1, r2
9000b084:	683a      	ldr	r2, [r7, #0]
9000b086:	6992      	ldr	r2, [r2, #24]
9000b088:	430a      	orrs	r2, r1
9000b08a:	431a      	orrs	r2, r3
9000b08c:	687b      	ldr	r3, [r7, #4]
9000b08e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000b090:	2300      	movs	r3, #0
}
9000b092:	4618      	mov	r0, r3
9000b094:	370c      	adds	r7, #12
9000b096:	46bd      	mov	sp, r7
9000b098:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b09c:	4770      	bx	lr
9000b09e:	bf00      	nop
9000b0a0:	ffff8000 	.word	0xffff8000

9000b0a4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000b0a4:	b480      	push	{r7}
9000b0a6:	b085      	sub	sp, #20
9000b0a8:	af00      	add	r7, sp, #0
9000b0aa:	60f8      	str	r0, [r7, #12]
9000b0ac:	60b9      	str	r1, [r7, #8]
9000b0ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000b0b0:	687b      	ldr	r3, [r7, #4]
9000b0b2:	2b00      	cmp	r3, #0
9000b0b4:	d128      	bne.n	9000b108 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b0b6:	68fb      	ldr	r3, [r7, #12]
9000b0b8:	689b      	ldr	r3, [r3, #8]
9000b0ba:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b0be:	68bb      	ldr	r3, [r7, #8]
9000b0c0:	681b      	ldr	r3, [r3, #0]
9000b0c2:	1e59      	subs	r1, r3, #1
9000b0c4:	68bb      	ldr	r3, [r7, #8]
9000b0c6:	685b      	ldr	r3, [r3, #4]
9000b0c8:	3b01      	subs	r3, #1
9000b0ca:	011b      	lsls	r3, r3, #4
9000b0cc:	4319      	orrs	r1, r3
9000b0ce:	68bb      	ldr	r3, [r7, #8]
9000b0d0:	689b      	ldr	r3, [r3, #8]
9000b0d2:	3b01      	subs	r3, #1
9000b0d4:	021b      	lsls	r3, r3, #8
9000b0d6:	4319      	orrs	r1, r3
9000b0d8:	68bb      	ldr	r3, [r7, #8]
9000b0da:	68db      	ldr	r3, [r3, #12]
9000b0dc:	3b01      	subs	r3, #1
9000b0de:	031b      	lsls	r3, r3, #12
9000b0e0:	4319      	orrs	r1, r3
9000b0e2:	68bb      	ldr	r3, [r7, #8]
9000b0e4:	691b      	ldr	r3, [r3, #16]
9000b0e6:	3b01      	subs	r3, #1
9000b0e8:	041b      	lsls	r3, r3, #16
9000b0ea:	4319      	orrs	r1, r3
9000b0ec:	68bb      	ldr	r3, [r7, #8]
9000b0ee:	695b      	ldr	r3, [r3, #20]
9000b0f0:	3b01      	subs	r3, #1
9000b0f2:	051b      	lsls	r3, r3, #20
9000b0f4:	4319      	orrs	r1, r3
9000b0f6:	68bb      	ldr	r3, [r7, #8]
9000b0f8:	699b      	ldr	r3, [r3, #24]
9000b0fa:	3b01      	subs	r3, #1
9000b0fc:	061b      	lsls	r3, r3, #24
9000b0fe:	430b      	orrs	r3, r1
9000b100:	431a      	orrs	r2, r3
9000b102:	68fb      	ldr	r3, [r7, #12]
9000b104:	609a      	str	r2, [r3, #8]
9000b106:	e02d      	b.n	9000b164 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b108:	68fb      	ldr	r3, [r7, #12]
9000b10a:	689a      	ldr	r2, [r3, #8]
9000b10c:	4b19      	ldr	r3, [pc, #100]	@ (9000b174 <FMC_SDRAM_Timing_Init+0xd0>)
9000b10e:	4013      	ands	r3, r2
9000b110:	68ba      	ldr	r2, [r7, #8]
9000b112:	68d2      	ldr	r2, [r2, #12]
9000b114:	3a01      	subs	r2, #1
9000b116:	0311      	lsls	r1, r2, #12
9000b118:	68ba      	ldr	r2, [r7, #8]
9000b11a:	6952      	ldr	r2, [r2, #20]
9000b11c:	3a01      	subs	r2, #1
9000b11e:	0512      	lsls	r2, r2, #20
9000b120:	430a      	orrs	r2, r1
9000b122:	431a      	orrs	r2, r3
9000b124:	68fb      	ldr	r3, [r7, #12]
9000b126:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000b128:	68fb      	ldr	r3, [r7, #12]
9000b12a:	68db      	ldr	r3, [r3, #12]
9000b12c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b130:	68bb      	ldr	r3, [r7, #8]
9000b132:	681b      	ldr	r3, [r3, #0]
9000b134:	1e59      	subs	r1, r3, #1
9000b136:	68bb      	ldr	r3, [r7, #8]
9000b138:	685b      	ldr	r3, [r3, #4]
9000b13a:	3b01      	subs	r3, #1
9000b13c:	011b      	lsls	r3, r3, #4
9000b13e:	4319      	orrs	r1, r3
9000b140:	68bb      	ldr	r3, [r7, #8]
9000b142:	689b      	ldr	r3, [r3, #8]
9000b144:	3b01      	subs	r3, #1
9000b146:	021b      	lsls	r3, r3, #8
9000b148:	4319      	orrs	r1, r3
9000b14a:	68bb      	ldr	r3, [r7, #8]
9000b14c:	691b      	ldr	r3, [r3, #16]
9000b14e:	3b01      	subs	r3, #1
9000b150:	041b      	lsls	r3, r3, #16
9000b152:	4319      	orrs	r1, r3
9000b154:	68bb      	ldr	r3, [r7, #8]
9000b156:	699b      	ldr	r3, [r3, #24]
9000b158:	3b01      	subs	r3, #1
9000b15a:	061b      	lsls	r3, r3, #24
9000b15c:	430b      	orrs	r3, r1
9000b15e:	431a      	orrs	r2, r3
9000b160:	68fb      	ldr	r3, [r7, #12]
9000b162:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000b164:	2300      	movs	r3, #0
}
9000b166:	4618      	mov	r0, r3
9000b168:	3714      	adds	r7, #20
9000b16a:	46bd      	mov	sp, r7
9000b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b170:	4770      	bx	lr
9000b172:	bf00      	nop
9000b174:	ff0f0fff 	.word	0xff0f0fff

9000b178 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000b178:	b480      	push	{r7}
9000b17a:	b085      	sub	sp, #20
9000b17c:	af00      	add	r7, sp, #0
9000b17e:	60f8      	str	r0, [r7, #12]
9000b180:	60b9      	str	r1, [r7, #8]
9000b182:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000b184:	68fb      	ldr	r3, [r7, #12]
9000b186:	691a      	ldr	r2, [r3, #16]
9000b188:	4b0c      	ldr	r3, [pc, #48]	@ (9000b1bc <FMC_SDRAM_SendCommand+0x44>)
9000b18a:	4013      	ands	r3, r2
9000b18c:	68ba      	ldr	r2, [r7, #8]
9000b18e:	6811      	ldr	r1, [r2, #0]
9000b190:	68ba      	ldr	r2, [r7, #8]
9000b192:	6852      	ldr	r2, [r2, #4]
9000b194:	4311      	orrs	r1, r2
9000b196:	68ba      	ldr	r2, [r7, #8]
9000b198:	6892      	ldr	r2, [r2, #8]
9000b19a:	3a01      	subs	r2, #1
9000b19c:	0152      	lsls	r2, r2, #5
9000b19e:	4311      	orrs	r1, r2
9000b1a0:	68ba      	ldr	r2, [r7, #8]
9000b1a2:	68d2      	ldr	r2, [r2, #12]
9000b1a4:	0252      	lsls	r2, r2, #9
9000b1a6:	430a      	orrs	r2, r1
9000b1a8:	431a      	orrs	r2, r3
9000b1aa:	68fb      	ldr	r3, [r7, #12]
9000b1ac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000b1ae:	2300      	movs	r3, #0
}
9000b1b0:	4618      	mov	r0, r3
9000b1b2:	3714      	adds	r7, #20
9000b1b4:	46bd      	mov	sp, r7
9000b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1ba:	4770      	bx	lr
9000b1bc:	ffc00000 	.word	0xffc00000

9000b1c0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000b1c0:	b480      	push	{r7}
9000b1c2:	b083      	sub	sp, #12
9000b1c4:	af00      	add	r7, sp, #0
9000b1c6:	6078      	str	r0, [r7, #4]
9000b1c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000b1ca:	687b      	ldr	r3, [r7, #4]
9000b1cc:	695a      	ldr	r2, [r3, #20]
9000b1ce:	4b07      	ldr	r3, [pc, #28]	@ (9000b1ec <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000b1d0:	4013      	ands	r3, r2
9000b1d2:	683a      	ldr	r2, [r7, #0]
9000b1d4:	0052      	lsls	r2, r2, #1
9000b1d6:	431a      	orrs	r2, r3
9000b1d8:	687b      	ldr	r3, [r7, #4]
9000b1da:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000b1dc:	2300      	movs	r3, #0
}
9000b1de:	4618      	mov	r0, r3
9000b1e0:	370c      	adds	r7, #12
9000b1e2:	46bd      	mov	sp, r7
9000b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1e8:	4770      	bx	lr
9000b1ea:	bf00      	nop
9000b1ec:	ffffc001 	.word	0xffffc001

9000b1f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b1f0:	b480      	push	{r7}
9000b1f2:	b083      	sub	sp, #12
9000b1f4:	af00      	add	r7, sp, #0
9000b1f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000b1f8:	687b      	ldr	r3, [r7, #4]
9000b1fa:	689b      	ldr	r3, [r3, #8]
9000b1fc:	f043 0201 	orr.w	r2, r3, #1
9000b200:	687b      	ldr	r3, [r7, #4]
9000b202:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b204:	2300      	movs	r3, #0
}
9000b206:	4618      	mov	r0, r3
9000b208:	370c      	adds	r7, #12
9000b20a:	46bd      	mov	sp, r7
9000b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b210:	4770      	bx	lr

9000b212 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b212:	b480      	push	{r7}
9000b214:	b083      	sub	sp, #12
9000b216:	af00      	add	r7, sp, #0
9000b218:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000b21a:	687b      	ldr	r3, [r7, #4]
9000b21c:	689b      	ldr	r3, [r3, #8]
9000b21e:	f023 0201 	bic.w	r2, r3, #1
9000b222:	687b      	ldr	r3, [r7, #4]
9000b224:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b226:	2300      	movs	r3, #0
}
9000b228:	4618      	mov	r0, r3
9000b22a:	370c      	adds	r7, #12
9000b22c:	46bd      	mov	sp, r7
9000b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b232:	4770      	bx	lr

9000b234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000b234:	b480      	push	{r7}
9000b236:	b085      	sub	sp, #20
9000b238:	af00      	add	r7, sp, #0
9000b23a:	6078      	str	r0, [r7, #4]
9000b23c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000b23e:	2300      	movs	r3, #0
9000b240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b242:	68fb      	ldr	r3, [r7, #12]
9000b244:	3301      	adds	r3, #1
9000b246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b248:	68fb      	ldr	r3, [r7, #12]
9000b24a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b24e:	d901      	bls.n	9000b254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000b250:	2303      	movs	r3, #3
9000b252:	e01b      	b.n	9000b28c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b254:	687b      	ldr	r3, [r7, #4]
9000b256:	691b      	ldr	r3, [r3, #16]
9000b258:	2b00      	cmp	r3, #0
9000b25a:	daf2      	bge.n	9000b242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000b25c:	2300      	movs	r3, #0
9000b25e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000b260:	683b      	ldr	r3, [r7, #0]
9000b262:	019b      	lsls	r3, r3, #6
9000b264:	f043 0220 	orr.w	r2, r3, #32
9000b268:	687b      	ldr	r3, [r7, #4]
9000b26a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b26c:	68fb      	ldr	r3, [r7, #12]
9000b26e:	3301      	adds	r3, #1
9000b270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b272:	68fb      	ldr	r3, [r7, #12]
9000b274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b278:	d901      	bls.n	9000b27e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000b27a:	2303      	movs	r3, #3
9000b27c:	e006      	b.n	9000b28c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000b27e:	687b      	ldr	r3, [r7, #4]
9000b280:	691b      	ldr	r3, [r3, #16]
9000b282:	f003 0320 	and.w	r3, r3, #32
9000b286:	2b20      	cmp	r3, #32
9000b288:	d0f0      	beq.n	9000b26c <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000b28a:	2300      	movs	r3, #0
}
9000b28c:	4618      	mov	r0, r3
9000b28e:	3714      	adds	r7, #20
9000b290:	46bd      	mov	sp, r7
9000b292:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b296:	4770      	bx	lr

9000b298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000b298:	b480      	push	{r7}
9000b29a:	b085      	sub	sp, #20
9000b29c:	af00      	add	r7, sp, #0
9000b29e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000b2a0:	2300      	movs	r3, #0
9000b2a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b2a4:	68fb      	ldr	r3, [r7, #12]
9000b2a6:	3301      	adds	r3, #1
9000b2a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b2aa:	68fb      	ldr	r3, [r7, #12]
9000b2ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b2b0:	d901      	bls.n	9000b2b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000b2b2:	2303      	movs	r3, #3
9000b2b4:	e018      	b.n	9000b2e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b2b6:	687b      	ldr	r3, [r7, #4]
9000b2b8:	691b      	ldr	r3, [r3, #16]
9000b2ba:	2b00      	cmp	r3, #0
9000b2bc:	daf2      	bge.n	9000b2a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000b2be:	2300      	movs	r3, #0
9000b2c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000b2c2:	687b      	ldr	r3, [r7, #4]
9000b2c4:	2210      	movs	r2, #16
9000b2c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b2c8:	68fb      	ldr	r3, [r7, #12]
9000b2ca:	3301      	adds	r3, #1
9000b2cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b2ce:	68fb      	ldr	r3, [r7, #12]
9000b2d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b2d4:	d901      	bls.n	9000b2da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b2d6:	2303      	movs	r3, #3
9000b2d8:	e006      	b.n	9000b2e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b2da:	687b      	ldr	r3, [r7, #4]
9000b2dc:	691b      	ldr	r3, [r3, #16]
9000b2de:	f003 0310 	and.w	r3, r3, #16
9000b2e2:	2b10      	cmp	r3, #16
9000b2e4:	d0f0      	beq.n	9000b2c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b2e6:	2300      	movs	r3, #0
}
9000b2e8:	4618      	mov	r0, r3
9000b2ea:	3714      	adds	r7, #20
9000b2ec:	46bd      	mov	sp, r7
9000b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2f2:	4770      	bx	lr

9000b2f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b2f4:	b480      	push	{r7}
9000b2f6:	b08b      	sub	sp, #44	@ 0x2c
9000b2f8:	af00      	add	r7, sp, #0
9000b2fa:	60f8      	str	r0, [r7, #12]
9000b2fc:	60b9      	str	r1, [r7, #8]
9000b2fe:	4613      	mov	r3, r2
9000b300:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b302:	68fb      	ldr	r3, [r7, #12]
9000b304:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b306:	68bb      	ldr	r3, [r7, #8]
9000b308:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b30a:	88fb      	ldrh	r3, [r7, #6]
9000b30c:	089b      	lsrs	r3, r3, #2
9000b30e:	b29b      	uxth	r3, r3
9000b310:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b312:	88fb      	ldrh	r3, [r7, #6]
9000b314:	f003 0303 	and.w	r3, r3, #3
9000b318:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b31a:	2300      	movs	r3, #0
9000b31c:	623b      	str	r3, [r7, #32]
9000b31e:	e014      	b.n	9000b34a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b320:	69bb      	ldr	r3, [r7, #24]
9000b322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b326:	681a      	ldr	r2, [r3, #0]
9000b328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b32a:	601a      	str	r2, [r3, #0]
    pDest++;
9000b32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b32e:	3301      	adds	r3, #1
9000b330:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b334:	3301      	adds	r3, #1
9000b336:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b33a:	3301      	adds	r3, #1
9000b33c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b340:	3301      	adds	r3, #1
9000b342:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b344:	6a3b      	ldr	r3, [r7, #32]
9000b346:	3301      	adds	r3, #1
9000b348:	623b      	str	r3, [r7, #32]
9000b34a:	6a3a      	ldr	r2, [r7, #32]
9000b34c:	697b      	ldr	r3, [r7, #20]
9000b34e:	429a      	cmp	r2, r3
9000b350:	d3e6      	bcc.n	9000b320 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b352:	8bfb      	ldrh	r3, [r7, #30]
9000b354:	2b00      	cmp	r3, #0
9000b356:	d01e      	beq.n	9000b396 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b358:	2300      	movs	r3, #0
9000b35a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b35c:	69bb      	ldr	r3, [r7, #24]
9000b35e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b362:	461a      	mov	r2, r3
9000b364:	f107 0310 	add.w	r3, r7, #16
9000b368:	6812      	ldr	r2, [r2, #0]
9000b36a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b36c:	693a      	ldr	r2, [r7, #16]
9000b36e:	6a3b      	ldr	r3, [r7, #32]
9000b370:	b2db      	uxtb	r3, r3
9000b372:	00db      	lsls	r3, r3, #3
9000b374:	fa22 f303 	lsr.w	r3, r2, r3
9000b378:	b2da      	uxtb	r2, r3
9000b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b37c:	701a      	strb	r2, [r3, #0]
      i++;
9000b37e:	6a3b      	ldr	r3, [r7, #32]
9000b380:	3301      	adds	r3, #1
9000b382:	623b      	str	r3, [r7, #32]
      pDest++;
9000b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b386:	3301      	adds	r3, #1
9000b388:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b38a:	8bfb      	ldrh	r3, [r7, #30]
9000b38c:	3b01      	subs	r3, #1
9000b38e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b390:	8bfb      	ldrh	r3, [r7, #30]
9000b392:	2b00      	cmp	r3, #0
9000b394:	d1ea      	bne.n	9000b36c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b398:	4618      	mov	r0, r3
9000b39a:	372c      	adds	r7, #44	@ 0x2c
9000b39c:	46bd      	mov	sp, r7
9000b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b3a2:	4770      	bx	lr

9000b3a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b3a4:	b480      	push	{r7}
9000b3a6:	b085      	sub	sp, #20
9000b3a8:	af00      	add	r7, sp, #0
9000b3aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b3ac:	687b      	ldr	r3, [r7, #4]
9000b3ae:	695b      	ldr	r3, [r3, #20]
9000b3b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b3b2:	687b      	ldr	r3, [r7, #4]
9000b3b4:	699b      	ldr	r3, [r3, #24]
9000b3b6:	68fa      	ldr	r2, [r7, #12]
9000b3b8:	4013      	ands	r3, r2
9000b3ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b3bc:	68fb      	ldr	r3, [r7, #12]
}
9000b3be:	4618      	mov	r0, r3
9000b3c0:	3714      	adds	r7, #20
9000b3c2:	46bd      	mov	sp, r7
9000b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b3c8:	4770      	bx	lr

9000b3ca <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b3ca:	b480      	push	{r7}
9000b3cc:	b085      	sub	sp, #20
9000b3ce:	af00      	add	r7, sp, #0
9000b3d0:	6078      	str	r0, [r7, #4]
9000b3d2:	460b      	mov	r3, r1
9000b3d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b3d6:	687b      	ldr	r3, [r7, #4]
9000b3d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b3da:	78fb      	ldrb	r3, [r7, #3]
9000b3dc:	015a      	lsls	r2, r3, #5
9000b3de:	68fb      	ldr	r3, [r7, #12]
9000b3e0:	4413      	add	r3, r2
9000b3e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3e6:	689b      	ldr	r3, [r3, #8]
9000b3e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b3ea:	78fb      	ldrb	r3, [r7, #3]
9000b3ec:	015a      	lsls	r2, r3, #5
9000b3ee:	68fb      	ldr	r3, [r7, #12]
9000b3f0:	4413      	add	r3, r2
9000b3f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3f6:	68db      	ldr	r3, [r3, #12]
9000b3f8:	68ba      	ldr	r2, [r7, #8]
9000b3fa:	4013      	ands	r3, r2
9000b3fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b3fe:	68bb      	ldr	r3, [r7, #8]
}
9000b400:	4618      	mov	r0, r3
9000b402:	3714      	adds	r7, #20
9000b404:	46bd      	mov	sp, r7
9000b406:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b40a:	4770      	bx	lr

9000b40c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b40c:	b480      	push	{r7}
9000b40e:	b083      	sub	sp, #12
9000b410:	af00      	add	r7, sp, #0
9000b412:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b414:	687b      	ldr	r3, [r7, #4]
9000b416:	695b      	ldr	r3, [r3, #20]
9000b418:	f003 0301 	and.w	r3, r3, #1
}
9000b41c:	4618      	mov	r0, r3
9000b41e:	370c      	adds	r7, #12
9000b420:	46bd      	mov	sp, r7
9000b422:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b426:	4770      	bx	lr

9000b428 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b428:	b480      	push	{r7}
9000b42a:	b085      	sub	sp, #20
9000b42c:	af00      	add	r7, sp, #0
9000b42e:	6078      	str	r0, [r7, #4]
9000b430:	460b      	mov	r3, r1
9000b432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b434:	687b      	ldr	r3, [r7, #4]
9000b436:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b438:	68fb      	ldr	r3, [r7, #12]
9000b43a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b43e:	681b      	ldr	r3, [r3, #0]
9000b440:	68fa      	ldr	r2, [r7, #12]
9000b442:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b446:	f023 0303 	bic.w	r3, r3, #3
9000b44a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b44c:	68fb      	ldr	r3, [r7, #12]
9000b44e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b452:	681a      	ldr	r2, [r3, #0]
9000b454:	78fb      	ldrb	r3, [r7, #3]
9000b456:	f003 0303 	and.w	r3, r3, #3
9000b45a:	68f9      	ldr	r1, [r7, #12]
9000b45c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b460:	4313      	orrs	r3, r2
9000b462:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b464:	78fb      	ldrb	r3, [r7, #3]
9000b466:	2b01      	cmp	r3, #1
9000b468:	d107      	bne.n	9000b47a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b46a:	68fb      	ldr	r3, [r7, #12]
9000b46c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b470:	461a      	mov	r2, r3
9000b472:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b476:	6053      	str	r3, [r2, #4]
9000b478:	e00c      	b.n	9000b494 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b47a:	78fb      	ldrb	r3, [r7, #3]
9000b47c:	2b02      	cmp	r3, #2
9000b47e:	d107      	bne.n	9000b490 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b480:	68fb      	ldr	r3, [r7, #12]
9000b482:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b486:	461a      	mov	r2, r3
9000b488:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b48c:	6053      	str	r3, [r2, #4]
9000b48e:	e001      	b.n	9000b494 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b490:	2301      	movs	r3, #1
9000b492:	e000      	b.n	9000b496 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b494:	2300      	movs	r3, #0
}
9000b496:	4618      	mov	r0, r3
9000b498:	3714      	adds	r7, #20
9000b49a:	46bd      	mov	sp, r7
9000b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b4a0:	4770      	bx	lr

9000b4a2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b4a2:	b480      	push	{r7}
9000b4a4:	b085      	sub	sp, #20
9000b4a6:	af00      	add	r7, sp, #0
9000b4a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b4aa:	687b      	ldr	r3, [r7, #4]
9000b4ac:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b4ae:	68fb      	ldr	r3, [r7, #12]
9000b4b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b4b4:	695b      	ldr	r3, [r3, #20]
9000b4b6:	b29b      	uxth	r3, r3
}
9000b4b8:	4618      	mov	r0, r3
9000b4ba:	3714      	adds	r7, #20
9000b4bc:	46bd      	mov	sp, r7
9000b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b4c2:	4770      	bx	lr

9000b4c4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b4c4:	b480      	push	{r7}
9000b4c6:	b089      	sub	sp, #36	@ 0x24
9000b4c8:	af00      	add	r7, sp, #0
9000b4ca:	6078      	str	r0, [r7, #4]
9000b4cc:	460b      	mov	r3, r1
9000b4ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b4d0:	687b      	ldr	r3, [r7, #4]
9000b4d2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b4d4:	78fb      	ldrb	r3, [r7, #3]
9000b4d6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b4d8:	2300      	movs	r3, #0
9000b4da:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b4dc:	69bb      	ldr	r3, [r7, #24]
9000b4de:	015a      	lsls	r2, r3, #5
9000b4e0:	69fb      	ldr	r3, [r7, #28]
9000b4e2:	4413      	add	r3, r2
9000b4e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4e8:	681b      	ldr	r3, [r3, #0]
9000b4ea:	0c9b      	lsrs	r3, r3, #18
9000b4ec:	f003 0303 	and.w	r3, r3, #3
9000b4f0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b4f2:	69bb      	ldr	r3, [r7, #24]
9000b4f4:	015a      	lsls	r2, r3, #5
9000b4f6:	69fb      	ldr	r3, [r7, #28]
9000b4f8:	4413      	add	r3, r2
9000b4fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4fe:	681b      	ldr	r3, [r3, #0]
9000b500:	0fdb      	lsrs	r3, r3, #31
9000b502:	f003 0301 	and.w	r3, r3, #1
9000b506:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b508:	69bb      	ldr	r3, [r7, #24]
9000b50a:	015a      	lsls	r2, r3, #5
9000b50c:	69fb      	ldr	r3, [r7, #28]
9000b50e:	4413      	add	r3, r2
9000b510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b514:	685b      	ldr	r3, [r3, #4]
9000b516:	0fdb      	lsrs	r3, r3, #31
9000b518:	f003 0301 	and.w	r3, r3, #1
9000b51c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b51e:	687b      	ldr	r3, [r7, #4]
9000b520:	689b      	ldr	r3, [r3, #8]
9000b522:	f003 0320 	and.w	r3, r3, #32
9000b526:	2b20      	cmp	r3, #32
9000b528:	d10d      	bne.n	9000b546 <USB_HC_Halt+0x82>
9000b52a:	68fb      	ldr	r3, [r7, #12]
9000b52c:	2b00      	cmp	r3, #0
9000b52e:	d10a      	bne.n	9000b546 <USB_HC_Halt+0x82>
9000b530:	693b      	ldr	r3, [r7, #16]
9000b532:	2b00      	cmp	r3, #0
9000b534:	d005      	beq.n	9000b542 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b536:	697b      	ldr	r3, [r7, #20]
9000b538:	2b01      	cmp	r3, #1
9000b53a:	d002      	beq.n	9000b542 <USB_HC_Halt+0x7e>
9000b53c:	697b      	ldr	r3, [r7, #20]
9000b53e:	2b03      	cmp	r3, #3
9000b540:	d101      	bne.n	9000b546 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b542:	2300      	movs	r3, #0
9000b544:	e0d8      	b.n	9000b6f8 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b546:	697b      	ldr	r3, [r7, #20]
9000b548:	2b00      	cmp	r3, #0
9000b54a:	d002      	beq.n	9000b552 <USB_HC_Halt+0x8e>
9000b54c:	697b      	ldr	r3, [r7, #20]
9000b54e:	2b02      	cmp	r3, #2
9000b550:	d173      	bne.n	9000b63a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b552:	69bb      	ldr	r3, [r7, #24]
9000b554:	015a      	lsls	r2, r3, #5
9000b556:	69fb      	ldr	r3, [r7, #28]
9000b558:	4413      	add	r3, r2
9000b55a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b55e:	681b      	ldr	r3, [r3, #0]
9000b560:	69ba      	ldr	r2, [r7, #24]
9000b562:	0151      	lsls	r1, r2, #5
9000b564:	69fa      	ldr	r2, [r7, #28]
9000b566:	440a      	add	r2, r1
9000b568:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b56c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b570:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b572:	687b      	ldr	r3, [r7, #4]
9000b574:	689b      	ldr	r3, [r3, #8]
9000b576:	f003 0320 	and.w	r3, r3, #32
9000b57a:	2b00      	cmp	r3, #0
9000b57c:	d14a      	bne.n	9000b614 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b57e:	687b      	ldr	r3, [r7, #4]
9000b580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b582:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b586:	2b00      	cmp	r3, #0
9000b588:	d133      	bne.n	9000b5f2 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b58a:	69bb      	ldr	r3, [r7, #24]
9000b58c:	015a      	lsls	r2, r3, #5
9000b58e:	69fb      	ldr	r3, [r7, #28]
9000b590:	4413      	add	r3, r2
9000b592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b596:	681b      	ldr	r3, [r3, #0]
9000b598:	69ba      	ldr	r2, [r7, #24]
9000b59a:	0151      	lsls	r1, r2, #5
9000b59c:	69fa      	ldr	r2, [r7, #28]
9000b59e:	440a      	add	r2, r1
9000b5a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b5a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b5aa:	69bb      	ldr	r3, [r7, #24]
9000b5ac:	015a      	lsls	r2, r3, #5
9000b5ae:	69fb      	ldr	r3, [r7, #28]
9000b5b0:	4413      	add	r3, r2
9000b5b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5b6:	681b      	ldr	r3, [r3, #0]
9000b5b8:	69ba      	ldr	r2, [r7, #24]
9000b5ba:	0151      	lsls	r1, r2, #5
9000b5bc:	69fa      	ldr	r2, [r7, #28]
9000b5be:	440a      	add	r2, r1
9000b5c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b5c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b5ca:	68bb      	ldr	r3, [r7, #8]
9000b5cc:	3301      	adds	r3, #1
9000b5ce:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b5d0:	68bb      	ldr	r3, [r7, #8]
9000b5d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b5d6:	d82e      	bhi.n	9000b636 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b5d8:	69bb      	ldr	r3, [r7, #24]
9000b5da:	015a      	lsls	r2, r3, #5
9000b5dc:	69fb      	ldr	r3, [r7, #28]
9000b5de:	4413      	add	r3, r2
9000b5e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5e4:	681b      	ldr	r3, [r3, #0]
9000b5e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b5ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b5ee:	d0ec      	beq.n	9000b5ca <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b5f0:	e081      	b.n	9000b6f6 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b5f2:	69bb      	ldr	r3, [r7, #24]
9000b5f4:	015a      	lsls	r2, r3, #5
9000b5f6:	69fb      	ldr	r3, [r7, #28]
9000b5f8:	4413      	add	r3, r2
9000b5fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5fe:	681b      	ldr	r3, [r3, #0]
9000b600:	69ba      	ldr	r2, [r7, #24]
9000b602:	0151      	lsls	r1, r2, #5
9000b604:	69fa      	ldr	r2, [r7, #28]
9000b606:	440a      	add	r2, r1
9000b608:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b60c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b610:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b612:	e070      	b.n	9000b6f6 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b614:	69bb      	ldr	r3, [r7, #24]
9000b616:	015a      	lsls	r2, r3, #5
9000b618:	69fb      	ldr	r3, [r7, #28]
9000b61a:	4413      	add	r3, r2
9000b61c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b620:	681b      	ldr	r3, [r3, #0]
9000b622:	69ba      	ldr	r2, [r7, #24]
9000b624:	0151      	lsls	r1, r2, #5
9000b626:	69fa      	ldr	r2, [r7, #28]
9000b628:	440a      	add	r2, r1
9000b62a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b62e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b632:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b634:	e05f      	b.n	9000b6f6 <USB_HC_Halt+0x232>
            break;
9000b636:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b638:	e05d      	b.n	9000b6f6 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b63a:	69bb      	ldr	r3, [r7, #24]
9000b63c:	015a      	lsls	r2, r3, #5
9000b63e:	69fb      	ldr	r3, [r7, #28]
9000b640:	4413      	add	r3, r2
9000b642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b646:	681b      	ldr	r3, [r3, #0]
9000b648:	69ba      	ldr	r2, [r7, #24]
9000b64a:	0151      	lsls	r1, r2, #5
9000b64c:	69fa      	ldr	r2, [r7, #28]
9000b64e:	440a      	add	r2, r1
9000b650:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b654:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b658:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b65a:	69fb      	ldr	r3, [r7, #28]
9000b65c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b660:	691b      	ldr	r3, [r3, #16]
9000b662:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b666:	2b00      	cmp	r3, #0
9000b668:	d133      	bne.n	9000b6d2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b66a:	69bb      	ldr	r3, [r7, #24]
9000b66c:	015a      	lsls	r2, r3, #5
9000b66e:	69fb      	ldr	r3, [r7, #28]
9000b670:	4413      	add	r3, r2
9000b672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b676:	681b      	ldr	r3, [r3, #0]
9000b678:	69ba      	ldr	r2, [r7, #24]
9000b67a:	0151      	lsls	r1, r2, #5
9000b67c:	69fa      	ldr	r2, [r7, #28]
9000b67e:	440a      	add	r2, r1
9000b680:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b688:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b68a:	69bb      	ldr	r3, [r7, #24]
9000b68c:	015a      	lsls	r2, r3, #5
9000b68e:	69fb      	ldr	r3, [r7, #28]
9000b690:	4413      	add	r3, r2
9000b692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b696:	681b      	ldr	r3, [r3, #0]
9000b698:	69ba      	ldr	r2, [r7, #24]
9000b69a:	0151      	lsls	r1, r2, #5
9000b69c:	69fa      	ldr	r2, [r7, #28]
9000b69e:	440a      	add	r2, r1
9000b6a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b6a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b6a8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b6aa:	68bb      	ldr	r3, [r7, #8]
9000b6ac:	3301      	adds	r3, #1
9000b6ae:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b6b0:	68bb      	ldr	r3, [r7, #8]
9000b6b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b6b6:	d81d      	bhi.n	9000b6f4 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b6b8:	69bb      	ldr	r3, [r7, #24]
9000b6ba:	015a      	lsls	r2, r3, #5
9000b6bc:	69fb      	ldr	r3, [r7, #28]
9000b6be:	4413      	add	r3, r2
9000b6c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6c4:	681b      	ldr	r3, [r3, #0]
9000b6c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b6ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b6ce:	d0ec      	beq.n	9000b6aa <USB_HC_Halt+0x1e6>
9000b6d0:	e011      	b.n	9000b6f6 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b6d2:	69bb      	ldr	r3, [r7, #24]
9000b6d4:	015a      	lsls	r2, r3, #5
9000b6d6:	69fb      	ldr	r3, [r7, #28]
9000b6d8:	4413      	add	r3, r2
9000b6da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6de:	681b      	ldr	r3, [r3, #0]
9000b6e0:	69ba      	ldr	r2, [r7, #24]
9000b6e2:	0151      	lsls	r1, r2, #5
9000b6e4:	69fa      	ldr	r2, [r7, #28]
9000b6e6:	440a      	add	r2, r1
9000b6e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b6ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b6f0:	6013      	str	r3, [r2, #0]
9000b6f2:	e000      	b.n	9000b6f6 <USB_HC_Halt+0x232>
          break;
9000b6f4:	bf00      	nop
    }
  }

  return HAL_OK;
9000b6f6:	2300      	movs	r3, #0
}
9000b6f8:	4618      	mov	r0, r3
9000b6fa:	3724      	adds	r7, #36	@ 0x24
9000b6fc:	46bd      	mov	sp, r7
9000b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b702:	4770      	bx	lr

9000b704 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b704:	b580      	push	{r7, lr}
9000b706:	b088      	sub	sp, #32
9000b708:	af00      	add	r7, sp, #0
9000b70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b70c:	2300      	movs	r3, #0
9000b70e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b710:	687b      	ldr	r3, [r7, #4]
9000b712:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b714:	2300      	movs	r3, #0
9000b716:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b718:	6878      	ldr	r0, [r7, #4]
9000b71a:	f7ff fd7a 	bl	9000b212 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b71e:	2110      	movs	r1, #16
9000b720:	6878      	ldr	r0, [r7, #4]
9000b722:	f7ff fd87 	bl	9000b234 <USB_FlushTxFifo>
9000b726:	4603      	mov	r3, r0
9000b728:	2b00      	cmp	r3, #0
9000b72a:	d001      	beq.n	9000b730 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b72c:	2301      	movs	r3, #1
9000b72e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b730:	6878      	ldr	r0, [r7, #4]
9000b732:	f7ff fdb1 	bl	9000b298 <USB_FlushRxFifo>
9000b736:	4603      	mov	r3, r0
9000b738:	2b00      	cmp	r3, #0
9000b73a:	d001      	beq.n	9000b740 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b73c:	2301      	movs	r3, #1
9000b73e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b740:	2300      	movs	r3, #0
9000b742:	61bb      	str	r3, [r7, #24]
9000b744:	e01f      	b.n	9000b786 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b746:	69bb      	ldr	r3, [r7, #24]
9000b748:	015a      	lsls	r2, r3, #5
9000b74a:	697b      	ldr	r3, [r7, #20]
9000b74c:	4413      	add	r3, r2
9000b74e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b752:	681b      	ldr	r3, [r3, #0]
9000b754:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b756:	693b      	ldr	r3, [r7, #16]
9000b758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b75c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b75e:	693b      	ldr	r3, [r7, #16]
9000b760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b764:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b766:	693b      	ldr	r3, [r7, #16]
9000b768:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b76c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b76e:	69bb      	ldr	r3, [r7, #24]
9000b770:	015a      	lsls	r2, r3, #5
9000b772:	697b      	ldr	r3, [r7, #20]
9000b774:	4413      	add	r3, r2
9000b776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b77a:	461a      	mov	r2, r3
9000b77c:	693b      	ldr	r3, [r7, #16]
9000b77e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b780:	69bb      	ldr	r3, [r7, #24]
9000b782:	3301      	adds	r3, #1
9000b784:	61bb      	str	r3, [r7, #24]
9000b786:	69bb      	ldr	r3, [r7, #24]
9000b788:	2b0f      	cmp	r3, #15
9000b78a:	d9dc      	bls.n	9000b746 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b78c:	2300      	movs	r3, #0
9000b78e:	61bb      	str	r3, [r7, #24]
9000b790:	e034      	b.n	9000b7fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b792:	69bb      	ldr	r3, [r7, #24]
9000b794:	015a      	lsls	r2, r3, #5
9000b796:	697b      	ldr	r3, [r7, #20]
9000b798:	4413      	add	r3, r2
9000b79a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b79e:	681b      	ldr	r3, [r3, #0]
9000b7a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b7a2:	693b      	ldr	r3, [r7, #16]
9000b7a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b7a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b7aa:	693b      	ldr	r3, [r7, #16]
9000b7ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b7b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b7b2:	693b      	ldr	r3, [r7, #16]
9000b7b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b7b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b7ba:	69bb      	ldr	r3, [r7, #24]
9000b7bc:	015a      	lsls	r2, r3, #5
9000b7be:	697b      	ldr	r3, [r7, #20]
9000b7c0:	4413      	add	r3, r2
9000b7c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b7c6:	461a      	mov	r2, r3
9000b7c8:	693b      	ldr	r3, [r7, #16]
9000b7ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b7cc:	68fb      	ldr	r3, [r7, #12]
9000b7ce:	3301      	adds	r3, #1
9000b7d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b7d2:	68fb      	ldr	r3, [r7, #12]
9000b7d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b7d8:	d80c      	bhi.n	9000b7f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b7da:	69bb      	ldr	r3, [r7, #24]
9000b7dc:	015a      	lsls	r2, r3, #5
9000b7de:	697b      	ldr	r3, [r7, #20]
9000b7e0:	4413      	add	r3, r2
9000b7e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b7e6:	681b      	ldr	r3, [r3, #0]
9000b7e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b7ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b7f0:	d0ec      	beq.n	9000b7cc <USB_StopHost+0xc8>
9000b7f2:	e000      	b.n	9000b7f6 <USB_StopHost+0xf2>
        break;
9000b7f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b7f6:	69bb      	ldr	r3, [r7, #24]
9000b7f8:	3301      	adds	r3, #1
9000b7fa:	61bb      	str	r3, [r7, #24]
9000b7fc:	69bb      	ldr	r3, [r7, #24]
9000b7fe:	2b0f      	cmp	r3, #15
9000b800:	d9c7      	bls.n	9000b792 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b802:	697b      	ldr	r3, [r7, #20]
9000b804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b808:	461a      	mov	r2, r3
9000b80a:	f04f 33ff 	mov.w	r3, #4294967295
9000b80e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b810:	687b      	ldr	r3, [r7, #4]
9000b812:	f04f 32ff 	mov.w	r2, #4294967295
9000b816:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b818:	6878      	ldr	r0, [r7, #4]
9000b81a:	f7ff fce9 	bl	9000b1f0 <USB_EnableGlobalInt>

  return ret;
9000b81e:	7ffb      	ldrb	r3, [r7, #31]
}
9000b820:	4618      	mov	r0, r3
9000b822:	3720      	adds	r7, #32
9000b824:	46bd      	mov	sp, r7
9000b826:	bd80      	pop	{r7, pc}

9000b828 <setAllRowsInactive>:
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;
KeyboardButton receivedChar;

void setAllRowsInactive(void)
{
9000b828:	b580      	push	{r7, lr}
9000b82a:	b082      	sub	sp, #8
9000b82c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000b82e:	2300      	movs	r3, #0
9000b830:	607b      	str	r3, [r7, #4]
9000b832:	e00f      	b.n	9000b854 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000b834:	4a0b      	ldr	r2, [pc, #44]	@ (9000b864 <setAllRowsInactive+0x3c>)
9000b836:	687b      	ldr	r3, [r7, #4]
9000b838:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b83c:	4a09      	ldr	r2, [pc, #36]	@ (9000b864 <setAllRowsInactive+0x3c>)
9000b83e:	687b      	ldr	r3, [r7, #4]
9000b840:	00db      	lsls	r3, r3, #3
9000b842:	4413      	add	r3, r2
9000b844:	889b      	ldrh	r3, [r3, #4]
9000b846:	2200      	movs	r2, #0
9000b848:	4619      	mov	r1, r3
9000b84a:	f7f8 fc13 	bl	90004074 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000b84e:	687b      	ldr	r3, [r7, #4]
9000b850:	3301      	adds	r3, #1
9000b852:	607b      	str	r3, [r7, #4]
9000b854:	687b      	ldr	r3, [r7, #4]
9000b856:	2b04      	cmp	r3, #4
9000b858:	ddec      	ble.n	9000b834 <setAllRowsInactive+0xc>
    }
}
9000b85a:	bf00      	nop
9000b85c:	bf00      	nop
9000b85e:	3708      	adds	r7, #8
9000b860:	46bd      	mov	sp, r7
9000b862:	bd80      	pop	{r7, pc}
9000b864:	20000010 	.word	0x20000010

9000b868 <setRowActive>:

void setRowActive(int row)
{
9000b868:	b580      	push	{r7, lr}
9000b86a:	b082      	sub	sp, #8
9000b86c:	af00      	add	r7, sp, #0
9000b86e:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000b870:	687b      	ldr	r3, [r7, #4]
9000b872:	2b00      	cmp	r3, #0
9000b874:	db12      	blt.n	9000b89c <setRowActive+0x34>
9000b876:	687b      	ldr	r3, [r7, #4]
9000b878:	2b04      	cmp	r3, #4
9000b87a:	dc0f      	bgt.n	9000b89c <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000b87c:	f7ff ffd4 	bl	9000b828 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000b880:	4a08      	ldr	r2, [pc, #32]	@ (9000b8a4 <setRowActive+0x3c>)
9000b882:	687b      	ldr	r3, [r7, #4]
9000b884:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b888:	4a06      	ldr	r2, [pc, #24]	@ (9000b8a4 <setRowActive+0x3c>)
9000b88a:	687b      	ldr	r3, [r7, #4]
9000b88c:	00db      	lsls	r3, r3, #3
9000b88e:	4413      	add	r3, r2
9000b890:	889b      	ldrh	r3, [r3, #4]
9000b892:	2201      	movs	r2, #1
9000b894:	4619      	mov	r1, r3
9000b896:	f7f8 fbed 	bl	90004074 <HAL_GPIO_WritePin>
9000b89a:	e000      	b.n	9000b89e <setRowActive+0x36>
        return;
9000b89c:	bf00      	nop
}
9000b89e:	3708      	adds	r7, #8
9000b8a0:	46bd      	mov	sp, r7
9000b8a2:	bd80      	pop	{r7, pc}
9000b8a4:	20000010 	.word	0x20000010

9000b8a8 <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000b8a8:	b580      	push	{r7, lr}
9000b8aa:	b084      	sub	sp, #16
9000b8ac:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000b8ae:	2300      	movs	r3, #0
9000b8b0:	60fb      	str	r3, [r7, #12]
9000b8b2:	e04e      	b.n	9000b952 <ReadFlexiKeyboard+0xaa>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000b8b4:	68f8      	ldr	r0, [r7, #12]
9000b8b6:	f7ff ffd7 	bl	9000b868 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000b8ba:	200a      	movs	r0, #10
9000b8bc:	f7f7 fd74 	bl	900033a8 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000b8c0:	2300      	movs	r3, #0
9000b8c2:	60bb      	str	r3, [r7, #8]
9000b8c4:	e03f      	b.n	9000b946 <ReadFlexiKeyboard+0x9e>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000b8c6:	4a27      	ldr	r2, [pc, #156]	@ (9000b964 <ReadFlexiKeyboard+0xbc>)
9000b8c8:	68bb      	ldr	r3, [r7, #8]
9000b8ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000b8ce:	4925      	ldr	r1, [pc, #148]	@ (9000b964 <ReadFlexiKeyboard+0xbc>)
9000b8d0:	68bb      	ldr	r3, [r7, #8]
9000b8d2:	00db      	lsls	r3, r3, #3
9000b8d4:	440b      	add	r3, r1
9000b8d6:	889b      	ldrh	r3, [r3, #4]
9000b8d8:	4619      	mov	r1, r3
9000b8da:	4610      	mov	r0, r2
9000b8dc:	f7f8 fbb2 	bl	90004044 <HAL_GPIO_ReadPin>
9000b8e0:	4603      	mov	r3, r0
9000b8e2:	2b01      	cmp	r3, #1
9000b8e4:	d12c      	bne.n	9000b940 <ReadFlexiKeyboard+0x98>
            {
                uint32_t now = HAL_GetTick();
9000b8e6:	f7f7 fd53 	bl	90003390 <HAL_GetTick>
9000b8ea:	6078      	str	r0, [r7, #4]

                // Debounce/repeat suppression
                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) {
9000b8ec:	4b1e      	ldr	r3, [pc, #120]	@ (9000b968 <ReadFlexiKeyboard+0xc0>)
9000b8ee:	681b      	ldr	r3, [r3, #0]
9000b8f0:	68fa      	ldr	r2, [r7, #12]
9000b8f2:	429a      	cmp	r2, r3
9000b8f4:	d10d      	bne.n	9000b912 <ReadFlexiKeyboard+0x6a>
9000b8f6:	4b1d      	ldr	r3, [pc, #116]	@ (9000b96c <ReadFlexiKeyboard+0xc4>)
9000b8f8:	681b      	ldr	r3, [r3, #0]
9000b8fa:	68ba      	ldr	r2, [r7, #8]
9000b8fc:	429a      	cmp	r2, r3
9000b8fe:	d108      	bne.n	9000b912 <ReadFlexiKeyboard+0x6a>
9000b900:	4b1b      	ldr	r3, [pc, #108]	@ (9000b970 <ReadFlexiKeyboard+0xc8>)
9000b902:	681b      	ldr	r3, [r3, #0]
9000b904:	687a      	ldr	r2, [r7, #4]
9000b906:	1ad3      	subs	r3, r2, r3
9000b908:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000b90c:	d201      	bcs.n	9000b912 <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000b90e:	234e      	movs	r3, #78	@ 0x4e
9000b910:	e023      	b.n	9000b95a <ReadFlexiKeyboard+0xb2>
                }

                lastRow = row;
9000b912:	4a15      	ldr	r2, [pc, #84]	@ (9000b968 <ReadFlexiKeyboard+0xc0>)
9000b914:	68fb      	ldr	r3, [r7, #12]
9000b916:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000b918:	4a14      	ldr	r2, [pc, #80]	@ (9000b96c <ReadFlexiKeyboard+0xc4>)
9000b91a:	68bb      	ldr	r3, [r7, #8]
9000b91c:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000b91e:	4a14      	ldr	r2, [pc, #80]	@ (9000b970 <ReadFlexiKeyboard+0xc8>)
9000b920:	687b      	ldr	r3, [r7, #4]
9000b922:	6013      	str	r3, [r2, #0]

                receivedChar = keymap[row][col];
9000b924:	4913      	ldr	r1, [pc, #76]	@ (9000b974 <ReadFlexiKeyboard+0xcc>)
9000b926:	68fa      	ldr	r2, [r7, #12]
9000b928:	4613      	mov	r3, r2
9000b92a:	009b      	lsls	r3, r3, #2
9000b92c:	4413      	add	r3, r2
9000b92e:	18ca      	adds	r2, r1, r3
9000b930:	68bb      	ldr	r3, [r7, #8]
9000b932:	4413      	add	r3, r2
9000b934:	781a      	ldrb	r2, [r3, #0]
9000b936:	4b10      	ldr	r3, [pc, #64]	@ (9000b978 <ReadFlexiKeyboard+0xd0>)
9000b938:	701a      	strb	r2, [r3, #0]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
9000b93a:	4b0f      	ldr	r3, [pc, #60]	@ (9000b978 <ReadFlexiKeyboard+0xd0>)
9000b93c:	781b      	ldrb	r3, [r3, #0]
9000b93e:	e00c      	b.n	9000b95a <ReadFlexiKeyboard+0xb2>
        for (int col = 0; col < NUM_COLS; col++)
9000b940:	68bb      	ldr	r3, [r7, #8]
9000b942:	3301      	adds	r3, #1
9000b944:	60bb      	str	r3, [r7, #8]
9000b946:	68bb      	ldr	r3, [r7, #8]
9000b948:	2b04      	cmp	r3, #4
9000b94a:	ddbc      	ble.n	9000b8c6 <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000b94c:	68fb      	ldr	r3, [r7, #12]
9000b94e:	3301      	adds	r3, #1
9000b950:	60fb      	str	r3, [r7, #12]
9000b952:	68fb      	ldr	r3, [r7, #12]
9000b954:	2b04      	cmp	r3, #4
9000b956:	ddad      	ble.n	9000b8b4 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000b958:	234e      	movs	r3, #78	@ 0x4e
}
9000b95a:	4618      	mov	r0, r3
9000b95c:	3710      	adds	r7, #16
9000b95e:	46bd      	mov	sp, r7
9000b960:	bd80      	pop	{r7, pc}
9000b962:	bf00      	nop
9000b964:	20000038 	.word	0x20000038
9000b968:	20000060 	.word	0x20000060
9000b96c:	20000064 	.word	0x20000064
9000b970:	200012e0 	.word	0x200012e0
9000b974:	9000d8bc 	.word	0x9000d8bc
9000b978:	200012e4 	.word	0x200012e4

9000b97c <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000b97c:	b580      	push	{r7, lr}
9000b97e:	b090      	sub	sp, #64	@ 0x40
9000b980:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000b982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b986:	2200      	movs	r2, #0
9000b988:	601a      	str	r2, [r3, #0]
9000b98a:	605a      	str	r2, [r3, #4]
9000b98c:	609a      	str	r2, [r3, #8]
9000b98e:	60da      	str	r2, [r3, #12]
9000b990:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000b992:	4b5c      	ldr	r3, [pc, #368]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b998:	4a5a      	ldr	r2, [pc, #360]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b99a:	f043 0301 	orr.w	r3, r3, #1
9000b99e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b9a2:	4b58      	ldr	r3, [pc, #352]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9a8:	f003 0301 	and.w	r3, r3, #1
9000b9ac:	623b      	str	r3, [r7, #32]
9000b9ae:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000b9b0:	4b54      	ldr	r3, [pc, #336]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9b6:	4a53      	ldr	r2, [pc, #332]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9b8:	f043 0302 	orr.w	r3, r3, #2
9000b9bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b9c0:	4b50      	ldr	r3, [pc, #320]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9c6:	f003 0302 	and.w	r3, r3, #2
9000b9ca:	61fb      	str	r3, [r7, #28]
9000b9cc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000b9ce:	4b4d      	ldr	r3, [pc, #308]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9d4:	4a4b      	ldr	r2, [pc, #300]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9d6:	f043 0308 	orr.w	r3, r3, #8
9000b9da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b9de:	4b49      	ldr	r3, [pc, #292]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9e4:	f003 0308 	and.w	r3, r3, #8
9000b9e8:	61bb      	str	r3, [r7, #24]
9000b9ea:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000b9ec:	4b45      	ldr	r3, [pc, #276]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9f2:	4a44      	ldr	r2, [pc, #272]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9f4:	f043 0310 	orr.w	r3, r3, #16
9000b9f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b9fc:	4b41      	ldr	r3, [pc, #260]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000b9fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba02:	f003 0310 	and.w	r3, r3, #16
9000ba06:	617b      	str	r3, [r7, #20]
9000ba08:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000ba0a:	4b3e      	ldr	r3, [pc, #248]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba10:	4a3c      	ldr	r2, [pc, #240]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000ba16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000ba1a:	4b3a      	ldr	r3, [pc, #232]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000ba24:	613b      	str	r3, [r7, #16]
9000ba26:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000ba28:	4b36      	ldr	r3, [pc, #216]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba2e:	4a35      	ldr	r2, [pc, #212]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000ba34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000ba38:	4b32      	ldr	r3, [pc, #200]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000ba42:	60fb      	str	r3, [r7, #12]
9000ba44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000ba46:	4b2f      	ldr	r3, [pc, #188]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba4c:	4a2d      	ldr	r2, [pc, #180]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000ba52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000ba56:	4b2b      	ldr	r3, [pc, #172]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000ba60:	60bb      	str	r3, [r7, #8]
9000ba62:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000ba64:	4b27      	ldr	r3, [pc, #156]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba6a:	4a26      	ldr	r2, [pc, #152]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000ba70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000ba74:	4b23      	ldr	r3, [pc, #140]	@ (9000bb04 <InitFlexiKeyboard+0x188>)
9000ba76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000ba7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000ba7e:	607b      	str	r3, [r7, #4]
9000ba80:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000ba82:	2301      	movs	r3, #1
9000ba84:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000ba86:	2300      	movs	r3, #0
9000ba88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000ba8a:	2300      	movs	r3, #0
9000ba8c:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000ba8e:	2300      	movs	r3, #0
9000ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000ba92:	e012      	b.n	9000baba <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000ba94:	4a1c      	ldr	r2, [pc, #112]	@ (9000bb08 <InitFlexiKeyboard+0x18c>)
9000ba96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000ba98:	00db      	lsls	r3, r3, #3
9000ba9a:	4413      	add	r3, r2
9000ba9c:	889b      	ldrh	r3, [r3, #4]
9000ba9e:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000baa0:	4a19      	ldr	r2, [pc, #100]	@ (9000bb08 <InitFlexiKeyboard+0x18c>)
9000baa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000baa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000baa8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000baac:	4611      	mov	r1, r2
9000baae:	4618      	mov	r0, r3
9000bab0:	f7f8 f918 	bl	90003ce4 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000bab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000bab6:	3301      	adds	r3, #1
9000bab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000baba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000babc:	2b04      	cmp	r3, #4
9000babe:	dde9      	ble.n	9000ba94 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000bac0:	2300      	movs	r3, #0
9000bac2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000bac4:	2302      	movs	r3, #2
9000bac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000bac8:	2300      	movs	r3, #0
9000baca:	63bb      	str	r3, [r7, #56]	@ 0x38
9000bacc:	e012      	b.n	9000baf4 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000bace:	4a0f      	ldr	r2, [pc, #60]	@ (9000bb0c <InitFlexiKeyboard+0x190>)
9000bad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000bad2:	00db      	lsls	r3, r3, #3
9000bad4:	4413      	add	r3, r2
9000bad6:	889b      	ldrh	r3, [r3, #4]
9000bad8:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000bada:	4a0c      	ldr	r2, [pc, #48]	@ (9000bb0c <InitFlexiKeyboard+0x190>)
9000badc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000bade:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000bae2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000bae6:	4611      	mov	r1, r2
9000bae8:	4618      	mov	r0, r3
9000baea:	f7f8 f8fb 	bl	90003ce4 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000baee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000baf0:	3301      	adds	r3, #1
9000baf2:	63bb      	str	r3, [r7, #56]	@ 0x38
9000baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000baf6:	2b04      	cmp	r3, #4
9000baf8:	dde9      	ble.n	9000bace <InitFlexiKeyboard+0x152>
	}
}
9000bafa:	bf00      	nop
9000bafc:	bf00      	nop
9000bafe:	3740      	adds	r7, #64	@ 0x40
9000bb00:	46bd      	mov	sp, r7
9000bb02:	bd80      	pop	{r7, pc}
9000bb04:	58024400 	.word	0x58024400
9000bb08:	20000010 	.word	0x20000010
9000bb0c:	20000038 	.word	0x20000038

9000bb10 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000bb10:	b580      	push	{r7, lr}
9000bb12:	b082      	sub	sp, #8
9000bb14:	af00      	add	r7, sp, #0
9000bb16:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000bb18:	687b      	ldr	r3, [r7, #4]
9000bb1a:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000bb1e:	1c5a      	adds	r2, r3, #1
9000bb20:	687b      	ldr	r3, [r7, #4]
9000bb22:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000bb26:	6878      	ldr	r0, [r7, #4]
9000bb28:	f000 f804 	bl	9000bb34 <USBH_HandleSof>
}
9000bb2c:	bf00      	nop
9000bb2e:	3708      	adds	r7, #8
9000bb30:	46bd      	mov	sp, r7
9000bb32:	bd80      	pop	{r7, pc}

9000bb34 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000bb34:	b580      	push	{r7, lr}
9000bb36:	b082      	sub	sp, #8
9000bb38:	af00      	add	r7, sp, #0
9000bb3a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000bb3c:	687b      	ldr	r3, [r7, #4]
9000bb3e:	781b      	ldrb	r3, [r3, #0]
9000bb40:	b2db      	uxtb	r3, r3
9000bb42:	2b0b      	cmp	r3, #11
9000bb44:	d10a      	bne.n	9000bb5c <USBH_HandleSof+0x28>
9000bb46:	687b      	ldr	r3, [r7, #4]
9000bb48:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000bb4c:	2b00      	cmp	r3, #0
9000bb4e:	d005      	beq.n	9000bb5c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000bb50:	687b      	ldr	r3, [r7, #4]
9000bb52:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000bb56:	699b      	ldr	r3, [r3, #24]
9000bb58:	6878      	ldr	r0, [r7, #4]
9000bb5a:	4798      	blx	r3
  }
}
9000bb5c:	bf00      	nop
9000bb5e:	3708      	adds	r7, #8
9000bb60:	46bd      	mov	sp, r7
9000bb62:	bd80      	pop	{r7, pc}

9000bb64 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000bb64:	b480      	push	{r7}
9000bb66:	b083      	sub	sp, #12
9000bb68:	af00      	add	r7, sp, #0
9000bb6a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000bb6c:	687b      	ldr	r3, [r7, #4]
9000bb6e:	2201      	movs	r2, #1
9000bb70:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000bb74:	bf00      	nop
}
9000bb76:	370c      	adds	r7, #12
9000bb78:	46bd      	mov	sp, r7
9000bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb7e:	4770      	bx	lr

9000bb80 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000bb80:	b480      	push	{r7}
9000bb82:	b083      	sub	sp, #12
9000bb84:	af00      	add	r7, sp, #0
9000bb86:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000bb88:	687b      	ldr	r3, [r7, #4]
9000bb8a:	2200      	movs	r2, #0
9000bb8c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000bb90:	687b      	ldr	r3, [r7, #4]
9000bb92:	2201      	movs	r2, #1
9000bb94:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000bb98:	bf00      	nop
}
9000bb9a:	370c      	adds	r7, #12
9000bb9c:	46bd      	mov	sp, r7
9000bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bba2:	4770      	bx	lr

9000bba4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000bba4:	b480      	push	{r7}
9000bba6:	b083      	sub	sp, #12
9000bba8:	af00      	add	r7, sp, #0
9000bbaa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000bbac:	687b      	ldr	r3, [r7, #4]
9000bbae:	2201      	movs	r2, #1
9000bbb0:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000bbb4:	687b      	ldr	r3, [r7, #4]
9000bbb6:	2200      	movs	r2, #0
9000bbb8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000bbbc:	687b      	ldr	r3, [r7, #4]
9000bbbe:	2200      	movs	r2, #0
9000bbc0:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bbc4:	2300      	movs	r3, #0
}
9000bbc6:	4618      	mov	r0, r3
9000bbc8:	370c      	adds	r7, #12
9000bbca:	46bd      	mov	sp, r7
9000bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bbd0:	4770      	bx	lr

9000bbd2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000bbd2:	b580      	push	{r7, lr}
9000bbd4:	b082      	sub	sp, #8
9000bbd6:	af00      	add	r7, sp, #0
9000bbd8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000bbda:	687b      	ldr	r3, [r7, #4]
9000bbdc:	2201      	movs	r2, #1
9000bbde:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000bbe2:	687b      	ldr	r3, [r7, #4]
9000bbe4:	2200      	movs	r2, #0
9000bbe6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000bbea:	687b      	ldr	r3, [r7, #4]
9000bbec:	2200      	movs	r2, #0
9000bbee:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000bbf2:	6878      	ldr	r0, [r7, #4]
9000bbf4:	f7f5 fb1e 	bl	90001234 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000bbf8:	687b      	ldr	r3, [r7, #4]
9000bbfa:	791b      	ldrb	r3, [r3, #4]
9000bbfc:	4619      	mov	r1, r3
9000bbfe:	6878      	ldr	r0, [r7, #4]
9000bc00:	f000 f80b 	bl	9000bc1a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000bc04:	687b      	ldr	r3, [r7, #4]
9000bc06:	795b      	ldrb	r3, [r3, #5]
9000bc08:	4619      	mov	r1, r3
9000bc0a:	6878      	ldr	r0, [r7, #4]
9000bc0c:	f000 f805 	bl	9000bc1a <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bc10:	2300      	movs	r3, #0
}
9000bc12:	4618      	mov	r0, r3
9000bc14:	3708      	adds	r7, #8
9000bc16:	46bd      	mov	sp, r7
9000bc18:	bd80      	pop	{r7, pc}

9000bc1a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000bc1a:	b480      	push	{r7}
9000bc1c:	b083      	sub	sp, #12
9000bc1e:	af00      	add	r7, sp, #0
9000bc20:	6078      	str	r0, [r7, #4]
9000bc22:	460b      	mov	r3, r1
9000bc24:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000bc26:	78fb      	ldrb	r3, [r7, #3]
9000bc28:	2b0f      	cmp	r3, #15
9000bc2a:	d80f      	bhi.n	9000bc4c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000bc2c:	78fb      	ldrb	r3, [r7, #3]
9000bc2e:	687a      	ldr	r2, [r7, #4]
9000bc30:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bc34:	009b      	lsls	r3, r3, #2
9000bc36:	4413      	add	r3, r2
9000bc38:	685a      	ldr	r2, [r3, #4]
9000bc3a:	78fb      	ldrb	r3, [r7, #3]
9000bc3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000bc40:	6879      	ldr	r1, [r7, #4]
9000bc42:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bc46:	009b      	lsls	r3, r3, #2
9000bc48:	440b      	add	r3, r1
9000bc4a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000bc4c:	2300      	movs	r3, #0
}
9000bc4e:	4618      	mov	r0, r3
9000bc50:	370c      	adds	r7, #12
9000bc52:	46bd      	mov	sp, r7
9000bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc58:	4770      	bx	lr
	...

9000bc5c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000bc5c:	b580      	push	{r7, lr}
9000bc5e:	b082      	sub	sp, #8
9000bc60:	af00      	add	r7, sp, #0
9000bc62:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000bc64:	687b      	ldr	r3, [r7, #4]
9000bc66:	681b      	ldr	r3, [r3, #0]
9000bc68:	4a22      	ldr	r2, [pc, #136]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc6a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000bc6c:	687b      	ldr	r3, [r7, #4]
9000bc6e:	685b      	ldr	r3, [r3, #4]
9000bc70:	4a20      	ldr	r2, [pc, #128]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc72:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000bc74:	687b      	ldr	r3, [r7, #4]
9000bc76:	689b      	ldr	r3, [r3, #8]
9000bc78:	4a1e      	ldr	r2, [pc, #120]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc7a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000bc7c:	687b      	ldr	r3, [r7, #4]
9000bc7e:	68db      	ldr	r3, [r3, #12]
9000bc80:	4a1c      	ldr	r2, [pc, #112]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc82:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000bc84:	687b      	ldr	r3, [r7, #4]
9000bc86:	691b      	ldr	r3, [r3, #16]
9000bc88:	4a1a      	ldr	r2, [pc, #104]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc8a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000bc8c:	687b      	ldr	r3, [r7, #4]
9000bc8e:	695b      	ldr	r3, [r3, #20]
9000bc90:	4a18      	ldr	r2, [pc, #96]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc92:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000bc94:	687b      	ldr	r3, [r7, #4]
9000bc96:	699b      	ldr	r3, [r3, #24]
9000bc98:	4a16      	ldr	r2, [pc, #88]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc9a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000bc9c:	687b      	ldr	r3, [r7, #4]
9000bc9e:	69db      	ldr	r3, [r3, #28]
9000bca0:	4a14      	ldr	r2, [pc, #80]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bca2:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000bca4:	687b      	ldr	r3, [r7, #4]
9000bca6:	6a1b      	ldr	r3, [r3, #32]
9000bca8:	4a12      	ldr	r2, [pc, #72]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bcaa:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000bcac:	687b      	ldr	r3, [r7, #4]
9000bcae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bcb0:	4a10      	ldr	r2, [pc, #64]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bcb2:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000bcb4:	687b      	ldr	r3, [r7, #4]
9000bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bcb8:	4a0e      	ldr	r2, [pc, #56]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bcba:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000bcbc:	4b0e      	ldr	r3, [pc, #56]	@ (9000bcf8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bcbe:	2200      	movs	r2, #0
9000bcc0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000bcc2:	4b0d      	ldr	r3, [pc, #52]	@ (9000bcf8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bcc4:	2200      	movs	r2, #0
9000bcc6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000bcc8:	4b0a      	ldr	r3, [pc, #40]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bcca:	69db      	ldr	r3, [r3, #28]
9000bccc:	4a0b      	ldr	r2, [pc, #44]	@ (9000bcfc <UTIL_LCD_SetFuncDriver+0xa0>)
9000bcce:	4611      	mov	r1, r2
9000bcd0:	2000      	movs	r0, #0
9000bcd2:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000bcd4:	4b07      	ldr	r3, [pc, #28]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bcd6:	6a1b      	ldr	r3, [r3, #32]
9000bcd8:	4a09      	ldr	r2, [pc, #36]	@ (9000bd00 <UTIL_LCD_SetFuncDriver+0xa4>)
9000bcda:	4611      	mov	r1, r2
9000bcdc:	2000      	movs	r0, #0
9000bcde:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000bce0:	4b04      	ldr	r3, [pc, #16]	@ (9000bcf4 <UTIL_LCD_SetFuncDriver+0x98>)
9000bce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bce4:	4a07      	ldr	r2, [pc, #28]	@ (9000bd04 <UTIL_LCD_SetFuncDriver+0xa8>)
9000bce6:	4611      	mov	r1, r2
9000bce8:	2000      	movs	r0, #0
9000bcea:	4798      	blx	r3
}
9000bcec:	bf00      	nop
9000bcee:	3708      	adds	r7, #8
9000bcf0:	46bd      	mov	sp, r7
9000bcf2:	bd80      	pop	{r7, pc}
9000bcf4:	20001328 	.word	0x20001328
9000bcf8:	200012e8 	.word	0x200012e8
9000bcfc:	200012fc 	.word	0x200012fc
9000bd00:	20001300 	.word	0x20001300
9000bd04:	20001304 	.word	0x20001304

9000bd08 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000bd08:	b580      	push	{r7, lr}
9000bd0a:	b082      	sub	sp, #8
9000bd0c:	af00      	add	r7, sp, #0
9000bd0e:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000bd10:	4b0a      	ldr	r3, [pc, #40]	@ (9000bd3c <UTIL_LCD_SetLayer+0x34>)
9000bd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bd14:	2b00      	cmp	r3, #0
9000bd16:	d00c      	beq.n	9000bd32 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000bd18:	4b08      	ldr	r3, [pc, #32]	@ (9000bd3c <UTIL_LCD_SetLayer+0x34>)
9000bd1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bd1c:	4a08      	ldr	r2, [pc, #32]	@ (9000bd40 <UTIL_LCD_SetLayer+0x38>)
9000bd1e:	6912      	ldr	r2, [r2, #16]
9000bd20:	6879      	ldr	r1, [r7, #4]
9000bd22:	4610      	mov	r0, r2
9000bd24:	4798      	blx	r3
9000bd26:	4603      	mov	r3, r0
9000bd28:	2b00      	cmp	r3, #0
9000bd2a:	d102      	bne.n	9000bd32 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000bd2c:	4a04      	ldr	r2, [pc, #16]	@ (9000bd40 <UTIL_LCD_SetLayer+0x38>)
9000bd2e:	687b      	ldr	r3, [r7, #4]
9000bd30:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000bd32:	bf00      	nop
9000bd34:	3708      	adds	r7, #8
9000bd36:	46bd      	mov	sp, r7
9000bd38:	bd80      	pop	{r7, pc}
9000bd3a:	bf00      	nop
9000bd3c:	20001328 	.word	0x20001328
9000bd40:	200012e8 	.word	0x200012e8

9000bd44 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000bd44:	b480      	push	{r7}
9000bd46:	b083      	sub	sp, #12
9000bd48:	af00      	add	r7, sp, #0
9000bd4a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000bd4c:	4b06      	ldr	r3, [pc, #24]	@ (9000bd68 <UTIL_LCD_SetTextColor+0x24>)
9000bd4e:	68db      	ldr	r3, [r3, #12]
9000bd50:	4a05      	ldr	r2, [pc, #20]	@ (9000bd68 <UTIL_LCD_SetTextColor+0x24>)
9000bd52:	015b      	lsls	r3, r3, #5
9000bd54:	4413      	add	r3, r2
9000bd56:	687a      	ldr	r2, [r7, #4]
9000bd58:	601a      	str	r2, [r3, #0]
}
9000bd5a:	bf00      	nop
9000bd5c:	370c      	adds	r7, #12
9000bd5e:	46bd      	mov	sp, r7
9000bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bd64:	4770      	bx	lr
9000bd66:	bf00      	nop
9000bd68:	200012e8 	.word	0x200012e8

9000bd6c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000bd6c:	b480      	push	{r7}
9000bd6e:	b083      	sub	sp, #12
9000bd70:	af00      	add	r7, sp, #0
9000bd72:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000bd74:	4b06      	ldr	r3, [pc, #24]	@ (9000bd90 <UTIL_LCD_SetBackColor+0x24>)
9000bd76:	68db      	ldr	r3, [r3, #12]
9000bd78:	4a05      	ldr	r2, [pc, #20]	@ (9000bd90 <UTIL_LCD_SetBackColor+0x24>)
9000bd7a:	015b      	lsls	r3, r3, #5
9000bd7c:	4413      	add	r3, r2
9000bd7e:	3304      	adds	r3, #4
9000bd80:	687a      	ldr	r2, [r7, #4]
9000bd82:	601a      	str	r2, [r3, #0]
}
9000bd84:	bf00      	nop
9000bd86:	370c      	adds	r7, #12
9000bd88:	46bd      	mov	sp, r7
9000bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bd8e:	4770      	bx	lr
9000bd90:	200012e8 	.word	0x200012e8

9000bd94 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000bd94:	b480      	push	{r7}
9000bd96:	b083      	sub	sp, #12
9000bd98:	af00      	add	r7, sp, #0
9000bd9a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000bd9c:	4b06      	ldr	r3, [pc, #24]	@ (9000bdb8 <UTIL_LCD_SetFont+0x24>)
9000bd9e:	68db      	ldr	r3, [r3, #12]
9000bda0:	4a05      	ldr	r2, [pc, #20]	@ (9000bdb8 <UTIL_LCD_SetFont+0x24>)
9000bda2:	015b      	lsls	r3, r3, #5
9000bda4:	4413      	add	r3, r2
9000bda6:	3308      	adds	r3, #8
9000bda8:	687a      	ldr	r2, [r7, #4]
9000bdaa:	601a      	str	r2, [r3, #0]
}
9000bdac:	bf00      	nop
9000bdae:	370c      	adds	r7, #12
9000bdb0:	46bd      	mov	sp, r7
9000bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdb6:	4770      	bx	lr
9000bdb8:	200012e8 	.word	0x200012e8

9000bdbc <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000bdbc:	b590      	push	{r4, r7, lr}
9000bdbe:	b087      	sub	sp, #28
9000bdc0:	af02      	add	r7, sp, #8
9000bdc2:	60f8      	str	r0, [r7, #12]
9000bdc4:	60b9      	str	r1, [r7, #8]
9000bdc6:	607a      	str	r2, [r7, #4]
9000bdc8:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000bdca:	4b08      	ldr	r3, [pc, #32]	@ (9000bdec <UTIL_LCD_FillRGBRect+0x30>)
9000bdcc:	685c      	ldr	r4, [r3, #4]
9000bdce:	4b08      	ldr	r3, [pc, #32]	@ (9000bdf0 <UTIL_LCD_FillRGBRect+0x34>)
9000bdd0:	6918      	ldr	r0, [r3, #16]
9000bdd2:	6a3b      	ldr	r3, [r7, #32]
9000bdd4:	9301      	str	r3, [sp, #4]
9000bdd6:	683b      	ldr	r3, [r7, #0]
9000bdd8:	9300      	str	r3, [sp, #0]
9000bdda:	687b      	ldr	r3, [r7, #4]
9000bddc:	68ba      	ldr	r2, [r7, #8]
9000bdde:	68f9      	ldr	r1, [r7, #12]
9000bde0:	47a0      	blx	r4
}
9000bde2:	bf00      	nop
9000bde4:	3714      	adds	r7, #20
9000bde6:	46bd      	mov	sp, r7
9000bde8:	bd90      	pop	{r4, r7, pc}
9000bdea:	bf00      	nop
9000bdec:	20001328 	.word	0x20001328
9000bdf0:	200012e8 	.word	0x200012e8

9000bdf4 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000bdf4:	b580      	push	{r7, lr}
9000bdf6:	b084      	sub	sp, #16
9000bdf8:	af02      	add	r7, sp, #8
9000bdfa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000bdfc:	4b07      	ldr	r3, [pc, #28]	@ (9000be1c <UTIL_LCD_Clear+0x28>)
9000bdfe:	695a      	ldr	r2, [r3, #20]
9000be00:	4b06      	ldr	r3, [pc, #24]	@ (9000be1c <UTIL_LCD_Clear+0x28>)
9000be02:	6999      	ldr	r1, [r3, #24]
9000be04:	687b      	ldr	r3, [r7, #4]
9000be06:	9300      	str	r3, [sp, #0]
9000be08:	460b      	mov	r3, r1
9000be0a:	2100      	movs	r1, #0
9000be0c:	2000      	movs	r0, #0
9000be0e:	f000 f8eb 	bl	9000bfe8 <UTIL_LCD_FillRect>
}
9000be12:	bf00      	nop
9000be14:	3708      	adds	r7, #8
9000be16:	46bd      	mov	sp, r7
9000be18:	bd80      	pop	{r7, pc}
9000be1a:	bf00      	nop
9000be1c:	200012e8 	.word	0x200012e8

9000be20 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000be20:	b580      	push	{r7, lr}
9000be22:	b084      	sub	sp, #16
9000be24:	af00      	add	r7, sp, #0
9000be26:	60f8      	str	r0, [r7, #12]
9000be28:	60b9      	str	r1, [r7, #8]
9000be2a:	4613      	mov	r3, r2
9000be2c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000be2e:	4b16      	ldr	r3, [pc, #88]	@ (9000be88 <UTIL_LCD_DisplayChar+0x68>)
9000be30:	68db      	ldr	r3, [r3, #12]
9000be32:	4a15      	ldr	r2, [pc, #84]	@ (9000be88 <UTIL_LCD_DisplayChar+0x68>)
9000be34:	015b      	lsls	r3, r3, #5
9000be36:	4413      	add	r3, r2
9000be38:	3308      	adds	r3, #8
9000be3a:	681b      	ldr	r3, [r3, #0]
9000be3c:	681a      	ldr	r2, [r3, #0]
9000be3e:	79fb      	ldrb	r3, [r7, #7]
9000be40:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000be42:	4911      	ldr	r1, [pc, #68]	@ (9000be88 <UTIL_LCD_DisplayChar+0x68>)
9000be44:	68c9      	ldr	r1, [r1, #12]
9000be46:	4810      	ldr	r0, [pc, #64]	@ (9000be88 <UTIL_LCD_DisplayChar+0x68>)
9000be48:	0149      	lsls	r1, r1, #5
9000be4a:	4401      	add	r1, r0
9000be4c:	3108      	adds	r1, #8
9000be4e:	6809      	ldr	r1, [r1, #0]
9000be50:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000be52:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000be56:	4b0c      	ldr	r3, [pc, #48]	@ (9000be88 <UTIL_LCD_DisplayChar+0x68>)
9000be58:	68db      	ldr	r3, [r3, #12]
9000be5a:	480b      	ldr	r0, [pc, #44]	@ (9000be88 <UTIL_LCD_DisplayChar+0x68>)
9000be5c:	015b      	lsls	r3, r3, #5
9000be5e:	4403      	add	r3, r0
9000be60:	3308      	adds	r3, #8
9000be62:	681b      	ldr	r3, [r3, #0]
9000be64:	889b      	ldrh	r3, [r3, #4]
9000be66:	3307      	adds	r3, #7
9000be68:	2b00      	cmp	r3, #0
9000be6a:	da00      	bge.n	9000be6e <UTIL_LCD_DisplayChar+0x4e>
9000be6c:	3307      	adds	r3, #7
9000be6e:	10db      	asrs	r3, r3, #3
9000be70:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000be74:	4413      	add	r3, r2
9000be76:	461a      	mov	r2, r3
9000be78:	68b9      	ldr	r1, [r7, #8]
9000be7a:	68f8      	ldr	r0, [r7, #12]
9000be7c:	f000 f8ee 	bl	9000c05c <DrawChar>
}
9000be80:	bf00      	nop
9000be82:	3710      	adds	r7, #16
9000be84:	46bd      	mov	sp, r7
9000be86:	bd80      	pop	{r7, pc}
9000be88:	200012e8 	.word	0x200012e8

9000be8c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000be8c:	b580      	push	{r7, lr}
9000be8e:	b08a      	sub	sp, #40	@ 0x28
9000be90:	af00      	add	r7, sp, #0
9000be92:	60f8      	str	r0, [r7, #12]
9000be94:	60b9      	str	r1, [r7, #8]
9000be96:	607a      	str	r2, [r7, #4]
9000be98:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000be9a:	2301      	movs	r3, #1
9000be9c:	627b      	str	r3, [r7, #36]	@ 0x24
9000be9e:	2300      	movs	r3, #0
9000bea0:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000bea2:	2300      	movs	r3, #0
9000bea4:	61fb      	str	r3, [r7, #28]
9000bea6:	2300      	movs	r3, #0
9000bea8:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000beaa:	687b      	ldr	r3, [r7, #4]
9000beac:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000beae:	e002      	b.n	9000beb6 <UTIL_LCD_DisplayStringAt+0x2a>
9000beb0:	69fb      	ldr	r3, [r7, #28]
9000beb2:	3301      	adds	r3, #1
9000beb4:	61fb      	str	r3, [r7, #28]
9000beb6:	69bb      	ldr	r3, [r7, #24]
9000beb8:	1c5a      	adds	r2, r3, #1
9000beba:	61ba      	str	r2, [r7, #24]
9000bebc:	781b      	ldrb	r3, [r3, #0]
9000bebe:	2b00      	cmp	r3, #0
9000bec0:	d1f6      	bne.n	9000beb0 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bec2:	4b48      	ldr	r3, [pc, #288]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bec4:	695b      	ldr	r3, [r3, #20]
9000bec6:	4a47      	ldr	r2, [pc, #284]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bec8:	68d2      	ldr	r2, [r2, #12]
9000beca:	4946      	ldr	r1, [pc, #280]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000becc:	0152      	lsls	r2, r2, #5
9000bece:	440a      	add	r2, r1
9000bed0:	3208      	adds	r2, #8
9000bed2:	6812      	ldr	r2, [r2, #0]
9000bed4:	8892      	ldrh	r2, [r2, #4]
9000bed6:	fbb3 f3f2 	udiv	r3, r3, r2
9000beda:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000bedc:	78fb      	ldrb	r3, [r7, #3]
9000bede:	2b03      	cmp	r3, #3
9000bee0:	d018      	beq.n	9000bf14 <UTIL_LCD_DisplayStringAt+0x88>
9000bee2:	2b03      	cmp	r3, #3
9000bee4:	dc2a      	bgt.n	9000bf3c <UTIL_LCD_DisplayStringAt+0xb0>
9000bee6:	2b01      	cmp	r3, #1
9000bee8:	d002      	beq.n	9000bef0 <UTIL_LCD_DisplayStringAt+0x64>
9000beea:	2b02      	cmp	r3, #2
9000beec:	d015      	beq.n	9000bf1a <UTIL_LCD_DisplayStringAt+0x8e>
9000beee:	e025      	b.n	9000bf3c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000bef0:	697a      	ldr	r2, [r7, #20]
9000bef2:	69fb      	ldr	r3, [r7, #28]
9000bef4:	1ad3      	subs	r3, r2, r3
9000bef6:	4a3b      	ldr	r2, [pc, #236]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bef8:	68d2      	ldr	r2, [r2, #12]
9000befa:	493a      	ldr	r1, [pc, #232]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000befc:	0152      	lsls	r2, r2, #5
9000befe:	440a      	add	r2, r1
9000bf00:	3208      	adds	r2, #8
9000bf02:	6812      	ldr	r2, [r2, #0]
9000bf04:	8892      	ldrh	r2, [r2, #4]
9000bf06:	fb02 f303 	mul.w	r3, r2, r3
9000bf0a:	085b      	lsrs	r3, r3, #1
9000bf0c:	68fa      	ldr	r2, [r7, #12]
9000bf0e:	4413      	add	r3, r2
9000bf10:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bf12:	e016      	b.n	9000bf42 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000bf14:	68fb      	ldr	r3, [r7, #12]
9000bf16:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bf18:	e013      	b.n	9000bf42 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bf1a:	697a      	ldr	r2, [r7, #20]
9000bf1c:	69fb      	ldr	r3, [r7, #28]
9000bf1e:	1ad3      	subs	r3, r2, r3
9000bf20:	4a30      	ldr	r2, [pc, #192]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bf22:	68d2      	ldr	r2, [r2, #12]
9000bf24:	492f      	ldr	r1, [pc, #188]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bf26:	0152      	lsls	r2, r2, #5
9000bf28:	440a      	add	r2, r1
9000bf2a:	3208      	adds	r2, #8
9000bf2c:	6812      	ldr	r2, [r2, #0]
9000bf2e:	8892      	ldrh	r2, [r2, #4]
9000bf30:	fb03 f202 	mul.w	r2, r3, r2
9000bf34:	68fb      	ldr	r3, [r7, #12]
9000bf36:	1ad3      	subs	r3, r2, r3
9000bf38:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bf3a:	e002      	b.n	9000bf42 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000bf3c:	68fb      	ldr	r3, [r7, #12]
9000bf3e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bf40:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bf44:	2b00      	cmp	r3, #0
9000bf46:	d003      	beq.n	9000bf50 <UTIL_LCD_DisplayStringAt+0xc4>
9000bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bf4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000bf4e:	d31b      	bcc.n	9000bf88 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000bf50:	2301      	movs	r3, #1
9000bf52:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000bf54:	e018      	b.n	9000bf88 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000bf56:	687b      	ldr	r3, [r7, #4]
9000bf58:	781b      	ldrb	r3, [r3, #0]
9000bf5a:	461a      	mov	r2, r3
9000bf5c:	68b9      	ldr	r1, [r7, #8]
9000bf5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000bf60:	f7ff ff5e 	bl	9000be20 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bf64:	4b1f      	ldr	r3, [pc, #124]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bf66:	68db      	ldr	r3, [r3, #12]
9000bf68:	4a1e      	ldr	r2, [pc, #120]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bf6a:	015b      	lsls	r3, r3, #5
9000bf6c:	4413      	add	r3, r2
9000bf6e:	3308      	adds	r3, #8
9000bf70:	681b      	ldr	r3, [r3, #0]
9000bf72:	889b      	ldrh	r3, [r3, #4]
9000bf74:	461a      	mov	r2, r3
9000bf76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bf78:	4413      	add	r3, r2
9000bf7a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000bf7c:	687b      	ldr	r3, [r7, #4]
9000bf7e:	3301      	adds	r3, #1
9000bf80:	607b      	str	r3, [r7, #4]
    i++;
9000bf82:	6a3b      	ldr	r3, [r7, #32]
9000bf84:	3301      	adds	r3, #1
9000bf86:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000bf88:	687b      	ldr	r3, [r7, #4]
9000bf8a:	781b      	ldrb	r3, [r3, #0]
9000bf8c:	2b00      	cmp	r3, #0
9000bf8e:	bf14      	ite	ne
9000bf90:	2301      	movne	r3, #1
9000bf92:	2300      	moveq	r3, #0
9000bf94:	b2da      	uxtb	r2, r3
9000bf96:	4b13      	ldr	r3, [pc, #76]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bf98:	6959      	ldr	r1, [r3, #20]
9000bf9a:	4b12      	ldr	r3, [pc, #72]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bf9c:	68db      	ldr	r3, [r3, #12]
9000bf9e:	4811      	ldr	r0, [pc, #68]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bfa0:	015b      	lsls	r3, r3, #5
9000bfa2:	4403      	add	r3, r0
9000bfa4:	3308      	adds	r3, #8
9000bfa6:	681b      	ldr	r3, [r3, #0]
9000bfa8:	889b      	ldrh	r3, [r3, #4]
9000bfaa:	4618      	mov	r0, r3
9000bfac:	6a3b      	ldr	r3, [r7, #32]
9000bfae:	fb00 f303 	mul.w	r3, r0, r3
9000bfb2:	1acb      	subs	r3, r1, r3
9000bfb4:	b29b      	uxth	r3, r3
9000bfb6:	490b      	ldr	r1, [pc, #44]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bfb8:	68c9      	ldr	r1, [r1, #12]
9000bfba:	480a      	ldr	r0, [pc, #40]	@ (9000bfe4 <UTIL_LCD_DisplayStringAt+0x158>)
9000bfbc:	0149      	lsls	r1, r1, #5
9000bfbe:	4401      	add	r1, r0
9000bfc0:	3108      	adds	r1, #8
9000bfc2:	6809      	ldr	r1, [r1, #0]
9000bfc4:	8889      	ldrh	r1, [r1, #4]
9000bfc6:	428b      	cmp	r3, r1
9000bfc8:	bf2c      	ite	cs
9000bfca:	2301      	movcs	r3, #1
9000bfcc:	2300      	movcc	r3, #0
9000bfce:	b2db      	uxtb	r3, r3
9000bfd0:	4013      	ands	r3, r2
9000bfd2:	b2db      	uxtb	r3, r3
9000bfd4:	2b00      	cmp	r3, #0
9000bfd6:	d1be      	bne.n	9000bf56 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000bfd8:	bf00      	nop
9000bfda:	bf00      	nop
9000bfdc:	3728      	adds	r7, #40	@ 0x28
9000bfde:	46bd      	mov	sp, r7
9000bfe0:	bd80      	pop	{r7, pc}
9000bfe2:	bf00      	nop
9000bfe4:	200012e8 	.word	0x200012e8

9000bfe8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000bfe8:	b590      	push	{r4, r7, lr}
9000bfea:	b087      	sub	sp, #28
9000bfec:	af02      	add	r7, sp, #8
9000bfee:	60f8      	str	r0, [r7, #12]
9000bff0:	60b9      	str	r1, [r7, #8]
9000bff2:	607a      	str	r2, [r7, #4]
9000bff4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bff6:	4b17      	ldr	r3, [pc, #92]	@ (9000c054 <UTIL_LCD_FillRect+0x6c>)
9000bff8:	69db      	ldr	r3, [r3, #28]
9000bffa:	2b02      	cmp	r3, #2
9000bffc:	d11a      	bne.n	9000c034 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000bffe:	4b16      	ldr	r3, [pc, #88]	@ (9000c058 <UTIL_LCD_FillRect+0x70>)
9000c000:	691c      	ldr	r4, [r3, #16]
9000c002:	4b14      	ldr	r3, [pc, #80]	@ (9000c054 <UTIL_LCD_FillRect+0x6c>)
9000c004:	6918      	ldr	r0, [r3, #16]
9000c006:	6a3b      	ldr	r3, [r7, #32]
9000c008:	08db      	lsrs	r3, r3, #3
9000c00a:	f003 021f 	and.w	r2, r3, #31
9000c00e:	6a3b      	ldr	r3, [r7, #32]
9000c010:	0a9b      	lsrs	r3, r3, #10
9000c012:	015b      	lsls	r3, r3, #5
9000c014:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c018:	431a      	orrs	r2, r3
9000c01a:	6a3b      	ldr	r3, [r7, #32]
9000c01c:	0cdb      	lsrs	r3, r3, #19
9000c01e:	02db      	lsls	r3, r3, #11
9000c020:	b29b      	uxth	r3, r3
9000c022:	4313      	orrs	r3, r2
9000c024:	9301      	str	r3, [sp, #4]
9000c026:	683b      	ldr	r3, [r7, #0]
9000c028:	9300      	str	r3, [sp, #0]
9000c02a:	687b      	ldr	r3, [r7, #4]
9000c02c:	68ba      	ldr	r2, [r7, #8]
9000c02e:	68f9      	ldr	r1, [r7, #12]
9000c030:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000c032:	e00b      	b.n	9000c04c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000c034:	4b08      	ldr	r3, [pc, #32]	@ (9000c058 <UTIL_LCD_FillRect+0x70>)
9000c036:	691c      	ldr	r4, [r3, #16]
9000c038:	4b06      	ldr	r3, [pc, #24]	@ (9000c054 <UTIL_LCD_FillRect+0x6c>)
9000c03a:	6918      	ldr	r0, [r3, #16]
9000c03c:	6a3b      	ldr	r3, [r7, #32]
9000c03e:	9301      	str	r3, [sp, #4]
9000c040:	683b      	ldr	r3, [r7, #0]
9000c042:	9300      	str	r3, [sp, #0]
9000c044:	687b      	ldr	r3, [r7, #4]
9000c046:	68ba      	ldr	r2, [r7, #8]
9000c048:	68f9      	ldr	r1, [r7, #12]
9000c04a:	47a0      	blx	r4
}
9000c04c:	bf00      	nop
9000c04e:	3714      	adds	r7, #20
9000c050:	46bd      	mov	sp, r7
9000c052:	bd90      	pop	{r4, r7, pc}
9000c054:	200012e8 	.word	0x200012e8
9000c058:	20001328 	.word	0x20001328

9000c05c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000c05c:	b580      	push	{r7, lr}
9000c05e:	b0b2      	sub	sp, #200	@ 0xc8
9000c060:	af02      	add	r7, sp, #8
9000c062:	60f8      	str	r0, [r7, #12]
9000c064:	60b9      	str	r1, [r7, #8]
9000c066:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000c068:	2300      	movs	r3, #0
9000c06a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c06e:	2300      	movs	r3, #0
9000c070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000c074:	4ba5      	ldr	r3, [pc, #660]	@ (9000c30c <DrawChar+0x2b0>)
9000c076:	68db      	ldr	r3, [r3, #12]
9000c078:	4aa4      	ldr	r2, [pc, #656]	@ (9000c30c <DrawChar+0x2b0>)
9000c07a:	015b      	lsls	r3, r3, #5
9000c07c:	4413      	add	r3, r2
9000c07e:	3308      	adds	r3, #8
9000c080:	681b      	ldr	r3, [r3, #0]
9000c082:	88db      	ldrh	r3, [r3, #6]
9000c084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000c088:	4ba0      	ldr	r3, [pc, #640]	@ (9000c30c <DrawChar+0x2b0>)
9000c08a:	68db      	ldr	r3, [r3, #12]
9000c08c:	4a9f      	ldr	r2, [pc, #636]	@ (9000c30c <DrawChar+0x2b0>)
9000c08e:	015b      	lsls	r3, r3, #5
9000c090:	4413      	add	r3, r2
9000c092:	3308      	adds	r3, #8
9000c094:	681b      	ldr	r3, [r3, #0]
9000c096:	889b      	ldrh	r3, [r3, #4]
9000c098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000c09c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0a0:	3307      	adds	r3, #7
9000c0a2:	f023 0207 	bic.w	r2, r3, #7
9000c0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0aa:	1ad3      	subs	r3, r2, r3
9000c0ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000c0b0:	2300      	movs	r3, #0
9000c0b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c0b6:	e11c      	b.n	9000c2f2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000c0b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0bc:	3307      	adds	r3, #7
9000c0be:	08db      	lsrs	r3, r3, #3
9000c0c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c0c4:	fb02 f303 	mul.w	r3, r2, r3
9000c0c8:	687a      	ldr	r2, [r7, #4]
9000c0ca:	4413      	add	r3, r2
9000c0cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000c0d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0d4:	3307      	adds	r3, #7
9000c0d6:	08db      	lsrs	r3, r3, #3
9000c0d8:	2b01      	cmp	r3, #1
9000c0da:	d002      	beq.n	9000c0e2 <DrawChar+0x86>
9000c0dc:	2b02      	cmp	r3, #2
9000c0de:	d006      	beq.n	9000c0ee <DrawChar+0x92>
9000c0e0:	e011      	b.n	9000c106 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000c0e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c0e6:	781b      	ldrb	r3, [r3, #0]
9000c0e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c0ec:	e01d      	b.n	9000c12a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000c0ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c0f2:	781b      	ldrb	r3, [r3, #0]
9000c0f4:	021b      	lsls	r3, r3, #8
9000c0f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c0fa:	3201      	adds	r2, #1
9000c0fc:	7812      	ldrb	r2, [r2, #0]
9000c0fe:	4313      	orrs	r3, r2
9000c100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c104:	e011      	b.n	9000c12a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000c106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c10a:	781b      	ldrb	r3, [r3, #0]
9000c10c:	041a      	lsls	r2, r3, #16
9000c10e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c112:	3301      	adds	r3, #1
9000c114:	781b      	ldrb	r3, [r3, #0]
9000c116:	021b      	lsls	r3, r3, #8
9000c118:	4313      	orrs	r3, r2
9000c11a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c11e:	3202      	adds	r2, #2
9000c120:	7812      	ldrb	r2, [r2, #0]
9000c122:	4313      	orrs	r3, r2
9000c124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c128:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c12a:	4b78      	ldr	r3, [pc, #480]	@ (9000c30c <DrawChar+0x2b0>)
9000c12c:	68db      	ldr	r3, [r3, #12]
9000c12e:	4a77      	ldr	r2, [pc, #476]	@ (9000c30c <DrawChar+0x2b0>)
9000c130:	015b      	lsls	r3, r3, #5
9000c132:	4413      	add	r3, r2
9000c134:	331c      	adds	r3, #28
9000c136:	681b      	ldr	r3, [r3, #0]
9000c138:	2b02      	cmp	r3, #2
9000c13a:	f040 808c 	bne.w	9000c256 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000c13e:	2300      	movs	r3, #0
9000c140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c144:	e074      	b.n	9000c230 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c146:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c14a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c14e:	1ad2      	subs	r2, r2, r3
9000c150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c154:	4413      	add	r3, r2
9000c156:	3b01      	subs	r3, #1
9000c158:	2201      	movs	r2, #1
9000c15a:	fa02 f303 	lsl.w	r3, r2, r3
9000c15e:	461a      	mov	r2, r3
9000c160:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c164:	4013      	ands	r3, r2
9000c166:	2b00      	cmp	r3, #0
9000c168:	d02d      	beq.n	9000c1c6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000c16a:	4b68      	ldr	r3, [pc, #416]	@ (9000c30c <DrawChar+0x2b0>)
9000c16c:	68db      	ldr	r3, [r3, #12]
9000c16e:	4a67      	ldr	r2, [pc, #412]	@ (9000c30c <DrawChar+0x2b0>)
9000c170:	015b      	lsls	r3, r3, #5
9000c172:	4413      	add	r3, r2
9000c174:	681b      	ldr	r3, [r3, #0]
9000c176:	08db      	lsrs	r3, r3, #3
9000c178:	b29b      	uxth	r3, r3
9000c17a:	f003 031f 	and.w	r3, r3, #31
9000c17e:	b29a      	uxth	r2, r3
9000c180:	4b62      	ldr	r3, [pc, #392]	@ (9000c30c <DrawChar+0x2b0>)
9000c182:	68db      	ldr	r3, [r3, #12]
9000c184:	4961      	ldr	r1, [pc, #388]	@ (9000c30c <DrawChar+0x2b0>)
9000c186:	015b      	lsls	r3, r3, #5
9000c188:	440b      	add	r3, r1
9000c18a:	681b      	ldr	r3, [r3, #0]
9000c18c:	0a9b      	lsrs	r3, r3, #10
9000c18e:	b29b      	uxth	r3, r3
9000c190:	015b      	lsls	r3, r3, #5
9000c192:	b29b      	uxth	r3, r3
9000c194:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c198:	b29b      	uxth	r3, r3
9000c19a:	4313      	orrs	r3, r2
9000c19c:	b29a      	uxth	r2, r3
9000c19e:	4b5b      	ldr	r3, [pc, #364]	@ (9000c30c <DrawChar+0x2b0>)
9000c1a0:	68db      	ldr	r3, [r3, #12]
9000c1a2:	495a      	ldr	r1, [pc, #360]	@ (9000c30c <DrawChar+0x2b0>)
9000c1a4:	015b      	lsls	r3, r3, #5
9000c1a6:	440b      	add	r3, r1
9000c1a8:	681b      	ldr	r3, [r3, #0]
9000c1aa:	0cdb      	lsrs	r3, r3, #19
9000c1ac:	b29b      	uxth	r3, r3
9000c1ae:	02db      	lsls	r3, r3, #11
9000c1b0:	b29b      	uxth	r3, r3
9000c1b2:	4313      	orrs	r3, r2
9000c1b4:	b29a      	uxth	r2, r3
9000c1b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c1ba:	005b      	lsls	r3, r3, #1
9000c1bc:	33c0      	adds	r3, #192	@ 0xc0
9000c1be:	443b      	add	r3, r7
9000c1c0:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000c1c4:	e02f      	b.n	9000c226 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000c1c6:	4b51      	ldr	r3, [pc, #324]	@ (9000c30c <DrawChar+0x2b0>)
9000c1c8:	68db      	ldr	r3, [r3, #12]
9000c1ca:	4a50      	ldr	r2, [pc, #320]	@ (9000c30c <DrawChar+0x2b0>)
9000c1cc:	015b      	lsls	r3, r3, #5
9000c1ce:	4413      	add	r3, r2
9000c1d0:	3304      	adds	r3, #4
9000c1d2:	681b      	ldr	r3, [r3, #0]
9000c1d4:	08db      	lsrs	r3, r3, #3
9000c1d6:	b29b      	uxth	r3, r3
9000c1d8:	f003 031f 	and.w	r3, r3, #31
9000c1dc:	b29a      	uxth	r2, r3
9000c1de:	4b4b      	ldr	r3, [pc, #300]	@ (9000c30c <DrawChar+0x2b0>)
9000c1e0:	68db      	ldr	r3, [r3, #12]
9000c1e2:	494a      	ldr	r1, [pc, #296]	@ (9000c30c <DrawChar+0x2b0>)
9000c1e4:	015b      	lsls	r3, r3, #5
9000c1e6:	440b      	add	r3, r1
9000c1e8:	3304      	adds	r3, #4
9000c1ea:	681b      	ldr	r3, [r3, #0]
9000c1ec:	0a9b      	lsrs	r3, r3, #10
9000c1ee:	b29b      	uxth	r3, r3
9000c1f0:	015b      	lsls	r3, r3, #5
9000c1f2:	b29b      	uxth	r3, r3
9000c1f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c1f8:	b29b      	uxth	r3, r3
9000c1fa:	4313      	orrs	r3, r2
9000c1fc:	b29a      	uxth	r2, r3
9000c1fe:	4b43      	ldr	r3, [pc, #268]	@ (9000c30c <DrawChar+0x2b0>)
9000c200:	68db      	ldr	r3, [r3, #12]
9000c202:	4942      	ldr	r1, [pc, #264]	@ (9000c30c <DrawChar+0x2b0>)
9000c204:	015b      	lsls	r3, r3, #5
9000c206:	440b      	add	r3, r1
9000c208:	3304      	adds	r3, #4
9000c20a:	681b      	ldr	r3, [r3, #0]
9000c20c:	0cdb      	lsrs	r3, r3, #19
9000c20e:	b29b      	uxth	r3, r3
9000c210:	02db      	lsls	r3, r3, #11
9000c212:	b29b      	uxth	r3, r3
9000c214:	4313      	orrs	r3, r2
9000c216:	b29a      	uxth	r2, r3
9000c218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c21c:	005b      	lsls	r3, r3, #1
9000c21e:	33c0      	adds	r3, #192	@ 0xc0
9000c220:	443b      	add	r3, r7
9000c222:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000c226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c22a:	3301      	adds	r3, #1
9000c22c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c230:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c238:	429a      	cmp	r2, r3
9000c23a:	d384      	bcc.n	9000c146 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000c23c:	68b9      	ldr	r1, [r7, #8]
9000c23e:	1c4b      	adds	r3, r1, #1
9000c240:	60bb      	str	r3, [r7, #8]
9000c242:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000c246:	2301      	movs	r3, #1
9000c248:	9300      	str	r3, [sp, #0]
9000c24a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c24e:	68f8      	ldr	r0, [r7, #12]
9000c250:	f7ff fdb4 	bl	9000bdbc <UTIL_LCD_FillRGBRect>
9000c254:	e048      	b.n	9000c2e8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000c256:	2300      	movs	r3, #0
9000c258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c25c:	e032      	b.n	9000c2c4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c25e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c266:	1ad2      	subs	r2, r2, r3
9000c268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c26c:	4413      	add	r3, r2
9000c26e:	3b01      	subs	r3, #1
9000c270:	2201      	movs	r2, #1
9000c272:	fa02 f303 	lsl.w	r3, r2, r3
9000c276:	461a      	mov	r2, r3
9000c278:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c27c:	4013      	ands	r3, r2
9000c27e:	2b00      	cmp	r3, #0
9000c280:	d00d      	beq.n	9000c29e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000c282:	4b22      	ldr	r3, [pc, #136]	@ (9000c30c <DrawChar+0x2b0>)
9000c284:	68db      	ldr	r3, [r3, #12]
9000c286:	4a21      	ldr	r2, [pc, #132]	@ (9000c30c <DrawChar+0x2b0>)
9000c288:	015b      	lsls	r3, r3, #5
9000c28a:	4413      	add	r3, r2
9000c28c:	681a      	ldr	r2, [r3, #0]
9000c28e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c292:	009b      	lsls	r3, r3, #2
9000c294:	33c0      	adds	r3, #192	@ 0xc0
9000c296:	443b      	add	r3, r7
9000c298:	f843 2cac 	str.w	r2, [r3, #-172]
9000c29c:	e00d      	b.n	9000c2ba <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000c29e:	4b1b      	ldr	r3, [pc, #108]	@ (9000c30c <DrawChar+0x2b0>)
9000c2a0:	68db      	ldr	r3, [r3, #12]
9000c2a2:	4a1a      	ldr	r2, [pc, #104]	@ (9000c30c <DrawChar+0x2b0>)
9000c2a4:	015b      	lsls	r3, r3, #5
9000c2a6:	4413      	add	r3, r2
9000c2a8:	3304      	adds	r3, #4
9000c2aa:	681a      	ldr	r2, [r3, #0]
9000c2ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c2b0:	009b      	lsls	r3, r3, #2
9000c2b2:	33c0      	adds	r3, #192	@ 0xc0
9000c2b4:	443b      	add	r3, r7
9000c2b6:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000c2ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c2be:	3301      	adds	r3, #1
9000c2c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c2c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c2c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c2cc:	429a      	cmp	r2, r3
9000c2ce:	d3c6      	bcc.n	9000c25e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000c2d0:	68b9      	ldr	r1, [r7, #8]
9000c2d2:	1c4b      	adds	r3, r1, #1
9000c2d4:	60bb      	str	r3, [r7, #8]
9000c2d6:	f107 0214 	add.w	r2, r7, #20
9000c2da:	2301      	movs	r3, #1
9000c2dc:	9300      	str	r3, [sp, #0]
9000c2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c2e2:	68f8      	ldr	r0, [r7, #12]
9000c2e4:	f7ff fd6a 	bl	9000bdbc <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000c2e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000c2ec:	3301      	adds	r3, #1
9000c2ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c2f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c2f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000c2fa:	429a      	cmp	r2, r3
9000c2fc:	f4ff aedc 	bcc.w	9000c0b8 <DrawChar+0x5c>
    }
  }
}
9000c300:	bf00      	nop
9000c302:	bf00      	nop
9000c304:	37c0      	adds	r7, #192	@ 0xc0
9000c306:	46bd      	mov	sp, r7
9000c308:	bd80      	pop	{r7, pc}
9000c30a:	bf00      	nop
9000c30c:	200012e8 	.word	0x200012e8

9000c310 <sbrk_aligned>:
9000c310:	b570      	push	{r4, r5, r6, lr}
9000c312:	4e0f      	ldr	r6, [pc, #60]	@ (9000c350 <sbrk_aligned+0x40>)
9000c314:	460c      	mov	r4, r1
9000c316:	6831      	ldr	r1, [r6, #0]
9000c318:	4605      	mov	r5, r0
9000c31a:	b911      	cbnz	r1, 9000c322 <sbrk_aligned+0x12>
9000c31c:	f000 fb0e 	bl	9000c93c <_sbrk_r>
9000c320:	6030      	str	r0, [r6, #0]
9000c322:	4621      	mov	r1, r4
9000c324:	4628      	mov	r0, r5
9000c326:	f000 fb09 	bl	9000c93c <_sbrk_r>
9000c32a:	1c43      	adds	r3, r0, #1
9000c32c:	d103      	bne.n	9000c336 <sbrk_aligned+0x26>
9000c32e:	f04f 34ff 	mov.w	r4, #4294967295
9000c332:	4620      	mov	r0, r4
9000c334:	bd70      	pop	{r4, r5, r6, pc}
9000c336:	1cc4      	adds	r4, r0, #3
9000c338:	f024 0403 	bic.w	r4, r4, #3
9000c33c:	42a0      	cmp	r0, r4
9000c33e:	d0f8      	beq.n	9000c332 <sbrk_aligned+0x22>
9000c340:	1a21      	subs	r1, r4, r0
9000c342:	4628      	mov	r0, r5
9000c344:	f000 fafa 	bl	9000c93c <_sbrk_r>
9000c348:	3001      	adds	r0, #1
9000c34a:	d1f2      	bne.n	9000c332 <sbrk_aligned+0x22>
9000c34c:	e7ef      	b.n	9000c32e <sbrk_aligned+0x1e>
9000c34e:	bf00      	nop
9000c350:	20001354 	.word	0x20001354

9000c354 <_malloc_r>:
9000c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c358:	1ccd      	adds	r5, r1, #3
9000c35a:	f025 0503 	bic.w	r5, r5, #3
9000c35e:	3508      	adds	r5, #8
9000c360:	2d0c      	cmp	r5, #12
9000c362:	bf38      	it	cc
9000c364:	250c      	movcc	r5, #12
9000c366:	2d00      	cmp	r5, #0
9000c368:	4606      	mov	r6, r0
9000c36a:	db01      	blt.n	9000c370 <_malloc_r+0x1c>
9000c36c:	42a9      	cmp	r1, r5
9000c36e:	d904      	bls.n	9000c37a <_malloc_r+0x26>
9000c370:	230c      	movs	r3, #12
9000c372:	6033      	str	r3, [r6, #0]
9000c374:	2000      	movs	r0, #0
9000c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c37a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000c450 <_malloc_r+0xfc>
9000c37e:	f000 f869 	bl	9000c454 <__malloc_lock>
9000c382:	f8d8 3000 	ldr.w	r3, [r8]
9000c386:	461c      	mov	r4, r3
9000c388:	bb44      	cbnz	r4, 9000c3dc <_malloc_r+0x88>
9000c38a:	4629      	mov	r1, r5
9000c38c:	4630      	mov	r0, r6
9000c38e:	f7ff ffbf 	bl	9000c310 <sbrk_aligned>
9000c392:	1c43      	adds	r3, r0, #1
9000c394:	4604      	mov	r4, r0
9000c396:	d158      	bne.n	9000c44a <_malloc_r+0xf6>
9000c398:	f8d8 4000 	ldr.w	r4, [r8]
9000c39c:	4627      	mov	r7, r4
9000c39e:	2f00      	cmp	r7, #0
9000c3a0:	d143      	bne.n	9000c42a <_malloc_r+0xd6>
9000c3a2:	2c00      	cmp	r4, #0
9000c3a4:	d04b      	beq.n	9000c43e <_malloc_r+0xea>
9000c3a6:	6823      	ldr	r3, [r4, #0]
9000c3a8:	4639      	mov	r1, r7
9000c3aa:	4630      	mov	r0, r6
9000c3ac:	eb04 0903 	add.w	r9, r4, r3
9000c3b0:	f000 fac4 	bl	9000c93c <_sbrk_r>
9000c3b4:	4581      	cmp	r9, r0
9000c3b6:	d142      	bne.n	9000c43e <_malloc_r+0xea>
9000c3b8:	6821      	ldr	r1, [r4, #0]
9000c3ba:	1a6d      	subs	r5, r5, r1
9000c3bc:	4629      	mov	r1, r5
9000c3be:	4630      	mov	r0, r6
9000c3c0:	f7ff ffa6 	bl	9000c310 <sbrk_aligned>
9000c3c4:	3001      	adds	r0, #1
9000c3c6:	d03a      	beq.n	9000c43e <_malloc_r+0xea>
9000c3c8:	6823      	ldr	r3, [r4, #0]
9000c3ca:	442b      	add	r3, r5
9000c3cc:	6023      	str	r3, [r4, #0]
9000c3ce:	f8d8 3000 	ldr.w	r3, [r8]
9000c3d2:	685a      	ldr	r2, [r3, #4]
9000c3d4:	bb62      	cbnz	r2, 9000c430 <_malloc_r+0xdc>
9000c3d6:	f8c8 7000 	str.w	r7, [r8]
9000c3da:	e00f      	b.n	9000c3fc <_malloc_r+0xa8>
9000c3dc:	6822      	ldr	r2, [r4, #0]
9000c3de:	1b52      	subs	r2, r2, r5
9000c3e0:	d420      	bmi.n	9000c424 <_malloc_r+0xd0>
9000c3e2:	2a0b      	cmp	r2, #11
9000c3e4:	d917      	bls.n	9000c416 <_malloc_r+0xc2>
9000c3e6:	1961      	adds	r1, r4, r5
9000c3e8:	42a3      	cmp	r3, r4
9000c3ea:	6025      	str	r5, [r4, #0]
9000c3ec:	bf18      	it	ne
9000c3ee:	6059      	strne	r1, [r3, #4]
9000c3f0:	6863      	ldr	r3, [r4, #4]
9000c3f2:	bf08      	it	eq
9000c3f4:	f8c8 1000 	streq.w	r1, [r8]
9000c3f8:	5162      	str	r2, [r4, r5]
9000c3fa:	604b      	str	r3, [r1, #4]
9000c3fc:	4630      	mov	r0, r6
9000c3fe:	f000 f82f 	bl	9000c460 <__malloc_unlock>
9000c402:	f104 000b 	add.w	r0, r4, #11
9000c406:	1d23      	adds	r3, r4, #4
9000c408:	f020 0007 	bic.w	r0, r0, #7
9000c40c:	1ac2      	subs	r2, r0, r3
9000c40e:	bf1c      	itt	ne
9000c410:	1a1b      	subne	r3, r3, r0
9000c412:	50a3      	strne	r3, [r4, r2]
9000c414:	e7af      	b.n	9000c376 <_malloc_r+0x22>
9000c416:	6862      	ldr	r2, [r4, #4]
9000c418:	42a3      	cmp	r3, r4
9000c41a:	bf0c      	ite	eq
9000c41c:	f8c8 2000 	streq.w	r2, [r8]
9000c420:	605a      	strne	r2, [r3, #4]
9000c422:	e7eb      	b.n	9000c3fc <_malloc_r+0xa8>
9000c424:	4623      	mov	r3, r4
9000c426:	6864      	ldr	r4, [r4, #4]
9000c428:	e7ae      	b.n	9000c388 <_malloc_r+0x34>
9000c42a:	463c      	mov	r4, r7
9000c42c:	687f      	ldr	r7, [r7, #4]
9000c42e:	e7b6      	b.n	9000c39e <_malloc_r+0x4a>
9000c430:	461a      	mov	r2, r3
9000c432:	685b      	ldr	r3, [r3, #4]
9000c434:	42a3      	cmp	r3, r4
9000c436:	d1fb      	bne.n	9000c430 <_malloc_r+0xdc>
9000c438:	2300      	movs	r3, #0
9000c43a:	6053      	str	r3, [r2, #4]
9000c43c:	e7de      	b.n	9000c3fc <_malloc_r+0xa8>
9000c43e:	230c      	movs	r3, #12
9000c440:	6033      	str	r3, [r6, #0]
9000c442:	4630      	mov	r0, r6
9000c444:	f000 f80c 	bl	9000c460 <__malloc_unlock>
9000c448:	e794      	b.n	9000c374 <_malloc_r+0x20>
9000c44a:	6005      	str	r5, [r0, #0]
9000c44c:	e7d6      	b.n	9000c3fc <_malloc_r+0xa8>
9000c44e:	bf00      	nop
9000c450:	20001358 	.word	0x20001358

9000c454 <__malloc_lock>:
9000c454:	4801      	ldr	r0, [pc, #4]	@ (9000c45c <__malloc_lock+0x8>)
9000c456:	f000 babe 	b.w	9000c9d6 <__retarget_lock_acquire_recursive>
9000c45a:	bf00      	nop
9000c45c:	2000149c 	.word	0x2000149c

9000c460 <__malloc_unlock>:
9000c460:	4801      	ldr	r0, [pc, #4]	@ (9000c468 <__malloc_unlock+0x8>)
9000c462:	f000 bab9 	b.w	9000c9d8 <__retarget_lock_release_recursive>
9000c466:	bf00      	nop
9000c468:	2000149c 	.word	0x2000149c

9000c46c <std>:
9000c46c:	2300      	movs	r3, #0
9000c46e:	b510      	push	{r4, lr}
9000c470:	4604      	mov	r4, r0
9000c472:	e9c0 3300 	strd	r3, r3, [r0]
9000c476:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000c47a:	6083      	str	r3, [r0, #8]
9000c47c:	8181      	strh	r1, [r0, #12]
9000c47e:	6643      	str	r3, [r0, #100]	@ 0x64
9000c480:	81c2      	strh	r2, [r0, #14]
9000c482:	6183      	str	r3, [r0, #24]
9000c484:	4619      	mov	r1, r3
9000c486:	2208      	movs	r2, #8
9000c488:	305c      	adds	r0, #92	@ 0x5c
9000c48a:	f000 fa1b 	bl	9000c8c4 <memset>
9000c48e:	4b0d      	ldr	r3, [pc, #52]	@ (9000c4c4 <std+0x58>)
9000c490:	6263      	str	r3, [r4, #36]	@ 0x24
9000c492:	4b0d      	ldr	r3, [pc, #52]	@ (9000c4c8 <std+0x5c>)
9000c494:	62a3      	str	r3, [r4, #40]	@ 0x28
9000c496:	4b0d      	ldr	r3, [pc, #52]	@ (9000c4cc <std+0x60>)
9000c498:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000c49a:	4b0d      	ldr	r3, [pc, #52]	@ (9000c4d0 <std+0x64>)
9000c49c:	6323      	str	r3, [r4, #48]	@ 0x30
9000c49e:	4b0d      	ldr	r3, [pc, #52]	@ (9000c4d4 <std+0x68>)
9000c4a0:	6224      	str	r4, [r4, #32]
9000c4a2:	429c      	cmp	r4, r3
9000c4a4:	d006      	beq.n	9000c4b4 <std+0x48>
9000c4a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000c4aa:	4294      	cmp	r4, r2
9000c4ac:	d002      	beq.n	9000c4b4 <std+0x48>
9000c4ae:	33d0      	adds	r3, #208	@ 0xd0
9000c4b0:	429c      	cmp	r4, r3
9000c4b2:	d105      	bne.n	9000c4c0 <std+0x54>
9000c4b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000c4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c4bc:	f000 ba8a 	b.w	9000c9d4 <__retarget_lock_init_recursive>
9000c4c0:	bd10      	pop	{r4, pc}
9000c4c2:	bf00      	nop
9000c4c4:	9000c715 	.word	0x9000c715
9000c4c8:	9000c737 	.word	0x9000c737
9000c4cc:	9000c76f 	.word	0x9000c76f
9000c4d0:	9000c793 	.word	0x9000c793
9000c4d4:	2000135c 	.word	0x2000135c

9000c4d8 <stdio_exit_handler>:
9000c4d8:	4a02      	ldr	r2, [pc, #8]	@ (9000c4e4 <stdio_exit_handler+0xc>)
9000c4da:	4903      	ldr	r1, [pc, #12]	@ (9000c4e8 <stdio_exit_handler+0x10>)
9000c4dc:	4803      	ldr	r0, [pc, #12]	@ (9000c4ec <stdio_exit_handler+0x14>)
9000c4de:	f000 b869 	b.w	9000c5b4 <_fwalk_sglue>
9000c4e2:	bf00      	nop
9000c4e4:	20000070 	.word	0x20000070
9000c4e8:	9000d3e1 	.word	0x9000d3e1
9000c4ec:	20000080 	.word	0x20000080

9000c4f0 <cleanup_stdio>:
9000c4f0:	6841      	ldr	r1, [r0, #4]
9000c4f2:	4b0c      	ldr	r3, [pc, #48]	@ (9000c524 <cleanup_stdio+0x34>)
9000c4f4:	4299      	cmp	r1, r3
9000c4f6:	b510      	push	{r4, lr}
9000c4f8:	4604      	mov	r4, r0
9000c4fa:	d001      	beq.n	9000c500 <cleanup_stdio+0x10>
9000c4fc:	f000 ff70 	bl	9000d3e0 <_fflush_r>
9000c500:	68a1      	ldr	r1, [r4, #8]
9000c502:	4b09      	ldr	r3, [pc, #36]	@ (9000c528 <cleanup_stdio+0x38>)
9000c504:	4299      	cmp	r1, r3
9000c506:	d002      	beq.n	9000c50e <cleanup_stdio+0x1e>
9000c508:	4620      	mov	r0, r4
9000c50a:	f000 ff69 	bl	9000d3e0 <_fflush_r>
9000c50e:	68e1      	ldr	r1, [r4, #12]
9000c510:	4b06      	ldr	r3, [pc, #24]	@ (9000c52c <cleanup_stdio+0x3c>)
9000c512:	4299      	cmp	r1, r3
9000c514:	d004      	beq.n	9000c520 <cleanup_stdio+0x30>
9000c516:	4620      	mov	r0, r4
9000c518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c51c:	f000 bf60 	b.w	9000d3e0 <_fflush_r>
9000c520:	bd10      	pop	{r4, pc}
9000c522:	bf00      	nop
9000c524:	2000135c 	.word	0x2000135c
9000c528:	200013c4 	.word	0x200013c4
9000c52c:	2000142c 	.word	0x2000142c

9000c530 <global_stdio_init.part.0>:
9000c530:	b510      	push	{r4, lr}
9000c532:	4b0b      	ldr	r3, [pc, #44]	@ (9000c560 <global_stdio_init.part.0+0x30>)
9000c534:	4c0b      	ldr	r4, [pc, #44]	@ (9000c564 <global_stdio_init.part.0+0x34>)
9000c536:	4a0c      	ldr	r2, [pc, #48]	@ (9000c568 <global_stdio_init.part.0+0x38>)
9000c538:	601a      	str	r2, [r3, #0]
9000c53a:	4620      	mov	r0, r4
9000c53c:	2200      	movs	r2, #0
9000c53e:	2104      	movs	r1, #4
9000c540:	f7ff ff94 	bl	9000c46c <std>
9000c544:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000c548:	2201      	movs	r2, #1
9000c54a:	2109      	movs	r1, #9
9000c54c:	f7ff ff8e 	bl	9000c46c <std>
9000c550:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000c554:	2202      	movs	r2, #2
9000c556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c55a:	2112      	movs	r1, #18
9000c55c:	f7ff bf86 	b.w	9000c46c <std>
9000c560:	20001494 	.word	0x20001494
9000c564:	2000135c 	.word	0x2000135c
9000c568:	9000c4d9 	.word	0x9000c4d9

9000c56c <__sfp_lock_acquire>:
9000c56c:	4801      	ldr	r0, [pc, #4]	@ (9000c574 <__sfp_lock_acquire+0x8>)
9000c56e:	f000 ba32 	b.w	9000c9d6 <__retarget_lock_acquire_recursive>
9000c572:	bf00      	nop
9000c574:	2000149d 	.word	0x2000149d

9000c578 <__sfp_lock_release>:
9000c578:	4801      	ldr	r0, [pc, #4]	@ (9000c580 <__sfp_lock_release+0x8>)
9000c57a:	f000 ba2d 	b.w	9000c9d8 <__retarget_lock_release_recursive>
9000c57e:	bf00      	nop
9000c580:	2000149d 	.word	0x2000149d

9000c584 <__sinit>:
9000c584:	b510      	push	{r4, lr}
9000c586:	4604      	mov	r4, r0
9000c588:	f7ff fff0 	bl	9000c56c <__sfp_lock_acquire>
9000c58c:	6a23      	ldr	r3, [r4, #32]
9000c58e:	b11b      	cbz	r3, 9000c598 <__sinit+0x14>
9000c590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c594:	f7ff bff0 	b.w	9000c578 <__sfp_lock_release>
9000c598:	4b04      	ldr	r3, [pc, #16]	@ (9000c5ac <__sinit+0x28>)
9000c59a:	6223      	str	r3, [r4, #32]
9000c59c:	4b04      	ldr	r3, [pc, #16]	@ (9000c5b0 <__sinit+0x2c>)
9000c59e:	681b      	ldr	r3, [r3, #0]
9000c5a0:	2b00      	cmp	r3, #0
9000c5a2:	d1f5      	bne.n	9000c590 <__sinit+0xc>
9000c5a4:	f7ff ffc4 	bl	9000c530 <global_stdio_init.part.0>
9000c5a8:	e7f2      	b.n	9000c590 <__sinit+0xc>
9000c5aa:	bf00      	nop
9000c5ac:	9000c4f1 	.word	0x9000c4f1
9000c5b0:	20001494 	.word	0x20001494

9000c5b4 <_fwalk_sglue>:
9000c5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c5b8:	4607      	mov	r7, r0
9000c5ba:	4688      	mov	r8, r1
9000c5bc:	4614      	mov	r4, r2
9000c5be:	2600      	movs	r6, #0
9000c5c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c5c4:	f1b9 0901 	subs.w	r9, r9, #1
9000c5c8:	d505      	bpl.n	9000c5d6 <_fwalk_sglue+0x22>
9000c5ca:	6824      	ldr	r4, [r4, #0]
9000c5cc:	2c00      	cmp	r4, #0
9000c5ce:	d1f7      	bne.n	9000c5c0 <_fwalk_sglue+0xc>
9000c5d0:	4630      	mov	r0, r6
9000c5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c5d6:	89ab      	ldrh	r3, [r5, #12]
9000c5d8:	2b01      	cmp	r3, #1
9000c5da:	d907      	bls.n	9000c5ec <_fwalk_sglue+0x38>
9000c5dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c5e0:	3301      	adds	r3, #1
9000c5e2:	d003      	beq.n	9000c5ec <_fwalk_sglue+0x38>
9000c5e4:	4629      	mov	r1, r5
9000c5e6:	4638      	mov	r0, r7
9000c5e8:	47c0      	blx	r8
9000c5ea:	4306      	orrs	r6, r0
9000c5ec:	3568      	adds	r5, #104	@ 0x68
9000c5ee:	e7e9      	b.n	9000c5c4 <_fwalk_sglue+0x10>

9000c5f0 <iprintf>:
9000c5f0:	b40f      	push	{r0, r1, r2, r3}
9000c5f2:	b507      	push	{r0, r1, r2, lr}
9000c5f4:	4906      	ldr	r1, [pc, #24]	@ (9000c610 <iprintf+0x20>)
9000c5f6:	ab04      	add	r3, sp, #16
9000c5f8:	6808      	ldr	r0, [r1, #0]
9000c5fa:	f853 2b04 	ldr.w	r2, [r3], #4
9000c5fe:	6881      	ldr	r1, [r0, #8]
9000c600:	9301      	str	r3, [sp, #4]
9000c602:	f000 fbc5 	bl	9000cd90 <_vfiprintf_r>
9000c606:	b003      	add	sp, #12
9000c608:	f85d eb04 	ldr.w	lr, [sp], #4
9000c60c:	b004      	add	sp, #16
9000c60e:	4770      	bx	lr
9000c610:	2000007c 	.word	0x2000007c

9000c614 <_puts_r>:
9000c614:	6a03      	ldr	r3, [r0, #32]
9000c616:	b570      	push	{r4, r5, r6, lr}
9000c618:	6884      	ldr	r4, [r0, #8]
9000c61a:	4605      	mov	r5, r0
9000c61c:	460e      	mov	r6, r1
9000c61e:	b90b      	cbnz	r3, 9000c624 <_puts_r+0x10>
9000c620:	f7ff ffb0 	bl	9000c584 <__sinit>
9000c624:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c626:	07db      	lsls	r3, r3, #31
9000c628:	d405      	bmi.n	9000c636 <_puts_r+0x22>
9000c62a:	89a3      	ldrh	r3, [r4, #12]
9000c62c:	0598      	lsls	r0, r3, #22
9000c62e:	d402      	bmi.n	9000c636 <_puts_r+0x22>
9000c630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c632:	f000 f9d0 	bl	9000c9d6 <__retarget_lock_acquire_recursive>
9000c636:	89a3      	ldrh	r3, [r4, #12]
9000c638:	0719      	lsls	r1, r3, #28
9000c63a:	d502      	bpl.n	9000c642 <_puts_r+0x2e>
9000c63c:	6923      	ldr	r3, [r4, #16]
9000c63e:	2b00      	cmp	r3, #0
9000c640:	d135      	bne.n	9000c6ae <_puts_r+0x9a>
9000c642:	4621      	mov	r1, r4
9000c644:	4628      	mov	r0, r5
9000c646:	f000 f8e7 	bl	9000c818 <__swsetup_r>
9000c64a:	b380      	cbz	r0, 9000c6ae <_puts_r+0x9a>
9000c64c:	f04f 35ff 	mov.w	r5, #4294967295
9000c650:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c652:	07da      	lsls	r2, r3, #31
9000c654:	d405      	bmi.n	9000c662 <_puts_r+0x4e>
9000c656:	89a3      	ldrh	r3, [r4, #12]
9000c658:	059b      	lsls	r3, r3, #22
9000c65a:	d402      	bmi.n	9000c662 <_puts_r+0x4e>
9000c65c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c65e:	f000 f9bb 	bl	9000c9d8 <__retarget_lock_release_recursive>
9000c662:	4628      	mov	r0, r5
9000c664:	bd70      	pop	{r4, r5, r6, pc}
9000c666:	2b00      	cmp	r3, #0
9000c668:	da04      	bge.n	9000c674 <_puts_r+0x60>
9000c66a:	69a2      	ldr	r2, [r4, #24]
9000c66c:	429a      	cmp	r2, r3
9000c66e:	dc17      	bgt.n	9000c6a0 <_puts_r+0x8c>
9000c670:	290a      	cmp	r1, #10
9000c672:	d015      	beq.n	9000c6a0 <_puts_r+0x8c>
9000c674:	6823      	ldr	r3, [r4, #0]
9000c676:	1c5a      	adds	r2, r3, #1
9000c678:	6022      	str	r2, [r4, #0]
9000c67a:	7019      	strb	r1, [r3, #0]
9000c67c:	68a3      	ldr	r3, [r4, #8]
9000c67e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c682:	3b01      	subs	r3, #1
9000c684:	60a3      	str	r3, [r4, #8]
9000c686:	2900      	cmp	r1, #0
9000c688:	d1ed      	bne.n	9000c666 <_puts_r+0x52>
9000c68a:	2b00      	cmp	r3, #0
9000c68c:	da11      	bge.n	9000c6b2 <_puts_r+0x9e>
9000c68e:	4622      	mov	r2, r4
9000c690:	210a      	movs	r1, #10
9000c692:	4628      	mov	r0, r5
9000c694:	f000 f881 	bl	9000c79a <__swbuf_r>
9000c698:	3001      	adds	r0, #1
9000c69a:	d0d7      	beq.n	9000c64c <_puts_r+0x38>
9000c69c:	250a      	movs	r5, #10
9000c69e:	e7d7      	b.n	9000c650 <_puts_r+0x3c>
9000c6a0:	4622      	mov	r2, r4
9000c6a2:	4628      	mov	r0, r5
9000c6a4:	f000 f879 	bl	9000c79a <__swbuf_r>
9000c6a8:	3001      	adds	r0, #1
9000c6aa:	d1e7      	bne.n	9000c67c <_puts_r+0x68>
9000c6ac:	e7ce      	b.n	9000c64c <_puts_r+0x38>
9000c6ae:	3e01      	subs	r6, #1
9000c6b0:	e7e4      	b.n	9000c67c <_puts_r+0x68>
9000c6b2:	6823      	ldr	r3, [r4, #0]
9000c6b4:	1c5a      	adds	r2, r3, #1
9000c6b6:	6022      	str	r2, [r4, #0]
9000c6b8:	220a      	movs	r2, #10
9000c6ba:	701a      	strb	r2, [r3, #0]
9000c6bc:	e7ee      	b.n	9000c69c <_puts_r+0x88>
	...

9000c6c0 <puts>:
9000c6c0:	4b02      	ldr	r3, [pc, #8]	@ (9000c6cc <puts+0xc>)
9000c6c2:	4601      	mov	r1, r0
9000c6c4:	6818      	ldr	r0, [r3, #0]
9000c6c6:	f7ff bfa5 	b.w	9000c614 <_puts_r>
9000c6ca:	bf00      	nop
9000c6cc:	2000007c 	.word	0x2000007c

9000c6d0 <siprintf>:
9000c6d0:	b40e      	push	{r1, r2, r3}
9000c6d2:	b510      	push	{r4, lr}
9000c6d4:	b09d      	sub	sp, #116	@ 0x74
9000c6d6:	ab1f      	add	r3, sp, #124	@ 0x7c
9000c6d8:	9002      	str	r0, [sp, #8]
9000c6da:	9006      	str	r0, [sp, #24]
9000c6dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000c6e0:	480a      	ldr	r0, [pc, #40]	@ (9000c70c <siprintf+0x3c>)
9000c6e2:	9107      	str	r1, [sp, #28]
9000c6e4:	9104      	str	r1, [sp, #16]
9000c6e6:	490a      	ldr	r1, [pc, #40]	@ (9000c710 <siprintf+0x40>)
9000c6e8:	f853 2b04 	ldr.w	r2, [r3], #4
9000c6ec:	9105      	str	r1, [sp, #20]
9000c6ee:	2400      	movs	r4, #0
9000c6f0:	a902      	add	r1, sp, #8
9000c6f2:	6800      	ldr	r0, [r0, #0]
9000c6f4:	9301      	str	r3, [sp, #4]
9000c6f6:	941b      	str	r4, [sp, #108]	@ 0x6c
9000c6f8:	f000 fa24 	bl	9000cb44 <_svfiprintf_r>
9000c6fc:	9b02      	ldr	r3, [sp, #8]
9000c6fe:	701c      	strb	r4, [r3, #0]
9000c700:	b01d      	add	sp, #116	@ 0x74
9000c702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c706:	b003      	add	sp, #12
9000c708:	4770      	bx	lr
9000c70a:	bf00      	nop
9000c70c:	2000007c 	.word	0x2000007c
9000c710:	ffff0208 	.word	0xffff0208

9000c714 <__sread>:
9000c714:	b510      	push	{r4, lr}
9000c716:	460c      	mov	r4, r1
9000c718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c71c:	f000 f8fc 	bl	9000c918 <_read_r>
9000c720:	2800      	cmp	r0, #0
9000c722:	bfab      	itete	ge
9000c724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c726:	89a3      	ldrhlt	r3, [r4, #12]
9000c728:	181b      	addge	r3, r3, r0
9000c72a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c72e:	bfac      	ite	ge
9000c730:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c732:	81a3      	strhlt	r3, [r4, #12]
9000c734:	bd10      	pop	{r4, pc}

9000c736 <__swrite>:
9000c736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c73a:	461f      	mov	r7, r3
9000c73c:	898b      	ldrh	r3, [r1, #12]
9000c73e:	05db      	lsls	r3, r3, #23
9000c740:	4605      	mov	r5, r0
9000c742:	460c      	mov	r4, r1
9000c744:	4616      	mov	r6, r2
9000c746:	d505      	bpl.n	9000c754 <__swrite+0x1e>
9000c748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c74c:	2302      	movs	r3, #2
9000c74e:	2200      	movs	r2, #0
9000c750:	f000 f8d0 	bl	9000c8f4 <_lseek_r>
9000c754:	89a3      	ldrh	r3, [r4, #12]
9000c756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c75a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c75e:	81a3      	strh	r3, [r4, #12]
9000c760:	4632      	mov	r2, r6
9000c762:	463b      	mov	r3, r7
9000c764:	4628      	mov	r0, r5
9000c766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c76a:	f000 b8f7 	b.w	9000c95c <_write_r>

9000c76e <__sseek>:
9000c76e:	b510      	push	{r4, lr}
9000c770:	460c      	mov	r4, r1
9000c772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c776:	f000 f8bd 	bl	9000c8f4 <_lseek_r>
9000c77a:	1c43      	adds	r3, r0, #1
9000c77c:	89a3      	ldrh	r3, [r4, #12]
9000c77e:	bf15      	itete	ne
9000c780:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c78a:	81a3      	strheq	r3, [r4, #12]
9000c78c:	bf18      	it	ne
9000c78e:	81a3      	strhne	r3, [r4, #12]
9000c790:	bd10      	pop	{r4, pc}

9000c792 <__sclose>:
9000c792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c796:	f000 b89d 	b.w	9000c8d4 <_close_r>

9000c79a <__swbuf_r>:
9000c79a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c79c:	460e      	mov	r6, r1
9000c79e:	4614      	mov	r4, r2
9000c7a0:	4605      	mov	r5, r0
9000c7a2:	b118      	cbz	r0, 9000c7ac <__swbuf_r+0x12>
9000c7a4:	6a03      	ldr	r3, [r0, #32]
9000c7a6:	b90b      	cbnz	r3, 9000c7ac <__swbuf_r+0x12>
9000c7a8:	f7ff feec 	bl	9000c584 <__sinit>
9000c7ac:	69a3      	ldr	r3, [r4, #24]
9000c7ae:	60a3      	str	r3, [r4, #8]
9000c7b0:	89a3      	ldrh	r3, [r4, #12]
9000c7b2:	071a      	lsls	r2, r3, #28
9000c7b4:	d501      	bpl.n	9000c7ba <__swbuf_r+0x20>
9000c7b6:	6923      	ldr	r3, [r4, #16]
9000c7b8:	b943      	cbnz	r3, 9000c7cc <__swbuf_r+0x32>
9000c7ba:	4621      	mov	r1, r4
9000c7bc:	4628      	mov	r0, r5
9000c7be:	f000 f82b 	bl	9000c818 <__swsetup_r>
9000c7c2:	b118      	cbz	r0, 9000c7cc <__swbuf_r+0x32>
9000c7c4:	f04f 37ff 	mov.w	r7, #4294967295
9000c7c8:	4638      	mov	r0, r7
9000c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c7cc:	6823      	ldr	r3, [r4, #0]
9000c7ce:	6922      	ldr	r2, [r4, #16]
9000c7d0:	1a98      	subs	r0, r3, r2
9000c7d2:	6963      	ldr	r3, [r4, #20]
9000c7d4:	b2f6      	uxtb	r6, r6
9000c7d6:	4283      	cmp	r3, r0
9000c7d8:	4637      	mov	r7, r6
9000c7da:	dc05      	bgt.n	9000c7e8 <__swbuf_r+0x4e>
9000c7dc:	4621      	mov	r1, r4
9000c7de:	4628      	mov	r0, r5
9000c7e0:	f000 fdfe 	bl	9000d3e0 <_fflush_r>
9000c7e4:	2800      	cmp	r0, #0
9000c7e6:	d1ed      	bne.n	9000c7c4 <__swbuf_r+0x2a>
9000c7e8:	68a3      	ldr	r3, [r4, #8]
9000c7ea:	3b01      	subs	r3, #1
9000c7ec:	60a3      	str	r3, [r4, #8]
9000c7ee:	6823      	ldr	r3, [r4, #0]
9000c7f0:	1c5a      	adds	r2, r3, #1
9000c7f2:	6022      	str	r2, [r4, #0]
9000c7f4:	701e      	strb	r6, [r3, #0]
9000c7f6:	6962      	ldr	r2, [r4, #20]
9000c7f8:	1c43      	adds	r3, r0, #1
9000c7fa:	429a      	cmp	r2, r3
9000c7fc:	d004      	beq.n	9000c808 <__swbuf_r+0x6e>
9000c7fe:	89a3      	ldrh	r3, [r4, #12]
9000c800:	07db      	lsls	r3, r3, #31
9000c802:	d5e1      	bpl.n	9000c7c8 <__swbuf_r+0x2e>
9000c804:	2e0a      	cmp	r6, #10
9000c806:	d1df      	bne.n	9000c7c8 <__swbuf_r+0x2e>
9000c808:	4621      	mov	r1, r4
9000c80a:	4628      	mov	r0, r5
9000c80c:	f000 fde8 	bl	9000d3e0 <_fflush_r>
9000c810:	2800      	cmp	r0, #0
9000c812:	d0d9      	beq.n	9000c7c8 <__swbuf_r+0x2e>
9000c814:	e7d6      	b.n	9000c7c4 <__swbuf_r+0x2a>
	...

9000c818 <__swsetup_r>:
9000c818:	b538      	push	{r3, r4, r5, lr}
9000c81a:	4b29      	ldr	r3, [pc, #164]	@ (9000c8c0 <__swsetup_r+0xa8>)
9000c81c:	4605      	mov	r5, r0
9000c81e:	6818      	ldr	r0, [r3, #0]
9000c820:	460c      	mov	r4, r1
9000c822:	b118      	cbz	r0, 9000c82c <__swsetup_r+0x14>
9000c824:	6a03      	ldr	r3, [r0, #32]
9000c826:	b90b      	cbnz	r3, 9000c82c <__swsetup_r+0x14>
9000c828:	f7ff feac 	bl	9000c584 <__sinit>
9000c82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c830:	0719      	lsls	r1, r3, #28
9000c832:	d422      	bmi.n	9000c87a <__swsetup_r+0x62>
9000c834:	06da      	lsls	r2, r3, #27
9000c836:	d407      	bmi.n	9000c848 <__swsetup_r+0x30>
9000c838:	2209      	movs	r2, #9
9000c83a:	602a      	str	r2, [r5, #0]
9000c83c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c840:	81a3      	strh	r3, [r4, #12]
9000c842:	f04f 30ff 	mov.w	r0, #4294967295
9000c846:	e033      	b.n	9000c8b0 <__swsetup_r+0x98>
9000c848:	0758      	lsls	r0, r3, #29
9000c84a:	d512      	bpl.n	9000c872 <__swsetup_r+0x5a>
9000c84c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c84e:	b141      	cbz	r1, 9000c862 <__swsetup_r+0x4a>
9000c850:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c854:	4299      	cmp	r1, r3
9000c856:	d002      	beq.n	9000c85e <__swsetup_r+0x46>
9000c858:	4628      	mov	r0, r5
9000c85a:	f000 f8cd 	bl	9000c9f8 <_free_r>
9000c85e:	2300      	movs	r3, #0
9000c860:	6363      	str	r3, [r4, #52]	@ 0x34
9000c862:	89a3      	ldrh	r3, [r4, #12]
9000c864:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c868:	81a3      	strh	r3, [r4, #12]
9000c86a:	2300      	movs	r3, #0
9000c86c:	6063      	str	r3, [r4, #4]
9000c86e:	6923      	ldr	r3, [r4, #16]
9000c870:	6023      	str	r3, [r4, #0]
9000c872:	89a3      	ldrh	r3, [r4, #12]
9000c874:	f043 0308 	orr.w	r3, r3, #8
9000c878:	81a3      	strh	r3, [r4, #12]
9000c87a:	6923      	ldr	r3, [r4, #16]
9000c87c:	b94b      	cbnz	r3, 9000c892 <__swsetup_r+0x7a>
9000c87e:	89a3      	ldrh	r3, [r4, #12]
9000c880:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c888:	d003      	beq.n	9000c892 <__swsetup_r+0x7a>
9000c88a:	4621      	mov	r1, r4
9000c88c:	4628      	mov	r0, r5
9000c88e:	f000 fdf5 	bl	9000d47c <__smakebuf_r>
9000c892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c896:	f013 0201 	ands.w	r2, r3, #1
9000c89a:	d00a      	beq.n	9000c8b2 <__swsetup_r+0x9a>
9000c89c:	2200      	movs	r2, #0
9000c89e:	60a2      	str	r2, [r4, #8]
9000c8a0:	6962      	ldr	r2, [r4, #20]
9000c8a2:	4252      	negs	r2, r2
9000c8a4:	61a2      	str	r2, [r4, #24]
9000c8a6:	6922      	ldr	r2, [r4, #16]
9000c8a8:	b942      	cbnz	r2, 9000c8bc <__swsetup_r+0xa4>
9000c8aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c8ae:	d1c5      	bne.n	9000c83c <__swsetup_r+0x24>
9000c8b0:	bd38      	pop	{r3, r4, r5, pc}
9000c8b2:	0799      	lsls	r1, r3, #30
9000c8b4:	bf58      	it	pl
9000c8b6:	6962      	ldrpl	r2, [r4, #20]
9000c8b8:	60a2      	str	r2, [r4, #8]
9000c8ba:	e7f4      	b.n	9000c8a6 <__swsetup_r+0x8e>
9000c8bc:	2000      	movs	r0, #0
9000c8be:	e7f7      	b.n	9000c8b0 <__swsetup_r+0x98>
9000c8c0:	2000007c 	.word	0x2000007c

9000c8c4 <memset>:
9000c8c4:	4402      	add	r2, r0
9000c8c6:	4603      	mov	r3, r0
9000c8c8:	4293      	cmp	r3, r2
9000c8ca:	d100      	bne.n	9000c8ce <memset+0xa>
9000c8cc:	4770      	bx	lr
9000c8ce:	f803 1b01 	strb.w	r1, [r3], #1
9000c8d2:	e7f9      	b.n	9000c8c8 <memset+0x4>

9000c8d4 <_close_r>:
9000c8d4:	b538      	push	{r3, r4, r5, lr}
9000c8d6:	4d06      	ldr	r5, [pc, #24]	@ (9000c8f0 <_close_r+0x1c>)
9000c8d8:	2300      	movs	r3, #0
9000c8da:	4604      	mov	r4, r0
9000c8dc:	4608      	mov	r0, r1
9000c8de:	602b      	str	r3, [r5, #0]
9000c8e0:	f7f4 fbe9 	bl	900010b6 <_close>
9000c8e4:	1c43      	adds	r3, r0, #1
9000c8e6:	d102      	bne.n	9000c8ee <_close_r+0x1a>
9000c8e8:	682b      	ldr	r3, [r5, #0]
9000c8ea:	b103      	cbz	r3, 9000c8ee <_close_r+0x1a>
9000c8ec:	6023      	str	r3, [r4, #0]
9000c8ee:	bd38      	pop	{r3, r4, r5, pc}
9000c8f0:	20001498 	.word	0x20001498

9000c8f4 <_lseek_r>:
9000c8f4:	b538      	push	{r3, r4, r5, lr}
9000c8f6:	4d07      	ldr	r5, [pc, #28]	@ (9000c914 <_lseek_r+0x20>)
9000c8f8:	4604      	mov	r4, r0
9000c8fa:	4608      	mov	r0, r1
9000c8fc:	4611      	mov	r1, r2
9000c8fe:	2200      	movs	r2, #0
9000c900:	602a      	str	r2, [r5, #0]
9000c902:	461a      	mov	r2, r3
9000c904:	f7f4 fbfe 	bl	90001104 <_lseek>
9000c908:	1c43      	adds	r3, r0, #1
9000c90a:	d102      	bne.n	9000c912 <_lseek_r+0x1e>
9000c90c:	682b      	ldr	r3, [r5, #0]
9000c90e:	b103      	cbz	r3, 9000c912 <_lseek_r+0x1e>
9000c910:	6023      	str	r3, [r4, #0]
9000c912:	bd38      	pop	{r3, r4, r5, pc}
9000c914:	20001498 	.word	0x20001498

9000c918 <_read_r>:
9000c918:	b538      	push	{r3, r4, r5, lr}
9000c91a:	4d07      	ldr	r5, [pc, #28]	@ (9000c938 <_read_r+0x20>)
9000c91c:	4604      	mov	r4, r0
9000c91e:	4608      	mov	r0, r1
9000c920:	4611      	mov	r1, r2
9000c922:	2200      	movs	r2, #0
9000c924:	602a      	str	r2, [r5, #0]
9000c926:	461a      	mov	r2, r3
9000c928:	f7f4 fb8c 	bl	90001044 <_read>
9000c92c:	1c43      	adds	r3, r0, #1
9000c92e:	d102      	bne.n	9000c936 <_read_r+0x1e>
9000c930:	682b      	ldr	r3, [r5, #0]
9000c932:	b103      	cbz	r3, 9000c936 <_read_r+0x1e>
9000c934:	6023      	str	r3, [r4, #0]
9000c936:	bd38      	pop	{r3, r4, r5, pc}
9000c938:	20001498 	.word	0x20001498

9000c93c <_sbrk_r>:
9000c93c:	b538      	push	{r3, r4, r5, lr}
9000c93e:	4d06      	ldr	r5, [pc, #24]	@ (9000c958 <_sbrk_r+0x1c>)
9000c940:	2300      	movs	r3, #0
9000c942:	4604      	mov	r4, r0
9000c944:	4608      	mov	r0, r1
9000c946:	602b      	str	r3, [r5, #0]
9000c948:	f7f4 fbea 	bl	90001120 <_sbrk>
9000c94c:	1c43      	adds	r3, r0, #1
9000c94e:	d102      	bne.n	9000c956 <_sbrk_r+0x1a>
9000c950:	682b      	ldr	r3, [r5, #0]
9000c952:	b103      	cbz	r3, 9000c956 <_sbrk_r+0x1a>
9000c954:	6023      	str	r3, [r4, #0]
9000c956:	bd38      	pop	{r3, r4, r5, pc}
9000c958:	20001498 	.word	0x20001498

9000c95c <_write_r>:
9000c95c:	b538      	push	{r3, r4, r5, lr}
9000c95e:	4d07      	ldr	r5, [pc, #28]	@ (9000c97c <_write_r+0x20>)
9000c960:	4604      	mov	r4, r0
9000c962:	4608      	mov	r0, r1
9000c964:	4611      	mov	r1, r2
9000c966:	2200      	movs	r2, #0
9000c968:	602a      	str	r2, [r5, #0]
9000c96a:	461a      	mov	r2, r3
9000c96c:	f7f4 fb87 	bl	9000107e <_write>
9000c970:	1c43      	adds	r3, r0, #1
9000c972:	d102      	bne.n	9000c97a <_write_r+0x1e>
9000c974:	682b      	ldr	r3, [r5, #0]
9000c976:	b103      	cbz	r3, 9000c97a <_write_r+0x1e>
9000c978:	6023      	str	r3, [r4, #0]
9000c97a:	bd38      	pop	{r3, r4, r5, pc}
9000c97c:	20001498 	.word	0x20001498

9000c980 <__errno>:
9000c980:	4b01      	ldr	r3, [pc, #4]	@ (9000c988 <__errno+0x8>)
9000c982:	6818      	ldr	r0, [r3, #0]
9000c984:	4770      	bx	lr
9000c986:	bf00      	nop
9000c988:	2000007c 	.word	0x2000007c

9000c98c <__libc_init_array>:
9000c98c:	b570      	push	{r4, r5, r6, lr}
9000c98e:	4d0d      	ldr	r5, [pc, #52]	@ (9000c9c4 <__libc_init_array+0x38>)
9000c990:	4c0d      	ldr	r4, [pc, #52]	@ (9000c9c8 <__libc_init_array+0x3c>)
9000c992:	1b64      	subs	r4, r4, r5
9000c994:	10a4      	asrs	r4, r4, #2
9000c996:	2600      	movs	r6, #0
9000c998:	42a6      	cmp	r6, r4
9000c99a:	d109      	bne.n	9000c9b0 <__libc_init_array+0x24>
9000c99c:	4d0b      	ldr	r5, [pc, #44]	@ (9000c9cc <__libc_init_array+0x40>)
9000c99e:	4c0c      	ldr	r4, [pc, #48]	@ (9000c9d0 <__libc_init_array+0x44>)
9000c9a0:	f000 fe1a 	bl	9000d5d8 <_init>
9000c9a4:	1b64      	subs	r4, r4, r5
9000c9a6:	10a4      	asrs	r4, r4, #2
9000c9a8:	2600      	movs	r6, #0
9000c9aa:	42a6      	cmp	r6, r4
9000c9ac:	d105      	bne.n	9000c9ba <__libc_init_array+0x2e>
9000c9ae:	bd70      	pop	{r4, r5, r6, pc}
9000c9b0:	f855 3b04 	ldr.w	r3, [r5], #4
9000c9b4:	4798      	blx	r3
9000c9b6:	3601      	adds	r6, #1
9000c9b8:	e7ee      	b.n	9000c998 <__libc_init_array+0xc>
9000c9ba:	f855 3b04 	ldr.w	r3, [r5], #4
9000c9be:	4798      	blx	r3
9000c9c0:	3601      	adds	r6, #1
9000c9c2:	e7f2      	b.n	9000c9aa <__libc_init_array+0x1e>
9000c9c4:	9000fcb4 	.word	0x9000fcb4
9000c9c8:	9000fcb4 	.word	0x9000fcb4
9000c9cc:	9000fcb4 	.word	0x9000fcb4
9000c9d0:	9000fcb8 	.word	0x9000fcb8

9000c9d4 <__retarget_lock_init_recursive>:
9000c9d4:	4770      	bx	lr

9000c9d6 <__retarget_lock_acquire_recursive>:
9000c9d6:	4770      	bx	lr

9000c9d8 <__retarget_lock_release_recursive>:
9000c9d8:	4770      	bx	lr

9000c9da <memcpy>:
9000c9da:	440a      	add	r2, r1
9000c9dc:	4291      	cmp	r1, r2
9000c9de:	f100 33ff 	add.w	r3, r0, #4294967295
9000c9e2:	d100      	bne.n	9000c9e6 <memcpy+0xc>
9000c9e4:	4770      	bx	lr
9000c9e6:	b510      	push	{r4, lr}
9000c9e8:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c9ec:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c9f0:	4291      	cmp	r1, r2
9000c9f2:	d1f9      	bne.n	9000c9e8 <memcpy+0xe>
9000c9f4:	bd10      	pop	{r4, pc}
	...

9000c9f8 <_free_r>:
9000c9f8:	b538      	push	{r3, r4, r5, lr}
9000c9fa:	4605      	mov	r5, r0
9000c9fc:	2900      	cmp	r1, #0
9000c9fe:	d041      	beq.n	9000ca84 <_free_r+0x8c>
9000ca00:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000ca04:	1f0c      	subs	r4, r1, #4
9000ca06:	2b00      	cmp	r3, #0
9000ca08:	bfb8      	it	lt
9000ca0a:	18e4      	addlt	r4, r4, r3
9000ca0c:	f7ff fd22 	bl	9000c454 <__malloc_lock>
9000ca10:	4a1d      	ldr	r2, [pc, #116]	@ (9000ca88 <_free_r+0x90>)
9000ca12:	6813      	ldr	r3, [r2, #0]
9000ca14:	b933      	cbnz	r3, 9000ca24 <_free_r+0x2c>
9000ca16:	6063      	str	r3, [r4, #4]
9000ca18:	6014      	str	r4, [r2, #0]
9000ca1a:	4628      	mov	r0, r5
9000ca1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000ca20:	f7ff bd1e 	b.w	9000c460 <__malloc_unlock>
9000ca24:	42a3      	cmp	r3, r4
9000ca26:	d908      	bls.n	9000ca3a <_free_r+0x42>
9000ca28:	6820      	ldr	r0, [r4, #0]
9000ca2a:	1821      	adds	r1, r4, r0
9000ca2c:	428b      	cmp	r3, r1
9000ca2e:	bf01      	itttt	eq
9000ca30:	6819      	ldreq	r1, [r3, #0]
9000ca32:	685b      	ldreq	r3, [r3, #4]
9000ca34:	1809      	addeq	r1, r1, r0
9000ca36:	6021      	streq	r1, [r4, #0]
9000ca38:	e7ed      	b.n	9000ca16 <_free_r+0x1e>
9000ca3a:	461a      	mov	r2, r3
9000ca3c:	685b      	ldr	r3, [r3, #4]
9000ca3e:	b10b      	cbz	r3, 9000ca44 <_free_r+0x4c>
9000ca40:	42a3      	cmp	r3, r4
9000ca42:	d9fa      	bls.n	9000ca3a <_free_r+0x42>
9000ca44:	6811      	ldr	r1, [r2, #0]
9000ca46:	1850      	adds	r0, r2, r1
9000ca48:	42a0      	cmp	r0, r4
9000ca4a:	d10b      	bne.n	9000ca64 <_free_r+0x6c>
9000ca4c:	6820      	ldr	r0, [r4, #0]
9000ca4e:	4401      	add	r1, r0
9000ca50:	1850      	adds	r0, r2, r1
9000ca52:	4283      	cmp	r3, r0
9000ca54:	6011      	str	r1, [r2, #0]
9000ca56:	d1e0      	bne.n	9000ca1a <_free_r+0x22>
9000ca58:	6818      	ldr	r0, [r3, #0]
9000ca5a:	685b      	ldr	r3, [r3, #4]
9000ca5c:	6053      	str	r3, [r2, #4]
9000ca5e:	4408      	add	r0, r1
9000ca60:	6010      	str	r0, [r2, #0]
9000ca62:	e7da      	b.n	9000ca1a <_free_r+0x22>
9000ca64:	d902      	bls.n	9000ca6c <_free_r+0x74>
9000ca66:	230c      	movs	r3, #12
9000ca68:	602b      	str	r3, [r5, #0]
9000ca6a:	e7d6      	b.n	9000ca1a <_free_r+0x22>
9000ca6c:	6820      	ldr	r0, [r4, #0]
9000ca6e:	1821      	adds	r1, r4, r0
9000ca70:	428b      	cmp	r3, r1
9000ca72:	bf04      	itt	eq
9000ca74:	6819      	ldreq	r1, [r3, #0]
9000ca76:	685b      	ldreq	r3, [r3, #4]
9000ca78:	6063      	str	r3, [r4, #4]
9000ca7a:	bf04      	itt	eq
9000ca7c:	1809      	addeq	r1, r1, r0
9000ca7e:	6021      	streq	r1, [r4, #0]
9000ca80:	6054      	str	r4, [r2, #4]
9000ca82:	e7ca      	b.n	9000ca1a <_free_r+0x22>
9000ca84:	bd38      	pop	{r3, r4, r5, pc}
9000ca86:	bf00      	nop
9000ca88:	20001358 	.word	0x20001358

9000ca8c <__ssputs_r>:
9000ca8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ca90:	688e      	ldr	r6, [r1, #8]
9000ca92:	461f      	mov	r7, r3
9000ca94:	42be      	cmp	r6, r7
9000ca96:	680b      	ldr	r3, [r1, #0]
9000ca98:	4682      	mov	sl, r0
9000ca9a:	460c      	mov	r4, r1
9000ca9c:	4690      	mov	r8, r2
9000ca9e:	d82d      	bhi.n	9000cafc <__ssputs_r+0x70>
9000caa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000caa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000caa8:	d026      	beq.n	9000caf8 <__ssputs_r+0x6c>
9000caaa:	6965      	ldr	r5, [r4, #20]
9000caac:	6909      	ldr	r1, [r1, #16]
9000caae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000cab2:	eba3 0901 	sub.w	r9, r3, r1
9000cab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000caba:	1c7b      	adds	r3, r7, #1
9000cabc:	444b      	add	r3, r9
9000cabe:	106d      	asrs	r5, r5, #1
9000cac0:	429d      	cmp	r5, r3
9000cac2:	bf38      	it	cc
9000cac4:	461d      	movcc	r5, r3
9000cac6:	0553      	lsls	r3, r2, #21
9000cac8:	d527      	bpl.n	9000cb1a <__ssputs_r+0x8e>
9000caca:	4629      	mov	r1, r5
9000cacc:	f7ff fc42 	bl	9000c354 <_malloc_r>
9000cad0:	4606      	mov	r6, r0
9000cad2:	b360      	cbz	r0, 9000cb2e <__ssputs_r+0xa2>
9000cad4:	6921      	ldr	r1, [r4, #16]
9000cad6:	464a      	mov	r2, r9
9000cad8:	f7ff ff7f 	bl	9000c9da <memcpy>
9000cadc:	89a3      	ldrh	r3, [r4, #12]
9000cade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000cae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000cae6:	81a3      	strh	r3, [r4, #12]
9000cae8:	6126      	str	r6, [r4, #16]
9000caea:	6165      	str	r5, [r4, #20]
9000caec:	444e      	add	r6, r9
9000caee:	eba5 0509 	sub.w	r5, r5, r9
9000caf2:	6026      	str	r6, [r4, #0]
9000caf4:	60a5      	str	r5, [r4, #8]
9000caf6:	463e      	mov	r6, r7
9000caf8:	42be      	cmp	r6, r7
9000cafa:	d900      	bls.n	9000cafe <__ssputs_r+0x72>
9000cafc:	463e      	mov	r6, r7
9000cafe:	6820      	ldr	r0, [r4, #0]
9000cb00:	4632      	mov	r2, r6
9000cb02:	4641      	mov	r1, r8
9000cb04:	f000 fcf6 	bl	9000d4f4 <memmove>
9000cb08:	68a3      	ldr	r3, [r4, #8]
9000cb0a:	1b9b      	subs	r3, r3, r6
9000cb0c:	60a3      	str	r3, [r4, #8]
9000cb0e:	6823      	ldr	r3, [r4, #0]
9000cb10:	4433      	add	r3, r6
9000cb12:	6023      	str	r3, [r4, #0]
9000cb14:	2000      	movs	r0, #0
9000cb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000cb1a:	462a      	mov	r2, r5
9000cb1c:	f000 fd26 	bl	9000d56c <_realloc_r>
9000cb20:	4606      	mov	r6, r0
9000cb22:	2800      	cmp	r0, #0
9000cb24:	d1e0      	bne.n	9000cae8 <__ssputs_r+0x5c>
9000cb26:	6921      	ldr	r1, [r4, #16]
9000cb28:	4650      	mov	r0, sl
9000cb2a:	f7ff ff65 	bl	9000c9f8 <_free_r>
9000cb2e:	230c      	movs	r3, #12
9000cb30:	f8ca 3000 	str.w	r3, [sl]
9000cb34:	89a3      	ldrh	r3, [r4, #12]
9000cb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cb3a:	81a3      	strh	r3, [r4, #12]
9000cb3c:	f04f 30ff 	mov.w	r0, #4294967295
9000cb40:	e7e9      	b.n	9000cb16 <__ssputs_r+0x8a>
	...

9000cb44 <_svfiprintf_r>:
9000cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000cb48:	4698      	mov	r8, r3
9000cb4a:	898b      	ldrh	r3, [r1, #12]
9000cb4c:	061b      	lsls	r3, r3, #24
9000cb4e:	b09d      	sub	sp, #116	@ 0x74
9000cb50:	4607      	mov	r7, r0
9000cb52:	460d      	mov	r5, r1
9000cb54:	4614      	mov	r4, r2
9000cb56:	d510      	bpl.n	9000cb7a <_svfiprintf_r+0x36>
9000cb58:	690b      	ldr	r3, [r1, #16]
9000cb5a:	b973      	cbnz	r3, 9000cb7a <_svfiprintf_r+0x36>
9000cb5c:	2140      	movs	r1, #64	@ 0x40
9000cb5e:	f7ff fbf9 	bl	9000c354 <_malloc_r>
9000cb62:	6028      	str	r0, [r5, #0]
9000cb64:	6128      	str	r0, [r5, #16]
9000cb66:	b930      	cbnz	r0, 9000cb76 <_svfiprintf_r+0x32>
9000cb68:	230c      	movs	r3, #12
9000cb6a:	603b      	str	r3, [r7, #0]
9000cb6c:	f04f 30ff 	mov.w	r0, #4294967295
9000cb70:	b01d      	add	sp, #116	@ 0x74
9000cb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cb76:	2340      	movs	r3, #64	@ 0x40
9000cb78:	616b      	str	r3, [r5, #20]
9000cb7a:	2300      	movs	r3, #0
9000cb7c:	9309      	str	r3, [sp, #36]	@ 0x24
9000cb7e:	2320      	movs	r3, #32
9000cb80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cb84:	f8cd 800c 	str.w	r8, [sp, #12]
9000cb88:	2330      	movs	r3, #48	@ 0x30
9000cb8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000cd28 <_svfiprintf_r+0x1e4>
9000cb8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000cb92:	f04f 0901 	mov.w	r9, #1
9000cb96:	4623      	mov	r3, r4
9000cb98:	469a      	mov	sl, r3
9000cb9a:	f813 2b01 	ldrb.w	r2, [r3], #1
9000cb9e:	b10a      	cbz	r2, 9000cba4 <_svfiprintf_r+0x60>
9000cba0:	2a25      	cmp	r2, #37	@ 0x25
9000cba2:	d1f9      	bne.n	9000cb98 <_svfiprintf_r+0x54>
9000cba4:	ebba 0b04 	subs.w	fp, sl, r4
9000cba8:	d00b      	beq.n	9000cbc2 <_svfiprintf_r+0x7e>
9000cbaa:	465b      	mov	r3, fp
9000cbac:	4622      	mov	r2, r4
9000cbae:	4629      	mov	r1, r5
9000cbb0:	4638      	mov	r0, r7
9000cbb2:	f7ff ff6b 	bl	9000ca8c <__ssputs_r>
9000cbb6:	3001      	adds	r0, #1
9000cbb8:	f000 80a7 	beq.w	9000cd0a <_svfiprintf_r+0x1c6>
9000cbbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000cbbe:	445a      	add	r2, fp
9000cbc0:	9209      	str	r2, [sp, #36]	@ 0x24
9000cbc2:	f89a 3000 	ldrb.w	r3, [sl]
9000cbc6:	2b00      	cmp	r3, #0
9000cbc8:	f000 809f 	beq.w	9000cd0a <_svfiprintf_r+0x1c6>
9000cbcc:	2300      	movs	r3, #0
9000cbce:	f04f 32ff 	mov.w	r2, #4294967295
9000cbd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cbd6:	f10a 0a01 	add.w	sl, sl, #1
9000cbda:	9304      	str	r3, [sp, #16]
9000cbdc:	9307      	str	r3, [sp, #28]
9000cbde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000cbe2:	931a      	str	r3, [sp, #104]	@ 0x68
9000cbe4:	4654      	mov	r4, sl
9000cbe6:	2205      	movs	r2, #5
9000cbe8:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cbec:	484e      	ldr	r0, [pc, #312]	@ (9000cd28 <_svfiprintf_r+0x1e4>)
9000cbee:	f7f3 fb7f 	bl	900002f0 <memchr>
9000cbf2:	9a04      	ldr	r2, [sp, #16]
9000cbf4:	b9d8      	cbnz	r0, 9000cc2e <_svfiprintf_r+0xea>
9000cbf6:	06d0      	lsls	r0, r2, #27
9000cbf8:	bf44      	itt	mi
9000cbfa:	2320      	movmi	r3, #32
9000cbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cc00:	0711      	lsls	r1, r2, #28
9000cc02:	bf44      	itt	mi
9000cc04:	232b      	movmi	r3, #43	@ 0x2b
9000cc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cc0a:	f89a 3000 	ldrb.w	r3, [sl]
9000cc0e:	2b2a      	cmp	r3, #42	@ 0x2a
9000cc10:	d015      	beq.n	9000cc3e <_svfiprintf_r+0xfa>
9000cc12:	9a07      	ldr	r2, [sp, #28]
9000cc14:	4654      	mov	r4, sl
9000cc16:	2000      	movs	r0, #0
9000cc18:	f04f 0c0a 	mov.w	ip, #10
9000cc1c:	4621      	mov	r1, r4
9000cc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cc22:	3b30      	subs	r3, #48	@ 0x30
9000cc24:	2b09      	cmp	r3, #9
9000cc26:	d94b      	bls.n	9000ccc0 <_svfiprintf_r+0x17c>
9000cc28:	b1b0      	cbz	r0, 9000cc58 <_svfiprintf_r+0x114>
9000cc2a:	9207      	str	r2, [sp, #28]
9000cc2c:	e014      	b.n	9000cc58 <_svfiprintf_r+0x114>
9000cc2e:	eba0 0308 	sub.w	r3, r0, r8
9000cc32:	fa09 f303 	lsl.w	r3, r9, r3
9000cc36:	4313      	orrs	r3, r2
9000cc38:	9304      	str	r3, [sp, #16]
9000cc3a:	46a2      	mov	sl, r4
9000cc3c:	e7d2      	b.n	9000cbe4 <_svfiprintf_r+0xa0>
9000cc3e:	9b03      	ldr	r3, [sp, #12]
9000cc40:	1d19      	adds	r1, r3, #4
9000cc42:	681b      	ldr	r3, [r3, #0]
9000cc44:	9103      	str	r1, [sp, #12]
9000cc46:	2b00      	cmp	r3, #0
9000cc48:	bfbb      	ittet	lt
9000cc4a:	425b      	neglt	r3, r3
9000cc4c:	f042 0202 	orrlt.w	r2, r2, #2
9000cc50:	9307      	strge	r3, [sp, #28]
9000cc52:	9307      	strlt	r3, [sp, #28]
9000cc54:	bfb8      	it	lt
9000cc56:	9204      	strlt	r2, [sp, #16]
9000cc58:	7823      	ldrb	r3, [r4, #0]
9000cc5a:	2b2e      	cmp	r3, #46	@ 0x2e
9000cc5c:	d10a      	bne.n	9000cc74 <_svfiprintf_r+0x130>
9000cc5e:	7863      	ldrb	r3, [r4, #1]
9000cc60:	2b2a      	cmp	r3, #42	@ 0x2a
9000cc62:	d132      	bne.n	9000ccca <_svfiprintf_r+0x186>
9000cc64:	9b03      	ldr	r3, [sp, #12]
9000cc66:	1d1a      	adds	r2, r3, #4
9000cc68:	681b      	ldr	r3, [r3, #0]
9000cc6a:	9203      	str	r2, [sp, #12]
9000cc6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cc70:	3402      	adds	r4, #2
9000cc72:	9305      	str	r3, [sp, #20]
9000cc74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000cd38 <_svfiprintf_r+0x1f4>
9000cc78:	7821      	ldrb	r1, [r4, #0]
9000cc7a:	2203      	movs	r2, #3
9000cc7c:	4650      	mov	r0, sl
9000cc7e:	f7f3 fb37 	bl	900002f0 <memchr>
9000cc82:	b138      	cbz	r0, 9000cc94 <_svfiprintf_r+0x150>
9000cc84:	9b04      	ldr	r3, [sp, #16]
9000cc86:	eba0 000a 	sub.w	r0, r0, sl
9000cc8a:	2240      	movs	r2, #64	@ 0x40
9000cc8c:	4082      	lsls	r2, r0
9000cc8e:	4313      	orrs	r3, r2
9000cc90:	3401      	adds	r4, #1
9000cc92:	9304      	str	r3, [sp, #16]
9000cc94:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cc98:	4824      	ldr	r0, [pc, #144]	@ (9000cd2c <_svfiprintf_r+0x1e8>)
9000cc9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cc9e:	2206      	movs	r2, #6
9000cca0:	f7f3 fb26 	bl	900002f0 <memchr>
9000cca4:	2800      	cmp	r0, #0
9000cca6:	d036      	beq.n	9000cd16 <_svfiprintf_r+0x1d2>
9000cca8:	4b21      	ldr	r3, [pc, #132]	@ (9000cd30 <_svfiprintf_r+0x1ec>)
9000ccaa:	bb1b      	cbnz	r3, 9000ccf4 <_svfiprintf_r+0x1b0>
9000ccac:	9b03      	ldr	r3, [sp, #12]
9000ccae:	3307      	adds	r3, #7
9000ccb0:	f023 0307 	bic.w	r3, r3, #7
9000ccb4:	3308      	adds	r3, #8
9000ccb6:	9303      	str	r3, [sp, #12]
9000ccb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000ccba:	4433      	add	r3, r6
9000ccbc:	9309      	str	r3, [sp, #36]	@ 0x24
9000ccbe:	e76a      	b.n	9000cb96 <_svfiprintf_r+0x52>
9000ccc0:	fb0c 3202 	mla	r2, ip, r2, r3
9000ccc4:	460c      	mov	r4, r1
9000ccc6:	2001      	movs	r0, #1
9000ccc8:	e7a8      	b.n	9000cc1c <_svfiprintf_r+0xd8>
9000ccca:	2300      	movs	r3, #0
9000cccc:	3401      	adds	r4, #1
9000ccce:	9305      	str	r3, [sp, #20]
9000ccd0:	4619      	mov	r1, r3
9000ccd2:	f04f 0c0a 	mov.w	ip, #10
9000ccd6:	4620      	mov	r0, r4
9000ccd8:	f810 2b01 	ldrb.w	r2, [r0], #1
9000ccdc:	3a30      	subs	r2, #48	@ 0x30
9000ccde:	2a09      	cmp	r2, #9
9000cce0:	d903      	bls.n	9000ccea <_svfiprintf_r+0x1a6>
9000cce2:	2b00      	cmp	r3, #0
9000cce4:	d0c6      	beq.n	9000cc74 <_svfiprintf_r+0x130>
9000cce6:	9105      	str	r1, [sp, #20]
9000cce8:	e7c4      	b.n	9000cc74 <_svfiprintf_r+0x130>
9000ccea:	fb0c 2101 	mla	r1, ip, r1, r2
9000ccee:	4604      	mov	r4, r0
9000ccf0:	2301      	movs	r3, #1
9000ccf2:	e7f0      	b.n	9000ccd6 <_svfiprintf_r+0x192>
9000ccf4:	ab03      	add	r3, sp, #12
9000ccf6:	9300      	str	r3, [sp, #0]
9000ccf8:	462a      	mov	r2, r5
9000ccfa:	4b0e      	ldr	r3, [pc, #56]	@ (9000cd34 <_svfiprintf_r+0x1f0>)
9000ccfc:	a904      	add	r1, sp, #16
9000ccfe:	4638      	mov	r0, r7
9000cd00:	f3af 8000 	nop.w
9000cd04:	1c42      	adds	r2, r0, #1
9000cd06:	4606      	mov	r6, r0
9000cd08:	d1d6      	bne.n	9000ccb8 <_svfiprintf_r+0x174>
9000cd0a:	89ab      	ldrh	r3, [r5, #12]
9000cd0c:	065b      	lsls	r3, r3, #25
9000cd0e:	f53f af2d 	bmi.w	9000cb6c <_svfiprintf_r+0x28>
9000cd12:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cd14:	e72c      	b.n	9000cb70 <_svfiprintf_r+0x2c>
9000cd16:	ab03      	add	r3, sp, #12
9000cd18:	9300      	str	r3, [sp, #0]
9000cd1a:	462a      	mov	r2, r5
9000cd1c:	4b05      	ldr	r3, [pc, #20]	@ (9000cd34 <_svfiprintf_r+0x1f0>)
9000cd1e:	a904      	add	r1, sp, #16
9000cd20:	4638      	mov	r0, r7
9000cd22:	f000 f9bb 	bl	9000d09c <_printf_i>
9000cd26:	e7ed      	b.n	9000cd04 <_svfiprintf_r+0x1c0>
9000cd28:	9000fc78 	.word	0x9000fc78
9000cd2c:	9000fc82 	.word	0x9000fc82
9000cd30:	00000000 	.word	0x00000000
9000cd34:	9000ca8d 	.word	0x9000ca8d
9000cd38:	9000fc7e 	.word	0x9000fc7e

9000cd3c <__sfputc_r>:
9000cd3c:	6893      	ldr	r3, [r2, #8]
9000cd3e:	3b01      	subs	r3, #1
9000cd40:	2b00      	cmp	r3, #0
9000cd42:	b410      	push	{r4}
9000cd44:	6093      	str	r3, [r2, #8]
9000cd46:	da08      	bge.n	9000cd5a <__sfputc_r+0x1e>
9000cd48:	6994      	ldr	r4, [r2, #24]
9000cd4a:	42a3      	cmp	r3, r4
9000cd4c:	db01      	blt.n	9000cd52 <__sfputc_r+0x16>
9000cd4e:	290a      	cmp	r1, #10
9000cd50:	d103      	bne.n	9000cd5a <__sfputc_r+0x1e>
9000cd52:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cd56:	f7ff bd20 	b.w	9000c79a <__swbuf_r>
9000cd5a:	6813      	ldr	r3, [r2, #0]
9000cd5c:	1c58      	adds	r0, r3, #1
9000cd5e:	6010      	str	r0, [r2, #0]
9000cd60:	7019      	strb	r1, [r3, #0]
9000cd62:	4608      	mov	r0, r1
9000cd64:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cd68:	4770      	bx	lr

9000cd6a <__sfputs_r>:
9000cd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cd6c:	4606      	mov	r6, r0
9000cd6e:	460f      	mov	r7, r1
9000cd70:	4614      	mov	r4, r2
9000cd72:	18d5      	adds	r5, r2, r3
9000cd74:	42ac      	cmp	r4, r5
9000cd76:	d101      	bne.n	9000cd7c <__sfputs_r+0x12>
9000cd78:	2000      	movs	r0, #0
9000cd7a:	e007      	b.n	9000cd8c <__sfputs_r+0x22>
9000cd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cd80:	463a      	mov	r2, r7
9000cd82:	4630      	mov	r0, r6
9000cd84:	f7ff ffda 	bl	9000cd3c <__sfputc_r>
9000cd88:	1c43      	adds	r3, r0, #1
9000cd8a:	d1f3      	bne.n	9000cd74 <__sfputs_r+0xa>
9000cd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000cd90 <_vfiprintf_r>:
9000cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000cd94:	460d      	mov	r5, r1
9000cd96:	b09d      	sub	sp, #116	@ 0x74
9000cd98:	4614      	mov	r4, r2
9000cd9a:	4698      	mov	r8, r3
9000cd9c:	4606      	mov	r6, r0
9000cd9e:	b118      	cbz	r0, 9000cda8 <_vfiprintf_r+0x18>
9000cda0:	6a03      	ldr	r3, [r0, #32]
9000cda2:	b90b      	cbnz	r3, 9000cda8 <_vfiprintf_r+0x18>
9000cda4:	f7ff fbee 	bl	9000c584 <__sinit>
9000cda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cdaa:	07d9      	lsls	r1, r3, #31
9000cdac:	d405      	bmi.n	9000cdba <_vfiprintf_r+0x2a>
9000cdae:	89ab      	ldrh	r3, [r5, #12]
9000cdb0:	059a      	lsls	r2, r3, #22
9000cdb2:	d402      	bmi.n	9000cdba <_vfiprintf_r+0x2a>
9000cdb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cdb6:	f7ff fe0e 	bl	9000c9d6 <__retarget_lock_acquire_recursive>
9000cdba:	89ab      	ldrh	r3, [r5, #12]
9000cdbc:	071b      	lsls	r3, r3, #28
9000cdbe:	d501      	bpl.n	9000cdc4 <_vfiprintf_r+0x34>
9000cdc0:	692b      	ldr	r3, [r5, #16]
9000cdc2:	b99b      	cbnz	r3, 9000cdec <_vfiprintf_r+0x5c>
9000cdc4:	4629      	mov	r1, r5
9000cdc6:	4630      	mov	r0, r6
9000cdc8:	f7ff fd26 	bl	9000c818 <__swsetup_r>
9000cdcc:	b170      	cbz	r0, 9000cdec <_vfiprintf_r+0x5c>
9000cdce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cdd0:	07dc      	lsls	r4, r3, #31
9000cdd2:	d504      	bpl.n	9000cdde <_vfiprintf_r+0x4e>
9000cdd4:	f04f 30ff 	mov.w	r0, #4294967295
9000cdd8:	b01d      	add	sp, #116	@ 0x74
9000cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cdde:	89ab      	ldrh	r3, [r5, #12]
9000cde0:	0598      	lsls	r0, r3, #22
9000cde2:	d4f7      	bmi.n	9000cdd4 <_vfiprintf_r+0x44>
9000cde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cde6:	f7ff fdf7 	bl	9000c9d8 <__retarget_lock_release_recursive>
9000cdea:	e7f3      	b.n	9000cdd4 <_vfiprintf_r+0x44>
9000cdec:	2300      	movs	r3, #0
9000cdee:	9309      	str	r3, [sp, #36]	@ 0x24
9000cdf0:	2320      	movs	r3, #32
9000cdf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cdf6:	f8cd 800c 	str.w	r8, [sp, #12]
9000cdfa:	2330      	movs	r3, #48	@ 0x30
9000cdfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000cfac <_vfiprintf_r+0x21c>
9000ce00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000ce04:	f04f 0901 	mov.w	r9, #1
9000ce08:	4623      	mov	r3, r4
9000ce0a:	469a      	mov	sl, r3
9000ce0c:	f813 2b01 	ldrb.w	r2, [r3], #1
9000ce10:	b10a      	cbz	r2, 9000ce16 <_vfiprintf_r+0x86>
9000ce12:	2a25      	cmp	r2, #37	@ 0x25
9000ce14:	d1f9      	bne.n	9000ce0a <_vfiprintf_r+0x7a>
9000ce16:	ebba 0b04 	subs.w	fp, sl, r4
9000ce1a:	d00b      	beq.n	9000ce34 <_vfiprintf_r+0xa4>
9000ce1c:	465b      	mov	r3, fp
9000ce1e:	4622      	mov	r2, r4
9000ce20:	4629      	mov	r1, r5
9000ce22:	4630      	mov	r0, r6
9000ce24:	f7ff ffa1 	bl	9000cd6a <__sfputs_r>
9000ce28:	3001      	adds	r0, #1
9000ce2a:	f000 80a7 	beq.w	9000cf7c <_vfiprintf_r+0x1ec>
9000ce2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000ce30:	445a      	add	r2, fp
9000ce32:	9209      	str	r2, [sp, #36]	@ 0x24
9000ce34:	f89a 3000 	ldrb.w	r3, [sl]
9000ce38:	2b00      	cmp	r3, #0
9000ce3a:	f000 809f 	beq.w	9000cf7c <_vfiprintf_r+0x1ec>
9000ce3e:	2300      	movs	r3, #0
9000ce40:	f04f 32ff 	mov.w	r2, #4294967295
9000ce44:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000ce48:	f10a 0a01 	add.w	sl, sl, #1
9000ce4c:	9304      	str	r3, [sp, #16]
9000ce4e:	9307      	str	r3, [sp, #28]
9000ce50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000ce54:	931a      	str	r3, [sp, #104]	@ 0x68
9000ce56:	4654      	mov	r4, sl
9000ce58:	2205      	movs	r2, #5
9000ce5a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ce5e:	4853      	ldr	r0, [pc, #332]	@ (9000cfac <_vfiprintf_r+0x21c>)
9000ce60:	f7f3 fa46 	bl	900002f0 <memchr>
9000ce64:	9a04      	ldr	r2, [sp, #16]
9000ce66:	b9d8      	cbnz	r0, 9000cea0 <_vfiprintf_r+0x110>
9000ce68:	06d1      	lsls	r1, r2, #27
9000ce6a:	bf44      	itt	mi
9000ce6c:	2320      	movmi	r3, #32
9000ce6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000ce72:	0713      	lsls	r3, r2, #28
9000ce74:	bf44      	itt	mi
9000ce76:	232b      	movmi	r3, #43	@ 0x2b
9000ce78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000ce7c:	f89a 3000 	ldrb.w	r3, [sl]
9000ce80:	2b2a      	cmp	r3, #42	@ 0x2a
9000ce82:	d015      	beq.n	9000ceb0 <_vfiprintf_r+0x120>
9000ce84:	9a07      	ldr	r2, [sp, #28]
9000ce86:	4654      	mov	r4, sl
9000ce88:	2000      	movs	r0, #0
9000ce8a:	f04f 0c0a 	mov.w	ip, #10
9000ce8e:	4621      	mov	r1, r4
9000ce90:	f811 3b01 	ldrb.w	r3, [r1], #1
9000ce94:	3b30      	subs	r3, #48	@ 0x30
9000ce96:	2b09      	cmp	r3, #9
9000ce98:	d94b      	bls.n	9000cf32 <_vfiprintf_r+0x1a2>
9000ce9a:	b1b0      	cbz	r0, 9000ceca <_vfiprintf_r+0x13a>
9000ce9c:	9207      	str	r2, [sp, #28]
9000ce9e:	e014      	b.n	9000ceca <_vfiprintf_r+0x13a>
9000cea0:	eba0 0308 	sub.w	r3, r0, r8
9000cea4:	fa09 f303 	lsl.w	r3, r9, r3
9000cea8:	4313      	orrs	r3, r2
9000ceaa:	9304      	str	r3, [sp, #16]
9000ceac:	46a2      	mov	sl, r4
9000ceae:	e7d2      	b.n	9000ce56 <_vfiprintf_r+0xc6>
9000ceb0:	9b03      	ldr	r3, [sp, #12]
9000ceb2:	1d19      	adds	r1, r3, #4
9000ceb4:	681b      	ldr	r3, [r3, #0]
9000ceb6:	9103      	str	r1, [sp, #12]
9000ceb8:	2b00      	cmp	r3, #0
9000ceba:	bfbb      	ittet	lt
9000cebc:	425b      	neglt	r3, r3
9000cebe:	f042 0202 	orrlt.w	r2, r2, #2
9000cec2:	9307      	strge	r3, [sp, #28]
9000cec4:	9307      	strlt	r3, [sp, #28]
9000cec6:	bfb8      	it	lt
9000cec8:	9204      	strlt	r2, [sp, #16]
9000ceca:	7823      	ldrb	r3, [r4, #0]
9000cecc:	2b2e      	cmp	r3, #46	@ 0x2e
9000cece:	d10a      	bne.n	9000cee6 <_vfiprintf_r+0x156>
9000ced0:	7863      	ldrb	r3, [r4, #1]
9000ced2:	2b2a      	cmp	r3, #42	@ 0x2a
9000ced4:	d132      	bne.n	9000cf3c <_vfiprintf_r+0x1ac>
9000ced6:	9b03      	ldr	r3, [sp, #12]
9000ced8:	1d1a      	adds	r2, r3, #4
9000ceda:	681b      	ldr	r3, [r3, #0]
9000cedc:	9203      	str	r2, [sp, #12]
9000cede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cee2:	3402      	adds	r4, #2
9000cee4:	9305      	str	r3, [sp, #20]
9000cee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000cfbc <_vfiprintf_r+0x22c>
9000ceea:	7821      	ldrb	r1, [r4, #0]
9000ceec:	2203      	movs	r2, #3
9000ceee:	4650      	mov	r0, sl
9000cef0:	f7f3 f9fe 	bl	900002f0 <memchr>
9000cef4:	b138      	cbz	r0, 9000cf06 <_vfiprintf_r+0x176>
9000cef6:	9b04      	ldr	r3, [sp, #16]
9000cef8:	eba0 000a 	sub.w	r0, r0, sl
9000cefc:	2240      	movs	r2, #64	@ 0x40
9000cefe:	4082      	lsls	r2, r0
9000cf00:	4313      	orrs	r3, r2
9000cf02:	3401      	adds	r4, #1
9000cf04:	9304      	str	r3, [sp, #16]
9000cf06:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cf0a:	4829      	ldr	r0, [pc, #164]	@ (9000cfb0 <_vfiprintf_r+0x220>)
9000cf0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cf10:	2206      	movs	r2, #6
9000cf12:	f7f3 f9ed 	bl	900002f0 <memchr>
9000cf16:	2800      	cmp	r0, #0
9000cf18:	d03f      	beq.n	9000cf9a <_vfiprintf_r+0x20a>
9000cf1a:	4b26      	ldr	r3, [pc, #152]	@ (9000cfb4 <_vfiprintf_r+0x224>)
9000cf1c:	bb1b      	cbnz	r3, 9000cf66 <_vfiprintf_r+0x1d6>
9000cf1e:	9b03      	ldr	r3, [sp, #12]
9000cf20:	3307      	adds	r3, #7
9000cf22:	f023 0307 	bic.w	r3, r3, #7
9000cf26:	3308      	adds	r3, #8
9000cf28:	9303      	str	r3, [sp, #12]
9000cf2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cf2c:	443b      	add	r3, r7
9000cf2e:	9309      	str	r3, [sp, #36]	@ 0x24
9000cf30:	e76a      	b.n	9000ce08 <_vfiprintf_r+0x78>
9000cf32:	fb0c 3202 	mla	r2, ip, r2, r3
9000cf36:	460c      	mov	r4, r1
9000cf38:	2001      	movs	r0, #1
9000cf3a:	e7a8      	b.n	9000ce8e <_vfiprintf_r+0xfe>
9000cf3c:	2300      	movs	r3, #0
9000cf3e:	3401      	adds	r4, #1
9000cf40:	9305      	str	r3, [sp, #20]
9000cf42:	4619      	mov	r1, r3
9000cf44:	f04f 0c0a 	mov.w	ip, #10
9000cf48:	4620      	mov	r0, r4
9000cf4a:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cf4e:	3a30      	subs	r2, #48	@ 0x30
9000cf50:	2a09      	cmp	r2, #9
9000cf52:	d903      	bls.n	9000cf5c <_vfiprintf_r+0x1cc>
9000cf54:	2b00      	cmp	r3, #0
9000cf56:	d0c6      	beq.n	9000cee6 <_vfiprintf_r+0x156>
9000cf58:	9105      	str	r1, [sp, #20]
9000cf5a:	e7c4      	b.n	9000cee6 <_vfiprintf_r+0x156>
9000cf5c:	fb0c 2101 	mla	r1, ip, r1, r2
9000cf60:	4604      	mov	r4, r0
9000cf62:	2301      	movs	r3, #1
9000cf64:	e7f0      	b.n	9000cf48 <_vfiprintf_r+0x1b8>
9000cf66:	ab03      	add	r3, sp, #12
9000cf68:	9300      	str	r3, [sp, #0]
9000cf6a:	462a      	mov	r2, r5
9000cf6c:	4b12      	ldr	r3, [pc, #72]	@ (9000cfb8 <_vfiprintf_r+0x228>)
9000cf6e:	a904      	add	r1, sp, #16
9000cf70:	4630      	mov	r0, r6
9000cf72:	f3af 8000 	nop.w
9000cf76:	4607      	mov	r7, r0
9000cf78:	1c78      	adds	r0, r7, #1
9000cf7a:	d1d6      	bne.n	9000cf2a <_vfiprintf_r+0x19a>
9000cf7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cf7e:	07d9      	lsls	r1, r3, #31
9000cf80:	d405      	bmi.n	9000cf8e <_vfiprintf_r+0x1fe>
9000cf82:	89ab      	ldrh	r3, [r5, #12]
9000cf84:	059a      	lsls	r2, r3, #22
9000cf86:	d402      	bmi.n	9000cf8e <_vfiprintf_r+0x1fe>
9000cf88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cf8a:	f7ff fd25 	bl	9000c9d8 <__retarget_lock_release_recursive>
9000cf8e:	89ab      	ldrh	r3, [r5, #12]
9000cf90:	065b      	lsls	r3, r3, #25
9000cf92:	f53f af1f 	bmi.w	9000cdd4 <_vfiprintf_r+0x44>
9000cf96:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cf98:	e71e      	b.n	9000cdd8 <_vfiprintf_r+0x48>
9000cf9a:	ab03      	add	r3, sp, #12
9000cf9c:	9300      	str	r3, [sp, #0]
9000cf9e:	462a      	mov	r2, r5
9000cfa0:	4b05      	ldr	r3, [pc, #20]	@ (9000cfb8 <_vfiprintf_r+0x228>)
9000cfa2:	a904      	add	r1, sp, #16
9000cfa4:	4630      	mov	r0, r6
9000cfa6:	f000 f879 	bl	9000d09c <_printf_i>
9000cfaa:	e7e4      	b.n	9000cf76 <_vfiprintf_r+0x1e6>
9000cfac:	9000fc78 	.word	0x9000fc78
9000cfb0:	9000fc82 	.word	0x9000fc82
9000cfb4:	00000000 	.word	0x00000000
9000cfb8:	9000cd6b 	.word	0x9000cd6b
9000cfbc:	9000fc7e 	.word	0x9000fc7e

9000cfc0 <_printf_common>:
9000cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000cfc4:	4616      	mov	r6, r2
9000cfc6:	4698      	mov	r8, r3
9000cfc8:	688a      	ldr	r2, [r1, #8]
9000cfca:	690b      	ldr	r3, [r1, #16]
9000cfcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000cfd0:	4293      	cmp	r3, r2
9000cfd2:	bfb8      	it	lt
9000cfd4:	4613      	movlt	r3, r2
9000cfd6:	6033      	str	r3, [r6, #0]
9000cfd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000cfdc:	4607      	mov	r7, r0
9000cfde:	460c      	mov	r4, r1
9000cfe0:	b10a      	cbz	r2, 9000cfe6 <_printf_common+0x26>
9000cfe2:	3301      	adds	r3, #1
9000cfe4:	6033      	str	r3, [r6, #0]
9000cfe6:	6823      	ldr	r3, [r4, #0]
9000cfe8:	0699      	lsls	r1, r3, #26
9000cfea:	bf42      	ittt	mi
9000cfec:	6833      	ldrmi	r3, [r6, #0]
9000cfee:	3302      	addmi	r3, #2
9000cff0:	6033      	strmi	r3, [r6, #0]
9000cff2:	6825      	ldr	r5, [r4, #0]
9000cff4:	f015 0506 	ands.w	r5, r5, #6
9000cff8:	d106      	bne.n	9000d008 <_printf_common+0x48>
9000cffa:	f104 0a19 	add.w	sl, r4, #25
9000cffe:	68e3      	ldr	r3, [r4, #12]
9000d000:	6832      	ldr	r2, [r6, #0]
9000d002:	1a9b      	subs	r3, r3, r2
9000d004:	42ab      	cmp	r3, r5
9000d006:	dc26      	bgt.n	9000d056 <_printf_common+0x96>
9000d008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000d00c:	6822      	ldr	r2, [r4, #0]
9000d00e:	3b00      	subs	r3, #0
9000d010:	bf18      	it	ne
9000d012:	2301      	movne	r3, #1
9000d014:	0692      	lsls	r2, r2, #26
9000d016:	d42b      	bmi.n	9000d070 <_printf_common+0xb0>
9000d018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000d01c:	4641      	mov	r1, r8
9000d01e:	4638      	mov	r0, r7
9000d020:	47c8      	blx	r9
9000d022:	3001      	adds	r0, #1
9000d024:	d01e      	beq.n	9000d064 <_printf_common+0xa4>
9000d026:	6823      	ldr	r3, [r4, #0]
9000d028:	6922      	ldr	r2, [r4, #16]
9000d02a:	f003 0306 	and.w	r3, r3, #6
9000d02e:	2b04      	cmp	r3, #4
9000d030:	bf02      	ittt	eq
9000d032:	68e5      	ldreq	r5, [r4, #12]
9000d034:	6833      	ldreq	r3, [r6, #0]
9000d036:	1aed      	subeq	r5, r5, r3
9000d038:	68a3      	ldr	r3, [r4, #8]
9000d03a:	bf0c      	ite	eq
9000d03c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000d040:	2500      	movne	r5, #0
9000d042:	4293      	cmp	r3, r2
9000d044:	bfc4      	itt	gt
9000d046:	1a9b      	subgt	r3, r3, r2
9000d048:	18ed      	addgt	r5, r5, r3
9000d04a:	2600      	movs	r6, #0
9000d04c:	341a      	adds	r4, #26
9000d04e:	42b5      	cmp	r5, r6
9000d050:	d11a      	bne.n	9000d088 <_printf_common+0xc8>
9000d052:	2000      	movs	r0, #0
9000d054:	e008      	b.n	9000d068 <_printf_common+0xa8>
9000d056:	2301      	movs	r3, #1
9000d058:	4652      	mov	r2, sl
9000d05a:	4641      	mov	r1, r8
9000d05c:	4638      	mov	r0, r7
9000d05e:	47c8      	blx	r9
9000d060:	3001      	adds	r0, #1
9000d062:	d103      	bne.n	9000d06c <_printf_common+0xac>
9000d064:	f04f 30ff 	mov.w	r0, #4294967295
9000d068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d06c:	3501      	adds	r5, #1
9000d06e:	e7c6      	b.n	9000cffe <_printf_common+0x3e>
9000d070:	18e1      	adds	r1, r4, r3
9000d072:	1c5a      	adds	r2, r3, #1
9000d074:	2030      	movs	r0, #48	@ 0x30
9000d076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000d07a:	4422      	add	r2, r4
9000d07c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000d080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000d084:	3302      	adds	r3, #2
9000d086:	e7c7      	b.n	9000d018 <_printf_common+0x58>
9000d088:	2301      	movs	r3, #1
9000d08a:	4622      	mov	r2, r4
9000d08c:	4641      	mov	r1, r8
9000d08e:	4638      	mov	r0, r7
9000d090:	47c8      	blx	r9
9000d092:	3001      	adds	r0, #1
9000d094:	d0e6      	beq.n	9000d064 <_printf_common+0xa4>
9000d096:	3601      	adds	r6, #1
9000d098:	e7d9      	b.n	9000d04e <_printf_common+0x8e>
	...

9000d09c <_printf_i>:
9000d09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000d0a0:	7e0f      	ldrb	r7, [r1, #24]
9000d0a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000d0a4:	2f78      	cmp	r7, #120	@ 0x78
9000d0a6:	4691      	mov	r9, r2
9000d0a8:	4680      	mov	r8, r0
9000d0aa:	460c      	mov	r4, r1
9000d0ac:	469a      	mov	sl, r3
9000d0ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000d0b2:	d807      	bhi.n	9000d0c4 <_printf_i+0x28>
9000d0b4:	2f62      	cmp	r7, #98	@ 0x62
9000d0b6:	d80a      	bhi.n	9000d0ce <_printf_i+0x32>
9000d0b8:	2f00      	cmp	r7, #0
9000d0ba:	f000 80d1 	beq.w	9000d260 <_printf_i+0x1c4>
9000d0be:	2f58      	cmp	r7, #88	@ 0x58
9000d0c0:	f000 80b8 	beq.w	9000d234 <_printf_i+0x198>
9000d0c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d0c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000d0cc:	e03a      	b.n	9000d144 <_printf_i+0xa8>
9000d0ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000d0d2:	2b15      	cmp	r3, #21
9000d0d4:	d8f6      	bhi.n	9000d0c4 <_printf_i+0x28>
9000d0d6:	a101      	add	r1, pc, #4	@ (adr r1, 9000d0dc <_printf_i+0x40>)
9000d0d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000d0dc:	9000d135 	.word	0x9000d135
9000d0e0:	9000d149 	.word	0x9000d149
9000d0e4:	9000d0c5 	.word	0x9000d0c5
9000d0e8:	9000d0c5 	.word	0x9000d0c5
9000d0ec:	9000d0c5 	.word	0x9000d0c5
9000d0f0:	9000d0c5 	.word	0x9000d0c5
9000d0f4:	9000d149 	.word	0x9000d149
9000d0f8:	9000d0c5 	.word	0x9000d0c5
9000d0fc:	9000d0c5 	.word	0x9000d0c5
9000d100:	9000d0c5 	.word	0x9000d0c5
9000d104:	9000d0c5 	.word	0x9000d0c5
9000d108:	9000d247 	.word	0x9000d247
9000d10c:	9000d173 	.word	0x9000d173
9000d110:	9000d201 	.word	0x9000d201
9000d114:	9000d0c5 	.word	0x9000d0c5
9000d118:	9000d0c5 	.word	0x9000d0c5
9000d11c:	9000d269 	.word	0x9000d269
9000d120:	9000d0c5 	.word	0x9000d0c5
9000d124:	9000d173 	.word	0x9000d173
9000d128:	9000d0c5 	.word	0x9000d0c5
9000d12c:	9000d0c5 	.word	0x9000d0c5
9000d130:	9000d209 	.word	0x9000d209
9000d134:	6833      	ldr	r3, [r6, #0]
9000d136:	1d1a      	adds	r2, r3, #4
9000d138:	681b      	ldr	r3, [r3, #0]
9000d13a:	6032      	str	r2, [r6, #0]
9000d13c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000d144:	2301      	movs	r3, #1
9000d146:	e09c      	b.n	9000d282 <_printf_i+0x1e6>
9000d148:	6833      	ldr	r3, [r6, #0]
9000d14a:	6820      	ldr	r0, [r4, #0]
9000d14c:	1d19      	adds	r1, r3, #4
9000d14e:	6031      	str	r1, [r6, #0]
9000d150:	0606      	lsls	r6, r0, #24
9000d152:	d501      	bpl.n	9000d158 <_printf_i+0xbc>
9000d154:	681d      	ldr	r5, [r3, #0]
9000d156:	e003      	b.n	9000d160 <_printf_i+0xc4>
9000d158:	0645      	lsls	r5, r0, #25
9000d15a:	d5fb      	bpl.n	9000d154 <_printf_i+0xb8>
9000d15c:	f9b3 5000 	ldrsh.w	r5, [r3]
9000d160:	2d00      	cmp	r5, #0
9000d162:	da03      	bge.n	9000d16c <_printf_i+0xd0>
9000d164:	232d      	movs	r3, #45	@ 0x2d
9000d166:	426d      	negs	r5, r5
9000d168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d16c:	4858      	ldr	r0, [pc, #352]	@ (9000d2d0 <_printf_i+0x234>)
9000d16e:	230a      	movs	r3, #10
9000d170:	e011      	b.n	9000d196 <_printf_i+0xfa>
9000d172:	6821      	ldr	r1, [r4, #0]
9000d174:	6833      	ldr	r3, [r6, #0]
9000d176:	0608      	lsls	r0, r1, #24
9000d178:	f853 5b04 	ldr.w	r5, [r3], #4
9000d17c:	d402      	bmi.n	9000d184 <_printf_i+0xe8>
9000d17e:	0649      	lsls	r1, r1, #25
9000d180:	bf48      	it	mi
9000d182:	b2ad      	uxthmi	r5, r5
9000d184:	2f6f      	cmp	r7, #111	@ 0x6f
9000d186:	4852      	ldr	r0, [pc, #328]	@ (9000d2d0 <_printf_i+0x234>)
9000d188:	6033      	str	r3, [r6, #0]
9000d18a:	bf14      	ite	ne
9000d18c:	230a      	movne	r3, #10
9000d18e:	2308      	moveq	r3, #8
9000d190:	2100      	movs	r1, #0
9000d192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000d196:	6866      	ldr	r6, [r4, #4]
9000d198:	60a6      	str	r6, [r4, #8]
9000d19a:	2e00      	cmp	r6, #0
9000d19c:	db05      	blt.n	9000d1aa <_printf_i+0x10e>
9000d19e:	6821      	ldr	r1, [r4, #0]
9000d1a0:	432e      	orrs	r6, r5
9000d1a2:	f021 0104 	bic.w	r1, r1, #4
9000d1a6:	6021      	str	r1, [r4, #0]
9000d1a8:	d04b      	beq.n	9000d242 <_printf_i+0x1a6>
9000d1aa:	4616      	mov	r6, r2
9000d1ac:	fbb5 f1f3 	udiv	r1, r5, r3
9000d1b0:	fb03 5711 	mls	r7, r3, r1, r5
9000d1b4:	5dc7      	ldrb	r7, [r0, r7]
9000d1b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000d1ba:	462f      	mov	r7, r5
9000d1bc:	42bb      	cmp	r3, r7
9000d1be:	460d      	mov	r5, r1
9000d1c0:	d9f4      	bls.n	9000d1ac <_printf_i+0x110>
9000d1c2:	2b08      	cmp	r3, #8
9000d1c4:	d10b      	bne.n	9000d1de <_printf_i+0x142>
9000d1c6:	6823      	ldr	r3, [r4, #0]
9000d1c8:	07df      	lsls	r7, r3, #31
9000d1ca:	d508      	bpl.n	9000d1de <_printf_i+0x142>
9000d1cc:	6923      	ldr	r3, [r4, #16]
9000d1ce:	6861      	ldr	r1, [r4, #4]
9000d1d0:	4299      	cmp	r1, r3
9000d1d2:	bfde      	ittt	le
9000d1d4:	2330      	movle	r3, #48	@ 0x30
9000d1d6:	f806 3c01 	strble.w	r3, [r6, #-1]
9000d1da:	f106 36ff 	addle.w	r6, r6, #4294967295
9000d1de:	1b92      	subs	r2, r2, r6
9000d1e0:	6122      	str	r2, [r4, #16]
9000d1e2:	f8cd a000 	str.w	sl, [sp]
9000d1e6:	464b      	mov	r3, r9
9000d1e8:	aa03      	add	r2, sp, #12
9000d1ea:	4621      	mov	r1, r4
9000d1ec:	4640      	mov	r0, r8
9000d1ee:	f7ff fee7 	bl	9000cfc0 <_printf_common>
9000d1f2:	3001      	adds	r0, #1
9000d1f4:	d14a      	bne.n	9000d28c <_printf_i+0x1f0>
9000d1f6:	f04f 30ff 	mov.w	r0, #4294967295
9000d1fa:	b004      	add	sp, #16
9000d1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d200:	6823      	ldr	r3, [r4, #0]
9000d202:	f043 0320 	orr.w	r3, r3, #32
9000d206:	6023      	str	r3, [r4, #0]
9000d208:	4832      	ldr	r0, [pc, #200]	@ (9000d2d4 <_printf_i+0x238>)
9000d20a:	2778      	movs	r7, #120	@ 0x78
9000d20c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000d210:	6823      	ldr	r3, [r4, #0]
9000d212:	6831      	ldr	r1, [r6, #0]
9000d214:	061f      	lsls	r7, r3, #24
9000d216:	f851 5b04 	ldr.w	r5, [r1], #4
9000d21a:	d402      	bmi.n	9000d222 <_printf_i+0x186>
9000d21c:	065f      	lsls	r7, r3, #25
9000d21e:	bf48      	it	mi
9000d220:	b2ad      	uxthmi	r5, r5
9000d222:	6031      	str	r1, [r6, #0]
9000d224:	07d9      	lsls	r1, r3, #31
9000d226:	bf44      	itt	mi
9000d228:	f043 0320 	orrmi.w	r3, r3, #32
9000d22c:	6023      	strmi	r3, [r4, #0]
9000d22e:	b11d      	cbz	r5, 9000d238 <_printf_i+0x19c>
9000d230:	2310      	movs	r3, #16
9000d232:	e7ad      	b.n	9000d190 <_printf_i+0xf4>
9000d234:	4826      	ldr	r0, [pc, #152]	@ (9000d2d0 <_printf_i+0x234>)
9000d236:	e7e9      	b.n	9000d20c <_printf_i+0x170>
9000d238:	6823      	ldr	r3, [r4, #0]
9000d23a:	f023 0320 	bic.w	r3, r3, #32
9000d23e:	6023      	str	r3, [r4, #0]
9000d240:	e7f6      	b.n	9000d230 <_printf_i+0x194>
9000d242:	4616      	mov	r6, r2
9000d244:	e7bd      	b.n	9000d1c2 <_printf_i+0x126>
9000d246:	6833      	ldr	r3, [r6, #0]
9000d248:	6825      	ldr	r5, [r4, #0]
9000d24a:	6961      	ldr	r1, [r4, #20]
9000d24c:	1d18      	adds	r0, r3, #4
9000d24e:	6030      	str	r0, [r6, #0]
9000d250:	062e      	lsls	r6, r5, #24
9000d252:	681b      	ldr	r3, [r3, #0]
9000d254:	d501      	bpl.n	9000d25a <_printf_i+0x1be>
9000d256:	6019      	str	r1, [r3, #0]
9000d258:	e002      	b.n	9000d260 <_printf_i+0x1c4>
9000d25a:	0668      	lsls	r0, r5, #25
9000d25c:	d5fb      	bpl.n	9000d256 <_printf_i+0x1ba>
9000d25e:	8019      	strh	r1, [r3, #0]
9000d260:	2300      	movs	r3, #0
9000d262:	6123      	str	r3, [r4, #16]
9000d264:	4616      	mov	r6, r2
9000d266:	e7bc      	b.n	9000d1e2 <_printf_i+0x146>
9000d268:	6833      	ldr	r3, [r6, #0]
9000d26a:	1d1a      	adds	r2, r3, #4
9000d26c:	6032      	str	r2, [r6, #0]
9000d26e:	681e      	ldr	r6, [r3, #0]
9000d270:	6862      	ldr	r2, [r4, #4]
9000d272:	2100      	movs	r1, #0
9000d274:	4630      	mov	r0, r6
9000d276:	f7f3 f83b 	bl	900002f0 <memchr>
9000d27a:	b108      	cbz	r0, 9000d280 <_printf_i+0x1e4>
9000d27c:	1b80      	subs	r0, r0, r6
9000d27e:	6060      	str	r0, [r4, #4]
9000d280:	6863      	ldr	r3, [r4, #4]
9000d282:	6123      	str	r3, [r4, #16]
9000d284:	2300      	movs	r3, #0
9000d286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d28a:	e7aa      	b.n	9000d1e2 <_printf_i+0x146>
9000d28c:	6923      	ldr	r3, [r4, #16]
9000d28e:	4632      	mov	r2, r6
9000d290:	4649      	mov	r1, r9
9000d292:	4640      	mov	r0, r8
9000d294:	47d0      	blx	sl
9000d296:	3001      	adds	r0, #1
9000d298:	d0ad      	beq.n	9000d1f6 <_printf_i+0x15a>
9000d29a:	6823      	ldr	r3, [r4, #0]
9000d29c:	079b      	lsls	r3, r3, #30
9000d29e:	d413      	bmi.n	9000d2c8 <_printf_i+0x22c>
9000d2a0:	68e0      	ldr	r0, [r4, #12]
9000d2a2:	9b03      	ldr	r3, [sp, #12]
9000d2a4:	4298      	cmp	r0, r3
9000d2a6:	bfb8      	it	lt
9000d2a8:	4618      	movlt	r0, r3
9000d2aa:	e7a6      	b.n	9000d1fa <_printf_i+0x15e>
9000d2ac:	2301      	movs	r3, #1
9000d2ae:	4632      	mov	r2, r6
9000d2b0:	4649      	mov	r1, r9
9000d2b2:	4640      	mov	r0, r8
9000d2b4:	47d0      	blx	sl
9000d2b6:	3001      	adds	r0, #1
9000d2b8:	d09d      	beq.n	9000d1f6 <_printf_i+0x15a>
9000d2ba:	3501      	adds	r5, #1
9000d2bc:	68e3      	ldr	r3, [r4, #12]
9000d2be:	9903      	ldr	r1, [sp, #12]
9000d2c0:	1a5b      	subs	r3, r3, r1
9000d2c2:	42ab      	cmp	r3, r5
9000d2c4:	dcf2      	bgt.n	9000d2ac <_printf_i+0x210>
9000d2c6:	e7eb      	b.n	9000d2a0 <_printf_i+0x204>
9000d2c8:	2500      	movs	r5, #0
9000d2ca:	f104 0619 	add.w	r6, r4, #25
9000d2ce:	e7f5      	b.n	9000d2bc <_printf_i+0x220>
9000d2d0:	9000fc89 	.word	0x9000fc89
9000d2d4:	9000fc9a 	.word	0x9000fc9a

9000d2d8 <__sflush_r>:
9000d2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d2e0:	0716      	lsls	r6, r2, #28
9000d2e2:	4605      	mov	r5, r0
9000d2e4:	460c      	mov	r4, r1
9000d2e6:	d454      	bmi.n	9000d392 <__sflush_r+0xba>
9000d2e8:	684b      	ldr	r3, [r1, #4]
9000d2ea:	2b00      	cmp	r3, #0
9000d2ec:	dc02      	bgt.n	9000d2f4 <__sflush_r+0x1c>
9000d2ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d2f0:	2b00      	cmp	r3, #0
9000d2f2:	dd48      	ble.n	9000d386 <__sflush_r+0xae>
9000d2f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d2f6:	2e00      	cmp	r6, #0
9000d2f8:	d045      	beq.n	9000d386 <__sflush_r+0xae>
9000d2fa:	2300      	movs	r3, #0
9000d2fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d300:	682f      	ldr	r7, [r5, #0]
9000d302:	6a21      	ldr	r1, [r4, #32]
9000d304:	602b      	str	r3, [r5, #0]
9000d306:	d030      	beq.n	9000d36a <__sflush_r+0x92>
9000d308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d30a:	89a3      	ldrh	r3, [r4, #12]
9000d30c:	0759      	lsls	r1, r3, #29
9000d30e:	d505      	bpl.n	9000d31c <__sflush_r+0x44>
9000d310:	6863      	ldr	r3, [r4, #4]
9000d312:	1ad2      	subs	r2, r2, r3
9000d314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d316:	b10b      	cbz	r3, 9000d31c <__sflush_r+0x44>
9000d318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d31a:	1ad2      	subs	r2, r2, r3
9000d31c:	2300      	movs	r3, #0
9000d31e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d320:	6a21      	ldr	r1, [r4, #32]
9000d322:	4628      	mov	r0, r5
9000d324:	47b0      	blx	r6
9000d326:	1c43      	adds	r3, r0, #1
9000d328:	89a3      	ldrh	r3, [r4, #12]
9000d32a:	d106      	bne.n	9000d33a <__sflush_r+0x62>
9000d32c:	6829      	ldr	r1, [r5, #0]
9000d32e:	291d      	cmp	r1, #29
9000d330:	d82b      	bhi.n	9000d38a <__sflush_r+0xb2>
9000d332:	4a2a      	ldr	r2, [pc, #168]	@ (9000d3dc <__sflush_r+0x104>)
9000d334:	40ca      	lsrs	r2, r1
9000d336:	07d6      	lsls	r6, r2, #31
9000d338:	d527      	bpl.n	9000d38a <__sflush_r+0xb2>
9000d33a:	2200      	movs	r2, #0
9000d33c:	6062      	str	r2, [r4, #4]
9000d33e:	04d9      	lsls	r1, r3, #19
9000d340:	6922      	ldr	r2, [r4, #16]
9000d342:	6022      	str	r2, [r4, #0]
9000d344:	d504      	bpl.n	9000d350 <__sflush_r+0x78>
9000d346:	1c42      	adds	r2, r0, #1
9000d348:	d101      	bne.n	9000d34e <__sflush_r+0x76>
9000d34a:	682b      	ldr	r3, [r5, #0]
9000d34c:	b903      	cbnz	r3, 9000d350 <__sflush_r+0x78>
9000d34e:	6560      	str	r0, [r4, #84]	@ 0x54
9000d350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d352:	602f      	str	r7, [r5, #0]
9000d354:	b1b9      	cbz	r1, 9000d386 <__sflush_r+0xae>
9000d356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d35a:	4299      	cmp	r1, r3
9000d35c:	d002      	beq.n	9000d364 <__sflush_r+0x8c>
9000d35e:	4628      	mov	r0, r5
9000d360:	f7ff fb4a 	bl	9000c9f8 <_free_r>
9000d364:	2300      	movs	r3, #0
9000d366:	6363      	str	r3, [r4, #52]	@ 0x34
9000d368:	e00d      	b.n	9000d386 <__sflush_r+0xae>
9000d36a:	2301      	movs	r3, #1
9000d36c:	4628      	mov	r0, r5
9000d36e:	47b0      	blx	r6
9000d370:	4602      	mov	r2, r0
9000d372:	1c50      	adds	r0, r2, #1
9000d374:	d1c9      	bne.n	9000d30a <__sflush_r+0x32>
9000d376:	682b      	ldr	r3, [r5, #0]
9000d378:	2b00      	cmp	r3, #0
9000d37a:	d0c6      	beq.n	9000d30a <__sflush_r+0x32>
9000d37c:	2b1d      	cmp	r3, #29
9000d37e:	d001      	beq.n	9000d384 <__sflush_r+0xac>
9000d380:	2b16      	cmp	r3, #22
9000d382:	d11e      	bne.n	9000d3c2 <__sflush_r+0xea>
9000d384:	602f      	str	r7, [r5, #0]
9000d386:	2000      	movs	r0, #0
9000d388:	e022      	b.n	9000d3d0 <__sflush_r+0xf8>
9000d38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d38e:	b21b      	sxth	r3, r3
9000d390:	e01b      	b.n	9000d3ca <__sflush_r+0xf2>
9000d392:	690f      	ldr	r7, [r1, #16]
9000d394:	2f00      	cmp	r7, #0
9000d396:	d0f6      	beq.n	9000d386 <__sflush_r+0xae>
9000d398:	0793      	lsls	r3, r2, #30
9000d39a:	680e      	ldr	r6, [r1, #0]
9000d39c:	bf08      	it	eq
9000d39e:	694b      	ldreq	r3, [r1, #20]
9000d3a0:	600f      	str	r7, [r1, #0]
9000d3a2:	bf18      	it	ne
9000d3a4:	2300      	movne	r3, #0
9000d3a6:	eba6 0807 	sub.w	r8, r6, r7
9000d3aa:	608b      	str	r3, [r1, #8]
9000d3ac:	f1b8 0f00 	cmp.w	r8, #0
9000d3b0:	dde9      	ble.n	9000d386 <__sflush_r+0xae>
9000d3b2:	6a21      	ldr	r1, [r4, #32]
9000d3b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d3b6:	4643      	mov	r3, r8
9000d3b8:	463a      	mov	r2, r7
9000d3ba:	4628      	mov	r0, r5
9000d3bc:	47b0      	blx	r6
9000d3be:	2800      	cmp	r0, #0
9000d3c0:	dc08      	bgt.n	9000d3d4 <__sflush_r+0xfc>
9000d3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d3ca:	81a3      	strh	r3, [r4, #12]
9000d3cc:	f04f 30ff 	mov.w	r0, #4294967295
9000d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d3d4:	4407      	add	r7, r0
9000d3d6:	eba8 0800 	sub.w	r8, r8, r0
9000d3da:	e7e7      	b.n	9000d3ac <__sflush_r+0xd4>
9000d3dc:	20400001 	.word	0x20400001

9000d3e0 <_fflush_r>:
9000d3e0:	b538      	push	{r3, r4, r5, lr}
9000d3e2:	690b      	ldr	r3, [r1, #16]
9000d3e4:	4605      	mov	r5, r0
9000d3e6:	460c      	mov	r4, r1
9000d3e8:	b913      	cbnz	r3, 9000d3f0 <_fflush_r+0x10>
9000d3ea:	2500      	movs	r5, #0
9000d3ec:	4628      	mov	r0, r5
9000d3ee:	bd38      	pop	{r3, r4, r5, pc}
9000d3f0:	b118      	cbz	r0, 9000d3fa <_fflush_r+0x1a>
9000d3f2:	6a03      	ldr	r3, [r0, #32]
9000d3f4:	b90b      	cbnz	r3, 9000d3fa <_fflush_r+0x1a>
9000d3f6:	f7ff f8c5 	bl	9000c584 <__sinit>
9000d3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d3fe:	2b00      	cmp	r3, #0
9000d400:	d0f3      	beq.n	9000d3ea <_fflush_r+0xa>
9000d402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d404:	07d0      	lsls	r0, r2, #31
9000d406:	d404      	bmi.n	9000d412 <_fflush_r+0x32>
9000d408:	0599      	lsls	r1, r3, #22
9000d40a:	d402      	bmi.n	9000d412 <_fflush_r+0x32>
9000d40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d40e:	f7ff fae2 	bl	9000c9d6 <__retarget_lock_acquire_recursive>
9000d412:	4628      	mov	r0, r5
9000d414:	4621      	mov	r1, r4
9000d416:	f7ff ff5f 	bl	9000d2d8 <__sflush_r>
9000d41a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d41c:	07da      	lsls	r2, r3, #31
9000d41e:	4605      	mov	r5, r0
9000d420:	d4e4      	bmi.n	9000d3ec <_fflush_r+0xc>
9000d422:	89a3      	ldrh	r3, [r4, #12]
9000d424:	059b      	lsls	r3, r3, #22
9000d426:	d4e1      	bmi.n	9000d3ec <_fflush_r+0xc>
9000d428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d42a:	f7ff fad5 	bl	9000c9d8 <__retarget_lock_release_recursive>
9000d42e:	e7dd      	b.n	9000d3ec <_fflush_r+0xc>

9000d430 <__swhatbuf_r>:
9000d430:	b570      	push	{r4, r5, r6, lr}
9000d432:	460c      	mov	r4, r1
9000d434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d438:	2900      	cmp	r1, #0
9000d43a:	b096      	sub	sp, #88	@ 0x58
9000d43c:	4615      	mov	r5, r2
9000d43e:	461e      	mov	r6, r3
9000d440:	da0d      	bge.n	9000d45e <__swhatbuf_r+0x2e>
9000d442:	89a3      	ldrh	r3, [r4, #12]
9000d444:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000d448:	f04f 0100 	mov.w	r1, #0
9000d44c:	bf14      	ite	ne
9000d44e:	2340      	movne	r3, #64	@ 0x40
9000d450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000d454:	2000      	movs	r0, #0
9000d456:	6031      	str	r1, [r6, #0]
9000d458:	602b      	str	r3, [r5, #0]
9000d45a:	b016      	add	sp, #88	@ 0x58
9000d45c:	bd70      	pop	{r4, r5, r6, pc}
9000d45e:	466a      	mov	r2, sp
9000d460:	f000 f862 	bl	9000d528 <_fstat_r>
9000d464:	2800      	cmp	r0, #0
9000d466:	dbec      	blt.n	9000d442 <__swhatbuf_r+0x12>
9000d468:	9901      	ldr	r1, [sp, #4]
9000d46a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000d46e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000d472:	4259      	negs	r1, r3
9000d474:	4159      	adcs	r1, r3
9000d476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000d47a:	e7eb      	b.n	9000d454 <__swhatbuf_r+0x24>

9000d47c <__smakebuf_r>:
9000d47c:	898b      	ldrh	r3, [r1, #12]
9000d47e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000d480:	079d      	lsls	r5, r3, #30
9000d482:	4606      	mov	r6, r0
9000d484:	460c      	mov	r4, r1
9000d486:	d507      	bpl.n	9000d498 <__smakebuf_r+0x1c>
9000d488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000d48c:	6023      	str	r3, [r4, #0]
9000d48e:	6123      	str	r3, [r4, #16]
9000d490:	2301      	movs	r3, #1
9000d492:	6163      	str	r3, [r4, #20]
9000d494:	b003      	add	sp, #12
9000d496:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000d498:	ab01      	add	r3, sp, #4
9000d49a:	466a      	mov	r2, sp
9000d49c:	f7ff ffc8 	bl	9000d430 <__swhatbuf_r>
9000d4a0:	9f00      	ldr	r7, [sp, #0]
9000d4a2:	4605      	mov	r5, r0
9000d4a4:	4639      	mov	r1, r7
9000d4a6:	4630      	mov	r0, r6
9000d4a8:	f7fe ff54 	bl	9000c354 <_malloc_r>
9000d4ac:	b948      	cbnz	r0, 9000d4c2 <__smakebuf_r+0x46>
9000d4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d4b2:	059a      	lsls	r2, r3, #22
9000d4b4:	d4ee      	bmi.n	9000d494 <__smakebuf_r+0x18>
9000d4b6:	f023 0303 	bic.w	r3, r3, #3
9000d4ba:	f043 0302 	orr.w	r3, r3, #2
9000d4be:	81a3      	strh	r3, [r4, #12]
9000d4c0:	e7e2      	b.n	9000d488 <__smakebuf_r+0xc>
9000d4c2:	89a3      	ldrh	r3, [r4, #12]
9000d4c4:	6020      	str	r0, [r4, #0]
9000d4c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d4ca:	81a3      	strh	r3, [r4, #12]
9000d4cc:	9b01      	ldr	r3, [sp, #4]
9000d4ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000d4d2:	b15b      	cbz	r3, 9000d4ec <__smakebuf_r+0x70>
9000d4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d4d8:	4630      	mov	r0, r6
9000d4da:	f000 f837 	bl	9000d54c <_isatty_r>
9000d4de:	b128      	cbz	r0, 9000d4ec <__smakebuf_r+0x70>
9000d4e0:	89a3      	ldrh	r3, [r4, #12]
9000d4e2:	f023 0303 	bic.w	r3, r3, #3
9000d4e6:	f043 0301 	orr.w	r3, r3, #1
9000d4ea:	81a3      	strh	r3, [r4, #12]
9000d4ec:	89a3      	ldrh	r3, [r4, #12]
9000d4ee:	431d      	orrs	r5, r3
9000d4f0:	81a5      	strh	r5, [r4, #12]
9000d4f2:	e7cf      	b.n	9000d494 <__smakebuf_r+0x18>

9000d4f4 <memmove>:
9000d4f4:	4288      	cmp	r0, r1
9000d4f6:	b510      	push	{r4, lr}
9000d4f8:	eb01 0402 	add.w	r4, r1, r2
9000d4fc:	d902      	bls.n	9000d504 <memmove+0x10>
9000d4fe:	4284      	cmp	r4, r0
9000d500:	4623      	mov	r3, r4
9000d502:	d807      	bhi.n	9000d514 <memmove+0x20>
9000d504:	1e43      	subs	r3, r0, #1
9000d506:	42a1      	cmp	r1, r4
9000d508:	d008      	beq.n	9000d51c <memmove+0x28>
9000d50a:	f811 2b01 	ldrb.w	r2, [r1], #1
9000d50e:	f803 2f01 	strb.w	r2, [r3, #1]!
9000d512:	e7f8      	b.n	9000d506 <memmove+0x12>
9000d514:	4402      	add	r2, r0
9000d516:	4601      	mov	r1, r0
9000d518:	428a      	cmp	r2, r1
9000d51a:	d100      	bne.n	9000d51e <memmove+0x2a>
9000d51c:	bd10      	pop	{r4, pc}
9000d51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000d522:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000d526:	e7f7      	b.n	9000d518 <memmove+0x24>

9000d528 <_fstat_r>:
9000d528:	b538      	push	{r3, r4, r5, lr}
9000d52a:	4d07      	ldr	r5, [pc, #28]	@ (9000d548 <_fstat_r+0x20>)
9000d52c:	2300      	movs	r3, #0
9000d52e:	4604      	mov	r4, r0
9000d530:	4608      	mov	r0, r1
9000d532:	4611      	mov	r1, r2
9000d534:	602b      	str	r3, [r5, #0]
9000d536:	f7f3 fdca 	bl	900010ce <_fstat>
9000d53a:	1c43      	adds	r3, r0, #1
9000d53c:	d102      	bne.n	9000d544 <_fstat_r+0x1c>
9000d53e:	682b      	ldr	r3, [r5, #0]
9000d540:	b103      	cbz	r3, 9000d544 <_fstat_r+0x1c>
9000d542:	6023      	str	r3, [r4, #0]
9000d544:	bd38      	pop	{r3, r4, r5, pc}
9000d546:	bf00      	nop
9000d548:	20001498 	.word	0x20001498

9000d54c <_isatty_r>:
9000d54c:	b538      	push	{r3, r4, r5, lr}
9000d54e:	4d06      	ldr	r5, [pc, #24]	@ (9000d568 <_isatty_r+0x1c>)
9000d550:	2300      	movs	r3, #0
9000d552:	4604      	mov	r4, r0
9000d554:	4608      	mov	r0, r1
9000d556:	602b      	str	r3, [r5, #0]
9000d558:	f7f3 fdc9 	bl	900010ee <_isatty>
9000d55c:	1c43      	adds	r3, r0, #1
9000d55e:	d102      	bne.n	9000d566 <_isatty_r+0x1a>
9000d560:	682b      	ldr	r3, [r5, #0]
9000d562:	b103      	cbz	r3, 9000d566 <_isatty_r+0x1a>
9000d564:	6023      	str	r3, [r4, #0]
9000d566:	bd38      	pop	{r3, r4, r5, pc}
9000d568:	20001498 	.word	0x20001498

9000d56c <_realloc_r>:
9000d56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d570:	4607      	mov	r7, r0
9000d572:	4614      	mov	r4, r2
9000d574:	460d      	mov	r5, r1
9000d576:	b921      	cbnz	r1, 9000d582 <_realloc_r+0x16>
9000d578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d57c:	4611      	mov	r1, r2
9000d57e:	f7fe bee9 	b.w	9000c354 <_malloc_r>
9000d582:	b92a      	cbnz	r2, 9000d590 <_realloc_r+0x24>
9000d584:	f7ff fa38 	bl	9000c9f8 <_free_r>
9000d588:	4625      	mov	r5, r4
9000d58a:	4628      	mov	r0, r5
9000d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d590:	f000 f81a 	bl	9000d5c8 <_malloc_usable_size_r>
9000d594:	4284      	cmp	r4, r0
9000d596:	4606      	mov	r6, r0
9000d598:	d802      	bhi.n	9000d5a0 <_realloc_r+0x34>
9000d59a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000d59e:	d8f4      	bhi.n	9000d58a <_realloc_r+0x1e>
9000d5a0:	4621      	mov	r1, r4
9000d5a2:	4638      	mov	r0, r7
9000d5a4:	f7fe fed6 	bl	9000c354 <_malloc_r>
9000d5a8:	4680      	mov	r8, r0
9000d5aa:	b908      	cbnz	r0, 9000d5b0 <_realloc_r+0x44>
9000d5ac:	4645      	mov	r5, r8
9000d5ae:	e7ec      	b.n	9000d58a <_realloc_r+0x1e>
9000d5b0:	42b4      	cmp	r4, r6
9000d5b2:	4622      	mov	r2, r4
9000d5b4:	4629      	mov	r1, r5
9000d5b6:	bf28      	it	cs
9000d5b8:	4632      	movcs	r2, r6
9000d5ba:	f7ff fa0e 	bl	9000c9da <memcpy>
9000d5be:	4629      	mov	r1, r5
9000d5c0:	4638      	mov	r0, r7
9000d5c2:	f7ff fa19 	bl	9000c9f8 <_free_r>
9000d5c6:	e7f1      	b.n	9000d5ac <_realloc_r+0x40>

9000d5c8 <_malloc_usable_size_r>:
9000d5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d5cc:	1f18      	subs	r0, r3, #4
9000d5ce:	2b00      	cmp	r3, #0
9000d5d0:	bfbc      	itt	lt
9000d5d2:	580b      	ldrlt	r3, [r1, r0]
9000d5d4:	18c0      	addlt	r0, r0, r3
9000d5d6:	4770      	bx	lr

9000d5d8 <_init>:
9000d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d5da:	bf00      	nop
9000d5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d5de:	bc08      	pop	{r3}
9000d5e0:	469e      	mov	lr, r3
9000d5e2:	4770      	bx	lr

9000d5e4 <_fini>:
9000d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d5e6:	bf00      	nop
9000d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d5ea:	bc08      	pop	{r3}
9000d5ec:	469e      	mov	lr, r3
9000d5ee:	4770      	bx	lr
