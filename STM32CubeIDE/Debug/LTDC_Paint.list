
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfc8  90000298  90000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024bc  9000d260  9000d260  0000e260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000f71c  9000f71c  000110ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000f71c  9000f71c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000f724  9000f724  000110ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000f724  9000f724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000f728  9000f728  00010728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  9000f72c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  200000b0  9000f7d8  000110b0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200014e8  9000f7d8  000114e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110ac  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002b6c5  00000000  00000000  000110da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000068  00000000  00000000  0003c79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002b6f2  00000000  00000000  0003c807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005307  00000000  00000000  00067ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002148  00000000  00000000  0006d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018dbaa  00000000  00000000  0006f348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000019e2  00000000  00000000  001fcef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004077e  00000000  00000000  001fe8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0023f052  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000095c4  00000000  00000000  0023f098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

90000298 <__do_global_dtors_aux>:
90000298:	b510      	push	{r4, lr}
9000029a:	4c05      	ldr	r4, [pc, #20]	@ (900002b0 <__do_global_dtors_aux+0x18>)
9000029c:	7823      	ldrb	r3, [r4, #0]
9000029e:	b933      	cbnz	r3, 900002ae <__do_global_dtors_aux+0x16>
900002a0:	4b04      	ldr	r3, [pc, #16]	@ (900002b4 <__do_global_dtors_aux+0x1c>)
900002a2:	b113      	cbz	r3, 900002aa <__do_global_dtors_aux+0x12>
900002a4:	4804      	ldr	r0, [pc, #16]	@ (900002b8 <__do_global_dtors_aux+0x20>)
900002a6:	f3af 8000 	nop.w
900002aa:	2301      	movs	r3, #1
900002ac:	7023      	strb	r3, [r4, #0]
900002ae:	bd10      	pop	{r4, pc}
900002b0:	200000b0 	.word	0x200000b0
900002b4:	00000000 	.word	0x00000000
900002b8:	9000d248 	.word	0x9000d248

900002bc <frame_dummy>:
900002bc:	b508      	push	{r3, lr}
900002be:	4b03      	ldr	r3, [pc, #12]	@ (900002cc <frame_dummy+0x10>)
900002c0:	b11b      	cbz	r3, 900002ca <frame_dummy+0xe>
900002c2:	4903      	ldr	r1, [pc, #12]	@ (900002d0 <frame_dummy+0x14>)
900002c4:	4803      	ldr	r0, [pc, #12]	@ (900002d4 <frame_dummy+0x18>)
900002c6:	f3af 8000 	nop.w
900002ca:	bd08      	pop	{r3, pc}
900002cc:	00000000 	.word	0x00000000
900002d0:	200000b4 	.word	0x200000b4
900002d4:	9000d248 	.word	0x9000d248

900002d8 <__aeabi_uldivmod>:
900002d8:	b953      	cbnz	r3, 900002f0 <__aeabi_uldivmod+0x18>
900002da:	b94a      	cbnz	r2, 900002f0 <__aeabi_uldivmod+0x18>
900002dc:	2900      	cmp	r1, #0
900002de:	bf08      	it	eq
900002e0:	2800      	cmpeq	r0, #0
900002e2:	bf1c      	itt	ne
900002e4:	f04f 31ff 	movne.w	r1, #4294967295
900002e8:	f04f 30ff 	movne.w	r0, #4294967295
900002ec:	f000 b988 	b.w	90000600 <__aeabi_idiv0>
900002f0:	f1ad 0c08 	sub.w	ip, sp, #8
900002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002f8:	f000 f806 	bl	90000308 <__udivmoddi4>
900002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
90000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000304:	b004      	add	sp, #16
90000306:	4770      	bx	lr

90000308 <__udivmoddi4>:
90000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000030c:	9d08      	ldr	r5, [sp, #32]
9000030e:	468e      	mov	lr, r1
90000310:	4604      	mov	r4, r0
90000312:	4688      	mov	r8, r1
90000314:	2b00      	cmp	r3, #0
90000316:	d14a      	bne.n	900003ae <__udivmoddi4+0xa6>
90000318:	428a      	cmp	r2, r1
9000031a:	4617      	mov	r7, r2
9000031c:	d962      	bls.n	900003e4 <__udivmoddi4+0xdc>
9000031e:	fab2 f682 	clz	r6, r2
90000322:	b14e      	cbz	r6, 90000338 <__udivmoddi4+0x30>
90000324:	f1c6 0320 	rsb	r3, r6, #32
90000328:	fa01 f806 	lsl.w	r8, r1, r6
9000032c:	fa20 f303 	lsr.w	r3, r0, r3
90000330:	40b7      	lsls	r7, r6
90000332:	ea43 0808 	orr.w	r8, r3, r8
90000336:	40b4      	lsls	r4, r6
90000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
9000033c:	fa1f fc87 	uxth.w	ip, r7
90000340:	fbb8 f1fe 	udiv	r1, r8, lr
90000344:	0c23      	lsrs	r3, r4, #16
90000346:	fb0e 8811 	mls	r8, lr, r1, r8
9000034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
9000034e:	fb01 f20c 	mul.w	r2, r1, ip
90000352:	429a      	cmp	r2, r3
90000354:	d909      	bls.n	9000036a <__udivmoddi4+0x62>
90000356:	18fb      	adds	r3, r7, r3
90000358:	f101 30ff 	add.w	r0, r1, #4294967295
9000035c:	f080 80ea 	bcs.w	90000534 <__udivmoddi4+0x22c>
90000360:	429a      	cmp	r2, r3
90000362:	f240 80e7 	bls.w	90000534 <__udivmoddi4+0x22c>
90000366:	3902      	subs	r1, #2
90000368:	443b      	add	r3, r7
9000036a:	1a9a      	subs	r2, r3, r2
9000036c:	b2a3      	uxth	r3, r4
9000036e:	fbb2 f0fe 	udiv	r0, r2, lr
90000372:	fb0e 2210 	mls	r2, lr, r0, r2
90000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000037a:	fb00 fc0c 	mul.w	ip, r0, ip
9000037e:	459c      	cmp	ip, r3
90000380:	d909      	bls.n	90000396 <__udivmoddi4+0x8e>
90000382:	18fb      	adds	r3, r7, r3
90000384:	f100 32ff 	add.w	r2, r0, #4294967295
90000388:	f080 80d6 	bcs.w	90000538 <__udivmoddi4+0x230>
9000038c:	459c      	cmp	ip, r3
9000038e:	f240 80d3 	bls.w	90000538 <__udivmoddi4+0x230>
90000392:	443b      	add	r3, r7
90000394:	3802      	subs	r0, #2
90000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
9000039a:	eba3 030c 	sub.w	r3, r3, ip
9000039e:	2100      	movs	r1, #0
900003a0:	b11d      	cbz	r5, 900003aa <__udivmoddi4+0xa2>
900003a2:	40f3      	lsrs	r3, r6
900003a4:	2200      	movs	r2, #0
900003a6:	e9c5 3200 	strd	r3, r2, [r5]
900003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003ae:	428b      	cmp	r3, r1
900003b0:	d905      	bls.n	900003be <__udivmoddi4+0xb6>
900003b2:	b10d      	cbz	r5, 900003b8 <__udivmoddi4+0xb0>
900003b4:	e9c5 0100 	strd	r0, r1, [r5]
900003b8:	2100      	movs	r1, #0
900003ba:	4608      	mov	r0, r1
900003bc:	e7f5      	b.n	900003aa <__udivmoddi4+0xa2>
900003be:	fab3 f183 	clz	r1, r3
900003c2:	2900      	cmp	r1, #0
900003c4:	d146      	bne.n	90000454 <__udivmoddi4+0x14c>
900003c6:	4573      	cmp	r3, lr
900003c8:	d302      	bcc.n	900003d0 <__udivmoddi4+0xc8>
900003ca:	4282      	cmp	r2, r0
900003cc:	f200 8105 	bhi.w	900005da <__udivmoddi4+0x2d2>
900003d0:	1a84      	subs	r4, r0, r2
900003d2:	eb6e 0203 	sbc.w	r2, lr, r3
900003d6:	2001      	movs	r0, #1
900003d8:	4690      	mov	r8, r2
900003da:	2d00      	cmp	r5, #0
900003dc:	d0e5      	beq.n	900003aa <__udivmoddi4+0xa2>
900003de:	e9c5 4800 	strd	r4, r8, [r5]
900003e2:	e7e2      	b.n	900003aa <__udivmoddi4+0xa2>
900003e4:	2a00      	cmp	r2, #0
900003e6:	f000 8090 	beq.w	9000050a <__udivmoddi4+0x202>
900003ea:	fab2 f682 	clz	r6, r2
900003ee:	2e00      	cmp	r6, #0
900003f0:	f040 80a4 	bne.w	9000053c <__udivmoddi4+0x234>
900003f4:	1a8a      	subs	r2, r1, r2
900003f6:	0c03      	lsrs	r3, r0, #16
900003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003fc:	b280      	uxth	r0, r0
900003fe:	b2bc      	uxth	r4, r7
90000400:	2101      	movs	r1, #1
90000402:	fbb2 fcfe 	udiv	ip, r2, lr
90000406:	fb0e 221c 	mls	r2, lr, ip, r2
9000040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000040e:	fb04 f20c 	mul.w	r2, r4, ip
90000412:	429a      	cmp	r2, r3
90000414:	d907      	bls.n	90000426 <__udivmoddi4+0x11e>
90000416:	18fb      	adds	r3, r7, r3
90000418:	f10c 38ff 	add.w	r8, ip, #4294967295
9000041c:	d202      	bcs.n	90000424 <__udivmoddi4+0x11c>
9000041e:	429a      	cmp	r2, r3
90000420:	f200 80e0 	bhi.w	900005e4 <__udivmoddi4+0x2dc>
90000424:	46c4      	mov	ip, r8
90000426:	1a9b      	subs	r3, r3, r2
90000428:	fbb3 f2fe 	udiv	r2, r3, lr
9000042c:	fb0e 3312 	mls	r3, lr, r2, r3
90000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
90000434:	fb02 f404 	mul.w	r4, r2, r4
90000438:	429c      	cmp	r4, r3
9000043a:	d907      	bls.n	9000044c <__udivmoddi4+0x144>
9000043c:	18fb      	adds	r3, r7, r3
9000043e:	f102 30ff 	add.w	r0, r2, #4294967295
90000442:	d202      	bcs.n	9000044a <__udivmoddi4+0x142>
90000444:	429c      	cmp	r4, r3
90000446:	f200 80ca 	bhi.w	900005de <__udivmoddi4+0x2d6>
9000044a:	4602      	mov	r2, r0
9000044c:	1b1b      	subs	r3, r3, r4
9000044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
90000452:	e7a5      	b.n	900003a0 <__udivmoddi4+0x98>
90000454:	f1c1 0620 	rsb	r6, r1, #32
90000458:	408b      	lsls	r3, r1
9000045a:	fa22 f706 	lsr.w	r7, r2, r6
9000045e:	431f      	orrs	r7, r3
90000460:	fa0e f401 	lsl.w	r4, lr, r1
90000464:	fa20 f306 	lsr.w	r3, r0, r6
90000468:	fa2e fe06 	lsr.w	lr, lr, r6
9000046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000470:	4323      	orrs	r3, r4
90000472:	fa00 f801 	lsl.w	r8, r0, r1
90000476:	fa1f fc87 	uxth.w	ip, r7
9000047a:	fbbe f0f9 	udiv	r0, lr, r9
9000047e:	0c1c      	lsrs	r4, r3, #16
90000480:	fb09 ee10 	mls	lr, r9, r0, lr
90000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000488:	fb00 fe0c 	mul.w	lr, r0, ip
9000048c:	45a6      	cmp	lr, r4
9000048e:	fa02 f201 	lsl.w	r2, r2, r1
90000492:	d909      	bls.n	900004a8 <__udivmoddi4+0x1a0>
90000494:	193c      	adds	r4, r7, r4
90000496:	f100 3aff 	add.w	sl, r0, #4294967295
9000049a:	f080 809c 	bcs.w	900005d6 <__udivmoddi4+0x2ce>
9000049e:	45a6      	cmp	lr, r4
900004a0:	f240 8099 	bls.w	900005d6 <__udivmoddi4+0x2ce>
900004a4:	3802      	subs	r0, #2
900004a6:	443c      	add	r4, r7
900004a8:	eba4 040e 	sub.w	r4, r4, lr
900004ac:	fa1f fe83 	uxth.w	lr, r3
900004b0:	fbb4 f3f9 	udiv	r3, r4, r9
900004b4:	fb09 4413 	mls	r4, r9, r3, r4
900004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
900004bc:	fb03 fc0c 	mul.w	ip, r3, ip
900004c0:	45a4      	cmp	ip, r4
900004c2:	d908      	bls.n	900004d6 <__udivmoddi4+0x1ce>
900004c4:	193c      	adds	r4, r7, r4
900004c6:	f103 3eff 	add.w	lr, r3, #4294967295
900004ca:	f080 8082 	bcs.w	900005d2 <__udivmoddi4+0x2ca>
900004ce:	45a4      	cmp	ip, r4
900004d0:	d97f      	bls.n	900005d2 <__udivmoddi4+0x2ca>
900004d2:	3b02      	subs	r3, #2
900004d4:	443c      	add	r4, r7
900004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
900004da:	eba4 040c 	sub.w	r4, r4, ip
900004de:	fba0 ec02 	umull	lr, ip, r0, r2
900004e2:	4564      	cmp	r4, ip
900004e4:	4673      	mov	r3, lr
900004e6:	46e1      	mov	r9, ip
900004e8:	d362      	bcc.n	900005b0 <__udivmoddi4+0x2a8>
900004ea:	d05f      	beq.n	900005ac <__udivmoddi4+0x2a4>
900004ec:	b15d      	cbz	r5, 90000506 <__udivmoddi4+0x1fe>
900004ee:	ebb8 0203 	subs.w	r2, r8, r3
900004f2:	eb64 0409 	sbc.w	r4, r4, r9
900004f6:	fa04 f606 	lsl.w	r6, r4, r6
900004fa:	fa22 f301 	lsr.w	r3, r2, r1
900004fe:	431e      	orrs	r6, r3
90000500:	40cc      	lsrs	r4, r1
90000502:	e9c5 6400 	strd	r6, r4, [r5]
90000506:	2100      	movs	r1, #0
90000508:	e74f      	b.n	900003aa <__udivmoddi4+0xa2>
9000050a:	fbb1 fcf2 	udiv	ip, r1, r2
9000050e:	0c01      	lsrs	r1, r0, #16
90000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
90000514:	b280      	uxth	r0, r0
90000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
9000051a:	463b      	mov	r3, r7
9000051c:	4638      	mov	r0, r7
9000051e:	463c      	mov	r4, r7
90000520:	46b8      	mov	r8, r7
90000522:	46be      	mov	lr, r7
90000524:	2620      	movs	r6, #32
90000526:	fbb1 f1f7 	udiv	r1, r1, r7
9000052a:	eba2 0208 	sub.w	r2, r2, r8
9000052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
90000532:	e766      	b.n	90000402 <__udivmoddi4+0xfa>
90000534:	4601      	mov	r1, r0
90000536:	e718      	b.n	9000036a <__udivmoddi4+0x62>
90000538:	4610      	mov	r0, r2
9000053a:	e72c      	b.n	90000396 <__udivmoddi4+0x8e>
9000053c:	f1c6 0220 	rsb	r2, r6, #32
90000540:	fa2e f302 	lsr.w	r3, lr, r2
90000544:	40b7      	lsls	r7, r6
90000546:	40b1      	lsls	r1, r6
90000548:	fa20 f202 	lsr.w	r2, r0, r2
9000054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000550:	430a      	orrs	r2, r1
90000552:	fbb3 f8fe 	udiv	r8, r3, lr
90000556:	b2bc      	uxth	r4, r7
90000558:	fb0e 3318 	mls	r3, lr, r8, r3
9000055c:	0c11      	lsrs	r1, r2, #16
9000055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000562:	fb08 f904 	mul.w	r9, r8, r4
90000566:	40b0      	lsls	r0, r6
90000568:	4589      	cmp	r9, r1
9000056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
9000056e:	b280      	uxth	r0, r0
90000570:	d93e      	bls.n	900005f0 <__udivmoddi4+0x2e8>
90000572:	1879      	adds	r1, r7, r1
90000574:	f108 3cff 	add.w	ip, r8, #4294967295
90000578:	d201      	bcs.n	9000057e <__udivmoddi4+0x276>
9000057a:	4589      	cmp	r9, r1
9000057c:	d81f      	bhi.n	900005be <__udivmoddi4+0x2b6>
9000057e:	eba1 0109 	sub.w	r1, r1, r9
90000582:	fbb1 f9fe 	udiv	r9, r1, lr
90000586:	fb09 f804 	mul.w	r8, r9, r4
9000058a:	fb0e 1119 	mls	r1, lr, r9, r1
9000058e:	b292      	uxth	r2, r2
90000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90000594:	4542      	cmp	r2, r8
90000596:	d229      	bcs.n	900005ec <__udivmoddi4+0x2e4>
90000598:	18ba      	adds	r2, r7, r2
9000059a:	f109 31ff 	add.w	r1, r9, #4294967295
9000059e:	d2c4      	bcs.n	9000052a <__udivmoddi4+0x222>
900005a0:	4542      	cmp	r2, r8
900005a2:	d2c2      	bcs.n	9000052a <__udivmoddi4+0x222>
900005a4:	f1a9 0102 	sub.w	r1, r9, #2
900005a8:	443a      	add	r2, r7
900005aa:	e7be      	b.n	9000052a <__udivmoddi4+0x222>
900005ac:	45f0      	cmp	r8, lr
900005ae:	d29d      	bcs.n	900004ec <__udivmoddi4+0x1e4>
900005b0:	ebbe 0302 	subs.w	r3, lr, r2
900005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
900005b8:	3801      	subs	r0, #1
900005ba:	46e1      	mov	r9, ip
900005bc:	e796      	b.n	900004ec <__udivmoddi4+0x1e4>
900005be:	eba7 0909 	sub.w	r9, r7, r9
900005c2:	4449      	add	r1, r9
900005c4:	f1a8 0c02 	sub.w	ip, r8, #2
900005c8:	fbb1 f9fe 	udiv	r9, r1, lr
900005cc:	fb09 f804 	mul.w	r8, r9, r4
900005d0:	e7db      	b.n	9000058a <__udivmoddi4+0x282>
900005d2:	4673      	mov	r3, lr
900005d4:	e77f      	b.n	900004d6 <__udivmoddi4+0x1ce>
900005d6:	4650      	mov	r0, sl
900005d8:	e766      	b.n	900004a8 <__udivmoddi4+0x1a0>
900005da:	4608      	mov	r0, r1
900005dc:	e6fd      	b.n	900003da <__udivmoddi4+0xd2>
900005de:	443b      	add	r3, r7
900005e0:	3a02      	subs	r2, #2
900005e2:	e733      	b.n	9000044c <__udivmoddi4+0x144>
900005e4:	f1ac 0c02 	sub.w	ip, ip, #2
900005e8:	443b      	add	r3, r7
900005ea:	e71c      	b.n	90000426 <__udivmoddi4+0x11e>
900005ec:	4649      	mov	r1, r9
900005ee:	e79c      	b.n	9000052a <__udivmoddi4+0x222>
900005f0:	eba1 0109 	sub.w	r1, r1, r9
900005f4:	46c4      	mov	ip, r8
900005f6:	fbb1 f9fe 	udiv	r9, r1, lr
900005fa:	fb09 f804 	mul.w	r8, r9, r4
900005fe:	e7c4      	b.n	9000058a <__udivmoddi4+0x282>

90000600 <__aeabi_idiv0>:
90000600:	4770      	bx	lr
90000602:	bf00      	nop

90000604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000604:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000640 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
90000608:	f003 f810 	bl	9000362c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
9000060c:	f002 ffac 	bl	90003568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000610:	480c      	ldr	r0, [pc, #48]	@ (90000644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90000612:	490d      	ldr	r1, [pc, #52]	@ (90000648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90000614:	4a0d      	ldr	r2, [pc, #52]	@ (9000064c <LoopFillZerobss+0x1a>)
  movs r3, #0
90000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000618:	e002      	b.n	90000620 <LoopCopyDataInit>

9000061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
9000061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
9000061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
9000061e:	3304      	adds	r3, #4

90000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000624:	d3f9      	bcc.n	9000061a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000626:	4a0a      	ldr	r2, [pc, #40]	@ (90000650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000628:	4c0a      	ldr	r4, [pc, #40]	@ (90000654 <LoopFillZerobss+0x22>)
  movs r3, #0
9000062a:	2300      	movs	r3, #0
  b LoopFillZerobss
9000062c:	e001      	b.n	90000632 <LoopFillZerobss>

9000062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
9000062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000630:	3204      	adds	r2, #4

90000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000634:	d3fb      	bcc.n	9000062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000636:	f00c fc65 	bl	9000cf04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000063a:	f000 f891 	bl	90000760 <main>
  bx  lr
9000063e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000648:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
9000064c:	9000f72c 	.word	0x9000f72c
  ldr r2, =_sbss
90000650:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
90000654:	200014e8 	.word	0x200014e8

90000658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000658:	e7fe      	b.n	90000658 <ADC3_IRQHandler>
	...

9000065c <__io_putchar>:
static void CPU_CACHE_Disable(void);
static void MPU_Config(void);
static void GPIO_Init(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
9000065c:	b580      	push	{r7, lr}
9000065e:	b082      	sub	sp, #8
90000660:	af00      	add	r7, sp, #0
90000662:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
90000664:	1d39      	adds	r1, r7, #4
90000666:	f04f 33ff 	mov.w	r3, #4294967295
9000066a:	2201      	movs	r2, #1
9000066c:	4806      	ldr	r0, [pc, #24]	@ (90000688 <__io_putchar+0x2c>)
9000066e:	f00a f807 	bl	9000a680 <HAL_UART_Transmit>
90000672:	4603      	mov	r3, r0
90000674:	2b00      	cmp	r3, #0
90000676:	d002      	beq.n	9000067e <__io_putchar+0x22>
    return -1;
90000678:	f04f 33ff 	mov.w	r3, #4294967295
9000067c:	e000      	b.n	90000680 <__io_putchar+0x24>
  }
  return ch;
9000067e:	687b      	ldr	r3, [r7, #4]
}
90000680:	4618      	mov	r0, r3
90000682:	3708      	adds	r7, #8
90000684:	46bd      	mov	sp, r7
90000686:	bd80      	pop	{r7, pc}
90000688:	200000d8 	.word	0x200000d8

9000068c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
9000068c:	b580      	push	{r7, lr}
9000068e:	b0ba      	sub	sp, #232	@ 0xe8
90000690:	af00      	add	r7, sp, #0
90000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000694:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000698:	2200      	movs	r2, #0
9000069a:	601a      	str	r2, [r3, #0]
9000069c:	605a      	str	r2, [r3, #4]
9000069e:	609a      	str	r2, [r3, #8]
900006a0:	60da      	str	r2, [r3, #12]
900006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900006a4:	f107 0310 	add.w	r3, r7, #16
900006a8:	22c0      	movs	r2, #192	@ 0xc0
900006aa:	2100      	movs	r1, #0
900006ac:	4618      	mov	r0, r3
900006ae:	f00c fbc5 	bl	9000ce3c <memset>
  if(huart->Instance==USART3)
900006b2:	687b      	ldr	r3, [r7, #4]
900006b4:	681b      	ldr	r3, [r3, #0]
900006b6:	4a27      	ldr	r2, [pc, #156]	@ (90000754 <HAL_UART_MspInit+0xc8>)
900006b8:	4293      	cmp	r3, r2
900006ba:	d146      	bne.n	9000074a <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
900006bc:	f04f 0202 	mov.w	r2, #2
900006c0:	f04f 0300 	mov.w	r3, #0
900006c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
900006c8:	2300      	movs	r3, #0
900006ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900006ce:	f107 0310 	add.w	r3, r7, #16
900006d2:	4618      	mov	r0, r3
900006d4:	f007 ff4e 	bl	90008574 <HAL_RCCEx_PeriphCLKConfig>
900006d8:	4603      	mov	r3, r0
900006da:	2b00      	cmp	r3, #0
900006dc:	d001      	beq.n	900006e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
900006de:	f000 f9b3 	bl	90000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
900006e2:	4b1d      	ldr	r3, [pc, #116]	@ (90000758 <HAL_UART_MspInit+0xcc>)
900006e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
900006e8:	4a1b      	ldr	r2, [pc, #108]	@ (90000758 <HAL_UART_MspInit+0xcc>)
900006ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
900006ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
900006f2:	4b19      	ldr	r3, [pc, #100]	@ (90000758 <HAL_UART_MspInit+0xcc>)
900006f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
900006f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
900006fc:	60fb      	str	r3, [r7, #12]
900006fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000700:	4b15      	ldr	r3, [pc, #84]	@ (90000758 <HAL_UART_MspInit+0xcc>)
90000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000706:	4a14      	ldr	r2, [pc, #80]	@ (90000758 <HAL_UART_MspInit+0xcc>)
90000708:	f043 0302 	orr.w	r3, r3, #2
9000070c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000710:	4b11      	ldr	r3, [pc, #68]	@ (90000758 <HAL_UART_MspInit+0xcc>)
90000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000716:	f003 0302 	and.w	r3, r3, #2
9000071a:	60bb      	str	r3, [r7, #8]
9000071c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
9000071e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000726:	2302      	movs	r3, #2
90000728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000072c:	2300      	movs	r3, #0
9000072e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000732:	2300      	movs	r3, #0
90000734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000738:	2307      	movs	r3, #7
9000073a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
9000073e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000742:	4619      	mov	r1, r3
90000744:	4805      	ldr	r0, [pc, #20]	@ (9000075c <HAL_UART_MspInit+0xd0>)
90000746:	f003 fc9d 	bl	90004084 <HAL_GPIO_Init>
  }

}
9000074a:	bf00      	nop
9000074c:	37e8      	adds	r7, #232	@ 0xe8
9000074e:	46bd      	mov	sp, r7
90000750:	bd80      	pop	{r7, pc}
90000752:	bf00      	nop
90000754:	40004800 	.word	0x40004800
90000758:	58024400 	.word	0x58024400
9000075c:	58020400 	.word	0x58020400

90000760 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000760:	b580      	push	{r7, lr}
90000762:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000764:	f000 fb0a 	bl	90000d7c <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
90000768:	f000 fa76 	bl	90000c58 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
9000076c:	f002 ff76 	bl	9000365c <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000770:	f000 f96e 	bl	90000a50 <SystemClock_Config>

  GPIO_Init();
90000774:	f000 f8c2 	bl	900008fc <GPIO_Init>
  MX_USART3_UART_Init();
90000778:	f000 f874 	bl	90000864 <MX_USART3_UART_Init>

 printf("Hi there :)!\r\n");
9000077c:	481c      	ldr	r0, [pc, #112]	@ (900007f0 <main+0x90>)
9000077e:	f00c fa7d 	bl	9000cc7c <puts>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
90000782:	2000      	movs	r0, #0
90000784:	f001 f8d2 	bl	9000192c <BSP_LED_Init>
  
  /*##-1- LCD Initialization #################################################*/ 
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);  
90000788:	2101      	movs	r1, #1
9000078a:	2000      	movs	r0, #0
9000078c:	f001 fd82 	bl	90002294 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000790:	4818      	ldr	r0, [pc, #96]	@ (900007f4 <main+0x94>)
90000792:	f00b fd53 	bl	9000c23c <UTIL_LCD_SetFuncDriver>
 
  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90000796:	2000      	movs	r0, #0
90000798:	f00b fda6 	bl	9000c2e8 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000079c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900007a0:	f00b fe18 	bl	9000c3d4 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
900007a4:	4914      	ldr	r1, [pc, #80]	@ (900007f8 <main+0x98>)
900007a6:	2000      	movs	r0, #0
900007a8:	f001 ff2e 	bl	90002608 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
900007ac:	4913      	ldr	r1, [pc, #76]	@ (900007fc <main+0x9c>)
900007ae:	2000      	movs	r0, #0
900007b0:	f001 ff48 	bl	90002644 <BSP_LCD_GetYSize>
  
  hTS->Width = x_size;
900007b4:	4b12      	ldr	r3, [pc, #72]	@ (90000800 <main+0xa0>)
900007b6:	681b      	ldr	r3, [r3, #0]
900007b8:	4a0f      	ldr	r2, [pc, #60]	@ (900007f8 <main+0x98>)
900007ba:	6812      	ldr	r2, [r2, #0]
900007bc:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
900007be:	4b10      	ldr	r3, [pc, #64]	@ (90000800 <main+0xa0>)
900007c0:	681b      	ldr	r3, [r3, #0]
900007c2:	4a0e      	ldr	r2, [pc, #56]	@ (900007fc <main+0x9c>)
900007c4:	6812      	ldr	r2, [r2, #0]
900007c6:	605a      	str	r2, [r3, #4]
  hTS->Orientation =TS_SWAP_XY ;
900007c8:	4b0d      	ldr	r3, [pc, #52]	@ (90000800 <main+0xa0>)
900007ca:	681b      	ldr	r3, [r3, #0]
900007cc:	2208      	movs	r2, #8
900007ce:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
900007d0:	4b0b      	ldr	r3, [pc, #44]	@ (90000800 <main+0xa0>)
900007d2:	681b      	ldr	r3, [r3, #0]
900007d4:	2205      	movs	r2, #5
900007d6:	60da      	str	r2, [r3, #12]
  /* Touchscreen initialization */
  BSP_TS_Init(0, hTS);
900007d8:	4b09      	ldr	r3, [pc, #36]	@ (90000800 <main+0xa0>)
900007da:	681b      	ldr	r3, [r3, #0]
900007dc:	4619      	mov	r1, r3
900007de:	2000      	movs	r0, #0
900007e0:	f002 fdb8 	bl	90003354 <BSP_TS_Init>
  
  
  /*##-6- Draw the menu ######################################################*/
  //CPU_CACHE_Disable();
  Draw_Menu();  
900007e4:	f000 f80e 	bl	90000804 <Draw_Menu>
  CPU_CACHE_Enable();
900007e8:	f000 fa36 	bl	90000c58 <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
900007ec:	bf00      	nop
900007ee:	e7fd      	b.n	900007ec <main+0x8c>
900007f0:	9000d260 	.word	0x9000d260
900007f4:	9000d318 	.word	0x9000d318
900007f8:	200000cc 	.word	0x200000cc
900007fc:	200000d0 	.word	0x200000d0
90000800:	200000d4 	.word	0x200000d4

90000804 <Draw_Menu>:
  * @brief  Draws the menu.
  * @param  None
  * @retval None
  */
static void Draw_Menu(void)
{ 
90000804:	b580      	push	{r7, lr}
90000806:	b082      	sub	sp, #8
90000808:	af00      	add	r7, sp, #0
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
9000080a:	2000      	movs	r0, #0
9000080c:	f00b fd6c 	bl	9000c2e8 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000810:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000814:	f00b fdde 	bl	9000c3d4 <UTIL_LCD_Clear>
//  UTIL_LCD_FillCircle(145, (y_size - 24), 15,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(195, (y_size - 24), 10,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(245, (y_size - 24), 5,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(295, (y_size - 24), 2,UTIL_LCD_COLOR_WHITE);

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90000818:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
9000081c:	f00b fd82 	bl	9000c324 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90000820:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000824:	f00b fd92 	bl	9000c34c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90000828:	480c      	ldr	r0, [pc, #48]	@ (9000085c <Draw_Menu+0x58>)
9000082a:	f00b fda3 	bl	9000c374 <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
9000082e:	2300      	movs	r3, #0
90000830:	607b      	str	r3, [r7, #4]
90000832:	e00a      	b.n	9000084a <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Hello world! Hello world!", LEFT_MODE);
90000834:	687b      	ldr	r3, [r7, #4]
90000836:	015b      	lsls	r3, r3, #5
90000838:	4619      	mov	r1, r3
9000083a:	2303      	movs	r3, #3
9000083c:	4a08      	ldr	r2, [pc, #32]	@ (90000860 <Draw_Menu+0x5c>)
9000083e:	2000      	movs	r0, #0
90000840:	f00b fe14 	bl	9000c46c <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90000844:	687b      	ldr	r3, [r7, #4]
90000846:	3301      	adds	r3, #1
90000848:	607b      	str	r3, [r7, #4]
9000084a:	687b      	ldr	r3, [r7, #4]
9000084c:	2b07      	cmp	r3, #7
9000084e:	ddf1      	ble.n	90000834 <Draw_Menu+0x30>
  }
//  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillRect(380, (y_size - 40), 30, 30, UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillCircle(450, (y_size- 24), Radius, UTIL_LCD_COLOR_BLACK);
}
90000850:	bf00      	nop
90000852:	bf00      	nop
90000854:	3708      	adds	r7, #8
90000856:	46bd      	mov	sp, r7
90000858:	bd80      	pop	{r7, pc}
9000085a:	bf00      	nop
9000085c:	20000048 	.word	0x20000048
90000860:	9000d270 	.word	0x9000d270

90000864 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
90000864:	b580      	push	{r7, lr}
90000866:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000868:	4b22      	ldr	r3, [pc, #136]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
9000086a:	4a23      	ldr	r2, [pc, #140]	@ (900008f8 <MX_USART3_UART_Init+0x94>)
9000086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
9000086e:	4b21      	ldr	r3, [pc, #132]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
90000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000876:	4b1f      	ldr	r3, [pc, #124]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
90000878:	2200      	movs	r2, #0
9000087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
9000087c:	4b1d      	ldr	r3, [pc, #116]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
9000087e:	2200      	movs	r2, #0
90000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000882:	4b1c      	ldr	r3, [pc, #112]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
90000884:	2200      	movs	r2, #0
90000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000888:	4b1a      	ldr	r3, [pc, #104]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
9000088a:	220c      	movs	r2, #12
9000088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
9000088e:	4b19      	ldr	r3, [pc, #100]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
90000890:	2200      	movs	r2, #0
90000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000894:	4b17      	ldr	r3, [pc, #92]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
90000896:	2200      	movs	r2, #0
90000898:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
9000089a:	4b16      	ldr	r3, [pc, #88]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
9000089c:	2200      	movs	r2, #0
9000089e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
900008a0:	4b14      	ldr	r3, [pc, #80]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
900008a2:	2200      	movs	r2, #0
900008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
900008a6:	4b13      	ldr	r3, [pc, #76]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
900008a8:	2200      	movs	r2, #0
900008aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
900008ac:	4811      	ldr	r0, [pc, #68]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
900008ae:	f009 fe97 	bl	9000a5e0 <HAL_UART_Init>
900008b2:	4603      	mov	r3, r0
900008b4:	2b00      	cmp	r3, #0
900008b6:	d001      	beq.n	900008bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
900008b8:	f000 f8c6 	bl	90000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
900008bc:	2100      	movs	r1, #0
900008be:	480d      	ldr	r0, [pc, #52]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
900008c0:	f00a ff2d 	bl	9000b71e <HAL_UARTEx_SetTxFifoThreshold>
900008c4:	4603      	mov	r3, r0
900008c6:	2b00      	cmp	r3, #0
900008c8:	d001      	beq.n	900008ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
900008ca:	f000 f8bd 	bl	90000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
900008ce:	2100      	movs	r1, #0
900008d0:	4808      	ldr	r0, [pc, #32]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
900008d2:	f00a ff62 	bl	9000b79a <HAL_UARTEx_SetRxFifoThreshold>
900008d6:	4603      	mov	r3, r0
900008d8:	2b00      	cmp	r3, #0
900008da:	d001      	beq.n	900008e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
900008dc:	f000 f8b4 	bl	90000a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
900008e0:	4804      	ldr	r0, [pc, #16]	@ (900008f4 <MX_USART3_UART_Init+0x90>)
900008e2:	f00a fee3 	bl	9000b6ac <HAL_UARTEx_DisableFifoMode>
900008e6:	4603      	mov	r3, r0
900008e8:	2b00      	cmp	r3, #0
900008ea:	d001      	beq.n	900008f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
900008ec:	f000 f8ac 	bl	90000a48 <Error_Handler>
  }
}
900008f0:	bf00      	nop
900008f2:	bd80      	pop	{r7, pc}
900008f4:	200000d8 	.word	0x200000d8
900008f8:	40004800 	.word	0x40004800

900008fc <GPIO_Init>:

static void GPIO_Init(void)
{
900008fc:	b580      	push	{r7, lr}
900008fe:	b086      	sub	sp, #24
90000900:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
90000902:	1d3b      	adds	r3, r7, #4
90000904:	2200      	movs	r2, #0
90000906:	601a      	str	r2, [r3, #0]
90000908:	605a      	str	r2, [r3, #4]
9000090a:	609a      	str	r2, [r3, #8]
9000090c:	60da      	str	r2, [r3, #12]
9000090e:	611a      	str	r2, [r3, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
90000910:	2200      	movs	r2, #0
90000912:	2108      	movs	r1, #8
90000914:	4845      	ldr	r0, [pc, #276]	@ (90000a2c <GPIO_Init+0x130>)
90000916:	f003 fe6f 	bl	900045f8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
9000091a:	2200      	movs	r2, #0
9000091c:	2140      	movs	r1, #64	@ 0x40
9000091e:	4844      	ldr	r0, [pc, #272]	@ (90000a30 <GPIO_Init+0x134>)
90000920:	f003 fe6a 	bl	900045f8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
90000924:	2200      	movs	r2, #0
90000926:	2102      	movs	r1, #2
90000928:	4842      	ldr	r0, [pc, #264]	@ (90000a34 <GPIO_Init+0x138>)
9000092a:	f003 fe65 	bl	900045f8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
9000092e:	2200      	movs	r2, #0
90000930:	f44f 7180 	mov.w	r1, #256	@ 0x100
90000934:	483e      	ldr	r0, [pc, #248]	@ (90000a30 <GPIO_Init+0x134>)
90000936:	f003 fe5f 	bl	900045f8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
9000093a:	2200      	movs	r2, #0
9000093c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90000940:	483d      	ldr	r0, [pc, #244]	@ (90000a38 <GPIO_Init+0x13c>)
90000942:	f003 fe59 	bl	900045f8 <HAL_GPIO_WritePin>



	  /*Configure GPIO pin : PE6 */
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
90000946:	2340      	movs	r3, #64	@ 0x40
90000948:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000094a:	2300      	movs	r3, #0
9000094c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
9000094e:	2301      	movs	r3, #1
90000950:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000952:	1d3b      	adds	r3, r7, #4
90000954:	4619      	mov	r1, r3
90000956:	4839      	ldr	r0, [pc, #228]	@ (90000a3c <GPIO_Init+0x140>)
90000958:	f003 fb94 	bl	90004084 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PI8 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8;
9000095c:	f44f 7380 	mov.w	r3, #256	@ 0x100
90000960:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000962:	2300      	movs	r3, #0
90000964:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000966:	2301      	movs	r3, #1
90000968:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
9000096a:	1d3b      	adds	r3, r7, #4
9000096c:	4619      	mov	r1, r3
9000096e:	4834      	ldr	r0, [pc, #208]	@ (90000a40 <GPIO_Init+0x144>)
90000970:	f003 fb88 	bl	90004084 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PE3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
90000974:	2308      	movs	r3, #8
90000976:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000978:	2300      	movs	r3, #0
9000097a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
9000097c:	2301      	movs	r3, #1
9000097e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000980:	1d3b      	adds	r3, r7, #4
90000982:	4619      	mov	r1, r3
90000984:	482d      	ldr	r0, [pc, #180]	@ (90000a3c <GPIO_Init+0x140>)
90000986:	f003 fb7d 	bl	90004084 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PH15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
9000098a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000098e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000990:	2300      	movs	r3, #0
90000992:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000994:	2301      	movs	r3, #1
90000996:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000998:	1d3b      	adds	r3, r7, #4
9000099a:	4619      	mov	r1, r3
9000099c:	4829      	ldr	r0, [pc, #164]	@ (90000a44 <GPIO_Init+0x148>)
9000099e:	f003 fb71 	bl	90004084 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
900009a2:	2310      	movs	r3, #16
900009a4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900009a6:	2300      	movs	r3, #0
900009a8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
900009aa:	2301      	movs	r3, #1
900009ac:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900009ae:	1d3b      	adds	r3, r7, #4
900009b0:	4619      	mov	r1, r3
900009b2:	4821      	ldr	r0, [pc, #132]	@ (90000a38 <GPIO_Init+0x13c>)
900009b4:	f003 fb66 	bl	90004084 <HAL_GPIO_Init>


	  /*Configure GPIO pin : PG3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
900009b8:	2308      	movs	r3, #8
900009ba:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009bc:	2301      	movs	r3, #1
900009be:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009c0:	2300      	movs	r3, #0
900009c2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009c4:	2300      	movs	r3, #0
900009c6:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900009c8:	1d3b      	adds	r3, r7, #4
900009ca:	4619      	mov	r1, r3
900009cc:	4817      	ldr	r0, [pc, #92]	@ (90000a2c <GPIO_Init+0x130>)
900009ce:	f003 fb59 	bl	90004084 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA6 */
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
900009d2:	2340      	movs	r3, #64	@ 0x40
900009d4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009d6:	2301      	movs	r3, #1
900009d8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009da:	2300      	movs	r3, #0
900009dc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009de:	2300      	movs	r3, #0
900009e0:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
900009e2:	1d3b      	adds	r3, r7, #4
900009e4:	4619      	mov	r1, r3
900009e6:	4812      	ldr	r0, [pc, #72]	@ (90000a30 <GPIO_Init+0x134>)
900009e8:	f003 fb4c 	bl	90004084 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PK1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
900009ec:	2302      	movs	r3, #2
900009ee:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009f0:	2301      	movs	r3, #1
900009f2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009f4:	2300      	movs	r3, #0
900009f6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009f8:	2300      	movs	r3, #0
900009fa:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900009fc:	1d3b      	adds	r3, r7, #4
900009fe:	4619      	mov	r1, r3
90000a00:	480c      	ldr	r0, [pc, #48]	@ (90000a34 <GPIO_Init+0x138>)
90000a02:	f003 fb3f 	bl	90004084 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
90000a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
90000a0a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000a0c:	2301      	movs	r3, #1
90000a0e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a10:	2300      	movs	r3, #0
90000a12:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a14:	2300      	movs	r3, #0
90000a16:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000a18:	1d3b      	adds	r3, r7, #4
90000a1a:	4619      	mov	r1, r3
90000a1c:	4806      	ldr	r0, [pc, #24]	@ (90000a38 <GPIO_Init+0x13c>)
90000a1e:	f003 fb31 	bl	90004084 <HAL_GPIO_Init>

}
90000a22:	bf00      	nop
90000a24:	3718      	adds	r7, #24
90000a26:	46bd      	mov	sp, r7
90000a28:	bd80      	pop	{r7, pc}
90000a2a:	bf00      	nop
90000a2c:	58021800 	.word	0x58021800
90000a30:	58020000 	.word	0x58020000
90000a34:	58022800 	.word	0x58022800
90000a38:	58020400 	.word	0x58020400
90000a3c:	58021000 	.word	0x58021000
90000a40:	58022000 	.word	0x58022000
90000a44:	58021c00 	.word	0x58021c00

90000a48 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000a48:	b480      	push	{r7}
90000a4a:	af00      	add	r7, sp, #0
  while(1)
90000a4c:	bf00      	nop
90000a4e:	e7fd      	b.n	90000a4c <Error_Handler+0x4>

90000a50 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000a50:	b580      	push	{r7, lr}
90000a52:	b0ce      	sub	sp, #312	@ 0x138
90000a54:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000a56:	2300      	movs	r3, #0
90000a58:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000a5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000a64:	2200      	movs	r2, #0
90000a66:	601a      	str	r2, [r3, #0]
90000a68:	4b78      	ldr	r3, [pc, #480]	@ (90000c4c <SystemClock_Config+0x1fc>)
90000a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000a6c:	4a77      	ldr	r2, [pc, #476]	@ (90000c4c <SystemClock_Config+0x1fc>)
90000a6e:	f023 0301 	bic.w	r3, r3, #1
90000a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000a74:	4b75      	ldr	r3, [pc, #468]	@ (90000c4c <SystemClock_Config+0x1fc>)
90000a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000a78:	f003 0201 	and.w	r2, r3, #1
90000a7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000a84:	601a      	str	r2, [r3, #0]
90000a86:	4b72      	ldr	r3, [pc, #456]	@ (90000c50 <SystemClock_Config+0x200>)
90000a88:	699b      	ldr	r3, [r3, #24]
90000a8a:	4a71      	ldr	r2, [pc, #452]	@ (90000c50 <SystemClock_Config+0x200>)
90000a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000a90:	6193      	str	r3, [r2, #24]
90000a92:	4b6f      	ldr	r3, [pc, #444]	@ (90000c50 <SystemClock_Config+0x200>)
90000a94:	699b      	ldr	r3, [r3, #24]
90000a96:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000a9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a9e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000aa2:	601a      	str	r2, [r3, #0]
90000aa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000aa8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000aac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000aae:	bf00      	nop
90000ab0:	4b67      	ldr	r3, [pc, #412]	@ (90000c50 <SystemClock_Config+0x200>)
90000ab2:	699b      	ldr	r3, [r3, #24]
90000ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000abc:	d1f8      	bne.n	90000ab0 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000abe:	2301      	movs	r3, #1
90000ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000acc:	2300      	movs	r3, #0
90000ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000ad2:	2300      	movs	r3, #0
90000ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000ad8:	2302      	movs	r3, #2
90000ada:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000ade:	2302      	movs	r3, #2
90000ae0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000ae4:	2305      	movs	r3, #5
90000ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000aea:	23a0      	movs	r3, #160	@ 0xa0
90000aec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000af0:	2300      	movs	r3, #0
90000af2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000af6:	2302      	movs	r3, #2
90000af8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000afc:	2302      	movs	r3, #2
90000afe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000b02:	2304      	movs	r3, #4
90000b04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000b08:	2300      	movs	r3, #0
90000b0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000b0e:	2308      	movs	r3, #8
90000b10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000b14:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000b18:	4618      	mov	r0, r3
90000b1a:	f006 fd45 	bl	900075a8 <HAL_RCC_OscConfig>
90000b1e:	4603      	mov	r3, r0
90000b20:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000b24:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000b28:	2b00      	cmp	r3, #0
90000b2a:	d001      	beq.n	90000b30 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000b2c:	f7ff ff8c 	bl	90000a48 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000b30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000b38:	2205      	movs	r2, #5
90000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000b3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000b44:	2260      	movs	r2, #96	@ 0x60
90000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000b48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000b50:	2202      	movs	r2, #2
90000b52:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000b54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b58:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000b5c:	220a      	movs	r2, #10
90000b5e:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b64:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000b68:	2212      	movs	r2, #18
90000b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000b6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b70:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000b74:	2200      	movs	r2, #0
90000b76:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000b78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b7c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000b80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000b84:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000b86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b8a:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000b8e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000b92:	f04f 0300 	mov.w	r3, #0
90000b96:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000b9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000b9e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ba2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000baa:	f107 0308 	add.w	r3, r7, #8
90000bae:	4618      	mov	r0, r3
90000bb0:	f007 fce0 	bl	90008574 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000bb4:	233f      	movs	r3, #63	@ 0x3f
90000bb6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000bba:	2303      	movs	r3, #3
90000bbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000bc0:	2300      	movs	r3, #0
90000bc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000bc6:	2308      	movs	r3, #8
90000bc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000bcc:	2340      	movs	r3, #64	@ 0x40
90000bce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000bd2:	2340      	movs	r3, #64	@ 0x40
90000bd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000bdc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000be0:	2340      	movs	r3, #64	@ 0x40
90000be2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000be6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000bea:	2104      	movs	r1, #4
90000bec:	4618      	mov	r0, r3
90000bee:	f007 f935 	bl	90007e5c <HAL_RCC_ClockConfig>
90000bf2:	4603      	mov	r3, r0
90000bf4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000bf8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000bfc:	2b00      	cmp	r3, #0
90000bfe:	d001      	beq.n	90000c04 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000c00:	f7ff ff22 	bl	90000a48 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000c04:	4b13      	ldr	r3, [pc, #76]	@ (90000c54 <SystemClock_Config+0x204>)
90000c06:	681b      	ldr	r3, [r3, #0]
90000c08:	4a12      	ldr	r2, [pc, #72]	@ (90000c54 <SystemClock_Config+0x204>)
90000c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000c0e:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000c10:	4b10      	ldr	r3, [pc, #64]	@ (90000c54 <SystemClock_Config+0x204>)
90000c12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000c16:	4a0f      	ldr	r2, [pc, #60]	@ (90000c54 <SystemClock_Config+0x204>)
90000c18:	f043 0302 	orr.w	r3, r3, #2
90000c1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000c20:	4b0c      	ldr	r3, [pc, #48]	@ (90000c54 <SystemClock_Config+0x204>)
90000c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000c26:	f003 0202 	and.w	r2, r3, #2
90000c2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000c32:	601a      	str	r2, [r3, #0]
90000c34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000c3c:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000c3e:	f002 fdb3 	bl	900037a8 <HAL_EnableCompensationCell>
}
90000c42:	bf00      	nop
90000c44:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000c48:	46bd      	mov	sp, r7
90000c4a:	bd80      	pop	{r7, pc}
90000c4c:	58000400 	.word	0x58000400
90000c50:	58024800 	.word	0x58024800
90000c54:	58024400 	.word	0x58024400

90000c58 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000c58:	b480      	push	{r7}
90000c5a:	b085      	sub	sp, #20
90000c5c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000c5e:	4b34      	ldr	r3, [pc, #208]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000c60:	695b      	ldr	r3, [r3, #20]
90000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000c66:	2b00      	cmp	r3, #0
90000c68:	d11b      	bne.n	90000ca2 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000c6a:	f3bf 8f4f 	dsb	sy
}
90000c6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000c70:	f3bf 8f6f 	isb	sy
}
90000c74:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000c76:	4b2e      	ldr	r3, [pc, #184]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000c78:	2200      	movs	r2, #0
90000c7a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000c7e:	f3bf 8f4f 	dsb	sy
}
90000c82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000c84:	f3bf 8f6f 	isb	sy
}
90000c88:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000c8a:	4b29      	ldr	r3, [pc, #164]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000c8c:	695b      	ldr	r3, [r3, #20]
90000c8e:	4a28      	ldr	r2, [pc, #160]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000c94:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000c96:	f3bf 8f4f 	dsb	sy
}
90000c9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000c9c:	f3bf 8f6f 	isb	sy
}
90000ca0:	e000      	b.n	90000ca4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000ca2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000ca4:	4b22      	ldr	r3, [pc, #136]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000ca6:	695b      	ldr	r3, [r3, #20]
90000ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000cac:	2b00      	cmp	r3, #0
90000cae:	d138      	bne.n	90000d22 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000cb2:	2200      	movs	r2, #0
90000cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000cb8:	f3bf 8f4f 	dsb	sy
}
90000cbc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000cc4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000cc6:	68fb      	ldr	r3, [r7, #12]
90000cc8:	0b5b      	lsrs	r3, r3, #13
90000cca:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000cce:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000cd0:	68fb      	ldr	r3, [r7, #12]
90000cd2:	08db      	lsrs	r3, r3, #3
90000cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000cd8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000cda:	68bb      	ldr	r3, [r7, #8]
90000cdc:	015a      	lsls	r2, r3, #5
90000cde:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000ce2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000ce4:	687a      	ldr	r2, [r7, #4]
90000ce6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000ce8:	4911      	ldr	r1, [pc, #68]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000cea:	4313      	orrs	r3, r2
90000cec:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000cf0:	687b      	ldr	r3, [r7, #4]
90000cf2:	1e5a      	subs	r2, r3, #1
90000cf4:	607a      	str	r2, [r7, #4]
90000cf6:	2b00      	cmp	r3, #0
90000cf8:	d1ef      	bne.n	90000cda <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000cfa:	68bb      	ldr	r3, [r7, #8]
90000cfc:	1e5a      	subs	r2, r3, #1
90000cfe:	60ba      	str	r2, [r7, #8]
90000d00:	2b00      	cmp	r3, #0
90000d02:	d1e5      	bne.n	90000cd0 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000d04:	f3bf 8f4f 	dsb	sy
}
90000d08:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000d0a:	4b09      	ldr	r3, [pc, #36]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000d0c:	695b      	ldr	r3, [r3, #20]
90000d0e:	4a08      	ldr	r2, [pc, #32]	@ (90000d30 <CPU_CACHE_Enable+0xd8>)
90000d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000d14:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000d16:	f3bf 8f4f 	dsb	sy
}
90000d1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000d1c:	f3bf 8f6f 	isb	sy
}
90000d20:	e000      	b.n	90000d24 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000d22:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000d24:	bf00      	nop
90000d26:	3714      	adds	r7, #20
90000d28:	46bd      	mov	sp, r7
90000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000d2e:	4770      	bx	lr
90000d30:	e000ed00 	.word	0xe000ed00

90000d34 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000d34:	b580      	push	{r7, lr}
90000d36:	b082      	sub	sp, #8
90000d38:	af00      	add	r7, sp, #0
90000d3a:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000d3c:	490e      	ldr	r1, [pc, #56]	@ (90000d78 <MX_LTDC_ClockConfig+0x44>)
90000d3e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000d42:	f04f 0300 	mov.w	r3, #0
90000d46:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (90000d78 <MX_LTDC_ClockConfig+0x44>)
90000d4c:	2205      	movs	r2, #5
90000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000d50:	4b09      	ldr	r3, [pc, #36]	@ (90000d78 <MX_LTDC_ClockConfig+0x44>)
90000d52:	22c0      	movs	r2, #192	@ 0xc0
90000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000d56:	4b08      	ldr	r3, [pc, #32]	@ (90000d78 <MX_LTDC_ClockConfig+0x44>)
90000d58:	2202      	movs	r2, #2
90000d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000d5c:	4b06      	ldr	r3, [pc, #24]	@ (90000d78 <MX_LTDC_ClockConfig+0x44>)
90000d5e:	2214      	movs	r2, #20
90000d60:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000d62:	4b05      	ldr	r3, [pc, #20]	@ (90000d78 <MX_LTDC_ClockConfig+0x44>)
90000d64:	2263      	movs	r2, #99	@ 0x63
90000d66:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000d68:	4803      	ldr	r0, [pc, #12]	@ (90000d78 <MX_LTDC_ClockConfig+0x44>)
90000d6a:	f007 fc03 	bl	90008574 <HAL_RCCEx_PeriphCLKConfig>
90000d6e:	4603      	mov	r3, r0
}
90000d70:	4618      	mov	r0, r3
90000d72:	3708      	adds	r7, #8
90000d74:	46bd      	mov	sp, r7
90000d76:	bd80      	pop	{r7, pc}
90000d78:	20000170 	.word	0x20000170

90000d7c <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000d7c:	b580      	push	{r7, lr}
90000d7e:	b084      	sub	sp, #16
90000d80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000d82:	f002 fe31 	bl	900039e8 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000d86:	2301      	movs	r3, #1
90000d88:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000d8a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000d8e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000d90:	2318      	movs	r3, #24
90000d92:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000d94:	2303      	movs	r3, #3
90000d96:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000d98:	2300      	movs	r3, #0
90000d9a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000d9c:	2301      	movs	r3, #1
90000d9e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000da0:	2300      	movs	r3, #0
90000da2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000da4:	2301      	movs	r3, #1
90000da6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000da8:	2300      	movs	r3, #0
90000daa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000dac:	2300      	movs	r3, #0
90000dae:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000db0:	2300      	movs	r3, #0
90000db2:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000db4:	463b      	mov	r3, r7
90000db6:	4618      	mov	r0, r3
90000db8:	f002 fe4e 	bl	90003a58 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000dbc:	2004      	movs	r0, #4
90000dbe:	f002 fe2b 	bl	90003a18 <HAL_MPU_Enable>
}
90000dc2:	bf00      	nop
90000dc4:	3710      	adds	r7, #16
90000dc6:	46bd      	mov	sp, r7
90000dc8:	bd80      	pop	{r7, pc}

90000dca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000dca:	b480      	push	{r7}
90000dcc:	af00      	add	r7, sp, #0
}
90000dce:	bf00      	nop
90000dd0:	46bd      	mov	sp, r7
90000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000dd6:	4770      	bx	lr

90000dd8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000dd8:	b480      	push	{r7}
90000dda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000ddc:	bf00      	nop
90000dde:	e7fd      	b.n	90000ddc <HardFault_Handler+0x4>

90000de0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000de0:	b480      	push	{r7}
90000de2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000de4:	bf00      	nop
90000de6:	e7fd      	b.n	90000de4 <MemManage_Handler+0x4>

90000de8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000de8:	b480      	push	{r7}
90000dea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000dec:	bf00      	nop
90000dee:	e7fd      	b.n	90000dec <BusFault_Handler+0x4>

90000df0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000df0:	b480      	push	{r7}
90000df2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000df4:	bf00      	nop
90000df6:	e7fd      	b.n	90000df4 <UsageFault_Handler+0x4>

90000df8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000df8:	b480      	push	{r7}
90000dfa:	af00      	add	r7, sp, #0
}
90000dfc:	bf00      	nop
90000dfe:	46bd      	mov	sp, r7
90000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e04:	4770      	bx	lr

90000e06 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000e06:	b480      	push	{r7}
90000e08:	af00      	add	r7, sp, #0
}
90000e0a:	bf00      	nop
90000e0c:	46bd      	mov	sp, r7
90000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e12:	4770      	bx	lr

90000e14 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000e14:	b480      	push	{r7}
90000e16:	af00      	add	r7, sp, #0
}
90000e18:	bf00      	nop
90000e1a:	46bd      	mov	sp, r7
90000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e20:	4770      	bx	lr

90000e22 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000e22:	b580      	push	{r7, lr}
90000e24:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000e26:	f002 fc93 	bl	90003750 <HAL_IncTick>
}
90000e2a:	bf00      	nop
90000e2c:	bd80      	pop	{r7, pc}
	...

90000e30 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000e30:	b580      	push	{r7, lr}
90000e32:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000e34:	4802      	ldr	r0, [pc, #8]	@ (90000e40 <OTG_FS_IRQHandler+0x10>)
90000e36:	f003 fbf8 	bl	9000462a <HAL_HCD_IRQHandler>
}
90000e3a:	bf00      	nop
90000e3c:	bd80      	pop	{r7, pc}
90000e3e:	bf00      	nop
90000e40:	20000234 	.word	0x20000234

90000e44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000e44:	b580      	push	{r7, lr}
90000e46:	b086      	sub	sp, #24
90000e48:	af00      	add	r7, sp, #0
90000e4a:	60f8      	str	r0, [r7, #12]
90000e4c:	60b9      	str	r1, [r7, #8]
90000e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e50:	2300      	movs	r3, #0
90000e52:	617b      	str	r3, [r7, #20]
90000e54:	e00a      	b.n	90000e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
90000e56:	f3af 8000 	nop.w
90000e5a:	4601      	mov	r1, r0
90000e5c:	68bb      	ldr	r3, [r7, #8]
90000e5e:	1c5a      	adds	r2, r3, #1
90000e60:	60ba      	str	r2, [r7, #8]
90000e62:	b2ca      	uxtb	r2, r1
90000e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e66:	697b      	ldr	r3, [r7, #20]
90000e68:	3301      	adds	r3, #1
90000e6a:	617b      	str	r3, [r7, #20]
90000e6c:	697a      	ldr	r2, [r7, #20]
90000e6e:	687b      	ldr	r3, [r7, #4]
90000e70:	429a      	cmp	r2, r3
90000e72:	dbf0      	blt.n	90000e56 <_read+0x12>
  }

  return len;
90000e74:	687b      	ldr	r3, [r7, #4]
}
90000e76:	4618      	mov	r0, r3
90000e78:	3718      	adds	r7, #24
90000e7a:	46bd      	mov	sp, r7
90000e7c:	bd80      	pop	{r7, pc}

90000e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90000e7e:	b580      	push	{r7, lr}
90000e80:	b086      	sub	sp, #24
90000e82:	af00      	add	r7, sp, #0
90000e84:	60f8      	str	r0, [r7, #12]
90000e86:	60b9      	str	r1, [r7, #8]
90000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e8a:	2300      	movs	r3, #0
90000e8c:	617b      	str	r3, [r7, #20]
90000e8e:	e009      	b.n	90000ea4 <_write+0x26>
  {
    __io_putchar(*ptr++);
90000e90:	68bb      	ldr	r3, [r7, #8]
90000e92:	1c5a      	adds	r2, r3, #1
90000e94:	60ba      	str	r2, [r7, #8]
90000e96:	781b      	ldrb	r3, [r3, #0]
90000e98:	4618      	mov	r0, r3
90000e9a:	f7ff fbdf 	bl	9000065c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000e9e:	697b      	ldr	r3, [r7, #20]
90000ea0:	3301      	adds	r3, #1
90000ea2:	617b      	str	r3, [r7, #20]
90000ea4:	697a      	ldr	r2, [r7, #20]
90000ea6:	687b      	ldr	r3, [r7, #4]
90000ea8:	429a      	cmp	r2, r3
90000eaa:	dbf1      	blt.n	90000e90 <_write+0x12>
  }
  return len;
90000eac:	687b      	ldr	r3, [r7, #4]
}
90000eae:	4618      	mov	r0, r3
90000eb0:	3718      	adds	r7, #24
90000eb2:	46bd      	mov	sp, r7
90000eb4:	bd80      	pop	{r7, pc}

90000eb6 <_close>:

int _close(int file)
{
90000eb6:	b480      	push	{r7}
90000eb8:	b083      	sub	sp, #12
90000eba:	af00      	add	r7, sp, #0
90000ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
90000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
90000ec2:	4618      	mov	r0, r3
90000ec4:	370c      	adds	r7, #12
90000ec6:	46bd      	mov	sp, r7
90000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ecc:	4770      	bx	lr

90000ece <_fstat>:


int _fstat(int file, struct stat *st)
{
90000ece:	b480      	push	{r7}
90000ed0:	b083      	sub	sp, #12
90000ed2:	af00      	add	r7, sp, #0
90000ed4:	6078      	str	r0, [r7, #4]
90000ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90000ed8:	683b      	ldr	r3, [r7, #0]
90000eda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
90000ede:	605a      	str	r2, [r3, #4]
  return 0;
90000ee0:	2300      	movs	r3, #0
}
90000ee2:	4618      	mov	r0, r3
90000ee4:	370c      	adds	r7, #12
90000ee6:	46bd      	mov	sp, r7
90000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000eec:	4770      	bx	lr

90000eee <_isatty>:

int _isatty(int file)
{
90000eee:	b480      	push	{r7}
90000ef0:	b083      	sub	sp, #12
90000ef2:	af00      	add	r7, sp, #0
90000ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90000ef6:	2301      	movs	r3, #1
}
90000ef8:	4618      	mov	r0, r3
90000efa:	370c      	adds	r7, #12
90000efc:	46bd      	mov	sp, r7
90000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f02:	4770      	bx	lr

90000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90000f04:	b480      	push	{r7}
90000f06:	b085      	sub	sp, #20
90000f08:	af00      	add	r7, sp, #0
90000f0a:	60f8      	str	r0, [r7, #12]
90000f0c:	60b9      	str	r1, [r7, #8]
90000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90000f10:	2300      	movs	r3, #0
}
90000f12:	4618      	mov	r0, r3
90000f14:	3714      	adds	r7, #20
90000f16:	46bd      	mov	sp, r7
90000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f1c:	4770      	bx	lr
	...

90000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000f20:	b580      	push	{r7, lr}
90000f22:	b086      	sub	sp, #24
90000f24:	af00      	add	r7, sp, #0
90000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000f28:	4a14      	ldr	r2, [pc, #80]	@ (90000f7c <_sbrk+0x5c>)
90000f2a:	4b15      	ldr	r3, [pc, #84]	@ (90000f80 <_sbrk+0x60>)
90000f2c:	1ad3      	subs	r3, r2, r3
90000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000f30:	697b      	ldr	r3, [r7, #20]
90000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90000f34:	4b13      	ldr	r3, [pc, #76]	@ (90000f84 <_sbrk+0x64>)
90000f36:	681b      	ldr	r3, [r3, #0]
90000f38:	2b00      	cmp	r3, #0
90000f3a:	d102      	bne.n	90000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90000f3c:	4b11      	ldr	r3, [pc, #68]	@ (90000f84 <_sbrk+0x64>)
90000f3e:	4a12      	ldr	r2, [pc, #72]	@ (90000f88 <_sbrk+0x68>)
90000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90000f42:	4b10      	ldr	r3, [pc, #64]	@ (90000f84 <_sbrk+0x64>)
90000f44:	681a      	ldr	r2, [r3, #0]
90000f46:	687b      	ldr	r3, [r7, #4]
90000f48:	4413      	add	r3, r2
90000f4a:	693a      	ldr	r2, [r7, #16]
90000f4c:	429a      	cmp	r2, r3
90000f4e:	d207      	bcs.n	90000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
90000f50:	f00b ffd2 	bl	9000cef8 <__errno>
90000f54:	4603      	mov	r3, r0
90000f56:	220c      	movs	r2, #12
90000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90000f5a:	f04f 33ff 	mov.w	r3, #4294967295
90000f5e:	e009      	b.n	90000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90000f60:	4b08      	ldr	r3, [pc, #32]	@ (90000f84 <_sbrk+0x64>)
90000f62:	681b      	ldr	r3, [r3, #0]
90000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90000f66:	4b07      	ldr	r3, [pc, #28]	@ (90000f84 <_sbrk+0x64>)
90000f68:	681a      	ldr	r2, [r3, #0]
90000f6a:	687b      	ldr	r3, [r7, #4]
90000f6c:	4413      	add	r3, r2
90000f6e:	4a05      	ldr	r2, [pc, #20]	@ (90000f84 <_sbrk+0x64>)
90000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90000f72:	68fb      	ldr	r3, [r7, #12]
}
90000f74:	4618      	mov	r0, r3
90000f76:	3718      	adds	r7, #24
90000f78:	46bd      	mov	sp, r7
90000f7a:	bd80      	pop	{r7, pc}
90000f7c:	20020000 	.word	0x20020000
90000f80:	00001000 	.word	0x00001000
90000f84:	20000230 	.word	0x20000230
90000f88:	200014e8 	.word	0x200014e8

90000f8c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90000f8c:	b580      	push	{r7, lr}
90000f8e:	b082      	sub	sp, #8
90000f90:	af00      	add	r7, sp, #0
90000f92:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90000f94:	687b      	ldr	r3, [r7, #4]
90000f96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000f9a:	4618      	mov	r0, r3
90000f9c:	f00b f8a8 	bl	9000c0f0 <USBH_LL_IncTimer>
}
90000fa0:	bf00      	nop
90000fa2:	3708      	adds	r7, #8
90000fa4:	46bd      	mov	sp, r7
90000fa6:	bd80      	pop	{r7, pc}

90000fa8 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90000fa8:	b580      	push	{r7, lr}
90000faa:	b082      	sub	sp, #8
90000fac:	af00      	add	r7, sp, #0
90000fae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90000fb0:	687b      	ldr	r3, [r7, #4]
90000fb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000fb6:	4618      	mov	r0, r3
90000fb8:	f00b f8e4 	bl	9000c184 <USBH_LL_Connect>
}
90000fbc:	bf00      	nop
90000fbe:	3708      	adds	r7, #8
90000fc0:	46bd      	mov	sp, r7
90000fc2:	bd80      	pop	{r7, pc}

90000fc4 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90000fc4:	b580      	push	{r7, lr}
90000fc6:	b082      	sub	sp, #8
90000fc8:	af00      	add	r7, sp, #0
90000fca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90000fcc:	687b      	ldr	r3, [r7, #4]
90000fce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000fd2:	4618      	mov	r0, r3
90000fd4:	f00b f8ed 	bl	9000c1b2 <USBH_LL_Disconnect>
}
90000fd8:	bf00      	nop
90000fda:	3708      	adds	r7, #8
90000fdc:	46bd      	mov	sp, r7
90000fde:	bd80      	pop	{r7, pc}

90000fe0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000fe0:	b580      	push	{r7, lr}
90000fe2:	b082      	sub	sp, #8
90000fe4:	af00      	add	r7, sp, #0
90000fe6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90000fe8:	687b      	ldr	r3, [r7, #4]
90000fea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000fee:	4618      	mov	r0, r3
90000ff0:	f00b f8a8 	bl	9000c144 <USBH_LL_PortEnabled>
}
90000ff4:	bf00      	nop
90000ff6:	3708      	adds	r7, #8
90000ff8:	46bd      	mov	sp, r7
90000ffa:	bd80      	pop	{r7, pc}

90000ffc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000ffc:	b580      	push	{r7, lr}
90000ffe:	b082      	sub	sp, #8
90001000:	af00      	add	r7, sp, #0
90001002:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90001004:	687b      	ldr	r3, [r7, #4]
90001006:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000100a:	4618      	mov	r0, r3
9000100c:	f00b f8a8 	bl	9000c160 <USBH_LL_PortDisabled>
}
90001010:	bf00      	nop
90001012:	3708      	adds	r7, #8
90001014:	46bd      	mov	sp, r7
90001016:	bd80      	pop	{r7, pc}

90001018 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001018:	b480      	push	{r7}
9000101a:	b083      	sub	sp, #12
9000101c:	af00      	add	r7, sp, #0
9000101e:	6078      	str	r0, [r7, #4]
90001020:	460b      	mov	r3, r1
90001022:	70fb      	strb	r3, [r7, #3]
90001024:	4613      	mov	r3, r2
90001026:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90001028:	bf00      	nop
9000102a:	370c      	adds	r7, #12
9000102c:	46bd      	mov	sp, r7
9000102e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001032:	4770      	bx	lr

90001034 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90001034:	b580      	push	{r7, lr}
90001036:	b082      	sub	sp, #8
90001038:	af00      	add	r7, sp, #0
9000103a:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
9000103c:	687b      	ldr	r3, [r7, #4]
9000103e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001042:	4618      	mov	r0, r3
90001044:	f003 fc01 	bl	9000484a <HAL_HCD_Stop>
  return USBH_OK;
90001048:	2300      	movs	r3, #0
}
9000104a:	4618      	mov	r0, r3
9000104c:	3708      	adds	r7, #8
9000104e:	46bd      	mov	sp, r7
90001050:	bd80      	pop	{r7, pc}
	...

90001054 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001054:	b580      	push	{r7, lr}
90001056:	b084      	sub	sp, #16
90001058:	af00      	add	r7, sp, #0
9000105a:	6078      	str	r0, [r7, #4]
9000105c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
9000105e:	687b      	ldr	r3, [r7, #4]
90001060:	2b00      	cmp	r3, #0
90001062:	d103      	bne.n	9000106c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001064:	f04f 33ff 	mov.w	r3, #4294967295
90001068:	60fb      	str	r3, [r7, #12]
9000106a:	e02c      	b.n	900010c6 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
9000106c:	683b      	ldr	r3, [r7, #0]
9000106e:	681a      	ldr	r2, [r3, #0]
90001070:	687b      	ldr	r3, [r7, #4]
90001072:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001074:	683b      	ldr	r3, [r7, #0]
90001076:	685a      	ldr	r2, [r3, #4]
90001078:	687b      	ldr	r3, [r7, #4]
9000107a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
9000107c:	683b      	ldr	r3, [r7, #0]
9000107e:	891a      	ldrh	r2, [r3, #8]
90001080:	687b      	ldr	r3, [r7, #4]
90001082:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90001084:	683b      	ldr	r3, [r7, #0]
90001086:	68da      	ldr	r2, [r3, #12]
90001088:	687b      	ldr	r3, [r7, #4]
9000108a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
9000108c:	683b      	ldr	r3, [r7, #0]
9000108e:	691a      	ldr	r2, [r3, #16]
90001090:	687b      	ldr	r3, [r7, #4]
90001092:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90001094:	683b      	ldr	r3, [r7, #0]
90001096:	695a      	ldr	r2, [r3, #20]
90001098:	687b      	ldr	r3, [r7, #4]
9000109a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
9000109c:	687b      	ldr	r3, [r7, #4]
9000109e:	4a0c      	ldr	r2, [pc, #48]	@ (900010d0 <FT5336_RegisterBusIO+0x7c>)
900010a0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900010a2:	687b      	ldr	r3, [r7, #4]
900010a4:	4a0b      	ldr	r2, [pc, #44]	@ (900010d4 <FT5336_RegisterBusIO+0x80>)
900010a6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900010a8:	687b      	ldr	r3, [r7, #4]
900010aa:	687a      	ldr	r2, [r7, #4]
900010ac:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900010ae:	687b      	ldr	r3, [r7, #4]
900010b0:	681b      	ldr	r3, [r3, #0]
900010b2:	2b00      	cmp	r3, #0
900010b4:	d004      	beq.n	900010c0 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900010b6:	687b      	ldr	r3, [r7, #4]
900010b8:	681b      	ldr	r3, [r3, #0]
900010ba:	4798      	blx	r3
900010bc:	60f8      	str	r0, [r7, #12]
900010be:	e002      	b.n	900010c6 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900010c0:	f04f 33ff 	mov.w	r3, #4294967295
900010c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900010c6:	68fb      	ldr	r3, [r7, #12]
}
900010c8:	4618      	mov	r0, r3
900010ca:	3710      	adds	r7, #16
900010cc:	46bd      	mov	sp, r7
900010ce:	bd80      	pop	{r7, pc}
900010d0:	900014cd 	.word	0x900014cd
900010d4:	90001501 	.word	0x90001501

900010d8 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
900010d8:	b480      	push	{r7}
900010da:	b083      	sub	sp, #12
900010dc:	af00      	add	r7, sp, #0
900010de:	6078      	str	r0, [r7, #4]
900010e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
900010e2:	683b      	ldr	r3, [r7, #0]
900010e4:	2201      	movs	r2, #1
900010e6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
900010e8:	683b      	ldr	r3, [r7, #0]
900010ea:	2201      	movs	r2, #1
900010ec:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
900010ee:	683b      	ldr	r3, [r7, #0]
900010f0:	2205      	movs	r2, #5
900010f2:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
900010f4:	683b      	ldr	r3, [r7, #0]
900010f6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
900010fa:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
900010fc:	683b      	ldr	r3, [r7, #0]
900010fe:	f44f 7288 	mov.w	r2, #272	@ 0x110
90001102:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
90001104:	2300      	movs	r3, #0
}
90001106:	4618      	mov	r0, r3
90001108:	370c      	adds	r7, #12
9000110a:	46bd      	mov	sp, r7
9000110c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001110:	4770      	bx	lr

90001112 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
90001112:	b580      	push	{r7, lr}
90001114:	b084      	sub	sp, #16
90001116:	af00      	add	r7, sp, #0
90001118:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
9000111a:	2300      	movs	r3, #0
9000111c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
9000111e:	687b      	ldr	r3, [r7, #4]
90001120:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
90001124:	2b00      	cmp	r3, #0
90001126:	d10d      	bne.n	90001144 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
90001128:	687b      	ldr	r3, [r7, #4]
9000112a:	681b      	ldr	r3, [r3, #0]
9000112c:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
9000112e:	6878      	ldr	r0, [r7, #4]
90001130:	f000 f987 	bl	90001442 <FT5336_DisableIT>
90001134:	4602      	mov	r2, r0
90001136:	68fb      	ldr	r3, [r7, #12]
90001138:	4413      	add	r3, r2
9000113a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
9000113c:	687b      	ldr	r3, [r7, #4]
9000113e:	2201      	movs	r2, #1
90001140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
90001144:	68fb      	ldr	r3, [r7, #12]
90001146:	2b00      	cmp	r3, #0
90001148:	d002      	beq.n	90001150 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
9000114a:	f04f 33ff 	mov.w	r3, #4294967295
9000114e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90001150:	68fb      	ldr	r3, [r7, #12]
}
90001152:	4618      	mov	r0, r3
90001154:	3710      	adds	r7, #16
90001156:	46bd      	mov	sp, r7
90001158:	bd80      	pop	{r7, pc}

9000115a <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
9000115a:	b480      	push	{r7}
9000115c:	b085      	sub	sp, #20
9000115e:	af00      	add	r7, sp, #0
90001160:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
90001162:	2300      	movs	r3, #0
90001164:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
90001166:	687b      	ldr	r3, [r7, #4]
90001168:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
9000116c:	2b01      	cmp	r3, #1
9000116e:	d103      	bne.n	90001178 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
90001170:	687b      	ldr	r3, [r7, #4]
90001172:	2200      	movs	r2, #0
90001174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
90001178:	68fb      	ldr	r3, [r7, #12]
}
9000117a:	4618      	mov	r0, r3
9000117c:	3714      	adds	r7, #20
9000117e:	46bd      	mov	sp, r7
90001180:	f85d 7b04 	ldr.w	r7, [sp], #4
90001184:	4770      	bx	lr

90001186 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
90001186:	b580      	push	{r7, lr}
90001188:	b084      	sub	sp, #16
9000118a:	af00      	add	r7, sp, #0
9000118c:	6078      	str	r0, [r7, #4]
9000118e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90001190:	687b      	ldr	r3, [r7, #4]
90001192:	f103 0218 	add.w	r2, r3, #24
90001196:	683b      	ldr	r3, [r7, #0]
90001198:	681b      	ldr	r3, [r3, #0]
9000119a:	b2db      	uxtb	r3, r3
9000119c:	4619      	mov	r1, r3
9000119e:	4610      	mov	r0, r2
900011a0:	f000 fa25 	bl	900015ee <ft5336_radian_value>
900011a4:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
900011a6:	687b      	ldr	r3, [r7, #4]
900011a8:	f103 0218 	add.w	r2, r3, #24
900011ac:	683b      	ldr	r3, [r7, #0]
900011ae:	685b      	ldr	r3, [r3, #4]
900011b0:	b2db      	uxtb	r3, r3
900011b2:	4619      	mov	r1, r3
900011b4:	4610      	mov	r0, r2
900011b6:	f000 fa2b 	bl	90001610 <ft5336_offset_left_right>
900011ba:	4602      	mov	r2, r0
900011bc:	68fb      	ldr	r3, [r7, #12]
900011be:	4413      	add	r3, r2
900011c0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
900011c2:	687b      	ldr	r3, [r7, #4]
900011c4:	f103 0218 	add.w	r2, r3, #24
900011c8:	683b      	ldr	r3, [r7, #0]
900011ca:	689b      	ldr	r3, [r3, #8]
900011cc:	b2db      	uxtb	r3, r3
900011ce:	4619      	mov	r1, r3
900011d0:	4610      	mov	r0, r2
900011d2:	f000 fa2e 	bl	90001632 <ft5336_offset_up_down>
900011d6:	4602      	mov	r2, r0
900011d8:	68fb      	ldr	r3, [r7, #12]
900011da:	4413      	add	r3, r2
900011dc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
900011de:	687b      	ldr	r3, [r7, #4]
900011e0:	f103 0218 	add.w	r2, r3, #24
900011e4:	683b      	ldr	r3, [r7, #0]
900011e6:	68db      	ldr	r3, [r3, #12]
900011e8:	b2db      	uxtb	r3, r3
900011ea:	4619      	mov	r1, r3
900011ec:	4610      	mov	r0, r2
900011ee:	f000 fa31 	bl	90001654 <ft5336_disatnce_left_right>
900011f2:	4602      	mov	r2, r0
900011f4:	68fb      	ldr	r3, [r7, #12]
900011f6:	4413      	add	r3, r2
900011f8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
900011fa:	687b      	ldr	r3, [r7, #4]
900011fc:	f103 0218 	add.w	r2, r3, #24
90001200:	683b      	ldr	r3, [r7, #0]
90001202:	691b      	ldr	r3, [r3, #16]
90001204:	b2db      	uxtb	r3, r3
90001206:	4619      	mov	r1, r3
90001208:	4610      	mov	r0, r2
9000120a:	f000 fa34 	bl	90001676 <ft5336_distance_up_down>
9000120e:	4602      	mov	r2, r0
90001210:	68fb      	ldr	r3, [r7, #12]
90001212:	4413      	add	r3, r2
90001214:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90001216:	687b      	ldr	r3, [r7, #4]
90001218:	f103 0218 	add.w	r2, r3, #24
9000121c:	683b      	ldr	r3, [r7, #0]
9000121e:	695b      	ldr	r3, [r3, #20]
90001220:	b2db      	uxtb	r3, r3
90001222:	4619      	mov	r1, r3
90001224:	4610      	mov	r0, r2
90001226:	f000 fa37 	bl	90001698 <ft5336_distance_zoom>
9000122a:	4602      	mov	r2, r0
9000122c:	68fb      	ldr	r3, [r7, #12]
9000122e:	4413      	add	r3, r2
90001230:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
90001232:	68fb      	ldr	r3, [r7, #12]
90001234:	2b00      	cmp	r3, #0
90001236:	d002      	beq.n	9000123e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
90001238:	f04f 33ff 	mov.w	r3, #4294967295
9000123c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
9000123e:	68fb      	ldr	r3, [r7, #12]
}
90001240:	4618      	mov	r0, r3
90001242:	3710      	adds	r7, #16
90001244:	46bd      	mov	sp, r7
90001246:	bd80      	pop	{r7, pc}

90001248 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90001248:	b580      	push	{r7, lr}
9000124a:	b082      	sub	sp, #8
9000124c:	af00      	add	r7, sp, #0
9000124e:	6078      	str	r0, [r7, #4]
90001250:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90001252:	687b      	ldr	r3, [r7, #4]
90001254:	3318      	adds	r3, #24
90001256:	6839      	ldr	r1, [r7, #0]
90001258:	4618      	mov	r0, r3
9000125a:	f000 fa3f 	bl	900016dc <ft5336_chip_id>
9000125e:	4603      	mov	r3, r0
}
90001260:	4618      	mov	r0, r3
90001262:	3708      	adds	r7, #8
90001264:	46bd      	mov	sp, r7
90001266:	bd80      	pop	{r7, pc}

90001268 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
90001268:	b580      	push	{r7, lr}
9000126a:	b084      	sub	sp, #16
9000126c:	af00      	add	r7, sp, #0
9000126e:	6078      	str	r0, [r7, #4]
90001270:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90001272:	2300      	movs	r3, #0
90001274:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90001276:	6878      	ldr	r0, [r7, #4]
90001278:	f000 f908 	bl	9000148c <FT5336_DetectTouch>
9000127c:	4603      	mov	r3, r0
9000127e:	461a      	mov	r2, r3
90001280:	683b      	ldr	r3, [r7, #0]
90001282:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90001284:	687b      	ldr	r3, [r7, #4]
90001286:	f103 0018 	add.w	r0, r3, #24
9000128a:	f107 0208 	add.w	r2, r7, #8
9000128e:	2304      	movs	r3, #4
90001290:	2103      	movs	r1, #3
90001292:	f000 f94f 	bl	90001534 <ft5336_read_reg>
90001296:	4603      	mov	r3, r0
90001298:	2b00      	cmp	r3, #0
9000129a:	d003      	beq.n	900012a4 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
9000129c:	f04f 33ff 	mov.w	r3, #4294967295
900012a0:	60fb      	str	r3, [r7, #12]
900012a2:	e00f      	b.n	900012c4 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900012a4:	7a3b      	ldrb	r3, [r7, #8]
900012a6:	021b      	lsls	r3, r3, #8
900012a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
900012ac:	7a7a      	ldrb	r2, [r7, #9]
900012ae:	431a      	orrs	r2, r3
900012b0:	683b      	ldr	r3, [r7, #0]
900012b2:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900012b4:	7abb      	ldrb	r3, [r7, #10]
900012b6:	021b      	lsls	r3, r3, #8
900012b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
900012bc:	7afa      	ldrb	r2, [r7, #11]
900012be:	431a      	orrs	r2, r3
900012c0:	683b      	ldr	r3, [r7, #0]
900012c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
900012c4:	68fb      	ldr	r3, [r7, #12]
}
900012c6:	4618      	mov	r0, r3
900012c8:	3710      	adds	r7, #16
900012ca:	46bd      	mov	sp, r7
900012cc:	bd80      	pop	{r7, pc}

900012ce <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
900012ce:	b580      	push	{r7, lr}
900012d0:	b08c      	sub	sp, #48	@ 0x30
900012d2:	af00      	add	r7, sp, #0
900012d4:	6078      	str	r0, [r7, #4]
900012d6:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
900012d8:	2300      	movs	r3, #0
900012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900012dc:	6878      	ldr	r0, [r7, #4]
900012de:	f000 f8d5 	bl	9000148c <FT5336_DetectTouch>
900012e2:	4603      	mov	r3, r0
900012e4:	461a      	mov	r2, r3
900012e6:	683b      	ldr	r3, [r7, #0]
900012e8:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900012ea:	687b      	ldr	r3, [r7, #4]
900012ec:	f103 0018 	add.w	r0, r3, #24
900012f0:	f107 0208 	add.w	r2, r7, #8
900012f4:	231e      	movs	r3, #30
900012f6:	2103      	movs	r1, #3
900012f8:	f000 f91c 	bl	90001534 <ft5336_read_reg>
900012fc:	4603      	mov	r3, r0
900012fe:	2b00      	cmp	r3, #0
90001300:	d003      	beq.n	9000130a <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
90001302:	f04f 33ff 	mov.w	r3, #4294967295
90001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
90001308:	e077      	b.n	900013fa <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
9000130a:	2300      	movs	r3, #0
9000130c:	62bb      	str	r3, [r7, #40]	@ 0x28
9000130e:	e071      	b.n	900013f4 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90001310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001312:	4613      	mov	r3, r2
90001314:	005b      	lsls	r3, r3, #1
90001316:	4413      	add	r3, r2
90001318:	005b      	lsls	r3, r3, #1
9000131a:	3330      	adds	r3, #48	@ 0x30
9000131c:	443b      	add	r3, r7
9000131e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90001322:	021b      	lsls	r3, r3, #8
90001324:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
90001328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000132a:	4613      	mov	r3, r2
9000132c:	005b      	lsls	r3, r3, #1
9000132e:	4413      	add	r3, r2
90001330:	005b      	lsls	r3, r3, #1
90001332:	3301      	adds	r3, #1
90001334:	3330      	adds	r3, #48	@ 0x30
90001336:	443b      	add	r3, r7
90001338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
9000133c:	ea41 0203 	orr.w	r2, r1, r3
90001340:	6839      	ldr	r1, [r7, #0]
90001342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001344:	009b      	lsls	r3, r3, #2
90001346:	440b      	add	r3, r1
90001348:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000134a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000134c:	4613      	mov	r3, r2
9000134e:	005b      	lsls	r3, r3, #1
90001350:	4413      	add	r3, r2
90001352:	005b      	lsls	r3, r3, #1
90001354:	3302      	adds	r3, #2
90001356:	3330      	adds	r3, #48	@ 0x30
90001358:	443b      	add	r3, r7
9000135a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
9000135e:	021b      	lsls	r3, r3, #8
90001360:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
90001364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001366:	4613      	mov	r3, r2
90001368:	005b      	lsls	r3, r3, #1
9000136a:	4413      	add	r3, r2
9000136c:	005b      	lsls	r3, r3, #1
9000136e:	3303      	adds	r3, #3
90001370:	3330      	adds	r3, #48	@ 0x30
90001372:	443b      	add	r3, r7
90001374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90001378:	4319      	orrs	r1, r3
9000137a:	683b      	ldr	r3, [r7, #0]
9000137c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000137e:	3206      	adds	r2, #6
90001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90001384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001386:	4613      	mov	r3, r2
90001388:	005b      	lsls	r3, r3, #1
9000138a:	4413      	add	r3, r2
9000138c:	005b      	lsls	r3, r3, #1
9000138e:	3330      	adds	r3, #48	@ 0x30
90001390:	443b      	add	r3, r7
90001392:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90001396:	099b      	lsrs	r3, r3, #6
90001398:	b2db      	uxtb	r3, r3
9000139a:	4619      	mov	r1, r3
9000139c:	683b      	ldr	r3, [r7, #0]
9000139e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900013a0:	3210      	adds	r2, #16
900013a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900013a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900013a8:	4613      	mov	r3, r2
900013aa:	005b      	lsls	r3, r3, #1
900013ac:	4413      	add	r3, r2
900013ae:	005b      	lsls	r3, r3, #1
900013b0:	3304      	adds	r3, #4
900013b2:	3330      	adds	r3, #48	@ 0x30
900013b4:	443b      	add	r3, r7
900013b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900013ba:	4619      	mov	r1, r3
900013bc:	683a      	ldr	r2, [r7, #0]
900013be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900013c0:	330a      	adds	r3, #10
900013c2:	009b      	lsls	r3, r3, #2
900013c4:	4413      	add	r3, r2
900013c6:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900013c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900013ca:	4613      	mov	r3, r2
900013cc:	005b      	lsls	r3, r3, #1
900013ce:	4413      	add	r3, r2
900013d0:	005b      	lsls	r3, r3, #1
900013d2:	3305      	adds	r3, #5
900013d4:	3330      	adds	r3, #48	@ 0x30
900013d6:	443b      	add	r3, r7
900013d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900013dc:	091b      	lsrs	r3, r3, #4
900013de:	b2db      	uxtb	r3, r3
900013e0:	4619      	mov	r1, r3
900013e2:	683a      	ldr	r2, [r7, #0]
900013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900013e6:	3314      	adds	r3, #20
900013e8:	009b      	lsls	r3, r3, #2
900013ea:	4413      	add	r3, r2
900013ec:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
900013ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900013f0:	3301      	adds	r3, #1
900013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
900013f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900013f6:	2b04      	cmp	r3, #4
900013f8:	d98a      	bls.n	90001310 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
900013fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
900013fc:	4618      	mov	r0, r3
900013fe:	3730      	adds	r7, #48	@ 0x30
90001400:	46bd      	mov	sp, r7
90001402:	bd80      	pop	{r7, pc}

90001404 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
90001404:	b580      	push	{r7, lr}
90001406:	b082      	sub	sp, #8
90001408:	af00      	add	r7, sp, #0
9000140a:	6078      	str	r0, [r7, #4]
9000140c:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
9000140e:	687b      	ldr	r3, [r7, #4]
90001410:	3318      	adds	r3, #24
90001412:	6839      	ldr	r1, [r7, #0]
90001414:	4618      	mov	r0, r3
90001416:	f000 f8bb 	bl	90001590 <ft5336_gest_id>
9000141a:	4603      	mov	r3, r0
}
9000141c:	4618      	mov	r0, r3
9000141e:	3708      	adds	r7, #8
90001420:	46bd      	mov	sp, r7
90001422:	bd80      	pop	{r7, pc}

90001424 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
90001424:	b580      	push	{r7, lr}
90001426:	b082      	sub	sp, #8
90001428:	af00      	add	r7, sp, #0
9000142a:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
9000142c:	687b      	ldr	r3, [r7, #4]
9000142e:	3318      	adds	r3, #24
90001430:	2101      	movs	r1, #1
90001432:	4618      	mov	r0, r3
90001434:	f000 f941 	bl	900016ba <ft5336_g_mode>
90001438:	4603      	mov	r3, r0
}
9000143a:	4618      	mov	r0, r3
9000143c:	3708      	adds	r7, #8
9000143e:	46bd      	mov	sp, r7
90001440:	bd80      	pop	{r7, pc}

90001442 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
90001442:	b580      	push	{r7, lr}
90001444:	b082      	sub	sp, #8
90001446:	af00      	add	r7, sp, #0
90001448:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000144a:	687b      	ldr	r3, [r7, #4]
9000144c:	3318      	adds	r3, #24
9000144e:	2100      	movs	r1, #0
90001450:	4618      	mov	r0, r3
90001452:	f000 f932 	bl	900016ba <ft5336_g_mode>
90001456:	4603      	mov	r3, r0
}
90001458:	4618      	mov	r0, r3
9000145a:	3708      	adds	r7, #8
9000145c:	46bd      	mov	sp, r7
9000145e:	bd80      	pop	{r7, pc}

90001460 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
90001460:	b480      	push	{r7}
90001462:	b083      	sub	sp, #12
90001464:	af00      	add	r7, sp, #0
90001466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90001468:	2300      	movs	r3, #0
}
9000146a:	4618      	mov	r0, r3
9000146c:	370c      	adds	r7, #12
9000146e:	46bd      	mov	sp, r7
90001470:	f85d 7b04 	ldr.w	r7, [sp], #4
90001474:	4770      	bx	lr

90001476 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
90001476:	b480      	push	{r7}
90001478:	b083      	sub	sp, #12
9000147a:	af00      	add	r7, sp, #0
9000147c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
9000147e:	2300      	movs	r3, #0
}
90001480:	4618      	mov	r0, r3
90001482:	370c      	adds	r7, #12
90001484:	46bd      	mov	sp, r7
90001486:	f85d 7b04 	ldr.w	r7, [sp], #4
9000148a:	4770      	bx	lr

9000148c <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
9000148c:	b580      	push	{r7, lr}
9000148e:	b084      	sub	sp, #16
90001490:	af00      	add	r7, sp, #0
90001492:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90001494:	687b      	ldr	r3, [r7, #4]
90001496:	3318      	adds	r3, #24
90001498:	f107 020b 	add.w	r2, r7, #11
9000149c:	4611      	mov	r1, r2
9000149e:	4618      	mov	r0, r3
900014a0:	f000 f886 	bl	900015b0 <ft5336_td_status>
900014a4:	4603      	mov	r3, r0
900014a6:	2b00      	cmp	r3, #0
900014a8:	d003      	beq.n	900014b2 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
900014aa:	f04f 33ff 	mov.w	r3, #4294967295
900014ae:	60fb      	str	r3, [r7, #12]
900014b0:	e007      	b.n	900014c2 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900014b2:	7afb      	ldrb	r3, [r7, #11]
900014b4:	2b05      	cmp	r3, #5
900014b6:	d902      	bls.n	900014be <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
900014b8:	2300      	movs	r3, #0
900014ba:	60fb      	str	r3, [r7, #12]
900014bc:	e001      	b.n	900014c2 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
900014be:	7afb      	ldrb	r3, [r7, #11]
900014c0:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
900014c2:	68fb      	ldr	r3, [r7, #12]
}
900014c4:	4618      	mov	r0, r3
900014c6:	3710      	adds	r7, #16
900014c8:	46bd      	mov	sp, r7
900014ca:	bd80      	pop	{r7, pc}

900014cc <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900014cc:	b590      	push	{r4, r7, lr}
900014ce:	b087      	sub	sp, #28
900014d0:	af00      	add	r7, sp, #0
900014d2:	60f8      	str	r0, [r7, #12]
900014d4:	607a      	str	r2, [r7, #4]
900014d6:	461a      	mov	r2, r3
900014d8:	460b      	mov	r3, r1
900014da:	72fb      	strb	r3, [r7, #11]
900014dc:	4613      	mov	r3, r2
900014de:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
900014e0:	68fb      	ldr	r3, [r7, #12]
900014e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900014e4:	697b      	ldr	r3, [r7, #20]
900014e6:	691c      	ldr	r4, [r3, #16]
900014e8:	697b      	ldr	r3, [r7, #20]
900014ea:	8918      	ldrh	r0, [r3, #8]
900014ec:	7afb      	ldrb	r3, [r7, #11]
900014ee:	b299      	uxth	r1, r3
900014f0:	893b      	ldrh	r3, [r7, #8]
900014f2:	687a      	ldr	r2, [r7, #4]
900014f4:	47a0      	blx	r4
900014f6:	4603      	mov	r3, r0
}
900014f8:	4618      	mov	r0, r3
900014fa:	371c      	adds	r7, #28
900014fc:	46bd      	mov	sp, r7
900014fe:	bd90      	pop	{r4, r7, pc}

90001500 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001500:	b590      	push	{r4, r7, lr}
90001502:	b087      	sub	sp, #28
90001504:	af00      	add	r7, sp, #0
90001506:	60f8      	str	r0, [r7, #12]
90001508:	607a      	str	r2, [r7, #4]
9000150a:	461a      	mov	r2, r3
9000150c:	460b      	mov	r3, r1
9000150e:	72fb      	strb	r3, [r7, #11]
90001510:	4613      	mov	r3, r2
90001512:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001514:	68fb      	ldr	r3, [r7, #12]
90001516:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001518:	697b      	ldr	r3, [r7, #20]
9000151a:	68dc      	ldr	r4, [r3, #12]
9000151c:	697b      	ldr	r3, [r7, #20]
9000151e:	8918      	ldrh	r0, [r3, #8]
90001520:	7afb      	ldrb	r3, [r7, #11]
90001522:	b299      	uxth	r1, r3
90001524:	893b      	ldrh	r3, [r7, #8]
90001526:	687a      	ldr	r2, [r7, #4]
90001528:	47a0      	blx	r4
9000152a:	4603      	mov	r3, r0
}
9000152c:	4618      	mov	r0, r3
9000152e:	371c      	adds	r7, #28
90001530:	46bd      	mov	sp, r7
90001532:	bd90      	pop	{r4, r7, pc}

90001534 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90001534:	b590      	push	{r4, r7, lr}
90001536:	b085      	sub	sp, #20
90001538:	af00      	add	r7, sp, #0
9000153a:	60f8      	str	r0, [r7, #12]
9000153c:	607a      	str	r2, [r7, #4]
9000153e:	461a      	mov	r2, r3
90001540:	460b      	mov	r3, r1
90001542:	72fb      	strb	r3, [r7, #11]
90001544:	4613      	mov	r3, r2
90001546:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001548:	68fb      	ldr	r3, [r7, #12]
9000154a:	685c      	ldr	r4, [r3, #4]
9000154c:	68fb      	ldr	r3, [r7, #12]
9000154e:	6898      	ldr	r0, [r3, #8]
90001550:	893b      	ldrh	r3, [r7, #8]
90001552:	7af9      	ldrb	r1, [r7, #11]
90001554:	687a      	ldr	r2, [r7, #4]
90001556:	47a0      	blx	r4
90001558:	4603      	mov	r3, r0
}
9000155a:	4618      	mov	r0, r3
9000155c:	3714      	adds	r7, #20
9000155e:	46bd      	mov	sp, r7
90001560:	bd90      	pop	{r4, r7, pc}

90001562 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
90001562:	b590      	push	{r4, r7, lr}
90001564:	b085      	sub	sp, #20
90001566:	af00      	add	r7, sp, #0
90001568:	60f8      	str	r0, [r7, #12]
9000156a:	607a      	str	r2, [r7, #4]
9000156c:	461a      	mov	r2, r3
9000156e:	460b      	mov	r3, r1
90001570:	72fb      	strb	r3, [r7, #11]
90001572:	4613      	mov	r3, r2
90001574:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90001576:	68fb      	ldr	r3, [r7, #12]
90001578:	681c      	ldr	r4, [r3, #0]
9000157a:	68fb      	ldr	r3, [r7, #12]
9000157c:	6898      	ldr	r0, [r3, #8]
9000157e:	893b      	ldrh	r3, [r7, #8]
90001580:	7af9      	ldrb	r1, [r7, #11]
90001582:	687a      	ldr	r2, [r7, #4]
90001584:	47a0      	blx	r4
90001586:	4603      	mov	r3, r0
}
90001588:	4618      	mov	r0, r3
9000158a:	3714      	adds	r7, #20
9000158c:	46bd      	mov	sp, r7
9000158e:	bd90      	pop	{r4, r7, pc}

90001590 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90001590:	b580      	push	{r7, lr}
90001592:	b082      	sub	sp, #8
90001594:	af00      	add	r7, sp, #0
90001596:	6078      	str	r0, [r7, #4]
90001598:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
9000159a:	2301      	movs	r3, #1
9000159c:	683a      	ldr	r2, [r7, #0]
9000159e:	2101      	movs	r1, #1
900015a0:	6878      	ldr	r0, [r7, #4]
900015a2:	f7ff ffc7 	bl	90001534 <ft5336_read_reg>
900015a6:	4603      	mov	r3, r0
}
900015a8:	4618      	mov	r0, r3
900015aa:	3708      	adds	r7, #8
900015ac:	46bd      	mov	sp, r7
900015ae:	bd80      	pop	{r7, pc}

900015b0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
900015b0:	b580      	push	{r7, lr}
900015b2:	b084      	sub	sp, #16
900015b4:	af00      	add	r7, sp, #0
900015b6:	6078      	str	r0, [r7, #4]
900015b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
900015ba:	2301      	movs	r3, #1
900015bc:	683a      	ldr	r2, [r7, #0]
900015be:	2102      	movs	r1, #2
900015c0:	6878      	ldr	r0, [r7, #4]
900015c2:	f7ff ffb7 	bl	90001534 <ft5336_read_reg>
900015c6:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900015c8:	68fb      	ldr	r3, [r7, #12]
900015ca:	2b00      	cmp	r3, #0
900015cc:	d10a      	bne.n	900015e4 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
900015ce:	683b      	ldr	r3, [r7, #0]
900015d0:	781b      	ldrb	r3, [r3, #0]
900015d2:	f003 030f 	and.w	r3, r3, #15
900015d6:	b2da      	uxtb	r2, r3
900015d8:	683b      	ldr	r3, [r7, #0]
900015da:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
900015dc:	683b      	ldr	r3, [r7, #0]
900015de:	781a      	ldrb	r2, [r3, #0]
900015e0:	683b      	ldr	r3, [r7, #0]
900015e2:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900015e4:	68fb      	ldr	r3, [r7, #12]
}
900015e6:	4618      	mov	r0, r3
900015e8:	3710      	adds	r7, #16
900015ea:	46bd      	mov	sp, r7
900015ec:	bd80      	pop	{r7, pc}

900015ee <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
900015ee:	b580      	push	{r7, lr}
900015f0:	b082      	sub	sp, #8
900015f2:	af00      	add	r7, sp, #0
900015f4:	6078      	str	r0, [r7, #4]
900015f6:	460b      	mov	r3, r1
900015f8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
900015fa:	1cfa      	adds	r2, r7, #3
900015fc:	2301      	movs	r3, #1
900015fe:	2191      	movs	r1, #145	@ 0x91
90001600:	6878      	ldr	r0, [r7, #4]
90001602:	f7ff ffae 	bl	90001562 <ft5336_write_reg>
90001606:	4603      	mov	r3, r0
}
90001608:	4618      	mov	r0, r3
9000160a:	3708      	adds	r7, #8
9000160c:	46bd      	mov	sp, r7
9000160e:	bd80      	pop	{r7, pc}

90001610 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90001610:	b580      	push	{r7, lr}
90001612:	b082      	sub	sp, #8
90001614:	af00      	add	r7, sp, #0
90001616:	6078      	str	r0, [r7, #4]
90001618:	460b      	mov	r3, r1
9000161a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
9000161c:	1cfa      	adds	r2, r7, #3
9000161e:	2301      	movs	r3, #1
90001620:	2192      	movs	r1, #146	@ 0x92
90001622:	6878      	ldr	r0, [r7, #4]
90001624:	f7ff ff9d 	bl	90001562 <ft5336_write_reg>
90001628:	4603      	mov	r3, r0
}
9000162a:	4618      	mov	r0, r3
9000162c:	3708      	adds	r7, #8
9000162e:	46bd      	mov	sp, r7
90001630:	bd80      	pop	{r7, pc}

90001632 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90001632:	b580      	push	{r7, lr}
90001634:	b082      	sub	sp, #8
90001636:	af00      	add	r7, sp, #0
90001638:	6078      	str	r0, [r7, #4]
9000163a:	460b      	mov	r3, r1
9000163c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
9000163e:	1cfa      	adds	r2, r7, #3
90001640:	2301      	movs	r3, #1
90001642:	2193      	movs	r1, #147	@ 0x93
90001644:	6878      	ldr	r0, [r7, #4]
90001646:	f7ff ff8c 	bl	90001562 <ft5336_write_reg>
9000164a:	4603      	mov	r3, r0
}
9000164c:	4618      	mov	r0, r3
9000164e:	3708      	adds	r7, #8
90001650:	46bd      	mov	sp, r7
90001652:	bd80      	pop	{r7, pc}

90001654 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90001654:	b580      	push	{r7, lr}
90001656:	b082      	sub	sp, #8
90001658:	af00      	add	r7, sp, #0
9000165a:	6078      	str	r0, [r7, #4]
9000165c:	460b      	mov	r3, r1
9000165e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
90001660:	1cfa      	adds	r2, r7, #3
90001662:	2301      	movs	r3, #1
90001664:	2194      	movs	r1, #148	@ 0x94
90001666:	6878      	ldr	r0, [r7, #4]
90001668:	f7ff ff7b 	bl	90001562 <ft5336_write_reg>
9000166c:	4603      	mov	r3, r0
}
9000166e:	4618      	mov	r0, r3
90001670:	3708      	adds	r7, #8
90001672:	46bd      	mov	sp, r7
90001674:	bd80      	pop	{r7, pc}

90001676 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90001676:	b580      	push	{r7, lr}
90001678:	b082      	sub	sp, #8
9000167a:	af00      	add	r7, sp, #0
9000167c:	6078      	str	r0, [r7, #4]
9000167e:	460b      	mov	r3, r1
90001680:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
90001682:	1cfa      	adds	r2, r7, #3
90001684:	2301      	movs	r3, #1
90001686:	2195      	movs	r1, #149	@ 0x95
90001688:	6878      	ldr	r0, [r7, #4]
9000168a:	f7ff ff6a 	bl	90001562 <ft5336_write_reg>
9000168e:	4603      	mov	r3, r0
}
90001690:	4618      	mov	r0, r3
90001692:	3708      	adds	r7, #8
90001694:	46bd      	mov	sp, r7
90001696:	bd80      	pop	{r7, pc}

90001698 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90001698:	b580      	push	{r7, lr}
9000169a:	b082      	sub	sp, #8
9000169c:	af00      	add	r7, sp, #0
9000169e:	6078      	str	r0, [r7, #4]
900016a0:	460b      	mov	r3, r1
900016a2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
900016a4:	1cfa      	adds	r2, r7, #3
900016a6:	2301      	movs	r3, #1
900016a8:	2196      	movs	r1, #150	@ 0x96
900016aa:	6878      	ldr	r0, [r7, #4]
900016ac:	f7ff ff59 	bl	90001562 <ft5336_write_reg>
900016b0:	4603      	mov	r3, r0
}
900016b2:	4618      	mov	r0, r3
900016b4:	3708      	adds	r7, #8
900016b6:	46bd      	mov	sp, r7
900016b8:	bd80      	pop	{r7, pc}

900016ba <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
900016ba:	b580      	push	{r7, lr}
900016bc:	b082      	sub	sp, #8
900016be:	af00      	add	r7, sp, #0
900016c0:	6078      	str	r0, [r7, #4]
900016c2:	460b      	mov	r3, r1
900016c4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
900016c6:	1cfa      	adds	r2, r7, #3
900016c8:	2301      	movs	r3, #1
900016ca:	21a4      	movs	r1, #164	@ 0xa4
900016cc:	6878      	ldr	r0, [r7, #4]
900016ce:	f7ff ff48 	bl	90001562 <ft5336_write_reg>
900016d2:	4603      	mov	r3, r0
}
900016d4:	4618      	mov	r0, r3
900016d6:	3708      	adds	r7, #8
900016d8:	46bd      	mov	sp, r7
900016da:	bd80      	pop	{r7, pc}

900016dc <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900016dc:	b580      	push	{r7, lr}
900016de:	b084      	sub	sp, #16
900016e0:	af00      	add	r7, sp, #0
900016e2:	6078      	str	r0, [r7, #4]
900016e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900016e6:	2301      	movs	r3, #1
900016e8:	683a      	ldr	r2, [r7, #0]
900016ea:	21a8      	movs	r1, #168	@ 0xa8
900016ec:	6878      	ldr	r0, [r7, #4]
900016ee:	f7ff ff21 	bl	90001534 <ft5336_read_reg>
900016f2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900016f4:	68fb      	ldr	r3, [r7, #12]
900016f6:	2b00      	cmp	r3, #0
900016f8:	d107      	bne.n	9000170a <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900016fa:	683b      	ldr	r3, [r7, #0]
900016fc:	781a      	ldrb	r2, [r3, #0]
900016fe:	683b      	ldr	r3, [r7, #0]
90001700:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
90001702:	683b      	ldr	r3, [r7, #0]
90001704:	781a      	ldrb	r2, [r3, #0]
90001706:	683b      	ldr	r3, [r7, #0]
90001708:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
9000170a:	68fb      	ldr	r3, [r7, #12]
}
9000170c:	4618      	mov	r0, r3
9000170e:	3710      	adds	r7, #16
90001710:	46bd      	mov	sp, r7
90001712:	bd80      	pop	{r7, pc}

90001714 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001714:	b580      	push	{r7, lr}
90001716:	b084      	sub	sp, #16
90001718:	af00      	add	r7, sp, #0
9000171a:	6078      	str	r0, [r7, #4]
9000171c:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
9000171e:	f04f 33ff 	mov.w	r3, #4294967295
90001722:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001724:	683b      	ldr	r3, [r7, #0]
90001726:	681b      	ldr	r3, [r3, #0]
90001728:	4619      	mov	r1, r3
9000172a:	6878      	ldr	r0, [r7, #4]
9000172c:	f000 f832 	bl	90001794 <MT48LC4M32B2_ClockEnable>
90001730:	4603      	mov	r3, r0
90001732:	2b00      	cmp	r3, #0
90001734:	d128      	bne.n	90001788 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90001736:	2001      	movs	r0, #1
90001738:	f000 f8e2 	bl	90001900 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000173c:	683b      	ldr	r3, [r7, #0]
9000173e:	681b      	ldr	r3, [r3, #0]
90001740:	4619      	mov	r1, r3
90001742:	6878      	ldr	r0, [r7, #4]
90001744:	f000 f84a 	bl	900017dc <MT48LC4M32B2_Precharge>
90001748:	4603      	mov	r3, r0
9000174a:	2b00      	cmp	r3, #0
9000174c:	d11c      	bne.n	90001788 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
9000174e:	683b      	ldr	r3, [r7, #0]
90001750:	6819      	ldr	r1, [r3, #0]
90001752:	683b      	ldr	r3, [r7, #0]
90001754:	685b      	ldr	r3, [r3, #4]
90001756:	461a      	mov	r2, r3
90001758:	6878      	ldr	r0, [r7, #4]
9000175a:	f000 f897 	bl	9000188c <MT48LC4M32B2_RefreshMode>
9000175e:	4603      	mov	r3, r0
90001760:	2b00      	cmp	r3, #0
90001762:	d111      	bne.n	90001788 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001764:	6839      	ldr	r1, [r7, #0]
90001766:	6878      	ldr	r0, [r7, #4]
90001768:	f000 f85c 	bl	90001824 <MT48LC4M32B2_ModeRegConfig>
9000176c:	4603      	mov	r3, r0
9000176e:	2b00      	cmp	r3, #0
90001770:	d10a      	bne.n	90001788 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001772:	683b      	ldr	r3, [r7, #0]
90001774:	689b      	ldr	r3, [r3, #8]
90001776:	4619      	mov	r1, r3
90001778:	6878      	ldr	r0, [r7, #4]
9000177a:	f000 f8ad 	bl	900018d8 <MT48LC4M32B2_RefreshRate>
9000177e:	4603      	mov	r3, r0
90001780:	2b00      	cmp	r3, #0
90001782:	d101      	bne.n	90001788 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001784:	2300      	movs	r3, #0
90001786:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
90001788:	68fb      	ldr	r3, [r7, #12]
}
9000178a:	4618      	mov	r0, r3
9000178c:	3710      	adds	r7, #16
9000178e:	46bd      	mov	sp, r7
90001790:	bd80      	pop	{r7, pc}
	...

90001794 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001794:	b580      	push	{r7, lr}
90001796:	b082      	sub	sp, #8
90001798:	af00      	add	r7, sp, #0
9000179a:	6078      	str	r0, [r7, #4]
9000179c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000179e:	4b0e      	ldr	r3, [pc, #56]	@ (900017d8 <MT48LC4M32B2_ClockEnable+0x44>)
900017a0:	2201      	movs	r2, #1
900017a2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900017a4:	4a0c      	ldr	r2, [pc, #48]	@ (900017d8 <MT48LC4M32B2_ClockEnable+0x44>)
900017a6:	683b      	ldr	r3, [r7, #0]
900017a8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900017aa:	4b0b      	ldr	r3, [pc, #44]	@ (900017d8 <MT48LC4M32B2_ClockEnable+0x44>)
900017ac:	2201      	movs	r2, #1
900017ae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900017b0:	4b09      	ldr	r3, [pc, #36]	@ (900017d8 <MT48LC4M32B2_ClockEnable+0x44>)
900017b2:	2200      	movs	r2, #0
900017b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900017b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900017ba:	4907      	ldr	r1, [pc, #28]	@ (900017d8 <MT48LC4M32B2_ClockEnable+0x44>)
900017bc:	6878      	ldr	r0, [r7, #4]
900017be:	f008 fd4b 	bl	9000a258 <HAL_SDRAM_SendCommand>
900017c2:	4603      	mov	r3, r0
900017c4:	2b00      	cmp	r3, #0
900017c6:	d002      	beq.n	900017ce <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900017c8:	f04f 33ff 	mov.w	r3, #4294967295
900017cc:	e000      	b.n	900017d0 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900017ce:	2300      	movs	r3, #0
  }
}
900017d0:	4618      	mov	r0, r3
900017d2:	3708      	adds	r7, #8
900017d4:	46bd      	mov	sp, r7
900017d6:	bd80      	pop	{r7, pc}
900017d8:	20000614 	.word	0x20000614

900017dc <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900017dc:	b580      	push	{r7, lr}
900017de:	b082      	sub	sp, #8
900017e0:	af00      	add	r7, sp, #0
900017e2:	6078      	str	r0, [r7, #4]
900017e4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900017e6:	4b0e      	ldr	r3, [pc, #56]	@ (90001820 <MT48LC4M32B2_Precharge+0x44>)
900017e8:	2202      	movs	r2, #2
900017ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900017ec:	4a0c      	ldr	r2, [pc, #48]	@ (90001820 <MT48LC4M32B2_Precharge+0x44>)
900017ee:	683b      	ldr	r3, [r7, #0]
900017f0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900017f2:	4b0b      	ldr	r3, [pc, #44]	@ (90001820 <MT48LC4M32B2_Precharge+0x44>)
900017f4:	2201      	movs	r2, #1
900017f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900017f8:	4b09      	ldr	r3, [pc, #36]	@ (90001820 <MT48LC4M32B2_Precharge+0x44>)
900017fa:	2200      	movs	r2, #0
900017fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900017fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001802:	4907      	ldr	r1, [pc, #28]	@ (90001820 <MT48LC4M32B2_Precharge+0x44>)
90001804:	6878      	ldr	r0, [r7, #4]
90001806:	f008 fd27 	bl	9000a258 <HAL_SDRAM_SendCommand>
9000180a:	4603      	mov	r3, r0
9000180c:	2b00      	cmp	r3, #0
9000180e:	d002      	beq.n	90001816 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001810:	f04f 33ff 	mov.w	r3, #4294967295
90001814:	e000      	b.n	90001818 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001816:	2300      	movs	r3, #0
  }
}
90001818:	4618      	mov	r0, r3
9000181a:	3708      	adds	r7, #8
9000181c:	46bd      	mov	sp, r7
9000181e:	bd80      	pop	{r7, pc}
90001820:	20000614 	.word	0x20000614

90001824 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001824:	b580      	push	{r7, lr}
90001826:	b084      	sub	sp, #16
90001828:	af00      	add	r7, sp, #0
9000182a:	6078      	str	r0, [r7, #4]
9000182c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000182e:	683b      	ldr	r3, [r7, #0]
90001830:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90001832:	683b      	ldr	r3, [r7, #0]
90001834:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001836:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001838:	683b      	ldr	r3, [r7, #0]
9000183a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
9000183c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
9000183e:	683b      	ldr	r3, [r7, #0]
90001840:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001842:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001844:	683b      	ldr	r3, [r7, #0]
90001846:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001848:	4313      	orrs	r3, r2
9000184a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000184c:	4b0e      	ldr	r3, [pc, #56]	@ (90001888 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000184e:	2204      	movs	r2, #4
90001850:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001852:	683b      	ldr	r3, [r7, #0]
90001854:	681b      	ldr	r3, [r3, #0]
90001856:	4a0c      	ldr	r2, [pc, #48]	@ (90001888 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001858:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000185a:	4b0b      	ldr	r3, [pc, #44]	@ (90001888 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000185c:	2201      	movs	r2, #1
9000185e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001860:	4a09      	ldr	r2, [pc, #36]	@ (90001888 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001862:	68fb      	ldr	r3, [r7, #12]
90001864:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000186a:	4907      	ldr	r1, [pc, #28]	@ (90001888 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000186c:	6878      	ldr	r0, [r7, #4]
9000186e:	f008 fcf3 	bl	9000a258 <HAL_SDRAM_SendCommand>
90001872:	4603      	mov	r3, r0
90001874:	2b00      	cmp	r3, #0
90001876:	d002      	beq.n	9000187e <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001878:	f04f 33ff 	mov.w	r3, #4294967295
9000187c:	e000      	b.n	90001880 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000187e:	2300      	movs	r3, #0
  }
}
90001880:	4618      	mov	r0, r3
90001882:	3710      	adds	r7, #16
90001884:	46bd      	mov	sp, r7
90001886:	bd80      	pop	{r7, pc}
90001888:	20000614 	.word	0x20000614

9000188c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
9000188c:	b580      	push	{r7, lr}
9000188e:	b084      	sub	sp, #16
90001890:	af00      	add	r7, sp, #0
90001892:	60f8      	str	r0, [r7, #12]
90001894:	60b9      	str	r1, [r7, #8]
90001896:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001898:	4a0e      	ldr	r2, [pc, #56]	@ (900018d4 <MT48LC4M32B2_RefreshMode+0x48>)
9000189a:	687b      	ldr	r3, [r7, #4]
9000189c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
9000189e:	4a0d      	ldr	r2, [pc, #52]	@ (900018d4 <MT48LC4M32B2_RefreshMode+0x48>)
900018a0:	68bb      	ldr	r3, [r7, #8]
900018a2:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
900018a4:	4b0b      	ldr	r3, [pc, #44]	@ (900018d4 <MT48LC4M32B2_RefreshMode+0x48>)
900018a6:	2208      	movs	r2, #8
900018a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900018aa:	4b0a      	ldr	r3, [pc, #40]	@ (900018d4 <MT48LC4M32B2_RefreshMode+0x48>)
900018ac:	2200      	movs	r2, #0
900018ae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900018b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900018b4:	4907      	ldr	r1, [pc, #28]	@ (900018d4 <MT48LC4M32B2_RefreshMode+0x48>)
900018b6:	68f8      	ldr	r0, [r7, #12]
900018b8:	f008 fcce 	bl	9000a258 <HAL_SDRAM_SendCommand>
900018bc:	4603      	mov	r3, r0
900018be:	2b00      	cmp	r3, #0
900018c0:	d002      	beq.n	900018c8 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
900018c2:	f04f 33ff 	mov.w	r3, #4294967295
900018c6:	e000      	b.n	900018ca <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
900018c8:	2300      	movs	r3, #0
  }
}
900018ca:	4618      	mov	r0, r3
900018cc:	3710      	adds	r7, #16
900018ce:	46bd      	mov	sp, r7
900018d0:	bd80      	pop	{r7, pc}
900018d2:	bf00      	nop
900018d4:	20000614 	.word	0x20000614

900018d8 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
900018d8:	b580      	push	{r7, lr}
900018da:	b082      	sub	sp, #8
900018dc:	af00      	add	r7, sp, #0
900018de:	6078      	str	r0, [r7, #4]
900018e0:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900018e2:	6839      	ldr	r1, [r7, #0]
900018e4:	6878      	ldr	r0, [r7, #4]
900018e6:	f008 fcec 	bl	9000a2c2 <HAL_SDRAM_ProgramRefreshRate>
900018ea:	4603      	mov	r3, r0
900018ec:	2b00      	cmp	r3, #0
900018ee:	d002      	beq.n	900018f6 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
900018f0:	f04f 33ff 	mov.w	r3, #4294967295
900018f4:	e000      	b.n	900018f8 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
900018f6:	2300      	movs	r3, #0
  }
}
900018f8:	4618      	mov	r0, r3
900018fa:	3708      	adds	r7, #8
900018fc:	46bd      	mov	sp, r7
900018fe:	bd80      	pop	{r7, pc}

90001900 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001900:	b580      	push	{r7, lr}
90001902:	b084      	sub	sp, #16
90001904:	af00      	add	r7, sp, #0
90001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90001908:	f001 ff36 	bl	90003778 <HAL_GetTick>
9000190c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
9000190e:	bf00      	nop
90001910:	f001 ff32 	bl	90003778 <HAL_GetTick>
90001914:	4602      	mov	r2, r0
90001916:	68fb      	ldr	r3, [r7, #12]
90001918:	1ad3      	subs	r3, r2, r3
9000191a:	687a      	ldr	r2, [r7, #4]
9000191c:	429a      	cmp	r2, r3
9000191e:	d8f7      	bhi.n	90001910 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001920:	2300      	movs	r3, #0
}
90001922:	4618      	mov	r0, r3
90001924:	3710      	adds	r7, #16
90001926:	46bd      	mov	sp, r7
90001928:	bd80      	pop	{r7, pc}
	...

9000192c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
9000192c:	b580      	push	{r7, lr}
9000192e:	b08a      	sub	sp, #40	@ 0x28
90001930:	af00      	add	r7, sp, #0
90001932:	4603      	mov	r3, r0
90001934:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90001936:	2300      	movs	r3, #0
90001938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
9000193a:	79fb      	ldrb	r3, [r7, #7]
9000193c:	2b00      	cmp	r3, #0
9000193e:	d10f      	bne.n	90001960 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90001940:	4b26      	ldr	r3, [pc, #152]	@ (900019dc <BSP_LED_Init+0xb0>)
90001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001946:	4a25      	ldr	r2, [pc, #148]	@ (900019dc <BSP_LED_Init+0xb0>)
90001948:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
9000194c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001950:	4b22      	ldr	r3, [pc, #136]	@ (900019dc <BSP_LED_Init+0xb0>)
90001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000195a:	60fb      	str	r3, [r7, #12]
9000195c:	68fb      	ldr	r3, [r7, #12]
9000195e:	e015      	b.n	9000198c <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001960:	79fb      	ldrb	r3, [r7, #7]
90001962:	2b01      	cmp	r3, #1
90001964:	d10f      	bne.n	90001986 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
90001966:	4b1d      	ldr	r3, [pc, #116]	@ (900019dc <BSP_LED_Init+0xb0>)
90001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000196c:	4a1b      	ldr	r2, [pc, #108]	@ (900019dc <BSP_LED_Init+0xb0>)
9000196e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001976:	4b19      	ldr	r3, [pc, #100]	@ (900019dc <BSP_LED_Init+0xb0>)
90001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001980:	60bb      	str	r3, [r7, #8]
90001982:	68bb      	ldr	r3, [r7, #8]
90001984:	e002      	b.n	9000198c <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001986:	f06f 0301 	mvn.w	r3, #1
9000198a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
9000198c:	79fb      	ldrb	r3, [r7, #7]
9000198e:	4a14      	ldr	r2, [pc, #80]	@ (900019e0 <BSP_LED_Init+0xb4>)
90001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001994:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001996:	2301      	movs	r3, #1
90001998:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
9000199a:	2301      	movs	r3, #1
9000199c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000199e:	2303      	movs	r3, #3
900019a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
900019a2:	79fb      	ldrb	r3, [r7, #7]
900019a4:	4a0f      	ldr	r2, [pc, #60]	@ (900019e4 <BSP_LED_Init+0xb8>)
900019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900019aa:	f107 0210 	add.w	r2, r7, #16
900019ae:	4611      	mov	r1, r2
900019b0:	4618      	mov	r0, r3
900019b2:	f002 fb67 	bl	90004084 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
900019b6:	79fb      	ldrb	r3, [r7, #7]
900019b8:	4a0a      	ldr	r2, [pc, #40]	@ (900019e4 <BSP_LED_Init+0xb8>)
900019ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
900019be:	79fb      	ldrb	r3, [r7, #7]
900019c0:	4a07      	ldr	r2, [pc, #28]	@ (900019e0 <BSP_LED_Init+0xb4>)
900019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900019c6:	b29b      	uxth	r3, r3
900019c8:	2201      	movs	r2, #1
900019ca:	4619      	mov	r1, r3
900019cc:	f002 fe14 	bl	900045f8 <HAL_GPIO_WritePin>
  return ret;
900019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
900019d2:	4618      	mov	r0, r3
900019d4:	3728      	adds	r7, #40	@ 0x28
900019d6:	46bd      	mov	sp, r7
900019d8:	bd80      	pop	{r7, pc}
900019da:	bf00      	nop
900019dc:	58024400 	.word	0x58024400
900019e0:	9000d28c 	.word	0x9000d28c
900019e4:	20000030 	.word	0x20000030

900019e8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
900019e8:	b580      	push	{r7, lr}
900019ea:	b082      	sub	sp, #8
900019ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
900019ee:	2300      	movs	r3, #0
900019f0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
900019f2:	4b16      	ldr	r3, [pc, #88]	@ (90001a4c <BSP_I2C4_Init+0x64>)
900019f4:	4a16      	ldr	r2, [pc, #88]	@ (90001a50 <BSP_I2C4_Init+0x68>)
900019f6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
900019f8:	4b16      	ldr	r3, [pc, #88]	@ (90001a54 <BSP_I2C4_Init+0x6c>)
900019fa:	681b      	ldr	r3, [r3, #0]
900019fc:	2b00      	cmp	r3, #0
900019fe:	d11f      	bne.n	90001a40 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001a00:	4b14      	ldr	r3, [pc, #80]	@ (90001a54 <BSP_I2C4_Init+0x6c>)
90001a02:	681b      	ldr	r3, [r3, #0]
90001a04:	3301      	adds	r3, #1
90001a06:	4a13      	ldr	r2, [pc, #76]	@ (90001a54 <BSP_I2C4_Init+0x6c>)
90001a08:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90001a0a:	4810      	ldr	r0, [pc, #64]	@ (90001a4c <BSP_I2C4_Init+0x64>)
90001a0c:	f004 fec2 	bl	90006794 <HAL_I2C_GetState>
90001a10:	4603      	mov	r3, r0
90001a12:	2b00      	cmp	r3, #0
90001a14:	d114      	bne.n	90001a40 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
90001a16:	480d      	ldr	r0, [pc, #52]	@ (90001a4c <BSP_I2C4_Init+0x64>)
90001a18:	f000 fb60 	bl	900020dc <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001a1c:	f006 fd94 	bl	90008548 <HAL_RCC_GetPCLK2Freq>
90001a20:	4603      	mov	r3, r0
90001a22:	490d      	ldr	r1, [pc, #52]	@ (90001a58 <BSP_I2C4_Init+0x70>)
90001a24:	4618      	mov	r0, r3
90001a26:	f000 f8e3 	bl	90001bf0 <I2C_GetTiming>
90001a2a:	4603      	mov	r3, r0
90001a2c:	4619      	mov	r1, r3
90001a2e:	4807      	ldr	r0, [pc, #28]	@ (90001a4c <BSP_I2C4_Init+0x64>)
90001a30:	f000 f838 	bl	90001aa4 <MX_I2C4_Init>
90001a34:	4603      	mov	r3, r0
90001a36:	2b00      	cmp	r3, #0
90001a38:	d002      	beq.n	90001a40 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
90001a3a:	f06f 0307 	mvn.w	r3, #7
90001a3e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001a40:	687b      	ldr	r3, [r7, #4]
}
90001a42:	4618      	mov	r0, r3
90001a44:	3708      	adds	r7, #8
90001a46:	46bd      	mov	sp, r7
90001a48:	bd80      	pop	{r7, pc}
90001a4a:	bf00      	nop
90001a4c:	2000102c 	.word	0x2000102c
90001a50:	58001c00 	.word	0x58001c00
90001a54:	20000624 	.word	0x20000624
90001a58:	000186a0 	.word	0x000186a0

90001a5c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
90001a5c:	b580      	push	{r7, lr}
90001a5e:	b082      	sub	sp, #8
90001a60:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
90001a62:	2300      	movs	r3, #0
90001a64:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
90001a66:	4b0d      	ldr	r3, [pc, #52]	@ (90001a9c <BSP_I2C4_DeInit+0x40>)
90001a68:	681b      	ldr	r3, [r3, #0]
90001a6a:	3b01      	subs	r3, #1
90001a6c:	4a0b      	ldr	r2, [pc, #44]	@ (90001a9c <BSP_I2C4_DeInit+0x40>)
90001a6e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90001a70:	4b0a      	ldr	r3, [pc, #40]	@ (90001a9c <BSP_I2C4_DeInit+0x40>)
90001a72:	681b      	ldr	r3, [r3, #0]
90001a74:	2b00      	cmp	r3, #0
90001a76:	d10b      	bne.n	90001a90 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
90001a78:	4809      	ldr	r0, [pc, #36]	@ (90001aa0 <BSP_I2C4_DeInit+0x44>)
90001a7a:	f000 fb9b 	bl	900021b4 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90001a7e:	4808      	ldr	r0, [pc, #32]	@ (90001aa0 <BSP_I2C4_DeInit+0x44>)
90001a80:	f004 fc16 	bl	900062b0 <HAL_I2C_DeInit>
90001a84:	4603      	mov	r3, r0
90001a86:	2b00      	cmp	r3, #0
90001a88:	d002      	beq.n	90001a90 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
90001a8a:	f06f 0307 	mvn.w	r3, #7
90001a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
90001a90:	687b      	ldr	r3, [r7, #4]
}
90001a92:	4618      	mov	r0, r3
90001a94:	3708      	adds	r7, #8
90001a96:	46bd      	mov	sp, r7
90001a98:	bd80      	pop	{r7, pc}
90001a9a:	bf00      	nop
90001a9c:	20000624 	.word	0x20000624
90001aa0:	2000102c 	.word	0x2000102c

90001aa4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001aa4:	b580      	push	{r7, lr}
90001aa6:	b084      	sub	sp, #16
90001aa8:	af00      	add	r7, sp, #0
90001aaa:	6078      	str	r0, [r7, #4]
90001aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001aae:	2300      	movs	r3, #0
90001ab0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001ab2:	687b      	ldr	r3, [r7, #4]
90001ab4:	683a      	ldr	r2, [r7, #0]
90001ab6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001ab8:	687b      	ldr	r3, [r7, #4]
90001aba:	2200      	movs	r2, #0
90001abc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001abe:	687b      	ldr	r3, [r7, #4]
90001ac0:	2201      	movs	r2, #1
90001ac2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001ac4:	687b      	ldr	r3, [r7, #4]
90001ac6:	2200      	movs	r2, #0
90001ac8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001aca:	687b      	ldr	r3, [r7, #4]
90001acc:	2200      	movs	r2, #0
90001ace:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001ad0:	687b      	ldr	r3, [r7, #4]
90001ad2:	2200      	movs	r2, #0
90001ad4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001ad6:	687b      	ldr	r3, [r7, #4]
90001ad8:	2200      	movs	r2, #0
90001ada:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001adc:	687b      	ldr	r3, [r7, #4]
90001ade:	2200      	movs	r2, #0
90001ae0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001ae2:	6878      	ldr	r0, [r7, #4]
90001ae4:	f004 fb48 	bl	90006178 <HAL_I2C_Init>
90001ae8:	4603      	mov	r3, r0
90001aea:	2b00      	cmp	r3, #0
90001aec:	d002      	beq.n	90001af4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001aee:	2301      	movs	r3, #1
90001af0:	73fb      	strb	r3, [r7, #15]
90001af2:	e014      	b.n	90001b1e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001af4:	2300      	movs	r3, #0
90001af6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001af8:	68b9      	ldr	r1, [r7, #8]
90001afa:	6878      	ldr	r0, [r7, #4]
90001afc:	f005 f926 	bl	90006d4c <HAL_I2CEx_ConfigAnalogFilter>
90001b00:	4603      	mov	r3, r0
90001b02:	2b00      	cmp	r3, #0
90001b04:	d002      	beq.n	90001b0c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90001b06:	2301      	movs	r3, #1
90001b08:	73fb      	strb	r3, [r7, #15]
90001b0a:	e008      	b.n	90001b1e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001b0c:	2100      	movs	r1, #0
90001b0e:	6878      	ldr	r0, [r7, #4]
90001b10:	f005 f967 	bl	90006de2 <HAL_I2CEx_ConfigDigitalFilter>
90001b14:	4603      	mov	r3, r0
90001b16:	2b00      	cmp	r3, #0
90001b18:	d001      	beq.n	90001b1e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001b1a:	2301      	movs	r3, #1
90001b1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
90001b20:	4618      	mov	r0, r3
90001b22:	3710      	adds	r7, #16
90001b24:	46bd      	mov	sp, r7
90001b26:	bd80      	pop	{r7, pc}

90001b28 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001b28:	b580      	push	{r7, lr}
90001b2a:	b088      	sub	sp, #32
90001b2c:	af02      	add	r7, sp, #8
90001b2e:	60ba      	str	r2, [r7, #8]
90001b30:	461a      	mov	r2, r3
90001b32:	4603      	mov	r3, r0
90001b34:	81fb      	strh	r3, [r7, #14]
90001b36:	460b      	mov	r3, r1
90001b38:	81bb      	strh	r3, [r7, #12]
90001b3a:	4613      	mov	r3, r2
90001b3c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001b3e:	89b9      	ldrh	r1, [r7, #12]
90001b40:	89f8      	ldrh	r0, [r7, #14]
90001b42:	88fb      	ldrh	r3, [r7, #6]
90001b44:	9300      	str	r3, [sp, #0]
90001b46:	68bb      	ldr	r3, [r7, #8]
90001b48:	2201      	movs	r2, #1
90001b4a:	f000 fb57 	bl	900021fc <I2C4_WriteReg>
90001b4e:	4603      	mov	r3, r0
90001b50:	2b00      	cmp	r3, #0
90001b52:	d102      	bne.n	90001b5a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001b54:	2300      	movs	r3, #0
90001b56:	617b      	str	r3, [r7, #20]
90001b58:	e00c      	b.n	90001b74 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001b5a:	4809      	ldr	r0, [pc, #36]	@ (90001b80 <BSP_I2C4_WriteReg+0x58>)
90001b5c:	f004 fe28 	bl	900067b0 <HAL_I2C_GetError>
90001b60:	4603      	mov	r3, r0
90001b62:	2b04      	cmp	r3, #4
90001b64:	d103      	bne.n	90001b6e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001b66:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001b6a:	617b      	str	r3, [r7, #20]
90001b6c:	e002      	b.n	90001b74 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001b6e:	f06f 0303 	mvn.w	r3, #3
90001b72:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001b74:	697b      	ldr	r3, [r7, #20]
}
90001b76:	4618      	mov	r0, r3
90001b78:	3718      	adds	r7, #24
90001b7a:	46bd      	mov	sp, r7
90001b7c:	bd80      	pop	{r7, pc}
90001b7e:	bf00      	nop
90001b80:	2000102c 	.word	0x2000102c

90001b84 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001b84:	b580      	push	{r7, lr}
90001b86:	b088      	sub	sp, #32
90001b88:	af02      	add	r7, sp, #8
90001b8a:	60ba      	str	r2, [r7, #8]
90001b8c:	461a      	mov	r2, r3
90001b8e:	4603      	mov	r3, r0
90001b90:	81fb      	strh	r3, [r7, #14]
90001b92:	460b      	mov	r3, r1
90001b94:	81bb      	strh	r3, [r7, #12]
90001b96:	4613      	mov	r3, r2
90001b98:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001b9a:	89b9      	ldrh	r1, [r7, #12]
90001b9c:	89f8      	ldrh	r0, [r7, #14]
90001b9e:	88fb      	ldrh	r3, [r7, #6]
90001ba0:	9300      	str	r3, [sp, #0]
90001ba2:	68bb      	ldr	r3, [r7, #8]
90001ba4:	2201      	movs	r2, #1
90001ba6:	f000 fb4f 	bl	90002248 <I2C4_ReadReg>
90001baa:	4603      	mov	r3, r0
90001bac:	2b00      	cmp	r3, #0
90001bae:	d102      	bne.n	90001bb6 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001bb0:	2300      	movs	r3, #0
90001bb2:	617b      	str	r3, [r7, #20]
90001bb4:	e00c      	b.n	90001bd0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001bb6:	4809      	ldr	r0, [pc, #36]	@ (90001bdc <BSP_I2C4_ReadReg+0x58>)
90001bb8:	f004 fdfa 	bl	900067b0 <HAL_I2C_GetError>
90001bbc:	4603      	mov	r3, r0
90001bbe:	2b04      	cmp	r3, #4
90001bc0:	d103      	bne.n	90001bca <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001bc2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001bc6:	617b      	str	r3, [r7, #20]
90001bc8:	e002      	b.n	90001bd0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001bca:	f06f 0303 	mvn.w	r3, #3
90001bce:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001bd0:	697b      	ldr	r3, [r7, #20]
}
90001bd2:	4618      	mov	r0, r3
90001bd4:	3718      	adds	r7, #24
90001bd6:	46bd      	mov	sp, r7
90001bd8:	bd80      	pop	{r7, pc}
90001bda:	bf00      	nop
90001bdc:	2000102c 	.word	0x2000102c

90001be0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
90001be0:	b580      	push	{r7, lr}
90001be2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
90001be4:	f001 fdc8 	bl	90003778 <HAL_GetTick>
90001be8:	4603      	mov	r3, r0
}
90001bea:	4618      	mov	r0, r3
90001bec:	bd80      	pop	{r7, pc}
	...

90001bf0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001bf0:	b580      	push	{r7, lr}
90001bf2:	b086      	sub	sp, #24
90001bf4:	af00      	add	r7, sp, #0
90001bf6:	6078      	str	r0, [r7, #4]
90001bf8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001bfa:	2300      	movs	r3, #0
90001bfc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001bfe:	687b      	ldr	r3, [r7, #4]
90001c00:	2b00      	cmp	r3, #0
90001c02:	d06b      	beq.n	90001cdc <I2C_GetTiming+0xec>
90001c04:	683b      	ldr	r3, [r7, #0]
90001c06:	2b00      	cmp	r3, #0
90001c08:	d068      	beq.n	90001cdc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001c0a:	2300      	movs	r3, #0
90001c0c:	613b      	str	r3, [r7, #16]
90001c0e:	e060      	b.n	90001cd2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001c10:	4a35      	ldr	r2, [pc, #212]	@ (90001ce8 <I2C_GetTiming+0xf8>)
90001c12:	693b      	ldr	r3, [r7, #16]
90001c14:	212c      	movs	r1, #44	@ 0x2c
90001c16:	fb01 f303 	mul.w	r3, r1, r3
90001c1a:	4413      	add	r3, r2
90001c1c:	3304      	adds	r3, #4
90001c1e:	681b      	ldr	r3, [r3, #0]
90001c20:	683a      	ldr	r2, [r7, #0]
90001c22:	429a      	cmp	r2, r3
90001c24:	d352      	bcc.n	90001ccc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001c26:	4a30      	ldr	r2, [pc, #192]	@ (90001ce8 <I2C_GetTiming+0xf8>)
90001c28:	693b      	ldr	r3, [r7, #16]
90001c2a:	212c      	movs	r1, #44	@ 0x2c
90001c2c:	fb01 f303 	mul.w	r3, r1, r3
90001c30:	4413      	add	r3, r2
90001c32:	3308      	adds	r3, #8
90001c34:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001c36:	683a      	ldr	r2, [r7, #0]
90001c38:	429a      	cmp	r2, r3
90001c3a:	d847      	bhi.n	90001ccc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001c3c:	6939      	ldr	r1, [r7, #16]
90001c3e:	6878      	ldr	r0, [r7, #4]
90001c40:	f000 f856 	bl	90001cf0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001c44:	6939      	ldr	r1, [r7, #16]
90001c46:	6878      	ldr	r0, [r7, #4]
90001c48:	f000 f940 	bl	90001ecc <I2C_Compute_SCLL_SCLH>
90001c4c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001c4e:	68fb      	ldr	r3, [r7, #12]
90001c50:	2b7f      	cmp	r3, #127	@ 0x7f
90001c52:	d842      	bhi.n	90001cda <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001c54:	4925      	ldr	r1, [pc, #148]	@ (90001cec <I2C_GetTiming+0xfc>)
90001c56:	68fa      	ldr	r2, [r7, #12]
90001c58:	4613      	mov	r3, r2
90001c5a:	009b      	lsls	r3, r3, #2
90001c5c:	4413      	add	r3, r2
90001c5e:	009b      	lsls	r3, r3, #2
90001c60:	440b      	add	r3, r1
90001c62:	681b      	ldr	r3, [r3, #0]
90001c64:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001c66:	4821      	ldr	r0, [pc, #132]	@ (90001cec <I2C_GetTiming+0xfc>)
90001c68:	68fa      	ldr	r2, [r7, #12]
90001c6a:	4613      	mov	r3, r2
90001c6c:	009b      	lsls	r3, r3, #2
90001c6e:	4413      	add	r3, r2
90001c70:	009b      	lsls	r3, r3, #2
90001c72:	4403      	add	r3, r0
90001c74:	3304      	adds	r3, #4
90001c76:	681b      	ldr	r3, [r3, #0]
90001c78:	051b      	lsls	r3, r3, #20
90001c7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001c7e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001c80:	481a      	ldr	r0, [pc, #104]	@ (90001cec <I2C_GetTiming+0xfc>)
90001c82:	68fa      	ldr	r2, [r7, #12]
90001c84:	4613      	mov	r3, r2
90001c86:	009b      	lsls	r3, r3, #2
90001c88:	4413      	add	r3, r2
90001c8a:	009b      	lsls	r3, r3, #2
90001c8c:	4403      	add	r3, r0
90001c8e:	3308      	adds	r3, #8
90001c90:	681b      	ldr	r3, [r3, #0]
90001c92:	041b      	lsls	r3, r3, #16
90001c94:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001c98:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001c9a:	4814      	ldr	r0, [pc, #80]	@ (90001cec <I2C_GetTiming+0xfc>)
90001c9c:	68fa      	ldr	r2, [r7, #12]
90001c9e:	4613      	mov	r3, r2
90001ca0:	009b      	lsls	r3, r3, #2
90001ca2:	4413      	add	r3, r2
90001ca4:	009b      	lsls	r3, r3, #2
90001ca6:	4403      	add	r3, r0
90001ca8:	330c      	adds	r3, #12
90001caa:	681b      	ldr	r3, [r3, #0]
90001cac:	021b      	lsls	r3, r3, #8
90001cae:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001cb0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001cb2:	480e      	ldr	r0, [pc, #56]	@ (90001cec <I2C_GetTiming+0xfc>)
90001cb4:	68fa      	ldr	r2, [r7, #12]
90001cb6:	4613      	mov	r3, r2
90001cb8:	009b      	lsls	r3, r3, #2
90001cba:	4413      	add	r3, r2
90001cbc:	009b      	lsls	r3, r3, #2
90001cbe:	4403      	add	r3, r0
90001cc0:	3310      	adds	r3, #16
90001cc2:	681b      	ldr	r3, [r3, #0]
90001cc4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001cc6:	430b      	orrs	r3, r1
90001cc8:	617b      	str	r3, [r7, #20]
        }
        break;
90001cca:	e006      	b.n	90001cda <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001ccc:	693b      	ldr	r3, [r7, #16]
90001cce:	3301      	adds	r3, #1
90001cd0:	613b      	str	r3, [r7, #16]
90001cd2:	693b      	ldr	r3, [r7, #16]
90001cd4:	2b02      	cmp	r3, #2
90001cd6:	d99b      	bls.n	90001c10 <I2C_GetTiming+0x20>
90001cd8:	e000      	b.n	90001cdc <I2C_GetTiming+0xec>
        break;
90001cda:	bf00      	nop
      }
    }
  }

  return ret;
90001cdc:	697b      	ldr	r3, [r7, #20]
}
90001cde:	4618      	mov	r0, r3
90001ce0:	3718      	adds	r7, #24
90001ce2:	46bd      	mov	sp, r7
90001ce4:	bd80      	pop	{r7, pc}
90001ce6:	bf00      	nop
90001ce8:	9000d294 	.word	0x9000d294
90001cec:	20000628 	.word	0x20000628

90001cf0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001cf0:	b480      	push	{r7}
90001cf2:	b08f      	sub	sp, #60	@ 0x3c
90001cf4:	af00      	add	r7, sp, #0
90001cf6:	6078      	str	r0, [r7, #4]
90001cf8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001cfa:	2310      	movs	r3, #16
90001cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001cfe:	687b      	ldr	r3, [r7, #4]
90001d00:	085a      	lsrs	r2, r3, #1
90001d02:	4b6e      	ldr	r3, [pc, #440]	@ (90001ebc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001d04:	4413      	add	r3, r2
90001d06:	687a      	ldr	r2, [r7, #4]
90001d08:	fbb3 f3f2 	udiv	r3, r3, r2
90001d0c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001d0e:	2332      	movs	r3, #50	@ 0x32
90001d10:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001d12:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001d16:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001d18:	4a69      	ldr	r2, [pc, #420]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d1a:	683b      	ldr	r3, [r7, #0]
90001d1c:	212c      	movs	r1, #44	@ 0x2c
90001d1e:	fb01 f303 	mul.w	r3, r1, r3
90001d22:	4413      	add	r3, r2
90001d24:	3324      	adds	r3, #36	@ 0x24
90001d26:	681b      	ldr	r3, [r3, #0]
90001d28:	4618      	mov	r0, r3
90001d2a:	4a65      	ldr	r2, [pc, #404]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d2c:	683b      	ldr	r3, [r7, #0]
90001d2e:	212c      	movs	r1, #44	@ 0x2c
90001d30:	fb01 f303 	mul.w	r3, r1, r3
90001d34:	4413      	add	r3, r2
90001d36:	330c      	adds	r3, #12
90001d38:	681b      	ldr	r3, [r3, #0]
90001d3a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001d3c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001d3e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001d40:	495f      	ldr	r1, [pc, #380]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d42:	683b      	ldr	r3, [r7, #0]
90001d44:	202c      	movs	r0, #44	@ 0x2c
90001d46:	fb00 f303 	mul.w	r3, r0, r3
90001d4a:	440b      	add	r3, r1
90001d4c:	3328      	adds	r3, #40	@ 0x28
90001d4e:	681b      	ldr	r3, [r3, #0]
90001d50:	3303      	adds	r3, #3
90001d52:	69f9      	ldr	r1, [r7, #28]
90001d54:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001d58:	1ad3      	subs	r3, r2, r3
90001d5a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001d5c:	4a58      	ldr	r2, [pc, #352]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d5e:	683b      	ldr	r3, [r7, #0]
90001d60:	212c      	movs	r1, #44	@ 0x2c
90001d62:	fb01 f303 	mul.w	r3, r1, r3
90001d66:	4413      	add	r3, r2
90001d68:	3310      	adds	r3, #16
90001d6a:	681b      	ldr	r3, [r3, #0]
90001d6c:	4618      	mov	r0, r3
90001d6e:	4a54      	ldr	r2, [pc, #336]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d70:	683b      	ldr	r3, [r7, #0]
90001d72:	212c      	movs	r1, #44	@ 0x2c
90001d74:	fb01 f303 	mul.w	r3, r1, r3
90001d78:	4413      	add	r3, r2
90001d7a:	3320      	adds	r3, #32
90001d7c:	681b      	ldr	r3, [r3, #0]
90001d7e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001d80:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001d82:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001d84:	494e      	ldr	r1, [pc, #312]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d86:	683b      	ldr	r3, [r7, #0]
90001d88:	202c      	movs	r0, #44	@ 0x2c
90001d8a:	fb00 f303 	mul.w	r3, r0, r3
90001d8e:	440b      	add	r3, r1
90001d90:	3328      	adds	r3, #40	@ 0x28
90001d92:	681b      	ldr	r3, [r3, #0]
90001d94:	3304      	adds	r3, #4
90001d96:	69f9      	ldr	r1, [r7, #28]
90001d98:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001d9c:	1ad3      	subs	r3, r2, r3
90001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001da0:	4a47      	ldr	r2, [pc, #284]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001da2:	683b      	ldr	r3, [r7, #0]
90001da4:	212c      	movs	r1, #44	@ 0x2c
90001da6:	fb01 f303 	mul.w	r3, r1, r3
90001daa:	4413      	add	r3, r2
90001dac:	3320      	adds	r3, #32
90001dae:	681b      	ldr	r3, [r3, #0]
90001db0:	4618      	mov	r0, r3
90001db2:	4a43      	ldr	r2, [pc, #268]	@ (90001ec0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001db4:	683b      	ldr	r3, [r7, #0]
90001db6:	212c      	movs	r1, #44	@ 0x2c
90001db8:	fb01 f303 	mul.w	r3, r1, r3
90001dbc:	4413      	add	r3, r2
90001dbe:	3314      	adds	r3, #20
90001dc0:	681b      	ldr	r3, [r3, #0]
90001dc2:	4403      	add	r3, r0
90001dc4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001dc8:	2b00      	cmp	r3, #0
90001dca:	dc01      	bgt.n	90001dd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001dcc:	2300      	movs	r3, #0
90001dce:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001dd2:	2b00      	cmp	r3, #0
90001dd4:	dc01      	bgt.n	90001dda <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001dd6:	2300      	movs	r3, #0
90001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001dda:	2300      	movs	r3, #0
90001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
90001dde:	e062      	b.n	90001ea6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001de0:	2300      	movs	r3, #0
90001de2:	627b      	str	r3, [r7, #36]	@ 0x24
90001de4:	e059      	b.n	90001e9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001de8:	3301      	adds	r3, #1
90001dea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001dec:	3201      	adds	r2, #1
90001dee:	fb03 f202 	mul.w	r2, r3, r2
90001df2:	69fb      	ldr	r3, [r7, #28]
90001df4:	fb02 f303 	mul.w	r3, r2, r3
90001df8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001dfa:	693b      	ldr	r3, [r7, #16]
90001dfc:	68fa      	ldr	r2, [r7, #12]
90001dfe:	429a      	cmp	r2, r3
90001e00:	d348      	bcc.n	90001e94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001e02:	2300      	movs	r3, #0
90001e04:	623b      	str	r3, [r7, #32]
90001e06:	e042      	b.n	90001e8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e0a:	3301      	adds	r3, #1
90001e0c:	6a3a      	ldr	r2, [r7, #32]
90001e0e:	fb03 f202 	mul.w	r2, r3, r2
90001e12:	69fb      	ldr	r3, [r7, #28]
90001e14:	fb02 f303 	mul.w	r3, r2, r3
90001e18:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e1c:	68ba      	ldr	r2, [r7, #8]
90001e1e:	429a      	cmp	r2, r3
90001e20:	d332      	bcc.n	90001e88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001e24:	68ba      	ldr	r2, [r7, #8]
90001e26:	429a      	cmp	r2, r3
90001e28:	d82e      	bhi.n	90001e88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001e2e:	429a      	cmp	r2, r3
90001e30:	d02a      	beq.n	90001e88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001e32:	4b24      	ldr	r3, [pc, #144]	@ (90001ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001e34:	681a      	ldr	r2, [r3, #0]
90001e36:	4924      	ldr	r1, [pc, #144]	@ (90001ec8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001e38:	4613      	mov	r3, r2
90001e3a:	009b      	lsls	r3, r3, #2
90001e3c:	4413      	add	r3, r2
90001e3e:	009b      	lsls	r3, r3, #2
90001e40:	440b      	add	r3, r1
90001e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001e44:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001e46:	4b1f      	ldr	r3, [pc, #124]	@ (90001ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001e48:	681a      	ldr	r2, [r3, #0]
90001e4a:	491f      	ldr	r1, [pc, #124]	@ (90001ec8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001e4c:	4613      	mov	r3, r2
90001e4e:	009b      	lsls	r3, r3, #2
90001e50:	4413      	add	r3, r2
90001e52:	009b      	lsls	r3, r3, #2
90001e54:	440b      	add	r3, r1
90001e56:	3304      	adds	r3, #4
90001e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001e5a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001e5c:	4b19      	ldr	r3, [pc, #100]	@ (90001ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001e5e:	681a      	ldr	r2, [r3, #0]
90001e60:	4919      	ldr	r1, [pc, #100]	@ (90001ec8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001e62:	4613      	mov	r3, r2
90001e64:	009b      	lsls	r3, r3, #2
90001e66:	4413      	add	r3, r2
90001e68:	009b      	lsls	r3, r3, #2
90001e6a:	440b      	add	r3, r1
90001e6c:	3308      	adds	r3, #8
90001e6e:	6a3a      	ldr	r2, [r7, #32]
90001e70:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e74:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001e76:	4b13      	ldr	r3, [pc, #76]	@ (90001ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001e78:	681b      	ldr	r3, [r3, #0]
90001e7a:	3301      	adds	r3, #1
90001e7c:	4a11      	ldr	r2, [pc, #68]	@ (90001ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001e7e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001e80:	4b10      	ldr	r3, [pc, #64]	@ (90001ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001e82:	681b      	ldr	r3, [r3, #0]
90001e84:	2b7f      	cmp	r3, #127	@ 0x7f
90001e86:	d812      	bhi.n	90001eae <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001e88:	6a3b      	ldr	r3, [r7, #32]
90001e8a:	3301      	adds	r3, #1
90001e8c:	623b      	str	r3, [r7, #32]
90001e8e:	6a3b      	ldr	r3, [r7, #32]
90001e90:	2b0f      	cmp	r3, #15
90001e92:	d9b9      	bls.n	90001e08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001e96:	3301      	adds	r3, #1
90001e98:	627b      	str	r3, [r7, #36]	@ 0x24
90001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001e9c:	2b0f      	cmp	r3, #15
90001e9e:	d9a2      	bls.n	90001de6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001ea2:	3301      	adds	r3, #1
90001ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
90001ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001ea8:	2b0f      	cmp	r3, #15
90001eaa:	d999      	bls.n	90001de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001eac:	e000      	b.n	90001eb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001eae:	bf00      	nop
          }
        }
      }
    }
  }
}
90001eb0:	373c      	adds	r7, #60	@ 0x3c
90001eb2:	46bd      	mov	sp, r7
90001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001eb8:	4770      	bx	lr
90001eba:	bf00      	nop
90001ebc:	3b9aca00 	.word	0x3b9aca00
90001ec0:	9000d294 	.word	0x9000d294
90001ec4:	20001028 	.word	0x20001028
90001ec8:	20000628 	.word	0x20000628

90001ecc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001ecc:	b480      	push	{r7}
90001ece:	b093      	sub	sp, #76	@ 0x4c
90001ed0:	af00      	add	r7, sp, #0
90001ed2:	6078      	str	r0, [r7, #4]
90001ed4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001ed6:	f04f 33ff 	mov.w	r3, #4294967295
90001eda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001edc:	687b      	ldr	r3, [r7, #4]
90001ede:	085a      	lsrs	r2, r3, #1
90001ee0:	4b7a      	ldr	r3, [pc, #488]	@ (900020cc <I2C_Compute_SCLL_SCLH+0x200>)
90001ee2:	4413      	add	r3, r2
90001ee4:	687a      	ldr	r2, [r7, #4]
90001ee6:	fbb3 f3f2 	udiv	r3, r3, r2
90001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001eec:	4a78      	ldr	r2, [pc, #480]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90001eee:	683b      	ldr	r3, [r7, #0]
90001ef0:	212c      	movs	r1, #44	@ 0x2c
90001ef2:	fb01 f303 	mul.w	r3, r1, r3
90001ef6:	4413      	add	r3, r2
90001ef8:	681b      	ldr	r3, [r3, #0]
90001efa:	085a      	lsrs	r2, r3, #1
90001efc:	4b73      	ldr	r3, [pc, #460]	@ (900020cc <I2C_Compute_SCLL_SCLH+0x200>)
90001efe:	4413      	add	r3, r2
90001f00:	4973      	ldr	r1, [pc, #460]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90001f02:	683a      	ldr	r2, [r7, #0]
90001f04:	202c      	movs	r0, #44	@ 0x2c
90001f06:	fb00 f202 	mul.w	r2, r0, r2
90001f0a:	440a      	add	r2, r1
90001f0c:	6812      	ldr	r2, [r2, #0]
90001f0e:	fbb3 f3f2 	udiv	r3, r3, r2
90001f12:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001f14:	2332      	movs	r3, #50	@ 0x32
90001f16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001f18:	4a6d      	ldr	r2, [pc, #436]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90001f1a:	683b      	ldr	r3, [r7, #0]
90001f1c:	212c      	movs	r1, #44	@ 0x2c
90001f1e:	fb01 f303 	mul.w	r3, r1, r3
90001f22:	4413      	add	r3, r2
90001f24:	3328      	adds	r3, #40	@ 0x28
90001f26:	681a      	ldr	r2, [r3, #0]
90001f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001f2a:	fb02 f303 	mul.w	r3, r2, r3
90001f2e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001f30:	4a67      	ldr	r2, [pc, #412]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90001f32:	683b      	ldr	r3, [r7, #0]
90001f34:	212c      	movs	r1, #44	@ 0x2c
90001f36:	fb01 f303 	mul.w	r3, r1, r3
90001f3a:	4413      	add	r3, r2
90001f3c:	3304      	adds	r3, #4
90001f3e:	681b      	ldr	r3, [r3, #0]
90001f40:	4a62      	ldr	r2, [pc, #392]	@ (900020cc <I2C_Compute_SCLL_SCLH+0x200>)
90001f42:	fbb2 f3f3 	udiv	r3, r2, r3
90001f46:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001f48:	4a61      	ldr	r2, [pc, #388]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90001f4a:	683b      	ldr	r3, [r7, #0]
90001f4c:	212c      	movs	r1, #44	@ 0x2c
90001f4e:	fb01 f303 	mul.w	r3, r1, r3
90001f52:	4413      	add	r3, r2
90001f54:	3308      	adds	r3, #8
90001f56:	681b      	ldr	r3, [r3, #0]
90001f58:	4a5c      	ldr	r2, [pc, #368]	@ (900020cc <I2C_Compute_SCLL_SCLH+0x200>)
90001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
90001f5e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001f62:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001f64:	2300      	movs	r3, #0
90001f66:	637b      	str	r3, [r7, #52]	@ 0x34
90001f68:	e0a3      	b.n	900020b2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001f6a:	495a      	ldr	r1, [pc, #360]	@ (900020d4 <I2C_Compute_SCLL_SCLH+0x208>)
90001f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001f6e:	4613      	mov	r3, r2
90001f70:	009b      	lsls	r3, r3, #2
90001f72:	4413      	add	r3, r2
90001f74:	009b      	lsls	r3, r3, #2
90001f76:	440b      	add	r3, r1
90001f78:	681b      	ldr	r3, [r3, #0]
90001f7a:	1c5a      	adds	r2, r3, #1
90001f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001f7e:	fb02 f303 	mul.w	r3, r2, r3
90001f82:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001f84:	2300      	movs	r3, #0
90001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001f88:	e08c      	b.n	900020a4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001f8c:	6a3b      	ldr	r3, [r7, #32]
90001f8e:	441a      	add	r2, r3
90001f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001f92:	3301      	adds	r3, #1
90001f94:	6979      	ldr	r1, [r7, #20]
90001f96:	fb03 f101 	mul.w	r1, r3, r1
90001f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001f9c:	005b      	lsls	r3, r3, #1
90001f9e:	440b      	add	r3, r1
90001fa0:	4413      	add	r3, r2
90001fa2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001fa4:	4a4a      	ldr	r2, [pc, #296]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90001fa6:	683b      	ldr	r3, [r7, #0]
90001fa8:	212c      	movs	r1, #44	@ 0x2c
90001faa:	fb01 f303 	mul.w	r3, r1, r3
90001fae:	4413      	add	r3, r2
90001fb0:	3318      	adds	r3, #24
90001fb2:	681b      	ldr	r3, [r3, #0]
90001fb4:	693a      	ldr	r2, [r7, #16]
90001fb6:	429a      	cmp	r2, r3
90001fb8:	d971      	bls.n	9000209e <I2C_Compute_SCLL_SCLH+0x1d2>
90001fba:	693a      	ldr	r2, [r7, #16]
90001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001fbe:	1ad2      	subs	r2, r2, r3
90001fc0:	6a3b      	ldr	r3, [r7, #32]
90001fc2:	1ad3      	subs	r3, r2, r3
90001fc4:	089b      	lsrs	r3, r3, #2
90001fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001fc8:	429a      	cmp	r2, r3
90001fca:	d268      	bcs.n	9000209e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001fcc:	2300      	movs	r3, #0
90001fce:	63bb      	str	r3, [r7, #56]	@ 0x38
90001fd0:	e062      	b.n	90002098 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001fd4:	6a3b      	ldr	r3, [r7, #32]
90001fd6:	441a      	add	r2, r3
90001fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001fda:	3301      	adds	r3, #1
90001fdc:	6979      	ldr	r1, [r7, #20]
90001fde:	fb03 f101 	mul.w	r1, r3, r1
90001fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001fe4:	005b      	lsls	r3, r3, #1
90001fe6:	440b      	add	r3, r1
90001fe8:	4413      	add	r3, r2
90001fea:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001fec:	693a      	ldr	r2, [r7, #16]
90001fee:	68fb      	ldr	r3, [r7, #12]
90001ff0:	441a      	add	r2, r3
90001ff2:	4937      	ldr	r1, [pc, #220]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90001ff4:	683b      	ldr	r3, [r7, #0]
90001ff6:	202c      	movs	r0, #44	@ 0x2c
90001ff8:	fb00 f303 	mul.w	r3, r0, r3
90001ffc:	440b      	add	r3, r1
90001ffe:	3320      	adds	r3, #32
90002000:	681b      	ldr	r3, [r3, #0]
90002002:	441a      	add	r2, r3
90002004:	4932      	ldr	r1, [pc, #200]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
90002006:	683b      	ldr	r3, [r7, #0]
90002008:	202c      	movs	r0, #44	@ 0x2c
9000200a:	fb00 f303 	mul.w	r3, r0, r3
9000200e:	440b      	add	r3, r1
90002010:	3324      	adds	r3, #36	@ 0x24
90002012:	681b      	ldr	r3, [r3, #0]
90002014:	4413      	add	r3, r2
90002016:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90002018:	68ba      	ldr	r2, [r7, #8]
9000201a:	69bb      	ldr	r3, [r7, #24]
9000201c:	429a      	cmp	r2, r3
9000201e:	d338      	bcc.n	90002092 <I2C_Compute_SCLL_SCLH+0x1c6>
90002020:	68ba      	ldr	r2, [r7, #8]
90002022:	69fb      	ldr	r3, [r7, #28]
90002024:	429a      	cmp	r2, r3
90002026:	d834      	bhi.n	90002092 <I2C_Compute_SCLL_SCLH+0x1c6>
90002028:	4a29      	ldr	r2, [pc, #164]	@ (900020d0 <I2C_Compute_SCLL_SCLH+0x204>)
9000202a:	683b      	ldr	r3, [r7, #0]
9000202c:	212c      	movs	r1, #44	@ 0x2c
9000202e:	fb01 f303 	mul.w	r3, r1, r3
90002032:	4413      	add	r3, r2
90002034:	331c      	adds	r3, #28
90002036:	681b      	ldr	r3, [r3, #0]
90002038:	68fa      	ldr	r2, [r7, #12]
9000203a:	429a      	cmp	r2, r3
9000203c:	d329      	bcc.n	90002092 <I2C_Compute_SCLL_SCLH+0x1c6>
9000203e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002040:	68fb      	ldr	r3, [r7, #12]
90002042:	429a      	cmp	r2, r3
90002044:	d225      	bcs.n	90002092 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90002046:	68ba      	ldr	r2, [r7, #8]
90002048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000204a:	1ad3      	subs	r3, r2, r3
9000204c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
9000204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90002050:	2b00      	cmp	r3, #0
90002052:	da02      	bge.n	9000205a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90002056:	425b      	negs	r3, r3
90002058:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
9000205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000205c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000205e:	429a      	cmp	r2, r3
90002060:	d917      	bls.n	90002092 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90002062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90002064:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90002066:	491b      	ldr	r1, [pc, #108]	@ (900020d4 <I2C_Compute_SCLL_SCLH+0x208>)
90002068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
9000206a:	4613      	mov	r3, r2
9000206c:	009b      	lsls	r3, r3, #2
9000206e:	4413      	add	r3, r2
90002070:	009b      	lsls	r3, r3, #2
90002072:	440b      	add	r3, r1
90002074:	3310      	adds	r3, #16
90002076:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90002078:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
9000207a:	4916      	ldr	r1, [pc, #88]	@ (900020d4 <I2C_Compute_SCLL_SCLH+0x208>)
9000207c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
9000207e:	4613      	mov	r3, r2
90002080:	009b      	lsls	r3, r3, #2
90002082:	4413      	add	r3, r2
90002084:	009b      	lsls	r3, r3, #2
90002086:	440b      	add	r3, r1
90002088:	330c      	adds	r3, #12
9000208a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000208c:	601a      	str	r2, [r3, #0]
              ret = count;
9000208e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90002090:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90002092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90002094:	3301      	adds	r3, #1
90002096:	63bb      	str	r3, [r7, #56]	@ 0x38
90002098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000209a:	2bff      	cmp	r3, #255	@ 0xff
9000209c:	d999      	bls.n	90001fd2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
9000209e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900020a0:	3301      	adds	r3, #1
900020a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
900020a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900020a6:	2bff      	cmp	r3, #255	@ 0xff
900020a8:	f67f af6f 	bls.w	90001f8a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900020ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
900020ae:	3301      	adds	r3, #1
900020b0:	637b      	str	r3, [r7, #52]	@ 0x34
900020b2:	4b09      	ldr	r3, [pc, #36]	@ (900020d8 <I2C_Compute_SCLL_SCLH+0x20c>)
900020b4:	681b      	ldr	r3, [r3, #0]
900020b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900020b8:	429a      	cmp	r2, r3
900020ba:	f4ff af56 	bcc.w	90001f6a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
900020be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
900020c0:	4618      	mov	r0, r3
900020c2:	374c      	adds	r7, #76	@ 0x4c
900020c4:	46bd      	mov	sp, r7
900020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900020ca:	4770      	bx	lr
900020cc:	3b9aca00 	.word	0x3b9aca00
900020d0:	9000d294 	.word	0x9000d294
900020d4:	20000628 	.word	0x20000628
900020d8:	20001028 	.word	0x20001028

900020dc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
900020dc:	b580      	push	{r7, lr}
900020de:	b08a      	sub	sp, #40	@ 0x28
900020e0:	af00      	add	r7, sp, #0
900020e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
900020e4:	4b31      	ldr	r3, [pc, #196]	@ (900021ac <I2C4_MspInit+0xd0>)
900020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900020ea:	4a30      	ldr	r2, [pc, #192]	@ (900021ac <I2C4_MspInit+0xd0>)
900020ec:	f043 0308 	orr.w	r3, r3, #8
900020f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900020f4:	4b2d      	ldr	r3, [pc, #180]	@ (900021ac <I2C4_MspInit+0xd0>)
900020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900020fa:	f003 0308 	and.w	r3, r3, #8
900020fe:	613b      	str	r3, [r7, #16]
90002100:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90002102:	4b2a      	ldr	r3, [pc, #168]	@ (900021ac <I2C4_MspInit+0xd0>)
90002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002108:	4a28      	ldr	r2, [pc, #160]	@ (900021ac <I2C4_MspInit+0xd0>)
9000210a:	f043 0308 	orr.w	r3, r3, #8
9000210e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002112:	4b26      	ldr	r3, [pc, #152]	@ (900021ac <I2C4_MspInit+0xd0>)
90002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002118:	f003 0308 	and.w	r3, r3, #8
9000211c:	60fb      	str	r3, [r7, #12]
9000211e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90002120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90002124:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90002126:	2312      	movs	r3, #18
90002128:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
9000212a:	2300      	movs	r3, #0
9000212c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000212e:	2302      	movs	r3, #2
90002130:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90002132:	2304      	movs	r3, #4
90002134:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90002136:	f107 0314 	add.w	r3, r7, #20
9000213a:	4619      	mov	r1, r3
9000213c:	481c      	ldr	r0, [pc, #112]	@ (900021b0 <I2C4_MspInit+0xd4>)
9000213e:	f001 ffa1 	bl	90004084 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90002142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90002146:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90002148:	2312      	movs	r3, #18
9000214a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
9000214c:	2300      	movs	r3, #0
9000214e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002150:	2302      	movs	r3, #2
90002152:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90002154:	2304      	movs	r3, #4
90002156:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90002158:	f107 0314 	add.w	r3, r7, #20
9000215c:	4619      	mov	r1, r3
9000215e:	4814      	ldr	r0, [pc, #80]	@ (900021b0 <I2C4_MspInit+0xd4>)
90002160:	f001 ff90 	bl	90004084 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90002164:	4b11      	ldr	r3, [pc, #68]	@ (900021ac <I2C4_MspInit+0xd0>)
90002166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000216a:	4a10      	ldr	r2, [pc, #64]	@ (900021ac <I2C4_MspInit+0xd0>)
9000216c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002170:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90002174:	4b0d      	ldr	r3, [pc, #52]	@ (900021ac <I2C4_MspInit+0xd0>)
90002176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000217a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000217e:	60bb      	str	r3, [r7, #8]
90002180:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90002182:	4b0a      	ldr	r3, [pc, #40]	@ (900021ac <I2C4_MspInit+0xd0>)
90002184:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002188:	4a08      	ldr	r2, [pc, #32]	@ (900021ac <I2C4_MspInit+0xd0>)
9000218a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000218e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90002192:	4b06      	ldr	r3, [pc, #24]	@ (900021ac <I2C4_MspInit+0xd0>)
90002194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002198:	4a04      	ldr	r2, [pc, #16]	@ (900021ac <I2C4_MspInit+0xd0>)
9000219a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000219e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
900021a2:	bf00      	nop
900021a4:	3728      	adds	r7, #40	@ 0x28
900021a6:	46bd      	mov	sp, r7
900021a8:	bd80      	pop	{r7, pc}
900021aa:	bf00      	nop
900021ac:	58024400 	.word	0x58024400
900021b0:	58020c00 	.word	0x58020c00

900021b4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
900021b4:	b580      	push	{r7, lr}
900021b6:	b088      	sub	sp, #32
900021b8:	af00      	add	r7, sp, #0
900021ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
900021bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
900021c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
900021c2:	68fb      	ldr	r3, [r7, #12]
900021c4:	4619      	mov	r1, r3
900021c6:	480b      	ldr	r0, [pc, #44]	@ (900021f4 <I2C4_MspDeInit+0x40>)
900021c8:	f002 f90c 	bl	900043e4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
900021cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
900021d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
900021d2:	68fb      	ldr	r3, [r7, #12]
900021d4:	4619      	mov	r1, r3
900021d6:	4807      	ldr	r0, [pc, #28]	@ (900021f4 <I2C4_MspDeInit+0x40>)
900021d8:	f002 f904 	bl	900043e4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
900021dc:	4b06      	ldr	r3, [pc, #24]	@ (900021f8 <I2C4_MspDeInit+0x44>)
900021de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900021e2:	4a05      	ldr	r2, [pc, #20]	@ (900021f8 <I2C4_MspDeInit+0x44>)
900021e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
900021e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
900021ec:	bf00      	nop
900021ee:	3720      	adds	r7, #32
900021f0:	46bd      	mov	sp, r7
900021f2:	bd80      	pop	{r7, pc}
900021f4:	58020c00 	.word	0x58020c00
900021f8:	58024400 	.word	0x58024400

900021fc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
900021fc:	b580      	push	{r7, lr}
900021fe:	b088      	sub	sp, #32
90002200:	af04      	add	r7, sp, #16
90002202:	607b      	str	r3, [r7, #4]
90002204:	4603      	mov	r3, r0
90002206:	81fb      	strh	r3, [r7, #14]
90002208:	460b      	mov	r3, r1
9000220a:	81bb      	strh	r3, [r7, #12]
9000220c:	4613      	mov	r3, r2
9000220e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90002210:	8978      	ldrh	r0, [r7, #10]
90002212:	89ba      	ldrh	r2, [r7, #12]
90002214:	89f9      	ldrh	r1, [r7, #14]
90002216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000221a:	9302      	str	r3, [sp, #8]
9000221c:	8b3b      	ldrh	r3, [r7, #24]
9000221e:	9301      	str	r3, [sp, #4]
90002220:	687b      	ldr	r3, [r7, #4]
90002222:	9300      	str	r3, [sp, #0]
90002224:	4603      	mov	r3, r0
90002226:	4807      	ldr	r0, [pc, #28]	@ (90002244 <I2C4_WriteReg+0x48>)
90002228:	f004 f886 	bl	90006338 <HAL_I2C_Mem_Write>
9000222c:	4603      	mov	r3, r0
9000222e:	2b00      	cmp	r3, #0
90002230:	d101      	bne.n	90002236 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
90002232:	2300      	movs	r3, #0
90002234:	e001      	b.n	9000223a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90002236:	f06f 0307 	mvn.w	r3, #7
}
9000223a:	4618      	mov	r0, r3
9000223c:	3710      	adds	r7, #16
9000223e:	46bd      	mov	sp, r7
90002240:	bd80      	pop	{r7, pc}
90002242:	bf00      	nop
90002244:	2000102c 	.word	0x2000102c

90002248 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90002248:	b580      	push	{r7, lr}
9000224a:	b088      	sub	sp, #32
9000224c:	af04      	add	r7, sp, #16
9000224e:	607b      	str	r3, [r7, #4]
90002250:	4603      	mov	r3, r0
90002252:	81fb      	strh	r3, [r7, #14]
90002254:	460b      	mov	r3, r1
90002256:	81bb      	strh	r3, [r7, #12]
90002258:	4613      	mov	r3, r2
9000225a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
9000225c:	8978      	ldrh	r0, [r7, #10]
9000225e:	89ba      	ldrh	r2, [r7, #12]
90002260:	89f9      	ldrh	r1, [r7, #14]
90002262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90002266:	9302      	str	r3, [sp, #8]
90002268:	8b3b      	ldrh	r3, [r7, #24]
9000226a:	9301      	str	r3, [sp, #4]
9000226c:	687b      	ldr	r3, [r7, #4]
9000226e:	9300      	str	r3, [sp, #0]
90002270:	4603      	mov	r3, r0
90002272:	4807      	ldr	r0, [pc, #28]	@ (90002290 <I2C4_ReadReg+0x48>)
90002274:	f004 f974 	bl	90006560 <HAL_I2C_Mem_Read>
90002278:	4603      	mov	r3, r0
9000227a:	2b00      	cmp	r3, #0
9000227c:	d101      	bne.n	90002282 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
9000227e:	2300      	movs	r3, #0
90002280:	e001      	b.n	90002286 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90002282:	f06f 0307 	mvn.w	r3, #7
}
90002286:	4618      	mov	r0, r3
90002288:	3710      	adds	r7, #16
9000228a:	46bd      	mov	sp, r7
9000228c:	bd80      	pop	{r7, pc}
9000228e:	bf00      	nop
90002290:	2000102c 	.word	0x2000102c

90002294 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90002294:	b580      	push	{r7, lr}
90002296:	b084      	sub	sp, #16
90002298:	af02      	add	r7, sp, #8
9000229a:	6078      	str	r0, [r7, #4]
9000229c:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
9000229e:	f44f 7388 	mov.w	r3, #272	@ 0x110
900022a2:	9300      	str	r3, [sp, #0]
900022a4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
900022a8:	2200      	movs	r2, #0
900022aa:	6839      	ldr	r1, [r7, #0]
900022ac:	6878      	ldr	r0, [r7, #4]
900022ae:	f000 f805 	bl	900022bc <BSP_LCD_InitEx>
900022b2:	4603      	mov	r3, r0
}
900022b4:	4618      	mov	r0, r3
900022b6:	3708      	adds	r7, #8
900022b8:	46bd      	mov	sp, r7
900022ba:	bd80      	pop	{r7, pc}

900022bc <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
900022bc:	b580      	push	{r7, lr}
900022be:	b09e      	sub	sp, #120	@ 0x78
900022c0:	af00      	add	r7, sp, #0
900022c2:	60f8      	str	r0, [r7, #12]
900022c4:	60b9      	str	r1, [r7, #8]
900022c6:	607a      	str	r2, [r7, #4]
900022c8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900022ca:	2300      	movs	r3, #0
900022cc:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
900022ce:	2300      	movs	r3, #0
900022d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
900022d2:	68bb      	ldr	r3, [r7, #8]
900022d4:	2b01      	cmp	r3, #1
900022d6:	d808      	bhi.n	900022ea <BSP_LCD_InitEx+0x2e>
900022d8:	68fb      	ldr	r3, [r7, #12]
900022da:	2b00      	cmp	r3, #0
900022dc:	d105      	bne.n	900022ea <BSP_LCD_InitEx+0x2e>
900022de:	687b      	ldr	r3, [r7, #4]
900022e0:	2b02      	cmp	r3, #2
900022e2:	d006      	beq.n	900022f2 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
900022e4:	687b      	ldr	r3, [r7, #4]
900022e6:	2b00      	cmp	r3, #0
900022e8:	d003      	beq.n	900022f2 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900022ea:	f06f 0301 	mvn.w	r3, #1
900022ee:	677b      	str	r3, [r7, #116]	@ 0x74
900022f0:	e0a8      	b.n	90002444 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
900022f2:	687b      	ldr	r3, [r7, #4]
900022f4:	2b02      	cmp	r3, #2
900022f6:	d109      	bne.n	9000230c <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
900022f8:	2302      	movs	r3, #2
900022fa:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
900022fc:	4a54      	ldr	r2, [pc, #336]	@ (90002450 <BSP_LCD_InitEx+0x194>)
900022fe:	68fb      	ldr	r3, [r7, #12]
90002300:	015b      	lsls	r3, r3, #5
90002302:	4413      	add	r3, r2
90002304:	3310      	adds	r3, #16
90002306:	2202      	movs	r2, #2
90002308:	601a      	str	r2, [r3, #0]
9000230a:	e008      	b.n	9000231e <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
9000230c:	2300      	movs	r3, #0
9000230e:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90002310:	4a4f      	ldr	r2, [pc, #316]	@ (90002450 <BSP_LCD_InitEx+0x194>)
90002312:	68fb      	ldr	r3, [r7, #12]
90002314:	015b      	lsls	r3, r3, #5
90002316:	4413      	add	r3, r2
90002318:	3310      	adds	r3, #16
9000231a:	2204      	movs	r2, #4
9000231c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
9000231e:	4a4c      	ldr	r2, [pc, #304]	@ (90002450 <BSP_LCD_InitEx+0x194>)
90002320:	68fb      	ldr	r3, [r7, #12]
90002322:	015b      	lsls	r3, r3, #5
90002324:	4413      	add	r3, r2
90002326:	330c      	adds	r3, #12
90002328:	687a      	ldr	r2, [r7, #4]
9000232a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
9000232c:	4a48      	ldr	r2, [pc, #288]	@ (90002450 <BSP_LCD_InitEx+0x194>)
9000232e:	68fb      	ldr	r3, [r7, #12]
90002330:	015b      	lsls	r3, r3, #5
90002332:	4413      	add	r3, r2
90002334:	683a      	ldr	r2, [r7, #0]
90002336:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90002338:	4a45      	ldr	r2, [pc, #276]	@ (90002450 <BSP_LCD_InitEx+0x194>)
9000233a:	68fb      	ldr	r3, [r7, #12]
9000233c:	015b      	lsls	r3, r3, #5
9000233e:	4413      	add	r3, r2
90002340:	3304      	adds	r3, #4
90002342:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002346:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90002348:	4b42      	ldr	r3, [pc, #264]	@ (90002454 <BSP_LCD_InitEx+0x198>)
9000234a:	4a43      	ldr	r2, [pc, #268]	@ (90002458 <BSP_LCD_InitEx+0x19c>)
9000234c:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
9000234e:	4b43      	ldr	r3, [pc, #268]	@ (9000245c <BSP_LCD_InitEx+0x1a0>)
90002350:	4a43      	ldr	r2, [pc, #268]	@ (90002460 <BSP_LCD_InitEx+0x1a4>)
90002352:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90002354:	483f      	ldr	r0, [pc, #252]	@ (90002454 <BSP_LCD_InitEx+0x198>)
90002356:	f000 fcf9 	bl	90002d4c <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
9000235a:	4840      	ldr	r0, [pc, #256]	@ (9000245c <BSP_LCD_InitEx+0x1a0>)
9000235c:	f000 fdc2 	bl	90002ee4 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90002360:	4b40      	ldr	r3, [pc, #256]	@ (90002464 <BSP_LCD_InitEx+0x1a8>)
90002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90002364:	4b40      	ldr	r3, [pc, #256]	@ (90002468 <BSP_LCD_InitEx+0x1ac>)
90002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90002368:	2370      	movs	r3, #112	@ 0x70
9000236a:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
9000236c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90002370:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002374:	4611      	mov	r1, r2
90002376:	4618      	mov	r0, r3
90002378:	f7fe fe6c 	bl	90001054 <FT5336_RegisterBusIO>
9000237c:	4603      	mov	r3, r0
9000237e:	2b00      	cmp	r3, #0
90002380:	da03      	bge.n	9000238a <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002382:	f06f 0304 	mvn.w	r3, #4
90002386:	677b      	str	r3, [r7, #116]	@ 0x74
90002388:	e02b      	b.n	900023e2 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
9000238a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
9000238e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002392:	4611      	mov	r1, r2
90002394:	4618      	mov	r0, r3
90002396:	f7fe ff57 	bl	90001248 <FT5336_ReadID>
9000239a:	4603      	mov	r3, r0
9000239c:	2b00      	cmp	r3, #0
9000239e:	da03      	bge.n	900023a8 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
900023a0:	f06f 0304 	mvn.w	r3, #4
900023a4:	677b      	str	r3, [r7, #116]	@ 0x74
900023a6:	e01c      	b.n	900023e2 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
900023a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
900023aa:	2b51      	cmp	r3, #81	@ 0x51
900023ac:	d003      	beq.n	900023b6 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
900023ae:	f06f 0306 	mvn.w	r3, #6
900023b2:	677b      	str	r3, [r7, #116]	@ 0x74
900023b4:	e015      	b.n	900023e2 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
900023b6:	4827      	ldr	r0, [pc, #156]	@ (90002454 <BSP_LCD_InitEx+0x198>)
900023b8:	f7fe fcbc 	bl	90000d34 <MX_LTDC_ClockConfig>
900023bc:	4603      	mov	r3, r0
900023be:	2b00      	cmp	r3, #0
900023c0:	d003      	beq.n	900023ca <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900023c2:	f06f 0303 	mvn.w	r3, #3
900023c6:	677b      	str	r3, [r7, #116]	@ 0x74
900023c8:	e00b      	b.n	900023e2 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
900023ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
900023ce:	6839      	ldr	r1, [r7, #0]
900023d0:	4820      	ldr	r0, [pc, #128]	@ (90002454 <BSP_LCD_InitEx+0x198>)
900023d2:	f000 f84d 	bl	90002470 <MX_LTDC_Init>
900023d6:	4603      	mov	r3, r0
900023d8:	2b00      	cmp	r3, #0
900023da:	d002      	beq.n	900023e2 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900023dc:	f06f 0303 	mvn.w	r3, #3
900023e0:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
900023e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
900023e4:	2b00      	cmp	r3, #0
900023e6:	d12d      	bne.n	90002444 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900023e8:	2000      	movs	r0, #0
900023ea:	f000 fe0d 	bl	90003008 <BSP_SDRAM_Init>
900023ee:	4603      	mov	r3, r0
900023f0:	2b00      	cmp	r3, #0
900023f2:	d002      	beq.n	900023fa <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
900023f4:	f06f 0303 	mvn.w	r3, #3
900023f8:	e025      	b.n	90002446 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
900023fa:	2300      	movs	r3, #0
900023fc:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
900023fe:	683b      	ldr	r3, [r7, #0]
90002400:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90002402:	2300      	movs	r3, #0
90002404:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90002406:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
9000240a:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
9000240c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
9000240e:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90002410:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90002414:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90002416:	f107 0314 	add.w	r3, r7, #20
9000241a:	461a      	mov	r2, r3
9000241c:	2100      	movs	r1, #0
9000241e:	480d      	ldr	r0, [pc, #52]	@ (90002454 <BSP_LCD_InitEx+0x198>)
90002420:	f000 f872 	bl	90002508 <MX_LTDC_ConfigLayer>
90002424:	4603      	mov	r3, r0
90002426:	2b00      	cmp	r3, #0
90002428:	d002      	beq.n	90002430 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
9000242a:	f06f 0303 	mvn.w	r3, #3
9000242e:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90002430:	480e      	ldr	r0, [pc, #56]	@ (9000246c <BSP_LCD_InitEx+0x1b0>)
90002432:	f000 fdbf 	bl	90002fb4 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90002436:	4a06      	ldr	r2, [pc, #24]	@ (90002450 <BSP_LCD_InitEx+0x194>)
90002438:	68fb      	ldr	r3, [r7, #12]
9000243a:	015b      	lsls	r3, r3, #5
9000243c:	4413      	add	r3, r2
9000243e:	3318      	adds	r3, #24
90002440:	2201      	movs	r2, #1
90002442:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90002444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90002446:	4618      	mov	r0, r3
90002448:	3778      	adds	r7, #120	@ 0x78
9000244a:	46bd      	mov	sp, r7
9000244c:	bd80      	pop	{r7, pc}
9000244e:	bf00      	nop
90002450:	200011dc 	.word	0x200011dc
90002454:	20001134 	.word	0x20001134
90002458:	50001000 	.word	0x50001000
9000245c:	200010cc 	.word	0x200010cc
90002460:	52001000 	.word	0x52001000
90002464:	900019e9 	.word	0x900019e9
90002468:	90001b85 	.word	0x90001b85
9000246c:	20001080 	.word	0x20001080

90002470 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90002470:	b580      	push	{r7, lr}
90002472:	b084      	sub	sp, #16
90002474:	af00      	add	r7, sp, #0
90002476:	60f8      	str	r0, [r7, #12]
90002478:	60b9      	str	r1, [r7, #8]
9000247a:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
9000247c:	68fb      	ldr	r3, [r7, #12]
9000247e:	4a21      	ldr	r2, [pc, #132]	@ (90002504 <MX_LTDC_Init+0x94>)
90002480:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90002482:	68fb      	ldr	r3, [r7, #12]
90002484:	2200      	movs	r2, #0
90002486:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90002488:	68fb      	ldr	r3, [r7, #12]
9000248a:	2200      	movs	r2, #0
9000248c:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
9000248e:	68fb      	ldr	r3, [r7, #12]
90002490:	2200      	movs	r2, #0
90002492:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90002494:	68fb      	ldr	r3, [r7, #12]
90002496:	2200      	movs	r2, #0
90002498:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
9000249a:	68fb      	ldr	r3, [r7, #12]
9000249c:	2228      	movs	r2, #40	@ 0x28
9000249e:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
900024a0:	68fb      	ldr	r3, [r7, #12]
900024a2:	222a      	movs	r2, #42	@ 0x2a
900024a4:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
900024a6:	68bb      	ldr	r3, [r7, #8]
900024a8:	f103 0235 	add.w	r2, r3, #53	@ 0x35
900024ac:	68fb      	ldr	r3, [r7, #12]
900024ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
900024b0:	68bb      	ldr	r3, [r7, #8]
900024b2:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
900024b6:	68fb      	ldr	r3, [r7, #12]
900024b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
900024ba:	68fb      	ldr	r3, [r7, #12]
900024bc:	2209      	movs	r2, #9
900024be:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
900024c0:	68fb      	ldr	r3, [r7, #12]
900024c2:	220b      	movs	r2, #11
900024c4:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
900024c6:	687b      	ldr	r3, [r7, #4]
900024c8:	f103 020b 	add.w	r2, r3, #11
900024cc:	68fb      	ldr	r3, [r7, #12]
900024ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
900024d0:	687b      	ldr	r3, [r7, #4]
900024d2:	f103 020d 	add.w	r2, r3, #13
900024d6:	68fb      	ldr	r3, [r7, #12]
900024d8:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
900024da:	68fb      	ldr	r3, [r7, #12]
900024dc:	22ff      	movs	r2, #255	@ 0xff
900024de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
900024e2:	68fb      	ldr	r3, [r7, #12]
900024e4:	22ff      	movs	r2, #255	@ 0xff
900024e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
900024ea:	68fb      	ldr	r3, [r7, #12]
900024ec:	22ff      	movs	r2, #255	@ 0xff
900024ee:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
900024f2:	68f8      	ldr	r0, [r7, #12]
900024f4:	f004 fcc1 	bl	90006e7a <HAL_LTDC_Init>
900024f8:	4603      	mov	r3, r0
}
900024fa:	4618      	mov	r0, r3
900024fc:	3710      	adds	r7, #16
900024fe:	46bd      	mov	sp, r7
90002500:	bd80      	pop	{r7, pc}
90002502:	bf00      	nop
90002504:	50001000 	.word	0x50001000

90002508 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90002508:	b580      	push	{r7, lr}
9000250a:	b092      	sub	sp, #72	@ 0x48
9000250c:	af00      	add	r7, sp, #0
9000250e:	60f8      	str	r0, [r7, #12]
90002510:	60b9      	str	r1, [r7, #8]
90002512:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90002514:	687b      	ldr	r3, [r7, #4]
90002516:	681b      	ldr	r3, [r3, #0]
90002518:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
9000251a:	687b      	ldr	r3, [r7, #4]
9000251c:	685b      	ldr	r3, [r3, #4]
9000251e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90002520:	687b      	ldr	r3, [r7, #4]
90002522:	689b      	ldr	r3, [r3, #8]
90002524:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90002526:	687b      	ldr	r3, [r7, #4]
90002528:	68db      	ldr	r3, [r3, #12]
9000252a:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
9000252c:	687b      	ldr	r3, [r7, #4]
9000252e:	691b      	ldr	r3, [r3, #16]
90002530:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
90002532:	23ff      	movs	r3, #255	@ 0xff
90002534:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90002536:	2300      	movs	r3, #0
90002538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
9000253a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
9000253e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90002540:	2307      	movs	r3, #7
90002542:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90002544:	687b      	ldr	r3, [r7, #4]
90002546:	695b      	ldr	r3, [r3, #20]
90002548:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
9000254a:	687b      	ldr	r3, [r7, #4]
9000254c:	685a      	ldr	r2, [r3, #4]
9000254e:	687b      	ldr	r3, [r7, #4]
90002550:	681b      	ldr	r3, [r3, #0]
90002552:	1ad3      	subs	r3, r2, r3
90002554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90002556:	687b      	ldr	r3, [r7, #4]
90002558:	68da      	ldr	r2, [r3, #12]
9000255a:	687b      	ldr	r3, [r7, #4]
9000255c:	689b      	ldr	r3, [r3, #8]
9000255e:	1ad3      	subs	r3, r2, r3
90002560:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
90002562:	2300      	movs	r3, #0
90002564:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90002568:	2300      	movs	r3, #0
9000256a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
9000256e:	2300      	movs	r3, #0
90002570:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90002574:	f107 0314 	add.w	r3, r7, #20
90002578:	68ba      	ldr	r2, [r7, #8]
9000257a:	4619      	mov	r1, r3
9000257c:	68f8      	ldr	r0, [r7, #12]
9000257e:	f004 fd23 	bl	90006fc8 <HAL_LTDC_ConfigLayer>
90002582:	4603      	mov	r3, r0
}
90002584:	4618      	mov	r0, r3
90002586:	3748      	adds	r7, #72	@ 0x48
90002588:	46bd      	mov	sp, r7
9000258a:	bd80      	pop	{r7, pc}

9000258c <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
9000258c:	b480      	push	{r7}
9000258e:	b085      	sub	sp, #20
90002590:	af00      	add	r7, sp, #0
90002592:	6078      	str	r0, [r7, #4]
90002594:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002596:	2300      	movs	r3, #0
90002598:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000259a:	687b      	ldr	r3, [r7, #4]
9000259c:	2b00      	cmp	r3, #0
9000259e:	d003      	beq.n	900025a8 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900025a0:	f06f 0301 	mvn.w	r3, #1
900025a4:	60fb      	str	r3, [r7, #12]
900025a6:	e007      	b.n	900025b8 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
900025a8:	4a07      	ldr	r2, [pc, #28]	@ (900025c8 <BSP_LCD_GetPixelFormat+0x3c>)
900025aa:	687b      	ldr	r3, [r7, #4]
900025ac:	015b      	lsls	r3, r3, #5
900025ae:	4413      	add	r3, r2
900025b0:	330c      	adds	r3, #12
900025b2:	681a      	ldr	r2, [r3, #0]
900025b4:	683b      	ldr	r3, [r7, #0]
900025b6:	601a      	str	r2, [r3, #0]
  }

  return ret;
900025b8:	68fb      	ldr	r3, [r7, #12]
}
900025ba:	4618      	mov	r0, r3
900025bc:	3714      	adds	r7, #20
900025be:	46bd      	mov	sp, r7
900025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900025c4:	4770      	bx	lr
900025c6:	bf00      	nop
900025c8:	200011dc 	.word	0x200011dc

900025cc <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
900025cc:	b480      	push	{r7}
900025ce:	b085      	sub	sp, #20
900025d0:	af00      	add	r7, sp, #0
900025d2:	6078      	str	r0, [r7, #4]
900025d4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900025d6:	2300      	movs	r3, #0
900025d8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900025da:	687b      	ldr	r3, [r7, #4]
900025dc:	2b00      	cmp	r3, #0
900025de:	d003      	beq.n	900025e8 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900025e0:	f06f 0301 	mvn.w	r3, #1
900025e4:	60fb      	str	r3, [r7, #12]
900025e6:	e006      	b.n	900025f6 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
900025e8:	4a06      	ldr	r2, [pc, #24]	@ (90002604 <BSP_LCD_SetActiveLayer+0x38>)
900025ea:	687b      	ldr	r3, [r7, #4]
900025ec:	015b      	lsls	r3, r3, #5
900025ee:	4413      	add	r3, r2
900025f0:	3308      	adds	r3, #8
900025f2:	683a      	ldr	r2, [r7, #0]
900025f4:	601a      	str	r2, [r3, #0]
  }

  return ret;
900025f6:	68fb      	ldr	r3, [r7, #12]
}
900025f8:	4618      	mov	r0, r3
900025fa:	3714      	adds	r7, #20
900025fc:	46bd      	mov	sp, r7
900025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90002602:	4770      	bx	lr
90002604:	200011dc 	.word	0x200011dc

90002608 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002608:	b480      	push	{r7}
9000260a:	b085      	sub	sp, #20
9000260c:	af00      	add	r7, sp, #0
9000260e:	6078      	str	r0, [r7, #4]
90002610:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002612:	2300      	movs	r3, #0
90002614:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002616:	687b      	ldr	r3, [r7, #4]
90002618:	2b00      	cmp	r3, #0
9000261a:	d003      	beq.n	90002624 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000261c:	f06f 0301 	mvn.w	r3, #1
90002620:	60fb      	str	r3, [r7, #12]
90002622:	e006      	b.n	90002632 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90002624:	4a06      	ldr	r2, [pc, #24]	@ (90002640 <BSP_LCD_GetXSize+0x38>)
90002626:	687b      	ldr	r3, [r7, #4]
90002628:	015b      	lsls	r3, r3, #5
9000262a:	4413      	add	r3, r2
9000262c:	681a      	ldr	r2, [r3, #0]
9000262e:	683b      	ldr	r3, [r7, #0]
90002630:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002632:	68fb      	ldr	r3, [r7, #12]
}
90002634:	4618      	mov	r0, r3
90002636:	3714      	adds	r7, #20
90002638:	46bd      	mov	sp, r7
9000263a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000263e:	4770      	bx	lr
90002640:	200011dc 	.word	0x200011dc

90002644 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90002644:	b480      	push	{r7}
90002646:	b085      	sub	sp, #20
90002648:	af00      	add	r7, sp, #0
9000264a:	6078      	str	r0, [r7, #4]
9000264c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000264e:	2300      	movs	r3, #0
90002650:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002652:	687b      	ldr	r3, [r7, #4]
90002654:	2b00      	cmp	r3, #0
90002656:	d003      	beq.n	90002660 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002658:	f06f 0301 	mvn.w	r3, #1
9000265c:	60fb      	str	r3, [r7, #12]
9000265e:	e007      	b.n	90002670 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
90002660:	4a07      	ldr	r2, [pc, #28]	@ (90002680 <BSP_LCD_GetYSize+0x3c>)
90002662:	687b      	ldr	r3, [r7, #4]
90002664:	015b      	lsls	r3, r3, #5
90002666:	4413      	add	r3, r2
90002668:	3304      	adds	r3, #4
9000266a:	681a      	ldr	r2, [r3, #0]
9000266c:	683b      	ldr	r3, [r7, #0]
9000266e:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002670:	68fb      	ldr	r3, [r7, #12]
}
90002672:	4618      	mov	r0, r3
90002674:	3714      	adds	r7, #20
90002676:	46bd      	mov	sp, r7
90002678:	f85d 7b04 	ldr.w	r7, [sp], #4
9000267c:	4770      	bx	lr
9000267e:	bf00      	nop
90002680:	200011dc 	.word	0x200011dc

90002684 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90002684:	b580      	push	{r7, lr}
90002686:	b08e      	sub	sp, #56	@ 0x38
90002688:	af02      	add	r7, sp, #8
9000268a:	60f8      	str	r0, [r7, #12]
9000268c:	60b9      	str	r1, [r7, #8]
9000268e:	607a      	str	r2, [r7, #4]
90002690:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002692:	2300      	movs	r3, #0
90002694:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
90002696:	683b      	ldr	r3, [r7, #0]
90002698:	330a      	adds	r3, #10
9000269a:	781b      	ldrb	r3, [r3, #0]
9000269c:	461a      	mov	r2, r3
9000269e:	683b      	ldr	r3, [r7, #0]
900026a0:	330b      	adds	r3, #11
900026a2:	781b      	ldrb	r3, [r3, #0]
900026a4:	021b      	lsls	r3, r3, #8
900026a6:	441a      	add	r2, r3
900026a8:	683b      	ldr	r3, [r7, #0]
900026aa:	330c      	adds	r3, #12
900026ac:	781b      	ldrb	r3, [r3, #0]
900026ae:	041b      	lsls	r3, r3, #16
900026b0:	441a      	add	r2, r3
900026b2:	683b      	ldr	r3, [r7, #0]
900026b4:	330d      	adds	r3, #13
900026b6:	781b      	ldrb	r3, [r3, #0]
900026b8:	061b      	lsls	r3, r3, #24
900026ba:	4413      	add	r3, r2
900026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
900026be:	683b      	ldr	r3, [r7, #0]
900026c0:	3312      	adds	r3, #18
900026c2:	781b      	ldrb	r3, [r3, #0]
900026c4:	461a      	mov	r2, r3
900026c6:	683b      	ldr	r3, [r7, #0]
900026c8:	3313      	adds	r3, #19
900026ca:	781b      	ldrb	r3, [r3, #0]
900026cc:	021b      	lsls	r3, r3, #8
900026ce:	441a      	add	r2, r3
900026d0:	683b      	ldr	r3, [r7, #0]
900026d2:	3314      	adds	r3, #20
900026d4:	781b      	ldrb	r3, [r3, #0]
900026d6:	041b      	lsls	r3, r3, #16
900026d8:	441a      	add	r2, r3
900026da:	683b      	ldr	r3, [r7, #0]
900026dc:	3315      	adds	r3, #21
900026de:	781b      	ldrb	r3, [r3, #0]
900026e0:	061b      	lsls	r3, r3, #24
900026e2:	4413      	add	r3, r2
900026e4:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
900026e6:	683b      	ldr	r3, [r7, #0]
900026e8:	3316      	adds	r3, #22
900026ea:	781b      	ldrb	r3, [r3, #0]
900026ec:	461a      	mov	r2, r3
900026ee:	683b      	ldr	r3, [r7, #0]
900026f0:	3317      	adds	r3, #23
900026f2:	781b      	ldrb	r3, [r3, #0]
900026f4:	021b      	lsls	r3, r3, #8
900026f6:	441a      	add	r2, r3
900026f8:	683b      	ldr	r3, [r7, #0]
900026fa:	3318      	adds	r3, #24
900026fc:	781b      	ldrb	r3, [r3, #0]
900026fe:	041b      	lsls	r3, r3, #16
90002700:	441a      	add	r2, r3
90002702:	683b      	ldr	r3, [r7, #0]
90002704:	3319      	adds	r3, #25
90002706:	781b      	ldrb	r3, [r3, #0]
90002708:	061b      	lsls	r3, r3, #24
9000270a:	4413      	add	r3, r2
9000270c:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
9000270e:	683b      	ldr	r3, [r7, #0]
90002710:	331c      	adds	r3, #28
90002712:	781b      	ldrb	r3, [r3, #0]
90002714:	461a      	mov	r2, r3
90002716:	683b      	ldr	r3, [r7, #0]
90002718:	331d      	adds	r3, #29
9000271a:	781b      	ldrb	r3, [r3, #0]
9000271c:	021b      	lsls	r3, r3, #8
9000271e:	4413      	add	r3, r2
90002720:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
90002722:	4a37      	ldr	r2, [pc, #220]	@ (90002800 <BSP_LCD_DrawBitmap+0x17c>)
90002724:	68fb      	ldr	r3, [r7, #12]
90002726:	015b      	lsls	r3, r3, #5
90002728:	4413      	add	r3, r2
9000272a:	3308      	adds	r3, #8
9000272c:	681b      	ldr	r3, [r3, #0]
9000272e:	4a35      	ldr	r2, [pc, #212]	@ (90002804 <BSP_LCD_DrawBitmap+0x180>)
90002730:	2134      	movs	r1, #52	@ 0x34
90002732:	fb01 f303 	mul.w	r3, r1, r3
90002736:	4413      	add	r3, r2
90002738:	335c      	adds	r3, #92	@ 0x5c
9000273a:	681a      	ldr	r2, [r3, #0]
9000273c:	4930      	ldr	r1, [pc, #192]	@ (90002800 <BSP_LCD_DrawBitmap+0x17c>)
9000273e:	68fb      	ldr	r3, [r7, #12]
90002740:	015b      	lsls	r3, r3, #5
90002742:	440b      	add	r3, r1
90002744:	681b      	ldr	r3, [r3, #0]
90002746:	6879      	ldr	r1, [r7, #4]
90002748:	fb03 f101 	mul.w	r1, r3, r1
9000274c:	68bb      	ldr	r3, [r7, #8]
9000274e:	440b      	add	r3, r1
90002750:	482b      	ldr	r0, [pc, #172]	@ (90002800 <BSP_LCD_DrawBitmap+0x17c>)
90002752:	68f9      	ldr	r1, [r7, #12]
90002754:	0149      	lsls	r1, r1, #5
90002756:	4401      	add	r1, r0
90002758:	3110      	adds	r1, #16
9000275a:	6809      	ldr	r1, [r1, #0]
9000275c:	fb01 f303 	mul.w	r3, r1, r3
90002760:	4413      	add	r3, r2
90002762:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90002764:	693b      	ldr	r3, [r7, #16]
90002766:	3b20      	subs	r3, #32
90002768:	2b07      	cmp	r3, #7
9000276a:	d802      	bhi.n	90002772 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
9000276c:	2300      	movs	r3, #0
9000276e:	627b      	str	r3, [r7, #36]	@ 0x24
90002770:	e008      	b.n	90002784 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
90002772:	693b      	ldr	r3, [r7, #16]
90002774:	3b10      	subs	r3, #16
90002776:	2b07      	cmp	r3, #7
90002778:	d802      	bhi.n	90002780 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
9000277a:	2302      	movs	r3, #2
9000277c:	627b      	str	r3, [r7, #36]	@ 0x24
9000277e:	e001      	b.n	90002784 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
90002780:	2301      	movs	r3, #1
90002782:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002784:	697b      	ldr	r3, [r7, #20]
90002786:	3b01      	subs	r3, #1
90002788:	69ba      	ldr	r2, [r7, #24]
9000278a:	fb02 f303 	mul.w	r3, r2, r3
9000278e:	693a      	ldr	r2, [r7, #16]
90002790:	08d2      	lsrs	r2, r2, #3
90002792:	fb03 f202 	mul.w	r2, r3, r2
90002796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002798:	4413      	add	r3, r2
9000279a:	683a      	ldr	r2, [r7, #0]
9000279c:	4413      	add	r3, r2
9000279e:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
900027a0:	2300      	movs	r3, #0
900027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
900027a4:	e023      	b.n	900027ee <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
900027a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900027aa:	9300      	str	r3, [sp, #0]
900027ac:	69bb      	ldr	r3, [r7, #24]
900027ae:	6a39      	ldr	r1, [r7, #32]
900027b0:	68f8      	ldr	r0, [r7, #12]
900027b2:	f000 fa77 	bl	90002ca4 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
900027b6:	4a12      	ldr	r2, [pc, #72]	@ (90002800 <BSP_LCD_DrawBitmap+0x17c>)
900027b8:	68fb      	ldr	r3, [r7, #12]
900027ba:	015b      	lsls	r3, r3, #5
900027bc:	4413      	add	r3, r2
900027be:	681b      	ldr	r3, [r3, #0]
900027c0:	490f      	ldr	r1, [pc, #60]	@ (90002800 <BSP_LCD_DrawBitmap+0x17c>)
900027c2:	68fa      	ldr	r2, [r7, #12]
900027c4:	0152      	lsls	r2, r2, #5
900027c6:	440a      	add	r2, r1
900027c8:	3210      	adds	r2, #16
900027ca:	6812      	ldr	r2, [r2, #0]
900027cc:	fb02 f303 	mul.w	r3, r2, r3
900027d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900027d2:	4413      	add	r3, r2
900027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
900027d6:	693b      	ldr	r3, [r7, #16]
900027d8:	08db      	lsrs	r3, r3, #3
900027da:	69ba      	ldr	r2, [r7, #24]
900027dc:	fb02 f303 	mul.w	r3, r2, r3
900027e0:	425b      	negs	r3, r3
900027e2:	6a3a      	ldr	r2, [r7, #32]
900027e4:	4413      	add	r3, r2
900027e6:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
900027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900027ea:	3301      	adds	r3, #1
900027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
900027ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900027f0:	697b      	ldr	r3, [r7, #20]
900027f2:	429a      	cmp	r2, r3
900027f4:	d3d7      	bcc.n	900027a6 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
900027f6:	69fb      	ldr	r3, [r7, #28]
}
900027f8:	4618      	mov	r0, r3
900027fa:	3730      	adds	r7, #48	@ 0x30
900027fc:	46bd      	mov	sp, r7
900027fe:	bd80      	pop	{r7, pc}
90002800:	200011dc 	.word	0x200011dc
90002804:	20001134 	.word	0x20001134

90002808 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002808:	b580      	push	{r7, lr}
9000280a:	b088      	sub	sp, #32
9000280c:	af00      	add	r7, sp, #0
9000280e:	60f8      	str	r0, [r7, #12]
90002810:	60b9      	str	r1, [r7, #8]
90002812:	607a      	str	r2, [r7, #4]
90002814:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
90002816:	683b      	ldr	r3, [r7, #0]
90002818:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
9000281a:	2300      	movs	r3, #0
9000281c:	61fb      	str	r3, [r7, #28]
9000281e:	e032      	b.n	90002886 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002820:	2300      	movs	r3, #0
90002822:	617b      	str	r3, [r7, #20]
90002824:	e028      	b.n	90002878 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
90002826:	69bb      	ldr	r3, [r7, #24]
90002828:	781b      	ldrb	r3, [r3, #0]
9000282a:	461a      	mov	r2, r3
9000282c:	69bb      	ldr	r3, [r7, #24]
9000282e:	3301      	adds	r3, #1
90002830:	781b      	ldrb	r3, [r3, #0]
90002832:	021b      	lsls	r3, r3, #8
90002834:	431a      	orrs	r2, r3
90002836:	69bb      	ldr	r3, [r7, #24]
90002838:	3302      	adds	r3, #2
9000283a:	781b      	ldrb	r3, [r3, #0]
9000283c:	041b      	lsls	r3, r3, #16
9000283e:	431a      	orrs	r2, r3
90002840:	69bb      	ldr	r3, [r7, #24]
90002842:	3303      	adds	r3, #3
90002844:	781b      	ldrb	r3, [r3, #0]
90002846:	061b      	lsls	r3, r3, #24
90002848:	4313      	orrs	r3, r2
9000284a:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
9000284c:	68ba      	ldr	r2, [r7, #8]
9000284e:	697b      	ldr	r3, [r7, #20]
90002850:	18d1      	adds	r1, r2, r3
90002852:	687a      	ldr	r2, [r7, #4]
90002854:	69fb      	ldr	r3, [r7, #28]
90002856:	441a      	add	r2, r3
90002858:	693b      	ldr	r3, [r7, #16]
9000285a:	68f8      	ldr	r0, [r7, #12]
9000285c:	f000 f95e 	bl	90002b1c <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
90002860:	4a0d      	ldr	r2, [pc, #52]	@ (90002898 <BSP_LCD_FillRGBRect+0x90>)
90002862:	68fb      	ldr	r3, [r7, #12]
90002864:	015b      	lsls	r3, r3, #5
90002866:	4413      	add	r3, r2
90002868:	3310      	adds	r3, #16
9000286a:	681b      	ldr	r3, [r3, #0]
9000286c:	69ba      	ldr	r2, [r7, #24]
9000286e:	4413      	add	r3, r2
90002870:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
90002872:	697b      	ldr	r3, [r7, #20]
90002874:	3301      	adds	r3, #1
90002876:	617b      	str	r3, [r7, #20]
90002878:	697a      	ldr	r2, [r7, #20]
9000287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000287c:	429a      	cmp	r2, r3
9000287e:	d3d2      	bcc.n	90002826 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90002880:	69fb      	ldr	r3, [r7, #28]
90002882:	3301      	adds	r3, #1
90002884:	61fb      	str	r3, [r7, #28]
90002886:	69fa      	ldr	r2, [r7, #28]
90002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000288a:	429a      	cmp	r2, r3
9000288c:	d3c8      	bcc.n	90002820 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
9000288e:	2300      	movs	r3, #0
}
90002890:	4618      	mov	r0, r3
90002892:	3720      	adds	r7, #32
90002894:	46bd      	mov	sp, r7
90002896:	bd80      	pop	{r7, pc}
90002898:	200011dc 	.word	0x200011dc

9000289c <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000289c:	b580      	push	{r7, lr}
9000289e:	b088      	sub	sp, #32
900028a0:	af02      	add	r7, sp, #8
900028a2:	60f8      	str	r0, [r7, #12]
900028a4:	60b9      	str	r1, [r7, #8]
900028a6:	607a      	str	r2, [r7, #4]
900028a8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900028aa:	4a21      	ldr	r2, [pc, #132]	@ (90002930 <BSP_LCD_DrawHLine+0x94>)
900028ac:	68fb      	ldr	r3, [r7, #12]
900028ae:	015b      	lsls	r3, r3, #5
900028b0:	4413      	add	r3, r2
900028b2:	3308      	adds	r3, #8
900028b4:	681b      	ldr	r3, [r3, #0]
900028b6:	4a1f      	ldr	r2, [pc, #124]	@ (90002934 <BSP_LCD_DrawHLine+0x98>)
900028b8:	2134      	movs	r1, #52	@ 0x34
900028ba:	fb01 f303 	mul.w	r3, r1, r3
900028be:	4413      	add	r3, r2
900028c0:	335c      	adds	r3, #92	@ 0x5c
900028c2:	681a      	ldr	r2, [r3, #0]
900028c4:	491a      	ldr	r1, [pc, #104]	@ (90002930 <BSP_LCD_DrawHLine+0x94>)
900028c6:	68fb      	ldr	r3, [r7, #12]
900028c8:	015b      	lsls	r3, r3, #5
900028ca:	440b      	add	r3, r1
900028cc:	3310      	adds	r3, #16
900028ce:	681b      	ldr	r3, [r3, #0]
900028d0:	4817      	ldr	r0, [pc, #92]	@ (90002930 <BSP_LCD_DrawHLine+0x94>)
900028d2:	68f9      	ldr	r1, [r7, #12]
900028d4:	0149      	lsls	r1, r1, #5
900028d6:	4401      	add	r1, r0
900028d8:	6809      	ldr	r1, [r1, #0]
900028da:	6878      	ldr	r0, [r7, #4]
900028dc:	fb01 f000 	mul.w	r0, r1, r0
900028e0:	68b9      	ldr	r1, [r7, #8]
900028e2:	4401      	add	r1, r0
900028e4:	fb01 f303 	mul.w	r3, r1, r3
900028e8:	4413      	add	r3, r2
900028ea:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
900028ec:	68ba      	ldr	r2, [r7, #8]
900028ee:	683b      	ldr	r3, [r7, #0]
900028f0:	441a      	add	r2, r3
900028f2:	490f      	ldr	r1, [pc, #60]	@ (90002930 <BSP_LCD_DrawHLine+0x94>)
900028f4:	68fb      	ldr	r3, [r7, #12]
900028f6:	015b      	lsls	r3, r3, #5
900028f8:	440b      	add	r3, r1
900028fa:	681b      	ldr	r3, [r3, #0]
900028fc:	429a      	cmp	r2, r3
900028fe:	d907      	bls.n	90002910 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002900:	4a0b      	ldr	r2, [pc, #44]	@ (90002930 <BSP_LCD_DrawHLine+0x94>)
90002902:	68fb      	ldr	r3, [r7, #12]
90002904:	015b      	lsls	r3, r3, #5
90002906:	4413      	add	r3, r2
90002908:	681a      	ldr	r2, [r3, #0]
9000290a:	68bb      	ldr	r3, [r7, #8]
9000290c:	1ad3      	subs	r3, r2, r3
9000290e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002910:	6979      	ldr	r1, [r7, #20]
90002912:	6a3b      	ldr	r3, [r7, #32]
90002914:	9301      	str	r3, [sp, #4]
90002916:	2300      	movs	r3, #0
90002918:	9300      	str	r3, [sp, #0]
9000291a:	2301      	movs	r3, #1
9000291c:	683a      	ldr	r2, [r7, #0]
9000291e:	68f8      	ldr	r0, [r7, #12]
90002920:	f000 f956 	bl	90002bd0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002924:	2300      	movs	r3, #0
}
90002926:	4618      	mov	r0, r3
90002928:	3718      	adds	r7, #24
9000292a:	46bd      	mov	sp, r7
9000292c:	bd80      	pop	{r7, pc}
9000292e:	bf00      	nop
90002930:	200011dc 	.word	0x200011dc
90002934:	20001134 	.word	0x20001134

90002938 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002938:	b580      	push	{r7, lr}
9000293a:	b088      	sub	sp, #32
9000293c:	af02      	add	r7, sp, #8
9000293e:	60f8      	str	r0, [r7, #12]
90002940:	60b9      	str	r1, [r7, #8]
90002942:	607a      	str	r2, [r7, #4]
90002944:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002946:	4a24      	ldr	r2, [pc, #144]	@ (900029d8 <BSP_LCD_DrawVLine+0xa0>)
90002948:	68fb      	ldr	r3, [r7, #12]
9000294a:	015b      	lsls	r3, r3, #5
9000294c:	4413      	add	r3, r2
9000294e:	3308      	adds	r3, #8
90002950:	681b      	ldr	r3, [r3, #0]
90002952:	4a22      	ldr	r2, [pc, #136]	@ (900029dc <BSP_LCD_DrawVLine+0xa4>)
90002954:	2134      	movs	r1, #52	@ 0x34
90002956:	fb01 f303 	mul.w	r3, r1, r3
9000295a:	4413      	add	r3, r2
9000295c:	335c      	adds	r3, #92	@ 0x5c
9000295e:	681a      	ldr	r2, [r3, #0]
90002960:	491d      	ldr	r1, [pc, #116]	@ (900029d8 <BSP_LCD_DrawVLine+0xa0>)
90002962:	68fb      	ldr	r3, [r7, #12]
90002964:	015b      	lsls	r3, r3, #5
90002966:	440b      	add	r3, r1
90002968:	3310      	adds	r3, #16
9000296a:	681b      	ldr	r3, [r3, #0]
9000296c:	481a      	ldr	r0, [pc, #104]	@ (900029d8 <BSP_LCD_DrawVLine+0xa0>)
9000296e:	68f9      	ldr	r1, [r7, #12]
90002970:	0149      	lsls	r1, r1, #5
90002972:	4401      	add	r1, r0
90002974:	6809      	ldr	r1, [r1, #0]
90002976:	6878      	ldr	r0, [r7, #4]
90002978:	fb01 f000 	mul.w	r0, r1, r0
9000297c:	68b9      	ldr	r1, [r7, #8]
9000297e:	4401      	add	r1, r0
90002980:	fb01 f303 	mul.w	r3, r1, r3
90002984:	4413      	add	r3, r2
90002986:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90002988:	687a      	ldr	r2, [r7, #4]
9000298a:	683b      	ldr	r3, [r7, #0]
9000298c:	441a      	add	r2, r3
9000298e:	4912      	ldr	r1, [pc, #72]	@ (900029d8 <BSP_LCD_DrawVLine+0xa0>)
90002990:	68fb      	ldr	r3, [r7, #12]
90002992:	015b      	lsls	r3, r3, #5
90002994:	440b      	add	r3, r1
90002996:	3304      	adds	r3, #4
90002998:	681b      	ldr	r3, [r3, #0]
9000299a:	429a      	cmp	r2, r3
9000299c:	d908      	bls.n	900029b0 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
9000299e:	4a0e      	ldr	r2, [pc, #56]	@ (900029d8 <BSP_LCD_DrawVLine+0xa0>)
900029a0:	68fb      	ldr	r3, [r7, #12]
900029a2:	015b      	lsls	r3, r3, #5
900029a4:	4413      	add	r3, r2
900029a6:	3304      	adds	r3, #4
900029a8:	681a      	ldr	r2, [r3, #0]
900029aa:	687b      	ldr	r3, [r7, #4]
900029ac:	1ad3      	subs	r3, r2, r3
900029ae:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
900029b0:	6979      	ldr	r1, [r7, #20]
900029b2:	4a09      	ldr	r2, [pc, #36]	@ (900029d8 <BSP_LCD_DrawVLine+0xa0>)
900029b4:	68fb      	ldr	r3, [r7, #12]
900029b6:	015b      	lsls	r3, r3, #5
900029b8:	4413      	add	r3, r2
900029ba:	681b      	ldr	r3, [r3, #0]
900029bc:	3b01      	subs	r3, #1
900029be:	6a3a      	ldr	r2, [r7, #32]
900029c0:	9201      	str	r2, [sp, #4]
900029c2:	9300      	str	r3, [sp, #0]
900029c4:	683b      	ldr	r3, [r7, #0]
900029c6:	2201      	movs	r2, #1
900029c8:	68f8      	ldr	r0, [r7, #12]
900029ca:	f000 f901 	bl	90002bd0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900029ce:	2300      	movs	r3, #0
}
900029d0:	4618      	mov	r0, r3
900029d2:	3718      	adds	r7, #24
900029d4:	46bd      	mov	sp, r7
900029d6:	bd80      	pop	{r7, pc}
900029d8:	200011dc 	.word	0x200011dc
900029dc:	20001134 	.word	0x20001134

900029e0 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900029e0:	b580      	push	{r7, lr}
900029e2:	b088      	sub	sp, #32
900029e4:	af02      	add	r7, sp, #8
900029e6:	60f8      	str	r0, [r7, #12]
900029e8:	60b9      	str	r1, [r7, #8]
900029ea:	607a      	str	r2, [r7, #4]
900029ec:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900029ee:	4a1b      	ldr	r2, [pc, #108]	@ (90002a5c <BSP_LCD_FillRect+0x7c>)
900029f0:	68fb      	ldr	r3, [r7, #12]
900029f2:	015b      	lsls	r3, r3, #5
900029f4:	4413      	add	r3, r2
900029f6:	3308      	adds	r3, #8
900029f8:	681b      	ldr	r3, [r3, #0]
900029fa:	4a19      	ldr	r2, [pc, #100]	@ (90002a60 <BSP_LCD_FillRect+0x80>)
900029fc:	2134      	movs	r1, #52	@ 0x34
900029fe:	fb01 f303 	mul.w	r3, r1, r3
90002a02:	4413      	add	r3, r2
90002a04:	335c      	adds	r3, #92	@ 0x5c
90002a06:	681a      	ldr	r2, [r3, #0]
90002a08:	4914      	ldr	r1, [pc, #80]	@ (90002a5c <BSP_LCD_FillRect+0x7c>)
90002a0a:	68fb      	ldr	r3, [r7, #12]
90002a0c:	015b      	lsls	r3, r3, #5
90002a0e:	440b      	add	r3, r1
90002a10:	3310      	adds	r3, #16
90002a12:	681b      	ldr	r3, [r3, #0]
90002a14:	4811      	ldr	r0, [pc, #68]	@ (90002a5c <BSP_LCD_FillRect+0x7c>)
90002a16:	68f9      	ldr	r1, [r7, #12]
90002a18:	0149      	lsls	r1, r1, #5
90002a1a:	4401      	add	r1, r0
90002a1c:	6809      	ldr	r1, [r1, #0]
90002a1e:	6878      	ldr	r0, [r7, #4]
90002a20:	fb01 f000 	mul.w	r0, r1, r0
90002a24:	68b9      	ldr	r1, [r7, #8]
90002a26:	4401      	add	r1, r0
90002a28:	fb01 f303 	mul.w	r3, r1, r3
90002a2c:	4413      	add	r3, r2
90002a2e:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90002a30:	6979      	ldr	r1, [r7, #20]
90002a32:	4a0a      	ldr	r2, [pc, #40]	@ (90002a5c <BSP_LCD_FillRect+0x7c>)
90002a34:	68fb      	ldr	r3, [r7, #12]
90002a36:	015b      	lsls	r3, r3, #5
90002a38:	4413      	add	r3, r2
90002a3a:	681a      	ldr	r2, [r3, #0]
90002a3c:	683b      	ldr	r3, [r7, #0]
90002a3e:	1ad3      	subs	r3, r2, r3
90002a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002a42:	9201      	str	r2, [sp, #4]
90002a44:	9300      	str	r3, [sp, #0]
90002a46:	6a3b      	ldr	r3, [r7, #32]
90002a48:	683a      	ldr	r2, [r7, #0]
90002a4a:	68f8      	ldr	r0, [r7, #12]
90002a4c:	f000 f8c0 	bl	90002bd0 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002a50:	2300      	movs	r3, #0
}
90002a52:	4618      	mov	r0, r3
90002a54:	3718      	adds	r7, #24
90002a56:	46bd      	mov	sp, r7
90002a58:	bd80      	pop	{r7, pc}
90002a5a:	bf00      	nop
90002a5c:	200011dc 	.word	0x200011dc
90002a60:	20001134 	.word	0x20001134

90002a64 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002a64:	b480      	push	{r7}
90002a66:	b085      	sub	sp, #20
90002a68:	af00      	add	r7, sp, #0
90002a6a:	60f8      	str	r0, [r7, #12]
90002a6c:	60b9      	str	r1, [r7, #8]
90002a6e:	607a      	str	r2, [r7, #4]
90002a70:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002a72:	4a28      	ldr	r2, [pc, #160]	@ (90002b14 <BSP_LCD_ReadPixel+0xb0>)
90002a74:	68fb      	ldr	r3, [r7, #12]
90002a76:	015b      	lsls	r3, r3, #5
90002a78:	4413      	add	r3, r2
90002a7a:	3308      	adds	r3, #8
90002a7c:	681b      	ldr	r3, [r3, #0]
90002a7e:	4a26      	ldr	r2, [pc, #152]	@ (90002b18 <BSP_LCD_ReadPixel+0xb4>)
90002a80:	2134      	movs	r1, #52	@ 0x34
90002a82:	fb01 f303 	mul.w	r3, r1, r3
90002a86:	4413      	add	r3, r2
90002a88:	3348      	adds	r3, #72	@ 0x48
90002a8a:	681b      	ldr	r3, [r3, #0]
90002a8c:	2b00      	cmp	r3, #0
90002a8e:	d11c      	bne.n	90002aca <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002a90:	4a20      	ldr	r2, [pc, #128]	@ (90002b14 <BSP_LCD_ReadPixel+0xb0>)
90002a92:	68fb      	ldr	r3, [r7, #12]
90002a94:	015b      	lsls	r3, r3, #5
90002a96:	4413      	add	r3, r2
90002a98:	3308      	adds	r3, #8
90002a9a:	681b      	ldr	r3, [r3, #0]
90002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (90002b18 <BSP_LCD_ReadPixel+0xb4>)
90002a9e:	2134      	movs	r1, #52	@ 0x34
90002aa0:	fb01 f303 	mul.w	r3, r1, r3
90002aa4:	4413      	add	r3, r2
90002aa6:	335c      	adds	r3, #92	@ 0x5c
90002aa8:	681a      	ldr	r2, [r3, #0]
90002aaa:	491a      	ldr	r1, [pc, #104]	@ (90002b14 <BSP_LCD_ReadPixel+0xb0>)
90002aac:	68fb      	ldr	r3, [r7, #12]
90002aae:	015b      	lsls	r3, r3, #5
90002ab0:	440b      	add	r3, r1
90002ab2:	681b      	ldr	r3, [r3, #0]
90002ab4:	6879      	ldr	r1, [r7, #4]
90002ab6:	fb03 f101 	mul.w	r1, r3, r1
90002aba:	68bb      	ldr	r3, [r7, #8]
90002abc:	440b      	add	r3, r1
90002abe:	009b      	lsls	r3, r3, #2
90002ac0:	4413      	add	r3, r2
90002ac2:	681a      	ldr	r2, [r3, #0]
90002ac4:	683b      	ldr	r3, [r7, #0]
90002ac6:	601a      	str	r2, [r3, #0]
90002ac8:	e01d      	b.n	90002b06 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002aca:	4a12      	ldr	r2, [pc, #72]	@ (90002b14 <BSP_LCD_ReadPixel+0xb0>)
90002acc:	68fb      	ldr	r3, [r7, #12]
90002ace:	015b      	lsls	r3, r3, #5
90002ad0:	4413      	add	r3, r2
90002ad2:	3308      	adds	r3, #8
90002ad4:	681b      	ldr	r3, [r3, #0]
90002ad6:	4a10      	ldr	r2, [pc, #64]	@ (90002b18 <BSP_LCD_ReadPixel+0xb4>)
90002ad8:	2134      	movs	r1, #52	@ 0x34
90002ada:	fb01 f303 	mul.w	r3, r1, r3
90002ade:	4413      	add	r3, r2
90002ae0:	335c      	adds	r3, #92	@ 0x5c
90002ae2:	681a      	ldr	r2, [r3, #0]
90002ae4:	490b      	ldr	r1, [pc, #44]	@ (90002b14 <BSP_LCD_ReadPixel+0xb0>)
90002ae6:	68fb      	ldr	r3, [r7, #12]
90002ae8:	015b      	lsls	r3, r3, #5
90002aea:	440b      	add	r3, r1
90002aec:	681b      	ldr	r3, [r3, #0]
90002aee:	6879      	ldr	r1, [r7, #4]
90002af0:	fb03 f101 	mul.w	r1, r3, r1
90002af4:	68bb      	ldr	r3, [r7, #8]
90002af6:	440b      	add	r3, r1
90002af8:	005b      	lsls	r3, r3, #1
90002afa:	4413      	add	r3, r2
90002afc:	881b      	ldrh	r3, [r3, #0]
90002afe:	b29b      	uxth	r3, r3
90002b00:	461a      	mov	r2, r3
90002b02:	683b      	ldr	r3, [r7, #0]
90002b04:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002b06:	2300      	movs	r3, #0
}
90002b08:	4618      	mov	r0, r3
90002b0a:	3714      	adds	r7, #20
90002b0c:	46bd      	mov	sp, r7
90002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002b12:	4770      	bx	lr
90002b14:	200011dc 	.word	0x200011dc
90002b18:	20001134 	.word	0x20001134

90002b1c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002b1c:	b480      	push	{r7}
90002b1e:	b085      	sub	sp, #20
90002b20:	af00      	add	r7, sp, #0
90002b22:	60f8      	str	r0, [r7, #12]
90002b24:	60b9      	str	r1, [r7, #8]
90002b26:	607a      	str	r2, [r7, #4]
90002b28:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002b2a:	4a27      	ldr	r2, [pc, #156]	@ (90002bc8 <BSP_LCD_WritePixel+0xac>)
90002b2c:	68fb      	ldr	r3, [r7, #12]
90002b2e:	015b      	lsls	r3, r3, #5
90002b30:	4413      	add	r3, r2
90002b32:	3308      	adds	r3, #8
90002b34:	681b      	ldr	r3, [r3, #0]
90002b36:	4a25      	ldr	r2, [pc, #148]	@ (90002bcc <BSP_LCD_WritePixel+0xb0>)
90002b38:	2134      	movs	r1, #52	@ 0x34
90002b3a:	fb01 f303 	mul.w	r3, r1, r3
90002b3e:	4413      	add	r3, r2
90002b40:	3348      	adds	r3, #72	@ 0x48
90002b42:	681b      	ldr	r3, [r3, #0]
90002b44:	2b00      	cmp	r3, #0
90002b46:	d11c      	bne.n	90002b82 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002b48:	4a1f      	ldr	r2, [pc, #124]	@ (90002bc8 <BSP_LCD_WritePixel+0xac>)
90002b4a:	68fb      	ldr	r3, [r7, #12]
90002b4c:	015b      	lsls	r3, r3, #5
90002b4e:	4413      	add	r3, r2
90002b50:	3308      	adds	r3, #8
90002b52:	681b      	ldr	r3, [r3, #0]
90002b54:	4a1d      	ldr	r2, [pc, #116]	@ (90002bcc <BSP_LCD_WritePixel+0xb0>)
90002b56:	2134      	movs	r1, #52	@ 0x34
90002b58:	fb01 f303 	mul.w	r3, r1, r3
90002b5c:	4413      	add	r3, r2
90002b5e:	335c      	adds	r3, #92	@ 0x5c
90002b60:	681a      	ldr	r2, [r3, #0]
90002b62:	4919      	ldr	r1, [pc, #100]	@ (90002bc8 <BSP_LCD_WritePixel+0xac>)
90002b64:	68fb      	ldr	r3, [r7, #12]
90002b66:	015b      	lsls	r3, r3, #5
90002b68:	440b      	add	r3, r1
90002b6a:	681b      	ldr	r3, [r3, #0]
90002b6c:	6879      	ldr	r1, [r7, #4]
90002b6e:	fb03 f101 	mul.w	r1, r3, r1
90002b72:	68bb      	ldr	r3, [r7, #8]
90002b74:	440b      	add	r3, r1
90002b76:	009b      	lsls	r3, r3, #2
90002b78:	4413      	add	r3, r2
90002b7a:	461a      	mov	r2, r3
90002b7c:	683b      	ldr	r3, [r7, #0]
90002b7e:	6013      	str	r3, [r2, #0]
90002b80:	e01b      	b.n	90002bba <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90002b82:	4a11      	ldr	r2, [pc, #68]	@ (90002bc8 <BSP_LCD_WritePixel+0xac>)
90002b84:	68fb      	ldr	r3, [r7, #12]
90002b86:	015b      	lsls	r3, r3, #5
90002b88:	4413      	add	r3, r2
90002b8a:	3308      	adds	r3, #8
90002b8c:	681b      	ldr	r3, [r3, #0]
90002b8e:	4a0f      	ldr	r2, [pc, #60]	@ (90002bcc <BSP_LCD_WritePixel+0xb0>)
90002b90:	2134      	movs	r1, #52	@ 0x34
90002b92:	fb01 f303 	mul.w	r3, r1, r3
90002b96:	4413      	add	r3, r2
90002b98:	335c      	adds	r3, #92	@ 0x5c
90002b9a:	681a      	ldr	r2, [r3, #0]
90002b9c:	490a      	ldr	r1, [pc, #40]	@ (90002bc8 <BSP_LCD_WritePixel+0xac>)
90002b9e:	68fb      	ldr	r3, [r7, #12]
90002ba0:	015b      	lsls	r3, r3, #5
90002ba2:	440b      	add	r3, r1
90002ba4:	681b      	ldr	r3, [r3, #0]
90002ba6:	6879      	ldr	r1, [r7, #4]
90002ba8:	fb03 f101 	mul.w	r1, r3, r1
90002bac:	68bb      	ldr	r3, [r7, #8]
90002bae:	440b      	add	r3, r1
90002bb0:	005b      	lsls	r3, r3, #1
90002bb2:	4413      	add	r3, r2
90002bb4:	683a      	ldr	r2, [r7, #0]
90002bb6:	b292      	uxth	r2, r2
90002bb8:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002bba:	2300      	movs	r3, #0
}
90002bbc:	4618      	mov	r0, r3
90002bbe:	3714      	adds	r7, #20
90002bc0:	46bd      	mov	sp, r7
90002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
90002bc6:	4770      	bx	lr
90002bc8:	200011dc 	.word	0x200011dc
90002bcc:	20001134 	.word	0x20001134

90002bd0 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002bd0:	b580      	push	{r7, lr}
90002bd2:	b088      	sub	sp, #32
90002bd4:	af02      	add	r7, sp, #8
90002bd6:	60f8      	str	r0, [r7, #12]
90002bd8:	60b9      	str	r1, [r7, #8]
90002bda:	607a      	str	r2, [r7, #4]
90002bdc:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002be0:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002be2:	4a2d      	ldr	r2, [pc, #180]	@ (90002c98 <LL_FillBuffer+0xc8>)
90002be4:	68fb      	ldr	r3, [r7, #12]
90002be6:	015b      	lsls	r3, r3, #5
90002be8:	4413      	add	r3, r2
90002bea:	330c      	adds	r3, #12
90002bec:	681b      	ldr	r3, [r3, #0]
90002bee:	2b02      	cmp	r3, #2
90002bf0:	d129      	bne.n	90002c46 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002bf2:	2302      	movs	r3, #2
90002bf4:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002bf8:	0adb      	lsrs	r3, r3, #11
90002bfa:	f003 021f 	and.w	r2, r3, #31
90002bfe:	4613      	mov	r3, r2
90002c00:	011b      	lsls	r3, r3, #4
90002c02:	4413      	add	r3, r2
90002c04:	015a      	lsls	r2, r3, #5
90002c06:	1ad3      	subs	r3, r2, r3
90002c08:	3317      	adds	r3, #23
90002c0a:	099b      	lsrs	r3, r3, #6
90002c0c:	0419      	lsls	r1, r3, #16
90002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002c10:	095b      	lsrs	r3, r3, #5
90002c12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002c16:	4613      	mov	r3, r2
90002c18:	01db      	lsls	r3, r3, #7
90002c1a:	4413      	add	r3, r2
90002c1c:	005b      	lsls	r3, r3, #1
90002c1e:	4413      	add	r3, r2
90002c20:	3321      	adds	r3, #33	@ 0x21
90002c22:	099b      	lsrs	r3, r3, #6
90002c24:	021b      	lsls	r3, r3, #8
90002c26:	4319      	orrs	r1, r3
90002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002c2a:	f003 021f 	and.w	r2, r3, #31
90002c2e:	4613      	mov	r3, r2
90002c30:	011b      	lsls	r3, r3, #4
90002c32:	4413      	add	r3, r2
90002c34:	015a      	lsls	r2, r3, #5
90002c36:	1ad3      	subs	r3, r2, r3
90002c38:	3317      	adds	r3, #23
90002c3a:	099b      	lsrs	r3, r3, #6
90002c3c:	430b      	orrs	r3, r1
90002c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
90002c42:	613b      	str	r3, [r7, #16]
    break;
90002c44:	e002      	b.n	90002c4c <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002c46:	2300      	movs	r3, #0
90002c48:	617b      	str	r3, [r7, #20]
    break;
90002c4a:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002c4c:	4b13      	ldr	r3, [pc, #76]	@ (90002c9c <LL_FillBuffer+0xcc>)
90002c4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
90002c52:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002c54:	4a11      	ldr	r2, [pc, #68]	@ (90002c9c <LL_FillBuffer+0xcc>)
90002c56:	697b      	ldr	r3, [r7, #20]
90002c58:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002c5a:	4a10      	ldr	r2, [pc, #64]	@ (90002c9c <LL_FillBuffer+0xcc>)
90002c5c:	6a3b      	ldr	r3, [r7, #32]
90002c5e:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
90002c60:	4b0e      	ldr	r3, [pc, #56]	@ (90002c9c <LL_FillBuffer+0xcc>)
90002c62:	4a0f      	ldr	r2, [pc, #60]	@ (90002ca0 <LL_FillBuffer+0xd0>)
90002c64:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002c66:	480d      	ldr	r0, [pc, #52]	@ (90002c9c <LL_FillBuffer+0xcc>)
90002c68:	f000 ff36 	bl	90003ad8 <HAL_DMA2D_Init>
90002c6c:	4603      	mov	r3, r0
90002c6e:	2b00      	cmp	r3, #0
90002c70:	d10e      	bne.n	90002c90 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90002c72:	68ba      	ldr	r2, [r7, #8]
90002c74:	683b      	ldr	r3, [r7, #0]
90002c76:	9300      	str	r3, [sp, #0]
90002c78:	687b      	ldr	r3, [r7, #4]
90002c7a:	6939      	ldr	r1, [r7, #16]
90002c7c:	4807      	ldr	r0, [pc, #28]	@ (90002c9c <LL_FillBuffer+0xcc>)
90002c7e:	f000 ff99 	bl	90003bb4 <HAL_DMA2D_Start>
90002c82:	4603      	mov	r3, r0
90002c84:	2b00      	cmp	r3, #0
90002c86:	d103      	bne.n	90002c90 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002c88:	2132      	movs	r1, #50	@ 0x32
90002c8a:	4804      	ldr	r0, [pc, #16]	@ (90002c9c <LL_FillBuffer+0xcc>)
90002c8c:	f000 ffbd 	bl	90003c0a <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002c90:	bf00      	nop
90002c92:	3718      	adds	r7, #24
90002c94:	46bd      	mov	sp, r7
90002c96:	bd80      	pop	{r7, pc}
90002c98:	200011dc 	.word	0x200011dc
90002c9c:	200010cc 	.word	0x200010cc
90002ca0:	52001000 	.word	0x52001000

90002ca4 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002ca4:	b580      	push	{r7, lr}
90002ca6:	b088      	sub	sp, #32
90002ca8:	af02      	add	r7, sp, #8
90002caa:	60f8      	str	r0, [r7, #12]
90002cac:	60b9      	str	r1, [r7, #8]
90002cae:	607a      	str	r2, [r7, #4]
90002cb0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002cb2:	4a23      	ldr	r2, [pc, #140]	@ (90002d40 <LL_ConvertLineToRGB+0x9c>)
90002cb4:	68fb      	ldr	r3, [r7, #12]
90002cb6:	015b      	lsls	r3, r3, #5
90002cb8:	4413      	add	r3, r2
90002cba:	330c      	adds	r3, #12
90002cbc:	681b      	ldr	r3, [r3, #0]
90002cbe:	2b02      	cmp	r3, #2
90002cc0:	d102      	bne.n	90002cc8 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002cc2:	2302      	movs	r3, #2
90002cc4:	617b      	str	r3, [r7, #20]
    break;
90002cc6:	e002      	b.n	90002cce <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002cc8:	2300      	movs	r3, #0
90002cca:	617b      	str	r3, [r7, #20]
    break;
90002ccc:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002cce:	4b1d      	ldr	r3, [pc, #116]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002cd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002cd4:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002cd6:	4a1b      	ldr	r2, [pc, #108]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002cd8:	697b      	ldr	r3, [r7, #20]
90002cda:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002cdc:	4b19      	ldr	r3, [pc, #100]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002cde:	2200      	movs	r2, #0
90002ce0:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002ce2:	4b18      	ldr	r3, [pc, #96]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002ce4:	2200      	movs	r2, #0
90002ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002ce8:	4b16      	ldr	r3, [pc, #88]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002cea:	22ff      	movs	r2, #255	@ 0xff
90002cec:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002cee:	4a15      	ldr	r2, [pc, #84]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002cf0:	6a3b      	ldr	r3, [r7, #32]
90002cf2:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002cf4:	4b13      	ldr	r3, [pc, #76]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002cf6:	2200      	movs	r2, #0
90002cf8:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002cfa:	4b12      	ldr	r3, [pc, #72]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002cfc:	4a12      	ldr	r2, [pc, #72]	@ (90002d48 <LL_ConvertLineToRGB+0xa4>)
90002cfe:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002d00:	4810      	ldr	r0, [pc, #64]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002d02:	f000 fee9 	bl	90003ad8 <HAL_DMA2D_Init>
90002d06:	4603      	mov	r3, r0
90002d08:	2b00      	cmp	r3, #0
90002d0a:	d115      	bne.n	90002d38 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002d0c:	2101      	movs	r1, #1
90002d0e:	480d      	ldr	r0, [pc, #52]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002d10:	f001 f864 	bl	90003ddc <HAL_DMA2D_ConfigLayer>
90002d14:	4603      	mov	r3, r0
90002d16:	2b00      	cmp	r3, #0
90002d18:	d10e      	bne.n	90002d38 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002d1a:	68b9      	ldr	r1, [r7, #8]
90002d1c:	687a      	ldr	r2, [r7, #4]
90002d1e:	2301      	movs	r3, #1
90002d20:	9300      	str	r3, [sp, #0]
90002d22:	683b      	ldr	r3, [r7, #0]
90002d24:	4807      	ldr	r0, [pc, #28]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002d26:	f000 ff45 	bl	90003bb4 <HAL_DMA2D_Start>
90002d2a:	4603      	mov	r3, r0
90002d2c:	2b00      	cmp	r3, #0
90002d2e:	d103      	bne.n	90002d38 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002d30:	2132      	movs	r1, #50	@ 0x32
90002d32:	4804      	ldr	r0, [pc, #16]	@ (90002d44 <LL_ConvertLineToRGB+0xa0>)
90002d34:	f000 ff69 	bl	90003c0a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002d38:	bf00      	nop
90002d3a:	3718      	adds	r7, #24
90002d3c:	46bd      	mov	sp, r7
90002d3e:	bd80      	pop	{r7, pc}
90002d40:	200011dc 	.word	0x200011dc
90002d44:	200010cc 	.word	0x200010cc
90002d48:	52001000 	.word	0x52001000

90002d4c <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002d4c:	b580      	push	{r7, lr}
90002d4e:	b08e      	sub	sp, #56	@ 0x38
90002d50:	af00      	add	r7, sp, #0
90002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002d54:	687b      	ldr	r3, [r7, #4]
90002d56:	681b      	ldr	r3, [r3, #0]
90002d58:	4a5b      	ldr	r2, [pc, #364]	@ (90002ec8 <LTDC_MspInit+0x17c>)
90002d5a:	4293      	cmp	r3, r2
90002d5c:	f040 80b0 	bne.w	90002ec0 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002d60:	4b5a      	ldr	r3, [pc, #360]	@ (90002ecc <LTDC_MspInit+0x180>)
90002d62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002d66:	4a59      	ldr	r2, [pc, #356]	@ (90002ecc <LTDC_MspInit+0x180>)
90002d68:	f043 0308 	orr.w	r3, r3, #8
90002d6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002d70:	4b56      	ldr	r3, [pc, #344]	@ (90002ecc <LTDC_MspInit+0x180>)
90002d72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002d76:	f003 0308 	and.w	r3, r3, #8
90002d7a:	623b      	str	r3, [r7, #32]
90002d7c:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002d7e:	4b53      	ldr	r3, [pc, #332]	@ (90002ecc <LTDC_MspInit+0x180>)
90002d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d84:	4a51      	ldr	r2, [pc, #324]	@ (90002ecc <LTDC_MspInit+0x180>)
90002d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d8e:	4b4f      	ldr	r3, [pc, #316]	@ (90002ecc <LTDC_MspInit+0x180>)
90002d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002d98:	61fb      	str	r3, [r7, #28]
90002d9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002d9c:	4b4b      	ldr	r3, [pc, #300]	@ (90002ecc <LTDC_MspInit+0x180>)
90002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002da2:	4a4a      	ldr	r2, [pc, #296]	@ (90002ecc <LTDC_MspInit+0x180>)
90002da4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002dac:	4b47      	ldr	r3, [pc, #284]	@ (90002ecc <LTDC_MspInit+0x180>)
90002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002db2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002db6:	61bb      	str	r3, [r7, #24]
90002db8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002dba:	4b44      	ldr	r3, [pc, #272]	@ (90002ecc <LTDC_MspInit+0x180>)
90002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002dc0:	4a42      	ldr	r2, [pc, #264]	@ (90002ecc <LTDC_MspInit+0x180>)
90002dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002dca:	4b40      	ldr	r3, [pc, #256]	@ (90002ecc <LTDC_MspInit+0x180>)
90002dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002dd4:	617b      	str	r3, [r7, #20]
90002dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002dd8:	4b3c      	ldr	r3, [pc, #240]	@ (90002ecc <LTDC_MspInit+0x180>)
90002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002dde:	4a3b      	ldr	r2, [pc, #236]	@ (90002ecc <LTDC_MspInit+0x180>)
90002de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002de8:	4b38      	ldr	r3, [pc, #224]	@ (90002ecc <LTDC_MspInit+0x180>)
90002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002df2:	613b      	str	r3, [r7, #16]
90002df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002df6:	4b35      	ldr	r3, [pc, #212]	@ (90002ecc <LTDC_MspInit+0x180>)
90002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002dfc:	4a33      	ldr	r2, [pc, #204]	@ (90002ecc <LTDC_MspInit+0x180>)
90002dfe:	f043 0308 	orr.w	r3, r3, #8
90002e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e06:	4b31      	ldr	r3, [pc, #196]	@ (90002ecc <LTDC_MspInit+0x180>)
90002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e0c:	f003 0308 	and.w	r3, r3, #8
90002e10:	60fb      	str	r3, [r7, #12]
90002e12:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002e14:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002e18:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002e1a:	2302      	movs	r3, #2
90002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002e1e:	2300      	movs	r3, #0
90002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002e22:	2302      	movs	r3, #2
90002e24:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002e26:	230e      	movs	r3, #14
90002e28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e2e:	4619      	mov	r1, r3
90002e30:	4827      	ldr	r0, [pc, #156]	@ (90002ed0 <LTDC_MspInit+0x184>)
90002e32:	f001 f927 	bl	90004084 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002e36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002e3c:	230e      	movs	r3, #14
90002e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e44:	4619      	mov	r1, r3
90002e46:	4823      	ldr	r0, [pc, #140]	@ (90002ed4 <LTDC_MspInit+0x188>)
90002e48:	f001 f91c 	bl	90004084 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002e4c:	23ff      	movs	r3, #255	@ 0xff
90002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002e50:	230e      	movs	r3, #14
90002e52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e58:	4619      	mov	r1, r3
90002e5a:	481f      	ldr	r0, [pc, #124]	@ (90002ed8 <LTDC_MspInit+0x18c>)
90002e5c:	f001 f912 	bl	90004084 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002e60:	f240 2302 	movw	r3, #514	@ 0x202
90002e64:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002e66:	2302      	movs	r3, #2
90002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002e6a:	2300      	movs	r3, #0
90002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002e6e:	2302      	movs	r3, #2
90002e70:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002e72:	230e      	movs	r3, #14
90002e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e7a:	4619      	mov	r1, r3
90002e7c:	4817      	ldr	r0, [pc, #92]	@ (90002edc <LTDC_MspInit+0x190>)
90002e7e:	f001 f901 	bl	90004084 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002e82:	2380      	movs	r3, #128	@ 0x80
90002e84:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002e86:	2301      	movs	r3, #1
90002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e8e:	4619      	mov	r1, r3
90002e90:	4813      	ldr	r0, [pc, #76]	@ (90002ee0 <LTDC_MspInit+0x194>)
90002e92:	f001 f8f7 	bl	90004084 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002e96:	2201      	movs	r2, #1
90002e98:	2180      	movs	r1, #128	@ 0x80
90002e9a:	4811      	ldr	r0, [pc, #68]	@ (90002ee0 <LTDC_MspInit+0x194>)
90002e9c:	f001 fbac 	bl	900045f8 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (90002ecc <LTDC_MspInit+0x180>)
90002ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002ea6:	4a09      	ldr	r2, [pc, #36]	@ (90002ecc <LTDC_MspInit+0x180>)
90002ea8:	f043 0308 	orr.w	r3, r3, #8
90002eac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002eb0:	4b06      	ldr	r3, [pc, #24]	@ (90002ecc <LTDC_MspInit+0x180>)
90002eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002eb6:	4a05      	ldr	r2, [pc, #20]	@ (90002ecc <LTDC_MspInit+0x180>)
90002eb8:	f023 0308 	bic.w	r3, r3, #8
90002ebc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002ec0:	bf00      	nop
90002ec2:	3738      	adds	r7, #56	@ 0x38
90002ec4:	46bd      	mov	sp, r7
90002ec6:	bd80      	pop	{r7, pc}
90002ec8:	50001000 	.word	0x50001000
90002ecc:	58024400 	.word	0x58024400
90002ed0:	58022000 	.word	0x58022000
90002ed4:	58022400 	.word	0x58022400
90002ed8:	58022800 	.word	0x58022800
90002edc:	58021c00 	.word	0x58021c00
90002ee0:	58020c00 	.word	0x58020c00

90002ee4 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002ee4:	b480      	push	{r7}
90002ee6:	b085      	sub	sp, #20
90002ee8:	af00      	add	r7, sp, #0
90002eea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002eec:	687b      	ldr	r3, [r7, #4]
90002eee:	681b      	ldr	r3, [r3, #0]
90002ef0:	4a11      	ldr	r2, [pc, #68]	@ (90002f38 <DMA2D_MspInit+0x54>)
90002ef2:	4293      	cmp	r3, r2
90002ef4:	d11a      	bne.n	90002f2c <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002ef6:	4b11      	ldr	r3, [pc, #68]	@ (90002f3c <DMA2D_MspInit+0x58>)
90002ef8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002efc:	4a0f      	ldr	r2, [pc, #60]	@ (90002f3c <DMA2D_MspInit+0x58>)
90002efe:	f043 0310 	orr.w	r3, r3, #16
90002f02:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002f06:	4b0d      	ldr	r3, [pc, #52]	@ (90002f3c <DMA2D_MspInit+0x58>)
90002f08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002f0c:	f003 0310 	and.w	r3, r3, #16
90002f10:	60fb      	str	r3, [r7, #12]
90002f12:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002f14:	4b09      	ldr	r3, [pc, #36]	@ (90002f3c <DMA2D_MspInit+0x58>)
90002f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002f18:	4a08      	ldr	r2, [pc, #32]	@ (90002f3c <DMA2D_MspInit+0x58>)
90002f1a:	f043 0310 	orr.w	r3, r3, #16
90002f1e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002f20:	4b06      	ldr	r3, [pc, #24]	@ (90002f3c <DMA2D_MspInit+0x58>)
90002f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002f24:	4a05      	ldr	r2, [pc, #20]	@ (90002f3c <DMA2D_MspInit+0x58>)
90002f26:	f023 0310 	bic.w	r3, r3, #16
90002f2a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002f2c:	bf00      	nop
90002f2e:	3714      	adds	r7, #20
90002f30:	46bd      	mov	sp, r7
90002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f36:	4770      	bx	lr
90002f38:	52001000 	.word	0x52001000
90002f3c:	58024400 	.word	0x58024400

90002f40 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002f40:	b580      	push	{r7, lr}
90002f42:	b08a      	sub	sp, #40	@ 0x28
90002f44:	af00      	add	r7, sp, #0
90002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002f48:	4b18      	ldr	r3, [pc, #96]	@ (90002fac <TIMx_PWM_MspInit+0x6c>)
90002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f4e:	4a17      	ldr	r2, [pc, #92]	@ (90002fac <TIMx_PWM_MspInit+0x6c>)
90002f50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f58:	4b14      	ldr	r3, [pc, #80]	@ (90002fac <TIMx_PWM_MspInit+0x6c>)
90002f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002f62:	613b      	str	r3, [r7, #16]
90002f64:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002f66:	4b11      	ldr	r3, [pc, #68]	@ (90002fac <TIMx_PWM_MspInit+0x6c>)
90002f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002f6c:	4a0f      	ldr	r2, [pc, #60]	@ (90002fac <TIMx_PWM_MspInit+0x6c>)
90002f6e:	f043 0302 	orr.w	r3, r3, #2
90002f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002f76:	4b0d      	ldr	r3, [pc, #52]	@ (90002fac <TIMx_PWM_MspInit+0x6c>)
90002f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002f7c:	f003 0302 	and.w	r3, r3, #2
90002f80:	60fb      	str	r3, [r7, #12]
90002f82:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002f84:	2302      	movs	r3, #2
90002f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002f88:	2300      	movs	r3, #0
90002f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002f8c:	2301      	movs	r3, #1
90002f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002f90:	2303      	movs	r3, #3
90002f92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002f94:	2301      	movs	r3, #1
90002f96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002f98:	f107 0314 	add.w	r3, r7, #20
90002f9c:	4619      	mov	r1, r3
90002f9e:	4804      	ldr	r0, [pc, #16]	@ (90002fb0 <TIMx_PWM_MspInit+0x70>)
90002fa0:	f001 f870 	bl	90004084 <HAL_GPIO_Init>
}
90002fa4:	bf00      	nop
90002fa6:	3728      	adds	r7, #40	@ 0x28
90002fa8:	46bd      	mov	sp, r7
90002faa:	bd80      	pop	{r7, pc}
90002fac:	58024400 	.word	0x58024400
90002fb0:	58022800 	.word	0x58022800

90002fb4 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002fb4:	b580      	push	{r7, lr}
90002fb6:	b082      	sub	sp, #8
90002fb8:	af00      	add	r7, sp, #0
90002fba:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002fbc:	687b      	ldr	r3, [r7, #4]
90002fbe:	4a11      	ldr	r2, [pc, #68]	@ (90003004 <TIMx_PWM_Init+0x50>)
90002fc0:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002fc2:	6878      	ldr	r0, [r7, #4]
90002fc4:	f007 f9fc 	bl	9000a3c0 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002fc8:	6878      	ldr	r0, [r7, #4]
90002fca:	f7ff ffb9 	bl	90002f40 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002fce:	687b      	ldr	r3, [r7, #4]
90002fd0:	2204      	movs	r2, #4
90002fd2:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002fd4:	687b      	ldr	r3, [r7, #4]
90002fd6:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002fda:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002fdc:	687b      	ldr	r3, [r7, #4]
90002fde:	2200      	movs	r2, #0
90002fe0:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002fe2:	687b      	ldr	r3, [r7, #4]
90002fe4:	2200      	movs	r2, #0
90002fe6:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002fe8:	687b      	ldr	r3, [r7, #4]
90002fea:	2200      	movs	r2, #0
90002fec:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002fee:	687b      	ldr	r3, [r7, #4]
90002ff0:	2200      	movs	r2, #0
90002ff2:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002ff4:	6878      	ldr	r0, [r7, #4]
90002ff6:	f007 f98c 	bl	9000a312 <HAL_TIM_PWM_Init>
}
90002ffa:	bf00      	nop
90002ffc:	3708      	adds	r7, #8
90002ffe:	46bd      	mov	sp, r7
90003000:	bd80      	pop	{r7, pc}
90003002:	bf00      	nop
90003004:	40010400 	.word	0x40010400

90003008 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90003008:	b580      	push	{r7, lr}
9000300a:	b084      	sub	sp, #16
9000300c:	af00      	add	r7, sp, #0
9000300e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90003010:	2300      	movs	r3, #0
90003012:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90003014:	687b      	ldr	r3, [r7, #4]
90003016:	2b00      	cmp	r3, #0
90003018:	d003      	beq.n	90003022 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
9000301a:	f06f 0301 	mvn.w	r3, #1
9000301e:	60fb      	str	r3, [r7, #12]
90003020:	e044      	b.n	900030ac <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90003022:	687b      	ldr	r3, [r7, #4]
90003024:	2234      	movs	r2, #52	@ 0x34
90003026:	fb02 f303 	mul.w	r3, r2, r3
9000302a:	4a23      	ldr	r2, [pc, #140]	@ (900030b8 <BSP_SDRAM_Init+0xb0>)
9000302c:	4413      	add	r3, r2
9000302e:	4618      	mov	r0, r3
90003030:	f000 f892 	bl	90003158 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90003034:	687b      	ldr	r3, [r7, #4]
90003036:	2234      	movs	r2, #52	@ 0x34
90003038:	fb02 f303 	mul.w	r3, r2, r3
9000303c:	4a1e      	ldr	r2, [pc, #120]	@ (900030b8 <BSP_SDRAM_Init+0xb0>)
9000303e:	4413      	add	r3, r2
90003040:	2210      	movs	r2, #16
90003042:	2104      	movs	r1, #4
90003044:	4618      	mov	r0, r3
90003046:	f000 f83b 	bl	900030c0 <MX_SDRAM_BANK2_Init>
9000304a:	4603      	mov	r3, r0
9000304c:	2b00      	cmp	r3, #0
9000304e:	d003      	beq.n	90003058 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90003050:	f04f 33ff 	mov.w	r3, #4294967295
90003054:	60fb      	str	r3, [r7, #12]
90003056:	e029      	b.n	900030ac <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90003058:	4b18      	ldr	r3, [pc, #96]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
9000305a:	2208      	movs	r2, #8
9000305c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
9000305e:	4b17      	ldr	r3, [pc, #92]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
90003060:	2203      	movs	r2, #3
90003062:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90003064:	4b15      	ldr	r3, [pc, #84]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
90003066:	f240 6203 	movw	r2, #1539	@ 0x603
9000306a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
9000306c:	4b13      	ldr	r3, [pc, #76]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
9000306e:	2200      	movs	r2, #0
90003070:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90003072:	4b12      	ldr	r3, [pc, #72]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
90003074:	2200      	movs	r2, #0
90003076:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90003078:	4b10      	ldr	r3, [pc, #64]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
9000307a:	2230      	movs	r2, #48	@ 0x30
9000307c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
9000307e:	4b0f      	ldr	r3, [pc, #60]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
90003080:	2200      	movs	r2, #0
90003082:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90003084:	4b0d      	ldr	r3, [pc, #52]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
90003086:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000308a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
9000308c:	687b      	ldr	r3, [r7, #4]
9000308e:	2234      	movs	r2, #52	@ 0x34
90003090:	fb02 f303 	mul.w	r3, r2, r3
90003094:	4a08      	ldr	r2, [pc, #32]	@ (900030b8 <BSP_SDRAM_Init+0xb0>)
90003096:	4413      	add	r3, r2
90003098:	4908      	ldr	r1, [pc, #32]	@ (900030bc <BSP_SDRAM_Init+0xb4>)
9000309a:	4618      	mov	r0, r3
9000309c:	f7fe fb3a 	bl	90001714 <MT48LC4M32B2_Init>
900030a0:	4603      	mov	r3, r0
900030a2:	2b00      	cmp	r3, #0
900030a4:	d002      	beq.n	900030ac <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
900030a6:	f06f 0304 	mvn.w	r3, #4
900030aa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
900030ac:	68fb      	ldr	r3, [r7, #12]
}
900030ae:	4618      	mov	r0, r3
900030b0:	3710      	adds	r7, #16
900030b2:	46bd      	mov	sp, r7
900030b4:	bd80      	pop	{r7, pc}
900030b6:	bf00      	nop
900030b8:	200011fc 	.word	0x200011fc
900030bc:	20001230 	.word	0x20001230

900030c0 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
900030c0:	b580      	push	{r7, lr}
900030c2:	b08c      	sub	sp, #48	@ 0x30
900030c4:	af00      	add	r7, sp, #0
900030c6:	60f8      	str	r0, [r7, #12]
900030c8:	60b9      	str	r1, [r7, #8]
900030ca:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
900030cc:	4b20      	ldr	r3, [pc, #128]	@ (90003150 <MX_SDRAM_BANK2_Init+0x90>)
900030ce:	4a21      	ldr	r2, [pc, #132]	@ (90003154 <MX_SDRAM_BANK2_Init+0x94>)
900030d0:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
900030d2:	68fb      	ldr	r3, [r7, #12]
900030d4:	2201      	movs	r2, #1
900030d6:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900030d8:	68fb      	ldr	r3, [r7, #12]
900030da:	2200      	movs	r2, #0
900030dc:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
900030de:	68fb      	ldr	r3, [r7, #12]
900030e0:	68ba      	ldr	r2, [r7, #8]
900030e2:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
900030e4:	68fb      	ldr	r3, [r7, #12]
900030e6:	687a      	ldr	r2, [r7, #4]
900030e8:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900030ea:	4b19      	ldr	r3, [pc, #100]	@ (90003150 <MX_SDRAM_BANK2_Init+0x90>)
900030ec:	2240      	movs	r2, #64	@ 0x40
900030ee:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900030f0:	68fb      	ldr	r3, [r7, #12]
900030f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
900030f6:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900030f8:	68fb      	ldr	r3, [r7, #12]
900030fa:	2200      	movs	r2, #0
900030fc:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
900030fe:	68fb      	ldr	r3, [r7, #12]
90003100:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90003104:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90003106:	68fb      	ldr	r3, [r7, #12]
90003108:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
9000310c:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
9000310e:	68fb      	ldr	r3, [r7, #12]
90003110:	2200      	movs	r2, #0
90003112:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90003114:	2302      	movs	r3, #2
90003116:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90003118:	2307      	movs	r3, #7
9000311a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
9000311c:	2304      	movs	r3, #4
9000311e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90003120:	2307      	movs	r3, #7
90003122:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90003124:	2302      	movs	r3, #2
90003126:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90003128:	2302      	movs	r3, #2
9000312a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
9000312c:	2302      	movs	r3, #2
9000312e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90003130:	f107 0314 	add.w	r3, r7, #20
90003134:	4619      	mov	r1, r3
90003136:	68f8      	ldr	r0, [r7, #12]
90003138:	f007 f848 	bl	9000a1cc <HAL_SDRAM_Init>
9000313c:	4603      	mov	r3, r0
9000313e:	2b00      	cmp	r3, #0
90003140:	d001      	beq.n	90003146 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90003142:	2301      	movs	r3, #1
90003144:	e000      	b.n	90003148 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90003146:	2300      	movs	r3, #0
}
90003148:	4618      	mov	r0, r3
9000314a:	3730      	adds	r7, #48	@ 0x30
9000314c:	46bd      	mov	sp, r7
9000314e:	bd80      	pop	{r7, pc}
90003150:	200011fc 	.word	0x200011fc
90003154:	52004140 	.word	0x52004140

90003158 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90003158:	b580      	push	{r7, lr}
9000315a:	b08e      	sub	sp, #56	@ 0x38
9000315c:	af00      	add	r7, sp, #0
9000315e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90003160:	4b73      	ldr	r3, [pc, #460]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003162:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003166:	4a72      	ldr	r2, [pc, #456]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003168:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
9000316c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90003170:	4b6f      	ldr	r3, [pc, #444]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003172:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
9000317a:	623b      	str	r3, [r7, #32]
9000317c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
9000317e:	4b6c      	ldr	r3, [pc, #432]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003180:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003184:	4a6a      	ldr	r2, [pc, #424]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003186:	f043 0301 	orr.w	r3, r3, #1
9000318a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
9000318e:	4b68      	ldr	r3, [pc, #416]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003194:	f003 0301 	and.w	r3, r3, #1
90003198:	61fb      	str	r3, [r7, #28]
9000319a:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000319c:	4b64      	ldr	r3, [pc, #400]	@ (90003330 <SDRAM_MspInit+0x1d8>)
9000319e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031a2:	4a63      	ldr	r2, [pc, #396]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031a4:	f043 0308 	orr.w	r3, r3, #8
900031a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031ac:	4b60      	ldr	r3, [pc, #384]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031b2:	f003 0308 	and.w	r3, r3, #8
900031b6:	61bb      	str	r3, [r7, #24]
900031b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900031ba:	4b5d      	ldr	r3, [pc, #372]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031c0:	4a5b      	ldr	r2, [pc, #364]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031c2:	f043 0310 	orr.w	r3, r3, #16
900031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031ca:	4b59      	ldr	r3, [pc, #356]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031d0:	f003 0310 	and.w	r3, r3, #16
900031d4:	617b      	str	r3, [r7, #20]
900031d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900031d8:	4b55      	ldr	r3, [pc, #340]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031de:	4a54      	ldr	r2, [pc, #336]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031e0:	f043 0320 	orr.w	r3, r3, #32
900031e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031e8:	4b51      	ldr	r3, [pc, #324]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031ee:	f003 0320 	and.w	r3, r3, #32
900031f2:	613b      	str	r3, [r7, #16]
900031f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900031f6:	4b4e      	ldr	r3, [pc, #312]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031fc:	4a4c      	ldr	r2, [pc, #304]	@ (90003330 <SDRAM_MspInit+0x1d8>)
900031fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90003202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003206:	4b4a      	ldr	r3, [pc, #296]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90003210:	60fb      	str	r3, [r7, #12]
90003212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90003214:	4b46      	ldr	r3, [pc, #280]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000321a:	4a45      	ldr	r2, [pc, #276]	@ (90003330 <SDRAM_MspInit+0x1d8>)
9000321c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90003220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003224:	4b42      	ldr	r3, [pc, #264]	@ (90003330 <SDRAM_MspInit+0x1d8>)
90003226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000322e:	60bb      	str	r3, [r7, #8]
90003230:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90003232:	2302      	movs	r3, #2
90003234:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90003236:	2301      	movs	r3, #1
90003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
9000323a:	2303      	movs	r3, #3
9000323c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000323e:	230c      	movs	r3, #12
90003240:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90003242:	f24c 7303 	movw	r3, #50947	@ 0xc703
90003246:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90003248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000324c:	4619      	mov	r1, r3
9000324e:	4839      	ldr	r0, [pc, #228]	@ (90003334 <SDRAM_MspInit+0x1dc>)
90003250:	f000 ff18 	bl	90004084 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90003254:	f64f 7383 	movw	r3, #65411	@ 0xff83
90003258:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000325a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000325e:	4619      	mov	r1, r3
90003260:	4835      	ldr	r0, [pc, #212]	@ (90003338 <SDRAM_MspInit+0x1e0>)
90003262:	f000 ff0f 	bl	90004084 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90003266:	f64f 033f 	movw	r3, #63551	@ 0xf83f
9000326a:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000326c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003270:	4619      	mov	r1, r3
90003272:	4832      	ldr	r0, [pc, #200]	@ (9000333c <SDRAM_MspInit+0x1e4>)
90003274:	f000 ff06 	bl	90004084 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90003278:	f248 1333 	movw	r3, #33075	@ 0x8133
9000327c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000327e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003282:	4619      	mov	r1, r3
90003284:	482e      	ldr	r0, [pc, #184]	@ (90003340 <SDRAM_MspInit+0x1e8>)
90003286:	f000 fefd 	bl	90004084 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000328a:	23e0      	movs	r3, #224	@ 0xe0
9000328c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000328e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003292:	4619      	mov	r1, r3
90003294:	482b      	ldr	r0, [pc, #172]	@ (90003344 <SDRAM_MspInit+0x1ec>)
90003296:	f000 fef5 	bl	90004084 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000329a:	4b2b      	ldr	r3, [pc, #172]	@ (90003348 <SDRAM_MspInit+0x1f0>)
9000329c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
900032a0:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900032a2:	4b29      	ldr	r3, [pc, #164]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
900032a8:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900032aa:	4b27      	ldr	r3, [pc, #156]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032ac:	2280      	movs	r2, #128	@ 0x80
900032ae:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900032b0:	4b25      	ldr	r3, [pc, #148]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032b2:	2200      	movs	r2, #0
900032b4:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900032b6:	4b24      	ldr	r3, [pc, #144]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032b8:	f240 2202 	movw	r2, #514	@ 0x202
900032bc:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900032be:	4b22      	ldr	r3, [pc, #136]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032c0:	f640 0208 	movw	r2, #2056	@ 0x808
900032c4:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900032c6:	4b20      	ldr	r3, [pc, #128]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032c8:	2220      	movs	r2, #32
900032ca:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900032cc:	4b1e      	ldr	r3, [pc, #120]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032ce:	2280      	movs	r2, #128	@ 0x80
900032d0:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900032d2:	4b1d      	ldr	r3, [pc, #116]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900032d8:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
900032da:	4b1b      	ldr	r3, [pc, #108]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032dc:	2200      	movs	r2, #0
900032de:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
900032e0:	4b19      	ldr	r3, [pc, #100]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032e2:	2200      	movs	r2, #0
900032e4:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
900032e6:	4b18      	ldr	r3, [pc, #96]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032e8:	2280      	movs	r2, #128	@ 0x80
900032ea:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
900032ec:	4b16      	ldr	r3, [pc, #88]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032ee:	2200      	movs	r2, #0
900032f0:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
900032f2:	4b15      	ldr	r3, [pc, #84]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032f4:	2200      	movs	r2, #0
900032f6:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900032f8:	4b13      	ldr	r3, [pc, #76]	@ (90003348 <SDRAM_MspInit+0x1f0>)
900032fa:	4a14      	ldr	r2, [pc, #80]	@ (9000334c <SDRAM_MspInit+0x1f4>)
900032fc:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900032fe:	4b14      	ldr	r3, [pc, #80]	@ (90003350 <SDRAM_MspInit+0x1f8>)
90003300:	4a11      	ldr	r2, [pc, #68]	@ (90003348 <SDRAM_MspInit+0x1f0>)
90003302:	631a      	str	r2, [r3, #48]	@ 0x30
90003304:	4b10      	ldr	r3, [pc, #64]	@ (90003348 <SDRAM_MspInit+0x1f0>)
90003306:	4a12      	ldr	r2, [pc, #72]	@ (90003350 <SDRAM_MspInit+0x1f8>)
90003308:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
9000330a:	480f      	ldr	r0, [pc, #60]	@ (90003348 <SDRAM_MspInit+0x1f0>)
9000330c:	f004 f85c 	bl	900073c8 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90003310:	480d      	ldr	r0, [pc, #52]	@ (90003348 <SDRAM_MspInit+0x1f0>)
90003312:	f004 f80d 	bl	90007330 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90003316:	2200      	movs	r2, #0
90003318:	210f      	movs	r1, #15
9000331a:	207a      	movs	r0, #122	@ 0x7a
9000331c:	f000 fb2f 	bl	9000397e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90003320:	207a      	movs	r0, #122	@ 0x7a
90003322:	f000 fb46 	bl	900039b2 <HAL_NVIC_EnableIRQ>
}
90003326:	bf00      	nop
90003328:	3738      	adds	r7, #56	@ 0x38
9000332a:	46bd      	mov	sp, r7
9000332c:	bd80      	pop	{r7, pc}
9000332e:	bf00      	nop
90003330:	58024400 	.word	0x58024400
90003334:	58020c00 	.word	0x58020c00
90003338:	58021000 	.word	0x58021000
9000333c:	58021400 	.word	0x58021400
90003340:	58021800 	.word	0x58021800
90003344:	58021c00 	.word	0x58021c00
90003348:	20001250 	.word	0x20001250
9000334c:	52000040 	.word	0x52000040
90003350:	200011fc 	.word	0x200011fc

90003354 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90003354:	b580      	push	{r7, lr}
90003356:	b088      	sub	sp, #32
90003358:	af00      	add	r7, sp, #0
9000335a:	6078      	str	r0, [r7, #4]
9000335c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000335e:	2300      	movs	r3, #0
90003360:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90003362:	687b      	ldr	r3, [r7, #4]
90003364:	2b00      	cmp	r3, #0
90003366:	d11c      	bne.n	900033a2 <BSP_TS_Init+0x4e>
90003368:	683b      	ldr	r3, [r7, #0]
9000336a:	681b      	ldr	r3, [r3, #0]
9000336c:	2b00      	cmp	r3, #0
9000336e:	d018      	beq.n	900033a2 <BSP_TS_Init+0x4e>
90003370:	683b      	ldr	r3, [r7, #0]
90003372:	681b      	ldr	r3, [r3, #0]
90003374:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
90003378:	d813      	bhi.n	900033a2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
9000337a:	683b      	ldr	r3, [r7, #0]
9000337c:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
9000337e:	2b00      	cmp	r3, #0
90003380:	d00f      	beq.n	900033a2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90003382:	683b      	ldr	r3, [r7, #0]
90003384:	685b      	ldr	r3, [r3, #4]
90003386:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
9000338a:	d80a      	bhi.n	900033a2 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
9000338c:	683b      	ldr	r3, [r7, #0]
9000338e:	68da      	ldr	r2, [r3, #12]
90003390:	683b      	ldr	r3, [r7, #0]
90003392:	6819      	ldr	r1, [r3, #0]
90003394:	683b      	ldr	r3, [r7, #0]
90003396:	685b      	ldr	r3, [r3, #4]
90003398:	428b      	cmp	r3, r1
9000339a:	bf28      	it	cs
9000339c:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
9000339e:	429a      	cmp	r2, r3
900033a0:	d903      	bls.n	900033aa <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900033a2:	f06f 0301 	mvn.w	r3, #1
900033a6:	61fb      	str	r3, [r7, #28]
900033a8:	e06e      	b.n	90003488 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
900033aa:	6878      	ldr	r0, [r7, #4]
900033ac:	f000 f878 	bl	900034a0 <FT5336_Probe>
900033b0:	4603      	mov	r3, r0
900033b2:	2b00      	cmp	r3, #0
900033b4:	d003      	beq.n	900033be <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
900033b6:	f04f 33ff 	mov.w	r3, #4294967295
900033ba:	61fb      	str	r3, [r7, #28]
900033bc:	e064      	b.n	90003488 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900033be:	683b      	ldr	r3, [r7, #0]
900033c0:	681a      	ldr	r2, [r3, #0]
900033c2:	4934      	ldr	r1, [pc, #208]	@ (90003494 <BSP_TS_Init+0x140>)
900033c4:	687b      	ldr	r3, [r7, #4]
900033c6:	019b      	lsls	r3, r3, #6
900033c8:	440b      	add	r3, r1
900033ca:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
900033cc:	683b      	ldr	r3, [r7, #0]
900033ce:	685a      	ldr	r2, [r3, #4]
900033d0:	4930      	ldr	r1, [pc, #192]	@ (90003494 <BSP_TS_Init+0x140>)
900033d2:	687b      	ldr	r3, [r7, #4]
900033d4:	019b      	lsls	r3, r3, #6
900033d6:	440b      	add	r3, r1
900033d8:	3304      	adds	r3, #4
900033da:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
900033dc:	683b      	ldr	r3, [r7, #0]
900033de:	689a      	ldr	r2, [r3, #8]
900033e0:	492c      	ldr	r1, [pc, #176]	@ (90003494 <BSP_TS_Init+0x140>)
900033e2:	687b      	ldr	r3, [r7, #4]
900033e4:	019b      	lsls	r3, r3, #6
900033e6:	440b      	add	r3, r1
900033e8:	3308      	adds	r3, #8
900033ea:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
900033ec:	683b      	ldr	r3, [r7, #0]
900033ee:	68da      	ldr	r2, [r3, #12]
900033f0:	4928      	ldr	r1, [pc, #160]	@ (90003494 <BSP_TS_Init+0x140>)
900033f2:	687b      	ldr	r3, [r7, #4]
900033f4:	019b      	lsls	r3, r3, #6
900033f6:	440b      	add	r3, r1
900033f8:	330c      	adds	r3, #12
900033fa:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900033fc:	4b26      	ldr	r3, [pc, #152]	@ (90003498 <BSP_TS_Init+0x144>)
900033fe:	681b      	ldr	r3, [r3, #0]
90003400:	69db      	ldr	r3, [r3, #28]
90003402:	4926      	ldr	r1, [pc, #152]	@ (9000349c <BSP_TS_Init+0x148>)
90003404:	687a      	ldr	r2, [r7, #4]
90003406:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000340a:	f107 010c 	add.w	r1, r7, #12
9000340e:	4610      	mov	r0, r2
90003410:	4798      	blx	r3
90003412:	4603      	mov	r3, r0
90003414:	2b00      	cmp	r3, #0
90003416:	da03      	bge.n	90003420 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90003418:	f06f 0304 	mvn.w	r3, #4
9000341c:	61fb      	str	r3, [r7, #28]
9000341e:	e033      	b.n	90003488 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90003420:	693a      	ldr	r2, [r7, #16]
90003422:	491c      	ldr	r1, [pc, #112]	@ (90003494 <BSP_TS_Init+0x140>)
90003424:	687b      	ldr	r3, [r7, #4]
90003426:	019b      	lsls	r3, r3, #6
90003428:	440b      	add	r3, r1
9000342a:	3310      	adds	r3, #16
9000342c:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
9000342e:	697a      	ldr	r2, [r7, #20]
90003430:	4918      	ldr	r1, [pc, #96]	@ (90003494 <BSP_TS_Init+0x140>)
90003432:	687b      	ldr	r3, [r7, #4]
90003434:	019b      	lsls	r3, r3, #6
90003436:	440b      	add	r3, r1
90003438:	3314      	adds	r3, #20
9000343a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
9000343c:	2300      	movs	r3, #0
9000343e:	61bb      	str	r3, [r7, #24]
90003440:	e01f      	b.n	90003482 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90003442:	683b      	ldr	r3, [r7, #0]
90003444:	681a      	ldr	r2, [r3, #0]
90003446:	683b      	ldr	r3, [r7, #0]
90003448:	68db      	ldr	r3, [r3, #12]
9000344a:	4413      	add	r3, r2
9000344c:	1c5a      	adds	r2, r3, #1
9000344e:	4811      	ldr	r0, [pc, #68]	@ (90003494 <BSP_TS_Init+0x140>)
90003450:	687b      	ldr	r3, [r7, #4]
90003452:	0119      	lsls	r1, r3, #4
90003454:	69bb      	ldr	r3, [r7, #24]
90003456:	440b      	add	r3, r1
90003458:	3306      	adds	r3, #6
9000345a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000345e:	683b      	ldr	r3, [r7, #0]
90003460:	685a      	ldr	r2, [r3, #4]
90003462:	683b      	ldr	r3, [r7, #0]
90003464:	68db      	ldr	r3, [r3, #12]
90003466:	4413      	add	r3, r2
90003468:	1c5a      	adds	r2, r3, #1
9000346a:	480a      	ldr	r0, [pc, #40]	@ (90003494 <BSP_TS_Init+0x140>)
9000346c:	687b      	ldr	r3, [r7, #4]
9000346e:	0119      	lsls	r1, r3, #4
90003470:	69bb      	ldr	r3, [r7, #24]
90003472:	440b      	add	r3, r1
90003474:	330a      	adds	r3, #10
90003476:	009b      	lsls	r3, r3, #2
90003478:	4403      	add	r3, r0
9000347a:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
9000347c:	69bb      	ldr	r3, [r7, #24]
9000347e:	3301      	adds	r3, #1
90003480:	61bb      	str	r3, [r7, #24]
90003482:	69bb      	ldr	r3, [r7, #24]
90003484:	2b04      	cmp	r3, #4
90003486:	d9dc      	bls.n	90003442 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
90003488:	69fb      	ldr	r3, [r7, #28]
}
9000348a:	4618      	mov	r0, r3
9000348c:	3720      	adds	r7, #32
9000348e:	46bd      	mov	sp, r7
90003490:	bd80      	pop	{r7, pc}
90003492:	bf00      	nop
90003494:	200012c4 	.word	0x200012c4
90003498:	200012bc 	.word	0x200012bc
9000349c:	200012c0 	.word	0x200012c0

900034a0 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
900034a0:	b580      	push	{r7, lr}
900034a2:	b08a      	sub	sp, #40	@ 0x28
900034a4:	af00      	add	r7, sp, #0
900034a6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
900034a8:	2300      	movs	r3, #0
900034aa:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
900034ac:	2300      	movs	r3, #0
900034ae:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
900034b0:	2370      	movs	r3, #112	@ 0x70
900034b2:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
900034b4:	4b23      	ldr	r3, [pc, #140]	@ (90003544 <FT5336_Probe+0xa4>)
900034b6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
900034b8:	4b23      	ldr	r3, [pc, #140]	@ (90003548 <FT5336_Probe+0xa8>)
900034ba:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
900034bc:	4b23      	ldr	r3, [pc, #140]	@ (9000354c <FT5336_Probe+0xac>)
900034be:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
900034c0:	4b23      	ldr	r3, [pc, #140]	@ (90003550 <FT5336_Probe+0xb0>)
900034c2:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
900034c4:	4b23      	ldr	r3, [pc, #140]	@ (90003554 <FT5336_Probe+0xb4>)
900034c6:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
900034c8:	f107 030c 	add.w	r3, r7, #12
900034cc:	4619      	mov	r1, r3
900034ce:	4822      	ldr	r0, [pc, #136]	@ (90003558 <FT5336_Probe+0xb8>)
900034d0:	f7fd fdc0 	bl	90001054 <FT5336_RegisterBusIO>
900034d4:	4603      	mov	r3, r0
900034d6:	2b00      	cmp	r3, #0
900034d8:	d003      	beq.n	900034e2 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
900034da:	f06f 0307 	mvn.w	r3, #7
900034de:	627b      	str	r3, [r7, #36]	@ 0x24
900034e0:	e02a      	b.n	90003538 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
900034e2:	f107 0308 	add.w	r3, r7, #8
900034e6:	4619      	mov	r1, r3
900034e8:	481b      	ldr	r0, [pc, #108]	@ (90003558 <FT5336_Probe+0xb8>)
900034ea:	f7fd fead 	bl	90001248 <FT5336_ReadID>
900034ee:	4603      	mov	r3, r0
900034f0:	2b00      	cmp	r3, #0
900034f2:	d003      	beq.n	900034fc <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
900034f4:	f06f 0304 	mvn.w	r3, #4
900034f8:	627b      	str	r3, [r7, #36]	@ 0x24
900034fa:	e01d      	b.n	90003538 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
900034fc:	68bb      	ldr	r3, [r7, #8]
900034fe:	2b51      	cmp	r3, #81	@ 0x51
90003500:	d003      	beq.n	9000350a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
90003502:	f06f 0306 	mvn.w	r3, #6
90003506:	627b      	str	r3, [r7, #36]	@ 0x24
90003508:	e016      	b.n	90003538 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
9000350a:	4a14      	ldr	r2, [pc, #80]	@ (9000355c <FT5336_Probe+0xbc>)
9000350c:	687b      	ldr	r3, [r7, #4]
9000350e:	4912      	ldr	r1, [pc, #72]	@ (90003558 <FT5336_Probe+0xb8>)
90003510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90003514:	4b12      	ldr	r3, [pc, #72]	@ (90003560 <FT5336_Probe+0xc0>)
90003516:	4a13      	ldr	r2, [pc, #76]	@ (90003564 <FT5336_Probe+0xc4>)
90003518:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000351a:	4b11      	ldr	r3, [pc, #68]	@ (90003560 <FT5336_Probe+0xc0>)
9000351c:	681b      	ldr	r3, [r3, #0]
9000351e:	681b      	ldr	r3, [r3, #0]
90003520:	490e      	ldr	r1, [pc, #56]	@ (9000355c <FT5336_Probe+0xbc>)
90003522:	687a      	ldr	r2, [r7, #4]
90003524:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90003528:	4610      	mov	r0, r2
9000352a:	4798      	blx	r3
9000352c:	4603      	mov	r3, r0
9000352e:	2b00      	cmp	r3, #0
90003530:	d002      	beq.n	90003538 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
90003532:	f06f 0304 	mvn.w	r3, #4
90003536:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
90003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000353a:	4618      	mov	r0, r3
9000353c:	3728      	adds	r7, #40	@ 0x28
9000353e:	46bd      	mov	sp, r7
90003540:	bd80      	pop	{r7, pc}
90003542:	bf00      	nop
90003544:	900019e9 	.word	0x900019e9
90003548:	90001a5d 	.word	0x90001a5d
9000354c:	90001b85 	.word	0x90001b85
90003550:	90001b29 	.word	0x90001b29
90003554:	90001be1 	.word	0x90001be1
90003558:	20001304 	.word	0x20001304
9000355c:	200012c0 	.word	0x200012c0
90003560:	200012bc 	.word	0x200012bc
90003564:	20000000 	.word	0x20000000

90003568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90003568:	b480      	push	{r7}
9000356a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000356c:	4b29      	ldr	r3, [pc, #164]	@ (90003614 <SystemInit+0xac>)
9000356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90003572:	4a28      	ldr	r2, [pc, #160]	@ (90003614 <SystemInit+0xac>)
90003574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90003578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
9000357c:	4b26      	ldr	r3, [pc, #152]	@ (90003618 <SystemInit+0xb0>)
9000357e:	681b      	ldr	r3, [r3, #0]
90003580:	4a25      	ldr	r2, [pc, #148]	@ (90003618 <SystemInit+0xb0>)
90003582:	f043 0301 	orr.w	r3, r3, #1
90003586:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90003588:	4b23      	ldr	r3, [pc, #140]	@ (90003618 <SystemInit+0xb0>)
9000358a:	2200      	movs	r2, #0
9000358c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
9000358e:	4b22      	ldr	r3, [pc, #136]	@ (90003618 <SystemInit+0xb0>)
90003590:	681a      	ldr	r2, [r3, #0]
90003592:	4921      	ldr	r1, [pc, #132]	@ (90003618 <SystemInit+0xb0>)
90003594:	4b21      	ldr	r3, [pc, #132]	@ (9000361c <SystemInit+0xb4>)
90003596:	4013      	ands	r3, r2
90003598:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
9000359a:	4b1f      	ldr	r3, [pc, #124]	@ (90003618 <SystemInit+0xb0>)
9000359c:	2200      	movs	r2, #0
9000359e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
900035a0:	4b1d      	ldr	r3, [pc, #116]	@ (90003618 <SystemInit+0xb0>)
900035a2:	2200      	movs	r2, #0
900035a4:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
900035a6:	4b1c      	ldr	r3, [pc, #112]	@ (90003618 <SystemInit+0xb0>)
900035a8:	2200      	movs	r2, #0
900035aa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
900035ac:	4b1a      	ldr	r3, [pc, #104]	@ (90003618 <SystemInit+0xb0>)
900035ae:	2200      	movs	r2, #0
900035b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
900035b2:	4b19      	ldr	r3, [pc, #100]	@ (90003618 <SystemInit+0xb0>)
900035b4:	2200      	movs	r2, #0
900035b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
900035b8:	4b17      	ldr	r3, [pc, #92]	@ (90003618 <SystemInit+0xb0>)
900035ba:	2200      	movs	r2, #0
900035bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
900035be:	4b16      	ldr	r3, [pc, #88]	@ (90003618 <SystemInit+0xb0>)
900035c0:	2200      	movs	r2, #0
900035c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
900035c4:	4b14      	ldr	r3, [pc, #80]	@ (90003618 <SystemInit+0xb0>)
900035c6:	2200      	movs	r2, #0
900035c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
900035ca:	4b13      	ldr	r3, [pc, #76]	@ (90003618 <SystemInit+0xb0>)
900035cc:	2200      	movs	r2, #0
900035ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
900035d0:	4b11      	ldr	r3, [pc, #68]	@ (90003618 <SystemInit+0xb0>)
900035d2:	2200      	movs	r2, #0
900035d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
900035d6:	4b10      	ldr	r3, [pc, #64]	@ (90003618 <SystemInit+0xb0>)
900035d8:	2200      	movs	r2, #0
900035da:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
900035dc:	4b0e      	ldr	r3, [pc, #56]	@ (90003618 <SystemInit+0xb0>)
900035de:	681b      	ldr	r3, [r3, #0]
900035e0:	4a0d      	ldr	r2, [pc, #52]	@ (90003618 <SystemInit+0xb0>)
900035e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
900035e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
900035e8:	4b0b      	ldr	r3, [pc, #44]	@ (90003618 <SystemInit+0xb0>)
900035ea:	2200      	movs	r2, #0
900035ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900035ee:	4b0c      	ldr	r3, [pc, #48]	@ (90003620 <SystemInit+0xb8>)
900035f0:	681a      	ldr	r2, [r3, #0]
900035f2:	4b0c      	ldr	r3, [pc, #48]	@ (90003624 <SystemInit+0xbc>)
900035f4:	4013      	ands	r3, r2
900035f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900035fa:	d202      	bcs.n	90003602 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
900035fc:	4b0a      	ldr	r3, [pc, #40]	@ (90003628 <SystemInit+0xc0>)
900035fe:	2201      	movs	r2, #1
90003600:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90003602:	4b04      	ldr	r3, [pc, #16]	@ (90003614 <SystemInit+0xac>)
90003604:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90003608:	609a      	str	r2, [r3, #8]
#endif  


}
9000360a:	bf00      	nop
9000360c:	46bd      	mov	sp, r7
9000360e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003612:	4770      	bx	lr
90003614:	e000ed00 	.word	0xe000ed00
90003618:	58024400 	.word	0x58024400
9000361c:	eaf6ed7f 	.word	0xeaf6ed7f
90003620:	5c001000 	.word	0x5c001000
90003624:	ffff0000 	.word	0xffff0000
90003628:	51008108 	.word	0x51008108

9000362c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
9000362c:	b480      	push	{r7}
9000362e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90003630:	4b09      	ldr	r3, [pc, #36]	@ (90003658 <ExitRun0Mode+0x2c>)
90003632:	68db      	ldr	r3, [r3, #12]
90003634:	4a08      	ldr	r2, [pc, #32]	@ (90003658 <ExitRun0Mode+0x2c>)
90003636:	f043 0302 	orr.w	r3, r3, #2
9000363a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
9000363c:	bf00      	nop
9000363e:	4b06      	ldr	r3, [pc, #24]	@ (90003658 <ExitRun0Mode+0x2c>)
90003640:	685b      	ldr	r3, [r3, #4]
90003642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90003646:	2b00      	cmp	r3, #0
90003648:	d0f9      	beq.n	9000363e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
9000364a:	bf00      	nop
9000364c:	bf00      	nop
9000364e:	46bd      	mov	sp, r7
90003650:	f85d 7b04 	ldr.w	r7, [sp], #4
90003654:	4770      	bx	lr
90003656:	bf00      	nop
90003658:	58024800 	.word	0x58024800

9000365c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
9000365c:	b580      	push	{r7, lr}
9000365e:	b082      	sub	sp, #8
90003660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90003662:	2003      	movs	r0, #3
90003664:	f000 f980 	bl	90003968 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90003668:	f004 fdae 	bl	900081c8 <HAL_RCC_GetSysClockFreq>
9000366c:	4602      	mov	r2, r0
9000366e:	4b15      	ldr	r3, [pc, #84]	@ (900036c4 <HAL_Init+0x68>)
90003670:	699b      	ldr	r3, [r3, #24]
90003672:	0a1b      	lsrs	r3, r3, #8
90003674:	f003 030f 	and.w	r3, r3, #15
90003678:	4913      	ldr	r1, [pc, #76]	@ (900036c8 <HAL_Init+0x6c>)
9000367a:	5ccb      	ldrb	r3, [r1, r3]
9000367c:	f003 031f 	and.w	r3, r3, #31
90003680:	fa22 f303 	lsr.w	r3, r2, r3
90003684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90003686:	4b0f      	ldr	r3, [pc, #60]	@ (900036c4 <HAL_Init+0x68>)
90003688:	699b      	ldr	r3, [r3, #24]
9000368a:	f003 030f 	and.w	r3, r3, #15
9000368e:	4a0e      	ldr	r2, [pc, #56]	@ (900036c8 <HAL_Init+0x6c>)
90003690:	5cd3      	ldrb	r3, [r2, r3]
90003692:	f003 031f 	and.w	r3, r3, #31
90003696:	687a      	ldr	r2, [r7, #4]
90003698:	fa22 f303 	lsr.w	r3, r2, r3
9000369c:	4a0b      	ldr	r2, [pc, #44]	@ (900036cc <HAL_Init+0x70>)
9000369e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900036a0:	4a0b      	ldr	r2, [pc, #44]	@ (900036d0 <HAL_Init+0x74>)
900036a2:	687b      	ldr	r3, [r7, #4]
900036a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
900036a6:	200f      	movs	r0, #15
900036a8:	f000 f81c 	bl	900036e4 <HAL_InitTick>
900036ac:	4603      	mov	r3, r0
900036ae:	2b00      	cmp	r3, #0
900036b0:	d001      	beq.n	900036b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
900036b2:	2301      	movs	r3, #1
900036b4:	e002      	b.n	900036bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
900036b6:	f000 f80d 	bl	900036d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
900036ba:	2300      	movs	r3, #0
}
900036bc:	4618      	mov	r0, r3
900036be:	3708      	adds	r7, #8
900036c0:	46bd      	mov	sp, r7
900036c2:	bd80      	pop	{r7, pc}
900036c4:	58024400 	.word	0x58024400
900036c8:	9000d344 	.word	0x9000d344
900036cc:	2000003c 	.word	0x2000003c
900036d0:	20000038 	.word	0x20000038

900036d4 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
900036d4:	b480      	push	{r7}
900036d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
900036d8:	bf00      	nop
900036da:	46bd      	mov	sp, r7
900036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900036e0:	4770      	bx	lr
	...

900036e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900036e4:	b580      	push	{r7, lr}
900036e6:	b082      	sub	sp, #8
900036e8:	af00      	add	r7, sp, #0
900036ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
900036ec:	4b15      	ldr	r3, [pc, #84]	@ (90003744 <HAL_InitTick+0x60>)
900036ee:	781b      	ldrb	r3, [r3, #0]
900036f0:	2b00      	cmp	r3, #0
900036f2:	d101      	bne.n	900036f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
900036f4:	2301      	movs	r3, #1
900036f6:	e021      	b.n	9000373c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
900036f8:	4b13      	ldr	r3, [pc, #76]	@ (90003748 <HAL_InitTick+0x64>)
900036fa:	681a      	ldr	r2, [r3, #0]
900036fc:	4b11      	ldr	r3, [pc, #68]	@ (90003744 <HAL_InitTick+0x60>)
900036fe:	781b      	ldrb	r3, [r3, #0]
90003700:	4619      	mov	r1, r3
90003702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90003706:	fbb3 f3f1 	udiv	r3, r3, r1
9000370a:	fbb2 f3f3 	udiv	r3, r2, r3
9000370e:	4618      	mov	r0, r3
90003710:	f000 f95d 	bl	900039ce <HAL_SYSTICK_Config>
90003714:	4603      	mov	r3, r0
90003716:	2b00      	cmp	r3, #0
90003718:	d001      	beq.n	9000371e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
9000371a:	2301      	movs	r3, #1
9000371c:	e00e      	b.n	9000373c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000371e:	687b      	ldr	r3, [r7, #4]
90003720:	2b0f      	cmp	r3, #15
90003722:	d80a      	bhi.n	9000373a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003724:	2200      	movs	r2, #0
90003726:	6879      	ldr	r1, [r7, #4]
90003728:	f04f 30ff 	mov.w	r0, #4294967295
9000372c:	f000 f927 	bl	9000397e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003730:	4a06      	ldr	r2, [pc, #24]	@ (9000374c <HAL_InitTick+0x68>)
90003732:	687b      	ldr	r3, [r7, #4]
90003734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90003736:	2300      	movs	r3, #0
90003738:	e000      	b.n	9000373c <HAL_InitTick+0x58>
    return HAL_ERROR;
9000373a:	2301      	movs	r3, #1
}
9000373c:	4618      	mov	r0, r3
9000373e:	3708      	adds	r7, #8
90003740:	46bd      	mov	sp, r7
90003742:	bd80      	pop	{r7, pc}
90003744:	20000044 	.word	0x20000044
90003748:	20000038 	.word	0x20000038
9000374c:	20000040 	.word	0x20000040

90003750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003750:	b480      	push	{r7}
90003752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90003754:	4b06      	ldr	r3, [pc, #24]	@ (90003770 <HAL_IncTick+0x20>)
90003756:	781b      	ldrb	r3, [r3, #0]
90003758:	461a      	mov	r2, r3
9000375a:	4b06      	ldr	r3, [pc, #24]	@ (90003774 <HAL_IncTick+0x24>)
9000375c:	681b      	ldr	r3, [r3, #0]
9000375e:	4413      	add	r3, r2
90003760:	4a04      	ldr	r2, [pc, #16]	@ (90003774 <HAL_IncTick+0x24>)
90003762:	6013      	str	r3, [r2, #0]
}
90003764:	bf00      	nop
90003766:	46bd      	mov	sp, r7
90003768:	f85d 7b04 	ldr.w	r7, [sp], #4
9000376c:	4770      	bx	lr
9000376e:	bf00      	nop
90003770:	20000044 	.word	0x20000044
90003774:	2000132c 	.word	0x2000132c

90003778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90003778:	b480      	push	{r7}
9000377a:	af00      	add	r7, sp, #0
  return uwTick;
9000377c:	4b03      	ldr	r3, [pc, #12]	@ (9000378c <HAL_GetTick+0x14>)
9000377e:	681b      	ldr	r3, [r3, #0]
}
90003780:	4618      	mov	r0, r3
90003782:	46bd      	mov	sp, r7
90003784:	f85d 7b04 	ldr.w	r7, [sp], #4
90003788:	4770      	bx	lr
9000378a:	bf00      	nop
9000378c:	2000132c 	.word	0x2000132c

90003790 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003790:	b480      	push	{r7}
90003792:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003794:	4b03      	ldr	r3, [pc, #12]	@ (900037a4 <HAL_GetREVID+0x14>)
90003796:	681b      	ldr	r3, [r3, #0]
90003798:	0c1b      	lsrs	r3, r3, #16
}
9000379a:	4618      	mov	r0, r3
9000379c:	46bd      	mov	sp, r7
9000379e:	f85d 7b04 	ldr.w	r7, [sp], #4
900037a2:	4770      	bx	lr
900037a4:	5c001000 	.word	0x5c001000

900037a8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
900037a8:	b480      	push	{r7}
900037aa:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
900037ac:	4b05      	ldr	r3, [pc, #20]	@ (900037c4 <HAL_EnableCompensationCell+0x1c>)
900037ae:	6a1b      	ldr	r3, [r3, #32]
900037b0:	4a04      	ldr	r2, [pc, #16]	@ (900037c4 <HAL_EnableCompensationCell+0x1c>)
900037b2:	f043 0301 	orr.w	r3, r3, #1
900037b6:	6213      	str	r3, [r2, #32]
}
900037b8:	bf00      	nop
900037ba:	46bd      	mov	sp, r7
900037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900037c0:	4770      	bx	lr
900037c2:	bf00      	nop
900037c4:	58000400 	.word	0x58000400

900037c8 <__NVIC_SetPriorityGrouping>:
{
900037c8:	b480      	push	{r7}
900037ca:	b085      	sub	sp, #20
900037cc:	af00      	add	r7, sp, #0
900037ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900037d0:	687b      	ldr	r3, [r7, #4]
900037d2:	f003 0307 	and.w	r3, r3, #7
900037d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900037d8:	4b0b      	ldr	r3, [pc, #44]	@ (90003808 <__NVIC_SetPriorityGrouping+0x40>)
900037da:	68db      	ldr	r3, [r3, #12]
900037dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900037de:	68ba      	ldr	r2, [r7, #8]
900037e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
900037e4:	4013      	ands	r3, r2
900037e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900037e8:	68fb      	ldr	r3, [r7, #12]
900037ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900037ec:	68bb      	ldr	r3, [r7, #8]
900037ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900037f0:	4b06      	ldr	r3, [pc, #24]	@ (9000380c <__NVIC_SetPriorityGrouping+0x44>)
900037f2:	4313      	orrs	r3, r2
900037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900037f6:	4a04      	ldr	r2, [pc, #16]	@ (90003808 <__NVIC_SetPriorityGrouping+0x40>)
900037f8:	68bb      	ldr	r3, [r7, #8]
900037fa:	60d3      	str	r3, [r2, #12]
}
900037fc:	bf00      	nop
900037fe:	3714      	adds	r7, #20
90003800:	46bd      	mov	sp, r7
90003802:	f85d 7b04 	ldr.w	r7, [sp], #4
90003806:	4770      	bx	lr
90003808:	e000ed00 	.word	0xe000ed00
9000380c:	05fa0000 	.word	0x05fa0000

90003810 <__NVIC_GetPriorityGrouping>:
{
90003810:	b480      	push	{r7}
90003812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003814:	4b04      	ldr	r3, [pc, #16]	@ (90003828 <__NVIC_GetPriorityGrouping+0x18>)
90003816:	68db      	ldr	r3, [r3, #12]
90003818:	0a1b      	lsrs	r3, r3, #8
9000381a:	f003 0307 	and.w	r3, r3, #7
}
9000381e:	4618      	mov	r0, r3
90003820:	46bd      	mov	sp, r7
90003822:	f85d 7b04 	ldr.w	r7, [sp], #4
90003826:	4770      	bx	lr
90003828:	e000ed00 	.word	0xe000ed00

9000382c <__NVIC_EnableIRQ>:
{
9000382c:	b480      	push	{r7}
9000382e:	b083      	sub	sp, #12
90003830:	af00      	add	r7, sp, #0
90003832:	4603      	mov	r3, r0
90003834:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000383a:	2b00      	cmp	r3, #0
9000383c:	db0b      	blt.n	90003856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000383e:	88fb      	ldrh	r3, [r7, #6]
90003840:	f003 021f 	and.w	r2, r3, #31
90003844:	4907      	ldr	r1, [pc, #28]	@ (90003864 <__NVIC_EnableIRQ+0x38>)
90003846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000384a:	095b      	lsrs	r3, r3, #5
9000384c:	2001      	movs	r0, #1
9000384e:	fa00 f202 	lsl.w	r2, r0, r2
90003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90003856:	bf00      	nop
90003858:	370c      	adds	r7, #12
9000385a:	46bd      	mov	sp, r7
9000385c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003860:	4770      	bx	lr
90003862:	bf00      	nop
90003864:	e000e100 	.word	0xe000e100

90003868 <__NVIC_SetPriority>:
{
90003868:	b480      	push	{r7}
9000386a:	b083      	sub	sp, #12
9000386c:	af00      	add	r7, sp, #0
9000386e:	4603      	mov	r3, r0
90003870:	6039      	str	r1, [r7, #0]
90003872:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003878:	2b00      	cmp	r3, #0
9000387a:	db0a      	blt.n	90003892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000387c:	683b      	ldr	r3, [r7, #0]
9000387e:	b2da      	uxtb	r2, r3
90003880:	490c      	ldr	r1, [pc, #48]	@ (900038b4 <__NVIC_SetPriority+0x4c>)
90003882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003886:	0112      	lsls	r2, r2, #4
90003888:	b2d2      	uxtb	r2, r2
9000388a:	440b      	add	r3, r1
9000388c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003890:	e00a      	b.n	900038a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003892:	683b      	ldr	r3, [r7, #0]
90003894:	b2da      	uxtb	r2, r3
90003896:	4908      	ldr	r1, [pc, #32]	@ (900038b8 <__NVIC_SetPriority+0x50>)
90003898:	88fb      	ldrh	r3, [r7, #6]
9000389a:	f003 030f 	and.w	r3, r3, #15
9000389e:	3b04      	subs	r3, #4
900038a0:	0112      	lsls	r2, r2, #4
900038a2:	b2d2      	uxtb	r2, r2
900038a4:	440b      	add	r3, r1
900038a6:	761a      	strb	r2, [r3, #24]
}
900038a8:	bf00      	nop
900038aa:	370c      	adds	r7, #12
900038ac:	46bd      	mov	sp, r7
900038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900038b2:	4770      	bx	lr
900038b4:	e000e100 	.word	0xe000e100
900038b8:	e000ed00 	.word	0xe000ed00

900038bc <NVIC_EncodePriority>:
{
900038bc:	b480      	push	{r7}
900038be:	b089      	sub	sp, #36	@ 0x24
900038c0:	af00      	add	r7, sp, #0
900038c2:	60f8      	str	r0, [r7, #12]
900038c4:	60b9      	str	r1, [r7, #8]
900038c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900038c8:	68fb      	ldr	r3, [r7, #12]
900038ca:	f003 0307 	and.w	r3, r3, #7
900038ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900038d0:	69fb      	ldr	r3, [r7, #28]
900038d2:	f1c3 0307 	rsb	r3, r3, #7
900038d6:	2b04      	cmp	r3, #4
900038d8:	bf28      	it	cs
900038da:	2304      	movcs	r3, #4
900038dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900038de:	69fb      	ldr	r3, [r7, #28]
900038e0:	3304      	adds	r3, #4
900038e2:	2b06      	cmp	r3, #6
900038e4:	d902      	bls.n	900038ec <NVIC_EncodePriority+0x30>
900038e6:	69fb      	ldr	r3, [r7, #28]
900038e8:	3b03      	subs	r3, #3
900038ea:	e000      	b.n	900038ee <NVIC_EncodePriority+0x32>
900038ec:	2300      	movs	r3, #0
900038ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900038f0:	f04f 32ff 	mov.w	r2, #4294967295
900038f4:	69bb      	ldr	r3, [r7, #24]
900038f6:	fa02 f303 	lsl.w	r3, r2, r3
900038fa:	43da      	mvns	r2, r3
900038fc:	68bb      	ldr	r3, [r7, #8]
900038fe:	401a      	ands	r2, r3
90003900:	697b      	ldr	r3, [r7, #20]
90003902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003904:	f04f 31ff 	mov.w	r1, #4294967295
90003908:	697b      	ldr	r3, [r7, #20]
9000390a:	fa01 f303 	lsl.w	r3, r1, r3
9000390e:	43d9      	mvns	r1, r3
90003910:	687b      	ldr	r3, [r7, #4]
90003912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003914:	4313      	orrs	r3, r2
}
90003916:	4618      	mov	r0, r3
90003918:	3724      	adds	r7, #36	@ 0x24
9000391a:	46bd      	mov	sp, r7
9000391c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003920:	4770      	bx	lr
	...

90003924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003924:	b580      	push	{r7, lr}
90003926:	b082      	sub	sp, #8
90003928:	af00      	add	r7, sp, #0
9000392a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
9000392c:	687b      	ldr	r3, [r7, #4]
9000392e:	3b01      	subs	r3, #1
90003930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003934:	d301      	bcc.n	9000393a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003936:	2301      	movs	r3, #1
90003938:	e00f      	b.n	9000395a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000393a:	4a0a      	ldr	r2, [pc, #40]	@ (90003964 <SysTick_Config+0x40>)
9000393c:	687b      	ldr	r3, [r7, #4]
9000393e:	3b01      	subs	r3, #1
90003940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90003942:	210f      	movs	r1, #15
90003944:	f04f 30ff 	mov.w	r0, #4294967295
90003948:	f7ff ff8e 	bl	90003868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
9000394c:	4b05      	ldr	r3, [pc, #20]	@ (90003964 <SysTick_Config+0x40>)
9000394e:	2200      	movs	r2, #0
90003950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90003952:	4b04      	ldr	r3, [pc, #16]	@ (90003964 <SysTick_Config+0x40>)
90003954:	2207      	movs	r2, #7
90003956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003958:	2300      	movs	r3, #0
}
9000395a:	4618      	mov	r0, r3
9000395c:	3708      	adds	r7, #8
9000395e:	46bd      	mov	sp, r7
90003960:	bd80      	pop	{r7, pc}
90003962:	bf00      	nop
90003964:	e000e010 	.word	0xe000e010

90003968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003968:	b580      	push	{r7, lr}
9000396a:	b082      	sub	sp, #8
9000396c:	af00      	add	r7, sp, #0
9000396e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003970:	6878      	ldr	r0, [r7, #4]
90003972:	f7ff ff29 	bl	900037c8 <__NVIC_SetPriorityGrouping>
}
90003976:	bf00      	nop
90003978:	3708      	adds	r7, #8
9000397a:	46bd      	mov	sp, r7
9000397c:	bd80      	pop	{r7, pc}

9000397e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000397e:	b580      	push	{r7, lr}
90003980:	b086      	sub	sp, #24
90003982:	af00      	add	r7, sp, #0
90003984:	4603      	mov	r3, r0
90003986:	60b9      	str	r1, [r7, #8]
90003988:	607a      	str	r2, [r7, #4]
9000398a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
9000398c:	f7ff ff40 	bl	90003810 <__NVIC_GetPriorityGrouping>
90003990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003992:	687a      	ldr	r2, [r7, #4]
90003994:	68b9      	ldr	r1, [r7, #8]
90003996:	6978      	ldr	r0, [r7, #20]
90003998:	f7ff ff90 	bl	900038bc <NVIC_EncodePriority>
9000399c:	4602      	mov	r2, r0
9000399e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
900039a2:	4611      	mov	r1, r2
900039a4:	4618      	mov	r0, r3
900039a6:	f7ff ff5f 	bl	90003868 <__NVIC_SetPriority>
}
900039aa:	bf00      	nop
900039ac:	3718      	adds	r7, #24
900039ae:	46bd      	mov	sp, r7
900039b0:	bd80      	pop	{r7, pc}

900039b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900039b2:	b580      	push	{r7, lr}
900039b4:	b082      	sub	sp, #8
900039b6:	af00      	add	r7, sp, #0
900039b8:	4603      	mov	r3, r0
900039ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900039bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900039c0:	4618      	mov	r0, r3
900039c2:	f7ff ff33 	bl	9000382c <__NVIC_EnableIRQ>
}
900039c6:	bf00      	nop
900039c8:	3708      	adds	r7, #8
900039ca:	46bd      	mov	sp, r7
900039cc:	bd80      	pop	{r7, pc}

900039ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900039ce:	b580      	push	{r7, lr}
900039d0:	b082      	sub	sp, #8
900039d2:	af00      	add	r7, sp, #0
900039d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900039d6:	6878      	ldr	r0, [r7, #4]
900039d8:	f7ff ffa4 	bl	90003924 <SysTick_Config>
900039dc:	4603      	mov	r3, r0
}
900039de:	4618      	mov	r0, r3
900039e0:	3708      	adds	r7, #8
900039e2:	46bd      	mov	sp, r7
900039e4:	bd80      	pop	{r7, pc}
	...

900039e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
900039e8:	b480      	push	{r7}
900039ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900039ec:	f3bf 8f5f 	dmb	sy
}
900039f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900039f2:	4b07      	ldr	r3, [pc, #28]	@ (90003a10 <HAL_MPU_Disable+0x28>)
900039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900039f6:	4a06      	ldr	r2, [pc, #24]	@ (90003a10 <HAL_MPU_Disable+0x28>)
900039f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900039fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900039fe:	4b05      	ldr	r3, [pc, #20]	@ (90003a14 <HAL_MPU_Disable+0x2c>)
90003a00:	2200      	movs	r2, #0
90003a02:	605a      	str	r2, [r3, #4]
}
90003a04:	bf00      	nop
90003a06:	46bd      	mov	sp, r7
90003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a0c:	4770      	bx	lr
90003a0e:	bf00      	nop
90003a10:	e000ed00 	.word	0xe000ed00
90003a14:	e000ed90 	.word	0xe000ed90

90003a18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003a18:	b480      	push	{r7}
90003a1a:	b083      	sub	sp, #12
90003a1c:	af00      	add	r7, sp, #0
90003a1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003a20:	4a0b      	ldr	r2, [pc, #44]	@ (90003a50 <HAL_MPU_Enable+0x38>)
90003a22:	687b      	ldr	r3, [r7, #4]
90003a24:	f043 0301 	orr.w	r3, r3, #1
90003a28:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90003a2a:	4b0a      	ldr	r3, [pc, #40]	@ (90003a54 <HAL_MPU_Enable+0x3c>)
90003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003a2e:	4a09      	ldr	r2, [pc, #36]	@ (90003a54 <HAL_MPU_Enable+0x3c>)
90003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003a34:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003a36:	f3bf 8f4f 	dsb	sy
}
90003a3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90003a3c:	f3bf 8f6f 	isb	sy
}
90003a40:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003a42:	bf00      	nop
90003a44:	370c      	adds	r7, #12
90003a46:	46bd      	mov	sp, r7
90003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a4c:	4770      	bx	lr
90003a4e:	bf00      	nop
90003a50:	e000ed90 	.word	0xe000ed90
90003a54:	e000ed00 	.word	0xe000ed00

90003a58 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003a58:	b480      	push	{r7}
90003a5a:	b083      	sub	sp, #12
90003a5c:	af00      	add	r7, sp, #0
90003a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003a60:	687b      	ldr	r3, [r7, #4]
90003a62:	785a      	ldrb	r2, [r3, #1]
90003a64:	4b1b      	ldr	r3, [pc, #108]	@ (90003ad4 <HAL_MPU_ConfigRegion+0x7c>)
90003a66:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003a68:	4b1a      	ldr	r3, [pc, #104]	@ (90003ad4 <HAL_MPU_ConfigRegion+0x7c>)
90003a6a:	691b      	ldr	r3, [r3, #16]
90003a6c:	4a19      	ldr	r2, [pc, #100]	@ (90003ad4 <HAL_MPU_ConfigRegion+0x7c>)
90003a6e:	f023 0301 	bic.w	r3, r3, #1
90003a72:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003a74:	4a17      	ldr	r2, [pc, #92]	@ (90003ad4 <HAL_MPU_ConfigRegion+0x7c>)
90003a76:	687b      	ldr	r3, [r7, #4]
90003a78:	685b      	ldr	r3, [r3, #4]
90003a7a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003a7c:	687b      	ldr	r3, [r7, #4]
90003a7e:	7b1b      	ldrb	r3, [r3, #12]
90003a80:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003a82:	687b      	ldr	r3, [r7, #4]
90003a84:	7adb      	ldrb	r3, [r3, #11]
90003a86:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003a88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003a8a:	687b      	ldr	r3, [r7, #4]
90003a8c:	7a9b      	ldrb	r3, [r3, #10]
90003a8e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003a90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003a92:	687b      	ldr	r3, [r7, #4]
90003a94:	7b5b      	ldrb	r3, [r3, #13]
90003a96:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003a98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003a9a:	687b      	ldr	r3, [r7, #4]
90003a9c:	7b9b      	ldrb	r3, [r3, #14]
90003a9e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003aa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003aa2:	687b      	ldr	r3, [r7, #4]
90003aa4:	7bdb      	ldrb	r3, [r3, #15]
90003aa6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003aa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003aaa:	687b      	ldr	r3, [r7, #4]
90003aac:	7a5b      	ldrb	r3, [r3, #9]
90003aae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003ab0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003ab2:	687b      	ldr	r3, [r7, #4]
90003ab4:	7a1b      	ldrb	r3, [r3, #8]
90003ab6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003ab8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003aba:	687a      	ldr	r2, [r7, #4]
90003abc:	7812      	ldrb	r2, [r2, #0]
90003abe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003ac0:	4a04      	ldr	r2, [pc, #16]	@ (90003ad4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003ac2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003ac4:	6113      	str	r3, [r2, #16]
}
90003ac6:	bf00      	nop
90003ac8:	370c      	adds	r7, #12
90003aca:	46bd      	mov	sp, r7
90003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ad0:	4770      	bx	lr
90003ad2:	bf00      	nop
90003ad4:	e000ed90 	.word	0xe000ed90

90003ad8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003ad8:	b580      	push	{r7, lr}
90003ada:	b082      	sub	sp, #8
90003adc:	af00      	add	r7, sp, #0
90003ade:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003ae0:	687b      	ldr	r3, [r7, #4]
90003ae2:	2b00      	cmp	r3, #0
90003ae4:	d101      	bne.n	90003aea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90003ae6:	2301      	movs	r3, #1
90003ae8:	e04f      	b.n	90003b8a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90003aea:	687b      	ldr	r3, [r7, #4]
90003aec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003af0:	b2db      	uxtb	r3, r3
90003af2:	2b00      	cmp	r3, #0
90003af4:	d106      	bne.n	90003b04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90003af6:	687b      	ldr	r3, [r7, #4]
90003af8:	2200      	movs	r2, #0
90003afa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90003afe:	6878      	ldr	r0, [r7, #4]
90003b00:	f000 f84e 	bl	90003ba0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003b04:	687b      	ldr	r3, [r7, #4]
90003b06:	2202      	movs	r2, #2
90003b08:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90003b0c:	687b      	ldr	r3, [r7, #4]
90003b0e:	681b      	ldr	r3, [r3, #0]
90003b10:	681a      	ldr	r2, [r3, #0]
90003b12:	4b20      	ldr	r3, [pc, #128]	@ (90003b94 <HAL_DMA2D_Init+0xbc>)
90003b14:	4013      	ands	r3, r2
90003b16:	687a      	ldr	r2, [r7, #4]
90003b18:	6851      	ldr	r1, [r2, #4]
90003b1a:	687a      	ldr	r2, [r7, #4]
90003b1c:	69d2      	ldr	r2, [r2, #28]
90003b1e:	4311      	orrs	r1, r2
90003b20:	687a      	ldr	r2, [r7, #4]
90003b22:	6812      	ldr	r2, [r2, #0]
90003b24:	430b      	orrs	r3, r1
90003b26:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003b28:	687b      	ldr	r3, [r7, #4]
90003b2a:	681b      	ldr	r3, [r3, #0]
90003b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90003b2e:	4b1a      	ldr	r3, [pc, #104]	@ (90003b98 <HAL_DMA2D_Init+0xc0>)
90003b30:	4013      	ands	r3, r2
90003b32:	687a      	ldr	r2, [r7, #4]
90003b34:	6891      	ldr	r1, [r2, #8]
90003b36:	687a      	ldr	r2, [r7, #4]
90003b38:	6992      	ldr	r2, [r2, #24]
90003b3a:	4311      	orrs	r1, r2
90003b3c:	687a      	ldr	r2, [r7, #4]
90003b3e:	6812      	ldr	r2, [r2, #0]
90003b40:	430b      	orrs	r3, r1
90003b42:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003b44:	687b      	ldr	r3, [r7, #4]
90003b46:	681b      	ldr	r3, [r3, #0]
90003b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90003b4a:	4b14      	ldr	r3, [pc, #80]	@ (90003b9c <HAL_DMA2D_Init+0xc4>)
90003b4c:	4013      	ands	r3, r2
90003b4e:	687a      	ldr	r2, [r7, #4]
90003b50:	68d1      	ldr	r1, [r2, #12]
90003b52:	687a      	ldr	r2, [r7, #4]
90003b54:	6812      	ldr	r2, [r2, #0]
90003b56:	430b      	orrs	r3, r1
90003b58:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90003b5a:	687b      	ldr	r3, [r7, #4]
90003b5c:	681b      	ldr	r3, [r3, #0]
90003b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003b60:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003b64:	687b      	ldr	r3, [r7, #4]
90003b66:	691b      	ldr	r3, [r3, #16]
90003b68:	051a      	lsls	r2, r3, #20
90003b6a:	687b      	ldr	r3, [r7, #4]
90003b6c:	695b      	ldr	r3, [r3, #20]
90003b6e:	055b      	lsls	r3, r3, #21
90003b70:	431a      	orrs	r2, r3
90003b72:	687b      	ldr	r3, [r7, #4]
90003b74:	681b      	ldr	r3, [r3, #0]
90003b76:	430a      	orrs	r2, r1
90003b78:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003b7a:	687b      	ldr	r3, [r7, #4]
90003b7c:	2200      	movs	r2, #0
90003b7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003b80:	687b      	ldr	r3, [r7, #4]
90003b82:	2201      	movs	r2, #1
90003b84:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003b88:	2300      	movs	r3, #0
}
90003b8a:	4618      	mov	r0, r3
90003b8c:	3708      	adds	r7, #8
90003b8e:	46bd      	mov	sp, r7
90003b90:	bd80      	pop	{r7, pc}
90003b92:	bf00      	nop
90003b94:	fff8ffbf 	.word	0xfff8ffbf
90003b98:	fffffef8 	.word	0xfffffef8
90003b9c:	ffff0000 	.word	0xffff0000

90003ba0 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003ba0:	b480      	push	{r7}
90003ba2:	b083      	sub	sp, #12
90003ba4:	af00      	add	r7, sp, #0
90003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003ba8:	bf00      	nop
90003baa:	370c      	adds	r7, #12
90003bac:	46bd      	mov	sp, r7
90003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
90003bb2:	4770      	bx	lr

90003bb4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003bb4:	b580      	push	{r7, lr}
90003bb6:	b086      	sub	sp, #24
90003bb8:	af02      	add	r7, sp, #8
90003bba:	60f8      	str	r0, [r7, #12]
90003bbc:	60b9      	str	r1, [r7, #8]
90003bbe:	607a      	str	r2, [r7, #4]
90003bc0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003bc2:	68fb      	ldr	r3, [r7, #12]
90003bc4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003bc8:	2b01      	cmp	r3, #1
90003bca:	d101      	bne.n	90003bd0 <HAL_DMA2D_Start+0x1c>
90003bcc:	2302      	movs	r3, #2
90003bce:	e018      	b.n	90003c02 <HAL_DMA2D_Start+0x4e>
90003bd0:	68fb      	ldr	r3, [r7, #12]
90003bd2:	2201      	movs	r2, #1
90003bd4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003bd8:	68fb      	ldr	r3, [r7, #12]
90003bda:	2202      	movs	r2, #2
90003bdc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003be0:	69bb      	ldr	r3, [r7, #24]
90003be2:	9300      	str	r3, [sp, #0]
90003be4:	683b      	ldr	r3, [r7, #0]
90003be6:	687a      	ldr	r2, [r7, #4]
90003be8:	68b9      	ldr	r1, [r7, #8]
90003bea:	68f8      	ldr	r0, [r7, #12]
90003bec:	f000 f9a4 	bl	90003f38 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003bf0:	68fb      	ldr	r3, [r7, #12]
90003bf2:	681b      	ldr	r3, [r3, #0]
90003bf4:	681a      	ldr	r2, [r3, #0]
90003bf6:	68fb      	ldr	r3, [r7, #12]
90003bf8:	681b      	ldr	r3, [r3, #0]
90003bfa:	f042 0201 	orr.w	r2, r2, #1
90003bfe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003c00:	2300      	movs	r3, #0
}
90003c02:	4618      	mov	r0, r3
90003c04:	3710      	adds	r7, #16
90003c06:	46bd      	mov	sp, r7
90003c08:	bd80      	pop	{r7, pc}

90003c0a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90003c0a:	b580      	push	{r7, lr}
90003c0c:	b086      	sub	sp, #24
90003c0e:	af00      	add	r7, sp, #0
90003c10:	6078      	str	r0, [r7, #4]
90003c12:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90003c14:	2300      	movs	r3, #0
90003c16:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003c18:	687b      	ldr	r3, [r7, #4]
90003c1a:	681b      	ldr	r3, [r3, #0]
90003c1c:	681b      	ldr	r3, [r3, #0]
90003c1e:	f003 0301 	and.w	r3, r3, #1
90003c22:	2b00      	cmp	r3, #0
90003c24:	d056      	beq.n	90003cd4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003c26:	f7ff fda7 	bl	90003778 <HAL_GetTick>
90003c2a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003c2c:	e04b      	b.n	90003cc6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003c2e:	687b      	ldr	r3, [r7, #4]
90003c30:	681b      	ldr	r3, [r3, #0]
90003c32:	685b      	ldr	r3, [r3, #4]
90003c34:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003c36:	68fb      	ldr	r3, [r7, #12]
90003c38:	f003 0321 	and.w	r3, r3, #33	@ 0x21
90003c3c:	2b00      	cmp	r3, #0
90003c3e:	d023      	beq.n	90003c88 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003c40:	68fb      	ldr	r3, [r7, #12]
90003c42:	f003 0320 	and.w	r3, r3, #32
90003c46:	2b00      	cmp	r3, #0
90003c48:	d005      	beq.n	90003c56 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003c4a:	687b      	ldr	r3, [r7, #4]
90003c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003c4e:	f043 0202 	orr.w	r2, r3, #2
90003c52:	687b      	ldr	r3, [r7, #4]
90003c54:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003c56:	68fb      	ldr	r3, [r7, #12]
90003c58:	f003 0301 	and.w	r3, r3, #1
90003c5c:	2b00      	cmp	r3, #0
90003c5e:	d005      	beq.n	90003c6c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003c60:	687b      	ldr	r3, [r7, #4]
90003c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003c64:	f043 0201 	orr.w	r2, r3, #1
90003c68:	687b      	ldr	r3, [r7, #4]
90003c6a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003c6c:	687b      	ldr	r3, [r7, #4]
90003c6e:	681b      	ldr	r3, [r3, #0]
90003c70:	2221      	movs	r2, #33	@ 0x21
90003c72:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003c74:	687b      	ldr	r3, [r7, #4]
90003c76:	2204      	movs	r2, #4
90003c78:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003c7c:	687b      	ldr	r3, [r7, #4]
90003c7e:	2200      	movs	r2, #0
90003c80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003c84:	2301      	movs	r3, #1
90003c86:	e0a5      	b.n	90003dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003c88:	683b      	ldr	r3, [r7, #0]
90003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
90003c8e:	d01a      	beq.n	90003cc6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003c90:	f7ff fd72 	bl	90003778 <HAL_GetTick>
90003c94:	4602      	mov	r2, r0
90003c96:	697b      	ldr	r3, [r7, #20]
90003c98:	1ad3      	subs	r3, r2, r3
90003c9a:	683a      	ldr	r2, [r7, #0]
90003c9c:	429a      	cmp	r2, r3
90003c9e:	d302      	bcc.n	90003ca6 <HAL_DMA2D_PollForTransfer+0x9c>
90003ca0:	683b      	ldr	r3, [r7, #0]
90003ca2:	2b00      	cmp	r3, #0
90003ca4:	d10f      	bne.n	90003cc6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003ca6:	687b      	ldr	r3, [r7, #4]
90003ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003caa:	f043 0220 	orr.w	r2, r3, #32
90003cae:	687b      	ldr	r3, [r7, #4]
90003cb0:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003cb2:	687b      	ldr	r3, [r7, #4]
90003cb4:	2203      	movs	r2, #3
90003cb6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003cba:	687b      	ldr	r3, [r7, #4]
90003cbc:	2200      	movs	r2, #0
90003cbe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003cc2:	2303      	movs	r3, #3
90003cc4:	e086      	b.n	90003dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003cc6:	687b      	ldr	r3, [r7, #4]
90003cc8:	681b      	ldr	r3, [r3, #0]
90003cca:	685b      	ldr	r3, [r3, #4]
90003ccc:	f003 0302 	and.w	r3, r3, #2
90003cd0:	2b00      	cmp	r3, #0
90003cd2:	d0ac      	beq.n	90003c2e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003cd4:	687b      	ldr	r3, [r7, #4]
90003cd6:	681b      	ldr	r3, [r3, #0]
90003cd8:	69db      	ldr	r3, [r3, #28]
90003cda:	f003 0320 	and.w	r3, r3, #32
90003cde:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003ce0:	687b      	ldr	r3, [r7, #4]
90003ce2:	681b      	ldr	r3, [r3, #0]
90003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003ce6:	f003 0320 	and.w	r3, r3, #32
90003cea:	693a      	ldr	r2, [r7, #16]
90003cec:	4313      	orrs	r3, r2
90003cee:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003cf0:	693b      	ldr	r3, [r7, #16]
90003cf2:	2b00      	cmp	r3, #0
90003cf4:	d061      	beq.n	90003dba <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003cf6:	f7ff fd3f 	bl	90003778 <HAL_GetTick>
90003cfa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003cfc:	e056      	b.n	90003dac <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003cfe:	687b      	ldr	r3, [r7, #4]
90003d00:	681b      	ldr	r3, [r3, #0]
90003d02:	685b      	ldr	r3, [r3, #4]
90003d04:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003d06:	68fb      	ldr	r3, [r7, #12]
90003d08:	f003 0329 	and.w	r3, r3, #41	@ 0x29
90003d0c:	2b00      	cmp	r3, #0
90003d0e:	d02e      	beq.n	90003d6e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003d10:	68fb      	ldr	r3, [r7, #12]
90003d12:	f003 0308 	and.w	r3, r3, #8
90003d16:	2b00      	cmp	r3, #0
90003d18:	d005      	beq.n	90003d26 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003d1a:	687b      	ldr	r3, [r7, #4]
90003d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003d1e:	f043 0204 	orr.w	r2, r3, #4
90003d22:	687b      	ldr	r3, [r7, #4]
90003d24:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003d26:	68fb      	ldr	r3, [r7, #12]
90003d28:	f003 0320 	and.w	r3, r3, #32
90003d2c:	2b00      	cmp	r3, #0
90003d2e:	d005      	beq.n	90003d3c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003d30:	687b      	ldr	r3, [r7, #4]
90003d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003d34:	f043 0202 	orr.w	r2, r3, #2
90003d38:	687b      	ldr	r3, [r7, #4]
90003d3a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003d3c:	68fb      	ldr	r3, [r7, #12]
90003d3e:	f003 0301 	and.w	r3, r3, #1
90003d42:	2b00      	cmp	r3, #0
90003d44:	d005      	beq.n	90003d52 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003d46:	687b      	ldr	r3, [r7, #4]
90003d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003d4a:	f043 0201 	orr.w	r2, r3, #1
90003d4e:	687b      	ldr	r3, [r7, #4]
90003d50:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003d52:	687b      	ldr	r3, [r7, #4]
90003d54:	681b      	ldr	r3, [r3, #0]
90003d56:	2229      	movs	r2, #41	@ 0x29
90003d58:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003d5a:	687b      	ldr	r3, [r7, #4]
90003d5c:	2204      	movs	r2, #4
90003d5e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003d62:	687b      	ldr	r3, [r7, #4]
90003d64:	2200      	movs	r2, #0
90003d66:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003d6a:	2301      	movs	r3, #1
90003d6c:	e032      	b.n	90003dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003d6e:	683b      	ldr	r3, [r7, #0]
90003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
90003d74:	d01a      	beq.n	90003dac <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003d76:	f7ff fcff 	bl	90003778 <HAL_GetTick>
90003d7a:	4602      	mov	r2, r0
90003d7c:	697b      	ldr	r3, [r7, #20]
90003d7e:	1ad3      	subs	r3, r2, r3
90003d80:	683a      	ldr	r2, [r7, #0]
90003d82:	429a      	cmp	r2, r3
90003d84:	d302      	bcc.n	90003d8c <HAL_DMA2D_PollForTransfer+0x182>
90003d86:	683b      	ldr	r3, [r7, #0]
90003d88:	2b00      	cmp	r3, #0
90003d8a:	d10f      	bne.n	90003dac <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003d8c:	687b      	ldr	r3, [r7, #4]
90003d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003d90:	f043 0220 	orr.w	r2, r3, #32
90003d94:	687b      	ldr	r3, [r7, #4]
90003d96:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003d98:	687b      	ldr	r3, [r7, #4]
90003d9a:	2203      	movs	r2, #3
90003d9c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003da0:	687b      	ldr	r3, [r7, #4]
90003da2:	2200      	movs	r2, #0
90003da4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003da8:	2303      	movs	r3, #3
90003daa:	e013      	b.n	90003dd4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003dac:	687b      	ldr	r3, [r7, #4]
90003dae:	681b      	ldr	r3, [r3, #0]
90003db0:	685b      	ldr	r3, [r3, #4]
90003db2:	f003 0310 	and.w	r3, r3, #16
90003db6:	2b00      	cmp	r3, #0
90003db8:	d0a1      	beq.n	90003cfe <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003dba:	687b      	ldr	r3, [r7, #4]
90003dbc:	681b      	ldr	r3, [r3, #0]
90003dbe:	2212      	movs	r2, #18
90003dc0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003dc2:	687b      	ldr	r3, [r7, #4]
90003dc4:	2201      	movs	r2, #1
90003dc6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003dca:	687b      	ldr	r3, [r7, #4]
90003dcc:	2200      	movs	r2, #0
90003dce:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003dd2:	2300      	movs	r3, #0
}
90003dd4:	4618      	mov	r0, r3
90003dd6:	3718      	adds	r7, #24
90003dd8:	46bd      	mov	sp, r7
90003dda:	bd80      	pop	{r7, pc}

90003ddc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003ddc:	b480      	push	{r7}
90003dde:	b087      	sub	sp, #28
90003de0:	af00      	add	r7, sp, #0
90003de2:	6078      	str	r0, [r7, #4]
90003de4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003de6:	687b      	ldr	r3, [r7, #4]
90003de8:	685b      	ldr	r3, [r3, #4]
90003dea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003dee:	683b      	ldr	r3, [r7, #0]
90003df0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003df2:	687b      	ldr	r3, [r7, #4]
90003df4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003df8:	2b01      	cmp	r3, #1
90003dfa:	d101      	bne.n	90003e00 <HAL_DMA2D_ConfigLayer+0x24>
90003dfc:	2302      	movs	r3, #2
90003dfe:	e092      	b.n	90003f26 <HAL_DMA2D_ConfigLayer+0x14a>
90003e00:	687b      	ldr	r3, [r7, #4]
90003e02:	2201      	movs	r2, #1
90003e04:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003e08:	687b      	ldr	r3, [r7, #4]
90003e0a:	2202      	movs	r2, #2
90003e0c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003e10:	683a      	ldr	r2, [r7, #0]
90003e12:	4613      	mov	r3, r2
90003e14:	00db      	lsls	r3, r3, #3
90003e16:	1a9b      	subs	r3, r3, r2
90003e18:	009b      	lsls	r3, r3, #2
90003e1a:	3328      	adds	r3, #40	@ 0x28
90003e1c:	687a      	ldr	r2, [r7, #4]
90003e1e:	4413      	add	r3, r2
90003e20:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003e22:	68fb      	ldr	r3, [r7, #12]
90003e24:	685a      	ldr	r2, [r3, #4]
90003e26:	68fb      	ldr	r3, [r7, #12]
90003e28:	689b      	ldr	r3, [r3, #8]
90003e2a:	041b      	lsls	r3, r3, #16
90003e2c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003e2e:	68fb      	ldr	r3, [r7, #12]
90003e30:	691b      	ldr	r3, [r3, #16]
90003e32:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003e34:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003e36:	68fb      	ldr	r3, [r7, #12]
90003e38:	695b      	ldr	r3, [r3, #20]
90003e3a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003e3c:	4313      	orrs	r3, r2
90003e3e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003e40:	4b3c      	ldr	r3, [pc, #240]	@ (90003f34 <HAL_DMA2D_ConfigLayer+0x158>)
90003e42:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003e44:	68fb      	ldr	r3, [r7, #12]
90003e46:	685b      	ldr	r3, [r3, #4]
90003e48:	2b0a      	cmp	r3, #10
90003e4a:	d003      	beq.n	90003e54 <HAL_DMA2D_ConfigLayer+0x78>
90003e4c:	68fb      	ldr	r3, [r7, #12]
90003e4e:	685b      	ldr	r3, [r3, #4]
90003e50:	2b09      	cmp	r3, #9
90003e52:	d107      	bne.n	90003e64 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003e54:	68fb      	ldr	r3, [r7, #12]
90003e56:	68db      	ldr	r3, [r3, #12]
90003e58:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003e5c:	693a      	ldr	r2, [r7, #16]
90003e5e:	4313      	orrs	r3, r2
90003e60:	613b      	str	r3, [r7, #16]
90003e62:	e005      	b.n	90003e70 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003e64:	68fb      	ldr	r3, [r7, #12]
90003e66:	68db      	ldr	r3, [r3, #12]
90003e68:	061b      	lsls	r3, r3, #24
90003e6a:	693a      	ldr	r2, [r7, #16]
90003e6c:	4313      	orrs	r3, r2
90003e6e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003e70:	683b      	ldr	r3, [r7, #0]
90003e72:	2b00      	cmp	r3, #0
90003e74:	d120      	bne.n	90003eb8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003e76:	687b      	ldr	r3, [r7, #4]
90003e78:	681b      	ldr	r3, [r3, #0]
90003e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003e7c:	697b      	ldr	r3, [r7, #20]
90003e7e:	43db      	mvns	r3, r3
90003e80:	ea02 0103 	and.w	r1, r2, r3
90003e84:	687b      	ldr	r3, [r7, #4]
90003e86:	681b      	ldr	r3, [r3, #0]
90003e88:	693a      	ldr	r2, [r7, #16]
90003e8a:	430a      	orrs	r2, r1
90003e8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003e8e:	687b      	ldr	r3, [r7, #4]
90003e90:	681b      	ldr	r3, [r3, #0]
90003e92:	68fa      	ldr	r2, [r7, #12]
90003e94:	6812      	ldr	r2, [r2, #0]
90003e96:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003e98:	68fb      	ldr	r3, [r7, #12]
90003e9a:	685b      	ldr	r3, [r3, #4]
90003e9c:	2b0a      	cmp	r3, #10
90003e9e:	d003      	beq.n	90003ea8 <HAL_DMA2D_ConfigLayer+0xcc>
90003ea0:	68fb      	ldr	r3, [r7, #12]
90003ea2:	685b      	ldr	r3, [r3, #4]
90003ea4:	2b09      	cmp	r3, #9
90003ea6:	d135      	bne.n	90003f14 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003ea8:	68fb      	ldr	r3, [r7, #12]
90003eaa:	68da      	ldr	r2, [r3, #12]
90003eac:	687b      	ldr	r3, [r7, #4]
90003eae:	681b      	ldr	r3, [r3, #0]
90003eb0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003eb4:	629a      	str	r2, [r3, #40]	@ 0x28
90003eb6:	e02d      	b.n	90003f14 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003eb8:	68fb      	ldr	r3, [r7, #12]
90003eba:	685b      	ldr	r3, [r3, #4]
90003ebc:	2b0b      	cmp	r3, #11
90003ebe:	d109      	bne.n	90003ed4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003ec0:	68fb      	ldr	r3, [r7, #12]
90003ec2:	699b      	ldr	r3, [r3, #24]
90003ec4:	049b      	lsls	r3, r3, #18
90003ec6:	693a      	ldr	r2, [r7, #16]
90003ec8:	4313      	orrs	r3, r2
90003eca:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003ecc:	697b      	ldr	r3, [r7, #20]
90003ece:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003ed2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003ed4:	687b      	ldr	r3, [r7, #4]
90003ed6:	681b      	ldr	r3, [r3, #0]
90003ed8:	69da      	ldr	r2, [r3, #28]
90003eda:	697b      	ldr	r3, [r7, #20]
90003edc:	43db      	mvns	r3, r3
90003ede:	ea02 0103 	and.w	r1, r2, r3
90003ee2:	687b      	ldr	r3, [r7, #4]
90003ee4:	681b      	ldr	r3, [r3, #0]
90003ee6:	693a      	ldr	r2, [r7, #16]
90003ee8:	430a      	orrs	r2, r1
90003eea:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003eec:	687b      	ldr	r3, [r7, #4]
90003eee:	681b      	ldr	r3, [r3, #0]
90003ef0:	68fa      	ldr	r2, [r7, #12]
90003ef2:	6812      	ldr	r2, [r2, #0]
90003ef4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003ef6:	68fb      	ldr	r3, [r7, #12]
90003ef8:	685b      	ldr	r3, [r3, #4]
90003efa:	2b0a      	cmp	r3, #10
90003efc:	d003      	beq.n	90003f06 <HAL_DMA2D_ConfigLayer+0x12a>
90003efe:	68fb      	ldr	r3, [r7, #12]
90003f00:	685b      	ldr	r3, [r3, #4]
90003f02:	2b09      	cmp	r3, #9
90003f04:	d106      	bne.n	90003f14 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003f06:	68fb      	ldr	r3, [r7, #12]
90003f08:	68da      	ldr	r2, [r3, #12]
90003f0a:	687b      	ldr	r3, [r7, #4]
90003f0c:	681b      	ldr	r3, [r3, #0]
90003f0e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003f12:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003f14:	687b      	ldr	r3, [r7, #4]
90003f16:	2201      	movs	r2, #1
90003f18:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003f1c:	687b      	ldr	r3, [r7, #4]
90003f1e:	2200      	movs	r2, #0
90003f20:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003f24:	2300      	movs	r3, #0
}
90003f26:	4618      	mov	r0, r3
90003f28:	371c      	adds	r7, #28
90003f2a:	46bd      	mov	sp, r7
90003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f30:	4770      	bx	lr
90003f32:	bf00      	nop
90003f34:	ff33000f 	.word	0xff33000f

90003f38 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003f38:	b480      	push	{r7}
90003f3a:	b08b      	sub	sp, #44	@ 0x2c
90003f3c:	af00      	add	r7, sp, #0
90003f3e:	60f8      	str	r0, [r7, #12]
90003f40:	60b9      	str	r1, [r7, #8]
90003f42:	607a      	str	r2, [r7, #4]
90003f44:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003f46:	68fb      	ldr	r3, [r7, #12]
90003f48:	681b      	ldr	r3, [r3, #0]
90003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003f4c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003f50:	683b      	ldr	r3, [r7, #0]
90003f52:	041a      	lsls	r2, r3, #16
90003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003f56:	431a      	orrs	r2, r3
90003f58:	68fb      	ldr	r3, [r7, #12]
90003f5a:	681b      	ldr	r3, [r3, #0]
90003f5c:	430a      	orrs	r2, r1
90003f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003f60:	68fb      	ldr	r3, [r7, #12]
90003f62:	681b      	ldr	r3, [r3, #0]
90003f64:	687a      	ldr	r2, [r7, #4]
90003f66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003f68:	68fb      	ldr	r3, [r7, #12]
90003f6a:	685b      	ldr	r3, [r3, #4]
90003f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003f70:	d174      	bne.n	9000405c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003f72:	68bb      	ldr	r3, [r7, #8]
90003f74:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003f78:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003f7a:	68bb      	ldr	r3, [r7, #8]
90003f7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003f80:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003f82:	68bb      	ldr	r3, [r7, #8]
90003f84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003f88:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003f8a:	68bb      	ldr	r3, [r7, #8]
90003f8c:	b2db      	uxtb	r3, r3
90003f8e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003f90:	68fb      	ldr	r3, [r7, #12]
90003f92:	689b      	ldr	r3, [r3, #8]
90003f94:	2b00      	cmp	r3, #0
90003f96:	d108      	bne.n	90003faa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003f98:	69ba      	ldr	r2, [r7, #24]
90003f9a:	69fb      	ldr	r3, [r7, #28]
90003f9c:	431a      	orrs	r2, r3
90003f9e:	6a3b      	ldr	r3, [r7, #32]
90003fa0:	4313      	orrs	r3, r2
90003fa2:	697a      	ldr	r2, [r7, #20]
90003fa4:	4313      	orrs	r3, r2
90003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
90003fa8:	e053      	b.n	90004052 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003faa:	68fb      	ldr	r3, [r7, #12]
90003fac:	689b      	ldr	r3, [r3, #8]
90003fae:	2b01      	cmp	r3, #1
90003fb0:	d106      	bne.n	90003fc0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003fb2:	69ba      	ldr	r2, [r7, #24]
90003fb4:	69fb      	ldr	r3, [r7, #28]
90003fb6:	4313      	orrs	r3, r2
90003fb8:	697a      	ldr	r2, [r7, #20]
90003fba:	4313      	orrs	r3, r2
90003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
90003fbe:	e048      	b.n	90004052 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003fc0:	68fb      	ldr	r3, [r7, #12]
90003fc2:	689b      	ldr	r3, [r3, #8]
90003fc4:	2b02      	cmp	r3, #2
90003fc6:	d111      	bne.n	90003fec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003fc8:	69fb      	ldr	r3, [r7, #28]
90003fca:	0cdb      	lsrs	r3, r3, #19
90003fcc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003fce:	69bb      	ldr	r3, [r7, #24]
90003fd0:	0a9b      	lsrs	r3, r3, #10
90003fd2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003fd4:	697b      	ldr	r3, [r7, #20]
90003fd6:	08db      	lsrs	r3, r3, #3
90003fd8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003fda:	69bb      	ldr	r3, [r7, #24]
90003fdc:	015a      	lsls	r2, r3, #5
90003fde:	69fb      	ldr	r3, [r7, #28]
90003fe0:	02db      	lsls	r3, r3, #11
90003fe2:	4313      	orrs	r3, r2
90003fe4:	697a      	ldr	r2, [r7, #20]
90003fe6:	4313      	orrs	r3, r2
90003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
90003fea:	e032      	b.n	90004052 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003fec:	68fb      	ldr	r3, [r7, #12]
90003fee:	689b      	ldr	r3, [r3, #8]
90003ff0:	2b03      	cmp	r3, #3
90003ff2:	d117      	bne.n	90004024 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003ff4:	6a3b      	ldr	r3, [r7, #32]
90003ff6:	0fdb      	lsrs	r3, r3, #31
90003ff8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003ffa:	69fb      	ldr	r3, [r7, #28]
90003ffc:	0cdb      	lsrs	r3, r3, #19
90003ffe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90004000:	69bb      	ldr	r3, [r7, #24]
90004002:	0adb      	lsrs	r3, r3, #11
90004004:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90004006:	697b      	ldr	r3, [r7, #20]
90004008:	08db      	lsrs	r3, r3, #3
9000400a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
9000400c:	69bb      	ldr	r3, [r7, #24]
9000400e:	015a      	lsls	r2, r3, #5
90004010:	69fb      	ldr	r3, [r7, #28]
90004012:	029b      	lsls	r3, r3, #10
90004014:	431a      	orrs	r2, r3
90004016:	6a3b      	ldr	r3, [r7, #32]
90004018:	03db      	lsls	r3, r3, #15
9000401a:	4313      	orrs	r3, r2
9000401c:	697a      	ldr	r2, [r7, #20]
9000401e:	4313      	orrs	r3, r2
90004020:	627b      	str	r3, [r7, #36]	@ 0x24
90004022:	e016      	b.n	90004052 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90004024:	6a3b      	ldr	r3, [r7, #32]
90004026:	0f1b      	lsrs	r3, r3, #28
90004028:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
9000402a:	69fb      	ldr	r3, [r7, #28]
9000402c:	0d1b      	lsrs	r3, r3, #20
9000402e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90004030:	69bb      	ldr	r3, [r7, #24]
90004032:	0b1b      	lsrs	r3, r3, #12
90004034:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90004036:	697b      	ldr	r3, [r7, #20]
90004038:	091b      	lsrs	r3, r3, #4
9000403a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
9000403c:	69bb      	ldr	r3, [r7, #24]
9000403e:	011a      	lsls	r2, r3, #4
90004040:	69fb      	ldr	r3, [r7, #28]
90004042:	021b      	lsls	r3, r3, #8
90004044:	431a      	orrs	r2, r3
90004046:	6a3b      	ldr	r3, [r7, #32]
90004048:	031b      	lsls	r3, r3, #12
9000404a:	4313      	orrs	r3, r2
9000404c:	697a      	ldr	r2, [r7, #20]
9000404e:	4313      	orrs	r3, r2
90004050:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90004052:	68fb      	ldr	r3, [r7, #12]
90004054:	681b      	ldr	r3, [r3, #0]
90004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90004058:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
9000405a:	e00d      	b.n	90004078 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
9000405c:	68fb      	ldr	r3, [r7, #12]
9000405e:	685b      	ldr	r3, [r3, #4]
90004060:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90004064:	d104      	bne.n	90004070 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90004066:	68fb      	ldr	r3, [r7, #12]
90004068:	681b      	ldr	r3, [r3, #0]
9000406a:	68ba      	ldr	r2, [r7, #8]
9000406c:	615a      	str	r2, [r3, #20]
}
9000406e:	e003      	b.n	90004078 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90004070:	68fb      	ldr	r3, [r7, #12]
90004072:	681b      	ldr	r3, [r3, #0]
90004074:	68ba      	ldr	r2, [r7, #8]
90004076:	60da      	str	r2, [r3, #12]
}
90004078:	bf00      	nop
9000407a:	372c      	adds	r7, #44	@ 0x2c
9000407c:	46bd      	mov	sp, r7
9000407e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004082:	4770      	bx	lr

90004084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90004084:	b480      	push	{r7}
90004086:	b089      	sub	sp, #36	@ 0x24
90004088:	af00      	add	r7, sp, #0
9000408a:	6078      	str	r0, [r7, #4]
9000408c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
9000408e:	2300      	movs	r3, #0
90004090:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90004092:	4b89      	ldr	r3, [pc, #548]	@ (900042b8 <HAL_GPIO_Init+0x234>)
90004094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90004096:	e194      	b.n	900043c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90004098:	683b      	ldr	r3, [r7, #0]
9000409a:	681a      	ldr	r2, [r3, #0]
9000409c:	2101      	movs	r1, #1
9000409e:	69fb      	ldr	r3, [r7, #28]
900040a0:	fa01 f303 	lsl.w	r3, r1, r3
900040a4:	4013      	ands	r3, r2
900040a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
900040a8:	693b      	ldr	r3, [r7, #16]
900040aa:	2b00      	cmp	r3, #0
900040ac:	f000 8186 	beq.w	900043bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900040b0:	683b      	ldr	r3, [r7, #0]
900040b2:	685b      	ldr	r3, [r3, #4]
900040b4:	f003 0303 	and.w	r3, r3, #3
900040b8:	2b01      	cmp	r3, #1
900040ba:	d005      	beq.n	900040c8 <HAL_GPIO_Init+0x44>
900040bc:	683b      	ldr	r3, [r7, #0]
900040be:	685b      	ldr	r3, [r3, #4]
900040c0:	f003 0303 	and.w	r3, r3, #3
900040c4:	2b02      	cmp	r3, #2
900040c6:	d130      	bne.n	9000412a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
900040c8:	687b      	ldr	r3, [r7, #4]
900040ca:	689b      	ldr	r3, [r3, #8]
900040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900040ce:	69fb      	ldr	r3, [r7, #28]
900040d0:	005b      	lsls	r3, r3, #1
900040d2:	2203      	movs	r2, #3
900040d4:	fa02 f303 	lsl.w	r3, r2, r3
900040d8:	43db      	mvns	r3, r3
900040da:	69ba      	ldr	r2, [r7, #24]
900040dc:	4013      	ands	r3, r2
900040de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
900040e0:	683b      	ldr	r3, [r7, #0]
900040e2:	68da      	ldr	r2, [r3, #12]
900040e4:	69fb      	ldr	r3, [r7, #28]
900040e6:	005b      	lsls	r3, r3, #1
900040e8:	fa02 f303 	lsl.w	r3, r2, r3
900040ec:	69ba      	ldr	r2, [r7, #24]
900040ee:	4313      	orrs	r3, r2
900040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900040f2:	687b      	ldr	r3, [r7, #4]
900040f4:	69ba      	ldr	r2, [r7, #24]
900040f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
900040f8:	687b      	ldr	r3, [r7, #4]
900040fa:	685b      	ldr	r3, [r3, #4]
900040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
900040fe:	2201      	movs	r2, #1
90004100:	69fb      	ldr	r3, [r7, #28]
90004102:	fa02 f303 	lsl.w	r3, r2, r3
90004106:	43db      	mvns	r3, r3
90004108:	69ba      	ldr	r2, [r7, #24]
9000410a:	4013      	ands	r3, r2
9000410c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000410e:	683b      	ldr	r3, [r7, #0]
90004110:	685b      	ldr	r3, [r3, #4]
90004112:	091b      	lsrs	r3, r3, #4
90004114:	f003 0201 	and.w	r2, r3, #1
90004118:	69fb      	ldr	r3, [r7, #28]
9000411a:	fa02 f303 	lsl.w	r3, r2, r3
9000411e:	69ba      	ldr	r2, [r7, #24]
90004120:	4313      	orrs	r3, r2
90004122:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90004124:	687b      	ldr	r3, [r7, #4]
90004126:	69ba      	ldr	r2, [r7, #24]
90004128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
9000412a:	683b      	ldr	r3, [r7, #0]
9000412c:	685b      	ldr	r3, [r3, #4]
9000412e:	f003 0303 	and.w	r3, r3, #3
90004132:	2b03      	cmp	r3, #3
90004134:	d017      	beq.n	90004166 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90004136:	687b      	ldr	r3, [r7, #4]
90004138:	68db      	ldr	r3, [r3, #12]
9000413a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000413c:	69fb      	ldr	r3, [r7, #28]
9000413e:	005b      	lsls	r3, r3, #1
90004140:	2203      	movs	r2, #3
90004142:	fa02 f303 	lsl.w	r3, r2, r3
90004146:	43db      	mvns	r3, r3
90004148:	69ba      	ldr	r2, [r7, #24]
9000414a:	4013      	ands	r3, r2
9000414c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000414e:	683b      	ldr	r3, [r7, #0]
90004150:	689a      	ldr	r2, [r3, #8]
90004152:	69fb      	ldr	r3, [r7, #28]
90004154:	005b      	lsls	r3, r3, #1
90004156:	fa02 f303 	lsl.w	r3, r2, r3
9000415a:	69ba      	ldr	r2, [r7, #24]
9000415c:	4313      	orrs	r3, r2
9000415e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90004160:	687b      	ldr	r3, [r7, #4]
90004162:	69ba      	ldr	r2, [r7, #24]
90004164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90004166:	683b      	ldr	r3, [r7, #0]
90004168:	685b      	ldr	r3, [r3, #4]
9000416a:	f003 0303 	and.w	r3, r3, #3
9000416e:	2b02      	cmp	r3, #2
90004170:	d123      	bne.n	900041ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90004172:	69fb      	ldr	r3, [r7, #28]
90004174:	08da      	lsrs	r2, r3, #3
90004176:	687b      	ldr	r3, [r7, #4]
90004178:	3208      	adds	r2, #8
9000417a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90004180:	69fb      	ldr	r3, [r7, #28]
90004182:	f003 0307 	and.w	r3, r3, #7
90004186:	009b      	lsls	r3, r3, #2
90004188:	220f      	movs	r2, #15
9000418a:	fa02 f303 	lsl.w	r3, r2, r3
9000418e:	43db      	mvns	r3, r3
90004190:	69ba      	ldr	r2, [r7, #24]
90004192:	4013      	ands	r3, r2
90004194:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90004196:	683b      	ldr	r3, [r7, #0]
90004198:	691a      	ldr	r2, [r3, #16]
9000419a:	69fb      	ldr	r3, [r7, #28]
9000419c:	f003 0307 	and.w	r3, r3, #7
900041a0:	009b      	lsls	r3, r3, #2
900041a2:	fa02 f303 	lsl.w	r3, r2, r3
900041a6:	69ba      	ldr	r2, [r7, #24]
900041a8:	4313      	orrs	r3, r2
900041aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
900041ac:	69fb      	ldr	r3, [r7, #28]
900041ae:	08da      	lsrs	r2, r3, #3
900041b0:	687b      	ldr	r3, [r7, #4]
900041b2:	3208      	adds	r2, #8
900041b4:	69b9      	ldr	r1, [r7, #24]
900041b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
900041ba:	687b      	ldr	r3, [r7, #4]
900041bc:	681b      	ldr	r3, [r3, #0]
900041be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900041c0:	69fb      	ldr	r3, [r7, #28]
900041c2:	005b      	lsls	r3, r3, #1
900041c4:	2203      	movs	r2, #3
900041c6:	fa02 f303 	lsl.w	r3, r2, r3
900041ca:	43db      	mvns	r3, r3
900041cc:	69ba      	ldr	r2, [r7, #24]
900041ce:	4013      	ands	r3, r2
900041d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900041d2:	683b      	ldr	r3, [r7, #0]
900041d4:	685b      	ldr	r3, [r3, #4]
900041d6:	f003 0203 	and.w	r2, r3, #3
900041da:	69fb      	ldr	r3, [r7, #28]
900041dc:	005b      	lsls	r3, r3, #1
900041de:	fa02 f303 	lsl.w	r3, r2, r3
900041e2:	69ba      	ldr	r2, [r7, #24]
900041e4:	4313      	orrs	r3, r2
900041e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900041e8:	687b      	ldr	r3, [r7, #4]
900041ea:	69ba      	ldr	r2, [r7, #24]
900041ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900041ee:	683b      	ldr	r3, [r7, #0]
900041f0:	685b      	ldr	r3, [r3, #4]
900041f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
900041f6:	2b00      	cmp	r3, #0
900041f8:	f000 80e0 	beq.w	900043bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900041fc:	4b2f      	ldr	r3, [pc, #188]	@ (900042bc <HAL_GPIO_Init+0x238>)
900041fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90004202:	4a2e      	ldr	r2, [pc, #184]	@ (900042bc <HAL_GPIO_Init+0x238>)
90004204:	f043 0302 	orr.w	r3, r3, #2
90004208:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
9000420c:	4b2b      	ldr	r3, [pc, #172]	@ (900042bc <HAL_GPIO_Init+0x238>)
9000420e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90004212:	f003 0302 	and.w	r3, r3, #2
90004216:	60fb      	str	r3, [r7, #12]
90004218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
9000421a:	4a29      	ldr	r2, [pc, #164]	@ (900042c0 <HAL_GPIO_Init+0x23c>)
9000421c:	69fb      	ldr	r3, [r7, #28]
9000421e:	089b      	lsrs	r3, r3, #2
90004220:	3302      	adds	r3, #2
90004222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90004228:	69fb      	ldr	r3, [r7, #28]
9000422a:	f003 0303 	and.w	r3, r3, #3
9000422e:	009b      	lsls	r3, r3, #2
90004230:	220f      	movs	r2, #15
90004232:	fa02 f303 	lsl.w	r3, r2, r3
90004236:	43db      	mvns	r3, r3
90004238:	69ba      	ldr	r2, [r7, #24]
9000423a:	4013      	ands	r3, r2
9000423c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	4a20      	ldr	r2, [pc, #128]	@ (900042c4 <HAL_GPIO_Init+0x240>)
90004242:	4293      	cmp	r3, r2
90004244:	d052      	beq.n	900042ec <HAL_GPIO_Init+0x268>
90004246:	687b      	ldr	r3, [r7, #4]
90004248:	4a1f      	ldr	r2, [pc, #124]	@ (900042c8 <HAL_GPIO_Init+0x244>)
9000424a:	4293      	cmp	r3, r2
9000424c:	d031      	beq.n	900042b2 <HAL_GPIO_Init+0x22e>
9000424e:	687b      	ldr	r3, [r7, #4]
90004250:	4a1e      	ldr	r2, [pc, #120]	@ (900042cc <HAL_GPIO_Init+0x248>)
90004252:	4293      	cmp	r3, r2
90004254:	d02b      	beq.n	900042ae <HAL_GPIO_Init+0x22a>
90004256:	687b      	ldr	r3, [r7, #4]
90004258:	4a1d      	ldr	r2, [pc, #116]	@ (900042d0 <HAL_GPIO_Init+0x24c>)
9000425a:	4293      	cmp	r3, r2
9000425c:	d025      	beq.n	900042aa <HAL_GPIO_Init+0x226>
9000425e:	687b      	ldr	r3, [r7, #4]
90004260:	4a1c      	ldr	r2, [pc, #112]	@ (900042d4 <HAL_GPIO_Init+0x250>)
90004262:	4293      	cmp	r3, r2
90004264:	d01f      	beq.n	900042a6 <HAL_GPIO_Init+0x222>
90004266:	687b      	ldr	r3, [r7, #4]
90004268:	4a1b      	ldr	r2, [pc, #108]	@ (900042d8 <HAL_GPIO_Init+0x254>)
9000426a:	4293      	cmp	r3, r2
9000426c:	d019      	beq.n	900042a2 <HAL_GPIO_Init+0x21e>
9000426e:	687b      	ldr	r3, [r7, #4]
90004270:	4a1a      	ldr	r2, [pc, #104]	@ (900042dc <HAL_GPIO_Init+0x258>)
90004272:	4293      	cmp	r3, r2
90004274:	d013      	beq.n	9000429e <HAL_GPIO_Init+0x21a>
90004276:	687b      	ldr	r3, [r7, #4]
90004278:	4a19      	ldr	r2, [pc, #100]	@ (900042e0 <HAL_GPIO_Init+0x25c>)
9000427a:	4293      	cmp	r3, r2
9000427c:	d00d      	beq.n	9000429a <HAL_GPIO_Init+0x216>
9000427e:	687b      	ldr	r3, [r7, #4]
90004280:	4a18      	ldr	r2, [pc, #96]	@ (900042e4 <HAL_GPIO_Init+0x260>)
90004282:	4293      	cmp	r3, r2
90004284:	d007      	beq.n	90004296 <HAL_GPIO_Init+0x212>
90004286:	687b      	ldr	r3, [r7, #4]
90004288:	4a17      	ldr	r2, [pc, #92]	@ (900042e8 <HAL_GPIO_Init+0x264>)
9000428a:	4293      	cmp	r3, r2
9000428c:	d101      	bne.n	90004292 <HAL_GPIO_Init+0x20e>
9000428e:	2309      	movs	r3, #9
90004290:	e02d      	b.n	900042ee <HAL_GPIO_Init+0x26a>
90004292:	230a      	movs	r3, #10
90004294:	e02b      	b.n	900042ee <HAL_GPIO_Init+0x26a>
90004296:	2308      	movs	r3, #8
90004298:	e029      	b.n	900042ee <HAL_GPIO_Init+0x26a>
9000429a:	2307      	movs	r3, #7
9000429c:	e027      	b.n	900042ee <HAL_GPIO_Init+0x26a>
9000429e:	2306      	movs	r3, #6
900042a0:	e025      	b.n	900042ee <HAL_GPIO_Init+0x26a>
900042a2:	2305      	movs	r3, #5
900042a4:	e023      	b.n	900042ee <HAL_GPIO_Init+0x26a>
900042a6:	2304      	movs	r3, #4
900042a8:	e021      	b.n	900042ee <HAL_GPIO_Init+0x26a>
900042aa:	2303      	movs	r3, #3
900042ac:	e01f      	b.n	900042ee <HAL_GPIO_Init+0x26a>
900042ae:	2302      	movs	r3, #2
900042b0:	e01d      	b.n	900042ee <HAL_GPIO_Init+0x26a>
900042b2:	2301      	movs	r3, #1
900042b4:	e01b      	b.n	900042ee <HAL_GPIO_Init+0x26a>
900042b6:	bf00      	nop
900042b8:	58000080 	.word	0x58000080
900042bc:	58024400 	.word	0x58024400
900042c0:	58000400 	.word	0x58000400
900042c4:	58020000 	.word	0x58020000
900042c8:	58020400 	.word	0x58020400
900042cc:	58020800 	.word	0x58020800
900042d0:	58020c00 	.word	0x58020c00
900042d4:	58021000 	.word	0x58021000
900042d8:	58021400 	.word	0x58021400
900042dc:	58021800 	.word	0x58021800
900042e0:	58021c00 	.word	0x58021c00
900042e4:	58022000 	.word	0x58022000
900042e8:	58022400 	.word	0x58022400
900042ec:	2300      	movs	r3, #0
900042ee:	69fa      	ldr	r2, [r7, #28]
900042f0:	f002 0203 	and.w	r2, r2, #3
900042f4:	0092      	lsls	r2, r2, #2
900042f6:	4093      	lsls	r3, r2
900042f8:	69ba      	ldr	r2, [r7, #24]
900042fa:	4313      	orrs	r3, r2
900042fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
900042fe:	4938      	ldr	r1, [pc, #224]	@ (900043e0 <HAL_GPIO_Init+0x35c>)
90004300:	69fb      	ldr	r3, [r7, #28]
90004302:	089b      	lsrs	r3, r3, #2
90004304:	3302      	adds	r3, #2
90004306:	69ba      	ldr	r2, [r7, #24]
90004308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
9000430c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90004310:	681b      	ldr	r3, [r3, #0]
90004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004314:	693b      	ldr	r3, [r7, #16]
90004316:	43db      	mvns	r3, r3
90004318:	69ba      	ldr	r2, [r7, #24]
9000431a:	4013      	ands	r3, r2
9000431c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
9000431e:	683b      	ldr	r3, [r7, #0]
90004320:	685b      	ldr	r3, [r3, #4]
90004322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90004326:	2b00      	cmp	r3, #0
90004328:	d003      	beq.n	90004332 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
9000432a:	69ba      	ldr	r2, [r7, #24]
9000432c:	693b      	ldr	r3, [r7, #16]
9000432e:	4313      	orrs	r3, r2
90004330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90004332:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90004336:	69bb      	ldr	r3, [r7, #24]
90004338:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
9000433a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
9000433e:	685b      	ldr	r3, [r3, #4]
90004340:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004342:	693b      	ldr	r3, [r7, #16]
90004344:	43db      	mvns	r3, r3
90004346:	69ba      	ldr	r2, [r7, #24]
90004348:	4013      	ands	r3, r2
9000434a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
9000434c:	683b      	ldr	r3, [r7, #0]
9000434e:	685b      	ldr	r3, [r3, #4]
90004350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004354:	2b00      	cmp	r3, #0
90004356:	d003      	beq.n	90004360 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90004358:	69ba      	ldr	r2, [r7, #24]
9000435a:	693b      	ldr	r3, [r7, #16]
9000435c:	4313      	orrs	r3, r2
9000435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90004360:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90004364:	69bb      	ldr	r3, [r7, #24]
90004366:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90004368:	697b      	ldr	r3, [r7, #20]
9000436a:	685b      	ldr	r3, [r3, #4]
9000436c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000436e:	693b      	ldr	r3, [r7, #16]
90004370:	43db      	mvns	r3, r3
90004372:	69ba      	ldr	r2, [r7, #24]
90004374:	4013      	ands	r3, r2
90004376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90004378:	683b      	ldr	r3, [r7, #0]
9000437a:	685b      	ldr	r3, [r3, #4]
9000437c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90004380:	2b00      	cmp	r3, #0
90004382:	d003      	beq.n	9000438c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90004384:	69ba      	ldr	r2, [r7, #24]
90004386:	693b      	ldr	r3, [r7, #16]
90004388:	4313      	orrs	r3, r2
9000438a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
9000438c:	697b      	ldr	r3, [r7, #20]
9000438e:	69ba      	ldr	r2, [r7, #24]
90004390:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90004392:	697b      	ldr	r3, [r7, #20]
90004394:	681b      	ldr	r3, [r3, #0]
90004396:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004398:	693b      	ldr	r3, [r7, #16]
9000439a:	43db      	mvns	r3, r3
9000439c:	69ba      	ldr	r2, [r7, #24]
9000439e:	4013      	ands	r3, r2
900043a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900043a2:	683b      	ldr	r3, [r7, #0]
900043a4:	685b      	ldr	r3, [r3, #4]
900043a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
900043aa:	2b00      	cmp	r3, #0
900043ac:	d003      	beq.n	900043b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
900043ae:	69ba      	ldr	r2, [r7, #24]
900043b0:	693b      	ldr	r3, [r7, #16]
900043b2:	4313      	orrs	r3, r2
900043b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
900043b6:	697b      	ldr	r3, [r7, #20]
900043b8:	69ba      	ldr	r2, [r7, #24]
900043ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
900043bc:	69fb      	ldr	r3, [r7, #28]
900043be:	3301      	adds	r3, #1
900043c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900043c2:	683b      	ldr	r3, [r7, #0]
900043c4:	681a      	ldr	r2, [r3, #0]
900043c6:	69fb      	ldr	r3, [r7, #28]
900043c8:	fa22 f303 	lsr.w	r3, r2, r3
900043cc:	2b00      	cmp	r3, #0
900043ce:	f47f ae63 	bne.w	90004098 <HAL_GPIO_Init+0x14>
  }
}
900043d2:	bf00      	nop
900043d4:	bf00      	nop
900043d6:	3724      	adds	r7, #36	@ 0x24
900043d8:	46bd      	mov	sp, r7
900043da:	f85d 7b04 	ldr.w	r7, [sp], #4
900043de:	4770      	bx	lr
900043e0:	58000400 	.word	0x58000400

900043e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
900043e4:	b480      	push	{r7}
900043e6:	b087      	sub	sp, #28
900043e8:	af00      	add	r7, sp, #0
900043ea:	6078      	str	r0, [r7, #4]
900043ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
900043ee:	2300      	movs	r3, #0
900043f0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
900043f2:	4b75      	ldr	r3, [pc, #468]	@ (900045c8 <HAL_GPIO_DeInit+0x1e4>)
900043f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
900043f6:	e0d9      	b.n	900045ac <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
900043f8:	2201      	movs	r2, #1
900043fa:	697b      	ldr	r3, [r7, #20]
900043fc:	fa02 f303 	lsl.w	r3, r2, r3
90004400:	683a      	ldr	r2, [r7, #0]
90004402:	4013      	ands	r3, r2
90004404:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
90004406:	68fb      	ldr	r3, [r7, #12]
90004408:	2b00      	cmp	r3, #0
9000440a:	f000 80cc 	beq.w	900045a6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
9000440e:	4a6f      	ldr	r2, [pc, #444]	@ (900045cc <HAL_GPIO_DeInit+0x1e8>)
90004410:	697b      	ldr	r3, [r7, #20]
90004412:	089b      	lsrs	r3, r3, #2
90004414:	3302      	adds	r3, #2
90004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000441a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000441c:	697b      	ldr	r3, [r7, #20]
9000441e:	f003 0303 	and.w	r3, r3, #3
90004422:	009b      	lsls	r3, r3, #2
90004424:	220f      	movs	r2, #15
90004426:	fa02 f303 	lsl.w	r3, r2, r3
9000442a:	68ba      	ldr	r2, [r7, #8]
9000442c:	4013      	ands	r3, r2
9000442e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90004430:	687b      	ldr	r3, [r7, #4]
90004432:	4a67      	ldr	r2, [pc, #412]	@ (900045d0 <HAL_GPIO_DeInit+0x1ec>)
90004434:	4293      	cmp	r3, r2
90004436:	d037      	beq.n	900044a8 <HAL_GPIO_DeInit+0xc4>
90004438:	687b      	ldr	r3, [r7, #4]
9000443a:	4a66      	ldr	r2, [pc, #408]	@ (900045d4 <HAL_GPIO_DeInit+0x1f0>)
9000443c:	4293      	cmp	r3, r2
9000443e:	d031      	beq.n	900044a4 <HAL_GPIO_DeInit+0xc0>
90004440:	687b      	ldr	r3, [r7, #4]
90004442:	4a65      	ldr	r2, [pc, #404]	@ (900045d8 <HAL_GPIO_DeInit+0x1f4>)
90004444:	4293      	cmp	r3, r2
90004446:	d02b      	beq.n	900044a0 <HAL_GPIO_DeInit+0xbc>
90004448:	687b      	ldr	r3, [r7, #4]
9000444a:	4a64      	ldr	r2, [pc, #400]	@ (900045dc <HAL_GPIO_DeInit+0x1f8>)
9000444c:	4293      	cmp	r3, r2
9000444e:	d025      	beq.n	9000449c <HAL_GPIO_DeInit+0xb8>
90004450:	687b      	ldr	r3, [r7, #4]
90004452:	4a63      	ldr	r2, [pc, #396]	@ (900045e0 <HAL_GPIO_DeInit+0x1fc>)
90004454:	4293      	cmp	r3, r2
90004456:	d01f      	beq.n	90004498 <HAL_GPIO_DeInit+0xb4>
90004458:	687b      	ldr	r3, [r7, #4]
9000445a:	4a62      	ldr	r2, [pc, #392]	@ (900045e4 <HAL_GPIO_DeInit+0x200>)
9000445c:	4293      	cmp	r3, r2
9000445e:	d019      	beq.n	90004494 <HAL_GPIO_DeInit+0xb0>
90004460:	687b      	ldr	r3, [r7, #4]
90004462:	4a61      	ldr	r2, [pc, #388]	@ (900045e8 <HAL_GPIO_DeInit+0x204>)
90004464:	4293      	cmp	r3, r2
90004466:	d013      	beq.n	90004490 <HAL_GPIO_DeInit+0xac>
90004468:	687b      	ldr	r3, [r7, #4]
9000446a:	4a60      	ldr	r2, [pc, #384]	@ (900045ec <HAL_GPIO_DeInit+0x208>)
9000446c:	4293      	cmp	r3, r2
9000446e:	d00d      	beq.n	9000448c <HAL_GPIO_DeInit+0xa8>
90004470:	687b      	ldr	r3, [r7, #4]
90004472:	4a5f      	ldr	r2, [pc, #380]	@ (900045f0 <HAL_GPIO_DeInit+0x20c>)
90004474:	4293      	cmp	r3, r2
90004476:	d007      	beq.n	90004488 <HAL_GPIO_DeInit+0xa4>
90004478:	687b      	ldr	r3, [r7, #4]
9000447a:	4a5e      	ldr	r2, [pc, #376]	@ (900045f4 <HAL_GPIO_DeInit+0x210>)
9000447c:	4293      	cmp	r3, r2
9000447e:	d101      	bne.n	90004484 <HAL_GPIO_DeInit+0xa0>
90004480:	2309      	movs	r3, #9
90004482:	e012      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
90004484:	230a      	movs	r3, #10
90004486:	e010      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
90004488:	2308      	movs	r3, #8
9000448a:	e00e      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
9000448c:	2307      	movs	r3, #7
9000448e:	e00c      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
90004490:	2306      	movs	r3, #6
90004492:	e00a      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
90004494:	2305      	movs	r3, #5
90004496:	e008      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
90004498:	2304      	movs	r3, #4
9000449a:	e006      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
9000449c:	2303      	movs	r3, #3
9000449e:	e004      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
900044a0:	2302      	movs	r3, #2
900044a2:	e002      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
900044a4:	2301      	movs	r3, #1
900044a6:	e000      	b.n	900044aa <HAL_GPIO_DeInit+0xc6>
900044a8:	2300      	movs	r3, #0
900044aa:	697a      	ldr	r2, [r7, #20]
900044ac:	f002 0203 	and.w	r2, r2, #3
900044b0:	0092      	lsls	r2, r2, #2
900044b2:	4093      	lsls	r3, r2
900044b4:	68ba      	ldr	r2, [r7, #8]
900044b6:	429a      	cmp	r2, r3
900044b8:	d136      	bne.n	90004528 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
900044ba:	693b      	ldr	r3, [r7, #16]
900044bc:	681a      	ldr	r2, [r3, #0]
900044be:	68fb      	ldr	r3, [r7, #12]
900044c0:	43db      	mvns	r3, r3
900044c2:	401a      	ands	r2, r3
900044c4:	693b      	ldr	r3, [r7, #16]
900044c6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
900044c8:	693b      	ldr	r3, [r7, #16]
900044ca:	685a      	ldr	r2, [r3, #4]
900044cc:	68fb      	ldr	r3, [r7, #12]
900044ce:	43db      	mvns	r3, r3
900044d0:	401a      	ands	r2, r3
900044d2:	693b      	ldr	r3, [r7, #16]
900044d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
900044d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
900044da:	685a      	ldr	r2, [r3, #4]
900044dc:	68fb      	ldr	r3, [r7, #12]
900044de:	43db      	mvns	r3, r3
900044e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
900044e4:	4013      	ands	r3, r2
900044e6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
900044e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
900044ec:	681a      	ldr	r2, [r3, #0]
900044ee:	68fb      	ldr	r3, [r7, #12]
900044f0:	43db      	mvns	r3, r3
900044f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
900044f6:	4013      	ands	r3, r2
900044f8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
900044fa:	697b      	ldr	r3, [r7, #20]
900044fc:	f003 0303 	and.w	r3, r3, #3
90004500:	009b      	lsls	r3, r3, #2
90004502:	220f      	movs	r2, #15
90004504:	fa02 f303 	lsl.w	r3, r2, r3
90004508:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
9000450a:	4a30      	ldr	r2, [pc, #192]	@ (900045cc <HAL_GPIO_DeInit+0x1e8>)
9000450c:	697b      	ldr	r3, [r7, #20]
9000450e:	089b      	lsrs	r3, r3, #2
90004510:	3302      	adds	r3, #2
90004512:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90004516:	68bb      	ldr	r3, [r7, #8]
90004518:	43da      	mvns	r2, r3
9000451a:	482c      	ldr	r0, [pc, #176]	@ (900045cc <HAL_GPIO_DeInit+0x1e8>)
9000451c:	697b      	ldr	r3, [r7, #20]
9000451e:	089b      	lsrs	r3, r3, #2
90004520:	400a      	ands	r2, r1
90004522:	3302      	adds	r3, #2
90004524:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90004528:	687b      	ldr	r3, [r7, #4]
9000452a:	681a      	ldr	r2, [r3, #0]
9000452c:	697b      	ldr	r3, [r7, #20]
9000452e:	005b      	lsls	r3, r3, #1
90004530:	2103      	movs	r1, #3
90004532:	fa01 f303 	lsl.w	r3, r1, r3
90004536:	431a      	orrs	r2, r3
90004538:	687b      	ldr	r3, [r7, #4]
9000453a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000453c:	697b      	ldr	r3, [r7, #20]
9000453e:	08da      	lsrs	r2, r3, #3
90004540:	687b      	ldr	r3, [r7, #4]
90004542:	3208      	adds	r2, #8
90004544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90004548:	697b      	ldr	r3, [r7, #20]
9000454a:	f003 0307 	and.w	r3, r3, #7
9000454e:	009b      	lsls	r3, r3, #2
90004550:	220f      	movs	r2, #15
90004552:	fa02 f303 	lsl.w	r3, r2, r3
90004556:	43db      	mvns	r3, r3
90004558:	697a      	ldr	r2, [r7, #20]
9000455a:	08d2      	lsrs	r2, r2, #3
9000455c:	4019      	ands	r1, r3
9000455e:	687b      	ldr	r3, [r7, #4]
90004560:	3208      	adds	r2, #8
90004562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90004566:	687b      	ldr	r3, [r7, #4]
90004568:	68da      	ldr	r2, [r3, #12]
9000456a:	697b      	ldr	r3, [r7, #20]
9000456c:	005b      	lsls	r3, r3, #1
9000456e:	2103      	movs	r1, #3
90004570:	fa01 f303 	lsl.w	r3, r1, r3
90004574:	43db      	mvns	r3, r3
90004576:	401a      	ands	r2, r3
90004578:	687b      	ldr	r3, [r7, #4]
9000457a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
9000457c:	687b      	ldr	r3, [r7, #4]
9000457e:	685a      	ldr	r2, [r3, #4]
90004580:	2101      	movs	r1, #1
90004582:	697b      	ldr	r3, [r7, #20]
90004584:	fa01 f303 	lsl.w	r3, r1, r3
90004588:	43db      	mvns	r3, r3
9000458a:	401a      	ands	r2, r3
9000458c:	687b      	ldr	r3, [r7, #4]
9000458e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90004590:	687b      	ldr	r3, [r7, #4]
90004592:	689a      	ldr	r2, [r3, #8]
90004594:	697b      	ldr	r3, [r7, #20]
90004596:	005b      	lsls	r3, r3, #1
90004598:	2103      	movs	r1, #3
9000459a:	fa01 f303 	lsl.w	r3, r1, r3
9000459e:	43db      	mvns	r3, r3
900045a0:	401a      	ands	r2, r3
900045a2:	687b      	ldr	r3, [r7, #4]
900045a4:	609a      	str	r2, [r3, #8]
    }

    position++;
900045a6:	697b      	ldr	r3, [r7, #20]
900045a8:	3301      	adds	r3, #1
900045aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
900045ac:	683a      	ldr	r2, [r7, #0]
900045ae:	697b      	ldr	r3, [r7, #20]
900045b0:	fa22 f303 	lsr.w	r3, r2, r3
900045b4:	2b00      	cmp	r3, #0
900045b6:	f47f af1f 	bne.w	900043f8 <HAL_GPIO_DeInit+0x14>
  }
}
900045ba:	bf00      	nop
900045bc:	bf00      	nop
900045be:	371c      	adds	r7, #28
900045c0:	46bd      	mov	sp, r7
900045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900045c6:	4770      	bx	lr
900045c8:	58000080 	.word	0x58000080
900045cc:	58000400 	.word	0x58000400
900045d0:	58020000 	.word	0x58020000
900045d4:	58020400 	.word	0x58020400
900045d8:	58020800 	.word	0x58020800
900045dc:	58020c00 	.word	0x58020c00
900045e0:	58021000 	.word	0x58021000
900045e4:	58021400 	.word	0x58021400
900045e8:	58021800 	.word	0x58021800
900045ec:	58021c00 	.word	0x58021c00
900045f0:	58022000 	.word	0x58022000
900045f4:	58022400 	.word	0x58022400

900045f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
900045f8:	b480      	push	{r7}
900045fa:	b083      	sub	sp, #12
900045fc:	af00      	add	r7, sp, #0
900045fe:	6078      	str	r0, [r7, #4]
90004600:	460b      	mov	r3, r1
90004602:	807b      	strh	r3, [r7, #2]
90004604:	4613      	mov	r3, r2
90004606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90004608:	787b      	ldrb	r3, [r7, #1]
9000460a:	2b00      	cmp	r3, #0
9000460c:	d003      	beq.n	90004616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
9000460e:	887a      	ldrh	r2, [r7, #2]
90004610:	687b      	ldr	r3, [r7, #4]
90004612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90004614:	e003      	b.n	9000461e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90004616:	887b      	ldrh	r3, [r7, #2]
90004618:	041a      	lsls	r2, r3, #16
9000461a:	687b      	ldr	r3, [r7, #4]
9000461c:	619a      	str	r2, [r3, #24]
}
9000461e:	bf00      	nop
90004620:	370c      	adds	r7, #12
90004622:	46bd      	mov	sp, r7
90004624:	f85d 7b04 	ldr.w	r7, [sp], #4
90004628:	4770      	bx	lr

9000462a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000462a:	b580      	push	{r7, lr}
9000462c:	b086      	sub	sp, #24
9000462e:	af00      	add	r7, sp, #0
90004630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004632:	687b      	ldr	r3, [r7, #4]
90004634:	681b      	ldr	r3, [r3, #0]
90004636:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004638:	693b      	ldr	r3, [r7, #16]
9000463a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
9000463c:	687b      	ldr	r3, [r7, #4]
9000463e:	681b      	ldr	r3, [r3, #0]
90004640:	4618      	mov	r0, r3
90004642:	f007 fb47 	bl	9000bcd4 <USB_GetMode>
90004646:	4603      	mov	r3, r0
90004648:	2b01      	cmp	r3, #1
9000464a:	f040 80fb 	bne.w	90004844 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
9000464e:	687b      	ldr	r3, [r7, #4]
90004650:	681b      	ldr	r3, [r3, #0]
90004652:	4618      	mov	r0, r3
90004654:	f007 fb0a 	bl	9000bc6c <USB_ReadInterrupts>
90004658:	4603      	mov	r3, r0
9000465a:	2b00      	cmp	r3, #0
9000465c:	f000 80f1 	beq.w	90004842 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90004660:	687b      	ldr	r3, [r7, #4]
90004662:	681b      	ldr	r3, [r3, #0]
90004664:	4618      	mov	r0, r3
90004666:	f007 fb01 	bl	9000bc6c <USB_ReadInterrupts>
9000466a:	4603      	mov	r3, r0
9000466c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90004674:	d104      	bne.n	90004680 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90004676:	687b      	ldr	r3, [r7, #4]
90004678:	681b      	ldr	r3, [r3, #0]
9000467a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
9000467e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90004680:	687b      	ldr	r3, [r7, #4]
90004682:	681b      	ldr	r3, [r3, #0]
90004684:	4618      	mov	r0, r3
90004686:	f007 faf1 	bl	9000bc6c <USB_ReadInterrupts>
9000468a:	4603      	mov	r3, r0
9000468c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90004690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90004694:	d104      	bne.n	900046a0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90004696:	687b      	ldr	r3, [r7, #4]
90004698:	681b      	ldr	r3, [r3, #0]
9000469a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
9000469e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
900046a0:	687b      	ldr	r3, [r7, #4]
900046a2:	681b      	ldr	r3, [r3, #0]
900046a4:	4618      	mov	r0, r3
900046a6:	f007 fae1 	bl	9000bc6c <USB_ReadInterrupts>
900046aa:	4603      	mov	r3, r0
900046ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
900046b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
900046b4:	d104      	bne.n	900046c0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
900046b6:	687b      	ldr	r3, [r7, #4]
900046b8:	681b      	ldr	r3, [r3, #0]
900046ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
900046be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
900046c0:	687b      	ldr	r3, [r7, #4]
900046c2:	681b      	ldr	r3, [r3, #0]
900046c4:	4618      	mov	r0, r3
900046c6:	f007 fad1 	bl	9000bc6c <USB_ReadInterrupts>
900046ca:	4603      	mov	r3, r0
900046cc:	f003 0302 	and.w	r3, r3, #2
900046d0:	2b02      	cmp	r3, #2
900046d2:	d103      	bne.n	900046dc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
900046d4:	687b      	ldr	r3, [r7, #4]
900046d6:	681b      	ldr	r3, [r3, #0]
900046d8:	2202      	movs	r2, #2
900046da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
900046dc:	687b      	ldr	r3, [r7, #4]
900046de:	681b      	ldr	r3, [r3, #0]
900046e0:	4618      	mov	r0, r3
900046e2:	f007 fac3 	bl	9000bc6c <USB_ReadInterrupts>
900046e6:	4603      	mov	r3, r0
900046e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900046ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900046f0:	d120      	bne.n	90004734 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
900046f2:	687b      	ldr	r3, [r7, #4]
900046f4:	681b      	ldr	r3, [r3, #0]
900046f6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900046fa:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
900046fc:	68fb      	ldr	r3, [r7, #12]
900046fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90004702:	681b      	ldr	r3, [r3, #0]
90004704:	f003 0301 	and.w	r3, r3, #1
90004708:	2b00      	cmp	r3, #0
9000470a:	d113      	bne.n	90004734 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
9000470c:	2110      	movs	r1, #16
9000470e:	6938      	ldr	r0, [r7, #16]
90004710:	f007 f9f4 	bl	9000bafc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90004714:	6938      	ldr	r0, [r7, #16]
90004716:	f007 fa23 	bl	9000bb60 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
9000471a:	687b      	ldr	r3, [r7, #4]
9000471c:	7a5b      	ldrb	r3, [r3, #9]
9000471e:	2b02      	cmp	r3, #2
90004720:	d105      	bne.n	9000472e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90004722:	687b      	ldr	r3, [r7, #4]
90004724:	681b      	ldr	r3, [r3, #0]
90004726:	2101      	movs	r1, #1
90004728:	4618      	mov	r0, r3
9000472a:	f007 fae1 	bl	9000bcf0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
9000472e:	6878      	ldr	r0, [r7, #4]
90004730:	f7fc fc48 	bl	90000fc4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90004734:	687b      	ldr	r3, [r7, #4]
90004736:	681b      	ldr	r3, [r3, #0]
90004738:	4618      	mov	r0, r3
9000473a:	f007 fa97 	bl	9000bc6c <USB_ReadInterrupts>
9000473e:	4603      	mov	r3, r0
90004740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90004744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004748:	d102      	bne.n	90004750 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
9000474a:	6878      	ldr	r0, [r7, #4]
9000474c:	f001 fca1 	bl	90006092 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90004750:	687b      	ldr	r3, [r7, #4]
90004752:	681b      	ldr	r3, [r3, #0]
90004754:	4618      	mov	r0, r3
90004756:	f007 fa89 	bl	9000bc6c <USB_ReadInterrupts>
9000475a:	4603      	mov	r3, r0
9000475c:	f003 0308 	and.w	r3, r3, #8
90004760:	2b08      	cmp	r3, #8
90004762:	d106      	bne.n	90004772 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90004764:	6878      	ldr	r0, [r7, #4]
90004766:	f7fc fc11 	bl	90000f8c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
9000476a:	687b      	ldr	r3, [r7, #4]
9000476c:	681b      	ldr	r3, [r3, #0]
9000476e:	2208      	movs	r2, #8
90004770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90004772:	687b      	ldr	r3, [r7, #4]
90004774:	681b      	ldr	r3, [r3, #0]
90004776:	4618      	mov	r0, r3
90004778:	f007 fa78 	bl	9000bc6c <USB_ReadInterrupts>
9000477c:	4603      	mov	r3, r0
9000477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90004782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90004786:	d139      	bne.n	900047fc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90004788:	687b      	ldr	r3, [r7, #4]
9000478a:	681b      	ldr	r3, [r3, #0]
9000478c:	4618      	mov	r0, r3
9000478e:	f007 faec 	bl	9000bd6a <USB_HC_ReadInterrupt>
90004792:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004794:	2300      	movs	r3, #0
90004796:	617b      	str	r3, [r7, #20]
90004798:	e025      	b.n	900047e6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
9000479a:	697b      	ldr	r3, [r7, #20]
9000479c:	f003 030f 	and.w	r3, r3, #15
900047a0:	68ba      	ldr	r2, [r7, #8]
900047a2:	fa22 f303 	lsr.w	r3, r2, r3
900047a6:	f003 0301 	and.w	r3, r3, #1
900047aa:	2b00      	cmp	r3, #0
900047ac:	d018      	beq.n	900047e0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900047ae:	697b      	ldr	r3, [r7, #20]
900047b0:	015a      	lsls	r2, r3, #5
900047b2:	68fb      	ldr	r3, [r7, #12]
900047b4:	4413      	add	r3, r2
900047b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047ba:	681b      	ldr	r3, [r3, #0]
900047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
900047c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900047c4:	d106      	bne.n	900047d4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
900047c6:	697b      	ldr	r3, [r7, #20]
900047c8:	b2db      	uxtb	r3, r3
900047ca:	4619      	mov	r1, r3
900047cc:	6878      	ldr	r0, [r7, #4]
900047ce:	f000 f859 	bl	90004884 <HCD_HC_IN_IRQHandler>
900047d2:	e005      	b.n	900047e0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
900047d4:	697b      	ldr	r3, [r7, #20]
900047d6:	b2db      	uxtb	r3, r3
900047d8:	4619      	mov	r1, r3
900047da:	6878      	ldr	r0, [r7, #4]
900047dc:	f000 febb 	bl	90005556 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900047e0:	697b      	ldr	r3, [r7, #20]
900047e2:	3301      	adds	r3, #1
900047e4:	617b      	str	r3, [r7, #20]
900047e6:	687b      	ldr	r3, [r7, #4]
900047e8:	795b      	ldrb	r3, [r3, #5]
900047ea:	461a      	mov	r2, r3
900047ec:	697b      	ldr	r3, [r7, #20]
900047ee:	4293      	cmp	r3, r2
900047f0:	d3d3      	bcc.n	9000479a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
900047f2:	687b      	ldr	r3, [r7, #4]
900047f4:	681b      	ldr	r3, [r3, #0]
900047f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900047fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
900047fc:	687b      	ldr	r3, [r7, #4]
900047fe:	681b      	ldr	r3, [r3, #0]
90004800:	4618      	mov	r0, r3
90004802:	f007 fa33 	bl	9000bc6c <USB_ReadInterrupts>
90004806:	4603      	mov	r3, r0
90004808:	f003 0310 	and.w	r3, r3, #16
9000480c:	2b10      	cmp	r3, #16
9000480e:	d101      	bne.n	90004814 <HAL_HCD_IRQHandler+0x1ea>
90004810:	2301      	movs	r3, #1
90004812:	e000      	b.n	90004816 <HAL_HCD_IRQHandler+0x1ec>
90004814:	2300      	movs	r3, #0
90004816:	2b00      	cmp	r3, #0
90004818:	d014      	beq.n	90004844 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
9000481a:	687b      	ldr	r3, [r7, #4]
9000481c:	681b      	ldr	r3, [r3, #0]
9000481e:	699a      	ldr	r2, [r3, #24]
90004820:	687b      	ldr	r3, [r7, #4]
90004822:	681b      	ldr	r3, [r3, #0]
90004824:	f022 0210 	bic.w	r2, r2, #16
90004828:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
9000482a:	6878      	ldr	r0, [r7, #4]
9000482c:	f001 fb52 	bl	90005ed4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004830:	687b      	ldr	r3, [r7, #4]
90004832:	681b      	ldr	r3, [r3, #0]
90004834:	699a      	ldr	r2, [r3, #24]
90004836:	687b      	ldr	r3, [r7, #4]
90004838:	681b      	ldr	r3, [r3, #0]
9000483a:	f042 0210 	orr.w	r2, r2, #16
9000483e:	619a      	str	r2, [r3, #24]
90004840:	e000      	b.n	90004844 <HAL_HCD_IRQHandler+0x21a>
      return;
90004842:	bf00      	nop
    }
  }
}
90004844:	3718      	adds	r7, #24
90004846:	46bd      	mov	sp, r7
90004848:	bd80      	pop	{r7, pc}

9000484a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
9000484a:	b580      	push	{r7, lr}
9000484c:	b082      	sub	sp, #8
9000484e:	af00      	add	r7, sp, #0
90004850:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90004852:	687b      	ldr	r3, [r7, #4]
90004854:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004858:	2b01      	cmp	r3, #1
9000485a:	d101      	bne.n	90004860 <HAL_HCD_Stop+0x16>
9000485c:	2302      	movs	r3, #2
9000485e:	e00d      	b.n	9000487c <HAL_HCD_Stop+0x32>
90004860:	687b      	ldr	r3, [r7, #4]
90004862:	2201      	movs	r2, #1
90004864:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004868:	687b      	ldr	r3, [r7, #4]
9000486a:	681b      	ldr	r3, [r3, #0]
9000486c:	4618      	mov	r0, r3
9000486e:	f007 fbad 	bl	9000bfcc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90004872:	687b      	ldr	r3, [r7, #4]
90004874:	2200      	movs	r2, #0
90004876:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
9000487a:	2300      	movs	r3, #0
}
9000487c:	4618      	mov	r0, r3
9000487e:	3708      	adds	r7, #8
90004880:	46bd      	mov	sp, r7
90004882:	bd80      	pop	{r7, pc}

90004884 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004884:	b580      	push	{r7, lr}
90004886:	b086      	sub	sp, #24
90004888:	af00      	add	r7, sp, #0
9000488a:	6078      	str	r0, [r7, #4]
9000488c:	460b      	mov	r3, r1
9000488e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004890:	687b      	ldr	r3, [r7, #4]
90004892:	681b      	ldr	r3, [r3, #0]
90004894:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004896:	697b      	ldr	r3, [r7, #20]
90004898:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000489a:	687b      	ldr	r3, [r7, #4]
9000489c:	681b      	ldr	r3, [r3, #0]
9000489e:	78fa      	ldrb	r2, [r7, #3]
900048a0:	4611      	mov	r1, r2
900048a2:	4618      	mov	r0, r3
900048a4:	f007 f9f5 	bl	9000bc92 <USB_ReadChInterrupts>
900048a8:	4603      	mov	r3, r0
900048aa:	f003 0304 	and.w	r3, r3, #4
900048ae:	2b04      	cmp	r3, #4
900048b0:	d11a      	bne.n	900048e8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
900048b2:	78fb      	ldrb	r3, [r7, #3]
900048b4:	015a      	lsls	r2, r3, #5
900048b6:	693b      	ldr	r3, [r7, #16]
900048b8:	4413      	add	r3, r2
900048ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048be:	461a      	mov	r2, r3
900048c0:	2304      	movs	r3, #4
900048c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900048c4:	78fa      	ldrb	r2, [r7, #3]
900048c6:	6879      	ldr	r1, [r7, #4]
900048c8:	4613      	mov	r3, r2
900048ca:	011b      	lsls	r3, r3, #4
900048cc:	1a9b      	subs	r3, r3, r2
900048ce:	009b      	lsls	r3, r3, #2
900048d0:	440b      	add	r3, r1
900048d2:	334d      	adds	r3, #77	@ 0x4d
900048d4:	2207      	movs	r2, #7
900048d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900048d8:	687b      	ldr	r3, [r7, #4]
900048da:	681b      	ldr	r3, [r3, #0]
900048dc:	78fa      	ldrb	r2, [r7, #3]
900048de:	4611      	mov	r1, r2
900048e0:	4618      	mov	r0, r3
900048e2:	f007 fa53 	bl	9000bd8c <USB_HC_Halt>
900048e6:	e09e      	b.n	90004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
900048e8:	687b      	ldr	r3, [r7, #4]
900048ea:	681b      	ldr	r3, [r3, #0]
900048ec:	78fa      	ldrb	r2, [r7, #3]
900048ee:	4611      	mov	r1, r2
900048f0:	4618      	mov	r0, r3
900048f2:	f007 f9ce 	bl	9000bc92 <USB_ReadChInterrupts>
900048f6:	4603      	mov	r3, r0
900048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900048fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90004900:	d11b      	bne.n	9000493a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
90004902:	78fb      	ldrb	r3, [r7, #3]
90004904:	015a      	lsls	r2, r3, #5
90004906:	693b      	ldr	r3, [r7, #16]
90004908:	4413      	add	r3, r2
9000490a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000490e:	461a      	mov	r2, r3
90004910:	f44f 7380 	mov.w	r3, #256	@ 0x100
90004914:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
90004916:	78fa      	ldrb	r2, [r7, #3]
90004918:	6879      	ldr	r1, [r7, #4]
9000491a:	4613      	mov	r3, r2
9000491c:	011b      	lsls	r3, r3, #4
9000491e:	1a9b      	subs	r3, r3, r2
90004920:	009b      	lsls	r3, r3, #2
90004922:	440b      	add	r3, r1
90004924:	334d      	adds	r3, #77	@ 0x4d
90004926:	2208      	movs	r2, #8
90004928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000492a:	687b      	ldr	r3, [r7, #4]
9000492c:	681b      	ldr	r3, [r3, #0]
9000492e:	78fa      	ldrb	r2, [r7, #3]
90004930:	4611      	mov	r1, r2
90004932:	4618      	mov	r0, r3
90004934:	f007 fa2a 	bl	9000bd8c <USB_HC_Halt>
90004938:	e075      	b.n	90004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000493a:	687b      	ldr	r3, [r7, #4]
9000493c:	681b      	ldr	r3, [r3, #0]
9000493e:	78fa      	ldrb	r2, [r7, #3]
90004940:	4611      	mov	r1, r2
90004942:	4618      	mov	r0, r3
90004944:	f007 f9a5 	bl	9000bc92 <USB_ReadChInterrupts>
90004948:	4603      	mov	r3, r0
9000494a:	f003 0308 	and.w	r3, r3, #8
9000494e:	2b08      	cmp	r3, #8
90004950:	d11a      	bne.n	90004988 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004952:	78fb      	ldrb	r3, [r7, #3]
90004954:	015a      	lsls	r2, r3, #5
90004956:	693b      	ldr	r3, [r7, #16]
90004958:	4413      	add	r3, r2
9000495a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000495e:	461a      	mov	r2, r3
90004960:	2308      	movs	r3, #8
90004962:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004964:	78fa      	ldrb	r2, [r7, #3]
90004966:	6879      	ldr	r1, [r7, #4]
90004968:	4613      	mov	r3, r2
9000496a:	011b      	lsls	r3, r3, #4
9000496c:	1a9b      	subs	r3, r3, r2
9000496e:	009b      	lsls	r3, r3, #2
90004970:	440b      	add	r3, r1
90004972:	334d      	adds	r3, #77	@ 0x4d
90004974:	2206      	movs	r2, #6
90004976:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004978:	687b      	ldr	r3, [r7, #4]
9000497a:	681b      	ldr	r3, [r3, #0]
9000497c:	78fa      	ldrb	r2, [r7, #3]
9000497e:	4611      	mov	r1, r2
90004980:	4618      	mov	r0, r3
90004982:	f007 fa03 	bl	9000bd8c <USB_HC_Halt>
90004986:	e04e      	b.n	90004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004988:	687b      	ldr	r3, [r7, #4]
9000498a:	681b      	ldr	r3, [r3, #0]
9000498c:	78fa      	ldrb	r2, [r7, #3]
9000498e:	4611      	mov	r1, r2
90004990:	4618      	mov	r0, r3
90004992:	f007 f97e 	bl	9000bc92 <USB_ReadChInterrupts>
90004996:	4603      	mov	r3, r0
90004998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000499c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900049a0:	d11b      	bne.n	900049da <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900049a2:	78fb      	ldrb	r3, [r7, #3]
900049a4:	015a      	lsls	r2, r3, #5
900049a6:	693b      	ldr	r3, [r7, #16]
900049a8:	4413      	add	r3, r2
900049aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049ae:	461a      	mov	r2, r3
900049b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900049b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
900049b6:	78fa      	ldrb	r2, [r7, #3]
900049b8:	6879      	ldr	r1, [r7, #4]
900049ba:	4613      	mov	r3, r2
900049bc:	011b      	lsls	r3, r3, #4
900049be:	1a9b      	subs	r3, r3, r2
900049c0:	009b      	lsls	r3, r3, #2
900049c2:	440b      	add	r3, r1
900049c4:	334d      	adds	r3, #77	@ 0x4d
900049c6:	2209      	movs	r2, #9
900049c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900049ca:	687b      	ldr	r3, [r7, #4]
900049cc:	681b      	ldr	r3, [r3, #0]
900049ce:	78fa      	ldrb	r2, [r7, #3]
900049d0:	4611      	mov	r1, r2
900049d2:	4618      	mov	r0, r3
900049d4:	f007 f9da 	bl	9000bd8c <USB_HC_Halt>
900049d8:	e025      	b.n	90004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900049da:	687b      	ldr	r3, [r7, #4]
900049dc:	681b      	ldr	r3, [r3, #0]
900049de:	78fa      	ldrb	r2, [r7, #3]
900049e0:	4611      	mov	r1, r2
900049e2:	4618      	mov	r0, r3
900049e4:	f007 f955 	bl	9000bc92 <USB_ReadChInterrupts>
900049e8:	4603      	mov	r3, r0
900049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900049ee:	2b80      	cmp	r3, #128	@ 0x80
900049f0:	d119      	bne.n	90004a26 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900049f2:	78fb      	ldrb	r3, [r7, #3]
900049f4:	015a      	lsls	r2, r3, #5
900049f6:	693b      	ldr	r3, [r7, #16]
900049f8:	4413      	add	r3, r2
900049fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049fe:	461a      	mov	r2, r3
90004a00:	2380      	movs	r3, #128	@ 0x80
90004a02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004a04:	78fa      	ldrb	r2, [r7, #3]
90004a06:	6879      	ldr	r1, [r7, #4]
90004a08:	4613      	mov	r3, r2
90004a0a:	011b      	lsls	r3, r3, #4
90004a0c:	1a9b      	subs	r3, r3, r2
90004a0e:	009b      	lsls	r3, r3, #2
90004a10:	440b      	add	r3, r1
90004a12:	334d      	adds	r3, #77	@ 0x4d
90004a14:	2207      	movs	r2, #7
90004a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004a18:	687b      	ldr	r3, [r7, #4]
90004a1a:	681b      	ldr	r3, [r3, #0]
90004a1c:	78fa      	ldrb	r2, [r7, #3]
90004a1e:	4611      	mov	r1, r2
90004a20:	4618      	mov	r0, r3
90004a22:	f007 f9b3 	bl	9000bd8c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004a26:	687b      	ldr	r3, [r7, #4]
90004a28:	681b      	ldr	r3, [r3, #0]
90004a2a:	78fa      	ldrb	r2, [r7, #3]
90004a2c:	4611      	mov	r1, r2
90004a2e:	4618      	mov	r0, r3
90004a30:	f007 f92f 	bl	9000bc92 <USB_ReadChInterrupts>
90004a34:	4603      	mov	r3, r0
90004a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004a3e:	d112      	bne.n	90004a66 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004a40:	687b      	ldr	r3, [r7, #4]
90004a42:	681b      	ldr	r3, [r3, #0]
90004a44:	78fa      	ldrb	r2, [r7, #3]
90004a46:	4611      	mov	r1, r2
90004a48:	4618      	mov	r0, r3
90004a4a:	f007 f99f 	bl	9000bd8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004a4e:	78fb      	ldrb	r3, [r7, #3]
90004a50:	015a      	lsls	r2, r3, #5
90004a52:	693b      	ldr	r3, [r7, #16]
90004a54:	4413      	add	r3, r2
90004a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a5a:	461a      	mov	r2, r3
90004a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004a60:	6093      	str	r3, [r2, #8]
90004a62:	f000 bd75 	b.w	90005550 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004a66:	687b      	ldr	r3, [r7, #4]
90004a68:	681b      	ldr	r3, [r3, #0]
90004a6a:	78fa      	ldrb	r2, [r7, #3]
90004a6c:	4611      	mov	r1, r2
90004a6e:	4618      	mov	r0, r3
90004a70:	f007 f90f 	bl	9000bc92 <USB_ReadChInterrupts>
90004a74:	4603      	mov	r3, r0
90004a76:	f003 0301 	and.w	r3, r3, #1
90004a7a:	2b01      	cmp	r3, #1
90004a7c:	f040 8128 	bne.w	90004cd0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004a80:	78fb      	ldrb	r3, [r7, #3]
90004a82:	015a      	lsls	r2, r3, #5
90004a84:	693b      	ldr	r3, [r7, #16]
90004a86:	4413      	add	r3, r2
90004a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a8c:	461a      	mov	r2, r3
90004a8e:	2320      	movs	r3, #32
90004a90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90004a92:	78fa      	ldrb	r2, [r7, #3]
90004a94:	6879      	ldr	r1, [r7, #4]
90004a96:	4613      	mov	r3, r2
90004a98:	011b      	lsls	r3, r3, #4
90004a9a:	1a9b      	subs	r3, r3, r2
90004a9c:	009b      	lsls	r3, r3, #2
90004a9e:	440b      	add	r3, r1
90004aa0:	331b      	adds	r3, #27
90004aa2:	781b      	ldrb	r3, [r3, #0]
90004aa4:	2b01      	cmp	r3, #1
90004aa6:	d119      	bne.n	90004adc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004aa8:	78fa      	ldrb	r2, [r7, #3]
90004aaa:	6879      	ldr	r1, [r7, #4]
90004aac:	4613      	mov	r3, r2
90004aae:	011b      	lsls	r3, r3, #4
90004ab0:	1a9b      	subs	r3, r3, r2
90004ab2:	009b      	lsls	r3, r3, #2
90004ab4:	440b      	add	r3, r1
90004ab6:	331b      	adds	r3, #27
90004ab8:	2200      	movs	r2, #0
90004aba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004abc:	78fb      	ldrb	r3, [r7, #3]
90004abe:	015a      	lsls	r2, r3, #5
90004ac0:	693b      	ldr	r3, [r7, #16]
90004ac2:	4413      	add	r3, r2
90004ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ac8:	685b      	ldr	r3, [r3, #4]
90004aca:	78fa      	ldrb	r2, [r7, #3]
90004acc:	0151      	lsls	r1, r2, #5
90004ace:	693a      	ldr	r2, [r7, #16]
90004ad0:	440a      	add	r2, r1
90004ad2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004ada:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90004adc:	687b      	ldr	r3, [r7, #4]
90004ade:	799b      	ldrb	r3, [r3, #6]
90004ae0:	2b00      	cmp	r3, #0
90004ae2:	d01b      	beq.n	90004b1c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004ae4:	78fa      	ldrb	r2, [r7, #3]
90004ae6:	6879      	ldr	r1, [r7, #4]
90004ae8:	4613      	mov	r3, r2
90004aea:	011b      	lsls	r3, r3, #4
90004aec:	1a9b      	subs	r3, r3, r2
90004aee:	009b      	lsls	r3, r3, #2
90004af0:	440b      	add	r3, r1
90004af2:	3330      	adds	r3, #48	@ 0x30
90004af4:	6819      	ldr	r1, [r3, #0]
90004af6:	78fb      	ldrb	r3, [r7, #3]
90004af8:	015a      	lsls	r2, r3, #5
90004afa:	693b      	ldr	r3, [r7, #16]
90004afc:	4413      	add	r3, r2
90004afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b02:	691b      	ldr	r3, [r3, #16]
90004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
90004b08:	78fa      	ldrb	r2, [r7, #3]
90004b0a:	1ac9      	subs	r1, r1, r3
90004b0c:	6878      	ldr	r0, [r7, #4]
90004b0e:	4613      	mov	r3, r2
90004b10:	011b      	lsls	r3, r3, #4
90004b12:	1a9b      	subs	r3, r3, r2
90004b14:	009b      	lsls	r3, r3, #2
90004b16:	4403      	add	r3, r0
90004b18:	3338      	adds	r3, #56	@ 0x38
90004b1a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004b1c:	78fa      	ldrb	r2, [r7, #3]
90004b1e:	6879      	ldr	r1, [r7, #4]
90004b20:	4613      	mov	r3, r2
90004b22:	011b      	lsls	r3, r3, #4
90004b24:	1a9b      	subs	r3, r3, r2
90004b26:	009b      	lsls	r3, r3, #2
90004b28:	440b      	add	r3, r1
90004b2a:	334d      	adds	r3, #77	@ 0x4d
90004b2c:	2201      	movs	r2, #1
90004b2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004b30:	78fa      	ldrb	r2, [r7, #3]
90004b32:	6879      	ldr	r1, [r7, #4]
90004b34:	4613      	mov	r3, r2
90004b36:	011b      	lsls	r3, r3, #4
90004b38:	1a9b      	subs	r3, r3, r2
90004b3a:	009b      	lsls	r3, r3, #2
90004b3c:	440b      	add	r3, r1
90004b3e:	3344      	adds	r3, #68	@ 0x44
90004b40:	2200      	movs	r2, #0
90004b42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004b44:	78fb      	ldrb	r3, [r7, #3]
90004b46:	015a      	lsls	r2, r3, #5
90004b48:	693b      	ldr	r3, [r7, #16]
90004b4a:	4413      	add	r3, r2
90004b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b50:	461a      	mov	r2, r3
90004b52:	2301      	movs	r3, #1
90004b54:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b56:	78fa      	ldrb	r2, [r7, #3]
90004b58:	6879      	ldr	r1, [r7, #4]
90004b5a:	4613      	mov	r3, r2
90004b5c:	011b      	lsls	r3, r3, #4
90004b5e:	1a9b      	subs	r3, r3, r2
90004b60:	009b      	lsls	r3, r3, #2
90004b62:	440b      	add	r3, r1
90004b64:	3326      	adds	r3, #38	@ 0x26
90004b66:	781b      	ldrb	r3, [r3, #0]
90004b68:	2b00      	cmp	r3, #0
90004b6a:	d00a      	beq.n	90004b82 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004b6c:	78fa      	ldrb	r2, [r7, #3]
90004b6e:	6879      	ldr	r1, [r7, #4]
90004b70:	4613      	mov	r3, r2
90004b72:	011b      	lsls	r3, r3, #4
90004b74:	1a9b      	subs	r3, r3, r2
90004b76:	009b      	lsls	r3, r3, #2
90004b78:	440b      	add	r3, r1
90004b7a:	3326      	adds	r3, #38	@ 0x26
90004b7c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b7e:	2b02      	cmp	r3, #2
90004b80:	d110      	bne.n	90004ba4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004b82:	687b      	ldr	r3, [r7, #4]
90004b84:	681b      	ldr	r3, [r3, #0]
90004b86:	78fa      	ldrb	r2, [r7, #3]
90004b88:	4611      	mov	r1, r2
90004b8a:	4618      	mov	r0, r3
90004b8c:	f007 f8fe 	bl	9000bd8c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004b90:	78fb      	ldrb	r3, [r7, #3]
90004b92:	015a      	lsls	r2, r3, #5
90004b94:	693b      	ldr	r3, [r7, #16]
90004b96:	4413      	add	r3, r2
90004b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b9c:	461a      	mov	r2, r3
90004b9e:	2310      	movs	r3, #16
90004ba0:	6093      	str	r3, [r2, #8]
90004ba2:	e03d      	b.n	90004c20 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004ba4:	78fa      	ldrb	r2, [r7, #3]
90004ba6:	6879      	ldr	r1, [r7, #4]
90004ba8:	4613      	mov	r3, r2
90004baa:	011b      	lsls	r3, r3, #4
90004bac:	1a9b      	subs	r3, r3, r2
90004bae:	009b      	lsls	r3, r3, #2
90004bb0:	440b      	add	r3, r1
90004bb2:	3326      	adds	r3, #38	@ 0x26
90004bb4:	781b      	ldrb	r3, [r3, #0]
90004bb6:	2b03      	cmp	r3, #3
90004bb8:	d00a      	beq.n	90004bd0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
90004bba:	78fa      	ldrb	r2, [r7, #3]
90004bbc:	6879      	ldr	r1, [r7, #4]
90004bbe:	4613      	mov	r3, r2
90004bc0:	011b      	lsls	r3, r3, #4
90004bc2:	1a9b      	subs	r3, r3, r2
90004bc4:	009b      	lsls	r3, r3, #2
90004bc6:	440b      	add	r3, r1
90004bc8:	3326      	adds	r3, #38	@ 0x26
90004bca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004bcc:	2b01      	cmp	r3, #1
90004bce:	d127      	bne.n	90004c20 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90004bd0:	78fb      	ldrb	r3, [r7, #3]
90004bd2:	015a      	lsls	r2, r3, #5
90004bd4:	693b      	ldr	r3, [r7, #16]
90004bd6:	4413      	add	r3, r2
90004bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004bdc:	681b      	ldr	r3, [r3, #0]
90004bde:	78fa      	ldrb	r2, [r7, #3]
90004be0:	0151      	lsls	r1, r2, #5
90004be2:	693a      	ldr	r2, [r7, #16]
90004be4:	440a      	add	r2, r1
90004be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004bea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
90004bee:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004bf0:	78fa      	ldrb	r2, [r7, #3]
90004bf2:	6879      	ldr	r1, [r7, #4]
90004bf4:	4613      	mov	r3, r2
90004bf6:	011b      	lsls	r3, r3, #4
90004bf8:	1a9b      	subs	r3, r3, r2
90004bfa:	009b      	lsls	r3, r3, #2
90004bfc:	440b      	add	r3, r1
90004bfe:	334c      	adds	r3, #76	@ 0x4c
90004c00:	2201      	movs	r2, #1
90004c02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004c04:	78fa      	ldrb	r2, [r7, #3]
90004c06:	6879      	ldr	r1, [r7, #4]
90004c08:	4613      	mov	r3, r2
90004c0a:	011b      	lsls	r3, r3, #4
90004c0c:	1a9b      	subs	r3, r3, r2
90004c0e:	009b      	lsls	r3, r3, #2
90004c10:	440b      	add	r3, r1
90004c12:	334c      	adds	r3, #76	@ 0x4c
90004c14:	781a      	ldrb	r2, [r3, #0]
90004c16:	78fb      	ldrb	r3, [r7, #3]
90004c18:	4619      	mov	r1, r3
90004c1a:	6878      	ldr	r0, [r7, #4]
90004c1c:	f7fc f9fc 	bl	90001018 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
90004c20:	687b      	ldr	r3, [r7, #4]
90004c22:	799b      	ldrb	r3, [r3, #6]
90004c24:	2b01      	cmp	r3, #1
90004c26:	d13b      	bne.n	90004ca0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004c28:	78fa      	ldrb	r2, [r7, #3]
90004c2a:	6879      	ldr	r1, [r7, #4]
90004c2c:	4613      	mov	r3, r2
90004c2e:	011b      	lsls	r3, r3, #4
90004c30:	1a9b      	subs	r3, r3, r2
90004c32:	009b      	lsls	r3, r3, #2
90004c34:	440b      	add	r3, r1
90004c36:	3338      	adds	r3, #56	@ 0x38
90004c38:	6819      	ldr	r1, [r3, #0]
90004c3a:	78fa      	ldrb	r2, [r7, #3]
90004c3c:	6878      	ldr	r0, [r7, #4]
90004c3e:	4613      	mov	r3, r2
90004c40:	011b      	lsls	r3, r3, #4
90004c42:	1a9b      	subs	r3, r3, r2
90004c44:	009b      	lsls	r3, r3, #2
90004c46:	4403      	add	r3, r0
90004c48:	3328      	adds	r3, #40	@ 0x28
90004c4a:	881b      	ldrh	r3, [r3, #0]
90004c4c:	440b      	add	r3, r1
90004c4e:	1e59      	subs	r1, r3, #1
90004c50:	78fa      	ldrb	r2, [r7, #3]
90004c52:	6878      	ldr	r0, [r7, #4]
90004c54:	4613      	mov	r3, r2
90004c56:	011b      	lsls	r3, r3, #4
90004c58:	1a9b      	subs	r3, r3, r2
90004c5a:	009b      	lsls	r3, r3, #2
90004c5c:	4403      	add	r3, r0
90004c5e:	3328      	adds	r3, #40	@ 0x28
90004c60:	881b      	ldrh	r3, [r3, #0]
90004c62:	fbb1 f3f3 	udiv	r3, r1, r3
90004c66:	f003 0301 	and.w	r3, r3, #1
90004c6a:	2b00      	cmp	r3, #0
90004c6c:	f000 8470 	beq.w	90005550 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004c70:	78fa      	ldrb	r2, [r7, #3]
90004c72:	6879      	ldr	r1, [r7, #4]
90004c74:	4613      	mov	r3, r2
90004c76:	011b      	lsls	r3, r3, #4
90004c78:	1a9b      	subs	r3, r3, r2
90004c7a:	009b      	lsls	r3, r3, #2
90004c7c:	440b      	add	r3, r1
90004c7e:	333c      	adds	r3, #60	@ 0x3c
90004c80:	781b      	ldrb	r3, [r3, #0]
90004c82:	78fa      	ldrb	r2, [r7, #3]
90004c84:	f083 0301 	eor.w	r3, r3, #1
90004c88:	b2d8      	uxtb	r0, r3
90004c8a:	6879      	ldr	r1, [r7, #4]
90004c8c:	4613      	mov	r3, r2
90004c8e:	011b      	lsls	r3, r3, #4
90004c90:	1a9b      	subs	r3, r3, r2
90004c92:	009b      	lsls	r3, r3, #2
90004c94:	440b      	add	r3, r1
90004c96:	333c      	adds	r3, #60	@ 0x3c
90004c98:	4602      	mov	r2, r0
90004c9a:	701a      	strb	r2, [r3, #0]
90004c9c:	f000 bc58 	b.w	90005550 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004ca0:	78fa      	ldrb	r2, [r7, #3]
90004ca2:	6879      	ldr	r1, [r7, #4]
90004ca4:	4613      	mov	r3, r2
90004ca6:	011b      	lsls	r3, r3, #4
90004ca8:	1a9b      	subs	r3, r3, r2
90004caa:	009b      	lsls	r3, r3, #2
90004cac:	440b      	add	r3, r1
90004cae:	333c      	adds	r3, #60	@ 0x3c
90004cb0:	781b      	ldrb	r3, [r3, #0]
90004cb2:	78fa      	ldrb	r2, [r7, #3]
90004cb4:	f083 0301 	eor.w	r3, r3, #1
90004cb8:	b2d8      	uxtb	r0, r3
90004cba:	6879      	ldr	r1, [r7, #4]
90004cbc:	4613      	mov	r3, r2
90004cbe:	011b      	lsls	r3, r3, #4
90004cc0:	1a9b      	subs	r3, r3, r2
90004cc2:	009b      	lsls	r3, r3, #2
90004cc4:	440b      	add	r3, r1
90004cc6:	333c      	adds	r3, #60	@ 0x3c
90004cc8:	4602      	mov	r2, r0
90004cca:	701a      	strb	r2, [r3, #0]
90004ccc:	f000 bc40 	b.w	90005550 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004cd0:	687b      	ldr	r3, [r7, #4]
90004cd2:	681b      	ldr	r3, [r3, #0]
90004cd4:	78fa      	ldrb	r2, [r7, #3]
90004cd6:	4611      	mov	r1, r2
90004cd8:	4618      	mov	r0, r3
90004cda:	f006 ffda 	bl	9000bc92 <USB_ReadChInterrupts>
90004cde:	4603      	mov	r3, r0
90004ce0:	f003 0320 	and.w	r3, r3, #32
90004ce4:	2b20      	cmp	r3, #32
90004ce6:	d131      	bne.n	90004d4c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004ce8:	78fb      	ldrb	r3, [r7, #3]
90004cea:	015a      	lsls	r2, r3, #5
90004cec:	693b      	ldr	r3, [r7, #16]
90004cee:	4413      	add	r3, r2
90004cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cf4:	461a      	mov	r2, r3
90004cf6:	2320      	movs	r3, #32
90004cf8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
90004cfa:	78fa      	ldrb	r2, [r7, #3]
90004cfc:	6879      	ldr	r1, [r7, #4]
90004cfe:	4613      	mov	r3, r2
90004d00:	011b      	lsls	r3, r3, #4
90004d02:	1a9b      	subs	r3, r3, r2
90004d04:	009b      	lsls	r3, r3, #2
90004d06:	440b      	add	r3, r1
90004d08:	331a      	adds	r3, #26
90004d0a:	781b      	ldrb	r3, [r3, #0]
90004d0c:	2b01      	cmp	r3, #1
90004d0e:	f040 841f 	bne.w	90005550 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
90004d12:	78fa      	ldrb	r2, [r7, #3]
90004d14:	6879      	ldr	r1, [r7, #4]
90004d16:	4613      	mov	r3, r2
90004d18:	011b      	lsls	r3, r3, #4
90004d1a:	1a9b      	subs	r3, r3, r2
90004d1c:	009b      	lsls	r3, r3, #2
90004d1e:	440b      	add	r3, r1
90004d20:	331b      	adds	r3, #27
90004d22:	2201      	movs	r2, #1
90004d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004d26:	78fa      	ldrb	r2, [r7, #3]
90004d28:	6879      	ldr	r1, [r7, #4]
90004d2a:	4613      	mov	r3, r2
90004d2c:	011b      	lsls	r3, r3, #4
90004d2e:	1a9b      	subs	r3, r3, r2
90004d30:	009b      	lsls	r3, r3, #2
90004d32:	440b      	add	r3, r1
90004d34:	334d      	adds	r3, #77	@ 0x4d
90004d36:	2203      	movs	r2, #3
90004d38:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d3a:	687b      	ldr	r3, [r7, #4]
90004d3c:	681b      	ldr	r3, [r3, #0]
90004d3e:	78fa      	ldrb	r2, [r7, #3]
90004d40:	4611      	mov	r1, r2
90004d42:	4618      	mov	r0, r3
90004d44:	f007 f822 	bl	9000bd8c <USB_HC_Halt>
90004d48:	f000 bc02 	b.w	90005550 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004d4c:	687b      	ldr	r3, [r7, #4]
90004d4e:	681b      	ldr	r3, [r3, #0]
90004d50:	78fa      	ldrb	r2, [r7, #3]
90004d52:	4611      	mov	r1, r2
90004d54:	4618      	mov	r0, r3
90004d56:	f006 ff9c 	bl	9000bc92 <USB_ReadChInterrupts>
90004d5a:	4603      	mov	r3, r0
90004d5c:	f003 0302 	and.w	r3, r3, #2
90004d60:	2b02      	cmp	r3, #2
90004d62:	f040 8305 	bne.w	90005370 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90004d66:	78fb      	ldrb	r3, [r7, #3]
90004d68:	015a      	lsls	r2, r3, #5
90004d6a:	693b      	ldr	r3, [r7, #16]
90004d6c:	4413      	add	r3, r2
90004d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d72:	461a      	mov	r2, r3
90004d74:	2302      	movs	r3, #2
90004d76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004d78:	78fa      	ldrb	r2, [r7, #3]
90004d7a:	6879      	ldr	r1, [r7, #4]
90004d7c:	4613      	mov	r3, r2
90004d7e:	011b      	lsls	r3, r3, #4
90004d80:	1a9b      	subs	r3, r3, r2
90004d82:	009b      	lsls	r3, r3, #2
90004d84:	440b      	add	r3, r1
90004d86:	334d      	adds	r3, #77	@ 0x4d
90004d88:	781b      	ldrb	r3, [r3, #0]
90004d8a:	2b01      	cmp	r3, #1
90004d8c:	d114      	bne.n	90004db8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004d8e:	78fa      	ldrb	r2, [r7, #3]
90004d90:	6879      	ldr	r1, [r7, #4]
90004d92:	4613      	mov	r3, r2
90004d94:	011b      	lsls	r3, r3, #4
90004d96:	1a9b      	subs	r3, r3, r2
90004d98:	009b      	lsls	r3, r3, #2
90004d9a:	440b      	add	r3, r1
90004d9c:	334d      	adds	r3, #77	@ 0x4d
90004d9e:	2202      	movs	r2, #2
90004da0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004da2:	78fa      	ldrb	r2, [r7, #3]
90004da4:	6879      	ldr	r1, [r7, #4]
90004da6:	4613      	mov	r3, r2
90004da8:	011b      	lsls	r3, r3, #4
90004daa:	1a9b      	subs	r3, r3, r2
90004dac:	009b      	lsls	r3, r3, #2
90004dae:	440b      	add	r3, r1
90004db0:	334c      	adds	r3, #76	@ 0x4c
90004db2:	2201      	movs	r2, #1
90004db4:	701a      	strb	r2, [r3, #0]
90004db6:	e2cc      	b.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90004db8:	78fa      	ldrb	r2, [r7, #3]
90004dba:	6879      	ldr	r1, [r7, #4]
90004dbc:	4613      	mov	r3, r2
90004dbe:	011b      	lsls	r3, r3, #4
90004dc0:	1a9b      	subs	r3, r3, r2
90004dc2:	009b      	lsls	r3, r3, #2
90004dc4:	440b      	add	r3, r1
90004dc6:	334d      	adds	r3, #77	@ 0x4d
90004dc8:	781b      	ldrb	r3, [r3, #0]
90004dca:	2b06      	cmp	r3, #6
90004dcc:	d114      	bne.n	90004df8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004dce:	78fa      	ldrb	r2, [r7, #3]
90004dd0:	6879      	ldr	r1, [r7, #4]
90004dd2:	4613      	mov	r3, r2
90004dd4:	011b      	lsls	r3, r3, #4
90004dd6:	1a9b      	subs	r3, r3, r2
90004dd8:	009b      	lsls	r3, r3, #2
90004dda:	440b      	add	r3, r1
90004ddc:	334d      	adds	r3, #77	@ 0x4d
90004dde:	2202      	movs	r2, #2
90004de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
90004de2:	78fa      	ldrb	r2, [r7, #3]
90004de4:	6879      	ldr	r1, [r7, #4]
90004de6:	4613      	mov	r3, r2
90004de8:	011b      	lsls	r3, r3, #4
90004dea:	1a9b      	subs	r3, r3, r2
90004dec:	009b      	lsls	r3, r3, #2
90004dee:	440b      	add	r3, r1
90004df0:	334c      	adds	r3, #76	@ 0x4c
90004df2:	2205      	movs	r2, #5
90004df4:	701a      	strb	r2, [r3, #0]
90004df6:	e2ac      	b.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004df8:	78fa      	ldrb	r2, [r7, #3]
90004dfa:	6879      	ldr	r1, [r7, #4]
90004dfc:	4613      	mov	r3, r2
90004dfe:	011b      	lsls	r3, r3, #4
90004e00:	1a9b      	subs	r3, r3, r2
90004e02:	009b      	lsls	r3, r3, #2
90004e04:	440b      	add	r3, r1
90004e06:	334d      	adds	r3, #77	@ 0x4d
90004e08:	781b      	ldrb	r3, [r3, #0]
90004e0a:	2b07      	cmp	r3, #7
90004e0c:	d00b      	beq.n	90004e26 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90004e0e:	78fa      	ldrb	r2, [r7, #3]
90004e10:	6879      	ldr	r1, [r7, #4]
90004e12:	4613      	mov	r3, r2
90004e14:	011b      	lsls	r3, r3, #4
90004e16:	1a9b      	subs	r3, r3, r2
90004e18:	009b      	lsls	r3, r3, #2
90004e1a:	440b      	add	r3, r1
90004e1c:	334d      	adds	r3, #77	@ 0x4d
90004e1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004e20:	2b09      	cmp	r3, #9
90004e22:	f040 80a6 	bne.w	90004f72 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004e26:	78fa      	ldrb	r2, [r7, #3]
90004e28:	6879      	ldr	r1, [r7, #4]
90004e2a:	4613      	mov	r3, r2
90004e2c:	011b      	lsls	r3, r3, #4
90004e2e:	1a9b      	subs	r3, r3, r2
90004e30:	009b      	lsls	r3, r3, #2
90004e32:	440b      	add	r3, r1
90004e34:	334d      	adds	r3, #77	@ 0x4d
90004e36:	2202      	movs	r2, #2
90004e38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004e3a:	78fa      	ldrb	r2, [r7, #3]
90004e3c:	6879      	ldr	r1, [r7, #4]
90004e3e:	4613      	mov	r3, r2
90004e40:	011b      	lsls	r3, r3, #4
90004e42:	1a9b      	subs	r3, r3, r2
90004e44:	009b      	lsls	r3, r3, #2
90004e46:	440b      	add	r3, r1
90004e48:	3344      	adds	r3, #68	@ 0x44
90004e4a:	681b      	ldr	r3, [r3, #0]
90004e4c:	1c59      	adds	r1, r3, #1
90004e4e:	6878      	ldr	r0, [r7, #4]
90004e50:	4613      	mov	r3, r2
90004e52:	011b      	lsls	r3, r3, #4
90004e54:	1a9b      	subs	r3, r3, r2
90004e56:	009b      	lsls	r3, r3, #2
90004e58:	4403      	add	r3, r0
90004e5a:	3344      	adds	r3, #68	@ 0x44
90004e5c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004e5e:	78fa      	ldrb	r2, [r7, #3]
90004e60:	6879      	ldr	r1, [r7, #4]
90004e62:	4613      	mov	r3, r2
90004e64:	011b      	lsls	r3, r3, #4
90004e66:	1a9b      	subs	r3, r3, r2
90004e68:	009b      	lsls	r3, r3, #2
90004e6a:	440b      	add	r3, r1
90004e6c:	3344      	adds	r3, #68	@ 0x44
90004e6e:	681b      	ldr	r3, [r3, #0]
90004e70:	2b02      	cmp	r3, #2
90004e72:	d943      	bls.n	90004efc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004e74:	78fa      	ldrb	r2, [r7, #3]
90004e76:	6879      	ldr	r1, [r7, #4]
90004e78:	4613      	mov	r3, r2
90004e7a:	011b      	lsls	r3, r3, #4
90004e7c:	1a9b      	subs	r3, r3, r2
90004e7e:	009b      	lsls	r3, r3, #2
90004e80:	440b      	add	r3, r1
90004e82:	3344      	adds	r3, #68	@ 0x44
90004e84:	2200      	movs	r2, #0
90004e86:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90004e88:	78fa      	ldrb	r2, [r7, #3]
90004e8a:	6879      	ldr	r1, [r7, #4]
90004e8c:	4613      	mov	r3, r2
90004e8e:	011b      	lsls	r3, r3, #4
90004e90:	1a9b      	subs	r3, r3, r2
90004e92:	009b      	lsls	r3, r3, #2
90004e94:	440b      	add	r3, r1
90004e96:	331a      	adds	r3, #26
90004e98:	781b      	ldrb	r3, [r3, #0]
90004e9a:	2b01      	cmp	r3, #1
90004e9c:	d123      	bne.n	90004ee6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90004e9e:	78fa      	ldrb	r2, [r7, #3]
90004ea0:	6879      	ldr	r1, [r7, #4]
90004ea2:	4613      	mov	r3, r2
90004ea4:	011b      	lsls	r3, r3, #4
90004ea6:	1a9b      	subs	r3, r3, r2
90004ea8:	009b      	lsls	r3, r3, #2
90004eaa:	440b      	add	r3, r1
90004eac:	331b      	adds	r3, #27
90004eae:	2200      	movs	r2, #0
90004eb0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
90004eb2:	78fa      	ldrb	r2, [r7, #3]
90004eb4:	6879      	ldr	r1, [r7, #4]
90004eb6:	4613      	mov	r3, r2
90004eb8:	011b      	lsls	r3, r3, #4
90004eba:	1a9b      	subs	r3, r3, r2
90004ebc:	009b      	lsls	r3, r3, #2
90004ebe:	440b      	add	r3, r1
90004ec0:	331c      	adds	r3, #28
90004ec2:	2200      	movs	r2, #0
90004ec4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004ec6:	78fb      	ldrb	r3, [r7, #3]
90004ec8:	015a      	lsls	r2, r3, #5
90004eca:	693b      	ldr	r3, [r7, #16]
90004ecc:	4413      	add	r3, r2
90004ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ed2:	685b      	ldr	r3, [r3, #4]
90004ed4:	78fa      	ldrb	r2, [r7, #3]
90004ed6:	0151      	lsls	r1, r2, #5
90004ed8:	693a      	ldr	r2, [r7, #16]
90004eda:	440a      	add	r2, r1
90004edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004ee4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90004ee6:	78fa      	ldrb	r2, [r7, #3]
90004ee8:	6879      	ldr	r1, [r7, #4]
90004eea:	4613      	mov	r3, r2
90004eec:	011b      	lsls	r3, r3, #4
90004eee:	1a9b      	subs	r3, r3, r2
90004ef0:	009b      	lsls	r3, r3, #2
90004ef2:	440b      	add	r3, r1
90004ef4:	334c      	adds	r3, #76	@ 0x4c
90004ef6:	2204      	movs	r2, #4
90004ef8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004efa:	e229      	b.n	90005350 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004efc:	78fa      	ldrb	r2, [r7, #3]
90004efe:	6879      	ldr	r1, [r7, #4]
90004f00:	4613      	mov	r3, r2
90004f02:	011b      	lsls	r3, r3, #4
90004f04:	1a9b      	subs	r3, r3, r2
90004f06:	009b      	lsls	r3, r3, #2
90004f08:	440b      	add	r3, r1
90004f0a:	334c      	adds	r3, #76	@ 0x4c
90004f0c:	2202      	movs	r2, #2
90004f0e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004f10:	78fa      	ldrb	r2, [r7, #3]
90004f12:	6879      	ldr	r1, [r7, #4]
90004f14:	4613      	mov	r3, r2
90004f16:	011b      	lsls	r3, r3, #4
90004f18:	1a9b      	subs	r3, r3, r2
90004f1a:	009b      	lsls	r3, r3, #2
90004f1c:	440b      	add	r3, r1
90004f1e:	3326      	adds	r3, #38	@ 0x26
90004f20:	781b      	ldrb	r3, [r3, #0]
90004f22:	2b00      	cmp	r3, #0
90004f24:	d00b      	beq.n	90004f3e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004f26:	78fa      	ldrb	r2, [r7, #3]
90004f28:	6879      	ldr	r1, [r7, #4]
90004f2a:	4613      	mov	r3, r2
90004f2c:	011b      	lsls	r3, r3, #4
90004f2e:	1a9b      	subs	r3, r3, r2
90004f30:	009b      	lsls	r3, r3, #2
90004f32:	440b      	add	r3, r1
90004f34:	3326      	adds	r3, #38	@ 0x26
90004f36:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004f38:	2b02      	cmp	r3, #2
90004f3a:	f040 8209 	bne.w	90005350 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004f3e:	78fb      	ldrb	r3, [r7, #3]
90004f40:	015a      	lsls	r2, r3, #5
90004f42:	693b      	ldr	r3, [r7, #16]
90004f44:	4413      	add	r3, r2
90004f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f4a:	681b      	ldr	r3, [r3, #0]
90004f4c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004f4e:	68fb      	ldr	r3, [r7, #12]
90004f50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004f54:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004f56:	68fb      	ldr	r3, [r7, #12]
90004f58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004f5c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004f5e:	78fb      	ldrb	r3, [r7, #3]
90004f60:	015a      	lsls	r2, r3, #5
90004f62:	693b      	ldr	r3, [r7, #16]
90004f64:	4413      	add	r3, r2
90004f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f6a:	461a      	mov	r2, r3
90004f6c:	68fb      	ldr	r3, [r7, #12]
90004f6e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004f70:	e1ee      	b.n	90005350 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004f72:	78fa      	ldrb	r2, [r7, #3]
90004f74:	6879      	ldr	r1, [r7, #4]
90004f76:	4613      	mov	r3, r2
90004f78:	011b      	lsls	r3, r3, #4
90004f7a:	1a9b      	subs	r3, r3, r2
90004f7c:	009b      	lsls	r3, r3, #2
90004f7e:	440b      	add	r3, r1
90004f80:	334d      	adds	r3, #77	@ 0x4d
90004f82:	781b      	ldrb	r3, [r3, #0]
90004f84:	2b05      	cmp	r3, #5
90004f86:	f040 80c8 	bne.w	9000511a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004f8a:	78fa      	ldrb	r2, [r7, #3]
90004f8c:	6879      	ldr	r1, [r7, #4]
90004f8e:	4613      	mov	r3, r2
90004f90:	011b      	lsls	r3, r3, #4
90004f92:	1a9b      	subs	r3, r3, r2
90004f94:	009b      	lsls	r3, r3, #2
90004f96:	440b      	add	r3, r1
90004f98:	334d      	adds	r3, #77	@ 0x4d
90004f9a:	2202      	movs	r2, #2
90004f9c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004f9e:	78fa      	ldrb	r2, [r7, #3]
90004fa0:	6879      	ldr	r1, [r7, #4]
90004fa2:	4613      	mov	r3, r2
90004fa4:	011b      	lsls	r3, r3, #4
90004fa6:	1a9b      	subs	r3, r3, r2
90004fa8:	009b      	lsls	r3, r3, #2
90004faa:	440b      	add	r3, r1
90004fac:	331b      	adds	r3, #27
90004fae:	781b      	ldrb	r3, [r3, #0]
90004fb0:	2b01      	cmp	r3, #1
90004fb2:	f040 81ce 	bne.w	90005352 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004fb6:	78fa      	ldrb	r2, [r7, #3]
90004fb8:	6879      	ldr	r1, [r7, #4]
90004fba:	4613      	mov	r3, r2
90004fbc:	011b      	lsls	r3, r3, #4
90004fbe:	1a9b      	subs	r3, r3, r2
90004fc0:	009b      	lsls	r3, r3, #2
90004fc2:	440b      	add	r3, r1
90004fc4:	3326      	adds	r3, #38	@ 0x26
90004fc6:	781b      	ldrb	r3, [r3, #0]
90004fc8:	2b03      	cmp	r3, #3
90004fca:	d16b      	bne.n	900050a4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004fcc:	78fa      	ldrb	r2, [r7, #3]
90004fce:	6879      	ldr	r1, [r7, #4]
90004fd0:	4613      	mov	r3, r2
90004fd2:	011b      	lsls	r3, r3, #4
90004fd4:	1a9b      	subs	r3, r3, r2
90004fd6:	009b      	lsls	r3, r3, #2
90004fd8:	440b      	add	r3, r1
90004fda:	3348      	adds	r3, #72	@ 0x48
90004fdc:	681b      	ldr	r3, [r3, #0]
90004fde:	1c59      	adds	r1, r3, #1
90004fe0:	6878      	ldr	r0, [r7, #4]
90004fe2:	4613      	mov	r3, r2
90004fe4:	011b      	lsls	r3, r3, #4
90004fe6:	1a9b      	subs	r3, r3, r2
90004fe8:	009b      	lsls	r3, r3, #2
90004fea:	4403      	add	r3, r0
90004fec:	3348      	adds	r3, #72	@ 0x48
90004fee:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
90004ff0:	78fa      	ldrb	r2, [r7, #3]
90004ff2:	6879      	ldr	r1, [r7, #4]
90004ff4:	4613      	mov	r3, r2
90004ff6:	011b      	lsls	r3, r3, #4
90004ff8:	1a9b      	subs	r3, r3, r2
90004ffa:	009b      	lsls	r3, r3, #2
90004ffc:	440b      	add	r3, r1
90004ffe:	3348      	adds	r3, #72	@ 0x48
90005000:	681b      	ldr	r3, [r3, #0]
90005002:	2b02      	cmp	r3, #2
90005004:	d943      	bls.n	9000508e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90005006:	78fa      	ldrb	r2, [r7, #3]
90005008:	6879      	ldr	r1, [r7, #4]
9000500a:	4613      	mov	r3, r2
9000500c:	011b      	lsls	r3, r3, #4
9000500e:	1a9b      	subs	r3, r3, r2
90005010:	009b      	lsls	r3, r3, #2
90005012:	440b      	add	r3, r1
90005014:	3348      	adds	r3, #72	@ 0x48
90005016:	2200      	movs	r2, #0
90005018:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
9000501a:	78fa      	ldrb	r2, [r7, #3]
9000501c:	6879      	ldr	r1, [r7, #4]
9000501e:	4613      	mov	r3, r2
90005020:	011b      	lsls	r3, r3, #4
90005022:	1a9b      	subs	r3, r3, r2
90005024:	009b      	lsls	r3, r3, #2
90005026:	440b      	add	r3, r1
90005028:	331b      	adds	r3, #27
9000502a:	2200      	movs	r2, #0
9000502c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
9000502e:	78fa      	ldrb	r2, [r7, #3]
90005030:	6879      	ldr	r1, [r7, #4]
90005032:	4613      	mov	r3, r2
90005034:	011b      	lsls	r3, r3, #4
90005036:	1a9b      	subs	r3, r3, r2
90005038:	009b      	lsls	r3, r3, #2
9000503a:	440b      	add	r3, r1
9000503c:	3344      	adds	r3, #68	@ 0x44
9000503e:	681b      	ldr	r3, [r3, #0]
90005040:	2b02      	cmp	r3, #2
90005042:	d809      	bhi.n	90005058 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90005044:	78fa      	ldrb	r2, [r7, #3]
90005046:	6879      	ldr	r1, [r7, #4]
90005048:	4613      	mov	r3, r2
9000504a:	011b      	lsls	r3, r3, #4
9000504c:	1a9b      	subs	r3, r3, r2
9000504e:	009b      	lsls	r3, r3, #2
90005050:	440b      	add	r3, r1
90005052:	331c      	adds	r3, #28
90005054:	2201      	movs	r2, #1
90005056:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005058:	78fb      	ldrb	r3, [r7, #3]
9000505a:	015a      	lsls	r2, r3, #5
9000505c:	693b      	ldr	r3, [r7, #16]
9000505e:	4413      	add	r3, r2
90005060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005064:	685b      	ldr	r3, [r3, #4]
90005066:	78fa      	ldrb	r2, [r7, #3]
90005068:	0151      	lsls	r1, r2, #5
9000506a:	693a      	ldr	r2, [r7, #16]
9000506c:	440a      	add	r2, r1
9000506e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005076:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90005078:	78fa      	ldrb	r2, [r7, #3]
9000507a:	6879      	ldr	r1, [r7, #4]
9000507c:	4613      	mov	r3, r2
9000507e:	011b      	lsls	r3, r3, #4
90005080:	1a9b      	subs	r3, r3, r2
90005082:	009b      	lsls	r3, r3, #2
90005084:	440b      	add	r3, r1
90005086:	334c      	adds	r3, #76	@ 0x4c
90005088:	2204      	movs	r2, #4
9000508a:	701a      	strb	r2, [r3, #0]
9000508c:	e014      	b.n	900050b8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000508e:	78fa      	ldrb	r2, [r7, #3]
90005090:	6879      	ldr	r1, [r7, #4]
90005092:	4613      	mov	r3, r2
90005094:	011b      	lsls	r3, r3, #4
90005096:	1a9b      	subs	r3, r3, r2
90005098:	009b      	lsls	r3, r3, #2
9000509a:	440b      	add	r3, r1
9000509c:	334c      	adds	r3, #76	@ 0x4c
9000509e:	2202      	movs	r2, #2
900050a0:	701a      	strb	r2, [r3, #0]
900050a2:	e009      	b.n	900050b8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
900050a4:	78fa      	ldrb	r2, [r7, #3]
900050a6:	6879      	ldr	r1, [r7, #4]
900050a8:	4613      	mov	r3, r2
900050aa:	011b      	lsls	r3, r3, #4
900050ac:	1a9b      	subs	r3, r3, r2
900050ae:	009b      	lsls	r3, r3, #2
900050b0:	440b      	add	r3, r1
900050b2:	334c      	adds	r3, #76	@ 0x4c
900050b4:	2202      	movs	r2, #2
900050b6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900050b8:	78fa      	ldrb	r2, [r7, #3]
900050ba:	6879      	ldr	r1, [r7, #4]
900050bc:	4613      	mov	r3, r2
900050be:	011b      	lsls	r3, r3, #4
900050c0:	1a9b      	subs	r3, r3, r2
900050c2:	009b      	lsls	r3, r3, #2
900050c4:	440b      	add	r3, r1
900050c6:	3326      	adds	r3, #38	@ 0x26
900050c8:	781b      	ldrb	r3, [r3, #0]
900050ca:	2b00      	cmp	r3, #0
900050cc:	d00b      	beq.n	900050e6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900050ce:	78fa      	ldrb	r2, [r7, #3]
900050d0:	6879      	ldr	r1, [r7, #4]
900050d2:	4613      	mov	r3, r2
900050d4:	011b      	lsls	r3, r3, #4
900050d6:	1a9b      	subs	r3, r3, r2
900050d8:	009b      	lsls	r3, r3, #2
900050da:	440b      	add	r3, r1
900050dc:	3326      	adds	r3, #38	@ 0x26
900050de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900050e0:	2b02      	cmp	r3, #2
900050e2:	f040 8136 	bne.w	90005352 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900050e6:	78fb      	ldrb	r3, [r7, #3]
900050e8:	015a      	lsls	r2, r3, #5
900050ea:	693b      	ldr	r3, [r7, #16]
900050ec:	4413      	add	r3, r2
900050ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050f2:	681b      	ldr	r3, [r3, #0]
900050f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900050f6:	68fb      	ldr	r3, [r7, #12]
900050f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900050fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900050fe:	68fb      	ldr	r3, [r7, #12]
90005100:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005104:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90005106:	78fb      	ldrb	r3, [r7, #3]
90005108:	015a      	lsls	r2, r3, #5
9000510a:	693b      	ldr	r3, [r7, #16]
9000510c:	4413      	add	r3, r2
9000510e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005112:	461a      	mov	r2, r3
90005114:	68fb      	ldr	r3, [r7, #12]
90005116:	6013      	str	r3, [r2, #0]
90005118:	e11b      	b.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
9000511a:	78fa      	ldrb	r2, [r7, #3]
9000511c:	6879      	ldr	r1, [r7, #4]
9000511e:	4613      	mov	r3, r2
90005120:	011b      	lsls	r3, r3, #4
90005122:	1a9b      	subs	r3, r3, r2
90005124:	009b      	lsls	r3, r3, #2
90005126:	440b      	add	r3, r1
90005128:	334d      	adds	r3, #77	@ 0x4d
9000512a:	781b      	ldrb	r3, [r3, #0]
9000512c:	2b03      	cmp	r3, #3
9000512e:	f040 8081 	bne.w	90005234 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005132:	78fa      	ldrb	r2, [r7, #3]
90005134:	6879      	ldr	r1, [r7, #4]
90005136:	4613      	mov	r3, r2
90005138:	011b      	lsls	r3, r3, #4
9000513a:	1a9b      	subs	r3, r3, r2
9000513c:	009b      	lsls	r3, r3, #2
9000513e:	440b      	add	r3, r1
90005140:	334d      	adds	r3, #77	@ 0x4d
90005142:	2202      	movs	r2, #2
90005144:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005146:	78fa      	ldrb	r2, [r7, #3]
90005148:	6879      	ldr	r1, [r7, #4]
9000514a:	4613      	mov	r3, r2
9000514c:	011b      	lsls	r3, r3, #4
9000514e:	1a9b      	subs	r3, r3, r2
90005150:	009b      	lsls	r3, r3, #2
90005152:	440b      	add	r3, r1
90005154:	331b      	adds	r3, #27
90005156:	781b      	ldrb	r3, [r3, #0]
90005158:	2b01      	cmp	r3, #1
9000515a:	f040 80fa 	bne.w	90005352 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000515e:	78fa      	ldrb	r2, [r7, #3]
90005160:	6879      	ldr	r1, [r7, #4]
90005162:	4613      	mov	r3, r2
90005164:	011b      	lsls	r3, r3, #4
90005166:	1a9b      	subs	r3, r3, r2
90005168:	009b      	lsls	r3, r3, #2
9000516a:	440b      	add	r3, r1
9000516c:	334c      	adds	r3, #76	@ 0x4c
9000516e:	2202      	movs	r2, #2
90005170:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90005172:	78fb      	ldrb	r3, [r7, #3]
90005174:	015a      	lsls	r2, r3, #5
90005176:	693b      	ldr	r3, [r7, #16]
90005178:	4413      	add	r3, r2
9000517a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000517e:	685b      	ldr	r3, [r3, #4]
90005180:	78fa      	ldrb	r2, [r7, #3]
90005182:	0151      	lsls	r1, r2, #5
90005184:	693a      	ldr	r2, [r7, #16]
90005186:	440a      	add	r2, r1
90005188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000518c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90005190:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90005192:	78fb      	ldrb	r3, [r7, #3]
90005194:	015a      	lsls	r2, r3, #5
90005196:	693b      	ldr	r3, [r7, #16]
90005198:	4413      	add	r3, r2
9000519a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000519e:	68db      	ldr	r3, [r3, #12]
900051a0:	78fa      	ldrb	r2, [r7, #3]
900051a2:	0151      	lsls	r1, r2, #5
900051a4:	693a      	ldr	r2, [r7, #16]
900051a6:	440a      	add	r2, r1
900051a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900051ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
900051b0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
900051b2:	78fb      	ldrb	r3, [r7, #3]
900051b4:	015a      	lsls	r2, r3, #5
900051b6:	693b      	ldr	r3, [r7, #16]
900051b8:	4413      	add	r3, r2
900051ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051be:	68db      	ldr	r3, [r3, #12]
900051c0:	78fa      	ldrb	r2, [r7, #3]
900051c2:	0151      	lsls	r1, r2, #5
900051c4:	693a      	ldr	r2, [r7, #16]
900051c6:	440a      	add	r2, r1
900051c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900051cc:	f023 0320 	bic.w	r3, r3, #32
900051d0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900051d2:	78fa      	ldrb	r2, [r7, #3]
900051d4:	6879      	ldr	r1, [r7, #4]
900051d6:	4613      	mov	r3, r2
900051d8:	011b      	lsls	r3, r3, #4
900051da:	1a9b      	subs	r3, r3, r2
900051dc:	009b      	lsls	r3, r3, #2
900051de:	440b      	add	r3, r1
900051e0:	3326      	adds	r3, #38	@ 0x26
900051e2:	781b      	ldrb	r3, [r3, #0]
900051e4:	2b00      	cmp	r3, #0
900051e6:	d00b      	beq.n	90005200 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900051e8:	78fa      	ldrb	r2, [r7, #3]
900051ea:	6879      	ldr	r1, [r7, #4]
900051ec:	4613      	mov	r3, r2
900051ee:	011b      	lsls	r3, r3, #4
900051f0:	1a9b      	subs	r3, r3, r2
900051f2:	009b      	lsls	r3, r3, #2
900051f4:	440b      	add	r3, r1
900051f6:	3326      	adds	r3, #38	@ 0x26
900051f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900051fa:	2b02      	cmp	r3, #2
900051fc:	f040 80a9 	bne.w	90005352 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90005200:	78fb      	ldrb	r3, [r7, #3]
90005202:	015a      	lsls	r2, r3, #5
90005204:	693b      	ldr	r3, [r7, #16]
90005206:	4413      	add	r3, r2
90005208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000520c:	681b      	ldr	r3, [r3, #0]
9000520e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005210:	68fb      	ldr	r3, [r7, #12]
90005212:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005216:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90005218:	68fb      	ldr	r3, [r7, #12]
9000521a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000521e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90005220:	78fb      	ldrb	r3, [r7, #3]
90005222:	015a      	lsls	r2, r3, #5
90005224:	693b      	ldr	r3, [r7, #16]
90005226:	4413      	add	r3, r2
90005228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000522c:	461a      	mov	r2, r3
9000522e:	68fb      	ldr	r3, [r7, #12]
90005230:	6013      	str	r3, [r2, #0]
90005232:	e08e      	b.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005234:	78fa      	ldrb	r2, [r7, #3]
90005236:	6879      	ldr	r1, [r7, #4]
90005238:	4613      	mov	r3, r2
9000523a:	011b      	lsls	r3, r3, #4
9000523c:	1a9b      	subs	r3, r3, r2
9000523e:	009b      	lsls	r3, r3, #2
90005240:	440b      	add	r3, r1
90005242:	334d      	adds	r3, #77	@ 0x4d
90005244:	781b      	ldrb	r3, [r3, #0]
90005246:	2b04      	cmp	r3, #4
90005248:	d143      	bne.n	900052d2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000524a:	78fa      	ldrb	r2, [r7, #3]
9000524c:	6879      	ldr	r1, [r7, #4]
9000524e:	4613      	mov	r3, r2
90005250:	011b      	lsls	r3, r3, #4
90005252:	1a9b      	subs	r3, r3, r2
90005254:	009b      	lsls	r3, r3, #2
90005256:	440b      	add	r3, r1
90005258:	334d      	adds	r3, #77	@ 0x4d
9000525a:	2202      	movs	r2, #2
9000525c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000525e:	78fa      	ldrb	r2, [r7, #3]
90005260:	6879      	ldr	r1, [r7, #4]
90005262:	4613      	mov	r3, r2
90005264:	011b      	lsls	r3, r3, #4
90005266:	1a9b      	subs	r3, r3, r2
90005268:	009b      	lsls	r3, r3, #2
9000526a:	440b      	add	r3, r1
9000526c:	334c      	adds	r3, #76	@ 0x4c
9000526e:	2202      	movs	r2, #2
90005270:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005272:	78fa      	ldrb	r2, [r7, #3]
90005274:	6879      	ldr	r1, [r7, #4]
90005276:	4613      	mov	r3, r2
90005278:	011b      	lsls	r3, r3, #4
9000527a:	1a9b      	subs	r3, r3, r2
9000527c:	009b      	lsls	r3, r3, #2
9000527e:	440b      	add	r3, r1
90005280:	3326      	adds	r3, #38	@ 0x26
90005282:	781b      	ldrb	r3, [r3, #0]
90005284:	2b00      	cmp	r3, #0
90005286:	d00a      	beq.n	9000529e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90005288:	78fa      	ldrb	r2, [r7, #3]
9000528a:	6879      	ldr	r1, [r7, #4]
9000528c:	4613      	mov	r3, r2
9000528e:	011b      	lsls	r3, r3, #4
90005290:	1a9b      	subs	r3, r3, r2
90005292:	009b      	lsls	r3, r3, #2
90005294:	440b      	add	r3, r1
90005296:	3326      	adds	r3, #38	@ 0x26
90005298:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000529a:	2b02      	cmp	r3, #2
9000529c:	d159      	bne.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000529e:	78fb      	ldrb	r3, [r7, #3]
900052a0:	015a      	lsls	r2, r3, #5
900052a2:	693b      	ldr	r3, [r7, #16]
900052a4:	4413      	add	r3, r2
900052a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900052aa:	681b      	ldr	r3, [r3, #0]
900052ac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900052ae:	68fb      	ldr	r3, [r7, #12]
900052b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900052b4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900052b6:	68fb      	ldr	r3, [r7, #12]
900052b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900052bc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900052be:	78fb      	ldrb	r3, [r7, #3]
900052c0:	015a      	lsls	r2, r3, #5
900052c2:	693b      	ldr	r3, [r7, #16]
900052c4:	4413      	add	r3, r2
900052c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900052ca:	461a      	mov	r2, r3
900052cc:	68fb      	ldr	r3, [r7, #12]
900052ce:	6013      	str	r3, [r2, #0]
900052d0:	e03f      	b.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
900052d2:	78fa      	ldrb	r2, [r7, #3]
900052d4:	6879      	ldr	r1, [r7, #4]
900052d6:	4613      	mov	r3, r2
900052d8:	011b      	lsls	r3, r3, #4
900052da:	1a9b      	subs	r3, r3, r2
900052dc:	009b      	lsls	r3, r3, #2
900052de:	440b      	add	r3, r1
900052e0:	334d      	adds	r3, #77	@ 0x4d
900052e2:	781b      	ldrb	r3, [r3, #0]
900052e4:	2b08      	cmp	r3, #8
900052e6:	d126      	bne.n	90005336 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052e8:	78fa      	ldrb	r2, [r7, #3]
900052ea:	6879      	ldr	r1, [r7, #4]
900052ec:	4613      	mov	r3, r2
900052ee:	011b      	lsls	r3, r3, #4
900052f0:	1a9b      	subs	r3, r3, r2
900052f2:	009b      	lsls	r3, r3, #2
900052f4:	440b      	add	r3, r1
900052f6:	334d      	adds	r3, #77	@ 0x4d
900052f8:	2202      	movs	r2, #2
900052fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900052fc:	78fa      	ldrb	r2, [r7, #3]
900052fe:	6879      	ldr	r1, [r7, #4]
90005300:	4613      	mov	r3, r2
90005302:	011b      	lsls	r3, r3, #4
90005304:	1a9b      	subs	r3, r3, r2
90005306:	009b      	lsls	r3, r3, #2
90005308:	440b      	add	r3, r1
9000530a:	3344      	adds	r3, #68	@ 0x44
9000530c:	681b      	ldr	r3, [r3, #0]
9000530e:	1c59      	adds	r1, r3, #1
90005310:	6878      	ldr	r0, [r7, #4]
90005312:	4613      	mov	r3, r2
90005314:	011b      	lsls	r3, r3, #4
90005316:	1a9b      	subs	r3, r3, r2
90005318:	009b      	lsls	r3, r3, #2
9000531a:	4403      	add	r3, r0
9000531c:	3344      	adds	r3, #68	@ 0x44
9000531e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90005320:	78fa      	ldrb	r2, [r7, #3]
90005322:	6879      	ldr	r1, [r7, #4]
90005324:	4613      	mov	r3, r2
90005326:	011b      	lsls	r3, r3, #4
90005328:	1a9b      	subs	r3, r3, r2
9000532a:	009b      	lsls	r3, r3, #2
9000532c:	440b      	add	r3, r1
9000532e:	334c      	adds	r3, #76	@ 0x4c
90005330:	2204      	movs	r2, #4
90005332:	701a      	strb	r2, [r3, #0]
90005334:	e00d      	b.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90005336:	78fa      	ldrb	r2, [r7, #3]
90005338:	6879      	ldr	r1, [r7, #4]
9000533a:	4613      	mov	r3, r2
9000533c:	011b      	lsls	r3, r3, #4
9000533e:	1a9b      	subs	r3, r3, r2
90005340:	009b      	lsls	r3, r3, #2
90005342:	440b      	add	r3, r1
90005344:	334d      	adds	r3, #77	@ 0x4d
90005346:	781b      	ldrb	r3, [r3, #0]
90005348:	2b02      	cmp	r3, #2
9000534a:	f000 8100 	beq.w	9000554e <HCD_HC_IN_IRQHandler+0xcca>
9000534e:	e000      	b.n	90005352 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005350:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005352:	78fa      	ldrb	r2, [r7, #3]
90005354:	6879      	ldr	r1, [r7, #4]
90005356:	4613      	mov	r3, r2
90005358:	011b      	lsls	r3, r3, #4
9000535a:	1a9b      	subs	r3, r3, r2
9000535c:	009b      	lsls	r3, r3, #2
9000535e:	440b      	add	r3, r1
90005360:	334c      	adds	r3, #76	@ 0x4c
90005362:	781a      	ldrb	r2, [r3, #0]
90005364:	78fb      	ldrb	r3, [r7, #3]
90005366:	4619      	mov	r1, r3
90005368:	6878      	ldr	r0, [r7, #4]
9000536a:	f7fb fe55 	bl	90001018 <HAL_HCD_HC_NotifyURBChange_Callback>
9000536e:	e0ef      	b.n	90005550 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005370:	687b      	ldr	r3, [r7, #4]
90005372:	681b      	ldr	r3, [r3, #0]
90005374:	78fa      	ldrb	r2, [r7, #3]
90005376:	4611      	mov	r1, r2
90005378:	4618      	mov	r0, r3
9000537a:	f006 fc8a 	bl	9000bc92 <USB_ReadChInterrupts>
9000537e:	4603      	mov	r3, r0
90005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005384:	2b40      	cmp	r3, #64	@ 0x40
90005386:	d12f      	bne.n	900053e8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005388:	78fb      	ldrb	r3, [r7, #3]
9000538a:	015a      	lsls	r2, r3, #5
9000538c:	693b      	ldr	r3, [r7, #16]
9000538e:	4413      	add	r3, r2
90005390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005394:	461a      	mov	r2, r3
90005396:	2340      	movs	r3, #64	@ 0x40
90005398:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
9000539a:	78fa      	ldrb	r2, [r7, #3]
9000539c:	6879      	ldr	r1, [r7, #4]
9000539e:	4613      	mov	r3, r2
900053a0:	011b      	lsls	r3, r3, #4
900053a2:	1a9b      	subs	r3, r3, r2
900053a4:	009b      	lsls	r3, r3, #2
900053a6:	440b      	add	r3, r1
900053a8:	334d      	adds	r3, #77	@ 0x4d
900053aa:	2205      	movs	r2, #5
900053ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900053ae:	78fa      	ldrb	r2, [r7, #3]
900053b0:	6879      	ldr	r1, [r7, #4]
900053b2:	4613      	mov	r3, r2
900053b4:	011b      	lsls	r3, r3, #4
900053b6:	1a9b      	subs	r3, r3, r2
900053b8:	009b      	lsls	r3, r3, #2
900053ba:	440b      	add	r3, r1
900053bc:	331a      	adds	r3, #26
900053be:	781b      	ldrb	r3, [r3, #0]
900053c0:	2b00      	cmp	r3, #0
900053c2:	d109      	bne.n	900053d8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
900053c4:	78fa      	ldrb	r2, [r7, #3]
900053c6:	6879      	ldr	r1, [r7, #4]
900053c8:	4613      	mov	r3, r2
900053ca:	011b      	lsls	r3, r3, #4
900053cc:	1a9b      	subs	r3, r3, r2
900053ce:	009b      	lsls	r3, r3, #2
900053d0:	440b      	add	r3, r1
900053d2:	3344      	adds	r3, #68	@ 0x44
900053d4:	2200      	movs	r2, #0
900053d6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
900053d8:	687b      	ldr	r3, [r7, #4]
900053da:	681b      	ldr	r3, [r3, #0]
900053dc:	78fa      	ldrb	r2, [r7, #3]
900053de:	4611      	mov	r1, r2
900053e0:	4618      	mov	r0, r3
900053e2:	f006 fcd3 	bl	9000bd8c <USB_HC_Halt>
900053e6:	e0b3      	b.n	90005550 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900053e8:	687b      	ldr	r3, [r7, #4]
900053ea:	681b      	ldr	r3, [r3, #0]
900053ec:	78fa      	ldrb	r2, [r7, #3]
900053ee:	4611      	mov	r1, r2
900053f0:	4618      	mov	r0, r3
900053f2:	f006 fc4e 	bl	9000bc92 <USB_ReadChInterrupts>
900053f6:	4603      	mov	r3, r0
900053f8:	f003 0310 	and.w	r3, r3, #16
900053fc:	2b10      	cmp	r3, #16
900053fe:	f040 80a7 	bne.w	90005550 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90005402:	78fa      	ldrb	r2, [r7, #3]
90005404:	6879      	ldr	r1, [r7, #4]
90005406:	4613      	mov	r3, r2
90005408:	011b      	lsls	r3, r3, #4
9000540a:	1a9b      	subs	r3, r3, r2
9000540c:	009b      	lsls	r3, r3, #2
9000540e:	440b      	add	r3, r1
90005410:	3326      	adds	r3, #38	@ 0x26
90005412:	781b      	ldrb	r3, [r3, #0]
90005414:	2b03      	cmp	r3, #3
90005416:	d11b      	bne.n	90005450 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90005418:	78fa      	ldrb	r2, [r7, #3]
9000541a:	6879      	ldr	r1, [r7, #4]
9000541c:	4613      	mov	r3, r2
9000541e:	011b      	lsls	r3, r3, #4
90005420:	1a9b      	subs	r3, r3, r2
90005422:	009b      	lsls	r3, r3, #2
90005424:	440b      	add	r3, r1
90005426:	3344      	adds	r3, #68	@ 0x44
90005428:	2200      	movs	r2, #0
9000542a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
9000542c:	78fa      	ldrb	r2, [r7, #3]
9000542e:	6879      	ldr	r1, [r7, #4]
90005430:	4613      	mov	r3, r2
90005432:	011b      	lsls	r3, r3, #4
90005434:	1a9b      	subs	r3, r3, r2
90005436:	009b      	lsls	r3, r3, #2
90005438:	440b      	add	r3, r1
9000543a:	334d      	adds	r3, #77	@ 0x4d
9000543c:	2204      	movs	r2, #4
9000543e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005440:	687b      	ldr	r3, [r7, #4]
90005442:	681b      	ldr	r3, [r3, #0]
90005444:	78fa      	ldrb	r2, [r7, #3]
90005446:	4611      	mov	r1, r2
90005448:	4618      	mov	r0, r3
9000544a:	f006 fc9f 	bl	9000bd8c <USB_HC_Halt>
9000544e:	e03f      	b.n	900054d0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005450:	78fa      	ldrb	r2, [r7, #3]
90005452:	6879      	ldr	r1, [r7, #4]
90005454:	4613      	mov	r3, r2
90005456:	011b      	lsls	r3, r3, #4
90005458:	1a9b      	subs	r3, r3, r2
9000545a:	009b      	lsls	r3, r3, #2
9000545c:	440b      	add	r3, r1
9000545e:	3326      	adds	r3, #38	@ 0x26
90005460:	781b      	ldrb	r3, [r3, #0]
90005462:	2b00      	cmp	r3, #0
90005464:	d00a      	beq.n	9000547c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90005466:	78fa      	ldrb	r2, [r7, #3]
90005468:	6879      	ldr	r1, [r7, #4]
9000546a:	4613      	mov	r3, r2
9000546c:	011b      	lsls	r3, r3, #4
9000546e:	1a9b      	subs	r3, r3, r2
90005470:	009b      	lsls	r3, r3, #2
90005472:	440b      	add	r3, r1
90005474:	3326      	adds	r3, #38	@ 0x26
90005476:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005478:	2b02      	cmp	r3, #2
9000547a:	d129      	bne.n	900054d0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
9000547c:	78fa      	ldrb	r2, [r7, #3]
9000547e:	6879      	ldr	r1, [r7, #4]
90005480:	4613      	mov	r3, r2
90005482:	011b      	lsls	r3, r3, #4
90005484:	1a9b      	subs	r3, r3, r2
90005486:	009b      	lsls	r3, r3, #2
90005488:	440b      	add	r3, r1
9000548a:	3344      	adds	r3, #68	@ 0x44
9000548c:	2200      	movs	r2, #0
9000548e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90005490:	687b      	ldr	r3, [r7, #4]
90005492:	799b      	ldrb	r3, [r3, #6]
90005494:	2b00      	cmp	r3, #0
90005496:	d00a      	beq.n	900054ae <HCD_HC_IN_IRQHandler+0xc2a>
90005498:	78fa      	ldrb	r2, [r7, #3]
9000549a:	6879      	ldr	r1, [r7, #4]
9000549c:	4613      	mov	r3, r2
9000549e:	011b      	lsls	r3, r3, #4
900054a0:	1a9b      	subs	r3, r3, r2
900054a2:	009b      	lsls	r3, r3, #2
900054a4:	440b      	add	r3, r1
900054a6:	331b      	adds	r3, #27
900054a8:	781b      	ldrb	r3, [r3, #0]
900054aa:	2b01      	cmp	r3, #1
900054ac:	d110      	bne.n	900054d0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
900054ae:	78fa      	ldrb	r2, [r7, #3]
900054b0:	6879      	ldr	r1, [r7, #4]
900054b2:	4613      	mov	r3, r2
900054b4:	011b      	lsls	r3, r3, #4
900054b6:	1a9b      	subs	r3, r3, r2
900054b8:	009b      	lsls	r3, r3, #2
900054ba:	440b      	add	r3, r1
900054bc:	334d      	adds	r3, #77	@ 0x4d
900054be:	2204      	movs	r2, #4
900054c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
900054c2:	687b      	ldr	r3, [r7, #4]
900054c4:	681b      	ldr	r3, [r3, #0]
900054c6:	78fa      	ldrb	r2, [r7, #3]
900054c8:	4611      	mov	r1, r2
900054ca:	4618      	mov	r0, r3
900054cc:	f006 fc5e 	bl	9000bd8c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
900054d0:	78fa      	ldrb	r2, [r7, #3]
900054d2:	6879      	ldr	r1, [r7, #4]
900054d4:	4613      	mov	r3, r2
900054d6:	011b      	lsls	r3, r3, #4
900054d8:	1a9b      	subs	r3, r3, r2
900054da:	009b      	lsls	r3, r3, #2
900054dc:	440b      	add	r3, r1
900054de:	331b      	adds	r3, #27
900054e0:	781b      	ldrb	r3, [r3, #0]
900054e2:	2b01      	cmp	r3, #1
900054e4:	d129      	bne.n	9000553a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900054e6:	78fa      	ldrb	r2, [r7, #3]
900054e8:	6879      	ldr	r1, [r7, #4]
900054ea:	4613      	mov	r3, r2
900054ec:	011b      	lsls	r3, r3, #4
900054ee:	1a9b      	subs	r3, r3, r2
900054f0:	009b      	lsls	r3, r3, #2
900054f2:	440b      	add	r3, r1
900054f4:	331b      	adds	r3, #27
900054f6:	2200      	movs	r2, #0
900054f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900054fa:	78fb      	ldrb	r3, [r7, #3]
900054fc:	015a      	lsls	r2, r3, #5
900054fe:	693b      	ldr	r3, [r7, #16]
90005500:	4413      	add	r3, r2
90005502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005506:	685b      	ldr	r3, [r3, #4]
90005508:	78fa      	ldrb	r2, [r7, #3]
9000550a:	0151      	lsls	r1, r2, #5
9000550c:	693a      	ldr	r2, [r7, #16]
9000550e:	440a      	add	r2, r1
90005510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005518:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
9000551a:	78fb      	ldrb	r3, [r7, #3]
9000551c:	015a      	lsls	r2, r3, #5
9000551e:	693b      	ldr	r3, [r7, #16]
90005520:	4413      	add	r3, r2
90005522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005526:	68db      	ldr	r3, [r3, #12]
90005528:	78fa      	ldrb	r2, [r7, #3]
9000552a:	0151      	lsls	r1, r2, #5
9000552c:	693a      	ldr	r2, [r7, #16]
9000552e:	440a      	add	r2, r1
90005530:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005534:	f043 0320 	orr.w	r3, r3, #32
90005538:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000553a:	78fb      	ldrb	r3, [r7, #3]
9000553c:	015a      	lsls	r2, r3, #5
9000553e:	693b      	ldr	r3, [r7, #16]
90005540:	4413      	add	r3, r2
90005542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005546:	461a      	mov	r2, r3
90005548:	2310      	movs	r3, #16
9000554a:	6093      	str	r3, [r2, #8]
9000554c:	e000      	b.n	90005550 <HCD_HC_IN_IRQHandler+0xccc>
        return;
9000554e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90005550:	3718      	adds	r7, #24
90005552:	46bd      	mov	sp, r7
90005554:	bd80      	pop	{r7, pc}

90005556 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90005556:	b580      	push	{r7, lr}
90005558:	b086      	sub	sp, #24
9000555a:	af00      	add	r7, sp, #0
9000555c:	6078      	str	r0, [r7, #4]
9000555e:	460b      	mov	r3, r1
90005560:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005562:	687b      	ldr	r3, [r7, #4]
90005564:	681b      	ldr	r3, [r3, #0]
90005566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005568:	697b      	ldr	r3, [r7, #20]
9000556a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000556c:	687b      	ldr	r3, [r7, #4]
9000556e:	681b      	ldr	r3, [r3, #0]
90005570:	78fa      	ldrb	r2, [r7, #3]
90005572:	4611      	mov	r1, r2
90005574:	4618      	mov	r0, r3
90005576:	f006 fb8c 	bl	9000bc92 <USB_ReadChInterrupts>
9000557a:	4603      	mov	r3, r0
9000557c:	f003 0304 	and.w	r3, r3, #4
90005580:	2b04      	cmp	r3, #4
90005582:	d11b      	bne.n	900055bc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90005584:	78fb      	ldrb	r3, [r7, #3]
90005586:	015a      	lsls	r2, r3, #5
90005588:	693b      	ldr	r3, [r7, #16]
9000558a:	4413      	add	r3, r2
9000558c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005590:	461a      	mov	r2, r3
90005592:	2304      	movs	r3, #4
90005594:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90005596:	78fa      	ldrb	r2, [r7, #3]
90005598:	6879      	ldr	r1, [r7, #4]
9000559a:	4613      	mov	r3, r2
9000559c:	011b      	lsls	r3, r3, #4
9000559e:	1a9b      	subs	r3, r3, r2
900055a0:	009b      	lsls	r3, r3, #2
900055a2:	440b      	add	r3, r1
900055a4:	334d      	adds	r3, #77	@ 0x4d
900055a6:	2207      	movs	r2, #7
900055a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900055aa:	687b      	ldr	r3, [r7, #4]
900055ac:	681b      	ldr	r3, [r3, #0]
900055ae:	78fa      	ldrb	r2, [r7, #3]
900055b0:	4611      	mov	r1, r2
900055b2:	4618      	mov	r0, r3
900055b4:	f006 fbea 	bl	9000bd8c <USB_HC_Halt>
900055b8:	f000 bc89 	b.w	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900055bc:	687b      	ldr	r3, [r7, #4]
900055be:	681b      	ldr	r3, [r3, #0]
900055c0:	78fa      	ldrb	r2, [r7, #3]
900055c2:	4611      	mov	r1, r2
900055c4:	4618      	mov	r0, r3
900055c6:	f006 fb64 	bl	9000bc92 <USB_ReadChInterrupts>
900055ca:	4603      	mov	r3, r0
900055cc:	f003 0320 	and.w	r3, r3, #32
900055d0:	2b20      	cmp	r3, #32
900055d2:	f040 8082 	bne.w	900056da <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900055d6:	78fb      	ldrb	r3, [r7, #3]
900055d8:	015a      	lsls	r2, r3, #5
900055da:	693b      	ldr	r3, [r7, #16]
900055dc:	4413      	add	r3, r2
900055de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900055e2:	461a      	mov	r2, r3
900055e4:	2320      	movs	r3, #32
900055e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
900055e8:	78fa      	ldrb	r2, [r7, #3]
900055ea:	6879      	ldr	r1, [r7, #4]
900055ec:	4613      	mov	r3, r2
900055ee:	011b      	lsls	r3, r3, #4
900055f0:	1a9b      	subs	r3, r3, r2
900055f2:	009b      	lsls	r3, r3, #2
900055f4:	440b      	add	r3, r1
900055f6:	3319      	adds	r3, #25
900055f8:	781b      	ldrb	r3, [r3, #0]
900055fa:	2b01      	cmp	r3, #1
900055fc:	d124      	bne.n	90005648 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
900055fe:	78fa      	ldrb	r2, [r7, #3]
90005600:	6879      	ldr	r1, [r7, #4]
90005602:	4613      	mov	r3, r2
90005604:	011b      	lsls	r3, r3, #4
90005606:	1a9b      	subs	r3, r3, r2
90005608:	009b      	lsls	r3, r3, #2
9000560a:	440b      	add	r3, r1
9000560c:	3319      	adds	r3, #25
9000560e:	2200      	movs	r2, #0
90005610:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005612:	78fa      	ldrb	r2, [r7, #3]
90005614:	6879      	ldr	r1, [r7, #4]
90005616:	4613      	mov	r3, r2
90005618:	011b      	lsls	r3, r3, #4
9000561a:	1a9b      	subs	r3, r3, r2
9000561c:	009b      	lsls	r3, r3, #2
9000561e:	440b      	add	r3, r1
90005620:	334c      	adds	r3, #76	@ 0x4c
90005622:	2202      	movs	r2, #2
90005624:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90005626:	78fa      	ldrb	r2, [r7, #3]
90005628:	6879      	ldr	r1, [r7, #4]
9000562a:	4613      	mov	r3, r2
9000562c:	011b      	lsls	r3, r3, #4
9000562e:	1a9b      	subs	r3, r3, r2
90005630:	009b      	lsls	r3, r3, #2
90005632:	440b      	add	r3, r1
90005634:	334d      	adds	r3, #77	@ 0x4d
90005636:	2203      	movs	r2, #3
90005638:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000563a:	687b      	ldr	r3, [r7, #4]
9000563c:	681b      	ldr	r3, [r3, #0]
9000563e:	78fa      	ldrb	r2, [r7, #3]
90005640:	4611      	mov	r1, r2
90005642:	4618      	mov	r0, r3
90005644:	f006 fba2 	bl	9000bd8c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90005648:	78fa      	ldrb	r2, [r7, #3]
9000564a:	6879      	ldr	r1, [r7, #4]
9000564c:	4613      	mov	r3, r2
9000564e:	011b      	lsls	r3, r3, #4
90005650:	1a9b      	subs	r3, r3, r2
90005652:	009b      	lsls	r3, r3, #2
90005654:	440b      	add	r3, r1
90005656:	331a      	adds	r3, #26
90005658:	781b      	ldrb	r3, [r3, #0]
9000565a:	2b01      	cmp	r3, #1
9000565c:	f040 8437 	bne.w	90005ece <HCD_HC_OUT_IRQHandler+0x978>
90005660:	78fa      	ldrb	r2, [r7, #3]
90005662:	6879      	ldr	r1, [r7, #4]
90005664:	4613      	mov	r3, r2
90005666:	011b      	lsls	r3, r3, #4
90005668:	1a9b      	subs	r3, r3, r2
9000566a:	009b      	lsls	r3, r3, #2
9000566c:	440b      	add	r3, r1
9000566e:	331b      	adds	r3, #27
90005670:	781b      	ldrb	r3, [r3, #0]
90005672:	2b00      	cmp	r3, #0
90005674:	f040 842b 	bne.w	90005ece <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90005678:	78fa      	ldrb	r2, [r7, #3]
9000567a:	6879      	ldr	r1, [r7, #4]
9000567c:	4613      	mov	r3, r2
9000567e:	011b      	lsls	r3, r3, #4
90005680:	1a9b      	subs	r3, r3, r2
90005682:	009b      	lsls	r3, r3, #2
90005684:	440b      	add	r3, r1
90005686:	3326      	adds	r3, #38	@ 0x26
90005688:	781b      	ldrb	r3, [r3, #0]
9000568a:	2b01      	cmp	r3, #1
9000568c:	d009      	beq.n	900056a2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
9000568e:	78fa      	ldrb	r2, [r7, #3]
90005690:	6879      	ldr	r1, [r7, #4]
90005692:	4613      	mov	r3, r2
90005694:	011b      	lsls	r3, r3, #4
90005696:	1a9b      	subs	r3, r3, r2
90005698:	009b      	lsls	r3, r3, #2
9000569a:	440b      	add	r3, r1
9000569c:	331b      	adds	r3, #27
9000569e:	2201      	movs	r2, #1
900056a0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
900056a2:	78fa      	ldrb	r2, [r7, #3]
900056a4:	6879      	ldr	r1, [r7, #4]
900056a6:	4613      	mov	r3, r2
900056a8:	011b      	lsls	r3, r3, #4
900056aa:	1a9b      	subs	r3, r3, r2
900056ac:	009b      	lsls	r3, r3, #2
900056ae:	440b      	add	r3, r1
900056b0:	334d      	adds	r3, #77	@ 0x4d
900056b2:	2203      	movs	r2, #3
900056b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900056b6:	687b      	ldr	r3, [r7, #4]
900056b8:	681b      	ldr	r3, [r3, #0]
900056ba:	78fa      	ldrb	r2, [r7, #3]
900056bc:	4611      	mov	r1, r2
900056be:	4618      	mov	r0, r3
900056c0:	f006 fb64 	bl	9000bd8c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
900056c4:	78fa      	ldrb	r2, [r7, #3]
900056c6:	6879      	ldr	r1, [r7, #4]
900056c8:	4613      	mov	r3, r2
900056ca:	011b      	lsls	r3, r3, #4
900056cc:	1a9b      	subs	r3, r3, r2
900056ce:	009b      	lsls	r3, r3, #2
900056d0:	440b      	add	r3, r1
900056d2:	3344      	adds	r3, #68	@ 0x44
900056d4:	2200      	movs	r2, #0
900056d6:	601a      	str	r2, [r3, #0]
900056d8:	e3f9      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900056da:	687b      	ldr	r3, [r7, #4]
900056dc:	681b      	ldr	r3, [r3, #0]
900056de:	78fa      	ldrb	r2, [r7, #3]
900056e0:	4611      	mov	r1, r2
900056e2:	4618      	mov	r0, r3
900056e4:	f006 fad5 	bl	9000bc92 <USB_ReadChInterrupts>
900056e8:	4603      	mov	r3, r0
900056ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900056ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900056f2:	d111      	bne.n	90005718 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900056f4:	78fb      	ldrb	r3, [r7, #3]
900056f6:	015a      	lsls	r2, r3, #5
900056f8:	693b      	ldr	r3, [r7, #16]
900056fa:	4413      	add	r3, r2
900056fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005700:	461a      	mov	r2, r3
90005702:	f44f 7300 	mov.w	r3, #512	@ 0x200
90005706:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005708:	687b      	ldr	r3, [r7, #4]
9000570a:	681b      	ldr	r3, [r3, #0]
9000570c:	78fa      	ldrb	r2, [r7, #3]
9000570e:	4611      	mov	r1, r2
90005710:	4618      	mov	r0, r3
90005712:	f006 fb3b 	bl	9000bd8c <USB_HC_Halt>
90005716:	e3da      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90005718:	687b      	ldr	r3, [r7, #4]
9000571a:	681b      	ldr	r3, [r3, #0]
9000571c:	78fa      	ldrb	r2, [r7, #3]
9000571e:	4611      	mov	r1, r2
90005720:	4618      	mov	r0, r3
90005722:	f006 fab6 	bl	9000bc92 <USB_ReadChInterrupts>
90005726:	4603      	mov	r3, r0
90005728:	f003 0301 	and.w	r3, r3, #1
9000572c:	2b01      	cmp	r3, #1
9000572e:	d168      	bne.n	90005802 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005730:	78fa      	ldrb	r2, [r7, #3]
90005732:	6879      	ldr	r1, [r7, #4]
90005734:	4613      	mov	r3, r2
90005736:	011b      	lsls	r3, r3, #4
90005738:	1a9b      	subs	r3, r3, r2
9000573a:	009b      	lsls	r3, r3, #2
9000573c:	440b      	add	r3, r1
9000573e:	3344      	adds	r3, #68	@ 0x44
90005740:	2200      	movs	r2, #0
90005742:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005744:	687b      	ldr	r3, [r7, #4]
90005746:	681b      	ldr	r3, [r3, #0]
90005748:	78fa      	ldrb	r2, [r7, #3]
9000574a:	4611      	mov	r1, r2
9000574c:	4618      	mov	r0, r3
9000574e:	f006 faa0 	bl	9000bc92 <USB_ReadChInterrupts>
90005752:	4603      	mov	r3, r0
90005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005758:	2b40      	cmp	r3, #64	@ 0x40
9000575a:	d112      	bne.n	90005782 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
9000575c:	78fa      	ldrb	r2, [r7, #3]
9000575e:	6879      	ldr	r1, [r7, #4]
90005760:	4613      	mov	r3, r2
90005762:	011b      	lsls	r3, r3, #4
90005764:	1a9b      	subs	r3, r3, r2
90005766:	009b      	lsls	r3, r3, #2
90005768:	440b      	add	r3, r1
9000576a:	3319      	adds	r3, #25
9000576c:	2201      	movs	r2, #1
9000576e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005770:	78fb      	ldrb	r3, [r7, #3]
90005772:	015a      	lsls	r2, r3, #5
90005774:	693b      	ldr	r3, [r7, #16]
90005776:	4413      	add	r3, r2
90005778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000577c:	461a      	mov	r2, r3
9000577e:	2340      	movs	r3, #64	@ 0x40
90005780:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90005782:	78fa      	ldrb	r2, [r7, #3]
90005784:	6879      	ldr	r1, [r7, #4]
90005786:	4613      	mov	r3, r2
90005788:	011b      	lsls	r3, r3, #4
9000578a:	1a9b      	subs	r3, r3, r2
9000578c:	009b      	lsls	r3, r3, #2
9000578e:	440b      	add	r3, r1
90005790:	331b      	adds	r3, #27
90005792:	781b      	ldrb	r3, [r3, #0]
90005794:	2b00      	cmp	r3, #0
90005796:	d019      	beq.n	900057cc <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90005798:	78fa      	ldrb	r2, [r7, #3]
9000579a:	6879      	ldr	r1, [r7, #4]
9000579c:	4613      	mov	r3, r2
9000579e:	011b      	lsls	r3, r3, #4
900057a0:	1a9b      	subs	r3, r3, r2
900057a2:	009b      	lsls	r3, r3, #2
900057a4:	440b      	add	r3, r1
900057a6:	331b      	adds	r3, #27
900057a8:	2200      	movs	r2, #0
900057aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900057ac:	78fb      	ldrb	r3, [r7, #3]
900057ae:	015a      	lsls	r2, r3, #5
900057b0:	693b      	ldr	r3, [r7, #16]
900057b2:	4413      	add	r3, r2
900057b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057b8:	685b      	ldr	r3, [r3, #4]
900057ba:	78fa      	ldrb	r2, [r7, #3]
900057bc:	0151      	lsls	r1, r2, #5
900057be:	693a      	ldr	r2, [r7, #16]
900057c0:	440a      	add	r2, r1
900057c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900057c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900057ca:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900057cc:	78fb      	ldrb	r3, [r7, #3]
900057ce:	015a      	lsls	r2, r3, #5
900057d0:	693b      	ldr	r3, [r7, #16]
900057d2:	4413      	add	r3, r2
900057d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057d8:	461a      	mov	r2, r3
900057da:	2301      	movs	r3, #1
900057dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
900057de:	78fa      	ldrb	r2, [r7, #3]
900057e0:	6879      	ldr	r1, [r7, #4]
900057e2:	4613      	mov	r3, r2
900057e4:	011b      	lsls	r3, r3, #4
900057e6:	1a9b      	subs	r3, r3, r2
900057e8:	009b      	lsls	r3, r3, #2
900057ea:	440b      	add	r3, r1
900057ec:	334d      	adds	r3, #77	@ 0x4d
900057ee:	2201      	movs	r2, #1
900057f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900057f2:	687b      	ldr	r3, [r7, #4]
900057f4:	681b      	ldr	r3, [r3, #0]
900057f6:	78fa      	ldrb	r2, [r7, #3]
900057f8:	4611      	mov	r1, r2
900057fa:	4618      	mov	r0, r3
900057fc:	f006 fac6 	bl	9000bd8c <USB_HC_Halt>
90005800:	e365      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005802:	687b      	ldr	r3, [r7, #4]
90005804:	681b      	ldr	r3, [r3, #0]
90005806:	78fa      	ldrb	r2, [r7, #3]
90005808:	4611      	mov	r1, r2
9000580a:	4618      	mov	r0, r3
9000580c:	f006 fa41 	bl	9000bc92 <USB_ReadChInterrupts>
90005810:	4603      	mov	r3, r0
90005812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005816:	2b40      	cmp	r3, #64	@ 0x40
90005818:	d139      	bne.n	9000588e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
9000581a:	78fa      	ldrb	r2, [r7, #3]
9000581c:	6879      	ldr	r1, [r7, #4]
9000581e:	4613      	mov	r3, r2
90005820:	011b      	lsls	r3, r3, #4
90005822:	1a9b      	subs	r3, r3, r2
90005824:	009b      	lsls	r3, r3, #2
90005826:	440b      	add	r3, r1
90005828:	334d      	adds	r3, #77	@ 0x4d
9000582a:	2205      	movs	r2, #5
9000582c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
9000582e:	78fa      	ldrb	r2, [r7, #3]
90005830:	6879      	ldr	r1, [r7, #4]
90005832:	4613      	mov	r3, r2
90005834:	011b      	lsls	r3, r3, #4
90005836:	1a9b      	subs	r3, r3, r2
90005838:	009b      	lsls	r3, r3, #2
9000583a:	440b      	add	r3, r1
9000583c:	331a      	adds	r3, #26
9000583e:	781b      	ldrb	r3, [r3, #0]
90005840:	2b00      	cmp	r3, #0
90005842:	d109      	bne.n	90005858 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005844:	78fa      	ldrb	r2, [r7, #3]
90005846:	6879      	ldr	r1, [r7, #4]
90005848:	4613      	mov	r3, r2
9000584a:	011b      	lsls	r3, r3, #4
9000584c:	1a9b      	subs	r3, r3, r2
9000584e:	009b      	lsls	r3, r3, #2
90005850:	440b      	add	r3, r1
90005852:	3319      	adds	r3, #25
90005854:	2201      	movs	r2, #1
90005856:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005858:	78fa      	ldrb	r2, [r7, #3]
9000585a:	6879      	ldr	r1, [r7, #4]
9000585c:	4613      	mov	r3, r2
9000585e:	011b      	lsls	r3, r3, #4
90005860:	1a9b      	subs	r3, r3, r2
90005862:	009b      	lsls	r3, r3, #2
90005864:	440b      	add	r3, r1
90005866:	3344      	adds	r3, #68	@ 0x44
90005868:	2200      	movs	r2, #0
9000586a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000586c:	687b      	ldr	r3, [r7, #4]
9000586e:	681b      	ldr	r3, [r3, #0]
90005870:	78fa      	ldrb	r2, [r7, #3]
90005872:	4611      	mov	r1, r2
90005874:	4618      	mov	r0, r3
90005876:	f006 fa89 	bl	9000bd8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
9000587a:	78fb      	ldrb	r3, [r7, #3]
9000587c:	015a      	lsls	r2, r3, #5
9000587e:	693b      	ldr	r3, [r7, #16]
90005880:	4413      	add	r3, r2
90005882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005886:	461a      	mov	r2, r3
90005888:	2340      	movs	r3, #64	@ 0x40
9000588a:	6093      	str	r3, [r2, #8]
9000588c:	e31f      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000588e:	687b      	ldr	r3, [r7, #4]
90005890:	681b      	ldr	r3, [r3, #0]
90005892:	78fa      	ldrb	r2, [r7, #3]
90005894:	4611      	mov	r1, r2
90005896:	4618      	mov	r0, r3
90005898:	f006 f9fb 	bl	9000bc92 <USB_ReadChInterrupts>
9000589c:	4603      	mov	r3, r0
9000589e:	f003 0308 	and.w	r3, r3, #8
900058a2:	2b08      	cmp	r3, #8
900058a4:	d11a      	bne.n	900058dc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900058a6:	78fb      	ldrb	r3, [r7, #3]
900058a8:	015a      	lsls	r2, r3, #5
900058aa:	693b      	ldr	r3, [r7, #16]
900058ac:	4413      	add	r3, r2
900058ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900058b2:	461a      	mov	r2, r3
900058b4:	2308      	movs	r3, #8
900058b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900058b8:	78fa      	ldrb	r2, [r7, #3]
900058ba:	6879      	ldr	r1, [r7, #4]
900058bc:	4613      	mov	r3, r2
900058be:	011b      	lsls	r3, r3, #4
900058c0:	1a9b      	subs	r3, r3, r2
900058c2:	009b      	lsls	r3, r3, #2
900058c4:	440b      	add	r3, r1
900058c6:	334d      	adds	r3, #77	@ 0x4d
900058c8:	2206      	movs	r2, #6
900058ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900058cc:	687b      	ldr	r3, [r7, #4]
900058ce:	681b      	ldr	r3, [r3, #0]
900058d0:	78fa      	ldrb	r2, [r7, #3]
900058d2:	4611      	mov	r1, r2
900058d4:	4618      	mov	r0, r3
900058d6:	f006 fa59 	bl	9000bd8c <USB_HC_Halt>
900058da:	e2f8      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900058dc:	687b      	ldr	r3, [r7, #4]
900058de:	681b      	ldr	r3, [r3, #0]
900058e0:	78fa      	ldrb	r2, [r7, #3]
900058e2:	4611      	mov	r1, r2
900058e4:	4618      	mov	r0, r3
900058e6:	f006 f9d4 	bl	9000bc92 <USB_ReadChInterrupts>
900058ea:	4603      	mov	r3, r0
900058ec:	f003 0310 	and.w	r3, r3, #16
900058f0:	2b10      	cmp	r3, #16
900058f2:	d144      	bne.n	9000597e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900058f4:	78fa      	ldrb	r2, [r7, #3]
900058f6:	6879      	ldr	r1, [r7, #4]
900058f8:	4613      	mov	r3, r2
900058fa:	011b      	lsls	r3, r3, #4
900058fc:	1a9b      	subs	r3, r3, r2
900058fe:	009b      	lsls	r3, r3, #2
90005900:	440b      	add	r3, r1
90005902:	3344      	adds	r3, #68	@ 0x44
90005904:	2200      	movs	r2, #0
90005906:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90005908:	78fa      	ldrb	r2, [r7, #3]
9000590a:	6879      	ldr	r1, [r7, #4]
9000590c:	4613      	mov	r3, r2
9000590e:	011b      	lsls	r3, r3, #4
90005910:	1a9b      	subs	r3, r3, r2
90005912:	009b      	lsls	r3, r3, #2
90005914:	440b      	add	r3, r1
90005916:	334d      	adds	r3, #77	@ 0x4d
90005918:	2204      	movs	r2, #4
9000591a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
9000591c:	78fa      	ldrb	r2, [r7, #3]
9000591e:	6879      	ldr	r1, [r7, #4]
90005920:	4613      	mov	r3, r2
90005922:	011b      	lsls	r3, r3, #4
90005924:	1a9b      	subs	r3, r3, r2
90005926:	009b      	lsls	r3, r3, #2
90005928:	440b      	add	r3, r1
9000592a:	3319      	adds	r3, #25
9000592c:	781b      	ldrb	r3, [r3, #0]
9000592e:	2b00      	cmp	r3, #0
90005930:	d114      	bne.n	9000595c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
90005932:	78fa      	ldrb	r2, [r7, #3]
90005934:	6879      	ldr	r1, [r7, #4]
90005936:	4613      	mov	r3, r2
90005938:	011b      	lsls	r3, r3, #4
9000593a:	1a9b      	subs	r3, r3, r2
9000593c:	009b      	lsls	r3, r3, #2
9000593e:	440b      	add	r3, r1
90005940:	3318      	adds	r3, #24
90005942:	781b      	ldrb	r3, [r3, #0]
90005944:	2b00      	cmp	r3, #0
90005946:	d109      	bne.n	9000595c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90005948:	78fa      	ldrb	r2, [r7, #3]
9000594a:	6879      	ldr	r1, [r7, #4]
9000594c:	4613      	mov	r3, r2
9000594e:	011b      	lsls	r3, r3, #4
90005950:	1a9b      	subs	r3, r3, r2
90005952:	009b      	lsls	r3, r3, #2
90005954:	440b      	add	r3, r1
90005956:	3319      	adds	r3, #25
90005958:	2201      	movs	r2, #1
9000595a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000595c:	687b      	ldr	r3, [r7, #4]
9000595e:	681b      	ldr	r3, [r3, #0]
90005960:	78fa      	ldrb	r2, [r7, #3]
90005962:	4611      	mov	r1, r2
90005964:	4618      	mov	r0, r3
90005966:	f006 fa11 	bl	9000bd8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000596a:	78fb      	ldrb	r3, [r7, #3]
9000596c:	015a      	lsls	r2, r3, #5
9000596e:	693b      	ldr	r3, [r7, #16]
90005970:	4413      	add	r3, r2
90005972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005976:	461a      	mov	r2, r3
90005978:	2310      	movs	r3, #16
9000597a:	6093      	str	r3, [r2, #8]
9000597c:	e2a7      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
9000597e:	687b      	ldr	r3, [r7, #4]
90005980:	681b      	ldr	r3, [r3, #0]
90005982:	78fa      	ldrb	r2, [r7, #3]
90005984:	4611      	mov	r1, r2
90005986:	4618      	mov	r0, r3
90005988:	f006 f983 	bl	9000bc92 <USB_ReadChInterrupts>
9000598c:	4603      	mov	r3, r0
9000598e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90005992:	2b80      	cmp	r3, #128	@ 0x80
90005994:	f040 8083 	bne.w	90005a9e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90005998:	687b      	ldr	r3, [r7, #4]
9000599a:	799b      	ldrb	r3, [r3, #6]
9000599c:	2b00      	cmp	r3, #0
9000599e:	d111      	bne.n	900059c4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
900059a0:	78fa      	ldrb	r2, [r7, #3]
900059a2:	6879      	ldr	r1, [r7, #4]
900059a4:	4613      	mov	r3, r2
900059a6:	011b      	lsls	r3, r3, #4
900059a8:	1a9b      	subs	r3, r3, r2
900059aa:	009b      	lsls	r3, r3, #2
900059ac:	440b      	add	r3, r1
900059ae:	334d      	adds	r3, #77	@ 0x4d
900059b0:	2207      	movs	r2, #7
900059b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900059b4:	687b      	ldr	r3, [r7, #4]
900059b6:	681b      	ldr	r3, [r3, #0]
900059b8:	78fa      	ldrb	r2, [r7, #3]
900059ba:	4611      	mov	r1, r2
900059bc:	4618      	mov	r0, r3
900059be:	f006 f9e5 	bl	9000bd8c <USB_HC_Halt>
900059c2:	e062      	b.n	90005a8a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
900059c4:	78fa      	ldrb	r2, [r7, #3]
900059c6:	6879      	ldr	r1, [r7, #4]
900059c8:	4613      	mov	r3, r2
900059ca:	011b      	lsls	r3, r3, #4
900059cc:	1a9b      	subs	r3, r3, r2
900059ce:	009b      	lsls	r3, r3, #2
900059d0:	440b      	add	r3, r1
900059d2:	3344      	adds	r3, #68	@ 0x44
900059d4:	681b      	ldr	r3, [r3, #0]
900059d6:	1c59      	adds	r1, r3, #1
900059d8:	6878      	ldr	r0, [r7, #4]
900059da:	4613      	mov	r3, r2
900059dc:	011b      	lsls	r3, r3, #4
900059de:	1a9b      	subs	r3, r3, r2
900059e0:	009b      	lsls	r3, r3, #2
900059e2:	4403      	add	r3, r0
900059e4:	3344      	adds	r3, #68	@ 0x44
900059e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900059e8:	78fa      	ldrb	r2, [r7, #3]
900059ea:	6879      	ldr	r1, [r7, #4]
900059ec:	4613      	mov	r3, r2
900059ee:	011b      	lsls	r3, r3, #4
900059f0:	1a9b      	subs	r3, r3, r2
900059f2:	009b      	lsls	r3, r3, #2
900059f4:	440b      	add	r3, r1
900059f6:	3344      	adds	r3, #68	@ 0x44
900059f8:	681b      	ldr	r3, [r3, #0]
900059fa:	2b02      	cmp	r3, #2
900059fc:	d922      	bls.n	90005a44 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900059fe:	78fa      	ldrb	r2, [r7, #3]
90005a00:	6879      	ldr	r1, [r7, #4]
90005a02:	4613      	mov	r3, r2
90005a04:	011b      	lsls	r3, r3, #4
90005a06:	1a9b      	subs	r3, r3, r2
90005a08:	009b      	lsls	r3, r3, #2
90005a0a:	440b      	add	r3, r1
90005a0c:	3344      	adds	r3, #68	@ 0x44
90005a0e:	2200      	movs	r2, #0
90005a10:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005a12:	78fa      	ldrb	r2, [r7, #3]
90005a14:	6879      	ldr	r1, [r7, #4]
90005a16:	4613      	mov	r3, r2
90005a18:	011b      	lsls	r3, r3, #4
90005a1a:	1a9b      	subs	r3, r3, r2
90005a1c:	009b      	lsls	r3, r3, #2
90005a1e:	440b      	add	r3, r1
90005a20:	334c      	adds	r3, #76	@ 0x4c
90005a22:	2204      	movs	r2, #4
90005a24:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005a26:	78fa      	ldrb	r2, [r7, #3]
90005a28:	6879      	ldr	r1, [r7, #4]
90005a2a:	4613      	mov	r3, r2
90005a2c:	011b      	lsls	r3, r3, #4
90005a2e:	1a9b      	subs	r3, r3, r2
90005a30:	009b      	lsls	r3, r3, #2
90005a32:	440b      	add	r3, r1
90005a34:	334c      	adds	r3, #76	@ 0x4c
90005a36:	781a      	ldrb	r2, [r3, #0]
90005a38:	78fb      	ldrb	r3, [r7, #3]
90005a3a:	4619      	mov	r1, r3
90005a3c:	6878      	ldr	r0, [r7, #4]
90005a3e:	f7fb faeb 	bl	90001018 <HAL_HCD_HC_NotifyURBChange_Callback>
90005a42:	e022      	b.n	90005a8a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005a44:	78fa      	ldrb	r2, [r7, #3]
90005a46:	6879      	ldr	r1, [r7, #4]
90005a48:	4613      	mov	r3, r2
90005a4a:	011b      	lsls	r3, r3, #4
90005a4c:	1a9b      	subs	r3, r3, r2
90005a4e:	009b      	lsls	r3, r3, #2
90005a50:	440b      	add	r3, r1
90005a52:	334c      	adds	r3, #76	@ 0x4c
90005a54:	2202      	movs	r2, #2
90005a56:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005a58:	78fb      	ldrb	r3, [r7, #3]
90005a5a:	015a      	lsls	r2, r3, #5
90005a5c:	693b      	ldr	r3, [r7, #16]
90005a5e:	4413      	add	r3, r2
90005a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a64:	681b      	ldr	r3, [r3, #0]
90005a66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005a68:	68fb      	ldr	r3, [r7, #12]
90005a6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005a6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005a70:	68fb      	ldr	r3, [r7, #12]
90005a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005a76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005a78:	78fb      	ldrb	r3, [r7, #3]
90005a7a:	015a      	lsls	r2, r3, #5
90005a7c:	693b      	ldr	r3, [r7, #16]
90005a7e:	4413      	add	r3, r2
90005a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a84:	461a      	mov	r2, r3
90005a86:	68fb      	ldr	r3, [r7, #12]
90005a88:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90005a8a:	78fb      	ldrb	r3, [r7, #3]
90005a8c:	015a      	lsls	r2, r3, #5
90005a8e:	693b      	ldr	r3, [r7, #16]
90005a90:	4413      	add	r3, r2
90005a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a96:	461a      	mov	r2, r3
90005a98:	2380      	movs	r3, #128	@ 0x80
90005a9a:	6093      	str	r3, [r2, #8]
90005a9c:	e217      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90005a9e:	687b      	ldr	r3, [r7, #4]
90005aa0:	681b      	ldr	r3, [r3, #0]
90005aa2:	78fa      	ldrb	r2, [r7, #3]
90005aa4:	4611      	mov	r1, r2
90005aa6:	4618      	mov	r0, r3
90005aa8:	f006 f8f3 	bl	9000bc92 <USB_ReadChInterrupts>
90005aac:	4603      	mov	r3, r0
90005aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90005ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90005ab6:	d11b      	bne.n	90005af0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005ab8:	78fa      	ldrb	r2, [r7, #3]
90005aba:	6879      	ldr	r1, [r7, #4]
90005abc:	4613      	mov	r3, r2
90005abe:	011b      	lsls	r3, r3, #4
90005ac0:	1a9b      	subs	r3, r3, r2
90005ac2:	009b      	lsls	r3, r3, #2
90005ac4:	440b      	add	r3, r1
90005ac6:	334d      	adds	r3, #77	@ 0x4d
90005ac8:	2209      	movs	r2, #9
90005aca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005acc:	687b      	ldr	r3, [r7, #4]
90005ace:	681b      	ldr	r3, [r3, #0]
90005ad0:	78fa      	ldrb	r2, [r7, #3]
90005ad2:	4611      	mov	r1, r2
90005ad4:	4618      	mov	r0, r3
90005ad6:	f006 f959 	bl	9000bd8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005ada:	78fb      	ldrb	r3, [r7, #3]
90005adc:	015a      	lsls	r2, r3, #5
90005ade:	693b      	ldr	r3, [r7, #16]
90005ae0:	4413      	add	r3, r2
90005ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005ae6:	461a      	mov	r2, r3
90005ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005aec:	6093      	str	r3, [r2, #8]
90005aee:	e1ee      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90005af0:	687b      	ldr	r3, [r7, #4]
90005af2:	681b      	ldr	r3, [r3, #0]
90005af4:	78fa      	ldrb	r2, [r7, #3]
90005af6:	4611      	mov	r1, r2
90005af8:	4618      	mov	r0, r3
90005afa:	f006 f8ca 	bl	9000bc92 <USB_ReadChInterrupts>
90005afe:	4603      	mov	r3, r0
90005b00:	f003 0302 	and.w	r3, r3, #2
90005b04:	2b02      	cmp	r3, #2
90005b06:	f040 81df 	bne.w	90005ec8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005b0a:	78fb      	ldrb	r3, [r7, #3]
90005b0c:	015a      	lsls	r2, r3, #5
90005b0e:	693b      	ldr	r3, [r7, #16]
90005b10:	4413      	add	r3, r2
90005b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005b16:	461a      	mov	r2, r3
90005b18:	2302      	movs	r3, #2
90005b1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005b1c:	78fa      	ldrb	r2, [r7, #3]
90005b1e:	6879      	ldr	r1, [r7, #4]
90005b20:	4613      	mov	r3, r2
90005b22:	011b      	lsls	r3, r3, #4
90005b24:	1a9b      	subs	r3, r3, r2
90005b26:	009b      	lsls	r3, r3, #2
90005b28:	440b      	add	r3, r1
90005b2a:	334d      	adds	r3, #77	@ 0x4d
90005b2c:	781b      	ldrb	r3, [r3, #0]
90005b2e:	2b01      	cmp	r3, #1
90005b30:	f040 8093 	bne.w	90005c5a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005b34:	78fa      	ldrb	r2, [r7, #3]
90005b36:	6879      	ldr	r1, [r7, #4]
90005b38:	4613      	mov	r3, r2
90005b3a:	011b      	lsls	r3, r3, #4
90005b3c:	1a9b      	subs	r3, r3, r2
90005b3e:	009b      	lsls	r3, r3, #2
90005b40:	440b      	add	r3, r1
90005b42:	334d      	adds	r3, #77	@ 0x4d
90005b44:	2202      	movs	r2, #2
90005b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005b48:	78fa      	ldrb	r2, [r7, #3]
90005b4a:	6879      	ldr	r1, [r7, #4]
90005b4c:	4613      	mov	r3, r2
90005b4e:	011b      	lsls	r3, r3, #4
90005b50:	1a9b      	subs	r3, r3, r2
90005b52:	009b      	lsls	r3, r3, #2
90005b54:	440b      	add	r3, r1
90005b56:	334c      	adds	r3, #76	@ 0x4c
90005b58:	2201      	movs	r2, #1
90005b5a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005b5c:	78fa      	ldrb	r2, [r7, #3]
90005b5e:	6879      	ldr	r1, [r7, #4]
90005b60:	4613      	mov	r3, r2
90005b62:	011b      	lsls	r3, r3, #4
90005b64:	1a9b      	subs	r3, r3, r2
90005b66:	009b      	lsls	r3, r3, #2
90005b68:	440b      	add	r3, r1
90005b6a:	3326      	adds	r3, #38	@ 0x26
90005b6c:	781b      	ldrb	r3, [r3, #0]
90005b6e:	2b02      	cmp	r3, #2
90005b70:	d00b      	beq.n	90005b8a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
90005b72:	78fa      	ldrb	r2, [r7, #3]
90005b74:	6879      	ldr	r1, [r7, #4]
90005b76:	4613      	mov	r3, r2
90005b78:	011b      	lsls	r3, r3, #4
90005b7a:	1a9b      	subs	r3, r3, r2
90005b7c:	009b      	lsls	r3, r3, #2
90005b7e:	440b      	add	r3, r1
90005b80:	3326      	adds	r3, #38	@ 0x26
90005b82:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005b84:	2b03      	cmp	r3, #3
90005b86:	f040 8190 	bne.w	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
90005b8a:	687b      	ldr	r3, [r7, #4]
90005b8c:	799b      	ldrb	r3, [r3, #6]
90005b8e:	2b00      	cmp	r3, #0
90005b90:	d115      	bne.n	90005bbe <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
90005b92:	78fa      	ldrb	r2, [r7, #3]
90005b94:	6879      	ldr	r1, [r7, #4]
90005b96:	4613      	mov	r3, r2
90005b98:	011b      	lsls	r3, r3, #4
90005b9a:	1a9b      	subs	r3, r3, r2
90005b9c:	009b      	lsls	r3, r3, #2
90005b9e:	440b      	add	r3, r1
90005ba0:	333d      	adds	r3, #61	@ 0x3d
90005ba2:	781b      	ldrb	r3, [r3, #0]
90005ba4:	78fa      	ldrb	r2, [r7, #3]
90005ba6:	f083 0301 	eor.w	r3, r3, #1
90005baa:	b2d8      	uxtb	r0, r3
90005bac:	6879      	ldr	r1, [r7, #4]
90005bae:	4613      	mov	r3, r2
90005bb0:	011b      	lsls	r3, r3, #4
90005bb2:	1a9b      	subs	r3, r3, r2
90005bb4:	009b      	lsls	r3, r3, #2
90005bb6:	440b      	add	r3, r1
90005bb8:	333d      	adds	r3, #61	@ 0x3d
90005bba:	4602      	mov	r2, r0
90005bbc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
90005bbe:	687b      	ldr	r3, [r7, #4]
90005bc0:	799b      	ldrb	r3, [r3, #6]
90005bc2:	2b01      	cmp	r3, #1
90005bc4:	f040 8171 	bne.w	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
90005bc8:	78fa      	ldrb	r2, [r7, #3]
90005bca:	6879      	ldr	r1, [r7, #4]
90005bcc:	4613      	mov	r3, r2
90005bce:	011b      	lsls	r3, r3, #4
90005bd0:	1a9b      	subs	r3, r3, r2
90005bd2:	009b      	lsls	r3, r3, #2
90005bd4:	440b      	add	r3, r1
90005bd6:	3334      	adds	r3, #52	@ 0x34
90005bd8:	681b      	ldr	r3, [r3, #0]
90005bda:	2b00      	cmp	r3, #0
90005bdc:	f000 8165 	beq.w	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
90005be0:	78fa      	ldrb	r2, [r7, #3]
90005be2:	6879      	ldr	r1, [r7, #4]
90005be4:	4613      	mov	r3, r2
90005be6:	011b      	lsls	r3, r3, #4
90005be8:	1a9b      	subs	r3, r3, r2
90005bea:	009b      	lsls	r3, r3, #2
90005bec:	440b      	add	r3, r1
90005bee:	3334      	adds	r3, #52	@ 0x34
90005bf0:	6819      	ldr	r1, [r3, #0]
90005bf2:	78fa      	ldrb	r2, [r7, #3]
90005bf4:	6878      	ldr	r0, [r7, #4]
90005bf6:	4613      	mov	r3, r2
90005bf8:	011b      	lsls	r3, r3, #4
90005bfa:	1a9b      	subs	r3, r3, r2
90005bfc:	009b      	lsls	r3, r3, #2
90005bfe:	4403      	add	r3, r0
90005c00:	3328      	adds	r3, #40	@ 0x28
90005c02:	881b      	ldrh	r3, [r3, #0]
90005c04:	440b      	add	r3, r1
90005c06:	1e59      	subs	r1, r3, #1
90005c08:	78fa      	ldrb	r2, [r7, #3]
90005c0a:	6878      	ldr	r0, [r7, #4]
90005c0c:	4613      	mov	r3, r2
90005c0e:	011b      	lsls	r3, r3, #4
90005c10:	1a9b      	subs	r3, r3, r2
90005c12:	009b      	lsls	r3, r3, #2
90005c14:	4403      	add	r3, r0
90005c16:	3328      	adds	r3, #40	@ 0x28
90005c18:	881b      	ldrh	r3, [r3, #0]
90005c1a:	fbb1 f3f3 	udiv	r3, r1, r3
90005c1e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
90005c20:	68bb      	ldr	r3, [r7, #8]
90005c22:	f003 0301 	and.w	r3, r3, #1
90005c26:	2b00      	cmp	r3, #0
90005c28:	f000 813f 	beq.w	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005c2c:	78fa      	ldrb	r2, [r7, #3]
90005c2e:	6879      	ldr	r1, [r7, #4]
90005c30:	4613      	mov	r3, r2
90005c32:	011b      	lsls	r3, r3, #4
90005c34:	1a9b      	subs	r3, r3, r2
90005c36:	009b      	lsls	r3, r3, #2
90005c38:	440b      	add	r3, r1
90005c3a:	333d      	adds	r3, #61	@ 0x3d
90005c3c:	781b      	ldrb	r3, [r3, #0]
90005c3e:	78fa      	ldrb	r2, [r7, #3]
90005c40:	f083 0301 	eor.w	r3, r3, #1
90005c44:	b2d8      	uxtb	r0, r3
90005c46:	6879      	ldr	r1, [r7, #4]
90005c48:	4613      	mov	r3, r2
90005c4a:	011b      	lsls	r3, r3, #4
90005c4c:	1a9b      	subs	r3, r3, r2
90005c4e:	009b      	lsls	r3, r3, #2
90005c50:	440b      	add	r3, r1
90005c52:	333d      	adds	r3, #61	@ 0x3d
90005c54:	4602      	mov	r2, r0
90005c56:	701a      	strb	r2, [r3, #0]
90005c58:	e127      	b.n	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005c5a:	78fa      	ldrb	r2, [r7, #3]
90005c5c:	6879      	ldr	r1, [r7, #4]
90005c5e:	4613      	mov	r3, r2
90005c60:	011b      	lsls	r3, r3, #4
90005c62:	1a9b      	subs	r3, r3, r2
90005c64:	009b      	lsls	r3, r3, #2
90005c66:	440b      	add	r3, r1
90005c68:	334d      	adds	r3, #77	@ 0x4d
90005c6a:	781b      	ldrb	r3, [r3, #0]
90005c6c:	2b03      	cmp	r3, #3
90005c6e:	d120      	bne.n	90005cb2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005c70:	78fa      	ldrb	r2, [r7, #3]
90005c72:	6879      	ldr	r1, [r7, #4]
90005c74:	4613      	mov	r3, r2
90005c76:	011b      	lsls	r3, r3, #4
90005c78:	1a9b      	subs	r3, r3, r2
90005c7a:	009b      	lsls	r3, r3, #2
90005c7c:	440b      	add	r3, r1
90005c7e:	334d      	adds	r3, #77	@ 0x4d
90005c80:	2202      	movs	r2, #2
90005c82:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005c84:	78fa      	ldrb	r2, [r7, #3]
90005c86:	6879      	ldr	r1, [r7, #4]
90005c88:	4613      	mov	r3, r2
90005c8a:	011b      	lsls	r3, r3, #4
90005c8c:	1a9b      	subs	r3, r3, r2
90005c8e:	009b      	lsls	r3, r3, #2
90005c90:	440b      	add	r3, r1
90005c92:	331b      	adds	r3, #27
90005c94:	781b      	ldrb	r3, [r3, #0]
90005c96:	2b01      	cmp	r3, #1
90005c98:	f040 8107 	bne.w	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005c9c:	78fa      	ldrb	r2, [r7, #3]
90005c9e:	6879      	ldr	r1, [r7, #4]
90005ca0:	4613      	mov	r3, r2
90005ca2:	011b      	lsls	r3, r3, #4
90005ca4:	1a9b      	subs	r3, r3, r2
90005ca6:	009b      	lsls	r3, r3, #2
90005ca8:	440b      	add	r3, r1
90005caa:	334c      	adds	r3, #76	@ 0x4c
90005cac:	2202      	movs	r2, #2
90005cae:	701a      	strb	r2, [r3, #0]
90005cb0:	e0fb      	b.n	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005cb2:	78fa      	ldrb	r2, [r7, #3]
90005cb4:	6879      	ldr	r1, [r7, #4]
90005cb6:	4613      	mov	r3, r2
90005cb8:	011b      	lsls	r3, r3, #4
90005cba:	1a9b      	subs	r3, r3, r2
90005cbc:	009b      	lsls	r3, r3, #2
90005cbe:	440b      	add	r3, r1
90005cc0:	334d      	adds	r3, #77	@ 0x4d
90005cc2:	781b      	ldrb	r3, [r3, #0]
90005cc4:	2b04      	cmp	r3, #4
90005cc6:	d13a      	bne.n	90005d3e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005cc8:	78fa      	ldrb	r2, [r7, #3]
90005cca:	6879      	ldr	r1, [r7, #4]
90005ccc:	4613      	mov	r3, r2
90005cce:	011b      	lsls	r3, r3, #4
90005cd0:	1a9b      	subs	r3, r3, r2
90005cd2:	009b      	lsls	r3, r3, #2
90005cd4:	440b      	add	r3, r1
90005cd6:	334d      	adds	r3, #77	@ 0x4d
90005cd8:	2202      	movs	r2, #2
90005cda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005cdc:	78fa      	ldrb	r2, [r7, #3]
90005cde:	6879      	ldr	r1, [r7, #4]
90005ce0:	4613      	mov	r3, r2
90005ce2:	011b      	lsls	r3, r3, #4
90005ce4:	1a9b      	subs	r3, r3, r2
90005ce6:	009b      	lsls	r3, r3, #2
90005ce8:	440b      	add	r3, r1
90005cea:	334c      	adds	r3, #76	@ 0x4c
90005cec:	2202      	movs	r2, #2
90005cee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005cf0:	78fa      	ldrb	r2, [r7, #3]
90005cf2:	6879      	ldr	r1, [r7, #4]
90005cf4:	4613      	mov	r3, r2
90005cf6:	011b      	lsls	r3, r3, #4
90005cf8:	1a9b      	subs	r3, r3, r2
90005cfa:	009b      	lsls	r3, r3, #2
90005cfc:	440b      	add	r3, r1
90005cfe:	331b      	adds	r3, #27
90005d00:	781b      	ldrb	r3, [r3, #0]
90005d02:	2b01      	cmp	r3, #1
90005d04:	f040 80d1 	bne.w	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
90005d08:	78fa      	ldrb	r2, [r7, #3]
90005d0a:	6879      	ldr	r1, [r7, #4]
90005d0c:	4613      	mov	r3, r2
90005d0e:	011b      	lsls	r3, r3, #4
90005d10:	1a9b      	subs	r3, r3, r2
90005d12:	009b      	lsls	r3, r3, #2
90005d14:	440b      	add	r3, r1
90005d16:	331b      	adds	r3, #27
90005d18:	2200      	movs	r2, #0
90005d1a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005d1c:	78fb      	ldrb	r3, [r7, #3]
90005d1e:	015a      	lsls	r2, r3, #5
90005d20:	693b      	ldr	r3, [r7, #16]
90005d22:	4413      	add	r3, r2
90005d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005d28:	685b      	ldr	r3, [r3, #4]
90005d2a:	78fa      	ldrb	r2, [r7, #3]
90005d2c:	0151      	lsls	r1, r2, #5
90005d2e:	693a      	ldr	r2, [r7, #16]
90005d30:	440a      	add	r2, r1
90005d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005d3a:	6053      	str	r3, [r2, #4]
90005d3c:	e0b5      	b.n	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90005d3e:	78fa      	ldrb	r2, [r7, #3]
90005d40:	6879      	ldr	r1, [r7, #4]
90005d42:	4613      	mov	r3, r2
90005d44:	011b      	lsls	r3, r3, #4
90005d46:	1a9b      	subs	r3, r3, r2
90005d48:	009b      	lsls	r3, r3, #2
90005d4a:	440b      	add	r3, r1
90005d4c:	334d      	adds	r3, #77	@ 0x4d
90005d4e:	781b      	ldrb	r3, [r3, #0]
90005d50:	2b05      	cmp	r3, #5
90005d52:	d114      	bne.n	90005d7e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005d54:	78fa      	ldrb	r2, [r7, #3]
90005d56:	6879      	ldr	r1, [r7, #4]
90005d58:	4613      	mov	r3, r2
90005d5a:	011b      	lsls	r3, r3, #4
90005d5c:	1a9b      	subs	r3, r3, r2
90005d5e:	009b      	lsls	r3, r3, #2
90005d60:	440b      	add	r3, r1
90005d62:	334d      	adds	r3, #77	@ 0x4d
90005d64:	2202      	movs	r2, #2
90005d66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005d68:	78fa      	ldrb	r2, [r7, #3]
90005d6a:	6879      	ldr	r1, [r7, #4]
90005d6c:	4613      	mov	r3, r2
90005d6e:	011b      	lsls	r3, r3, #4
90005d70:	1a9b      	subs	r3, r3, r2
90005d72:	009b      	lsls	r3, r3, #2
90005d74:	440b      	add	r3, r1
90005d76:	334c      	adds	r3, #76	@ 0x4c
90005d78:	2202      	movs	r2, #2
90005d7a:	701a      	strb	r2, [r3, #0]
90005d7c:	e095      	b.n	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005d7e:	78fa      	ldrb	r2, [r7, #3]
90005d80:	6879      	ldr	r1, [r7, #4]
90005d82:	4613      	mov	r3, r2
90005d84:	011b      	lsls	r3, r3, #4
90005d86:	1a9b      	subs	r3, r3, r2
90005d88:	009b      	lsls	r3, r3, #2
90005d8a:	440b      	add	r3, r1
90005d8c:	334d      	adds	r3, #77	@ 0x4d
90005d8e:	781b      	ldrb	r3, [r3, #0]
90005d90:	2b06      	cmp	r3, #6
90005d92:	d114      	bne.n	90005dbe <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005d94:	78fa      	ldrb	r2, [r7, #3]
90005d96:	6879      	ldr	r1, [r7, #4]
90005d98:	4613      	mov	r3, r2
90005d9a:	011b      	lsls	r3, r3, #4
90005d9c:	1a9b      	subs	r3, r3, r2
90005d9e:	009b      	lsls	r3, r3, #2
90005da0:	440b      	add	r3, r1
90005da2:	334d      	adds	r3, #77	@ 0x4d
90005da4:	2202      	movs	r2, #2
90005da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
90005da8:	78fa      	ldrb	r2, [r7, #3]
90005daa:	6879      	ldr	r1, [r7, #4]
90005dac:	4613      	mov	r3, r2
90005dae:	011b      	lsls	r3, r3, #4
90005db0:	1a9b      	subs	r3, r3, r2
90005db2:	009b      	lsls	r3, r3, #2
90005db4:	440b      	add	r3, r1
90005db6:	334c      	adds	r3, #76	@ 0x4c
90005db8:	2205      	movs	r2, #5
90005dba:	701a      	strb	r2, [r3, #0]
90005dbc:	e075      	b.n	90005eaa <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005dbe:	78fa      	ldrb	r2, [r7, #3]
90005dc0:	6879      	ldr	r1, [r7, #4]
90005dc2:	4613      	mov	r3, r2
90005dc4:	011b      	lsls	r3, r3, #4
90005dc6:	1a9b      	subs	r3, r3, r2
90005dc8:	009b      	lsls	r3, r3, #2
90005dca:	440b      	add	r3, r1
90005dcc:	334d      	adds	r3, #77	@ 0x4d
90005dce:	781b      	ldrb	r3, [r3, #0]
90005dd0:	2b07      	cmp	r3, #7
90005dd2:	d00a      	beq.n	90005dea <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005dd4:	78fa      	ldrb	r2, [r7, #3]
90005dd6:	6879      	ldr	r1, [r7, #4]
90005dd8:	4613      	mov	r3, r2
90005dda:	011b      	lsls	r3, r3, #4
90005ddc:	1a9b      	subs	r3, r3, r2
90005dde:	009b      	lsls	r3, r3, #2
90005de0:	440b      	add	r3, r1
90005de2:	334d      	adds	r3, #77	@ 0x4d
90005de4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005de6:	2b09      	cmp	r3, #9
90005de8:	d170      	bne.n	90005ecc <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005dea:	78fa      	ldrb	r2, [r7, #3]
90005dec:	6879      	ldr	r1, [r7, #4]
90005dee:	4613      	mov	r3, r2
90005df0:	011b      	lsls	r3, r3, #4
90005df2:	1a9b      	subs	r3, r3, r2
90005df4:	009b      	lsls	r3, r3, #2
90005df6:	440b      	add	r3, r1
90005df8:	334d      	adds	r3, #77	@ 0x4d
90005dfa:	2202      	movs	r2, #2
90005dfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90005dfe:	78fa      	ldrb	r2, [r7, #3]
90005e00:	6879      	ldr	r1, [r7, #4]
90005e02:	4613      	mov	r3, r2
90005e04:	011b      	lsls	r3, r3, #4
90005e06:	1a9b      	subs	r3, r3, r2
90005e08:	009b      	lsls	r3, r3, #2
90005e0a:	440b      	add	r3, r1
90005e0c:	3344      	adds	r3, #68	@ 0x44
90005e0e:	681b      	ldr	r3, [r3, #0]
90005e10:	1c59      	adds	r1, r3, #1
90005e12:	6878      	ldr	r0, [r7, #4]
90005e14:	4613      	mov	r3, r2
90005e16:	011b      	lsls	r3, r3, #4
90005e18:	1a9b      	subs	r3, r3, r2
90005e1a:	009b      	lsls	r3, r3, #2
90005e1c:	4403      	add	r3, r0
90005e1e:	3344      	adds	r3, #68	@ 0x44
90005e20:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005e22:	78fa      	ldrb	r2, [r7, #3]
90005e24:	6879      	ldr	r1, [r7, #4]
90005e26:	4613      	mov	r3, r2
90005e28:	011b      	lsls	r3, r3, #4
90005e2a:	1a9b      	subs	r3, r3, r2
90005e2c:	009b      	lsls	r3, r3, #2
90005e2e:	440b      	add	r3, r1
90005e30:	3344      	adds	r3, #68	@ 0x44
90005e32:	681b      	ldr	r3, [r3, #0]
90005e34:	2b02      	cmp	r3, #2
90005e36:	d914      	bls.n	90005e62 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005e38:	78fa      	ldrb	r2, [r7, #3]
90005e3a:	6879      	ldr	r1, [r7, #4]
90005e3c:	4613      	mov	r3, r2
90005e3e:	011b      	lsls	r3, r3, #4
90005e40:	1a9b      	subs	r3, r3, r2
90005e42:	009b      	lsls	r3, r3, #2
90005e44:	440b      	add	r3, r1
90005e46:	3344      	adds	r3, #68	@ 0x44
90005e48:	2200      	movs	r2, #0
90005e4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005e4c:	78fa      	ldrb	r2, [r7, #3]
90005e4e:	6879      	ldr	r1, [r7, #4]
90005e50:	4613      	mov	r3, r2
90005e52:	011b      	lsls	r3, r3, #4
90005e54:	1a9b      	subs	r3, r3, r2
90005e56:	009b      	lsls	r3, r3, #2
90005e58:	440b      	add	r3, r1
90005e5a:	334c      	adds	r3, #76	@ 0x4c
90005e5c:	2204      	movs	r2, #4
90005e5e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005e60:	e022      	b.n	90005ea8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005e62:	78fa      	ldrb	r2, [r7, #3]
90005e64:	6879      	ldr	r1, [r7, #4]
90005e66:	4613      	mov	r3, r2
90005e68:	011b      	lsls	r3, r3, #4
90005e6a:	1a9b      	subs	r3, r3, r2
90005e6c:	009b      	lsls	r3, r3, #2
90005e6e:	440b      	add	r3, r1
90005e70:	334c      	adds	r3, #76	@ 0x4c
90005e72:	2202      	movs	r2, #2
90005e74:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005e76:	78fb      	ldrb	r3, [r7, #3]
90005e78:	015a      	lsls	r2, r3, #5
90005e7a:	693b      	ldr	r3, [r7, #16]
90005e7c:	4413      	add	r3, r2
90005e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005e82:	681b      	ldr	r3, [r3, #0]
90005e84:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005e86:	68fb      	ldr	r3, [r7, #12]
90005e88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005e8c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005e8e:	68fb      	ldr	r3, [r7, #12]
90005e90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005e94:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005e96:	78fb      	ldrb	r3, [r7, #3]
90005e98:	015a      	lsls	r2, r3, #5
90005e9a:	693b      	ldr	r3, [r7, #16]
90005e9c:	4413      	add	r3, r2
90005e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005ea2:	461a      	mov	r2, r3
90005ea4:	68fb      	ldr	r3, [r7, #12]
90005ea6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005ea8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005eaa:	78fa      	ldrb	r2, [r7, #3]
90005eac:	6879      	ldr	r1, [r7, #4]
90005eae:	4613      	mov	r3, r2
90005eb0:	011b      	lsls	r3, r3, #4
90005eb2:	1a9b      	subs	r3, r3, r2
90005eb4:	009b      	lsls	r3, r3, #2
90005eb6:	440b      	add	r3, r1
90005eb8:	334c      	adds	r3, #76	@ 0x4c
90005eba:	781a      	ldrb	r2, [r3, #0]
90005ebc:	78fb      	ldrb	r3, [r7, #3]
90005ebe:	4619      	mov	r1, r3
90005ec0:	6878      	ldr	r0, [r7, #4]
90005ec2:	f7fb f8a9 	bl	90001018 <HAL_HCD_HC_NotifyURBChange_Callback>
90005ec6:	e002      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005ec8:	bf00      	nop
90005eca:	e000      	b.n	90005ece <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005ecc:	bf00      	nop
  }
}
90005ece:	3718      	adds	r7, #24
90005ed0:	46bd      	mov	sp, r7
90005ed2:	bd80      	pop	{r7, pc}

90005ed4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005ed4:	b580      	push	{r7, lr}
90005ed6:	b08a      	sub	sp, #40	@ 0x28
90005ed8:	af00      	add	r7, sp, #0
90005eda:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005edc:	687b      	ldr	r3, [r7, #4]
90005ede:	681b      	ldr	r3, [r3, #0]
90005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
90005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005ee4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005ee6:	687b      	ldr	r3, [r7, #4]
90005ee8:	681b      	ldr	r3, [r3, #0]
90005eea:	6a1b      	ldr	r3, [r3, #32]
90005eec:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
90005eee:	69fb      	ldr	r3, [r7, #28]
90005ef0:	f003 030f 	and.w	r3, r3, #15
90005ef4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005ef6:	69fb      	ldr	r3, [r7, #28]
90005ef8:	0c5b      	lsrs	r3, r3, #17
90005efa:	f003 030f 	and.w	r3, r3, #15
90005efe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
90005f00:	69fb      	ldr	r3, [r7, #28]
90005f02:	091b      	lsrs	r3, r3, #4
90005f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
90005f08:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90005f0a:	697b      	ldr	r3, [r7, #20]
90005f0c:	2b02      	cmp	r3, #2
90005f0e:	d004      	beq.n	90005f1a <HCD_RXQLVL_IRQHandler+0x46>
90005f10:	697b      	ldr	r3, [r7, #20]
90005f12:	2b05      	cmp	r3, #5
90005f14:	f000 80b6 	beq.w	90006084 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90005f18:	e0b7      	b.n	9000608a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
90005f1a:	693b      	ldr	r3, [r7, #16]
90005f1c:	2b00      	cmp	r3, #0
90005f1e:	f000 80b3 	beq.w	90006088 <HCD_RXQLVL_IRQHandler+0x1b4>
90005f22:	6879      	ldr	r1, [r7, #4]
90005f24:	69ba      	ldr	r2, [r7, #24]
90005f26:	4613      	mov	r3, r2
90005f28:	011b      	lsls	r3, r3, #4
90005f2a:	1a9b      	subs	r3, r3, r2
90005f2c:	009b      	lsls	r3, r3, #2
90005f2e:	440b      	add	r3, r1
90005f30:	332c      	adds	r3, #44	@ 0x2c
90005f32:	681b      	ldr	r3, [r3, #0]
90005f34:	2b00      	cmp	r3, #0
90005f36:	f000 80a7 	beq.w	90006088 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
90005f3a:	6879      	ldr	r1, [r7, #4]
90005f3c:	69ba      	ldr	r2, [r7, #24]
90005f3e:	4613      	mov	r3, r2
90005f40:	011b      	lsls	r3, r3, #4
90005f42:	1a9b      	subs	r3, r3, r2
90005f44:	009b      	lsls	r3, r3, #2
90005f46:	440b      	add	r3, r1
90005f48:	3338      	adds	r3, #56	@ 0x38
90005f4a:	681a      	ldr	r2, [r3, #0]
90005f4c:	693b      	ldr	r3, [r7, #16]
90005f4e:	18d1      	adds	r1, r2, r3
90005f50:	6878      	ldr	r0, [r7, #4]
90005f52:	69ba      	ldr	r2, [r7, #24]
90005f54:	4613      	mov	r3, r2
90005f56:	011b      	lsls	r3, r3, #4
90005f58:	1a9b      	subs	r3, r3, r2
90005f5a:	009b      	lsls	r3, r3, #2
90005f5c:	4403      	add	r3, r0
90005f5e:	3334      	adds	r3, #52	@ 0x34
90005f60:	681b      	ldr	r3, [r3, #0]
90005f62:	4299      	cmp	r1, r3
90005f64:	f200 8083 	bhi.w	9000606e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005f68:	687b      	ldr	r3, [r7, #4]
90005f6a:	6818      	ldr	r0, [r3, #0]
90005f6c:	6879      	ldr	r1, [r7, #4]
90005f6e:	69ba      	ldr	r2, [r7, #24]
90005f70:	4613      	mov	r3, r2
90005f72:	011b      	lsls	r3, r3, #4
90005f74:	1a9b      	subs	r3, r3, r2
90005f76:	009b      	lsls	r3, r3, #2
90005f78:	440b      	add	r3, r1
90005f7a:	332c      	adds	r3, #44	@ 0x2c
90005f7c:	681b      	ldr	r3, [r3, #0]
90005f7e:	693a      	ldr	r2, [r7, #16]
90005f80:	b292      	uxth	r2, r2
90005f82:	4619      	mov	r1, r3
90005f84:	f005 fe1a 	bl	9000bbbc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90005f88:	6879      	ldr	r1, [r7, #4]
90005f8a:	69ba      	ldr	r2, [r7, #24]
90005f8c:	4613      	mov	r3, r2
90005f8e:	011b      	lsls	r3, r3, #4
90005f90:	1a9b      	subs	r3, r3, r2
90005f92:	009b      	lsls	r3, r3, #2
90005f94:	440b      	add	r3, r1
90005f96:	332c      	adds	r3, #44	@ 0x2c
90005f98:	681a      	ldr	r2, [r3, #0]
90005f9a:	693b      	ldr	r3, [r7, #16]
90005f9c:	18d1      	adds	r1, r2, r3
90005f9e:	6878      	ldr	r0, [r7, #4]
90005fa0:	69ba      	ldr	r2, [r7, #24]
90005fa2:	4613      	mov	r3, r2
90005fa4:	011b      	lsls	r3, r3, #4
90005fa6:	1a9b      	subs	r3, r3, r2
90005fa8:	009b      	lsls	r3, r3, #2
90005faa:	4403      	add	r3, r0
90005fac:	332c      	adds	r3, #44	@ 0x2c
90005fae:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005fb0:	6879      	ldr	r1, [r7, #4]
90005fb2:	69ba      	ldr	r2, [r7, #24]
90005fb4:	4613      	mov	r3, r2
90005fb6:	011b      	lsls	r3, r3, #4
90005fb8:	1a9b      	subs	r3, r3, r2
90005fba:	009b      	lsls	r3, r3, #2
90005fbc:	440b      	add	r3, r1
90005fbe:	3338      	adds	r3, #56	@ 0x38
90005fc0:	681a      	ldr	r2, [r3, #0]
90005fc2:	693b      	ldr	r3, [r7, #16]
90005fc4:	18d1      	adds	r1, r2, r3
90005fc6:	6878      	ldr	r0, [r7, #4]
90005fc8:	69ba      	ldr	r2, [r7, #24]
90005fca:	4613      	mov	r3, r2
90005fcc:	011b      	lsls	r3, r3, #4
90005fce:	1a9b      	subs	r3, r3, r2
90005fd0:	009b      	lsls	r3, r3, #2
90005fd2:	4403      	add	r3, r0
90005fd4:	3338      	adds	r3, #56	@ 0x38
90005fd6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005fd8:	69bb      	ldr	r3, [r7, #24]
90005fda:	015a      	lsls	r2, r3, #5
90005fdc:	6a3b      	ldr	r3, [r7, #32]
90005fde:	4413      	add	r3, r2
90005fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005fe4:	691b      	ldr	r3, [r3, #16]
90005fe6:	0cdb      	lsrs	r3, r3, #19
90005fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005fec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90005fee:	6879      	ldr	r1, [r7, #4]
90005ff0:	69ba      	ldr	r2, [r7, #24]
90005ff2:	4613      	mov	r3, r2
90005ff4:	011b      	lsls	r3, r3, #4
90005ff6:	1a9b      	subs	r3, r3, r2
90005ff8:	009b      	lsls	r3, r3, #2
90005ffa:	440b      	add	r3, r1
90005ffc:	3328      	adds	r3, #40	@ 0x28
90005ffe:	881b      	ldrh	r3, [r3, #0]
90006000:	461a      	mov	r2, r3
90006002:	693b      	ldr	r3, [r7, #16]
90006004:	4293      	cmp	r3, r2
90006006:	d13f      	bne.n	90006088 <HCD_RXQLVL_IRQHandler+0x1b4>
90006008:	68fb      	ldr	r3, [r7, #12]
9000600a:	2b00      	cmp	r3, #0
9000600c:	d03c      	beq.n	90006088 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
9000600e:	69bb      	ldr	r3, [r7, #24]
90006010:	015a      	lsls	r2, r3, #5
90006012:	6a3b      	ldr	r3, [r7, #32]
90006014:	4413      	add	r3, r2
90006016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000601a:	681b      	ldr	r3, [r3, #0]
9000601c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000601e:	68bb      	ldr	r3, [r7, #8]
90006020:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90006024:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90006026:	68bb      	ldr	r3, [r7, #8]
90006028:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000602c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
9000602e:	69bb      	ldr	r3, [r7, #24]
90006030:	015a      	lsls	r2, r3, #5
90006032:	6a3b      	ldr	r3, [r7, #32]
90006034:	4413      	add	r3, r2
90006036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000603a:	461a      	mov	r2, r3
9000603c:	68bb      	ldr	r3, [r7, #8]
9000603e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90006040:	6879      	ldr	r1, [r7, #4]
90006042:	69ba      	ldr	r2, [r7, #24]
90006044:	4613      	mov	r3, r2
90006046:	011b      	lsls	r3, r3, #4
90006048:	1a9b      	subs	r3, r3, r2
9000604a:	009b      	lsls	r3, r3, #2
9000604c:	440b      	add	r3, r1
9000604e:	333c      	adds	r3, #60	@ 0x3c
90006050:	781b      	ldrb	r3, [r3, #0]
90006052:	f083 0301 	eor.w	r3, r3, #1
90006056:	b2d8      	uxtb	r0, r3
90006058:	6879      	ldr	r1, [r7, #4]
9000605a:	69ba      	ldr	r2, [r7, #24]
9000605c:	4613      	mov	r3, r2
9000605e:	011b      	lsls	r3, r3, #4
90006060:	1a9b      	subs	r3, r3, r2
90006062:	009b      	lsls	r3, r3, #2
90006064:	440b      	add	r3, r1
90006066:	333c      	adds	r3, #60	@ 0x3c
90006068:	4602      	mov	r2, r0
9000606a:	701a      	strb	r2, [r3, #0]
      break;
9000606c:	e00c      	b.n	90006088 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
9000606e:	6879      	ldr	r1, [r7, #4]
90006070:	69ba      	ldr	r2, [r7, #24]
90006072:	4613      	mov	r3, r2
90006074:	011b      	lsls	r3, r3, #4
90006076:	1a9b      	subs	r3, r3, r2
90006078:	009b      	lsls	r3, r3, #2
9000607a:	440b      	add	r3, r1
9000607c:	334c      	adds	r3, #76	@ 0x4c
9000607e:	2204      	movs	r2, #4
90006080:	701a      	strb	r2, [r3, #0]
      break;
90006082:	e001      	b.n	90006088 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90006084:	bf00      	nop
90006086:	e000      	b.n	9000608a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90006088:	bf00      	nop
  }
}
9000608a:	bf00      	nop
9000608c:	3728      	adds	r7, #40	@ 0x28
9000608e:	46bd      	mov	sp, r7
90006090:	bd80      	pop	{r7, pc}

90006092 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90006092:	b580      	push	{r7, lr}
90006094:	b086      	sub	sp, #24
90006096:	af00      	add	r7, sp, #0
90006098:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000609a:	687b      	ldr	r3, [r7, #4]
9000609c:	681b      	ldr	r3, [r3, #0]
9000609e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900060a0:	697b      	ldr	r3, [r7, #20]
900060a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
900060a4:	693b      	ldr	r3, [r7, #16]
900060a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900060aa:	681b      	ldr	r3, [r3, #0]
900060ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
900060ae:	693b      	ldr	r3, [r7, #16]
900060b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900060b4:	681b      	ldr	r3, [r3, #0]
900060b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900060b8:	68bb      	ldr	r3, [r7, #8]
900060ba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
900060be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900060c0:	68fb      	ldr	r3, [r7, #12]
900060c2:	f003 0302 	and.w	r3, r3, #2
900060c6:	2b02      	cmp	r3, #2
900060c8:	d10b      	bne.n	900060e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
900060ca:	68fb      	ldr	r3, [r7, #12]
900060cc:	f003 0301 	and.w	r3, r3, #1
900060d0:	2b01      	cmp	r3, #1
900060d2:	d102      	bne.n	900060da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
900060d4:	6878      	ldr	r0, [r7, #4]
900060d6:	f7fa ff67 	bl	90000fa8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
900060da:	68bb      	ldr	r3, [r7, #8]
900060dc:	f043 0302 	orr.w	r3, r3, #2
900060e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900060e2:	68fb      	ldr	r3, [r7, #12]
900060e4:	f003 0308 	and.w	r3, r3, #8
900060e8:	2b08      	cmp	r3, #8
900060ea:	d132      	bne.n	90006152 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
900060ec:	68bb      	ldr	r3, [r7, #8]
900060ee:	f043 0308 	orr.w	r3, r3, #8
900060f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
900060f4:	68fb      	ldr	r3, [r7, #12]
900060f6:	f003 0304 	and.w	r3, r3, #4
900060fa:	2b04      	cmp	r3, #4
900060fc:	d126      	bne.n	9000614c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900060fe:	687b      	ldr	r3, [r7, #4]
90006100:	7a5b      	ldrb	r3, [r3, #9]
90006102:	2b02      	cmp	r3, #2
90006104:	d113      	bne.n	9000612e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90006106:	68fb      	ldr	r3, [r7, #12]
90006108:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
9000610c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90006110:	d106      	bne.n	90006120 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90006112:	687b      	ldr	r3, [r7, #4]
90006114:	681b      	ldr	r3, [r3, #0]
90006116:	2102      	movs	r1, #2
90006118:	4618      	mov	r0, r3
9000611a:	f005 fde9 	bl	9000bcf0 <USB_InitFSLSPClkSel>
9000611e:	e011      	b.n	90006144 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90006120:	687b      	ldr	r3, [r7, #4]
90006122:	681b      	ldr	r3, [r3, #0]
90006124:	2101      	movs	r1, #1
90006126:	4618      	mov	r0, r3
90006128:	f005 fde2 	bl	9000bcf0 <USB_InitFSLSPClkSel>
9000612c:	e00a      	b.n	90006144 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
9000612e:	687b      	ldr	r3, [r7, #4]
90006130:	79db      	ldrb	r3, [r3, #7]
90006132:	2b01      	cmp	r3, #1
90006134:	d106      	bne.n	90006144 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90006136:	693b      	ldr	r3, [r7, #16]
90006138:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000613c:	461a      	mov	r2, r3
9000613e:	f64e 2360 	movw	r3, #60000	@ 0xea60
90006142:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90006144:	6878      	ldr	r0, [r7, #4]
90006146:	f7fa ff4b 	bl	90000fe0 <HAL_HCD_PortEnabled_Callback>
9000614a:	e002      	b.n	90006152 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
9000614c:	6878      	ldr	r0, [r7, #4]
9000614e:	f7fa ff55 	bl	90000ffc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90006152:	68fb      	ldr	r3, [r7, #12]
90006154:	f003 0320 	and.w	r3, r3, #32
90006158:	2b20      	cmp	r3, #32
9000615a:	d103      	bne.n	90006164 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
9000615c:	68bb      	ldr	r3, [r7, #8]
9000615e:	f043 0320 	orr.w	r3, r3, #32
90006162:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90006164:	693b      	ldr	r3, [r7, #16]
90006166:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000616a:	461a      	mov	r2, r3
9000616c:	68bb      	ldr	r3, [r7, #8]
9000616e:	6013      	str	r3, [r2, #0]
}
90006170:	bf00      	nop
90006172:	3718      	adds	r7, #24
90006174:	46bd      	mov	sp, r7
90006176:	bd80      	pop	{r7, pc}

90006178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90006178:	b580      	push	{r7, lr}
9000617a:	b082      	sub	sp, #8
9000617c:	af00      	add	r7, sp, #0
9000617e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90006180:	687b      	ldr	r3, [r7, #4]
90006182:	2b00      	cmp	r3, #0
90006184:	d101      	bne.n	9000618a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90006186:	2301      	movs	r3, #1
90006188:	e08b      	b.n	900062a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
9000618a:	687b      	ldr	r3, [r7, #4]
9000618c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006190:	b2db      	uxtb	r3, r3
90006192:	2b00      	cmp	r3, #0
90006194:	d106      	bne.n	900061a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90006196:	687b      	ldr	r3, [r7, #4]
90006198:	2200      	movs	r2, #0
9000619a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
9000619e:	6878      	ldr	r0, [r7, #4]
900061a0:	f000 f8b5 	bl	9000630e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
900061a4:	687b      	ldr	r3, [r7, #4]
900061a6:	2224      	movs	r2, #36	@ 0x24
900061a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
900061ac:	687b      	ldr	r3, [r7, #4]
900061ae:	681b      	ldr	r3, [r3, #0]
900061b0:	681a      	ldr	r2, [r3, #0]
900061b2:	687b      	ldr	r3, [r7, #4]
900061b4:	681b      	ldr	r3, [r3, #0]
900061b6:	f022 0201 	bic.w	r2, r2, #1
900061ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900061bc:	687b      	ldr	r3, [r7, #4]
900061be:	685a      	ldr	r2, [r3, #4]
900061c0:	687b      	ldr	r3, [r7, #4]
900061c2:	681b      	ldr	r3, [r3, #0]
900061c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
900061c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900061ca:	687b      	ldr	r3, [r7, #4]
900061cc:	681b      	ldr	r3, [r3, #0]
900061ce:	689a      	ldr	r2, [r3, #8]
900061d0:	687b      	ldr	r3, [r7, #4]
900061d2:	681b      	ldr	r3, [r3, #0]
900061d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
900061d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900061da:	687b      	ldr	r3, [r7, #4]
900061dc:	68db      	ldr	r3, [r3, #12]
900061de:	2b01      	cmp	r3, #1
900061e0:	d107      	bne.n	900061f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900061e2:	687b      	ldr	r3, [r7, #4]
900061e4:	689a      	ldr	r2, [r3, #8]
900061e6:	687b      	ldr	r3, [r7, #4]
900061e8:	681b      	ldr	r3, [r3, #0]
900061ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
900061ee:	609a      	str	r2, [r3, #8]
900061f0:	e006      	b.n	90006200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900061f2:	687b      	ldr	r3, [r7, #4]
900061f4:	689a      	ldr	r2, [r3, #8]
900061f6:	687b      	ldr	r3, [r7, #4]
900061f8:	681b      	ldr	r3, [r3, #0]
900061fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
900061fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90006200:	687b      	ldr	r3, [r7, #4]
90006202:	68db      	ldr	r3, [r3, #12]
90006204:	2b02      	cmp	r3, #2
90006206:	d108      	bne.n	9000621a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90006208:	687b      	ldr	r3, [r7, #4]
9000620a:	681b      	ldr	r3, [r3, #0]
9000620c:	685a      	ldr	r2, [r3, #4]
9000620e:	687b      	ldr	r3, [r7, #4]
90006210:	681b      	ldr	r3, [r3, #0]
90006212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90006216:	605a      	str	r2, [r3, #4]
90006218:	e007      	b.n	9000622a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
9000621a:	687b      	ldr	r3, [r7, #4]
9000621c:	681b      	ldr	r3, [r3, #0]
9000621e:	685a      	ldr	r2, [r3, #4]
90006220:	687b      	ldr	r3, [r7, #4]
90006222:	681b      	ldr	r3, [r3, #0]
90006224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90006228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000622a:	687b      	ldr	r3, [r7, #4]
9000622c:	681b      	ldr	r3, [r3, #0]
9000622e:	6859      	ldr	r1, [r3, #4]
90006230:	687b      	ldr	r3, [r7, #4]
90006232:	681a      	ldr	r2, [r3, #0]
90006234:	4b1d      	ldr	r3, [pc, #116]	@ (900062ac <HAL_I2C_Init+0x134>)
90006236:	430b      	orrs	r3, r1
90006238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000623a:	687b      	ldr	r3, [r7, #4]
9000623c:	681b      	ldr	r3, [r3, #0]
9000623e:	68da      	ldr	r2, [r3, #12]
90006240:	687b      	ldr	r3, [r7, #4]
90006242:	681b      	ldr	r3, [r3, #0]
90006244:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90006248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000624a:	687b      	ldr	r3, [r7, #4]
9000624c:	691a      	ldr	r2, [r3, #16]
9000624e:	687b      	ldr	r3, [r7, #4]
90006250:	695b      	ldr	r3, [r3, #20]
90006252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90006256:	687b      	ldr	r3, [r7, #4]
90006258:	699b      	ldr	r3, [r3, #24]
9000625a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000625c:	687b      	ldr	r3, [r7, #4]
9000625e:	681b      	ldr	r3, [r3, #0]
90006260:	430a      	orrs	r2, r1
90006262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90006264:	687b      	ldr	r3, [r7, #4]
90006266:	69d9      	ldr	r1, [r3, #28]
90006268:	687b      	ldr	r3, [r7, #4]
9000626a:	6a1a      	ldr	r2, [r3, #32]
9000626c:	687b      	ldr	r3, [r7, #4]
9000626e:	681b      	ldr	r3, [r3, #0]
90006270:	430a      	orrs	r2, r1
90006272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90006274:	687b      	ldr	r3, [r7, #4]
90006276:	681b      	ldr	r3, [r3, #0]
90006278:	681a      	ldr	r2, [r3, #0]
9000627a:	687b      	ldr	r3, [r7, #4]
9000627c:	681b      	ldr	r3, [r3, #0]
9000627e:	f042 0201 	orr.w	r2, r2, #1
90006282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90006284:	687b      	ldr	r3, [r7, #4]
90006286:	2200      	movs	r2, #0
90006288:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
9000628a:	687b      	ldr	r3, [r7, #4]
9000628c:	2220      	movs	r2, #32
9000628e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90006292:	687b      	ldr	r3, [r7, #4]
90006294:	2200      	movs	r2, #0
90006296:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90006298:	687b      	ldr	r3, [r7, #4]
9000629a:	2200      	movs	r2, #0
9000629c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
900062a0:	2300      	movs	r3, #0
}
900062a2:	4618      	mov	r0, r3
900062a4:	3708      	adds	r7, #8
900062a6:	46bd      	mov	sp, r7
900062a8:	bd80      	pop	{r7, pc}
900062aa:	bf00      	nop
900062ac:	02008000 	.word	0x02008000

900062b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
900062b0:	b580      	push	{r7, lr}
900062b2:	b082      	sub	sp, #8
900062b4:	af00      	add	r7, sp, #0
900062b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
900062b8:	687b      	ldr	r3, [r7, #4]
900062ba:	2b00      	cmp	r3, #0
900062bc:	d101      	bne.n	900062c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
900062be:	2301      	movs	r3, #1
900062c0:	e021      	b.n	90006306 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
900062c2:	687b      	ldr	r3, [r7, #4]
900062c4:	2224      	movs	r2, #36	@ 0x24
900062c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
900062ca:	687b      	ldr	r3, [r7, #4]
900062cc:	681b      	ldr	r3, [r3, #0]
900062ce:	681a      	ldr	r2, [r3, #0]
900062d0:	687b      	ldr	r3, [r7, #4]
900062d2:	681b      	ldr	r3, [r3, #0]
900062d4:	f022 0201 	bic.w	r2, r2, #1
900062d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
900062da:	6878      	ldr	r0, [r7, #4]
900062dc:	f000 f821 	bl	90006322 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900062e0:	687b      	ldr	r3, [r7, #4]
900062e2:	2200      	movs	r2, #0
900062e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
900062e6:	687b      	ldr	r3, [r7, #4]
900062e8:	2200      	movs	r2, #0
900062ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900062ee:	687b      	ldr	r3, [r7, #4]
900062f0:	2200      	movs	r2, #0
900062f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900062f4:	687b      	ldr	r3, [r7, #4]
900062f6:	2200      	movs	r2, #0
900062f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
900062fc:	687b      	ldr	r3, [r7, #4]
900062fe:	2200      	movs	r2, #0
90006300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
90006304:	2300      	movs	r3, #0
}
90006306:	4618      	mov	r0, r3
90006308:	3708      	adds	r7, #8
9000630a:	46bd      	mov	sp, r7
9000630c:	bd80      	pop	{r7, pc}

9000630e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
9000630e:	b480      	push	{r7}
90006310:	b083      	sub	sp, #12
90006312:	af00      	add	r7, sp, #0
90006314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90006316:	bf00      	nop
90006318:	370c      	adds	r7, #12
9000631a:	46bd      	mov	sp, r7
9000631c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006320:	4770      	bx	lr

90006322 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
90006322:	b480      	push	{r7}
90006324:	b083      	sub	sp, #12
90006326:	af00      	add	r7, sp, #0
90006328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
9000632a:	bf00      	nop
9000632c:	370c      	adds	r7, #12
9000632e:	46bd      	mov	sp, r7
90006330:	f85d 7b04 	ldr.w	r7, [sp], #4
90006334:	4770      	bx	lr
	...

90006338 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90006338:	b580      	push	{r7, lr}
9000633a:	b088      	sub	sp, #32
9000633c:	af02      	add	r7, sp, #8
9000633e:	60f8      	str	r0, [r7, #12]
90006340:	4608      	mov	r0, r1
90006342:	4611      	mov	r1, r2
90006344:	461a      	mov	r2, r3
90006346:	4603      	mov	r3, r0
90006348:	817b      	strh	r3, [r7, #10]
9000634a:	460b      	mov	r3, r1
9000634c:	813b      	strh	r3, [r7, #8]
9000634e:	4613      	mov	r3, r2
90006350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006352:	68fb      	ldr	r3, [r7, #12]
90006354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006358:	b2db      	uxtb	r3, r3
9000635a:	2b20      	cmp	r3, #32
9000635c:	f040 80f9 	bne.w	90006552 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
90006360:	6a3b      	ldr	r3, [r7, #32]
90006362:	2b00      	cmp	r3, #0
90006364:	d002      	beq.n	9000636c <HAL_I2C_Mem_Write+0x34>
90006366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90006368:	2b00      	cmp	r3, #0
9000636a:	d105      	bne.n	90006378 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000636c:	68fb      	ldr	r3, [r7, #12]
9000636e:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006372:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90006374:	2301      	movs	r3, #1
90006376:	e0ed      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90006378:	68fb      	ldr	r3, [r7, #12]
9000637a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000637e:	2b01      	cmp	r3, #1
90006380:	d101      	bne.n	90006386 <HAL_I2C_Mem_Write+0x4e>
90006382:	2302      	movs	r3, #2
90006384:	e0e6      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
90006386:	68fb      	ldr	r3, [r7, #12]
90006388:	2201      	movs	r2, #1
9000638a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
9000638e:	f7fd f9f3 	bl	90003778 <HAL_GetTick>
90006392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90006394:	697b      	ldr	r3, [r7, #20]
90006396:	9300      	str	r3, [sp, #0]
90006398:	2319      	movs	r3, #25
9000639a:	2201      	movs	r2, #1
9000639c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
900063a0:	68f8      	ldr	r0, [r7, #12]
900063a2:	f000 fadd 	bl	90006960 <I2C_WaitOnFlagUntilTimeout>
900063a6:	4603      	mov	r3, r0
900063a8:	2b00      	cmp	r3, #0
900063aa:	d001      	beq.n	900063b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
900063ac:	2301      	movs	r3, #1
900063ae:	e0d1      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900063b0:	68fb      	ldr	r3, [r7, #12]
900063b2:	2221      	movs	r2, #33	@ 0x21
900063b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900063b8:	68fb      	ldr	r3, [r7, #12]
900063ba:	2240      	movs	r2, #64	@ 0x40
900063bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900063c0:	68fb      	ldr	r3, [r7, #12]
900063c2:	2200      	movs	r2, #0
900063c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
900063c6:	68fb      	ldr	r3, [r7, #12]
900063c8:	6a3a      	ldr	r2, [r7, #32]
900063ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
900063cc:	68fb      	ldr	r3, [r7, #12]
900063ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
900063d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
900063d2:	68fb      	ldr	r3, [r7, #12]
900063d4:	2200      	movs	r2, #0
900063d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900063d8:	88f8      	ldrh	r0, [r7, #6]
900063da:	893a      	ldrh	r2, [r7, #8]
900063dc:	8979      	ldrh	r1, [r7, #10]
900063de:	697b      	ldr	r3, [r7, #20]
900063e0:	9301      	str	r3, [sp, #4]
900063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900063e4:	9300      	str	r3, [sp, #0]
900063e6:	4603      	mov	r3, r0
900063e8:	68f8      	ldr	r0, [r7, #12]
900063ea:	f000 f9ed 	bl	900067c8 <I2C_RequestMemoryWrite>
900063ee:	4603      	mov	r3, r0
900063f0:	2b00      	cmp	r3, #0
900063f2:	d005      	beq.n	90006400 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
900063f4:	68fb      	ldr	r3, [r7, #12]
900063f6:	2200      	movs	r2, #0
900063f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
900063fc:	2301      	movs	r3, #1
900063fe:	e0a9      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90006400:	68fb      	ldr	r3, [r7, #12]
90006402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006404:	b29b      	uxth	r3, r3
90006406:	2bff      	cmp	r3, #255	@ 0xff
90006408:	d90e      	bls.n	90006428 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000640a:	68fb      	ldr	r3, [r7, #12]
9000640c:	22ff      	movs	r2, #255	@ 0xff
9000640e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90006410:	68fb      	ldr	r3, [r7, #12]
90006412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006414:	b2da      	uxtb	r2, r3
90006416:	8979      	ldrh	r1, [r7, #10]
90006418:	2300      	movs	r3, #0
9000641a:	9300      	str	r3, [sp, #0]
9000641c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006420:	68f8      	ldr	r0, [r7, #12]
90006422:	f000 fc61 	bl	90006ce8 <I2C_TransferConfig>
90006426:	e00f      	b.n	90006448 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90006428:	68fb      	ldr	r3, [r7, #12]
9000642a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000642c:	b29a      	uxth	r2, r3
9000642e:	68fb      	ldr	r3, [r7, #12]
90006430:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90006432:	68fb      	ldr	r3, [r7, #12]
90006434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006436:	b2da      	uxtb	r2, r3
90006438:	8979      	ldrh	r1, [r7, #10]
9000643a:	2300      	movs	r3, #0
9000643c:	9300      	str	r3, [sp, #0]
9000643e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90006442:	68f8      	ldr	r0, [r7, #12]
90006444:	f000 fc50 	bl	90006ce8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90006448:	697a      	ldr	r2, [r7, #20]
9000644a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000644c:	68f8      	ldr	r0, [r7, #12]
9000644e:	f000 fae0 	bl	90006a12 <I2C_WaitOnTXISFlagUntilTimeout>
90006452:	4603      	mov	r3, r0
90006454:	2b00      	cmp	r3, #0
90006456:	d001      	beq.n	9000645c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
90006458:	2301      	movs	r3, #1
9000645a:	e07b      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000645c:	68fb      	ldr	r3, [r7, #12]
9000645e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006460:	781a      	ldrb	r2, [r3, #0]
90006462:	68fb      	ldr	r3, [r7, #12]
90006464:	681b      	ldr	r3, [r3, #0]
90006466:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90006468:	68fb      	ldr	r3, [r7, #12]
9000646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000646c:	1c5a      	adds	r2, r3, #1
9000646e:	68fb      	ldr	r3, [r7, #12]
90006470:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
90006472:	68fb      	ldr	r3, [r7, #12]
90006474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006476:	b29b      	uxth	r3, r3
90006478:	3b01      	subs	r3, #1
9000647a:	b29a      	uxth	r2, r3
9000647c:	68fb      	ldr	r3, [r7, #12]
9000647e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
90006480:	68fb      	ldr	r3, [r7, #12]
90006482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006484:	3b01      	subs	r3, #1
90006486:	b29a      	uxth	r2, r3
90006488:	68fb      	ldr	r3, [r7, #12]
9000648a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000648c:	68fb      	ldr	r3, [r7, #12]
9000648e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006490:	b29b      	uxth	r3, r3
90006492:	2b00      	cmp	r3, #0
90006494:	d034      	beq.n	90006500 <HAL_I2C_Mem_Write+0x1c8>
90006496:	68fb      	ldr	r3, [r7, #12]
90006498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000649a:	2b00      	cmp	r3, #0
9000649c:	d130      	bne.n	90006500 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000649e:	697b      	ldr	r3, [r7, #20]
900064a0:	9300      	str	r3, [sp, #0]
900064a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900064a4:	2200      	movs	r2, #0
900064a6:	2180      	movs	r1, #128	@ 0x80
900064a8:	68f8      	ldr	r0, [r7, #12]
900064aa:	f000 fa59 	bl	90006960 <I2C_WaitOnFlagUntilTimeout>
900064ae:	4603      	mov	r3, r0
900064b0:	2b00      	cmp	r3, #0
900064b2:	d001      	beq.n	900064b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
900064b4:	2301      	movs	r3, #1
900064b6:	e04d      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900064b8:	68fb      	ldr	r3, [r7, #12]
900064ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900064bc:	b29b      	uxth	r3, r3
900064be:	2bff      	cmp	r3, #255	@ 0xff
900064c0:	d90e      	bls.n	900064e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
900064c2:	68fb      	ldr	r3, [r7, #12]
900064c4:	22ff      	movs	r2, #255	@ 0xff
900064c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
900064c8:	68fb      	ldr	r3, [r7, #12]
900064ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900064cc:	b2da      	uxtb	r2, r3
900064ce:	8979      	ldrh	r1, [r7, #10]
900064d0:	2300      	movs	r3, #0
900064d2:	9300      	str	r3, [sp, #0]
900064d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
900064d8:	68f8      	ldr	r0, [r7, #12]
900064da:	f000 fc05 	bl	90006ce8 <I2C_TransferConfig>
900064de:	e00f      	b.n	90006500 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
900064e0:	68fb      	ldr	r3, [r7, #12]
900064e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900064e4:	b29a      	uxth	r2, r3
900064e6:	68fb      	ldr	r3, [r7, #12]
900064e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900064ea:	68fb      	ldr	r3, [r7, #12]
900064ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900064ee:	b2da      	uxtb	r2, r3
900064f0:	8979      	ldrh	r1, [r7, #10]
900064f2:	2300      	movs	r3, #0
900064f4:	9300      	str	r3, [sp, #0]
900064f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900064fa:	68f8      	ldr	r0, [r7, #12]
900064fc:	f000 fbf4 	bl	90006ce8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
90006500:	68fb      	ldr	r3, [r7, #12]
90006502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006504:	b29b      	uxth	r3, r3
90006506:	2b00      	cmp	r3, #0
90006508:	d19e      	bne.n	90006448 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000650a:	697a      	ldr	r2, [r7, #20]
9000650c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000650e:	68f8      	ldr	r0, [r7, #12]
90006510:	f000 fac6 	bl	90006aa0 <I2C_WaitOnSTOPFlagUntilTimeout>
90006514:	4603      	mov	r3, r0
90006516:	2b00      	cmp	r3, #0
90006518:	d001      	beq.n	9000651e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
9000651a:	2301      	movs	r3, #1
9000651c:	e01a      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000651e:	68fb      	ldr	r3, [r7, #12]
90006520:	681b      	ldr	r3, [r3, #0]
90006522:	2220      	movs	r2, #32
90006524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006526:	68fb      	ldr	r3, [r7, #12]
90006528:	681b      	ldr	r3, [r3, #0]
9000652a:	6859      	ldr	r1, [r3, #4]
9000652c:	68fb      	ldr	r3, [r7, #12]
9000652e:	681a      	ldr	r2, [r3, #0]
90006530:	4b0a      	ldr	r3, [pc, #40]	@ (9000655c <HAL_I2C_Mem_Write+0x224>)
90006532:	400b      	ands	r3, r1
90006534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90006536:	68fb      	ldr	r3, [r7, #12]
90006538:	2220      	movs	r2, #32
9000653a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000653e:	68fb      	ldr	r3, [r7, #12]
90006540:	2200      	movs	r2, #0
90006542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006546:	68fb      	ldr	r3, [r7, #12]
90006548:	2200      	movs	r2, #0
9000654a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
9000654e:	2300      	movs	r3, #0
90006550:	e000      	b.n	90006554 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
90006552:	2302      	movs	r3, #2
  }
}
90006554:	4618      	mov	r0, r3
90006556:	3718      	adds	r7, #24
90006558:	46bd      	mov	sp, r7
9000655a:	bd80      	pop	{r7, pc}
9000655c:	fe00e800 	.word	0xfe00e800

90006560 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90006560:	b580      	push	{r7, lr}
90006562:	b088      	sub	sp, #32
90006564:	af02      	add	r7, sp, #8
90006566:	60f8      	str	r0, [r7, #12]
90006568:	4608      	mov	r0, r1
9000656a:	4611      	mov	r1, r2
9000656c:	461a      	mov	r2, r3
9000656e:	4603      	mov	r3, r0
90006570:	817b      	strh	r3, [r7, #10]
90006572:	460b      	mov	r3, r1
90006574:	813b      	strh	r3, [r7, #8]
90006576:	4613      	mov	r3, r2
90006578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000657a:	68fb      	ldr	r3, [r7, #12]
9000657c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006580:	b2db      	uxtb	r3, r3
90006582:	2b20      	cmp	r3, #32
90006584:	f040 80fd 	bne.w	90006782 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90006588:	6a3b      	ldr	r3, [r7, #32]
9000658a:	2b00      	cmp	r3, #0
9000658c:	d002      	beq.n	90006594 <HAL_I2C_Mem_Read+0x34>
9000658e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90006590:	2b00      	cmp	r3, #0
90006592:	d105      	bne.n	900065a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90006594:	68fb      	ldr	r3, [r7, #12]
90006596:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000659a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
9000659c:	2301      	movs	r3, #1
9000659e:	e0f1      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
900065a0:	68fb      	ldr	r3, [r7, #12]
900065a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900065a6:	2b01      	cmp	r3, #1
900065a8:	d101      	bne.n	900065ae <HAL_I2C_Mem_Read+0x4e>
900065aa:	2302      	movs	r3, #2
900065ac:	e0ea      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
900065ae:	68fb      	ldr	r3, [r7, #12]
900065b0:	2201      	movs	r2, #1
900065b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
900065b6:	f7fd f8df 	bl	90003778 <HAL_GetTick>
900065ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900065bc:	697b      	ldr	r3, [r7, #20]
900065be:	9300      	str	r3, [sp, #0]
900065c0:	2319      	movs	r3, #25
900065c2:	2201      	movs	r2, #1
900065c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
900065c8:	68f8      	ldr	r0, [r7, #12]
900065ca:	f000 f9c9 	bl	90006960 <I2C_WaitOnFlagUntilTimeout>
900065ce:	4603      	mov	r3, r0
900065d0:	2b00      	cmp	r3, #0
900065d2:	d001      	beq.n	900065d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
900065d4:	2301      	movs	r3, #1
900065d6:	e0d5      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
900065d8:	68fb      	ldr	r3, [r7, #12]
900065da:	2222      	movs	r2, #34	@ 0x22
900065dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900065e0:	68fb      	ldr	r3, [r7, #12]
900065e2:	2240      	movs	r2, #64	@ 0x40
900065e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900065e8:	68fb      	ldr	r3, [r7, #12]
900065ea:	2200      	movs	r2, #0
900065ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
900065ee:	68fb      	ldr	r3, [r7, #12]
900065f0:	6a3a      	ldr	r2, [r7, #32]
900065f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
900065f4:	68fb      	ldr	r3, [r7, #12]
900065f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
900065f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
900065fa:	68fb      	ldr	r3, [r7, #12]
900065fc:	2200      	movs	r2, #0
900065fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90006600:	88f8      	ldrh	r0, [r7, #6]
90006602:	893a      	ldrh	r2, [r7, #8]
90006604:	8979      	ldrh	r1, [r7, #10]
90006606:	697b      	ldr	r3, [r7, #20]
90006608:	9301      	str	r3, [sp, #4]
9000660a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000660c:	9300      	str	r3, [sp, #0]
9000660e:	4603      	mov	r3, r0
90006610:	68f8      	ldr	r0, [r7, #12]
90006612:	f000 f92d 	bl	90006870 <I2C_RequestMemoryRead>
90006616:	4603      	mov	r3, r0
90006618:	2b00      	cmp	r3, #0
9000661a:	d005      	beq.n	90006628 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
9000661c:	68fb      	ldr	r3, [r7, #12]
9000661e:	2200      	movs	r2, #0
90006620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90006624:	2301      	movs	r3, #1
90006626:	e0ad      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90006628:	68fb      	ldr	r3, [r7, #12]
9000662a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000662c:	b29b      	uxth	r3, r3
9000662e:	2bff      	cmp	r3, #255	@ 0xff
90006630:	d90e      	bls.n	90006650 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90006632:	68fb      	ldr	r3, [r7, #12]
90006634:	22ff      	movs	r2, #255	@ 0xff
90006636:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90006638:	68fb      	ldr	r3, [r7, #12]
9000663a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000663c:	b2da      	uxtb	r2, r3
9000663e:	8979      	ldrh	r1, [r7, #10]
90006640:	4b52      	ldr	r3, [pc, #328]	@ (9000678c <HAL_I2C_Mem_Read+0x22c>)
90006642:	9300      	str	r3, [sp, #0]
90006644:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006648:	68f8      	ldr	r0, [r7, #12]
9000664a:	f000 fb4d 	bl	90006ce8 <I2C_TransferConfig>
9000664e:	e00f      	b.n	90006670 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90006650:	68fb      	ldr	r3, [r7, #12]
90006652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006654:	b29a      	uxth	r2, r3
90006656:	68fb      	ldr	r3, [r7, #12]
90006658:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
9000665a:	68fb      	ldr	r3, [r7, #12]
9000665c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000665e:	b2da      	uxtb	r2, r3
90006660:	8979      	ldrh	r1, [r7, #10]
90006662:	4b4a      	ldr	r3, [pc, #296]	@ (9000678c <HAL_I2C_Mem_Read+0x22c>)
90006664:	9300      	str	r3, [sp, #0]
90006666:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
9000666a:	68f8      	ldr	r0, [r7, #12]
9000666c:	f000 fb3c 	bl	90006ce8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90006670:	697b      	ldr	r3, [r7, #20]
90006672:	9300      	str	r3, [sp, #0]
90006674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006676:	2200      	movs	r2, #0
90006678:	2104      	movs	r1, #4
9000667a:	68f8      	ldr	r0, [r7, #12]
9000667c:	f000 f970 	bl	90006960 <I2C_WaitOnFlagUntilTimeout>
90006680:	4603      	mov	r3, r0
90006682:	2b00      	cmp	r3, #0
90006684:	d001      	beq.n	9000668a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90006686:	2301      	movs	r3, #1
90006688:	e07c      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000668a:	68fb      	ldr	r3, [r7, #12]
9000668c:	681b      	ldr	r3, [r3, #0]
9000668e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90006690:	68fb      	ldr	r3, [r7, #12]
90006692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006694:	b2d2      	uxtb	r2, r2
90006696:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90006698:	68fb      	ldr	r3, [r7, #12]
9000669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000669c:	1c5a      	adds	r2, r3, #1
9000669e:	68fb      	ldr	r3, [r7, #12]
900066a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
900066a2:	68fb      	ldr	r3, [r7, #12]
900066a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900066a6:	3b01      	subs	r3, #1
900066a8:	b29a      	uxth	r2, r3
900066aa:	68fb      	ldr	r3, [r7, #12]
900066ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
900066ae:	68fb      	ldr	r3, [r7, #12]
900066b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900066b2:	b29b      	uxth	r3, r3
900066b4:	3b01      	subs	r3, #1
900066b6:	b29a      	uxth	r2, r3
900066b8:	68fb      	ldr	r3, [r7, #12]
900066ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900066bc:	68fb      	ldr	r3, [r7, #12]
900066be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900066c0:	b29b      	uxth	r3, r3
900066c2:	2b00      	cmp	r3, #0
900066c4:	d034      	beq.n	90006730 <HAL_I2C_Mem_Read+0x1d0>
900066c6:	68fb      	ldr	r3, [r7, #12]
900066c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900066ca:	2b00      	cmp	r3, #0
900066cc:	d130      	bne.n	90006730 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
900066ce:	697b      	ldr	r3, [r7, #20]
900066d0:	9300      	str	r3, [sp, #0]
900066d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900066d4:	2200      	movs	r2, #0
900066d6:	2180      	movs	r1, #128	@ 0x80
900066d8:	68f8      	ldr	r0, [r7, #12]
900066da:	f000 f941 	bl	90006960 <I2C_WaitOnFlagUntilTimeout>
900066de:	4603      	mov	r3, r0
900066e0:	2b00      	cmp	r3, #0
900066e2:	d001      	beq.n	900066e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
900066e4:	2301      	movs	r3, #1
900066e6:	e04d      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900066e8:	68fb      	ldr	r3, [r7, #12]
900066ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900066ec:	b29b      	uxth	r3, r3
900066ee:	2bff      	cmp	r3, #255	@ 0xff
900066f0:	d90e      	bls.n	90006710 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
900066f2:	68fb      	ldr	r3, [r7, #12]
900066f4:	22ff      	movs	r2, #255	@ 0xff
900066f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
900066f8:	68fb      	ldr	r3, [r7, #12]
900066fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900066fc:	b2da      	uxtb	r2, r3
900066fe:	8979      	ldrh	r1, [r7, #10]
90006700:	2300      	movs	r3, #0
90006702:	9300      	str	r3, [sp, #0]
90006704:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006708:	68f8      	ldr	r0, [r7, #12]
9000670a:	f000 faed 	bl	90006ce8 <I2C_TransferConfig>
9000670e:	e00f      	b.n	90006730 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90006710:	68fb      	ldr	r3, [r7, #12]
90006712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006714:	b29a      	uxth	r2, r3
90006716:	68fb      	ldr	r3, [r7, #12]
90006718:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
9000671a:	68fb      	ldr	r3, [r7, #12]
9000671c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000671e:	b2da      	uxtb	r2, r3
90006720:	8979      	ldrh	r1, [r7, #10]
90006722:	2300      	movs	r3, #0
90006724:	9300      	str	r3, [sp, #0]
90006726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
9000672a:	68f8      	ldr	r0, [r7, #12]
9000672c:	f000 fadc 	bl	90006ce8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90006730:	68fb      	ldr	r3, [r7, #12]
90006732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006734:	b29b      	uxth	r3, r3
90006736:	2b00      	cmp	r3, #0
90006738:	d19a      	bne.n	90006670 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000673a:	697a      	ldr	r2, [r7, #20]
9000673c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000673e:	68f8      	ldr	r0, [r7, #12]
90006740:	f000 f9ae 	bl	90006aa0 <I2C_WaitOnSTOPFlagUntilTimeout>
90006744:	4603      	mov	r3, r0
90006746:	2b00      	cmp	r3, #0
90006748:	d001      	beq.n	9000674e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
9000674a:	2301      	movs	r3, #1
9000674c:	e01a      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000674e:	68fb      	ldr	r3, [r7, #12]
90006750:	681b      	ldr	r3, [r3, #0]
90006752:	2220      	movs	r2, #32
90006754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006756:	68fb      	ldr	r3, [r7, #12]
90006758:	681b      	ldr	r3, [r3, #0]
9000675a:	6859      	ldr	r1, [r3, #4]
9000675c:	68fb      	ldr	r3, [r7, #12]
9000675e:	681a      	ldr	r2, [r3, #0]
90006760:	4b0b      	ldr	r3, [pc, #44]	@ (90006790 <HAL_I2C_Mem_Read+0x230>)
90006762:	400b      	ands	r3, r1
90006764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90006766:	68fb      	ldr	r3, [r7, #12]
90006768:	2220      	movs	r2, #32
9000676a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000676e:	68fb      	ldr	r3, [r7, #12]
90006770:	2200      	movs	r2, #0
90006772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006776:	68fb      	ldr	r3, [r7, #12]
90006778:	2200      	movs	r2, #0
9000677a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
9000677e:	2300      	movs	r3, #0
90006780:	e000      	b.n	90006784 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90006782:	2302      	movs	r3, #2
  }
}
90006784:	4618      	mov	r0, r3
90006786:	3718      	adds	r7, #24
90006788:	46bd      	mov	sp, r7
9000678a:	bd80      	pop	{r7, pc}
9000678c:	80002400 	.word	0x80002400
90006790:	fe00e800 	.word	0xfe00e800

90006794 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90006794:	b480      	push	{r7}
90006796:	b083      	sub	sp, #12
90006798:	af00      	add	r7, sp, #0
9000679a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
9000679c:	687b      	ldr	r3, [r7, #4]
9000679e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900067a2:	b2db      	uxtb	r3, r3
}
900067a4:	4618      	mov	r0, r3
900067a6:	370c      	adds	r7, #12
900067a8:	46bd      	mov	sp, r7
900067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900067ae:	4770      	bx	lr

900067b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
900067b0:	b480      	push	{r7}
900067b2:	b083      	sub	sp, #12
900067b4:	af00      	add	r7, sp, #0
900067b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
900067b8:	687b      	ldr	r3, [r7, #4]
900067ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
900067bc:	4618      	mov	r0, r3
900067be:	370c      	adds	r7, #12
900067c0:	46bd      	mov	sp, r7
900067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900067c6:	4770      	bx	lr

900067c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
900067c8:	b580      	push	{r7, lr}
900067ca:	b086      	sub	sp, #24
900067cc:	af02      	add	r7, sp, #8
900067ce:	60f8      	str	r0, [r7, #12]
900067d0:	4608      	mov	r0, r1
900067d2:	4611      	mov	r1, r2
900067d4:	461a      	mov	r2, r3
900067d6:	4603      	mov	r3, r0
900067d8:	817b      	strh	r3, [r7, #10]
900067da:	460b      	mov	r3, r1
900067dc:	813b      	strh	r3, [r7, #8]
900067de:	4613      	mov	r3, r2
900067e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
900067e2:	88fb      	ldrh	r3, [r7, #6]
900067e4:	b2da      	uxtb	r2, r3
900067e6:	8979      	ldrh	r1, [r7, #10]
900067e8:	4b20      	ldr	r3, [pc, #128]	@ (9000686c <I2C_RequestMemoryWrite+0xa4>)
900067ea:	9300      	str	r3, [sp, #0]
900067ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
900067f0:	68f8      	ldr	r0, [r7, #12]
900067f2:	f000 fa79 	bl	90006ce8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900067f6:	69fa      	ldr	r2, [r7, #28]
900067f8:	69b9      	ldr	r1, [r7, #24]
900067fa:	68f8      	ldr	r0, [r7, #12]
900067fc:	f000 f909 	bl	90006a12 <I2C_WaitOnTXISFlagUntilTimeout>
90006800:	4603      	mov	r3, r0
90006802:	2b00      	cmp	r3, #0
90006804:	d001      	beq.n	9000680a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
90006806:	2301      	movs	r3, #1
90006808:	e02c      	b.n	90006864 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000680a:	88fb      	ldrh	r3, [r7, #6]
9000680c:	2b01      	cmp	r3, #1
9000680e:	d105      	bne.n	9000681c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90006810:	893b      	ldrh	r3, [r7, #8]
90006812:	b2da      	uxtb	r2, r3
90006814:	68fb      	ldr	r3, [r7, #12]
90006816:	681b      	ldr	r3, [r3, #0]
90006818:	629a      	str	r2, [r3, #40]	@ 0x28
9000681a:	e015      	b.n	90006848 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000681c:	893b      	ldrh	r3, [r7, #8]
9000681e:	0a1b      	lsrs	r3, r3, #8
90006820:	b29b      	uxth	r3, r3
90006822:	b2da      	uxtb	r2, r3
90006824:	68fb      	ldr	r3, [r7, #12]
90006826:	681b      	ldr	r3, [r3, #0]
90006828:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000682a:	69fa      	ldr	r2, [r7, #28]
9000682c:	69b9      	ldr	r1, [r7, #24]
9000682e:	68f8      	ldr	r0, [r7, #12]
90006830:	f000 f8ef 	bl	90006a12 <I2C_WaitOnTXISFlagUntilTimeout>
90006834:	4603      	mov	r3, r0
90006836:	2b00      	cmp	r3, #0
90006838:	d001      	beq.n	9000683e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
9000683a:	2301      	movs	r3, #1
9000683c:	e012      	b.n	90006864 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000683e:	893b      	ldrh	r3, [r7, #8]
90006840:	b2da      	uxtb	r2, r3
90006842:	68fb      	ldr	r3, [r7, #12]
90006844:	681b      	ldr	r3, [r3, #0]
90006846:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90006848:	69fb      	ldr	r3, [r7, #28]
9000684a:	9300      	str	r3, [sp, #0]
9000684c:	69bb      	ldr	r3, [r7, #24]
9000684e:	2200      	movs	r2, #0
90006850:	2180      	movs	r1, #128	@ 0x80
90006852:	68f8      	ldr	r0, [r7, #12]
90006854:	f000 f884 	bl	90006960 <I2C_WaitOnFlagUntilTimeout>
90006858:	4603      	mov	r3, r0
9000685a:	2b00      	cmp	r3, #0
9000685c:	d001      	beq.n	90006862 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
9000685e:	2301      	movs	r3, #1
90006860:	e000      	b.n	90006864 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
90006862:	2300      	movs	r3, #0
}
90006864:	4618      	mov	r0, r3
90006866:	3710      	adds	r7, #16
90006868:	46bd      	mov	sp, r7
9000686a:	bd80      	pop	{r7, pc}
9000686c:	80002000 	.word	0x80002000

90006870 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90006870:	b580      	push	{r7, lr}
90006872:	b086      	sub	sp, #24
90006874:	af02      	add	r7, sp, #8
90006876:	60f8      	str	r0, [r7, #12]
90006878:	4608      	mov	r0, r1
9000687a:	4611      	mov	r1, r2
9000687c:	461a      	mov	r2, r3
9000687e:	4603      	mov	r3, r0
90006880:	817b      	strh	r3, [r7, #10]
90006882:	460b      	mov	r3, r1
90006884:	813b      	strh	r3, [r7, #8]
90006886:	4613      	mov	r3, r2
90006888:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
9000688a:	88fb      	ldrh	r3, [r7, #6]
9000688c:	b2da      	uxtb	r2, r3
9000688e:	8979      	ldrh	r1, [r7, #10]
90006890:	4b20      	ldr	r3, [pc, #128]	@ (90006914 <I2C_RequestMemoryRead+0xa4>)
90006892:	9300      	str	r3, [sp, #0]
90006894:	2300      	movs	r3, #0
90006896:	68f8      	ldr	r0, [r7, #12]
90006898:	f000 fa26 	bl	90006ce8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000689c:	69fa      	ldr	r2, [r7, #28]
9000689e:	69b9      	ldr	r1, [r7, #24]
900068a0:	68f8      	ldr	r0, [r7, #12]
900068a2:	f000 f8b6 	bl	90006a12 <I2C_WaitOnTXISFlagUntilTimeout>
900068a6:	4603      	mov	r3, r0
900068a8:	2b00      	cmp	r3, #0
900068aa:	d001      	beq.n	900068b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
900068ac:	2301      	movs	r3, #1
900068ae:	e02c      	b.n	9000690a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
900068b0:	88fb      	ldrh	r3, [r7, #6]
900068b2:	2b01      	cmp	r3, #1
900068b4:	d105      	bne.n	900068c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900068b6:	893b      	ldrh	r3, [r7, #8]
900068b8:	b2da      	uxtb	r2, r3
900068ba:	68fb      	ldr	r3, [r7, #12]
900068bc:	681b      	ldr	r3, [r3, #0]
900068be:	629a      	str	r2, [r3, #40]	@ 0x28
900068c0:	e015      	b.n	900068ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900068c2:	893b      	ldrh	r3, [r7, #8]
900068c4:	0a1b      	lsrs	r3, r3, #8
900068c6:	b29b      	uxth	r3, r3
900068c8:	b2da      	uxtb	r2, r3
900068ca:	68fb      	ldr	r3, [r7, #12]
900068cc:	681b      	ldr	r3, [r3, #0]
900068ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900068d0:	69fa      	ldr	r2, [r7, #28]
900068d2:	69b9      	ldr	r1, [r7, #24]
900068d4:	68f8      	ldr	r0, [r7, #12]
900068d6:	f000 f89c 	bl	90006a12 <I2C_WaitOnTXISFlagUntilTimeout>
900068da:	4603      	mov	r3, r0
900068dc:	2b00      	cmp	r3, #0
900068de:	d001      	beq.n	900068e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
900068e0:	2301      	movs	r3, #1
900068e2:	e012      	b.n	9000690a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900068e4:	893b      	ldrh	r3, [r7, #8]
900068e6:	b2da      	uxtb	r2, r3
900068e8:	68fb      	ldr	r3, [r7, #12]
900068ea:	681b      	ldr	r3, [r3, #0]
900068ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
900068ee:	69fb      	ldr	r3, [r7, #28]
900068f0:	9300      	str	r3, [sp, #0]
900068f2:	69bb      	ldr	r3, [r7, #24]
900068f4:	2200      	movs	r2, #0
900068f6:	2140      	movs	r1, #64	@ 0x40
900068f8:	68f8      	ldr	r0, [r7, #12]
900068fa:	f000 f831 	bl	90006960 <I2C_WaitOnFlagUntilTimeout>
900068fe:	4603      	mov	r3, r0
90006900:	2b00      	cmp	r3, #0
90006902:	d001      	beq.n	90006908 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90006904:	2301      	movs	r3, #1
90006906:	e000      	b.n	9000690a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90006908:	2300      	movs	r3, #0
}
9000690a:	4618      	mov	r0, r3
9000690c:	3710      	adds	r7, #16
9000690e:	46bd      	mov	sp, r7
90006910:	bd80      	pop	{r7, pc}
90006912:	bf00      	nop
90006914:	80002000 	.word	0x80002000

90006918 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90006918:	b480      	push	{r7}
9000691a:	b083      	sub	sp, #12
9000691c:	af00      	add	r7, sp, #0
9000691e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90006920:	687b      	ldr	r3, [r7, #4]
90006922:	681b      	ldr	r3, [r3, #0]
90006924:	699b      	ldr	r3, [r3, #24]
90006926:	f003 0302 	and.w	r3, r3, #2
9000692a:	2b02      	cmp	r3, #2
9000692c:	d103      	bne.n	90006936 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
9000692e:	687b      	ldr	r3, [r7, #4]
90006930:	681b      	ldr	r3, [r3, #0]
90006932:	2200      	movs	r2, #0
90006934:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90006936:	687b      	ldr	r3, [r7, #4]
90006938:	681b      	ldr	r3, [r3, #0]
9000693a:	699b      	ldr	r3, [r3, #24]
9000693c:	f003 0301 	and.w	r3, r3, #1
90006940:	2b01      	cmp	r3, #1
90006942:	d007      	beq.n	90006954 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90006944:	687b      	ldr	r3, [r7, #4]
90006946:	681b      	ldr	r3, [r3, #0]
90006948:	699a      	ldr	r2, [r3, #24]
9000694a:	687b      	ldr	r3, [r7, #4]
9000694c:	681b      	ldr	r3, [r3, #0]
9000694e:	f042 0201 	orr.w	r2, r2, #1
90006952:	619a      	str	r2, [r3, #24]
  }
}
90006954:	bf00      	nop
90006956:	370c      	adds	r7, #12
90006958:	46bd      	mov	sp, r7
9000695a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000695e:	4770      	bx	lr

90006960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90006960:	b580      	push	{r7, lr}
90006962:	b084      	sub	sp, #16
90006964:	af00      	add	r7, sp, #0
90006966:	60f8      	str	r0, [r7, #12]
90006968:	60b9      	str	r1, [r7, #8]
9000696a:	603b      	str	r3, [r7, #0]
9000696c:	4613      	mov	r3, r2
9000696e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006970:	e03b      	b.n	900069ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006972:	69ba      	ldr	r2, [r7, #24]
90006974:	6839      	ldr	r1, [r7, #0]
90006976:	68f8      	ldr	r0, [r7, #12]
90006978:	f000 f8d6 	bl	90006b28 <I2C_IsErrorOccurred>
9000697c:	4603      	mov	r3, r0
9000697e:	2b00      	cmp	r3, #0
90006980:	d001      	beq.n	90006986 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90006982:	2301      	movs	r3, #1
90006984:	e041      	b.n	90006a0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006986:	683b      	ldr	r3, [r7, #0]
90006988:	f1b3 3fff 	cmp.w	r3, #4294967295
9000698c:	d02d      	beq.n	900069ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000698e:	f7fc fef3 	bl	90003778 <HAL_GetTick>
90006992:	4602      	mov	r2, r0
90006994:	69bb      	ldr	r3, [r7, #24]
90006996:	1ad3      	subs	r3, r2, r3
90006998:	683a      	ldr	r2, [r7, #0]
9000699a:	429a      	cmp	r2, r3
9000699c:	d302      	bcc.n	900069a4 <I2C_WaitOnFlagUntilTimeout+0x44>
9000699e:	683b      	ldr	r3, [r7, #0]
900069a0:	2b00      	cmp	r3, #0
900069a2:	d122      	bne.n	900069ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900069a4:	68fb      	ldr	r3, [r7, #12]
900069a6:	681b      	ldr	r3, [r3, #0]
900069a8:	699a      	ldr	r2, [r3, #24]
900069aa:	68bb      	ldr	r3, [r7, #8]
900069ac:	4013      	ands	r3, r2
900069ae:	68ba      	ldr	r2, [r7, #8]
900069b0:	429a      	cmp	r2, r3
900069b2:	bf0c      	ite	eq
900069b4:	2301      	moveq	r3, #1
900069b6:	2300      	movne	r3, #0
900069b8:	b2db      	uxtb	r3, r3
900069ba:	461a      	mov	r2, r3
900069bc:	79fb      	ldrb	r3, [r7, #7]
900069be:	429a      	cmp	r2, r3
900069c0:	d113      	bne.n	900069ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900069c2:	68fb      	ldr	r3, [r7, #12]
900069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900069c6:	f043 0220 	orr.w	r2, r3, #32
900069ca:	68fb      	ldr	r3, [r7, #12]
900069cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900069ce:	68fb      	ldr	r3, [r7, #12]
900069d0:	2220      	movs	r2, #32
900069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900069d6:	68fb      	ldr	r3, [r7, #12]
900069d8:	2200      	movs	r2, #0
900069da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
900069de:	68fb      	ldr	r3, [r7, #12]
900069e0:	2200      	movs	r2, #0
900069e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
900069e6:	2301      	movs	r3, #1
900069e8:	e00f      	b.n	90006a0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900069ea:	68fb      	ldr	r3, [r7, #12]
900069ec:	681b      	ldr	r3, [r3, #0]
900069ee:	699a      	ldr	r2, [r3, #24]
900069f0:	68bb      	ldr	r3, [r7, #8]
900069f2:	4013      	ands	r3, r2
900069f4:	68ba      	ldr	r2, [r7, #8]
900069f6:	429a      	cmp	r2, r3
900069f8:	bf0c      	ite	eq
900069fa:	2301      	moveq	r3, #1
900069fc:	2300      	movne	r3, #0
900069fe:	b2db      	uxtb	r3, r3
90006a00:	461a      	mov	r2, r3
90006a02:	79fb      	ldrb	r3, [r7, #7]
90006a04:	429a      	cmp	r2, r3
90006a06:	d0b4      	beq.n	90006972 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90006a08:	2300      	movs	r3, #0
}
90006a0a:	4618      	mov	r0, r3
90006a0c:	3710      	adds	r7, #16
90006a0e:	46bd      	mov	sp, r7
90006a10:	bd80      	pop	{r7, pc}

90006a12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006a12:	b580      	push	{r7, lr}
90006a14:	b084      	sub	sp, #16
90006a16:	af00      	add	r7, sp, #0
90006a18:	60f8      	str	r0, [r7, #12]
90006a1a:	60b9      	str	r1, [r7, #8]
90006a1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006a1e:	e033      	b.n	90006a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006a20:	687a      	ldr	r2, [r7, #4]
90006a22:	68b9      	ldr	r1, [r7, #8]
90006a24:	68f8      	ldr	r0, [r7, #12]
90006a26:	f000 f87f 	bl	90006b28 <I2C_IsErrorOccurred>
90006a2a:	4603      	mov	r3, r0
90006a2c:	2b00      	cmp	r3, #0
90006a2e:	d001      	beq.n	90006a34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006a30:	2301      	movs	r3, #1
90006a32:	e031      	b.n	90006a98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006a34:	68bb      	ldr	r3, [r7, #8]
90006a36:	f1b3 3fff 	cmp.w	r3, #4294967295
90006a3a:	d025      	beq.n	90006a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006a3c:	f7fc fe9c 	bl	90003778 <HAL_GetTick>
90006a40:	4602      	mov	r2, r0
90006a42:	687b      	ldr	r3, [r7, #4]
90006a44:	1ad3      	subs	r3, r2, r3
90006a46:	68ba      	ldr	r2, [r7, #8]
90006a48:	429a      	cmp	r2, r3
90006a4a:	d302      	bcc.n	90006a52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90006a4c:	68bb      	ldr	r3, [r7, #8]
90006a4e:	2b00      	cmp	r3, #0
90006a50:	d11a      	bne.n	90006a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90006a52:	68fb      	ldr	r3, [r7, #12]
90006a54:	681b      	ldr	r3, [r3, #0]
90006a56:	699b      	ldr	r3, [r3, #24]
90006a58:	f003 0302 	and.w	r3, r3, #2
90006a5c:	2b02      	cmp	r3, #2
90006a5e:	d013      	beq.n	90006a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006a60:	68fb      	ldr	r3, [r7, #12]
90006a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006a64:	f043 0220 	orr.w	r2, r3, #32
90006a68:	68fb      	ldr	r3, [r7, #12]
90006a6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006a6c:	68fb      	ldr	r3, [r7, #12]
90006a6e:	2220      	movs	r2, #32
90006a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006a74:	68fb      	ldr	r3, [r7, #12]
90006a76:	2200      	movs	r2, #0
90006a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006a7c:	68fb      	ldr	r3, [r7, #12]
90006a7e:	2200      	movs	r2, #0
90006a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006a84:	2301      	movs	r3, #1
90006a86:	e007      	b.n	90006a98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006a88:	68fb      	ldr	r3, [r7, #12]
90006a8a:	681b      	ldr	r3, [r3, #0]
90006a8c:	699b      	ldr	r3, [r3, #24]
90006a8e:	f003 0302 	and.w	r3, r3, #2
90006a92:	2b02      	cmp	r3, #2
90006a94:	d1c4      	bne.n	90006a20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90006a96:	2300      	movs	r3, #0
}
90006a98:	4618      	mov	r0, r3
90006a9a:	3710      	adds	r7, #16
90006a9c:	46bd      	mov	sp, r7
90006a9e:	bd80      	pop	{r7, pc}

90006aa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006aa0:	b580      	push	{r7, lr}
90006aa2:	b084      	sub	sp, #16
90006aa4:	af00      	add	r7, sp, #0
90006aa6:	60f8      	str	r0, [r7, #12]
90006aa8:	60b9      	str	r1, [r7, #8]
90006aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006aac:	e02f      	b.n	90006b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006aae:	687a      	ldr	r2, [r7, #4]
90006ab0:	68b9      	ldr	r1, [r7, #8]
90006ab2:	68f8      	ldr	r0, [r7, #12]
90006ab4:	f000 f838 	bl	90006b28 <I2C_IsErrorOccurred>
90006ab8:	4603      	mov	r3, r0
90006aba:	2b00      	cmp	r3, #0
90006abc:	d001      	beq.n	90006ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006abe:	2301      	movs	r3, #1
90006ac0:	e02d      	b.n	90006b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006ac2:	f7fc fe59 	bl	90003778 <HAL_GetTick>
90006ac6:	4602      	mov	r2, r0
90006ac8:	687b      	ldr	r3, [r7, #4]
90006aca:	1ad3      	subs	r3, r2, r3
90006acc:	68ba      	ldr	r2, [r7, #8]
90006ace:	429a      	cmp	r2, r3
90006ad0:	d302      	bcc.n	90006ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90006ad2:	68bb      	ldr	r3, [r7, #8]
90006ad4:	2b00      	cmp	r3, #0
90006ad6:	d11a      	bne.n	90006b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90006ad8:	68fb      	ldr	r3, [r7, #12]
90006ada:	681b      	ldr	r3, [r3, #0]
90006adc:	699b      	ldr	r3, [r3, #24]
90006ade:	f003 0320 	and.w	r3, r3, #32
90006ae2:	2b20      	cmp	r3, #32
90006ae4:	d013      	beq.n	90006b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006ae6:	68fb      	ldr	r3, [r7, #12]
90006ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006aea:	f043 0220 	orr.w	r2, r3, #32
90006aee:	68fb      	ldr	r3, [r7, #12]
90006af0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90006af2:	68fb      	ldr	r3, [r7, #12]
90006af4:	2220      	movs	r2, #32
90006af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90006afa:	68fb      	ldr	r3, [r7, #12]
90006afc:	2200      	movs	r2, #0
90006afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90006b02:	68fb      	ldr	r3, [r7, #12]
90006b04:	2200      	movs	r2, #0
90006b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90006b0a:	2301      	movs	r3, #1
90006b0c:	e007      	b.n	90006b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006b0e:	68fb      	ldr	r3, [r7, #12]
90006b10:	681b      	ldr	r3, [r3, #0]
90006b12:	699b      	ldr	r3, [r3, #24]
90006b14:	f003 0320 	and.w	r3, r3, #32
90006b18:	2b20      	cmp	r3, #32
90006b1a:	d1c8      	bne.n	90006aae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006b1c:	2300      	movs	r3, #0
}
90006b1e:	4618      	mov	r0, r3
90006b20:	3710      	adds	r7, #16
90006b22:	46bd      	mov	sp, r7
90006b24:	bd80      	pop	{r7, pc}
	...

90006b28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90006b28:	b580      	push	{r7, lr}
90006b2a:	b08a      	sub	sp, #40	@ 0x28
90006b2c:	af00      	add	r7, sp, #0
90006b2e:	60f8      	str	r0, [r7, #12]
90006b30:	60b9      	str	r1, [r7, #8]
90006b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90006b34:	2300      	movs	r3, #0
90006b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90006b3a:	68fb      	ldr	r3, [r7, #12]
90006b3c:	681b      	ldr	r3, [r3, #0]
90006b3e:	699b      	ldr	r3, [r3, #24]
90006b40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90006b42:	2300      	movs	r3, #0
90006b44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
90006b46:	687b      	ldr	r3, [r7, #4]
90006b48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90006b4a:	69bb      	ldr	r3, [r7, #24]
90006b4c:	f003 0310 	and.w	r3, r3, #16
90006b50:	2b00      	cmp	r3, #0
90006b52:	d068      	beq.n	90006c26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90006b54:	68fb      	ldr	r3, [r7, #12]
90006b56:	681b      	ldr	r3, [r3, #0]
90006b58:	2210      	movs	r2, #16
90006b5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006b5c:	e049      	b.n	90006bf2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90006b5e:	68bb      	ldr	r3, [r7, #8]
90006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
90006b64:	d045      	beq.n	90006bf2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90006b66:	f7fc fe07 	bl	90003778 <HAL_GetTick>
90006b6a:	4602      	mov	r2, r0
90006b6c:	69fb      	ldr	r3, [r7, #28]
90006b6e:	1ad3      	subs	r3, r2, r3
90006b70:	68ba      	ldr	r2, [r7, #8]
90006b72:	429a      	cmp	r2, r3
90006b74:	d302      	bcc.n	90006b7c <I2C_IsErrorOccurred+0x54>
90006b76:	68bb      	ldr	r3, [r7, #8]
90006b78:	2b00      	cmp	r3, #0
90006b7a:	d13a      	bne.n	90006bf2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006b7c:	68fb      	ldr	r3, [r7, #12]
90006b7e:	681b      	ldr	r3, [r3, #0]
90006b80:	685b      	ldr	r3, [r3, #4]
90006b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
90006b86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90006b88:	68fb      	ldr	r3, [r7, #12]
90006b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006b8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006b90:	68fb      	ldr	r3, [r7, #12]
90006b92:	681b      	ldr	r3, [r3, #0]
90006b94:	699b      	ldr	r3, [r3, #24]
90006b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90006b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006b9e:	d121      	bne.n	90006be4 <I2C_IsErrorOccurred+0xbc>
90006ba0:	697b      	ldr	r3, [r7, #20]
90006ba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90006ba6:	d01d      	beq.n	90006be4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90006ba8:	7cfb      	ldrb	r3, [r7, #19]
90006baa:	2b20      	cmp	r3, #32
90006bac:	d01a      	beq.n	90006be4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006bae:	68fb      	ldr	r3, [r7, #12]
90006bb0:	681b      	ldr	r3, [r3, #0]
90006bb2:	685a      	ldr	r2, [r3, #4]
90006bb4:	68fb      	ldr	r3, [r7, #12]
90006bb6:	681b      	ldr	r3, [r3, #0]
90006bb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006bbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006bbe:	f7fc fddb 	bl	90003778 <HAL_GetTick>
90006bc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006bc4:	e00e      	b.n	90006be4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90006bc6:	f7fc fdd7 	bl	90003778 <HAL_GetTick>
90006bca:	4602      	mov	r2, r0
90006bcc:	69fb      	ldr	r3, [r7, #28]
90006bce:	1ad3      	subs	r3, r2, r3
90006bd0:	2b19      	cmp	r3, #25
90006bd2:	d907      	bls.n	90006be4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90006bd4:	6a3b      	ldr	r3, [r7, #32]
90006bd6:	f043 0320 	orr.w	r3, r3, #32
90006bda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006bdc:	2301      	movs	r3, #1
90006bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90006be2:	e006      	b.n	90006bf2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006be4:	68fb      	ldr	r3, [r7, #12]
90006be6:	681b      	ldr	r3, [r3, #0]
90006be8:	699b      	ldr	r3, [r3, #24]
90006bea:	f003 0320 	and.w	r3, r3, #32
90006bee:	2b20      	cmp	r3, #32
90006bf0:	d1e9      	bne.n	90006bc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006bf2:	68fb      	ldr	r3, [r7, #12]
90006bf4:	681b      	ldr	r3, [r3, #0]
90006bf6:	699b      	ldr	r3, [r3, #24]
90006bf8:	f003 0320 	and.w	r3, r3, #32
90006bfc:	2b20      	cmp	r3, #32
90006bfe:	d003      	beq.n	90006c08 <I2C_IsErrorOccurred+0xe0>
90006c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006c04:	2b00      	cmp	r3, #0
90006c06:	d0aa      	beq.n	90006b5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006c0c:	2b00      	cmp	r3, #0
90006c0e:	d103      	bne.n	90006c18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006c10:	68fb      	ldr	r3, [r7, #12]
90006c12:	681b      	ldr	r3, [r3, #0]
90006c14:	2220      	movs	r2, #32
90006c16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006c18:	6a3b      	ldr	r3, [r7, #32]
90006c1a:	f043 0304 	orr.w	r3, r3, #4
90006c1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006c20:	2301      	movs	r3, #1
90006c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90006c26:	68fb      	ldr	r3, [r7, #12]
90006c28:	681b      	ldr	r3, [r3, #0]
90006c2a:	699b      	ldr	r3, [r3, #24]
90006c2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006c2e:	69bb      	ldr	r3, [r7, #24]
90006c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006c34:	2b00      	cmp	r3, #0
90006c36:	d00b      	beq.n	90006c50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90006c38:	6a3b      	ldr	r3, [r7, #32]
90006c3a:	f043 0301 	orr.w	r3, r3, #1
90006c3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006c40:	68fb      	ldr	r3, [r7, #12]
90006c42:	681b      	ldr	r3, [r3, #0]
90006c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
90006c48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006c4a:	2301      	movs	r3, #1
90006c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006c50:	69bb      	ldr	r3, [r7, #24]
90006c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90006c56:	2b00      	cmp	r3, #0
90006c58:	d00b      	beq.n	90006c72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
90006c5a:	6a3b      	ldr	r3, [r7, #32]
90006c5c:	f043 0308 	orr.w	r3, r3, #8
90006c60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90006c62:	68fb      	ldr	r3, [r7, #12]
90006c64:	681b      	ldr	r3, [r3, #0]
90006c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
90006c6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006c6c:	2301      	movs	r3, #1
90006c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90006c72:	69bb      	ldr	r3, [r7, #24]
90006c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90006c78:	2b00      	cmp	r3, #0
90006c7a:	d00b      	beq.n	90006c94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006c7c:	6a3b      	ldr	r3, [r7, #32]
90006c7e:	f043 0302 	orr.w	r3, r3, #2
90006c82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006c84:	68fb      	ldr	r3, [r7, #12]
90006c86:	681b      	ldr	r3, [r3, #0]
90006c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006c8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006c8e:	2301      	movs	r3, #1
90006c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006c98:	2b00      	cmp	r3, #0
90006c9a:	d01c      	beq.n	90006cd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006c9c:	68f8      	ldr	r0, [r7, #12]
90006c9e:	f7ff fe3b 	bl	90006918 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006ca2:	68fb      	ldr	r3, [r7, #12]
90006ca4:	681b      	ldr	r3, [r3, #0]
90006ca6:	6859      	ldr	r1, [r3, #4]
90006ca8:	68fb      	ldr	r3, [r7, #12]
90006caa:	681a      	ldr	r2, [r3, #0]
90006cac:	4b0d      	ldr	r3, [pc, #52]	@ (90006ce4 <I2C_IsErrorOccurred+0x1bc>)
90006cae:	400b      	ands	r3, r1
90006cb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006cb2:	68fb      	ldr	r3, [r7, #12]
90006cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90006cb6:	6a3b      	ldr	r3, [r7, #32]
90006cb8:	431a      	orrs	r2, r3
90006cba:	68fb      	ldr	r3, [r7, #12]
90006cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006cbe:	68fb      	ldr	r3, [r7, #12]
90006cc0:	2220      	movs	r2, #32
90006cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90006cc6:	68fb      	ldr	r3, [r7, #12]
90006cc8:	2200      	movs	r2, #0
90006cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006cce:	68fb      	ldr	r3, [r7, #12]
90006cd0:	2200      	movs	r2, #0
90006cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
90006cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
90006cda:	4618      	mov	r0, r3
90006cdc:	3728      	adds	r7, #40	@ 0x28
90006cde:	46bd      	mov	sp, r7
90006ce0:	bd80      	pop	{r7, pc}
90006ce2:	bf00      	nop
90006ce4:	fe00e800 	.word	0xfe00e800

90006ce8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006ce8:	b480      	push	{r7}
90006cea:	b087      	sub	sp, #28
90006cec:	af00      	add	r7, sp, #0
90006cee:	60f8      	str	r0, [r7, #12]
90006cf0:	607b      	str	r3, [r7, #4]
90006cf2:	460b      	mov	r3, r1
90006cf4:	817b      	strh	r3, [r7, #10]
90006cf6:	4613      	mov	r3, r2
90006cf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006cfa:	897b      	ldrh	r3, [r7, #10]
90006cfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006d00:	7a7b      	ldrb	r3, [r7, #9]
90006d02:	041b      	lsls	r3, r3, #16
90006d04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006d08:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006d0a:	687b      	ldr	r3, [r7, #4]
90006d0c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006d0e:	6a3b      	ldr	r3, [r7, #32]
90006d10:	4313      	orrs	r3, r2
90006d12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
90006d16:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90006d18:	68fb      	ldr	r3, [r7, #12]
90006d1a:	681b      	ldr	r3, [r3, #0]
90006d1c:	685a      	ldr	r2, [r3, #4]
90006d1e:	6a3b      	ldr	r3, [r7, #32]
90006d20:	0d5b      	lsrs	r3, r3, #21
90006d22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
90006d26:	4b08      	ldr	r3, [pc, #32]	@ (90006d48 <I2C_TransferConfig+0x60>)
90006d28:	430b      	orrs	r3, r1
90006d2a:	43db      	mvns	r3, r3
90006d2c:	ea02 0103 	and.w	r1, r2, r3
90006d30:	68fb      	ldr	r3, [r7, #12]
90006d32:	681b      	ldr	r3, [r3, #0]
90006d34:	697a      	ldr	r2, [r7, #20]
90006d36:	430a      	orrs	r2, r1
90006d38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90006d3a:	bf00      	nop
90006d3c:	371c      	adds	r7, #28
90006d3e:	46bd      	mov	sp, r7
90006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
90006d44:	4770      	bx	lr
90006d46:	bf00      	nop
90006d48:	03ff63ff 	.word	0x03ff63ff

90006d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90006d4c:	b480      	push	{r7}
90006d4e:	b083      	sub	sp, #12
90006d50:	af00      	add	r7, sp, #0
90006d52:	6078      	str	r0, [r7, #4]
90006d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006d56:	687b      	ldr	r3, [r7, #4]
90006d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006d5c:	b2db      	uxtb	r3, r3
90006d5e:	2b20      	cmp	r3, #32
90006d60:	d138      	bne.n	90006dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006d62:	687b      	ldr	r3, [r7, #4]
90006d64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006d68:	2b01      	cmp	r3, #1
90006d6a:	d101      	bne.n	90006d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90006d6c:	2302      	movs	r3, #2
90006d6e:	e032      	b.n	90006dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90006d70:	687b      	ldr	r3, [r7, #4]
90006d72:	2201      	movs	r2, #1
90006d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006d78:	687b      	ldr	r3, [r7, #4]
90006d7a:	2224      	movs	r2, #36	@ 0x24
90006d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006d80:	687b      	ldr	r3, [r7, #4]
90006d82:	681b      	ldr	r3, [r3, #0]
90006d84:	681a      	ldr	r2, [r3, #0]
90006d86:	687b      	ldr	r3, [r7, #4]
90006d88:	681b      	ldr	r3, [r3, #0]
90006d8a:	f022 0201 	bic.w	r2, r2, #1
90006d8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006d90:	687b      	ldr	r3, [r7, #4]
90006d92:	681b      	ldr	r3, [r3, #0]
90006d94:	681a      	ldr	r2, [r3, #0]
90006d96:	687b      	ldr	r3, [r7, #4]
90006d98:	681b      	ldr	r3, [r3, #0]
90006d9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006d9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006da0:	687b      	ldr	r3, [r7, #4]
90006da2:	681b      	ldr	r3, [r3, #0]
90006da4:	6819      	ldr	r1, [r3, #0]
90006da6:	687b      	ldr	r3, [r7, #4]
90006da8:	681b      	ldr	r3, [r3, #0]
90006daa:	683a      	ldr	r2, [r7, #0]
90006dac:	430a      	orrs	r2, r1
90006dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006db0:	687b      	ldr	r3, [r7, #4]
90006db2:	681b      	ldr	r3, [r3, #0]
90006db4:	681a      	ldr	r2, [r3, #0]
90006db6:	687b      	ldr	r3, [r7, #4]
90006db8:	681b      	ldr	r3, [r3, #0]
90006dba:	f042 0201 	orr.w	r2, r2, #1
90006dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006dc0:	687b      	ldr	r3, [r7, #4]
90006dc2:	2220      	movs	r2, #32
90006dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006dc8:	687b      	ldr	r3, [r7, #4]
90006dca:	2200      	movs	r2, #0
90006dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006dd0:	2300      	movs	r3, #0
90006dd2:	e000      	b.n	90006dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90006dd4:	2302      	movs	r3, #2
  }
}
90006dd6:	4618      	mov	r0, r3
90006dd8:	370c      	adds	r7, #12
90006dda:	46bd      	mov	sp, r7
90006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
90006de0:	4770      	bx	lr

90006de2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90006de2:	b480      	push	{r7}
90006de4:	b085      	sub	sp, #20
90006de6:	af00      	add	r7, sp, #0
90006de8:	6078      	str	r0, [r7, #4]
90006dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006dec:	687b      	ldr	r3, [r7, #4]
90006dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006df2:	b2db      	uxtb	r3, r3
90006df4:	2b20      	cmp	r3, #32
90006df6:	d139      	bne.n	90006e6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006df8:	687b      	ldr	r3, [r7, #4]
90006dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006dfe:	2b01      	cmp	r3, #1
90006e00:	d101      	bne.n	90006e06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
90006e02:	2302      	movs	r3, #2
90006e04:	e033      	b.n	90006e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
90006e06:	687b      	ldr	r3, [r7, #4]
90006e08:	2201      	movs	r2, #1
90006e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006e0e:	687b      	ldr	r3, [r7, #4]
90006e10:	2224      	movs	r2, #36	@ 0x24
90006e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006e16:	687b      	ldr	r3, [r7, #4]
90006e18:	681b      	ldr	r3, [r3, #0]
90006e1a:	681a      	ldr	r2, [r3, #0]
90006e1c:	687b      	ldr	r3, [r7, #4]
90006e1e:	681b      	ldr	r3, [r3, #0]
90006e20:	f022 0201 	bic.w	r2, r2, #1
90006e24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
90006e26:	687b      	ldr	r3, [r7, #4]
90006e28:	681b      	ldr	r3, [r3, #0]
90006e2a:	681b      	ldr	r3, [r3, #0]
90006e2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006e2e:	68fb      	ldr	r3, [r7, #12]
90006e30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
90006e34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
90006e36:	683b      	ldr	r3, [r7, #0]
90006e38:	021b      	lsls	r3, r3, #8
90006e3a:	68fa      	ldr	r2, [r7, #12]
90006e3c:	4313      	orrs	r3, r2
90006e3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006e40:	687b      	ldr	r3, [r7, #4]
90006e42:	681b      	ldr	r3, [r3, #0]
90006e44:	68fa      	ldr	r2, [r7, #12]
90006e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006e48:	687b      	ldr	r3, [r7, #4]
90006e4a:	681b      	ldr	r3, [r3, #0]
90006e4c:	681a      	ldr	r2, [r3, #0]
90006e4e:	687b      	ldr	r3, [r7, #4]
90006e50:	681b      	ldr	r3, [r3, #0]
90006e52:	f042 0201 	orr.w	r2, r2, #1
90006e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006e58:	687b      	ldr	r3, [r7, #4]
90006e5a:	2220      	movs	r2, #32
90006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006e60:	687b      	ldr	r3, [r7, #4]
90006e62:	2200      	movs	r2, #0
90006e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006e68:	2300      	movs	r3, #0
90006e6a:	e000      	b.n	90006e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90006e6c:	2302      	movs	r3, #2
  }
}
90006e6e:	4618      	mov	r0, r3
90006e70:	3714      	adds	r7, #20
90006e72:	46bd      	mov	sp, r7
90006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e78:	4770      	bx	lr

90006e7a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90006e7a:	b580      	push	{r7, lr}
90006e7c:	b084      	sub	sp, #16
90006e7e:	af00      	add	r7, sp, #0
90006e80:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90006e82:	687b      	ldr	r3, [r7, #4]
90006e84:	2b00      	cmp	r3, #0
90006e86:	d101      	bne.n	90006e8c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90006e88:	2301      	movs	r3, #1
90006e8a:	e08f      	b.n	90006fac <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006e8c:	687b      	ldr	r3, [r7, #4]
90006e8e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90006e92:	b2db      	uxtb	r3, r3
90006e94:	2b00      	cmp	r3, #0
90006e96:	d106      	bne.n	90006ea6 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90006e98:	687b      	ldr	r3, [r7, #4]
90006e9a:	2200      	movs	r2, #0
90006e9c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006ea0:	6878      	ldr	r0, [r7, #4]
90006ea2:	f000 f887 	bl	90006fb4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006ea6:	687b      	ldr	r3, [r7, #4]
90006ea8:	2202      	movs	r2, #2
90006eaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006eae:	687b      	ldr	r3, [r7, #4]
90006eb0:	681b      	ldr	r3, [r3, #0]
90006eb2:	699a      	ldr	r2, [r3, #24]
90006eb4:	687b      	ldr	r3, [r7, #4]
90006eb6:	681b      	ldr	r3, [r3, #0]
90006eb8:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006ebc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006ebe:	687b      	ldr	r3, [r7, #4]
90006ec0:	681b      	ldr	r3, [r3, #0]
90006ec2:	6999      	ldr	r1, [r3, #24]
90006ec4:	687b      	ldr	r3, [r7, #4]
90006ec6:	685a      	ldr	r2, [r3, #4]
90006ec8:	687b      	ldr	r3, [r7, #4]
90006eca:	689b      	ldr	r3, [r3, #8]
90006ecc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006ece:	687b      	ldr	r3, [r7, #4]
90006ed0:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006ed2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006ed4:	687b      	ldr	r3, [r7, #4]
90006ed6:	691b      	ldr	r3, [r3, #16]
90006ed8:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006eda:	687b      	ldr	r3, [r7, #4]
90006edc:	681b      	ldr	r3, [r3, #0]
90006ede:	430a      	orrs	r2, r1
90006ee0:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
90006ee2:	687b      	ldr	r3, [r7, #4]
90006ee4:	695b      	ldr	r3, [r3, #20]
90006ee6:	041b      	lsls	r3, r3, #16
90006ee8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
90006eea:	687b      	ldr	r3, [r7, #4]
90006eec:	6999      	ldr	r1, [r3, #24]
90006eee:	687b      	ldr	r3, [r7, #4]
90006ef0:	681b      	ldr	r3, [r3, #0]
90006ef2:	68fa      	ldr	r2, [r7, #12]
90006ef4:	430a      	orrs	r2, r1
90006ef6:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90006ef8:	687b      	ldr	r3, [r7, #4]
90006efa:	69db      	ldr	r3, [r3, #28]
90006efc:	041b      	lsls	r3, r3, #16
90006efe:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90006f00:	687b      	ldr	r3, [r7, #4]
90006f02:	6a19      	ldr	r1, [r3, #32]
90006f04:	687b      	ldr	r3, [r7, #4]
90006f06:	681b      	ldr	r3, [r3, #0]
90006f08:	68fa      	ldr	r2, [r7, #12]
90006f0a:	430a      	orrs	r2, r1
90006f0c:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90006f0e:	687b      	ldr	r3, [r7, #4]
90006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006f12:	041b      	lsls	r3, r3, #16
90006f14:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
90006f16:	687b      	ldr	r3, [r7, #4]
90006f18:	6a99      	ldr	r1, [r3, #40]	@ 0x28
90006f1a:	687b      	ldr	r3, [r7, #4]
90006f1c:	681b      	ldr	r3, [r3, #0]
90006f1e:	68fa      	ldr	r2, [r7, #12]
90006f20:	430a      	orrs	r2, r1
90006f22:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
90006f24:	687b      	ldr	r3, [r7, #4]
90006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006f28:	041b      	lsls	r3, r3, #16
90006f2a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006f2c:	687b      	ldr	r3, [r7, #4]
90006f2e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006f30:	687b      	ldr	r3, [r7, #4]
90006f32:	681b      	ldr	r3, [r3, #0]
90006f34:	68fa      	ldr	r2, [r7, #12]
90006f36:	430a      	orrs	r2, r1
90006f38:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90006f3a:	687b      	ldr	r3, [r7, #4]
90006f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90006f40:	021b      	lsls	r3, r3, #8
90006f42:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90006f44:	687b      	ldr	r3, [r7, #4]
90006f46:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
90006f4a:	041b      	lsls	r3, r3, #16
90006f4c:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006f4e:	687b      	ldr	r3, [r7, #4]
90006f50:	681b      	ldr	r3, [r3, #0]
90006f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
90006f54:	687b      	ldr	r3, [r7, #4]
90006f56:	681b      	ldr	r3, [r3, #0]
90006f58:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90006f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006f5e:	687b      	ldr	r3, [r7, #4]
90006f60:	681b      	ldr	r3, [r3, #0]
90006f62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
90006f64:	68ba      	ldr	r2, [r7, #8]
90006f66:	68fb      	ldr	r3, [r7, #12]
90006f68:	4313      	orrs	r3, r2
90006f6a:	687a      	ldr	r2, [r7, #4]
90006f6c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006f70:	431a      	orrs	r2, r3
90006f72:	687b      	ldr	r3, [r7, #4]
90006f74:	681b      	ldr	r3, [r3, #0]
90006f76:	430a      	orrs	r2, r1
90006f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90006f7a:	687b      	ldr	r3, [r7, #4]
90006f7c:	681b      	ldr	r3, [r3, #0]
90006f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006f80:	687b      	ldr	r3, [r7, #4]
90006f82:	681b      	ldr	r3, [r3, #0]
90006f84:	f042 0206 	orr.w	r2, r2, #6
90006f88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90006f8a:	687b      	ldr	r3, [r7, #4]
90006f8c:	681b      	ldr	r3, [r3, #0]
90006f8e:	699a      	ldr	r2, [r3, #24]
90006f90:	687b      	ldr	r3, [r7, #4]
90006f92:	681b      	ldr	r3, [r3, #0]
90006f94:	f042 0201 	orr.w	r2, r2, #1
90006f98:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006f9a:	687b      	ldr	r3, [r7, #4]
90006f9c:	2200      	movs	r2, #0
90006f9e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90006fa2:	687b      	ldr	r3, [r7, #4]
90006fa4:	2201      	movs	r2, #1
90006fa6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
90006faa:	2300      	movs	r3, #0
}
90006fac:	4618      	mov	r0, r3
90006fae:	3710      	adds	r7, #16
90006fb0:	46bd      	mov	sp, r7
90006fb2:	bd80      	pop	{r7, pc}

90006fb4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006fb4:	b480      	push	{r7}
90006fb6:	b083      	sub	sp, #12
90006fb8:	af00      	add	r7, sp, #0
90006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006fbc:	bf00      	nop
90006fbe:	370c      	adds	r7, #12
90006fc0:	46bd      	mov	sp, r7
90006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
90006fc6:	4770      	bx	lr

90006fc8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006fc8:	b5b0      	push	{r4, r5, r7, lr}
90006fca:	b084      	sub	sp, #16
90006fcc:	af00      	add	r7, sp, #0
90006fce:	60f8      	str	r0, [r7, #12]
90006fd0:	60b9      	str	r1, [r7, #8]
90006fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006fd4:	68fb      	ldr	r3, [r7, #12]
90006fd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90006fda:	2b01      	cmp	r3, #1
90006fdc:	d101      	bne.n	90006fe2 <HAL_LTDC_ConfigLayer+0x1a>
90006fde:	2302      	movs	r3, #2
90006fe0:	e02c      	b.n	9000703c <HAL_LTDC_ConfigLayer+0x74>
90006fe2:	68fb      	ldr	r3, [r7, #12]
90006fe4:	2201      	movs	r2, #1
90006fe6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006fea:	68fb      	ldr	r3, [r7, #12]
90006fec:	2202      	movs	r2, #2
90006fee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90006ff2:	68fa      	ldr	r2, [r7, #12]
90006ff4:	687b      	ldr	r3, [r7, #4]
90006ff6:	2134      	movs	r1, #52	@ 0x34
90006ff8:	fb01 f303 	mul.w	r3, r1, r3
90006ffc:	4413      	add	r3, r2
90006ffe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90007002:	68bb      	ldr	r3, [r7, #8]
90007004:	4614      	mov	r4, r2
90007006:	461d      	mov	r5, r3
90007008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000700c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000700e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90007010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90007012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90007014:	682b      	ldr	r3, [r5, #0]
90007016:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90007018:	687a      	ldr	r2, [r7, #4]
9000701a:	68b9      	ldr	r1, [r7, #8]
9000701c:	68f8      	ldr	r0, [r7, #12]
9000701e:	f000 f811 	bl	90007044 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90007022:	68fb      	ldr	r3, [r7, #12]
90007024:	681b      	ldr	r3, [r3, #0]
90007026:	2201      	movs	r2, #1
90007028:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
9000702a:	68fb      	ldr	r3, [r7, #12]
9000702c:	2201      	movs	r2, #1
9000702e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90007032:	68fb      	ldr	r3, [r7, #12]
90007034:	2200      	movs	r2, #0
90007036:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
9000703a:	2300      	movs	r3, #0
}
9000703c:	4618      	mov	r0, r3
9000703e:	3710      	adds	r7, #16
90007040:	46bd      	mov	sp, r7
90007042:	bdb0      	pop	{r4, r5, r7, pc}

90007044 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90007044:	b480      	push	{r7}
90007046:	b089      	sub	sp, #36	@ 0x24
90007048:	af00      	add	r7, sp, #0
9000704a:	60f8      	str	r0, [r7, #12]
9000704c:	60b9      	str	r1, [r7, #8]
9000704e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90007050:	68bb      	ldr	r3, [r7, #8]
90007052:	685a      	ldr	r2, [r3, #4]
90007054:	68fb      	ldr	r3, [r7, #12]
90007056:	681b      	ldr	r3, [r3, #0]
90007058:	68db      	ldr	r3, [r3, #12]
9000705a:	0c1b      	lsrs	r3, r3, #16
9000705c:	f3c3 030b 	ubfx	r3, r3, #0, #12
90007060:	4413      	add	r3, r2
90007062:	041b      	lsls	r3, r3, #16
90007064:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90007066:	68fb      	ldr	r3, [r7, #12]
90007068:	681b      	ldr	r3, [r3, #0]
9000706a:	461a      	mov	r2, r3
9000706c:	687b      	ldr	r3, [r7, #4]
9000706e:	01db      	lsls	r3, r3, #7
90007070:	4413      	add	r3, r2
90007072:	3384      	adds	r3, #132	@ 0x84
90007074:	685b      	ldr	r3, [r3, #4]
90007076:	68fa      	ldr	r2, [r7, #12]
90007078:	6812      	ldr	r2, [r2, #0]
9000707a:	4611      	mov	r1, r2
9000707c:	687a      	ldr	r2, [r7, #4]
9000707e:	01d2      	lsls	r2, r2, #7
90007080:	440a      	add	r2, r1
90007082:	3284      	adds	r2, #132	@ 0x84
90007084:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90007088:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000708a:	68bb      	ldr	r3, [r7, #8]
9000708c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000708e:	68fb      	ldr	r3, [r7, #12]
90007090:	681b      	ldr	r3, [r3, #0]
90007092:	68db      	ldr	r3, [r3, #12]
90007094:	0c1b      	lsrs	r3, r3, #16
90007096:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000709a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000709c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000709e:	68fb      	ldr	r3, [r7, #12]
900070a0:	681b      	ldr	r3, [r3, #0]
900070a2:	4619      	mov	r1, r3
900070a4:	687b      	ldr	r3, [r7, #4]
900070a6:	01db      	lsls	r3, r3, #7
900070a8:	440b      	add	r3, r1
900070aa:	3384      	adds	r3, #132	@ 0x84
900070ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900070ae:	69fb      	ldr	r3, [r7, #28]
900070b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900070b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900070b4:	68bb      	ldr	r3, [r7, #8]
900070b6:	68da      	ldr	r2, [r3, #12]
900070b8:	68fb      	ldr	r3, [r7, #12]
900070ba:	681b      	ldr	r3, [r3, #0]
900070bc:	68db      	ldr	r3, [r3, #12]
900070be:	f3c3 030a 	ubfx	r3, r3, #0, #11
900070c2:	4413      	add	r3, r2
900070c4:	041b      	lsls	r3, r3, #16
900070c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900070c8:	68fb      	ldr	r3, [r7, #12]
900070ca:	681b      	ldr	r3, [r3, #0]
900070cc:	461a      	mov	r2, r3
900070ce:	687b      	ldr	r3, [r7, #4]
900070d0:	01db      	lsls	r3, r3, #7
900070d2:	4413      	add	r3, r2
900070d4:	3384      	adds	r3, #132	@ 0x84
900070d6:	689b      	ldr	r3, [r3, #8]
900070d8:	68fa      	ldr	r2, [r7, #12]
900070da:	6812      	ldr	r2, [r2, #0]
900070dc:	4611      	mov	r1, r2
900070de:	687a      	ldr	r2, [r7, #4]
900070e0:	01d2      	lsls	r2, r2, #7
900070e2:	440a      	add	r2, r1
900070e4:	3284      	adds	r2, #132	@ 0x84
900070e6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900070ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900070ec:	68bb      	ldr	r3, [r7, #8]
900070ee:	689a      	ldr	r2, [r3, #8]
900070f0:	68fb      	ldr	r3, [r7, #12]
900070f2:	681b      	ldr	r3, [r3, #0]
900070f4:	68db      	ldr	r3, [r3, #12]
900070f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
900070fa:	4413      	add	r3, r2
900070fc:	1c5a      	adds	r2, r3, #1
900070fe:	68fb      	ldr	r3, [r7, #12]
90007100:	681b      	ldr	r3, [r3, #0]
90007102:	4619      	mov	r1, r3
90007104:	687b      	ldr	r3, [r7, #4]
90007106:	01db      	lsls	r3, r3, #7
90007108:	440b      	add	r3, r1
9000710a:	3384      	adds	r3, #132	@ 0x84
9000710c:	4619      	mov	r1, r3
9000710e:	69fb      	ldr	r3, [r7, #28]
90007110:	4313      	orrs	r3, r2
90007112:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90007114:	68fb      	ldr	r3, [r7, #12]
90007116:	681b      	ldr	r3, [r3, #0]
90007118:	461a      	mov	r2, r3
9000711a:	687b      	ldr	r3, [r7, #4]
9000711c:	01db      	lsls	r3, r3, #7
9000711e:	4413      	add	r3, r2
90007120:	3384      	adds	r3, #132	@ 0x84
90007122:	691b      	ldr	r3, [r3, #16]
90007124:	68fa      	ldr	r2, [r7, #12]
90007126:	6812      	ldr	r2, [r2, #0]
90007128:	4611      	mov	r1, r2
9000712a:	687a      	ldr	r2, [r7, #4]
9000712c:	01d2      	lsls	r2, r2, #7
9000712e:	440a      	add	r2, r1
90007130:	3284      	adds	r2, #132	@ 0x84
90007132:	f023 0307 	bic.w	r3, r3, #7
90007136:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90007138:	68fb      	ldr	r3, [r7, #12]
9000713a:	681b      	ldr	r3, [r3, #0]
9000713c:	461a      	mov	r2, r3
9000713e:	687b      	ldr	r3, [r7, #4]
90007140:	01db      	lsls	r3, r3, #7
90007142:	4413      	add	r3, r2
90007144:	3384      	adds	r3, #132	@ 0x84
90007146:	461a      	mov	r2, r3
90007148:	68bb      	ldr	r3, [r7, #8]
9000714a:	691b      	ldr	r3, [r3, #16]
9000714c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000714e:	68bb      	ldr	r3, [r7, #8]
90007150:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
90007154:	021b      	lsls	r3, r3, #8
90007156:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90007158:	68bb      	ldr	r3, [r7, #8]
9000715a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
9000715e:	041b      	lsls	r3, r3, #16
90007160:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90007162:	68bb      	ldr	r3, [r7, #8]
90007164:	699b      	ldr	r3, [r3, #24]
90007166:	061b      	lsls	r3, r3, #24
90007168:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
9000716a:	68bb      	ldr	r3, [r7, #8]
9000716c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90007170:	461a      	mov	r2, r3
90007172:	69fb      	ldr	r3, [r7, #28]
90007174:	431a      	orrs	r2, r3
90007176:	69bb      	ldr	r3, [r7, #24]
90007178:	431a      	orrs	r2, r3
9000717a:	68fb      	ldr	r3, [r7, #12]
9000717c:	681b      	ldr	r3, [r3, #0]
9000717e:	4619      	mov	r1, r3
90007180:	687b      	ldr	r3, [r7, #4]
90007182:	01db      	lsls	r3, r3, #7
90007184:	440b      	add	r3, r1
90007186:	3384      	adds	r3, #132	@ 0x84
90007188:	4619      	mov	r1, r3
9000718a:	697b      	ldr	r3, [r7, #20]
9000718c:	4313      	orrs	r3, r2
9000718e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90007190:	68fb      	ldr	r3, [r7, #12]
90007192:	681b      	ldr	r3, [r3, #0]
90007194:	461a      	mov	r2, r3
90007196:	687b      	ldr	r3, [r7, #4]
90007198:	01db      	lsls	r3, r3, #7
9000719a:	4413      	add	r3, r2
9000719c:	3384      	adds	r3, #132	@ 0x84
9000719e:	695b      	ldr	r3, [r3, #20]
900071a0:	68fa      	ldr	r2, [r7, #12]
900071a2:	6812      	ldr	r2, [r2, #0]
900071a4:	4611      	mov	r1, r2
900071a6:	687a      	ldr	r2, [r7, #4]
900071a8:	01d2      	lsls	r2, r2, #7
900071aa:	440a      	add	r2, r1
900071ac:	3284      	adds	r2, #132	@ 0x84
900071ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
900071b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900071b4:	68fb      	ldr	r3, [r7, #12]
900071b6:	681b      	ldr	r3, [r3, #0]
900071b8:	461a      	mov	r2, r3
900071ba:	687b      	ldr	r3, [r7, #4]
900071bc:	01db      	lsls	r3, r3, #7
900071be:	4413      	add	r3, r2
900071c0:	3384      	adds	r3, #132	@ 0x84
900071c2:	461a      	mov	r2, r3
900071c4:	68bb      	ldr	r3, [r7, #8]
900071c6:	695b      	ldr	r3, [r3, #20]
900071c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900071ca:	68fb      	ldr	r3, [r7, #12]
900071cc:	681b      	ldr	r3, [r3, #0]
900071ce:	461a      	mov	r2, r3
900071d0:	687b      	ldr	r3, [r7, #4]
900071d2:	01db      	lsls	r3, r3, #7
900071d4:	4413      	add	r3, r2
900071d6:	3384      	adds	r3, #132	@ 0x84
900071d8:	69da      	ldr	r2, [r3, #28]
900071da:	68fb      	ldr	r3, [r7, #12]
900071dc:	681b      	ldr	r3, [r3, #0]
900071de:	4619      	mov	r1, r3
900071e0:	687b      	ldr	r3, [r7, #4]
900071e2:	01db      	lsls	r3, r3, #7
900071e4:	440b      	add	r3, r1
900071e6:	3384      	adds	r3, #132	@ 0x84
900071e8:	4619      	mov	r1, r3
900071ea:	4b4f      	ldr	r3, [pc, #316]	@ (90007328 <LTDC_SetConfig+0x2e4>)
900071ec:	4013      	ands	r3, r2
900071ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900071f0:	68bb      	ldr	r3, [r7, #8]
900071f2:	69da      	ldr	r2, [r3, #28]
900071f4:	68bb      	ldr	r3, [r7, #8]
900071f6:	6a1b      	ldr	r3, [r3, #32]
900071f8:	68f9      	ldr	r1, [r7, #12]
900071fa:	6809      	ldr	r1, [r1, #0]
900071fc:	4608      	mov	r0, r1
900071fe:	6879      	ldr	r1, [r7, #4]
90007200:	01c9      	lsls	r1, r1, #7
90007202:	4401      	add	r1, r0
90007204:	3184      	adds	r1, #132	@ 0x84
90007206:	4313      	orrs	r3, r2
90007208:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
9000720a:	68fb      	ldr	r3, [r7, #12]
9000720c:	681b      	ldr	r3, [r3, #0]
9000720e:	461a      	mov	r2, r3
90007210:	687b      	ldr	r3, [r7, #4]
90007212:	01db      	lsls	r3, r3, #7
90007214:	4413      	add	r3, r2
90007216:	3384      	adds	r3, #132	@ 0x84
90007218:	461a      	mov	r2, r3
9000721a:	68bb      	ldr	r3, [r7, #8]
9000721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000721e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90007220:	68bb      	ldr	r3, [r7, #8]
90007222:	691b      	ldr	r3, [r3, #16]
90007224:	2b00      	cmp	r3, #0
90007226:	d102      	bne.n	9000722e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90007228:	2304      	movs	r3, #4
9000722a:	61fb      	str	r3, [r7, #28]
9000722c:	e01b      	b.n	90007266 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000722e:	68bb      	ldr	r3, [r7, #8]
90007230:	691b      	ldr	r3, [r3, #16]
90007232:	2b01      	cmp	r3, #1
90007234:	d102      	bne.n	9000723c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
90007236:	2303      	movs	r3, #3
90007238:	61fb      	str	r3, [r7, #28]
9000723a:	e014      	b.n	90007266 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
9000723c:	68bb      	ldr	r3, [r7, #8]
9000723e:	691b      	ldr	r3, [r3, #16]
90007240:	2b04      	cmp	r3, #4
90007242:	d00b      	beq.n	9000725c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90007244:	68bb      	ldr	r3, [r7, #8]
90007246:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90007248:	2b02      	cmp	r3, #2
9000724a:	d007      	beq.n	9000725c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
9000724c:	68bb      	ldr	r3, [r7, #8]
9000724e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90007250:	2b03      	cmp	r3, #3
90007252:	d003      	beq.n	9000725c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90007254:	68bb      	ldr	r3, [r7, #8]
90007256:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90007258:	2b07      	cmp	r3, #7
9000725a:	d102      	bne.n	90007262 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
9000725c:	2302      	movs	r3, #2
9000725e:	61fb      	str	r3, [r7, #28]
90007260:	e001      	b.n	90007266 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
90007262:	2301      	movs	r3, #1
90007264:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90007266:	68fb      	ldr	r3, [r7, #12]
90007268:	681b      	ldr	r3, [r3, #0]
9000726a:	461a      	mov	r2, r3
9000726c:	687b      	ldr	r3, [r7, #4]
9000726e:	01db      	lsls	r3, r3, #7
90007270:	4413      	add	r3, r2
90007272:	3384      	adds	r3, #132	@ 0x84
90007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007276:	68fa      	ldr	r2, [r7, #12]
90007278:	6812      	ldr	r2, [r2, #0]
9000727a:	4611      	mov	r1, r2
9000727c:	687a      	ldr	r2, [r7, #4]
9000727e:	01d2      	lsls	r2, r2, #7
90007280:	440a      	add	r2, r1
90007282:	3284      	adds	r2, #132	@ 0x84
90007284:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90007288:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
9000728a:	68bb      	ldr	r3, [r7, #8]
9000728c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000728e:	69fa      	ldr	r2, [r7, #28]
90007290:	fb02 f303 	mul.w	r3, r2, r3
90007294:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90007296:	68bb      	ldr	r3, [r7, #8]
90007298:	6859      	ldr	r1, [r3, #4]
9000729a:	68bb      	ldr	r3, [r7, #8]
9000729c:	681b      	ldr	r3, [r3, #0]
9000729e:	1acb      	subs	r3, r1, r3
900072a0:	69f9      	ldr	r1, [r7, #28]
900072a2:	fb01 f303 	mul.w	r3, r1, r3
900072a6:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
900072a8:	68f9      	ldr	r1, [r7, #12]
900072aa:	6809      	ldr	r1, [r1, #0]
900072ac:	4608      	mov	r0, r1
900072ae:	6879      	ldr	r1, [r7, #4]
900072b0:	01c9      	lsls	r1, r1, #7
900072b2:	4401      	add	r1, r0
900072b4:	3184      	adds	r1, #132	@ 0x84
900072b6:	4313      	orrs	r3, r2
900072b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900072ba:	68fb      	ldr	r3, [r7, #12]
900072bc:	681b      	ldr	r3, [r3, #0]
900072be:	461a      	mov	r2, r3
900072c0:	687b      	ldr	r3, [r7, #4]
900072c2:	01db      	lsls	r3, r3, #7
900072c4:	4413      	add	r3, r2
900072c6:	3384      	adds	r3, #132	@ 0x84
900072c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900072ca:	68fb      	ldr	r3, [r7, #12]
900072cc:	681b      	ldr	r3, [r3, #0]
900072ce:	4619      	mov	r1, r3
900072d0:	687b      	ldr	r3, [r7, #4]
900072d2:	01db      	lsls	r3, r3, #7
900072d4:	440b      	add	r3, r1
900072d6:	3384      	adds	r3, #132	@ 0x84
900072d8:	4619      	mov	r1, r3
900072da:	4b14      	ldr	r3, [pc, #80]	@ (9000732c <LTDC_SetConfig+0x2e8>)
900072dc:	4013      	ands	r3, r2
900072de:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900072e0:	68fb      	ldr	r3, [r7, #12]
900072e2:	681b      	ldr	r3, [r3, #0]
900072e4:	461a      	mov	r2, r3
900072e6:	687b      	ldr	r3, [r7, #4]
900072e8:	01db      	lsls	r3, r3, #7
900072ea:	4413      	add	r3, r2
900072ec:	3384      	adds	r3, #132	@ 0x84
900072ee:	461a      	mov	r2, r3
900072f0:	68bb      	ldr	r3, [r7, #8]
900072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900072f6:	68fb      	ldr	r3, [r7, #12]
900072f8:	681b      	ldr	r3, [r3, #0]
900072fa:	461a      	mov	r2, r3
900072fc:	687b      	ldr	r3, [r7, #4]
900072fe:	01db      	lsls	r3, r3, #7
90007300:	4413      	add	r3, r2
90007302:	3384      	adds	r3, #132	@ 0x84
90007304:	681b      	ldr	r3, [r3, #0]
90007306:	68fa      	ldr	r2, [r7, #12]
90007308:	6812      	ldr	r2, [r2, #0]
9000730a:	4611      	mov	r1, r2
9000730c:	687a      	ldr	r2, [r7, #4]
9000730e:	01d2      	lsls	r2, r2, #7
90007310:	440a      	add	r2, r1
90007312:	3284      	adds	r2, #132	@ 0x84
90007314:	f043 0301 	orr.w	r3, r3, #1
90007318:	6013      	str	r3, [r2, #0]
}
9000731a:	bf00      	nop
9000731c:	3724      	adds	r7, #36	@ 0x24
9000731e:	46bd      	mov	sp, r7
90007320:	f85d 7b04 	ldr.w	r7, [sp], #4
90007324:	4770      	bx	lr
90007326:	bf00      	nop
90007328:	fffff8f8 	.word	0xfffff8f8
9000732c:	fffff800 	.word	0xfffff800

90007330 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90007330:	b580      	push	{r7, lr}
90007332:	b084      	sub	sp, #16
90007334:	af00      	add	r7, sp, #0
90007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90007338:	f7fc fa1e 	bl	90003778 <HAL_GetTick>
9000733c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000733e:	687b      	ldr	r3, [r7, #4]
90007340:	2b00      	cmp	r3, #0
90007342:	d101      	bne.n	90007348 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
90007344:	2301      	movs	r3, #1
90007346:	e03b      	b.n	900073c0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90007348:	687b      	ldr	r3, [r7, #4]
9000734a:	2200      	movs	r2, #0
9000734c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90007350:	687b      	ldr	r3, [r7, #4]
90007352:	2202      	movs	r2, #2
90007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90007358:	687b      	ldr	r3, [r7, #4]
9000735a:	681b      	ldr	r3, [r3, #0]
9000735c:	68da      	ldr	r2, [r3, #12]
9000735e:	687b      	ldr	r3, [r7, #4]
90007360:	681b      	ldr	r3, [r3, #0]
90007362:	f022 0201 	bic.w	r2, r2, #1
90007366:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90007368:	e00f      	b.n	9000738a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000736a:	f7fc fa05 	bl	90003778 <HAL_GetTick>
9000736e:	4602      	mov	r2, r0
90007370:	68fb      	ldr	r3, [r7, #12]
90007372:	1ad3      	subs	r3, r2, r3
90007374:	2b05      	cmp	r3, #5
90007376:	d908      	bls.n	9000738a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90007378:	687b      	ldr	r3, [r7, #4]
9000737a:	2240      	movs	r2, #64	@ 0x40
9000737c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000737e:	687b      	ldr	r3, [r7, #4]
90007380:	2203      	movs	r2, #3
90007382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90007386:	2301      	movs	r3, #1
90007388:	e01a      	b.n	900073c0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000738a:	687b      	ldr	r3, [r7, #4]
9000738c:	681b      	ldr	r3, [r3, #0]
9000738e:	68db      	ldr	r3, [r3, #12]
90007390:	f003 0301 	and.w	r3, r3, #1
90007394:	2b00      	cmp	r3, #0
90007396:	d1e8      	bne.n	9000736a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90007398:	6878      	ldr	r0, [r7, #4]
9000739a:	f000 f86d 	bl	90007478 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
9000739e:	687b      	ldr	r3, [r7, #4]
900073a0:	2200      	movs	r2, #0
900073a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900073a4:	687b      	ldr	r3, [r7, #4]
900073a6:	2200      	movs	r2, #0
900073a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900073aa:	687b      	ldr	r3, [r7, #4]
900073ac:	2200      	movs	r2, #0
900073ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900073b0:	687b      	ldr	r3, [r7, #4]
900073b2:	2200      	movs	r2, #0
900073b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
900073b6:	687b      	ldr	r3, [r7, #4]
900073b8:	2201      	movs	r2, #1
900073ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
900073be:	2300      	movs	r3, #0
}
900073c0:	4618      	mov	r0, r3
900073c2:	3710      	adds	r7, #16
900073c4:	46bd      	mov	sp, r7
900073c6:	bd80      	pop	{r7, pc}

900073c8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
900073c8:	b480      	push	{r7}
900073ca:	b083      	sub	sp, #12
900073cc:	af00      	add	r7, sp, #0
900073ce:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900073d0:	687b      	ldr	r3, [r7, #4]
900073d2:	2b00      	cmp	r3, #0
900073d4:	d101      	bne.n	900073da <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
900073d6:	2301      	movs	r3, #1
900073d8:	e048      	b.n	9000746c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
900073da:	687b      	ldr	r3, [r7, #4]
900073dc:	681b      	ldr	r3, [r3, #0]
900073de:	68da      	ldr	r2, [r3, #12]
900073e0:	687b      	ldr	r3, [r7, #4]
900073e2:	681b      	ldr	r3, [r3, #0]
900073e4:	f022 0201 	bic.w	r2, r2, #1
900073e8:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
900073ea:	687b      	ldr	r3, [r7, #4]
900073ec:	681b      	ldr	r3, [r3, #0]
900073ee:	2200      	movs	r2, #0
900073f0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
900073f2:	687b      	ldr	r3, [r7, #4]
900073f4:	681b      	ldr	r3, [r3, #0]
900073f6:	2200      	movs	r2, #0
900073f8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
900073fa:	687b      	ldr	r3, [r7, #4]
900073fc:	681b      	ldr	r3, [r3, #0]
900073fe:	2200      	movs	r2, #0
90007400:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90007402:	687b      	ldr	r3, [r7, #4]
90007404:	681b      	ldr	r3, [r3, #0]
90007406:	2200      	movs	r2, #0
90007408:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
9000740a:	687b      	ldr	r3, [r7, #4]
9000740c:	681b      	ldr	r3, [r3, #0]
9000740e:	2200      	movs	r2, #0
90007410:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90007412:	687b      	ldr	r3, [r7, #4]
90007414:	681b      	ldr	r3, [r3, #0]
90007416:	2200      	movs	r2, #0
90007418:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
9000741a:	687b      	ldr	r3, [r7, #4]
9000741c:	681b      	ldr	r3, [r3, #0]
9000741e:	2200      	movs	r2, #0
90007420:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90007422:	687b      	ldr	r3, [r7, #4]
90007424:	681b      	ldr	r3, [r3, #0]
90007426:	2200      	movs	r2, #0
90007428:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
9000742a:	687b      	ldr	r3, [r7, #4]
9000742c:	681b      	ldr	r3, [r3, #0]
9000742e:	2200      	movs	r2, #0
90007430:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90007432:	687b      	ldr	r3, [r7, #4]
90007434:	681b      	ldr	r3, [r3, #0]
90007436:	2200      	movs	r2, #0
90007438:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000743a:	687b      	ldr	r3, [r7, #4]
9000743c:	681b      	ldr	r3, [r3, #0]
9000743e:	221f      	movs	r2, #31
90007440:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90007442:	687b      	ldr	r3, [r7, #4]
90007444:	2200      	movs	r2, #0
90007446:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90007448:	687b      	ldr	r3, [r7, #4]
9000744a:	2200      	movs	r2, #0
9000744c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
9000744e:	687b      	ldr	r3, [r7, #4]
90007450:	2200      	movs	r2, #0
90007452:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90007454:	687b      	ldr	r3, [r7, #4]
90007456:	2200      	movs	r2, #0
90007458:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
9000745a:	687b      	ldr	r3, [r7, #4]
9000745c:	2200      	movs	r2, #0
9000745e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90007462:	687b      	ldr	r3, [r7, #4]
90007464:	2200      	movs	r2, #0
90007466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
9000746a:	2300      	movs	r3, #0
}
9000746c:	4618      	mov	r0, r3
9000746e:	370c      	adds	r7, #12
90007470:	46bd      	mov	sp, r7
90007472:	f85d 7b04 	ldr.w	r7, [sp], #4
90007476:	4770      	bx	lr

90007478 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90007478:	b480      	push	{r7}
9000747a:	b085      	sub	sp, #20
9000747c:	af00      	add	r7, sp, #0
9000747e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90007480:	687b      	ldr	r3, [r7, #4]
90007482:	68d9      	ldr	r1, [r3, #12]
90007484:	687b      	ldr	r3, [r7, #4]
90007486:	691a      	ldr	r2, [r3, #16]
90007488:	687b      	ldr	r3, [r7, #4]
9000748a:	681b      	ldr	r3, [r3, #0]
9000748c:	430a      	orrs	r2, r1
9000748e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90007490:	687b      	ldr	r3, [r7, #4]
90007492:	695a      	ldr	r2, [r3, #20]
90007494:	687b      	ldr	r3, [r7, #4]
90007496:	699b      	ldr	r3, [r3, #24]
90007498:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
9000749a:	687b      	ldr	r3, [r7, #4]
9000749c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000749e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
900074a0:	687b      	ldr	r3, [r7, #4]
900074a2:	6a1b      	ldr	r3, [r3, #32]
900074a4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
900074a6:	687b      	ldr	r3, [r7, #4]
900074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
900074aa:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
900074ac:	687b      	ldr	r3, [r7, #4]
900074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900074b0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
900074b2:	687b      	ldr	r3, [r7, #4]
900074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
900074b6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
900074b8:	687b      	ldr	r3, [r7, #4]
900074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900074bc:	3b01      	subs	r3, #1
900074be:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
900074c0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
900074c4:	687b      	ldr	r3, [r7, #4]
900074c6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900074c8:	687b      	ldr	r3, [r7, #4]
900074ca:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
900074cc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900074ce:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
900074d0:	687b      	ldr	r3, [r7, #4]
900074d2:	685b      	ldr	r3, [r3, #4]
900074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900074d8:	d107      	bne.n	900074ea <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
900074da:	687b      	ldr	r3, [r7, #4]
900074dc:	681b      	ldr	r3, [r3, #0]
900074de:	691a      	ldr	r2, [r3, #16]
900074e0:	687b      	ldr	r3, [r7, #4]
900074e2:	681b      	ldr	r3, [r3, #0]
900074e4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
900074e8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
900074ea:	687b      	ldr	r3, [r7, #4]
900074ec:	681b      	ldr	r3, [r3, #0]
900074ee:	2200      	movs	r2, #0
900074f0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
900074f2:	687b      	ldr	r3, [r7, #4]
900074f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900074f6:	2b00      	cmp	r3, #0
900074f8:	da11      	bge.n	9000751e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
900074fa:	687b      	ldr	r3, [r7, #4]
900074fc:	681b      	ldr	r3, [r3, #0]
900074fe:	695a      	ldr	r2, [r3, #20]
90007500:	687b      	ldr	r3, [r7, #4]
90007502:	681b      	ldr	r3, [r3, #0]
90007504:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90007508:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000750a:	687b      	ldr	r3, [r7, #4]
9000750c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000750e:	425b      	negs	r3, r3
90007510:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90007512:	687b      	ldr	r3, [r7, #4]
90007514:	681b      	ldr	r3, [r3, #0]
90007516:	68fa      	ldr	r2, [r7, #12]
90007518:	b292      	uxth	r2, r2
9000751a:	621a      	str	r2, [r3, #32]
9000751c:	e006      	b.n	9000752c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000751e:	687b      	ldr	r3, [r7, #4]
90007520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007522:	461a      	mov	r2, r3
90007524:	687b      	ldr	r3, [r7, #4]
90007526:	681b      	ldr	r3, [r3, #0]
90007528:	b292      	uxth	r2, r2
9000752a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000752c:	687b      	ldr	r3, [r7, #4]
9000752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007530:	2b00      	cmp	r3, #0
90007532:	da15      	bge.n	90007560 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90007534:	687b      	ldr	r3, [r7, #4]
90007536:	681b      	ldr	r3, [r3, #0]
90007538:	695a      	ldr	r2, [r3, #20]
9000753a:	687b      	ldr	r3, [r7, #4]
9000753c:	681b      	ldr	r3, [r3, #0]
9000753e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90007542:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90007544:	687b      	ldr	r3, [r7, #4]
90007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007548:	425b      	negs	r3, r3
9000754a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000754c:	687b      	ldr	r3, [r7, #4]
9000754e:	681b      	ldr	r3, [r3, #0]
90007550:	6a19      	ldr	r1, [r3, #32]
90007552:	68fb      	ldr	r3, [r7, #12]
90007554:	041a      	lsls	r2, r3, #16
90007556:	687b      	ldr	r3, [r7, #4]
90007558:	681b      	ldr	r3, [r3, #0]
9000755a:	430a      	orrs	r2, r1
9000755c:	621a      	str	r2, [r3, #32]
9000755e:	e009      	b.n	90007574 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90007560:	687b      	ldr	r3, [r7, #4]
90007562:	681b      	ldr	r3, [r3, #0]
90007564:	6a19      	ldr	r1, [r3, #32]
90007566:	687b      	ldr	r3, [r7, #4]
90007568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000756a:	041a      	lsls	r2, r3, #16
9000756c:	687b      	ldr	r3, [r7, #4]
9000756e:	681b      	ldr	r3, [r3, #0]
90007570:	430a      	orrs	r2, r1
90007572:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90007574:	687b      	ldr	r3, [r7, #4]
90007576:	685b      	ldr	r3, [r3, #4]
90007578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000757c:	d006      	beq.n	9000758c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000757e:	687b      	ldr	r3, [r7, #4]
90007580:	685a      	ldr	r2, [r3, #4]
90007582:	687b      	ldr	r3, [r7, #4]
90007584:	681b      	ldr	r3, [r3, #0]
90007586:	b2d2      	uxtb	r2, r2
90007588:	629a      	str	r2, [r3, #40]	@ 0x28
9000758a:	e003      	b.n	90007594 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
9000758c:	687b      	ldr	r3, [r7, #4]
9000758e:	681b      	ldr	r3, [r3, #0]
90007590:	2200      	movs	r2, #0
90007592:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90007594:	687b      	ldr	r3, [r7, #4]
90007596:	681b      	ldr	r3, [r3, #0]
90007598:	2200      	movs	r2, #0
9000759a:	625a      	str	r2, [r3, #36]	@ 0x24
}
9000759c:	bf00      	nop
9000759e:	3714      	adds	r7, #20
900075a0:	46bd      	mov	sp, r7
900075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900075a6:	4770      	bx	lr

900075a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900075a8:	b580      	push	{r7, lr}
900075aa:	b08c      	sub	sp, #48	@ 0x30
900075ac:	af00      	add	r7, sp, #0
900075ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900075b0:	687b      	ldr	r3, [r7, #4]
900075b2:	2b00      	cmp	r3, #0
900075b4:	d102      	bne.n	900075bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
900075b6:	2301      	movs	r3, #1
900075b8:	f000 bc48 	b.w	90007e4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900075bc:	687b      	ldr	r3, [r7, #4]
900075be:	681b      	ldr	r3, [r3, #0]
900075c0:	f003 0301 	and.w	r3, r3, #1
900075c4:	2b00      	cmp	r3, #0
900075c6:	f000 8088 	beq.w	900076da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900075ca:	4b99      	ldr	r3, [pc, #612]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900075cc:	691b      	ldr	r3, [r3, #16]
900075ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900075d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900075d4:	4b96      	ldr	r3, [pc, #600]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900075d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
900075da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900075dc:	2b10      	cmp	r3, #16
900075de:	d007      	beq.n	900075f0 <HAL_RCC_OscConfig+0x48>
900075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900075e2:	2b18      	cmp	r3, #24
900075e4:	d111      	bne.n	9000760a <HAL_RCC_OscConfig+0x62>
900075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900075e8:	f003 0303 	and.w	r3, r3, #3
900075ec:	2b02      	cmp	r3, #2
900075ee:	d10c      	bne.n	9000760a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900075f0:	4b8f      	ldr	r3, [pc, #572]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900075f2:	681b      	ldr	r3, [r3, #0]
900075f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900075f8:	2b00      	cmp	r3, #0
900075fa:	d06d      	beq.n	900076d8 <HAL_RCC_OscConfig+0x130>
900075fc:	687b      	ldr	r3, [r7, #4]
900075fe:	685b      	ldr	r3, [r3, #4]
90007600:	2b00      	cmp	r3, #0
90007602:	d169      	bne.n	900076d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90007604:	2301      	movs	r3, #1
90007606:	f000 bc21 	b.w	90007e4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000760a:	687b      	ldr	r3, [r7, #4]
9000760c:	685b      	ldr	r3, [r3, #4]
9000760e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90007612:	d106      	bne.n	90007622 <HAL_RCC_OscConfig+0x7a>
90007614:	4b86      	ldr	r3, [pc, #536]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007616:	681b      	ldr	r3, [r3, #0]
90007618:	4a85      	ldr	r2, [pc, #532]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000761a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000761e:	6013      	str	r3, [r2, #0]
90007620:	e02e      	b.n	90007680 <HAL_RCC_OscConfig+0xd8>
90007622:	687b      	ldr	r3, [r7, #4]
90007624:	685b      	ldr	r3, [r3, #4]
90007626:	2b00      	cmp	r3, #0
90007628:	d10c      	bne.n	90007644 <HAL_RCC_OscConfig+0x9c>
9000762a:	4b81      	ldr	r3, [pc, #516]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000762c:	681b      	ldr	r3, [r3, #0]
9000762e:	4a80      	ldr	r2, [pc, #512]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90007634:	6013      	str	r3, [r2, #0]
90007636:	4b7e      	ldr	r3, [pc, #504]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007638:	681b      	ldr	r3, [r3, #0]
9000763a:	4a7d      	ldr	r2, [pc, #500]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000763c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90007640:	6013      	str	r3, [r2, #0]
90007642:	e01d      	b.n	90007680 <HAL_RCC_OscConfig+0xd8>
90007644:	687b      	ldr	r3, [r7, #4]
90007646:	685b      	ldr	r3, [r3, #4]
90007648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000764c:	d10c      	bne.n	90007668 <HAL_RCC_OscConfig+0xc0>
9000764e:	4b78      	ldr	r3, [pc, #480]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007650:	681b      	ldr	r3, [r3, #0]
90007652:	4a77      	ldr	r2, [pc, #476]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007658:	6013      	str	r3, [r2, #0]
9000765a:	4b75      	ldr	r3, [pc, #468]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000765c:	681b      	ldr	r3, [r3, #0]
9000765e:	4a74      	ldr	r2, [pc, #464]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007664:	6013      	str	r3, [r2, #0]
90007666:	e00b      	b.n	90007680 <HAL_RCC_OscConfig+0xd8>
90007668:	4b71      	ldr	r3, [pc, #452]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000766a:	681b      	ldr	r3, [r3, #0]
9000766c:	4a70      	ldr	r2, [pc, #448]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000766e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90007672:	6013      	str	r3, [r2, #0]
90007674:	4b6e      	ldr	r3, [pc, #440]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007676:	681b      	ldr	r3, [r3, #0]
90007678:	4a6d      	ldr	r2, [pc, #436]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000767a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000767e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90007680:	687b      	ldr	r3, [r7, #4]
90007682:	685b      	ldr	r3, [r3, #4]
90007684:	2b00      	cmp	r3, #0
90007686:	d013      	beq.n	900076b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007688:	f7fc f876 	bl	90003778 <HAL_GetTick>
9000768c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000768e:	e008      	b.n	900076a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90007690:	f7fc f872 	bl	90003778 <HAL_GetTick>
90007694:	4602      	mov	r2, r0
90007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007698:	1ad3      	subs	r3, r2, r3
9000769a:	2b64      	cmp	r3, #100	@ 0x64
9000769c:	d901      	bls.n	900076a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
9000769e:	2303      	movs	r3, #3
900076a0:	e3d4      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900076a2:	4b63      	ldr	r3, [pc, #396]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900076a4:	681b      	ldr	r3, [r3, #0]
900076a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900076aa:	2b00      	cmp	r3, #0
900076ac:	d0f0      	beq.n	90007690 <HAL_RCC_OscConfig+0xe8>
900076ae:	e014      	b.n	900076da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900076b0:	f7fc f862 	bl	90003778 <HAL_GetTick>
900076b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900076b6:	e008      	b.n	900076ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900076b8:	f7fc f85e 	bl	90003778 <HAL_GetTick>
900076bc:	4602      	mov	r2, r0
900076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900076c0:	1ad3      	subs	r3, r2, r3
900076c2:	2b64      	cmp	r3, #100	@ 0x64
900076c4:	d901      	bls.n	900076ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
900076c6:	2303      	movs	r3, #3
900076c8:	e3c0      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900076ca:	4b59      	ldr	r3, [pc, #356]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900076cc:	681b      	ldr	r3, [r3, #0]
900076ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900076d2:	2b00      	cmp	r3, #0
900076d4:	d1f0      	bne.n	900076b8 <HAL_RCC_OscConfig+0x110>
900076d6:	e000      	b.n	900076da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900076d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900076da:	687b      	ldr	r3, [r7, #4]
900076dc:	681b      	ldr	r3, [r3, #0]
900076de:	f003 0302 	and.w	r3, r3, #2
900076e2:	2b00      	cmp	r3, #0
900076e4:	f000 80ca 	beq.w	9000787c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900076e8:	4b51      	ldr	r3, [pc, #324]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900076ea:	691b      	ldr	r3, [r3, #16]
900076ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900076f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900076f2:	4b4f      	ldr	r3, [pc, #316]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900076f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
900076f8:	6a3b      	ldr	r3, [r7, #32]
900076fa:	2b00      	cmp	r3, #0
900076fc:	d007      	beq.n	9000770e <HAL_RCC_OscConfig+0x166>
900076fe:	6a3b      	ldr	r3, [r7, #32]
90007700:	2b18      	cmp	r3, #24
90007702:	d156      	bne.n	900077b2 <HAL_RCC_OscConfig+0x20a>
90007704:	69fb      	ldr	r3, [r7, #28]
90007706:	f003 0303 	and.w	r3, r3, #3
9000770a:	2b00      	cmp	r3, #0
9000770c:	d151      	bne.n	900077b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000770e:	4b48      	ldr	r3, [pc, #288]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007710:	681b      	ldr	r3, [r3, #0]
90007712:	f003 0304 	and.w	r3, r3, #4
90007716:	2b00      	cmp	r3, #0
90007718:	d005      	beq.n	90007726 <HAL_RCC_OscConfig+0x17e>
9000771a:	687b      	ldr	r3, [r7, #4]
9000771c:	68db      	ldr	r3, [r3, #12]
9000771e:	2b00      	cmp	r3, #0
90007720:	d101      	bne.n	90007726 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90007722:	2301      	movs	r3, #1
90007724:	e392      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90007726:	4b42      	ldr	r3, [pc, #264]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007728:	681b      	ldr	r3, [r3, #0]
9000772a:	f023 0219 	bic.w	r2, r3, #25
9000772e:	687b      	ldr	r3, [r7, #4]
90007730:	68db      	ldr	r3, [r3, #12]
90007732:	493f      	ldr	r1, [pc, #252]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007734:	4313      	orrs	r3, r2
90007736:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007738:	f7fc f81e 	bl	90003778 <HAL_GetTick>
9000773c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000773e:	e008      	b.n	90007752 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007740:	f7fc f81a 	bl	90003778 <HAL_GetTick>
90007744:	4602      	mov	r2, r0
90007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007748:	1ad3      	subs	r3, r2, r3
9000774a:	2b02      	cmp	r3, #2
9000774c:	d901      	bls.n	90007752 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
9000774e:	2303      	movs	r3, #3
90007750:	e37c      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007752:	4b37      	ldr	r3, [pc, #220]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007754:	681b      	ldr	r3, [r3, #0]
90007756:	f003 0304 	and.w	r3, r3, #4
9000775a:	2b00      	cmp	r3, #0
9000775c:	d0f0      	beq.n	90007740 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000775e:	f7fc f817 	bl	90003790 <HAL_GetREVID>
90007762:	4603      	mov	r3, r0
90007764:	f241 0203 	movw	r2, #4099	@ 0x1003
90007768:	4293      	cmp	r3, r2
9000776a:	d817      	bhi.n	9000779c <HAL_RCC_OscConfig+0x1f4>
9000776c:	687b      	ldr	r3, [r7, #4]
9000776e:	691b      	ldr	r3, [r3, #16]
90007770:	2b40      	cmp	r3, #64	@ 0x40
90007772:	d108      	bne.n	90007786 <HAL_RCC_OscConfig+0x1de>
90007774:	4b2e      	ldr	r3, [pc, #184]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007776:	685b      	ldr	r3, [r3, #4]
90007778:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
9000777c:	4a2c      	ldr	r2, [pc, #176]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000777e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007782:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007784:	e07a      	b.n	9000787c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007786:	4b2a      	ldr	r3, [pc, #168]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007788:	685b      	ldr	r3, [r3, #4]
9000778a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
9000778e:	687b      	ldr	r3, [r7, #4]
90007790:	691b      	ldr	r3, [r3, #16]
90007792:	031b      	lsls	r3, r3, #12
90007794:	4926      	ldr	r1, [pc, #152]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007796:	4313      	orrs	r3, r2
90007798:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000779a:	e06f      	b.n	9000787c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000779c:	4b24      	ldr	r3, [pc, #144]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000779e:	685b      	ldr	r3, [r3, #4]
900077a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
900077a4:	687b      	ldr	r3, [r7, #4]
900077a6:	691b      	ldr	r3, [r3, #16]
900077a8:	061b      	lsls	r3, r3, #24
900077aa:	4921      	ldr	r1, [pc, #132]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900077ac:	4313      	orrs	r3, r2
900077ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900077b0:	e064      	b.n	9000787c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900077b2:	687b      	ldr	r3, [r7, #4]
900077b4:	68db      	ldr	r3, [r3, #12]
900077b6:	2b00      	cmp	r3, #0
900077b8:	d047      	beq.n	9000784a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900077ba:	4b1d      	ldr	r3, [pc, #116]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900077bc:	681b      	ldr	r3, [r3, #0]
900077be:	f023 0219 	bic.w	r2, r3, #25
900077c2:	687b      	ldr	r3, [r7, #4]
900077c4:	68db      	ldr	r3, [r3, #12]
900077c6:	491a      	ldr	r1, [pc, #104]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900077c8:	4313      	orrs	r3, r2
900077ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900077cc:	f7fb ffd4 	bl	90003778 <HAL_GetTick>
900077d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900077d2:	e008      	b.n	900077e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900077d4:	f7fb ffd0 	bl	90003778 <HAL_GetTick>
900077d8:	4602      	mov	r2, r0
900077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900077dc:	1ad3      	subs	r3, r2, r3
900077de:	2b02      	cmp	r3, #2
900077e0:	d901      	bls.n	900077e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
900077e2:	2303      	movs	r3, #3
900077e4:	e332      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900077e6:	4b12      	ldr	r3, [pc, #72]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
900077e8:	681b      	ldr	r3, [r3, #0]
900077ea:	f003 0304 	and.w	r3, r3, #4
900077ee:	2b00      	cmp	r3, #0
900077f0:	d0f0      	beq.n	900077d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900077f2:	f7fb ffcd 	bl	90003790 <HAL_GetREVID>
900077f6:	4603      	mov	r3, r0
900077f8:	f241 0203 	movw	r2, #4099	@ 0x1003
900077fc:	4293      	cmp	r3, r2
900077fe:	d819      	bhi.n	90007834 <HAL_RCC_OscConfig+0x28c>
90007800:	687b      	ldr	r3, [r7, #4]
90007802:	691b      	ldr	r3, [r3, #16]
90007804:	2b40      	cmp	r3, #64	@ 0x40
90007806:	d108      	bne.n	9000781a <HAL_RCC_OscConfig+0x272>
90007808:	4b09      	ldr	r3, [pc, #36]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000780a:	685b      	ldr	r3, [r3, #4]
9000780c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90007810:	4a07      	ldr	r2, [pc, #28]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
90007812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007816:	6053      	str	r3, [r2, #4]
90007818:	e030      	b.n	9000787c <HAL_RCC_OscConfig+0x2d4>
9000781a:	4b05      	ldr	r3, [pc, #20]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000781c:	685b      	ldr	r3, [r3, #4]
9000781e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007822:	687b      	ldr	r3, [r7, #4]
90007824:	691b      	ldr	r3, [r3, #16]
90007826:	031b      	lsls	r3, r3, #12
90007828:	4901      	ldr	r1, [pc, #4]	@ (90007830 <HAL_RCC_OscConfig+0x288>)
9000782a:	4313      	orrs	r3, r2
9000782c:	604b      	str	r3, [r1, #4]
9000782e:	e025      	b.n	9000787c <HAL_RCC_OscConfig+0x2d4>
90007830:	58024400 	.word	0x58024400
90007834:	4b9a      	ldr	r3, [pc, #616]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007836:	685b      	ldr	r3, [r3, #4]
90007838:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
9000783c:	687b      	ldr	r3, [r7, #4]
9000783e:	691b      	ldr	r3, [r3, #16]
90007840:	061b      	lsls	r3, r3, #24
90007842:	4997      	ldr	r1, [pc, #604]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007844:	4313      	orrs	r3, r2
90007846:	604b      	str	r3, [r1, #4]
90007848:	e018      	b.n	9000787c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
9000784a:	4b95      	ldr	r3, [pc, #596]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
9000784c:	681b      	ldr	r3, [r3, #0]
9000784e:	4a94      	ldr	r2, [pc, #592]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007850:	f023 0301 	bic.w	r3, r3, #1
90007854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007856:	f7fb ff8f 	bl	90003778 <HAL_GetTick>
9000785a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000785c:	e008      	b.n	90007870 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000785e:	f7fb ff8b 	bl	90003778 <HAL_GetTick>
90007862:	4602      	mov	r2, r0
90007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007866:	1ad3      	subs	r3, r2, r3
90007868:	2b02      	cmp	r3, #2
9000786a:	d901      	bls.n	90007870 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
9000786c:	2303      	movs	r3, #3
9000786e:	e2ed      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007870:	4b8b      	ldr	r3, [pc, #556]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007872:	681b      	ldr	r3, [r3, #0]
90007874:	f003 0304 	and.w	r3, r3, #4
90007878:	2b00      	cmp	r3, #0
9000787a:	d1f0      	bne.n	9000785e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000787c:	687b      	ldr	r3, [r7, #4]
9000787e:	681b      	ldr	r3, [r3, #0]
90007880:	f003 0310 	and.w	r3, r3, #16
90007884:	2b00      	cmp	r3, #0
90007886:	f000 80a9 	beq.w	900079dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000788a:	4b85      	ldr	r3, [pc, #532]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
9000788c:	691b      	ldr	r3, [r3, #16]
9000788e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007892:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90007894:	4b82      	ldr	r3, [pc, #520]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007898:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000789a:	69bb      	ldr	r3, [r7, #24]
9000789c:	2b08      	cmp	r3, #8
9000789e:	d007      	beq.n	900078b0 <HAL_RCC_OscConfig+0x308>
900078a0:	69bb      	ldr	r3, [r7, #24]
900078a2:	2b18      	cmp	r3, #24
900078a4:	d13a      	bne.n	9000791c <HAL_RCC_OscConfig+0x374>
900078a6:	697b      	ldr	r3, [r7, #20]
900078a8:	f003 0303 	and.w	r3, r3, #3
900078ac:	2b01      	cmp	r3, #1
900078ae:	d135      	bne.n	9000791c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900078b0:	4b7b      	ldr	r3, [pc, #492]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900078b2:	681b      	ldr	r3, [r3, #0]
900078b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900078b8:	2b00      	cmp	r3, #0
900078ba:	d005      	beq.n	900078c8 <HAL_RCC_OscConfig+0x320>
900078bc:	687b      	ldr	r3, [r7, #4]
900078be:	69db      	ldr	r3, [r3, #28]
900078c0:	2b80      	cmp	r3, #128	@ 0x80
900078c2:	d001      	beq.n	900078c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
900078c4:	2301      	movs	r3, #1
900078c6:	e2c1      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900078c8:	f7fb ff62 	bl	90003790 <HAL_GetREVID>
900078cc:	4603      	mov	r3, r0
900078ce:	f241 0203 	movw	r2, #4099	@ 0x1003
900078d2:	4293      	cmp	r3, r2
900078d4:	d817      	bhi.n	90007906 <HAL_RCC_OscConfig+0x35e>
900078d6:	687b      	ldr	r3, [r7, #4]
900078d8:	6a1b      	ldr	r3, [r3, #32]
900078da:	2b20      	cmp	r3, #32
900078dc:	d108      	bne.n	900078f0 <HAL_RCC_OscConfig+0x348>
900078de:	4b70      	ldr	r3, [pc, #448]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900078e0:	685b      	ldr	r3, [r3, #4]
900078e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
900078e6:	4a6e      	ldr	r2, [pc, #440]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900078e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
900078ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900078ee:	e075      	b.n	900079dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900078f0:	4b6b      	ldr	r3, [pc, #428]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900078f2:	685b      	ldr	r3, [r3, #4]
900078f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
900078f8:	687b      	ldr	r3, [r7, #4]
900078fa:	6a1b      	ldr	r3, [r3, #32]
900078fc:	069b      	lsls	r3, r3, #26
900078fe:	4968      	ldr	r1, [pc, #416]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007900:	4313      	orrs	r3, r2
90007902:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007904:	e06a      	b.n	900079dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007906:	4b66      	ldr	r3, [pc, #408]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007908:	68db      	ldr	r3, [r3, #12]
9000790a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
9000790e:	687b      	ldr	r3, [r7, #4]
90007910:	6a1b      	ldr	r3, [r3, #32]
90007912:	061b      	lsls	r3, r3, #24
90007914:	4962      	ldr	r1, [pc, #392]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007916:	4313      	orrs	r3, r2
90007918:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000791a:	e05f      	b.n	900079dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000791c:	687b      	ldr	r3, [r7, #4]
9000791e:	69db      	ldr	r3, [r3, #28]
90007920:	2b00      	cmp	r3, #0
90007922:	d042      	beq.n	900079aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90007924:	4b5e      	ldr	r3, [pc, #376]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007926:	681b      	ldr	r3, [r3, #0]
90007928:	4a5d      	ldr	r2, [pc, #372]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
9000792a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000792e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007930:	f7fb ff22 	bl	90003778 <HAL_GetTick>
90007934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007936:	e008      	b.n	9000794a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90007938:	f7fb ff1e 	bl	90003778 <HAL_GetTick>
9000793c:	4602      	mov	r2, r0
9000793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007940:	1ad3      	subs	r3, r2, r3
90007942:	2b02      	cmp	r3, #2
90007944:	d901      	bls.n	9000794a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90007946:	2303      	movs	r3, #3
90007948:	e280      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000794a:	4b55      	ldr	r3, [pc, #340]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
9000794c:	681b      	ldr	r3, [r3, #0]
9000794e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007952:	2b00      	cmp	r3, #0
90007954:	d0f0      	beq.n	90007938 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007956:	f7fb ff1b 	bl	90003790 <HAL_GetREVID>
9000795a:	4603      	mov	r3, r0
9000795c:	f241 0203 	movw	r2, #4099	@ 0x1003
90007960:	4293      	cmp	r3, r2
90007962:	d817      	bhi.n	90007994 <HAL_RCC_OscConfig+0x3ec>
90007964:	687b      	ldr	r3, [r7, #4]
90007966:	6a1b      	ldr	r3, [r3, #32]
90007968:	2b20      	cmp	r3, #32
9000796a:	d108      	bne.n	9000797e <HAL_RCC_OscConfig+0x3d6>
9000796c:	4b4c      	ldr	r3, [pc, #304]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
9000796e:	685b      	ldr	r3, [r3, #4]
90007970:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90007974:	4a4a      	ldr	r2, [pc, #296]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007976:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000797a:	6053      	str	r3, [r2, #4]
9000797c:	e02e      	b.n	900079dc <HAL_RCC_OscConfig+0x434>
9000797e:	4b48      	ldr	r3, [pc, #288]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007980:	685b      	ldr	r3, [r3, #4]
90007982:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90007986:	687b      	ldr	r3, [r7, #4]
90007988:	6a1b      	ldr	r3, [r3, #32]
9000798a:	069b      	lsls	r3, r3, #26
9000798c:	4944      	ldr	r1, [pc, #272]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
9000798e:	4313      	orrs	r3, r2
90007990:	604b      	str	r3, [r1, #4]
90007992:	e023      	b.n	900079dc <HAL_RCC_OscConfig+0x434>
90007994:	4b42      	ldr	r3, [pc, #264]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007996:	68db      	ldr	r3, [r3, #12]
90007998:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
9000799c:	687b      	ldr	r3, [r7, #4]
9000799e:	6a1b      	ldr	r3, [r3, #32]
900079a0:	061b      	lsls	r3, r3, #24
900079a2:	493f      	ldr	r1, [pc, #252]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900079a4:	4313      	orrs	r3, r2
900079a6:	60cb      	str	r3, [r1, #12]
900079a8:	e018      	b.n	900079dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
900079aa:	4b3d      	ldr	r3, [pc, #244]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900079ac:	681b      	ldr	r3, [r3, #0]
900079ae:	4a3c      	ldr	r2, [pc, #240]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900079b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
900079b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900079b6:	f7fb fedf 	bl	90003778 <HAL_GetTick>
900079ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900079bc:	e008      	b.n	900079d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
900079be:	f7fb fedb 	bl	90003778 <HAL_GetTick>
900079c2:	4602      	mov	r2, r0
900079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900079c6:	1ad3      	subs	r3, r2, r3
900079c8:	2b02      	cmp	r3, #2
900079ca:	d901      	bls.n	900079d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
900079cc:	2303      	movs	r3, #3
900079ce:	e23d      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900079d0:	4b33      	ldr	r3, [pc, #204]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900079d2:	681b      	ldr	r3, [r3, #0]
900079d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900079d8:	2b00      	cmp	r3, #0
900079da:	d1f0      	bne.n	900079be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900079dc:	687b      	ldr	r3, [r7, #4]
900079de:	681b      	ldr	r3, [r3, #0]
900079e0:	f003 0308 	and.w	r3, r3, #8
900079e4:	2b00      	cmp	r3, #0
900079e6:	d036      	beq.n	90007a56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
900079e8:	687b      	ldr	r3, [r7, #4]
900079ea:	695b      	ldr	r3, [r3, #20]
900079ec:	2b00      	cmp	r3, #0
900079ee:	d019      	beq.n	90007a24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900079f0:	4b2b      	ldr	r3, [pc, #172]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900079f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900079f4:	4a2a      	ldr	r2, [pc, #168]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
900079f6:	f043 0301 	orr.w	r3, r3, #1
900079fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900079fc:	f7fb febc 	bl	90003778 <HAL_GetTick>
90007a00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007a02:	e008      	b.n	90007a16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007a04:	f7fb feb8 	bl	90003778 <HAL_GetTick>
90007a08:	4602      	mov	r2, r0
90007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007a0c:	1ad3      	subs	r3, r2, r3
90007a0e:	2b02      	cmp	r3, #2
90007a10:	d901      	bls.n	90007a16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90007a12:	2303      	movs	r3, #3
90007a14:	e21a      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007a16:	4b22      	ldr	r3, [pc, #136]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007a1a:	f003 0302 	and.w	r3, r3, #2
90007a1e:	2b00      	cmp	r3, #0
90007a20:	d0f0      	beq.n	90007a04 <HAL_RCC_OscConfig+0x45c>
90007a22:	e018      	b.n	90007a56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90007a24:	4b1e      	ldr	r3, [pc, #120]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007a28:	4a1d      	ldr	r2, [pc, #116]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007a2a:	f023 0301 	bic.w	r3, r3, #1
90007a2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007a30:	f7fb fea2 	bl	90003778 <HAL_GetTick>
90007a34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90007a36:	e008      	b.n	90007a4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007a38:	f7fb fe9e 	bl	90003778 <HAL_GetTick>
90007a3c:	4602      	mov	r2, r0
90007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007a40:	1ad3      	subs	r3, r2, r3
90007a42:	2b02      	cmp	r3, #2
90007a44:	d901      	bls.n	90007a4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90007a46:	2303      	movs	r3, #3
90007a48:	e200      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90007a4a:	4b15      	ldr	r3, [pc, #84]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007a4e:	f003 0302 	and.w	r3, r3, #2
90007a52:	2b00      	cmp	r3, #0
90007a54:	d1f0      	bne.n	90007a38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90007a56:	687b      	ldr	r3, [r7, #4]
90007a58:	681b      	ldr	r3, [r3, #0]
90007a5a:	f003 0320 	and.w	r3, r3, #32
90007a5e:	2b00      	cmp	r3, #0
90007a60:	d039      	beq.n	90007ad6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90007a62:	687b      	ldr	r3, [r7, #4]
90007a64:	699b      	ldr	r3, [r3, #24]
90007a66:	2b00      	cmp	r3, #0
90007a68:	d01c      	beq.n	90007aa4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007a6c:	681b      	ldr	r3, [r3, #0]
90007a6e:	4a0c      	ldr	r2, [pc, #48]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90007a74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007a76:	f7fb fe7f 	bl	90003778 <HAL_GetTick>
90007a7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007a7c:	e008      	b.n	90007a90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007a7e:	f7fb fe7b 	bl	90003778 <HAL_GetTick>
90007a82:	4602      	mov	r2, r0
90007a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007a86:	1ad3      	subs	r3, r2, r3
90007a88:	2b02      	cmp	r3, #2
90007a8a:	d901      	bls.n	90007a90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007a8c:	2303      	movs	r3, #3
90007a8e:	e1dd      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007a90:	4b03      	ldr	r3, [pc, #12]	@ (90007aa0 <HAL_RCC_OscConfig+0x4f8>)
90007a92:	681b      	ldr	r3, [r3, #0]
90007a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007a98:	2b00      	cmp	r3, #0
90007a9a:	d0f0      	beq.n	90007a7e <HAL_RCC_OscConfig+0x4d6>
90007a9c:	e01b      	b.n	90007ad6 <HAL_RCC_OscConfig+0x52e>
90007a9e:	bf00      	nop
90007aa0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007aa4:	4b9b      	ldr	r3, [pc, #620]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007aa6:	681b      	ldr	r3, [r3, #0]
90007aa8:	4a9a      	ldr	r2, [pc, #616]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007aaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90007aae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007ab0:	f7fb fe62 	bl	90003778 <HAL_GetTick>
90007ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007ab6:	e008      	b.n	90007aca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007ab8:	f7fb fe5e 	bl	90003778 <HAL_GetTick>
90007abc:	4602      	mov	r2, r0
90007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007ac0:	1ad3      	subs	r3, r2, r3
90007ac2:	2b02      	cmp	r3, #2
90007ac4:	d901      	bls.n	90007aca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90007ac6:	2303      	movs	r3, #3
90007ac8:	e1c0      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007aca:	4b92      	ldr	r3, [pc, #584]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007acc:	681b      	ldr	r3, [r3, #0]
90007ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007ad2:	2b00      	cmp	r3, #0
90007ad4:	d1f0      	bne.n	90007ab8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90007ad6:	687b      	ldr	r3, [r7, #4]
90007ad8:	681b      	ldr	r3, [r3, #0]
90007ada:	f003 0304 	and.w	r3, r3, #4
90007ade:	2b00      	cmp	r3, #0
90007ae0:	f000 8081 	beq.w	90007be6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007ae4:	4b8c      	ldr	r3, [pc, #560]	@ (90007d18 <HAL_RCC_OscConfig+0x770>)
90007ae6:	681b      	ldr	r3, [r3, #0]
90007ae8:	4a8b      	ldr	r2, [pc, #556]	@ (90007d18 <HAL_RCC_OscConfig+0x770>)
90007aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90007aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90007af0:	f7fb fe42 	bl	90003778 <HAL_GetTick>
90007af4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007af6:	e008      	b.n	90007b0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007af8:	f7fb fe3e 	bl	90003778 <HAL_GetTick>
90007afc:	4602      	mov	r2, r0
90007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007b00:	1ad3      	subs	r3, r2, r3
90007b02:	2b64      	cmp	r3, #100	@ 0x64
90007b04:	d901      	bls.n	90007b0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90007b06:	2303      	movs	r3, #3
90007b08:	e1a0      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007b0a:	4b83      	ldr	r3, [pc, #524]	@ (90007d18 <HAL_RCC_OscConfig+0x770>)
90007b0c:	681b      	ldr	r3, [r3, #0]
90007b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007b12:	2b00      	cmp	r3, #0
90007b14:	d0f0      	beq.n	90007af8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90007b16:	687b      	ldr	r3, [r7, #4]
90007b18:	689b      	ldr	r3, [r3, #8]
90007b1a:	2b01      	cmp	r3, #1
90007b1c:	d106      	bne.n	90007b2c <HAL_RCC_OscConfig+0x584>
90007b1e:	4b7d      	ldr	r3, [pc, #500]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007b22:	4a7c      	ldr	r2, [pc, #496]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b24:	f043 0301 	orr.w	r3, r3, #1
90007b28:	6713      	str	r3, [r2, #112]	@ 0x70
90007b2a:	e02d      	b.n	90007b88 <HAL_RCC_OscConfig+0x5e0>
90007b2c:	687b      	ldr	r3, [r7, #4]
90007b2e:	689b      	ldr	r3, [r3, #8]
90007b30:	2b00      	cmp	r3, #0
90007b32:	d10c      	bne.n	90007b4e <HAL_RCC_OscConfig+0x5a6>
90007b34:	4b77      	ldr	r3, [pc, #476]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007b38:	4a76      	ldr	r2, [pc, #472]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b3a:	f023 0301 	bic.w	r3, r3, #1
90007b3e:	6713      	str	r3, [r2, #112]	@ 0x70
90007b40:	4b74      	ldr	r3, [pc, #464]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007b44:	4a73      	ldr	r2, [pc, #460]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b46:	f023 0304 	bic.w	r3, r3, #4
90007b4a:	6713      	str	r3, [r2, #112]	@ 0x70
90007b4c:	e01c      	b.n	90007b88 <HAL_RCC_OscConfig+0x5e0>
90007b4e:	687b      	ldr	r3, [r7, #4]
90007b50:	689b      	ldr	r3, [r3, #8]
90007b52:	2b05      	cmp	r3, #5
90007b54:	d10c      	bne.n	90007b70 <HAL_RCC_OscConfig+0x5c8>
90007b56:	4b6f      	ldr	r3, [pc, #444]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007b5a:	4a6e      	ldr	r2, [pc, #440]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b5c:	f043 0304 	orr.w	r3, r3, #4
90007b60:	6713      	str	r3, [r2, #112]	@ 0x70
90007b62:	4b6c      	ldr	r3, [pc, #432]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007b66:	4a6b      	ldr	r2, [pc, #428]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b68:	f043 0301 	orr.w	r3, r3, #1
90007b6c:	6713      	str	r3, [r2, #112]	@ 0x70
90007b6e:	e00b      	b.n	90007b88 <HAL_RCC_OscConfig+0x5e0>
90007b70:	4b68      	ldr	r3, [pc, #416]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007b74:	4a67      	ldr	r2, [pc, #412]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b76:	f023 0301 	bic.w	r3, r3, #1
90007b7a:	6713      	str	r3, [r2, #112]	@ 0x70
90007b7c:	4b65      	ldr	r3, [pc, #404]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007b80:	4a64      	ldr	r2, [pc, #400]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007b82:	f023 0304 	bic.w	r3, r3, #4
90007b86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90007b88:	687b      	ldr	r3, [r7, #4]
90007b8a:	689b      	ldr	r3, [r3, #8]
90007b8c:	2b00      	cmp	r3, #0
90007b8e:	d015      	beq.n	90007bbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007b90:	f7fb fdf2 	bl	90003778 <HAL_GetTick>
90007b94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007b96:	e00a      	b.n	90007bae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007b98:	f7fb fdee 	bl	90003778 <HAL_GetTick>
90007b9c:	4602      	mov	r2, r0
90007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007ba0:	1ad3      	subs	r3, r2, r3
90007ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
90007ba6:	4293      	cmp	r3, r2
90007ba8:	d901      	bls.n	90007bae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90007baa:	2303      	movs	r3, #3
90007bac:	e14e      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007bae:	4b59      	ldr	r3, [pc, #356]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007bb2:	f003 0302 	and.w	r3, r3, #2
90007bb6:	2b00      	cmp	r3, #0
90007bb8:	d0ee      	beq.n	90007b98 <HAL_RCC_OscConfig+0x5f0>
90007bba:	e014      	b.n	90007be6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007bbc:	f7fb fddc 	bl	90003778 <HAL_GetTick>
90007bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007bc2:	e00a      	b.n	90007bda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007bc4:	f7fb fdd8 	bl	90003778 <HAL_GetTick>
90007bc8:	4602      	mov	r2, r0
90007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007bcc:	1ad3      	subs	r3, r2, r3
90007bce:	f241 3288 	movw	r2, #5000	@ 0x1388
90007bd2:	4293      	cmp	r3, r2
90007bd4:	d901      	bls.n	90007bda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90007bd6:	2303      	movs	r3, #3
90007bd8:	e138      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007bda:	4b4e      	ldr	r3, [pc, #312]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007bde:	f003 0302 	and.w	r3, r3, #2
90007be2:	2b00      	cmp	r3, #0
90007be4:	d1ee      	bne.n	90007bc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90007be6:	687b      	ldr	r3, [r7, #4]
90007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007bea:	2b00      	cmp	r3, #0
90007bec:	f000 812d 	beq.w	90007e4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007bf0:	4b48      	ldr	r3, [pc, #288]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007bf2:	691b      	ldr	r3, [r3, #16]
90007bf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007bf8:	2b18      	cmp	r3, #24
90007bfa:	f000 80bd 	beq.w	90007d78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90007bfe:	687b      	ldr	r3, [r7, #4]
90007c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007c02:	2b02      	cmp	r3, #2
90007c04:	f040 809e 	bne.w	90007d44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007c08:	4b42      	ldr	r3, [pc, #264]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c0a:	681b      	ldr	r3, [r3, #0]
90007c0c:	4a41      	ldr	r2, [pc, #260]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007c14:	f7fb fdb0 	bl	90003778 <HAL_GetTick>
90007c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007c1a:	e008      	b.n	90007c2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007c1c:	f7fb fdac 	bl	90003778 <HAL_GetTick>
90007c20:	4602      	mov	r2, r0
90007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007c24:	1ad3      	subs	r3, r2, r3
90007c26:	2b02      	cmp	r3, #2
90007c28:	d901      	bls.n	90007c2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90007c2a:	2303      	movs	r3, #3
90007c2c:	e10e      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007c2e:	4b39      	ldr	r3, [pc, #228]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c30:	681b      	ldr	r3, [r3, #0]
90007c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007c36:	2b00      	cmp	r3, #0
90007c38:	d1f0      	bne.n	90007c1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90007c3a:	4b36      	ldr	r3, [pc, #216]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90007c3e:	4b37      	ldr	r3, [pc, #220]	@ (90007d1c <HAL_RCC_OscConfig+0x774>)
90007c40:	4013      	ands	r3, r2
90007c42:	687a      	ldr	r2, [r7, #4]
90007c44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
90007c46:	687a      	ldr	r2, [r7, #4]
90007c48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
90007c4a:	0112      	lsls	r2, r2, #4
90007c4c:	430a      	orrs	r2, r1
90007c4e:	4931      	ldr	r1, [pc, #196]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c50:	4313      	orrs	r3, r2
90007c52:	628b      	str	r3, [r1, #40]	@ 0x28
90007c54:	687b      	ldr	r3, [r7, #4]
90007c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007c58:	3b01      	subs	r3, #1
90007c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007c5e:	687b      	ldr	r3, [r7, #4]
90007c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007c62:	3b01      	subs	r3, #1
90007c64:	025b      	lsls	r3, r3, #9
90007c66:	b29b      	uxth	r3, r3
90007c68:	431a      	orrs	r2, r3
90007c6a:	687b      	ldr	r3, [r7, #4]
90007c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007c6e:	3b01      	subs	r3, #1
90007c70:	041b      	lsls	r3, r3, #16
90007c72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90007c76:	431a      	orrs	r2, r3
90007c78:	687b      	ldr	r3, [r7, #4]
90007c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007c7c:	3b01      	subs	r3, #1
90007c7e:	061b      	lsls	r3, r3, #24
90007c80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007c84:	4923      	ldr	r1, [pc, #140]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c86:	4313      	orrs	r3, r2
90007c88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90007c8a:	4b22      	ldr	r3, [pc, #136]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c8e:	4a21      	ldr	r2, [pc, #132]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c90:	f023 0301 	bic.w	r3, r3, #1
90007c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007c96:	4b1f      	ldr	r3, [pc, #124]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007c9a:	4b21      	ldr	r3, [pc, #132]	@ (90007d20 <HAL_RCC_OscConfig+0x778>)
90007c9c:	4013      	ands	r3, r2
90007c9e:	687a      	ldr	r2, [r7, #4]
90007ca0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007ca2:	00d2      	lsls	r2, r2, #3
90007ca4:	491b      	ldr	r1, [pc, #108]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007ca6:	4313      	orrs	r3, r2
90007ca8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90007caa:	4b1a      	ldr	r3, [pc, #104]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cae:	f023 020c 	bic.w	r2, r3, #12
90007cb2:	687b      	ldr	r3, [r7, #4]
90007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007cb6:	4917      	ldr	r1, [pc, #92]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cb8:	4313      	orrs	r3, r2
90007cba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007cbc:	4b15      	ldr	r3, [pc, #84]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cc0:	f023 0202 	bic.w	r2, r3, #2
90007cc4:	687b      	ldr	r3, [r7, #4]
90007cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90007cc8:	4912      	ldr	r1, [pc, #72]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cca:	4313      	orrs	r3, r2
90007ccc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90007cce:	4b11      	ldr	r3, [pc, #68]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cd2:	4a10      	ldr	r2, [pc, #64]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007cda:	4b0e      	ldr	r3, [pc, #56]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cde:	4a0d      	ldr	r2, [pc, #52]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90007ce6:	4b0b      	ldr	r3, [pc, #44]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cea:	4a0a      	ldr	r2, [pc, #40]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90007cf2:	4b08      	ldr	r3, [pc, #32]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cf6:	4a07      	ldr	r2, [pc, #28]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007cf8:	f043 0301 	orr.w	r3, r3, #1
90007cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90007cfe:	4b05      	ldr	r3, [pc, #20]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007d00:	681b      	ldr	r3, [r3, #0]
90007d02:	4a04      	ldr	r2, [pc, #16]	@ (90007d14 <HAL_RCC_OscConfig+0x76c>)
90007d04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90007d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007d0a:	f7fb fd35 	bl	90003778 <HAL_GetTick>
90007d0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007d10:	e011      	b.n	90007d36 <HAL_RCC_OscConfig+0x78e>
90007d12:	bf00      	nop
90007d14:	58024400 	.word	0x58024400
90007d18:	58024800 	.word	0x58024800
90007d1c:	fffffc0c 	.word	0xfffffc0c
90007d20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007d24:	f7fb fd28 	bl	90003778 <HAL_GetTick>
90007d28:	4602      	mov	r2, r0
90007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007d2c:	1ad3      	subs	r3, r2, r3
90007d2e:	2b02      	cmp	r3, #2
90007d30:	d901      	bls.n	90007d36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90007d32:	2303      	movs	r3, #3
90007d34:	e08a      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007d36:	4b47      	ldr	r3, [pc, #284]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007d38:	681b      	ldr	r3, [r3, #0]
90007d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007d3e:	2b00      	cmp	r3, #0
90007d40:	d0f0      	beq.n	90007d24 <HAL_RCC_OscConfig+0x77c>
90007d42:	e082      	b.n	90007e4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007d44:	4b43      	ldr	r3, [pc, #268]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007d46:	681b      	ldr	r3, [r3, #0]
90007d48:	4a42      	ldr	r2, [pc, #264]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007d50:	f7fb fd12 	bl	90003778 <HAL_GetTick>
90007d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007d56:	e008      	b.n	90007d6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007d58:	f7fb fd0e 	bl	90003778 <HAL_GetTick>
90007d5c:	4602      	mov	r2, r0
90007d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007d60:	1ad3      	subs	r3, r2, r3
90007d62:	2b02      	cmp	r3, #2
90007d64:	d901      	bls.n	90007d6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90007d66:	2303      	movs	r3, #3
90007d68:	e070      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007d6a:	4b3a      	ldr	r3, [pc, #232]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007d6c:	681b      	ldr	r3, [r3, #0]
90007d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007d72:	2b00      	cmp	r3, #0
90007d74:	d1f0      	bne.n	90007d58 <HAL_RCC_OscConfig+0x7b0>
90007d76:	e068      	b.n	90007e4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90007d78:	4b36      	ldr	r3, [pc, #216]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007d7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90007d7e:	4b35      	ldr	r3, [pc, #212]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007d82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007d84:	687b      	ldr	r3, [r7, #4]
90007d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007d88:	2b01      	cmp	r3, #1
90007d8a:	d031      	beq.n	90007df0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007d8c:	693b      	ldr	r3, [r7, #16]
90007d8e:	f003 0203 	and.w	r2, r3, #3
90007d92:	687b      	ldr	r3, [r7, #4]
90007d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007d96:	429a      	cmp	r2, r3
90007d98:	d12a      	bne.n	90007df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007d9a:	693b      	ldr	r3, [r7, #16]
90007d9c:	091b      	lsrs	r3, r3, #4
90007d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90007da2:	687b      	ldr	r3, [r7, #4]
90007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007da6:	429a      	cmp	r2, r3
90007da8:	d122      	bne.n	90007df0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007daa:	68fb      	ldr	r3, [r7, #12]
90007dac:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007db0:	687b      	ldr	r3, [r7, #4]
90007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007db4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007db6:	429a      	cmp	r2, r3
90007db8:	d11a      	bne.n	90007df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007dba:	68fb      	ldr	r3, [r7, #12]
90007dbc:	0a5b      	lsrs	r3, r3, #9
90007dbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007dc2:	687b      	ldr	r3, [r7, #4]
90007dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007dc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007dc8:	429a      	cmp	r2, r3
90007dca:	d111      	bne.n	90007df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007dcc:	68fb      	ldr	r3, [r7, #12]
90007dce:	0c1b      	lsrs	r3, r3, #16
90007dd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007dd4:	687b      	ldr	r3, [r7, #4]
90007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007dd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007dda:	429a      	cmp	r2, r3
90007ddc:	d108      	bne.n	90007df0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90007dde:	68fb      	ldr	r3, [r7, #12]
90007de0:	0e1b      	lsrs	r3, r3, #24
90007de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007de6:	687b      	ldr	r3, [r7, #4]
90007de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007dea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007dec:	429a      	cmp	r2, r3
90007dee:	d001      	beq.n	90007df4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90007df0:	2301      	movs	r3, #1
90007df2:	e02b      	b.n	90007e4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007df4:	4b17      	ldr	r3, [pc, #92]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007df8:	08db      	lsrs	r3, r3, #3
90007dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007dfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90007e00:	687b      	ldr	r3, [r7, #4]
90007e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007e04:	693a      	ldr	r2, [r7, #16]
90007e06:	429a      	cmp	r2, r3
90007e08:	d01f      	beq.n	90007e4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90007e0a:	4b12      	ldr	r3, [pc, #72]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e0e:	4a11      	ldr	r2, [pc, #68]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007e10:	f023 0301 	bic.w	r3, r3, #1
90007e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90007e16:	f7fb fcaf 	bl	90003778 <HAL_GetTick>
90007e1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007e1c:	bf00      	nop
90007e1e:	f7fb fcab 	bl	90003778 <HAL_GetTick>
90007e22:	4602      	mov	r2, r0
90007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007e26:	4293      	cmp	r3, r2
90007e28:	d0f9      	beq.n	90007e1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007e2a:	4b0a      	ldr	r3, [pc, #40]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007e2e:	4b0a      	ldr	r3, [pc, #40]	@ (90007e58 <HAL_RCC_OscConfig+0x8b0>)
90007e30:	4013      	ands	r3, r2
90007e32:	687a      	ldr	r2, [r7, #4]
90007e34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007e36:	00d2      	lsls	r2, r2, #3
90007e38:	4906      	ldr	r1, [pc, #24]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007e3a:	4313      	orrs	r3, r2
90007e3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90007e3e:	4b05      	ldr	r3, [pc, #20]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e42:	4a04      	ldr	r2, [pc, #16]	@ (90007e54 <HAL_RCC_OscConfig+0x8ac>)
90007e44:	f043 0301 	orr.w	r3, r3, #1
90007e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
90007e4a:	2300      	movs	r3, #0
}
90007e4c:	4618      	mov	r0, r3
90007e4e:	3730      	adds	r7, #48	@ 0x30
90007e50:	46bd      	mov	sp, r7
90007e52:	bd80      	pop	{r7, pc}
90007e54:	58024400 	.word	0x58024400
90007e58:	ffff0007 	.word	0xffff0007

90007e5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90007e5c:	b580      	push	{r7, lr}
90007e5e:	b086      	sub	sp, #24
90007e60:	af00      	add	r7, sp, #0
90007e62:	6078      	str	r0, [r7, #4]
90007e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90007e66:	687b      	ldr	r3, [r7, #4]
90007e68:	2b00      	cmp	r3, #0
90007e6a:	d101      	bne.n	90007e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90007e6c:	2301      	movs	r3, #1
90007e6e:	e19c      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007e70:	4b8a      	ldr	r3, [pc, #552]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
90007e72:	681b      	ldr	r3, [r3, #0]
90007e74:	f003 030f 	and.w	r3, r3, #15
90007e78:	683a      	ldr	r2, [r7, #0]
90007e7a:	429a      	cmp	r2, r3
90007e7c:	d910      	bls.n	90007ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007e7e:	4b87      	ldr	r3, [pc, #540]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
90007e80:	681b      	ldr	r3, [r3, #0]
90007e82:	f023 020f 	bic.w	r2, r3, #15
90007e86:	4985      	ldr	r1, [pc, #532]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
90007e88:	683b      	ldr	r3, [r7, #0]
90007e8a:	4313      	orrs	r3, r2
90007e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007e8e:	4b83      	ldr	r3, [pc, #524]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
90007e90:	681b      	ldr	r3, [r3, #0]
90007e92:	f003 030f 	and.w	r3, r3, #15
90007e96:	683a      	ldr	r2, [r7, #0]
90007e98:	429a      	cmp	r2, r3
90007e9a:	d001      	beq.n	90007ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007e9c:	2301      	movs	r3, #1
90007e9e:	e184      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007ea0:	687b      	ldr	r3, [r7, #4]
90007ea2:	681b      	ldr	r3, [r3, #0]
90007ea4:	f003 0304 	and.w	r3, r3, #4
90007ea8:	2b00      	cmp	r3, #0
90007eaa:	d010      	beq.n	90007ece <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007eac:	687b      	ldr	r3, [r7, #4]
90007eae:	691a      	ldr	r2, [r3, #16]
90007eb0:	4b7b      	ldr	r3, [pc, #492]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007eb2:	699b      	ldr	r3, [r3, #24]
90007eb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007eb8:	429a      	cmp	r2, r3
90007eba:	d908      	bls.n	90007ece <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007ebc:	4b78      	ldr	r3, [pc, #480]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007ebe:	699b      	ldr	r3, [r3, #24]
90007ec0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007ec4:	687b      	ldr	r3, [r7, #4]
90007ec6:	691b      	ldr	r3, [r3, #16]
90007ec8:	4975      	ldr	r1, [pc, #468]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007eca:	4313      	orrs	r3, r2
90007ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007ece:	687b      	ldr	r3, [r7, #4]
90007ed0:	681b      	ldr	r3, [r3, #0]
90007ed2:	f003 0308 	and.w	r3, r3, #8
90007ed6:	2b00      	cmp	r3, #0
90007ed8:	d010      	beq.n	90007efc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007eda:	687b      	ldr	r3, [r7, #4]
90007edc:	695a      	ldr	r2, [r3, #20]
90007ede:	4b70      	ldr	r3, [pc, #448]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007ee0:	69db      	ldr	r3, [r3, #28]
90007ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007ee6:	429a      	cmp	r2, r3
90007ee8:	d908      	bls.n	90007efc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007eea:	4b6d      	ldr	r3, [pc, #436]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007eec:	69db      	ldr	r3, [r3, #28]
90007eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007ef2:	687b      	ldr	r3, [r7, #4]
90007ef4:	695b      	ldr	r3, [r3, #20]
90007ef6:	496a      	ldr	r1, [pc, #424]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007ef8:	4313      	orrs	r3, r2
90007efa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007efc:	687b      	ldr	r3, [r7, #4]
90007efe:	681b      	ldr	r3, [r3, #0]
90007f00:	f003 0310 	and.w	r3, r3, #16
90007f04:	2b00      	cmp	r3, #0
90007f06:	d010      	beq.n	90007f2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007f08:	687b      	ldr	r3, [r7, #4]
90007f0a:	699a      	ldr	r2, [r3, #24]
90007f0c:	4b64      	ldr	r3, [pc, #400]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f0e:	69db      	ldr	r3, [r3, #28]
90007f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007f14:	429a      	cmp	r2, r3
90007f16:	d908      	bls.n	90007f2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007f18:	4b61      	ldr	r3, [pc, #388]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f1a:	69db      	ldr	r3, [r3, #28]
90007f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007f20:	687b      	ldr	r3, [r7, #4]
90007f22:	699b      	ldr	r3, [r3, #24]
90007f24:	495e      	ldr	r1, [pc, #376]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f26:	4313      	orrs	r3, r2
90007f28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007f2a:	687b      	ldr	r3, [r7, #4]
90007f2c:	681b      	ldr	r3, [r3, #0]
90007f2e:	f003 0320 	and.w	r3, r3, #32
90007f32:	2b00      	cmp	r3, #0
90007f34:	d010      	beq.n	90007f58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90007f36:	687b      	ldr	r3, [r7, #4]
90007f38:	69da      	ldr	r2, [r3, #28]
90007f3a:	4b59      	ldr	r3, [pc, #356]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f3c:	6a1b      	ldr	r3, [r3, #32]
90007f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007f42:	429a      	cmp	r2, r3
90007f44:	d908      	bls.n	90007f58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90007f46:	4b56      	ldr	r3, [pc, #344]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f48:	6a1b      	ldr	r3, [r3, #32]
90007f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007f4e:	687b      	ldr	r3, [r7, #4]
90007f50:	69db      	ldr	r3, [r3, #28]
90007f52:	4953      	ldr	r1, [pc, #332]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f54:	4313      	orrs	r3, r2
90007f56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007f58:	687b      	ldr	r3, [r7, #4]
90007f5a:	681b      	ldr	r3, [r3, #0]
90007f5c:	f003 0302 	and.w	r3, r3, #2
90007f60:	2b00      	cmp	r3, #0
90007f62:	d010      	beq.n	90007f86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007f64:	687b      	ldr	r3, [r7, #4]
90007f66:	68da      	ldr	r2, [r3, #12]
90007f68:	4b4d      	ldr	r3, [pc, #308]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f6a:	699b      	ldr	r3, [r3, #24]
90007f6c:	f003 030f 	and.w	r3, r3, #15
90007f70:	429a      	cmp	r2, r3
90007f72:	d908      	bls.n	90007f86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007f74:	4b4a      	ldr	r3, [pc, #296]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f76:	699b      	ldr	r3, [r3, #24]
90007f78:	f023 020f 	bic.w	r2, r3, #15
90007f7c:	687b      	ldr	r3, [r7, #4]
90007f7e:	68db      	ldr	r3, [r3, #12]
90007f80:	4947      	ldr	r1, [pc, #284]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f82:	4313      	orrs	r3, r2
90007f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90007f86:	687b      	ldr	r3, [r7, #4]
90007f88:	681b      	ldr	r3, [r3, #0]
90007f8a:	f003 0301 	and.w	r3, r3, #1
90007f8e:	2b00      	cmp	r3, #0
90007f90:	d055      	beq.n	9000803e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90007f92:	4b43      	ldr	r3, [pc, #268]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007f94:	699b      	ldr	r3, [r3, #24]
90007f96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90007f9a:	687b      	ldr	r3, [r7, #4]
90007f9c:	689b      	ldr	r3, [r3, #8]
90007f9e:	4940      	ldr	r1, [pc, #256]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007fa0:	4313      	orrs	r3, r2
90007fa2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007fa4:	687b      	ldr	r3, [r7, #4]
90007fa6:	685b      	ldr	r3, [r3, #4]
90007fa8:	2b02      	cmp	r3, #2
90007faa:	d107      	bne.n	90007fbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007fac:	4b3c      	ldr	r3, [pc, #240]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007fae:	681b      	ldr	r3, [r3, #0]
90007fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007fb4:	2b00      	cmp	r3, #0
90007fb6:	d121      	bne.n	90007ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007fb8:	2301      	movs	r3, #1
90007fba:	e0f6      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007fbc:	687b      	ldr	r3, [r7, #4]
90007fbe:	685b      	ldr	r3, [r3, #4]
90007fc0:	2b03      	cmp	r3, #3
90007fc2:	d107      	bne.n	90007fd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007fc4:	4b36      	ldr	r3, [pc, #216]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007fc6:	681b      	ldr	r3, [r3, #0]
90007fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007fcc:	2b00      	cmp	r3, #0
90007fce:	d115      	bne.n	90007ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007fd0:	2301      	movs	r3, #1
90007fd2:	e0ea      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007fd4:	687b      	ldr	r3, [r7, #4]
90007fd6:	685b      	ldr	r3, [r3, #4]
90007fd8:	2b01      	cmp	r3, #1
90007fda:	d107      	bne.n	90007fec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007fdc:	4b30      	ldr	r3, [pc, #192]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007fde:	681b      	ldr	r3, [r3, #0]
90007fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007fe4:	2b00      	cmp	r3, #0
90007fe6:	d109      	bne.n	90007ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007fe8:	2301      	movs	r3, #1
90007fea:	e0de      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007fec:	4b2c      	ldr	r3, [pc, #176]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007fee:	681b      	ldr	r3, [r3, #0]
90007ff0:	f003 0304 	and.w	r3, r3, #4
90007ff4:	2b00      	cmp	r3, #0
90007ff6:	d101      	bne.n	90007ffc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007ff8:	2301      	movs	r3, #1
90007ffa:	e0d6      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007ffc:	4b28      	ldr	r3, [pc, #160]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90007ffe:	691b      	ldr	r3, [r3, #16]
90008000:	f023 0207 	bic.w	r2, r3, #7
90008004:	687b      	ldr	r3, [r7, #4]
90008006:	685b      	ldr	r3, [r3, #4]
90008008:	4925      	ldr	r1, [pc, #148]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
9000800a:	4313      	orrs	r3, r2
9000800c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000800e:	f7fb fbb3 	bl	90003778 <HAL_GetTick>
90008012:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90008014:	e00a      	b.n	9000802c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90008016:	f7fb fbaf 	bl	90003778 <HAL_GetTick>
9000801a:	4602      	mov	r2, r0
9000801c:	697b      	ldr	r3, [r7, #20]
9000801e:	1ad3      	subs	r3, r2, r3
90008020:	f241 3288 	movw	r2, #5000	@ 0x1388
90008024:	4293      	cmp	r3, r2
90008026:	d901      	bls.n	9000802c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90008028:	2303      	movs	r3, #3
9000802a:	e0be      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000802c:	4b1c      	ldr	r3, [pc, #112]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
9000802e:	691b      	ldr	r3, [r3, #16]
90008030:	f003 0238 	and.w	r2, r3, #56	@ 0x38
90008034:	687b      	ldr	r3, [r7, #4]
90008036:	685b      	ldr	r3, [r3, #4]
90008038:	00db      	lsls	r3, r3, #3
9000803a:	429a      	cmp	r2, r3
9000803c:	d1eb      	bne.n	90008016 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000803e:	687b      	ldr	r3, [r7, #4]
90008040:	681b      	ldr	r3, [r3, #0]
90008042:	f003 0302 	and.w	r3, r3, #2
90008046:	2b00      	cmp	r3, #0
90008048:	d010      	beq.n	9000806c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000804a:	687b      	ldr	r3, [r7, #4]
9000804c:	68da      	ldr	r2, [r3, #12]
9000804e:	4b14      	ldr	r3, [pc, #80]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90008050:	699b      	ldr	r3, [r3, #24]
90008052:	f003 030f 	and.w	r3, r3, #15
90008056:	429a      	cmp	r2, r3
90008058:	d208      	bcs.n	9000806c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000805a:	4b11      	ldr	r3, [pc, #68]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
9000805c:	699b      	ldr	r3, [r3, #24]
9000805e:	f023 020f 	bic.w	r2, r3, #15
90008062:	687b      	ldr	r3, [r7, #4]
90008064:	68db      	ldr	r3, [r3, #12]
90008066:	490e      	ldr	r1, [pc, #56]	@ (900080a0 <HAL_RCC_ClockConfig+0x244>)
90008068:	4313      	orrs	r3, r2
9000806a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000806c:	4b0b      	ldr	r3, [pc, #44]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
9000806e:	681b      	ldr	r3, [r3, #0]
90008070:	f003 030f 	and.w	r3, r3, #15
90008074:	683a      	ldr	r2, [r7, #0]
90008076:	429a      	cmp	r2, r3
90008078:	d214      	bcs.n	900080a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000807a:	4b08      	ldr	r3, [pc, #32]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
9000807c:	681b      	ldr	r3, [r3, #0]
9000807e:	f023 020f 	bic.w	r2, r3, #15
90008082:	4906      	ldr	r1, [pc, #24]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
90008084:	683b      	ldr	r3, [r7, #0]
90008086:	4313      	orrs	r3, r2
90008088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000808a:	4b04      	ldr	r3, [pc, #16]	@ (9000809c <HAL_RCC_ClockConfig+0x240>)
9000808c:	681b      	ldr	r3, [r3, #0]
9000808e:	f003 030f 	and.w	r3, r3, #15
90008092:	683a      	ldr	r2, [r7, #0]
90008094:	429a      	cmp	r2, r3
90008096:	d005      	beq.n	900080a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90008098:	2301      	movs	r3, #1
9000809a:	e086      	b.n	900081aa <HAL_RCC_ClockConfig+0x34e>
9000809c:	52002000 	.word	0x52002000
900080a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
900080a4:	687b      	ldr	r3, [r7, #4]
900080a6:	681b      	ldr	r3, [r3, #0]
900080a8:	f003 0304 	and.w	r3, r3, #4
900080ac:	2b00      	cmp	r3, #0
900080ae:	d010      	beq.n	900080d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
900080b0:	687b      	ldr	r3, [r7, #4]
900080b2:	691a      	ldr	r2, [r3, #16]
900080b4:	4b3f      	ldr	r3, [pc, #252]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
900080b6:	699b      	ldr	r3, [r3, #24]
900080b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900080bc:	429a      	cmp	r2, r3
900080be:	d208      	bcs.n	900080d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900080c0:	4b3c      	ldr	r3, [pc, #240]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
900080c2:	699b      	ldr	r3, [r3, #24]
900080c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900080c8:	687b      	ldr	r3, [r7, #4]
900080ca:	691b      	ldr	r3, [r3, #16]
900080cc:	4939      	ldr	r1, [pc, #228]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
900080ce:	4313      	orrs	r3, r2
900080d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900080d2:	687b      	ldr	r3, [r7, #4]
900080d4:	681b      	ldr	r3, [r3, #0]
900080d6:	f003 0308 	and.w	r3, r3, #8
900080da:	2b00      	cmp	r3, #0
900080dc:	d010      	beq.n	90008100 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900080de:	687b      	ldr	r3, [r7, #4]
900080e0:	695a      	ldr	r2, [r3, #20]
900080e2:	4b34      	ldr	r3, [pc, #208]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
900080e4:	69db      	ldr	r3, [r3, #28]
900080e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900080ea:	429a      	cmp	r2, r3
900080ec:	d208      	bcs.n	90008100 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900080ee:	4b31      	ldr	r3, [pc, #196]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
900080f0:	69db      	ldr	r3, [r3, #28]
900080f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900080f6:	687b      	ldr	r3, [r7, #4]
900080f8:	695b      	ldr	r3, [r3, #20]
900080fa:	492e      	ldr	r1, [pc, #184]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
900080fc:	4313      	orrs	r3, r2
900080fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90008100:	687b      	ldr	r3, [r7, #4]
90008102:	681b      	ldr	r3, [r3, #0]
90008104:	f003 0310 	and.w	r3, r3, #16
90008108:	2b00      	cmp	r3, #0
9000810a:	d010      	beq.n	9000812e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000810c:	687b      	ldr	r3, [r7, #4]
9000810e:	699a      	ldr	r2, [r3, #24]
90008110:	4b28      	ldr	r3, [pc, #160]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
90008112:	69db      	ldr	r3, [r3, #28]
90008114:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90008118:	429a      	cmp	r2, r3
9000811a:	d208      	bcs.n	9000812e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000811c:	4b25      	ldr	r3, [pc, #148]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
9000811e:	69db      	ldr	r3, [r3, #28]
90008120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90008124:	687b      	ldr	r3, [r7, #4]
90008126:	699b      	ldr	r3, [r3, #24]
90008128:	4922      	ldr	r1, [pc, #136]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
9000812a:	4313      	orrs	r3, r2
9000812c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000812e:	687b      	ldr	r3, [r7, #4]
90008130:	681b      	ldr	r3, [r3, #0]
90008132:	f003 0320 	and.w	r3, r3, #32
90008136:	2b00      	cmp	r3, #0
90008138:	d010      	beq.n	9000815c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000813a:	687b      	ldr	r3, [r7, #4]
9000813c:	69da      	ldr	r2, [r3, #28]
9000813e:	4b1d      	ldr	r3, [pc, #116]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
90008140:	6a1b      	ldr	r3, [r3, #32]
90008142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90008146:	429a      	cmp	r2, r3
90008148:	d208      	bcs.n	9000815c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000814a:	4b1a      	ldr	r3, [pc, #104]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
9000814c:	6a1b      	ldr	r3, [r3, #32]
9000814e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90008152:	687b      	ldr	r3, [r7, #4]
90008154:	69db      	ldr	r3, [r3, #28]
90008156:	4917      	ldr	r1, [pc, #92]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
90008158:	4313      	orrs	r3, r2
9000815a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000815c:	f000 f834 	bl	900081c8 <HAL_RCC_GetSysClockFreq>
90008160:	4602      	mov	r2, r0
90008162:	4b14      	ldr	r3, [pc, #80]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
90008164:	699b      	ldr	r3, [r3, #24]
90008166:	0a1b      	lsrs	r3, r3, #8
90008168:	f003 030f 	and.w	r3, r3, #15
9000816c:	4912      	ldr	r1, [pc, #72]	@ (900081b8 <HAL_RCC_ClockConfig+0x35c>)
9000816e:	5ccb      	ldrb	r3, [r1, r3]
90008170:	f003 031f 	and.w	r3, r3, #31
90008174:	fa22 f303 	lsr.w	r3, r2, r3
90008178:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000817a:	4b0e      	ldr	r3, [pc, #56]	@ (900081b4 <HAL_RCC_ClockConfig+0x358>)
9000817c:	699b      	ldr	r3, [r3, #24]
9000817e:	f003 030f 	and.w	r3, r3, #15
90008182:	4a0d      	ldr	r2, [pc, #52]	@ (900081b8 <HAL_RCC_ClockConfig+0x35c>)
90008184:	5cd3      	ldrb	r3, [r2, r3]
90008186:	f003 031f 	and.w	r3, r3, #31
9000818a:	693a      	ldr	r2, [r7, #16]
9000818c:	fa22 f303 	lsr.w	r3, r2, r3
90008190:	4a0a      	ldr	r2, [pc, #40]	@ (900081bc <HAL_RCC_ClockConfig+0x360>)
90008192:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90008194:	4a0a      	ldr	r2, [pc, #40]	@ (900081c0 <HAL_RCC_ClockConfig+0x364>)
90008196:	693b      	ldr	r3, [r7, #16]
90008198:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
9000819a:	4b0a      	ldr	r3, [pc, #40]	@ (900081c4 <HAL_RCC_ClockConfig+0x368>)
9000819c:	681b      	ldr	r3, [r3, #0]
9000819e:	4618      	mov	r0, r3
900081a0:	f7fb faa0 	bl	900036e4 <HAL_InitTick>
900081a4:	4603      	mov	r3, r0
900081a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
900081a8:	7bfb      	ldrb	r3, [r7, #15]
}
900081aa:	4618      	mov	r0, r3
900081ac:	3718      	adds	r7, #24
900081ae:	46bd      	mov	sp, r7
900081b0:	bd80      	pop	{r7, pc}
900081b2:	bf00      	nop
900081b4:	58024400 	.word	0x58024400
900081b8:	9000d344 	.word	0x9000d344
900081bc:	2000003c 	.word	0x2000003c
900081c0:	20000038 	.word	0x20000038
900081c4:	20000040 	.word	0x20000040

900081c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
900081c8:	b480      	push	{r7}
900081ca:	b089      	sub	sp, #36	@ 0x24
900081cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
900081ce:	4bb3      	ldr	r3, [pc, #716]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
900081d0:	691b      	ldr	r3, [r3, #16]
900081d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900081d6:	2b18      	cmp	r3, #24
900081d8:	f200 8155 	bhi.w	90008486 <HAL_RCC_GetSysClockFreq+0x2be>
900081dc:	a201      	add	r2, pc, #4	@ (adr r2, 900081e4 <HAL_RCC_GetSysClockFreq+0x1c>)
900081de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900081e2:	bf00      	nop
900081e4:	90008249 	.word	0x90008249
900081e8:	90008487 	.word	0x90008487
900081ec:	90008487 	.word	0x90008487
900081f0:	90008487 	.word	0x90008487
900081f4:	90008487 	.word	0x90008487
900081f8:	90008487 	.word	0x90008487
900081fc:	90008487 	.word	0x90008487
90008200:	90008487 	.word	0x90008487
90008204:	9000826f 	.word	0x9000826f
90008208:	90008487 	.word	0x90008487
9000820c:	90008487 	.word	0x90008487
90008210:	90008487 	.word	0x90008487
90008214:	90008487 	.word	0x90008487
90008218:	90008487 	.word	0x90008487
9000821c:	90008487 	.word	0x90008487
90008220:	90008487 	.word	0x90008487
90008224:	90008275 	.word	0x90008275
90008228:	90008487 	.word	0x90008487
9000822c:	90008487 	.word	0x90008487
90008230:	90008487 	.word	0x90008487
90008234:	90008487 	.word	0x90008487
90008238:	90008487 	.word	0x90008487
9000823c:	90008487 	.word	0x90008487
90008240:	90008487 	.word	0x90008487
90008244:	9000827b 	.word	0x9000827b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008248:	4b94      	ldr	r3, [pc, #592]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000824a:	681b      	ldr	r3, [r3, #0]
9000824c:	f003 0320 	and.w	r3, r3, #32
90008250:	2b00      	cmp	r3, #0
90008252:	d009      	beq.n	90008268 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90008254:	4b91      	ldr	r3, [pc, #580]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008256:	681b      	ldr	r3, [r3, #0]
90008258:	08db      	lsrs	r3, r3, #3
9000825a:	f003 0303 	and.w	r3, r3, #3
9000825e:	4a90      	ldr	r2, [pc, #576]	@ (900084a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
90008260:	fa22 f303 	lsr.w	r3, r2, r3
90008264:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90008266:	e111      	b.n	9000848c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90008268:	4b8d      	ldr	r3, [pc, #564]	@ (900084a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
9000826a:	61bb      	str	r3, [r7, #24]
      break;
9000826c:	e10e      	b.n	9000848c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
9000826e:	4b8d      	ldr	r3, [pc, #564]	@ (900084a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
90008270:	61bb      	str	r3, [r7, #24]
      break;
90008272:	e10b      	b.n	9000848c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90008274:	4b8c      	ldr	r3, [pc, #560]	@ (900084a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
90008276:	61bb      	str	r3, [r7, #24]
      break;
90008278:	e108      	b.n	9000848c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000827a:	4b88      	ldr	r3, [pc, #544]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000827c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000827e:	f003 0303 	and.w	r3, r3, #3
90008282:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90008284:	4b85      	ldr	r3, [pc, #532]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008288:	091b      	lsrs	r3, r3, #4
9000828a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000828e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90008290:	4b82      	ldr	r3, [pc, #520]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008294:	f003 0301 	and.w	r3, r3, #1
90008298:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000829a:	4b80      	ldr	r3, [pc, #512]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000829c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000829e:	08db      	lsrs	r3, r3, #3
900082a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
900082a4:	68fa      	ldr	r2, [r7, #12]
900082a6:	fb02 f303 	mul.w	r3, r2, r3
900082aa:	ee07 3a90 	vmov	s15, r3
900082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
900082b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
900082b6:	693b      	ldr	r3, [r7, #16]
900082b8:	2b00      	cmp	r3, #0
900082ba:	f000 80e1 	beq.w	90008480 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
900082be:	697b      	ldr	r3, [r7, #20]
900082c0:	2b02      	cmp	r3, #2
900082c2:	f000 8083 	beq.w	900083cc <HAL_RCC_GetSysClockFreq+0x204>
900082c6:	697b      	ldr	r3, [r7, #20]
900082c8:	2b02      	cmp	r3, #2
900082ca:	f200 80a1 	bhi.w	90008410 <HAL_RCC_GetSysClockFreq+0x248>
900082ce:	697b      	ldr	r3, [r7, #20]
900082d0:	2b00      	cmp	r3, #0
900082d2:	d003      	beq.n	900082dc <HAL_RCC_GetSysClockFreq+0x114>
900082d4:	697b      	ldr	r3, [r7, #20]
900082d6:	2b01      	cmp	r3, #1
900082d8:	d056      	beq.n	90008388 <HAL_RCC_GetSysClockFreq+0x1c0>
900082da:	e099      	b.n	90008410 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900082dc:	4b6f      	ldr	r3, [pc, #444]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
900082de:	681b      	ldr	r3, [r3, #0]
900082e0:	f003 0320 	and.w	r3, r3, #32
900082e4:	2b00      	cmp	r3, #0
900082e6:	d02d      	beq.n	90008344 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900082e8:	4b6c      	ldr	r3, [pc, #432]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
900082ea:	681b      	ldr	r3, [r3, #0]
900082ec:	08db      	lsrs	r3, r3, #3
900082ee:	f003 0303 	and.w	r3, r3, #3
900082f2:	4a6b      	ldr	r2, [pc, #428]	@ (900084a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
900082f4:	fa22 f303 	lsr.w	r3, r2, r3
900082f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900082fa:	687b      	ldr	r3, [r7, #4]
900082fc:	ee07 3a90 	vmov	s15, r3
90008300:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008304:	693b      	ldr	r3, [r7, #16]
90008306:	ee07 3a90 	vmov	s15, r3
9000830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008312:	4b62      	ldr	r3, [pc, #392]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000831a:	ee07 3a90 	vmov	s15, r3
9000831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008322:	ed97 6a02 	vldr	s12, [r7, #8]
90008326:	eddf 5a61 	vldr	s11, [pc, #388]	@ 900084ac <HAL_RCC_GetSysClockFreq+0x2e4>
9000832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000833a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000833e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90008342:	e087      	b.n	90008454 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90008344:	693b      	ldr	r3, [r7, #16]
90008346:	ee07 3a90 	vmov	s15, r3
9000834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000834e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 900084b0 <HAL_RCC_GetSysClockFreq+0x2e8>
90008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008356:	4b51      	ldr	r3, [pc, #324]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000835e:	ee07 3a90 	vmov	s15, r3
90008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008366:	ed97 6a02 	vldr	s12, [r7, #8]
9000836a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 900084ac <HAL_RCC_GetSysClockFreq+0x2e4>
9000836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000837e:	ee67 7a27 	vmul.f32	s15, s14, s15
90008382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90008386:	e065      	b.n	90008454 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90008388:	693b      	ldr	r3, [r7, #16]
9000838a:	ee07 3a90 	vmov	s15, r3
9000838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008392:	eddf 6a48 	vldr	s13, [pc, #288]	@ 900084b4 <HAL_RCC_GetSysClockFreq+0x2ec>
90008396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000839a:	4b40      	ldr	r3, [pc, #256]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000839e:	f3c3 0308 	ubfx	r3, r3, #0, #9
900083a2:	ee07 3a90 	vmov	s15, r3
900083a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900083aa:	ed97 6a02 	vldr	s12, [r7, #8]
900083ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 900084ac <HAL_RCC_GetSysClockFreq+0x2e4>
900083b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900083b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900083ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900083be:	ee77 7aa6 	vadd.f32	s15, s15, s13
900083c2:	ee67 7a27 	vmul.f32	s15, s14, s15
900083c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900083ca:	e043      	b.n	90008454 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900083cc:	693b      	ldr	r3, [r7, #16]
900083ce:	ee07 3a90 	vmov	s15, r3
900083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900083d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 900084b8 <HAL_RCC_GetSysClockFreq+0x2f0>
900083da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900083de:	4b2f      	ldr	r3, [pc, #188]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
900083e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900083e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900083e6:	ee07 3a90 	vmov	s15, r3
900083ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
900083ee:	ed97 6a02 	vldr	s12, [r7, #8]
900083f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 900084ac <HAL_RCC_GetSysClockFreq+0x2e4>
900083f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900083fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
900083fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008402:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008406:	ee67 7a27 	vmul.f32	s15, s14, s15
9000840a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000840e:	e021      	b.n	90008454 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90008410:	693b      	ldr	r3, [r7, #16]
90008412:	ee07 3a90 	vmov	s15, r3
90008416:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000841a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 900084b4 <HAL_RCC_GetSysClockFreq+0x2ec>
9000841e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008422:	4b1e      	ldr	r3, [pc, #120]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90008426:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000842a:	ee07 3a90 	vmov	s15, r3
9000842e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008432:	ed97 6a02 	vldr	s12, [r7, #8]
90008436:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 900084ac <HAL_RCC_GetSysClockFreq+0x2e4>
9000843a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000843e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008446:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000844a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000844e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90008452:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90008454:	4b11      	ldr	r3, [pc, #68]	@ (9000849c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90008458:	0a5b      	lsrs	r3, r3, #9
9000845a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000845e:	3301      	adds	r3, #1
90008460:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90008462:	683b      	ldr	r3, [r7, #0]
90008464:	ee07 3a90 	vmov	s15, r3
90008468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
9000846c:	edd7 6a07 	vldr	s13, [r7, #28]
90008470:	eec6 7a87 	vdiv.f32	s15, s13, s14
90008474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90008478:	ee17 3a90 	vmov	r3, s15
9000847c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
9000847e:	e005      	b.n	9000848c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90008480:	2300      	movs	r3, #0
90008482:	61bb      	str	r3, [r7, #24]
      break;
90008484:	e002      	b.n	9000848c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90008486:	4b07      	ldr	r3, [pc, #28]	@ (900084a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
90008488:	61bb      	str	r3, [r7, #24]
      break;
9000848a:	bf00      	nop
  }

  return sysclockfreq;
9000848c:	69bb      	ldr	r3, [r7, #24]
}
9000848e:	4618      	mov	r0, r3
90008490:	3724      	adds	r7, #36	@ 0x24
90008492:	46bd      	mov	sp, r7
90008494:	f85d 7b04 	ldr.w	r7, [sp], #4
90008498:	4770      	bx	lr
9000849a:	bf00      	nop
9000849c:	58024400 	.word	0x58024400
900084a0:	03d09000 	.word	0x03d09000
900084a4:	003d0900 	.word	0x003d0900
900084a8:	017d7840 	.word	0x017d7840
900084ac:	46000000 	.word	0x46000000
900084b0:	4c742400 	.word	0x4c742400
900084b4:	4a742400 	.word	0x4a742400
900084b8:	4bbebc20 	.word	0x4bbebc20

900084bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
900084bc:	b580      	push	{r7, lr}
900084be:	b082      	sub	sp, #8
900084c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
900084c2:	f7ff fe81 	bl	900081c8 <HAL_RCC_GetSysClockFreq>
900084c6:	4602      	mov	r2, r0
900084c8:	4b10      	ldr	r3, [pc, #64]	@ (9000850c <HAL_RCC_GetHCLKFreq+0x50>)
900084ca:	699b      	ldr	r3, [r3, #24]
900084cc:	0a1b      	lsrs	r3, r3, #8
900084ce:	f003 030f 	and.w	r3, r3, #15
900084d2:	490f      	ldr	r1, [pc, #60]	@ (90008510 <HAL_RCC_GetHCLKFreq+0x54>)
900084d4:	5ccb      	ldrb	r3, [r1, r3]
900084d6:	f003 031f 	and.w	r3, r3, #31
900084da:	fa22 f303 	lsr.w	r3, r2, r3
900084de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900084e0:	4b0a      	ldr	r3, [pc, #40]	@ (9000850c <HAL_RCC_GetHCLKFreq+0x50>)
900084e2:	699b      	ldr	r3, [r3, #24]
900084e4:	f003 030f 	and.w	r3, r3, #15
900084e8:	4a09      	ldr	r2, [pc, #36]	@ (90008510 <HAL_RCC_GetHCLKFreq+0x54>)
900084ea:	5cd3      	ldrb	r3, [r2, r3]
900084ec:	f003 031f 	and.w	r3, r3, #31
900084f0:	687a      	ldr	r2, [r7, #4]
900084f2:	fa22 f303 	lsr.w	r3, r2, r3
900084f6:	4a07      	ldr	r2, [pc, #28]	@ (90008514 <HAL_RCC_GetHCLKFreq+0x58>)
900084f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900084fa:	4a07      	ldr	r2, [pc, #28]	@ (90008518 <HAL_RCC_GetHCLKFreq+0x5c>)
900084fc:	687b      	ldr	r3, [r7, #4]
900084fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90008500:	4b04      	ldr	r3, [pc, #16]	@ (90008514 <HAL_RCC_GetHCLKFreq+0x58>)
90008502:	681b      	ldr	r3, [r3, #0]
}
90008504:	4618      	mov	r0, r3
90008506:	3708      	adds	r7, #8
90008508:	46bd      	mov	sp, r7
9000850a:	bd80      	pop	{r7, pc}
9000850c:	58024400 	.word	0x58024400
90008510:	9000d344 	.word	0x9000d344
90008514:	2000003c 	.word	0x2000003c
90008518:	20000038 	.word	0x20000038

9000851c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000851c:	b580      	push	{r7, lr}
9000851e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90008520:	f7ff ffcc 	bl	900084bc <HAL_RCC_GetHCLKFreq>
90008524:	4602      	mov	r2, r0
90008526:	4b06      	ldr	r3, [pc, #24]	@ (90008540 <HAL_RCC_GetPCLK1Freq+0x24>)
90008528:	69db      	ldr	r3, [r3, #28]
9000852a:	091b      	lsrs	r3, r3, #4
9000852c:	f003 0307 	and.w	r3, r3, #7
90008530:	4904      	ldr	r1, [pc, #16]	@ (90008544 <HAL_RCC_GetPCLK1Freq+0x28>)
90008532:	5ccb      	ldrb	r3, [r1, r3]
90008534:	f003 031f 	and.w	r3, r3, #31
90008538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000853c:	4618      	mov	r0, r3
9000853e:	bd80      	pop	{r7, pc}
90008540:	58024400 	.word	0x58024400
90008544:	9000d344 	.word	0x9000d344

90008548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90008548:	b580      	push	{r7, lr}
9000854a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000854c:	f7ff ffb6 	bl	900084bc <HAL_RCC_GetHCLKFreq>
90008550:	4602      	mov	r2, r0
90008552:	4b06      	ldr	r3, [pc, #24]	@ (9000856c <HAL_RCC_GetPCLK2Freq+0x24>)
90008554:	69db      	ldr	r3, [r3, #28]
90008556:	0a1b      	lsrs	r3, r3, #8
90008558:	f003 0307 	and.w	r3, r3, #7
9000855c:	4904      	ldr	r1, [pc, #16]	@ (90008570 <HAL_RCC_GetPCLK2Freq+0x28>)
9000855e:	5ccb      	ldrb	r3, [r1, r3]
90008560:	f003 031f 	and.w	r3, r3, #31
90008564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90008568:	4618      	mov	r0, r3
9000856a:	bd80      	pop	{r7, pc}
9000856c:	58024400 	.word	0x58024400
90008570:	9000d344 	.word	0x9000d344

90008574 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90008574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90008578:	b0ca      	sub	sp, #296	@ 0x128
9000857a:	af00      	add	r7, sp, #0
9000857c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90008580:	2300      	movs	r3, #0
90008582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90008586:	2300      	movs	r3, #0
90008588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008590:	e9d3 2300 	ldrd	r2, r3, [r3]
90008594:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90008598:	2500      	movs	r5, #0
9000859a:	ea54 0305 	orrs.w	r3, r4, r5
9000859e:	d049      	beq.n	90008634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
900085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
900085a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900085aa:	d02f      	beq.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0x98>
900085ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900085b0:	d828      	bhi.n	90008604 <HAL_RCCEx_PeriphCLKConfig+0x90>
900085b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900085b6:	d01a      	beq.n	900085ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
900085b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900085bc:	d822      	bhi.n	90008604 <HAL_RCCEx_PeriphCLKConfig+0x90>
900085be:	2b00      	cmp	r3, #0
900085c0:	d003      	beq.n	900085ca <HAL_RCCEx_PeriphCLKConfig+0x56>
900085c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
900085c6:	d007      	beq.n	900085d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
900085c8:	e01c      	b.n	90008604 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900085ca:	4bb8      	ldr	r3, [pc, #736]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900085cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900085ce:	4ab7      	ldr	r2, [pc, #732]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900085d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900085d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900085d6:	e01a      	b.n	9000860e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900085d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085dc:	3308      	adds	r3, #8
900085de:	2102      	movs	r1, #2
900085e0:	4618      	mov	r0, r3
900085e2:	f001 fc8f 	bl	90009f04 <RCCEx_PLL2_Config>
900085e6:	4603      	mov	r3, r0
900085e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900085ec:	e00f      	b.n	9000860e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900085ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085f2:	3328      	adds	r3, #40	@ 0x28
900085f4:	2102      	movs	r1, #2
900085f6:	4618      	mov	r0, r3
900085f8:	f001 fd36 	bl	9000a068 <RCCEx_PLL3_Config>
900085fc:	4603      	mov	r3, r0
900085fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90008602:	e004      	b.n	9000860e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008604:	2301      	movs	r3, #1
90008606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000860a:	e000      	b.n	9000860e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
9000860c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000860e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008612:	2b00      	cmp	r3, #0
90008614:	d10a      	bne.n	9000862c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90008616:	4ba5      	ldr	r3, [pc, #660]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000861a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90008624:	4aa1      	ldr	r2, [pc, #644]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008626:	430b      	orrs	r3, r1
90008628:	6513      	str	r3, [r2, #80]	@ 0x50
9000862a:	e003      	b.n	90008634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000862c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008638:	e9d3 2300 	ldrd	r2, r3, [r3]
9000863c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90008640:	f04f 0900 	mov.w	r9, #0
90008644:	ea58 0309 	orrs.w	r3, r8, r9
90008648:	d047      	beq.n	900086da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
9000864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000864e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008650:	2b04      	cmp	r3, #4
90008652:	d82a      	bhi.n	900086aa <HAL_RCCEx_PeriphCLKConfig+0x136>
90008654:	a201      	add	r2, pc, #4	@ (adr r2, 9000865c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000865a:	bf00      	nop
9000865c:	90008671 	.word	0x90008671
90008660:	9000867f 	.word	0x9000867f
90008664:	90008695 	.word	0x90008695
90008668:	900086b3 	.word	0x900086b3
9000866c:	900086b3 	.word	0x900086b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008670:	4b8e      	ldr	r3, [pc, #568]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008674:	4a8d      	ldr	r2, [pc, #564]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000867a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000867c:	e01a      	b.n	900086b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008682:	3308      	adds	r3, #8
90008684:	2100      	movs	r1, #0
90008686:	4618      	mov	r0, r3
90008688:	f001 fc3c 	bl	90009f04 <RCCEx_PLL2_Config>
9000868c:	4603      	mov	r3, r0
9000868e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008692:	e00f      	b.n	900086b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008698:	3328      	adds	r3, #40	@ 0x28
9000869a:	2100      	movs	r1, #0
9000869c:	4618      	mov	r0, r3
9000869e:	f001 fce3 	bl	9000a068 <RCCEx_PLL3_Config>
900086a2:	4603      	mov	r3, r0
900086a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900086a8:	e004      	b.n	900086b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086aa:	2301      	movs	r3, #1
900086ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086b0:	e000      	b.n	900086b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
900086b2:	bf00      	nop
    }

    if (ret == HAL_OK)
900086b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086b8:	2b00      	cmp	r3, #0
900086ba:	d10a      	bne.n	900086d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900086bc:	4b7b      	ldr	r3, [pc, #492]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900086be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900086c0:	f023 0107 	bic.w	r1, r3, #7
900086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900086ca:	4a78      	ldr	r2, [pc, #480]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900086cc:	430b      	orrs	r3, r1
900086ce:	6513      	str	r3, [r2, #80]	@ 0x50
900086d0:	e003      	b.n	900086da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
900086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086de:	e9d3 2300 	ldrd	r2, r3, [r3]
900086e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
900086e6:	f04f 0b00 	mov.w	fp, #0
900086ea:	ea5a 030b 	orrs.w	r3, sl, fp
900086ee:	d04c      	beq.n	9000878a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
900086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
900086f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900086fa:	d030      	beq.n	9000875e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
900086fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008700:	d829      	bhi.n	90008756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90008702:	2bc0      	cmp	r3, #192	@ 0xc0
90008704:	d02d      	beq.n	90008762 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90008706:	2bc0      	cmp	r3, #192	@ 0xc0
90008708:	d825      	bhi.n	90008756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
9000870a:	2b80      	cmp	r3, #128	@ 0x80
9000870c:	d018      	beq.n	90008740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
9000870e:	2b80      	cmp	r3, #128	@ 0x80
90008710:	d821      	bhi.n	90008756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90008712:	2b00      	cmp	r3, #0
90008714:	d002      	beq.n	9000871c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90008716:	2b40      	cmp	r3, #64	@ 0x40
90008718:	d007      	beq.n	9000872a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
9000871a:	e01c      	b.n	90008756 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000871c:	4b63      	ldr	r3, [pc, #396]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000871e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008720:	4a62      	ldr	r2, [pc, #392]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90008728:	e01c      	b.n	90008764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000872e:	3308      	adds	r3, #8
90008730:	2100      	movs	r1, #0
90008732:	4618      	mov	r0, r3
90008734:	f001 fbe6 	bl	90009f04 <RCCEx_PLL2_Config>
90008738:	4603      	mov	r3, r0
9000873a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
9000873e:	e011      	b.n	90008764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008744:	3328      	adds	r3, #40	@ 0x28
90008746:	2100      	movs	r1, #0
90008748:	4618      	mov	r0, r3
9000874a:	f001 fc8d 	bl	9000a068 <RCCEx_PLL3_Config>
9000874e:	4603      	mov	r3, r0
90008750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90008754:	e006      	b.n	90008764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008756:	2301      	movs	r3, #1
90008758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000875c:	e002      	b.n	90008764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
9000875e:	bf00      	nop
90008760:	e000      	b.n	90008764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90008762:	bf00      	nop
    }

    if (ret == HAL_OK)
90008764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008768:	2b00      	cmp	r3, #0
9000876a:	d10a      	bne.n	90008782 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000876c:	4b4f      	ldr	r3, [pc, #316]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000876e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008770:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
9000877a:	4a4c      	ldr	r2, [pc, #304]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000877c:	430b      	orrs	r3, r1
9000877e:	6513      	str	r3, [r2, #80]	@ 0x50
90008780:	e003      	b.n	9000878a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000878e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008792:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90008796:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
9000879a:	2300      	movs	r3, #0
9000879c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
900087a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
900087a4:	460b      	mov	r3, r1
900087a6:	4313      	orrs	r3, r2
900087a8:	d053      	beq.n	90008852 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
900087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
900087b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
900087b6:	d035      	beq.n	90008824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
900087b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
900087bc:	d82e      	bhi.n	9000881c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
900087be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
900087c2:	d031      	beq.n	90008828 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
900087c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
900087c8:	d828      	bhi.n	9000881c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
900087ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
900087ce:	d01a      	beq.n	90008806 <HAL_RCCEx_PeriphCLKConfig+0x292>
900087d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
900087d4:	d822      	bhi.n	9000881c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
900087d6:	2b00      	cmp	r3, #0
900087d8:	d003      	beq.n	900087e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
900087da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900087de:	d007      	beq.n	900087f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
900087e0:	e01c      	b.n	9000881c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900087e2:	4b32      	ldr	r3, [pc, #200]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900087e6:	4a31      	ldr	r2, [pc, #196]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900087e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900087ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900087ee:	e01c      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900087f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087f4:	3308      	adds	r3, #8
900087f6:	2100      	movs	r1, #0
900087f8:	4618      	mov	r0, r3
900087fa:	f001 fb83 	bl	90009f04 <RCCEx_PLL2_Config>
900087fe:	4603      	mov	r3, r0
90008800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90008804:	e011      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000880a:	3328      	adds	r3, #40	@ 0x28
9000880c:	2100      	movs	r1, #0
9000880e:	4618      	mov	r0, r3
90008810:	f001 fc2a 	bl	9000a068 <RCCEx_PLL3_Config>
90008814:	4603      	mov	r3, r0
90008816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000881a:	e006      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
9000881c:	2301      	movs	r3, #1
9000881e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008822:	e002      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90008824:	bf00      	nop
90008826:	e000      	b.n	9000882a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90008828:	bf00      	nop
    }

    if (ret == HAL_OK)
9000882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000882e:	2b00      	cmp	r3, #0
90008830:	d10b      	bne.n	9000884a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90008832:	4b1e      	ldr	r3, [pc, #120]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008836:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
9000883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000883e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90008842:	4a1a      	ldr	r2, [pc, #104]	@ (900088ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008844:	430b      	orrs	r3, r1
90008846:	6593      	str	r3, [r2, #88]	@ 0x58
90008848:	e003      	b.n	90008852 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000884a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000884e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008856:	e9d3 2300 	ldrd	r2, r3, [r3]
9000885a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
9000885e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90008862:	2300      	movs	r3, #0
90008864:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90008868:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
9000886c:	460b      	mov	r3, r1
9000886e:	4313      	orrs	r3, r2
90008870:	d056      	beq.n	90008920 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008876:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
9000887a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
9000887e:	d038      	beq.n	900088f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90008880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90008884:	d831      	bhi.n	900088ea <HAL_RCCEx_PeriphCLKConfig+0x376>
90008886:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
9000888a:	d034      	beq.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
9000888c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90008890:	d82b      	bhi.n	900088ea <HAL_RCCEx_PeriphCLKConfig+0x376>
90008892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90008896:	d01d      	beq.n	900088d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
90008898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000889c:	d825      	bhi.n	900088ea <HAL_RCCEx_PeriphCLKConfig+0x376>
9000889e:	2b00      	cmp	r3, #0
900088a0:	d006      	beq.n	900088b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
900088a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900088a6:	d00a      	beq.n	900088be <HAL_RCCEx_PeriphCLKConfig+0x34a>
900088a8:	e01f      	b.n	900088ea <HAL_RCCEx_PeriphCLKConfig+0x376>
900088aa:	bf00      	nop
900088ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900088b0:	4ba2      	ldr	r3, [pc, #648]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900088b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900088b4:	4aa1      	ldr	r2, [pc, #644]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900088b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900088ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900088bc:	e01c      	b.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900088be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088c2:	3308      	adds	r3, #8
900088c4:	2100      	movs	r1, #0
900088c6:	4618      	mov	r0, r3
900088c8:	f001 fb1c 	bl	90009f04 <RCCEx_PLL2_Config>
900088cc:	4603      	mov	r3, r0
900088ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
900088d2:	e011      	b.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900088d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088d8:	3328      	adds	r3, #40	@ 0x28
900088da:	2100      	movs	r1, #0
900088dc:	4618      	mov	r0, r3
900088de:	f001 fbc3 	bl	9000a068 <RCCEx_PLL3_Config>
900088e2:	4603      	mov	r3, r0
900088e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900088e8:	e006      	b.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
900088ea:	2301      	movs	r3, #1
900088ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900088f0:	e002      	b.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
900088f2:	bf00      	nop
900088f4:	e000      	b.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
900088f6:	bf00      	nop
    }

    if (ret == HAL_OK)
900088f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900088fc:	2b00      	cmp	r3, #0
900088fe:	d10b      	bne.n	90008918 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90008900:	4b8e      	ldr	r3, [pc, #568]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008904:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000890c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90008910:	4a8a      	ldr	r2, [pc, #552]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008912:	430b      	orrs	r3, r1
90008914:	6593      	str	r3, [r2, #88]	@ 0x58
90008916:	e003      	b.n	90008920 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000891c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90008920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008924:	e9d3 2300 	ldrd	r2, r3, [r3]
90008928:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
9000892c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90008930:	2300      	movs	r3, #0
90008932:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90008936:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
9000893a:	460b      	mov	r3, r1
9000893c:	4313      	orrs	r3, r2
9000893e:	d03a      	beq.n	900089b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90008940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008946:	2b30      	cmp	r3, #48	@ 0x30
90008948:	d01f      	beq.n	9000898a <HAL_RCCEx_PeriphCLKConfig+0x416>
9000894a:	2b30      	cmp	r3, #48	@ 0x30
9000894c:	d819      	bhi.n	90008982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
9000894e:	2b20      	cmp	r3, #32
90008950:	d00c      	beq.n	9000896c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90008952:	2b20      	cmp	r3, #32
90008954:	d815      	bhi.n	90008982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90008956:	2b00      	cmp	r3, #0
90008958:	d019      	beq.n	9000898e <HAL_RCCEx_PeriphCLKConfig+0x41a>
9000895a:	2b10      	cmp	r3, #16
9000895c:	d111      	bne.n	90008982 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000895e:	4b77      	ldr	r3, [pc, #476]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008962:	4a76      	ldr	r2, [pc, #472]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
9000896a:	e011      	b.n	90008990 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000896c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008970:	3308      	adds	r3, #8
90008972:	2102      	movs	r1, #2
90008974:	4618      	mov	r0, r3
90008976:	f001 fac5 	bl	90009f04 <RCCEx_PLL2_Config>
9000897a:	4603      	mov	r3, r0
9000897c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90008980:	e006      	b.n	90008990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008982:	2301      	movs	r3, #1
90008984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008988:	e002      	b.n	90008990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000898a:	bf00      	nop
9000898c:	e000      	b.n	90008990 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000898e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008994:	2b00      	cmp	r3, #0
90008996:	d10a      	bne.n	900089ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90008998:	4b68      	ldr	r3, [pc, #416]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000899a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000899c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
900089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900089a6:	4a65      	ldr	r2, [pc, #404]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900089a8:	430b      	orrs	r3, r1
900089aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
900089ac:	e003      	b.n	900089b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
900089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
900089be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
900089c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
900089c6:	2300      	movs	r3, #0
900089c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
900089cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
900089d0:	460b      	mov	r3, r1
900089d2:	4313      	orrs	r3, r2
900089d4:	d051      	beq.n	90008a7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
900089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
900089dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900089e0:	d035      	beq.n	90008a4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
900089e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900089e6:	d82e      	bhi.n	90008a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900089e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
900089ec:	d031      	beq.n	90008a52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
900089ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
900089f2:	d828      	bhi.n	90008a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900089f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900089f8:	d01a      	beq.n	90008a30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
900089fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900089fe:	d822      	bhi.n	90008a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008a00:	2b00      	cmp	r3, #0
90008a02:	d003      	beq.n	90008a0c <HAL_RCCEx_PeriphCLKConfig+0x498>
90008a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008a08:	d007      	beq.n	90008a1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90008a0a:	e01c      	b.n	90008a46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008a0c:	4b4b      	ldr	r3, [pc, #300]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008a10:	4a4a      	ldr	r2, [pc, #296]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008a18:	e01c      	b.n	90008a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a1e:	3308      	adds	r3, #8
90008a20:	2100      	movs	r1, #0
90008a22:	4618      	mov	r0, r3
90008a24:	f001 fa6e 	bl	90009f04 <RCCEx_PLL2_Config>
90008a28:	4603      	mov	r3, r0
90008a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008a2e:	e011      	b.n	90008a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a34:	3328      	adds	r3, #40	@ 0x28
90008a36:	2100      	movs	r1, #0
90008a38:	4618      	mov	r0, r3
90008a3a:	f001 fb15 	bl	9000a068 <RCCEx_PLL3_Config>
90008a3e:	4603      	mov	r3, r0
90008a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008a44:	e006      	b.n	90008a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008a46:	2301      	movs	r3, #1
90008a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a4c:	e002      	b.n	90008a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008a4e:	bf00      	nop
90008a50:	e000      	b.n	90008a54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008a52:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a58:	2b00      	cmp	r3, #0
90008a5a:	d10a      	bne.n	90008a72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90008a5c:	4b37      	ldr	r3, [pc, #220]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008a60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90008a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008a6a:	4a34      	ldr	r2, [pc, #208]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008a6c:	430b      	orrs	r3, r1
90008a6e:	6513      	str	r3, [r2, #80]	@ 0x50
90008a70:	e003      	b.n	90008a7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
90008a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90008a8a:	2300      	movs	r3, #0
90008a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008a90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90008a94:	460b      	mov	r3, r1
90008a96:	4313      	orrs	r3, r2
90008a98:	d056      	beq.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90008a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008aa4:	d033      	beq.n	90008b0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
90008aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008aaa:	d82c      	bhi.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008ab0:	d02f      	beq.n	90008b12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90008ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008ab6:	d826      	bhi.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008abc:	d02b      	beq.n	90008b16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90008abe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008ac2:	d820      	bhi.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008ac8:	d012      	beq.n	90008af0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90008aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008ace:	d81a      	bhi.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008ad0:	2b00      	cmp	r3, #0
90008ad2:	d022      	beq.n	90008b1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90008ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008ad8:	d115      	bne.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ade:	3308      	adds	r3, #8
90008ae0:	2101      	movs	r1, #1
90008ae2:	4618      	mov	r0, r3
90008ae4:	f001 fa0e 	bl	90009f04 <RCCEx_PLL2_Config>
90008ae8:	4603      	mov	r3, r0
90008aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008aee:	e015      	b.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008af4:	3328      	adds	r3, #40	@ 0x28
90008af6:	2101      	movs	r1, #1
90008af8:	4618      	mov	r0, r3
90008afa:	f001 fab5 	bl	9000a068 <RCCEx_PLL3_Config>
90008afe:	4603      	mov	r3, r0
90008b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008b04:	e00a      	b.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b06:	2301      	movs	r3, #1
90008b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b0c:	e006      	b.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008b0e:	bf00      	nop
90008b10:	e004      	b.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008b12:	bf00      	nop
90008b14:	e002      	b.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008b16:	bf00      	nop
90008b18:	e000      	b.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b20:	2b00      	cmp	r3, #0
90008b22:	d10d      	bne.n	90008b40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90008b24:	4b05      	ldr	r3, [pc, #20]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008b28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90008b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008b32:	4a02      	ldr	r2, [pc, #8]	@ (90008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008b34:	430b      	orrs	r3, r1
90008b36:	6513      	str	r3, [r2, #80]	@ 0x50
90008b38:	e006      	b.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90008b3a:	bf00      	nop
90008b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
90008b54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90008b58:	2300      	movs	r3, #0
90008b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90008b5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
90008b62:	460b      	mov	r3, r1
90008b64:	4313      	orrs	r3, r2
90008b66:	d055      	beq.n	90008c14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008b74:	d033      	beq.n	90008bde <HAL_RCCEx_PeriphCLKConfig+0x66a>
90008b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008b7a:	d82c      	bhi.n	90008bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008b80:	d02f      	beq.n	90008be2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90008b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008b86:	d826      	bhi.n	90008bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008b88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008b8c:	d02b      	beq.n	90008be6 <HAL_RCCEx_PeriphCLKConfig+0x672>
90008b8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008b92:	d820      	bhi.n	90008bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008b98:	d012      	beq.n	90008bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008b9e:	d81a      	bhi.n	90008bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008ba0:	2b00      	cmp	r3, #0
90008ba2:	d022      	beq.n	90008bea <HAL_RCCEx_PeriphCLKConfig+0x676>
90008ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008ba8:	d115      	bne.n	90008bd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bae:	3308      	adds	r3, #8
90008bb0:	2101      	movs	r1, #1
90008bb2:	4618      	mov	r0, r3
90008bb4:	f001 f9a6 	bl	90009f04 <RCCEx_PLL2_Config>
90008bb8:	4603      	mov	r3, r0
90008bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008bbe:	e015      	b.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bc4:	3328      	adds	r3, #40	@ 0x28
90008bc6:	2101      	movs	r1, #1
90008bc8:	4618      	mov	r0, r3
90008bca:	f001 fa4d 	bl	9000a068 <RCCEx_PLL3_Config>
90008bce:	4603      	mov	r3, r0
90008bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008bd4:	e00a      	b.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90008bd6:	2301      	movs	r3, #1
90008bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008bdc:	e006      	b.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008bde:	bf00      	nop
90008be0:	e004      	b.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008be2:	bf00      	nop
90008be4:	e002      	b.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008be6:	bf00      	nop
90008be8:	e000      	b.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008bea:	bf00      	nop
    }

    if (ret == HAL_OK)
90008bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bf0:	2b00      	cmp	r3, #0
90008bf2:	d10b      	bne.n	90008c0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008bf4:	4ba3      	ldr	r3, [pc, #652]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008bf8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008c04:	4a9f      	ldr	r2, [pc, #636]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008c06:	430b      	orrs	r3, r1
90008c08:	6593      	str	r3, [r2, #88]	@ 0x58
90008c0a:	e003      	b.n	90008c14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90008c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90008c20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
90008c24:	2300      	movs	r3, #0
90008c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90008c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008c2e:	460b      	mov	r3, r1
90008c30:	4313      	orrs	r3, r2
90008c32:	d037      	beq.n	90008ca4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
90008c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008c3e:	d00e      	beq.n	90008c5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008c44:	d816      	bhi.n	90008c74 <HAL_RCCEx_PeriphCLKConfig+0x700>
90008c46:	2b00      	cmp	r3, #0
90008c48:	d018      	beq.n	90008c7c <HAL_RCCEx_PeriphCLKConfig+0x708>
90008c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008c4e:	d111      	bne.n	90008c74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008c50:	4b8c      	ldr	r3, [pc, #560]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008c54:	4a8b      	ldr	r2, [pc, #556]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008c5c:	e00f      	b.n	90008c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c62:	3308      	adds	r3, #8
90008c64:	2101      	movs	r1, #1
90008c66:	4618      	mov	r0, r3
90008c68:	f001 f94c 	bl	90009f04 <RCCEx_PLL2_Config>
90008c6c:	4603      	mov	r3, r0
90008c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008c72:	e004      	b.n	90008c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008c74:	2301      	movs	r3, #1
90008c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c7a:	e000      	b.n	90008c7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90008c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c82:	2b00      	cmp	r3, #0
90008c84:	d10a      	bne.n	90008c9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90008c86:	4b7f      	ldr	r3, [pc, #508]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008c8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008c94:	4a7b      	ldr	r2, [pc, #492]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008c96:	430b      	orrs	r3, r1
90008c98:	6513      	str	r3, [r2, #80]	@ 0x50
90008c9a:	e003      	b.n	90008ca4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90008cb4:	2300      	movs	r3, #0
90008cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90008cba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008cbe:	460b      	mov	r3, r1
90008cc0:	4313      	orrs	r3, r2
90008cc2:	d039      	beq.n	90008d38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008cca:	2b03      	cmp	r3, #3
90008ccc:	d81c      	bhi.n	90008d08 <HAL_RCCEx_PeriphCLKConfig+0x794>
90008cce:	a201      	add	r2, pc, #4	@ (adr r2, 90008cd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008cd4:	90008d11 	.word	0x90008d11
90008cd8:	90008ce5 	.word	0x90008ce5
90008cdc:	90008cf3 	.word	0x90008cf3
90008ce0:	90008d11 	.word	0x90008d11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008ce4:	4b67      	ldr	r3, [pc, #412]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008ce8:	4a66      	ldr	r2, [pc, #408]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008cf0:	e00f      	b.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cf6:	3308      	adds	r3, #8
90008cf8:	2102      	movs	r1, #2
90008cfa:	4618      	mov	r0, r3
90008cfc:	f001 f902 	bl	90009f04 <RCCEx_PLL2_Config>
90008d00:	4603      	mov	r3, r0
90008d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90008d06:	e004      	b.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008d08:	2301      	movs	r3, #1
90008d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d0e:	e000      	b.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008d10:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d16:	2b00      	cmp	r3, #0
90008d18:	d10a      	bne.n	90008d30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90008d1a:	4b5a      	ldr	r3, [pc, #360]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008d1e:	f023 0103 	bic.w	r1, r3, #3
90008d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008d28:	4a56      	ldr	r2, [pc, #344]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008d2a:	430b      	orrs	r3, r1
90008d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008d2e:	e003      	b.n	90008d38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90008d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
90008d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
90008d48:	2300      	movs	r3, #0
90008d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
90008d4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
90008d52:	460b      	mov	r3, r1
90008d54:	4313      	orrs	r3, r2
90008d56:	f000 809f 	beq.w	90008e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90008d5a:	4b4b      	ldr	r3, [pc, #300]	@ (90008e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008d5c:	681b      	ldr	r3, [r3, #0]
90008d5e:	4a4a      	ldr	r2, [pc, #296]	@ (90008e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90008d64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90008d66:	f7fa fd07 	bl	90003778 <HAL_GetTick>
90008d6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008d6e:	e00b      	b.n	90008d88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90008d70:	f7fa fd02 	bl	90003778 <HAL_GetTick>
90008d74:	4602      	mov	r2, r0
90008d76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008d7a:	1ad3      	subs	r3, r2, r3
90008d7c:	2b64      	cmp	r3, #100	@ 0x64
90008d7e:	d903      	bls.n	90008d88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90008d80:	2303      	movs	r3, #3
90008d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d86:	e005      	b.n	90008d94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008d88:	4b3f      	ldr	r3, [pc, #252]	@ (90008e88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008d8a:	681b      	ldr	r3, [r3, #0]
90008d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90008d90:	2b00      	cmp	r3, #0
90008d92:	d0ed      	beq.n	90008d70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90008d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d98:	2b00      	cmp	r3, #0
90008d9a:	d179      	bne.n	90008e90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008d9c:	4b39      	ldr	r3, [pc, #228]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008d9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008da4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008da8:	4053      	eors	r3, r2
90008daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008dae:	2b00      	cmp	r3, #0
90008db0:	d015      	beq.n	90008dde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90008db2:	4b34      	ldr	r3, [pc, #208]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008dba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008dbe:	4b31      	ldr	r3, [pc, #196]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008dc2:	4a30      	ldr	r2, [pc, #192]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90008dc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90008dca:	4b2e      	ldr	r3, [pc, #184]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008dce:	4a2d      	ldr	r2, [pc, #180]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90008dd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90008dd6:	4a2b      	ldr	r2, [pc, #172]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008ddc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008dea:	d118      	bne.n	90008e1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008dec:	f7fa fcc4 	bl	90003778 <HAL_GetTick>
90008df0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008df4:	e00d      	b.n	90008e12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90008df6:	f7fa fcbf 	bl	90003778 <HAL_GetTick>
90008dfa:	4602      	mov	r2, r0
90008dfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008e00:	1ad2      	subs	r2, r2, r3
90008e02:	f241 3388 	movw	r3, #5000	@ 0x1388
90008e06:	429a      	cmp	r2, r3
90008e08:	d903      	bls.n	90008e12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90008e0a:	2303      	movs	r3, #3
90008e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90008e10:	e005      	b.n	90008e1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008e12:	4b1c      	ldr	r3, [pc, #112]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008e16:	f003 0302 	and.w	r3, r3, #2
90008e1a:	2b00      	cmp	r3, #0
90008e1c:	d0eb      	beq.n	90008df6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90008e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e22:	2b00      	cmp	r3, #0
90008e24:	d129      	bne.n	90008e7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90008e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008e36:	d10e      	bne.n	90008e56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90008e38:	4b12      	ldr	r3, [pc, #72]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008e3a:	691b      	ldr	r3, [r3, #16]
90008e3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90008e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008e48:	091a      	lsrs	r2, r3, #4
90008e4a:	4b10      	ldr	r3, [pc, #64]	@ (90008e8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
90008e4c:	4013      	ands	r3, r2
90008e4e:	4a0d      	ldr	r2, [pc, #52]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008e50:	430b      	orrs	r3, r1
90008e52:	6113      	str	r3, [r2, #16]
90008e54:	e005      	b.n	90008e62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
90008e56:	4b0b      	ldr	r3, [pc, #44]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008e58:	691b      	ldr	r3, [r3, #16]
90008e5a:	4a0a      	ldr	r2, [pc, #40]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008e5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90008e60:	6113      	str	r3, [r2, #16]
90008e62:	4b08      	ldr	r3, [pc, #32]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008e64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
90008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
90008e72:	4a04      	ldr	r2, [pc, #16]	@ (90008e84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008e74:	430b      	orrs	r3, r1
90008e76:	6713      	str	r3, [r2, #112]	@ 0x70
90008e78:	e00e      	b.n	90008e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
90008e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
90008e82:	e009      	b.n	90008e98 <HAL_RCCEx_PeriphCLKConfig+0x924>
90008e84:	58024400 	.word	0x58024400
90008e88:	58024800 	.word	0x58024800
90008e8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ea0:	f002 0301 	and.w	r3, r2, #1
90008ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008ea8:	2300      	movs	r3, #0
90008eaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008eae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
90008eb2:	460b      	mov	r3, r1
90008eb4:	4313      	orrs	r3, r2
90008eb6:	f000 8089 	beq.w	90008fcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008ec0:	2b28      	cmp	r3, #40	@ 0x28
90008ec2:	d86b      	bhi.n	90008f9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008ec4:	a201      	add	r2, pc, #4	@ (adr r2, 90008ecc <HAL_RCCEx_PeriphCLKConfig+0x958>)
90008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008eca:	bf00      	nop
90008ecc:	90008fa5 	.word	0x90008fa5
90008ed0:	90008f9d 	.word	0x90008f9d
90008ed4:	90008f9d 	.word	0x90008f9d
90008ed8:	90008f9d 	.word	0x90008f9d
90008edc:	90008f9d 	.word	0x90008f9d
90008ee0:	90008f9d 	.word	0x90008f9d
90008ee4:	90008f9d 	.word	0x90008f9d
90008ee8:	90008f9d 	.word	0x90008f9d
90008eec:	90008f71 	.word	0x90008f71
90008ef0:	90008f9d 	.word	0x90008f9d
90008ef4:	90008f9d 	.word	0x90008f9d
90008ef8:	90008f9d 	.word	0x90008f9d
90008efc:	90008f9d 	.word	0x90008f9d
90008f00:	90008f9d 	.word	0x90008f9d
90008f04:	90008f9d 	.word	0x90008f9d
90008f08:	90008f9d 	.word	0x90008f9d
90008f0c:	90008f87 	.word	0x90008f87
90008f10:	90008f9d 	.word	0x90008f9d
90008f14:	90008f9d 	.word	0x90008f9d
90008f18:	90008f9d 	.word	0x90008f9d
90008f1c:	90008f9d 	.word	0x90008f9d
90008f20:	90008f9d 	.word	0x90008f9d
90008f24:	90008f9d 	.word	0x90008f9d
90008f28:	90008f9d 	.word	0x90008f9d
90008f2c:	90008fa5 	.word	0x90008fa5
90008f30:	90008f9d 	.word	0x90008f9d
90008f34:	90008f9d 	.word	0x90008f9d
90008f38:	90008f9d 	.word	0x90008f9d
90008f3c:	90008f9d 	.word	0x90008f9d
90008f40:	90008f9d 	.word	0x90008f9d
90008f44:	90008f9d 	.word	0x90008f9d
90008f48:	90008f9d 	.word	0x90008f9d
90008f4c:	90008fa5 	.word	0x90008fa5
90008f50:	90008f9d 	.word	0x90008f9d
90008f54:	90008f9d 	.word	0x90008f9d
90008f58:	90008f9d 	.word	0x90008f9d
90008f5c:	90008f9d 	.word	0x90008f9d
90008f60:	90008f9d 	.word	0x90008f9d
90008f64:	90008f9d 	.word	0x90008f9d
90008f68:	90008f9d 	.word	0x90008f9d
90008f6c:	90008fa5 	.word	0x90008fa5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f74:	3308      	adds	r3, #8
90008f76:	2101      	movs	r1, #1
90008f78:	4618      	mov	r0, r3
90008f7a:	f000 ffc3 	bl	90009f04 <RCCEx_PLL2_Config>
90008f7e:	4603      	mov	r3, r0
90008f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008f84:	e00f      	b.n	90008fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f8a:	3328      	adds	r3, #40	@ 0x28
90008f8c:	2101      	movs	r1, #1
90008f8e:	4618      	mov	r0, r3
90008f90:	f001 f86a 	bl	9000a068 <RCCEx_PLL3_Config>
90008f94:	4603      	mov	r3, r0
90008f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008f9a:	e004      	b.n	90008fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008f9c:	2301      	movs	r3, #1
90008f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008fa2:	e000      	b.n	90008fa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90008fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
90008fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008faa:	2b00      	cmp	r3, #0
90008fac:	d10a      	bne.n	90008fc4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008fae:	4bbf      	ldr	r3, [pc, #764]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008fb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
90008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008fbc:	4abb      	ldr	r2, [pc, #748]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008fbe:	430b      	orrs	r3, r1
90008fc0:	6553      	str	r3, [r2, #84]	@ 0x54
90008fc2:	e003      	b.n	90008fcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fd4:	f002 0302 	and.w	r3, r2, #2
90008fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008fdc:	2300      	movs	r3, #0
90008fde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90008fe2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
90008fe6:	460b      	mov	r3, r1
90008fe8:	4313      	orrs	r3, r2
90008fea:	d041      	beq.n	90009070 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008ff2:	2b05      	cmp	r3, #5
90008ff4:	d824      	bhi.n	90009040 <HAL_RCCEx_PeriphCLKConfig+0xacc>
90008ff6:	a201      	add	r2, pc, #4	@ (adr r2, 90008ffc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008ffc:	90009049 	.word	0x90009049
90009000:	90009015 	.word	0x90009015
90009004:	9000902b 	.word	0x9000902b
90009008:	90009049 	.word	0x90009049
9000900c:	90009049 	.word	0x90009049
90009010:	90009049 	.word	0x90009049
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009018:	3308      	adds	r3, #8
9000901a:	2101      	movs	r1, #1
9000901c:	4618      	mov	r0, r3
9000901e:	f000 ff71 	bl	90009f04 <RCCEx_PLL2_Config>
90009022:	4603      	mov	r3, r0
90009024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90009028:	e00f      	b.n	9000904a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000902a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000902e:	3328      	adds	r3, #40	@ 0x28
90009030:	2101      	movs	r1, #1
90009032:	4618      	mov	r0, r3
90009034:	f001 f818 	bl	9000a068 <RCCEx_PLL3_Config>
90009038:	4603      	mov	r3, r0
9000903a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
9000903e:	e004      	b.n	9000904a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009040:	2301      	movs	r3, #1
90009042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009046:	e000      	b.n	9000904a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90009048:	bf00      	nop
    }

    if (ret == HAL_OK)
9000904a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000904e:	2b00      	cmp	r3, #0
90009050:	d10a      	bne.n	90009068 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90009052:	4b96      	ldr	r3, [pc, #600]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90009054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009056:	f023 0107 	bic.w	r1, r3, #7
9000905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000905e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90009060:	4a92      	ldr	r2, [pc, #584]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90009062:	430b      	orrs	r3, r1
90009064:	6553      	str	r3, [r2, #84]	@ 0x54
90009066:	e003      	b.n	90009070 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000906c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90009070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009074:	e9d3 2300 	ldrd	r2, r3, [r3]
90009078:	f002 0304 	and.w	r3, r2, #4
9000907c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90009080:	2300      	movs	r3, #0
90009082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
90009086:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
9000908a:	460b      	mov	r3, r1
9000908c:	4313      	orrs	r3, r2
9000908e:	d044      	beq.n	9000911a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90009090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90009098:	2b05      	cmp	r3, #5
9000909a:	d825      	bhi.n	900090e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
9000909c:	a201      	add	r2, pc, #4	@ (adr r2, 900090a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
9000909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900090a2:	bf00      	nop
900090a4:	900090f1 	.word	0x900090f1
900090a8:	900090bd 	.word	0x900090bd
900090ac:	900090d3 	.word	0x900090d3
900090b0:	900090f1 	.word	0x900090f1
900090b4:	900090f1 	.word	0x900090f1
900090b8:	900090f1 	.word	0x900090f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090c0:	3308      	adds	r3, #8
900090c2:	2101      	movs	r1, #1
900090c4:	4618      	mov	r0, r3
900090c6:	f000 ff1d 	bl	90009f04 <RCCEx_PLL2_Config>
900090ca:	4603      	mov	r3, r0
900090cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900090d0:	e00f      	b.n	900090f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090d6:	3328      	adds	r3, #40	@ 0x28
900090d8:	2101      	movs	r1, #1
900090da:	4618      	mov	r0, r3
900090dc:	f000 ffc4 	bl	9000a068 <RCCEx_PLL3_Config>
900090e0:	4603      	mov	r3, r0
900090e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900090e6:	e004      	b.n	900090f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900090e8:	2301      	movs	r3, #1
900090ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900090ee:	e000      	b.n	900090f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
900090f0:	bf00      	nop
    }

    if (ret == HAL_OK)
900090f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900090f6:	2b00      	cmp	r3, #0
900090f8:	d10b      	bne.n	90009112 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
900090fa:	4b6c      	ldr	r3, [pc, #432]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900090fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900090fe:	f023 0107 	bic.w	r1, r3, #7
90009102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000910a:	4a68      	ldr	r2, [pc, #416]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000910c:	430b      	orrs	r3, r1
9000910e:	6593      	str	r3, [r2, #88]	@ 0x58
90009110:	e003      	b.n	9000911a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000911e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009122:	f002 0320 	and.w	r3, r2, #32
90009126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
9000912a:	2300      	movs	r3, #0
9000912c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90009130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
90009134:	460b      	mov	r3, r1
90009136:	4313      	orrs	r3, r2
90009138:	d055      	beq.n	900091e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
9000913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90009142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90009146:	d033      	beq.n	900091b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90009148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000914c:	d82c      	bhi.n	900091a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000914e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009152:	d02f      	beq.n	900091b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
90009154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009158:	d826      	bhi.n	900091a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000915a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000915e:	d02b      	beq.n	900091b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90009160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90009164:	d820      	bhi.n	900091a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90009166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000916a:	d012      	beq.n	90009192 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
9000916c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90009170:	d81a      	bhi.n	900091a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90009172:	2b00      	cmp	r3, #0
90009174:	d022      	beq.n	900091bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
90009176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000917a:	d115      	bne.n	900091a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000917c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009180:	3308      	adds	r3, #8
90009182:	2100      	movs	r1, #0
90009184:	4618      	mov	r0, r3
90009186:	f000 febd 	bl	90009f04 <RCCEx_PLL2_Config>
9000918a:	4603      	mov	r3, r0
9000918c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90009190:	e015      	b.n	900091be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009196:	3328      	adds	r3, #40	@ 0x28
90009198:	2102      	movs	r1, #2
9000919a:	4618      	mov	r0, r3
9000919c:	f000 ff64 	bl	9000a068 <RCCEx_PLL3_Config>
900091a0:	4603      	mov	r3, r0
900091a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900091a6:	e00a      	b.n	900091be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900091a8:	2301      	movs	r3, #1
900091aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900091ae:	e006      	b.n	900091be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900091b0:	bf00      	nop
900091b2:	e004      	b.n	900091be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900091b4:	bf00      	nop
900091b6:	e002      	b.n	900091be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900091b8:	bf00      	nop
900091ba:	e000      	b.n	900091be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900091bc:	bf00      	nop
    }

    if (ret == HAL_OK)
900091be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091c2:	2b00      	cmp	r3, #0
900091c4:	d10b      	bne.n	900091de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
900091c6:	4b39      	ldr	r3, [pc, #228]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900091c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900091ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900091ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900091d6:	4a35      	ldr	r2, [pc, #212]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900091d8:	430b      	orrs	r3, r1
900091da:	6553      	str	r3, [r2, #84]	@ 0x54
900091dc:	e003      	b.n	900091e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
900091de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
900091e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
900091ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
900091f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
900091f6:	2300      	movs	r3, #0
900091f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
900091fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90009200:	460b      	mov	r3, r1
90009202:	4313      	orrs	r3, r2
90009204:	d058      	beq.n	900092b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90009206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000920a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000920e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90009212:	d033      	beq.n	9000927c <HAL_RCCEx_PeriphCLKConfig+0xd08>
90009214:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90009218:	d82c      	bhi.n	90009274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000921a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000921e:	d02f      	beq.n	90009280 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90009220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009224:	d826      	bhi.n	90009274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90009226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
9000922a:	d02b      	beq.n	90009284 <HAL_RCCEx_PeriphCLKConfig+0xd10>
9000922c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90009230:	d820      	bhi.n	90009274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90009232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90009236:	d012      	beq.n	9000925e <HAL_RCCEx_PeriphCLKConfig+0xcea>
90009238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000923c:	d81a      	bhi.n	90009274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000923e:	2b00      	cmp	r3, #0
90009240:	d022      	beq.n	90009288 <HAL_RCCEx_PeriphCLKConfig+0xd14>
90009242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90009246:	d115      	bne.n	90009274 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000924c:	3308      	adds	r3, #8
9000924e:	2100      	movs	r1, #0
90009250:	4618      	mov	r0, r3
90009252:	f000 fe57 	bl	90009f04 <RCCEx_PLL2_Config>
90009256:	4603      	mov	r3, r0
90009258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000925c:	e015      	b.n	9000928a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009262:	3328      	adds	r3, #40	@ 0x28
90009264:	2102      	movs	r1, #2
90009266:	4618      	mov	r0, r3
90009268:	f000 fefe 	bl	9000a068 <RCCEx_PLL3_Config>
9000926c:	4603      	mov	r3, r0
9000926e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90009272:	e00a      	b.n	9000928a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009274:	2301      	movs	r3, #1
90009276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000927a:	e006      	b.n	9000928a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000927c:	bf00      	nop
9000927e:	e004      	b.n	9000928a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90009280:	bf00      	nop
90009282:	e002      	b.n	9000928a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90009284:	bf00      	nop
90009286:	e000      	b.n	9000928a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90009288:	bf00      	nop
    }

    if (ret == HAL_OK)
9000928a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000928e:	2b00      	cmp	r3, #0
90009290:	d10e      	bne.n	900092b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90009292:	4b06      	ldr	r3, [pc, #24]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90009294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90009296:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
9000929a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000929e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900092a2:	4a02      	ldr	r2, [pc, #8]	@ (900092ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900092a4:	430b      	orrs	r3, r1
900092a6:	6593      	str	r3, [r2, #88]	@ 0x58
900092a8:	e006      	b.n	900092b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
900092aa:	bf00      	nop
900092ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900092b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900092b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
900092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
900092c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
900092c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
900092c8:	2300      	movs	r3, #0
900092ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
900092ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
900092d2:	460b      	mov	r3, r1
900092d4:	4313      	orrs	r3, r2
900092d6:	d055      	beq.n	90009384 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
900092d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900092e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900092e4:	d033      	beq.n	9000934e <HAL_RCCEx_PeriphCLKConfig+0xdda>
900092e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900092ea:	d82c      	bhi.n	90009346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900092ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900092f0:	d02f      	beq.n	90009352 <HAL_RCCEx_PeriphCLKConfig+0xdde>
900092f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900092f6:	d826      	bhi.n	90009346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900092f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900092fc:	d02b      	beq.n	90009356 <HAL_RCCEx_PeriphCLKConfig+0xde2>
900092fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90009302:	d820      	bhi.n	90009346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90009304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90009308:	d012      	beq.n	90009330 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000930a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000930e:	d81a      	bhi.n	90009346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90009310:	2b00      	cmp	r3, #0
90009312:	d022      	beq.n	9000935a <HAL_RCCEx_PeriphCLKConfig+0xde6>
90009314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90009318:	d115      	bne.n	90009346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000931a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000931e:	3308      	adds	r3, #8
90009320:	2100      	movs	r1, #0
90009322:	4618      	mov	r0, r3
90009324:	f000 fdee 	bl	90009f04 <RCCEx_PLL2_Config>
90009328:	4603      	mov	r3, r0
9000932a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000932e:	e015      	b.n	9000935c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009334:	3328      	adds	r3, #40	@ 0x28
90009336:	2102      	movs	r1, #2
90009338:	4618      	mov	r0, r3
9000933a:	f000 fe95 	bl	9000a068 <RCCEx_PLL3_Config>
9000933e:	4603      	mov	r3, r0
90009340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90009344:	e00a      	b.n	9000935c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009346:	2301      	movs	r3, #1
90009348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000934c:	e006      	b.n	9000935c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000934e:	bf00      	nop
90009350:	e004      	b.n	9000935c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90009352:	bf00      	nop
90009354:	e002      	b.n	9000935c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90009356:	bf00      	nop
90009358:	e000      	b.n	9000935c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000935a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000935c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009360:	2b00      	cmp	r3, #0
90009362:	d10b      	bne.n	9000937c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90009364:	4ba1      	ldr	r3, [pc, #644]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90009368:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
9000936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90009374:	4a9d      	ldr	r2, [pc, #628]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009376:	430b      	orrs	r3, r1
90009378:	6593      	str	r3, [r2, #88]	@ 0x58
9000937a:	e003      	b.n	90009384 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000937c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009388:	e9d3 2300 	ldrd	r2, r3, [r3]
9000938c:	f002 0308 	and.w	r3, r2, #8
90009390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90009394:	2300      	movs	r3, #0
90009396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
9000939a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
9000939e:	460b      	mov	r3, r1
900093a0:	4313      	orrs	r3, r2
900093a2:	d01e      	beq.n	900093e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
900093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900093a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900093ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900093b0:	d10c      	bne.n	900093cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900093b6:	3328      	adds	r3, #40	@ 0x28
900093b8:	2102      	movs	r1, #2
900093ba:	4618      	mov	r0, r3
900093bc:	f000 fe54 	bl	9000a068 <RCCEx_PLL3_Config>
900093c0:	4603      	mov	r3, r0
900093c2:	2b00      	cmp	r3, #0
900093c4:	d002      	beq.n	900093cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
900093c6:	2301      	movs	r3, #1
900093c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
900093cc:	4b87      	ldr	r3, [pc, #540]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900093ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900093d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
900093d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900093d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900093dc:	4a83      	ldr	r2, [pc, #524]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900093de:	430b      	orrs	r3, r1
900093e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900093e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
900093ea:	f002 0310 	and.w	r3, r2, #16
900093ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
900093f2:	2300      	movs	r3, #0
900093f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
900093f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
900093fc:	460b      	mov	r3, r1
900093fe:	4313      	orrs	r3, r2
90009400:	d01e      	beq.n	90009440 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90009402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000940a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000940e:	d10c      	bne.n	9000942a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90009410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009414:	3328      	adds	r3, #40	@ 0x28
90009416:	2102      	movs	r1, #2
90009418:	4618      	mov	r0, r3
9000941a:	f000 fe25 	bl	9000a068 <RCCEx_PLL3_Config>
9000941e:	4603      	mov	r3, r0
90009420:	2b00      	cmp	r3, #0
90009422:	d002      	beq.n	9000942a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90009424:	2301      	movs	r3, #1
90009426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000942a:	4b70      	ldr	r3, [pc, #448]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000942c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000942e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90009432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000943a:	4a6c      	ldr	r2, [pc, #432]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000943c:	430b      	orrs	r3, r1
9000943e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009444:	e9d3 2300 	ldrd	r2, r3, [r3]
90009448:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
9000944c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90009450:	2300      	movs	r3, #0
90009452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90009456:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
9000945a:	460b      	mov	r3, r1
9000945c:	4313      	orrs	r3, r2
9000945e:	d03e      	beq.n	900094de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90009468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000946c:	d022      	beq.n	900094b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
9000946e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90009472:	d81b      	bhi.n	900094ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
90009474:	2b00      	cmp	r3, #0
90009476:	d003      	beq.n	90009480 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90009478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000947c:	d00b      	beq.n	90009496 <HAL_RCCEx_PeriphCLKConfig+0xf22>
9000947e:	e015      	b.n	900094ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90009480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009484:	3308      	adds	r3, #8
90009486:	2100      	movs	r1, #0
90009488:	4618      	mov	r0, r3
9000948a:	f000 fd3b 	bl	90009f04 <RCCEx_PLL2_Config>
9000948e:	4603      	mov	r3, r0
90009490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90009494:	e00f      	b.n	900094b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000949a:	3328      	adds	r3, #40	@ 0x28
9000949c:	2102      	movs	r1, #2
9000949e:	4618      	mov	r0, r3
900094a0:	f000 fde2 	bl	9000a068 <RCCEx_PLL3_Config>
900094a4:	4603      	mov	r3, r0
900094a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
900094aa:	e004      	b.n	900094b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900094ac:	2301      	movs	r3, #1
900094ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900094b2:	e000      	b.n	900094b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
900094b4:	bf00      	nop
    }

    if (ret == HAL_OK)
900094b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900094ba:	2b00      	cmp	r3, #0
900094bc:	d10b      	bne.n	900094d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
900094be:	4b4b      	ldr	r3, [pc, #300]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900094c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900094c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
900094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900094ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
900094ce:	4a47      	ldr	r2, [pc, #284]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900094d0:	430b      	orrs	r3, r1
900094d2:	6593      	str	r3, [r2, #88]	@ 0x58
900094d4:	e003      	b.n	900094de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
900094d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900094da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
900094de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
900094e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
900094ea:	67bb      	str	r3, [r7, #120]	@ 0x78
900094ec:	2300      	movs	r3, #0
900094ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
900094f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
900094f4:	460b      	mov	r3, r1
900094f6:	4313      	orrs	r3, r2
900094f8:	d03b      	beq.n	90009572 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
900094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900094fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009502:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90009506:	d01f      	beq.n	90009548 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90009508:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000950c:	d818      	bhi.n	90009540 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
9000950e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90009512:	d003      	beq.n	9000951c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90009514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90009518:	d007      	beq.n	9000952a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
9000951a:	e011      	b.n	90009540 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000951c:	4b33      	ldr	r3, [pc, #204]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000951e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009520:	4a32      	ldr	r2, [pc, #200]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90009526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90009528:	e00f      	b.n	9000954a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000952a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000952e:	3328      	adds	r3, #40	@ 0x28
90009530:	2101      	movs	r1, #1
90009532:	4618      	mov	r0, r3
90009534:	f000 fd98 	bl	9000a068 <RCCEx_PLL3_Config>
90009538:	4603      	mov	r3, r0
9000953a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
9000953e:	e004      	b.n	9000954a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009540:	2301      	movs	r3, #1
90009542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009546:	e000      	b.n	9000954a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90009548:	bf00      	nop
    }

    if (ret == HAL_OK)
9000954a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000954e:	2b00      	cmp	r3, #0
90009550:	d10b      	bne.n	9000956a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90009552:	4b26      	ldr	r3, [pc, #152]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009556:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000955e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009562:	4a22      	ldr	r2, [pc, #136]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009564:	430b      	orrs	r3, r1
90009566:	6553      	str	r3, [r2, #84]	@ 0x54
90009568:	e003      	b.n	90009572 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000956a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000956e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90009572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009576:	e9d3 2300 	ldrd	r2, r3, [r3]
9000957a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
9000957e:	673b      	str	r3, [r7, #112]	@ 0x70
90009580:	2300      	movs	r3, #0
90009582:	677b      	str	r3, [r7, #116]	@ 0x74
90009584:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90009588:	460b      	mov	r3, r1
9000958a:	4313      	orrs	r3, r2
9000958c:	d034      	beq.n	900095f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
9000958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90009594:	2b00      	cmp	r3, #0
90009596:	d003      	beq.n	900095a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90009598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000959c:	d007      	beq.n	900095ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
9000959e:	e011      	b.n	900095c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900095a0:	4b12      	ldr	r3, [pc, #72]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900095a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095a4:	4a11      	ldr	r2, [pc, #68]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900095a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900095aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
900095ac:	e00e      	b.n	900095cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900095b2:	3308      	adds	r3, #8
900095b4:	2102      	movs	r1, #2
900095b6:	4618      	mov	r0, r3
900095b8:	f000 fca4 	bl	90009f04 <RCCEx_PLL2_Config>
900095bc:	4603      	mov	r3, r0
900095be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
900095c2:	e003      	b.n	900095cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
900095c4:	2301      	movs	r3, #1
900095c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900095ca:	bf00      	nop
    }

    if (ret == HAL_OK)
900095cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900095d0:	2b00      	cmp	r3, #0
900095d2:	d10d      	bne.n	900095f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
900095d4:	4b05      	ldr	r3, [pc, #20]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900095d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900095d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
900095dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900095e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900095e2:	4a02      	ldr	r2, [pc, #8]	@ (900095ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900095e4:	430b      	orrs	r3, r1
900095e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
900095e8:	e006      	b.n	900095f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
900095ea:	bf00      	nop
900095ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900095f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900095f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
900095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
90009600:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90009604:	66bb      	str	r3, [r7, #104]	@ 0x68
90009606:	2300      	movs	r3, #0
90009608:	66fb      	str	r3, [r7, #108]	@ 0x6c
9000960a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
9000960e:	460b      	mov	r3, r1
90009610:	4313      	orrs	r3, r2
90009612:	d00c      	beq.n	9000962e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90009614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009618:	3328      	adds	r3, #40	@ 0x28
9000961a:	2102      	movs	r1, #2
9000961c:	4618      	mov	r0, r3
9000961e:	f000 fd23 	bl	9000a068 <RCCEx_PLL3_Config>
90009622:	4603      	mov	r3, r0
90009624:	2b00      	cmp	r3, #0
90009626:	d002      	beq.n	9000962e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90009628:	2301      	movs	r3, #1
9000962a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000962e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009632:	e9d3 2300 	ldrd	r2, r3, [r3]
90009636:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
9000963a:	663b      	str	r3, [r7, #96]	@ 0x60
9000963c:	2300      	movs	r3, #0
9000963e:	667b      	str	r3, [r7, #100]	@ 0x64
90009640:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90009644:	460b      	mov	r3, r1
90009646:	4313      	orrs	r3, r2
90009648:	d038      	beq.n	900096bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
9000964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000964e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90009652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90009656:	d018      	beq.n	9000968a <HAL_RCCEx_PeriphCLKConfig+0x1116>
90009658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000965c:	d811      	bhi.n	90009682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
9000965e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90009662:	d014      	beq.n	9000968e <HAL_RCCEx_PeriphCLKConfig+0x111a>
90009664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90009668:	d80b      	bhi.n	90009682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
9000966a:	2b00      	cmp	r3, #0
9000966c:	d011      	beq.n	90009692 <HAL_RCCEx_PeriphCLKConfig+0x111e>
9000966e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90009672:	d106      	bne.n	90009682 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009674:	4bc3      	ldr	r3, [pc, #780]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009678:	4ac2      	ldr	r2, [pc, #776]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000967a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000967e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90009680:	e008      	b.n	90009694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009682:	2301      	movs	r3, #1
90009684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009688:	e004      	b.n	90009694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000968a:	bf00      	nop
9000968c:	e002      	b.n	90009694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000968e:	bf00      	nop
90009690:	e000      	b.n	90009694 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90009692:	bf00      	nop
    }

    if (ret == HAL_OK)
90009694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009698:	2b00      	cmp	r3, #0
9000969a:	d10b      	bne.n	900096b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000969c:	4bb9      	ldr	r3, [pc, #740]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000969e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900096a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
900096a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
900096ac:	4ab5      	ldr	r2, [pc, #724]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900096ae:	430b      	orrs	r3, r1
900096b0:	6553      	str	r3, [r2, #84]	@ 0x54
900096b2:	e003      	b.n	900096bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
900096b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900096b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
900096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
900096c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
900096c8:	65bb      	str	r3, [r7, #88]	@ 0x58
900096ca:	2300      	movs	r3, #0
900096cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
900096ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
900096d2:	460b      	mov	r3, r1
900096d4:	4313      	orrs	r3, r2
900096d6:	d009      	beq.n	900096ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
900096d8:	4baa      	ldr	r3, [pc, #680]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900096da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900096dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
900096e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900096e6:	4aa7      	ldr	r2, [pc, #668]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900096e8:	430b      	orrs	r3, r1
900096ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
900096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
900096f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
900096f8:	653b      	str	r3, [r7, #80]	@ 0x50
900096fa:	2300      	movs	r3, #0
900096fc:	657b      	str	r3, [r7, #84]	@ 0x54
900096fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90009702:	460b      	mov	r3, r1
90009704:	4313      	orrs	r3, r2
90009706:	d00a      	beq.n	9000971e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90009708:	4b9e      	ldr	r3, [pc, #632]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000970a:	691b      	ldr	r3, [r3, #16]
9000970c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90009718:	4a9a      	ldr	r2, [pc, #616]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000971a:	430b      	orrs	r3, r1
9000971c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009722:	e9d3 2300 	ldrd	r2, r3, [r3]
90009726:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
9000972a:	64bb      	str	r3, [r7, #72]	@ 0x48
9000972c:	2300      	movs	r3, #0
9000972e:	64fb      	str	r3, [r7, #76]	@ 0x4c
90009730:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90009734:	460b      	mov	r3, r1
90009736:	4313      	orrs	r3, r2
90009738:	d009      	beq.n	9000974e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000973a:	4b92      	ldr	r3, [pc, #584]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000973c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000973e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90009748:	4a8e      	ldr	r2, [pc, #568]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000974a:	430b      	orrs	r3, r1
9000974c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009752:	e9d3 2300 	ldrd	r2, r3, [r3]
90009756:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
9000975a:	643b      	str	r3, [r7, #64]	@ 0x40
9000975c:	2300      	movs	r3, #0
9000975e:	647b      	str	r3, [r7, #68]	@ 0x44
90009760:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90009764:	460b      	mov	r3, r1
90009766:	4313      	orrs	r3, r2
90009768:	d00e      	beq.n	90009788 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000976a:	4b86      	ldr	r3, [pc, #536]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000976c:	691b      	ldr	r3, [r3, #16]
9000976e:	4a85      	ldr	r2, [pc, #532]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009770:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90009774:	6113      	str	r3, [r2, #16]
90009776:	4b83      	ldr	r3, [pc, #524]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009778:	6919      	ldr	r1, [r3, #16]
9000977a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000977e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90009782:	4a80      	ldr	r2, [pc, #512]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009784:	430b      	orrs	r3, r1
90009786:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000978c:	e9d3 2300 	ldrd	r2, r3, [r3]
90009790:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90009794:	63bb      	str	r3, [r7, #56]	@ 0x38
90009796:	2300      	movs	r3, #0
90009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000979a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
9000979e:	460b      	mov	r3, r1
900097a0:	4313      	orrs	r3, r2
900097a2:	d009      	beq.n	900097b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
900097a4:	4b77      	ldr	r3, [pc, #476]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900097a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900097a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
900097ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900097b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900097b2:	4a74      	ldr	r2, [pc, #464]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900097b4:	430b      	orrs	r3, r1
900097b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
900097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
900097c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
900097c4:	633b      	str	r3, [r7, #48]	@ 0x30
900097c6:	2300      	movs	r3, #0
900097c8:	637b      	str	r3, [r7, #52]	@ 0x34
900097ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
900097ce:	460b      	mov	r3, r1
900097d0:	4313      	orrs	r3, r2
900097d2:	d00a      	beq.n	900097ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900097d4:	4b6b      	ldr	r3, [pc, #428]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900097d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900097d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
900097dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900097e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
900097e4:	4a67      	ldr	r2, [pc, #412]	@ (90009984 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900097e6:	430b      	orrs	r3, r1
900097e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
900097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
900097f2:	2100      	movs	r1, #0
900097f4:	62b9      	str	r1, [r7, #40]	@ 0x28
900097f6:	f003 0301 	and.w	r3, r3, #1
900097fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
900097fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90009800:	460b      	mov	r3, r1
90009802:	4313      	orrs	r3, r2
90009804:	d011      	beq.n	9000982a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000980a:	3308      	adds	r3, #8
9000980c:	2100      	movs	r1, #0
9000980e:	4618      	mov	r0, r3
90009810:	f000 fb78 	bl	90009f04 <RCCEx_PLL2_Config>
90009814:	4603      	mov	r3, r0
90009816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000981a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000981e:	2b00      	cmp	r3, #0
90009820:	d003      	beq.n	9000982a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000982a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000982e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009832:	2100      	movs	r1, #0
90009834:	6239      	str	r1, [r7, #32]
90009836:	f003 0302 	and.w	r3, r3, #2
9000983a:	627b      	str	r3, [r7, #36]	@ 0x24
9000983c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90009840:	460b      	mov	r3, r1
90009842:	4313      	orrs	r3, r2
90009844:	d011      	beq.n	9000986a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000984a:	3308      	adds	r3, #8
9000984c:	2101      	movs	r1, #1
9000984e:	4618      	mov	r0, r3
90009850:	f000 fb58 	bl	90009f04 <RCCEx_PLL2_Config>
90009854:	4603      	mov	r3, r0
90009856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000985a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000985e:	2b00      	cmp	r3, #0
90009860:	d003      	beq.n	9000986a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000986e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009872:	2100      	movs	r1, #0
90009874:	61b9      	str	r1, [r7, #24]
90009876:	f003 0304 	and.w	r3, r3, #4
9000987a:	61fb      	str	r3, [r7, #28]
9000987c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90009880:	460b      	mov	r3, r1
90009882:	4313      	orrs	r3, r2
90009884:	d011      	beq.n	900098aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90009886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000988a:	3308      	adds	r3, #8
9000988c:	2102      	movs	r1, #2
9000988e:	4618      	mov	r0, r3
90009890:	f000 fb38 	bl	90009f04 <RCCEx_PLL2_Config>
90009894:	4603      	mov	r3, r0
90009896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000989a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000989e:	2b00      	cmp	r3, #0
900098a0:	d003      	beq.n	900098aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900098a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900098a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
900098aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900098ae:	e9d3 2300 	ldrd	r2, r3, [r3]
900098b2:	2100      	movs	r1, #0
900098b4:	6139      	str	r1, [r7, #16]
900098b6:	f003 0308 	and.w	r3, r3, #8
900098ba:	617b      	str	r3, [r7, #20]
900098bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
900098c0:	460b      	mov	r3, r1
900098c2:	4313      	orrs	r3, r2
900098c4:	d011      	beq.n	900098ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900098c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900098ca:	3328      	adds	r3, #40	@ 0x28
900098cc:	2100      	movs	r1, #0
900098ce:	4618      	mov	r0, r3
900098d0:	f000 fbca 	bl	9000a068 <RCCEx_PLL3_Config>
900098d4:	4603      	mov	r3, r0
900098d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
900098da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900098de:	2b00      	cmp	r3, #0
900098e0:	d003      	beq.n	900098ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900098e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900098e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
900098ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
900098f2:	2100      	movs	r1, #0
900098f4:	60b9      	str	r1, [r7, #8]
900098f6:	f003 0310 	and.w	r3, r3, #16
900098fa:	60fb      	str	r3, [r7, #12]
900098fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90009900:	460b      	mov	r3, r1
90009902:	4313      	orrs	r3, r2
90009904:	d011      	beq.n	9000992a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000990a:	3328      	adds	r3, #40	@ 0x28
9000990c:	2101      	movs	r1, #1
9000990e:	4618      	mov	r0, r3
90009910:	f000 fbaa 	bl	9000a068 <RCCEx_PLL3_Config>
90009914:	4603      	mov	r3, r0
90009916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000991a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000991e:	2b00      	cmp	r3, #0
90009920:	d003      	beq.n	9000992a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000992a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000992e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009932:	2100      	movs	r1, #0
90009934:	6039      	str	r1, [r7, #0]
90009936:	f003 0320 	and.w	r3, r3, #32
9000993a:	607b      	str	r3, [r7, #4]
9000993c:	e9d7 1200 	ldrd	r1, r2, [r7]
90009940:	460b      	mov	r3, r1
90009942:	4313      	orrs	r3, r2
90009944:	d011      	beq.n	9000996a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000994a:	3328      	adds	r3, #40	@ 0x28
9000994c:	2102      	movs	r1, #2
9000994e:	4618      	mov	r0, r3
90009950:	f000 fb8a 	bl	9000a068 <RCCEx_PLL3_Config>
90009954:	4603      	mov	r3, r0
90009956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000995a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000995e:	2b00      	cmp	r3, #0
90009960:	d003      	beq.n	9000996a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
9000996a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
9000996e:	2b00      	cmp	r3, #0
90009970:	d101      	bne.n	90009976 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90009972:	2300      	movs	r3, #0
90009974:	e000      	b.n	90009978 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90009976:	2301      	movs	r3, #1
}
90009978:	4618      	mov	r0, r3
9000997a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
9000997e:	46bd      	mov	sp, r7
90009980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90009984:	58024400 	.word	0x58024400

90009988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90009988:	b580      	push	{r7, lr}
9000998a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000998c:	f7fe fd96 	bl	900084bc <HAL_RCC_GetHCLKFreq>
90009990:	4602      	mov	r2, r0
90009992:	4b06      	ldr	r3, [pc, #24]	@ (900099ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90009994:	6a1b      	ldr	r3, [r3, #32]
90009996:	091b      	lsrs	r3, r3, #4
90009998:	f003 0307 	and.w	r3, r3, #7
9000999c:	4904      	ldr	r1, [pc, #16]	@ (900099b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
9000999e:	5ccb      	ldrb	r3, [r1, r3]
900099a0:	f003 031f 	and.w	r3, r3, #31
900099a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
900099a8:	4618      	mov	r0, r3
900099aa:	bd80      	pop	{r7, pc}
900099ac:	58024400 	.word	0x58024400
900099b0:	9000d344 	.word	0x9000d344

900099b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
900099b4:	b480      	push	{r7}
900099b6:	b089      	sub	sp, #36	@ 0x24
900099b8:	af00      	add	r7, sp, #0
900099ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900099bc:	4ba1      	ldr	r3, [pc, #644]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900099c0:	f003 0303 	and.w	r3, r3, #3
900099c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
900099c6:	4b9f      	ldr	r3, [pc, #636]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900099c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900099ca:	0b1b      	lsrs	r3, r3, #12
900099cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900099d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
900099d2:	4b9c      	ldr	r3, [pc, #624]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900099d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900099d6:	091b      	lsrs	r3, r3, #4
900099d8:	f003 0301 	and.w	r3, r3, #1
900099dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
900099de:	4b99      	ldr	r3, [pc, #612]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900099e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900099e2:	08db      	lsrs	r3, r3, #3
900099e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
900099e8:	693a      	ldr	r2, [r7, #16]
900099ea:	fb02 f303 	mul.w	r3, r2, r3
900099ee:	ee07 3a90 	vmov	s15, r3
900099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900099f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
900099fa:	697b      	ldr	r3, [r7, #20]
900099fc:	2b00      	cmp	r3, #0
900099fe:	f000 8111 	beq.w	90009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90009a02:	69bb      	ldr	r3, [r7, #24]
90009a04:	2b02      	cmp	r3, #2
90009a06:	f000 8083 	beq.w	90009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90009a0a:	69bb      	ldr	r3, [r7, #24]
90009a0c:	2b02      	cmp	r3, #2
90009a0e:	f200 80a1 	bhi.w	90009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90009a12:	69bb      	ldr	r3, [r7, #24]
90009a14:	2b00      	cmp	r3, #0
90009a16:	d003      	beq.n	90009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90009a18:	69bb      	ldr	r3, [r7, #24]
90009a1a:	2b01      	cmp	r3, #1
90009a1c:	d056      	beq.n	90009acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90009a1e:	e099      	b.n	90009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009a20:	4b88      	ldr	r3, [pc, #544]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009a22:	681b      	ldr	r3, [r3, #0]
90009a24:	f003 0320 	and.w	r3, r3, #32
90009a28:	2b00      	cmp	r3, #0
90009a2a:	d02d      	beq.n	90009a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009a2c:	4b85      	ldr	r3, [pc, #532]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009a2e:	681b      	ldr	r3, [r3, #0]
90009a30:	08db      	lsrs	r3, r3, #3
90009a32:	f003 0303 	and.w	r3, r3, #3
90009a36:	4a84      	ldr	r2, [pc, #528]	@ (90009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90009a38:	fa22 f303 	lsr.w	r3, r2, r3
90009a3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009a3e:	68bb      	ldr	r3, [r7, #8]
90009a40:	ee07 3a90 	vmov	s15, r3
90009a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009a48:	697b      	ldr	r3, [r7, #20]
90009a4a:	ee07 3a90 	vmov	s15, r3
90009a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009a56:	4b7b      	ldr	r3, [pc, #492]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009a5e:	ee07 3a90 	vmov	s15, r3
90009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009a66:	ed97 6a03 	vldr	s12, [r7, #12]
90009a6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009a86:	e087      	b.n	90009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009a88:	697b      	ldr	r3, [r7, #20]
90009a8a:	ee07 3a90 	vmov	s15, r3
90009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009a92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009a9a:	4b6a      	ldr	r3, [pc, #424]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009aa2:	ee07 3a90 	vmov	s15, r3
90009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009aaa:	ed97 6a03 	vldr	s12, [r7, #12]
90009aae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
90009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009aca:	e065      	b.n	90009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009acc:	697b      	ldr	r3, [r7, #20]
90009ace:	ee07 3a90 	vmov	s15, r3
90009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009ade:	4b59      	ldr	r3, [pc, #356]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009ae6:	ee07 3a90 	vmov	s15, r3
90009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009aee:	ed97 6a03 	vldr	s12, [r7, #12]
90009af2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
90009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009b0e:	e043      	b.n	90009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009b10:	697b      	ldr	r3, [r7, #20]
90009b12:	ee07 3a90 	vmov	s15, r3
90009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009b22:	4b48      	ldr	r3, [pc, #288]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009b2a:	ee07 3a90 	vmov	s15, r3
90009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009b32:	ed97 6a03 	vldr	s12, [r7, #12]
90009b36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
90009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009b52:	e021      	b.n	90009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009b54:	697b      	ldr	r3, [r7, #20]
90009b56:	ee07 3a90 	vmov	s15, r3
90009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90009b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009b66:	4b37      	ldr	r3, [pc, #220]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009b6e:	ee07 3a90 	vmov	s15, r3
90009b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009b76:	ed97 6a03 	vldr	s12, [r7, #12]
90009b7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90009b98:	4b2a      	ldr	r3, [pc, #168]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009b9c:	0a5b      	lsrs	r3, r3, #9
90009b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009ba2:	ee07 3a90 	vmov	s15, r3
90009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009bae:	ee37 7a87 	vadd.f32	s14, s15, s14
90009bb2:	edd7 6a07 	vldr	s13, [r7, #28]
90009bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009bbe:	ee17 2a90 	vmov	r2, s15
90009bc2:	687b      	ldr	r3, [r7, #4]
90009bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
90009bc6:	4b1f      	ldr	r3, [pc, #124]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009bca:	0c1b      	lsrs	r3, r3, #16
90009bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009bd0:	ee07 3a90 	vmov	s15, r3
90009bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
90009be0:	edd7 6a07 	vldr	s13, [r7, #28]
90009be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009bec:	ee17 2a90 	vmov	r2, s15
90009bf0:	687b      	ldr	r3, [r7, #4]
90009bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90009bf4:	4b13      	ldr	r3, [pc, #76]	@ (90009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009bf8:	0e1b      	lsrs	r3, r3, #24
90009bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009bfe:	ee07 3a90 	vmov	s15, r3
90009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
90009c0e:	edd7 6a07 	vldr	s13, [r7, #28]
90009c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009c1a:	ee17 2a90 	vmov	r2, s15
90009c1e:	687b      	ldr	r3, [r7, #4]
90009c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
90009c22:	e008      	b.n	90009c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
90009c24:	687b      	ldr	r3, [r7, #4]
90009c26:	2200      	movs	r2, #0
90009c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90009c2a:	687b      	ldr	r3, [r7, #4]
90009c2c:	2200      	movs	r2, #0
90009c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009c30:	687b      	ldr	r3, [r7, #4]
90009c32:	2200      	movs	r2, #0
90009c34:	609a      	str	r2, [r3, #8]
}
90009c36:	bf00      	nop
90009c38:	3724      	adds	r7, #36	@ 0x24
90009c3a:	46bd      	mov	sp, r7
90009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009c40:	4770      	bx	lr
90009c42:	bf00      	nop
90009c44:	58024400 	.word	0x58024400
90009c48:	03d09000 	.word	0x03d09000
90009c4c:	46000000 	.word	0x46000000
90009c50:	4c742400 	.word	0x4c742400
90009c54:	4a742400 	.word	0x4a742400
90009c58:	4bbebc20 	.word	0x4bbebc20

90009c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90009c5c:	b480      	push	{r7}
90009c5e:	b089      	sub	sp, #36	@ 0x24
90009c60:	af00      	add	r7, sp, #0
90009c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009c64:	4ba1      	ldr	r3, [pc, #644]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009c68:	f003 0303 	and.w	r3, r3, #3
90009c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
90009c6e:	4b9f      	ldr	r3, [pc, #636]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009c72:	0d1b      	lsrs	r3, r3, #20
90009c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90009c7a:	4b9c      	ldr	r3, [pc, #624]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009c7e:	0a1b      	lsrs	r3, r3, #8
90009c80:	f003 0301 	and.w	r3, r3, #1
90009c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
90009c86:	4b99      	ldr	r3, [pc, #612]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90009c8a:	08db      	lsrs	r3, r3, #3
90009c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009c90:	693a      	ldr	r2, [r7, #16]
90009c92:	fb02 f303 	mul.w	r3, r2, r3
90009c96:	ee07 3a90 	vmov	s15, r3
90009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90009ca2:	697b      	ldr	r3, [r7, #20]
90009ca4:	2b00      	cmp	r3, #0
90009ca6:	f000 8111 	beq.w	90009ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90009caa:	69bb      	ldr	r3, [r7, #24]
90009cac:	2b02      	cmp	r3, #2
90009cae:	f000 8083 	beq.w	90009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90009cb2:	69bb      	ldr	r3, [r7, #24]
90009cb4:	2b02      	cmp	r3, #2
90009cb6:	f200 80a1 	bhi.w	90009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90009cba:	69bb      	ldr	r3, [r7, #24]
90009cbc:	2b00      	cmp	r3, #0
90009cbe:	d003      	beq.n	90009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009cc0:	69bb      	ldr	r3, [r7, #24]
90009cc2:	2b01      	cmp	r3, #1
90009cc4:	d056      	beq.n	90009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90009cc6:	e099      	b.n	90009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009cc8:	4b88      	ldr	r3, [pc, #544]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009cca:	681b      	ldr	r3, [r3, #0]
90009ccc:	f003 0320 	and.w	r3, r3, #32
90009cd0:	2b00      	cmp	r3, #0
90009cd2:	d02d      	beq.n	90009d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009cd4:	4b85      	ldr	r3, [pc, #532]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009cd6:	681b      	ldr	r3, [r3, #0]
90009cd8:	08db      	lsrs	r3, r3, #3
90009cda:	f003 0303 	and.w	r3, r3, #3
90009cde:	4a84      	ldr	r2, [pc, #528]	@ (90009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90009ce0:	fa22 f303 	lsr.w	r3, r2, r3
90009ce4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009ce6:	68bb      	ldr	r3, [r7, #8]
90009ce8:	ee07 3a90 	vmov	s15, r3
90009cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009cf0:	697b      	ldr	r3, [r7, #20]
90009cf2:	ee07 3a90 	vmov	s15, r3
90009cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009cfe:	4b7b      	ldr	r3, [pc, #492]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009d06:	ee07 3a90 	vmov	s15, r3
90009d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009d0e:	ed97 6a03 	vldr	s12, [r7, #12]
90009d12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009d26:	ee67 7a27 	vmul.f32	s15, s14, s15
90009d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009d2e:	e087      	b.n	90009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009d30:	697b      	ldr	r3, [r7, #20]
90009d32:	ee07 3a90 	vmov	s15, r3
90009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
90009d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009d42:	4b6a      	ldr	r3, [pc, #424]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009d4a:	ee07 3a90 	vmov	s15, r3
90009d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009d52:	ed97 6a03 	vldr	s12, [r7, #12]
90009d56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
90009d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009d72:	e065      	b.n	90009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009d74:	697b      	ldr	r3, [r7, #20]
90009d76:	ee07 3a90 	vmov	s15, r3
90009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009d86:	4b59      	ldr	r3, [pc, #356]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009d8e:	ee07 3a90 	vmov	s15, r3
90009d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009d96:	ed97 6a03 	vldr	s12, [r7, #12]
90009d9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009dae:	ee67 7a27 	vmul.f32	s15, s14, s15
90009db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009db6:	e043      	b.n	90009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009db8:	697b      	ldr	r3, [r7, #20]
90009dba:	ee07 3a90 	vmov	s15, r3
90009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90009dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009dca:	4b48      	ldr	r3, [pc, #288]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009dd2:	ee07 3a90 	vmov	s15, r3
90009dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009dda:	ed97 6a03 	vldr	s12, [r7, #12]
90009dde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009df2:	ee67 7a27 	vmul.f32	s15, s14, s15
90009df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009dfa:	e021      	b.n	90009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009dfc:	697b      	ldr	r3, [r7, #20]
90009dfe:	ee07 3a90 	vmov	s15, r3
90009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009e06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009e0e:	4b37      	ldr	r3, [pc, #220]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009e16:	ee07 3a90 	vmov	s15, r3
90009e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009e1e:	ed97 6a03 	vldr	s12, [r7, #12]
90009e22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009e36:	ee67 7a27 	vmul.f32	s15, s14, s15
90009e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90009e40:	4b2a      	ldr	r3, [pc, #168]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009e44:	0a5b      	lsrs	r3, r3, #9
90009e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009e4a:	ee07 3a90 	vmov	s15, r3
90009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009e56:	ee37 7a87 	vadd.f32	s14, s15, s14
90009e5a:	edd7 6a07 	vldr	s13, [r7, #28]
90009e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009e66:	ee17 2a90 	vmov	r2, s15
90009e6a:	687b      	ldr	r3, [r7, #4]
90009e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
90009e6e:	4b1f      	ldr	r3, [pc, #124]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009e72:	0c1b      	lsrs	r3, r3, #16
90009e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009e78:	ee07 3a90 	vmov	s15, r3
90009e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009e84:	ee37 7a87 	vadd.f32	s14, s15, s14
90009e88:	edd7 6a07 	vldr	s13, [r7, #28]
90009e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009e94:	ee17 2a90 	vmov	r2, s15
90009e98:	687b      	ldr	r3, [r7, #4]
90009e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009e9c:	4b13      	ldr	r3, [pc, #76]	@ (90009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009ea0:	0e1b      	lsrs	r3, r3, #24
90009ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009ea6:	ee07 3a90 	vmov	s15, r3
90009eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
90009eb6:	edd7 6a07 	vldr	s13, [r7, #28]
90009eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009ec2:	ee17 2a90 	vmov	r2, s15
90009ec6:	687b      	ldr	r3, [r7, #4]
90009ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90009eca:	e008      	b.n	90009ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90009ecc:	687b      	ldr	r3, [r7, #4]
90009ece:	2200      	movs	r2, #0
90009ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90009ed2:	687b      	ldr	r3, [r7, #4]
90009ed4:	2200      	movs	r2, #0
90009ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90009ed8:	687b      	ldr	r3, [r7, #4]
90009eda:	2200      	movs	r2, #0
90009edc:	609a      	str	r2, [r3, #8]
}
90009ede:	bf00      	nop
90009ee0:	3724      	adds	r7, #36	@ 0x24
90009ee2:	46bd      	mov	sp, r7
90009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ee8:	4770      	bx	lr
90009eea:	bf00      	nop
90009eec:	58024400 	.word	0x58024400
90009ef0:	03d09000 	.word	0x03d09000
90009ef4:	46000000 	.word	0x46000000
90009ef8:	4c742400 	.word	0x4c742400
90009efc:	4a742400 	.word	0x4a742400
90009f00:	4bbebc20 	.word	0x4bbebc20

90009f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90009f04:	b580      	push	{r7, lr}
90009f06:	b084      	sub	sp, #16
90009f08:	af00      	add	r7, sp, #0
90009f0a:	6078      	str	r0, [r7, #4]
90009f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009f0e:	2300      	movs	r3, #0
90009f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90009f12:	4b53      	ldr	r3, [pc, #332]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009f16:	f003 0303 	and.w	r3, r3, #3
90009f1a:	2b03      	cmp	r3, #3
90009f1c:	d101      	bne.n	90009f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90009f1e:	2301      	movs	r3, #1
90009f20:	e099      	b.n	9000a056 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90009f22:	4b4f      	ldr	r3, [pc, #316]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009f24:	681b      	ldr	r3, [r3, #0]
90009f26:	4a4e      	ldr	r2, [pc, #312]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009f28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009f2e:	f7f9 fc23 	bl	90003778 <HAL_GetTick>
90009f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009f34:	e008      	b.n	90009f48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90009f36:	f7f9 fc1f 	bl	90003778 <HAL_GetTick>
90009f3a:	4602      	mov	r2, r0
90009f3c:	68bb      	ldr	r3, [r7, #8]
90009f3e:	1ad3      	subs	r3, r2, r3
90009f40:	2b02      	cmp	r3, #2
90009f42:	d901      	bls.n	90009f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90009f44:	2303      	movs	r3, #3
90009f46:	e086      	b.n	9000a056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009f48:	4b45      	ldr	r3, [pc, #276]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009f4a:	681b      	ldr	r3, [r3, #0]
90009f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009f50:	2b00      	cmp	r3, #0
90009f52:	d1f0      	bne.n	90009f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90009f54:	4b42      	ldr	r3, [pc, #264]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009f58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009f5c:	687b      	ldr	r3, [r7, #4]
90009f5e:	681b      	ldr	r3, [r3, #0]
90009f60:	031b      	lsls	r3, r3, #12
90009f62:	493f      	ldr	r1, [pc, #252]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009f64:	4313      	orrs	r3, r2
90009f66:	628b      	str	r3, [r1, #40]	@ 0x28
90009f68:	687b      	ldr	r3, [r7, #4]
90009f6a:	685b      	ldr	r3, [r3, #4]
90009f6c:	3b01      	subs	r3, #1
90009f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009f72:	687b      	ldr	r3, [r7, #4]
90009f74:	689b      	ldr	r3, [r3, #8]
90009f76:	3b01      	subs	r3, #1
90009f78:	025b      	lsls	r3, r3, #9
90009f7a:	b29b      	uxth	r3, r3
90009f7c:	431a      	orrs	r2, r3
90009f7e:	687b      	ldr	r3, [r7, #4]
90009f80:	68db      	ldr	r3, [r3, #12]
90009f82:	3b01      	subs	r3, #1
90009f84:	041b      	lsls	r3, r3, #16
90009f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009f8a:	431a      	orrs	r2, r3
90009f8c:	687b      	ldr	r3, [r7, #4]
90009f8e:	691b      	ldr	r3, [r3, #16]
90009f90:	3b01      	subs	r3, #1
90009f92:	061b      	lsls	r3, r3, #24
90009f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009f98:	4931      	ldr	r1, [pc, #196]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009f9a:	4313      	orrs	r3, r2
90009f9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009f9e:	4b30      	ldr	r3, [pc, #192]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
90009fa6:	687b      	ldr	r3, [r7, #4]
90009fa8:	695b      	ldr	r3, [r3, #20]
90009faa:	492d      	ldr	r1, [pc, #180]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fac:	4313      	orrs	r3, r2
90009fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009fb0:	4b2b      	ldr	r3, [pc, #172]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009fb4:	f023 0220 	bic.w	r2, r3, #32
90009fb8:	687b      	ldr	r3, [r7, #4]
90009fba:	699b      	ldr	r3, [r3, #24]
90009fbc:	4928      	ldr	r1, [pc, #160]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fbe:	4313      	orrs	r3, r2
90009fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90009fc2:	4b27      	ldr	r3, [pc, #156]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009fc6:	4a26      	ldr	r2, [pc, #152]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fc8:	f023 0310 	bic.w	r3, r3, #16
90009fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90009fce:	4b24      	ldr	r3, [pc, #144]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
90009fd2:	4b24      	ldr	r3, [pc, #144]	@ (9000a064 <RCCEx_PLL2_Config+0x160>)
90009fd4:	4013      	ands	r3, r2
90009fd6:	687a      	ldr	r2, [r7, #4]
90009fd8:	69d2      	ldr	r2, [r2, #28]
90009fda:	00d2      	lsls	r2, r2, #3
90009fdc:	4920      	ldr	r1, [pc, #128]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fde:	4313      	orrs	r3, r2
90009fe0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90009fe2:	4b1f      	ldr	r3, [pc, #124]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009fe6:	4a1e      	ldr	r2, [pc, #120]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009fe8:	f043 0310 	orr.w	r3, r3, #16
90009fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009fee:	683b      	ldr	r3, [r7, #0]
90009ff0:	2b00      	cmp	r3, #0
90009ff2:	d106      	bne.n	9000a002 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90009ff4:	4b1a      	ldr	r3, [pc, #104]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009ff8:	4a19      	ldr	r2, [pc, #100]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
90009ffa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
90009ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a000:	e00f      	b.n	9000a022 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000a002:	683b      	ldr	r3, [r7, #0]
9000a004:	2b01      	cmp	r3, #1
9000a006:	d106      	bne.n	9000a016 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000a008:	4b15      	ldr	r3, [pc, #84]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
9000a00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a00c:	4a14      	ldr	r2, [pc, #80]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
9000a00e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000a012:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a014:	e005      	b.n	9000a022 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000a016:	4b12      	ldr	r3, [pc, #72]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
9000a018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a01a:	4a11      	ldr	r2, [pc, #68]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
9000a01c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
9000a020:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000a022:	4b0f      	ldr	r3, [pc, #60]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
9000a024:	681b      	ldr	r3, [r3, #0]
9000a026:	4a0e      	ldr	r2, [pc, #56]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
9000a028:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
9000a02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a02e:	f7f9 fba3 	bl	90003778 <HAL_GetTick>
9000a032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a034:	e008      	b.n	9000a048 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000a036:	f7f9 fb9f 	bl	90003778 <HAL_GetTick>
9000a03a:	4602      	mov	r2, r0
9000a03c:	68bb      	ldr	r3, [r7, #8]
9000a03e:	1ad3      	subs	r3, r2, r3
9000a040:	2b02      	cmp	r3, #2
9000a042:	d901      	bls.n	9000a048 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000a044:	2303      	movs	r3, #3
9000a046:	e006      	b.n	9000a056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a048:	4b05      	ldr	r3, [pc, #20]	@ (9000a060 <RCCEx_PLL2_Config+0x15c>)
9000a04a:	681b      	ldr	r3, [r3, #0]
9000a04c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000a050:	2b00      	cmp	r3, #0
9000a052:	d0f0      	beq.n	9000a036 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000a054:	7bfb      	ldrb	r3, [r7, #15]
}
9000a056:	4618      	mov	r0, r3
9000a058:	3710      	adds	r7, #16
9000a05a:	46bd      	mov	sp, r7
9000a05c:	bd80      	pop	{r7, pc}
9000a05e:	bf00      	nop
9000a060:	58024400 	.word	0x58024400
9000a064:	ffff0007 	.word	0xffff0007

9000a068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000a068:	b580      	push	{r7, lr}
9000a06a:	b084      	sub	sp, #16
9000a06c:	af00      	add	r7, sp, #0
9000a06e:	6078      	str	r0, [r7, #4]
9000a070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000a072:	2300      	movs	r3, #0
9000a074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000a076:	4b53      	ldr	r3, [pc, #332]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a07a:	f003 0303 	and.w	r3, r3, #3
9000a07e:	2b03      	cmp	r3, #3
9000a080:	d101      	bne.n	9000a086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000a082:	2301      	movs	r3, #1
9000a084:	e099      	b.n	9000a1ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000a086:	4b4f      	ldr	r3, [pc, #316]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a088:	681b      	ldr	r3, [r3, #0]
9000a08a:	4a4e      	ldr	r2, [pc, #312]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a08c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
9000a090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a092:	f7f9 fb71 	bl	90003778 <HAL_GetTick>
9000a096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a098:	e008      	b.n	9000a0ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000a09a:	f7f9 fb6d 	bl	90003778 <HAL_GetTick>
9000a09e:	4602      	mov	r2, r0
9000a0a0:	68bb      	ldr	r3, [r7, #8]
9000a0a2:	1ad3      	subs	r3, r2, r3
9000a0a4:	2b02      	cmp	r3, #2
9000a0a6:	d901      	bls.n	9000a0ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000a0a8:	2303      	movs	r3, #3
9000a0aa:	e086      	b.n	9000a1ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a0ac:	4b45      	ldr	r3, [pc, #276]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a0ae:	681b      	ldr	r3, [r3, #0]
9000a0b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000a0b4:	2b00      	cmp	r3, #0
9000a0b6:	d1f0      	bne.n	9000a09a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000a0b8:	4b42      	ldr	r3, [pc, #264]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a0bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
9000a0c0:	687b      	ldr	r3, [r7, #4]
9000a0c2:	681b      	ldr	r3, [r3, #0]
9000a0c4:	051b      	lsls	r3, r3, #20
9000a0c6:	493f      	ldr	r1, [pc, #252]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a0c8:	4313      	orrs	r3, r2
9000a0ca:	628b      	str	r3, [r1, #40]	@ 0x28
9000a0cc:	687b      	ldr	r3, [r7, #4]
9000a0ce:	685b      	ldr	r3, [r3, #4]
9000a0d0:	3b01      	subs	r3, #1
9000a0d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000a0d6:	687b      	ldr	r3, [r7, #4]
9000a0d8:	689b      	ldr	r3, [r3, #8]
9000a0da:	3b01      	subs	r3, #1
9000a0dc:	025b      	lsls	r3, r3, #9
9000a0de:	b29b      	uxth	r3, r3
9000a0e0:	431a      	orrs	r2, r3
9000a0e2:	687b      	ldr	r3, [r7, #4]
9000a0e4:	68db      	ldr	r3, [r3, #12]
9000a0e6:	3b01      	subs	r3, #1
9000a0e8:	041b      	lsls	r3, r3, #16
9000a0ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000a0ee:	431a      	orrs	r2, r3
9000a0f0:	687b      	ldr	r3, [r7, #4]
9000a0f2:	691b      	ldr	r3, [r3, #16]
9000a0f4:	3b01      	subs	r3, #1
9000a0f6:	061b      	lsls	r3, r3, #24
9000a0f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000a0fc:	4931      	ldr	r1, [pc, #196]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a0fe:	4313      	orrs	r3, r2
9000a100:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000a102:	4b30      	ldr	r3, [pc, #192]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a106:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
9000a10a:	687b      	ldr	r3, [r7, #4]
9000a10c:	695b      	ldr	r3, [r3, #20]
9000a10e:	492d      	ldr	r1, [pc, #180]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a110:	4313      	orrs	r3, r2
9000a112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000a114:	4b2b      	ldr	r3, [pc, #172]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a118:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
9000a11c:	687b      	ldr	r3, [r7, #4]
9000a11e:	699b      	ldr	r3, [r3, #24]
9000a120:	4928      	ldr	r1, [pc, #160]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a122:	4313      	orrs	r3, r2
9000a124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000a126:	4b27      	ldr	r3, [pc, #156]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a12a:	4a26      	ldr	r2, [pc, #152]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a12c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
9000a130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000a132:	4b24      	ldr	r3, [pc, #144]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a136:	4b24      	ldr	r3, [pc, #144]	@ (9000a1c8 <RCCEx_PLL3_Config+0x160>)
9000a138:	4013      	ands	r3, r2
9000a13a:	687a      	ldr	r2, [r7, #4]
9000a13c:	69d2      	ldr	r2, [r2, #28]
9000a13e:	00d2      	lsls	r2, r2, #3
9000a140:	4920      	ldr	r1, [pc, #128]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a142:	4313      	orrs	r3, r2
9000a144:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000a146:	4b1f      	ldr	r3, [pc, #124]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a14a:	4a1e      	ldr	r2, [pc, #120]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a14c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000a150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000a152:	683b      	ldr	r3, [r7, #0]
9000a154:	2b00      	cmp	r3, #0
9000a156:	d106      	bne.n	9000a166 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000a158:	4b1a      	ldr	r3, [pc, #104]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a15c:	4a19      	ldr	r2, [pc, #100]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a15e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000a162:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a164:	e00f      	b.n	9000a186 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000a166:	683b      	ldr	r3, [r7, #0]
9000a168:	2b01      	cmp	r3, #1
9000a16a:	d106      	bne.n	9000a17a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000a16c:	4b15      	ldr	r3, [pc, #84]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a170:	4a14      	ldr	r2, [pc, #80]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a172:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
9000a176:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a178:	e005      	b.n	9000a186 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000a17a:	4b12      	ldr	r3, [pc, #72]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a17e:	4a11      	ldr	r2, [pc, #68]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a180:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000a184:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000a186:	4b0f      	ldr	r3, [pc, #60]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a188:	681b      	ldr	r3, [r3, #0]
9000a18a:	4a0e      	ldr	r2, [pc, #56]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a18c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
9000a190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a192:	f7f9 faf1 	bl	90003778 <HAL_GetTick>
9000a196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a198:	e008      	b.n	9000a1ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000a19a:	f7f9 faed 	bl	90003778 <HAL_GetTick>
9000a19e:	4602      	mov	r2, r0
9000a1a0:	68bb      	ldr	r3, [r7, #8]
9000a1a2:	1ad3      	subs	r3, r2, r3
9000a1a4:	2b02      	cmp	r3, #2
9000a1a6:	d901      	bls.n	9000a1ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000a1a8:	2303      	movs	r3, #3
9000a1aa:	e006      	b.n	9000a1ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a1ac:	4b05      	ldr	r3, [pc, #20]	@ (9000a1c4 <RCCEx_PLL3_Config+0x15c>)
9000a1ae:	681b      	ldr	r3, [r3, #0]
9000a1b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000a1b4:	2b00      	cmp	r3, #0
9000a1b6:	d0f0      	beq.n	9000a19a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
9000a1ba:	4618      	mov	r0, r3
9000a1bc:	3710      	adds	r7, #16
9000a1be:	46bd      	mov	sp, r7
9000a1c0:	bd80      	pop	{r7, pc}
9000a1c2:	bf00      	nop
9000a1c4:	58024400 	.word	0x58024400
9000a1c8:	ffff0007 	.word	0xffff0007

9000a1cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
9000a1cc:	b580      	push	{r7, lr}
9000a1ce:	b082      	sub	sp, #8
9000a1d0:	af00      	add	r7, sp, #0
9000a1d2:	6078      	str	r0, [r7, #4]
9000a1d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000a1d6:	687b      	ldr	r3, [r7, #4]
9000a1d8:	2b00      	cmp	r3, #0
9000a1da:	d101      	bne.n	9000a1e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
9000a1dc:	2301      	movs	r3, #1
9000a1de:	e02b      	b.n	9000a238 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000a1e0:	687b      	ldr	r3, [r7, #4]
9000a1e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a1e6:	b2db      	uxtb	r3, r3
9000a1e8:	2b00      	cmp	r3, #0
9000a1ea:	d106      	bne.n	9000a1fa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
9000a1ec:	687b      	ldr	r3, [r7, #4]
9000a1ee:	2200      	movs	r2, #0
9000a1f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
9000a1f4:	6878      	ldr	r0, [r7, #4]
9000a1f6:	f000 f825 	bl	9000a244 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000a1fa:	687b      	ldr	r3, [r7, #4]
9000a1fc:	2202      	movs	r2, #2
9000a1fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000a202:	687b      	ldr	r3, [r7, #4]
9000a204:	681a      	ldr	r2, [r3, #0]
9000a206:	687b      	ldr	r3, [r7, #4]
9000a208:	3304      	adds	r3, #4
9000a20a:	4619      	mov	r1, r3
9000a20c:	4610      	mov	r0, r2
9000a20e:	f001 fb51 	bl	9000b8b4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000a212:	687b      	ldr	r3, [r7, #4]
9000a214:	6818      	ldr	r0, [r3, #0]
9000a216:	687b      	ldr	r3, [r7, #4]
9000a218:	685b      	ldr	r3, [r3, #4]
9000a21a:	461a      	mov	r2, r3
9000a21c:	6839      	ldr	r1, [r7, #0]
9000a21e:	f001 fba5 	bl	9000b96c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000a222:	4b07      	ldr	r3, [pc, #28]	@ (9000a240 <HAL_SDRAM_Init+0x74>)
9000a224:	681b      	ldr	r3, [r3, #0]
9000a226:	4a06      	ldr	r2, [pc, #24]	@ (9000a240 <HAL_SDRAM_Init+0x74>)
9000a228:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a22c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000a22e:	687b      	ldr	r3, [r7, #4]
9000a230:	2201      	movs	r2, #1
9000a232:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000a236:	2300      	movs	r3, #0
}
9000a238:	4618      	mov	r0, r3
9000a23a:	3708      	adds	r7, #8
9000a23c:	46bd      	mov	sp, r7
9000a23e:	bd80      	pop	{r7, pc}
9000a240:	52004000 	.word	0x52004000

9000a244 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
9000a244:	b480      	push	{r7}
9000a246:	b083      	sub	sp, #12
9000a248:	af00      	add	r7, sp, #0
9000a24a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
9000a24c:	bf00      	nop
9000a24e:	370c      	adds	r7, #12
9000a250:	46bd      	mov	sp, r7
9000a252:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a256:	4770      	bx	lr

9000a258 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000a258:	b580      	push	{r7, lr}
9000a25a:	b086      	sub	sp, #24
9000a25c:	af00      	add	r7, sp, #0
9000a25e:	60f8      	str	r0, [r7, #12]
9000a260:	60b9      	str	r1, [r7, #8]
9000a262:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000a264:	68fb      	ldr	r3, [r7, #12]
9000a266:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a26a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000a26c:	7dfb      	ldrb	r3, [r7, #23]
9000a26e:	2b02      	cmp	r3, #2
9000a270:	d101      	bne.n	9000a276 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
9000a272:	2302      	movs	r3, #2
9000a274:	e021      	b.n	9000a2ba <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000a276:	7dfb      	ldrb	r3, [r7, #23]
9000a278:	2b01      	cmp	r3, #1
9000a27a:	d002      	beq.n	9000a282 <HAL_SDRAM_SendCommand+0x2a>
9000a27c:	7dfb      	ldrb	r3, [r7, #23]
9000a27e:	2b05      	cmp	r3, #5
9000a280:	d118      	bne.n	9000a2b4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000a282:	68fb      	ldr	r3, [r7, #12]
9000a284:	2202      	movs	r2, #2
9000a286:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000a28a:	68fb      	ldr	r3, [r7, #12]
9000a28c:	681b      	ldr	r3, [r3, #0]
9000a28e:	687a      	ldr	r2, [r7, #4]
9000a290:	68b9      	ldr	r1, [r7, #8]
9000a292:	4618      	mov	r0, r3
9000a294:	f001 fbd4 	bl	9000ba40 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000a298:	68bb      	ldr	r3, [r7, #8]
9000a29a:	681b      	ldr	r3, [r3, #0]
9000a29c:	2b02      	cmp	r3, #2
9000a29e:	d104      	bne.n	9000a2aa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000a2a0:	68fb      	ldr	r3, [r7, #12]
9000a2a2:	2205      	movs	r2, #5
9000a2a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000a2a8:	e006      	b.n	9000a2b8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000a2aa:	68fb      	ldr	r3, [r7, #12]
9000a2ac:	2201      	movs	r2, #1
9000a2ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000a2b2:	e001      	b.n	9000a2b8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
9000a2b4:	2301      	movs	r3, #1
9000a2b6:	e000      	b.n	9000a2ba <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
9000a2b8:	2300      	movs	r3, #0
}
9000a2ba:	4618      	mov	r0, r3
9000a2bc:	3718      	adds	r7, #24
9000a2be:	46bd      	mov	sp, r7
9000a2c0:	bd80      	pop	{r7, pc}

9000a2c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000a2c2:	b580      	push	{r7, lr}
9000a2c4:	b082      	sub	sp, #8
9000a2c6:	af00      	add	r7, sp, #0
9000a2c8:	6078      	str	r0, [r7, #4]
9000a2ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000a2cc:	687b      	ldr	r3, [r7, #4]
9000a2ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a2d2:	b2db      	uxtb	r3, r3
9000a2d4:	2b02      	cmp	r3, #2
9000a2d6:	d101      	bne.n	9000a2dc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
9000a2d8:	2302      	movs	r3, #2
9000a2da:	e016      	b.n	9000a30a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000a2dc:	687b      	ldr	r3, [r7, #4]
9000a2de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a2e2:	b2db      	uxtb	r3, r3
9000a2e4:	2b01      	cmp	r3, #1
9000a2e6:	d10f      	bne.n	9000a308 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000a2e8:	687b      	ldr	r3, [r7, #4]
9000a2ea:	2202      	movs	r2, #2
9000a2ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000a2f0:	687b      	ldr	r3, [r7, #4]
9000a2f2:	681b      	ldr	r3, [r3, #0]
9000a2f4:	6839      	ldr	r1, [r7, #0]
9000a2f6:	4618      	mov	r0, r3
9000a2f8:	f001 fbc6 	bl	9000ba88 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
9000a2fc:	687b      	ldr	r3, [r7, #4]
9000a2fe:	2201      	movs	r2, #1
9000a300:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
9000a304:	2300      	movs	r3, #0
9000a306:	e000      	b.n	9000a30a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
9000a308:	2301      	movs	r3, #1
}
9000a30a:	4618      	mov	r0, r3
9000a30c:	3708      	adds	r7, #8
9000a30e:	46bd      	mov	sp, r7
9000a310:	bd80      	pop	{r7, pc}

9000a312 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
9000a312:	b580      	push	{r7, lr}
9000a314:	b082      	sub	sp, #8
9000a316:	af00      	add	r7, sp, #0
9000a318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000a31a:	687b      	ldr	r3, [r7, #4]
9000a31c:	2b00      	cmp	r3, #0
9000a31e:	d101      	bne.n	9000a324 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
9000a320:	2301      	movs	r3, #1
9000a322:	e049      	b.n	9000a3b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
9000a324:	687b      	ldr	r3, [r7, #4]
9000a326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
9000a32a:	b2db      	uxtb	r3, r3
9000a32c:	2b00      	cmp	r3, #0
9000a32e:	d106      	bne.n	9000a33e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
9000a330:	687b      	ldr	r3, [r7, #4]
9000a332:	2200      	movs	r2, #0
9000a334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
9000a338:	6878      	ldr	r0, [r7, #4]
9000a33a:	f000 f89d 	bl	9000a478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000a33e:	687b      	ldr	r3, [r7, #4]
9000a340:	2202      	movs	r2, #2
9000a342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000a346:	687b      	ldr	r3, [r7, #4]
9000a348:	681a      	ldr	r2, [r3, #0]
9000a34a:	687b      	ldr	r3, [r7, #4]
9000a34c:	3304      	adds	r3, #4
9000a34e:	4619      	mov	r1, r3
9000a350:	4610      	mov	r0, r2
9000a352:	f000 f8a5 	bl	9000a4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000a356:	687b      	ldr	r3, [r7, #4]
9000a358:	2201      	movs	r2, #1
9000a35a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000a35e:	687b      	ldr	r3, [r7, #4]
9000a360:	2201      	movs	r2, #1
9000a362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000a366:	687b      	ldr	r3, [r7, #4]
9000a368:	2201      	movs	r2, #1
9000a36a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000a36e:	687b      	ldr	r3, [r7, #4]
9000a370:	2201      	movs	r2, #1
9000a372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000a376:	687b      	ldr	r3, [r7, #4]
9000a378:	2201      	movs	r2, #1
9000a37a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000a37e:	687b      	ldr	r3, [r7, #4]
9000a380:	2201      	movs	r2, #1
9000a382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000a386:	687b      	ldr	r3, [r7, #4]
9000a388:	2201      	movs	r2, #1
9000a38a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000a38e:	687b      	ldr	r3, [r7, #4]
9000a390:	2201      	movs	r2, #1
9000a392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000a396:	687b      	ldr	r3, [r7, #4]
9000a398:	2201      	movs	r2, #1
9000a39a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000a39e:	687b      	ldr	r3, [r7, #4]
9000a3a0:	2201      	movs	r2, #1
9000a3a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000a3a6:	687b      	ldr	r3, [r7, #4]
9000a3a8:	2201      	movs	r2, #1
9000a3aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
9000a3ae:	687b      	ldr	r3, [r7, #4]
9000a3b0:	2201      	movs	r2, #1
9000a3b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000a3b6:	2300      	movs	r3, #0
}
9000a3b8:	4618      	mov	r0, r3
9000a3ba:	3708      	adds	r7, #8
9000a3bc:	46bd      	mov	sp, r7
9000a3be:	bd80      	pop	{r7, pc}

9000a3c0 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
9000a3c0:	b580      	push	{r7, lr}
9000a3c2:	b082      	sub	sp, #8
9000a3c4:	af00      	add	r7, sp, #0
9000a3c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000a3c8:	687b      	ldr	r3, [r7, #4]
9000a3ca:	2202      	movs	r2, #2
9000a3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
9000a3d0:	687b      	ldr	r3, [r7, #4]
9000a3d2:	681b      	ldr	r3, [r3, #0]
9000a3d4:	6a1a      	ldr	r2, [r3, #32]
9000a3d6:	f241 1311 	movw	r3, #4369	@ 0x1111
9000a3da:	4013      	ands	r3, r2
9000a3dc:	2b00      	cmp	r3, #0
9000a3de:	d10f      	bne.n	9000a400 <HAL_TIM_PWM_DeInit+0x40>
9000a3e0:	687b      	ldr	r3, [r7, #4]
9000a3e2:	681b      	ldr	r3, [r3, #0]
9000a3e4:	6a1a      	ldr	r2, [r3, #32]
9000a3e6:	f240 4344 	movw	r3, #1092	@ 0x444
9000a3ea:	4013      	ands	r3, r2
9000a3ec:	2b00      	cmp	r3, #0
9000a3ee:	d107      	bne.n	9000a400 <HAL_TIM_PWM_DeInit+0x40>
9000a3f0:	687b      	ldr	r3, [r7, #4]
9000a3f2:	681b      	ldr	r3, [r3, #0]
9000a3f4:	681a      	ldr	r2, [r3, #0]
9000a3f6:	687b      	ldr	r3, [r7, #4]
9000a3f8:	681b      	ldr	r3, [r3, #0]
9000a3fa:	f022 0201 	bic.w	r2, r2, #1
9000a3fe:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
9000a400:	6878      	ldr	r0, [r7, #4]
9000a402:	f000 f843 	bl	9000a48c <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
9000a406:	687b      	ldr	r3, [r7, #4]
9000a408:	2200      	movs	r2, #0
9000a40a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000a40e:	687b      	ldr	r3, [r7, #4]
9000a410:	2200      	movs	r2, #0
9000a412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000a416:	687b      	ldr	r3, [r7, #4]
9000a418:	2200      	movs	r2, #0
9000a41a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000a41e:	687b      	ldr	r3, [r7, #4]
9000a420:	2200      	movs	r2, #0
9000a422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000a426:	687b      	ldr	r3, [r7, #4]
9000a428:	2200      	movs	r2, #0
9000a42a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000a42e:	687b      	ldr	r3, [r7, #4]
9000a430:	2200      	movs	r2, #0
9000a432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000a436:	687b      	ldr	r3, [r7, #4]
9000a438:	2200      	movs	r2, #0
9000a43a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000a43e:	687b      	ldr	r3, [r7, #4]
9000a440:	2200      	movs	r2, #0
9000a442:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000a446:	687b      	ldr	r3, [r7, #4]
9000a448:	2200      	movs	r2, #0
9000a44a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000a44e:	687b      	ldr	r3, [r7, #4]
9000a450:	2200      	movs	r2, #0
9000a452:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000a456:	687b      	ldr	r3, [r7, #4]
9000a458:	2200      	movs	r2, #0
9000a45a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
9000a45e:	687b      	ldr	r3, [r7, #4]
9000a460:	2200      	movs	r2, #0
9000a462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
9000a466:	687b      	ldr	r3, [r7, #4]
9000a468:	2200      	movs	r2, #0
9000a46a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
9000a46e:	2300      	movs	r3, #0
}
9000a470:	4618      	mov	r0, r3
9000a472:	3708      	adds	r7, #8
9000a474:	46bd      	mov	sp, r7
9000a476:	bd80      	pop	{r7, pc}

9000a478 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000a478:	b480      	push	{r7}
9000a47a:	b083      	sub	sp, #12
9000a47c:	af00      	add	r7, sp, #0
9000a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
9000a480:	bf00      	nop
9000a482:	370c      	adds	r7, #12
9000a484:	46bd      	mov	sp, r7
9000a486:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a48a:	4770      	bx	lr

9000a48c <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
9000a48c:	b480      	push	{r7}
9000a48e:	b083      	sub	sp, #12
9000a490:	af00      	add	r7, sp, #0
9000a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
9000a494:	bf00      	nop
9000a496:	370c      	adds	r7, #12
9000a498:	46bd      	mov	sp, r7
9000a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a49e:	4770      	bx	lr

9000a4a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
9000a4a0:	b480      	push	{r7}
9000a4a2:	b085      	sub	sp, #20
9000a4a4:	af00      	add	r7, sp, #0
9000a4a6:	6078      	str	r0, [r7, #4]
9000a4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000a4aa:	687b      	ldr	r3, [r7, #4]
9000a4ac:	681b      	ldr	r3, [r3, #0]
9000a4ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000a4b0:	687b      	ldr	r3, [r7, #4]
9000a4b2:	4a43      	ldr	r2, [pc, #268]	@ (9000a5c0 <TIM_Base_SetConfig+0x120>)
9000a4b4:	4293      	cmp	r3, r2
9000a4b6:	d013      	beq.n	9000a4e0 <TIM_Base_SetConfig+0x40>
9000a4b8:	687b      	ldr	r3, [r7, #4]
9000a4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a4be:	d00f      	beq.n	9000a4e0 <TIM_Base_SetConfig+0x40>
9000a4c0:	687b      	ldr	r3, [r7, #4]
9000a4c2:	4a40      	ldr	r2, [pc, #256]	@ (9000a5c4 <TIM_Base_SetConfig+0x124>)
9000a4c4:	4293      	cmp	r3, r2
9000a4c6:	d00b      	beq.n	9000a4e0 <TIM_Base_SetConfig+0x40>
9000a4c8:	687b      	ldr	r3, [r7, #4]
9000a4ca:	4a3f      	ldr	r2, [pc, #252]	@ (9000a5c8 <TIM_Base_SetConfig+0x128>)
9000a4cc:	4293      	cmp	r3, r2
9000a4ce:	d007      	beq.n	9000a4e0 <TIM_Base_SetConfig+0x40>
9000a4d0:	687b      	ldr	r3, [r7, #4]
9000a4d2:	4a3e      	ldr	r2, [pc, #248]	@ (9000a5cc <TIM_Base_SetConfig+0x12c>)
9000a4d4:	4293      	cmp	r3, r2
9000a4d6:	d003      	beq.n	9000a4e0 <TIM_Base_SetConfig+0x40>
9000a4d8:	687b      	ldr	r3, [r7, #4]
9000a4da:	4a3d      	ldr	r2, [pc, #244]	@ (9000a5d0 <TIM_Base_SetConfig+0x130>)
9000a4dc:	4293      	cmp	r3, r2
9000a4de:	d108      	bne.n	9000a4f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000a4e0:	68fb      	ldr	r3, [r7, #12]
9000a4e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000a4e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
9000a4e8:	683b      	ldr	r3, [r7, #0]
9000a4ea:	685b      	ldr	r3, [r3, #4]
9000a4ec:	68fa      	ldr	r2, [r7, #12]
9000a4ee:	4313      	orrs	r3, r2
9000a4f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000a4f2:	687b      	ldr	r3, [r7, #4]
9000a4f4:	4a32      	ldr	r2, [pc, #200]	@ (9000a5c0 <TIM_Base_SetConfig+0x120>)
9000a4f6:	4293      	cmp	r3, r2
9000a4f8:	d01f      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a4fa:	687b      	ldr	r3, [r7, #4]
9000a4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a500:	d01b      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a502:	687b      	ldr	r3, [r7, #4]
9000a504:	4a2f      	ldr	r2, [pc, #188]	@ (9000a5c4 <TIM_Base_SetConfig+0x124>)
9000a506:	4293      	cmp	r3, r2
9000a508:	d017      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a50a:	687b      	ldr	r3, [r7, #4]
9000a50c:	4a2e      	ldr	r2, [pc, #184]	@ (9000a5c8 <TIM_Base_SetConfig+0x128>)
9000a50e:	4293      	cmp	r3, r2
9000a510:	d013      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a512:	687b      	ldr	r3, [r7, #4]
9000a514:	4a2d      	ldr	r2, [pc, #180]	@ (9000a5cc <TIM_Base_SetConfig+0x12c>)
9000a516:	4293      	cmp	r3, r2
9000a518:	d00f      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a51a:	687b      	ldr	r3, [r7, #4]
9000a51c:	4a2c      	ldr	r2, [pc, #176]	@ (9000a5d0 <TIM_Base_SetConfig+0x130>)
9000a51e:	4293      	cmp	r3, r2
9000a520:	d00b      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a522:	687b      	ldr	r3, [r7, #4]
9000a524:	4a2b      	ldr	r2, [pc, #172]	@ (9000a5d4 <TIM_Base_SetConfig+0x134>)
9000a526:	4293      	cmp	r3, r2
9000a528:	d007      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a52a:	687b      	ldr	r3, [r7, #4]
9000a52c:	4a2a      	ldr	r2, [pc, #168]	@ (9000a5d8 <TIM_Base_SetConfig+0x138>)
9000a52e:	4293      	cmp	r3, r2
9000a530:	d003      	beq.n	9000a53a <TIM_Base_SetConfig+0x9a>
9000a532:	687b      	ldr	r3, [r7, #4]
9000a534:	4a29      	ldr	r2, [pc, #164]	@ (9000a5dc <TIM_Base_SetConfig+0x13c>)
9000a536:	4293      	cmp	r3, r2
9000a538:	d108      	bne.n	9000a54c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000a53a:	68fb      	ldr	r3, [r7, #12]
9000a53c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000a540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000a542:	683b      	ldr	r3, [r7, #0]
9000a544:	68db      	ldr	r3, [r3, #12]
9000a546:	68fa      	ldr	r2, [r7, #12]
9000a548:	4313      	orrs	r3, r2
9000a54a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000a54c:	68fb      	ldr	r3, [r7, #12]
9000a54e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
9000a552:	683b      	ldr	r3, [r7, #0]
9000a554:	695b      	ldr	r3, [r3, #20]
9000a556:	4313      	orrs	r3, r2
9000a558:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000a55a:	683b      	ldr	r3, [r7, #0]
9000a55c:	689a      	ldr	r2, [r3, #8]
9000a55e:	687b      	ldr	r3, [r7, #4]
9000a560:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000a562:	683b      	ldr	r3, [r7, #0]
9000a564:	681a      	ldr	r2, [r3, #0]
9000a566:	687b      	ldr	r3, [r7, #4]
9000a568:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000a56a:	687b      	ldr	r3, [r7, #4]
9000a56c:	4a14      	ldr	r2, [pc, #80]	@ (9000a5c0 <TIM_Base_SetConfig+0x120>)
9000a56e:	4293      	cmp	r3, r2
9000a570:	d00f      	beq.n	9000a592 <TIM_Base_SetConfig+0xf2>
9000a572:	687b      	ldr	r3, [r7, #4]
9000a574:	4a16      	ldr	r2, [pc, #88]	@ (9000a5d0 <TIM_Base_SetConfig+0x130>)
9000a576:	4293      	cmp	r3, r2
9000a578:	d00b      	beq.n	9000a592 <TIM_Base_SetConfig+0xf2>
9000a57a:	687b      	ldr	r3, [r7, #4]
9000a57c:	4a15      	ldr	r2, [pc, #84]	@ (9000a5d4 <TIM_Base_SetConfig+0x134>)
9000a57e:	4293      	cmp	r3, r2
9000a580:	d007      	beq.n	9000a592 <TIM_Base_SetConfig+0xf2>
9000a582:	687b      	ldr	r3, [r7, #4]
9000a584:	4a14      	ldr	r2, [pc, #80]	@ (9000a5d8 <TIM_Base_SetConfig+0x138>)
9000a586:	4293      	cmp	r3, r2
9000a588:	d003      	beq.n	9000a592 <TIM_Base_SetConfig+0xf2>
9000a58a:	687b      	ldr	r3, [r7, #4]
9000a58c:	4a13      	ldr	r2, [pc, #76]	@ (9000a5dc <TIM_Base_SetConfig+0x13c>)
9000a58e:	4293      	cmp	r3, r2
9000a590:	d103      	bne.n	9000a59a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000a592:	683b      	ldr	r3, [r7, #0]
9000a594:	691a      	ldr	r2, [r3, #16]
9000a596:	687b      	ldr	r3, [r7, #4]
9000a598:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
9000a59a:	687b      	ldr	r3, [r7, #4]
9000a59c:	681b      	ldr	r3, [r3, #0]
9000a59e:	f043 0204 	orr.w	r2, r3, #4
9000a5a2:	687b      	ldr	r3, [r7, #4]
9000a5a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000a5a6:	687b      	ldr	r3, [r7, #4]
9000a5a8:	2201      	movs	r2, #1
9000a5aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
9000a5ac:	687b      	ldr	r3, [r7, #4]
9000a5ae:	68fa      	ldr	r2, [r7, #12]
9000a5b0:	601a      	str	r2, [r3, #0]
}
9000a5b2:	bf00      	nop
9000a5b4:	3714      	adds	r7, #20
9000a5b6:	46bd      	mov	sp, r7
9000a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a5bc:	4770      	bx	lr
9000a5be:	bf00      	nop
9000a5c0:	40010000 	.word	0x40010000
9000a5c4:	40000400 	.word	0x40000400
9000a5c8:	40000800 	.word	0x40000800
9000a5cc:	40000c00 	.word	0x40000c00
9000a5d0:	40010400 	.word	0x40010400
9000a5d4:	40014000 	.word	0x40014000
9000a5d8:	40014400 	.word	0x40014400
9000a5dc:	40014800 	.word	0x40014800

9000a5e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
9000a5e0:	b580      	push	{r7, lr}
9000a5e2:	b082      	sub	sp, #8
9000a5e4:	af00      	add	r7, sp, #0
9000a5e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
9000a5e8:	687b      	ldr	r3, [r7, #4]
9000a5ea:	2b00      	cmp	r3, #0
9000a5ec:	d101      	bne.n	9000a5f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
9000a5ee:	2301      	movs	r3, #1
9000a5f0:	e042      	b.n	9000a678 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
9000a5f2:	687b      	ldr	r3, [r7, #4]
9000a5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000a5f8:	2b00      	cmp	r3, #0
9000a5fa:	d106      	bne.n	9000a60a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
9000a5fc:	687b      	ldr	r3, [r7, #4]
9000a5fe:	2200      	movs	r2, #0
9000a600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
9000a604:	6878      	ldr	r0, [r7, #4]
9000a606:	f7f6 f841 	bl	9000068c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
9000a60a:	687b      	ldr	r3, [r7, #4]
9000a60c:	2224      	movs	r2, #36	@ 0x24
9000a60e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
9000a612:	687b      	ldr	r3, [r7, #4]
9000a614:	681b      	ldr	r3, [r3, #0]
9000a616:	681a      	ldr	r2, [r3, #0]
9000a618:	687b      	ldr	r3, [r7, #4]
9000a61a:	681b      	ldr	r3, [r3, #0]
9000a61c:	f022 0201 	bic.w	r2, r2, #1
9000a620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
9000a622:	687b      	ldr	r3, [r7, #4]
9000a624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a626:	2b00      	cmp	r3, #0
9000a628:	d002      	beq.n	9000a630 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
9000a62a:	6878      	ldr	r0, [r7, #4]
9000a62c:	f000 fe1e 	bl	9000b26c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
9000a630:	6878      	ldr	r0, [r7, #4]
9000a632:	f000 f8b3 	bl	9000a79c <UART_SetConfig>
9000a636:	4603      	mov	r3, r0
9000a638:	2b01      	cmp	r3, #1
9000a63a:	d101      	bne.n	9000a640 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
9000a63c:	2301      	movs	r3, #1
9000a63e:	e01b      	b.n	9000a678 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000a640:	687b      	ldr	r3, [r7, #4]
9000a642:	681b      	ldr	r3, [r3, #0]
9000a644:	685a      	ldr	r2, [r3, #4]
9000a646:	687b      	ldr	r3, [r7, #4]
9000a648:	681b      	ldr	r3, [r3, #0]
9000a64a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
9000a64e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
9000a650:	687b      	ldr	r3, [r7, #4]
9000a652:	681b      	ldr	r3, [r3, #0]
9000a654:	689a      	ldr	r2, [r3, #8]
9000a656:	687b      	ldr	r3, [r7, #4]
9000a658:	681b      	ldr	r3, [r3, #0]
9000a65a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
9000a65e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
9000a660:	687b      	ldr	r3, [r7, #4]
9000a662:	681b      	ldr	r3, [r3, #0]
9000a664:	681a      	ldr	r2, [r3, #0]
9000a666:	687b      	ldr	r3, [r7, #4]
9000a668:	681b      	ldr	r3, [r3, #0]
9000a66a:	f042 0201 	orr.w	r2, r2, #1
9000a66e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
9000a670:	6878      	ldr	r0, [r7, #4]
9000a672:	f000 fe9d 	bl	9000b3b0 <UART_CheckIdleState>
9000a676:	4603      	mov	r3, r0
}
9000a678:	4618      	mov	r0, r3
9000a67a:	3708      	adds	r7, #8
9000a67c:	46bd      	mov	sp, r7
9000a67e:	bd80      	pop	{r7, pc}

9000a680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
9000a680:	b580      	push	{r7, lr}
9000a682:	b08a      	sub	sp, #40	@ 0x28
9000a684:	af02      	add	r7, sp, #8
9000a686:	60f8      	str	r0, [r7, #12]
9000a688:	60b9      	str	r1, [r7, #8]
9000a68a:	603b      	str	r3, [r7, #0]
9000a68c:	4613      	mov	r3, r2
9000a68e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
9000a690:	68fb      	ldr	r3, [r7, #12]
9000a692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000a696:	2b20      	cmp	r3, #32
9000a698:	d17b      	bne.n	9000a792 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
9000a69a:	68bb      	ldr	r3, [r7, #8]
9000a69c:	2b00      	cmp	r3, #0
9000a69e:	d002      	beq.n	9000a6a6 <HAL_UART_Transmit+0x26>
9000a6a0:	88fb      	ldrh	r3, [r7, #6]
9000a6a2:	2b00      	cmp	r3, #0
9000a6a4:	d101      	bne.n	9000a6aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
9000a6a6:	2301      	movs	r3, #1
9000a6a8:	e074      	b.n	9000a794 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a6aa:	68fb      	ldr	r3, [r7, #12]
9000a6ac:	2200      	movs	r2, #0
9000a6ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000a6b2:	68fb      	ldr	r3, [r7, #12]
9000a6b4:	2221      	movs	r2, #33	@ 0x21
9000a6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
9000a6ba:	f7f9 f85d 	bl	90003778 <HAL_GetTick>
9000a6be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
9000a6c0:	68fb      	ldr	r3, [r7, #12]
9000a6c2:	88fa      	ldrh	r2, [r7, #6]
9000a6c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
9000a6c8:	68fb      	ldr	r3, [r7, #12]
9000a6ca:	88fa      	ldrh	r2, [r7, #6]
9000a6cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000a6d0:	68fb      	ldr	r3, [r7, #12]
9000a6d2:	689b      	ldr	r3, [r3, #8]
9000a6d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000a6d8:	d108      	bne.n	9000a6ec <HAL_UART_Transmit+0x6c>
9000a6da:	68fb      	ldr	r3, [r7, #12]
9000a6dc:	691b      	ldr	r3, [r3, #16]
9000a6de:	2b00      	cmp	r3, #0
9000a6e0:	d104      	bne.n	9000a6ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
9000a6e2:	2300      	movs	r3, #0
9000a6e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
9000a6e6:	68bb      	ldr	r3, [r7, #8]
9000a6e8:	61bb      	str	r3, [r7, #24]
9000a6ea:	e003      	b.n	9000a6f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
9000a6ec:	68bb      	ldr	r3, [r7, #8]
9000a6ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
9000a6f0:	2300      	movs	r3, #0
9000a6f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
9000a6f4:	e030      	b.n	9000a758 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
9000a6f6:	683b      	ldr	r3, [r7, #0]
9000a6f8:	9300      	str	r3, [sp, #0]
9000a6fa:	697b      	ldr	r3, [r7, #20]
9000a6fc:	2200      	movs	r2, #0
9000a6fe:	2180      	movs	r1, #128	@ 0x80
9000a700:	68f8      	ldr	r0, [r7, #12]
9000a702:	f000 feff 	bl	9000b504 <UART_WaitOnFlagUntilTimeout>
9000a706:	4603      	mov	r3, r0
9000a708:	2b00      	cmp	r3, #0
9000a70a:	d005      	beq.n	9000a718 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
9000a70c:	68fb      	ldr	r3, [r7, #12]
9000a70e:	2220      	movs	r2, #32
9000a710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
9000a714:	2303      	movs	r3, #3
9000a716:	e03d      	b.n	9000a794 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
9000a718:	69fb      	ldr	r3, [r7, #28]
9000a71a:	2b00      	cmp	r3, #0
9000a71c:	d10b      	bne.n	9000a736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
9000a71e:	69bb      	ldr	r3, [r7, #24]
9000a720:	881b      	ldrh	r3, [r3, #0]
9000a722:	461a      	mov	r2, r3
9000a724:	68fb      	ldr	r3, [r7, #12]
9000a726:	681b      	ldr	r3, [r3, #0]
9000a728:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000a72c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
9000a72e:	69bb      	ldr	r3, [r7, #24]
9000a730:	3302      	adds	r3, #2
9000a732:	61bb      	str	r3, [r7, #24]
9000a734:	e007      	b.n	9000a746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000a736:	69fb      	ldr	r3, [r7, #28]
9000a738:	781a      	ldrb	r2, [r3, #0]
9000a73a:	68fb      	ldr	r3, [r7, #12]
9000a73c:	681b      	ldr	r3, [r3, #0]
9000a73e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
9000a740:	69fb      	ldr	r3, [r7, #28]
9000a742:	3301      	adds	r3, #1
9000a744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
9000a746:	68fb      	ldr	r3, [r7, #12]
9000a748:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
9000a74c:	b29b      	uxth	r3, r3
9000a74e:	3b01      	subs	r3, #1
9000a750:	b29a      	uxth	r2, r3
9000a752:	68fb      	ldr	r3, [r7, #12]
9000a754:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
9000a758:	68fb      	ldr	r3, [r7, #12]
9000a75a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
9000a75e:	b29b      	uxth	r3, r3
9000a760:	2b00      	cmp	r3, #0
9000a762:	d1c8      	bne.n	9000a6f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
9000a764:	683b      	ldr	r3, [r7, #0]
9000a766:	9300      	str	r3, [sp, #0]
9000a768:	697b      	ldr	r3, [r7, #20]
9000a76a:	2200      	movs	r2, #0
9000a76c:	2140      	movs	r1, #64	@ 0x40
9000a76e:	68f8      	ldr	r0, [r7, #12]
9000a770:	f000 fec8 	bl	9000b504 <UART_WaitOnFlagUntilTimeout>
9000a774:	4603      	mov	r3, r0
9000a776:	2b00      	cmp	r3, #0
9000a778:	d005      	beq.n	9000a786 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
9000a77a:	68fb      	ldr	r3, [r7, #12]
9000a77c:	2220      	movs	r2, #32
9000a77e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
9000a782:	2303      	movs	r3, #3
9000a784:	e006      	b.n	9000a794 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
9000a786:	68fb      	ldr	r3, [r7, #12]
9000a788:	2220      	movs	r2, #32
9000a78a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
9000a78e:	2300      	movs	r3, #0
9000a790:	e000      	b.n	9000a794 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
9000a792:	2302      	movs	r3, #2
  }
}
9000a794:	4618      	mov	r0, r3
9000a796:	3720      	adds	r7, #32
9000a798:	46bd      	mov	sp, r7
9000a79a:	bd80      	pop	{r7, pc}

9000a79c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
9000a79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000a7a0:	b092      	sub	sp, #72	@ 0x48
9000a7a2:	af00      	add	r7, sp, #0
9000a7a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
9000a7a6:	2300      	movs	r3, #0
9000a7a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000a7ac:	697b      	ldr	r3, [r7, #20]
9000a7ae:	689a      	ldr	r2, [r3, #8]
9000a7b0:	697b      	ldr	r3, [r7, #20]
9000a7b2:	691b      	ldr	r3, [r3, #16]
9000a7b4:	431a      	orrs	r2, r3
9000a7b6:	697b      	ldr	r3, [r7, #20]
9000a7b8:	695b      	ldr	r3, [r3, #20]
9000a7ba:	431a      	orrs	r2, r3
9000a7bc:	697b      	ldr	r3, [r7, #20]
9000a7be:	69db      	ldr	r3, [r3, #28]
9000a7c0:	4313      	orrs	r3, r2
9000a7c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000a7c4:	697b      	ldr	r3, [r7, #20]
9000a7c6:	681b      	ldr	r3, [r3, #0]
9000a7c8:	681a      	ldr	r2, [r3, #0]
9000a7ca:	4bbe      	ldr	r3, [pc, #760]	@ (9000aac4 <UART_SetConfig+0x328>)
9000a7cc:	4013      	ands	r3, r2
9000a7ce:	697a      	ldr	r2, [r7, #20]
9000a7d0:	6812      	ldr	r2, [r2, #0]
9000a7d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
9000a7d4:	430b      	orrs	r3, r1
9000a7d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000a7d8:	697b      	ldr	r3, [r7, #20]
9000a7da:	681b      	ldr	r3, [r3, #0]
9000a7dc:	685b      	ldr	r3, [r3, #4]
9000a7de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
9000a7e2:	697b      	ldr	r3, [r7, #20]
9000a7e4:	68da      	ldr	r2, [r3, #12]
9000a7e6:	697b      	ldr	r3, [r7, #20]
9000a7e8:	681b      	ldr	r3, [r3, #0]
9000a7ea:	430a      	orrs	r2, r1
9000a7ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000a7ee:	697b      	ldr	r3, [r7, #20]
9000a7f0:	699b      	ldr	r3, [r3, #24]
9000a7f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000a7f4:	697b      	ldr	r3, [r7, #20]
9000a7f6:	681b      	ldr	r3, [r3, #0]
9000a7f8:	4ab3      	ldr	r2, [pc, #716]	@ (9000aac8 <UART_SetConfig+0x32c>)
9000a7fa:	4293      	cmp	r3, r2
9000a7fc:	d004      	beq.n	9000a808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
9000a7fe:	697b      	ldr	r3, [r7, #20]
9000a800:	6a1b      	ldr	r3, [r3, #32]
9000a802:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000a804:	4313      	orrs	r3, r2
9000a806:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000a808:	697b      	ldr	r3, [r7, #20]
9000a80a:	681b      	ldr	r3, [r3, #0]
9000a80c:	689a      	ldr	r2, [r3, #8]
9000a80e:	4baf      	ldr	r3, [pc, #700]	@ (9000aacc <UART_SetConfig+0x330>)
9000a810:	4013      	ands	r3, r2
9000a812:	697a      	ldr	r2, [r7, #20]
9000a814:	6812      	ldr	r2, [r2, #0]
9000a816:	6c79      	ldr	r1, [r7, #68]	@ 0x44
9000a818:	430b      	orrs	r3, r1
9000a81a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000a81c:	697b      	ldr	r3, [r7, #20]
9000a81e:	681b      	ldr	r3, [r3, #0]
9000a820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a822:	f023 010f 	bic.w	r1, r3, #15
9000a826:	697b      	ldr	r3, [r7, #20]
9000a828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000a82a:	697b      	ldr	r3, [r7, #20]
9000a82c:	681b      	ldr	r3, [r3, #0]
9000a82e:	430a      	orrs	r2, r1
9000a830:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000a832:	697b      	ldr	r3, [r7, #20]
9000a834:	681b      	ldr	r3, [r3, #0]
9000a836:	4aa6      	ldr	r2, [pc, #664]	@ (9000aad0 <UART_SetConfig+0x334>)
9000a838:	4293      	cmp	r3, r2
9000a83a:	d177      	bne.n	9000a92c <UART_SetConfig+0x190>
9000a83c:	4ba5      	ldr	r3, [pc, #660]	@ (9000aad4 <UART_SetConfig+0x338>)
9000a83e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a844:	2b28      	cmp	r3, #40	@ 0x28
9000a846:	d86d      	bhi.n	9000a924 <UART_SetConfig+0x188>
9000a848:	a201      	add	r2, pc, #4	@ (adr r2, 9000a850 <UART_SetConfig+0xb4>)
9000a84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a84e:	bf00      	nop
9000a850:	9000a8f5 	.word	0x9000a8f5
9000a854:	9000a925 	.word	0x9000a925
9000a858:	9000a925 	.word	0x9000a925
9000a85c:	9000a925 	.word	0x9000a925
9000a860:	9000a925 	.word	0x9000a925
9000a864:	9000a925 	.word	0x9000a925
9000a868:	9000a925 	.word	0x9000a925
9000a86c:	9000a925 	.word	0x9000a925
9000a870:	9000a8fd 	.word	0x9000a8fd
9000a874:	9000a925 	.word	0x9000a925
9000a878:	9000a925 	.word	0x9000a925
9000a87c:	9000a925 	.word	0x9000a925
9000a880:	9000a925 	.word	0x9000a925
9000a884:	9000a925 	.word	0x9000a925
9000a888:	9000a925 	.word	0x9000a925
9000a88c:	9000a925 	.word	0x9000a925
9000a890:	9000a905 	.word	0x9000a905
9000a894:	9000a925 	.word	0x9000a925
9000a898:	9000a925 	.word	0x9000a925
9000a89c:	9000a925 	.word	0x9000a925
9000a8a0:	9000a925 	.word	0x9000a925
9000a8a4:	9000a925 	.word	0x9000a925
9000a8a8:	9000a925 	.word	0x9000a925
9000a8ac:	9000a925 	.word	0x9000a925
9000a8b0:	9000a90d 	.word	0x9000a90d
9000a8b4:	9000a925 	.word	0x9000a925
9000a8b8:	9000a925 	.word	0x9000a925
9000a8bc:	9000a925 	.word	0x9000a925
9000a8c0:	9000a925 	.word	0x9000a925
9000a8c4:	9000a925 	.word	0x9000a925
9000a8c8:	9000a925 	.word	0x9000a925
9000a8cc:	9000a925 	.word	0x9000a925
9000a8d0:	9000a915 	.word	0x9000a915
9000a8d4:	9000a925 	.word	0x9000a925
9000a8d8:	9000a925 	.word	0x9000a925
9000a8dc:	9000a925 	.word	0x9000a925
9000a8e0:	9000a925 	.word	0x9000a925
9000a8e4:	9000a925 	.word	0x9000a925
9000a8e8:	9000a925 	.word	0x9000a925
9000a8ec:	9000a925 	.word	0x9000a925
9000a8f0:	9000a91d 	.word	0x9000a91d
9000a8f4:	2301      	movs	r3, #1
9000a8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a8fa:	e222      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a8fc:	2304      	movs	r3, #4
9000a8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a902:	e21e      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a904:	2308      	movs	r3, #8
9000a906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a90a:	e21a      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a90c:	2310      	movs	r3, #16
9000a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a912:	e216      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a914:	2320      	movs	r3, #32
9000a916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a91a:	e212      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a91c:	2340      	movs	r3, #64	@ 0x40
9000a91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a922:	e20e      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a924:	2380      	movs	r3, #128	@ 0x80
9000a926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a92a:	e20a      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a92c:	697b      	ldr	r3, [r7, #20]
9000a92e:	681b      	ldr	r3, [r3, #0]
9000a930:	4a69      	ldr	r2, [pc, #420]	@ (9000aad8 <UART_SetConfig+0x33c>)
9000a932:	4293      	cmp	r3, r2
9000a934:	d130      	bne.n	9000a998 <UART_SetConfig+0x1fc>
9000a936:	4b67      	ldr	r3, [pc, #412]	@ (9000aad4 <UART_SetConfig+0x338>)
9000a938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a93a:	f003 0307 	and.w	r3, r3, #7
9000a93e:	2b05      	cmp	r3, #5
9000a940:	d826      	bhi.n	9000a990 <UART_SetConfig+0x1f4>
9000a942:	a201      	add	r2, pc, #4	@ (adr r2, 9000a948 <UART_SetConfig+0x1ac>)
9000a944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a948:	9000a961 	.word	0x9000a961
9000a94c:	9000a969 	.word	0x9000a969
9000a950:	9000a971 	.word	0x9000a971
9000a954:	9000a979 	.word	0x9000a979
9000a958:	9000a981 	.word	0x9000a981
9000a95c:	9000a989 	.word	0x9000a989
9000a960:	2300      	movs	r3, #0
9000a962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a966:	e1ec      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a968:	2304      	movs	r3, #4
9000a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a96e:	e1e8      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a970:	2308      	movs	r3, #8
9000a972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a976:	e1e4      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a978:	2310      	movs	r3, #16
9000a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a97e:	e1e0      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a980:	2320      	movs	r3, #32
9000a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a986:	e1dc      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a988:	2340      	movs	r3, #64	@ 0x40
9000a98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a98e:	e1d8      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a990:	2380      	movs	r3, #128	@ 0x80
9000a992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a996:	e1d4      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a998:	697b      	ldr	r3, [r7, #20]
9000a99a:	681b      	ldr	r3, [r3, #0]
9000a99c:	4a4f      	ldr	r2, [pc, #316]	@ (9000aadc <UART_SetConfig+0x340>)
9000a99e:	4293      	cmp	r3, r2
9000a9a0:	d130      	bne.n	9000aa04 <UART_SetConfig+0x268>
9000a9a2:	4b4c      	ldr	r3, [pc, #304]	@ (9000aad4 <UART_SetConfig+0x338>)
9000a9a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a9a6:	f003 0307 	and.w	r3, r3, #7
9000a9aa:	2b05      	cmp	r3, #5
9000a9ac:	d826      	bhi.n	9000a9fc <UART_SetConfig+0x260>
9000a9ae:	a201      	add	r2, pc, #4	@ (adr r2, 9000a9b4 <UART_SetConfig+0x218>)
9000a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a9b4:	9000a9cd 	.word	0x9000a9cd
9000a9b8:	9000a9d5 	.word	0x9000a9d5
9000a9bc:	9000a9dd 	.word	0x9000a9dd
9000a9c0:	9000a9e5 	.word	0x9000a9e5
9000a9c4:	9000a9ed 	.word	0x9000a9ed
9000a9c8:	9000a9f5 	.word	0x9000a9f5
9000a9cc:	2300      	movs	r3, #0
9000a9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a9d2:	e1b6      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a9d4:	2304      	movs	r3, #4
9000a9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a9da:	e1b2      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a9dc:	2308      	movs	r3, #8
9000a9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a9e2:	e1ae      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a9e4:	2310      	movs	r3, #16
9000a9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a9ea:	e1aa      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a9ec:	2320      	movs	r3, #32
9000a9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a9f2:	e1a6      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a9f4:	2340      	movs	r3, #64	@ 0x40
9000a9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a9fa:	e1a2      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000a9fc:	2380      	movs	r3, #128	@ 0x80
9000a9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa02:	e19e      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa04:	697b      	ldr	r3, [r7, #20]
9000aa06:	681b      	ldr	r3, [r3, #0]
9000aa08:	4a35      	ldr	r2, [pc, #212]	@ (9000aae0 <UART_SetConfig+0x344>)
9000aa0a:	4293      	cmp	r3, r2
9000aa0c:	d130      	bne.n	9000aa70 <UART_SetConfig+0x2d4>
9000aa0e:	4b31      	ldr	r3, [pc, #196]	@ (9000aad4 <UART_SetConfig+0x338>)
9000aa10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000aa12:	f003 0307 	and.w	r3, r3, #7
9000aa16:	2b05      	cmp	r3, #5
9000aa18:	d826      	bhi.n	9000aa68 <UART_SetConfig+0x2cc>
9000aa1a:	a201      	add	r2, pc, #4	@ (adr r2, 9000aa20 <UART_SetConfig+0x284>)
9000aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000aa20:	9000aa39 	.word	0x9000aa39
9000aa24:	9000aa41 	.word	0x9000aa41
9000aa28:	9000aa49 	.word	0x9000aa49
9000aa2c:	9000aa51 	.word	0x9000aa51
9000aa30:	9000aa59 	.word	0x9000aa59
9000aa34:	9000aa61 	.word	0x9000aa61
9000aa38:	2300      	movs	r3, #0
9000aa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa3e:	e180      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa40:	2304      	movs	r3, #4
9000aa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa46:	e17c      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa48:	2308      	movs	r3, #8
9000aa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa4e:	e178      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa50:	2310      	movs	r3, #16
9000aa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa56:	e174      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa58:	2320      	movs	r3, #32
9000aa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa5e:	e170      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa60:	2340      	movs	r3, #64	@ 0x40
9000aa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa66:	e16c      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa68:	2380      	movs	r3, #128	@ 0x80
9000aa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aa6e:	e168      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aa70:	697b      	ldr	r3, [r7, #20]
9000aa72:	681b      	ldr	r3, [r3, #0]
9000aa74:	4a1b      	ldr	r2, [pc, #108]	@ (9000aae4 <UART_SetConfig+0x348>)
9000aa76:	4293      	cmp	r3, r2
9000aa78:	d142      	bne.n	9000ab00 <UART_SetConfig+0x364>
9000aa7a:	4b16      	ldr	r3, [pc, #88]	@ (9000aad4 <UART_SetConfig+0x338>)
9000aa7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000aa7e:	f003 0307 	and.w	r3, r3, #7
9000aa82:	2b05      	cmp	r3, #5
9000aa84:	d838      	bhi.n	9000aaf8 <UART_SetConfig+0x35c>
9000aa86:	a201      	add	r2, pc, #4	@ (adr r2, 9000aa8c <UART_SetConfig+0x2f0>)
9000aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000aa8c:	9000aaa5 	.word	0x9000aaa5
9000aa90:	9000aaad 	.word	0x9000aaad
9000aa94:	9000aab5 	.word	0x9000aab5
9000aa98:	9000aabd 	.word	0x9000aabd
9000aa9c:	9000aae9 	.word	0x9000aae9
9000aaa0:	9000aaf1 	.word	0x9000aaf1
9000aaa4:	2300      	movs	r3, #0
9000aaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aaaa:	e14a      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aaac:	2304      	movs	r3, #4
9000aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aab2:	e146      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aab4:	2308      	movs	r3, #8
9000aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aaba:	e142      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aabc:	2310      	movs	r3, #16
9000aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aac2:	e13e      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aac4:	cfff69f3 	.word	0xcfff69f3
9000aac8:	58000c00 	.word	0x58000c00
9000aacc:	11fff4ff 	.word	0x11fff4ff
9000aad0:	40011000 	.word	0x40011000
9000aad4:	58024400 	.word	0x58024400
9000aad8:	40004400 	.word	0x40004400
9000aadc:	40004800 	.word	0x40004800
9000aae0:	40004c00 	.word	0x40004c00
9000aae4:	40005000 	.word	0x40005000
9000aae8:	2320      	movs	r3, #32
9000aaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aaee:	e128      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aaf0:	2340      	movs	r3, #64	@ 0x40
9000aaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aaf6:	e124      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aaf8:	2380      	movs	r3, #128	@ 0x80
9000aafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aafe:	e120      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ab00:	697b      	ldr	r3, [r7, #20]
9000ab02:	681b      	ldr	r3, [r3, #0]
9000ab04:	4acb      	ldr	r2, [pc, #812]	@ (9000ae34 <UART_SetConfig+0x698>)
9000ab06:	4293      	cmp	r3, r2
9000ab08:	d176      	bne.n	9000abf8 <UART_SetConfig+0x45c>
9000ab0a:	4bcb      	ldr	r3, [pc, #812]	@ (9000ae38 <UART_SetConfig+0x69c>)
9000ab0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ab0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000ab12:	2b28      	cmp	r3, #40	@ 0x28
9000ab14:	d86c      	bhi.n	9000abf0 <UART_SetConfig+0x454>
9000ab16:	a201      	add	r2, pc, #4	@ (adr r2, 9000ab1c <UART_SetConfig+0x380>)
9000ab18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ab1c:	9000abc1 	.word	0x9000abc1
9000ab20:	9000abf1 	.word	0x9000abf1
9000ab24:	9000abf1 	.word	0x9000abf1
9000ab28:	9000abf1 	.word	0x9000abf1
9000ab2c:	9000abf1 	.word	0x9000abf1
9000ab30:	9000abf1 	.word	0x9000abf1
9000ab34:	9000abf1 	.word	0x9000abf1
9000ab38:	9000abf1 	.word	0x9000abf1
9000ab3c:	9000abc9 	.word	0x9000abc9
9000ab40:	9000abf1 	.word	0x9000abf1
9000ab44:	9000abf1 	.word	0x9000abf1
9000ab48:	9000abf1 	.word	0x9000abf1
9000ab4c:	9000abf1 	.word	0x9000abf1
9000ab50:	9000abf1 	.word	0x9000abf1
9000ab54:	9000abf1 	.word	0x9000abf1
9000ab58:	9000abf1 	.word	0x9000abf1
9000ab5c:	9000abd1 	.word	0x9000abd1
9000ab60:	9000abf1 	.word	0x9000abf1
9000ab64:	9000abf1 	.word	0x9000abf1
9000ab68:	9000abf1 	.word	0x9000abf1
9000ab6c:	9000abf1 	.word	0x9000abf1
9000ab70:	9000abf1 	.word	0x9000abf1
9000ab74:	9000abf1 	.word	0x9000abf1
9000ab78:	9000abf1 	.word	0x9000abf1
9000ab7c:	9000abd9 	.word	0x9000abd9
9000ab80:	9000abf1 	.word	0x9000abf1
9000ab84:	9000abf1 	.word	0x9000abf1
9000ab88:	9000abf1 	.word	0x9000abf1
9000ab8c:	9000abf1 	.word	0x9000abf1
9000ab90:	9000abf1 	.word	0x9000abf1
9000ab94:	9000abf1 	.word	0x9000abf1
9000ab98:	9000abf1 	.word	0x9000abf1
9000ab9c:	9000abe1 	.word	0x9000abe1
9000aba0:	9000abf1 	.word	0x9000abf1
9000aba4:	9000abf1 	.word	0x9000abf1
9000aba8:	9000abf1 	.word	0x9000abf1
9000abac:	9000abf1 	.word	0x9000abf1
9000abb0:	9000abf1 	.word	0x9000abf1
9000abb4:	9000abf1 	.word	0x9000abf1
9000abb8:	9000abf1 	.word	0x9000abf1
9000abbc:	9000abe9 	.word	0x9000abe9
9000abc0:	2301      	movs	r3, #1
9000abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abc6:	e0bc      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000abc8:	2304      	movs	r3, #4
9000abca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abce:	e0b8      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000abd0:	2308      	movs	r3, #8
9000abd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abd6:	e0b4      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000abd8:	2310      	movs	r3, #16
9000abda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abde:	e0b0      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000abe0:	2320      	movs	r3, #32
9000abe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abe6:	e0ac      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000abe8:	2340      	movs	r3, #64	@ 0x40
9000abea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abee:	e0a8      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000abf0:	2380      	movs	r3, #128	@ 0x80
9000abf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abf6:	e0a4      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000abf8:	697b      	ldr	r3, [r7, #20]
9000abfa:	681b      	ldr	r3, [r3, #0]
9000abfc:	4a8f      	ldr	r2, [pc, #572]	@ (9000ae3c <UART_SetConfig+0x6a0>)
9000abfe:	4293      	cmp	r3, r2
9000ac00:	d130      	bne.n	9000ac64 <UART_SetConfig+0x4c8>
9000ac02:	4b8d      	ldr	r3, [pc, #564]	@ (9000ae38 <UART_SetConfig+0x69c>)
9000ac04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ac06:	f003 0307 	and.w	r3, r3, #7
9000ac0a:	2b05      	cmp	r3, #5
9000ac0c:	d826      	bhi.n	9000ac5c <UART_SetConfig+0x4c0>
9000ac0e:	a201      	add	r2, pc, #4	@ (adr r2, 9000ac14 <UART_SetConfig+0x478>)
9000ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ac14:	9000ac2d 	.word	0x9000ac2d
9000ac18:	9000ac35 	.word	0x9000ac35
9000ac1c:	9000ac3d 	.word	0x9000ac3d
9000ac20:	9000ac45 	.word	0x9000ac45
9000ac24:	9000ac4d 	.word	0x9000ac4d
9000ac28:	9000ac55 	.word	0x9000ac55
9000ac2c:	2300      	movs	r3, #0
9000ac2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac32:	e086      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ac34:	2304      	movs	r3, #4
9000ac36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac3a:	e082      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ac3c:	2308      	movs	r3, #8
9000ac3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac42:	e07e      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ac44:	2310      	movs	r3, #16
9000ac46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac4a:	e07a      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ac4c:	2320      	movs	r3, #32
9000ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac52:	e076      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ac54:	2340      	movs	r3, #64	@ 0x40
9000ac56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac5a:	e072      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ac5c:	2380      	movs	r3, #128	@ 0x80
9000ac5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac62:	e06e      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ac64:	697b      	ldr	r3, [r7, #20]
9000ac66:	681b      	ldr	r3, [r3, #0]
9000ac68:	4a75      	ldr	r2, [pc, #468]	@ (9000ae40 <UART_SetConfig+0x6a4>)
9000ac6a:	4293      	cmp	r3, r2
9000ac6c:	d130      	bne.n	9000acd0 <UART_SetConfig+0x534>
9000ac6e:	4b72      	ldr	r3, [pc, #456]	@ (9000ae38 <UART_SetConfig+0x69c>)
9000ac70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ac72:	f003 0307 	and.w	r3, r3, #7
9000ac76:	2b05      	cmp	r3, #5
9000ac78:	d826      	bhi.n	9000acc8 <UART_SetConfig+0x52c>
9000ac7a:	a201      	add	r2, pc, #4	@ (adr r2, 9000ac80 <UART_SetConfig+0x4e4>)
9000ac7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ac80:	9000ac99 	.word	0x9000ac99
9000ac84:	9000aca1 	.word	0x9000aca1
9000ac88:	9000aca9 	.word	0x9000aca9
9000ac8c:	9000acb1 	.word	0x9000acb1
9000ac90:	9000acb9 	.word	0x9000acb9
9000ac94:	9000acc1 	.word	0x9000acc1
9000ac98:	2300      	movs	r3, #0
9000ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac9e:	e050      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aca0:	2304      	movs	r3, #4
9000aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aca6:	e04c      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000aca8:	2308      	movs	r3, #8
9000acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acae:	e048      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000acb0:	2310      	movs	r3, #16
9000acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acb6:	e044      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000acb8:	2320      	movs	r3, #32
9000acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acbe:	e040      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000acc0:	2340      	movs	r3, #64	@ 0x40
9000acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acc6:	e03c      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000acc8:	2380      	movs	r3, #128	@ 0x80
9000acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acce:	e038      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000acd0:	697b      	ldr	r3, [r7, #20]
9000acd2:	681b      	ldr	r3, [r3, #0]
9000acd4:	4a5b      	ldr	r2, [pc, #364]	@ (9000ae44 <UART_SetConfig+0x6a8>)
9000acd6:	4293      	cmp	r3, r2
9000acd8:	d130      	bne.n	9000ad3c <UART_SetConfig+0x5a0>
9000acda:	4b57      	ldr	r3, [pc, #348]	@ (9000ae38 <UART_SetConfig+0x69c>)
9000acdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000acde:	f003 0307 	and.w	r3, r3, #7
9000ace2:	2b05      	cmp	r3, #5
9000ace4:	d826      	bhi.n	9000ad34 <UART_SetConfig+0x598>
9000ace6:	a201      	add	r2, pc, #4	@ (adr r2, 9000acec <UART_SetConfig+0x550>)
9000ace8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000acec:	9000ad05 	.word	0x9000ad05
9000acf0:	9000ad0d 	.word	0x9000ad0d
9000acf4:	9000ad15 	.word	0x9000ad15
9000acf8:	9000ad1d 	.word	0x9000ad1d
9000acfc:	9000ad25 	.word	0x9000ad25
9000ad00:	9000ad2d 	.word	0x9000ad2d
9000ad04:	2302      	movs	r3, #2
9000ad06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad0a:	e01a      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ad0c:	2304      	movs	r3, #4
9000ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad12:	e016      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ad14:	2308      	movs	r3, #8
9000ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad1a:	e012      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ad1c:	2310      	movs	r3, #16
9000ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad22:	e00e      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ad24:	2320      	movs	r3, #32
9000ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad2a:	e00a      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ad2c:	2340      	movs	r3, #64	@ 0x40
9000ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad32:	e006      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ad34:	2380      	movs	r3, #128	@ 0x80
9000ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad3a:	e002      	b.n	9000ad42 <UART_SetConfig+0x5a6>
9000ad3c:	2380      	movs	r3, #128	@ 0x80
9000ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000ad42:	697b      	ldr	r3, [r7, #20]
9000ad44:	681b      	ldr	r3, [r3, #0]
9000ad46:	4a3f      	ldr	r2, [pc, #252]	@ (9000ae44 <UART_SetConfig+0x6a8>)
9000ad48:	4293      	cmp	r3, r2
9000ad4a:	f040 80f8 	bne.w	9000af3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000ad4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000ad52:	2b20      	cmp	r3, #32
9000ad54:	dc46      	bgt.n	9000ade4 <UART_SetConfig+0x648>
9000ad56:	2b02      	cmp	r3, #2
9000ad58:	f2c0 8082 	blt.w	9000ae60 <UART_SetConfig+0x6c4>
9000ad5c:	3b02      	subs	r3, #2
9000ad5e:	2b1e      	cmp	r3, #30
9000ad60:	d87e      	bhi.n	9000ae60 <UART_SetConfig+0x6c4>
9000ad62:	a201      	add	r2, pc, #4	@ (adr r2, 9000ad68 <UART_SetConfig+0x5cc>)
9000ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ad68:	9000adeb 	.word	0x9000adeb
9000ad6c:	9000ae61 	.word	0x9000ae61
9000ad70:	9000adf3 	.word	0x9000adf3
9000ad74:	9000ae61 	.word	0x9000ae61
9000ad78:	9000ae61 	.word	0x9000ae61
9000ad7c:	9000ae61 	.word	0x9000ae61
9000ad80:	9000ae03 	.word	0x9000ae03
9000ad84:	9000ae61 	.word	0x9000ae61
9000ad88:	9000ae61 	.word	0x9000ae61
9000ad8c:	9000ae61 	.word	0x9000ae61
9000ad90:	9000ae61 	.word	0x9000ae61
9000ad94:	9000ae61 	.word	0x9000ae61
9000ad98:	9000ae61 	.word	0x9000ae61
9000ad9c:	9000ae61 	.word	0x9000ae61
9000ada0:	9000ae13 	.word	0x9000ae13
9000ada4:	9000ae61 	.word	0x9000ae61
9000ada8:	9000ae61 	.word	0x9000ae61
9000adac:	9000ae61 	.word	0x9000ae61
9000adb0:	9000ae61 	.word	0x9000ae61
9000adb4:	9000ae61 	.word	0x9000ae61
9000adb8:	9000ae61 	.word	0x9000ae61
9000adbc:	9000ae61 	.word	0x9000ae61
9000adc0:	9000ae61 	.word	0x9000ae61
9000adc4:	9000ae61 	.word	0x9000ae61
9000adc8:	9000ae61 	.word	0x9000ae61
9000adcc:	9000ae61 	.word	0x9000ae61
9000add0:	9000ae61 	.word	0x9000ae61
9000add4:	9000ae61 	.word	0x9000ae61
9000add8:	9000ae61 	.word	0x9000ae61
9000addc:	9000ae61 	.word	0x9000ae61
9000ade0:	9000ae53 	.word	0x9000ae53
9000ade4:	2b40      	cmp	r3, #64	@ 0x40
9000ade6:	d037      	beq.n	9000ae58 <UART_SetConfig+0x6bc>
9000ade8:	e03a      	b.n	9000ae60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000adea:	f7fe fdcd 	bl	90009988 <HAL_RCCEx_GetD3PCLK1Freq>
9000adee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000adf0:	e03c      	b.n	9000ae6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000adf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000adf6:	4618      	mov	r0, r3
9000adf8:	f7fe fddc 	bl	900099b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000adfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000adfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000ae00:	e034      	b.n	9000ae6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000ae02:	f107 0318 	add.w	r3, r7, #24
9000ae06:	4618      	mov	r0, r3
9000ae08:	f7fe ff28 	bl	90009c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000ae0c:	69fb      	ldr	r3, [r7, #28]
9000ae0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000ae10:	e02c      	b.n	9000ae6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ae12:	4b09      	ldr	r3, [pc, #36]	@ (9000ae38 <UART_SetConfig+0x69c>)
9000ae14:	681b      	ldr	r3, [r3, #0]
9000ae16:	f003 0320 	and.w	r3, r3, #32
9000ae1a:	2b00      	cmp	r3, #0
9000ae1c:	d016      	beq.n	9000ae4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000ae1e:	4b06      	ldr	r3, [pc, #24]	@ (9000ae38 <UART_SetConfig+0x69c>)
9000ae20:	681b      	ldr	r3, [r3, #0]
9000ae22:	08db      	lsrs	r3, r3, #3
9000ae24:	f003 0303 	and.w	r3, r3, #3
9000ae28:	4a07      	ldr	r2, [pc, #28]	@ (9000ae48 <UART_SetConfig+0x6ac>)
9000ae2a:	fa22 f303 	lsr.w	r3, r2, r3
9000ae2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000ae30:	e01c      	b.n	9000ae6c <UART_SetConfig+0x6d0>
9000ae32:	bf00      	nop
9000ae34:	40011400 	.word	0x40011400
9000ae38:	58024400 	.word	0x58024400
9000ae3c:	40007800 	.word	0x40007800
9000ae40:	40007c00 	.word	0x40007c00
9000ae44:	58000c00 	.word	0x58000c00
9000ae48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000ae4c:	4b9d      	ldr	r3, [pc, #628]	@ (9000b0c4 <UART_SetConfig+0x928>)
9000ae4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000ae50:	e00c      	b.n	9000ae6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000ae52:	4b9d      	ldr	r3, [pc, #628]	@ (9000b0c8 <UART_SetConfig+0x92c>)
9000ae54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000ae56:	e009      	b.n	9000ae6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000ae58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000ae5e:	e005      	b.n	9000ae6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000ae60:	2300      	movs	r3, #0
9000ae62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000ae64:	2301      	movs	r3, #1
9000ae66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000ae6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000ae6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000ae6e:	2b00      	cmp	r3, #0
9000ae70:	f000 81de 	beq.w	9000b230 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000ae74:	697b      	ldr	r3, [r7, #20]
9000ae76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000ae78:	4a94      	ldr	r2, [pc, #592]	@ (9000b0cc <UART_SetConfig+0x930>)
9000ae7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000ae7e:	461a      	mov	r2, r3
9000ae80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000ae82:	fbb3 f3f2 	udiv	r3, r3, r2
9000ae86:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000ae88:	697b      	ldr	r3, [r7, #20]
9000ae8a:	685a      	ldr	r2, [r3, #4]
9000ae8c:	4613      	mov	r3, r2
9000ae8e:	005b      	lsls	r3, r3, #1
9000ae90:	4413      	add	r3, r2
9000ae92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000ae94:	429a      	cmp	r2, r3
9000ae96:	d305      	bcc.n	9000aea4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000ae98:	697b      	ldr	r3, [r7, #20]
9000ae9a:	685b      	ldr	r3, [r3, #4]
9000ae9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000ae9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000aea0:	429a      	cmp	r2, r3
9000aea2:	d903      	bls.n	9000aeac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000aea4:	2301      	movs	r3, #1
9000aea6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000aeaa:	e1c1      	b.n	9000b230 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000aeac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000aeae:	2200      	movs	r2, #0
9000aeb0:	60bb      	str	r3, [r7, #8]
9000aeb2:	60fa      	str	r2, [r7, #12]
9000aeb4:	697b      	ldr	r3, [r7, #20]
9000aeb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000aeb8:	4a84      	ldr	r2, [pc, #528]	@ (9000b0cc <UART_SetConfig+0x930>)
9000aeba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000aebe:	b29b      	uxth	r3, r3
9000aec0:	2200      	movs	r2, #0
9000aec2:	603b      	str	r3, [r7, #0]
9000aec4:	607a      	str	r2, [r7, #4]
9000aec6:	e9d7 2300 	ldrd	r2, r3, [r7]
9000aeca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000aece:	f7f5 fa03 	bl	900002d8 <__aeabi_uldivmod>
9000aed2:	4602      	mov	r2, r0
9000aed4:	460b      	mov	r3, r1
9000aed6:	4610      	mov	r0, r2
9000aed8:	4619      	mov	r1, r3
9000aeda:	f04f 0200 	mov.w	r2, #0
9000aede:	f04f 0300 	mov.w	r3, #0
9000aee2:	020b      	lsls	r3, r1, #8
9000aee4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000aee8:	0202      	lsls	r2, r0, #8
9000aeea:	6979      	ldr	r1, [r7, #20]
9000aeec:	6849      	ldr	r1, [r1, #4]
9000aeee:	0849      	lsrs	r1, r1, #1
9000aef0:	2000      	movs	r0, #0
9000aef2:	460c      	mov	r4, r1
9000aef4:	4605      	mov	r5, r0
9000aef6:	eb12 0804 	adds.w	r8, r2, r4
9000aefa:	eb43 0905 	adc.w	r9, r3, r5
9000aefe:	697b      	ldr	r3, [r7, #20]
9000af00:	685b      	ldr	r3, [r3, #4]
9000af02:	2200      	movs	r2, #0
9000af04:	469a      	mov	sl, r3
9000af06:	4693      	mov	fp, r2
9000af08:	4652      	mov	r2, sl
9000af0a:	465b      	mov	r3, fp
9000af0c:	4640      	mov	r0, r8
9000af0e:	4649      	mov	r1, r9
9000af10:	f7f5 f9e2 	bl	900002d8 <__aeabi_uldivmod>
9000af14:	4602      	mov	r2, r0
9000af16:	460b      	mov	r3, r1
9000af18:	4613      	mov	r3, r2
9000af1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000af1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000af1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000af22:	d308      	bcc.n	9000af36 <UART_SetConfig+0x79a>
9000af24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000af26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000af2a:	d204      	bcs.n	9000af36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000af2c:	697b      	ldr	r3, [r7, #20]
9000af2e:	681b      	ldr	r3, [r3, #0]
9000af30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000af32:	60da      	str	r2, [r3, #12]
9000af34:	e17c      	b.n	9000b230 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000af36:	2301      	movs	r3, #1
9000af38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000af3c:	e178      	b.n	9000b230 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000af3e:	697b      	ldr	r3, [r7, #20]
9000af40:	69db      	ldr	r3, [r3, #28]
9000af42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000af46:	f040 80c5 	bne.w	9000b0d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000af4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000af4e:	2b20      	cmp	r3, #32
9000af50:	dc48      	bgt.n	9000afe4 <UART_SetConfig+0x848>
9000af52:	2b00      	cmp	r3, #0
9000af54:	db7b      	blt.n	9000b04e <UART_SetConfig+0x8b2>
9000af56:	2b20      	cmp	r3, #32
9000af58:	d879      	bhi.n	9000b04e <UART_SetConfig+0x8b2>
9000af5a:	a201      	add	r2, pc, #4	@ (adr r2, 9000af60 <UART_SetConfig+0x7c4>)
9000af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000af60:	9000afeb 	.word	0x9000afeb
9000af64:	9000aff3 	.word	0x9000aff3
9000af68:	9000b04f 	.word	0x9000b04f
9000af6c:	9000b04f 	.word	0x9000b04f
9000af70:	9000affb 	.word	0x9000affb
9000af74:	9000b04f 	.word	0x9000b04f
9000af78:	9000b04f 	.word	0x9000b04f
9000af7c:	9000b04f 	.word	0x9000b04f
9000af80:	9000b00b 	.word	0x9000b00b
9000af84:	9000b04f 	.word	0x9000b04f
9000af88:	9000b04f 	.word	0x9000b04f
9000af8c:	9000b04f 	.word	0x9000b04f
9000af90:	9000b04f 	.word	0x9000b04f
9000af94:	9000b04f 	.word	0x9000b04f
9000af98:	9000b04f 	.word	0x9000b04f
9000af9c:	9000b04f 	.word	0x9000b04f
9000afa0:	9000b01b 	.word	0x9000b01b
9000afa4:	9000b04f 	.word	0x9000b04f
9000afa8:	9000b04f 	.word	0x9000b04f
9000afac:	9000b04f 	.word	0x9000b04f
9000afb0:	9000b04f 	.word	0x9000b04f
9000afb4:	9000b04f 	.word	0x9000b04f
9000afb8:	9000b04f 	.word	0x9000b04f
9000afbc:	9000b04f 	.word	0x9000b04f
9000afc0:	9000b04f 	.word	0x9000b04f
9000afc4:	9000b04f 	.word	0x9000b04f
9000afc8:	9000b04f 	.word	0x9000b04f
9000afcc:	9000b04f 	.word	0x9000b04f
9000afd0:	9000b04f 	.word	0x9000b04f
9000afd4:	9000b04f 	.word	0x9000b04f
9000afd8:	9000b04f 	.word	0x9000b04f
9000afdc:	9000b04f 	.word	0x9000b04f
9000afe0:	9000b041 	.word	0x9000b041
9000afe4:	2b40      	cmp	r3, #64	@ 0x40
9000afe6:	d02e      	beq.n	9000b046 <UART_SetConfig+0x8aa>
9000afe8:	e031      	b.n	9000b04e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000afea:	f7fd fa97 	bl	9000851c <HAL_RCC_GetPCLK1Freq>
9000afee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000aff0:	e033      	b.n	9000b05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000aff2:	f7fd faa9 	bl	90008548 <HAL_RCC_GetPCLK2Freq>
9000aff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000aff8:	e02f      	b.n	9000b05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000affa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000affe:	4618      	mov	r0, r3
9000b000:	f7fe fcd8 	bl	900099b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b008:	e027      	b.n	9000b05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b00a:	f107 0318 	add.w	r3, r7, #24
9000b00e:	4618      	mov	r0, r3
9000b010:	f7fe fe24 	bl	90009c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b014:	69fb      	ldr	r3, [r7, #28]
9000b016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b018:	e01f      	b.n	9000b05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b01a:	4b2d      	ldr	r3, [pc, #180]	@ (9000b0d0 <UART_SetConfig+0x934>)
9000b01c:	681b      	ldr	r3, [r3, #0]
9000b01e:	f003 0320 	and.w	r3, r3, #32
9000b022:	2b00      	cmp	r3, #0
9000b024:	d009      	beq.n	9000b03a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b026:	4b2a      	ldr	r3, [pc, #168]	@ (9000b0d0 <UART_SetConfig+0x934>)
9000b028:	681b      	ldr	r3, [r3, #0]
9000b02a:	08db      	lsrs	r3, r3, #3
9000b02c:	f003 0303 	and.w	r3, r3, #3
9000b030:	4a24      	ldr	r2, [pc, #144]	@ (9000b0c4 <UART_SetConfig+0x928>)
9000b032:	fa22 f303 	lsr.w	r3, r2, r3
9000b036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b038:	e00f      	b.n	9000b05a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000b03a:	4b22      	ldr	r3, [pc, #136]	@ (9000b0c4 <UART_SetConfig+0x928>)
9000b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b03e:	e00c      	b.n	9000b05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b040:	4b21      	ldr	r3, [pc, #132]	@ (9000b0c8 <UART_SetConfig+0x92c>)
9000b042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b044:	e009      	b.n	9000b05a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b04c:	e005      	b.n	9000b05a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000b04e:	2300      	movs	r3, #0
9000b050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b052:	2301      	movs	r3, #1
9000b054:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000b05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b05c:	2b00      	cmp	r3, #0
9000b05e:	f000 80e7 	beq.w	9000b230 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b062:	697b      	ldr	r3, [r7, #20]
9000b064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b066:	4a19      	ldr	r2, [pc, #100]	@ (9000b0cc <UART_SetConfig+0x930>)
9000b068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b06c:	461a      	mov	r2, r3
9000b06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b070:	fbb3 f3f2 	udiv	r3, r3, r2
9000b074:	005a      	lsls	r2, r3, #1
9000b076:	697b      	ldr	r3, [r7, #20]
9000b078:	685b      	ldr	r3, [r3, #4]
9000b07a:	085b      	lsrs	r3, r3, #1
9000b07c:	441a      	add	r2, r3
9000b07e:	697b      	ldr	r3, [r7, #20]
9000b080:	685b      	ldr	r3, [r3, #4]
9000b082:	fbb2 f3f3 	udiv	r3, r2, r3
9000b086:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b08a:	2b0f      	cmp	r3, #15
9000b08c:	d916      	bls.n	9000b0bc <UART_SetConfig+0x920>
9000b08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b094:	d212      	bcs.n	9000b0bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000b096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b098:	b29b      	uxth	r3, r3
9000b09a:	f023 030f 	bic.w	r3, r3, #15
9000b09e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b0a2:	085b      	lsrs	r3, r3, #1
9000b0a4:	b29b      	uxth	r3, r3
9000b0a6:	f003 0307 	and.w	r3, r3, #7
9000b0aa:	b29a      	uxth	r2, r3
9000b0ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000b0ae:	4313      	orrs	r3, r2
9000b0b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000b0b2:	697b      	ldr	r3, [r7, #20]
9000b0b4:	681b      	ldr	r3, [r3, #0]
9000b0b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000b0b8:	60da      	str	r2, [r3, #12]
9000b0ba:	e0b9      	b.n	9000b230 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000b0bc:	2301      	movs	r3, #1
9000b0be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000b0c2:	e0b5      	b.n	9000b230 <UART_SetConfig+0xa94>
9000b0c4:	03d09000 	.word	0x03d09000
9000b0c8:	003d0900 	.word	0x003d0900
9000b0cc:	9000d354 	.word	0x9000d354
9000b0d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000b0d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000b0d8:	2b20      	cmp	r3, #32
9000b0da:	dc49      	bgt.n	9000b170 <UART_SetConfig+0x9d4>
9000b0dc:	2b00      	cmp	r3, #0
9000b0de:	db7c      	blt.n	9000b1da <UART_SetConfig+0xa3e>
9000b0e0:	2b20      	cmp	r3, #32
9000b0e2:	d87a      	bhi.n	9000b1da <UART_SetConfig+0xa3e>
9000b0e4:	a201      	add	r2, pc, #4	@ (adr r2, 9000b0ec <UART_SetConfig+0x950>)
9000b0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b0ea:	bf00      	nop
9000b0ec:	9000b177 	.word	0x9000b177
9000b0f0:	9000b17f 	.word	0x9000b17f
9000b0f4:	9000b1db 	.word	0x9000b1db
9000b0f8:	9000b1db 	.word	0x9000b1db
9000b0fc:	9000b187 	.word	0x9000b187
9000b100:	9000b1db 	.word	0x9000b1db
9000b104:	9000b1db 	.word	0x9000b1db
9000b108:	9000b1db 	.word	0x9000b1db
9000b10c:	9000b197 	.word	0x9000b197
9000b110:	9000b1db 	.word	0x9000b1db
9000b114:	9000b1db 	.word	0x9000b1db
9000b118:	9000b1db 	.word	0x9000b1db
9000b11c:	9000b1db 	.word	0x9000b1db
9000b120:	9000b1db 	.word	0x9000b1db
9000b124:	9000b1db 	.word	0x9000b1db
9000b128:	9000b1db 	.word	0x9000b1db
9000b12c:	9000b1a7 	.word	0x9000b1a7
9000b130:	9000b1db 	.word	0x9000b1db
9000b134:	9000b1db 	.word	0x9000b1db
9000b138:	9000b1db 	.word	0x9000b1db
9000b13c:	9000b1db 	.word	0x9000b1db
9000b140:	9000b1db 	.word	0x9000b1db
9000b144:	9000b1db 	.word	0x9000b1db
9000b148:	9000b1db 	.word	0x9000b1db
9000b14c:	9000b1db 	.word	0x9000b1db
9000b150:	9000b1db 	.word	0x9000b1db
9000b154:	9000b1db 	.word	0x9000b1db
9000b158:	9000b1db 	.word	0x9000b1db
9000b15c:	9000b1db 	.word	0x9000b1db
9000b160:	9000b1db 	.word	0x9000b1db
9000b164:	9000b1db 	.word	0x9000b1db
9000b168:	9000b1db 	.word	0x9000b1db
9000b16c:	9000b1cd 	.word	0x9000b1cd
9000b170:	2b40      	cmp	r3, #64	@ 0x40
9000b172:	d02e      	beq.n	9000b1d2 <UART_SetConfig+0xa36>
9000b174:	e031      	b.n	9000b1da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000b176:	f7fd f9d1 	bl	9000851c <HAL_RCC_GetPCLK1Freq>
9000b17a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b17c:	e033      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000b17e:	f7fd f9e3 	bl	90008548 <HAL_RCC_GetPCLK2Freq>
9000b182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b184:	e02f      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000b186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b18a:	4618      	mov	r0, r3
9000b18c:	f7fe fc12 	bl	900099b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b194:	e027      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b196:	f107 0318 	add.w	r3, r7, #24
9000b19a:	4618      	mov	r0, r3
9000b19c:	f7fe fd5e 	bl	90009c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b1a0:	69fb      	ldr	r3, [r7, #28]
9000b1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b1a4:	e01f      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b1a6:	4b2d      	ldr	r3, [pc, #180]	@ (9000b25c <UART_SetConfig+0xac0>)
9000b1a8:	681b      	ldr	r3, [r3, #0]
9000b1aa:	f003 0320 	and.w	r3, r3, #32
9000b1ae:	2b00      	cmp	r3, #0
9000b1b0:	d009      	beq.n	9000b1c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b1b2:	4b2a      	ldr	r3, [pc, #168]	@ (9000b25c <UART_SetConfig+0xac0>)
9000b1b4:	681b      	ldr	r3, [r3, #0]
9000b1b6:	08db      	lsrs	r3, r3, #3
9000b1b8:	f003 0303 	and.w	r3, r3, #3
9000b1bc:	4a28      	ldr	r2, [pc, #160]	@ (9000b260 <UART_SetConfig+0xac4>)
9000b1be:	fa22 f303 	lsr.w	r3, r2, r3
9000b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b1c4:	e00f      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000b1c6:	4b26      	ldr	r3, [pc, #152]	@ (9000b260 <UART_SetConfig+0xac4>)
9000b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b1ca:	e00c      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b1cc:	4b25      	ldr	r3, [pc, #148]	@ (9000b264 <UART_SetConfig+0xac8>)
9000b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b1d0:	e009      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b1d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b1d8:	e005      	b.n	9000b1e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000b1da:	2300      	movs	r3, #0
9000b1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b1de:	2301      	movs	r3, #1
9000b1e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b1e4:	bf00      	nop
    }

    if (pclk != 0U)
9000b1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b1e8:	2b00      	cmp	r3, #0
9000b1ea:	d021      	beq.n	9000b230 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b1ec:	697b      	ldr	r3, [r7, #20]
9000b1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b1f0:	4a1d      	ldr	r2, [pc, #116]	@ (9000b268 <UART_SetConfig+0xacc>)
9000b1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b1f6:	461a      	mov	r2, r3
9000b1f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b1fa:	fbb3 f2f2 	udiv	r2, r3, r2
9000b1fe:	697b      	ldr	r3, [r7, #20]
9000b200:	685b      	ldr	r3, [r3, #4]
9000b202:	085b      	lsrs	r3, r3, #1
9000b204:	441a      	add	r2, r3
9000b206:	697b      	ldr	r3, [r7, #20]
9000b208:	685b      	ldr	r3, [r3, #4]
9000b20a:	fbb2 f3f3 	udiv	r3, r2, r3
9000b20e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000b210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b212:	2b0f      	cmp	r3, #15
9000b214:	d909      	bls.n	9000b22a <UART_SetConfig+0xa8e>
9000b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b21c:	d205      	bcs.n	9000b22a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000b21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b220:	b29a      	uxth	r2, r3
9000b222:	697b      	ldr	r3, [r7, #20]
9000b224:	681b      	ldr	r3, [r3, #0]
9000b226:	60da      	str	r2, [r3, #12]
9000b228:	e002      	b.n	9000b230 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000b22a:	2301      	movs	r3, #1
9000b22c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000b230:	697b      	ldr	r3, [r7, #20]
9000b232:	2201      	movs	r2, #1
9000b234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000b238:	697b      	ldr	r3, [r7, #20]
9000b23a:	2201      	movs	r2, #1
9000b23c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000b240:	697b      	ldr	r3, [r7, #20]
9000b242:	2200      	movs	r2, #0
9000b244:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000b246:	697b      	ldr	r3, [r7, #20]
9000b248:	2200      	movs	r2, #0
9000b24a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000b24c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000b250:	4618      	mov	r0, r3
9000b252:	3748      	adds	r7, #72	@ 0x48
9000b254:	46bd      	mov	sp, r7
9000b256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000b25a:	bf00      	nop
9000b25c:	58024400 	.word	0x58024400
9000b260:	03d09000 	.word	0x03d09000
9000b264:	003d0900 	.word	0x003d0900
9000b268:	9000d354 	.word	0x9000d354

9000b26c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000b26c:	b480      	push	{r7}
9000b26e:	b083      	sub	sp, #12
9000b270:	af00      	add	r7, sp, #0
9000b272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000b274:	687b      	ldr	r3, [r7, #4]
9000b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b278:	f003 0308 	and.w	r3, r3, #8
9000b27c:	2b00      	cmp	r3, #0
9000b27e:	d00a      	beq.n	9000b296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000b280:	687b      	ldr	r3, [r7, #4]
9000b282:	681b      	ldr	r3, [r3, #0]
9000b284:	685b      	ldr	r3, [r3, #4]
9000b286:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000b28a:	687b      	ldr	r3, [r7, #4]
9000b28c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000b28e:	687b      	ldr	r3, [r7, #4]
9000b290:	681b      	ldr	r3, [r3, #0]
9000b292:	430a      	orrs	r2, r1
9000b294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000b296:	687b      	ldr	r3, [r7, #4]
9000b298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b29a:	f003 0301 	and.w	r3, r3, #1
9000b29e:	2b00      	cmp	r3, #0
9000b2a0:	d00a      	beq.n	9000b2b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000b2a2:	687b      	ldr	r3, [r7, #4]
9000b2a4:	681b      	ldr	r3, [r3, #0]
9000b2a6:	685b      	ldr	r3, [r3, #4]
9000b2a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000b2ac:	687b      	ldr	r3, [r7, #4]
9000b2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000b2b0:	687b      	ldr	r3, [r7, #4]
9000b2b2:	681b      	ldr	r3, [r3, #0]
9000b2b4:	430a      	orrs	r2, r1
9000b2b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000b2b8:	687b      	ldr	r3, [r7, #4]
9000b2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b2bc:	f003 0302 	and.w	r3, r3, #2
9000b2c0:	2b00      	cmp	r3, #0
9000b2c2:	d00a      	beq.n	9000b2da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000b2c4:	687b      	ldr	r3, [r7, #4]
9000b2c6:	681b      	ldr	r3, [r3, #0]
9000b2c8:	685b      	ldr	r3, [r3, #4]
9000b2ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000b2ce:	687b      	ldr	r3, [r7, #4]
9000b2d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000b2d2:	687b      	ldr	r3, [r7, #4]
9000b2d4:	681b      	ldr	r3, [r3, #0]
9000b2d6:	430a      	orrs	r2, r1
9000b2d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000b2da:	687b      	ldr	r3, [r7, #4]
9000b2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b2de:	f003 0304 	and.w	r3, r3, #4
9000b2e2:	2b00      	cmp	r3, #0
9000b2e4:	d00a      	beq.n	9000b2fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000b2e6:	687b      	ldr	r3, [r7, #4]
9000b2e8:	681b      	ldr	r3, [r3, #0]
9000b2ea:	685b      	ldr	r3, [r3, #4]
9000b2ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000b2f0:	687b      	ldr	r3, [r7, #4]
9000b2f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000b2f4:	687b      	ldr	r3, [r7, #4]
9000b2f6:	681b      	ldr	r3, [r3, #0]
9000b2f8:	430a      	orrs	r2, r1
9000b2fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000b2fc:	687b      	ldr	r3, [r7, #4]
9000b2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b300:	f003 0310 	and.w	r3, r3, #16
9000b304:	2b00      	cmp	r3, #0
9000b306:	d00a      	beq.n	9000b31e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000b308:	687b      	ldr	r3, [r7, #4]
9000b30a:	681b      	ldr	r3, [r3, #0]
9000b30c:	689b      	ldr	r3, [r3, #8]
9000b30e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000b312:	687b      	ldr	r3, [r7, #4]
9000b314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000b316:	687b      	ldr	r3, [r7, #4]
9000b318:	681b      	ldr	r3, [r3, #0]
9000b31a:	430a      	orrs	r2, r1
9000b31c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000b31e:	687b      	ldr	r3, [r7, #4]
9000b320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b322:	f003 0320 	and.w	r3, r3, #32
9000b326:	2b00      	cmp	r3, #0
9000b328:	d00a      	beq.n	9000b340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000b32a:	687b      	ldr	r3, [r7, #4]
9000b32c:	681b      	ldr	r3, [r3, #0]
9000b32e:	689b      	ldr	r3, [r3, #8]
9000b330:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000b334:	687b      	ldr	r3, [r7, #4]
9000b336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000b338:	687b      	ldr	r3, [r7, #4]
9000b33a:	681b      	ldr	r3, [r3, #0]
9000b33c:	430a      	orrs	r2, r1
9000b33e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000b340:	687b      	ldr	r3, [r7, #4]
9000b342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b348:	2b00      	cmp	r3, #0
9000b34a:	d01a      	beq.n	9000b382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000b34c:	687b      	ldr	r3, [r7, #4]
9000b34e:	681b      	ldr	r3, [r3, #0]
9000b350:	685b      	ldr	r3, [r3, #4]
9000b352:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000b356:	687b      	ldr	r3, [r7, #4]
9000b358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000b35a:	687b      	ldr	r3, [r7, #4]
9000b35c:	681b      	ldr	r3, [r3, #0]
9000b35e:	430a      	orrs	r2, r1
9000b360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000b362:	687b      	ldr	r3, [r7, #4]
9000b364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000b366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000b36a:	d10a      	bne.n	9000b382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000b36c:	687b      	ldr	r3, [r7, #4]
9000b36e:	681b      	ldr	r3, [r3, #0]
9000b370:	685b      	ldr	r3, [r3, #4]
9000b372:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000b376:	687b      	ldr	r3, [r7, #4]
9000b378:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000b37a:	687b      	ldr	r3, [r7, #4]
9000b37c:	681b      	ldr	r3, [r3, #0]
9000b37e:	430a      	orrs	r2, r1
9000b380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000b382:	687b      	ldr	r3, [r7, #4]
9000b384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b38a:	2b00      	cmp	r3, #0
9000b38c:	d00a      	beq.n	9000b3a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000b38e:	687b      	ldr	r3, [r7, #4]
9000b390:	681b      	ldr	r3, [r3, #0]
9000b392:	685b      	ldr	r3, [r3, #4]
9000b394:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000b398:	687b      	ldr	r3, [r7, #4]
9000b39a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000b39c:	687b      	ldr	r3, [r7, #4]
9000b39e:	681b      	ldr	r3, [r3, #0]
9000b3a0:	430a      	orrs	r2, r1
9000b3a2:	605a      	str	r2, [r3, #4]
  }
}
9000b3a4:	bf00      	nop
9000b3a6:	370c      	adds	r7, #12
9000b3a8:	46bd      	mov	sp, r7
9000b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b3ae:	4770      	bx	lr

9000b3b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000b3b0:	b580      	push	{r7, lr}
9000b3b2:	b098      	sub	sp, #96	@ 0x60
9000b3b4:	af02      	add	r7, sp, #8
9000b3b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000b3b8:	687b      	ldr	r3, [r7, #4]
9000b3ba:	2200      	movs	r2, #0
9000b3bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000b3c0:	f7f8 f9da 	bl	90003778 <HAL_GetTick>
9000b3c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000b3c6:	687b      	ldr	r3, [r7, #4]
9000b3c8:	681b      	ldr	r3, [r3, #0]
9000b3ca:	681b      	ldr	r3, [r3, #0]
9000b3cc:	f003 0308 	and.w	r3, r3, #8
9000b3d0:	2b08      	cmp	r3, #8
9000b3d2:	d12f      	bne.n	9000b434 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000b3d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000b3d8:	9300      	str	r3, [sp, #0]
9000b3da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000b3dc:	2200      	movs	r2, #0
9000b3de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000b3e2:	6878      	ldr	r0, [r7, #4]
9000b3e4:	f000 f88e 	bl	9000b504 <UART_WaitOnFlagUntilTimeout>
9000b3e8:	4603      	mov	r3, r0
9000b3ea:	2b00      	cmp	r3, #0
9000b3ec:	d022      	beq.n	9000b434 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000b3ee:	687b      	ldr	r3, [r7, #4]
9000b3f0:	681b      	ldr	r3, [r3, #0]
9000b3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b3f6:	e853 3f00 	ldrex	r3, [r3]
9000b3fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000b3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000b3fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000b402:	653b      	str	r3, [r7, #80]	@ 0x50
9000b404:	687b      	ldr	r3, [r7, #4]
9000b406:	681b      	ldr	r3, [r3, #0]
9000b408:	461a      	mov	r2, r3
9000b40a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000b40c:	647b      	str	r3, [r7, #68]	@ 0x44
9000b40e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000b412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000b414:	e841 2300 	strex	r3, r2, [r1]
9000b418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000b41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b41c:	2b00      	cmp	r3, #0
9000b41e:	d1e6      	bne.n	9000b3ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000b420:	687b      	ldr	r3, [r7, #4]
9000b422:	2220      	movs	r2, #32
9000b424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000b428:	687b      	ldr	r3, [r7, #4]
9000b42a:	2200      	movs	r2, #0
9000b42c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000b430:	2303      	movs	r3, #3
9000b432:	e063      	b.n	9000b4fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000b434:	687b      	ldr	r3, [r7, #4]
9000b436:	681b      	ldr	r3, [r3, #0]
9000b438:	681b      	ldr	r3, [r3, #0]
9000b43a:	f003 0304 	and.w	r3, r3, #4
9000b43e:	2b04      	cmp	r3, #4
9000b440:	d149      	bne.n	9000b4d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000b442:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000b446:	9300      	str	r3, [sp, #0]
9000b448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000b44a:	2200      	movs	r2, #0
9000b44c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000b450:	6878      	ldr	r0, [r7, #4]
9000b452:	f000 f857 	bl	9000b504 <UART_WaitOnFlagUntilTimeout>
9000b456:	4603      	mov	r3, r0
9000b458:	2b00      	cmp	r3, #0
9000b45a:	d03c      	beq.n	9000b4d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000b45c:	687b      	ldr	r3, [r7, #4]
9000b45e:	681b      	ldr	r3, [r3, #0]
9000b460:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b464:	e853 3f00 	ldrex	r3, [r3]
9000b468:	623b      	str	r3, [r7, #32]
   return(result);
9000b46a:	6a3b      	ldr	r3, [r7, #32]
9000b46c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000b470:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000b472:	687b      	ldr	r3, [r7, #4]
9000b474:	681b      	ldr	r3, [r3, #0]
9000b476:	461a      	mov	r2, r3
9000b478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000b47a:	633b      	str	r3, [r7, #48]	@ 0x30
9000b47c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b47e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000b480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000b482:	e841 2300 	strex	r3, r2, [r1]
9000b486:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000b488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b48a:	2b00      	cmp	r3, #0
9000b48c:	d1e6      	bne.n	9000b45c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000b48e:	687b      	ldr	r3, [r7, #4]
9000b490:	681b      	ldr	r3, [r3, #0]
9000b492:	3308      	adds	r3, #8
9000b494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b496:	693b      	ldr	r3, [r7, #16]
9000b498:	e853 3f00 	ldrex	r3, [r3]
9000b49c:	60fb      	str	r3, [r7, #12]
   return(result);
9000b49e:	68fb      	ldr	r3, [r7, #12]
9000b4a0:	f023 0301 	bic.w	r3, r3, #1
9000b4a4:	64bb      	str	r3, [r7, #72]	@ 0x48
9000b4a6:	687b      	ldr	r3, [r7, #4]
9000b4a8:	681b      	ldr	r3, [r3, #0]
9000b4aa:	3308      	adds	r3, #8
9000b4ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000b4ae:	61fa      	str	r2, [r7, #28]
9000b4b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b4b2:	69b9      	ldr	r1, [r7, #24]
9000b4b4:	69fa      	ldr	r2, [r7, #28]
9000b4b6:	e841 2300 	strex	r3, r2, [r1]
9000b4ba:	617b      	str	r3, [r7, #20]
   return(result);
9000b4bc:	697b      	ldr	r3, [r7, #20]
9000b4be:	2b00      	cmp	r3, #0
9000b4c0:	d1e5      	bne.n	9000b48e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000b4c2:	687b      	ldr	r3, [r7, #4]
9000b4c4:	2220      	movs	r2, #32
9000b4c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000b4ca:	687b      	ldr	r3, [r7, #4]
9000b4cc:	2200      	movs	r2, #0
9000b4ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000b4d2:	2303      	movs	r3, #3
9000b4d4:	e012      	b.n	9000b4fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000b4d6:	687b      	ldr	r3, [r7, #4]
9000b4d8:	2220      	movs	r2, #32
9000b4da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000b4de:	687b      	ldr	r3, [r7, #4]
9000b4e0:	2220      	movs	r2, #32
9000b4e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000b4e6:	687b      	ldr	r3, [r7, #4]
9000b4e8:	2200      	movs	r2, #0
9000b4ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000b4ec:	687b      	ldr	r3, [r7, #4]
9000b4ee:	2200      	movs	r2, #0
9000b4f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000b4f2:	687b      	ldr	r3, [r7, #4]
9000b4f4:	2200      	movs	r2, #0
9000b4f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000b4fa:	2300      	movs	r3, #0
}
9000b4fc:	4618      	mov	r0, r3
9000b4fe:	3758      	adds	r7, #88	@ 0x58
9000b500:	46bd      	mov	sp, r7
9000b502:	bd80      	pop	{r7, pc}

9000b504 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000b504:	b580      	push	{r7, lr}
9000b506:	b084      	sub	sp, #16
9000b508:	af00      	add	r7, sp, #0
9000b50a:	60f8      	str	r0, [r7, #12]
9000b50c:	60b9      	str	r1, [r7, #8]
9000b50e:	603b      	str	r3, [r7, #0]
9000b510:	4613      	mov	r3, r2
9000b512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000b514:	e04f      	b.n	9000b5b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000b516:	69bb      	ldr	r3, [r7, #24]
9000b518:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b51c:	d04b      	beq.n	9000b5b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000b51e:	f7f8 f92b 	bl	90003778 <HAL_GetTick>
9000b522:	4602      	mov	r2, r0
9000b524:	683b      	ldr	r3, [r7, #0]
9000b526:	1ad3      	subs	r3, r2, r3
9000b528:	69ba      	ldr	r2, [r7, #24]
9000b52a:	429a      	cmp	r2, r3
9000b52c:	d302      	bcc.n	9000b534 <UART_WaitOnFlagUntilTimeout+0x30>
9000b52e:	69bb      	ldr	r3, [r7, #24]
9000b530:	2b00      	cmp	r3, #0
9000b532:	d101      	bne.n	9000b538 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000b534:	2303      	movs	r3, #3
9000b536:	e04e      	b.n	9000b5d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000b538:	68fb      	ldr	r3, [r7, #12]
9000b53a:	681b      	ldr	r3, [r3, #0]
9000b53c:	681b      	ldr	r3, [r3, #0]
9000b53e:	f003 0304 	and.w	r3, r3, #4
9000b542:	2b00      	cmp	r3, #0
9000b544:	d037      	beq.n	9000b5b6 <UART_WaitOnFlagUntilTimeout+0xb2>
9000b546:	68bb      	ldr	r3, [r7, #8]
9000b548:	2b80      	cmp	r3, #128	@ 0x80
9000b54a:	d034      	beq.n	9000b5b6 <UART_WaitOnFlagUntilTimeout+0xb2>
9000b54c:	68bb      	ldr	r3, [r7, #8]
9000b54e:	2b40      	cmp	r3, #64	@ 0x40
9000b550:	d031      	beq.n	9000b5b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000b552:	68fb      	ldr	r3, [r7, #12]
9000b554:	681b      	ldr	r3, [r3, #0]
9000b556:	69db      	ldr	r3, [r3, #28]
9000b558:	f003 0308 	and.w	r3, r3, #8
9000b55c:	2b08      	cmp	r3, #8
9000b55e:	d110      	bne.n	9000b582 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000b560:	68fb      	ldr	r3, [r7, #12]
9000b562:	681b      	ldr	r3, [r3, #0]
9000b564:	2208      	movs	r2, #8
9000b566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000b568:	68f8      	ldr	r0, [r7, #12]
9000b56a:	f000 f839 	bl	9000b5e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000b56e:	68fb      	ldr	r3, [r7, #12]
9000b570:	2208      	movs	r2, #8
9000b572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000b576:	68fb      	ldr	r3, [r7, #12]
9000b578:	2200      	movs	r2, #0
9000b57a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000b57e:	2301      	movs	r3, #1
9000b580:	e029      	b.n	9000b5d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000b582:	68fb      	ldr	r3, [r7, #12]
9000b584:	681b      	ldr	r3, [r3, #0]
9000b586:	69db      	ldr	r3, [r3, #28]
9000b588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000b58c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000b590:	d111      	bne.n	9000b5b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000b592:	68fb      	ldr	r3, [r7, #12]
9000b594:	681b      	ldr	r3, [r3, #0]
9000b596:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000b59a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000b59c:	68f8      	ldr	r0, [r7, #12]
9000b59e:	f000 f81f 	bl	9000b5e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000b5a2:	68fb      	ldr	r3, [r7, #12]
9000b5a4:	2220      	movs	r2, #32
9000b5a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000b5aa:	68fb      	ldr	r3, [r7, #12]
9000b5ac:	2200      	movs	r2, #0
9000b5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000b5b2:	2303      	movs	r3, #3
9000b5b4:	e00f      	b.n	9000b5d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000b5b6:	68fb      	ldr	r3, [r7, #12]
9000b5b8:	681b      	ldr	r3, [r3, #0]
9000b5ba:	69da      	ldr	r2, [r3, #28]
9000b5bc:	68bb      	ldr	r3, [r7, #8]
9000b5be:	4013      	ands	r3, r2
9000b5c0:	68ba      	ldr	r2, [r7, #8]
9000b5c2:	429a      	cmp	r2, r3
9000b5c4:	bf0c      	ite	eq
9000b5c6:	2301      	moveq	r3, #1
9000b5c8:	2300      	movne	r3, #0
9000b5ca:	b2db      	uxtb	r3, r3
9000b5cc:	461a      	mov	r2, r3
9000b5ce:	79fb      	ldrb	r3, [r7, #7]
9000b5d0:	429a      	cmp	r2, r3
9000b5d2:	d0a0      	beq.n	9000b516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000b5d4:	2300      	movs	r3, #0
}
9000b5d6:	4618      	mov	r0, r3
9000b5d8:	3710      	adds	r7, #16
9000b5da:	46bd      	mov	sp, r7
9000b5dc:	bd80      	pop	{r7, pc}
	...

9000b5e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000b5e0:	b480      	push	{r7}
9000b5e2:	b095      	sub	sp, #84	@ 0x54
9000b5e4:	af00      	add	r7, sp, #0
9000b5e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000b5e8:	687b      	ldr	r3, [r7, #4]
9000b5ea:	681b      	ldr	r3, [r3, #0]
9000b5ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000b5f0:	e853 3f00 	ldrex	r3, [r3]
9000b5f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000b5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000b5f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000b5fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000b5fe:	687b      	ldr	r3, [r7, #4]
9000b600:	681b      	ldr	r3, [r3, #0]
9000b602:	461a      	mov	r2, r3
9000b604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000b606:	643b      	str	r3, [r7, #64]	@ 0x40
9000b608:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b60a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000b60c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000b60e:	e841 2300 	strex	r3, r2, [r1]
9000b612:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000b614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b616:	2b00      	cmp	r3, #0
9000b618:	d1e6      	bne.n	9000b5e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000b61a:	687b      	ldr	r3, [r7, #4]
9000b61c:	681b      	ldr	r3, [r3, #0]
9000b61e:	3308      	adds	r3, #8
9000b620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b622:	6a3b      	ldr	r3, [r7, #32]
9000b624:	e853 3f00 	ldrex	r3, [r3]
9000b628:	61fb      	str	r3, [r7, #28]
   return(result);
9000b62a:	69fa      	ldr	r2, [r7, #28]
9000b62c:	4b1e      	ldr	r3, [pc, #120]	@ (9000b6a8 <UART_EndRxTransfer+0xc8>)
9000b62e:	4013      	ands	r3, r2
9000b630:	64bb      	str	r3, [r7, #72]	@ 0x48
9000b632:	687b      	ldr	r3, [r7, #4]
9000b634:	681b      	ldr	r3, [r3, #0]
9000b636:	3308      	adds	r3, #8
9000b638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000b63a:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000b63c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b63e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000b640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000b642:	e841 2300 	strex	r3, r2, [r1]
9000b646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b64a:	2b00      	cmp	r3, #0
9000b64c:	d1e5      	bne.n	9000b61a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000b64e:	687b      	ldr	r3, [r7, #4]
9000b650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000b652:	2b01      	cmp	r3, #1
9000b654:	d118      	bne.n	9000b688 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000b656:	687b      	ldr	r3, [r7, #4]
9000b658:	681b      	ldr	r3, [r3, #0]
9000b65a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b65c:	68fb      	ldr	r3, [r7, #12]
9000b65e:	e853 3f00 	ldrex	r3, [r3]
9000b662:	60bb      	str	r3, [r7, #8]
   return(result);
9000b664:	68bb      	ldr	r3, [r7, #8]
9000b666:	f023 0310 	bic.w	r3, r3, #16
9000b66a:	647b      	str	r3, [r7, #68]	@ 0x44
9000b66c:	687b      	ldr	r3, [r7, #4]
9000b66e:	681b      	ldr	r3, [r3, #0]
9000b670:	461a      	mov	r2, r3
9000b672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000b674:	61bb      	str	r3, [r7, #24]
9000b676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b678:	6979      	ldr	r1, [r7, #20]
9000b67a:	69ba      	ldr	r2, [r7, #24]
9000b67c:	e841 2300 	strex	r3, r2, [r1]
9000b680:	613b      	str	r3, [r7, #16]
   return(result);
9000b682:	693b      	ldr	r3, [r7, #16]
9000b684:	2b00      	cmp	r3, #0
9000b686:	d1e6      	bne.n	9000b656 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000b688:	687b      	ldr	r3, [r7, #4]
9000b68a:	2220      	movs	r2, #32
9000b68c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000b690:	687b      	ldr	r3, [r7, #4]
9000b692:	2200      	movs	r2, #0
9000b694:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000b696:	687b      	ldr	r3, [r7, #4]
9000b698:	2200      	movs	r2, #0
9000b69a:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000b69c:	bf00      	nop
9000b69e:	3754      	adds	r7, #84	@ 0x54
9000b6a0:	46bd      	mov	sp, r7
9000b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b6a6:	4770      	bx	lr
9000b6a8:	effffffe 	.word	0xeffffffe

9000b6ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000b6ac:	b480      	push	{r7}
9000b6ae:	b085      	sub	sp, #20
9000b6b0:	af00      	add	r7, sp, #0
9000b6b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000b6b4:	687b      	ldr	r3, [r7, #4]
9000b6b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000b6ba:	2b01      	cmp	r3, #1
9000b6bc:	d101      	bne.n	9000b6c2 <HAL_UARTEx_DisableFifoMode+0x16>
9000b6be:	2302      	movs	r3, #2
9000b6c0:	e027      	b.n	9000b712 <HAL_UARTEx_DisableFifoMode+0x66>
9000b6c2:	687b      	ldr	r3, [r7, #4]
9000b6c4:	2201      	movs	r2, #1
9000b6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000b6ca:	687b      	ldr	r3, [r7, #4]
9000b6cc:	2224      	movs	r2, #36	@ 0x24
9000b6ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000b6d2:	687b      	ldr	r3, [r7, #4]
9000b6d4:	681b      	ldr	r3, [r3, #0]
9000b6d6:	681b      	ldr	r3, [r3, #0]
9000b6d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000b6da:	687b      	ldr	r3, [r7, #4]
9000b6dc:	681b      	ldr	r3, [r3, #0]
9000b6de:	681a      	ldr	r2, [r3, #0]
9000b6e0:	687b      	ldr	r3, [r7, #4]
9000b6e2:	681b      	ldr	r3, [r3, #0]
9000b6e4:	f022 0201 	bic.w	r2, r2, #1
9000b6e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000b6ea:	68fb      	ldr	r3, [r7, #12]
9000b6ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000b6f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000b6f2:	687b      	ldr	r3, [r7, #4]
9000b6f4:	2200      	movs	r2, #0
9000b6f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000b6f8:	687b      	ldr	r3, [r7, #4]
9000b6fa:	681b      	ldr	r3, [r3, #0]
9000b6fc:	68fa      	ldr	r2, [r7, #12]
9000b6fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000b700:	687b      	ldr	r3, [r7, #4]
9000b702:	2220      	movs	r2, #32
9000b704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000b708:	687b      	ldr	r3, [r7, #4]
9000b70a:	2200      	movs	r2, #0
9000b70c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000b710:	2300      	movs	r3, #0
}
9000b712:	4618      	mov	r0, r3
9000b714:	3714      	adds	r7, #20
9000b716:	46bd      	mov	sp, r7
9000b718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b71c:	4770      	bx	lr

9000b71e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000b71e:	b580      	push	{r7, lr}
9000b720:	b084      	sub	sp, #16
9000b722:	af00      	add	r7, sp, #0
9000b724:	6078      	str	r0, [r7, #4]
9000b726:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000b728:	687b      	ldr	r3, [r7, #4]
9000b72a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000b72e:	2b01      	cmp	r3, #1
9000b730:	d101      	bne.n	9000b736 <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000b732:	2302      	movs	r3, #2
9000b734:	e02d      	b.n	9000b792 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000b736:	687b      	ldr	r3, [r7, #4]
9000b738:	2201      	movs	r2, #1
9000b73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000b73e:	687b      	ldr	r3, [r7, #4]
9000b740:	2224      	movs	r2, #36	@ 0x24
9000b742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000b746:	687b      	ldr	r3, [r7, #4]
9000b748:	681b      	ldr	r3, [r3, #0]
9000b74a:	681b      	ldr	r3, [r3, #0]
9000b74c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000b74e:	687b      	ldr	r3, [r7, #4]
9000b750:	681b      	ldr	r3, [r3, #0]
9000b752:	681a      	ldr	r2, [r3, #0]
9000b754:	687b      	ldr	r3, [r7, #4]
9000b756:	681b      	ldr	r3, [r3, #0]
9000b758:	f022 0201 	bic.w	r2, r2, #1
9000b75c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000b75e:	687b      	ldr	r3, [r7, #4]
9000b760:	681b      	ldr	r3, [r3, #0]
9000b762:	689b      	ldr	r3, [r3, #8]
9000b764:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000b768:	687b      	ldr	r3, [r7, #4]
9000b76a:	681b      	ldr	r3, [r3, #0]
9000b76c:	683a      	ldr	r2, [r7, #0]
9000b76e:	430a      	orrs	r2, r1
9000b770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000b772:	6878      	ldr	r0, [r7, #4]
9000b774:	f000 f850 	bl	9000b818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000b778:	687b      	ldr	r3, [r7, #4]
9000b77a:	681b      	ldr	r3, [r3, #0]
9000b77c:	68fa      	ldr	r2, [r7, #12]
9000b77e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000b780:	687b      	ldr	r3, [r7, #4]
9000b782:	2220      	movs	r2, #32
9000b784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000b788:	687b      	ldr	r3, [r7, #4]
9000b78a:	2200      	movs	r2, #0
9000b78c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000b790:	2300      	movs	r3, #0
}
9000b792:	4618      	mov	r0, r3
9000b794:	3710      	adds	r7, #16
9000b796:	46bd      	mov	sp, r7
9000b798:	bd80      	pop	{r7, pc}

9000b79a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000b79a:	b580      	push	{r7, lr}
9000b79c:	b084      	sub	sp, #16
9000b79e:	af00      	add	r7, sp, #0
9000b7a0:	6078      	str	r0, [r7, #4]
9000b7a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000b7a4:	687b      	ldr	r3, [r7, #4]
9000b7a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000b7aa:	2b01      	cmp	r3, #1
9000b7ac:	d101      	bne.n	9000b7b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000b7ae:	2302      	movs	r3, #2
9000b7b0:	e02d      	b.n	9000b80e <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000b7b2:	687b      	ldr	r3, [r7, #4]
9000b7b4:	2201      	movs	r2, #1
9000b7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000b7ba:	687b      	ldr	r3, [r7, #4]
9000b7bc:	2224      	movs	r2, #36	@ 0x24
9000b7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000b7c2:	687b      	ldr	r3, [r7, #4]
9000b7c4:	681b      	ldr	r3, [r3, #0]
9000b7c6:	681b      	ldr	r3, [r3, #0]
9000b7c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000b7ca:	687b      	ldr	r3, [r7, #4]
9000b7cc:	681b      	ldr	r3, [r3, #0]
9000b7ce:	681a      	ldr	r2, [r3, #0]
9000b7d0:	687b      	ldr	r3, [r7, #4]
9000b7d2:	681b      	ldr	r3, [r3, #0]
9000b7d4:	f022 0201 	bic.w	r2, r2, #1
9000b7d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000b7da:	687b      	ldr	r3, [r7, #4]
9000b7dc:	681b      	ldr	r3, [r3, #0]
9000b7de:	689b      	ldr	r3, [r3, #8]
9000b7e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000b7e4:	687b      	ldr	r3, [r7, #4]
9000b7e6:	681b      	ldr	r3, [r3, #0]
9000b7e8:	683a      	ldr	r2, [r7, #0]
9000b7ea:	430a      	orrs	r2, r1
9000b7ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000b7ee:	6878      	ldr	r0, [r7, #4]
9000b7f0:	f000 f812 	bl	9000b818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000b7f4:	687b      	ldr	r3, [r7, #4]
9000b7f6:	681b      	ldr	r3, [r3, #0]
9000b7f8:	68fa      	ldr	r2, [r7, #12]
9000b7fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000b7fc:	687b      	ldr	r3, [r7, #4]
9000b7fe:	2220      	movs	r2, #32
9000b800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000b804:	687b      	ldr	r3, [r7, #4]
9000b806:	2200      	movs	r2, #0
9000b808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000b80c:	2300      	movs	r3, #0
}
9000b80e:	4618      	mov	r0, r3
9000b810:	3710      	adds	r7, #16
9000b812:	46bd      	mov	sp, r7
9000b814:	bd80      	pop	{r7, pc}
	...

9000b818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000b818:	b480      	push	{r7}
9000b81a:	b085      	sub	sp, #20
9000b81c:	af00      	add	r7, sp, #0
9000b81e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000b820:	687b      	ldr	r3, [r7, #4]
9000b822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000b824:	2b00      	cmp	r3, #0
9000b826:	d108      	bne.n	9000b83a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000b828:	687b      	ldr	r3, [r7, #4]
9000b82a:	2201      	movs	r2, #1
9000b82c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000b830:	687b      	ldr	r3, [r7, #4]
9000b832:	2201      	movs	r2, #1
9000b834:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000b838:	e031      	b.n	9000b89e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000b83a:	2310      	movs	r3, #16
9000b83c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000b83e:	2310      	movs	r3, #16
9000b840:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000b842:	687b      	ldr	r3, [r7, #4]
9000b844:	681b      	ldr	r3, [r3, #0]
9000b846:	689b      	ldr	r3, [r3, #8]
9000b848:	0e5b      	lsrs	r3, r3, #25
9000b84a:	b2db      	uxtb	r3, r3
9000b84c:	f003 0307 	and.w	r3, r3, #7
9000b850:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000b852:	687b      	ldr	r3, [r7, #4]
9000b854:	681b      	ldr	r3, [r3, #0]
9000b856:	689b      	ldr	r3, [r3, #8]
9000b858:	0f5b      	lsrs	r3, r3, #29
9000b85a:	b2db      	uxtb	r3, r3
9000b85c:	f003 0307 	and.w	r3, r3, #7
9000b860:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000b862:	7bbb      	ldrb	r3, [r7, #14]
9000b864:	7b3a      	ldrb	r2, [r7, #12]
9000b866:	4911      	ldr	r1, [pc, #68]	@ (9000b8ac <UARTEx_SetNbDataToProcess+0x94>)
9000b868:	5c8a      	ldrb	r2, [r1, r2]
9000b86a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000b86e:	7b3a      	ldrb	r2, [r7, #12]
9000b870:	490f      	ldr	r1, [pc, #60]	@ (9000b8b0 <UARTEx_SetNbDataToProcess+0x98>)
9000b872:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000b874:	fb93 f3f2 	sdiv	r3, r3, r2
9000b878:	b29a      	uxth	r2, r3
9000b87a:	687b      	ldr	r3, [r7, #4]
9000b87c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000b880:	7bfb      	ldrb	r3, [r7, #15]
9000b882:	7b7a      	ldrb	r2, [r7, #13]
9000b884:	4909      	ldr	r1, [pc, #36]	@ (9000b8ac <UARTEx_SetNbDataToProcess+0x94>)
9000b886:	5c8a      	ldrb	r2, [r1, r2]
9000b888:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000b88c:	7b7a      	ldrb	r2, [r7, #13]
9000b88e:	4908      	ldr	r1, [pc, #32]	@ (9000b8b0 <UARTEx_SetNbDataToProcess+0x98>)
9000b890:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000b892:	fb93 f3f2 	sdiv	r3, r3, r2
9000b896:	b29a      	uxth	r2, r3
9000b898:	687b      	ldr	r3, [r7, #4]
9000b89a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000b89e:	bf00      	nop
9000b8a0:	3714      	adds	r7, #20
9000b8a2:	46bd      	mov	sp, r7
9000b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b8a8:	4770      	bx	lr
9000b8aa:	bf00      	nop
9000b8ac:	9000d36c 	.word	0x9000d36c
9000b8b0:	9000d374 	.word	0x9000d374

9000b8b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000b8b4:	b480      	push	{r7}
9000b8b6:	b083      	sub	sp, #12
9000b8b8:	af00      	add	r7, sp, #0
9000b8ba:	6078      	str	r0, [r7, #4]
9000b8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000b8be:	683b      	ldr	r3, [r7, #0]
9000b8c0:	681b      	ldr	r3, [r3, #0]
9000b8c2:	2b00      	cmp	r3, #0
9000b8c4:	d121      	bne.n	9000b90a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000b8c6:	687b      	ldr	r3, [r7, #4]
9000b8c8:	681a      	ldr	r2, [r3, #0]
9000b8ca:	4b27      	ldr	r3, [pc, #156]	@ (9000b968 <FMC_SDRAM_Init+0xb4>)
9000b8cc:	4013      	ands	r3, r2
9000b8ce:	683a      	ldr	r2, [r7, #0]
9000b8d0:	6851      	ldr	r1, [r2, #4]
9000b8d2:	683a      	ldr	r2, [r7, #0]
9000b8d4:	6892      	ldr	r2, [r2, #8]
9000b8d6:	4311      	orrs	r1, r2
9000b8d8:	683a      	ldr	r2, [r7, #0]
9000b8da:	68d2      	ldr	r2, [r2, #12]
9000b8dc:	4311      	orrs	r1, r2
9000b8de:	683a      	ldr	r2, [r7, #0]
9000b8e0:	6912      	ldr	r2, [r2, #16]
9000b8e2:	4311      	orrs	r1, r2
9000b8e4:	683a      	ldr	r2, [r7, #0]
9000b8e6:	6952      	ldr	r2, [r2, #20]
9000b8e8:	4311      	orrs	r1, r2
9000b8ea:	683a      	ldr	r2, [r7, #0]
9000b8ec:	6992      	ldr	r2, [r2, #24]
9000b8ee:	4311      	orrs	r1, r2
9000b8f0:	683a      	ldr	r2, [r7, #0]
9000b8f2:	69d2      	ldr	r2, [r2, #28]
9000b8f4:	4311      	orrs	r1, r2
9000b8f6:	683a      	ldr	r2, [r7, #0]
9000b8f8:	6a12      	ldr	r2, [r2, #32]
9000b8fa:	4311      	orrs	r1, r2
9000b8fc:	683a      	ldr	r2, [r7, #0]
9000b8fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000b900:	430a      	orrs	r2, r1
9000b902:	431a      	orrs	r2, r3
9000b904:	687b      	ldr	r3, [r7, #4]
9000b906:	601a      	str	r2, [r3, #0]
9000b908:	e026      	b.n	9000b958 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000b90a:	687b      	ldr	r3, [r7, #4]
9000b90c:	681b      	ldr	r3, [r3, #0]
9000b90e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000b912:	683b      	ldr	r3, [r7, #0]
9000b914:	69d9      	ldr	r1, [r3, #28]
9000b916:	683b      	ldr	r3, [r7, #0]
9000b918:	6a1b      	ldr	r3, [r3, #32]
9000b91a:	4319      	orrs	r1, r3
9000b91c:	683b      	ldr	r3, [r7, #0]
9000b91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b920:	430b      	orrs	r3, r1
9000b922:	431a      	orrs	r2, r3
9000b924:	687b      	ldr	r3, [r7, #4]
9000b926:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000b928:	687b      	ldr	r3, [r7, #4]
9000b92a:	685a      	ldr	r2, [r3, #4]
9000b92c:	4b0e      	ldr	r3, [pc, #56]	@ (9000b968 <FMC_SDRAM_Init+0xb4>)
9000b92e:	4013      	ands	r3, r2
9000b930:	683a      	ldr	r2, [r7, #0]
9000b932:	6851      	ldr	r1, [r2, #4]
9000b934:	683a      	ldr	r2, [r7, #0]
9000b936:	6892      	ldr	r2, [r2, #8]
9000b938:	4311      	orrs	r1, r2
9000b93a:	683a      	ldr	r2, [r7, #0]
9000b93c:	68d2      	ldr	r2, [r2, #12]
9000b93e:	4311      	orrs	r1, r2
9000b940:	683a      	ldr	r2, [r7, #0]
9000b942:	6912      	ldr	r2, [r2, #16]
9000b944:	4311      	orrs	r1, r2
9000b946:	683a      	ldr	r2, [r7, #0]
9000b948:	6952      	ldr	r2, [r2, #20]
9000b94a:	4311      	orrs	r1, r2
9000b94c:	683a      	ldr	r2, [r7, #0]
9000b94e:	6992      	ldr	r2, [r2, #24]
9000b950:	430a      	orrs	r2, r1
9000b952:	431a      	orrs	r2, r3
9000b954:	687b      	ldr	r3, [r7, #4]
9000b956:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000b958:	2300      	movs	r3, #0
}
9000b95a:	4618      	mov	r0, r3
9000b95c:	370c      	adds	r7, #12
9000b95e:	46bd      	mov	sp, r7
9000b960:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b964:	4770      	bx	lr
9000b966:	bf00      	nop
9000b968:	ffff8000 	.word	0xffff8000

9000b96c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000b96c:	b480      	push	{r7}
9000b96e:	b085      	sub	sp, #20
9000b970:	af00      	add	r7, sp, #0
9000b972:	60f8      	str	r0, [r7, #12]
9000b974:	60b9      	str	r1, [r7, #8]
9000b976:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000b978:	687b      	ldr	r3, [r7, #4]
9000b97a:	2b00      	cmp	r3, #0
9000b97c:	d128      	bne.n	9000b9d0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b97e:	68fb      	ldr	r3, [r7, #12]
9000b980:	689b      	ldr	r3, [r3, #8]
9000b982:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b986:	68bb      	ldr	r3, [r7, #8]
9000b988:	681b      	ldr	r3, [r3, #0]
9000b98a:	1e59      	subs	r1, r3, #1
9000b98c:	68bb      	ldr	r3, [r7, #8]
9000b98e:	685b      	ldr	r3, [r3, #4]
9000b990:	3b01      	subs	r3, #1
9000b992:	011b      	lsls	r3, r3, #4
9000b994:	4319      	orrs	r1, r3
9000b996:	68bb      	ldr	r3, [r7, #8]
9000b998:	689b      	ldr	r3, [r3, #8]
9000b99a:	3b01      	subs	r3, #1
9000b99c:	021b      	lsls	r3, r3, #8
9000b99e:	4319      	orrs	r1, r3
9000b9a0:	68bb      	ldr	r3, [r7, #8]
9000b9a2:	68db      	ldr	r3, [r3, #12]
9000b9a4:	3b01      	subs	r3, #1
9000b9a6:	031b      	lsls	r3, r3, #12
9000b9a8:	4319      	orrs	r1, r3
9000b9aa:	68bb      	ldr	r3, [r7, #8]
9000b9ac:	691b      	ldr	r3, [r3, #16]
9000b9ae:	3b01      	subs	r3, #1
9000b9b0:	041b      	lsls	r3, r3, #16
9000b9b2:	4319      	orrs	r1, r3
9000b9b4:	68bb      	ldr	r3, [r7, #8]
9000b9b6:	695b      	ldr	r3, [r3, #20]
9000b9b8:	3b01      	subs	r3, #1
9000b9ba:	051b      	lsls	r3, r3, #20
9000b9bc:	4319      	orrs	r1, r3
9000b9be:	68bb      	ldr	r3, [r7, #8]
9000b9c0:	699b      	ldr	r3, [r3, #24]
9000b9c2:	3b01      	subs	r3, #1
9000b9c4:	061b      	lsls	r3, r3, #24
9000b9c6:	430b      	orrs	r3, r1
9000b9c8:	431a      	orrs	r2, r3
9000b9ca:	68fb      	ldr	r3, [r7, #12]
9000b9cc:	609a      	str	r2, [r3, #8]
9000b9ce:	e02d      	b.n	9000ba2c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b9d0:	68fb      	ldr	r3, [r7, #12]
9000b9d2:	689a      	ldr	r2, [r3, #8]
9000b9d4:	4b19      	ldr	r3, [pc, #100]	@ (9000ba3c <FMC_SDRAM_Timing_Init+0xd0>)
9000b9d6:	4013      	ands	r3, r2
9000b9d8:	68ba      	ldr	r2, [r7, #8]
9000b9da:	68d2      	ldr	r2, [r2, #12]
9000b9dc:	3a01      	subs	r2, #1
9000b9de:	0311      	lsls	r1, r2, #12
9000b9e0:	68ba      	ldr	r2, [r7, #8]
9000b9e2:	6952      	ldr	r2, [r2, #20]
9000b9e4:	3a01      	subs	r2, #1
9000b9e6:	0512      	lsls	r2, r2, #20
9000b9e8:	430a      	orrs	r2, r1
9000b9ea:	431a      	orrs	r2, r3
9000b9ec:	68fb      	ldr	r3, [r7, #12]
9000b9ee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000b9f0:	68fb      	ldr	r3, [r7, #12]
9000b9f2:	68db      	ldr	r3, [r3, #12]
9000b9f4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b9f8:	68bb      	ldr	r3, [r7, #8]
9000b9fa:	681b      	ldr	r3, [r3, #0]
9000b9fc:	1e59      	subs	r1, r3, #1
9000b9fe:	68bb      	ldr	r3, [r7, #8]
9000ba00:	685b      	ldr	r3, [r3, #4]
9000ba02:	3b01      	subs	r3, #1
9000ba04:	011b      	lsls	r3, r3, #4
9000ba06:	4319      	orrs	r1, r3
9000ba08:	68bb      	ldr	r3, [r7, #8]
9000ba0a:	689b      	ldr	r3, [r3, #8]
9000ba0c:	3b01      	subs	r3, #1
9000ba0e:	021b      	lsls	r3, r3, #8
9000ba10:	4319      	orrs	r1, r3
9000ba12:	68bb      	ldr	r3, [r7, #8]
9000ba14:	691b      	ldr	r3, [r3, #16]
9000ba16:	3b01      	subs	r3, #1
9000ba18:	041b      	lsls	r3, r3, #16
9000ba1a:	4319      	orrs	r1, r3
9000ba1c:	68bb      	ldr	r3, [r7, #8]
9000ba1e:	699b      	ldr	r3, [r3, #24]
9000ba20:	3b01      	subs	r3, #1
9000ba22:	061b      	lsls	r3, r3, #24
9000ba24:	430b      	orrs	r3, r1
9000ba26:	431a      	orrs	r2, r3
9000ba28:	68fb      	ldr	r3, [r7, #12]
9000ba2a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000ba2c:	2300      	movs	r3, #0
}
9000ba2e:	4618      	mov	r0, r3
9000ba30:	3714      	adds	r7, #20
9000ba32:	46bd      	mov	sp, r7
9000ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba38:	4770      	bx	lr
9000ba3a:	bf00      	nop
9000ba3c:	ff0f0fff 	.word	0xff0f0fff

9000ba40 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000ba40:	b480      	push	{r7}
9000ba42:	b085      	sub	sp, #20
9000ba44:	af00      	add	r7, sp, #0
9000ba46:	60f8      	str	r0, [r7, #12]
9000ba48:	60b9      	str	r1, [r7, #8]
9000ba4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ba4c:	68fb      	ldr	r3, [r7, #12]
9000ba4e:	691a      	ldr	r2, [r3, #16]
9000ba50:	4b0c      	ldr	r3, [pc, #48]	@ (9000ba84 <FMC_SDRAM_SendCommand+0x44>)
9000ba52:	4013      	ands	r3, r2
9000ba54:	68ba      	ldr	r2, [r7, #8]
9000ba56:	6811      	ldr	r1, [r2, #0]
9000ba58:	68ba      	ldr	r2, [r7, #8]
9000ba5a:	6852      	ldr	r2, [r2, #4]
9000ba5c:	4311      	orrs	r1, r2
9000ba5e:	68ba      	ldr	r2, [r7, #8]
9000ba60:	6892      	ldr	r2, [r2, #8]
9000ba62:	3a01      	subs	r2, #1
9000ba64:	0152      	lsls	r2, r2, #5
9000ba66:	4311      	orrs	r1, r2
9000ba68:	68ba      	ldr	r2, [r7, #8]
9000ba6a:	68d2      	ldr	r2, [r2, #12]
9000ba6c:	0252      	lsls	r2, r2, #9
9000ba6e:	430a      	orrs	r2, r1
9000ba70:	431a      	orrs	r2, r3
9000ba72:	68fb      	ldr	r3, [r7, #12]
9000ba74:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000ba76:	2300      	movs	r3, #0
}
9000ba78:	4618      	mov	r0, r3
9000ba7a:	3714      	adds	r7, #20
9000ba7c:	46bd      	mov	sp, r7
9000ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba82:	4770      	bx	lr
9000ba84:	ffc00000 	.word	0xffc00000

9000ba88 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000ba88:	b480      	push	{r7}
9000ba8a:	b083      	sub	sp, #12
9000ba8c:	af00      	add	r7, sp, #0
9000ba8e:	6078      	str	r0, [r7, #4]
9000ba90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000ba92:	687b      	ldr	r3, [r7, #4]
9000ba94:	695a      	ldr	r2, [r3, #20]
9000ba96:	4b07      	ldr	r3, [pc, #28]	@ (9000bab4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000ba98:	4013      	ands	r3, r2
9000ba9a:	683a      	ldr	r2, [r7, #0]
9000ba9c:	0052      	lsls	r2, r2, #1
9000ba9e:	431a      	orrs	r2, r3
9000baa0:	687b      	ldr	r3, [r7, #4]
9000baa2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000baa4:	2300      	movs	r3, #0
}
9000baa6:	4618      	mov	r0, r3
9000baa8:	370c      	adds	r7, #12
9000baaa:	46bd      	mov	sp, r7
9000baac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bab0:	4770      	bx	lr
9000bab2:	bf00      	nop
9000bab4:	ffffc001 	.word	0xffffc001

9000bab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000bab8:	b480      	push	{r7}
9000baba:	b083      	sub	sp, #12
9000babc:	af00      	add	r7, sp, #0
9000babe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000bac0:	687b      	ldr	r3, [r7, #4]
9000bac2:	689b      	ldr	r3, [r3, #8]
9000bac4:	f043 0201 	orr.w	r2, r3, #1
9000bac8:	687b      	ldr	r3, [r7, #4]
9000baca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000bacc:	2300      	movs	r3, #0
}
9000bace:	4618      	mov	r0, r3
9000bad0:	370c      	adds	r7, #12
9000bad2:	46bd      	mov	sp, r7
9000bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bad8:	4770      	bx	lr

9000bada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000bada:	b480      	push	{r7}
9000badc:	b083      	sub	sp, #12
9000bade:	af00      	add	r7, sp, #0
9000bae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000bae2:	687b      	ldr	r3, [r7, #4]
9000bae4:	689b      	ldr	r3, [r3, #8]
9000bae6:	f023 0201 	bic.w	r2, r3, #1
9000baea:	687b      	ldr	r3, [r7, #4]
9000baec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000baee:	2300      	movs	r3, #0
}
9000baf0:	4618      	mov	r0, r3
9000baf2:	370c      	adds	r7, #12
9000baf4:	46bd      	mov	sp, r7
9000baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bafa:	4770      	bx	lr

9000bafc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000bafc:	b480      	push	{r7}
9000bafe:	b085      	sub	sp, #20
9000bb00:	af00      	add	r7, sp, #0
9000bb02:	6078      	str	r0, [r7, #4]
9000bb04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000bb06:	2300      	movs	r3, #0
9000bb08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000bb0a:	68fb      	ldr	r3, [r7, #12]
9000bb0c:	3301      	adds	r3, #1
9000bb0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bb10:	68fb      	ldr	r3, [r7, #12]
9000bb12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bb16:	d901      	bls.n	9000bb1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000bb18:	2303      	movs	r3, #3
9000bb1a:	e01b      	b.n	9000bb54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000bb1c:	687b      	ldr	r3, [r7, #4]
9000bb1e:	691b      	ldr	r3, [r3, #16]
9000bb20:	2b00      	cmp	r3, #0
9000bb22:	daf2      	bge.n	9000bb0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000bb24:	2300      	movs	r3, #0
9000bb26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000bb28:	683b      	ldr	r3, [r7, #0]
9000bb2a:	019b      	lsls	r3, r3, #6
9000bb2c:	f043 0220 	orr.w	r2, r3, #32
9000bb30:	687b      	ldr	r3, [r7, #4]
9000bb32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000bb34:	68fb      	ldr	r3, [r7, #12]
9000bb36:	3301      	adds	r3, #1
9000bb38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bb3a:	68fb      	ldr	r3, [r7, #12]
9000bb3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bb40:	d901      	bls.n	9000bb46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000bb42:	2303      	movs	r3, #3
9000bb44:	e006      	b.n	9000bb54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000bb46:	687b      	ldr	r3, [r7, #4]
9000bb48:	691b      	ldr	r3, [r3, #16]
9000bb4a:	f003 0320 	and.w	r3, r3, #32
9000bb4e:	2b20      	cmp	r3, #32
9000bb50:	d0f0      	beq.n	9000bb34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000bb52:	2300      	movs	r3, #0
}
9000bb54:	4618      	mov	r0, r3
9000bb56:	3714      	adds	r7, #20
9000bb58:	46bd      	mov	sp, r7
9000bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb5e:	4770      	bx	lr

9000bb60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000bb60:	b480      	push	{r7}
9000bb62:	b085      	sub	sp, #20
9000bb64:	af00      	add	r7, sp, #0
9000bb66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000bb68:	2300      	movs	r3, #0
9000bb6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000bb6c:	68fb      	ldr	r3, [r7, #12]
9000bb6e:	3301      	adds	r3, #1
9000bb70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bb72:	68fb      	ldr	r3, [r7, #12]
9000bb74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bb78:	d901      	bls.n	9000bb7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000bb7a:	2303      	movs	r3, #3
9000bb7c:	e018      	b.n	9000bbb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000bb7e:	687b      	ldr	r3, [r7, #4]
9000bb80:	691b      	ldr	r3, [r3, #16]
9000bb82:	2b00      	cmp	r3, #0
9000bb84:	daf2      	bge.n	9000bb6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000bb86:	2300      	movs	r3, #0
9000bb88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000bb8a:	687b      	ldr	r3, [r7, #4]
9000bb8c:	2210      	movs	r2, #16
9000bb8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000bb90:	68fb      	ldr	r3, [r7, #12]
9000bb92:	3301      	adds	r3, #1
9000bb94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bb96:	68fb      	ldr	r3, [r7, #12]
9000bb98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bb9c:	d901      	bls.n	9000bba2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000bb9e:	2303      	movs	r3, #3
9000bba0:	e006      	b.n	9000bbb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000bba2:	687b      	ldr	r3, [r7, #4]
9000bba4:	691b      	ldr	r3, [r3, #16]
9000bba6:	f003 0310 	and.w	r3, r3, #16
9000bbaa:	2b10      	cmp	r3, #16
9000bbac:	d0f0      	beq.n	9000bb90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000bbae:	2300      	movs	r3, #0
}
9000bbb0:	4618      	mov	r0, r3
9000bbb2:	3714      	adds	r7, #20
9000bbb4:	46bd      	mov	sp, r7
9000bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bbba:	4770      	bx	lr

9000bbbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000bbbc:	b480      	push	{r7}
9000bbbe:	b08b      	sub	sp, #44	@ 0x2c
9000bbc0:	af00      	add	r7, sp, #0
9000bbc2:	60f8      	str	r0, [r7, #12]
9000bbc4:	60b9      	str	r1, [r7, #8]
9000bbc6:	4613      	mov	r3, r2
9000bbc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bbca:	68fb      	ldr	r3, [r7, #12]
9000bbcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000bbce:	68bb      	ldr	r3, [r7, #8]
9000bbd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000bbd2:	88fb      	ldrh	r3, [r7, #6]
9000bbd4:	089b      	lsrs	r3, r3, #2
9000bbd6:	b29b      	uxth	r3, r3
9000bbd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000bbda:	88fb      	ldrh	r3, [r7, #6]
9000bbdc:	f003 0303 	and.w	r3, r3, #3
9000bbe0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000bbe2:	2300      	movs	r3, #0
9000bbe4:	623b      	str	r3, [r7, #32]
9000bbe6:	e014      	b.n	9000bc12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000bbe8:	69bb      	ldr	r3, [r7, #24]
9000bbea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000bbee:	681a      	ldr	r2, [r3, #0]
9000bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bbf2:	601a      	str	r2, [r3, #0]
    pDest++;
9000bbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bbf6:	3301      	adds	r3, #1
9000bbf8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bbfc:	3301      	adds	r3, #1
9000bbfe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bc02:	3301      	adds	r3, #1
9000bc04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000bc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bc08:	3301      	adds	r3, #1
9000bc0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000bc0c:	6a3b      	ldr	r3, [r7, #32]
9000bc0e:	3301      	adds	r3, #1
9000bc10:	623b      	str	r3, [r7, #32]
9000bc12:	6a3a      	ldr	r2, [r7, #32]
9000bc14:	697b      	ldr	r3, [r7, #20]
9000bc16:	429a      	cmp	r2, r3
9000bc18:	d3e6      	bcc.n	9000bbe8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000bc1a:	8bfb      	ldrh	r3, [r7, #30]
9000bc1c:	2b00      	cmp	r3, #0
9000bc1e:	d01e      	beq.n	9000bc5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000bc20:	2300      	movs	r3, #0
9000bc22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000bc24:	69bb      	ldr	r3, [r7, #24]
9000bc26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000bc2a:	461a      	mov	r2, r3
9000bc2c:	f107 0310 	add.w	r3, r7, #16
9000bc30:	6812      	ldr	r2, [r2, #0]
9000bc32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000bc34:	693a      	ldr	r2, [r7, #16]
9000bc36:	6a3b      	ldr	r3, [r7, #32]
9000bc38:	b2db      	uxtb	r3, r3
9000bc3a:	00db      	lsls	r3, r3, #3
9000bc3c:	fa22 f303 	lsr.w	r3, r2, r3
9000bc40:	b2da      	uxtb	r2, r3
9000bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bc44:	701a      	strb	r2, [r3, #0]
      i++;
9000bc46:	6a3b      	ldr	r3, [r7, #32]
9000bc48:	3301      	adds	r3, #1
9000bc4a:	623b      	str	r3, [r7, #32]
      pDest++;
9000bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bc4e:	3301      	adds	r3, #1
9000bc50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000bc52:	8bfb      	ldrh	r3, [r7, #30]
9000bc54:	3b01      	subs	r3, #1
9000bc56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000bc58:	8bfb      	ldrh	r3, [r7, #30]
9000bc5a:	2b00      	cmp	r3, #0
9000bc5c:	d1ea      	bne.n	9000bc34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000bc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000bc60:	4618      	mov	r0, r3
9000bc62:	372c      	adds	r7, #44	@ 0x2c
9000bc64:	46bd      	mov	sp, r7
9000bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc6a:	4770      	bx	lr

9000bc6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000bc6c:	b480      	push	{r7}
9000bc6e:	b085      	sub	sp, #20
9000bc70:	af00      	add	r7, sp, #0
9000bc72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000bc74:	687b      	ldr	r3, [r7, #4]
9000bc76:	695b      	ldr	r3, [r3, #20]
9000bc78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000bc7a:	687b      	ldr	r3, [r7, #4]
9000bc7c:	699b      	ldr	r3, [r3, #24]
9000bc7e:	68fa      	ldr	r2, [r7, #12]
9000bc80:	4013      	ands	r3, r2
9000bc82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000bc84:	68fb      	ldr	r3, [r7, #12]
}
9000bc86:	4618      	mov	r0, r3
9000bc88:	3714      	adds	r7, #20
9000bc8a:	46bd      	mov	sp, r7
9000bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc90:	4770      	bx	lr

9000bc92 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000bc92:	b480      	push	{r7}
9000bc94:	b085      	sub	sp, #20
9000bc96:	af00      	add	r7, sp, #0
9000bc98:	6078      	str	r0, [r7, #4]
9000bc9a:	460b      	mov	r3, r1
9000bc9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bc9e:	687b      	ldr	r3, [r7, #4]
9000bca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000bca2:	78fb      	ldrb	r3, [r7, #3]
9000bca4:	015a      	lsls	r2, r3, #5
9000bca6:	68fb      	ldr	r3, [r7, #12]
9000bca8:	4413      	add	r3, r2
9000bcaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bcae:	689b      	ldr	r3, [r3, #8]
9000bcb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000bcb2:	78fb      	ldrb	r3, [r7, #3]
9000bcb4:	015a      	lsls	r2, r3, #5
9000bcb6:	68fb      	ldr	r3, [r7, #12]
9000bcb8:	4413      	add	r3, r2
9000bcba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bcbe:	68db      	ldr	r3, [r3, #12]
9000bcc0:	68ba      	ldr	r2, [r7, #8]
9000bcc2:	4013      	ands	r3, r2
9000bcc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000bcc6:	68bb      	ldr	r3, [r7, #8]
}
9000bcc8:	4618      	mov	r0, r3
9000bcca:	3714      	adds	r7, #20
9000bccc:	46bd      	mov	sp, r7
9000bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcd2:	4770      	bx	lr

9000bcd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000bcd4:	b480      	push	{r7}
9000bcd6:	b083      	sub	sp, #12
9000bcd8:	af00      	add	r7, sp, #0
9000bcda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000bcdc:	687b      	ldr	r3, [r7, #4]
9000bcde:	695b      	ldr	r3, [r3, #20]
9000bce0:	f003 0301 	and.w	r3, r3, #1
}
9000bce4:	4618      	mov	r0, r3
9000bce6:	370c      	adds	r7, #12
9000bce8:	46bd      	mov	sp, r7
9000bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcee:	4770      	bx	lr

9000bcf0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000bcf0:	b480      	push	{r7}
9000bcf2:	b085      	sub	sp, #20
9000bcf4:	af00      	add	r7, sp, #0
9000bcf6:	6078      	str	r0, [r7, #4]
9000bcf8:	460b      	mov	r3, r1
9000bcfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bcfc:	687b      	ldr	r3, [r7, #4]
9000bcfe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000bd00:	68fb      	ldr	r3, [r7, #12]
9000bd02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000bd06:	681b      	ldr	r3, [r3, #0]
9000bd08:	68fa      	ldr	r2, [r7, #12]
9000bd0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000bd0e:	f023 0303 	bic.w	r3, r3, #3
9000bd12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000bd14:	68fb      	ldr	r3, [r7, #12]
9000bd16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000bd1a:	681a      	ldr	r2, [r3, #0]
9000bd1c:	78fb      	ldrb	r3, [r7, #3]
9000bd1e:	f003 0303 	and.w	r3, r3, #3
9000bd22:	68f9      	ldr	r1, [r7, #12]
9000bd24:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000bd28:	4313      	orrs	r3, r2
9000bd2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000bd2c:	78fb      	ldrb	r3, [r7, #3]
9000bd2e:	2b01      	cmp	r3, #1
9000bd30:	d107      	bne.n	9000bd42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000bd32:	68fb      	ldr	r3, [r7, #12]
9000bd34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000bd38:	461a      	mov	r2, r3
9000bd3a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000bd3e:	6053      	str	r3, [r2, #4]
9000bd40:	e00c      	b.n	9000bd5c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000bd42:	78fb      	ldrb	r3, [r7, #3]
9000bd44:	2b02      	cmp	r3, #2
9000bd46:	d107      	bne.n	9000bd58 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000bd48:	68fb      	ldr	r3, [r7, #12]
9000bd4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000bd4e:	461a      	mov	r2, r3
9000bd50:	f241 7370 	movw	r3, #6000	@ 0x1770
9000bd54:	6053      	str	r3, [r2, #4]
9000bd56:	e001      	b.n	9000bd5c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000bd58:	2301      	movs	r3, #1
9000bd5a:	e000      	b.n	9000bd5e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000bd5c:	2300      	movs	r3, #0
}
9000bd5e:	4618      	mov	r0, r3
9000bd60:	3714      	adds	r7, #20
9000bd62:	46bd      	mov	sp, r7
9000bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bd68:	4770      	bx	lr

9000bd6a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000bd6a:	b480      	push	{r7}
9000bd6c:	b085      	sub	sp, #20
9000bd6e:	af00      	add	r7, sp, #0
9000bd70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bd72:	687b      	ldr	r3, [r7, #4]
9000bd74:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000bd76:	68fb      	ldr	r3, [r7, #12]
9000bd78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000bd7c:	695b      	ldr	r3, [r3, #20]
9000bd7e:	b29b      	uxth	r3, r3
}
9000bd80:	4618      	mov	r0, r3
9000bd82:	3714      	adds	r7, #20
9000bd84:	46bd      	mov	sp, r7
9000bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bd8a:	4770      	bx	lr

9000bd8c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000bd8c:	b480      	push	{r7}
9000bd8e:	b089      	sub	sp, #36	@ 0x24
9000bd90:	af00      	add	r7, sp, #0
9000bd92:	6078      	str	r0, [r7, #4]
9000bd94:	460b      	mov	r3, r1
9000bd96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bd98:	687b      	ldr	r3, [r7, #4]
9000bd9a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000bd9c:	78fb      	ldrb	r3, [r7, #3]
9000bd9e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000bda0:	2300      	movs	r3, #0
9000bda2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000bda4:	69bb      	ldr	r3, [r7, #24]
9000bda6:	015a      	lsls	r2, r3, #5
9000bda8:	69fb      	ldr	r3, [r7, #28]
9000bdaa:	4413      	add	r3, r2
9000bdac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bdb0:	681b      	ldr	r3, [r3, #0]
9000bdb2:	0c9b      	lsrs	r3, r3, #18
9000bdb4:	f003 0303 	and.w	r3, r3, #3
9000bdb8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000bdba:	69bb      	ldr	r3, [r7, #24]
9000bdbc:	015a      	lsls	r2, r3, #5
9000bdbe:	69fb      	ldr	r3, [r7, #28]
9000bdc0:	4413      	add	r3, r2
9000bdc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bdc6:	681b      	ldr	r3, [r3, #0]
9000bdc8:	0fdb      	lsrs	r3, r3, #31
9000bdca:	f003 0301 	and.w	r3, r3, #1
9000bdce:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000bdd0:	69bb      	ldr	r3, [r7, #24]
9000bdd2:	015a      	lsls	r2, r3, #5
9000bdd4:	69fb      	ldr	r3, [r7, #28]
9000bdd6:	4413      	add	r3, r2
9000bdd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bddc:	685b      	ldr	r3, [r3, #4]
9000bdde:	0fdb      	lsrs	r3, r3, #31
9000bde0:	f003 0301 	and.w	r3, r3, #1
9000bde4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000bde6:	687b      	ldr	r3, [r7, #4]
9000bde8:	689b      	ldr	r3, [r3, #8]
9000bdea:	f003 0320 	and.w	r3, r3, #32
9000bdee:	2b20      	cmp	r3, #32
9000bdf0:	d10d      	bne.n	9000be0e <USB_HC_Halt+0x82>
9000bdf2:	68fb      	ldr	r3, [r7, #12]
9000bdf4:	2b00      	cmp	r3, #0
9000bdf6:	d10a      	bne.n	9000be0e <USB_HC_Halt+0x82>
9000bdf8:	693b      	ldr	r3, [r7, #16]
9000bdfa:	2b00      	cmp	r3, #0
9000bdfc:	d005      	beq.n	9000be0a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000bdfe:	697b      	ldr	r3, [r7, #20]
9000be00:	2b01      	cmp	r3, #1
9000be02:	d002      	beq.n	9000be0a <USB_HC_Halt+0x7e>
9000be04:	697b      	ldr	r3, [r7, #20]
9000be06:	2b03      	cmp	r3, #3
9000be08:	d101      	bne.n	9000be0e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000be0a:	2300      	movs	r3, #0
9000be0c:	e0d8      	b.n	9000bfc0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000be0e:	697b      	ldr	r3, [r7, #20]
9000be10:	2b00      	cmp	r3, #0
9000be12:	d002      	beq.n	9000be1a <USB_HC_Halt+0x8e>
9000be14:	697b      	ldr	r3, [r7, #20]
9000be16:	2b02      	cmp	r3, #2
9000be18:	d173      	bne.n	9000bf02 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000be1a:	69bb      	ldr	r3, [r7, #24]
9000be1c:	015a      	lsls	r2, r3, #5
9000be1e:	69fb      	ldr	r3, [r7, #28]
9000be20:	4413      	add	r3, r2
9000be22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000be26:	681b      	ldr	r3, [r3, #0]
9000be28:	69ba      	ldr	r2, [r7, #24]
9000be2a:	0151      	lsls	r1, r2, #5
9000be2c:	69fa      	ldr	r2, [r7, #28]
9000be2e:	440a      	add	r2, r1
9000be30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000be34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000be38:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000be3a:	687b      	ldr	r3, [r7, #4]
9000be3c:	689b      	ldr	r3, [r3, #8]
9000be3e:	f003 0320 	and.w	r3, r3, #32
9000be42:	2b00      	cmp	r3, #0
9000be44:	d14a      	bne.n	9000bedc <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000be46:	687b      	ldr	r3, [r7, #4]
9000be48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000be4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000be4e:	2b00      	cmp	r3, #0
9000be50:	d133      	bne.n	9000beba <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000be52:	69bb      	ldr	r3, [r7, #24]
9000be54:	015a      	lsls	r2, r3, #5
9000be56:	69fb      	ldr	r3, [r7, #28]
9000be58:	4413      	add	r3, r2
9000be5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000be5e:	681b      	ldr	r3, [r3, #0]
9000be60:	69ba      	ldr	r2, [r7, #24]
9000be62:	0151      	lsls	r1, r2, #5
9000be64:	69fa      	ldr	r2, [r7, #28]
9000be66:	440a      	add	r2, r1
9000be68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000be6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000be70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000be72:	69bb      	ldr	r3, [r7, #24]
9000be74:	015a      	lsls	r2, r3, #5
9000be76:	69fb      	ldr	r3, [r7, #28]
9000be78:	4413      	add	r3, r2
9000be7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000be7e:	681b      	ldr	r3, [r3, #0]
9000be80:	69ba      	ldr	r2, [r7, #24]
9000be82:	0151      	lsls	r1, r2, #5
9000be84:	69fa      	ldr	r2, [r7, #28]
9000be86:	440a      	add	r2, r1
9000be88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000be8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000be90:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000be92:	68bb      	ldr	r3, [r7, #8]
9000be94:	3301      	adds	r3, #1
9000be96:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000be98:	68bb      	ldr	r3, [r7, #8]
9000be9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000be9e:	d82e      	bhi.n	9000befe <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000bea0:	69bb      	ldr	r3, [r7, #24]
9000bea2:	015a      	lsls	r2, r3, #5
9000bea4:	69fb      	ldr	r3, [r7, #28]
9000bea6:	4413      	add	r3, r2
9000bea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000beac:	681b      	ldr	r3, [r3, #0]
9000beae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000beb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000beb6:	d0ec      	beq.n	9000be92 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000beb8:	e081      	b.n	9000bfbe <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000beba:	69bb      	ldr	r3, [r7, #24]
9000bebc:	015a      	lsls	r2, r3, #5
9000bebe:	69fb      	ldr	r3, [r7, #28]
9000bec0:	4413      	add	r3, r2
9000bec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bec6:	681b      	ldr	r3, [r3, #0]
9000bec8:	69ba      	ldr	r2, [r7, #24]
9000beca:	0151      	lsls	r1, r2, #5
9000becc:	69fa      	ldr	r2, [r7, #28]
9000bece:	440a      	add	r2, r1
9000bed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000bed4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000bed8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000beda:	e070      	b.n	9000bfbe <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000bedc:	69bb      	ldr	r3, [r7, #24]
9000bede:	015a      	lsls	r2, r3, #5
9000bee0:	69fb      	ldr	r3, [r7, #28]
9000bee2:	4413      	add	r3, r2
9000bee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bee8:	681b      	ldr	r3, [r3, #0]
9000beea:	69ba      	ldr	r2, [r7, #24]
9000beec:	0151      	lsls	r1, r2, #5
9000beee:	69fa      	ldr	r2, [r7, #28]
9000bef0:	440a      	add	r2, r1
9000bef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000bef6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000befa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000befc:	e05f      	b.n	9000bfbe <USB_HC_Halt+0x232>
            break;
9000befe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000bf00:	e05d      	b.n	9000bfbe <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000bf02:	69bb      	ldr	r3, [r7, #24]
9000bf04:	015a      	lsls	r2, r3, #5
9000bf06:	69fb      	ldr	r3, [r7, #28]
9000bf08:	4413      	add	r3, r2
9000bf0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bf0e:	681b      	ldr	r3, [r3, #0]
9000bf10:	69ba      	ldr	r2, [r7, #24]
9000bf12:	0151      	lsls	r1, r2, #5
9000bf14:	69fa      	ldr	r2, [r7, #28]
9000bf16:	440a      	add	r2, r1
9000bf18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000bf1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000bf20:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000bf22:	69fb      	ldr	r3, [r7, #28]
9000bf24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000bf28:	691b      	ldr	r3, [r3, #16]
9000bf2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000bf2e:	2b00      	cmp	r3, #0
9000bf30:	d133      	bne.n	9000bf9a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000bf32:	69bb      	ldr	r3, [r7, #24]
9000bf34:	015a      	lsls	r2, r3, #5
9000bf36:	69fb      	ldr	r3, [r7, #28]
9000bf38:	4413      	add	r3, r2
9000bf3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bf3e:	681b      	ldr	r3, [r3, #0]
9000bf40:	69ba      	ldr	r2, [r7, #24]
9000bf42:	0151      	lsls	r1, r2, #5
9000bf44:	69fa      	ldr	r2, [r7, #28]
9000bf46:	440a      	add	r2, r1
9000bf48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000bf4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000bf50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000bf52:	69bb      	ldr	r3, [r7, #24]
9000bf54:	015a      	lsls	r2, r3, #5
9000bf56:	69fb      	ldr	r3, [r7, #28]
9000bf58:	4413      	add	r3, r2
9000bf5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bf5e:	681b      	ldr	r3, [r3, #0]
9000bf60:	69ba      	ldr	r2, [r7, #24]
9000bf62:	0151      	lsls	r1, r2, #5
9000bf64:	69fa      	ldr	r2, [r7, #28]
9000bf66:	440a      	add	r2, r1
9000bf68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000bf6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000bf70:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000bf72:	68bb      	ldr	r3, [r7, #8]
9000bf74:	3301      	adds	r3, #1
9000bf76:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000bf78:	68bb      	ldr	r3, [r7, #8]
9000bf7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000bf7e:	d81d      	bhi.n	9000bfbc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000bf80:	69bb      	ldr	r3, [r7, #24]
9000bf82:	015a      	lsls	r2, r3, #5
9000bf84:	69fb      	ldr	r3, [r7, #28]
9000bf86:	4413      	add	r3, r2
9000bf88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bf8c:	681b      	ldr	r3, [r3, #0]
9000bf8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000bf92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000bf96:	d0ec      	beq.n	9000bf72 <USB_HC_Halt+0x1e6>
9000bf98:	e011      	b.n	9000bfbe <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000bf9a:	69bb      	ldr	r3, [r7, #24]
9000bf9c:	015a      	lsls	r2, r3, #5
9000bf9e:	69fb      	ldr	r3, [r7, #28]
9000bfa0:	4413      	add	r3, r2
9000bfa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bfa6:	681b      	ldr	r3, [r3, #0]
9000bfa8:	69ba      	ldr	r2, [r7, #24]
9000bfaa:	0151      	lsls	r1, r2, #5
9000bfac:	69fa      	ldr	r2, [r7, #28]
9000bfae:	440a      	add	r2, r1
9000bfb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000bfb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000bfb8:	6013      	str	r3, [r2, #0]
9000bfba:	e000      	b.n	9000bfbe <USB_HC_Halt+0x232>
          break;
9000bfbc:	bf00      	nop
    }
  }

  return HAL_OK;
9000bfbe:	2300      	movs	r3, #0
}
9000bfc0:	4618      	mov	r0, r3
9000bfc2:	3724      	adds	r7, #36	@ 0x24
9000bfc4:	46bd      	mov	sp, r7
9000bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bfca:	4770      	bx	lr

9000bfcc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000bfcc:	b580      	push	{r7, lr}
9000bfce:	b088      	sub	sp, #32
9000bfd0:	af00      	add	r7, sp, #0
9000bfd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000bfd4:	2300      	movs	r3, #0
9000bfd6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bfd8:	687b      	ldr	r3, [r7, #4]
9000bfda:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000bfdc:	2300      	movs	r3, #0
9000bfde:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000bfe0:	6878      	ldr	r0, [r7, #4]
9000bfe2:	f7ff fd7a 	bl	9000bada <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000bfe6:	2110      	movs	r1, #16
9000bfe8:	6878      	ldr	r0, [r7, #4]
9000bfea:	f7ff fd87 	bl	9000bafc <USB_FlushTxFifo>
9000bfee:	4603      	mov	r3, r0
9000bff0:	2b00      	cmp	r3, #0
9000bff2:	d001      	beq.n	9000bff8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000bff4:	2301      	movs	r3, #1
9000bff6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000bff8:	6878      	ldr	r0, [r7, #4]
9000bffa:	f7ff fdb1 	bl	9000bb60 <USB_FlushRxFifo>
9000bffe:	4603      	mov	r3, r0
9000c000:	2b00      	cmp	r3, #0
9000c002:	d001      	beq.n	9000c008 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000c004:	2301      	movs	r3, #1
9000c006:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000c008:	2300      	movs	r3, #0
9000c00a:	61bb      	str	r3, [r7, #24]
9000c00c:	e01f      	b.n	9000c04e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000c00e:	69bb      	ldr	r3, [r7, #24]
9000c010:	015a      	lsls	r2, r3, #5
9000c012:	697b      	ldr	r3, [r7, #20]
9000c014:	4413      	add	r3, r2
9000c016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c01a:	681b      	ldr	r3, [r3, #0]
9000c01c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000c01e:	693b      	ldr	r3, [r7, #16]
9000c020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c024:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000c026:	693b      	ldr	r3, [r7, #16]
9000c028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000c02c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000c02e:	693b      	ldr	r3, [r7, #16]
9000c030:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000c034:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000c036:	69bb      	ldr	r3, [r7, #24]
9000c038:	015a      	lsls	r2, r3, #5
9000c03a:	697b      	ldr	r3, [r7, #20]
9000c03c:	4413      	add	r3, r2
9000c03e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c042:	461a      	mov	r2, r3
9000c044:	693b      	ldr	r3, [r7, #16]
9000c046:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000c048:	69bb      	ldr	r3, [r7, #24]
9000c04a:	3301      	adds	r3, #1
9000c04c:	61bb      	str	r3, [r7, #24]
9000c04e:	69bb      	ldr	r3, [r7, #24]
9000c050:	2b0f      	cmp	r3, #15
9000c052:	d9dc      	bls.n	9000c00e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000c054:	2300      	movs	r3, #0
9000c056:	61bb      	str	r3, [r7, #24]
9000c058:	e034      	b.n	9000c0c4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000c05a:	69bb      	ldr	r3, [r7, #24]
9000c05c:	015a      	lsls	r2, r3, #5
9000c05e:	697b      	ldr	r3, [r7, #20]
9000c060:	4413      	add	r3, r2
9000c062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c066:	681b      	ldr	r3, [r3, #0]
9000c068:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000c06a:	693b      	ldr	r3, [r7, #16]
9000c06c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c070:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000c072:	693b      	ldr	r3, [r7, #16]
9000c074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c078:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000c07a:	693b      	ldr	r3, [r7, #16]
9000c07c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000c080:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000c082:	69bb      	ldr	r3, [r7, #24]
9000c084:	015a      	lsls	r2, r3, #5
9000c086:	697b      	ldr	r3, [r7, #20]
9000c088:	4413      	add	r3, r2
9000c08a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c08e:	461a      	mov	r2, r3
9000c090:	693b      	ldr	r3, [r7, #16]
9000c092:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000c094:	68fb      	ldr	r3, [r7, #12]
9000c096:	3301      	adds	r3, #1
9000c098:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000c09a:	68fb      	ldr	r3, [r7, #12]
9000c09c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000c0a0:	d80c      	bhi.n	9000c0bc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000c0a2:	69bb      	ldr	r3, [r7, #24]
9000c0a4:	015a      	lsls	r2, r3, #5
9000c0a6:	697b      	ldr	r3, [r7, #20]
9000c0a8:	4413      	add	r3, r2
9000c0aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c0ae:	681b      	ldr	r3, [r3, #0]
9000c0b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000c0b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000c0b8:	d0ec      	beq.n	9000c094 <USB_StopHost+0xc8>
9000c0ba:	e000      	b.n	9000c0be <USB_StopHost+0xf2>
        break;
9000c0bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000c0be:	69bb      	ldr	r3, [r7, #24]
9000c0c0:	3301      	adds	r3, #1
9000c0c2:	61bb      	str	r3, [r7, #24]
9000c0c4:	69bb      	ldr	r3, [r7, #24]
9000c0c6:	2b0f      	cmp	r3, #15
9000c0c8:	d9c7      	bls.n	9000c05a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000c0ca:	697b      	ldr	r3, [r7, #20]
9000c0cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c0d0:	461a      	mov	r2, r3
9000c0d2:	f04f 33ff 	mov.w	r3, #4294967295
9000c0d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000c0d8:	687b      	ldr	r3, [r7, #4]
9000c0da:	f04f 32ff 	mov.w	r2, #4294967295
9000c0de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000c0e0:	6878      	ldr	r0, [r7, #4]
9000c0e2:	f7ff fce9 	bl	9000bab8 <USB_EnableGlobalInt>

  return ret;
9000c0e6:	7ffb      	ldrb	r3, [r7, #31]
}
9000c0e8:	4618      	mov	r0, r3
9000c0ea:	3720      	adds	r7, #32
9000c0ec:	46bd      	mov	sp, r7
9000c0ee:	bd80      	pop	{r7, pc}

9000c0f0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000c0f0:	b580      	push	{r7, lr}
9000c0f2:	b082      	sub	sp, #8
9000c0f4:	af00      	add	r7, sp, #0
9000c0f6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000c0f8:	687b      	ldr	r3, [r7, #4]
9000c0fa:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000c0fe:	1c5a      	adds	r2, r3, #1
9000c100:	687b      	ldr	r3, [r7, #4]
9000c102:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000c106:	6878      	ldr	r0, [r7, #4]
9000c108:	f000 f804 	bl	9000c114 <USBH_HandleSof>
}
9000c10c:	bf00      	nop
9000c10e:	3708      	adds	r7, #8
9000c110:	46bd      	mov	sp, r7
9000c112:	bd80      	pop	{r7, pc}

9000c114 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000c114:	b580      	push	{r7, lr}
9000c116:	b082      	sub	sp, #8
9000c118:	af00      	add	r7, sp, #0
9000c11a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000c11c:	687b      	ldr	r3, [r7, #4]
9000c11e:	781b      	ldrb	r3, [r3, #0]
9000c120:	b2db      	uxtb	r3, r3
9000c122:	2b0b      	cmp	r3, #11
9000c124:	d10a      	bne.n	9000c13c <USBH_HandleSof+0x28>
9000c126:	687b      	ldr	r3, [r7, #4]
9000c128:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000c12c:	2b00      	cmp	r3, #0
9000c12e:	d005      	beq.n	9000c13c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000c130:	687b      	ldr	r3, [r7, #4]
9000c132:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000c136:	699b      	ldr	r3, [r3, #24]
9000c138:	6878      	ldr	r0, [r7, #4]
9000c13a:	4798      	blx	r3
  }
}
9000c13c:	bf00      	nop
9000c13e:	3708      	adds	r7, #8
9000c140:	46bd      	mov	sp, r7
9000c142:	bd80      	pop	{r7, pc}

9000c144 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000c144:	b480      	push	{r7}
9000c146:	b083      	sub	sp, #12
9000c148:	af00      	add	r7, sp, #0
9000c14a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000c14c:	687b      	ldr	r3, [r7, #4]
9000c14e:	2201      	movs	r2, #1
9000c150:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000c154:	bf00      	nop
}
9000c156:	370c      	adds	r7, #12
9000c158:	46bd      	mov	sp, r7
9000c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c15e:	4770      	bx	lr

9000c160 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000c160:	b480      	push	{r7}
9000c162:	b083      	sub	sp, #12
9000c164:	af00      	add	r7, sp, #0
9000c166:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000c168:	687b      	ldr	r3, [r7, #4]
9000c16a:	2200      	movs	r2, #0
9000c16c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000c170:	687b      	ldr	r3, [r7, #4]
9000c172:	2201      	movs	r2, #1
9000c174:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000c178:	bf00      	nop
}
9000c17a:	370c      	adds	r7, #12
9000c17c:	46bd      	mov	sp, r7
9000c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c182:	4770      	bx	lr

9000c184 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000c184:	b480      	push	{r7}
9000c186:	b083      	sub	sp, #12
9000c188:	af00      	add	r7, sp, #0
9000c18a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000c18c:	687b      	ldr	r3, [r7, #4]
9000c18e:	2201      	movs	r2, #1
9000c190:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000c194:	687b      	ldr	r3, [r7, #4]
9000c196:	2200      	movs	r2, #0
9000c198:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000c19c:	687b      	ldr	r3, [r7, #4]
9000c19e:	2200      	movs	r2, #0
9000c1a0:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000c1a4:	2300      	movs	r3, #0
}
9000c1a6:	4618      	mov	r0, r3
9000c1a8:	370c      	adds	r7, #12
9000c1aa:	46bd      	mov	sp, r7
9000c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c1b0:	4770      	bx	lr

9000c1b2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000c1b2:	b580      	push	{r7, lr}
9000c1b4:	b082      	sub	sp, #8
9000c1b6:	af00      	add	r7, sp, #0
9000c1b8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000c1ba:	687b      	ldr	r3, [r7, #4]
9000c1bc:	2201      	movs	r2, #1
9000c1be:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000c1c2:	687b      	ldr	r3, [r7, #4]
9000c1c4:	2200      	movs	r2, #0
9000c1c6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000c1ca:	687b      	ldr	r3, [r7, #4]
9000c1cc:	2200      	movs	r2, #0
9000c1ce:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000c1d2:	6878      	ldr	r0, [r7, #4]
9000c1d4:	f7f4 ff2e 	bl	90001034 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000c1d8:	687b      	ldr	r3, [r7, #4]
9000c1da:	791b      	ldrb	r3, [r3, #4]
9000c1dc:	4619      	mov	r1, r3
9000c1de:	6878      	ldr	r0, [r7, #4]
9000c1e0:	f000 f80b 	bl	9000c1fa <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000c1e4:	687b      	ldr	r3, [r7, #4]
9000c1e6:	795b      	ldrb	r3, [r3, #5]
9000c1e8:	4619      	mov	r1, r3
9000c1ea:	6878      	ldr	r0, [r7, #4]
9000c1ec:	f000 f805 	bl	9000c1fa <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000c1f0:	2300      	movs	r3, #0
}
9000c1f2:	4618      	mov	r0, r3
9000c1f4:	3708      	adds	r7, #8
9000c1f6:	46bd      	mov	sp, r7
9000c1f8:	bd80      	pop	{r7, pc}

9000c1fa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000c1fa:	b480      	push	{r7}
9000c1fc:	b083      	sub	sp, #12
9000c1fe:	af00      	add	r7, sp, #0
9000c200:	6078      	str	r0, [r7, #4]
9000c202:	460b      	mov	r3, r1
9000c204:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000c206:	78fb      	ldrb	r3, [r7, #3]
9000c208:	2b0f      	cmp	r3, #15
9000c20a:	d80f      	bhi.n	9000c22c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000c20c:	78fb      	ldrb	r3, [r7, #3]
9000c20e:	687a      	ldr	r2, [r7, #4]
9000c210:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000c214:	009b      	lsls	r3, r3, #2
9000c216:	4413      	add	r3, r2
9000c218:	685a      	ldr	r2, [r3, #4]
9000c21a:	78fb      	ldrb	r3, [r7, #3]
9000c21c:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000c220:	6879      	ldr	r1, [r7, #4]
9000c222:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000c226:	009b      	lsls	r3, r3, #2
9000c228:	440b      	add	r3, r1
9000c22a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000c22c:	2300      	movs	r3, #0
}
9000c22e:	4618      	mov	r0, r3
9000c230:	370c      	adds	r7, #12
9000c232:	46bd      	mov	sp, r7
9000c234:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c238:	4770      	bx	lr
	...

9000c23c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000c23c:	b580      	push	{r7, lr}
9000c23e:	b082      	sub	sp, #8
9000c240:	af00      	add	r7, sp, #0
9000c242:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000c244:	687b      	ldr	r3, [r7, #4]
9000c246:	681b      	ldr	r3, [r3, #0]
9000c248:	4a22      	ldr	r2, [pc, #136]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c24a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000c24c:	687b      	ldr	r3, [r7, #4]
9000c24e:	685b      	ldr	r3, [r3, #4]
9000c250:	4a20      	ldr	r2, [pc, #128]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c252:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000c254:	687b      	ldr	r3, [r7, #4]
9000c256:	689b      	ldr	r3, [r3, #8]
9000c258:	4a1e      	ldr	r2, [pc, #120]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c25a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000c25c:	687b      	ldr	r3, [r7, #4]
9000c25e:	68db      	ldr	r3, [r3, #12]
9000c260:	4a1c      	ldr	r2, [pc, #112]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c262:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000c264:	687b      	ldr	r3, [r7, #4]
9000c266:	691b      	ldr	r3, [r3, #16]
9000c268:	4a1a      	ldr	r2, [pc, #104]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c26a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000c26c:	687b      	ldr	r3, [r7, #4]
9000c26e:	695b      	ldr	r3, [r3, #20]
9000c270:	4a18      	ldr	r2, [pc, #96]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c272:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000c274:	687b      	ldr	r3, [r7, #4]
9000c276:	699b      	ldr	r3, [r3, #24]
9000c278:	4a16      	ldr	r2, [pc, #88]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c27a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000c27c:	687b      	ldr	r3, [r7, #4]
9000c27e:	69db      	ldr	r3, [r3, #28]
9000c280:	4a14      	ldr	r2, [pc, #80]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c282:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000c284:	687b      	ldr	r3, [r7, #4]
9000c286:	6a1b      	ldr	r3, [r3, #32]
9000c288:	4a12      	ldr	r2, [pc, #72]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c28a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000c28c:	687b      	ldr	r3, [r7, #4]
9000c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000c290:	4a10      	ldr	r2, [pc, #64]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c292:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000c294:	687b      	ldr	r3, [r7, #4]
9000c296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000c298:	4a0e      	ldr	r2, [pc, #56]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c29a:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000c29c:	4b0e      	ldr	r3, [pc, #56]	@ (9000c2d8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c29e:	2200      	movs	r2, #0
9000c2a0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000c2a2:	4b0d      	ldr	r3, [pc, #52]	@ (9000c2d8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c2a4:	2200      	movs	r2, #0
9000c2a6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000c2a8:	4b0a      	ldr	r3, [pc, #40]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c2aa:	69db      	ldr	r3, [r3, #28]
9000c2ac:	4a0b      	ldr	r2, [pc, #44]	@ (9000c2dc <UTIL_LCD_SetFuncDriver+0xa0>)
9000c2ae:	4611      	mov	r1, r2
9000c2b0:	2000      	movs	r0, #0
9000c2b2:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000c2b4:	4b07      	ldr	r3, [pc, #28]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c2b6:	6a1b      	ldr	r3, [r3, #32]
9000c2b8:	4a09      	ldr	r2, [pc, #36]	@ (9000c2e0 <UTIL_LCD_SetFuncDriver+0xa4>)
9000c2ba:	4611      	mov	r1, r2
9000c2bc:	2000      	movs	r0, #0
9000c2be:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000c2c0:	4b04      	ldr	r3, [pc, #16]	@ (9000c2d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000c2c4:	4a07      	ldr	r2, [pc, #28]	@ (9000c2e4 <UTIL_LCD_SetFuncDriver+0xa8>)
9000c2c6:	4611      	mov	r1, r2
9000c2c8:	2000      	movs	r0, #0
9000c2ca:	4798      	blx	r3
}
9000c2cc:	bf00      	nop
9000c2ce:	3708      	adds	r7, #8
9000c2d0:	46bd      	mov	sp, r7
9000c2d2:	bd80      	pop	{r7, pc}
9000c2d4:	20001370 	.word	0x20001370
9000c2d8:	20001330 	.word	0x20001330
9000c2dc:	20001344 	.word	0x20001344
9000c2e0:	20001348 	.word	0x20001348
9000c2e4:	2000134c 	.word	0x2000134c

9000c2e8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000c2e8:	b580      	push	{r7, lr}
9000c2ea:	b082      	sub	sp, #8
9000c2ec:	af00      	add	r7, sp, #0
9000c2ee:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000c2f0:	4b0a      	ldr	r3, [pc, #40]	@ (9000c31c <UTIL_LCD_SetLayer+0x34>)
9000c2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000c2f4:	2b00      	cmp	r3, #0
9000c2f6:	d00c      	beq.n	9000c312 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000c2f8:	4b08      	ldr	r3, [pc, #32]	@ (9000c31c <UTIL_LCD_SetLayer+0x34>)
9000c2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000c2fc:	4a08      	ldr	r2, [pc, #32]	@ (9000c320 <UTIL_LCD_SetLayer+0x38>)
9000c2fe:	6912      	ldr	r2, [r2, #16]
9000c300:	6879      	ldr	r1, [r7, #4]
9000c302:	4610      	mov	r0, r2
9000c304:	4798      	blx	r3
9000c306:	4603      	mov	r3, r0
9000c308:	2b00      	cmp	r3, #0
9000c30a:	d102      	bne.n	9000c312 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000c30c:	4a04      	ldr	r2, [pc, #16]	@ (9000c320 <UTIL_LCD_SetLayer+0x38>)
9000c30e:	687b      	ldr	r3, [r7, #4]
9000c310:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000c312:	bf00      	nop
9000c314:	3708      	adds	r7, #8
9000c316:	46bd      	mov	sp, r7
9000c318:	bd80      	pop	{r7, pc}
9000c31a:	bf00      	nop
9000c31c:	20001370 	.word	0x20001370
9000c320:	20001330 	.word	0x20001330

9000c324 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000c324:	b480      	push	{r7}
9000c326:	b083      	sub	sp, #12
9000c328:	af00      	add	r7, sp, #0
9000c32a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000c32c:	4b06      	ldr	r3, [pc, #24]	@ (9000c348 <UTIL_LCD_SetTextColor+0x24>)
9000c32e:	68db      	ldr	r3, [r3, #12]
9000c330:	4a05      	ldr	r2, [pc, #20]	@ (9000c348 <UTIL_LCD_SetTextColor+0x24>)
9000c332:	015b      	lsls	r3, r3, #5
9000c334:	4413      	add	r3, r2
9000c336:	687a      	ldr	r2, [r7, #4]
9000c338:	601a      	str	r2, [r3, #0]
}
9000c33a:	bf00      	nop
9000c33c:	370c      	adds	r7, #12
9000c33e:	46bd      	mov	sp, r7
9000c340:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c344:	4770      	bx	lr
9000c346:	bf00      	nop
9000c348:	20001330 	.word	0x20001330

9000c34c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000c34c:	b480      	push	{r7}
9000c34e:	b083      	sub	sp, #12
9000c350:	af00      	add	r7, sp, #0
9000c352:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000c354:	4b06      	ldr	r3, [pc, #24]	@ (9000c370 <UTIL_LCD_SetBackColor+0x24>)
9000c356:	68db      	ldr	r3, [r3, #12]
9000c358:	4a05      	ldr	r2, [pc, #20]	@ (9000c370 <UTIL_LCD_SetBackColor+0x24>)
9000c35a:	015b      	lsls	r3, r3, #5
9000c35c:	4413      	add	r3, r2
9000c35e:	3304      	adds	r3, #4
9000c360:	687a      	ldr	r2, [r7, #4]
9000c362:	601a      	str	r2, [r3, #0]
}
9000c364:	bf00      	nop
9000c366:	370c      	adds	r7, #12
9000c368:	46bd      	mov	sp, r7
9000c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c36e:	4770      	bx	lr
9000c370:	20001330 	.word	0x20001330

9000c374 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000c374:	b480      	push	{r7}
9000c376:	b083      	sub	sp, #12
9000c378:	af00      	add	r7, sp, #0
9000c37a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000c37c:	4b06      	ldr	r3, [pc, #24]	@ (9000c398 <UTIL_LCD_SetFont+0x24>)
9000c37e:	68db      	ldr	r3, [r3, #12]
9000c380:	4a05      	ldr	r2, [pc, #20]	@ (9000c398 <UTIL_LCD_SetFont+0x24>)
9000c382:	015b      	lsls	r3, r3, #5
9000c384:	4413      	add	r3, r2
9000c386:	3308      	adds	r3, #8
9000c388:	687a      	ldr	r2, [r7, #4]
9000c38a:	601a      	str	r2, [r3, #0]
}
9000c38c:	bf00      	nop
9000c38e:	370c      	adds	r7, #12
9000c390:	46bd      	mov	sp, r7
9000c392:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c396:	4770      	bx	lr
9000c398:	20001330 	.word	0x20001330

9000c39c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000c39c:	b590      	push	{r4, r7, lr}
9000c39e:	b087      	sub	sp, #28
9000c3a0:	af02      	add	r7, sp, #8
9000c3a2:	60f8      	str	r0, [r7, #12]
9000c3a4:	60b9      	str	r1, [r7, #8]
9000c3a6:	607a      	str	r2, [r7, #4]
9000c3a8:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000c3aa:	4b08      	ldr	r3, [pc, #32]	@ (9000c3cc <UTIL_LCD_FillRGBRect+0x30>)
9000c3ac:	685c      	ldr	r4, [r3, #4]
9000c3ae:	4b08      	ldr	r3, [pc, #32]	@ (9000c3d0 <UTIL_LCD_FillRGBRect+0x34>)
9000c3b0:	6918      	ldr	r0, [r3, #16]
9000c3b2:	6a3b      	ldr	r3, [r7, #32]
9000c3b4:	9301      	str	r3, [sp, #4]
9000c3b6:	683b      	ldr	r3, [r7, #0]
9000c3b8:	9300      	str	r3, [sp, #0]
9000c3ba:	687b      	ldr	r3, [r7, #4]
9000c3bc:	68ba      	ldr	r2, [r7, #8]
9000c3be:	68f9      	ldr	r1, [r7, #12]
9000c3c0:	47a0      	blx	r4
}
9000c3c2:	bf00      	nop
9000c3c4:	3714      	adds	r7, #20
9000c3c6:	46bd      	mov	sp, r7
9000c3c8:	bd90      	pop	{r4, r7, pc}
9000c3ca:	bf00      	nop
9000c3cc:	20001370 	.word	0x20001370
9000c3d0:	20001330 	.word	0x20001330

9000c3d4 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000c3d4:	b580      	push	{r7, lr}
9000c3d6:	b084      	sub	sp, #16
9000c3d8:	af02      	add	r7, sp, #8
9000c3da:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000c3dc:	4b07      	ldr	r3, [pc, #28]	@ (9000c3fc <UTIL_LCD_Clear+0x28>)
9000c3de:	695a      	ldr	r2, [r3, #20]
9000c3e0:	4b06      	ldr	r3, [pc, #24]	@ (9000c3fc <UTIL_LCD_Clear+0x28>)
9000c3e2:	6999      	ldr	r1, [r3, #24]
9000c3e4:	687b      	ldr	r3, [r7, #4]
9000c3e6:	9300      	str	r3, [sp, #0]
9000c3e8:	460b      	mov	r3, r1
9000c3ea:	2100      	movs	r1, #0
9000c3ec:	2000      	movs	r0, #0
9000c3ee:	f000 f8eb 	bl	9000c5c8 <UTIL_LCD_FillRect>
}
9000c3f2:	bf00      	nop
9000c3f4:	3708      	adds	r7, #8
9000c3f6:	46bd      	mov	sp, r7
9000c3f8:	bd80      	pop	{r7, pc}
9000c3fa:	bf00      	nop
9000c3fc:	20001330 	.word	0x20001330

9000c400 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000c400:	b580      	push	{r7, lr}
9000c402:	b084      	sub	sp, #16
9000c404:	af00      	add	r7, sp, #0
9000c406:	60f8      	str	r0, [r7, #12]
9000c408:	60b9      	str	r1, [r7, #8]
9000c40a:	4613      	mov	r3, r2
9000c40c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c40e:	4b16      	ldr	r3, [pc, #88]	@ (9000c468 <UTIL_LCD_DisplayChar+0x68>)
9000c410:	68db      	ldr	r3, [r3, #12]
9000c412:	4a15      	ldr	r2, [pc, #84]	@ (9000c468 <UTIL_LCD_DisplayChar+0x68>)
9000c414:	015b      	lsls	r3, r3, #5
9000c416:	4413      	add	r3, r2
9000c418:	3308      	adds	r3, #8
9000c41a:	681b      	ldr	r3, [r3, #0]
9000c41c:	681a      	ldr	r2, [r3, #0]
9000c41e:	79fb      	ldrb	r3, [r7, #7]
9000c420:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000c422:	4911      	ldr	r1, [pc, #68]	@ (9000c468 <UTIL_LCD_DisplayChar+0x68>)
9000c424:	68c9      	ldr	r1, [r1, #12]
9000c426:	4810      	ldr	r0, [pc, #64]	@ (9000c468 <UTIL_LCD_DisplayChar+0x68>)
9000c428:	0149      	lsls	r1, r1, #5
9000c42a:	4401      	add	r1, r0
9000c42c:	3108      	adds	r1, #8
9000c42e:	6809      	ldr	r1, [r1, #0]
9000c430:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c432:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000c436:	4b0c      	ldr	r3, [pc, #48]	@ (9000c468 <UTIL_LCD_DisplayChar+0x68>)
9000c438:	68db      	ldr	r3, [r3, #12]
9000c43a:	480b      	ldr	r0, [pc, #44]	@ (9000c468 <UTIL_LCD_DisplayChar+0x68>)
9000c43c:	015b      	lsls	r3, r3, #5
9000c43e:	4403      	add	r3, r0
9000c440:	3308      	adds	r3, #8
9000c442:	681b      	ldr	r3, [r3, #0]
9000c444:	889b      	ldrh	r3, [r3, #4]
9000c446:	3307      	adds	r3, #7
9000c448:	2b00      	cmp	r3, #0
9000c44a:	da00      	bge.n	9000c44e <UTIL_LCD_DisplayChar+0x4e>
9000c44c:	3307      	adds	r3, #7
9000c44e:	10db      	asrs	r3, r3, #3
9000c450:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c454:	4413      	add	r3, r2
9000c456:	461a      	mov	r2, r3
9000c458:	68b9      	ldr	r1, [r7, #8]
9000c45a:	68f8      	ldr	r0, [r7, #12]
9000c45c:	f000 f8ee 	bl	9000c63c <DrawChar>
}
9000c460:	bf00      	nop
9000c462:	3710      	adds	r7, #16
9000c464:	46bd      	mov	sp, r7
9000c466:	bd80      	pop	{r7, pc}
9000c468:	20001330 	.word	0x20001330

9000c46c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000c46c:	b580      	push	{r7, lr}
9000c46e:	b08a      	sub	sp, #40	@ 0x28
9000c470:	af00      	add	r7, sp, #0
9000c472:	60f8      	str	r0, [r7, #12]
9000c474:	60b9      	str	r1, [r7, #8]
9000c476:	607a      	str	r2, [r7, #4]
9000c478:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000c47a:	2301      	movs	r3, #1
9000c47c:	627b      	str	r3, [r7, #36]	@ 0x24
9000c47e:	2300      	movs	r3, #0
9000c480:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000c482:	2300      	movs	r3, #0
9000c484:	61fb      	str	r3, [r7, #28]
9000c486:	2300      	movs	r3, #0
9000c488:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000c48a:	687b      	ldr	r3, [r7, #4]
9000c48c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000c48e:	e002      	b.n	9000c496 <UTIL_LCD_DisplayStringAt+0x2a>
9000c490:	69fb      	ldr	r3, [r7, #28]
9000c492:	3301      	adds	r3, #1
9000c494:	61fb      	str	r3, [r7, #28]
9000c496:	69bb      	ldr	r3, [r7, #24]
9000c498:	1c5a      	adds	r2, r3, #1
9000c49a:	61ba      	str	r2, [r7, #24]
9000c49c:	781b      	ldrb	r3, [r3, #0]
9000c49e:	2b00      	cmp	r3, #0
9000c4a0:	d1f6      	bne.n	9000c490 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000c4a2:	4b48      	ldr	r3, [pc, #288]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c4a4:	695b      	ldr	r3, [r3, #20]
9000c4a6:	4a47      	ldr	r2, [pc, #284]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c4a8:	68d2      	ldr	r2, [r2, #12]
9000c4aa:	4946      	ldr	r1, [pc, #280]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c4ac:	0152      	lsls	r2, r2, #5
9000c4ae:	440a      	add	r2, r1
9000c4b0:	3208      	adds	r2, #8
9000c4b2:	6812      	ldr	r2, [r2, #0]
9000c4b4:	8892      	ldrh	r2, [r2, #4]
9000c4b6:	fbb3 f3f2 	udiv	r3, r3, r2
9000c4ba:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000c4bc:	78fb      	ldrb	r3, [r7, #3]
9000c4be:	2b03      	cmp	r3, #3
9000c4c0:	d018      	beq.n	9000c4f4 <UTIL_LCD_DisplayStringAt+0x88>
9000c4c2:	2b03      	cmp	r3, #3
9000c4c4:	dc2a      	bgt.n	9000c51c <UTIL_LCD_DisplayStringAt+0xb0>
9000c4c6:	2b01      	cmp	r3, #1
9000c4c8:	d002      	beq.n	9000c4d0 <UTIL_LCD_DisplayStringAt+0x64>
9000c4ca:	2b02      	cmp	r3, #2
9000c4cc:	d015      	beq.n	9000c4fa <UTIL_LCD_DisplayStringAt+0x8e>
9000c4ce:	e025      	b.n	9000c51c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000c4d0:	697a      	ldr	r2, [r7, #20]
9000c4d2:	69fb      	ldr	r3, [r7, #28]
9000c4d4:	1ad3      	subs	r3, r2, r3
9000c4d6:	4a3b      	ldr	r2, [pc, #236]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c4d8:	68d2      	ldr	r2, [r2, #12]
9000c4da:	493a      	ldr	r1, [pc, #232]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c4dc:	0152      	lsls	r2, r2, #5
9000c4de:	440a      	add	r2, r1
9000c4e0:	3208      	adds	r2, #8
9000c4e2:	6812      	ldr	r2, [r2, #0]
9000c4e4:	8892      	ldrh	r2, [r2, #4]
9000c4e6:	fb02 f303 	mul.w	r3, r2, r3
9000c4ea:	085b      	lsrs	r3, r3, #1
9000c4ec:	68fa      	ldr	r2, [r7, #12]
9000c4ee:	4413      	add	r3, r2
9000c4f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c4f2:	e016      	b.n	9000c522 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000c4f4:	68fb      	ldr	r3, [r7, #12]
9000c4f6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c4f8:	e013      	b.n	9000c522 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000c4fa:	697a      	ldr	r2, [r7, #20]
9000c4fc:	69fb      	ldr	r3, [r7, #28]
9000c4fe:	1ad3      	subs	r3, r2, r3
9000c500:	4a30      	ldr	r2, [pc, #192]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c502:	68d2      	ldr	r2, [r2, #12]
9000c504:	492f      	ldr	r1, [pc, #188]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c506:	0152      	lsls	r2, r2, #5
9000c508:	440a      	add	r2, r1
9000c50a:	3208      	adds	r2, #8
9000c50c:	6812      	ldr	r2, [r2, #0]
9000c50e:	8892      	ldrh	r2, [r2, #4]
9000c510:	fb03 f202 	mul.w	r2, r3, r2
9000c514:	68fb      	ldr	r3, [r7, #12]
9000c516:	1ad3      	subs	r3, r2, r3
9000c518:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c51a:	e002      	b.n	9000c522 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000c51c:	68fb      	ldr	r3, [r7, #12]
9000c51e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c520:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000c522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c524:	2b00      	cmp	r3, #0
9000c526:	d003      	beq.n	9000c530 <UTIL_LCD_DisplayStringAt+0xc4>
9000c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c52a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000c52e:	d31b      	bcc.n	9000c568 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000c530:	2301      	movs	r3, #1
9000c532:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000c534:	e018      	b.n	9000c568 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000c536:	687b      	ldr	r3, [r7, #4]
9000c538:	781b      	ldrb	r3, [r3, #0]
9000c53a:	461a      	mov	r2, r3
9000c53c:	68b9      	ldr	r1, [r7, #8]
9000c53e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000c540:	f7ff ff5e 	bl	9000c400 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000c544:	4b1f      	ldr	r3, [pc, #124]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c546:	68db      	ldr	r3, [r3, #12]
9000c548:	4a1e      	ldr	r2, [pc, #120]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c54a:	015b      	lsls	r3, r3, #5
9000c54c:	4413      	add	r3, r2
9000c54e:	3308      	adds	r3, #8
9000c550:	681b      	ldr	r3, [r3, #0]
9000c552:	889b      	ldrh	r3, [r3, #4]
9000c554:	461a      	mov	r2, r3
9000c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c558:	4413      	add	r3, r2
9000c55a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000c55c:	687b      	ldr	r3, [r7, #4]
9000c55e:	3301      	adds	r3, #1
9000c560:	607b      	str	r3, [r7, #4]
    i++;
9000c562:	6a3b      	ldr	r3, [r7, #32]
9000c564:	3301      	adds	r3, #1
9000c566:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000c568:	687b      	ldr	r3, [r7, #4]
9000c56a:	781b      	ldrb	r3, [r3, #0]
9000c56c:	2b00      	cmp	r3, #0
9000c56e:	bf14      	ite	ne
9000c570:	2301      	movne	r3, #1
9000c572:	2300      	moveq	r3, #0
9000c574:	b2da      	uxtb	r2, r3
9000c576:	4b13      	ldr	r3, [pc, #76]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c578:	6959      	ldr	r1, [r3, #20]
9000c57a:	4b12      	ldr	r3, [pc, #72]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c57c:	68db      	ldr	r3, [r3, #12]
9000c57e:	4811      	ldr	r0, [pc, #68]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c580:	015b      	lsls	r3, r3, #5
9000c582:	4403      	add	r3, r0
9000c584:	3308      	adds	r3, #8
9000c586:	681b      	ldr	r3, [r3, #0]
9000c588:	889b      	ldrh	r3, [r3, #4]
9000c58a:	4618      	mov	r0, r3
9000c58c:	6a3b      	ldr	r3, [r7, #32]
9000c58e:	fb00 f303 	mul.w	r3, r0, r3
9000c592:	1acb      	subs	r3, r1, r3
9000c594:	b29b      	uxth	r3, r3
9000c596:	490b      	ldr	r1, [pc, #44]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c598:	68c9      	ldr	r1, [r1, #12]
9000c59a:	480a      	ldr	r0, [pc, #40]	@ (9000c5c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c59c:	0149      	lsls	r1, r1, #5
9000c59e:	4401      	add	r1, r0
9000c5a0:	3108      	adds	r1, #8
9000c5a2:	6809      	ldr	r1, [r1, #0]
9000c5a4:	8889      	ldrh	r1, [r1, #4]
9000c5a6:	428b      	cmp	r3, r1
9000c5a8:	bf2c      	ite	cs
9000c5aa:	2301      	movcs	r3, #1
9000c5ac:	2300      	movcc	r3, #0
9000c5ae:	b2db      	uxtb	r3, r3
9000c5b0:	4013      	ands	r3, r2
9000c5b2:	b2db      	uxtb	r3, r3
9000c5b4:	2b00      	cmp	r3, #0
9000c5b6:	d1be      	bne.n	9000c536 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000c5b8:	bf00      	nop
9000c5ba:	bf00      	nop
9000c5bc:	3728      	adds	r7, #40	@ 0x28
9000c5be:	46bd      	mov	sp, r7
9000c5c0:	bd80      	pop	{r7, pc}
9000c5c2:	bf00      	nop
9000c5c4:	20001330 	.word	0x20001330

9000c5c8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000c5c8:	b590      	push	{r4, r7, lr}
9000c5ca:	b087      	sub	sp, #28
9000c5cc:	af02      	add	r7, sp, #8
9000c5ce:	60f8      	str	r0, [r7, #12]
9000c5d0:	60b9      	str	r1, [r7, #8]
9000c5d2:	607a      	str	r2, [r7, #4]
9000c5d4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c5d6:	4b17      	ldr	r3, [pc, #92]	@ (9000c634 <UTIL_LCD_FillRect+0x6c>)
9000c5d8:	69db      	ldr	r3, [r3, #28]
9000c5da:	2b02      	cmp	r3, #2
9000c5dc:	d11a      	bne.n	9000c614 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000c5de:	4b16      	ldr	r3, [pc, #88]	@ (9000c638 <UTIL_LCD_FillRect+0x70>)
9000c5e0:	691c      	ldr	r4, [r3, #16]
9000c5e2:	4b14      	ldr	r3, [pc, #80]	@ (9000c634 <UTIL_LCD_FillRect+0x6c>)
9000c5e4:	6918      	ldr	r0, [r3, #16]
9000c5e6:	6a3b      	ldr	r3, [r7, #32]
9000c5e8:	08db      	lsrs	r3, r3, #3
9000c5ea:	f003 021f 	and.w	r2, r3, #31
9000c5ee:	6a3b      	ldr	r3, [r7, #32]
9000c5f0:	0a9b      	lsrs	r3, r3, #10
9000c5f2:	015b      	lsls	r3, r3, #5
9000c5f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c5f8:	431a      	orrs	r2, r3
9000c5fa:	6a3b      	ldr	r3, [r7, #32]
9000c5fc:	0cdb      	lsrs	r3, r3, #19
9000c5fe:	02db      	lsls	r3, r3, #11
9000c600:	b29b      	uxth	r3, r3
9000c602:	4313      	orrs	r3, r2
9000c604:	9301      	str	r3, [sp, #4]
9000c606:	683b      	ldr	r3, [r7, #0]
9000c608:	9300      	str	r3, [sp, #0]
9000c60a:	687b      	ldr	r3, [r7, #4]
9000c60c:	68ba      	ldr	r2, [r7, #8]
9000c60e:	68f9      	ldr	r1, [r7, #12]
9000c610:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000c612:	e00b      	b.n	9000c62c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000c614:	4b08      	ldr	r3, [pc, #32]	@ (9000c638 <UTIL_LCD_FillRect+0x70>)
9000c616:	691c      	ldr	r4, [r3, #16]
9000c618:	4b06      	ldr	r3, [pc, #24]	@ (9000c634 <UTIL_LCD_FillRect+0x6c>)
9000c61a:	6918      	ldr	r0, [r3, #16]
9000c61c:	6a3b      	ldr	r3, [r7, #32]
9000c61e:	9301      	str	r3, [sp, #4]
9000c620:	683b      	ldr	r3, [r7, #0]
9000c622:	9300      	str	r3, [sp, #0]
9000c624:	687b      	ldr	r3, [r7, #4]
9000c626:	68ba      	ldr	r2, [r7, #8]
9000c628:	68f9      	ldr	r1, [r7, #12]
9000c62a:	47a0      	blx	r4
}
9000c62c:	bf00      	nop
9000c62e:	3714      	adds	r7, #20
9000c630:	46bd      	mov	sp, r7
9000c632:	bd90      	pop	{r4, r7, pc}
9000c634:	20001330 	.word	0x20001330
9000c638:	20001370 	.word	0x20001370

9000c63c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000c63c:	b580      	push	{r7, lr}
9000c63e:	b0b2      	sub	sp, #200	@ 0xc8
9000c640:	af02      	add	r7, sp, #8
9000c642:	60f8      	str	r0, [r7, #12]
9000c644:	60b9      	str	r1, [r7, #8]
9000c646:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000c648:	2300      	movs	r3, #0
9000c64a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c64e:	2300      	movs	r3, #0
9000c650:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000c654:	4ba5      	ldr	r3, [pc, #660]	@ (9000c8ec <DrawChar+0x2b0>)
9000c656:	68db      	ldr	r3, [r3, #12]
9000c658:	4aa4      	ldr	r2, [pc, #656]	@ (9000c8ec <DrawChar+0x2b0>)
9000c65a:	015b      	lsls	r3, r3, #5
9000c65c:	4413      	add	r3, r2
9000c65e:	3308      	adds	r3, #8
9000c660:	681b      	ldr	r3, [r3, #0]
9000c662:	88db      	ldrh	r3, [r3, #6]
9000c664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000c668:	4ba0      	ldr	r3, [pc, #640]	@ (9000c8ec <DrawChar+0x2b0>)
9000c66a:	68db      	ldr	r3, [r3, #12]
9000c66c:	4a9f      	ldr	r2, [pc, #636]	@ (9000c8ec <DrawChar+0x2b0>)
9000c66e:	015b      	lsls	r3, r3, #5
9000c670:	4413      	add	r3, r2
9000c672:	3308      	adds	r3, #8
9000c674:	681b      	ldr	r3, [r3, #0]
9000c676:	889b      	ldrh	r3, [r3, #4]
9000c678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000c67c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c680:	3307      	adds	r3, #7
9000c682:	f023 0207 	bic.w	r2, r3, #7
9000c686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c68a:	1ad3      	subs	r3, r2, r3
9000c68c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000c690:	2300      	movs	r3, #0
9000c692:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c696:	e11c      	b.n	9000c8d2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000c698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c69c:	3307      	adds	r3, #7
9000c69e:	08db      	lsrs	r3, r3, #3
9000c6a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c6a4:	fb02 f303 	mul.w	r3, r2, r3
9000c6a8:	687a      	ldr	r2, [r7, #4]
9000c6aa:	4413      	add	r3, r2
9000c6ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000c6b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c6b4:	3307      	adds	r3, #7
9000c6b6:	08db      	lsrs	r3, r3, #3
9000c6b8:	2b01      	cmp	r3, #1
9000c6ba:	d002      	beq.n	9000c6c2 <DrawChar+0x86>
9000c6bc:	2b02      	cmp	r3, #2
9000c6be:	d006      	beq.n	9000c6ce <DrawChar+0x92>
9000c6c0:	e011      	b.n	9000c6e6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000c6c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c6c6:	781b      	ldrb	r3, [r3, #0]
9000c6c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c6cc:	e01d      	b.n	9000c70a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000c6ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c6d2:	781b      	ldrb	r3, [r3, #0]
9000c6d4:	021b      	lsls	r3, r3, #8
9000c6d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c6da:	3201      	adds	r2, #1
9000c6dc:	7812      	ldrb	r2, [r2, #0]
9000c6de:	4313      	orrs	r3, r2
9000c6e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c6e4:	e011      	b.n	9000c70a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000c6e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c6ea:	781b      	ldrb	r3, [r3, #0]
9000c6ec:	041a      	lsls	r2, r3, #16
9000c6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c6f2:	3301      	adds	r3, #1
9000c6f4:	781b      	ldrb	r3, [r3, #0]
9000c6f6:	021b      	lsls	r3, r3, #8
9000c6f8:	4313      	orrs	r3, r2
9000c6fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c6fe:	3202      	adds	r2, #2
9000c700:	7812      	ldrb	r2, [r2, #0]
9000c702:	4313      	orrs	r3, r2
9000c704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c708:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c70a:	4b78      	ldr	r3, [pc, #480]	@ (9000c8ec <DrawChar+0x2b0>)
9000c70c:	68db      	ldr	r3, [r3, #12]
9000c70e:	4a77      	ldr	r2, [pc, #476]	@ (9000c8ec <DrawChar+0x2b0>)
9000c710:	015b      	lsls	r3, r3, #5
9000c712:	4413      	add	r3, r2
9000c714:	331c      	adds	r3, #28
9000c716:	681b      	ldr	r3, [r3, #0]
9000c718:	2b02      	cmp	r3, #2
9000c71a:	f040 808c 	bne.w	9000c836 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000c71e:	2300      	movs	r3, #0
9000c720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c724:	e074      	b.n	9000c810 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c726:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c72a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c72e:	1ad2      	subs	r2, r2, r3
9000c730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c734:	4413      	add	r3, r2
9000c736:	3b01      	subs	r3, #1
9000c738:	2201      	movs	r2, #1
9000c73a:	fa02 f303 	lsl.w	r3, r2, r3
9000c73e:	461a      	mov	r2, r3
9000c740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c744:	4013      	ands	r3, r2
9000c746:	2b00      	cmp	r3, #0
9000c748:	d02d      	beq.n	9000c7a6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000c74a:	4b68      	ldr	r3, [pc, #416]	@ (9000c8ec <DrawChar+0x2b0>)
9000c74c:	68db      	ldr	r3, [r3, #12]
9000c74e:	4a67      	ldr	r2, [pc, #412]	@ (9000c8ec <DrawChar+0x2b0>)
9000c750:	015b      	lsls	r3, r3, #5
9000c752:	4413      	add	r3, r2
9000c754:	681b      	ldr	r3, [r3, #0]
9000c756:	08db      	lsrs	r3, r3, #3
9000c758:	b29b      	uxth	r3, r3
9000c75a:	f003 031f 	and.w	r3, r3, #31
9000c75e:	b29a      	uxth	r2, r3
9000c760:	4b62      	ldr	r3, [pc, #392]	@ (9000c8ec <DrawChar+0x2b0>)
9000c762:	68db      	ldr	r3, [r3, #12]
9000c764:	4961      	ldr	r1, [pc, #388]	@ (9000c8ec <DrawChar+0x2b0>)
9000c766:	015b      	lsls	r3, r3, #5
9000c768:	440b      	add	r3, r1
9000c76a:	681b      	ldr	r3, [r3, #0]
9000c76c:	0a9b      	lsrs	r3, r3, #10
9000c76e:	b29b      	uxth	r3, r3
9000c770:	015b      	lsls	r3, r3, #5
9000c772:	b29b      	uxth	r3, r3
9000c774:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c778:	b29b      	uxth	r3, r3
9000c77a:	4313      	orrs	r3, r2
9000c77c:	b29a      	uxth	r2, r3
9000c77e:	4b5b      	ldr	r3, [pc, #364]	@ (9000c8ec <DrawChar+0x2b0>)
9000c780:	68db      	ldr	r3, [r3, #12]
9000c782:	495a      	ldr	r1, [pc, #360]	@ (9000c8ec <DrawChar+0x2b0>)
9000c784:	015b      	lsls	r3, r3, #5
9000c786:	440b      	add	r3, r1
9000c788:	681b      	ldr	r3, [r3, #0]
9000c78a:	0cdb      	lsrs	r3, r3, #19
9000c78c:	b29b      	uxth	r3, r3
9000c78e:	02db      	lsls	r3, r3, #11
9000c790:	b29b      	uxth	r3, r3
9000c792:	4313      	orrs	r3, r2
9000c794:	b29a      	uxth	r2, r3
9000c796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c79a:	005b      	lsls	r3, r3, #1
9000c79c:	33c0      	adds	r3, #192	@ 0xc0
9000c79e:	443b      	add	r3, r7
9000c7a0:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000c7a4:	e02f      	b.n	9000c806 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000c7a6:	4b51      	ldr	r3, [pc, #324]	@ (9000c8ec <DrawChar+0x2b0>)
9000c7a8:	68db      	ldr	r3, [r3, #12]
9000c7aa:	4a50      	ldr	r2, [pc, #320]	@ (9000c8ec <DrawChar+0x2b0>)
9000c7ac:	015b      	lsls	r3, r3, #5
9000c7ae:	4413      	add	r3, r2
9000c7b0:	3304      	adds	r3, #4
9000c7b2:	681b      	ldr	r3, [r3, #0]
9000c7b4:	08db      	lsrs	r3, r3, #3
9000c7b6:	b29b      	uxth	r3, r3
9000c7b8:	f003 031f 	and.w	r3, r3, #31
9000c7bc:	b29a      	uxth	r2, r3
9000c7be:	4b4b      	ldr	r3, [pc, #300]	@ (9000c8ec <DrawChar+0x2b0>)
9000c7c0:	68db      	ldr	r3, [r3, #12]
9000c7c2:	494a      	ldr	r1, [pc, #296]	@ (9000c8ec <DrawChar+0x2b0>)
9000c7c4:	015b      	lsls	r3, r3, #5
9000c7c6:	440b      	add	r3, r1
9000c7c8:	3304      	adds	r3, #4
9000c7ca:	681b      	ldr	r3, [r3, #0]
9000c7cc:	0a9b      	lsrs	r3, r3, #10
9000c7ce:	b29b      	uxth	r3, r3
9000c7d0:	015b      	lsls	r3, r3, #5
9000c7d2:	b29b      	uxth	r3, r3
9000c7d4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c7d8:	b29b      	uxth	r3, r3
9000c7da:	4313      	orrs	r3, r2
9000c7dc:	b29a      	uxth	r2, r3
9000c7de:	4b43      	ldr	r3, [pc, #268]	@ (9000c8ec <DrawChar+0x2b0>)
9000c7e0:	68db      	ldr	r3, [r3, #12]
9000c7e2:	4942      	ldr	r1, [pc, #264]	@ (9000c8ec <DrawChar+0x2b0>)
9000c7e4:	015b      	lsls	r3, r3, #5
9000c7e6:	440b      	add	r3, r1
9000c7e8:	3304      	adds	r3, #4
9000c7ea:	681b      	ldr	r3, [r3, #0]
9000c7ec:	0cdb      	lsrs	r3, r3, #19
9000c7ee:	b29b      	uxth	r3, r3
9000c7f0:	02db      	lsls	r3, r3, #11
9000c7f2:	b29b      	uxth	r3, r3
9000c7f4:	4313      	orrs	r3, r2
9000c7f6:	b29a      	uxth	r2, r3
9000c7f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c7fc:	005b      	lsls	r3, r3, #1
9000c7fe:	33c0      	adds	r3, #192	@ 0xc0
9000c800:	443b      	add	r3, r7
9000c802:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000c806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c80a:	3301      	adds	r3, #1
9000c80c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c810:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c818:	429a      	cmp	r2, r3
9000c81a:	d384      	bcc.n	9000c726 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000c81c:	68b9      	ldr	r1, [r7, #8]
9000c81e:	1c4b      	adds	r3, r1, #1
9000c820:	60bb      	str	r3, [r7, #8]
9000c822:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000c826:	2301      	movs	r3, #1
9000c828:	9300      	str	r3, [sp, #0]
9000c82a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c82e:	68f8      	ldr	r0, [r7, #12]
9000c830:	f7ff fdb4 	bl	9000c39c <UTIL_LCD_FillRGBRect>
9000c834:	e048      	b.n	9000c8c8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000c836:	2300      	movs	r3, #0
9000c838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c83c:	e032      	b.n	9000c8a4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c83e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c846:	1ad2      	subs	r2, r2, r3
9000c848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c84c:	4413      	add	r3, r2
9000c84e:	3b01      	subs	r3, #1
9000c850:	2201      	movs	r2, #1
9000c852:	fa02 f303 	lsl.w	r3, r2, r3
9000c856:	461a      	mov	r2, r3
9000c858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c85c:	4013      	ands	r3, r2
9000c85e:	2b00      	cmp	r3, #0
9000c860:	d00d      	beq.n	9000c87e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000c862:	4b22      	ldr	r3, [pc, #136]	@ (9000c8ec <DrawChar+0x2b0>)
9000c864:	68db      	ldr	r3, [r3, #12]
9000c866:	4a21      	ldr	r2, [pc, #132]	@ (9000c8ec <DrawChar+0x2b0>)
9000c868:	015b      	lsls	r3, r3, #5
9000c86a:	4413      	add	r3, r2
9000c86c:	681a      	ldr	r2, [r3, #0]
9000c86e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c872:	009b      	lsls	r3, r3, #2
9000c874:	33c0      	adds	r3, #192	@ 0xc0
9000c876:	443b      	add	r3, r7
9000c878:	f843 2cac 	str.w	r2, [r3, #-172]
9000c87c:	e00d      	b.n	9000c89a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000c87e:	4b1b      	ldr	r3, [pc, #108]	@ (9000c8ec <DrawChar+0x2b0>)
9000c880:	68db      	ldr	r3, [r3, #12]
9000c882:	4a1a      	ldr	r2, [pc, #104]	@ (9000c8ec <DrawChar+0x2b0>)
9000c884:	015b      	lsls	r3, r3, #5
9000c886:	4413      	add	r3, r2
9000c888:	3304      	adds	r3, #4
9000c88a:	681a      	ldr	r2, [r3, #0]
9000c88c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c890:	009b      	lsls	r3, r3, #2
9000c892:	33c0      	adds	r3, #192	@ 0xc0
9000c894:	443b      	add	r3, r7
9000c896:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000c89a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c89e:	3301      	adds	r3, #1
9000c8a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c8a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c8a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c8ac:	429a      	cmp	r2, r3
9000c8ae:	d3c6      	bcc.n	9000c83e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000c8b0:	68b9      	ldr	r1, [r7, #8]
9000c8b2:	1c4b      	adds	r3, r1, #1
9000c8b4:	60bb      	str	r3, [r7, #8]
9000c8b6:	f107 0214 	add.w	r2, r7, #20
9000c8ba:	2301      	movs	r3, #1
9000c8bc:	9300      	str	r3, [sp, #0]
9000c8be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c8c2:	68f8      	ldr	r0, [r7, #12]
9000c8c4:	f7ff fd6a 	bl	9000c39c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000c8c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000c8cc:	3301      	adds	r3, #1
9000c8ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c8d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c8d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000c8da:	429a      	cmp	r2, r3
9000c8dc:	f4ff aedc 	bcc.w	9000c698 <DrawChar+0x5c>
    }
  }
}
9000c8e0:	bf00      	nop
9000c8e2:	bf00      	nop
9000c8e4:	37c0      	adds	r7, #192	@ 0xc0
9000c8e6:	46bd      	mov	sp, r7
9000c8e8:	bd80      	pop	{r7, pc}
9000c8ea:	bf00      	nop
9000c8ec:	20001330 	.word	0x20001330

9000c8f0 <sbrk_aligned>:
9000c8f0:	b570      	push	{r4, r5, r6, lr}
9000c8f2:	4e0f      	ldr	r6, [pc, #60]	@ (9000c930 <sbrk_aligned+0x40>)
9000c8f4:	460c      	mov	r4, r1
9000c8f6:	6831      	ldr	r1, [r6, #0]
9000c8f8:	4605      	mov	r5, r0
9000c8fa:	b911      	cbnz	r1, 9000c902 <sbrk_aligned+0x12>
9000c8fc:	f000 fada 	bl	9000ceb4 <_sbrk_r>
9000c900:	6030      	str	r0, [r6, #0]
9000c902:	4621      	mov	r1, r4
9000c904:	4628      	mov	r0, r5
9000c906:	f000 fad5 	bl	9000ceb4 <_sbrk_r>
9000c90a:	1c43      	adds	r3, r0, #1
9000c90c:	d103      	bne.n	9000c916 <sbrk_aligned+0x26>
9000c90e:	f04f 34ff 	mov.w	r4, #4294967295
9000c912:	4620      	mov	r0, r4
9000c914:	bd70      	pop	{r4, r5, r6, pc}
9000c916:	1cc4      	adds	r4, r0, #3
9000c918:	f024 0403 	bic.w	r4, r4, #3
9000c91c:	42a0      	cmp	r0, r4
9000c91e:	d0f8      	beq.n	9000c912 <sbrk_aligned+0x22>
9000c920:	1a21      	subs	r1, r4, r0
9000c922:	4628      	mov	r0, r5
9000c924:	f000 fac6 	bl	9000ceb4 <_sbrk_r>
9000c928:	3001      	adds	r0, #1
9000c92a:	d1f2      	bne.n	9000c912 <sbrk_aligned+0x22>
9000c92c:	e7ef      	b.n	9000c90e <sbrk_aligned+0x1e>
9000c92e:	bf00      	nop
9000c930:	2000139c 	.word	0x2000139c

9000c934 <_malloc_r>:
9000c934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c938:	1ccd      	adds	r5, r1, #3
9000c93a:	f025 0503 	bic.w	r5, r5, #3
9000c93e:	3508      	adds	r5, #8
9000c940:	2d0c      	cmp	r5, #12
9000c942:	bf38      	it	cc
9000c944:	250c      	movcc	r5, #12
9000c946:	2d00      	cmp	r5, #0
9000c948:	4606      	mov	r6, r0
9000c94a:	db01      	blt.n	9000c950 <_malloc_r+0x1c>
9000c94c:	42a9      	cmp	r1, r5
9000c94e:	d904      	bls.n	9000c95a <_malloc_r+0x26>
9000c950:	230c      	movs	r3, #12
9000c952:	6033      	str	r3, [r6, #0]
9000c954:	2000      	movs	r0, #0
9000c956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c95a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000ca30 <_malloc_r+0xfc>
9000c95e:	f000 f869 	bl	9000ca34 <__malloc_lock>
9000c962:	f8d8 3000 	ldr.w	r3, [r8]
9000c966:	461c      	mov	r4, r3
9000c968:	bb44      	cbnz	r4, 9000c9bc <_malloc_r+0x88>
9000c96a:	4629      	mov	r1, r5
9000c96c:	4630      	mov	r0, r6
9000c96e:	f7ff ffbf 	bl	9000c8f0 <sbrk_aligned>
9000c972:	1c43      	adds	r3, r0, #1
9000c974:	4604      	mov	r4, r0
9000c976:	d158      	bne.n	9000ca2a <_malloc_r+0xf6>
9000c978:	f8d8 4000 	ldr.w	r4, [r8]
9000c97c:	4627      	mov	r7, r4
9000c97e:	2f00      	cmp	r7, #0
9000c980:	d143      	bne.n	9000ca0a <_malloc_r+0xd6>
9000c982:	2c00      	cmp	r4, #0
9000c984:	d04b      	beq.n	9000ca1e <_malloc_r+0xea>
9000c986:	6823      	ldr	r3, [r4, #0]
9000c988:	4639      	mov	r1, r7
9000c98a:	4630      	mov	r0, r6
9000c98c:	eb04 0903 	add.w	r9, r4, r3
9000c990:	f000 fa90 	bl	9000ceb4 <_sbrk_r>
9000c994:	4581      	cmp	r9, r0
9000c996:	d142      	bne.n	9000ca1e <_malloc_r+0xea>
9000c998:	6821      	ldr	r1, [r4, #0]
9000c99a:	1a6d      	subs	r5, r5, r1
9000c99c:	4629      	mov	r1, r5
9000c99e:	4630      	mov	r0, r6
9000c9a0:	f7ff ffa6 	bl	9000c8f0 <sbrk_aligned>
9000c9a4:	3001      	adds	r0, #1
9000c9a6:	d03a      	beq.n	9000ca1e <_malloc_r+0xea>
9000c9a8:	6823      	ldr	r3, [r4, #0]
9000c9aa:	442b      	add	r3, r5
9000c9ac:	6023      	str	r3, [r4, #0]
9000c9ae:	f8d8 3000 	ldr.w	r3, [r8]
9000c9b2:	685a      	ldr	r2, [r3, #4]
9000c9b4:	bb62      	cbnz	r2, 9000ca10 <_malloc_r+0xdc>
9000c9b6:	f8c8 7000 	str.w	r7, [r8]
9000c9ba:	e00f      	b.n	9000c9dc <_malloc_r+0xa8>
9000c9bc:	6822      	ldr	r2, [r4, #0]
9000c9be:	1b52      	subs	r2, r2, r5
9000c9c0:	d420      	bmi.n	9000ca04 <_malloc_r+0xd0>
9000c9c2:	2a0b      	cmp	r2, #11
9000c9c4:	d917      	bls.n	9000c9f6 <_malloc_r+0xc2>
9000c9c6:	1961      	adds	r1, r4, r5
9000c9c8:	42a3      	cmp	r3, r4
9000c9ca:	6025      	str	r5, [r4, #0]
9000c9cc:	bf18      	it	ne
9000c9ce:	6059      	strne	r1, [r3, #4]
9000c9d0:	6863      	ldr	r3, [r4, #4]
9000c9d2:	bf08      	it	eq
9000c9d4:	f8c8 1000 	streq.w	r1, [r8]
9000c9d8:	5162      	str	r2, [r4, r5]
9000c9da:	604b      	str	r3, [r1, #4]
9000c9dc:	4630      	mov	r0, r6
9000c9de:	f000 f82f 	bl	9000ca40 <__malloc_unlock>
9000c9e2:	f104 000b 	add.w	r0, r4, #11
9000c9e6:	1d23      	adds	r3, r4, #4
9000c9e8:	f020 0007 	bic.w	r0, r0, #7
9000c9ec:	1ac2      	subs	r2, r0, r3
9000c9ee:	bf1c      	itt	ne
9000c9f0:	1a1b      	subne	r3, r3, r0
9000c9f2:	50a3      	strne	r3, [r4, r2]
9000c9f4:	e7af      	b.n	9000c956 <_malloc_r+0x22>
9000c9f6:	6862      	ldr	r2, [r4, #4]
9000c9f8:	42a3      	cmp	r3, r4
9000c9fa:	bf0c      	ite	eq
9000c9fc:	f8c8 2000 	streq.w	r2, [r8]
9000ca00:	605a      	strne	r2, [r3, #4]
9000ca02:	e7eb      	b.n	9000c9dc <_malloc_r+0xa8>
9000ca04:	4623      	mov	r3, r4
9000ca06:	6864      	ldr	r4, [r4, #4]
9000ca08:	e7ae      	b.n	9000c968 <_malloc_r+0x34>
9000ca0a:	463c      	mov	r4, r7
9000ca0c:	687f      	ldr	r7, [r7, #4]
9000ca0e:	e7b6      	b.n	9000c97e <_malloc_r+0x4a>
9000ca10:	461a      	mov	r2, r3
9000ca12:	685b      	ldr	r3, [r3, #4]
9000ca14:	42a3      	cmp	r3, r4
9000ca16:	d1fb      	bne.n	9000ca10 <_malloc_r+0xdc>
9000ca18:	2300      	movs	r3, #0
9000ca1a:	6053      	str	r3, [r2, #4]
9000ca1c:	e7de      	b.n	9000c9dc <_malloc_r+0xa8>
9000ca1e:	230c      	movs	r3, #12
9000ca20:	6033      	str	r3, [r6, #0]
9000ca22:	4630      	mov	r0, r6
9000ca24:	f000 f80c 	bl	9000ca40 <__malloc_unlock>
9000ca28:	e794      	b.n	9000c954 <_malloc_r+0x20>
9000ca2a:	6005      	str	r5, [r0, #0]
9000ca2c:	e7d6      	b.n	9000c9dc <_malloc_r+0xa8>
9000ca2e:	bf00      	nop
9000ca30:	200013a0 	.word	0x200013a0

9000ca34 <__malloc_lock>:
9000ca34:	4801      	ldr	r0, [pc, #4]	@ (9000ca3c <__malloc_lock+0x8>)
9000ca36:	f000 ba8a 	b.w	9000cf4e <__retarget_lock_acquire_recursive>
9000ca3a:	bf00      	nop
9000ca3c:	200014e4 	.word	0x200014e4

9000ca40 <__malloc_unlock>:
9000ca40:	4801      	ldr	r0, [pc, #4]	@ (9000ca48 <__malloc_unlock+0x8>)
9000ca42:	f000 ba85 	b.w	9000cf50 <__retarget_lock_release_recursive>
9000ca46:	bf00      	nop
9000ca48:	200014e4 	.word	0x200014e4

9000ca4c <std>:
9000ca4c:	2300      	movs	r3, #0
9000ca4e:	b510      	push	{r4, lr}
9000ca50:	4604      	mov	r4, r0
9000ca52:	e9c0 3300 	strd	r3, r3, [r0]
9000ca56:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000ca5a:	6083      	str	r3, [r0, #8]
9000ca5c:	8181      	strh	r1, [r0, #12]
9000ca5e:	6643      	str	r3, [r0, #100]	@ 0x64
9000ca60:	81c2      	strh	r2, [r0, #14]
9000ca62:	6183      	str	r3, [r0, #24]
9000ca64:	4619      	mov	r1, r3
9000ca66:	2208      	movs	r2, #8
9000ca68:	305c      	adds	r0, #92	@ 0x5c
9000ca6a:	f000 f9e7 	bl	9000ce3c <memset>
9000ca6e:	4b0d      	ldr	r3, [pc, #52]	@ (9000caa4 <std+0x58>)
9000ca70:	6263      	str	r3, [r4, #36]	@ 0x24
9000ca72:	4b0d      	ldr	r3, [pc, #52]	@ (9000caa8 <std+0x5c>)
9000ca74:	62a3      	str	r3, [r4, #40]	@ 0x28
9000ca76:	4b0d      	ldr	r3, [pc, #52]	@ (9000caac <std+0x60>)
9000ca78:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000ca7a:	4b0d      	ldr	r3, [pc, #52]	@ (9000cab0 <std+0x64>)
9000ca7c:	6323      	str	r3, [r4, #48]	@ 0x30
9000ca7e:	4b0d      	ldr	r3, [pc, #52]	@ (9000cab4 <std+0x68>)
9000ca80:	6224      	str	r4, [r4, #32]
9000ca82:	429c      	cmp	r4, r3
9000ca84:	d006      	beq.n	9000ca94 <std+0x48>
9000ca86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000ca8a:	4294      	cmp	r4, r2
9000ca8c:	d002      	beq.n	9000ca94 <std+0x48>
9000ca8e:	33d0      	adds	r3, #208	@ 0xd0
9000ca90:	429c      	cmp	r4, r3
9000ca92:	d105      	bne.n	9000caa0 <std+0x54>
9000ca94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000ca98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ca9c:	f000 ba56 	b.w	9000cf4c <__retarget_lock_init_recursive>
9000caa0:	bd10      	pop	{r4, pc}
9000caa2:	bf00      	nop
9000caa4:	9000cc8d 	.word	0x9000cc8d
9000caa8:	9000ccaf 	.word	0x9000ccaf
9000caac:	9000cce7 	.word	0x9000cce7
9000cab0:	9000cd0b 	.word	0x9000cd0b
9000cab4:	200013a4 	.word	0x200013a4

9000cab8 <stdio_exit_handler>:
9000cab8:	4a02      	ldr	r2, [pc, #8]	@ (9000cac4 <stdio_exit_handler+0xc>)
9000caba:	4903      	ldr	r1, [pc, #12]	@ (9000cac8 <stdio_exit_handler+0x10>)
9000cabc:	4803      	ldr	r0, [pc, #12]	@ (9000cacc <stdio_exit_handler+0x14>)
9000cabe:	f000 b869 	b.w	9000cb94 <_fwalk_sglue>
9000cac2:	bf00      	nop
9000cac4:	20000050 	.word	0x20000050
9000cac8:	9000d0f1 	.word	0x9000d0f1
9000cacc:	20000060 	.word	0x20000060

9000cad0 <cleanup_stdio>:
9000cad0:	6841      	ldr	r1, [r0, #4]
9000cad2:	4b0c      	ldr	r3, [pc, #48]	@ (9000cb04 <cleanup_stdio+0x34>)
9000cad4:	4299      	cmp	r1, r3
9000cad6:	b510      	push	{r4, lr}
9000cad8:	4604      	mov	r4, r0
9000cada:	d001      	beq.n	9000cae0 <cleanup_stdio+0x10>
9000cadc:	f000 fb08 	bl	9000d0f0 <_fflush_r>
9000cae0:	68a1      	ldr	r1, [r4, #8]
9000cae2:	4b09      	ldr	r3, [pc, #36]	@ (9000cb08 <cleanup_stdio+0x38>)
9000cae4:	4299      	cmp	r1, r3
9000cae6:	d002      	beq.n	9000caee <cleanup_stdio+0x1e>
9000cae8:	4620      	mov	r0, r4
9000caea:	f000 fb01 	bl	9000d0f0 <_fflush_r>
9000caee:	68e1      	ldr	r1, [r4, #12]
9000caf0:	4b06      	ldr	r3, [pc, #24]	@ (9000cb0c <cleanup_stdio+0x3c>)
9000caf2:	4299      	cmp	r1, r3
9000caf4:	d004      	beq.n	9000cb00 <cleanup_stdio+0x30>
9000caf6:	4620      	mov	r0, r4
9000caf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000cafc:	f000 baf8 	b.w	9000d0f0 <_fflush_r>
9000cb00:	bd10      	pop	{r4, pc}
9000cb02:	bf00      	nop
9000cb04:	200013a4 	.word	0x200013a4
9000cb08:	2000140c 	.word	0x2000140c
9000cb0c:	20001474 	.word	0x20001474

9000cb10 <global_stdio_init.part.0>:
9000cb10:	b510      	push	{r4, lr}
9000cb12:	4b0b      	ldr	r3, [pc, #44]	@ (9000cb40 <global_stdio_init.part.0+0x30>)
9000cb14:	4c0b      	ldr	r4, [pc, #44]	@ (9000cb44 <global_stdio_init.part.0+0x34>)
9000cb16:	4a0c      	ldr	r2, [pc, #48]	@ (9000cb48 <global_stdio_init.part.0+0x38>)
9000cb18:	601a      	str	r2, [r3, #0]
9000cb1a:	4620      	mov	r0, r4
9000cb1c:	2200      	movs	r2, #0
9000cb1e:	2104      	movs	r1, #4
9000cb20:	f7ff ff94 	bl	9000ca4c <std>
9000cb24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000cb28:	2201      	movs	r2, #1
9000cb2a:	2109      	movs	r1, #9
9000cb2c:	f7ff ff8e 	bl	9000ca4c <std>
9000cb30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000cb34:	2202      	movs	r2, #2
9000cb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000cb3a:	2112      	movs	r1, #18
9000cb3c:	f7ff bf86 	b.w	9000ca4c <std>
9000cb40:	200014dc 	.word	0x200014dc
9000cb44:	200013a4 	.word	0x200013a4
9000cb48:	9000cab9 	.word	0x9000cab9

9000cb4c <__sfp_lock_acquire>:
9000cb4c:	4801      	ldr	r0, [pc, #4]	@ (9000cb54 <__sfp_lock_acquire+0x8>)
9000cb4e:	f000 b9fe 	b.w	9000cf4e <__retarget_lock_acquire_recursive>
9000cb52:	bf00      	nop
9000cb54:	200014e5 	.word	0x200014e5

9000cb58 <__sfp_lock_release>:
9000cb58:	4801      	ldr	r0, [pc, #4]	@ (9000cb60 <__sfp_lock_release+0x8>)
9000cb5a:	f000 b9f9 	b.w	9000cf50 <__retarget_lock_release_recursive>
9000cb5e:	bf00      	nop
9000cb60:	200014e5 	.word	0x200014e5

9000cb64 <__sinit>:
9000cb64:	b510      	push	{r4, lr}
9000cb66:	4604      	mov	r4, r0
9000cb68:	f7ff fff0 	bl	9000cb4c <__sfp_lock_acquire>
9000cb6c:	6a23      	ldr	r3, [r4, #32]
9000cb6e:	b11b      	cbz	r3, 9000cb78 <__sinit+0x14>
9000cb70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000cb74:	f7ff bff0 	b.w	9000cb58 <__sfp_lock_release>
9000cb78:	4b04      	ldr	r3, [pc, #16]	@ (9000cb8c <__sinit+0x28>)
9000cb7a:	6223      	str	r3, [r4, #32]
9000cb7c:	4b04      	ldr	r3, [pc, #16]	@ (9000cb90 <__sinit+0x2c>)
9000cb7e:	681b      	ldr	r3, [r3, #0]
9000cb80:	2b00      	cmp	r3, #0
9000cb82:	d1f5      	bne.n	9000cb70 <__sinit+0xc>
9000cb84:	f7ff ffc4 	bl	9000cb10 <global_stdio_init.part.0>
9000cb88:	e7f2      	b.n	9000cb70 <__sinit+0xc>
9000cb8a:	bf00      	nop
9000cb8c:	9000cad1 	.word	0x9000cad1
9000cb90:	200014dc 	.word	0x200014dc

9000cb94 <_fwalk_sglue>:
9000cb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000cb98:	4607      	mov	r7, r0
9000cb9a:	4688      	mov	r8, r1
9000cb9c:	4614      	mov	r4, r2
9000cb9e:	2600      	movs	r6, #0
9000cba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000cba4:	f1b9 0901 	subs.w	r9, r9, #1
9000cba8:	d505      	bpl.n	9000cbb6 <_fwalk_sglue+0x22>
9000cbaa:	6824      	ldr	r4, [r4, #0]
9000cbac:	2c00      	cmp	r4, #0
9000cbae:	d1f7      	bne.n	9000cba0 <_fwalk_sglue+0xc>
9000cbb0:	4630      	mov	r0, r6
9000cbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000cbb6:	89ab      	ldrh	r3, [r5, #12]
9000cbb8:	2b01      	cmp	r3, #1
9000cbba:	d907      	bls.n	9000cbcc <_fwalk_sglue+0x38>
9000cbbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000cbc0:	3301      	adds	r3, #1
9000cbc2:	d003      	beq.n	9000cbcc <_fwalk_sglue+0x38>
9000cbc4:	4629      	mov	r1, r5
9000cbc6:	4638      	mov	r0, r7
9000cbc8:	47c0      	blx	r8
9000cbca:	4306      	orrs	r6, r0
9000cbcc:	3568      	adds	r5, #104	@ 0x68
9000cbce:	e7e9      	b.n	9000cba4 <_fwalk_sglue+0x10>

9000cbd0 <_puts_r>:
9000cbd0:	6a03      	ldr	r3, [r0, #32]
9000cbd2:	b570      	push	{r4, r5, r6, lr}
9000cbd4:	6884      	ldr	r4, [r0, #8]
9000cbd6:	4605      	mov	r5, r0
9000cbd8:	460e      	mov	r6, r1
9000cbda:	b90b      	cbnz	r3, 9000cbe0 <_puts_r+0x10>
9000cbdc:	f7ff ffc2 	bl	9000cb64 <__sinit>
9000cbe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000cbe2:	07db      	lsls	r3, r3, #31
9000cbe4:	d405      	bmi.n	9000cbf2 <_puts_r+0x22>
9000cbe6:	89a3      	ldrh	r3, [r4, #12]
9000cbe8:	0598      	lsls	r0, r3, #22
9000cbea:	d402      	bmi.n	9000cbf2 <_puts_r+0x22>
9000cbec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cbee:	f000 f9ae 	bl	9000cf4e <__retarget_lock_acquire_recursive>
9000cbf2:	89a3      	ldrh	r3, [r4, #12]
9000cbf4:	0719      	lsls	r1, r3, #28
9000cbf6:	d502      	bpl.n	9000cbfe <_puts_r+0x2e>
9000cbf8:	6923      	ldr	r3, [r4, #16]
9000cbfa:	2b00      	cmp	r3, #0
9000cbfc:	d135      	bne.n	9000cc6a <_puts_r+0x9a>
9000cbfe:	4621      	mov	r1, r4
9000cc00:	4628      	mov	r0, r5
9000cc02:	f000 f8c5 	bl	9000cd90 <__swsetup_r>
9000cc06:	b380      	cbz	r0, 9000cc6a <_puts_r+0x9a>
9000cc08:	f04f 35ff 	mov.w	r5, #4294967295
9000cc0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000cc0e:	07da      	lsls	r2, r3, #31
9000cc10:	d405      	bmi.n	9000cc1e <_puts_r+0x4e>
9000cc12:	89a3      	ldrh	r3, [r4, #12]
9000cc14:	059b      	lsls	r3, r3, #22
9000cc16:	d402      	bmi.n	9000cc1e <_puts_r+0x4e>
9000cc18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cc1a:	f000 f999 	bl	9000cf50 <__retarget_lock_release_recursive>
9000cc1e:	4628      	mov	r0, r5
9000cc20:	bd70      	pop	{r4, r5, r6, pc}
9000cc22:	2b00      	cmp	r3, #0
9000cc24:	da04      	bge.n	9000cc30 <_puts_r+0x60>
9000cc26:	69a2      	ldr	r2, [r4, #24]
9000cc28:	429a      	cmp	r2, r3
9000cc2a:	dc17      	bgt.n	9000cc5c <_puts_r+0x8c>
9000cc2c:	290a      	cmp	r1, #10
9000cc2e:	d015      	beq.n	9000cc5c <_puts_r+0x8c>
9000cc30:	6823      	ldr	r3, [r4, #0]
9000cc32:	1c5a      	adds	r2, r3, #1
9000cc34:	6022      	str	r2, [r4, #0]
9000cc36:	7019      	strb	r1, [r3, #0]
9000cc38:	68a3      	ldr	r3, [r4, #8]
9000cc3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000cc3e:	3b01      	subs	r3, #1
9000cc40:	60a3      	str	r3, [r4, #8]
9000cc42:	2900      	cmp	r1, #0
9000cc44:	d1ed      	bne.n	9000cc22 <_puts_r+0x52>
9000cc46:	2b00      	cmp	r3, #0
9000cc48:	da11      	bge.n	9000cc6e <_puts_r+0x9e>
9000cc4a:	4622      	mov	r2, r4
9000cc4c:	210a      	movs	r1, #10
9000cc4e:	4628      	mov	r0, r5
9000cc50:	f000 f85f 	bl	9000cd12 <__swbuf_r>
9000cc54:	3001      	adds	r0, #1
9000cc56:	d0d7      	beq.n	9000cc08 <_puts_r+0x38>
9000cc58:	250a      	movs	r5, #10
9000cc5a:	e7d7      	b.n	9000cc0c <_puts_r+0x3c>
9000cc5c:	4622      	mov	r2, r4
9000cc5e:	4628      	mov	r0, r5
9000cc60:	f000 f857 	bl	9000cd12 <__swbuf_r>
9000cc64:	3001      	adds	r0, #1
9000cc66:	d1e7      	bne.n	9000cc38 <_puts_r+0x68>
9000cc68:	e7ce      	b.n	9000cc08 <_puts_r+0x38>
9000cc6a:	3e01      	subs	r6, #1
9000cc6c:	e7e4      	b.n	9000cc38 <_puts_r+0x68>
9000cc6e:	6823      	ldr	r3, [r4, #0]
9000cc70:	1c5a      	adds	r2, r3, #1
9000cc72:	6022      	str	r2, [r4, #0]
9000cc74:	220a      	movs	r2, #10
9000cc76:	701a      	strb	r2, [r3, #0]
9000cc78:	e7ee      	b.n	9000cc58 <_puts_r+0x88>
	...

9000cc7c <puts>:
9000cc7c:	4b02      	ldr	r3, [pc, #8]	@ (9000cc88 <puts+0xc>)
9000cc7e:	4601      	mov	r1, r0
9000cc80:	6818      	ldr	r0, [r3, #0]
9000cc82:	f7ff bfa5 	b.w	9000cbd0 <_puts_r>
9000cc86:	bf00      	nop
9000cc88:	2000005c 	.word	0x2000005c

9000cc8c <__sread>:
9000cc8c:	b510      	push	{r4, lr}
9000cc8e:	460c      	mov	r4, r1
9000cc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cc94:	f000 f8fc 	bl	9000ce90 <_read_r>
9000cc98:	2800      	cmp	r0, #0
9000cc9a:	bfab      	itete	ge
9000cc9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000cc9e:	89a3      	ldrhlt	r3, [r4, #12]
9000cca0:	181b      	addge	r3, r3, r0
9000cca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000cca6:	bfac      	ite	ge
9000cca8:	6563      	strge	r3, [r4, #84]	@ 0x54
9000ccaa:	81a3      	strhlt	r3, [r4, #12]
9000ccac:	bd10      	pop	{r4, pc}

9000ccae <__swrite>:
9000ccae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ccb2:	461f      	mov	r7, r3
9000ccb4:	898b      	ldrh	r3, [r1, #12]
9000ccb6:	05db      	lsls	r3, r3, #23
9000ccb8:	4605      	mov	r5, r0
9000ccba:	460c      	mov	r4, r1
9000ccbc:	4616      	mov	r6, r2
9000ccbe:	d505      	bpl.n	9000cccc <__swrite+0x1e>
9000ccc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ccc4:	2302      	movs	r3, #2
9000ccc6:	2200      	movs	r2, #0
9000ccc8:	f000 f8d0 	bl	9000ce6c <_lseek_r>
9000cccc:	89a3      	ldrh	r3, [r4, #12]
9000ccce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000ccd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000ccd6:	81a3      	strh	r3, [r4, #12]
9000ccd8:	4632      	mov	r2, r6
9000ccda:	463b      	mov	r3, r7
9000ccdc:	4628      	mov	r0, r5
9000ccde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000cce2:	f000 b8f7 	b.w	9000ced4 <_write_r>

9000cce6 <__sseek>:
9000cce6:	b510      	push	{r4, lr}
9000cce8:	460c      	mov	r4, r1
9000ccea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ccee:	f000 f8bd 	bl	9000ce6c <_lseek_r>
9000ccf2:	1c43      	adds	r3, r0, #1
9000ccf4:	89a3      	ldrh	r3, [r4, #12]
9000ccf6:	bf15      	itete	ne
9000ccf8:	6560      	strne	r0, [r4, #84]	@ 0x54
9000ccfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000ccfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000cd02:	81a3      	strheq	r3, [r4, #12]
9000cd04:	bf18      	it	ne
9000cd06:	81a3      	strhne	r3, [r4, #12]
9000cd08:	bd10      	pop	{r4, pc}

9000cd0a <__sclose>:
9000cd0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cd0e:	f000 b89d 	b.w	9000ce4c <_close_r>

9000cd12 <__swbuf_r>:
9000cd12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cd14:	460e      	mov	r6, r1
9000cd16:	4614      	mov	r4, r2
9000cd18:	4605      	mov	r5, r0
9000cd1a:	b118      	cbz	r0, 9000cd24 <__swbuf_r+0x12>
9000cd1c:	6a03      	ldr	r3, [r0, #32]
9000cd1e:	b90b      	cbnz	r3, 9000cd24 <__swbuf_r+0x12>
9000cd20:	f7ff ff20 	bl	9000cb64 <__sinit>
9000cd24:	69a3      	ldr	r3, [r4, #24]
9000cd26:	60a3      	str	r3, [r4, #8]
9000cd28:	89a3      	ldrh	r3, [r4, #12]
9000cd2a:	071a      	lsls	r2, r3, #28
9000cd2c:	d501      	bpl.n	9000cd32 <__swbuf_r+0x20>
9000cd2e:	6923      	ldr	r3, [r4, #16]
9000cd30:	b943      	cbnz	r3, 9000cd44 <__swbuf_r+0x32>
9000cd32:	4621      	mov	r1, r4
9000cd34:	4628      	mov	r0, r5
9000cd36:	f000 f82b 	bl	9000cd90 <__swsetup_r>
9000cd3a:	b118      	cbz	r0, 9000cd44 <__swbuf_r+0x32>
9000cd3c:	f04f 37ff 	mov.w	r7, #4294967295
9000cd40:	4638      	mov	r0, r7
9000cd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000cd44:	6823      	ldr	r3, [r4, #0]
9000cd46:	6922      	ldr	r2, [r4, #16]
9000cd48:	1a98      	subs	r0, r3, r2
9000cd4a:	6963      	ldr	r3, [r4, #20]
9000cd4c:	b2f6      	uxtb	r6, r6
9000cd4e:	4283      	cmp	r3, r0
9000cd50:	4637      	mov	r7, r6
9000cd52:	dc05      	bgt.n	9000cd60 <__swbuf_r+0x4e>
9000cd54:	4621      	mov	r1, r4
9000cd56:	4628      	mov	r0, r5
9000cd58:	f000 f9ca 	bl	9000d0f0 <_fflush_r>
9000cd5c:	2800      	cmp	r0, #0
9000cd5e:	d1ed      	bne.n	9000cd3c <__swbuf_r+0x2a>
9000cd60:	68a3      	ldr	r3, [r4, #8]
9000cd62:	3b01      	subs	r3, #1
9000cd64:	60a3      	str	r3, [r4, #8]
9000cd66:	6823      	ldr	r3, [r4, #0]
9000cd68:	1c5a      	adds	r2, r3, #1
9000cd6a:	6022      	str	r2, [r4, #0]
9000cd6c:	701e      	strb	r6, [r3, #0]
9000cd6e:	6962      	ldr	r2, [r4, #20]
9000cd70:	1c43      	adds	r3, r0, #1
9000cd72:	429a      	cmp	r2, r3
9000cd74:	d004      	beq.n	9000cd80 <__swbuf_r+0x6e>
9000cd76:	89a3      	ldrh	r3, [r4, #12]
9000cd78:	07db      	lsls	r3, r3, #31
9000cd7a:	d5e1      	bpl.n	9000cd40 <__swbuf_r+0x2e>
9000cd7c:	2e0a      	cmp	r6, #10
9000cd7e:	d1df      	bne.n	9000cd40 <__swbuf_r+0x2e>
9000cd80:	4621      	mov	r1, r4
9000cd82:	4628      	mov	r0, r5
9000cd84:	f000 f9b4 	bl	9000d0f0 <_fflush_r>
9000cd88:	2800      	cmp	r0, #0
9000cd8a:	d0d9      	beq.n	9000cd40 <__swbuf_r+0x2e>
9000cd8c:	e7d6      	b.n	9000cd3c <__swbuf_r+0x2a>
	...

9000cd90 <__swsetup_r>:
9000cd90:	b538      	push	{r3, r4, r5, lr}
9000cd92:	4b29      	ldr	r3, [pc, #164]	@ (9000ce38 <__swsetup_r+0xa8>)
9000cd94:	4605      	mov	r5, r0
9000cd96:	6818      	ldr	r0, [r3, #0]
9000cd98:	460c      	mov	r4, r1
9000cd9a:	b118      	cbz	r0, 9000cda4 <__swsetup_r+0x14>
9000cd9c:	6a03      	ldr	r3, [r0, #32]
9000cd9e:	b90b      	cbnz	r3, 9000cda4 <__swsetup_r+0x14>
9000cda0:	f7ff fee0 	bl	9000cb64 <__sinit>
9000cda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cda8:	0719      	lsls	r1, r3, #28
9000cdaa:	d422      	bmi.n	9000cdf2 <__swsetup_r+0x62>
9000cdac:	06da      	lsls	r2, r3, #27
9000cdae:	d407      	bmi.n	9000cdc0 <__swsetup_r+0x30>
9000cdb0:	2209      	movs	r2, #9
9000cdb2:	602a      	str	r2, [r5, #0]
9000cdb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cdb8:	81a3      	strh	r3, [r4, #12]
9000cdba:	f04f 30ff 	mov.w	r0, #4294967295
9000cdbe:	e033      	b.n	9000ce28 <__swsetup_r+0x98>
9000cdc0:	0758      	lsls	r0, r3, #29
9000cdc2:	d512      	bpl.n	9000cdea <__swsetup_r+0x5a>
9000cdc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000cdc6:	b141      	cbz	r1, 9000cdda <__swsetup_r+0x4a>
9000cdc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000cdcc:	4299      	cmp	r1, r3
9000cdce:	d002      	beq.n	9000cdd6 <__swsetup_r+0x46>
9000cdd0:	4628      	mov	r0, r5
9000cdd2:	f000 f8bf 	bl	9000cf54 <_free_r>
9000cdd6:	2300      	movs	r3, #0
9000cdd8:	6363      	str	r3, [r4, #52]	@ 0x34
9000cdda:	89a3      	ldrh	r3, [r4, #12]
9000cddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000cde0:	81a3      	strh	r3, [r4, #12]
9000cde2:	2300      	movs	r3, #0
9000cde4:	6063      	str	r3, [r4, #4]
9000cde6:	6923      	ldr	r3, [r4, #16]
9000cde8:	6023      	str	r3, [r4, #0]
9000cdea:	89a3      	ldrh	r3, [r4, #12]
9000cdec:	f043 0308 	orr.w	r3, r3, #8
9000cdf0:	81a3      	strh	r3, [r4, #12]
9000cdf2:	6923      	ldr	r3, [r4, #16]
9000cdf4:	b94b      	cbnz	r3, 9000ce0a <__swsetup_r+0x7a>
9000cdf6:	89a3      	ldrh	r3, [r4, #12]
9000cdf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000cdfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000ce00:	d003      	beq.n	9000ce0a <__swsetup_r+0x7a>
9000ce02:	4621      	mov	r1, r4
9000ce04:	4628      	mov	r0, r5
9000ce06:	f000 f9c1 	bl	9000d18c <__smakebuf_r>
9000ce0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000ce0e:	f013 0201 	ands.w	r2, r3, #1
9000ce12:	d00a      	beq.n	9000ce2a <__swsetup_r+0x9a>
9000ce14:	2200      	movs	r2, #0
9000ce16:	60a2      	str	r2, [r4, #8]
9000ce18:	6962      	ldr	r2, [r4, #20]
9000ce1a:	4252      	negs	r2, r2
9000ce1c:	61a2      	str	r2, [r4, #24]
9000ce1e:	6922      	ldr	r2, [r4, #16]
9000ce20:	b942      	cbnz	r2, 9000ce34 <__swsetup_r+0xa4>
9000ce22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000ce26:	d1c5      	bne.n	9000cdb4 <__swsetup_r+0x24>
9000ce28:	bd38      	pop	{r3, r4, r5, pc}
9000ce2a:	0799      	lsls	r1, r3, #30
9000ce2c:	bf58      	it	pl
9000ce2e:	6962      	ldrpl	r2, [r4, #20]
9000ce30:	60a2      	str	r2, [r4, #8]
9000ce32:	e7f4      	b.n	9000ce1e <__swsetup_r+0x8e>
9000ce34:	2000      	movs	r0, #0
9000ce36:	e7f7      	b.n	9000ce28 <__swsetup_r+0x98>
9000ce38:	2000005c 	.word	0x2000005c

9000ce3c <memset>:
9000ce3c:	4402      	add	r2, r0
9000ce3e:	4603      	mov	r3, r0
9000ce40:	4293      	cmp	r3, r2
9000ce42:	d100      	bne.n	9000ce46 <memset+0xa>
9000ce44:	4770      	bx	lr
9000ce46:	f803 1b01 	strb.w	r1, [r3], #1
9000ce4a:	e7f9      	b.n	9000ce40 <memset+0x4>

9000ce4c <_close_r>:
9000ce4c:	b538      	push	{r3, r4, r5, lr}
9000ce4e:	4d06      	ldr	r5, [pc, #24]	@ (9000ce68 <_close_r+0x1c>)
9000ce50:	2300      	movs	r3, #0
9000ce52:	4604      	mov	r4, r0
9000ce54:	4608      	mov	r0, r1
9000ce56:	602b      	str	r3, [r5, #0]
9000ce58:	f7f4 f82d 	bl	90000eb6 <_close>
9000ce5c:	1c43      	adds	r3, r0, #1
9000ce5e:	d102      	bne.n	9000ce66 <_close_r+0x1a>
9000ce60:	682b      	ldr	r3, [r5, #0]
9000ce62:	b103      	cbz	r3, 9000ce66 <_close_r+0x1a>
9000ce64:	6023      	str	r3, [r4, #0]
9000ce66:	bd38      	pop	{r3, r4, r5, pc}
9000ce68:	200014e0 	.word	0x200014e0

9000ce6c <_lseek_r>:
9000ce6c:	b538      	push	{r3, r4, r5, lr}
9000ce6e:	4d07      	ldr	r5, [pc, #28]	@ (9000ce8c <_lseek_r+0x20>)
9000ce70:	4604      	mov	r4, r0
9000ce72:	4608      	mov	r0, r1
9000ce74:	4611      	mov	r1, r2
9000ce76:	2200      	movs	r2, #0
9000ce78:	602a      	str	r2, [r5, #0]
9000ce7a:	461a      	mov	r2, r3
9000ce7c:	f7f4 f842 	bl	90000f04 <_lseek>
9000ce80:	1c43      	adds	r3, r0, #1
9000ce82:	d102      	bne.n	9000ce8a <_lseek_r+0x1e>
9000ce84:	682b      	ldr	r3, [r5, #0]
9000ce86:	b103      	cbz	r3, 9000ce8a <_lseek_r+0x1e>
9000ce88:	6023      	str	r3, [r4, #0]
9000ce8a:	bd38      	pop	{r3, r4, r5, pc}
9000ce8c:	200014e0 	.word	0x200014e0

9000ce90 <_read_r>:
9000ce90:	b538      	push	{r3, r4, r5, lr}
9000ce92:	4d07      	ldr	r5, [pc, #28]	@ (9000ceb0 <_read_r+0x20>)
9000ce94:	4604      	mov	r4, r0
9000ce96:	4608      	mov	r0, r1
9000ce98:	4611      	mov	r1, r2
9000ce9a:	2200      	movs	r2, #0
9000ce9c:	602a      	str	r2, [r5, #0]
9000ce9e:	461a      	mov	r2, r3
9000cea0:	f7f3 ffd0 	bl	90000e44 <_read>
9000cea4:	1c43      	adds	r3, r0, #1
9000cea6:	d102      	bne.n	9000ceae <_read_r+0x1e>
9000cea8:	682b      	ldr	r3, [r5, #0]
9000ceaa:	b103      	cbz	r3, 9000ceae <_read_r+0x1e>
9000ceac:	6023      	str	r3, [r4, #0]
9000ceae:	bd38      	pop	{r3, r4, r5, pc}
9000ceb0:	200014e0 	.word	0x200014e0

9000ceb4 <_sbrk_r>:
9000ceb4:	b538      	push	{r3, r4, r5, lr}
9000ceb6:	4d06      	ldr	r5, [pc, #24]	@ (9000ced0 <_sbrk_r+0x1c>)
9000ceb8:	2300      	movs	r3, #0
9000ceba:	4604      	mov	r4, r0
9000cebc:	4608      	mov	r0, r1
9000cebe:	602b      	str	r3, [r5, #0]
9000cec0:	f7f4 f82e 	bl	90000f20 <_sbrk>
9000cec4:	1c43      	adds	r3, r0, #1
9000cec6:	d102      	bne.n	9000cece <_sbrk_r+0x1a>
9000cec8:	682b      	ldr	r3, [r5, #0]
9000ceca:	b103      	cbz	r3, 9000cece <_sbrk_r+0x1a>
9000cecc:	6023      	str	r3, [r4, #0]
9000cece:	bd38      	pop	{r3, r4, r5, pc}
9000ced0:	200014e0 	.word	0x200014e0

9000ced4 <_write_r>:
9000ced4:	b538      	push	{r3, r4, r5, lr}
9000ced6:	4d07      	ldr	r5, [pc, #28]	@ (9000cef4 <_write_r+0x20>)
9000ced8:	4604      	mov	r4, r0
9000ceda:	4608      	mov	r0, r1
9000cedc:	4611      	mov	r1, r2
9000cede:	2200      	movs	r2, #0
9000cee0:	602a      	str	r2, [r5, #0]
9000cee2:	461a      	mov	r2, r3
9000cee4:	f7f3 ffcb 	bl	90000e7e <_write>
9000cee8:	1c43      	adds	r3, r0, #1
9000ceea:	d102      	bne.n	9000cef2 <_write_r+0x1e>
9000ceec:	682b      	ldr	r3, [r5, #0]
9000ceee:	b103      	cbz	r3, 9000cef2 <_write_r+0x1e>
9000cef0:	6023      	str	r3, [r4, #0]
9000cef2:	bd38      	pop	{r3, r4, r5, pc}
9000cef4:	200014e0 	.word	0x200014e0

9000cef8 <__errno>:
9000cef8:	4b01      	ldr	r3, [pc, #4]	@ (9000cf00 <__errno+0x8>)
9000cefa:	6818      	ldr	r0, [r3, #0]
9000cefc:	4770      	bx	lr
9000cefe:	bf00      	nop
9000cf00:	2000005c 	.word	0x2000005c

9000cf04 <__libc_init_array>:
9000cf04:	b570      	push	{r4, r5, r6, lr}
9000cf06:	4d0d      	ldr	r5, [pc, #52]	@ (9000cf3c <__libc_init_array+0x38>)
9000cf08:	4c0d      	ldr	r4, [pc, #52]	@ (9000cf40 <__libc_init_array+0x3c>)
9000cf0a:	1b64      	subs	r4, r4, r5
9000cf0c:	10a4      	asrs	r4, r4, #2
9000cf0e:	2600      	movs	r6, #0
9000cf10:	42a6      	cmp	r6, r4
9000cf12:	d109      	bne.n	9000cf28 <__libc_init_array+0x24>
9000cf14:	4d0b      	ldr	r5, [pc, #44]	@ (9000cf44 <__libc_init_array+0x40>)
9000cf16:	4c0c      	ldr	r4, [pc, #48]	@ (9000cf48 <__libc_init_array+0x44>)
9000cf18:	f000 f996 	bl	9000d248 <_init>
9000cf1c:	1b64      	subs	r4, r4, r5
9000cf1e:	10a4      	asrs	r4, r4, #2
9000cf20:	2600      	movs	r6, #0
9000cf22:	42a6      	cmp	r6, r4
9000cf24:	d105      	bne.n	9000cf32 <__libc_init_array+0x2e>
9000cf26:	bd70      	pop	{r4, r5, r6, pc}
9000cf28:	f855 3b04 	ldr.w	r3, [r5], #4
9000cf2c:	4798      	blx	r3
9000cf2e:	3601      	adds	r6, #1
9000cf30:	e7ee      	b.n	9000cf10 <__libc_init_array+0xc>
9000cf32:	f855 3b04 	ldr.w	r3, [r5], #4
9000cf36:	4798      	blx	r3
9000cf38:	3601      	adds	r6, #1
9000cf3a:	e7f2      	b.n	9000cf22 <__libc_init_array+0x1e>
9000cf3c:	9000f724 	.word	0x9000f724
9000cf40:	9000f724 	.word	0x9000f724
9000cf44:	9000f724 	.word	0x9000f724
9000cf48:	9000f728 	.word	0x9000f728

9000cf4c <__retarget_lock_init_recursive>:
9000cf4c:	4770      	bx	lr

9000cf4e <__retarget_lock_acquire_recursive>:
9000cf4e:	4770      	bx	lr

9000cf50 <__retarget_lock_release_recursive>:
9000cf50:	4770      	bx	lr
	...

9000cf54 <_free_r>:
9000cf54:	b538      	push	{r3, r4, r5, lr}
9000cf56:	4605      	mov	r5, r0
9000cf58:	2900      	cmp	r1, #0
9000cf5a:	d041      	beq.n	9000cfe0 <_free_r+0x8c>
9000cf5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000cf60:	1f0c      	subs	r4, r1, #4
9000cf62:	2b00      	cmp	r3, #0
9000cf64:	bfb8      	it	lt
9000cf66:	18e4      	addlt	r4, r4, r3
9000cf68:	f7ff fd64 	bl	9000ca34 <__malloc_lock>
9000cf6c:	4a1d      	ldr	r2, [pc, #116]	@ (9000cfe4 <_free_r+0x90>)
9000cf6e:	6813      	ldr	r3, [r2, #0]
9000cf70:	b933      	cbnz	r3, 9000cf80 <_free_r+0x2c>
9000cf72:	6063      	str	r3, [r4, #4]
9000cf74:	6014      	str	r4, [r2, #0]
9000cf76:	4628      	mov	r0, r5
9000cf78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000cf7c:	f7ff bd60 	b.w	9000ca40 <__malloc_unlock>
9000cf80:	42a3      	cmp	r3, r4
9000cf82:	d908      	bls.n	9000cf96 <_free_r+0x42>
9000cf84:	6820      	ldr	r0, [r4, #0]
9000cf86:	1821      	adds	r1, r4, r0
9000cf88:	428b      	cmp	r3, r1
9000cf8a:	bf01      	itttt	eq
9000cf8c:	6819      	ldreq	r1, [r3, #0]
9000cf8e:	685b      	ldreq	r3, [r3, #4]
9000cf90:	1809      	addeq	r1, r1, r0
9000cf92:	6021      	streq	r1, [r4, #0]
9000cf94:	e7ed      	b.n	9000cf72 <_free_r+0x1e>
9000cf96:	461a      	mov	r2, r3
9000cf98:	685b      	ldr	r3, [r3, #4]
9000cf9a:	b10b      	cbz	r3, 9000cfa0 <_free_r+0x4c>
9000cf9c:	42a3      	cmp	r3, r4
9000cf9e:	d9fa      	bls.n	9000cf96 <_free_r+0x42>
9000cfa0:	6811      	ldr	r1, [r2, #0]
9000cfa2:	1850      	adds	r0, r2, r1
9000cfa4:	42a0      	cmp	r0, r4
9000cfa6:	d10b      	bne.n	9000cfc0 <_free_r+0x6c>
9000cfa8:	6820      	ldr	r0, [r4, #0]
9000cfaa:	4401      	add	r1, r0
9000cfac:	1850      	adds	r0, r2, r1
9000cfae:	4283      	cmp	r3, r0
9000cfb0:	6011      	str	r1, [r2, #0]
9000cfb2:	d1e0      	bne.n	9000cf76 <_free_r+0x22>
9000cfb4:	6818      	ldr	r0, [r3, #0]
9000cfb6:	685b      	ldr	r3, [r3, #4]
9000cfb8:	6053      	str	r3, [r2, #4]
9000cfba:	4408      	add	r0, r1
9000cfbc:	6010      	str	r0, [r2, #0]
9000cfbe:	e7da      	b.n	9000cf76 <_free_r+0x22>
9000cfc0:	d902      	bls.n	9000cfc8 <_free_r+0x74>
9000cfc2:	230c      	movs	r3, #12
9000cfc4:	602b      	str	r3, [r5, #0]
9000cfc6:	e7d6      	b.n	9000cf76 <_free_r+0x22>
9000cfc8:	6820      	ldr	r0, [r4, #0]
9000cfca:	1821      	adds	r1, r4, r0
9000cfcc:	428b      	cmp	r3, r1
9000cfce:	bf04      	itt	eq
9000cfd0:	6819      	ldreq	r1, [r3, #0]
9000cfd2:	685b      	ldreq	r3, [r3, #4]
9000cfd4:	6063      	str	r3, [r4, #4]
9000cfd6:	bf04      	itt	eq
9000cfd8:	1809      	addeq	r1, r1, r0
9000cfda:	6021      	streq	r1, [r4, #0]
9000cfdc:	6054      	str	r4, [r2, #4]
9000cfde:	e7ca      	b.n	9000cf76 <_free_r+0x22>
9000cfe0:	bd38      	pop	{r3, r4, r5, pc}
9000cfe2:	bf00      	nop
9000cfe4:	200013a0 	.word	0x200013a0

9000cfe8 <__sflush_r>:
9000cfe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cff0:	0716      	lsls	r6, r2, #28
9000cff2:	4605      	mov	r5, r0
9000cff4:	460c      	mov	r4, r1
9000cff6:	d454      	bmi.n	9000d0a2 <__sflush_r+0xba>
9000cff8:	684b      	ldr	r3, [r1, #4]
9000cffa:	2b00      	cmp	r3, #0
9000cffc:	dc02      	bgt.n	9000d004 <__sflush_r+0x1c>
9000cffe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d000:	2b00      	cmp	r3, #0
9000d002:	dd48      	ble.n	9000d096 <__sflush_r+0xae>
9000d004:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d006:	2e00      	cmp	r6, #0
9000d008:	d045      	beq.n	9000d096 <__sflush_r+0xae>
9000d00a:	2300      	movs	r3, #0
9000d00c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d010:	682f      	ldr	r7, [r5, #0]
9000d012:	6a21      	ldr	r1, [r4, #32]
9000d014:	602b      	str	r3, [r5, #0]
9000d016:	d030      	beq.n	9000d07a <__sflush_r+0x92>
9000d018:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d01a:	89a3      	ldrh	r3, [r4, #12]
9000d01c:	0759      	lsls	r1, r3, #29
9000d01e:	d505      	bpl.n	9000d02c <__sflush_r+0x44>
9000d020:	6863      	ldr	r3, [r4, #4]
9000d022:	1ad2      	subs	r2, r2, r3
9000d024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d026:	b10b      	cbz	r3, 9000d02c <__sflush_r+0x44>
9000d028:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d02a:	1ad2      	subs	r2, r2, r3
9000d02c:	2300      	movs	r3, #0
9000d02e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d030:	6a21      	ldr	r1, [r4, #32]
9000d032:	4628      	mov	r0, r5
9000d034:	47b0      	blx	r6
9000d036:	1c43      	adds	r3, r0, #1
9000d038:	89a3      	ldrh	r3, [r4, #12]
9000d03a:	d106      	bne.n	9000d04a <__sflush_r+0x62>
9000d03c:	6829      	ldr	r1, [r5, #0]
9000d03e:	291d      	cmp	r1, #29
9000d040:	d82b      	bhi.n	9000d09a <__sflush_r+0xb2>
9000d042:	4a2a      	ldr	r2, [pc, #168]	@ (9000d0ec <__sflush_r+0x104>)
9000d044:	40ca      	lsrs	r2, r1
9000d046:	07d6      	lsls	r6, r2, #31
9000d048:	d527      	bpl.n	9000d09a <__sflush_r+0xb2>
9000d04a:	2200      	movs	r2, #0
9000d04c:	6062      	str	r2, [r4, #4]
9000d04e:	04d9      	lsls	r1, r3, #19
9000d050:	6922      	ldr	r2, [r4, #16]
9000d052:	6022      	str	r2, [r4, #0]
9000d054:	d504      	bpl.n	9000d060 <__sflush_r+0x78>
9000d056:	1c42      	adds	r2, r0, #1
9000d058:	d101      	bne.n	9000d05e <__sflush_r+0x76>
9000d05a:	682b      	ldr	r3, [r5, #0]
9000d05c:	b903      	cbnz	r3, 9000d060 <__sflush_r+0x78>
9000d05e:	6560      	str	r0, [r4, #84]	@ 0x54
9000d060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d062:	602f      	str	r7, [r5, #0]
9000d064:	b1b9      	cbz	r1, 9000d096 <__sflush_r+0xae>
9000d066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d06a:	4299      	cmp	r1, r3
9000d06c:	d002      	beq.n	9000d074 <__sflush_r+0x8c>
9000d06e:	4628      	mov	r0, r5
9000d070:	f7ff ff70 	bl	9000cf54 <_free_r>
9000d074:	2300      	movs	r3, #0
9000d076:	6363      	str	r3, [r4, #52]	@ 0x34
9000d078:	e00d      	b.n	9000d096 <__sflush_r+0xae>
9000d07a:	2301      	movs	r3, #1
9000d07c:	4628      	mov	r0, r5
9000d07e:	47b0      	blx	r6
9000d080:	4602      	mov	r2, r0
9000d082:	1c50      	adds	r0, r2, #1
9000d084:	d1c9      	bne.n	9000d01a <__sflush_r+0x32>
9000d086:	682b      	ldr	r3, [r5, #0]
9000d088:	2b00      	cmp	r3, #0
9000d08a:	d0c6      	beq.n	9000d01a <__sflush_r+0x32>
9000d08c:	2b1d      	cmp	r3, #29
9000d08e:	d001      	beq.n	9000d094 <__sflush_r+0xac>
9000d090:	2b16      	cmp	r3, #22
9000d092:	d11e      	bne.n	9000d0d2 <__sflush_r+0xea>
9000d094:	602f      	str	r7, [r5, #0]
9000d096:	2000      	movs	r0, #0
9000d098:	e022      	b.n	9000d0e0 <__sflush_r+0xf8>
9000d09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d09e:	b21b      	sxth	r3, r3
9000d0a0:	e01b      	b.n	9000d0da <__sflush_r+0xf2>
9000d0a2:	690f      	ldr	r7, [r1, #16]
9000d0a4:	2f00      	cmp	r7, #0
9000d0a6:	d0f6      	beq.n	9000d096 <__sflush_r+0xae>
9000d0a8:	0793      	lsls	r3, r2, #30
9000d0aa:	680e      	ldr	r6, [r1, #0]
9000d0ac:	bf08      	it	eq
9000d0ae:	694b      	ldreq	r3, [r1, #20]
9000d0b0:	600f      	str	r7, [r1, #0]
9000d0b2:	bf18      	it	ne
9000d0b4:	2300      	movne	r3, #0
9000d0b6:	eba6 0807 	sub.w	r8, r6, r7
9000d0ba:	608b      	str	r3, [r1, #8]
9000d0bc:	f1b8 0f00 	cmp.w	r8, #0
9000d0c0:	dde9      	ble.n	9000d096 <__sflush_r+0xae>
9000d0c2:	6a21      	ldr	r1, [r4, #32]
9000d0c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d0c6:	4643      	mov	r3, r8
9000d0c8:	463a      	mov	r2, r7
9000d0ca:	4628      	mov	r0, r5
9000d0cc:	47b0      	blx	r6
9000d0ce:	2800      	cmp	r0, #0
9000d0d0:	dc08      	bgt.n	9000d0e4 <__sflush_r+0xfc>
9000d0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d0d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d0da:	81a3      	strh	r3, [r4, #12]
9000d0dc:	f04f 30ff 	mov.w	r0, #4294967295
9000d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d0e4:	4407      	add	r7, r0
9000d0e6:	eba8 0800 	sub.w	r8, r8, r0
9000d0ea:	e7e7      	b.n	9000d0bc <__sflush_r+0xd4>
9000d0ec:	20400001 	.word	0x20400001

9000d0f0 <_fflush_r>:
9000d0f0:	b538      	push	{r3, r4, r5, lr}
9000d0f2:	690b      	ldr	r3, [r1, #16]
9000d0f4:	4605      	mov	r5, r0
9000d0f6:	460c      	mov	r4, r1
9000d0f8:	b913      	cbnz	r3, 9000d100 <_fflush_r+0x10>
9000d0fa:	2500      	movs	r5, #0
9000d0fc:	4628      	mov	r0, r5
9000d0fe:	bd38      	pop	{r3, r4, r5, pc}
9000d100:	b118      	cbz	r0, 9000d10a <_fflush_r+0x1a>
9000d102:	6a03      	ldr	r3, [r0, #32]
9000d104:	b90b      	cbnz	r3, 9000d10a <_fflush_r+0x1a>
9000d106:	f7ff fd2d 	bl	9000cb64 <__sinit>
9000d10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d10e:	2b00      	cmp	r3, #0
9000d110:	d0f3      	beq.n	9000d0fa <_fflush_r+0xa>
9000d112:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d114:	07d0      	lsls	r0, r2, #31
9000d116:	d404      	bmi.n	9000d122 <_fflush_r+0x32>
9000d118:	0599      	lsls	r1, r3, #22
9000d11a:	d402      	bmi.n	9000d122 <_fflush_r+0x32>
9000d11c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d11e:	f7ff ff16 	bl	9000cf4e <__retarget_lock_acquire_recursive>
9000d122:	4628      	mov	r0, r5
9000d124:	4621      	mov	r1, r4
9000d126:	f7ff ff5f 	bl	9000cfe8 <__sflush_r>
9000d12a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d12c:	07da      	lsls	r2, r3, #31
9000d12e:	4605      	mov	r5, r0
9000d130:	d4e4      	bmi.n	9000d0fc <_fflush_r+0xc>
9000d132:	89a3      	ldrh	r3, [r4, #12]
9000d134:	059b      	lsls	r3, r3, #22
9000d136:	d4e1      	bmi.n	9000d0fc <_fflush_r+0xc>
9000d138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d13a:	f7ff ff09 	bl	9000cf50 <__retarget_lock_release_recursive>
9000d13e:	e7dd      	b.n	9000d0fc <_fflush_r+0xc>

9000d140 <__swhatbuf_r>:
9000d140:	b570      	push	{r4, r5, r6, lr}
9000d142:	460c      	mov	r4, r1
9000d144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d148:	2900      	cmp	r1, #0
9000d14a:	b096      	sub	sp, #88	@ 0x58
9000d14c:	4615      	mov	r5, r2
9000d14e:	461e      	mov	r6, r3
9000d150:	da0d      	bge.n	9000d16e <__swhatbuf_r+0x2e>
9000d152:	89a3      	ldrh	r3, [r4, #12]
9000d154:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000d158:	f04f 0100 	mov.w	r1, #0
9000d15c:	bf14      	ite	ne
9000d15e:	2340      	movne	r3, #64	@ 0x40
9000d160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000d164:	2000      	movs	r0, #0
9000d166:	6031      	str	r1, [r6, #0]
9000d168:	602b      	str	r3, [r5, #0]
9000d16a:	b016      	add	sp, #88	@ 0x58
9000d16c:	bd70      	pop	{r4, r5, r6, pc}
9000d16e:	466a      	mov	r2, sp
9000d170:	f000 f848 	bl	9000d204 <_fstat_r>
9000d174:	2800      	cmp	r0, #0
9000d176:	dbec      	blt.n	9000d152 <__swhatbuf_r+0x12>
9000d178:	9901      	ldr	r1, [sp, #4]
9000d17a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000d17e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000d182:	4259      	negs	r1, r3
9000d184:	4159      	adcs	r1, r3
9000d186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000d18a:	e7eb      	b.n	9000d164 <__swhatbuf_r+0x24>

9000d18c <__smakebuf_r>:
9000d18c:	898b      	ldrh	r3, [r1, #12]
9000d18e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000d190:	079d      	lsls	r5, r3, #30
9000d192:	4606      	mov	r6, r0
9000d194:	460c      	mov	r4, r1
9000d196:	d507      	bpl.n	9000d1a8 <__smakebuf_r+0x1c>
9000d198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000d19c:	6023      	str	r3, [r4, #0]
9000d19e:	6123      	str	r3, [r4, #16]
9000d1a0:	2301      	movs	r3, #1
9000d1a2:	6163      	str	r3, [r4, #20]
9000d1a4:	b003      	add	sp, #12
9000d1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000d1a8:	ab01      	add	r3, sp, #4
9000d1aa:	466a      	mov	r2, sp
9000d1ac:	f7ff ffc8 	bl	9000d140 <__swhatbuf_r>
9000d1b0:	9f00      	ldr	r7, [sp, #0]
9000d1b2:	4605      	mov	r5, r0
9000d1b4:	4639      	mov	r1, r7
9000d1b6:	4630      	mov	r0, r6
9000d1b8:	f7ff fbbc 	bl	9000c934 <_malloc_r>
9000d1bc:	b948      	cbnz	r0, 9000d1d2 <__smakebuf_r+0x46>
9000d1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d1c2:	059a      	lsls	r2, r3, #22
9000d1c4:	d4ee      	bmi.n	9000d1a4 <__smakebuf_r+0x18>
9000d1c6:	f023 0303 	bic.w	r3, r3, #3
9000d1ca:	f043 0302 	orr.w	r3, r3, #2
9000d1ce:	81a3      	strh	r3, [r4, #12]
9000d1d0:	e7e2      	b.n	9000d198 <__smakebuf_r+0xc>
9000d1d2:	89a3      	ldrh	r3, [r4, #12]
9000d1d4:	6020      	str	r0, [r4, #0]
9000d1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d1da:	81a3      	strh	r3, [r4, #12]
9000d1dc:	9b01      	ldr	r3, [sp, #4]
9000d1de:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000d1e2:	b15b      	cbz	r3, 9000d1fc <__smakebuf_r+0x70>
9000d1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d1e8:	4630      	mov	r0, r6
9000d1ea:	f000 f81d 	bl	9000d228 <_isatty_r>
9000d1ee:	b128      	cbz	r0, 9000d1fc <__smakebuf_r+0x70>
9000d1f0:	89a3      	ldrh	r3, [r4, #12]
9000d1f2:	f023 0303 	bic.w	r3, r3, #3
9000d1f6:	f043 0301 	orr.w	r3, r3, #1
9000d1fa:	81a3      	strh	r3, [r4, #12]
9000d1fc:	89a3      	ldrh	r3, [r4, #12]
9000d1fe:	431d      	orrs	r5, r3
9000d200:	81a5      	strh	r5, [r4, #12]
9000d202:	e7cf      	b.n	9000d1a4 <__smakebuf_r+0x18>

9000d204 <_fstat_r>:
9000d204:	b538      	push	{r3, r4, r5, lr}
9000d206:	4d07      	ldr	r5, [pc, #28]	@ (9000d224 <_fstat_r+0x20>)
9000d208:	2300      	movs	r3, #0
9000d20a:	4604      	mov	r4, r0
9000d20c:	4608      	mov	r0, r1
9000d20e:	4611      	mov	r1, r2
9000d210:	602b      	str	r3, [r5, #0]
9000d212:	f7f3 fe5c 	bl	90000ece <_fstat>
9000d216:	1c43      	adds	r3, r0, #1
9000d218:	d102      	bne.n	9000d220 <_fstat_r+0x1c>
9000d21a:	682b      	ldr	r3, [r5, #0]
9000d21c:	b103      	cbz	r3, 9000d220 <_fstat_r+0x1c>
9000d21e:	6023      	str	r3, [r4, #0]
9000d220:	bd38      	pop	{r3, r4, r5, pc}
9000d222:	bf00      	nop
9000d224:	200014e0 	.word	0x200014e0

9000d228 <_isatty_r>:
9000d228:	b538      	push	{r3, r4, r5, lr}
9000d22a:	4d06      	ldr	r5, [pc, #24]	@ (9000d244 <_isatty_r+0x1c>)
9000d22c:	2300      	movs	r3, #0
9000d22e:	4604      	mov	r4, r0
9000d230:	4608      	mov	r0, r1
9000d232:	602b      	str	r3, [r5, #0]
9000d234:	f7f3 fe5b 	bl	90000eee <_isatty>
9000d238:	1c43      	adds	r3, r0, #1
9000d23a:	d102      	bne.n	9000d242 <_isatty_r+0x1a>
9000d23c:	682b      	ldr	r3, [r5, #0]
9000d23e:	b103      	cbz	r3, 9000d242 <_isatty_r+0x1a>
9000d240:	6023      	str	r3, [r4, #0]
9000d242:	bd38      	pop	{r3, r4, r5, pc}
9000d244:	200014e0 	.word	0x200014e0

9000d248 <_init>:
9000d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d24a:	bf00      	nop
9000d24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d24e:	bc08      	pop	{r3}
9000d250:	469e      	mov	lr, r3
9000d252:	4770      	bx	lr

9000d254 <_fini>:
9000d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d256:	bf00      	nop
9000d258:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d25a:	bc08      	pop	{r3}
9000d25c:	469e      	mov	lr, r3
9000d25e:	4770      	bx	lr
