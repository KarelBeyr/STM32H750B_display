
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d0  90000298  90000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002484  9000a968  9000a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000cdec  9000cdec  0000e050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  9000cdec  9000cdec  0000e050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  9000cdec  9000cdec  0000e050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000cdec  9000cdec  0000ddec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000cdf0  9000cdf0  0000ddf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  9000cdf4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  20000050  9000ce44  0000e050  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200012a0  9000ce44  0000e2a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e050  2**0
                  CONTENTS, READONLY
 12 .debug_line   00025d67  00000000  00000000  0000e07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000068  00000000  00000000  00033de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00024aa9  00000000  00000000  00033e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a01  00000000  00000000  000588f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d70  00000000  00000000  0005d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018ac32  00000000  00000000  0005f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000016c2  00000000  00000000  001e9c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003f16e  00000000  00000000  001eb35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0022a4ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e34  00000000  00000000  0022a510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

90000298 <__do_global_dtors_aux>:
90000298:	b510      	push	{r4, lr}
9000029a:	4c05      	ldr	r4, [pc, #20]	@ (900002b0 <__do_global_dtors_aux+0x18>)
9000029c:	7823      	ldrb	r3, [r4, #0]
9000029e:	b933      	cbnz	r3, 900002ae <__do_global_dtors_aux+0x16>
900002a0:	4b04      	ldr	r3, [pc, #16]	@ (900002b4 <__do_global_dtors_aux+0x1c>)
900002a2:	b113      	cbz	r3, 900002aa <__do_global_dtors_aux+0x12>
900002a4:	4804      	ldr	r0, [pc, #16]	@ (900002b8 <__do_global_dtors_aux+0x20>)
900002a6:	f3af 8000 	nop.w
900002aa:	2301      	movs	r3, #1
900002ac:	7023      	strb	r3, [r4, #0]
900002ae:	bd10      	pop	{r4, pc}
900002b0:	20000050 	.word	0x20000050
900002b4:	00000000 	.word	0x00000000
900002b8:	9000a950 	.word	0x9000a950

900002bc <frame_dummy>:
900002bc:	b508      	push	{r3, lr}
900002be:	4b03      	ldr	r3, [pc, #12]	@ (900002cc <frame_dummy+0x10>)
900002c0:	b11b      	cbz	r3, 900002ca <frame_dummy+0xe>
900002c2:	4903      	ldr	r1, [pc, #12]	@ (900002d0 <frame_dummy+0x14>)
900002c4:	4803      	ldr	r0, [pc, #12]	@ (900002d4 <frame_dummy+0x18>)
900002c6:	f3af 8000 	nop.w
900002ca:	bd08      	pop	{r3, pc}
900002cc:	00000000 	.word	0x00000000
900002d0:	20000054 	.word	0x20000054
900002d4:	9000a950 	.word	0x9000a950

900002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900002d8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000314 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900002dc:	f002 fdf0 	bl	90002ec0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900002e0:	f002 fd8c 	bl	90002dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900002e4:	480c      	ldr	r0, [pc, #48]	@ (90000318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900002e6:	490d      	ldr	r1, [pc, #52]	@ (9000031c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900002e8:	4a0d      	ldr	r2, [pc, #52]	@ (90000320 <LoopFillZerobss+0x1a>)
  movs r3, #0
900002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
900002ec:	e002      	b.n	900002f4 <LoopCopyDataInit>

900002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900002f2:	3304      	adds	r3, #4

900002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
900002f8:	d3f9      	bcc.n	900002ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900002fa:	4a0a      	ldr	r2, [pc, #40]	@ (90000324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900002fc:	4c0a      	ldr	r4, [pc, #40]	@ (90000328 <LoopFillZerobss+0x22>)
  movs r3, #0
900002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
90000300:	e001      	b.n	90000306 <LoopFillZerobss>

90000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000304:	3204      	adds	r2, #4

90000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000308:	d3fb      	bcc.n	90000302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
9000030a:	f00a fafd 	bl	9000a908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000030e:	f000 f80f 	bl	90000330 <main>
  bx  lr
90000312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
9000031c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
90000320:	9000cdf4 	.word	0x9000cdf4
  ldr r2, =_sbss
90000324:	20000050 	.word	0x20000050
  ldr r4, =_ebss
90000328:	200012a0 	.word	0x200012a0

9000032c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
9000032c:	e7fe      	b.n	9000032c <ADC3_IRQHandler>
	...

90000330 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000330:	b580      	push	{r7, lr}
90000332:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000334:	f000 fa10 	bl	90000758 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
90000338:	f000 f97c 	bl	90000634 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
9000033c:	f002 fdd8 	bl	90002ef0 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000340:	f000 f874 	bl	9000042c <SystemClock_Config>
    
  /* Configure LED1 */
  BSP_LED_Init(LED1);
90000344:	2000      	movs	r0, #0
90000346:	f000 ff3b 	bl	900011c0 <BSP_LED_Init>
  
  /*##-1- LCD Initialization #################################################*/ 
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);  
9000034a:	2101      	movs	r1, #1
9000034c:	2000      	movs	r0, #0
9000034e:	f001 fbeb 	bl	90001b28 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000352:	4818      	ldr	r0, [pc, #96]	@ (900003b4 <main+0x84>)
90000354:	f009 ff7e 	bl	9000a254 <UTIL_LCD_SetFuncDriver>
 
  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90000358:	2000      	movs	r0, #0
9000035a:	f009 ffd1 	bl	9000a300 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000035e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000362:	f00a f843 	bl	9000a3ec <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90000366:	4914      	ldr	r1, [pc, #80]	@ (900003b8 <main+0x88>)
90000368:	2000      	movs	r0, #0
9000036a:	f001 fd97 	bl	90001e9c <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
9000036e:	4913      	ldr	r1, [pc, #76]	@ (900003bc <main+0x8c>)
90000370:	2000      	movs	r0, #0
90000372:	f001 fdb1 	bl	90001ed8 <BSP_LCD_GetYSize>
  
  hTS->Width = x_size;
90000376:	4b12      	ldr	r3, [pc, #72]	@ (900003c0 <main+0x90>)
90000378:	681b      	ldr	r3, [r3, #0]
9000037a:	4a0f      	ldr	r2, [pc, #60]	@ (900003b8 <main+0x88>)
9000037c:	6812      	ldr	r2, [r2, #0]
9000037e:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
90000380:	4b0f      	ldr	r3, [pc, #60]	@ (900003c0 <main+0x90>)
90000382:	681b      	ldr	r3, [r3, #0]
90000384:	4a0d      	ldr	r2, [pc, #52]	@ (900003bc <main+0x8c>)
90000386:	6812      	ldr	r2, [r2, #0]
90000388:	605a      	str	r2, [r3, #4]
  hTS->Orientation =TS_SWAP_XY ;
9000038a:	4b0d      	ldr	r3, [pc, #52]	@ (900003c0 <main+0x90>)
9000038c:	681b      	ldr	r3, [r3, #0]
9000038e:	2208      	movs	r2, #8
90000390:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
90000392:	4b0b      	ldr	r3, [pc, #44]	@ (900003c0 <main+0x90>)
90000394:	681b      	ldr	r3, [r3, #0]
90000396:	2205      	movs	r2, #5
90000398:	60da      	str	r2, [r3, #12]
  /* Touchscreen initialization */
  BSP_TS_Init(0, hTS);
9000039a:	4b09      	ldr	r3, [pc, #36]	@ (900003c0 <main+0x90>)
9000039c:	681b      	ldr	r3, [r3, #0]
9000039e:	4619      	mov	r1, r3
900003a0:	2000      	movs	r0, #0
900003a2:	f002 fc21 	bl	90002be8 <BSP_TS_Init>
  
  
  /*##-6- Draw the menu ######################################################*/
  //CPU_CACHE_Disable();
  Draw_Menu();  
900003a6:	f000 f80d 	bl	900003c4 <Draw_Menu>
  CPU_CACHE_Enable();
900003aa:	f000 f943 	bl	90000634 <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
900003ae:	bf00      	nop
900003b0:	e7fd      	b.n	900003ae <main+0x7e>
900003b2:	bf00      	nop
900003b4:	9000aa10 	.word	0x9000aa10
900003b8:	2000006c 	.word	0x2000006c
900003bc:	20000070 	.word	0x20000070
900003c0:	20000074 	.word	0x20000074

900003c4 <Draw_Menu>:
  * @brief  Draws the menu.
  * @param  None
  * @retval None
  */
static void Draw_Menu(void)
{ 
900003c4:	b580      	push	{r7, lr}
900003c6:	b082      	sub	sp, #8
900003c8:	af00      	add	r7, sp, #0
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
900003ca:	2000      	movs	r0, #0
900003cc:	f009 ff98 	bl	9000a300 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
900003d0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900003d4:	f00a f80a 	bl	9000a3ec <UTIL_LCD_Clear>
//  UTIL_LCD_FillCircle(145, (y_size - 24), 15,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(195, (y_size - 24), 10,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(245, (y_size - 24), 5,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(295, (y_size - 24), 2,UTIL_LCD_COLOR_WHITE);

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
900003d8:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
900003dc:	f009 ffae 	bl	9000a33c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
900003e0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900003e4:	f009 ffbe 	bl	9000a364 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
900003e8:	480c      	ldr	r0, [pc, #48]	@ (9000041c <Draw_Menu+0x58>)
900003ea:	f009 ffcf 	bl	9000a38c <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
900003ee:	2300      	movs	r3, #0
900003f0:	607b      	str	r3, [r7, #4]
900003f2:	e00a      	b.n	9000040a <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Hello world! Hello world!", LEFT_MODE);
900003f4:	687b      	ldr	r3, [r7, #4]
900003f6:	015b      	lsls	r3, r3, #5
900003f8:	4619      	mov	r1, r3
900003fa:	2303      	movs	r3, #3
900003fc:	4a08      	ldr	r2, [pc, #32]	@ (90000420 <Draw_Menu+0x5c>)
900003fe:	2000      	movs	r0, #0
90000400:	f00a f840 	bl	9000a484 <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90000404:	687b      	ldr	r3, [r7, #4]
90000406:	3301      	adds	r3, #1
90000408:	607b      	str	r3, [r7, #4]
9000040a:	687b      	ldr	r3, [r7, #4]
9000040c:	2b07      	cmp	r3, #7
9000040e:	ddf1      	ble.n	900003f4 <Draw_Menu+0x30>
  }
//  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillRect(380, (y_size - 40), 30, 30, UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillCircle(450, (y_size- 24), Radius, UTIL_LCD_COLOR_BLACK);
}
90000410:	bf00      	nop
90000412:	bf00      	nop
90000414:	3708      	adds	r7, #8
90000416:	46bd      	mov	sp, r7
90000418:	bd80      	pop	{r7, pc}
9000041a:	bf00      	nop
9000041c:	20000048 	.word	0x20000048
90000420:	9000a968 	.word	0x9000a968

90000424 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000424:	b480      	push	{r7}
90000426:	af00      	add	r7, sp, #0
  while(1)
90000428:	bf00      	nop
9000042a:	e7fd      	b.n	90000428 <Error_Handler+0x4>

9000042c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
9000042c:	b580      	push	{r7, lr}
9000042e:	b0ce      	sub	sp, #312	@ 0x138
90000430:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000432:	2300      	movs	r3, #0
90000434:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000043c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000440:	2200      	movs	r2, #0
90000442:	601a      	str	r2, [r3, #0]
90000444:	4b78      	ldr	r3, [pc, #480]	@ (90000628 <SystemClock_Config+0x1fc>)
90000446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000448:	4a77      	ldr	r2, [pc, #476]	@ (90000628 <SystemClock_Config+0x1fc>)
9000044a:	f023 0301 	bic.w	r3, r3, #1
9000044e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000450:	4b75      	ldr	r3, [pc, #468]	@ (90000628 <SystemClock_Config+0x1fc>)
90000452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000454:	f003 0201 	and.w	r2, r3, #1
90000458:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000045c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000460:	601a      	str	r2, [r3, #0]
90000462:	4b72      	ldr	r3, [pc, #456]	@ (9000062c <SystemClock_Config+0x200>)
90000464:	699b      	ldr	r3, [r3, #24]
90000466:	4a71      	ldr	r2, [pc, #452]	@ (9000062c <SystemClock_Config+0x200>)
90000468:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
9000046c:	6193      	str	r3, [r2, #24]
9000046e:	4b6f      	ldr	r3, [pc, #444]	@ (9000062c <SystemClock_Config+0x200>)
90000470:	699b      	ldr	r3, [r3, #24]
90000472:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000476:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000047a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
9000047e:	601a      	str	r2, [r3, #0]
90000480:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000484:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000488:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
9000048a:	bf00      	nop
9000048c:	4b67      	ldr	r3, [pc, #412]	@ (9000062c <SystemClock_Config+0x200>)
9000048e:	699b      	ldr	r3, [r3, #24]
90000490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000498:	d1f8      	bne.n	9000048c <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000049a:	2301      	movs	r3, #1
9000049c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900004a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
900004a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
900004a8:	2300      	movs	r3, #0
900004aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
900004ae:	2300      	movs	r3, #0
900004b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900004b4:	2302      	movs	r3, #2
900004b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900004ba:	2302      	movs	r3, #2
900004bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
900004c0:	2305      	movs	r3, #5
900004c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
900004c6:	23a0      	movs	r3, #160	@ 0xa0
900004c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900004cc:	2300      	movs	r3, #0
900004ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
900004d2:	2302      	movs	r3, #2
900004d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
900004d8:	2302      	movs	r3, #2
900004da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
900004de:	2304      	movs	r3, #4
900004e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900004e4:	2300      	movs	r3, #0
900004e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900004ea:	2308      	movs	r3, #8
900004ec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
900004f0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
900004f4:	4618      	mov	r0, r3
900004f6:	f006 fca1 	bl	90006e3c <HAL_RCC_OscConfig>
900004fa:	4603      	mov	r3, r0
900004fc:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000500:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000504:	2b00      	cmp	r3, #0
90000506:	d001      	beq.n	9000050c <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000508:	f7ff ff8c 	bl	90000424 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
9000050c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000510:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000514:	2205      	movs	r2, #5
90000516:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000518:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000051c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000520:	2260      	movs	r2, #96	@ 0x60
90000522:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000524:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000528:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
9000052c:	2202      	movs	r2, #2
9000052e:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000530:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000534:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000538:	220a      	movs	r2, #10
9000053a:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
9000053c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000540:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000544:	2212      	movs	r2, #18
90000546:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000548:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000054c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000550:	2200      	movs	r2, #0
90000552:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000554:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000558:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
9000055c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000560:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000562:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000566:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
9000056a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
9000056e:	f04f 0300 	mov.w	r3, #0
90000572:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000576:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000057a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
9000057e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000586:	f107 0308 	add.w	r3, r7, #8
9000058a:	4618      	mov	r0, r3
9000058c:	f007 fc26 	bl	90007ddc <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000590:	233f      	movs	r3, #63	@ 0x3f
90000592:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000596:	2303      	movs	r3, #3
90000598:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
9000059c:	2300      	movs	r3, #0
9000059e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
900005a2:	2308      	movs	r3, #8
900005a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900005a8:	2340      	movs	r3, #64	@ 0x40
900005aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
900005ae:	2340      	movs	r3, #64	@ 0x40
900005b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
900005b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900005b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
900005bc:	2340      	movs	r3, #64	@ 0x40
900005be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
900005c2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
900005c6:	2104      	movs	r1, #4
900005c8:	4618      	mov	r0, r3
900005ca:	f007 f891 	bl	900076f0 <HAL_RCC_ClockConfig>
900005ce:	4603      	mov	r3, r0
900005d0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
900005d4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
900005d8:	2b00      	cmp	r3, #0
900005da:	d001      	beq.n	900005e0 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
900005dc:	f7ff ff22 	bl	90000424 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
900005e0:	4b13      	ldr	r3, [pc, #76]	@ (90000630 <SystemClock_Config+0x204>)
900005e2:	681b      	ldr	r3, [r3, #0]
900005e4:	4a12      	ldr	r2, [pc, #72]	@ (90000630 <SystemClock_Config+0x204>)
900005e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900005ea:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
900005ec:	4b10      	ldr	r3, [pc, #64]	@ (90000630 <SystemClock_Config+0x204>)
900005ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900005f2:	4a0f      	ldr	r2, [pc, #60]	@ (90000630 <SystemClock_Config+0x204>)
900005f4:	f043 0302 	orr.w	r3, r3, #2
900005f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
900005fc:	4b0c      	ldr	r3, [pc, #48]	@ (90000630 <SystemClock_Config+0x204>)
900005fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000602:	f003 0202 	and.w	r2, r3, #2
90000606:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000060a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
9000060e:	601a      	str	r2, [r3, #0]
90000610:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000614:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000618:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
9000061a:	f002 fd0f 	bl	9000303c <HAL_EnableCompensationCell>
}
9000061e:	bf00      	nop
90000620:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000624:	46bd      	mov	sp, r7
90000626:	bd80      	pop	{r7, pc}
90000628:	58000400 	.word	0x58000400
9000062c:	58024800 	.word	0x58024800
90000630:	58024400 	.word	0x58024400

90000634 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000634:	b480      	push	{r7}
90000636:	b085      	sub	sp, #20
90000638:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000063a:	4b34      	ldr	r3, [pc, #208]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
9000063c:	695b      	ldr	r3, [r3, #20]
9000063e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000642:	2b00      	cmp	r3, #0
90000644:	d11b      	bne.n	9000067e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000646:	f3bf 8f4f 	dsb	sy
}
9000064a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000064c:	f3bf 8f6f 	isb	sy
}
90000650:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000652:	4b2e      	ldr	r3, [pc, #184]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
90000654:	2200      	movs	r2, #0
90000656:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000065a:	f3bf 8f4f 	dsb	sy
}
9000065e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000660:	f3bf 8f6f 	isb	sy
}
90000664:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000666:	4b29      	ldr	r3, [pc, #164]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
90000668:	695b      	ldr	r3, [r3, #20]
9000066a:	4a28      	ldr	r2, [pc, #160]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
9000066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000670:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000672:	f3bf 8f4f 	dsb	sy
}
90000676:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000678:	f3bf 8f6f 	isb	sy
}
9000067c:	e000      	b.n	90000680 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000067e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000680:	4b22      	ldr	r3, [pc, #136]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
90000682:	695b      	ldr	r3, [r3, #20]
90000684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000688:	2b00      	cmp	r3, #0
9000068a:	d138      	bne.n	900006fe <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000068c:	4b1f      	ldr	r3, [pc, #124]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
9000068e:	2200      	movs	r2, #0
90000690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000694:	f3bf 8f4f 	dsb	sy
}
90000698:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
9000069a:	4b1c      	ldr	r3, [pc, #112]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
9000069c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
900006a0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900006a2:	68fb      	ldr	r3, [r7, #12]
900006a4:	0b5b      	lsrs	r3, r3, #13
900006a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
900006aa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900006ac:	68fb      	ldr	r3, [r7, #12]
900006ae:	08db      	lsrs	r3, r3, #3
900006b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
900006b4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900006b6:	68bb      	ldr	r3, [r7, #8]
900006b8:	015a      	lsls	r2, r3, #5
900006ba:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
900006be:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
900006c0:	687a      	ldr	r2, [r7, #4]
900006c2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900006c4:	4911      	ldr	r1, [pc, #68]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
900006c6:	4313      	orrs	r3, r2
900006c8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
900006cc:	687b      	ldr	r3, [r7, #4]
900006ce:	1e5a      	subs	r2, r3, #1
900006d0:	607a      	str	r2, [r7, #4]
900006d2:	2b00      	cmp	r3, #0
900006d4:	d1ef      	bne.n	900006b6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
900006d6:	68bb      	ldr	r3, [r7, #8]
900006d8:	1e5a      	subs	r2, r3, #1
900006da:	60ba      	str	r2, [r7, #8]
900006dc:	2b00      	cmp	r3, #0
900006de:	d1e5      	bne.n	900006ac <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
900006e0:	f3bf 8f4f 	dsb	sy
}
900006e4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900006e6:	4b09      	ldr	r3, [pc, #36]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
900006e8:	695b      	ldr	r3, [r3, #20]
900006ea:	4a08      	ldr	r2, [pc, #32]	@ (9000070c <CPU_CACHE_Enable+0xd8>)
900006ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900006f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900006f2:	f3bf 8f4f 	dsb	sy
}
900006f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900006f8:	f3bf 8f6f 	isb	sy
}
900006fc:	e000      	b.n	90000700 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900006fe:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000700:	bf00      	nop
90000702:	3714      	adds	r7, #20
90000704:	46bd      	mov	sp, r7
90000706:	f85d 7b04 	ldr.w	r7, [sp], #4
9000070a:	4770      	bx	lr
9000070c:	e000ed00 	.word	0xe000ed00

90000710 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000710:	b580      	push	{r7, lr}
90000712:	b082      	sub	sp, #8
90000714:	af00      	add	r7, sp, #0
90000716:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000718:	490e      	ldr	r1, [pc, #56]	@ (90000754 <MX_LTDC_ClockConfig+0x44>)
9000071a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
9000071e:	f04f 0300 	mov.w	r3, #0
90000722:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000726:	4b0b      	ldr	r3, [pc, #44]	@ (90000754 <MX_LTDC_ClockConfig+0x44>)
90000728:	2205      	movs	r2, #5
9000072a:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
9000072c:	4b09      	ldr	r3, [pc, #36]	@ (90000754 <MX_LTDC_ClockConfig+0x44>)
9000072e:	22c0      	movs	r2, #192	@ 0xc0
90000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000732:	4b08      	ldr	r3, [pc, #32]	@ (90000754 <MX_LTDC_ClockConfig+0x44>)
90000734:	2202      	movs	r2, #2
90000736:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000738:	4b06      	ldr	r3, [pc, #24]	@ (90000754 <MX_LTDC_ClockConfig+0x44>)
9000073a:	2214      	movs	r2, #20
9000073c:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
9000073e:	4b05      	ldr	r3, [pc, #20]	@ (90000754 <MX_LTDC_ClockConfig+0x44>)
90000740:	2263      	movs	r2, #99	@ 0x63
90000742:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000744:	4803      	ldr	r0, [pc, #12]	@ (90000754 <MX_LTDC_ClockConfig+0x44>)
90000746:	f007 fb49 	bl	90007ddc <HAL_RCCEx_PeriphCLKConfig>
9000074a:	4603      	mov	r3, r0
}
9000074c:	4618      	mov	r0, r3
9000074e:	3708      	adds	r7, #8
90000750:	46bd      	mov	sp, r7
90000752:	bd80      	pop	{r7, pc}
90000754:	20000078 	.word	0x20000078

90000758 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000758:	b580      	push	{r7, lr}
9000075a:	b084      	sub	sp, #16
9000075c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
9000075e:	f002 fd8d 	bl	9000327c <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000762:	2301      	movs	r3, #1
90000764:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000766:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
9000076a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
9000076c:	2318      	movs	r3, #24
9000076e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000770:	2303      	movs	r3, #3
90000772:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000774:	2300      	movs	r3, #0
90000776:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000778:	2301      	movs	r3, #1
9000077a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
9000077c:	2300      	movs	r3, #0
9000077e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000780:	2301      	movs	r3, #1
90000782:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000784:	2300      	movs	r3, #0
90000786:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000788:	2300      	movs	r3, #0
9000078a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
9000078c:	2300      	movs	r3, #0
9000078e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000790:	463b      	mov	r3, r7
90000792:	4618      	mov	r0, r3
90000794:	f002 fdaa 	bl	900032ec <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000798:	2004      	movs	r0, #4
9000079a:	f002 fd87 	bl	900032ac <HAL_MPU_Enable>
}
9000079e:	bf00      	nop
900007a0:	3710      	adds	r7, #16
900007a2:	46bd      	mov	sp, r7
900007a4:	bd80      	pop	{r7, pc}

900007a6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
900007a6:	b480      	push	{r7}
900007a8:	af00      	add	r7, sp, #0
}
900007aa:	bf00      	nop
900007ac:	46bd      	mov	sp, r7
900007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900007b2:	4770      	bx	lr

900007b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
900007b4:	b480      	push	{r7}
900007b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
900007b8:	bf00      	nop
900007ba:	e7fd      	b.n	900007b8 <HardFault_Handler+0x4>

900007bc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
900007bc:	b480      	push	{r7}
900007be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
900007c0:	bf00      	nop
900007c2:	e7fd      	b.n	900007c0 <MemManage_Handler+0x4>

900007c4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
900007c4:	b480      	push	{r7}
900007c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
900007c8:	bf00      	nop
900007ca:	e7fd      	b.n	900007c8 <BusFault_Handler+0x4>

900007cc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
900007cc:	b480      	push	{r7}
900007ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
900007d0:	bf00      	nop
900007d2:	e7fd      	b.n	900007d0 <UsageFault_Handler+0x4>

900007d4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
900007d4:	b480      	push	{r7}
900007d6:	af00      	add	r7, sp, #0
}
900007d8:	bf00      	nop
900007da:	46bd      	mov	sp, r7
900007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900007e0:	4770      	bx	lr

900007e2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
900007e2:	b480      	push	{r7}
900007e4:	af00      	add	r7, sp, #0
}
900007e6:	bf00      	nop
900007e8:	46bd      	mov	sp, r7
900007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900007ee:	4770      	bx	lr

900007f0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
900007f0:	b480      	push	{r7}
900007f2:	af00      	add	r7, sp, #0
}
900007f4:	bf00      	nop
900007f6:	46bd      	mov	sp, r7
900007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900007fc:	4770      	bx	lr

900007fe <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
900007fe:	b580      	push	{r7, lr}
90000800:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000802:	f002 fbef 	bl	90002fe4 <HAL_IncTick>
}
90000806:	bf00      	nop
90000808:	bd80      	pop	{r7, pc}
	...

9000080c <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
9000080c:	b580      	push	{r7, lr}
9000080e:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000810:	4802      	ldr	r0, [pc, #8]	@ (9000081c <OTG_FS_IRQHandler+0x10>)
90000812:	f003 fb54 	bl	90003ebe <HAL_HCD_IRQHandler>
}
90000816:	bf00      	nop
90000818:	bd80      	pop	{r7, pc}
9000081a:	bf00      	nop
9000081c:	20000138 	.word	0x20000138

90000820 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90000820:	b580      	push	{r7, lr}
90000822:	b082      	sub	sp, #8
90000824:	af00      	add	r7, sp, #0
90000826:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90000828:	687b      	ldr	r3, [r7, #4]
9000082a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000082e:	4618      	mov	r0, r3
90000830:	f009 fc6a 	bl	9000a108 <USBH_LL_IncTimer>
}
90000834:	bf00      	nop
90000836:	3708      	adds	r7, #8
90000838:	46bd      	mov	sp, r7
9000083a:	bd80      	pop	{r7, pc}

9000083c <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
9000083c:	b580      	push	{r7, lr}
9000083e:	b082      	sub	sp, #8
90000840:	af00      	add	r7, sp, #0
90000842:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90000844:	687b      	ldr	r3, [r7, #4]
90000846:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000084a:	4618      	mov	r0, r3
9000084c:	f009 fca6 	bl	9000a19c <USBH_LL_Connect>
}
90000850:	bf00      	nop
90000852:	3708      	adds	r7, #8
90000854:	46bd      	mov	sp, r7
90000856:	bd80      	pop	{r7, pc}

90000858 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90000858:	b580      	push	{r7, lr}
9000085a:	b082      	sub	sp, #8
9000085c:	af00      	add	r7, sp, #0
9000085e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90000860:	687b      	ldr	r3, [r7, #4]
90000862:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000866:	4618      	mov	r0, r3
90000868:	f009 fcaf 	bl	9000a1ca <USBH_LL_Disconnect>
}
9000086c:	bf00      	nop
9000086e:	3708      	adds	r7, #8
90000870:	46bd      	mov	sp, r7
90000872:	bd80      	pop	{r7, pc}

90000874 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000874:	b580      	push	{r7, lr}
90000876:	b082      	sub	sp, #8
90000878:	af00      	add	r7, sp, #0
9000087a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
9000087c:	687b      	ldr	r3, [r7, #4]
9000087e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000882:	4618      	mov	r0, r3
90000884:	f009 fc6a 	bl	9000a15c <USBH_LL_PortEnabled>
}
90000888:	bf00      	nop
9000088a:	3708      	adds	r7, #8
9000088c:	46bd      	mov	sp, r7
9000088e:	bd80      	pop	{r7, pc}

90000890 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000890:	b580      	push	{r7, lr}
90000892:	b082      	sub	sp, #8
90000894:	af00      	add	r7, sp, #0
90000896:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90000898:	687b      	ldr	r3, [r7, #4]
9000089a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000089e:	4618      	mov	r0, r3
900008a0:	f009 fc6a 	bl	9000a178 <USBH_LL_PortDisabled>
}
900008a4:	bf00      	nop
900008a6:	3708      	adds	r7, #8
900008a8:	46bd      	mov	sp, r7
900008aa:	bd80      	pop	{r7, pc}

900008ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
900008ac:	b480      	push	{r7}
900008ae:	b083      	sub	sp, #12
900008b0:	af00      	add	r7, sp, #0
900008b2:	6078      	str	r0, [r7, #4]
900008b4:	460b      	mov	r3, r1
900008b6:	70fb      	strb	r3, [r7, #3]
900008b8:	4613      	mov	r3, r2
900008ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
900008bc:	bf00      	nop
900008be:	370c      	adds	r7, #12
900008c0:	46bd      	mov	sp, r7
900008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900008c6:	4770      	bx	lr

900008c8 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
900008c8:	b580      	push	{r7, lr}
900008ca:	b082      	sub	sp, #8
900008cc:	af00      	add	r7, sp, #0
900008ce:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
900008d0:	687b      	ldr	r3, [r7, #4]
900008d2:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
900008d6:	4618      	mov	r0, r3
900008d8:	f003 fc01 	bl	900040de <HAL_HCD_Stop>
  return USBH_OK;
900008dc:	2300      	movs	r3, #0
}
900008de:	4618      	mov	r0, r3
900008e0:	3708      	adds	r7, #8
900008e2:	46bd      	mov	sp, r7
900008e4:	bd80      	pop	{r7, pc}
	...

900008e8 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
900008e8:	b580      	push	{r7, lr}
900008ea:	b084      	sub	sp, #16
900008ec:	af00      	add	r7, sp, #0
900008ee:	6078      	str	r0, [r7, #4]
900008f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
900008f2:	687b      	ldr	r3, [r7, #4]
900008f4:	2b00      	cmp	r3, #0
900008f6:	d103      	bne.n	90000900 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
900008f8:	f04f 33ff 	mov.w	r3, #4294967295
900008fc:	60fb      	str	r3, [r7, #12]
900008fe:	e02c      	b.n	9000095a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90000900:	683b      	ldr	r3, [r7, #0]
90000902:	681a      	ldr	r2, [r3, #0]
90000904:	687b      	ldr	r3, [r7, #4]
90000906:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90000908:	683b      	ldr	r3, [r7, #0]
9000090a:	685a      	ldr	r2, [r3, #4]
9000090c:	687b      	ldr	r3, [r7, #4]
9000090e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90000910:	683b      	ldr	r3, [r7, #0]
90000912:	891a      	ldrh	r2, [r3, #8]
90000914:	687b      	ldr	r3, [r7, #4]
90000916:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90000918:	683b      	ldr	r3, [r7, #0]
9000091a:	68da      	ldr	r2, [r3, #12]
9000091c:	687b      	ldr	r3, [r7, #4]
9000091e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90000920:	683b      	ldr	r3, [r7, #0]
90000922:	691a      	ldr	r2, [r3, #16]
90000924:	687b      	ldr	r3, [r7, #4]
90000926:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90000928:	683b      	ldr	r3, [r7, #0]
9000092a:	695a      	ldr	r2, [r3, #20]
9000092c:	687b      	ldr	r3, [r7, #4]
9000092e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90000930:	687b      	ldr	r3, [r7, #4]
90000932:	4a0c      	ldr	r2, [pc, #48]	@ (90000964 <FT5336_RegisterBusIO+0x7c>)
90000934:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90000936:	687b      	ldr	r3, [r7, #4]
90000938:	4a0b      	ldr	r2, [pc, #44]	@ (90000968 <FT5336_RegisterBusIO+0x80>)
9000093a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
9000093c:	687b      	ldr	r3, [r7, #4]
9000093e:	687a      	ldr	r2, [r7, #4]
90000940:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
90000942:	687b      	ldr	r3, [r7, #4]
90000944:	681b      	ldr	r3, [r3, #0]
90000946:	2b00      	cmp	r3, #0
90000948:	d004      	beq.n	90000954 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
9000094a:	687b      	ldr	r3, [r7, #4]
9000094c:	681b      	ldr	r3, [r3, #0]
9000094e:	4798      	blx	r3
90000950:	60f8      	str	r0, [r7, #12]
90000952:	e002      	b.n	9000095a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90000954:	f04f 33ff 	mov.w	r3, #4294967295
90000958:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
9000095a:	68fb      	ldr	r3, [r7, #12]
}
9000095c:	4618      	mov	r0, r3
9000095e:	3710      	adds	r7, #16
90000960:	46bd      	mov	sp, r7
90000962:	bd80      	pop	{r7, pc}
90000964:	90000d61 	.word	0x90000d61
90000968:	90000d95 	.word	0x90000d95

9000096c <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
9000096c:	b480      	push	{r7}
9000096e:	b083      	sub	sp, #12
90000970:	af00      	add	r7, sp, #0
90000972:	6078      	str	r0, [r7, #4]
90000974:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90000976:	683b      	ldr	r3, [r7, #0]
90000978:	2201      	movs	r2, #1
9000097a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
9000097c:	683b      	ldr	r3, [r7, #0]
9000097e:	2201      	movs	r2, #1
90000980:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90000982:	683b      	ldr	r3, [r7, #0]
90000984:	2205      	movs	r2, #5
90000986:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90000988:	683b      	ldr	r3, [r7, #0]
9000098a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
9000098e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90000990:	683b      	ldr	r3, [r7, #0]
90000992:	f44f 7288 	mov.w	r2, #272	@ 0x110
90000996:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
90000998:	2300      	movs	r3, #0
}
9000099a:	4618      	mov	r0, r3
9000099c:	370c      	adds	r7, #12
9000099e:	46bd      	mov	sp, r7
900009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900009a4:	4770      	bx	lr

900009a6 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
900009a6:	b580      	push	{r7, lr}
900009a8:	b084      	sub	sp, #16
900009aa:	af00      	add	r7, sp, #0
900009ac:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
900009ae:	2300      	movs	r3, #0
900009b0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
900009b2:	687b      	ldr	r3, [r7, #4]
900009b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
900009b8:	2b00      	cmp	r3, #0
900009ba:	d10d      	bne.n	900009d8 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
900009bc:	687b      	ldr	r3, [r7, #4]
900009be:	681b      	ldr	r3, [r3, #0]
900009c0:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
900009c2:	6878      	ldr	r0, [r7, #4]
900009c4:	f000 f987 	bl	90000cd6 <FT5336_DisableIT>
900009c8:	4602      	mov	r2, r0
900009ca:	68fb      	ldr	r3, [r7, #12]
900009cc:	4413      	add	r3, r2
900009ce:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
900009d0:	687b      	ldr	r3, [r7, #4]
900009d2:	2201      	movs	r2, #1
900009d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
900009d8:	68fb      	ldr	r3, [r7, #12]
900009da:	2b00      	cmp	r3, #0
900009dc:	d002      	beq.n	900009e4 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
900009de:	f04f 33ff 	mov.w	r3, #4294967295
900009e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
900009e4:	68fb      	ldr	r3, [r7, #12]
}
900009e6:	4618      	mov	r0, r3
900009e8:	3710      	adds	r7, #16
900009ea:	46bd      	mov	sp, r7
900009ec:	bd80      	pop	{r7, pc}

900009ee <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
900009ee:	b480      	push	{r7}
900009f0:	b085      	sub	sp, #20
900009f2:	af00      	add	r7, sp, #0
900009f4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
900009f6:	2300      	movs	r3, #0
900009f8:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
900009fa:	687b      	ldr	r3, [r7, #4]
900009fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
90000a00:	2b01      	cmp	r3, #1
90000a02:	d103      	bne.n	90000a0c <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
90000a04:	687b      	ldr	r3, [r7, #4]
90000a06:	2200      	movs	r2, #0
90000a08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
90000a0c:	68fb      	ldr	r3, [r7, #12]
}
90000a0e:	4618      	mov	r0, r3
90000a10:	3714      	adds	r7, #20
90000a12:	46bd      	mov	sp, r7
90000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a18:	4770      	bx	lr

90000a1a <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
90000a1a:	b580      	push	{r7, lr}
90000a1c:	b084      	sub	sp, #16
90000a1e:	af00      	add	r7, sp, #0
90000a20:	6078      	str	r0, [r7, #4]
90000a22:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90000a24:	687b      	ldr	r3, [r7, #4]
90000a26:	f103 0218 	add.w	r2, r3, #24
90000a2a:	683b      	ldr	r3, [r7, #0]
90000a2c:	681b      	ldr	r3, [r3, #0]
90000a2e:	b2db      	uxtb	r3, r3
90000a30:	4619      	mov	r1, r3
90000a32:	4610      	mov	r0, r2
90000a34:	f000 fa25 	bl	90000e82 <ft5336_radian_value>
90000a38:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90000a3a:	687b      	ldr	r3, [r7, #4]
90000a3c:	f103 0218 	add.w	r2, r3, #24
90000a40:	683b      	ldr	r3, [r7, #0]
90000a42:	685b      	ldr	r3, [r3, #4]
90000a44:	b2db      	uxtb	r3, r3
90000a46:	4619      	mov	r1, r3
90000a48:	4610      	mov	r0, r2
90000a4a:	f000 fa2b 	bl	90000ea4 <ft5336_offset_left_right>
90000a4e:	4602      	mov	r2, r0
90000a50:	68fb      	ldr	r3, [r7, #12]
90000a52:	4413      	add	r3, r2
90000a54:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90000a56:	687b      	ldr	r3, [r7, #4]
90000a58:	f103 0218 	add.w	r2, r3, #24
90000a5c:	683b      	ldr	r3, [r7, #0]
90000a5e:	689b      	ldr	r3, [r3, #8]
90000a60:	b2db      	uxtb	r3, r3
90000a62:	4619      	mov	r1, r3
90000a64:	4610      	mov	r0, r2
90000a66:	f000 fa2e 	bl	90000ec6 <ft5336_offset_up_down>
90000a6a:	4602      	mov	r2, r0
90000a6c:	68fb      	ldr	r3, [r7, #12]
90000a6e:	4413      	add	r3, r2
90000a70:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90000a72:	687b      	ldr	r3, [r7, #4]
90000a74:	f103 0218 	add.w	r2, r3, #24
90000a78:	683b      	ldr	r3, [r7, #0]
90000a7a:	68db      	ldr	r3, [r3, #12]
90000a7c:	b2db      	uxtb	r3, r3
90000a7e:	4619      	mov	r1, r3
90000a80:	4610      	mov	r0, r2
90000a82:	f000 fa31 	bl	90000ee8 <ft5336_disatnce_left_right>
90000a86:	4602      	mov	r2, r0
90000a88:	68fb      	ldr	r3, [r7, #12]
90000a8a:	4413      	add	r3, r2
90000a8c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90000a8e:	687b      	ldr	r3, [r7, #4]
90000a90:	f103 0218 	add.w	r2, r3, #24
90000a94:	683b      	ldr	r3, [r7, #0]
90000a96:	691b      	ldr	r3, [r3, #16]
90000a98:	b2db      	uxtb	r3, r3
90000a9a:	4619      	mov	r1, r3
90000a9c:	4610      	mov	r0, r2
90000a9e:	f000 fa34 	bl	90000f0a <ft5336_distance_up_down>
90000aa2:	4602      	mov	r2, r0
90000aa4:	68fb      	ldr	r3, [r7, #12]
90000aa6:	4413      	add	r3, r2
90000aa8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90000aaa:	687b      	ldr	r3, [r7, #4]
90000aac:	f103 0218 	add.w	r2, r3, #24
90000ab0:	683b      	ldr	r3, [r7, #0]
90000ab2:	695b      	ldr	r3, [r3, #20]
90000ab4:	b2db      	uxtb	r3, r3
90000ab6:	4619      	mov	r1, r3
90000ab8:	4610      	mov	r0, r2
90000aba:	f000 fa37 	bl	90000f2c <ft5336_distance_zoom>
90000abe:	4602      	mov	r2, r0
90000ac0:	68fb      	ldr	r3, [r7, #12]
90000ac2:	4413      	add	r3, r2
90000ac4:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
90000ac6:	68fb      	ldr	r3, [r7, #12]
90000ac8:	2b00      	cmp	r3, #0
90000aca:	d002      	beq.n	90000ad2 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
90000acc:	f04f 33ff 	mov.w	r3, #4294967295
90000ad0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90000ad2:	68fb      	ldr	r3, [r7, #12]
}
90000ad4:	4618      	mov	r0, r3
90000ad6:	3710      	adds	r7, #16
90000ad8:	46bd      	mov	sp, r7
90000ada:	bd80      	pop	{r7, pc}

90000adc <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90000adc:	b580      	push	{r7, lr}
90000ade:	b082      	sub	sp, #8
90000ae0:	af00      	add	r7, sp, #0
90000ae2:	6078      	str	r0, [r7, #4]
90000ae4:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90000ae6:	687b      	ldr	r3, [r7, #4]
90000ae8:	3318      	adds	r3, #24
90000aea:	6839      	ldr	r1, [r7, #0]
90000aec:	4618      	mov	r0, r3
90000aee:	f000 fa3f 	bl	90000f70 <ft5336_chip_id>
90000af2:	4603      	mov	r3, r0
}
90000af4:	4618      	mov	r0, r3
90000af6:	3708      	adds	r7, #8
90000af8:	46bd      	mov	sp, r7
90000afa:	bd80      	pop	{r7, pc}

90000afc <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
90000afc:	b580      	push	{r7, lr}
90000afe:	b084      	sub	sp, #16
90000b00:	af00      	add	r7, sp, #0
90000b02:	6078      	str	r0, [r7, #4]
90000b04:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000b06:	2300      	movs	r3, #0
90000b08:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000b0a:	6878      	ldr	r0, [r7, #4]
90000b0c:	f000 f908 	bl	90000d20 <FT5336_DetectTouch>
90000b10:	4603      	mov	r3, r0
90000b12:	461a      	mov	r2, r3
90000b14:	683b      	ldr	r3, [r7, #0]
90000b16:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000b18:	687b      	ldr	r3, [r7, #4]
90000b1a:	f103 0018 	add.w	r0, r3, #24
90000b1e:	f107 0208 	add.w	r2, r7, #8
90000b22:	2304      	movs	r3, #4
90000b24:	2103      	movs	r1, #3
90000b26:	f000 f94f 	bl	90000dc8 <ft5336_read_reg>
90000b2a:	4603      	mov	r3, r0
90000b2c:	2b00      	cmp	r3, #0
90000b2e:	d003      	beq.n	90000b38 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
90000b30:	f04f 33ff 	mov.w	r3, #4294967295
90000b34:	60fb      	str	r3, [r7, #12]
90000b36:	e00f      	b.n	90000b58 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90000b38:	7a3b      	ldrb	r3, [r7, #8]
90000b3a:	021b      	lsls	r3, r3, #8
90000b3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
90000b40:	7a7a      	ldrb	r2, [r7, #9]
90000b42:	431a      	orrs	r2, r3
90000b44:	683b      	ldr	r3, [r7, #0]
90000b46:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90000b48:	7abb      	ldrb	r3, [r7, #10]
90000b4a:	021b      	lsls	r3, r3, #8
90000b4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
90000b50:	7afa      	ldrb	r2, [r7, #11]
90000b52:	431a      	orrs	r2, r3
90000b54:	683b      	ldr	r3, [r7, #0]
90000b56:	609a      	str	r2, [r3, #8]
  }

  return ret;
90000b58:	68fb      	ldr	r3, [r7, #12]
}
90000b5a:	4618      	mov	r0, r3
90000b5c:	3710      	adds	r7, #16
90000b5e:	46bd      	mov	sp, r7
90000b60:	bd80      	pop	{r7, pc}

90000b62 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
90000b62:	b580      	push	{r7, lr}
90000b64:	b08c      	sub	sp, #48	@ 0x30
90000b66:	af00      	add	r7, sp, #0
90000b68:	6078      	str	r0, [r7, #4]
90000b6a:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000b6c:	2300      	movs	r3, #0
90000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000b70:	6878      	ldr	r0, [r7, #4]
90000b72:	f000 f8d5 	bl	90000d20 <FT5336_DetectTouch>
90000b76:	4603      	mov	r3, r0
90000b78:	461a      	mov	r2, r3
90000b7a:	683b      	ldr	r3, [r7, #0]
90000b7c:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000b7e:	687b      	ldr	r3, [r7, #4]
90000b80:	f103 0018 	add.w	r0, r3, #24
90000b84:	f107 0208 	add.w	r2, r7, #8
90000b88:	231e      	movs	r3, #30
90000b8a:	2103      	movs	r1, #3
90000b8c:	f000 f91c 	bl	90000dc8 <ft5336_read_reg>
90000b90:	4603      	mov	r3, r0
90000b92:	2b00      	cmp	r3, #0
90000b94:	d003      	beq.n	90000b9e <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
90000b96:	f04f 33ff 	mov.w	r3, #4294967295
90000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
90000b9c:	e077      	b.n	90000c8e <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000b9e:	2300      	movs	r3, #0
90000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
90000ba2:	e071      	b.n	90000c88 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90000ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000ba6:	4613      	mov	r3, r2
90000ba8:	005b      	lsls	r3, r3, #1
90000baa:	4413      	add	r3, r2
90000bac:	005b      	lsls	r3, r3, #1
90000bae:	3330      	adds	r3, #48	@ 0x30
90000bb0:	443b      	add	r3, r7
90000bb2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000bb6:	021b      	lsls	r3, r3, #8
90000bb8:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
90000bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000bbe:	4613      	mov	r3, r2
90000bc0:	005b      	lsls	r3, r3, #1
90000bc2:	4413      	add	r3, r2
90000bc4:	005b      	lsls	r3, r3, #1
90000bc6:	3301      	adds	r3, #1
90000bc8:	3330      	adds	r3, #48	@ 0x30
90000bca:	443b      	add	r3, r7
90000bcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000bd0:	ea41 0203 	orr.w	r2, r1, r3
90000bd4:	6839      	ldr	r1, [r7, #0]
90000bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000bd8:	009b      	lsls	r3, r3, #2
90000bda:	440b      	add	r3, r1
90000bdc:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90000bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000be0:	4613      	mov	r3, r2
90000be2:	005b      	lsls	r3, r3, #1
90000be4:	4413      	add	r3, r2
90000be6:	005b      	lsls	r3, r3, #1
90000be8:	3302      	adds	r3, #2
90000bea:	3330      	adds	r3, #48	@ 0x30
90000bec:	443b      	add	r3, r7
90000bee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000bf2:	021b      	lsls	r3, r3, #8
90000bf4:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
90000bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000bfa:	4613      	mov	r3, r2
90000bfc:	005b      	lsls	r3, r3, #1
90000bfe:	4413      	add	r3, r2
90000c00:	005b      	lsls	r3, r3, #1
90000c02:	3303      	adds	r3, #3
90000c04:	3330      	adds	r3, #48	@ 0x30
90000c06:	443b      	add	r3, r7
90000c08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000c0c:	4319      	orrs	r1, r3
90000c0e:	683b      	ldr	r3, [r7, #0]
90000c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000c12:	3206      	adds	r2, #6
90000c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90000c18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000c1a:	4613      	mov	r3, r2
90000c1c:	005b      	lsls	r3, r3, #1
90000c1e:	4413      	add	r3, r2
90000c20:	005b      	lsls	r3, r3, #1
90000c22:	3330      	adds	r3, #48	@ 0x30
90000c24:	443b      	add	r3, r7
90000c26:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000c2a:	099b      	lsrs	r3, r3, #6
90000c2c:	b2db      	uxtb	r3, r3
90000c2e:	4619      	mov	r1, r3
90000c30:	683b      	ldr	r3, [r7, #0]
90000c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000c34:	3210      	adds	r2, #16
90000c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90000c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000c3c:	4613      	mov	r3, r2
90000c3e:	005b      	lsls	r3, r3, #1
90000c40:	4413      	add	r3, r2
90000c42:	005b      	lsls	r3, r3, #1
90000c44:	3304      	adds	r3, #4
90000c46:	3330      	adds	r3, #48	@ 0x30
90000c48:	443b      	add	r3, r7
90000c4a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000c4e:	4619      	mov	r1, r3
90000c50:	683a      	ldr	r2, [r7, #0]
90000c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000c54:	330a      	adds	r3, #10
90000c56:	009b      	lsls	r3, r3, #2
90000c58:	4413      	add	r3, r2
90000c5a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90000c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000c5e:	4613      	mov	r3, r2
90000c60:	005b      	lsls	r3, r3, #1
90000c62:	4413      	add	r3, r2
90000c64:	005b      	lsls	r3, r3, #1
90000c66:	3305      	adds	r3, #5
90000c68:	3330      	adds	r3, #48	@ 0x30
90000c6a:	443b      	add	r3, r7
90000c6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000c70:	091b      	lsrs	r3, r3, #4
90000c72:	b2db      	uxtb	r3, r3
90000c74:	4619      	mov	r1, r3
90000c76:	683a      	ldr	r2, [r7, #0]
90000c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000c7a:	3314      	adds	r3, #20
90000c7c:	009b      	lsls	r3, r3, #2
90000c7e:	4413      	add	r3, r2
90000c80:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000c84:	3301      	adds	r3, #1
90000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
90000c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000c8a:	2b04      	cmp	r3, #4
90000c8c:	d98a      	bls.n	90000ba4 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
90000c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
90000c90:	4618      	mov	r0, r3
90000c92:	3730      	adds	r7, #48	@ 0x30
90000c94:	46bd      	mov	sp, r7
90000c96:	bd80      	pop	{r7, pc}

90000c98 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
90000c98:	b580      	push	{r7, lr}
90000c9a:	b082      	sub	sp, #8
90000c9c:	af00      	add	r7, sp, #0
90000c9e:	6078      	str	r0, [r7, #4]
90000ca0:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90000ca2:	687b      	ldr	r3, [r7, #4]
90000ca4:	3318      	adds	r3, #24
90000ca6:	6839      	ldr	r1, [r7, #0]
90000ca8:	4618      	mov	r0, r3
90000caa:	f000 f8bb 	bl	90000e24 <ft5336_gest_id>
90000cae:	4603      	mov	r3, r0
}
90000cb0:	4618      	mov	r0, r3
90000cb2:	3708      	adds	r7, #8
90000cb4:	46bd      	mov	sp, r7
90000cb6:	bd80      	pop	{r7, pc}

90000cb8 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
90000cb8:	b580      	push	{r7, lr}
90000cba:	b082      	sub	sp, #8
90000cbc:	af00      	add	r7, sp, #0
90000cbe:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90000cc0:	687b      	ldr	r3, [r7, #4]
90000cc2:	3318      	adds	r3, #24
90000cc4:	2101      	movs	r1, #1
90000cc6:	4618      	mov	r0, r3
90000cc8:	f000 f941 	bl	90000f4e <ft5336_g_mode>
90000ccc:	4603      	mov	r3, r0
}
90000cce:	4618      	mov	r0, r3
90000cd0:	3708      	adds	r7, #8
90000cd2:	46bd      	mov	sp, r7
90000cd4:	bd80      	pop	{r7, pc}

90000cd6 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
90000cd6:	b580      	push	{r7, lr}
90000cd8:	b082      	sub	sp, #8
90000cda:	af00      	add	r7, sp, #0
90000cdc:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90000cde:	687b      	ldr	r3, [r7, #4]
90000ce0:	3318      	adds	r3, #24
90000ce2:	2100      	movs	r1, #0
90000ce4:	4618      	mov	r0, r3
90000ce6:	f000 f932 	bl	90000f4e <ft5336_g_mode>
90000cea:	4603      	mov	r3, r0
}
90000cec:	4618      	mov	r0, r3
90000cee:	3708      	adds	r7, #8
90000cf0:	46bd      	mov	sp, r7
90000cf2:	bd80      	pop	{r7, pc}

90000cf4 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
90000cf4:	b480      	push	{r7}
90000cf6:	b083      	sub	sp, #12
90000cf8:	af00      	add	r7, sp, #0
90000cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000cfc:	2300      	movs	r3, #0
}
90000cfe:	4618      	mov	r0, r3
90000d00:	370c      	adds	r7, #12
90000d02:	46bd      	mov	sp, r7
90000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
90000d08:	4770      	bx	lr

90000d0a <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
90000d0a:	b480      	push	{r7}
90000d0c:	b083      	sub	sp, #12
90000d0e:	af00      	add	r7, sp, #0
90000d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000d12:	2300      	movs	r3, #0
}
90000d14:	4618      	mov	r0, r3
90000d16:	370c      	adds	r7, #12
90000d18:	46bd      	mov	sp, r7
90000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000d1e:	4770      	bx	lr

90000d20 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
90000d20:	b580      	push	{r7, lr}
90000d22:	b084      	sub	sp, #16
90000d24:	af00      	add	r7, sp, #0
90000d26:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90000d28:	687b      	ldr	r3, [r7, #4]
90000d2a:	3318      	adds	r3, #24
90000d2c:	f107 020b 	add.w	r2, r7, #11
90000d30:	4611      	mov	r1, r2
90000d32:	4618      	mov	r0, r3
90000d34:	f000 f886 	bl	90000e44 <ft5336_td_status>
90000d38:	4603      	mov	r3, r0
90000d3a:	2b00      	cmp	r3, #0
90000d3c:	d003      	beq.n	90000d46 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
90000d3e:	f04f 33ff 	mov.w	r3, #4294967295
90000d42:	60fb      	str	r3, [r7, #12]
90000d44:	e007      	b.n	90000d56 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90000d46:	7afb      	ldrb	r3, [r7, #11]
90000d48:	2b05      	cmp	r3, #5
90000d4a:	d902      	bls.n	90000d52 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
90000d4c:	2300      	movs	r3, #0
90000d4e:	60fb      	str	r3, [r7, #12]
90000d50:	e001      	b.n	90000d56 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
90000d52:	7afb      	ldrb	r3, [r7, #11]
90000d54:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
90000d56:	68fb      	ldr	r3, [r7, #12]
}
90000d58:	4618      	mov	r0, r3
90000d5a:	3710      	adds	r7, #16
90000d5c:	46bd      	mov	sp, r7
90000d5e:	bd80      	pop	{r7, pc}

90000d60 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000d60:	b590      	push	{r4, r7, lr}
90000d62:	b087      	sub	sp, #28
90000d64:	af00      	add	r7, sp, #0
90000d66:	60f8      	str	r0, [r7, #12]
90000d68:	607a      	str	r2, [r7, #4]
90000d6a:	461a      	mov	r2, r3
90000d6c:	460b      	mov	r3, r1
90000d6e:	72fb      	strb	r3, [r7, #11]
90000d70:	4613      	mov	r3, r2
90000d72:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000d74:	68fb      	ldr	r3, [r7, #12]
90000d76:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90000d78:	697b      	ldr	r3, [r7, #20]
90000d7a:	691c      	ldr	r4, [r3, #16]
90000d7c:	697b      	ldr	r3, [r7, #20]
90000d7e:	8918      	ldrh	r0, [r3, #8]
90000d80:	7afb      	ldrb	r3, [r7, #11]
90000d82:	b299      	uxth	r1, r3
90000d84:	893b      	ldrh	r3, [r7, #8]
90000d86:	687a      	ldr	r2, [r7, #4]
90000d88:	47a0      	blx	r4
90000d8a:	4603      	mov	r3, r0
}
90000d8c:	4618      	mov	r0, r3
90000d8e:	371c      	adds	r7, #28
90000d90:	46bd      	mov	sp, r7
90000d92:	bd90      	pop	{r4, r7, pc}

90000d94 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000d94:	b590      	push	{r4, r7, lr}
90000d96:	b087      	sub	sp, #28
90000d98:	af00      	add	r7, sp, #0
90000d9a:	60f8      	str	r0, [r7, #12]
90000d9c:	607a      	str	r2, [r7, #4]
90000d9e:	461a      	mov	r2, r3
90000da0:	460b      	mov	r3, r1
90000da2:	72fb      	strb	r3, [r7, #11]
90000da4:	4613      	mov	r3, r2
90000da6:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000da8:	68fb      	ldr	r3, [r7, #12]
90000daa:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90000dac:	697b      	ldr	r3, [r7, #20]
90000dae:	68dc      	ldr	r4, [r3, #12]
90000db0:	697b      	ldr	r3, [r7, #20]
90000db2:	8918      	ldrh	r0, [r3, #8]
90000db4:	7afb      	ldrb	r3, [r7, #11]
90000db6:	b299      	uxth	r1, r3
90000db8:	893b      	ldrh	r3, [r7, #8]
90000dba:	687a      	ldr	r2, [r7, #4]
90000dbc:	47a0      	blx	r4
90000dbe:	4603      	mov	r3, r0
}
90000dc0:	4618      	mov	r0, r3
90000dc2:	371c      	adds	r7, #28
90000dc4:	46bd      	mov	sp, r7
90000dc6:	bd90      	pop	{r4, r7, pc}

90000dc8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90000dc8:	b590      	push	{r4, r7, lr}
90000dca:	b085      	sub	sp, #20
90000dcc:	af00      	add	r7, sp, #0
90000dce:	60f8      	str	r0, [r7, #12]
90000dd0:	607a      	str	r2, [r7, #4]
90000dd2:	461a      	mov	r2, r3
90000dd4:	460b      	mov	r3, r1
90000dd6:	72fb      	strb	r3, [r7, #11]
90000dd8:	4613      	mov	r3, r2
90000dda:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90000ddc:	68fb      	ldr	r3, [r7, #12]
90000dde:	685c      	ldr	r4, [r3, #4]
90000de0:	68fb      	ldr	r3, [r7, #12]
90000de2:	6898      	ldr	r0, [r3, #8]
90000de4:	893b      	ldrh	r3, [r7, #8]
90000de6:	7af9      	ldrb	r1, [r7, #11]
90000de8:	687a      	ldr	r2, [r7, #4]
90000dea:	47a0      	blx	r4
90000dec:	4603      	mov	r3, r0
}
90000dee:	4618      	mov	r0, r3
90000df0:	3714      	adds	r7, #20
90000df2:	46bd      	mov	sp, r7
90000df4:	bd90      	pop	{r4, r7, pc}

90000df6 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
90000df6:	b590      	push	{r4, r7, lr}
90000df8:	b085      	sub	sp, #20
90000dfa:	af00      	add	r7, sp, #0
90000dfc:	60f8      	str	r0, [r7, #12]
90000dfe:	607a      	str	r2, [r7, #4]
90000e00:	461a      	mov	r2, r3
90000e02:	460b      	mov	r3, r1
90000e04:	72fb      	strb	r3, [r7, #11]
90000e06:	4613      	mov	r3, r2
90000e08:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90000e0a:	68fb      	ldr	r3, [r7, #12]
90000e0c:	681c      	ldr	r4, [r3, #0]
90000e0e:	68fb      	ldr	r3, [r7, #12]
90000e10:	6898      	ldr	r0, [r3, #8]
90000e12:	893b      	ldrh	r3, [r7, #8]
90000e14:	7af9      	ldrb	r1, [r7, #11]
90000e16:	687a      	ldr	r2, [r7, #4]
90000e18:	47a0      	blx	r4
90000e1a:	4603      	mov	r3, r0
}
90000e1c:	4618      	mov	r0, r3
90000e1e:	3714      	adds	r7, #20
90000e20:	46bd      	mov	sp, r7
90000e22:	bd90      	pop	{r4, r7, pc}

90000e24 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90000e24:	b580      	push	{r7, lr}
90000e26:	b082      	sub	sp, #8
90000e28:	af00      	add	r7, sp, #0
90000e2a:	6078      	str	r0, [r7, #4]
90000e2c:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
90000e2e:	2301      	movs	r3, #1
90000e30:	683a      	ldr	r2, [r7, #0]
90000e32:	2101      	movs	r1, #1
90000e34:	6878      	ldr	r0, [r7, #4]
90000e36:	f7ff ffc7 	bl	90000dc8 <ft5336_read_reg>
90000e3a:	4603      	mov	r3, r0
}
90000e3c:	4618      	mov	r0, r3
90000e3e:	3708      	adds	r7, #8
90000e40:	46bd      	mov	sp, r7
90000e42:	bd80      	pop	{r7, pc}

90000e44 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90000e44:	b580      	push	{r7, lr}
90000e46:	b084      	sub	sp, #16
90000e48:	af00      	add	r7, sp, #0
90000e4a:	6078      	str	r0, [r7, #4]
90000e4c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
90000e4e:	2301      	movs	r3, #1
90000e50:	683a      	ldr	r2, [r7, #0]
90000e52:	2102      	movs	r1, #2
90000e54:	6878      	ldr	r0, [r7, #4]
90000e56:	f7ff ffb7 	bl	90000dc8 <ft5336_read_reg>
90000e5a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90000e5c:	68fb      	ldr	r3, [r7, #12]
90000e5e:	2b00      	cmp	r3, #0
90000e60:	d10a      	bne.n	90000e78 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90000e62:	683b      	ldr	r3, [r7, #0]
90000e64:	781b      	ldrb	r3, [r3, #0]
90000e66:	f003 030f 	and.w	r3, r3, #15
90000e6a:	b2da      	uxtb	r2, r3
90000e6c:	683b      	ldr	r3, [r7, #0]
90000e6e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
90000e70:	683b      	ldr	r3, [r7, #0]
90000e72:	781a      	ldrb	r2, [r3, #0]
90000e74:	683b      	ldr	r3, [r7, #0]
90000e76:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90000e78:	68fb      	ldr	r3, [r7, #12]
}
90000e7a:	4618      	mov	r0, r3
90000e7c:	3710      	adds	r7, #16
90000e7e:	46bd      	mov	sp, r7
90000e80:	bd80      	pop	{r7, pc}

90000e82 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90000e82:	b580      	push	{r7, lr}
90000e84:	b082      	sub	sp, #8
90000e86:	af00      	add	r7, sp, #0
90000e88:	6078      	str	r0, [r7, #4]
90000e8a:	460b      	mov	r3, r1
90000e8c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
90000e8e:	1cfa      	adds	r2, r7, #3
90000e90:	2301      	movs	r3, #1
90000e92:	2191      	movs	r1, #145	@ 0x91
90000e94:	6878      	ldr	r0, [r7, #4]
90000e96:	f7ff ffae 	bl	90000df6 <ft5336_write_reg>
90000e9a:	4603      	mov	r3, r0
}
90000e9c:	4618      	mov	r0, r3
90000e9e:	3708      	adds	r7, #8
90000ea0:	46bd      	mov	sp, r7
90000ea2:	bd80      	pop	{r7, pc}

90000ea4 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90000ea4:	b580      	push	{r7, lr}
90000ea6:	b082      	sub	sp, #8
90000ea8:	af00      	add	r7, sp, #0
90000eaa:	6078      	str	r0, [r7, #4]
90000eac:	460b      	mov	r3, r1
90000eae:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
90000eb0:	1cfa      	adds	r2, r7, #3
90000eb2:	2301      	movs	r3, #1
90000eb4:	2192      	movs	r1, #146	@ 0x92
90000eb6:	6878      	ldr	r0, [r7, #4]
90000eb8:	f7ff ff9d 	bl	90000df6 <ft5336_write_reg>
90000ebc:	4603      	mov	r3, r0
}
90000ebe:	4618      	mov	r0, r3
90000ec0:	3708      	adds	r7, #8
90000ec2:	46bd      	mov	sp, r7
90000ec4:	bd80      	pop	{r7, pc}

90000ec6 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90000ec6:	b580      	push	{r7, lr}
90000ec8:	b082      	sub	sp, #8
90000eca:	af00      	add	r7, sp, #0
90000ecc:	6078      	str	r0, [r7, #4]
90000ece:	460b      	mov	r3, r1
90000ed0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
90000ed2:	1cfa      	adds	r2, r7, #3
90000ed4:	2301      	movs	r3, #1
90000ed6:	2193      	movs	r1, #147	@ 0x93
90000ed8:	6878      	ldr	r0, [r7, #4]
90000eda:	f7ff ff8c 	bl	90000df6 <ft5336_write_reg>
90000ede:	4603      	mov	r3, r0
}
90000ee0:	4618      	mov	r0, r3
90000ee2:	3708      	adds	r7, #8
90000ee4:	46bd      	mov	sp, r7
90000ee6:	bd80      	pop	{r7, pc}

90000ee8 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90000ee8:	b580      	push	{r7, lr}
90000eea:	b082      	sub	sp, #8
90000eec:	af00      	add	r7, sp, #0
90000eee:	6078      	str	r0, [r7, #4]
90000ef0:	460b      	mov	r3, r1
90000ef2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
90000ef4:	1cfa      	adds	r2, r7, #3
90000ef6:	2301      	movs	r3, #1
90000ef8:	2194      	movs	r1, #148	@ 0x94
90000efa:	6878      	ldr	r0, [r7, #4]
90000efc:	f7ff ff7b 	bl	90000df6 <ft5336_write_reg>
90000f00:	4603      	mov	r3, r0
}
90000f02:	4618      	mov	r0, r3
90000f04:	3708      	adds	r7, #8
90000f06:	46bd      	mov	sp, r7
90000f08:	bd80      	pop	{r7, pc}

90000f0a <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90000f0a:	b580      	push	{r7, lr}
90000f0c:	b082      	sub	sp, #8
90000f0e:	af00      	add	r7, sp, #0
90000f10:	6078      	str	r0, [r7, #4]
90000f12:	460b      	mov	r3, r1
90000f14:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
90000f16:	1cfa      	adds	r2, r7, #3
90000f18:	2301      	movs	r3, #1
90000f1a:	2195      	movs	r1, #149	@ 0x95
90000f1c:	6878      	ldr	r0, [r7, #4]
90000f1e:	f7ff ff6a 	bl	90000df6 <ft5336_write_reg>
90000f22:	4603      	mov	r3, r0
}
90000f24:	4618      	mov	r0, r3
90000f26:	3708      	adds	r7, #8
90000f28:	46bd      	mov	sp, r7
90000f2a:	bd80      	pop	{r7, pc}

90000f2c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90000f2c:	b580      	push	{r7, lr}
90000f2e:	b082      	sub	sp, #8
90000f30:	af00      	add	r7, sp, #0
90000f32:	6078      	str	r0, [r7, #4]
90000f34:	460b      	mov	r3, r1
90000f36:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
90000f38:	1cfa      	adds	r2, r7, #3
90000f3a:	2301      	movs	r3, #1
90000f3c:	2196      	movs	r1, #150	@ 0x96
90000f3e:	6878      	ldr	r0, [r7, #4]
90000f40:	f7ff ff59 	bl	90000df6 <ft5336_write_reg>
90000f44:	4603      	mov	r3, r0
}
90000f46:	4618      	mov	r0, r3
90000f48:	3708      	adds	r7, #8
90000f4a:	46bd      	mov	sp, r7
90000f4c:	bd80      	pop	{r7, pc}

90000f4e <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90000f4e:	b580      	push	{r7, lr}
90000f50:	b082      	sub	sp, #8
90000f52:	af00      	add	r7, sp, #0
90000f54:	6078      	str	r0, [r7, #4]
90000f56:	460b      	mov	r3, r1
90000f58:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
90000f5a:	1cfa      	adds	r2, r7, #3
90000f5c:	2301      	movs	r3, #1
90000f5e:	21a4      	movs	r1, #164	@ 0xa4
90000f60:	6878      	ldr	r0, [r7, #4]
90000f62:	f7ff ff48 	bl	90000df6 <ft5336_write_reg>
90000f66:	4603      	mov	r3, r0
}
90000f68:	4618      	mov	r0, r3
90000f6a:	3708      	adds	r7, #8
90000f6c:	46bd      	mov	sp, r7
90000f6e:	bd80      	pop	{r7, pc}

90000f70 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90000f70:	b580      	push	{r7, lr}
90000f72:	b084      	sub	sp, #16
90000f74:	af00      	add	r7, sp, #0
90000f76:	6078      	str	r0, [r7, #4]
90000f78:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
90000f7a:	2301      	movs	r3, #1
90000f7c:	683a      	ldr	r2, [r7, #0]
90000f7e:	21a8      	movs	r1, #168	@ 0xa8
90000f80:	6878      	ldr	r0, [r7, #4]
90000f82:	f7ff ff21 	bl	90000dc8 <ft5336_read_reg>
90000f86:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90000f88:	68fb      	ldr	r3, [r7, #12]
90000f8a:	2b00      	cmp	r3, #0
90000f8c:	d107      	bne.n	90000f9e <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
90000f8e:	683b      	ldr	r3, [r7, #0]
90000f90:	781a      	ldrb	r2, [r3, #0]
90000f92:	683b      	ldr	r3, [r7, #0]
90000f94:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
90000f96:	683b      	ldr	r3, [r7, #0]
90000f98:	781a      	ldrb	r2, [r3, #0]
90000f9a:	683b      	ldr	r3, [r7, #0]
90000f9c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90000f9e:	68fb      	ldr	r3, [r7, #12]
}
90000fa0:	4618      	mov	r0, r3
90000fa2:	3710      	adds	r7, #16
90000fa4:	46bd      	mov	sp, r7
90000fa6:	bd80      	pop	{r7, pc}

90000fa8 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90000fa8:	b580      	push	{r7, lr}
90000faa:	b084      	sub	sp, #16
90000fac:	af00      	add	r7, sp, #0
90000fae:	6078      	str	r0, [r7, #4]
90000fb0:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90000fb2:	f04f 33ff 	mov.w	r3, #4294967295
90000fb6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90000fb8:	683b      	ldr	r3, [r7, #0]
90000fba:	681b      	ldr	r3, [r3, #0]
90000fbc:	4619      	mov	r1, r3
90000fbe:	6878      	ldr	r0, [r7, #4]
90000fc0:	f000 f832 	bl	90001028 <MT48LC4M32B2_ClockEnable>
90000fc4:	4603      	mov	r3, r0
90000fc6:	2b00      	cmp	r3, #0
90000fc8:	d128      	bne.n	9000101c <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90000fca:	2001      	movs	r0, #1
90000fcc:	f000 f8e2 	bl	90001194 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90000fd0:	683b      	ldr	r3, [r7, #0]
90000fd2:	681b      	ldr	r3, [r3, #0]
90000fd4:	4619      	mov	r1, r3
90000fd6:	6878      	ldr	r0, [r7, #4]
90000fd8:	f000 f84a 	bl	90001070 <MT48LC4M32B2_Precharge>
90000fdc:	4603      	mov	r3, r0
90000fde:	2b00      	cmp	r3, #0
90000fe0:	d11c      	bne.n	9000101c <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90000fe2:	683b      	ldr	r3, [r7, #0]
90000fe4:	6819      	ldr	r1, [r3, #0]
90000fe6:	683b      	ldr	r3, [r7, #0]
90000fe8:	685b      	ldr	r3, [r3, #4]
90000fea:	461a      	mov	r2, r3
90000fec:	6878      	ldr	r0, [r7, #4]
90000fee:	f000 f897 	bl	90001120 <MT48LC4M32B2_RefreshMode>
90000ff2:	4603      	mov	r3, r0
90000ff4:	2b00      	cmp	r3, #0
90000ff6:	d111      	bne.n	9000101c <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90000ff8:	6839      	ldr	r1, [r7, #0]
90000ffa:	6878      	ldr	r0, [r7, #4]
90000ffc:	f000 f85c 	bl	900010b8 <MT48LC4M32B2_ModeRegConfig>
90001000:	4603      	mov	r3, r0
90001002:	2b00      	cmp	r3, #0
90001004:	d10a      	bne.n	9000101c <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001006:	683b      	ldr	r3, [r7, #0]
90001008:	689b      	ldr	r3, [r3, #8]
9000100a:	4619      	mov	r1, r3
9000100c:	6878      	ldr	r0, [r7, #4]
9000100e:	f000 f8ad 	bl	9000116c <MT48LC4M32B2_RefreshRate>
90001012:	4603      	mov	r3, r0
90001014:	2b00      	cmp	r3, #0
90001016:	d101      	bne.n	9000101c <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001018:	2300      	movs	r3, #0
9000101a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000101c:	68fb      	ldr	r3, [r7, #12]
}
9000101e:	4618      	mov	r0, r3
90001020:	3710      	adds	r7, #16
90001022:	46bd      	mov	sp, r7
90001024:	bd80      	pop	{r7, pc}
	...

90001028 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001028:	b580      	push	{r7, lr}
9000102a:	b082      	sub	sp, #8
9000102c:	af00      	add	r7, sp, #0
9000102e:	6078      	str	r0, [r7, #4]
90001030:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90001032:	4b0e      	ldr	r3, [pc, #56]	@ (9000106c <MT48LC4M32B2_ClockEnable+0x44>)
90001034:	2201      	movs	r2, #1
90001036:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001038:	4a0c      	ldr	r2, [pc, #48]	@ (9000106c <MT48LC4M32B2_ClockEnable+0x44>)
9000103a:	683b      	ldr	r3, [r7, #0]
9000103c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000103e:	4b0b      	ldr	r3, [pc, #44]	@ (9000106c <MT48LC4M32B2_ClockEnable+0x44>)
90001040:	2201      	movs	r2, #1
90001042:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001044:	4b09      	ldr	r3, [pc, #36]	@ (9000106c <MT48LC4M32B2_ClockEnable+0x44>)
90001046:	2200      	movs	r2, #0
90001048:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000104a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000104e:	4907      	ldr	r1, [pc, #28]	@ (9000106c <MT48LC4M32B2_ClockEnable+0x44>)
90001050:	6878      	ldr	r0, [r7, #4]
90001052:	f008 fa77 	bl	90009544 <HAL_SDRAM_SendCommand>
90001056:	4603      	mov	r3, r0
90001058:	2b00      	cmp	r3, #0
9000105a:	d002      	beq.n	90001062 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
9000105c:	f04f 33ff 	mov.w	r3, #4294967295
90001060:	e000      	b.n	90001064 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001062:	2300      	movs	r3, #0
  }
}
90001064:	4618      	mov	r0, r3
90001066:	3708      	adds	r7, #8
90001068:	46bd      	mov	sp, r7
9000106a:	bd80      	pop	{r7, pc}
9000106c:	20000518 	.word	0x20000518

90001070 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001070:	b580      	push	{r7, lr}
90001072:	b082      	sub	sp, #8
90001074:	af00      	add	r7, sp, #0
90001076:	6078      	str	r0, [r7, #4]
90001078:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
9000107a:	4b0e      	ldr	r3, [pc, #56]	@ (900010b4 <MT48LC4M32B2_Precharge+0x44>)
9000107c:	2202      	movs	r2, #2
9000107e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001080:	4a0c      	ldr	r2, [pc, #48]	@ (900010b4 <MT48LC4M32B2_Precharge+0x44>)
90001082:	683b      	ldr	r3, [r7, #0]
90001084:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001086:	4b0b      	ldr	r3, [pc, #44]	@ (900010b4 <MT48LC4M32B2_Precharge+0x44>)
90001088:	2201      	movs	r2, #1
9000108a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000108c:	4b09      	ldr	r3, [pc, #36]	@ (900010b4 <MT48LC4M32B2_Precharge+0x44>)
9000108e:	2200      	movs	r2, #0
90001090:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001096:	4907      	ldr	r1, [pc, #28]	@ (900010b4 <MT48LC4M32B2_Precharge+0x44>)
90001098:	6878      	ldr	r0, [r7, #4]
9000109a:	f008 fa53 	bl	90009544 <HAL_SDRAM_SendCommand>
9000109e:	4603      	mov	r3, r0
900010a0:	2b00      	cmp	r3, #0
900010a2:	d002      	beq.n	900010aa <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900010a4:	f04f 33ff 	mov.w	r3, #4294967295
900010a8:	e000      	b.n	900010ac <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900010aa:	2300      	movs	r3, #0
  }
}
900010ac:	4618      	mov	r0, r3
900010ae:	3708      	adds	r7, #8
900010b0:	46bd      	mov	sp, r7
900010b2:	bd80      	pop	{r7, pc}
900010b4:	20000518 	.word	0x20000518

900010b8 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900010b8:	b580      	push	{r7, lr}
900010ba:	b084      	sub	sp, #16
900010bc:	af00      	add	r7, sp, #0
900010be:	6078      	str	r0, [r7, #4]
900010c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900010c2:	683b      	ldr	r3, [r7, #0]
900010c4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
900010c6:	683b      	ldr	r3, [r7, #0]
900010c8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900010ca:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
900010cc:	683b      	ldr	r3, [r7, #0]
900010ce:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
900010d0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
900010d2:	683b      	ldr	r3, [r7, #0]
900010d4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
900010d6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
900010d8:	683b      	ldr	r3, [r7, #0]
900010da:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900010dc:	4313      	orrs	r3, r2
900010de:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
900010e0:	4b0e      	ldr	r3, [pc, #56]	@ (9000111c <MT48LC4M32B2_ModeRegConfig+0x64>)
900010e2:	2204      	movs	r2, #4
900010e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
900010e6:	683b      	ldr	r3, [r7, #0]
900010e8:	681b      	ldr	r3, [r3, #0]
900010ea:	4a0c      	ldr	r2, [pc, #48]	@ (9000111c <MT48LC4M32B2_ModeRegConfig+0x64>)
900010ec:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900010ee:	4b0b      	ldr	r3, [pc, #44]	@ (9000111c <MT48LC4M32B2_ModeRegConfig+0x64>)
900010f0:	2201      	movs	r2, #1
900010f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
900010f4:	4a09      	ldr	r2, [pc, #36]	@ (9000111c <MT48LC4M32B2_ModeRegConfig+0x64>)
900010f6:	68fb      	ldr	r3, [r7, #12]
900010f8:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900010fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900010fe:	4907      	ldr	r1, [pc, #28]	@ (9000111c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001100:	6878      	ldr	r0, [r7, #4]
90001102:	f008 fa1f 	bl	90009544 <HAL_SDRAM_SendCommand>
90001106:	4603      	mov	r3, r0
90001108:	2b00      	cmp	r3, #0
9000110a:	d002      	beq.n	90001112 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
9000110c:	f04f 33ff 	mov.w	r3, #4294967295
90001110:	e000      	b.n	90001114 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001112:	2300      	movs	r3, #0
  }
}
90001114:	4618      	mov	r0, r3
90001116:	3710      	adds	r7, #16
90001118:	46bd      	mov	sp, r7
9000111a:	bd80      	pop	{r7, pc}
9000111c:	20000518 	.word	0x20000518

90001120 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001120:	b580      	push	{r7, lr}
90001122:	b084      	sub	sp, #16
90001124:	af00      	add	r7, sp, #0
90001126:	60f8      	str	r0, [r7, #12]
90001128:	60b9      	str	r1, [r7, #8]
9000112a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
9000112c:	4a0e      	ldr	r2, [pc, #56]	@ (90001168 <MT48LC4M32B2_RefreshMode+0x48>)
9000112e:	687b      	ldr	r3, [r7, #4]
90001130:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001132:	4a0d      	ldr	r2, [pc, #52]	@ (90001168 <MT48LC4M32B2_RefreshMode+0x48>)
90001134:	68bb      	ldr	r3, [r7, #8]
90001136:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001138:	4b0b      	ldr	r3, [pc, #44]	@ (90001168 <MT48LC4M32B2_RefreshMode+0x48>)
9000113a:	2208      	movs	r2, #8
9000113c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000113e:	4b0a      	ldr	r3, [pc, #40]	@ (90001168 <MT48LC4M32B2_RefreshMode+0x48>)
90001140:	2200      	movs	r2, #0
90001142:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001148:	4907      	ldr	r1, [pc, #28]	@ (90001168 <MT48LC4M32B2_RefreshMode+0x48>)
9000114a:	68f8      	ldr	r0, [r7, #12]
9000114c:	f008 f9fa 	bl	90009544 <HAL_SDRAM_SendCommand>
90001150:	4603      	mov	r3, r0
90001152:	2b00      	cmp	r3, #0
90001154:	d002      	beq.n	9000115c <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001156:	f04f 33ff 	mov.w	r3, #4294967295
9000115a:	e000      	b.n	9000115e <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000115c:	2300      	movs	r3, #0
  }
}
9000115e:	4618      	mov	r0, r3
90001160:	3710      	adds	r7, #16
90001162:	46bd      	mov	sp, r7
90001164:	bd80      	pop	{r7, pc}
90001166:	bf00      	nop
90001168:	20000518 	.word	0x20000518

9000116c <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
9000116c:	b580      	push	{r7, lr}
9000116e:	b082      	sub	sp, #8
90001170:	af00      	add	r7, sp, #0
90001172:	6078      	str	r0, [r7, #4]
90001174:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90001176:	6839      	ldr	r1, [r7, #0]
90001178:	6878      	ldr	r0, [r7, #4]
9000117a:	f008 fa18 	bl	900095ae <HAL_SDRAM_ProgramRefreshRate>
9000117e:	4603      	mov	r3, r0
90001180:	2b00      	cmp	r3, #0
90001182:	d002      	beq.n	9000118a <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001184:	f04f 33ff 	mov.w	r3, #4294967295
90001188:	e000      	b.n	9000118c <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000118a:	2300      	movs	r3, #0
  }
}
9000118c:	4618      	mov	r0, r3
9000118e:	3708      	adds	r7, #8
90001190:	46bd      	mov	sp, r7
90001192:	bd80      	pop	{r7, pc}

90001194 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001194:	b580      	push	{r7, lr}
90001196:	b084      	sub	sp, #16
90001198:	af00      	add	r7, sp, #0
9000119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
9000119c:	f001 ff36 	bl	9000300c <HAL_GetTick>
900011a0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900011a2:	bf00      	nop
900011a4:	f001 ff32 	bl	9000300c <HAL_GetTick>
900011a8:	4602      	mov	r2, r0
900011aa:	68fb      	ldr	r3, [r7, #12]
900011ac:	1ad3      	subs	r3, r2, r3
900011ae:	687a      	ldr	r2, [r7, #4]
900011b0:	429a      	cmp	r2, r3
900011b2:	d8f7      	bhi.n	900011a4 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
900011b4:	2300      	movs	r3, #0
}
900011b6:	4618      	mov	r0, r3
900011b8:	3710      	adds	r7, #16
900011ba:	46bd      	mov	sp, r7
900011bc:	bd80      	pop	{r7, pc}
	...

900011c0 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
900011c0:	b580      	push	{r7, lr}
900011c2:	b08a      	sub	sp, #40	@ 0x28
900011c4:	af00      	add	r7, sp, #0
900011c6:	4603      	mov	r3, r0
900011c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
900011ca:	2300      	movs	r3, #0
900011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
900011ce:	79fb      	ldrb	r3, [r7, #7]
900011d0:	2b00      	cmp	r3, #0
900011d2:	d10f      	bne.n	900011f4 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
900011d4:	4b26      	ldr	r3, [pc, #152]	@ (90001270 <BSP_LED_Init+0xb0>)
900011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900011da:	4a25      	ldr	r2, [pc, #148]	@ (90001270 <BSP_LED_Init+0xb0>)
900011dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
900011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900011e4:	4b22      	ldr	r3, [pc, #136]	@ (90001270 <BSP_LED_Init+0xb0>)
900011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900011ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900011ee:	60fb      	str	r3, [r7, #12]
900011f0:	68fb      	ldr	r3, [r7, #12]
900011f2:	e015      	b.n	90001220 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
900011f4:	79fb      	ldrb	r3, [r7, #7]
900011f6:	2b01      	cmp	r3, #1
900011f8:	d10f      	bne.n	9000121a <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
900011fa:	4b1d      	ldr	r3, [pc, #116]	@ (90001270 <BSP_LED_Init+0xb0>)
900011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001200:	4a1b      	ldr	r2, [pc, #108]	@ (90001270 <BSP_LED_Init+0xb0>)
90001202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000120a:	4b19      	ldr	r3, [pc, #100]	@ (90001270 <BSP_LED_Init+0xb0>)
9000120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001214:	60bb      	str	r3, [r7, #8]
90001216:	68bb      	ldr	r3, [r7, #8]
90001218:	e002      	b.n	90001220 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000121a:	f06f 0301 	mvn.w	r3, #1
9000121e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
90001220:	79fb      	ldrb	r3, [r7, #7]
90001222:	4a14      	ldr	r2, [pc, #80]	@ (90001274 <BSP_LED_Init+0xb4>)
90001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001228:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
9000122a:	2301      	movs	r3, #1
9000122c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
9000122e:	2301      	movs	r3, #1
90001230:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001232:	2303      	movs	r3, #3
90001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
90001236:	79fb      	ldrb	r3, [r7, #7]
90001238:	4a0f      	ldr	r2, [pc, #60]	@ (90001278 <BSP_LED_Init+0xb8>)
9000123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000123e:	f107 0210 	add.w	r2, r7, #16
90001242:	4611      	mov	r1, r2
90001244:	4618      	mov	r0, r3
90001246:	f002 fb67 	bl	90003918 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
9000124a:	79fb      	ldrb	r3, [r7, #7]
9000124c:	4a0a      	ldr	r2, [pc, #40]	@ (90001278 <BSP_LED_Init+0xb8>)
9000124e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90001252:	79fb      	ldrb	r3, [r7, #7]
90001254:	4a07      	ldr	r2, [pc, #28]	@ (90001274 <BSP_LED_Init+0xb4>)
90001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000125a:	b29b      	uxth	r3, r3
9000125c:	2201      	movs	r2, #1
9000125e:	4619      	mov	r1, r3
90001260:	f002 fe14 	bl	90003e8c <HAL_GPIO_WritePin>
  return ret;
90001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
90001266:	4618      	mov	r0, r3
90001268:	3728      	adds	r7, #40	@ 0x28
9000126a:	46bd      	mov	sp, r7
9000126c:	bd80      	pop	{r7, pc}
9000126e:	bf00      	nop
90001270:	58024400 	.word	0x58024400
90001274:	9000a984 	.word	0x9000a984
90001278:	20000030 	.word	0x20000030

9000127c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
9000127c:	b580      	push	{r7, lr}
9000127e:	b082      	sub	sp, #8
90001280:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001282:	2300      	movs	r3, #0
90001284:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001286:	4b16      	ldr	r3, [pc, #88]	@ (900012e0 <BSP_I2C4_Init+0x64>)
90001288:	4a16      	ldr	r2, [pc, #88]	@ (900012e4 <BSP_I2C4_Init+0x68>)
9000128a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
9000128c:	4b16      	ldr	r3, [pc, #88]	@ (900012e8 <BSP_I2C4_Init+0x6c>)
9000128e:	681b      	ldr	r3, [r3, #0]
90001290:	2b00      	cmp	r3, #0
90001292:	d11f      	bne.n	900012d4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001294:	4b14      	ldr	r3, [pc, #80]	@ (900012e8 <BSP_I2C4_Init+0x6c>)
90001296:	681b      	ldr	r3, [r3, #0]
90001298:	3301      	adds	r3, #1
9000129a:	4a13      	ldr	r2, [pc, #76]	@ (900012e8 <BSP_I2C4_Init+0x6c>)
9000129c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
9000129e:	4810      	ldr	r0, [pc, #64]	@ (900012e0 <BSP_I2C4_Init+0x64>)
900012a0:	f004 fec2 	bl	90006028 <HAL_I2C_GetState>
900012a4:	4603      	mov	r3, r0
900012a6:	2b00      	cmp	r3, #0
900012a8:	d114      	bne.n	900012d4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
900012aa:	480d      	ldr	r0, [pc, #52]	@ (900012e0 <BSP_I2C4_Init+0x64>)
900012ac:	f000 fb60 	bl	90001970 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900012b0:	f006 fd7e 	bl	90007db0 <HAL_RCC_GetPCLK2Freq>
900012b4:	4603      	mov	r3, r0
900012b6:	490d      	ldr	r1, [pc, #52]	@ (900012ec <BSP_I2C4_Init+0x70>)
900012b8:	4618      	mov	r0, r3
900012ba:	f000 f8e3 	bl	90001484 <I2C_GetTiming>
900012be:	4603      	mov	r3, r0
900012c0:	4619      	mov	r1, r3
900012c2:	4807      	ldr	r0, [pc, #28]	@ (900012e0 <BSP_I2C4_Init+0x64>)
900012c4:	f000 f838 	bl	90001338 <MX_I2C4_Init>
900012c8:	4603      	mov	r3, r0
900012ca:	2b00      	cmp	r3, #0
900012cc:	d002      	beq.n	900012d4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
900012ce:	f06f 0307 	mvn.w	r3, #7
900012d2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
900012d4:	687b      	ldr	r3, [r7, #4]
}
900012d6:	4618      	mov	r0, r3
900012d8:	3708      	adds	r7, #8
900012da:	46bd      	mov	sp, r7
900012dc:	bd80      	pop	{r7, pc}
900012de:	bf00      	nop
900012e0:	20000f30 	.word	0x20000f30
900012e4:	58001c00 	.word	0x58001c00
900012e8:	20000528 	.word	0x20000528
900012ec:	000186a0 	.word	0x000186a0

900012f0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
900012f0:	b580      	push	{r7, lr}
900012f2:	b082      	sub	sp, #8
900012f4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
900012f6:	2300      	movs	r3, #0
900012f8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
900012fa:	4b0d      	ldr	r3, [pc, #52]	@ (90001330 <BSP_I2C4_DeInit+0x40>)
900012fc:	681b      	ldr	r3, [r3, #0]
900012fe:	3b01      	subs	r3, #1
90001300:	4a0b      	ldr	r2, [pc, #44]	@ (90001330 <BSP_I2C4_DeInit+0x40>)
90001302:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90001304:	4b0a      	ldr	r3, [pc, #40]	@ (90001330 <BSP_I2C4_DeInit+0x40>)
90001306:	681b      	ldr	r3, [r3, #0]
90001308:	2b00      	cmp	r3, #0
9000130a:	d10b      	bne.n	90001324 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
9000130c:	4809      	ldr	r0, [pc, #36]	@ (90001334 <BSP_I2C4_DeInit+0x44>)
9000130e:	f000 fb9b 	bl	90001a48 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90001312:	4808      	ldr	r0, [pc, #32]	@ (90001334 <BSP_I2C4_DeInit+0x44>)
90001314:	f004 fc16 	bl	90005b44 <HAL_I2C_DeInit>
90001318:	4603      	mov	r3, r0
9000131a:	2b00      	cmp	r3, #0
9000131c:	d002      	beq.n	90001324 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
9000131e:	f06f 0307 	mvn.w	r3, #7
90001322:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
90001324:	687b      	ldr	r3, [r7, #4]
}
90001326:	4618      	mov	r0, r3
90001328:	3708      	adds	r7, #8
9000132a:	46bd      	mov	sp, r7
9000132c:	bd80      	pop	{r7, pc}
9000132e:	bf00      	nop
90001330:	20000528 	.word	0x20000528
90001334:	20000f30 	.word	0x20000f30

90001338 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001338:	b580      	push	{r7, lr}
9000133a:	b084      	sub	sp, #16
9000133c:	af00      	add	r7, sp, #0
9000133e:	6078      	str	r0, [r7, #4]
90001340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001342:	2300      	movs	r3, #0
90001344:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001346:	687b      	ldr	r3, [r7, #4]
90001348:	683a      	ldr	r2, [r7, #0]
9000134a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
9000134c:	687b      	ldr	r3, [r7, #4]
9000134e:	2200      	movs	r2, #0
90001350:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001352:	687b      	ldr	r3, [r7, #4]
90001354:	2201      	movs	r2, #1
90001356:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001358:	687b      	ldr	r3, [r7, #4]
9000135a:	2200      	movs	r2, #0
9000135c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
9000135e:	687b      	ldr	r3, [r7, #4]
90001360:	2200      	movs	r2, #0
90001362:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001364:	687b      	ldr	r3, [r7, #4]
90001366:	2200      	movs	r2, #0
90001368:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
9000136a:	687b      	ldr	r3, [r7, #4]
9000136c:	2200      	movs	r2, #0
9000136e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001370:	687b      	ldr	r3, [r7, #4]
90001372:	2200      	movs	r2, #0
90001374:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001376:	6878      	ldr	r0, [r7, #4]
90001378:	f004 fb48 	bl	90005a0c <HAL_I2C_Init>
9000137c:	4603      	mov	r3, r0
9000137e:	2b00      	cmp	r3, #0
90001380:	d002      	beq.n	90001388 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001382:	2301      	movs	r3, #1
90001384:	73fb      	strb	r3, [r7, #15]
90001386:	e014      	b.n	900013b2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001388:	2300      	movs	r3, #0
9000138a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
9000138c:	68b9      	ldr	r1, [r7, #8]
9000138e:	6878      	ldr	r0, [r7, #4]
90001390:	f005 f926 	bl	900065e0 <HAL_I2CEx_ConfigAnalogFilter>
90001394:	4603      	mov	r3, r0
90001396:	2b00      	cmp	r3, #0
90001398:	d002      	beq.n	900013a0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
9000139a:	2301      	movs	r3, #1
9000139c:	73fb      	strb	r3, [r7, #15]
9000139e:	e008      	b.n	900013b2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900013a0:	2100      	movs	r1, #0
900013a2:	6878      	ldr	r0, [r7, #4]
900013a4:	f005 f967 	bl	90006676 <HAL_I2CEx_ConfigDigitalFilter>
900013a8:	4603      	mov	r3, r0
900013aa:	2b00      	cmp	r3, #0
900013ac:	d001      	beq.n	900013b2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
900013ae:	2301      	movs	r3, #1
900013b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
900013b2:	7bfb      	ldrb	r3, [r7, #15]
}
900013b4:	4618      	mov	r0, r3
900013b6:	3710      	adds	r7, #16
900013b8:	46bd      	mov	sp, r7
900013ba:	bd80      	pop	{r7, pc}

900013bc <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
900013bc:	b580      	push	{r7, lr}
900013be:	b088      	sub	sp, #32
900013c0:	af02      	add	r7, sp, #8
900013c2:	60ba      	str	r2, [r7, #8]
900013c4:	461a      	mov	r2, r3
900013c6:	4603      	mov	r3, r0
900013c8:	81fb      	strh	r3, [r7, #14]
900013ca:	460b      	mov	r3, r1
900013cc:	81bb      	strh	r3, [r7, #12]
900013ce:	4613      	mov	r3, r2
900013d0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
900013d2:	89b9      	ldrh	r1, [r7, #12]
900013d4:	89f8      	ldrh	r0, [r7, #14]
900013d6:	88fb      	ldrh	r3, [r7, #6]
900013d8:	9300      	str	r3, [sp, #0]
900013da:	68bb      	ldr	r3, [r7, #8]
900013dc:	2201      	movs	r2, #1
900013de:	f000 fb57 	bl	90001a90 <I2C4_WriteReg>
900013e2:	4603      	mov	r3, r0
900013e4:	2b00      	cmp	r3, #0
900013e6:	d102      	bne.n	900013ee <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900013e8:	2300      	movs	r3, #0
900013ea:	617b      	str	r3, [r7, #20]
900013ec:	e00c      	b.n	90001408 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900013ee:	4809      	ldr	r0, [pc, #36]	@ (90001414 <BSP_I2C4_WriteReg+0x58>)
900013f0:	f004 fe28 	bl	90006044 <HAL_I2C_GetError>
900013f4:	4603      	mov	r3, r0
900013f6:	2b04      	cmp	r3, #4
900013f8:	d103      	bne.n	90001402 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900013fa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
900013fe:	617b      	str	r3, [r7, #20]
90001400:	e002      	b.n	90001408 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001402:	f06f 0303 	mvn.w	r3, #3
90001406:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001408:	697b      	ldr	r3, [r7, #20]
}
9000140a:	4618      	mov	r0, r3
9000140c:	3718      	adds	r7, #24
9000140e:	46bd      	mov	sp, r7
90001410:	bd80      	pop	{r7, pc}
90001412:	bf00      	nop
90001414:	20000f30 	.word	0x20000f30

90001418 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001418:	b580      	push	{r7, lr}
9000141a:	b088      	sub	sp, #32
9000141c:	af02      	add	r7, sp, #8
9000141e:	60ba      	str	r2, [r7, #8]
90001420:	461a      	mov	r2, r3
90001422:	4603      	mov	r3, r0
90001424:	81fb      	strh	r3, [r7, #14]
90001426:	460b      	mov	r3, r1
90001428:	81bb      	strh	r3, [r7, #12]
9000142a:	4613      	mov	r3, r2
9000142c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
9000142e:	89b9      	ldrh	r1, [r7, #12]
90001430:	89f8      	ldrh	r0, [r7, #14]
90001432:	88fb      	ldrh	r3, [r7, #6]
90001434:	9300      	str	r3, [sp, #0]
90001436:	68bb      	ldr	r3, [r7, #8]
90001438:	2201      	movs	r2, #1
9000143a:	f000 fb4f 	bl	90001adc <I2C4_ReadReg>
9000143e:	4603      	mov	r3, r0
90001440:	2b00      	cmp	r3, #0
90001442:	d102      	bne.n	9000144a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001444:	2300      	movs	r3, #0
90001446:	617b      	str	r3, [r7, #20]
90001448:	e00c      	b.n	90001464 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000144a:	4809      	ldr	r0, [pc, #36]	@ (90001470 <BSP_I2C4_ReadReg+0x58>)
9000144c:	f004 fdfa 	bl	90006044 <HAL_I2C_GetError>
90001450:	4603      	mov	r3, r0
90001452:	2b04      	cmp	r3, #4
90001454:	d103      	bne.n	9000145e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001456:	f06f 0365 	mvn.w	r3, #101	@ 0x65
9000145a:	617b      	str	r3, [r7, #20]
9000145c:	e002      	b.n	90001464 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
9000145e:	f06f 0303 	mvn.w	r3, #3
90001462:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001464:	697b      	ldr	r3, [r7, #20]
}
90001466:	4618      	mov	r0, r3
90001468:	3718      	adds	r7, #24
9000146a:	46bd      	mov	sp, r7
9000146c:	bd80      	pop	{r7, pc}
9000146e:	bf00      	nop
90001470:	20000f30 	.word	0x20000f30

90001474 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
90001474:	b580      	push	{r7, lr}
90001476:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
90001478:	f001 fdc8 	bl	9000300c <HAL_GetTick>
9000147c:	4603      	mov	r3, r0
}
9000147e:	4618      	mov	r0, r3
90001480:	bd80      	pop	{r7, pc}
	...

90001484 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001484:	b580      	push	{r7, lr}
90001486:	b086      	sub	sp, #24
90001488:	af00      	add	r7, sp, #0
9000148a:	6078      	str	r0, [r7, #4]
9000148c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
9000148e:	2300      	movs	r3, #0
90001490:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001492:	687b      	ldr	r3, [r7, #4]
90001494:	2b00      	cmp	r3, #0
90001496:	d06b      	beq.n	90001570 <I2C_GetTiming+0xec>
90001498:	683b      	ldr	r3, [r7, #0]
9000149a:	2b00      	cmp	r3, #0
9000149c:	d068      	beq.n	90001570 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
9000149e:	2300      	movs	r3, #0
900014a0:	613b      	str	r3, [r7, #16]
900014a2:	e060      	b.n	90001566 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
900014a4:	4a35      	ldr	r2, [pc, #212]	@ (9000157c <I2C_GetTiming+0xf8>)
900014a6:	693b      	ldr	r3, [r7, #16]
900014a8:	212c      	movs	r1, #44	@ 0x2c
900014aa:	fb01 f303 	mul.w	r3, r1, r3
900014ae:	4413      	add	r3, r2
900014b0:	3304      	adds	r3, #4
900014b2:	681b      	ldr	r3, [r3, #0]
900014b4:	683a      	ldr	r2, [r7, #0]
900014b6:	429a      	cmp	r2, r3
900014b8:	d352      	bcc.n	90001560 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
900014ba:	4a30      	ldr	r2, [pc, #192]	@ (9000157c <I2C_GetTiming+0xf8>)
900014bc:	693b      	ldr	r3, [r7, #16]
900014be:	212c      	movs	r1, #44	@ 0x2c
900014c0:	fb01 f303 	mul.w	r3, r1, r3
900014c4:	4413      	add	r3, r2
900014c6:	3308      	adds	r3, #8
900014c8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
900014ca:	683a      	ldr	r2, [r7, #0]
900014cc:	429a      	cmp	r2, r3
900014ce:	d847      	bhi.n	90001560 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
900014d0:	6939      	ldr	r1, [r7, #16]
900014d2:	6878      	ldr	r0, [r7, #4]
900014d4:	f000 f856 	bl	90001584 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
900014d8:	6939      	ldr	r1, [r7, #16]
900014da:	6878      	ldr	r0, [r7, #4]
900014dc:	f000 f940 	bl	90001760 <I2C_Compute_SCLL_SCLH>
900014e0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
900014e2:	68fb      	ldr	r3, [r7, #12]
900014e4:	2b7f      	cmp	r3, #127	@ 0x7f
900014e6:	d842      	bhi.n	9000156e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900014e8:	4925      	ldr	r1, [pc, #148]	@ (90001580 <I2C_GetTiming+0xfc>)
900014ea:	68fa      	ldr	r2, [r7, #12]
900014ec:	4613      	mov	r3, r2
900014ee:	009b      	lsls	r3, r3, #2
900014f0:	4413      	add	r3, r2
900014f2:	009b      	lsls	r3, r3, #2
900014f4:	440b      	add	r3, r1
900014f6:	681b      	ldr	r3, [r3, #0]
900014f8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900014fa:	4821      	ldr	r0, [pc, #132]	@ (90001580 <I2C_GetTiming+0xfc>)
900014fc:	68fa      	ldr	r2, [r7, #12]
900014fe:	4613      	mov	r3, r2
90001500:	009b      	lsls	r3, r3, #2
90001502:	4413      	add	r3, r2
90001504:	009b      	lsls	r3, r3, #2
90001506:	4403      	add	r3, r0
90001508:	3304      	adds	r3, #4
9000150a:	681b      	ldr	r3, [r3, #0]
9000150c:	051b      	lsls	r3, r3, #20
9000150e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001512:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001514:	481a      	ldr	r0, [pc, #104]	@ (90001580 <I2C_GetTiming+0xfc>)
90001516:	68fa      	ldr	r2, [r7, #12]
90001518:	4613      	mov	r3, r2
9000151a:	009b      	lsls	r3, r3, #2
9000151c:	4413      	add	r3, r2
9000151e:	009b      	lsls	r3, r3, #2
90001520:	4403      	add	r3, r0
90001522:	3308      	adds	r3, #8
90001524:	681b      	ldr	r3, [r3, #0]
90001526:	041b      	lsls	r3, r3, #16
90001528:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000152c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
9000152e:	4814      	ldr	r0, [pc, #80]	@ (90001580 <I2C_GetTiming+0xfc>)
90001530:	68fa      	ldr	r2, [r7, #12]
90001532:	4613      	mov	r3, r2
90001534:	009b      	lsls	r3, r3, #2
90001536:	4413      	add	r3, r2
90001538:	009b      	lsls	r3, r3, #2
9000153a:	4403      	add	r3, r0
9000153c:	330c      	adds	r3, #12
9000153e:	681b      	ldr	r3, [r3, #0]
90001540:	021b      	lsls	r3, r3, #8
90001542:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001544:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001546:	480e      	ldr	r0, [pc, #56]	@ (90001580 <I2C_GetTiming+0xfc>)
90001548:	68fa      	ldr	r2, [r7, #12]
9000154a:	4613      	mov	r3, r2
9000154c:	009b      	lsls	r3, r3, #2
9000154e:	4413      	add	r3, r2
90001550:	009b      	lsls	r3, r3, #2
90001552:	4403      	add	r3, r0
90001554:	3310      	adds	r3, #16
90001556:	681b      	ldr	r3, [r3, #0]
90001558:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000155a:	430b      	orrs	r3, r1
9000155c:	617b      	str	r3, [r7, #20]
        }
        break;
9000155e:	e006      	b.n	9000156e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001560:	693b      	ldr	r3, [r7, #16]
90001562:	3301      	adds	r3, #1
90001564:	613b      	str	r3, [r7, #16]
90001566:	693b      	ldr	r3, [r7, #16]
90001568:	2b02      	cmp	r3, #2
9000156a:	d99b      	bls.n	900014a4 <I2C_GetTiming+0x20>
9000156c:	e000      	b.n	90001570 <I2C_GetTiming+0xec>
        break;
9000156e:	bf00      	nop
      }
    }
  }

  return ret;
90001570:	697b      	ldr	r3, [r7, #20]
}
90001572:	4618      	mov	r0, r3
90001574:	3718      	adds	r7, #24
90001576:	46bd      	mov	sp, r7
90001578:	bd80      	pop	{r7, pc}
9000157a:	bf00      	nop
9000157c:	9000a98c 	.word	0x9000a98c
90001580:	2000052c 	.word	0x2000052c

90001584 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001584:	b480      	push	{r7}
90001586:	b08f      	sub	sp, #60	@ 0x3c
90001588:	af00      	add	r7, sp, #0
9000158a:	6078      	str	r0, [r7, #4]
9000158c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
9000158e:	2310      	movs	r3, #16
90001590:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001592:	687b      	ldr	r3, [r7, #4]
90001594:	085a      	lsrs	r2, r3, #1
90001596:	4b6e      	ldr	r3, [pc, #440]	@ (90001750 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001598:	4413      	add	r3, r2
9000159a:	687a      	ldr	r2, [r7, #4]
9000159c:	fbb3 f3f2 	udiv	r3, r3, r2
900015a0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
900015a2:	2332      	movs	r3, #50	@ 0x32
900015a4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
900015a6:	f44f 7382 	mov.w	r3, #260	@ 0x104
900015aa:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900015ac:	4a69      	ldr	r2, [pc, #420]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900015ae:	683b      	ldr	r3, [r7, #0]
900015b0:	212c      	movs	r1, #44	@ 0x2c
900015b2:	fb01 f303 	mul.w	r3, r1, r3
900015b6:	4413      	add	r3, r2
900015b8:	3324      	adds	r3, #36	@ 0x24
900015ba:	681b      	ldr	r3, [r3, #0]
900015bc:	4618      	mov	r0, r3
900015be:	4a65      	ldr	r2, [pc, #404]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900015c0:	683b      	ldr	r3, [r7, #0]
900015c2:	212c      	movs	r1, #44	@ 0x2c
900015c4:	fb01 f303 	mul.w	r3, r1, r3
900015c8:	4413      	add	r3, r2
900015ca:	330c      	adds	r3, #12
900015cc:	681b      	ldr	r3, [r3, #0]
900015ce:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900015d0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900015d2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900015d4:	495f      	ldr	r1, [pc, #380]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900015d6:	683b      	ldr	r3, [r7, #0]
900015d8:	202c      	movs	r0, #44	@ 0x2c
900015da:	fb00 f303 	mul.w	r3, r0, r3
900015de:	440b      	add	r3, r1
900015e0:	3328      	adds	r3, #40	@ 0x28
900015e2:	681b      	ldr	r3, [r3, #0]
900015e4:	3303      	adds	r3, #3
900015e6:	69f9      	ldr	r1, [r7, #28]
900015e8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900015ec:	1ad3      	subs	r3, r2, r3
900015ee:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900015f0:	4a58      	ldr	r2, [pc, #352]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900015f2:	683b      	ldr	r3, [r7, #0]
900015f4:	212c      	movs	r1, #44	@ 0x2c
900015f6:	fb01 f303 	mul.w	r3, r1, r3
900015fa:	4413      	add	r3, r2
900015fc:	3310      	adds	r3, #16
900015fe:	681b      	ldr	r3, [r3, #0]
90001600:	4618      	mov	r0, r3
90001602:	4a54      	ldr	r2, [pc, #336]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001604:	683b      	ldr	r3, [r7, #0]
90001606:	212c      	movs	r1, #44	@ 0x2c
90001608:	fb01 f303 	mul.w	r3, r1, r3
9000160c:	4413      	add	r3, r2
9000160e:	3320      	adds	r3, #32
90001610:	681b      	ldr	r3, [r3, #0]
90001612:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001614:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001616:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001618:	494e      	ldr	r1, [pc, #312]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000161a:	683b      	ldr	r3, [r7, #0]
9000161c:	202c      	movs	r0, #44	@ 0x2c
9000161e:	fb00 f303 	mul.w	r3, r0, r3
90001622:	440b      	add	r3, r1
90001624:	3328      	adds	r3, #40	@ 0x28
90001626:	681b      	ldr	r3, [r3, #0]
90001628:	3304      	adds	r3, #4
9000162a:	69f9      	ldr	r1, [r7, #28]
9000162c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001630:	1ad3      	subs	r3, r2, r3
90001632:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001634:	4a47      	ldr	r2, [pc, #284]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001636:	683b      	ldr	r3, [r7, #0]
90001638:	212c      	movs	r1, #44	@ 0x2c
9000163a:	fb01 f303 	mul.w	r3, r1, r3
9000163e:	4413      	add	r3, r2
90001640:	3320      	adds	r3, #32
90001642:	681b      	ldr	r3, [r3, #0]
90001644:	4618      	mov	r0, r3
90001646:	4a43      	ldr	r2, [pc, #268]	@ (90001754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001648:	683b      	ldr	r3, [r7, #0]
9000164a:	212c      	movs	r1, #44	@ 0x2c
9000164c:	fb01 f303 	mul.w	r3, r1, r3
90001650:	4413      	add	r3, r2
90001652:	3314      	adds	r3, #20
90001654:	681b      	ldr	r3, [r3, #0]
90001656:	4403      	add	r3, r0
90001658:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
9000165a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000165c:	2b00      	cmp	r3, #0
9000165e:	dc01      	bgt.n	90001664 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001660:	2300      	movs	r3, #0
90001662:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001666:	2b00      	cmp	r3, #0
90001668:	dc01      	bgt.n	9000166e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
9000166a:	2300      	movs	r3, #0
9000166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
9000166e:	2300      	movs	r3, #0
90001670:	62bb      	str	r3, [r7, #40]	@ 0x28
90001672:	e062      	b.n	9000173a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001674:	2300      	movs	r3, #0
90001676:	627b      	str	r3, [r7, #36]	@ 0x24
90001678:	e059      	b.n	9000172e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
9000167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000167c:	3301      	adds	r3, #1
9000167e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001680:	3201      	adds	r2, #1
90001682:	fb03 f202 	mul.w	r2, r3, r2
90001686:	69fb      	ldr	r3, [r7, #28]
90001688:	fb02 f303 	mul.w	r3, r2, r3
9000168c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
9000168e:	693b      	ldr	r3, [r7, #16]
90001690:	68fa      	ldr	r2, [r7, #12]
90001692:	429a      	cmp	r2, r3
90001694:	d348      	bcc.n	90001728 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001696:	2300      	movs	r3, #0
90001698:	623b      	str	r3, [r7, #32]
9000169a:	e042      	b.n	90001722 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
9000169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000169e:	3301      	adds	r3, #1
900016a0:	6a3a      	ldr	r2, [r7, #32]
900016a2:	fb03 f202 	mul.w	r2, r3, r2
900016a6:	69fb      	ldr	r3, [r7, #28]
900016a8:	fb02 f303 	mul.w	r3, r2, r3
900016ac:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900016ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900016b0:	68ba      	ldr	r2, [r7, #8]
900016b2:	429a      	cmp	r2, r3
900016b4:	d332      	bcc.n	9000171c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
900016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900016b8:	68ba      	ldr	r2, [r7, #8]
900016ba:	429a      	cmp	r2, r3
900016bc:	d82e      	bhi.n	9000171c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
900016be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900016c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
900016c2:	429a      	cmp	r2, r3
900016c4:	d02a      	beq.n	9000171c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900016c6:	4b24      	ldr	r3, [pc, #144]	@ (90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900016c8:	681a      	ldr	r2, [r3, #0]
900016ca:	4924      	ldr	r1, [pc, #144]	@ (9000175c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900016cc:	4613      	mov	r3, r2
900016ce:	009b      	lsls	r3, r3, #2
900016d0:	4413      	add	r3, r2
900016d2:	009b      	lsls	r3, r3, #2
900016d4:	440b      	add	r3, r1
900016d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900016d8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900016da:	4b1f      	ldr	r3, [pc, #124]	@ (90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900016dc:	681a      	ldr	r2, [r3, #0]
900016de:	491f      	ldr	r1, [pc, #124]	@ (9000175c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900016e0:	4613      	mov	r3, r2
900016e2:	009b      	lsls	r3, r3, #2
900016e4:	4413      	add	r3, r2
900016e6:	009b      	lsls	r3, r3, #2
900016e8:	440b      	add	r3, r1
900016ea:	3304      	adds	r3, #4
900016ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900016ee:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900016f0:	4b19      	ldr	r3, [pc, #100]	@ (90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900016f2:	681a      	ldr	r2, [r3, #0]
900016f4:	4919      	ldr	r1, [pc, #100]	@ (9000175c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900016f6:	4613      	mov	r3, r2
900016f8:	009b      	lsls	r3, r3, #2
900016fa:	4413      	add	r3, r2
900016fc:	009b      	lsls	r3, r3, #2
900016fe:	440b      	add	r3, r1
90001700:	3308      	adds	r3, #8
90001702:	6a3a      	ldr	r2, [r7, #32]
90001704:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001708:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
9000170a:	4b13      	ldr	r3, [pc, #76]	@ (90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
9000170c:	681b      	ldr	r3, [r3, #0]
9000170e:	3301      	adds	r3, #1
90001710:	4a11      	ldr	r2, [pc, #68]	@ (90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001712:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001714:	4b10      	ldr	r3, [pc, #64]	@ (90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001716:	681b      	ldr	r3, [r3, #0]
90001718:	2b7f      	cmp	r3, #127	@ 0x7f
9000171a:	d812      	bhi.n	90001742 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
9000171c:	6a3b      	ldr	r3, [r7, #32]
9000171e:	3301      	adds	r3, #1
90001720:	623b      	str	r3, [r7, #32]
90001722:	6a3b      	ldr	r3, [r7, #32]
90001724:	2b0f      	cmp	r3, #15
90001726:	d9b9      	bls.n	9000169c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000172a:	3301      	adds	r3, #1
9000172c:	627b      	str	r3, [r7, #36]	@ 0x24
9000172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001730:	2b0f      	cmp	r3, #15
90001732:	d9a2      	bls.n	9000167a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001736:	3301      	adds	r3, #1
90001738:	62bb      	str	r3, [r7, #40]	@ 0x28
9000173a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000173c:	2b0f      	cmp	r3, #15
9000173e:	d999      	bls.n	90001674 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001740:	e000      	b.n	90001744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001742:	bf00      	nop
          }
        }
      }
    }
  }
}
90001744:	373c      	adds	r7, #60	@ 0x3c
90001746:	46bd      	mov	sp, r7
90001748:	f85d 7b04 	ldr.w	r7, [sp], #4
9000174c:	4770      	bx	lr
9000174e:	bf00      	nop
90001750:	3b9aca00 	.word	0x3b9aca00
90001754:	9000a98c 	.word	0x9000a98c
90001758:	20000f2c 	.word	0x20000f2c
9000175c:	2000052c 	.word	0x2000052c

90001760 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001760:	b480      	push	{r7}
90001762:	b093      	sub	sp, #76	@ 0x4c
90001764:	af00      	add	r7, sp, #0
90001766:	6078      	str	r0, [r7, #4]
90001768:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
9000176a:	f04f 33ff 	mov.w	r3, #4294967295
9000176e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001770:	687b      	ldr	r3, [r7, #4]
90001772:	085a      	lsrs	r2, r3, #1
90001774:	4b7a      	ldr	r3, [pc, #488]	@ (90001960 <I2C_Compute_SCLL_SCLH+0x200>)
90001776:	4413      	add	r3, r2
90001778:	687a      	ldr	r2, [r7, #4]
9000177a:	fbb3 f3f2 	udiv	r3, r3, r2
9000177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001780:	4a78      	ldr	r2, [pc, #480]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
90001782:	683b      	ldr	r3, [r7, #0]
90001784:	212c      	movs	r1, #44	@ 0x2c
90001786:	fb01 f303 	mul.w	r3, r1, r3
9000178a:	4413      	add	r3, r2
9000178c:	681b      	ldr	r3, [r3, #0]
9000178e:	085a      	lsrs	r2, r3, #1
90001790:	4b73      	ldr	r3, [pc, #460]	@ (90001960 <I2C_Compute_SCLL_SCLH+0x200>)
90001792:	4413      	add	r3, r2
90001794:	4973      	ldr	r1, [pc, #460]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
90001796:	683a      	ldr	r2, [r7, #0]
90001798:	202c      	movs	r0, #44	@ 0x2c
9000179a:	fb00 f202 	mul.w	r2, r0, r2
9000179e:	440a      	add	r2, r1
900017a0:	6812      	ldr	r2, [r2, #0]
900017a2:	fbb3 f3f2 	udiv	r3, r3, r2
900017a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
900017a8:	2332      	movs	r3, #50	@ 0x32
900017aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
900017ac:	4a6d      	ldr	r2, [pc, #436]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
900017ae:	683b      	ldr	r3, [r7, #0]
900017b0:	212c      	movs	r1, #44	@ 0x2c
900017b2:	fb01 f303 	mul.w	r3, r1, r3
900017b6:	4413      	add	r3, r2
900017b8:	3328      	adds	r3, #40	@ 0x28
900017ba:	681a      	ldr	r2, [r3, #0]
900017bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900017be:	fb02 f303 	mul.w	r3, r2, r3
900017c2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
900017c4:	4a67      	ldr	r2, [pc, #412]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
900017c6:	683b      	ldr	r3, [r7, #0]
900017c8:	212c      	movs	r1, #44	@ 0x2c
900017ca:	fb01 f303 	mul.w	r3, r1, r3
900017ce:	4413      	add	r3, r2
900017d0:	3304      	adds	r3, #4
900017d2:	681b      	ldr	r3, [r3, #0]
900017d4:	4a62      	ldr	r2, [pc, #392]	@ (90001960 <I2C_Compute_SCLL_SCLH+0x200>)
900017d6:	fbb2 f3f3 	udiv	r3, r2, r3
900017da:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
900017dc:	4a61      	ldr	r2, [pc, #388]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
900017de:	683b      	ldr	r3, [r7, #0]
900017e0:	212c      	movs	r1, #44	@ 0x2c
900017e2:	fb01 f303 	mul.w	r3, r1, r3
900017e6:	4413      	add	r3, r2
900017e8:	3308      	adds	r3, #8
900017ea:	681b      	ldr	r3, [r3, #0]
900017ec:	4a5c      	ldr	r2, [pc, #368]	@ (90001960 <I2C_Compute_SCLL_SCLH+0x200>)
900017ee:	fbb2 f3f3 	udiv	r3, r2, r3
900017f2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
900017f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900017f6:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900017f8:	2300      	movs	r3, #0
900017fa:	637b      	str	r3, [r7, #52]	@ 0x34
900017fc:	e0a3      	b.n	90001946 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900017fe:	495a      	ldr	r1, [pc, #360]	@ (90001968 <I2C_Compute_SCLL_SCLH+0x208>)
90001800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001802:	4613      	mov	r3, r2
90001804:	009b      	lsls	r3, r3, #2
90001806:	4413      	add	r3, r2
90001808:	009b      	lsls	r3, r3, #2
9000180a:	440b      	add	r3, r1
9000180c:	681b      	ldr	r3, [r3, #0]
9000180e:	1c5a      	adds	r2, r3, #1
90001810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001812:	fb02 f303 	mul.w	r3, r2, r3
90001816:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001818:	2300      	movs	r3, #0
9000181a:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000181c:	e08c      	b.n	90001938 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
9000181e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001820:	6a3b      	ldr	r3, [r7, #32]
90001822:	441a      	add	r2, r3
90001824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001826:	3301      	adds	r3, #1
90001828:	6979      	ldr	r1, [r7, #20]
9000182a:	fb03 f101 	mul.w	r1, r3, r1
9000182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001830:	005b      	lsls	r3, r3, #1
90001832:	440b      	add	r3, r1
90001834:	4413      	add	r3, r2
90001836:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001838:	4a4a      	ldr	r2, [pc, #296]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
9000183a:	683b      	ldr	r3, [r7, #0]
9000183c:	212c      	movs	r1, #44	@ 0x2c
9000183e:	fb01 f303 	mul.w	r3, r1, r3
90001842:	4413      	add	r3, r2
90001844:	3318      	adds	r3, #24
90001846:	681b      	ldr	r3, [r3, #0]
90001848:	693a      	ldr	r2, [r7, #16]
9000184a:	429a      	cmp	r2, r3
9000184c:	d971      	bls.n	90001932 <I2C_Compute_SCLL_SCLH+0x1d2>
9000184e:	693a      	ldr	r2, [r7, #16]
90001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001852:	1ad2      	subs	r2, r2, r3
90001854:	6a3b      	ldr	r3, [r7, #32]
90001856:	1ad3      	subs	r3, r2, r3
90001858:	089b      	lsrs	r3, r3, #2
9000185a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000185c:	429a      	cmp	r2, r3
9000185e:	d268      	bcs.n	90001932 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001860:	2300      	movs	r3, #0
90001862:	63bb      	str	r3, [r7, #56]	@ 0x38
90001864:	e062      	b.n	9000192c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001868:	6a3b      	ldr	r3, [r7, #32]
9000186a:	441a      	add	r2, r3
9000186c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000186e:	3301      	adds	r3, #1
90001870:	6979      	ldr	r1, [r7, #20]
90001872:	fb03 f101 	mul.w	r1, r3, r1
90001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001878:	005b      	lsls	r3, r3, #1
9000187a:	440b      	add	r3, r1
9000187c:	4413      	add	r3, r2
9000187e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001880:	693a      	ldr	r2, [r7, #16]
90001882:	68fb      	ldr	r3, [r7, #12]
90001884:	441a      	add	r2, r3
90001886:	4937      	ldr	r1, [pc, #220]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
90001888:	683b      	ldr	r3, [r7, #0]
9000188a:	202c      	movs	r0, #44	@ 0x2c
9000188c:	fb00 f303 	mul.w	r3, r0, r3
90001890:	440b      	add	r3, r1
90001892:	3320      	adds	r3, #32
90001894:	681b      	ldr	r3, [r3, #0]
90001896:	441a      	add	r2, r3
90001898:	4932      	ldr	r1, [pc, #200]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
9000189a:	683b      	ldr	r3, [r7, #0]
9000189c:	202c      	movs	r0, #44	@ 0x2c
9000189e:	fb00 f303 	mul.w	r3, r0, r3
900018a2:	440b      	add	r3, r1
900018a4:	3324      	adds	r3, #36	@ 0x24
900018a6:	681b      	ldr	r3, [r3, #0]
900018a8:	4413      	add	r3, r2
900018aa:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900018ac:	68ba      	ldr	r2, [r7, #8]
900018ae:	69bb      	ldr	r3, [r7, #24]
900018b0:	429a      	cmp	r2, r3
900018b2:	d338      	bcc.n	90001926 <I2C_Compute_SCLL_SCLH+0x1c6>
900018b4:	68ba      	ldr	r2, [r7, #8]
900018b6:	69fb      	ldr	r3, [r7, #28]
900018b8:	429a      	cmp	r2, r3
900018ba:	d834      	bhi.n	90001926 <I2C_Compute_SCLL_SCLH+0x1c6>
900018bc:	4a29      	ldr	r2, [pc, #164]	@ (90001964 <I2C_Compute_SCLL_SCLH+0x204>)
900018be:	683b      	ldr	r3, [r7, #0]
900018c0:	212c      	movs	r1, #44	@ 0x2c
900018c2:	fb01 f303 	mul.w	r3, r1, r3
900018c6:	4413      	add	r3, r2
900018c8:	331c      	adds	r3, #28
900018ca:	681b      	ldr	r3, [r3, #0]
900018cc:	68fa      	ldr	r2, [r7, #12]
900018ce:	429a      	cmp	r2, r3
900018d0:	d329      	bcc.n	90001926 <I2C_Compute_SCLL_SCLH+0x1c6>
900018d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900018d4:	68fb      	ldr	r3, [r7, #12]
900018d6:	429a      	cmp	r2, r3
900018d8:	d225      	bcs.n	90001926 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
900018da:	68ba      	ldr	r2, [r7, #8]
900018dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900018de:	1ad3      	subs	r3, r2, r3
900018e0:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
900018e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900018e4:	2b00      	cmp	r3, #0
900018e6:	da02      	bge.n	900018ee <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
900018e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900018ea:	425b      	negs	r3, r3
900018ec:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
900018ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900018f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
900018f2:	429a      	cmp	r2, r3
900018f4:	d917      	bls.n	90001926 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
900018f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900018f8:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
900018fa:	491b      	ldr	r1, [pc, #108]	@ (90001968 <I2C_Compute_SCLL_SCLH+0x208>)
900018fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900018fe:	4613      	mov	r3, r2
90001900:	009b      	lsls	r3, r3, #2
90001902:	4413      	add	r3, r2
90001904:	009b      	lsls	r3, r3, #2
90001906:	440b      	add	r3, r1
90001908:	3310      	adds	r3, #16
9000190a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
9000190c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
9000190e:	4916      	ldr	r1, [pc, #88]	@ (90001968 <I2C_Compute_SCLL_SCLH+0x208>)
90001910:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001912:	4613      	mov	r3, r2
90001914:	009b      	lsls	r3, r3, #2
90001916:	4413      	add	r3, r2
90001918:	009b      	lsls	r3, r3, #2
9000191a:	440b      	add	r3, r1
9000191c:	330c      	adds	r3, #12
9000191e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001920:	601a      	str	r2, [r3, #0]
              ret = count;
90001922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001924:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001928:	3301      	adds	r3, #1
9000192a:	63bb      	str	r3, [r7, #56]	@ 0x38
9000192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000192e:	2bff      	cmp	r3, #255	@ 0xff
90001930:	d999      	bls.n	90001866 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001934:	3301      	adds	r3, #1
90001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000193a:	2bff      	cmp	r3, #255	@ 0xff
9000193c:	f67f af6f 	bls.w	9000181e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001942:	3301      	adds	r3, #1
90001944:	637b      	str	r3, [r7, #52]	@ 0x34
90001946:	4b09      	ldr	r3, [pc, #36]	@ (9000196c <I2C_Compute_SCLL_SCLH+0x20c>)
90001948:	681b      	ldr	r3, [r3, #0]
9000194a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
9000194c:	429a      	cmp	r2, r3
9000194e:	f4ff af56 	bcc.w	900017fe <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001954:	4618      	mov	r0, r3
90001956:	374c      	adds	r7, #76	@ 0x4c
90001958:	46bd      	mov	sp, r7
9000195a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000195e:	4770      	bx	lr
90001960:	3b9aca00 	.word	0x3b9aca00
90001964:	9000a98c 	.word	0x9000a98c
90001968:	2000052c 	.word	0x2000052c
9000196c:	20000f2c 	.word	0x20000f2c

90001970 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001970:	b580      	push	{r7, lr}
90001972:	b08a      	sub	sp, #40	@ 0x28
90001974:	af00      	add	r7, sp, #0
90001976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001978:	4b31      	ldr	r3, [pc, #196]	@ (90001a40 <I2C4_MspInit+0xd0>)
9000197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000197e:	4a30      	ldr	r2, [pc, #192]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001980:	f043 0308 	orr.w	r3, r3, #8
90001984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001988:	4b2d      	ldr	r3, [pc, #180]	@ (90001a40 <I2C4_MspInit+0xd0>)
9000198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000198e:	f003 0308 	and.w	r3, r3, #8
90001992:	613b      	str	r3, [r7, #16]
90001994:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001996:	4b2a      	ldr	r3, [pc, #168]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000199c:	4a28      	ldr	r2, [pc, #160]	@ (90001a40 <I2C4_MspInit+0xd0>)
9000199e:	f043 0308 	orr.w	r3, r3, #8
900019a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900019a6:	4b26      	ldr	r3, [pc, #152]	@ (90001a40 <I2C4_MspInit+0xd0>)
900019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900019ac:	f003 0308 	and.w	r3, r3, #8
900019b0:	60fb      	str	r3, [r7, #12]
900019b2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
900019b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
900019b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
900019ba:	2312      	movs	r3, #18
900019bc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900019be:	2300      	movs	r3, #0
900019c0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900019c2:	2302      	movs	r3, #2
900019c4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
900019c6:	2304      	movs	r3, #4
900019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900019ca:	f107 0314 	add.w	r3, r7, #20
900019ce:	4619      	mov	r1, r3
900019d0:	481c      	ldr	r0, [pc, #112]	@ (90001a44 <I2C4_MspInit+0xd4>)
900019d2:	f001 ffa1 	bl	90003918 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900019d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
900019da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
900019dc:	2312      	movs	r3, #18
900019de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900019e0:	2300      	movs	r3, #0
900019e2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900019e4:	2302      	movs	r3, #2
900019e6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
900019e8:	2304      	movs	r3, #4
900019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900019ec:	f107 0314 	add.w	r3, r7, #20
900019f0:	4619      	mov	r1, r3
900019f2:	4814      	ldr	r0, [pc, #80]	@ (90001a44 <I2C4_MspInit+0xd4>)
900019f4:	f001 ff90 	bl	90003918 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
900019f8:	4b11      	ldr	r3, [pc, #68]	@ (90001a40 <I2C4_MspInit+0xd0>)
900019fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900019fe:	4a10      	ldr	r2, [pc, #64]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001a04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001a08:	4b0d      	ldr	r3, [pc, #52]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001a12:	60bb      	str	r3, [r7, #8]
90001a14:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001a16:	4b0a      	ldr	r3, [pc, #40]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001a1c:	4a08      	ldr	r2, [pc, #32]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001a22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001a26:	4b06      	ldr	r3, [pc, #24]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001a2c:	4a04      	ldr	r2, [pc, #16]	@ (90001a40 <I2C4_MspInit+0xd0>)
90001a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001a32:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001a36:	bf00      	nop
90001a38:	3728      	adds	r7, #40	@ 0x28
90001a3a:	46bd      	mov	sp, r7
90001a3c:	bd80      	pop	{r7, pc}
90001a3e:	bf00      	nop
90001a40:	58024400 	.word	0x58024400
90001a44:	58020c00 	.word	0x58020c00

90001a48 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
90001a48:	b580      	push	{r7, lr}
90001a4a:	b088      	sub	sp, #32
90001a4c:	af00      	add	r7, sp, #0
90001a4e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
90001a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001a54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90001a56:	68fb      	ldr	r3, [r7, #12]
90001a58:	4619      	mov	r1, r3
90001a5a:	480b      	ldr	r0, [pc, #44]	@ (90001a88 <I2C4_MspDeInit+0x40>)
90001a5c:	f002 f90c 	bl	90003c78 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
90001a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001a64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90001a66:	68fb      	ldr	r3, [r7, #12]
90001a68:	4619      	mov	r1, r3
90001a6a:	4807      	ldr	r0, [pc, #28]	@ (90001a88 <I2C4_MspDeInit+0x40>)
90001a6c:	f002 f904 	bl	90003c78 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90001a70:	4b06      	ldr	r3, [pc, #24]	@ (90001a8c <I2C4_MspDeInit+0x44>)
90001a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001a76:	4a05      	ldr	r2, [pc, #20]	@ (90001a8c <I2C4_MspDeInit+0x44>)
90001a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001a7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
90001a80:	bf00      	nop
90001a82:	3720      	adds	r7, #32
90001a84:	46bd      	mov	sp, r7
90001a86:	bd80      	pop	{r7, pc}
90001a88:	58020c00 	.word	0x58020c00
90001a8c:	58024400 	.word	0x58024400

90001a90 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001a90:	b580      	push	{r7, lr}
90001a92:	b088      	sub	sp, #32
90001a94:	af04      	add	r7, sp, #16
90001a96:	607b      	str	r3, [r7, #4]
90001a98:	4603      	mov	r3, r0
90001a9a:	81fb      	strh	r3, [r7, #14]
90001a9c:	460b      	mov	r3, r1
90001a9e:	81bb      	strh	r3, [r7, #12]
90001aa0:	4613      	mov	r3, r2
90001aa2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001aa4:	8978      	ldrh	r0, [r7, #10]
90001aa6:	89ba      	ldrh	r2, [r7, #12]
90001aa8:	89f9      	ldrh	r1, [r7, #14]
90001aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001aae:	9302      	str	r3, [sp, #8]
90001ab0:	8b3b      	ldrh	r3, [r7, #24]
90001ab2:	9301      	str	r3, [sp, #4]
90001ab4:	687b      	ldr	r3, [r7, #4]
90001ab6:	9300      	str	r3, [sp, #0]
90001ab8:	4603      	mov	r3, r0
90001aba:	4807      	ldr	r0, [pc, #28]	@ (90001ad8 <I2C4_WriteReg+0x48>)
90001abc:	f004 f886 	bl	90005bcc <HAL_I2C_Mem_Write>
90001ac0:	4603      	mov	r3, r0
90001ac2:	2b00      	cmp	r3, #0
90001ac4:	d101      	bne.n	90001aca <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001ac6:	2300      	movs	r3, #0
90001ac8:	e001      	b.n	90001ace <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001aca:	f06f 0307 	mvn.w	r3, #7
}
90001ace:	4618      	mov	r0, r3
90001ad0:	3710      	adds	r7, #16
90001ad2:	46bd      	mov	sp, r7
90001ad4:	bd80      	pop	{r7, pc}
90001ad6:	bf00      	nop
90001ad8:	20000f30 	.word	0x20000f30

90001adc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001adc:	b580      	push	{r7, lr}
90001ade:	b088      	sub	sp, #32
90001ae0:	af04      	add	r7, sp, #16
90001ae2:	607b      	str	r3, [r7, #4]
90001ae4:	4603      	mov	r3, r0
90001ae6:	81fb      	strh	r3, [r7, #14]
90001ae8:	460b      	mov	r3, r1
90001aea:	81bb      	strh	r3, [r7, #12]
90001aec:	4613      	mov	r3, r2
90001aee:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001af0:	8978      	ldrh	r0, [r7, #10]
90001af2:	89ba      	ldrh	r2, [r7, #12]
90001af4:	89f9      	ldrh	r1, [r7, #14]
90001af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001afa:	9302      	str	r3, [sp, #8]
90001afc:	8b3b      	ldrh	r3, [r7, #24]
90001afe:	9301      	str	r3, [sp, #4]
90001b00:	687b      	ldr	r3, [r7, #4]
90001b02:	9300      	str	r3, [sp, #0]
90001b04:	4603      	mov	r3, r0
90001b06:	4807      	ldr	r0, [pc, #28]	@ (90001b24 <I2C4_ReadReg+0x48>)
90001b08:	f004 f974 	bl	90005df4 <HAL_I2C_Mem_Read>
90001b0c:	4603      	mov	r3, r0
90001b0e:	2b00      	cmp	r3, #0
90001b10:	d101      	bne.n	90001b16 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001b12:	2300      	movs	r3, #0
90001b14:	e001      	b.n	90001b1a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001b16:	f06f 0307 	mvn.w	r3, #7
}
90001b1a:	4618      	mov	r0, r3
90001b1c:	3710      	adds	r7, #16
90001b1e:	46bd      	mov	sp, r7
90001b20:	bd80      	pop	{r7, pc}
90001b22:	bf00      	nop
90001b24:	20000f30 	.word	0x20000f30

90001b28 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001b28:	b580      	push	{r7, lr}
90001b2a:	b084      	sub	sp, #16
90001b2c:	af02      	add	r7, sp, #8
90001b2e:	6078      	str	r0, [r7, #4]
90001b30:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001b32:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001b36:	9300      	str	r3, [sp, #0]
90001b38:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001b3c:	2200      	movs	r2, #0
90001b3e:	6839      	ldr	r1, [r7, #0]
90001b40:	6878      	ldr	r0, [r7, #4]
90001b42:	f000 f805 	bl	90001b50 <BSP_LCD_InitEx>
90001b46:	4603      	mov	r3, r0
}
90001b48:	4618      	mov	r0, r3
90001b4a:	3708      	adds	r7, #8
90001b4c:	46bd      	mov	sp, r7
90001b4e:	bd80      	pop	{r7, pc}

90001b50 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001b50:	b580      	push	{r7, lr}
90001b52:	b09e      	sub	sp, #120	@ 0x78
90001b54:	af00      	add	r7, sp, #0
90001b56:	60f8      	str	r0, [r7, #12]
90001b58:	60b9      	str	r1, [r7, #8]
90001b5a:	607a      	str	r2, [r7, #4]
90001b5c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001b5e:	2300      	movs	r3, #0
90001b60:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001b62:	2300      	movs	r3, #0
90001b64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001b66:	68bb      	ldr	r3, [r7, #8]
90001b68:	2b01      	cmp	r3, #1
90001b6a:	d808      	bhi.n	90001b7e <BSP_LCD_InitEx+0x2e>
90001b6c:	68fb      	ldr	r3, [r7, #12]
90001b6e:	2b00      	cmp	r3, #0
90001b70:	d105      	bne.n	90001b7e <BSP_LCD_InitEx+0x2e>
90001b72:	687b      	ldr	r3, [r7, #4]
90001b74:	2b02      	cmp	r3, #2
90001b76:	d006      	beq.n	90001b86 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001b78:	687b      	ldr	r3, [r7, #4]
90001b7a:	2b00      	cmp	r3, #0
90001b7c:	d003      	beq.n	90001b86 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001b7e:	f06f 0301 	mvn.w	r3, #1
90001b82:	677b      	str	r3, [r7, #116]	@ 0x74
90001b84:	e0a8      	b.n	90001cd8 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001b86:	687b      	ldr	r3, [r7, #4]
90001b88:	2b02      	cmp	r3, #2
90001b8a:	d109      	bne.n	90001ba0 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001b8c:	2302      	movs	r3, #2
90001b8e:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001b90:	4a54      	ldr	r2, [pc, #336]	@ (90001ce4 <BSP_LCD_InitEx+0x194>)
90001b92:	68fb      	ldr	r3, [r7, #12]
90001b94:	015b      	lsls	r3, r3, #5
90001b96:	4413      	add	r3, r2
90001b98:	3310      	adds	r3, #16
90001b9a:	2202      	movs	r2, #2
90001b9c:	601a      	str	r2, [r3, #0]
90001b9e:	e008      	b.n	90001bb2 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001ba0:	2300      	movs	r3, #0
90001ba2:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001ba4:	4a4f      	ldr	r2, [pc, #316]	@ (90001ce4 <BSP_LCD_InitEx+0x194>)
90001ba6:	68fb      	ldr	r3, [r7, #12]
90001ba8:	015b      	lsls	r3, r3, #5
90001baa:	4413      	add	r3, r2
90001bac:	3310      	adds	r3, #16
90001bae:	2204      	movs	r2, #4
90001bb0:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001bb2:	4a4c      	ldr	r2, [pc, #304]	@ (90001ce4 <BSP_LCD_InitEx+0x194>)
90001bb4:	68fb      	ldr	r3, [r7, #12]
90001bb6:	015b      	lsls	r3, r3, #5
90001bb8:	4413      	add	r3, r2
90001bba:	330c      	adds	r3, #12
90001bbc:	687a      	ldr	r2, [r7, #4]
90001bbe:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001bc0:	4a48      	ldr	r2, [pc, #288]	@ (90001ce4 <BSP_LCD_InitEx+0x194>)
90001bc2:	68fb      	ldr	r3, [r7, #12]
90001bc4:	015b      	lsls	r3, r3, #5
90001bc6:	4413      	add	r3, r2
90001bc8:	683a      	ldr	r2, [r7, #0]
90001bca:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001bcc:	4a45      	ldr	r2, [pc, #276]	@ (90001ce4 <BSP_LCD_InitEx+0x194>)
90001bce:	68fb      	ldr	r3, [r7, #12]
90001bd0:	015b      	lsls	r3, r3, #5
90001bd2:	4413      	add	r3, r2
90001bd4:	3304      	adds	r3, #4
90001bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001bda:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001bdc:	4b42      	ldr	r3, [pc, #264]	@ (90001ce8 <BSP_LCD_InitEx+0x198>)
90001bde:	4a43      	ldr	r2, [pc, #268]	@ (90001cec <BSP_LCD_InitEx+0x19c>)
90001be0:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001be2:	4b43      	ldr	r3, [pc, #268]	@ (90001cf0 <BSP_LCD_InitEx+0x1a0>)
90001be4:	4a43      	ldr	r2, [pc, #268]	@ (90001cf4 <BSP_LCD_InitEx+0x1a4>)
90001be6:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001be8:	483f      	ldr	r0, [pc, #252]	@ (90001ce8 <BSP_LCD_InitEx+0x198>)
90001bea:	f000 fcf9 	bl	900025e0 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001bee:	4840      	ldr	r0, [pc, #256]	@ (90001cf0 <BSP_LCD_InitEx+0x1a0>)
90001bf0:	f000 fdc2 	bl	90002778 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001bf4:	4b40      	ldr	r3, [pc, #256]	@ (90001cf8 <BSP_LCD_InitEx+0x1a8>)
90001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001bf8:	4b40      	ldr	r3, [pc, #256]	@ (90001cfc <BSP_LCD_InitEx+0x1ac>)
90001bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001bfc:	2370      	movs	r3, #112	@ 0x70
90001bfe:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001c00:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90001c04:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001c08:	4611      	mov	r1, r2
90001c0a:	4618      	mov	r0, r3
90001c0c:	f7fe fe6c 	bl	900008e8 <FT5336_RegisterBusIO>
90001c10:	4603      	mov	r3, r0
90001c12:	2b00      	cmp	r3, #0
90001c14:	da03      	bge.n	90001c1e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001c16:	f06f 0304 	mvn.w	r3, #4
90001c1a:	677b      	str	r3, [r7, #116]	@ 0x74
90001c1c:	e02b      	b.n	90001c76 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90001c1e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90001c22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001c26:	4611      	mov	r1, r2
90001c28:	4618      	mov	r0, r3
90001c2a:	f7fe ff57 	bl	90000adc <FT5336_ReadID>
90001c2e:	4603      	mov	r3, r0
90001c30:	2b00      	cmp	r3, #0
90001c32:	da03      	bge.n	90001c3c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001c34:	f06f 0304 	mvn.w	r3, #4
90001c38:	677b      	str	r3, [r7, #116]	@ 0x74
90001c3a:	e01c      	b.n	90001c76 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90001c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90001c3e:	2b51      	cmp	r3, #81	@ 0x51
90001c40:	d003      	beq.n	90001c4a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90001c42:	f06f 0306 	mvn.w	r3, #6
90001c46:	677b      	str	r3, [r7, #116]	@ 0x74
90001c48:	e015      	b.n	90001c76 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90001c4a:	4827      	ldr	r0, [pc, #156]	@ (90001ce8 <BSP_LCD_InitEx+0x198>)
90001c4c:	f7fe fd60 	bl	90000710 <MX_LTDC_ClockConfig>
90001c50:	4603      	mov	r3, r0
90001c52:	2b00      	cmp	r3, #0
90001c54:	d003      	beq.n	90001c5e <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001c56:	f06f 0303 	mvn.w	r3, #3
90001c5a:	677b      	str	r3, [r7, #116]	@ 0x74
90001c5c:	e00b      	b.n	90001c76 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90001c5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001c62:	6839      	ldr	r1, [r7, #0]
90001c64:	4820      	ldr	r0, [pc, #128]	@ (90001ce8 <BSP_LCD_InitEx+0x198>)
90001c66:	f000 f84d 	bl	90001d04 <MX_LTDC_Init>
90001c6a:	4603      	mov	r3, r0
90001c6c:	2b00      	cmp	r3, #0
90001c6e:	d002      	beq.n	90001c76 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001c70:	f06f 0303 	mvn.w	r3, #3
90001c74:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90001c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90001c78:	2b00      	cmp	r3, #0
90001c7a:	d12d      	bne.n	90001cd8 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90001c7c:	2000      	movs	r0, #0
90001c7e:	f000 fe0d 	bl	9000289c <BSP_SDRAM_Init>
90001c82:	4603      	mov	r3, r0
90001c84:	2b00      	cmp	r3, #0
90001c86:	d002      	beq.n	90001c8e <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90001c88:	f06f 0303 	mvn.w	r3, #3
90001c8c:	e025      	b.n	90001cda <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90001c8e:	2300      	movs	r3, #0
90001c90:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90001c92:	683b      	ldr	r3, [r7, #0]
90001c94:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90001c96:	2300      	movs	r3, #0
90001c98:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90001c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90001c9e:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90001ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90001ca4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90001caa:	f107 0314 	add.w	r3, r7, #20
90001cae:	461a      	mov	r2, r3
90001cb0:	2100      	movs	r1, #0
90001cb2:	480d      	ldr	r0, [pc, #52]	@ (90001ce8 <BSP_LCD_InitEx+0x198>)
90001cb4:	f000 f872 	bl	90001d9c <MX_LTDC_ConfigLayer>
90001cb8:	4603      	mov	r3, r0
90001cba:	2b00      	cmp	r3, #0
90001cbc:	d002      	beq.n	90001cc4 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90001cbe:	f06f 0303 	mvn.w	r3, #3
90001cc2:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90001cc4:	480e      	ldr	r0, [pc, #56]	@ (90001d00 <BSP_LCD_InitEx+0x1b0>)
90001cc6:	f000 fdbf 	bl	90002848 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90001cca:	4a06      	ldr	r2, [pc, #24]	@ (90001ce4 <BSP_LCD_InitEx+0x194>)
90001ccc:	68fb      	ldr	r3, [r7, #12]
90001cce:	015b      	lsls	r3, r3, #5
90001cd0:	4413      	add	r3, r2
90001cd2:	3318      	adds	r3, #24
90001cd4:	2201      	movs	r2, #1
90001cd6:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90001cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90001cda:	4618      	mov	r0, r3
90001cdc:	3778      	adds	r7, #120	@ 0x78
90001cde:	46bd      	mov	sp, r7
90001ce0:	bd80      	pop	{r7, pc}
90001ce2:	bf00      	nop
90001ce4:	200010e0 	.word	0x200010e0
90001ce8:	20001038 	.word	0x20001038
90001cec:	50001000 	.word	0x50001000
90001cf0:	20000fd0 	.word	0x20000fd0
90001cf4:	52001000 	.word	0x52001000
90001cf8:	9000127d 	.word	0x9000127d
90001cfc:	90001419 	.word	0x90001419
90001d00:	20000f84 	.word	0x20000f84

90001d04 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90001d04:	b580      	push	{r7, lr}
90001d06:	b084      	sub	sp, #16
90001d08:	af00      	add	r7, sp, #0
90001d0a:	60f8      	str	r0, [r7, #12]
90001d0c:	60b9      	str	r1, [r7, #8]
90001d0e:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90001d10:	68fb      	ldr	r3, [r7, #12]
90001d12:	4a21      	ldr	r2, [pc, #132]	@ (90001d98 <MX_LTDC_Init+0x94>)
90001d14:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001d16:	68fb      	ldr	r3, [r7, #12]
90001d18:	2200      	movs	r2, #0
90001d1a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001d1c:	68fb      	ldr	r3, [r7, #12]
90001d1e:	2200      	movs	r2, #0
90001d20:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001d22:	68fb      	ldr	r3, [r7, #12]
90001d24:	2200      	movs	r2, #0
90001d26:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001d28:	68fb      	ldr	r3, [r7, #12]
90001d2a:	2200      	movs	r2, #0
90001d2c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90001d2e:	68fb      	ldr	r3, [r7, #12]
90001d30:	2228      	movs	r2, #40	@ 0x28
90001d32:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90001d34:	68fb      	ldr	r3, [r7, #12]
90001d36:	222a      	movs	r2, #42	@ 0x2a
90001d38:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90001d3a:	68bb      	ldr	r3, [r7, #8]
90001d3c:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90001d40:	68fb      	ldr	r3, [r7, #12]
90001d42:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90001d44:	68bb      	ldr	r3, [r7, #8]
90001d46:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
90001d4a:	68fb      	ldr	r3, [r7, #12]
90001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90001d4e:	68fb      	ldr	r3, [r7, #12]
90001d50:	2209      	movs	r2, #9
90001d52:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90001d54:	68fb      	ldr	r3, [r7, #12]
90001d56:	220b      	movs	r2, #11
90001d58:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90001d5a:	687b      	ldr	r3, [r7, #4]
90001d5c:	f103 020b 	add.w	r2, r3, #11
90001d60:	68fb      	ldr	r3, [r7, #12]
90001d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90001d64:	687b      	ldr	r3, [r7, #4]
90001d66:	f103 020d 	add.w	r2, r3, #13
90001d6a:	68fb      	ldr	r3, [r7, #12]
90001d6c:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90001d6e:	68fb      	ldr	r3, [r7, #12]
90001d70:	22ff      	movs	r2, #255	@ 0xff
90001d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
90001d76:	68fb      	ldr	r3, [r7, #12]
90001d78:	22ff      	movs	r2, #255	@ 0xff
90001d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90001d7e:	68fb      	ldr	r3, [r7, #12]
90001d80:	22ff      	movs	r2, #255	@ 0xff
90001d82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
90001d86:	68f8      	ldr	r0, [r7, #12]
90001d88:	f004 fcc1 	bl	9000670e <HAL_LTDC_Init>
90001d8c:	4603      	mov	r3, r0
}
90001d8e:	4618      	mov	r0, r3
90001d90:	3710      	adds	r7, #16
90001d92:	46bd      	mov	sp, r7
90001d94:	bd80      	pop	{r7, pc}
90001d96:	bf00      	nop
90001d98:	50001000 	.word	0x50001000

90001d9c <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90001d9c:	b580      	push	{r7, lr}
90001d9e:	b092      	sub	sp, #72	@ 0x48
90001da0:	af00      	add	r7, sp, #0
90001da2:	60f8      	str	r0, [r7, #12]
90001da4:	60b9      	str	r1, [r7, #8]
90001da6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90001da8:	687b      	ldr	r3, [r7, #4]
90001daa:	681b      	ldr	r3, [r3, #0]
90001dac:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90001dae:	687b      	ldr	r3, [r7, #4]
90001db0:	685b      	ldr	r3, [r3, #4]
90001db2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90001db4:	687b      	ldr	r3, [r7, #4]
90001db6:	689b      	ldr	r3, [r3, #8]
90001db8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90001dba:	687b      	ldr	r3, [r7, #4]
90001dbc:	68db      	ldr	r3, [r3, #12]
90001dbe:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90001dc0:	687b      	ldr	r3, [r7, #4]
90001dc2:	691b      	ldr	r3, [r3, #16]
90001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
90001dc6:	23ff      	movs	r3, #255	@ 0xff
90001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90001dca:	2300      	movs	r3, #0
90001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90001dce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
90001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001dd4:	2307      	movs	r3, #7
90001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90001dd8:	687b      	ldr	r3, [r7, #4]
90001dda:	695b      	ldr	r3, [r3, #20]
90001ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90001dde:	687b      	ldr	r3, [r7, #4]
90001de0:	685a      	ldr	r2, [r3, #4]
90001de2:	687b      	ldr	r3, [r7, #4]
90001de4:	681b      	ldr	r3, [r3, #0]
90001de6:	1ad3      	subs	r3, r2, r3
90001de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90001dea:	687b      	ldr	r3, [r7, #4]
90001dec:	68da      	ldr	r2, [r3, #12]
90001dee:	687b      	ldr	r3, [r7, #4]
90001df0:	689b      	ldr	r3, [r3, #8]
90001df2:	1ad3      	subs	r3, r2, r3
90001df4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
90001df6:	2300      	movs	r3, #0
90001df8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90001dfc:	2300      	movs	r3, #0
90001dfe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
90001e02:	2300      	movs	r3, #0
90001e04:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90001e08:	f107 0314 	add.w	r3, r7, #20
90001e0c:	68ba      	ldr	r2, [r7, #8]
90001e0e:	4619      	mov	r1, r3
90001e10:	68f8      	ldr	r0, [r7, #12]
90001e12:	f004 fd23 	bl	9000685c <HAL_LTDC_ConfigLayer>
90001e16:	4603      	mov	r3, r0
}
90001e18:	4618      	mov	r0, r3
90001e1a:	3748      	adds	r7, #72	@ 0x48
90001e1c:	46bd      	mov	sp, r7
90001e1e:	bd80      	pop	{r7, pc}

90001e20 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90001e20:	b480      	push	{r7}
90001e22:	b085      	sub	sp, #20
90001e24:	af00      	add	r7, sp, #0
90001e26:	6078      	str	r0, [r7, #4]
90001e28:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001e2a:	2300      	movs	r3, #0
90001e2c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001e2e:	687b      	ldr	r3, [r7, #4]
90001e30:	2b00      	cmp	r3, #0
90001e32:	d003      	beq.n	90001e3c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001e34:	f06f 0301 	mvn.w	r3, #1
90001e38:	60fb      	str	r3, [r7, #12]
90001e3a:	e007      	b.n	90001e4c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90001e3c:	4a07      	ldr	r2, [pc, #28]	@ (90001e5c <BSP_LCD_GetPixelFormat+0x3c>)
90001e3e:	687b      	ldr	r3, [r7, #4]
90001e40:	015b      	lsls	r3, r3, #5
90001e42:	4413      	add	r3, r2
90001e44:	330c      	adds	r3, #12
90001e46:	681a      	ldr	r2, [r3, #0]
90001e48:	683b      	ldr	r3, [r7, #0]
90001e4a:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001e4c:	68fb      	ldr	r3, [r7, #12]
}
90001e4e:	4618      	mov	r0, r3
90001e50:	3714      	adds	r7, #20
90001e52:	46bd      	mov	sp, r7
90001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e58:	4770      	bx	lr
90001e5a:	bf00      	nop
90001e5c:	200010e0 	.word	0x200010e0

90001e60 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90001e60:	b480      	push	{r7}
90001e62:	b085      	sub	sp, #20
90001e64:	af00      	add	r7, sp, #0
90001e66:	6078      	str	r0, [r7, #4]
90001e68:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001e6a:	2300      	movs	r3, #0
90001e6c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001e6e:	687b      	ldr	r3, [r7, #4]
90001e70:	2b00      	cmp	r3, #0
90001e72:	d003      	beq.n	90001e7c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001e74:	f06f 0301 	mvn.w	r3, #1
90001e78:	60fb      	str	r3, [r7, #12]
90001e7a:	e006      	b.n	90001e8a <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90001e7c:	4a06      	ldr	r2, [pc, #24]	@ (90001e98 <BSP_LCD_SetActiveLayer+0x38>)
90001e7e:	687b      	ldr	r3, [r7, #4]
90001e80:	015b      	lsls	r3, r3, #5
90001e82:	4413      	add	r3, r2
90001e84:	3308      	adds	r3, #8
90001e86:	683a      	ldr	r2, [r7, #0]
90001e88:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001e8a:	68fb      	ldr	r3, [r7, #12]
}
90001e8c:	4618      	mov	r0, r3
90001e8e:	3714      	adds	r7, #20
90001e90:	46bd      	mov	sp, r7
90001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e96:	4770      	bx	lr
90001e98:	200010e0 	.word	0x200010e0

90001e9c <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90001e9c:	b480      	push	{r7}
90001e9e:	b085      	sub	sp, #20
90001ea0:	af00      	add	r7, sp, #0
90001ea2:	6078      	str	r0, [r7, #4]
90001ea4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001ea6:	2300      	movs	r3, #0
90001ea8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001eaa:	687b      	ldr	r3, [r7, #4]
90001eac:	2b00      	cmp	r3, #0
90001eae:	d003      	beq.n	90001eb8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001eb0:	f06f 0301 	mvn.w	r3, #1
90001eb4:	60fb      	str	r3, [r7, #12]
90001eb6:	e006      	b.n	90001ec6 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90001eb8:	4a06      	ldr	r2, [pc, #24]	@ (90001ed4 <BSP_LCD_GetXSize+0x38>)
90001eba:	687b      	ldr	r3, [r7, #4]
90001ebc:	015b      	lsls	r3, r3, #5
90001ebe:	4413      	add	r3, r2
90001ec0:	681a      	ldr	r2, [r3, #0]
90001ec2:	683b      	ldr	r3, [r7, #0]
90001ec4:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001ec6:	68fb      	ldr	r3, [r7, #12]
}
90001ec8:	4618      	mov	r0, r3
90001eca:	3714      	adds	r7, #20
90001ecc:	46bd      	mov	sp, r7
90001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ed2:	4770      	bx	lr
90001ed4:	200010e0 	.word	0x200010e0

90001ed8 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90001ed8:	b480      	push	{r7}
90001eda:	b085      	sub	sp, #20
90001edc:	af00      	add	r7, sp, #0
90001ede:	6078      	str	r0, [r7, #4]
90001ee0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001ee2:	2300      	movs	r3, #0
90001ee4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001ee6:	687b      	ldr	r3, [r7, #4]
90001ee8:	2b00      	cmp	r3, #0
90001eea:	d003      	beq.n	90001ef4 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001eec:	f06f 0301 	mvn.w	r3, #1
90001ef0:	60fb      	str	r3, [r7, #12]
90001ef2:	e007      	b.n	90001f04 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
90001ef4:	4a07      	ldr	r2, [pc, #28]	@ (90001f14 <BSP_LCD_GetYSize+0x3c>)
90001ef6:	687b      	ldr	r3, [r7, #4]
90001ef8:	015b      	lsls	r3, r3, #5
90001efa:	4413      	add	r3, r2
90001efc:	3304      	adds	r3, #4
90001efe:	681a      	ldr	r2, [r3, #0]
90001f00:	683b      	ldr	r3, [r7, #0]
90001f02:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001f04:	68fb      	ldr	r3, [r7, #12]
}
90001f06:	4618      	mov	r0, r3
90001f08:	3714      	adds	r7, #20
90001f0a:	46bd      	mov	sp, r7
90001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f10:	4770      	bx	lr
90001f12:	bf00      	nop
90001f14:	200010e0 	.word	0x200010e0

90001f18 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90001f18:	b580      	push	{r7, lr}
90001f1a:	b08e      	sub	sp, #56	@ 0x38
90001f1c:	af02      	add	r7, sp, #8
90001f1e:	60f8      	str	r0, [r7, #12]
90001f20:	60b9      	str	r1, [r7, #8]
90001f22:	607a      	str	r2, [r7, #4]
90001f24:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001f26:	2300      	movs	r3, #0
90001f28:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
90001f2a:	683b      	ldr	r3, [r7, #0]
90001f2c:	330a      	adds	r3, #10
90001f2e:	781b      	ldrb	r3, [r3, #0]
90001f30:	461a      	mov	r2, r3
90001f32:	683b      	ldr	r3, [r7, #0]
90001f34:	330b      	adds	r3, #11
90001f36:	781b      	ldrb	r3, [r3, #0]
90001f38:	021b      	lsls	r3, r3, #8
90001f3a:	441a      	add	r2, r3
90001f3c:	683b      	ldr	r3, [r7, #0]
90001f3e:	330c      	adds	r3, #12
90001f40:	781b      	ldrb	r3, [r3, #0]
90001f42:	041b      	lsls	r3, r3, #16
90001f44:	441a      	add	r2, r3
90001f46:	683b      	ldr	r3, [r7, #0]
90001f48:	330d      	adds	r3, #13
90001f4a:	781b      	ldrb	r3, [r3, #0]
90001f4c:	061b      	lsls	r3, r3, #24
90001f4e:	4413      	add	r3, r2
90001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90001f52:	683b      	ldr	r3, [r7, #0]
90001f54:	3312      	adds	r3, #18
90001f56:	781b      	ldrb	r3, [r3, #0]
90001f58:	461a      	mov	r2, r3
90001f5a:	683b      	ldr	r3, [r7, #0]
90001f5c:	3313      	adds	r3, #19
90001f5e:	781b      	ldrb	r3, [r3, #0]
90001f60:	021b      	lsls	r3, r3, #8
90001f62:	441a      	add	r2, r3
90001f64:	683b      	ldr	r3, [r7, #0]
90001f66:	3314      	adds	r3, #20
90001f68:	781b      	ldrb	r3, [r3, #0]
90001f6a:	041b      	lsls	r3, r3, #16
90001f6c:	441a      	add	r2, r3
90001f6e:	683b      	ldr	r3, [r7, #0]
90001f70:	3315      	adds	r3, #21
90001f72:	781b      	ldrb	r3, [r3, #0]
90001f74:	061b      	lsls	r3, r3, #24
90001f76:	4413      	add	r3, r2
90001f78:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
90001f7a:	683b      	ldr	r3, [r7, #0]
90001f7c:	3316      	adds	r3, #22
90001f7e:	781b      	ldrb	r3, [r3, #0]
90001f80:	461a      	mov	r2, r3
90001f82:	683b      	ldr	r3, [r7, #0]
90001f84:	3317      	adds	r3, #23
90001f86:	781b      	ldrb	r3, [r3, #0]
90001f88:	021b      	lsls	r3, r3, #8
90001f8a:	441a      	add	r2, r3
90001f8c:	683b      	ldr	r3, [r7, #0]
90001f8e:	3318      	adds	r3, #24
90001f90:	781b      	ldrb	r3, [r3, #0]
90001f92:	041b      	lsls	r3, r3, #16
90001f94:	441a      	add	r2, r3
90001f96:	683b      	ldr	r3, [r7, #0]
90001f98:	3319      	adds	r3, #25
90001f9a:	781b      	ldrb	r3, [r3, #0]
90001f9c:	061b      	lsls	r3, r3, #24
90001f9e:	4413      	add	r3, r2
90001fa0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90001fa2:	683b      	ldr	r3, [r7, #0]
90001fa4:	331c      	adds	r3, #28
90001fa6:	781b      	ldrb	r3, [r3, #0]
90001fa8:	461a      	mov	r2, r3
90001faa:	683b      	ldr	r3, [r7, #0]
90001fac:	331d      	adds	r3, #29
90001fae:	781b      	ldrb	r3, [r3, #0]
90001fb0:	021b      	lsls	r3, r3, #8
90001fb2:	4413      	add	r3, r2
90001fb4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
90001fb6:	4a37      	ldr	r2, [pc, #220]	@ (90002094 <BSP_LCD_DrawBitmap+0x17c>)
90001fb8:	68fb      	ldr	r3, [r7, #12]
90001fba:	015b      	lsls	r3, r3, #5
90001fbc:	4413      	add	r3, r2
90001fbe:	3308      	adds	r3, #8
90001fc0:	681b      	ldr	r3, [r3, #0]
90001fc2:	4a35      	ldr	r2, [pc, #212]	@ (90002098 <BSP_LCD_DrawBitmap+0x180>)
90001fc4:	2134      	movs	r1, #52	@ 0x34
90001fc6:	fb01 f303 	mul.w	r3, r1, r3
90001fca:	4413      	add	r3, r2
90001fcc:	335c      	adds	r3, #92	@ 0x5c
90001fce:	681a      	ldr	r2, [r3, #0]
90001fd0:	4930      	ldr	r1, [pc, #192]	@ (90002094 <BSP_LCD_DrawBitmap+0x17c>)
90001fd2:	68fb      	ldr	r3, [r7, #12]
90001fd4:	015b      	lsls	r3, r3, #5
90001fd6:	440b      	add	r3, r1
90001fd8:	681b      	ldr	r3, [r3, #0]
90001fda:	6879      	ldr	r1, [r7, #4]
90001fdc:	fb03 f101 	mul.w	r1, r3, r1
90001fe0:	68bb      	ldr	r3, [r7, #8]
90001fe2:	440b      	add	r3, r1
90001fe4:	482b      	ldr	r0, [pc, #172]	@ (90002094 <BSP_LCD_DrawBitmap+0x17c>)
90001fe6:	68f9      	ldr	r1, [r7, #12]
90001fe8:	0149      	lsls	r1, r1, #5
90001fea:	4401      	add	r1, r0
90001fec:	3110      	adds	r1, #16
90001fee:	6809      	ldr	r1, [r1, #0]
90001ff0:	fb01 f303 	mul.w	r3, r1, r3
90001ff4:	4413      	add	r3, r2
90001ff6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90001ff8:	693b      	ldr	r3, [r7, #16]
90001ffa:	3b20      	subs	r3, #32
90001ffc:	2b07      	cmp	r3, #7
90001ffe:	d802      	bhi.n	90002006 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002000:	2300      	movs	r3, #0
90002002:	627b      	str	r3, [r7, #36]	@ 0x24
90002004:	e008      	b.n	90002018 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
90002006:	693b      	ldr	r3, [r7, #16]
90002008:	3b10      	subs	r3, #16
9000200a:	2b07      	cmp	r3, #7
9000200c:	d802      	bhi.n	90002014 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
9000200e:	2302      	movs	r3, #2
90002010:	627b      	str	r3, [r7, #36]	@ 0x24
90002012:	e001      	b.n	90002018 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
90002014:	2301      	movs	r3, #1
90002016:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002018:	697b      	ldr	r3, [r7, #20]
9000201a:	3b01      	subs	r3, #1
9000201c:	69ba      	ldr	r2, [r7, #24]
9000201e:	fb02 f303 	mul.w	r3, r2, r3
90002022:	693a      	ldr	r2, [r7, #16]
90002024:	08d2      	lsrs	r2, r2, #3
90002026:	fb03 f202 	mul.w	r2, r3, r2
9000202a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000202c:	4413      	add	r3, r2
9000202e:	683a      	ldr	r2, [r7, #0]
90002030:	4413      	add	r3, r2
90002032:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002034:	2300      	movs	r3, #0
90002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002038:	e023      	b.n	90002082 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
9000203a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000203e:	9300      	str	r3, [sp, #0]
90002040:	69bb      	ldr	r3, [r7, #24]
90002042:	6a39      	ldr	r1, [r7, #32]
90002044:	68f8      	ldr	r0, [r7, #12]
90002046:	f000 fa77 	bl	90002538 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000204a:	4a12      	ldr	r2, [pc, #72]	@ (90002094 <BSP_LCD_DrawBitmap+0x17c>)
9000204c:	68fb      	ldr	r3, [r7, #12]
9000204e:	015b      	lsls	r3, r3, #5
90002050:	4413      	add	r3, r2
90002052:	681b      	ldr	r3, [r3, #0]
90002054:	490f      	ldr	r1, [pc, #60]	@ (90002094 <BSP_LCD_DrawBitmap+0x17c>)
90002056:	68fa      	ldr	r2, [r7, #12]
90002058:	0152      	lsls	r2, r2, #5
9000205a:	440a      	add	r2, r1
9000205c:	3210      	adds	r2, #16
9000205e:	6812      	ldr	r2, [r2, #0]
90002060:	fb02 f303 	mul.w	r3, r2, r3
90002064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002066:	4413      	add	r3, r2
90002068:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
9000206a:	693b      	ldr	r3, [r7, #16]
9000206c:	08db      	lsrs	r3, r3, #3
9000206e:	69ba      	ldr	r2, [r7, #24]
90002070:	fb02 f303 	mul.w	r3, r2, r3
90002074:	425b      	negs	r3, r3
90002076:	6a3a      	ldr	r2, [r7, #32]
90002078:	4413      	add	r3, r2
9000207a:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
9000207c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000207e:	3301      	adds	r3, #1
90002080:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002084:	697b      	ldr	r3, [r7, #20]
90002086:	429a      	cmp	r2, r3
90002088:	d3d7      	bcc.n	9000203a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
9000208a:	69fb      	ldr	r3, [r7, #28]
}
9000208c:	4618      	mov	r0, r3
9000208e:	3730      	adds	r7, #48	@ 0x30
90002090:	46bd      	mov	sp, r7
90002092:	bd80      	pop	{r7, pc}
90002094:	200010e0 	.word	0x200010e0
90002098:	20001038 	.word	0x20001038

9000209c <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000209c:	b580      	push	{r7, lr}
9000209e:	b088      	sub	sp, #32
900020a0:	af00      	add	r7, sp, #0
900020a2:	60f8      	str	r0, [r7, #12]
900020a4:	60b9      	str	r1, [r7, #8]
900020a6:	607a      	str	r2, [r7, #4]
900020a8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
900020aa:	683b      	ldr	r3, [r7, #0]
900020ac:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
900020ae:	2300      	movs	r3, #0
900020b0:	61fb      	str	r3, [r7, #28]
900020b2:	e032      	b.n	9000211a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
900020b4:	2300      	movs	r3, #0
900020b6:	617b      	str	r3, [r7, #20]
900020b8:	e028      	b.n	9000210c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
900020ba:	69bb      	ldr	r3, [r7, #24]
900020bc:	781b      	ldrb	r3, [r3, #0]
900020be:	461a      	mov	r2, r3
900020c0:	69bb      	ldr	r3, [r7, #24]
900020c2:	3301      	adds	r3, #1
900020c4:	781b      	ldrb	r3, [r3, #0]
900020c6:	021b      	lsls	r3, r3, #8
900020c8:	431a      	orrs	r2, r3
900020ca:	69bb      	ldr	r3, [r7, #24]
900020cc:	3302      	adds	r3, #2
900020ce:	781b      	ldrb	r3, [r3, #0]
900020d0:	041b      	lsls	r3, r3, #16
900020d2:	431a      	orrs	r2, r3
900020d4:	69bb      	ldr	r3, [r7, #24]
900020d6:	3303      	adds	r3, #3
900020d8:	781b      	ldrb	r3, [r3, #0]
900020da:	061b      	lsls	r3, r3, #24
900020dc:	4313      	orrs	r3, r2
900020de:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900020e0:	68ba      	ldr	r2, [r7, #8]
900020e2:	697b      	ldr	r3, [r7, #20]
900020e4:	18d1      	adds	r1, r2, r3
900020e6:	687a      	ldr	r2, [r7, #4]
900020e8:	69fb      	ldr	r3, [r7, #28]
900020ea:	441a      	add	r2, r3
900020ec:	693b      	ldr	r3, [r7, #16]
900020ee:	68f8      	ldr	r0, [r7, #12]
900020f0:	f000 f95e 	bl	900023b0 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900020f4:	4a0d      	ldr	r2, [pc, #52]	@ (9000212c <BSP_LCD_FillRGBRect+0x90>)
900020f6:	68fb      	ldr	r3, [r7, #12]
900020f8:	015b      	lsls	r3, r3, #5
900020fa:	4413      	add	r3, r2
900020fc:	3310      	adds	r3, #16
900020fe:	681b      	ldr	r3, [r3, #0]
90002100:	69ba      	ldr	r2, [r7, #24]
90002102:	4413      	add	r3, r2
90002104:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
90002106:	697b      	ldr	r3, [r7, #20]
90002108:	3301      	adds	r3, #1
9000210a:	617b      	str	r3, [r7, #20]
9000210c:	697a      	ldr	r2, [r7, #20]
9000210e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002110:	429a      	cmp	r2, r3
90002112:	d3d2      	bcc.n	900020ba <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90002114:	69fb      	ldr	r3, [r7, #28]
90002116:	3301      	adds	r3, #1
90002118:	61fb      	str	r3, [r7, #28]
9000211a:	69fa      	ldr	r2, [r7, #28]
9000211c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000211e:	429a      	cmp	r2, r3
90002120:	d3c8      	bcc.n	900020b4 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90002122:	2300      	movs	r3, #0
}
90002124:	4618      	mov	r0, r3
90002126:	3720      	adds	r7, #32
90002128:	46bd      	mov	sp, r7
9000212a:	bd80      	pop	{r7, pc}
9000212c:	200010e0 	.word	0x200010e0

90002130 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002130:	b580      	push	{r7, lr}
90002132:	b088      	sub	sp, #32
90002134:	af02      	add	r7, sp, #8
90002136:	60f8      	str	r0, [r7, #12]
90002138:	60b9      	str	r1, [r7, #8]
9000213a:	607a      	str	r2, [r7, #4]
9000213c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000213e:	4a21      	ldr	r2, [pc, #132]	@ (900021c4 <BSP_LCD_DrawHLine+0x94>)
90002140:	68fb      	ldr	r3, [r7, #12]
90002142:	015b      	lsls	r3, r3, #5
90002144:	4413      	add	r3, r2
90002146:	3308      	adds	r3, #8
90002148:	681b      	ldr	r3, [r3, #0]
9000214a:	4a1f      	ldr	r2, [pc, #124]	@ (900021c8 <BSP_LCD_DrawHLine+0x98>)
9000214c:	2134      	movs	r1, #52	@ 0x34
9000214e:	fb01 f303 	mul.w	r3, r1, r3
90002152:	4413      	add	r3, r2
90002154:	335c      	adds	r3, #92	@ 0x5c
90002156:	681a      	ldr	r2, [r3, #0]
90002158:	491a      	ldr	r1, [pc, #104]	@ (900021c4 <BSP_LCD_DrawHLine+0x94>)
9000215a:	68fb      	ldr	r3, [r7, #12]
9000215c:	015b      	lsls	r3, r3, #5
9000215e:	440b      	add	r3, r1
90002160:	3310      	adds	r3, #16
90002162:	681b      	ldr	r3, [r3, #0]
90002164:	4817      	ldr	r0, [pc, #92]	@ (900021c4 <BSP_LCD_DrawHLine+0x94>)
90002166:	68f9      	ldr	r1, [r7, #12]
90002168:	0149      	lsls	r1, r1, #5
9000216a:	4401      	add	r1, r0
9000216c:	6809      	ldr	r1, [r1, #0]
9000216e:	6878      	ldr	r0, [r7, #4]
90002170:	fb01 f000 	mul.w	r0, r1, r0
90002174:	68b9      	ldr	r1, [r7, #8]
90002176:	4401      	add	r1, r0
90002178:	fb01 f303 	mul.w	r3, r1, r3
9000217c:	4413      	add	r3, r2
9000217e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002180:	68ba      	ldr	r2, [r7, #8]
90002182:	683b      	ldr	r3, [r7, #0]
90002184:	441a      	add	r2, r3
90002186:	490f      	ldr	r1, [pc, #60]	@ (900021c4 <BSP_LCD_DrawHLine+0x94>)
90002188:	68fb      	ldr	r3, [r7, #12]
9000218a:	015b      	lsls	r3, r3, #5
9000218c:	440b      	add	r3, r1
9000218e:	681b      	ldr	r3, [r3, #0]
90002190:	429a      	cmp	r2, r3
90002192:	d907      	bls.n	900021a4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002194:	4a0b      	ldr	r2, [pc, #44]	@ (900021c4 <BSP_LCD_DrawHLine+0x94>)
90002196:	68fb      	ldr	r3, [r7, #12]
90002198:	015b      	lsls	r3, r3, #5
9000219a:	4413      	add	r3, r2
9000219c:	681a      	ldr	r2, [r3, #0]
9000219e:	68bb      	ldr	r3, [r7, #8]
900021a0:	1ad3      	subs	r3, r2, r3
900021a2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
900021a4:	6979      	ldr	r1, [r7, #20]
900021a6:	6a3b      	ldr	r3, [r7, #32]
900021a8:	9301      	str	r3, [sp, #4]
900021aa:	2300      	movs	r3, #0
900021ac:	9300      	str	r3, [sp, #0]
900021ae:	2301      	movs	r3, #1
900021b0:	683a      	ldr	r2, [r7, #0]
900021b2:	68f8      	ldr	r0, [r7, #12]
900021b4:	f000 f956 	bl	90002464 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900021b8:	2300      	movs	r3, #0
}
900021ba:	4618      	mov	r0, r3
900021bc:	3718      	adds	r7, #24
900021be:	46bd      	mov	sp, r7
900021c0:	bd80      	pop	{r7, pc}
900021c2:	bf00      	nop
900021c4:	200010e0 	.word	0x200010e0
900021c8:	20001038 	.word	0x20001038

900021cc <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900021cc:	b580      	push	{r7, lr}
900021ce:	b088      	sub	sp, #32
900021d0:	af02      	add	r7, sp, #8
900021d2:	60f8      	str	r0, [r7, #12]
900021d4:	60b9      	str	r1, [r7, #8]
900021d6:	607a      	str	r2, [r7, #4]
900021d8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900021da:	4a24      	ldr	r2, [pc, #144]	@ (9000226c <BSP_LCD_DrawVLine+0xa0>)
900021dc:	68fb      	ldr	r3, [r7, #12]
900021de:	015b      	lsls	r3, r3, #5
900021e0:	4413      	add	r3, r2
900021e2:	3308      	adds	r3, #8
900021e4:	681b      	ldr	r3, [r3, #0]
900021e6:	4a22      	ldr	r2, [pc, #136]	@ (90002270 <BSP_LCD_DrawVLine+0xa4>)
900021e8:	2134      	movs	r1, #52	@ 0x34
900021ea:	fb01 f303 	mul.w	r3, r1, r3
900021ee:	4413      	add	r3, r2
900021f0:	335c      	adds	r3, #92	@ 0x5c
900021f2:	681a      	ldr	r2, [r3, #0]
900021f4:	491d      	ldr	r1, [pc, #116]	@ (9000226c <BSP_LCD_DrawVLine+0xa0>)
900021f6:	68fb      	ldr	r3, [r7, #12]
900021f8:	015b      	lsls	r3, r3, #5
900021fa:	440b      	add	r3, r1
900021fc:	3310      	adds	r3, #16
900021fe:	681b      	ldr	r3, [r3, #0]
90002200:	481a      	ldr	r0, [pc, #104]	@ (9000226c <BSP_LCD_DrawVLine+0xa0>)
90002202:	68f9      	ldr	r1, [r7, #12]
90002204:	0149      	lsls	r1, r1, #5
90002206:	4401      	add	r1, r0
90002208:	6809      	ldr	r1, [r1, #0]
9000220a:	6878      	ldr	r0, [r7, #4]
9000220c:	fb01 f000 	mul.w	r0, r1, r0
90002210:	68b9      	ldr	r1, [r7, #8]
90002212:	4401      	add	r1, r0
90002214:	fb01 f303 	mul.w	r3, r1, r3
90002218:	4413      	add	r3, r2
9000221a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
9000221c:	687a      	ldr	r2, [r7, #4]
9000221e:	683b      	ldr	r3, [r7, #0]
90002220:	441a      	add	r2, r3
90002222:	4912      	ldr	r1, [pc, #72]	@ (9000226c <BSP_LCD_DrawVLine+0xa0>)
90002224:	68fb      	ldr	r3, [r7, #12]
90002226:	015b      	lsls	r3, r3, #5
90002228:	440b      	add	r3, r1
9000222a:	3304      	adds	r3, #4
9000222c:	681b      	ldr	r3, [r3, #0]
9000222e:	429a      	cmp	r2, r3
90002230:	d908      	bls.n	90002244 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002232:	4a0e      	ldr	r2, [pc, #56]	@ (9000226c <BSP_LCD_DrawVLine+0xa0>)
90002234:	68fb      	ldr	r3, [r7, #12]
90002236:	015b      	lsls	r3, r3, #5
90002238:	4413      	add	r3, r2
9000223a:	3304      	adds	r3, #4
9000223c:	681a      	ldr	r2, [r3, #0]
9000223e:	687b      	ldr	r3, [r7, #4]
90002240:	1ad3      	subs	r3, r2, r3
90002242:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002244:	6979      	ldr	r1, [r7, #20]
90002246:	4a09      	ldr	r2, [pc, #36]	@ (9000226c <BSP_LCD_DrawVLine+0xa0>)
90002248:	68fb      	ldr	r3, [r7, #12]
9000224a:	015b      	lsls	r3, r3, #5
9000224c:	4413      	add	r3, r2
9000224e:	681b      	ldr	r3, [r3, #0]
90002250:	3b01      	subs	r3, #1
90002252:	6a3a      	ldr	r2, [r7, #32]
90002254:	9201      	str	r2, [sp, #4]
90002256:	9300      	str	r3, [sp, #0]
90002258:	683b      	ldr	r3, [r7, #0]
9000225a:	2201      	movs	r2, #1
9000225c:	68f8      	ldr	r0, [r7, #12]
9000225e:	f000 f901 	bl	90002464 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002262:	2300      	movs	r3, #0
}
90002264:	4618      	mov	r0, r3
90002266:	3718      	adds	r7, #24
90002268:	46bd      	mov	sp, r7
9000226a:	bd80      	pop	{r7, pc}
9000226c:	200010e0 	.word	0x200010e0
90002270:	20001038 	.word	0x20001038

90002274 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002274:	b580      	push	{r7, lr}
90002276:	b088      	sub	sp, #32
90002278:	af02      	add	r7, sp, #8
9000227a:	60f8      	str	r0, [r7, #12]
9000227c:	60b9      	str	r1, [r7, #8]
9000227e:	607a      	str	r2, [r7, #4]
90002280:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002282:	4a1b      	ldr	r2, [pc, #108]	@ (900022f0 <BSP_LCD_FillRect+0x7c>)
90002284:	68fb      	ldr	r3, [r7, #12]
90002286:	015b      	lsls	r3, r3, #5
90002288:	4413      	add	r3, r2
9000228a:	3308      	adds	r3, #8
9000228c:	681b      	ldr	r3, [r3, #0]
9000228e:	4a19      	ldr	r2, [pc, #100]	@ (900022f4 <BSP_LCD_FillRect+0x80>)
90002290:	2134      	movs	r1, #52	@ 0x34
90002292:	fb01 f303 	mul.w	r3, r1, r3
90002296:	4413      	add	r3, r2
90002298:	335c      	adds	r3, #92	@ 0x5c
9000229a:	681a      	ldr	r2, [r3, #0]
9000229c:	4914      	ldr	r1, [pc, #80]	@ (900022f0 <BSP_LCD_FillRect+0x7c>)
9000229e:	68fb      	ldr	r3, [r7, #12]
900022a0:	015b      	lsls	r3, r3, #5
900022a2:	440b      	add	r3, r1
900022a4:	3310      	adds	r3, #16
900022a6:	681b      	ldr	r3, [r3, #0]
900022a8:	4811      	ldr	r0, [pc, #68]	@ (900022f0 <BSP_LCD_FillRect+0x7c>)
900022aa:	68f9      	ldr	r1, [r7, #12]
900022ac:	0149      	lsls	r1, r1, #5
900022ae:	4401      	add	r1, r0
900022b0:	6809      	ldr	r1, [r1, #0]
900022b2:	6878      	ldr	r0, [r7, #4]
900022b4:	fb01 f000 	mul.w	r0, r1, r0
900022b8:	68b9      	ldr	r1, [r7, #8]
900022ba:	4401      	add	r1, r0
900022bc:	fb01 f303 	mul.w	r3, r1, r3
900022c0:	4413      	add	r3, r2
900022c2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
900022c4:	6979      	ldr	r1, [r7, #20]
900022c6:	4a0a      	ldr	r2, [pc, #40]	@ (900022f0 <BSP_LCD_FillRect+0x7c>)
900022c8:	68fb      	ldr	r3, [r7, #12]
900022ca:	015b      	lsls	r3, r3, #5
900022cc:	4413      	add	r3, r2
900022ce:	681a      	ldr	r2, [r3, #0]
900022d0:	683b      	ldr	r3, [r7, #0]
900022d2:	1ad3      	subs	r3, r2, r3
900022d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900022d6:	9201      	str	r2, [sp, #4]
900022d8:	9300      	str	r3, [sp, #0]
900022da:	6a3b      	ldr	r3, [r7, #32]
900022dc:	683a      	ldr	r2, [r7, #0]
900022de:	68f8      	ldr	r0, [r7, #12]
900022e0:	f000 f8c0 	bl	90002464 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900022e4:	2300      	movs	r3, #0
}
900022e6:	4618      	mov	r0, r3
900022e8:	3718      	adds	r7, #24
900022ea:	46bd      	mov	sp, r7
900022ec:	bd80      	pop	{r7, pc}
900022ee:	bf00      	nop
900022f0:	200010e0 	.word	0x200010e0
900022f4:	20001038 	.word	0x20001038

900022f8 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900022f8:	b480      	push	{r7}
900022fa:	b085      	sub	sp, #20
900022fc:	af00      	add	r7, sp, #0
900022fe:	60f8      	str	r0, [r7, #12]
90002300:	60b9      	str	r1, [r7, #8]
90002302:	607a      	str	r2, [r7, #4]
90002304:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002306:	4a28      	ldr	r2, [pc, #160]	@ (900023a8 <BSP_LCD_ReadPixel+0xb0>)
90002308:	68fb      	ldr	r3, [r7, #12]
9000230a:	015b      	lsls	r3, r3, #5
9000230c:	4413      	add	r3, r2
9000230e:	3308      	adds	r3, #8
90002310:	681b      	ldr	r3, [r3, #0]
90002312:	4a26      	ldr	r2, [pc, #152]	@ (900023ac <BSP_LCD_ReadPixel+0xb4>)
90002314:	2134      	movs	r1, #52	@ 0x34
90002316:	fb01 f303 	mul.w	r3, r1, r3
9000231a:	4413      	add	r3, r2
9000231c:	3348      	adds	r3, #72	@ 0x48
9000231e:	681b      	ldr	r3, [r3, #0]
90002320:	2b00      	cmp	r3, #0
90002322:	d11c      	bne.n	9000235e <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002324:	4a20      	ldr	r2, [pc, #128]	@ (900023a8 <BSP_LCD_ReadPixel+0xb0>)
90002326:	68fb      	ldr	r3, [r7, #12]
90002328:	015b      	lsls	r3, r3, #5
9000232a:	4413      	add	r3, r2
9000232c:	3308      	adds	r3, #8
9000232e:	681b      	ldr	r3, [r3, #0]
90002330:	4a1e      	ldr	r2, [pc, #120]	@ (900023ac <BSP_LCD_ReadPixel+0xb4>)
90002332:	2134      	movs	r1, #52	@ 0x34
90002334:	fb01 f303 	mul.w	r3, r1, r3
90002338:	4413      	add	r3, r2
9000233a:	335c      	adds	r3, #92	@ 0x5c
9000233c:	681a      	ldr	r2, [r3, #0]
9000233e:	491a      	ldr	r1, [pc, #104]	@ (900023a8 <BSP_LCD_ReadPixel+0xb0>)
90002340:	68fb      	ldr	r3, [r7, #12]
90002342:	015b      	lsls	r3, r3, #5
90002344:	440b      	add	r3, r1
90002346:	681b      	ldr	r3, [r3, #0]
90002348:	6879      	ldr	r1, [r7, #4]
9000234a:	fb03 f101 	mul.w	r1, r3, r1
9000234e:	68bb      	ldr	r3, [r7, #8]
90002350:	440b      	add	r3, r1
90002352:	009b      	lsls	r3, r3, #2
90002354:	4413      	add	r3, r2
90002356:	681a      	ldr	r2, [r3, #0]
90002358:	683b      	ldr	r3, [r7, #0]
9000235a:	601a      	str	r2, [r3, #0]
9000235c:	e01d      	b.n	9000239a <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
9000235e:	4a12      	ldr	r2, [pc, #72]	@ (900023a8 <BSP_LCD_ReadPixel+0xb0>)
90002360:	68fb      	ldr	r3, [r7, #12]
90002362:	015b      	lsls	r3, r3, #5
90002364:	4413      	add	r3, r2
90002366:	3308      	adds	r3, #8
90002368:	681b      	ldr	r3, [r3, #0]
9000236a:	4a10      	ldr	r2, [pc, #64]	@ (900023ac <BSP_LCD_ReadPixel+0xb4>)
9000236c:	2134      	movs	r1, #52	@ 0x34
9000236e:	fb01 f303 	mul.w	r3, r1, r3
90002372:	4413      	add	r3, r2
90002374:	335c      	adds	r3, #92	@ 0x5c
90002376:	681a      	ldr	r2, [r3, #0]
90002378:	490b      	ldr	r1, [pc, #44]	@ (900023a8 <BSP_LCD_ReadPixel+0xb0>)
9000237a:	68fb      	ldr	r3, [r7, #12]
9000237c:	015b      	lsls	r3, r3, #5
9000237e:	440b      	add	r3, r1
90002380:	681b      	ldr	r3, [r3, #0]
90002382:	6879      	ldr	r1, [r7, #4]
90002384:	fb03 f101 	mul.w	r1, r3, r1
90002388:	68bb      	ldr	r3, [r7, #8]
9000238a:	440b      	add	r3, r1
9000238c:	005b      	lsls	r3, r3, #1
9000238e:	4413      	add	r3, r2
90002390:	881b      	ldrh	r3, [r3, #0]
90002392:	b29b      	uxth	r3, r3
90002394:	461a      	mov	r2, r3
90002396:	683b      	ldr	r3, [r7, #0]
90002398:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000239a:	2300      	movs	r3, #0
}
9000239c:	4618      	mov	r0, r3
9000239e:	3714      	adds	r7, #20
900023a0:	46bd      	mov	sp, r7
900023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900023a6:	4770      	bx	lr
900023a8:	200010e0 	.word	0x200010e0
900023ac:	20001038 	.word	0x20001038

900023b0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
900023b0:	b480      	push	{r7}
900023b2:	b085      	sub	sp, #20
900023b4:	af00      	add	r7, sp, #0
900023b6:	60f8      	str	r0, [r7, #12]
900023b8:	60b9      	str	r1, [r7, #8]
900023ba:	607a      	str	r2, [r7, #4]
900023bc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900023be:	4a27      	ldr	r2, [pc, #156]	@ (9000245c <BSP_LCD_WritePixel+0xac>)
900023c0:	68fb      	ldr	r3, [r7, #12]
900023c2:	015b      	lsls	r3, r3, #5
900023c4:	4413      	add	r3, r2
900023c6:	3308      	adds	r3, #8
900023c8:	681b      	ldr	r3, [r3, #0]
900023ca:	4a25      	ldr	r2, [pc, #148]	@ (90002460 <BSP_LCD_WritePixel+0xb0>)
900023cc:	2134      	movs	r1, #52	@ 0x34
900023ce:	fb01 f303 	mul.w	r3, r1, r3
900023d2:	4413      	add	r3, r2
900023d4:	3348      	adds	r3, #72	@ 0x48
900023d6:	681b      	ldr	r3, [r3, #0]
900023d8:	2b00      	cmp	r3, #0
900023da:	d11c      	bne.n	90002416 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900023dc:	4a1f      	ldr	r2, [pc, #124]	@ (9000245c <BSP_LCD_WritePixel+0xac>)
900023de:	68fb      	ldr	r3, [r7, #12]
900023e0:	015b      	lsls	r3, r3, #5
900023e2:	4413      	add	r3, r2
900023e4:	3308      	adds	r3, #8
900023e6:	681b      	ldr	r3, [r3, #0]
900023e8:	4a1d      	ldr	r2, [pc, #116]	@ (90002460 <BSP_LCD_WritePixel+0xb0>)
900023ea:	2134      	movs	r1, #52	@ 0x34
900023ec:	fb01 f303 	mul.w	r3, r1, r3
900023f0:	4413      	add	r3, r2
900023f2:	335c      	adds	r3, #92	@ 0x5c
900023f4:	681a      	ldr	r2, [r3, #0]
900023f6:	4919      	ldr	r1, [pc, #100]	@ (9000245c <BSP_LCD_WritePixel+0xac>)
900023f8:	68fb      	ldr	r3, [r7, #12]
900023fa:	015b      	lsls	r3, r3, #5
900023fc:	440b      	add	r3, r1
900023fe:	681b      	ldr	r3, [r3, #0]
90002400:	6879      	ldr	r1, [r7, #4]
90002402:	fb03 f101 	mul.w	r1, r3, r1
90002406:	68bb      	ldr	r3, [r7, #8]
90002408:	440b      	add	r3, r1
9000240a:	009b      	lsls	r3, r3, #2
9000240c:	4413      	add	r3, r2
9000240e:	461a      	mov	r2, r3
90002410:	683b      	ldr	r3, [r7, #0]
90002412:	6013      	str	r3, [r2, #0]
90002414:	e01b      	b.n	9000244e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90002416:	4a11      	ldr	r2, [pc, #68]	@ (9000245c <BSP_LCD_WritePixel+0xac>)
90002418:	68fb      	ldr	r3, [r7, #12]
9000241a:	015b      	lsls	r3, r3, #5
9000241c:	4413      	add	r3, r2
9000241e:	3308      	adds	r3, #8
90002420:	681b      	ldr	r3, [r3, #0]
90002422:	4a0f      	ldr	r2, [pc, #60]	@ (90002460 <BSP_LCD_WritePixel+0xb0>)
90002424:	2134      	movs	r1, #52	@ 0x34
90002426:	fb01 f303 	mul.w	r3, r1, r3
9000242a:	4413      	add	r3, r2
9000242c:	335c      	adds	r3, #92	@ 0x5c
9000242e:	681a      	ldr	r2, [r3, #0]
90002430:	490a      	ldr	r1, [pc, #40]	@ (9000245c <BSP_LCD_WritePixel+0xac>)
90002432:	68fb      	ldr	r3, [r7, #12]
90002434:	015b      	lsls	r3, r3, #5
90002436:	440b      	add	r3, r1
90002438:	681b      	ldr	r3, [r3, #0]
9000243a:	6879      	ldr	r1, [r7, #4]
9000243c:	fb03 f101 	mul.w	r1, r3, r1
90002440:	68bb      	ldr	r3, [r7, #8]
90002442:	440b      	add	r3, r1
90002444:	005b      	lsls	r3, r3, #1
90002446:	4413      	add	r3, r2
90002448:	683a      	ldr	r2, [r7, #0]
9000244a:	b292      	uxth	r2, r2
9000244c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000244e:	2300      	movs	r3, #0
}
90002450:	4618      	mov	r0, r3
90002452:	3714      	adds	r7, #20
90002454:	46bd      	mov	sp, r7
90002456:	f85d 7b04 	ldr.w	r7, [sp], #4
9000245a:	4770      	bx	lr
9000245c:	200010e0 	.word	0x200010e0
90002460:	20001038 	.word	0x20001038

90002464 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002464:	b580      	push	{r7, lr}
90002466:	b088      	sub	sp, #32
90002468:	af02      	add	r7, sp, #8
9000246a:	60f8      	str	r0, [r7, #12]
9000246c:	60b9      	str	r1, [r7, #8]
9000246e:	607a      	str	r2, [r7, #4]
90002470:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002474:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002476:	4a2d      	ldr	r2, [pc, #180]	@ (9000252c <LL_FillBuffer+0xc8>)
90002478:	68fb      	ldr	r3, [r7, #12]
9000247a:	015b      	lsls	r3, r3, #5
9000247c:	4413      	add	r3, r2
9000247e:	330c      	adds	r3, #12
90002480:	681b      	ldr	r3, [r3, #0]
90002482:	2b02      	cmp	r3, #2
90002484:	d129      	bne.n	900024da <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002486:	2302      	movs	r3, #2
90002488:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
9000248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000248c:	0adb      	lsrs	r3, r3, #11
9000248e:	f003 021f 	and.w	r2, r3, #31
90002492:	4613      	mov	r3, r2
90002494:	011b      	lsls	r3, r3, #4
90002496:	4413      	add	r3, r2
90002498:	015a      	lsls	r2, r3, #5
9000249a:	1ad3      	subs	r3, r2, r3
9000249c:	3317      	adds	r3, #23
9000249e:	099b      	lsrs	r3, r3, #6
900024a0:	0419      	lsls	r1, r3, #16
900024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900024a4:	095b      	lsrs	r3, r3, #5
900024a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
900024aa:	4613      	mov	r3, r2
900024ac:	01db      	lsls	r3, r3, #7
900024ae:	4413      	add	r3, r2
900024b0:	005b      	lsls	r3, r3, #1
900024b2:	4413      	add	r3, r2
900024b4:	3321      	adds	r3, #33	@ 0x21
900024b6:	099b      	lsrs	r3, r3, #6
900024b8:	021b      	lsls	r3, r3, #8
900024ba:	4319      	orrs	r1, r3
900024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900024be:	f003 021f 	and.w	r2, r3, #31
900024c2:	4613      	mov	r3, r2
900024c4:	011b      	lsls	r3, r3, #4
900024c6:	4413      	add	r3, r2
900024c8:	015a      	lsls	r2, r3, #5
900024ca:	1ad3      	subs	r3, r2, r3
900024cc:	3317      	adds	r3, #23
900024ce:	099b      	lsrs	r3, r3, #6
900024d0:	430b      	orrs	r3, r1
900024d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
900024d6:	613b      	str	r3, [r7, #16]
    break;
900024d8:	e002      	b.n	900024e0 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900024da:	2300      	movs	r3, #0
900024dc:	617b      	str	r3, [r7, #20]
    break;
900024de:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900024e0:	4b13      	ldr	r3, [pc, #76]	@ (90002530 <LL_FillBuffer+0xcc>)
900024e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
900024e6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900024e8:	4a11      	ldr	r2, [pc, #68]	@ (90002530 <LL_FillBuffer+0xcc>)
900024ea:	697b      	ldr	r3, [r7, #20]
900024ec:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900024ee:	4a10      	ldr	r2, [pc, #64]	@ (90002530 <LL_FillBuffer+0xcc>)
900024f0:	6a3b      	ldr	r3, [r7, #32]
900024f2:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900024f4:	4b0e      	ldr	r3, [pc, #56]	@ (90002530 <LL_FillBuffer+0xcc>)
900024f6:	4a0f      	ldr	r2, [pc, #60]	@ (90002534 <LL_FillBuffer+0xd0>)
900024f8:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900024fa:	480d      	ldr	r0, [pc, #52]	@ (90002530 <LL_FillBuffer+0xcc>)
900024fc:	f000 ff36 	bl	9000336c <HAL_DMA2D_Init>
90002500:	4603      	mov	r3, r0
90002502:	2b00      	cmp	r3, #0
90002504:	d10e      	bne.n	90002524 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90002506:	68ba      	ldr	r2, [r7, #8]
90002508:	683b      	ldr	r3, [r7, #0]
9000250a:	9300      	str	r3, [sp, #0]
9000250c:	687b      	ldr	r3, [r7, #4]
9000250e:	6939      	ldr	r1, [r7, #16]
90002510:	4807      	ldr	r0, [pc, #28]	@ (90002530 <LL_FillBuffer+0xcc>)
90002512:	f000 ff99 	bl	90003448 <HAL_DMA2D_Start>
90002516:	4603      	mov	r3, r0
90002518:	2b00      	cmp	r3, #0
9000251a:	d103      	bne.n	90002524 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
9000251c:	2132      	movs	r1, #50	@ 0x32
9000251e:	4804      	ldr	r0, [pc, #16]	@ (90002530 <LL_FillBuffer+0xcc>)
90002520:	f000 ffbd 	bl	9000349e <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002524:	bf00      	nop
90002526:	3718      	adds	r7, #24
90002528:	46bd      	mov	sp, r7
9000252a:	bd80      	pop	{r7, pc}
9000252c:	200010e0 	.word	0x200010e0
90002530:	20000fd0 	.word	0x20000fd0
90002534:	52001000 	.word	0x52001000

90002538 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002538:	b580      	push	{r7, lr}
9000253a:	b088      	sub	sp, #32
9000253c:	af02      	add	r7, sp, #8
9000253e:	60f8      	str	r0, [r7, #12]
90002540:	60b9      	str	r1, [r7, #8]
90002542:	607a      	str	r2, [r7, #4]
90002544:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002546:	4a23      	ldr	r2, [pc, #140]	@ (900025d4 <LL_ConvertLineToRGB+0x9c>)
90002548:	68fb      	ldr	r3, [r7, #12]
9000254a:	015b      	lsls	r3, r3, #5
9000254c:	4413      	add	r3, r2
9000254e:	330c      	adds	r3, #12
90002550:	681b      	ldr	r3, [r3, #0]
90002552:	2b02      	cmp	r3, #2
90002554:	d102      	bne.n	9000255c <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002556:	2302      	movs	r3, #2
90002558:	617b      	str	r3, [r7, #20]
    break;
9000255a:	e002      	b.n	90002562 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
9000255c:	2300      	movs	r3, #0
9000255e:	617b      	str	r3, [r7, #20]
    break;
90002560:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002562:	4b1d      	ldr	r3, [pc, #116]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
90002564:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002568:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
9000256a:	4a1b      	ldr	r2, [pc, #108]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
9000256c:	697b      	ldr	r3, [r7, #20]
9000256e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002570:	4b19      	ldr	r3, [pc, #100]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
90002572:	2200      	movs	r2, #0
90002574:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002576:	4b18      	ldr	r3, [pc, #96]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
90002578:	2200      	movs	r2, #0
9000257a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
9000257c:	4b16      	ldr	r3, [pc, #88]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
9000257e:	22ff      	movs	r2, #255	@ 0xff
90002580:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002582:	4a15      	ldr	r2, [pc, #84]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
90002584:	6a3b      	ldr	r3, [r7, #32]
90002586:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002588:	4b13      	ldr	r3, [pc, #76]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
9000258a:	2200      	movs	r2, #0
9000258c:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
9000258e:	4b12      	ldr	r3, [pc, #72]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
90002590:	4a12      	ldr	r2, [pc, #72]	@ (900025dc <LL_ConvertLineToRGB+0xa4>)
90002592:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002594:	4810      	ldr	r0, [pc, #64]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
90002596:	f000 fee9 	bl	9000336c <HAL_DMA2D_Init>
9000259a:	4603      	mov	r3, r0
9000259c:	2b00      	cmp	r3, #0
9000259e:	d115      	bne.n	900025cc <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
900025a0:	2101      	movs	r1, #1
900025a2:	480d      	ldr	r0, [pc, #52]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
900025a4:	f001 f864 	bl	90003670 <HAL_DMA2D_ConfigLayer>
900025a8:	4603      	mov	r3, r0
900025aa:	2b00      	cmp	r3, #0
900025ac:	d10e      	bne.n	900025cc <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
900025ae:	68b9      	ldr	r1, [r7, #8]
900025b0:	687a      	ldr	r2, [r7, #4]
900025b2:	2301      	movs	r3, #1
900025b4:	9300      	str	r3, [sp, #0]
900025b6:	683b      	ldr	r3, [r7, #0]
900025b8:	4807      	ldr	r0, [pc, #28]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
900025ba:	f000 ff45 	bl	90003448 <HAL_DMA2D_Start>
900025be:	4603      	mov	r3, r0
900025c0:	2b00      	cmp	r3, #0
900025c2:	d103      	bne.n	900025cc <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900025c4:	2132      	movs	r1, #50	@ 0x32
900025c6:	4804      	ldr	r0, [pc, #16]	@ (900025d8 <LL_ConvertLineToRGB+0xa0>)
900025c8:	f000 ff69 	bl	9000349e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
900025cc:	bf00      	nop
900025ce:	3718      	adds	r7, #24
900025d0:	46bd      	mov	sp, r7
900025d2:	bd80      	pop	{r7, pc}
900025d4:	200010e0 	.word	0x200010e0
900025d8:	20000fd0 	.word	0x20000fd0
900025dc:	52001000 	.word	0x52001000

900025e0 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900025e0:	b580      	push	{r7, lr}
900025e2:	b08e      	sub	sp, #56	@ 0x38
900025e4:	af00      	add	r7, sp, #0
900025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
900025e8:	687b      	ldr	r3, [r7, #4]
900025ea:	681b      	ldr	r3, [r3, #0]
900025ec:	4a5b      	ldr	r2, [pc, #364]	@ (9000275c <LTDC_MspInit+0x17c>)
900025ee:	4293      	cmp	r3, r2
900025f0:	f040 80b0 	bne.w	90002754 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
900025f4:	4b5a      	ldr	r3, [pc, #360]	@ (90002760 <LTDC_MspInit+0x180>)
900025f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
900025fa:	4a59      	ldr	r2, [pc, #356]	@ (90002760 <LTDC_MspInit+0x180>)
900025fc:	f043 0308 	orr.w	r3, r3, #8
90002600:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002604:	4b56      	ldr	r3, [pc, #344]	@ (90002760 <LTDC_MspInit+0x180>)
90002606:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
9000260a:	f003 0308 	and.w	r3, r3, #8
9000260e:	623b      	str	r3, [r7, #32]
90002610:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002612:	4b53      	ldr	r3, [pc, #332]	@ (90002760 <LTDC_MspInit+0x180>)
90002614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002618:	4a51      	ldr	r2, [pc, #324]	@ (90002760 <LTDC_MspInit+0x180>)
9000261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000261e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002622:	4b4f      	ldr	r3, [pc, #316]	@ (90002760 <LTDC_MspInit+0x180>)
90002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000262c:	61fb      	str	r3, [r7, #28]
9000262e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002630:	4b4b      	ldr	r3, [pc, #300]	@ (90002760 <LTDC_MspInit+0x180>)
90002632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002636:	4a4a      	ldr	r2, [pc, #296]	@ (90002760 <LTDC_MspInit+0x180>)
90002638:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
9000263c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002640:	4b47      	ldr	r3, [pc, #284]	@ (90002760 <LTDC_MspInit+0x180>)
90002642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000264a:	61bb      	str	r3, [r7, #24]
9000264c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000264e:	4b44      	ldr	r3, [pc, #272]	@ (90002760 <LTDC_MspInit+0x180>)
90002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002654:	4a42      	ldr	r2, [pc, #264]	@ (90002760 <LTDC_MspInit+0x180>)
90002656:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000265a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000265e:	4b40      	ldr	r3, [pc, #256]	@ (90002760 <LTDC_MspInit+0x180>)
90002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002668:	617b      	str	r3, [r7, #20]
9000266a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000266c:	4b3c      	ldr	r3, [pc, #240]	@ (90002760 <LTDC_MspInit+0x180>)
9000266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002672:	4a3b      	ldr	r2, [pc, #236]	@ (90002760 <LTDC_MspInit+0x180>)
90002674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000267c:	4b38      	ldr	r3, [pc, #224]	@ (90002760 <LTDC_MspInit+0x180>)
9000267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002686:	613b      	str	r3, [r7, #16]
90002688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000268a:	4b35      	ldr	r3, [pc, #212]	@ (90002760 <LTDC_MspInit+0x180>)
9000268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002690:	4a33      	ldr	r2, [pc, #204]	@ (90002760 <LTDC_MspInit+0x180>)
90002692:	f043 0308 	orr.w	r3, r3, #8
90002696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000269a:	4b31      	ldr	r3, [pc, #196]	@ (90002760 <LTDC_MspInit+0x180>)
9000269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900026a0:	f003 0308 	and.w	r3, r3, #8
900026a4:	60fb      	str	r3, [r7, #12]
900026a6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
900026a8:	f24d 2303 	movw	r3, #53763	@ 0xd203
900026ac:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900026ae:	2302      	movs	r3, #2
900026b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900026b2:	2300      	movs	r3, #0
900026b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900026b6:	2302      	movs	r3, #2
900026b8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900026ba:	230e      	movs	r3, #14
900026bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900026be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900026c2:	4619      	mov	r1, r3
900026c4:	4827      	ldr	r0, [pc, #156]	@ (90002764 <LTDC_MspInit+0x184>)
900026c6:	f001 f927 	bl	90003918 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
900026ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
900026ce:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900026d0:	230e      	movs	r3, #14
900026d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
900026d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900026d8:	4619      	mov	r1, r3
900026da:	4823      	ldr	r0, [pc, #140]	@ (90002768 <LTDC_MspInit+0x188>)
900026dc:	f001 f91c 	bl	90003918 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900026e0:	23ff      	movs	r3, #255	@ 0xff
900026e2:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900026e4:	230e      	movs	r3, #14
900026e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
900026e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900026ec:	4619      	mov	r1, r3
900026ee:	481f      	ldr	r0, [pc, #124]	@ (9000276c <LTDC_MspInit+0x18c>)
900026f0:	f001 f912 	bl	90003918 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
900026f4:	f240 2302 	movw	r3, #514	@ 0x202
900026f8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900026fa:	2302      	movs	r3, #2
900026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900026fe:	2300      	movs	r3, #0
90002700:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002702:	2302      	movs	r3, #2
90002704:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002706:	230e      	movs	r3, #14
90002708:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000270a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000270e:	4619      	mov	r1, r3
90002710:	4817      	ldr	r0, [pc, #92]	@ (90002770 <LTDC_MspInit+0x190>)
90002712:	f001 f901 	bl	90003918 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002716:	2380      	movs	r3, #128	@ 0x80
90002718:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000271a:	2301      	movs	r3, #1
9000271c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
9000271e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002722:	4619      	mov	r1, r3
90002724:	4813      	ldr	r0, [pc, #76]	@ (90002774 <LTDC_MspInit+0x194>)
90002726:	f001 f8f7 	bl	90003918 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
9000272a:	2201      	movs	r2, #1
9000272c:	2180      	movs	r1, #128	@ 0x80
9000272e:	4811      	ldr	r0, [pc, #68]	@ (90002774 <LTDC_MspInit+0x194>)
90002730:	f001 fbac 	bl	90003e8c <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002734:	4b0a      	ldr	r3, [pc, #40]	@ (90002760 <LTDC_MspInit+0x180>)
90002736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000273a:	4a09      	ldr	r2, [pc, #36]	@ (90002760 <LTDC_MspInit+0x180>)
9000273c:	f043 0308 	orr.w	r3, r3, #8
90002740:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002744:	4b06      	ldr	r3, [pc, #24]	@ (90002760 <LTDC_MspInit+0x180>)
90002746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000274a:	4a05      	ldr	r2, [pc, #20]	@ (90002760 <LTDC_MspInit+0x180>)
9000274c:	f023 0308 	bic.w	r3, r3, #8
90002750:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002754:	bf00      	nop
90002756:	3738      	adds	r7, #56	@ 0x38
90002758:	46bd      	mov	sp, r7
9000275a:	bd80      	pop	{r7, pc}
9000275c:	50001000 	.word	0x50001000
90002760:	58024400 	.word	0x58024400
90002764:	58022000 	.word	0x58022000
90002768:	58022400 	.word	0x58022400
9000276c:	58022800 	.word	0x58022800
90002770:	58021c00 	.word	0x58021c00
90002774:	58020c00 	.word	0x58020c00

90002778 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002778:	b480      	push	{r7}
9000277a:	b085      	sub	sp, #20
9000277c:	af00      	add	r7, sp, #0
9000277e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002780:	687b      	ldr	r3, [r7, #4]
90002782:	681b      	ldr	r3, [r3, #0]
90002784:	4a11      	ldr	r2, [pc, #68]	@ (900027cc <DMA2D_MspInit+0x54>)
90002786:	4293      	cmp	r3, r2
90002788:	d11a      	bne.n	900027c0 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000278a:	4b11      	ldr	r3, [pc, #68]	@ (900027d0 <DMA2D_MspInit+0x58>)
9000278c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002790:	4a0f      	ldr	r2, [pc, #60]	@ (900027d0 <DMA2D_MspInit+0x58>)
90002792:	f043 0310 	orr.w	r3, r3, #16
90002796:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
9000279a:	4b0d      	ldr	r3, [pc, #52]	@ (900027d0 <DMA2D_MspInit+0x58>)
9000279c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900027a0:	f003 0310 	and.w	r3, r3, #16
900027a4:	60fb      	str	r3, [r7, #12]
900027a6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
900027a8:	4b09      	ldr	r3, [pc, #36]	@ (900027d0 <DMA2D_MspInit+0x58>)
900027aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900027ac:	4a08      	ldr	r2, [pc, #32]	@ (900027d0 <DMA2D_MspInit+0x58>)
900027ae:	f043 0310 	orr.w	r3, r3, #16
900027b2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
900027b4:	4b06      	ldr	r3, [pc, #24]	@ (900027d0 <DMA2D_MspInit+0x58>)
900027b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900027b8:	4a05      	ldr	r2, [pc, #20]	@ (900027d0 <DMA2D_MspInit+0x58>)
900027ba:	f023 0310 	bic.w	r3, r3, #16
900027be:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
900027c0:	bf00      	nop
900027c2:	3714      	adds	r7, #20
900027c4:	46bd      	mov	sp, r7
900027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900027ca:	4770      	bx	lr
900027cc:	52001000 	.word	0x52001000
900027d0:	58024400 	.word	0x58024400

900027d4 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
900027d4:	b580      	push	{r7, lr}
900027d6:	b08a      	sub	sp, #40	@ 0x28
900027d8:	af00      	add	r7, sp, #0
900027da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900027dc:	4b18      	ldr	r3, [pc, #96]	@ (90002840 <TIMx_PWM_MspInit+0x6c>)
900027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027e2:	4a17      	ldr	r2, [pc, #92]	@ (90002840 <TIMx_PWM_MspInit+0x6c>)
900027e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
900027e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900027ec:	4b14      	ldr	r3, [pc, #80]	@ (90002840 <TIMx_PWM_MspInit+0x6c>)
900027ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900027f6:	613b      	str	r3, [r7, #16]
900027f8:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
900027fa:	4b11      	ldr	r3, [pc, #68]	@ (90002840 <TIMx_PWM_MspInit+0x6c>)
900027fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002800:	4a0f      	ldr	r2, [pc, #60]	@ (90002840 <TIMx_PWM_MspInit+0x6c>)
90002802:	f043 0302 	orr.w	r3, r3, #2
90002806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
9000280a:	4b0d      	ldr	r3, [pc, #52]	@ (90002840 <TIMx_PWM_MspInit+0x6c>)
9000280c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002810:	f003 0302 	and.w	r3, r3, #2
90002814:	60fb      	str	r3, [r7, #12]
90002816:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002818:	2302      	movs	r3, #2
9000281a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
9000281c:	2300      	movs	r3, #0
9000281e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002820:	2301      	movs	r3, #1
90002822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002824:	2303      	movs	r3, #3
90002826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002828:	2301      	movs	r3, #1
9000282a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
9000282c:	f107 0314 	add.w	r3, r7, #20
90002830:	4619      	mov	r1, r3
90002832:	4804      	ldr	r0, [pc, #16]	@ (90002844 <TIMx_PWM_MspInit+0x70>)
90002834:	f001 f870 	bl	90003918 <HAL_GPIO_Init>
}
90002838:	bf00      	nop
9000283a:	3728      	adds	r7, #40	@ 0x28
9000283c:	46bd      	mov	sp, r7
9000283e:	bd80      	pop	{r7, pc}
90002840:	58024400 	.word	0x58024400
90002844:	58022800 	.word	0x58022800

90002848 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002848:	b580      	push	{r7, lr}
9000284a:	b082      	sub	sp, #8
9000284c:	af00      	add	r7, sp, #0
9000284e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002850:	687b      	ldr	r3, [r7, #4]
90002852:	4a11      	ldr	r2, [pc, #68]	@ (90002898 <TIMx_PWM_Init+0x50>)
90002854:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002856:	6878      	ldr	r0, [r7, #4]
90002858:	f006 ff28 	bl	900096ac <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
9000285c:	6878      	ldr	r0, [r7, #4]
9000285e:	f7ff ffb9 	bl	900027d4 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002862:	687b      	ldr	r3, [r7, #4]
90002864:	2204      	movs	r2, #4
90002866:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002868:	687b      	ldr	r3, [r7, #4]
9000286a:	f24c 3250 	movw	r2, #50000	@ 0xc350
9000286e:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002870:	687b      	ldr	r3, [r7, #4]
90002872:	2200      	movs	r2, #0
90002874:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002876:	687b      	ldr	r3, [r7, #4]
90002878:	2200      	movs	r2, #0
9000287a:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
9000287c:	687b      	ldr	r3, [r7, #4]
9000287e:	2200      	movs	r2, #0
90002880:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002882:	687b      	ldr	r3, [r7, #4]
90002884:	2200      	movs	r2, #0
90002886:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002888:	6878      	ldr	r0, [r7, #4]
9000288a:	f006 feb8 	bl	900095fe <HAL_TIM_PWM_Init>
}
9000288e:	bf00      	nop
90002890:	3708      	adds	r7, #8
90002892:	46bd      	mov	sp, r7
90002894:	bd80      	pop	{r7, pc}
90002896:	bf00      	nop
90002898:	40010400 	.word	0x40010400

9000289c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
9000289c:	b580      	push	{r7, lr}
9000289e:	b084      	sub	sp, #16
900028a0:	af00      	add	r7, sp, #0
900028a2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
900028a4:	2300      	movs	r3, #0
900028a6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
900028a8:	687b      	ldr	r3, [r7, #4]
900028aa:	2b00      	cmp	r3, #0
900028ac:	d003      	beq.n	900028b6 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
900028ae:	f06f 0301 	mvn.w	r3, #1
900028b2:	60fb      	str	r3, [r7, #12]
900028b4:	e044      	b.n	90002940 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
900028b6:	687b      	ldr	r3, [r7, #4]
900028b8:	2234      	movs	r2, #52	@ 0x34
900028ba:	fb02 f303 	mul.w	r3, r2, r3
900028be:	4a23      	ldr	r2, [pc, #140]	@ (9000294c <BSP_SDRAM_Init+0xb0>)
900028c0:	4413      	add	r3, r2
900028c2:	4618      	mov	r0, r3
900028c4:	f000 f892 	bl	900029ec <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
900028c8:	687b      	ldr	r3, [r7, #4]
900028ca:	2234      	movs	r2, #52	@ 0x34
900028cc:	fb02 f303 	mul.w	r3, r2, r3
900028d0:	4a1e      	ldr	r2, [pc, #120]	@ (9000294c <BSP_SDRAM_Init+0xb0>)
900028d2:	4413      	add	r3, r2
900028d4:	2210      	movs	r2, #16
900028d6:	2104      	movs	r1, #4
900028d8:	4618      	mov	r0, r3
900028da:	f000 f83b 	bl	90002954 <MX_SDRAM_BANK2_Init>
900028de:	4603      	mov	r3, r0
900028e0:	2b00      	cmp	r3, #0
900028e2:	d003      	beq.n	900028ec <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
900028e4:	f04f 33ff 	mov.w	r3, #4294967295
900028e8:	60fb      	str	r3, [r7, #12]
900028ea:	e029      	b.n	90002940 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900028ec:	4b18      	ldr	r3, [pc, #96]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
900028ee:	2208      	movs	r2, #8
900028f0:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
900028f2:	4b17      	ldr	r3, [pc, #92]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
900028f4:	2203      	movs	r2, #3
900028f6:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
900028f8:	4b15      	ldr	r3, [pc, #84]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
900028fa:	f240 6203 	movw	r2, #1539	@ 0x603
900028fe:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002900:	4b13      	ldr	r3, [pc, #76]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
90002902:	2200      	movs	r2, #0
90002904:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002906:	4b12      	ldr	r3, [pc, #72]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
90002908:	2200      	movs	r2, #0
9000290a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
9000290c:	4b10      	ldr	r3, [pc, #64]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
9000290e:	2230      	movs	r2, #48	@ 0x30
90002910:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002912:	4b0f      	ldr	r3, [pc, #60]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
90002914:	2200      	movs	r2, #0
90002916:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002918:	4b0d      	ldr	r3, [pc, #52]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
9000291a:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000291e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002920:	687b      	ldr	r3, [r7, #4]
90002922:	2234      	movs	r2, #52	@ 0x34
90002924:	fb02 f303 	mul.w	r3, r2, r3
90002928:	4a08      	ldr	r2, [pc, #32]	@ (9000294c <BSP_SDRAM_Init+0xb0>)
9000292a:	4413      	add	r3, r2
9000292c:	4908      	ldr	r1, [pc, #32]	@ (90002950 <BSP_SDRAM_Init+0xb4>)
9000292e:	4618      	mov	r0, r3
90002930:	f7fe fb3a 	bl	90000fa8 <MT48LC4M32B2_Init>
90002934:	4603      	mov	r3, r0
90002936:	2b00      	cmp	r3, #0
90002938:	d002      	beq.n	90002940 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
9000293a:	f06f 0304 	mvn.w	r3, #4
9000293e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002940:	68fb      	ldr	r3, [r7, #12]
}
90002942:	4618      	mov	r0, r3
90002944:	3710      	adds	r7, #16
90002946:	46bd      	mov	sp, r7
90002948:	bd80      	pop	{r7, pc}
9000294a:	bf00      	nop
9000294c:	20001100 	.word	0x20001100
90002950:	20001134 	.word	0x20001134

90002954 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002954:	b580      	push	{r7, lr}
90002956:	b08c      	sub	sp, #48	@ 0x30
90002958:	af00      	add	r7, sp, #0
9000295a:	60f8      	str	r0, [r7, #12]
9000295c:	60b9      	str	r1, [r7, #8]
9000295e:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002960:	4b20      	ldr	r3, [pc, #128]	@ (900029e4 <MX_SDRAM_BANK2_Init+0x90>)
90002962:	4a21      	ldr	r2, [pc, #132]	@ (900029e8 <MX_SDRAM_BANK2_Init+0x94>)
90002964:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002966:	68fb      	ldr	r3, [r7, #12]
90002968:	2201      	movs	r2, #1
9000296a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000296c:	68fb      	ldr	r3, [r7, #12]
9000296e:	2200      	movs	r2, #0
90002970:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002972:	68fb      	ldr	r3, [r7, #12]
90002974:	68ba      	ldr	r2, [r7, #8]
90002976:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002978:	68fb      	ldr	r3, [r7, #12]
9000297a:	687a      	ldr	r2, [r7, #4]
9000297c:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000297e:	4b19      	ldr	r3, [pc, #100]	@ (900029e4 <MX_SDRAM_BANK2_Init+0x90>)
90002980:	2240      	movs	r2, #64	@ 0x40
90002982:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002984:	68fb      	ldr	r3, [r7, #12]
90002986:	f44f 72c0 	mov.w	r2, #384	@ 0x180
9000298a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
9000298c:	68fb      	ldr	r3, [r7, #12]
9000298e:	2200      	movs	r2, #0
90002990:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002992:	68fb      	ldr	r3, [r7, #12]
90002994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002998:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000299a:	68fb      	ldr	r3, [r7, #12]
9000299c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
900029a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900029a2:	68fb      	ldr	r3, [r7, #12]
900029a4:	2200      	movs	r2, #0
900029a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
900029a8:	2302      	movs	r3, #2
900029aa:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
900029ac:	2307      	movs	r3, #7
900029ae:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
900029b0:	2304      	movs	r3, #4
900029b2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
900029b4:	2307      	movs	r3, #7
900029b6:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
900029b8:	2302      	movs	r3, #2
900029ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
900029bc:	2302      	movs	r3, #2
900029be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
900029c0:	2302      	movs	r3, #2
900029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900029c4:	f107 0314 	add.w	r3, r7, #20
900029c8:	4619      	mov	r1, r3
900029ca:	68f8      	ldr	r0, [r7, #12]
900029cc:	f006 fd74 	bl	900094b8 <HAL_SDRAM_Init>
900029d0:	4603      	mov	r3, r0
900029d2:	2b00      	cmp	r3, #0
900029d4:	d001      	beq.n	900029da <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
900029d6:	2301      	movs	r3, #1
900029d8:	e000      	b.n	900029dc <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
900029da:	2300      	movs	r3, #0
}
900029dc:	4618      	mov	r0, r3
900029de:	3730      	adds	r7, #48	@ 0x30
900029e0:	46bd      	mov	sp, r7
900029e2:	bd80      	pop	{r7, pc}
900029e4:	20001100 	.word	0x20001100
900029e8:	52004140 	.word	0x52004140

900029ec <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
900029ec:	b580      	push	{r7, lr}
900029ee:	b08e      	sub	sp, #56	@ 0x38
900029f0:	af00      	add	r7, sp, #0
900029f2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
900029f4:	4b73      	ldr	r3, [pc, #460]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
900029f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900029fa:	4a72      	ldr	r2, [pc, #456]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
900029fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002a00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002a04:	4b6f      	ldr	r3, [pc, #444]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002a0e:	623b      	str	r3, [r7, #32]
90002a10:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002a12:	4b6c      	ldr	r3, [pc, #432]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a18:	4a6a      	ldr	r2, [pc, #424]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a1a:	f043 0301 	orr.w	r3, r3, #1
90002a1e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002a22:	4b68      	ldr	r3, [pc, #416]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a28:	f003 0301 	and.w	r3, r3, #1
90002a2c:	61fb      	str	r3, [r7, #28]
90002a2e:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002a30:	4b64      	ldr	r3, [pc, #400]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a36:	4a63      	ldr	r2, [pc, #396]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a38:	f043 0308 	orr.w	r3, r3, #8
90002a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a40:	4b60      	ldr	r3, [pc, #384]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a46:	f003 0308 	and.w	r3, r3, #8
90002a4a:	61bb      	str	r3, [r7, #24]
90002a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002a4e:	4b5d      	ldr	r3, [pc, #372]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a54:	4a5b      	ldr	r2, [pc, #364]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a56:	f043 0310 	orr.w	r3, r3, #16
90002a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a5e:	4b59      	ldr	r3, [pc, #356]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a64:	f003 0310 	and.w	r3, r3, #16
90002a68:	617b      	str	r3, [r7, #20]
90002a6a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002a6c:	4b55      	ldr	r3, [pc, #340]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a72:	4a54      	ldr	r2, [pc, #336]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a74:	f043 0320 	orr.w	r3, r3, #32
90002a78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a7c:	4b51      	ldr	r3, [pc, #324]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a82:	f003 0320 	and.w	r3, r3, #32
90002a86:	613b      	str	r3, [r7, #16]
90002a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002a8a:	4b4e      	ldr	r3, [pc, #312]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a90:	4a4c      	ldr	r2, [pc, #304]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a9a:	4b4a      	ldr	r3, [pc, #296]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002aa4:	60fb      	str	r3, [r7, #12]
90002aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002aa8:	4b46      	ldr	r3, [pc, #280]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aae:	4a45      	ldr	r2, [pc, #276]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ab8:	4b42      	ldr	r3, [pc, #264]	@ (90002bc4 <SDRAM_MspInit+0x1d8>)
90002aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002ac2:	60bb      	str	r3, [r7, #8]
90002ac4:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002ac6:	2302      	movs	r3, #2
90002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002aca:	2301      	movs	r3, #1
90002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002ace:	2303      	movs	r3, #3
90002ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002ad2:	230c      	movs	r3, #12
90002ad4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002ad6:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002ada:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ae0:	4619      	mov	r1, r3
90002ae2:	4839      	ldr	r0, [pc, #228]	@ (90002bc8 <SDRAM_MspInit+0x1dc>)
90002ae4:	f000 ff18 	bl	90003918 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002ae8:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002aec:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002af2:	4619      	mov	r1, r3
90002af4:	4835      	ldr	r0, [pc, #212]	@ (90002bcc <SDRAM_MspInit+0x1e0>)
90002af6:	f000 ff0f 	bl	90003918 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002afa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002afe:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b04:	4619      	mov	r1, r3
90002b06:	4832      	ldr	r0, [pc, #200]	@ (90002bd0 <SDRAM_MspInit+0x1e4>)
90002b08:	f000 ff06 	bl	90003918 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002b0c:	f248 1333 	movw	r3, #33075	@ 0x8133
90002b10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b16:	4619      	mov	r1, r3
90002b18:	482e      	ldr	r0, [pc, #184]	@ (90002bd4 <SDRAM_MspInit+0x1e8>)
90002b1a:	f000 fefd 	bl	90003918 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002b1e:	23e0      	movs	r3, #224	@ 0xe0
90002b20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b26:	4619      	mov	r1, r3
90002b28:	482b      	ldr	r0, [pc, #172]	@ (90002bd8 <SDRAM_MspInit+0x1ec>)
90002b2a:	f000 fef5 	bl	90003918 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002b2e:	4b2b      	ldr	r3, [pc, #172]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002b34:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002b36:	4b29      	ldr	r3, [pc, #164]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002b3c:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002b3e:	4b27      	ldr	r3, [pc, #156]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b40:	2280      	movs	r2, #128	@ 0x80
90002b42:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002b44:	4b25      	ldr	r3, [pc, #148]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b46:	2200      	movs	r2, #0
90002b48:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002b4a:	4b24      	ldr	r3, [pc, #144]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b4c:	f240 2202 	movw	r2, #514	@ 0x202
90002b50:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002b52:	4b22      	ldr	r3, [pc, #136]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b54:	f640 0208 	movw	r2, #2056	@ 0x808
90002b58:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002b5a:	4b20      	ldr	r3, [pc, #128]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b5c:	2220      	movs	r2, #32
90002b5e:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002b60:	4b1e      	ldr	r3, [pc, #120]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b62:	2280      	movs	r2, #128	@ 0x80
90002b64:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002b66:	4b1d      	ldr	r3, [pc, #116]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002b6e:	4b1b      	ldr	r3, [pc, #108]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b70:	2200      	movs	r2, #0
90002b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002b74:	4b19      	ldr	r3, [pc, #100]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b76:	2200      	movs	r2, #0
90002b78:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002b7a:	4b18      	ldr	r3, [pc, #96]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b7c:	2280      	movs	r2, #128	@ 0x80
90002b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002b80:	4b16      	ldr	r3, [pc, #88]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b82:	2200      	movs	r2, #0
90002b84:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002b86:	4b15      	ldr	r3, [pc, #84]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b88:	2200      	movs	r2, #0
90002b8a:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002b8c:	4b13      	ldr	r3, [pc, #76]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b8e:	4a14      	ldr	r2, [pc, #80]	@ (90002be0 <SDRAM_MspInit+0x1f4>)
90002b90:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002b92:	4b14      	ldr	r3, [pc, #80]	@ (90002be4 <SDRAM_MspInit+0x1f8>)
90002b94:	4a11      	ldr	r2, [pc, #68]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b96:	631a      	str	r2, [r3, #48]	@ 0x30
90002b98:	4b10      	ldr	r3, [pc, #64]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002b9a:	4a12      	ldr	r2, [pc, #72]	@ (90002be4 <SDRAM_MspInit+0x1f8>)
90002b9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002b9e:	480f      	ldr	r0, [pc, #60]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002ba0:	f004 f85c 	bl	90006c5c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002ba4:	480d      	ldr	r0, [pc, #52]	@ (90002bdc <SDRAM_MspInit+0x1f0>)
90002ba6:	f004 f80d 	bl	90006bc4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002baa:	2200      	movs	r2, #0
90002bac:	210f      	movs	r1, #15
90002bae:	207a      	movs	r0, #122	@ 0x7a
90002bb0:	f000 fb2f 	bl	90003212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002bb4:	207a      	movs	r0, #122	@ 0x7a
90002bb6:	f000 fb46 	bl	90003246 <HAL_NVIC_EnableIRQ>
}
90002bba:	bf00      	nop
90002bbc:	3738      	adds	r7, #56	@ 0x38
90002bbe:	46bd      	mov	sp, r7
90002bc0:	bd80      	pop	{r7, pc}
90002bc2:	bf00      	nop
90002bc4:	58024400 	.word	0x58024400
90002bc8:	58020c00 	.word	0x58020c00
90002bcc:	58021000 	.word	0x58021000
90002bd0:	58021400 	.word	0x58021400
90002bd4:	58021800 	.word	0x58021800
90002bd8:	58021c00 	.word	0x58021c00
90002bdc:	20001154 	.word	0x20001154
90002be0:	52000040 	.word	0x52000040
90002be4:	20001100 	.word	0x20001100

90002be8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90002be8:	b580      	push	{r7, lr}
90002bea:	b088      	sub	sp, #32
90002bec:	af00      	add	r7, sp, #0
90002bee:	6078      	str	r0, [r7, #4]
90002bf0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002bf2:	2300      	movs	r3, #0
90002bf4:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002bf6:	687b      	ldr	r3, [r7, #4]
90002bf8:	2b00      	cmp	r3, #0
90002bfa:	d11c      	bne.n	90002c36 <BSP_TS_Init+0x4e>
90002bfc:	683b      	ldr	r3, [r7, #0]
90002bfe:	681b      	ldr	r3, [r3, #0]
90002c00:	2b00      	cmp	r3, #0
90002c02:	d018      	beq.n	90002c36 <BSP_TS_Init+0x4e>
90002c04:	683b      	ldr	r3, [r7, #0]
90002c06:	681b      	ldr	r3, [r3, #0]
90002c08:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
90002c0c:	d813      	bhi.n	90002c36 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002c0e:	683b      	ldr	r3, [r7, #0]
90002c10:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002c12:	2b00      	cmp	r3, #0
90002c14:	d00f      	beq.n	90002c36 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002c16:	683b      	ldr	r3, [r7, #0]
90002c18:	685b      	ldr	r3, [r3, #4]
90002c1a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
90002c1e:	d80a      	bhi.n	90002c36 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90002c20:	683b      	ldr	r3, [r7, #0]
90002c22:	68da      	ldr	r2, [r3, #12]
90002c24:	683b      	ldr	r3, [r7, #0]
90002c26:	6819      	ldr	r1, [r3, #0]
90002c28:	683b      	ldr	r3, [r7, #0]
90002c2a:	685b      	ldr	r3, [r3, #4]
90002c2c:	428b      	cmp	r3, r1
90002c2e:	bf28      	it	cs
90002c30:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002c32:	429a      	cmp	r2, r3
90002c34:	d903      	bls.n	90002c3e <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002c36:	f06f 0301 	mvn.w	r3, #1
90002c3a:	61fb      	str	r3, [r7, #28]
90002c3c:	e06e      	b.n	90002d1c <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
90002c3e:	6878      	ldr	r0, [r7, #4]
90002c40:	f000 f878 	bl	90002d34 <FT5336_Probe>
90002c44:	4603      	mov	r3, r0
90002c46:	2b00      	cmp	r3, #0
90002c48:	d003      	beq.n	90002c52 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
90002c4a:	f04f 33ff 	mov.w	r3, #4294967295
90002c4e:	61fb      	str	r3, [r7, #28]
90002c50:	e064      	b.n	90002d1c <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90002c52:	683b      	ldr	r3, [r7, #0]
90002c54:	681a      	ldr	r2, [r3, #0]
90002c56:	4934      	ldr	r1, [pc, #208]	@ (90002d28 <BSP_TS_Init+0x140>)
90002c58:	687b      	ldr	r3, [r7, #4]
90002c5a:	019b      	lsls	r3, r3, #6
90002c5c:	440b      	add	r3, r1
90002c5e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
90002c60:	683b      	ldr	r3, [r7, #0]
90002c62:	685a      	ldr	r2, [r3, #4]
90002c64:	4930      	ldr	r1, [pc, #192]	@ (90002d28 <BSP_TS_Init+0x140>)
90002c66:	687b      	ldr	r3, [r7, #4]
90002c68:	019b      	lsls	r3, r3, #6
90002c6a:	440b      	add	r3, r1
90002c6c:	3304      	adds	r3, #4
90002c6e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
90002c70:	683b      	ldr	r3, [r7, #0]
90002c72:	689a      	ldr	r2, [r3, #8]
90002c74:	492c      	ldr	r1, [pc, #176]	@ (90002d28 <BSP_TS_Init+0x140>)
90002c76:	687b      	ldr	r3, [r7, #4]
90002c78:	019b      	lsls	r3, r3, #6
90002c7a:	440b      	add	r3, r1
90002c7c:	3308      	adds	r3, #8
90002c7e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
90002c80:	683b      	ldr	r3, [r7, #0]
90002c82:	68da      	ldr	r2, [r3, #12]
90002c84:	4928      	ldr	r1, [pc, #160]	@ (90002d28 <BSP_TS_Init+0x140>)
90002c86:	687b      	ldr	r3, [r7, #4]
90002c88:	019b      	lsls	r3, r3, #6
90002c8a:	440b      	add	r3, r1
90002c8c:	330c      	adds	r3, #12
90002c8e:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90002c90:	4b26      	ldr	r3, [pc, #152]	@ (90002d2c <BSP_TS_Init+0x144>)
90002c92:	681b      	ldr	r3, [r3, #0]
90002c94:	69db      	ldr	r3, [r3, #28]
90002c96:	4926      	ldr	r1, [pc, #152]	@ (90002d30 <BSP_TS_Init+0x148>)
90002c98:	687a      	ldr	r2, [r7, #4]
90002c9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002c9e:	f107 010c 	add.w	r1, r7, #12
90002ca2:	4610      	mov	r0, r2
90002ca4:	4798      	blx	r3
90002ca6:	4603      	mov	r3, r0
90002ca8:	2b00      	cmp	r3, #0
90002caa:	da03      	bge.n	90002cb4 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002cac:	f06f 0304 	mvn.w	r3, #4
90002cb0:	61fb      	str	r3, [r7, #28]
90002cb2:	e033      	b.n	90002d1c <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90002cb4:	693a      	ldr	r2, [r7, #16]
90002cb6:	491c      	ldr	r1, [pc, #112]	@ (90002d28 <BSP_TS_Init+0x140>)
90002cb8:	687b      	ldr	r3, [r7, #4]
90002cba:	019b      	lsls	r3, r3, #6
90002cbc:	440b      	add	r3, r1
90002cbe:	3310      	adds	r3, #16
90002cc0:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
90002cc2:	697a      	ldr	r2, [r7, #20]
90002cc4:	4918      	ldr	r1, [pc, #96]	@ (90002d28 <BSP_TS_Init+0x140>)
90002cc6:	687b      	ldr	r3, [r7, #4]
90002cc8:	019b      	lsls	r3, r3, #6
90002cca:	440b      	add	r3, r1
90002ccc:	3314      	adds	r3, #20
90002cce:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002cd0:	2300      	movs	r3, #0
90002cd2:	61bb      	str	r3, [r7, #24]
90002cd4:	e01f      	b.n	90002d16 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90002cd6:	683b      	ldr	r3, [r7, #0]
90002cd8:	681a      	ldr	r2, [r3, #0]
90002cda:	683b      	ldr	r3, [r7, #0]
90002cdc:	68db      	ldr	r3, [r3, #12]
90002cde:	4413      	add	r3, r2
90002ce0:	1c5a      	adds	r2, r3, #1
90002ce2:	4811      	ldr	r0, [pc, #68]	@ (90002d28 <BSP_TS_Init+0x140>)
90002ce4:	687b      	ldr	r3, [r7, #4]
90002ce6:	0119      	lsls	r1, r3, #4
90002ce8:	69bb      	ldr	r3, [r7, #24]
90002cea:	440b      	add	r3, r1
90002cec:	3306      	adds	r3, #6
90002cee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90002cf2:	683b      	ldr	r3, [r7, #0]
90002cf4:	685a      	ldr	r2, [r3, #4]
90002cf6:	683b      	ldr	r3, [r7, #0]
90002cf8:	68db      	ldr	r3, [r3, #12]
90002cfa:	4413      	add	r3, r2
90002cfc:	1c5a      	adds	r2, r3, #1
90002cfe:	480a      	ldr	r0, [pc, #40]	@ (90002d28 <BSP_TS_Init+0x140>)
90002d00:	687b      	ldr	r3, [r7, #4]
90002d02:	0119      	lsls	r1, r3, #4
90002d04:	69bb      	ldr	r3, [r7, #24]
90002d06:	440b      	add	r3, r1
90002d08:	330a      	adds	r3, #10
90002d0a:	009b      	lsls	r3, r3, #2
90002d0c:	4403      	add	r3, r0
90002d0e:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002d10:	69bb      	ldr	r3, [r7, #24]
90002d12:	3301      	adds	r3, #1
90002d14:	61bb      	str	r3, [r7, #24]
90002d16:	69bb      	ldr	r3, [r7, #24]
90002d18:	2b04      	cmp	r3, #4
90002d1a:	d9dc      	bls.n	90002cd6 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
90002d1c:	69fb      	ldr	r3, [r7, #28]
}
90002d1e:	4618      	mov	r0, r3
90002d20:	3720      	adds	r7, #32
90002d22:	46bd      	mov	sp, r7
90002d24:	bd80      	pop	{r7, pc}
90002d26:	bf00      	nop
90002d28:	200011c8 	.word	0x200011c8
90002d2c:	200011c0 	.word	0x200011c0
90002d30:	200011c4 	.word	0x200011c4

90002d34 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
90002d34:	b580      	push	{r7, lr}
90002d36:	b08a      	sub	sp, #40	@ 0x28
90002d38:	af00      	add	r7, sp, #0
90002d3a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002d3c:	2300      	movs	r3, #0
90002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
90002d40:	2300      	movs	r3, #0
90002d42:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90002d44:	2370      	movs	r3, #112	@ 0x70
90002d46:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
90002d48:	4b23      	ldr	r3, [pc, #140]	@ (90002dd8 <FT5336_Probe+0xa4>)
90002d4a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90002d4c:	4b23      	ldr	r3, [pc, #140]	@ (90002ddc <FT5336_Probe+0xa8>)
90002d4e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90002d50:	4b23      	ldr	r3, [pc, #140]	@ (90002de0 <FT5336_Probe+0xac>)
90002d52:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90002d54:	4b23      	ldr	r3, [pc, #140]	@ (90002de4 <FT5336_Probe+0xb0>)
90002d56:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
90002d58:	4b23      	ldr	r3, [pc, #140]	@ (90002de8 <FT5336_Probe+0xb4>)
90002d5a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90002d5c:	f107 030c 	add.w	r3, r7, #12
90002d60:	4619      	mov	r1, r3
90002d62:	4822      	ldr	r0, [pc, #136]	@ (90002dec <FT5336_Probe+0xb8>)
90002d64:	f7fd fdc0 	bl	900008e8 <FT5336_RegisterBusIO>
90002d68:	4603      	mov	r3, r0
90002d6a:	2b00      	cmp	r3, #0
90002d6c:	d003      	beq.n	90002d76 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
90002d6e:	f06f 0307 	mvn.w	r3, #7
90002d72:	627b      	str	r3, [r7, #36]	@ 0x24
90002d74:	e02a      	b.n	90002dcc <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90002d76:	f107 0308 	add.w	r3, r7, #8
90002d7a:	4619      	mov	r1, r3
90002d7c:	481b      	ldr	r0, [pc, #108]	@ (90002dec <FT5336_Probe+0xb8>)
90002d7e:	f7fd fead 	bl	90000adc <FT5336_ReadID>
90002d82:	4603      	mov	r3, r0
90002d84:	2b00      	cmp	r3, #0
90002d86:	d003      	beq.n	90002d90 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
90002d88:	f06f 0304 	mvn.w	r3, #4
90002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
90002d8e:	e01d      	b.n	90002dcc <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
90002d90:	68bb      	ldr	r3, [r7, #8]
90002d92:	2b51      	cmp	r3, #81	@ 0x51
90002d94:	d003      	beq.n	90002d9e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
90002d96:	f06f 0306 	mvn.w	r3, #6
90002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
90002d9c:	e016      	b.n	90002dcc <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
90002d9e:	4a14      	ldr	r2, [pc, #80]	@ (90002df0 <FT5336_Probe+0xbc>)
90002da0:	687b      	ldr	r3, [r7, #4]
90002da2:	4912      	ldr	r1, [pc, #72]	@ (90002dec <FT5336_Probe+0xb8>)
90002da4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90002da8:	4b12      	ldr	r3, [pc, #72]	@ (90002df4 <FT5336_Probe+0xc0>)
90002daa:	4a13      	ldr	r2, [pc, #76]	@ (90002df8 <FT5336_Probe+0xc4>)
90002dac:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90002dae:	4b11      	ldr	r3, [pc, #68]	@ (90002df4 <FT5336_Probe+0xc0>)
90002db0:	681b      	ldr	r3, [r3, #0]
90002db2:	681b      	ldr	r3, [r3, #0]
90002db4:	490e      	ldr	r1, [pc, #56]	@ (90002df0 <FT5336_Probe+0xbc>)
90002db6:	687a      	ldr	r2, [r7, #4]
90002db8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002dbc:	4610      	mov	r0, r2
90002dbe:	4798      	blx	r3
90002dc0:	4603      	mov	r3, r0
90002dc2:	2b00      	cmp	r3, #0
90002dc4:	d002      	beq.n	90002dcc <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
90002dc6:	f06f 0304 	mvn.w	r3, #4
90002dca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
90002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
90002dce:	4618      	mov	r0, r3
90002dd0:	3728      	adds	r7, #40	@ 0x28
90002dd2:	46bd      	mov	sp, r7
90002dd4:	bd80      	pop	{r7, pc}
90002dd6:	bf00      	nop
90002dd8:	9000127d 	.word	0x9000127d
90002ddc:	900012f1 	.word	0x900012f1
90002de0:	90001419 	.word	0x90001419
90002de4:	900013bd 	.word	0x900013bd
90002de8:	90001475 	.word	0x90001475
90002dec:	20001208 	.word	0x20001208
90002df0:	200011c4 	.word	0x200011c4
90002df4:	200011c0 	.word	0x200011c0
90002df8:	20000000 	.word	0x20000000

90002dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90002dfc:	b480      	push	{r7}
90002dfe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90002e00:	4b29      	ldr	r3, [pc, #164]	@ (90002ea8 <SystemInit+0xac>)
90002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90002e06:	4a28      	ldr	r2, [pc, #160]	@ (90002ea8 <SystemInit+0xac>)
90002e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90002e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90002e10:	4b26      	ldr	r3, [pc, #152]	@ (90002eac <SystemInit+0xb0>)
90002e12:	681b      	ldr	r3, [r3, #0]
90002e14:	4a25      	ldr	r2, [pc, #148]	@ (90002eac <SystemInit+0xb0>)
90002e16:	f043 0301 	orr.w	r3, r3, #1
90002e1a:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002e1c:	4b23      	ldr	r3, [pc, #140]	@ (90002eac <SystemInit+0xb0>)
90002e1e:	2200      	movs	r2, #0
90002e20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90002e22:	4b22      	ldr	r3, [pc, #136]	@ (90002eac <SystemInit+0xb0>)
90002e24:	681a      	ldr	r2, [r3, #0]
90002e26:	4921      	ldr	r1, [pc, #132]	@ (90002eac <SystemInit+0xb0>)
90002e28:	4b21      	ldr	r3, [pc, #132]	@ (90002eb0 <SystemInit+0xb4>)
90002e2a:	4013      	ands	r3, r2
90002e2c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002e2e:	4b1f      	ldr	r3, [pc, #124]	@ (90002eac <SystemInit+0xb0>)
90002e30:	2200      	movs	r2, #0
90002e32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90002e34:	4b1d      	ldr	r3, [pc, #116]	@ (90002eac <SystemInit+0xb0>)
90002e36:	2200      	movs	r2, #0
90002e38:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90002e3a:	4b1c      	ldr	r3, [pc, #112]	@ (90002eac <SystemInit+0xb0>)
90002e3c:	2200      	movs	r2, #0
90002e3e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90002e40:	4b1a      	ldr	r3, [pc, #104]	@ (90002eac <SystemInit+0xb0>)
90002e42:	2200      	movs	r2, #0
90002e44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90002e46:	4b19      	ldr	r3, [pc, #100]	@ (90002eac <SystemInit+0xb0>)
90002e48:	2200      	movs	r2, #0
90002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90002e4c:	4b17      	ldr	r3, [pc, #92]	@ (90002eac <SystemInit+0xb0>)
90002e4e:	2200      	movs	r2, #0
90002e50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90002e52:	4b16      	ldr	r3, [pc, #88]	@ (90002eac <SystemInit+0xb0>)
90002e54:	2200      	movs	r2, #0
90002e56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90002e58:	4b14      	ldr	r3, [pc, #80]	@ (90002eac <SystemInit+0xb0>)
90002e5a:	2200      	movs	r2, #0
90002e5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90002e5e:	4b13      	ldr	r3, [pc, #76]	@ (90002eac <SystemInit+0xb0>)
90002e60:	2200      	movs	r2, #0
90002e62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90002e64:	4b11      	ldr	r3, [pc, #68]	@ (90002eac <SystemInit+0xb0>)
90002e66:	2200      	movs	r2, #0
90002e68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90002e6a:	4b10      	ldr	r3, [pc, #64]	@ (90002eac <SystemInit+0xb0>)
90002e6c:	2200      	movs	r2, #0
90002e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90002e70:	4b0e      	ldr	r3, [pc, #56]	@ (90002eac <SystemInit+0xb0>)
90002e72:	681b      	ldr	r3, [r3, #0]
90002e74:	4a0d      	ldr	r2, [pc, #52]	@ (90002eac <SystemInit+0xb0>)
90002e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90002e7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (90002eac <SystemInit+0xb0>)
90002e7e:	2200      	movs	r2, #0
90002e80:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90002e82:	4b0c      	ldr	r3, [pc, #48]	@ (90002eb4 <SystemInit+0xb8>)
90002e84:	681a      	ldr	r2, [r3, #0]
90002e86:	4b0c      	ldr	r3, [pc, #48]	@ (90002eb8 <SystemInit+0xbc>)
90002e88:	4013      	ands	r3, r2
90002e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90002e8e:	d202      	bcs.n	90002e96 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90002e90:	4b0a      	ldr	r3, [pc, #40]	@ (90002ebc <SystemInit+0xc0>)
90002e92:	2201      	movs	r2, #1
90002e94:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90002e96:	4b04      	ldr	r3, [pc, #16]	@ (90002ea8 <SystemInit+0xac>)
90002e98:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90002e9c:	609a      	str	r2, [r3, #8]
#endif  


}
90002e9e:	bf00      	nop
90002ea0:	46bd      	mov	sp, r7
90002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ea6:	4770      	bx	lr
90002ea8:	e000ed00 	.word	0xe000ed00
90002eac:	58024400 	.word	0x58024400
90002eb0:	eaf6ed7f 	.word	0xeaf6ed7f
90002eb4:	5c001000 	.word	0x5c001000
90002eb8:	ffff0000 	.word	0xffff0000
90002ebc:	51008108 	.word	0x51008108

90002ec0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90002ec0:	b480      	push	{r7}
90002ec2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90002ec4:	4b09      	ldr	r3, [pc, #36]	@ (90002eec <ExitRun0Mode+0x2c>)
90002ec6:	68db      	ldr	r3, [r3, #12]
90002ec8:	4a08      	ldr	r2, [pc, #32]	@ (90002eec <ExitRun0Mode+0x2c>)
90002eca:	f043 0302 	orr.w	r3, r3, #2
90002ece:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90002ed0:	bf00      	nop
90002ed2:	4b06      	ldr	r3, [pc, #24]	@ (90002eec <ExitRun0Mode+0x2c>)
90002ed4:	685b      	ldr	r3, [r3, #4]
90002ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90002eda:	2b00      	cmp	r3, #0
90002edc:	d0f9      	beq.n	90002ed2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90002ede:	bf00      	nop
90002ee0:	bf00      	nop
90002ee2:	46bd      	mov	sp, r7
90002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ee8:	4770      	bx	lr
90002eea:	bf00      	nop
90002eec:	58024800 	.word	0x58024800

90002ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90002ef0:	b580      	push	{r7, lr}
90002ef2:	b082      	sub	sp, #8
90002ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002ef6:	2003      	movs	r0, #3
90002ef8:	f000 f980 	bl	900031fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90002efc:	f004 fdae 	bl	90007a5c <HAL_RCC_GetSysClockFreq>
90002f00:	4602      	mov	r2, r0
90002f02:	4b15      	ldr	r3, [pc, #84]	@ (90002f58 <HAL_Init+0x68>)
90002f04:	699b      	ldr	r3, [r3, #24]
90002f06:	0a1b      	lsrs	r3, r3, #8
90002f08:	f003 030f 	and.w	r3, r3, #15
90002f0c:	4913      	ldr	r1, [pc, #76]	@ (90002f5c <HAL_Init+0x6c>)
90002f0e:	5ccb      	ldrb	r3, [r1, r3]
90002f10:	f003 031f 	and.w	r3, r3, #31
90002f14:	fa22 f303 	lsr.w	r3, r2, r3
90002f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90002f1a:	4b0f      	ldr	r3, [pc, #60]	@ (90002f58 <HAL_Init+0x68>)
90002f1c:	699b      	ldr	r3, [r3, #24]
90002f1e:	f003 030f 	and.w	r3, r3, #15
90002f22:	4a0e      	ldr	r2, [pc, #56]	@ (90002f5c <HAL_Init+0x6c>)
90002f24:	5cd3      	ldrb	r3, [r2, r3]
90002f26:	f003 031f 	and.w	r3, r3, #31
90002f2a:	687a      	ldr	r2, [r7, #4]
90002f2c:	fa22 f303 	lsr.w	r3, r2, r3
90002f30:	4a0b      	ldr	r2, [pc, #44]	@ (90002f60 <HAL_Init+0x70>)
90002f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90002f34:	4a0b      	ldr	r2, [pc, #44]	@ (90002f64 <HAL_Init+0x74>)
90002f36:	687b      	ldr	r3, [r7, #4]
90002f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90002f3a:	200f      	movs	r0, #15
90002f3c:	f000 f81c 	bl	90002f78 <HAL_InitTick>
90002f40:	4603      	mov	r3, r0
90002f42:	2b00      	cmp	r3, #0
90002f44:	d001      	beq.n	90002f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90002f46:	2301      	movs	r3, #1
90002f48:	e002      	b.n	90002f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90002f4a:	f000 f80d 	bl	90002f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90002f4e:	2300      	movs	r3, #0
}
90002f50:	4618      	mov	r0, r3
90002f52:	3708      	adds	r7, #8
90002f54:	46bd      	mov	sp, r7
90002f56:	bd80      	pop	{r7, pc}
90002f58:	58024400 	.word	0x58024400
90002f5c:	9000aa3c 	.word	0x9000aa3c
90002f60:	2000003c 	.word	0x2000003c
90002f64:	20000038 	.word	0x20000038

90002f68 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90002f68:	b480      	push	{r7}
90002f6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90002f6c:	bf00      	nop
90002f6e:	46bd      	mov	sp, r7
90002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f74:	4770      	bx	lr
	...

90002f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002f78:	b580      	push	{r7, lr}
90002f7a:	b082      	sub	sp, #8
90002f7c:	af00      	add	r7, sp, #0
90002f7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90002f80:	4b15      	ldr	r3, [pc, #84]	@ (90002fd8 <HAL_InitTick+0x60>)
90002f82:	781b      	ldrb	r3, [r3, #0]
90002f84:	2b00      	cmp	r3, #0
90002f86:	d101      	bne.n	90002f8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90002f88:	2301      	movs	r3, #1
90002f8a:	e021      	b.n	90002fd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90002f8c:	4b13      	ldr	r3, [pc, #76]	@ (90002fdc <HAL_InitTick+0x64>)
90002f8e:	681a      	ldr	r2, [r3, #0]
90002f90:	4b11      	ldr	r3, [pc, #68]	@ (90002fd8 <HAL_InitTick+0x60>)
90002f92:	781b      	ldrb	r3, [r3, #0]
90002f94:	4619      	mov	r1, r3
90002f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90002f9a:	fbb3 f3f1 	udiv	r3, r3, r1
90002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
90002fa2:	4618      	mov	r0, r3
90002fa4:	f000 f95d 	bl	90003262 <HAL_SYSTICK_Config>
90002fa8:	4603      	mov	r3, r0
90002faa:	2b00      	cmp	r3, #0
90002fac:	d001      	beq.n	90002fb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90002fae:	2301      	movs	r3, #1
90002fb0:	e00e      	b.n	90002fd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90002fb2:	687b      	ldr	r3, [r7, #4]
90002fb4:	2b0f      	cmp	r3, #15
90002fb6:	d80a      	bhi.n	90002fce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90002fb8:	2200      	movs	r2, #0
90002fba:	6879      	ldr	r1, [r7, #4]
90002fbc:	f04f 30ff 	mov.w	r0, #4294967295
90002fc0:	f000 f927 	bl	90003212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90002fc4:	4a06      	ldr	r2, [pc, #24]	@ (90002fe0 <HAL_InitTick+0x68>)
90002fc6:	687b      	ldr	r3, [r7, #4]
90002fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90002fca:	2300      	movs	r3, #0
90002fcc:	e000      	b.n	90002fd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
90002fce:	2301      	movs	r3, #1
}
90002fd0:	4618      	mov	r0, r3
90002fd2:	3708      	adds	r7, #8
90002fd4:	46bd      	mov	sp, r7
90002fd6:	bd80      	pop	{r7, pc}
90002fd8:	20000044 	.word	0x20000044
90002fdc:	20000038 	.word	0x20000038
90002fe0:	20000040 	.word	0x20000040

90002fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90002fe4:	b480      	push	{r7}
90002fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90002fe8:	4b06      	ldr	r3, [pc, #24]	@ (90003004 <HAL_IncTick+0x20>)
90002fea:	781b      	ldrb	r3, [r3, #0]
90002fec:	461a      	mov	r2, r3
90002fee:	4b06      	ldr	r3, [pc, #24]	@ (90003008 <HAL_IncTick+0x24>)
90002ff0:	681b      	ldr	r3, [r3, #0]
90002ff2:	4413      	add	r3, r2
90002ff4:	4a04      	ldr	r2, [pc, #16]	@ (90003008 <HAL_IncTick+0x24>)
90002ff6:	6013      	str	r3, [r2, #0]
}
90002ff8:	bf00      	nop
90002ffa:	46bd      	mov	sp, r7
90002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
90003000:	4770      	bx	lr
90003002:	bf00      	nop
90003004:	20000044 	.word	0x20000044
90003008:	20001230 	.word	0x20001230

9000300c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
9000300c:	b480      	push	{r7}
9000300e:	af00      	add	r7, sp, #0
  return uwTick;
90003010:	4b03      	ldr	r3, [pc, #12]	@ (90003020 <HAL_GetTick+0x14>)
90003012:	681b      	ldr	r3, [r3, #0]
}
90003014:	4618      	mov	r0, r3
90003016:	46bd      	mov	sp, r7
90003018:	f85d 7b04 	ldr.w	r7, [sp], #4
9000301c:	4770      	bx	lr
9000301e:	bf00      	nop
90003020:	20001230 	.word	0x20001230

90003024 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003024:	b480      	push	{r7}
90003026:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003028:	4b03      	ldr	r3, [pc, #12]	@ (90003038 <HAL_GetREVID+0x14>)
9000302a:	681b      	ldr	r3, [r3, #0]
9000302c:	0c1b      	lsrs	r3, r3, #16
}
9000302e:	4618      	mov	r0, r3
90003030:	46bd      	mov	sp, r7
90003032:	f85d 7b04 	ldr.w	r7, [sp], #4
90003036:	4770      	bx	lr
90003038:	5c001000 	.word	0x5c001000

9000303c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
9000303c:	b480      	push	{r7}
9000303e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90003040:	4b05      	ldr	r3, [pc, #20]	@ (90003058 <HAL_EnableCompensationCell+0x1c>)
90003042:	6a1b      	ldr	r3, [r3, #32]
90003044:	4a04      	ldr	r2, [pc, #16]	@ (90003058 <HAL_EnableCompensationCell+0x1c>)
90003046:	f043 0301 	orr.w	r3, r3, #1
9000304a:	6213      	str	r3, [r2, #32]
}
9000304c:	bf00      	nop
9000304e:	46bd      	mov	sp, r7
90003050:	f85d 7b04 	ldr.w	r7, [sp], #4
90003054:	4770      	bx	lr
90003056:	bf00      	nop
90003058:	58000400 	.word	0x58000400

9000305c <__NVIC_SetPriorityGrouping>:
{
9000305c:	b480      	push	{r7}
9000305e:	b085      	sub	sp, #20
90003060:	af00      	add	r7, sp, #0
90003062:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003064:	687b      	ldr	r3, [r7, #4]
90003066:	f003 0307 	and.w	r3, r3, #7
9000306a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000306c:	4b0b      	ldr	r3, [pc, #44]	@ (9000309c <__NVIC_SetPriorityGrouping+0x40>)
9000306e:	68db      	ldr	r3, [r3, #12]
90003070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90003072:	68ba      	ldr	r2, [r7, #8]
90003074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003078:	4013      	ands	r3, r2
9000307a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000307c:	68fb      	ldr	r3, [r7, #12]
9000307e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003080:	68bb      	ldr	r3, [r7, #8]
90003082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003084:	4b06      	ldr	r3, [pc, #24]	@ (900030a0 <__NVIC_SetPriorityGrouping+0x44>)
90003086:	4313      	orrs	r3, r2
90003088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000308a:	4a04      	ldr	r2, [pc, #16]	@ (9000309c <__NVIC_SetPriorityGrouping+0x40>)
9000308c:	68bb      	ldr	r3, [r7, #8]
9000308e:	60d3      	str	r3, [r2, #12]
}
90003090:	bf00      	nop
90003092:	3714      	adds	r7, #20
90003094:	46bd      	mov	sp, r7
90003096:	f85d 7b04 	ldr.w	r7, [sp], #4
9000309a:	4770      	bx	lr
9000309c:	e000ed00 	.word	0xe000ed00
900030a0:	05fa0000 	.word	0x05fa0000

900030a4 <__NVIC_GetPriorityGrouping>:
{
900030a4:	b480      	push	{r7}
900030a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900030a8:	4b04      	ldr	r3, [pc, #16]	@ (900030bc <__NVIC_GetPriorityGrouping+0x18>)
900030aa:	68db      	ldr	r3, [r3, #12]
900030ac:	0a1b      	lsrs	r3, r3, #8
900030ae:	f003 0307 	and.w	r3, r3, #7
}
900030b2:	4618      	mov	r0, r3
900030b4:	46bd      	mov	sp, r7
900030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900030ba:	4770      	bx	lr
900030bc:	e000ed00 	.word	0xe000ed00

900030c0 <__NVIC_EnableIRQ>:
{
900030c0:	b480      	push	{r7}
900030c2:	b083      	sub	sp, #12
900030c4:	af00      	add	r7, sp, #0
900030c6:	4603      	mov	r3, r0
900030c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900030ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900030ce:	2b00      	cmp	r3, #0
900030d0:	db0b      	blt.n	900030ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900030d2:	88fb      	ldrh	r3, [r7, #6]
900030d4:	f003 021f 	and.w	r2, r3, #31
900030d8:	4907      	ldr	r1, [pc, #28]	@ (900030f8 <__NVIC_EnableIRQ+0x38>)
900030da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900030de:	095b      	lsrs	r3, r3, #5
900030e0:	2001      	movs	r0, #1
900030e2:	fa00 f202 	lsl.w	r2, r0, r2
900030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900030ea:	bf00      	nop
900030ec:	370c      	adds	r7, #12
900030ee:	46bd      	mov	sp, r7
900030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900030f4:	4770      	bx	lr
900030f6:	bf00      	nop
900030f8:	e000e100 	.word	0xe000e100

900030fc <__NVIC_SetPriority>:
{
900030fc:	b480      	push	{r7}
900030fe:	b083      	sub	sp, #12
90003100:	af00      	add	r7, sp, #0
90003102:	4603      	mov	r3, r0
90003104:	6039      	str	r1, [r7, #0]
90003106:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000310c:	2b00      	cmp	r3, #0
9000310e:	db0a      	blt.n	90003126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003110:	683b      	ldr	r3, [r7, #0]
90003112:	b2da      	uxtb	r2, r3
90003114:	490c      	ldr	r1, [pc, #48]	@ (90003148 <__NVIC_SetPriority+0x4c>)
90003116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000311a:	0112      	lsls	r2, r2, #4
9000311c:	b2d2      	uxtb	r2, r2
9000311e:	440b      	add	r3, r1
90003120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003124:	e00a      	b.n	9000313c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003126:	683b      	ldr	r3, [r7, #0]
90003128:	b2da      	uxtb	r2, r3
9000312a:	4908      	ldr	r1, [pc, #32]	@ (9000314c <__NVIC_SetPriority+0x50>)
9000312c:	88fb      	ldrh	r3, [r7, #6]
9000312e:	f003 030f 	and.w	r3, r3, #15
90003132:	3b04      	subs	r3, #4
90003134:	0112      	lsls	r2, r2, #4
90003136:	b2d2      	uxtb	r2, r2
90003138:	440b      	add	r3, r1
9000313a:	761a      	strb	r2, [r3, #24]
}
9000313c:	bf00      	nop
9000313e:	370c      	adds	r7, #12
90003140:	46bd      	mov	sp, r7
90003142:	f85d 7b04 	ldr.w	r7, [sp], #4
90003146:	4770      	bx	lr
90003148:	e000e100 	.word	0xe000e100
9000314c:	e000ed00 	.word	0xe000ed00

90003150 <NVIC_EncodePriority>:
{
90003150:	b480      	push	{r7}
90003152:	b089      	sub	sp, #36	@ 0x24
90003154:	af00      	add	r7, sp, #0
90003156:	60f8      	str	r0, [r7, #12]
90003158:	60b9      	str	r1, [r7, #8]
9000315a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
9000315c:	68fb      	ldr	r3, [r7, #12]
9000315e:	f003 0307 	and.w	r3, r3, #7
90003162:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003164:	69fb      	ldr	r3, [r7, #28]
90003166:	f1c3 0307 	rsb	r3, r3, #7
9000316a:	2b04      	cmp	r3, #4
9000316c:	bf28      	it	cs
9000316e:	2304      	movcs	r3, #4
90003170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90003172:	69fb      	ldr	r3, [r7, #28]
90003174:	3304      	adds	r3, #4
90003176:	2b06      	cmp	r3, #6
90003178:	d902      	bls.n	90003180 <NVIC_EncodePriority+0x30>
9000317a:	69fb      	ldr	r3, [r7, #28]
9000317c:	3b03      	subs	r3, #3
9000317e:	e000      	b.n	90003182 <NVIC_EncodePriority+0x32>
90003180:	2300      	movs	r3, #0
90003182:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003184:	f04f 32ff 	mov.w	r2, #4294967295
90003188:	69bb      	ldr	r3, [r7, #24]
9000318a:	fa02 f303 	lsl.w	r3, r2, r3
9000318e:	43da      	mvns	r2, r3
90003190:	68bb      	ldr	r3, [r7, #8]
90003192:	401a      	ands	r2, r3
90003194:	697b      	ldr	r3, [r7, #20]
90003196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003198:	f04f 31ff 	mov.w	r1, #4294967295
9000319c:	697b      	ldr	r3, [r7, #20]
9000319e:	fa01 f303 	lsl.w	r3, r1, r3
900031a2:	43d9      	mvns	r1, r3
900031a4:	687b      	ldr	r3, [r7, #4]
900031a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900031a8:	4313      	orrs	r3, r2
}
900031aa:	4618      	mov	r0, r3
900031ac:	3724      	adds	r7, #36	@ 0x24
900031ae:	46bd      	mov	sp, r7
900031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900031b4:	4770      	bx	lr
	...

900031b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900031b8:	b580      	push	{r7, lr}
900031ba:	b082      	sub	sp, #8
900031bc:	af00      	add	r7, sp, #0
900031be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900031c0:	687b      	ldr	r3, [r7, #4]
900031c2:	3b01      	subs	r3, #1
900031c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900031c8:	d301      	bcc.n	900031ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900031ca:	2301      	movs	r3, #1
900031cc:	e00f      	b.n	900031ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900031ce:	4a0a      	ldr	r2, [pc, #40]	@ (900031f8 <SysTick_Config+0x40>)
900031d0:	687b      	ldr	r3, [r7, #4]
900031d2:	3b01      	subs	r3, #1
900031d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900031d6:	210f      	movs	r1, #15
900031d8:	f04f 30ff 	mov.w	r0, #4294967295
900031dc:	f7ff ff8e 	bl	900030fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900031e0:	4b05      	ldr	r3, [pc, #20]	@ (900031f8 <SysTick_Config+0x40>)
900031e2:	2200      	movs	r2, #0
900031e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900031e6:	4b04      	ldr	r3, [pc, #16]	@ (900031f8 <SysTick_Config+0x40>)
900031e8:	2207      	movs	r2, #7
900031ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900031ec:	2300      	movs	r3, #0
}
900031ee:	4618      	mov	r0, r3
900031f0:	3708      	adds	r7, #8
900031f2:	46bd      	mov	sp, r7
900031f4:	bd80      	pop	{r7, pc}
900031f6:	bf00      	nop
900031f8:	e000e010 	.word	0xe000e010

900031fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900031fc:	b580      	push	{r7, lr}
900031fe:	b082      	sub	sp, #8
90003200:	af00      	add	r7, sp, #0
90003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003204:	6878      	ldr	r0, [r7, #4]
90003206:	f7ff ff29 	bl	9000305c <__NVIC_SetPriorityGrouping>
}
9000320a:	bf00      	nop
9000320c:	3708      	adds	r7, #8
9000320e:	46bd      	mov	sp, r7
90003210:	bd80      	pop	{r7, pc}

90003212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003212:	b580      	push	{r7, lr}
90003214:	b086      	sub	sp, #24
90003216:	af00      	add	r7, sp, #0
90003218:	4603      	mov	r3, r0
9000321a:	60b9      	str	r1, [r7, #8]
9000321c:	607a      	str	r2, [r7, #4]
9000321e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003220:	f7ff ff40 	bl	900030a4 <__NVIC_GetPriorityGrouping>
90003224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003226:	687a      	ldr	r2, [r7, #4]
90003228:	68b9      	ldr	r1, [r7, #8]
9000322a:	6978      	ldr	r0, [r7, #20]
9000322c:	f7ff ff90 	bl	90003150 <NVIC_EncodePriority>
90003230:	4602      	mov	r2, r0
90003232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003236:	4611      	mov	r1, r2
90003238:	4618      	mov	r0, r3
9000323a:	f7ff ff5f 	bl	900030fc <__NVIC_SetPriority>
}
9000323e:	bf00      	nop
90003240:	3718      	adds	r7, #24
90003242:	46bd      	mov	sp, r7
90003244:	bd80      	pop	{r7, pc}

90003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003246:	b580      	push	{r7, lr}
90003248:	b082      	sub	sp, #8
9000324a:	af00      	add	r7, sp, #0
9000324c:	4603      	mov	r3, r0
9000324e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003254:	4618      	mov	r0, r3
90003256:	f7ff ff33 	bl	900030c0 <__NVIC_EnableIRQ>
}
9000325a:	bf00      	nop
9000325c:	3708      	adds	r7, #8
9000325e:	46bd      	mov	sp, r7
90003260:	bd80      	pop	{r7, pc}

90003262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90003262:	b580      	push	{r7, lr}
90003264:	b082      	sub	sp, #8
90003266:	af00      	add	r7, sp, #0
90003268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
9000326a:	6878      	ldr	r0, [r7, #4]
9000326c:	f7ff ffa4 	bl	900031b8 <SysTick_Config>
90003270:	4603      	mov	r3, r0
}
90003272:	4618      	mov	r0, r3
90003274:	3708      	adds	r7, #8
90003276:	46bd      	mov	sp, r7
90003278:	bd80      	pop	{r7, pc}
	...

9000327c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
9000327c:	b480      	push	{r7}
9000327e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90003280:	f3bf 8f5f 	dmb	sy
}
90003284:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003286:	4b07      	ldr	r3, [pc, #28]	@ (900032a4 <HAL_MPU_Disable+0x28>)
90003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000328a:	4a06      	ldr	r2, [pc, #24]	@ (900032a4 <HAL_MPU_Disable+0x28>)
9000328c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90003290:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90003292:	4b05      	ldr	r3, [pc, #20]	@ (900032a8 <HAL_MPU_Disable+0x2c>)
90003294:	2200      	movs	r2, #0
90003296:	605a      	str	r2, [r3, #4]
}
90003298:	bf00      	nop
9000329a:	46bd      	mov	sp, r7
9000329c:	f85d 7b04 	ldr.w	r7, [sp], #4
900032a0:	4770      	bx	lr
900032a2:	bf00      	nop
900032a4:	e000ed00 	.word	0xe000ed00
900032a8:	e000ed90 	.word	0xe000ed90

900032ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900032ac:	b480      	push	{r7}
900032ae:	b083      	sub	sp, #12
900032b0:	af00      	add	r7, sp, #0
900032b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900032b4:	4a0b      	ldr	r2, [pc, #44]	@ (900032e4 <HAL_MPU_Enable+0x38>)
900032b6:	687b      	ldr	r3, [r7, #4]
900032b8:	f043 0301 	orr.w	r3, r3, #1
900032bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900032be:	4b0a      	ldr	r3, [pc, #40]	@ (900032e8 <HAL_MPU_Enable+0x3c>)
900032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900032c2:	4a09      	ldr	r2, [pc, #36]	@ (900032e8 <HAL_MPU_Enable+0x3c>)
900032c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900032c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900032ca:	f3bf 8f4f 	dsb	sy
}
900032ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900032d0:	f3bf 8f6f 	isb	sy
}
900032d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900032d6:	bf00      	nop
900032d8:	370c      	adds	r7, #12
900032da:	46bd      	mov	sp, r7
900032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900032e0:	4770      	bx	lr
900032e2:	bf00      	nop
900032e4:	e000ed90 	.word	0xe000ed90
900032e8:	e000ed00 	.word	0xe000ed00

900032ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
900032ec:	b480      	push	{r7}
900032ee:	b083      	sub	sp, #12
900032f0:	af00      	add	r7, sp, #0
900032f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900032f4:	687b      	ldr	r3, [r7, #4]
900032f6:	785a      	ldrb	r2, [r3, #1]
900032f8:	4b1b      	ldr	r3, [pc, #108]	@ (90003368 <HAL_MPU_ConfigRegion+0x7c>)
900032fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
900032fc:	4b1a      	ldr	r3, [pc, #104]	@ (90003368 <HAL_MPU_ConfigRegion+0x7c>)
900032fe:	691b      	ldr	r3, [r3, #16]
90003300:	4a19      	ldr	r2, [pc, #100]	@ (90003368 <HAL_MPU_ConfigRegion+0x7c>)
90003302:	f023 0301 	bic.w	r3, r3, #1
90003306:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003308:	4a17      	ldr	r2, [pc, #92]	@ (90003368 <HAL_MPU_ConfigRegion+0x7c>)
9000330a:	687b      	ldr	r3, [r7, #4]
9000330c:	685b      	ldr	r3, [r3, #4]
9000330e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003310:	687b      	ldr	r3, [r7, #4]
90003312:	7b1b      	ldrb	r3, [r3, #12]
90003314:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003316:	687b      	ldr	r3, [r7, #4]
90003318:	7adb      	ldrb	r3, [r3, #11]
9000331a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000331c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000331e:	687b      	ldr	r3, [r7, #4]
90003320:	7a9b      	ldrb	r3, [r3, #10]
90003322:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003324:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003326:	687b      	ldr	r3, [r7, #4]
90003328:	7b5b      	ldrb	r3, [r3, #13]
9000332a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000332c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000332e:	687b      	ldr	r3, [r7, #4]
90003330:	7b9b      	ldrb	r3, [r3, #14]
90003332:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003336:	687b      	ldr	r3, [r7, #4]
90003338:	7bdb      	ldrb	r3, [r3, #15]
9000333a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000333c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000333e:	687b      	ldr	r3, [r7, #4]
90003340:	7a5b      	ldrb	r3, [r3, #9]
90003342:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003344:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003346:	687b      	ldr	r3, [r7, #4]
90003348:	7a1b      	ldrb	r3, [r3, #8]
9000334a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000334c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000334e:	687a      	ldr	r2, [r7, #4]
90003350:	7812      	ldrb	r2, [r2, #0]
90003352:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003354:	4a04      	ldr	r2, [pc, #16]	@ (90003368 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003356:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003358:	6113      	str	r3, [r2, #16]
}
9000335a:	bf00      	nop
9000335c:	370c      	adds	r7, #12
9000335e:	46bd      	mov	sp, r7
90003360:	f85d 7b04 	ldr.w	r7, [sp], #4
90003364:	4770      	bx	lr
90003366:	bf00      	nop
90003368:	e000ed90 	.word	0xe000ed90

9000336c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
9000336c:	b580      	push	{r7, lr}
9000336e:	b082      	sub	sp, #8
90003370:	af00      	add	r7, sp, #0
90003372:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003374:	687b      	ldr	r3, [r7, #4]
90003376:	2b00      	cmp	r3, #0
90003378:	d101      	bne.n	9000337e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
9000337a:	2301      	movs	r3, #1
9000337c:	e04f      	b.n	9000341e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
9000337e:	687b      	ldr	r3, [r7, #4]
90003380:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003384:	b2db      	uxtb	r3, r3
90003386:	2b00      	cmp	r3, #0
90003388:	d106      	bne.n	90003398 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
9000338a:	687b      	ldr	r3, [r7, #4]
9000338c:	2200      	movs	r2, #0
9000338e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90003392:	6878      	ldr	r0, [r7, #4]
90003394:	f000 f84e 	bl	90003434 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003398:	687b      	ldr	r3, [r7, #4]
9000339a:	2202      	movs	r2, #2
9000339c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900033a0:	687b      	ldr	r3, [r7, #4]
900033a2:	681b      	ldr	r3, [r3, #0]
900033a4:	681a      	ldr	r2, [r3, #0]
900033a6:	4b20      	ldr	r3, [pc, #128]	@ (90003428 <HAL_DMA2D_Init+0xbc>)
900033a8:	4013      	ands	r3, r2
900033aa:	687a      	ldr	r2, [r7, #4]
900033ac:	6851      	ldr	r1, [r2, #4]
900033ae:	687a      	ldr	r2, [r7, #4]
900033b0:	69d2      	ldr	r2, [r2, #28]
900033b2:	4311      	orrs	r1, r2
900033b4:	687a      	ldr	r2, [r7, #4]
900033b6:	6812      	ldr	r2, [r2, #0]
900033b8:	430b      	orrs	r3, r1
900033ba:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900033bc:	687b      	ldr	r3, [r7, #4]
900033be:	681b      	ldr	r3, [r3, #0]
900033c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900033c2:	4b1a      	ldr	r3, [pc, #104]	@ (9000342c <HAL_DMA2D_Init+0xc0>)
900033c4:	4013      	ands	r3, r2
900033c6:	687a      	ldr	r2, [r7, #4]
900033c8:	6891      	ldr	r1, [r2, #8]
900033ca:	687a      	ldr	r2, [r7, #4]
900033cc:	6992      	ldr	r2, [r2, #24]
900033ce:	4311      	orrs	r1, r2
900033d0:	687a      	ldr	r2, [r7, #4]
900033d2:	6812      	ldr	r2, [r2, #0]
900033d4:	430b      	orrs	r3, r1
900033d6:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900033d8:	687b      	ldr	r3, [r7, #4]
900033da:	681b      	ldr	r3, [r3, #0]
900033dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
900033de:	4b14      	ldr	r3, [pc, #80]	@ (90003430 <HAL_DMA2D_Init+0xc4>)
900033e0:	4013      	ands	r3, r2
900033e2:	687a      	ldr	r2, [r7, #4]
900033e4:	68d1      	ldr	r1, [r2, #12]
900033e6:	687a      	ldr	r2, [r7, #4]
900033e8:	6812      	ldr	r2, [r2, #0]
900033ea:	430b      	orrs	r3, r1
900033ec:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
900033ee:	687b      	ldr	r3, [r7, #4]
900033f0:	681b      	ldr	r3, [r3, #0]
900033f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900033f4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900033f8:	687b      	ldr	r3, [r7, #4]
900033fa:	691b      	ldr	r3, [r3, #16]
900033fc:	051a      	lsls	r2, r3, #20
900033fe:	687b      	ldr	r3, [r7, #4]
90003400:	695b      	ldr	r3, [r3, #20]
90003402:	055b      	lsls	r3, r3, #21
90003404:	431a      	orrs	r2, r3
90003406:	687b      	ldr	r3, [r7, #4]
90003408:	681b      	ldr	r3, [r3, #0]
9000340a:	430a      	orrs	r2, r1
9000340c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000340e:	687b      	ldr	r3, [r7, #4]
90003410:	2200      	movs	r2, #0
90003412:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003414:	687b      	ldr	r3, [r7, #4]
90003416:	2201      	movs	r2, #1
90003418:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
9000341c:	2300      	movs	r3, #0
}
9000341e:	4618      	mov	r0, r3
90003420:	3708      	adds	r7, #8
90003422:	46bd      	mov	sp, r7
90003424:	bd80      	pop	{r7, pc}
90003426:	bf00      	nop
90003428:	fff8ffbf 	.word	0xfff8ffbf
9000342c:	fffffef8 	.word	0xfffffef8
90003430:	ffff0000 	.word	0xffff0000

90003434 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003434:	b480      	push	{r7}
90003436:	b083      	sub	sp, #12
90003438:	af00      	add	r7, sp, #0
9000343a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
9000343c:	bf00      	nop
9000343e:	370c      	adds	r7, #12
90003440:	46bd      	mov	sp, r7
90003442:	f85d 7b04 	ldr.w	r7, [sp], #4
90003446:	4770      	bx	lr

90003448 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003448:	b580      	push	{r7, lr}
9000344a:	b086      	sub	sp, #24
9000344c:	af02      	add	r7, sp, #8
9000344e:	60f8      	str	r0, [r7, #12]
90003450:	60b9      	str	r1, [r7, #8]
90003452:	607a      	str	r2, [r7, #4]
90003454:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003456:	68fb      	ldr	r3, [r7, #12]
90003458:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
9000345c:	2b01      	cmp	r3, #1
9000345e:	d101      	bne.n	90003464 <HAL_DMA2D_Start+0x1c>
90003460:	2302      	movs	r3, #2
90003462:	e018      	b.n	90003496 <HAL_DMA2D_Start+0x4e>
90003464:	68fb      	ldr	r3, [r7, #12]
90003466:	2201      	movs	r2, #1
90003468:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000346c:	68fb      	ldr	r3, [r7, #12]
9000346e:	2202      	movs	r2, #2
90003470:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003474:	69bb      	ldr	r3, [r7, #24]
90003476:	9300      	str	r3, [sp, #0]
90003478:	683b      	ldr	r3, [r7, #0]
9000347a:	687a      	ldr	r2, [r7, #4]
9000347c:	68b9      	ldr	r1, [r7, #8]
9000347e:	68f8      	ldr	r0, [r7, #12]
90003480:	f000 f9a4 	bl	900037cc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003484:	68fb      	ldr	r3, [r7, #12]
90003486:	681b      	ldr	r3, [r3, #0]
90003488:	681a      	ldr	r2, [r3, #0]
9000348a:	68fb      	ldr	r3, [r7, #12]
9000348c:	681b      	ldr	r3, [r3, #0]
9000348e:	f042 0201 	orr.w	r2, r2, #1
90003492:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003494:	2300      	movs	r3, #0
}
90003496:	4618      	mov	r0, r3
90003498:	3710      	adds	r7, #16
9000349a:	46bd      	mov	sp, r7
9000349c:	bd80      	pop	{r7, pc}

9000349e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
9000349e:	b580      	push	{r7, lr}
900034a0:	b086      	sub	sp, #24
900034a2:	af00      	add	r7, sp, #0
900034a4:	6078      	str	r0, [r7, #4]
900034a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900034a8:	2300      	movs	r3, #0
900034aa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900034ac:	687b      	ldr	r3, [r7, #4]
900034ae:	681b      	ldr	r3, [r3, #0]
900034b0:	681b      	ldr	r3, [r3, #0]
900034b2:	f003 0301 	and.w	r3, r3, #1
900034b6:	2b00      	cmp	r3, #0
900034b8:	d056      	beq.n	90003568 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900034ba:	f7ff fda7 	bl	9000300c <HAL_GetTick>
900034be:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900034c0:	e04b      	b.n	9000355a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900034c2:	687b      	ldr	r3, [r7, #4]
900034c4:	681b      	ldr	r3, [r3, #0]
900034c6:	685b      	ldr	r3, [r3, #4]
900034c8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900034ca:	68fb      	ldr	r3, [r7, #12]
900034cc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
900034d0:	2b00      	cmp	r3, #0
900034d2:	d023      	beq.n	9000351c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900034d4:	68fb      	ldr	r3, [r7, #12]
900034d6:	f003 0320 	and.w	r3, r3, #32
900034da:	2b00      	cmp	r3, #0
900034dc:	d005      	beq.n	900034ea <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900034de:	687b      	ldr	r3, [r7, #4]
900034e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900034e2:	f043 0202 	orr.w	r2, r3, #2
900034e6:	687b      	ldr	r3, [r7, #4]
900034e8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900034ea:	68fb      	ldr	r3, [r7, #12]
900034ec:	f003 0301 	and.w	r3, r3, #1
900034f0:	2b00      	cmp	r3, #0
900034f2:	d005      	beq.n	90003500 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900034f4:	687b      	ldr	r3, [r7, #4]
900034f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900034f8:	f043 0201 	orr.w	r2, r3, #1
900034fc:	687b      	ldr	r3, [r7, #4]
900034fe:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003500:	687b      	ldr	r3, [r7, #4]
90003502:	681b      	ldr	r3, [r3, #0]
90003504:	2221      	movs	r2, #33	@ 0x21
90003506:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003508:	687b      	ldr	r3, [r7, #4]
9000350a:	2204      	movs	r2, #4
9000350c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003510:	687b      	ldr	r3, [r7, #4]
90003512:	2200      	movs	r2, #0
90003514:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003518:	2301      	movs	r3, #1
9000351a:	e0a5      	b.n	90003668 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000351c:	683b      	ldr	r3, [r7, #0]
9000351e:	f1b3 3fff 	cmp.w	r3, #4294967295
90003522:	d01a      	beq.n	9000355a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003524:	f7ff fd72 	bl	9000300c <HAL_GetTick>
90003528:	4602      	mov	r2, r0
9000352a:	697b      	ldr	r3, [r7, #20]
9000352c:	1ad3      	subs	r3, r2, r3
9000352e:	683a      	ldr	r2, [r7, #0]
90003530:	429a      	cmp	r2, r3
90003532:	d302      	bcc.n	9000353a <HAL_DMA2D_PollForTransfer+0x9c>
90003534:	683b      	ldr	r3, [r7, #0]
90003536:	2b00      	cmp	r3, #0
90003538:	d10f      	bne.n	9000355a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000353a:	687b      	ldr	r3, [r7, #4]
9000353c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000353e:	f043 0220 	orr.w	r2, r3, #32
90003542:	687b      	ldr	r3, [r7, #4]
90003544:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003546:	687b      	ldr	r3, [r7, #4]
90003548:	2203      	movs	r2, #3
9000354a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000354e:	687b      	ldr	r3, [r7, #4]
90003550:	2200      	movs	r2, #0
90003552:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003556:	2303      	movs	r3, #3
90003558:	e086      	b.n	90003668 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000355a:	687b      	ldr	r3, [r7, #4]
9000355c:	681b      	ldr	r3, [r3, #0]
9000355e:	685b      	ldr	r3, [r3, #4]
90003560:	f003 0302 	and.w	r3, r3, #2
90003564:	2b00      	cmp	r3, #0
90003566:	d0ac      	beq.n	900034c2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003568:	687b      	ldr	r3, [r7, #4]
9000356a:	681b      	ldr	r3, [r3, #0]
9000356c:	69db      	ldr	r3, [r3, #28]
9000356e:	f003 0320 	and.w	r3, r3, #32
90003572:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003574:	687b      	ldr	r3, [r7, #4]
90003576:	681b      	ldr	r3, [r3, #0]
90003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000357a:	f003 0320 	and.w	r3, r3, #32
9000357e:	693a      	ldr	r2, [r7, #16]
90003580:	4313      	orrs	r3, r2
90003582:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003584:	693b      	ldr	r3, [r7, #16]
90003586:	2b00      	cmp	r3, #0
90003588:	d061      	beq.n	9000364e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000358a:	f7ff fd3f 	bl	9000300c <HAL_GetTick>
9000358e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003590:	e056      	b.n	90003640 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003592:	687b      	ldr	r3, [r7, #4]
90003594:	681b      	ldr	r3, [r3, #0]
90003596:	685b      	ldr	r3, [r3, #4]
90003598:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000359a:	68fb      	ldr	r3, [r7, #12]
9000359c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
900035a0:	2b00      	cmp	r3, #0
900035a2:	d02e      	beq.n	90003602 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900035a4:	68fb      	ldr	r3, [r7, #12]
900035a6:	f003 0308 	and.w	r3, r3, #8
900035aa:	2b00      	cmp	r3, #0
900035ac:	d005      	beq.n	900035ba <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900035ae:	687b      	ldr	r3, [r7, #4]
900035b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900035b2:	f043 0204 	orr.w	r2, r3, #4
900035b6:	687b      	ldr	r3, [r7, #4]
900035b8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900035ba:	68fb      	ldr	r3, [r7, #12]
900035bc:	f003 0320 	and.w	r3, r3, #32
900035c0:	2b00      	cmp	r3, #0
900035c2:	d005      	beq.n	900035d0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900035c4:	687b      	ldr	r3, [r7, #4]
900035c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900035c8:	f043 0202 	orr.w	r2, r3, #2
900035cc:	687b      	ldr	r3, [r7, #4]
900035ce:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900035d0:	68fb      	ldr	r3, [r7, #12]
900035d2:	f003 0301 	and.w	r3, r3, #1
900035d6:	2b00      	cmp	r3, #0
900035d8:	d005      	beq.n	900035e6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900035da:	687b      	ldr	r3, [r7, #4]
900035dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900035de:	f043 0201 	orr.w	r2, r3, #1
900035e2:	687b      	ldr	r3, [r7, #4]
900035e4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900035e6:	687b      	ldr	r3, [r7, #4]
900035e8:	681b      	ldr	r3, [r3, #0]
900035ea:	2229      	movs	r2, #41	@ 0x29
900035ec:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900035ee:	687b      	ldr	r3, [r7, #4]
900035f0:	2204      	movs	r2, #4
900035f2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900035f6:	687b      	ldr	r3, [r7, #4]
900035f8:	2200      	movs	r2, #0
900035fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
900035fe:	2301      	movs	r3, #1
90003600:	e032      	b.n	90003668 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003602:	683b      	ldr	r3, [r7, #0]
90003604:	f1b3 3fff 	cmp.w	r3, #4294967295
90003608:	d01a      	beq.n	90003640 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000360a:	f7ff fcff 	bl	9000300c <HAL_GetTick>
9000360e:	4602      	mov	r2, r0
90003610:	697b      	ldr	r3, [r7, #20]
90003612:	1ad3      	subs	r3, r2, r3
90003614:	683a      	ldr	r2, [r7, #0]
90003616:	429a      	cmp	r2, r3
90003618:	d302      	bcc.n	90003620 <HAL_DMA2D_PollForTransfer+0x182>
9000361a:	683b      	ldr	r3, [r7, #0]
9000361c:	2b00      	cmp	r3, #0
9000361e:	d10f      	bne.n	90003640 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003620:	687b      	ldr	r3, [r7, #4]
90003622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003624:	f043 0220 	orr.w	r2, r3, #32
90003628:	687b      	ldr	r3, [r7, #4]
9000362a:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000362c:	687b      	ldr	r3, [r7, #4]
9000362e:	2203      	movs	r2, #3
90003630:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003634:	687b      	ldr	r3, [r7, #4]
90003636:	2200      	movs	r2, #0
90003638:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
9000363c:	2303      	movs	r3, #3
9000363e:	e013      	b.n	90003668 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003640:	687b      	ldr	r3, [r7, #4]
90003642:	681b      	ldr	r3, [r3, #0]
90003644:	685b      	ldr	r3, [r3, #4]
90003646:	f003 0310 	and.w	r3, r3, #16
9000364a:	2b00      	cmp	r3, #0
9000364c:	d0a1      	beq.n	90003592 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
9000364e:	687b      	ldr	r3, [r7, #4]
90003650:	681b      	ldr	r3, [r3, #0]
90003652:	2212      	movs	r2, #18
90003654:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003656:	687b      	ldr	r3, [r7, #4]
90003658:	2201      	movs	r2, #1
9000365a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000365e:	687b      	ldr	r3, [r7, #4]
90003660:	2200      	movs	r2, #0
90003662:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003666:	2300      	movs	r3, #0
}
90003668:	4618      	mov	r0, r3
9000366a:	3718      	adds	r7, #24
9000366c:	46bd      	mov	sp, r7
9000366e:	bd80      	pop	{r7, pc}

90003670 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003670:	b480      	push	{r7}
90003672:	b087      	sub	sp, #28
90003674:	af00      	add	r7, sp, #0
90003676:	6078      	str	r0, [r7, #4]
90003678:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
9000367a:	687b      	ldr	r3, [r7, #4]
9000367c:	685b      	ldr	r3, [r3, #4]
9000367e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003682:	683b      	ldr	r3, [r7, #0]
90003684:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003686:	687b      	ldr	r3, [r7, #4]
90003688:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
9000368c:	2b01      	cmp	r3, #1
9000368e:	d101      	bne.n	90003694 <HAL_DMA2D_ConfigLayer+0x24>
90003690:	2302      	movs	r3, #2
90003692:	e092      	b.n	900037ba <HAL_DMA2D_ConfigLayer+0x14a>
90003694:	687b      	ldr	r3, [r7, #4]
90003696:	2201      	movs	r2, #1
90003698:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000369c:	687b      	ldr	r3, [r7, #4]
9000369e:	2202      	movs	r2, #2
900036a0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900036a4:	683a      	ldr	r2, [r7, #0]
900036a6:	4613      	mov	r3, r2
900036a8:	00db      	lsls	r3, r3, #3
900036aa:	1a9b      	subs	r3, r3, r2
900036ac:	009b      	lsls	r3, r3, #2
900036ae:	3328      	adds	r3, #40	@ 0x28
900036b0:	687a      	ldr	r2, [r7, #4]
900036b2:	4413      	add	r3, r2
900036b4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900036b6:	68fb      	ldr	r3, [r7, #12]
900036b8:	685a      	ldr	r2, [r3, #4]
900036ba:	68fb      	ldr	r3, [r7, #12]
900036bc:	689b      	ldr	r3, [r3, #8]
900036be:	041b      	lsls	r3, r3, #16
900036c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900036c2:	68fb      	ldr	r3, [r7, #12]
900036c4:	691b      	ldr	r3, [r3, #16]
900036c6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900036c8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900036ca:	68fb      	ldr	r3, [r7, #12]
900036cc:	695b      	ldr	r3, [r3, #20]
900036ce:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900036d0:	4313      	orrs	r3, r2
900036d2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
900036d4:	4b3c      	ldr	r3, [pc, #240]	@ (900037c8 <HAL_DMA2D_ConfigLayer+0x158>)
900036d6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900036d8:	68fb      	ldr	r3, [r7, #12]
900036da:	685b      	ldr	r3, [r3, #4]
900036dc:	2b0a      	cmp	r3, #10
900036de:	d003      	beq.n	900036e8 <HAL_DMA2D_ConfigLayer+0x78>
900036e0:	68fb      	ldr	r3, [r7, #12]
900036e2:	685b      	ldr	r3, [r3, #4]
900036e4:	2b09      	cmp	r3, #9
900036e6:	d107      	bne.n	900036f8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900036e8:	68fb      	ldr	r3, [r7, #12]
900036ea:	68db      	ldr	r3, [r3, #12]
900036ec:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
900036f0:	693a      	ldr	r2, [r7, #16]
900036f2:	4313      	orrs	r3, r2
900036f4:	613b      	str	r3, [r7, #16]
900036f6:	e005      	b.n	90003704 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900036f8:	68fb      	ldr	r3, [r7, #12]
900036fa:	68db      	ldr	r3, [r3, #12]
900036fc:	061b      	lsls	r3, r3, #24
900036fe:	693a      	ldr	r2, [r7, #16]
90003700:	4313      	orrs	r3, r2
90003702:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003704:	683b      	ldr	r3, [r7, #0]
90003706:	2b00      	cmp	r3, #0
90003708:	d120      	bne.n	9000374c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000370a:	687b      	ldr	r3, [r7, #4]
9000370c:	681b      	ldr	r3, [r3, #0]
9000370e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003710:	697b      	ldr	r3, [r7, #20]
90003712:	43db      	mvns	r3, r3
90003714:	ea02 0103 	and.w	r1, r2, r3
90003718:	687b      	ldr	r3, [r7, #4]
9000371a:	681b      	ldr	r3, [r3, #0]
9000371c:	693a      	ldr	r2, [r7, #16]
9000371e:	430a      	orrs	r2, r1
90003720:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003722:	687b      	ldr	r3, [r7, #4]
90003724:	681b      	ldr	r3, [r3, #0]
90003726:	68fa      	ldr	r2, [r7, #12]
90003728:	6812      	ldr	r2, [r2, #0]
9000372a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000372c:	68fb      	ldr	r3, [r7, #12]
9000372e:	685b      	ldr	r3, [r3, #4]
90003730:	2b0a      	cmp	r3, #10
90003732:	d003      	beq.n	9000373c <HAL_DMA2D_ConfigLayer+0xcc>
90003734:	68fb      	ldr	r3, [r7, #12]
90003736:	685b      	ldr	r3, [r3, #4]
90003738:	2b09      	cmp	r3, #9
9000373a:	d135      	bne.n	900037a8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000373c:	68fb      	ldr	r3, [r7, #12]
9000373e:	68da      	ldr	r2, [r3, #12]
90003740:	687b      	ldr	r3, [r7, #4]
90003742:	681b      	ldr	r3, [r3, #0]
90003744:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003748:	629a      	str	r2, [r3, #40]	@ 0x28
9000374a:	e02d      	b.n	900037a8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
9000374c:	68fb      	ldr	r3, [r7, #12]
9000374e:	685b      	ldr	r3, [r3, #4]
90003750:	2b0b      	cmp	r3, #11
90003752:	d109      	bne.n	90003768 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003754:	68fb      	ldr	r3, [r7, #12]
90003756:	699b      	ldr	r3, [r3, #24]
90003758:	049b      	lsls	r3, r3, #18
9000375a:	693a      	ldr	r2, [r7, #16]
9000375c:	4313      	orrs	r3, r2
9000375e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003760:	697b      	ldr	r3, [r7, #20]
90003762:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003766:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003768:	687b      	ldr	r3, [r7, #4]
9000376a:	681b      	ldr	r3, [r3, #0]
9000376c:	69da      	ldr	r2, [r3, #28]
9000376e:	697b      	ldr	r3, [r7, #20]
90003770:	43db      	mvns	r3, r3
90003772:	ea02 0103 	and.w	r1, r2, r3
90003776:	687b      	ldr	r3, [r7, #4]
90003778:	681b      	ldr	r3, [r3, #0]
9000377a:	693a      	ldr	r2, [r7, #16]
9000377c:	430a      	orrs	r2, r1
9000377e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	681b      	ldr	r3, [r3, #0]
90003784:	68fa      	ldr	r2, [r7, #12]
90003786:	6812      	ldr	r2, [r2, #0]
90003788:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000378a:	68fb      	ldr	r3, [r7, #12]
9000378c:	685b      	ldr	r3, [r3, #4]
9000378e:	2b0a      	cmp	r3, #10
90003790:	d003      	beq.n	9000379a <HAL_DMA2D_ConfigLayer+0x12a>
90003792:	68fb      	ldr	r3, [r7, #12]
90003794:	685b      	ldr	r3, [r3, #4]
90003796:	2b09      	cmp	r3, #9
90003798:	d106      	bne.n	900037a8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
9000379a:	68fb      	ldr	r3, [r7, #12]
9000379c:	68da      	ldr	r2, [r3, #12]
9000379e:	687b      	ldr	r3, [r7, #4]
900037a0:	681b      	ldr	r3, [r3, #0]
900037a2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900037a6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900037a8:	687b      	ldr	r3, [r7, #4]
900037aa:	2201      	movs	r2, #1
900037ac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900037b0:	687b      	ldr	r3, [r7, #4]
900037b2:	2200      	movs	r2, #0
900037b4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900037b8:	2300      	movs	r3, #0
}
900037ba:	4618      	mov	r0, r3
900037bc:	371c      	adds	r7, #28
900037be:	46bd      	mov	sp, r7
900037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900037c4:	4770      	bx	lr
900037c6:	bf00      	nop
900037c8:	ff33000f 	.word	0xff33000f

900037cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900037cc:	b480      	push	{r7}
900037ce:	b08b      	sub	sp, #44	@ 0x2c
900037d0:	af00      	add	r7, sp, #0
900037d2:	60f8      	str	r0, [r7, #12]
900037d4:	60b9      	str	r1, [r7, #8]
900037d6:	607a      	str	r2, [r7, #4]
900037d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900037da:	68fb      	ldr	r3, [r7, #12]
900037dc:	681b      	ldr	r3, [r3, #0]
900037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900037e0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
900037e4:	683b      	ldr	r3, [r7, #0]
900037e6:	041a      	lsls	r2, r3, #16
900037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900037ea:	431a      	orrs	r2, r3
900037ec:	68fb      	ldr	r3, [r7, #12]
900037ee:	681b      	ldr	r3, [r3, #0]
900037f0:	430a      	orrs	r2, r1
900037f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
900037f4:	68fb      	ldr	r3, [r7, #12]
900037f6:	681b      	ldr	r3, [r3, #0]
900037f8:	687a      	ldr	r2, [r7, #4]
900037fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
900037fc:	68fb      	ldr	r3, [r7, #12]
900037fe:	685b      	ldr	r3, [r3, #4]
90003800:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003804:	d174      	bne.n	900038f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003806:	68bb      	ldr	r3, [r7, #8]
90003808:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
9000380c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
9000380e:	68bb      	ldr	r3, [r7, #8]
90003810:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003814:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003816:	68bb      	ldr	r3, [r7, #8]
90003818:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9000381c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
9000381e:	68bb      	ldr	r3, [r7, #8]
90003820:	b2db      	uxtb	r3, r3
90003822:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003824:	68fb      	ldr	r3, [r7, #12]
90003826:	689b      	ldr	r3, [r3, #8]
90003828:	2b00      	cmp	r3, #0
9000382a:	d108      	bne.n	9000383e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
9000382c:	69ba      	ldr	r2, [r7, #24]
9000382e:	69fb      	ldr	r3, [r7, #28]
90003830:	431a      	orrs	r2, r3
90003832:	6a3b      	ldr	r3, [r7, #32]
90003834:	4313      	orrs	r3, r2
90003836:	697a      	ldr	r2, [r7, #20]
90003838:	4313      	orrs	r3, r2
9000383a:	627b      	str	r3, [r7, #36]	@ 0x24
9000383c:	e053      	b.n	900038e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
9000383e:	68fb      	ldr	r3, [r7, #12]
90003840:	689b      	ldr	r3, [r3, #8]
90003842:	2b01      	cmp	r3, #1
90003844:	d106      	bne.n	90003854 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003846:	69ba      	ldr	r2, [r7, #24]
90003848:	69fb      	ldr	r3, [r7, #28]
9000384a:	4313      	orrs	r3, r2
9000384c:	697a      	ldr	r2, [r7, #20]
9000384e:	4313      	orrs	r3, r2
90003850:	627b      	str	r3, [r7, #36]	@ 0x24
90003852:	e048      	b.n	900038e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003854:	68fb      	ldr	r3, [r7, #12]
90003856:	689b      	ldr	r3, [r3, #8]
90003858:	2b02      	cmp	r3, #2
9000385a:	d111      	bne.n	90003880 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
9000385c:	69fb      	ldr	r3, [r7, #28]
9000385e:	0cdb      	lsrs	r3, r3, #19
90003860:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003862:	69bb      	ldr	r3, [r7, #24]
90003864:	0a9b      	lsrs	r3, r3, #10
90003866:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003868:	697b      	ldr	r3, [r7, #20]
9000386a:	08db      	lsrs	r3, r3, #3
9000386c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
9000386e:	69bb      	ldr	r3, [r7, #24]
90003870:	015a      	lsls	r2, r3, #5
90003872:	69fb      	ldr	r3, [r7, #28]
90003874:	02db      	lsls	r3, r3, #11
90003876:	4313      	orrs	r3, r2
90003878:	697a      	ldr	r2, [r7, #20]
9000387a:	4313      	orrs	r3, r2
9000387c:	627b      	str	r3, [r7, #36]	@ 0x24
9000387e:	e032      	b.n	900038e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003880:	68fb      	ldr	r3, [r7, #12]
90003882:	689b      	ldr	r3, [r3, #8]
90003884:	2b03      	cmp	r3, #3
90003886:	d117      	bne.n	900038b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003888:	6a3b      	ldr	r3, [r7, #32]
9000388a:	0fdb      	lsrs	r3, r3, #31
9000388c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
9000388e:	69fb      	ldr	r3, [r7, #28]
90003890:	0cdb      	lsrs	r3, r3, #19
90003892:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003894:	69bb      	ldr	r3, [r7, #24]
90003896:	0adb      	lsrs	r3, r3, #11
90003898:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
9000389a:	697b      	ldr	r3, [r7, #20]
9000389c:	08db      	lsrs	r3, r3, #3
9000389e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900038a0:	69bb      	ldr	r3, [r7, #24]
900038a2:	015a      	lsls	r2, r3, #5
900038a4:	69fb      	ldr	r3, [r7, #28]
900038a6:	029b      	lsls	r3, r3, #10
900038a8:	431a      	orrs	r2, r3
900038aa:	6a3b      	ldr	r3, [r7, #32]
900038ac:	03db      	lsls	r3, r3, #15
900038ae:	4313      	orrs	r3, r2
900038b0:	697a      	ldr	r2, [r7, #20]
900038b2:	4313      	orrs	r3, r2
900038b4:	627b      	str	r3, [r7, #36]	@ 0x24
900038b6:	e016      	b.n	900038e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900038b8:	6a3b      	ldr	r3, [r7, #32]
900038ba:	0f1b      	lsrs	r3, r3, #28
900038bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900038be:	69fb      	ldr	r3, [r7, #28]
900038c0:	0d1b      	lsrs	r3, r3, #20
900038c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
900038c4:	69bb      	ldr	r3, [r7, #24]
900038c6:	0b1b      	lsrs	r3, r3, #12
900038c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
900038ca:	697b      	ldr	r3, [r7, #20]
900038cc:	091b      	lsrs	r3, r3, #4
900038ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900038d0:	69bb      	ldr	r3, [r7, #24]
900038d2:	011a      	lsls	r2, r3, #4
900038d4:	69fb      	ldr	r3, [r7, #28]
900038d6:	021b      	lsls	r3, r3, #8
900038d8:	431a      	orrs	r2, r3
900038da:	6a3b      	ldr	r3, [r7, #32]
900038dc:	031b      	lsls	r3, r3, #12
900038de:	4313      	orrs	r3, r2
900038e0:	697a      	ldr	r2, [r7, #20]
900038e2:	4313      	orrs	r3, r2
900038e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
900038e6:	68fb      	ldr	r3, [r7, #12]
900038e8:	681b      	ldr	r3, [r3, #0]
900038ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900038ec:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
900038ee:	e00d      	b.n	9000390c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
900038f0:	68fb      	ldr	r3, [r7, #12]
900038f2:	685b      	ldr	r3, [r3, #4]
900038f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900038f8:	d104      	bne.n	90003904 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
900038fa:	68fb      	ldr	r3, [r7, #12]
900038fc:	681b      	ldr	r3, [r3, #0]
900038fe:	68ba      	ldr	r2, [r7, #8]
90003900:	615a      	str	r2, [r3, #20]
}
90003902:	e003      	b.n	9000390c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003904:	68fb      	ldr	r3, [r7, #12]
90003906:	681b      	ldr	r3, [r3, #0]
90003908:	68ba      	ldr	r2, [r7, #8]
9000390a:	60da      	str	r2, [r3, #12]
}
9000390c:	bf00      	nop
9000390e:	372c      	adds	r7, #44	@ 0x2c
90003910:	46bd      	mov	sp, r7
90003912:	f85d 7b04 	ldr.w	r7, [sp], #4
90003916:	4770      	bx	lr

90003918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003918:	b480      	push	{r7}
9000391a:	b089      	sub	sp, #36	@ 0x24
9000391c:	af00      	add	r7, sp, #0
9000391e:	6078      	str	r0, [r7, #4]
90003920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003922:	2300      	movs	r3, #0
90003924:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003926:	4b89      	ldr	r3, [pc, #548]	@ (90003b4c <HAL_GPIO_Init+0x234>)
90003928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000392a:	e194      	b.n	90003c56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
9000392c:	683b      	ldr	r3, [r7, #0]
9000392e:	681a      	ldr	r2, [r3, #0]
90003930:	2101      	movs	r1, #1
90003932:	69fb      	ldr	r3, [r7, #28]
90003934:	fa01 f303 	lsl.w	r3, r1, r3
90003938:	4013      	ands	r3, r2
9000393a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
9000393c:	693b      	ldr	r3, [r7, #16]
9000393e:	2b00      	cmp	r3, #0
90003940:	f000 8186 	beq.w	90003c50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003944:	683b      	ldr	r3, [r7, #0]
90003946:	685b      	ldr	r3, [r3, #4]
90003948:	f003 0303 	and.w	r3, r3, #3
9000394c:	2b01      	cmp	r3, #1
9000394e:	d005      	beq.n	9000395c <HAL_GPIO_Init+0x44>
90003950:	683b      	ldr	r3, [r7, #0]
90003952:	685b      	ldr	r3, [r3, #4]
90003954:	f003 0303 	and.w	r3, r3, #3
90003958:	2b02      	cmp	r3, #2
9000395a:	d130      	bne.n	900039be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
9000395c:	687b      	ldr	r3, [r7, #4]
9000395e:	689b      	ldr	r3, [r3, #8]
90003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003962:	69fb      	ldr	r3, [r7, #28]
90003964:	005b      	lsls	r3, r3, #1
90003966:	2203      	movs	r2, #3
90003968:	fa02 f303 	lsl.w	r3, r2, r3
9000396c:	43db      	mvns	r3, r3
9000396e:	69ba      	ldr	r2, [r7, #24]
90003970:	4013      	ands	r3, r2
90003972:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003974:	683b      	ldr	r3, [r7, #0]
90003976:	68da      	ldr	r2, [r3, #12]
90003978:	69fb      	ldr	r3, [r7, #28]
9000397a:	005b      	lsls	r3, r3, #1
9000397c:	fa02 f303 	lsl.w	r3, r2, r3
90003980:	69ba      	ldr	r2, [r7, #24]
90003982:	4313      	orrs	r3, r2
90003984:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003986:	687b      	ldr	r3, [r7, #4]
90003988:	69ba      	ldr	r2, [r7, #24]
9000398a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
9000398c:	687b      	ldr	r3, [r7, #4]
9000398e:	685b      	ldr	r3, [r3, #4]
90003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003992:	2201      	movs	r2, #1
90003994:	69fb      	ldr	r3, [r7, #28]
90003996:	fa02 f303 	lsl.w	r3, r2, r3
9000399a:	43db      	mvns	r3, r3
9000399c:	69ba      	ldr	r2, [r7, #24]
9000399e:	4013      	ands	r3, r2
900039a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
900039a2:	683b      	ldr	r3, [r7, #0]
900039a4:	685b      	ldr	r3, [r3, #4]
900039a6:	091b      	lsrs	r3, r3, #4
900039a8:	f003 0201 	and.w	r2, r3, #1
900039ac:	69fb      	ldr	r3, [r7, #28]
900039ae:	fa02 f303 	lsl.w	r3, r2, r3
900039b2:	69ba      	ldr	r2, [r7, #24]
900039b4:	4313      	orrs	r3, r2
900039b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900039b8:	687b      	ldr	r3, [r7, #4]
900039ba:	69ba      	ldr	r2, [r7, #24]
900039bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900039be:	683b      	ldr	r3, [r7, #0]
900039c0:	685b      	ldr	r3, [r3, #4]
900039c2:	f003 0303 	and.w	r3, r3, #3
900039c6:	2b03      	cmp	r3, #3
900039c8:	d017      	beq.n	900039fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
900039ca:	687b      	ldr	r3, [r7, #4]
900039cc:	68db      	ldr	r3, [r3, #12]
900039ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900039d0:	69fb      	ldr	r3, [r7, #28]
900039d2:	005b      	lsls	r3, r3, #1
900039d4:	2203      	movs	r2, #3
900039d6:	fa02 f303 	lsl.w	r3, r2, r3
900039da:	43db      	mvns	r3, r3
900039dc:	69ba      	ldr	r2, [r7, #24]
900039de:	4013      	ands	r3, r2
900039e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
900039e2:	683b      	ldr	r3, [r7, #0]
900039e4:	689a      	ldr	r2, [r3, #8]
900039e6:	69fb      	ldr	r3, [r7, #28]
900039e8:	005b      	lsls	r3, r3, #1
900039ea:	fa02 f303 	lsl.w	r3, r2, r3
900039ee:	69ba      	ldr	r2, [r7, #24]
900039f0:	4313      	orrs	r3, r2
900039f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
900039f4:	687b      	ldr	r3, [r7, #4]
900039f6:	69ba      	ldr	r2, [r7, #24]
900039f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
900039fa:	683b      	ldr	r3, [r7, #0]
900039fc:	685b      	ldr	r3, [r3, #4]
900039fe:	f003 0303 	and.w	r3, r3, #3
90003a02:	2b02      	cmp	r3, #2
90003a04:	d123      	bne.n	90003a4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003a06:	69fb      	ldr	r3, [r7, #28]
90003a08:	08da      	lsrs	r2, r3, #3
90003a0a:	687b      	ldr	r3, [r7, #4]
90003a0c:	3208      	adds	r2, #8
90003a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003a14:	69fb      	ldr	r3, [r7, #28]
90003a16:	f003 0307 	and.w	r3, r3, #7
90003a1a:	009b      	lsls	r3, r3, #2
90003a1c:	220f      	movs	r2, #15
90003a1e:	fa02 f303 	lsl.w	r3, r2, r3
90003a22:	43db      	mvns	r3, r3
90003a24:	69ba      	ldr	r2, [r7, #24]
90003a26:	4013      	ands	r3, r2
90003a28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003a2a:	683b      	ldr	r3, [r7, #0]
90003a2c:	691a      	ldr	r2, [r3, #16]
90003a2e:	69fb      	ldr	r3, [r7, #28]
90003a30:	f003 0307 	and.w	r3, r3, #7
90003a34:	009b      	lsls	r3, r3, #2
90003a36:	fa02 f303 	lsl.w	r3, r2, r3
90003a3a:	69ba      	ldr	r2, [r7, #24]
90003a3c:	4313      	orrs	r3, r2
90003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003a40:	69fb      	ldr	r3, [r7, #28]
90003a42:	08da      	lsrs	r2, r3, #3
90003a44:	687b      	ldr	r3, [r7, #4]
90003a46:	3208      	adds	r2, #8
90003a48:	69b9      	ldr	r1, [r7, #24]
90003a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003a4e:	687b      	ldr	r3, [r7, #4]
90003a50:	681b      	ldr	r3, [r3, #0]
90003a52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003a54:	69fb      	ldr	r3, [r7, #28]
90003a56:	005b      	lsls	r3, r3, #1
90003a58:	2203      	movs	r2, #3
90003a5a:	fa02 f303 	lsl.w	r3, r2, r3
90003a5e:	43db      	mvns	r3, r3
90003a60:	69ba      	ldr	r2, [r7, #24]
90003a62:	4013      	ands	r3, r2
90003a64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003a66:	683b      	ldr	r3, [r7, #0]
90003a68:	685b      	ldr	r3, [r3, #4]
90003a6a:	f003 0203 	and.w	r2, r3, #3
90003a6e:	69fb      	ldr	r3, [r7, #28]
90003a70:	005b      	lsls	r3, r3, #1
90003a72:	fa02 f303 	lsl.w	r3, r2, r3
90003a76:	69ba      	ldr	r2, [r7, #24]
90003a78:	4313      	orrs	r3, r2
90003a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003a7c:	687b      	ldr	r3, [r7, #4]
90003a7e:	69ba      	ldr	r2, [r7, #24]
90003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003a82:	683b      	ldr	r3, [r7, #0]
90003a84:	685b      	ldr	r3, [r3, #4]
90003a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003a8a:	2b00      	cmp	r3, #0
90003a8c:	f000 80e0 	beq.w	90003c50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003a90:	4b2f      	ldr	r3, [pc, #188]	@ (90003b50 <HAL_GPIO_Init+0x238>)
90003a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003a96:	4a2e      	ldr	r2, [pc, #184]	@ (90003b50 <HAL_GPIO_Init+0x238>)
90003a98:	f043 0302 	orr.w	r3, r3, #2
90003a9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (90003b50 <HAL_GPIO_Init+0x238>)
90003aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003aa6:	f003 0302 	and.w	r3, r3, #2
90003aaa:	60fb      	str	r3, [r7, #12]
90003aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003aae:	4a29      	ldr	r2, [pc, #164]	@ (90003b54 <HAL_GPIO_Init+0x23c>)
90003ab0:	69fb      	ldr	r3, [r7, #28]
90003ab2:	089b      	lsrs	r3, r3, #2
90003ab4:	3302      	adds	r3, #2
90003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003abc:	69fb      	ldr	r3, [r7, #28]
90003abe:	f003 0303 	and.w	r3, r3, #3
90003ac2:	009b      	lsls	r3, r3, #2
90003ac4:	220f      	movs	r2, #15
90003ac6:	fa02 f303 	lsl.w	r3, r2, r3
90003aca:	43db      	mvns	r3, r3
90003acc:	69ba      	ldr	r2, [r7, #24]
90003ace:	4013      	ands	r3, r2
90003ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003ad2:	687b      	ldr	r3, [r7, #4]
90003ad4:	4a20      	ldr	r2, [pc, #128]	@ (90003b58 <HAL_GPIO_Init+0x240>)
90003ad6:	4293      	cmp	r3, r2
90003ad8:	d052      	beq.n	90003b80 <HAL_GPIO_Init+0x268>
90003ada:	687b      	ldr	r3, [r7, #4]
90003adc:	4a1f      	ldr	r2, [pc, #124]	@ (90003b5c <HAL_GPIO_Init+0x244>)
90003ade:	4293      	cmp	r3, r2
90003ae0:	d031      	beq.n	90003b46 <HAL_GPIO_Init+0x22e>
90003ae2:	687b      	ldr	r3, [r7, #4]
90003ae4:	4a1e      	ldr	r2, [pc, #120]	@ (90003b60 <HAL_GPIO_Init+0x248>)
90003ae6:	4293      	cmp	r3, r2
90003ae8:	d02b      	beq.n	90003b42 <HAL_GPIO_Init+0x22a>
90003aea:	687b      	ldr	r3, [r7, #4]
90003aec:	4a1d      	ldr	r2, [pc, #116]	@ (90003b64 <HAL_GPIO_Init+0x24c>)
90003aee:	4293      	cmp	r3, r2
90003af0:	d025      	beq.n	90003b3e <HAL_GPIO_Init+0x226>
90003af2:	687b      	ldr	r3, [r7, #4]
90003af4:	4a1c      	ldr	r2, [pc, #112]	@ (90003b68 <HAL_GPIO_Init+0x250>)
90003af6:	4293      	cmp	r3, r2
90003af8:	d01f      	beq.n	90003b3a <HAL_GPIO_Init+0x222>
90003afa:	687b      	ldr	r3, [r7, #4]
90003afc:	4a1b      	ldr	r2, [pc, #108]	@ (90003b6c <HAL_GPIO_Init+0x254>)
90003afe:	4293      	cmp	r3, r2
90003b00:	d019      	beq.n	90003b36 <HAL_GPIO_Init+0x21e>
90003b02:	687b      	ldr	r3, [r7, #4]
90003b04:	4a1a      	ldr	r2, [pc, #104]	@ (90003b70 <HAL_GPIO_Init+0x258>)
90003b06:	4293      	cmp	r3, r2
90003b08:	d013      	beq.n	90003b32 <HAL_GPIO_Init+0x21a>
90003b0a:	687b      	ldr	r3, [r7, #4]
90003b0c:	4a19      	ldr	r2, [pc, #100]	@ (90003b74 <HAL_GPIO_Init+0x25c>)
90003b0e:	4293      	cmp	r3, r2
90003b10:	d00d      	beq.n	90003b2e <HAL_GPIO_Init+0x216>
90003b12:	687b      	ldr	r3, [r7, #4]
90003b14:	4a18      	ldr	r2, [pc, #96]	@ (90003b78 <HAL_GPIO_Init+0x260>)
90003b16:	4293      	cmp	r3, r2
90003b18:	d007      	beq.n	90003b2a <HAL_GPIO_Init+0x212>
90003b1a:	687b      	ldr	r3, [r7, #4]
90003b1c:	4a17      	ldr	r2, [pc, #92]	@ (90003b7c <HAL_GPIO_Init+0x264>)
90003b1e:	4293      	cmp	r3, r2
90003b20:	d101      	bne.n	90003b26 <HAL_GPIO_Init+0x20e>
90003b22:	2309      	movs	r3, #9
90003b24:	e02d      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b26:	230a      	movs	r3, #10
90003b28:	e02b      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b2a:	2308      	movs	r3, #8
90003b2c:	e029      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b2e:	2307      	movs	r3, #7
90003b30:	e027      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b32:	2306      	movs	r3, #6
90003b34:	e025      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b36:	2305      	movs	r3, #5
90003b38:	e023      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b3a:	2304      	movs	r3, #4
90003b3c:	e021      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b3e:	2303      	movs	r3, #3
90003b40:	e01f      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b42:	2302      	movs	r3, #2
90003b44:	e01d      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b46:	2301      	movs	r3, #1
90003b48:	e01b      	b.n	90003b82 <HAL_GPIO_Init+0x26a>
90003b4a:	bf00      	nop
90003b4c:	58000080 	.word	0x58000080
90003b50:	58024400 	.word	0x58024400
90003b54:	58000400 	.word	0x58000400
90003b58:	58020000 	.word	0x58020000
90003b5c:	58020400 	.word	0x58020400
90003b60:	58020800 	.word	0x58020800
90003b64:	58020c00 	.word	0x58020c00
90003b68:	58021000 	.word	0x58021000
90003b6c:	58021400 	.word	0x58021400
90003b70:	58021800 	.word	0x58021800
90003b74:	58021c00 	.word	0x58021c00
90003b78:	58022000 	.word	0x58022000
90003b7c:	58022400 	.word	0x58022400
90003b80:	2300      	movs	r3, #0
90003b82:	69fa      	ldr	r2, [r7, #28]
90003b84:	f002 0203 	and.w	r2, r2, #3
90003b88:	0092      	lsls	r2, r2, #2
90003b8a:	4093      	lsls	r3, r2
90003b8c:	69ba      	ldr	r2, [r7, #24]
90003b8e:	4313      	orrs	r3, r2
90003b90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003b92:	4938      	ldr	r1, [pc, #224]	@ (90003c74 <HAL_GPIO_Init+0x35c>)
90003b94:	69fb      	ldr	r3, [r7, #28]
90003b96:	089b      	lsrs	r3, r3, #2
90003b98:	3302      	adds	r3, #2
90003b9a:	69ba      	ldr	r2, [r7, #24]
90003b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003ba4:	681b      	ldr	r3, [r3, #0]
90003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003ba8:	693b      	ldr	r3, [r7, #16]
90003baa:	43db      	mvns	r3, r3
90003bac:	69ba      	ldr	r2, [r7, #24]
90003bae:	4013      	ands	r3, r2
90003bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003bb2:	683b      	ldr	r3, [r7, #0]
90003bb4:	685b      	ldr	r3, [r3, #4]
90003bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003bba:	2b00      	cmp	r3, #0
90003bbc:	d003      	beq.n	90003bc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003bbe:	69ba      	ldr	r2, [r7, #24]
90003bc0:	693b      	ldr	r3, [r7, #16]
90003bc2:	4313      	orrs	r3, r2
90003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003bc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003bca:	69bb      	ldr	r3, [r7, #24]
90003bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003bd2:	685b      	ldr	r3, [r3, #4]
90003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003bd6:	693b      	ldr	r3, [r7, #16]
90003bd8:	43db      	mvns	r3, r3
90003bda:	69ba      	ldr	r2, [r7, #24]
90003bdc:	4013      	ands	r3, r2
90003bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003be0:	683b      	ldr	r3, [r7, #0]
90003be2:	685b      	ldr	r3, [r3, #4]
90003be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003be8:	2b00      	cmp	r3, #0
90003bea:	d003      	beq.n	90003bf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003bec:	69ba      	ldr	r2, [r7, #24]
90003bee:	693b      	ldr	r3, [r7, #16]
90003bf0:	4313      	orrs	r3, r2
90003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003bf8:	69bb      	ldr	r3, [r7, #24]
90003bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003bfc:	697b      	ldr	r3, [r7, #20]
90003bfe:	685b      	ldr	r3, [r3, #4]
90003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003c02:	693b      	ldr	r3, [r7, #16]
90003c04:	43db      	mvns	r3, r3
90003c06:	69ba      	ldr	r2, [r7, #24]
90003c08:	4013      	ands	r3, r2
90003c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003c0c:	683b      	ldr	r3, [r7, #0]
90003c0e:	685b      	ldr	r3, [r3, #4]
90003c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003c14:	2b00      	cmp	r3, #0
90003c16:	d003      	beq.n	90003c20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003c18:	69ba      	ldr	r2, [r7, #24]
90003c1a:	693b      	ldr	r3, [r7, #16]
90003c1c:	4313      	orrs	r3, r2
90003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003c20:	697b      	ldr	r3, [r7, #20]
90003c22:	69ba      	ldr	r2, [r7, #24]
90003c24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003c26:	697b      	ldr	r3, [r7, #20]
90003c28:	681b      	ldr	r3, [r3, #0]
90003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003c2c:	693b      	ldr	r3, [r7, #16]
90003c2e:	43db      	mvns	r3, r3
90003c30:	69ba      	ldr	r2, [r7, #24]
90003c32:	4013      	ands	r3, r2
90003c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003c36:	683b      	ldr	r3, [r7, #0]
90003c38:	685b      	ldr	r3, [r3, #4]
90003c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003c3e:	2b00      	cmp	r3, #0
90003c40:	d003      	beq.n	90003c4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003c42:	69ba      	ldr	r2, [r7, #24]
90003c44:	693b      	ldr	r3, [r7, #16]
90003c46:	4313      	orrs	r3, r2
90003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003c4a:	697b      	ldr	r3, [r7, #20]
90003c4c:	69ba      	ldr	r2, [r7, #24]
90003c4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003c50:	69fb      	ldr	r3, [r7, #28]
90003c52:	3301      	adds	r3, #1
90003c54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003c56:	683b      	ldr	r3, [r7, #0]
90003c58:	681a      	ldr	r2, [r3, #0]
90003c5a:	69fb      	ldr	r3, [r7, #28]
90003c5c:	fa22 f303 	lsr.w	r3, r2, r3
90003c60:	2b00      	cmp	r3, #0
90003c62:	f47f ae63 	bne.w	9000392c <HAL_GPIO_Init+0x14>
  }
}
90003c66:	bf00      	nop
90003c68:	bf00      	nop
90003c6a:	3724      	adds	r7, #36	@ 0x24
90003c6c:	46bd      	mov	sp, r7
90003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003c72:	4770      	bx	lr
90003c74:	58000400 	.word	0x58000400

90003c78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
90003c78:	b480      	push	{r7}
90003c7a:	b087      	sub	sp, #28
90003c7c:	af00      	add	r7, sp, #0
90003c7e:	6078      	str	r0, [r7, #4]
90003c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003c82:	2300      	movs	r3, #0
90003c84:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003c86:	4b75      	ldr	r3, [pc, #468]	@ (90003e5c <HAL_GPIO_DeInit+0x1e4>)
90003c88:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90003c8a:	e0d9      	b.n	90003e40 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
90003c8c:	2201      	movs	r2, #1
90003c8e:	697b      	ldr	r3, [r7, #20]
90003c90:	fa02 f303 	lsl.w	r3, r2, r3
90003c94:	683a      	ldr	r2, [r7, #0]
90003c96:	4013      	ands	r3, r2
90003c98:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
90003c9a:	68fb      	ldr	r3, [r7, #12]
90003c9c:	2b00      	cmp	r3, #0
90003c9e:	f000 80cc 	beq.w	90003e3a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
90003ca2:	4a6f      	ldr	r2, [pc, #444]	@ (90003e60 <HAL_GPIO_DeInit+0x1e8>)
90003ca4:	697b      	ldr	r3, [r7, #20]
90003ca6:	089b      	lsrs	r3, r3, #2
90003ca8:	3302      	adds	r3, #2
90003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003cae:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90003cb0:	697b      	ldr	r3, [r7, #20]
90003cb2:	f003 0303 	and.w	r3, r3, #3
90003cb6:	009b      	lsls	r3, r3, #2
90003cb8:	220f      	movs	r2, #15
90003cba:	fa02 f303 	lsl.w	r3, r2, r3
90003cbe:	68ba      	ldr	r2, [r7, #8]
90003cc0:	4013      	ands	r3, r2
90003cc2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90003cc4:	687b      	ldr	r3, [r7, #4]
90003cc6:	4a67      	ldr	r2, [pc, #412]	@ (90003e64 <HAL_GPIO_DeInit+0x1ec>)
90003cc8:	4293      	cmp	r3, r2
90003cca:	d037      	beq.n	90003d3c <HAL_GPIO_DeInit+0xc4>
90003ccc:	687b      	ldr	r3, [r7, #4]
90003cce:	4a66      	ldr	r2, [pc, #408]	@ (90003e68 <HAL_GPIO_DeInit+0x1f0>)
90003cd0:	4293      	cmp	r3, r2
90003cd2:	d031      	beq.n	90003d38 <HAL_GPIO_DeInit+0xc0>
90003cd4:	687b      	ldr	r3, [r7, #4]
90003cd6:	4a65      	ldr	r2, [pc, #404]	@ (90003e6c <HAL_GPIO_DeInit+0x1f4>)
90003cd8:	4293      	cmp	r3, r2
90003cda:	d02b      	beq.n	90003d34 <HAL_GPIO_DeInit+0xbc>
90003cdc:	687b      	ldr	r3, [r7, #4]
90003cde:	4a64      	ldr	r2, [pc, #400]	@ (90003e70 <HAL_GPIO_DeInit+0x1f8>)
90003ce0:	4293      	cmp	r3, r2
90003ce2:	d025      	beq.n	90003d30 <HAL_GPIO_DeInit+0xb8>
90003ce4:	687b      	ldr	r3, [r7, #4]
90003ce6:	4a63      	ldr	r2, [pc, #396]	@ (90003e74 <HAL_GPIO_DeInit+0x1fc>)
90003ce8:	4293      	cmp	r3, r2
90003cea:	d01f      	beq.n	90003d2c <HAL_GPIO_DeInit+0xb4>
90003cec:	687b      	ldr	r3, [r7, #4]
90003cee:	4a62      	ldr	r2, [pc, #392]	@ (90003e78 <HAL_GPIO_DeInit+0x200>)
90003cf0:	4293      	cmp	r3, r2
90003cf2:	d019      	beq.n	90003d28 <HAL_GPIO_DeInit+0xb0>
90003cf4:	687b      	ldr	r3, [r7, #4]
90003cf6:	4a61      	ldr	r2, [pc, #388]	@ (90003e7c <HAL_GPIO_DeInit+0x204>)
90003cf8:	4293      	cmp	r3, r2
90003cfa:	d013      	beq.n	90003d24 <HAL_GPIO_DeInit+0xac>
90003cfc:	687b      	ldr	r3, [r7, #4]
90003cfe:	4a60      	ldr	r2, [pc, #384]	@ (90003e80 <HAL_GPIO_DeInit+0x208>)
90003d00:	4293      	cmp	r3, r2
90003d02:	d00d      	beq.n	90003d20 <HAL_GPIO_DeInit+0xa8>
90003d04:	687b      	ldr	r3, [r7, #4]
90003d06:	4a5f      	ldr	r2, [pc, #380]	@ (90003e84 <HAL_GPIO_DeInit+0x20c>)
90003d08:	4293      	cmp	r3, r2
90003d0a:	d007      	beq.n	90003d1c <HAL_GPIO_DeInit+0xa4>
90003d0c:	687b      	ldr	r3, [r7, #4]
90003d0e:	4a5e      	ldr	r2, [pc, #376]	@ (90003e88 <HAL_GPIO_DeInit+0x210>)
90003d10:	4293      	cmp	r3, r2
90003d12:	d101      	bne.n	90003d18 <HAL_GPIO_DeInit+0xa0>
90003d14:	2309      	movs	r3, #9
90003d16:	e012      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d18:	230a      	movs	r3, #10
90003d1a:	e010      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d1c:	2308      	movs	r3, #8
90003d1e:	e00e      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d20:	2307      	movs	r3, #7
90003d22:	e00c      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d24:	2306      	movs	r3, #6
90003d26:	e00a      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d28:	2305      	movs	r3, #5
90003d2a:	e008      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d2c:	2304      	movs	r3, #4
90003d2e:	e006      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d30:	2303      	movs	r3, #3
90003d32:	e004      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d34:	2302      	movs	r3, #2
90003d36:	e002      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d38:	2301      	movs	r3, #1
90003d3a:	e000      	b.n	90003d3e <HAL_GPIO_DeInit+0xc6>
90003d3c:	2300      	movs	r3, #0
90003d3e:	697a      	ldr	r2, [r7, #20]
90003d40:	f002 0203 	and.w	r2, r2, #3
90003d44:	0092      	lsls	r2, r2, #2
90003d46:	4093      	lsls	r3, r2
90003d48:	68ba      	ldr	r2, [r7, #8]
90003d4a:	429a      	cmp	r2, r3
90003d4c:	d136      	bne.n	90003dbc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90003d4e:	693b      	ldr	r3, [r7, #16]
90003d50:	681a      	ldr	r2, [r3, #0]
90003d52:	68fb      	ldr	r3, [r7, #12]
90003d54:	43db      	mvns	r3, r3
90003d56:	401a      	ands	r2, r3
90003d58:	693b      	ldr	r3, [r7, #16]
90003d5a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90003d5c:	693b      	ldr	r3, [r7, #16]
90003d5e:	685a      	ldr	r2, [r3, #4]
90003d60:	68fb      	ldr	r3, [r7, #12]
90003d62:	43db      	mvns	r3, r3
90003d64:	401a      	ands	r2, r3
90003d66:	693b      	ldr	r3, [r7, #16]
90003d68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90003d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003d6e:	685a      	ldr	r2, [r3, #4]
90003d70:	68fb      	ldr	r3, [r7, #12]
90003d72:	43db      	mvns	r3, r3
90003d74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
90003d78:	4013      	ands	r3, r2
90003d7a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90003d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003d80:	681a      	ldr	r2, [r3, #0]
90003d82:	68fb      	ldr	r3, [r7, #12]
90003d84:	43db      	mvns	r3, r3
90003d86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
90003d8a:	4013      	ands	r3, r2
90003d8c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
90003d8e:	697b      	ldr	r3, [r7, #20]
90003d90:	f003 0303 	and.w	r3, r3, #3
90003d94:	009b      	lsls	r3, r3, #2
90003d96:	220f      	movs	r2, #15
90003d98:	fa02 f303 	lsl.w	r3, r2, r3
90003d9c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90003d9e:	4a30      	ldr	r2, [pc, #192]	@ (90003e60 <HAL_GPIO_DeInit+0x1e8>)
90003da0:	697b      	ldr	r3, [r7, #20]
90003da2:	089b      	lsrs	r3, r3, #2
90003da4:	3302      	adds	r3, #2
90003da6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90003daa:	68bb      	ldr	r3, [r7, #8]
90003dac:	43da      	mvns	r2, r3
90003dae:	482c      	ldr	r0, [pc, #176]	@ (90003e60 <HAL_GPIO_DeInit+0x1e8>)
90003db0:	697b      	ldr	r3, [r7, #20]
90003db2:	089b      	lsrs	r3, r3, #2
90003db4:	400a      	ands	r2, r1
90003db6:	3302      	adds	r3, #2
90003db8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90003dbc:	687b      	ldr	r3, [r7, #4]
90003dbe:	681a      	ldr	r2, [r3, #0]
90003dc0:	697b      	ldr	r3, [r7, #20]
90003dc2:	005b      	lsls	r3, r3, #1
90003dc4:	2103      	movs	r1, #3
90003dc6:	fa01 f303 	lsl.w	r3, r1, r3
90003dca:	431a      	orrs	r2, r3
90003dcc:	687b      	ldr	r3, [r7, #4]
90003dce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90003dd0:	697b      	ldr	r3, [r7, #20]
90003dd2:	08da      	lsrs	r2, r3, #3
90003dd4:	687b      	ldr	r3, [r7, #4]
90003dd6:	3208      	adds	r2, #8
90003dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90003ddc:	697b      	ldr	r3, [r7, #20]
90003dde:	f003 0307 	and.w	r3, r3, #7
90003de2:	009b      	lsls	r3, r3, #2
90003de4:	220f      	movs	r2, #15
90003de6:	fa02 f303 	lsl.w	r3, r2, r3
90003dea:	43db      	mvns	r3, r3
90003dec:	697a      	ldr	r2, [r7, #20]
90003dee:	08d2      	lsrs	r2, r2, #3
90003df0:	4019      	ands	r1, r3
90003df2:	687b      	ldr	r3, [r7, #4]
90003df4:	3208      	adds	r2, #8
90003df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003dfa:	687b      	ldr	r3, [r7, #4]
90003dfc:	68da      	ldr	r2, [r3, #12]
90003dfe:	697b      	ldr	r3, [r7, #20]
90003e00:	005b      	lsls	r3, r3, #1
90003e02:	2103      	movs	r1, #3
90003e04:	fa01 f303 	lsl.w	r3, r1, r3
90003e08:	43db      	mvns	r3, r3
90003e0a:	401a      	ands	r2, r3
90003e0c:	687b      	ldr	r3, [r7, #4]
90003e0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90003e10:	687b      	ldr	r3, [r7, #4]
90003e12:	685a      	ldr	r2, [r3, #4]
90003e14:	2101      	movs	r1, #1
90003e16:	697b      	ldr	r3, [r7, #20]
90003e18:	fa01 f303 	lsl.w	r3, r1, r3
90003e1c:	43db      	mvns	r3, r3
90003e1e:	401a      	ands	r2, r3
90003e20:	687b      	ldr	r3, [r7, #4]
90003e22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003e24:	687b      	ldr	r3, [r7, #4]
90003e26:	689a      	ldr	r2, [r3, #8]
90003e28:	697b      	ldr	r3, [r7, #20]
90003e2a:	005b      	lsls	r3, r3, #1
90003e2c:	2103      	movs	r1, #3
90003e2e:	fa01 f303 	lsl.w	r3, r1, r3
90003e32:	43db      	mvns	r3, r3
90003e34:	401a      	ands	r2, r3
90003e36:	687b      	ldr	r3, [r7, #4]
90003e38:	609a      	str	r2, [r3, #8]
    }

    position++;
90003e3a:	697b      	ldr	r3, [r7, #20]
90003e3c:	3301      	adds	r3, #1
90003e3e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
90003e40:	683a      	ldr	r2, [r7, #0]
90003e42:	697b      	ldr	r3, [r7, #20]
90003e44:	fa22 f303 	lsr.w	r3, r2, r3
90003e48:	2b00      	cmp	r3, #0
90003e4a:	f47f af1f 	bne.w	90003c8c <HAL_GPIO_DeInit+0x14>
  }
}
90003e4e:	bf00      	nop
90003e50:	bf00      	nop
90003e52:	371c      	adds	r7, #28
90003e54:	46bd      	mov	sp, r7
90003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
90003e5a:	4770      	bx	lr
90003e5c:	58000080 	.word	0x58000080
90003e60:	58000400 	.word	0x58000400
90003e64:	58020000 	.word	0x58020000
90003e68:	58020400 	.word	0x58020400
90003e6c:	58020800 	.word	0x58020800
90003e70:	58020c00 	.word	0x58020c00
90003e74:	58021000 	.word	0x58021000
90003e78:	58021400 	.word	0x58021400
90003e7c:	58021800 	.word	0x58021800
90003e80:	58021c00 	.word	0x58021c00
90003e84:	58022000 	.word	0x58022000
90003e88:	58022400 	.word	0x58022400

90003e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003e8c:	b480      	push	{r7}
90003e8e:	b083      	sub	sp, #12
90003e90:	af00      	add	r7, sp, #0
90003e92:	6078      	str	r0, [r7, #4]
90003e94:	460b      	mov	r3, r1
90003e96:	807b      	strh	r3, [r7, #2]
90003e98:	4613      	mov	r3, r2
90003e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003e9c:	787b      	ldrb	r3, [r7, #1]
90003e9e:	2b00      	cmp	r3, #0
90003ea0:	d003      	beq.n	90003eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003ea2:	887a      	ldrh	r2, [r7, #2]
90003ea4:	687b      	ldr	r3, [r7, #4]
90003ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003ea8:	e003      	b.n	90003eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003eaa:	887b      	ldrh	r3, [r7, #2]
90003eac:	041a      	lsls	r2, r3, #16
90003eae:	687b      	ldr	r3, [r7, #4]
90003eb0:	619a      	str	r2, [r3, #24]
}
90003eb2:	bf00      	nop
90003eb4:	370c      	adds	r7, #12
90003eb6:	46bd      	mov	sp, r7
90003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ebc:	4770      	bx	lr

90003ebe <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003ebe:	b580      	push	{r7, lr}
90003ec0:	b086      	sub	sp, #24
90003ec2:	af00      	add	r7, sp, #0
90003ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003ec6:	687b      	ldr	r3, [r7, #4]
90003ec8:	681b      	ldr	r3, [r3, #0]
90003eca:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003ecc:	693b      	ldr	r3, [r7, #16]
90003ece:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003ed0:	687b      	ldr	r3, [r7, #4]
90003ed2:	681b      	ldr	r3, [r3, #0]
90003ed4:	4618      	mov	r0, r3
90003ed6:	f005 ff09 	bl	90009cec <USB_GetMode>
90003eda:	4603      	mov	r3, r0
90003edc:	2b01      	cmp	r3, #1
90003ede:	f040 80fb 	bne.w	900040d8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003ee2:	687b      	ldr	r3, [r7, #4]
90003ee4:	681b      	ldr	r3, [r3, #0]
90003ee6:	4618      	mov	r0, r3
90003ee8:	f005 fecc 	bl	90009c84 <USB_ReadInterrupts>
90003eec:	4603      	mov	r3, r0
90003eee:	2b00      	cmp	r3, #0
90003ef0:	f000 80f1 	beq.w	900040d6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003ef4:	687b      	ldr	r3, [r7, #4]
90003ef6:	681b      	ldr	r3, [r3, #0]
90003ef8:	4618      	mov	r0, r3
90003efa:	f005 fec3 	bl	90009c84 <USB_ReadInterrupts>
90003efe:	4603      	mov	r3, r0
90003f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90003f08:	d104      	bne.n	90003f14 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003f0a:	687b      	ldr	r3, [r7, #4]
90003f0c:	681b      	ldr	r3, [r3, #0]
90003f0e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90003f12:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003f14:	687b      	ldr	r3, [r7, #4]
90003f16:	681b      	ldr	r3, [r3, #0]
90003f18:	4618      	mov	r0, r3
90003f1a:	f005 feb3 	bl	90009c84 <USB_ReadInterrupts>
90003f1e:	4603      	mov	r3, r0
90003f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90003f28:	d104      	bne.n	90003f34 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003f2a:	687b      	ldr	r3, [r7, #4]
90003f2c:	681b      	ldr	r3, [r3, #0]
90003f2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90003f32:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003f34:	687b      	ldr	r3, [r7, #4]
90003f36:	681b      	ldr	r3, [r3, #0]
90003f38:	4618      	mov	r0, r3
90003f3a:	f005 fea3 	bl	90009c84 <USB_ReadInterrupts>
90003f3e:	4603      	mov	r3, r0
90003f40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90003f44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90003f48:	d104      	bne.n	90003f54 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003f4a:	687b      	ldr	r3, [r7, #4]
90003f4c:	681b      	ldr	r3, [r3, #0]
90003f4e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003f52:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003f54:	687b      	ldr	r3, [r7, #4]
90003f56:	681b      	ldr	r3, [r3, #0]
90003f58:	4618      	mov	r0, r3
90003f5a:	f005 fe93 	bl	90009c84 <USB_ReadInterrupts>
90003f5e:	4603      	mov	r3, r0
90003f60:	f003 0302 	and.w	r3, r3, #2
90003f64:	2b02      	cmp	r3, #2
90003f66:	d103      	bne.n	90003f70 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003f68:	687b      	ldr	r3, [r7, #4]
90003f6a:	681b      	ldr	r3, [r3, #0]
90003f6c:	2202      	movs	r2, #2
90003f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003f70:	687b      	ldr	r3, [r7, #4]
90003f72:	681b      	ldr	r3, [r3, #0]
90003f74:	4618      	mov	r0, r3
90003f76:	f005 fe85 	bl	90009c84 <USB_ReadInterrupts>
90003f7a:	4603      	mov	r3, r0
90003f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90003f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003f84:	d120      	bne.n	90003fc8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90003f86:	687b      	ldr	r3, [r7, #4]
90003f88:	681b      	ldr	r3, [r3, #0]
90003f8a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90003f8e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90003f90:	68fb      	ldr	r3, [r7, #12]
90003f92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90003f96:	681b      	ldr	r3, [r3, #0]
90003f98:	f003 0301 	and.w	r3, r3, #1
90003f9c:	2b00      	cmp	r3, #0
90003f9e:	d113      	bne.n	90003fc8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90003fa0:	2110      	movs	r1, #16
90003fa2:	6938      	ldr	r0, [r7, #16]
90003fa4:	f005 fdb6 	bl	90009b14 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90003fa8:	6938      	ldr	r0, [r7, #16]
90003faa:	f005 fde5 	bl	90009b78 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90003fae:	687b      	ldr	r3, [r7, #4]
90003fb0:	7a5b      	ldrb	r3, [r3, #9]
90003fb2:	2b02      	cmp	r3, #2
90003fb4:	d105      	bne.n	90003fc2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003fb6:	687b      	ldr	r3, [r7, #4]
90003fb8:	681b      	ldr	r3, [r3, #0]
90003fba:	2101      	movs	r1, #1
90003fbc:	4618      	mov	r0, r3
90003fbe:	f005 fea3 	bl	90009d08 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90003fc2:	6878      	ldr	r0, [r7, #4]
90003fc4:	f7fc fc48 	bl	90000858 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90003fc8:	687b      	ldr	r3, [r7, #4]
90003fca:	681b      	ldr	r3, [r3, #0]
90003fcc:	4618      	mov	r0, r3
90003fce:	f005 fe59 	bl	90009c84 <USB_ReadInterrupts>
90003fd2:	4603      	mov	r3, r0
90003fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90003fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003fdc:	d102      	bne.n	90003fe4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90003fde:	6878      	ldr	r0, [r7, #4]
90003fe0:	f001 fca1 	bl	90005926 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90003fe4:	687b      	ldr	r3, [r7, #4]
90003fe6:	681b      	ldr	r3, [r3, #0]
90003fe8:	4618      	mov	r0, r3
90003fea:	f005 fe4b 	bl	90009c84 <USB_ReadInterrupts>
90003fee:	4603      	mov	r3, r0
90003ff0:	f003 0308 	and.w	r3, r3, #8
90003ff4:	2b08      	cmp	r3, #8
90003ff6:	d106      	bne.n	90004006 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90003ff8:	6878      	ldr	r0, [r7, #4]
90003ffa:	f7fc fc11 	bl	90000820 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90003ffe:	687b      	ldr	r3, [r7, #4]
90004000:	681b      	ldr	r3, [r3, #0]
90004002:	2208      	movs	r2, #8
90004004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90004006:	687b      	ldr	r3, [r7, #4]
90004008:	681b      	ldr	r3, [r3, #0]
9000400a:	4618      	mov	r0, r3
9000400c:	f005 fe3a 	bl	90009c84 <USB_ReadInterrupts>
90004010:	4603      	mov	r3, r0
90004012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90004016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000401a:	d139      	bne.n	90004090 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
9000401c:	687b      	ldr	r3, [r7, #4]
9000401e:	681b      	ldr	r3, [r3, #0]
90004020:	4618      	mov	r0, r3
90004022:	f005 feae 	bl	90009d82 <USB_HC_ReadInterrupt>
90004026:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004028:	2300      	movs	r3, #0
9000402a:	617b      	str	r3, [r7, #20]
9000402c:	e025      	b.n	9000407a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
9000402e:	697b      	ldr	r3, [r7, #20]
90004030:	f003 030f 	and.w	r3, r3, #15
90004034:	68ba      	ldr	r2, [r7, #8]
90004036:	fa22 f303 	lsr.w	r3, r2, r3
9000403a:	f003 0301 	and.w	r3, r3, #1
9000403e:	2b00      	cmp	r3, #0
90004040:	d018      	beq.n	90004074 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90004042:	697b      	ldr	r3, [r7, #20]
90004044:	015a      	lsls	r2, r3, #5
90004046:	68fb      	ldr	r3, [r7, #12]
90004048:	4413      	add	r3, r2
9000404a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000404e:	681b      	ldr	r3, [r3, #0]
90004050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90004054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90004058:	d106      	bne.n	90004068 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
9000405a:	697b      	ldr	r3, [r7, #20]
9000405c:	b2db      	uxtb	r3, r3
9000405e:	4619      	mov	r1, r3
90004060:	6878      	ldr	r0, [r7, #4]
90004062:	f000 f859 	bl	90004118 <HCD_HC_IN_IRQHandler>
90004066:	e005      	b.n	90004074 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90004068:	697b      	ldr	r3, [r7, #20]
9000406a:	b2db      	uxtb	r3, r3
9000406c:	4619      	mov	r1, r3
9000406e:	6878      	ldr	r0, [r7, #4]
90004070:	f000 febb 	bl	90004dea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004074:	697b      	ldr	r3, [r7, #20]
90004076:	3301      	adds	r3, #1
90004078:	617b      	str	r3, [r7, #20]
9000407a:	687b      	ldr	r3, [r7, #4]
9000407c:	795b      	ldrb	r3, [r3, #5]
9000407e:	461a      	mov	r2, r3
90004080:	697b      	ldr	r3, [r7, #20]
90004082:	4293      	cmp	r3, r2
90004084:	d3d3      	bcc.n	9000402e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90004086:	687b      	ldr	r3, [r7, #4]
90004088:	681b      	ldr	r3, [r3, #0]
9000408a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
9000408e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90004090:	687b      	ldr	r3, [r7, #4]
90004092:	681b      	ldr	r3, [r3, #0]
90004094:	4618      	mov	r0, r3
90004096:	f005 fdf5 	bl	90009c84 <USB_ReadInterrupts>
9000409a:	4603      	mov	r3, r0
9000409c:	f003 0310 	and.w	r3, r3, #16
900040a0:	2b10      	cmp	r3, #16
900040a2:	d101      	bne.n	900040a8 <HAL_HCD_IRQHandler+0x1ea>
900040a4:	2301      	movs	r3, #1
900040a6:	e000      	b.n	900040aa <HAL_HCD_IRQHandler+0x1ec>
900040a8:	2300      	movs	r3, #0
900040aa:	2b00      	cmp	r3, #0
900040ac:	d014      	beq.n	900040d8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900040ae:	687b      	ldr	r3, [r7, #4]
900040b0:	681b      	ldr	r3, [r3, #0]
900040b2:	699a      	ldr	r2, [r3, #24]
900040b4:	687b      	ldr	r3, [r7, #4]
900040b6:	681b      	ldr	r3, [r3, #0]
900040b8:	f022 0210 	bic.w	r2, r2, #16
900040bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
900040be:	6878      	ldr	r0, [r7, #4]
900040c0:	f001 fb52 	bl	90005768 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900040c4:	687b      	ldr	r3, [r7, #4]
900040c6:	681b      	ldr	r3, [r3, #0]
900040c8:	699a      	ldr	r2, [r3, #24]
900040ca:	687b      	ldr	r3, [r7, #4]
900040cc:	681b      	ldr	r3, [r3, #0]
900040ce:	f042 0210 	orr.w	r2, r2, #16
900040d2:	619a      	str	r2, [r3, #24]
900040d4:	e000      	b.n	900040d8 <HAL_HCD_IRQHandler+0x21a>
      return;
900040d6:	bf00      	nop
    }
  }
}
900040d8:	3718      	adds	r7, #24
900040da:	46bd      	mov	sp, r7
900040dc:	bd80      	pop	{r7, pc}

900040de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
900040de:	b580      	push	{r7, lr}
900040e0:	b082      	sub	sp, #8
900040e2:	af00      	add	r7, sp, #0
900040e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
900040e6:	687b      	ldr	r3, [r7, #4]
900040e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
900040ec:	2b01      	cmp	r3, #1
900040ee:	d101      	bne.n	900040f4 <HAL_HCD_Stop+0x16>
900040f0:	2302      	movs	r3, #2
900040f2:	e00d      	b.n	90004110 <HAL_HCD_Stop+0x32>
900040f4:	687b      	ldr	r3, [r7, #4]
900040f6:	2201      	movs	r2, #1
900040f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
900040fc:	687b      	ldr	r3, [r7, #4]
900040fe:	681b      	ldr	r3, [r3, #0]
90004100:	4618      	mov	r0, r3
90004102:	f005 ff6f 	bl	90009fe4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90004106:	687b      	ldr	r3, [r7, #4]
90004108:	2200      	movs	r2, #0
9000410a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
9000410e:	2300      	movs	r3, #0
}
90004110:	4618      	mov	r0, r3
90004112:	3708      	adds	r7, #8
90004114:	46bd      	mov	sp, r7
90004116:	bd80      	pop	{r7, pc}

90004118 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004118:	b580      	push	{r7, lr}
9000411a:	b086      	sub	sp, #24
9000411c:	af00      	add	r7, sp, #0
9000411e:	6078      	str	r0, [r7, #4]
90004120:	460b      	mov	r3, r1
90004122:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004124:	687b      	ldr	r3, [r7, #4]
90004126:	681b      	ldr	r3, [r3, #0]
90004128:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000412a:	697b      	ldr	r3, [r7, #20]
9000412c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000412e:	687b      	ldr	r3, [r7, #4]
90004130:	681b      	ldr	r3, [r3, #0]
90004132:	78fa      	ldrb	r2, [r7, #3]
90004134:	4611      	mov	r1, r2
90004136:	4618      	mov	r0, r3
90004138:	f005 fdb7 	bl	90009caa <USB_ReadChInterrupts>
9000413c:	4603      	mov	r3, r0
9000413e:	f003 0304 	and.w	r3, r3, #4
90004142:	2b04      	cmp	r3, #4
90004144:	d11a      	bne.n	9000417c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004146:	78fb      	ldrb	r3, [r7, #3]
90004148:	015a      	lsls	r2, r3, #5
9000414a:	693b      	ldr	r3, [r7, #16]
9000414c:	4413      	add	r3, r2
9000414e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004152:	461a      	mov	r2, r3
90004154:	2304      	movs	r3, #4
90004156:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004158:	78fa      	ldrb	r2, [r7, #3]
9000415a:	6879      	ldr	r1, [r7, #4]
9000415c:	4613      	mov	r3, r2
9000415e:	011b      	lsls	r3, r3, #4
90004160:	1a9b      	subs	r3, r3, r2
90004162:	009b      	lsls	r3, r3, #2
90004164:	440b      	add	r3, r1
90004166:	334d      	adds	r3, #77	@ 0x4d
90004168:	2207      	movs	r2, #7
9000416a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000416c:	687b      	ldr	r3, [r7, #4]
9000416e:	681b      	ldr	r3, [r3, #0]
90004170:	78fa      	ldrb	r2, [r7, #3]
90004172:	4611      	mov	r1, r2
90004174:	4618      	mov	r0, r3
90004176:	f005 fe15 	bl	90009da4 <USB_HC_Halt>
9000417a:	e09e      	b.n	900042ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
9000417c:	687b      	ldr	r3, [r7, #4]
9000417e:	681b      	ldr	r3, [r3, #0]
90004180:	78fa      	ldrb	r2, [r7, #3]
90004182:	4611      	mov	r1, r2
90004184:	4618      	mov	r0, r3
90004186:	f005 fd90 	bl	90009caa <USB_ReadChInterrupts>
9000418a:	4603      	mov	r3, r0
9000418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90004190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90004194:	d11b      	bne.n	900041ce <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
90004196:	78fb      	ldrb	r3, [r7, #3]
90004198:	015a      	lsls	r2, r3, #5
9000419a:	693b      	ldr	r3, [r7, #16]
9000419c:	4413      	add	r3, r2
9000419e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900041a2:	461a      	mov	r2, r3
900041a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
900041a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900041aa:	78fa      	ldrb	r2, [r7, #3]
900041ac:	6879      	ldr	r1, [r7, #4]
900041ae:	4613      	mov	r3, r2
900041b0:	011b      	lsls	r3, r3, #4
900041b2:	1a9b      	subs	r3, r3, r2
900041b4:	009b      	lsls	r3, r3, #2
900041b6:	440b      	add	r3, r1
900041b8:	334d      	adds	r3, #77	@ 0x4d
900041ba:	2208      	movs	r2, #8
900041bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041be:	687b      	ldr	r3, [r7, #4]
900041c0:	681b      	ldr	r3, [r3, #0]
900041c2:	78fa      	ldrb	r2, [r7, #3]
900041c4:	4611      	mov	r1, r2
900041c6:	4618      	mov	r0, r3
900041c8:	f005 fdec 	bl	90009da4 <USB_HC_Halt>
900041cc:	e075      	b.n	900042ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900041ce:	687b      	ldr	r3, [r7, #4]
900041d0:	681b      	ldr	r3, [r3, #0]
900041d2:	78fa      	ldrb	r2, [r7, #3]
900041d4:	4611      	mov	r1, r2
900041d6:	4618      	mov	r0, r3
900041d8:	f005 fd67 	bl	90009caa <USB_ReadChInterrupts>
900041dc:	4603      	mov	r3, r0
900041de:	f003 0308 	and.w	r3, r3, #8
900041e2:	2b08      	cmp	r3, #8
900041e4:	d11a      	bne.n	9000421c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900041e6:	78fb      	ldrb	r3, [r7, #3]
900041e8:	015a      	lsls	r2, r3, #5
900041ea:	693b      	ldr	r3, [r7, #16]
900041ec:	4413      	add	r3, r2
900041ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900041f2:	461a      	mov	r2, r3
900041f4:	2308      	movs	r3, #8
900041f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900041f8:	78fa      	ldrb	r2, [r7, #3]
900041fa:	6879      	ldr	r1, [r7, #4]
900041fc:	4613      	mov	r3, r2
900041fe:	011b      	lsls	r3, r3, #4
90004200:	1a9b      	subs	r3, r3, r2
90004202:	009b      	lsls	r3, r3, #2
90004204:	440b      	add	r3, r1
90004206:	334d      	adds	r3, #77	@ 0x4d
90004208:	2206      	movs	r2, #6
9000420a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000420c:	687b      	ldr	r3, [r7, #4]
9000420e:	681b      	ldr	r3, [r3, #0]
90004210:	78fa      	ldrb	r2, [r7, #3]
90004212:	4611      	mov	r1, r2
90004214:	4618      	mov	r0, r3
90004216:	f005 fdc5 	bl	90009da4 <USB_HC_Halt>
9000421a:	e04e      	b.n	900042ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
9000421c:	687b      	ldr	r3, [r7, #4]
9000421e:	681b      	ldr	r3, [r3, #0]
90004220:	78fa      	ldrb	r2, [r7, #3]
90004222:	4611      	mov	r1, r2
90004224:	4618      	mov	r0, r3
90004226:	f005 fd40 	bl	90009caa <USB_ReadChInterrupts>
9000422a:	4603      	mov	r3, r0
9000422c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004234:	d11b      	bne.n	9000426e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90004236:	78fb      	ldrb	r3, [r7, #3]
90004238:	015a      	lsls	r2, r3, #5
9000423a:	693b      	ldr	r3, [r7, #16]
9000423c:	4413      	add	r3, r2
9000423e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004242:	461a      	mov	r2, r3
90004244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90004248:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000424a:	78fa      	ldrb	r2, [r7, #3]
9000424c:	6879      	ldr	r1, [r7, #4]
9000424e:	4613      	mov	r3, r2
90004250:	011b      	lsls	r3, r3, #4
90004252:	1a9b      	subs	r3, r3, r2
90004254:	009b      	lsls	r3, r3, #2
90004256:	440b      	add	r3, r1
90004258:	334d      	adds	r3, #77	@ 0x4d
9000425a:	2209      	movs	r2, #9
9000425c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000425e:	687b      	ldr	r3, [r7, #4]
90004260:	681b      	ldr	r3, [r3, #0]
90004262:	78fa      	ldrb	r2, [r7, #3]
90004264:	4611      	mov	r1, r2
90004266:	4618      	mov	r0, r3
90004268:	f005 fd9c 	bl	90009da4 <USB_HC_Halt>
9000426c:	e025      	b.n	900042ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
9000426e:	687b      	ldr	r3, [r7, #4]
90004270:	681b      	ldr	r3, [r3, #0]
90004272:	78fa      	ldrb	r2, [r7, #3]
90004274:	4611      	mov	r1, r2
90004276:	4618      	mov	r0, r3
90004278:	f005 fd17 	bl	90009caa <USB_ReadChInterrupts>
9000427c:	4603      	mov	r3, r0
9000427e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90004282:	2b80      	cmp	r3, #128	@ 0x80
90004284:	d119      	bne.n	900042ba <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90004286:	78fb      	ldrb	r3, [r7, #3]
90004288:	015a      	lsls	r2, r3, #5
9000428a:	693b      	ldr	r3, [r7, #16]
9000428c:	4413      	add	r3, r2
9000428e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004292:	461a      	mov	r2, r3
90004294:	2380      	movs	r3, #128	@ 0x80
90004296:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004298:	78fa      	ldrb	r2, [r7, #3]
9000429a:	6879      	ldr	r1, [r7, #4]
9000429c:	4613      	mov	r3, r2
9000429e:	011b      	lsls	r3, r3, #4
900042a0:	1a9b      	subs	r3, r3, r2
900042a2:	009b      	lsls	r3, r3, #2
900042a4:	440b      	add	r3, r1
900042a6:	334d      	adds	r3, #77	@ 0x4d
900042a8:	2207      	movs	r2, #7
900042aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042ac:	687b      	ldr	r3, [r7, #4]
900042ae:	681b      	ldr	r3, [r3, #0]
900042b0:	78fa      	ldrb	r2, [r7, #3]
900042b2:	4611      	mov	r1, r2
900042b4:	4618      	mov	r0, r3
900042b6:	f005 fd75 	bl	90009da4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900042ba:	687b      	ldr	r3, [r7, #4]
900042bc:	681b      	ldr	r3, [r3, #0]
900042be:	78fa      	ldrb	r2, [r7, #3]
900042c0:	4611      	mov	r1, r2
900042c2:	4618      	mov	r0, r3
900042c4:	f005 fcf1 	bl	90009caa <USB_ReadChInterrupts>
900042c8:	4603      	mov	r3, r0
900042ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900042ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900042d2:	d112      	bne.n	900042fa <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042d4:	687b      	ldr	r3, [r7, #4]
900042d6:	681b      	ldr	r3, [r3, #0]
900042d8:	78fa      	ldrb	r2, [r7, #3]
900042da:	4611      	mov	r1, r2
900042dc:	4618      	mov	r0, r3
900042de:	f005 fd61 	bl	90009da4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900042e2:	78fb      	ldrb	r3, [r7, #3]
900042e4:	015a      	lsls	r2, r3, #5
900042e6:	693b      	ldr	r3, [r7, #16]
900042e8:	4413      	add	r3, r2
900042ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042ee:	461a      	mov	r2, r3
900042f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
900042f4:	6093      	str	r3, [r2, #8]
900042f6:	f000 bd75 	b.w	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900042fa:	687b      	ldr	r3, [r7, #4]
900042fc:	681b      	ldr	r3, [r3, #0]
900042fe:	78fa      	ldrb	r2, [r7, #3]
90004300:	4611      	mov	r1, r2
90004302:	4618      	mov	r0, r3
90004304:	f005 fcd1 	bl	90009caa <USB_ReadChInterrupts>
90004308:	4603      	mov	r3, r0
9000430a:	f003 0301 	and.w	r3, r3, #1
9000430e:	2b01      	cmp	r3, #1
90004310:	f040 8128 	bne.w	90004564 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004314:	78fb      	ldrb	r3, [r7, #3]
90004316:	015a      	lsls	r2, r3, #5
90004318:	693b      	ldr	r3, [r7, #16]
9000431a:	4413      	add	r3, r2
9000431c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004320:	461a      	mov	r2, r3
90004322:	2320      	movs	r3, #32
90004324:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90004326:	78fa      	ldrb	r2, [r7, #3]
90004328:	6879      	ldr	r1, [r7, #4]
9000432a:	4613      	mov	r3, r2
9000432c:	011b      	lsls	r3, r3, #4
9000432e:	1a9b      	subs	r3, r3, r2
90004330:	009b      	lsls	r3, r3, #2
90004332:	440b      	add	r3, r1
90004334:	331b      	adds	r3, #27
90004336:	781b      	ldrb	r3, [r3, #0]
90004338:	2b01      	cmp	r3, #1
9000433a:	d119      	bne.n	90004370 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000433c:	78fa      	ldrb	r2, [r7, #3]
9000433e:	6879      	ldr	r1, [r7, #4]
90004340:	4613      	mov	r3, r2
90004342:	011b      	lsls	r3, r3, #4
90004344:	1a9b      	subs	r3, r3, r2
90004346:	009b      	lsls	r3, r3, #2
90004348:	440b      	add	r3, r1
9000434a:	331b      	adds	r3, #27
9000434c:	2200      	movs	r2, #0
9000434e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004350:	78fb      	ldrb	r3, [r7, #3]
90004352:	015a      	lsls	r2, r3, #5
90004354:	693b      	ldr	r3, [r7, #16]
90004356:	4413      	add	r3, r2
90004358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000435c:	685b      	ldr	r3, [r3, #4]
9000435e:	78fa      	ldrb	r2, [r7, #3]
90004360:	0151      	lsls	r1, r2, #5
90004362:	693a      	ldr	r2, [r7, #16]
90004364:	440a      	add	r2, r1
90004366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000436a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000436e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90004370:	687b      	ldr	r3, [r7, #4]
90004372:	799b      	ldrb	r3, [r3, #6]
90004374:	2b00      	cmp	r3, #0
90004376:	d01b      	beq.n	900043b0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004378:	78fa      	ldrb	r2, [r7, #3]
9000437a:	6879      	ldr	r1, [r7, #4]
9000437c:	4613      	mov	r3, r2
9000437e:	011b      	lsls	r3, r3, #4
90004380:	1a9b      	subs	r3, r3, r2
90004382:	009b      	lsls	r3, r3, #2
90004384:	440b      	add	r3, r1
90004386:	3330      	adds	r3, #48	@ 0x30
90004388:	6819      	ldr	r1, [r3, #0]
9000438a:	78fb      	ldrb	r3, [r7, #3]
9000438c:	015a      	lsls	r2, r3, #5
9000438e:	693b      	ldr	r3, [r7, #16]
90004390:	4413      	add	r3, r2
90004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004396:	691b      	ldr	r3, [r3, #16]
90004398:	f3c3 0312 	ubfx	r3, r3, #0, #19
9000439c:	78fa      	ldrb	r2, [r7, #3]
9000439e:	1ac9      	subs	r1, r1, r3
900043a0:	6878      	ldr	r0, [r7, #4]
900043a2:	4613      	mov	r3, r2
900043a4:	011b      	lsls	r3, r3, #4
900043a6:	1a9b      	subs	r3, r3, r2
900043a8:	009b      	lsls	r3, r3, #2
900043aa:	4403      	add	r3, r0
900043ac:	3338      	adds	r3, #56	@ 0x38
900043ae:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
900043b0:	78fa      	ldrb	r2, [r7, #3]
900043b2:	6879      	ldr	r1, [r7, #4]
900043b4:	4613      	mov	r3, r2
900043b6:	011b      	lsls	r3, r3, #4
900043b8:	1a9b      	subs	r3, r3, r2
900043ba:	009b      	lsls	r3, r3, #2
900043bc:	440b      	add	r3, r1
900043be:	334d      	adds	r3, #77	@ 0x4d
900043c0:	2201      	movs	r2, #1
900043c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
900043c4:	78fa      	ldrb	r2, [r7, #3]
900043c6:	6879      	ldr	r1, [r7, #4]
900043c8:	4613      	mov	r3, r2
900043ca:	011b      	lsls	r3, r3, #4
900043cc:	1a9b      	subs	r3, r3, r2
900043ce:	009b      	lsls	r3, r3, #2
900043d0:	440b      	add	r3, r1
900043d2:	3344      	adds	r3, #68	@ 0x44
900043d4:	2200      	movs	r2, #0
900043d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900043d8:	78fb      	ldrb	r3, [r7, #3]
900043da:	015a      	lsls	r2, r3, #5
900043dc:	693b      	ldr	r3, [r7, #16]
900043de:	4413      	add	r3, r2
900043e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043e4:	461a      	mov	r2, r3
900043e6:	2301      	movs	r3, #1
900043e8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900043ea:	78fa      	ldrb	r2, [r7, #3]
900043ec:	6879      	ldr	r1, [r7, #4]
900043ee:	4613      	mov	r3, r2
900043f0:	011b      	lsls	r3, r3, #4
900043f2:	1a9b      	subs	r3, r3, r2
900043f4:	009b      	lsls	r3, r3, #2
900043f6:	440b      	add	r3, r1
900043f8:	3326      	adds	r3, #38	@ 0x26
900043fa:	781b      	ldrb	r3, [r3, #0]
900043fc:	2b00      	cmp	r3, #0
900043fe:	d00a      	beq.n	90004416 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004400:	78fa      	ldrb	r2, [r7, #3]
90004402:	6879      	ldr	r1, [r7, #4]
90004404:	4613      	mov	r3, r2
90004406:	011b      	lsls	r3, r3, #4
90004408:	1a9b      	subs	r3, r3, r2
9000440a:	009b      	lsls	r3, r3, #2
9000440c:	440b      	add	r3, r1
9000440e:	3326      	adds	r3, #38	@ 0x26
90004410:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004412:	2b02      	cmp	r3, #2
90004414:	d110      	bne.n	90004438 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004416:	687b      	ldr	r3, [r7, #4]
90004418:	681b      	ldr	r3, [r3, #0]
9000441a:	78fa      	ldrb	r2, [r7, #3]
9000441c:	4611      	mov	r1, r2
9000441e:	4618      	mov	r0, r3
90004420:	f005 fcc0 	bl	90009da4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004424:	78fb      	ldrb	r3, [r7, #3]
90004426:	015a      	lsls	r2, r3, #5
90004428:	693b      	ldr	r3, [r7, #16]
9000442a:	4413      	add	r3, r2
9000442c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004430:	461a      	mov	r2, r3
90004432:	2310      	movs	r3, #16
90004434:	6093      	str	r3, [r2, #8]
90004436:	e03d      	b.n	900044b4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004438:	78fa      	ldrb	r2, [r7, #3]
9000443a:	6879      	ldr	r1, [r7, #4]
9000443c:	4613      	mov	r3, r2
9000443e:	011b      	lsls	r3, r3, #4
90004440:	1a9b      	subs	r3, r3, r2
90004442:	009b      	lsls	r3, r3, #2
90004444:	440b      	add	r3, r1
90004446:	3326      	adds	r3, #38	@ 0x26
90004448:	781b      	ldrb	r3, [r3, #0]
9000444a:	2b03      	cmp	r3, #3
9000444c:	d00a      	beq.n	90004464 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
9000444e:	78fa      	ldrb	r2, [r7, #3]
90004450:	6879      	ldr	r1, [r7, #4]
90004452:	4613      	mov	r3, r2
90004454:	011b      	lsls	r3, r3, #4
90004456:	1a9b      	subs	r3, r3, r2
90004458:	009b      	lsls	r3, r3, #2
9000445a:	440b      	add	r3, r1
9000445c:	3326      	adds	r3, #38	@ 0x26
9000445e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004460:	2b01      	cmp	r3, #1
90004462:	d127      	bne.n	900044b4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90004464:	78fb      	ldrb	r3, [r7, #3]
90004466:	015a      	lsls	r2, r3, #5
90004468:	693b      	ldr	r3, [r7, #16]
9000446a:	4413      	add	r3, r2
9000446c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004470:	681b      	ldr	r3, [r3, #0]
90004472:	78fa      	ldrb	r2, [r7, #3]
90004474:	0151      	lsls	r1, r2, #5
90004476:	693a      	ldr	r2, [r7, #16]
90004478:	440a      	add	r2, r1
9000447a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000447e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
90004482:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004484:	78fa      	ldrb	r2, [r7, #3]
90004486:	6879      	ldr	r1, [r7, #4]
90004488:	4613      	mov	r3, r2
9000448a:	011b      	lsls	r3, r3, #4
9000448c:	1a9b      	subs	r3, r3, r2
9000448e:	009b      	lsls	r3, r3, #2
90004490:	440b      	add	r3, r1
90004492:	334c      	adds	r3, #76	@ 0x4c
90004494:	2201      	movs	r2, #1
90004496:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004498:	78fa      	ldrb	r2, [r7, #3]
9000449a:	6879      	ldr	r1, [r7, #4]
9000449c:	4613      	mov	r3, r2
9000449e:	011b      	lsls	r3, r3, #4
900044a0:	1a9b      	subs	r3, r3, r2
900044a2:	009b      	lsls	r3, r3, #2
900044a4:	440b      	add	r3, r1
900044a6:	334c      	adds	r3, #76	@ 0x4c
900044a8:	781a      	ldrb	r2, [r3, #0]
900044aa:	78fb      	ldrb	r3, [r7, #3]
900044ac:	4619      	mov	r1, r3
900044ae:	6878      	ldr	r0, [r7, #4]
900044b0:	f7fc f9fc 	bl	900008ac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
900044b4:	687b      	ldr	r3, [r7, #4]
900044b6:	799b      	ldrb	r3, [r3, #6]
900044b8:	2b01      	cmp	r3, #1
900044ba:	d13b      	bne.n	90004534 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900044bc:	78fa      	ldrb	r2, [r7, #3]
900044be:	6879      	ldr	r1, [r7, #4]
900044c0:	4613      	mov	r3, r2
900044c2:	011b      	lsls	r3, r3, #4
900044c4:	1a9b      	subs	r3, r3, r2
900044c6:	009b      	lsls	r3, r3, #2
900044c8:	440b      	add	r3, r1
900044ca:	3338      	adds	r3, #56	@ 0x38
900044cc:	6819      	ldr	r1, [r3, #0]
900044ce:	78fa      	ldrb	r2, [r7, #3]
900044d0:	6878      	ldr	r0, [r7, #4]
900044d2:	4613      	mov	r3, r2
900044d4:	011b      	lsls	r3, r3, #4
900044d6:	1a9b      	subs	r3, r3, r2
900044d8:	009b      	lsls	r3, r3, #2
900044da:	4403      	add	r3, r0
900044dc:	3328      	adds	r3, #40	@ 0x28
900044de:	881b      	ldrh	r3, [r3, #0]
900044e0:	440b      	add	r3, r1
900044e2:	1e59      	subs	r1, r3, #1
900044e4:	78fa      	ldrb	r2, [r7, #3]
900044e6:	6878      	ldr	r0, [r7, #4]
900044e8:	4613      	mov	r3, r2
900044ea:	011b      	lsls	r3, r3, #4
900044ec:	1a9b      	subs	r3, r3, r2
900044ee:	009b      	lsls	r3, r3, #2
900044f0:	4403      	add	r3, r0
900044f2:	3328      	adds	r3, #40	@ 0x28
900044f4:	881b      	ldrh	r3, [r3, #0]
900044f6:	fbb1 f3f3 	udiv	r3, r1, r3
900044fa:	f003 0301 	and.w	r3, r3, #1
900044fe:	2b00      	cmp	r3, #0
90004500:	f000 8470 	beq.w	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004504:	78fa      	ldrb	r2, [r7, #3]
90004506:	6879      	ldr	r1, [r7, #4]
90004508:	4613      	mov	r3, r2
9000450a:	011b      	lsls	r3, r3, #4
9000450c:	1a9b      	subs	r3, r3, r2
9000450e:	009b      	lsls	r3, r3, #2
90004510:	440b      	add	r3, r1
90004512:	333c      	adds	r3, #60	@ 0x3c
90004514:	781b      	ldrb	r3, [r3, #0]
90004516:	78fa      	ldrb	r2, [r7, #3]
90004518:	f083 0301 	eor.w	r3, r3, #1
9000451c:	b2d8      	uxtb	r0, r3
9000451e:	6879      	ldr	r1, [r7, #4]
90004520:	4613      	mov	r3, r2
90004522:	011b      	lsls	r3, r3, #4
90004524:	1a9b      	subs	r3, r3, r2
90004526:	009b      	lsls	r3, r3, #2
90004528:	440b      	add	r3, r1
9000452a:	333c      	adds	r3, #60	@ 0x3c
9000452c:	4602      	mov	r2, r0
9000452e:	701a      	strb	r2, [r3, #0]
90004530:	f000 bc58 	b.w	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004534:	78fa      	ldrb	r2, [r7, #3]
90004536:	6879      	ldr	r1, [r7, #4]
90004538:	4613      	mov	r3, r2
9000453a:	011b      	lsls	r3, r3, #4
9000453c:	1a9b      	subs	r3, r3, r2
9000453e:	009b      	lsls	r3, r3, #2
90004540:	440b      	add	r3, r1
90004542:	333c      	adds	r3, #60	@ 0x3c
90004544:	781b      	ldrb	r3, [r3, #0]
90004546:	78fa      	ldrb	r2, [r7, #3]
90004548:	f083 0301 	eor.w	r3, r3, #1
9000454c:	b2d8      	uxtb	r0, r3
9000454e:	6879      	ldr	r1, [r7, #4]
90004550:	4613      	mov	r3, r2
90004552:	011b      	lsls	r3, r3, #4
90004554:	1a9b      	subs	r3, r3, r2
90004556:	009b      	lsls	r3, r3, #2
90004558:	440b      	add	r3, r1
9000455a:	333c      	adds	r3, #60	@ 0x3c
9000455c:	4602      	mov	r2, r0
9000455e:	701a      	strb	r2, [r3, #0]
90004560:	f000 bc40 	b.w	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004564:	687b      	ldr	r3, [r7, #4]
90004566:	681b      	ldr	r3, [r3, #0]
90004568:	78fa      	ldrb	r2, [r7, #3]
9000456a:	4611      	mov	r1, r2
9000456c:	4618      	mov	r0, r3
9000456e:	f005 fb9c 	bl	90009caa <USB_ReadChInterrupts>
90004572:	4603      	mov	r3, r0
90004574:	f003 0320 	and.w	r3, r3, #32
90004578:	2b20      	cmp	r3, #32
9000457a:	d131      	bne.n	900045e0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
9000457c:	78fb      	ldrb	r3, [r7, #3]
9000457e:	015a      	lsls	r2, r3, #5
90004580:	693b      	ldr	r3, [r7, #16]
90004582:	4413      	add	r3, r2
90004584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004588:	461a      	mov	r2, r3
9000458a:	2320      	movs	r3, #32
9000458c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
9000458e:	78fa      	ldrb	r2, [r7, #3]
90004590:	6879      	ldr	r1, [r7, #4]
90004592:	4613      	mov	r3, r2
90004594:	011b      	lsls	r3, r3, #4
90004596:	1a9b      	subs	r3, r3, r2
90004598:	009b      	lsls	r3, r3, #2
9000459a:	440b      	add	r3, r1
9000459c:	331a      	adds	r3, #26
9000459e:	781b      	ldrb	r3, [r3, #0]
900045a0:	2b01      	cmp	r3, #1
900045a2:	f040 841f 	bne.w	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900045a6:	78fa      	ldrb	r2, [r7, #3]
900045a8:	6879      	ldr	r1, [r7, #4]
900045aa:	4613      	mov	r3, r2
900045ac:	011b      	lsls	r3, r3, #4
900045ae:	1a9b      	subs	r3, r3, r2
900045b0:	009b      	lsls	r3, r3, #2
900045b2:	440b      	add	r3, r1
900045b4:	331b      	adds	r3, #27
900045b6:	2201      	movs	r2, #1
900045b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900045ba:	78fa      	ldrb	r2, [r7, #3]
900045bc:	6879      	ldr	r1, [r7, #4]
900045be:	4613      	mov	r3, r2
900045c0:	011b      	lsls	r3, r3, #4
900045c2:	1a9b      	subs	r3, r3, r2
900045c4:	009b      	lsls	r3, r3, #2
900045c6:	440b      	add	r3, r1
900045c8:	334d      	adds	r3, #77	@ 0x4d
900045ca:	2203      	movs	r2, #3
900045cc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
900045ce:	687b      	ldr	r3, [r7, #4]
900045d0:	681b      	ldr	r3, [r3, #0]
900045d2:	78fa      	ldrb	r2, [r7, #3]
900045d4:	4611      	mov	r1, r2
900045d6:	4618      	mov	r0, r3
900045d8:	f005 fbe4 	bl	90009da4 <USB_HC_Halt>
900045dc:	f000 bc02 	b.w	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900045e0:	687b      	ldr	r3, [r7, #4]
900045e2:	681b      	ldr	r3, [r3, #0]
900045e4:	78fa      	ldrb	r2, [r7, #3]
900045e6:	4611      	mov	r1, r2
900045e8:	4618      	mov	r0, r3
900045ea:	f005 fb5e 	bl	90009caa <USB_ReadChInterrupts>
900045ee:	4603      	mov	r3, r0
900045f0:	f003 0302 	and.w	r3, r3, #2
900045f4:	2b02      	cmp	r3, #2
900045f6:	f040 8305 	bne.w	90004c04 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900045fa:	78fb      	ldrb	r3, [r7, #3]
900045fc:	015a      	lsls	r2, r3, #5
900045fe:	693b      	ldr	r3, [r7, #16]
90004600:	4413      	add	r3, r2
90004602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004606:	461a      	mov	r2, r3
90004608:	2302      	movs	r3, #2
9000460a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
9000460c:	78fa      	ldrb	r2, [r7, #3]
9000460e:	6879      	ldr	r1, [r7, #4]
90004610:	4613      	mov	r3, r2
90004612:	011b      	lsls	r3, r3, #4
90004614:	1a9b      	subs	r3, r3, r2
90004616:	009b      	lsls	r3, r3, #2
90004618:	440b      	add	r3, r1
9000461a:	334d      	adds	r3, #77	@ 0x4d
9000461c:	781b      	ldrb	r3, [r3, #0]
9000461e:	2b01      	cmp	r3, #1
90004620:	d114      	bne.n	9000464c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004622:	78fa      	ldrb	r2, [r7, #3]
90004624:	6879      	ldr	r1, [r7, #4]
90004626:	4613      	mov	r3, r2
90004628:	011b      	lsls	r3, r3, #4
9000462a:	1a9b      	subs	r3, r3, r2
9000462c:	009b      	lsls	r3, r3, #2
9000462e:	440b      	add	r3, r1
90004630:	334d      	adds	r3, #77	@ 0x4d
90004632:	2202      	movs	r2, #2
90004634:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004636:	78fa      	ldrb	r2, [r7, #3]
90004638:	6879      	ldr	r1, [r7, #4]
9000463a:	4613      	mov	r3, r2
9000463c:	011b      	lsls	r3, r3, #4
9000463e:	1a9b      	subs	r3, r3, r2
90004640:	009b      	lsls	r3, r3, #2
90004642:	440b      	add	r3, r1
90004644:	334c      	adds	r3, #76	@ 0x4c
90004646:	2201      	movs	r2, #1
90004648:	701a      	strb	r2, [r3, #0]
9000464a:	e2cc      	b.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000464c:	78fa      	ldrb	r2, [r7, #3]
9000464e:	6879      	ldr	r1, [r7, #4]
90004650:	4613      	mov	r3, r2
90004652:	011b      	lsls	r3, r3, #4
90004654:	1a9b      	subs	r3, r3, r2
90004656:	009b      	lsls	r3, r3, #2
90004658:	440b      	add	r3, r1
9000465a:	334d      	adds	r3, #77	@ 0x4d
9000465c:	781b      	ldrb	r3, [r3, #0]
9000465e:	2b06      	cmp	r3, #6
90004660:	d114      	bne.n	9000468c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004662:	78fa      	ldrb	r2, [r7, #3]
90004664:	6879      	ldr	r1, [r7, #4]
90004666:	4613      	mov	r3, r2
90004668:	011b      	lsls	r3, r3, #4
9000466a:	1a9b      	subs	r3, r3, r2
9000466c:	009b      	lsls	r3, r3, #2
9000466e:	440b      	add	r3, r1
90004670:	334d      	adds	r3, #77	@ 0x4d
90004672:	2202      	movs	r2, #2
90004674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
90004676:	78fa      	ldrb	r2, [r7, #3]
90004678:	6879      	ldr	r1, [r7, #4]
9000467a:	4613      	mov	r3, r2
9000467c:	011b      	lsls	r3, r3, #4
9000467e:	1a9b      	subs	r3, r3, r2
90004680:	009b      	lsls	r3, r3, #2
90004682:	440b      	add	r3, r1
90004684:	334c      	adds	r3, #76	@ 0x4c
90004686:	2205      	movs	r2, #5
90004688:	701a      	strb	r2, [r3, #0]
9000468a:	e2ac      	b.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000468c:	78fa      	ldrb	r2, [r7, #3]
9000468e:	6879      	ldr	r1, [r7, #4]
90004690:	4613      	mov	r3, r2
90004692:	011b      	lsls	r3, r3, #4
90004694:	1a9b      	subs	r3, r3, r2
90004696:	009b      	lsls	r3, r3, #2
90004698:	440b      	add	r3, r1
9000469a:	334d      	adds	r3, #77	@ 0x4d
9000469c:	781b      	ldrb	r3, [r3, #0]
9000469e:	2b07      	cmp	r3, #7
900046a0:	d00b      	beq.n	900046ba <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900046a2:	78fa      	ldrb	r2, [r7, #3]
900046a4:	6879      	ldr	r1, [r7, #4]
900046a6:	4613      	mov	r3, r2
900046a8:	011b      	lsls	r3, r3, #4
900046aa:	1a9b      	subs	r3, r3, r2
900046ac:	009b      	lsls	r3, r3, #2
900046ae:	440b      	add	r3, r1
900046b0:	334d      	adds	r3, #77	@ 0x4d
900046b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900046b4:	2b09      	cmp	r3, #9
900046b6:	f040 80a6 	bne.w	90004806 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900046ba:	78fa      	ldrb	r2, [r7, #3]
900046bc:	6879      	ldr	r1, [r7, #4]
900046be:	4613      	mov	r3, r2
900046c0:	011b      	lsls	r3, r3, #4
900046c2:	1a9b      	subs	r3, r3, r2
900046c4:	009b      	lsls	r3, r3, #2
900046c6:	440b      	add	r3, r1
900046c8:	334d      	adds	r3, #77	@ 0x4d
900046ca:	2202      	movs	r2, #2
900046cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900046ce:	78fa      	ldrb	r2, [r7, #3]
900046d0:	6879      	ldr	r1, [r7, #4]
900046d2:	4613      	mov	r3, r2
900046d4:	011b      	lsls	r3, r3, #4
900046d6:	1a9b      	subs	r3, r3, r2
900046d8:	009b      	lsls	r3, r3, #2
900046da:	440b      	add	r3, r1
900046dc:	3344      	adds	r3, #68	@ 0x44
900046de:	681b      	ldr	r3, [r3, #0]
900046e0:	1c59      	adds	r1, r3, #1
900046e2:	6878      	ldr	r0, [r7, #4]
900046e4:	4613      	mov	r3, r2
900046e6:	011b      	lsls	r3, r3, #4
900046e8:	1a9b      	subs	r3, r3, r2
900046ea:	009b      	lsls	r3, r3, #2
900046ec:	4403      	add	r3, r0
900046ee:	3344      	adds	r3, #68	@ 0x44
900046f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900046f2:	78fa      	ldrb	r2, [r7, #3]
900046f4:	6879      	ldr	r1, [r7, #4]
900046f6:	4613      	mov	r3, r2
900046f8:	011b      	lsls	r3, r3, #4
900046fa:	1a9b      	subs	r3, r3, r2
900046fc:	009b      	lsls	r3, r3, #2
900046fe:	440b      	add	r3, r1
90004700:	3344      	adds	r3, #68	@ 0x44
90004702:	681b      	ldr	r3, [r3, #0]
90004704:	2b02      	cmp	r3, #2
90004706:	d943      	bls.n	90004790 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004708:	78fa      	ldrb	r2, [r7, #3]
9000470a:	6879      	ldr	r1, [r7, #4]
9000470c:	4613      	mov	r3, r2
9000470e:	011b      	lsls	r3, r3, #4
90004710:	1a9b      	subs	r3, r3, r2
90004712:	009b      	lsls	r3, r3, #2
90004714:	440b      	add	r3, r1
90004716:	3344      	adds	r3, #68	@ 0x44
90004718:	2200      	movs	r2, #0
9000471a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
9000471c:	78fa      	ldrb	r2, [r7, #3]
9000471e:	6879      	ldr	r1, [r7, #4]
90004720:	4613      	mov	r3, r2
90004722:	011b      	lsls	r3, r3, #4
90004724:	1a9b      	subs	r3, r3, r2
90004726:	009b      	lsls	r3, r3, #2
90004728:	440b      	add	r3, r1
9000472a:	331a      	adds	r3, #26
9000472c:	781b      	ldrb	r3, [r3, #0]
9000472e:	2b01      	cmp	r3, #1
90004730:	d123      	bne.n	9000477a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90004732:	78fa      	ldrb	r2, [r7, #3]
90004734:	6879      	ldr	r1, [r7, #4]
90004736:	4613      	mov	r3, r2
90004738:	011b      	lsls	r3, r3, #4
9000473a:	1a9b      	subs	r3, r3, r2
9000473c:	009b      	lsls	r3, r3, #2
9000473e:	440b      	add	r3, r1
90004740:	331b      	adds	r3, #27
90004742:	2200      	movs	r2, #0
90004744:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
90004746:	78fa      	ldrb	r2, [r7, #3]
90004748:	6879      	ldr	r1, [r7, #4]
9000474a:	4613      	mov	r3, r2
9000474c:	011b      	lsls	r3, r3, #4
9000474e:	1a9b      	subs	r3, r3, r2
90004750:	009b      	lsls	r3, r3, #2
90004752:	440b      	add	r3, r1
90004754:	331c      	adds	r3, #28
90004756:	2200      	movs	r2, #0
90004758:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000475a:	78fb      	ldrb	r3, [r7, #3]
9000475c:	015a      	lsls	r2, r3, #5
9000475e:	693b      	ldr	r3, [r7, #16]
90004760:	4413      	add	r3, r2
90004762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004766:	685b      	ldr	r3, [r3, #4]
90004768:	78fa      	ldrb	r2, [r7, #3]
9000476a:	0151      	lsls	r1, r2, #5
9000476c:	693a      	ldr	r2, [r7, #16]
9000476e:	440a      	add	r2, r1
90004770:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004778:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
9000477a:	78fa      	ldrb	r2, [r7, #3]
9000477c:	6879      	ldr	r1, [r7, #4]
9000477e:	4613      	mov	r3, r2
90004780:	011b      	lsls	r3, r3, #4
90004782:	1a9b      	subs	r3, r3, r2
90004784:	009b      	lsls	r3, r3, #2
90004786:	440b      	add	r3, r1
90004788:	334c      	adds	r3, #76	@ 0x4c
9000478a:	2204      	movs	r2, #4
9000478c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000478e:	e229      	b.n	90004be4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004790:	78fa      	ldrb	r2, [r7, #3]
90004792:	6879      	ldr	r1, [r7, #4]
90004794:	4613      	mov	r3, r2
90004796:	011b      	lsls	r3, r3, #4
90004798:	1a9b      	subs	r3, r3, r2
9000479a:	009b      	lsls	r3, r3, #2
9000479c:	440b      	add	r3, r1
9000479e:	334c      	adds	r3, #76	@ 0x4c
900047a0:	2202      	movs	r2, #2
900047a2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900047a4:	78fa      	ldrb	r2, [r7, #3]
900047a6:	6879      	ldr	r1, [r7, #4]
900047a8:	4613      	mov	r3, r2
900047aa:	011b      	lsls	r3, r3, #4
900047ac:	1a9b      	subs	r3, r3, r2
900047ae:	009b      	lsls	r3, r3, #2
900047b0:	440b      	add	r3, r1
900047b2:	3326      	adds	r3, #38	@ 0x26
900047b4:	781b      	ldrb	r3, [r3, #0]
900047b6:	2b00      	cmp	r3, #0
900047b8:	d00b      	beq.n	900047d2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900047ba:	78fa      	ldrb	r2, [r7, #3]
900047bc:	6879      	ldr	r1, [r7, #4]
900047be:	4613      	mov	r3, r2
900047c0:	011b      	lsls	r3, r3, #4
900047c2:	1a9b      	subs	r3, r3, r2
900047c4:	009b      	lsls	r3, r3, #2
900047c6:	440b      	add	r3, r1
900047c8:	3326      	adds	r3, #38	@ 0x26
900047ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900047cc:	2b02      	cmp	r3, #2
900047ce:	f040 8209 	bne.w	90004be4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900047d2:	78fb      	ldrb	r3, [r7, #3]
900047d4:	015a      	lsls	r2, r3, #5
900047d6:	693b      	ldr	r3, [r7, #16]
900047d8:	4413      	add	r3, r2
900047da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047de:	681b      	ldr	r3, [r3, #0]
900047e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900047e2:	68fb      	ldr	r3, [r7, #12]
900047e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900047e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900047ea:	68fb      	ldr	r3, [r7, #12]
900047ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900047f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
900047f2:	78fb      	ldrb	r3, [r7, #3]
900047f4:	015a      	lsls	r2, r3, #5
900047f6:	693b      	ldr	r3, [r7, #16]
900047f8:	4413      	add	r3, r2
900047fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047fe:	461a      	mov	r2, r3
90004800:	68fb      	ldr	r3, [r7, #12]
90004802:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004804:	e1ee      	b.n	90004be4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004806:	78fa      	ldrb	r2, [r7, #3]
90004808:	6879      	ldr	r1, [r7, #4]
9000480a:	4613      	mov	r3, r2
9000480c:	011b      	lsls	r3, r3, #4
9000480e:	1a9b      	subs	r3, r3, r2
90004810:	009b      	lsls	r3, r3, #2
90004812:	440b      	add	r3, r1
90004814:	334d      	adds	r3, #77	@ 0x4d
90004816:	781b      	ldrb	r3, [r3, #0]
90004818:	2b05      	cmp	r3, #5
9000481a:	f040 80c8 	bne.w	900049ae <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000481e:	78fa      	ldrb	r2, [r7, #3]
90004820:	6879      	ldr	r1, [r7, #4]
90004822:	4613      	mov	r3, r2
90004824:	011b      	lsls	r3, r3, #4
90004826:	1a9b      	subs	r3, r3, r2
90004828:	009b      	lsls	r3, r3, #2
9000482a:	440b      	add	r3, r1
9000482c:	334d      	adds	r3, #77	@ 0x4d
9000482e:	2202      	movs	r2, #2
90004830:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004832:	78fa      	ldrb	r2, [r7, #3]
90004834:	6879      	ldr	r1, [r7, #4]
90004836:	4613      	mov	r3, r2
90004838:	011b      	lsls	r3, r3, #4
9000483a:	1a9b      	subs	r3, r3, r2
9000483c:	009b      	lsls	r3, r3, #2
9000483e:	440b      	add	r3, r1
90004840:	331b      	adds	r3, #27
90004842:	781b      	ldrb	r3, [r3, #0]
90004844:	2b01      	cmp	r3, #1
90004846:	f040 81ce 	bne.w	90004be6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
9000484a:	78fa      	ldrb	r2, [r7, #3]
9000484c:	6879      	ldr	r1, [r7, #4]
9000484e:	4613      	mov	r3, r2
90004850:	011b      	lsls	r3, r3, #4
90004852:	1a9b      	subs	r3, r3, r2
90004854:	009b      	lsls	r3, r3, #2
90004856:	440b      	add	r3, r1
90004858:	3326      	adds	r3, #38	@ 0x26
9000485a:	781b      	ldrb	r3, [r3, #0]
9000485c:	2b03      	cmp	r3, #3
9000485e:	d16b      	bne.n	90004938 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004860:	78fa      	ldrb	r2, [r7, #3]
90004862:	6879      	ldr	r1, [r7, #4]
90004864:	4613      	mov	r3, r2
90004866:	011b      	lsls	r3, r3, #4
90004868:	1a9b      	subs	r3, r3, r2
9000486a:	009b      	lsls	r3, r3, #2
9000486c:	440b      	add	r3, r1
9000486e:	3348      	adds	r3, #72	@ 0x48
90004870:	681b      	ldr	r3, [r3, #0]
90004872:	1c59      	adds	r1, r3, #1
90004874:	6878      	ldr	r0, [r7, #4]
90004876:	4613      	mov	r3, r2
90004878:	011b      	lsls	r3, r3, #4
9000487a:	1a9b      	subs	r3, r3, r2
9000487c:	009b      	lsls	r3, r3, #2
9000487e:	4403      	add	r3, r0
90004880:	3348      	adds	r3, #72	@ 0x48
90004882:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
90004884:	78fa      	ldrb	r2, [r7, #3]
90004886:	6879      	ldr	r1, [r7, #4]
90004888:	4613      	mov	r3, r2
9000488a:	011b      	lsls	r3, r3, #4
9000488c:	1a9b      	subs	r3, r3, r2
9000488e:	009b      	lsls	r3, r3, #2
90004890:	440b      	add	r3, r1
90004892:	3348      	adds	r3, #72	@ 0x48
90004894:	681b      	ldr	r3, [r3, #0]
90004896:	2b02      	cmp	r3, #2
90004898:	d943      	bls.n	90004922 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
9000489a:	78fa      	ldrb	r2, [r7, #3]
9000489c:	6879      	ldr	r1, [r7, #4]
9000489e:	4613      	mov	r3, r2
900048a0:	011b      	lsls	r3, r3, #4
900048a2:	1a9b      	subs	r3, r3, r2
900048a4:	009b      	lsls	r3, r3, #2
900048a6:	440b      	add	r3, r1
900048a8:	3348      	adds	r3, #72	@ 0x48
900048aa:	2200      	movs	r2, #0
900048ac:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
900048ae:	78fa      	ldrb	r2, [r7, #3]
900048b0:	6879      	ldr	r1, [r7, #4]
900048b2:	4613      	mov	r3, r2
900048b4:	011b      	lsls	r3, r3, #4
900048b6:	1a9b      	subs	r3, r3, r2
900048b8:	009b      	lsls	r3, r3, #2
900048ba:	440b      	add	r3, r1
900048bc:	331b      	adds	r3, #27
900048be:	2200      	movs	r2, #0
900048c0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
900048c2:	78fa      	ldrb	r2, [r7, #3]
900048c4:	6879      	ldr	r1, [r7, #4]
900048c6:	4613      	mov	r3, r2
900048c8:	011b      	lsls	r3, r3, #4
900048ca:	1a9b      	subs	r3, r3, r2
900048cc:	009b      	lsls	r3, r3, #2
900048ce:	440b      	add	r3, r1
900048d0:	3344      	adds	r3, #68	@ 0x44
900048d2:	681b      	ldr	r3, [r3, #0]
900048d4:	2b02      	cmp	r3, #2
900048d6:	d809      	bhi.n	900048ec <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
900048d8:	78fa      	ldrb	r2, [r7, #3]
900048da:	6879      	ldr	r1, [r7, #4]
900048dc:	4613      	mov	r3, r2
900048de:	011b      	lsls	r3, r3, #4
900048e0:	1a9b      	subs	r3, r3, r2
900048e2:	009b      	lsls	r3, r3, #2
900048e4:	440b      	add	r3, r1
900048e6:	331c      	adds	r3, #28
900048e8:	2201      	movs	r2, #1
900048ea:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900048ec:	78fb      	ldrb	r3, [r7, #3]
900048ee:	015a      	lsls	r2, r3, #5
900048f0:	693b      	ldr	r3, [r7, #16]
900048f2:	4413      	add	r3, r2
900048f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048f8:	685b      	ldr	r3, [r3, #4]
900048fa:	78fa      	ldrb	r2, [r7, #3]
900048fc:	0151      	lsls	r1, r2, #5
900048fe:	693a      	ldr	r2, [r7, #16]
90004900:	440a      	add	r2, r1
90004902:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000490a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
9000490c:	78fa      	ldrb	r2, [r7, #3]
9000490e:	6879      	ldr	r1, [r7, #4]
90004910:	4613      	mov	r3, r2
90004912:	011b      	lsls	r3, r3, #4
90004914:	1a9b      	subs	r3, r3, r2
90004916:	009b      	lsls	r3, r3, #2
90004918:	440b      	add	r3, r1
9000491a:	334c      	adds	r3, #76	@ 0x4c
9000491c:	2204      	movs	r2, #4
9000491e:	701a      	strb	r2, [r3, #0]
90004920:	e014      	b.n	9000494c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004922:	78fa      	ldrb	r2, [r7, #3]
90004924:	6879      	ldr	r1, [r7, #4]
90004926:	4613      	mov	r3, r2
90004928:	011b      	lsls	r3, r3, #4
9000492a:	1a9b      	subs	r3, r3, r2
9000492c:	009b      	lsls	r3, r3, #2
9000492e:	440b      	add	r3, r1
90004930:	334c      	adds	r3, #76	@ 0x4c
90004932:	2202      	movs	r2, #2
90004934:	701a      	strb	r2, [r3, #0]
90004936:	e009      	b.n	9000494c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004938:	78fa      	ldrb	r2, [r7, #3]
9000493a:	6879      	ldr	r1, [r7, #4]
9000493c:	4613      	mov	r3, r2
9000493e:	011b      	lsls	r3, r3, #4
90004940:	1a9b      	subs	r3, r3, r2
90004942:	009b      	lsls	r3, r3, #2
90004944:	440b      	add	r3, r1
90004946:	334c      	adds	r3, #76	@ 0x4c
90004948:	2202      	movs	r2, #2
9000494a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000494c:	78fa      	ldrb	r2, [r7, #3]
9000494e:	6879      	ldr	r1, [r7, #4]
90004950:	4613      	mov	r3, r2
90004952:	011b      	lsls	r3, r3, #4
90004954:	1a9b      	subs	r3, r3, r2
90004956:	009b      	lsls	r3, r3, #2
90004958:	440b      	add	r3, r1
9000495a:	3326      	adds	r3, #38	@ 0x26
9000495c:	781b      	ldrb	r3, [r3, #0]
9000495e:	2b00      	cmp	r3, #0
90004960:	d00b      	beq.n	9000497a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004962:	78fa      	ldrb	r2, [r7, #3]
90004964:	6879      	ldr	r1, [r7, #4]
90004966:	4613      	mov	r3, r2
90004968:	011b      	lsls	r3, r3, #4
9000496a:	1a9b      	subs	r3, r3, r2
9000496c:	009b      	lsls	r3, r3, #2
9000496e:	440b      	add	r3, r1
90004970:	3326      	adds	r3, #38	@ 0x26
90004972:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004974:	2b02      	cmp	r3, #2
90004976:	f040 8136 	bne.w	90004be6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
9000497a:	78fb      	ldrb	r3, [r7, #3]
9000497c:	015a      	lsls	r2, r3, #5
9000497e:	693b      	ldr	r3, [r7, #16]
90004980:	4413      	add	r3, r2
90004982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004986:	681b      	ldr	r3, [r3, #0]
90004988:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000498a:	68fb      	ldr	r3, [r7, #12]
9000498c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004990:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004992:	68fb      	ldr	r3, [r7, #12]
90004994:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004998:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000499a:	78fb      	ldrb	r3, [r7, #3]
9000499c:	015a      	lsls	r2, r3, #5
9000499e:	693b      	ldr	r3, [r7, #16]
900049a0:	4413      	add	r3, r2
900049a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049a6:	461a      	mov	r2, r3
900049a8:	68fb      	ldr	r3, [r7, #12]
900049aa:	6013      	str	r3, [r2, #0]
900049ac:	e11b      	b.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
900049ae:	78fa      	ldrb	r2, [r7, #3]
900049b0:	6879      	ldr	r1, [r7, #4]
900049b2:	4613      	mov	r3, r2
900049b4:	011b      	lsls	r3, r3, #4
900049b6:	1a9b      	subs	r3, r3, r2
900049b8:	009b      	lsls	r3, r3, #2
900049ba:	440b      	add	r3, r1
900049bc:	334d      	adds	r3, #77	@ 0x4d
900049be:	781b      	ldrb	r3, [r3, #0]
900049c0:	2b03      	cmp	r3, #3
900049c2:	f040 8081 	bne.w	90004ac8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900049c6:	78fa      	ldrb	r2, [r7, #3]
900049c8:	6879      	ldr	r1, [r7, #4]
900049ca:	4613      	mov	r3, r2
900049cc:	011b      	lsls	r3, r3, #4
900049ce:	1a9b      	subs	r3, r3, r2
900049d0:	009b      	lsls	r3, r3, #2
900049d2:	440b      	add	r3, r1
900049d4:	334d      	adds	r3, #77	@ 0x4d
900049d6:	2202      	movs	r2, #2
900049d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900049da:	78fa      	ldrb	r2, [r7, #3]
900049dc:	6879      	ldr	r1, [r7, #4]
900049de:	4613      	mov	r3, r2
900049e0:	011b      	lsls	r3, r3, #4
900049e2:	1a9b      	subs	r3, r3, r2
900049e4:	009b      	lsls	r3, r3, #2
900049e6:	440b      	add	r3, r1
900049e8:	331b      	adds	r3, #27
900049ea:	781b      	ldrb	r3, [r3, #0]
900049ec:	2b01      	cmp	r3, #1
900049ee:	f040 80fa 	bne.w	90004be6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900049f2:	78fa      	ldrb	r2, [r7, #3]
900049f4:	6879      	ldr	r1, [r7, #4]
900049f6:	4613      	mov	r3, r2
900049f8:	011b      	lsls	r3, r3, #4
900049fa:	1a9b      	subs	r3, r3, r2
900049fc:	009b      	lsls	r3, r3, #2
900049fe:	440b      	add	r3, r1
90004a00:	334c      	adds	r3, #76	@ 0x4c
90004a02:	2202      	movs	r2, #2
90004a04:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004a06:	78fb      	ldrb	r3, [r7, #3]
90004a08:	015a      	lsls	r2, r3, #5
90004a0a:	693b      	ldr	r3, [r7, #16]
90004a0c:	4413      	add	r3, r2
90004a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a12:	685b      	ldr	r3, [r3, #4]
90004a14:	78fa      	ldrb	r2, [r7, #3]
90004a16:	0151      	lsls	r1, r2, #5
90004a18:	693a      	ldr	r2, [r7, #16]
90004a1a:	440a      	add	r2, r1
90004a1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004a24:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004a26:	78fb      	ldrb	r3, [r7, #3]
90004a28:	015a      	lsls	r2, r3, #5
90004a2a:	693b      	ldr	r3, [r7, #16]
90004a2c:	4413      	add	r3, r2
90004a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a32:	68db      	ldr	r3, [r3, #12]
90004a34:	78fa      	ldrb	r2, [r7, #3]
90004a36:	0151      	lsls	r1, r2, #5
90004a38:	693a      	ldr	r2, [r7, #16]
90004a3a:	440a      	add	r2, r1
90004a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004a44:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004a46:	78fb      	ldrb	r3, [r7, #3]
90004a48:	015a      	lsls	r2, r3, #5
90004a4a:	693b      	ldr	r3, [r7, #16]
90004a4c:	4413      	add	r3, r2
90004a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a52:	68db      	ldr	r3, [r3, #12]
90004a54:	78fa      	ldrb	r2, [r7, #3]
90004a56:	0151      	lsls	r1, r2, #5
90004a58:	693a      	ldr	r2, [r7, #16]
90004a5a:	440a      	add	r2, r1
90004a5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a60:	f023 0320 	bic.w	r3, r3, #32
90004a64:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a66:	78fa      	ldrb	r2, [r7, #3]
90004a68:	6879      	ldr	r1, [r7, #4]
90004a6a:	4613      	mov	r3, r2
90004a6c:	011b      	lsls	r3, r3, #4
90004a6e:	1a9b      	subs	r3, r3, r2
90004a70:	009b      	lsls	r3, r3, #2
90004a72:	440b      	add	r3, r1
90004a74:	3326      	adds	r3, #38	@ 0x26
90004a76:	781b      	ldrb	r3, [r3, #0]
90004a78:	2b00      	cmp	r3, #0
90004a7a:	d00b      	beq.n	90004a94 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004a7c:	78fa      	ldrb	r2, [r7, #3]
90004a7e:	6879      	ldr	r1, [r7, #4]
90004a80:	4613      	mov	r3, r2
90004a82:	011b      	lsls	r3, r3, #4
90004a84:	1a9b      	subs	r3, r3, r2
90004a86:	009b      	lsls	r3, r3, #2
90004a88:	440b      	add	r3, r1
90004a8a:	3326      	adds	r3, #38	@ 0x26
90004a8c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a8e:	2b02      	cmp	r3, #2
90004a90:	f040 80a9 	bne.w	90004be6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004a94:	78fb      	ldrb	r3, [r7, #3]
90004a96:	015a      	lsls	r2, r3, #5
90004a98:	693b      	ldr	r3, [r7, #16]
90004a9a:	4413      	add	r3, r2
90004a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004aa0:	681b      	ldr	r3, [r3, #0]
90004aa2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004aa4:	68fb      	ldr	r3, [r7, #12]
90004aa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004aaa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004aac:	68fb      	ldr	r3, [r7, #12]
90004aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004ab2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004ab4:	78fb      	ldrb	r3, [r7, #3]
90004ab6:	015a      	lsls	r2, r3, #5
90004ab8:	693b      	ldr	r3, [r7, #16]
90004aba:	4413      	add	r3, r2
90004abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ac0:	461a      	mov	r2, r3
90004ac2:	68fb      	ldr	r3, [r7, #12]
90004ac4:	6013      	str	r3, [r2, #0]
90004ac6:	e08e      	b.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004ac8:	78fa      	ldrb	r2, [r7, #3]
90004aca:	6879      	ldr	r1, [r7, #4]
90004acc:	4613      	mov	r3, r2
90004ace:	011b      	lsls	r3, r3, #4
90004ad0:	1a9b      	subs	r3, r3, r2
90004ad2:	009b      	lsls	r3, r3, #2
90004ad4:	440b      	add	r3, r1
90004ad6:	334d      	adds	r3, #77	@ 0x4d
90004ad8:	781b      	ldrb	r3, [r3, #0]
90004ada:	2b04      	cmp	r3, #4
90004adc:	d143      	bne.n	90004b66 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004ade:	78fa      	ldrb	r2, [r7, #3]
90004ae0:	6879      	ldr	r1, [r7, #4]
90004ae2:	4613      	mov	r3, r2
90004ae4:	011b      	lsls	r3, r3, #4
90004ae6:	1a9b      	subs	r3, r3, r2
90004ae8:	009b      	lsls	r3, r3, #2
90004aea:	440b      	add	r3, r1
90004aec:	334d      	adds	r3, #77	@ 0x4d
90004aee:	2202      	movs	r2, #2
90004af0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004af2:	78fa      	ldrb	r2, [r7, #3]
90004af4:	6879      	ldr	r1, [r7, #4]
90004af6:	4613      	mov	r3, r2
90004af8:	011b      	lsls	r3, r3, #4
90004afa:	1a9b      	subs	r3, r3, r2
90004afc:	009b      	lsls	r3, r3, #2
90004afe:	440b      	add	r3, r1
90004b00:	334c      	adds	r3, #76	@ 0x4c
90004b02:	2202      	movs	r2, #2
90004b04:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b06:	78fa      	ldrb	r2, [r7, #3]
90004b08:	6879      	ldr	r1, [r7, #4]
90004b0a:	4613      	mov	r3, r2
90004b0c:	011b      	lsls	r3, r3, #4
90004b0e:	1a9b      	subs	r3, r3, r2
90004b10:	009b      	lsls	r3, r3, #2
90004b12:	440b      	add	r3, r1
90004b14:	3326      	adds	r3, #38	@ 0x26
90004b16:	781b      	ldrb	r3, [r3, #0]
90004b18:	2b00      	cmp	r3, #0
90004b1a:	d00a      	beq.n	90004b32 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004b1c:	78fa      	ldrb	r2, [r7, #3]
90004b1e:	6879      	ldr	r1, [r7, #4]
90004b20:	4613      	mov	r3, r2
90004b22:	011b      	lsls	r3, r3, #4
90004b24:	1a9b      	subs	r3, r3, r2
90004b26:	009b      	lsls	r3, r3, #2
90004b28:	440b      	add	r3, r1
90004b2a:	3326      	adds	r3, #38	@ 0x26
90004b2c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b2e:	2b02      	cmp	r3, #2
90004b30:	d159      	bne.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004b32:	78fb      	ldrb	r3, [r7, #3]
90004b34:	015a      	lsls	r2, r3, #5
90004b36:	693b      	ldr	r3, [r7, #16]
90004b38:	4413      	add	r3, r2
90004b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b3e:	681b      	ldr	r3, [r3, #0]
90004b40:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b42:	68fb      	ldr	r3, [r7, #12]
90004b44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004b48:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b4a:	68fb      	ldr	r3, [r7, #12]
90004b4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004b50:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004b52:	78fb      	ldrb	r3, [r7, #3]
90004b54:	015a      	lsls	r2, r3, #5
90004b56:	693b      	ldr	r3, [r7, #16]
90004b58:	4413      	add	r3, r2
90004b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b5e:	461a      	mov	r2, r3
90004b60:	68fb      	ldr	r3, [r7, #12]
90004b62:	6013      	str	r3, [r2, #0]
90004b64:	e03f      	b.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004b66:	78fa      	ldrb	r2, [r7, #3]
90004b68:	6879      	ldr	r1, [r7, #4]
90004b6a:	4613      	mov	r3, r2
90004b6c:	011b      	lsls	r3, r3, #4
90004b6e:	1a9b      	subs	r3, r3, r2
90004b70:	009b      	lsls	r3, r3, #2
90004b72:	440b      	add	r3, r1
90004b74:	334d      	adds	r3, #77	@ 0x4d
90004b76:	781b      	ldrb	r3, [r3, #0]
90004b78:	2b08      	cmp	r3, #8
90004b7a:	d126      	bne.n	90004bca <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b7c:	78fa      	ldrb	r2, [r7, #3]
90004b7e:	6879      	ldr	r1, [r7, #4]
90004b80:	4613      	mov	r3, r2
90004b82:	011b      	lsls	r3, r3, #4
90004b84:	1a9b      	subs	r3, r3, r2
90004b86:	009b      	lsls	r3, r3, #2
90004b88:	440b      	add	r3, r1
90004b8a:	334d      	adds	r3, #77	@ 0x4d
90004b8c:	2202      	movs	r2, #2
90004b8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004b90:	78fa      	ldrb	r2, [r7, #3]
90004b92:	6879      	ldr	r1, [r7, #4]
90004b94:	4613      	mov	r3, r2
90004b96:	011b      	lsls	r3, r3, #4
90004b98:	1a9b      	subs	r3, r3, r2
90004b9a:	009b      	lsls	r3, r3, #2
90004b9c:	440b      	add	r3, r1
90004b9e:	3344      	adds	r3, #68	@ 0x44
90004ba0:	681b      	ldr	r3, [r3, #0]
90004ba2:	1c59      	adds	r1, r3, #1
90004ba4:	6878      	ldr	r0, [r7, #4]
90004ba6:	4613      	mov	r3, r2
90004ba8:	011b      	lsls	r3, r3, #4
90004baa:	1a9b      	subs	r3, r3, r2
90004bac:	009b      	lsls	r3, r3, #2
90004bae:	4403      	add	r3, r0
90004bb0:	3344      	adds	r3, #68	@ 0x44
90004bb2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004bb4:	78fa      	ldrb	r2, [r7, #3]
90004bb6:	6879      	ldr	r1, [r7, #4]
90004bb8:	4613      	mov	r3, r2
90004bba:	011b      	lsls	r3, r3, #4
90004bbc:	1a9b      	subs	r3, r3, r2
90004bbe:	009b      	lsls	r3, r3, #2
90004bc0:	440b      	add	r3, r1
90004bc2:	334c      	adds	r3, #76	@ 0x4c
90004bc4:	2204      	movs	r2, #4
90004bc6:	701a      	strb	r2, [r3, #0]
90004bc8:	e00d      	b.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004bca:	78fa      	ldrb	r2, [r7, #3]
90004bcc:	6879      	ldr	r1, [r7, #4]
90004bce:	4613      	mov	r3, r2
90004bd0:	011b      	lsls	r3, r3, #4
90004bd2:	1a9b      	subs	r3, r3, r2
90004bd4:	009b      	lsls	r3, r3, #2
90004bd6:	440b      	add	r3, r1
90004bd8:	334d      	adds	r3, #77	@ 0x4d
90004bda:	781b      	ldrb	r3, [r3, #0]
90004bdc:	2b02      	cmp	r3, #2
90004bde:	f000 8100 	beq.w	90004de2 <HCD_HC_IN_IRQHandler+0xcca>
90004be2:	e000      	b.n	90004be6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004be4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004be6:	78fa      	ldrb	r2, [r7, #3]
90004be8:	6879      	ldr	r1, [r7, #4]
90004bea:	4613      	mov	r3, r2
90004bec:	011b      	lsls	r3, r3, #4
90004bee:	1a9b      	subs	r3, r3, r2
90004bf0:	009b      	lsls	r3, r3, #2
90004bf2:	440b      	add	r3, r1
90004bf4:	334c      	adds	r3, #76	@ 0x4c
90004bf6:	781a      	ldrb	r2, [r3, #0]
90004bf8:	78fb      	ldrb	r3, [r7, #3]
90004bfa:	4619      	mov	r1, r3
90004bfc:	6878      	ldr	r0, [r7, #4]
90004bfe:	f7fb fe55 	bl	900008ac <HAL_HCD_HC_NotifyURBChange_Callback>
90004c02:	e0ef      	b.n	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004c04:	687b      	ldr	r3, [r7, #4]
90004c06:	681b      	ldr	r3, [r3, #0]
90004c08:	78fa      	ldrb	r2, [r7, #3]
90004c0a:	4611      	mov	r1, r2
90004c0c:	4618      	mov	r0, r3
90004c0e:	f005 f84c 	bl	90009caa <USB_ReadChInterrupts>
90004c12:	4603      	mov	r3, r0
90004c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004c18:	2b40      	cmp	r3, #64	@ 0x40
90004c1a:	d12f      	bne.n	90004c7c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004c1c:	78fb      	ldrb	r3, [r7, #3]
90004c1e:	015a      	lsls	r2, r3, #5
90004c20:	693b      	ldr	r3, [r7, #16]
90004c22:	4413      	add	r3, r2
90004c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c28:	461a      	mov	r2, r3
90004c2a:	2340      	movs	r3, #64	@ 0x40
90004c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004c2e:	78fa      	ldrb	r2, [r7, #3]
90004c30:	6879      	ldr	r1, [r7, #4]
90004c32:	4613      	mov	r3, r2
90004c34:	011b      	lsls	r3, r3, #4
90004c36:	1a9b      	subs	r3, r3, r2
90004c38:	009b      	lsls	r3, r3, #2
90004c3a:	440b      	add	r3, r1
90004c3c:	334d      	adds	r3, #77	@ 0x4d
90004c3e:	2205      	movs	r2, #5
90004c40:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004c42:	78fa      	ldrb	r2, [r7, #3]
90004c44:	6879      	ldr	r1, [r7, #4]
90004c46:	4613      	mov	r3, r2
90004c48:	011b      	lsls	r3, r3, #4
90004c4a:	1a9b      	subs	r3, r3, r2
90004c4c:	009b      	lsls	r3, r3, #2
90004c4e:	440b      	add	r3, r1
90004c50:	331a      	adds	r3, #26
90004c52:	781b      	ldrb	r3, [r3, #0]
90004c54:	2b00      	cmp	r3, #0
90004c56:	d109      	bne.n	90004c6c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004c58:	78fa      	ldrb	r2, [r7, #3]
90004c5a:	6879      	ldr	r1, [r7, #4]
90004c5c:	4613      	mov	r3, r2
90004c5e:	011b      	lsls	r3, r3, #4
90004c60:	1a9b      	subs	r3, r3, r2
90004c62:	009b      	lsls	r3, r3, #2
90004c64:	440b      	add	r3, r1
90004c66:	3344      	adds	r3, #68	@ 0x44
90004c68:	2200      	movs	r2, #0
90004c6a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c6c:	687b      	ldr	r3, [r7, #4]
90004c6e:	681b      	ldr	r3, [r3, #0]
90004c70:	78fa      	ldrb	r2, [r7, #3]
90004c72:	4611      	mov	r1, r2
90004c74:	4618      	mov	r0, r3
90004c76:	f005 f895 	bl	90009da4 <USB_HC_Halt>
90004c7a:	e0b3      	b.n	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004c7c:	687b      	ldr	r3, [r7, #4]
90004c7e:	681b      	ldr	r3, [r3, #0]
90004c80:	78fa      	ldrb	r2, [r7, #3]
90004c82:	4611      	mov	r1, r2
90004c84:	4618      	mov	r0, r3
90004c86:	f005 f810 	bl	90009caa <USB_ReadChInterrupts>
90004c8a:	4603      	mov	r3, r0
90004c8c:	f003 0310 	and.w	r3, r3, #16
90004c90:	2b10      	cmp	r3, #16
90004c92:	f040 80a7 	bne.w	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004c96:	78fa      	ldrb	r2, [r7, #3]
90004c98:	6879      	ldr	r1, [r7, #4]
90004c9a:	4613      	mov	r3, r2
90004c9c:	011b      	lsls	r3, r3, #4
90004c9e:	1a9b      	subs	r3, r3, r2
90004ca0:	009b      	lsls	r3, r3, #2
90004ca2:	440b      	add	r3, r1
90004ca4:	3326      	adds	r3, #38	@ 0x26
90004ca6:	781b      	ldrb	r3, [r3, #0]
90004ca8:	2b03      	cmp	r3, #3
90004caa:	d11b      	bne.n	90004ce4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004cac:	78fa      	ldrb	r2, [r7, #3]
90004cae:	6879      	ldr	r1, [r7, #4]
90004cb0:	4613      	mov	r3, r2
90004cb2:	011b      	lsls	r3, r3, #4
90004cb4:	1a9b      	subs	r3, r3, r2
90004cb6:	009b      	lsls	r3, r3, #2
90004cb8:	440b      	add	r3, r1
90004cba:	3344      	adds	r3, #68	@ 0x44
90004cbc:	2200      	movs	r2, #0
90004cbe:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004cc0:	78fa      	ldrb	r2, [r7, #3]
90004cc2:	6879      	ldr	r1, [r7, #4]
90004cc4:	4613      	mov	r3, r2
90004cc6:	011b      	lsls	r3, r3, #4
90004cc8:	1a9b      	subs	r3, r3, r2
90004cca:	009b      	lsls	r3, r3, #2
90004ccc:	440b      	add	r3, r1
90004cce:	334d      	adds	r3, #77	@ 0x4d
90004cd0:	2204      	movs	r2, #4
90004cd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004cd4:	687b      	ldr	r3, [r7, #4]
90004cd6:	681b      	ldr	r3, [r3, #0]
90004cd8:	78fa      	ldrb	r2, [r7, #3]
90004cda:	4611      	mov	r1, r2
90004cdc:	4618      	mov	r0, r3
90004cde:	f005 f861 	bl	90009da4 <USB_HC_Halt>
90004ce2:	e03f      	b.n	90004d64 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ce4:	78fa      	ldrb	r2, [r7, #3]
90004ce6:	6879      	ldr	r1, [r7, #4]
90004ce8:	4613      	mov	r3, r2
90004cea:	011b      	lsls	r3, r3, #4
90004cec:	1a9b      	subs	r3, r3, r2
90004cee:	009b      	lsls	r3, r3, #2
90004cf0:	440b      	add	r3, r1
90004cf2:	3326      	adds	r3, #38	@ 0x26
90004cf4:	781b      	ldrb	r3, [r3, #0]
90004cf6:	2b00      	cmp	r3, #0
90004cf8:	d00a      	beq.n	90004d10 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004cfa:	78fa      	ldrb	r2, [r7, #3]
90004cfc:	6879      	ldr	r1, [r7, #4]
90004cfe:	4613      	mov	r3, r2
90004d00:	011b      	lsls	r3, r3, #4
90004d02:	1a9b      	subs	r3, r3, r2
90004d04:	009b      	lsls	r3, r3, #2
90004d06:	440b      	add	r3, r1
90004d08:	3326      	adds	r3, #38	@ 0x26
90004d0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004d0c:	2b02      	cmp	r3, #2
90004d0e:	d129      	bne.n	90004d64 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d10:	78fa      	ldrb	r2, [r7, #3]
90004d12:	6879      	ldr	r1, [r7, #4]
90004d14:	4613      	mov	r3, r2
90004d16:	011b      	lsls	r3, r3, #4
90004d18:	1a9b      	subs	r3, r3, r2
90004d1a:	009b      	lsls	r3, r3, #2
90004d1c:	440b      	add	r3, r1
90004d1e:	3344      	adds	r3, #68	@ 0x44
90004d20:	2200      	movs	r2, #0
90004d22:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004d24:	687b      	ldr	r3, [r7, #4]
90004d26:	799b      	ldrb	r3, [r3, #6]
90004d28:	2b00      	cmp	r3, #0
90004d2a:	d00a      	beq.n	90004d42 <HCD_HC_IN_IRQHandler+0xc2a>
90004d2c:	78fa      	ldrb	r2, [r7, #3]
90004d2e:	6879      	ldr	r1, [r7, #4]
90004d30:	4613      	mov	r3, r2
90004d32:	011b      	lsls	r3, r3, #4
90004d34:	1a9b      	subs	r3, r3, r2
90004d36:	009b      	lsls	r3, r3, #2
90004d38:	440b      	add	r3, r1
90004d3a:	331b      	adds	r3, #27
90004d3c:	781b      	ldrb	r3, [r3, #0]
90004d3e:	2b01      	cmp	r3, #1
90004d40:	d110      	bne.n	90004d64 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004d42:	78fa      	ldrb	r2, [r7, #3]
90004d44:	6879      	ldr	r1, [r7, #4]
90004d46:	4613      	mov	r3, r2
90004d48:	011b      	lsls	r3, r3, #4
90004d4a:	1a9b      	subs	r3, r3, r2
90004d4c:	009b      	lsls	r3, r3, #2
90004d4e:	440b      	add	r3, r1
90004d50:	334d      	adds	r3, #77	@ 0x4d
90004d52:	2204      	movs	r2, #4
90004d54:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d56:	687b      	ldr	r3, [r7, #4]
90004d58:	681b      	ldr	r3, [r3, #0]
90004d5a:	78fa      	ldrb	r2, [r7, #3]
90004d5c:	4611      	mov	r1, r2
90004d5e:	4618      	mov	r0, r3
90004d60:	f005 f820 	bl	90009da4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004d64:	78fa      	ldrb	r2, [r7, #3]
90004d66:	6879      	ldr	r1, [r7, #4]
90004d68:	4613      	mov	r3, r2
90004d6a:	011b      	lsls	r3, r3, #4
90004d6c:	1a9b      	subs	r3, r3, r2
90004d6e:	009b      	lsls	r3, r3, #2
90004d70:	440b      	add	r3, r1
90004d72:	331b      	adds	r3, #27
90004d74:	781b      	ldrb	r3, [r3, #0]
90004d76:	2b01      	cmp	r3, #1
90004d78:	d129      	bne.n	90004dce <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004d7a:	78fa      	ldrb	r2, [r7, #3]
90004d7c:	6879      	ldr	r1, [r7, #4]
90004d7e:	4613      	mov	r3, r2
90004d80:	011b      	lsls	r3, r3, #4
90004d82:	1a9b      	subs	r3, r3, r2
90004d84:	009b      	lsls	r3, r3, #2
90004d86:	440b      	add	r3, r1
90004d88:	331b      	adds	r3, #27
90004d8a:	2200      	movs	r2, #0
90004d8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004d8e:	78fb      	ldrb	r3, [r7, #3]
90004d90:	015a      	lsls	r2, r3, #5
90004d92:	693b      	ldr	r3, [r7, #16]
90004d94:	4413      	add	r3, r2
90004d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d9a:	685b      	ldr	r3, [r3, #4]
90004d9c:	78fa      	ldrb	r2, [r7, #3]
90004d9e:	0151      	lsls	r1, r2, #5
90004da0:	693a      	ldr	r2, [r7, #16]
90004da2:	440a      	add	r2, r1
90004da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004dac:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004dae:	78fb      	ldrb	r3, [r7, #3]
90004db0:	015a      	lsls	r2, r3, #5
90004db2:	693b      	ldr	r3, [r7, #16]
90004db4:	4413      	add	r3, r2
90004db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004dba:	68db      	ldr	r3, [r3, #12]
90004dbc:	78fa      	ldrb	r2, [r7, #3]
90004dbe:	0151      	lsls	r1, r2, #5
90004dc0:	693a      	ldr	r2, [r7, #16]
90004dc2:	440a      	add	r2, r1
90004dc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004dc8:	f043 0320 	orr.w	r3, r3, #32
90004dcc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004dce:	78fb      	ldrb	r3, [r7, #3]
90004dd0:	015a      	lsls	r2, r3, #5
90004dd2:	693b      	ldr	r3, [r7, #16]
90004dd4:	4413      	add	r3, r2
90004dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004dda:	461a      	mov	r2, r3
90004ddc:	2310      	movs	r3, #16
90004dde:	6093      	str	r3, [r2, #8]
90004de0:	e000      	b.n	90004de4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004de2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004de4:	3718      	adds	r7, #24
90004de6:	46bd      	mov	sp, r7
90004de8:	bd80      	pop	{r7, pc}

90004dea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004dea:	b580      	push	{r7, lr}
90004dec:	b086      	sub	sp, #24
90004dee:	af00      	add	r7, sp, #0
90004df0:	6078      	str	r0, [r7, #4]
90004df2:	460b      	mov	r3, r1
90004df4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004df6:	687b      	ldr	r3, [r7, #4]
90004df8:	681b      	ldr	r3, [r3, #0]
90004dfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004dfc:	697b      	ldr	r3, [r7, #20]
90004dfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004e00:	687b      	ldr	r3, [r7, #4]
90004e02:	681b      	ldr	r3, [r3, #0]
90004e04:	78fa      	ldrb	r2, [r7, #3]
90004e06:	4611      	mov	r1, r2
90004e08:	4618      	mov	r0, r3
90004e0a:	f004 ff4e 	bl	90009caa <USB_ReadChInterrupts>
90004e0e:	4603      	mov	r3, r0
90004e10:	f003 0304 	and.w	r3, r3, #4
90004e14:	2b04      	cmp	r3, #4
90004e16:	d11b      	bne.n	90004e50 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004e18:	78fb      	ldrb	r3, [r7, #3]
90004e1a:	015a      	lsls	r2, r3, #5
90004e1c:	693b      	ldr	r3, [r7, #16]
90004e1e:	4413      	add	r3, r2
90004e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e24:	461a      	mov	r2, r3
90004e26:	2304      	movs	r3, #4
90004e28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004e2a:	78fa      	ldrb	r2, [r7, #3]
90004e2c:	6879      	ldr	r1, [r7, #4]
90004e2e:	4613      	mov	r3, r2
90004e30:	011b      	lsls	r3, r3, #4
90004e32:	1a9b      	subs	r3, r3, r2
90004e34:	009b      	lsls	r3, r3, #2
90004e36:	440b      	add	r3, r1
90004e38:	334d      	adds	r3, #77	@ 0x4d
90004e3a:	2207      	movs	r2, #7
90004e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e3e:	687b      	ldr	r3, [r7, #4]
90004e40:	681b      	ldr	r3, [r3, #0]
90004e42:	78fa      	ldrb	r2, [r7, #3]
90004e44:	4611      	mov	r1, r2
90004e46:	4618      	mov	r0, r3
90004e48:	f004 ffac 	bl	90009da4 <USB_HC_Halt>
90004e4c:	f000 bc89 	b.w	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004e50:	687b      	ldr	r3, [r7, #4]
90004e52:	681b      	ldr	r3, [r3, #0]
90004e54:	78fa      	ldrb	r2, [r7, #3]
90004e56:	4611      	mov	r1, r2
90004e58:	4618      	mov	r0, r3
90004e5a:	f004 ff26 	bl	90009caa <USB_ReadChInterrupts>
90004e5e:	4603      	mov	r3, r0
90004e60:	f003 0320 	and.w	r3, r3, #32
90004e64:	2b20      	cmp	r3, #32
90004e66:	f040 8082 	bne.w	90004f6e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004e6a:	78fb      	ldrb	r3, [r7, #3]
90004e6c:	015a      	lsls	r2, r3, #5
90004e6e:	693b      	ldr	r3, [r7, #16]
90004e70:	4413      	add	r3, r2
90004e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e76:	461a      	mov	r2, r3
90004e78:	2320      	movs	r3, #32
90004e7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004e7c:	78fa      	ldrb	r2, [r7, #3]
90004e7e:	6879      	ldr	r1, [r7, #4]
90004e80:	4613      	mov	r3, r2
90004e82:	011b      	lsls	r3, r3, #4
90004e84:	1a9b      	subs	r3, r3, r2
90004e86:	009b      	lsls	r3, r3, #2
90004e88:	440b      	add	r3, r1
90004e8a:	3319      	adds	r3, #25
90004e8c:	781b      	ldrb	r3, [r3, #0]
90004e8e:	2b01      	cmp	r3, #1
90004e90:	d124      	bne.n	90004edc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004e92:	78fa      	ldrb	r2, [r7, #3]
90004e94:	6879      	ldr	r1, [r7, #4]
90004e96:	4613      	mov	r3, r2
90004e98:	011b      	lsls	r3, r3, #4
90004e9a:	1a9b      	subs	r3, r3, r2
90004e9c:	009b      	lsls	r3, r3, #2
90004e9e:	440b      	add	r3, r1
90004ea0:	3319      	adds	r3, #25
90004ea2:	2200      	movs	r2, #0
90004ea4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004ea6:	78fa      	ldrb	r2, [r7, #3]
90004ea8:	6879      	ldr	r1, [r7, #4]
90004eaa:	4613      	mov	r3, r2
90004eac:	011b      	lsls	r3, r3, #4
90004eae:	1a9b      	subs	r3, r3, r2
90004eb0:	009b      	lsls	r3, r3, #2
90004eb2:	440b      	add	r3, r1
90004eb4:	334c      	adds	r3, #76	@ 0x4c
90004eb6:	2202      	movs	r2, #2
90004eb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004eba:	78fa      	ldrb	r2, [r7, #3]
90004ebc:	6879      	ldr	r1, [r7, #4]
90004ebe:	4613      	mov	r3, r2
90004ec0:	011b      	lsls	r3, r3, #4
90004ec2:	1a9b      	subs	r3, r3, r2
90004ec4:	009b      	lsls	r3, r3, #2
90004ec6:	440b      	add	r3, r1
90004ec8:	334d      	adds	r3, #77	@ 0x4d
90004eca:	2203      	movs	r2, #3
90004ecc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ece:	687b      	ldr	r3, [r7, #4]
90004ed0:	681b      	ldr	r3, [r3, #0]
90004ed2:	78fa      	ldrb	r2, [r7, #3]
90004ed4:	4611      	mov	r1, r2
90004ed6:	4618      	mov	r0, r3
90004ed8:	f004 ff64 	bl	90009da4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90004edc:	78fa      	ldrb	r2, [r7, #3]
90004ede:	6879      	ldr	r1, [r7, #4]
90004ee0:	4613      	mov	r3, r2
90004ee2:	011b      	lsls	r3, r3, #4
90004ee4:	1a9b      	subs	r3, r3, r2
90004ee6:	009b      	lsls	r3, r3, #2
90004ee8:	440b      	add	r3, r1
90004eea:	331a      	adds	r3, #26
90004eec:	781b      	ldrb	r3, [r3, #0]
90004eee:	2b01      	cmp	r3, #1
90004ef0:	f040 8437 	bne.w	90005762 <HCD_HC_OUT_IRQHandler+0x978>
90004ef4:	78fa      	ldrb	r2, [r7, #3]
90004ef6:	6879      	ldr	r1, [r7, #4]
90004ef8:	4613      	mov	r3, r2
90004efa:	011b      	lsls	r3, r3, #4
90004efc:	1a9b      	subs	r3, r3, r2
90004efe:	009b      	lsls	r3, r3, #2
90004f00:	440b      	add	r3, r1
90004f02:	331b      	adds	r3, #27
90004f04:	781b      	ldrb	r3, [r3, #0]
90004f06:	2b00      	cmp	r3, #0
90004f08:	f040 842b 	bne.w	90005762 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90004f0c:	78fa      	ldrb	r2, [r7, #3]
90004f0e:	6879      	ldr	r1, [r7, #4]
90004f10:	4613      	mov	r3, r2
90004f12:	011b      	lsls	r3, r3, #4
90004f14:	1a9b      	subs	r3, r3, r2
90004f16:	009b      	lsls	r3, r3, #2
90004f18:	440b      	add	r3, r1
90004f1a:	3326      	adds	r3, #38	@ 0x26
90004f1c:	781b      	ldrb	r3, [r3, #0]
90004f1e:	2b01      	cmp	r3, #1
90004f20:	d009      	beq.n	90004f36 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90004f22:	78fa      	ldrb	r2, [r7, #3]
90004f24:	6879      	ldr	r1, [r7, #4]
90004f26:	4613      	mov	r3, r2
90004f28:	011b      	lsls	r3, r3, #4
90004f2a:	1a9b      	subs	r3, r3, r2
90004f2c:	009b      	lsls	r3, r3, #2
90004f2e:	440b      	add	r3, r1
90004f30:	331b      	adds	r3, #27
90004f32:	2201      	movs	r2, #1
90004f34:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90004f36:	78fa      	ldrb	r2, [r7, #3]
90004f38:	6879      	ldr	r1, [r7, #4]
90004f3a:	4613      	mov	r3, r2
90004f3c:	011b      	lsls	r3, r3, #4
90004f3e:	1a9b      	subs	r3, r3, r2
90004f40:	009b      	lsls	r3, r3, #2
90004f42:	440b      	add	r3, r1
90004f44:	334d      	adds	r3, #77	@ 0x4d
90004f46:	2203      	movs	r2, #3
90004f48:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f4a:	687b      	ldr	r3, [r7, #4]
90004f4c:	681b      	ldr	r3, [r3, #0]
90004f4e:	78fa      	ldrb	r2, [r7, #3]
90004f50:	4611      	mov	r1, r2
90004f52:	4618      	mov	r0, r3
90004f54:	f004 ff26 	bl	90009da4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90004f58:	78fa      	ldrb	r2, [r7, #3]
90004f5a:	6879      	ldr	r1, [r7, #4]
90004f5c:	4613      	mov	r3, r2
90004f5e:	011b      	lsls	r3, r3, #4
90004f60:	1a9b      	subs	r3, r3, r2
90004f62:	009b      	lsls	r3, r3, #2
90004f64:	440b      	add	r3, r1
90004f66:	3344      	adds	r3, #68	@ 0x44
90004f68:	2200      	movs	r2, #0
90004f6a:	601a      	str	r2, [r3, #0]
90004f6c:	e3f9      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004f6e:	687b      	ldr	r3, [r7, #4]
90004f70:	681b      	ldr	r3, [r3, #0]
90004f72:	78fa      	ldrb	r2, [r7, #3]
90004f74:	4611      	mov	r1, r2
90004f76:	4618      	mov	r0, r3
90004f78:	f004 fe97 	bl	90009caa <USB_ReadChInterrupts>
90004f7c:	4603      	mov	r3, r0
90004f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004f86:	d111      	bne.n	90004fac <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004f88:	78fb      	ldrb	r3, [r7, #3]
90004f8a:	015a      	lsls	r2, r3, #5
90004f8c:	693b      	ldr	r3, [r7, #16]
90004f8e:	4413      	add	r3, r2
90004f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f94:	461a      	mov	r2, r3
90004f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004f9a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f9c:	687b      	ldr	r3, [r7, #4]
90004f9e:	681b      	ldr	r3, [r3, #0]
90004fa0:	78fa      	ldrb	r2, [r7, #3]
90004fa2:	4611      	mov	r1, r2
90004fa4:	4618      	mov	r0, r3
90004fa6:	f004 fefd 	bl	90009da4 <USB_HC_Halt>
90004faa:	e3da      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004fac:	687b      	ldr	r3, [r7, #4]
90004fae:	681b      	ldr	r3, [r3, #0]
90004fb0:	78fa      	ldrb	r2, [r7, #3]
90004fb2:	4611      	mov	r1, r2
90004fb4:	4618      	mov	r0, r3
90004fb6:	f004 fe78 	bl	90009caa <USB_ReadChInterrupts>
90004fba:	4603      	mov	r3, r0
90004fbc:	f003 0301 	and.w	r3, r3, #1
90004fc0:	2b01      	cmp	r3, #1
90004fc2:	d168      	bne.n	90005096 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004fc4:	78fa      	ldrb	r2, [r7, #3]
90004fc6:	6879      	ldr	r1, [r7, #4]
90004fc8:	4613      	mov	r3, r2
90004fca:	011b      	lsls	r3, r3, #4
90004fcc:	1a9b      	subs	r3, r3, r2
90004fce:	009b      	lsls	r3, r3, #2
90004fd0:	440b      	add	r3, r1
90004fd2:	3344      	adds	r3, #68	@ 0x44
90004fd4:	2200      	movs	r2, #0
90004fd6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004fd8:	687b      	ldr	r3, [r7, #4]
90004fda:	681b      	ldr	r3, [r3, #0]
90004fdc:	78fa      	ldrb	r2, [r7, #3]
90004fde:	4611      	mov	r1, r2
90004fe0:	4618      	mov	r0, r3
90004fe2:	f004 fe62 	bl	90009caa <USB_ReadChInterrupts>
90004fe6:	4603      	mov	r3, r0
90004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004fec:	2b40      	cmp	r3, #64	@ 0x40
90004fee:	d112      	bne.n	90005016 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004ff0:	78fa      	ldrb	r2, [r7, #3]
90004ff2:	6879      	ldr	r1, [r7, #4]
90004ff4:	4613      	mov	r3, r2
90004ff6:	011b      	lsls	r3, r3, #4
90004ff8:	1a9b      	subs	r3, r3, r2
90004ffa:	009b      	lsls	r3, r3, #2
90004ffc:	440b      	add	r3, r1
90004ffe:	3319      	adds	r3, #25
90005000:	2201      	movs	r2, #1
90005002:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005004:	78fb      	ldrb	r3, [r7, #3]
90005006:	015a      	lsls	r2, r3, #5
90005008:	693b      	ldr	r3, [r7, #16]
9000500a:	4413      	add	r3, r2
9000500c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005010:	461a      	mov	r2, r3
90005012:	2340      	movs	r3, #64	@ 0x40
90005014:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90005016:	78fa      	ldrb	r2, [r7, #3]
90005018:	6879      	ldr	r1, [r7, #4]
9000501a:	4613      	mov	r3, r2
9000501c:	011b      	lsls	r3, r3, #4
9000501e:	1a9b      	subs	r3, r3, r2
90005020:	009b      	lsls	r3, r3, #2
90005022:	440b      	add	r3, r1
90005024:	331b      	adds	r3, #27
90005026:	781b      	ldrb	r3, [r3, #0]
90005028:	2b00      	cmp	r3, #0
9000502a:	d019      	beq.n	90005060 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000502c:	78fa      	ldrb	r2, [r7, #3]
9000502e:	6879      	ldr	r1, [r7, #4]
90005030:	4613      	mov	r3, r2
90005032:	011b      	lsls	r3, r3, #4
90005034:	1a9b      	subs	r3, r3, r2
90005036:	009b      	lsls	r3, r3, #2
90005038:	440b      	add	r3, r1
9000503a:	331b      	adds	r3, #27
9000503c:	2200      	movs	r2, #0
9000503e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005040:	78fb      	ldrb	r3, [r7, #3]
90005042:	015a      	lsls	r2, r3, #5
90005044:	693b      	ldr	r3, [r7, #16]
90005046:	4413      	add	r3, r2
90005048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000504c:	685b      	ldr	r3, [r3, #4]
9000504e:	78fa      	ldrb	r2, [r7, #3]
90005050:	0151      	lsls	r1, r2, #5
90005052:	693a      	ldr	r2, [r7, #16]
90005054:	440a      	add	r2, r1
90005056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000505a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000505e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90005060:	78fb      	ldrb	r3, [r7, #3]
90005062:	015a      	lsls	r2, r3, #5
90005064:	693b      	ldr	r3, [r7, #16]
90005066:	4413      	add	r3, r2
90005068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000506c:	461a      	mov	r2, r3
9000506e:	2301      	movs	r3, #1
90005070:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90005072:	78fa      	ldrb	r2, [r7, #3]
90005074:	6879      	ldr	r1, [r7, #4]
90005076:	4613      	mov	r3, r2
90005078:	011b      	lsls	r3, r3, #4
9000507a:	1a9b      	subs	r3, r3, r2
9000507c:	009b      	lsls	r3, r3, #2
9000507e:	440b      	add	r3, r1
90005080:	334d      	adds	r3, #77	@ 0x4d
90005082:	2201      	movs	r2, #1
90005084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005086:	687b      	ldr	r3, [r7, #4]
90005088:	681b      	ldr	r3, [r3, #0]
9000508a:	78fa      	ldrb	r2, [r7, #3]
9000508c:	4611      	mov	r1, r2
9000508e:	4618      	mov	r0, r3
90005090:	f004 fe88 	bl	90009da4 <USB_HC_Halt>
90005094:	e365      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005096:	687b      	ldr	r3, [r7, #4]
90005098:	681b      	ldr	r3, [r3, #0]
9000509a:	78fa      	ldrb	r2, [r7, #3]
9000509c:	4611      	mov	r1, r2
9000509e:	4618      	mov	r0, r3
900050a0:	f004 fe03 	bl	90009caa <USB_ReadChInterrupts>
900050a4:	4603      	mov	r3, r0
900050a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900050aa:	2b40      	cmp	r3, #64	@ 0x40
900050ac:	d139      	bne.n	90005122 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
900050ae:	78fa      	ldrb	r2, [r7, #3]
900050b0:	6879      	ldr	r1, [r7, #4]
900050b2:	4613      	mov	r3, r2
900050b4:	011b      	lsls	r3, r3, #4
900050b6:	1a9b      	subs	r3, r3, r2
900050b8:	009b      	lsls	r3, r3, #2
900050ba:	440b      	add	r3, r1
900050bc:	334d      	adds	r3, #77	@ 0x4d
900050be:	2205      	movs	r2, #5
900050c0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900050c2:	78fa      	ldrb	r2, [r7, #3]
900050c4:	6879      	ldr	r1, [r7, #4]
900050c6:	4613      	mov	r3, r2
900050c8:	011b      	lsls	r3, r3, #4
900050ca:	1a9b      	subs	r3, r3, r2
900050cc:	009b      	lsls	r3, r3, #2
900050ce:	440b      	add	r3, r1
900050d0:	331a      	adds	r3, #26
900050d2:	781b      	ldrb	r3, [r3, #0]
900050d4:	2b00      	cmp	r3, #0
900050d6:	d109      	bne.n	900050ec <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
900050d8:	78fa      	ldrb	r2, [r7, #3]
900050da:	6879      	ldr	r1, [r7, #4]
900050dc:	4613      	mov	r3, r2
900050de:	011b      	lsls	r3, r3, #4
900050e0:	1a9b      	subs	r3, r3, r2
900050e2:	009b      	lsls	r3, r3, #2
900050e4:	440b      	add	r3, r1
900050e6:	3319      	adds	r3, #25
900050e8:	2201      	movs	r2, #1
900050ea:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
900050ec:	78fa      	ldrb	r2, [r7, #3]
900050ee:	6879      	ldr	r1, [r7, #4]
900050f0:	4613      	mov	r3, r2
900050f2:	011b      	lsls	r3, r3, #4
900050f4:	1a9b      	subs	r3, r3, r2
900050f6:	009b      	lsls	r3, r3, #2
900050f8:	440b      	add	r3, r1
900050fa:	3344      	adds	r3, #68	@ 0x44
900050fc:	2200      	movs	r2, #0
900050fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005100:	687b      	ldr	r3, [r7, #4]
90005102:	681b      	ldr	r3, [r3, #0]
90005104:	78fa      	ldrb	r2, [r7, #3]
90005106:	4611      	mov	r1, r2
90005108:	4618      	mov	r0, r3
9000510a:	f004 fe4b 	bl	90009da4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
9000510e:	78fb      	ldrb	r3, [r7, #3]
90005110:	015a      	lsls	r2, r3, #5
90005112:	693b      	ldr	r3, [r7, #16]
90005114:	4413      	add	r3, r2
90005116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000511a:	461a      	mov	r2, r3
9000511c:	2340      	movs	r3, #64	@ 0x40
9000511e:	6093      	str	r3, [r2, #8]
90005120:	e31f      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90005122:	687b      	ldr	r3, [r7, #4]
90005124:	681b      	ldr	r3, [r3, #0]
90005126:	78fa      	ldrb	r2, [r7, #3]
90005128:	4611      	mov	r1, r2
9000512a:	4618      	mov	r0, r3
9000512c:	f004 fdbd 	bl	90009caa <USB_ReadChInterrupts>
90005130:	4603      	mov	r3, r0
90005132:	f003 0308 	and.w	r3, r3, #8
90005136:	2b08      	cmp	r3, #8
90005138:	d11a      	bne.n	90005170 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000513a:	78fb      	ldrb	r3, [r7, #3]
9000513c:	015a      	lsls	r2, r3, #5
9000513e:	693b      	ldr	r3, [r7, #16]
90005140:	4413      	add	r3, r2
90005142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005146:	461a      	mov	r2, r3
90005148:	2308      	movs	r3, #8
9000514a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
9000514c:	78fa      	ldrb	r2, [r7, #3]
9000514e:	6879      	ldr	r1, [r7, #4]
90005150:	4613      	mov	r3, r2
90005152:	011b      	lsls	r3, r3, #4
90005154:	1a9b      	subs	r3, r3, r2
90005156:	009b      	lsls	r3, r3, #2
90005158:	440b      	add	r3, r1
9000515a:	334d      	adds	r3, #77	@ 0x4d
9000515c:	2206      	movs	r2, #6
9000515e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005160:	687b      	ldr	r3, [r7, #4]
90005162:	681b      	ldr	r3, [r3, #0]
90005164:	78fa      	ldrb	r2, [r7, #3]
90005166:	4611      	mov	r1, r2
90005168:	4618      	mov	r0, r3
9000516a:	f004 fe1b 	bl	90009da4 <USB_HC_Halt>
9000516e:	e2f8      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90005170:	687b      	ldr	r3, [r7, #4]
90005172:	681b      	ldr	r3, [r3, #0]
90005174:	78fa      	ldrb	r2, [r7, #3]
90005176:	4611      	mov	r1, r2
90005178:	4618      	mov	r0, r3
9000517a:	f004 fd96 	bl	90009caa <USB_ReadChInterrupts>
9000517e:	4603      	mov	r3, r0
90005180:	f003 0310 	and.w	r3, r3, #16
90005184:	2b10      	cmp	r3, #16
90005186:	d144      	bne.n	90005212 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005188:	78fa      	ldrb	r2, [r7, #3]
9000518a:	6879      	ldr	r1, [r7, #4]
9000518c:	4613      	mov	r3, r2
9000518e:	011b      	lsls	r3, r3, #4
90005190:	1a9b      	subs	r3, r3, r2
90005192:	009b      	lsls	r3, r3, #2
90005194:	440b      	add	r3, r1
90005196:	3344      	adds	r3, #68	@ 0x44
90005198:	2200      	movs	r2, #0
9000519a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
9000519c:	78fa      	ldrb	r2, [r7, #3]
9000519e:	6879      	ldr	r1, [r7, #4]
900051a0:	4613      	mov	r3, r2
900051a2:	011b      	lsls	r3, r3, #4
900051a4:	1a9b      	subs	r3, r3, r2
900051a6:	009b      	lsls	r3, r3, #2
900051a8:	440b      	add	r3, r1
900051aa:	334d      	adds	r3, #77	@ 0x4d
900051ac:	2204      	movs	r2, #4
900051ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
900051b0:	78fa      	ldrb	r2, [r7, #3]
900051b2:	6879      	ldr	r1, [r7, #4]
900051b4:	4613      	mov	r3, r2
900051b6:	011b      	lsls	r3, r3, #4
900051b8:	1a9b      	subs	r3, r3, r2
900051ba:	009b      	lsls	r3, r3, #2
900051bc:	440b      	add	r3, r1
900051be:	3319      	adds	r3, #25
900051c0:	781b      	ldrb	r3, [r3, #0]
900051c2:	2b00      	cmp	r3, #0
900051c4:	d114      	bne.n	900051f0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
900051c6:	78fa      	ldrb	r2, [r7, #3]
900051c8:	6879      	ldr	r1, [r7, #4]
900051ca:	4613      	mov	r3, r2
900051cc:	011b      	lsls	r3, r3, #4
900051ce:	1a9b      	subs	r3, r3, r2
900051d0:	009b      	lsls	r3, r3, #2
900051d2:	440b      	add	r3, r1
900051d4:	3318      	adds	r3, #24
900051d6:	781b      	ldrb	r3, [r3, #0]
900051d8:	2b00      	cmp	r3, #0
900051da:	d109      	bne.n	900051f0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
900051dc:	78fa      	ldrb	r2, [r7, #3]
900051de:	6879      	ldr	r1, [r7, #4]
900051e0:	4613      	mov	r3, r2
900051e2:	011b      	lsls	r3, r3, #4
900051e4:	1a9b      	subs	r3, r3, r2
900051e6:	009b      	lsls	r3, r3, #2
900051e8:	440b      	add	r3, r1
900051ea:	3319      	adds	r3, #25
900051ec:	2201      	movs	r2, #1
900051ee:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
900051f0:	687b      	ldr	r3, [r7, #4]
900051f2:	681b      	ldr	r3, [r3, #0]
900051f4:	78fa      	ldrb	r2, [r7, #3]
900051f6:	4611      	mov	r1, r2
900051f8:	4618      	mov	r0, r3
900051fa:	f004 fdd3 	bl	90009da4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900051fe:	78fb      	ldrb	r3, [r7, #3]
90005200:	015a      	lsls	r2, r3, #5
90005202:	693b      	ldr	r3, [r7, #16]
90005204:	4413      	add	r3, r2
90005206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000520a:	461a      	mov	r2, r3
9000520c:	2310      	movs	r3, #16
9000520e:	6093      	str	r3, [r2, #8]
90005210:	e2a7      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005212:	687b      	ldr	r3, [r7, #4]
90005214:	681b      	ldr	r3, [r3, #0]
90005216:	78fa      	ldrb	r2, [r7, #3]
90005218:	4611      	mov	r1, r2
9000521a:	4618      	mov	r0, r3
9000521c:	f004 fd45 	bl	90009caa <USB_ReadChInterrupts>
90005220:	4603      	mov	r3, r0
90005222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90005226:	2b80      	cmp	r3, #128	@ 0x80
90005228:	f040 8083 	bne.w	90005332 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
9000522c:	687b      	ldr	r3, [r7, #4]
9000522e:	799b      	ldrb	r3, [r3, #6]
90005230:	2b00      	cmp	r3, #0
90005232:	d111      	bne.n	90005258 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005234:	78fa      	ldrb	r2, [r7, #3]
90005236:	6879      	ldr	r1, [r7, #4]
90005238:	4613      	mov	r3, r2
9000523a:	011b      	lsls	r3, r3, #4
9000523c:	1a9b      	subs	r3, r3, r2
9000523e:	009b      	lsls	r3, r3, #2
90005240:	440b      	add	r3, r1
90005242:	334d      	adds	r3, #77	@ 0x4d
90005244:	2207      	movs	r2, #7
90005246:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005248:	687b      	ldr	r3, [r7, #4]
9000524a:	681b      	ldr	r3, [r3, #0]
9000524c:	78fa      	ldrb	r2, [r7, #3]
9000524e:	4611      	mov	r1, r2
90005250:	4618      	mov	r0, r3
90005252:	f004 fda7 	bl	90009da4 <USB_HC_Halt>
90005256:	e062      	b.n	9000531e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005258:	78fa      	ldrb	r2, [r7, #3]
9000525a:	6879      	ldr	r1, [r7, #4]
9000525c:	4613      	mov	r3, r2
9000525e:	011b      	lsls	r3, r3, #4
90005260:	1a9b      	subs	r3, r3, r2
90005262:	009b      	lsls	r3, r3, #2
90005264:	440b      	add	r3, r1
90005266:	3344      	adds	r3, #68	@ 0x44
90005268:	681b      	ldr	r3, [r3, #0]
9000526a:	1c59      	adds	r1, r3, #1
9000526c:	6878      	ldr	r0, [r7, #4]
9000526e:	4613      	mov	r3, r2
90005270:	011b      	lsls	r3, r3, #4
90005272:	1a9b      	subs	r3, r3, r2
90005274:	009b      	lsls	r3, r3, #2
90005276:	4403      	add	r3, r0
90005278:	3344      	adds	r3, #68	@ 0x44
9000527a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000527c:	78fa      	ldrb	r2, [r7, #3]
9000527e:	6879      	ldr	r1, [r7, #4]
90005280:	4613      	mov	r3, r2
90005282:	011b      	lsls	r3, r3, #4
90005284:	1a9b      	subs	r3, r3, r2
90005286:	009b      	lsls	r3, r3, #2
90005288:	440b      	add	r3, r1
9000528a:	3344      	adds	r3, #68	@ 0x44
9000528c:	681b      	ldr	r3, [r3, #0]
9000528e:	2b02      	cmp	r3, #2
90005290:	d922      	bls.n	900052d8 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005292:	78fa      	ldrb	r2, [r7, #3]
90005294:	6879      	ldr	r1, [r7, #4]
90005296:	4613      	mov	r3, r2
90005298:	011b      	lsls	r3, r3, #4
9000529a:	1a9b      	subs	r3, r3, r2
9000529c:	009b      	lsls	r3, r3, #2
9000529e:	440b      	add	r3, r1
900052a0:	3344      	adds	r3, #68	@ 0x44
900052a2:	2200      	movs	r2, #0
900052a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900052a6:	78fa      	ldrb	r2, [r7, #3]
900052a8:	6879      	ldr	r1, [r7, #4]
900052aa:	4613      	mov	r3, r2
900052ac:	011b      	lsls	r3, r3, #4
900052ae:	1a9b      	subs	r3, r3, r2
900052b0:	009b      	lsls	r3, r3, #2
900052b2:	440b      	add	r3, r1
900052b4:	334c      	adds	r3, #76	@ 0x4c
900052b6:	2204      	movs	r2, #4
900052b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900052ba:	78fa      	ldrb	r2, [r7, #3]
900052bc:	6879      	ldr	r1, [r7, #4]
900052be:	4613      	mov	r3, r2
900052c0:	011b      	lsls	r3, r3, #4
900052c2:	1a9b      	subs	r3, r3, r2
900052c4:	009b      	lsls	r3, r3, #2
900052c6:	440b      	add	r3, r1
900052c8:	334c      	adds	r3, #76	@ 0x4c
900052ca:	781a      	ldrb	r2, [r3, #0]
900052cc:	78fb      	ldrb	r3, [r7, #3]
900052ce:	4619      	mov	r1, r3
900052d0:	6878      	ldr	r0, [r7, #4]
900052d2:	f7fb faeb 	bl	900008ac <HAL_HCD_HC_NotifyURBChange_Callback>
900052d6:	e022      	b.n	9000531e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900052d8:	78fa      	ldrb	r2, [r7, #3]
900052da:	6879      	ldr	r1, [r7, #4]
900052dc:	4613      	mov	r3, r2
900052de:	011b      	lsls	r3, r3, #4
900052e0:	1a9b      	subs	r3, r3, r2
900052e2:	009b      	lsls	r3, r3, #2
900052e4:	440b      	add	r3, r1
900052e6:	334c      	adds	r3, #76	@ 0x4c
900052e8:	2202      	movs	r2, #2
900052ea:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
900052ec:	78fb      	ldrb	r3, [r7, #3]
900052ee:	015a      	lsls	r2, r3, #5
900052f0:	693b      	ldr	r3, [r7, #16]
900052f2:	4413      	add	r3, r2
900052f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900052f8:	681b      	ldr	r3, [r3, #0]
900052fa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900052fc:	68fb      	ldr	r3, [r7, #12]
900052fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005302:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005304:	68fb      	ldr	r3, [r7, #12]
90005306:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000530a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000530c:	78fb      	ldrb	r3, [r7, #3]
9000530e:	015a      	lsls	r2, r3, #5
90005310:	693b      	ldr	r3, [r7, #16]
90005312:	4413      	add	r3, r2
90005314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005318:	461a      	mov	r2, r3
9000531a:	68fb      	ldr	r3, [r7, #12]
9000531c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000531e:	78fb      	ldrb	r3, [r7, #3]
90005320:	015a      	lsls	r2, r3, #5
90005322:	693b      	ldr	r3, [r7, #16]
90005324:	4413      	add	r3, r2
90005326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000532a:	461a      	mov	r2, r3
9000532c:	2380      	movs	r3, #128	@ 0x80
9000532e:	6093      	str	r3, [r2, #8]
90005330:	e217      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90005332:	687b      	ldr	r3, [r7, #4]
90005334:	681b      	ldr	r3, [r3, #0]
90005336:	78fa      	ldrb	r2, [r7, #3]
90005338:	4611      	mov	r1, r2
9000533a:	4618      	mov	r0, r3
9000533c:	f004 fcb5 	bl	90009caa <USB_ReadChInterrupts>
90005340:	4603      	mov	r3, r0
90005342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90005346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000534a:	d11b      	bne.n	90005384 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000534c:	78fa      	ldrb	r2, [r7, #3]
9000534e:	6879      	ldr	r1, [r7, #4]
90005350:	4613      	mov	r3, r2
90005352:	011b      	lsls	r3, r3, #4
90005354:	1a9b      	subs	r3, r3, r2
90005356:	009b      	lsls	r3, r3, #2
90005358:	440b      	add	r3, r1
9000535a:	334d      	adds	r3, #77	@ 0x4d
9000535c:	2209      	movs	r2, #9
9000535e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005360:	687b      	ldr	r3, [r7, #4]
90005362:	681b      	ldr	r3, [r3, #0]
90005364:	78fa      	ldrb	r2, [r7, #3]
90005366:	4611      	mov	r1, r2
90005368:	4618      	mov	r0, r3
9000536a:	f004 fd1b 	bl	90009da4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
9000536e:	78fb      	ldrb	r3, [r7, #3]
90005370:	015a      	lsls	r2, r3, #5
90005372:	693b      	ldr	r3, [r7, #16]
90005374:	4413      	add	r3, r2
90005376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000537a:	461a      	mov	r2, r3
9000537c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005380:	6093      	str	r3, [r2, #8]
90005382:	e1ee      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90005384:	687b      	ldr	r3, [r7, #4]
90005386:	681b      	ldr	r3, [r3, #0]
90005388:	78fa      	ldrb	r2, [r7, #3]
9000538a:	4611      	mov	r1, r2
9000538c:	4618      	mov	r0, r3
9000538e:	f004 fc8c 	bl	90009caa <USB_ReadChInterrupts>
90005392:	4603      	mov	r3, r0
90005394:	f003 0302 	and.w	r3, r3, #2
90005398:	2b02      	cmp	r3, #2
9000539a:	f040 81df 	bne.w	9000575c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
9000539e:	78fb      	ldrb	r3, [r7, #3]
900053a0:	015a      	lsls	r2, r3, #5
900053a2:	693b      	ldr	r3, [r7, #16]
900053a4:	4413      	add	r3, r2
900053a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053aa:	461a      	mov	r2, r3
900053ac:	2302      	movs	r3, #2
900053ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900053b0:	78fa      	ldrb	r2, [r7, #3]
900053b2:	6879      	ldr	r1, [r7, #4]
900053b4:	4613      	mov	r3, r2
900053b6:	011b      	lsls	r3, r3, #4
900053b8:	1a9b      	subs	r3, r3, r2
900053ba:	009b      	lsls	r3, r3, #2
900053bc:	440b      	add	r3, r1
900053be:	334d      	adds	r3, #77	@ 0x4d
900053c0:	781b      	ldrb	r3, [r3, #0]
900053c2:	2b01      	cmp	r3, #1
900053c4:	f040 8093 	bne.w	900054ee <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900053c8:	78fa      	ldrb	r2, [r7, #3]
900053ca:	6879      	ldr	r1, [r7, #4]
900053cc:	4613      	mov	r3, r2
900053ce:	011b      	lsls	r3, r3, #4
900053d0:	1a9b      	subs	r3, r3, r2
900053d2:	009b      	lsls	r3, r3, #2
900053d4:	440b      	add	r3, r1
900053d6:	334d      	adds	r3, #77	@ 0x4d
900053d8:	2202      	movs	r2, #2
900053da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900053dc:	78fa      	ldrb	r2, [r7, #3]
900053de:	6879      	ldr	r1, [r7, #4]
900053e0:	4613      	mov	r3, r2
900053e2:	011b      	lsls	r3, r3, #4
900053e4:	1a9b      	subs	r3, r3, r2
900053e6:	009b      	lsls	r3, r3, #2
900053e8:	440b      	add	r3, r1
900053ea:	334c      	adds	r3, #76	@ 0x4c
900053ec:	2201      	movs	r2, #1
900053ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900053f0:	78fa      	ldrb	r2, [r7, #3]
900053f2:	6879      	ldr	r1, [r7, #4]
900053f4:	4613      	mov	r3, r2
900053f6:	011b      	lsls	r3, r3, #4
900053f8:	1a9b      	subs	r3, r3, r2
900053fa:	009b      	lsls	r3, r3, #2
900053fc:	440b      	add	r3, r1
900053fe:	3326      	adds	r3, #38	@ 0x26
90005400:	781b      	ldrb	r3, [r3, #0]
90005402:	2b02      	cmp	r3, #2
90005404:	d00b      	beq.n	9000541e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
90005406:	78fa      	ldrb	r2, [r7, #3]
90005408:	6879      	ldr	r1, [r7, #4]
9000540a:	4613      	mov	r3, r2
9000540c:	011b      	lsls	r3, r3, #4
9000540e:	1a9b      	subs	r3, r3, r2
90005410:	009b      	lsls	r3, r3, #2
90005412:	440b      	add	r3, r1
90005414:	3326      	adds	r3, #38	@ 0x26
90005416:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005418:	2b03      	cmp	r3, #3
9000541a:	f040 8190 	bne.w	9000573e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
9000541e:	687b      	ldr	r3, [r7, #4]
90005420:	799b      	ldrb	r3, [r3, #6]
90005422:	2b00      	cmp	r3, #0
90005424:	d115      	bne.n	90005452 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
90005426:	78fa      	ldrb	r2, [r7, #3]
90005428:	6879      	ldr	r1, [r7, #4]
9000542a:	4613      	mov	r3, r2
9000542c:	011b      	lsls	r3, r3, #4
9000542e:	1a9b      	subs	r3, r3, r2
90005430:	009b      	lsls	r3, r3, #2
90005432:	440b      	add	r3, r1
90005434:	333d      	adds	r3, #61	@ 0x3d
90005436:	781b      	ldrb	r3, [r3, #0]
90005438:	78fa      	ldrb	r2, [r7, #3]
9000543a:	f083 0301 	eor.w	r3, r3, #1
9000543e:	b2d8      	uxtb	r0, r3
90005440:	6879      	ldr	r1, [r7, #4]
90005442:	4613      	mov	r3, r2
90005444:	011b      	lsls	r3, r3, #4
90005446:	1a9b      	subs	r3, r3, r2
90005448:	009b      	lsls	r3, r3, #2
9000544a:	440b      	add	r3, r1
9000544c:	333d      	adds	r3, #61	@ 0x3d
9000544e:	4602      	mov	r2, r0
90005450:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
90005452:	687b      	ldr	r3, [r7, #4]
90005454:	799b      	ldrb	r3, [r3, #6]
90005456:	2b01      	cmp	r3, #1
90005458:	f040 8171 	bne.w	9000573e <HCD_HC_OUT_IRQHandler+0x954>
9000545c:	78fa      	ldrb	r2, [r7, #3]
9000545e:	6879      	ldr	r1, [r7, #4]
90005460:	4613      	mov	r3, r2
90005462:	011b      	lsls	r3, r3, #4
90005464:	1a9b      	subs	r3, r3, r2
90005466:	009b      	lsls	r3, r3, #2
90005468:	440b      	add	r3, r1
9000546a:	3334      	adds	r3, #52	@ 0x34
9000546c:	681b      	ldr	r3, [r3, #0]
9000546e:	2b00      	cmp	r3, #0
90005470:	f000 8165 	beq.w	9000573e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
90005474:	78fa      	ldrb	r2, [r7, #3]
90005476:	6879      	ldr	r1, [r7, #4]
90005478:	4613      	mov	r3, r2
9000547a:	011b      	lsls	r3, r3, #4
9000547c:	1a9b      	subs	r3, r3, r2
9000547e:	009b      	lsls	r3, r3, #2
90005480:	440b      	add	r3, r1
90005482:	3334      	adds	r3, #52	@ 0x34
90005484:	6819      	ldr	r1, [r3, #0]
90005486:	78fa      	ldrb	r2, [r7, #3]
90005488:	6878      	ldr	r0, [r7, #4]
9000548a:	4613      	mov	r3, r2
9000548c:	011b      	lsls	r3, r3, #4
9000548e:	1a9b      	subs	r3, r3, r2
90005490:	009b      	lsls	r3, r3, #2
90005492:	4403      	add	r3, r0
90005494:	3328      	adds	r3, #40	@ 0x28
90005496:	881b      	ldrh	r3, [r3, #0]
90005498:	440b      	add	r3, r1
9000549a:	1e59      	subs	r1, r3, #1
9000549c:	78fa      	ldrb	r2, [r7, #3]
9000549e:	6878      	ldr	r0, [r7, #4]
900054a0:	4613      	mov	r3, r2
900054a2:	011b      	lsls	r3, r3, #4
900054a4:	1a9b      	subs	r3, r3, r2
900054a6:	009b      	lsls	r3, r3, #2
900054a8:	4403      	add	r3, r0
900054aa:	3328      	adds	r3, #40	@ 0x28
900054ac:	881b      	ldrh	r3, [r3, #0]
900054ae:	fbb1 f3f3 	udiv	r3, r1, r3
900054b2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
900054b4:	68bb      	ldr	r3, [r7, #8]
900054b6:	f003 0301 	and.w	r3, r3, #1
900054ba:	2b00      	cmp	r3, #0
900054bc:	f000 813f 	beq.w	9000573e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
900054c0:	78fa      	ldrb	r2, [r7, #3]
900054c2:	6879      	ldr	r1, [r7, #4]
900054c4:	4613      	mov	r3, r2
900054c6:	011b      	lsls	r3, r3, #4
900054c8:	1a9b      	subs	r3, r3, r2
900054ca:	009b      	lsls	r3, r3, #2
900054cc:	440b      	add	r3, r1
900054ce:	333d      	adds	r3, #61	@ 0x3d
900054d0:	781b      	ldrb	r3, [r3, #0]
900054d2:	78fa      	ldrb	r2, [r7, #3]
900054d4:	f083 0301 	eor.w	r3, r3, #1
900054d8:	b2d8      	uxtb	r0, r3
900054da:	6879      	ldr	r1, [r7, #4]
900054dc:	4613      	mov	r3, r2
900054de:	011b      	lsls	r3, r3, #4
900054e0:	1a9b      	subs	r3, r3, r2
900054e2:	009b      	lsls	r3, r3, #2
900054e4:	440b      	add	r3, r1
900054e6:	333d      	adds	r3, #61	@ 0x3d
900054e8:	4602      	mov	r2, r0
900054ea:	701a      	strb	r2, [r3, #0]
900054ec:	e127      	b.n	9000573e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
900054ee:	78fa      	ldrb	r2, [r7, #3]
900054f0:	6879      	ldr	r1, [r7, #4]
900054f2:	4613      	mov	r3, r2
900054f4:	011b      	lsls	r3, r3, #4
900054f6:	1a9b      	subs	r3, r3, r2
900054f8:	009b      	lsls	r3, r3, #2
900054fa:	440b      	add	r3, r1
900054fc:	334d      	adds	r3, #77	@ 0x4d
900054fe:	781b      	ldrb	r3, [r3, #0]
90005500:	2b03      	cmp	r3, #3
90005502:	d120      	bne.n	90005546 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005504:	78fa      	ldrb	r2, [r7, #3]
90005506:	6879      	ldr	r1, [r7, #4]
90005508:	4613      	mov	r3, r2
9000550a:	011b      	lsls	r3, r3, #4
9000550c:	1a9b      	subs	r3, r3, r2
9000550e:	009b      	lsls	r3, r3, #2
90005510:	440b      	add	r3, r1
90005512:	334d      	adds	r3, #77	@ 0x4d
90005514:	2202      	movs	r2, #2
90005516:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005518:	78fa      	ldrb	r2, [r7, #3]
9000551a:	6879      	ldr	r1, [r7, #4]
9000551c:	4613      	mov	r3, r2
9000551e:	011b      	lsls	r3, r3, #4
90005520:	1a9b      	subs	r3, r3, r2
90005522:	009b      	lsls	r3, r3, #2
90005524:	440b      	add	r3, r1
90005526:	331b      	adds	r3, #27
90005528:	781b      	ldrb	r3, [r3, #0]
9000552a:	2b01      	cmp	r3, #1
9000552c:	f040 8107 	bne.w	9000573e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005530:	78fa      	ldrb	r2, [r7, #3]
90005532:	6879      	ldr	r1, [r7, #4]
90005534:	4613      	mov	r3, r2
90005536:	011b      	lsls	r3, r3, #4
90005538:	1a9b      	subs	r3, r3, r2
9000553a:	009b      	lsls	r3, r3, #2
9000553c:	440b      	add	r3, r1
9000553e:	334c      	adds	r3, #76	@ 0x4c
90005540:	2202      	movs	r2, #2
90005542:	701a      	strb	r2, [r3, #0]
90005544:	e0fb      	b.n	9000573e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005546:	78fa      	ldrb	r2, [r7, #3]
90005548:	6879      	ldr	r1, [r7, #4]
9000554a:	4613      	mov	r3, r2
9000554c:	011b      	lsls	r3, r3, #4
9000554e:	1a9b      	subs	r3, r3, r2
90005550:	009b      	lsls	r3, r3, #2
90005552:	440b      	add	r3, r1
90005554:	334d      	adds	r3, #77	@ 0x4d
90005556:	781b      	ldrb	r3, [r3, #0]
90005558:	2b04      	cmp	r3, #4
9000555a:	d13a      	bne.n	900055d2 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000555c:	78fa      	ldrb	r2, [r7, #3]
9000555e:	6879      	ldr	r1, [r7, #4]
90005560:	4613      	mov	r3, r2
90005562:	011b      	lsls	r3, r3, #4
90005564:	1a9b      	subs	r3, r3, r2
90005566:	009b      	lsls	r3, r3, #2
90005568:	440b      	add	r3, r1
9000556a:	334d      	adds	r3, #77	@ 0x4d
9000556c:	2202      	movs	r2, #2
9000556e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005570:	78fa      	ldrb	r2, [r7, #3]
90005572:	6879      	ldr	r1, [r7, #4]
90005574:	4613      	mov	r3, r2
90005576:	011b      	lsls	r3, r3, #4
90005578:	1a9b      	subs	r3, r3, r2
9000557a:	009b      	lsls	r3, r3, #2
9000557c:	440b      	add	r3, r1
9000557e:	334c      	adds	r3, #76	@ 0x4c
90005580:	2202      	movs	r2, #2
90005582:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005584:	78fa      	ldrb	r2, [r7, #3]
90005586:	6879      	ldr	r1, [r7, #4]
90005588:	4613      	mov	r3, r2
9000558a:	011b      	lsls	r3, r3, #4
9000558c:	1a9b      	subs	r3, r3, r2
9000558e:	009b      	lsls	r3, r3, #2
90005590:	440b      	add	r3, r1
90005592:	331b      	adds	r3, #27
90005594:	781b      	ldrb	r3, [r3, #0]
90005596:	2b01      	cmp	r3, #1
90005598:	f040 80d1 	bne.w	9000573e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
9000559c:	78fa      	ldrb	r2, [r7, #3]
9000559e:	6879      	ldr	r1, [r7, #4]
900055a0:	4613      	mov	r3, r2
900055a2:	011b      	lsls	r3, r3, #4
900055a4:	1a9b      	subs	r3, r3, r2
900055a6:	009b      	lsls	r3, r3, #2
900055a8:	440b      	add	r3, r1
900055aa:	331b      	adds	r3, #27
900055ac:	2200      	movs	r2, #0
900055ae:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900055b0:	78fb      	ldrb	r3, [r7, #3]
900055b2:	015a      	lsls	r2, r3, #5
900055b4:	693b      	ldr	r3, [r7, #16]
900055b6:	4413      	add	r3, r2
900055b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900055bc:	685b      	ldr	r3, [r3, #4]
900055be:	78fa      	ldrb	r2, [r7, #3]
900055c0:	0151      	lsls	r1, r2, #5
900055c2:	693a      	ldr	r2, [r7, #16]
900055c4:	440a      	add	r2, r1
900055c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900055ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900055ce:	6053      	str	r3, [r2, #4]
900055d0:	e0b5      	b.n	9000573e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900055d2:	78fa      	ldrb	r2, [r7, #3]
900055d4:	6879      	ldr	r1, [r7, #4]
900055d6:	4613      	mov	r3, r2
900055d8:	011b      	lsls	r3, r3, #4
900055da:	1a9b      	subs	r3, r3, r2
900055dc:	009b      	lsls	r3, r3, #2
900055de:	440b      	add	r3, r1
900055e0:	334d      	adds	r3, #77	@ 0x4d
900055e2:	781b      	ldrb	r3, [r3, #0]
900055e4:	2b05      	cmp	r3, #5
900055e6:	d114      	bne.n	90005612 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900055e8:	78fa      	ldrb	r2, [r7, #3]
900055ea:	6879      	ldr	r1, [r7, #4]
900055ec:	4613      	mov	r3, r2
900055ee:	011b      	lsls	r3, r3, #4
900055f0:	1a9b      	subs	r3, r3, r2
900055f2:	009b      	lsls	r3, r3, #2
900055f4:	440b      	add	r3, r1
900055f6:	334d      	adds	r3, #77	@ 0x4d
900055f8:	2202      	movs	r2, #2
900055fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
900055fc:	78fa      	ldrb	r2, [r7, #3]
900055fe:	6879      	ldr	r1, [r7, #4]
90005600:	4613      	mov	r3, r2
90005602:	011b      	lsls	r3, r3, #4
90005604:	1a9b      	subs	r3, r3, r2
90005606:	009b      	lsls	r3, r3, #2
90005608:	440b      	add	r3, r1
9000560a:	334c      	adds	r3, #76	@ 0x4c
9000560c:	2202      	movs	r2, #2
9000560e:	701a      	strb	r2, [r3, #0]
90005610:	e095      	b.n	9000573e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005612:	78fa      	ldrb	r2, [r7, #3]
90005614:	6879      	ldr	r1, [r7, #4]
90005616:	4613      	mov	r3, r2
90005618:	011b      	lsls	r3, r3, #4
9000561a:	1a9b      	subs	r3, r3, r2
9000561c:	009b      	lsls	r3, r3, #2
9000561e:	440b      	add	r3, r1
90005620:	334d      	adds	r3, #77	@ 0x4d
90005622:	781b      	ldrb	r3, [r3, #0]
90005624:	2b06      	cmp	r3, #6
90005626:	d114      	bne.n	90005652 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005628:	78fa      	ldrb	r2, [r7, #3]
9000562a:	6879      	ldr	r1, [r7, #4]
9000562c:	4613      	mov	r3, r2
9000562e:	011b      	lsls	r3, r3, #4
90005630:	1a9b      	subs	r3, r3, r2
90005632:	009b      	lsls	r3, r3, #2
90005634:	440b      	add	r3, r1
90005636:	334d      	adds	r3, #77	@ 0x4d
90005638:	2202      	movs	r2, #2
9000563a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
9000563c:	78fa      	ldrb	r2, [r7, #3]
9000563e:	6879      	ldr	r1, [r7, #4]
90005640:	4613      	mov	r3, r2
90005642:	011b      	lsls	r3, r3, #4
90005644:	1a9b      	subs	r3, r3, r2
90005646:	009b      	lsls	r3, r3, #2
90005648:	440b      	add	r3, r1
9000564a:	334c      	adds	r3, #76	@ 0x4c
9000564c:	2205      	movs	r2, #5
9000564e:	701a      	strb	r2, [r3, #0]
90005650:	e075      	b.n	9000573e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005652:	78fa      	ldrb	r2, [r7, #3]
90005654:	6879      	ldr	r1, [r7, #4]
90005656:	4613      	mov	r3, r2
90005658:	011b      	lsls	r3, r3, #4
9000565a:	1a9b      	subs	r3, r3, r2
9000565c:	009b      	lsls	r3, r3, #2
9000565e:	440b      	add	r3, r1
90005660:	334d      	adds	r3, #77	@ 0x4d
90005662:	781b      	ldrb	r3, [r3, #0]
90005664:	2b07      	cmp	r3, #7
90005666:	d00a      	beq.n	9000567e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005668:	78fa      	ldrb	r2, [r7, #3]
9000566a:	6879      	ldr	r1, [r7, #4]
9000566c:	4613      	mov	r3, r2
9000566e:	011b      	lsls	r3, r3, #4
90005670:	1a9b      	subs	r3, r3, r2
90005672:	009b      	lsls	r3, r3, #2
90005674:	440b      	add	r3, r1
90005676:	334d      	adds	r3, #77	@ 0x4d
90005678:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000567a:	2b09      	cmp	r3, #9
9000567c:	d170      	bne.n	90005760 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000567e:	78fa      	ldrb	r2, [r7, #3]
90005680:	6879      	ldr	r1, [r7, #4]
90005682:	4613      	mov	r3, r2
90005684:	011b      	lsls	r3, r3, #4
90005686:	1a9b      	subs	r3, r3, r2
90005688:	009b      	lsls	r3, r3, #2
9000568a:	440b      	add	r3, r1
9000568c:	334d      	adds	r3, #77	@ 0x4d
9000568e:	2202      	movs	r2, #2
90005690:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90005692:	78fa      	ldrb	r2, [r7, #3]
90005694:	6879      	ldr	r1, [r7, #4]
90005696:	4613      	mov	r3, r2
90005698:	011b      	lsls	r3, r3, #4
9000569a:	1a9b      	subs	r3, r3, r2
9000569c:	009b      	lsls	r3, r3, #2
9000569e:	440b      	add	r3, r1
900056a0:	3344      	adds	r3, #68	@ 0x44
900056a2:	681b      	ldr	r3, [r3, #0]
900056a4:	1c59      	adds	r1, r3, #1
900056a6:	6878      	ldr	r0, [r7, #4]
900056a8:	4613      	mov	r3, r2
900056aa:	011b      	lsls	r3, r3, #4
900056ac:	1a9b      	subs	r3, r3, r2
900056ae:	009b      	lsls	r3, r3, #2
900056b0:	4403      	add	r3, r0
900056b2:	3344      	adds	r3, #68	@ 0x44
900056b4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900056b6:	78fa      	ldrb	r2, [r7, #3]
900056b8:	6879      	ldr	r1, [r7, #4]
900056ba:	4613      	mov	r3, r2
900056bc:	011b      	lsls	r3, r3, #4
900056be:	1a9b      	subs	r3, r3, r2
900056c0:	009b      	lsls	r3, r3, #2
900056c2:	440b      	add	r3, r1
900056c4:	3344      	adds	r3, #68	@ 0x44
900056c6:	681b      	ldr	r3, [r3, #0]
900056c8:	2b02      	cmp	r3, #2
900056ca:	d914      	bls.n	900056f6 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900056cc:	78fa      	ldrb	r2, [r7, #3]
900056ce:	6879      	ldr	r1, [r7, #4]
900056d0:	4613      	mov	r3, r2
900056d2:	011b      	lsls	r3, r3, #4
900056d4:	1a9b      	subs	r3, r3, r2
900056d6:	009b      	lsls	r3, r3, #2
900056d8:	440b      	add	r3, r1
900056da:	3344      	adds	r3, #68	@ 0x44
900056dc:	2200      	movs	r2, #0
900056de:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900056e0:	78fa      	ldrb	r2, [r7, #3]
900056e2:	6879      	ldr	r1, [r7, #4]
900056e4:	4613      	mov	r3, r2
900056e6:	011b      	lsls	r3, r3, #4
900056e8:	1a9b      	subs	r3, r3, r2
900056ea:	009b      	lsls	r3, r3, #2
900056ec:	440b      	add	r3, r1
900056ee:	334c      	adds	r3, #76	@ 0x4c
900056f0:	2204      	movs	r2, #4
900056f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900056f4:	e022      	b.n	9000573c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900056f6:	78fa      	ldrb	r2, [r7, #3]
900056f8:	6879      	ldr	r1, [r7, #4]
900056fa:	4613      	mov	r3, r2
900056fc:	011b      	lsls	r3, r3, #4
900056fe:	1a9b      	subs	r3, r3, r2
90005700:	009b      	lsls	r3, r3, #2
90005702:	440b      	add	r3, r1
90005704:	334c      	adds	r3, #76	@ 0x4c
90005706:	2202      	movs	r2, #2
90005708:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000570a:	78fb      	ldrb	r3, [r7, #3]
9000570c:	015a      	lsls	r2, r3, #5
9000570e:	693b      	ldr	r3, [r7, #16]
90005710:	4413      	add	r3, r2
90005712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005716:	681b      	ldr	r3, [r3, #0]
90005718:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000571a:	68fb      	ldr	r3, [r7, #12]
9000571c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005720:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005722:	68fb      	ldr	r3, [r7, #12]
90005724:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005728:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000572a:	78fb      	ldrb	r3, [r7, #3]
9000572c:	015a      	lsls	r2, r3, #5
9000572e:	693b      	ldr	r3, [r7, #16]
90005730:	4413      	add	r3, r2
90005732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005736:	461a      	mov	r2, r3
90005738:	68fb      	ldr	r3, [r7, #12]
9000573a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000573c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000573e:	78fa      	ldrb	r2, [r7, #3]
90005740:	6879      	ldr	r1, [r7, #4]
90005742:	4613      	mov	r3, r2
90005744:	011b      	lsls	r3, r3, #4
90005746:	1a9b      	subs	r3, r3, r2
90005748:	009b      	lsls	r3, r3, #2
9000574a:	440b      	add	r3, r1
9000574c:	334c      	adds	r3, #76	@ 0x4c
9000574e:	781a      	ldrb	r2, [r3, #0]
90005750:	78fb      	ldrb	r3, [r7, #3]
90005752:	4619      	mov	r1, r3
90005754:	6878      	ldr	r0, [r7, #4]
90005756:	f7fb f8a9 	bl	900008ac <HAL_HCD_HC_NotifyURBChange_Callback>
9000575a:	e002      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
9000575c:	bf00      	nop
9000575e:	e000      	b.n	90005762 <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005760:	bf00      	nop
  }
}
90005762:	3718      	adds	r7, #24
90005764:	46bd      	mov	sp, r7
90005766:	bd80      	pop	{r7, pc}

90005768 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005768:	b580      	push	{r7, lr}
9000576a:	b08a      	sub	sp, #40	@ 0x28
9000576c:	af00      	add	r7, sp, #0
9000576e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005770:	687b      	ldr	r3, [r7, #4]
90005772:	681b      	ldr	r3, [r3, #0]
90005774:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
90005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005778:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
9000577a:	687b      	ldr	r3, [r7, #4]
9000577c:	681b      	ldr	r3, [r3, #0]
9000577e:	6a1b      	ldr	r3, [r3, #32]
90005780:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
90005782:	69fb      	ldr	r3, [r7, #28]
90005784:	f003 030f 	and.w	r3, r3, #15
90005788:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
9000578a:	69fb      	ldr	r3, [r7, #28]
9000578c:	0c5b      	lsrs	r3, r3, #17
9000578e:	f003 030f 	and.w	r3, r3, #15
90005792:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
90005794:	69fb      	ldr	r3, [r7, #28]
90005796:	091b      	lsrs	r3, r3, #4
90005798:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000579c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
9000579e:	697b      	ldr	r3, [r7, #20]
900057a0:	2b02      	cmp	r3, #2
900057a2:	d004      	beq.n	900057ae <HCD_RXQLVL_IRQHandler+0x46>
900057a4:	697b      	ldr	r3, [r7, #20]
900057a6:	2b05      	cmp	r3, #5
900057a8:	f000 80b6 	beq.w	90005918 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900057ac:	e0b7      	b.n	9000591e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900057ae:	693b      	ldr	r3, [r7, #16]
900057b0:	2b00      	cmp	r3, #0
900057b2:	f000 80b3 	beq.w	9000591c <HCD_RXQLVL_IRQHandler+0x1b4>
900057b6:	6879      	ldr	r1, [r7, #4]
900057b8:	69ba      	ldr	r2, [r7, #24]
900057ba:	4613      	mov	r3, r2
900057bc:	011b      	lsls	r3, r3, #4
900057be:	1a9b      	subs	r3, r3, r2
900057c0:	009b      	lsls	r3, r3, #2
900057c2:	440b      	add	r3, r1
900057c4:	332c      	adds	r3, #44	@ 0x2c
900057c6:	681b      	ldr	r3, [r3, #0]
900057c8:	2b00      	cmp	r3, #0
900057ca:	f000 80a7 	beq.w	9000591c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
900057ce:	6879      	ldr	r1, [r7, #4]
900057d0:	69ba      	ldr	r2, [r7, #24]
900057d2:	4613      	mov	r3, r2
900057d4:	011b      	lsls	r3, r3, #4
900057d6:	1a9b      	subs	r3, r3, r2
900057d8:	009b      	lsls	r3, r3, #2
900057da:	440b      	add	r3, r1
900057dc:	3338      	adds	r3, #56	@ 0x38
900057de:	681a      	ldr	r2, [r3, #0]
900057e0:	693b      	ldr	r3, [r7, #16]
900057e2:	18d1      	adds	r1, r2, r3
900057e4:	6878      	ldr	r0, [r7, #4]
900057e6:	69ba      	ldr	r2, [r7, #24]
900057e8:	4613      	mov	r3, r2
900057ea:	011b      	lsls	r3, r3, #4
900057ec:	1a9b      	subs	r3, r3, r2
900057ee:	009b      	lsls	r3, r3, #2
900057f0:	4403      	add	r3, r0
900057f2:	3334      	adds	r3, #52	@ 0x34
900057f4:	681b      	ldr	r3, [r3, #0]
900057f6:	4299      	cmp	r1, r3
900057f8:	f200 8083 	bhi.w	90005902 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
900057fc:	687b      	ldr	r3, [r7, #4]
900057fe:	6818      	ldr	r0, [r3, #0]
90005800:	6879      	ldr	r1, [r7, #4]
90005802:	69ba      	ldr	r2, [r7, #24]
90005804:	4613      	mov	r3, r2
90005806:	011b      	lsls	r3, r3, #4
90005808:	1a9b      	subs	r3, r3, r2
9000580a:	009b      	lsls	r3, r3, #2
9000580c:	440b      	add	r3, r1
9000580e:	332c      	adds	r3, #44	@ 0x2c
90005810:	681b      	ldr	r3, [r3, #0]
90005812:	693a      	ldr	r2, [r7, #16]
90005814:	b292      	uxth	r2, r2
90005816:	4619      	mov	r1, r3
90005818:	f004 f9dc 	bl	90009bd4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
9000581c:	6879      	ldr	r1, [r7, #4]
9000581e:	69ba      	ldr	r2, [r7, #24]
90005820:	4613      	mov	r3, r2
90005822:	011b      	lsls	r3, r3, #4
90005824:	1a9b      	subs	r3, r3, r2
90005826:	009b      	lsls	r3, r3, #2
90005828:	440b      	add	r3, r1
9000582a:	332c      	adds	r3, #44	@ 0x2c
9000582c:	681a      	ldr	r2, [r3, #0]
9000582e:	693b      	ldr	r3, [r7, #16]
90005830:	18d1      	adds	r1, r2, r3
90005832:	6878      	ldr	r0, [r7, #4]
90005834:	69ba      	ldr	r2, [r7, #24]
90005836:	4613      	mov	r3, r2
90005838:	011b      	lsls	r3, r3, #4
9000583a:	1a9b      	subs	r3, r3, r2
9000583c:	009b      	lsls	r3, r3, #2
9000583e:	4403      	add	r3, r0
90005840:	332c      	adds	r3, #44	@ 0x2c
90005842:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005844:	6879      	ldr	r1, [r7, #4]
90005846:	69ba      	ldr	r2, [r7, #24]
90005848:	4613      	mov	r3, r2
9000584a:	011b      	lsls	r3, r3, #4
9000584c:	1a9b      	subs	r3, r3, r2
9000584e:	009b      	lsls	r3, r3, #2
90005850:	440b      	add	r3, r1
90005852:	3338      	adds	r3, #56	@ 0x38
90005854:	681a      	ldr	r2, [r3, #0]
90005856:	693b      	ldr	r3, [r7, #16]
90005858:	18d1      	adds	r1, r2, r3
9000585a:	6878      	ldr	r0, [r7, #4]
9000585c:	69ba      	ldr	r2, [r7, #24]
9000585e:	4613      	mov	r3, r2
90005860:	011b      	lsls	r3, r3, #4
90005862:	1a9b      	subs	r3, r3, r2
90005864:	009b      	lsls	r3, r3, #2
90005866:	4403      	add	r3, r0
90005868:	3338      	adds	r3, #56	@ 0x38
9000586a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
9000586c:	69bb      	ldr	r3, [r7, #24]
9000586e:	015a      	lsls	r2, r3, #5
90005870:	6a3b      	ldr	r3, [r7, #32]
90005872:	4413      	add	r3, r2
90005874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005878:	691b      	ldr	r3, [r3, #16]
9000587a:	0cdb      	lsrs	r3, r3, #19
9000587c:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005880:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90005882:	6879      	ldr	r1, [r7, #4]
90005884:	69ba      	ldr	r2, [r7, #24]
90005886:	4613      	mov	r3, r2
90005888:	011b      	lsls	r3, r3, #4
9000588a:	1a9b      	subs	r3, r3, r2
9000588c:	009b      	lsls	r3, r3, #2
9000588e:	440b      	add	r3, r1
90005890:	3328      	adds	r3, #40	@ 0x28
90005892:	881b      	ldrh	r3, [r3, #0]
90005894:	461a      	mov	r2, r3
90005896:	693b      	ldr	r3, [r7, #16]
90005898:	4293      	cmp	r3, r2
9000589a:	d13f      	bne.n	9000591c <HCD_RXQLVL_IRQHandler+0x1b4>
9000589c:	68fb      	ldr	r3, [r7, #12]
9000589e:	2b00      	cmp	r3, #0
900058a0:	d03c      	beq.n	9000591c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
900058a2:	69bb      	ldr	r3, [r7, #24]
900058a4:	015a      	lsls	r2, r3, #5
900058a6:	6a3b      	ldr	r3, [r7, #32]
900058a8:	4413      	add	r3, r2
900058aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900058ae:	681b      	ldr	r3, [r3, #0]
900058b0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900058b2:	68bb      	ldr	r3, [r7, #8]
900058b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900058b8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
900058ba:	68bb      	ldr	r3, [r7, #8]
900058bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900058c0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
900058c2:	69bb      	ldr	r3, [r7, #24]
900058c4:	015a      	lsls	r2, r3, #5
900058c6:	6a3b      	ldr	r3, [r7, #32]
900058c8:	4413      	add	r3, r2
900058ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900058ce:	461a      	mov	r2, r3
900058d0:	68bb      	ldr	r3, [r7, #8]
900058d2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
900058d4:	6879      	ldr	r1, [r7, #4]
900058d6:	69ba      	ldr	r2, [r7, #24]
900058d8:	4613      	mov	r3, r2
900058da:	011b      	lsls	r3, r3, #4
900058dc:	1a9b      	subs	r3, r3, r2
900058de:	009b      	lsls	r3, r3, #2
900058e0:	440b      	add	r3, r1
900058e2:	333c      	adds	r3, #60	@ 0x3c
900058e4:	781b      	ldrb	r3, [r3, #0]
900058e6:	f083 0301 	eor.w	r3, r3, #1
900058ea:	b2d8      	uxtb	r0, r3
900058ec:	6879      	ldr	r1, [r7, #4]
900058ee:	69ba      	ldr	r2, [r7, #24]
900058f0:	4613      	mov	r3, r2
900058f2:	011b      	lsls	r3, r3, #4
900058f4:	1a9b      	subs	r3, r3, r2
900058f6:	009b      	lsls	r3, r3, #2
900058f8:	440b      	add	r3, r1
900058fa:	333c      	adds	r3, #60	@ 0x3c
900058fc:	4602      	mov	r2, r0
900058fe:	701a      	strb	r2, [r3, #0]
      break;
90005900:	e00c      	b.n	9000591c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005902:	6879      	ldr	r1, [r7, #4]
90005904:	69ba      	ldr	r2, [r7, #24]
90005906:	4613      	mov	r3, r2
90005908:	011b      	lsls	r3, r3, #4
9000590a:	1a9b      	subs	r3, r3, r2
9000590c:	009b      	lsls	r3, r3, #2
9000590e:	440b      	add	r3, r1
90005910:	334c      	adds	r3, #76	@ 0x4c
90005912:	2204      	movs	r2, #4
90005914:	701a      	strb	r2, [r3, #0]
      break;
90005916:	e001      	b.n	9000591c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90005918:	bf00      	nop
9000591a:	e000      	b.n	9000591e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
9000591c:	bf00      	nop
  }
}
9000591e:	bf00      	nop
90005920:	3728      	adds	r7, #40	@ 0x28
90005922:	46bd      	mov	sp, r7
90005924:	bd80      	pop	{r7, pc}

90005926 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005926:	b580      	push	{r7, lr}
90005928:	b086      	sub	sp, #24
9000592a:	af00      	add	r7, sp, #0
9000592c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000592e:	687b      	ldr	r3, [r7, #4]
90005930:	681b      	ldr	r3, [r3, #0]
90005932:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005934:	697b      	ldr	r3, [r7, #20]
90005936:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005938:	693b      	ldr	r3, [r7, #16]
9000593a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000593e:	681b      	ldr	r3, [r3, #0]
90005940:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005942:	693b      	ldr	r3, [r7, #16]
90005944:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005948:	681b      	ldr	r3, [r3, #0]
9000594a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
9000594c:	68bb      	ldr	r3, [r7, #8]
9000594e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005952:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005954:	68fb      	ldr	r3, [r7, #12]
90005956:	f003 0302 	and.w	r3, r3, #2
9000595a:	2b02      	cmp	r3, #2
9000595c:	d10b      	bne.n	90005976 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
9000595e:	68fb      	ldr	r3, [r7, #12]
90005960:	f003 0301 	and.w	r3, r3, #1
90005964:	2b01      	cmp	r3, #1
90005966:	d102      	bne.n	9000596e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005968:	6878      	ldr	r0, [r7, #4]
9000596a:	f7fa ff67 	bl	9000083c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
9000596e:	68bb      	ldr	r3, [r7, #8]
90005970:	f043 0302 	orr.w	r3, r3, #2
90005974:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005976:	68fb      	ldr	r3, [r7, #12]
90005978:	f003 0308 	and.w	r3, r3, #8
9000597c:	2b08      	cmp	r3, #8
9000597e:	d132      	bne.n	900059e6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005980:	68bb      	ldr	r3, [r7, #8]
90005982:	f043 0308 	orr.w	r3, r3, #8
90005986:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005988:	68fb      	ldr	r3, [r7, #12]
9000598a:	f003 0304 	and.w	r3, r3, #4
9000598e:	2b04      	cmp	r3, #4
90005990:	d126      	bne.n	900059e0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005992:	687b      	ldr	r3, [r7, #4]
90005994:	7a5b      	ldrb	r3, [r3, #9]
90005996:	2b02      	cmp	r3, #2
90005998:	d113      	bne.n	900059c2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
9000599a:	68fb      	ldr	r3, [r7, #12]
9000599c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
900059a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900059a4:	d106      	bne.n	900059b4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
900059a6:	687b      	ldr	r3, [r7, #4]
900059a8:	681b      	ldr	r3, [r3, #0]
900059aa:	2102      	movs	r1, #2
900059ac:	4618      	mov	r0, r3
900059ae:	f004 f9ab 	bl	90009d08 <USB_InitFSLSPClkSel>
900059b2:	e011      	b.n	900059d8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900059b4:	687b      	ldr	r3, [r7, #4]
900059b6:	681b      	ldr	r3, [r3, #0]
900059b8:	2101      	movs	r1, #1
900059ba:	4618      	mov	r0, r3
900059bc:	f004 f9a4 	bl	90009d08 <USB_InitFSLSPClkSel>
900059c0:	e00a      	b.n	900059d8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900059c2:	687b      	ldr	r3, [r7, #4]
900059c4:	79db      	ldrb	r3, [r3, #7]
900059c6:	2b01      	cmp	r3, #1
900059c8:	d106      	bne.n	900059d8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
900059ca:	693b      	ldr	r3, [r7, #16]
900059cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
900059d0:	461a      	mov	r2, r3
900059d2:	f64e 2360 	movw	r3, #60000	@ 0xea60
900059d6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
900059d8:	6878      	ldr	r0, [r7, #4]
900059da:	f7fa ff4b 	bl	90000874 <HAL_HCD_PortEnabled_Callback>
900059de:	e002      	b.n	900059e6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
900059e0:	6878      	ldr	r0, [r7, #4]
900059e2:	f7fa ff55 	bl	90000890 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
900059e6:	68fb      	ldr	r3, [r7, #12]
900059e8:	f003 0320 	and.w	r3, r3, #32
900059ec:	2b20      	cmp	r3, #32
900059ee:	d103      	bne.n	900059f8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
900059f0:	68bb      	ldr	r3, [r7, #8]
900059f2:	f043 0320 	orr.w	r3, r3, #32
900059f6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
900059f8:	693b      	ldr	r3, [r7, #16]
900059fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900059fe:	461a      	mov	r2, r3
90005a00:	68bb      	ldr	r3, [r7, #8]
90005a02:	6013      	str	r3, [r2, #0]
}
90005a04:	bf00      	nop
90005a06:	3718      	adds	r7, #24
90005a08:	46bd      	mov	sp, r7
90005a0a:	bd80      	pop	{r7, pc}

90005a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005a0c:	b580      	push	{r7, lr}
90005a0e:	b082      	sub	sp, #8
90005a10:	af00      	add	r7, sp, #0
90005a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005a14:	687b      	ldr	r3, [r7, #4]
90005a16:	2b00      	cmp	r3, #0
90005a18:	d101      	bne.n	90005a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005a1a:	2301      	movs	r3, #1
90005a1c:	e08b      	b.n	90005b36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005a1e:	687b      	ldr	r3, [r7, #4]
90005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005a24:	b2db      	uxtb	r3, r3
90005a26:	2b00      	cmp	r3, #0
90005a28:	d106      	bne.n	90005a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005a2a:	687b      	ldr	r3, [r7, #4]
90005a2c:	2200      	movs	r2, #0
90005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005a32:	6878      	ldr	r0, [r7, #4]
90005a34:	f000 f8b5 	bl	90005ba2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005a38:	687b      	ldr	r3, [r7, #4]
90005a3a:	2224      	movs	r2, #36	@ 0x24
90005a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005a40:	687b      	ldr	r3, [r7, #4]
90005a42:	681b      	ldr	r3, [r3, #0]
90005a44:	681a      	ldr	r2, [r3, #0]
90005a46:	687b      	ldr	r3, [r7, #4]
90005a48:	681b      	ldr	r3, [r3, #0]
90005a4a:	f022 0201 	bic.w	r2, r2, #1
90005a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005a50:	687b      	ldr	r3, [r7, #4]
90005a52:	685a      	ldr	r2, [r3, #4]
90005a54:	687b      	ldr	r3, [r7, #4]
90005a56:	681b      	ldr	r3, [r3, #0]
90005a58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005a5e:	687b      	ldr	r3, [r7, #4]
90005a60:	681b      	ldr	r3, [r3, #0]
90005a62:	689a      	ldr	r2, [r3, #8]
90005a64:	687b      	ldr	r3, [r7, #4]
90005a66:	681b      	ldr	r3, [r3, #0]
90005a68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005a6e:	687b      	ldr	r3, [r7, #4]
90005a70:	68db      	ldr	r3, [r3, #12]
90005a72:	2b01      	cmp	r3, #1
90005a74:	d107      	bne.n	90005a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005a76:	687b      	ldr	r3, [r7, #4]
90005a78:	689a      	ldr	r2, [r3, #8]
90005a7a:	687b      	ldr	r3, [r7, #4]
90005a7c:	681b      	ldr	r3, [r3, #0]
90005a7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005a82:	609a      	str	r2, [r3, #8]
90005a84:	e006      	b.n	90005a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005a86:	687b      	ldr	r3, [r7, #4]
90005a88:	689a      	ldr	r2, [r3, #8]
90005a8a:	687b      	ldr	r3, [r7, #4]
90005a8c:	681b      	ldr	r3, [r3, #0]
90005a8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005a94:	687b      	ldr	r3, [r7, #4]
90005a96:	68db      	ldr	r3, [r3, #12]
90005a98:	2b02      	cmp	r3, #2
90005a9a:	d108      	bne.n	90005aae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005a9c:	687b      	ldr	r3, [r7, #4]
90005a9e:	681b      	ldr	r3, [r3, #0]
90005aa0:	685a      	ldr	r2, [r3, #4]
90005aa2:	687b      	ldr	r3, [r7, #4]
90005aa4:	681b      	ldr	r3, [r3, #0]
90005aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005aaa:	605a      	str	r2, [r3, #4]
90005aac:	e007      	b.n	90005abe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005aae:	687b      	ldr	r3, [r7, #4]
90005ab0:	681b      	ldr	r3, [r3, #0]
90005ab2:	685a      	ldr	r2, [r3, #4]
90005ab4:	687b      	ldr	r3, [r7, #4]
90005ab6:	681b      	ldr	r3, [r3, #0]
90005ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005abe:	687b      	ldr	r3, [r7, #4]
90005ac0:	681b      	ldr	r3, [r3, #0]
90005ac2:	6859      	ldr	r1, [r3, #4]
90005ac4:	687b      	ldr	r3, [r7, #4]
90005ac6:	681a      	ldr	r2, [r3, #0]
90005ac8:	4b1d      	ldr	r3, [pc, #116]	@ (90005b40 <HAL_I2C_Init+0x134>)
90005aca:	430b      	orrs	r3, r1
90005acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005ace:	687b      	ldr	r3, [r7, #4]
90005ad0:	681b      	ldr	r3, [r3, #0]
90005ad2:	68da      	ldr	r2, [r3, #12]
90005ad4:	687b      	ldr	r3, [r7, #4]
90005ad6:	681b      	ldr	r3, [r3, #0]
90005ad8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005ade:	687b      	ldr	r3, [r7, #4]
90005ae0:	691a      	ldr	r2, [r3, #16]
90005ae2:	687b      	ldr	r3, [r7, #4]
90005ae4:	695b      	ldr	r3, [r3, #20]
90005ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005aea:	687b      	ldr	r3, [r7, #4]
90005aec:	699b      	ldr	r3, [r3, #24]
90005aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005af0:	687b      	ldr	r3, [r7, #4]
90005af2:	681b      	ldr	r3, [r3, #0]
90005af4:	430a      	orrs	r2, r1
90005af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005af8:	687b      	ldr	r3, [r7, #4]
90005afa:	69d9      	ldr	r1, [r3, #28]
90005afc:	687b      	ldr	r3, [r7, #4]
90005afe:	6a1a      	ldr	r2, [r3, #32]
90005b00:	687b      	ldr	r3, [r7, #4]
90005b02:	681b      	ldr	r3, [r3, #0]
90005b04:	430a      	orrs	r2, r1
90005b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005b08:	687b      	ldr	r3, [r7, #4]
90005b0a:	681b      	ldr	r3, [r3, #0]
90005b0c:	681a      	ldr	r2, [r3, #0]
90005b0e:	687b      	ldr	r3, [r7, #4]
90005b10:	681b      	ldr	r3, [r3, #0]
90005b12:	f042 0201 	orr.w	r2, r2, #1
90005b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005b18:	687b      	ldr	r3, [r7, #4]
90005b1a:	2200      	movs	r2, #0
90005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005b1e:	687b      	ldr	r3, [r7, #4]
90005b20:	2220      	movs	r2, #32
90005b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005b26:	687b      	ldr	r3, [r7, #4]
90005b28:	2200      	movs	r2, #0
90005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005b2c:	687b      	ldr	r3, [r7, #4]
90005b2e:	2200      	movs	r2, #0
90005b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005b34:	2300      	movs	r3, #0
}
90005b36:	4618      	mov	r0, r3
90005b38:	3708      	adds	r7, #8
90005b3a:	46bd      	mov	sp, r7
90005b3c:	bd80      	pop	{r7, pc}
90005b3e:	bf00      	nop
90005b40:	02008000 	.word	0x02008000

90005b44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
90005b44:	b580      	push	{r7, lr}
90005b46:	b082      	sub	sp, #8
90005b48:	af00      	add	r7, sp, #0
90005b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005b4c:	687b      	ldr	r3, [r7, #4]
90005b4e:	2b00      	cmp	r3, #0
90005b50:	d101      	bne.n	90005b56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
90005b52:	2301      	movs	r3, #1
90005b54:	e021      	b.n	90005b9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
90005b56:	687b      	ldr	r3, [r7, #4]
90005b58:	2224      	movs	r2, #36	@ 0x24
90005b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
90005b5e:	687b      	ldr	r3, [r7, #4]
90005b60:	681b      	ldr	r3, [r3, #0]
90005b62:	681a      	ldr	r2, [r3, #0]
90005b64:	687b      	ldr	r3, [r7, #4]
90005b66:	681b      	ldr	r3, [r3, #0]
90005b68:	f022 0201 	bic.w	r2, r2, #1
90005b6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
90005b6e:	6878      	ldr	r0, [r7, #4]
90005b70:	f000 f821 	bl	90005bb6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005b74:	687b      	ldr	r3, [r7, #4]
90005b76:	2200      	movs	r2, #0
90005b78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
90005b7a:	687b      	ldr	r3, [r7, #4]
90005b7c:	2200      	movs	r2, #0
90005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005b82:	687b      	ldr	r3, [r7, #4]
90005b84:	2200      	movs	r2, #0
90005b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005b88:	687b      	ldr	r3, [r7, #4]
90005b8a:	2200      	movs	r2, #0
90005b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
90005b90:	687b      	ldr	r3, [r7, #4]
90005b92:	2200      	movs	r2, #0
90005b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
90005b98:	2300      	movs	r3, #0
}
90005b9a:	4618      	mov	r0, r3
90005b9c:	3708      	adds	r7, #8
90005b9e:	46bd      	mov	sp, r7
90005ba0:	bd80      	pop	{r7, pc}

90005ba2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005ba2:	b480      	push	{r7}
90005ba4:	b083      	sub	sp, #12
90005ba6:	af00      	add	r7, sp, #0
90005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005baa:	bf00      	nop
90005bac:	370c      	adds	r7, #12
90005bae:	46bd      	mov	sp, r7
90005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
90005bb4:	4770      	bx	lr

90005bb6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
90005bb6:	b480      	push	{r7}
90005bb8:	b083      	sub	sp, #12
90005bba:	af00      	add	r7, sp, #0
90005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
90005bbe:	bf00      	nop
90005bc0:	370c      	adds	r7, #12
90005bc2:	46bd      	mov	sp, r7
90005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
90005bc8:	4770      	bx	lr
	...

90005bcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005bcc:	b580      	push	{r7, lr}
90005bce:	b088      	sub	sp, #32
90005bd0:	af02      	add	r7, sp, #8
90005bd2:	60f8      	str	r0, [r7, #12]
90005bd4:	4608      	mov	r0, r1
90005bd6:	4611      	mov	r1, r2
90005bd8:	461a      	mov	r2, r3
90005bda:	4603      	mov	r3, r0
90005bdc:	817b      	strh	r3, [r7, #10]
90005bde:	460b      	mov	r3, r1
90005be0:	813b      	strh	r3, [r7, #8]
90005be2:	4613      	mov	r3, r2
90005be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005be6:	68fb      	ldr	r3, [r7, #12]
90005be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005bec:	b2db      	uxtb	r3, r3
90005bee:	2b20      	cmp	r3, #32
90005bf0:	f040 80f9 	bne.w	90005de6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
90005bf4:	6a3b      	ldr	r3, [r7, #32]
90005bf6:	2b00      	cmp	r3, #0
90005bf8:	d002      	beq.n	90005c00 <HAL_I2C_Mem_Write+0x34>
90005bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005bfc:	2b00      	cmp	r3, #0
90005bfe:	d105      	bne.n	90005c0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005c00:	68fb      	ldr	r3, [r7, #12]
90005c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005c06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005c08:	2301      	movs	r3, #1
90005c0a:	e0ed      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005c0c:	68fb      	ldr	r3, [r7, #12]
90005c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005c12:	2b01      	cmp	r3, #1
90005c14:	d101      	bne.n	90005c1a <HAL_I2C_Mem_Write+0x4e>
90005c16:	2302      	movs	r3, #2
90005c18:	e0e6      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
90005c1a:	68fb      	ldr	r3, [r7, #12]
90005c1c:	2201      	movs	r2, #1
90005c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005c22:	f7fd f9f3 	bl	9000300c <HAL_GetTick>
90005c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005c28:	697b      	ldr	r3, [r7, #20]
90005c2a:	9300      	str	r3, [sp, #0]
90005c2c:	2319      	movs	r3, #25
90005c2e:	2201      	movs	r2, #1
90005c30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005c34:	68f8      	ldr	r0, [r7, #12]
90005c36:	f000 fadd 	bl	900061f4 <I2C_WaitOnFlagUntilTimeout>
90005c3a:	4603      	mov	r3, r0
90005c3c:	2b00      	cmp	r3, #0
90005c3e:	d001      	beq.n	90005c44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
90005c40:	2301      	movs	r3, #1
90005c42:	e0d1      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90005c44:	68fb      	ldr	r3, [r7, #12]
90005c46:	2221      	movs	r2, #33	@ 0x21
90005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005c4c:	68fb      	ldr	r3, [r7, #12]
90005c4e:	2240      	movs	r2, #64	@ 0x40
90005c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005c54:	68fb      	ldr	r3, [r7, #12]
90005c56:	2200      	movs	r2, #0
90005c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005c5a:	68fb      	ldr	r3, [r7, #12]
90005c5c:	6a3a      	ldr	r2, [r7, #32]
90005c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005c60:	68fb      	ldr	r3, [r7, #12]
90005c62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005c66:	68fb      	ldr	r3, [r7, #12]
90005c68:	2200      	movs	r2, #0
90005c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005c6c:	88f8      	ldrh	r0, [r7, #6]
90005c6e:	893a      	ldrh	r2, [r7, #8]
90005c70:	8979      	ldrh	r1, [r7, #10]
90005c72:	697b      	ldr	r3, [r7, #20]
90005c74:	9301      	str	r3, [sp, #4]
90005c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005c78:	9300      	str	r3, [sp, #0]
90005c7a:	4603      	mov	r3, r0
90005c7c:	68f8      	ldr	r0, [r7, #12]
90005c7e:	f000 f9ed 	bl	9000605c <I2C_RequestMemoryWrite>
90005c82:	4603      	mov	r3, r0
90005c84:	2b00      	cmp	r3, #0
90005c86:	d005      	beq.n	90005c94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005c88:	68fb      	ldr	r3, [r7, #12]
90005c8a:	2200      	movs	r2, #0
90005c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005c90:	2301      	movs	r3, #1
90005c92:	e0a9      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005c94:	68fb      	ldr	r3, [r7, #12]
90005c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005c98:	b29b      	uxth	r3, r3
90005c9a:	2bff      	cmp	r3, #255	@ 0xff
90005c9c:	d90e      	bls.n	90005cbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005c9e:	68fb      	ldr	r3, [r7, #12]
90005ca0:	22ff      	movs	r2, #255	@ 0xff
90005ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90005ca4:	68fb      	ldr	r3, [r7, #12]
90005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005ca8:	b2da      	uxtb	r2, r3
90005caa:	8979      	ldrh	r1, [r7, #10]
90005cac:	2300      	movs	r3, #0
90005cae:	9300      	str	r3, [sp, #0]
90005cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005cb4:	68f8      	ldr	r0, [r7, #12]
90005cb6:	f000 fc61 	bl	9000657c <I2C_TransferConfig>
90005cba:	e00f      	b.n	90005cdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005cbc:	68fb      	ldr	r3, [r7, #12]
90005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005cc0:	b29a      	uxth	r2, r3
90005cc2:	68fb      	ldr	r3, [r7, #12]
90005cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90005cc6:	68fb      	ldr	r3, [r7, #12]
90005cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005cca:	b2da      	uxtb	r2, r3
90005ccc:	8979      	ldrh	r1, [r7, #10]
90005cce:	2300      	movs	r3, #0
90005cd0:	9300      	str	r3, [sp, #0]
90005cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005cd6:	68f8      	ldr	r0, [r7, #12]
90005cd8:	f000 fc50 	bl	9000657c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005cdc:	697a      	ldr	r2, [r7, #20]
90005cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005ce0:	68f8      	ldr	r0, [r7, #12]
90005ce2:	f000 fae0 	bl	900062a6 <I2C_WaitOnTXISFlagUntilTimeout>
90005ce6:	4603      	mov	r3, r0
90005ce8:	2b00      	cmp	r3, #0
90005cea:	d001      	beq.n	90005cf0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
90005cec:	2301      	movs	r3, #1
90005cee:	e07b      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90005cf0:	68fb      	ldr	r3, [r7, #12]
90005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005cf4:	781a      	ldrb	r2, [r3, #0]
90005cf6:	68fb      	ldr	r3, [r7, #12]
90005cf8:	681b      	ldr	r3, [r3, #0]
90005cfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005cfc:	68fb      	ldr	r3, [r7, #12]
90005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005d00:	1c5a      	adds	r2, r3, #1
90005d02:	68fb      	ldr	r3, [r7, #12]
90005d04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
90005d06:	68fb      	ldr	r3, [r7, #12]
90005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d0a:	b29b      	uxth	r3, r3
90005d0c:	3b01      	subs	r3, #1
90005d0e:	b29a      	uxth	r2, r3
90005d10:	68fb      	ldr	r3, [r7, #12]
90005d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
90005d14:	68fb      	ldr	r3, [r7, #12]
90005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d18:	3b01      	subs	r3, #1
90005d1a:	b29a      	uxth	r2, r3
90005d1c:	68fb      	ldr	r3, [r7, #12]
90005d1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005d20:	68fb      	ldr	r3, [r7, #12]
90005d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d24:	b29b      	uxth	r3, r3
90005d26:	2b00      	cmp	r3, #0
90005d28:	d034      	beq.n	90005d94 <HAL_I2C_Mem_Write+0x1c8>
90005d2a:	68fb      	ldr	r3, [r7, #12]
90005d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d2e:	2b00      	cmp	r3, #0
90005d30:	d130      	bne.n	90005d94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005d32:	697b      	ldr	r3, [r7, #20]
90005d34:	9300      	str	r3, [sp, #0]
90005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d38:	2200      	movs	r2, #0
90005d3a:	2180      	movs	r1, #128	@ 0x80
90005d3c:	68f8      	ldr	r0, [r7, #12]
90005d3e:	f000 fa59 	bl	900061f4 <I2C_WaitOnFlagUntilTimeout>
90005d42:	4603      	mov	r3, r0
90005d44:	2b00      	cmp	r3, #0
90005d46:	d001      	beq.n	90005d4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
90005d48:	2301      	movs	r3, #1
90005d4a:	e04d      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005d4c:	68fb      	ldr	r3, [r7, #12]
90005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d50:	b29b      	uxth	r3, r3
90005d52:	2bff      	cmp	r3, #255	@ 0xff
90005d54:	d90e      	bls.n	90005d74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005d56:	68fb      	ldr	r3, [r7, #12]
90005d58:	22ff      	movs	r2, #255	@ 0xff
90005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005d5c:	68fb      	ldr	r3, [r7, #12]
90005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d60:	b2da      	uxtb	r2, r3
90005d62:	8979      	ldrh	r1, [r7, #10]
90005d64:	2300      	movs	r3, #0
90005d66:	9300      	str	r3, [sp, #0]
90005d68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005d6c:	68f8      	ldr	r0, [r7, #12]
90005d6e:	f000 fc05 	bl	9000657c <I2C_TransferConfig>
90005d72:	e00f      	b.n	90005d94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005d74:	68fb      	ldr	r3, [r7, #12]
90005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d78:	b29a      	uxth	r2, r3
90005d7a:	68fb      	ldr	r3, [r7, #12]
90005d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005d7e:	68fb      	ldr	r3, [r7, #12]
90005d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d82:	b2da      	uxtb	r2, r3
90005d84:	8979      	ldrh	r1, [r7, #10]
90005d86:	2300      	movs	r3, #0
90005d88:	9300      	str	r3, [sp, #0]
90005d8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005d8e:	68f8      	ldr	r0, [r7, #12]
90005d90:	f000 fbf4 	bl	9000657c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
90005d94:	68fb      	ldr	r3, [r7, #12]
90005d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d98:	b29b      	uxth	r3, r3
90005d9a:	2b00      	cmp	r3, #0
90005d9c:	d19e      	bne.n	90005cdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005d9e:	697a      	ldr	r2, [r7, #20]
90005da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005da2:	68f8      	ldr	r0, [r7, #12]
90005da4:	f000 fac6 	bl	90006334 <I2C_WaitOnSTOPFlagUntilTimeout>
90005da8:	4603      	mov	r3, r0
90005daa:	2b00      	cmp	r3, #0
90005dac:	d001      	beq.n	90005db2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
90005dae:	2301      	movs	r3, #1
90005db0:	e01a      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005db2:	68fb      	ldr	r3, [r7, #12]
90005db4:	681b      	ldr	r3, [r3, #0]
90005db6:	2220      	movs	r2, #32
90005db8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005dba:	68fb      	ldr	r3, [r7, #12]
90005dbc:	681b      	ldr	r3, [r3, #0]
90005dbe:	6859      	ldr	r1, [r3, #4]
90005dc0:	68fb      	ldr	r3, [r7, #12]
90005dc2:	681a      	ldr	r2, [r3, #0]
90005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (90005df0 <HAL_I2C_Mem_Write+0x224>)
90005dc6:	400b      	ands	r3, r1
90005dc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005dca:	68fb      	ldr	r3, [r7, #12]
90005dcc:	2220      	movs	r2, #32
90005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005dd2:	68fb      	ldr	r3, [r7, #12]
90005dd4:	2200      	movs	r2, #0
90005dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005dda:	68fb      	ldr	r3, [r7, #12]
90005ddc:	2200      	movs	r2, #0
90005dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005de2:	2300      	movs	r3, #0
90005de4:	e000      	b.n	90005de8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
90005de6:	2302      	movs	r3, #2
  }
}
90005de8:	4618      	mov	r0, r3
90005dea:	3718      	adds	r7, #24
90005dec:	46bd      	mov	sp, r7
90005dee:	bd80      	pop	{r7, pc}
90005df0:	fe00e800 	.word	0xfe00e800

90005df4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005df4:	b580      	push	{r7, lr}
90005df6:	b088      	sub	sp, #32
90005df8:	af02      	add	r7, sp, #8
90005dfa:	60f8      	str	r0, [r7, #12]
90005dfc:	4608      	mov	r0, r1
90005dfe:	4611      	mov	r1, r2
90005e00:	461a      	mov	r2, r3
90005e02:	4603      	mov	r3, r0
90005e04:	817b      	strh	r3, [r7, #10]
90005e06:	460b      	mov	r3, r1
90005e08:	813b      	strh	r3, [r7, #8]
90005e0a:	4613      	mov	r3, r2
90005e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005e0e:	68fb      	ldr	r3, [r7, #12]
90005e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005e14:	b2db      	uxtb	r3, r3
90005e16:	2b20      	cmp	r3, #32
90005e18:	f040 80fd 	bne.w	90006016 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005e1c:	6a3b      	ldr	r3, [r7, #32]
90005e1e:	2b00      	cmp	r3, #0
90005e20:	d002      	beq.n	90005e28 <HAL_I2C_Mem_Read+0x34>
90005e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005e24:	2b00      	cmp	r3, #0
90005e26:	d105      	bne.n	90005e34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005e28:	68fb      	ldr	r3, [r7, #12]
90005e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005e2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005e30:	2301      	movs	r3, #1
90005e32:	e0f1      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005e34:	68fb      	ldr	r3, [r7, #12]
90005e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005e3a:	2b01      	cmp	r3, #1
90005e3c:	d101      	bne.n	90005e42 <HAL_I2C_Mem_Read+0x4e>
90005e3e:	2302      	movs	r3, #2
90005e40:	e0ea      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
90005e42:	68fb      	ldr	r3, [r7, #12]
90005e44:	2201      	movs	r2, #1
90005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005e4a:	f7fd f8df 	bl	9000300c <HAL_GetTick>
90005e4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005e50:	697b      	ldr	r3, [r7, #20]
90005e52:	9300      	str	r3, [sp, #0]
90005e54:	2319      	movs	r3, #25
90005e56:	2201      	movs	r2, #1
90005e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005e5c:	68f8      	ldr	r0, [r7, #12]
90005e5e:	f000 f9c9 	bl	900061f4 <I2C_WaitOnFlagUntilTimeout>
90005e62:	4603      	mov	r3, r0
90005e64:	2b00      	cmp	r3, #0
90005e66:	d001      	beq.n	90005e6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005e68:	2301      	movs	r3, #1
90005e6a:	e0d5      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005e6c:	68fb      	ldr	r3, [r7, #12]
90005e6e:	2222      	movs	r2, #34	@ 0x22
90005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005e74:	68fb      	ldr	r3, [r7, #12]
90005e76:	2240      	movs	r2, #64	@ 0x40
90005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005e7c:	68fb      	ldr	r3, [r7, #12]
90005e7e:	2200      	movs	r2, #0
90005e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005e82:	68fb      	ldr	r3, [r7, #12]
90005e84:	6a3a      	ldr	r2, [r7, #32]
90005e86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005e88:	68fb      	ldr	r3, [r7, #12]
90005e8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005e8e:	68fb      	ldr	r3, [r7, #12]
90005e90:	2200      	movs	r2, #0
90005e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005e94:	88f8      	ldrh	r0, [r7, #6]
90005e96:	893a      	ldrh	r2, [r7, #8]
90005e98:	8979      	ldrh	r1, [r7, #10]
90005e9a:	697b      	ldr	r3, [r7, #20]
90005e9c:	9301      	str	r3, [sp, #4]
90005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005ea0:	9300      	str	r3, [sp, #0]
90005ea2:	4603      	mov	r3, r0
90005ea4:	68f8      	ldr	r0, [r7, #12]
90005ea6:	f000 f92d 	bl	90006104 <I2C_RequestMemoryRead>
90005eaa:	4603      	mov	r3, r0
90005eac:	2b00      	cmp	r3, #0
90005eae:	d005      	beq.n	90005ebc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005eb0:	68fb      	ldr	r3, [r7, #12]
90005eb2:	2200      	movs	r2, #0
90005eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005eb8:	2301      	movs	r3, #1
90005eba:	e0ad      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005ebc:	68fb      	ldr	r3, [r7, #12]
90005ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ec0:	b29b      	uxth	r3, r3
90005ec2:	2bff      	cmp	r3, #255	@ 0xff
90005ec4:	d90e      	bls.n	90005ee4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005ec6:	68fb      	ldr	r3, [r7, #12]
90005ec8:	22ff      	movs	r2, #255	@ 0xff
90005eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005ecc:	68fb      	ldr	r3, [r7, #12]
90005ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005ed0:	b2da      	uxtb	r2, r3
90005ed2:	8979      	ldrh	r1, [r7, #10]
90005ed4:	4b52      	ldr	r3, [pc, #328]	@ (90006020 <HAL_I2C_Mem_Read+0x22c>)
90005ed6:	9300      	str	r3, [sp, #0]
90005ed8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005edc:	68f8      	ldr	r0, [r7, #12]
90005ede:	f000 fb4d 	bl	9000657c <I2C_TransferConfig>
90005ee2:	e00f      	b.n	90005f04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005ee4:	68fb      	ldr	r3, [r7, #12]
90005ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ee8:	b29a      	uxth	r2, r3
90005eea:	68fb      	ldr	r3, [r7, #12]
90005eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005eee:	68fb      	ldr	r3, [r7, #12]
90005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005ef2:	b2da      	uxtb	r2, r3
90005ef4:	8979      	ldrh	r1, [r7, #10]
90005ef6:	4b4a      	ldr	r3, [pc, #296]	@ (90006020 <HAL_I2C_Mem_Read+0x22c>)
90005ef8:	9300      	str	r3, [sp, #0]
90005efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005efe:	68f8      	ldr	r0, [r7, #12]
90005f00:	f000 fb3c 	bl	9000657c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005f04:	697b      	ldr	r3, [r7, #20]
90005f06:	9300      	str	r3, [sp, #0]
90005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005f0a:	2200      	movs	r2, #0
90005f0c:	2104      	movs	r1, #4
90005f0e:	68f8      	ldr	r0, [r7, #12]
90005f10:	f000 f970 	bl	900061f4 <I2C_WaitOnFlagUntilTimeout>
90005f14:	4603      	mov	r3, r0
90005f16:	2b00      	cmp	r3, #0
90005f18:	d001      	beq.n	90005f1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005f1a:	2301      	movs	r3, #1
90005f1c:	e07c      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005f1e:	68fb      	ldr	r3, [r7, #12]
90005f20:	681b      	ldr	r3, [r3, #0]
90005f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005f24:	68fb      	ldr	r3, [r7, #12]
90005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005f28:	b2d2      	uxtb	r2, r2
90005f2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005f2c:	68fb      	ldr	r3, [r7, #12]
90005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005f30:	1c5a      	adds	r2, r3, #1
90005f32:	68fb      	ldr	r3, [r7, #12]
90005f34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005f36:	68fb      	ldr	r3, [r7, #12]
90005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005f3a:	3b01      	subs	r3, #1
90005f3c:	b29a      	uxth	r2, r3
90005f3e:	68fb      	ldr	r3, [r7, #12]
90005f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005f42:	68fb      	ldr	r3, [r7, #12]
90005f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005f46:	b29b      	uxth	r3, r3
90005f48:	3b01      	subs	r3, #1
90005f4a:	b29a      	uxth	r2, r3
90005f4c:	68fb      	ldr	r3, [r7, #12]
90005f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005f50:	68fb      	ldr	r3, [r7, #12]
90005f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005f54:	b29b      	uxth	r3, r3
90005f56:	2b00      	cmp	r3, #0
90005f58:	d034      	beq.n	90005fc4 <HAL_I2C_Mem_Read+0x1d0>
90005f5a:	68fb      	ldr	r3, [r7, #12]
90005f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005f5e:	2b00      	cmp	r3, #0
90005f60:	d130      	bne.n	90005fc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005f62:	697b      	ldr	r3, [r7, #20]
90005f64:	9300      	str	r3, [sp, #0]
90005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005f68:	2200      	movs	r2, #0
90005f6a:	2180      	movs	r1, #128	@ 0x80
90005f6c:	68f8      	ldr	r0, [r7, #12]
90005f6e:	f000 f941 	bl	900061f4 <I2C_WaitOnFlagUntilTimeout>
90005f72:	4603      	mov	r3, r0
90005f74:	2b00      	cmp	r3, #0
90005f76:	d001      	beq.n	90005f7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005f78:	2301      	movs	r3, #1
90005f7a:	e04d      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005f7c:	68fb      	ldr	r3, [r7, #12]
90005f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005f80:	b29b      	uxth	r3, r3
90005f82:	2bff      	cmp	r3, #255	@ 0xff
90005f84:	d90e      	bls.n	90005fa4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005f86:	68fb      	ldr	r3, [r7, #12]
90005f88:	22ff      	movs	r2, #255	@ 0xff
90005f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005f8c:	68fb      	ldr	r3, [r7, #12]
90005f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005f90:	b2da      	uxtb	r2, r3
90005f92:	8979      	ldrh	r1, [r7, #10]
90005f94:	2300      	movs	r3, #0
90005f96:	9300      	str	r3, [sp, #0]
90005f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005f9c:	68f8      	ldr	r0, [r7, #12]
90005f9e:	f000 faed 	bl	9000657c <I2C_TransferConfig>
90005fa2:	e00f      	b.n	90005fc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005fa4:	68fb      	ldr	r3, [r7, #12]
90005fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005fa8:	b29a      	uxth	r2, r3
90005faa:	68fb      	ldr	r3, [r7, #12]
90005fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005fae:	68fb      	ldr	r3, [r7, #12]
90005fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005fb2:	b2da      	uxtb	r2, r3
90005fb4:	8979      	ldrh	r1, [r7, #10]
90005fb6:	2300      	movs	r3, #0
90005fb8:	9300      	str	r3, [sp, #0]
90005fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005fbe:	68f8      	ldr	r0, [r7, #12]
90005fc0:	f000 fadc 	bl	9000657c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005fc4:	68fb      	ldr	r3, [r7, #12]
90005fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005fc8:	b29b      	uxth	r3, r3
90005fca:	2b00      	cmp	r3, #0
90005fcc:	d19a      	bne.n	90005f04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005fce:	697a      	ldr	r2, [r7, #20]
90005fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005fd2:	68f8      	ldr	r0, [r7, #12]
90005fd4:	f000 f9ae 	bl	90006334 <I2C_WaitOnSTOPFlagUntilTimeout>
90005fd8:	4603      	mov	r3, r0
90005fda:	2b00      	cmp	r3, #0
90005fdc:	d001      	beq.n	90005fe2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005fde:	2301      	movs	r3, #1
90005fe0:	e01a      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005fe2:	68fb      	ldr	r3, [r7, #12]
90005fe4:	681b      	ldr	r3, [r3, #0]
90005fe6:	2220      	movs	r2, #32
90005fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005fea:	68fb      	ldr	r3, [r7, #12]
90005fec:	681b      	ldr	r3, [r3, #0]
90005fee:	6859      	ldr	r1, [r3, #4]
90005ff0:	68fb      	ldr	r3, [r7, #12]
90005ff2:	681a      	ldr	r2, [r3, #0]
90005ff4:	4b0b      	ldr	r3, [pc, #44]	@ (90006024 <HAL_I2C_Mem_Read+0x230>)
90005ff6:	400b      	ands	r3, r1
90005ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005ffa:	68fb      	ldr	r3, [r7, #12]
90005ffc:	2220      	movs	r2, #32
90005ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90006002:	68fb      	ldr	r3, [r7, #12]
90006004:	2200      	movs	r2, #0
90006006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000600a:	68fb      	ldr	r3, [r7, #12]
9000600c:	2200      	movs	r2, #0
9000600e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006012:	2300      	movs	r3, #0
90006014:	e000      	b.n	90006018 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90006016:	2302      	movs	r3, #2
  }
}
90006018:	4618      	mov	r0, r3
9000601a:	3718      	adds	r7, #24
9000601c:	46bd      	mov	sp, r7
9000601e:	bd80      	pop	{r7, pc}
90006020:	80002400 	.word	0x80002400
90006024:	fe00e800 	.word	0xfe00e800

90006028 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90006028:	b480      	push	{r7}
9000602a:	b083      	sub	sp, #12
9000602c:	af00      	add	r7, sp, #0
9000602e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90006030:	687b      	ldr	r3, [r7, #4]
90006032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006036:	b2db      	uxtb	r3, r3
}
90006038:	4618      	mov	r0, r3
9000603a:	370c      	adds	r7, #12
9000603c:	46bd      	mov	sp, r7
9000603e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006042:	4770      	bx	lr

90006044 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90006044:	b480      	push	{r7}
90006046:	b083      	sub	sp, #12
90006048:	af00      	add	r7, sp, #0
9000604a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
9000604c:	687b      	ldr	r3, [r7, #4]
9000604e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90006050:	4618      	mov	r0, r3
90006052:	370c      	adds	r7, #12
90006054:	46bd      	mov	sp, r7
90006056:	f85d 7b04 	ldr.w	r7, [sp], #4
9000605a:	4770      	bx	lr

9000605c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
9000605c:	b580      	push	{r7, lr}
9000605e:	b086      	sub	sp, #24
90006060:	af02      	add	r7, sp, #8
90006062:	60f8      	str	r0, [r7, #12]
90006064:	4608      	mov	r0, r1
90006066:	4611      	mov	r1, r2
90006068:	461a      	mov	r2, r3
9000606a:	4603      	mov	r3, r0
9000606c:	817b      	strh	r3, [r7, #10]
9000606e:	460b      	mov	r3, r1
90006070:	813b      	strh	r3, [r7, #8]
90006072:	4613      	mov	r3, r2
90006074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90006076:	88fb      	ldrh	r3, [r7, #6]
90006078:	b2da      	uxtb	r2, r3
9000607a:	8979      	ldrh	r1, [r7, #10]
9000607c:	4b20      	ldr	r3, [pc, #128]	@ (90006100 <I2C_RequestMemoryWrite+0xa4>)
9000607e:	9300      	str	r3, [sp, #0]
90006080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006084:	68f8      	ldr	r0, [r7, #12]
90006086:	f000 fa79 	bl	9000657c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000608a:	69fa      	ldr	r2, [r7, #28]
9000608c:	69b9      	ldr	r1, [r7, #24]
9000608e:	68f8      	ldr	r0, [r7, #12]
90006090:	f000 f909 	bl	900062a6 <I2C_WaitOnTXISFlagUntilTimeout>
90006094:	4603      	mov	r3, r0
90006096:	2b00      	cmp	r3, #0
90006098:	d001      	beq.n	9000609e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
9000609a:	2301      	movs	r3, #1
9000609c:	e02c      	b.n	900060f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000609e:	88fb      	ldrh	r3, [r7, #6]
900060a0:	2b01      	cmp	r3, #1
900060a2:	d105      	bne.n	900060b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900060a4:	893b      	ldrh	r3, [r7, #8]
900060a6:	b2da      	uxtb	r2, r3
900060a8:	68fb      	ldr	r3, [r7, #12]
900060aa:	681b      	ldr	r3, [r3, #0]
900060ac:	629a      	str	r2, [r3, #40]	@ 0x28
900060ae:	e015      	b.n	900060dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900060b0:	893b      	ldrh	r3, [r7, #8]
900060b2:	0a1b      	lsrs	r3, r3, #8
900060b4:	b29b      	uxth	r3, r3
900060b6:	b2da      	uxtb	r2, r3
900060b8:	68fb      	ldr	r3, [r7, #12]
900060ba:	681b      	ldr	r3, [r3, #0]
900060bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900060be:	69fa      	ldr	r2, [r7, #28]
900060c0:	69b9      	ldr	r1, [r7, #24]
900060c2:	68f8      	ldr	r0, [r7, #12]
900060c4:	f000 f8ef 	bl	900062a6 <I2C_WaitOnTXISFlagUntilTimeout>
900060c8:	4603      	mov	r3, r0
900060ca:	2b00      	cmp	r3, #0
900060cc:	d001      	beq.n	900060d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
900060ce:	2301      	movs	r3, #1
900060d0:	e012      	b.n	900060f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900060d2:	893b      	ldrh	r3, [r7, #8]
900060d4:	b2da      	uxtb	r2, r3
900060d6:	68fb      	ldr	r3, [r7, #12]
900060d8:	681b      	ldr	r3, [r3, #0]
900060da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
900060dc:	69fb      	ldr	r3, [r7, #28]
900060de:	9300      	str	r3, [sp, #0]
900060e0:	69bb      	ldr	r3, [r7, #24]
900060e2:	2200      	movs	r2, #0
900060e4:	2180      	movs	r1, #128	@ 0x80
900060e6:	68f8      	ldr	r0, [r7, #12]
900060e8:	f000 f884 	bl	900061f4 <I2C_WaitOnFlagUntilTimeout>
900060ec:	4603      	mov	r3, r0
900060ee:	2b00      	cmp	r3, #0
900060f0:	d001      	beq.n	900060f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
900060f2:	2301      	movs	r3, #1
900060f4:	e000      	b.n	900060f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
900060f6:	2300      	movs	r3, #0
}
900060f8:	4618      	mov	r0, r3
900060fa:	3710      	adds	r7, #16
900060fc:	46bd      	mov	sp, r7
900060fe:	bd80      	pop	{r7, pc}
90006100:	80002000 	.word	0x80002000

90006104 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90006104:	b580      	push	{r7, lr}
90006106:	b086      	sub	sp, #24
90006108:	af02      	add	r7, sp, #8
9000610a:	60f8      	str	r0, [r7, #12]
9000610c:	4608      	mov	r0, r1
9000610e:	4611      	mov	r1, r2
90006110:	461a      	mov	r2, r3
90006112:	4603      	mov	r3, r0
90006114:	817b      	strh	r3, [r7, #10]
90006116:	460b      	mov	r3, r1
90006118:	813b      	strh	r3, [r7, #8]
9000611a:	4613      	mov	r3, r2
9000611c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
9000611e:	88fb      	ldrh	r3, [r7, #6]
90006120:	b2da      	uxtb	r2, r3
90006122:	8979      	ldrh	r1, [r7, #10]
90006124:	4b20      	ldr	r3, [pc, #128]	@ (900061a8 <I2C_RequestMemoryRead+0xa4>)
90006126:	9300      	str	r3, [sp, #0]
90006128:	2300      	movs	r3, #0
9000612a:	68f8      	ldr	r0, [r7, #12]
9000612c:	f000 fa26 	bl	9000657c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006130:	69fa      	ldr	r2, [r7, #28]
90006132:	69b9      	ldr	r1, [r7, #24]
90006134:	68f8      	ldr	r0, [r7, #12]
90006136:	f000 f8b6 	bl	900062a6 <I2C_WaitOnTXISFlagUntilTimeout>
9000613a:	4603      	mov	r3, r0
9000613c:	2b00      	cmp	r3, #0
9000613e:	d001      	beq.n	90006144 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90006140:	2301      	movs	r3, #1
90006142:	e02c      	b.n	9000619e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90006144:	88fb      	ldrh	r3, [r7, #6]
90006146:	2b01      	cmp	r3, #1
90006148:	d105      	bne.n	90006156 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000614a:	893b      	ldrh	r3, [r7, #8]
9000614c:	b2da      	uxtb	r2, r3
9000614e:	68fb      	ldr	r3, [r7, #12]
90006150:	681b      	ldr	r3, [r3, #0]
90006152:	629a      	str	r2, [r3, #40]	@ 0x28
90006154:	e015      	b.n	90006182 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90006156:	893b      	ldrh	r3, [r7, #8]
90006158:	0a1b      	lsrs	r3, r3, #8
9000615a:	b29b      	uxth	r3, r3
9000615c:	b2da      	uxtb	r2, r3
9000615e:	68fb      	ldr	r3, [r7, #12]
90006160:	681b      	ldr	r3, [r3, #0]
90006162:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006164:	69fa      	ldr	r2, [r7, #28]
90006166:	69b9      	ldr	r1, [r7, #24]
90006168:	68f8      	ldr	r0, [r7, #12]
9000616a:	f000 f89c 	bl	900062a6 <I2C_WaitOnTXISFlagUntilTimeout>
9000616e:	4603      	mov	r3, r0
90006170:	2b00      	cmp	r3, #0
90006172:	d001      	beq.n	90006178 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90006174:	2301      	movs	r3, #1
90006176:	e012      	b.n	9000619e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90006178:	893b      	ldrh	r3, [r7, #8]
9000617a:	b2da      	uxtb	r2, r3
9000617c:	68fb      	ldr	r3, [r7, #12]
9000617e:	681b      	ldr	r3, [r3, #0]
90006180:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90006182:	69fb      	ldr	r3, [r7, #28]
90006184:	9300      	str	r3, [sp, #0]
90006186:	69bb      	ldr	r3, [r7, #24]
90006188:	2200      	movs	r2, #0
9000618a:	2140      	movs	r1, #64	@ 0x40
9000618c:	68f8      	ldr	r0, [r7, #12]
9000618e:	f000 f831 	bl	900061f4 <I2C_WaitOnFlagUntilTimeout>
90006192:	4603      	mov	r3, r0
90006194:	2b00      	cmp	r3, #0
90006196:	d001      	beq.n	9000619c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90006198:	2301      	movs	r3, #1
9000619a:	e000      	b.n	9000619e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
9000619c:	2300      	movs	r3, #0
}
9000619e:	4618      	mov	r0, r3
900061a0:	3710      	adds	r7, #16
900061a2:	46bd      	mov	sp, r7
900061a4:	bd80      	pop	{r7, pc}
900061a6:	bf00      	nop
900061a8:	80002000 	.word	0x80002000

900061ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
900061ac:	b480      	push	{r7}
900061ae:	b083      	sub	sp, #12
900061b0:	af00      	add	r7, sp, #0
900061b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900061b4:	687b      	ldr	r3, [r7, #4]
900061b6:	681b      	ldr	r3, [r3, #0]
900061b8:	699b      	ldr	r3, [r3, #24]
900061ba:	f003 0302 	and.w	r3, r3, #2
900061be:	2b02      	cmp	r3, #2
900061c0:	d103      	bne.n	900061ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
900061c2:	687b      	ldr	r3, [r7, #4]
900061c4:	681b      	ldr	r3, [r3, #0]
900061c6:	2200      	movs	r2, #0
900061c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900061ca:	687b      	ldr	r3, [r7, #4]
900061cc:	681b      	ldr	r3, [r3, #0]
900061ce:	699b      	ldr	r3, [r3, #24]
900061d0:	f003 0301 	and.w	r3, r3, #1
900061d4:	2b01      	cmp	r3, #1
900061d6:	d007      	beq.n	900061e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900061d8:	687b      	ldr	r3, [r7, #4]
900061da:	681b      	ldr	r3, [r3, #0]
900061dc:	699a      	ldr	r2, [r3, #24]
900061de:	687b      	ldr	r3, [r7, #4]
900061e0:	681b      	ldr	r3, [r3, #0]
900061e2:	f042 0201 	orr.w	r2, r2, #1
900061e6:	619a      	str	r2, [r3, #24]
  }
}
900061e8:	bf00      	nop
900061ea:	370c      	adds	r7, #12
900061ec:	46bd      	mov	sp, r7
900061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900061f2:	4770      	bx	lr

900061f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
900061f4:	b580      	push	{r7, lr}
900061f6:	b084      	sub	sp, #16
900061f8:	af00      	add	r7, sp, #0
900061fa:	60f8      	str	r0, [r7, #12]
900061fc:	60b9      	str	r1, [r7, #8]
900061fe:	603b      	str	r3, [r7, #0]
90006200:	4613      	mov	r3, r2
90006202:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006204:	e03b      	b.n	9000627e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006206:	69ba      	ldr	r2, [r7, #24]
90006208:	6839      	ldr	r1, [r7, #0]
9000620a:	68f8      	ldr	r0, [r7, #12]
9000620c:	f000 f8d6 	bl	900063bc <I2C_IsErrorOccurred>
90006210:	4603      	mov	r3, r0
90006212:	2b00      	cmp	r3, #0
90006214:	d001      	beq.n	9000621a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90006216:	2301      	movs	r3, #1
90006218:	e041      	b.n	9000629e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000621a:	683b      	ldr	r3, [r7, #0]
9000621c:	f1b3 3fff 	cmp.w	r3, #4294967295
90006220:	d02d      	beq.n	9000627e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006222:	f7fc fef3 	bl	9000300c <HAL_GetTick>
90006226:	4602      	mov	r2, r0
90006228:	69bb      	ldr	r3, [r7, #24]
9000622a:	1ad3      	subs	r3, r2, r3
9000622c:	683a      	ldr	r2, [r7, #0]
9000622e:	429a      	cmp	r2, r3
90006230:	d302      	bcc.n	90006238 <I2C_WaitOnFlagUntilTimeout+0x44>
90006232:	683b      	ldr	r3, [r7, #0]
90006234:	2b00      	cmp	r3, #0
90006236:	d122      	bne.n	9000627e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90006238:	68fb      	ldr	r3, [r7, #12]
9000623a:	681b      	ldr	r3, [r3, #0]
9000623c:	699a      	ldr	r2, [r3, #24]
9000623e:	68bb      	ldr	r3, [r7, #8]
90006240:	4013      	ands	r3, r2
90006242:	68ba      	ldr	r2, [r7, #8]
90006244:	429a      	cmp	r2, r3
90006246:	bf0c      	ite	eq
90006248:	2301      	moveq	r3, #1
9000624a:	2300      	movne	r3, #0
9000624c:	b2db      	uxtb	r3, r3
9000624e:	461a      	mov	r2, r3
90006250:	79fb      	ldrb	r3, [r7, #7]
90006252:	429a      	cmp	r2, r3
90006254:	d113      	bne.n	9000627e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006256:	68fb      	ldr	r3, [r7, #12]
90006258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000625a:	f043 0220 	orr.w	r2, r3, #32
9000625e:	68fb      	ldr	r3, [r7, #12]
90006260:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006262:	68fb      	ldr	r3, [r7, #12]
90006264:	2220      	movs	r2, #32
90006266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000626a:	68fb      	ldr	r3, [r7, #12]
9000626c:	2200      	movs	r2, #0
9000626e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006272:	68fb      	ldr	r3, [r7, #12]
90006274:	2200      	movs	r2, #0
90006276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
9000627a:	2301      	movs	r3, #1
9000627c:	e00f      	b.n	9000629e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000627e:	68fb      	ldr	r3, [r7, #12]
90006280:	681b      	ldr	r3, [r3, #0]
90006282:	699a      	ldr	r2, [r3, #24]
90006284:	68bb      	ldr	r3, [r7, #8]
90006286:	4013      	ands	r3, r2
90006288:	68ba      	ldr	r2, [r7, #8]
9000628a:	429a      	cmp	r2, r3
9000628c:	bf0c      	ite	eq
9000628e:	2301      	moveq	r3, #1
90006290:	2300      	movne	r3, #0
90006292:	b2db      	uxtb	r3, r3
90006294:	461a      	mov	r2, r3
90006296:	79fb      	ldrb	r3, [r7, #7]
90006298:	429a      	cmp	r2, r3
9000629a:	d0b4      	beq.n	90006206 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000629c:	2300      	movs	r3, #0
}
9000629e:	4618      	mov	r0, r3
900062a0:	3710      	adds	r7, #16
900062a2:	46bd      	mov	sp, r7
900062a4:	bd80      	pop	{r7, pc}

900062a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900062a6:	b580      	push	{r7, lr}
900062a8:	b084      	sub	sp, #16
900062aa:	af00      	add	r7, sp, #0
900062ac:	60f8      	str	r0, [r7, #12]
900062ae:	60b9      	str	r1, [r7, #8]
900062b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900062b2:	e033      	b.n	9000631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900062b4:	687a      	ldr	r2, [r7, #4]
900062b6:	68b9      	ldr	r1, [r7, #8]
900062b8:	68f8      	ldr	r0, [r7, #12]
900062ba:	f000 f87f 	bl	900063bc <I2C_IsErrorOccurred>
900062be:	4603      	mov	r3, r0
900062c0:	2b00      	cmp	r3, #0
900062c2:	d001      	beq.n	900062c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900062c4:	2301      	movs	r3, #1
900062c6:	e031      	b.n	9000632c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900062c8:	68bb      	ldr	r3, [r7, #8]
900062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
900062ce:	d025      	beq.n	9000631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900062d0:	f7fc fe9c 	bl	9000300c <HAL_GetTick>
900062d4:	4602      	mov	r2, r0
900062d6:	687b      	ldr	r3, [r7, #4]
900062d8:	1ad3      	subs	r3, r2, r3
900062da:	68ba      	ldr	r2, [r7, #8]
900062dc:	429a      	cmp	r2, r3
900062de:	d302      	bcc.n	900062e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
900062e0:	68bb      	ldr	r3, [r7, #8]
900062e2:	2b00      	cmp	r3, #0
900062e4:	d11a      	bne.n	9000631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900062e6:	68fb      	ldr	r3, [r7, #12]
900062e8:	681b      	ldr	r3, [r3, #0]
900062ea:	699b      	ldr	r3, [r3, #24]
900062ec:	f003 0302 	and.w	r3, r3, #2
900062f0:	2b02      	cmp	r3, #2
900062f2:	d013      	beq.n	9000631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900062f4:	68fb      	ldr	r3, [r7, #12]
900062f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900062f8:	f043 0220 	orr.w	r2, r3, #32
900062fc:	68fb      	ldr	r3, [r7, #12]
900062fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006300:	68fb      	ldr	r3, [r7, #12]
90006302:	2220      	movs	r2, #32
90006304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006308:	68fb      	ldr	r3, [r7, #12]
9000630a:	2200      	movs	r2, #0
9000630c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006310:	68fb      	ldr	r3, [r7, #12]
90006312:	2200      	movs	r2, #0
90006314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006318:	2301      	movs	r3, #1
9000631a:	e007      	b.n	9000632c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000631c:	68fb      	ldr	r3, [r7, #12]
9000631e:	681b      	ldr	r3, [r3, #0]
90006320:	699b      	ldr	r3, [r3, #24]
90006322:	f003 0302 	and.w	r3, r3, #2
90006326:	2b02      	cmp	r3, #2
90006328:	d1c4      	bne.n	900062b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000632a:	2300      	movs	r3, #0
}
9000632c:	4618      	mov	r0, r3
9000632e:	3710      	adds	r7, #16
90006330:	46bd      	mov	sp, r7
90006332:	bd80      	pop	{r7, pc}

90006334 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006334:	b580      	push	{r7, lr}
90006336:	b084      	sub	sp, #16
90006338:	af00      	add	r7, sp, #0
9000633a:	60f8      	str	r0, [r7, #12]
9000633c:	60b9      	str	r1, [r7, #8]
9000633e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006340:	e02f      	b.n	900063a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006342:	687a      	ldr	r2, [r7, #4]
90006344:	68b9      	ldr	r1, [r7, #8]
90006346:	68f8      	ldr	r0, [r7, #12]
90006348:	f000 f838 	bl	900063bc <I2C_IsErrorOccurred>
9000634c:	4603      	mov	r3, r0
9000634e:	2b00      	cmp	r3, #0
90006350:	d001      	beq.n	90006356 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006352:	2301      	movs	r3, #1
90006354:	e02d      	b.n	900063b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006356:	f7fc fe59 	bl	9000300c <HAL_GetTick>
9000635a:	4602      	mov	r2, r0
9000635c:	687b      	ldr	r3, [r7, #4]
9000635e:	1ad3      	subs	r3, r2, r3
90006360:	68ba      	ldr	r2, [r7, #8]
90006362:	429a      	cmp	r2, r3
90006364:	d302      	bcc.n	9000636c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90006366:	68bb      	ldr	r3, [r7, #8]
90006368:	2b00      	cmp	r3, #0
9000636a:	d11a      	bne.n	900063a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000636c:	68fb      	ldr	r3, [r7, #12]
9000636e:	681b      	ldr	r3, [r3, #0]
90006370:	699b      	ldr	r3, [r3, #24]
90006372:	f003 0320 	and.w	r3, r3, #32
90006376:	2b20      	cmp	r3, #32
90006378:	d013      	beq.n	900063a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000637a:	68fb      	ldr	r3, [r7, #12]
9000637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000637e:	f043 0220 	orr.w	r2, r3, #32
90006382:	68fb      	ldr	r3, [r7, #12]
90006384:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90006386:	68fb      	ldr	r3, [r7, #12]
90006388:	2220      	movs	r2, #32
9000638a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
9000638e:	68fb      	ldr	r3, [r7, #12]
90006390:	2200      	movs	r2, #0
90006392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90006396:	68fb      	ldr	r3, [r7, #12]
90006398:	2200      	movs	r2, #0
9000639a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
9000639e:	2301      	movs	r3, #1
900063a0:	e007      	b.n	900063b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900063a2:	68fb      	ldr	r3, [r7, #12]
900063a4:	681b      	ldr	r3, [r3, #0]
900063a6:	699b      	ldr	r3, [r3, #24]
900063a8:	f003 0320 	and.w	r3, r3, #32
900063ac:	2b20      	cmp	r3, #32
900063ae:	d1c8      	bne.n	90006342 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
900063b0:	2300      	movs	r3, #0
}
900063b2:	4618      	mov	r0, r3
900063b4:	3710      	adds	r7, #16
900063b6:	46bd      	mov	sp, r7
900063b8:	bd80      	pop	{r7, pc}
	...

900063bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900063bc:	b580      	push	{r7, lr}
900063be:	b08a      	sub	sp, #40	@ 0x28
900063c0:	af00      	add	r7, sp, #0
900063c2:	60f8      	str	r0, [r7, #12]
900063c4:	60b9      	str	r1, [r7, #8]
900063c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900063c8:	2300      	movs	r3, #0
900063ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
900063ce:	68fb      	ldr	r3, [r7, #12]
900063d0:	681b      	ldr	r3, [r3, #0]
900063d2:	699b      	ldr	r3, [r3, #24]
900063d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
900063d6:	2300      	movs	r3, #0
900063d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
900063da:	687b      	ldr	r3, [r7, #4]
900063dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900063de:	69bb      	ldr	r3, [r7, #24]
900063e0:	f003 0310 	and.w	r3, r3, #16
900063e4:	2b00      	cmp	r3, #0
900063e6:	d068      	beq.n	900064ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900063e8:	68fb      	ldr	r3, [r7, #12]
900063ea:	681b      	ldr	r3, [r3, #0]
900063ec:	2210      	movs	r2, #16
900063ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900063f0:	e049      	b.n	90006486 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900063f2:	68bb      	ldr	r3, [r7, #8]
900063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
900063f8:	d045      	beq.n	90006486 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900063fa:	f7fc fe07 	bl	9000300c <HAL_GetTick>
900063fe:	4602      	mov	r2, r0
90006400:	69fb      	ldr	r3, [r7, #28]
90006402:	1ad3      	subs	r3, r2, r3
90006404:	68ba      	ldr	r2, [r7, #8]
90006406:	429a      	cmp	r2, r3
90006408:	d302      	bcc.n	90006410 <I2C_IsErrorOccurred+0x54>
9000640a:	68bb      	ldr	r3, [r7, #8]
9000640c:	2b00      	cmp	r3, #0
9000640e:	d13a      	bne.n	90006486 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006410:	68fb      	ldr	r3, [r7, #12]
90006412:	681b      	ldr	r3, [r3, #0]
90006414:	685b      	ldr	r3, [r3, #4]
90006416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000641a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
9000641c:	68fb      	ldr	r3, [r7, #12]
9000641e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006422:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006424:	68fb      	ldr	r3, [r7, #12]
90006426:	681b      	ldr	r3, [r3, #0]
90006428:	699b      	ldr	r3, [r3, #24]
9000642a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000642e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006432:	d121      	bne.n	90006478 <I2C_IsErrorOccurred+0xbc>
90006434:	697b      	ldr	r3, [r7, #20]
90006436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000643a:	d01d      	beq.n	90006478 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
9000643c:	7cfb      	ldrb	r3, [r7, #19]
9000643e:	2b20      	cmp	r3, #32
90006440:	d01a      	beq.n	90006478 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006442:	68fb      	ldr	r3, [r7, #12]
90006444:	681b      	ldr	r3, [r3, #0]
90006446:	685a      	ldr	r2, [r3, #4]
90006448:	68fb      	ldr	r3, [r7, #12]
9000644a:	681b      	ldr	r3, [r3, #0]
9000644c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006450:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006452:	f7fc fddb 	bl	9000300c <HAL_GetTick>
90006456:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006458:	e00e      	b.n	90006478 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000645a:	f7fc fdd7 	bl	9000300c <HAL_GetTick>
9000645e:	4602      	mov	r2, r0
90006460:	69fb      	ldr	r3, [r7, #28]
90006462:	1ad3      	subs	r3, r2, r3
90006464:	2b19      	cmp	r3, #25
90006466:	d907      	bls.n	90006478 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90006468:	6a3b      	ldr	r3, [r7, #32]
9000646a:	f043 0320 	orr.w	r3, r3, #32
9000646e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006470:	2301      	movs	r3, #1
90006472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90006476:	e006      	b.n	90006486 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006478:	68fb      	ldr	r3, [r7, #12]
9000647a:	681b      	ldr	r3, [r3, #0]
9000647c:	699b      	ldr	r3, [r3, #24]
9000647e:	f003 0320 	and.w	r3, r3, #32
90006482:	2b20      	cmp	r3, #32
90006484:	d1e9      	bne.n	9000645a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006486:	68fb      	ldr	r3, [r7, #12]
90006488:	681b      	ldr	r3, [r3, #0]
9000648a:	699b      	ldr	r3, [r3, #24]
9000648c:	f003 0320 	and.w	r3, r3, #32
90006490:	2b20      	cmp	r3, #32
90006492:	d003      	beq.n	9000649c <I2C_IsErrorOccurred+0xe0>
90006494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006498:	2b00      	cmp	r3, #0
9000649a:	d0aa      	beq.n	900063f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
9000649c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900064a0:	2b00      	cmp	r3, #0
900064a2:	d103      	bne.n	900064ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900064a4:	68fb      	ldr	r3, [r7, #12]
900064a6:	681b      	ldr	r3, [r3, #0]
900064a8:	2220      	movs	r2, #32
900064aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900064ac:	6a3b      	ldr	r3, [r7, #32]
900064ae:	f043 0304 	orr.w	r3, r3, #4
900064b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
900064b4:	2301      	movs	r3, #1
900064b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900064ba:	68fb      	ldr	r3, [r7, #12]
900064bc:	681b      	ldr	r3, [r3, #0]
900064be:	699b      	ldr	r3, [r3, #24]
900064c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900064c2:	69bb      	ldr	r3, [r7, #24]
900064c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900064c8:	2b00      	cmp	r3, #0
900064ca:	d00b      	beq.n	900064e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
900064cc:	6a3b      	ldr	r3, [r7, #32]
900064ce:	f043 0301 	orr.w	r3, r3, #1
900064d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900064d4:	68fb      	ldr	r3, [r7, #12]
900064d6:	681b      	ldr	r3, [r3, #0]
900064d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
900064dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900064de:	2301      	movs	r3, #1
900064e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900064e4:	69bb      	ldr	r3, [r7, #24]
900064e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900064ea:	2b00      	cmp	r3, #0
900064ec:	d00b      	beq.n	90006506 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900064ee:	6a3b      	ldr	r3, [r7, #32]
900064f0:	f043 0308 	orr.w	r3, r3, #8
900064f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900064f6:	68fb      	ldr	r3, [r7, #12]
900064f8:	681b      	ldr	r3, [r3, #0]
900064fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900064fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006500:	2301      	movs	r3, #1
90006502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90006506:	69bb      	ldr	r3, [r7, #24]
90006508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000650c:	2b00      	cmp	r3, #0
9000650e:	d00b      	beq.n	90006528 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006510:	6a3b      	ldr	r3, [r7, #32]
90006512:	f043 0302 	orr.w	r3, r3, #2
90006516:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006518:	68fb      	ldr	r3, [r7, #12]
9000651a:	681b      	ldr	r3, [r3, #0]
9000651c:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006520:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006522:	2301      	movs	r3, #1
90006524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000652c:	2b00      	cmp	r3, #0
9000652e:	d01c      	beq.n	9000656a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006530:	68f8      	ldr	r0, [r7, #12]
90006532:	f7ff fe3b 	bl	900061ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006536:	68fb      	ldr	r3, [r7, #12]
90006538:	681b      	ldr	r3, [r3, #0]
9000653a:	6859      	ldr	r1, [r3, #4]
9000653c:	68fb      	ldr	r3, [r7, #12]
9000653e:	681a      	ldr	r2, [r3, #0]
90006540:	4b0d      	ldr	r3, [pc, #52]	@ (90006578 <I2C_IsErrorOccurred+0x1bc>)
90006542:	400b      	ands	r3, r1
90006544:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006546:	68fb      	ldr	r3, [r7, #12]
90006548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000654a:	6a3b      	ldr	r3, [r7, #32]
9000654c:	431a      	orrs	r2, r3
9000654e:	68fb      	ldr	r3, [r7, #12]
90006550:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006552:	68fb      	ldr	r3, [r7, #12]
90006554:	2220      	movs	r2, #32
90006556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000655a:	68fb      	ldr	r3, [r7, #12]
9000655c:	2200      	movs	r2, #0
9000655e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006562:	68fb      	ldr	r3, [r7, #12]
90006564:	2200      	movs	r2, #0
90006566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
9000656a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
9000656e:	4618      	mov	r0, r3
90006570:	3728      	adds	r7, #40	@ 0x28
90006572:	46bd      	mov	sp, r7
90006574:	bd80      	pop	{r7, pc}
90006576:	bf00      	nop
90006578:	fe00e800 	.word	0xfe00e800

9000657c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
9000657c:	b480      	push	{r7}
9000657e:	b087      	sub	sp, #28
90006580:	af00      	add	r7, sp, #0
90006582:	60f8      	str	r0, [r7, #12]
90006584:	607b      	str	r3, [r7, #4]
90006586:	460b      	mov	r3, r1
90006588:	817b      	strh	r3, [r7, #10]
9000658a:	4613      	mov	r3, r2
9000658c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000658e:	897b      	ldrh	r3, [r7, #10]
90006590:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006594:	7a7b      	ldrb	r3, [r7, #9]
90006596:	041b      	lsls	r3, r3, #16
90006598:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000659c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000659e:	687b      	ldr	r3, [r7, #4]
900065a0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900065a2:	6a3b      	ldr	r3, [r7, #32]
900065a4:	4313      	orrs	r3, r2
900065a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
900065aa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900065ac:	68fb      	ldr	r3, [r7, #12]
900065ae:	681b      	ldr	r3, [r3, #0]
900065b0:	685a      	ldr	r2, [r3, #4]
900065b2:	6a3b      	ldr	r3, [r7, #32]
900065b4:	0d5b      	lsrs	r3, r3, #21
900065b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900065ba:	4b08      	ldr	r3, [pc, #32]	@ (900065dc <I2C_TransferConfig+0x60>)
900065bc:	430b      	orrs	r3, r1
900065be:	43db      	mvns	r3, r3
900065c0:	ea02 0103 	and.w	r1, r2, r3
900065c4:	68fb      	ldr	r3, [r7, #12]
900065c6:	681b      	ldr	r3, [r3, #0]
900065c8:	697a      	ldr	r2, [r7, #20]
900065ca:	430a      	orrs	r2, r1
900065cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900065ce:	bf00      	nop
900065d0:	371c      	adds	r7, #28
900065d2:	46bd      	mov	sp, r7
900065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900065d8:	4770      	bx	lr
900065da:	bf00      	nop
900065dc:	03ff63ff 	.word	0x03ff63ff

900065e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900065e0:	b480      	push	{r7}
900065e2:	b083      	sub	sp, #12
900065e4:	af00      	add	r7, sp, #0
900065e6:	6078      	str	r0, [r7, #4]
900065e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900065ea:	687b      	ldr	r3, [r7, #4]
900065ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900065f0:	b2db      	uxtb	r3, r3
900065f2:	2b20      	cmp	r3, #32
900065f4:	d138      	bne.n	90006668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900065f6:	687b      	ldr	r3, [r7, #4]
900065f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900065fc:	2b01      	cmp	r3, #1
900065fe:	d101      	bne.n	90006604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90006600:	2302      	movs	r3, #2
90006602:	e032      	b.n	9000666a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90006604:	687b      	ldr	r3, [r7, #4]
90006606:	2201      	movs	r2, #1
90006608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000660c:	687b      	ldr	r3, [r7, #4]
9000660e:	2224      	movs	r2, #36	@ 0x24
90006610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006614:	687b      	ldr	r3, [r7, #4]
90006616:	681b      	ldr	r3, [r3, #0]
90006618:	681a      	ldr	r2, [r3, #0]
9000661a:	687b      	ldr	r3, [r7, #4]
9000661c:	681b      	ldr	r3, [r3, #0]
9000661e:	f022 0201 	bic.w	r2, r2, #1
90006622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006624:	687b      	ldr	r3, [r7, #4]
90006626:	681b      	ldr	r3, [r3, #0]
90006628:	681a      	ldr	r2, [r3, #0]
9000662a:	687b      	ldr	r3, [r7, #4]
9000662c:	681b      	ldr	r3, [r3, #0]
9000662e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006634:	687b      	ldr	r3, [r7, #4]
90006636:	681b      	ldr	r3, [r3, #0]
90006638:	6819      	ldr	r1, [r3, #0]
9000663a:	687b      	ldr	r3, [r7, #4]
9000663c:	681b      	ldr	r3, [r3, #0]
9000663e:	683a      	ldr	r2, [r7, #0]
90006640:	430a      	orrs	r2, r1
90006642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006644:	687b      	ldr	r3, [r7, #4]
90006646:	681b      	ldr	r3, [r3, #0]
90006648:	681a      	ldr	r2, [r3, #0]
9000664a:	687b      	ldr	r3, [r7, #4]
9000664c:	681b      	ldr	r3, [r3, #0]
9000664e:	f042 0201 	orr.w	r2, r2, #1
90006652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006654:	687b      	ldr	r3, [r7, #4]
90006656:	2220      	movs	r2, #32
90006658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000665c:	687b      	ldr	r3, [r7, #4]
9000665e:	2200      	movs	r2, #0
90006660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006664:	2300      	movs	r3, #0
90006666:	e000      	b.n	9000666a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90006668:	2302      	movs	r3, #2
  }
}
9000666a:	4618      	mov	r0, r3
9000666c:	370c      	adds	r7, #12
9000666e:	46bd      	mov	sp, r7
90006670:	f85d 7b04 	ldr.w	r7, [sp], #4
90006674:	4770      	bx	lr

90006676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90006676:	b480      	push	{r7}
90006678:	b085      	sub	sp, #20
9000667a:	af00      	add	r7, sp, #0
9000667c:	6078      	str	r0, [r7, #4]
9000667e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006680:	687b      	ldr	r3, [r7, #4]
90006682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006686:	b2db      	uxtb	r3, r3
90006688:	2b20      	cmp	r3, #32
9000668a:	d139      	bne.n	90006700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000668c:	687b      	ldr	r3, [r7, #4]
9000668e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006692:	2b01      	cmp	r3, #1
90006694:	d101      	bne.n	9000669a <HAL_I2CEx_ConfigDigitalFilter+0x24>
90006696:	2302      	movs	r3, #2
90006698:	e033      	b.n	90006702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000669a:	687b      	ldr	r3, [r7, #4]
9000669c:	2201      	movs	r2, #1
9000669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900066a2:	687b      	ldr	r3, [r7, #4]
900066a4:	2224      	movs	r2, #36	@ 0x24
900066a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900066aa:	687b      	ldr	r3, [r7, #4]
900066ac:	681b      	ldr	r3, [r3, #0]
900066ae:	681a      	ldr	r2, [r3, #0]
900066b0:	687b      	ldr	r3, [r7, #4]
900066b2:	681b      	ldr	r3, [r3, #0]
900066b4:	f022 0201 	bic.w	r2, r2, #1
900066b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900066ba:	687b      	ldr	r3, [r7, #4]
900066bc:	681b      	ldr	r3, [r3, #0]
900066be:	681b      	ldr	r3, [r3, #0]
900066c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
900066c2:	68fb      	ldr	r3, [r7, #12]
900066c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
900066c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
900066ca:	683b      	ldr	r3, [r7, #0]
900066cc:	021b      	lsls	r3, r3, #8
900066ce:	68fa      	ldr	r2, [r7, #12]
900066d0:	4313      	orrs	r3, r2
900066d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900066d4:	687b      	ldr	r3, [r7, #4]
900066d6:	681b      	ldr	r3, [r3, #0]
900066d8:	68fa      	ldr	r2, [r7, #12]
900066da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900066dc:	687b      	ldr	r3, [r7, #4]
900066de:	681b      	ldr	r3, [r3, #0]
900066e0:	681a      	ldr	r2, [r3, #0]
900066e2:	687b      	ldr	r3, [r7, #4]
900066e4:	681b      	ldr	r3, [r3, #0]
900066e6:	f042 0201 	orr.w	r2, r2, #1
900066ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900066ec:	687b      	ldr	r3, [r7, #4]
900066ee:	2220      	movs	r2, #32
900066f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900066f4:	687b      	ldr	r3, [r7, #4]
900066f6:	2200      	movs	r2, #0
900066f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900066fc:	2300      	movs	r3, #0
900066fe:	e000      	b.n	90006702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90006700:	2302      	movs	r3, #2
  }
}
90006702:	4618      	mov	r0, r3
90006704:	3714      	adds	r7, #20
90006706:	46bd      	mov	sp, r7
90006708:	f85d 7b04 	ldr.w	r7, [sp], #4
9000670c:	4770      	bx	lr

9000670e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
9000670e:	b580      	push	{r7, lr}
90006710:	b084      	sub	sp, #16
90006712:	af00      	add	r7, sp, #0
90006714:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90006716:	687b      	ldr	r3, [r7, #4]
90006718:	2b00      	cmp	r3, #0
9000671a:	d101      	bne.n	90006720 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
9000671c:	2301      	movs	r3, #1
9000671e:	e08f      	b.n	90006840 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006720:	687b      	ldr	r3, [r7, #4]
90006722:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90006726:	b2db      	uxtb	r3, r3
90006728:	2b00      	cmp	r3, #0
9000672a:	d106      	bne.n	9000673a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
9000672c:	687b      	ldr	r3, [r7, #4]
9000672e:	2200      	movs	r2, #0
90006730:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006734:	6878      	ldr	r0, [r7, #4]
90006736:	f000 f887 	bl	90006848 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000673a:	687b      	ldr	r3, [r7, #4]
9000673c:	2202      	movs	r2, #2
9000673e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006742:	687b      	ldr	r3, [r7, #4]
90006744:	681b      	ldr	r3, [r3, #0]
90006746:	699a      	ldr	r2, [r3, #24]
90006748:	687b      	ldr	r3, [r7, #4]
9000674a:	681b      	ldr	r3, [r3, #0]
9000674c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006750:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006752:	687b      	ldr	r3, [r7, #4]
90006754:	681b      	ldr	r3, [r3, #0]
90006756:	6999      	ldr	r1, [r3, #24]
90006758:	687b      	ldr	r3, [r7, #4]
9000675a:	685a      	ldr	r2, [r3, #4]
9000675c:	687b      	ldr	r3, [r7, #4]
9000675e:	689b      	ldr	r3, [r3, #8]
90006760:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006762:	687b      	ldr	r3, [r7, #4]
90006764:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006766:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006768:	687b      	ldr	r3, [r7, #4]
9000676a:	691b      	ldr	r3, [r3, #16]
9000676c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000676e:	687b      	ldr	r3, [r7, #4]
90006770:	681b      	ldr	r3, [r3, #0]
90006772:	430a      	orrs	r2, r1
90006774:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
90006776:	687b      	ldr	r3, [r7, #4]
90006778:	695b      	ldr	r3, [r3, #20]
9000677a:	041b      	lsls	r3, r3, #16
9000677c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
9000677e:	687b      	ldr	r3, [r7, #4]
90006780:	6999      	ldr	r1, [r3, #24]
90006782:	687b      	ldr	r3, [r7, #4]
90006784:	681b      	ldr	r3, [r3, #0]
90006786:	68fa      	ldr	r2, [r7, #12]
90006788:	430a      	orrs	r2, r1
9000678a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000678c:	687b      	ldr	r3, [r7, #4]
9000678e:	69db      	ldr	r3, [r3, #28]
90006790:	041b      	lsls	r3, r3, #16
90006792:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90006794:	687b      	ldr	r3, [r7, #4]
90006796:	6a19      	ldr	r1, [r3, #32]
90006798:	687b      	ldr	r3, [r7, #4]
9000679a:	681b      	ldr	r3, [r3, #0]
9000679c:	68fa      	ldr	r2, [r7, #12]
9000679e:	430a      	orrs	r2, r1
900067a0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900067a2:	687b      	ldr	r3, [r7, #4]
900067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900067a6:	041b      	lsls	r3, r3, #16
900067a8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
900067aa:	687b      	ldr	r3, [r7, #4]
900067ac:	6a99      	ldr	r1, [r3, #40]	@ 0x28
900067ae:	687b      	ldr	r3, [r7, #4]
900067b0:	681b      	ldr	r3, [r3, #0]
900067b2:	68fa      	ldr	r2, [r7, #12]
900067b4:	430a      	orrs	r2, r1
900067b6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
900067b8:	687b      	ldr	r3, [r7, #4]
900067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900067bc:	041b      	lsls	r3, r3, #16
900067be:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
900067c0:	687b      	ldr	r3, [r7, #4]
900067c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
900067c4:	687b      	ldr	r3, [r7, #4]
900067c6:	681b      	ldr	r3, [r3, #0]
900067c8:	68fa      	ldr	r2, [r7, #12]
900067ca:	430a      	orrs	r2, r1
900067cc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900067ce:	687b      	ldr	r3, [r7, #4]
900067d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
900067d4:	021b      	lsls	r3, r3, #8
900067d6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900067d8:	687b      	ldr	r3, [r7, #4]
900067da:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
900067de:	041b      	lsls	r3, r3, #16
900067e0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900067e2:	687b      	ldr	r3, [r7, #4]
900067e4:	681b      	ldr	r3, [r3, #0]
900067e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
900067e8:	687b      	ldr	r3, [r7, #4]
900067ea:	681b      	ldr	r3, [r3, #0]
900067ec:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
900067f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900067f2:	687b      	ldr	r3, [r7, #4]
900067f4:	681b      	ldr	r3, [r3, #0]
900067f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
900067f8:	68ba      	ldr	r2, [r7, #8]
900067fa:	68fb      	ldr	r3, [r7, #12]
900067fc:	4313      	orrs	r3, r2
900067fe:	687a      	ldr	r2, [r7, #4]
90006800:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006804:	431a      	orrs	r2, r3
90006806:	687b      	ldr	r3, [r7, #4]
90006808:	681b      	ldr	r3, [r3, #0]
9000680a:	430a      	orrs	r2, r1
9000680c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000680e:	687b      	ldr	r3, [r7, #4]
90006810:	681b      	ldr	r3, [r3, #0]
90006812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006814:	687b      	ldr	r3, [r7, #4]
90006816:	681b      	ldr	r3, [r3, #0]
90006818:	f042 0206 	orr.w	r2, r2, #6
9000681c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
9000681e:	687b      	ldr	r3, [r7, #4]
90006820:	681b      	ldr	r3, [r3, #0]
90006822:	699a      	ldr	r2, [r3, #24]
90006824:	687b      	ldr	r3, [r7, #4]
90006826:	681b      	ldr	r3, [r3, #0]
90006828:	f042 0201 	orr.w	r2, r2, #1
9000682c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000682e:	687b      	ldr	r3, [r7, #4]
90006830:	2200      	movs	r2, #0
90006832:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90006836:	687b      	ldr	r3, [r7, #4]
90006838:	2201      	movs	r2, #1
9000683a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
9000683e:	2300      	movs	r3, #0
}
90006840:	4618      	mov	r0, r3
90006842:	3710      	adds	r7, #16
90006844:	46bd      	mov	sp, r7
90006846:	bd80      	pop	{r7, pc}

90006848 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006848:	b480      	push	{r7}
9000684a:	b083      	sub	sp, #12
9000684c:	af00      	add	r7, sp, #0
9000684e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006850:	bf00      	nop
90006852:	370c      	adds	r7, #12
90006854:	46bd      	mov	sp, r7
90006856:	f85d 7b04 	ldr.w	r7, [sp], #4
9000685a:	4770      	bx	lr

9000685c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000685c:	b5b0      	push	{r4, r5, r7, lr}
9000685e:	b084      	sub	sp, #16
90006860:	af00      	add	r7, sp, #0
90006862:	60f8      	str	r0, [r7, #12]
90006864:	60b9      	str	r1, [r7, #8]
90006866:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006868:	68fb      	ldr	r3, [r7, #12]
9000686a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
9000686e:	2b01      	cmp	r3, #1
90006870:	d101      	bne.n	90006876 <HAL_LTDC_ConfigLayer+0x1a>
90006872:	2302      	movs	r3, #2
90006874:	e02c      	b.n	900068d0 <HAL_LTDC_ConfigLayer+0x74>
90006876:	68fb      	ldr	r3, [r7, #12]
90006878:	2201      	movs	r2, #1
9000687a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000687e:	68fb      	ldr	r3, [r7, #12]
90006880:	2202      	movs	r2, #2
90006882:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90006886:	68fa      	ldr	r2, [r7, #12]
90006888:	687b      	ldr	r3, [r7, #4]
9000688a:	2134      	movs	r1, #52	@ 0x34
9000688c:	fb01 f303 	mul.w	r3, r1, r3
90006890:	4413      	add	r3, r2
90006892:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90006896:	68bb      	ldr	r3, [r7, #8]
90006898:	4614      	mov	r4, r2
9000689a:	461d      	mov	r5, r3
9000689c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000689e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900068a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900068a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900068a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900068a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900068a8:	682b      	ldr	r3, [r5, #0]
900068aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900068ac:	687a      	ldr	r2, [r7, #4]
900068ae:	68b9      	ldr	r1, [r7, #8]
900068b0:	68f8      	ldr	r0, [r7, #12]
900068b2:	f000 f811 	bl	900068d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900068b6:	68fb      	ldr	r3, [r7, #12]
900068b8:	681b      	ldr	r3, [r3, #0]
900068ba:	2201      	movs	r2, #1
900068bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900068be:	68fb      	ldr	r3, [r7, #12]
900068c0:	2201      	movs	r2, #1
900068c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900068c6:	68fb      	ldr	r3, [r7, #12]
900068c8:	2200      	movs	r2, #0
900068ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
900068ce:	2300      	movs	r3, #0
}
900068d0:	4618      	mov	r0, r3
900068d2:	3710      	adds	r7, #16
900068d4:	46bd      	mov	sp, r7
900068d6:	bdb0      	pop	{r4, r5, r7, pc}

900068d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900068d8:	b480      	push	{r7}
900068da:	b089      	sub	sp, #36	@ 0x24
900068dc:	af00      	add	r7, sp, #0
900068de:	60f8      	str	r0, [r7, #12]
900068e0:	60b9      	str	r1, [r7, #8]
900068e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900068e4:	68bb      	ldr	r3, [r7, #8]
900068e6:	685a      	ldr	r2, [r3, #4]
900068e8:	68fb      	ldr	r3, [r7, #12]
900068ea:	681b      	ldr	r3, [r3, #0]
900068ec:	68db      	ldr	r3, [r3, #12]
900068ee:	0c1b      	lsrs	r3, r3, #16
900068f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
900068f4:	4413      	add	r3, r2
900068f6:	041b      	lsls	r3, r3, #16
900068f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900068fa:	68fb      	ldr	r3, [r7, #12]
900068fc:	681b      	ldr	r3, [r3, #0]
900068fe:	461a      	mov	r2, r3
90006900:	687b      	ldr	r3, [r7, #4]
90006902:	01db      	lsls	r3, r3, #7
90006904:	4413      	add	r3, r2
90006906:	3384      	adds	r3, #132	@ 0x84
90006908:	685b      	ldr	r3, [r3, #4]
9000690a:	68fa      	ldr	r2, [r7, #12]
9000690c:	6812      	ldr	r2, [r2, #0]
9000690e:	4611      	mov	r1, r2
90006910:	687a      	ldr	r2, [r7, #4]
90006912:	01d2      	lsls	r2, r2, #7
90006914:	440a      	add	r2, r1
90006916:	3284      	adds	r2, #132	@ 0x84
90006918:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
9000691c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000691e:	68bb      	ldr	r3, [r7, #8]
90006920:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006922:	68fb      	ldr	r3, [r7, #12]
90006924:	681b      	ldr	r3, [r3, #0]
90006926:	68db      	ldr	r3, [r3, #12]
90006928:	0c1b      	lsrs	r3, r3, #16
9000692a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000692e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006930:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006932:	68fb      	ldr	r3, [r7, #12]
90006934:	681b      	ldr	r3, [r3, #0]
90006936:	4619      	mov	r1, r3
90006938:	687b      	ldr	r3, [r7, #4]
9000693a:	01db      	lsls	r3, r3, #7
9000693c:	440b      	add	r3, r1
9000693e:	3384      	adds	r3, #132	@ 0x84
90006940:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006942:	69fb      	ldr	r3, [r7, #28]
90006944:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006946:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006948:	68bb      	ldr	r3, [r7, #8]
9000694a:	68da      	ldr	r2, [r3, #12]
9000694c:	68fb      	ldr	r3, [r7, #12]
9000694e:	681b      	ldr	r3, [r3, #0]
90006950:	68db      	ldr	r3, [r3, #12]
90006952:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006956:	4413      	add	r3, r2
90006958:	041b      	lsls	r3, r3, #16
9000695a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000695c:	68fb      	ldr	r3, [r7, #12]
9000695e:	681b      	ldr	r3, [r3, #0]
90006960:	461a      	mov	r2, r3
90006962:	687b      	ldr	r3, [r7, #4]
90006964:	01db      	lsls	r3, r3, #7
90006966:	4413      	add	r3, r2
90006968:	3384      	adds	r3, #132	@ 0x84
9000696a:	689b      	ldr	r3, [r3, #8]
9000696c:	68fa      	ldr	r2, [r7, #12]
9000696e:	6812      	ldr	r2, [r2, #0]
90006970:	4611      	mov	r1, r2
90006972:	687a      	ldr	r2, [r7, #4]
90006974:	01d2      	lsls	r2, r2, #7
90006976:	440a      	add	r2, r1
90006978:	3284      	adds	r2, #132	@ 0x84
9000697a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
9000697e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90006980:	68bb      	ldr	r3, [r7, #8]
90006982:	689a      	ldr	r2, [r3, #8]
90006984:	68fb      	ldr	r3, [r7, #12]
90006986:	681b      	ldr	r3, [r3, #0]
90006988:	68db      	ldr	r3, [r3, #12]
9000698a:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000698e:	4413      	add	r3, r2
90006990:	1c5a      	adds	r2, r3, #1
90006992:	68fb      	ldr	r3, [r7, #12]
90006994:	681b      	ldr	r3, [r3, #0]
90006996:	4619      	mov	r1, r3
90006998:	687b      	ldr	r3, [r7, #4]
9000699a:	01db      	lsls	r3, r3, #7
9000699c:	440b      	add	r3, r1
9000699e:	3384      	adds	r3, #132	@ 0x84
900069a0:	4619      	mov	r1, r3
900069a2:	69fb      	ldr	r3, [r7, #28]
900069a4:	4313      	orrs	r3, r2
900069a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900069a8:	68fb      	ldr	r3, [r7, #12]
900069aa:	681b      	ldr	r3, [r3, #0]
900069ac:	461a      	mov	r2, r3
900069ae:	687b      	ldr	r3, [r7, #4]
900069b0:	01db      	lsls	r3, r3, #7
900069b2:	4413      	add	r3, r2
900069b4:	3384      	adds	r3, #132	@ 0x84
900069b6:	691b      	ldr	r3, [r3, #16]
900069b8:	68fa      	ldr	r2, [r7, #12]
900069ba:	6812      	ldr	r2, [r2, #0]
900069bc:	4611      	mov	r1, r2
900069be:	687a      	ldr	r2, [r7, #4]
900069c0:	01d2      	lsls	r2, r2, #7
900069c2:	440a      	add	r2, r1
900069c4:	3284      	adds	r2, #132	@ 0x84
900069c6:	f023 0307 	bic.w	r3, r3, #7
900069ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900069cc:	68fb      	ldr	r3, [r7, #12]
900069ce:	681b      	ldr	r3, [r3, #0]
900069d0:	461a      	mov	r2, r3
900069d2:	687b      	ldr	r3, [r7, #4]
900069d4:	01db      	lsls	r3, r3, #7
900069d6:	4413      	add	r3, r2
900069d8:	3384      	adds	r3, #132	@ 0x84
900069da:	461a      	mov	r2, r3
900069dc:	68bb      	ldr	r3, [r7, #8]
900069de:	691b      	ldr	r3, [r3, #16]
900069e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900069e2:	68bb      	ldr	r3, [r7, #8]
900069e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
900069e8:	021b      	lsls	r3, r3, #8
900069ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900069ec:	68bb      	ldr	r3, [r7, #8]
900069ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
900069f2:	041b      	lsls	r3, r3, #16
900069f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900069f6:	68bb      	ldr	r3, [r7, #8]
900069f8:	699b      	ldr	r3, [r3, #24]
900069fa:	061b      	lsls	r3, r3, #24
900069fc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
900069fe:	68bb      	ldr	r3, [r7, #8]
90006a00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90006a04:	461a      	mov	r2, r3
90006a06:	69fb      	ldr	r3, [r7, #28]
90006a08:	431a      	orrs	r2, r3
90006a0a:	69bb      	ldr	r3, [r7, #24]
90006a0c:	431a      	orrs	r2, r3
90006a0e:	68fb      	ldr	r3, [r7, #12]
90006a10:	681b      	ldr	r3, [r3, #0]
90006a12:	4619      	mov	r1, r3
90006a14:	687b      	ldr	r3, [r7, #4]
90006a16:	01db      	lsls	r3, r3, #7
90006a18:	440b      	add	r3, r1
90006a1a:	3384      	adds	r3, #132	@ 0x84
90006a1c:	4619      	mov	r1, r3
90006a1e:	697b      	ldr	r3, [r7, #20]
90006a20:	4313      	orrs	r3, r2
90006a22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006a24:	68fb      	ldr	r3, [r7, #12]
90006a26:	681b      	ldr	r3, [r3, #0]
90006a28:	461a      	mov	r2, r3
90006a2a:	687b      	ldr	r3, [r7, #4]
90006a2c:	01db      	lsls	r3, r3, #7
90006a2e:	4413      	add	r3, r2
90006a30:	3384      	adds	r3, #132	@ 0x84
90006a32:	695b      	ldr	r3, [r3, #20]
90006a34:	68fa      	ldr	r2, [r7, #12]
90006a36:	6812      	ldr	r2, [r2, #0]
90006a38:	4611      	mov	r1, r2
90006a3a:	687a      	ldr	r2, [r7, #4]
90006a3c:	01d2      	lsls	r2, r2, #7
90006a3e:	440a      	add	r2, r1
90006a40:	3284      	adds	r2, #132	@ 0x84
90006a42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90006a46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006a48:	68fb      	ldr	r3, [r7, #12]
90006a4a:	681b      	ldr	r3, [r3, #0]
90006a4c:	461a      	mov	r2, r3
90006a4e:	687b      	ldr	r3, [r7, #4]
90006a50:	01db      	lsls	r3, r3, #7
90006a52:	4413      	add	r3, r2
90006a54:	3384      	adds	r3, #132	@ 0x84
90006a56:	461a      	mov	r2, r3
90006a58:	68bb      	ldr	r3, [r7, #8]
90006a5a:	695b      	ldr	r3, [r3, #20]
90006a5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90006a5e:	68fb      	ldr	r3, [r7, #12]
90006a60:	681b      	ldr	r3, [r3, #0]
90006a62:	461a      	mov	r2, r3
90006a64:	687b      	ldr	r3, [r7, #4]
90006a66:	01db      	lsls	r3, r3, #7
90006a68:	4413      	add	r3, r2
90006a6a:	3384      	adds	r3, #132	@ 0x84
90006a6c:	69da      	ldr	r2, [r3, #28]
90006a6e:	68fb      	ldr	r3, [r7, #12]
90006a70:	681b      	ldr	r3, [r3, #0]
90006a72:	4619      	mov	r1, r3
90006a74:	687b      	ldr	r3, [r7, #4]
90006a76:	01db      	lsls	r3, r3, #7
90006a78:	440b      	add	r3, r1
90006a7a:	3384      	adds	r3, #132	@ 0x84
90006a7c:	4619      	mov	r1, r3
90006a7e:	4b4f      	ldr	r3, [pc, #316]	@ (90006bbc <LTDC_SetConfig+0x2e4>)
90006a80:	4013      	ands	r3, r2
90006a82:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006a84:	68bb      	ldr	r3, [r7, #8]
90006a86:	69da      	ldr	r2, [r3, #28]
90006a88:	68bb      	ldr	r3, [r7, #8]
90006a8a:	6a1b      	ldr	r3, [r3, #32]
90006a8c:	68f9      	ldr	r1, [r7, #12]
90006a8e:	6809      	ldr	r1, [r1, #0]
90006a90:	4608      	mov	r0, r1
90006a92:	6879      	ldr	r1, [r7, #4]
90006a94:	01c9      	lsls	r1, r1, #7
90006a96:	4401      	add	r1, r0
90006a98:	3184      	adds	r1, #132	@ 0x84
90006a9a:	4313      	orrs	r3, r2
90006a9c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90006a9e:	68fb      	ldr	r3, [r7, #12]
90006aa0:	681b      	ldr	r3, [r3, #0]
90006aa2:	461a      	mov	r2, r3
90006aa4:	687b      	ldr	r3, [r7, #4]
90006aa6:	01db      	lsls	r3, r3, #7
90006aa8:	4413      	add	r3, r2
90006aaa:	3384      	adds	r3, #132	@ 0x84
90006aac:	461a      	mov	r2, r3
90006aae:	68bb      	ldr	r3, [r7, #8]
90006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006ab2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006ab4:	68bb      	ldr	r3, [r7, #8]
90006ab6:	691b      	ldr	r3, [r3, #16]
90006ab8:	2b00      	cmp	r3, #0
90006aba:	d102      	bne.n	90006ac2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006abc:	2304      	movs	r3, #4
90006abe:	61fb      	str	r3, [r7, #28]
90006ac0:	e01b      	b.n	90006afa <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006ac2:	68bb      	ldr	r3, [r7, #8]
90006ac4:	691b      	ldr	r3, [r3, #16]
90006ac6:	2b01      	cmp	r3, #1
90006ac8:	d102      	bne.n	90006ad0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
90006aca:	2303      	movs	r3, #3
90006acc:	61fb      	str	r3, [r7, #28]
90006ace:	e014      	b.n	90006afa <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006ad0:	68bb      	ldr	r3, [r7, #8]
90006ad2:	691b      	ldr	r3, [r3, #16]
90006ad4:	2b04      	cmp	r3, #4
90006ad6:	d00b      	beq.n	90006af0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006ad8:	68bb      	ldr	r3, [r7, #8]
90006ada:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006adc:	2b02      	cmp	r3, #2
90006ade:	d007      	beq.n	90006af0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006ae0:	68bb      	ldr	r3, [r7, #8]
90006ae2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006ae4:	2b03      	cmp	r3, #3
90006ae6:	d003      	beq.n	90006af0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90006ae8:	68bb      	ldr	r3, [r7, #8]
90006aea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006aec:	2b07      	cmp	r3, #7
90006aee:	d102      	bne.n	90006af6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90006af0:	2302      	movs	r3, #2
90006af2:	61fb      	str	r3, [r7, #28]
90006af4:	e001      	b.n	90006afa <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
90006af6:	2301      	movs	r3, #1
90006af8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90006afa:	68fb      	ldr	r3, [r7, #12]
90006afc:	681b      	ldr	r3, [r3, #0]
90006afe:	461a      	mov	r2, r3
90006b00:	687b      	ldr	r3, [r7, #4]
90006b02:	01db      	lsls	r3, r3, #7
90006b04:	4413      	add	r3, r2
90006b06:	3384      	adds	r3, #132	@ 0x84
90006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006b0a:	68fa      	ldr	r2, [r7, #12]
90006b0c:	6812      	ldr	r2, [r2, #0]
90006b0e:	4611      	mov	r1, r2
90006b10:	687a      	ldr	r2, [r7, #4]
90006b12:	01d2      	lsls	r2, r2, #7
90006b14:	440a      	add	r2, r1
90006b16:	3284      	adds	r2, #132	@ 0x84
90006b18:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006b1e:	68bb      	ldr	r3, [r7, #8]
90006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006b22:	69fa      	ldr	r2, [r7, #28]
90006b24:	fb02 f303 	mul.w	r3, r2, r3
90006b28:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90006b2a:	68bb      	ldr	r3, [r7, #8]
90006b2c:	6859      	ldr	r1, [r3, #4]
90006b2e:	68bb      	ldr	r3, [r7, #8]
90006b30:	681b      	ldr	r3, [r3, #0]
90006b32:	1acb      	subs	r3, r1, r3
90006b34:	69f9      	ldr	r1, [r7, #28]
90006b36:	fb01 f303 	mul.w	r3, r1, r3
90006b3a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006b3c:	68f9      	ldr	r1, [r7, #12]
90006b3e:	6809      	ldr	r1, [r1, #0]
90006b40:	4608      	mov	r0, r1
90006b42:	6879      	ldr	r1, [r7, #4]
90006b44:	01c9      	lsls	r1, r1, #7
90006b46:	4401      	add	r1, r0
90006b48:	3184      	adds	r1, #132	@ 0x84
90006b4a:	4313      	orrs	r3, r2
90006b4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90006b4e:	68fb      	ldr	r3, [r7, #12]
90006b50:	681b      	ldr	r3, [r3, #0]
90006b52:	461a      	mov	r2, r3
90006b54:	687b      	ldr	r3, [r7, #4]
90006b56:	01db      	lsls	r3, r3, #7
90006b58:	4413      	add	r3, r2
90006b5a:	3384      	adds	r3, #132	@ 0x84
90006b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90006b5e:	68fb      	ldr	r3, [r7, #12]
90006b60:	681b      	ldr	r3, [r3, #0]
90006b62:	4619      	mov	r1, r3
90006b64:	687b      	ldr	r3, [r7, #4]
90006b66:	01db      	lsls	r3, r3, #7
90006b68:	440b      	add	r3, r1
90006b6a:	3384      	adds	r3, #132	@ 0x84
90006b6c:	4619      	mov	r1, r3
90006b6e:	4b14      	ldr	r3, [pc, #80]	@ (90006bc0 <LTDC_SetConfig+0x2e8>)
90006b70:	4013      	ands	r3, r2
90006b72:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006b74:	68fb      	ldr	r3, [r7, #12]
90006b76:	681b      	ldr	r3, [r3, #0]
90006b78:	461a      	mov	r2, r3
90006b7a:	687b      	ldr	r3, [r7, #4]
90006b7c:	01db      	lsls	r3, r3, #7
90006b7e:	4413      	add	r3, r2
90006b80:	3384      	adds	r3, #132	@ 0x84
90006b82:	461a      	mov	r2, r3
90006b84:	68bb      	ldr	r3, [r7, #8]
90006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006b88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90006b8a:	68fb      	ldr	r3, [r7, #12]
90006b8c:	681b      	ldr	r3, [r3, #0]
90006b8e:	461a      	mov	r2, r3
90006b90:	687b      	ldr	r3, [r7, #4]
90006b92:	01db      	lsls	r3, r3, #7
90006b94:	4413      	add	r3, r2
90006b96:	3384      	adds	r3, #132	@ 0x84
90006b98:	681b      	ldr	r3, [r3, #0]
90006b9a:	68fa      	ldr	r2, [r7, #12]
90006b9c:	6812      	ldr	r2, [r2, #0]
90006b9e:	4611      	mov	r1, r2
90006ba0:	687a      	ldr	r2, [r7, #4]
90006ba2:	01d2      	lsls	r2, r2, #7
90006ba4:	440a      	add	r2, r1
90006ba6:	3284      	adds	r2, #132	@ 0x84
90006ba8:	f043 0301 	orr.w	r3, r3, #1
90006bac:	6013      	str	r3, [r2, #0]
}
90006bae:	bf00      	nop
90006bb0:	3724      	adds	r7, #36	@ 0x24
90006bb2:	46bd      	mov	sp, r7
90006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
90006bb8:	4770      	bx	lr
90006bba:	bf00      	nop
90006bbc:	fffff8f8 	.word	0xfffff8f8
90006bc0:	fffff800 	.word	0xfffff800

90006bc4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006bc4:	b580      	push	{r7, lr}
90006bc6:	b084      	sub	sp, #16
90006bc8:	af00      	add	r7, sp, #0
90006bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006bcc:	f7fc fa1e 	bl	9000300c <HAL_GetTick>
90006bd0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006bd2:	687b      	ldr	r3, [r7, #4]
90006bd4:	2b00      	cmp	r3, #0
90006bd6:	d101      	bne.n	90006bdc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
90006bd8:	2301      	movs	r3, #1
90006bda:	e03b      	b.n	90006c54 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006bdc:	687b      	ldr	r3, [r7, #4]
90006bde:	2200      	movs	r2, #0
90006be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006be4:	687b      	ldr	r3, [r7, #4]
90006be6:	2202      	movs	r2, #2
90006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006bec:	687b      	ldr	r3, [r7, #4]
90006bee:	681b      	ldr	r3, [r3, #0]
90006bf0:	68da      	ldr	r2, [r3, #12]
90006bf2:	687b      	ldr	r3, [r7, #4]
90006bf4:	681b      	ldr	r3, [r3, #0]
90006bf6:	f022 0201 	bic.w	r2, r2, #1
90006bfa:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006bfc:	e00f      	b.n	90006c1e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006bfe:	f7fc fa05 	bl	9000300c <HAL_GetTick>
90006c02:	4602      	mov	r2, r0
90006c04:	68fb      	ldr	r3, [r7, #12]
90006c06:	1ad3      	subs	r3, r2, r3
90006c08:	2b05      	cmp	r3, #5
90006c0a:	d908      	bls.n	90006c1e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006c0c:	687b      	ldr	r3, [r7, #4]
90006c0e:	2240      	movs	r2, #64	@ 0x40
90006c10:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006c12:	687b      	ldr	r3, [r7, #4]
90006c14:	2203      	movs	r2, #3
90006c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90006c1a:	2301      	movs	r3, #1
90006c1c:	e01a      	b.n	90006c54 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006c1e:	687b      	ldr	r3, [r7, #4]
90006c20:	681b      	ldr	r3, [r3, #0]
90006c22:	68db      	ldr	r3, [r3, #12]
90006c24:	f003 0301 	and.w	r3, r3, #1
90006c28:	2b00      	cmp	r3, #0
90006c2a:	d1e8      	bne.n	90006bfe <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006c2c:	6878      	ldr	r0, [r7, #4]
90006c2e:	f000 f86d 	bl	90006d0c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006c32:	687b      	ldr	r3, [r7, #4]
90006c34:	2200      	movs	r2, #0
90006c36:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006c38:	687b      	ldr	r3, [r7, #4]
90006c3a:	2200      	movs	r2, #0
90006c3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006c3e:	687b      	ldr	r3, [r7, #4]
90006c40:	2200      	movs	r2, #0
90006c42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006c44:	687b      	ldr	r3, [r7, #4]
90006c46:	2200      	movs	r2, #0
90006c48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
90006c4a:	687b      	ldr	r3, [r7, #4]
90006c4c:	2201      	movs	r2, #1
90006c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006c52:	2300      	movs	r3, #0
}
90006c54:	4618      	mov	r0, r3
90006c56:	3710      	adds	r7, #16
90006c58:	46bd      	mov	sp, r7
90006c5a:	bd80      	pop	{r7, pc}

90006c5c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90006c5c:	b480      	push	{r7}
90006c5e:	b083      	sub	sp, #12
90006c60:	af00      	add	r7, sp, #0
90006c62:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006c64:	687b      	ldr	r3, [r7, #4]
90006c66:	2b00      	cmp	r3, #0
90006c68:	d101      	bne.n	90006c6e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
90006c6a:	2301      	movs	r3, #1
90006c6c:	e048      	b.n	90006d00 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90006c6e:	687b      	ldr	r3, [r7, #4]
90006c70:	681b      	ldr	r3, [r3, #0]
90006c72:	68da      	ldr	r2, [r3, #12]
90006c74:	687b      	ldr	r3, [r7, #4]
90006c76:	681b      	ldr	r3, [r3, #0]
90006c78:	f022 0201 	bic.w	r2, r2, #1
90006c7c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90006c7e:	687b      	ldr	r3, [r7, #4]
90006c80:	681b      	ldr	r3, [r3, #0]
90006c82:	2200      	movs	r2, #0
90006c84:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006c86:	687b      	ldr	r3, [r7, #4]
90006c88:	681b      	ldr	r3, [r3, #0]
90006c8a:	2200      	movs	r2, #0
90006c8c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006c8e:	687b      	ldr	r3, [r7, #4]
90006c90:	681b      	ldr	r3, [r3, #0]
90006c92:	2200      	movs	r2, #0
90006c94:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006c96:	687b      	ldr	r3, [r7, #4]
90006c98:	681b      	ldr	r3, [r3, #0]
90006c9a:	2200      	movs	r2, #0
90006c9c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006c9e:	687b      	ldr	r3, [r7, #4]
90006ca0:	681b      	ldr	r3, [r3, #0]
90006ca2:	2200      	movs	r2, #0
90006ca4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006ca6:	687b      	ldr	r3, [r7, #4]
90006ca8:	681b      	ldr	r3, [r3, #0]
90006caa:	2200      	movs	r2, #0
90006cac:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006cae:	687b      	ldr	r3, [r7, #4]
90006cb0:	681b      	ldr	r3, [r3, #0]
90006cb2:	2200      	movs	r2, #0
90006cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006cb6:	687b      	ldr	r3, [r7, #4]
90006cb8:	681b      	ldr	r3, [r3, #0]
90006cba:	2200      	movs	r2, #0
90006cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006cbe:	687b      	ldr	r3, [r7, #4]
90006cc0:	681b      	ldr	r3, [r3, #0]
90006cc2:	2200      	movs	r2, #0
90006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006cc6:	687b      	ldr	r3, [r7, #4]
90006cc8:	681b      	ldr	r3, [r3, #0]
90006cca:	2200      	movs	r2, #0
90006ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006cce:	687b      	ldr	r3, [r7, #4]
90006cd0:	681b      	ldr	r3, [r3, #0]
90006cd2:	221f      	movs	r2, #31
90006cd4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006cd6:	687b      	ldr	r3, [r7, #4]
90006cd8:	2200      	movs	r2, #0
90006cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006cdc:	687b      	ldr	r3, [r7, #4]
90006cde:	2200      	movs	r2, #0
90006ce0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006ce2:	687b      	ldr	r3, [r7, #4]
90006ce4:	2200      	movs	r2, #0
90006ce6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006ce8:	687b      	ldr	r3, [r7, #4]
90006cea:	2200      	movs	r2, #0
90006cec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006cee:	687b      	ldr	r3, [r7, #4]
90006cf0:	2200      	movs	r2, #0
90006cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006cf6:	687b      	ldr	r3, [r7, #4]
90006cf8:	2200      	movs	r2, #0
90006cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006cfe:	2300      	movs	r3, #0
}
90006d00:	4618      	mov	r0, r3
90006d02:	370c      	adds	r7, #12
90006d04:	46bd      	mov	sp, r7
90006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
90006d0a:	4770      	bx	lr

90006d0c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006d0c:	b480      	push	{r7}
90006d0e:	b085      	sub	sp, #20
90006d10:	af00      	add	r7, sp, #0
90006d12:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006d14:	687b      	ldr	r3, [r7, #4]
90006d16:	68d9      	ldr	r1, [r3, #12]
90006d18:	687b      	ldr	r3, [r7, #4]
90006d1a:	691a      	ldr	r2, [r3, #16]
90006d1c:	687b      	ldr	r3, [r7, #4]
90006d1e:	681b      	ldr	r3, [r3, #0]
90006d20:	430a      	orrs	r2, r1
90006d22:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006d24:	687b      	ldr	r3, [r7, #4]
90006d26:	695a      	ldr	r2, [r3, #20]
90006d28:	687b      	ldr	r3, [r7, #4]
90006d2a:	699b      	ldr	r3, [r3, #24]
90006d2c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006d2e:	687b      	ldr	r3, [r7, #4]
90006d30:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006d32:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006d34:	687b      	ldr	r3, [r7, #4]
90006d36:	6a1b      	ldr	r3, [r3, #32]
90006d38:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006d3a:	687b      	ldr	r3, [r7, #4]
90006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006d3e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006d40:	687b      	ldr	r3, [r7, #4]
90006d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006d44:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006d46:	687b      	ldr	r3, [r7, #4]
90006d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006d4a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006d4c:	687b      	ldr	r3, [r7, #4]
90006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006d50:	3b01      	subs	r3, #1
90006d52:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006d54:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006d58:	687b      	ldr	r3, [r7, #4]
90006d5a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006d5c:	687b      	ldr	r3, [r7, #4]
90006d5e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006d60:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006d62:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006d64:	687b      	ldr	r3, [r7, #4]
90006d66:	685b      	ldr	r3, [r3, #4]
90006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006d6c:	d107      	bne.n	90006d7e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006d6e:	687b      	ldr	r3, [r7, #4]
90006d70:	681b      	ldr	r3, [r3, #0]
90006d72:	691a      	ldr	r2, [r3, #16]
90006d74:	687b      	ldr	r3, [r7, #4]
90006d76:	681b      	ldr	r3, [r3, #0]
90006d78:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006d7c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006d7e:	687b      	ldr	r3, [r7, #4]
90006d80:	681b      	ldr	r3, [r3, #0]
90006d82:	2200      	movs	r2, #0
90006d84:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006d86:	687b      	ldr	r3, [r7, #4]
90006d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006d8a:	2b00      	cmp	r3, #0
90006d8c:	da11      	bge.n	90006db2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006d8e:	687b      	ldr	r3, [r7, #4]
90006d90:	681b      	ldr	r3, [r3, #0]
90006d92:	695a      	ldr	r2, [r3, #20]
90006d94:	687b      	ldr	r3, [r7, #4]
90006d96:	681b      	ldr	r3, [r3, #0]
90006d98:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006d9c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006d9e:	687b      	ldr	r3, [r7, #4]
90006da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006da2:	425b      	negs	r3, r3
90006da4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006da6:	687b      	ldr	r3, [r7, #4]
90006da8:	681b      	ldr	r3, [r3, #0]
90006daa:	68fa      	ldr	r2, [r7, #12]
90006dac:	b292      	uxth	r2, r2
90006dae:	621a      	str	r2, [r3, #32]
90006db0:	e006      	b.n	90006dc0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006db2:	687b      	ldr	r3, [r7, #4]
90006db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006db6:	461a      	mov	r2, r3
90006db8:	687b      	ldr	r3, [r7, #4]
90006dba:	681b      	ldr	r3, [r3, #0]
90006dbc:	b292      	uxth	r2, r2
90006dbe:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006dc0:	687b      	ldr	r3, [r7, #4]
90006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006dc4:	2b00      	cmp	r3, #0
90006dc6:	da15      	bge.n	90006df4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006dc8:	687b      	ldr	r3, [r7, #4]
90006dca:	681b      	ldr	r3, [r3, #0]
90006dcc:	695a      	ldr	r2, [r3, #20]
90006dce:	687b      	ldr	r3, [r7, #4]
90006dd0:	681b      	ldr	r3, [r3, #0]
90006dd2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006dd6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006dd8:	687b      	ldr	r3, [r7, #4]
90006dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006ddc:	425b      	negs	r3, r3
90006dde:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006de0:	687b      	ldr	r3, [r7, #4]
90006de2:	681b      	ldr	r3, [r3, #0]
90006de4:	6a19      	ldr	r1, [r3, #32]
90006de6:	68fb      	ldr	r3, [r7, #12]
90006de8:	041a      	lsls	r2, r3, #16
90006dea:	687b      	ldr	r3, [r7, #4]
90006dec:	681b      	ldr	r3, [r3, #0]
90006dee:	430a      	orrs	r2, r1
90006df0:	621a      	str	r2, [r3, #32]
90006df2:	e009      	b.n	90006e08 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006df4:	687b      	ldr	r3, [r7, #4]
90006df6:	681b      	ldr	r3, [r3, #0]
90006df8:	6a19      	ldr	r1, [r3, #32]
90006dfa:	687b      	ldr	r3, [r7, #4]
90006dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006dfe:	041a      	lsls	r2, r3, #16
90006e00:	687b      	ldr	r3, [r7, #4]
90006e02:	681b      	ldr	r3, [r3, #0]
90006e04:	430a      	orrs	r2, r1
90006e06:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006e08:	687b      	ldr	r3, [r7, #4]
90006e0a:	685b      	ldr	r3, [r3, #4]
90006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006e10:	d006      	beq.n	90006e20 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006e12:	687b      	ldr	r3, [r7, #4]
90006e14:	685a      	ldr	r2, [r3, #4]
90006e16:	687b      	ldr	r3, [r7, #4]
90006e18:	681b      	ldr	r3, [r3, #0]
90006e1a:	b2d2      	uxtb	r2, r2
90006e1c:	629a      	str	r2, [r3, #40]	@ 0x28
90006e1e:	e003      	b.n	90006e28 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006e20:	687b      	ldr	r3, [r7, #4]
90006e22:	681b      	ldr	r3, [r3, #0]
90006e24:	2200      	movs	r2, #0
90006e26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006e28:	687b      	ldr	r3, [r7, #4]
90006e2a:	681b      	ldr	r3, [r3, #0]
90006e2c:	2200      	movs	r2, #0
90006e2e:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006e30:	bf00      	nop
90006e32:	3714      	adds	r7, #20
90006e34:	46bd      	mov	sp, r7
90006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e3a:	4770      	bx	lr

90006e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006e3c:	b580      	push	{r7, lr}
90006e3e:	b08c      	sub	sp, #48	@ 0x30
90006e40:	af00      	add	r7, sp, #0
90006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006e44:	687b      	ldr	r3, [r7, #4]
90006e46:	2b00      	cmp	r3, #0
90006e48:	d102      	bne.n	90006e50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006e4a:	2301      	movs	r3, #1
90006e4c:	f000 bc48 	b.w	900076e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006e50:	687b      	ldr	r3, [r7, #4]
90006e52:	681b      	ldr	r3, [r3, #0]
90006e54:	f003 0301 	and.w	r3, r3, #1
90006e58:	2b00      	cmp	r3, #0
90006e5a:	f000 8088 	beq.w	90006f6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006e5e:	4b99      	ldr	r3, [pc, #612]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006e60:	691b      	ldr	r3, [r3, #16]
90006e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006e68:	4b96      	ldr	r3, [pc, #600]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006e70:	2b10      	cmp	r3, #16
90006e72:	d007      	beq.n	90006e84 <HAL_RCC_OscConfig+0x48>
90006e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006e76:	2b18      	cmp	r3, #24
90006e78:	d111      	bne.n	90006e9e <HAL_RCC_OscConfig+0x62>
90006e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006e7c:	f003 0303 	and.w	r3, r3, #3
90006e80:	2b02      	cmp	r3, #2
90006e82:	d10c      	bne.n	90006e9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006e84:	4b8f      	ldr	r3, [pc, #572]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006e86:	681b      	ldr	r3, [r3, #0]
90006e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006e8c:	2b00      	cmp	r3, #0
90006e8e:	d06d      	beq.n	90006f6c <HAL_RCC_OscConfig+0x130>
90006e90:	687b      	ldr	r3, [r7, #4]
90006e92:	685b      	ldr	r3, [r3, #4]
90006e94:	2b00      	cmp	r3, #0
90006e96:	d169      	bne.n	90006f6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006e98:	2301      	movs	r3, #1
90006e9a:	f000 bc21 	b.w	900076e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006e9e:	687b      	ldr	r3, [r7, #4]
90006ea0:	685b      	ldr	r3, [r3, #4]
90006ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006ea6:	d106      	bne.n	90006eb6 <HAL_RCC_OscConfig+0x7a>
90006ea8:	4b86      	ldr	r3, [pc, #536]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006eaa:	681b      	ldr	r3, [r3, #0]
90006eac:	4a85      	ldr	r2, [pc, #532]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006eb2:	6013      	str	r3, [r2, #0]
90006eb4:	e02e      	b.n	90006f14 <HAL_RCC_OscConfig+0xd8>
90006eb6:	687b      	ldr	r3, [r7, #4]
90006eb8:	685b      	ldr	r3, [r3, #4]
90006eba:	2b00      	cmp	r3, #0
90006ebc:	d10c      	bne.n	90006ed8 <HAL_RCC_OscConfig+0x9c>
90006ebe:	4b81      	ldr	r3, [pc, #516]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ec0:	681b      	ldr	r3, [r3, #0]
90006ec2:	4a80      	ldr	r2, [pc, #512]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006ec8:	6013      	str	r3, [r2, #0]
90006eca:	4b7e      	ldr	r3, [pc, #504]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ecc:	681b      	ldr	r3, [r3, #0]
90006ece:	4a7d      	ldr	r2, [pc, #500]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006ed4:	6013      	str	r3, [r2, #0]
90006ed6:	e01d      	b.n	90006f14 <HAL_RCC_OscConfig+0xd8>
90006ed8:	687b      	ldr	r3, [r7, #4]
90006eda:	685b      	ldr	r3, [r3, #4]
90006edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006ee0:	d10c      	bne.n	90006efc <HAL_RCC_OscConfig+0xc0>
90006ee2:	4b78      	ldr	r3, [pc, #480]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ee4:	681b      	ldr	r3, [r3, #0]
90006ee6:	4a77      	ldr	r2, [pc, #476]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006eec:	6013      	str	r3, [r2, #0]
90006eee:	4b75      	ldr	r3, [pc, #468]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ef0:	681b      	ldr	r3, [r3, #0]
90006ef2:	4a74      	ldr	r2, [pc, #464]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006ef8:	6013      	str	r3, [r2, #0]
90006efa:	e00b      	b.n	90006f14 <HAL_RCC_OscConfig+0xd8>
90006efc:	4b71      	ldr	r3, [pc, #452]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006efe:	681b      	ldr	r3, [r3, #0]
90006f00:	4a70      	ldr	r2, [pc, #448]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006f06:	6013      	str	r3, [r2, #0]
90006f08:	4b6e      	ldr	r3, [pc, #440]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006f0a:	681b      	ldr	r3, [r3, #0]
90006f0c:	4a6d      	ldr	r2, [pc, #436]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006f14:	687b      	ldr	r3, [r7, #4]
90006f16:	685b      	ldr	r3, [r3, #4]
90006f18:	2b00      	cmp	r3, #0
90006f1a:	d013      	beq.n	90006f44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f1c:	f7fc f876 	bl	9000300c <HAL_GetTick>
90006f20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006f22:	e008      	b.n	90006f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006f24:	f7fc f872 	bl	9000300c <HAL_GetTick>
90006f28:	4602      	mov	r2, r0
90006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f2c:	1ad3      	subs	r3, r2, r3
90006f2e:	2b64      	cmp	r3, #100	@ 0x64
90006f30:	d901      	bls.n	90006f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006f32:	2303      	movs	r3, #3
90006f34:	e3d4      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006f36:	4b63      	ldr	r3, [pc, #396]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006f38:	681b      	ldr	r3, [r3, #0]
90006f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006f3e:	2b00      	cmp	r3, #0
90006f40:	d0f0      	beq.n	90006f24 <HAL_RCC_OscConfig+0xe8>
90006f42:	e014      	b.n	90006f6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f44:	f7fc f862 	bl	9000300c <HAL_GetTick>
90006f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006f4a:	e008      	b.n	90006f5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006f4c:	f7fc f85e 	bl	9000300c <HAL_GetTick>
90006f50:	4602      	mov	r2, r0
90006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f54:	1ad3      	subs	r3, r2, r3
90006f56:	2b64      	cmp	r3, #100	@ 0x64
90006f58:	d901      	bls.n	90006f5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006f5a:	2303      	movs	r3, #3
90006f5c:	e3c0      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006f5e:	4b59      	ldr	r3, [pc, #356]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006f60:	681b      	ldr	r3, [r3, #0]
90006f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006f66:	2b00      	cmp	r3, #0
90006f68:	d1f0      	bne.n	90006f4c <HAL_RCC_OscConfig+0x110>
90006f6a:	e000      	b.n	90006f6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006f6e:	687b      	ldr	r3, [r7, #4]
90006f70:	681b      	ldr	r3, [r3, #0]
90006f72:	f003 0302 	and.w	r3, r3, #2
90006f76:	2b00      	cmp	r3, #0
90006f78:	f000 80ca 	beq.w	90007110 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006f7c:	4b51      	ldr	r3, [pc, #324]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006f7e:	691b      	ldr	r3, [r3, #16]
90006f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006f84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006f86:	4b4f      	ldr	r3, [pc, #316]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006f8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006f8c:	6a3b      	ldr	r3, [r7, #32]
90006f8e:	2b00      	cmp	r3, #0
90006f90:	d007      	beq.n	90006fa2 <HAL_RCC_OscConfig+0x166>
90006f92:	6a3b      	ldr	r3, [r7, #32]
90006f94:	2b18      	cmp	r3, #24
90006f96:	d156      	bne.n	90007046 <HAL_RCC_OscConfig+0x20a>
90006f98:	69fb      	ldr	r3, [r7, #28]
90006f9a:	f003 0303 	and.w	r3, r3, #3
90006f9e:	2b00      	cmp	r3, #0
90006fa0:	d151      	bne.n	90007046 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006fa2:	4b48      	ldr	r3, [pc, #288]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006fa4:	681b      	ldr	r3, [r3, #0]
90006fa6:	f003 0304 	and.w	r3, r3, #4
90006faa:	2b00      	cmp	r3, #0
90006fac:	d005      	beq.n	90006fba <HAL_RCC_OscConfig+0x17e>
90006fae:	687b      	ldr	r3, [r7, #4]
90006fb0:	68db      	ldr	r3, [r3, #12]
90006fb2:	2b00      	cmp	r3, #0
90006fb4:	d101      	bne.n	90006fba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006fb6:	2301      	movs	r3, #1
90006fb8:	e392      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006fba:	4b42      	ldr	r3, [pc, #264]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006fbc:	681b      	ldr	r3, [r3, #0]
90006fbe:	f023 0219 	bic.w	r2, r3, #25
90006fc2:	687b      	ldr	r3, [r7, #4]
90006fc4:	68db      	ldr	r3, [r3, #12]
90006fc6:	493f      	ldr	r1, [pc, #252]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006fc8:	4313      	orrs	r3, r2
90006fca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006fcc:	f7fc f81e 	bl	9000300c <HAL_GetTick>
90006fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006fd2:	e008      	b.n	90006fe6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006fd4:	f7fc f81a 	bl	9000300c <HAL_GetTick>
90006fd8:	4602      	mov	r2, r0
90006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006fdc:	1ad3      	subs	r3, r2, r3
90006fde:	2b02      	cmp	r3, #2
90006fe0:	d901      	bls.n	90006fe6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006fe2:	2303      	movs	r3, #3
90006fe4:	e37c      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006fe6:	4b37      	ldr	r3, [pc, #220]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90006fe8:	681b      	ldr	r3, [r3, #0]
90006fea:	f003 0304 	and.w	r3, r3, #4
90006fee:	2b00      	cmp	r3, #0
90006ff0:	d0f0      	beq.n	90006fd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006ff2:	f7fc f817 	bl	90003024 <HAL_GetREVID>
90006ff6:	4603      	mov	r3, r0
90006ff8:	f241 0203 	movw	r2, #4099	@ 0x1003
90006ffc:	4293      	cmp	r3, r2
90006ffe:	d817      	bhi.n	90007030 <HAL_RCC_OscConfig+0x1f4>
90007000:	687b      	ldr	r3, [r7, #4]
90007002:	691b      	ldr	r3, [r3, #16]
90007004:	2b40      	cmp	r3, #64	@ 0x40
90007006:	d108      	bne.n	9000701a <HAL_RCC_OscConfig+0x1de>
90007008:	4b2e      	ldr	r3, [pc, #184]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
9000700a:	685b      	ldr	r3, [r3, #4]
9000700c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90007010:	4a2c      	ldr	r2, [pc, #176]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90007012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007016:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007018:	e07a      	b.n	90007110 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000701a:	4b2a      	ldr	r3, [pc, #168]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
9000701c:	685b      	ldr	r3, [r3, #4]
9000701e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007022:	687b      	ldr	r3, [r7, #4]
90007024:	691b      	ldr	r3, [r3, #16]
90007026:	031b      	lsls	r3, r3, #12
90007028:	4926      	ldr	r1, [pc, #152]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
9000702a:	4313      	orrs	r3, r2
9000702c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000702e:	e06f      	b.n	90007110 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007030:	4b24      	ldr	r3, [pc, #144]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90007032:	685b      	ldr	r3, [r3, #4]
90007034:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90007038:	687b      	ldr	r3, [r7, #4]
9000703a:	691b      	ldr	r3, [r3, #16]
9000703c:	061b      	lsls	r3, r3, #24
9000703e:	4921      	ldr	r1, [pc, #132]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90007040:	4313      	orrs	r3, r2
90007042:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007044:	e064      	b.n	90007110 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90007046:	687b      	ldr	r3, [r7, #4]
90007048:	68db      	ldr	r3, [r3, #12]
9000704a:	2b00      	cmp	r3, #0
9000704c:	d047      	beq.n	900070de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000704e:	4b1d      	ldr	r3, [pc, #116]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
90007050:	681b      	ldr	r3, [r3, #0]
90007052:	f023 0219 	bic.w	r2, r3, #25
90007056:	687b      	ldr	r3, [r7, #4]
90007058:	68db      	ldr	r3, [r3, #12]
9000705a:	491a      	ldr	r1, [pc, #104]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
9000705c:	4313      	orrs	r3, r2
9000705e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007060:	f7fb ffd4 	bl	9000300c <HAL_GetTick>
90007064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007066:	e008      	b.n	9000707a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007068:	f7fb ffd0 	bl	9000300c <HAL_GetTick>
9000706c:	4602      	mov	r2, r0
9000706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007070:	1ad3      	subs	r3, r2, r3
90007072:	2b02      	cmp	r3, #2
90007074:	d901      	bls.n	9000707a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90007076:	2303      	movs	r3, #3
90007078:	e332      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000707a:	4b12      	ldr	r3, [pc, #72]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
9000707c:	681b      	ldr	r3, [r3, #0]
9000707e:	f003 0304 	and.w	r3, r3, #4
90007082:	2b00      	cmp	r3, #0
90007084:	d0f0      	beq.n	90007068 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007086:	f7fb ffcd 	bl	90003024 <HAL_GetREVID>
9000708a:	4603      	mov	r3, r0
9000708c:	f241 0203 	movw	r2, #4099	@ 0x1003
90007090:	4293      	cmp	r3, r2
90007092:	d819      	bhi.n	900070c8 <HAL_RCC_OscConfig+0x28c>
90007094:	687b      	ldr	r3, [r7, #4]
90007096:	691b      	ldr	r3, [r3, #16]
90007098:	2b40      	cmp	r3, #64	@ 0x40
9000709a:	d108      	bne.n	900070ae <HAL_RCC_OscConfig+0x272>
9000709c:	4b09      	ldr	r3, [pc, #36]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
9000709e:	685b      	ldr	r3, [r3, #4]
900070a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
900070a4:	4a07      	ldr	r2, [pc, #28]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
900070a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900070aa:	6053      	str	r3, [r2, #4]
900070ac:	e030      	b.n	90007110 <HAL_RCC_OscConfig+0x2d4>
900070ae:	4b05      	ldr	r3, [pc, #20]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
900070b0:	685b      	ldr	r3, [r3, #4]
900070b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900070b6:	687b      	ldr	r3, [r7, #4]
900070b8:	691b      	ldr	r3, [r3, #16]
900070ba:	031b      	lsls	r3, r3, #12
900070bc:	4901      	ldr	r1, [pc, #4]	@ (900070c4 <HAL_RCC_OscConfig+0x288>)
900070be:	4313      	orrs	r3, r2
900070c0:	604b      	str	r3, [r1, #4]
900070c2:	e025      	b.n	90007110 <HAL_RCC_OscConfig+0x2d4>
900070c4:	58024400 	.word	0x58024400
900070c8:	4b9a      	ldr	r3, [pc, #616]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900070ca:	685b      	ldr	r3, [r3, #4]
900070cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
900070d0:	687b      	ldr	r3, [r7, #4]
900070d2:	691b      	ldr	r3, [r3, #16]
900070d4:	061b      	lsls	r3, r3, #24
900070d6:	4997      	ldr	r1, [pc, #604]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900070d8:	4313      	orrs	r3, r2
900070da:	604b      	str	r3, [r1, #4]
900070dc:	e018      	b.n	90007110 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
900070de:	4b95      	ldr	r3, [pc, #596]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900070e0:	681b      	ldr	r3, [r3, #0]
900070e2:	4a94      	ldr	r2, [pc, #592]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900070e4:	f023 0301 	bic.w	r3, r3, #1
900070e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900070ea:	f7fb ff8f 	bl	9000300c <HAL_GetTick>
900070ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
900070f0:	e008      	b.n	90007104 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900070f2:	f7fb ff8b 	bl	9000300c <HAL_GetTick>
900070f6:	4602      	mov	r2, r0
900070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070fa:	1ad3      	subs	r3, r2, r3
900070fc:	2b02      	cmp	r3, #2
900070fe:	d901      	bls.n	90007104 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90007100:	2303      	movs	r3, #3
90007102:	e2ed      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007104:	4b8b      	ldr	r3, [pc, #556]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007106:	681b      	ldr	r3, [r3, #0]
90007108:	f003 0304 	and.w	r3, r3, #4
9000710c:	2b00      	cmp	r3, #0
9000710e:	d1f0      	bne.n	900070f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90007110:	687b      	ldr	r3, [r7, #4]
90007112:	681b      	ldr	r3, [r3, #0]
90007114:	f003 0310 	and.w	r3, r3, #16
90007118:	2b00      	cmp	r3, #0
9000711a:	f000 80a9 	beq.w	90007270 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000711e:	4b85      	ldr	r3, [pc, #532]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007120:	691b      	ldr	r3, [r3, #16]
90007122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007126:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90007128:	4b82      	ldr	r3, [pc, #520]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
9000712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000712c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000712e:	69bb      	ldr	r3, [r7, #24]
90007130:	2b08      	cmp	r3, #8
90007132:	d007      	beq.n	90007144 <HAL_RCC_OscConfig+0x308>
90007134:	69bb      	ldr	r3, [r7, #24]
90007136:	2b18      	cmp	r3, #24
90007138:	d13a      	bne.n	900071b0 <HAL_RCC_OscConfig+0x374>
9000713a:	697b      	ldr	r3, [r7, #20]
9000713c:	f003 0303 	and.w	r3, r3, #3
90007140:	2b01      	cmp	r3, #1
90007142:	d135      	bne.n	900071b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007144:	4b7b      	ldr	r3, [pc, #492]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007146:	681b      	ldr	r3, [r3, #0]
90007148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000714c:	2b00      	cmp	r3, #0
9000714e:	d005      	beq.n	9000715c <HAL_RCC_OscConfig+0x320>
90007150:	687b      	ldr	r3, [r7, #4]
90007152:	69db      	ldr	r3, [r3, #28]
90007154:	2b80      	cmp	r3, #128	@ 0x80
90007156:	d001      	beq.n	9000715c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90007158:	2301      	movs	r3, #1
9000715a:	e2c1      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000715c:	f7fb ff62 	bl	90003024 <HAL_GetREVID>
90007160:	4603      	mov	r3, r0
90007162:	f241 0203 	movw	r2, #4099	@ 0x1003
90007166:	4293      	cmp	r3, r2
90007168:	d817      	bhi.n	9000719a <HAL_RCC_OscConfig+0x35e>
9000716a:	687b      	ldr	r3, [r7, #4]
9000716c:	6a1b      	ldr	r3, [r3, #32]
9000716e:	2b20      	cmp	r3, #32
90007170:	d108      	bne.n	90007184 <HAL_RCC_OscConfig+0x348>
90007172:	4b70      	ldr	r3, [pc, #448]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007174:	685b      	ldr	r3, [r3, #4]
90007176:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000717a:	4a6e      	ldr	r2, [pc, #440]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
9000717c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90007180:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007182:	e075      	b.n	90007270 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007184:	4b6b      	ldr	r3, [pc, #428]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007186:	685b      	ldr	r3, [r3, #4]
90007188:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
9000718c:	687b      	ldr	r3, [r7, #4]
9000718e:	6a1b      	ldr	r3, [r3, #32]
90007190:	069b      	lsls	r3, r3, #26
90007192:	4968      	ldr	r1, [pc, #416]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007194:	4313      	orrs	r3, r2
90007196:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007198:	e06a      	b.n	90007270 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000719a:	4b66      	ldr	r3, [pc, #408]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
9000719c:	68db      	ldr	r3, [r3, #12]
9000719e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
900071a2:	687b      	ldr	r3, [r7, #4]
900071a4:	6a1b      	ldr	r3, [r3, #32]
900071a6:	061b      	lsls	r3, r3, #24
900071a8:	4962      	ldr	r1, [pc, #392]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900071aa:	4313      	orrs	r3, r2
900071ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900071ae:	e05f      	b.n	90007270 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
900071b0:	687b      	ldr	r3, [r7, #4]
900071b2:	69db      	ldr	r3, [r3, #28]
900071b4:	2b00      	cmp	r3, #0
900071b6:	d042      	beq.n	9000723e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
900071b8:	4b5e      	ldr	r3, [pc, #376]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900071ba:	681b      	ldr	r3, [r3, #0]
900071bc:	4a5d      	ldr	r2, [pc, #372]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900071be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900071c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900071c4:	f7fb ff22 	bl	9000300c <HAL_GetTick>
900071c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900071ca:	e008      	b.n	900071de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
900071cc:	f7fb ff1e 	bl	9000300c <HAL_GetTick>
900071d0:	4602      	mov	r2, r0
900071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071d4:	1ad3      	subs	r3, r2, r3
900071d6:	2b02      	cmp	r3, #2
900071d8:	d901      	bls.n	900071de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
900071da:	2303      	movs	r3, #3
900071dc:	e280      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900071de:	4b55      	ldr	r3, [pc, #340]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900071e0:	681b      	ldr	r3, [r3, #0]
900071e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900071e6:	2b00      	cmp	r3, #0
900071e8:	d0f0      	beq.n	900071cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900071ea:	f7fb ff1b 	bl	90003024 <HAL_GetREVID>
900071ee:	4603      	mov	r3, r0
900071f0:	f241 0203 	movw	r2, #4099	@ 0x1003
900071f4:	4293      	cmp	r3, r2
900071f6:	d817      	bhi.n	90007228 <HAL_RCC_OscConfig+0x3ec>
900071f8:	687b      	ldr	r3, [r7, #4]
900071fa:	6a1b      	ldr	r3, [r3, #32]
900071fc:	2b20      	cmp	r3, #32
900071fe:	d108      	bne.n	90007212 <HAL_RCC_OscConfig+0x3d6>
90007200:	4b4c      	ldr	r3, [pc, #304]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007202:	685b      	ldr	r3, [r3, #4]
90007204:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90007208:	4a4a      	ldr	r2, [pc, #296]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
9000720a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000720e:	6053      	str	r3, [r2, #4]
90007210:	e02e      	b.n	90007270 <HAL_RCC_OscConfig+0x434>
90007212:	4b48      	ldr	r3, [pc, #288]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007214:	685b      	ldr	r3, [r3, #4]
90007216:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
9000721a:	687b      	ldr	r3, [r7, #4]
9000721c:	6a1b      	ldr	r3, [r3, #32]
9000721e:	069b      	lsls	r3, r3, #26
90007220:	4944      	ldr	r1, [pc, #272]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007222:	4313      	orrs	r3, r2
90007224:	604b      	str	r3, [r1, #4]
90007226:	e023      	b.n	90007270 <HAL_RCC_OscConfig+0x434>
90007228:	4b42      	ldr	r3, [pc, #264]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
9000722a:	68db      	ldr	r3, [r3, #12]
9000722c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90007230:	687b      	ldr	r3, [r7, #4]
90007232:	6a1b      	ldr	r3, [r3, #32]
90007234:	061b      	lsls	r3, r3, #24
90007236:	493f      	ldr	r1, [pc, #252]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007238:	4313      	orrs	r3, r2
9000723a:	60cb      	str	r3, [r1, #12]
9000723c:	e018      	b.n	90007270 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
9000723e:	4b3d      	ldr	r3, [pc, #244]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007240:	681b      	ldr	r3, [r3, #0]
90007242:	4a3c      	ldr	r2, [pc, #240]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90007248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000724a:	f7fb fedf 	bl	9000300c <HAL_GetTick>
9000724e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007250:	e008      	b.n	90007264 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90007252:	f7fb fedb 	bl	9000300c <HAL_GetTick>
90007256:	4602      	mov	r2, r0
90007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000725a:	1ad3      	subs	r3, r2, r3
9000725c:	2b02      	cmp	r3, #2
9000725e:	d901      	bls.n	90007264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90007260:	2303      	movs	r3, #3
90007262:	e23d      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007264:	4b33      	ldr	r3, [pc, #204]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007266:	681b      	ldr	r3, [r3, #0]
90007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000726c:	2b00      	cmp	r3, #0
9000726e:	d1f0      	bne.n	90007252 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90007270:	687b      	ldr	r3, [r7, #4]
90007272:	681b      	ldr	r3, [r3, #0]
90007274:	f003 0308 	and.w	r3, r3, #8
90007278:	2b00      	cmp	r3, #0
9000727a:	d036      	beq.n	900072ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000727c:	687b      	ldr	r3, [r7, #4]
9000727e:	695b      	ldr	r3, [r3, #20]
90007280:	2b00      	cmp	r3, #0
90007282:	d019      	beq.n	900072b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90007284:	4b2b      	ldr	r3, [pc, #172]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007288:	4a2a      	ldr	r2, [pc, #168]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
9000728a:	f043 0301 	orr.w	r3, r3, #1
9000728e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007290:	f7fb febc 	bl	9000300c <HAL_GetTick>
90007294:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007296:	e008      	b.n	900072aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007298:	f7fb feb8 	bl	9000300c <HAL_GetTick>
9000729c:	4602      	mov	r2, r0
9000729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072a0:	1ad3      	subs	r3, r2, r3
900072a2:	2b02      	cmp	r3, #2
900072a4:	d901      	bls.n	900072aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
900072a6:	2303      	movs	r3, #3
900072a8:	e21a      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900072aa:	4b22      	ldr	r3, [pc, #136]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900072ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900072ae:	f003 0302 	and.w	r3, r3, #2
900072b2:	2b00      	cmp	r3, #0
900072b4:	d0f0      	beq.n	90007298 <HAL_RCC_OscConfig+0x45c>
900072b6:	e018      	b.n	900072ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900072b8:	4b1e      	ldr	r3, [pc, #120]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900072ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900072bc:	4a1d      	ldr	r2, [pc, #116]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900072be:	f023 0301 	bic.w	r3, r3, #1
900072c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900072c4:	f7fb fea2 	bl	9000300c <HAL_GetTick>
900072c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900072ca:	e008      	b.n	900072de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900072cc:	f7fb fe9e 	bl	9000300c <HAL_GetTick>
900072d0:	4602      	mov	r2, r0
900072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072d4:	1ad3      	subs	r3, r2, r3
900072d6:	2b02      	cmp	r3, #2
900072d8:	d901      	bls.n	900072de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
900072da:	2303      	movs	r3, #3
900072dc:	e200      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900072de:	4b15      	ldr	r3, [pc, #84]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
900072e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900072e2:	f003 0302 	and.w	r3, r3, #2
900072e6:	2b00      	cmp	r3, #0
900072e8:	d1f0      	bne.n	900072cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
900072ea:	687b      	ldr	r3, [r7, #4]
900072ec:	681b      	ldr	r3, [r3, #0]
900072ee:	f003 0320 	and.w	r3, r3, #32
900072f2:	2b00      	cmp	r3, #0
900072f4:	d039      	beq.n	9000736a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
900072f6:	687b      	ldr	r3, [r7, #4]
900072f8:	699b      	ldr	r3, [r3, #24]
900072fa:	2b00      	cmp	r3, #0
900072fc:	d01c      	beq.n	90007338 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
900072fe:	4b0d      	ldr	r3, [pc, #52]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007300:	681b      	ldr	r3, [r3, #0]
90007302:	4a0c      	ldr	r2, [pc, #48]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007304:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90007308:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000730a:	f7fb fe7f 	bl	9000300c <HAL_GetTick>
9000730e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007310:	e008      	b.n	90007324 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007312:	f7fb fe7b 	bl	9000300c <HAL_GetTick>
90007316:	4602      	mov	r2, r0
90007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000731a:	1ad3      	subs	r3, r2, r3
9000731c:	2b02      	cmp	r3, #2
9000731e:	d901      	bls.n	90007324 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007320:	2303      	movs	r3, #3
90007322:	e1dd      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007324:	4b03      	ldr	r3, [pc, #12]	@ (90007334 <HAL_RCC_OscConfig+0x4f8>)
90007326:	681b      	ldr	r3, [r3, #0]
90007328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000732c:	2b00      	cmp	r3, #0
9000732e:	d0f0      	beq.n	90007312 <HAL_RCC_OscConfig+0x4d6>
90007330:	e01b      	b.n	9000736a <HAL_RCC_OscConfig+0x52e>
90007332:	bf00      	nop
90007334:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007338:	4b9b      	ldr	r3, [pc, #620]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000733a:	681b      	ldr	r3, [r3, #0]
9000733c:	4a9a      	ldr	r2, [pc, #616]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000733e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90007342:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007344:	f7fb fe62 	bl	9000300c <HAL_GetTick>
90007348:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000734a:	e008      	b.n	9000735e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000734c:	f7fb fe5e 	bl	9000300c <HAL_GetTick>
90007350:	4602      	mov	r2, r0
90007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007354:	1ad3      	subs	r3, r2, r3
90007356:	2b02      	cmp	r3, #2
90007358:	d901      	bls.n	9000735e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
9000735a:	2303      	movs	r3, #3
9000735c:	e1c0      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000735e:	4b92      	ldr	r3, [pc, #584]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007360:	681b      	ldr	r3, [r3, #0]
90007362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007366:	2b00      	cmp	r3, #0
90007368:	d1f0      	bne.n	9000734c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000736a:	687b      	ldr	r3, [r7, #4]
9000736c:	681b      	ldr	r3, [r3, #0]
9000736e:	f003 0304 	and.w	r3, r3, #4
90007372:	2b00      	cmp	r3, #0
90007374:	f000 8081 	beq.w	9000747a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007378:	4b8c      	ldr	r3, [pc, #560]	@ (900075ac <HAL_RCC_OscConfig+0x770>)
9000737a:	681b      	ldr	r3, [r3, #0]
9000737c:	4a8b      	ldr	r2, [pc, #556]	@ (900075ac <HAL_RCC_OscConfig+0x770>)
9000737e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90007382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90007384:	f7fb fe42 	bl	9000300c <HAL_GetTick>
90007388:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000738a:	e008      	b.n	9000739e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000738c:	f7fb fe3e 	bl	9000300c <HAL_GetTick>
90007390:	4602      	mov	r2, r0
90007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007394:	1ad3      	subs	r3, r2, r3
90007396:	2b64      	cmp	r3, #100	@ 0x64
90007398:	d901      	bls.n	9000739e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
9000739a:	2303      	movs	r3, #3
9000739c:	e1a0      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000739e:	4b83      	ldr	r3, [pc, #524]	@ (900075ac <HAL_RCC_OscConfig+0x770>)
900073a0:	681b      	ldr	r3, [r3, #0]
900073a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900073a6:	2b00      	cmp	r3, #0
900073a8:	d0f0      	beq.n	9000738c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900073aa:	687b      	ldr	r3, [r7, #4]
900073ac:	689b      	ldr	r3, [r3, #8]
900073ae:	2b01      	cmp	r3, #1
900073b0:	d106      	bne.n	900073c0 <HAL_RCC_OscConfig+0x584>
900073b2:	4b7d      	ldr	r3, [pc, #500]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900073b6:	4a7c      	ldr	r2, [pc, #496]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073b8:	f043 0301 	orr.w	r3, r3, #1
900073bc:	6713      	str	r3, [r2, #112]	@ 0x70
900073be:	e02d      	b.n	9000741c <HAL_RCC_OscConfig+0x5e0>
900073c0:	687b      	ldr	r3, [r7, #4]
900073c2:	689b      	ldr	r3, [r3, #8]
900073c4:	2b00      	cmp	r3, #0
900073c6:	d10c      	bne.n	900073e2 <HAL_RCC_OscConfig+0x5a6>
900073c8:	4b77      	ldr	r3, [pc, #476]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900073cc:	4a76      	ldr	r2, [pc, #472]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073ce:	f023 0301 	bic.w	r3, r3, #1
900073d2:	6713      	str	r3, [r2, #112]	@ 0x70
900073d4:	4b74      	ldr	r3, [pc, #464]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900073d8:	4a73      	ldr	r2, [pc, #460]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073da:	f023 0304 	bic.w	r3, r3, #4
900073de:	6713      	str	r3, [r2, #112]	@ 0x70
900073e0:	e01c      	b.n	9000741c <HAL_RCC_OscConfig+0x5e0>
900073e2:	687b      	ldr	r3, [r7, #4]
900073e4:	689b      	ldr	r3, [r3, #8]
900073e6:	2b05      	cmp	r3, #5
900073e8:	d10c      	bne.n	90007404 <HAL_RCC_OscConfig+0x5c8>
900073ea:	4b6f      	ldr	r3, [pc, #444]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900073ee:	4a6e      	ldr	r2, [pc, #440]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073f0:	f043 0304 	orr.w	r3, r3, #4
900073f4:	6713      	str	r3, [r2, #112]	@ 0x70
900073f6:	4b6c      	ldr	r3, [pc, #432]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900073fa:	4a6b      	ldr	r2, [pc, #428]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900073fc:	f043 0301 	orr.w	r3, r3, #1
90007400:	6713      	str	r3, [r2, #112]	@ 0x70
90007402:	e00b      	b.n	9000741c <HAL_RCC_OscConfig+0x5e0>
90007404:	4b68      	ldr	r3, [pc, #416]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007408:	4a67      	ldr	r2, [pc, #412]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000740a:	f023 0301 	bic.w	r3, r3, #1
9000740e:	6713      	str	r3, [r2, #112]	@ 0x70
90007410:	4b65      	ldr	r3, [pc, #404]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007414:	4a64      	ldr	r2, [pc, #400]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007416:	f023 0304 	bic.w	r3, r3, #4
9000741a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000741c:	687b      	ldr	r3, [r7, #4]
9000741e:	689b      	ldr	r3, [r3, #8]
90007420:	2b00      	cmp	r3, #0
90007422:	d015      	beq.n	90007450 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007424:	f7fb fdf2 	bl	9000300c <HAL_GetTick>
90007428:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000742a:	e00a      	b.n	90007442 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000742c:	f7fb fdee 	bl	9000300c <HAL_GetTick>
90007430:	4602      	mov	r2, r0
90007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007434:	1ad3      	subs	r3, r2, r3
90007436:	f241 3288 	movw	r2, #5000	@ 0x1388
9000743a:	4293      	cmp	r3, r2
9000743c:	d901      	bls.n	90007442 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000743e:	2303      	movs	r3, #3
90007440:	e14e      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007442:	4b59      	ldr	r3, [pc, #356]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007446:	f003 0302 	and.w	r3, r3, #2
9000744a:	2b00      	cmp	r3, #0
9000744c:	d0ee      	beq.n	9000742c <HAL_RCC_OscConfig+0x5f0>
9000744e:	e014      	b.n	9000747a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007450:	f7fb fddc 	bl	9000300c <HAL_GetTick>
90007454:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007456:	e00a      	b.n	9000746e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007458:	f7fb fdd8 	bl	9000300c <HAL_GetTick>
9000745c:	4602      	mov	r2, r0
9000745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007460:	1ad3      	subs	r3, r2, r3
90007462:	f241 3288 	movw	r2, #5000	@ 0x1388
90007466:	4293      	cmp	r3, r2
90007468:	d901      	bls.n	9000746e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
9000746a:	2303      	movs	r3, #3
9000746c:	e138      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000746e:	4b4e      	ldr	r3, [pc, #312]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007472:	f003 0302 	and.w	r3, r3, #2
90007476:	2b00      	cmp	r3, #0
90007478:	d1ee      	bne.n	90007458 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000747a:	687b      	ldr	r3, [r7, #4]
9000747c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000747e:	2b00      	cmp	r3, #0
90007480:	f000 812d 	beq.w	900076de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007484:	4b48      	ldr	r3, [pc, #288]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007486:	691b      	ldr	r3, [r3, #16]
90007488:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000748c:	2b18      	cmp	r3, #24
9000748e:	f000 80bd 	beq.w	9000760c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90007492:	687b      	ldr	r3, [r7, #4]
90007494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007496:	2b02      	cmp	r3, #2
90007498:	f040 809e 	bne.w	900075d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000749c:	4b42      	ldr	r3, [pc, #264]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000749e:	681b      	ldr	r3, [r3, #0]
900074a0:	4a41      	ldr	r2, [pc, #260]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900074a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900074a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900074a8:	f7fb fdb0 	bl	9000300c <HAL_GetTick>
900074ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900074ae:	e008      	b.n	900074c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900074b0:	f7fb fdac 	bl	9000300c <HAL_GetTick>
900074b4:	4602      	mov	r2, r0
900074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900074b8:	1ad3      	subs	r3, r2, r3
900074ba:	2b02      	cmp	r3, #2
900074bc:	d901      	bls.n	900074c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900074be:	2303      	movs	r3, #3
900074c0:	e10e      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900074c2:	4b39      	ldr	r3, [pc, #228]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900074c4:	681b      	ldr	r3, [r3, #0]
900074c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900074ca:	2b00      	cmp	r3, #0
900074cc:	d1f0      	bne.n	900074b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900074ce:	4b36      	ldr	r3, [pc, #216]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900074d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900074d2:	4b37      	ldr	r3, [pc, #220]	@ (900075b0 <HAL_RCC_OscConfig+0x774>)
900074d4:	4013      	ands	r3, r2
900074d6:	687a      	ldr	r2, [r7, #4]
900074d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900074da:	687a      	ldr	r2, [r7, #4]
900074dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900074de:	0112      	lsls	r2, r2, #4
900074e0:	430a      	orrs	r2, r1
900074e2:	4931      	ldr	r1, [pc, #196]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
900074e4:	4313      	orrs	r3, r2
900074e6:	628b      	str	r3, [r1, #40]	@ 0x28
900074e8:	687b      	ldr	r3, [r7, #4]
900074ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900074ec:	3b01      	subs	r3, #1
900074ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
900074f2:	687b      	ldr	r3, [r7, #4]
900074f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900074f6:	3b01      	subs	r3, #1
900074f8:	025b      	lsls	r3, r3, #9
900074fa:	b29b      	uxth	r3, r3
900074fc:	431a      	orrs	r2, r3
900074fe:	687b      	ldr	r3, [r7, #4]
90007500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007502:	3b01      	subs	r3, #1
90007504:	041b      	lsls	r3, r3, #16
90007506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000750a:	431a      	orrs	r2, r3
9000750c:	687b      	ldr	r3, [r7, #4]
9000750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007510:	3b01      	subs	r3, #1
90007512:	061b      	lsls	r3, r3, #24
90007514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007518:	4923      	ldr	r1, [pc, #140]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000751a:	4313      	orrs	r3, r2
9000751c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
9000751e:	4b22      	ldr	r3, [pc, #136]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007522:	4a21      	ldr	r2, [pc, #132]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007524:	f023 0301 	bic.w	r3, r3, #1
90007528:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000752a:	4b1f      	ldr	r3, [pc, #124]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000752c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000752e:	4b21      	ldr	r3, [pc, #132]	@ (900075b4 <HAL_RCC_OscConfig+0x778>)
90007530:	4013      	ands	r3, r2
90007532:	687a      	ldr	r2, [r7, #4]
90007534:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007536:	00d2      	lsls	r2, r2, #3
90007538:	491b      	ldr	r1, [pc, #108]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000753a:	4313      	orrs	r3, r2
9000753c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000753e:	4b1a      	ldr	r3, [pc, #104]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007542:	f023 020c 	bic.w	r2, r3, #12
90007546:	687b      	ldr	r3, [r7, #4]
90007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000754a:	4917      	ldr	r1, [pc, #92]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000754c:	4313      	orrs	r3, r2
9000754e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007550:	4b15      	ldr	r3, [pc, #84]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007554:	f023 0202 	bic.w	r2, r3, #2
90007558:	687b      	ldr	r3, [r7, #4]
9000755a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000755c:	4912      	ldr	r1, [pc, #72]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000755e:	4313      	orrs	r3, r2
90007560:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90007562:	4b11      	ldr	r3, [pc, #68]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007566:	4a10      	ldr	r2, [pc, #64]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000756c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000756e:	4b0e      	ldr	r3, [pc, #56]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007572:	4a0d      	ldr	r2, [pc, #52]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000757a:	4b0b      	ldr	r3, [pc, #44]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000757c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000757e:	4a0a      	ldr	r2, [pc, #40]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90007586:	4b08      	ldr	r3, [pc, #32]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000758a:	4a07      	ldr	r2, [pc, #28]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
9000758c:	f043 0301 	orr.w	r3, r3, #1
90007590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90007592:	4b05      	ldr	r3, [pc, #20]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007594:	681b      	ldr	r3, [r3, #0]
90007596:	4a04      	ldr	r2, [pc, #16]	@ (900075a8 <HAL_RCC_OscConfig+0x76c>)
90007598:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000759c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000759e:	f7fb fd35 	bl	9000300c <HAL_GetTick>
900075a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900075a4:	e011      	b.n	900075ca <HAL_RCC_OscConfig+0x78e>
900075a6:	bf00      	nop
900075a8:	58024400 	.word	0x58024400
900075ac:	58024800 	.word	0x58024800
900075b0:	fffffc0c 	.word	0xfffffc0c
900075b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900075b8:	f7fb fd28 	bl	9000300c <HAL_GetTick>
900075bc:	4602      	mov	r2, r0
900075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900075c0:	1ad3      	subs	r3, r2, r3
900075c2:	2b02      	cmp	r3, #2
900075c4:	d901      	bls.n	900075ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
900075c6:	2303      	movs	r3, #3
900075c8:	e08a      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900075ca:	4b47      	ldr	r3, [pc, #284]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900075cc:	681b      	ldr	r3, [r3, #0]
900075ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900075d2:	2b00      	cmp	r3, #0
900075d4:	d0f0      	beq.n	900075b8 <HAL_RCC_OscConfig+0x77c>
900075d6:	e082      	b.n	900076de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900075d8:	4b43      	ldr	r3, [pc, #268]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900075da:	681b      	ldr	r3, [r3, #0]
900075dc:	4a42      	ldr	r2, [pc, #264]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900075de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900075e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900075e4:	f7fb fd12 	bl	9000300c <HAL_GetTick>
900075e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900075ea:	e008      	b.n	900075fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900075ec:	f7fb fd0e 	bl	9000300c <HAL_GetTick>
900075f0:	4602      	mov	r2, r0
900075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900075f4:	1ad3      	subs	r3, r2, r3
900075f6:	2b02      	cmp	r3, #2
900075f8:	d901      	bls.n	900075fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900075fa:	2303      	movs	r3, #3
900075fc:	e070      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900075fe:	4b3a      	ldr	r3, [pc, #232]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
90007600:	681b      	ldr	r3, [r3, #0]
90007602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007606:	2b00      	cmp	r3, #0
90007608:	d1f0      	bne.n	900075ec <HAL_RCC_OscConfig+0x7b0>
9000760a:	e068      	b.n	900076de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
9000760c:	4b36      	ldr	r3, [pc, #216]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
9000760e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007610:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90007612:	4b35      	ldr	r3, [pc, #212]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
90007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007616:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007618:	687b      	ldr	r3, [r7, #4]
9000761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000761c:	2b01      	cmp	r3, #1
9000761e:	d031      	beq.n	90007684 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007620:	693b      	ldr	r3, [r7, #16]
90007622:	f003 0203 	and.w	r2, r3, #3
90007626:	687b      	ldr	r3, [r7, #4]
90007628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000762a:	429a      	cmp	r2, r3
9000762c:	d12a      	bne.n	90007684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000762e:	693b      	ldr	r3, [r7, #16]
90007630:	091b      	lsrs	r3, r3, #4
90007632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90007636:	687b      	ldr	r3, [r7, #4]
90007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000763a:	429a      	cmp	r2, r3
9000763c:	d122      	bne.n	90007684 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000763e:	68fb      	ldr	r3, [r7, #12]
90007640:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007644:	687b      	ldr	r3, [r7, #4]
90007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007648:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000764a:	429a      	cmp	r2, r3
9000764c:	d11a      	bne.n	90007684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000764e:	68fb      	ldr	r3, [r7, #12]
90007650:	0a5b      	lsrs	r3, r3, #9
90007652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007656:	687b      	ldr	r3, [r7, #4]
90007658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000765a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000765c:	429a      	cmp	r2, r3
9000765e:	d111      	bne.n	90007684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007660:	68fb      	ldr	r3, [r7, #12]
90007662:	0c1b      	lsrs	r3, r3, #16
90007664:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007668:	687b      	ldr	r3, [r7, #4]
9000766a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000766c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000766e:	429a      	cmp	r2, r3
90007670:	d108      	bne.n	90007684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90007672:	68fb      	ldr	r3, [r7, #12]
90007674:	0e1b      	lsrs	r3, r3, #24
90007676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000767a:	687b      	ldr	r3, [r7, #4]
9000767c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9000767e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007680:	429a      	cmp	r2, r3
90007682:	d001      	beq.n	90007688 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90007684:	2301      	movs	r3, #1
90007686:	e02b      	b.n	900076e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007688:	4b17      	ldr	r3, [pc, #92]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
9000768a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000768c:	08db      	lsrs	r3, r3, #3
9000768e:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007692:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90007694:	687b      	ldr	r3, [r7, #4]
90007696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007698:	693a      	ldr	r2, [r7, #16]
9000769a:	429a      	cmp	r2, r3
9000769c:	d01f      	beq.n	900076de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
9000769e:	4b12      	ldr	r3, [pc, #72]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900076a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076a2:	4a11      	ldr	r2, [pc, #68]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900076a4:	f023 0301 	bic.w	r3, r3, #1
900076a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
900076aa:	f7fb fcaf 	bl	9000300c <HAL_GetTick>
900076ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
900076b0:	bf00      	nop
900076b2:	f7fb fcab 	bl	9000300c <HAL_GetTick>
900076b6:	4602      	mov	r2, r0
900076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900076ba:	4293      	cmp	r3, r2
900076bc:	d0f9      	beq.n	900076b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900076be:	4b0a      	ldr	r3, [pc, #40]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900076c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900076c2:	4b0a      	ldr	r3, [pc, #40]	@ (900076ec <HAL_RCC_OscConfig+0x8b0>)
900076c4:	4013      	ands	r3, r2
900076c6:	687a      	ldr	r2, [r7, #4]
900076c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
900076ca:	00d2      	lsls	r2, r2, #3
900076cc:	4906      	ldr	r1, [pc, #24]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900076ce:	4313      	orrs	r3, r2
900076d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900076d2:	4b05      	ldr	r3, [pc, #20]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076d6:	4a04      	ldr	r2, [pc, #16]	@ (900076e8 <HAL_RCC_OscConfig+0x8ac>)
900076d8:	f043 0301 	orr.w	r3, r3, #1
900076dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
900076de:	2300      	movs	r3, #0
}
900076e0:	4618      	mov	r0, r3
900076e2:	3730      	adds	r7, #48	@ 0x30
900076e4:	46bd      	mov	sp, r7
900076e6:	bd80      	pop	{r7, pc}
900076e8:	58024400 	.word	0x58024400
900076ec:	ffff0007 	.word	0xffff0007

900076f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900076f0:	b580      	push	{r7, lr}
900076f2:	b086      	sub	sp, #24
900076f4:	af00      	add	r7, sp, #0
900076f6:	6078      	str	r0, [r7, #4]
900076f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900076fa:	687b      	ldr	r3, [r7, #4]
900076fc:	2b00      	cmp	r3, #0
900076fe:	d101      	bne.n	90007704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90007700:	2301      	movs	r3, #1
90007702:	e19c      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007704:	4b8a      	ldr	r3, [pc, #552]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
90007706:	681b      	ldr	r3, [r3, #0]
90007708:	f003 030f 	and.w	r3, r3, #15
9000770c:	683a      	ldr	r2, [r7, #0]
9000770e:	429a      	cmp	r2, r3
90007710:	d910      	bls.n	90007734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007712:	4b87      	ldr	r3, [pc, #540]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
90007714:	681b      	ldr	r3, [r3, #0]
90007716:	f023 020f 	bic.w	r2, r3, #15
9000771a:	4985      	ldr	r1, [pc, #532]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
9000771c:	683b      	ldr	r3, [r7, #0]
9000771e:	4313      	orrs	r3, r2
90007720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007722:	4b83      	ldr	r3, [pc, #524]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
90007724:	681b      	ldr	r3, [r3, #0]
90007726:	f003 030f 	and.w	r3, r3, #15
9000772a:	683a      	ldr	r2, [r7, #0]
9000772c:	429a      	cmp	r2, r3
9000772e:	d001      	beq.n	90007734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007730:	2301      	movs	r3, #1
90007732:	e184      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007734:	687b      	ldr	r3, [r7, #4]
90007736:	681b      	ldr	r3, [r3, #0]
90007738:	f003 0304 	and.w	r3, r3, #4
9000773c:	2b00      	cmp	r3, #0
9000773e:	d010      	beq.n	90007762 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007740:	687b      	ldr	r3, [r7, #4]
90007742:	691a      	ldr	r2, [r3, #16]
90007744:	4b7b      	ldr	r3, [pc, #492]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007746:	699b      	ldr	r3, [r3, #24]
90007748:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000774c:	429a      	cmp	r2, r3
9000774e:	d908      	bls.n	90007762 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007750:	4b78      	ldr	r3, [pc, #480]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007752:	699b      	ldr	r3, [r3, #24]
90007754:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007758:	687b      	ldr	r3, [r7, #4]
9000775a:	691b      	ldr	r3, [r3, #16]
9000775c:	4975      	ldr	r1, [pc, #468]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
9000775e:	4313      	orrs	r3, r2
90007760:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007762:	687b      	ldr	r3, [r7, #4]
90007764:	681b      	ldr	r3, [r3, #0]
90007766:	f003 0308 	and.w	r3, r3, #8
9000776a:	2b00      	cmp	r3, #0
9000776c:	d010      	beq.n	90007790 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000776e:	687b      	ldr	r3, [r7, #4]
90007770:	695a      	ldr	r2, [r3, #20]
90007772:	4b70      	ldr	r3, [pc, #448]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007774:	69db      	ldr	r3, [r3, #28]
90007776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000777a:	429a      	cmp	r2, r3
9000777c:	d908      	bls.n	90007790 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000777e:	4b6d      	ldr	r3, [pc, #436]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007780:	69db      	ldr	r3, [r3, #28]
90007782:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007786:	687b      	ldr	r3, [r7, #4]
90007788:	695b      	ldr	r3, [r3, #20]
9000778a:	496a      	ldr	r1, [pc, #424]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
9000778c:	4313      	orrs	r3, r2
9000778e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007790:	687b      	ldr	r3, [r7, #4]
90007792:	681b      	ldr	r3, [r3, #0]
90007794:	f003 0310 	and.w	r3, r3, #16
90007798:	2b00      	cmp	r3, #0
9000779a:	d010      	beq.n	900077be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000779c:	687b      	ldr	r3, [r7, #4]
9000779e:	699a      	ldr	r2, [r3, #24]
900077a0:	4b64      	ldr	r3, [pc, #400]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900077a2:	69db      	ldr	r3, [r3, #28]
900077a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900077a8:	429a      	cmp	r2, r3
900077aa:	d908      	bls.n	900077be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900077ac:	4b61      	ldr	r3, [pc, #388]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900077ae:	69db      	ldr	r3, [r3, #28]
900077b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900077b4:	687b      	ldr	r3, [r7, #4]
900077b6:	699b      	ldr	r3, [r3, #24]
900077b8:	495e      	ldr	r1, [pc, #376]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900077ba:	4313      	orrs	r3, r2
900077bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900077be:	687b      	ldr	r3, [r7, #4]
900077c0:	681b      	ldr	r3, [r3, #0]
900077c2:	f003 0320 	and.w	r3, r3, #32
900077c6:	2b00      	cmp	r3, #0
900077c8:	d010      	beq.n	900077ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900077ca:	687b      	ldr	r3, [r7, #4]
900077cc:	69da      	ldr	r2, [r3, #28]
900077ce:	4b59      	ldr	r3, [pc, #356]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900077d0:	6a1b      	ldr	r3, [r3, #32]
900077d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900077d6:	429a      	cmp	r2, r3
900077d8:	d908      	bls.n	900077ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900077da:	4b56      	ldr	r3, [pc, #344]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900077dc:	6a1b      	ldr	r3, [r3, #32]
900077de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900077e2:	687b      	ldr	r3, [r7, #4]
900077e4:	69db      	ldr	r3, [r3, #28]
900077e6:	4953      	ldr	r1, [pc, #332]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900077e8:	4313      	orrs	r3, r2
900077ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900077ec:	687b      	ldr	r3, [r7, #4]
900077ee:	681b      	ldr	r3, [r3, #0]
900077f0:	f003 0302 	and.w	r3, r3, #2
900077f4:	2b00      	cmp	r3, #0
900077f6:	d010      	beq.n	9000781a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900077f8:	687b      	ldr	r3, [r7, #4]
900077fa:	68da      	ldr	r2, [r3, #12]
900077fc:	4b4d      	ldr	r3, [pc, #308]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900077fe:	699b      	ldr	r3, [r3, #24]
90007800:	f003 030f 	and.w	r3, r3, #15
90007804:	429a      	cmp	r2, r3
90007806:	d908      	bls.n	9000781a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007808:	4b4a      	ldr	r3, [pc, #296]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
9000780a:	699b      	ldr	r3, [r3, #24]
9000780c:	f023 020f 	bic.w	r2, r3, #15
90007810:	687b      	ldr	r3, [r7, #4]
90007812:	68db      	ldr	r3, [r3, #12]
90007814:	4947      	ldr	r1, [pc, #284]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007816:	4313      	orrs	r3, r2
90007818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000781a:	687b      	ldr	r3, [r7, #4]
9000781c:	681b      	ldr	r3, [r3, #0]
9000781e:	f003 0301 	and.w	r3, r3, #1
90007822:	2b00      	cmp	r3, #0
90007824:	d055      	beq.n	900078d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90007826:	4b43      	ldr	r3, [pc, #268]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007828:	699b      	ldr	r3, [r3, #24]
9000782a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
9000782e:	687b      	ldr	r3, [r7, #4]
90007830:	689b      	ldr	r3, [r3, #8]
90007832:	4940      	ldr	r1, [pc, #256]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007834:	4313      	orrs	r3, r2
90007836:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007838:	687b      	ldr	r3, [r7, #4]
9000783a:	685b      	ldr	r3, [r3, #4]
9000783c:	2b02      	cmp	r3, #2
9000783e:	d107      	bne.n	90007850 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007840:	4b3c      	ldr	r3, [pc, #240]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007842:	681b      	ldr	r3, [r3, #0]
90007844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007848:	2b00      	cmp	r3, #0
9000784a:	d121      	bne.n	90007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000784c:	2301      	movs	r3, #1
9000784e:	e0f6      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007850:	687b      	ldr	r3, [r7, #4]
90007852:	685b      	ldr	r3, [r3, #4]
90007854:	2b03      	cmp	r3, #3
90007856:	d107      	bne.n	90007868 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007858:	4b36      	ldr	r3, [pc, #216]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
9000785a:	681b      	ldr	r3, [r3, #0]
9000785c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007860:	2b00      	cmp	r3, #0
90007862:	d115      	bne.n	90007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007864:	2301      	movs	r3, #1
90007866:	e0ea      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007868:	687b      	ldr	r3, [r7, #4]
9000786a:	685b      	ldr	r3, [r3, #4]
9000786c:	2b01      	cmp	r3, #1
9000786e:	d107      	bne.n	90007880 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007870:	4b30      	ldr	r3, [pc, #192]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007872:	681b      	ldr	r3, [r3, #0]
90007874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007878:	2b00      	cmp	r3, #0
9000787a:	d109      	bne.n	90007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000787c:	2301      	movs	r3, #1
9000787e:	e0de      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007880:	4b2c      	ldr	r3, [pc, #176]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007882:	681b      	ldr	r3, [r3, #0]
90007884:	f003 0304 	and.w	r3, r3, #4
90007888:	2b00      	cmp	r3, #0
9000788a:	d101      	bne.n	90007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000788c:	2301      	movs	r3, #1
9000788e:	e0d6      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007890:	4b28      	ldr	r3, [pc, #160]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
90007892:	691b      	ldr	r3, [r3, #16]
90007894:	f023 0207 	bic.w	r2, r3, #7
90007898:	687b      	ldr	r3, [r7, #4]
9000789a:	685b      	ldr	r3, [r3, #4]
9000789c:	4925      	ldr	r1, [pc, #148]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
9000789e:	4313      	orrs	r3, r2
900078a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900078a2:	f7fb fbb3 	bl	9000300c <HAL_GetTick>
900078a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900078a8:	e00a      	b.n	900078c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900078aa:	f7fb fbaf 	bl	9000300c <HAL_GetTick>
900078ae:	4602      	mov	r2, r0
900078b0:	697b      	ldr	r3, [r7, #20]
900078b2:	1ad3      	subs	r3, r2, r3
900078b4:	f241 3288 	movw	r2, #5000	@ 0x1388
900078b8:	4293      	cmp	r3, r2
900078ba:	d901      	bls.n	900078c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
900078bc:	2303      	movs	r3, #3
900078be:	e0be      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900078c0:	4b1c      	ldr	r3, [pc, #112]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900078c2:	691b      	ldr	r3, [r3, #16]
900078c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
900078c8:	687b      	ldr	r3, [r7, #4]
900078ca:	685b      	ldr	r3, [r3, #4]
900078cc:	00db      	lsls	r3, r3, #3
900078ce:	429a      	cmp	r2, r3
900078d0:	d1eb      	bne.n	900078aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900078d2:	687b      	ldr	r3, [r7, #4]
900078d4:	681b      	ldr	r3, [r3, #0]
900078d6:	f003 0302 	and.w	r3, r3, #2
900078da:	2b00      	cmp	r3, #0
900078dc:	d010      	beq.n	90007900 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900078de:	687b      	ldr	r3, [r7, #4]
900078e0:	68da      	ldr	r2, [r3, #12]
900078e2:	4b14      	ldr	r3, [pc, #80]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900078e4:	699b      	ldr	r3, [r3, #24]
900078e6:	f003 030f 	and.w	r3, r3, #15
900078ea:	429a      	cmp	r2, r3
900078ec:	d208      	bcs.n	90007900 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900078ee:	4b11      	ldr	r3, [pc, #68]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900078f0:	699b      	ldr	r3, [r3, #24]
900078f2:	f023 020f 	bic.w	r2, r3, #15
900078f6:	687b      	ldr	r3, [r7, #4]
900078f8:	68db      	ldr	r3, [r3, #12]
900078fa:	490e      	ldr	r1, [pc, #56]	@ (90007934 <HAL_RCC_ClockConfig+0x244>)
900078fc:	4313      	orrs	r3, r2
900078fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90007900:	4b0b      	ldr	r3, [pc, #44]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
90007902:	681b      	ldr	r3, [r3, #0]
90007904:	f003 030f 	and.w	r3, r3, #15
90007908:	683a      	ldr	r2, [r7, #0]
9000790a:	429a      	cmp	r2, r3
9000790c:	d214      	bcs.n	90007938 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000790e:	4b08      	ldr	r3, [pc, #32]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
90007910:	681b      	ldr	r3, [r3, #0]
90007912:	f023 020f 	bic.w	r2, r3, #15
90007916:	4906      	ldr	r1, [pc, #24]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
90007918:	683b      	ldr	r3, [r7, #0]
9000791a:	4313      	orrs	r3, r2
9000791c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000791e:	4b04      	ldr	r3, [pc, #16]	@ (90007930 <HAL_RCC_ClockConfig+0x240>)
90007920:	681b      	ldr	r3, [r3, #0]
90007922:	f003 030f 	and.w	r3, r3, #15
90007926:	683a      	ldr	r2, [r7, #0]
90007928:	429a      	cmp	r2, r3
9000792a:	d005      	beq.n	90007938 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
9000792c:	2301      	movs	r3, #1
9000792e:	e086      	b.n	90007a3e <HAL_RCC_ClockConfig+0x34e>
90007930:	52002000 	.word	0x52002000
90007934:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007938:	687b      	ldr	r3, [r7, #4]
9000793a:	681b      	ldr	r3, [r3, #0]
9000793c:	f003 0304 	and.w	r3, r3, #4
90007940:	2b00      	cmp	r3, #0
90007942:	d010      	beq.n	90007966 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007944:	687b      	ldr	r3, [r7, #4]
90007946:	691a      	ldr	r2, [r3, #16]
90007948:	4b3f      	ldr	r3, [pc, #252]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
9000794a:	699b      	ldr	r3, [r3, #24]
9000794c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007950:	429a      	cmp	r2, r3
90007952:	d208      	bcs.n	90007966 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007954:	4b3c      	ldr	r3, [pc, #240]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
90007956:	699b      	ldr	r3, [r3, #24]
90007958:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000795c:	687b      	ldr	r3, [r7, #4]
9000795e:	691b      	ldr	r3, [r3, #16]
90007960:	4939      	ldr	r1, [pc, #228]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
90007962:	4313      	orrs	r3, r2
90007964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007966:	687b      	ldr	r3, [r7, #4]
90007968:	681b      	ldr	r3, [r3, #0]
9000796a:	f003 0308 	and.w	r3, r3, #8
9000796e:	2b00      	cmp	r3, #0
90007970:	d010      	beq.n	90007994 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007972:	687b      	ldr	r3, [r7, #4]
90007974:	695a      	ldr	r2, [r3, #20]
90007976:	4b34      	ldr	r3, [pc, #208]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
90007978:	69db      	ldr	r3, [r3, #28]
9000797a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000797e:	429a      	cmp	r2, r3
90007980:	d208      	bcs.n	90007994 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007982:	4b31      	ldr	r3, [pc, #196]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
90007984:	69db      	ldr	r3, [r3, #28]
90007986:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000798a:	687b      	ldr	r3, [r7, #4]
9000798c:	695b      	ldr	r3, [r3, #20]
9000798e:	492e      	ldr	r1, [pc, #184]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
90007990:	4313      	orrs	r3, r2
90007992:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007994:	687b      	ldr	r3, [r7, #4]
90007996:	681b      	ldr	r3, [r3, #0]
90007998:	f003 0310 	and.w	r3, r3, #16
9000799c:	2b00      	cmp	r3, #0
9000799e:	d010      	beq.n	900079c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900079a0:	687b      	ldr	r3, [r7, #4]
900079a2:	699a      	ldr	r2, [r3, #24]
900079a4:	4b28      	ldr	r3, [pc, #160]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
900079a6:	69db      	ldr	r3, [r3, #28]
900079a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900079ac:	429a      	cmp	r2, r3
900079ae:	d208      	bcs.n	900079c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900079b0:	4b25      	ldr	r3, [pc, #148]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
900079b2:	69db      	ldr	r3, [r3, #28]
900079b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900079b8:	687b      	ldr	r3, [r7, #4]
900079ba:	699b      	ldr	r3, [r3, #24]
900079bc:	4922      	ldr	r1, [pc, #136]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
900079be:	4313      	orrs	r3, r2
900079c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900079c2:	687b      	ldr	r3, [r7, #4]
900079c4:	681b      	ldr	r3, [r3, #0]
900079c6:	f003 0320 	and.w	r3, r3, #32
900079ca:	2b00      	cmp	r3, #0
900079cc:	d010      	beq.n	900079f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900079ce:	687b      	ldr	r3, [r7, #4]
900079d0:	69da      	ldr	r2, [r3, #28]
900079d2:	4b1d      	ldr	r3, [pc, #116]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
900079d4:	6a1b      	ldr	r3, [r3, #32]
900079d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900079da:	429a      	cmp	r2, r3
900079dc:	d208      	bcs.n	900079f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900079de:	4b1a      	ldr	r3, [pc, #104]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
900079e0:	6a1b      	ldr	r3, [r3, #32]
900079e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900079e6:	687b      	ldr	r3, [r7, #4]
900079e8:	69db      	ldr	r3, [r3, #28]
900079ea:	4917      	ldr	r1, [pc, #92]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
900079ec:	4313      	orrs	r3, r2
900079ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900079f0:	f000 f834 	bl	90007a5c <HAL_RCC_GetSysClockFreq>
900079f4:	4602      	mov	r2, r0
900079f6:	4b14      	ldr	r3, [pc, #80]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
900079f8:	699b      	ldr	r3, [r3, #24]
900079fa:	0a1b      	lsrs	r3, r3, #8
900079fc:	f003 030f 	and.w	r3, r3, #15
90007a00:	4912      	ldr	r1, [pc, #72]	@ (90007a4c <HAL_RCC_ClockConfig+0x35c>)
90007a02:	5ccb      	ldrb	r3, [r1, r3]
90007a04:	f003 031f 	and.w	r3, r3, #31
90007a08:	fa22 f303 	lsr.w	r3, r2, r3
90007a0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007a0e:	4b0e      	ldr	r3, [pc, #56]	@ (90007a48 <HAL_RCC_ClockConfig+0x358>)
90007a10:	699b      	ldr	r3, [r3, #24]
90007a12:	f003 030f 	and.w	r3, r3, #15
90007a16:	4a0d      	ldr	r2, [pc, #52]	@ (90007a4c <HAL_RCC_ClockConfig+0x35c>)
90007a18:	5cd3      	ldrb	r3, [r2, r3]
90007a1a:	f003 031f 	and.w	r3, r3, #31
90007a1e:	693a      	ldr	r2, [r7, #16]
90007a20:	fa22 f303 	lsr.w	r3, r2, r3
90007a24:	4a0a      	ldr	r2, [pc, #40]	@ (90007a50 <HAL_RCC_ClockConfig+0x360>)
90007a26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007a28:	4a0a      	ldr	r2, [pc, #40]	@ (90007a54 <HAL_RCC_ClockConfig+0x364>)
90007a2a:	693b      	ldr	r3, [r7, #16]
90007a2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007a2e:	4b0a      	ldr	r3, [pc, #40]	@ (90007a58 <HAL_RCC_ClockConfig+0x368>)
90007a30:	681b      	ldr	r3, [r3, #0]
90007a32:	4618      	mov	r0, r3
90007a34:	f7fb faa0 	bl	90002f78 <HAL_InitTick>
90007a38:	4603      	mov	r3, r0
90007a3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
90007a3e:	4618      	mov	r0, r3
90007a40:	3718      	adds	r7, #24
90007a42:	46bd      	mov	sp, r7
90007a44:	bd80      	pop	{r7, pc}
90007a46:	bf00      	nop
90007a48:	58024400 	.word	0x58024400
90007a4c:	9000aa3c 	.word	0x9000aa3c
90007a50:	2000003c 	.word	0x2000003c
90007a54:	20000038 	.word	0x20000038
90007a58:	20000040 	.word	0x20000040

90007a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007a5c:	b480      	push	{r7}
90007a5e:	b089      	sub	sp, #36	@ 0x24
90007a60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90007a62:	4bb3      	ldr	r3, [pc, #716]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a64:	691b      	ldr	r3, [r3, #16]
90007a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007a6a:	2b18      	cmp	r3, #24
90007a6c:	f200 8155 	bhi.w	90007d1a <HAL_RCC_GetSysClockFreq+0x2be>
90007a70:	a201      	add	r2, pc, #4	@ (adr r2, 90007a78 <HAL_RCC_GetSysClockFreq+0x1c>)
90007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007a76:	bf00      	nop
90007a78:	90007add 	.word	0x90007add
90007a7c:	90007d1b 	.word	0x90007d1b
90007a80:	90007d1b 	.word	0x90007d1b
90007a84:	90007d1b 	.word	0x90007d1b
90007a88:	90007d1b 	.word	0x90007d1b
90007a8c:	90007d1b 	.word	0x90007d1b
90007a90:	90007d1b 	.word	0x90007d1b
90007a94:	90007d1b 	.word	0x90007d1b
90007a98:	90007b03 	.word	0x90007b03
90007a9c:	90007d1b 	.word	0x90007d1b
90007aa0:	90007d1b 	.word	0x90007d1b
90007aa4:	90007d1b 	.word	0x90007d1b
90007aa8:	90007d1b 	.word	0x90007d1b
90007aac:	90007d1b 	.word	0x90007d1b
90007ab0:	90007d1b 	.word	0x90007d1b
90007ab4:	90007d1b 	.word	0x90007d1b
90007ab8:	90007b09 	.word	0x90007b09
90007abc:	90007d1b 	.word	0x90007d1b
90007ac0:	90007d1b 	.word	0x90007d1b
90007ac4:	90007d1b 	.word	0x90007d1b
90007ac8:	90007d1b 	.word	0x90007d1b
90007acc:	90007d1b 	.word	0x90007d1b
90007ad0:	90007d1b 	.word	0x90007d1b
90007ad4:	90007d1b 	.word	0x90007d1b
90007ad8:	90007b0f 	.word	0x90007b0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007adc:	4b94      	ldr	r3, [pc, #592]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ade:	681b      	ldr	r3, [r3, #0]
90007ae0:	f003 0320 	and.w	r3, r3, #32
90007ae4:	2b00      	cmp	r3, #0
90007ae6:	d009      	beq.n	90007afc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007ae8:	4b91      	ldr	r3, [pc, #580]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007aea:	681b      	ldr	r3, [r3, #0]
90007aec:	08db      	lsrs	r3, r3, #3
90007aee:	f003 0303 	and.w	r3, r3, #3
90007af2:	4a90      	ldr	r2, [pc, #576]	@ (90007d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007af4:	fa22 f303 	lsr.w	r3, r2, r3
90007af8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90007afa:	e111      	b.n	90007d20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90007afc:	4b8d      	ldr	r3, [pc, #564]	@ (90007d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007afe:	61bb      	str	r3, [r7, #24]
      break;
90007b00:	e10e      	b.n	90007d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90007b02:	4b8d      	ldr	r3, [pc, #564]	@ (90007d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007b04:	61bb      	str	r3, [r7, #24]
      break;
90007b06:	e10b      	b.n	90007d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90007b08:	4b8c      	ldr	r3, [pc, #560]	@ (90007d3c <HAL_RCC_GetSysClockFreq+0x2e0>)
90007b0a:	61bb      	str	r3, [r7, #24]
      break;
90007b0c:	e108      	b.n	90007d20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007b0e:	4b88      	ldr	r3, [pc, #544]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007b12:	f003 0303 	and.w	r3, r3, #3
90007b16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90007b18:	4b85      	ldr	r3, [pc, #532]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007b1c:	091b      	lsrs	r3, r3, #4
90007b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007b22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007b24:	4b82      	ldr	r3, [pc, #520]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007b28:	f003 0301 	and.w	r3, r3, #1
90007b2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007b2e:	4b80      	ldr	r3, [pc, #512]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007b32:	08db      	lsrs	r3, r3, #3
90007b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007b38:	68fa      	ldr	r2, [r7, #12]
90007b3a:	fb02 f303 	mul.w	r3, r2, r3
90007b3e:	ee07 3a90 	vmov	s15, r3
90007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007b46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90007b4a:	693b      	ldr	r3, [r7, #16]
90007b4c:	2b00      	cmp	r3, #0
90007b4e:	f000 80e1 	beq.w	90007d14 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007b52:	697b      	ldr	r3, [r7, #20]
90007b54:	2b02      	cmp	r3, #2
90007b56:	f000 8083 	beq.w	90007c60 <HAL_RCC_GetSysClockFreq+0x204>
90007b5a:	697b      	ldr	r3, [r7, #20]
90007b5c:	2b02      	cmp	r3, #2
90007b5e:	f200 80a1 	bhi.w	90007ca4 <HAL_RCC_GetSysClockFreq+0x248>
90007b62:	697b      	ldr	r3, [r7, #20]
90007b64:	2b00      	cmp	r3, #0
90007b66:	d003      	beq.n	90007b70 <HAL_RCC_GetSysClockFreq+0x114>
90007b68:	697b      	ldr	r3, [r7, #20]
90007b6a:	2b01      	cmp	r3, #1
90007b6c:	d056      	beq.n	90007c1c <HAL_RCC_GetSysClockFreq+0x1c0>
90007b6e:	e099      	b.n	90007ca4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007b70:	4b6f      	ldr	r3, [pc, #444]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b72:	681b      	ldr	r3, [r3, #0]
90007b74:	f003 0320 	and.w	r3, r3, #32
90007b78:	2b00      	cmp	r3, #0
90007b7a:	d02d      	beq.n	90007bd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007b7c:	4b6c      	ldr	r3, [pc, #432]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b7e:	681b      	ldr	r3, [r3, #0]
90007b80:	08db      	lsrs	r3, r3, #3
90007b82:	f003 0303 	and.w	r3, r3, #3
90007b86:	4a6b      	ldr	r2, [pc, #428]	@ (90007d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007b88:	fa22 f303 	lsr.w	r3, r2, r3
90007b8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007b8e:	687b      	ldr	r3, [r7, #4]
90007b90:	ee07 3a90 	vmov	s15, r3
90007b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007b98:	693b      	ldr	r3, [r7, #16]
90007b9a:	ee07 3a90 	vmov	s15, r3
90007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007ba6:	4b62      	ldr	r3, [pc, #392]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007bae:	ee07 3a90 	vmov	s15, r3
90007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007bb6:	ed97 6a02 	vldr	s12, [r7, #8]
90007bba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
90007bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007bce:	ee67 7a27 	vmul.f32	s15, s14, s15
90007bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90007bd6:	e087      	b.n	90007ce8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007bd8:	693b      	ldr	r3, [r7, #16]
90007bda:	ee07 3a90 	vmov	s15, r3
90007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007be2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007d44 <HAL_RCC_GetSysClockFreq+0x2e8>
90007be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007bea:	4b51      	ldr	r3, [pc, #324]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007bf2:	ee07 3a90 	vmov	s15, r3
90007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007bfa:	ed97 6a02 	vldr	s12, [r7, #8]
90007bfe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
90007c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
90007c16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007c1a:	e065      	b.n	90007ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007c1c:	693b      	ldr	r3, [r7, #16]
90007c1e:	ee07 3a90 	vmov	s15, r3
90007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007c26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007d48 <HAL_RCC_GetSysClockFreq+0x2ec>
90007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007c2e:	4b40      	ldr	r3, [pc, #256]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007c36:	ee07 3a90 	vmov	s15, r3
90007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007c3e:	ed97 6a02 	vldr	s12, [r7, #8]
90007c42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
90007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
90007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007c5e:	e043      	b.n	90007ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007c60:	693b      	ldr	r3, [r7, #16]
90007c62:	ee07 3a90 	vmov	s15, r3
90007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007c6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007d4c <HAL_RCC_GetSysClockFreq+0x2f0>
90007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007c72:	4b2f      	ldr	r3, [pc, #188]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007c7a:	ee07 3a90 	vmov	s15, r3
90007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007c82:	ed97 6a02 	vldr	s12, [r7, #8]
90007c86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
90007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
90007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007ca2:	e021      	b.n	90007ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007ca4:	693b      	ldr	r3, [r7, #16]
90007ca6:	ee07 3a90 	vmov	s15, r3
90007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007cae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007d48 <HAL_RCC_GetSysClockFreq+0x2ec>
90007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007cb6:	4b1e      	ldr	r3, [pc, #120]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007cbe:	ee07 3a90 	vmov	s15, r3
90007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007cc6:	ed97 6a02 	vldr	s12, [r7, #8]
90007cca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
90007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
90007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007ce6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007ce8:	4b11      	ldr	r3, [pc, #68]	@ (90007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007cec:	0a5b      	lsrs	r3, r3, #9
90007cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007cf2:	3301      	adds	r3, #1
90007cf4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007cf6:	683b      	ldr	r3, [r7, #0]
90007cf8:	ee07 3a90 	vmov	s15, r3
90007cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007d00:	edd7 6a07 	vldr	s13, [r7, #28]
90007d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007d0c:	ee17 3a90 	vmov	r3, s15
90007d10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007d12:	e005      	b.n	90007d20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007d14:	2300      	movs	r3, #0
90007d16:	61bb      	str	r3, [r7, #24]
      break;
90007d18:	e002      	b.n	90007d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007d1a:	4b07      	ldr	r3, [pc, #28]	@ (90007d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007d1c:	61bb      	str	r3, [r7, #24]
      break;
90007d1e:	bf00      	nop
  }

  return sysclockfreq;
90007d20:	69bb      	ldr	r3, [r7, #24]
}
90007d22:	4618      	mov	r0, r3
90007d24:	3724      	adds	r7, #36	@ 0x24
90007d26:	46bd      	mov	sp, r7
90007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
90007d2c:	4770      	bx	lr
90007d2e:	bf00      	nop
90007d30:	58024400 	.word	0x58024400
90007d34:	03d09000 	.word	0x03d09000
90007d38:	003d0900 	.word	0x003d0900
90007d3c:	017d7840 	.word	0x017d7840
90007d40:	46000000 	.word	0x46000000
90007d44:	4c742400 	.word	0x4c742400
90007d48:	4a742400 	.word	0x4a742400
90007d4c:	4bbebc20 	.word	0x4bbebc20

90007d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007d50:	b580      	push	{r7, lr}
90007d52:	b082      	sub	sp, #8
90007d54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007d56:	f7ff fe81 	bl	90007a5c <HAL_RCC_GetSysClockFreq>
90007d5a:	4602      	mov	r2, r0
90007d5c:	4b10      	ldr	r3, [pc, #64]	@ (90007da0 <HAL_RCC_GetHCLKFreq+0x50>)
90007d5e:	699b      	ldr	r3, [r3, #24]
90007d60:	0a1b      	lsrs	r3, r3, #8
90007d62:	f003 030f 	and.w	r3, r3, #15
90007d66:	490f      	ldr	r1, [pc, #60]	@ (90007da4 <HAL_RCC_GetHCLKFreq+0x54>)
90007d68:	5ccb      	ldrb	r3, [r1, r3]
90007d6a:	f003 031f 	and.w	r3, r3, #31
90007d6e:	fa22 f303 	lsr.w	r3, r2, r3
90007d72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007d74:	4b0a      	ldr	r3, [pc, #40]	@ (90007da0 <HAL_RCC_GetHCLKFreq+0x50>)
90007d76:	699b      	ldr	r3, [r3, #24]
90007d78:	f003 030f 	and.w	r3, r3, #15
90007d7c:	4a09      	ldr	r2, [pc, #36]	@ (90007da4 <HAL_RCC_GetHCLKFreq+0x54>)
90007d7e:	5cd3      	ldrb	r3, [r2, r3]
90007d80:	f003 031f 	and.w	r3, r3, #31
90007d84:	687a      	ldr	r2, [r7, #4]
90007d86:	fa22 f303 	lsr.w	r3, r2, r3
90007d8a:	4a07      	ldr	r2, [pc, #28]	@ (90007da8 <HAL_RCC_GetHCLKFreq+0x58>)
90007d8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007d8e:	4a07      	ldr	r2, [pc, #28]	@ (90007dac <HAL_RCC_GetHCLKFreq+0x5c>)
90007d90:	687b      	ldr	r3, [r7, #4]
90007d92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007d94:	4b04      	ldr	r3, [pc, #16]	@ (90007da8 <HAL_RCC_GetHCLKFreq+0x58>)
90007d96:	681b      	ldr	r3, [r3, #0]
}
90007d98:	4618      	mov	r0, r3
90007d9a:	3708      	adds	r7, #8
90007d9c:	46bd      	mov	sp, r7
90007d9e:	bd80      	pop	{r7, pc}
90007da0:	58024400 	.word	0x58024400
90007da4:	9000aa3c 	.word	0x9000aa3c
90007da8:	2000003c 	.word	0x2000003c
90007dac:	20000038 	.word	0x20000038

90007db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007db0:	b580      	push	{r7, lr}
90007db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007db4:	f7ff ffcc 	bl	90007d50 <HAL_RCC_GetHCLKFreq>
90007db8:	4602      	mov	r2, r0
90007dba:	4b06      	ldr	r3, [pc, #24]	@ (90007dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
90007dbc:	69db      	ldr	r3, [r3, #28]
90007dbe:	0a1b      	lsrs	r3, r3, #8
90007dc0:	f003 0307 	and.w	r3, r3, #7
90007dc4:	4904      	ldr	r1, [pc, #16]	@ (90007dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
90007dc6:	5ccb      	ldrb	r3, [r1, r3]
90007dc8:	f003 031f 	and.w	r3, r3, #31
90007dcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007dd0:	4618      	mov	r0, r3
90007dd2:	bd80      	pop	{r7, pc}
90007dd4:	58024400 	.word	0x58024400
90007dd8:	9000aa3c 	.word	0x9000aa3c

90007ddc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007de0:	b0ca      	sub	sp, #296	@ 0x128
90007de2:	af00      	add	r7, sp, #0
90007de4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007de8:	2300      	movs	r3, #0
90007dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007dee:	2300      	movs	r3, #0
90007df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
90007dfc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007e00:	2500      	movs	r5, #0
90007e02:	ea54 0305 	orrs.w	r3, r4, r5
90007e06:	d049      	beq.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007e0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007e12:	d02f      	beq.n	90007e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007e14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007e18:	d828      	bhi.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
90007e1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007e1e:	d01a      	beq.n	90007e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007e20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007e24:	d822      	bhi.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
90007e26:	2b00      	cmp	r3, #0
90007e28:	d003      	beq.n	90007e32 <HAL_RCCEx_PeriphCLKConfig+0x56>
90007e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007e2e:	d007      	beq.n	90007e40 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007e30:	e01c      	b.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e32:	4bb8      	ldr	r3, [pc, #736]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e36:	4ab7      	ldr	r2, [pc, #732]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007e3e:	e01a      	b.n	90007e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e44:	3308      	adds	r3, #8
90007e46:	2102      	movs	r1, #2
90007e48:	4618      	mov	r0, r3
90007e4a:	f001 f9d1 	bl	900091f0 <RCCEx_PLL2_Config>
90007e4e:	4603      	mov	r3, r0
90007e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007e54:	e00f      	b.n	90007e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e5a:	3328      	adds	r3, #40	@ 0x28
90007e5c:	2102      	movs	r1, #2
90007e5e:	4618      	mov	r0, r3
90007e60:	f001 fa78 	bl	90009354 <RCCEx_PLL3_Config>
90007e64:	4603      	mov	r3, r0
90007e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007e6a:	e004      	b.n	90007e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007e6c:	2301      	movs	r3, #1
90007e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007e72:	e000      	b.n	90007e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007e74:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e7a:	2b00      	cmp	r3, #0
90007e7c:	d10a      	bne.n	90007e94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007e7e:	4ba5      	ldr	r3, [pc, #660]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007e82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007e8c:	4aa1      	ldr	r2, [pc, #644]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e8e:	430b      	orrs	r3, r1
90007e90:	6513      	str	r3, [r2, #80]	@ 0x50
90007e92:	e003      	b.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ea4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007ea8:	f04f 0900 	mov.w	r9, #0
90007eac:	ea58 0309 	orrs.w	r3, r8, r9
90007eb0:	d047      	beq.n	90007f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007eb8:	2b04      	cmp	r3, #4
90007eba:	d82a      	bhi.n	90007f12 <HAL_RCCEx_PeriphCLKConfig+0x136>
90007ebc:	a201      	add	r2, pc, #4	@ (adr r2, 90007ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007ec2:	bf00      	nop
90007ec4:	90007ed9 	.word	0x90007ed9
90007ec8:	90007ee7 	.word	0x90007ee7
90007ecc:	90007efd 	.word	0x90007efd
90007ed0:	90007f1b 	.word	0x90007f1b
90007ed4:	90007f1b 	.word	0x90007f1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ed8:	4b8e      	ldr	r3, [pc, #568]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007edc:	4a8d      	ldr	r2, [pc, #564]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ee4:	e01a      	b.n	90007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007eea:	3308      	adds	r3, #8
90007eec:	2100      	movs	r1, #0
90007eee:	4618      	mov	r0, r3
90007ef0:	f001 f97e 	bl	900091f0 <RCCEx_PLL2_Config>
90007ef4:	4603      	mov	r3, r0
90007ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007efa:	e00f      	b.n	90007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f00:	3328      	adds	r3, #40	@ 0x28
90007f02:	2100      	movs	r1, #0
90007f04:	4618      	mov	r0, r3
90007f06:	f001 fa25 	bl	90009354 <RCCEx_PLL3_Config>
90007f0a:	4603      	mov	r3, r0
90007f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f10:	e004      	b.n	90007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007f12:	2301      	movs	r3, #1
90007f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f18:	e000      	b.n	90007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f20:	2b00      	cmp	r3, #0
90007f22:	d10a      	bne.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007f24:	4b7b      	ldr	r3, [pc, #492]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007f28:	f023 0107 	bic.w	r1, r3, #7
90007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007f32:	4a78      	ldr	r2, [pc, #480]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f34:	430b      	orrs	r3, r1
90007f36:	6513      	str	r3, [r2, #80]	@ 0x50
90007f38:	e003      	b.n	90007f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007f4e:	f04f 0b00 	mov.w	fp, #0
90007f52:	ea5a 030b 	orrs.w	r3, sl, fp
90007f56:	d04c      	beq.n	90007ff2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007f62:	d030      	beq.n	90007fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007f68:	d829      	bhi.n	90007fbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007f6a:	2bc0      	cmp	r3, #192	@ 0xc0
90007f6c:	d02d      	beq.n	90007fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007f6e:	2bc0      	cmp	r3, #192	@ 0xc0
90007f70:	d825      	bhi.n	90007fbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007f72:	2b80      	cmp	r3, #128	@ 0x80
90007f74:	d018      	beq.n	90007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007f76:	2b80      	cmp	r3, #128	@ 0x80
90007f78:	d821      	bhi.n	90007fbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007f7a:	2b00      	cmp	r3, #0
90007f7c:	d002      	beq.n	90007f84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007f7e:	2b40      	cmp	r3, #64	@ 0x40
90007f80:	d007      	beq.n	90007f92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007f82:	e01c      	b.n	90007fbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f84:	4b63      	ldr	r3, [pc, #396]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f88:	4a62      	ldr	r2, [pc, #392]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007f90:	e01c      	b.n	90007fcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f96:	3308      	adds	r3, #8
90007f98:	2100      	movs	r1, #0
90007f9a:	4618      	mov	r0, r3
90007f9c:	f001 f928 	bl	900091f0 <RCCEx_PLL2_Config>
90007fa0:	4603      	mov	r3, r0
90007fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007fa6:	e011      	b.n	90007fcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fac:	3328      	adds	r3, #40	@ 0x28
90007fae:	2100      	movs	r1, #0
90007fb0:	4618      	mov	r0, r3
90007fb2:	f001 f9cf 	bl	90009354 <RCCEx_PLL3_Config>
90007fb6:	4603      	mov	r3, r0
90007fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007fbc:	e006      	b.n	90007fcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007fbe:	2301      	movs	r3, #1
90007fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007fc4:	e002      	b.n	90007fcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007fc6:	bf00      	nop
90007fc8:	e000      	b.n	90007fcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007fca:	bf00      	nop
    }

    if (ret == HAL_OK)
90007fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fd0:	2b00      	cmp	r3, #0
90007fd2:	d10a      	bne.n	90007fea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007fd4:	4b4f      	ldr	r3, [pc, #316]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007fd8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007fe2:	4a4c      	ldr	r2, [pc, #304]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007fe4:	430b      	orrs	r3, r1
90007fe6:	6513      	str	r3, [r2, #80]	@ 0x50
90007fe8:	e003      	b.n	90007ff2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ffa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007ffe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90008002:	2300      	movs	r3, #0
90008004:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90008008:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
9000800c:	460b      	mov	r3, r1
9000800e:	4313      	orrs	r3, r2
90008010:	d053      	beq.n	900080ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008016:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
9000801a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
9000801e:	d035      	beq.n	9000808c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90008020:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90008024:	d82e      	bhi.n	90008084 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008026:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
9000802a:	d031      	beq.n	90008090 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
9000802c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90008030:	d828      	bhi.n	90008084 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90008036:	d01a      	beq.n	9000806e <HAL_RCCEx_PeriphCLKConfig+0x292>
90008038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
9000803c:	d822      	bhi.n	90008084 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000803e:	2b00      	cmp	r3, #0
90008040:	d003      	beq.n	9000804a <HAL_RCCEx_PeriphCLKConfig+0x26e>
90008042:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008046:	d007      	beq.n	90008058 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90008048:	e01c      	b.n	90008084 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000804a:	4b32      	ldr	r3, [pc, #200]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000804e:	4a31      	ldr	r2, [pc, #196]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008056:	e01c      	b.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000805c:	3308      	adds	r3, #8
9000805e:	2100      	movs	r1, #0
90008060:	4618      	mov	r0, r3
90008062:	f001 f8c5 	bl	900091f0 <RCCEx_PLL2_Config>
90008066:	4603      	mov	r3, r0
90008068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
9000806c:	e011      	b.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008072:	3328      	adds	r3, #40	@ 0x28
90008074:	2100      	movs	r1, #0
90008076:	4618      	mov	r0, r3
90008078:	f001 f96c 	bl	90009354 <RCCEx_PLL3_Config>
9000807c:	4603      	mov	r3, r0
9000807e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008082:	e006      	b.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90008084:	2301      	movs	r3, #1
90008086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000808a:	e002      	b.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
9000808c:	bf00      	nop
9000808e:	e000      	b.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90008090:	bf00      	nop
    }

    if (ret == HAL_OK)
90008092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008096:	2b00      	cmp	r3, #0
90008098:	d10b      	bne.n	900080b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000809a:	4b1e      	ldr	r3, [pc, #120]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000809c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000809e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
900080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
900080aa:	4a1a      	ldr	r2, [pc, #104]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900080ac:	430b      	orrs	r3, r1
900080ae:	6593      	str	r3, [r2, #88]	@ 0x58
900080b0:	e003      	b.n	900080ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
900080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
900080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080be:	e9d3 2300 	ldrd	r2, r3, [r3]
900080c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
900080c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
900080ca:	2300      	movs	r3, #0
900080cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
900080d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
900080d4:	460b      	mov	r3, r1
900080d6:	4313      	orrs	r3, r2
900080d8:	d056      	beq.n	90008188 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
900080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
900080e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
900080e6:	d038      	beq.n	9000815a <HAL_RCCEx_PeriphCLKConfig+0x37e>
900080e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
900080ec:	d831      	bhi.n	90008152 <HAL_RCCEx_PeriphCLKConfig+0x376>
900080ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
900080f2:	d034      	beq.n	9000815e <HAL_RCCEx_PeriphCLKConfig+0x382>
900080f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
900080f8:	d82b      	bhi.n	90008152 <HAL_RCCEx_PeriphCLKConfig+0x376>
900080fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
900080fe:	d01d      	beq.n	9000813c <HAL_RCCEx_PeriphCLKConfig+0x360>
90008100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90008104:	d825      	bhi.n	90008152 <HAL_RCCEx_PeriphCLKConfig+0x376>
90008106:	2b00      	cmp	r3, #0
90008108:	d006      	beq.n	90008118 <HAL_RCCEx_PeriphCLKConfig+0x33c>
9000810a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000810e:	d00a      	beq.n	90008126 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90008110:	e01f      	b.n	90008152 <HAL_RCCEx_PeriphCLKConfig+0x376>
90008112:	bf00      	nop
90008114:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008118:	4ba2      	ldr	r3, [pc, #648]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000811a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000811c:	4aa1      	ldr	r2, [pc, #644]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000811e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008124:	e01c      	b.n	90008160 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000812a:	3308      	adds	r3, #8
9000812c:	2100      	movs	r1, #0
9000812e:	4618      	mov	r0, r3
90008130:	f001 f85e 	bl	900091f0 <RCCEx_PLL2_Config>
90008134:	4603      	mov	r3, r0
90008136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
9000813a:	e011      	b.n	90008160 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008140:	3328      	adds	r3, #40	@ 0x28
90008142:	2100      	movs	r1, #0
90008144:	4618      	mov	r0, r3
90008146:	f001 f905 	bl	90009354 <RCCEx_PLL3_Config>
9000814a:	4603      	mov	r3, r0
9000814c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008150:	e006      	b.n	90008160 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90008152:	2301      	movs	r3, #1
90008154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008158:	e002      	b.n	90008160 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
9000815a:	bf00      	nop
9000815c:	e000      	b.n	90008160 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
9000815e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008164:	2b00      	cmp	r3, #0
90008166:	d10b      	bne.n	90008180 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90008168:	4b8e      	ldr	r3, [pc, #568]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000816a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000816c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008174:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90008178:	4a8a      	ldr	r2, [pc, #552]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000817a:	430b      	orrs	r3, r1
9000817c:	6593      	str	r3, [r2, #88]	@ 0x58
9000817e:	e003      	b.n	90008188 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000818c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008190:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90008194:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90008198:	2300      	movs	r3, #0
9000819a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
9000819e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
900081a2:	460b      	mov	r3, r1
900081a4:	4313      	orrs	r3, r2
900081a6:	d03a      	beq.n	9000821e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
900081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900081ae:	2b30      	cmp	r3, #48	@ 0x30
900081b0:	d01f      	beq.n	900081f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
900081b2:	2b30      	cmp	r3, #48	@ 0x30
900081b4:	d819      	bhi.n	900081ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
900081b6:	2b20      	cmp	r3, #32
900081b8:	d00c      	beq.n	900081d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
900081ba:	2b20      	cmp	r3, #32
900081bc:	d815      	bhi.n	900081ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
900081be:	2b00      	cmp	r3, #0
900081c0:	d019      	beq.n	900081f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
900081c2:	2b10      	cmp	r3, #16
900081c4:	d111      	bne.n	900081ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900081c6:	4b77      	ldr	r3, [pc, #476]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900081ca:	4a76      	ldr	r2, [pc, #472]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900081d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
900081d2:	e011      	b.n	900081f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081d8:	3308      	adds	r3, #8
900081da:	2102      	movs	r1, #2
900081dc:	4618      	mov	r0, r3
900081de:	f001 f807 	bl	900091f0 <RCCEx_PLL2_Config>
900081e2:	4603      	mov	r3, r0
900081e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
900081e8:	e006      	b.n	900081f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
900081ea:	2301      	movs	r3, #1
900081ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081f0:	e002      	b.n	900081f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
900081f2:	bf00      	nop
900081f4:	e000      	b.n	900081f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
900081f6:	bf00      	nop
    }

    if (ret == HAL_OK)
900081f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081fc:	2b00      	cmp	r3, #0
900081fe:	d10a      	bne.n	90008216 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90008200:	4b68      	ldr	r3, [pc, #416]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008204:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000820c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000820e:	4a65      	ldr	r2, [pc, #404]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008210:	430b      	orrs	r3, r1
90008212:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008214:	e003      	b.n	9000821e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000821a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000821e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008222:	e9d3 2300 	ldrd	r2, r3, [r3]
90008226:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
9000822a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
9000822e:	2300      	movs	r3, #0
90008230:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90008234:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90008238:	460b      	mov	r3, r1
9000823a:	4313      	orrs	r3, r2
9000823c:	d051      	beq.n	900082e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
9000823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008244:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008248:	d035      	beq.n	900082b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
9000824a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000824e:	d82e      	bhi.n	900082ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008250:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90008254:	d031      	beq.n	900082ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
90008256:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
9000825a:	d828      	bhi.n	900082ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
9000825c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008260:	d01a      	beq.n	90008298 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90008262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008266:	d822      	bhi.n	900082ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008268:	2b00      	cmp	r3, #0
9000826a:	d003      	beq.n	90008274 <HAL_RCCEx_PeriphCLKConfig+0x498>
9000826c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008270:	d007      	beq.n	90008282 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90008272:	e01c      	b.n	900082ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008274:	4b4b      	ldr	r3, [pc, #300]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008278:	4a4a      	ldr	r2, [pc, #296]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000827a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000827e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008280:	e01c      	b.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008286:	3308      	adds	r3, #8
90008288:	2100      	movs	r1, #0
9000828a:	4618      	mov	r0, r3
9000828c:	f000 ffb0 	bl	900091f0 <RCCEx_PLL2_Config>
90008290:	4603      	mov	r3, r0
90008292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008296:	e011      	b.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000829c:	3328      	adds	r3, #40	@ 0x28
9000829e:	2100      	movs	r1, #0
900082a0:	4618      	mov	r0, r3
900082a2:	f001 f857 	bl	90009354 <RCCEx_PLL3_Config>
900082a6:	4603      	mov	r3, r0
900082a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900082ac:	e006      	b.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900082ae:	2301      	movs	r3, #1
900082b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900082b4:	e002      	b.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900082b6:	bf00      	nop
900082b8:	e000      	b.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900082ba:	bf00      	nop
    }

    if (ret == HAL_OK)
900082bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082c0:	2b00      	cmp	r3, #0
900082c2:	d10a      	bne.n	900082da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
900082c4:	4b37      	ldr	r3, [pc, #220]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900082c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900082c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
900082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
900082d2:	4a34      	ldr	r2, [pc, #208]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900082d4:	430b      	orrs	r3, r1
900082d6:	6513      	str	r3, [r2, #80]	@ 0x50
900082d8:	e003      	b.n	900082e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
900082da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
900082ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
900082ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
900082f2:	2300      	movs	r3, #0
900082f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
900082f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
900082fc:	460b      	mov	r3, r1
900082fe:	4313      	orrs	r3, r2
90008300:	d056      	beq.n	900083b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000830c:	d033      	beq.n	90008376 <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000830e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008312:	d82c      	bhi.n	9000836e <HAL_RCCEx_PeriphCLKConfig+0x592>
90008314:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008318:	d02f      	beq.n	9000837a <HAL_RCCEx_PeriphCLKConfig+0x59e>
9000831a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000831e:	d826      	bhi.n	9000836e <HAL_RCCEx_PeriphCLKConfig+0x592>
90008320:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008324:	d02b      	beq.n	9000837e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90008326:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
9000832a:	d820      	bhi.n	9000836e <HAL_RCCEx_PeriphCLKConfig+0x592>
9000832c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008330:	d012      	beq.n	90008358 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90008332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008336:	d81a      	bhi.n	9000836e <HAL_RCCEx_PeriphCLKConfig+0x592>
90008338:	2b00      	cmp	r3, #0
9000833a:	d022      	beq.n	90008382 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
9000833c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008340:	d115      	bne.n	9000836e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008346:	3308      	adds	r3, #8
90008348:	2101      	movs	r1, #1
9000834a:	4618      	mov	r0, r3
9000834c:	f000 ff50 	bl	900091f0 <RCCEx_PLL2_Config>
90008350:	4603      	mov	r3, r0
90008352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008356:	e015      	b.n	90008384 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000835c:	3328      	adds	r3, #40	@ 0x28
9000835e:	2101      	movs	r1, #1
90008360:	4618      	mov	r0, r3
90008362:	f000 fff7 	bl	90009354 <RCCEx_PLL3_Config>
90008366:	4603      	mov	r3, r0
90008368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000836c:	e00a      	b.n	90008384 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000836e:	2301      	movs	r3, #1
90008370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008374:	e006      	b.n	90008384 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008376:	bf00      	nop
90008378:	e004      	b.n	90008384 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000837a:	bf00      	nop
9000837c:	e002      	b.n	90008384 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000837e:	bf00      	nop
90008380:	e000      	b.n	90008384 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008382:	bf00      	nop
    }

    if (ret == HAL_OK)
90008384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008388:	2b00      	cmp	r3, #0
9000838a:	d10d      	bne.n	900083a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000838c:	4b05      	ldr	r3, [pc, #20]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000838e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008390:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90008394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000839a:	4a02      	ldr	r2, [pc, #8]	@ (900083a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000839c:	430b      	orrs	r3, r1
9000839e:	6513      	str	r3, [r2, #80]	@ 0x50
900083a0:	e006      	b.n	900083b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
900083a2:	bf00      	nop
900083a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900083a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
900083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
900083b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
900083bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
900083c0:	2300      	movs	r3, #0
900083c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
900083c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
900083ca:	460b      	mov	r3, r1
900083cc:	4313      	orrs	r3, r2
900083ce:	d055      	beq.n	9000847c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900083d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900083d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900083dc:	d033      	beq.n	90008446 <HAL_RCCEx_PeriphCLKConfig+0x66a>
900083de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900083e2:	d82c      	bhi.n	9000843e <HAL_RCCEx_PeriphCLKConfig+0x662>
900083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900083e8:	d02f      	beq.n	9000844a <HAL_RCCEx_PeriphCLKConfig+0x66e>
900083ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900083ee:	d826      	bhi.n	9000843e <HAL_RCCEx_PeriphCLKConfig+0x662>
900083f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900083f4:	d02b      	beq.n	9000844e <HAL_RCCEx_PeriphCLKConfig+0x672>
900083f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900083fa:	d820      	bhi.n	9000843e <HAL_RCCEx_PeriphCLKConfig+0x662>
900083fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008400:	d012      	beq.n	90008428 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008406:	d81a      	bhi.n	9000843e <HAL_RCCEx_PeriphCLKConfig+0x662>
90008408:	2b00      	cmp	r3, #0
9000840a:	d022      	beq.n	90008452 <HAL_RCCEx_PeriphCLKConfig+0x676>
9000840c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008410:	d115      	bne.n	9000843e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008416:	3308      	adds	r3, #8
90008418:	2101      	movs	r1, #1
9000841a:	4618      	mov	r0, r3
9000841c:	f000 fee8 	bl	900091f0 <RCCEx_PLL2_Config>
90008420:	4603      	mov	r3, r0
90008422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008426:	e015      	b.n	90008454 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000842c:	3328      	adds	r3, #40	@ 0x28
9000842e:	2101      	movs	r1, #1
90008430:	4618      	mov	r0, r3
90008432:	f000 ff8f 	bl	90009354 <RCCEx_PLL3_Config>
90008436:	4603      	mov	r3, r0
90008438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000843c:	e00a      	b.n	90008454 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000843e:	2301      	movs	r3, #1
90008440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008444:	e006      	b.n	90008454 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008446:	bf00      	nop
90008448:	e004      	b.n	90008454 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000844a:	bf00      	nop
9000844c:	e002      	b.n	90008454 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000844e:	bf00      	nop
90008450:	e000      	b.n	90008454 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008452:	bf00      	nop
    }

    if (ret == HAL_OK)
90008454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008458:	2b00      	cmp	r3, #0
9000845a:	d10b      	bne.n	90008474 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000845c:	4ba3      	ldr	r3, [pc, #652]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000845e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008460:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
9000846c:	4a9f      	ldr	r2, [pc, #636]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000846e:	430b      	orrs	r3, r1
90008470:	6593      	str	r3, [r2, #88]	@ 0x58
90008472:	e003      	b.n	9000847c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008480:	e9d3 2300 	ldrd	r2, r3, [r3]
90008484:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90008488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
9000848c:	2300      	movs	r3, #0
9000848e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90008492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008496:	460b      	mov	r3, r1
90008498:	4313      	orrs	r3, r2
9000849a:	d037      	beq.n	9000850c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
9000849c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900084a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900084a6:	d00e      	beq.n	900084c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900084a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900084ac:	d816      	bhi.n	900084dc <HAL_RCCEx_PeriphCLKConfig+0x700>
900084ae:	2b00      	cmp	r3, #0
900084b0:	d018      	beq.n	900084e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
900084b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900084b6:	d111      	bne.n	900084dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900084b8:	4b8c      	ldr	r3, [pc, #560]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900084bc:	4a8b      	ldr	r2, [pc, #556]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900084c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900084c4:	e00f      	b.n	900084e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084ca:	3308      	adds	r3, #8
900084cc:	2101      	movs	r1, #1
900084ce:	4618      	mov	r0, r3
900084d0:	f000 fe8e 	bl	900091f0 <RCCEx_PLL2_Config>
900084d4:	4603      	mov	r3, r0
900084d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900084da:	e004      	b.n	900084e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900084dc:	2301      	movs	r3, #1
900084de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900084e2:	e000      	b.n	900084e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900084e4:	bf00      	nop
    }

    if (ret == HAL_OK)
900084e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084ea:	2b00      	cmp	r3, #0
900084ec:	d10a      	bne.n	90008504 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
900084ee:	4b7f      	ldr	r3, [pc, #508]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900084f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
900084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900084fc:	4a7b      	ldr	r2, [pc, #492]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084fe:	430b      	orrs	r3, r1
90008500:	6513      	str	r3, [r2, #80]	@ 0x50
90008502:	e003      	b.n	9000850c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000850c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008510:	e9d3 2300 	ldrd	r2, r3, [r3]
90008514:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
9000851c:	2300      	movs	r3, #0
9000851e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90008522:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008526:	460b      	mov	r3, r1
90008528:	4313      	orrs	r3, r2
9000852a:	d039      	beq.n	900085a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
9000852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008532:	2b03      	cmp	r3, #3
90008534:	d81c      	bhi.n	90008570 <HAL_RCCEx_PeriphCLKConfig+0x794>
90008536:	a201      	add	r2, pc, #4	@ (adr r2, 9000853c <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000853c:	90008579 	.word	0x90008579
90008540:	9000854d 	.word	0x9000854d
90008544:	9000855b 	.word	0x9000855b
90008548:	90008579 	.word	0x90008579
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000854c:	4b67      	ldr	r3, [pc, #412]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000854e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008550:	4a66      	ldr	r2, [pc, #408]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008558:	e00f      	b.n	9000857a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000855a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000855e:	3308      	adds	r3, #8
90008560:	2102      	movs	r1, #2
90008562:	4618      	mov	r0, r3
90008564:	f000 fe44 	bl	900091f0 <RCCEx_PLL2_Config>
90008568:	4603      	mov	r3, r0
9000856a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
9000856e:	e004      	b.n	9000857a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008570:	2301      	movs	r3, #1
90008572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008576:	e000      	b.n	9000857a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008578:	bf00      	nop
    }

    if (ret == HAL_OK)
9000857a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000857e:	2b00      	cmp	r3, #0
90008580:	d10a      	bne.n	90008598 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90008582:	4b5a      	ldr	r3, [pc, #360]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008586:	f023 0103 	bic.w	r1, r3, #3
9000858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000858e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008590:	4a56      	ldr	r2, [pc, #344]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008592:	430b      	orrs	r3, r1
90008594:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008596:	e003      	b.n	900085a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000859c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
900085a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900085ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
900085b0:	2300      	movs	r3, #0
900085b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
900085b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
900085ba:	460b      	mov	r3, r1
900085bc:	4313      	orrs	r3, r2
900085be:	f000 809f 	beq.w	90008700 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900085c2:	4b4b      	ldr	r3, [pc, #300]	@ (900086f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900085c4:	681b      	ldr	r3, [r3, #0]
900085c6:	4a4a      	ldr	r2, [pc, #296]	@ (900086f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900085c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900085cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900085ce:	f7fa fd1d 	bl	9000300c <HAL_GetTick>
900085d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900085d6:	e00b      	b.n	900085f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900085d8:	f7fa fd18 	bl	9000300c <HAL_GetTick>
900085dc:	4602      	mov	r2, r0
900085de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900085e2:	1ad3      	subs	r3, r2, r3
900085e4:	2b64      	cmp	r3, #100	@ 0x64
900085e6:	d903      	bls.n	900085f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
900085e8:	2303      	movs	r3, #3
900085ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900085ee:	e005      	b.n	900085fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900085f0:	4b3f      	ldr	r3, [pc, #252]	@ (900086f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900085f2:	681b      	ldr	r3, [r3, #0]
900085f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900085f8:	2b00      	cmp	r3, #0
900085fa:	d0ed      	beq.n	900085d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
900085fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008600:	2b00      	cmp	r3, #0
90008602:	d179      	bne.n	900086f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008604:	4b39      	ldr	r3, [pc, #228]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008606:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000860c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008610:	4053      	eors	r3, r2
90008612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008616:	2b00      	cmp	r3, #0
90008618:	d015      	beq.n	90008646 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000861a:	4b34      	ldr	r3, [pc, #208]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000861c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000861e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008622:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008626:	4b31      	ldr	r3, [pc, #196]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000862a:	4a30      	ldr	r2, [pc, #192]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000862c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90008630:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90008632:	4b2e      	ldr	r3, [pc, #184]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008636:	4a2d      	ldr	r2, [pc, #180]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000863c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
9000863e:	4a2b      	ldr	r2, [pc, #172]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008644:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000864a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000864e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008652:	d118      	bne.n	90008686 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008654:	f7fa fcda 	bl	9000300c <HAL_GetTick>
90008658:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000865c:	e00d      	b.n	9000867a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000865e:	f7fa fcd5 	bl	9000300c <HAL_GetTick>
90008662:	4602      	mov	r2, r0
90008664:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008668:	1ad2      	subs	r2, r2, r3
9000866a:	f241 3388 	movw	r3, #5000	@ 0x1388
9000866e:	429a      	cmp	r2, r3
90008670:	d903      	bls.n	9000867a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90008672:	2303      	movs	r3, #3
90008674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90008678:	e005      	b.n	90008686 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000867a:	4b1c      	ldr	r3, [pc, #112]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000867c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000867e:	f003 0302 	and.w	r3, r3, #2
90008682:	2b00      	cmp	r3, #0
90008684:	d0eb      	beq.n	9000865e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90008686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000868a:	2b00      	cmp	r3, #0
9000868c:	d129      	bne.n	900086e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000869a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000869e:	d10e      	bne.n	900086be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
900086a0:	4b12      	ldr	r3, [pc, #72]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086a2:	691b      	ldr	r3, [r3, #16]
900086a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
900086a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900086b0:	091a      	lsrs	r2, r3, #4
900086b2:	4b10      	ldr	r3, [pc, #64]	@ (900086f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
900086b4:	4013      	ands	r3, r2
900086b6:	4a0d      	ldr	r2, [pc, #52]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086b8:	430b      	orrs	r3, r1
900086ba:	6113      	str	r3, [r2, #16]
900086bc:	e005      	b.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
900086be:	4b0b      	ldr	r3, [pc, #44]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086c0:	691b      	ldr	r3, [r3, #16]
900086c2:	4a0a      	ldr	r2, [pc, #40]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
900086c8:	6113      	str	r3, [r2, #16]
900086ca:	4b08      	ldr	r3, [pc, #32]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
900086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900086d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
900086da:	4a04      	ldr	r2, [pc, #16]	@ (900086ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086dc:	430b      	orrs	r3, r1
900086de:	6713      	str	r3, [r2, #112]	@ 0x70
900086e0:	e00e      	b.n	90008700 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
900086ea:	e009      	b.n	90008700 <HAL_RCCEx_PeriphCLKConfig+0x924>
900086ec:	58024400 	.word	0x58024400
900086f0:	58024800 	.word	0x58024800
900086f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
900086f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008704:	e9d3 2300 	ldrd	r2, r3, [r3]
90008708:	f002 0301 	and.w	r3, r2, #1
9000870c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008710:	2300      	movs	r3, #0
90008712:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008716:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
9000871a:	460b      	mov	r3, r1
9000871c:	4313      	orrs	r3, r2
9000871e:	f000 8089 	beq.w	90008834 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008726:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008728:	2b28      	cmp	r3, #40	@ 0x28
9000872a:	d86b      	bhi.n	90008804 <HAL_RCCEx_PeriphCLKConfig+0xa28>
9000872c:	a201      	add	r2, pc, #4	@ (adr r2, 90008734 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008732:	bf00      	nop
90008734:	9000880d 	.word	0x9000880d
90008738:	90008805 	.word	0x90008805
9000873c:	90008805 	.word	0x90008805
90008740:	90008805 	.word	0x90008805
90008744:	90008805 	.word	0x90008805
90008748:	90008805 	.word	0x90008805
9000874c:	90008805 	.word	0x90008805
90008750:	90008805 	.word	0x90008805
90008754:	900087d9 	.word	0x900087d9
90008758:	90008805 	.word	0x90008805
9000875c:	90008805 	.word	0x90008805
90008760:	90008805 	.word	0x90008805
90008764:	90008805 	.word	0x90008805
90008768:	90008805 	.word	0x90008805
9000876c:	90008805 	.word	0x90008805
90008770:	90008805 	.word	0x90008805
90008774:	900087ef 	.word	0x900087ef
90008778:	90008805 	.word	0x90008805
9000877c:	90008805 	.word	0x90008805
90008780:	90008805 	.word	0x90008805
90008784:	90008805 	.word	0x90008805
90008788:	90008805 	.word	0x90008805
9000878c:	90008805 	.word	0x90008805
90008790:	90008805 	.word	0x90008805
90008794:	9000880d 	.word	0x9000880d
90008798:	90008805 	.word	0x90008805
9000879c:	90008805 	.word	0x90008805
900087a0:	90008805 	.word	0x90008805
900087a4:	90008805 	.word	0x90008805
900087a8:	90008805 	.word	0x90008805
900087ac:	90008805 	.word	0x90008805
900087b0:	90008805 	.word	0x90008805
900087b4:	9000880d 	.word	0x9000880d
900087b8:	90008805 	.word	0x90008805
900087bc:	90008805 	.word	0x90008805
900087c0:	90008805 	.word	0x90008805
900087c4:	90008805 	.word	0x90008805
900087c8:	90008805 	.word	0x90008805
900087cc:	90008805 	.word	0x90008805
900087d0:	90008805 	.word	0x90008805
900087d4:	9000880d 	.word	0x9000880d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900087d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087dc:	3308      	adds	r3, #8
900087de:	2101      	movs	r1, #1
900087e0:	4618      	mov	r0, r3
900087e2:	f000 fd05 	bl	900091f0 <RCCEx_PLL2_Config>
900087e6:	4603      	mov	r3, r0
900087e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900087ec:	e00f      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087f2:	3328      	adds	r3, #40	@ 0x28
900087f4:	2101      	movs	r1, #1
900087f6:	4618      	mov	r0, r3
900087f8:	f000 fdac 	bl	90009354 <RCCEx_PLL3_Config>
900087fc:	4603      	mov	r3, r0
900087fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008802:	e004      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008804:	2301      	movs	r3, #1
90008806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000880a:	e000      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
9000880c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000880e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008812:	2b00      	cmp	r3, #0
90008814:	d10a      	bne.n	9000882c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008816:	4bbf      	ldr	r3, [pc, #764]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000881a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008824:	4abb      	ldr	r2, [pc, #748]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008826:	430b      	orrs	r3, r1
90008828:	6553      	str	r3, [r2, #84]	@ 0x54
9000882a:	e003      	b.n	90008834 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000882c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008838:	e9d3 2300 	ldrd	r2, r3, [r3]
9000883c:	f002 0302 	and.w	r3, r2, #2
90008840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008844:	2300      	movs	r3, #0
90008846:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000884a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
9000884e:	460b      	mov	r3, r1
90008850:	4313      	orrs	r3, r2
90008852:	d041      	beq.n	900088d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
9000885a:	2b05      	cmp	r3, #5
9000885c:	d824      	bhi.n	900088a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
9000885e:	a201      	add	r2, pc, #4	@ (adr r2, 90008864 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008864:	900088b1 	.word	0x900088b1
90008868:	9000887d 	.word	0x9000887d
9000886c:	90008893 	.word	0x90008893
90008870:	900088b1 	.word	0x900088b1
90008874:	900088b1 	.word	0x900088b1
90008878:	900088b1 	.word	0x900088b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000887c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008880:	3308      	adds	r3, #8
90008882:	2101      	movs	r1, #1
90008884:	4618      	mov	r0, r3
90008886:	f000 fcb3 	bl	900091f0 <RCCEx_PLL2_Config>
9000888a:	4603      	mov	r3, r0
9000888c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008890:	e00f      	b.n	900088b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008896:	3328      	adds	r3, #40	@ 0x28
90008898:	2101      	movs	r1, #1
9000889a:	4618      	mov	r0, r3
9000889c:	f000 fd5a 	bl	90009354 <RCCEx_PLL3_Config>
900088a0:	4603      	mov	r3, r0
900088a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900088a6:	e004      	b.n	900088b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900088a8:	2301      	movs	r3, #1
900088aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900088ae:	e000      	b.n	900088b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
900088b0:	bf00      	nop
    }

    if (ret == HAL_OK)
900088b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900088b6:	2b00      	cmp	r3, #0
900088b8:	d10a      	bne.n	900088d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900088ba:	4b96      	ldr	r3, [pc, #600]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900088bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900088be:	f023 0107 	bic.w	r1, r3, #7
900088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900088c8:	4a92      	ldr	r2, [pc, #584]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900088ca:	430b      	orrs	r3, r1
900088cc:	6553      	str	r3, [r2, #84]	@ 0x54
900088ce:	e003      	b.n	900088d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900088d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900088d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
900088e0:	f002 0304 	and.w	r3, r2, #4
900088e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
900088e8:	2300      	movs	r3, #0
900088ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
900088ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
900088f2:	460b      	mov	r3, r1
900088f4:	4313      	orrs	r3, r2
900088f6:	d044      	beq.n	90008982 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
900088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008900:	2b05      	cmp	r3, #5
90008902:	d825      	bhi.n	90008950 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008904:	a201      	add	r2, pc, #4	@ (adr r2, 9000890c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000890a:	bf00      	nop
9000890c:	90008959 	.word	0x90008959
90008910:	90008925 	.word	0x90008925
90008914:	9000893b 	.word	0x9000893b
90008918:	90008959 	.word	0x90008959
9000891c:	90008959 	.word	0x90008959
90008920:	90008959 	.word	0x90008959
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008928:	3308      	adds	r3, #8
9000892a:	2101      	movs	r1, #1
9000892c:	4618      	mov	r0, r3
9000892e:	f000 fc5f 	bl	900091f0 <RCCEx_PLL2_Config>
90008932:	4603      	mov	r3, r0
90008934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008938:	e00f      	b.n	9000895a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000893e:	3328      	adds	r3, #40	@ 0x28
90008940:	2101      	movs	r1, #1
90008942:	4618      	mov	r0, r3
90008944:	f000 fd06 	bl	90009354 <RCCEx_PLL3_Config>
90008948:	4603      	mov	r3, r0
9000894a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000894e:	e004      	b.n	9000895a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008950:	2301      	movs	r3, #1
90008952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008956:	e000      	b.n	9000895a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008958:	bf00      	nop
    }

    if (ret == HAL_OK)
9000895a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000895e:	2b00      	cmp	r3, #0
90008960:	d10b      	bne.n	9000897a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90008962:	4b6c      	ldr	r3, [pc, #432]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008966:	f023 0107 	bic.w	r1, r3, #7
9000896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000896e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008972:	4a68      	ldr	r2, [pc, #416]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008974:	430b      	orrs	r3, r1
90008976:	6593      	str	r3, [r2, #88]	@ 0x58
90008978:	e003      	b.n	90008982 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000897a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000897e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008986:	e9d3 2300 	ldrd	r2, r3, [r3]
9000898a:	f002 0320 	and.w	r3, r2, #32
9000898e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90008992:	2300      	movs	r3, #0
90008994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
9000899c:	460b      	mov	r3, r1
9000899e:	4313      	orrs	r3, r2
900089a0:	d055      	beq.n	90008a4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
900089a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900089aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900089ae:	d033      	beq.n	90008a18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
900089b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900089b4:	d82c      	bhi.n	90008a10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900089b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900089ba:	d02f      	beq.n	90008a1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
900089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900089c0:	d826      	bhi.n	90008a10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900089c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900089c6:	d02b      	beq.n	90008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
900089c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900089cc:	d820      	bhi.n	90008a10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900089ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900089d2:	d012      	beq.n	900089fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900089d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900089d8:	d81a      	bhi.n	90008a10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900089da:	2b00      	cmp	r3, #0
900089dc:	d022      	beq.n	90008a24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
900089de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900089e2:	d115      	bne.n	90008a10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089e8:	3308      	adds	r3, #8
900089ea:	2100      	movs	r1, #0
900089ec:	4618      	mov	r0, r3
900089ee:	f000 fbff 	bl	900091f0 <RCCEx_PLL2_Config>
900089f2:	4603      	mov	r3, r0
900089f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900089f8:	e015      	b.n	90008a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089fe:	3328      	adds	r3, #40	@ 0x28
90008a00:	2102      	movs	r1, #2
90008a02:	4618      	mov	r0, r3
90008a04:	f000 fca6 	bl	90009354 <RCCEx_PLL3_Config>
90008a08:	4603      	mov	r3, r0
90008a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008a0e:	e00a      	b.n	90008a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008a10:	2301      	movs	r3, #1
90008a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a16:	e006      	b.n	90008a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a18:	bf00      	nop
90008a1a:	e004      	b.n	90008a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a1c:	bf00      	nop
90008a1e:	e002      	b.n	90008a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a20:	bf00      	nop
90008a22:	e000      	b.n	90008a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a24:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a2a:	2b00      	cmp	r3, #0
90008a2c:	d10b      	bne.n	90008a46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90008a2e:	4b39      	ldr	r3, [pc, #228]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008a32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90008a3e:	4a35      	ldr	r2, [pc, #212]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008a40:	430b      	orrs	r3, r1
90008a42:	6553      	str	r3, [r2, #84]	@ 0x54
90008a44:	e003      	b.n	90008a4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90008a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
90008a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
90008a5e:	2300      	movs	r3, #0
90008a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008a64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008a68:	460b      	mov	r3, r1
90008a6a:	4313      	orrs	r3, r2
90008a6c:	d058      	beq.n	90008b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008a76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008a7a:	d033      	beq.n	90008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008a7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008a80:	d82c      	bhi.n	90008adc <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008a86:	d02f      	beq.n	90008ae8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008a8c:	d826      	bhi.n	90008adc <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008a92:	d02b      	beq.n	90008aec <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008a94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008a98:	d820      	bhi.n	90008adc <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008a9e:	d012      	beq.n	90008ac6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008aa4:	d81a      	bhi.n	90008adc <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008aa6:	2b00      	cmp	r3, #0
90008aa8:	d022      	beq.n	90008af0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
90008aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90008aae:	d115      	bne.n	90008adc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ab4:	3308      	adds	r3, #8
90008ab6:	2100      	movs	r1, #0
90008ab8:	4618      	mov	r0, r3
90008aba:	f000 fb99 	bl	900091f0 <RCCEx_PLL2_Config>
90008abe:	4603      	mov	r3, r0
90008ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008ac4:	e015      	b.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aca:	3328      	adds	r3, #40	@ 0x28
90008acc:	2102      	movs	r1, #2
90008ace:	4618      	mov	r0, r3
90008ad0:	f000 fc40 	bl	90009354 <RCCEx_PLL3_Config>
90008ad4:	4603      	mov	r3, r0
90008ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008ada:	e00a      	b.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008adc:	2301      	movs	r3, #1
90008ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008ae2:	e006      	b.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008ae4:	bf00      	nop
90008ae6:	e004      	b.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008ae8:	bf00      	nop
90008aea:	e002      	b.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008aec:	bf00      	nop
90008aee:	e000      	b.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008af0:	bf00      	nop
    }

    if (ret == HAL_OK)
90008af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008af6:	2b00      	cmp	r3, #0
90008af8:	d10e      	bne.n	90008b18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90008afa:	4b06      	ldr	r3, [pc, #24]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008afe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008b0a:	4a02      	ldr	r2, [pc, #8]	@ (90008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008b0c:	430b      	orrs	r3, r1
90008b0e:	6593      	str	r3, [r2, #88]	@ 0x58
90008b10:	e006      	b.n	90008b20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
90008b12:	bf00      	nop
90008b14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90008b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90008b30:	2300      	movs	r3, #0
90008b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90008b36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90008b3a:	460b      	mov	r3, r1
90008b3c:	4313      	orrs	r3, r2
90008b3e:	d055      	beq.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008b48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008b4c:	d033      	beq.n	90008bb6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008b4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008b52:	d82c      	bhi.n	90008bae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008b58:	d02f      	beq.n	90008bba <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008b5e:	d826      	bhi.n	90008bae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008b60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008b64:	d02b      	beq.n	90008bbe <HAL_RCCEx_PeriphCLKConfig+0xde2>
90008b66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008b6a:	d820      	bhi.n	90008bae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008b70:	d012      	beq.n	90008b98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90008b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008b76:	d81a      	bhi.n	90008bae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008b78:	2b00      	cmp	r3, #0
90008b7a:	d022      	beq.n	90008bc2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008b80:	d115      	bne.n	90008bae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b86:	3308      	adds	r3, #8
90008b88:	2100      	movs	r1, #0
90008b8a:	4618      	mov	r0, r3
90008b8c:	f000 fb30 	bl	900091f0 <RCCEx_PLL2_Config>
90008b90:	4603      	mov	r3, r0
90008b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008b96:	e015      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b9c:	3328      	adds	r3, #40	@ 0x28
90008b9e:	2102      	movs	r1, #2
90008ba0:	4618      	mov	r0, r3
90008ba2:	f000 fbd7 	bl	90009354 <RCCEx_PLL3_Config>
90008ba6:	4603      	mov	r3, r0
90008ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008bac:	e00a      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008bae:	2301      	movs	r3, #1
90008bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008bb4:	e006      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008bb6:	bf00      	nop
90008bb8:	e004      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008bba:	bf00      	nop
90008bbc:	e002      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008bbe:	bf00      	nop
90008bc0:	e000      	b.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
90008bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bc8:	2b00      	cmp	r3, #0
90008bca:	d10b      	bne.n	90008be4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90008bcc:	4ba1      	ldr	r3, [pc, #644]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008bd0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008bdc:	4a9d      	ldr	r2, [pc, #628]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bde:	430b      	orrs	r3, r1
90008be0:	6593      	str	r3, [r2, #88]	@ 0x58
90008be2:	e003      	b.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90008bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bf4:	f002 0308 	and.w	r3, r2, #8
90008bf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90008bfc:	2300      	movs	r3, #0
90008bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008c02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008c06:	460b      	mov	r3, r1
90008c08:	4313      	orrs	r3, r2
90008c0a:	d01e      	beq.n	90008c4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008c18:	d10c      	bne.n	90008c34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c1e:	3328      	adds	r3, #40	@ 0x28
90008c20:	2102      	movs	r1, #2
90008c22:	4618      	mov	r0, r3
90008c24:	f000 fb96 	bl	90009354 <RCCEx_PLL3_Config>
90008c28:	4603      	mov	r3, r0
90008c2a:	2b00      	cmp	r3, #0
90008c2c:	d002      	beq.n	90008c34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008c2e:	2301      	movs	r3, #1
90008c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008c34:	4b87      	ldr	r3, [pc, #540]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008c44:	4a83      	ldr	r2, [pc, #524]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c46:	430b      	orrs	r3, r1
90008c48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c52:	f002 0310 	and.w	r3, r2, #16
90008c56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008c5a:	2300      	movs	r3, #0
90008c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
90008c60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008c64:	460b      	mov	r3, r1
90008c66:	4313      	orrs	r3, r2
90008c68:	d01e      	beq.n	90008ca8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008c76:	d10c      	bne.n	90008c92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c7c:	3328      	adds	r3, #40	@ 0x28
90008c7e:	2102      	movs	r1, #2
90008c80:	4618      	mov	r0, r3
90008c82:	f000 fb67 	bl	90009354 <RCCEx_PLL3_Config>
90008c86:	4603      	mov	r3, r0
90008c88:	2b00      	cmp	r3, #0
90008c8a:	d002      	beq.n	90008c92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008c8c:	2301      	movs	r3, #1
90008c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008c92:	4b70      	ldr	r3, [pc, #448]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008c96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008ca2:	4a6c      	ldr	r2, [pc, #432]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ca4:	430b      	orrs	r3, r1
90008ca6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008cb8:	2300      	movs	r3, #0
90008cba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008cbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008cc2:	460b      	mov	r3, r1
90008cc4:	4313      	orrs	r3, r2
90008cc6:	d03e      	beq.n	90008d46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008cd4:	d022      	beq.n	90008d1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008cd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008cda:	d81b      	bhi.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008cdc:	2b00      	cmp	r3, #0
90008cde:	d003      	beq.n	90008ce8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008ce4:	d00b      	beq.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008ce6:	e015      	b.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cec:	3308      	adds	r3, #8
90008cee:	2100      	movs	r1, #0
90008cf0:	4618      	mov	r0, r3
90008cf2:	f000 fa7d 	bl	900091f0 <RCCEx_PLL2_Config>
90008cf6:	4603      	mov	r3, r0
90008cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008cfc:	e00f      	b.n	90008d1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d02:	3328      	adds	r3, #40	@ 0x28
90008d04:	2102      	movs	r1, #2
90008d06:	4618      	mov	r0, r3
90008d08:	f000 fb24 	bl	90009354 <RCCEx_PLL3_Config>
90008d0c:	4603      	mov	r3, r0
90008d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008d12:	e004      	b.n	90008d1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008d14:	2301      	movs	r3, #1
90008d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d1a:	e000      	b.n	90008d1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d22:	2b00      	cmp	r3, #0
90008d24:	d10b      	bne.n	90008d3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008d26:	4b4b      	ldr	r3, [pc, #300]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008d2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008d36:	4a47      	ldr	r2, [pc, #284]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d38:	430b      	orrs	r3, r1
90008d3a:	6593      	str	r3, [r2, #88]	@ 0x58
90008d3c:	e003      	b.n	90008d46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008d52:	67bb      	str	r3, [r7, #120]	@ 0x78
90008d54:	2300      	movs	r3, #0
90008d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008d58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008d5c:	460b      	mov	r3, r1
90008d5e:	4313      	orrs	r3, r2
90008d60:	d03b      	beq.n	90008dda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008d6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008d6e:	d01f      	beq.n	90008db0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008d70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008d74:	d818      	bhi.n	90008da8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008d7a:	d003      	beq.n	90008d84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008d7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008d80:	d007      	beq.n	90008d92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008d82:	e011      	b.n	90008da8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008d84:	4b33      	ldr	r3, [pc, #204]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008d88:	4a32      	ldr	r2, [pc, #200]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008d90:	e00f      	b.n	90008db2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d96:	3328      	adds	r3, #40	@ 0x28
90008d98:	2101      	movs	r1, #1
90008d9a:	4618      	mov	r0, r3
90008d9c:	f000 fada 	bl	90009354 <RCCEx_PLL3_Config>
90008da0:	4603      	mov	r3, r0
90008da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008da6:	e004      	b.n	90008db2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008da8:	2301      	movs	r3, #1
90008daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008dae:	e000      	b.n	90008db2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008db0:	bf00      	nop
    }

    if (ret == HAL_OK)
90008db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008db6:	2b00      	cmp	r3, #0
90008db8:	d10b      	bne.n	90008dd2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008dba:	4b26      	ldr	r3, [pc, #152]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008dbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008dca:	4a22      	ldr	r2, [pc, #136]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008dcc:	430b      	orrs	r3, r1
90008dce:	6553      	str	r3, [r2, #84]	@ 0x54
90008dd0:	e003      	b.n	90008dda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
90008de2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008de6:	673b      	str	r3, [r7, #112]	@ 0x70
90008de8:	2300      	movs	r3, #0
90008dea:	677b      	str	r3, [r7, #116]	@ 0x74
90008dec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008df0:	460b      	mov	r3, r1
90008df2:	4313      	orrs	r3, r2
90008df4:	d034      	beq.n	90008e60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008dfc:	2b00      	cmp	r3, #0
90008dfe:	d003      	beq.n	90008e08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008e04:	d007      	beq.n	90008e16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008e06:	e011      	b.n	90008e2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008e08:	4b12      	ldr	r3, [pc, #72]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008e0c:	4a11      	ldr	r2, [pc, #68]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008e14:	e00e      	b.n	90008e34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e1a:	3308      	adds	r3, #8
90008e1c:	2102      	movs	r1, #2
90008e1e:	4618      	mov	r0, r3
90008e20:	f000 f9e6 	bl	900091f0 <RCCEx_PLL2_Config>
90008e24:	4603      	mov	r3, r0
90008e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008e2a:	e003      	b.n	90008e34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008e2c:	2301      	movs	r3, #1
90008e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008e32:	bf00      	nop
    }

    if (ret == HAL_OK)
90008e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e38:	2b00      	cmp	r3, #0
90008e3a:	d10d      	bne.n	90008e58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008e3c:	4b05      	ldr	r3, [pc, #20]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008e40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008e4a:	4a02      	ldr	r2, [pc, #8]	@ (90008e54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e4c:	430b      	orrs	r3, r1
90008e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008e50:	e006      	b.n	90008e60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008e52:	bf00      	nop
90008e54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
90008e6e:	2300      	movs	r3, #0
90008e70:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008e72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008e76:	460b      	mov	r3, r1
90008e78:	4313      	orrs	r3, r2
90008e7a:	d00c      	beq.n	90008e96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e80:	3328      	adds	r3, #40	@ 0x28
90008e82:	2102      	movs	r1, #2
90008e84:	4618      	mov	r0, r3
90008e86:	f000 fa65 	bl	90009354 <RCCEx_PLL3_Config>
90008e8a:	4603      	mov	r3, r0
90008e8c:	2b00      	cmp	r3, #0
90008e8e:	d002      	beq.n	90008e96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008e90:	2301      	movs	r3, #1
90008e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008ea2:	663b      	str	r3, [r7, #96]	@ 0x60
90008ea4:	2300      	movs	r3, #0
90008ea6:	667b      	str	r3, [r7, #100]	@ 0x64
90008ea8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008eac:	460b      	mov	r3, r1
90008eae:	4313      	orrs	r3, r2
90008eb0:	d038      	beq.n	90008f24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008ebe:	d018      	beq.n	90008ef2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008ec0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008ec4:	d811      	bhi.n	90008eea <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008eca:	d014      	beq.n	90008ef6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008ed0:	d80b      	bhi.n	90008eea <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008ed2:	2b00      	cmp	r3, #0
90008ed4:	d011      	beq.n	90008efa <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008eda:	d106      	bne.n	90008eea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008edc:	4bc3      	ldr	r3, [pc, #780]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008ee0:	4ac2      	ldr	r2, [pc, #776]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008ee8:	e008      	b.n	90008efc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008eea:	2301      	movs	r3, #1
90008eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008ef0:	e004      	b.n	90008efc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008ef2:	bf00      	nop
90008ef4:	e002      	b.n	90008efc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008ef6:	bf00      	nop
90008ef8:	e000      	b.n	90008efc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008efa:	bf00      	nop
    }

    if (ret == HAL_OK)
90008efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f00:	2b00      	cmp	r3, #0
90008f02:	d10b      	bne.n	90008f1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008f04:	4bb9      	ldr	r3, [pc, #740]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008f08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008f14:	4ab5      	ldr	r2, [pc, #724]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f16:	430b      	orrs	r3, r1
90008f18:	6553      	str	r3, [r2, #84]	@ 0x54
90008f1a:	e003      	b.n	90008f24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008f30:	65bb      	str	r3, [r7, #88]	@ 0x58
90008f32:	2300      	movs	r3, #0
90008f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008f36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008f3a:	460b      	mov	r3, r1
90008f3c:	4313      	orrs	r3, r2
90008f3e:	d009      	beq.n	90008f54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008f40:	4baa      	ldr	r3, [pc, #680]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008f44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008f4e:	4aa7      	ldr	r2, [pc, #668]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f50:	430b      	orrs	r3, r1
90008f52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008f60:	653b      	str	r3, [r7, #80]	@ 0x50
90008f62:	2300      	movs	r3, #0
90008f64:	657b      	str	r3, [r7, #84]	@ 0x54
90008f66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008f6a:	460b      	mov	r3, r1
90008f6c:	4313      	orrs	r3, r2
90008f6e:	d00a      	beq.n	90008f86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008f70:	4b9e      	ldr	r3, [pc, #632]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f72:	691b      	ldr	r3, [r3, #16]
90008f74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008f80:	4a9a      	ldr	r2, [pc, #616]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f82:	430b      	orrs	r3, r1
90008f84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008f92:	64bb      	str	r3, [r7, #72]	@ 0x48
90008f94:	2300      	movs	r3, #0
90008f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008f98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008f9c:	460b      	mov	r3, r1
90008f9e:	4313      	orrs	r3, r2
90008fa0:	d009      	beq.n	90008fb6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008fa2:	4b92      	ldr	r3, [pc, #584]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008fa6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008fb0:	4a8e      	ldr	r2, [pc, #568]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fb2:	430b      	orrs	r3, r1
90008fb4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008fc2:	643b      	str	r3, [r7, #64]	@ 0x40
90008fc4:	2300      	movs	r3, #0
90008fc6:	647b      	str	r3, [r7, #68]	@ 0x44
90008fc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008fcc:	460b      	mov	r3, r1
90008fce:	4313      	orrs	r3, r2
90008fd0:	d00e      	beq.n	90008ff0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008fd2:	4b86      	ldr	r3, [pc, #536]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fd4:	691b      	ldr	r3, [r3, #16]
90008fd6:	4a85      	ldr	r2, [pc, #532]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008fdc:	6113      	str	r3, [r2, #16]
90008fde:	4b83      	ldr	r3, [pc, #524]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fe0:	6919      	ldr	r1, [r3, #16]
90008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fe6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008fea:	4a80      	ldr	r2, [pc, #512]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fec:	430b      	orrs	r3, r1
90008fee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ff8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
90008ffe:	2300      	movs	r3, #0
90009000:	63fb      	str	r3, [r7, #60]	@ 0x3c
90009002:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90009006:	460b      	mov	r3, r1
90009008:	4313      	orrs	r3, r2
9000900a:	d009      	beq.n	90009020 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000900c:	4b77      	ldr	r3, [pc, #476]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000900e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90009010:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000901a:	4a74      	ldr	r2, [pc, #464]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000901c:	430b      	orrs	r3, r1
9000901e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90009020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009024:	e9d3 2300 	ldrd	r2, r3, [r3]
90009028:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
9000902c:	633b      	str	r3, [r7, #48]	@ 0x30
9000902e:	2300      	movs	r3, #0
90009030:	637b      	str	r3, [r7, #52]	@ 0x34
90009032:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90009036:	460b      	mov	r3, r1
90009038:	4313      	orrs	r3, r2
9000903a:	d00a      	beq.n	90009052 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000903c:	4b6b      	ldr	r3, [pc, #428]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000903e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009040:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90009044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000904c:	4a67      	ldr	r2, [pc, #412]	@ (900091ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000904e:	430b      	orrs	r3, r1
90009050:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90009052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009056:	e9d3 2300 	ldrd	r2, r3, [r3]
9000905a:	2100      	movs	r1, #0
9000905c:	62b9      	str	r1, [r7, #40]	@ 0x28
9000905e:	f003 0301 	and.w	r3, r3, #1
90009062:	62fb      	str	r3, [r7, #44]	@ 0x2c
90009064:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90009068:	460b      	mov	r3, r1
9000906a:	4313      	orrs	r3, r2
9000906c:	d011      	beq.n	90009092 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000906e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009072:	3308      	adds	r3, #8
90009074:	2100      	movs	r1, #0
90009076:	4618      	mov	r0, r3
90009078:	f000 f8ba 	bl	900091f0 <RCCEx_PLL2_Config>
9000907c:	4603      	mov	r3, r0
9000907e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009086:	2b00      	cmp	r3, #0
90009088:	d003      	beq.n	90009092 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000908a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000908e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009096:	e9d3 2300 	ldrd	r2, r3, [r3]
9000909a:	2100      	movs	r1, #0
9000909c:	6239      	str	r1, [r7, #32]
9000909e:	f003 0302 	and.w	r3, r3, #2
900090a2:	627b      	str	r3, [r7, #36]	@ 0x24
900090a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
900090a8:	460b      	mov	r3, r1
900090aa:	4313      	orrs	r3, r2
900090ac:	d011      	beq.n	900090d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090b2:	3308      	adds	r3, #8
900090b4:	2101      	movs	r1, #1
900090b6:	4618      	mov	r0, r3
900090b8:	f000 f89a 	bl	900091f0 <RCCEx_PLL2_Config>
900090bc:	4603      	mov	r3, r0
900090be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900090c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900090c6:	2b00      	cmp	r3, #0
900090c8:	d003      	beq.n	900090d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900090ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900090ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
900090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
900090da:	2100      	movs	r1, #0
900090dc:	61b9      	str	r1, [r7, #24]
900090de:	f003 0304 	and.w	r3, r3, #4
900090e2:	61fb      	str	r3, [r7, #28]
900090e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
900090e8:	460b      	mov	r3, r1
900090ea:	4313      	orrs	r3, r2
900090ec:	d011      	beq.n	90009112 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900090ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090f2:	3308      	adds	r3, #8
900090f4:	2102      	movs	r1, #2
900090f6:	4618      	mov	r0, r3
900090f8:	f000 f87a 	bl	900091f0 <RCCEx_PLL2_Config>
900090fc:	4603      	mov	r3, r0
900090fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009106:	2b00      	cmp	r3, #0
90009108:	d003      	beq.n	90009112 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000910a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000910e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90009112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009116:	e9d3 2300 	ldrd	r2, r3, [r3]
9000911a:	2100      	movs	r1, #0
9000911c:	6139      	str	r1, [r7, #16]
9000911e:	f003 0308 	and.w	r3, r3, #8
90009122:	617b      	str	r3, [r7, #20]
90009124:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90009128:	460b      	mov	r3, r1
9000912a:	4313      	orrs	r3, r2
9000912c:	d011      	beq.n	90009152 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009132:	3328      	adds	r3, #40	@ 0x28
90009134:	2100      	movs	r1, #0
90009136:	4618      	mov	r0, r3
90009138:	f000 f90c 	bl	90009354 <RCCEx_PLL3_Config>
9000913c:	4603      	mov	r3, r0
9000913e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90009142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009146:	2b00      	cmp	r3, #0
90009148:	d003      	beq.n	90009152 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000914a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000914e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009156:	e9d3 2300 	ldrd	r2, r3, [r3]
9000915a:	2100      	movs	r1, #0
9000915c:	60b9      	str	r1, [r7, #8]
9000915e:	f003 0310 	and.w	r3, r3, #16
90009162:	60fb      	str	r3, [r7, #12]
90009164:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90009168:	460b      	mov	r3, r1
9000916a:	4313      	orrs	r3, r2
9000916c:	d011      	beq.n	90009192 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000916e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009172:	3328      	adds	r3, #40	@ 0x28
90009174:	2101      	movs	r1, #1
90009176:	4618      	mov	r0, r3
90009178:	f000 f8ec 	bl	90009354 <RCCEx_PLL3_Config>
9000917c:	4603      	mov	r3, r0
9000917e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009186:	2b00      	cmp	r3, #0
90009188:	d003      	beq.n	90009192 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000918a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000918e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90009192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009196:	e9d3 2300 	ldrd	r2, r3, [r3]
9000919a:	2100      	movs	r1, #0
9000919c:	6039      	str	r1, [r7, #0]
9000919e:	f003 0320 	and.w	r3, r3, #32
900091a2:	607b      	str	r3, [r7, #4]
900091a4:	e9d7 1200 	ldrd	r1, r2, [r7]
900091a8:	460b      	mov	r3, r1
900091aa:	4313      	orrs	r3, r2
900091ac:	d011      	beq.n	900091d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091b2:	3328      	adds	r3, #40	@ 0x28
900091b4:	2102      	movs	r1, #2
900091b6:	4618      	mov	r0, r3
900091b8:	f000 f8cc 	bl	90009354 <RCCEx_PLL3_Config>
900091bc:	4603      	mov	r3, r0
900091be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900091c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091c6:	2b00      	cmp	r3, #0
900091c8:	d003      	beq.n	900091d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900091ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
900091d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
900091d6:	2b00      	cmp	r3, #0
900091d8:	d101      	bne.n	900091de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
900091da:	2300      	movs	r3, #0
900091dc:	e000      	b.n	900091e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
900091de:	2301      	movs	r3, #1
}
900091e0:	4618      	mov	r0, r3
900091e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
900091e6:	46bd      	mov	sp, r7
900091e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
900091ec:	58024400 	.word	0x58024400

900091f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
900091f0:	b580      	push	{r7, lr}
900091f2:	b084      	sub	sp, #16
900091f4:	af00      	add	r7, sp, #0
900091f6:	6078      	str	r0, [r7, #4]
900091f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900091fa:	2300      	movs	r3, #0
900091fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900091fe:	4b53      	ldr	r3, [pc, #332]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009202:	f003 0303 	and.w	r3, r3, #3
90009206:	2b03      	cmp	r3, #3
90009208:	d101      	bne.n	9000920e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
9000920a:	2301      	movs	r3, #1
9000920c:	e099      	b.n	90009342 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000920e:	4b4f      	ldr	r3, [pc, #316]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009210:	681b      	ldr	r3, [r3, #0]
90009212:	4a4e      	ldr	r2, [pc, #312]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009214:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000921a:	f7f9 fef7 	bl	9000300c <HAL_GetTick>
9000921e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009220:	e008      	b.n	90009234 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90009222:	f7f9 fef3 	bl	9000300c <HAL_GetTick>
90009226:	4602      	mov	r2, r0
90009228:	68bb      	ldr	r3, [r7, #8]
9000922a:	1ad3      	subs	r3, r2, r3
9000922c:	2b02      	cmp	r3, #2
9000922e:	d901      	bls.n	90009234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90009230:	2303      	movs	r3, #3
90009232:	e086      	b.n	90009342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009234:	4b45      	ldr	r3, [pc, #276]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009236:	681b      	ldr	r3, [r3, #0]
90009238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000923c:	2b00      	cmp	r3, #0
9000923e:	d1f0      	bne.n	90009222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90009240:	4b42      	ldr	r3, [pc, #264]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009244:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009248:	687b      	ldr	r3, [r7, #4]
9000924a:	681b      	ldr	r3, [r3, #0]
9000924c:	031b      	lsls	r3, r3, #12
9000924e:	493f      	ldr	r1, [pc, #252]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009250:	4313      	orrs	r3, r2
90009252:	628b      	str	r3, [r1, #40]	@ 0x28
90009254:	687b      	ldr	r3, [r7, #4]
90009256:	685b      	ldr	r3, [r3, #4]
90009258:	3b01      	subs	r3, #1
9000925a:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000925e:	687b      	ldr	r3, [r7, #4]
90009260:	689b      	ldr	r3, [r3, #8]
90009262:	3b01      	subs	r3, #1
90009264:	025b      	lsls	r3, r3, #9
90009266:	b29b      	uxth	r3, r3
90009268:	431a      	orrs	r2, r3
9000926a:	687b      	ldr	r3, [r7, #4]
9000926c:	68db      	ldr	r3, [r3, #12]
9000926e:	3b01      	subs	r3, #1
90009270:	041b      	lsls	r3, r3, #16
90009272:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009276:	431a      	orrs	r2, r3
90009278:	687b      	ldr	r3, [r7, #4]
9000927a:	691b      	ldr	r3, [r3, #16]
9000927c:	3b01      	subs	r3, #1
9000927e:	061b      	lsls	r3, r3, #24
90009280:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009284:	4931      	ldr	r1, [pc, #196]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009286:	4313      	orrs	r3, r2
90009288:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000928a:	4b30      	ldr	r3, [pc, #192]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
9000928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000928e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
90009292:	687b      	ldr	r3, [r7, #4]
90009294:	695b      	ldr	r3, [r3, #20]
90009296:	492d      	ldr	r1, [pc, #180]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009298:	4313      	orrs	r3, r2
9000929a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000929c:	4b2b      	ldr	r3, [pc, #172]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
9000929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092a0:	f023 0220 	bic.w	r2, r3, #32
900092a4:	687b      	ldr	r3, [r7, #4]
900092a6:	699b      	ldr	r3, [r3, #24]
900092a8:	4928      	ldr	r1, [pc, #160]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092aa:	4313      	orrs	r3, r2
900092ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
900092ae:	4b27      	ldr	r3, [pc, #156]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092b2:	4a26      	ldr	r2, [pc, #152]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092b4:	f023 0310 	bic.w	r3, r3, #16
900092b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
900092ba:	4b24      	ldr	r3, [pc, #144]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
900092be:	4b24      	ldr	r3, [pc, #144]	@ (90009350 <RCCEx_PLL2_Config+0x160>)
900092c0:	4013      	ands	r3, r2
900092c2:	687a      	ldr	r2, [r7, #4]
900092c4:	69d2      	ldr	r2, [r2, #28]
900092c6:	00d2      	lsls	r2, r2, #3
900092c8:	4920      	ldr	r1, [pc, #128]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092ca:	4313      	orrs	r3, r2
900092cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
900092ce:	4b1f      	ldr	r3, [pc, #124]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092d2:	4a1e      	ldr	r2, [pc, #120]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092d4:	f043 0310 	orr.w	r3, r3, #16
900092d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900092da:	683b      	ldr	r3, [r7, #0]
900092dc:	2b00      	cmp	r3, #0
900092de:	d106      	bne.n	900092ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
900092e0:	4b1a      	ldr	r3, [pc, #104]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092e4:	4a19      	ldr	r2, [pc, #100]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
900092ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
900092ec:	e00f      	b.n	9000930e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900092ee:	683b      	ldr	r3, [r7, #0]
900092f0:	2b01      	cmp	r3, #1
900092f2:	d106      	bne.n	90009302 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
900092f4:	4b15      	ldr	r3, [pc, #84]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092f8:	4a14      	ldr	r2, [pc, #80]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
900092fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
900092fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009300:	e005      	b.n	9000930e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90009302:	4b12      	ldr	r3, [pc, #72]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009306:	4a11      	ldr	r2, [pc, #68]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
9000930c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000930e:	4b0f      	ldr	r3, [pc, #60]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009310:	681b      	ldr	r3, [r3, #0]
90009312:	4a0e      	ldr	r2, [pc, #56]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009314:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000931a:	f7f9 fe77 	bl	9000300c <HAL_GetTick>
9000931e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009320:	e008      	b.n	90009334 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90009322:	f7f9 fe73 	bl	9000300c <HAL_GetTick>
90009326:	4602      	mov	r2, r0
90009328:	68bb      	ldr	r3, [r7, #8]
9000932a:	1ad3      	subs	r3, r2, r3
9000932c:	2b02      	cmp	r3, #2
9000932e:	d901      	bls.n	90009334 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90009330:	2303      	movs	r3, #3
90009332:	e006      	b.n	90009342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009334:	4b05      	ldr	r3, [pc, #20]	@ (9000934c <RCCEx_PLL2_Config+0x15c>)
90009336:	681b      	ldr	r3, [r3, #0]
90009338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000933c:	2b00      	cmp	r3, #0
9000933e:	d0f0      	beq.n	90009322 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90009340:	7bfb      	ldrb	r3, [r7, #15]
}
90009342:	4618      	mov	r0, r3
90009344:	3710      	adds	r7, #16
90009346:	46bd      	mov	sp, r7
90009348:	bd80      	pop	{r7, pc}
9000934a:	bf00      	nop
9000934c:	58024400 	.word	0x58024400
90009350:	ffff0007 	.word	0xffff0007

90009354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90009354:	b580      	push	{r7, lr}
90009356:	b084      	sub	sp, #16
90009358:	af00      	add	r7, sp, #0
9000935a:	6078      	str	r0, [r7, #4]
9000935c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000935e:	2300      	movs	r3, #0
90009360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90009362:	4b53      	ldr	r3, [pc, #332]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009366:	f003 0303 	and.w	r3, r3, #3
9000936a:	2b03      	cmp	r3, #3
9000936c:	d101      	bne.n	90009372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000936e:	2301      	movs	r3, #1
90009370:	e099      	b.n	900094a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90009372:	4b4f      	ldr	r3, [pc, #316]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009374:	681b      	ldr	r3, [r3, #0]
90009376:	4a4e      	ldr	r2, [pc, #312]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
9000937c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000937e:	f7f9 fe45 	bl	9000300c <HAL_GetTick>
90009382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009384:	e008      	b.n	90009398 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009386:	f7f9 fe41 	bl	9000300c <HAL_GetTick>
9000938a:	4602      	mov	r2, r0
9000938c:	68bb      	ldr	r3, [r7, #8]
9000938e:	1ad3      	subs	r3, r2, r3
90009390:	2b02      	cmp	r3, #2
90009392:	d901      	bls.n	90009398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90009394:	2303      	movs	r3, #3
90009396:	e086      	b.n	900094a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009398:	4b45      	ldr	r3, [pc, #276]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000939a:	681b      	ldr	r3, [r3, #0]
9000939c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900093a0:	2b00      	cmp	r3, #0
900093a2:	d1f0      	bne.n	90009386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
900093a4:	4b42      	ldr	r3, [pc, #264]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
900093a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900093a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
900093ac:	687b      	ldr	r3, [r7, #4]
900093ae:	681b      	ldr	r3, [r3, #0]
900093b0:	051b      	lsls	r3, r3, #20
900093b2:	493f      	ldr	r1, [pc, #252]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
900093b4:	4313      	orrs	r3, r2
900093b6:	628b      	str	r3, [r1, #40]	@ 0x28
900093b8:	687b      	ldr	r3, [r7, #4]
900093ba:	685b      	ldr	r3, [r3, #4]
900093bc:	3b01      	subs	r3, #1
900093be:	f3c3 0208 	ubfx	r2, r3, #0, #9
900093c2:	687b      	ldr	r3, [r7, #4]
900093c4:	689b      	ldr	r3, [r3, #8]
900093c6:	3b01      	subs	r3, #1
900093c8:	025b      	lsls	r3, r3, #9
900093ca:	b29b      	uxth	r3, r3
900093cc:	431a      	orrs	r2, r3
900093ce:	687b      	ldr	r3, [r7, #4]
900093d0:	68db      	ldr	r3, [r3, #12]
900093d2:	3b01      	subs	r3, #1
900093d4:	041b      	lsls	r3, r3, #16
900093d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900093da:	431a      	orrs	r2, r3
900093dc:	687b      	ldr	r3, [r7, #4]
900093de:	691b      	ldr	r3, [r3, #16]
900093e0:	3b01      	subs	r3, #1
900093e2:	061b      	lsls	r3, r3, #24
900093e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900093e8:	4931      	ldr	r1, [pc, #196]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
900093ea:	4313      	orrs	r3, r2
900093ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
900093ee:	4b30      	ldr	r3, [pc, #192]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
900093f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900093f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
900093f6:	687b      	ldr	r3, [r7, #4]
900093f8:	695b      	ldr	r3, [r3, #20]
900093fa:	492d      	ldr	r1, [pc, #180]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
900093fc:	4313      	orrs	r3, r2
900093fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90009400:	4b2b      	ldr	r3, [pc, #172]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009404:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90009408:	687b      	ldr	r3, [r7, #4]
9000940a:	699b      	ldr	r3, [r3, #24]
9000940c:	4928      	ldr	r1, [pc, #160]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000940e:	4313      	orrs	r3, r2
90009410:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
90009412:	4b27      	ldr	r3, [pc, #156]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009416:	4a26      	ldr	r2, [pc, #152]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
9000941c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000941e:	4b24      	ldr	r3, [pc, #144]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90009422:	4b24      	ldr	r3, [pc, #144]	@ (900094b4 <RCCEx_PLL3_Config+0x160>)
90009424:	4013      	ands	r3, r2
90009426:	687a      	ldr	r2, [r7, #4]
90009428:	69d2      	ldr	r2, [r2, #28]
9000942a:	00d2      	lsls	r2, r2, #3
9000942c:	4920      	ldr	r1, [pc, #128]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000942e:	4313      	orrs	r3, r2
90009430:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90009432:	4b1f      	ldr	r3, [pc, #124]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009436:	4a1e      	ldr	r2, [pc, #120]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000943c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000943e:	683b      	ldr	r3, [r7, #0]
90009440:	2b00      	cmp	r3, #0
90009442:	d106      	bne.n	90009452 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90009444:	4b1a      	ldr	r3, [pc, #104]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009448:	4a19      	ldr	r2, [pc, #100]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000944a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000944e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009450:	e00f      	b.n	90009472 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90009452:	683b      	ldr	r3, [r7, #0]
90009454:	2b01      	cmp	r3, #1
90009456:	d106      	bne.n	90009466 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90009458:	4b15      	ldr	r3, [pc, #84]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000945c:	4a14      	ldr	r2, [pc, #80]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000945e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
90009462:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009464:	e005      	b.n	90009472 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90009466:	4b12      	ldr	r3, [pc, #72]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000946a:	4a11      	ldr	r2, [pc, #68]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000946c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90009470:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90009472:	4b0f      	ldr	r3, [pc, #60]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009474:	681b      	ldr	r3, [r3, #0]
90009476:	4a0e      	ldr	r2, [pc, #56]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
90009478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
9000947c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000947e:	f7f9 fdc5 	bl	9000300c <HAL_GetTick>
90009482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009484:	e008      	b.n	90009498 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009486:	f7f9 fdc1 	bl	9000300c <HAL_GetTick>
9000948a:	4602      	mov	r2, r0
9000948c:	68bb      	ldr	r3, [r7, #8]
9000948e:	1ad3      	subs	r3, r2, r3
90009490:	2b02      	cmp	r3, #2
90009492:	d901      	bls.n	90009498 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90009494:	2303      	movs	r3, #3
90009496:	e006      	b.n	900094a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009498:	4b05      	ldr	r3, [pc, #20]	@ (900094b0 <RCCEx_PLL3_Config+0x15c>)
9000949a:	681b      	ldr	r3, [r3, #0]
9000949c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900094a0:	2b00      	cmp	r3, #0
900094a2:	d0f0      	beq.n	90009486 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
900094a4:	7bfb      	ldrb	r3, [r7, #15]
}
900094a6:	4618      	mov	r0, r3
900094a8:	3710      	adds	r7, #16
900094aa:	46bd      	mov	sp, r7
900094ac:	bd80      	pop	{r7, pc}
900094ae:	bf00      	nop
900094b0:	58024400 	.word	0x58024400
900094b4:	ffff0007 	.word	0xffff0007

900094b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
900094b8:	b580      	push	{r7, lr}
900094ba:	b082      	sub	sp, #8
900094bc:	af00      	add	r7, sp, #0
900094be:	6078      	str	r0, [r7, #4]
900094c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
900094c2:	687b      	ldr	r3, [r7, #4]
900094c4:	2b00      	cmp	r3, #0
900094c6:	d101      	bne.n	900094cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900094c8:	2301      	movs	r3, #1
900094ca:	e02b      	b.n	90009524 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
900094cc:	687b      	ldr	r3, [r7, #4]
900094ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900094d2:	b2db      	uxtb	r3, r3
900094d4:	2b00      	cmp	r3, #0
900094d6:	d106      	bne.n	900094e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
900094d8:	687b      	ldr	r3, [r7, #4]
900094da:	2200      	movs	r2, #0
900094dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
900094e0:	6878      	ldr	r0, [r7, #4]
900094e2:	f000 f825 	bl	90009530 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900094e6:	687b      	ldr	r3, [r7, #4]
900094e8:	2202      	movs	r2, #2
900094ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900094ee:	687b      	ldr	r3, [r7, #4]
900094f0:	681a      	ldr	r2, [r3, #0]
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	3304      	adds	r3, #4
900094f6:	4619      	mov	r1, r3
900094f8:	4610      	mov	r0, r2
900094fa:	f000 f9e7 	bl	900098cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
900094fe:	687b      	ldr	r3, [r7, #4]
90009500:	6818      	ldr	r0, [r3, #0]
90009502:	687b      	ldr	r3, [r7, #4]
90009504:	685b      	ldr	r3, [r3, #4]
90009506:	461a      	mov	r2, r3
90009508:	6839      	ldr	r1, [r7, #0]
9000950a:	f000 fa3b 	bl	90009984 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000950e:	4b07      	ldr	r3, [pc, #28]	@ (9000952c <HAL_SDRAM_Init+0x74>)
90009510:	681b      	ldr	r3, [r3, #0]
90009512:	4a06      	ldr	r2, [pc, #24]	@ (9000952c <HAL_SDRAM_Init+0x74>)
90009514:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009518:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000951a:	687b      	ldr	r3, [r7, #4]
9000951c:	2201      	movs	r2, #1
9000951e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
90009522:	2300      	movs	r3, #0
}
90009524:	4618      	mov	r0, r3
90009526:	3708      	adds	r7, #8
90009528:	46bd      	mov	sp, r7
9000952a:	bd80      	pop	{r7, pc}
9000952c:	52004000 	.word	0x52004000

90009530 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
90009530:	b480      	push	{r7}
90009532:	b083      	sub	sp, #12
90009534:	af00      	add	r7, sp, #0
90009536:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009538:	bf00      	nop
9000953a:	370c      	adds	r7, #12
9000953c:	46bd      	mov	sp, r7
9000953e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009542:	4770      	bx	lr

90009544 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90009544:	b580      	push	{r7, lr}
90009546:	b086      	sub	sp, #24
90009548:	af00      	add	r7, sp, #0
9000954a:	60f8      	str	r0, [r7, #12]
9000954c:	60b9      	str	r1, [r7, #8]
9000954e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
90009550:	68fb      	ldr	r3, [r7, #12]
90009552:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009556:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90009558:	7dfb      	ldrb	r3, [r7, #23]
9000955a:	2b02      	cmp	r3, #2
9000955c:	d101      	bne.n	90009562 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
9000955e:	2302      	movs	r3, #2
90009560:	e021      	b.n	900095a6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
90009562:	7dfb      	ldrb	r3, [r7, #23]
90009564:	2b01      	cmp	r3, #1
90009566:	d002      	beq.n	9000956e <HAL_SDRAM_SendCommand+0x2a>
90009568:	7dfb      	ldrb	r3, [r7, #23]
9000956a:	2b05      	cmp	r3, #5
9000956c:	d118      	bne.n	900095a0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000956e:	68fb      	ldr	r3, [r7, #12]
90009570:	2202      	movs	r2, #2
90009572:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90009576:	68fb      	ldr	r3, [r7, #12]
90009578:	681b      	ldr	r3, [r3, #0]
9000957a:	687a      	ldr	r2, [r7, #4]
9000957c:	68b9      	ldr	r1, [r7, #8]
9000957e:	4618      	mov	r0, r3
90009580:	f000 fa6a 	bl	90009a58 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009584:	68bb      	ldr	r3, [r7, #8]
90009586:	681b      	ldr	r3, [r3, #0]
90009588:	2b02      	cmp	r3, #2
9000958a:	d104      	bne.n	90009596 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000958c:	68fb      	ldr	r3, [r7, #12]
9000958e:	2205      	movs	r2, #5
90009590:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009594:	e006      	b.n	900095a4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
90009596:	68fb      	ldr	r3, [r7, #12]
90009598:	2201      	movs	r2, #1
9000959a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000959e:	e001      	b.n	900095a4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
900095a0:	2301      	movs	r3, #1
900095a2:	e000      	b.n	900095a6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
900095a4:	2300      	movs	r3, #0
}
900095a6:	4618      	mov	r0, r3
900095a8:	3718      	adds	r7, #24
900095aa:	46bd      	mov	sp, r7
900095ac:	bd80      	pop	{r7, pc}

900095ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
900095ae:	b580      	push	{r7, lr}
900095b0:	b082      	sub	sp, #8
900095b2:	af00      	add	r7, sp, #0
900095b4:	6078      	str	r0, [r7, #4]
900095b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
900095b8:	687b      	ldr	r3, [r7, #4]
900095ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900095be:	b2db      	uxtb	r3, r3
900095c0:	2b02      	cmp	r3, #2
900095c2:	d101      	bne.n	900095c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
900095c4:	2302      	movs	r3, #2
900095c6:	e016      	b.n	900095f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
900095c8:	687b      	ldr	r3, [r7, #4]
900095ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900095ce:	b2db      	uxtb	r3, r3
900095d0:	2b01      	cmp	r3, #1
900095d2:	d10f      	bne.n	900095f4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900095d4:	687b      	ldr	r3, [r7, #4]
900095d6:	2202      	movs	r2, #2
900095d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
900095dc:	687b      	ldr	r3, [r7, #4]
900095de:	681b      	ldr	r3, [r3, #0]
900095e0:	6839      	ldr	r1, [r7, #0]
900095e2:	4618      	mov	r0, r3
900095e4:	f000 fa5c 	bl	90009aa0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
900095e8:	687b      	ldr	r3, [r7, #4]
900095ea:	2201      	movs	r2, #1
900095ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
900095f0:	2300      	movs	r3, #0
900095f2:	e000      	b.n	900095f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
900095f4:	2301      	movs	r3, #1
}
900095f6:	4618      	mov	r0, r3
900095f8:	3708      	adds	r7, #8
900095fa:	46bd      	mov	sp, r7
900095fc:	bd80      	pop	{r7, pc}

900095fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
900095fe:	b580      	push	{r7, lr}
90009600:	b082      	sub	sp, #8
90009602:	af00      	add	r7, sp, #0
90009604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90009606:	687b      	ldr	r3, [r7, #4]
90009608:	2b00      	cmp	r3, #0
9000960a:	d101      	bne.n	90009610 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
9000960c:	2301      	movs	r3, #1
9000960e:	e049      	b.n	900096a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90009610:	687b      	ldr	r3, [r7, #4]
90009612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009616:	b2db      	uxtb	r3, r3
90009618:	2b00      	cmp	r3, #0
9000961a:	d106      	bne.n	9000962a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
9000961c:	687b      	ldr	r3, [r7, #4]
9000961e:	2200      	movs	r2, #0
90009620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90009624:	6878      	ldr	r0, [r7, #4]
90009626:	f000 f89d 	bl	90009764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000962a:	687b      	ldr	r3, [r7, #4]
9000962c:	2202      	movs	r2, #2
9000962e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90009632:	687b      	ldr	r3, [r7, #4]
90009634:	681a      	ldr	r2, [r3, #0]
90009636:	687b      	ldr	r3, [r7, #4]
90009638:	3304      	adds	r3, #4
9000963a:	4619      	mov	r1, r3
9000963c:	4610      	mov	r0, r2
9000963e:	f000 f8a5 	bl	9000978c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90009642:	687b      	ldr	r3, [r7, #4]
90009644:	2201      	movs	r2, #1
90009646:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000964a:	687b      	ldr	r3, [r7, #4]
9000964c:	2201      	movs	r2, #1
9000964e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009652:	687b      	ldr	r3, [r7, #4]
90009654:	2201      	movs	r2, #1
90009656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000965a:	687b      	ldr	r3, [r7, #4]
9000965c:	2201      	movs	r2, #1
9000965e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009662:	687b      	ldr	r3, [r7, #4]
90009664:	2201      	movs	r2, #1
90009666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000966a:	687b      	ldr	r3, [r7, #4]
9000966c:	2201      	movs	r2, #1
9000966e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009672:	687b      	ldr	r3, [r7, #4]
90009674:	2201      	movs	r2, #1
90009676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000967a:	687b      	ldr	r3, [r7, #4]
9000967c:	2201      	movs	r2, #1
9000967e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009682:	687b      	ldr	r3, [r7, #4]
90009684:	2201      	movs	r2, #1
90009686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000968a:	687b      	ldr	r3, [r7, #4]
9000968c:	2201      	movs	r2, #1
9000968e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009692:	687b      	ldr	r3, [r7, #4]
90009694:	2201      	movs	r2, #1
90009696:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
9000969a:	687b      	ldr	r3, [r7, #4]
9000969c:	2201      	movs	r2, #1
9000969e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
900096a2:	2300      	movs	r3, #0
}
900096a4:	4618      	mov	r0, r3
900096a6:	3708      	adds	r7, #8
900096a8:	46bd      	mov	sp, r7
900096aa:	bd80      	pop	{r7, pc}

900096ac <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
900096ac:	b580      	push	{r7, lr}
900096ae:	b082      	sub	sp, #8
900096b0:	af00      	add	r7, sp, #0
900096b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
900096b4:	687b      	ldr	r3, [r7, #4]
900096b6:	2202      	movs	r2, #2
900096b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
900096bc:	687b      	ldr	r3, [r7, #4]
900096be:	681b      	ldr	r3, [r3, #0]
900096c0:	6a1a      	ldr	r2, [r3, #32]
900096c2:	f241 1311 	movw	r3, #4369	@ 0x1111
900096c6:	4013      	ands	r3, r2
900096c8:	2b00      	cmp	r3, #0
900096ca:	d10f      	bne.n	900096ec <HAL_TIM_PWM_DeInit+0x40>
900096cc:	687b      	ldr	r3, [r7, #4]
900096ce:	681b      	ldr	r3, [r3, #0]
900096d0:	6a1a      	ldr	r2, [r3, #32]
900096d2:	f240 4344 	movw	r3, #1092	@ 0x444
900096d6:	4013      	ands	r3, r2
900096d8:	2b00      	cmp	r3, #0
900096da:	d107      	bne.n	900096ec <HAL_TIM_PWM_DeInit+0x40>
900096dc:	687b      	ldr	r3, [r7, #4]
900096de:	681b      	ldr	r3, [r3, #0]
900096e0:	681a      	ldr	r2, [r3, #0]
900096e2:	687b      	ldr	r3, [r7, #4]
900096e4:	681b      	ldr	r3, [r3, #0]
900096e6:	f022 0201 	bic.w	r2, r2, #1
900096ea:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
900096ec:	6878      	ldr	r0, [r7, #4]
900096ee:	f000 f843 	bl	90009778 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
900096f2:	687b      	ldr	r3, [r7, #4]
900096f4:	2200      	movs	r2, #0
900096f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900096fa:	687b      	ldr	r3, [r7, #4]
900096fc:	2200      	movs	r2, #0
900096fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009702:	687b      	ldr	r3, [r7, #4]
90009704:	2200      	movs	r2, #0
90009706:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000970a:	687b      	ldr	r3, [r7, #4]
9000970c:	2200      	movs	r2, #0
9000970e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009712:	687b      	ldr	r3, [r7, #4]
90009714:	2200      	movs	r2, #0
90009716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000971a:	687b      	ldr	r3, [r7, #4]
9000971c:	2200      	movs	r2, #0
9000971e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009722:	687b      	ldr	r3, [r7, #4]
90009724:	2200      	movs	r2, #0
90009726:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000972a:	687b      	ldr	r3, [r7, #4]
9000972c:	2200      	movs	r2, #0
9000972e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009732:	687b      	ldr	r3, [r7, #4]
90009734:	2200      	movs	r2, #0
90009736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000973a:	687b      	ldr	r3, [r7, #4]
9000973c:	2200      	movs	r2, #0
9000973e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009742:	687b      	ldr	r3, [r7, #4]
90009744:	2200      	movs	r2, #0
90009746:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
9000974a:	687b      	ldr	r3, [r7, #4]
9000974c:	2200      	movs	r2, #0
9000974e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
90009752:	687b      	ldr	r3, [r7, #4]
90009754:	2200      	movs	r2, #0
90009756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
9000975a:	2300      	movs	r3, #0
}
9000975c:	4618      	mov	r0, r3
9000975e:	3708      	adds	r7, #8
90009760:	46bd      	mov	sp, r7
90009762:	bd80      	pop	{r7, pc}

90009764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009764:	b480      	push	{r7}
90009766:	b083      	sub	sp, #12
90009768:	af00      	add	r7, sp, #0
9000976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
9000976c:	bf00      	nop
9000976e:	370c      	adds	r7, #12
90009770:	46bd      	mov	sp, r7
90009772:	f85d 7b04 	ldr.w	r7, [sp], #4
90009776:	4770      	bx	lr

90009778 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009778:	b480      	push	{r7}
9000977a:	b083      	sub	sp, #12
9000977c:	af00      	add	r7, sp, #0
9000977e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009780:	bf00      	nop
90009782:	370c      	adds	r7, #12
90009784:	46bd      	mov	sp, r7
90009786:	f85d 7b04 	ldr.w	r7, [sp], #4
9000978a:	4770      	bx	lr

9000978c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
9000978c:	b480      	push	{r7}
9000978e:	b085      	sub	sp, #20
90009790:	af00      	add	r7, sp, #0
90009792:	6078      	str	r0, [r7, #4]
90009794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009796:	687b      	ldr	r3, [r7, #4]
90009798:	681b      	ldr	r3, [r3, #0]
9000979a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000979c:	687b      	ldr	r3, [r7, #4]
9000979e:	4a43      	ldr	r2, [pc, #268]	@ (900098ac <TIM_Base_SetConfig+0x120>)
900097a0:	4293      	cmp	r3, r2
900097a2:	d013      	beq.n	900097cc <TIM_Base_SetConfig+0x40>
900097a4:	687b      	ldr	r3, [r7, #4]
900097a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900097aa:	d00f      	beq.n	900097cc <TIM_Base_SetConfig+0x40>
900097ac:	687b      	ldr	r3, [r7, #4]
900097ae:	4a40      	ldr	r2, [pc, #256]	@ (900098b0 <TIM_Base_SetConfig+0x124>)
900097b0:	4293      	cmp	r3, r2
900097b2:	d00b      	beq.n	900097cc <TIM_Base_SetConfig+0x40>
900097b4:	687b      	ldr	r3, [r7, #4]
900097b6:	4a3f      	ldr	r2, [pc, #252]	@ (900098b4 <TIM_Base_SetConfig+0x128>)
900097b8:	4293      	cmp	r3, r2
900097ba:	d007      	beq.n	900097cc <TIM_Base_SetConfig+0x40>
900097bc:	687b      	ldr	r3, [r7, #4]
900097be:	4a3e      	ldr	r2, [pc, #248]	@ (900098b8 <TIM_Base_SetConfig+0x12c>)
900097c0:	4293      	cmp	r3, r2
900097c2:	d003      	beq.n	900097cc <TIM_Base_SetConfig+0x40>
900097c4:	687b      	ldr	r3, [r7, #4]
900097c6:	4a3d      	ldr	r2, [pc, #244]	@ (900098bc <TIM_Base_SetConfig+0x130>)
900097c8:	4293      	cmp	r3, r2
900097ca:	d108      	bne.n	900097de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
900097cc:	68fb      	ldr	r3, [r7, #12]
900097ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
900097d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
900097d4:	683b      	ldr	r3, [r7, #0]
900097d6:	685b      	ldr	r3, [r3, #4]
900097d8:	68fa      	ldr	r2, [r7, #12]
900097da:	4313      	orrs	r3, r2
900097dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
900097de:	687b      	ldr	r3, [r7, #4]
900097e0:	4a32      	ldr	r2, [pc, #200]	@ (900098ac <TIM_Base_SetConfig+0x120>)
900097e2:	4293      	cmp	r3, r2
900097e4:	d01f      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
900097e6:	687b      	ldr	r3, [r7, #4]
900097e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900097ec:	d01b      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
900097ee:	687b      	ldr	r3, [r7, #4]
900097f0:	4a2f      	ldr	r2, [pc, #188]	@ (900098b0 <TIM_Base_SetConfig+0x124>)
900097f2:	4293      	cmp	r3, r2
900097f4:	d017      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
900097f6:	687b      	ldr	r3, [r7, #4]
900097f8:	4a2e      	ldr	r2, [pc, #184]	@ (900098b4 <TIM_Base_SetConfig+0x128>)
900097fa:	4293      	cmp	r3, r2
900097fc:	d013      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
900097fe:	687b      	ldr	r3, [r7, #4]
90009800:	4a2d      	ldr	r2, [pc, #180]	@ (900098b8 <TIM_Base_SetConfig+0x12c>)
90009802:	4293      	cmp	r3, r2
90009804:	d00f      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
90009806:	687b      	ldr	r3, [r7, #4]
90009808:	4a2c      	ldr	r2, [pc, #176]	@ (900098bc <TIM_Base_SetConfig+0x130>)
9000980a:	4293      	cmp	r3, r2
9000980c:	d00b      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
9000980e:	687b      	ldr	r3, [r7, #4]
90009810:	4a2b      	ldr	r2, [pc, #172]	@ (900098c0 <TIM_Base_SetConfig+0x134>)
90009812:	4293      	cmp	r3, r2
90009814:	d007      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
90009816:	687b      	ldr	r3, [r7, #4]
90009818:	4a2a      	ldr	r2, [pc, #168]	@ (900098c4 <TIM_Base_SetConfig+0x138>)
9000981a:	4293      	cmp	r3, r2
9000981c:	d003      	beq.n	90009826 <TIM_Base_SetConfig+0x9a>
9000981e:	687b      	ldr	r3, [r7, #4]
90009820:	4a29      	ldr	r2, [pc, #164]	@ (900098c8 <TIM_Base_SetConfig+0x13c>)
90009822:	4293      	cmp	r3, r2
90009824:	d108      	bne.n	90009838 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009826:	68fb      	ldr	r3, [r7, #12]
90009828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000982c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000982e:	683b      	ldr	r3, [r7, #0]
90009830:	68db      	ldr	r3, [r3, #12]
90009832:	68fa      	ldr	r2, [r7, #12]
90009834:	4313      	orrs	r3, r2
90009836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009838:	68fb      	ldr	r3, [r7, #12]
9000983a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
9000983e:	683b      	ldr	r3, [r7, #0]
90009840:	695b      	ldr	r3, [r3, #20]
90009842:	4313      	orrs	r3, r2
90009844:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009846:	683b      	ldr	r3, [r7, #0]
90009848:	689a      	ldr	r2, [r3, #8]
9000984a:	687b      	ldr	r3, [r7, #4]
9000984c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000984e:	683b      	ldr	r3, [r7, #0]
90009850:	681a      	ldr	r2, [r3, #0]
90009852:	687b      	ldr	r3, [r7, #4]
90009854:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009856:	687b      	ldr	r3, [r7, #4]
90009858:	4a14      	ldr	r2, [pc, #80]	@ (900098ac <TIM_Base_SetConfig+0x120>)
9000985a:	4293      	cmp	r3, r2
9000985c:	d00f      	beq.n	9000987e <TIM_Base_SetConfig+0xf2>
9000985e:	687b      	ldr	r3, [r7, #4]
90009860:	4a16      	ldr	r2, [pc, #88]	@ (900098bc <TIM_Base_SetConfig+0x130>)
90009862:	4293      	cmp	r3, r2
90009864:	d00b      	beq.n	9000987e <TIM_Base_SetConfig+0xf2>
90009866:	687b      	ldr	r3, [r7, #4]
90009868:	4a15      	ldr	r2, [pc, #84]	@ (900098c0 <TIM_Base_SetConfig+0x134>)
9000986a:	4293      	cmp	r3, r2
9000986c:	d007      	beq.n	9000987e <TIM_Base_SetConfig+0xf2>
9000986e:	687b      	ldr	r3, [r7, #4]
90009870:	4a14      	ldr	r2, [pc, #80]	@ (900098c4 <TIM_Base_SetConfig+0x138>)
90009872:	4293      	cmp	r3, r2
90009874:	d003      	beq.n	9000987e <TIM_Base_SetConfig+0xf2>
90009876:	687b      	ldr	r3, [r7, #4]
90009878:	4a13      	ldr	r2, [pc, #76]	@ (900098c8 <TIM_Base_SetConfig+0x13c>)
9000987a:	4293      	cmp	r3, r2
9000987c:	d103      	bne.n	90009886 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000987e:	683b      	ldr	r3, [r7, #0]
90009880:	691a      	ldr	r2, [r3, #16]
90009882:	687b      	ldr	r3, [r7, #4]
90009884:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009886:	687b      	ldr	r3, [r7, #4]
90009888:	681b      	ldr	r3, [r3, #0]
9000988a:	f043 0204 	orr.w	r2, r3, #4
9000988e:	687b      	ldr	r3, [r7, #4]
90009890:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009892:	687b      	ldr	r3, [r7, #4]
90009894:	2201      	movs	r2, #1
90009896:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009898:	687b      	ldr	r3, [r7, #4]
9000989a:	68fa      	ldr	r2, [r7, #12]
9000989c:	601a      	str	r2, [r3, #0]
}
9000989e:	bf00      	nop
900098a0:	3714      	adds	r7, #20
900098a2:	46bd      	mov	sp, r7
900098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900098a8:	4770      	bx	lr
900098aa:	bf00      	nop
900098ac:	40010000 	.word	0x40010000
900098b0:	40000400 	.word	0x40000400
900098b4:	40000800 	.word	0x40000800
900098b8:	40000c00 	.word	0x40000c00
900098bc:	40010400 	.word	0x40010400
900098c0:	40014000 	.word	0x40014000
900098c4:	40014400 	.word	0x40014400
900098c8:	40014800 	.word	0x40014800

900098cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
900098cc:	b480      	push	{r7}
900098ce:	b083      	sub	sp, #12
900098d0:	af00      	add	r7, sp, #0
900098d2:	6078      	str	r0, [r7, #4]
900098d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
900098d6:	683b      	ldr	r3, [r7, #0]
900098d8:	681b      	ldr	r3, [r3, #0]
900098da:	2b00      	cmp	r3, #0
900098dc:	d121      	bne.n	90009922 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900098de:	687b      	ldr	r3, [r7, #4]
900098e0:	681a      	ldr	r2, [r3, #0]
900098e2:	4b27      	ldr	r3, [pc, #156]	@ (90009980 <FMC_SDRAM_Init+0xb4>)
900098e4:	4013      	ands	r3, r2
900098e6:	683a      	ldr	r2, [r7, #0]
900098e8:	6851      	ldr	r1, [r2, #4]
900098ea:	683a      	ldr	r2, [r7, #0]
900098ec:	6892      	ldr	r2, [r2, #8]
900098ee:	4311      	orrs	r1, r2
900098f0:	683a      	ldr	r2, [r7, #0]
900098f2:	68d2      	ldr	r2, [r2, #12]
900098f4:	4311      	orrs	r1, r2
900098f6:	683a      	ldr	r2, [r7, #0]
900098f8:	6912      	ldr	r2, [r2, #16]
900098fa:	4311      	orrs	r1, r2
900098fc:	683a      	ldr	r2, [r7, #0]
900098fe:	6952      	ldr	r2, [r2, #20]
90009900:	4311      	orrs	r1, r2
90009902:	683a      	ldr	r2, [r7, #0]
90009904:	6992      	ldr	r2, [r2, #24]
90009906:	4311      	orrs	r1, r2
90009908:	683a      	ldr	r2, [r7, #0]
9000990a:	69d2      	ldr	r2, [r2, #28]
9000990c:	4311      	orrs	r1, r2
9000990e:	683a      	ldr	r2, [r7, #0]
90009910:	6a12      	ldr	r2, [r2, #32]
90009912:	4311      	orrs	r1, r2
90009914:	683a      	ldr	r2, [r7, #0]
90009916:	6a52      	ldr	r2, [r2, #36]	@ 0x24
90009918:	430a      	orrs	r2, r1
9000991a:	431a      	orrs	r2, r3
9000991c:	687b      	ldr	r3, [r7, #4]
9000991e:	601a      	str	r2, [r3, #0]
90009920:	e026      	b.n	90009970 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
90009922:	687b      	ldr	r3, [r7, #4]
90009924:	681b      	ldr	r3, [r3, #0]
90009926:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000992a:	683b      	ldr	r3, [r7, #0]
9000992c:	69d9      	ldr	r1, [r3, #28]
9000992e:	683b      	ldr	r3, [r7, #0]
90009930:	6a1b      	ldr	r3, [r3, #32]
90009932:	4319      	orrs	r1, r3
90009934:	683b      	ldr	r3, [r7, #0]
90009936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90009938:	430b      	orrs	r3, r1
9000993a:	431a      	orrs	r2, r3
9000993c:	687b      	ldr	r3, [r7, #4]
9000993e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
90009940:	687b      	ldr	r3, [r7, #4]
90009942:	685a      	ldr	r2, [r3, #4]
90009944:	4b0e      	ldr	r3, [pc, #56]	@ (90009980 <FMC_SDRAM_Init+0xb4>)
90009946:	4013      	ands	r3, r2
90009948:	683a      	ldr	r2, [r7, #0]
9000994a:	6851      	ldr	r1, [r2, #4]
9000994c:	683a      	ldr	r2, [r7, #0]
9000994e:	6892      	ldr	r2, [r2, #8]
90009950:	4311      	orrs	r1, r2
90009952:	683a      	ldr	r2, [r7, #0]
90009954:	68d2      	ldr	r2, [r2, #12]
90009956:	4311      	orrs	r1, r2
90009958:	683a      	ldr	r2, [r7, #0]
9000995a:	6912      	ldr	r2, [r2, #16]
9000995c:	4311      	orrs	r1, r2
9000995e:	683a      	ldr	r2, [r7, #0]
90009960:	6952      	ldr	r2, [r2, #20]
90009962:	4311      	orrs	r1, r2
90009964:	683a      	ldr	r2, [r7, #0]
90009966:	6992      	ldr	r2, [r2, #24]
90009968:	430a      	orrs	r2, r1
9000996a:	431a      	orrs	r2, r3
9000996c:	687b      	ldr	r3, [r7, #4]
9000996e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
90009970:	2300      	movs	r3, #0
}
90009972:	4618      	mov	r0, r3
90009974:	370c      	adds	r7, #12
90009976:	46bd      	mov	sp, r7
90009978:	f85d 7b04 	ldr.w	r7, [sp], #4
9000997c:	4770      	bx	lr
9000997e:	bf00      	nop
90009980:	ffff8000 	.word	0xffff8000

90009984 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
90009984:	b480      	push	{r7}
90009986:	b085      	sub	sp, #20
90009988:	af00      	add	r7, sp, #0
9000998a:	60f8      	str	r0, [r7, #12]
9000998c:	60b9      	str	r1, [r7, #8]
9000998e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
90009990:	687b      	ldr	r3, [r7, #4]
90009992:	2b00      	cmp	r3, #0
90009994:	d128      	bne.n	900099e8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
90009996:	68fb      	ldr	r3, [r7, #12]
90009998:	689b      	ldr	r3, [r3, #8]
9000999a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000999e:	68bb      	ldr	r3, [r7, #8]
900099a0:	681b      	ldr	r3, [r3, #0]
900099a2:	1e59      	subs	r1, r3, #1
900099a4:	68bb      	ldr	r3, [r7, #8]
900099a6:	685b      	ldr	r3, [r3, #4]
900099a8:	3b01      	subs	r3, #1
900099aa:	011b      	lsls	r3, r3, #4
900099ac:	4319      	orrs	r1, r3
900099ae:	68bb      	ldr	r3, [r7, #8]
900099b0:	689b      	ldr	r3, [r3, #8]
900099b2:	3b01      	subs	r3, #1
900099b4:	021b      	lsls	r3, r3, #8
900099b6:	4319      	orrs	r1, r3
900099b8:	68bb      	ldr	r3, [r7, #8]
900099ba:	68db      	ldr	r3, [r3, #12]
900099bc:	3b01      	subs	r3, #1
900099be:	031b      	lsls	r3, r3, #12
900099c0:	4319      	orrs	r1, r3
900099c2:	68bb      	ldr	r3, [r7, #8]
900099c4:	691b      	ldr	r3, [r3, #16]
900099c6:	3b01      	subs	r3, #1
900099c8:	041b      	lsls	r3, r3, #16
900099ca:	4319      	orrs	r1, r3
900099cc:	68bb      	ldr	r3, [r7, #8]
900099ce:	695b      	ldr	r3, [r3, #20]
900099d0:	3b01      	subs	r3, #1
900099d2:	051b      	lsls	r3, r3, #20
900099d4:	4319      	orrs	r1, r3
900099d6:	68bb      	ldr	r3, [r7, #8]
900099d8:	699b      	ldr	r3, [r3, #24]
900099da:	3b01      	subs	r3, #1
900099dc:	061b      	lsls	r3, r3, #24
900099de:	430b      	orrs	r3, r1
900099e0:	431a      	orrs	r2, r3
900099e2:	68fb      	ldr	r3, [r7, #12]
900099e4:	609a      	str	r2, [r3, #8]
900099e6:	e02d      	b.n	90009a44 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
900099e8:	68fb      	ldr	r3, [r7, #12]
900099ea:	689a      	ldr	r2, [r3, #8]
900099ec:	4b19      	ldr	r3, [pc, #100]	@ (90009a54 <FMC_SDRAM_Timing_Init+0xd0>)
900099ee:	4013      	ands	r3, r2
900099f0:	68ba      	ldr	r2, [r7, #8]
900099f2:	68d2      	ldr	r2, [r2, #12]
900099f4:	3a01      	subs	r2, #1
900099f6:	0311      	lsls	r1, r2, #12
900099f8:	68ba      	ldr	r2, [r7, #8]
900099fa:	6952      	ldr	r2, [r2, #20]
900099fc:	3a01      	subs	r2, #1
900099fe:	0512      	lsls	r2, r2, #20
90009a00:	430a      	orrs	r2, r1
90009a02:	431a      	orrs	r2, r3
90009a04:	68fb      	ldr	r3, [r7, #12]
90009a06:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
90009a08:	68fb      	ldr	r3, [r7, #12]
90009a0a:	68db      	ldr	r3, [r3, #12]
90009a0c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
90009a10:	68bb      	ldr	r3, [r7, #8]
90009a12:	681b      	ldr	r3, [r3, #0]
90009a14:	1e59      	subs	r1, r3, #1
90009a16:	68bb      	ldr	r3, [r7, #8]
90009a18:	685b      	ldr	r3, [r3, #4]
90009a1a:	3b01      	subs	r3, #1
90009a1c:	011b      	lsls	r3, r3, #4
90009a1e:	4319      	orrs	r1, r3
90009a20:	68bb      	ldr	r3, [r7, #8]
90009a22:	689b      	ldr	r3, [r3, #8]
90009a24:	3b01      	subs	r3, #1
90009a26:	021b      	lsls	r3, r3, #8
90009a28:	4319      	orrs	r1, r3
90009a2a:	68bb      	ldr	r3, [r7, #8]
90009a2c:	691b      	ldr	r3, [r3, #16]
90009a2e:	3b01      	subs	r3, #1
90009a30:	041b      	lsls	r3, r3, #16
90009a32:	4319      	orrs	r1, r3
90009a34:	68bb      	ldr	r3, [r7, #8]
90009a36:	699b      	ldr	r3, [r3, #24]
90009a38:	3b01      	subs	r3, #1
90009a3a:	061b      	lsls	r3, r3, #24
90009a3c:	430b      	orrs	r3, r1
90009a3e:	431a      	orrs	r2, r3
90009a40:	68fb      	ldr	r3, [r7, #12]
90009a42:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
90009a44:	2300      	movs	r3, #0
}
90009a46:	4618      	mov	r0, r3
90009a48:	3714      	adds	r7, #20
90009a4a:	46bd      	mov	sp, r7
90009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a50:	4770      	bx	lr
90009a52:	bf00      	nop
90009a54:	ff0f0fff 	.word	0xff0f0fff

90009a58 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90009a58:	b480      	push	{r7}
90009a5a:	b085      	sub	sp, #20
90009a5c:	af00      	add	r7, sp, #0
90009a5e:	60f8      	str	r0, [r7, #12]
90009a60:	60b9      	str	r1, [r7, #8]
90009a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
90009a64:	68fb      	ldr	r3, [r7, #12]
90009a66:	691a      	ldr	r2, [r3, #16]
90009a68:	4b0c      	ldr	r3, [pc, #48]	@ (90009a9c <FMC_SDRAM_SendCommand+0x44>)
90009a6a:	4013      	ands	r3, r2
90009a6c:	68ba      	ldr	r2, [r7, #8]
90009a6e:	6811      	ldr	r1, [r2, #0]
90009a70:	68ba      	ldr	r2, [r7, #8]
90009a72:	6852      	ldr	r2, [r2, #4]
90009a74:	4311      	orrs	r1, r2
90009a76:	68ba      	ldr	r2, [r7, #8]
90009a78:	6892      	ldr	r2, [r2, #8]
90009a7a:	3a01      	subs	r2, #1
90009a7c:	0152      	lsls	r2, r2, #5
90009a7e:	4311      	orrs	r1, r2
90009a80:	68ba      	ldr	r2, [r7, #8]
90009a82:	68d2      	ldr	r2, [r2, #12]
90009a84:	0252      	lsls	r2, r2, #9
90009a86:	430a      	orrs	r2, r1
90009a88:	431a      	orrs	r2, r3
90009a8a:	68fb      	ldr	r3, [r7, #12]
90009a8c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
90009a8e:	2300      	movs	r3, #0
}
90009a90:	4618      	mov	r0, r3
90009a92:	3714      	adds	r7, #20
90009a94:	46bd      	mov	sp, r7
90009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a9a:	4770      	bx	lr
90009a9c:	ffc00000 	.word	0xffc00000

90009aa0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
90009aa0:	b480      	push	{r7}
90009aa2:	b083      	sub	sp, #12
90009aa4:	af00      	add	r7, sp, #0
90009aa6:	6078      	str	r0, [r7, #4]
90009aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
90009aaa:	687b      	ldr	r3, [r7, #4]
90009aac:	695a      	ldr	r2, [r3, #20]
90009aae:	4b07      	ldr	r3, [pc, #28]	@ (90009acc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
90009ab0:	4013      	ands	r3, r2
90009ab2:	683a      	ldr	r2, [r7, #0]
90009ab4:	0052      	lsls	r2, r2, #1
90009ab6:	431a      	orrs	r2, r3
90009ab8:	687b      	ldr	r3, [r7, #4]
90009aba:	615a      	str	r2, [r3, #20]

  return HAL_OK;
90009abc:	2300      	movs	r3, #0
}
90009abe:	4618      	mov	r0, r3
90009ac0:	370c      	adds	r7, #12
90009ac2:	46bd      	mov	sp, r7
90009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ac8:	4770      	bx	lr
90009aca:	bf00      	nop
90009acc:	ffffc001 	.word	0xffffc001

90009ad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
90009ad0:	b480      	push	{r7}
90009ad2:	b083      	sub	sp, #12
90009ad4:	af00      	add	r7, sp, #0
90009ad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
90009ad8:	687b      	ldr	r3, [r7, #4]
90009ada:	689b      	ldr	r3, [r3, #8]
90009adc:	f043 0201 	orr.w	r2, r3, #1
90009ae0:	687b      	ldr	r3, [r7, #4]
90009ae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
90009ae4:	2300      	movs	r3, #0
}
90009ae6:	4618      	mov	r0, r3
90009ae8:	370c      	adds	r7, #12
90009aea:	46bd      	mov	sp, r7
90009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
90009af0:	4770      	bx	lr

90009af2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
90009af2:	b480      	push	{r7}
90009af4:	b083      	sub	sp, #12
90009af6:	af00      	add	r7, sp, #0
90009af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90009afa:	687b      	ldr	r3, [r7, #4]
90009afc:	689b      	ldr	r3, [r3, #8]
90009afe:	f023 0201 	bic.w	r2, r3, #1
90009b02:	687b      	ldr	r3, [r7, #4]
90009b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
90009b06:	2300      	movs	r3, #0
}
90009b08:	4618      	mov	r0, r3
90009b0a:	370c      	adds	r7, #12
90009b0c:	46bd      	mov	sp, r7
90009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b12:	4770      	bx	lr

90009b14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
90009b14:	b480      	push	{r7}
90009b16:	b085      	sub	sp, #20
90009b18:	af00      	add	r7, sp, #0
90009b1a:	6078      	str	r0, [r7, #4]
90009b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
90009b1e:	2300      	movs	r3, #0
90009b20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
90009b22:	68fb      	ldr	r3, [r7, #12]
90009b24:	3301      	adds	r3, #1
90009b26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009b28:	68fb      	ldr	r3, [r7, #12]
90009b2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009b2e:	d901      	bls.n	90009b34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
90009b30:	2303      	movs	r3, #3
90009b32:	e01b      	b.n	90009b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009b34:	687b      	ldr	r3, [r7, #4]
90009b36:	691b      	ldr	r3, [r3, #16]
90009b38:	2b00      	cmp	r3, #0
90009b3a:	daf2      	bge.n	90009b22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
90009b3c:	2300      	movs	r3, #0
90009b3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
90009b40:	683b      	ldr	r3, [r7, #0]
90009b42:	019b      	lsls	r3, r3, #6
90009b44:	f043 0220 	orr.w	r2, r3, #32
90009b48:	687b      	ldr	r3, [r7, #4]
90009b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009b4c:	68fb      	ldr	r3, [r7, #12]
90009b4e:	3301      	adds	r3, #1
90009b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009b52:	68fb      	ldr	r3, [r7, #12]
90009b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009b58:	d901      	bls.n	90009b5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
90009b5a:	2303      	movs	r3, #3
90009b5c:	e006      	b.n	90009b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
90009b5e:	687b      	ldr	r3, [r7, #4]
90009b60:	691b      	ldr	r3, [r3, #16]
90009b62:	f003 0320 	and.w	r3, r3, #32
90009b66:	2b20      	cmp	r3, #32
90009b68:	d0f0      	beq.n	90009b4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
90009b6a:	2300      	movs	r3, #0
}
90009b6c:	4618      	mov	r0, r3
90009b6e:	3714      	adds	r7, #20
90009b70:	46bd      	mov	sp, r7
90009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b76:	4770      	bx	lr

90009b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
90009b78:	b480      	push	{r7}
90009b7a:	b085      	sub	sp, #20
90009b7c:	af00      	add	r7, sp, #0
90009b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
90009b80:	2300      	movs	r3, #0
90009b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
90009b84:	68fb      	ldr	r3, [r7, #12]
90009b86:	3301      	adds	r3, #1
90009b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009b8a:	68fb      	ldr	r3, [r7, #12]
90009b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009b90:	d901      	bls.n	90009b96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
90009b92:	2303      	movs	r3, #3
90009b94:	e018      	b.n	90009bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009b96:	687b      	ldr	r3, [r7, #4]
90009b98:	691b      	ldr	r3, [r3, #16]
90009b9a:	2b00      	cmp	r3, #0
90009b9c:	daf2      	bge.n	90009b84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
90009b9e:	2300      	movs	r3, #0
90009ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
90009ba2:	687b      	ldr	r3, [r7, #4]
90009ba4:	2210      	movs	r2, #16
90009ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009ba8:	68fb      	ldr	r3, [r7, #12]
90009baa:	3301      	adds	r3, #1
90009bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009bae:	68fb      	ldr	r3, [r7, #12]
90009bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009bb4:	d901      	bls.n	90009bba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
90009bb6:	2303      	movs	r3, #3
90009bb8:	e006      	b.n	90009bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
90009bba:	687b      	ldr	r3, [r7, #4]
90009bbc:	691b      	ldr	r3, [r3, #16]
90009bbe:	f003 0310 	and.w	r3, r3, #16
90009bc2:	2b10      	cmp	r3, #16
90009bc4:	d0f0      	beq.n	90009ba8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
90009bc6:	2300      	movs	r3, #0
}
90009bc8:	4618      	mov	r0, r3
90009bca:	3714      	adds	r7, #20
90009bcc:	46bd      	mov	sp, r7
90009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
90009bd2:	4770      	bx	lr

90009bd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
90009bd4:	b480      	push	{r7}
90009bd6:	b08b      	sub	sp, #44	@ 0x2c
90009bd8:	af00      	add	r7, sp, #0
90009bda:	60f8      	str	r0, [r7, #12]
90009bdc:	60b9      	str	r1, [r7, #8]
90009bde:	4613      	mov	r3, r2
90009be0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009be2:	68fb      	ldr	r3, [r7, #12]
90009be4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
90009be6:	68bb      	ldr	r3, [r7, #8]
90009be8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
90009bea:	88fb      	ldrh	r3, [r7, #6]
90009bec:	089b      	lsrs	r3, r3, #2
90009bee:	b29b      	uxth	r3, r3
90009bf0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
90009bf2:	88fb      	ldrh	r3, [r7, #6]
90009bf4:	f003 0303 	and.w	r3, r3, #3
90009bf8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
90009bfa:	2300      	movs	r3, #0
90009bfc:	623b      	str	r3, [r7, #32]
90009bfe:	e014      	b.n	90009c2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90009c00:	69bb      	ldr	r3, [r7, #24]
90009c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
90009c06:	681a      	ldr	r2, [r3, #0]
90009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c0a:	601a      	str	r2, [r3, #0]
    pDest++;
90009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c0e:	3301      	adds	r3, #1
90009c10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
90009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c14:	3301      	adds	r3, #1
90009c16:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
90009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c1a:	3301      	adds	r3, #1
90009c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
90009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c20:	3301      	adds	r3, #1
90009c22:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
90009c24:	6a3b      	ldr	r3, [r7, #32]
90009c26:	3301      	adds	r3, #1
90009c28:	623b      	str	r3, [r7, #32]
90009c2a:	6a3a      	ldr	r2, [r7, #32]
90009c2c:	697b      	ldr	r3, [r7, #20]
90009c2e:	429a      	cmp	r2, r3
90009c30:	d3e6      	bcc.n	90009c00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
90009c32:	8bfb      	ldrh	r3, [r7, #30]
90009c34:	2b00      	cmp	r3, #0
90009c36:	d01e      	beq.n	90009c76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
90009c38:	2300      	movs	r3, #0
90009c3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
90009c3c:	69bb      	ldr	r3, [r7, #24]
90009c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
90009c42:	461a      	mov	r2, r3
90009c44:	f107 0310 	add.w	r3, r7, #16
90009c48:	6812      	ldr	r2, [r2, #0]
90009c4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
90009c4c:	693a      	ldr	r2, [r7, #16]
90009c4e:	6a3b      	ldr	r3, [r7, #32]
90009c50:	b2db      	uxtb	r3, r3
90009c52:	00db      	lsls	r3, r3, #3
90009c54:	fa22 f303 	lsr.w	r3, r2, r3
90009c58:	b2da      	uxtb	r2, r3
90009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c5c:	701a      	strb	r2, [r3, #0]
      i++;
90009c5e:	6a3b      	ldr	r3, [r7, #32]
90009c60:	3301      	adds	r3, #1
90009c62:	623b      	str	r3, [r7, #32]
      pDest++;
90009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009c66:	3301      	adds	r3, #1
90009c68:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
90009c6a:	8bfb      	ldrh	r3, [r7, #30]
90009c6c:	3b01      	subs	r3, #1
90009c6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
90009c70:	8bfb      	ldrh	r3, [r7, #30]
90009c72:	2b00      	cmp	r3, #0
90009c74:	d1ea      	bne.n	90009c4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
90009c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
90009c78:	4618      	mov	r0, r3
90009c7a:	372c      	adds	r7, #44	@ 0x2c
90009c7c:	46bd      	mov	sp, r7
90009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009c82:	4770      	bx	lr

90009c84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
90009c84:	b480      	push	{r7}
90009c86:	b085      	sub	sp, #20
90009c88:	af00      	add	r7, sp, #0
90009c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
90009c8c:	687b      	ldr	r3, [r7, #4]
90009c8e:	695b      	ldr	r3, [r3, #20]
90009c90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
90009c92:	687b      	ldr	r3, [r7, #4]
90009c94:	699b      	ldr	r3, [r3, #24]
90009c96:	68fa      	ldr	r2, [r7, #12]
90009c98:	4013      	ands	r3, r2
90009c9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
90009c9c:	68fb      	ldr	r3, [r7, #12]
}
90009c9e:	4618      	mov	r0, r3
90009ca0:	3714      	adds	r7, #20
90009ca2:	46bd      	mov	sp, r7
90009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ca8:	4770      	bx	lr

90009caa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
90009caa:	b480      	push	{r7}
90009cac:	b085      	sub	sp, #20
90009cae:	af00      	add	r7, sp, #0
90009cb0:	6078      	str	r0, [r7, #4]
90009cb2:	460b      	mov	r3, r1
90009cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009cb6:	687b      	ldr	r3, [r7, #4]
90009cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
90009cba:	78fb      	ldrb	r3, [r7, #3]
90009cbc:	015a      	lsls	r2, r3, #5
90009cbe:	68fb      	ldr	r3, [r7, #12]
90009cc0:	4413      	add	r3, r2
90009cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009cc6:	689b      	ldr	r3, [r3, #8]
90009cc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
90009cca:	78fb      	ldrb	r3, [r7, #3]
90009ccc:	015a      	lsls	r2, r3, #5
90009cce:	68fb      	ldr	r3, [r7, #12]
90009cd0:	4413      	add	r3, r2
90009cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009cd6:	68db      	ldr	r3, [r3, #12]
90009cd8:	68ba      	ldr	r2, [r7, #8]
90009cda:	4013      	ands	r3, r2
90009cdc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
90009cde:	68bb      	ldr	r3, [r7, #8]
}
90009ce0:	4618      	mov	r0, r3
90009ce2:	3714      	adds	r7, #20
90009ce4:	46bd      	mov	sp, r7
90009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
90009cea:	4770      	bx	lr

90009cec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
90009cec:	b480      	push	{r7}
90009cee:	b083      	sub	sp, #12
90009cf0:	af00      	add	r7, sp, #0
90009cf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
90009cf4:	687b      	ldr	r3, [r7, #4]
90009cf6:	695b      	ldr	r3, [r3, #20]
90009cf8:	f003 0301 	and.w	r3, r3, #1
}
90009cfc:	4618      	mov	r0, r3
90009cfe:	370c      	adds	r7, #12
90009d00:	46bd      	mov	sp, r7
90009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
90009d06:	4770      	bx	lr

90009d08 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
90009d08:	b480      	push	{r7}
90009d0a:	b085      	sub	sp, #20
90009d0c:	af00      	add	r7, sp, #0
90009d0e:	6078      	str	r0, [r7, #4]
90009d10:	460b      	mov	r3, r1
90009d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009d14:	687b      	ldr	r3, [r7, #4]
90009d16:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90009d18:	68fb      	ldr	r3, [r7, #12]
90009d1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009d1e:	681b      	ldr	r3, [r3, #0]
90009d20:	68fa      	ldr	r2, [r7, #12]
90009d22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
90009d26:	f023 0303 	bic.w	r3, r3, #3
90009d2a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
90009d2c:	68fb      	ldr	r3, [r7, #12]
90009d2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009d32:	681a      	ldr	r2, [r3, #0]
90009d34:	78fb      	ldrb	r3, [r7, #3]
90009d36:	f003 0303 	and.w	r3, r3, #3
90009d3a:	68f9      	ldr	r1, [r7, #12]
90009d3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
90009d40:	4313      	orrs	r3, r2
90009d42:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
90009d44:	78fb      	ldrb	r3, [r7, #3]
90009d46:	2b01      	cmp	r3, #1
90009d48:	d107      	bne.n	90009d5a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
90009d4a:	68fb      	ldr	r3, [r7, #12]
90009d4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009d50:	461a      	mov	r2, r3
90009d52:	f64b 3380 	movw	r3, #48000	@ 0xbb80
90009d56:	6053      	str	r3, [r2, #4]
90009d58:	e00c      	b.n	90009d74 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
90009d5a:	78fb      	ldrb	r3, [r7, #3]
90009d5c:	2b02      	cmp	r3, #2
90009d5e:	d107      	bne.n	90009d70 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
90009d60:	68fb      	ldr	r3, [r7, #12]
90009d62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009d66:	461a      	mov	r2, r3
90009d68:	f241 7370 	movw	r3, #6000	@ 0x1770
90009d6c:	6053      	str	r3, [r2, #4]
90009d6e:	e001      	b.n	90009d74 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
90009d70:	2301      	movs	r3, #1
90009d72:	e000      	b.n	90009d76 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
90009d74:	2300      	movs	r3, #0
}
90009d76:	4618      	mov	r0, r3
90009d78:	3714      	adds	r7, #20
90009d7a:	46bd      	mov	sp, r7
90009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009d80:	4770      	bx	lr

90009d82 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
90009d82:	b480      	push	{r7}
90009d84:	b085      	sub	sp, #20
90009d86:	af00      	add	r7, sp, #0
90009d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009d8a:	687b      	ldr	r3, [r7, #4]
90009d8c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
90009d8e:	68fb      	ldr	r3, [r7, #12]
90009d90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009d94:	695b      	ldr	r3, [r3, #20]
90009d96:	b29b      	uxth	r3, r3
}
90009d98:	4618      	mov	r0, r3
90009d9a:	3714      	adds	r7, #20
90009d9c:	46bd      	mov	sp, r7
90009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009da2:	4770      	bx	lr

90009da4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
90009da4:	b480      	push	{r7}
90009da6:	b089      	sub	sp, #36	@ 0x24
90009da8:	af00      	add	r7, sp, #0
90009daa:	6078      	str	r0, [r7, #4]
90009dac:	460b      	mov	r3, r1
90009dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009db0:	687b      	ldr	r3, [r7, #4]
90009db2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
90009db4:	78fb      	ldrb	r3, [r7, #3]
90009db6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
90009db8:	2300      	movs	r3, #0
90009dba:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
90009dbc:	69bb      	ldr	r3, [r7, #24]
90009dbe:	015a      	lsls	r2, r3, #5
90009dc0:	69fb      	ldr	r3, [r7, #28]
90009dc2:	4413      	add	r3, r2
90009dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009dc8:	681b      	ldr	r3, [r3, #0]
90009dca:	0c9b      	lsrs	r3, r3, #18
90009dcc:	f003 0303 	and.w	r3, r3, #3
90009dd0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
90009dd2:	69bb      	ldr	r3, [r7, #24]
90009dd4:	015a      	lsls	r2, r3, #5
90009dd6:	69fb      	ldr	r3, [r7, #28]
90009dd8:	4413      	add	r3, r2
90009dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009dde:	681b      	ldr	r3, [r3, #0]
90009de0:	0fdb      	lsrs	r3, r3, #31
90009de2:	f003 0301 	and.w	r3, r3, #1
90009de6:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
90009de8:	69bb      	ldr	r3, [r7, #24]
90009dea:	015a      	lsls	r2, r3, #5
90009dec:	69fb      	ldr	r3, [r7, #28]
90009dee:	4413      	add	r3, r2
90009df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009df4:	685b      	ldr	r3, [r3, #4]
90009df6:	0fdb      	lsrs	r3, r3, #31
90009df8:	f003 0301 	and.w	r3, r3, #1
90009dfc:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
90009dfe:	687b      	ldr	r3, [r7, #4]
90009e00:	689b      	ldr	r3, [r3, #8]
90009e02:	f003 0320 	and.w	r3, r3, #32
90009e06:	2b20      	cmp	r3, #32
90009e08:	d10d      	bne.n	90009e26 <USB_HC_Halt+0x82>
90009e0a:	68fb      	ldr	r3, [r7, #12]
90009e0c:	2b00      	cmp	r3, #0
90009e0e:	d10a      	bne.n	90009e26 <USB_HC_Halt+0x82>
90009e10:	693b      	ldr	r3, [r7, #16]
90009e12:	2b00      	cmp	r3, #0
90009e14:	d005      	beq.n	90009e22 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
90009e16:	697b      	ldr	r3, [r7, #20]
90009e18:	2b01      	cmp	r3, #1
90009e1a:	d002      	beq.n	90009e22 <USB_HC_Halt+0x7e>
90009e1c:	697b      	ldr	r3, [r7, #20]
90009e1e:	2b03      	cmp	r3, #3
90009e20:	d101      	bne.n	90009e26 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
90009e22:	2300      	movs	r3, #0
90009e24:	e0d8      	b.n	90009fd8 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90009e26:	697b      	ldr	r3, [r7, #20]
90009e28:	2b00      	cmp	r3, #0
90009e2a:	d002      	beq.n	90009e32 <USB_HC_Halt+0x8e>
90009e2c:	697b      	ldr	r3, [r7, #20]
90009e2e:	2b02      	cmp	r3, #2
90009e30:	d173      	bne.n	90009f1a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90009e32:	69bb      	ldr	r3, [r7, #24]
90009e34:	015a      	lsls	r2, r3, #5
90009e36:	69fb      	ldr	r3, [r7, #28]
90009e38:	4413      	add	r3, r2
90009e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009e3e:	681b      	ldr	r3, [r3, #0]
90009e40:	69ba      	ldr	r2, [r7, #24]
90009e42:	0151      	lsls	r1, r2, #5
90009e44:	69fa      	ldr	r2, [r7, #28]
90009e46:	440a      	add	r2, r1
90009e48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90009e50:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009e52:	687b      	ldr	r3, [r7, #4]
90009e54:	689b      	ldr	r3, [r3, #8]
90009e56:	f003 0320 	and.w	r3, r3, #32
90009e5a:	2b00      	cmp	r3, #0
90009e5c:	d14a      	bne.n	90009ef4 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90009e5e:	687b      	ldr	r3, [r7, #4]
90009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009e62:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90009e66:	2b00      	cmp	r3, #0
90009e68:	d133      	bne.n	90009ed2 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90009e6a:	69bb      	ldr	r3, [r7, #24]
90009e6c:	015a      	lsls	r2, r3, #5
90009e6e:	69fb      	ldr	r3, [r7, #28]
90009e70:	4413      	add	r3, r2
90009e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009e76:	681b      	ldr	r3, [r3, #0]
90009e78:	69ba      	ldr	r2, [r7, #24]
90009e7a:	0151      	lsls	r1, r2, #5
90009e7c:	69fa      	ldr	r2, [r7, #28]
90009e7e:	440a      	add	r2, r1
90009e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009e84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
90009e88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009e8a:	69bb      	ldr	r3, [r7, #24]
90009e8c:	015a      	lsls	r2, r3, #5
90009e8e:	69fb      	ldr	r3, [r7, #28]
90009e90:	4413      	add	r3, r2
90009e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009e96:	681b      	ldr	r3, [r3, #0]
90009e98:	69ba      	ldr	r2, [r7, #24]
90009e9a:	0151      	lsls	r1, r2, #5
90009e9c:	69fa      	ldr	r2, [r7, #28]
90009e9e:	440a      	add	r2, r1
90009ea0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009ea4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009ea8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
90009eaa:	68bb      	ldr	r3, [r7, #8]
90009eac:	3301      	adds	r3, #1
90009eae:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
90009eb0:	68bb      	ldr	r3, [r7, #8]
90009eb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
90009eb6:	d82e      	bhi.n	90009f16 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009eb8:	69bb      	ldr	r3, [r7, #24]
90009eba:	015a      	lsls	r2, r3, #5
90009ebc:	69fb      	ldr	r3, [r7, #28]
90009ebe:	4413      	add	r3, r2
90009ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009ec4:	681b      	ldr	r3, [r3, #0]
90009ec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
90009eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
90009ece:	d0ec      	beq.n	90009eaa <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009ed0:	e081      	b.n	90009fd6 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009ed2:	69bb      	ldr	r3, [r7, #24]
90009ed4:	015a      	lsls	r2, r3, #5
90009ed6:	69fb      	ldr	r3, [r7, #28]
90009ed8:	4413      	add	r3, r2
90009eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009ede:	681b      	ldr	r3, [r3, #0]
90009ee0:	69ba      	ldr	r2, [r7, #24]
90009ee2:	0151      	lsls	r1, r2, #5
90009ee4:	69fa      	ldr	r2, [r7, #28]
90009ee6:	440a      	add	r2, r1
90009ee8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009eec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009ef0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009ef2:	e070      	b.n	90009fd6 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009ef4:	69bb      	ldr	r3, [r7, #24]
90009ef6:	015a      	lsls	r2, r3, #5
90009ef8:	69fb      	ldr	r3, [r7, #28]
90009efa:	4413      	add	r3, r2
90009efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f00:	681b      	ldr	r3, [r3, #0]
90009f02:	69ba      	ldr	r2, [r7, #24]
90009f04:	0151      	lsls	r1, r2, #5
90009f06:	69fa      	ldr	r2, [r7, #28]
90009f08:	440a      	add	r2, r1
90009f0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009f0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009f12:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009f14:	e05f      	b.n	90009fd6 <USB_HC_Halt+0x232>
            break;
90009f16:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009f18:	e05d      	b.n	90009fd6 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90009f1a:	69bb      	ldr	r3, [r7, #24]
90009f1c:	015a      	lsls	r2, r3, #5
90009f1e:	69fb      	ldr	r3, [r7, #28]
90009f20:	4413      	add	r3, r2
90009f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f26:	681b      	ldr	r3, [r3, #0]
90009f28:	69ba      	ldr	r2, [r7, #24]
90009f2a:	0151      	lsls	r1, r2, #5
90009f2c:	69fa      	ldr	r2, [r7, #28]
90009f2e:	440a      	add	r2, r1
90009f30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009f34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90009f38:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90009f3a:	69fb      	ldr	r3, [r7, #28]
90009f3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009f40:	691b      	ldr	r3, [r3, #16]
90009f42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90009f46:	2b00      	cmp	r3, #0
90009f48:	d133      	bne.n	90009fb2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90009f4a:	69bb      	ldr	r3, [r7, #24]
90009f4c:	015a      	lsls	r2, r3, #5
90009f4e:	69fb      	ldr	r3, [r7, #28]
90009f50:	4413      	add	r3, r2
90009f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f56:	681b      	ldr	r3, [r3, #0]
90009f58:	69ba      	ldr	r2, [r7, #24]
90009f5a:	0151      	lsls	r1, r2, #5
90009f5c:	69fa      	ldr	r2, [r7, #28]
90009f5e:	440a      	add	r2, r1
90009f60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009f64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
90009f68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009f6a:	69bb      	ldr	r3, [r7, #24]
90009f6c:	015a      	lsls	r2, r3, #5
90009f6e:	69fb      	ldr	r3, [r7, #28]
90009f70:	4413      	add	r3, r2
90009f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f76:	681b      	ldr	r3, [r3, #0]
90009f78:	69ba      	ldr	r2, [r7, #24]
90009f7a:	0151      	lsls	r1, r2, #5
90009f7c:	69fa      	ldr	r2, [r7, #28]
90009f7e:	440a      	add	r2, r1
90009f80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009f84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009f88:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
90009f8a:	68bb      	ldr	r3, [r7, #8]
90009f8c:	3301      	adds	r3, #1
90009f8e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
90009f90:	68bb      	ldr	r3, [r7, #8]
90009f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
90009f96:	d81d      	bhi.n	90009fd4 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009f98:	69bb      	ldr	r3, [r7, #24]
90009f9a:	015a      	lsls	r2, r3, #5
90009f9c:	69fb      	ldr	r3, [r7, #28]
90009f9e:	4413      	add	r3, r2
90009fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009fa4:	681b      	ldr	r3, [r3, #0]
90009fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
90009faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
90009fae:	d0ec      	beq.n	90009f8a <USB_HC_Halt+0x1e6>
90009fb0:	e011      	b.n	90009fd6 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009fb2:	69bb      	ldr	r3, [r7, #24]
90009fb4:	015a      	lsls	r2, r3, #5
90009fb6:	69fb      	ldr	r3, [r7, #28]
90009fb8:	4413      	add	r3, r2
90009fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009fbe:	681b      	ldr	r3, [r3, #0]
90009fc0:	69ba      	ldr	r2, [r7, #24]
90009fc2:	0151      	lsls	r1, r2, #5
90009fc4:	69fa      	ldr	r2, [r7, #28]
90009fc6:	440a      	add	r2, r1
90009fc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009fd0:	6013      	str	r3, [r2, #0]
90009fd2:	e000      	b.n	90009fd6 <USB_HC_Halt+0x232>
          break;
90009fd4:	bf00      	nop
    }
  }

  return HAL_OK;
90009fd6:	2300      	movs	r3, #0
}
90009fd8:	4618      	mov	r0, r3
90009fda:	3724      	adds	r7, #36	@ 0x24
90009fdc:	46bd      	mov	sp, r7
90009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
90009fe2:	4770      	bx	lr

90009fe4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
90009fe4:	b580      	push	{r7, lr}
90009fe6:	b088      	sub	sp, #32
90009fe8:	af00      	add	r7, sp, #0
90009fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
90009fec:	2300      	movs	r3, #0
90009fee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009ff0:	687b      	ldr	r3, [r7, #4]
90009ff2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
90009ff4:	2300      	movs	r3, #0
90009ff6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
90009ff8:	6878      	ldr	r0, [r7, #4]
90009ffa:	f7ff fd7a 	bl	90009af2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
90009ffe:	2110      	movs	r1, #16
9000a000:	6878      	ldr	r0, [r7, #4]
9000a002:	f7ff fd87 	bl	90009b14 <USB_FlushTxFifo>
9000a006:	4603      	mov	r3, r0
9000a008:	2b00      	cmp	r3, #0
9000a00a:	d001      	beq.n	9000a010 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000a00c:	2301      	movs	r3, #1
9000a00e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000a010:	6878      	ldr	r0, [r7, #4]
9000a012:	f7ff fdb1 	bl	90009b78 <USB_FlushRxFifo>
9000a016:	4603      	mov	r3, r0
9000a018:	2b00      	cmp	r3, #0
9000a01a:	d001      	beq.n	9000a020 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000a01c:	2301      	movs	r3, #1
9000a01e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000a020:	2300      	movs	r3, #0
9000a022:	61bb      	str	r3, [r7, #24]
9000a024:	e01f      	b.n	9000a066 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000a026:	69bb      	ldr	r3, [r7, #24]
9000a028:	015a      	lsls	r2, r3, #5
9000a02a:	697b      	ldr	r3, [r7, #20]
9000a02c:	4413      	add	r3, r2
9000a02e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a032:	681b      	ldr	r3, [r3, #0]
9000a034:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000a036:	693b      	ldr	r3, [r7, #16]
9000a038:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000a03c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000a03e:	693b      	ldr	r3, [r7, #16]
9000a040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000a044:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000a046:	693b      	ldr	r3, [r7, #16]
9000a048:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000a04c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000a04e:	69bb      	ldr	r3, [r7, #24]
9000a050:	015a      	lsls	r2, r3, #5
9000a052:	697b      	ldr	r3, [r7, #20]
9000a054:	4413      	add	r3, r2
9000a056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a05a:	461a      	mov	r2, r3
9000a05c:	693b      	ldr	r3, [r7, #16]
9000a05e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000a060:	69bb      	ldr	r3, [r7, #24]
9000a062:	3301      	adds	r3, #1
9000a064:	61bb      	str	r3, [r7, #24]
9000a066:	69bb      	ldr	r3, [r7, #24]
9000a068:	2b0f      	cmp	r3, #15
9000a06a:	d9dc      	bls.n	9000a026 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000a06c:	2300      	movs	r3, #0
9000a06e:	61bb      	str	r3, [r7, #24]
9000a070:	e034      	b.n	9000a0dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000a072:	69bb      	ldr	r3, [r7, #24]
9000a074:	015a      	lsls	r2, r3, #5
9000a076:	697b      	ldr	r3, [r7, #20]
9000a078:	4413      	add	r3, r2
9000a07a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a07e:	681b      	ldr	r3, [r3, #0]
9000a080:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000a082:	693b      	ldr	r3, [r7, #16]
9000a084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000a088:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000a08a:	693b      	ldr	r3, [r7, #16]
9000a08c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a090:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000a092:	693b      	ldr	r3, [r7, #16]
9000a094:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000a098:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000a09a:	69bb      	ldr	r3, [r7, #24]
9000a09c:	015a      	lsls	r2, r3, #5
9000a09e:	697b      	ldr	r3, [r7, #20]
9000a0a0:	4413      	add	r3, r2
9000a0a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a0a6:	461a      	mov	r2, r3
9000a0a8:	693b      	ldr	r3, [r7, #16]
9000a0aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000a0ac:	68fb      	ldr	r3, [r7, #12]
9000a0ae:	3301      	adds	r3, #1
9000a0b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000a0b2:	68fb      	ldr	r3, [r7, #12]
9000a0b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000a0b8:	d80c      	bhi.n	9000a0d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000a0ba:	69bb      	ldr	r3, [r7, #24]
9000a0bc:	015a      	lsls	r2, r3, #5
9000a0be:	697b      	ldr	r3, [r7, #20]
9000a0c0:	4413      	add	r3, r2
9000a0c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a0c6:	681b      	ldr	r3, [r3, #0]
9000a0c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000a0cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000a0d0:	d0ec      	beq.n	9000a0ac <USB_StopHost+0xc8>
9000a0d2:	e000      	b.n	9000a0d6 <USB_StopHost+0xf2>
        break;
9000a0d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000a0d6:	69bb      	ldr	r3, [r7, #24]
9000a0d8:	3301      	adds	r3, #1
9000a0da:	61bb      	str	r3, [r7, #24]
9000a0dc:	69bb      	ldr	r3, [r7, #24]
9000a0de:	2b0f      	cmp	r3, #15
9000a0e0:	d9c7      	bls.n	9000a072 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000a0e2:	697b      	ldr	r3, [r7, #20]
9000a0e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000a0e8:	461a      	mov	r2, r3
9000a0ea:	f04f 33ff 	mov.w	r3, #4294967295
9000a0ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000a0f0:	687b      	ldr	r3, [r7, #4]
9000a0f2:	f04f 32ff 	mov.w	r2, #4294967295
9000a0f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000a0f8:	6878      	ldr	r0, [r7, #4]
9000a0fa:	f7ff fce9 	bl	90009ad0 <USB_EnableGlobalInt>

  return ret;
9000a0fe:	7ffb      	ldrb	r3, [r7, #31]
}
9000a100:	4618      	mov	r0, r3
9000a102:	3720      	adds	r7, #32
9000a104:	46bd      	mov	sp, r7
9000a106:	bd80      	pop	{r7, pc}

9000a108 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000a108:	b580      	push	{r7, lr}
9000a10a:	b082      	sub	sp, #8
9000a10c:	af00      	add	r7, sp, #0
9000a10e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000a110:	687b      	ldr	r3, [r7, #4]
9000a112:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000a116:	1c5a      	adds	r2, r3, #1
9000a118:	687b      	ldr	r3, [r7, #4]
9000a11a:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000a11e:	6878      	ldr	r0, [r7, #4]
9000a120:	f000 f804 	bl	9000a12c <USBH_HandleSof>
}
9000a124:	bf00      	nop
9000a126:	3708      	adds	r7, #8
9000a128:	46bd      	mov	sp, r7
9000a12a:	bd80      	pop	{r7, pc}

9000a12c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000a12c:	b580      	push	{r7, lr}
9000a12e:	b082      	sub	sp, #8
9000a130:	af00      	add	r7, sp, #0
9000a132:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000a134:	687b      	ldr	r3, [r7, #4]
9000a136:	781b      	ldrb	r3, [r3, #0]
9000a138:	b2db      	uxtb	r3, r3
9000a13a:	2b0b      	cmp	r3, #11
9000a13c:	d10a      	bne.n	9000a154 <USBH_HandleSof+0x28>
9000a13e:	687b      	ldr	r3, [r7, #4]
9000a140:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000a144:	2b00      	cmp	r3, #0
9000a146:	d005      	beq.n	9000a154 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000a148:	687b      	ldr	r3, [r7, #4]
9000a14a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000a14e:	699b      	ldr	r3, [r3, #24]
9000a150:	6878      	ldr	r0, [r7, #4]
9000a152:	4798      	blx	r3
  }
}
9000a154:	bf00      	nop
9000a156:	3708      	adds	r7, #8
9000a158:	46bd      	mov	sp, r7
9000a15a:	bd80      	pop	{r7, pc}

9000a15c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000a15c:	b480      	push	{r7}
9000a15e:	b083      	sub	sp, #12
9000a160:	af00      	add	r7, sp, #0
9000a162:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000a164:	687b      	ldr	r3, [r7, #4]
9000a166:	2201      	movs	r2, #1
9000a168:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000a16c:	bf00      	nop
}
9000a16e:	370c      	adds	r7, #12
9000a170:	46bd      	mov	sp, r7
9000a172:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a176:	4770      	bx	lr

9000a178 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000a178:	b480      	push	{r7}
9000a17a:	b083      	sub	sp, #12
9000a17c:	af00      	add	r7, sp, #0
9000a17e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000a180:	687b      	ldr	r3, [r7, #4]
9000a182:	2200      	movs	r2, #0
9000a184:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000a188:	687b      	ldr	r3, [r7, #4]
9000a18a:	2201      	movs	r2, #1
9000a18c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000a190:	bf00      	nop
}
9000a192:	370c      	adds	r7, #12
9000a194:	46bd      	mov	sp, r7
9000a196:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a19a:	4770      	bx	lr

9000a19c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000a19c:	b480      	push	{r7}
9000a19e:	b083      	sub	sp, #12
9000a1a0:	af00      	add	r7, sp, #0
9000a1a2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000a1a4:	687b      	ldr	r3, [r7, #4]
9000a1a6:	2201      	movs	r2, #1
9000a1a8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000a1ac:	687b      	ldr	r3, [r7, #4]
9000a1ae:	2200      	movs	r2, #0
9000a1b0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000a1b4:	687b      	ldr	r3, [r7, #4]
9000a1b6:	2200      	movs	r2, #0
9000a1b8:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000a1bc:	2300      	movs	r3, #0
}
9000a1be:	4618      	mov	r0, r3
9000a1c0:	370c      	adds	r7, #12
9000a1c2:	46bd      	mov	sp, r7
9000a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a1c8:	4770      	bx	lr

9000a1ca <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000a1ca:	b580      	push	{r7, lr}
9000a1cc:	b082      	sub	sp, #8
9000a1ce:	af00      	add	r7, sp, #0
9000a1d0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000a1d2:	687b      	ldr	r3, [r7, #4]
9000a1d4:	2201      	movs	r2, #1
9000a1d6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000a1da:	687b      	ldr	r3, [r7, #4]
9000a1dc:	2200      	movs	r2, #0
9000a1de:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000a1e2:	687b      	ldr	r3, [r7, #4]
9000a1e4:	2200      	movs	r2, #0
9000a1e6:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000a1ea:	6878      	ldr	r0, [r7, #4]
9000a1ec:	f7f6 fb6c 	bl	900008c8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000a1f0:	687b      	ldr	r3, [r7, #4]
9000a1f2:	791b      	ldrb	r3, [r3, #4]
9000a1f4:	4619      	mov	r1, r3
9000a1f6:	6878      	ldr	r0, [r7, #4]
9000a1f8:	f000 f80b 	bl	9000a212 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000a1fc:	687b      	ldr	r3, [r7, #4]
9000a1fe:	795b      	ldrb	r3, [r3, #5]
9000a200:	4619      	mov	r1, r3
9000a202:	6878      	ldr	r0, [r7, #4]
9000a204:	f000 f805 	bl	9000a212 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000a208:	2300      	movs	r3, #0
}
9000a20a:	4618      	mov	r0, r3
9000a20c:	3708      	adds	r7, #8
9000a20e:	46bd      	mov	sp, r7
9000a210:	bd80      	pop	{r7, pc}

9000a212 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000a212:	b480      	push	{r7}
9000a214:	b083      	sub	sp, #12
9000a216:	af00      	add	r7, sp, #0
9000a218:	6078      	str	r0, [r7, #4]
9000a21a:	460b      	mov	r3, r1
9000a21c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000a21e:	78fb      	ldrb	r3, [r7, #3]
9000a220:	2b0f      	cmp	r3, #15
9000a222:	d80f      	bhi.n	9000a244 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000a224:	78fb      	ldrb	r3, [r7, #3]
9000a226:	687a      	ldr	r2, [r7, #4]
9000a228:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000a22c:	009b      	lsls	r3, r3, #2
9000a22e:	4413      	add	r3, r2
9000a230:	685a      	ldr	r2, [r3, #4]
9000a232:	78fb      	ldrb	r3, [r7, #3]
9000a234:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000a238:	6879      	ldr	r1, [r7, #4]
9000a23a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000a23e:	009b      	lsls	r3, r3, #2
9000a240:	440b      	add	r3, r1
9000a242:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000a244:	2300      	movs	r3, #0
}
9000a246:	4618      	mov	r0, r3
9000a248:	370c      	adds	r7, #12
9000a24a:	46bd      	mov	sp, r7
9000a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a250:	4770      	bx	lr
	...

9000a254 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000a254:	b580      	push	{r7, lr}
9000a256:	b082      	sub	sp, #8
9000a258:	af00      	add	r7, sp, #0
9000a25a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000a25c:	687b      	ldr	r3, [r7, #4]
9000a25e:	681b      	ldr	r3, [r3, #0]
9000a260:	4a22      	ldr	r2, [pc, #136]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a262:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000a264:	687b      	ldr	r3, [r7, #4]
9000a266:	685b      	ldr	r3, [r3, #4]
9000a268:	4a20      	ldr	r2, [pc, #128]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a26a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000a26c:	687b      	ldr	r3, [r7, #4]
9000a26e:	689b      	ldr	r3, [r3, #8]
9000a270:	4a1e      	ldr	r2, [pc, #120]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a272:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000a274:	687b      	ldr	r3, [r7, #4]
9000a276:	68db      	ldr	r3, [r3, #12]
9000a278:	4a1c      	ldr	r2, [pc, #112]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a27a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000a27c:	687b      	ldr	r3, [r7, #4]
9000a27e:	691b      	ldr	r3, [r3, #16]
9000a280:	4a1a      	ldr	r2, [pc, #104]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a282:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000a284:	687b      	ldr	r3, [r7, #4]
9000a286:	695b      	ldr	r3, [r3, #20]
9000a288:	4a18      	ldr	r2, [pc, #96]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a28a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000a28c:	687b      	ldr	r3, [r7, #4]
9000a28e:	699b      	ldr	r3, [r3, #24]
9000a290:	4a16      	ldr	r2, [pc, #88]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a292:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000a294:	687b      	ldr	r3, [r7, #4]
9000a296:	69db      	ldr	r3, [r3, #28]
9000a298:	4a14      	ldr	r2, [pc, #80]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a29a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000a29c:	687b      	ldr	r3, [r7, #4]
9000a29e:	6a1b      	ldr	r3, [r3, #32]
9000a2a0:	4a12      	ldr	r2, [pc, #72]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a2a2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000a2a4:	687b      	ldr	r3, [r7, #4]
9000a2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a2a8:	4a10      	ldr	r2, [pc, #64]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a2aa:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000a2ac:	687b      	ldr	r3, [r7, #4]
9000a2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a2b0:	4a0e      	ldr	r2, [pc, #56]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a2b2:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000a2b4:	4b0e      	ldr	r3, [pc, #56]	@ (9000a2f0 <UTIL_LCD_SetFuncDriver+0x9c>)
9000a2b6:	2200      	movs	r2, #0
9000a2b8:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000a2ba:	4b0d      	ldr	r3, [pc, #52]	@ (9000a2f0 <UTIL_LCD_SetFuncDriver+0x9c>)
9000a2bc:	2200      	movs	r2, #0
9000a2be:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000a2c0:	4b0a      	ldr	r3, [pc, #40]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a2c2:	69db      	ldr	r3, [r3, #28]
9000a2c4:	4a0b      	ldr	r2, [pc, #44]	@ (9000a2f4 <UTIL_LCD_SetFuncDriver+0xa0>)
9000a2c6:	4611      	mov	r1, r2
9000a2c8:	2000      	movs	r0, #0
9000a2ca:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000a2cc:	4b07      	ldr	r3, [pc, #28]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a2ce:	6a1b      	ldr	r3, [r3, #32]
9000a2d0:	4a09      	ldr	r2, [pc, #36]	@ (9000a2f8 <UTIL_LCD_SetFuncDriver+0xa4>)
9000a2d2:	4611      	mov	r1, r2
9000a2d4:	2000      	movs	r0, #0
9000a2d6:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000a2d8:	4b04      	ldr	r3, [pc, #16]	@ (9000a2ec <UTIL_LCD_SetFuncDriver+0x98>)
9000a2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a2dc:	4a07      	ldr	r2, [pc, #28]	@ (9000a2fc <UTIL_LCD_SetFuncDriver+0xa8>)
9000a2de:	4611      	mov	r1, r2
9000a2e0:	2000      	movs	r0, #0
9000a2e2:	4798      	blx	r3
}
9000a2e4:	bf00      	nop
9000a2e6:	3708      	adds	r7, #8
9000a2e8:	46bd      	mov	sp, r7
9000a2ea:	bd80      	pop	{r7, pc}
9000a2ec:	20001274 	.word	0x20001274
9000a2f0:	20001234 	.word	0x20001234
9000a2f4:	20001248 	.word	0x20001248
9000a2f8:	2000124c 	.word	0x2000124c
9000a2fc:	20001250 	.word	0x20001250

9000a300 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000a300:	b580      	push	{r7, lr}
9000a302:	b082      	sub	sp, #8
9000a304:	af00      	add	r7, sp, #0
9000a306:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000a308:	4b0a      	ldr	r3, [pc, #40]	@ (9000a334 <UTIL_LCD_SetLayer+0x34>)
9000a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a30c:	2b00      	cmp	r3, #0
9000a30e:	d00c      	beq.n	9000a32a <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000a310:	4b08      	ldr	r3, [pc, #32]	@ (9000a334 <UTIL_LCD_SetLayer+0x34>)
9000a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a314:	4a08      	ldr	r2, [pc, #32]	@ (9000a338 <UTIL_LCD_SetLayer+0x38>)
9000a316:	6912      	ldr	r2, [r2, #16]
9000a318:	6879      	ldr	r1, [r7, #4]
9000a31a:	4610      	mov	r0, r2
9000a31c:	4798      	blx	r3
9000a31e:	4603      	mov	r3, r0
9000a320:	2b00      	cmp	r3, #0
9000a322:	d102      	bne.n	9000a32a <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000a324:	4a04      	ldr	r2, [pc, #16]	@ (9000a338 <UTIL_LCD_SetLayer+0x38>)
9000a326:	687b      	ldr	r3, [r7, #4]
9000a328:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000a32a:	bf00      	nop
9000a32c:	3708      	adds	r7, #8
9000a32e:	46bd      	mov	sp, r7
9000a330:	bd80      	pop	{r7, pc}
9000a332:	bf00      	nop
9000a334:	20001274 	.word	0x20001274
9000a338:	20001234 	.word	0x20001234

9000a33c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000a33c:	b480      	push	{r7}
9000a33e:	b083      	sub	sp, #12
9000a340:	af00      	add	r7, sp, #0
9000a342:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000a344:	4b06      	ldr	r3, [pc, #24]	@ (9000a360 <UTIL_LCD_SetTextColor+0x24>)
9000a346:	68db      	ldr	r3, [r3, #12]
9000a348:	4a05      	ldr	r2, [pc, #20]	@ (9000a360 <UTIL_LCD_SetTextColor+0x24>)
9000a34a:	015b      	lsls	r3, r3, #5
9000a34c:	4413      	add	r3, r2
9000a34e:	687a      	ldr	r2, [r7, #4]
9000a350:	601a      	str	r2, [r3, #0]
}
9000a352:	bf00      	nop
9000a354:	370c      	adds	r7, #12
9000a356:	46bd      	mov	sp, r7
9000a358:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a35c:	4770      	bx	lr
9000a35e:	bf00      	nop
9000a360:	20001234 	.word	0x20001234

9000a364 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000a364:	b480      	push	{r7}
9000a366:	b083      	sub	sp, #12
9000a368:	af00      	add	r7, sp, #0
9000a36a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000a36c:	4b06      	ldr	r3, [pc, #24]	@ (9000a388 <UTIL_LCD_SetBackColor+0x24>)
9000a36e:	68db      	ldr	r3, [r3, #12]
9000a370:	4a05      	ldr	r2, [pc, #20]	@ (9000a388 <UTIL_LCD_SetBackColor+0x24>)
9000a372:	015b      	lsls	r3, r3, #5
9000a374:	4413      	add	r3, r2
9000a376:	3304      	adds	r3, #4
9000a378:	687a      	ldr	r2, [r7, #4]
9000a37a:	601a      	str	r2, [r3, #0]
}
9000a37c:	bf00      	nop
9000a37e:	370c      	adds	r7, #12
9000a380:	46bd      	mov	sp, r7
9000a382:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a386:	4770      	bx	lr
9000a388:	20001234 	.word	0x20001234

9000a38c <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000a38c:	b480      	push	{r7}
9000a38e:	b083      	sub	sp, #12
9000a390:	af00      	add	r7, sp, #0
9000a392:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000a394:	4b06      	ldr	r3, [pc, #24]	@ (9000a3b0 <UTIL_LCD_SetFont+0x24>)
9000a396:	68db      	ldr	r3, [r3, #12]
9000a398:	4a05      	ldr	r2, [pc, #20]	@ (9000a3b0 <UTIL_LCD_SetFont+0x24>)
9000a39a:	015b      	lsls	r3, r3, #5
9000a39c:	4413      	add	r3, r2
9000a39e:	3308      	adds	r3, #8
9000a3a0:	687a      	ldr	r2, [r7, #4]
9000a3a2:	601a      	str	r2, [r3, #0]
}
9000a3a4:	bf00      	nop
9000a3a6:	370c      	adds	r7, #12
9000a3a8:	46bd      	mov	sp, r7
9000a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a3ae:	4770      	bx	lr
9000a3b0:	20001234 	.word	0x20001234

9000a3b4 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000a3b4:	b590      	push	{r4, r7, lr}
9000a3b6:	b087      	sub	sp, #28
9000a3b8:	af02      	add	r7, sp, #8
9000a3ba:	60f8      	str	r0, [r7, #12]
9000a3bc:	60b9      	str	r1, [r7, #8]
9000a3be:	607a      	str	r2, [r7, #4]
9000a3c0:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000a3c2:	4b08      	ldr	r3, [pc, #32]	@ (9000a3e4 <UTIL_LCD_FillRGBRect+0x30>)
9000a3c4:	685c      	ldr	r4, [r3, #4]
9000a3c6:	4b08      	ldr	r3, [pc, #32]	@ (9000a3e8 <UTIL_LCD_FillRGBRect+0x34>)
9000a3c8:	6918      	ldr	r0, [r3, #16]
9000a3ca:	6a3b      	ldr	r3, [r7, #32]
9000a3cc:	9301      	str	r3, [sp, #4]
9000a3ce:	683b      	ldr	r3, [r7, #0]
9000a3d0:	9300      	str	r3, [sp, #0]
9000a3d2:	687b      	ldr	r3, [r7, #4]
9000a3d4:	68ba      	ldr	r2, [r7, #8]
9000a3d6:	68f9      	ldr	r1, [r7, #12]
9000a3d8:	47a0      	blx	r4
}
9000a3da:	bf00      	nop
9000a3dc:	3714      	adds	r7, #20
9000a3de:	46bd      	mov	sp, r7
9000a3e0:	bd90      	pop	{r4, r7, pc}
9000a3e2:	bf00      	nop
9000a3e4:	20001274 	.word	0x20001274
9000a3e8:	20001234 	.word	0x20001234

9000a3ec <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000a3ec:	b580      	push	{r7, lr}
9000a3ee:	b084      	sub	sp, #16
9000a3f0:	af02      	add	r7, sp, #8
9000a3f2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000a3f4:	4b07      	ldr	r3, [pc, #28]	@ (9000a414 <UTIL_LCD_Clear+0x28>)
9000a3f6:	695a      	ldr	r2, [r3, #20]
9000a3f8:	4b06      	ldr	r3, [pc, #24]	@ (9000a414 <UTIL_LCD_Clear+0x28>)
9000a3fa:	6999      	ldr	r1, [r3, #24]
9000a3fc:	687b      	ldr	r3, [r7, #4]
9000a3fe:	9300      	str	r3, [sp, #0]
9000a400:	460b      	mov	r3, r1
9000a402:	2100      	movs	r1, #0
9000a404:	2000      	movs	r0, #0
9000a406:	f000 f8eb 	bl	9000a5e0 <UTIL_LCD_FillRect>
}
9000a40a:	bf00      	nop
9000a40c:	3708      	adds	r7, #8
9000a40e:	46bd      	mov	sp, r7
9000a410:	bd80      	pop	{r7, pc}
9000a412:	bf00      	nop
9000a414:	20001234 	.word	0x20001234

9000a418 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000a418:	b580      	push	{r7, lr}
9000a41a:	b084      	sub	sp, #16
9000a41c:	af00      	add	r7, sp, #0
9000a41e:	60f8      	str	r0, [r7, #12]
9000a420:	60b9      	str	r1, [r7, #8]
9000a422:	4613      	mov	r3, r2
9000a424:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a426:	4b16      	ldr	r3, [pc, #88]	@ (9000a480 <UTIL_LCD_DisplayChar+0x68>)
9000a428:	68db      	ldr	r3, [r3, #12]
9000a42a:	4a15      	ldr	r2, [pc, #84]	@ (9000a480 <UTIL_LCD_DisplayChar+0x68>)
9000a42c:	015b      	lsls	r3, r3, #5
9000a42e:	4413      	add	r3, r2
9000a430:	3308      	adds	r3, #8
9000a432:	681b      	ldr	r3, [r3, #0]
9000a434:	681a      	ldr	r2, [r3, #0]
9000a436:	79fb      	ldrb	r3, [r7, #7]
9000a438:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000a43a:	4911      	ldr	r1, [pc, #68]	@ (9000a480 <UTIL_LCD_DisplayChar+0x68>)
9000a43c:	68c9      	ldr	r1, [r1, #12]
9000a43e:	4810      	ldr	r0, [pc, #64]	@ (9000a480 <UTIL_LCD_DisplayChar+0x68>)
9000a440:	0149      	lsls	r1, r1, #5
9000a442:	4401      	add	r1, r0
9000a444:	3108      	adds	r1, #8
9000a446:	6809      	ldr	r1, [r1, #0]
9000a448:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a44a:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000a44e:	4b0c      	ldr	r3, [pc, #48]	@ (9000a480 <UTIL_LCD_DisplayChar+0x68>)
9000a450:	68db      	ldr	r3, [r3, #12]
9000a452:	480b      	ldr	r0, [pc, #44]	@ (9000a480 <UTIL_LCD_DisplayChar+0x68>)
9000a454:	015b      	lsls	r3, r3, #5
9000a456:	4403      	add	r3, r0
9000a458:	3308      	adds	r3, #8
9000a45a:	681b      	ldr	r3, [r3, #0]
9000a45c:	889b      	ldrh	r3, [r3, #4]
9000a45e:	3307      	adds	r3, #7
9000a460:	2b00      	cmp	r3, #0
9000a462:	da00      	bge.n	9000a466 <UTIL_LCD_DisplayChar+0x4e>
9000a464:	3307      	adds	r3, #7
9000a466:	10db      	asrs	r3, r3, #3
9000a468:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a46c:	4413      	add	r3, r2
9000a46e:	461a      	mov	r2, r3
9000a470:	68b9      	ldr	r1, [r7, #8]
9000a472:	68f8      	ldr	r0, [r7, #12]
9000a474:	f000 f8ee 	bl	9000a654 <DrawChar>
}
9000a478:	bf00      	nop
9000a47a:	3710      	adds	r7, #16
9000a47c:	46bd      	mov	sp, r7
9000a47e:	bd80      	pop	{r7, pc}
9000a480:	20001234 	.word	0x20001234

9000a484 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000a484:	b580      	push	{r7, lr}
9000a486:	b08a      	sub	sp, #40	@ 0x28
9000a488:	af00      	add	r7, sp, #0
9000a48a:	60f8      	str	r0, [r7, #12]
9000a48c:	60b9      	str	r1, [r7, #8]
9000a48e:	607a      	str	r2, [r7, #4]
9000a490:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000a492:	2301      	movs	r3, #1
9000a494:	627b      	str	r3, [r7, #36]	@ 0x24
9000a496:	2300      	movs	r3, #0
9000a498:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000a49a:	2300      	movs	r3, #0
9000a49c:	61fb      	str	r3, [r7, #28]
9000a49e:	2300      	movs	r3, #0
9000a4a0:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000a4a2:	687b      	ldr	r3, [r7, #4]
9000a4a4:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000a4a6:	e002      	b.n	9000a4ae <UTIL_LCD_DisplayStringAt+0x2a>
9000a4a8:	69fb      	ldr	r3, [r7, #28]
9000a4aa:	3301      	adds	r3, #1
9000a4ac:	61fb      	str	r3, [r7, #28]
9000a4ae:	69bb      	ldr	r3, [r7, #24]
9000a4b0:	1c5a      	adds	r2, r3, #1
9000a4b2:	61ba      	str	r2, [r7, #24]
9000a4b4:	781b      	ldrb	r3, [r3, #0]
9000a4b6:	2b00      	cmp	r3, #0
9000a4b8:	d1f6      	bne.n	9000a4a8 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000a4ba:	4b48      	ldr	r3, [pc, #288]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a4bc:	695b      	ldr	r3, [r3, #20]
9000a4be:	4a47      	ldr	r2, [pc, #284]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a4c0:	68d2      	ldr	r2, [r2, #12]
9000a4c2:	4946      	ldr	r1, [pc, #280]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a4c4:	0152      	lsls	r2, r2, #5
9000a4c6:	440a      	add	r2, r1
9000a4c8:	3208      	adds	r2, #8
9000a4ca:	6812      	ldr	r2, [r2, #0]
9000a4cc:	8892      	ldrh	r2, [r2, #4]
9000a4ce:	fbb3 f3f2 	udiv	r3, r3, r2
9000a4d2:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000a4d4:	78fb      	ldrb	r3, [r7, #3]
9000a4d6:	2b03      	cmp	r3, #3
9000a4d8:	d018      	beq.n	9000a50c <UTIL_LCD_DisplayStringAt+0x88>
9000a4da:	2b03      	cmp	r3, #3
9000a4dc:	dc2a      	bgt.n	9000a534 <UTIL_LCD_DisplayStringAt+0xb0>
9000a4de:	2b01      	cmp	r3, #1
9000a4e0:	d002      	beq.n	9000a4e8 <UTIL_LCD_DisplayStringAt+0x64>
9000a4e2:	2b02      	cmp	r3, #2
9000a4e4:	d015      	beq.n	9000a512 <UTIL_LCD_DisplayStringAt+0x8e>
9000a4e6:	e025      	b.n	9000a534 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000a4e8:	697a      	ldr	r2, [r7, #20]
9000a4ea:	69fb      	ldr	r3, [r7, #28]
9000a4ec:	1ad3      	subs	r3, r2, r3
9000a4ee:	4a3b      	ldr	r2, [pc, #236]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a4f0:	68d2      	ldr	r2, [r2, #12]
9000a4f2:	493a      	ldr	r1, [pc, #232]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a4f4:	0152      	lsls	r2, r2, #5
9000a4f6:	440a      	add	r2, r1
9000a4f8:	3208      	adds	r2, #8
9000a4fa:	6812      	ldr	r2, [r2, #0]
9000a4fc:	8892      	ldrh	r2, [r2, #4]
9000a4fe:	fb02 f303 	mul.w	r3, r2, r3
9000a502:	085b      	lsrs	r3, r3, #1
9000a504:	68fa      	ldr	r2, [r7, #12]
9000a506:	4413      	add	r3, r2
9000a508:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a50a:	e016      	b.n	9000a53a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000a50c:	68fb      	ldr	r3, [r7, #12]
9000a50e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a510:	e013      	b.n	9000a53a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000a512:	697a      	ldr	r2, [r7, #20]
9000a514:	69fb      	ldr	r3, [r7, #28]
9000a516:	1ad3      	subs	r3, r2, r3
9000a518:	4a30      	ldr	r2, [pc, #192]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a51a:	68d2      	ldr	r2, [r2, #12]
9000a51c:	492f      	ldr	r1, [pc, #188]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a51e:	0152      	lsls	r2, r2, #5
9000a520:	440a      	add	r2, r1
9000a522:	3208      	adds	r2, #8
9000a524:	6812      	ldr	r2, [r2, #0]
9000a526:	8892      	ldrh	r2, [r2, #4]
9000a528:	fb03 f202 	mul.w	r2, r3, r2
9000a52c:	68fb      	ldr	r3, [r7, #12]
9000a52e:	1ad3      	subs	r3, r2, r3
9000a530:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a532:	e002      	b.n	9000a53a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000a534:	68fb      	ldr	r3, [r7, #12]
9000a536:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a538:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000a53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a53c:	2b00      	cmp	r3, #0
9000a53e:	d003      	beq.n	9000a548 <UTIL_LCD_DisplayStringAt+0xc4>
9000a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a546:	d31b      	bcc.n	9000a580 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000a548:	2301      	movs	r3, #1
9000a54a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000a54c:	e018      	b.n	9000a580 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000a54e:	687b      	ldr	r3, [r7, #4]
9000a550:	781b      	ldrb	r3, [r3, #0]
9000a552:	461a      	mov	r2, r3
9000a554:	68b9      	ldr	r1, [r7, #8]
9000a556:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000a558:	f7ff ff5e 	bl	9000a418 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000a55c:	4b1f      	ldr	r3, [pc, #124]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a55e:	68db      	ldr	r3, [r3, #12]
9000a560:	4a1e      	ldr	r2, [pc, #120]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a562:	015b      	lsls	r3, r3, #5
9000a564:	4413      	add	r3, r2
9000a566:	3308      	adds	r3, #8
9000a568:	681b      	ldr	r3, [r3, #0]
9000a56a:	889b      	ldrh	r3, [r3, #4]
9000a56c:	461a      	mov	r2, r3
9000a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a570:	4413      	add	r3, r2
9000a572:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000a574:	687b      	ldr	r3, [r7, #4]
9000a576:	3301      	adds	r3, #1
9000a578:	607b      	str	r3, [r7, #4]
    i++;
9000a57a:	6a3b      	ldr	r3, [r7, #32]
9000a57c:	3301      	adds	r3, #1
9000a57e:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000a580:	687b      	ldr	r3, [r7, #4]
9000a582:	781b      	ldrb	r3, [r3, #0]
9000a584:	2b00      	cmp	r3, #0
9000a586:	bf14      	ite	ne
9000a588:	2301      	movne	r3, #1
9000a58a:	2300      	moveq	r3, #0
9000a58c:	b2da      	uxtb	r2, r3
9000a58e:	4b13      	ldr	r3, [pc, #76]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a590:	6959      	ldr	r1, [r3, #20]
9000a592:	4b12      	ldr	r3, [pc, #72]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a594:	68db      	ldr	r3, [r3, #12]
9000a596:	4811      	ldr	r0, [pc, #68]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a598:	015b      	lsls	r3, r3, #5
9000a59a:	4403      	add	r3, r0
9000a59c:	3308      	adds	r3, #8
9000a59e:	681b      	ldr	r3, [r3, #0]
9000a5a0:	889b      	ldrh	r3, [r3, #4]
9000a5a2:	4618      	mov	r0, r3
9000a5a4:	6a3b      	ldr	r3, [r7, #32]
9000a5a6:	fb00 f303 	mul.w	r3, r0, r3
9000a5aa:	1acb      	subs	r3, r1, r3
9000a5ac:	b29b      	uxth	r3, r3
9000a5ae:	490b      	ldr	r1, [pc, #44]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a5b0:	68c9      	ldr	r1, [r1, #12]
9000a5b2:	480a      	ldr	r0, [pc, #40]	@ (9000a5dc <UTIL_LCD_DisplayStringAt+0x158>)
9000a5b4:	0149      	lsls	r1, r1, #5
9000a5b6:	4401      	add	r1, r0
9000a5b8:	3108      	adds	r1, #8
9000a5ba:	6809      	ldr	r1, [r1, #0]
9000a5bc:	8889      	ldrh	r1, [r1, #4]
9000a5be:	428b      	cmp	r3, r1
9000a5c0:	bf2c      	ite	cs
9000a5c2:	2301      	movcs	r3, #1
9000a5c4:	2300      	movcc	r3, #0
9000a5c6:	b2db      	uxtb	r3, r3
9000a5c8:	4013      	ands	r3, r2
9000a5ca:	b2db      	uxtb	r3, r3
9000a5cc:	2b00      	cmp	r3, #0
9000a5ce:	d1be      	bne.n	9000a54e <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000a5d0:	bf00      	nop
9000a5d2:	bf00      	nop
9000a5d4:	3728      	adds	r7, #40	@ 0x28
9000a5d6:	46bd      	mov	sp, r7
9000a5d8:	bd80      	pop	{r7, pc}
9000a5da:	bf00      	nop
9000a5dc:	20001234 	.word	0x20001234

9000a5e0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000a5e0:	b590      	push	{r4, r7, lr}
9000a5e2:	b087      	sub	sp, #28
9000a5e4:	af02      	add	r7, sp, #8
9000a5e6:	60f8      	str	r0, [r7, #12]
9000a5e8:	60b9      	str	r1, [r7, #8]
9000a5ea:	607a      	str	r2, [r7, #4]
9000a5ec:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000a5ee:	4b17      	ldr	r3, [pc, #92]	@ (9000a64c <UTIL_LCD_FillRect+0x6c>)
9000a5f0:	69db      	ldr	r3, [r3, #28]
9000a5f2:	2b02      	cmp	r3, #2
9000a5f4:	d11a      	bne.n	9000a62c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000a5f6:	4b16      	ldr	r3, [pc, #88]	@ (9000a650 <UTIL_LCD_FillRect+0x70>)
9000a5f8:	691c      	ldr	r4, [r3, #16]
9000a5fa:	4b14      	ldr	r3, [pc, #80]	@ (9000a64c <UTIL_LCD_FillRect+0x6c>)
9000a5fc:	6918      	ldr	r0, [r3, #16]
9000a5fe:	6a3b      	ldr	r3, [r7, #32]
9000a600:	08db      	lsrs	r3, r3, #3
9000a602:	f003 021f 	and.w	r2, r3, #31
9000a606:	6a3b      	ldr	r3, [r7, #32]
9000a608:	0a9b      	lsrs	r3, r3, #10
9000a60a:	015b      	lsls	r3, r3, #5
9000a60c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000a610:	431a      	orrs	r2, r3
9000a612:	6a3b      	ldr	r3, [r7, #32]
9000a614:	0cdb      	lsrs	r3, r3, #19
9000a616:	02db      	lsls	r3, r3, #11
9000a618:	b29b      	uxth	r3, r3
9000a61a:	4313      	orrs	r3, r2
9000a61c:	9301      	str	r3, [sp, #4]
9000a61e:	683b      	ldr	r3, [r7, #0]
9000a620:	9300      	str	r3, [sp, #0]
9000a622:	687b      	ldr	r3, [r7, #4]
9000a624:	68ba      	ldr	r2, [r7, #8]
9000a626:	68f9      	ldr	r1, [r7, #12]
9000a628:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000a62a:	e00b      	b.n	9000a644 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000a62c:	4b08      	ldr	r3, [pc, #32]	@ (9000a650 <UTIL_LCD_FillRect+0x70>)
9000a62e:	691c      	ldr	r4, [r3, #16]
9000a630:	4b06      	ldr	r3, [pc, #24]	@ (9000a64c <UTIL_LCD_FillRect+0x6c>)
9000a632:	6918      	ldr	r0, [r3, #16]
9000a634:	6a3b      	ldr	r3, [r7, #32]
9000a636:	9301      	str	r3, [sp, #4]
9000a638:	683b      	ldr	r3, [r7, #0]
9000a63a:	9300      	str	r3, [sp, #0]
9000a63c:	687b      	ldr	r3, [r7, #4]
9000a63e:	68ba      	ldr	r2, [r7, #8]
9000a640:	68f9      	ldr	r1, [r7, #12]
9000a642:	47a0      	blx	r4
}
9000a644:	bf00      	nop
9000a646:	3714      	adds	r7, #20
9000a648:	46bd      	mov	sp, r7
9000a64a:	bd90      	pop	{r4, r7, pc}
9000a64c:	20001234 	.word	0x20001234
9000a650:	20001274 	.word	0x20001274

9000a654 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000a654:	b580      	push	{r7, lr}
9000a656:	b0b2      	sub	sp, #200	@ 0xc8
9000a658:	af02      	add	r7, sp, #8
9000a65a:	60f8      	str	r0, [r7, #12]
9000a65c:	60b9      	str	r1, [r7, #8]
9000a65e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000a660:	2300      	movs	r3, #0
9000a662:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000a666:	2300      	movs	r3, #0
9000a668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000a66c:	4ba5      	ldr	r3, [pc, #660]	@ (9000a904 <DrawChar+0x2b0>)
9000a66e:	68db      	ldr	r3, [r3, #12]
9000a670:	4aa4      	ldr	r2, [pc, #656]	@ (9000a904 <DrawChar+0x2b0>)
9000a672:	015b      	lsls	r3, r3, #5
9000a674:	4413      	add	r3, r2
9000a676:	3308      	adds	r3, #8
9000a678:	681b      	ldr	r3, [r3, #0]
9000a67a:	88db      	ldrh	r3, [r3, #6]
9000a67c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000a680:	4ba0      	ldr	r3, [pc, #640]	@ (9000a904 <DrawChar+0x2b0>)
9000a682:	68db      	ldr	r3, [r3, #12]
9000a684:	4a9f      	ldr	r2, [pc, #636]	@ (9000a904 <DrawChar+0x2b0>)
9000a686:	015b      	lsls	r3, r3, #5
9000a688:	4413      	add	r3, r2
9000a68a:	3308      	adds	r3, #8
9000a68c:	681b      	ldr	r3, [r3, #0]
9000a68e:	889b      	ldrh	r3, [r3, #4]
9000a690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000a694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a698:	3307      	adds	r3, #7
9000a69a:	f023 0207 	bic.w	r2, r3, #7
9000a69e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a6a2:	1ad3      	subs	r3, r2, r3
9000a6a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000a6a8:	2300      	movs	r3, #0
9000a6aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000a6ae:	e11c      	b.n	9000a8ea <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000a6b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a6b4:	3307      	adds	r3, #7
9000a6b6:	08db      	lsrs	r3, r3, #3
9000a6b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000a6bc:	fb02 f303 	mul.w	r3, r2, r3
9000a6c0:	687a      	ldr	r2, [r7, #4]
9000a6c2:	4413      	add	r3, r2
9000a6c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000a6c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a6cc:	3307      	adds	r3, #7
9000a6ce:	08db      	lsrs	r3, r3, #3
9000a6d0:	2b01      	cmp	r3, #1
9000a6d2:	d002      	beq.n	9000a6da <DrawChar+0x86>
9000a6d4:	2b02      	cmp	r3, #2
9000a6d6:	d006      	beq.n	9000a6e6 <DrawChar+0x92>
9000a6d8:	e011      	b.n	9000a6fe <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000a6da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a6de:	781b      	ldrb	r3, [r3, #0]
9000a6e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000a6e4:	e01d      	b.n	9000a722 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000a6e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a6ea:	781b      	ldrb	r3, [r3, #0]
9000a6ec:	021b      	lsls	r3, r3, #8
9000a6ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000a6f2:	3201      	adds	r2, #1
9000a6f4:	7812      	ldrb	r2, [r2, #0]
9000a6f6:	4313      	orrs	r3, r2
9000a6f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000a6fc:	e011      	b.n	9000a722 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000a6fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a702:	781b      	ldrb	r3, [r3, #0]
9000a704:	041a      	lsls	r2, r3, #16
9000a706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a70a:	3301      	adds	r3, #1
9000a70c:	781b      	ldrb	r3, [r3, #0]
9000a70e:	021b      	lsls	r3, r3, #8
9000a710:	4313      	orrs	r3, r2
9000a712:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000a716:	3202      	adds	r2, #2
9000a718:	7812      	ldrb	r2, [r2, #0]
9000a71a:	4313      	orrs	r3, r2
9000a71c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000a720:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000a722:	4b78      	ldr	r3, [pc, #480]	@ (9000a904 <DrawChar+0x2b0>)
9000a724:	68db      	ldr	r3, [r3, #12]
9000a726:	4a77      	ldr	r2, [pc, #476]	@ (9000a904 <DrawChar+0x2b0>)
9000a728:	015b      	lsls	r3, r3, #5
9000a72a:	4413      	add	r3, r2
9000a72c:	331c      	adds	r3, #28
9000a72e:	681b      	ldr	r3, [r3, #0]
9000a730:	2b02      	cmp	r3, #2
9000a732:	f040 808c 	bne.w	9000a84e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000a736:	2300      	movs	r3, #0
9000a738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000a73c:	e074      	b.n	9000a828 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000a73e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000a742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a746:	1ad2      	subs	r2, r2, r3
9000a748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000a74c:	4413      	add	r3, r2
9000a74e:	3b01      	subs	r3, #1
9000a750:	2201      	movs	r2, #1
9000a752:	fa02 f303 	lsl.w	r3, r2, r3
9000a756:	461a      	mov	r2, r3
9000a758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000a75c:	4013      	ands	r3, r2
9000a75e:	2b00      	cmp	r3, #0
9000a760:	d02d      	beq.n	9000a7be <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000a762:	4b68      	ldr	r3, [pc, #416]	@ (9000a904 <DrawChar+0x2b0>)
9000a764:	68db      	ldr	r3, [r3, #12]
9000a766:	4a67      	ldr	r2, [pc, #412]	@ (9000a904 <DrawChar+0x2b0>)
9000a768:	015b      	lsls	r3, r3, #5
9000a76a:	4413      	add	r3, r2
9000a76c:	681b      	ldr	r3, [r3, #0]
9000a76e:	08db      	lsrs	r3, r3, #3
9000a770:	b29b      	uxth	r3, r3
9000a772:	f003 031f 	and.w	r3, r3, #31
9000a776:	b29a      	uxth	r2, r3
9000a778:	4b62      	ldr	r3, [pc, #392]	@ (9000a904 <DrawChar+0x2b0>)
9000a77a:	68db      	ldr	r3, [r3, #12]
9000a77c:	4961      	ldr	r1, [pc, #388]	@ (9000a904 <DrawChar+0x2b0>)
9000a77e:	015b      	lsls	r3, r3, #5
9000a780:	440b      	add	r3, r1
9000a782:	681b      	ldr	r3, [r3, #0]
9000a784:	0a9b      	lsrs	r3, r3, #10
9000a786:	b29b      	uxth	r3, r3
9000a788:	015b      	lsls	r3, r3, #5
9000a78a:	b29b      	uxth	r3, r3
9000a78c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000a790:	b29b      	uxth	r3, r3
9000a792:	4313      	orrs	r3, r2
9000a794:	b29a      	uxth	r2, r3
9000a796:	4b5b      	ldr	r3, [pc, #364]	@ (9000a904 <DrawChar+0x2b0>)
9000a798:	68db      	ldr	r3, [r3, #12]
9000a79a:	495a      	ldr	r1, [pc, #360]	@ (9000a904 <DrawChar+0x2b0>)
9000a79c:	015b      	lsls	r3, r3, #5
9000a79e:	440b      	add	r3, r1
9000a7a0:	681b      	ldr	r3, [r3, #0]
9000a7a2:	0cdb      	lsrs	r3, r3, #19
9000a7a4:	b29b      	uxth	r3, r3
9000a7a6:	02db      	lsls	r3, r3, #11
9000a7a8:	b29b      	uxth	r3, r3
9000a7aa:	4313      	orrs	r3, r2
9000a7ac:	b29a      	uxth	r2, r3
9000a7ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a7b2:	005b      	lsls	r3, r3, #1
9000a7b4:	33c0      	adds	r3, #192	@ 0xc0
9000a7b6:	443b      	add	r3, r7
9000a7b8:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000a7bc:	e02f      	b.n	9000a81e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000a7be:	4b51      	ldr	r3, [pc, #324]	@ (9000a904 <DrawChar+0x2b0>)
9000a7c0:	68db      	ldr	r3, [r3, #12]
9000a7c2:	4a50      	ldr	r2, [pc, #320]	@ (9000a904 <DrawChar+0x2b0>)
9000a7c4:	015b      	lsls	r3, r3, #5
9000a7c6:	4413      	add	r3, r2
9000a7c8:	3304      	adds	r3, #4
9000a7ca:	681b      	ldr	r3, [r3, #0]
9000a7cc:	08db      	lsrs	r3, r3, #3
9000a7ce:	b29b      	uxth	r3, r3
9000a7d0:	f003 031f 	and.w	r3, r3, #31
9000a7d4:	b29a      	uxth	r2, r3
9000a7d6:	4b4b      	ldr	r3, [pc, #300]	@ (9000a904 <DrawChar+0x2b0>)
9000a7d8:	68db      	ldr	r3, [r3, #12]
9000a7da:	494a      	ldr	r1, [pc, #296]	@ (9000a904 <DrawChar+0x2b0>)
9000a7dc:	015b      	lsls	r3, r3, #5
9000a7de:	440b      	add	r3, r1
9000a7e0:	3304      	adds	r3, #4
9000a7e2:	681b      	ldr	r3, [r3, #0]
9000a7e4:	0a9b      	lsrs	r3, r3, #10
9000a7e6:	b29b      	uxth	r3, r3
9000a7e8:	015b      	lsls	r3, r3, #5
9000a7ea:	b29b      	uxth	r3, r3
9000a7ec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000a7f0:	b29b      	uxth	r3, r3
9000a7f2:	4313      	orrs	r3, r2
9000a7f4:	b29a      	uxth	r2, r3
9000a7f6:	4b43      	ldr	r3, [pc, #268]	@ (9000a904 <DrawChar+0x2b0>)
9000a7f8:	68db      	ldr	r3, [r3, #12]
9000a7fa:	4942      	ldr	r1, [pc, #264]	@ (9000a904 <DrawChar+0x2b0>)
9000a7fc:	015b      	lsls	r3, r3, #5
9000a7fe:	440b      	add	r3, r1
9000a800:	3304      	adds	r3, #4
9000a802:	681b      	ldr	r3, [r3, #0]
9000a804:	0cdb      	lsrs	r3, r3, #19
9000a806:	b29b      	uxth	r3, r3
9000a808:	02db      	lsls	r3, r3, #11
9000a80a:	b29b      	uxth	r3, r3
9000a80c:	4313      	orrs	r3, r2
9000a80e:	b29a      	uxth	r2, r3
9000a810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a814:	005b      	lsls	r3, r3, #1
9000a816:	33c0      	adds	r3, #192	@ 0xc0
9000a818:	443b      	add	r3, r7
9000a81a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000a81e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a822:	3301      	adds	r3, #1
9000a824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000a828:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000a82c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a830:	429a      	cmp	r2, r3
9000a832:	d384      	bcc.n	9000a73e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000a834:	68b9      	ldr	r1, [r7, #8]
9000a836:	1c4b      	adds	r3, r1, #1
9000a838:	60bb      	str	r3, [r7, #8]
9000a83a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000a83e:	2301      	movs	r3, #1
9000a840:	9300      	str	r3, [sp, #0]
9000a842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a846:	68f8      	ldr	r0, [r7, #12]
9000a848:	f7ff fdb4 	bl	9000a3b4 <UTIL_LCD_FillRGBRect>
9000a84c:	e048      	b.n	9000a8e0 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000a84e:	2300      	movs	r3, #0
9000a850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000a854:	e032      	b.n	9000a8bc <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000a856:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000a85a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a85e:	1ad2      	subs	r2, r2, r3
9000a860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000a864:	4413      	add	r3, r2
9000a866:	3b01      	subs	r3, #1
9000a868:	2201      	movs	r2, #1
9000a86a:	fa02 f303 	lsl.w	r3, r2, r3
9000a86e:	461a      	mov	r2, r3
9000a870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000a874:	4013      	ands	r3, r2
9000a876:	2b00      	cmp	r3, #0
9000a878:	d00d      	beq.n	9000a896 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000a87a:	4b22      	ldr	r3, [pc, #136]	@ (9000a904 <DrawChar+0x2b0>)
9000a87c:	68db      	ldr	r3, [r3, #12]
9000a87e:	4a21      	ldr	r2, [pc, #132]	@ (9000a904 <DrawChar+0x2b0>)
9000a880:	015b      	lsls	r3, r3, #5
9000a882:	4413      	add	r3, r2
9000a884:	681a      	ldr	r2, [r3, #0]
9000a886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a88a:	009b      	lsls	r3, r3, #2
9000a88c:	33c0      	adds	r3, #192	@ 0xc0
9000a88e:	443b      	add	r3, r7
9000a890:	f843 2cac 	str.w	r2, [r3, #-172]
9000a894:	e00d      	b.n	9000a8b2 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000a896:	4b1b      	ldr	r3, [pc, #108]	@ (9000a904 <DrawChar+0x2b0>)
9000a898:	68db      	ldr	r3, [r3, #12]
9000a89a:	4a1a      	ldr	r2, [pc, #104]	@ (9000a904 <DrawChar+0x2b0>)
9000a89c:	015b      	lsls	r3, r3, #5
9000a89e:	4413      	add	r3, r2
9000a8a0:	3304      	adds	r3, #4
9000a8a2:	681a      	ldr	r2, [r3, #0]
9000a8a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a8a8:	009b      	lsls	r3, r3, #2
9000a8aa:	33c0      	adds	r3, #192	@ 0xc0
9000a8ac:	443b      	add	r3, r7
9000a8ae:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000a8b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a8b6:	3301      	adds	r3, #1
9000a8b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000a8bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000a8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a8c4:	429a      	cmp	r2, r3
9000a8c6:	d3c6      	bcc.n	9000a856 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000a8c8:	68b9      	ldr	r1, [r7, #8]
9000a8ca:	1c4b      	adds	r3, r1, #1
9000a8cc:	60bb      	str	r3, [r7, #8]
9000a8ce:	f107 0214 	add.w	r2, r7, #20
9000a8d2:	2301      	movs	r3, #1
9000a8d4:	9300      	str	r3, [sp, #0]
9000a8d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a8da:	68f8      	ldr	r0, [r7, #12]
9000a8dc:	f7ff fd6a 	bl	9000a3b4 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000a8e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000a8e4:	3301      	adds	r3, #1
9000a8e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000a8ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000a8ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000a8f2:	429a      	cmp	r2, r3
9000a8f4:	f4ff aedc 	bcc.w	9000a6b0 <DrawChar+0x5c>
    }
  }
}
9000a8f8:	bf00      	nop
9000a8fa:	bf00      	nop
9000a8fc:	37c0      	adds	r7, #192	@ 0xc0
9000a8fe:	46bd      	mov	sp, r7
9000a900:	bd80      	pop	{r7, pc}
9000a902:	bf00      	nop
9000a904:	20001234 	.word	0x20001234

9000a908 <__libc_init_array>:
9000a908:	b570      	push	{r4, r5, r6, lr}
9000a90a:	4d0d      	ldr	r5, [pc, #52]	@ (9000a940 <__libc_init_array+0x38>)
9000a90c:	4c0d      	ldr	r4, [pc, #52]	@ (9000a944 <__libc_init_array+0x3c>)
9000a90e:	1b64      	subs	r4, r4, r5
9000a910:	10a4      	asrs	r4, r4, #2
9000a912:	2600      	movs	r6, #0
9000a914:	42a6      	cmp	r6, r4
9000a916:	d109      	bne.n	9000a92c <__libc_init_array+0x24>
9000a918:	4d0b      	ldr	r5, [pc, #44]	@ (9000a948 <__libc_init_array+0x40>)
9000a91a:	4c0c      	ldr	r4, [pc, #48]	@ (9000a94c <__libc_init_array+0x44>)
9000a91c:	f000 f818 	bl	9000a950 <_init>
9000a920:	1b64      	subs	r4, r4, r5
9000a922:	10a4      	asrs	r4, r4, #2
9000a924:	2600      	movs	r6, #0
9000a926:	42a6      	cmp	r6, r4
9000a928:	d105      	bne.n	9000a936 <__libc_init_array+0x2e>
9000a92a:	bd70      	pop	{r4, r5, r6, pc}
9000a92c:	f855 3b04 	ldr.w	r3, [r5], #4
9000a930:	4798      	blx	r3
9000a932:	3601      	adds	r6, #1
9000a934:	e7ee      	b.n	9000a914 <__libc_init_array+0xc>
9000a936:	f855 3b04 	ldr.w	r3, [r5], #4
9000a93a:	4798      	blx	r3
9000a93c:	3601      	adds	r6, #1
9000a93e:	e7f2      	b.n	9000a926 <__libc_init_array+0x1e>
9000a940:	9000cdec 	.word	0x9000cdec
9000a944:	9000cdec 	.word	0x9000cdec
9000a948:	9000cdec 	.word	0x9000cdec
9000a94c:	9000cdf0 	.word	0x9000cdf0

9000a950 <_init>:
9000a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000a952:	bf00      	nop
9000a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000a956:	bc08      	pop	{r3}
9000a958:	469e      	mov	lr, r3
9000a95a:	4770      	bx	lr

9000a95c <_fini>:
9000a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000a95e:	bf00      	nop
9000a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000a962:	bc08      	pop	{r3}
9000a964:	469e      	mov	lr, r3
9000a966:	4770      	bx	lr
