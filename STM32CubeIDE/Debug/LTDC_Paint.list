
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca00  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002538  9000cca0  9000cca0  0000dca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000f1d8  9000f1d8  000110cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000f1d8  9000f1d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000f1e0  9000f1e0  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000f1e0  9000f1e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000f1e4  9000f1e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000f1e8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  200000d0  9000f2b4  000110d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20001494  9000f2b4  00011494  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac6c  00000000  00000000  000110fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053bf  00000000  00000000  0003bd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002128  00000000  00000000  00041128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019ba  00000000  00000000  00043250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000414a1  00000000  00000000  00044c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d200  00000000  00000000  000860ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018db92  00000000  00000000  000b32ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00240e3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095e0  00000000  00000000  00240e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0024a460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000cc88 	.word	0x9000cc88

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000cc88 	.word	0x9000cc88

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <AA>:
#include "appLogic.h"

void AA(void)
{
900006ac:	b480      	push	{r7}
900006ae:	b083      	sub	sp, #12
900006b0:	af00      	add	r7, sp, #0
	int xxx = 4;
900006b2:	2304      	movs	r3, #4
900006b4:	607b      	str	r3, [r7, #4]
}
900006b6:	bf00      	nop
900006b8:	370c      	adds	r7, #12
900006ba:	46bd      	mov	sp, r7
900006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900006c0:	4770      	bx	lr
	...

900006c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900006c4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000700 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900006c8:	f002 fb0c 	bl	90002ce4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900006cc:	f002 faa8 	bl	90002c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900006d0:	480c      	ldr	r0, [pc, #48]	@ (90000704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900006d2:	490d      	ldr	r1, [pc, #52]	@ (90000708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900006d4:	4a0d      	ldr	r2, [pc, #52]	@ (9000070c <LoopFillZerobss+0x1a>)
  movs r3, #0
900006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
900006d8:	e002      	b.n	900006e0 <LoopCopyDataInit>

900006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900006de:	3304      	adds	r3, #4

900006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
900006e4:	d3f9      	bcc.n	900006da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900006e6:	4a0a      	ldr	r2, [pc, #40]	@ (90000710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900006e8:	4c0a      	ldr	r4, [pc, #40]	@ (90000714 <LoopFillZerobss+0x22>)
  movs r3, #0
900006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
900006ec:	e001      	b.n	900006f2 <LoopFillZerobss>

900006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900006f0:	3204      	adds	r2, #4

900006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
900006f4:	d3fb      	bcc.n	900006ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
900006f6:	f00b fe57 	bl	9000c3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900006fa:	f000 f827 	bl	9000074c <main>
  bx  lr
900006fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000708:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
9000070c:	9000f1e8 	.word	0x9000f1e8
  ldr r2, =_sbss
90000710:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
90000714:	20001494 	.word	0x20001494

90000718 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000718:	e7fe      	b.n	90000718 <ADC3_IRQHandler>
	...

9000071c <__io_putchar>:
static void CPU_CACHE_Enable(void);
static void CPU_CACHE_Disable(void);
static void MPU_Config(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
9000071c:	b580      	push	{r7, lr}
9000071e:	b082      	sub	sp, #8
90000720:	af00      	add	r7, sp, #0
90000722:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
90000724:	1d39      	adds	r1, r7, #4
90000726:	f04f 33ff 	mov.w	r3, #4294967295
9000072a:	2201      	movs	r2, #1
9000072c:	4806      	ldr	r0, [pc, #24]	@ (90000748 <__io_putchar+0x2c>)
9000072e:	f009 f893 	bl	90009858 <HAL_UART_Transmit>
90000732:	4603      	mov	r3, r0
90000734:	2b00      	cmp	r3, #0
90000736:	d002      	beq.n	9000073e <__io_putchar+0x22>
    return -1;
90000738:	f04f 33ff 	mov.w	r3, #4294967295
9000073c:	e000      	b.n	90000740 <__io_putchar+0x24>
  }
  return ch;
9000073e:	687b      	ldr	r3, [r7, #4]
}
90000740:	4618      	mov	r0, r3
90000742:	3708      	adds	r7, #8
90000744:	46bd      	mov	sp, r7
90000746:	bd80      	pop	{r7, pc}
90000748:	200000ec 	.word	0x200000ec

9000074c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
9000074c:	b580      	push	{r7, lr}
9000074e:	af00      	add	r7, sp, #0
AA();
90000750:	f7ff ffac 	bl	900006ac <AA>
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000754:	f000 fa74 	bl	90000c40 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
90000758:	f000 f9e0 	bl	90000b1c <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
9000075c:	f002 fada 	bl	90002d14 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000760:	f000 f8d8 	bl	90000914 <SystemClock_Config>

  MX_USART3_UART_Init();
90000764:	f000 f81c 	bl	900007a0 <MX_USART3_UART_Init>

  printf("Hi there :)!\r\n");
90000768:	480c      	ldr	r0, [pc, #48]	@ (9000079c <main+0x50>)
9000076a:	f00b fcd9 	bl	9000c120 <puts>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
9000076e:	2000      	movs	r0, #0
90000770:	f000 fde6 	bl	90001340 <BSP_LED_Init>


  InitializeLcd();
90000774:	f000 fc00 	bl	90000f78 <InitializeLcd>
  //CPU_CACHE_Disable();
  Draw_Menu();
90000778:	f000 fbce 	bl	90000f18 <Draw_Menu>

  HAL_Delay(1000);
9000077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
90000780:	f002 fb62 	bl	90002e48 <HAL_Delay>
  InitFlexiKeyboard(); // has to be AFTER BSP_LCD_Init, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000784:	f00a fe2a 	bl	9000b3dc <InitFlexiKeyboard>

  CPU_CACHE_Enable();
90000788:	f000 f9c8 	bl	90000b1c <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
  {
	  HAL_Delay(100);
9000078c:	2064      	movs	r0, #100	@ 0x64
9000078e:	f002 fb5b 	bl	90002e48 <HAL_Delay>
	  ReadFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000792:	f00a fdd9 	bl	9000b348 <ReadFlexiKeyboard>
	  HAL_Delay(100);
90000796:	bf00      	nop
90000798:	e7f8      	b.n	9000078c <main+0x40>
9000079a:	bf00      	nop
9000079c:	9000cca0 	.word	0x9000cca0

900007a0 <MX_USART3_UART_Init>:
  * @param  None
  * @retval None
  */

static void MX_USART3_UART_Init(void)
{
900007a0:	b580      	push	{r7, lr}
900007a2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
900007a4:	4b22      	ldr	r3, [pc, #136]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007a6:	4a23      	ldr	r2, [pc, #140]	@ (90000834 <MX_USART3_UART_Init+0x94>)
900007a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
900007aa:	4b21      	ldr	r3, [pc, #132]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
900007b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
900007b2:	4b1f      	ldr	r3, [pc, #124]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007b4:	2200      	movs	r2, #0
900007b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
900007b8:	4b1d      	ldr	r3, [pc, #116]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007ba:	2200      	movs	r2, #0
900007bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
900007be:	4b1c      	ldr	r3, [pc, #112]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007c0:	2200      	movs	r2, #0
900007c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
900007c4:	4b1a      	ldr	r3, [pc, #104]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007c6:	220c      	movs	r2, #12
900007c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
900007ca:	4b19      	ldr	r3, [pc, #100]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007cc:	2200      	movs	r2, #0
900007ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
900007d0:	4b17      	ldr	r3, [pc, #92]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007d2:	2200      	movs	r2, #0
900007d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
900007d6:	4b16      	ldr	r3, [pc, #88]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007d8:	2200      	movs	r2, #0
900007da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
900007dc:	4b14      	ldr	r3, [pc, #80]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007de:	2200      	movs	r2, #0
900007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
900007e2:	4b13      	ldr	r3, [pc, #76]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007e4:	2200      	movs	r2, #0
900007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
900007e8:	4811      	ldr	r0, [pc, #68]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007ea:	f008 ffe5 	bl	900097b8 <HAL_UART_Init>
900007ee:	4603      	mov	r3, r0
900007f0:	2b00      	cmp	r3, #0
900007f2:	d001      	beq.n	900007f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
900007f4:	f000 f88a 	bl	9000090c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
900007f8:	2100      	movs	r1, #0
900007fa:	480d      	ldr	r0, [pc, #52]	@ (90000830 <MX_USART3_UART_Init+0x90>)
900007fc:	f00a f87b 	bl	9000a8f6 <HAL_UARTEx_SetTxFifoThreshold>
90000800:	4603      	mov	r3, r0
90000802:	2b00      	cmp	r3, #0
90000804:	d001      	beq.n	9000080a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000806:	f000 f881 	bl	9000090c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
9000080a:	2100      	movs	r1, #0
9000080c:	4808      	ldr	r0, [pc, #32]	@ (90000830 <MX_USART3_UART_Init+0x90>)
9000080e:	f00a f8b0 	bl	9000a972 <HAL_UARTEx_SetRxFifoThreshold>
90000812:	4603      	mov	r3, r0
90000814:	2b00      	cmp	r3, #0
90000816:	d001      	beq.n	9000081c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000818:	f000 f878 	bl	9000090c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
9000081c:	4804      	ldr	r0, [pc, #16]	@ (90000830 <MX_USART3_UART_Init+0x90>)
9000081e:	f00a f831 	bl	9000a884 <HAL_UARTEx_DisableFifoMode>
90000822:	4603      	mov	r3, r0
90000824:	2b00      	cmp	r3, #0
90000826:	d001      	beq.n	9000082c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000828:	f000 f870 	bl	9000090c <Error_Handler>
  }
}
9000082c:	bf00      	nop
9000082e:	bd80      	pop	{r7, pc}
90000830:	200000ec 	.word	0x200000ec
90000834:	40004800 	.word	0x40004800

90000838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000838:	b580      	push	{r7, lr}
9000083a:	b0ba      	sub	sp, #232	@ 0xe8
9000083c:	af00      	add	r7, sp, #0
9000083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000840:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000844:	2200      	movs	r2, #0
90000846:	601a      	str	r2, [r3, #0]
90000848:	605a      	str	r2, [r3, #4]
9000084a:	609a      	str	r2, [r3, #8]
9000084c:	60da      	str	r2, [r3, #12]
9000084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000850:	f107 0310 	add.w	r3, r7, #16
90000854:	22c0      	movs	r2, #192	@ 0xc0
90000856:	2100      	movs	r1, #0
90000858:	4618      	mov	r0, r3
9000085a:	f00b fd41 	bl	9000c2e0 <memset>
  if(huart->Instance==USART3)
9000085e:	687b      	ldr	r3, [r7, #4]
90000860:	681b      	ldr	r3, [r3, #0]
90000862:	4a27      	ldr	r2, [pc, #156]	@ (90000900 <HAL_UART_MspInit+0xc8>)
90000864:	4293      	cmp	r3, r2
90000866:	d146      	bne.n	900008f6 <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000868:	f04f 0202 	mov.w	r2, #2
9000086c:	f04f 0300 	mov.w	r3, #0
90000870:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000874:	2300      	movs	r3, #0
90000876:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000087a:	f107 0310 	add.w	r3, r7, #16
9000087e:	4618      	mov	r0, r3
90000880:	f006 ff64 	bl	9000774c <HAL_RCCEx_PeriphCLKConfig>
90000884:	4603      	mov	r3, r0
90000886:	2b00      	cmp	r3, #0
90000888:	d001      	beq.n	9000088e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
9000088a:	f000 f83f 	bl	9000090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
9000088e:	4b1d      	ldr	r3, [pc, #116]	@ (90000904 <HAL_UART_MspInit+0xcc>)
90000890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000894:	4a1b      	ldr	r2, [pc, #108]	@ (90000904 <HAL_UART_MspInit+0xcc>)
90000896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
9000089a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
9000089e:	4b19      	ldr	r3, [pc, #100]	@ (90000904 <HAL_UART_MspInit+0xcc>)
900008a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
900008a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
900008a8:	60fb      	str	r3, [r7, #12]
900008aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
900008ac:	4b15      	ldr	r3, [pc, #84]	@ (90000904 <HAL_UART_MspInit+0xcc>)
900008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008b2:	4a14      	ldr	r2, [pc, #80]	@ (90000904 <HAL_UART_MspInit+0xcc>)
900008b4:	f043 0302 	orr.w	r3, r3, #2
900008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900008bc:	4b11      	ldr	r3, [pc, #68]	@ (90000904 <HAL_UART_MspInit+0xcc>)
900008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008c2:	f003 0302 	and.w	r3, r3, #2
900008c6:	60bb      	str	r3, [r7, #8]
900008c8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
900008ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
900008ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900008d2:	2302      	movs	r3, #2
900008d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900008d8:	2300      	movs	r3, #0
900008da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900008de:	2300      	movs	r3, #0
900008e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
900008e4:	2307      	movs	r3, #7
900008e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900008ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
900008ee:	4619      	mov	r1, r3
900008f0:	4805      	ldr	r0, [pc, #20]	@ (90000908 <HAL_UART_MspInit+0xd0>)
900008f2:	f002 ff47 	bl	90003784 <HAL_GPIO_Init>
  }
}
900008f6:	bf00      	nop
900008f8:	37e8      	adds	r7, #232	@ 0xe8
900008fa:	46bd      	mov	sp, r7
900008fc:	bd80      	pop	{r7, pc}
900008fe:	bf00      	nop
90000900:	40004800 	.word	0x40004800
90000904:	58024400 	.word	0x58024400
90000908:	58020400 	.word	0x58020400

9000090c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
9000090c:	b480      	push	{r7}
9000090e:	af00      	add	r7, sp, #0
  while(1)
90000910:	bf00      	nop
90000912:	e7fd      	b.n	90000910 <Error_Handler+0x4>

90000914 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000914:	b580      	push	{r7, lr}
90000916:	b0ce      	sub	sp, #312	@ 0x138
90000918:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
9000091a:	2300      	movs	r3, #0
9000091c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000920:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000924:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000928:	2200      	movs	r2, #0
9000092a:	601a      	str	r2, [r3, #0]
9000092c:	4b78      	ldr	r3, [pc, #480]	@ (90000b10 <SystemClock_Config+0x1fc>)
9000092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000930:	4a77      	ldr	r2, [pc, #476]	@ (90000b10 <SystemClock_Config+0x1fc>)
90000932:	f023 0301 	bic.w	r3, r3, #1
90000936:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000938:	4b75      	ldr	r3, [pc, #468]	@ (90000b10 <SystemClock_Config+0x1fc>)
9000093a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000093c:	f003 0201 	and.w	r2, r3, #1
90000940:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000944:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000948:	601a      	str	r2, [r3, #0]
9000094a:	4b72      	ldr	r3, [pc, #456]	@ (90000b14 <SystemClock_Config+0x200>)
9000094c:	699b      	ldr	r3, [r3, #24]
9000094e:	4a71      	ldr	r2, [pc, #452]	@ (90000b14 <SystemClock_Config+0x200>)
90000950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000954:	6193      	str	r3, [r2, #24]
90000956:	4b6f      	ldr	r3, [pc, #444]	@ (90000b14 <SystemClock_Config+0x200>)
90000958:	699b      	ldr	r3, [r3, #24]
9000095a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
9000095e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000962:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000966:	601a      	str	r2, [r3, #0]
90000968:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000096c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000970:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000972:	bf00      	nop
90000974:	4b67      	ldr	r3, [pc, #412]	@ (90000b14 <SystemClock_Config+0x200>)
90000976:	699b      	ldr	r3, [r3, #24]
90000978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000097c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000980:	d1f8      	bne.n	90000974 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000982:	2301      	movs	r3, #1
90000984:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000988:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
9000098c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000990:	2300      	movs	r3, #0
90000992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000996:	2300      	movs	r3, #0
90000998:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000099c:	2302      	movs	r3, #2
9000099e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900009a2:	2302      	movs	r3, #2
900009a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
900009a8:	2305      	movs	r3, #5
900009aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
900009ae:	23a0      	movs	r3, #160	@ 0xa0
900009b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900009b4:	2300      	movs	r3, #0
900009b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
900009ba:	2302      	movs	r3, #2
900009bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
900009c0:	2302      	movs	r3, #2
900009c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
900009c6:	2304      	movs	r3, #4
900009c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900009cc:	2300      	movs	r3, #0
900009ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900009d2:	2308      	movs	r3, #8
900009d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
900009d8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
900009dc:	4618      	mov	r0, r3
900009de:	f005 fecf 	bl	90006780 <HAL_RCC_OscConfig>
900009e2:	4603      	mov	r3, r0
900009e4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
900009e8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
900009ec:	2b00      	cmp	r3, #0
900009ee:	d001      	beq.n	900009f4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
900009f0:	f7ff ff8c 	bl	9000090c <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
900009f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900009f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
900009fc:	2205      	movs	r2, #5
900009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000a00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a04:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000a08:	2260      	movs	r2, #96	@ 0x60
90000a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000a0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a10:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000a14:	2202      	movs	r2, #2
90000a16:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000a18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a1c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000a20:	220a      	movs	r2, #10
90000a22:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000a24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000a2c:	2212      	movs	r2, #18
90000a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000a30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000a38:	2200      	movs	r2, #0
90000a3a:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000a3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000a44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000a4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a4e:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000a52:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000a56:	f04f 0300 	mov.w	r3, #0
90000a5a:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000a5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000a62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000a66:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000a6e:	f107 0308 	add.w	r3, r7, #8
90000a72:	4618      	mov	r0, r3
90000a74:	f006 fe6a 	bl	9000774c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000a78:	233f      	movs	r3, #63	@ 0x3f
90000a7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000a7e:	2303      	movs	r3, #3
90000a80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000a84:	2300      	movs	r3, #0
90000a86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000a8a:	2308      	movs	r3, #8
90000a8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000a90:	2340      	movs	r3, #64	@ 0x40
90000a92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000a96:	2340      	movs	r3, #64	@ 0x40
90000a98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000aa0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000aa4:	2340      	movs	r3, #64	@ 0x40
90000aa6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000aaa:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000aae:	2104      	movs	r1, #4
90000ab0:	4618      	mov	r0, r3
90000ab2:	f006 fabf 	bl	90007034 <HAL_RCC_ClockConfig>
90000ab6:	4603      	mov	r3, r0
90000ab8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000abc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000ac0:	2b00      	cmp	r3, #0
90000ac2:	d001      	beq.n	90000ac8 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000ac4:	f7ff ff22 	bl	9000090c <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000ac8:	4b13      	ldr	r3, [pc, #76]	@ (90000b18 <SystemClock_Config+0x204>)
90000aca:	681b      	ldr	r3, [r3, #0]
90000acc:	4a12      	ldr	r2, [pc, #72]	@ (90000b18 <SystemClock_Config+0x204>)
90000ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000ad2:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000ad4:	4b10      	ldr	r3, [pc, #64]	@ (90000b18 <SystemClock_Config+0x204>)
90000ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000ada:	4a0f      	ldr	r2, [pc, #60]	@ (90000b18 <SystemClock_Config+0x204>)
90000adc:	f043 0302 	orr.w	r3, r3, #2
90000ae0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (90000b18 <SystemClock_Config+0x204>)
90000ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000aea:	f003 0202 	and.w	r2, r3, #2
90000aee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000af2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000af6:	601a      	str	r2, [r3, #0]
90000af8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000afc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000b00:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000b02:	f002 f9d1 	bl	90002ea8 <HAL_EnableCompensationCell>
}
90000b06:	bf00      	nop
90000b08:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000b0c:	46bd      	mov	sp, r7
90000b0e:	bd80      	pop	{r7, pc}
90000b10:	58000400 	.word	0x58000400
90000b14:	58024800 	.word	0x58024800
90000b18:	58024400 	.word	0x58024400

90000b1c <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000b1c:	b480      	push	{r7}
90000b1e:	b085      	sub	sp, #20
90000b20:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000b22:	4b34      	ldr	r3, [pc, #208]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000b24:	695b      	ldr	r3, [r3, #20]
90000b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000b2a:	2b00      	cmp	r3, #0
90000b2c:	d11b      	bne.n	90000b66 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000b2e:	f3bf 8f4f 	dsb	sy
}
90000b32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000b34:	f3bf 8f6f 	isb	sy
}
90000b38:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000b3a:	4b2e      	ldr	r3, [pc, #184]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000b3c:	2200      	movs	r2, #0
90000b3e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000b42:	f3bf 8f4f 	dsb	sy
}
90000b46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000b48:	f3bf 8f6f 	isb	sy
}
90000b4c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000b4e:	4b29      	ldr	r3, [pc, #164]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000b50:	695b      	ldr	r3, [r3, #20]
90000b52:	4a28      	ldr	r2, [pc, #160]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000b58:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000b5a:	f3bf 8f4f 	dsb	sy
}
90000b5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000b60:	f3bf 8f6f 	isb	sy
}
90000b64:	e000      	b.n	90000b68 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000b66:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000b68:	4b22      	ldr	r3, [pc, #136]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000b6a:	695b      	ldr	r3, [r3, #20]
90000b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000b70:	2b00      	cmp	r3, #0
90000b72:	d138      	bne.n	90000be6 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000b74:	4b1f      	ldr	r3, [pc, #124]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000b76:	2200      	movs	r2, #0
90000b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000b7c:	f3bf 8f4f 	dsb	sy
}
90000b80:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000b82:	4b1c      	ldr	r3, [pc, #112]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000b88:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000b8a:	68fb      	ldr	r3, [r7, #12]
90000b8c:	0b5b      	lsrs	r3, r3, #13
90000b8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000b92:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000b94:	68fb      	ldr	r3, [r7, #12]
90000b96:	08db      	lsrs	r3, r3, #3
90000b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000b9c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000b9e:	68bb      	ldr	r3, [r7, #8]
90000ba0:	015a      	lsls	r2, r3, #5
90000ba2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000ba6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000ba8:	687a      	ldr	r2, [r7, #4]
90000baa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000bac:	4911      	ldr	r1, [pc, #68]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000bae:	4313      	orrs	r3, r2
90000bb0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000bb4:	687b      	ldr	r3, [r7, #4]
90000bb6:	1e5a      	subs	r2, r3, #1
90000bb8:	607a      	str	r2, [r7, #4]
90000bba:	2b00      	cmp	r3, #0
90000bbc:	d1ef      	bne.n	90000b9e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000bbe:	68bb      	ldr	r3, [r7, #8]
90000bc0:	1e5a      	subs	r2, r3, #1
90000bc2:	60ba      	str	r2, [r7, #8]
90000bc4:	2b00      	cmp	r3, #0
90000bc6:	d1e5      	bne.n	90000b94 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000bc8:	f3bf 8f4f 	dsb	sy
}
90000bcc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000bce:	4b09      	ldr	r3, [pc, #36]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000bd0:	695b      	ldr	r3, [r3, #20]
90000bd2:	4a08      	ldr	r2, [pc, #32]	@ (90000bf4 <CPU_CACHE_Enable+0xd8>)
90000bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000bd8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000bda:	f3bf 8f4f 	dsb	sy
}
90000bde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000be0:	f3bf 8f6f 	isb	sy
}
90000be4:	e000      	b.n	90000be8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000be6:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000be8:	bf00      	nop
90000bea:	3714      	adds	r7, #20
90000bec:	46bd      	mov	sp, r7
90000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
90000bf2:	4770      	bx	lr
90000bf4:	e000ed00 	.word	0xe000ed00

90000bf8 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000bf8:	b580      	push	{r7, lr}
90000bfa:	b082      	sub	sp, #8
90000bfc:	af00      	add	r7, sp, #0
90000bfe:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000c00:	490e      	ldr	r1, [pc, #56]	@ (90000c3c <MX_LTDC_ClockConfig+0x44>)
90000c02:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000c06:	f04f 0300 	mov.w	r3, #0
90000c0a:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (90000c3c <MX_LTDC_ClockConfig+0x44>)
90000c10:	2205      	movs	r2, #5
90000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000c14:	4b09      	ldr	r3, [pc, #36]	@ (90000c3c <MX_LTDC_ClockConfig+0x44>)
90000c16:	22c0      	movs	r2, #192	@ 0xc0
90000c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000c1a:	4b08      	ldr	r3, [pc, #32]	@ (90000c3c <MX_LTDC_ClockConfig+0x44>)
90000c1c:	2202      	movs	r2, #2
90000c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000c20:	4b06      	ldr	r3, [pc, #24]	@ (90000c3c <MX_LTDC_ClockConfig+0x44>)
90000c22:	2214      	movs	r2, #20
90000c24:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000c26:	4b05      	ldr	r3, [pc, #20]	@ (90000c3c <MX_LTDC_ClockConfig+0x44>)
90000c28:	2263      	movs	r2, #99	@ 0x63
90000c2a:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000c2c:	4803      	ldr	r0, [pc, #12]	@ (90000c3c <MX_LTDC_ClockConfig+0x44>)
90000c2e:	f006 fd8d 	bl	9000774c <HAL_RCCEx_PeriphCLKConfig>
90000c32:	4603      	mov	r3, r0
}
90000c34:	4618      	mov	r0, r3
90000c36:	3708      	adds	r7, #8
90000c38:	46bd      	mov	sp, r7
90000c3a:	bd80      	pop	{r7, pc}
90000c3c:	20000180 	.word	0x20000180

90000c40 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000c40:	b580      	push	{r7, lr}
90000c42:	b084      	sub	sp, #16
90000c44:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000c46:	f002 fa4f 	bl	900030e8 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000c4a:	2301      	movs	r3, #1
90000c4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000c4e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000c52:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000c54:	2318      	movs	r3, #24
90000c56:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000c58:	2303      	movs	r3, #3
90000c5a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000c5c:	2300      	movs	r3, #0
90000c5e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000c60:	2301      	movs	r3, #1
90000c62:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000c64:	2300      	movs	r3, #0
90000c66:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000c68:	2301      	movs	r3, #1
90000c6a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000c6c:	2300      	movs	r3, #0
90000c6e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000c70:	2300      	movs	r3, #0
90000c72:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000c74:	2300      	movs	r3, #0
90000c76:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000c78:	463b      	mov	r3, r7
90000c7a:	4618      	mov	r0, r3
90000c7c:	f002 fa6c 	bl	90003158 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000c80:	2004      	movs	r0, #4
90000c82:	f002 fa49 	bl	90003118 <HAL_MPU_Enable>
}
90000c86:	bf00      	nop
90000c88:	3710      	adds	r7, #16
90000c8a:	46bd      	mov	sp, r7
90000c8c:	bd80      	pop	{r7, pc}

90000c8e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000c8e:	b480      	push	{r7}
90000c90:	af00      	add	r7, sp, #0
}
90000c92:	bf00      	nop
90000c94:	46bd      	mov	sp, r7
90000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
90000c9a:	4770      	bx	lr

90000c9c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000c9c:	b480      	push	{r7}
90000c9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000ca0:	bf00      	nop
90000ca2:	e7fd      	b.n	90000ca0 <HardFault_Handler+0x4>

90000ca4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000ca4:	b480      	push	{r7}
90000ca6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000ca8:	bf00      	nop
90000caa:	e7fd      	b.n	90000ca8 <MemManage_Handler+0x4>

90000cac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000cac:	b480      	push	{r7}
90000cae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000cb0:	bf00      	nop
90000cb2:	e7fd      	b.n	90000cb0 <BusFault_Handler+0x4>

90000cb4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000cb4:	b480      	push	{r7}
90000cb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000cb8:	bf00      	nop
90000cba:	e7fd      	b.n	90000cb8 <UsageFault_Handler+0x4>

90000cbc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000cbc:	b480      	push	{r7}
90000cbe:	af00      	add	r7, sp, #0
}
90000cc0:	bf00      	nop
90000cc2:	46bd      	mov	sp, r7
90000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
90000cc8:	4770      	bx	lr

90000cca <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000cca:	b480      	push	{r7}
90000ccc:	af00      	add	r7, sp, #0
}
90000cce:	bf00      	nop
90000cd0:	46bd      	mov	sp, r7
90000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000cd6:	4770      	bx	lr

90000cd8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000cd8:	b480      	push	{r7}
90000cda:	af00      	add	r7, sp, #0
}
90000cdc:	bf00      	nop
90000cde:	46bd      	mov	sp, r7
90000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ce4:	4770      	bx	lr

90000ce6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000ce6:	b580      	push	{r7, lr}
90000ce8:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000cea:	f002 f88d 	bl	90002e08 <HAL_IncTick>
}
90000cee:	bf00      	nop
90000cf0:	bd80      	pop	{r7, pc}
	...

90000cf4 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000cf4:	b580      	push	{r7, lr}
90000cf6:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000cf8:	4802      	ldr	r0, [pc, #8]	@ (90000d04 <OTG_FS_IRQHandler+0x10>)
90000cfa:	f002 ff24 	bl	90003b46 <HAL_HCD_IRQHandler>
}
90000cfe:	bf00      	nop
90000d00:	bd80      	pop	{r7, pc}
90000d02:	bf00      	nop
90000d04:	20000244 	.word	0x20000244

90000d08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000d08:	b580      	push	{r7, lr}
90000d0a:	b086      	sub	sp, #24
90000d0c:	af00      	add	r7, sp, #0
90000d0e:	60f8      	str	r0, [r7, #12]
90000d10:	60b9      	str	r1, [r7, #8]
90000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000d14:	2300      	movs	r3, #0
90000d16:	617b      	str	r3, [r7, #20]
90000d18:	e00a      	b.n	90000d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
90000d1a:	f3af 8000 	nop.w
90000d1e:	4601      	mov	r1, r0
90000d20:	68bb      	ldr	r3, [r7, #8]
90000d22:	1c5a      	adds	r2, r3, #1
90000d24:	60ba      	str	r2, [r7, #8]
90000d26:	b2ca      	uxtb	r2, r1
90000d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000d2a:	697b      	ldr	r3, [r7, #20]
90000d2c:	3301      	adds	r3, #1
90000d2e:	617b      	str	r3, [r7, #20]
90000d30:	697a      	ldr	r2, [r7, #20]
90000d32:	687b      	ldr	r3, [r7, #4]
90000d34:	429a      	cmp	r2, r3
90000d36:	dbf0      	blt.n	90000d1a <_read+0x12>
  }

  return len;
90000d38:	687b      	ldr	r3, [r7, #4]
}
90000d3a:	4618      	mov	r0, r3
90000d3c:	3718      	adds	r7, #24
90000d3e:	46bd      	mov	sp, r7
90000d40:	bd80      	pop	{r7, pc}

90000d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90000d42:	b580      	push	{r7, lr}
90000d44:	b086      	sub	sp, #24
90000d46:	af00      	add	r7, sp, #0
90000d48:	60f8      	str	r0, [r7, #12]
90000d4a:	60b9      	str	r1, [r7, #8]
90000d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000d4e:	2300      	movs	r3, #0
90000d50:	617b      	str	r3, [r7, #20]
90000d52:	e009      	b.n	90000d68 <_write+0x26>
  {
    __io_putchar(*ptr++);
90000d54:	68bb      	ldr	r3, [r7, #8]
90000d56:	1c5a      	adds	r2, r3, #1
90000d58:	60ba      	str	r2, [r7, #8]
90000d5a:	781b      	ldrb	r3, [r3, #0]
90000d5c:	4618      	mov	r0, r3
90000d5e:	f7ff fcdd 	bl	9000071c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000d62:	697b      	ldr	r3, [r7, #20]
90000d64:	3301      	adds	r3, #1
90000d66:	617b      	str	r3, [r7, #20]
90000d68:	697a      	ldr	r2, [r7, #20]
90000d6a:	687b      	ldr	r3, [r7, #4]
90000d6c:	429a      	cmp	r2, r3
90000d6e:	dbf1      	blt.n	90000d54 <_write+0x12>
  }
  return len;
90000d70:	687b      	ldr	r3, [r7, #4]
}
90000d72:	4618      	mov	r0, r3
90000d74:	3718      	adds	r7, #24
90000d76:	46bd      	mov	sp, r7
90000d78:	bd80      	pop	{r7, pc}

90000d7a <_close>:

int _close(int file)
{
90000d7a:	b480      	push	{r7}
90000d7c:	b083      	sub	sp, #12
90000d7e:	af00      	add	r7, sp, #0
90000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
90000d82:	f04f 33ff 	mov.w	r3, #4294967295
}
90000d86:	4618      	mov	r0, r3
90000d88:	370c      	adds	r7, #12
90000d8a:	46bd      	mov	sp, r7
90000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000d90:	4770      	bx	lr

90000d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
90000d92:	b480      	push	{r7}
90000d94:	b083      	sub	sp, #12
90000d96:	af00      	add	r7, sp, #0
90000d98:	6078      	str	r0, [r7, #4]
90000d9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90000d9c:	683b      	ldr	r3, [r7, #0]
90000d9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
90000da2:	605a      	str	r2, [r3, #4]
  return 0;
90000da4:	2300      	movs	r3, #0
}
90000da6:	4618      	mov	r0, r3
90000da8:	370c      	adds	r7, #12
90000daa:	46bd      	mov	sp, r7
90000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
90000db0:	4770      	bx	lr

90000db2 <_isatty>:

int _isatty(int file)
{
90000db2:	b480      	push	{r7}
90000db4:	b083      	sub	sp, #12
90000db6:	af00      	add	r7, sp, #0
90000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90000dba:	2301      	movs	r3, #1
}
90000dbc:	4618      	mov	r0, r3
90000dbe:	370c      	adds	r7, #12
90000dc0:	46bd      	mov	sp, r7
90000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000dc6:	4770      	bx	lr

90000dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90000dc8:	b480      	push	{r7}
90000dca:	b085      	sub	sp, #20
90000dcc:	af00      	add	r7, sp, #0
90000dce:	60f8      	str	r0, [r7, #12]
90000dd0:	60b9      	str	r1, [r7, #8]
90000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90000dd4:	2300      	movs	r3, #0
}
90000dd6:	4618      	mov	r0, r3
90000dd8:	3714      	adds	r7, #20
90000dda:	46bd      	mov	sp, r7
90000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
90000de0:	4770      	bx	lr
	...

90000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000de4:	b580      	push	{r7, lr}
90000de6:	b086      	sub	sp, #24
90000de8:	af00      	add	r7, sp, #0
90000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000dec:	4a14      	ldr	r2, [pc, #80]	@ (90000e40 <_sbrk+0x5c>)
90000dee:	4b15      	ldr	r3, [pc, #84]	@ (90000e44 <_sbrk+0x60>)
90000df0:	1ad3      	subs	r3, r2, r3
90000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000df4:	697b      	ldr	r3, [r7, #20]
90000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90000df8:	4b13      	ldr	r3, [pc, #76]	@ (90000e48 <_sbrk+0x64>)
90000dfa:	681b      	ldr	r3, [r3, #0]
90000dfc:	2b00      	cmp	r3, #0
90000dfe:	d102      	bne.n	90000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90000e00:	4b11      	ldr	r3, [pc, #68]	@ (90000e48 <_sbrk+0x64>)
90000e02:	4a12      	ldr	r2, [pc, #72]	@ (90000e4c <_sbrk+0x68>)
90000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90000e06:	4b10      	ldr	r3, [pc, #64]	@ (90000e48 <_sbrk+0x64>)
90000e08:	681a      	ldr	r2, [r3, #0]
90000e0a:	687b      	ldr	r3, [r7, #4]
90000e0c:	4413      	add	r3, r2
90000e0e:	693a      	ldr	r2, [r7, #16]
90000e10:	429a      	cmp	r2, r3
90000e12:	d207      	bcs.n	90000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
90000e14:	f00b fac2 	bl	9000c39c <__errno>
90000e18:	4603      	mov	r3, r0
90000e1a:	220c      	movs	r2, #12
90000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90000e1e:	f04f 33ff 	mov.w	r3, #4294967295
90000e22:	e009      	b.n	90000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90000e24:	4b08      	ldr	r3, [pc, #32]	@ (90000e48 <_sbrk+0x64>)
90000e26:	681b      	ldr	r3, [r3, #0]
90000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90000e2a:	4b07      	ldr	r3, [pc, #28]	@ (90000e48 <_sbrk+0x64>)
90000e2c:	681a      	ldr	r2, [r3, #0]
90000e2e:	687b      	ldr	r3, [r7, #4]
90000e30:	4413      	add	r3, r2
90000e32:	4a05      	ldr	r2, [pc, #20]	@ (90000e48 <_sbrk+0x64>)
90000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90000e36:	68fb      	ldr	r3, [r7, #12]
}
90000e38:	4618      	mov	r0, r3
90000e3a:	3718      	adds	r7, #24
90000e3c:	46bd      	mov	sp, r7
90000e3e:	bd80      	pop	{r7, pc}
90000e40:	20020000 	.word	0x20020000
90000e44:	00001000 	.word	0x00001000
90000e48:	20000240 	.word	0x20000240
90000e4c:	20001498 	.word	0x20001498

90000e50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90000e50:	b580      	push	{r7, lr}
90000e52:	b082      	sub	sp, #8
90000e54:	af00      	add	r7, sp, #0
90000e56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90000e58:	687b      	ldr	r3, [r7, #4]
90000e5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000e5e:	4618      	mov	r0, r3
90000e60:	f00a fb86 	bl	9000b570 <USBH_LL_IncTimer>
}
90000e64:	bf00      	nop
90000e66:	3708      	adds	r7, #8
90000e68:	46bd      	mov	sp, r7
90000e6a:	bd80      	pop	{r7, pc}

90000e6c <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90000e6c:	b580      	push	{r7, lr}
90000e6e:	b082      	sub	sp, #8
90000e70:	af00      	add	r7, sp, #0
90000e72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90000e74:	687b      	ldr	r3, [r7, #4]
90000e76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000e7a:	4618      	mov	r0, r3
90000e7c:	f00a fbc2 	bl	9000b604 <USBH_LL_Connect>
}
90000e80:	bf00      	nop
90000e82:	3708      	adds	r7, #8
90000e84:	46bd      	mov	sp, r7
90000e86:	bd80      	pop	{r7, pc}

90000e88 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90000e88:	b580      	push	{r7, lr}
90000e8a:	b082      	sub	sp, #8
90000e8c:	af00      	add	r7, sp, #0
90000e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90000e90:	687b      	ldr	r3, [r7, #4]
90000e92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000e96:	4618      	mov	r0, r3
90000e98:	f00a fbcb 	bl	9000b632 <USBH_LL_Disconnect>
}
90000e9c:	bf00      	nop
90000e9e:	3708      	adds	r7, #8
90000ea0:	46bd      	mov	sp, r7
90000ea2:	bd80      	pop	{r7, pc}

90000ea4 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000ea4:	b580      	push	{r7, lr}
90000ea6:	b082      	sub	sp, #8
90000ea8:	af00      	add	r7, sp, #0
90000eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90000eac:	687b      	ldr	r3, [r7, #4]
90000eae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000eb2:	4618      	mov	r0, r3
90000eb4:	f00a fb86 	bl	9000b5c4 <USBH_LL_PortEnabled>
}
90000eb8:	bf00      	nop
90000eba:	3708      	adds	r7, #8
90000ebc:	46bd      	mov	sp, r7
90000ebe:	bd80      	pop	{r7, pc}

90000ec0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000ec0:	b580      	push	{r7, lr}
90000ec2:	b082      	sub	sp, #8
90000ec4:	af00      	add	r7, sp, #0
90000ec6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90000ec8:	687b      	ldr	r3, [r7, #4]
90000eca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90000ece:	4618      	mov	r0, r3
90000ed0:	f00a fb86 	bl	9000b5e0 <USBH_LL_PortDisabled>
}
90000ed4:	bf00      	nop
90000ed6:	3708      	adds	r7, #8
90000ed8:	46bd      	mov	sp, r7
90000eda:	bd80      	pop	{r7, pc}

90000edc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90000edc:	b480      	push	{r7}
90000ede:	b083      	sub	sp, #12
90000ee0:	af00      	add	r7, sp, #0
90000ee2:	6078      	str	r0, [r7, #4]
90000ee4:	460b      	mov	r3, r1
90000ee6:	70fb      	strb	r3, [r7, #3]
90000ee8:	4613      	mov	r3, r2
90000eea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90000eec:	bf00      	nop
90000eee:	370c      	adds	r7, #12
90000ef0:	46bd      	mov	sp, r7
90000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ef6:	4770      	bx	lr

90000ef8 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90000ef8:	b580      	push	{r7, lr}
90000efa:	b082      	sub	sp, #8
90000efc:	af00      	add	r7, sp, #0
90000efe:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90000f00:	687b      	ldr	r3, [r7, #4]
90000f02:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90000f06:	4618      	mov	r0, r3
90000f08:	f002 ff2d 	bl	90003d66 <HAL_HCD_Stop>
  return USBH_OK;
90000f0c:	2300      	movs	r3, #0
}
90000f0e:	4618      	mov	r0, r3
90000f10:	3708      	adds	r7, #8
90000f12:	46bd      	mov	sp, r7
90000f14:	bd80      	pop	{r7, pc}
	...

90000f18 <Draw_Menu>:
#include "display.h"

uint32_t x_size, y_size;

void Draw_Menu(void)
{
90000f18:	b580      	push	{r7, lr}
90000f1a:	b082      	sub	sp, #8
90000f1c:	af00      	add	r7, sp, #0
  UTIL_LCD_SetLayer(0);
90000f1e:	2000      	movs	r0, #0
90000f20:	f00a fc22 	bl	9000b768 <UTIL_LCD_SetLayer>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000f24:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000f28:	f00a fc94 	bl	9000b854 <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90000f2c:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90000f30:	f00a fc38 	bl	9000b7a4 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90000f34:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000f38:	f00a fc48 	bl	9000b7cc <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90000f3c:	480c      	ldr	r0, [pc, #48]	@ (90000f70 <Draw_Menu+0x58>)
90000f3e:	f00a fc59 	bl	9000b7f4 <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
90000f42:	2300      	movs	r3, #0
90000f44:	607b      	str	r3, [r7, #4]
90000f46:	e00a      	b.n	90000f5e <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Bumbajs ubumbananej3", LEFT_MODE);
90000f48:	687b      	ldr	r3, [r7, #4]
90000f4a:	015b      	lsls	r3, r3, #5
90000f4c:	4619      	mov	r1, r3
90000f4e:	2303      	movs	r3, #3
90000f50:	4a08      	ldr	r2, [pc, #32]	@ (90000f74 <Draw_Menu+0x5c>)
90000f52:	2000      	movs	r0, #0
90000f54:	f00a fcca 	bl	9000b8ec <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90000f58:	687b      	ldr	r3, [r7, #4]
90000f5a:	3301      	adds	r3, #1
90000f5c:	607b      	str	r3, [r7, #4]
90000f5e:	687b      	ldr	r3, [r7, #4]
90000f60:	2b07      	cmp	r3, #7
90000f62:	ddf1      	ble.n	90000f48 <Draw_Menu+0x30>
  }
}
90000f64:	bf00      	nop
90000f66:	bf00      	nop
90000f68:	3708      	adds	r7, #8
90000f6a:	46bd      	mov	sp, r7
90000f6c:	bd80      	pop	{r7, pc}
90000f6e:	bf00      	nop
90000f70:	20000068 	.word	0x20000068
90000f74:	9000ccb0 	.word	0x9000ccb0

90000f78 <InitializeLcd>:

void InitializeLcd(void)
{
90000f78:	b580      	push	{r7, lr}
90000f7a:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90000f7c:	2101      	movs	r1, #1
90000f7e:	2000      	movs	r0, #0
90000f80:	f000 fdee 	bl	90001b60 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000f84:	4809      	ldr	r0, [pc, #36]	@ (90000fac <InitializeLcd+0x34>)
90000f86:	f00a fb99 	bl	9000b6bc <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90000f8a:	2000      	movs	r0, #0
90000f8c:	f00a fbec 	bl	9000b768 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000f90:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000f94:	f00a fc5e 	bl	9000b854 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90000f98:	4905      	ldr	r1, [pc, #20]	@ (90000fb0 <InitializeLcd+0x38>)
90000f9a:	2000      	movs	r0, #0
90000f9c:	f000 ff9a 	bl	90001ed4 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90000fa0:	4904      	ldr	r1, [pc, #16]	@ (90000fb4 <InitializeLcd+0x3c>)
90000fa2:	2000      	movs	r0, #0
90000fa4:	f000 ffb4 	bl	90001f10 <BSP_LCD_GetYSize>
}
90000fa8:	bf00      	nop
90000faa:	bd80      	pop	{r7, pc}
90000fac:	9000cd84 	.word	0x9000cd84
90000fb0:	20000624 	.word	0x20000624
90000fb4:	20000628 	.word	0x20000628

90000fb8 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90000fb8:	b580      	push	{r7, lr}
90000fba:	b084      	sub	sp, #16
90000fbc:	af00      	add	r7, sp, #0
90000fbe:	6078      	str	r0, [r7, #4]
90000fc0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
90000fc2:	687b      	ldr	r3, [r7, #4]
90000fc4:	2b00      	cmp	r3, #0
90000fc6:	d103      	bne.n	90000fd0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90000fc8:	f04f 33ff 	mov.w	r3, #4294967295
90000fcc:	60fb      	str	r3, [r7, #12]
90000fce:	e02c      	b.n	9000102a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90000fd0:	683b      	ldr	r3, [r7, #0]
90000fd2:	681a      	ldr	r2, [r3, #0]
90000fd4:	687b      	ldr	r3, [r7, #4]
90000fd6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90000fd8:	683b      	ldr	r3, [r7, #0]
90000fda:	685a      	ldr	r2, [r3, #4]
90000fdc:	687b      	ldr	r3, [r7, #4]
90000fde:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90000fe0:	683b      	ldr	r3, [r7, #0]
90000fe2:	891a      	ldrh	r2, [r3, #8]
90000fe4:	687b      	ldr	r3, [r7, #4]
90000fe6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90000fe8:	683b      	ldr	r3, [r7, #0]
90000fea:	68da      	ldr	r2, [r3, #12]
90000fec:	687b      	ldr	r3, [r7, #4]
90000fee:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90000ff0:	683b      	ldr	r3, [r7, #0]
90000ff2:	691a      	ldr	r2, [r3, #16]
90000ff4:	687b      	ldr	r3, [r7, #4]
90000ff6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90000ff8:	683b      	ldr	r3, [r7, #0]
90000ffa:	695a      	ldr	r2, [r3, #20]
90000ffc:	687b      	ldr	r3, [r7, #4]
90000ffe:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90001000:	687b      	ldr	r3, [r7, #4]
90001002:	4a0c      	ldr	r2, [pc, #48]	@ (90001034 <FT5336_RegisterBusIO+0x7c>)
90001004:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90001006:	687b      	ldr	r3, [r7, #4]
90001008:	4a0b      	ldr	r2, [pc, #44]	@ (90001038 <FT5336_RegisterBusIO+0x80>)
9000100a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
9000100c:	687b      	ldr	r3, [r7, #4]
9000100e:	687a      	ldr	r2, [r7, #4]
90001010:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
90001012:	687b      	ldr	r3, [r7, #4]
90001014:	681b      	ldr	r3, [r3, #0]
90001016:	2b00      	cmp	r3, #0
90001018:	d004      	beq.n	90001024 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
9000101a:	687b      	ldr	r3, [r7, #4]
9000101c:	681b      	ldr	r3, [r3, #0]
9000101e:	4798      	blx	r3
90001020:	60f8      	str	r0, [r7, #12]
90001022:	e002      	b.n	9000102a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90001024:	f04f 33ff 	mov.w	r3, #4294967295
90001028:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
9000102a:	68fb      	ldr	r3, [r7, #12]
}
9000102c:	4618      	mov	r0, r3
9000102e:	3710      	adds	r7, #16
90001030:	46bd      	mov	sp, r7
90001032:	bd80      	pop	{r7, pc}
90001034:	9000105d 	.word	0x9000105d
90001038:	90001091 	.word	0x90001091

9000103c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
9000103c:	b580      	push	{r7, lr}
9000103e:	b082      	sub	sp, #8
90001040:	af00      	add	r7, sp, #0
90001042:	6078      	str	r0, [r7, #4]
90001044:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90001046:	687b      	ldr	r3, [r7, #4]
90001048:	3318      	adds	r3, #24
9000104a:	6839      	ldr	r1, [r7, #0]
9000104c:	4618      	mov	r0, r3
9000104e:	f000 f850 	bl	900010f2 <ft5336_chip_id>
90001052:	4603      	mov	r3, r0
}
90001054:	4618      	mov	r0, r3
90001056:	3708      	adds	r7, #8
90001058:	46bd      	mov	sp, r7
9000105a:	bd80      	pop	{r7, pc}

9000105c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000105c:	b590      	push	{r4, r7, lr}
9000105e:	b087      	sub	sp, #28
90001060:	af00      	add	r7, sp, #0
90001062:	60f8      	str	r0, [r7, #12]
90001064:	607a      	str	r2, [r7, #4]
90001066:	461a      	mov	r2, r3
90001068:	460b      	mov	r3, r1
9000106a:	72fb      	strb	r3, [r7, #11]
9000106c:	4613      	mov	r3, r2
9000106e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001070:	68fb      	ldr	r3, [r7, #12]
90001072:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001074:	697b      	ldr	r3, [r7, #20]
90001076:	691c      	ldr	r4, [r3, #16]
90001078:	697b      	ldr	r3, [r7, #20]
9000107a:	8918      	ldrh	r0, [r3, #8]
9000107c:	7afb      	ldrb	r3, [r7, #11]
9000107e:	b299      	uxth	r1, r3
90001080:	893b      	ldrh	r3, [r7, #8]
90001082:	687a      	ldr	r2, [r7, #4]
90001084:	47a0      	blx	r4
90001086:	4603      	mov	r3, r0
}
90001088:	4618      	mov	r0, r3
9000108a:	371c      	adds	r7, #28
9000108c:	46bd      	mov	sp, r7
9000108e:	bd90      	pop	{r4, r7, pc}

90001090 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001090:	b590      	push	{r4, r7, lr}
90001092:	b087      	sub	sp, #28
90001094:	af00      	add	r7, sp, #0
90001096:	60f8      	str	r0, [r7, #12]
90001098:	607a      	str	r2, [r7, #4]
9000109a:	461a      	mov	r2, r3
9000109c:	460b      	mov	r3, r1
9000109e:	72fb      	strb	r3, [r7, #11]
900010a0:	4613      	mov	r3, r2
900010a2:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
900010a4:	68fb      	ldr	r3, [r7, #12]
900010a6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900010a8:	697b      	ldr	r3, [r7, #20]
900010aa:	68dc      	ldr	r4, [r3, #12]
900010ac:	697b      	ldr	r3, [r7, #20]
900010ae:	8918      	ldrh	r0, [r3, #8]
900010b0:	7afb      	ldrb	r3, [r7, #11]
900010b2:	b299      	uxth	r1, r3
900010b4:	893b      	ldrh	r3, [r7, #8]
900010b6:	687a      	ldr	r2, [r7, #4]
900010b8:	47a0      	blx	r4
900010ba:	4603      	mov	r3, r0
}
900010bc:	4618      	mov	r0, r3
900010be:	371c      	adds	r7, #28
900010c0:	46bd      	mov	sp, r7
900010c2:	bd90      	pop	{r4, r7, pc}

900010c4 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900010c4:	b590      	push	{r4, r7, lr}
900010c6:	b085      	sub	sp, #20
900010c8:	af00      	add	r7, sp, #0
900010ca:	60f8      	str	r0, [r7, #12]
900010cc:	607a      	str	r2, [r7, #4]
900010ce:	461a      	mov	r2, r3
900010d0:	460b      	mov	r3, r1
900010d2:	72fb      	strb	r3, [r7, #11]
900010d4:	4613      	mov	r3, r2
900010d6:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900010d8:	68fb      	ldr	r3, [r7, #12]
900010da:	685c      	ldr	r4, [r3, #4]
900010dc:	68fb      	ldr	r3, [r7, #12]
900010de:	6898      	ldr	r0, [r3, #8]
900010e0:	893b      	ldrh	r3, [r7, #8]
900010e2:	7af9      	ldrb	r1, [r7, #11]
900010e4:	687a      	ldr	r2, [r7, #4]
900010e6:	47a0      	blx	r4
900010e8:	4603      	mov	r3, r0
}
900010ea:	4618      	mov	r0, r3
900010ec:	3714      	adds	r7, #20
900010ee:	46bd      	mov	sp, r7
900010f0:	bd90      	pop	{r4, r7, pc}

900010f2 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900010f2:	b580      	push	{r7, lr}
900010f4:	b084      	sub	sp, #16
900010f6:	af00      	add	r7, sp, #0
900010f8:	6078      	str	r0, [r7, #4]
900010fa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900010fc:	2301      	movs	r3, #1
900010fe:	683a      	ldr	r2, [r7, #0]
90001100:	21a8      	movs	r1, #168	@ 0xa8
90001102:	6878      	ldr	r0, [r7, #4]
90001104:	f7ff ffde 	bl	900010c4 <ft5336_read_reg>
90001108:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
9000110a:	68fb      	ldr	r3, [r7, #12]
9000110c:	2b00      	cmp	r3, #0
9000110e:	d107      	bne.n	90001120 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
90001110:	683b      	ldr	r3, [r7, #0]
90001112:	781a      	ldrb	r2, [r3, #0]
90001114:	683b      	ldr	r3, [r7, #0]
90001116:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
90001118:	683b      	ldr	r3, [r7, #0]
9000111a:	781a      	ldrb	r2, [r3, #0]
9000111c:	683b      	ldr	r3, [r7, #0]
9000111e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90001120:	68fb      	ldr	r3, [r7, #12]
}
90001122:	4618      	mov	r0, r3
90001124:	3710      	adds	r7, #16
90001126:	46bd      	mov	sp, r7
90001128:	bd80      	pop	{r7, pc}

9000112a <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000112a:	b580      	push	{r7, lr}
9000112c:	b084      	sub	sp, #16
9000112e:	af00      	add	r7, sp, #0
90001130:	6078      	str	r0, [r7, #4]
90001132:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001134:	f04f 33ff 	mov.w	r3, #4294967295
90001138:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000113a:	683b      	ldr	r3, [r7, #0]
9000113c:	681b      	ldr	r3, [r3, #0]
9000113e:	4619      	mov	r1, r3
90001140:	6878      	ldr	r0, [r7, #4]
90001142:	f000 f831 	bl	900011a8 <MT48LC4M32B2_ClockEnable>
90001146:	4603      	mov	r3, r0
90001148:	2b00      	cmp	r3, #0
9000114a:	d128      	bne.n	9000119e <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
9000114c:	2001      	movs	r0, #1
9000114e:	f000 f8e1 	bl	90001314 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001152:	683b      	ldr	r3, [r7, #0]
90001154:	681b      	ldr	r3, [r3, #0]
90001156:	4619      	mov	r1, r3
90001158:	6878      	ldr	r0, [r7, #4]
9000115a:	f000 f849 	bl	900011f0 <MT48LC4M32B2_Precharge>
9000115e:	4603      	mov	r3, r0
90001160:	2b00      	cmp	r3, #0
90001162:	d11c      	bne.n	9000119e <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90001164:	683b      	ldr	r3, [r7, #0]
90001166:	6819      	ldr	r1, [r3, #0]
90001168:	683b      	ldr	r3, [r7, #0]
9000116a:	685b      	ldr	r3, [r3, #4]
9000116c:	461a      	mov	r2, r3
9000116e:	6878      	ldr	r0, [r7, #4]
90001170:	f000 f896 	bl	900012a0 <MT48LC4M32B2_RefreshMode>
90001174:	4603      	mov	r3, r0
90001176:	2b00      	cmp	r3, #0
90001178:	d111      	bne.n	9000119e <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
9000117a:	6839      	ldr	r1, [r7, #0]
9000117c:	6878      	ldr	r0, [r7, #4]
9000117e:	f000 f85b 	bl	90001238 <MT48LC4M32B2_ModeRegConfig>
90001182:	4603      	mov	r3, r0
90001184:	2b00      	cmp	r3, #0
90001186:	d10a      	bne.n	9000119e <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001188:	683b      	ldr	r3, [r7, #0]
9000118a:	689b      	ldr	r3, [r3, #8]
9000118c:	4619      	mov	r1, r3
9000118e:	6878      	ldr	r0, [r7, #4]
90001190:	f000 f8ac 	bl	900012ec <MT48LC4M32B2_RefreshRate>
90001194:	4603      	mov	r3, r0
90001196:	2b00      	cmp	r3, #0
90001198:	d101      	bne.n	9000119e <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
9000119a:	2300      	movs	r3, #0
9000119c:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000119e:	68fb      	ldr	r3, [r7, #12]
}
900011a0:	4618      	mov	r0, r3
900011a2:	3710      	adds	r7, #16
900011a4:	46bd      	mov	sp, r7
900011a6:	bd80      	pop	{r7, pc}

900011a8 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900011a8:	b580      	push	{r7, lr}
900011aa:	b082      	sub	sp, #8
900011ac:	af00      	add	r7, sp, #0
900011ae:	6078      	str	r0, [r7, #4]
900011b0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900011b2:	4b0e      	ldr	r3, [pc, #56]	@ (900011ec <MT48LC4M32B2_ClockEnable+0x44>)
900011b4:	2201      	movs	r2, #1
900011b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900011b8:	4a0c      	ldr	r2, [pc, #48]	@ (900011ec <MT48LC4M32B2_ClockEnable+0x44>)
900011ba:	683b      	ldr	r3, [r7, #0]
900011bc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900011be:	4b0b      	ldr	r3, [pc, #44]	@ (900011ec <MT48LC4M32B2_ClockEnable+0x44>)
900011c0:	2201      	movs	r2, #1
900011c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900011c4:	4b09      	ldr	r3, [pc, #36]	@ (900011ec <MT48LC4M32B2_ClockEnable+0x44>)
900011c6:	2200      	movs	r2, #0
900011c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900011ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900011ce:	4907      	ldr	r1, [pc, #28]	@ (900011ec <MT48LC4M32B2_ClockEnable+0x44>)
900011d0:	6878      	ldr	r0, [r7, #4]
900011d2:	f008 f92d 	bl	90009430 <HAL_SDRAM_SendCommand>
900011d6:	4603      	mov	r3, r0
900011d8:	2b00      	cmp	r3, #0
900011da:	d002      	beq.n	900011e2 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900011dc:	f04f 33ff 	mov.w	r3, #4294967295
900011e0:	e000      	b.n	900011e4 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900011e2:	2300      	movs	r3, #0
  }
}
900011e4:	4618      	mov	r0, r3
900011e6:	3708      	adds	r7, #8
900011e8:	46bd      	mov	sp, r7
900011ea:	bd80      	pop	{r7, pc}
900011ec:	2000062c 	.word	0x2000062c

900011f0 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900011f0:	b580      	push	{r7, lr}
900011f2:	b082      	sub	sp, #8
900011f4:	af00      	add	r7, sp, #0
900011f6:	6078      	str	r0, [r7, #4]
900011f8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900011fa:	4b0e      	ldr	r3, [pc, #56]	@ (90001234 <MT48LC4M32B2_Precharge+0x44>)
900011fc:	2202      	movs	r2, #2
900011fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001200:	4a0c      	ldr	r2, [pc, #48]	@ (90001234 <MT48LC4M32B2_Precharge+0x44>)
90001202:	683b      	ldr	r3, [r7, #0]
90001204:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001206:	4b0b      	ldr	r3, [pc, #44]	@ (90001234 <MT48LC4M32B2_Precharge+0x44>)
90001208:	2201      	movs	r2, #1
9000120a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000120c:	4b09      	ldr	r3, [pc, #36]	@ (90001234 <MT48LC4M32B2_Precharge+0x44>)
9000120e:	2200      	movs	r2, #0
90001210:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001216:	4907      	ldr	r1, [pc, #28]	@ (90001234 <MT48LC4M32B2_Precharge+0x44>)
90001218:	6878      	ldr	r0, [r7, #4]
9000121a:	f008 f909 	bl	90009430 <HAL_SDRAM_SendCommand>
9000121e:	4603      	mov	r3, r0
90001220:	2b00      	cmp	r3, #0
90001222:	d002      	beq.n	9000122a <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001224:	f04f 33ff 	mov.w	r3, #4294967295
90001228:	e000      	b.n	9000122c <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000122a:	2300      	movs	r3, #0
  }
}
9000122c:	4618      	mov	r0, r3
9000122e:	3708      	adds	r7, #8
90001230:	46bd      	mov	sp, r7
90001232:	bd80      	pop	{r7, pc}
90001234:	2000062c 	.word	0x2000062c

90001238 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001238:	b580      	push	{r7, lr}
9000123a:	b084      	sub	sp, #16
9000123c:	af00      	add	r7, sp, #0
9000123e:	6078      	str	r0, [r7, #4]
90001240:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001242:	683b      	ldr	r3, [r7, #0]
90001244:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90001246:	683b      	ldr	r3, [r7, #0]
90001248:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000124a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
9000124c:	683b      	ldr	r3, [r7, #0]
9000124e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
90001250:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
90001252:	683b      	ldr	r3, [r7, #0]
90001254:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001256:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001258:	683b      	ldr	r3, [r7, #0]
9000125a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000125c:	4313      	orrs	r3, r2
9000125e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90001260:	4b0e      	ldr	r3, [pc, #56]	@ (9000129c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001262:	2204      	movs	r2, #4
90001264:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001266:	683b      	ldr	r3, [r7, #0]
90001268:	681b      	ldr	r3, [r3, #0]
9000126a:	4a0c      	ldr	r2, [pc, #48]	@ (9000129c <MT48LC4M32B2_ModeRegConfig+0x64>)
9000126c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000126e:	4b0b      	ldr	r3, [pc, #44]	@ (9000129c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001270:	2201      	movs	r2, #1
90001272:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001274:	4a09      	ldr	r2, [pc, #36]	@ (9000129c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001276:	68fb      	ldr	r3, [r7, #12]
90001278:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000127a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000127e:	4907      	ldr	r1, [pc, #28]	@ (9000129c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001280:	6878      	ldr	r0, [r7, #4]
90001282:	f008 f8d5 	bl	90009430 <HAL_SDRAM_SendCommand>
90001286:	4603      	mov	r3, r0
90001288:	2b00      	cmp	r3, #0
9000128a:	d002      	beq.n	90001292 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
9000128c:	f04f 33ff 	mov.w	r3, #4294967295
90001290:	e000      	b.n	90001294 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001292:	2300      	movs	r3, #0
  }
}
90001294:	4618      	mov	r0, r3
90001296:	3710      	adds	r7, #16
90001298:	46bd      	mov	sp, r7
9000129a:	bd80      	pop	{r7, pc}
9000129c:	2000062c 	.word	0x2000062c

900012a0 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
900012a0:	b580      	push	{r7, lr}
900012a2:	b084      	sub	sp, #16
900012a4:	af00      	add	r7, sp, #0
900012a6:	60f8      	str	r0, [r7, #12]
900012a8:	60b9      	str	r1, [r7, #8]
900012aa:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
900012ac:	4a0e      	ldr	r2, [pc, #56]	@ (900012e8 <MT48LC4M32B2_RefreshMode+0x48>)
900012ae:	687b      	ldr	r3, [r7, #4]
900012b0:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
900012b2:	4a0d      	ldr	r2, [pc, #52]	@ (900012e8 <MT48LC4M32B2_RefreshMode+0x48>)
900012b4:	68bb      	ldr	r3, [r7, #8]
900012b6:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
900012b8:	4b0b      	ldr	r3, [pc, #44]	@ (900012e8 <MT48LC4M32B2_RefreshMode+0x48>)
900012ba:	2208      	movs	r2, #8
900012bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900012be:	4b0a      	ldr	r3, [pc, #40]	@ (900012e8 <MT48LC4M32B2_RefreshMode+0x48>)
900012c0:	2200      	movs	r2, #0
900012c2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900012c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900012c8:	4907      	ldr	r1, [pc, #28]	@ (900012e8 <MT48LC4M32B2_RefreshMode+0x48>)
900012ca:	68f8      	ldr	r0, [r7, #12]
900012cc:	f008 f8b0 	bl	90009430 <HAL_SDRAM_SendCommand>
900012d0:	4603      	mov	r3, r0
900012d2:	2b00      	cmp	r3, #0
900012d4:	d002      	beq.n	900012dc <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
900012d6:	f04f 33ff 	mov.w	r3, #4294967295
900012da:	e000      	b.n	900012de <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
900012dc:	2300      	movs	r3, #0
  }
}
900012de:	4618      	mov	r0, r3
900012e0:	3710      	adds	r7, #16
900012e2:	46bd      	mov	sp, r7
900012e4:	bd80      	pop	{r7, pc}
900012e6:	bf00      	nop
900012e8:	2000062c 	.word	0x2000062c

900012ec <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
900012ec:	b580      	push	{r7, lr}
900012ee:	b082      	sub	sp, #8
900012f0:	af00      	add	r7, sp, #0
900012f2:	6078      	str	r0, [r7, #4]
900012f4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900012f6:	6839      	ldr	r1, [r7, #0]
900012f8:	6878      	ldr	r0, [r7, #4]
900012fa:	f008 f8ce 	bl	9000949a <HAL_SDRAM_ProgramRefreshRate>
900012fe:	4603      	mov	r3, r0
90001300:	2b00      	cmp	r3, #0
90001302:	d002      	beq.n	9000130a <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001304:	f04f 33ff 	mov.w	r3, #4294967295
90001308:	e000      	b.n	9000130c <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000130a:	2300      	movs	r3, #0
  }
}
9000130c:	4618      	mov	r0, r3
9000130e:	3708      	adds	r7, #8
90001310:	46bd      	mov	sp, r7
90001312:	bd80      	pop	{r7, pc}

90001314 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001314:	b580      	push	{r7, lr}
90001316:	b084      	sub	sp, #16
90001318:	af00      	add	r7, sp, #0
9000131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
9000131c:	f001 fd88 	bl	90002e30 <HAL_GetTick>
90001320:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
90001322:	bf00      	nop
90001324:	f001 fd84 	bl	90002e30 <HAL_GetTick>
90001328:	4602      	mov	r2, r0
9000132a:	68fb      	ldr	r3, [r7, #12]
9000132c:	1ad3      	subs	r3, r2, r3
9000132e:	687a      	ldr	r2, [r7, #4]
90001330:	429a      	cmp	r2, r3
90001332:	d8f7      	bhi.n	90001324 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001334:	2300      	movs	r3, #0
}
90001336:	4618      	mov	r0, r3
90001338:	3710      	adds	r7, #16
9000133a:	46bd      	mov	sp, r7
9000133c:	bd80      	pop	{r7, pc}
	...

90001340 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
90001340:	b580      	push	{r7, lr}
90001342:	b08a      	sub	sp, #40	@ 0x28
90001344:	af00      	add	r7, sp, #0
90001346:	4603      	mov	r3, r0
90001348:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
9000134a:	2300      	movs	r3, #0
9000134c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
9000134e:	79fb      	ldrb	r3, [r7, #7]
90001350:	2b00      	cmp	r3, #0
90001352:	d10f      	bne.n	90001374 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90001354:	4b26      	ldr	r3, [pc, #152]	@ (900013f0 <BSP_LED_Init+0xb0>)
90001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000135a:	4a25      	ldr	r2, [pc, #148]	@ (900013f0 <BSP_LED_Init+0xb0>)
9000135c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90001360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001364:	4b22      	ldr	r3, [pc, #136]	@ (900013f0 <BSP_LED_Init+0xb0>)
90001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000136a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000136e:	60fb      	str	r3, [r7, #12]
90001370:	68fb      	ldr	r3, [r7, #12]
90001372:	e015      	b.n	900013a0 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001374:	79fb      	ldrb	r3, [r7, #7]
90001376:	2b01      	cmp	r3, #1
90001378:	d10f      	bne.n	9000139a <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
9000137a:	4b1d      	ldr	r3, [pc, #116]	@ (900013f0 <BSP_LED_Init+0xb0>)
9000137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001380:	4a1b      	ldr	r2, [pc, #108]	@ (900013f0 <BSP_LED_Init+0xb0>)
90001382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000138a:	4b19      	ldr	r3, [pc, #100]	@ (900013f0 <BSP_LED_Init+0xb0>)
9000138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001394:	60bb      	str	r3, [r7, #8]
90001396:	68bb      	ldr	r3, [r7, #8]
90001398:	e002      	b.n	900013a0 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000139a:	f06f 0301 	mvn.w	r3, #1
9000139e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
900013a0:	79fb      	ldrb	r3, [r7, #7]
900013a2:	4a14      	ldr	r2, [pc, #80]	@ (900013f4 <BSP_LED_Init+0xb4>)
900013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900013a8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900013aa:	2301      	movs	r3, #1
900013ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
900013ae:	2301      	movs	r3, #1
900013b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900013b2:	2303      	movs	r3, #3
900013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
900013b6:	79fb      	ldrb	r3, [r7, #7]
900013b8:	4a0f      	ldr	r2, [pc, #60]	@ (900013f8 <BSP_LED_Init+0xb8>)
900013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900013be:	f107 0210 	add.w	r2, r7, #16
900013c2:	4611      	mov	r1, r2
900013c4:	4618      	mov	r0, r3
900013c6:	f002 f9dd 	bl	90003784 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
900013ca:	79fb      	ldrb	r3, [r7, #7]
900013cc:	4a0a      	ldr	r2, [pc, #40]	@ (900013f8 <BSP_LED_Init+0xb8>)
900013ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
900013d2:	79fb      	ldrb	r3, [r7, #7]
900013d4:	4a07      	ldr	r2, [pc, #28]	@ (900013f4 <BSP_LED_Init+0xb4>)
900013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900013da:	b29b      	uxth	r3, r3
900013dc:	2201      	movs	r2, #1
900013de:	4619      	mov	r1, r3
900013e0:	f002 fb98 	bl	90003b14 <HAL_GPIO_WritePin>
  return ret;
900013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
900013e6:	4618      	mov	r0, r3
900013e8:	3728      	adds	r7, #40	@ 0x28
900013ea:	46bd      	mov	sp, r7
900013ec:	bd80      	pop	{r7, pc}
900013ee:	bf00      	nop
900013f0:	58024400 	.word	0x58024400
900013f4:	9000ccf8 	.word	0x9000ccf8
900013f8:	20000000 	.word	0x20000000

900013fc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
900013fc:	b580      	push	{r7, lr}
900013fe:	b082      	sub	sp, #8
90001400:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001402:	2300      	movs	r3, #0
90001404:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001406:	4b16      	ldr	r3, [pc, #88]	@ (90001460 <BSP_I2C4_Init+0x64>)
90001408:	4a16      	ldr	r2, [pc, #88]	@ (90001464 <BSP_I2C4_Init+0x68>)
9000140a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
9000140c:	4b16      	ldr	r3, [pc, #88]	@ (90001468 <BSP_I2C4_Init+0x6c>)
9000140e:	681b      	ldr	r3, [r3, #0]
90001410:	2b00      	cmp	r3, #0
90001412:	d11f      	bne.n	90001454 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001414:	4b14      	ldr	r3, [pc, #80]	@ (90001468 <BSP_I2C4_Init+0x6c>)
90001416:	681b      	ldr	r3, [r3, #0]
90001418:	3301      	adds	r3, #1
9000141a:	4a13      	ldr	r2, [pc, #76]	@ (90001468 <BSP_I2C4_Init+0x6c>)
9000141c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
9000141e:	4810      	ldr	r0, [pc, #64]	@ (90001460 <BSP_I2C4_Init+0x64>)
90001420:	f004 faf8 	bl	90005a14 <HAL_I2C_GetState>
90001424:	4603      	mov	r3, r0
90001426:	2b00      	cmp	r3, #0
90001428:	d114      	bne.n	90001454 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
9000142a:	480d      	ldr	r0, [pc, #52]	@ (90001460 <BSP_I2C4_Init+0x64>)
9000142c:	f000 fb06 	bl	90001a3c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001430:	f006 f976 	bl	90007720 <HAL_RCC_GetPCLK2Freq>
90001434:	4603      	mov	r3, r0
90001436:	490d      	ldr	r1, [pc, #52]	@ (9000146c <BSP_I2C4_Init+0x70>)
90001438:	4618      	mov	r0, r3
9000143a:	f000 f889 	bl	90001550 <I2C_GetTiming>
9000143e:	4603      	mov	r3, r0
90001440:	4619      	mov	r1, r3
90001442:	4807      	ldr	r0, [pc, #28]	@ (90001460 <BSP_I2C4_Init+0x64>)
90001444:	f000 f814 	bl	90001470 <MX_I2C4_Init>
90001448:	4603      	mov	r3, r0
9000144a:	2b00      	cmp	r3, #0
9000144c:	d002      	beq.n	90001454 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
9000144e:	f06f 0307 	mvn.w	r3, #7
90001452:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001454:	687b      	ldr	r3, [r7, #4]
}
90001456:	4618      	mov	r0, r3
90001458:	3708      	adds	r7, #8
9000145a:	46bd      	mov	sp, r7
9000145c:	bd80      	pop	{r7, pc}
9000145e:	bf00      	nop
90001460:	20001044 	.word	0x20001044
90001464:	58001c00 	.word	0x58001c00
90001468:	2000063c 	.word	0x2000063c
9000146c:	000186a0 	.word	0x000186a0

90001470 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001470:	b580      	push	{r7, lr}
90001472:	b084      	sub	sp, #16
90001474:	af00      	add	r7, sp, #0
90001476:	6078      	str	r0, [r7, #4]
90001478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
9000147a:	2300      	movs	r3, #0
9000147c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000147e:	687b      	ldr	r3, [r7, #4]
90001480:	683a      	ldr	r2, [r7, #0]
90001482:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001484:	687b      	ldr	r3, [r7, #4]
90001486:	2200      	movs	r2, #0
90001488:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000148a:	687b      	ldr	r3, [r7, #4]
9000148c:	2201      	movs	r2, #1
9000148e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001490:	687b      	ldr	r3, [r7, #4]
90001492:	2200      	movs	r2, #0
90001494:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001496:	687b      	ldr	r3, [r7, #4]
90001498:	2200      	movs	r2, #0
9000149a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
9000149c:	687b      	ldr	r3, [r7, #4]
9000149e:	2200      	movs	r2, #0
900014a0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
900014a2:	687b      	ldr	r3, [r7, #4]
900014a4:	2200      	movs	r2, #0
900014a6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900014a8:	687b      	ldr	r3, [r7, #4]
900014aa:	2200      	movs	r2, #0
900014ac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
900014ae:	6878      	ldr	r0, [r7, #4]
900014b0:	f004 f8f0 	bl	90005694 <HAL_I2C_Init>
900014b4:	4603      	mov	r3, r0
900014b6:	2b00      	cmp	r3, #0
900014b8:	d002      	beq.n	900014c0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
900014ba:	2301      	movs	r3, #1
900014bc:	73fb      	strb	r3, [r7, #15]
900014be:	e014      	b.n	900014ea <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
900014c0:	2300      	movs	r3, #0
900014c2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
900014c4:	68b9      	ldr	r1, [r7, #8]
900014c6:	6878      	ldr	r0, [r7, #4]
900014c8:	f004 fd2c 	bl	90005f24 <HAL_I2CEx_ConfigAnalogFilter>
900014cc:	4603      	mov	r3, r0
900014ce:	2b00      	cmp	r3, #0
900014d0:	d002      	beq.n	900014d8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
900014d2:	2301      	movs	r3, #1
900014d4:	73fb      	strb	r3, [r7, #15]
900014d6:	e008      	b.n	900014ea <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900014d8:	2100      	movs	r1, #0
900014da:	6878      	ldr	r0, [r7, #4]
900014dc:	f004 fd6d 	bl	90005fba <HAL_I2CEx_ConfigDigitalFilter>
900014e0:	4603      	mov	r3, r0
900014e2:	2b00      	cmp	r3, #0
900014e4:	d001      	beq.n	900014ea <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
900014e6:	2301      	movs	r3, #1
900014e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
900014ea:	7bfb      	ldrb	r3, [r7, #15]
}
900014ec:	4618      	mov	r0, r3
900014ee:	3710      	adds	r7, #16
900014f0:	46bd      	mov	sp, r7
900014f2:	bd80      	pop	{r7, pc}

900014f4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
900014f4:	b580      	push	{r7, lr}
900014f6:	b088      	sub	sp, #32
900014f8:	af02      	add	r7, sp, #8
900014fa:	60ba      	str	r2, [r7, #8]
900014fc:	461a      	mov	r2, r3
900014fe:	4603      	mov	r3, r0
90001500:	81fb      	strh	r3, [r7, #14]
90001502:	460b      	mov	r3, r1
90001504:	81bb      	strh	r3, [r7, #12]
90001506:	4613      	mov	r3, r2
90001508:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
9000150a:	89b9      	ldrh	r1, [r7, #12]
9000150c:	89f8      	ldrh	r0, [r7, #14]
9000150e:	88fb      	ldrh	r3, [r7, #6]
90001510:	9300      	str	r3, [sp, #0]
90001512:	68bb      	ldr	r3, [r7, #8]
90001514:	2201      	movs	r2, #1
90001516:	f000 fafd 	bl	90001b14 <I2C4_ReadReg>
9000151a:	4603      	mov	r3, r0
9000151c:	2b00      	cmp	r3, #0
9000151e:	d102      	bne.n	90001526 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001520:	2300      	movs	r3, #0
90001522:	617b      	str	r3, [r7, #20]
90001524:	e00c      	b.n	90001540 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001526:	4809      	ldr	r0, [pc, #36]	@ (9000154c <BSP_I2C4_ReadReg+0x58>)
90001528:	f004 fa82 	bl	90005a30 <HAL_I2C_GetError>
9000152c:	4603      	mov	r3, r0
9000152e:	2b04      	cmp	r3, #4
90001530:	d103      	bne.n	9000153a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001532:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001536:	617b      	str	r3, [r7, #20]
90001538:	e002      	b.n	90001540 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
9000153a:	f06f 0303 	mvn.w	r3, #3
9000153e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001540:	697b      	ldr	r3, [r7, #20]
}
90001542:	4618      	mov	r0, r3
90001544:	3718      	adds	r7, #24
90001546:	46bd      	mov	sp, r7
90001548:	bd80      	pop	{r7, pc}
9000154a:	bf00      	nop
9000154c:	20001044 	.word	0x20001044

90001550 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001550:	b580      	push	{r7, lr}
90001552:	b086      	sub	sp, #24
90001554:	af00      	add	r7, sp, #0
90001556:	6078      	str	r0, [r7, #4]
90001558:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
9000155a:	2300      	movs	r3, #0
9000155c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
9000155e:	687b      	ldr	r3, [r7, #4]
90001560:	2b00      	cmp	r3, #0
90001562:	d06b      	beq.n	9000163c <I2C_GetTiming+0xec>
90001564:	683b      	ldr	r3, [r7, #0]
90001566:	2b00      	cmp	r3, #0
90001568:	d068      	beq.n	9000163c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
9000156a:	2300      	movs	r3, #0
9000156c:	613b      	str	r3, [r7, #16]
9000156e:	e060      	b.n	90001632 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001570:	4a35      	ldr	r2, [pc, #212]	@ (90001648 <I2C_GetTiming+0xf8>)
90001572:	693b      	ldr	r3, [r7, #16]
90001574:	212c      	movs	r1, #44	@ 0x2c
90001576:	fb01 f303 	mul.w	r3, r1, r3
9000157a:	4413      	add	r3, r2
9000157c:	3304      	adds	r3, #4
9000157e:	681b      	ldr	r3, [r3, #0]
90001580:	683a      	ldr	r2, [r7, #0]
90001582:	429a      	cmp	r2, r3
90001584:	d352      	bcc.n	9000162c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001586:	4a30      	ldr	r2, [pc, #192]	@ (90001648 <I2C_GetTiming+0xf8>)
90001588:	693b      	ldr	r3, [r7, #16]
9000158a:	212c      	movs	r1, #44	@ 0x2c
9000158c:	fb01 f303 	mul.w	r3, r1, r3
90001590:	4413      	add	r3, r2
90001592:	3308      	adds	r3, #8
90001594:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001596:	683a      	ldr	r2, [r7, #0]
90001598:	429a      	cmp	r2, r3
9000159a:	d847      	bhi.n	9000162c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
9000159c:	6939      	ldr	r1, [r7, #16]
9000159e:	6878      	ldr	r0, [r7, #4]
900015a0:	f000 f856 	bl	90001650 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
900015a4:	6939      	ldr	r1, [r7, #16]
900015a6:	6878      	ldr	r0, [r7, #4]
900015a8:	f000 f940 	bl	9000182c <I2C_Compute_SCLL_SCLH>
900015ac:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
900015ae:	68fb      	ldr	r3, [r7, #12]
900015b0:	2b7f      	cmp	r3, #127	@ 0x7f
900015b2:	d842      	bhi.n	9000163a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900015b4:	4925      	ldr	r1, [pc, #148]	@ (9000164c <I2C_GetTiming+0xfc>)
900015b6:	68fa      	ldr	r2, [r7, #12]
900015b8:	4613      	mov	r3, r2
900015ba:	009b      	lsls	r3, r3, #2
900015bc:	4413      	add	r3, r2
900015be:	009b      	lsls	r3, r3, #2
900015c0:	440b      	add	r3, r1
900015c2:	681b      	ldr	r3, [r3, #0]
900015c4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900015c6:	4821      	ldr	r0, [pc, #132]	@ (9000164c <I2C_GetTiming+0xfc>)
900015c8:	68fa      	ldr	r2, [r7, #12]
900015ca:	4613      	mov	r3, r2
900015cc:	009b      	lsls	r3, r3, #2
900015ce:	4413      	add	r3, r2
900015d0:	009b      	lsls	r3, r3, #2
900015d2:	4403      	add	r3, r0
900015d4:	3304      	adds	r3, #4
900015d6:	681b      	ldr	r3, [r3, #0]
900015d8:	051b      	lsls	r3, r3, #20
900015da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900015de:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900015e0:	481a      	ldr	r0, [pc, #104]	@ (9000164c <I2C_GetTiming+0xfc>)
900015e2:	68fa      	ldr	r2, [r7, #12]
900015e4:	4613      	mov	r3, r2
900015e6:	009b      	lsls	r3, r3, #2
900015e8:	4413      	add	r3, r2
900015ea:	009b      	lsls	r3, r3, #2
900015ec:	4403      	add	r3, r0
900015ee:	3308      	adds	r3, #8
900015f0:	681b      	ldr	r3, [r3, #0]
900015f2:	041b      	lsls	r3, r3, #16
900015f4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900015f8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900015fa:	4814      	ldr	r0, [pc, #80]	@ (9000164c <I2C_GetTiming+0xfc>)
900015fc:	68fa      	ldr	r2, [r7, #12]
900015fe:	4613      	mov	r3, r2
90001600:	009b      	lsls	r3, r3, #2
90001602:	4413      	add	r3, r2
90001604:	009b      	lsls	r3, r3, #2
90001606:	4403      	add	r3, r0
90001608:	330c      	adds	r3, #12
9000160a:	681b      	ldr	r3, [r3, #0]
9000160c:	021b      	lsls	r3, r3, #8
9000160e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001610:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001612:	480e      	ldr	r0, [pc, #56]	@ (9000164c <I2C_GetTiming+0xfc>)
90001614:	68fa      	ldr	r2, [r7, #12]
90001616:	4613      	mov	r3, r2
90001618:	009b      	lsls	r3, r3, #2
9000161a:	4413      	add	r3, r2
9000161c:	009b      	lsls	r3, r3, #2
9000161e:	4403      	add	r3, r0
90001620:	3310      	adds	r3, #16
90001622:	681b      	ldr	r3, [r3, #0]
90001624:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001626:	430b      	orrs	r3, r1
90001628:	617b      	str	r3, [r7, #20]
        }
        break;
9000162a:	e006      	b.n	9000163a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
9000162c:	693b      	ldr	r3, [r7, #16]
9000162e:	3301      	adds	r3, #1
90001630:	613b      	str	r3, [r7, #16]
90001632:	693b      	ldr	r3, [r7, #16]
90001634:	2b02      	cmp	r3, #2
90001636:	d99b      	bls.n	90001570 <I2C_GetTiming+0x20>
90001638:	e000      	b.n	9000163c <I2C_GetTiming+0xec>
        break;
9000163a:	bf00      	nop
      }
    }
  }

  return ret;
9000163c:	697b      	ldr	r3, [r7, #20]
}
9000163e:	4618      	mov	r0, r3
90001640:	3718      	adds	r7, #24
90001642:	46bd      	mov	sp, r7
90001644:	bd80      	pop	{r7, pc}
90001646:	bf00      	nop
90001648:	9000cd00 	.word	0x9000cd00
9000164c:	20000640 	.word	0x20000640

90001650 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001650:	b480      	push	{r7}
90001652:	b08f      	sub	sp, #60	@ 0x3c
90001654:	af00      	add	r7, sp, #0
90001656:	6078      	str	r0, [r7, #4]
90001658:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
9000165a:	2310      	movs	r3, #16
9000165c:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
9000165e:	687b      	ldr	r3, [r7, #4]
90001660:	085a      	lsrs	r2, r3, #1
90001662:	4b6e      	ldr	r3, [pc, #440]	@ (9000181c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001664:	4413      	add	r3, r2
90001666:	687a      	ldr	r2, [r7, #4]
90001668:	fbb3 f3f2 	udiv	r3, r3, r2
9000166c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
9000166e:	2332      	movs	r3, #50	@ 0x32
90001670:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001672:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001676:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001678:	4a69      	ldr	r2, [pc, #420]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000167a:	683b      	ldr	r3, [r7, #0]
9000167c:	212c      	movs	r1, #44	@ 0x2c
9000167e:	fb01 f303 	mul.w	r3, r1, r3
90001682:	4413      	add	r3, r2
90001684:	3324      	adds	r3, #36	@ 0x24
90001686:	681b      	ldr	r3, [r3, #0]
90001688:	4618      	mov	r0, r3
9000168a:	4a65      	ldr	r2, [pc, #404]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000168c:	683b      	ldr	r3, [r7, #0]
9000168e:	212c      	movs	r1, #44	@ 0x2c
90001690:	fb01 f303 	mul.w	r3, r1, r3
90001694:	4413      	add	r3, r2
90001696:	330c      	adds	r3, #12
90001698:	681b      	ldr	r3, [r3, #0]
9000169a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000169c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
9000169e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900016a0:	495f      	ldr	r1, [pc, #380]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900016a2:	683b      	ldr	r3, [r7, #0]
900016a4:	202c      	movs	r0, #44	@ 0x2c
900016a6:	fb00 f303 	mul.w	r3, r0, r3
900016aa:	440b      	add	r3, r1
900016ac:	3328      	adds	r3, #40	@ 0x28
900016ae:	681b      	ldr	r3, [r3, #0]
900016b0:	3303      	adds	r3, #3
900016b2:	69f9      	ldr	r1, [r7, #28]
900016b4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900016b8:	1ad3      	subs	r3, r2, r3
900016ba:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900016bc:	4a58      	ldr	r2, [pc, #352]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900016be:	683b      	ldr	r3, [r7, #0]
900016c0:	212c      	movs	r1, #44	@ 0x2c
900016c2:	fb01 f303 	mul.w	r3, r1, r3
900016c6:	4413      	add	r3, r2
900016c8:	3310      	adds	r3, #16
900016ca:	681b      	ldr	r3, [r3, #0]
900016cc:	4618      	mov	r0, r3
900016ce:	4a54      	ldr	r2, [pc, #336]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900016d0:	683b      	ldr	r3, [r7, #0]
900016d2:	212c      	movs	r1, #44	@ 0x2c
900016d4:	fb01 f303 	mul.w	r3, r1, r3
900016d8:	4413      	add	r3, r2
900016da:	3320      	adds	r3, #32
900016dc:	681b      	ldr	r3, [r3, #0]
900016de:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900016e0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900016e2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900016e4:	494e      	ldr	r1, [pc, #312]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900016e6:	683b      	ldr	r3, [r7, #0]
900016e8:	202c      	movs	r0, #44	@ 0x2c
900016ea:	fb00 f303 	mul.w	r3, r0, r3
900016ee:	440b      	add	r3, r1
900016f0:	3328      	adds	r3, #40	@ 0x28
900016f2:	681b      	ldr	r3, [r3, #0]
900016f4:	3304      	adds	r3, #4
900016f6:	69f9      	ldr	r1, [r7, #28]
900016f8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900016fc:	1ad3      	subs	r3, r2, r3
900016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001700:	4a47      	ldr	r2, [pc, #284]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001702:	683b      	ldr	r3, [r7, #0]
90001704:	212c      	movs	r1, #44	@ 0x2c
90001706:	fb01 f303 	mul.w	r3, r1, r3
9000170a:	4413      	add	r3, r2
9000170c:	3320      	adds	r3, #32
9000170e:	681b      	ldr	r3, [r3, #0]
90001710:	4618      	mov	r0, r3
90001712:	4a43      	ldr	r2, [pc, #268]	@ (90001820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001714:	683b      	ldr	r3, [r7, #0]
90001716:	212c      	movs	r1, #44	@ 0x2c
90001718:	fb01 f303 	mul.w	r3, r1, r3
9000171c:	4413      	add	r3, r2
9000171e:	3314      	adds	r3, #20
90001720:	681b      	ldr	r3, [r3, #0]
90001722:	4403      	add	r3, r0
90001724:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001728:	2b00      	cmp	r3, #0
9000172a:	dc01      	bgt.n	90001730 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
9000172c:	2300      	movs	r3, #0
9000172e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001732:	2b00      	cmp	r3, #0
90001734:	dc01      	bgt.n	9000173a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001736:	2300      	movs	r3, #0
90001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
9000173a:	2300      	movs	r3, #0
9000173c:	62bb      	str	r3, [r7, #40]	@ 0x28
9000173e:	e062      	b.n	90001806 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001740:	2300      	movs	r3, #0
90001742:	627b      	str	r3, [r7, #36]	@ 0x24
90001744:	e059      	b.n	900017fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001748:	3301      	adds	r3, #1
9000174a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000174c:	3201      	adds	r2, #1
9000174e:	fb03 f202 	mul.w	r2, r3, r2
90001752:	69fb      	ldr	r3, [r7, #28]
90001754:	fb02 f303 	mul.w	r3, r2, r3
90001758:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
9000175a:	693b      	ldr	r3, [r7, #16]
9000175c:	68fa      	ldr	r2, [r7, #12]
9000175e:	429a      	cmp	r2, r3
90001760:	d348      	bcc.n	900017f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001762:	2300      	movs	r3, #0
90001764:	623b      	str	r3, [r7, #32]
90001766:	e042      	b.n	900017ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000176a:	3301      	adds	r3, #1
9000176c:	6a3a      	ldr	r2, [r7, #32]
9000176e:	fb03 f202 	mul.w	r2, r3, r2
90001772:	69fb      	ldr	r3, [r7, #28]
90001774:	fb02 f303 	mul.w	r3, r2, r3
90001778:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000177c:	68ba      	ldr	r2, [r7, #8]
9000177e:	429a      	cmp	r2, r3
90001780:	d332      	bcc.n	900017e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001784:	68ba      	ldr	r2, [r7, #8]
90001786:	429a      	cmp	r2, r3
90001788:	d82e      	bhi.n	900017e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
9000178a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000178c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000178e:	429a      	cmp	r2, r3
90001790:	d02a      	beq.n	900017e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001792:	4b24      	ldr	r3, [pc, #144]	@ (90001824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001794:	681a      	ldr	r2, [r3, #0]
90001796:	4924      	ldr	r1, [pc, #144]	@ (90001828 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001798:	4613      	mov	r3, r2
9000179a:	009b      	lsls	r3, r3, #2
9000179c:	4413      	add	r3, r2
9000179e:	009b      	lsls	r3, r3, #2
900017a0:	440b      	add	r3, r1
900017a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900017a4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900017a6:	4b1f      	ldr	r3, [pc, #124]	@ (90001824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900017a8:	681a      	ldr	r2, [r3, #0]
900017aa:	491f      	ldr	r1, [pc, #124]	@ (90001828 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900017ac:	4613      	mov	r3, r2
900017ae:	009b      	lsls	r3, r3, #2
900017b0:	4413      	add	r3, r2
900017b2:	009b      	lsls	r3, r3, #2
900017b4:	440b      	add	r3, r1
900017b6:	3304      	adds	r3, #4
900017b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900017ba:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900017bc:	4b19      	ldr	r3, [pc, #100]	@ (90001824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900017be:	681a      	ldr	r2, [r3, #0]
900017c0:	4919      	ldr	r1, [pc, #100]	@ (90001828 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900017c2:	4613      	mov	r3, r2
900017c4:	009b      	lsls	r3, r3, #2
900017c6:	4413      	add	r3, r2
900017c8:	009b      	lsls	r3, r3, #2
900017ca:	440b      	add	r3, r1
900017cc:	3308      	adds	r3, #8
900017ce:	6a3a      	ldr	r2, [r7, #32]
900017d0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
900017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900017d4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
900017d6:	4b13      	ldr	r3, [pc, #76]	@ (90001824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900017d8:	681b      	ldr	r3, [r3, #0]
900017da:	3301      	adds	r3, #1
900017dc:	4a11      	ldr	r2, [pc, #68]	@ (90001824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900017de:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900017e0:	4b10      	ldr	r3, [pc, #64]	@ (90001824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900017e2:	681b      	ldr	r3, [r3, #0]
900017e4:	2b7f      	cmp	r3, #127	@ 0x7f
900017e6:	d812      	bhi.n	9000180e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900017e8:	6a3b      	ldr	r3, [r7, #32]
900017ea:	3301      	adds	r3, #1
900017ec:	623b      	str	r3, [r7, #32]
900017ee:	6a3b      	ldr	r3, [r7, #32]
900017f0:	2b0f      	cmp	r3, #15
900017f2:	d9b9      	bls.n	90001768 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900017f6:	3301      	adds	r3, #1
900017f8:	627b      	str	r3, [r7, #36]	@ 0x24
900017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900017fc:	2b0f      	cmp	r3, #15
900017fe:	d9a2      	bls.n	90001746 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001802:	3301      	adds	r3, #1
90001804:	62bb      	str	r3, [r7, #40]	@ 0x28
90001806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001808:	2b0f      	cmp	r3, #15
9000180a:	d999      	bls.n	90001740 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
9000180c:	e000      	b.n	90001810 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
9000180e:	bf00      	nop
          }
        }
      }
    }
  }
}
90001810:	373c      	adds	r7, #60	@ 0x3c
90001812:	46bd      	mov	sp, r7
90001814:	f85d 7b04 	ldr.w	r7, [sp], #4
90001818:	4770      	bx	lr
9000181a:	bf00      	nop
9000181c:	3b9aca00 	.word	0x3b9aca00
90001820:	9000cd00 	.word	0x9000cd00
90001824:	20001040 	.word	0x20001040
90001828:	20000640 	.word	0x20000640

9000182c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
9000182c:	b480      	push	{r7}
9000182e:	b093      	sub	sp, #76	@ 0x4c
90001830:	af00      	add	r7, sp, #0
90001832:	6078      	str	r0, [r7, #4]
90001834:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001836:	f04f 33ff 	mov.w	r3, #4294967295
9000183a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
9000183c:	687b      	ldr	r3, [r7, #4]
9000183e:	085a      	lsrs	r2, r3, #1
90001840:	4b7a      	ldr	r3, [pc, #488]	@ (90001a2c <I2C_Compute_SCLL_SCLH+0x200>)
90001842:	4413      	add	r3, r2
90001844:	687a      	ldr	r2, [r7, #4]
90001846:	fbb3 f3f2 	udiv	r3, r3, r2
9000184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
9000184c:	4a78      	ldr	r2, [pc, #480]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
9000184e:	683b      	ldr	r3, [r7, #0]
90001850:	212c      	movs	r1, #44	@ 0x2c
90001852:	fb01 f303 	mul.w	r3, r1, r3
90001856:	4413      	add	r3, r2
90001858:	681b      	ldr	r3, [r3, #0]
9000185a:	085a      	lsrs	r2, r3, #1
9000185c:	4b73      	ldr	r3, [pc, #460]	@ (90001a2c <I2C_Compute_SCLL_SCLH+0x200>)
9000185e:	4413      	add	r3, r2
90001860:	4973      	ldr	r1, [pc, #460]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
90001862:	683a      	ldr	r2, [r7, #0]
90001864:	202c      	movs	r0, #44	@ 0x2c
90001866:	fb00 f202 	mul.w	r2, r0, r2
9000186a:	440a      	add	r2, r1
9000186c:	6812      	ldr	r2, [r2, #0]
9000186e:	fbb3 f3f2 	udiv	r3, r3, r2
90001872:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001874:	2332      	movs	r3, #50	@ 0x32
90001876:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001878:	4a6d      	ldr	r2, [pc, #436]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
9000187a:	683b      	ldr	r3, [r7, #0]
9000187c:	212c      	movs	r1, #44	@ 0x2c
9000187e:	fb01 f303 	mul.w	r3, r1, r3
90001882:	4413      	add	r3, r2
90001884:	3328      	adds	r3, #40	@ 0x28
90001886:	681a      	ldr	r2, [r3, #0]
90001888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000188a:	fb02 f303 	mul.w	r3, r2, r3
9000188e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001890:	4a67      	ldr	r2, [pc, #412]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
90001892:	683b      	ldr	r3, [r7, #0]
90001894:	212c      	movs	r1, #44	@ 0x2c
90001896:	fb01 f303 	mul.w	r3, r1, r3
9000189a:	4413      	add	r3, r2
9000189c:	3304      	adds	r3, #4
9000189e:	681b      	ldr	r3, [r3, #0]
900018a0:	4a62      	ldr	r2, [pc, #392]	@ (90001a2c <I2C_Compute_SCLL_SCLH+0x200>)
900018a2:	fbb2 f3f3 	udiv	r3, r2, r3
900018a6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
900018a8:	4a61      	ldr	r2, [pc, #388]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
900018aa:	683b      	ldr	r3, [r7, #0]
900018ac:	212c      	movs	r1, #44	@ 0x2c
900018ae:	fb01 f303 	mul.w	r3, r1, r3
900018b2:	4413      	add	r3, r2
900018b4:	3308      	adds	r3, #8
900018b6:	681b      	ldr	r3, [r3, #0]
900018b8:	4a5c      	ldr	r2, [pc, #368]	@ (90001a2c <I2C_Compute_SCLL_SCLH+0x200>)
900018ba:	fbb2 f3f3 	udiv	r3, r2, r3
900018be:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
900018c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900018c2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900018c4:	2300      	movs	r3, #0
900018c6:	637b      	str	r3, [r7, #52]	@ 0x34
900018c8:	e0a3      	b.n	90001a12 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900018ca:	495a      	ldr	r1, [pc, #360]	@ (90001a34 <I2C_Compute_SCLL_SCLH+0x208>)
900018cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900018ce:	4613      	mov	r3, r2
900018d0:	009b      	lsls	r3, r3, #2
900018d2:	4413      	add	r3, r2
900018d4:	009b      	lsls	r3, r3, #2
900018d6:	440b      	add	r3, r1
900018d8:	681b      	ldr	r3, [r3, #0]
900018da:	1c5a      	adds	r2, r3, #1
900018dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900018de:	fb02 f303 	mul.w	r3, r2, r3
900018e2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900018e4:	2300      	movs	r3, #0
900018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
900018e8:	e08c      	b.n	90001a04 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900018ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900018ec:	6a3b      	ldr	r3, [r7, #32]
900018ee:	441a      	add	r2, r3
900018f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900018f2:	3301      	adds	r3, #1
900018f4:	6979      	ldr	r1, [r7, #20]
900018f6:	fb03 f101 	mul.w	r1, r3, r1
900018fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900018fc:	005b      	lsls	r3, r3, #1
900018fe:	440b      	add	r3, r1
90001900:	4413      	add	r3, r2
90001902:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001904:	4a4a      	ldr	r2, [pc, #296]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
90001906:	683b      	ldr	r3, [r7, #0]
90001908:	212c      	movs	r1, #44	@ 0x2c
9000190a:	fb01 f303 	mul.w	r3, r1, r3
9000190e:	4413      	add	r3, r2
90001910:	3318      	adds	r3, #24
90001912:	681b      	ldr	r3, [r3, #0]
90001914:	693a      	ldr	r2, [r7, #16]
90001916:	429a      	cmp	r2, r3
90001918:	d971      	bls.n	900019fe <I2C_Compute_SCLL_SCLH+0x1d2>
9000191a:	693a      	ldr	r2, [r7, #16]
9000191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000191e:	1ad2      	subs	r2, r2, r3
90001920:	6a3b      	ldr	r3, [r7, #32]
90001922:	1ad3      	subs	r3, r2, r3
90001924:	089b      	lsrs	r3, r3, #2
90001926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001928:	429a      	cmp	r2, r3
9000192a:	d268      	bcs.n	900019fe <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000192c:	2300      	movs	r3, #0
9000192e:	63bb      	str	r3, [r7, #56]	@ 0x38
90001930:	e062      	b.n	900019f8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001934:	6a3b      	ldr	r3, [r7, #32]
90001936:	441a      	add	r2, r3
90001938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000193a:	3301      	adds	r3, #1
9000193c:	6979      	ldr	r1, [r7, #20]
9000193e:	fb03 f101 	mul.w	r1, r3, r1
90001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001944:	005b      	lsls	r3, r3, #1
90001946:	440b      	add	r3, r1
90001948:	4413      	add	r3, r2
9000194a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
9000194c:	693a      	ldr	r2, [r7, #16]
9000194e:	68fb      	ldr	r3, [r7, #12]
90001950:	441a      	add	r2, r3
90001952:	4937      	ldr	r1, [pc, #220]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
90001954:	683b      	ldr	r3, [r7, #0]
90001956:	202c      	movs	r0, #44	@ 0x2c
90001958:	fb00 f303 	mul.w	r3, r0, r3
9000195c:	440b      	add	r3, r1
9000195e:	3320      	adds	r3, #32
90001960:	681b      	ldr	r3, [r3, #0]
90001962:	441a      	add	r2, r3
90001964:	4932      	ldr	r1, [pc, #200]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
90001966:	683b      	ldr	r3, [r7, #0]
90001968:	202c      	movs	r0, #44	@ 0x2c
9000196a:	fb00 f303 	mul.w	r3, r0, r3
9000196e:	440b      	add	r3, r1
90001970:	3324      	adds	r3, #36	@ 0x24
90001972:	681b      	ldr	r3, [r3, #0]
90001974:	4413      	add	r3, r2
90001976:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001978:	68ba      	ldr	r2, [r7, #8]
9000197a:	69bb      	ldr	r3, [r7, #24]
9000197c:	429a      	cmp	r2, r3
9000197e:	d338      	bcc.n	900019f2 <I2C_Compute_SCLL_SCLH+0x1c6>
90001980:	68ba      	ldr	r2, [r7, #8]
90001982:	69fb      	ldr	r3, [r7, #28]
90001984:	429a      	cmp	r2, r3
90001986:	d834      	bhi.n	900019f2 <I2C_Compute_SCLL_SCLH+0x1c6>
90001988:	4a29      	ldr	r2, [pc, #164]	@ (90001a30 <I2C_Compute_SCLL_SCLH+0x204>)
9000198a:	683b      	ldr	r3, [r7, #0]
9000198c:	212c      	movs	r1, #44	@ 0x2c
9000198e:	fb01 f303 	mul.w	r3, r1, r3
90001992:	4413      	add	r3, r2
90001994:	331c      	adds	r3, #28
90001996:	681b      	ldr	r3, [r3, #0]
90001998:	68fa      	ldr	r2, [r7, #12]
9000199a:	429a      	cmp	r2, r3
9000199c:	d329      	bcc.n	900019f2 <I2C_Compute_SCLL_SCLH+0x1c6>
9000199e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900019a0:	68fb      	ldr	r3, [r7, #12]
900019a2:	429a      	cmp	r2, r3
900019a4:	d225      	bcs.n	900019f2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
900019a6:	68ba      	ldr	r2, [r7, #8]
900019a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900019aa:	1ad3      	subs	r3, r2, r3
900019ac:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
900019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900019b0:	2b00      	cmp	r3, #0
900019b2:	da02      	bge.n	900019ba <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
900019b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900019b6:	425b      	negs	r3, r3
900019b8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
900019ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900019bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
900019be:	429a      	cmp	r2, r3
900019c0:	d917      	bls.n	900019f2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
900019c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900019c4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
900019c6:	491b      	ldr	r1, [pc, #108]	@ (90001a34 <I2C_Compute_SCLL_SCLH+0x208>)
900019c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900019ca:	4613      	mov	r3, r2
900019cc:	009b      	lsls	r3, r3, #2
900019ce:	4413      	add	r3, r2
900019d0:	009b      	lsls	r3, r3, #2
900019d2:	440b      	add	r3, r1
900019d4:	3310      	adds	r3, #16
900019d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
900019d8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
900019da:	4916      	ldr	r1, [pc, #88]	@ (90001a34 <I2C_Compute_SCLL_SCLH+0x208>)
900019dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900019de:	4613      	mov	r3, r2
900019e0:	009b      	lsls	r3, r3, #2
900019e2:	4413      	add	r3, r2
900019e4:	009b      	lsls	r3, r3, #2
900019e6:	440b      	add	r3, r1
900019e8:	330c      	adds	r3, #12
900019ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
900019ec:	601a      	str	r2, [r3, #0]
              ret = count;
900019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
900019f0:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900019f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900019f4:	3301      	adds	r3, #1
900019f6:	63bb      	str	r3, [r7, #56]	@ 0x38
900019f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900019fa:	2bff      	cmp	r3, #255	@ 0xff
900019fc:	d999      	bls.n	90001932 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900019fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001a00:	3301      	adds	r3, #1
90001a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001a06:	2bff      	cmp	r3, #255	@ 0xff
90001a08:	f67f af6f 	bls.w	900018ea <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001a0e:	3301      	adds	r3, #1
90001a10:	637b      	str	r3, [r7, #52]	@ 0x34
90001a12:	4b09      	ldr	r3, [pc, #36]	@ (90001a38 <I2C_Compute_SCLL_SCLH+0x20c>)
90001a14:	681b      	ldr	r3, [r3, #0]
90001a16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001a18:	429a      	cmp	r2, r3
90001a1a:	f4ff af56 	bcc.w	900018ca <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001a20:	4618      	mov	r0, r3
90001a22:	374c      	adds	r7, #76	@ 0x4c
90001a24:	46bd      	mov	sp, r7
90001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
90001a2a:	4770      	bx	lr
90001a2c:	3b9aca00 	.word	0x3b9aca00
90001a30:	9000cd00 	.word	0x9000cd00
90001a34:	20000640 	.word	0x20000640
90001a38:	20001040 	.word	0x20001040

90001a3c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001a3c:	b580      	push	{r7, lr}
90001a3e:	b08a      	sub	sp, #40	@ 0x28
90001a40:	af00      	add	r7, sp, #0
90001a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001a44:	4b31      	ldr	r3, [pc, #196]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001a4a:	4a30      	ldr	r2, [pc, #192]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001a4c:	f043 0308 	orr.w	r3, r3, #8
90001a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001a54:	4b2d      	ldr	r3, [pc, #180]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001a5a:	f003 0308 	and.w	r3, r3, #8
90001a5e:	613b      	str	r3, [r7, #16]
90001a60:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001a62:	4b2a      	ldr	r3, [pc, #168]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001a68:	4a28      	ldr	r2, [pc, #160]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001a6a:	f043 0308 	orr.w	r3, r3, #8
90001a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001a72:	4b26      	ldr	r3, [pc, #152]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001a78:	f003 0308 	and.w	r3, r3, #8
90001a7c:	60fb      	str	r3, [r7, #12]
90001a7e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001a84:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001a86:	2312      	movs	r3, #18
90001a88:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001a8a:	2300      	movs	r3, #0
90001a8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001a8e:	2302      	movs	r3, #2
90001a90:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001a92:	2304      	movs	r3, #4
90001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001a96:	f107 0314 	add.w	r3, r7, #20
90001a9a:	4619      	mov	r1, r3
90001a9c:	481c      	ldr	r0, [pc, #112]	@ (90001b10 <I2C4_MspInit+0xd4>)
90001a9e:	f001 fe71 	bl	90003784 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001aa6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001aa8:	2312      	movs	r3, #18
90001aaa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001aac:	2300      	movs	r3, #0
90001aae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001ab0:	2302      	movs	r3, #2
90001ab2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001ab4:	2304      	movs	r3, #4
90001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001ab8:	f107 0314 	add.w	r3, r7, #20
90001abc:	4619      	mov	r1, r3
90001abe:	4814      	ldr	r0, [pc, #80]	@ (90001b10 <I2C4_MspInit+0xd4>)
90001ac0:	f001 fe60 	bl	90003784 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001ac4:	4b11      	ldr	r3, [pc, #68]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001ac6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001aca:	4a10      	ldr	r2, [pc, #64]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001ad0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001ad4:	4b0d      	ldr	r3, [pc, #52]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001ade:	60bb      	str	r3, [r7, #8]
90001ae0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001ae8:	4a08      	ldr	r2, [pc, #32]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001aee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001af2:	4b06      	ldr	r3, [pc, #24]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001af8:	4a04      	ldr	r2, [pc, #16]	@ (90001b0c <I2C4_MspInit+0xd0>)
90001afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001afe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001b02:	bf00      	nop
90001b04:	3728      	adds	r7, #40	@ 0x28
90001b06:	46bd      	mov	sp, r7
90001b08:	bd80      	pop	{r7, pc}
90001b0a:	bf00      	nop
90001b0c:	58024400 	.word	0x58024400
90001b10:	58020c00 	.word	0x58020c00

90001b14 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001b14:	b580      	push	{r7, lr}
90001b16:	b088      	sub	sp, #32
90001b18:	af04      	add	r7, sp, #16
90001b1a:	607b      	str	r3, [r7, #4]
90001b1c:	4603      	mov	r3, r0
90001b1e:	81fb      	strh	r3, [r7, #14]
90001b20:	460b      	mov	r3, r1
90001b22:	81bb      	strh	r3, [r7, #12]
90001b24:	4613      	mov	r3, r2
90001b26:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001b28:	8978      	ldrh	r0, [r7, #10]
90001b2a:	89ba      	ldrh	r2, [r7, #12]
90001b2c:	89f9      	ldrh	r1, [r7, #14]
90001b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001b32:	9302      	str	r3, [sp, #8]
90001b34:	8b3b      	ldrh	r3, [r7, #24]
90001b36:	9301      	str	r3, [sp, #4]
90001b38:	687b      	ldr	r3, [r7, #4]
90001b3a:	9300      	str	r3, [sp, #0]
90001b3c:	4603      	mov	r3, r0
90001b3e:	4807      	ldr	r0, [pc, #28]	@ (90001b5c <I2C4_ReadReg+0x48>)
90001b40:	f003 fe4e 	bl	900057e0 <HAL_I2C_Mem_Read>
90001b44:	4603      	mov	r3, r0
90001b46:	2b00      	cmp	r3, #0
90001b48:	d101      	bne.n	90001b4e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001b4a:	2300      	movs	r3, #0
90001b4c:	e001      	b.n	90001b52 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001b4e:	f06f 0307 	mvn.w	r3, #7
}
90001b52:	4618      	mov	r0, r3
90001b54:	3710      	adds	r7, #16
90001b56:	46bd      	mov	sp, r7
90001b58:	bd80      	pop	{r7, pc}
90001b5a:	bf00      	nop
90001b5c:	20001044 	.word	0x20001044

90001b60 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001b60:	b580      	push	{r7, lr}
90001b62:	b084      	sub	sp, #16
90001b64:	af02      	add	r7, sp, #8
90001b66:	6078      	str	r0, [r7, #4]
90001b68:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001b6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001b6e:	9300      	str	r3, [sp, #0]
90001b70:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001b74:	2200      	movs	r2, #0
90001b76:	6839      	ldr	r1, [r7, #0]
90001b78:	6878      	ldr	r0, [r7, #4]
90001b7a:	f000 f805 	bl	90001b88 <BSP_LCD_InitEx>
90001b7e:	4603      	mov	r3, r0
}
90001b80:	4618      	mov	r0, r3
90001b82:	3708      	adds	r7, #8
90001b84:	46bd      	mov	sp, r7
90001b86:	bd80      	pop	{r7, pc}

90001b88 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001b88:	b580      	push	{r7, lr}
90001b8a:	b09e      	sub	sp, #120	@ 0x78
90001b8c:	af00      	add	r7, sp, #0
90001b8e:	60f8      	str	r0, [r7, #12]
90001b90:	60b9      	str	r1, [r7, #8]
90001b92:	607a      	str	r2, [r7, #4]
90001b94:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001b96:	2300      	movs	r3, #0
90001b98:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001b9a:	2300      	movs	r3, #0
90001b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001b9e:	68bb      	ldr	r3, [r7, #8]
90001ba0:	2b01      	cmp	r3, #1
90001ba2:	d808      	bhi.n	90001bb6 <BSP_LCD_InitEx+0x2e>
90001ba4:	68fb      	ldr	r3, [r7, #12]
90001ba6:	2b00      	cmp	r3, #0
90001ba8:	d105      	bne.n	90001bb6 <BSP_LCD_InitEx+0x2e>
90001baa:	687b      	ldr	r3, [r7, #4]
90001bac:	2b02      	cmp	r3, #2
90001bae:	d006      	beq.n	90001bbe <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001bb0:	687b      	ldr	r3, [r7, #4]
90001bb2:	2b00      	cmp	r3, #0
90001bb4:	d003      	beq.n	90001bbe <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001bb6:	f06f 0301 	mvn.w	r3, #1
90001bba:	677b      	str	r3, [r7, #116]	@ 0x74
90001bbc:	e0a8      	b.n	90001d10 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001bbe:	687b      	ldr	r3, [r7, #4]
90001bc0:	2b02      	cmp	r3, #2
90001bc2:	d109      	bne.n	90001bd8 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001bc4:	2302      	movs	r3, #2
90001bc6:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001bc8:	4a54      	ldr	r2, [pc, #336]	@ (90001d1c <BSP_LCD_InitEx+0x194>)
90001bca:	68fb      	ldr	r3, [r7, #12]
90001bcc:	015b      	lsls	r3, r3, #5
90001bce:	4413      	add	r3, r2
90001bd0:	3310      	adds	r3, #16
90001bd2:	2202      	movs	r2, #2
90001bd4:	601a      	str	r2, [r3, #0]
90001bd6:	e008      	b.n	90001bea <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001bd8:	2300      	movs	r3, #0
90001bda:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001bdc:	4a4f      	ldr	r2, [pc, #316]	@ (90001d1c <BSP_LCD_InitEx+0x194>)
90001bde:	68fb      	ldr	r3, [r7, #12]
90001be0:	015b      	lsls	r3, r3, #5
90001be2:	4413      	add	r3, r2
90001be4:	3310      	adds	r3, #16
90001be6:	2204      	movs	r2, #4
90001be8:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001bea:	4a4c      	ldr	r2, [pc, #304]	@ (90001d1c <BSP_LCD_InitEx+0x194>)
90001bec:	68fb      	ldr	r3, [r7, #12]
90001bee:	015b      	lsls	r3, r3, #5
90001bf0:	4413      	add	r3, r2
90001bf2:	330c      	adds	r3, #12
90001bf4:	687a      	ldr	r2, [r7, #4]
90001bf6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001bf8:	4a48      	ldr	r2, [pc, #288]	@ (90001d1c <BSP_LCD_InitEx+0x194>)
90001bfa:	68fb      	ldr	r3, [r7, #12]
90001bfc:	015b      	lsls	r3, r3, #5
90001bfe:	4413      	add	r3, r2
90001c00:	683a      	ldr	r2, [r7, #0]
90001c02:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001c04:	4a45      	ldr	r2, [pc, #276]	@ (90001d1c <BSP_LCD_InitEx+0x194>)
90001c06:	68fb      	ldr	r3, [r7, #12]
90001c08:	015b      	lsls	r3, r3, #5
90001c0a:	4413      	add	r3, r2
90001c0c:	3304      	adds	r3, #4
90001c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001c12:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001c14:	4b42      	ldr	r3, [pc, #264]	@ (90001d20 <BSP_LCD_InitEx+0x198>)
90001c16:	4a43      	ldr	r2, [pc, #268]	@ (90001d24 <BSP_LCD_InitEx+0x19c>)
90001c18:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001c1a:	4b43      	ldr	r3, [pc, #268]	@ (90001d28 <BSP_LCD_InitEx+0x1a0>)
90001c1c:	4a43      	ldr	r2, [pc, #268]	@ (90001d2c <BSP_LCD_InitEx+0x1a4>)
90001c1e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001c20:	483f      	ldr	r0, [pc, #252]	@ (90001d20 <BSP_LCD_InitEx+0x198>)
90001c22:	f000 fcf9 	bl	90002618 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001c26:	4840      	ldr	r0, [pc, #256]	@ (90001d28 <BSP_LCD_InitEx+0x1a0>)
90001c28:	f000 fdc2 	bl	900027b0 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001c2c:	4b40      	ldr	r3, [pc, #256]	@ (90001d30 <BSP_LCD_InitEx+0x1a8>)
90001c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001c30:	4b40      	ldr	r3, [pc, #256]	@ (90001d34 <BSP_LCD_InitEx+0x1ac>)
90001c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001c34:	2370      	movs	r3, #112	@ 0x70
90001c36:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001c38:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90001c3c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001c40:	4611      	mov	r1, r2
90001c42:	4618      	mov	r0, r3
90001c44:	f7ff f9b8 	bl	90000fb8 <FT5336_RegisterBusIO>
90001c48:	4603      	mov	r3, r0
90001c4a:	2b00      	cmp	r3, #0
90001c4c:	da03      	bge.n	90001c56 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001c4e:	f06f 0304 	mvn.w	r3, #4
90001c52:	677b      	str	r3, [r7, #116]	@ 0x74
90001c54:	e02b      	b.n	90001cae <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90001c56:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90001c5a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001c5e:	4611      	mov	r1, r2
90001c60:	4618      	mov	r0, r3
90001c62:	f7ff f9eb 	bl	9000103c <FT5336_ReadID>
90001c66:	4603      	mov	r3, r0
90001c68:	2b00      	cmp	r3, #0
90001c6a:	da03      	bge.n	90001c74 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001c6c:	f06f 0304 	mvn.w	r3, #4
90001c70:	677b      	str	r3, [r7, #116]	@ 0x74
90001c72:	e01c      	b.n	90001cae <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90001c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90001c76:	2b51      	cmp	r3, #81	@ 0x51
90001c78:	d003      	beq.n	90001c82 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90001c7a:	f06f 0306 	mvn.w	r3, #6
90001c7e:	677b      	str	r3, [r7, #116]	@ 0x74
90001c80:	e015      	b.n	90001cae <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90001c82:	4827      	ldr	r0, [pc, #156]	@ (90001d20 <BSP_LCD_InitEx+0x198>)
90001c84:	f7fe ffb8 	bl	90000bf8 <MX_LTDC_ClockConfig>
90001c88:	4603      	mov	r3, r0
90001c8a:	2b00      	cmp	r3, #0
90001c8c:	d003      	beq.n	90001c96 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001c8e:	f06f 0303 	mvn.w	r3, #3
90001c92:	677b      	str	r3, [r7, #116]	@ 0x74
90001c94:	e00b      	b.n	90001cae <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90001c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001c9a:	6839      	ldr	r1, [r7, #0]
90001c9c:	4820      	ldr	r0, [pc, #128]	@ (90001d20 <BSP_LCD_InitEx+0x198>)
90001c9e:	f000 f84d 	bl	90001d3c <MX_LTDC_Init>
90001ca2:	4603      	mov	r3, r0
90001ca4:	2b00      	cmp	r3, #0
90001ca6:	d002      	beq.n	90001cae <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001ca8:	f06f 0303 	mvn.w	r3, #3
90001cac:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90001cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90001cb0:	2b00      	cmp	r3, #0
90001cb2:	d12d      	bne.n	90001d10 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90001cb4:	2000      	movs	r0, #0
90001cb6:	f000 fe0d 	bl	900028d4 <BSP_SDRAM_Init>
90001cba:	4603      	mov	r3, r0
90001cbc:	2b00      	cmp	r3, #0
90001cbe:	d002      	beq.n	90001cc6 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90001cc0:	f06f 0303 	mvn.w	r3, #3
90001cc4:	e025      	b.n	90001d12 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90001cc6:	2300      	movs	r3, #0
90001cc8:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90001cca:	683b      	ldr	r3, [r7, #0]
90001ccc:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90001cce:	2300      	movs	r3, #0
90001cd0:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90001cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90001cd6:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90001cd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90001cda:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90001cdc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90001ce2:	f107 0314 	add.w	r3, r7, #20
90001ce6:	461a      	mov	r2, r3
90001ce8:	2100      	movs	r1, #0
90001cea:	480d      	ldr	r0, [pc, #52]	@ (90001d20 <BSP_LCD_InitEx+0x198>)
90001cec:	f000 f872 	bl	90001dd4 <MX_LTDC_ConfigLayer>
90001cf0:	4603      	mov	r3, r0
90001cf2:	2b00      	cmp	r3, #0
90001cf4:	d002      	beq.n	90001cfc <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90001cf6:	f06f 0303 	mvn.w	r3, #3
90001cfa:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90001cfc:	480e      	ldr	r0, [pc, #56]	@ (90001d38 <BSP_LCD_InitEx+0x1b0>)
90001cfe:	f000 fdbf 	bl	90002880 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90001d02:	4a06      	ldr	r2, [pc, #24]	@ (90001d1c <BSP_LCD_InitEx+0x194>)
90001d04:	68fb      	ldr	r3, [r7, #12]
90001d06:	015b      	lsls	r3, r3, #5
90001d08:	4413      	add	r3, r2
90001d0a:	3318      	adds	r3, #24
90001d0c:	2201      	movs	r2, #1
90001d0e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90001d10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90001d12:	4618      	mov	r0, r3
90001d14:	3778      	adds	r7, #120	@ 0x78
90001d16:	46bd      	mov	sp, r7
90001d18:	bd80      	pop	{r7, pc}
90001d1a:	bf00      	nop
90001d1c:	200011f4 	.word	0x200011f4
90001d20:	2000114c 	.word	0x2000114c
90001d24:	50001000 	.word	0x50001000
90001d28:	200010e4 	.word	0x200010e4
90001d2c:	52001000 	.word	0x52001000
90001d30:	900013fd 	.word	0x900013fd
90001d34:	900014f5 	.word	0x900014f5
90001d38:	20001098 	.word	0x20001098

90001d3c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90001d3c:	b580      	push	{r7, lr}
90001d3e:	b084      	sub	sp, #16
90001d40:	af00      	add	r7, sp, #0
90001d42:	60f8      	str	r0, [r7, #12]
90001d44:	60b9      	str	r1, [r7, #8]
90001d46:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90001d48:	68fb      	ldr	r3, [r7, #12]
90001d4a:	4a21      	ldr	r2, [pc, #132]	@ (90001dd0 <MX_LTDC_Init+0x94>)
90001d4c:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001d4e:	68fb      	ldr	r3, [r7, #12]
90001d50:	2200      	movs	r2, #0
90001d52:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001d54:	68fb      	ldr	r3, [r7, #12]
90001d56:	2200      	movs	r2, #0
90001d58:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001d5a:	68fb      	ldr	r3, [r7, #12]
90001d5c:	2200      	movs	r2, #0
90001d5e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001d60:	68fb      	ldr	r3, [r7, #12]
90001d62:	2200      	movs	r2, #0
90001d64:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90001d66:	68fb      	ldr	r3, [r7, #12]
90001d68:	2228      	movs	r2, #40	@ 0x28
90001d6a:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90001d6c:	68fb      	ldr	r3, [r7, #12]
90001d6e:	222a      	movs	r2, #42	@ 0x2a
90001d70:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90001d72:	68bb      	ldr	r3, [r7, #8]
90001d74:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90001d78:	68fb      	ldr	r3, [r7, #12]
90001d7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90001d7c:	68bb      	ldr	r3, [r7, #8]
90001d7e:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
90001d82:	68fb      	ldr	r3, [r7, #12]
90001d84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90001d86:	68fb      	ldr	r3, [r7, #12]
90001d88:	2209      	movs	r2, #9
90001d8a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90001d8c:	68fb      	ldr	r3, [r7, #12]
90001d8e:	220b      	movs	r2, #11
90001d90:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90001d92:	687b      	ldr	r3, [r7, #4]
90001d94:	f103 020b 	add.w	r2, r3, #11
90001d98:	68fb      	ldr	r3, [r7, #12]
90001d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90001d9c:	687b      	ldr	r3, [r7, #4]
90001d9e:	f103 020d 	add.w	r2, r3, #13
90001da2:	68fb      	ldr	r3, [r7, #12]
90001da4:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90001da6:	68fb      	ldr	r3, [r7, #12]
90001da8:	22ff      	movs	r2, #255	@ 0xff
90001daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
90001dae:	68fb      	ldr	r3, [r7, #12]
90001db0:	22ff      	movs	r2, #255	@ 0xff
90001db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90001db6:	68fb      	ldr	r3, [r7, #12]
90001db8:	22ff      	movs	r2, #255	@ 0xff
90001dba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
90001dbe:	68f8      	ldr	r0, [r7, #12]
90001dc0:	f004 f947 	bl	90006052 <HAL_LTDC_Init>
90001dc4:	4603      	mov	r3, r0
}
90001dc6:	4618      	mov	r0, r3
90001dc8:	3710      	adds	r7, #16
90001dca:	46bd      	mov	sp, r7
90001dcc:	bd80      	pop	{r7, pc}
90001dce:	bf00      	nop
90001dd0:	50001000 	.word	0x50001000

90001dd4 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90001dd4:	b580      	push	{r7, lr}
90001dd6:	b092      	sub	sp, #72	@ 0x48
90001dd8:	af00      	add	r7, sp, #0
90001dda:	60f8      	str	r0, [r7, #12]
90001ddc:	60b9      	str	r1, [r7, #8]
90001dde:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90001de0:	687b      	ldr	r3, [r7, #4]
90001de2:	681b      	ldr	r3, [r3, #0]
90001de4:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90001de6:	687b      	ldr	r3, [r7, #4]
90001de8:	685b      	ldr	r3, [r3, #4]
90001dea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90001dec:	687b      	ldr	r3, [r7, #4]
90001dee:	689b      	ldr	r3, [r3, #8]
90001df0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90001df2:	687b      	ldr	r3, [r7, #4]
90001df4:	68db      	ldr	r3, [r3, #12]
90001df6:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90001df8:	687b      	ldr	r3, [r7, #4]
90001dfa:	691b      	ldr	r3, [r3, #16]
90001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
90001dfe:	23ff      	movs	r3, #255	@ 0xff
90001e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90001e02:	2300      	movs	r3, #0
90001e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90001e06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
90001e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001e0c:	2307      	movs	r3, #7
90001e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90001e10:	687b      	ldr	r3, [r7, #4]
90001e12:	695b      	ldr	r3, [r3, #20]
90001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90001e16:	687b      	ldr	r3, [r7, #4]
90001e18:	685a      	ldr	r2, [r3, #4]
90001e1a:	687b      	ldr	r3, [r7, #4]
90001e1c:	681b      	ldr	r3, [r3, #0]
90001e1e:	1ad3      	subs	r3, r2, r3
90001e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90001e22:	687b      	ldr	r3, [r7, #4]
90001e24:	68da      	ldr	r2, [r3, #12]
90001e26:	687b      	ldr	r3, [r7, #4]
90001e28:	689b      	ldr	r3, [r3, #8]
90001e2a:	1ad3      	subs	r3, r2, r3
90001e2c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
90001e2e:	2300      	movs	r3, #0
90001e30:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90001e34:	2300      	movs	r3, #0
90001e36:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
90001e3a:	2300      	movs	r3, #0
90001e3c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90001e40:	f107 0314 	add.w	r3, r7, #20
90001e44:	68ba      	ldr	r2, [r7, #8]
90001e46:	4619      	mov	r1, r3
90001e48:	68f8      	ldr	r0, [r7, #12]
90001e4a:	f004 f9a9 	bl	900061a0 <HAL_LTDC_ConfigLayer>
90001e4e:	4603      	mov	r3, r0
}
90001e50:	4618      	mov	r0, r3
90001e52:	3748      	adds	r7, #72	@ 0x48
90001e54:	46bd      	mov	sp, r7
90001e56:	bd80      	pop	{r7, pc}

90001e58 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90001e58:	b480      	push	{r7}
90001e5a:	b085      	sub	sp, #20
90001e5c:	af00      	add	r7, sp, #0
90001e5e:	6078      	str	r0, [r7, #4]
90001e60:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001e62:	2300      	movs	r3, #0
90001e64:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001e66:	687b      	ldr	r3, [r7, #4]
90001e68:	2b00      	cmp	r3, #0
90001e6a:	d003      	beq.n	90001e74 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001e6c:	f06f 0301 	mvn.w	r3, #1
90001e70:	60fb      	str	r3, [r7, #12]
90001e72:	e007      	b.n	90001e84 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90001e74:	4a07      	ldr	r2, [pc, #28]	@ (90001e94 <BSP_LCD_GetPixelFormat+0x3c>)
90001e76:	687b      	ldr	r3, [r7, #4]
90001e78:	015b      	lsls	r3, r3, #5
90001e7a:	4413      	add	r3, r2
90001e7c:	330c      	adds	r3, #12
90001e7e:	681a      	ldr	r2, [r3, #0]
90001e80:	683b      	ldr	r3, [r7, #0]
90001e82:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001e84:	68fb      	ldr	r3, [r7, #12]
}
90001e86:	4618      	mov	r0, r3
90001e88:	3714      	adds	r7, #20
90001e8a:	46bd      	mov	sp, r7
90001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e90:	4770      	bx	lr
90001e92:	bf00      	nop
90001e94:	200011f4 	.word	0x200011f4

90001e98 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90001e98:	b480      	push	{r7}
90001e9a:	b085      	sub	sp, #20
90001e9c:	af00      	add	r7, sp, #0
90001e9e:	6078      	str	r0, [r7, #4]
90001ea0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001ea2:	2300      	movs	r3, #0
90001ea4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001ea6:	687b      	ldr	r3, [r7, #4]
90001ea8:	2b00      	cmp	r3, #0
90001eaa:	d003      	beq.n	90001eb4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001eac:	f06f 0301 	mvn.w	r3, #1
90001eb0:	60fb      	str	r3, [r7, #12]
90001eb2:	e006      	b.n	90001ec2 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90001eb4:	4a06      	ldr	r2, [pc, #24]	@ (90001ed0 <BSP_LCD_SetActiveLayer+0x38>)
90001eb6:	687b      	ldr	r3, [r7, #4]
90001eb8:	015b      	lsls	r3, r3, #5
90001eba:	4413      	add	r3, r2
90001ebc:	3308      	adds	r3, #8
90001ebe:	683a      	ldr	r2, [r7, #0]
90001ec0:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001ec2:	68fb      	ldr	r3, [r7, #12]
}
90001ec4:	4618      	mov	r0, r3
90001ec6:	3714      	adds	r7, #20
90001ec8:	46bd      	mov	sp, r7
90001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ece:	4770      	bx	lr
90001ed0:	200011f4 	.word	0x200011f4

90001ed4 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90001ed4:	b480      	push	{r7}
90001ed6:	b085      	sub	sp, #20
90001ed8:	af00      	add	r7, sp, #0
90001eda:	6078      	str	r0, [r7, #4]
90001edc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001ede:	2300      	movs	r3, #0
90001ee0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001ee2:	687b      	ldr	r3, [r7, #4]
90001ee4:	2b00      	cmp	r3, #0
90001ee6:	d003      	beq.n	90001ef0 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001ee8:	f06f 0301 	mvn.w	r3, #1
90001eec:	60fb      	str	r3, [r7, #12]
90001eee:	e006      	b.n	90001efe <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90001ef0:	4a06      	ldr	r2, [pc, #24]	@ (90001f0c <BSP_LCD_GetXSize+0x38>)
90001ef2:	687b      	ldr	r3, [r7, #4]
90001ef4:	015b      	lsls	r3, r3, #5
90001ef6:	4413      	add	r3, r2
90001ef8:	681a      	ldr	r2, [r3, #0]
90001efa:	683b      	ldr	r3, [r7, #0]
90001efc:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001efe:	68fb      	ldr	r3, [r7, #12]
}
90001f00:	4618      	mov	r0, r3
90001f02:	3714      	adds	r7, #20
90001f04:	46bd      	mov	sp, r7
90001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f0a:	4770      	bx	lr
90001f0c:	200011f4 	.word	0x200011f4

90001f10 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90001f10:	b480      	push	{r7}
90001f12:	b085      	sub	sp, #20
90001f14:	af00      	add	r7, sp, #0
90001f16:	6078      	str	r0, [r7, #4]
90001f18:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001f1a:	2300      	movs	r3, #0
90001f1c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001f1e:	687b      	ldr	r3, [r7, #4]
90001f20:	2b00      	cmp	r3, #0
90001f22:	d003      	beq.n	90001f2c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001f24:	f06f 0301 	mvn.w	r3, #1
90001f28:	60fb      	str	r3, [r7, #12]
90001f2a:	e007      	b.n	90001f3c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
90001f2c:	4a07      	ldr	r2, [pc, #28]	@ (90001f4c <BSP_LCD_GetYSize+0x3c>)
90001f2e:	687b      	ldr	r3, [r7, #4]
90001f30:	015b      	lsls	r3, r3, #5
90001f32:	4413      	add	r3, r2
90001f34:	3304      	adds	r3, #4
90001f36:	681a      	ldr	r2, [r3, #0]
90001f38:	683b      	ldr	r3, [r7, #0]
90001f3a:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001f3c:	68fb      	ldr	r3, [r7, #12]
}
90001f3e:	4618      	mov	r0, r3
90001f40:	3714      	adds	r7, #20
90001f42:	46bd      	mov	sp, r7
90001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f48:	4770      	bx	lr
90001f4a:	bf00      	nop
90001f4c:	200011f4 	.word	0x200011f4

90001f50 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90001f50:	b580      	push	{r7, lr}
90001f52:	b08e      	sub	sp, #56	@ 0x38
90001f54:	af02      	add	r7, sp, #8
90001f56:	60f8      	str	r0, [r7, #12]
90001f58:	60b9      	str	r1, [r7, #8]
90001f5a:	607a      	str	r2, [r7, #4]
90001f5c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001f5e:	2300      	movs	r3, #0
90001f60:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
90001f62:	683b      	ldr	r3, [r7, #0]
90001f64:	330a      	adds	r3, #10
90001f66:	781b      	ldrb	r3, [r3, #0]
90001f68:	461a      	mov	r2, r3
90001f6a:	683b      	ldr	r3, [r7, #0]
90001f6c:	330b      	adds	r3, #11
90001f6e:	781b      	ldrb	r3, [r3, #0]
90001f70:	021b      	lsls	r3, r3, #8
90001f72:	441a      	add	r2, r3
90001f74:	683b      	ldr	r3, [r7, #0]
90001f76:	330c      	adds	r3, #12
90001f78:	781b      	ldrb	r3, [r3, #0]
90001f7a:	041b      	lsls	r3, r3, #16
90001f7c:	441a      	add	r2, r3
90001f7e:	683b      	ldr	r3, [r7, #0]
90001f80:	330d      	adds	r3, #13
90001f82:	781b      	ldrb	r3, [r3, #0]
90001f84:	061b      	lsls	r3, r3, #24
90001f86:	4413      	add	r3, r2
90001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90001f8a:	683b      	ldr	r3, [r7, #0]
90001f8c:	3312      	adds	r3, #18
90001f8e:	781b      	ldrb	r3, [r3, #0]
90001f90:	461a      	mov	r2, r3
90001f92:	683b      	ldr	r3, [r7, #0]
90001f94:	3313      	adds	r3, #19
90001f96:	781b      	ldrb	r3, [r3, #0]
90001f98:	021b      	lsls	r3, r3, #8
90001f9a:	441a      	add	r2, r3
90001f9c:	683b      	ldr	r3, [r7, #0]
90001f9e:	3314      	adds	r3, #20
90001fa0:	781b      	ldrb	r3, [r3, #0]
90001fa2:	041b      	lsls	r3, r3, #16
90001fa4:	441a      	add	r2, r3
90001fa6:	683b      	ldr	r3, [r7, #0]
90001fa8:	3315      	adds	r3, #21
90001faa:	781b      	ldrb	r3, [r3, #0]
90001fac:	061b      	lsls	r3, r3, #24
90001fae:	4413      	add	r3, r2
90001fb0:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
90001fb2:	683b      	ldr	r3, [r7, #0]
90001fb4:	3316      	adds	r3, #22
90001fb6:	781b      	ldrb	r3, [r3, #0]
90001fb8:	461a      	mov	r2, r3
90001fba:	683b      	ldr	r3, [r7, #0]
90001fbc:	3317      	adds	r3, #23
90001fbe:	781b      	ldrb	r3, [r3, #0]
90001fc0:	021b      	lsls	r3, r3, #8
90001fc2:	441a      	add	r2, r3
90001fc4:	683b      	ldr	r3, [r7, #0]
90001fc6:	3318      	adds	r3, #24
90001fc8:	781b      	ldrb	r3, [r3, #0]
90001fca:	041b      	lsls	r3, r3, #16
90001fcc:	441a      	add	r2, r3
90001fce:	683b      	ldr	r3, [r7, #0]
90001fd0:	3319      	adds	r3, #25
90001fd2:	781b      	ldrb	r3, [r3, #0]
90001fd4:	061b      	lsls	r3, r3, #24
90001fd6:	4413      	add	r3, r2
90001fd8:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90001fda:	683b      	ldr	r3, [r7, #0]
90001fdc:	331c      	adds	r3, #28
90001fde:	781b      	ldrb	r3, [r3, #0]
90001fe0:	461a      	mov	r2, r3
90001fe2:	683b      	ldr	r3, [r7, #0]
90001fe4:	331d      	adds	r3, #29
90001fe6:	781b      	ldrb	r3, [r3, #0]
90001fe8:	021b      	lsls	r3, r3, #8
90001fea:	4413      	add	r3, r2
90001fec:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
90001fee:	4a37      	ldr	r2, [pc, #220]	@ (900020cc <BSP_LCD_DrawBitmap+0x17c>)
90001ff0:	68fb      	ldr	r3, [r7, #12]
90001ff2:	015b      	lsls	r3, r3, #5
90001ff4:	4413      	add	r3, r2
90001ff6:	3308      	adds	r3, #8
90001ff8:	681b      	ldr	r3, [r3, #0]
90001ffa:	4a35      	ldr	r2, [pc, #212]	@ (900020d0 <BSP_LCD_DrawBitmap+0x180>)
90001ffc:	2134      	movs	r1, #52	@ 0x34
90001ffe:	fb01 f303 	mul.w	r3, r1, r3
90002002:	4413      	add	r3, r2
90002004:	335c      	adds	r3, #92	@ 0x5c
90002006:	681a      	ldr	r2, [r3, #0]
90002008:	4930      	ldr	r1, [pc, #192]	@ (900020cc <BSP_LCD_DrawBitmap+0x17c>)
9000200a:	68fb      	ldr	r3, [r7, #12]
9000200c:	015b      	lsls	r3, r3, #5
9000200e:	440b      	add	r3, r1
90002010:	681b      	ldr	r3, [r3, #0]
90002012:	6879      	ldr	r1, [r7, #4]
90002014:	fb03 f101 	mul.w	r1, r3, r1
90002018:	68bb      	ldr	r3, [r7, #8]
9000201a:	440b      	add	r3, r1
9000201c:	482b      	ldr	r0, [pc, #172]	@ (900020cc <BSP_LCD_DrawBitmap+0x17c>)
9000201e:	68f9      	ldr	r1, [r7, #12]
90002020:	0149      	lsls	r1, r1, #5
90002022:	4401      	add	r1, r0
90002024:	3110      	adds	r1, #16
90002026:	6809      	ldr	r1, [r1, #0]
90002028:	fb01 f303 	mul.w	r3, r1, r3
9000202c:	4413      	add	r3, r2
9000202e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90002030:	693b      	ldr	r3, [r7, #16]
90002032:	3b20      	subs	r3, #32
90002034:	2b07      	cmp	r3, #7
90002036:	d802      	bhi.n	9000203e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002038:	2300      	movs	r3, #0
9000203a:	627b      	str	r3, [r7, #36]	@ 0x24
9000203c:	e008      	b.n	90002050 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
9000203e:	693b      	ldr	r3, [r7, #16]
90002040:	3b10      	subs	r3, #16
90002042:	2b07      	cmp	r3, #7
90002044:	d802      	bhi.n	9000204c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
90002046:	2302      	movs	r3, #2
90002048:	627b      	str	r3, [r7, #36]	@ 0x24
9000204a:	e001      	b.n	90002050 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
9000204c:	2301      	movs	r3, #1
9000204e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002050:	697b      	ldr	r3, [r7, #20]
90002052:	3b01      	subs	r3, #1
90002054:	69ba      	ldr	r2, [r7, #24]
90002056:	fb02 f303 	mul.w	r3, r2, r3
9000205a:	693a      	ldr	r2, [r7, #16]
9000205c:	08d2      	lsrs	r2, r2, #3
9000205e:	fb03 f202 	mul.w	r2, r3, r2
90002062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002064:	4413      	add	r3, r2
90002066:	683a      	ldr	r2, [r7, #0]
90002068:	4413      	add	r3, r2
9000206a:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
9000206c:	2300      	movs	r3, #0
9000206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002070:	e023      	b.n	900020ba <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
90002072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002076:	9300      	str	r3, [sp, #0]
90002078:	69bb      	ldr	r3, [r7, #24]
9000207a:	6a39      	ldr	r1, [r7, #32]
9000207c:	68f8      	ldr	r0, [r7, #12]
9000207e:	f000 fa77 	bl	90002570 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
90002082:	4a12      	ldr	r2, [pc, #72]	@ (900020cc <BSP_LCD_DrawBitmap+0x17c>)
90002084:	68fb      	ldr	r3, [r7, #12]
90002086:	015b      	lsls	r3, r3, #5
90002088:	4413      	add	r3, r2
9000208a:	681b      	ldr	r3, [r3, #0]
9000208c:	490f      	ldr	r1, [pc, #60]	@ (900020cc <BSP_LCD_DrawBitmap+0x17c>)
9000208e:	68fa      	ldr	r2, [r7, #12]
90002090:	0152      	lsls	r2, r2, #5
90002092:	440a      	add	r2, r1
90002094:	3210      	adds	r2, #16
90002096:	6812      	ldr	r2, [r2, #0]
90002098:	fb02 f303 	mul.w	r3, r2, r3
9000209c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000209e:	4413      	add	r3, r2
900020a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
900020a2:	693b      	ldr	r3, [r7, #16]
900020a4:	08db      	lsrs	r3, r3, #3
900020a6:	69ba      	ldr	r2, [r7, #24]
900020a8:	fb02 f303 	mul.w	r3, r2, r3
900020ac:	425b      	negs	r3, r3
900020ae:	6a3a      	ldr	r2, [r7, #32]
900020b0:	4413      	add	r3, r2
900020b2:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
900020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900020b6:	3301      	adds	r3, #1
900020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
900020ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900020bc:	697b      	ldr	r3, [r7, #20]
900020be:	429a      	cmp	r2, r3
900020c0:	d3d7      	bcc.n	90002072 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
900020c2:	69fb      	ldr	r3, [r7, #28]
}
900020c4:	4618      	mov	r0, r3
900020c6:	3730      	adds	r7, #48	@ 0x30
900020c8:	46bd      	mov	sp, r7
900020ca:	bd80      	pop	{r7, pc}
900020cc:	200011f4 	.word	0x200011f4
900020d0:	2000114c 	.word	0x2000114c

900020d4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
900020d4:	b580      	push	{r7, lr}
900020d6:	b088      	sub	sp, #32
900020d8:	af00      	add	r7, sp, #0
900020da:	60f8      	str	r0, [r7, #12]
900020dc:	60b9      	str	r1, [r7, #8]
900020de:	607a      	str	r2, [r7, #4]
900020e0:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
900020e2:	683b      	ldr	r3, [r7, #0]
900020e4:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
900020e6:	2300      	movs	r3, #0
900020e8:	61fb      	str	r3, [r7, #28]
900020ea:	e032      	b.n	90002152 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
900020ec:	2300      	movs	r3, #0
900020ee:	617b      	str	r3, [r7, #20]
900020f0:	e028      	b.n	90002144 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
900020f2:	69bb      	ldr	r3, [r7, #24]
900020f4:	781b      	ldrb	r3, [r3, #0]
900020f6:	461a      	mov	r2, r3
900020f8:	69bb      	ldr	r3, [r7, #24]
900020fa:	3301      	adds	r3, #1
900020fc:	781b      	ldrb	r3, [r3, #0]
900020fe:	021b      	lsls	r3, r3, #8
90002100:	431a      	orrs	r2, r3
90002102:	69bb      	ldr	r3, [r7, #24]
90002104:	3302      	adds	r3, #2
90002106:	781b      	ldrb	r3, [r3, #0]
90002108:	041b      	lsls	r3, r3, #16
9000210a:	431a      	orrs	r2, r3
9000210c:	69bb      	ldr	r3, [r7, #24]
9000210e:	3303      	adds	r3, #3
90002110:	781b      	ldrb	r3, [r3, #0]
90002112:	061b      	lsls	r3, r3, #24
90002114:	4313      	orrs	r3, r2
90002116:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002118:	68ba      	ldr	r2, [r7, #8]
9000211a:	697b      	ldr	r3, [r7, #20]
9000211c:	18d1      	adds	r1, r2, r3
9000211e:	687a      	ldr	r2, [r7, #4]
90002120:	69fb      	ldr	r3, [r7, #28]
90002122:	441a      	add	r2, r3
90002124:	693b      	ldr	r3, [r7, #16]
90002126:	68f8      	ldr	r0, [r7, #12]
90002128:	f000 f95e 	bl	900023e8 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
9000212c:	4a0d      	ldr	r2, [pc, #52]	@ (90002164 <BSP_LCD_FillRGBRect+0x90>)
9000212e:	68fb      	ldr	r3, [r7, #12]
90002130:	015b      	lsls	r3, r3, #5
90002132:	4413      	add	r3, r2
90002134:	3310      	adds	r3, #16
90002136:	681b      	ldr	r3, [r3, #0]
90002138:	69ba      	ldr	r2, [r7, #24]
9000213a:	4413      	add	r3, r2
9000213c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
9000213e:	697b      	ldr	r3, [r7, #20]
90002140:	3301      	adds	r3, #1
90002142:	617b      	str	r3, [r7, #20]
90002144:	697a      	ldr	r2, [r7, #20]
90002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002148:	429a      	cmp	r2, r3
9000214a:	d3d2      	bcc.n	900020f2 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
9000214c:	69fb      	ldr	r3, [r7, #28]
9000214e:	3301      	adds	r3, #1
90002150:	61fb      	str	r3, [r7, #28]
90002152:	69fa      	ldr	r2, [r7, #28]
90002154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002156:	429a      	cmp	r2, r3
90002158:	d3c8      	bcc.n	900020ec <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
9000215a:	2300      	movs	r3, #0
}
9000215c:	4618      	mov	r0, r3
9000215e:	3720      	adds	r7, #32
90002160:	46bd      	mov	sp, r7
90002162:	bd80      	pop	{r7, pc}
90002164:	200011f4 	.word	0x200011f4

90002168 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002168:	b580      	push	{r7, lr}
9000216a:	b088      	sub	sp, #32
9000216c:	af02      	add	r7, sp, #8
9000216e:	60f8      	str	r0, [r7, #12]
90002170:	60b9      	str	r1, [r7, #8]
90002172:	607a      	str	r2, [r7, #4]
90002174:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002176:	4a21      	ldr	r2, [pc, #132]	@ (900021fc <BSP_LCD_DrawHLine+0x94>)
90002178:	68fb      	ldr	r3, [r7, #12]
9000217a:	015b      	lsls	r3, r3, #5
9000217c:	4413      	add	r3, r2
9000217e:	3308      	adds	r3, #8
90002180:	681b      	ldr	r3, [r3, #0]
90002182:	4a1f      	ldr	r2, [pc, #124]	@ (90002200 <BSP_LCD_DrawHLine+0x98>)
90002184:	2134      	movs	r1, #52	@ 0x34
90002186:	fb01 f303 	mul.w	r3, r1, r3
9000218a:	4413      	add	r3, r2
9000218c:	335c      	adds	r3, #92	@ 0x5c
9000218e:	681a      	ldr	r2, [r3, #0]
90002190:	491a      	ldr	r1, [pc, #104]	@ (900021fc <BSP_LCD_DrawHLine+0x94>)
90002192:	68fb      	ldr	r3, [r7, #12]
90002194:	015b      	lsls	r3, r3, #5
90002196:	440b      	add	r3, r1
90002198:	3310      	adds	r3, #16
9000219a:	681b      	ldr	r3, [r3, #0]
9000219c:	4817      	ldr	r0, [pc, #92]	@ (900021fc <BSP_LCD_DrawHLine+0x94>)
9000219e:	68f9      	ldr	r1, [r7, #12]
900021a0:	0149      	lsls	r1, r1, #5
900021a2:	4401      	add	r1, r0
900021a4:	6809      	ldr	r1, [r1, #0]
900021a6:	6878      	ldr	r0, [r7, #4]
900021a8:	fb01 f000 	mul.w	r0, r1, r0
900021ac:	68b9      	ldr	r1, [r7, #8]
900021ae:	4401      	add	r1, r0
900021b0:	fb01 f303 	mul.w	r3, r1, r3
900021b4:	4413      	add	r3, r2
900021b6:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
900021b8:	68ba      	ldr	r2, [r7, #8]
900021ba:	683b      	ldr	r3, [r7, #0]
900021bc:	441a      	add	r2, r3
900021be:	490f      	ldr	r1, [pc, #60]	@ (900021fc <BSP_LCD_DrawHLine+0x94>)
900021c0:	68fb      	ldr	r3, [r7, #12]
900021c2:	015b      	lsls	r3, r3, #5
900021c4:	440b      	add	r3, r1
900021c6:	681b      	ldr	r3, [r3, #0]
900021c8:	429a      	cmp	r2, r3
900021ca:	d907      	bls.n	900021dc <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
900021cc:	4a0b      	ldr	r2, [pc, #44]	@ (900021fc <BSP_LCD_DrawHLine+0x94>)
900021ce:	68fb      	ldr	r3, [r7, #12]
900021d0:	015b      	lsls	r3, r3, #5
900021d2:	4413      	add	r3, r2
900021d4:	681a      	ldr	r2, [r3, #0]
900021d6:	68bb      	ldr	r3, [r7, #8]
900021d8:	1ad3      	subs	r3, r2, r3
900021da:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
900021dc:	6979      	ldr	r1, [r7, #20]
900021de:	6a3b      	ldr	r3, [r7, #32]
900021e0:	9301      	str	r3, [sp, #4]
900021e2:	2300      	movs	r3, #0
900021e4:	9300      	str	r3, [sp, #0]
900021e6:	2301      	movs	r3, #1
900021e8:	683a      	ldr	r2, [r7, #0]
900021ea:	68f8      	ldr	r0, [r7, #12]
900021ec:	f000 f956 	bl	9000249c <LL_FillBuffer>

  return BSP_ERROR_NONE;
900021f0:	2300      	movs	r3, #0
}
900021f2:	4618      	mov	r0, r3
900021f4:	3718      	adds	r7, #24
900021f6:	46bd      	mov	sp, r7
900021f8:	bd80      	pop	{r7, pc}
900021fa:	bf00      	nop
900021fc:	200011f4 	.word	0x200011f4
90002200:	2000114c 	.word	0x2000114c

90002204 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002204:	b580      	push	{r7, lr}
90002206:	b088      	sub	sp, #32
90002208:	af02      	add	r7, sp, #8
9000220a:	60f8      	str	r0, [r7, #12]
9000220c:	60b9      	str	r1, [r7, #8]
9000220e:	607a      	str	r2, [r7, #4]
90002210:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002212:	4a24      	ldr	r2, [pc, #144]	@ (900022a4 <BSP_LCD_DrawVLine+0xa0>)
90002214:	68fb      	ldr	r3, [r7, #12]
90002216:	015b      	lsls	r3, r3, #5
90002218:	4413      	add	r3, r2
9000221a:	3308      	adds	r3, #8
9000221c:	681b      	ldr	r3, [r3, #0]
9000221e:	4a22      	ldr	r2, [pc, #136]	@ (900022a8 <BSP_LCD_DrawVLine+0xa4>)
90002220:	2134      	movs	r1, #52	@ 0x34
90002222:	fb01 f303 	mul.w	r3, r1, r3
90002226:	4413      	add	r3, r2
90002228:	335c      	adds	r3, #92	@ 0x5c
9000222a:	681a      	ldr	r2, [r3, #0]
9000222c:	491d      	ldr	r1, [pc, #116]	@ (900022a4 <BSP_LCD_DrawVLine+0xa0>)
9000222e:	68fb      	ldr	r3, [r7, #12]
90002230:	015b      	lsls	r3, r3, #5
90002232:	440b      	add	r3, r1
90002234:	3310      	adds	r3, #16
90002236:	681b      	ldr	r3, [r3, #0]
90002238:	481a      	ldr	r0, [pc, #104]	@ (900022a4 <BSP_LCD_DrawVLine+0xa0>)
9000223a:	68f9      	ldr	r1, [r7, #12]
9000223c:	0149      	lsls	r1, r1, #5
9000223e:	4401      	add	r1, r0
90002240:	6809      	ldr	r1, [r1, #0]
90002242:	6878      	ldr	r0, [r7, #4]
90002244:	fb01 f000 	mul.w	r0, r1, r0
90002248:	68b9      	ldr	r1, [r7, #8]
9000224a:	4401      	add	r1, r0
9000224c:	fb01 f303 	mul.w	r3, r1, r3
90002250:	4413      	add	r3, r2
90002252:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90002254:	687a      	ldr	r2, [r7, #4]
90002256:	683b      	ldr	r3, [r7, #0]
90002258:	441a      	add	r2, r3
9000225a:	4912      	ldr	r1, [pc, #72]	@ (900022a4 <BSP_LCD_DrawVLine+0xa0>)
9000225c:	68fb      	ldr	r3, [r7, #12]
9000225e:	015b      	lsls	r3, r3, #5
90002260:	440b      	add	r3, r1
90002262:	3304      	adds	r3, #4
90002264:	681b      	ldr	r3, [r3, #0]
90002266:	429a      	cmp	r2, r3
90002268:	d908      	bls.n	9000227c <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
9000226a:	4a0e      	ldr	r2, [pc, #56]	@ (900022a4 <BSP_LCD_DrawVLine+0xa0>)
9000226c:	68fb      	ldr	r3, [r7, #12]
9000226e:	015b      	lsls	r3, r3, #5
90002270:	4413      	add	r3, r2
90002272:	3304      	adds	r3, #4
90002274:	681a      	ldr	r2, [r3, #0]
90002276:	687b      	ldr	r3, [r7, #4]
90002278:	1ad3      	subs	r3, r2, r3
9000227a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
9000227c:	6979      	ldr	r1, [r7, #20]
9000227e:	4a09      	ldr	r2, [pc, #36]	@ (900022a4 <BSP_LCD_DrawVLine+0xa0>)
90002280:	68fb      	ldr	r3, [r7, #12]
90002282:	015b      	lsls	r3, r3, #5
90002284:	4413      	add	r3, r2
90002286:	681b      	ldr	r3, [r3, #0]
90002288:	3b01      	subs	r3, #1
9000228a:	6a3a      	ldr	r2, [r7, #32]
9000228c:	9201      	str	r2, [sp, #4]
9000228e:	9300      	str	r3, [sp, #0]
90002290:	683b      	ldr	r3, [r7, #0]
90002292:	2201      	movs	r2, #1
90002294:	68f8      	ldr	r0, [r7, #12]
90002296:	f000 f901 	bl	9000249c <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000229a:	2300      	movs	r3, #0
}
9000229c:	4618      	mov	r0, r3
9000229e:	3718      	adds	r7, #24
900022a0:	46bd      	mov	sp, r7
900022a2:	bd80      	pop	{r7, pc}
900022a4:	200011f4 	.word	0x200011f4
900022a8:	2000114c 	.word	0x2000114c

900022ac <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900022ac:	b580      	push	{r7, lr}
900022ae:	b088      	sub	sp, #32
900022b0:	af02      	add	r7, sp, #8
900022b2:	60f8      	str	r0, [r7, #12]
900022b4:	60b9      	str	r1, [r7, #8]
900022b6:	607a      	str	r2, [r7, #4]
900022b8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900022ba:	4a1b      	ldr	r2, [pc, #108]	@ (90002328 <BSP_LCD_FillRect+0x7c>)
900022bc:	68fb      	ldr	r3, [r7, #12]
900022be:	015b      	lsls	r3, r3, #5
900022c0:	4413      	add	r3, r2
900022c2:	3308      	adds	r3, #8
900022c4:	681b      	ldr	r3, [r3, #0]
900022c6:	4a19      	ldr	r2, [pc, #100]	@ (9000232c <BSP_LCD_FillRect+0x80>)
900022c8:	2134      	movs	r1, #52	@ 0x34
900022ca:	fb01 f303 	mul.w	r3, r1, r3
900022ce:	4413      	add	r3, r2
900022d0:	335c      	adds	r3, #92	@ 0x5c
900022d2:	681a      	ldr	r2, [r3, #0]
900022d4:	4914      	ldr	r1, [pc, #80]	@ (90002328 <BSP_LCD_FillRect+0x7c>)
900022d6:	68fb      	ldr	r3, [r7, #12]
900022d8:	015b      	lsls	r3, r3, #5
900022da:	440b      	add	r3, r1
900022dc:	3310      	adds	r3, #16
900022de:	681b      	ldr	r3, [r3, #0]
900022e0:	4811      	ldr	r0, [pc, #68]	@ (90002328 <BSP_LCD_FillRect+0x7c>)
900022e2:	68f9      	ldr	r1, [r7, #12]
900022e4:	0149      	lsls	r1, r1, #5
900022e6:	4401      	add	r1, r0
900022e8:	6809      	ldr	r1, [r1, #0]
900022ea:	6878      	ldr	r0, [r7, #4]
900022ec:	fb01 f000 	mul.w	r0, r1, r0
900022f0:	68b9      	ldr	r1, [r7, #8]
900022f2:	4401      	add	r1, r0
900022f4:	fb01 f303 	mul.w	r3, r1, r3
900022f8:	4413      	add	r3, r2
900022fa:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
900022fc:	6979      	ldr	r1, [r7, #20]
900022fe:	4a0a      	ldr	r2, [pc, #40]	@ (90002328 <BSP_LCD_FillRect+0x7c>)
90002300:	68fb      	ldr	r3, [r7, #12]
90002302:	015b      	lsls	r3, r3, #5
90002304:	4413      	add	r3, r2
90002306:	681a      	ldr	r2, [r3, #0]
90002308:	683b      	ldr	r3, [r7, #0]
9000230a:	1ad3      	subs	r3, r2, r3
9000230c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000230e:	9201      	str	r2, [sp, #4]
90002310:	9300      	str	r3, [sp, #0]
90002312:	6a3b      	ldr	r3, [r7, #32]
90002314:	683a      	ldr	r2, [r7, #0]
90002316:	68f8      	ldr	r0, [r7, #12]
90002318:	f000 f8c0 	bl	9000249c <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000231c:	2300      	movs	r3, #0
}
9000231e:	4618      	mov	r0, r3
90002320:	3718      	adds	r7, #24
90002322:	46bd      	mov	sp, r7
90002324:	bd80      	pop	{r7, pc}
90002326:	bf00      	nop
90002328:	200011f4 	.word	0x200011f4
9000232c:	2000114c 	.word	0x2000114c

90002330 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002330:	b480      	push	{r7}
90002332:	b085      	sub	sp, #20
90002334:	af00      	add	r7, sp, #0
90002336:	60f8      	str	r0, [r7, #12]
90002338:	60b9      	str	r1, [r7, #8]
9000233a:	607a      	str	r2, [r7, #4]
9000233c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000233e:	4a28      	ldr	r2, [pc, #160]	@ (900023e0 <BSP_LCD_ReadPixel+0xb0>)
90002340:	68fb      	ldr	r3, [r7, #12]
90002342:	015b      	lsls	r3, r3, #5
90002344:	4413      	add	r3, r2
90002346:	3308      	adds	r3, #8
90002348:	681b      	ldr	r3, [r3, #0]
9000234a:	4a26      	ldr	r2, [pc, #152]	@ (900023e4 <BSP_LCD_ReadPixel+0xb4>)
9000234c:	2134      	movs	r1, #52	@ 0x34
9000234e:	fb01 f303 	mul.w	r3, r1, r3
90002352:	4413      	add	r3, r2
90002354:	3348      	adds	r3, #72	@ 0x48
90002356:	681b      	ldr	r3, [r3, #0]
90002358:	2b00      	cmp	r3, #0
9000235a:	d11c      	bne.n	90002396 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
9000235c:	4a20      	ldr	r2, [pc, #128]	@ (900023e0 <BSP_LCD_ReadPixel+0xb0>)
9000235e:	68fb      	ldr	r3, [r7, #12]
90002360:	015b      	lsls	r3, r3, #5
90002362:	4413      	add	r3, r2
90002364:	3308      	adds	r3, #8
90002366:	681b      	ldr	r3, [r3, #0]
90002368:	4a1e      	ldr	r2, [pc, #120]	@ (900023e4 <BSP_LCD_ReadPixel+0xb4>)
9000236a:	2134      	movs	r1, #52	@ 0x34
9000236c:	fb01 f303 	mul.w	r3, r1, r3
90002370:	4413      	add	r3, r2
90002372:	335c      	adds	r3, #92	@ 0x5c
90002374:	681a      	ldr	r2, [r3, #0]
90002376:	491a      	ldr	r1, [pc, #104]	@ (900023e0 <BSP_LCD_ReadPixel+0xb0>)
90002378:	68fb      	ldr	r3, [r7, #12]
9000237a:	015b      	lsls	r3, r3, #5
9000237c:	440b      	add	r3, r1
9000237e:	681b      	ldr	r3, [r3, #0]
90002380:	6879      	ldr	r1, [r7, #4]
90002382:	fb03 f101 	mul.w	r1, r3, r1
90002386:	68bb      	ldr	r3, [r7, #8]
90002388:	440b      	add	r3, r1
9000238a:	009b      	lsls	r3, r3, #2
9000238c:	4413      	add	r3, r2
9000238e:	681a      	ldr	r2, [r3, #0]
90002390:	683b      	ldr	r3, [r7, #0]
90002392:	601a      	str	r2, [r3, #0]
90002394:	e01d      	b.n	900023d2 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002396:	4a12      	ldr	r2, [pc, #72]	@ (900023e0 <BSP_LCD_ReadPixel+0xb0>)
90002398:	68fb      	ldr	r3, [r7, #12]
9000239a:	015b      	lsls	r3, r3, #5
9000239c:	4413      	add	r3, r2
9000239e:	3308      	adds	r3, #8
900023a0:	681b      	ldr	r3, [r3, #0]
900023a2:	4a10      	ldr	r2, [pc, #64]	@ (900023e4 <BSP_LCD_ReadPixel+0xb4>)
900023a4:	2134      	movs	r1, #52	@ 0x34
900023a6:	fb01 f303 	mul.w	r3, r1, r3
900023aa:	4413      	add	r3, r2
900023ac:	335c      	adds	r3, #92	@ 0x5c
900023ae:	681a      	ldr	r2, [r3, #0]
900023b0:	490b      	ldr	r1, [pc, #44]	@ (900023e0 <BSP_LCD_ReadPixel+0xb0>)
900023b2:	68fb      	ldr	r3, [r7, #12]
900023b4:	015b      	lsls	r3, r3, #5
900023b6:	440b      	add	r3, r1
900023b8:	681b      	ldr	r3, [r3, #0]
900023ba:	6879      	ldr	r1, [r7, #4]
900023bc:	fb03 f101 	mul.w	r1, r3, r1
900023c0:	68bb      	ldr	r3, [r7, #8]
900023c2:	440b      	add	r3, r1
900023c4:	005b      	lsls	r3, r3, #1
900023c6:	4413      	add	r3, r2
900023c8:	881b      	ldrh	r3, [r3, #0]
900023ca:	b29b      	uxth	r3, r3
900023cc:	461a      	mov	r2, r3
900023ce:	683b      	ldr	r3, [r7, #0]
900023d0:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
900023d2:	2300      	movs	r3, #0
}
900023d4:	4618      	mov	r0, r3
900023d6:	3714      	adds	r7, #20
900023d8:	46bd      	mov	sp, r7
900023da:	f85d 7b04 	ldr.w	r7, [sp], #4
900023de:	4770      	bx	lr
900023e0:	200011f4 	.word	0x200011f4
900023e4:	2000114c 	.word	0x2000114c

900023e8 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
900023e8:	b480      	push	{r7}
900023ea:	b085      	sub	sp, #20
900023ec:	af00      	add	r7, sp, #0
900023ee:	60f8      	str	r0, [r7, #12]
900023f0:	60b9      	str	r1, [r7, #8]
900023f2:	607a      	str	r2, [r7, #4]
900023f4:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900023f6:	4a27      	ldr	r2, [pc, #156]	@ (90002494 <BSP_LCD_WritePixel+0xac>)
900023f8:	68fb      	ldr	r3, [r7, #12]
900023fa:	015b      	lsls	r3, r3, #5
900023fc:	4413      	add	r3, r2
900023fe:	3308      	adds	r3, #8
90002400:	681b      	ldr	r3, [r3, #0]
90002402:	4a25      	ldr	r2, [pc, #148]	@ (90002498 <BSP_LCD_WritePixel+0xb0>)
90002404:	2134      	movs	r1, #52	@ 0x34
90002406:	fb01 f303 	mul.w	r3, r1, r3
9000240a:	4413      	add	r3, r2
9000240c:	3348      	adds	r3, #72	@ 0x48
9000240e:	681b      	ldr	r3, [r3, #0]
90002410:	2b00      	cmp	r3, #0
90002412:	d11c      	bne.n	9000244e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002414:	4a1f      	ldr	r2, [pc, #124]	@ (90002494 <BSP_LCD_WritePixel+0xac>)
90002416:	68fb      	ldr	r3, [r7, #12]
90002418:	015b      	lsls	r3, r3, #5
9000241a:	4413      	add	r3, r2
9000241c:	3308      	adds	r3, #8
9000241e:	681b      	ldr	r3, [r3, #0]
90002420:	4a1d      	ldr	r2, [pc, #116]	@ (90002498 <BSP_LCD_WritePixel+0xb0>)
90002422:	2134      	movs	r1, #52	@ 0x34
90002424:	fb01 f303 	mul.w	r3, r1, r3
90002428:	4413      	add	r3, r2
9000242a:	335c      	adds	r3, #92	@ 0x5c
9000242c:	681a      	ldr	r2, [r3, #0]
9000242e:	4919      	ldr	r1, [pc, #100]	@ (90002494 <BSP_LCD_WritePixel+0xac>)
90002430:	68fb      	ldr	r3, [r7, #12]
90002432:	015b      	lsls	r3, r3, #5
90002434:	440b      	add	r3, r1
90002436:	681b      	ldr	r3, [r3, #0]
90002438:	6879      	ldr	r1, [r7, #4]
9000243a:	fb03 f101 	mul.w	r1, r3, r1
9000243e:	68bb      	ldr	r3, [r7, #8]
90002440:	440b      	add	r3, r1
90002442:	009b      	lsls	r3, r3, #2
90002444:	4413      	add	r3, r2
90002446:	461a      	mov	r2, r3
90002448:	683b      	ldr	r3, [r7, #0]
9000244a:	6013      	str	r3, [r2, #0]
9000244c:	e01b      	b.n	90002486 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
9000244e:	4a11      	ldr	r2, [pc, #68]	@ (90002494 <BSP_LCD_WritePixel+0xac>)
90002450:	68fb      	ldr	r3, [r7, #12]
90002452:	015b      	lsls	r3, r3, #5
90002454:	4413      	add	r3, r2
90002456:	3308      	adds	r3, #8
90002458:	681b      	ldr	r3, [r3, #0]
9000245a:	4a0f      	ldr	r2, [pc, #60]	@ (90002498 <BSP_LCD_WritePixel+0xb0>)
9000245c:	2134      	movs	r1, #52	@ 0x34
9000245e:	fb01 f303 	mul.w	r3, r1, r3
90002462:	4413      	add	r3, r2
90002464:	335c      	adds	r3, #92	@ 0x5c
90002466:	681a      	ldr	r2, [r3, #0]
90002468:	490a      	ldr	r1, [pc, #40]	@ (90002494 <BSP_LCD_WritePixel+0xac>)
9000246a:	68fb      	ldr	r3, [r7, #12]
9000246c:	015b      	lsls	r3, r3, #5
9000246e:	440b      	add	r3, r1
90002470:	681b      	ldr	r3, [r3, #0]
90002472:	6879      	ldr	r1, [r7, #4]
90002474:	fb03 f101 	mul.w	r1, r3, r1
90002478:	68bb      	ldr	r3, [r7, #8]
9000247a:	440b      	add	r3, r1
9000247c:	005b      	lsls	r3, r3, #1
9000247e:	4413      	add	r3, r2
90002480:	683a      	ldr	r2, [r7, #0]
90002482:	b292      	uxth	r2, r2
90002484:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002486:	2300      	movs	r3, #0
}
90002488:	4618      	mov	r0, r3
9000248a:	3714      	adds	r7, #20
9000248c:	46bd      	mov	sp, r7
9000248e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002492:	4770      	bx	lr
90002494:	200011f4 	.word	0x200011f4
90002498:	2000114c 	.word	0x2000114c

9000249c <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
9000249c:	b580      	push	{r7, lr}
9000249e:	b088      	sub	sp, #32
900024a0:	af02      	add	r7, sp, #8
900024a2:	60f8      	str	r0, [r7, #12]
900024a4:	60b9      	str	r1, [r7, #8]
900024a6:	607a      	str	r2, [r7, #4]
900024a8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
900024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900024ac:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
900024ae:	4a2d      	ldr	r2, [pc, #180]	@ (90002564 <LL_FillBuffer+0xc8>)
900024b0:	68fb      	ldr	r3, [r7, #12]
900024b2:	015b      	lsls	r3, r3, #5
900024b4:	4413      	add	r3, r2
900024b6:	330c      	adds	r3, #12
900024b8:	681b      	ldr	r3, [r3, #0]
900024ba:	2b02      	cmp	r3, #2
900024bc:	d129      	bne.n	90002512 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
900024be:	2302      	movs	r3, #2
900024c0:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
900024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900024c4:	0adb      	lsrs	r3, r3, #11
900024c6:	f003 021f 	and.w	r2, r3, #31
900024ca:	4613      	mov	r3, r2
900024cc:	011b      	lsls	r3, r3, #4
900024ce:	4413      	add	r3, r2
900024d0:	015a      	lsls	r2, r3, #5
900024d2:	1ad3      	subs	r3, r2, r3
900024d4:	3317      	adds	r3, #23
900024d6:	099b      	lsrs	r3, r3, #6
900024d8:	0419      	lsls	r1, r3, #16
900024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900024dc:	095b      	lsrs	r3, r3, #5
900024de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
900024e2:	4613      	mov	r3, r2
900024e4:	01db      	lsls	r3, r3, #7
900024e6:	4413      	add	r3, r2
900024e8:	005b      	lsls	r3, r3, #1
900024ea:	4413      	add	r3, r2
900024ec:	3321      	adds	r3, #33	@ 0x21
900024ee:	099b      	lsrs	r3, r3, #6
900024f0:	021b      	lsls	r3, r3, #8
900024f2:	4319      	orrs	r1, r3
900024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900024f6:	f003 021f 	and.w	r2, r3, #31
900024fa:	4613      	mov	r3, r2
900024fc:	011b      	lsls	r3, r3, #4
900024fe:	4413      	add	r3, r2
90002500:	015a      	lsls	r2, r3, #5
90002502:	1ad3      	subs	r3, r2, r3
90002504:	3317      	adds	r3, #23
90002506:	099b      	lsrs	r3, r3, #6
90002508:	430b      	orrs	r3, r1
9000250a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
9000250e:	613b      	str	r3, [r7, #16]
    break;
90002510:	e002      	b.n	90002518 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002512:	2300      	movs	r3, #0
90002514:	617b      	str	r3, [r7, #20]
    break;
90002516:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002518:	4b13      	ldr	r3, [pc, #76]	@ (90002568 <LL_FillBuffer+0xcc>)
9000251a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
9000251e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002520:	4a11      	ldr	r2, [pc, #68]	@ (90002568 <LL_FillBuffer+0xcc>)
90002522:	697b      	ldr	r3, [r7, #20]
90002524:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002526:	4a10      	ldr	r2, [pc, #64]	@ (90002568 <LL_FillBuffer+0xcc>)
90002528:	6a3b      	ldr	r3, [r7, #32]
9000252a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
9000252c:	4b0e      	ldr	r3, [pc, #56]	@ (90002568 <LL_FillBuffer+0xcc>)
9000252e:	4a0f      	ldr	r2, [pc, #60]	@ (9000256c <LL_FillBuffer+0xd0>)
90002530:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002532:	480d      	ldr	r0, [pc, #52]	@ (90002568 <LL_FillBuffer+0xcc>)
90002534:	f000 fe50 	bl	900031d8 <HAL_DMA2D_Init>
90002538:	4603      	mov	r3, r0
9000253a:	2b00      	cmp	r3, #0
9000253c:	d10e      	bne.n	9000255c <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
9000253e:	68ba      	ldr	r2, [r7, #8]
90002540:	683b      	ldr	r3, [r7, #0]
90002542:	9300      	str	r3, [sp, #0]
90002544:	687b      	ldr	r3, [r7, #4]
90002546:	6939      	ldr	r1, [r7, #16]
90002548:	4807      	ldr	r0, [pc, #28]	@ (90002568 <LL_FillBuffer+0xcc>)
9000254a:	f000 feb3 	bl	900032b4 <HAL_DMA2D_Start>
9000254e:	4603      	mov	r3, r0
90002550:	2b00      	cmp	r3, #0
90002552:	d103      	bne.n	9000255c <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002554:	2132      	movs	r1, #50	@ 0x32
90002556:	4804      	ldr	r0, [pc, #16]	@ (90002568 <LL_FillBuffer+0xcc>)
90002558:	f000 fed7 	bl	9000330a <HAL_DMA2D_PollForTransfer>
    }
  }
}
9000255c:	bf00      	nop
9000255e:	3718      	adds	r7, #24
90002560:	46bd      	mov	sp, r7
90002562:	bd80      	pop	{r7, pc}
90002564:	200011f4 	.word	0x200011f4
90002568:	200010e4 	.word	0x200010e4
9000256c:	52001000 	.word	0x52001000

90002570 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002570:	b580      	push	{r7, lr}
90002572:	b088      	sub	sp, #32
90002574:	af02      	add	r7, sp, #8
90002576:	60f8      	str	r0, [r7, #12]
90002578:	60b9      	str	r1, [r7, #8]
9000257a:	607a      	str	r2, [r7, #4]
9000257c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000257e:	4a23      	ldr	r2, [pc, #140]	@ (9000260c <LL_ConvertLineToRGB+0x9c>)
90002580:	68fb      	ldr	r3, [r7, #12]
90002582:	015b      	lsls	r3, r3, #5
90002584:	4413      	add	r3, r2
90002586:	330c      	adds	r3, #12
90002588:	681b      	ldr	r3, [r3, #0]
9000258a:	2b02      	cmp	r3, #2
9000258c:	d102      	bne.n	90002594 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000258e:	2302      	movs	r3, #2
90002590:	617b      	str	r3, [r7, #20]
    break;
90002592:	e002      	b.n	9000259a <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002594:	2300      	movs	r3, #0
90002596:	617b      	str	r3, [r7, #20]
    break;
90002598:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
9000259a:	4b1d      	ldr	r3, [pc, #116]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
9000259c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
900025a0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900025a2:	4a1b      	ldr	r2, [pc, #108]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025a4:	697b      	ldr	r3, [r7, #20]
900025a6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
900025a8:	4b19      	ldr	r3, [pc, #100]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025aa:	2200      	movs	r2, #0
900025ac:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
900025ae:	4b18      	ldr	r3, [pc, #96]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025b0:	2200      	movs	r2, #0
900025b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
900025b4:	4b16      	ldr	r3, [pc, #88]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025b6:	22ff      	movs	r2, #255	@ 0xff
900025b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
900025ba:	4a15      	ldr	r2, [pc, #84]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025bc:	6a3b      	ldr	r3, [r7, #32]
900025be:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
900025c0:	4b13      	ldr	r3, [pc, #76]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025c2:	2200      	movs	r2, #0
900025c4:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
900025c6:	4b12      	ldr	r3, [pc, #72]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025c8:	4a12      	ldr	r2, [pc, #72]	@ (90002614 <LL_ConvertLineToRGB+0xa4>)
900025ca:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900025cc:	4810      	ldr	r0, [pc, #64]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025ce:	f000 fe03 	bl	900031d8 <HAL_DMA2D_Init>
900025d2:	4603      	mov	r3, r0
900025d4:	2b00      	cmp	r3, #0
900025d6:	d115      	bne.n	90002604 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
900025d8:	2101      	movs	r1, #1
900025da:	480d      	ldr	r0, [pc, #52]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025dc:	f000 ff7e 	bl	900034dc <HAL_DMA2D_ConfigLayer>
900025e0:	4603      	mov	r3, r0
900025e2:	2b00      	cmp	r3, #0
900025e4:	d10e      	bne.n	90002604 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
900025e6:	68b9      	ldr	r1, [r7, #8]
900025e8:	687a      	ldr	r2, [r7, #4]
900025ea:	2301      	movs	r3, #1
900025ec:	9300      	str	r3, [sp, #0]
900025ee:	683b      	ldr	r3, [r7, #0]
900025f0:	4807      	ldr	r0, [pc, #28]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
900025f2:	f000 fe5f 	bl	900032b4 <HAL_DMA2D_Start>
900025f6:	4603      	mov	r3, r0
900025f8:	2b00      	cmp	r3, #0
900025fa:	d103      	bne.n	90002604 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900025fc:	2132      	movs	r1, #50	@ 0x32
900025fe:	4804      	ldr	r0, [pc, #16]	@ (90002610 <LL_ConvertLineToRGB+0xa0>)
90002600:	f000 fe83 	bl	9000330a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002604:	bf00      	nop
90002606:	3718      	adds	r7, #24
90002608:	46bd      	mov	sp, r7
9000260a:	bd80      	pop	{r7, pc}
9000260c:	200011f4 	.word	0x200011f4
90002610:	200010e4 	.word	0x200010e4
90002614:	52001000 	.word	0x52001000

90002618 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002618:	b580      	push	{r7, lr}
9000261a:	b08e      	sub	sp, #56	@ 0x38
9000261c:	af00      	add	r7, sp, #0
9000261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002620:	687b      	ldr	r3, [r7, #4]
90002622:	681b      	ldr	r3, [r3, #0]
90002624:	4a5b      	ldr	r2, [pc, #364]	@ (90002794 <LTDC_MspInit+0x17c>)
90002626:	4293      	cmp	r3, r2
90002628:	f040 80b0 	bne.w	9000278c <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
9000262c:	4b5a      	ldr	r3, [pc, #360]	@ (90002798 <LTDC_MspInit+0x180>)
9000262e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002632:	4a59      	ldr	r2, [pc, #356]	@ (90002798 <LTDC_MspInit+0x180>)
90002634:	f043 0308 	orr.w	r3, r3, #8
90002638:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
9000263c:	4b56      	ldr	r3, [pc, #344]	@ (90002798 <LTDC_MspInit+0x180>)
9000263e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002642:	f003 0308 	and.w	r3, r3, #8
90002646:	623b      	str	r3, [r7, #32]
90002648:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
9000264a:	4b53      	ldr	r3, [pc, #332]	@ (90002798 <LTDC_MspInit+0x180>)
9000264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002650:	4a51      	ldr	r2, [pc, #324]	@ (90002798 <LTDC_MspInit+0x180>)
90002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000265a:	4b4f      	ldr	r3, [pc, #316]	@ (90002798 <LTDC_MspInit+0x180>)
9000265c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002664:	61fb      	str	r3, [r7, #28]
90002666:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002668:	4b4b      	ldr	r3, [pc, #300]	@ (90002798 <LTDC_MspInit+0x180>)
9000266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000266e:	4a4a      	ldr	r2, [pc, #296]	@ (90002798 <LTDC_MspInit+0x180>)
90002670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002678:	4b47      	ldr	r3, [pc, #284]	@ (90002798 <LTDC_MspInit+0x180>)
9000267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000267e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002682:	61bb      	str	r3, [r7, #24]
90002684:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002686:	4b44      	ldr	r3, [pc, #272]	@ (90002798 <LTDC_MspInit+0x180>)
90002688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000268c:	4a42      	ldr	r2, [pc, #264]	@ (90002798 <LTDC_MspInit+0x180>)
9000268e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002696:	4b40      	ldr	r3, [pc, #256]	@ (90002798 <LTDC_MspInit+0x180>)
90002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900026a0:	617b      	str	r3, [r7, #20]
900026a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900026a4:	4b3c      	ldr	r3, [pc, #240]	@ (90002798 <LTDC_MspInit+0x180>)
900026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900026aa:	4a3b      	ldr	r2, [pc, #236]	@ (90002798 <LTDC_MspInit+0x180>)
900026ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900026b4:	4b38      	ldr	r3, [pc, #224]	@ (90002798 <LTDC_MspInit+0x180>)
900026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900026ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900026be:	613b      	str	r3, [r7, #16]
900026c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
900026c2:	4b35      	ldr	r3, [pc, #212]	@ (90002798 <LTDC_MspInit+0x180>)
900026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900026c8:	4a33      	ldr	r2, [pc, #204]	@ (90002798 <LTDC_MspInit+0x180>)
900026ca:	f043 0308 	orr.w	r3, r3, #8
900026ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900026d2:	4b31      	ldr	r3, [pc, #196]	@ (90002798 <LTDC_MspInit+0x180>)
900026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900026d8:	f003 0308 	and.w	r3, r3, #8
900026dc:	60fb      	str	r3, [r7, #12]
900026de:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
900026e0:	f24d 2303 	movw	r3, #53763	@ 0xd203
900026e4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900026e6:	2302      	movs	r3, #2
900026e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900026ea:	2300      	movs	r3, #0
900026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900026ee:	2302      	movs	r3, #2
900026f0:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900026f2:	230e      	movs	r3, #14
900026f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900026f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900026fa:	4619      	mov	r1, r3
900026fc:	4827      	ldr	r0, [pc, #156]	@ (9000279c <LTDC_MspInit+0x184>)
900026fe:	f001 f841 	bl	90003784 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002706:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002708:	230e      	movs	r3, #14
9000270a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
9000270c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002710:	4619      	mov	r1, r3
90002712:	4823      	ldr	r0, [pc, #140]	@ (900027a0 <LTDC_MspInit+0x188>)
90002714:	f001 f836 	bl	90003784 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002718:	23ff      	movs	r3, #255	@ 0xff
9000271a:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000271c:	230e      	movs	r3, #14
9000271e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002724:	4619      	mov	r1, r3
90002726:	481f      	ldr	r0, [pc, #124]	@ (900027a4 <LTDC_MspInit+0x18c>)
90002728:	f001 f82c 	bl	90003784 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
9000272c:	f240 2302 	movw	r3, #514	@ 0x202
90002730:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002732:	2302      	movs	r3, #2
90002734:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002736:	2300      	movs	r3, #0
90002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000273a:	2302      	movs	r3, #2
9000273c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000273e:	230e      	movs	r3, #14
90002740:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002746:	4619      	mov	r1, r3
90002748:	4817      	ldr	r0, [pc, #92]	@ (900027a8 <LTDC_MspInit+0x190>)
9000274a:	f001 f81b 	bl	90003784 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
9000274e:	2380      	movs	r3, #128	@ 0x80
90002750:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002752:	2301      	movs	r3, #1
90002754:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000275a:	4619      	mov	r1, r3
9000275c:	4813      	ldr	r0, [pc, #76]	@ (900027ac <LTDC_MspInit+0x194>)
9000275e:	f001 f811 	bl	90003784 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002762:	2201      	movs	r2, #1
90002764:	2180      	movs	r1, #128	@ 0x80
90002766:	4811      	ldr	r0, [pc, #68]	@ (900027ac <LTDC_MspInit+0x194>)
90002768:	f001 f9d4 	bl	90003b14 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
9000276c:	4b0a      	ldr	r3, [pc, #40]	@ (90002798 <LTDC_MspInit+0x180>)
9000276e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002772:	4a09      	ldr	r2, [pc, #36]	@ (90002798 <LTDC_MspInit+0x180>)
90002774:	f043 0308 	orr.w	r3, r3, #8
90002778:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
9000277c:	4b06      	ldr	r3, [pc, #24]	@ (90002798 <LTDC_MspInit+0x180>)
9000277e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002782:	4a05      	ldr	r2, [pc, #20]	@ (90002798 <LTDC_MspInit+0x180>)
90002784:	f023 0308 	bic.w	r3, r3, #8
90002788:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
9000278c:	bf00      	nop
9000278e:	3738      	adds	r7, #56	@ 0x38
90002790:	46bd      	mov	sp, r7
90002792:	bd80      	pop	{r7, pc}
90002794:	50001000 	.word	0x50001000
90002798:	58024400 	.word	0x58024400
9000279c:	58022000 	.word	0x58022000
900027a0:	58022400 	.word	0x58022400
900027a4:	58022800 	.word	0x58022800
900027a8:	58021c00 	.word	0x58021c00
900027ac:	58020c00 	.word	0x58020c00

900027b0 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
900027b0:	b480      	push	{r7}
900027b2:	b085      	sub	sp, #20
900027b4:	af00      	add	r7, sp, #0
900027b6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
900027b8:	687b      	ldr	r3, [r7, #4]
900027ba:	681b      	ldr	r3, [r3, #0]
900027bc:	4a11      	ldr	r2, [pc, #68]	@ (90002804 <DMA2D_MspInit+0x54>)
900027be:	4293      	cmp	r3, r2
900027c0:	d11a      	bne.n	900027f8 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
900027c2:	4b11      	ldr	r3, [pc, #68]	@ (90002808 <DMA2D_MspInit+0x58>)
900027c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900027c8:	4a0f      	ldr	r2, [pc, #60]	@ (90002808 <DMA2D_MspInit+0x58>)
900027ca:	f043 0310 	orr.w	r3, r3, #16
900027ce:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
900027d2:	4b0d      	ldr	r3, [pc, #52]	@ (90002808 <DMA2D_MspInit+0x58>)
900027d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900027d8:	f003 0310 	and.w	r3, r3, #16
900027dc:	60fb      	str	r3, [r7, #12]
900027de:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
900027e0:	4b09      	ldr	r3, [pc, #36]	@ (90002808 <DMA2D_MspInit+0x58>)
900027e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900027e4:	4a08      	ldr	r2, [pc, #32]	@ (90002808 <DMA2D_MspInit+0x58>)
900027e6:	f043 0310 	orr.w	r3, r3, #16
900027ea:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
900027ec:	4b06      	ldr	r3, [pc, #24]	@ (90002808 <DMA2D_MspInit+0x58>)
900027ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900027f0:	4a05      	ldr	r2, [pc, #20]	@ (90002808 <DMA2D_MspInit+0x58>)
900027f2:	f023 0310 	bic.w	r3, r3, #16
900027f6:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
900027f8:	bf00      	nop
900027fa:	3714      	adds	r7, #20
900027fc:	46bd      	mov	sp, r7
900027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90002802:	4770      	bx	lr
90002804:	52001000 	.word	0x52001000
90002808:	58024400 	.word	0x58024400

9000280c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000280c:	b580      	push	{r7, lr}
9000280e:	b08a      	sub	sp, #40	@ 0x28
90002810:	af00      	add	r7, sp, #0
90002812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002814:	4b18      	ldr	r3, [pc, #96]	@ (90002878 <TIMx_PWM_MspInit+0x6c>)
90002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000281a:	4a17      	ldr	r2, [pc, #92]	@ (90002878 <TIMx_PWM_MspInit+0x6c>)
9000281c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002824:	4b14      	ldr	r3, [pc, #80]	@ (90002878 <TIMx_PWM_MspInit+0x6c>)
90002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000282a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000282e:	613b      	str	r3, [r7, #16]
90002830:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002832:	4b11      	ldr	r3, [pc, #68]	@ (90002878 <TIMx_PWM_MspInit+0x6c>)
90002834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002838:	4a0f      	ldr	r2, [pc, #60]	@ (90002878 <TIMx_PWM_MspInit+0x6c>)
9000283a:	f043 0302 	orr.w	r3, r3, #2
9000283e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002842:	4b0d      	ldr	r3, [pc, #52]	@ (90002878 <TIMx_PWM_MspInit+0x6c>)
90002844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002848:	f003 0302 	and.w	r3, r3, #2
9000284c:	60fb      	str	r3, [r7, #12]
9000284e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002850:	2302      	movs	r3, #2
90002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002854:	2300      	movs	r3, #0
90002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002858:	2301      	movs	r3, #1
9000285a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
9000285c:	2303      	movs	r3, #3
9000285e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002860:	2301      	movs	r3, #1
90002862:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002864:	f107 0314 	add.w	r3, r7, #20
90002868:	4619      	mov	r1, r3
9000286a:	4804      	ldr	r0, [pc, #16]	@ (9000287c <TIMx_PWM_MspInit+0x70>)
9000286c:	f000 ff8a 	bl	90003784 <HAL_GPIO_Init>
}
90002870:	bf00      	nop
90002872:	3728      	adds	r7, #40	@ 0x28
90002874:	46bd      	mov	sp, r7
90002876:	bd80      	pop	{r7, pc}
90002878:	58024400 	.word	0x58024400
9000287c:	58022800 	.word	0x58022800

90002880 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002880:	b580      	push	{r7, lr}
90002882:	b082      	sub	sp, #8
90002884:	af00      	add	r7, sp, #0
90002886:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002888:	687b      	ldr	r3, [r7, #4]
9000288a:	4a11      	ldr	r2, [pc, #68]	@ (900028d0 <TIMx_PWM_Init+0x50>)
9000288c:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
9000288e:	6878      	ldr	r0, [r7, #4]
90002890:	f006 fe82 	bl	90009598 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002894:	6878      	ldr	r0, [r7, #4]
90002896:	f7ff ffb9 	bl	9000280c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
9000289a:	687b      	ldr	r3, [r7, #4]
9000289c:	2204      	movs	r2, #4
9000289e:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
900028a0:	687b      	ldr	r3, [r7, #4]
900028a2:	f24c 3250 	movw	r2, #50000	@ 0xc350
900028a6:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
900028a8:	687b      	ldr	r3, [r7, #4]
900028aa:	2200      	movs	r2, #0
900028ac:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
900028ae:	687b      	ldr	r3, [r7, #4]
900028b0:	2200      	movs	r2, #0
900028b2:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
900028b4:	687b      	ldr	r3, [r7, #4]
900028b6:	2200      	movs	r2, #0
900028b8:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
900028ba:	687b      	ldr	r3, [r7, #4]
900028bc:	2200      	movs	r2, #0
900028be:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
900028c0:	6878      	ldr	r0, [r7, #4]
900028c2:	f006 fe12 	bl	900094ea <HAL_TIM_PWM_Init>
}
900028c6:	bf00      	nop
900028c8:	3708      	adds	r7, #8
900028ca:	46bd      	mov	sp, r7
900028cc:	bd80      	pop	{r7, pc}
900028ce:	bf00      	nop
900028d0:	40010400 	.word	0x40010400

900028d4 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
900028d4:	b580      	push	{r7, lr}
900028d6:	b084      	sub	sp, #16
900028d8:	af00      	add	r7, sp, #0
900028da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
900028dc:	2300      	movs	r3, #0
900028de:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
900028e0:	687b      	ldr	r3, [r7, #4]
900028e2:	2b00      	cmp	r3, #0
900028e4:	d003      	beq.n	900028ee <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
900028e6:	f06f 0301 	mvn.w	r3, #1
900028ea:	60fb      	str	r3, [r7, #12]
900028ec:	e044      	b.n	90002978 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
900028ee:	687b      	ldr	r3, [r7, #4]
900028f0:	2234      	movs	r2, #52	@ 0x34
900028f2:	fb02 f303 	mul.w	r3, r2, r3
900028f6:	4a23      	ldr	r2, [pc, #140]	@ (90002984 <BSP_SDRAM_Init+0xb0>)
900028f8:	4413      	add	r3, r2
900028fa:	4618      	mov	r0, r3
900028fc:	f000 f892 	bl	90002a24 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002900:	687b      	ldr	r3, [r7, #4]
90002902:	2234      	movs	r2, #52	@ 0x34
90002904:	fb02 f303 	mul.w	r3, r2, r3
90002908:	4a1e      	ldr	r2, [pc, #120]	@ (90002984 <BSP_SDRAM_Init+0xb0>)
9000290a:	4413      	add	r3, r2
9000290c:	2210      	movs	r2, #16
9000290e:	2104      	movs	r1, #4
90002910:	4618      	mov	r0, r3
90002912:	f000 f83b 	bl	9000298c <MX_SDRAM_BANK2_Init>
90002916:	4603      	mov	r3, r0
90002918:	2b00      	cmp	r3, #0
9000291a:	d003      	beq.n	90002924 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
9000291c:	f04f 33ff 	mov.w	r3, #4294967295
90002920:	60fb      	str	r3, [r7, #12]
90002922:	e029      	b.n	90002978 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002924:	4b18      	ldr	r3, [pc, #96]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
90002926:	2208      	movs	r2, #8
90002928:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
9000292a:	4b17      	ldr	r3, [pc, #92]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
9000292c:	2203      	movs	r2, #3
9000292e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002930:	4b15      	ldr	r3, [pc, #84]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
90002932:	f240 6203 	movw	r2, #1539	@ 0x603
90002936:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002938:	4b13      	ldr	r3, [pc, #76]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
9000293a:	2200      	movs	r2, #0
9000293c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
9000293e:	4b12      	ldr	r3, [pc, #72]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
90002940:	2200      	movs	r2, #0
90002942:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002944:	4b10      	ldr	r3, [pc, #64]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
90002946:	2230      	movs	r2, #48	@ 0x30
90002948:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
9000294a:	4b0f      	ldr	r3, [pc, #60]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
9000294c:	2200      	movs	r2, #0
9000294e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002950:	4b0d      	ldr	r3, [pc, #52]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
90002952:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002956:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002958:	687b      	ldr	r3, [r7, #4]
9000295a:	2234      	movs	r2, #52	@ 0x34
9000295c:	fb02 f303 	mul.w	r3, r2, r3
90002960:	4a08      	ldr	r2, [pc, #32]	@ (90002984 <BSP_SDRAM_Init+0xb0>)
90002962:	4413      	add	r3, r2
90002964:	4908      	ldr	r1, [pc, #32]	@ (90002988 <BSP_SDRAM_Init+0xb4>)
90002966:	4618      	mov	r0, r3
90002968:	f7fe fbdf 	bl	9000112a <MT48LC4M32B2_Init>
9000296c:	4603      	mov	r3, r0
9000296e:	2b00      	cmp	r3, #0
90002970:	d002      	beq.n	90002978 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002972:	f06f 0304 	mvn.w	r3, #4
90002976:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002978:	68fb      	ldr	r3, [r7, #12]
}
9000297a:	4618      	mov	r0, r3
9000297c:	3710      	adds	r7, #16
9000297e:	46bd      	mov	sp, r7
90002980:	bd80      	pop	{r7, pc}
90002982:	bf00      	nop
90002984:	20001214 	.word	0x20001214
90002988:	20001248 	.word	0x20001248

9000298c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
9000298c:	b580      	push	{r7, lr}
9000298e:	b08c      	sub	sp, #48	@ 0x30
90002990:	af00      	add	r7, sp, #0
90002992:	60f8      	str	r0, [r7, #12]
90002994:	60b9      	str	r1, [r7, #8]
90002996:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002998:	4b20      	ldr	r3, [pc, #128]	@ (90002a1c <MX_SDRAM_BANK2_Init+0x90>)
9000299a:	4a21      	ldr	r2, [pc, #132]	@ (90002a20 <MX_SDRAM_BANK2_Init+0x94>)
9000299c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
9000299e:	68fb      	ldr	r3, [r7, #12]
900029a0:	2201      	movs	r2, #1
900029a2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900029a4:	68fb      	ldr	r3, [r7, #12]
900029a6:	2200      	movs	r2, #0
900029a8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
900029aa:	68fb      	ldr	r3, [r7, #12]
900029ac:	68ba      	ldr	r2, [r7, #8]
900029ae:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
900029b0:	68fb      	ldr	r3, [r7, #12]
900029b2:	687a      	ldr	r2, [r7, #4]
900029b4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900029b6:	4b19      	ldr	r3, [pc, #100]	@ (90002a1c <MX_SDRAM_BANK2_Init+0x90>)
900029b8:	2240      	movs	r2, #64	@ 0x40
900029ba:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900029bc:	68fb      	ldr	r3, [r7, #12]
900029be:	f44f 72c0 	mov.w	r2, #384	@ 0x180
900029c2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900029c4:	68fb      	ldr	r3, [r7, #12]
900029c6:	2200      	movs	r2, #0
900029c8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
900029ca:	68fb      	ldr	r3, [r7, #12]
900029cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
900029d0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900029d2:	68fb      	ldr	r3, [r7, #12]
900029d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
900029d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900029da:	68fb      	ldr	r3, [r7, #12]
900029dc:	2200      	movs	r2, #0
900029de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
900029e0:	2302      	movs	r3, #2
900029e2:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
900029e4:	2307      	movs	r3, #7
900029e6:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
900029e8:	2304      	movs	r3, #4
900029ea:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
900029ec:	2307      	movs	r3, #7
900029ee:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
900029f0:	2302      	movs	r3, #2
900029f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
900029f4:	2302      	movs	r3, #2
900029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
900029f8:	2302      	movs	r3, #2
900029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900029fc:	f107 0314 	add.w	r3, r7, #20
90002a00:	4619      	mov	r1, r3
90002a02:	68f8      	ldr	r0, [r7, #12]
90002a04:	f006 fcce 	bl	900093a4 <HAL_SDRAM_Init>
90002a08:	4603      	mov	r3, r0
90002a0a:	2b00      	cmp	r3, #0
90002a0c:	d001      	beq.n	90002a12 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002a0e:	2301      	movs	r3, #1
90002a10:	e000      	b.n	90002a14 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002a12:	2300      	movs	r3, #0
}
90002a14:	4618      	mov	r0, r3
90002a16:	3730      	adds	r7, #48	@ 0x30
90002a18:	46bd      	mov	sp, r7
90002a1a:	bd80      	pop	{r7, pc}
90002a1c:	20001214 	.word	0x20001214
90002a20:	52004140 	.word	0x52004140

90002a24 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002a24:	b580      	push	{r7, lr}
90002a26:	b08e      	sub	sp, #56	@ 0x38
90002a28:	af00      	add	r7, sp, #0
90002a2a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002a2c:	4b73      	ldr	r3, [pc, #460]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a32:	4a72      	ldr	r2, [pc, #456]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002a38:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002a3c:	4b6f      	ldr	r3, [pc, #444]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002a46:	623b      	str	r3, [r7, #32]
90002a48:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002a4a:	4b6c      	ldr	r3, [pc, #432]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a50:	4a6a      	ldr	r2, [pc, #424]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a52:	f043 0301 	orr.w	r3, r3, #1
90002a56:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002a5a:	4b68      	ldr	r3, [pc, #416]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a60:	f003 0301 	and.w	r3, r3, #1
90002a64:	61fb      	str	r3, [r7, #28]
90002a66:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002a68:	4b64      	ldr	r3, [pc, #400]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a6e:	4a63      	ldr	r2, [pc, #396]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a70:	f043 0308 	orr.w	r3, r3, #8
90002a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a78:	4b60      	ldr	r3, [pc, #384]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a7e:	f003 0308 	and.w	r3, r3, #8
90002a82:	61bb      	str	r3, [r7, #24]
90002a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002a86:	4b5d      	ldr	r3, [pc, #372]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a8c:	4a5b      	ldr	r2, [pc, #364]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a8e:	f043 0310 	orr.w	r3, r3, #16
90002a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a96:	4b59      	ldr	r3, [pc, #356]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a9c:	f003 0310 	and.w	r3, r3, #16
90002aa0:	617b      	str	r3, [r7, #20]
90002aa2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002aa4:	4b55      	ldr	r3, [pc, #340]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aaa:	4a54      	ldr	r2, [pc, #336]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002aac:	f043 0320 	orr.w	r3, r3, #32
90002ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ab4:	4b51      	ldr	r3, [pc, #324]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aba:	f003 0320 	and.w	r3, r3, #32
90002abe:	613b      	str	r3, [r7, #16]
90002ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002ac2:	4b4e      	ldr	r3, [pc, #312]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ac8:	4a4c      	ldr	r2, [pc, #304]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ad2:	4b4a      	ldr	r3, [pc, #296]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002adc:	60fb      	str	r3, [r7, #12]
90002ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002ae0:	4b46      	ldr	r3, [pc, #280]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ae6:	4a45      	ldr	r2, [pc, #276]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002af0:	4b42      	ldr	r3, [pc, #264]	@ (90002bfc <SDRAM_MspInit+0x1d8>)
90002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002afa:	60bb      	str	r3, [r7, #8]
90002afc:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002afe:	2302      	movs	r3, #2
90002b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002b02:	2301      	movs	r3, #1
90002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002b06:	2303      	movs	r3, #3
90002b08:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002b0a:	230c      	movs	r3, #12
90002b0c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002b0e:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002b12:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b18:	4619      	mov	r1, r3
90002b1a:	4839      	ldr	r0, [pc, #228]	@ (90002c00 <SDRAM_MspInit+0x1dc>)
90002b1c:	f000 fe32 	bl	90003784 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002b20:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002b24:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b2a:	4619      	mov	r1, r3
90002b2c:	4835      	ldr	r0, [pc, #212]	@ (90002c04 <SDRAM_MspInit+0x1e0>)
90002b2e:	f000 fe29 	bl	90003784 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002b32:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002b36:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b3c:	4619      	mov	r1, r3
90002b3e:	4832      	ldr	r0, [pc, #200]	@ (90002c08 <SDRAM_MspInit+0x1e4>)
90002b40:	f000 fe20 	bl	90003784 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002b44:	f248 1333 	movw	r3, #33075	@ 0x8133
90002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b4e:	4619      	mov	r1, r3
90002b50:	482e      	ldr	r0, [pc, #184]	@ (90002c0c <SDRAM_MspInit+0x1e8>)
90002b52:	f000 fe17 	bl	90003784 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002b56:	23e0      	movs	r3, #224	@ 0xe0
90002b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b5e:	4619      	mov	r1, r3
90002b60:	482b      	ldr	r0, [pc, #172]	@ (90002c10 <SDRAM_MspInit+0x1ec>)
90002b62:	f000 fe0f 	bl	90003784 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002b66:	4b2b      	ldr	r3, [pc, #172]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002b6c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002b6e:	4b29      	ldr	r3, [pc, #164]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002b74:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002b76:	4b27      	ldr	r3, [pc, #156]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b78:	2280      	movs	r2, #128	@ 0x80
90002b7a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002b7c:	4b25      	ldr	r3, [pc, #148]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b7e:	2200      	movs	r2, #0
90002b80:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002b82:	4b24      	ldr	r3, [pc, #144]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b84:	f240 2202 	movw	r2, #514	@ 0x202
90002b88:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002b8a:	4b22      	ldr	r3, [pc, #136]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b8c:	f640 0208 	movw	r2, #2056	@ 0x808
90002b90:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002b92:	4b20      	ldr	r3, [pc, #128]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b94:	2220      	movs	r2, #32
90002b96:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002b98:	4b1e      	ldr	r3, [pc, #120]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002b9a:	2280      	movs	r2, #128	@ 0x80
90002b9c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002b9e:	4b1d      	ldr	r3, [pc, #116]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002ba0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002ba6:	4b1b      	ldr	r3, [pc, #108]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002ba8:	2200      	movs	r2, #0
90002baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002bac:	4b19      	ldr	r3, [pc, #100]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bae:	2200      	movs	r2, #0
90002bb0:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002bb2:	4b18      	ldr	r3, [pc, #96]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bb4:	2280      	movs	r2, #128	@ 0x80
90002bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002bb8:	4b16      	ldr	r3, [pc, #88]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bba:	2200      	movs	r2, #0
90002bbc:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002bbe:	4b15      	ldr	r3, [pc, #84]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bc0:	2200      	movs	r2, #0
90002bc2:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002bc4:	4b13      	ldr	r3, [pc, #76]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bc6:	4a14      	ldr	r2, [pc, #80]	@ (90002c18 <SDRAM_MspInit+0x1f4>)
90002bc8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002bca:	4b14      	ldr	r3, [pc, #80]	@ (90002c1c <SDRAM_MspInit+0x1f8>)
90002bcc:	4a11      	ldr	r2, [pc, #68]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bce:	631a      	str	r2, [r3, #48]	@ 0x30
90002bd0:	4b10      	ldr	r3, [pc, #64]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bd2:	4a12      	ldr	r2, [pc, #72]	@ (90002c1c <SDRAM_MspInit+0x1f8>)
90002bd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002bd6:	480f      	ldr	r0, [pc, #60]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bd8:	f003 fce2 	bl	900065a0 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002bdc:	480d      	ldr	r0, [pc, #52]	@ (90002c14 <SDRAM_MspInit+0x1f0>)
90002bde:	f003 fc93 	bl	90006508 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002be2:	2200      	movs	r2, #0
90002be4:	210f      	movs	r1, #15
90002be6:	207a      	movs	r0, #122	@ 0x7a
90002be8:	f000 fa49 	bl	9000307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002bec:	207a      	movs	r0, #122	@ 0x7a
90002bee:	f000 fa60 	bl	900030b2 <HAL_NVIC_EnableIRQ>
}
90002bf2:	bf00      	nop
90002bf4:	3738      	adds	r7, #56	@ 0x38
90002bf6:	46bd      	mov	sp, r7
90002bf8:	bd80      	pop	{r7, pc}
90002bfa:	bf00      	nop
90002bfc:	58024400 	.word	0x58024400
90002c00:	58020c00 	.word	0x58020c00
90002c04:	58021000 	.word	0x58021000
90002c08:	58021400 	.word	0x58021400
90002c0c:	58021800 	.word	0x58021800
90002c10:	58021c00 	.word	0x58021c00
90002c14:	20001268 	.word	0x20001268
90002c18:	52000040 	.word	0x52000040
90002c1c:	20001214 	.word	0x20001214

90002c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90002c20:	b480      	push	{r7}
90002c22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90002c24:	4b29      	ldr	r3, [pc, #164]	@ (90002ccc <SystemInit+0xac>)
90002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90002c2a:	4a28      	ldr	r2, [pc, #160]	@ (90002ccc <SystemInit+0xac>)
90002c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90002c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90002c34:	4b26      	ldr	r3, [pc, #152]	@ (90002cd0 <SystemInit+0xb0>)
90002c36:	681b      	ldr	r3, [r3, #0]
90002c38:	4a25      	ldr	r2, [pc, #148]	@ (90002cd0 <SystemInit+0xb0>)
90002c3a:	f043 0301 	orr.w	r3, r3, #1
90002c3e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002c40:	4b23      	ldr	r3, [pc, #140]	@ (90002cd0 <SystemInit+0xb0>)
90002c42:	2200      	movs	r2, #0
90002c44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90002c46:	4b22      	ldr	r3, [pc, #136]	@ (90002cd0 <SystemInit+0xb0>)
90002c48:	681a      	ldr	r2, [r3, #0]
90002c4a:	4921      	ldr	r1, [pc, #132]	@ (90002cd0 <SystemInit+0xb0>)
90002c4c:	4b21      	ldr	r3, [pc, #132]	@ (90002cd4 <SystemInit+0xb4>)
90002c4e:	4013      	ands	r3, r2
90002c50:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002c52:	4b1f      	ldr	r3, [pc, #124]	@ (90002cd0 <SystemInit+0xb0>)
90002c54:	2200      	movs	r2, #0
90002c56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90002c58:	4b1d      	ldr	r3, [pc, #116]	@ (90002cd0 <SystemInit+0xb0>)
90002c5a:	2200      	movs	r2, #0
90002c5c:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90002c5e:	4b1c      	ldr	r3, [pc, #112]	@ (90002cd0 <SystemInit+0xb0>)
90002c60:	2200      	movs	r2, #0
90002c62:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90002c64:	4b1a      	ldr	r3, [pc, #104]	@ (90002cd0 <SystemInit+0xb0>)
90002c66:	2200      	movs	r2, #0
90002c68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90002c6a:	4b19      	ldr	r3, [pc, #100]	@ (90002cd0 <SystemInit+0xb0>)
90002c6c:	2200      	movs	r2, #0
90002c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90002c70:	4b17      	ldr	r3, [pc, #92]	@ (90002cd0 <SystemInit+0xb0>)
90002c72:	2200      	movs	r2, #0
90002c74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90002c76:	4b16      	ldr	r3, [pc, #88]	@ (90002cd0 <SystemInit+0xb0>)
90002c78:	2200      	movs	r2, #0
90002c7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90002c7c:	4b14      	ldr	r3, [pc, #80]	@ (90002cd0 <SystemInit+0xb0>)
90002c7e:	2200      	movs	r2, #0
90002c80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90002c82:	4b13      	ldr	r3, [pc, #76]	@ (90002cd0 <SystemInit+0xb0>)
90002c84:	2200      	movs	r2, #0
90002c86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90002c88:	4b11      	ldr	r3, [pc, #68]	@ (90002cd0 <SystemInit+0xb0>)
90002c8a:	2200      	movs	r2, #0
90002c8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90002c8e:	4b10      	ldr	r3, [pc, #64]	@ (90002cd0 <SystemInit+0xb0>)
90002c90:	2200      	movs	r2, #0
90002c92:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90002c94:	4b0e      	ldr	r3, [pc, #56]	@ (90002cd0 <SystemInit+0xb0>)
90002c96:	681b      	ldr	r3, [r3, #0]
90002c98:	4a0d      	ldr	r2, [pc, #52]	@ (90002cd0 <SystemInit+0xb0>)
90002c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90002c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (90002cd0 <SystemInit+0xb0>)
90002ca2:	2200      	movs	r2, #0
90002ca4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90002ca6:	4b0c      	ldr	r3, [pc, #48]	@ (90002cd8 <SystemInit+0xb8>)
90002ca8:	681a      	ldr	r2, [r3, #0]
90002caa:	4b0c      	ldr	r3, [pc, #48]	@ (90002cdc <SystemInit+0xbc>)
90002cac:	4013      	ands	r3, r2
90002cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90002cb2:	d202      	bcs.n	90002cba <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90002cb4:	4b0a      	ldr	r3, [pc, #40]	@ (90002ce0 <SystemInit+0xc0>)
90002cb6:	2201      	movs	r2, #1
90002cb8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90002cba:	4b04      	ldr	r3, [pc, #16]	@ (90002ccc <SystemInit+0xac>)
90002cbc:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90002cc0:	609a      	str	r2, [r3, #8]
#endif  


}
90002cc2:	bf00      	nop
90002cc4:	46bd      	mov	sp, r7
90002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
90002cca:	4770      	bx	lr
90002ccc:	e000ed00 	.word	0xe000ed00
90002cd0:	58024400 	.word	0x58024400
90002cd4:	eaf6ed7f 	.word	0xeaf6ed7f
90002cd8:	5c001000 	.word	0x5c001000
90002cdc:	ffff0000 	.word	0xffff0000
90002ce0:	51008108 	.word	0x51008108

90002ce4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90002ce4:	b480      	push	{r7}
90002ce6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90002ce8:	4b09      	ldr	r3, [pc, #36]	@ (90002d10 <ExitRun0Mode+0x2c>)
90002cea:	68db      	ldr	r3, [r3, #12]
90002cec:	4a08      	ldr	r2, [pc, #32]	@ (90002d10 <ExitRun0Mode+0x2c>)
90002cee:	f043 0302 	orr.w	r3, r3, #2
90002cf2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90002cf4:	bf00      	nop
90002cf6:	4b06      	ldr	r3, [pc, #24]	@ (90002d10 <ExitRun0Mode+0x2c>)
90002cf8:	685b      	ldr	r3, [r3, #4]
90002cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90002cfe:	2b00      	cmp	r3, #0
90002d00:	d0f9      	beq.n	90002cf6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90002d02:	bf00      	nop
90002d04:	bf00      	nop
90002d06:	46bd      	mov	sp, r7
90002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
90002d0c:	4770      	bx	lr
90002d0e:	bf00      	nop
90002d10:	58024800 	.word	0x58024800

90002d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90002d14:	b580      	push	{r7, lr}
90002d16:	b082      	sub	sp, #8
90002d18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002d1a:	2003      	movs	r0, #3
90002d1c:	f000 f9a4 	bl	90003068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90002d20:	f004 fb3e 	bl	900073a0 <HAL_RCC_GetSysClockFreq>
90002d24:	4602      	mov	r2, r0
90002d26:	4b15      	ldr	r3, [pc, #84]	@ (90002d7c <HAL_Init+0x68>)
90002d28:	699b      	ldr	r3, [r3, #24]
90002d2a:	0a1b      	lsrs	r3, r3, #8
90002d2c:	f003 030f 	and.w	r3, r3, #15
90002d30:	4913      	ldr	r1, [pc, #76]	@ (90002d80 <HAL_Init+0x6c>)
90002d32:	5ccb      	ldrb	r3, [r1, r3]
90002d34:	f003 031f 	and.w	r3, r3, #31
90002d38:	fa22 f303 	lsr.w	r3, r2, r3
90002d3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90002d3e:	4b0f      	ldr	r3, [pc, #60]	@ (90002d7c <HAL_Init+0x68>)
90002d40:	699b      	ldr	r3, [r3, #24]
90002d42:	f003 030f 	and.w	r3, r3, #15
90002d46:	4a0e      	ldr	r2, [pc, #56]	@ (90002d80 <HAL_Init+0x6c>)
90002d48:	5cd3      	ldrb	r3, [r2, r3]
90002d4a:	f003 031f 	and.w	r3, r3, #31
90002d4e:	687a      	ldr	r2, [r7, #4]
90002d50:	fa22 f303 	lsr.w	r3, r2, r3
90002d54:	4a0b      	ldr	r2, [pc, #44]	@ (90002d84 <HAL_Init+0x70>)
90002d56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90002d58:	4a0b      	ldr	r2, [pc, #44]	@ (90002d88 <HAL_Init+0x74>)
90002d5a:	687b      	ldr	r3, [r7, #4]
90002d5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90002d5e:	200f      	movs	r0, #15
90002d60:	f000 f81c 	bl	90002d9c <HAL_InitTick>
90002d64:	4603      	mov	r3, r0
90002d66:	2b00      	cmp	r3, #0
90002d68:	d001      	beq.n	90002d6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90002d6a:	2301      	movs	r3, #1
90002d6c:	e002      	b.n	90002d74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90002d6e:	f000 f80d 	bl	90002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90002d72:	2300      	movs	r3, #0
}
90002d74:	4618      	mov	r0, r3
90002d76:	3708      	adds	r7, #8
90002d78:	46bd      	mov	sp, r7
90002d7a:	bd80      	pop	{r7, pc}
90002d7c:	58024400 	.word	0x58024400
90002d80:	9000cdb0 	.word	0x9000cdb0
90002d84:	2000000c 	.word	0x2000000c
90002d88:	20000008 	.word	0x20000008

90002d8c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90002d8c:	b480      	push	{r7}
90002d8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90002d90:	bf00      	nop
90002d92:	46bd      	mov	sp, r7
90002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
90002d98:	4770      	bx	lr
	...

90002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002d9c:	b580      	push	{r7, lr}
90002d9e:	b082      	sub	sp, #8
90002da0:	af00      	add	r7, sp, #0
90002da2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90002da4:	4b15      	ldr	r3, [pc, #84]	@ (90002dfc <HAL_InitTick+0x60>)
90002da6:	781b      	ldrb	r3, [r3, #0]
90002da8:	2b00      	cmp	r3, #0
90002daa:	d101      	bne.n	90002db0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90002dac:	2301      	movs	r3, #1
90002dae:	e021      	b.n	90002df4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90002db0:	4b13      	ldr	r3, [pc, #76]	@ (90002e00 <HAL_InitTick+0x64>)
90002db2:	681a      	ldr	r2, [r3, #0]
90002db4:	4b11      	ldr	r3, [pc, #68]	@ (90002dfc <HAL_InitTick+0x60>)
90002db6:	781b      	ldrb	r3, [r3, #0]
90002db8:	4619      	mov	r1, r3
90002dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90002dbe:	fbb3 f3f1 	udiv	r3, r3, r1
90002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
90002dc6:	4618      	mov	r0, r3
90002dc8:	f000 f981 	bl	900030ce <HAL_SYSTICK_Config>
90002dcc:	4603      	mov	r3, r0
90002dce:	2b00      	cmp	r3, #0
90002dd0:	d001      	beq.n	90002dd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90002dd2:	2301      	movs	r3, #1
90002dd4:	e00e      	b.n	90002df4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90002dd6:	687b      	ldr	r3, [r7, #4]
90002dd8:	2b0f      	cmp	r3, #15
90002dda:	d80a      	bhi.n	90002df2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90002ddc:	2200      	movs	r2, #0
90002dde:	6879      	ldr	r1, [r7, #4]
90002de0:	f04f 30ff 	mov.w	r0, #4294967295
90002de4:	f000 f94b 	bl	9000307e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90002de8:	4a06      	ldr	r2, [pc, #24]	@ (90002e04 <HAL_InitTick+0x68>)
90002dea:	687b      	ldr	r3, [r7, #4]
90002dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90002dee:	2300      	movs	r3, #0
90002df0:	e000      	b.n	90002df4 <HAL_InitTick+0x58>
    return HAL_ERROR;
90002df2:	2301      	movs	r3, #1
}
90002df4:	4618      	mov	r0, r3
90002df6:	3708      	adds	r7, #8
90002df8:	46bd      	mov	sp, r7
90002dfa:	bd80      	pop	{r7, pc}
90002dfc:	20000014 	.word	0x20000014
90002e00:	20000008 	.word	0x20000008
90002e04:	20000010 	.word	0x20000010

90002e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90002e08:	b480      	push	{r7}
90002e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90002e0c:	4b06      	ldr	r3, [pc, #24]	@ (90002e28 <HAL_IncTick+0x20>)
90002e0e:	781b      	ldrb	r3, [r3, #0]
90002e10:	461a      	mov	r2, r3
90002e12:	4b06      	ldr	r3, [pc, #24]	@ (90002e2c <HAL_IncTick+0x24>)
90002e14:	681b      	ldr	r3, [r3, #0]
90002e16:	4413      	add	r3, r2
90002e18:	4a04      	ldr	r2, [pc, #16]	@ (90002e2c <HAL_IncTick+0x24>)
90002e1a:	6013      	str	r3, [r2, #0]
}
90002e1c:	bf00      	nop
90002e1e:	46bd      	mov	sp, r7
90002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
90002e24:	4770      	bx	lr
90002e26:	bf00      	nop
90002e28:	20000014 	.word	0x20000014
90002e2c:	200012d4 	.word	0x200012d4

90002e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90002e30:	b480      	push	{r7}
90002e32:	af00      	add	r7, sp, #0
  return uwTick;
90002e34:	4b03      	ldr	r3, [pc, #12]	@ (90002e44 <HAL_GetTick+0x14>)
90002e36:	681b      	ldr	r3, [r3, #0]
}
90002e38:	4618      	mov	r0, r3
90002e3a:	46bd      	mov	sp, r7
90002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002e40:	4770      	bx	lr
90002e42:	bf00      	nop
90002e44:	200012d4 	.word	0x200012d4

90002e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90002e48:	b580      	push	{r7, lr}
90002e4a:	b084      	sub	sp, #16
90002e4c:	af00      	add	r7, sp, #0
90002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90002e50:	f7ff ffee 	bl	90002e30 <HAL_GetTick>
90002e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90002e56:	687b      	ldr	r3, [r7, #4]
90002e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90002e5a:	68fb      	ldr	r3, [r7, #12]
90002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
90002e60:	d005      	beq.n	90002e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90002e62:	4b0a      	ldr	r3, [pc, #40]	@ (90002e8c <HAL_Delay+0x44>)
90002e64:	781b      	ldrb	r3, [r3, #0]
90002e66:	461a      	mov	r2, r3
90002e68:	68fb      	ldr	r3, [r7, #12]
90002e6a:	4413      	add	r3, r2
90002e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90002e6e:	bf00      	nop
90002e70:	f7ff ffde 	bl	90002e30 <HAL_GetTick>
90002e74:	4602      	mov	r2, r0
90002e76:	68bb      	ldr	r3, [r7, #8]
90002e78:	1ad3      	subs	r3, r2, r3
90002e7a:	68fa      	ldr	r2, [r7, #12]
90002e7c:	429a      	cmp	r2, r3
90002e7e:	d8f7      	bhi.n	90002e70 <HAL_Delay+0x28>
  {
  }
}
90002e80:	bf00      	nop
90002e82:	bf00      	nop
90002e84:	3710      	adds	r7, #16
90002e86:	46bd      	mov	sp, r7
90002e88:	bd80      	pop	{r7, pc}
90002e8a:	bf00      	nop
90002e8c:	20000014 	.word	0x20000014

90002e90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90002e90:	b480      	push	{r7}
90002e92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90002e94:	4b03      	ldr	r3, [pc, #12]	@ (90002ea4 <HAL_GetREVID+0x14>)
90002e96:	681b      	ldr	r3, [r3, #0]
90002e98:	0c1b      	lsrs	r3, r3, #16
}
90002e9a:	4618      	mov	r0, r3
90002e9c:	46bd      	mov	sp, r7
90002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ea2:	4770      	bx	lr
90002ea4:	5c001000 	.word	0x5c001000

90002ea8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90002ea8:	b480      	push	{r7}
90002eaa:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90002eac:	4b05      	ldr	r3, [pc, #20]	@ (90002ec4 <HAL_EnableCompensationCell+0x1c>)
90002eae:	6a1b      	ldr	r3, [r3, #32]
90002eb0:	4a04      	ldr	r2, [pc, #16]	@ (90002ec4 <HAL_EnableCompensationCell+0x1c>)
90002eb2:	f043 0301 	orr.w	r3, r3, #1
90002eb6:	6213      	str	r3, [r2, #32]
}
90002eb8:	bf00      	nop
90002eba:	46bd      	mov	sp, r7
90002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ec0:	4770      	bx	lr
90002ec2:	bf00      	nop
90002ec4:	58000400 	.word	0x58000400

90002ec8 <__NVIC_SetPriorityGrouping>:
{
90002ec8:	b480      	push	{r7}
90002eca:	b085      	sub	sp, #20
90002ecc:	af00      	add	r7, sp, #0
90002ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90002ed0:	687b      	ldr	r3, [r7, #4]
90002ed2:	f003 0307 	and.w	r3, r3, #7
90002ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (90002f08 <__NVIC_SetPriorityGrouping+0x40>)
90002eda:	68db      	ldr	r3, [r3, #12]
90002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90002ede:	68ba      	ldr	r2, [r7, #8]
90002ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90002ee4:	4013      	ands	r3, r2
90002ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002ee8:	68fb      	ldr	r3, [r7, #12]
90002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90002eec:	68bb      	ldr	r3, [r7, #8]
90002eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90002ef0:	4b06      	ldr	r3, [pc, #24]	@ (90002f0c <__NVIC_SetPriorityGrouping+0x44>)
90002ef2:	4313      	orrs	r3, r2
90002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90002ef6:	4a04      	ldr	r2, [pc, #16]	@ (90002f08 <__NVIC_SetPriorityGrouping+0x40>)
90002ef8:	68bb      	ldr	r3, [r7, #8]
90002efa:	60d3      	str	r3, [r2, #12]
}
90002efc:	bf00      	nop
90002efe:	3714      	adds	r7, #20
90002f00:	46bd      	mov	sp, r7
90002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f06:	4770      	bx	lr
90002f08:	e000ed00 	.word	0xe000ed00
90002f0c:	05fa0000 	.word	0x05fa0000

90002f10 <__NVIC_GetPriorityGrouping>:
{
90002f10:	b480      	push	{r7}
90002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90002f14:	4b04      	ldr	r3, [pc, #16]	@ (90002f28 <__NVIC_GetPriorityGrouping+0x18>)
90002f16:	68db      	ldr	r3, [r3, #12]
90002f18:	0a1b      	lsrs	r3, r3, #8
90002f1a:	f003 0307 	and.w	r3, r3, #7
}
90002f1e:	4618      	mov	r0, r3
90002f20:	46bd      	mov	sp, r7
90002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f26:	4770      	bx	lr
90002f28:	e000ed00 	.word	0xe000ed00

90002f2c <__NVIC_EnableIRQ>:
{
90002f2c:	b480      	push	{r7}
90002f2e:	b083      	sub	sp, #12
90002f30:	af00      	add	r7, sp, #0
90002f32:	4603      	mov	r3, r0
90002f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90002f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90002f3a:	2b00      	cmp	r3, #0
90002f3c:	db0b      	blt.n	90002f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002f3e:	88fb      	ldrh	r3, [r7, #6]
90002f40:	f003 021f 	and.w	r2, r3, #31
90002f44:	4907      	ldr	r1, [pc, #28]	@ (90002f64 <__NVIC_EnableIRQ+0x38>)
90002f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90002f4a:	095b      	lsrs	r3, r3, #5
90002f4c:	2001      	movs	r0, #1
90002f4e:	fa00 f202 	lsl.w	r2, r0, r2
90002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90002f56:	bf00      	nop
90002f58:	370c      	adds	r7, #12
90002f5a:	46bd      	mov	sp, r7
90002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f60:	4770      	bx	lr
90002f62:	bf00      	nop
90002f64:	e000e100 	.word	0xe000e100

90002f68 <__NVIC_SetPriority>:
{
90002f68:	b480      	push	{r7}
90002f6a:	b083      	sub	sp, #12
90002f6c:	af00      	add	r7, sp, #0
90002f6e:	4603      	mov	r3, r0
90002f70:	6039      	str	r1, [r7, #0]
90002f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90002f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90002f78:	2b00      	cmp	r3, #0
90002f7a:	db0a      	blt.n	90002f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002f7c:	683b      	ldr	r3, [r7, #0]
90002f7e:	b2da      	uxtb	r2, r3
90002f80:	490c      	ldr	r1, [pc, #48]	@ (90002fb4 <__NVIC_SetPriority+0x4c>)
90002f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90002f86:	0112      	lsls	r2, r2, #4
90002f88:	b2d2      	uxtb	r2, r2
90002f8a:	440b      	add	r3, r1
90002f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90002f90:	e00a      	b.n	90002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002f92:	683b      	ldr	r3, [r7, #0]
90002f94:	b2da      	uxtb	r2, r3
90002f96:	4908      	ldr	r1, [pc, #32]	@ (90002fb8 <__NVIC_SetPriority+0x50>)
90002f98:	88fb      	ldrh	r3, [r7, #6]
90002f9a:	f003 030f 	and.w	r3, r3, #15
90002f9e:	3b04      	subs	r3, #4
90002fa0:	0112      	lsls	r2, r2, #4
90002fa2:	b2d2      	uxtb	r2, r2
90002fa4:	440b      	add	r3, r1
90002fa6:	761a      	strb	r2, [r3, #24]
}
90002fa8:	bf00      	nop
90002faa:	370c      	adds	r7, #12
90002fac:	46bd      	mov	sp, r7
90002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
90002fb2:	4770      	bx	lr
90002fb4:	e000e100 	.word	0xe000e100
90002fb8:	e000ed00 	.word	0xe000ed00

90002fbc <NVIC_EncodePriority>:
{
90002fbc:	b480      	push	{r7}
90002fbe:	b089      	sub	sp, #36	@ 0x24
90002fc0:	af00      	add	r7, sp, #0
90002fc2:	60f8      	str	r0, [r7, #12]
90002fc4:	60b9      	str	r1, [r7, #8]
90002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90002fc8:	68fb      	ldr	r3, [r7, #12]
90002fca:	f003 0307 	and.w	r3, r3, #7
90002fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002fd0:	69fb      	ldr	r3, [r7, #28]
90002fd2:	f1c3 0307 	rsb	r3, r3, #7
90002fd6:	2b04      	cmp	r3, #4
90002fd8:	bf28      	it	cs
90002fda:	2304      	movcs	r3, #4
90002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002fde:	69fb      	ldr	r3, [r7, #28]
90002fe0:	3304      	adds	r3, #4
90002fe2:	2b06      	cmp	r3, #6
90002fe4:	d902      	bls.n	90002fec <NVIC_EncodePriority+0x30>
90002fe6:	69fb      	ldr	r3, [r7, #28]
90002fe8:	3b03      	subs	r3, #3
90002fea:	e000      	b.n	90002fee <NVIC_EncodePriority+0x32>
90002fec:	2300      	movs	r3, #0
90002fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002ff0:	f04f 32ff 	mov.w	r2, #4294967295
90002ff4:	69bb      	ldr	r3, [r7, #24]
90002ff6:	fa02 f303 	lsl.w	r3, r2, r3
90002ffa:	43da      	mvns	r2, r3
90002ffc:	68bb      	ldr	r3, [r7, #8]
90002ffe:	401a      	ands	r2, r3
90003000:	697b      	ldr	r3, [r7, #20]
90003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003004:	f04f 31ff 	mov.w	r1, #4294967295
90003008:	697b      	ldr	r3, [r7, #20]
9000300a:	fa01 f303 	lsl.w	r3, r1, r3
9000300e:	43d9      	mvns	r1, r3
90003010:	687b      	ldr	r3, [r7, #4]
90003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003014:	4313      	orrs	r3, r2
}
90003016:	4618      	mov	r0, r3
90003018:	3724      	adds	r7, #36	@ 0x24
9000301a:	46bd      	mov	sp, r7
9000301c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003020:	4770      	bx	lr
	...

90003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003024:	b580      	push	{r7, lr}
90003026:	b082      	sub	sp, #8
90003028:	af00      	add	r7, sp, #0
9000302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
9000302c:	687b      	ldr	r3, [r7, #4]
9000302e:	3b01      	subs	r3, #1
90003030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003034:	d301      	bcc.n	9000303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003036:	2301      	movs	r3, #1
90003038:	e00f      	b.n	9000305a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000303a:	4a0a      	ldr	r2, [pc, #40]	@ (90003064 <SysTick_Config+0x40>)
9000303c:	687b      	ldr	r3, [r7, #4]
9000303e:	3b01      	subs	r3, #1
90003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90003042:	210f      	movs	r1, #15
90003044:	f04f 30ff 	mov.w	r0, #4294967295
90003048:	f7ff ff8e 	bl	90002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
9000304c:	4b05      	ldr	r3, [pc, #20]	@ (90003064 <SysTick_Config+0x40>)
9000304e:	2200      	movs	r2, #0
90003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90003052:	4b04      	ldr	r3, [pc, #16]	@ (90003064 <SysTick_Config+0x40>)
90003054:	2207      	movs	r2, #7
90003056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003058:	2300      	movs	r3, #0
}
9000305a:	4618      	mov	r0, r3
9000305c:	3708      	adds	r7, #8
9000305e:	46bd      	mov	sp, r7
90003060:	bd80      	pop	{r7, pc}
90003062:	bf00      	nop
90003064:	e000e010 	.word	0xe000e010

90003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003068:	b580      	push	{r7, lr}
9000306a:	b082      	sub	sp, #8
9000306c:	af00      	add	r7, sp, #0
9000306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003070:	6878      	ldr	r0, [r7, #4]
90003072:	f7ff ff29 	bl	90002ec8 <__NVIC_SetPriorityGrouping>
}
90003076:	bf00      	nop
90003078:	3708      	adds	r7, #8
9000307a:	46bd      	mov	sp, r7
9000307c:	bd80      	pop	{r7, pc}

9000307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000307e:	b580      	push	{r7, lr}
90003080:	b086      	sub	sp, #24
90003082:	af00      	add	r7, sp, #0
90003084:	4603      	mov	r3, r0
90003086:	60b9      	str	r1, [r7, #8]
90003088:	607a      	str	r2, [r7, #4]
9000308a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
9000308c:	f7ff ff40 	bl	90002f10 <__NVIC_GetPriorityGrouping>
90003090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003092:	687a      	ldr	r2, [r7, #4]
90003094:	68b9      	ldr	r1, [r7, #8]
90003096:	6978      	ldr	r0, [r7, #20]
90003098:	f7ff ff90 	bl	90002fbc <NVIC_EncodePriority>
9000309c:	4602      	mov	r2, r0
9000309e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
900030a2:	4611      	mov	r1, r2
900030a4:	4618      	mov	r0, r3
900030a6:	f7ff ff5f 	bl	90002f68 <__NVIC_SetPriority>
}
900030aa:	bf00      	nop
900030ac:	3718      	adds	r7, #24
900030ae:	46bd      	mov	sp, r7
900030b0:	bd80      	pop	{r7, pc}

900030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900030b2:	b580      	push	{r7, lr}
900030b4:	b082      	sub	sp, #8
900030b6:	af00      	add	r7, sp, #0
900030b8:	4603      	mov	r3, r0
900030ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900030bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900030c0:	4618      	mov	r0, r3
900030c2:	f7ff ff33 	bl	90002f2c <__NVIC_EnableIRQ>
}
900030c6:	bf00      	nop
900030c8:	3708      	adds	r7, #8
900030ca:	46bd      	mov	sp, r7
900030cc:	bd80      	pop	{r7, pc}

900030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900030ce:	b580      	push	{r7, lr}
900030d0:	b082      	sub	sp, #8
900030d2:	af00      	add	r7, sp, #0
900030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900030d6:	6878      	ldr	r0, [r7, #4]
900030d8:	f7ff ffa4 	bl	90003024 <SysTick_Config>
900030dc:	4603      	mov	r3, r0
}
900030de:	4618      	mov	r0, r3
900030e0:	3708      	adds	r7, #8
900030e2:	46bd      	mov	sp, r7
900030e4:	bd80      	pop	{r7, pc}
	...

900030e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
900030e8:	b480      	push	{r7}
900030ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900030ec:	f3bf 8f5f 	dmb	sy
}
900030f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900030f2:	4b07      	ldr	r3, [pc, #28]	@ (90003110 <HAL_MPU_Disable+0x28>)
900030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900030f6:	4a06      	ldr	r2, [pc, #24]	@ (90003110 <HAL_MPU_Disable+0x28>)
900030f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900030fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900030fe:	4b05      	ldr	r3, [pc, #20]	@ (90003114 <HAL_MPU_Disable+0x2c>)
90003100:	2200      	movs	r2, #0
90003102:	605a      	str	r2, [r3, #4]
}
90003104:	bf00      	nop
90003106:	46bd      	mov	sp, r7
90003108:	f85d 7b04 	ldr.w	r7, [sp], #4
9000310c:	4770      	bx	lr
9000310e:	bf00      	nop
90003110:	e000ed00 	.word	0xe000ed00
90003114:	e000ed90 	.word	0xe000ed90

90003118 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003118:	b480      	push	{r7}
9000311a:	b083      	sub	sp, #12
9000311c:	af00      	add	r7, sp, #0
9000311e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003120:	4a0b      	ldr	r2, [pc, #44]	@ (90003150 <HAL_MPU_Enable+0x38>)
90003122:	687b      	ldr	r3, [r7, #4]
90003124:	f043 0301 	orr.w	r3, r3, #1
90003128:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000312a:	4b0a      	ldr	r3, [pc, #40]	@ (90003154 <HAL_MPU_Enable+0x3c>)
9000312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000312e:	4a09      	ldr	r2, [pc, #36]	@ (90003154 <HAL_MPU_Enable+0x3c>)
90003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003134:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003136:	f3bf 8f4f 	dsb	sy
}
9000313a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000313c:	f3bf 8f6f 	isb	sy
}
90003140:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003142:	bf00      	nop
90003144:	370c      	adds	r7, #12
90003146:	46bd      	mov	sp, r7
90003148:	f85d 7b04 	ldr.w	r7, [sp], #4
9000314c:	4770      	bx	lr
9000314e:	bf00      	nop
90003150:	e000ed90 	.word	0xe000ed90
90003154:	e000ed00 	.word	0xe000ed00

90003158 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003158:	b480      	push	{r7}
9000315a:	b083      	sub	sp, #12
9000315c:	af00      	add	r7, sp, #0
9000315e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003160:	687b      	ldr	r3, [r7, #4]
90003162:	785a      	ldrb	r2, [r3, #1]
90003164:	4b1b      	ldr	r3, [pc, #108]	@ (900031d4 <HAL_MPU_ConfigRegion+0x7c>)
90003166:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003168:	4b1a      	ldr	r3, [pc, #104]	@ (900031d4 <HAL_MPU_ConfigRegion+0x7c>)
9000316a:	691b      	ldr	r3, [r3, #16]
9000316c:	4a19      	ldr	r2, [pc, #100]	@ (900031d4 <HAL_MPU_ConfigRegion+0x7c>)
9000316e:	f023 0301 	bic.w	r3, r3, #1
90003172:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003174:	4a17      	ldr	r2, [pc, #92]	@ (900031d4 <HAL_MPU_ConfigRegion+0x7c>)
90003176:	687b      	ldr	r3, [r7, #4]
90003178:	685b      	ldr	r3, [r3, #4]
9000317a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000317c:	687b      	ldr	r3, [r7, #4]
9000317e:	7b1b      	ldrb	r3, [r3, #12]
90003180:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003182:	687b      	ldr	r3, [r7, #4]
90003184:	7adb      	ldrb	r3, [r3, #11]
90003186:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003188:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000318a:	687b      	ldr	r3, [r7, #4]
9000318c:	7a9b      	ldrb	r3, [r3, #10]
9000318e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003190:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003192:	687b      	ldr	r3, [r7, #4]
90003194:	7b5b      	ldrb	r3, [r3, #13]
90003196:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003198:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000319a:	687b      	ldr	r3, [r7, #4]
9000319c:	7b9b      	ldrb	r3, [r3, #14]
9000319e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900031a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900031a2:	687b      	ldr	r3, [r7, #4]
900031a4:	7bdb      	ldrb	r3, [r3, #15]
900031a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900031a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900031aa:	687b      	ldr	r3, [r7, #4]
900031ac:	7a5b      	ldrb	r3, [r3, #9]
900031ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900031b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900031b2:	687b      	ldr	r3, [r7, #4]
900031b4:	7a1b      	ldrb	r3, [r3, #8]
900031b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900031b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
900031ba:	687a      	ldr	r2, [r7, #4]
900031bc:	7812      	ldrb	r2, [r2, #0]
900031be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900031c0:	4a04      	ldr	r2, [pc, #16]	@ (900031d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900031c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900031c4:	6113      	str	r3, [r2, #16]
}
900031c6:	bf00      	nop
900031c8:	370c      	adds	r7, #12
900031ca:	46bd      	mov	sp, r7
900031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900031d0:	4770      	bx	lr
900031d2:	bf00      	nop
900031d4:	e000ed90 	.word	0xe000ed90

900031d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900031d8:	b580      	push	{r7, lr}
900031da:	b082      	sub	sp, #8
900031dc:	af00      	add	r7, sp, #0
900031de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900031e0:	687b      	ldr	r3, [r7, #4]
900031e2:	2b00      	cmp	r3, #0
900031e4:	d101      	bne.n	900031ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
900031e6:	2301      	movs	r3, #1
900031e8:	e04f      	b.n	9000328a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900031ea:	687b      	ldr	r3, [r7, #4]
900031ec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
900031f0:	b2db      	uxtb	r3, r3
900031f2:	2b00      	cmp	r3, #0
900031f4:	d106      	bne.n	90003204 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900031f6:	687b      	ldr	r3, [r7, #4]
900031f8:	2200      	movs	r2, #0
900031fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900031fe:	6878      	ldr	r0, [r7, #4]
90003200:	f000 f84e 	bl	900032a0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003204:	687b      	ldr	r3, [r7, #4]
90003206:	2202      	movs	r2, #2
90003208:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000320c:	687b      	ldr	r3, [r7, #4]
9000320e:	681b      	ldr	r3, [r3, #0]
90003210:	681a      	ldr	r2, [r3, #0]
90003212:	4b20      	ldr	r3, [pc, #128]	@ (90003294 <HAL_DMA2D_Init+0xbc>)
90003214:	4013      	ands	r3, r2
90003216:	687a      	ldr	r2, [r7, #4]
90003218:	6851      	ldr	r1, [r2, #4]
9000321a:	687a      	ldr	r2, [r7, #4]
9000321c:	69d2      	ldr	r2, [r2, #28]
9000321e:	4311      	orrs	r1, r2
90003220:	687a      	ldr	r2, [r7, #4]
90003222:	6812      	ldr	r2, [r2, #0]
90003224:	430b      	orrs	r3, r1
90003226:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003228:	687b      	ldr	r3, [r7, #4]
9000322a:	681b      	ldr	r3, [r3, #0]
9000322c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000322e:	4b1a      	ldr	r3, [pc, #104]	@ (90003298 <HAL_DMA2D_Init+0xc0>)
90003230:	4013      	ands	r3, r2
90003232:	687a      	ldr	r2, [r7, #4]
90003234:	6891      	ldr	r1, [r2, #8]
90003236:	687a      	ldr	r2, [r7, #4]
90003238:	6992      	ldr	r2, [r2, #24]
9000323a:	4311      	orrs	r1, r2
9000323c:	687a      	ldr	r2, [r7, #4]
9000323e:	6812      	ldr	r2, [r2, #0]
90003240:	430b      	orrs	r3, r1
90003242:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003244:	687b      	ldr	r3, [r7, #4]
90003246:	681b      	ldr	r3, [r3, #0]
90003248:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000324a:	4b14      	ldr	r3, [pc, #80]	@ (9000329c <HAL_DMA2D_Init+0xc4>)
9000324c:	4013      	ands	r3, r2
9000324e:	687a      	ldr	r2, [r7, #4]
90003250:	68d1      	ldr	r1, [r2, #12]
90003252:	687a      	ldr	r2, [r7, #4]
90003254:	6812      	ldr	r2, [r2, #0]
90003256:	430b      	orrs	r3, r1
90003258:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000325a:	687b      	ldr	r3, [r7, #4]
9000325c:	681b      	ldr	r3, [r3, #0]
9000325e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003260:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003264:	687b      	ldr	r3, [r7, #4]
90003266:	691b      	ldr	r3, [r3, #16]
90003268:	051a      	lsls	r2, r3, #20
9000326a:	687b      	ldr	r3, [r7, #4]
9000326c:	695b      	ldr	r3, [r3, #20]
9000326e:	055b      	lsls	r3, r3, #21
90003270:	431a      	orrs	r2, r3
90003272:	687b      	ldr	r3, [r7, #4]
90003274:	681b      	ldr	r3, [r3, #0]
90003276:	430a      	orrs	r2, r1
90003278:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000327a:	687b      	ldr	r3, [r7, #4]
9000327c:	2200      	movs	r2, #0
9000327e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003280:	687b      	ldr	r3, [r7, #4]
90003282:	2201      	movs	r2, #1
90003284:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003288:	2300      	movs	r3, #0
}
9000328a:	4618      	mov	r0, r3
9000328c:	3708      	adds	r7, #8
9000328e:	46bd      	mov	sp, r7
90003290:	bd80      	pop	{r7, pc}
90003292:	bf00      	nop
90003294:	fff8ffbf 	.word	0xfff8ffbf
90003298:	fffffef8 	.word	0xfffffef8
9000329c:	ffff0000 	.word	0xffff0000

900032a0 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
900032a0:	b480      	push	{r7}
900032a2:	b083      	sub	sp, #12
900032a4:	af00      	add	r7, sp, #0
900032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
900032a8:	bf00      	nop
900032aa:	370c      	adds	r7, #12
900032ac:	46bd      	mov	sp, r7
900032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900032b2:	4770      	bx	lr

900032b4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
900032b4:	b580      	push	{r7, lr}
900032b6:	b086      	sub	sp, #24
900032b8:	af02      	add	r7, sp, #8
900032ba:	60f8      	str	r0, [r7, #12]
900032bc:	60b9      	str	r1, [r7, #8]
900032be:	607a      	str	r2, [r7, #4]
900032c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
900032c2:	68fb      	ldr	r3, [r7, #12]
900032c4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900032c8:	2b01      	cmp	r3, #1
900032ca:	d101      	bne.n	900032d0 <HAL_DMA2D_Start+0x1c>
900032cc:	2302      	movs	r3, #2
900032ce:	e018      	b.n	90003302 <HAL_DMA2D_Start+0x4e>
900032d0:	68fb      	ldr	r3, [r7, #12]
900032d2:	2201      	movs	r2, #1
900032d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900032d8:	68fb      	ldr	r3, [r7, #12]
900032da:	2202      	movs	r2, #2
900032dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900032e0:	69bb      	ldr	r3, [r7, #24]
900032e2:	9300      	str	r3, [sp, #0]
900032e4:	683b      	ldr	r3, [r7, #0]
900032e6:	687a      	ldr	r2, [r7, #4]
900032e8:	68b9      	ldr	r1, [r7, #8]
900032ea:	68f8      	ldr	r0, [r7, #12]
900032ec:	f000 f9a4 	bl	90003638 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
900032f0:	68fb      	ldr	r3, [r7, #12]
900032f2:	681b      	ldr	r3, [r3, #0]
900032f4:	681a      	ldr	r2, [r3, #0]
900032f6:	68fb      	ldr	r3, [r7, #12]
900032f8:	681b      	ldr	r3, [r3, #0]
900032fa:	f042 0201 	orr.w	r2, r2, #1
900032fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003300:	2300      	movs	r3, #0
}
90003302:	4618      	mov	r0, r3
90003304:	3710      	adds	r7, #16
90003306:	46bd      	mov	sp, r7
90003308:	bd80      	pop	{r7, pc}

9000330a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
9000330a:	b580      	push	{r7, lr}
9000330c:	b086      	sub	sp, #24
9000330e:	af00      	add	r7, sp, #0
90003310:	6078      	str	r0, [r7, #4]
90003312:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90003314:	2300      	movs	r3, #0
90003316:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003318:	687b      	ldr	r3, [r7, #4]
9000331a:	681b      	ldr	r3, [r3, #0]
9000331c:	681b      	ldr	r3, [r3, #0]
9000331e:	f003 0301 	and.w	r3, r3, #1
90003322:	2b00      	cmp	r3, #0
90003324:	d056      	beq.n	900033d4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003326:	f7ff fd83 	bl	90002e30 <HAL_GetTick>
9000332a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000332c:	e04b      	b.n	900033c6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000332e:	687b      	ldr	r3, [r7, #4]
90003330:	681b      	ldr	r3, [r3, #0]
90003332:	685b      	ldr	r3, [r3, #4]
90003334:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003336:	68fb      	ldr	r3, [r7, #12]
90003338:	f003 0321 	and.w	r3, r3, #33	@ 0x21
9000333c:	2b00      	cmp	r3, #0
9000333e:	d023      	beq.n	90003388 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003340:	68fb      	ldr	r3, [r7, #12]
90003342:	f003 0320 	and.w	r3, r3, #32
90003346:	2b00      	cmp	r3, #0
90003348:	d005      	beq.n	90003356 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000334a:	687b      	ldr	r3, [r7, #4]
9000334c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000334e:	f043 0202 	orr.w	r2, r3, #2
90003352:	687b      	ldr	r3, [r7, #4]
90003354:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003356:	68fb      	ldr	r3, [r7, #12]
90003358:	f003 0301 	and.w	r3, r3, #1
9000335c:	2b00      	cmp	r3, #0
9000335e:	d005      	beq.n	9000336c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003360:	687b      	ldr	r3, [r7, #4]
90003362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003364:	f043 0201 	orr.w	r2, r3, #1
90003368:	687b      	ldr	r3, [r7, #4]
9000336a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
9000336c:	687b      	ldr	r3, [r7, #4]
9000336e:	681b      	ldr	r3, [r3, #0]
90003370:	2221      	movs	r2, #33	@ 0x21
90003372:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003374:	687b      	ldr	r3, [r7, #4]
90003376:	2204      	movs	r2, #4
90003378:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
9000337c:	687b      	ldr	r3, [r7, #4]
9000337e:	2200      	movs	r2, #0
90003380:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003384:	2301      	movs	r3, #1
90003386:	e0a5      	b.n	900034d4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003388:	683b      	ldr	r3, [r7, #0]
9000338a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000338e:	d01a      	beq.n	900033c6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003390:	f7ff fd4e 	bl	90002e30 <HAL_GetTick>
90003394:	4602      	mov	r2, r0
90003396:	697b      	ldr	r3, [r7, #20]
90003398:	1ad3      	subs	r3, r2, r3
9000339a:	683a      	ldr	r2, [r7, #0]
9000339c:	429a      	cmp	r2, r3
9000339e:	d302      	bcc.n	900033a6 <HAL_DMA2D_PollForTransfer+0x9c>
900033a0:	683b      	ldr	r3, [r7, #0]
900033a2:	2b00      	cmp	r3, #0
900033a4:	d10f      	bne.n	900033c6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900033a6:	687b      	ldr	r3, [r7, #4]
900033a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900033aa:	f043 0220 	orr.w	r2, r3, #32
900033ae:	687b      	ldr	r3, [r7, #4]
900033b0:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
900033b2:	687b      	ldr	r3, [r7, #4]
900033b4:	2203      	movs	r2, #3
900033b6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900033ba:	687b      	ldr	r3, [r7, #4]
900033bc:	2200      	movs	r2, #0
900033be:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900033c2:	2303      	movs	r3, #3
900033c4:	e086      	b.n	900034d4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900033c6:	687b      	ldr	r3, [r7, #4]
900033c8:	681b      	ldr	r3, [r3, #0]
900033ca:	685b      	ldr	r3, [r3, #4]
900033cc:	f003 0302 	and.w	r3, r3, #2
900033d0:	2b00      	cmp	r3, #0
900033d2:	d0ac      	beq.n	9000332e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900033d4:	687b      	ldr	r3, [r7, #4]
900033d6:	681b      	ldr	r3, [r3, #0]
900033d8:	69db      	ldr	r3, [r3, #28]
900033da:	f003 0320 	and.w	r3, r3, #32
900033de:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
900033e0:	687b      	ldr	r3, [r7, #4]
900033e2:	681b      	ldr	r3, [r3, #0]
900033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900033e6:	f003 0320 	and.w	r3, r3, #32
900033ea:	693a      	ldr	r2, [r7, #16]
900033ec:	4313      	orrs	r3, r2
900033ee:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
900033f0:	693b      	ldr	r3, [r7, #16]
900033f2:	2b00      	cmp	r3, #0
900033f4:	d061      	beq.n	900034ba <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900033f6:	f7ff fd1b 	bl	90002e30 <HAL_GetTick>
900033fa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900033fc:	e056      	b.n	900034ac <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900033fe:	687b      	ldr	r3, [r7, #4]
90003400:	681b      	ldr	r3, [r3, #0]
90003402:	685b      	ldr	r3, [r3, #4]
90003404:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003406:	68fb      	ldr	r3, [r7, #12]
90003408:	f003 0329 	and.w	r3, r3, #41	@ 0x29
9000340c:	2b00      	cmp	r3, #0
9000340e:	d02e      	beq.n	9000346e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003410:	68fb      	ldr	r3, [r7, #12]
90003412:	f003 0308 	and.w	r3, r3, #8
90003416:	2b00      	cmp	r3, #0
90003418:	d005      	beq.n	90003426 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
9000341a:	687b      	ldr	r3, [r7, #4]
9000341c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000341e:	f043 0204 	orr.w	r2, r3, #4
90003422:	687b      	ldr	r3, [r7, #4]
90003424:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003426:	68fb      	ldr	r3, [r7, #12]
90003428:	f003 0320 	and.w	r3, r3, #32
9000342c:	2b00      	cmp	r3, #0
9000342e:	d005      	beq.n	9000343c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003430:	687b      	ldr	r3, [r7, #4]
90003432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003434:	f043 0202 	orr.w	r2, r3, #2
90003438:	687b      	ldr	r3, [r7, #4]
9000343a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000343c:	68fb      	ldr	r3, [r7, #12]
9000343e:	f003 0301 	and.w	r3, r3, #1
90003442:	2b00      	cmp	r3, #0
90003444:	d005      	beq.n	90003452 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003446:	687b      	ldr	r3, [r7, #4]
90003448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000344a:	f043 0201 	orr.w	r2, r3, #1
9000344e:	687b      	ldr	r3, [r7, #4]
90003450:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003452:	687b      	ldr	r3, [r7, #4]
90003454:	681b      	ldr	r3, [r3, #0]
90003456:	2229      	movs	r2, #41	@ 0x29
90003458:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000345a:	687b      	ldr	r3, [r7, #4]
9000345c:	2204      	movs	r2, #4
9000345e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003462:	687b      	ldr	r3, [r7, #4]
90003464:	2200      	movs	r2, #0
90003466:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000346a:	2301      	movs	r3, #1
9000346c:	e032      	b.n	900034d4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000346e:	683b      	ldr	r3, [r7, #0]
90003470:	f1b3 3fff 	cmp.w	r3, #4294967295
90003474:	d01a      	beq.n	900034ac <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003476:	f7ff fcdb 	bl	90002e30 <HAL_GetTick>
9000347a:	4602      	mov	r2, r0
9000347c:	697b      	ldr	r3, [r7, #20]
9000347e:	1ad3      	subs	r3, r2, r3
90003480:	683a      	ldr	r2, [r7, #0]
90003482:	429a      	cmp	r2, r3
90003484:	d302      	bcc.n	9000348c <HAL_DMA2D_PollForTransfer+0x182>
90003486:	683b      	ldr	r3, [r7, #0]
90003488:	2b00      	cmp	r3, #0
9000348a:	d10f      	bne.n	900034ac <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000348c:	687b      	ldr	r3, [r7, #4]
9000348e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003490:	f043 0220 	orr.w	r2, r3, #32
90003494:	687b      	ldr	r3, [r7, #4]
90003496:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003498:	687b      	ldr	r3, [r7, #4]
9000349a:	2203      	movs	r2, #3
9000349c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900034a0:	687b      	ldr	r3, [r7, #4]
900034a2:	2200      	movs	r2, #0
900034a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900034a8:	2303      	movs	r3, #3
900034aa:	e013      	b.n	900034d4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900034ac:	687b      	ldr	r3, [r7, #4]
900034ae:	681b      	ldr	r3, [r3, #0]
900034b0:	685b      	ldr	r3, [r3, #4]
900034b2:	f003 0310 	and.w	r3, r3, #16
900034b6:	2b00      	cmp	r3, #0
900034b8:	d0a1      	beq.n	900033fe <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
900034ba:	687b      	ldr	r3, [r7, #4]
900034bc:	681b      	ldr	r3, [r3, #0]
900034be:	2212      	movs	r2, #18
900034c0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
900034c2:	687b      	ldr	r3, [r7, #4]
900034c4:	2201      	movs	r2, #1
900034c6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900034ca:	687b      	ldr	r3, [r7, #4]
900034cc:	2200      	movs	r2, #0
900034ce:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900034d2:	2300      	movs	r3, #0
}
900034d4:	4618      	mov	r0, r3
900034d6:	3718      	adds	r7, #24
900034d8:	46bd      	mov	sp, r7
900034da:	bd80      	pop	{r7, pc}

900034dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
900034dc:	b480      	push	{r7}
900034de:	b087      	sub	sp, #28
900034e0:	af00      	add	r7, sp, #0
900034e2:	6078      	str	r0, [r7, #4]
900034e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
900034e6:	687b      	ldr	r3, [r7, #4]
900034e8:	685b      	ldr	r3, [r3, #4]
900034ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
900034ee:	683b      	ldr	r3, [r7, #0]
900034f0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900034f2:	687b      	ldr	r3, [r7, #4]
900034f4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900034f8:	2b01      	cmp	r3, #1
900034fa:	d101      	bne.n	90003500 <HAL_DMA2D_ConfigLayer+0x24>
900034fc:	2302      	movs	r3, #2
900034fe:	e092      	b.n	90003626 <HAL_DMA2D_ConfigLayer+0x14a>
90003500:	687b      	ldr	r3, [r7, #4]
90003502:	2201      	movs	r2, #1
90003504:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003508:	687b      	ldr	r3, [r7, #4]
9000350a:	2202      	movs	r2, #2
9000350c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003510:	683a      	ldr	r2, [r7, #0]
90003512:	4613      	mov	r3, r2
90003514:	00db      	lsls	r3, r3, #3
90003516:	1a9b      	subs	r3, r3, r2
90003518:	009b      	lsls	r3, r3, #2
9000351a:	3328      	adds	r3, #40	@ 0x28
9000351c:	687a      	ldr	r2, [r7, #4]
9000351e:	4413      	add	r3, r2
90003520:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003522:	68fb      	ldr	r3, [r7, #12]
90003524:	685a      	ldr	r2, [r3, #4]
90003526:	68fb      	ldr	r3, [r7, #12]
90003528:	689b      	ldr	r3, [r3, #8]
9000352a:	041b      	lsls	r3, r3, #16
9000352c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000352e:	68fb      	ldr	r3, [r7, #12]
90003530:	691b      	ldr	r3, [r3, #16]
90003532:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003534:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003536:	68fb      	ldr	r3, [r7, #12]
90003538:	695b      	ldr	r3, [r3, #20]
9000353a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000353c:	4313      	orrs	r3, r2
9000353e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003540:	4b3c      	ldr	r3, [pc, #240]	@ (90003634 <HAL_DMA2D_ConfigLayer+0x158>)
90003542:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003544:	68fb      	ldr	r3, [r7, #12]
90003546:	685b      	ldr	r3, [r3, #4]
90003548:	2b0a      	cmp	r3, #10
9000354a:	d003      	beq.n	90003554 <HAL_DMA2D_ConfigLayer+0x78>
9000354c:	68fb      	ldr	r3, [r7, #12]
9000354e:	685b      	ldr	r3, [r3, #4]
90003550:	2b09      	cmp	r3, #9
90003552:	d107      	bne.n	90003564 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003554:	68fb      	ldr	r3, [r7, #12]
90003556:	68db      	ldr	r3, [r3, #12]
90003558:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
9000355c:	693a      	ldr	r2, [r7, #16]
9000355e:	4313      	orrs	r3, r2
90003560:	613b      	str	r3, [r7, #16]
90003562:	e005      	b.n	90003570 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003564:	68fb      	ldr	r3, [r7, #12]
90003566:	68db      	ldr	r3, [r3, #12]
90003568:	061b      	lsls	r3, r3, #24
9000356a:	693a      	ldr	r2, [r7, #16]
9000356c:	4313      	orrs	r3, r2
9000356e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003570:	683b      	ldr	r3, [r7, #0]
90003572:	2b00      	cmp	r3, #0
90003574:	d120      	bne.n	900035b8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003576:	687b      	ldr	r3, [r7, #4]
90003578:	681b      	ldr	r3, [r3, #0]
9000357a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000357c:	697b      	ldr	r3, [r7, #20]
9000357e:	43db      	mvns	r3, r3
90003580:	ea02 0103 	and.w	r1, r2, r3
90003584:	687b      	ldr	r3, [r7, #4]
90003586:	681b      	ldr	r3, [r3, #0]
90003588:	693a      	ldr	r2, [r7, #16]
9000358a:	430a      	orrs	r2, r1
9000358c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000358e:	687b      	ldr	r3, [r7, #4]
90003590:	681b      	ldr	r3, [r3, #0]
90003592:	68fa      	ldr	r2, [r7, #12]
90003594:	6812      	ldr	r2, [r2, #0]
90003596:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003598:	68fb      	ldr	r3, [r7, #12]
9000359a:	685b      	ldr	r3, [r3, #4]
9000359c:	2b0a      	cmp	r3, #10
9000359e:	d003      	beq.n	900035a8 <HAL_DMA2D_ConfigLayer+0xcc>
900035a0:	68fb      	ldr	r3, [r7, #12]
900035a2:	685b      	ldr	r3, [r3, #4]
900035a4:	2b09      	cmp	r3, #9
900035a6:	d135      	bne.n	90003614 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
900035a8:	68fb      	ldr	r3, [r7, #12]
900035aa:	68da      	ldr	r2, [r3, #12]
900035ac:	687b      	ldr	r3, [r7, #4]
900035ae:	681b      	ldr	r3, [r3, #0]
900035b0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900035b4:	629a      	str	r2, [r3, #40]	@ 0x28
900035b6:	e02d      	b.n	90003614 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
900035b8:	68fb      	ldr	r3, [r7, #12]
900035ba:	685b      	ldr	r3, [r3, #4]
900035bc:	2b0b      	cmp	r3, #11
900035be:	d109      	bne.n	900035d4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
900035c0:	68fb      	ldr	r3, [r7, #12]
900035c2:	699b      	ldr	r3, [r3, #24]
900035c4:	049b      	lsls	r3, r3, #18
900035c6:	693a      	ldr	r2, [r7, #16]
900035c8:	4313      	orrs	r3, r2
900035ca:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
900035cc:	697b      	ldr	r3, [r7, #20]
900035ce:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
900035d2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900035d4:	687b      	ldr	r3, [r7, #4]
900035d6:	681b      	ldr	r3, [r3, #0]
900035d8:	69da      	ldr	r2, [r3, #28]
900035da:	697b      	ldr	r3, [r7, #20]
900035dc:	43db      	mvns	r3, r3
900035de:	ea02 0103 	and.w	r1, r2, r3
900035e2:	687b      	ldr	r3, [r7, #4]
900035e4:	681b      	ldr	r3, [r3, #0]
900035e6:	693a      	ldr	r2, [r7, #16]
900035e8:	430a      	orrs	r2, r1
900035ea:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900035ec:	687b      	ldr	r3, [r7, #4]
900035ee:	681b      	ldr	r3, [r3, #0]
900035f0:	68fa      	ldr	r2, [r7, #12]
900035f2:	6812      	ldr	r2, [r2, #0]
900035f4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900035f6:	68fb      	ldr	r3, [r7, #12]
900035f8:	685b      	ldr	r3, [r3, #4]
900035fa:	2b0a      	cmp	r3, #10
900035fc:	d003      	beq.n	90003606 <HAL_DMA2D_ConfigLayer+0x12a>
900035fe:	68fb      	ldr	r3, [r7, #12]
90003600:	685b      	ldr	r3, [r3, #4]
90003602:	2b09      	cmp	r3, #9
90003604:	d106      	bne.n	90003614 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003606:	68fb      	ldr	r3, [r7, #12]
90003608:	68da      	ldr	r2, [r3, #12]
9000360a:	687b      	ldr	r3, [r7, #4]
9000360c:	681b      	ldr	r3, [r3, #0]
9000360e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003612:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003614:	687b      	ldr	r3, [r7, #4]
90003616:	2201      	movs	r2, #1
90003618:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000361c:	687b      	ldr	r3, [r7, #4]
9000361e:	2200      	movs	r2, #0
90003620:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003624:	2300      	movs	r3, #0
}
90003626:	4618      	mov	r0, r3
90003628:	371c      	adds	r7, #28
9000362a:	46bd      	mov	sp, r7
9000362c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003630:	4770      	bx	lr
90003632:	bf00      	nop
90003634:	ff33000f 	.word	0xff33000f

90003638 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003638:	b480      	push	{r7}
9000363a:	b08b      	sub	sp, #44	@ 0x2c
9000363c:	af00      	add	r7, sp, #0
9000363e:	60f8      	str	r0, [r7, #12]
90003640:	60b9      	str	r1, [r7, #8]
90003642:	607a      	str	r2, [r7, #4]
90003644:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003646:	68fb      	ldr	r3, [r7, #12]
90003648:	681b      	ldr	r3, [r3, #0]
9000364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000364c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003650:	683b      	ldr	r3, [r7, #0]
90003652:	041a      	lsls	r2, r3, #16
90003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003656:	431a      	orrs	r2, r3
90003658:	68fb      	ldr	r3, [r7, #12]
9000365a:	681b      	ldr	r3, [r3, #0]
9000365c:	430a      	orrs	r2, r1
9000365e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003660:	68fb      	ldr	r3, [r7, #12]
90003662:	681b      	ldr	r3, [r3, #0]
90003664:	687a      	ldr	r2, [r7, #4]
90003666:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003668:	68fb      	ldr	r3, [r7, #12]
9000366a:	685b      	ldr	r3, [r3, #4]
9000366c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003670:	d174      	bne.n	9000375c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003672:	68bb      	ldr	r3, [r7, #8]
90003674:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003678:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
9000367a:	68bb      	ldr	r3, [r7, #8]
9000367c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003680:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003682:	68bb      	ldr	r3, [r7, #8]
90003684:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003688:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
9000368a:	68bb      	ldr	r3, [r7, #8]
9000368c:	b2db      	uxtb	r3, r3
9000368e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003690:	68fb      	ldr	r3, [r7, #12]
90003692:	689b      	ldr	r3, [r3, #8]
90003694:	2b00      	cmp	r3, #0
90003696:	d108      	bne.n	900036aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003698:	69ba      	ldr	r2, [r7, #24]
9000369a:	69fb      	ldr	r3, [r7, #28]
9000369c:	431a      	orrs	r2, r3
9000369e:	6a3b      	ldr	r3, [r7, #32]
900036a0:	4313      	orrs	r3, r2
900036a2:	697a      	ldr	r2, [r7, #20]
900036a4:	4313      	orrs	r3, r2
900036a6:	627b      	str	r3, [r7, #36]	@ 0x24
900036a8:	e053      	b.n	90003752 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
900036aa:	68fb      	ldr	r3, [r7, #12]
900036ac:	689b      	ldr	r3, [r3, #8]
900036ae:	2b01      	cmp	r3, #1
900036b0:	d106      	bne.n	900036c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
900036b2:	69ba      	ldr	r2, [r7, #24]
900036b4:	69fb      	ldr	r3, [r7, #28]
900036b6:	4313      	orrs	r3, r2
900036b8:	697a      	ldr	r2, [r7, #20]
900036ba:	4313      	orrs	r3, r2
900036bc:	627b      	str	r3, [r7, #36]	@ 0x24
900036be:	e048      	b.n	90003752 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
900036c0:	68fb      	ldr	r3, [r7, #12]
900036c2:	689b      	ldr	r3, [r3, #8]
900036c4:	2b02      	cmp	r3, #2
900036c6:	d111      	bne.n	900036ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
900036c8:	69fb      	ldr	r3, [r7, #28]
900036ca:	0cdb      	lsrs	r3, r3, #19
900036cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
900036ce:	69bb      	ldr	r3, [r7, #24]
900036d0:	0a9b      	lsrs	r3, r3, #10
900036d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
900036d4:	697b      	ldr	r3, [r7, #20]
900036d6:	08db      	lsrs	r3, r3, #3
900036d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
900036da:	69bb      	ldr	r3, [r7, #24]
900036dc:	015a      	lsls	r2, r3, #5
900036de:	69fb      	ldr	r3, [r7, #28]
900036e0:	02db      	lsls	r3, r3, #11
900036e2:	4313      	orrs	r3, r2
900036e4:	697a      	ldr	r2, [r7, #20]
900036e6:	4313      	orrs	r3, r2
900036e8:	627b      	str	r3, [r7, #36]	@ 0x24
900036ea:	e032      	b.n	90003752 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900036ec:	68fb      	ldr	r3, [r7, #12]
900036ee:	689b      	ldr	r3, [r3, #8]
900036f0:	2b03      	cmp	r3, #3
900036f2:	d117      	bne.n	90003724 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
900036f4:	6a3b      	ldr	r3, [r7, #32]
900036f6:	0fdb      	lsrs	r3, r3, #31
900036f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
900036fa:	69fb      	ldr	r3, [r7, #28]
900036fc:	0cdb      	lsrs	r3, r3, #19
900036fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003700:	69bb      	ldr	r3, [r7, #24]
90003702:	0adb      	lsrs	r3, r3, #11
90003704:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003706:	697b      	ldr	r3, [r7, #20]
90003708:	08db      	lsrs	r3, r3, #3
9000370a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
9000370c:	69bb      	ldr	r3, [r7, #24]
9000370e:	015a      	lsls	r2, r3, #5
90003710:	69fb      	ldr	r3, [r7, #28]
90003712:	029b      	lsls	r3, r3, #10
90003714:	431a      	orrs	r2, r3
90003716:	6a3b      	ldr	r3, [r7, #32]
90003718:	03db      	lsls	r3, r3, #15
9000371a:	4313      	orrs	r3, r2
9000371c:	697a      	ldr	r2, [r7, #20]
9000371e:	4313      	orrs	r3, r2
90003720:	627b      	str	r3, [r7, #36]	@ 0x24
90003722:	e016      	b.n	90003752 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003724:	6a3b      	ldr	r3, [r7, #32]
90003726:	0f1b      	lsrs	r3, r3, #28
90003728:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
9000372a:	69fb      	ldr	r3, [r7, #28]
9000372c:	0d1b      	lsrs	r3, r3, #20
9000372e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003730:	69bb      	ldr	r3, [r7, #24]
90003732:	0b1b      	lsrs	r3, r3, #12
90003734:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003736:	697b      	ldr	r3, [r7, #20]
90003738:	091b      	lsrs	r3, r3, #4
9000373a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
9000373c:	69bb      	ldr	r3, [r7, #24]
9000373e:	011a      	lsls	r2, r3, #4
90003740:	69fb      	ldr	r3, [r7, #28]
90003742:	021b      	lsls	r3, r3, #8
90003744:	431a      	orrs	r2, r3
90003746:	6a3b      	ldr	r3, [r7, #32]
90003748:	031b      	lsls	r3, r3, #12
9000374a:	4313      	orrs	r3, r2
9000374c:	697a      	ldr	r2, [r7, #20]
9000374e:	4313      	orrs	r3, r2
90003750:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003752:	68fb      	ldr	r3, [r7, #12]
90003754:	681b      	ldr	r3, [r3, #0]
90003756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003758:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
9000375a:	e00d      	b.n	90003778 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
9000375c:	68fb      	ldr	r3, [r7, #12]
9000375e:	685b      	ldr	r3, [r3, #4]
90003760:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003764:	d104      	bne.n	90003770 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003766:	68fb      	ldr	r3, [r7, #12]
90003768:	681b      	ldr	r3, [r3, #0]
9000376a:	68ba      	ldr	r2, [r7, #8]
9000376c:	615a      	str	r2, [r3, #20]
}
9000376e:	e003      	b.n	90003778 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003770:	68fb      	ldr	r3, [r7, #12]
90003772:	681b      	ldr	r3, [r3, #0]
90003774:	68ba      	ldr	r2, [r7, #8]
90003776:	60da      	str	r2, [r3, #12]
}
90003778:	bf00      	nop
9000377a:	372c      	adds	r7, #44	@ 0x2c
9000377c:	46bd      	mov	sp, r7
9000377e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003782:	4770      	bx	lr

90003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003784:	b480      	push	{r7}
90003786:	b089      	sub	sp, #36	@ 0x24
90003788:	af00      	add	r7, sp, #0
9000378a:	6078      	str	r0, [r7, #4]
9000378c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
9000378e:	2300      	movs	r3, #0
90003790:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003792:	4b89      	ldr	r3, [pc, #548]	@ (900039b8 <HAL_GPIO_Init+0x234>)
90003794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003796:	e194      	b.n	90003ac2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003798:	683b      	ldr	r3, [r7, #0]
9000379a:	681a      	ldr	r2, [r3, #0]
9000379c:	2101      	movs	r1, #1
9000379e:	69fb      	ldr	r3, [r7, #28]
900037a0:	fa01 f303 	lsl.w	r3, r1, r3
900037a4:	4013      	ands	r3, r2
900037a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
900037a8:	693b      	ldr	r3, [r7, #16]
900037aa:	2b00      	cmp	r3, #0
900037ac:	f000 8186 	beq.w	90003abc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900037b0:	683b      	ldr	r3, [r7, #0]
900037b2:	685b      	ldr	r3, [r3, #4]
900037b4:	f003 0303 	and.w	r3, r3, #3
900037b8:	2b01      	cmp	r3, #1
900037ba:	d005      	beq.n	900037c8 <HAL_GPIO_Init+0x44>
900037bc:	683b      	ldr	r3, [r7, #0]
900037be:	685b      	ldr	r3, [r3, #4]
900037c0:	f003 0303 	and.w	r3, r3, #3
900037c4:	2b02      	cmp	r3, #2
900037c6:	d130      	bne.n	9000382a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
900037c8:	687b      	ldr	r3, [r7, #4]
900037ca:	689b      	ldr	r3, [r3, #8]
900037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900037ce:	69fb      	ldr	r3, [r7, #28]
900037d0:	005b      	lsls	r3, r3, #1
900037d2:	2203      	movs	r2, #3
900037d4:	fa02 f303 	lsl.w	r3, r2, r3
900037d8:	43db      	mvns	r3, r3
900037da:	69ba      	ldr	r2, [r7, #24]
900037dc:	4013      	ands	r3, r2
900037de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
900037e0:	683b      	ldr	r3, [r7, #0]
900037e2:	68da      	ldr	r2, [r3, #12]
900037e4:	69fb      	ldr	r3, [r7, #28]
900037e6:	005b      	lsls	r3, r3, #1
900037e8:	fa02 f303 	lsl.w	r3, r2, r3
900037ec:	69ba      	ldr	r2, [r7, #24]
900037ee:	4313      	orrs	r3, r2
900037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900037f2:	687b      	ldr	r3, [r7, #4]
900037f4:	69ba      	ldr	r2, [r7, #24]
900037f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
900037f8:	687b      	ldr	r3, [r7, #4]
900037fa:	685b      	ldr	r3, [r3, #4]
900037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
900037fe:	2201      	movs	r2, #1
90003800:	69fb      	ldr	r3, [r7, #28]
90003802:	fa02 f303 	lsl.w	r3, r2, r3
90003806:	43db      	mvns	r3, r3
90003808:	69ba      	ldr	r2, [r7, #24]
9000380a:	4013      	ands	r3, r2
9000380c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000380e:	683b      	ldr	r3, [r7, #0]
90003810:	685b      	ldr	r3, [r3, #4]
90003812:	091b      	lsrs	r3, r3, #4
90003814:	f003 0201 	and.w	r2, r3, #1
90003818:	69fb      	ldr	r3, [r7, #28]
9000381a:	fa02 f303 	lsl.w	r3, r2, r3
9000381e:	69ba      	ldr	r2, [r7, #24]
90003820:	4313      	orrs	r3, r2
90003822:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003824:	687b      	ldr	r3, [r7, #4]
90003826:	69ba      	ldr	r2, [r7, #24]
90003828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
9000382a:	683b      	ldr	r3, [r7, #0]
9000382c:	685b      	ldr	r3, [r3, #4]
9000382e:	f003 0303 	and.w	r3, r3, #3
90003832:	2b03      	cmp	r3, #3
90003834:	d017      	beq.n	90003866 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003836:	687b      	ldr	r3, [r7, #4]
90003838:	68db      	ldr	r3, [r3, #12]
9000383a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000383c:	69fb      	ldr	r3, [r7, #28]
9000383e:	005b      	lsls	r3, r3, #1
90003840:	2203      	movs	r2, #3
90003842:	fa02 f303 	lsl.w	r3, r2, r3
90003846:	43db      	mvns	r3, r3
90003848:	69ba      	ldr	r2, [r7, #24]
9000384a:	4013      	ands	r3, r2
9000384c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000384e:	683b      	ldr	r3, [r7, #0]
90003850:	689a      	ldr	r2, [r3, #8]
90003852:	69fb      	ldr	r3, [r7, #28]
90003854:	005b      	lsls	r3, r3, #1
90003856:	fa02 f303 	lsl.w	r3, r2, r3
9000385a:	69ba      	ldr	r2, [r7, #24]
9000385c:	4313      	orrs	r3, r2
9000385e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003860:	687b      	ldr	r3, [r7, #4]
90003862:	69ba      	ldr	r2, [r7, #24]
90003864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003866:	683b      	ldr	r3, [r7, #0]
90003868:	685b      	ldr	r3, [r3, #4]
9000386a:	f003 0303 	and.w	r3, r3, #3
9000386e:	2b02      	cmp	r3, #2
90003870:	d123      	bne.n	900038ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003872:	69fb      	ldr	r3, [r7, #28]
90003874:	08da      	lsrs	r2, r3, #3
90003876:	687b      	ldr	r3, [r7, #4]
90003878:	3208      	adds	r2, #8
9000387a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003880:	69fb      	ldr	r3, [r7, #28]
90003882:	f003 0307 	and.w	r3, r3, #7
90003886:	009b      	lsls	r3, r3, #2
90003888:	220f      	movs	r2, #15
9000388a:	fa02 f303 	lsl.w	r3, r2, r3
9000388e:	43db      	mvns	r3, r3
90003890:	69ba      	ldr	r2, [r7, #24]
90003892:	4013      	ands	r3, r2
90003894:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003896:	683b      	ldr	r3, [r7, #0]
90003898:	691a      	ldr	r2, [r3, #16]
9000389a:	69fb      	ldr	r3, [r7, #28]
9000389c:	f003 0307 	and.w	r3, r3, #7
900038a0:	009b      	lsls	r3, r3, #2
900038a2:	fa02 f303 	lsl.w	r3, r2, r3
900038a6:	69ba      	ldr	r2, [r7, #24]
900038a8:	4313      	orrs	r3, r2
900038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
900038ac:	69fb      	ldr	r3, [r7, #28]
900038ae:	08da      	lsrs	r2, r3, #3
900038b0:	687b      	ldr	r3, [r7, #4]
900038b2:	3208      	adds	r2, #8
900038b4:	69b9      	ldr	r1, [r7, #24]
900038b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
900038ba:	687b      	ldr	r3, [r7, #4]
900038bc:	681b      	ldr	r3, [r3, #0]
900038be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900038c0:	69fb      	ldr	r3, [r7, #28]
900038c2:	005b      	lsls	r3, r3, #1
900038c4:	2203      	movs	r2, #3
900038c6:	fa02 f303 	lsl.w	r3, r2, r3
900038ca:	43db      	mvns	r3, r3
900038cc:	69ba      	ldr	r2, [r7, #24]
900038ce:	4013      	ands	r3, r2
900038d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900038d2:	683b      	ldr	r3, [r7, #0]
900038d4:	685b      	ldr	r3, [r3, #4]
900038d6:	f003 0203 	and.w	r2, r3, #3
900038da:	69fb      	ldr	r3, [r7, #28]
900038dc:	005b      	lsls	r3, r3, #1
900038de:	fa02 f303 	lsl.w	r3, r2, r3
900038e2:	69ba      	ldr	r2, [r7, #24]
900038e4:	4313      	orrs	r3, r2
900038e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900038e8:	687b      	ldr	r3, [r7, #4]
900038ea:	69ba      	ldr	r2, [r7, #24]
900038ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900038ee:	683b      	ldr	r3, [r7, #0]
900038f0:	685b      	ldr	r3, [r3, #4]
900038f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
900038f6:	2b00      	cmp	r3, #0
900038f8:	f000 80e0 	beq.w	90003abc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900038fc:	4b2f      	ldr	r3, [pc, #188]	@ (900039bc <HAL_GPIO_Init+0x238>)
900038fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003902:	4a2e      	ldr	r2, [pc, #184]	@ (900039bc <HAL_GPIO_Init+0x238>)
90003904:	f043 0302 	orr.w	r3, r3, #2
90003908:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
9000390c:	4b2b      	ldr	r3, [pc, #172]	@ (900039bc <HAL_GPIO_Init+0x238>)
9000390e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003912:	f003 0302 	and.w	r3, r3, #2
90003916:	60fb      	str	r3, [r7, #12]
90003918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
9000391a:	4a29      	ldr	r2, [pc, #164]	@ (900039c0 <HAL_GPIO_Init+0x23c>)
9000391c:	69fb      	ldr	r3, [r7, #28]
9000391e:	089b      	lsrs	r3, r3, #2
90003920:	3302      	adds	r3, #2
90003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003928:	69fb      	ldr	r3, [r7, #28]
9000392a:	f003 0303 	and.w	r3, r3, #3
9000392e:	009b      	lsls	r3, r3, #2
90003930:	220f      	movs	r2, #15
90003932:	fa02 f303 	lsl.w	r3, r2, r3
90003936:	43db      	mvns	r3, r3
90003938:	69ba      	ldr	r2, [r7, #24]
9000393a:	4013      	ands	r3, r2
9000393c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000393e:	687b      	ldr	r3, [r7, #4]
90003940:	4a20      	ldr	r2, [pc, #128]	@ (900039c4 <HAL_GPIO_Init+0x240>)
90003942:	4293      	cmp	r3, r2
90003944:	d052      	beq.n	900039ec <HAL_GPIO_Init+0x268>
90003946:	687b      	ldr	r3, [r7, #4]
90003948:	4a1f      	ldr	r2, [pc, #124]	@ (900039c8 <HAL_GPIO_Init+0x244>)
9000394a:	4293      	cmp	r3, r2
9000394c:	d031      	beq.n	900039b2 <HAL_GPIO_Init+0x22e>
9000394e:	687b      	ldr	r3, [r7, #4]
90003950:	4a1e      	ldr	r2, [pc, #120]	@ (900039cc <HAL_GPIO_Init+0x248>)
90003952:	4293      	cmp	r3, r2
90003954:	d02b      	beq.n	900039ae <HAL_GPIO_Init+0x22a>
90003956:	687b      	ldr	r3, [r7, #4]
90003958:	4a1d      	ldr	r2, [pc, #116]	@ (900039d0 <HAL_GPIO_Init+0x24c>)
9000395a:	4293      	cmp	r3, r2
9000395c:	d025      	beq.n	900039aa <HAL_GPIO_Init+0x226>
9000395e:	687b      	ldr	r3, [r7, #4]
90003960:	4a1c      	ldr	r2, [pc, #112]	@ (900039d4 <HAL_GPIO_Init+0x250>)
90003962:	4293      	cmp	r3, r2
90003964:	d01f      	beq.n	900039a6 <HAL_GPIO_Init+0x222>
90003966:	687b      	ldr	r3, [r7, #4]
90003968:	4a1b      	ldr	r2, [pc, #108]	@ (900039d8 <HAL_GPIO_Init+0x254>)
9000396a:	4293      	cmp	r3, r2
9000396c:	d019      	beq.n	900039a2 <HAL_GPIO_Init+0x21e>
9000396e:	687b      	ldr	r3, [r7, #4]
90003970:	4a1a      	ldr	r2, [pc, #104]	@ (900039dc <HAL_GPIO_Init+0x258>)
90003972:	4293      	cmp	r3, r2
90003974:	d013      	beq.n	9000399e <HAL_GPIO_Init+0x21a>
90003976:	687b      	ldr	r3, [r7, #4]
90003978:	4a19      	ldr	r2, [pc, #100]	@ (900039e0 <HAL_GPIO_Init+0x25c>)
9000397a:	4293      	cmp	r3, r2
9000397c:	d00d      	beq.n	9000399a <HAL_GPIO_Init+0x216>
9000397e:	687b      	ldr	r3, [r7, #4]
90003980:	4a18      	ldr	r2, [pc, #96]	@ (900039e4 <HAL_GPIO_Init+0x260>)
90003982:	4293      	cmp	r3, r2
90003984:	d007      	beq.n	90003996 <HAL_GPIO_Init+0x212>
90003986:	687b      	ldr	r3, [r7, #4]
90003988:	4a17      	ldr	r2, [pc, #92]	@ (900039e8 <HAL_GPIO_Init+0x264>)
9000398a:	4293      	cmp	r3, r2
9000398c:	d101      	bne.n	90003992 <HAL_GPIO_Init+0x20e>
9000398e:	2309      	movs	r3, #9
90003990:	e02d      	b.n	900039ee <HAL_GPIO_Init+0x26a>
90003992:	230a      	movs	r3, #10
90003994:	e02b      	b.n	900039ee <HAL_GPIO_Init+0x26a>
90003996:	2308      	movs	r3, #8
90003998:	e029      	b.n	900039ee <HAL_GPIO_Init+0x26a>
9000399a:	2307      	movs	r3, #7
9000399c:	e027      	b.n	900039ee <HAL_GPIO_Init+0x26a>
9000399e:	2306      	movs	r3, #6
900039a0:	e025      	b.n	900039ee <HAL_GPIO_Init+0x26a>
900039a2:	2305      	movs	r3, #5
900039a4:	e023      	b.n	900039ee <HAL_GPIO_Init+0x26a>
900039a6:	2304      	movs	r3, #4
900039a8:	e021      	b.n	900039ee <HAL_GPIO_Init+0x26a>
900039aa:	2303      	movs	r3, #3
900039ac:	e01f      	b.n	900039ee <HAL_GPIO_Init+0x26a>
900039ae:	2302      	movs	r3, #2
900039b0:	e01d      	b.n	900039ee <HAL_GPIO_Init+0x26a>
900039b2:	2301      	movs	r3, #1
900039b4:	e01b      	b.n	900039ee <HAL_GPIO_Init+0x26a>
900039b6:	bf00      	nop
900039b8:	58000080 	.word	0x58000080
900039bc:	58024400 	.word	0x58024400
900039c0:	58000400 	.word	0x58000400
900039c4:	58020000 	.word	0x58020000
900039c8:	58020400 	.word	0x58020400
900039cc:	58020800 	.word	0x58020800
900039d0:	58020c00 	.word	0x58020c00
900039d4:	58021000 	.word	0x58021000
900039d8:	58021400 	.word	0x58021400
900039dc:	58021800 	.word	0x58021800
900039e0:	58021c00 	.word	0x58021c00
900039e4:	58022000 	.word	0x58022000
900039e8:	58022400 	.word	0x58022400
900039ec:	2300      	movs	r3, #0
900039ee:	69fa      	ldr	r2, [r7, #28]
900039f0:	f002 0203 	and.w	r2, r2, #3
900039f4:	0092      	lsls	r2, r2, #2
900039f6:	4093      	lsls	r3, r2
900039f8:	69ba      	ldr	r2, [r7, #24]
900039fa:	4313      	orrs	r3, r2
900039fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
900039fe:	4938      	ldr	r1, [pc, #224]	@ (90003ae0 <HAL_GPIO_Init+0x35c>)
90003a00:	69fb      	ldr	r3, [r7, #28]
90003a02:	089b      	lsrs	r3, r3, #2
90003a04:	3302      	adds	r3, #2
90003a06:	69ba      	ldr	r2, [r7, #24]
90003a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003a10:	681b      	ldr	r3, [r3, #0]
90003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003a14:	693b      	ldr	r3, [r7, #16]
90003a16:	43db      	mvns	r3, r3
90003a18:	69ba      	ldr	r2, [r7, #24]
90003a1a:	4013      	ands	r3, r2
90003a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003a1e:	683b      	ldr	r3, [r7, #0]
90003a20:	685b      	ldr	r3, [r3, #4]
90003a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003a26:	2b00      	cmp	r3, #0
90003a28:	d003      	beq.n	90003a32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003a2a:	69ba      	ldr	r2, [r7, #24]
90003a2c:	693b      	ldr	r3, [r7, #16]
90003a2e:	4313      	orrs	r3, r2
90003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003a32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003a36:	69bb      	ldr	r3, [r7, #24]
90003a38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003a3e:	685b      	ldr	r3, [r3, #4]
90003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003a42:	693b      	ldr	r3, [r7, #16]
90003a44:	43db      	mvns	r3, r3
90003a46:	69ba      	ldr	r2, [r7, #24]
90003a48:	4013      	ands	r3, r2
90003a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003a4c:	683b      	ldr	r3, [r7, #0]
90003a4e:	685b      	ldr	r3, [r3, #4]
90003a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003a54:	2b00      	cmp	r3, #0
90003a56:	d003      	beq.n	90003a60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003a58:	69ba      	ldr	r2, [r7, #24]
90003a5a:	693b      	ldr	r3, [r7, #16]
90003a5c:	4313      	orrs	r3, r2
90003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003a60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003a64:	69bb      	ldr	r3, [r7, #24]
90003a66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003a68:	697b      	ldr	r3, [r7, #20]
90003a6a:	685b      	ldr	r3, [r3, #4]
90003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003a6e:	693b      	ldr	r3, [r7, #16]
90003a70:	43db      	mvns	r3, r3
90003a72:	69ba      	ldr	r2, [r7, #24]
90003a74:	4013      	ands	r3, r2
90003a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003a78:	683b      	ldr	r3, [r7, #0]
90003a7a:	685b      	ldr	r3, [r3, #4]
90003a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003a80:	2b00      	cmp	r3, #0
90003a82:	d003      	beq.n	90003a8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003a84:	69ba      	ldr	r2, [r7, #24]
90003a86:	693b      	ldr	r3, [r7, #16]
90003a88:	4313      	orrs	r3, r2
90003a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003a8c:	697b      	ldr	r3, [r7, #20]
90003a8e:	69ba      	ldr	r2, [r7, #24]
90003a90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003a92:	697b      	ldr	r3, [r7, #20]
90003a94:	681b      	ldr	r3, [r3, #0]
90003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003a98:	693b      	ldr	r3, [r7, #16]
90003a9a:	43db      	mvns	r3, r3
90003a9c:	69ba      	ldr	r2, [r7, #24]
90003a9e:	4013      	ands	r3, r2
90003aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003aa2:	683b      	ldr	r3, [r7, #0]
90003aa4:	685b      	ldr	r3, [r3, #4]
90003aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003aaa:	2b00      	cmp	r3, #0
90003aac:	d003      	beq.n	90003ab6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003aae:	69ba      	ldr	r2, [r7, #24]
90003ab0:	693b      	ldr	r3, [r7, #16]
90003ab2:	4313      	orrs	r3, r2
90003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003ab6:	697b      	ldr	r3, [r7, #20]
90003ab8:	69ba      	ldr	r2, [r7, #24]
90003aba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003abc:	69fb      	ldr	r3, [r7, #28]
90003abe:	3301      	adds	r3, #1
90003ac0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003ac2:	683b      	ldr	r3, [r7, #0]
90003ac4:	681a      	ldr	r2, [r3, #0]
90003ac6:	69fb      	ldr	r3, [r7, #28]
90003ac8:	fa22 f303 	lsr.w	r3, r2, r3
90003acc:	2b00      	cmp	r3, #0
90003ace:	f47f ae63 	bne.w	90003798 <HAL_GPIO_Init+0x14>
  }
}
90003ad2:	bf00      	nop
90003ad4:	bf00      	nop
90003ad6:	3724      	adds	r7, #36	@ 0x24
90003ad8:	46bd      	mov	sp, r7
90003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ade:	4770      	bx	lr
90003ae0:	58000400 	.word	0x58000400

90003ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003ae4:	b480      	push	{r7}
90003ae6:	b085      	sub	sp, #20
90003ae8:	af00      	add	r7, sp, #0
90003aea:	6078      	str	r0, [r7, #4]
90003aec:	460b      	mov	r3, r1
90003aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003af0:	687b      	ldr	r3, [r7, #4]
90003af2:	691a      	ldr	r2, [r3, #16]
90003af4:	887b      	ldrh	r3, [r7, #2]
90003af6:	4013      	ands	r3, r2
90003af8:	2b00      	cmp	r3, #0
90003afa:	d002      	beq.n	90003b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003afc:	2301      	movs	r3, #1
90003afe:	73fb      	strb	r3, [r7, #15]
90003b00:	e001      	b.n	90003b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003b02:	2300      	movs	r3, #0
90003b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003b06:	7bfb      	ldrb	r3, [r7, #15]
}
90003b08:	4618      	mov	r0, r3
90003b0a:	3714      	adds	r7, #20
90003b0c:	46bd      	mov	sp, r7
90003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b12:	4770      	bx	lr

90003b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003b14:	b480      	push	{r7}
90003b16:	b083      	sub	sp, #12
90003b18:	af00      	add	r7, sp, #0
90003b1a:	6078      	str	r0, [r7, #4]
90003b1c:	460b      	mov	r3, r1
90003b1e:	807b      	strh	r3, [r7, #2]
90003b20:	4613      	mov	r3, r2
90003b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003b24:	787b      	ldrb	r3, [r7, #1]
90003b26:	2b00      	cmp	r3, #0
90003b28:	d003      	beq.n	90003b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003b2a:	887a      	ldrh	r2, [r7, #2]
90003b2c:	687b      	ldr	r3, [r7, #4]
90003b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003b30:	e003      	b.n	90003b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003b32:	887b      	ldrh	r3, [r7, #2]
90003b34:	041a      	lsls	r2, r3, #16
90003b36:	687b      	ldr	r3, [r7, #4]
90003b38:	619a      	str	r2, [r3, #24]
}
90003b3a:	bf00      	nop
90003b3c:	370c      	adds	r7, #12
90003b3e:	46bd      	mov	sp, r7
90003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b44:	4770      	bx	lr

90003b46 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003b46:	b580      	push	{r7, lr}
90003b48:	b086      	sub	sp, #24
90003b4a:	af00      	add	r7, sp, #0
90003b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003b4e:	687b      	ldr	r3, [r7, #4]
90003b50:	681b      	ldr	r3, [r3, #0]
90003b52:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003b54:	693b      	ldr	r3, [r7, #16]
90003b56:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003b58:	687b      	ldr	r3, [r7, #4]
90003b5a:	681b      	ldr	r3, [r3, #0]
90003b5c:	4618      	mov	r0, r3
90003b5e:	f007 f9a5 	bl	9000aeac <USB_GetMode>
90003b62:	4603      	mov	r3, r0
90003b64:	2b01      	cmp	r3, #1
90003b66:	f040 80fb 	bne.w	90003d60 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003b6a:	687b      	ldr	r3, [r7, #4]
90003b6c:	681b      	ldr	r3, [r3, #0]
90003b6e:	4618      	mov	r0, r3
90003b70:	f007 f968 	bl	9000ae44 <USB_ReadInterrupts>
90003b74:	4603      	mov	r3, r0
90003b76:	2b00      	cmp	r3, #0
90003b78:	f000 80f1 	beq.w	90003d5e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003b7c:	687b      	ldr	r3, [r7, #4]
90003b7e:	681b      	ldr	r3, [r3, #0]
90003b80:	4618      	mov	r0, r3
90003b82:	f007 f95f 	bl	9000ae44 <USB_ReadInterrupts>
90003b86:	4603      	mov	r3, r0
90003b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003b8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90003b90:	d104      	bne.n	90003b9c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003b92:	687b      	ldr	r3, [r7, #4]
90003b94:	681b      	ldr	r3, [r3, #0]
90003b96:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90003b9a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003b9c:	687b      	ldr	r3, [r7, #4]
90003b9e:	681b      	ldr	r3, [r3, #0]
90003ba0:	4618      	mov	r0, r3
90003ba2:	f007 f94f 	bl	9000ae44 <USB_ReadInterrupts>
90003ba6:	4603      	mov	r3, r0
90003ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003bac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90003bb0:	d104      	bne.n	90003bbc <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003bb2:	687b      	ldr	r3, [r7, #4]
90003bb4:	681b      	ldr	r3, [r3, #0]
90003bb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90003bba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003bbc:	687b      	ldr	r3, [r7, #4]
90003bbe:	681b      	ldr	r3, [r3, #0]
90003bc0:	4618      	mov	r0, r3
90003bc2:	f007 f93f 	bl	9000ae44 <USB_ReadInterrupts>
90003bc6:	4603      	mov	r3, r0
90003bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90003bcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90003bd0:	d104      	bne.n	90003bdc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003bd2:	687b      	ldr	r3, [r7, #4]
90003bd4:	681b      	ldr	r3, [r3, #0]
90003bd6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003bda:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003bdc:	687b      	ldr	r3, [r7, #4]
90003bde:	681b      	ldr	r3, [r3, #0]
90003be0:	4618      	mov	r0, r3
90003be2:	f007 f92f 	bl	9000ae44 <USB_ReadInterrupts>
90003be6:	4603      	mov	r3, r0
90003be8:	f003 0302 	and.w	r3, r3, #2
90003bec:	2b02      	cmp	r3, #2
90003bee:	d103      	bne.n	90003bf8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003bf0:	687b      	ldr	r3, [r7, #4]
90003bf2:	681b      	ldr	r3, [r3, #0]
90003bf4:	2202      	movs	r2, #2
90003bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003bf8:	687b      	ldr	r3, [r7, #4]
90003bfa:	681b      	ldr	r3, [r3, #0]
90003bfc:	4618      	mov	r0, r3
90003bfe:	f007 f921 	bl	9000ae44 <USB_ReadInterrupts>
90003c02:	4603      	mov	r3, r0
90003c04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90003c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003c0c:	d120      	bne.n	90003c50 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90003c0e:	687b      	ldr	r3, [r7, #4]
90003c10:	681b      	ldr	r3, [r3, #0]
90003c12:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90003c16:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90003c18:	68fb      	ldr	r3, [r7, #12]
90003c1a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90003c1e:	681b      	ldr	r3, [r3, #0]
90003c20:	f003 0301 	and.w	r3, r3, #1
90003c24:	2b00      	cmp	r3, #0
90003c26:	d113      	bne.n	90003c50 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90003c28:	2110      	movs	r1, #16
90003c2a:	6938      	ldr	r0, [r7, #16]
90003c2c:	f007 f852 	bl	9000acd4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90003c30:	6938      	ldr	r0, [r7, #16]
90003c32:	f007 f881 	bl	9000ad38 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90003c36:	687b      	ldr	r3, [r7, #4]
90003c38:	7a5b      	ldrb	r3, [r3, #9]
90003c3a:	2b02      	cmp	r3, #2
90003c3c:	d105      	bne.n	90003c4a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003c3e:	687b      	ldr	r3, [r7, #4]
90003c40:	681b      	ldr	r3, [r3, #0]
90003c42:	2101      	movs	r1, #1
90003c44:	4618      	mov	r0, r3
90003c46:	f007 f93f 	bl	9000aec8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90003c4a:	6878      	ldr	r0, [r7, #4]
90003c4c:	f7fd f91c 	bl	90000e88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90003c50:	687b      	ldr	r3, [r7, #4]
90003c52:	681b      	ldr	r3, [r3, #0]
90003c54:	4618      	mov	r0, r3
90003c56:	f007 f8f5 	bl	9000ae44 <USB_ReadInterrupts>
90003c5a:	4603      	mov	r3, r0
90003c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90003c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003c64:	d102      	bne.n	90003c6c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90003c66:	6878      	ldr	r0, [r7, #4]
90003c68:	f001 fca1 	bl	900055ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90003c6c:	687b      	ldr	r3, [r7, #4]
90003c6e:	681b      	ldr	r3, [r3, #0]
90003c70:	4618      	mov	r0, r3
90003c72:	f007 f8e7 	bl	9000ae44 <USB_ReadInterrupts>
90003c76:	4603      	mov	r3, r0
90003c78:	f003 0308 	and.w	r3, r3, #8
90003c7c:	2b08      	cmp	r3, #8
90003c7e:	d106      	bne.n	90003c8e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90003c80:	6878      	ldr	r0, [r7, #4]
90003c82:	f7fd f8e5 	bl	90000e50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90003c86:	687b      	ldr	r3, [r7, #4]
90003c88:	681b      	ldr	r3, [r3, #0]
90003c8a:	2208      	movs	r2, #8
90003c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90003c8e:	687b      	ldr	r3, [r7, #4]
90003c90:	681b      	ldr	r3, [r3, #0]
90003c92:	4618      	mov	r0, r3
90003c94:	f007 f8d6 	bl	9000ae44 <USB_ReadInterrupts>
90003c98:	4603      	mov	r3, r0
90003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90003c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90003ca2:	d139      	bne.n	90003d18 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003ca4:	687b      	ldr	r3, [r7, #4]
90003ca6:	681b      	ldr	r3, [r3, #0]
90003ca8:	4618      	mov	r0, r3
90003caa:	f007 f94a 	bl	9000af42 <USB_HC_ReadInterrupt>
90003cae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003cb0:	2300      	movs	r3, #0
90003cb2:	617b      	str	r3, [r7, #20]
90003cb4:	e025      	b.n	90003d02 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90003cb6:	697b      	ldr	r3, [r7, #20]
90003cb8:	f003 030f 	and.w	r3, r3, #15
90003cbc:	68ba      	ldr	r2, [r7, #8]
90003cbe:	fa22 f303 	lsr.w	r3, r2, r3
90003cc2:	f003 0301 	and.w	r3, r3, #1
90003cc6:	2b00      	cmp	r3, #0
90003cc8:	d018      	beq.n	90003cfc <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003cca:	697b      	ldr	r3, [r7, #20]
90003ccc:	015a      	lsls	r2, r3, #5
90003cce:	68fb      	ldr	r3, [r7, #12]
90003cd0:	4413      	add	r3, r2
90003cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003cd6:	681b      	ldr	r3, [r3, #0]
90003cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90003cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90003ce0:	d106      	bne.n	90003cf0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90003ce2:	697b      	ldr	r3, [r7, #20]
90003ce4:	b2db      	uxtb	r3, r3
90003ce6:	4619      	mov	r1, r3
90003ce8:	6878      	ldr	r0, [r7, #4]
90003cea:	f000 f859 	bl	90003da0 <HCD_HC_IN_IRQHandler>
90003cee:	e005      	b.n	90003cfc <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90003cf0:	697b      	ldr	r3, [r7, #20]
90003cf2:	b2db      	uxtb	r3, r3
90003cf4:	4619      	mov	r1, r3
90003cf6:	6878      	ldr	r0, [r7, #4]
90003cf8:	f000 febb 	bl	90004a72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003cfc:	697b      	ldr	r3, [r7, #20]
90003cfe:	3301      	adds	r3, #1
90003d00:	617b      	str	r3, [r7, #20]
90003d02:	687b      	ldr	r3, [r7, #4]
90003d04:	795b      	ldrb	r3, [r3, #5]
90003d06:	461a      	mov	r2, r3
90003d08:	697b      	ldr	r3, [r7, #20]
90003d0a:	4293      	cmp	r3, r2
90003d0c:	d3d3      	bcc.n	90003cb6 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90003d0e:	687b      	ldr	r3, [r7, #4]
90003d10:	681b      	ldr	r3, [r3, #0]
90003d12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90003d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90003d18:	687b      	ldr	r3, [r7, #4]
90003d1a:	681b      	ldr	r3, [r3, #0]
90003d1c:	4618      	mov	r0, r3
90003d1e:	f007 f891 	bl	9000ae44 <USB_ReadInterrupts>
90003d22:	4603      	mov	r3, r0
90003d24:	f003 0310 	and.w	r3, r3, #16
90003d28:	2b10      	cmp	r3, #16
90003d2a:	d101      	bne.n	90003d30 <HAL_HCD_IRQHandler+0x1ea>
90003d2c:	2301      	movs	r3, #1
90003d2e:	e000      	b.n	90003d32 <HAL_HCD_IRQHandler+0x1ec>
90003d30:	2300      	movs	r3, #0
90003d32:	2b00      	cmp	r3, #0
90003d34:	d014      	beq.n	90003d60 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003d36:	687b      	ldr	r3, [r7, #4]
90003d38:	681b      	ldr	r3, [r3, #0]
90003d3a:	699a      	ldr	r2, [r3, #24]
90003d3c:	687b      	ldr	r3, [r7, #4]
90003d3e:	681b      	ldr	r3, [r3, #0]
90003d40:	f022 0210 	bic.w	r2, r2, #16
90003d44:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90003d46:	6878      	ldr	r0, [r7, #4]
90003d48:	f001 fb52 	bl	900053f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003d4c:	687b      	ldr	r3, [r7, #4]
90003d4e:	681b      	ldr	r3, [r3, #0]
90003d50:	699a      	ldr	r2, [r3, #24]
90003d52:	687b      	ldr	r3, [r7, #4]
90003d54:	681b      	ldr	r3, [r3, #0]
90003d56:	f042 0210 	orr.w	r2, r2, #16
90003d5a:	619a      	str	r2, [r3, #24]
90003d5c:	e000      	b.n	90003d60 <HAL_HCD_IRQHandler+0x21a>
      return;
90003d5e:	bf00      	nop
    }
  }
}
90003d60:	3718      	adds	r7, #24
90003d62:	46bd      	mov	sp, r7
90003d64:	bd80      	pop	{r7, pc}

90003d66 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90003d66:	b580      	push	{r7, lr}
90003d68:	b082      	sub	sp, #8
90003d6a:	af00      	add	r7, sp, #0
90003d6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90003d6e:	687b      	ldr	r3, [r7, #4]
90003d70:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90003d74:	2b01      	cmp	r3, #1
90003d76:	d101      	bne.n	90003d7c <HAL_HCD_Stop+0x16>
90003d78:	2302      	movs	r3, #2
90003d7a:	e00d      	b.n	90003d98 <HAL_HCD_Stop+0x32>
90003d7c:	687b      	ldr	r3, [r7, #4]
90003d7e:	2201      	movs	r2, #1
90003d80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90003d84:	687b      	ldr	r3, [r7, #4]
90003d86:	681b      	ldr	r3, [r3, #0]
90003d88:	4618      	mov	r0, r3
90003d8a:	f007 fa0b 	bl	9000b1a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90003d8e:	687b      	ldr	r3, [r7, #4]
90003d90:	2200      	movs	r2, #0
90003d92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
90003d96:	2300      	movs	r3, #0
}
90003d98:	4618      	mov	r0, r3
90003d9a:	3708      	adds	r7, #8
90003d9c:	46bd      	mov	sp, r7
90003d9e:	bd80      	pop	{r7, pc}

90003da0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90003da0:	b580      	push	{r7, lr}
90003da2:	b086      	sub	sp, #24
90003da4:	af00      	add	r7, sp, #0
90003da6:	6078      	str	r0, [r7, #4]
90003da8:	460b      	mov	r3, r1
90003daa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003dac:	687b      	ldr	r3, [r7, #4]
90003dae:	681b      	ldr	r3, [r3, #0]
90003db0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003db2:	697b      	ldr	r3, [r7, #20]
90003db4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90003db6:	687b      	ldr	r3, [r7, #4]
90003db8:	681b      	ldr	r3, [r3, #0]
90003dba:	78fa      	ldrb	r2, [r7, #3]
90003dbc:	4611      	mov	r1, r2
90003dbe:	4618      	mov	r0, r3
90003dc0:	f007 f853 	bl	9000ae6a <USB_ReadChInterrupts>
90003dc4:	4603      	mov	r3, r0
90003dc6:	f003 0304 	and.w	r3, r3, #4
90003dca:	2b04      	cmp	r3, #4
90003dcc:	d11a      	bne.n	90003e04 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90003dce:	78fb      	ldrb	r3, [r7, #3]
90003dd0:	015a      	lsls	r2, r3, #5
90003dd2:	693b      	ldr	r3, [r7, #16]
90003dd4:	4413      	add	r3, r2
90003dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003dda:	461a      	mov	r2, r3
90003ddc:	2304      	movs	r3, #4
90003dde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90003de0:	78fa      	ldrb	r2, [r7, #3]
90003de2:	6879      	ldr	r1, [r7, #4]
90003de4:	4613      	mov	r3, r2
90003de6:	011b      	lsls	r3, r3, #4
90003de8:	1a9b      	subs	r3, r3, r2
90003dea:	009b      	lsls	r3, r3, #2
90003dec:	440b      	add	r3, r1
90003dee:	334d      	adds	r3, #77	@ 0x4d
90003df0:	2207      	movs	r2, #7
90003df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90003df4:	687b      	ldr	r3, [r7, #4]
90003df6:	681b      	ldr	r3, [r3, #0]
90003df8:	78fa      	ldrb	r2, [r7, #3]
90003dfa:	4611      	mov	r1, r2
90003dfc:	4618      	mov	r0, r3
90003dfe:	f007 f8b1 	bl	9000af64 <USB_HC_Halt>
90003e02:	e09e      	b.n	90003f42 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90003e04:	687b      	ldr	r3, [r7, #4]
90003e06:	681b      	ldr	r3, [r3, #0]
90003e08:	78fa      	ldrb	r2, [r7, #3]
90003e0a:	4611      	mov	r1, r2
90003e0c:	4618      	mov	r0, r3
90003e0e:	f007 f82c 	bl	9000ae6a <USB_ReadChInterrupts>
90003e12:	4603      	mov	r3, r0
90003e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90003e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90003e1c:	d11b      	bne.n	90003e56 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
90003e1e:	78fb      	ldrb	r3, [r7, #3]
90003e20:	015a      	lsls	r2, r3, #5
90003e22:	693b      	ldr	r3, [r7, #16]
90003e24:	4413      	add	r3, r2
90003e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003e2a:	461a      	mov	r2, r3
90003e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
90003e30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
90003e32:	78fa      	ldrb	r2, [r7, #3]
90003e34:	6879      	ldr	r1, [r7, #4]
90003e36:	4613      	mov	r3, r2
90003e38:	011b      	lsls	r3, r3, #4
90003e3a:	1a9b      	subs	r3, r3, r2
90003e3c:	009b      	lsls	r3, r3, #2
90003e3e:	440b      	add	r3, r1
90003e40:	334d      	adds	r3, #77	@ 0x4d
90003e42:	2208      	movs	r2, #8
90003e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90003e46:	687b      	ldr	r3, [r7, #4]
90003e48:	681b      	ldr	r3, [r3, #0]
90003e4a:	78fa      	ldrb	r2, [r7, #3]
90003e4c:	4611      	mov	r1, r2
90003e4e:	4618      	mov	r0, r3
90003e50:	f007 f888 	bl	9000af64 <USB_HC_Halt>
90003e54:	e075      	b.n	90003f42 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90003e56:	687b      	ldr	r3, [r7, #4]
90003e58:	681b      	ldr	r3, [r3, #0]
90003e5a:	78fa      	ldrb	r2, [r7, #3]
90003e5c:	4611      	mov	r1, r2
90003e5e:	4618      	mov	r0, r3
90003e60:	f007 f803 	bl	9000ae6a <USB_ReadChInterrupts>
90003e64:	4603      	mov	r3, r0
90003e66:	f003 0308 	and.w	r3, r3, #8
90003e6a:	2b08      	cmp	r3, #8
90003e6c:	d11a      	bne.n	90003ea4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90003e6e:	78fb      	ldrb	r3, [r7, #3]
90003e70:	015a      	lsls	r2, r3, #5
90003e72:	693b      	ldr	r3, [r7, #16]
90003e74:	4413      	add	r3, r2
90003e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003e7a:	461a      	mov	r2, r3
90003e7c:	2308      	movs	r3, #8
90003e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90003e80:	78fa      	ldrb	r2, [r7, #3]
90003e82:	6879      	ldr	r1, [r7, #4]
90003e84:	4613      	mov	r3, r2
90003e86:	011b      	lsls	r3, r3, #4
90003e88:	1a9b      	subs	r3, r3, r2
90003e8a:	009b      	lsls	r3, r3, #2
90003e8c:	440b      	add	r3, r1
90003e8e:	334d      	adds	r3, #77	@ 0x4d
90003e90:	2206      	movs	r2, #6
90003e92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90003e94:	687b      	ldr	r3, [r7, #4]
90003e96:	681b      	ldr	r3, [r3, #0]
90003e98:	78fa      	ldrb	r2, [r7, #3]
90003e9a:	4611      	mov	r1, r2
90003e9c:	4618      	mov	r0, r3
90003e9e:	f007 f861 	bl	9000af64 <USB_HC_Halt>
90003ea2:	e04e      	b.n	90003f42 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90003ea4:	687b      	ldr	r3, [r7, #4]
90003ea6:	681b      	ldr	r3, [r3, #0]
90003ea8:	78fa      	ldrb	r2, [r7, #3]
90003eaa:	4611      	mov	r1, r2
90003eac:	4618      	mov	r0, r3
90003eae:	f006 ffdc 	bl	9000ae6a <USB_ReadChInterrupts>
90003eb2:	4603      	mov	r3, r0
90003eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90003eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90003ebc:	d11b      	bne.n	90003ef6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90003ebe:	78fb      	ldrb	r3, [r7, #3]
90003ec0:	015a      	lsls	r2, r3, #5
90003ec2:	693b      	ldr	r3, [r7, #16]
90003ec4:	4413      	add	r3, r2
90003ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003eca:	461a      	mov	r2, r3
90003ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90003ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90003ed2:	78fa      	ldrb	r2, [r7, #3]
90003ed4:	6879      	ldr	r1, [r7, #4]
90003ed6:	4613      	mov	r3, r2
90003ed8:	011b      	lsls	r3, r3, #4
90003eda:	1a9b      	subs	r3, r3, r2
90003edc:	009b      	lsls	r3, r3, #2
90003ede:	440b      	add	r3, r1
90003ee0:	334d      	adds	r3, #77	@ 0x4d
90003ee2:	2209      	movs	r2, #9
90003ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90003ee6:	687b      	ldr	r3, [r7, #4]
90003ee8:	681b      	ldr	r3, [r3, #0]
90003eea:	78fa      	ldrb	r2, [r7, #3]
90003eec:	4611      	mov	r1, r2
90003eee:	4618      	mov	r0, r3
90003ef0:	f007 f838 	bl	9000af64 <USB_HC_Halt>
90003ef4:	e025      	b.n	90003f42 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90003ef6:	687b      	ldr	r3, [r7, #4]
90003ef8:	681b      	ldr	r3, [r3, #0]
90003efa:	78fa      	ldrb	r2, [r7, #3]
90003efc:	4611      	mov	r1, r2
90003efe:	4618      	mov	r0, r3
90003f00:	f006 ffb3 	bl	9000ae6a <USB_ReadChInterrupts>
90003f04:	4603      	mov	r3, r0
90003f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90003f0a:	2b80      	cmp	r3, #128	@ 0x80
90003f0c:	d119      	bne.n	90003f42 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90003f0e:	78fb      	ldrb	r3, [r7, #3]
90003f10:	015a      	lsls	r2, r3, #5
90003f12:	693b      	ldr	r3, [r7, #16]
90003f14:	4413      	add	r3, r2
90003f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003f1a:	461a      	mov	r2, r3
90003f1c:	2380      	movs	r3, #128	@ 0x80
90003f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90003f20:	78fa      	ldrb	r2, [r7, #3]
90003f22:	6879      	ldr	r1, [r7, #4]
90003f24:	4613      	mov	r3, r2
90003f26:	011b      	lsls	r3, r3, #4
90003f28:	1a9b      	subs	r3, r3, r2
90003f2a:	009b      	lsls	r3, r3, #2
90003f2c:	440b      	add	r3, r1
90003f2e:	334d      	adds	r3, #77	@ 0x4d
90003f30:	2207      	movs	r2, #7
90003f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90003f34:	687b      	ldr	r3, [r7, #4]
90003f36:	681b      	ldr	r3, [r3, #0]
90003f38:	78fa      	ldrb	r2, [r7, #3]
90003f3a:	4611      	mov	r1, r2
90003f3c:	4618      	mov	r0, r3
90003f3e:	f007 f811 	bl	9000af64 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90003f42:	687b      	ldr	r3, [r7, #4]
90003f44:	681b      	ldr	r3, [r3, #0]
90003f46:	78fa      	ldrb	r2, [r7, #3]
90003f48:	4611      	mov	r1, r2
90003f4a:	4618      	mov	r0, r3
90003f4c:	f006 ff8d 	bl	9000ae6a <USB_ReadChInterrupts>
90003f50:	4603      	mov	r3, r0
90003f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90003f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90003f5a:	d112      	bne.n	90003f82 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90003f5c:	687b      	ldr	r3, [r7, #4]
90003f5e:	681b      	ldr	r3, [r3, #0]
90003f60:	78fa      	ldrb	r2, [r7, #3]
90003f62:	4611      	mov	r1, r2
90003f64:	4618      	mov	r0, r3
90003f66:	f006 fffd 	bl	9000af64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90003f6a:	78fb      	ldrb	r3, [r7, #3]
90003f6c:	015a      	lsls	r2, r3, #5
90003f6e:	693b      	ldr	r3, [r7, #16]
90003f70:	4413      	add	r3, r2
90003f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003f76:	461a      	mov	r2, r3
90003f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
90003f7c:	6093      	str	r3, [r2, #8]
90003f7e:	f000 bd75 	b.w	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90003f82:	687b      	ldr	r3, [r7, #4]
90003f84:	681b      	ldr	r3, [r3, #0]
90003f86:	78fa      	ldrb	r2, [r7, #3]
90003f88:	4611      	mov	r1, r2
90003f8a:	4618      	mov	r0, r3
90003f8c:	f006 ff6d 	bl	9000ae6a <USB_ReadChInterrupts>
90003f90:	4603      	mov	r3, r0
90003f92:	f003 0301 	and.w	r3, r3, #1
90003f96:	2b01      	cmp	r3, #1
90003f98:	f040 8128 	bne.w	900041ec <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90003f9c:	78fb      	ldrb	r3, [r7, #3]
90003f9e:	015a      	lsls	r2, r3, #5
90003fa0:	693b      	ldr	r3, [r7, #16]
90003fa2:	4413      	add	r3, r2
90003fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003fa8:	461a      	mov	r2, r3
90003faa:	2320      	movs	r3, #32
90003fac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90003fae:	78fa      	ldrb	r2, [r7, #3]
90003fb0:	6879      	ldr	r1, [r7, #4]
90003fb2:	4613      	mov	r3, r2
90003fb4:	011b      	lsls	r3, r3, #4
90003fb6:	1a9b      	subs	r3, r3, r2
90003fb8:	009b      	lsls	r3, r3, #2
90003fba:	440b      	add	r3, r1
90003fbc:	331b      	adds	r3, #27
90003fbe:	781b      	ldrb	r3, [r3, #0]
90003fc0:	2b01      	cmp	r3, #1
90003fc2:	d119      	bne.n	90003ff8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90003fc4:	78fa      	ldrb	r2, [r7, #3]
90003fc6:	6879      	ldr	r1, [r7, #4]
90003fc8:	4613      	mov	r3, r2
90003fca:	011b      	lsls	r3, r3, #4
90003fcc:	1a9b      	subs	r3, r3, r2
90003fce:	009b      	lsls	r3, r3, #2
90003fd0:	440b      	add	r3, r1
90003fd2:	331b      	adds	r3, #27
90003fd4:	2200      	movs	r2, #0
90003fd6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90003fd8:	78fb      	ldrb	r3, [r7, #3]
90003fda:	015a      	lsls	r2, r3, #5
90003fdc:	693b      	ldr	r3, [r7, #16]
90003fde:	4413      	add	r3, r2
90003fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003fe4:	685b      	ldr	r3, [r3, #4]
90003fe6:	78fa      	ldrb	r2, [r7, #3]
90003fe8:	0151      	lsls	r1, r2, #5
90003fea:	693a      	ldr	r2, [r7, #16]
90003fec:	440a      	add	r2, r1
90003fee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90003ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90003ff6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90003ff8:	687b      	ldr	r3, [r7, #4]
90003ffa:	799b      	ldrb	r3, [r3, #6]
90003ffc:	2b00      	cmp	r3, #0
90003ffe:	d01b      	beq.n	90004038 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004000:	78fa      	ldrb	r2, [r7, #3]
90004002:	6879      	ldr	r1, [r7, #4]
90004004:	4613      	mov	r3, r2
90004006:	011b      	lsls	r3, r3, #4
90004008:	1a9b      	subs	r3, r3, r2
9000400a:	009b      	lsls	r3, r3, #2
9000400c:	440b      	add	r3, r1
9000400e:	3330      	adds	r3, #48	@ 0x30
90004010:	6819      	ldr	r1, [r3, #0]
90004012:	78fb      	ldrb	r3, [r7, #3]
90004014:	015a      	lsls	r2, r3, #5
90004016:	693b      	ldr	r3, [r7, #16]
90004018:	4413      	add	r3, r2
9000401a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000401e:	691b      	ldr	r3, [r3, #16]
90004020:	f3c3 0312 	ubfx	r3, r3, #0, #19
90004024:	78fa      	ldrb	r2, [r7, #3]
90004026:	1ac9      	subs	r1, r1, r3
90004028:	6878      	ldr	r0, [r7, #4]
9000402a:	4613      	mov	r3, r2
9000402c:	011b      	lsls	r3, r3, #4
9000402e:	1a9b      	subs	r3, r3, r2
90004030:	009b      	lsls	r3, r3, #2
90004032:	4403      	add	r3, r0
90004034:	3338      	adds	r3, #56	@ 0x38
90004036:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004038:	78fa      	ldrb	r2, [r7, #3]
9000403a:	6879      	ldr	r1, [r7, #4]
9000403c:	4613      	mov	r3, r2
9000403e:	011b      	lsls	r3, r3, #4
90004040:	1a9b      	subs	r3, r3, r2
90004042:	009b      	lsls	r3, r3, #2
90004044:	440b      	add	r3, r1
90004046:	334d      	adds	r3, #77	@ 0x4d
90004048:	2201      	movs	r2, #1
9000404a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
9000404c:	78fa      	ldrb	r2, [r7, #3]
9000404e:	6879      	ldr	r1, [r7, #4]
90004050:	4613      	mov	r3, r2
90004052:	011b      	lsls	r3, r3, #4
90004054:	1a9b      	subs	r3, r3, r2
90004056:	009b      	lsls	r3, r3, #2
90004058:	440b      	add	r3, r1
9000405a:	3344      	adds	r3, #68	@ 0x44
9000405c:	2200      	movs	r2, #0
9000405e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004060:	78fb      	ldrb	r3, [r7, #3]
90004062:	015a      	lsls	r2, r3, #5
90004064:	693b      	ldr	r3, [r7, #16]
90004066:	4413      	add	r3, r2
90004068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000406c:	461a      	mov	r2, r3
9000406e:	2301      	movs	r3, #1
90004070:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004072:	78fa      	ldrb	r2, [r7, #3]
90004074:	6879      	ldr	r1, [r7, #4]
90004076:	4613      	mov	r3, r2
90004078:	011b      	lsls	r3, r3, #4
9000407a:	1a9b      	subs	r3, r3, r2
9000407c:	009b      	lsls	r3, r3, #2
9000407e:	440b      	add	r3, r1
90004080:	3326      	adds	r3, #38	@ 0x26
90004082:	781b      	ldrb	r3, [r3, #0]
90004084:	2b00      	cmp	r3, #0
90004086:	d00a      	beq.n	9000409e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004088:	78fa      	ldrb	r2, [r7, #3]
9000408a:	6879      	ldr	r1, [r7, #4]
9000408c:	4613      	mov	r3, r2
9000408e:	011b      	lsls	r3, r3, #4
90004090:	1a9b      	subs	r3, r3, r2
90004092:	009b      	lsls	r3, r3, #2
90004094:	440b      	add	r3, r1
90004096:	3326      	adds	r3, #38	@ 0x26
90004098:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000409a:	2b02      	cmp	r3, #2
9000409c:	d110      	bne.n	900040c0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000409e:	687b      	ldr	r3, [r7, #4]
900040a0:	681b      	ldr	r3, [r3, #0]
900040a2:	78fa      	ldrb	r2, [r7, #3]
900040a4:	4611      	mov	r1, r2
900040a6:	4618      	mov	r0, r3
900040a8:	f006 ff5c 	bl	9000af64 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900040ac:	78fb      	ldrb	r3, [r7, #3]
900040ae:	015a      	lsls	r2, r3, #5
900040b0:	693b      	ldr	r3, [r7, #16]
900040b2:	4413      	add	r3, r2
900040b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900040b8:	461a      	mov	r2, r3
900040ba:	2310      	movs	r3, #16
900040bc:	6093      	str	r3, [r2, #8]
900040be:	e03d      	b.n	9000413c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900040c0:	78fa      	ldrb	r2, [r7, #3]
900040c2:	6879      	ldr	r1, [r7, #4]
900040c4:	4613      	mov	r3, r2
900040c6:	011b      	lsls	r3, r3, #4
900040c8:	1a9b      	subs	r3, r3, r2
900040ca:	009b      	lsls	r3, r3, #2
900040cc:	440b      	add	r3, r1
900040ce:	3326      	adds	r3, #38	@ 0x26
900040d0:	781b      	ldrb	r3, [r3, #0]
900040d2:	2b03      	cmp	r3, #3
900040d4:	d00a      	beq.n	900040ec <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
900040d6:	78fa      	ldrb	r2, [r7, #3]
900040d8:	6879      	ldr	r1, [r7, #4]
900040da:	4613      	mov	r3, r2
900040dc:	011b      	lsls	r3, r3, #4
900040de:	1a9b      	subs	r3, r3, r2
900040e0:	009b      	lsls	r3, r3, #2
900040e2:	440b      	add	r3, r1
900040e4:	3326      	adds	r3, #38	@ 0x26
900040e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900040e8:	2b01      	cmp	r3, #1
900040ea:	d127      	bne.n	9000413c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900040ec:	78fb      	ldrb	r3, [r7, #3]
900040ee:	015a      	lsls	r2, r3, #5
900040f0:	693b      	ldr	r3, [r7, #16]
900040f2:	4413      	add	r3, r2
900040f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900040f8:	681b      	ldr	r3, [r3, #0]
900040fa:	78fa      	ldrb	r2, [r7, #3]
900040fc:	0151      	lsls	r1, r2, #5
900040fe:	693a      	ldr	r2, [r7, #16]
90004100:	440a      	add	r2, r1
90004102:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004106:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
9000410a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000410c:	78fa      	ldrb	r2, [r7, #3]
9000410e:	6879      	ldr	r1, [r7, #4]
90004110:	4613      	mov	r3, r2
90004112:	011b      	lsls	r3, r3, #4
90004114:	1a9b      	subs	r3, r3, r2
90004116:	009b      	lsls	r3, r3, #2
90004118:	440b      	add	r3, r1
9000411a:	334c      	adds	r3, #76	@ 0x4c
9000411c:	2201      	movs	r2, #1
9000411e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004120:	78fa      	ldrb	r2, [r7, #3]
90004122:	6879      	ldr	r1, [r7, #4]
90004124:	4613      	mov	r3, r2
90004126:	011b      	lsls	r3, r3, #4
90004128:	1a9b      	subs	r3, r3, r2
9000412a:	009b      	lsls	r3, r3, #2
9000412c:	440b      	add	r3, r1
9000412e:	334c      	adds	r3, #76	@ 0x4c
90004130:	781a      	ldrb	r2, [r3, #0]
90004132:	78fb      	ldrb	r3, [r7, #3]
90004134:	4619      	mov	r1, r3
90004136:	6878      	ldr	r0, [r7, #4]
90004138:	f7fc fed0 	bl	90000edc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
9000413c:	687b      	ldr	r3, [r7, #4]
9000413e:	799b      	ldrb	r3, [r3, #6]
90004140:	2b01      	cmp	r3, #1
90004142:	d13b      	bne.n	900041bc <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004144:	78fa      	ldrb	r2, [r7, #3]
90004146:	6879      	ldr	r1, [r7, #4]
90004148:	4613      	mov	r3, r2
9000414a:	011b      	lsls	r3, r3, #4
9000414c:	1a9b      	subs	r3, r3, r2
9000414e:	009b      	lsls	r3, r3, #2
90004150:	440b      	add	r3, r1
90004152:	3338      	adds	r3, #56	@ 0x38
90004154:	6819      	ldr	r1, [r3, #0]
90004156:	78fa      	ldrb	r2, [r7, #3]
90004158:	6878      	ldr	r0, [r7, #4]
9000415a:	4613      	mov	r3, r2
9000415c:	011b      	lsls	r3, r3, #4
9000415e:	1a9b      	subs	r3, r3, r2
90004160:	009b      	lsls	r3, r3, #2
90004162:	4403      	add	r3, r0
90004164:	3328      	adds	r3, #40	@ 0x28
90004166:	881b      	ldrh	r3, [r3, #0]
90004168:	440b      	add	r3, r1
9000416a:	1e59      	subs	r1, r3, #1
9000416c:	78fa      	ldrb	r2, [r7, #3]
9000416e:	6878      	ldr	r0, [r7, #4]
90004170:	4613      	mov	r3, r2
90004172:	011b      	lsls	r3, r3, #4
90004174:	1a9b      	subs	r3, r3, r2
90004176:	009b      	lsls	r3, r3, #2
90004178:	4403      	add	r3, r0
9000417a:	3328      	adds	r3, #40	@ 0x28
9000417c:	881b      	ldrh	r3, [r3, #0]
9000417e:	fbb1 f3f3 	udiv	r3, r1, r3
90004182:	f003 0301 	and.w	r3, r3, #1
90004186:	2b00      	cmp	r3, #0
90004188:	f000 8470 	beq.w	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
9000418c:	78fa      	ldrb	r2, [r7, #3]
9000418e:	6879      	ldr	r1, [r7, #4]
90004190:	4613      	mov	r3, r2
90004192:	011b      	lsls	r3, r3, #4
90004194:	1a9b      	subs	r3, r3, r2
90004196:	009b      	lsls	r3, r3, #2
90004198:	440b      	add	r3, r1
9000419a:	333c      	adds	r3, #60	@ 0x3c
9000419c:	781b      	ldrb	r3, [r3, #0]
9000419e:	78fa      	ldrb	r2, [r7, #3]
900041a0:	f083 0301 	eor.w	r3, r3, #1
900041a4:	b2d8      	uxtb	r0, r3
900041a6:	6879      	ldr	r1, [r7, #4]
900041a8:	4613      	mov	r3, r2
900041aa:	011b      	lsls	r3, r3, #4
900041ac:	1a9b      	subs	r3, r3, r2
900041ae:	009b      	lsls	r3, r3, #2
900041b0:	440b      	add	r3, r1
900041b2:	333c      	adds	r3, #60	@ 0x3c
900041b4:	4602      	mov	r2, r0
900041b6:	701a      	strb	r2, [r3, #0]
900041b8:	f000 bc58 	b.w	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
900041bc:	78fa      	ldrb	r2, [r7, #3]
900041be:	6879      	ldr	r1, [r7, #4]
900041c0:	4613      	mov	r3, r2
900041c2:	011b      	lsls	r3, r3, #4
900041c4:	1a9b      	subs	r3, r3, r2
900041c6:	009b      	lsls	r3, r3, #2
900041c8:	440b      	add	r3, r1
900041ca:	333c      	adds	r3, #60	@ 0x3c
900041cc:	781b      	ldrb	r3, [r3, #0]
900041ce:	78fa      	ldrb	r2, [r7, #3]
900041d0:	f083 0301 	eor.w	r3, r3, #1
900041d4:	b2d8      	uxtb	r0, r3
900041d6:	6879      	ldr	r1, [r7, #4]
900041d8:	4613      	mov	r3, r2
900041da:	011b      	lsls	r3, r3, #4
900041dc:	1a9b      	subs	r3, r3, r2
900041de:	009b      	lsls	r3, r3, #2
900041e0:	440b      	add	r3, r1
900041e2:	333c      	adds	r3, #60	@ 0x3c
900041e4:	4602      	mov	r2, r0
900041e6:	701a      	strb	r2, [r3, #0]
900041e8:	f000 bc40 	b.w	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900041ec:	687b      	ldr	r3, [r7, #4]
900041ee:	681b      	ldr	r3, [r3, #0]
900041f0:	78fa      	ldrb	r2, [r7, #3]
900041f2:	4611      	mov	r1, r2
900041f4:	4618      	mov	r0, r3
900041f6:	f006 fe38 	bl	9000ae6a <USB_ReadChInterrupts>
900041fa:	4603      	mov	r3, r0
900041fc:	f003 0320 	and.w	r3, r3, #32
90004200:	2b20      	cmp	r3, #32
90004202:	d131      	bne.n	90004268 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004204:	78fb      	ldrb	r3, [r7, #3]
90004206:	015a      	lsls	r2, r3, #5
90004208:	693b      	ldr	r3, [r7, #16]
9000420a:	4413      	add	r3, r2
9000420c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004210:	461a      	mov	r2, r3
90004212:	2320      	movs	r3, #32
90004214:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
90004216:	78fa      	ldrb	r2, [r7, #3]
90004218:	6879      	ldr	r1, [r7, #4]
9000421a:	4613      	mov	r3, r2
9000421c:	011b      	lsls	r3, r3, #4
9000421e:	1a9b      	subs	r3, r3, r2
90004220:	009b      	lsls	r3, r3, #2
90004222:	440b      	add	r3, r1
90004224:	331a      	adds	r3, #26
90004226:	781b      	ldrb	r3, [r3, #0]
90004228:	2b01      	cmp	r3, #1
9000422a:	f040 841f 	bne.w	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
9000422e:	78fa      	ldrb	r2, [r7, #3]
90004230:	6879      	ldr	r1, [r7, #4]
90004232:	4613      	mov	r3, r2
90004234:	011b      	lsls	r3, r3, #4
90004236:	1a9b      	subs	r3, r3, r2
90004238:	009b      	lsls	r3, r3, #2
9000423a:	440b      	add	r3, r1
9000423c:	331b      	adds	r3, #27
9000423e:	2201      	movs	r2, #1
90004240:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004242:	78fa      	ldrb	r2, [r7, #3]
90004244:	6879      	ldr	r1, [r7, #4]
90004246:	4613      	mov	r3, r2
90004248:	011b      	lsls	r3, r3, #4
9000424a:	1a9b      	subs	r3, r3, r2
9000424c:	009b      	lsls	r3, r3, #2
9000424e:	440b      	add	r3, r1
90004250:	334d      	adds	r3, #77	@ 0x4d
90004252:	2203      	movs	r2, #3
90004254:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004256:	687b      	ldr	r3, [r7, #4]
90004258:	681b      	ldr	r3, [r3, #0]
9000425a:	78fa      	ldrb	r2, [r7, #3]
9000425c:	4611      	mov	r1, r2
9000425e:	4618      	mov	r0, r3
90004260:	f006 fe80 	bl	9000af64 <USB_HC_Halt>
90004264:	f000 bc02 	b.w	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004268:	687b      	ldr	r3, [r7, #4]
9000426a:	681b      	ldr	r3, [r3, #0]
9000426c:	78fa      	ldrb	r2, [r7, #3]
9000426e:	4611      	mov	r1, r2
90004270:	4618      	mov	r0, r3
90004272:	f006 fdfa 	bl	9000ae6a <USB_ReadChInterrupts>
90004276:	4603      	mov	r3, r0
90004278:	f003 0302 	and.w	r3, r3, #2
9000427c:	2b02      	cmp	r3, #2
9000427e:	f040 8305 	bne.w	9000488c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90004282:	78fb      	ldrb	r3, [r7, #3]
90004284:	015a      	lsls	r2, r3, #5
90004286:	693b      	ldr	r3, [r7, #16]
90004288:	4413      	add	r3, r2
9000428a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000428e:	461a      	mov	r2, r3
90004290:	2302      	movs	r3, #2
90004292:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004294:	78fa      	ldrb	r2, [r7, #3]
90004296:	6879      	ldr	r1, [r7, #4]
90004298:	4613      	mov	r3, r2
9000429a:	011b      	lsls	r3, r3, #4
9000429c:	1a9b      	subs	r3, r3, r2
9000429e:	009b      	lsls	r3, r3, #2
900042a0:	440b      	add	r3, r1
900042a2:	334d      	adds	r3, #77	@ 0x4d
900042a4:	781b      	ldrb	r3, [r3, #0]
900042a6:	2b01      	cmp	r3, #1
900042a8:	d114      	bne.n	900042d4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900042aa:	78fa      	ldrb	r2, [r7, #3]
900042ac:	6879      	ldr	r1, [r7, #4]
900042ae:	4613      	mov	r3, r2
900042b0:	011b      	lsls	r3, r3, #4
900042b2:	1a9b      	subs	r3, r3, r2
900042b4:	009b      	lsls	r3, r3, #2
900042b6:	440b      	add	r3, r1
900042b8:	334d      	adds	r3, #77	@ 0x4d
900042ba:	2202      	movs	r2, #2
900042bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900042be:	78fa      	ldrb	r2, [r7, #3]
900042c0:	6879      	ldr	r1, [r7, #4]
900042c2:	4613      	mov	r3, r2
900042c4:	011b      	lsls	r3, r3, #4
900042c6:	1a9b      	subs	r3, r3, r2
900042c8:	009b      	lsls	r3, r3, #2
900042ca:	440b      	add	r3, r1
900042cc:	334c      	adds	r3, #76	@ 0x4c
900042ce:	2201      	movs	r2, #1
900042d0:	701a      	strb	r2, [r3, #0]
900042d2:	e2cc      	b.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
900042d4:	78fa      	ldrb	r2, [r7, #3]
900042d6:	6879      	ldr	r1, [r7, #4]
900042d8:	4613      	mov	r3, r2
900042da:	011b      	lsls	r3, r3, #4
900042dc:	1a9b      	subs	r3, r3, r2
900042de:	009b      	lsls	r3, r3, #2
900042e0:	440b      	add	r3, r1
900042e2:	334d      	adds	r3, #77	@ 0x4d
900042e4:	781b      	ldrb	r3, [r3, #0]
900042e6:	2b06      	cmp	r3, #6
900042e8:	d114      	bne.n	90004314 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900042ea:	78fa      	ldrb	r2, [r7, #3]
900042ec:	6879      	ldr	r1, [r7, #4]
900042ee:	4613      	mov	r3, r2
900042f0:	011b      	lsls	r3, r3, #4
900042f2:	1a9b      	subs	r3, r3, r2
900042f4:	009b      	lsls	r3, r3, #2
900042f6:	440b      	add	r3, r1
900042f8:	334d      	adds	r3, #77	@ 0x4d
900042fa:	2202      	movs	r2, #2
900042fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900042fe:	78fa      	ldrb	r2, [r7, #3]
90004300:	6879      	ldr	r1, [r7, #4]
90004302:	4613      	mov	r3, r2
90004304:	011b      	lsls	r3, r3, #4
90004306:	1a9b      	subs	r3, r3, r2
90004308:	009b      	lsls	r3, r3, #2
9000430a:	440b      	add	r3, r1
9000430c:	334c      	adds	r3, #76	@ 0x4c
9000430e:	2205      	movs	r2, #5
90004310:	701a      	strb	r2, [r3, #0]
90004312:	e2ac      	b.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004314:	78fa      	ldrb	r2, [r7, #3]
90004316:	6879      	ldr	r1, [r7, #4]
90004318:	4613      	mov	r3, r2
9000431a:	011b      	lsls	r3, r3, #4
9000431c:	1a9b      	subs	r3, r3, r2
9000431e:	009b      	lsls	r3, r3, #2
90004320:	440b      	add	r3, r1
90004322:	334d      	adds	r3, #77	@ 0x4d
90004324:	781b      	ldrb	r3, [r3, #0]
90004326:	2b07      	cmp	r3, #7
90004328:	d00b      	beq.n	90004342 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000432a:	78fa      	ldrb	r2, [r7, #3]
9000432c:	6879      	ldr	r1, [r7, #4]
9000432e:	4613      	mov	r3, r2
90004330:	011b      	lsls	r3, r3, #4
90004332:	1a9b      	subs	r3, r3, r2
90004334:	009b      	lsls	r3, r3, #2
90004336:	440b      	add	r3, r1
90004338:	334d      	adds	r3, #77	@ 0x4d
9000433a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000433c:	2b09      	cmp	r3, #9
9000433e:	f040 80a6 	bne.w	9000448e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004342:	78fa      	ldrb	r2, [r7, #3]
90004344:	6879      	ldr	r1, [r7, #4]
90004346:	4613      	mov	r3, r2
90004348:	011b      	lsls	r3, r3, #4
9000434a:	1a9b      	subs	r3, r3, r2
9000434c:	009b      	lsls	r3, r3, #2
9000434e:	440b      	add	r3, r1
90004350:	334d      	adds	r3, #77	@ 0x4d
90004352:	2202      	movs	r2, #2
90004354:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004356:	78fa      	ldrb	r2, [r7, #3]
90004358:	6879      	ldr	r1, [r7, #4]
9000435a:	4613      	mov	r3, r2
9000435c:	011b      	lsls	r3, r3, #4
9000435e:	1a9b      	subs	r3, r3, r2
90004360:	009b      	lsls	r3, r3, #2
90004362:	440b      	add	r3, r1
90004364:	3344      	adds	r3, #68	@ 0x44
90004366:	681b      	ldr	r3, [r3, #0]
90004368:	1c59      	adds	r1, r3, #1
9000436a:	6878      	ldr	r0, [r7, #4]
9000436c:	4613      	mov	r3, r2
9000436e:	011b      	lsls	r3, r3, #4
90004370:	1a9b      	subs	r3, r3, r2
90004372:	009b      	lsls	r3, r3, #2
90004374:	4403      	add	r3, r0
90004376:	3344      	adds	r3, #68	@ 0x44
90004378:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000437a:	78fa      	ldrb	r2, [r7, #3]
9000437c:	6879      	ldr	r1, [r7, #4]
9000437e:	4613      	mov	r3, r2
90004380:	011b      	lsls	r3, r3, #4
90004382:	1a9b      	subs	r3, r3, r2
90004384:	009b      	lsls	r3, r3, #2
90004386:	440b      	add	r3, r1
90004388:	3344      	adds	r3, #68	@ 0x44
9000438a:	681b      	ldr	r3, [r3, #0]
9000438c:	2b02      	cmp	r3, #2
9000438e:	d943      	bls.n	90004418 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004390:	78fa      	ldrb	r2, [r7, #3]
90004392:	6879      	ldr	r1, [r7, #4]
90004394:	4613      	mov	r3, r2
90004396:	011b      	lsls	r3, r3, #4
90004398:	1a9b      	subs	r3, r3, r2
9000439a:	009b      	lsls	r3, r3, #2
9000439c:	440b      	add	r3, r1
9000439e:	3344      	adds	r3, #68	@ 0x44
900043a0:	2200      	movs	r2, #0
900043a2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
900043a4:	78fa      	ldrb	r2, [r7, #3]
900043a6:	6879      	ldr	r1, [r7, #4]
900043a8:	4613      	mov	r3, r2
900043aa:	011b      	lsls	r3, r3, #4
900043ac:	1a9b      	subs	r3, r3, r2
900043ae:	009b      	lsls	r3, r3, #2
900043b0:	440b      	add	r3, r1
900043b2:	331a      	adds	r3, #26
900043b4:	781b      	ldrb	r3, [r3, #0]
900043b6:	2b01      	cmp	r3, #1
900043b8:	d123      	bne.n	90004402 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
900043ba:	78fa      	ldrb	r2, [r7, #3]
900043bc:	6879      	ldr	r1, [r7, #4]
900043be:	4613      	mov	r3, r2
900043c0:	011b      	lsls	r3, r3, #4
900043c2:	1a9b      	subs	r3, r3, r2
900043c4:	009b      	lsls	r3, r3, #2
900043c6:	440b      	add	r3, r1
900043c8:	331b      	adds	r3, #27
900043ca:	2200      	movs	r2, #0
900043cc:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
900043ce:	78fa      	ldrb	r2, [r7, #3]
900043d0:	6879      	ldr	r1, [r7, #4]
900043d2:	4613      	mov	r3, r2
900043d4:	011b      	lsls	r3, r3, #4
900043d6:	1a9b      	subs	r3, r3, r2
900043d8:	009b      	lsls	r3, r3, #2
900043da:	440b      	add	r3, r1
900043dc:	331c      	adds	r3, #28
900043de:	2200      	movs	r2, #0
900043e0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900043e2:	78fb      	ldrb	r3, [r7, #3]
900043e4:	015a      	lsls	r2, r3, #5
900043e6:	693b      	ldr	r3, [r7, #16]
900043e8:	4413      	add	r3, r2
900043ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043ee:	685b      	ldr	r3, [r3, #4]
900043f0:	78fa      	ldrb	r2, [r7, #3]
900043f2:	0151      	lsls	r1, r2, #5
900043f4:	693a      	ldr	r2, [r7, #16]
900043f6:	440a      	add	r2, r1
900043f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900043fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004400:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90004402:	78fa      	ldrb	r2, [r7, #3]
90004404:	6879      	ldr	r1, [r7, #4]
90004406:	4613      	mov	r3, r2
90004408:	011b      	lsls	r3, r3, #4
9000440a:	1a9b      	subs	r3, r3, r2
9000440c:	009b      	lsls	r3, r3, #2
9000440e:	440b      	add	r3, r1
90004410:	334c      	adds	r3, #76	@ 0x4c
90004412:	2204      	movs	r2, #4
90004414:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004416:	e229      	b.n	9000486c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004418:	78fa      	ldrb	r2, [r7, #3]
9000441a:	6879      	ldr	r1, [r7, #4]
9000441c:	4613      	mov	r3, r2
9000441e:	011b      	lsls	r3, r3, #4
90004420:	1a9b      	subs	r3, r3, r2
90004422:	009b      	lsls	r3, r3, #2
90004424:	440b      	add	r3, r1
90004426:	334c      	adds	r3, #76	@ 0x4c
90004428:	2202      	movs	r2, #2
9000442a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000442c:	78fa      	ldrb	r2, [r7, #3]
9000442e:	6879      	ldr	r1, [r7, #4]
90004430:	4613      	mov	r3, r2
90004432:	011b      	lsls	r3, r3, #4
90004434:	1a9b      	subs	r3, r3, r2
90004436:	009b      	lsls	r3, r3, #2
90004438:	440b      	add	r3, r1
9000443a:	3326      	adds	r3, #38	@ 0x26
9000443c:	781b      	ldrb	r3, [r3, #0]
9000443e:	2b00      	cmp	r3, #0
90004440:	d00b      	beq.n	9000445a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004442:	78fa      	ldrb	r2, [r7, #3]
90004444:	6879      	ldr	r1, [r7, #4]
90004446:	4613      	mov	r3, r2
90004448:	011b      	lsls	r3, r3, #4
9000444a:	1a9b      	subs	r3, r3, r2
9000444c:	009b      	lsls	r3, r3, #2
9000444e:	440b      	add	r3, r1
90004450:	3326      	adds	r3, #38	@ 0x26
90004452:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004454:	2b02      	cmp	r3, #2
90004456:	f040 8209 	bne.w	9000486c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
9000445a:	78fb      	ldrb	r3, [r7, #3]
9000445c:	015a      	lsls	r2, r3, #5
9000445e:	693b      	ldr	r3, [r7, #16]
90004460:	4413      	add	r3, r2
90004462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004466:	681b      	ldr	r3, [r3, #0]
90004468:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000446a:	68fb      	ldr	r3, [r7, #12]
9000446c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004470:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004472:	68fb      	ldr	r3, [r7, #12]
90004474:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004478:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000447a:	78fb      	ldrb	r3, [r7, #3]
9000447c:	015a      	lsls	r2, r3, #5
9000447e:	693b      	ldr	r3, [r7, #16]
90004480:	4413      	add	r3, r2
90004482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004486:	461a      	mov	r2, r3
90004488:	68fb      	ldr	r3, [r7, #12]
9000448a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000448c:	e1ee      	b.n	9000486c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000448e:	78fa      	ldrb	r2, [r7, #3]
90004490:	6879      	ldr	r1, [r7, #4]
90004492:	4613      	mov	r3, r2
90004494:	011b      	lsls	r3, r3, #4
90004496:	1a9b      	subs	r3, r3, r2
90004498:	009b      	lsls	r3, r3, #2
9000449a:	440b      	add	r3, r1
9000449c:	334d      	adds	r3, #77	@ 0x4d
9000449e:	781b      	ldrb	r3, [r3, #0]
900044a0:	2b05      	cmp	r3, #5
900044a2:	f040 80c8 	bne.w	90004636 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900044a6:	78fa      	ldrb	r2, [r7, #3]
900044a8:	6879      	ldr	r1, [r7, #4]
900044aa:	4613      	mov	r3, r2
900044ac:	011b      	lsls	r3, r3, #4
900044ae:	1a9b      	subs	r3, r3, r2
900044b0:	009b      	lsls	r3, r3, #2
900044b2:	440b      	add	r3, r1
900044b4:	334d      	adds	r3, #77	@ 0x4d
900044b6:	2202      	movs	r2, #2
900044b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900044ba:	78fa      	ldrb	r2, [r7, #3]
900044bc:	6879      	ldr	r1, [r7, #4]
900044be:	4613      	mov	r3, r2
900044c0:	011b      	lsls	r3, r3, #4
900044c2:	1a9b      	subs	r3, r3, r2
900044c4:	009b      	lsls	r3, r3, #2
900044c6:	440b      	add	r3, r1
900044c8:	331b      	adds	r3, #27
900044ca:	781b      	ldrb	r3, [r3, #0]
900044cc:	2b01      	cmp	r3, #1
900044ce:	f040 81ce 	bne.w	9000486e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
900044d2:	78fa      	ldrb	r2, [r7, #3]
900044d4:	6879      	ldr	r1, [r7, #4]
900044d6:	4613      	mov	r3, r2
900044d8:	011b      	lsls	r3, r3, #4
900044da:	1a9b      	subs	r3, r3, r2
900044dc:	009b      	lsls	r3, r3, #2
900044de:	440b      	add	r3, r1
900044e0:	3326      	adds	r3, #38	@ 0x26
900044e2:	781b      	ldrb	r3, [r3, #0]
900044e4:	2b03      	cmp	r3, #3
900044e6:	d16b      	bne.n	900045c0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
900044e8:	78fa      	ldrb	r2, [r7, #3]
900044ea:	6879      	ldr	r1, [r7, #4]
900044ec:	4613      	mov	r3, r2
900044ee:	011b      	lsls	r3, r3, #4
900044f0:	1a9b      	subs	r3, r3, r2
900044f2:	009b      	lsls	r3, r3, #2
900044f4:	440b      	add	r3, r1
900044f6:	3348      	adds	r3, #72	@ 0x48
900044f8:	681b      	ldr	r3, [r3, #0]
900044fa:	1c59      	adds	r1, r3, #1
900044fc:	6878      	ldr	r0, [r7, #4]
900044fe:	4613      	mov	r3, r2
90004500:	011b      	lsls	r3, r3, #4
90004502:	1a9b      	subs	r3, r3, r2
90004504:	009b      	lsls	r3, r3, #2
90004506:	4403      	add	r3, r0
90004508:	3348      	adds	r3, #72	@ 0x48
9000450a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
9000450c:	78fa      	ldrb	r2, [r7, #3]
9000450e:	6879      	ldr	r1, [r7, #4]
90004510:	4613      	mov	r3, r2
90004512:	011b      	lsls	r3, r3, #4
90004514:	1a9b      	subs	r3, r3, r2
90004516:	009b      	lsls	r3, r3, #2
90004518:	440b      	add	r3, r1
9000451a:	3348      	adds	r3, #72	@ 0x48
9000451c:	681b      	ldr	r3, [r3, #0]
9000451e:	2b02      	cmp	r3, #2
90004520:	d943      	bls.n	900045aa <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90004522:	78fa      	ldrb	r2, [r7, #3]
90004524:	6879      	ldr	r1, [r7, #4]
90004526:	4613      	mov	r3, r2
90004528:	011b      	lsls	r3, r3, #4
9000452a:	1a9b      	subs	r3, r3, r2
9000452c:	009b      	lsls	r3, r3, #2
9000452e:	440b      	add	r3, r1
90004530:	3348      	adds	r3, #72	@ 0x48
90004532:	2200      	movs	r2, #0
90004534:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
90004536:	78fa      	ldrb	r2, [r7, #3]
90004538:	6879      	ldr	r1, [r7, #4]
9000453a:	4613      	mov	r3, r2
9000453c:	011b      	lsls	r3, r3, #4
9000453e:	1a9b      	subs	r3, r3, r2
90004540:	009b      	lsls	r3, r3, #2
90004542:	440b      	add	r3, r1
90004544:	331b      	adds	r3, #27
90004546:	2200      	movs	r2, #0
90004548:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
9000454a:	78fa      	ldrb	r2, [r7, #3]
9000454c:	6879      	ldr	r1, [r7, #4]
9000454e:	4613      	mov	r3, r2
90004550:	011b      	lsls	r3, r3, #4
90004552:	1a9b      	subs	r3, r3, r2
90004554:	009b      	lsls	r3, r3, #2
90004556:	440b      	add	r3, r1
90004558:	3344      	adds	r3, #68	@ 0x44
9000455a:	681b      	ldr	r3, [r3, #0]
9000455c:	2b02      	cmp	r3, #2
9000455e:	d809      	bhi.n	90004574 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004560:	78fa      	ldrb	r2, [r7, #3]
90004562:	6879      	ldr	r1, [r7, #4]
90004564:	4613      	mov	r3, r2
90004566:	011b      	lsls	r3, r3, #4
90004568:	1a9b      	subs	r3, r3, r2
9000456a:	009b      	lsls	r3, r3, #2
9000456c:	440b      	add	r3, r1
9000456e:	331c      	adds	r3, #28
90004570:	2201      	movs	r2, #1
90004572:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004574:	78fb      	ldrb	r3, [r7, #3]
90004576:	015a      	lsls	r2, r3, #5
90004578:	693b      	ldr	r3, [r7, #16]
9000457a:	4413      	add	r3, r2
9000457c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004580:	685b      	ldr	r3, [r3, #4]
90004582:	78fa      	ldrb	r2, [r7, #3]
90004584:	0151      	lsls	r1, r2, #5
90004586:	693a      	ldr	r2, [r7, #16]
90004588:	440a      	add	r2, r1
9000458a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000458e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004592:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004594:	78fa      	ldrb	r2, [r7, #3]
90004596:	6879      	ldr	r1, [r7, #4]
90004598:	4613      	mov	r3, r2
9000459a:	011b      	lsls	r3, r3, #4
9000459c:	1a9b      	subs	r3, r3, r2
9000459e:	009b      	lsls	r3, r3, #2
900045a0:	440b      	add	r3, r1
900045a2:	334c      	adds	r3, #76	@ 0x4c
900045a4:	2204      	movs	r2, #4
900045a6:	701a      	strb	r2, [r3, #0]
900045a8:	e014      	b.n	900045d4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
900045aa:	78fa      	ldrb	r2, [r7, #3]
900045ac:	6879      	ldr	r1, [r7, #4]
900045ae:	4613      	mov	r3, r2
900045b0:	011b      	lsls	r3, r3, #4
900045b2:	1a9b      	subs	r3, r3, r2
900045b4:	009b      	lsls	r3, r3, #2
900045b6:	440b      	add	r3, r1
900045b8:	334c      	adds	r3, #76	@ 0x4c
900045ba:	2202      	movs	r2, #2
900045bc:	701a      	strb	r2, [r3, #0]
900045be:	e009      	b.n	900045d4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
900045c0:	78fa      	ldrb	r2, [r7, #3]
900045c2:	6879      	ldr	r1, [r7, #4]
900045c4:	4613      	mov	r3, r2
900045c6:	011b      	lsls	r3, r3, #4
900045c8:	1a9b      	subs	r3, r3, r2
900045ca:	009b      	lsls	r3, r3, #2
900045cc:	440b      	add	r3, r1
900045ce:	334c      	adds	r3, #76	@ 0x4c
900045d0:	2202      	movs	r2, #2
900045d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900045d4:	78fa      	ldrb	r2, [r7, #3]
900045d6:	6879      	ldr	r1, [r7, #4]
900045d8:	4613      	mov	r3, r2
900045da:	011b      	lsls	r3, r3, #4
900045dc:	1a9b      	subs	r3, r3, r2
900045de:	009b      	lsls	r3, r3, #2
900045e0:	440b      	add	r3, r1
900045e2:	3326      	adds	r3, #38	@ 0x26
900045e4:	781b      	ldrb	r3, [r3, #0]
900045e6:	2b00      	cmp	r3, #0
900045e8:	d00b      	beq.n	90004602 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900045ea:	78fa      	ldrb	r2, [r7, #3]
900045ec:	6879      	ldr	r1, [r7, #4]
900045ee:	4613      	mov	r3, r2
900045f0:	011b      	lsls	r3, r3, #4
900045f2:	1a9b      	subs	r3, r3, r2
900045f4:	009b      	lsls	r3, r3, #2
900045f6:	440b      	add	r3, r1
900045f8:	3326      	adds	r3, #38	@ 0x26
900045fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900045fc:	2b02      	cmp	r3, #2
900045fe:	f040 8136 	bne.w	9000486e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004602:	78fb      	ldrb	r3, [r7, #3]
90004604:	015a      	lsls	r2, r3, #5
90004606:	693b      	ldr	r3, [r7, #16]
90004608:	4413      	add	r3, r2
9000460a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000460e:	681b      	ldr	r3, [r3, #0]
90004610:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004612:	68fb      	ldr	r3, [r7, #12]
90004614:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004618:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
9000461a:	68fb      	ldr	r3, [r7, #12]
9000461c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004620:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004622:	78fb      	ldrb	r3, [r7, #3]
90004624:	015a      	lsls	r2, r3, #5
90004626:	693b      	ldr	r3, [r7, #16]
90004628:	4413      	add	r3, r2
9000462a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000462e:	461a      	mov	r2, r3
90004630:	68fb      	ldr	r3, [r7, #12]
90004632:	6013      	str	r3, [r2, #0]
90004634:	e11b      	b.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004636:	78fa      	ldrb	r2, [r7, #3]
90004638:	6879      	ldr	r1, [r7, #4]
9000463a:	4613      	mov	r3, r2
9000463c:	011b      	lsls	r3, r3, #4
9000463e:	1a9b      	subs	r3, r3, r2
90004640:	009b      	lsls	r3, r3, #2
90004642:	440b      	add	r3, r1
90004644:	334d      	adds	r3, #77	@ 0x4d
90004646:	781b      	ldrb	r3, [r3, #0]
90004648:	2b03      	cmp	r3, #3
9000464a:	f040 8081 	bne.w	90004750 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000464e:	78fa      	ldrb	r2, [r7, #3]
90004650:	6879      	ldr	r1, [r7, #4]
90004652:	4613      	mov	r3, r2
90004654:	011b      	lsls	r3, r3, #4
90004656:	1a9b      	subs	r3, r3, r2
90004658:	009b      	lsls	r3, r3, #2
9000465a:	440b      	add	r3, r1
9000465c:	334d      	adds	r3, #77	@ 0x4d
9000465e:	2202      	movs	r2, #2
90004660:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004662:	78fa      	ldrb	r2, [r7, #3]
90004664:	6879      	ldr	r1, [r7, #4]
90004666:	4613      	mov	r3, r2
90004668:	011b      	lsls	r3, r3, #4
9000466a:	1a9b      	subs	r3, r3, r2
9000466c:	009b      	lsls	r3, r3, #2
9000466e:	440b      	add	r3, r1
90004670:	331b      	adds	r3, #27
90004672:	781b      	ldrb	r3, [r3, #0]
90004674:	2b01      	cmp	r3, #1
90004676:	f040 80fa 	bne.w	9000486e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000467a:	78fa      	ldrb	r2, [r7, #3]
9000467c:	6879      	ldr	r1, [r7, #4]
9000467e:	4613      	mov	r3, r2
90004680:	011b      	lsls	r3, r3, #4
90004682:	1a9b      	subs	r3, r3, r2
90004684:	009b      	lsls	r3, r3, #2
90004686:	440b      	add	r3, r1
90004688:	334c      	adds	r3, #76	@ 0x4c
9000468a:	2202      	movs	r2, #2
9000468c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
9000468e:	78fb      	ldrb	r3, [r7, #3]
90004690:	015a      	lsls	r2, r3, #5
90004692:	693b      	ldr	r3, [r7, #16]
90004694:	4413      	add	r3, r2
90004696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000469a:	685b      	ldr	r3, [r3, #4]
9000469c:	78fa      	ldrb	r2, [r7, #3]
9000469e:	0151      	lsls	r1, r2, #5
900046a0:	693a      	ldr	r2, [r7, #16]
900046a2:	440a      	add	r2, r1
900046a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900046a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900046ac:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
900046ae:	78fb      	ldrb	r3, [r7, #3]
900046b0:	015a      	lsls	r2, r3, #5
900046b2:	693b      	ldr	r3, [r7, #16]
900046b4:	4413      	add	r3, r2
900046b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046ba:	68db      	ldr	r3, [r3, #12]
900046bc:	78fa      	ldrb	r2, [r7, #3]
900046be:	0151      	lsls	r1, r2, #5
900046c0:	693a      	ldr	r2, [r7, #16]
900046c2:	440a      	add	r2, r1
900046c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900046c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
900046cc:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
900046ce:	78fb      	ldrb	r3, [r7, #3]
900046d0:	015a      	lsls	r2, r3, #5
900046d2:	693b      	ldr	r3, [r7, #16]
900046d4:	4413      	add	r3, r2
900046d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046da:	68db      	ldr	r3, [r3, #12]
900046dc:	78fa      	ldrb	r2, [r7, #3]
900046de:	0151      	lsls	r1, r2, #5
900046e0:	693a      	ldr	r2, [r7, #16]
900046e2:	440a      	add	r2, r1
900046e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900046e8:	f023 0320 	bic.w	r3, r3, #32
900046ec:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900046ee:	78fa      	ldrb	r2, [r7, #3]
900046f0:	6879      	ldr	r1, [r7, #4]
900046f2:	4613      	mov	r3, r2
900046f4:	011b      	lsls	r3, r3, #4
900046f6:	1a9b      	subs	r3, r3, r2
900046f8:	009b      	lsls	r3, r3, #2
900046fa:	440b      	add	r3, r1
900046fc:	3326      	adds	r3, #38	@ 0x26
900046fe:	781b      	ldrb	r3, [r3, #0]
90004700:	2b00      	cmp	r3, #0
90004702:	d00b      	beq.n	9000471c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004704:	78fa      	ldrb	r2, [r7, #3]
90004706:	6879      	ldr	r1, [r7, #4]
90004708:	4613      	mov	r3, r2
9000470a:	011b      	lsls	r3, r3, #4
9000470c:	1a9b      	subs	r3, r3, r2
9000470e:	009b      	lsls	r3, r3, #2
90004710:	440b      	add	r3, r1
90004712:	3326      	adds	r3, #38	@ 0x26
90004714:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004716:	2b02      	cmp	r3, #2
90004718:	f040 80a9 	bne.w	9000486e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
9000471c:	78fb      	ldrb	r3, [r7, #3]
9000471e:	015a      	lsls	r2, r3, #5
90004720:	693b      	ldr	r3, [r7, #16]
90004722:	4413      	add	r3, r2
90004724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004728:	681b      	ldr	r3, [r3, #0]
9000472a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000472c:	68fb      	ldr	r3, [r7, #12]
9000472e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004732:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004734:	68fb      	ldr	r3, [r7, #12]
90004736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000473a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000473c:	78fb      	ldrb	r3, [r7, #3]
9000473e:	015a      	lsls	r2, r3, #5
90004740:	693b      	ldr	r3, [r7, #16]
90004742:	4413      	add	r3, r2
90004744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004748:	461a      	mov	r2, r3
9000474a:	68fb      	ldr	r3, [r7, #12]
9000474c:	6013      	str	r3, [r2, #0]
9000474e:	e08e      	b.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004750:	78fa      	ldrb	r2, [r7, #3]
90004752:	6879      	ldr	r1, [r7, #4]
90004754:	4613      	mov	r3, r2
90004756:	011b      	lsls	r3, r3, #4
90004758:	1a9b      	subs	r3, r3, r2
9000475a:	009b      	lsls	r3, r3, #2
9000475c:	440b      	add	r3, r1
9000475e:	334d      	adds	r3, #77	@ 0x4d
90004760:	781b      	ldrb	r3, [r3, #0]
90004762:	2b04      	cmp	r3, #4
90004764:	d143      	bne.n	900047ee <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004766:	78fa      	ldrb	r2, [r7, #3]
90004768:	6879      	ldr	r1, [r7, #4]
9000476a:	4613      	mov	r3, r2
9000476c:	011b      	lsls	r3, r3, #4
9000476e:	1a9b      	subs	r3, r3, r2
90004770:	009b      	lsls	r3, r3, #2
90004772:	440b      	add	r3, r1
90004774:	334d      	adds	r3, #77	@ 0x4d
90004776:	2202      	movs	r2, #2
90004778:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000477a:	78fa      	ldrb	r2, [r7, #3]
9000477c:	6879      	ldr	r1, [r7, #4]
9000477e:	4613      	mov	r3, r2
90004780:	011b      	lsls	r3, r3, #4
90004782:	1a9b      	subs	r3, r3, r2
90004784:	009b      	lsls	r3, r3, #2
90004786:	440b      	add	r3, r1
90004788:	334c      	adds	r3, #76	@ 0x4c
9000478a:	2202      	movs	r2, #2
9000478c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000478e:	78fa      	ldrb	r2, [r7, #3]
90004790:	6879      	ldr	r1, [r7, #4]
90004792:	4613      	mov	r3, r2
90004794:	011b      	lsls	r3, r3, #4
90004796:	1a9b      	subs	r3, r3, r2
90004798:	009b      	lsls	r3, r3, #2
9000479a:	440b      	add	r3, r1
9000479c:	3326      	adds	r3, #38	@ 0x26
9000479e:	781b      	ldrb	r3, [r3, #0]
900047a0:	2b00      	cmp	r3, #0
900047a2:	d00a      	beq.n	900047ba <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900047a4:	78fa      	ldrb	r2, [r7, #3]
900047a6:	6879      	ldr	r1, [r7, #4]
900047a8:	4613      	mov	r3, r2
900047aa:	011b      	lsls	r3, r3, #4
900047ac:	1a9b      	subs	r3, r3, r2
900047ae:	009b      	lsls	r3, r3, #2
900047b0:	440b      	add	r3, r1
900047b2:	3326      	adds	r3, #38	@ 0x26
900047b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900047b6:	2b02      	cmp	r3, #2
900047b8:	d159      	bne.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
900047ba:	78fb      	ldrb	r3, [r7, #3]
900047bc:	015a      	lsls	r2, r3, #5
900047be:	693b      	ldr	r3, [r7, #16]
900047c0:	4413      	add	r3, r2
900047c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047c6:	681b      	ldr	r3, [r3, #0]
900047c8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900047ca:	68fb      	ldr	r3, [r7, #12]
900047cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900047d0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900047d2:	68fb      	ldr	r3, [r7, #12]
900047d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900047d8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900047da:	78fb      	ldrb	r3, [r7, #3]
900047dc:	015a      	lsls	r2, r3, #5
900047de:	693b      	ldr	r3, [r7, #16]
900047e0:	4413      	add	r3, r2
900047e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047e6:	461a      	mov	r2, r3
900047e8:	68fb      	ldr	r3, [r7, #12]
900047ea:	6013      	str	r3, [r2, #0]
900047ec:	e03f      	b.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
900047ee:	78fa      	ldrb	r2, [r7, #3]
900047f0:	6879      	ldr	r1, [r7, #4]
900047f2:	4613      	mov	r3, r2
900047f4:	011b      	lsls	r3, r3, #4
900047f6:	1a9b      	subs	r3, r3, r2
900047f8:	009b      	lsls	r3, r3, #2
900047fa:	440b      	add	r3, r1
900047fc:	334d      	adds	r3, #77	@ 0x4d
900047fe:	781b      	ldrb	r3, [r3, #0]
90004800:	2b08      	cmp	r3, #8
90004802:	d126      	bne.n	90004852 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004804:	78fa      	ldrb	r2, [r7, #3]
90004806:	6879      	ldr	r1, [r7, #4]
90004808:	4613      	mov	r3, r2
9000480a:	011b      	lsls	r3, r3, #4
9000480c:	1a9b      	subs	r3, r3, r2
9000480e:	009b      	lsls	r3, r3, #2
90004810:	440b      	add	r3, r1
90004812:	334d      	adds	r3, #77	@ 0x4d
90004814:	2202      	movs	r2, #2
90004816:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004818:	78fa      	ldrb	r2, [r7, #3]
9000481a:	6879      	ldr	r1, [r7, #4]
9000481c:	4613      	mov	r3, r2
9000481e:	011b      	lsls	r3, r3, #4
90004820:	1a9b      	subs	r3, r3, r2
90004822:	009b      	lsls	r3, r3, #2
90004824:	440b      	add	r3, r1
90004826:	3344      	adds	r3, #68	@ 0x44
90004828:	681b      	ldr	r3, [r3, #0]
9000482a:	1c59      	adds	r1, r3, #1
9000482c:	6878      	ldr	r0, [r7, #4]
9000482e:	4613      	mov	r3, r2
90004830:	011b      	lsls	r3, r3, #4
90004832:	1a9b      	subs	r3, r3, r2
90004834:	009b      	lsls	r3, r3, #2
90004836:	4403      	add	r3, r0
90004838:	3344      	adds	r3, #68	@ 0x44
9000483a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
9000483c:	78fa      	ldrb	r2, [r7, #3]
9000483e:	6879      	ldr	r1, [r7, #4]
90004840:	4613      	mov	r3, r2
90004842:	011b      	lsls	r3, r3, #4
90004844:	1a9b      	subs	r3, r3, r2
90004846:	009b      	lsls	r3, r3, #2
90004848:	440b      	add	r3, r1
9000484a:	334c      	adds	r3, #76	@ 0x4c
9000484c:	2204      	movs	r2, #4
9000484e:	701a      	strb	r2, [r3, #0]
90004850:	e00d      	b.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004852:	78fa      	ldrb	r2, [r7, #3]
90004854:	6879      	ldr	r1, [r7, #4]
90004856:	4613      	mov	r3, r2
90004858:	011b      	lsls	r3, r3, #4
9000485a:	1a9b      	subs	r3, r3, r2
9000485c:	009b      	lsls	r3, r3, #2
9000485e:	440b      	add	r3, r1
90004860:	334d      	adds	r3, #77	@ 0x4d
90004862:	781b      	ldrb	r3, [r3, #0]
90004864:	2b02      	cmp	r3, #2
90004866:	f000 8100 	beq.w	90004a6a <HCD_HC_IN_IRQHandler+0xcca>
9000486a:	e000      	b.n	9000486e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000486c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000486e:	78fa      	ldrb	r2, [r7, #3]
90004870:	6879      	ldr	r1, [r7, #4]
90004872:	4613      	mov	r3, r2
90004874:	011b      	lsls	r3, r3, #4
90004876:	1a9b      	subs	r3, r3, r2
90004878:	009b      	lsls	r3, r3, #2
9000487a:	440b      	add	r3, r1
9000487c:	334c      	adds	r3, #76	@ 0x4c
9000487e:	781a      	ldrb	r2, [r3, #0]
90004880:	78fb      	ldrb	r3, [r7, #3]
90004882:	4619      	mov	r1, r3
90004884:	6878      	ldr	r0, [r7, #4]
90004886:	f7fc fb29 	bl	90000edc <HAL_HCD_HC_NotifyURBChange_Callback>
9000488a:	e0ef      	b.n	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
9000488c:	687b      	ldr	r3, [r7, #4]
9000488e:	681b      	ldr	r3, [r3, #0]
90004890:	78fa      	ldrb	r2, [r7, #3]
90004892:	4611      	mov	r1, r2
90004894:	4618      	mov	r0, r3
90004896:	f006 fae8 	bl	9000ae6a <USB_ReadChInterrupts>
9000489a:	4603      	mov	r3, r0
9000489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900048a0:	2b40      	cmp	r3, #64	@ 0x40
900048a2:	d12f      	bne.n	90004904 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
900048a4:	78fb      	ldrb	r3, [r7, #3]
900048a6:	015a      	lsls	r2, r3, #5
900048a8:	693b      	ldr	r3, [r7, #16]
900048aa:	4413      	add	r3, r2
900048ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048b0:	461a      	mov	r2, r3
900048b2:	2340      	movs	r3, #64	@ 0x40
900048b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
900048b6:	78fa      	ldrb	r2, [r7, #3]
900048b8:	6879      	ldr	r1, [r7, #4]
900048ba:	4613      	mov	r3, r2
900048bc:	011b      	lsls	r3, r3, #4
900048be:	1a9b      	subs	r3, r3, r2
900048c0:	009b      	lsls	r3, r3, #2
900048c2:	440b      	add	r3, r1
900048c4:	334d      	adds	r3, #77	@ 0x4d
900048c6:	2205      	movs	r2, #5
900048c8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900048ca:	78fa      	ldrb	r2, [r7, #3]
900048cc:	6879      	ldr	r1, [r7, #4]
900048ce:	4613      	mov	r3, r2
900048d0:	011b      	lsls	r3, r3, #4
900048d2:	1a9b      	subs	r3, r3, r2
900048d4:	009b      	lsls	r3, r3, #2
900048d6:	440b      	add	r3, r1
900048d8:	331a      	adds	r3, #26
900048da:	781b      	ldrb	r3, [r3, #0]
900048dc:	2b00      	cmp	r3, #0
900048de:	d109      	bne.n	900048f4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
900048e0:	78fa      	ldrb	r2, [r7, #3]
900048e2:	6879      	ldr	r1, [r7, #4]
900048e4:	4613      	mov	r3, r2
900048e6:	011b      	lsls	r3, r3, #4
900048e8:	1a9b      	subs	r3, r3, r2
900048ea:	009b      	lsls	r3, r3, #2
900048ec:	440b      	add	r3, r1
900048ee:	3344      	adds	r3, #68	@ 0x44
900048f0:	2200      	movs	r2, #0
900048f2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
900048f4:	687b      	ldr	r3, [r7, #4]
900048f6:	681b      	ldr	r3, [r3, #0]
900048f8:	78fa      	ldrb	r2, [r7, #3]
900048fa:	4611      	mov	r1, r2
900048fc:	4618      	mov	r0, r3
900048fe:	f006 fb31 	bl	9000af64 <USB_HC_Halt>
90004902:	e0b3      	b.n	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004904:	687b      	ldr	r3, [r7, #4]
90004906:	681b      	ldr	r3, [r3, #0]
90004908:	78fa      	ldrb	r2, [r7, #3]
9000490a:	4611      	mov	r1, r2
9000490c:	4618      	mov	r0, r3
9000490e:	f006 faac 	bl	9000ae6a <USB_ReadChInterrupts>
90004912:	4603      	mov	r3, r0
90004914:	f003 0310 	and.w	r3, r3, #16
90004918:	2b10      	cmp	r3, #16
9000491a:	f040 80a7 	bne.w	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
9000491e:	78fa      	ldrb	r2, [r7, #3]
90004920:	6879      	ldr	r1, [r7, #4]
90004922:	4613      	mov	r3, r2
90004924:	011b      	lsls	r3, r3, #4
90004926:	1a9b      	subs	r3, r3, r2
90004928:	009b      	lsls	r3, r3, #2
9000492a:	440b      	add	r3, r1
9000492c:	3326      	adds	r3, #38	@ 0x26
9000492e:	781b      	ldrb	r3, [r3, #0]
90004930:	2b03      	cmp	r3, #3
90004932:	d11b      	bne.n	9000496c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004934:	78fa      	ldrb	r2, [r7, #3]
90004936:	6879      	ldr	r1, [r7, #4]
90004938:	4613      	mov	r3, r2
9000493a:	011b      	lsls	r3, r3, #4
9000493c:	1a9b      	subs	r3, r3, r2
9000493e:	009b      	lsls	r3, r3, #2
90004940:	440b      	add	r3, r1
90004942:	3344      	adds	r3, #68	@ 0x44
90004944:	2200      	movs	r2, #0
90004946:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004948:	78fa      	ldrb	r2, [r7, #3]
9000494a:	6879      	ldr	r1, [r7, #4]
9000494c:	4613      	mov	r3, r2
9000494e:	011b      	lsls	r3, r3, #4
90004950:	1a9b      	subs	r3, r3, r2
90004952:	009b      	lsls	r3, r3, #2
90004954:	440b      	add	r3, r1
90004956:	334d      	adds	r3, #77	@ 0x4d
90004958:	2204      	movs	r2, #4
9000495a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000495c:	687b      	ldr	r3, [r7, #4]
9000495e:	681b      	ldr	r3, [r3, #0]
90004960:	78fa      	ldrb	r2, [r7, #3]
90004962:	4611      	mov	r1, r2
90004964:	4618      	mov	r0, r3
90004966:	f006 fafd 	bl	9000af64 <USB_HC_Halt>
9000496a:	e03f      	b.n	900049ec <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000496c:	78fa      	ldrb	r2, [r7, #3]
9000496e:	6879      	ldr	r1, [r7, #4]
90004970:	4613      	mov	r3, r2
90004972:	011b      	lsls	r3, r3, #4
90004974:	1a9b      	subs	r3, r3, r2
90004976:	009b      	lsls	r3, r3, #2
90004978:	440b      	add	r3, r1
9000497a:	3326      	adds	r3, #38	@ 0x26
9000497c:	781b      	ldrb	r3, [r3, #0]
9000497e:	2b00      	cmp	r3, #0
90004980:	d00a      	beq.n	90004998 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004982:	78fa      	ldrb	r2, [r7, #3]
90004984:	6879      	ldr	r1, [r7, #4]
90004986:	4613      	mov	r3, r2
90004988:	011b      	lsls	r3, r3, #4
9000498a:	1a9b      	subs	r3, r3, r2
9000498c:	009b      	lsls	r3, r3, #2
9000498e:	440b      	add	r3, r1
90004990:	3326      	adds	r3, #38	@ 0x26
90004992:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004994:	2b02      	cmp	r3, #2
90004996:	d129      	bne.n	900049ec <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004998:	78fa      	ldrb	r2, [r7, #3]
9000499a:	6879      	ldr	r1, [r7, #4]
9000499c:	4613      	mov	r3, r2
9000499e:	011b      	lsls	r3, r3, #4
900049a0:	1a9b      	subs	r3, r3, r2
900049a2:	009b      	lsls	r3, r3, #2
900049a4:	440b      	add	r3, r1
900049a6:	3344      	adds	r3, #68	@ 0x44
900049a8:	2200      	movs	r2, #0
900049aa:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
900049ac:	687b      	ldr	r3, [r7, #4]
900049ae:	799b      	ldrb	r3, [r3, #6]
900049b0:	2b00      	cmp	r3, #0
900049b2:	d00a      	beq.n	900049ca <HCD_HC_IN_IRQHandler+0xc2a>
900049b4:	78fa      	ldrb	r2, [r7, #3]
900049b6:	6879      	ldr	r1, [r7, #4]
900049b8:	4613      	mov	r3, r2
900049ba:	011b      	lsls	r3, r3, #4
900049bc:	1a9b      	subs	r3, r3, r2
900049be:	009b      	lsls	r3, r3, #2
900049c0:	440b      	add	r3, r1
900049c2:	331b      	adds	r3, #27
900049c4:	781b      	ldrb	r3, [r3, #0]
900049c6:	2b01      	cmp	r3, #1
900049c8:	d110      	bne.n	900049ec <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
900049ca:	78fa      	ldrb	r2, [r7, #3]
900049cc:	6879      	ldr	r1, [r7, #4]
900049ce:	4613      	mov	r3, r2
900049d0:	011b      	lsls	r3, r3, #4
900049d2:	1a9b      	subs	r3, r3, r2
900049d4:	009b      	lsls	r3, r3, #2
900049d6:	440b      	add	r3, r1
900049d8:	334d      	adds	r3, #77	@ 0x4d
900049da:	2204      	movs	r2, #4
900049dc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
900049de:	687b      	ldr	r3, [r7, #4]
900049e0:	681b      	ldr	r3, [r3, #0]
900049e2:	78fa      	ldrb	r2, [r7, #3]
900049e4:	4611      	mov	r1, r2
900049e6:	4618      	mov	r0, r3
900049e8:	f006 fabc 	bl	9000af64 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
900049ec:	78fa      	ldrb	r2, [r7, #3]
900049ee:	6879      	ldr	r1, [r7, #4]
900049f0:	4613      	mov	r3, r2
900049f2:	011b      	lsls	r3, r3, #4
900049f4:	1a9b      	subs	r3, r3, r2
900049f6:	009b      	lsls	r3, r3, #2
900049f8:	440b      	add	r3, r1
900049fa:	331b      	adds	r3, #27
900049fc:	781b      	ldrb	r3, [r3, #0]
900049fe:	2b01      	cmp	r3, #1
90004a00:	d129      	bne.n	90004a56 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004a02:	78fa      	ldrb	r2, [r7, #3]
90004a04:	6879      	ldr	r1, [r7, #4]
90004a06:	4613      	mov	r3, r2
90004a08:	011b      	lsls	r3, r3, #4
90004a0a:	1a9b      	subs	r3, r3, r2
90004a0c:	009b      	lsls	r3, r3, #2
90004a0e:	440b      	add	r3, r1
90004a10:	331b      	adds	r3, #27
90004a12:	2200      	movs	r2, #0
90004a14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004a16:	78fb      	ldrb	r3, [r7, #3]
90004a18:	015a      	lsls	r2, r3, #5
90004a1a:	693b      	ldr	r3, [r7, #16]
90004a1c:	4413      	add	r3, r2
90004a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a22:	685b      	ldr	r3, [r3, #4]
90004a24:	78fa      	ldrb	r2, [r7, #3]
90004a26:	0151      	lsls	r1, r2, #5
90004a28:	693a      	ldr	r2, [r7, #16]
90004a2a:	440a      	add	r2, r1
90004a2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004a34:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004a36:	78fb      	ldrb	r3, [r7, #3]
90004a38:	015a      	lsls	r2, r3, #5
90004a3a:	693b      	ldr	r3, [r7, #16]
90004a3c:	4413      	add	r3, r2
90004a3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a42:	68db      	ldr	r3, [r3, #12]
90004a44:	78fa      	ldrb	r2, [r7, #3]
90004a46:	0151      	lsls	r1, r2, #5
90004a48:	693a      	ldr	r2, [r7, #16]
90004a4a:	440a      	add	r2, r1
90004a4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a50:	f043 0320 	orr.w	r3, r3, #32
90004a54:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004a56:	78fb      	ldrb	r3, [r7, #3]
90004a58:	015a      	lsls	r2, r3, #5
90004a5a:	693b      	ldr	r3, [r7, #16]
90004a5c:	4413      	add	r3, r2
90004a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a62:	461a      	mov	r2, r3
90004a64:	2310      	movs	r3, #16
90004a66:	6093      	str	r3, [r2, #8]
90004a68:	e000      	b.n	90004a6c <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004a6a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004a6c:	3718      	adds	r7, #24
90004a6e:	46bd      	mov	sp, r7
90004a70:	bd80      	pop	{r7, pc}

90004a72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004a72:	b580      	push	{r7, lr}
90004a74:	b086      	sub	sp, #24
90004a76:	af00      	add	r7, sp, #0
90004a78:	6078      	str	r0, [r7, #4]
90004a7a:	460b      	mov	r3, r1
90004a7c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004a7e:	687b      	ldr	r3, [r7, #4]
90004a80:	681b      	ldr	r3, [r3, #0]
90004a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004a84:	697b      	ldr	r3, [r7, #20]
90004a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004a88:	687b      	ldr	r3, [r7, #4]
90004a8a:	681b      	ldr	r3, [r3, #0]
90004a8c:	78fa      	ldrb	r2, [r7, #3]
90004a8e:	4611      	mov	r1, r2
90004a90:	4618      	mov	r0, r3
90004a92:	f006 f9ea 	bl	9000ae6a <USB_ReadChInterrupts>
90004a96:	4603      	mov	r3, r0
90004a98:	f003 0304 	and.w	r3, r3, #4
90004a9c:	2b04      	cmp	r3, #4
90004a9e:	d11b      	bne.n	90004ad8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004aa0:	78fb      	ldrb	r3, [r7, #3]
90004aa2:	015a      	lsls	r2, r3, #5
90004aa4:	693b      	ldr	r3, [r7, #16]
90004aa6:	4413      	add	r3, r2
90004aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004aac:	461a      	mov	r2, r3
90004aae:	2304      	movs	r3, #4
90004ab0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004ab2:	78fa      	ldrb	r2, [r7, #3]
90004ab4:	6879      	ldr	r1, [r7, #4]
90004ab6:	4613      	mov	r3, r2
90004ab8:	011b      	lsls	r3, r3, #4
90004aba:	1a9b      	subs	r3, r3, r2
90004abc:	009b      	lsls	r3, r3, #2
90004abe:	440b      	add	r3, r1
90004ac0:	334d      	adds	r3, #77	@ 0x4d
90004ac2:	2207      	movs	r2, #7
90004ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ac6:	687b      	ldr	r3, [r7, #4]
90004ac8:	681b      	ldr	r3, [r3, #0]
90004aca:	78fa      	ldrb	r2, [r7, #3]
90004acc:	4611      	mov	r1, r2
90004ace:	4618      	mov	r0, r3
90004ad0:	f006 fa48 	bl	9000af64 <USB_HC_Halt>
90004ad4:	f000 bc89 	b.w	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004ad8:	687b      	ldr	r3, [r7, #4]
90004ada:	681b      	ldr	r3, [r3, #0]
90004adc:	78fa      	ldrb	r2, [r7, #3]
90004ade:	4611      	mov	r1, r2
90004ae0:	4618      	mov	r0, r3
90004ae2:	f006 f9c2 	bl	9000ae6a <USB_ReadChInterrupts>
90004ae6:	4603      	mov	r3, r0
90004ae8:	f003 0320 	and.w	r3, r3, #32
90004aec:	2b20      	cmp	r3, #32
90004aee:	f040 8082 	bne.w	90004bf6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004af2:	78fb      	ldrb	r3, [r7, #3]
90004af4:	015a      	lsls	r2, r3, #5
90004af6:	693b      	ldr	r3, [r7, #16]
90004af8:	4413      	add	r3, r2
90004afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004afe:	461a      	mov	r2, r3
90004b00:	2320      	movs	r3, #32
90004b02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004b04:	78fa      	ldrb	r2, [r7, #3]
90004b06:	6879      	ldr	r1, [r7, #4]
90004b08:	4613      	mov	r3, r2
90004b0a:	011b      	lsls	r3, r3, #4
90004b0c:	1a9b      	subs	r3, r3, r2
90004b0e:	009b      	lsls	r3, r3, #2
90004b10:	440b      	add	r3, r1
90004b12:	3319      	adds	r3, #25
90004b14:	781b      	ldrb	r3, [r3, #0]
90004b16:	2b01      	cmp	r3, #1
90004b18:	d124      	bne.n	90004b64 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004b1a:	78fa      	ldrb	r2, [r7, #3]
90004b1c:	6879      	ldr	r1, [r7, #4]
90004b1e:	4613      	mov	r3, r2
90004b20:	011b      	lsls	r3, r3, #4
90004b22:	1a9b      	subs	r3, r3, r2
90004b24:	009b      	lsls	r3, r3, #2
90004b26:	440b      	add	r3, r1
90004b28:	3319      	adds	r3, #25
90004b2a:	2200      	movs	r2, #0
90004b2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b2e:	78fa      	ldrb	r2, [r7, #3]
90004b30:	6879      	ldr	r1, [r7, #4]
90004b32:	4613      	mov	r3, r2
90004b34:	011b      	lsls	r3, r3, #4
90004b36:	1a9b      	subs	r3, r3, r2
90004b38:	009b      	lsls	r3, r3, #2
90004b3a:	440b      	add	r3, r1
90004b3c:	334c      	adds	r3, #76	@ 0x4c
90004b3e:	2202      	movs	r2, #2
90004b40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004b42:	78fa      	ldrb	r2, [r7, #3]
90004b44:	6879      	ldr	r1, [r7, #4]
90004b46:	4613      	mov	r3, r2
90004b48:	011b      	lsls	r3, r3, #4
90004b4a:	1a9b      	subs	r3, r3, r2
90004b4c:	009b      	lsls	r3, r3, #2
90004b4e:	440b      	add	r3, r1
90004b50:	334d      	adds	r3, #77	@ 0x4d
90004b52:	2203      	movs	r2, #3
90004b54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004b56:	687b      	ldr	r3, [r7, #4]
90004b58:	681b      	ldr	r3, [r3, #0]
90004b5a:	78fa      	ldrb	r2, [r7, #3]
90004b5c:	4611      	mov	r1, r2
90004b5e:	4618      	mov	r0, r3
90004b60:	f006 fa00 	bl	9000af64 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90004b64:	78fa      	ldrb	r2, [r7, #3]
90004b66:	6879      	ldr	r1, [r7, #4]
90004b68:	4613      	mov	r3, r2
90004b6a:	011b      	lsls	r3, r3, #4
90004b6c:	1a9b      	subs	r3, r3, r2
90004b6e:	009b      	lsls	r3, r3, #2
90004b70:	440b      	add	r3, r1
90004b72:	331a      	adds	r3, #26
90004b74:	781b      	ldrb	r3, [r3, #0]
90004b76:	2b01      	cmp	r3, #1
90004b78:	f040 8437 	bne.w	900053ea <HCD_HC_OUT_IRQHandler+0x978>
90004b7c:	78fa      	ldrb	r2, [r7, #3]
90004b7e:	6879      	ldr	r1, [r7, #4]
90004b80:	4613      	mov	r3, r2
90004b82:	011b      	lsls	r3, r3, #4
90004b84:	1a9b      	subs	r3, r3, r2
90004b86:	009b      	lsls	r3, r3, #2
90004b88:	440b      	add	r3, r1
90004b8a:	331b      	adds	r3, #27
90004b8c:	781b      	ldrb	r3, [r3, #0]
90004b8e:	2b00      	cmp	r3, #0
90004b90:	f040 842b 	bne.w	900053ea <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90004b94:	78fa      	ldrb	r2, [r7, #3]
90004b96:	6879      	ldr	r1, [r7, #4]
90004b98:	4613      	mov	r3, r2
90004b9a:	011b      	lsls	r3, r3, #4
90004b9c:	1a9b      	subs	r3, r3, r2
90004b9e:	009b      	lsls	r3, r3, #2
90004ba0:	440b      	add	r3, r1
90004ba2:	3326      	adds	r3, #38	@ 0x26
90004ba4:	781b      	ldrb	r3, [r3, #0]
90004ba6:	2b01      	cmp	r3, #1
90004ba8:	d009      	beq.n	90004bbe <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90004baa:	78fa      	ldrb	r2, [r7, #3]
90004bac:	6879      	ldr	r1, [r7, #4]
90004bae:	4613      	mov	r3, r2
90004bb0:	011b      	lsls	r3, r3, #4
90004bb2:	1a9b      	subs	r3, r3, r2
90004bb4:	009b      	lsls	r3, r3, #2
90004bb6:	440b      	add	r3, r1
90004bb8:	331b      	adds	r3, #27
90004bba:	2201      	movs	r2, #1
90004bbc:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90004bbe:	78fa      	ldrb	r2, [r7, #3]
90004bc0:	6879      	ldr	r1, [r7, #4]
90004bc2:	4613      	mov	r3, r2
90004bc4:	011b      	lsls	r3, r3, #4
90004bc6:	1a9b      	subs	r3, r3, r2
90004bc8:	009b      	lsls	r3, r3, #2
90004bca:	440b      	add	r3, r1
90004bcc:	334d      	adds	r3, #77	@ 0x4d
90004bce:	2203      	movs	r2, #3
90004bd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004bd2:	687b      	ldr	r3, [r7, #4]
90004bd4:	681b      	ldr	r3, [r3, #0]
90004bd6:	78fa      	ldrb	r2, [r7, #3]
90004bd8:	4611      	mov	r1, r2
90004bda:	4618      	mov	r0, r3
90004bdc:	f006 f9c2 	bl	9000af64 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90004be0:	78fa      	ldrb	r2, [r7, #3]
90004be2:	6879      	ldr	r1, [r7, #4]
90004be4:	4613      	mov	r3, r2
90004be6:	011b      	lsls	r3, r3, #4
90004be8:	1a9b      	subs	r3, r3, r2
90004bea:	009b      	lsls	r3, r3, #2
90004bec:	440b      	add	r3, r1
90004bee:	3344      	adds	r3, #68	@ 0x44
90004bf0:	2200      	movs	r2, #0
90004bf2:	601a      	str	r2, [r3, #0]
90004bf4:	e3f9      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004bf6:	687b      	ldr	r3, [r7, #4]
90004bf8:	681b      	ldr	r3, [r3, #0]
90004bfa:	78fa      	ldrb	r2, [r7, #3]
90004bfc:	4611      	mov	r1, r2
90004bfe:	4618      	mov	r0, r3
90004c00:	f006 f933 	bl	9000ae6a <USB_ReadChInterrupts>
90004c04:	4603      	mov	r3, r0
90004c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004c0e:	d111      	bne.n	90004c34 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004c10:	78fb      	ldrb	r3, [r7, #3]
90004c12:	015a      	lsls	r2, r3, #5
90004c14:	693b      	ldr	r3, [r7, #16]
90004c16:	4413      	add	r3, r2
90004c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c1c:	461a      	mov	r2, r3
90004c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004c22:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c24:	687b      	ldr	r3, [r7, #4]
90004c26:	681b      	ldr	r3, [r3, #0]
90004c28:	78fa      	ldrb	r2, [r7, #3]
90004c2a:	4611      	mov	r1, r2
90004c2c:	4618      	mov	r0, r3
90004c2e:	f006 f999 	bl	9000af64 <USB_HC_Halt>
90004c32:	e3da      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004c34:	687b      	ldr	r3, [r7, #4]
90004c36:	681b      	ldr	r3, [r3, #0]
90004c38:	78fa      	ldrb	r2, [r7, #3]
90004c3a:	4611      	mov	r1, r2
90004c3c:	4618      	mov	r0, r3
90004c3e:	f006 f914 	bl	9000ae6a <USB_ReadChInterrupts>
90004c42:	4603      	mov	r3, r0
90004c44:	f003 0301 	and.w	r3, r3, #1
90004c48:	2b01      	cmp	r3, #1
90004c4a:	d168      	bne.n	90004d1e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004c4c:	78fa      	ldrb	r2, [r7, #3]
90004c4e:	6879      	ldr	r1, [r7, #4]
90004c50:	4613      	mov	r3, r2
90004c52:	011b      	lsls	r3, r3, #4
90004c54:	1a9b      	subs	r3, r3, r2
90004c56:	009b      	lsls	r3, r3, #2
90004c58:	440b      	add	r3, r1
90004c5a:	3344      	adds	r3, #68	@ 0x44
90004c5c:	2200      	movs	r2, #0
90004c5e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004c60:	687b      	ldr	r3, [r7, #4]
90004c62:	681b      	ldr	r3, [r3, #0]
90004c64:	78fa      	ldrb	r2, [r7, #3]
90004c66:	4611      	mov	r1, r2
90004c68:	4618      	mov	r0, r3
90004c6a:	f006 f8fe 	bl	9000ae6a <USB_ReadChInterrupts>
90004c6e:	4603      	mov	r3, r0
90004c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004c74:	2b40      	cmp	r3, #64	@ 0x40
90004c76:	d112      	bne.n	90004c9e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004c78:	78fa      	ldrb	r2, [r7, #3]
90004c7a:	6879      	ldr	r1, [r7, #4]
90004c7c:	4613      	mov	r3, r2
90004c7e:	011b      	lsls	r3, r3, #4
90004c80:	1a9b      	subs	r3, r3, r2
90004c82:	009b      	lsls	r3, r3, #2
90004c84:	440b      	add	r3, r1
90004c86:	3319      	adds	r3, #25
90004c88:	2201      	movs	r2, #1
90004c8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004c8c:	78fb      	ldrb	r3, [r7, #3]
90004c8e:	015a      	lsls	r2, r3, #5
90004c90:	693b      	ldr	r3, [r7, #16]
90004c92:	4413      	add	r3, r2
90004c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c98:	461a      	mov	r2, r3
90004c9a:	2340      	movs	r3, #64	@ 0x40
90004c9c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90004c9e:	78fa      	ldrb	r2, [r7, #3]
90004ca0:	6879      	ldr	r1, [r7, #4]
90004ca2:	4613      	mov	r3, r2
90004ca4:	011b      	lsls	r3, r3, #4
90004ca6:	1a9b      	subs	r3, r3, r2
90004ca8:	009b      	lsls	r3, r3, #2
90004caa:	440b      	add	r3, r1
90004cac:	331b      	adds	r3, #27
90004cae:	781b      	ldrb	r3, [r3, #0]
90004cb0:	2b00      	cmp	r3, #0
90004cb2:	d019      	beq.n	90004ce8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004cb4:	78fa      	ldrb	r2, [r7, #3]
90004cb6:	6879      	ldr	r1, [r7, #4]
90004cb8:	4613      	mov	r3, r2
90004cba:	011b      	lsls	r3, r3, #4
90004cbc:	1a9b      	subs	r3, r3, r2
90004cbe:	009b      	lsls	r3, r3, #2
90004cc0:	440b      	add	r3, r1
90004cc2:	331b      	adds	r3, #27
90004cc4:	2200      	movs	r2, #0
90004cc6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004cc8:	78fb      	ldrb	r3, [r7, #3]
90004cca:	015a      	lsls	r2, r3, #5
90004ccc:	693b      	ldr	r3, [r7, #16]
90004cce:	4413      	add	r3, r2
90004cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cd4:	685b      	ldr	r3, [r3, #4]
90004cd6:	78fa      	ldrb	r2, [r7, #3]
90004cd8:	0151      	lsls	r1, r2, #5
90004cda:	693a      	ldr	r2, [r7, #16]
90004cdc:	440a      	add	r2, r1
90004cde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004ce6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004ce8:	78fb      	ldrb	r3, [r7, #3]
90004cea:	015a      	lsls	r2, r3, #5
90004cec:	693b      	ldr	r3, [r7, #16]
90004cee:	4413      	add	r3, r2
90004cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cf4:	461a      	mov	r2, r3
90004cf6:	2301      	movs	r3, #1
90004cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90004cfa:	78fa      	ldrb	r2, [r7, #3]
90004cfc:	6879      	ldr	r1, [r7, #4]
90004cfe:	4613      	mov	r3, r2
90004d00:	011b      	lsls	r3, r3, #4
90004d02:	1a9b      	subs	r3, r3, r2
90004d04:	009b      	lsls	r3, r3, #2
90004d06:	440b      	add	r3, r1
90004d08:	334d      	adds	r3, #77	@ 0x4d
90004d0a:	2201      	movs	r2, #1
90004d0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d0e:	687b      	ldr	r3, [r7, #4]
90004d10:	681b      	ldr	r3, [r3, #0]
90004d12:	78fa      	ldrb	r2, [r7, #3]
90004d14:	4611      	mov	r1, r2
90004d16:	4618      	mov	r0, r3
90004d18:	f006 f924 	bl	9000af64 <USB_HC_Halt>
90004d1c:	e365      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004d1e:	687b      	ldr	r3, [r7, #4]
90004d20:	681b      	ldr	r3, [r3, #0]
90004d22:	78fa      	ldrb	r2, [r7, #3]
90004d24:	4611      	mov	r1, r2
90004d26:	4618      	mov	r0, r3
90004d28:	f006 f89f 	bl	9000ae6a <USB_ReadChInterrupts>
90004d2c:	4603      	mov	r3, r0
90004d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004d32:	2b40      	cmp	r3, #64	@ 0x40
90004d34:	d139      	bne.n	90004daa <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90004d36:	78fa      	ldrb	r2, [r7, #3]
90004d38:	6879      	ldr	r1, [r7, #4]
90004d3a:	4613      	mov	r3, r2
90004d3c:	011b      	lsls	r3, r3, #4
90004d3e:	1a9b      	subs	r3, r3, r2
90004d40:	009b      	lsls	r3, r3, #2
90004d42:	440b      	add	r3, r1
90004d44:	334d      	adds	r3, #77	@ 0x4d
90004d46:	2205      	movs	r2, #5
90004d48:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004d4a:	78fa      	ldrb	r2, [r7, #3]
90004d4c:	6879      	ldr	r1, [r7, #4]
90004d4e:	4613      	mov	r3, r2
90004d50:	011b      	lsls	r3, r3, #4
90004d52:	1a9b      	subs	r3, r3, r2
90004d54:	009b      	lsls	r3, r3, #2
90004d56:	440b      	add	r3, r1
90004d58:	331a      	adds	r3, #26
90004d5a:	781b      	ldrb	r3, [r3, #0]
90004d5c:	2b00      	cmp	r3, #0
90004d5e:	d109      	bne.n	90004d74 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004d60:	78fa      	ldrb	r2, [r7, #3]
90004d62:	6879      	ldr	r1, [r7, #4]
90004d64:	4613      	mov	r3, r2
90004d66:	011b      	lsls	r3, r3, #4
90004d68:	1a9b      	subs	r3, r3, r2
90004d6a:	009b      	lsls	r3, r3, #2
90004d6c:	440b      	add	r3, r1
90004d6e:	3319      	adds	r3, #25
90004d70:	2201      	movs	r2, #1
90004d72:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90004d74:	78fa      	ldrb	r2, [r7, #3]
90004d76:	6879      	ldr	r1, [r7, #4]
90004d78:	4613      	mov	r3, r2
90004d7a:	011b      	lsls	r3, r3, #4
90004d7c:	1a9b      	subs	r3, r3, r2
90004d7e:	009b      	lsls	r3, r3, #2
90004d80:	440b      	add	r3, r1
90004d82:	3344      	adds	r3, #68	@ 0x44
90004d84:	2200      	movs	r2, #0
90004d86:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d88:	687b      	ldr	r3, [r7, #4]
90004d8a:	681b      	ldr	r3, [r3, #0]
90004d8c:	78fa      	ldrb	r2, [r7, #3]
90004d8e:	4611      	mov	r1, r2
90004d90:	4618      	mov	r0, r3
90004d92:	f006 f8e7 	bl	9000af64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004d96:	78fb      	ldrb	r3, [r7, #3]
90004d98:	015a      	lsls	r2, r3, #5
90004d9a:	693b      	ldr	r3, [r7, #16]
90004d9c:	4413      	add	r3, r2
90004d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004da2:	461a      	mov	r2, r3
90004da4:	2340      	movs	r3, #64	@ 0x40
90004da6:	6093      	str	r3, [r2, #8]
90004da8:	e31f      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004daa:	687b      	ldr	r3, [r7, #4]
90004dac:	681b      	ldr	r3, [r3, #0]
90004dae:	78fa      	ldrb	r2, [r7, #3]
90004db0:	4611      	mov	r1, r2
90004db2:	4618      	mov	r0, r3
90004db4:	f006 f859 	bl	9000ae6a <USB_ReadChInterrupts>
90004db8:	4603      	mov	r3, r0
90004dba:	f003 0308 	and.w	r3, r3, #8
90004dbe:	2b08      	cmp	r3, #8
90004dc0:	d11a      	bne.n	90004df8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004dc2:	78fb      	ldrb	r3, [r7, #3]
90004dc4:	015a      	lsls	r2, r3, #5
90004dc6:	693b      	ldr	r3, [r7, #16]
90004dc8:	4413      	add	r3, r2
90004dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004dce:	461a      	mov	r2, r3
90004dd0:	2308      	movs	r3, #8
90004dd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004dd4:	78fa      	ldrb	r2, [r7, #3]
90004dd6:	6879      	ldr	r1, [r7, #4]
90004dd8:	4613      	mov	r3, r2
90004dda:	011b      	lsls	r3, r3, #4
90004ddc:	1a9b      	subs	r3, r3, r2
90004dde:	009b      	lsls	r3, r3, #2
90004de0:	440b      	add	r3, r1
90004de2:	334d      	adds	r3, #77	@ 0x4d
90004de4:	2206      	movs	r2, #6
90004de6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004de8:	687b      	ldr	r3, [r7, #4]
90004dea:	681b      	ldr	r3, [r3, #0]
90004dec:	78fa      	ldrb	r2, [r7, #3]
90004dee:	4611      	mov	r1, r2
90004df0:	4618      	mov	r0, r3
90004df2:	f006 f8b7 	bl	9000af64 <USB_HC_Halt>
90004df6:	e2f8      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004df8:	687b      	ldr	r3, [r7, #4]
90004dfa:	681b      	ldr	r3, [r3, #0]
90004dfc:	78fa      	ldrb	r2, [r7, #3]
90004dfe:	4611      	mov	r1, r2
90004e00:	4618      	mov	r0, r3
90004e02:	f006 f832 	bl	9000ae6a <USB_ReadChInterrupts>
90004e06:	4603      	mov	r3, r0
90004e08:	f003 0310 	and.w	r3, r3, #16
90004e0c:	2b10      	cmp	r3, #16
90004e0e:	d144      	bne.n	90004e9a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004e10:	78fa      	ldrb	r2, [r7, #3]
90004e12:	6879      	ldr	r1, [r7, #4]
90004e14:	4613      	mov	r3, r2
90004e16:	011b      	lsls	r3, r3, #4
90004e18:	1a9b      	subs	r3, r3, r2
90004e1a:	009b      	lsls	r3, r3, #2
90004e1c:	440b      	add	r3, r1
90004e1e:	3344      	adds	r3, #68	@ 0x44
90004e20:	2200      	movs	r2, #0
90004e22:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90004e24:	78fa      	ldrb	r2, [r7, #3]
90004e26:	6879      	ldr	r1, [r7, #4]
90004e28:	4613      	mov	r3, r2
90004e2a:	011b      	lsls	r3, r3, #4
90004e2c:	1a9b      	subs	r3, r3, r2
90004e2e:	009b      	lsls	r3, r3, #2
90004e30:	440b      	add	r3, r1
90004e32:	334d      	adds	r3, #77	@ 0x4d
90004e34:	2204      	movs	r2, #4
90004e36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90004e38:	78fa      	ldrb	r2, [r7, #3]
90004e3a:	6879      	ldr	r1, [r7, #4]
90004e3c:	4613      	mov	r3, r2
90004e3e:	011b      	lsls	r3, r3, #4
90004e40:	1a9b      	subs	r3, r3, r2
90004e42:	009b      	lsls	r3, r3, #2
90004e44:	440b      	add	r3, r1
90004e46:	3319      	adds	r3, #25
90004e48:	781b      	ldrb	r3, [r3, #0]
90004e4a:	2b00      	cmp	r3, #0
90004e4c:	d114      	bne.n	90004e78 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
90004e4e:	78fa      	ldrb	r2, [r7, #3]
90004e50:	6879      	ldr	r1, [r7, #4]
90004e52:	4613      	mov	r3, r2
90004e54:	011b      	lsls	r3, r3, #4
90004e56:	1a9b      	subs	r3, r3, r2
90004e58:	009b      	lsls	r3, r3, #2
90004e5a:	440b      	add	r3, r1
90004e5c:	3318      	adds	r3, #24
90004e5e:	781b      	ldrb	r3, [r3, #0]
90004e60:	2b00      	cmp	r3, #0
90004e62:	d109      	bne.n	90004e78 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90004e64:	78fa      	ldrb	r2, [r7, #3]
90004e66:	6879      	ldr	r1, [r7, #4]
90004e68:	4613      	mov	r3, r2
90004e6a:	011b      	lsls	r3, r3, #4
90004e6c:	1a9b      	subs	r3, r3, r2
90004e6e:	009b      	lsls	r3, r3, #2
90004e70:	440b      	add	r3, r1
90004e72:	3319      	adds	r3, #25
90004e74:	2201      	movs	r2, #1
90004e76:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e78:	687b      	ldr	r3, [r7, #4]
90004e7a:	681b      	ldr	r3, [r3, #0]
90004e7c:	78fa      	ldrb	r2, [r7, #3]
90004e7e:	4611      	mov	r1, r2
90004e80:	4618      	mov	r0, r3
90004e82:	f006 f86f 	bl	9000af64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004e86:	78fb      	ldrb	r3, [r7, #3]
90004e88:	015a      	lsls	r2, r3, #5
90004e8a:	693b      	ldr	r3, [r7, #16]
90004e8c:	4413      	add	r3, r2
90004e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e92:	461a      	mov	r2, r3
90004e94:	2310      	movs	r3, #16
90004e96:	6093      	str	r3, [r2, #8]
90004e98:	e2a7      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004e9a:	687b      	ldr	r3, [r7, #4]
90004e9c:	681b      	ldr	r3, [r3, #0]
90004e9e:	78fa      	ldrb	r2, [r7, #3]
90004ea0:	4611      	mov	r1, r2
90004ea2:	4618      	mov	r0, r3
90004ea4:	f005 ffe1 	bl	9000ae6a <USB_ReadChInterrupts>
90004ea8:	4603      	mov	r3, r0
90004eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90004eae:	2b80      	cmp	r3, #128	@ 0x80
90004eb0:	f040 8083 	bne.w	90004fba <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90004eb4:	687b      	ldr	r3, [r7, #4]
90004eb6:	799b      	ldrb	r3, [r3, #6]
90004eb8:	2b00      	cmp	r3, #0
90004eba:	d111      	bne.n	90004ee0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90004ebc:	78fa      	ldrb	r2, [r7, #3]
90004ebe:	6879      	ldr	r1, [r7, #4]
90004ec0:	4613      	mov	r3, r2
90004ec2:	011b      	lsls	r3, r3, #4
90004ec4:	1a9b      	subs	r3, r3, r2
90004ec6:	009b      	lsls	r3, r3, #2
90004ec8:	440b      	add	r3, r1
90004eca:	334d      	adds	r3, #77	@ 0x4d
90004ecc:	2207      	movs	r2, #7
90004ece:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ed0:	687b      	ldr	r3, [r7, #4]
90004ed2:	681b      	ldr	r3, [r3, #0]
90004ed4:	78fa      	ldrb	r2, [r7, #3]
90004ed6:	4611      	mov	r1, r2
90004ed8:	4618      	mov	r0, r3
90004eda:	f006 f843 	bl	9000af64 <USB_HC_Halt>
90004ede:	e062      	b.n	90004fa6 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90004ee0:	78fa      	ldrb	r2, [r7, #3]
90004ee2:	6879      	ldr	r1, [r7, #4]
90004ee4:	4613      	mov	r3, r2
90004ee6:	011b      	lsls	r3, r3, #4
90004ee8:	1a9b      	subs	r3, r3, r2
90004eea:	009b      	lsls	r3, r3, #2
90004eec:	440b      	add	r3, r1
90004eee:	3344      	adds	r3, #68	@ 0x44
90004ef0:	681b      	ldr	r3, [r3, #0]
90004ef2:	1c59      	adds	r1, r3, #1
90004ef4:	6878      	ldr	r0, [r7, #4]
90004ef6:	4613      	mov	r3, r2
90004ef8:	011b      	lsls	r3, r3, #4
90004efa:	1a9b      	subs	r3, r3, r2
90004efc:	009b      	lsls	r3, r3, #2
90004efe:	4403      	add	r3, r0
90004f00:	3344      	adds	r3, #68	@ 0x44
90004f02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004f04:	78fa      	ldrb	r2, [r7, #3]
90004f06:	6879      	ldr	r1, [r7, #4]
90004f08:	4613      	mov	r3, r2
90004f0a:	011b      	lsls	r3, r3, #4
90004f0c:	1a9b      	subs	r3, r3, r2
90004f0e:	009b      	lsls	r3, r3, #2
90004f10:	440b      	add	r3, r1
90004f12:	3344      	adds	r3, #68	@ 0x44
90004f14:	681b      	ldr	r3, [r3, #0]
90004f16:	2b02      	cmp	r3, #2
90004f18:	d922      	bls.n	90004f60 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004f1a:	78fa      	ldrb	r2, [r7, #3]
90004f1c:	6879      	ldr	r1, [r7, #4]
90004f1e:	4613      	mov	r3, r2
90004f20:	011b      	lsls	r3, r3, #4
90004f22:	1a9b      	subs	r3, r3, r2
90004f24:	009b      	lsls	r3, r3, #2
90004f26:	440b      	add	r3, r1
90004f28:	3344      	adds	r3, #68	@ 0x44
90004f2a:	2200      	movs	r2, #0
90004f2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90004f2e:	78fa      	ldrb	r2, [r7, #3]
90004f30:	6879      	ldr	r1, [r7, #4]
90004f32:	4613      	mov	r3, r2
90004f34:	011b      	lsls	r3, r3, #4
90004f36:	1a9b      	subs	r3, r3, r2
90004f38:	009b      	lsls	r3, r3, #2
90004f3a:	440b      	add	r3, r1
90004f3c:	334c      	adds	r3, #76	@ 0x4c
90004f3e:	2204      	movs	r2, #4
90004f40:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004f42:	78fa      	ldrb	r2, [r7, #3]
90004f44:	6879      	ldr	r1, [r7, #4]
90004f46:	4613      	mov	r3, r2
90004f48:	011b      	lsls	r3, r3, #4
90004f4a:	1a9b      	subs	r3, r3, r2
90004f4c:	009b      	lsls	r3, r3, #2
90004f4e:	440b      	add	r3, r1
90004f50:	334c      	adds	r3, #76	@ 0x4c
90004f52:	781a      	ldrb	r2, [r3, #0]
90004f54:	78fb      	ldrb	r3, [r7, #3]
90004f56:	4619      	mov	r1, r3
90004f58:	6878      	ldr	r0, [r7, #4]
90004f5a:	f7fb ffbf 	bl	90000edc <HAL_HCD_HC_NotifyURBChange_Callback>
90004f5e:	e022      	b.n	90004fa6 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004f60:	78fa      	ldrb	r2, [r7, #3]
90004f62:	6879      	ldr	r1, [r7, #4]
90004f64:	4613      	mov	r3, r2
90004f66:	011b      	lsls	r3, r3, #4
90004f68:	1a9b      	subs	r3, r3, r2
90004f6a:	009b      	lsls	r3, r3, #2
90004f6c:	440b      	add	r3, r1
90004f6e:	334c      	adds	r3, #76	@ 0x4c
90004f70:	2202      	movs	r2, #2
90004f72:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004f74:	78fb      	ldrb	r3, [r7, #3]
90004f76:	015a      	lsls	r2, r3, #5
90004f78:	693b      	ldr	r3, [r7, #16]
90004f7a:	4413      	add	r3, r2
90004f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f80:	681b      	ldr	r3, [r3, #0]
90004f82:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004f84:	68fb      	ldr	r3, [r7, #12]
90004f86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004f8a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004f8c:	68fb      	ldr	r3, [r7, #12]
90004f8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004f92:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004f94:	78fb      	ldrb	r3, [r7, #3]
90004f96:	015a      	lsls	r2, r3, #5
90004f98:	693b      	ldr	r3, [r7, #16]
90004f9a:	4413      	add	r3, r2
90004f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fa0:	461a      	mov	r2, r3
90004fa2:	68fb      	ldr	r3, [r7, #12]
90004fa4:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90004fa6:	78fb      	ldrb	r3, [r7, #3]
90004fa8:	015a      	lsls	r2, r3, #5
90004faa:	693b      	ldr	r3, [r7, #16]
90004fac:	4413      	add	r3, r2
90004fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fb2:	461a      	mov	r2, r3
90004fb4:	2380      	movs	r3, #128	@ 0x80
90004fb6:	6093      	str	r3, [r2, #8]
90004fb8:	e217      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004fba:	687b      	ldr	r3, [r7, #4]
90004fbc:	681b      	ldr	r3, [r3, #0]
90004fbe:	78fa      	ldrb	r2, [r7, #3]
90004fc0:	4611      	mov	r1, r2
90004fc2:	4618      	mov	r0, r3
90004fc4:	f005 ff51 	bl	9000ae6a <USB_ReadChInterrupts>
90004fc8:	4603      	mov	r3, r0
90004fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004fd2:	d11b      	bne.n	9000500c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90004fd4:	78fa      	ldrb	r2, [r7, #3]
90004fd6:	6879      	ldr	r1, [r7, #4]
90004fd8:	4613      	mov	r3, r2
90004fda:	011b      	lsls	r3, r3, #4
90004fdc:	1a9b      	subs	r3, r3, r2
90004fde:	009b      	lsls	r3, r3, #2
90004fe0:	440b      	add	r3, r1
90004fe2:	334d      	adds	r3, #77	@ 0x4d
90004fe4:	2209      	movs	r2, #9
90004fe6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004fe8:	687b      	ldr	r3, [r7, #4]
90004fea:	681b      	ldr	r3, [r3, #0]
90004fec:	78fa      	ldrb	r2, [r7, #3]
90004fee:	4611      	mov	r1, r2
90004ff0:	4618      	mov	r0, r3
90004ff2:	f005 ffb7 	bl	9000af64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90004ff6:	78fb      	ldrb	r3, [r7, #3]
90004ff8:	015a      	lsls	r2, r3, #5
90004ffa:	693b      	ldr	r3, [r7, #16]
90004ffc:	4413      	add	r3, r2
90004ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005002:	461a      	mov	r2, r3
90005004:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005008:	6093      	str	r3, [r2, #8]
9000500a:	e1ee      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000500c:	687b      	ldr	r3, [r7, #4]
9000500e:	681b      	ldr	r3, [r3, #0]
90005010:	78fa      	ldrb	r2, [r7, #3]
90005012:	4611      	mov	r1, r2
90005014:	4618      	mov	r0, r3
90005016:	f005 ff28 	bl	9000ae6a <USB_ReadChInterrupts>
9000501a:	4603      	mov	r3, r0
9000501c:	f003 0302 	and.w	r3, r3, #2
90005020:	2b02      	cmp	r3, #2
90005022:	f040 81df 	bne.w	900053e4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005026:	78fb      	ldrb	r3, [r7, #3]
90005028:	015a      	lsls	r2, r3, #5
9000502a:	693b      	ldr	r3, [r7, #16]
9000502c:	4413      	add	r3, r2
9000502e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005032:	461a      	mov	r2, r3
90005034:	2302      	movs	r3, #2
90005036:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005038:	78fa      	ldrb	r2, [r7, #3]
9000503a:	6879      	ldr	r1, [r7, #4]
9000503c:	4613      	mov	r3, r2
9000503e:	011b      	lsls	r3, r3, #4
90005040:	1a9b      	subs	r3, r3, r2
90005042:	009b      	lsls	r3, r3, #2
90005044:	440b      	add	r3, r1
90005046:	334d      	adds	r3, #77	@ 0x4d
90005048:	781b      	ldrb	r3, [r3, #0]
9000504a:	2b01      	cmp	r3, #1
9000504c:	f040 8093 	bne.w	90005176 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005050:	78fa      	ldrb	r2, [r7, #3]
90005052:	6879      	ldr	r1, [r7, #4]
90005054:	4613      	mov	r3, r2
90005056:	011b      	lsls	r3, r3, #4
90005058:	1a9b      	subs	r3, r3, r2
9000505a:	009b      	lsls	r3, r3, #2
9000505c:	440b      	add	r3, r1
9000505e:	334d      	adds	r3, #77	@ 0x4d
90005060:	2202      	movs	r2, #2
90005062:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005064:	78fa      	ldrb	r2, [r7, #3]
90005066:	6879      	ldr	r1, [r7, #4]
90005068:	4613      	mov	r3, r2
9000506a:	011b      	lsls	r3, r3, #4
9000506c:	1a9b      	subs	r3, r3, r2
9000506e:	009b      	lsls	r3, r3, #2
90005070:	440b      	add	r3, r1
90005072:	334c      	adds	r3, #76	@ 0x4c
90005074:	2201      	movs	r2, #1
90005076:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005078:	78fa      	ldrb	r2, [r7, #3]
9000507a:	6879      	ldr	r1, [r7, #4]
9000507c:	4613      	mov	r3, r2
9000507e:	011b      	lsls	r3, r3, #4
90005080:	1a9b      	subs	r3, r3, r2
90005082:	009b      	lsls	r3, r3, #2
90005084:	440b      	add	r3, r1
90005086:	3326      	adds	r3, #38	@ 0x26
90005088:	781b      	ldrb	r3, [r3, #0]
9000508a:	2b02      	cmp	r3, #2
9000508c:	d00b      	beq.n	900050a6 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
9000508e:	78fa      	ldrb	r2, [r7, #3]
90005090:	6879      	ldr	r1, [r7, #4]
90005092:	4613      	mov	r3, r2
90005094:	011b      	lsls	r3, r3, #4
90005096:	1a9b      	subs	r3, r3, r2
90005098:	009b      	lsls	r3, r3, #2
9000509a:	440b      	add	r3, r1
9000509c:	3326      	adds	r3, #38	@ 0x26
9000509e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900050a0:	2b03      	cmp	r3, #3
900050a2:	f040 8190 	bne.w	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
900050a6:	687b      	ldr	r3, [r7, #4]
900050a8:	799b      	ldrb	r3, [r3, #6]
900050aa:	2b00      	cmp	r3, #0
900050ac:	d115      	bne.n	900050da <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
900050ae:	78fa      	ldrb	r2, [r7, #3]
900050b0:	6879      	ldr	r1, [r7, #4]
900050b2:	4613      	mov	r3, r2
900050b4:	011b      	lsls	r3, r3, #4
900050b6:	1a9b      	subs	r3, r3, r2
900050b8:	009b      	lsls	r3, r3, #2
900050ba:	440b      	add	r3, r1
900050bc:	333d      	adds	r3, #61	@ 0x3d
900050be:	781b      	ldrb	r3, [r3, #0]
900050c0:	78fa      	ldrb	r2, [r7, #3]
900050c2:	f083 0301 	eor.w	r3, r3, #1
900050c6:	b2d8      	uxtb	r0, r3
900050c8:	6879      	ldr	r1, [r7, #4]
900050ca:	4613      	mov	r3, r2
900050cc:	011b      	lsls	r3, r3, #4
900050ce:	1a9b      	subs	r3, r3, r2
900050d0:	009b      	lsls	r3, r3, #2
900050d2:	440b      	add	r3, r1
900050d4:	333d      	adds	r3, #61	@ 0x3d
900050d6:	4602      	mov	r2, r0
900050d8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
900050da:	687b      	ldr	r3, [r7, #4]
900050dc:	799b      	ldrb	r3, [r3, #6]
900050de:	2b01      	cmp	r3, #1
900050e0:	f040 8171 	bne.w	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
900050e4:	78fa      	ldrb	r2, [r7, #3]
900050e6:	6879      	ldr	r1, [r7, #4]
900050e8:	4613      	mov	r3, r2
900050ea:	011b      	lsls	r3, r3, #4
900050ec:	1a9b      	subs	r3, r3, r2
900050ee:	009b      	lsls	r3, r3, #2
900050f0:	440b      	add	r3, r1
900050f2:	3334      	adds	r3, #52	@ 0x34
900050f4:	681b      	ldr	r3, [r3, #0]
900050f6:	2b00      	cmp	r3, #0
900050f8:	f000 8165 	beq.w	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
900050fc:	78fa      	ldrb	r2, [r7, #3]
900050fe:	6879      	ldr	r1, [r7, #4]
90005100:	4613      	mov	r3, r2
90005102:	011b      	lsls	r3, r3, #4
90005104:	1a9b      	subs	r3, r3, r2
90005106:	009b      	lsls	r3, r3, #2
90005108:	440b      	add	r3, r1
9000510a:	3334      	adds	r3, #52	@ 0x34
9000510c:	6819      	ldr	r1, [r3, #0]
9000510e:	78fa      	ldrb	r2, [r7, #3]
90005110:	6878      	ldr	r0, [r7, #4]
90005112:	4613      	mov	r3, r2
90005114:	011b      	lsls	r3, r3, #4
90005116:	1a9b      	subs	r3, r3, r2
90005118:	009b      	lsls	r3, r3, #2
9000511a:	4403      	add	r3, r0
9000511c:	3328      	adds	r3, #40	@ 0x28
9000511e:	881b      	ldrh	r3, [r3, #0]
90005120:	440b      	add	r3, r1
90005122:	1e59      	subs	r1, r3, #1
90005124:	78fa      	ldrb	r2, [r7, #3]
90005126:	6878      	ldr	r0, [r7, #4]
90005128:	4613      	mov	r3, r2
9000512a:	011b      	lsls	r3, r3, #4
9000512c:	1a9b      	subs	r3, r3, r2
9000512e:	009b      	lsls	r3, r3, #2
90005130:	4403      	add	r3, r0
90005132:	3328      	adds	r3, #40	@ 0x28
90005134:	881b      	ldrh	r3, [r3, #0]
90005136:	fbb1 f3f3 	udiv	r3, r1, r3
9000513a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
9000513c:	68bb      	ldr	r3, [r7, #8]
9000513e:	f003 0301 	and.w	r3, r3, #1
90005142:	2b00      	cmp	r3, #0
90005144:	f000 813f 	beq.w	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005148:	78fa      	ldrb	r2, [r7, #3]
9000514a:	6879      	ldr	r1, [r7, #4]
9000514c:	4613      	mov	r3, r2
9000514e:	011b      	lsls	r3, r3, #4
90005150:	1a9b      	subs	r3, r3, r2
90005152:	009b      	lsls	r3, r3, #2
90005154:	440b      	add	r3, r1
90005156:	333d      	adds	r3, #61	@ 0x3d
90005158:	781b      	ldrb	r3, [r3, #0]
9000515a:	78fa      	ldrb	r2, [r7, #3]
9000515c:	f083 0301 	eor.w	r3, r3, #1
90005160:	b2d8      	uxtb	r0, r3
90005162:	6879      	ldr	r1, [r7, #4]
90005164:	4613      	mov	r3, r2
90005166:	011b      	lsls	r3, r3, #4
90005168:	1a9b      	subs	r3, r3, r2
9000516a:	009b      	lsls	r3, r3, #2
9000516c:	440b      	add	r3, r1
9000516e:	333d      	adds	r3, #61	@ 0x3d
90005170:	4602      	mov	r2, r0
90005172:	701a      	strb	r2, [r3, #0]
90005174:	e127      	b.n	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005176:	78fa      	ldrb	r2, [r7, #3]
90005178:	6879      	ldr	r1, [r7, #4]
9000517a:	4613      	mov	r3, r2
9000517c:	011b      	lsls	r3, r3, #4
9000517e:	1a9b      	subs	r3, r3, r2
90005180:	009b      	lsls	r3, r3, #2
90005182:	440b      	add	r3, r1
90005184:	334d      	adds	r3, #77	@ 0x4d
90005186:	781b      	ldrb	r3, [r3, #0]
90005188:	2b03      	cmp	r3, #3
9000518a:	d120      	bne.n	900051ce <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000518c:	78fa      	ldrb	r2, [r7, #3]
9000518e:	6879      	ldr	r1, [r7, #4]
90005190:	4613      	mov	r3, r2
90005192:	011b      	lsls	r3, r3, #4
90005194:	1a9b      	subs	r3, r3, r2
90005196:	009b      	lsls	r3, r3, #2
90005198:	440b      	add	r3, r1
9000519a:	334d      	adds	r3, #77	@ 0x4d
9000519c:	2202      	movs	r2, #2
9000519e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900051a0:	78fa      	ldrb	r2, [r7, #3]
900051a2:	6879      	ldr	r1, [r7, #4]
900051a4:	4613      	mov	r3, r2
900051a6:	011b      	lsls	r3, r3, #4
900051a8:	1a9b      	subs	r3, r3, r2
900051aa:	009b      	lsls	r3, r3, #2
900051ac:	440b      	add	r3, r1
900051ae:	331b      	adds	r3, #27
900051b0:	781b      	ldrb	r3, [r3, #0]
900051b2:	2b01      	cmp	r3, #1
900051b4:	f040 8107 	bne.w	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900051b8:	78fa      	ldrb	r2, [r7, #3]
900051ba:	6879      	ldr	r1, [r7, #4]
900051bc:	4613      	mov	r3, r2
900051be:	011b      	lsls	r3, r3, #4
900051c0:	1a9b      	subs	r3, r3, r2
900051c2:	009b      	lsls	r3, r3, #2
900051c4:	440b      	add	r3, r1
900051c6:	334c      	adds	r3, #76	@ 0x4c
900051c8:	2202      	movs	r2, #2
900051ca:	701a      	strb	r2, [r3, #0]
900051cc:	e0fb      	b.n	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900051ce:	78fa      	ldrb	r2, [r7, #3]
900051d0:	6879      	ldr	r1, [r7, #4]
900051d2:	4613      	mov	r3, r2
900051d4:	011b      	lsls	r3, r3, #4
900051d6:	1a9b      	subs	r3, r3, r2
900051d8:	009b      	lsls	r3, r3, #2
900051da:	440b      	add	r3, r1
900051dc:	334d      	adds	r3, #77	@ 0x4d
900051de:	781b      	ldrb	r3, [r3, #0]
900051e0:	2b04      	cmp	r3, #4
900051e2:	d13a      	bne.n	9000525a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900051e4:	78fa      	ldrb	r2, [r7, #3]
900051e6:	6879      	ldr	r1, [r7, #4]
900051e8:	4613      	mov	r3, r2
900051ea:	011b      	lsls	r3, r3, #4
900051ec:	1a9b      	subs	r3, r3, r2
900051ee:	009b      	lsls	r3, r3, #2
900051f0:	440b      	add	r3, r1
900051f2:	334d      	adds	r3, #77	@ 0x4d
900051f4:	2202      	movs	r2, #2
900051f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900051f8:	78fa      	ldrb	r2, [r7, #3]
900051fa:	6879      	ldr	r1, [r7, #4]
900051fc:	4613      	mov	r3, r2
900051fe:	011b      	lsls	r3, r3, #4
90005200:	1a9b      	subs	r3, r3, r2
90005202:	009b      	lsls	r3, r3, #2
90005204:	440b      	add	r3, r1
90005206:	334c      	adds	r3, #76	@ 0x4c
90005208:	2202      	movs	r2, #2
9000520a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000520c:	78fa      	ldrb	r2, [r7, #3]
9000520e:	6879      	ldr	r1, [r7, #4]
90005210:	4613      	mov	r3, r2
90005212:	011b      	lsls	r3, r3, #4
90005214:	1a9b      	subs	r3, r3, r2
90005216:	009b      	lsls	r3, r3, #2
90005218:	440b      	add	r3, r1
9000521a:	331b      	adds	r3, #27
9000521c:	781b      	ldrb	r3, [r3, #0]
9000521e:	2b01      	cmp	r3, #1
90005220:	f040 80d1 	bne.w	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
90005224:	78fa      	ldrb	r2, [r7, #3]
90005226:	6879      	ldr	r1, [r7, #4]
90005228:	4613      	mov	r3, r2
9000522a:	011b      	lsls	r3, r3, #4
9000522c:	1a9b      	subs	r3, r3, r2
9000522e:	009b      	lsls	r3, r3, #2
90005230:	440b      	add	r3, r1
90005232:	331b      	adds	r3, #27
90005234:	2200      	movs	r2, #0
90005236:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005238:	78fb      	ldrb	r3, [r7, #3]
9000523a:	015a      	lsls	r2, r3, #5
9000523c:	693b      	ldr	r3, [r7, #16]
9000523e:	4413      	add	r3, r2
90005240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005244:	685b      	ldr	r3, [r3, #4]
90005246:	78fa      	ldrb	r2, [r7, #3]
90005248:	0151      	lsls	r1, r2, #5
9000524a:	693a      	ldr	r2, [r7, #16]
9000524c:	440a      	add	r2, r1
9000524e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005256:	6053      	str	r3, [r2, #4]
90005258:	e0b5      	b.n	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000525a:	78fa      	ldrb	r2, [r7, #3]
9000525c:	6879      	ldr	r1, [r7, #4]
9000525e:	4613      	mov	r3, r2
90005260:	011b      	lsls	r3, r3, #4
90005262:	1a9b      	subs	r3, r3, r2
90005264:	009b      	lsls	r3, r3, #2
90005266:	440b      	add	r3, r1
90005268:	334d      	adds	r3, #77	@ 0x4d
9000526a:	781b      	ldrb	r3, [r3, #0]
9000526c:	2b05      	cmp	r3, #5
9000526e:	d114      	bne.n	9000529a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005270:	78fa      	ldrb	r2, [r7, #3]
90005272:	6879      	ldr	r1, [r7, #4]
90005274:	4613      	mov	r3, r2
90005276:	011b      	lsls	r3, r3, #4
90005278:	1a9b      	subs	r3, r3, r2
9000527a:	009b      	lsls	r3, r3, #2
9000527c:	440b      	add	r3, r1
9000527e:	334d      	adds	r3, #77	@ 0x4d
90005280:	2202      	movs	r2, #2
90005282:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005284:	78fa      	ldrb	r2, [r7, #3]
90005286:	6879      	ldr	r1, [r7, #4]
90005288:	4613      	mov	r3, r2
9000528a:	011b      	lsls	r3, r3, #4
9000528c:	1a9b      	subs	r3, r3, r2
9000528e:	009b      	lsls	r3, r3, #2
90005290:	440b      	add	r3, r1
90005292:	334c      	adds	r3, #76	@ 0x4c
90005294:	2202      	movs	r2, #2
90005296:	701a      	strb	r2, [r3, #0]
90005298:	e095      	b.n	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000529a:	78fa      	ldrb	r2, [r7, #3]
9000529c:	6879      	ldr	r1, [r7, #4]
9000529e:	4613      	mov	r3, r2
900052a0:	011b      	lsls	r3, r3, #4
900052a2:	1a9b      	subs	r3, r3, r2
900052a4:	009b      	lsls	r3, r3, #2
900052a6:	440b      	add	r3, r1
900052a8:	334d      	adds	r3, #77	@ 0x4d
900052aa:	781b      	ldrb	r3, [r3, #0]
900052ac:	2b06      	cmp	r3, #6
900052ae:	d114      	bne.n	900052da <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052b0:	78fa      	ldrb	r2, [r7, #3]
900052b2:	6879      	ldr	r1, [r7, #4]
900052b4:	4613      	mov	r3, r2
900052b6:	011b      	lsls	r3, r3, #4
900052b8:	1a9b      	subs	r3, r3, r2
900052ba:	009b      	lsls	r3, r3, #2
900052bc:	440b      	add	r3, r1
900052be:	334d      	adds	r3, #77	@ 0x4d
900052c0:	2202      	movs	r2, #2
900052c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
900052c4:	78fa      	ldrb	r2, [r7, #3]
900052c6:	6879      	ldr	r1, [r7, #4]
900052c8:	4613      	mov	r3, r2
900052ca:	011b      	lsls	r3, r3, #4
900052cc:	1a9b      	subs	r3, r3, r2
900052ce:	009b      	lsls	r3, r3, #2
900052d0:	440b      	add	r3, r1
900052d2:	334c      	adds	r3, #76	@ 0x4c
900052d4:	2205      	movs	r2, #5
900052d6:	701a      	strb	r2, [r3, #0]
900052d8:	e075      	b.n	900053c6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900052da:	78fa      	ldrb	r2, [r7, #3]
900052dc:	6879      	ldr	r1, [r7, #4]
900052de:	4613      	mov	r3, r2
900052e0:	011b      	lsls	r3, r3, #4
900052e2:	1a9b      	subs	r3, r3, r2
900052e4:	009b      	lsls	r3, r3, #2
900052e6:	440b      	add	r3, r1
900052e8:	334d      	adds	r3, #77	@ 0x4d
900052ea:	781b      	ldrb	r3, [r3, #0]
900052ec:	2b07      	cmp	r3, #7
900052ee:	d00a      	beq.n	90005306 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900052f0:	78fa      	ldrb	r2, [r7, #3]
900052f2:	6879      	ldr	r1, [r7, #4]
900052f4:	4613      	mov	r3, r2
900052f6:	011b      	lsls	r3, r3, #4
900052f8:	1a9b      	subs	r3, r3, r2
900052fa:	009b      	lsls	r3, r3, #2
900052fc:	440b      	add	r3, r1
900052fe:	334d      	adds	r3, #77	@ 0x4d
90005300:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005302:	2b09      	cmp	r3, #9
90005304:	d170      	bne.n	900053e8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005306:	78fa      	ldrb	r2, [r7, #3]
90005308:	6879      	ldr	r1, [r7, #4]
9000530a:	4613      	mov	r3, r2
9000530c:	011b      	lsls	r3, r3, #4
9000530e:	1a9b      	subs	r3, r3, r2
90005310:	009b      	lsls	r3, r3, #2
90005312:	440b      	add	r3, r1
90005314:	334d      	adds	r3, #77	@ 0x4d
90005316:	2202      	movs	r2, #2
90005318:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000531a:	78fa      	ldrb	r2, [r7, #3]
9000531c:	6879      	ldr	r1, [r7, #4]
9000531e:	4613      	mov	r3, r2
90005320:	011b      	lsls	r3, r3, #4
90005322:	1a9b      	subs	r3, r3, r2
90005324:	009b      	lsls	r3, r3, #2
90005326:	440b      	add	r3, r1
90005328:	3344      	adds	r3, #68	@ 0x44
9000532a:	681b      	ldr	r3, [r3, #0]
9000532c:	1c59      	adds	r1, r3, #1
9000532e:	6878      	ldr	r0, [r7, #4]
90005330:	4613      	mov	r3, r2
90005332:	011b      	lsls	r3, r3, #4
90005334:	1a9b      	subs	r3, r3, r2
90005336:	009b      	lsls	r3, r3, #2
90005338:	4403      	add	r3, r0
9000533a:	3344      	adds	r3, #68	@ 0x44
9000533c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000533e:	78fa      	ldrb	r2, [r7, #3]
90005340:	6879      	ldr	r1, [r7, #4]
90005342:	4613      	mov	r3, r2
90005344:	011b      	lsls	r3, r3, #4
90005346:	1a9b      	subs	r3, r3, r2
90005348:	009b      	lsls	r3, r3, #2
9000534a:	440b      	add	r3, r1
9000534c:	3344      	adds	r3, #68	@ 0x44
9000534e:	681b      	ldr	r3, [r3, #0]
90005350:	2b02      	cmp	r3, #2
90005352:	d914      	bls.n	9000537e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005354:	78fa      	ldrb	r2, [r7, #3]
90005356:	6879      	ldr	r1, [r7, #4]
90005358:	4613      	mov	r3, r2
9000535a:	011b      	lsls	r3, r3, #4
9000535c:	1a9b      	subs	r3, r3, r2
9000535e:	009b      	lsls	r3, r3, #2
90005360:	440b      	add	r3, r1
90005362:	3344      	adds	r3, #68	@ 0x44
90005364:	2200      	movs	r2, #0
90005366:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005368:	78fa      	ldrb	r2, [r7, #3]
9000536a:	6879      	ldr	r1, [r7, #4]
9000536c:	4613      	mov	r3, r2
9000536e:	011b      	lsls	r3, r3, #4
90005370:	1a9b      	subs	r3, r3, r2
90005372:	009b      	lsls	r3, r3, #2
90005374:	440b      	add	r3, r1
90005376:	334c      	adds	r3, #76	@ 0x4c
90005378:	2204      	movs	r2, #4
9000537a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000537c:	e022      	b.n	900053c4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000537e:	78fa      	ldrb	r2, [r7, #3]
90005380:	6879      	ldr	r1, [r7, #4]
90005382:	4613      	mov	r3, r2
90005384:	011b      	lsls	r3, r3, #4
90005386:	1a9b      	subs	r3, r3, r2
90005388:	009b      	lsls	r3, r3, #2
9000538a:	440b      	add	r3, r1
9000538c:	334c      	adds	r3, #76	@ 0x4c
9000538e:	2202      	movs	r2, #2
90005390:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005392:	78fb      	ldrb	r3, [r7, #3]
90005394:	015a      	lsls	r2, r3, #5
90005396:	693b      	ldr	r3, [r7, #16]
90005398:	4413      	add	r3, r2
9000539a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000539e:	681b      	ldr	r3, [r3, #0]
900053a0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900053a2:	68fb      	ldr	r3, [r7, #12]
900053a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900053a8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900053aa:	68fb      	ldr	r3, [r7, #12]
900053ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900053b0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900053b2:	78fb      	ldrb	r3, [r7, #3]
900053b4:	015a      	lsls	r2, r3, #5
900053b6:	693b      	ldr	r3, [r7, #16]
900053b8:	4413      	add	r3, r2
900053ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053be:	461a      	mov	r2, r3
900053c0:	68fb      	ldr	r3, [r7, #12]
900053c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900053c4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900053c6:	78fa      	ldrb	r2, [r7, #3]
900053c8:	6879      	ldr	r1, [r7, #4]
900053ca:	4613      	mov	r3, r2
900053cc:	011b      	lsls	r3, r3, #4
900053ce:	1a9b      	subs	r3, r3, r2
900053d0:	009b      	lsls	r3, r3, #2
900053d2:	440b      	add	r3, r1
900053d4:	334c      	adds	r3, #76	@ 0x4c
900053d6:	781a      	ldrb	r2, [r3, #0]
900053d8:	78fb      	ldrb	r3, [r7, #3]
900053da:	4619      	mov	r1, r3
900053dc:	6878      	ldr	r0, [r7, #4]
900053de:	f7fb fd7d 	bl	90000edc <HAL_HCD_HC_NotifyURBChange_Callback>
900053e2:	e002      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
900053e4:	bf00      	nop
900053e6:	e000      	b.n	900053ea <HCD_HC_OUT_IRQHandler+0x978>
      return;
900053e8:	bf00      	nop
  }
}
900053ea:	3718      	adds	r7, #24
900053ec:	46bd      	mov	sp, r7
900053ee:	bd80      	pop	{r7, pc}

900053f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900053f0:	b580      	push	{r7, lr}
900053f2:	b08a      	sub	sp, #40	@ 0x28
900053f4:	af00      	add	r7, sp, #0
900053f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900053f8:	687b      	ldr	r3, [r7, #4]
900053fa:	681b      	ldr	r3, [r3, #0]
900053fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
900053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005400:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005402:	687b      	ldr	r3, [r7, #4]
90005404:	681b      	ldr	r3, [r3, #0]
90005406:	6a1b      	ldr	r3, [r3, #32]
90005408:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
9000540a:	69fb      	ldr	r3, [r7, #28]
9000540c:	f003 030f 	and.w	r3, r3, #15
90005410:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005412:	69fb      	ldr	r3, [r7, #28]
90005414:	0c5b      	lsrs	r3, r3, #17
90005416:	f003 030f 	and.w	r3, r3, #15
9000541a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
9000541c:	69fb      	ldr	r3, [r7, #28]
9000541e:	091b      	lsrs	r3, r3, #4
90005420:	f3c3 030a 	ubfx	r3, r3, #0, #11
90005424:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90005426:	697b      	ldr	r3, [r7, #20]
90005428:	2b02      	cmp	r3, #2
9000542a:	d004      	beq.n	90005436 <HCD_RXQLVL_IRQHandler+0x46>
9000542c:	697b      	ldr	r3, [r7, #20]
9000542e:	2b05      	cmp	r3, #5
90005430:	f000 80b6 	beq.w	900055a0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90005434:	e0b7      	b.n	900055a6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
90005436:	693b      	ldr	r3, [r7, #16]
90005438:	2b00      	cmp	r3, #0
9000543a:	f000 80b3 	beq.w	900055a4 <HCD_RXQLVL_IRQHandler+0x1b4>
9000543e:	6879      	ldr	r1, [r7, #4]
90005440:	69ba      	ldr	r2, [r7, #24]
90005442:	4613      	mov	r3, r2
90005444:	011b      	lsls	r3, r3, #4
90005446:	1a9b      	subs	r3, r3, r2
90005448:	009b      	lsls	r3, r3, #2
9000544a:	440b      	add	r3, r1
9000544c:	332c      	adds	r3, #44	@ 0x2c
9000544e:	681b      	ldr	r3, [r3, #0]
90005450:	2b00      	cmp	r3, #0
90005452:	f000 80a7 	beq.w	900055a4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
90005456:	6879      	ldr	r1, [r7, #4]
90005458:	69ba      	ldr	r2, [r7, #24]
9000545a:	4613      	mov	r3, r2
9000545c:	011b      	lsls	r3, r3, #4
9000545e:	1a9b      	subs	r3, r3, r2
90005460:	009b      	lsls	r3, r3, #2
90005462:	440b      	add	r3, r1
90005464:	3338      	adds	r3, #56	@ 0x38
90005466:	681a      	ldr	r2, [r3, #0]
90005468:	693b      	ldr	r3, [r7, #16]
9000546a:	18d1      	adds	r1, r2, r3
9000546c:	6878      	ldr	r0, [r7, #4]
9000546e:	69ba      	ldr	r2, [r7, #24]
90005470:	4613      	mov	r3, r2
90005472:	011b      	lsls	r3, r3, #4
90005474:	1a9b      	subs	r3, r3, r2
90005476:	009b      	lsls	r3, r3, #2
90005478:	4403      	add	r3, r0
9000547a:	3334      	adds	r3, #52	@ 0x34
9000547c:	681b      	ldr	r3, [r3, #0]
9000547e:	4299      	cmp	r1, r3
90005480:	f200 8083 	bhi.w	9000558a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005484:	687b      	ldr	r3, [r7, #4]
90005486:	6818      	ldr	r0, [r3, #0]
90005488:	6879      	ldr	r1, [r7, #4]
9000548a:	69ba      	ldr	r2, [r7, #24]
9000548c:	4613      	mov	r3, r2
9000548e:	011b      	lsls	r3, r3, #4
90005490:	1a9b      	subs	r3, r3, r2
90005492:	009b      	lsls	r3, r3, #2
90005494:	440b      	add	r3, r1
90005496:	332c      	adds	r3, #44	@ 0x2c
90005498:	681b      	ldr	r3, [r3, #0]
9000549a:	693a      	ldr	r2, [r7, #16]
9000549c:	b292      	uxth	r2, r2
9000549e:	4619      	mov	r1, r3
900054a0:	f005 fc78 	bl	9000ad94 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
900054a4:	6879      	ldr	r1, [r7, #4]
900054a6:	69ba      	ldr	r2, [r7, #24]
900054a8:	4613      	mov	r3, r2
900054aa:	011b      	lsls	r3, r3, #4
900054ac:	1a9b      	subs	r3, r3, r2
900054ae:	009b      	lsls	r3, r3, #2
900054b0:	440b      	add	r3, r1
900054b2:	332c      	adds	r3, #44	@ 0x2c
900054b4:	681a      	ldr	r2, [r3, #0]
900054b6:	693b      	ldr	r3, [r7, #16]
900054b8:	18d1      	adds	r1, r2, r3
900054ba:	6878      	ldr	r0, [r7, #4]
900054bc:	69ba      	ldr	r2, [r7, #24]
900054be:	4613      	mov	r3, r2
900054c0:	011b      	lsls	r3, r3, #4
900054c2:	1a9b      	subs	r3, r3, r2
900054c4:	009b      	lsls	r3, r3, #2
900054c6:	4403      	add	r3, r0
900054c8:	332c      	adds	r3, #44	@ 0x2c
900054ca:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
900054cc:	6879      	ldr	r1, [r7, #4]
900054ce:	69ba      	ldr	r2, [r7, #24]
900054d0:	4613      	mov	r3, r2
900054d2:	011b      	lsls	r3, r3, #4
900054d4:	1a9b      	subs	r3, r3, r2
900054d6:	009b      	lsls	r3, r3, #2
900054d8:	440b      	add	r3, r1
900054da:	3338      	adds	r3, #56	@ 0x38
900054dc:	681a      	ldr	r2, [r3, #0]
900054de:	693b      	ldr	r3, [r7, #16]
900054e0:	18d1      	adds	r1, r2, r3
900054e2:	6878      	ldr	r0, [r7, #4]
900054e4:	69ba      	ldr	r2, [r7, #24]
900054e6:	4613      	mov	r3, r2
900054e8:	011b      	lsls	r3, r3, #4
900054ea:	1a9b      	subs	r3, r3, r2
900054ec:	009b      	lsls	r3, r3, #2
900054ee:	4403      	add	r3, r0
900054f0:	3338      	adds	r3, #56	@ 0x38
900054f2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
900054f4:	69bb      	ldr	r3, [r7, #24]
900054f6:	015a      	lsls	r2, r3, #5
900054f8:	6a3b      	ldr	r3, [r7, #32]
900054fa:	4413      	add	r3, r2
900054fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005500:	691b      	ldr	r3, [r3, #16]
90005502:	0cdb      	lsrs	r3, r3, #19
90005504:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005508:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
9000550a:	6879      	ldr	r1, [r7, #4]
9000550c:	69ba      	ldr	r2, [r7, #24]
9000550e:	4613      	mov	r3, r2
90005510:	011b      	lsls	r3, r3, #4
90005512:	1a9b      	subs	r3, r3, r2
90005514:	009b      	lsls	r3, r3, #2
90005516:	440b      	add	r3, r1
90005518:	3328      	adds	r3, #40	@ 0x28
9000551a:	881b      	ldrh	r3, [r3, #0]
9000551c:	461a      	mov	r2, r3
9000551e:	693b      	ldr	r3, [r7, #16]
90005520:	4293      	cmp	r3, r2
90005522:	d13f      	bne.n	900055a4 <HCD_RXQLVL_IRQHandler+0x1b4>
90005524:	68fb      	ldr	r3, [r7, #12]
90005526:	2b00      	cmp	r3, #0
90005528:	d03c      	beq.n	900055a4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
9000552a:	69bb      	ldr	r3, [r7, #24]
9000552c:	015a      	lsls	r2, r3, #5
9000552e:	6a3b      	ldr	r3, [r7, #32]
90005530:	4413      	add	r3, r2
90005532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005536:	681b      	ldr	r3, [r3, #0]
90005538:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000553a:	68bb      	ldr	r3, [r7, #8]
9000553c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005540:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90005542:	68bb      	ldr	r3, [r7, #8]
90005544:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005548:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
9000554a:	69bb      	ldr	r3, [r7, #24]
9000554c:	015a      	lsls	r2, r3, #5
9000554e:	6a3b      	ldr	r3, [r7, #32]
90005550:	4413      	add	r3, r2
90005552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005556:	461a      	mov	r2, r3
90005558:	68bb      	ldr	r3, [r7, #8]
9000555a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
9000555c:	6879      	ldr	r1, [r7, #4]
9000555e:	69ba      	ldr	r2, [r7, #24]
90005560:	4613      	mov	r3, r2
90005562:	011b      	lsls	r3, r3, #4
90005564:	1a9b      	subs	r3, r3, r2
90005566:	009b      	lsls	r3, r3, #2
90005568:	440b      	add	r3, r1
9000556a:	333c      	adds	r3, #60	@ 0x3c
9000556c:	781b      	ldrb	r3, [r3, #0]
9000556e:	f083 0301 	eor.w	r3, r3, #1
90005572:	b2d8      	uxtb	r0, r3
90005574:	6879      	ldr	r1, [r7, #4]
90005576:	69ba      	ldr	r2, [r7, #24]
90005578:	4613      	mov	r3, r2
9000557a:	011b      	lsls	r3, r3, #4
9000557c:	1a9b      	subs	r3, r3, r2
9000557e:	009b      	lsls	r3, r3, #2
90005580:	440b      	add	r3, r1
90005582:	333c      	adds	r3, #60	@ 0x3c
90005584:	4602      	mov	r2, r0
90005586:	701a      	strb	r2, [r3, #0]
      break;
90005588:	e00c      	b.n	900055a4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
9000558a:	6879      	ldr	r1, [r7, #4]
9000558c:	69ba      	ldr	r2, [r7, #24]
9000558e:	4613      	mov	r3, r2
90005590:	011b      	lsls	r3, r3, #4
90005592:	1a9b      	subs	r3, r3, r2
90005594:	009b      	lsls	r3, r3, #2
90005596:	440b      	add	r3, r1
90005598:	334c      	adds	r3, #76	@ 0x4c
9000559a:	2204      	movs	r2, #4
9000559c:	701a      	strb	r2, [r3, #0]
      break;
9000559e:	e001      	b.n	900055a4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
900055a0:	bf00      	nop
900055a2:	e000      	b.n	900055a6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
900055a4:	bf00      	nop
  }
}
900055a6:	bf00      	nop
900055a8:	3728      	adds	r7, #40	@ 0x28
900055aa:	46bd      	mov	sp, r7
900055ac:	bd80      	pop	{r7, pc}

900055ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900055ae:	b580      	push	{r7, lr}
900055b0:	b086      	sub	sp, #24
900055b2:	af00      	add	r7, sp, #0
900055b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900055b6:	687b      	ldr	r3, [r7, #4]
900055b8:	681b      	ldr	r3, [r3, #0]
900055ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900055bc:	697b      	ldr	r3, [r7, #20]
900055be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
900055c0:	693b      	ldr	r3, [r7, #16]
900055c2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900055c6:	681b      	ldr	r3, [r3, #0]
900055c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
900055ca:	693b      	ldr	r3, [r7, #16]
900055cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900055d0:	681b      	ldr	r3, [r3, #0]
900055d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900055d4:	68bb      	ldr	r3, [r7, #8]
900055d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
900055da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900055dc:	68fb      	ldr	r3, [r7, #12]
900055de:	f003 0302 	and.w	r3, r3, #2
900055e2:	2b02      	cmp	r3, #2
900055e4:	d10b      	bne.n	900055fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
900055e6:	68fb      	ldr	r3, [r7, #12]
900055e8:	f003 0301 	and.w	r3, r3, #1
900055ec:	2b01      	cmp	r3, #1
900055ee:	d102      	bne.n	900055f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
900055f0:	6878      	ldr	r0, [r7, #4]
900055f2:	f7fb fc3b 	bl	90000e6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
900055f6:	68bb      	ldr	r3, [r7, #8]
900055f8:	f043 0302 	orr.w	r3, r3, #2
900055fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900055fe:	68fb      	ldr	r3, [r7, #12]
90005600:	f003 0308 	and.w	r3, r3, #8
90005604:	2b08      	cmp	r3, #8
90005606:	d132      	bne.n	9000566e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005608:	68bb      	ldr	r3, [r7, #8]
9000560a:	f043 0308 	orr.w	r3, r3, #8
9000560e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005610:	68fb      	ldr	r3, [r7, #12]
90005612:	f003 0304 	and.w	r3, r3, #4
90005616:	2b04      	cmp	r3, #4
90005618:	d126      	bne.n	90005668 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
9000561a:	687b      	ldr	r3, [r7, #4]
9000561c:	7a5b      	ldrb	r3, [r3, #9]
9000561e:	2b02      	cmp	r3, #2
90005620:	d113      	bne.n	9000564a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005622:	68fb      	ldr	r3, [r7, #12]
90005624:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005628:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000562c:	d106      	bne.n	9000563c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
9000562e:	687b      	ldr	r3, [r7, #4]
90005630:	681b      	ldr	r3, [r3, #0]
90005632:	2102      	movs	r1, #2
90005634:	4618      	mov	r0, r3
90005636:	f005 fc47 	bl	9000aec8 <USB_InitFSLSPClkSel>
9000563a:	e011      	b.n	90005660 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000563c:	687b      	ldr	r3, [r7, #4]
9000563e:	681b      	ldr	r3, [r3, #0]
90005640:	2101      	movs	r1, #1
90005642:	4618      	mov	r0, r3
90005644:	f005 fc40 	bl	9000aec8 <USB_InitFSLSPClkSel>
90005648:	e00a      	b.n	90005660 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
9000564a:	687b      	ldr	r3, [r7, #4]
9000564c:	79db      	ldrb	r3, [r3, #7]
9000564e:	2b01      	cmp	r3, #1
90005650:	d106      	bne.n	90005660 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005652:	693b      	ldr	r3, [r7, #16]
90005654:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005658:	461a      	mov	r2, r3
9000565a:	f64e 2360 	movw	r3, #60000	@ 0xea60
9000565e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005660:	6878      	ldr	r0, [r7, #4]
90005662:	f7fb fc1f 	bl	90000ea4 <HAL_HCD_PortEnabled_Callback>
90005666:	e002      	b.n	9000566e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005668:	6878      	ldr	r0, [r7, #4]
9000566a:	f7fb fc29 	bl	90000ec0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
9000566e:	68fb      	ldr	r3, [r7, #12]
90005670:	f003 0320 	and.w	r3, r3, #32
90005674:	2b20      	cmp	r3, #32
90005676:	d103      	bne.n	90005680 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005678:	68bb      	ldr	r3, [r7, #8]
9000567a:	f043 0320 	orr.w	r3, r3, #32
9000567e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005680:	693b      	ldr	r3, [r7, #16]
90005682:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005686:	461a      	mov	r2, r3
90005688:	68bb      	ldr	r3, [r7, #8]
9000568a:	6013      	str	r3, [r2, #0]
}
9000568c:	bf00      	nop
9000568e:	3718      	adds	r7, #24
90005690:	46bd      	mov	sp, r7
90005692:	bd80      	pop	{r7, pc}

90005694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005694:	b580      	push	{r7, lr}
90005696:	b082      	sub	sp, #8
90005698:	af00      	add	r7, sp, #0
9000569a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
9000569c:	687b      	ldr	r3, [r7, #4]
9000569e:	2b00      	cmp	r3, #0
900056a0:	d101      	bne.n	900056a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
900056a2:	2301      	movs	r3, #1
900056a4:	e08b      	b.n	900057be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
900056a6:	687b      	ldr	r3, [r7, #4]
900056a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900056ac:	b2db      	uxtb	r3, r3
900056ae:	2b00      	cmp	r3, #0
900056b0:	d106      	bne.n	900056c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
900056b2:	687b      	ldr	r3, [r7, #4]
900056b4:	2200      	movs	r2, #0
900056b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
900056ba:	6878      	ldr	r0, [r7, #4]
900056bc:	f000 f886 	bl	900057cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
900056c0:	687b      	ldr	r3, [r7, #4]
900056c2:	2224      	movs	r2, #36	@ 0x24
900056c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
900056c8:	687b      	ldr	r3, [r7, #4]
900056ca:	681b      	ldr	r3, [r3, #0]
900056cc:	681a      	ldr	r2, [r3, #0]
900056ce:	687b      	ldr	r3, [r7, #4]
900056d0:	681b      	ldr	r3, [r3, #0]
900056d2:	f022 0201 	bic.w	r2, r2, #1
900056d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900056d8:	687b      	ldr	r3, [r7, #4]
900056da:	685a      	ldr	r2, [r3, #4]
900056dc:	687b      	ldr	r3, [r7, #4]
900056de:	681b      	ldr	r3, [r3, #0]
900056e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
900056e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900056e6:	687b      	ldr	r3, [r7, #4]
900056e8:	681b      	ldr	r3, [r3, #0]
900056ea:	689a      	ldr	r2, [r3, #8]
900056ec:	687b      	ldr	r3, [r7, #4]
900056ee:	681b      	ldr	r3, [r3, #0]
900056f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
900056f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900056f6:	687b      	ldr	r3, [r7, #4]
900056f8:	68db      	ldr	r3, [r3, #12]
900056fa:	2b01      	cmp	r3, #1
900056fc:	d107      	bne.n	9000570e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900056fe:	687b      	ldr	r3, [r7, #4]
90005700:	689a      	ldr	r2, [r3, #8]
90005702:	687b      	ldr	r3, [r7, #4]
90005704:	681b      	ldr	r3, [r3, #0]
90005706:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
9000570a:	609a      	str	r2, [r3, #8]
9000570c:	e006      	b.n	9000571c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000570e:	687b      	ldr	r3, [r7, #4]
90005710:	689a      	ldr	r2, [r3, #8]
90005712:	687b      	ldr	r3, [r7, #4]
90005714:	681b      	ldr	r3, [r3, #0]
90005716:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
9000571a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000571c:	687b      	ldr	r3, [r7, #4]
9000571e:	68db      	ldr	r3, [r3, #12]
90005720:	2b02      	cmp	r3, #2
90005722:	d108      	bne.n	90005736 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005724:	687b      	ldr	r3, [r7, #4]
90005726:	681b      	ldr	r3, [r3, #0]
90005728:	685a      	ldr	r2, [r3, #4]
9000572a:	687b      	ldr	r3, [r7, #4]
9000572c:	681b      	ldr	r3, [r3, #0]
9000572e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005732:	605a      	str	r2, [r3, #4]
90005734:	e007      	b.n	90005746 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005736:	687b      	ldr	r3, [r7, #4]
90005738:	681b      	ldr	r3, [r3, #0]
9000573a:	685a      	ldr	r2, [r3, #4]
9000573c:	687b      	ldr	r3, [r7, #4]
9000573e:	681b      	ldr	r3, [r3, #0]
90005740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005746:	687b      	ldr	r3, [r7, #4]
90005748:	681b      	ldr	r3, [r3, #0]
9000574a:	6859      	ldr	r1, [r3, #4]
9000574c:	687b      	ldr	r3, [r7, #4]
9000574e:	681a      	ldr	r2, [r3, #0]
90005750:	4b1d      	ldr	r3, [pc, #116]	@ (900057c8 <HAL_I2C_Init+0x134>)
90005752:	430b      	orrs	r3, r1
90005754:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005756:	687b      	ldr	r3, [r7, #4]
90005758:	681b      	ldr	r3, [r3, #0]
9000575a:	68da      	ldr	r2, [r3, #12]
9000575c:	687b      	ldr	r3, [r7, #4]
9000575e:	681b      	ldr	r3, [r3, #0]
90005760:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005764:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005766:	687b      	ldr	r3, [r7, #4]
90005768:	691a      	ldr	r2, [r3, #16]
9000576a:	687b      	ldr	r3, [r7, #4]
9000576c:	695b      	ldr	r3, [r3, #20]
9000576e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005772:	687b      	ldr	r3, [r7, #4]
90005774:	699b      	ldr	r3, [r3, #24]
90005776:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005778:	687b      	ldr	r3, [r7, #4]
9000577a:	681b      	ldr	r3, [r3, #0]
9000577c:	430a      	orrs	r2, r1
9000577e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005780:	687b      	ldr	r3, [r7, #4]
90005782:	69d9      	ldr	r1, [r3, #28]
90005784:	687b      	ldr	r3, [r7, #4]
90005786:	6a1a      	ldr	r2, [r3, #32]
90005788:	687b      	ldr	r3, [r7, #4]
9000578a:	681b      	ldr	r3, [r3, #0]
9000578c:	430a      	orrs	r2, r1
9000578e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005790:	687b      	ldr	r3, [r7, #4]
90005792:	681b      	ldr	r3, [r3, #0]
90005794:	681a      	ldr	r2, [r3, #0]
90005796:	687b      	ldr	r3, [r7, #4]
90005798:	681b      	ldr	r3, [r3, #0]
9000579a:	f042 0201 	orr.w	r2, r2, #1
9000579e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900057a0:	687b      	ldr	r3, [r7, #4]
900057a2:	2200      	movs	r2, #0
900057a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
900057a6:	687b      	ldr	r3, [r7, #4]
900057a8:	2220      	movs	r2, #32
900057aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900057ae:	687b      	ldr	r3, [r7, #4]
900057b0:	2200      	movs	r2, #0
900057b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900057b4:	687b      	ldr	r3, [r7, #4]
900057b6:	2200      	movs	r2, #0
900057b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
900057bc:	2300      	movs	r3, #0
}
900057be:	4618      	mov	r0, r3
900057c0:	3708      	adds	r7, #8
900057c2:	46bd      	mov	sp, r7
900057c4:	bd80      	pop	{r7, pc}
900057c6:	bf00      	nop
900057c8:	02008000 	.word	0x02008000

900057cc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
900057cc:	b480      	push	{r7}
900057ce:	b083      	sub	sp, #12
900057d0:	af00      	add	r7, sp, #0
900057d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
900057d4:	bf00      	nop
900057d6:	370c      	adds	r7, #12
900057d8:	46bd      	mov	sp, r7
900057da:	f85d 7b04 	ldr.w	r7, [sp], #4
900057de:	4770      	bx	lr

900057e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
900057e0:	b580      	push	{r7, lr}
900057e2:	b088      	sub	sp, #32
900057e4:	af02      	add	r7, sp, #8
900057e6:	60f8      	str	r0, [r7, #12]
900057e8:	4608      	mov	r0, r1
900057ea:	4611      	mov	r1, r2
900057ec:	461a      	mov	r2, r3
900057ee:	4603      	mov	r3, r0
900057f0:	817b      	strh	r3, [r7, #10]
900057f2:	460b      	mov	r3, r1
900057f4:	813b      	strh	r3, [r7, #8]
900057f6:	4613      	mov	r3, r2
900057f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
900057fa:	68fb      	ldr	r3, [r7, #12]
900057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005800:	b2db      	uxtb	r3, r3
90005802:	2b20      	cmp	r3, #32
90005804:	f040 80fd 	bne.w	90005a02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005808:	6a3b      	ldr	r3, [r7, #32]
9000580a:	2b00      	cmp	r3, #0
9000580c:	d002      	beq.n	90005814 <HAL_I2C_Mem_Read+0x34>
9000580e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005810:	2b00      	cmp	r3, #0
90005812:	d105      	bne.n	90005820 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005814:	68fb      	ldr	r3, [r7, #12]
90005816:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000581a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
9000581c:	2301      	movs	r3, #1
9000581e:	e0f1      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005820:	68fb      	ldr	r3, [r7, #12]
90005822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005826:	2b01      	cmp	r3, #1
90005828:	d101      	bne.n	9000582e <HAL_I2C_Mem_Read+0x4e>
9000582a:	2302      	movs	r3, #2
9000582c:	e0ea      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
9000582e:	68fb      	ldr	r3, [r7, #12]
90005830:	2201      	movs	r2, #1
90005832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005836:	f7fd fafb 	bl	90002e30 <HAL_GetTick>
9000583a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000583c:	697b      	ldr	r3, [r7, #20]
9000583e:	9300      	str	r3, [sp, #0]
90005840:	2319      	movs	r3, #25
90005842:	2201      	movs	r2, #1
90005844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005848:	68f8      	ldr	r0, [r7, #12]
9000584a:	f000 f975 	bl	90005b38 <I2C_WaitOnFlagUntilTimeout>
9000584e:	4603      	mov	r3, r0
90005850:	2b00      	cmp	r3, #0
90005852:	d001      	beq.n	90005858 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005854:	2301      	movs	r3, #1
90005856:	e0d5      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005858:	68fb      	ldr	r3, [r7, #12]
9000585a:	2222      	movs	r2, #34	@ 0x22
9000585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005860:	68fb      	ldr	r3, [r7, #12]
90005862:	2240      	movs	r2, #64	@ 0x40
90005864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005868:	68fb      	ldr	r3, [r7, #12]
9000586a:	2200      	movs	r2, #0
9000586c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
9000586e:	68fb      	ldr	r3, [r7, #12]
90005870:	6a3a      	ldr	r2, [r7, #32]
90005872:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005874:	68fb      	ldr	r3, [r7, #12]
90005876:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005878:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
9000587a:	68fb      	ldr	r3, [r7, #12]
9000587c:	2200      	movs	r2, #0
9000587e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005880:	88f8      	ldrh	r0, [r7, #6]
90005882:	893a      	ldrh	r2, [r7, #8]
90005884:	8979      	ldrh	r1, [r7, #10]
90005886:	697b      	ldr	r3, [r7, #20]
90005888:	9301      	str	r3, [sp, #4]
9000588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000588c:	9300      	str	r3, [sp, #0]
9000588e:	4603      	mov	r3, r0
90005890:	68f8      	ldr	r0, [r7, #12]
90005892:	f000 f8d9 	bl	90005a48 <I2C_RequestMemoryRead>
90005896:	4603      	mov	r3, r0
90005898:	2b00      	cmp	r3, #0
9000589a:	d005      	beq.n	900058a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
9000589c:	68fb      	ldr	r3, [r7, #12]
9000589e:	2200      	movs	r2, #0
900058a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
900058a4:	2301      	movs	r3, #1
900058a6:	e0ad      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900058a8:	68fb      	ldr	r3, [r7, #12]
900058aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900058ac:	b29b      	uxth	r3, r3
900058ae:	2bff      	cmp	r3, #255	@ 0xff
900058b0:	d90e      	bls.n	900058d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
900058b2:	68fb      	ldr	r3, [r7, #12]
900058b4:	22ff      	movs	r2, #255	@ 0xff
900058b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
900058b8:	68fb      	ldr	r3, [r7, #12]
900058ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900058bc:	b2da      	uxtb	r2, r3
900058be:	8979      	ldrh	r1, [r7, #10]
900058c0:	4b52      	ldr	r3, [pc, #328]	@ (90005a0c <HAL_I2C_Mem_Read+0x22c>)
900058c2:	9300      	str	r3, [sp, #0]
900058c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
900058c8:	68f8      	ldr	r0, [r7, #12]
900058ca:	f000 faf9 	bl	90005ec0 <I2C_TransferConfig>
900058ce:	e00f      	b.n	900058f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
900058d0:	68fb      	ldr	r3, [r7, #12]
900058d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900058d4:	b29a      	uxth	r2, r3
900058d6:	68fb      	ldr	r3, [r7, #12]
900058d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900058da:	68fb      	ldr	r3, [r7, #12]
900058dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900058de:	b2da      	uxtb	r2, r3
900058e0:	8979      	ldrh	r1, [r7, #10]
900058e2:	4b4a      	ldr	r3, [pc, #296]	@ (90005a0c <HAL_I2C_Mem_Read+0x22c>)
900058e4:	9300      	str	r3, [sp, #0]
900058e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900058ea:	68f8      	ldr	r0, [r7, #12]
900058ec:	f000 fae8 	bl	90005ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
900058f0:	697b      	ldr	r3, [r7, #20]
900058f2:	9300      	str	r3, [sp, #0]
900058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900058f6:	2200      	movs	r2, #0
900058f8:	2104      	movs	r1, #4
900058fa:	68f8      	ldr	r0, [r7, #12]
900058fc:	f000 f91c 	bl	90005b38 <I2C_WaitOnFlagUntilTimeout>
90005900:	4603      	mov	r3, r0
90005902:	2b00      	cmp	r3, #0
90005904:	d001      	beq.n	9000590a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005906:	2301      	movs	r3, #1
90005908:	e07c      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000590a:	68fb      	ldr	r3, [r7, #12]
9000590c:	681b      	ldr	r3, [r3, #0]
9000590e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005910:	68fb      	ldr	r3, [r7, #12]
90005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005914:	b2d2      	uxtb	r2, r2
90005916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005918:	68fb      	ldr	r3, [r7, #12]
9000591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000591c:	1c5a      	adds	r2, r3, #1
9000591e:	68fb      	ldr	r3, [r7, #12]
90005920:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005922:	68fb      	ldr	r3, [r7, #12]
90005924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005926:	3b01      	subs	r3, #1
90005928:	b29a      	uxth	r2, r3
9000592a:	68fb      	ldr	r3, [r7, #12]
9000592c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
9000592e:	68fb      	ldr	r3, [r7, #12]
90005930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005932:	b29b      	uxth	r3, r3
90005934:	3b01      	subs	r3, #1
90005936:	b29a      	uxth	r2, r3
90005938:	68fb      	ldr	r3, [r7, #12]
9000593a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000593c:	68fb      	ldr	r3, [r7, #12]
9000593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005940:	b29b      	uxth	r3, r3
90005942:	2b00      	cmp	r3, #0
90005944:	d034      	beq.n	900059b0 <HAL_I2C_Mem_Read+0x1d0>
90005946:	68fb      	ldr	r3, [r7, #12]
90005948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000594a:	2b00      	cmp	r3, #0
9000594c:	d130      	bne.n	900059b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000594e:	697b      	ldr	r3, [r7, #20]
90005950:	9300      	str	r3, [sp, #0]
90005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005954:	2200      	movs	r2, #0
90005956:	2180      	movs	r1, #128	@ 0x80
90005958:	68f8      	ldr	r0, [r7, #12]
9000595a:	f000 f8ed 	bl	90005b38 <I2C_WaitOnFlagUntilTimeout>
9000595e:	4603      	mov	r3, r0
90005960:	2b00      	cmp	r3, #0
90005962:	d001      	beq.n	90005968 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005964:	2301      	movs	r3, #1
90005966:	e04d      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005968:	68fb      	ldr	r3, [r7, #12]
9000596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000596c:	b29b      	uxth	r3, r3
9000596e:	2bff      	cmp	r3, #255	@ 0xff
90005970:	d90e      	bls.n	90005990 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005972:	68fb      	ldr	r3, [r7, #12]
90005974:	22ff      	movs	r2, #255	@ 0xff
90005976:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005978:	68fb      	ldr	r3, [r7, #12]
9000597a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000597c:	b2da      	uxtb	r2, r3
9000597e:	8979      	ldrh	r1, [r7, #10]
90005980:	2300      	movs	r3, #0
90005982:	9300      	str	r3, [sp, #0]
90005984:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005988:	68f8      	ldr	r0, [r7, #12]
9000598a:	f000 fa99 	bl	90005ec0 <I2C_TransferConfig>
9000598e:	e00f      	b.n	900059b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005990:	68fb      	ldr	r3, [r7, #12]
90005992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005994:	b29a      	uxth	r2, r3
90005996:	68fb      	ldr	r3, [r7, #12]
90005998:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
9000599a:	68fb      	ldr	r3, [r7, #12]
9000599c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000599e:	b2da      	uxtb	r2, r3
900059a0:	8979      	ldrh	r1, [r7, #10]
900059a2:	2300      	movs	r3, #0
900059a4:	9300      	str	r3, [sp, #0]
900059a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900059aa:	68f8      	ldr	r0, [r7, #12]
900059ac:	f000 fa88 	bl	90005ec0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
900059b0:	68fb      	ldr	r3, [r7, #12]
900059b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900059b4:	b29b      	uxth	r3, r3
900059b6:	2b00      	cmp	r3, #0
900059b8:	d19a      	bne.n	900058f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900059ba:	697a      	ldr	r2, [r7, #20]
900059bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
900059be:	68f8      	ldr	r0, [r7, #12]
900059c0:	f000 f95a 	bl	90005c78 <I2C_WaitOnSTOPFlagUntilTimeout>
900059c4:	4603      	mov	r3, r0
900059c6:	2b00      	cmp	r3, #0
900059c8:	d001      	beq.n	900059ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
900059ca:	2301      	movs	r3, #1
900059cc:	e01a      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900059ce:	68fb      	ldr	r3, [r7, #12]
900059d0:	681b      	ldr	r3, [r3, #0]
900059d2:	2220      	movs	r2, #32
900059d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900059d6:	68fb      	ldr	r3, [r7, #12]
900059d8:	681b      	ldr	r3, [r3, #0]
900059da:	6859      	ldr	r1, [r3, #4]
900059dc:	68fb      	ldr	r3, [r7, #12]
900059de:	681a      	ldr	r2, [r3, #0]
900059e0:	4b0b      	ldr	r3, [pc, #44]	@ (90005a10 <HAL_I2C_Mem_Read+0x230>)
900059e2:	400b      	ands	r3, r1
900059e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900059e6:	68fb      	ldr	r3, [r7, #12]
900059e8:	2220      	movs	r2, #32
900059ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900059ee:	68fb      	ldr	r3, [r7, #12]
900059f0:	2200      	movs	r2, #0
900059f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900059f6:	68fb      	ldr	r3, [r7, #12]
900059f8:	2200      	movs	r2, #0
900059fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900059fe:	2300      	movs	r3, #0
90005a00:	e000      	b.n	90005a04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005a02:	2302      	movs	r3, #2
  }
}
90005a04:	4618      	mov	r0, r3
90005a06:	3718      	adds	r7, #24
90005a08:	46bd      	mov	sp, r7
90005a0a:	bd80      	pop	{r7, pc}
90005a0c:	80002400 	.word	0x80002400
90005a10:	fe00e800 	.word	0xfe00e800

90005a14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005a14:	b480      	push	{r7}
90005a16:	b083      	sub	sp, #12
90005a18:	af00      	add	r7, sp, #0
90005a1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005a1c:	687b      	ldr	r3, [r7, #4]
90005a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005a22:	b2db      	uxtb	r3, r3
}
90005a24:	4618      	mov	r0, r3
90005a26:	370c      	adds	r7, #12
90005a28:	46bd      	mov	sp, r7
90005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a2e:	4770      	bx	lr

90005a30 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005a30:	b480      	push	{r7}
90005a32:	b083      	sub	sp, #12
90005a34:	af00      	add	r7, sp, #0
90005a36:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005a38:	687b      	ldr	r3, [r7, #4]
90005a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005a3c:	4618      	mov	r0, r3
90005a3e:	370c      	adds	r7, #12
90005a40:	46bd      	mov	sp, r7
90005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a46:	4770      	bx	lr

90005a48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005a48:	b580      	push	{r7, lr}
90005a4a:	b086      	sub	sp, #24
90005a4c:	af02      	add	r7, sp, #8
90005a4e:	60f8      	str	r0, [r7, #12]
90005a50:	4608      	mov	r0, r1
90005a52:	4611      	mov	r1, r2
90005a54:	461a      	mov	r2, r3
90005a56:	4603      	mov	r3, r0
90005a58:	817b      	strh	r3, [r7, #10]
90005a5a:	460b      	mov	r3, r1
90005a5c:	813b      	strh	r3, [r7, #8]
90005a5e:	4613      	mov	r3, r2
90005a60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005a62:	88fb      	ldrh	r3, [r7, #6]
90005a64:	b2da      	uxtb	r2, r3
90005a66:	8979      	ldrh	r1, [r7, #10]
90005a68:	4b20      	ldr	r3, [pc, #128]	@ (90005aec <I2C_RequestMemoryRead+0xa4>)
90005a6a:	9300      	str	r3, [sp, #0]
90005a6c:	2300      	movs	r3, #0
90005a6e:	68f8      	ldr	r0, [r7, #12]
90005a70:	f000 fa26 	bl	90005ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005a74:	69fa      	ldr	r2, [r7, #28]
90005a76:	69b9      	ldr	r1, [r7, #24]
90005a78:	68f8      	ldr	r0, [r7, #12]
90005a7a:	f000 f8b6 	bl	90005bea <I2C_WaitOnTXISFlagUntilTimeout>
90005a7e:	4603      	mov	r3, r0
90005a80:	2b00      	cmp	r3, #0
90005a82:	d001      	beq.n	90005a88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005a84:	2301      	movs	r3, #1
90005a86:	e02c      	b.n	90005ae2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005a88:	88fb      	ldrh	r3, [r7, #6]
90005a8a:	2b01      	cmp	r3, #1
90005a8c:	d105      	bne.n	90005a9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005a8e:	893b      	ldrh	r3, [r7, #8]
90005a90:	b2da      	uxtb	r2, r3
90005a92:	68fb      	ldr	r3, [r7, #12]
90005a94:	681b      	ldr	r3, [r3, #0]
90005a96:	629a      	str	r2, [r3, #40]	@ 0x28
90005a98:	e015      	b.n	90005ac6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005a9a:	893b      	ldrh	r3, [r7, #8]
90005a9c:	0a1b      	lsrs	r3, r3, #8
90005a9e:	b29b      	uxth	r3, r3
90005aa0:	b2da      	uxtb	r2, r3
90005aa2:	68fb      	ldr	r3, [r7, #12]
90005aa4:	681b      	ldr	r3, [r3, #0]
90005aa6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005aa8:	69fa      	ldr	r2, [r7, #28]
90005aaa:	69b9      	ldr	r1, [r7, #24]
90005aac:	68f8      	ldr	r0, [r7, #12]
90005aae:	f000 f89c 	bl	90005bea <I2C_WaitOnTXISFlagUntilTimeout>
90005ab2:	4603      	mov	r3, r0
90005ab4:	2b00      	cmp	r3, #0
90005ab6:	d001      	beq.n	90005abc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005ab8:	2301      	movs	r3, #1
90005aba:	e012      	b.n	90005ae2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005abc:	893b      	ldrh	r3, [r7, #8]
90005abe:	b2da      	uxtb	r2, r3
90005ac0:	68fb      	ldr	r3, [r7, #12]
90005ac2:	681b      	ldr	r3, [r3, #0]
90005ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005ac6:	69fb      	ldr	r3, [r7, #28]
90005ac8:	9300      	str	r3, [sp, #0]
90005aca:	69bb      	ldr	r3, [r7, #24]
90005acc:	2200      	movs	r2, #0
90005ace:	2140      	movs	r1, #64	@ 0x40
90005ad0:	68f8      	ldr	r0, [r7, #12]
90005ad2:	f000 f831 	bl	90005b38 <I2C_WaitOnFlagUntilTimeout>
90005ad6:	4603      	mov	r3, r0
90005ad8:	2b00      	cmp	r3, #0
90005ada:	d001      	beq.n	90005ae0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005adc:	2301      	movs	r3, #1
90005ade:	e000      	b.n	90005ae2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005ae0:	2300      	movs	r3, #0
}
90005ae2:	4618      	mov	r0, r3
90005ae4:	3710      	adds	r7, #16
90005ae6:	46bd      	mov	sp, r7
90005ae8:	bd80      	pop	{r7, pc}
90005aea:	bf00      	nop
90005aec:	80002000 	.word	0x80002000

90005af0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005af0:	b480      	push	{r7}
90005af2:	b083      	sub	sp, #12
90005af4:	af00      	add	r7, sp, #0
90005af6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005af8:	687b      	ldr	r3, [r7, #4]
90005afa:	681b      	ldr	r3, [r3, #0]
90005afc:	699b      	ldr	r3, [r3, #24]
90005afe:	f003 0302 	and.w	r3, r3, #2
90005b02:	2b02      	cmp	r3, #2
90005b04:	d103      	bne.n	90005b0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005b06:	687b      	ldr	r3, [r7, #4]
90005b08:	681b      	ldr	r3, [r3, #0]
90005b0a:	2200      	movs	r2, #0
90005b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005b0e:	687b      	ldr	r3, [r7, #4]
90005b10:	681b      	ldr	r3, [r3, #0]
90005b12:	699b      	ldr	r3, [r3, #24]
90005b14:	f003 0301 	and.w	r3, r3, #1
90005b18:	2b01      	cmp	r3, #1
90005b1a:	d007      	beq.n	90005b2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005b1c:	687b      	ldr	r3, [r7, #4]
90005b1e:	681b      	ldr	r3, [r3, #0]
90005b20:	699a      	ldr	r2, [r3, #24]
90005b22:	687b      	ldr	r3, [r7, #4]
90005b24:	681b      	ldr	r3, [r3, #0]
90005b26:	f042 0201 	orr.w	r2, r2, #1
90005b2a:	619a      	str	r2, [r3, #24]
  }
}
90005b2c:	bf00      	nop
90005b2e:	370c      	adds	r7, #12
90005b30:	46bd      	mov	sp, r7
90005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
90005b36:	4770      	bx	lr

90005b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005b38:	b580      	push	{r7, lr}
90005b3a:	b084      	sub	sp, #16
90005b3c:	af00      	add	r7, sp, #0
90005b3e:	60f8      	str	r0, [r7, #12]
90005b40:	60b9      	str	r1, [r7, #8]
90005b42:	603b      	str	r3, [r7, #0]
90005b44:	4613      	mov	r3, r2
90005b46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005b48:	e03b      	b.n	90005bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005b4a:	69ba      	ldr	r2, [r7, #24]
90005b4c:	6839      	ldr	r1, [r7, #0]
90005b4e:	68f8      	ldr	r0, [r7, #12]
90005b50:	f000 f8d6 	bl	90005d00 <I2C_IsErrorOccurred>
90005b54:	4603      	mov	r3, r0
90005b56:	2b00      	cmp	r3, #0
90005b58:	d001      	beq.n	90005b5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90005b5a:	2301      	movs	r3, #1
90005b5c:	e041      	b.n	90005be2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005b5e:	683b      	ldr	r3, [r7, #0]
90005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
90005b64:	d02d      	beq.n	90005bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005b66:	f7fd f963 	bl	90002e30 <HAL_GetTick>
90005b6a:	4602      	mov	r2, r0
90005b6c:	69bb      	ldr	r3, [r7, #24]
90005b6e:	1ad3      	subs	r3, r2, r3
90005b70:	683a      	ldr	r2, [r7, #0]
90005b72:	429a      	cmp	r2, r3
90005b74:	d302      	bcc.n	90005b7c <I2C_WaitOnFlagUntilTimeout+0x44>
90005b76:	683b      	ldr	r3, [r7, #0]
90005b78:	2b00      	cmp	r3, #0
90005b7a:	d122      	bne.n	90005bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005b7c:	68fb      	ldr	r3, [r7, #12]
90005b7e:	681b      	ldr	r3, [r3, #0]
90005b80:	699a      	ldr	r2, [r3, #24]
90005b82:	68bb      	ldr	r3, [r7, #8]
90005b84:	4013      	ands	r3, r2
90005b86:	68ba      	ldr	r2, [r7, #8]
90005b88:	429a      	cmp	r2, r3
90005b8a:	bf0c      	ite	eq
90005b8c:	2301      	moveq	r3, #1
90005b8e:	2300      	movne	r3, #0
90005b90:	b2db      	uxtb	r3, r3
90005b92:	461a      	mov	r2, r3
90005b94:	79fb      	ldrb	r3, [r7, #7]
90005b96:	429a      	cmp	r2, r3
90005b98:	d113      	bne.n	90005bc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005b9a:	68fb      	ldr	r3, [r7, #12]
90005b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005b9e:	f043 0220 	orr.w	r2, r3, #32
90005ba2:	68fb      	ldr	r3, [r7, #12]
90005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005ba6:	68fb      	ldr	r3, [r7, #12]
90005ba8:	2220      	movs	r2, #32
90005baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005bae:	68fb      	ldr	r3, [r7, #12]
90005bb0:	2200      	movs	r2, #0
90005bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005bb6:	68fb      	ldr	r3, [r7, #12]
90005bb8:	2200      	movs	r2, #0
90005bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90005bbe:	2301      	movs	r3, #1
90005bc0:	e00f      	b.n	90005be2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005bc2:	68fb      	ldr	r3, [r7, #12]
90005bc4:	681b      	ldr	r3, [r3, #0]
90005bc6:	699a      	ldr	r2, [r3, #24]
90005bc8:	68bb      	ldr	r3, [r7, #8]
90005bca:	4013      	ands	r3, r2
90005bcc:	68ba      	ldr	r2, [r7, #8]
90005bce:	429a      	cmp	r2, r3
90005bd0:	bf0c      	ite	eq
90005bd2:	2301      	moveq	r3, #1
90005bd4:	2300      	movne	r3, #0
90005bd6:	b2db      	uxtb	r3, r3
90005bd8:	461a      	mov	r2, r3
90005bda:	79fb      	ldrb	r3, [r7, #7]
90005bdc:	429a      	cmp	r2, r3
90005bde:	d0b4      	beq.n	90005b4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005be0:	2300      	movs	r3, #0
}
90005be2:	4618      	mov	r0, r3
90005be4:	3710      	adds	r7, #16
90005be6:	46bd      	mov	sp, r7
90005be8:	bd80      	pop	{r7, pc}

90005bea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005bea:	b580      	push	{r7, lr}
90005bec:	b084      	sub	sp, #16
90005bee:	af00      	add	r7, sp, #0
90005bf0:	60f8      	str	r0, [r7, #12]
90005bf2:	60b9      	str	r1, [r7, #8]
90005bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005bf6:	e033      	b.n	90005c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005bf8:	687a      	ldr	r2, [r7, #4]
90005bfa:	68b9      	ldr	r1, [r7, #8]
90005bfc:	68f8      	ldr	r0, [r7, #12]
90005bfe:	f000 f87f 	bl	90005d00 <I2C_IsErrorOccurred>
90005c02:	4603      	mov	r3, r0
90005c04:	2b00      	cmp	r3, #0
90005c06:	d001      	beq.n	90005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005c08:	2301      	movs	r3, #1
90005c0a:	e031      	b.n	90005c70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005c0c:	68bb      	ldr	r3, [r7, #8]
90005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
90005c12:	d025      	beq.n	90005c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005c14:	f7fd f90c 	bl	90002e30 <HAL_GetTick>
90005c18:	4602      	mov	r2, r0
90005c1a:	687b      	ldr	r3, [r7, #4]
90005c1c:	1ad3      	subs	r3, r2, r3
90005c1e:	68ba      	ldr	r2, [r7, #8]
90005c20:	429a      	cmp	r2, r3
90005c22:	d302      	bcc.n	90005c2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90005c24:	68bb      	ldr	r3, [r7, #8]
90005c26:	2b00      	cmp	r3, #0
90005c28:	d11a      	bne.n	90005c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90005c2a:	68fb      	ldr	r3, [r7, #12]
90005c2c:	681b      	ldr	r3, [r3, #0]
90005c2e:	699b      	ldr	r3, [r3, #24]
90005c30:	f003 0302 	and.w	r3, r3, #2
90005c34:	2b02      	cmp	r3, #2
90005c36:	d013      	beq.n	90005c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005c38:	68fb      	ldr	r3, [r7, #12]
90005c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005c3c:	f043 0220 	orr.w	r2, r3, #32
90005c40:	68fb      	ldr	r3, [r7, #12]
90005c42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005c44:	68fb      	ldr	r3, [r7, #12]
90005c46:	2220      	movs	r2, #32
90005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005c4c:	68fb      	ldr	r3, [r7, #12]
90005c4e:	2200      	movs	r2, #0
90005c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005c54:	68fb      	ldr	r3, [r7, #12]
90005c56:	2200      	movs	r2, #0
90005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90005c5c:	2301      	movs	r3, #1
90005c5e:	e007      	b.n	90005c70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005c60:	68fb      	ldr	r3, [r7, #12]
90005c62:	681b      	ldr	r3, [r3, #0]
90005c64:	699b      	ldr	r3, [r3, #24]
90005c66:	f003 0302 	and.w	r3, r3, #2
90005c6a:	2b02      	cmp	r3, #2
90005c6c:	d1c4      	bne.n	90005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90005c6e:	2300      	movs	r3, #0
}
90005c70:	4618      	mov	r0, r3
90005c72:	3710      	adds	r7, #16
90005c74:	46bd      	mov	sp, r7
90005c76:	bd80      	pop	{r7, pc}

90005c78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005c78:	b580      	push	{r7, lr}
90005c7a:	b084      	sub	sp, #16
90005c7c:	af00      	add	r7, sp, #0
90005c7e:	60f8      	str	r0, [r7, #12]
90005c80:	60b9      	str	r1, [r7, #8]
90005c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005c84:	e02f      	b.n	90005ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005c86:	687a      	ldr	r2, [r7, #4]
90005c88:	68b9      	ldr	r1, [r7, #8]
90005c8a:	68f8      	ldr	r0, [r7, #12]
90005c8c:	f000 f838 	bl	90005d00 <I2C_IsErrorOccurred>
90005c90:	4603      	mov	r3, r0
90005c92:	2b00      	cmp	r3, #0
90005c94:	d001      	beq.n	90005c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005c96:	2301      	movs	r3, #1
90005c98:	e02d      	b.n	90005cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005c9a:	f7fd f8c9 	bl	90002e30 <HAL_GetTick>
90005c9e:	4602      	mov	r2, r0
90005ca0:	687b      	ldr	r3, [r7, #4]
90005ca2:	1ad3      	subs	r3, r2, r3
90005ca4:	68ba      	ldr	r2, [r7, #8]
90005ca6:	429a      	cmp	r2, r3
90005ca8:	d302      	bcc.n	90005cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90005caa:	68bb      	ldr	r3, [r7, #8]
90005cac:	2b00      	cmp	r3, #0
90005cae:	d11a      	bne.n	90005ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90005cb0:	68fb      	ldr	r3, [r7, #12]
90005cb2:	681b      	ldr	r3, [r3, #0]
90005cb4:	699b      	ldr	r3, [r3, #24]
90005cb6:	f003 0320 	and.w	r3, r3, #32
90005cba:	2b20      	cmp	r3, #32
90005cbc:	d013      	beq.n	90005ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005cbe:	68fb      	ldr	r3, [r7, #12]
90005cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005cc2:	f043 0220 	orr.w	r2, r3, #32
90005cc6:	68fb      	ldr	r3, [r7, #12]
90005cc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90005cca:	68fb      	ldr	r3, [r7, #12]
90005ccc:	2220      	movs	r2, #32
90005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90005cd2:	68fb      	ldr	r3, [r7, #12]
90005cd4:	2200      	movs	r2, #0
90005cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90005cda:	68fb      	ldr	r3, [r7, #12]
90005cdc:	2200      	movs	r2, #0
90005cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90005ce2:	2301      	movs	r3, #1
90005ce4:	e007      	b.n	90005cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005ce6:	68fb      	ldr	r3, [r7, #12]
90005ce8:	681b      	ldr	r3, [r3, #0]
90005cea:	699b      	ldr	r3, [r3, #24]
90005cec:	f003 0320 	and.w	r3, r3, #32
90005cf0:	2b20      	cmp	r3, #32
90005cf2:	d1c8      	bne.n	90005c86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90005cf4:	2300      	movs	r3, #0
}
90005cf6:	4618      	mov	r0, r3
90005cf8:	3710      	adds	r7, #16
90005cfa:	46bd      	mov	sp, r7
90005cfc:	bd80      	pop	{r7, pc}
	...

90005d00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90005d00:	b580      	push	{r7, lr}
90005d02:	b08a      	sub	sp, #40	@ 0x28
90005d04:	af00      	add	r7, sp, #0
90005d06:	60f8      	str	r0, [r7, #12]
90005d08:	60b9      	str	r1, [r7, #8]
90005d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90005d0c:	2300      	movs	r3, #0
90005d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90005d12:	68fb      	ldr	r3, [r7, #12]
90005d14:	681b      	ldr	r3, [r3, #0]
90005d16:	699b      	ldr	r3, [r3, #24]
90005d18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90005d1a:	2300      	movs	r3, #0
90005d1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
90005d1e:	687b      	ldr	r3, [r7, #4]
90005d20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90005d22:	69bb      	ldr	r3, [r7, #24]
90005d24:	f003 0310 	and.w	r3, r3, #16
90005d28:	2b00      	cmp	r3, #0
90005d2a:	d068      	beq.n	90005dfe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90005d2c:	68fb      	ldr	r3, [r7, #12]
90005d2e:	681b      	ldr	r3, [r3, #0]
90005d30:	2210      	movs	r2, #16
90005d32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90005d34:	e049      	b.n	90005dca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90005d36:	68bb      	ldr	r3, [r7, #8]
90005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
90005d3c:	d045      	beq.n	90005dca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90005d3e:	f7fd f877 	bl	90002e30 <HAL_GetTick>
90005d42:	4602      	mov	r2, r0
90005d44:	69fb      	ldr	r3, [r7, #28]
90005d46:	1ad3      	subs	r3, r2, r3
90005d48:	68ba      	ldr	r2, [r7, #8]
90005d4a:	429a      	cmp	r2, r3
90005d4c:	d302      	bcc.n	90005d54 <I2C_IsErrorOccurred+0x54>
90005d4e:	68bb      	ldr	r3, [r7, #8]
90005d50:	2b00      	cmp	r3, #0
90005d52:	d13a      	bne.n	90005dca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90005d54:	68fb      	ldr	r3, [r7, #12]
90005d56:	681b      	ldr	r3, [r3, #0]
90005d58:	685b      	ldr	r3, [r3, #4]
90005d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
90005d5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90005d60:	68fb      	ldr	r3, [r7, #12]
90005d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90005d66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90005d68:	68fb      	ldr	r3, [r7, #12]
90005d6a:	681b      	ldr	r3, [r3, #0]
90005d6c:	699b      	ldr	r3, [r3, #24]
90005d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90005d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90005d76:	d121      	bne.n	90005dbc <I2C_IsErrorOccurred+0xbc>
90005d78:	697b      	ldr	r3, [r7, #20]
90005d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90005d7e:	d01d      	beq.n	90005dbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90005d80:	7cfb      	ldrb	r3, [r7, #19]
90005d82:	2b20      	cmp	r3, #32
90005d84:	d01a      	beq.n	90005dbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90005d86:	68fb      	ldr	r3, [r7, #12]
90005d88:	681b      	ldr	r3, [r3, #0]
90005d8a:	685a      	ldr	r2, [r3, #4]
90005d8c:	68fb      	ldr	r3, [r7, #12]
90005d8e:	681b      	ldr	r3, [r3, #0]
90005d90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90005d94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90005d96:	f7fd f84b 	bl	90002e30 <HAL_GetTick>
90005d9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005d9c:	e00e      	b.n	90005dbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90005d9e:	f7fd f847 	bl	90002e30 <HAL_GetTick>
90005da2:	4602      	mov	r2, r0
90005da4:	69fb      	ldr	r3, [r7, #28]
90005da6:	1ad3      	subs	r3, r2, r3
90005da8:	2b19      	cmp	r3, #25
90005daa:	d907      	bls.n	90005dbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90005dac:	6a3b      	ldr	r3, [r7, #32]
90005dae:	f043 0320 	orr.w	r3, r3, #32
90005db2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90005db4:	2301      	movs	r3, #1
90005db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90005dba:	e006      	b.n	90005dca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005dbc:	68fb      	ldr	r3, [r7, #12]
90005dbe:	681b      	ldr	r3, [r3, #0]
90005dc0:	699b      	ldr	r3, [r3, #24]
90005dc2:	f003 0320 	and.w	r3, r3, #32
90005dc6:	2b20      	cmp	r3, #32
90005dc8:	d1e9      	bne.n	90005d9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90005dca:	68fb      	ldr	r3, [r7, #12]
90005dcc:	681b      	ldr	r3, [r3, #0]
90005dce:	699b      	ldr	r3, [r3, #24]
90005dd0:	f003 0320 	and.w	r3, r3, #32
90005dd4:	2b20      	cmp	r3, #32
90005dd6:	d003      	beq.n	90005de0 <I2C_IsErrorOccurred+0xe0>
90005dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90005ddc:	2b00      	cmp	r3, #0
90005dde:	d0aa      	beq.n	90005d36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90005de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90005de4:	2b00      	cmp	r3, #0
90005de6:	d103      	bne.n	90005df0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005de8:	68fb      	ldr	r3, [r7, #12]
90005dea:	681b      	ldr	r3, [r3, #0]
90005dec:	2220      	movs	r2, #32
90005dee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90005df0:	6a3b      	ldr	r3, [r7, #32]
90005df2:	f043 0304 	orr.w	r3, r3, #4
90005df6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90005df8:	2301      	movs	r3, #1
90005dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90005dfe:	68fb      	ldr	r3, [r7, #12]
90005e00:	681b      	ldr	r3, [r3, #0]
90005e02:	699b      	ldr	r3, [r3, #24]
90005e04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90005e06:	69bb      	ldr	r3, [r7, #24]
90005e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90005e0c:	2b00      	cmp	r3, #0
90005e0e:	d00b      	beq.n	90005e28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90005e10:	6a3b      	ldr	r3, [r7, #32]
90005e12:	f043 0301 	orr.w	r3, r3, #1
90005e16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90005e18:	68fb      	ldr	r3, [r7, #12]
90005e1a:	681b      	ldr	r3, [r3, #0]
90005e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
90005e20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90005e22:	2301      	movs	r3, #1
90005e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90005e28:	69bb      	ldr	r3, [r7, #24]
90005e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90005e2e:	2b00      	cmp	r3, #0
90005e30:	d00b      	beq.n	90005e4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
90005e32:	6a3b      	ldr	r3, [r7, #32]
90005e34:	f043 0308 	orr.w	r3, r3, #8
90005e38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90005e3a:	68fb      	ldr	r3, [r7, #12]
90005e3c:	681b      	ldr	r3, [r3, #0]
90005e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
90005e42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90005e44:	2301      	movs	r3, #1
90005e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90005e4a:	69bb      	ldr	r3, [r7, #24]
90005e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90005e50:	2b00      	cmp	r3, #0
90005e52:	d00b      	beq.n	90005e6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90005e54:	6a3b      	ldr	r3, [r7, #32]
90005e56:	f043 0302 	orr.w	r3, r3, #2
90005e5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90005e5c:	68fb      	ldr	r3, [r7, #12]
90005e5e:	681b      	ldr	r3, [r3, #0]
90005e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005e64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90005e66:	2301      	movs	r3, #1
90005e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90005e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90005e70:	2b00      	cmp	r3, #0
90005e72:	d01c      	beq.n	90005eae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90005e74:	68f8      	ldr	r0, [r7, #12]
90005e76:	f7ff fe3b 	bl	90005af0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005e7a:	68fb      	ldr	r3, [r7, #12]
90005e7c:	681b      	ldr	r3, [r3, #0]
90005e7e:	6859      	ldr	r1, [r3, #4]
90005e80:	68fb      	ldr	r3, [r7, #12]
90005e82:	681a      	ldr	r2, [r3, #0]
90005e84:	4b0d      	ldr	r3, [pc, #52]	@ (90005ebc <I2C_IsErrorOccurred+0x1bc>)
90005e86:	400b      	ands	r3, r1
90005e88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90005e8a:	68fb      	ldr	r3, [r7, #12]
90005e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90005e8e:	6a3b      	ldr	r3, [r7, #32]
90005e90:	431a      	orrs	r2, r3
90005e92:	68fb      	ldr	r3, [r7, #12]
90005e94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90005e96:	68fb      	ldr	r3, [r7, #12]
90005e98:	2220      	movs	r2, #32
90005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90005e9e:	68fb      	ldr	r3, [r7, #12]
90005ea0:	2200      	movs	r2, #0
90005ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005ea6:	68fb      	ldr	r3, [r7, #12]
90005ea8:	2200      	movs	r2, #0
90005eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
90005eae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
90005eb2:	4618      	mov	r0, r3
90005eb4:	3728      	adds	r7, #40	@ 0x28
90005eb6:	46bd      	mov	sp, r7
90005eb8:	bd80      	pop	{r7, pc}
90005eba:	bf00      	nop
90005ebc:	fe00e800 	.word	0xfe00e800

90005ec0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90005ec0:	b480      	push	{r7}
90005ec2:	b087      	sub	sp, #28
90005ec4:	af00      	add	r7, sp, #0
90005ec6:	60f8      	str	r0, [r7, #12]
90005ec8:	607b      	str	r3, [r7, #4]
90005eca:	460b      	mov	r3, r1
90005ecc:	817b      	strh	r3, [r7, #10]
90005ece:	4613      	mov	r3, r2
90005ed0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90005ed2:	897b      	ldrh	r3, [r7, #10]
90005ed4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90005ed8:	7a7b      	ldrb	r3, [r7, #9]
90005eda:	041b      	lsls	r3, r3, #16
90005edc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90005ee0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90005ee2:	687b      	ldr	r3, [r7, #4]
90005ee4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90005ee6:	6a3b      	ldr	r3, [r7, #32]
90005ee8:	4313      	orrs	r3, r2
90005eea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
90005eee:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90005ef0:	68fb      	ldr	r3, [r7, #12]
90005ef2:	681b      	ldr	r3, [r3, #0]
90005ef4:	685a      	ldr	r2, [r3, #4]
90005ef6:	6a3b      	ldr	r3, [r7, #32]
90005ef8:	0d5b      	lsrs	r3, r3, #21
90005efa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
90005efe:	4b08      	ldr	r3, [pc, #32]	@ (90005f20 <I2C_TransferConfig+0x60>)
90005f00:	430b      	orrs	r3, r1
90005f02:	43db      	mvns	r3, r3
90005f04:	ea02 0103 	and.w	r1, r2, r3
90005f08:	68fb      	ldr	r3, [r7, #12]
90005f0a:	681b      	ldr	r3, [r3, #0]
90005f0c:	697a      	ldr	r2, [r7, #20]
90005f0e:	430a      	orrs	r2, r1
90005f10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90005f12:	bf00      	nop
90005f14:	371c      	adds	r7, #28
90005f16:	46bd      	mov	sp, r7
90005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
90005f1c:	4770      	bx	lr
90005f1e:	bf00      	nop
90005f20:	03ff63ff 	.word	0x03ff63ff

90005f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90005f24:	b480      	push	{r7}
90005f26:	b083      	sub	sp, #12
90005f28:	af00      	add	r7, sp, #0
90005f2a:	6078      	str	r0, [r7, #4]
90005f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005f2e:	687b      	ldr	r3, [r7, #4]
90005f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005f34:	b2db      	uxtb	r3, r3
90005f36:	2b20      	cmp	r3, #32
90005f38:	d138      	bne.n	90005fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90005f3a:	687b      	ldr	r3, [r7, #4]
90005f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005f40:	2b01      	cmp	r3, #1
90005f42:	d101      	bne.n	90005f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90005f44:	2302      	movs	r3, #2
90005f46:	e032      	b.n	90005fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90005f48:	687b      	ldr	r3, [r7, #4]
90005f4a:	2201      	movs	r2, #1
90005f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90005f50:	687b      	ldr	r3, [r7, #4]
90005f52:	2224      	movs	r2, #36	@ 0x24
90005f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90005f58:	687b      	ldr	r3, [r7, #4]
90005f5a:	681b      	ldr	r3, [r3, #0]
90005f5c:	681a      	ldr	r2, [r3, #0]
90005f5e:	687b      	ldr	r3, [r7, #4]
90005f60:	681b      	ldr	r3, [r3, #0]
90005f62:	f022 0201 	bic.w	r2, r2, #1
90005f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90005f68:	687b      	ldr	r3, [r7, #4]
90005f6a:	681b      	ldr	r3, [r3, #0]
90005f6c:	681a      	ldr	r2, [r3, #0]
90005f6e:	687b      	ldr	r3, [r7, #4]
90005f70:	681b      	ldr	r3, [r3, #0]
90005f72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90005f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90005f78:	687b      	ldr	r3, [r7, #4]
90005f7a:	681b      	ldr	r3, [r3, #0]
90005f7c:	6819      	ldr	r1, [r3, #0]
90005f7e:	687b      	ldr	r3, [r7, #4]
90005f80:	681b      	ldr	r3, [r3, #0]
90005f82:	683a      	ldr	r2, [r7, #0]
90005f84:	430a      	orrs	r2, r1
90005f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90005f88:	687b      	ldr	r3, [r7, #4]
90005f8a:	681b      	ldr	r3, [r3, #0]
90005f8c:	681a      	ldr	r2, [r3, #0]
90005f8e:	687b      	ldr	r3, [r7, #4]
90005f90:	681b      	ldr	r3, [r3, #0]
90005f92:	f042 0201 	orr.w	r2, r2, #1
90005f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90005f98:	687b      	ldr	r3, [r7, #4]
90005f9a:	2220      	movs	r2, #32
90005f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005fa0:	687b      	ldr	r3, [r7, #4]
90005fa2:	2200      	movs	r2, #0
90005fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005fa8:	2300      	movs	r3, #0
90005faa:	e000      	b.n	90005fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90005fac:	2302      	movs	r3, #2
  }
}
90005fae:	4618      	mov	r0, r3
90005fb0:	370c      	adds	r7, #12
90005fb2:	46bd      	mov	sp, r7
90005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
90005fb8:	4770      	bx	lr

90005fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90005fba:	b480      	push	{r7}
90005fbc:	b085      	sub	sp, #20
90005fbe:	af00      	add	r7, sp, #0
90005fc0:	6078      	str	r0, [r7, #4]
90005fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005fc4:	687b      	ldr	r3, [r7, #4]
90005fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005fca:	b2db      	uxtb	r3, r3
90005fcc:	2b20      	cmp	r3, #32
90005fce:	d139      	bne.n	90006044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90005fd0:	687b      	ldr	r3, [r7, #4]
90005fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005fd6:	2b01      	cmp	r3, #1
90005fd8:	d101      	bne.n	90005fde <HAL_I2CEx_ConfigDigitalFilter+0x24>
90005fda:	2302      	movs	r3, #2
90005fdc:	e033      	b.n	90006046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
90005fde:	687b      	ldr	r3, [r7, #4]
90005fe0:	2201      	movs	r2, #1
90005fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90005fe6:	687b      	ldr	r3, [r7, #4]
90005fe8:	2224      	movs	r2, #36	@ 0x24
90005fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90005fee:	687b      	ldr	r3, [r7, #4]
90005ff0:	681b      	ldr	r3, [r3, #0]
90005ff2:	681a      	ldr	r2, [r3, #0]
90005ff4:	687b      	ldr	r3, [r7, #4]
90005ff6:	681b      	ldr	r3, [r3, #0]
90005ff8:	f022 0201 	bic.w	r2, r2, #1
90005ffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
90005ffe:	687b      	ldr	r3, [r7, #4]
90006000:	681b      	ldr	r3, [r3, #0]
90006002:	681b      	ldr	r3, [r3, #0]
90006004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006006:	68fb      	ldr	r3, [r7, #12]
90006008:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
9000600c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000600e:	683b      	ldr	r3, [r7, #0]
90006010:	021b      	lsls	r3, r3, #8
90006012:	68fa      	ldr	r2, [r7, #12]
90006014:	4313      	orrs	r3, r2
90006016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006018:	687b      	ldr	r3, [r7, #4]
9000601a:	681b      	ldr	r3, [r3, #0]
9000601c:	68fa      	ldr	r2, [r7, #12]
9000601e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006020:	687b      	ldr	r3, [r7, #4]
90006022:	681b      	ldr	r3, [r3, #0]
90006024:	681a      	ldr	r2, [r3, #0]
90006026:	687b      	ldr	r3, [r7, #4]
90006028:	681b      	ldr	r3, [r3, #0]
9000602a:	f042 0201 	orr.w	r2, r2, #1
9000602e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006030:	687b      	ldr	r3, [r7, #4]
90006032:	2220      	movs	r2, #32
90006034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006038:	687b      	ldr	r3, [r7, #4]
9000603a:	2200      	movs	r2, #0
9000603c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006040:	2300      	movs	r3, #0
90006042:	e000      	b.n	90006046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90006044:	2302      	movs	r3, #2
  }
}
90006046:	4618      	mov	r0, r3
90006048:	3714      	adds	r7, #20
9000604a:	46bd      	mov	sp, r7
9000604c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006050:	4770      	bx	lr

90006052 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90006052:	b580      	push	{r7, lr}
90006054:	b084      	sub	sp, #16
90006056:	af00      	add	r7, sp, #0
90006058:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000605a:	687b      	ldr	r3, [r7, #4]
9000605c:	2b00      	cmp	r3, #0
9000605e:	d101      	bne.n	90006064 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90006060:	2301      	movs	r3, #1
90006062:	e08f      	b.n	90006184 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006064:	687b      	ldr	r3, [r7, #4]
90006066:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
9000606a:	b2db      	uxtb	r3, r3
9000606c:	2b00      	cmp	r3, #0
9000606e:	d106      	bne.n	9000607e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90006070:	687b      	ldr	r3, [r7, #4]
90006072:	2200      	movs	r2, #0
90006074:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006078:	6878      	ldr	r0, [r7, #4]
9000607a:	f000 f887 	bl	9000618c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000607e:	687b      	ldr	r3, [r7, #4]
90006080:	2202      	movs	r2, #2
90006082:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006086:	687b      	ldr	r3, [r7, #4]
90006088:	681b      	ldr	r3, [r3, #0]
9000608a:	699a      	ldr	r2, [r3, #24]
9000608c:	687b      	ldr	r3, [r7, #4]
9000608e:	681b      	ldr	r3, [r3, #0]
90006090:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006094:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006096:	687b      	ldr	r3, [r7, #4]
90006098:	681b      	ldr	r3, [r3, #0]
9000609a:	6999      	ldr	r1, [r3, #24]
9000609c:	687b      	ldr	r3, [r7, #4]
9000609e:	685a      	ldr	r2, [r3, #4]
900060a0:	687b      	ldr	r3, [r7, #4]
900060a2:	689b      	ldr	r3, [r3, #8]
900060a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900060a6:	687b      	ldr	r3, [r7, #4]
900060a8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900060aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900060ac:	687b      	ldr	r3, [r7, #4]
900060ae:	691b      	ldr	r3, [r3, #16]
900060b0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900060b2:	687b      	ldr	r3, [r7, #4]
900060b4:	681b      	ldr	r3, [r3, #0]
900060b6:	430a      	orrs	r2, r1
900060b8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
900060ba:	687b      	ldr	r3, [r7, #4]
900060bc:	695b      	ldr	r3, [r3, #20]
900060be:	041b      	lsls	r3, r3, #16
900060c0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
900060c2:	687b      	ldr	r3, [r7, #4]
900060c4:	6999      	ldr	r1, [r3, #24]
900060c6:	687b      	ldr	r3, [r7, #4]
900060c8:	681b      	ldr	r3, [r3, #0]
900060ca:	68fa      	ldr	r2, [r7, #12]
900060cc:	430a      	orrs	r2, r1
900060ce:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900060d0:	687b      	ldr	r3, [r7, #4]
900060d2:	69db      	ldr	r3, [r3, #28]
900060d4:	041b      	lsls	r3, r3, #16
900060d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
900060d8:	687b      	ldr	r3, [r7, #4]
900060da:	6a19      	ldr	r1, [r3, #32]
900060dc:	687b      	ldr	r3, [r7, #4]
900060de:	681b      	ldr	r3, [r3, #0]
900060e0:	68fa      	ldr	r2, [r7, #12]
900060e2:	430a      	orrs	r2, r1
900060e4:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900060e6:	687b      	ldr	r3, [r7, #4]
900060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900060ea:	041b      	lsls	r3, r3, #16
900060ec:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
900060ee:	687b      	ldr	r3, [r7, #4]
900060f0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
900060f2:	687b      	ldr	r3, [r7, #4]
900060f4:	681b      	ldr	r3, [r3, #0]
900060f6:	68fa      	ldr	r2, [r7, #12]
900060f8:	430a      	orrs	r2, r1
900060fa:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
900060fc:	687b      	ldr	r3, [r7, #4]
900060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006100:	041b      	lsls	r3, r3, #16
90006102:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006104:	687b      	ldr	r3, [r7, #4]
90006106:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006108:	687b      	ldr	r3, [r7, #4]
9000610a:	681b      	ldr	r3, [r3, #0]
9000610c:	68fa      	ldr	r2, [r7, #12]
9000610e:	430a      	orrs	r2, r1
90006110:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90006112:	687b      	ldr	r3, [r7, #4]
90006114:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90006118:	021b      	lsls	r3, r3, #8
9000611a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000611c:	687b      	ldr	r3, [r7, #4]
9000611e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
90006122:	041b      	lsls	r3, r3, #16
90006124:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006126:	687b      	ldr	r3, [r7, #4]
90006128:	681b      	ldr	r3, [r3, #0]
9000612a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000612c:	687b      	ldr	r3, [r7, #4]
9000612e:	681b      	ldr	r3, [r3, #0]
90006130:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90006134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006136:	687b      	ldr	r3, [r7, #4]
90006138:	681b      	ldr	r3, [r3, #0]
9000613a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
9000613c:	68ba      	ldr	r2, [r7, #8]
9000613e:	68fb      	ldr	r3, [r7, #12]
90006140:	4313      	orrs	r3, r2
90006142:	687a      	ldr	r2, [r7, #4]
90006144:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006148:	431a      	orrs	r2, r3
9000614a:	687b      	ldr	r3, [r7, #4]
9000614c:	681b      	ldr	r3, [r3, #0]
9000614e:	430a      	orrs	r2, r1
90006150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90006152:	687b      	ldr	r3, [r7, #4]
90006154:	681b      	ldr	r3, [r3, #0]
90006156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006158:	687b      	ldr	r3, [r7, #4]
9000615a:	681b      	ldr	r3, [r3, #0]
9000615c:	f042 0206 	orr.w	r2, r2, #6
90006160:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90006162:	687b      	ldr	r3, [r7, #4]
90006164:	681b      	ldr	r3, [r3, #0]
90006166:	699a      	ldr	r2, [r3, #24]
90006168:	687b      	ldr	r3, [r7, #4]
9000616a:	681b      	ldr	r3, [r3, #0]
9000616c:	f042 0201 	orr.w	r2, r2, #1
90006170:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006172:	687b      	ldr	r3, [r7, #4]
90006174:	2200      	movs	r2, #0
90006176:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000617a:	687b      	ldr	r3, [r7, #4]
9000617c:	2201      	movs	r2, #1
9000617e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
90006182:	2300      	movs	r3, #0
}
90006184:	4618      	mov	r0, r3
90006186:	3710      	adds	r7, #16
90006188:	46bd      	mov	sp, r7
9000618a:	bd80      	pop	{r7, pc}

9000618c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
9000618c:	b480      	push	{r7}
9000618e:	b083      	sub	sp, #12
90006190:	af00      	add	r7, sp, #0
90006192:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006194:	bf00      	nop
90006196:	370c      	adds	r7, #12
90006198:	46bd      	mov	sp, r7
9000619a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000619e:	4770      	bx	lr

900061a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900061a0:	b5b0      	push	{r4, r5, r7, lr}
900061a2:	b084      	sub	sp, #16
900061a4:	af00      	add	r7, sp, #0
900061a6:	60f8      	str	r0, [r7, #12]
900061a8:	60b9      	str	r1, [r7, #8]
900061aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900061ac:	68fb      	ldr	r3, [r7, #12]
900061ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
900061b2:	2b01      	cmp	r3, #1
900061b4:	d101      	bne.n	900061ba <HAL_LTDC_ConfigLayer+0x1a>
900061b6:	2302      	movs	r3, #2
900061b8:	e02c      	b.n	90006214 <HAL_LTDC_ConfigLayer+0x74>
900061ba:	68fb      	ldr	r3, [r7, #12]
900061bc:	2201      	movs	r2, #1
900061be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900061c2:	68fb      	ldr	r3, [r7, #12]
900061c4:	2202      	movs	r2, #2
900061c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900061ca:	68fa      	ldr	r2, [r7, #12]
900061cc:	687b      	ldr	r3, [r7, #4]
900061ce:	2134      	movs	r1, #52	@ 0x34
900061d0:	fb01 f303 	mul.w	r3, r1, r3
900061d4:	4413      	add	r3, r2
900061d6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
900061da:	68bb      	ldr	r3, [r7, #8]
900061dc:	4614      	mov	r4, r2
900061de:	461d      	mov	r5, r3
900061e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900061e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900061e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900061e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900061e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900061ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900061ec:	682b      	ldr	r3, [r5, #0]
900061ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900061f0:	687a      	ldr	r2, [r7, #4]
900061f2:	68b9      	ldr	r1, [r7, #8]
900061f4:	68f8      	ldr	r0, [r7, #12]
900061f6:	f000 f811 	bl	9000621c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900061fa:	68fb      	ldr	r3, [r7, #12]
900061fc:	681b      	ldr	r3, [r3, #0]
900061fe:	2201      	movs	r2, #1
90006200:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90006202:	68fb      	ldr	r3, [r7, #12]
90006204:	2201      	movs	r2, #1
90006206:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
9000620a:	68fb      	ldr	r3, [r7, #12]
9000620c:	2200      	movs	r2, #0
9000620e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90006212:	2300      	movs	r3, #0
}
90006214:	4618      	mov	r0, r3
90006216:	3710      	adds	r7, #16
90006218:	46bd      	mov	sp, r7
9000621a:	bdb0      	pop	{r4, r5, r7, pc}

9000621c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000621c:	b480      	push	{r7}
9000621e:	b089      	sub	sp, #36	@ 0x24
90006220:	af00      	add	r7, sp, #0
90006222:	60f8      	str	r0, [r7, #12]
90006224:	60b9      	str	r1, [r7, #8]
90006226:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006228:	68bb      	ldr	r3, [r7, #8]
9000622a:	685a      	ldr	r2, [r3, #4]
9000622c:	68fb      	ldr	r3, [r7, #12]
9000622e:	681b      	ldr	r3, [r3, #0]
90006230:	68db      	ldr	r3, [r3, #12]
90006232:	0c1b      	lsrs	r3, r3, #16
90006234:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006238:	4413      	add	r3, r2
9000623a:	041b      	lsls	r3, r3, #16
9000623c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000623e:	68fb      	ldr	r3, [r7, #12]
90006240:	681b      	ldr	r3, [r3, #0]
90006242:	461a      	mov	r2, r3
90006244:	687b      	ldr	r3, [r7, #4]
90006246:	01db      	lsls	r3, r3, #7
90006248:	4413      	add	r3, r2
9000624a:	3384      	adds	r3, #132	@ 0x84
9000624c:	685b      	ldr	r3, [r3, #4]
9000624e:	68fa      	ldr	r2, [r7, #12]
90006250:	6812      	ldr	r2, [r2, #0]
90006252:	4611      	mov	r1, r2
90006254:	687a      	ldr	r2, [r7, #4]
90006256:	01d2      	lsls	r2, r2, #7
90006258:	440a      	add	r2, r1
9000625a:	3284      	adds	r2, #132	@ 0x84
9000625c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006260:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006262:	68bb      	ldr	r3, [r7, #8]
90006264:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006266:	68fb      	ldr	r3, [r7, #12]
90006268:	681b      	ldr	r3, [r3, #0]
9000626a:	68db      	ldr	r3, [r3, #12]
9000626c:	0c1b      	lsrs	r3, r3, #16
9000626e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006272:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006274:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006276:	68fb      	ldr	r3, [r7, #12]
90006278:	681b      	ldr	r3, [r3, #0]
9000627a:	4619      	mov	r1, r3
9000627c:	687b      	ldr	r3, [r7, #4]
9000627e:	01db      	lsls	r3, r3, #7
90006280:	440b      	add	r3, r1
90006282:	3384      	adds	r3, #132	@ 0x84
90006284:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006286:	69fb      	ldr	r3, [r7, #28]
90006288:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000628a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000628c:	68bb      	ldr	r3, [r7, #8]
9000628e:	68da      	ldr	r2, [r3, #12]
90006290:	68fb      	ldr	r3, [r7, #12]
90006292:	681b      	ldr	r3, [r3, #0]
90006294:	68db      	ldr	r3, [r3, #12]
90006296:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000629a:	4413      	add	r3, r2
9000629c:	041b      	lsls	r3, r3, #16
9000629e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900062a0:	68fb      	ldr	r3, [r7, #12]
900062a2:	681b      	ldr	r3, [r3, #0]
900062a4:	461a      	mov	r2, r3
900062a6:	687b      	ldr	r3, [r7, #4]
900062a8:	01db      	lsls	r3, r3, #7
900062aa:	4413      	add	r3, r2
900062ac:	3384      	adds	r3, #132	@ 0x84
900062ae:	689b      	ldr	r3, [r3, #8]
900062b0:	68fa      	ldr	r2, [r7, #12]
900062b2:	6812      	ldr	r2, [r2, #0]
900062b4:	4611      	mov	r1, r2
900062b6:	687a      	ldr	r2, [r7, #4]
900062b8:	01d2      	lsls	r2, r2, #7
900062ba:	440a      	add	r2, r1
900062bc:	3284      	adds	r2, #132	@ 0x84
900062be:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900062c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900062c4:	68bb      	ldr	r3, [r7, #8]
900062c6:	689a      	ldr	r2, [r3, #8]
900062c8:	68fb      	ldr	r3, [r7, #12]
900062ca:	681b      	ldr	r3, [r3, #0]
900062cc:	68db      	ldr	r3, [r3, #12]
900062ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
900062d2:	4413      	add	r3, r2
900062d4:	1c5a      	adds	r2, r3, #1
900062d6:	68fb      	ldr	r3, [r7, #12]
900062d8:	681b      	ldr	r3, [r3, #0]
900062da:	4619      	mov	r1, r3
900062dc:	687b      	ldr	r3, [r7, #4]
900062de:	01db      	lsls	r3, r3, #7
900062e0:	440b      	add	r3, r1
900062e2:	3384      	adds	r3, #132	@ 0x84
900062e4:	4619      	mov	r1, r3
900062e6:	69fb      	ldr	r3, [r7, #28]
900062e8:	4313      	orrs	r3, r2
900062ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900062ec:	68fb      	ldr	r3, [r7, #12]
900062ee:	681b      	ldr	r3, [r3, #0]
900062f0:	461a      	mov	r2, r3
900062f2:	687b      	ldr	r3, [r7, #4]
900062f4:	01db      	lsls	r3, r3, #7
900062f6:	4413      	add	r3, r2
900062f8:	3384      	adds	r3, #132	@ 0x84
900062fa:	691b      	ldr	r3, [r3, #16]
900062fc:	68fa      	ldr	r2, [r7, #12]
900062fe:	6812      	ldr	r2, [r2, #0]
90006300:	4611      	mov	r1, r2
90006302:	687a      	ldr	r2, [r7, #4]
90006304:	01d2      	lsls	r2, r2, #7
90006306:	440a      	add	r2, r1
90006308:	3284      	adds	r2, #132	@ 0x84
9000630a:	f023 0307 	bic.w	r3, r3, #7
9000630e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90006310:	68fb      	ldr	r3, [r7, #12]
90006312:	681b      	ldr	r3, [r3, #0]
90006314:	461a      	mov	r2, r3
90006316:	687b      	ldr	r3, [r7, #4]
90006318:	01db      	lsls	r3, r3, #7
9000631a:	4413      	add	r3, r2
9000631c:	3384      	adds	r3, #132	@ 0x84
9000631e:	461a      	mov	r2, r3
90006320:	68bb      	ldr	r3, [r7, #8]
90006322:	691b      	ldr	r3, [r3, #16]
90006324:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90006326:	68bb      	ldr	r3, [r7, #8]
90006328:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
9000632c:	021b      	lsls	r3, r3, #8
9000632e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006330:	68bb      	ldr	r3, [r7, #8]
90006332:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90006336:	041b      	lsls	r3, r3, #16
90006338:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000633a:	68bb      	ldr	r3, [r7, #8]
9000633c:	699b      	ldr	r3, [r3, #24]
9000633e:	061b      	lsls	r3, r3, #24
90006340:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
90006342:	68bb      	ldr	r3, [r7, #8]
90006344:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90006348:	461a      	mov	r2, r3
9000634a:	69fb      	ldr	r3, [r7, #28]
9000634c:	431a      	orrs	r2, r3
9000634e:	69bb      	ldr	r3, [r7, #24]
90006350:	431a      	orrs	r2, r3
90006352:	68fb      	ldr	r3, [r7, #12]
90006354:	681b      	ldr	r3, [r3, #0]
90006356:	4619      	mov	r1, r3
90006358:	687b      	ldr	r3, [r7, #4]
9000635a:	01db      	lsls	r3, r3, #7
9000635c:	440b      	add	r3, r1
9000635e:	3384      	adds	r3, #132	@ 0x84
90006360:	4619      	mov	r1, r3
90006362:	697b      	ldr	r3, [r7, #20]
90006364:	4313      	orrs	r3, r2
90006366:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006368:	68fb      	ldr	r3, [r7, #12]
9000636a:	681b      	ldr	r3, [r3, #0]
9000636c:	461a      	mov	r2, r3
9000636e:	687b      	ldr	r3, [r7, #4]
90006370:	01db      	lsls	r3, r3, #7
90006372:	4413      	add	r3, r2
90006374:	3384      	adds	r3, #132	@ 0x84
90006376:	695b      	ldr	r3, [r3, #20]
90006378:	68fa      	ldr	r2, [r7, #12]
9000637a:	6812      	ldr	r2, [r2, #0]
9000637c:	4611      	mov	r1, r2
9000637e:	687a      	ldr	r2, [r7, #4]
90006380:	01d2      	lsls	r2, r2, #7
90006382:	440a      	add	r2, r1
90006384:	3284      	adds	r2, #132	@ 0x84
90006386:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
9000638a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000638c:	68fb      	ldr	r3, [r7, #12]
9000638e:	681b      	ldr	r3, [r3, #0]
90006390:	461a      	mov	r2, r3
90006392:	687b      	ldr	r3, [r7, #4]
90006394:	01db      	lsls	r3, r3, #7
90006396:	4413      	add	r3, r2
90006398:	3384      	adds	r3, #132	@ 0x84
9000639a:	461a      	mov	r2, r3
9000639c:	68bb      	ldr	r3, [r7, #8]
9000639e:	695b      	ldr	r3, [r3, #20]
900063a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900063a2:	68fb      	ldr	r3, [r7, #12]
900063a4:	681b      	ldr	r3, [r3, #0]
900063a6:	461a      	mov	r2, r3
900063a8:	687b      	ldr	r3, [r7, #4]
900063aa:	01db      	lsls	r3, r3, #7
900063ac:	4413      	add	r3, r2
900063ae:	3384      	adds	r3, #132	@ 0x84
900063b0:	69da      	ldr	r2, [r3, #28]
900063b2:	68fb      	ldr	r3, [r7, #12]
900063b4:	681b      	ldr	r3, [r3, #0]
900063b6:	4619      	mov	r1, r3
900063b8:	687b      	ldr	r3, [r7, #4]
900063ba:	01db      	lsls	r3, r3, #7
900063bc:	440b      	add	r3, r1
900063be:	3384      	adds	r3, #132	@ 0x84
900063c0:	4619      	mov	r1, r3
900063c2:	4b4f      	ldr	r3, [pc, #316]	@ (90006500 <LTDC_SetConfig+0x2e4>)
900063c4:	4013      	ands	r3, r2
900063c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900063c8:	68bb      	ldr	r3, [r7, #8]
900063ca:	69da      	ldr	r2, [r3, #28]
900063cc:	68bb      	ldr	r3, [r7, #8]
900063ce:	6a1b      	ldr	r3, [r3, #32]
900063d0:	68f9      	ldr	r1, [r7, #12]
900063d2:	6809      	ldr	r1, [r1, #0]
900063d4:	4608      	mov	r0, r1
900063d6:	6879      	ldr	r1, [r7, #4]
900063d8:	01c9      	lsls	r1, r1, #7
900063da:	4401      	add	r1, r0
900063dc:	3184      	adds	r1, #132	@ 0x84
900063de:	4313      	orrs	r3, r2
900063e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
900063e2:	68fb      	ldr	r3, [r7, #12]
900063e4:	681b      	ldr	r3, [r3, #0]
900063e6:	461a      	mov	r2, r3
900063e8:	687b      	ldr	r3, [r7, #4]
900063ea:	01db      	lsls	r3, r3, #7
900063ec:	4413      	add	r3, r2
900063ee:	3384      	adds	r3, #132	@ 0x84
900063f0:	461a      	mov	r2, r3
900063f2:	68bb      	ldr	r3, [r7, #8]
900063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900063f6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900063f8:	68bb      	ldr	r3, [r7, #8]
900063fa:	691b      	ldr	r3, [r3, #16]
900063fc:	2b00      	cmp	r3, #0
900063fe:	d102      	bne.n	90006406 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006400:	2304      	movs	r3, #4
90006402:	61fb      	str	r3, [r7, #28]
90006404:	e01b      	b.n	9000643e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006406:	68bb      	ldr	r3, [r7, #8]
90006408:	691b      	ldr	r3, [r3, #16]
9000640a:	2b01      	cmp	r3, #1
9000640c:	d102      	bne.n	90006414 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
9000640e:	2303      	movs	r3, #3
90006410:	61fb      	str	r3, [r7, #28]
90006412:	e014      	b.n	9000643e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006414:	68bb      	ldr	r3, [r7, #8]
90006416:	691b      	ldr	r3, [r3, #16]
90006418:	2b04      	cmp	r3, #4
9000641a:	d00b      	beq.n	90006434 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
9000641c:	68bb      	ldr	r3, [r7, #8]
9000641e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006420:	2b02      	cmp	r3, #2
90006422:	d007      	beq.n	90006434 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006424:	68bb      	ldr	r3, [r7, #8]
90006426:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006428:	2b03      	cmp	r3, #3
9000642a:	d003      	beq.n	90006434 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
9000642c:	68bb      	ldr	r3, [r7, #8]
9000642e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006430:	2b07      	cmp	r3, #7
90006432:	d102      	bne.n	9000643a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90006434:	2302      	movs	r3, #2
90006436:	61fb      	str	r3, [r7, #28]
90006438:	e001      	b.n	9000643e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
9000643a:	2301      	movs	r3, #1
9000643c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000643e:	68fb      	ldr	r3, [r7, #12]
90006440:	681b      	ldr	r3, [r3, #0]
90006442:	461a      	mov	r2, r3
90006444:	687b      	ldr	r3, [r7, #4]
90006446:	01db      	lsls	r3, r3, #7
90006448:	4413      	add	r3, r2
9000644a:	3384      	adds	r3, #132	@ 0x84
9000644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000644e:	68fa      	ldr	r2, [r7, #12]
90006450:	6812      	ldr	r2, [r2, #0]
90006452:	4611      	mov	r1, r2
90006454:	687a      	ldr	r2, [r7, #4]
90006456:	01d2      	lsls	r2, r2, #7
90006458:	440a      	add	r2, r1
9000645a:	3284      	adds	r2, #132	@ 0x84
9000645c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006460:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006462:	68bb      	ldr	r3, [r7, #8]
90006464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006466:	69fa      	ldr	r2, [r7, #28]
90006468:	fb02 f303 	mul.w	r3, r2, r3
9000646c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000646e:	68bb      	ldr	r3, [r7, #8]
90006470:	6859      	ldr	r1, [r3, #4]
90006472:	68bb      	ldr	r3, [r7, #8]
90006474:	681b      	ldr	r3, [r3, #0]
90006476:	1acb      	subs	r3, r1, r3
90006478:	69f9      	ldr	r1, [r7, #28]
9000647a:	fb01 f303 	mul.w	r3, r1, r3
9000647e:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006480:	68f9      	ldr	r1, [r7, #12]
90006482:	6809      	ldr	r1, [r1, #0]
90006484:	4608      	mov	r0, r1
90006486:	6879      	ldr	r1, [r7, #4]
90006488:	01c9      	lsls	r1, r1, #7
9000648a:	4401      	add	r1, r0
9000648c:	3184      	adds	r1, #132	@ 0x84
9000648e:	4313      	orrs	r3, r2
90006490:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90006492:	68fb      	ldr	r3, [r7, #12]
90006494:	681b      	ldr	r3, [r3, #0]
90006496:	461a      	mov	r2, r3
90006498:	687b      	ldr	r3, [r7, #4]
9000649a:	01db      	lsls	r3, r3, #7
9000649c:	4413      	add	r3, r2
9000649e:	3384      	adds	r3, #132	@ 0x84
900064a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900064a2:	68fb      	ldr	r3, [r7, #12]
900064a4:	681b      	ldr	r3, [r3, #0]
900064a6:	4619      	mov	r1, r3
900064a8:	687b      	ldr	r3, [r7, #4]
900064aa:	01db      	lsls	r3, r3, #7
900064ac:	440b      	add	r3, r1
900064ae:	3384      	adds	r3, #132	@ 0x84
900064b0:	4619      	mov	r1, r3
900064b2:	4b14      	ldr	r3, [pc, #80]	@ (90006504 <LTDC_SetConfig+0x2e8>)
900064b4:	4013      	ands	r3, r2
900064b6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900064b8:	68fb      	ldr	r3, [r7, #12]
900064ba:	681b      	ldr	r3, [r3, #0]
900064bc:	461a      	mov	r2, r3
900064be:	687b      	ldr	r3, [r7, #4]
900064c0:	01db      	lsls	r3, r3, #7
900064c2:	4413      	add	r3, r2
900064c4:	3384      	adds	r3, #132	@ 0x84
900064c6:	461a      	mov	r2, r3
900064c8:	68bb      	ldr	r3, [r7, #8]
900064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900064cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900064ce:	68fb      	ldr	r3, [r7, #12]
900064d0:	681b      	ldr	r3, [r3, #0]
900064d2:	461a      	mov	r2, r3
900064d4:	687b      	ldr	r3, [r7, #4]
900064d6:	01db      	lsls	r3, r3, #7
900064d8:	4413      	add	r3, r2
900064da:	3384      	adds	r3, #132	@ 0x84
900064dc:	681b      	ldr	r3, [r3, #0]
900064de:	68fa      	ldr	r2, [r7, #12]
900064e0:	6812      	ldr	r2, [r2, #0]
900064e2:	4611      	mov	r1, r2
900064e4:	687a      	ldr	r2, [r7, #4]
900064e6:	01d2      	lsls	r2, r2, #7
900064e8:	440a      	add	r2, r1
900064ea:	3284      	adds	r2, #132	@ 0x84
900064ec:	f043 0301 	orr.w	r3, r3, #1
900064f0:	6013      	str	r3, [r2, #0]
}
900064f2:	bf00      	nop
900064f4:	3724      	adds	r7, #36	@ 0x24
900064f6:	46bd      	mov	sp, r7
900064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900064fc:	4770      	bx	lr
900064fe:	bf00      	nop
90006500:	fffff8f8 	.word	0xfffff8f8
90006504:	fffff800 	.word	0xfffff800

90006508 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006508:	b580      	push	{r7, lr}
9000650a:	b084      	sub	sp, #16
9000650c:	af00      	add	r7, sp, #0
9000650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006510:	f7fc fc8e 	bl	90002e30 <HAL_GetTick>
90006514:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006516:	687b      	ldr	r3, [r7, #4]
90006518:	2b00      	cmp	r3, #0
9000651a:	d101      	bne.n	90006520 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
9000651c:	2301      	movs	r3, #1
9000651e:	e03b      	b.n	90006598 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006520:	687b      	ldr	r3, [r7, #4]
90006522:	2200      	movs	r2, #0
90006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006528:	687b      	ldr	r3, [r7, #4]
9000652a:	2202      	movs	r2, #2
9000652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006530:	687b      	ldr	r3, [r7, #4]
90006532:	681b      	ldr	r3, [r3, #0]
90006534:	68da      	ldr	r2, [r3, #12]
90006536:	687b      	ldr	r3, [r7, #4]
90006538:	681b      	ldr	r3, [r3, #0]
9000653a:	f022 0201 	bic.w	r2, r2, #1
9000653e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006540:	e00f      	b.n	90006562 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006542:	f7fc fc75 	bl	90002e30 <HAL_GetTick>
90006546:	4602      	mov	r2, r0
90006548:	68fb      	ldr	r3, [r7, #12]
9000654a:	1ad3      	subs	r3, r2, r3
9000654c:	2b05      	cmp	r3, #5
9000654e:	d908      	bls.n	90006562 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006550:	687b      	ldr	r3, [r7, #4]
90006552:	2240      	movs	r2, #64	@ 0x40
90006554:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006556:	687b      	ldr	r3, [r7, #4]
90006558:	2203      	movs	r2, #3
9000655a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
9000655e:	2301      	movs	r3, #1
90006560:	e01a      	b.n	90006598 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006562:	687b      	ldr	r3, [r7, #4]
90006564:	681b      	ldr	r3, [r3, #0]
90006566:	68db      	ldr	r3, [r3, #12]
90006568:	f003 0301 	and.w	r3, r3, #1
9000656c:	2b00      	cmp	r3, #0
9000656e:	d1e8      	bne.n	90006542 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006570:	6878      	ldr	r0, [r7, #4]
90006572:	f000 f86d 	bl	90006650 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006576:	687b      	ldr	r3, [r7, #4]
90006578:	2200      	movs	r2, #0
9000657a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
9000657c:	687b      	ldr	r3, [r7, #4]
9000657e:	2200      	movs	r2, #0
90006580:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006582:	687b      	ldr	r3, [r7, #4]
90006584:	2200      	movs	r2, #0
90006586:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006588:	687b      	ldr	r3, [r7, #4]
9000658a:	2200      	movs	r2, #0
9000658c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
9000658e:	687b      	ldr	r3, [r7, #4]
90006590:	2201      	movs	r2, #1
90006592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006596:	2300      	movs	r3, #0
}
90006598:	4618      	mov	r0, r3
9000659a:	3710      	adds	r7, #16
9000659c:	46bd      	mov	sp, r7
9000659e:	bd80      	pop	{r7, pc}

900065a0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
900065a0:	b480      	push	{r7}
900065a2:	b083      	sub	sp, #12
900065a4:	af00      	add	r7, sp, #0
900065a6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900065a8:	687b      	ldr	r3, [r7, #4]
900065aa:	2b00      	cmp	r3, #0
900065ac:	d101      	bne.n	900065b2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
900065ae:	2301      	movs	r3, #1
900065b0:	e048      	b.n	90006644 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
900065b2:	687b      	ldr	r3, [r7, #4]
900065b4:	681b      	ldr	r3, [r3, #0]
900065b6:	68da      	ldr	r2, [r3, #12]
900065b8:	687b      	ldr	r3, [r7, #4]
900065ba:	681b      	ldr	r3, [r3, #0]
900065bc:	f022 0201 	bic.w	r2, r2, #1
900065c0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
900065c2:	687b      	ldr	r3, [r7, #4]
900065c4:	681b      	ldr	r3, [r3, #0]
900065c6:	2200      	movs	r2, #0
900065c8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
900065ca:	687b      	ldr	r3, [r7, #4]
900065cc:	681b      	ldr	r3, [r3, #0]
900065ce:	2200      	movs	r2, #0
900065d0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
900065d2:	687b      	ldr	r3, [r7, #4]
900065d4:	681b      	ldr	r3, [r3, #0]
900065d6:	2200      	movs	r2, #0
900065d8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
900065da:	687b      	ldr	r3, [r7, #4]
900065dc:	681b      	ldr	r3, [r3, #0]
900065de:	2200      	movs	r2, #0
900065e0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
900065e2:	687b      	ldr	r3, [r7, #4]
900065e4:	681b      	ldr	r3, [r3, #0]
900065e6:	2200      	movs	r2, #0
900065e8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
900065ea:	687b      	ldr	r3, [r7, #4]
900065ec:	681b      	ldr	r3, [r3, #0]
900065ee:	2200      	movs	r2, #0
900065f0:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
900065f2:	687b      	ldr	r3, [r7, #4]
900065f4:	681b      	ldr	r3, [r3, #0]
900065f6:	2200      	movs	r2, #0
900065f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
900065fa:	687b      	ldr	r3, [r7, #4]
900065fc:	681b      	ldr	r3, [r3, #0]
900065fe:	2200      	movs	r2, #0
90006600:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006602:	687b      	ldr	r3, [r7, #4]
90006604:	681b      	ldr	r3, [r3, #0]
90006606:	2200      	movs	r2, #0
90006608:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
9000660a:	687b      	ldr	r3, [r7, #4]
9000660c:	681b      	ldr	r3, [r3, #0]
9000660e:	2200      	movs	r2, #0
90006610:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006612:	687b      	ldr	r3, [r7, #4]
90006614:	681b      	ldr	r3, [r3, #0]
90006616:	221f      	movs	r2, #31
90006618:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
9000661a:	687b      	ldr	r3, [r7, #4]
9000661c:	2200      	movs	r2, #0
9000661e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006620:	687b      	ldr	r3, [r7, #4]
90006622:	2200      	movs	r2, #0
90006624:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006626:	687b      	ldr	r3, [r7, #4]
90006628:	2200      	movs	r2, #0
9000662a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000662c:	687b      	ldr	r3, [r7, #4]
9000662e:	2200      	movs	r2, #0
90006630:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006632:	687b      	ldr	r3, [r7, #4]
90006634:	2200      	movs	r2, #0
90006636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
9000663a:	687b      	ldr	r3, [r7, #4]
9000663c:	2200      	movs	r2, #0
9000663e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006642:	2300      	movs	r3, #0
}
90006644:	4618      	mov	r0, r3
90006646:	370c      	adds	r7, #12
90006648:	46bd      	mov	sp, r7
9000664a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000664e:	4770      	bx	lr

90006650 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006650:	b480      	push	{r7}
90006652:	b085      	sub	sp, #20
90006654:	af00      	add	r7, sp, #0
90006656:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006658:	687b      	ldr	r3, [r7, #4]
9000665a:	68d9      	ldr	r1, [r3, #12]
9000665c:	687b      	ldr	r3, [r7, #4]
9000665e:	691a      	ldr	r2, [r3, #16]
90006660:	687b      	ldr	r3, [r7, #4]
90006662:	681b      	ldr	r3, [r3, #0]
90006664:	430a      	orrs	r2, r1
90006666:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006668:	687b      	ldr	r3, [r7, #4]
9000666a:	695a      	ldr	r2, [r3, #20]
9000666c:	687b      	ldr	r3, [r7, #4]
9000666e:	699b      	ldr	r3, [r3, #24]
90006670:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006672:	687b      	ldr	r3, [r7, #4]
90006674:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006676:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006678:	687b      	ldr	r3, [r7, #4]
9000667a:	6a1b      	ldr	r3, [r3, #32]
9000667c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000667e:	687b      	ldr	r3, [r7, #4]
90006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006682:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006684:	687b      	ldr	r3, [r7, #4]
90006686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006688:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
9000668a:	687b      	ldr	r3, [r7, #4]
9000668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000668e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006690:	687b      	ldr	r3, [r7, #4]
90006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006694:	3b01      	subs	r3, #1
90006696:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006698:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
9000669c:	687b      	ldr	r3, [r7, #4]
9000669e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900066a0:	687b      	ldr	r3, [r7, #4]
900066a2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
900066a4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900066a6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
900066a8:	687b      	ldr	r3, [r7, #4]
900066aa:	685b      	ldr	r3, [r3, #4]
900066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900066b0:	d107      	bne.n	900066c2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
900066b2:	687b      	ldr	r3, [r7, #4]
900066b4:	681b      	ldr	r3, [r3, #0]
900066b6:	691a      	ldr	r2, [r3, #16]
900066b8:	687b      	ldr	r3, [r7, #4]
900066ba:	681b      	ldr	r3, [r3, #0]
900066bc:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
900066c0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
900066c2:	687b      	ldr	r3, [r7, #4]
900066c4:	681b      	ldr	r3, [r3, #0]
900066c6:	2200      	movs	r2, #0
900066c8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
900066ca:	687b      	ldr	r3, [r7, #4]
900066cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900066ce:	2b00      	cmp	r3, #0
900066d0:	da11      	bge.n	900066f6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
900066d2:	687b      	ldr	r3, [r7, #4]
900066d4:	681b      	ldr	r3, [r3, #0]
900066d6:	695a      	ldr	r2, [r3, #20]
900066d8:	687b      	ldr	r3, [r7, #4]
900066da:	681b      	ldr	r3, [r3, #0]
900066dc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
900066e0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
900066e2:	687b      	ldr	r3, [r7, #4]
900066e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900066e6:	425b      	negs	r3, r3
900066e8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
900066ea:	687b      	ldr	r3, [r7, #4]
900066ec:	681b      	ldr	r3, [r3, #0]
900066ee:	68fa      	ldr	r2, [r7, #12]
900066f0:	b292      	uxth	r2, r2
900066f2:	621a      	str	r2, [r3, #32]
900066f4:	e006      	b.n	90006704 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
900066f6:	687b      	ldr	r3, [r7, #4]
900066f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900066fa:	461a      	mov	r2, r3
900066fc:	687b      	ldr	r3, [r7, #4]
900066fe:	681b      	ldr	r3, [r3, #0]
90006700:	b292      	uxth	r2, r2
90006702:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006704:	687b      	ldr	r3, [r7, #4]
90006706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006708:	2b00      	cmp	r3, #0
9000670a:	da15      	bge.n	90006738 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000670c:	687b      	ldr	r3, [r7, #4]
9000670e:	681b      	ldr	r3, [r3, #0]
90006710:	695a      	ldr	r2, [r3, #20]
90006712:	687b      	ldr	r3, [r7, #4]
90006714:	681b      	ldr	r3, [r3, #0]
90006716:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
9000671a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000671c:	687b      	ldr	r3, [r7, #4]
9000671e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006720:	425b      	negs	r3, r3
90006722:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006724:	687b      	ldr	r3, [r7, #4]
90006726:	681b      	ldr	r3, [r3, #0]
90006728:	6a19      	ldr	r1, [r3, #32]
9000672a:	68fb      	ldr	r3, [r7, #12]
9000672c:	041a      	lsls	r2, r3, #16
9000672e:	687b      	ldr	r3, [r7, #4]
90006730:	681b      	ldr	r3, [r3, #0]
90006732:	430a      	orrs	r2, r1
90006734:	621a      	str	r2, [r3, #32]
90006736:	e009      	b.n	9000674c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006738:	687b      	ldr	r3, [r7, #4]
9000673a:	681b      	ldr	r3, [r3, #0]
9000673c:	6a19      	ldr	r1, [r3, #32]
9000673e:	687b      	ldr	r3, [r7, #4]
90006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006742:	041a      	lsls	r2, r3, #16
90006744:	687b      	ldr	r3, [r7, #4]
90006746:	681b      	ldr	r3, [r3, #0]
90006748:	430a      	orrs	r2, r1
9000674a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000674c:	687b      	ldr	r3, [r7, #4]
9000674e:	685b      	ldr	r3, [r3, #4]
90006750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006754:	d006      	beq.n	90006764 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006756:	687b      	ldr	r3, [r7, #4]
90006758:	685a      	ldr	r2, [r3, #4]
9000675a:	687b      	ldr	r3, [r7, #4]
9000675c:	681b      	ldr	r3, [r3, #0]
9000675e:	b2d2      	uxtb	r2, r2
90006760:	629a      	str	r2, [r3, #40]	@ 0x28
90006762:	e003      	b.n	9000676c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006764:	687b      	ldr	r3, [r7, #4]
90006766:	681b      	ldr	r3, [r3, #0]
90006768:	2200      	movs	r2, #0
9000676a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000676c:	687b      	ldr	r3, [r7, #4]
9000676e:	681b      	ldr	r3, [r3, #0]
90006770:	2200      	movs	r2, #0
90006772:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006774:	bf00      	nop
90006776:	3714      	adds	r7, #20
90006778:	46bd      	mov	sp, r7
9000677a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000677e:	4770      	bx	lr

90006780 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006780:	b580      	push	{r7, lr}
90006782:	b08c      	sub	sp, #48	@ 0x30
90006784:	af00      	add	r7, sp, #0
90006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006788:	687b      	ldr	r3, [r7, #4]
9000678a:	2b00      	cmp	r3, #0
9000678c:	d102      	bne.n	90006794 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
9000678e:	2301      	movs	r3, #1
90006790:	f000 bc48 	b.w	90007024 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006794:	687b      	ldr	r3, [r7, #4]
90006796:	681b      	ldr	r3, [r3, #0]
90006798:	f003 0301 	and.w	r3, r3, #1
9000679c:	2b00      	cmp	r3, #0
9000679e:	f000 8088 	beq.w	900068b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900067a2:	4b99      	ldr	r3, [pc, #612]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900067a4:	691b      	ldr	r3, [r3, #16]
900067a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900067ac:	4b96      	ldr	r3, [pc, #600]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900067b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
900067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900067b4:	2b10      	cmp	r3, #16
900067b6:	d007      	beq.n	900067c8 <HAL_RCC_OscConfig+0x48>
900067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900067ba:	2b18      	cmp	r3, #24
900067bc:	d111      	bne.n	900067e2 <HAL_RCC_OscConfig+0x62>
900067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900067c0:	f003 0303 	and.w	r3, r3, #3
900067c4:	2b02      	cmp	r3, #2
900067c6:	d10c      	bne.n	900067e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900067c8:	4b8f      	ldr	r3, [pc, #572]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900067ca:	681b      	ldr	r3, [r3, #0]
900067cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900067d0:	2b00      	cmp	r3, #0
900067d2:	d06d      	beq.n	900068b0 <HAL_RCC_OscConfig+0x130>
900067d4:	687b      	ldr	r3, [r7, #4]
900067d6:	685b      	ldr	r3, [r3, #4]
900067d8:	2b00      	cmp	r3, #0
900067da:	d169      	bne.n	900068b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
900067dc:	2301      	movs	r3, #1
900067de:	f000 bc21 	b.w	90007024 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900067e2:	687b      	ldr	r3, [r7, #4]
900067e4:	685b      	ldr	r3, [r3, #4]
900067e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900067ea:	d106      	bne.n	900067fa <HAL_RCC_OscConfig+0x7a>
900067ec:	4b86      	ldr	r3, [pc, #536]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900067ee:	681b      	ldr	r3, [r3, #0]
900067f0:	4a85      	ldr	r2, [pc, #532]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900067f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900067f6:	6013      	str	r3, [r2, #0]
900067f8:	e02e      	b.n	90006858 <HAL_RCC_OscConfig+0xd8>
900067fa:	687b      	ldr	r3, [r7, #4]
900067fc:	685b      	ldr	r3, [r3, #4]
900067fe:	2b00      	cmp	r3, #0
90006800:	d10c      	bne.n	9000681c <HAL_RCC_OscConfig+0x9c>
90006802:	4b81      	ldr	r3, [pc, #516]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006804:	681b      	ldr	r3, [r3, #0]
90006806:	4a80      	ldr	r2, [pc, #512]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000680c:	6013      	str	r3, [r2, #0]
9000680e:	4b7e      	ldr	r3, [pc, #504]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006810:	681b      	ldr	r3, [r3, #0]
90006812:	4a7d      	ldr	r2, [pc, #500]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006818:	6013      	str	r3, [r2, #0]
9000681a:	e01d      	b.n	90006858 <HAL_RCC_OscConfig+0xd8>
9000681c:	687b      	ldr	r3, [r7, #4]
9000681e:	685b      	ldr	r3, [r3, #4]
90006820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006824:	d10c      	bne.n	90006840 <HAL_RCC_OscConfig+0xc0>
90006826:	4b78      	ldr	r3, [pc, #480]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006828:	681b      	ldr	r3, [r3, #0]
9000682a:	4a77      	ldr	r2, [pc, #476]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
9000682c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006830:	6013      	str	r3, [r2, #0]
90006832:	4b75      	ldr	r3, [pc, #468]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006834:	681b      	ldr	r3, [r3, #0]
90006836:	4a74      	ldr	r2, [pc, #464]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000683c:	6013      	str	r3, [r2, #0]
9000683e:	e00b      	b.n	90006858 <HAL_RCC_OscConfig+0xd8>
90006840:	4b71      	ldr	r3, [pc, #452]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006842:	681b      	ldr	r3, [r3, #0]
90006844:	4a70      	ldr	r2, [pc, #448]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000684a:	6013      	str	r3, [r2, #0]
9000684c:	4b6e      	ldr	r3, [pc, #440]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
9000684e:	681b      	ldr	r3, [r3, #0]
90006850:	4a6d      	ldr	r2, [pc, #436]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006858:	687b      	ldr	r3, [r7, #4]
9000685a:	685b      	ldr	r3, [r3, #4]
9000685c:	2b00      	cmp	r3, #0
9000685e:	d013      	beq.n	90006888 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006860:	f7fc fae6 	bl	90002e30 <HAL_GetTick>
90006864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006866:	e008      	b.n	9000687a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006868:	f7fc fae2 	bl	90002e30 <HAL_GetTick>
9000686c:	4602      	mov	r2, r0
9000686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006870:	1ad3      	subs	r3, r2, r3
90006872:	2b64      	cmp	r3, #100	@ 0x64
90006874:	d901      	bls.n	9000687a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006876:	2303      	movs	r3, #3
90006878:	e3d4      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000687a:	4b63      	ldr	r3, [pc, #396]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
9000687c:	681b      	ldr	r3, [r3, #0]
9000687e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006882:	2b00      	cmp	r3, #0
90006884:	d0f0      	beq.n	90006868 <HAL_RCC_OscConfig+0xe8>
90006886:	e014      	b.n	900068b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006888:	f7fc fad2 	bl	90002e30 <HAL_GetTick>
9000688c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000688e:	e008      	b.n	900068a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006890:	f7fc face 	bl	90002e30 <HAL_GetTick>
90006894:	4602      	mov	r2, r0
90006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006898:	1ad3      	subs	r3, r2, r3
9000689a:	2b64      	cmp	r3, #100	@ 0x64
9000689c:	d901      	bls.n	900068a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
9000689e:	2303      	movs	r3, #3
900068a0:	e3c0      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900068a2:	4b59      	ldr	r3, [pc, #356]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900068a4:	681b      	ldr	r3, [r3, #0]
900068a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900068aa:	2b00      	cmp	r3, #0
900068ac:	d1f0      	bne.n	90006890 <HAL_RCC_OscConfig+0x110>
900068ae:	e000      	b.n	900068b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900068b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900068b2:	687b      	ldr	r3, [r7, #4]
900068b4:	681b      	ldr	r3, [r3, #0]
900068b6:	f003 0302 	and.w	r3, r3, #2
900068ba:	2b00      	cmp	r3, #0
900068bc:	f000 80ca 	beq.w	90006a54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900068c0:	4b51      	ldr	r3, [pc, #324]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900068c2:	691b      	ldr	r3, [r3, #16]
900068c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900068c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900068ca:	4b4f      	ldr	r3, [pc, #316]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900068ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
900068d0:	6a3b      	ldr	r3, [r7, #32]
900068d2:	2b00      	cmp	r3, #0
900068d4:	d007      	beq.n	900068e6 <HAL_RCC_OscConfig+0x166>
900068d6:	6a3b      	ldr	r3, [r7, #32]
900068d8:	2b18      	cmp	r3, #24
900068da:	d156      	bne.n	9000698a <HAL_RCC_OscConfig+0x20a>
900068dc:	69fb      	ldr	r3, [r7, #28]
900068de:	f003 0303 	and.w	r3, r3, #3
900068e2:	2b00      	cmp	r3, #0
900068e4:	d151      	bne.n	9000698a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900068e6:	4b48      	ldr	r3, [pc, #288]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900068e8:	681b      	ldr	r3, [r3, #0]
900068ea:	f003 0304 	and.w	r3, r3, #4
900068ee:	2b00      	cmp	r3, #0
900068f0:	d005      	beq.n	900068fe <HAL_RCC_OscConfig+0x17e>
900068f2:	687b      	ldr	r3, [r7, #4]
900068f4:	68db      	ldr	r3, [r3, #12]
900068f6:	2b00      	cmp	r3, #0
900068f8:	d101      	bne.n	900068fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
900068fa:	2301      	movs	r3, #1
900068fc:	e392      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900068fe:	4b42      	ldr	r3, [pc, #264]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006900:	681b      	ldr	r3, [r3, #0]
90006902:	f023 0219 	bic.w	r2, r3, #25
90006906:	687b      	ldr	r3, [r7, #4]
90006908:	68db      	ldr	r3, [r3, #12]
9000690a:	493f      	ldr	r1, [pc, #252]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
9000690c:	4313      	orrs	r3, r2
9000690e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006910:	f7fc fa8e 	bl	90002e30 <HAL_GetTick>
90006914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006916:	e008      	b.n	9000692a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006918:	f7fc fa8a 	bl	90002e30 <HAL_GetTick>
9000691c:	4602      	mov	r2, r0
9000691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006920:	1ad3      	subs	r3, r2, r3
90006922:	2b02      	cmp	r3, #2
90006924:	d901      	bls.n	9000692a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006926:	2303      	movs	r3, #3
90006928:	e37c      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000692a:	4b37      	ldr	r3, [pc, #220]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
9000692c:	681b      	ldr	r3, [r3, #0]
9000692e:	f003 0304 	and.w	r3, r3, #4
90006932:	2b00      	cmp	r3, #0
90006934:	d0f0      	beq.n	90006918 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006936:	f7fc faab 	bl	90002e90 <HAL_GetREVID>
9000693a:	4603      	mov	r3, r0
9000693c:	f241 0203 	movw	r2, #4099	@ 0x1003
90006940:	4293      	cmp	r3, r2
90006942:	d817      	bhi.n	90006974 <HAL_RCC_OscConfig+0x1f4>
90006944:	687b      	ldr	r3, [r7, #4]
90006946:	691b      	ldr	r3, [r3, #16]
90006948:	2b40      	cmp	r3, #64	@ 0x40
9000694a:	d108      	bne.n	9000695e <HAL_RCC_OscConfig+0x1de>
9000694c:	4b2e      	ldr	r3, [pc, #184]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
9000694e:	685b      	ldr	r3, [r3, #4]
90006950:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006954:	4a2c      	ldr	r2, [pc, #176]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000695a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000695c:	e07a      	b.n	90006a54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000695e:	4b2a      	ldr	r3, [pc, #168]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006960:	685b      	ldr	r3, [r3, #4]
90006962:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006966:	687b      	ldr	r3, [r7, #4]
90006968:	691b      	ldr	r3, [r3, #16]
9000696a:	031b      	lsls	r3, r3, #12
9000696c:	4926      	ldr	r1, [pc, #152]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
9000696e:	4313      	orrs	r3, r2
90006970:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006972:	e06f      	b.n	90006a54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006974:	4b24      	ldr	r3, [pc, #144]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006976:	685b      	ldr	r3, [r3, #4]
90006978:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
9000697c:	687b      	ldr	r3, [r7, #4]
9000697e:	691b      	ldr	r3, [r3, #16]
90006980:	061b      	lsls	r3, r3, #24
90006982:	4921      	ldr	r1, [pc, #132]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006984:	4313      	orrs	r3, r2
90006986:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006988:	e064      	b.n	90006a54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000698a:	687b      	ldr	r3, [r7, #4]
9000698c:	68db      	ldr	r3, [r3, #12]
9000698e:	2b00      	cmp	r3, #0
90006990:	d047      	beq.n	90006a22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006992:	4b1d      	ldr	r3, [pc, #116]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006994:	681b      	ldr	r3, [r3, #0]
90006996:	f023 0219 	bic.w	r2, r3, #25
9000699a:	687b      	ldr	r3, [r7, #4]
9000699c:	68db      	ldr	r3, [r3, #12]
9000699e:	491a      	ldr	r1, [pc, #104]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900069a0:	4313      	orrs	r3, r2
900069a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900069a4:	f7fc fa44 	bl	90002e30 <HAL_GetTick>
900069a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900069aa:	e008      	b.n	900069be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900069ac:	f7fc fa40 	bl	90002e30 <HAL_GetTick>
900069b0:	4602      	mov	r2, r0
900069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900069b4:	1ad3      	subs	r3, r2, r3
900069b6:	2b02      	cmp	r3, #2
900069b8:	d901      	bls.n	900069be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
900069ba:	2303      	movs	r3, #3
900069bc:	e332      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900069be:	4b12      	ldr	r3, [pc, #72]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900069c0:	681b      	ldr	r3, [r3, #0]
900069c2:	f003 0304 	and.w	r3, r3, #4
900069c6:	2b00      	cmp	r3, #0
900069c8:	d0f0      	beq.n	900069ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900069ca:	f7fc fa61 	bl	90002e90 <HAL_GetREVID>
900069ce:	4603      	mov	r3, r0
900069d0:	f241 0203 	movw	r2, #4099	@ 0x1003
900069d4:	4293      	cmp	r3, r2
900069d6:	d819      	bhi.n	90006a0c <HAL_RCC_OscConfig+0x28c>
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	691b      	ldr	r3, [r3, #16]
900069dc:	2b40      	cmp	r3, #64	@ 0x40
900069de:	d108      	bne.n	900069f2 <HAL_RCC_OscConfig+0x272>
900069e0:	4b09      	ldr	r3, [pc, #36]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900069e2:	685b      	ldr	r3, [r3, #4]
900069e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
900069e8:	4a07      	ldr	r2, [pc, #28]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900069ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900069ee:	6053      	str	r3, [r2, #4]
900069f0:	e030      	b.n	90006a54 <HAL_RCC_OscConfig+0x2d4>
900069f2:	4b05      	ldr	r3, [pc, #20]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
900069f4:	685b      	ldr	r3, [r3, #4]
900069f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900069fa:	687b      	ldr	r3, [r7, #4]
900069fc:	691b      	ldr	r3, [r3, #16]
900069fe:	031b      	lsls	r3, r3, #12
90006a00:	4901      	ldr	r1, [pc, #4]	@ (90006a08 <HAL_RCC_OscConfig+0x288>)
90006a02:	4313      	orrs	r3, r2
90006a04:	604b      	str	r3, [r1, #4]
90006a06:	e025      	b.n	90006a54 <HAL_RCC_OscConfig+0x2d4>
90006a08:	58024400 	.word	0x58024400
90006a0c:	4b9a      	ldr	r3, [pc, #616]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a0e:	685b      	ldr	r3, [r3, #4]
90006a10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006a14:	687b      	ldr	r3, [r7, #4]
90006a16:	691b      	ldr	r3, [r3, #16]
90006a18:	061b      	lsls	r3, r3, #24
90006a1a:	4997      	ldr	r1, [pc, #604]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a1c:	4313      	orrs	r3, r2
90006a1e:	604b      	str	r3, [r1, #4]
90006a20:	e018      	b.n	90006a54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006a22:	4b95      	ldr	r3, [pc, #596]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a24:	681b      	ldr	r3, [r3, #0]
90006a26:	4a94      	ldr	r2, [pc, #592]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a28:	f023 0301 	bic.w	r3, r3, #1
90006a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006a2e:	f7fc f9ff 	bl	90002e30 <HAL_GetTick>
90006a32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006a34:	e008      	b.n	90006a48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006a36:	f7fc f9fb 	bl	90002e30 <HAL_GetTick>
90006a3a:	4602      	mov	r2, r0
90006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006a3e:	1ad3      	subs	r3, r2, r3
90006a40:	2b02      	cmp	r3, #2
90006a42:	d901      	bls.n	90006a48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006a44:	2303      	movs	r3, #3
90006a46:	e2ed      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006a48:	4b8b      	ldr	r3, [pc, #556]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a4a:	681b      	ldr	r3, [r3, #0]
90006a4c:	f003 0304 	and.w	r3, r3, #4
90006a50:	2b00      	cmp	r3, #0
90006a52:	d1f0      	bne.n	90006a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006a54:	687b      	ldr	r3, [r7, #4]
90006a56:	681b      	ldr	r3, [r3, #0]
90006a58:	f003 0310 	and.w	r3, r3, #16
90006a5c:	2b00      	cmp	r3, #0
90006a5e:	f000 80a9 	beq.w	90006bb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006a62:	4b85      	ldr	r3, [pc, #532]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a64:	691b      	ldr	r3, [r3, #16]
90006a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006a6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006a6c:	4b82      	ldr	r3, [pc, #520]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006a70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006a72:	69bb      	ldr	r3, [r7, #24]
90006a74:	2b08      	cmp	r3, #8
90006a76:	d007      	beq.n	90006a88 <HAL_RCC_OscConfig+0x308>
90006a78:	69bb      	ldr	r3, [r7, #24]
90006a7a:	2b18      	cmp	r3, #24
90006a7c:	d13a      	bne.n	90006af4 <HAL_RCC_OscConfig+0x374>
90006a7e:	697b      	ldr	r3, [r7, #20]
90006a80:	f003 0303 	and.w	r3, r3, #3
90006a84:	2b01      	cmp	r3, #1
90006a86:	d135      	bne.n	90006af4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006a88:	4b7b      	ldr	r3, [pc, #492]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006a8a:	681b      	ldr	r3, [r3, #0]
90006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006a90:	2b00      	cmp	r3, #0
90006a92:	d005      	beq.n	90006aa0 <HAL_RCC_OscConfig+0x320>
90006a94:	687b      	ldr	r3, [r7, #4]
90006a96:	69db      	ldr	r3, [r3, #28]
90006a98:	2b80      	cmp	r3, #128	@ 0x80
90006a9a:	d001      	beq.n	90006aa0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006a9c:	2301      	movs	r3, #1
90006a9e:	e2c1      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006aa0:	f7fc f9f6 	bl	90002e90 <HAL_GetREVID>
90006aa4:	4603      	mov	r3, r0
90006aa6:	f241 0203 	movw	r2, #4099	@ 0x1003
90006aaa:	4293      	cmp	r3, r2
90006aac:	d817      	bhi.n	90006ade <HAL_RCC_OscConfig+0x35e>
90006aae:	687b      	ldr	r3, [r7, #4]
90006ab0:	6a1b      	ldr	r3, [r3, #32]
90006ab2:	2b20      	cmp	r3, #32
90006ab4:	d108      	bne.n	90006ac8 <HAL_RCC_OscConfig+0x348>
90006ab6:	4b70      	ldr	r3, [pc, #448]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006ab8:	685b      	ldr	r3, [r3, #4]
90006aba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006abe:	4a6e      	ldr	r2, [pc, #440]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006ac4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006ac6:	e075      	b.n	90006bb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006ac8:	4b6b      	ldr	r3, [pc, #428]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006aca:	685b      	ldr	r3, [r3, #4]
90006acc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006ad0:	687b      	ldr	r3, [r7, #4]
90006ad2:	6a1b      	ldr	r3, [r3, #32]
90006ad4:	069b      	lsls	r3, r3, #26
90006ad6:	4968      	ldr	r1, [pc, #416]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006ad8:	4313      	orrs	r3, r2
90006ada:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006adc:	e06a      	b.n	90006bb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006ade:	4b66      	ldr	r3, [pc, #408]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006ae0:	68db      	ldr	r3, [r3, #12]
90006ae2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006ae6:	687b      	ldr	r3, [r7, #4]
90006ae8:	6a1b      	ldr	r3, [r3, #32]
90006aea:	061b      	lsls	r3, r3, #24
90006aec:	4962      	ldr	r1, [pc, #392]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006aee:	4313      	orrs	r3, r2
90006af0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006af2:	e05f      	b.n	90006bb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006af4:	687b      	ldr	r3, [r7, #4]
90006af6:	69db      	ldr	r3, [r3, #28]
90006af8:	2b00      	cmp	r3, #0
90006afa:	d042      	beq.n	90006b82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006afc:	4b5e      	ldr	r3, [pc, #376]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006afe:	681b      	ldr	r3, [r3, #0]
90006b00:	4a5d      	ldr	r2, [pc, #372]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006b08:	f7fc f992 	bl	90002e30 <HAL_GetTick>
90006b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006b0e:	e008      	b.n	90006b22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006b10:	f7fc f98e 	bl	90002e30 <HAL_GetTick>
90006b14:	4602      	mov	r2, r0
90006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006b18:	1ad3      	subs	r3, r2, r3
90006b1a:	2b02      	cmp	r3, #2
90006b1c:	d901      	bls.n	90006b22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006b1e:	2303      	movs	r3, #3
90006b20:	e280      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006b22:	4b55      	ldr	r3, [pc, #340]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b24:	681b      	ldr	r3, [r3, #0]
90006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006b2a:	2b00      	cmp	r3, #0
90006b2c:	d0f0      	beq.n	90006b10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006b2e:	f7fc f9af 	bl	90002e90 <HAL_GetREVID>
90006b32:	4603      	mov	r3, r0
90006b34:	f241 0203 	movw	r2, #4099	@ 0x1003
90006b38:	4293      	cmp	r3, r2
90006b3a:	d817      	bhi.n	90006b6c <HAL_RCC_OscConfig+0x3ec>
90006b3c:	687b      	ldr	r3, [r7, #4]
90006b3e:	6a1b      	ldr	r3, [r3, #32]
90006b40:	2b20      	cmp	r3, #32
90006b42:	d108      	bne.n	90006b56 <HAL_RCC_OscConfig+0x3d6>
90006b44:	4b4c      	ldr	r3, [pc, #304]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b46:	685b      	ldr	r3, [r3, #4]
90006b48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006b4c:	4a4a      	ldr	r2, [pc, #296]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006b52:	6053      	str	r3, [r2, #4]
90006b54:	e02e      	b.n	90006bb4 <HAL_RCC_OscConfig+0x434>
90006b56:	4b48      	ldr	r3, [pc, #288]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b58:	685b      	ldr	r3, [r3, #4]
90006b5a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006b5e:	687b      	ldr	r3, [r7, #4]
90006b60:	6a1b      	ldr	r3, [r3, #32]
90006b62:	069b      	lsls	r3, r3, #26
90006b64:	4944      	ldr	r1, [pc, #272]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b66:	4313      	orrs	r3, r2
90006b68:	604b      	str	r3, [r1, #4]
90006b6a:	e023      	b.n	90006bb4 <HAL_RCC_OscConfig+0x434>
90006b6c:	4b42      	ldr	r3, [pc, #264]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b6e:	68db      	ldr	r3, [r3, #12]
90006b70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006b74:	687b      	ldr	r3, [r7, #4]
90006b76:	6a1b      	ldr	r3, [r3, #32]
90006b78:	061b      	lsls	r3, r3, #24
90006b7a:	493f      	ldr	r1, [pc, #252]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b7c:	4313      	orrs	r3, r2
90006b7e:	60cb      	str	r3, [r1, #12]
90006b80:	e018      	b.n	90006bb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90006b82:	4b3d      	ldr	r3, [pc, #244]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b84:	681b      	ldr	r3, [r3, #0]
90006b86:	4a3c      	ldr	r2, [pc, #240]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90006b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006b8e:	f7fc f94f 	bl	90002e30 <HAL_GetTick>
90006b92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006b94:	e008      	b.n	90006ba8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006b96:	f7fc f94b 	bl	90002e30 <HAL_GetTick>
90006b9a:	4602      	mov	r2, r0
90006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006b9e:	1ad3      	subs	r3, r2, r3
90006ba0:	2b02      	cmp	r3, #2
90006ba2:	d901      	bls.n	90006ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90006ba4:	2303      	movs	r3, #3
90006ba6:	e23d      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006ba8:	4b33      	ldr	r3, [pc, #204]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006baa:	681b      	ldr	r3, [r3, #0]
90006bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006bb0:	2b00      	cmp	r3, #0
90006bb2:	d1f0      	bne.n	90006b96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90006bb4:	687b      	ldr	r3, [r7, #4]
90006bb6:	681b      	ldr	r3, [r3, #0]
90006bb8:	f003 0308 	and.w	r3, r3, #8
90006bbc:	2b00      	cmp	r3, #0
90006bbe:	d036      	beq.n	90006c2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90006bc0:	687b      	ldr	r3, [r7, #4]
90006bc2:	695b      	ldr	r3, [r3, #20]
90006bc4:	2b00      	cmp	r3, #0
90006bc6:	d019      	beq.n	90006bfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90006bc8:	4b2b      	ldr	r3, [pc, #172]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006bcc:	4a2a      	ldr	r2, [pc, #168]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006bce:	f043 0301 	orr.w	r3, r3, #1
90006bd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006bd4:	f7fc f92c 	bl	90002e30 <HAL_GetTick>
90006bd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006bda:	e008      	b.n	90006bee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006bdc:	f7fc f928 	bl	90002e30 <HAL_GetTick>
90006be0:	4602      	mov	r2, r0
90006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006be4:	1ad3      	subs	r3, r2, r3
90006be6:	2b02      	cmp	r3, #2
90006be8:	d901      	bls.n	90006bee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90006bea:	2303      	movs	r3, #3
90006bec:	e21a      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006bee:	4b22      	ldr	r3, [pc, #136]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006bf2:	f003 0302 	and.w	r3, r3, #2
90006bf6:	2b00      	cmp	r3, #0
90006bf8:	d0f0      	beq.n	90006bdc <HAL_RCC_OscConfig+0x45c>
90006bfa:	e018      	b.n	90006c2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90006bfc:	4b1e      	ldr	r3, [pc, #120]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006c00:	4a1d      	ldr	r2, [pc, #116]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006c02:	f023 0301 	bic.w	r3, r3, #1
90006c06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006c08:	f7fc f912 	bl	90002e30 <HAL_GetTick>
90006c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006c0e:	e008      	b.n	90006c22 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006c10:	f7fc f90e 	bl	90002e30 <HAL_GetTick>
90006c14:	4602      	mov	r2, r0
90006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c18:	1ad3      	subs	r3, r2, r3
90006c1a:	2b02      	cmp	r3, #2
90006c1c:	d901      	bls.n	90006c22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90006c1e:	2303      	movs	r3, #3
90006c20:	e200      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006c22:	4b15      	ldr	r3, [pc, #84]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006c26:	f003 0302 	and.w	r3, r3, #2
90006c2a:	2b00      	cmp	r3, #0
90006c2c:	d1f0      	bne.n	90006c10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90006c2e:	687b      	ldr	r3, [r7, #4]
90006c30:	681b      	ldr	r3, [r3, #0]
90006c32:	f003 0320 	and.w	r3, r3, #32
90006c36:	2b00      	cmp	r3, #0
90006c38:	d039      	beq.n	90006cae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90006c3a:	687b      	ldr	r3, [r7, #4]
90006c3c:	699b      	ldr	r3, [r3, #24]
90006c3e:	2b00      	cmp	r3, #0
90006c40:	d01c      	beq.n	90006c7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90006c42:	4b0d      	ldr	r3, [pc, #52]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006c44:	681b      	ldr	r3, [r3, #0]
90006c46:	4a0c      	ldr	r2, [pc, #48]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006c48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90006c4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90006c4e:	f7fc f8ef 	bl	90002e30 <HAL_GetTick>
90006c52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90006c54:	e008      	b.n	90006c68 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90006c56:	f7fc f8eb 	bl	90002e30 <HAL_GetTick>
90006c5a:	4602      	mov	r2, r0
90006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c5e:	1ad3      	subs	r3, r2, r3
90006c60:	2b02      	cmp	r3, #2
90006c62:	d901      	bls.n	90006c68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90006c64:	2303      	movs	r3, #3
90006c66:	e1dd      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90006c68:	4b03      	ldr	r3, [pc, #12]	@ (90006c78 <HAL_RCC_OscConfig+0x4f8>)
90006c6a:	681b      	ldr	r3, [r3, #0]
90006c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90006c70:	2b00      	cmp	r3, #0
90006c72:	d0f0      	beq.n	90006c56 <HAL_RCC_OscConfig+0x4d6>
90006c74:	e01b      	b.n	90006cae <HAL_RCC_OscConfig+0x52e>
90006c76:	bf00      	nop
90006c78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90006c7c:	4b9b      	ldr	r3, [pc, #620]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006c7e:	681b      	ldr	r3, [r3, #0]
90006c80:	4a9a      	ldr	r2, [pc, #616]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006c82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90006c86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90006c88:	f7fc f8d2 	bl	90002e30 <HAL_GetTick>
90006c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90006c8e:	e008      	b.n	90006ca2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90006c90:	f7fc f8ce 	bl	90002e30 <HAL_GetTick>
90006c94:	4602      	mov	r2, r0
90006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c98:	1ad3      	subs	r3, r2, r3
90006c9a:	2b02      	cmp	r3, #2
90006c9c:	d901      	bls.n	90006ca2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90006c9e:	2303      	movs	r3, #3
90006ca0:	e1c0      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90006ca2:	4b92      	ldr	r3, [pc, #584]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ca4:	681b      	ldr	r3, [r3, #0]
90006ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90006caa:	2b00      	cmp	r3, #0
90006cac:	d1f0      	bne.n	90006c90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90006cae:	687b      	ldr	r3, [r7, #4]
90006cb0:	681b      	ldr	r3, [r3, #0]
90006cb2:	f003 0304 	and.w	r3, r3, #4
90006cb6:	2b00      	cmp	r3, #0
90006cb8:	f000 8081 	beq.w	90006dbe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90006cbc:	4b8c      	ldr	r3, [pc, #560]	@ (90006ef0 <HAL_RCC_OscConfig+0x770>)
90006cbe:	681b      	ldr	r3, [r3, #0]
90006cc0:	4a8b      	ldr	r2, [pc, #556]	@ (90006ef0 <HAL_RCC_OscConfig+0x770>)
90006cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90006cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90006cc8:	f7fc f8b2 	bl	90002e30 <HAL_GetTick>
90006ccc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006cce:	e008      	b.n	90006ce2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90006cd0:	f7fc f8ae 	bl	90002e30 <HAL_GetTick>
90006cd4:	4602      	mov	r2, r0
90006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006cd8:	1ad3      	subs	r3, r2, r3
90006cda:	2b64      	cmp	r3, #100	@ 0x64
90006cdc:	d901      	bls.n	90006ce2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90006cde:	2303      	movs	r3, #3
90006ce0:	e1a0      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006ce2:	4b83      	ldr	r3, [pc, #524]	@ (90006ef0 <HAL_RCC_OscConfig+0x770>)
90006ce4:	681b      	ldr	r3, [r3, #0]
90006ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006cea:	2b00      	cmp	r3, #0
90006cec:	d0f0      	beq.n	90006cd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90006cee:	687b      	ldr	r3, [r7, #4]
90006cf0:	689b      	ldr	r3, [r3, #8]
90006cf2:	2b01      	cmp	r3, #1
90006cf4:	d106      	bne.n	90006d04 <HAL_RCC_OscConfig+0x584>
90006cf6:	4b7d      	ldr	r3, [pc, #500]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006cfa:	4a7c      	ldr	r2, [pc, #496]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006cfc:	f043 0301 	orr.w	r3, r3, #1
90006d00:	6713      	str	r3, [r2, #112]	@ 0x70
90006d02:	e02d      	b.n	90006d60 <HAL_RCC_OscConfig+0x5e0>
90006d04:	687b      	ldr	r3, [r7, #4]
90006d06:	689b      	ldr	r3, [r3, #8]
90006d08:	2b00      	cmp	r3, #0
90006d0a:	d10c      	bne.n	90006d26 <HAL_RCC_OscConfig+0x5a6>
90006d0c:	4b77      	ldr	r3, [pc, #476]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006d10:	4a76      	ldr	r2, [pc, #472]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d12:	f023 0301 	bic.w	r3, r3, #1
90006d16:	6713      	str	r3, [r2, #112]	@ 0x70
90006d18:	4b74      	ldr	r3, [pc, #464]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006d1c:	4a73      	ldr	r2, [pc, #460]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d1e:	f023 0304 	bic.w	r3, r3, #4
90006d22:	6713      	str	r3, [r2, #112]	@ 0x70
90006d24:	e01c      	b.n	90006d60 <HAL_RCC_OscConfig+0x5e0>
90006d26:	687b      	ldr	r3, [r7, #4]
90006d28:	689b      	ldr	r3, [r3, #8]
90006d2a:	2b05      	cmp	r3, #5
90006d2c:	d10c      	bne.n	90006d48 <HAL_RCC_OscConfig+0x5c8>
90006d2e:	4b6f      	ldr	r3, [pc, #444]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006d32:	4a6e      	ldr	r2, [pc, #440]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d34:	f043 0304 	orr.w	r3, r3, #4
90006d38:	6713      	str	r3, [r2, #112]	@ 0x70
90006d3a:	4b6c      	ldr	r3, [pc, #432]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006d3e:	4a6b      	ldr	r2, [pc, #428]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d40:	f043 0301 	orr.w	r3, r3, #1
90006d44:	6713      	str	r3, [r2, #112]	@ 0x70
90006d46:	e00b      	b.n	90006d60 <HAL_RCC_OscConfig+0x5e0>
90006d48:	4b68      	ldr	r3, [pc, #416]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006d4c:	4a67      	ldr	r2, [pc, #412]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d4e:	f023 0301 	bic.w	r3, r3, #1
90006d52:	6713      	str	r3, [r2, #112]	@ 0x70
90006d54:	4b65      	ldr	r3, [pc, #404]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006d58:	4a64      	ldr	r2, [pc, #400]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d5a:	f023 0304 	bic.w	r3, r3, #4
90006d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90006d60:	687b      	ldr	r3, [r7, #4]
90006d62:	689b      	ldr	r3, [r3, #8]
90006d64:	2b00      	cmp	r3, #0
90006d66:	d015      	beq.n	90006d94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006d68:	f7fc f862 	bl	90002e30 <HAL_GetTick>
90006d6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90006d6e:	e00a      	b.n	90006d86 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90006d70:	f7fc f85e 	bl	90002e30 <HAL_GetTick>
90006d74:	4602      	mov	r2, r0
90006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d78:	1ad3      	subs	r3, r2, r3
90006d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
90006d7e:	4293      	cmp	r3, r2
90006d80:	d901      	bls.n	90006d86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90006d82:	2303      	movs	r3, #3
90006d84:	e14e      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90006d86:	4b59      	ldr	r3, [pc, #356]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006d8a:	f003 0302 	and.w	r3, r3, #2
90006d8e:	2b00      	cmp	r3, #0
90006d90:	d0ee      	beq.n	90006d70 <HAL_RCC_OscConfig+0x5f0>
90006d92:	e014      	b.n	90006dbe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006d94:	f7fc f84c 	bl	90002e30 <HAL_GetTick>
90006d98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90006d9a:	e00a      	b.n	90006db2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90006d9c:	f7fc f848 	bl	90002e30 <HAL_GetTick>
90006da0:	4602      	mov	r2, r0
90006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006da4:	1ad3      	subs	r3, r2, r3
90006da6:	f241 3288 	movw	r2, #5000	@ 0x1388
90006daa:	4293      	cmp	r3, r2
90006dac:	d901      	bls.n	90006db2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90006dae:	2303      	movs	r3, #3
90006db0:	e138      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90006db2:	4b4e      	ldr	r3, [pc, #312]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006db6:	f003 0302 	and.w	r3, r3, #2
90006dba:	2b00      	cmp	r3, #0
90006dbc:	d1ee      	bne.n	90006d9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90006dbe:	687b      	ldr	r3, [r7, #4]
90006dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006dc2:	2b00      	cmp	r3, #0
90006dc4:	f000 812d 	beq.w	90007022 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90006dc8:	4b48      	ldr	r3, [pc, #288]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006dca:	691b      	ldr	r3, [r3, #16]
90006dcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006dd0:	2b18      	cmp	r3, #24
90006dd2:	f000 80bd 	beq.w	90006f50 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90006dd6:	687b      	ldr	r3, [r7, #4]
90006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006dda:	2b02      	cmp	r3, #2
90006ddc:	f040 809e 	bne.w	90006f1c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90006de0:	4b42      	ldr	r3, [pc, #264]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006de2:	681b      	ldr	r3, [r3, #0]
90006de4:	4a41      	ldr	r2, [pc, #260]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90006dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006dec:	f7fc f820 	bl	90002e30 <HAL_GetTick>
90006df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90006df2:	e008      	b.n	90006e06 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90006df4:	f7fc f81c 	bl	90002e30 <HAL_GetTick>
90006df8:	4602      	mov	r2, r0
90006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006dfc:	1ad3      	subs	r3, r2, r3
90006dfe:	2b02      	cmp	r3, #2
90006e00:	d901      	bls.n	90006e06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90006e02:	2303      	movs	r3, #3
90006e04:	e10e      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90006e06:	4b39      	ldr	r3, [pc, #228]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e08:	681b      	ldr	r3, [r3, #0]
90006e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90006e0e:	2b00      	cmp	r3, #0
90006e10:	d1f0      	bne.n	90006df4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90006e12:	4b36      	ldr	r3, [pc, #216]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90006e16:	4b37      	ldr	r3, [pc, #220]	@ (90006ef4 <HAL_RCC_OscConfig+0x774>)
90006e18:	4013      	ands	r3, r2
90006e1a:	687a      	ldr	r2, [r7, #4]
90006e1c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
90006e1e:	687a      	ldr	r2, [r7, #4]
90006e20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
90006e22:	0112      	lsls	r2, r2, #4
90006e24:	430a      	orrs	r2, r1
90006e26:	4931      	ldr	r1, [pc, #196]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e28:	4313      	orrs	r3, r2
90006e2a:	628b      	str	r3, [r1, #40]	@ 0x28
90006e2c:	687b      	ldr	r3, [r7, #4]
90006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90006e30:	3b01      	subs	r3, #1
90006e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
90006e36:	687b      	ldr	r3, [r7, #4]
90006e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006e3a:	3b01      	subs	r3, #1
90006e3c:	025b      	lsls	r3, r3, #9
90006e3e:	b29b      	uxth	r3, r3
90006e40:	431a      	orrs	r2, r3
90006e42:	687b      	ldr	r3, [r7, #4]
90006e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006e46:	3b01      	subs	r3, #1
90006e48:	041b      	lsls	r3, r3, #16
90006e4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90006e4e:	431a      	orrs	r2, r3
90006e50:	687b      	ldr	r3, [r7, #4]
90006e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90006e54:	3b01      	subs	r3, #1
90006e56:	061b      	lsls	r3, r3, #24
90006e58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90006e5c:	4923      	ldr	r1, [pc, #140]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e5e:	4313      	orrs	r3, r2
90006e60:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90006e62:	4b22      	ldr	r3, [pc, #136]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006e66:	4a21      	ldr	r2, [pc, #132]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e68:	f023 0301 	bic.w	r3, r3, #1
90006e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90006e6e:	4b1f      	ldr	r3, [pc, #124]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006e72:	4b21      	ldr	r3, [pc, #132]	@ (90006ef8 <HAL_RCC_OscConfig+0x778>)
90006e74:	4013      	ands	r3, r2
90006e76:	687a      	ldr	r2, [r7, #4]
90006e78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90006e7a:	00d2      	lsls	r2, r2, #3
90006e7c:	491b      	ldr	r1, [pc, #108]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e7e:	4313      	orrs	r3, r2
90006e80:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90006e82:	4b1a      	ldr	r3, [pc, #104]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006e86:	f023 020c 	bic.w	r2, r3, #12
90006e8a:	687b      	ldr	r3, [r7, #4]
90006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90006e8e:	4917      	ldr	r1, [pc, #92]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e90:	4313      	orrs	r3, r2
90006e92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90006e94:	4b15      	ldr	r3, [pc, #84]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006e98:	f023 0202 	bic.w	r2, r3, #2
90006e9c:	687b      	ldr	r3, [r7, #4]
90006e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006ea0:	4912      	ldr	r1, [pc, #72]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ea2:	4313      	orrs	r3, r2
90006ea4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90006ea6:	4b11      	ldr	r3, [pc, #68]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006eaa:	4a10      	ldr	r2, [pc, #64]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90006eb2:	4b0e      	ldr	r3, [pc, #56]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006eb6:	4a0d      	ldr	r2, [pc, #52]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90006ebe:	4b0b      	ldr	r3, [pc, #44]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006ec2:	4a0a      	ldr	r2, [pc, #40]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90006eca:	4b08      	ldr	r3, [pc, #32]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006ece:	4a07      	ldr	r2, [pc, #28]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ed0:	f043 0301 	orr.w	r3, r3, #1
90006ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90006ed6:	4b05      	ldr	r3, [pc, #20]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006ed8:	681b      	ldr	r3, [r3, #0]
90006eda:	4a04      	ldr	r2, [pc, #16]	@ (90006eec <HAL_RCC_OscConfig+0x76c>)
90006edc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90006ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006ee2:	f7fb ffa5 	bl	90002e30 <HAL_GetTick>
90006ee6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90006ee8:	e011      	b.n	90006f0e <HAL_RCC_OscConfig+0x78e>
90006eea:	bf00      	nop
90006eec:	58024400 	.word	0x58024400
90006ef0:	58024800 	.word	0x58024800
90006ef4:	fffffc0c 	.word	0xfffffc0c
90006ef8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90006efc:	f7fb ff98 	bl	90002e30 <HAL_GetTick>
90006f00:	4602      	mov	r2, r0
90006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f04:	1ad3      	subs	r3, r2, r3
90006f06:	2b02      	cmp	r3, #2
90006f08:	d901      	bls.n	90006f0e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90006f0a:	2303      	movs	r3, #3
90006f0c:	e08a      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90006f0e:	4b47      	ldr	r3, [pc, #284]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006f10:	681b      	ldr	r3, [r3, #0]
90006f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90006f16:	2b00      	cmp	r3, #0
90006f18:	d0f0      	beq.n	90006efc <HAL_RCC_OscConfig+0x77c>
90006f1a:	e082      	b.n	90007022 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90006f1c:	4b43      	ldr	r3, [pc, #268]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006f1e:	681b      	ldr	r3, [r3, #0]
90006f20:	4a42      	ldr	r2, [pc, #264]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90006f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f28:	f7fb ff82 	bl	90002e30 <HAL_GetTick>
90006f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90006f2e:	e008      	b.n	90006f42 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90006f30:	f7fb ff7e 	bl	90002e30 <HAL_GetTick>
90006f34:	4602      	mov	r2, r0
90006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f38:	1ad3      	subs	r3, r2, r3
90006f3a:	2b02      	cmp	r3, #2
90006f3c:	d901      	bls.n	90006f42 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90006f3e:	2303      	movs	r3, #3
90006f40:	e070      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90006f42:	4b3a      	ldr	r3, [pc, #232]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006f44:	681b      	ldr	r3, [r3, #0]
90006f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90006f4a:	2b00      	cmp	r3, #0
90006f4c:	d1f0      	bne.n	90006f30 <HAL_RCC_OscConfig+0x7b0>
90006f4e:	e068      	b.n	90007022 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90006f50:	4b36      	ldr	r3, [pc, #216]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006f54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90006f56:	4b35      	ldr	r3, [pc, #212]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90006f5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90006f5c:	687b      	ldr	r3, [r7, #4]
90006f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006f60:	2b01      	cmp	r3, #1
90006f62:	d031      	beq.n	90006fc8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90006f64:	693b      	ldr	r3, [r7, #16]
90006f66:	f003 0203 	and.w	r2, r3, #3
90006f6a:	687b      	ldr	r3, [r7, #4]
90006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90006f6e:	429a      	cmp	r2, r3
90006f70:	d12a      	bne.n	90006fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90006f72:	693b      	ldr	r3, [r7, #16]
90006f74:	091b      	lsrs	r3, r3, #4
90006f76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90006f7a:	687b      	ldr	r3, [r7, #4]
90006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90006f7e:	429a      	cmp	r2, r3
90006f80:	d122      	bne.n	90006fc8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90006f82:	68fb      	ldr	r3, [r7, #12]
90006f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
90006f88:	687b      	ldr	r3, [r7, #4]
90006f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90006f8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90006f8e:	429a      	cmp	r2, r3
90006f90:	d11a      	bne.n	90006fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90006f92:	68fb      	ldr	r3, [r7, #12]
90006f94:	0a5b      	lsrs	r3, r3, #9
90006f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90006f9a:	687b      	ldr	r3, [r7, #4]
90006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006f9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90006fa0:	429a      	cmp	r2, r3
90006fa2:	d111      	bne.n	90006fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90006fa4:	68fb      	ldr	r3, [r7, #12]
90006fa6:	0c1b      	lsrs	r3, r3, #16
90006fa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90006fac:	687b      	ldr	r3, [r7, #4]
90006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006fb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90006fb2:	429a      	cmp	r2, r3
90006fb4:	d108      	bne.n	90006fc8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90006fb6:	68fb      	ldr	r3, [r7, #12]
90006fb8:	0e1b      	lsrs	r3, r3, #24
90006fba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90006fbe:	687b      	ldr	r3, [r7, #4]
90006fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90006fc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90006fc4:	429a      	cmp	r2, r3
90006fc6:	d001      	beq.n	90006fcc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90006fc8:	2301      	movs	r3, #1
90006fca:	e02b      	b.n	90007024 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90006fcc:	4b17      	ldr	r3, [pc, #92]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006fd0:	08db      	lsrs	r3, r3, #3
90006fd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
90006fd6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90006fd8:	687b      	ldr	r3, [r7, #4]
90006fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90006fdc:	693a      	ldr	r2, [r7, #16]
90006fde:	429a      	cmp	r2, r3
90006fe0:	d01f      	beq.n	90007022 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90006fe2:	4b12      	ldr	r3, [pc, #72]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006fe6:	4a11      	ldr	r2, [pc, #68]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90006fe8:	f023 0301 	bic.w	r3, r3, #1
90006fec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90006fee:	f7fb ff1f 	bl	90002e30 <HAL_GetTick>
90006ff2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90006ff4:	bf00      	nop
90006ff6:	f7fb ff1b 	bl	90002e30 <HAL_GetTick>
90006ffa:	4602      	mov	r2, r0
90006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006ffe:	4293      	cmp	r3, r2
90007000:	d0f9      	beq.n	90006ff6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007002:	4b0a      	ldr	r3, [pc, #40]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90007004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007006:	4b0a      	ldr	r3, [pc, #40]	@ (90007030 <HAL_RCC_OscConfig+0x8b0>)
90007008:	4013      	ands	r3, r2
9000700a:	687a      	ldr	r2, [r7, #4]
9000700c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000700e:	00d2      	lsls	r2, r2, #3
90007010:	4906      	ldr	r1, [pc, #24]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90007012:	4313      	orrs	r3, r2
90007014:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90007016:	4b05      	ldr	r3, [pc, #20]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
90007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000701a:	4a04      	ldr	r2, [pc, #16]	@ (9000702c <HAL_RCC_OscConfig+0x8ac>)
9000701c:	f043 0301 	orr.w	r3, r3, #1
90007020:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
90007022:	2300      	movs	r3, #0
}
90007024:	4618      	mov	r0, r3
90007026:	3730      	adds	r7, #48	@ 0x30
90007028:	46bd      	mov	sp, r7
9000702a:	bd80      	pop	{r7, pc}
9000702c:	58024400 	.word	0x58024400
90007030:	ffff0007 	.word	0xffff0007

90007034 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90007034:	b580      	push	{r7, lr}
90007036:	b086      	sub	sp, #24
90007038:	af00      	add	r7, sp, #0
9000703a:	6078      	str	r0, [r7, #4]
9000703c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
9000703e:	687b      	ldr	r3, [r7, #4]
90007040:	2b00      	cmp	r3, #0
90007042:	d101      	bne.n	90007048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90007044:	2301      	movs	r3, #1
90007046:	e19c      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007048:	4b8a      	ldr	r3, [pc, #552]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
9000704a:	681b      	ldr	r3, [r3, #0]
9000704c:	f003 030f 	and.w	r3, r3, #15
90007050:	683a      	ldr	r2, [r7, #0]
90007052:	429a      	cmp	r2, r3
90007054:	d910      	bls.n	90007078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007056:	4b87      	ldr	r3, [pc, #540]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
90007058:	681b      	ldr	r3, [r3, #0]
9000705a:	f023 020f 	bic.w	r2, r3, #15
9000705e:	4985      	ldr	r1, [pc, #532]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
90007060:	683b      	ldr	r3, [r7, #0]
90007062:	4313      	orrs	r3, r2
90007064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007066:	4b83      	ldr	r3, [pc, #524]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
90007068:	681b      	ldr	r3, [r3, #0]
9000706a:	f003 030f 	and.w	r3, r3, #15
9000706e:	683a      	ldr	r2, [r7, #0]
90007070:	429a      	cmp	r2, r3
90007072:	d001      	beq.n	90007078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007074:	2301      	movs	r3, #1
90007076:	e184      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007078:	687b      	ldr	r3, [r7, #4]
9000707a:	681b      	ldr	r3, [r3, #0]
9000707c:	f003 0304 	and.w	r3, r3, #4
90007080:	2b00      	cmp	r3, #0
90007082:	d010      	beq.n	900070a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007084:	687b      	ldr	r3, [r7, #4]
90007086:	691a      	ldr	r2, [r3, #16]
90007088:	4b7b      	ldr	r3, [pc, #492]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
9000708a:	699b      	ldr	r3, [r3, #24]
9000708c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007090:	429a      	cmp	r2, r3
90007092:	d908      	bls.n	900070a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007094:	4b78      	ldr	r3, [pc, #480]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007096:	699b      	ldr	r3, [r3, #24]
90007098:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000709c:	687b      	ldr	r3, [r7, #4]
9000709e:	691b      	ldr	r3, [r3, #16]
900070a0:	4975      	ldr	r1, [pc, #468]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900070a2:	4313      	orrs	r3, r2
900070a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900070a6:	687b      	ldr	r3, [r7, #4]
900070a8:	681b      	ldr	r3, [r3, #0]
900070aa:	f003 0308 	and.w	r3, r3, #8
900070ae:	2b00      	cmp	r3, #0
900070b0:	d010      	beq.n	900070d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900070b2:	687b      	ldr	r3, [r7, #4]
900070b4:	695a      	ldr	r2, [r3, #20]
900070b6:	4b70      	ldr	r3, [pc, #448]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900070b8:	69db      	ldr	r3, [r3, #28]
900070ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900070be:	429a      	cmp	r2, r3
900070c0:	d908      	bls.n	900070d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900070c2:	4b6d      	ldr	r3, [pc, #436]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900070c4:	69db      	ldr	r3, [r3, #28]
900070c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900070ca:	687b      	ldr	r3, [r7, #4]
900070cc:	695b      	ldr	r3, [r3, #20]
900070ce:	496a      	ldr	r1, [pc, #424]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900070d0:	4313      	orrs	r3, r2
900070d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900070d4:	687b      	ldr	r3, [r7, #4]
900070d6:	681b      	ldr	r3, [r3, #0]
900070d8:	f003 0310 	and.w	r3, r3, #16
900070dc:	2b00      	cmp	r3, #0
900070de:	d010      	beq.n	90007102 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900070e0:	687b      	ldr	r3, [r7, #4]
900070e2:	699a      	ldr	r2, [r3, #24]
900070e4:	4b64      	ldr	r3, [pc, #400]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900070e6:	69db      	ldr	r3, [r3, #28]
900070e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900070ec:	429a      	cmp	r2, r3
900070ee:	d908      	bls.n	90007102 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900070f0:	4b61      	ldr	r3, [pc, #388]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900070f2:	69db      	ldr	r3, [r3, #28]
900070f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900070f8:	687b      	ldr	r3, [r7, #4]
900070fa:	699b      	ldr	r3, [r3, #24]
900070fc:	495e      	ldr	r1, [pc, #376]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900070fe:	4313      	orrs	r3, r2
90007100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007102:	687b      	ldr	r3, [r7, #4]
90007104:	681b      	ldr	r3, [r3, #0]
90007106:	f003 0320 	and.w	r3, r3, #32
9000710a:	2b00      	cmp	r3, #0
9000710c:	d010      	beq.n	90007130 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000710e:	687b      	ldr	r3, [r7, #4]
90007110:	69da      	ldr	r2, [r3, #28]
90007112:	4b59      	ldr	r3, [pc, #356]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007114:	6a1b      	ldr	r3, [r3, #32]
90007116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000711a:	429a      	cmp	r2, r3
9000711c:	d908      	bls.n	90007130 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000711e:	4b56      	ldr	r3, [pc, #344]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007120:	6a1b      	ldr	r3, [r3, #32]
90007122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007126:	687b      	ldr	r3, [r7, #4]
90007128:	69db      	ldr	r3, [r3, #28]
9000712a:	4953      	ldr	r1, [pc, #332]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
9000712c:	4313      	orrs	r3, r2
9000712e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007130:	687b      	ldr	r3, [r7, #4]
90007132:	681b      	ldr	r3, [r3, #0]
90007134:	f003 0302 	and.w	r3, r3, #2
90007138:	2b00      	cmp	r3, #0
9000713a:	d010      	beq.n	9000715e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000713c:	687b      	ldr	r3, [r7, #4]
9000713e:	68da      	ldr	r2, [r3, #12]
90007140:	4b4d      	ldr	r3, [pc, #308]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007142:	699b      	ldr	r3, [r3, #24]
90007144:	f003 030f 	and.w	r3, r3, #15
90007148:	429a      	cmp	r2, r3
9000714a:	d908      	bls.n	9000715e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000714c:	4b4a      	ldr	r3, [pc, #296]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
9000714e:	699b      	ldr	r3, [r3, #24]
90007150:	f023 020f 	bic.w	r2, r3, #15
90007154:	687b      	ldr	r3, [r7, #4]
90007156:	68db      	ldr	r3, [r3, #12]
90007158:	4947      	ldr	r1, [pc, #284]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
9000715a:	4313      	orrs	r3, r2
9000715c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000715e:	687b      	ldr	r3, [r7, #4]
90007160:	681b      	ldr	r3, [r3, #0]
90007162:	f003 0301 	and.w	r3, r3, #1
90007166:	2b00      	cmp	r3, #0
90007168:	d055      	beq.n	90007216 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000716a:	4b43      	ldr	r3, [pc, #268]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
9000716c:	699b      	ldr	r3, [r3, #24]
9000716e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90007172:	687b      	ldr	r3, [r7, #4]
90007174:	689b      	ldr	r3, [r3, #8]
90007176:	4940      	ldr	r1, [pc, #256]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007178:	4313      	orrs	r3, r2
9000717a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000717c:	687b      	ldr	r3, [r7, #4]
9000717e:	685b      	ldr	r3, [r3, #4]
90007180:	2b02      	cmp	r3, #2
90007182:	d107      	bne.n	90007194 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007184:	4b3c      	ldr	r3, [pc, #240]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007186:	681b      	ldr	r3, [r3, #0]
90007188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000718c:	2b00      	cmp	r3, #0
9000718e:	d121      	bne.n	900071d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007190:	2301      	movs	r3, #1
90007192:	e0f6      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007194:	687b      	ldr	r3, [r7, #4]
90007196:	685b      	ldr	r3, [r3, #4]
90007198:	2b03      	cmp	r3, #3
9000719a:	d107      	bne.n	900071ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000719c:	4b36      	ldr	r3, [pc, #216]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
9000719e:	681b      	ldr	r3, [r3, #0]
900071a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900071a4:	2b00      	cmp	r3, #0
900071a6:	d115      	bne.n	900071d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900071a8:	2301      	movs	r3, #1
900071aa:	e0ea      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
900071ac:	687b      	ldr	r3, [r7, #4]
900071ae:	685b      	ldr	r3, [r3, #4]
900071b0:	2b01      	cmp	r3, #1
900071b2:	d107      	bne.n	900071c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900071b4:	4b30      	ldr	r3, [pc, #192]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900071b6:	681b      	ldr	r3, [r3, #0]
900071b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900071bc:	2b00      	cmp	r3, #0
900071be:	d109      	bne.n	900071d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900071c0:	2301      	movs	r3, #1
900071c2:	e0de      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900071c4:	4b2c      	ldr	r3, [pc, #176]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900071c6:	681b      	ldr	r3, [r3, #0]
900071c8:	f003 0304 	and.w	r3, r3, #4
900071cc:	2b00      	cmp	r3, #0
900071ce:	d101      	bne.n	900071d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900071d0:	2301      	movs	r3, #1
900071d2:	e0d6      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
900071d4:	4b28      	ldr	r3, [pc, #160]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900071d6:	691b      	ldr	r3, [r3, #16]
900071d8:	f023 0207 	bic.w	r2, r3, #7
900071dc:	687b      	ldr	r3, [r7, #4]
900071de:	685b      	ldr	r3, [r3, #4]
900071e0:	4925      	ldr	r1, [pc, #148]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
900071e2:	4313      	orrs	r3, r2
900071e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900071e6:	f7fb fe23 	bl	90002e30 <HAL_GetTick>
900071ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900071ec:	e00a      	b.n	90007204 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900071ee:	f7fb fe1f 	bl	90002e30 <HAL_GetTick>
900071f2:	4602      	mov	r2, r0
900071f4:	697b      	ldr	r3, [r7, #20]
900071f6:	1ad3      	subs	r3, r2, r3
900071f8:	f241 3288 	movw	r2, #5000	@ 0x1388
900071fc:	4293      	cmp	r3, r2
900071fe:	d901      	bls.n	90007204 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90007200:	2303      	movs	r3, #3
90007202:	e0be      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007204:	4b1c      	ldr	r3, [pc, #112]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007206:	691b      	ldr	r3, [r3, #16]
90007208:	f003 0238 	and.w	r2, r3, #56	@ 0x38
9000720c:	687b      	ldr	r3, [r7, #4]
9000720e:	685b      	ldr	r3, [r3, #4]
90007210:	00db      	lsls	r3, r3, #3
90007212:	429a      	cmp	r2, r3
90007214:	d1eb      	bne.n	900071ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007216:	687b      	ldr	r3, [r7, #4]
90007218:	681b      	ldr	r3, [r3, #0]
9000721a:	f003 0302 	and.w	r3, r3, #2
9000721e:	2b00      	cmp	r3, #0
90007220:	d010      	beq.n	90007244 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007222:	687b      	ldr	r3, [r7, #4]
90007224:	68da      	ldr	r2, [r3, #12]
90007226:	4b14      	ldr	r3, [pc, #80]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007228:	699b      	ldr	r3, [r3, #24]
9000722a:	f003 030f 	and.w	r3, r3, #15
9000722e:	429a      	cmp	r2, r3
90007230:	d208      	bcs.n	90007244 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007232:	4b11      	ldr	r3, [pc, #68]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007234:	699b      	ldr	r3, [r3, #24]
90007236:	f023 020f 	bic.w	r2, r3, #15
9000723a:	687b      	ldr	r3, [r7, #4]
9000723c:	68db      	ldr	r3, [r3, #12]
9000723e:	490e      	ldr	r1, [pc, #56]	@ (90007278 <HAL_RCC_ClockConfig+0x244>)
90007240:	4313      	orrs	r3, r2
90007242:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90007244:	4b0b      	ldr	r3, [pc, #44]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
90007246:	681b      	ldr	r3, [r3, #0]
90007248:	f003 030f 	and.w	r3, r3, #15
9000724c:	683a      	ldr	r2, [r7, #0]
9000724e:	429a      	cmp	r2, r3
90007250:	d214      	bcs.n	9000727c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007252:	4b08      	ldr	r3, [pc, #32]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
90007254:	681b      	ldr	r3, [r3, #0]
90007256:	f023 020f 	bic.w	r2, r3, #15
9000725a:	4906      	ldr	r1, [pc, #24]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
9000725c:	683b      	ldr	r3, [r7, #0]
9000725e:	4313      	orrs	r3, r2
90007260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007262:	4b04      	ldr	r3, [pc, #16]	@ (90007274 <HAL_RCC_ClockConfig+0x240>)
90007264:	681b      	ldr	r3, [r3, #0]
90007266:	f003 030f 	and.w	r3, r3, #15
9000726a:	683a      	ldr	r2, [r7, #0]
9000726c:	429a      	cmp	r2, r3
9000726e:	d005      	beq.n	9000727c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007270:	2301      	movs	r3, #1
90007272:	e086      	b.n	90007382 <HAL_RCC_ClockConfig+0x34e>
90007274:	52002000 	.word	0x52002000
90007278:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000727c:	687b      	ldr	r3, [r7, #4]
9000727e:	681b      	ldr	r3, [r3, #0]
90007280:	f003 0304 	and.w	r3, r3, #4
90007284:	2b00      	cmp	r3, #0
90007286:	d010      	beq.n	900072aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007288:	687b      	ldr	r3, [r7, #4]
9000728a:	691a      	ldr	r2, [r3, #16]
9000728c:	4b3f      	ldr	r3, [pc, #252]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
9000728e:	699b      	ldr	r3, [r3, #24]
90007290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007294:	429a      	cmp	r2, r3
90007296:	d208      	bcs.n	900072aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007298:	4b3c      	ldr	r3, [pc, #240]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
9000729a:	699b      	ldr	r3, [r3, #24]
9000729c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900072a0:	687b      	ldr	r3, [r7, #4]
900072a2:	691b      	ldr	r3, [r3, #16]
900072a4:	4939      	ldr	r1, [pc, #228]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
900072a6:	4313      	orrs	r3, r2
900072a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900072aa:	687b      	ldr	r3, [r7, #4]
900072ac:	681b      	ldr	r3, [r3, #0]
900072ae:	f003 0308 	and.w	r3, r3, #8
900072b2:	2b00      	cmp	r3, #0
900072b4:	d010      	beq.n	900072d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900072b6:	687b      	ldr	r3, [r7, #4]
900072b8:	695a      	ldr	r2, [r3, #20]
900072ba:	4b34      	ldr	r3, [pc, #208]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
900072bc:	69db      	ldr	r3, [r3, #28]
900072be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900072c2:	429a      	cmp	r2, r3
900072c4:	d208      	bcs.n	900072d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900072c6:	4b31      	ldr	r3, [pc, #196]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
900072c8:	69db      	ldr	r3, [r3, #28]
900072ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900072ce:	687b      	ldr	r3, [r7, #4]
900072d0:	695b      	ldr	r3, [r3, #20]
900072d2:	492e      	ldr	r1, [pc, #184]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
900072d4:	4313      	orrs	r3, r2
900072d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900072d8:	687b      	ldr	r3, [r7, #4]
900072da:	681b      	ldr	r3, [r3, #0]
900072dc:	f003 0310 	and.w	r3, r3, #16
900072e0:	2b00      	cmp	r3, #0
900072e2:	d010      	beq.n	90007306 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900072e4:	687b      	ldr	r3, [r7, #4]
900072e6:	699a      	ldr	r2, [r3, #24]
900072e8:	4b28      	ldr	r3, [pc, #160]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
900072ea:	69db      	ldr	r3, [r3, #28]
900072ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900072f0:	429a      	cmp	r2, r3
900072f2:	d208      	bcs.n	90007306 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900072f4:	4b25      	ldr	r3, [pc, #148]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
900072f6:	69db      	ldr	r3, [r3, #28]
900072f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900072fc:	687b      	ldr	r3, [r7, #4]
900072fe:	699b      	ldr	r3, [r3, #24]
90007300:	4922      	ldr	r1, [pc, #136]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
90007302:	4313      	orrs	r3, r2
90007304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007306:	687b      	ldr	r3, [r7, #4]
90007308:	681b      	ldr	r3, [r3, #0]
9000730a:	f003 0320 	and.w	r3, r3, #32
9000730e:	2b00      	cmp	r3, #0
90007310:	d010      	beq.n	90007334 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90007312:	687b      	ldr	r3, [r7, #4]
90007314:	69da      	ldr	r2, [r3, #28]
90007316:	4b1d      	ldr	r3, [pc, #116]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
90007318:	6a1b      	ldr	r3, [r3, #32]
9000731a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000731e:	429a      	cmp	r2, r3
90007320:	d208      	bcs.n	90007334 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90007322:	4b1a      	ldr	r3, [pc, #104]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
90007324:	6a1b      	ldr	r3, [r3, #32]
90007326:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000732a:	687b      	ldr	r3, [r7, #4]
9000732c:	69db      	ldr	r3, [r3, #28]
9000732e:	4917      	ldr	r1, [pc, #92]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
90007330:	4313      	orrs	r3, r2
90007332:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007334:	f000 f834 	bl	900073a0 <HAL_RCC_GetSysClockFreq>
90007338:	4602      	mov	r2, r0
9000733a:	4b14      	ldr	r3, [pc, #80]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
9000733c:	699b      	ldr	r3, [r3, #24]
9000733e:	0a1b      	lsrs	r3, r3, #8
90007340:	f003 030f 	and.w	r3, r3, #15
90007344:	4912      	ldr	r1, [pc, #72]	@ (90007390 <HAL_RCC_ClockConfig+0x35c>)
90007346:	5ccb      	ldrb	r3, [r1, r3]
90007348:	f003 031f 	and.w	r3, r3, #31
9000734c:	fa22 f303 	lsr.w	r3, r2, r3
90007350:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007352:	4b0e      	ldr	r3, [pc, #56]	@ (9000738c <HAL_RCC_ClockConfig+0x358>)
90007354:	699b      	ldr	r3, [r3, #24]
90007356:	f003 030f 	and.w	r3, r3, #15
9000735a:	4a0d      	ldr	r2, [pc, #52]	@ (90007390 <HAL_RCC_ClockConfig+0x35c>)
9000735c:	5cd3      	ldrb	r3, [r2, r3]
9000735e:	f003 031f 	and.w	r3, r3, #31
90007362:	693a      	ldr	r2, [r7, #16]
90007364:	fa22 f303 	lsr.w	r3, r2, r3
90007368:	4a0a      	ldr	r2, [pc, #40]	@ (90007394 <HAL_RCC_ClockConfig+0x360>)
9000736a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000736c:	4a0a      	ldr	r2, [pc, #40]	@ (90007398 <HAL_RCC_ClockConfig+0x364>)
9000736e:	693b      	ldr	r3, [r7, #16]
90007370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007372:	4b0a      	ldr	r3, [pc, #40]	@ (9000739c <HAL_RCC_ClockConfig+0x368>)
90007374:	681b      	ldr	r3, [r3, #0]
90007376:	4618      	mov	r0, r3
90007378:	f7fb fd10 	bl	90002d9c <HAL_InitTick>
9000737c:	4603      	mov	r3, r0
9000737e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007380:	7bfb      	ldrb	r3, [r7, #15]
}
90007382:	4618      	mov	r0, r3
90007384:	3718      	adds	r7, #24
90007386:	46bd      	mov	sp, r7
90007388:	bd80      	pop	{r7, pc}
9000738a:	bf00      	nop
9000738c:	58024400 	.word	0x58024400
90007390:	9000cdb0 	.word	0x9000cdb0
90007394:	2000000c 	.word	0x2000000c
90007398:	20000008 	.word	0x20000008
9000739c:	20000010 	.word	0x20000010

900073a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
900073a0:	b480      	push	{r7}
900073a2:	b089      	sub	sp, #36	@ 0x24
900073a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
900073a6:	4bb3      	ldr	r3, [pc, #716]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
900073a8:	691b      	ldr	r3, [r3, #16]
900073aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900073ae:	2b18      	cmp	r3, #24
900073b0:	f200 8155 	bhi.w	9000765e <HAL_RCC_GetSysClockFreq+0x2be>
900073b4:	a201      	add	r2, pc, #4	@ (adr r2, 900073bc <HAL_RCC_GetSysClockFreq+0x1c>)
900073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900073ba:	bf00      	nop
900073bc:	90007421 	.word	0x90007421
900073c0:	9000765f 	.word	0x9000765f
900073c4:	9000765f 	.word	0x9000765f
900073c8:	9000765f 	.word	0x9000765f
900073cc:	9000765f 	.word	0x9000765f
900073d0:	9000765f 	.word	0x9000765f
900073d4:	9000765f 	.word	0x9000765f
900073d8:	9000765f 	.word	0x9000765f
900073dc:	90007447 	.word	0x90007447
900073e0:	9000765f 	.word	0x9000765f
900073e4:	9000765f 	.word	0x9000765f
900073e8:	9000765f 	.word	0x9000765f
900073ec:	9000765f 	.word	0x9000765f
900073f0:	9000765f 	.word	0x9000765f
900073f4:	9000765f 	.word	0x9000765f
900073f8:	9000765f 	.word	0x9000765f
900073fc:	9000744d 	.word	0x9000744d
90007400:	9000765f 	.word	0x9000765f
90007404:	9000765f 	.word	0x9000765f
90007408:	9000765f 	.word	0x9000765f
9000740c:	9000765f 	.word	0x9000765f
90007410:	9000765f 	.word	0x9000765f
90007414:	9000765f 	.word	0x9000765f
90007418:	9000765f 	.word	0x9000765f
9000741c:	90007453 	.word	0x90007453
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007420:	4b94      	ldr	r3, [pc, #592]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007422:	681b      	ldr	r3, [r3, #0]
90007424:	f003 0320 	and.w	r3, r3, #32
90007428:	2b00      	cmp	r3, #0
9000742a:	d009      	beq.n	90007440 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000742c:	4b91      	ldr	r3, [pc, #580]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000742e:	681b      	ldr	r3, [r3, #0]
90007430:	08db      	lsrs	r3, r3, #3
90007432:	f003 0303 	and.w	r3, r3, #3
90007436:	4a90      	ldr	r2, [pc, #576]	@ (90007678 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007438:	fa22 f303 	lsr.w	r3, r2, r3
9000743c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
9000743e:	e111      	b.n	90007664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90007440:	4b8d      	ldr	r3, [pc, #564]	@ (90007678 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007442:	61bb      	str	r3, [r7, #24]
      break;
90007444:	e10e      	b.n	90007664 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90007446:	4b8d      	ldr	r3, [pc, #564]	@ (9000767c <HAL_RCC_GetSysClockFreq+0x2dc>)
90007448:	61bb      	str	r3, [r7, #24]
      break;
9000744a:	e10b      	b.n	90007664 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
9000744c:	4b8c      	ldr	r3, [pc, #560]	@ (90007680 <HAL_RCC_GetSysClockFreq+0x2e0>)
9000744e:	61bb      	str	r3, [r7, #24]
      break;
90007450:	e108      	b.n	90007664 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007452:	4b88      	ldr	r3, [pc, #544]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007456:	f003 0303 	and.w	r3, r3, #3
9000745a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000745c:	4b85      	ldr	r3, [pc, #532]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007460:	091b      	lsrs	r3, r3, #4
90007462:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007466:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007468:	4b82      	ldr	r3, [pc, #520]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000746c:	f003 0301 	and.w	r3, r3, #1
90007470:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007472:	4b80      	ldr	r3, [pc, #512]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007476:	08db      	lsrs	r3, r3, #3
90007478:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000747c:	68fa      	ldr	r2, [r7, #12]
9000747e:	fb02 f303 	mul.w	r3, r2, r3
90007482:	ee07 3a90 	vmov	s15, r3
90007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000748a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
9000748e:	693b      	ldr	r3, [r7, #16]
90007490:	2b00      	cmp	r3, #0
90007492:	f000 80e1 	beq.w	90007658 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007496:	697b      	ldr	r3, [r7, #20]
90007498:	2b02      	cmp	r3, #2
9000749a:	f000 8083 	beq.w	900075a4 <HAL_RCC_GetSysClockFreq+0x204>
9000749e:	697b      	ldr	r3, [r7, #20]
900074a0:	2b02      	cmp	r3, #2
900074a2:	f200 80a1 	bhi.w	900075e8 <HAL_RCC_GetSysClockFreq+0x248>
900074a6:	697b      	ldr	r3, [r7, #20]
900074a8:	2b00      	cmp	r3, #0
900074aa:	d003      	beq.n	900074b4 <HAL_RCC_GetSysClockFreq+0x114>
900074ac:	697b      	ldr	r3, [r7, #20]
900074ae:	2b01      	cmp	r3, #1
900074b0:	d056      	beq.n	90007560 <HAL_RCC_GetSysClockFreq+0x1c0>
900074b2:	e099      	b.n	900075e8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900074b4:	4b6f      	ldr	r3, [pc, #444]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
900074b6:	681b      	ldr	r3, [r3, #0]
900074b8:	f003 0320 	and.w	r3, r3, #32
900074bc:	2b00      	cmp	r3, #0
900074be:	d02d      	beq.n	9000751c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900074c0:	4b6c      	ldr	r3, [pc, #432]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
900074c2:	681b      	ldr	r3, [r3, #0]
900074c4:	08db      	lsrs	r3, r3, #3
900074c6:	f003 0303 	and.w	r3, r3, #3
900074ca:	4a6b      	ldr	r2, [pc, #428]	@ (90007678 <HAL_RCC_GetSysClockFreq+0x2d8>)
900074cc:	fa22 f303 	lsr.w	r3, r2, r3
900074d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900074d2:	687b      	ldr	r3, [r7, #4]
900074d4:	ee07 3a90 	vmov	s15, r3
900074d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900074dc:	693b      	ldr	r3, [r7, #16]
900074de:	ee07 3a90 	vmov	s15, r3
900074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900074e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900074ea:	4b62      	ldr	r3, [pc, #392]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
900074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
900074f2:	ee07 3a90 	vmov	s15, r3
900074f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900074fa:	ed97 6a02 	vldr	s12, [r7, #8]
900074fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007684 <HAL_RCC_GetSysClockFreq+0x2e4>
90007502:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007506:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000750a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000750e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007512:	ee67 7a27 	vmul.f32	s15, s14, s15
90007516:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
9000751a:	e087      	b.n	9000762c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000751c:	693b      	ldr	r3, [r7, #16]
9000751e:	ee07 3a90 	vmov	s15, r3
90007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007526:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007688 <HAL_RCC_GetSysClockFreq+0x2e8>
9000752a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000752e:	4b51      	ldr	r3, [pc, #324]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007532:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007536:	ee07 3a90 	vmov	s15, r3
9000753a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000753e:	ed97 6a02 	vldr	s12, [r7, #8]
90007542:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007684 <HAL_RCC_GetSysClockFreq+0x2e4>
90007546:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000754a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000754e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007552:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007556:	ee67 7a27 	vmul.f32	s15, s14, s15
9000755a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000755e:	e065      	b.n	9000762c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007560:	693b      	ldr	r3, [r7, #16]
90007562:	ee07 3a90 	vmov	s15, r3
90007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000756a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 9000768c <HAL_RCC_GetSysClockFreq+0x2ec>
9000756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007572:	4b40      	ldr	r3, [pc, #256]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007576:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000757a:	ee07 3a90 	vmov	s15, r3
9000757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007582:	ed97 6a02 	vldr	s12, [r7, #8]
90007586:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007684 <HAL_RCC_GetSysClockFreq+0x2e4>
9000758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000759a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000759e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900075a2:	e043      	b.n	9000762c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900075a4:	693b      	ldr	r3, [r7, #16]
900075a6:	ee07 3a90 	vmov	s15, r3
900075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900075ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007690 <HAL_RCC_GetSysClockFreq+0x2f0>
900075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900075b6:	4b2f      	ldr	r3, [pc, #188]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
900075b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
900075be:	ee07 3a90 	vmov	s15, r3
900075c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900075c6:	ed97 6a02 	vldr	s12, [r7, #8]
900075ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007684 <HAL_RCC_GetSysClockFreq+0x2e4>
900075ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
900075d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900075d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900075da:	ee77 7aa6 	vadd.f32	s15, s15, s13
900075de:	ee67 7a27 	vmul.f32	s15, s14, s15
900075e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900075e6:	e021      	b.n	9000762c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900075e8:	693b      	ldr	r3, [r7, #16]
900075ea:	ee07 3a90 	vmov	s15, r3
900075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
900075f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 9000768c <HAL_RCC_GetSysClockFreq+0x2ec>
900075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900075fa:	4b1e      	ldr	r3, [pc, #120]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
900075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007602:	ee07 3a90 	vmov	s15, r3
90007606:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000760a:	ed97 6a02 	vldr	s12, [r7, #8]
9000760e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007684 <HAL_RCC_GetSysClockFreq+0x2e4>
90007612:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007616:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000761a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007622:	ee67 7a27 	vmul.f32	s15, s14, s15
90007626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000762a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000762c:	4b11      	ldr	r3, [pc, #68]	@ (90007674 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000762e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007630:	0a5b      	lsrs	r3, r3, #9
90007632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007636:	3301      	adds	r3, #1
90007638:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000763a:	683b      	ldr	r3, [r7, #0]
9000763c:	ee07 3a90 	vmov	s15, r3
90007640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007644:	edd7 6a07 	vldr	s13, [r7, #28]
90007648:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000764c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007650:	ee17 3a90 	vmov	r3, s15
90007654:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007656:	e005      	b.n	90007664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007658:	2300      	movs	r3, #0
9000765a:	61bb      	str	r3, [r7, #24]
      break;
9000765c:	e002      	b.n	90007664 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
9000765e:	4b07      	ldr	r3, [pc, #28]	@ (9000767c <HAL_RCC_GetSysClockFreq+0x2dc>)
90007660:	61bb      	str	r3, [r7, #24]
      break;
90007662:	bf00      	nop
  }

  return sysclockfreq;
90007664:	69bb      	ldr	r3, [r7, #24]
}
90007666:	4618      	mov	r0, r3
90007668:	3724      	adds	r7, #36	@ 0x24
9000766a:	46bd      	mov	sp, r7
9000766c:	f85d 7b04 	ldr.w	r7, [sp], #4
90007670:	4770      	bx	lr
90007672:	bf00      	nop
90007674:	58024400 	.word	0x58024400
90007678:	03d09000 	.word	0x03d09000
9000767c:	003d0900 	.word	0x003d0900
90007680:	017d7840 	.word	0x017d7840
90007684:	46000000 	.word	0x46000000
90007688:	4c742400 	.word	0x4c742400
9000768c:	4a742400 	.word	0x4a742400
90007690:	4bbebc20 	.word	0x4bbebc20

90007694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007694:	b580      	push	{r7, lr}
90007696:	b082      	sub	sp, #8
90007698:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000769a:	f7ff fe81 	bl	900073a0 <HAL_RCC_GetSysClockFreq>
9000769e:	4602      	mov	r2, r0
900076a0:	4b10      	ldr	r3, [pc, #64]	@ (900076e4 <HAL_RCC_GetHCLKFreq+0x50>)
900076a2:	699b      	ldr	r3, [r3, #24]
900076a4:	0a1b      	lsrs	r3, r3, #8
900076a6:	f003 030f 	and.w	r3, r3, #15
900076aa:	490f      	ldr	r1, [pc, #60]	@ (900076e8 <HAL_RCC_GetHCLKFreq+0x54>)
900076ac:	5ccb      	ldrb	r3, [r1, r3]
900076ae:	f003 031f 	and.w	r3, r3, #31
900076b2:	fa22 f303 	lsr.w	r3, r2, r3
900076b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900076b8:	4b0a      	ldr	r3, [pc, #40]	@ (900076e4 <HAL_RCC_GetHCLKFreq+0x50>)
900076ba:	699b      	ldr	r3, [r3, #24]
900076bc:	f003 030f 	and.w	r3, r3, #15
900076c0:	4a09      	ldr	r2, [pc, #36]	@ (900076e8 <HAL_RCC_GetHCLKFreq+0x54>)
900076c2:	5cd3      	ldrb	r3, [r2, r3]
900076c4:	f003 031f 	and.w	r3, r3, #31
900076c8:	687a      	ldr	r2, [r7, #4]
900076ca:	fa22 f303 	lsr.w	r3, r2, r3
900076ce:	4a07      	ldr	r2, [pc, #28]	@ (900076ec <HAL_RCC_GetHCLKFreq+0x58>)
900076d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900076d2:	4a07      	ldr	r2, [pc, #28]	@ (900076f0 <HAL_RCC_GetHCLKFreq+0x5c>)
900076d4:	687b      	ldr	r3, [r7, #4]
900076d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
900076d8:	4b04      	ldr	r3, [pc, #16]	@ (900076ec <HAL_RCC_GetHCLKFreq+0x58>)
900076da:	681b      	ldr	r3, [r3, #0]
}
900076dc:	4618      	mov	r0, r3
900076de:	3708      	adds	r7, #8
900076e0:	46bd      	mov	sp, r7
900076e2:	bd80      	pop	{r7, pc}
900076e4:	58024400 	.word	0x58024400
900076e8:	9000cdb0 	.word	0x9000cdb0
900076ec:	2000000c 	.word	0x2000000c
900076f0:	20000008 	.word	0x20000008

900076f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
900076f4:	b580      	push	{r7, lr}
900076f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
900076f8:	f7ff ffcc 	bl	90007694 <HAL_RCC_GetHCLKFreq>
900076fc:	4602      	mov	r2, r0
900076fe:	4b06      	ldr	r3, [pc, #24]	@ (90007718 <HAL_RCC_GetPCLK1Freq+0x24>)
90007700:	69db      	ldr	r3, [r3, #28]
90007702:	091b      	lsrs	r3, r3, #4
90007704:	f003 0307 	and.w	r3, r3, #7
90007708:	4904      	ldr	r1, [pc, #16]	@ (9000771c <HAL_RCC_GetPCLK1Freq+0x28>)
9000770a:	5ccb      	ldrb	r3, [r1, r3]
9000770c:	f003 031f 	and.w	r3, r3, #31
90007710:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007714:	4618      	mov	r0, r3
90007716:	bd80      	pop	{r7, pc}
90007718:	58024400 	.word	0x58024400
9000771c:	9000cdb0 	.word	0x9000cdb0

90007720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007720:	b580      	push	{r7, lr}
90007722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007724:	f7ff ffb6 	bl	90007694 <HAL_RCC_GetHCLKFreq>
90007728:	4602      	mov	r2, r0
9000772a:	4b06      	ldr	r3, [pc, #24]	@ (90007744 <HAL_RCC_GetPCLK2Freq+0x24>)
9000772c:	69db      	ldr	r3, [r3, #28]
9000772e:	0a1b      	lsrs	r3, r3, #8
90007730:	f003 0307 	and.w	r3, r3, #7
90007734:	4904      	ldr	r1, [pc, #16]	@ (90007748 <HAL_RCC_GetPCLK2Freq+0x28>)
90007736:	5ccb      	ldrb	r3, [r1, r3]
90007738:	f003 031f 	and.w	r3, r3, #31
9000773c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007740:	4618      	mov	r0, r3
90007742:	bd80      	pop	{r7, pc}
90007744:	58024400 	.word	0x58024400
90007748:	9000cdb0 	.word	0x9000cdb0

9000774c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
9000774c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007750:	b0ca      	sub	sp, #296	@ 0x128
90007752:	af00      	add	r7, sp, #0
90007754:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007758:	2300      	movs	r3, #0
9000775a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
9000775e:	2300      	movs	r3, #0
90007760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007768:	e9d3 2300 	ldrd	r2, r3, [r3]
9000776c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007770:	2500      	movs	r5, #0
90007772:	ea54 0305 	orrs.w	r3, r4, r5
90007776:	d049      	beq.n	9000780c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000777c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
9000777e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007782:	d02f      	beq.n	900077e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007784:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007788:	d828      	bhi.n	900077dc <HAL_RCCEx_PeriphCLKConfig+0x90>
9000778a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000778e:	d01a      	beq.n	900077c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007790:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007794:	d822      	bhi.n	900077dc <HAL_RCCEx_PeriphCLKConfig+0x90>
90007796:	2b00      	cmp	r3, #0
90007798:	d003      	beq.n	900077a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
9000779a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000779e:	d007      	beq.n	900077b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
900077a0:	e01c      	b.n	900077dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900077a2:	4bb8      	ldr	r3, [pc, #736]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900077a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900077a6:	4ab7      	ldr	r2, [pc, #732]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900077a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900077ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900077ae:	e01a      	b.n	900077e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900077b4:	3308      	adds	r3, #8
900077b6:	2102      	movs	r1, #2
900077b8:	4618      	mov	r0, r3
900077ba:	f001 fc8f 	bl	900090dc <RCCEx_PLL2_Config>
900077be:	4603      	mov	r3, r0
900077c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900077c4:	e00f      	b.n	900077e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900077ca:	3328      	adds	r3, #40	@ 0x28
900077cc:	2102      	movs	r1, #2
900077ce:	4618      	mov	r0, r3
900077d0:	f001 fd36 	bl	90009240 <RCCEx_PLL3_Config>
900077d4:	4603      	mov	r3, r0
900077d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900077da:	e004      	b.n	900077e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900077dc:	2301      	movs	r3, #1
900077de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900077e2:	e000      	b.n	900077e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
900077e4:	bf00      	nop
    }

    if (ret == HAL_OK)
900077e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900077ea:	2b00      	cmp	r3, #0
900077ec:	d10a      	bne.n	90007804 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
900077ee:	4ba5      	ldr	r3, [pc, #660]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900077f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900077f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900077f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900077fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
900077fc:	4aa1      	ldr	r2, [pc, #644]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900077fe:	430b      	orrs	r3, r1
90007800:	6513      	str	r3, [r2, #80]	@ 0x50
90007802:	e003      	b.n	9000780c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007810:	e9d3 2300 	ldrd	r2, r3, [r3]
90007814:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007818:	f04f 0900 	mov.w	r9, #0
9000781c:	ea58 0309 	orrs.w	r3, r8, r9
90007820:	d047      	beq.n	900078b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007828:	2b04      	cmp	r3, #4
9000782a:	d82a      	bhi.n	90007882 <HAL_RCCEx_PeriphCLKConfig+0x136>
9000782c:	a201      	add	r2, pc, #4	@ (adr r2, 90007834 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
9000782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007832:	bf00      	nop
90007834:	90007849 	.word	0x90007849
90007838:	90007857 	.word	0x90007857
9000783c:	9000786d 	.word	0x9000786d
90007840:	9000788b 	.word	0x9000788b
90007844:	9000788b 	.word	0x9000788b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007848:	4b8e      	ldr	r3, [pc, #568]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000784c:	4a8d      	ldr	r2, [pc, #564]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000784e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007854:	e01a      	b.n	9000788c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000785a:	3308      	adds	r3, #8
9000785c:	2100      	movs	r1, #0
9000785e:	4618      	mov	r0, r3
90007860:	f001 fc3c 	bl	900090dc <RCCEx_PLL2_Config>
90007864:	4603      	mov	r3, r0
90007866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000786a:	e00f      	b.n	9000788c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007870:	3328      	adds	r3, #40	@ 0x28
90007872:	2100      	movs	r1, #0
90007874:	4618      	mov	r0, r3
90007876:	f001 fce3 	bl	90009240 <RCCEx_PLL3_Config>
9000787a:	4603      	mov	r3, r0
9000787c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007880:	e004      	b.n	9000788c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007882:	2301      	movs	r3, #1
90007884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007888:	e000      	b.n	9000788c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
9000788a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000788c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007890:	2b00      	cmp	r3, #0
90007892:	d10a      	bne.n	900078aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007894:	4b7b      	ldr	r3, [pc, #492]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007898:	f023 0107 	bic.w	r1, r3, #7
9000789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900078a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900078a2:	4a78      	ldr	r2, [pc, #480]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900078a4:	430b      	orrs	r3, r1
900078a6:	6513      	str	r3, [r2, #80]	@ 0x50
900078a8:	e003      	b.n	900078b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
900078aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900078ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
900078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
900078ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
900078be:	f04f 0b00 	mov.w	fp, #0
900078c2:	ea5a 030b 	orrs.w	r3, sl, fp
900078c6:	d04c      	beq.n	90007962 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
900078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900078cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
900078ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900078d2:	d030      	beq.n	90007936 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
900078d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900078d8:	d829      	bhi.n	9000792e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900078da:	2bc0      	cmp	r3, #192	@ 0xc0
900078dc:	d02d      	beq.n	9000793a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
900078de:	2bc0      	cmp	r3, #192	@ 0xc0
900078e0:	d825      	bhi.n	9000792e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900078e2:	2b80      	cmp	r3, #128	@ 0x80
900078e4:	d018      	beq.n	90007918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
900078e6:	2b80      	cmp	r3, #128	@ 0x80
900078e8:	d821      	bhi.n	9000792e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900078ea:	2b00      	cmp	r3, #0
900078ec:	d002      	beq.n	900078f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
900078ee:	2b40      	cmp	r3, #64	@ 0x40
900078f0:	d007      	beq.n	90007902 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
900078f2:	e01c      	b.n	9000792e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900078f4:	4b63      	ldr	r3, [pc, #396]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900078f8:	4a62      	ldr	r2, [pc, #392]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900078fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900078fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007900:	e01c      	b.n	9000793c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007906:	3308      	adds	r3, #8
90007908:	2100      	movs	r1, #0
9000790a:	4618      	mov	r0, r3
9000790c:	f001 fbe6 	bl	900090dc <RCCEx_PLL2_Config>
90007910:	4603      	mov	r3, r0
90007912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007916:	e011      	b.n	9000793c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000791c:	3328      	adds	r3, #40	@ 0x28
9000791e:	2100      	movs	r1, #0
90007920:	4618      	mov	r0, r3
90007922:	f001 fc8d 	bl	90009240 <RCCEx_PLL3_Config>
90007926:	4603      	mov	r3, r0
90007928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
9000792c:	e006      	b.n	9000793c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000792e:	2301      	movs	r3, #1
90007930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007934:	e002      	b.n	9000793c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007936:	bf00      	nop
90007938:	e000      	b.n	9000793c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
9000793a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000793c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007940:	2b00      	cmp	r3, #0
90007942:	d10a      	bne.n	9000795a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007944:	4b4f      	ldr	r3, [pc, #316]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007948:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
9000794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007952:	4a4c      	ldr	r2, [pc, #304]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007954:	430b      	orrs	r3, r1
90007956:	6513      	str	r3, [r2, #80]	@ 0x50
90007958:	e003      	b.n	90007962 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000795a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000795e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007966:	e9d3 2300 	ldrd	r2, r3, [r3]
9000796a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
9000796e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007972:	2300      	movs	r3, #0
90007974:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007978:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
9000797c:	460b      	mov	r3, r1
9000797e:	4313      	orrs	r3, r2
90007980:	d053      	beq.n	90007a2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007986:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
9000798a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
9000798e:	d035      	beq.n	900079fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007990:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007994:	d82e      	bhi.n	900079f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007996:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
9000799a:	d031      	beq.n	90007a00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
9000799c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
900079a0:	d828      	bhi.n	900079f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
900079a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
900079a6:	d01a      	beq.n	900079de <HAL_RCCEx_PeriphCLKConfig+0x292>
900079a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
900079ac:	d822      	bhi.n	900079f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
900079ae:	2b00      	cmp	r3, #0
900079b0:	d003      	beq.n	900079ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
900079b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900079b6:	d007      	beq.n	900079c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
900079b8:	e01c      	b.n	900079f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900079ba:	4b32      	ldr	r3, [pc, #200]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900079be:	4a31      	ldr	r2, [pc, #196]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900079c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900079c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900079c6:	e01c      	b.n	90007a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900079cc:	3308      	adds	r3, #8
900079ce:	2100      	movs	r1, #0
900079d0:	4618      	mov	r0, r3
900079d2:	f001 fb83 	bl	900090dc <RCCEx_PLL2_Config>
900079d6:	4603      	mov	r3, r0
900079d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
900079dc:	e011      	b.n	90007a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900079e2:	3328      	adds	r3, #40	@ 0x28
900079e4:	2100      	movs	r1, #0
900079e6:	4618      	mov	r0, r3
900079e8:	f001 fc2a 	bl	90009240 <RCCEx_PLL3_Config>
900079ec:	4603      	mov	r3, r0
900079ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900079f2:	e006      	b.n	90007a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
900079f4:	2301      	movs	r3, #1
900079f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900079fa:	e002      	b.n	90007a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900079fc:	bf00      	nop
900079fe:	e000      	b.n	90007a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007a00:	bf00      	nop
    }

    if (ret == HAL_OK)
90007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007a06:	2b00      	cmp	r3, #0
90007a08:	d10b      	bne.n	90007a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007a0a:	4b1e      	ldr	r3, [pc, #120]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007a0e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007a1a:	4a1a      	ldr	r2, [pc, #104]	@ (90007a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a1c:	430b      	orrs	r3, r1
90007a1e:	6593      	str	r3, [r2, #88]	@ 0x58
90007a20:	e003      	b.n	90007a2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007a32:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007a36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007a3a:	2300      	movs	r3, #0
90007a3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007a40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007a44:	460b      	mov	r3, r1
90007a46:	4313      	orrs	r3, r2
90007a48:	d056      	beq.n	90007af8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007a52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007a56:	d038      	beq.n	90007aca <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007a58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007a5c:	d831      	bhi.n	90007ac2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007a5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007a62:	d034      	beq.n	90007ace <HAL_RCCEx_PeriphCLKConfig+0x382>
90007a64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007a68:	d82b      	bhi.n	90007ac2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007a6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007a6e:	d01d      	beq.n	90007aac <HAL_RCCEx_PeriphCLKConfig+0x360>
90007a70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007a74:	d825      	bhi.n	90007ac2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007a76:	2b00      	cmp	r3, #0
90007a78:	d006      	beq.n	90007a88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007a7e:	d00a      	beq.n	90007a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007a80:	e01f      	b.n	90007ac2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007a82:	bf00      	nop
90007a84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007a88:	4ba2      	ldr	r3, [pc, #648]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007a8c:	4aa1      	ldr	r2, [pc, #644]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007a94:	e01c      	b.n	90007ad0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a9a:	3308      	adds	r3, #8
90007a9c:	2100      	movs	r1, #0
90007a9e:	4618      	mov	r0, r3
90007aa0:	f001 fb1c 	bl	900090dc <RCCEx_PLL2_Config>
90007aa4:	4603      	mov	r3, r0
90007aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007aaa:	e011      	b.n	90007ad0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ab0:	3328      	adds	r3, #40	@ 0x28
90007ab2:	2100      	movs	r1, #0
90007ab4:	4618      	mov	r0, r3
90007ab6:	f001 fbc3 	bl	90009240 <RCCEx_PLL3_Config>
90007aba:	4603      	mov	r3, r0
90007abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ac0:	e006      	b.n	90007ad0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007ac2:	2301      	movs	r3, #1
90007ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ac8:	e002      	b.n	90007ad0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007aca:	bf00      	nop
90007acc:	e000      	b.n	90007ad0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007ace:	bf00      	nop
    }

    if (ret == HAL_OK)
90007ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ad4:	2b00      	cmp	r3, #0
90007ad6:	d10b      	bne.n	90007af0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007ad8:	4b8e      	ldr	r3, [pc, #568]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007adc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ae4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007ae8:	4a8a      	ldr	r2, [pc, #552]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007aea:	430b      	orrs	r3, r1
90007aec:	6593      	str	r3, [r2, #88]	@ 0x58
90007aee:	e003      	b.n	90007af8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
90007b00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007b04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007b08:	2300      	movs	r3, #0
90007b0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007b0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007b12:	460b      	mov	r3, r1
90007b14:	4313      	orrs	r3, r2
90007b16:	d03a      	beq.n	90007b8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007b1e:	2b30      	cmp	r3, #48	@ 0x30
90007b20:	d01f      	beq.n	90007b62 <HAL_RCCEx_PeriphCLKConfig+0x416>
90007b22:	2b30      	cmp	r3, #48	@ 0x30
90007b24:	d819      	bhi.n	90007b5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007b26:	2b20      	cmp	r3, #32
90007b28:	d00c      	beq.n	90007b44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007b2a:	2b20      	cmp	r3, #32
90007b2c:	d815      	bhi.n	90007b5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007b2e:	2b00      	cmp	r3, #0
90007b30:	d019      	beq.n	90007b66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007b32:	2b10      	cmp	r3, #16
90007b34:	d111      	bne.n	90007b5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007b36:	4b77      	ldr	r3, [pc, #476]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007b3a:	4a76      	ldr	r2, [pc, #472]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007b42:	e011      	b.n	90007b68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b48:	3308      	adds	r3, #8
90007b4a:	2102      	movs	r1, #2
90007b4c:	4618      	mov	r0, r3
90007b4e:	f001 fac5 	bl	900090dc <RCCEx_PLL2_Config>
90007b52:	4603      	mov	r3, r0
90007b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007b58:	e006      	b.n	90007b68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007b5a:	2301      	movs	r3, #1
90007b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007b60:	e002      	b.n	90007b68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007b62:	bf00      	nop
90007b64:	e000      	b.n	90007b68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007b66:	bf00      	nop
    }

    if (ret == HAL_OK)
90007b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007b6c:	2b00      	cmp	r3, #0
90007b6e:	d10a      	bne.n	90007b86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007b70:	4b68      	ldr	r3, [pc, #416]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007b74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007b7e:	4a65      	ldr	r2, [pc, #404]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007b80:	430b      	orrs	r3, r1
90007b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
90007b84:	e003      	b.n	90007b8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
90007b96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90007b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90007b9e:	2300      	movs	r3, #0
90007ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90007ba4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90007ba8:	460b      	mov	r3, r1
90007baa:	4313      	orrs	r3, r2
90007bac:	d051      	beq.n	90007c52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007bb8:	d035      	beq.n	90007c26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
90007bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007bbe:	d82e      	bhi.n	90007c1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007bc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007bc4:	d031      	beq.n	90007c2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
90007bc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007bca:	d828      	bhi.n	90007c1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007bd0:	d01a      	beq.n	90007c08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90007bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007bd6:	d822      	bhi.n	90007c1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007bd8:	2b00      	cmp	r3, #0
90007bda:	d003      	beq.n	90007be4 <HAL_RCCEx_PeriphCLKConfig+0x498>
90007bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90007be0:	d007      	beq.n	90007bf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90007be2:	e01c      	b.n	90007c1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007be4:	4b4b      	ldr	r3, [pc, #300]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007be8:	4a4a      	ldr	r2, [pc, #296]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007bf0:	e01c      	b.n	90007c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bf6:	3308      	adds	r3, #8
90007bf8:	2100      	movs	r1, #0
90007bfa:	4618      	mov	r0, r3
90007bfc:	f001 fa6e 	bl	900090dc <RCCEx_PLL2_Config>
90007c00:	4603      	mov	r3, r0
90007c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007c06:	e011      	b.n	90007c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c0c:	3328      	adds	r3, #40	@ 0x28
90007c0e:	2100      	movs	r1, #0
90007c10:	4618      	mov	r0, r3
90007c12:	f001 fb15 	bl	90009240 <RCCEx_PLL3_Config>
90007c16:	4603      	mov	r3, r0
90007c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007c1c:	e006      	b.n	90007c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007c1e:	2301      	movs	r3, #1
90007c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c24:	e002      	b.n	90007c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007c26:	bf00      	nop
90007c28:	e000      	b.n	90007c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c30:	2b00      	cmp	r3, #0
90007c32:	d10a      	bne.n	90007c4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90007c34:	4b37      	ldr	r3, [pc, #220]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007c38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90007c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007c42:	4a34      	ldr	r2, [pc, #208]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007c44:	430b      	orrs	r3, r1
90007c46:	6513      	str	r3, [r2, #80]	@ 0x50
90007c48:	e003      	b.n	90007c52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
90007c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90007c62:	2300      	movs	r3, #0
90007c64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90007c68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90007c6c:	460b      	mov	r3, r1
90007c6e:	4313      	orrs	r3, r2
90007c70:	d056      	beq.n	90007d20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90007c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90007c7c:	d033      	beq.n	90007ce6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
90007c7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90007c82:	d82c      	bhi.n	90007cde <HAL_RCCEx_PeriphCLKConfig+0x592>
90007c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90007c88:	d02f      	beq.n	90007cea <HAL_RCCEx_PeriphCLKConfig+0x59e>
90007c8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90007c8e:	d826      	bhi.n	90007cde <HAL_RCCEx_PeriphCLKConfig+0x592>
90007c90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90007c94:	d02b      	beq.n	90007cee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90007c96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90007c9a:	d820      	bhi.n	90007cde <HAL_RCCEx_PeriphCLKConfig+0x592>
90007c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007ca0:	d012      	beq.n	90007cc8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90007ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007ca6:	d81a      	bhi.n	90007cde <HAL_RCCEx_PeriphCLKConfig+0x592>
90007ca8:	2b00      	cmp	r3, #0
90007caa:	d022      	beq.n	90007cf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90007cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90007cb0:	d115      	bne.n	90007cde <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cb6:	3308      	adds	r3, #8
90007cb8:	2101      	movs	r1, #1
90007cba:	4618      	mov	r0, r3
90007cbc:	f001 fa0e 	bl	900090dc <RCCEx_PLL2_Config>
90007cc0:	4603      	mov	r3, r0
90007cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90007cc6:	e015      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ccc:	3328      	adds	r3, #40	@ 0x28
90007cce:	2101      	movs	r1, #1
90007cd0:	4618      	mov	r0, r3
90007cd2:	f001 fab5 	bl	90009240 <RCCEx_PLL3_Config>
90007cd6:	4603      	mov	r3, r0
90007cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90007cdc:	e00a      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007cde:	2301      	movs	r3, #1
90007ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ce4:	e006      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007ce6:	bf00      	nop
90007ce8:	e004      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007cea:	bf00      	nop
90007cec:	e002      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007cee:	bf00      	nop
90007cf0:	e000      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
90007cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cf8:	2b00      	cmp	r3, #0
90007cfa:	d10d      	bne.n	90007d18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90007cfc:	4b05      	ldr	r3, [pc, #20]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007d00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90007d0a:	4a02      	ldr	r2, [pc, #8]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d0c:	430b      	orrs	r3, r1
90007d0e:	6513      	str	r3, [r2, #80]	@ 0x50
90007d10:	e006      	b.n	90007d20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90007d12:	bf00      	nop
90007d14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
90007d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90007d30:	2300      	movs	r3, #0
90007d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90007d36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
90007d3a:	460b      	mov	r3, r1
90007d3c:	4313      	orrs	r3, r2
90007d3e:	d055      	beq.n	90007dec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90007d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90007d4c:	d033      	beq.n	90007db6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
90007d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90007d52:	d82c      	bhi.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x662>
90007d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90007d58:	d02f      	beq.n	90007dba <HAL_RCCEx_PeriphCLKConfig+0x66e>
90007d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90007d5e:	d826      	bhi.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x662>
90007d60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90007d64:	d02b      	beq.n	90007dbe <HAL_RCCEx_PeriphCLKConfig+0x672>
90007d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90007d6a:	d820      	bhi.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x662>
90007d6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90007d70:	d012      	beq.n	90007d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90007d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90007d76:	d81a      	bhi.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x662>
90007d78:	2b00      	cmp	r3, #0
90007d7a:	d022      	beq.n	90007dc2 <HAL_RCCEx_PeriphCLKConfig+0x676>
90007d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90007d80:	d115      	bne.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d86:	3308      	adds	r3, #8
90007d88:	2101      	movs	r1, #1
90007d8a:	4618      	mov	r0, r3
90007d8c:	f001 f9a6 	bl	900090dc <RCCEx_PLL2_Config>
90007d90:	4603      	mov	r3, r0
90007d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90007d96:	e015      	b.n	90007dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d9c:	3328      	adds	r3, #40	@ 0x28
90007d9e:	2101      	movs	r1, #1
90007da0:	4618      	mov	r0, r3
90007da2:	f001 fa4d 	bl	90009240 <RCCEx_PLL3_Config>
90007da6:	4603      	mov	r3, r0
90007da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90007dac:	e00a      	b.n	90007dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90007dae:	2301      	movs	r3, #1
90007db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007db4:	e006      	b.n	90007dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90007db6:	bf00      	nop
90007db8:	e004      	b.n	90007dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90007dba:	bf00      	nop
90007dbc:	e002      	b.n	90007dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90007dbe:	bf00      	nop
90007dc0:	e000      	b.n	90007dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90007dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
90007dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007dc8:	2b00      	cmp	r3, #0
90007dca:	d10b      	bne.n	90007de4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90007dcc:	4ba3      	ldr	r3, [pc, #652]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007dd0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90007ddc:	4a9f      	ldr	r2, [pc, #636]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007dde:	430b      	orrs	r3, r1
90007de0:	6593      	str	r3, [r2, #88]	@ 0x58
90007de2:	e003      	b.n	90007dec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007df4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90007df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
90007dfc:	2300      	movs	r3, #0
90007dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90007e02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90007e06:	460b      	mov	r3, r1
90007e08:	4313      	orrs	r3, r2
90007e0a:	d037      	beq.n	90007e7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
90007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90007e16:	d00e      	beq.n	90007e36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90007e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90007e1c:	d816      	bhi.n	90007e4c <HAL_RCCEx_PeriphCLKConfig+0x700>
90007e1e:	2b00      	cmp	r3, #0
90007e20:	d018      	beq.n	90007e54 <HAL_RCCEx_PeriphCLKConfig+0x708>
90007e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90007e26:	d111      	bne.n	90007e4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e28:	4b8c      	ldr	r3, [pc, #560]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e2c:	4a8b      	ldr	r2, [pc, #556]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90007e34:	e00f      	b.n	90007e56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90007e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e3a:	3308      	adds	r3, #8
90007e3c:	2101      	movs	r1, #1
90007e3e:	4618      	mov	r0, r3
90007e40:	f001 f94c 	bl	900090dc <RCCEx_PLL2_Config>
90007e44:	4603      	mov	r3, r0
90007e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90007e4a:	e004      	b.n	90007e56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007e4c:	2301      	movs	r3, #1
90007e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007e52:	e000      	b.n	90007e56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90007e54:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e5a:	2b00      	cmp	r3, #0
90007e5c:	d10a      	bne.n	90007e74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90007e5e:	4b7f      	ldr	r3, [pc, #508]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007e62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90007e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e6c:	4a7b      	ldr	r2, [pc, #492]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007e6e:	430b      	orrs	r3, r1
90007e70:	6513      	str	r3, [r2, #80]	@ 0x50
90007e72:	e003      	b.n	90007e7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90007e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90007e8c:	2300      	movs	r3, #0
90007e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90007e92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90007e96:	460b      	mov	r3, r1
90007e98:	4313      	orrs	r3, r2
90007e9a:	d039      	beq.n	90007f10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007ea2:	2b03      	cmp	r3, #3
90007ea4:	d81c      	bhi.n	90007ee0 <HAL_RCCEx_PeriphCLKConfig+0x794>
90007ea6:	a201      	add	r2, pc, #4	@ (adr r2, 90007eac <HAL_RCCEx_PeriphCLKConfig+0x760>)
90007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007eac:	90007ee9 	.word	0x90007ee9
90007eb0:	90007ebd 	.word	0x90007ebd
90007eb4:	90007ecb 	.word	0x90007ecb
90007eb8:	90007ee9 	.word	0x90007ee9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ebc:	4b67      	ldr	r3, [pc, #412]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ec0:	4a66      	ldr	r2, [pc, #408]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90007ec8:	e00f      	b.n	90007eea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ece:	3308      	adds	r3, #8
90007ed0:	2102      	movs	r1, #2
90007ed2:	4618      	mov	r0, r3
90007ed4:	f001 f902 	bl	900090dc <RCCEx_PLL2_Config>
90007ed8:	4603      	mov	r3, r0
90007eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90007ede:	e004      	b.n	90007eea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007ee0:	2301      	movs	r3, #1
90007ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ee6:	e000      	b.n	90007eea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90007ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
90007eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007eee:	2b00      	cmp	r3, #0
90007ef0:	d10a      	bne.n	90007f08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90007ef2:	4b5a      	ldr	r3, [pc, #360]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007ef6:	f023 0103 	bic.w	r1, r3, #3
90007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007f00:	4a56      	ldr	r2, [pc, #344]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007f02:	430b      	orrs	r3, r1
90007f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
90007f06:	e003      	b.n	90007f10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
90007f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
90007f20:	2300      	movs	r3, #0
90007f22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
90007f26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
90007f2a:	460b      	mov	r3, r1
90007f2c:	4313      	orrs	r3, r2
90007f2e:	f000 809f 	beq.w	90008070 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90007f32:	4b4b      	ldr	r3, [pc, #300]	@ (90008060 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90007f34:	681b      	ldr	r3, [r3, #0]
90007f36:	4a4a      	ldr	r2, [pc, #296]	@ (90008060 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90007f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90007f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90007f3e:	f7fa ff77 	bl	90002e30 <HAL_GetTick>
90007f42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007f46:	e00b      	b.n	90007f60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007f48:	f7fa ff72 	bl	90002e30 <HAL_GetTick>
90007f4c:	4602      	mov	r2, r0
90007f4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90007f52:	1ad3      	subs	r3, r2, r3
90007f54:	2b64      	cmp	r3, #100	@ 0x64
90007f56:	d903      	bls.n	90007f60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90007f58:	2303      	movs	r3, #3
90007f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f5e:	e005      	b.n	90007f6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007f60:	4b3f      	ldr	r3, [pc, #252]	@ (90008060 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90007f62:	681b      	ldr	r3, [r3, #0]
90007f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007f68:	2b00      	cmp	r3, #0
90007f6a:	d0ed      	beq.n	90007f48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90007f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f70:	2b00      	cmp	r3, #0
90007f72:	d179      	bne.n	90008068 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90007f74:	4b39      	ldr	r3, [pc, #228]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007f76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90007f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90007f80:	4053      	eors	r3, r2
90007f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90007f86:	2b00      	cmp	r3, #0
90007f88:	d015      	beq.n	90007fb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90007f8a:	4b34      	ldr	r3, [pc, #208]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90007f92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90007f96:	4b31      	ldr	r3, [pc, #196]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007f9a:	4a30      	ldr	r2, [pc, #192]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007fa0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90007fa2:	4b2e      	ldr	r3, [pc, #184]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007fa6:	4a2d      	ldr	r2, [pc, #180]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90007fac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90007fae:	4a2b      	ldr	r2, [pc, #172]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90007fb4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90007fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007fc2:	d118      	bne.n	90007ff6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007fc4:	f7fa ff34 	bl	90002e30 <HAL_GetTick>
90007fc8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007fcc:	e00d      	b.n	90007fea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007fce:	f7fa ff2f 	bl	90002e30 <HAL_GetTick>
90007fd2:	4602      	mov	r2, r0
90007fd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90007fd8:	1ad2      	subs	r2, r2, r3
90007fda:	f241 3388 	movw	r3, #5000	@ 0x1388
90007fde:	429a      	cmp	r2, r3
90007fe0:	d903      	bls.n	90007fea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90007fe2:	2303      	movs	r3, #3
90007fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90007fe8:	e005      	b.n	90007ff6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007fea:	4b1c      	ldr	r3, [pc, #112]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90007fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007fee:	f003 0302 	and.w	r3, r3, #2
90007ff2:	2b00      	cmp	r3, #0
90007ff4:	d0eb      	beq.n	90007fce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90007ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ffa:	2b00      	cmp	r3, #0
90007ffc:	d129      	bne.n	90008052 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000800a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000800e:	d10e      	bne.n	9000802e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90008010:	4b12      	ldr	r3, [pc, #72]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008012:	691b      	ldr	r3, [r3, #16]
90008014:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000801c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008020:	091a      	lsrs	r2, r3, #4
90008022:	4b10      	ldr	r3, [pc, #64]	@ (90008064 <HAL_RCCEx_PeriphCLKConfig+0x918>)
90008024:	4013      	ands	r3, r2
90008026:	4a0d      	ldr	r2, [pc, #52]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008028:	430b      	orrs	r3, r1
9000802a:	6113      	str	r3, [r2, #16]
9000802c:	e005      	b.n	9000803a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000802e:	4b0b      	ldr	r3, [pc, #44]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008030:	691b      	ldr	r3, [r3, #16]
90008032:	4a0a      	ldr	r2, [pc, #40]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008034:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90008038:	6113      	str	r3, [r2, #16]
9000803a:	4b08      	ldr	r3, [pc, #32]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000803c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
9000803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008046:	f3c3 030b 	ubfx	r3, r3, #0, #12
9000804a:	4a04      	ldr	r2, [pc, #16]	@ (9000805c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000804c:	430b      	orrs	r3, r1
9000804e:	6713      	str	r3, [r2, #112]	@ 0x70
90008050:	e00e      	b.n	90008070 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
90008052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
9000805a:	e009      	b.n	90008070 <HAL_RCCEx_PeriphCLKConfig+0x924>
9000805c:	58024400 	.word	0x58024400
90008060:	58024800 	.word	0x58024800
90008064:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000806c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008074:	e9d3 2300 	ldrd	r2, r3, [r3]
90008078:	f002 0301 	and.w	r3, r2, #1
9000807c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008080:	2300      	movs	r3, #0
90008082:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008086:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
9000808a:	460b      	mov	r3, r1
9000808c:	4313      	orrs	r3, r2
9000808e:	f000 8089 	beq.w	900081a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008098:	2b28      	cmp	r3, #40	@ 0x28
9000809a:	d86b      	bhi.n	90008174 <HAL_RCCEx_PeriphCLKConfig+0xa28>
9000809c:	a201      	add	r2, pc, #4	@ (adr r2, 900080a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900080a2:	bf00      	nop
900080a4:	9000817d 	.word	0x9000817d
900080a8:	90008175 	.word	0x90008175
900080ac:	90008175 	.word	0x90008175
900080b0:	90008175 	.word	0x90008175
900080b4:	90008175 	.word	0x90008175
900080b8:	90008175 	.word	0x90008175
900080bc:	90008175 	.word	0x90008175
900080c0:	90008175 	.word	0x90008175
900080c4:	90008149 	.word	0x90008149
900080c8:	90008175 	.word	0x90008175
900080cc:	90008175 	.word	0x90008175
900080d0:	90008175 	.word	0x90008175
900080d4:	90008175 	.word	0x90008175
900080d8:	90008175 	.word	0x90008175
900080dc:	90008175 	.word	0x90008175
900080e0:	90008175 	.word	0x90008175
900080e4:	9000815f 	.word	0x9000815f
900080e8:	90008175 	.word	0x90008175
900080ec:	90008175 	.word	0x90008175
900080f0:	90008175 	.word	0x90008175
900080f4:	90008175 	.word	0x90008175
900080f8:	90008175 	.word	0x90008175
900080fc:	90008175 	.word	0x90008175
90008100:	90008175 	.word	0x90008175
90008104:	9000817d 	.word	0x9000817d
90008108:	90008175 	.word	0x90008175
9000810c:	90008175 	.word	0x90008175
90008110:	90008175 	.word	0x90008175
90008114:	90008175 	.word	0x90008175
90008118:	90008175 	.word	0x90008175
9000811c:	90008175 	.word	0x90008175
90008120:	90008175 	.word	0x90008175
90008124:	9000817d 	.word	0x9000817d
90008128:	90008175 	.word	0x90008175
9000812c:	90008175 	.word	0x90008175
90008130:	90008175 	.word	0x90008175
90008134:	90008175 	.word	0x90008175
90008138:	90008175 	.word	0x90008175
9000813c:	90008175 	.word	0x90008175
90008140:	90008175 	.word	0x90008175
90008144:	9000817d 	.word	0x9000817d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000814c:	3308      	adds	r3, #8
9000814e:	2101      	movs	r1, #1
90008150:	4618      	mov	r0, r3
90008152:	f000 ffc3 	bl	900090dc <RCCEx_PLL2_Config>
90008156:	4603      	mov	r3, r0
90008158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000815c:	e00f      	b.n	9000817e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008162:	3328      	adds	r3, #40	@ 0x28
90008164:	2101      	movs	r1, #1
90008166:	4618      	mov	r0, r3
90008168:	f001 f86a 	bl	90009240 <RCCEx_PLL3_Config>
9000816c:	4603      	mov	r3, r0
9000816e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008172:	e004      	b.n	9000817e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008174:	2301      	movs	r3, #1
90008176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000817a:	e000      	b.n	9000817e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
9000817c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000817e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008182:	2b00      	cmp	r3, #0
90008184:	d10a      	bne.n	9000819c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008186:	4bbf      	ldr	r3, [pc, #764]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000818a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008194:	4abb      	ldr	r2, [pc, #748]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008196:	430b      	orrs	r3, r1
90008198:	6553      	str	r3, [r2, #84]	@ 0x54
9000819a:	e003      	b.n	900081a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000819c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
900081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
900081ac:	f002 0302 	and.w	r3, r2, #2
900081b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
900081b4:	2300      	movs	r3, #0
900081b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
900081ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
900081be:	460b      	mov	r3, r1
900081c0:	4313      	orrs	r3, r2
900081c2:	d041      	beq.n	90008248 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
900081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900081ca:	2b05      	cmp	r3, #5
900081cc:	d824      	bhi.n	90008218 <HAL_RCCEx_PeriphCLKConfig+0xacc>
900081ce:	a201      	add	r2, pc, #4	@ (adr r2, 900081d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
900081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900081d4:	90008221 	.word	0x90008221
900081d8:	900081ed 	.word	0x900081ed
900081dc:	90008203 	.word	0x90008203
900081e0:	90008221 	.word	0x90008221
900081e4:	90008221 	.word	0x90008221
900081e8:	90008221 	.word	0x90008221
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081f0:	3308      	adds	r3, #8
900081f2:	2101      	movs	r1, #1
900081f4:	4618      	mov	r0, r3
900081f6:	f000 ff71 	bl	900090dc <RCCEx_PLL2_Config>
900081fa:	4603      	mov	r3, r0
900081fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008200:	e00f      	b.n	90008222 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008206:	3328      	adds	r3, #40	@ 0x28
90008208:	2101      	movs	r1, #1
9000820a:	4618      	mov	r0, r3
9000820c:	f001 f818 	bl	90009240 <RCCEx_PLL3_Config>
90008210:	4603      	mov	r3, r0
90008212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008216:	e004      	b.n	90008222 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008218:	2301      	movs	r3, #1
9000821a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000821e:	e000      	b.n	90008222 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90008220:	bf00      	nop
    }

    if (ret == HAL_OK)
90008222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008226:	2b00      	cmp	r3, #0
90008228:	d10a      	bne.n	90008240 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000822a:	4b96      	ldr	r3, [pc, #600]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000822e:	f023 0107 	bic.w	r1, r3, #7
90008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008236:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008238:	4a92      	ldr	r2, [pc, #584]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000823a:	430b      	orrs	r3, r1
9000823c:	6553      	str	r3, [r2, #84]	@ 0x54
9000823e:	e003      	b.n	90008248 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000824c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008250:	f002 0304 	and.w	r3, r2, #4
90008254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90008258:	2300      	movs	r3, #0
9000825a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
9000825e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
90008262:	460b      	mov	r3, r1
90008264:	4313      	orrs	r3, r2
90008266:	d044      	beq.n	900082f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000826c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008270:	2b05      	cmp	r3, #5
90008272:	d825      	bhi.n	900082c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008274:	a201      	add	r2, pc, #4	@ (adr r2, 9000827c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000827a:	bf00      	nop
9000827c:	900082c9 	.word	0x900082c9
90008280:	90008295 	.word	0x90008295
90008284:	900082ab 	.word	0x900082ab
90008288:	900082c9 	.word	0x900082c9
9000828c:	900082c9 	.word	0x900082c9
90008290:	900082c9 	.word	0x900082c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008298:	3308      	adds	r3, #8
9000829a:	2101      	movs	r1, #1
9000829c:	4618      	mov	r0, r3
9000829e:	f000 ff1d 	bl	900090dc <RCCEx_PLL2_Config>
900082a2:	4603      	mov	r3, r0
900082a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900082a8:	e00f      	b.n	900082ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082ae:	3328      	adds	r3, #40	@ 0x28
900082b0:	2101      	movs	r1, #1
900082b2:	4618      	mov	r0, r3
900082b4:	f000 ffc4 	bl	90009240 <RCCEx_PLL3_Config>
900082b8:	4603      	mov	r3, r0
900082ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900082be:	e004      	b.n	900082ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900082c0:	2301      	movs	r3, #1
900082c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900082c6:	e000      	b.n	900082ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
900082c8:	bf00      	nop
    }

    if (ret == HAL_OK)
900082ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082ce:	2b00      	cmp	r3, #0
900082d0:	d10b      	bne.n	900082ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
900082d2:	4b6c      	ldr	r3, [pc, #432]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900082d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900082d6:	f023 0107 	bic.w	r1, r3, #7
900082da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
900082e2:	4a68      	ldr	r2, [pc, #416]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900082e4:	430b      	orrs	r3, r1
900082e6:	6593      	str	r3, [r2, #88]	@ 0x58
900082e8:	e003      	b.n	900082f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
900082ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
900082fa:	f002 0320 	and.w	r3, r2, #32
900082fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90008302:	2300      	movs	r3, #0
90008304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
9000830c:	460b      	mov	r3, r1
9000830e:	4313      	orrs	r3, r2
90008310:	d055      	beq.n	900083be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000831a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000831e:	d033      	beq.n	90008388 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008324:	d82c      	bhi.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000832a:	d02f      	beq.n	9000838c <HAL_RCCEx_PeriphCLKConfig+0xc40>
9000832c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008330:	d826      	bhi.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008332:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008336:	d02b      	beq.n	90008390 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90008338:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000833c:	d820      	bhi.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000833e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008342:	d012      	beq.n	9000836a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
90008344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008348:	d81a      	bhi.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000834a:	2b00      	cmp	r3, #0
9000834c:	d022      	beq.n	90008394 <HAL_RCCEx_PeriphCLKConfig+0xc48>
9000834e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008352:	d115      	bne.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008358:	3308      	adds	r3, #8
9000835a:	2100      	movs	r1, #0
9000835c:	4618      	mov	r0, r3
9000835e:	f000 febd 	bl	900090dc <RCCEx_PLL2_Config>
90008362:	4603      	mov	r3, r0
90008364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008368:	e015      	b.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000836e:	3328      	adds	r3, #40	@ 0x28
90008370:	2102      	movs	r1, #2
90008372:	4618      	mov	r0, r3
90008374:	f000 ff64 	bl	90009240 <RCCEx_PLL3_Config>
90008378:	4603      	mov	r3, r0
9000837a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000837e:	e00a      	b.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008380:	2301      	movs	r3, #1
90008382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008386:	e006      	b.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008388:	bf00      	nop
9000838a:	e004      	b.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000838c:	bf00      	nop
9000838e:	e002      	b.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008390:	bf00      	nop
90008392:	e000      	b.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008394:	bf00      	nop
    }

    if (ret == HAL_OK)
90008396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000839a:	2b00      	cmp	r3, #0
9000839c:	d10b      	bne.n	900083b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000839e:	4b39      	ldr	r3, [pc, #228]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900083a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900083a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900083a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900083ae:	4a35      	ldr	r2, [pc, #212]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900083b0:	430b      	orrs	r3, r1
900083b2:	6553      	str	r3, [r2, #84]	@ 0x54
900083b4:	e003      	b.n	900083be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
900083b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
900083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
900083c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
900083ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
900083ce:	2300      	movs	r3, #0
900083d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
900083d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
900083d8:	460b      	mov	r3, r1
900083da:	4313      	orrs	r3, r2
900083dc:	d058      	beq.n	90008490 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
900083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900083e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
900083ea:	d033      	beq.n	90008454 <HAL_RCCEx_PeriphCLKConfig+0xd08>
900083ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
900083f0:	d82c      	bhi.n	9000844c <HAL_RCCEx_PeriphCLKConfig+0xd00>
900083f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900083f6:	d02f      	beq.n	90008458 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
900083f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900083fc:	d826      	bhi.n	9000844c <HAL_RCCEx_PeriphCLKConfig+0xd00>
900083fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008402:	d02b      	beq.n	9000845c <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008404:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008408:	d820      	bhi.n	9000844c <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000840a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000840e:	d012      	beq.n	90008436 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008414:	d81a      	bhi.n	9000844c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008416:	2b00      	cmp	r3, #0
90008418:	d022      	beq.n	90008460 <HAL_RCCEx_PeriphCLKConfig+0xd14>
9000841a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000841e:	d115      	bne.n	9000844c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008424:	3308      	adds	r3, #8
90008426:	2100      	movs	r1, #0
90008428:	4618      	mov	r0, r3
9000842a:	f000 fe57 	bl	900090dc <RCCEx_PLL2_Config>
9000842e:	4603      	mov	r3, r0
90008430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008434:	e015      	b.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000843a:	3328      	adds	r3, #40	@ 0x28
9000843c:	2102      	movs	r1, #2
9000843e:	4618      	mov	r0, r3
90008440:	f000 fefe 	bl	90009240 <RCCEx_PLL3_Config>
90008444:	4603      	mov	r3, r0
90008446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000844a:	e00a      	b.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000844c:	2301      	movs	r3, #1
9000844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008452:	e006      	b.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008454:	bf00      	nop
90008456:	e004      	b.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008458:	bf00      	nop
9000845a:	e002      	b.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000845c:	bf00      	nop
9000845e:	e000      	b.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008460:	bf00      	nop
    }

    if (ret == HAL_OK)
90008462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008466:	2b00      	cmp	r3, #0
90008468:	d10e      	bne.n	90008488 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000846a:	4b06      	ldr	r3, [pc, #24]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000846c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000846e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000847a:	4a02      	ldr	r2, [pc, #8]	@ (90008484 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000847c:	430b      	orrs	r3, r1
9000847e:	6593      	str	r3, [r2, #88]	@ 0x58
90008480:	e006      	b.n	90008490 <HAL_RCCEx_PeriphCLKConfig+0xd44>
90008482:	bf00      	nop
90008484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000848c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008494:	e9d3 2300 	ldrd	r2, r3, [r3]
90008498:	f002 0380 	and.w	r3, r2, #128	@ 0x80
9000849c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
900084a0:	2300      	movs	r3, #0
900084a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
900084a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
900084aa:	460b      	mov	r3, r1
900084ac:	4313      	orrs	r3, r2
900084ae:	d055      	beq.n	9000855c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
900084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900084b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900084bc:	d033      	beq.n	90008526 <HAL_RCCEx_PeriphCLKConfig+0xdda>
900084be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900084c2:	d82c      	bhi.n	9000851e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900084c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900084c8:	d02f      	beq.n	9000852a <HAL_RCCEx_PeriphCLKConfig+0xdde>
900084ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900084ce:	d826      	bhi.n	9000851e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900084d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900084d4:	d02b      	beq.n	9000852e <HAL_RCCEx_PeriphCLKConfig+0xde2>
900084d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900084da:	d820      	bhi.n	9000851e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900084dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900084e0:	d012      	beq.n	90008508 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
900084e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900084e6:	d81a      	bhi.n	9000851e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900084e8:	2b00      	cmp	r3, #0
900084ea:	d022      	beq.n	90008532 <HAL_RCCEx_PeriphCLKConfig+0xde6>
900084ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900084f0:	d115      	bne.n	9000851e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900084f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084f6:	3308      	adds	r3, #8
900084f8:	2100      	movs	r1, #0
900084fa:	4618      	mov	r0, r3
900084fc:	f000 fdee 	bl	900090dc <RCCEx_PLL2_Config>
90008500:	4603      	mov	r3, r0
90008502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008506:	e015      	b.n	90008534 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000850c:	3328      	adds	r3, #40	@ 0x28
9000850e:	2102      	movs	r1, #2
90008510:	4618      	mov	r0, r3
90008512:	f000 fe95 	bl	90009240 <RCCEx_PLL3_Config>
90008516:	4603      	mov	r3, r0
90008518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000851c:	e00a      	b.n	90008534 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000851e:	2301      	movs	r3, #1
90008520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008524:	e006      	b.n	90008534 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008526:	bf00      	nop
90008528:	e004      	b.n	90008534 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000852a:	bf00      	nop
9000852c:	e002      	b.n	90008534 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000852e:	bf00      	nop
90008530:	e000      	b.n	90008534 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008532:	bf00      	nop
    }

    if (ret == HAL_OK)
90008534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008538:	2b00      	cmp	r3, #0
9000853a:	d10b      	bne.n	90008554 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000853c:	4ba1      	ldr	r3, [pc, #644]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000853e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008540:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90008544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008548:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
9000854c:	4a9d      	ldr	r2, [pc, #628]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000854e:	430b      	orrs	r3, r1
90008550:	6593      	str	r3, [r2, #88]	@ 0x58
90008552:	e003      	b.n	9000855c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008560:	e9d3 2300 	ldrd	r2, r3, [r3]
90008564:	f002 0308 	and.w	r3, r2, #8
90008568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
9000856c:	2300      	movs	r3, #0
9000856e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008572:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008576:	460b      	mov	r3, r1
90008578:	4313      	orrs	r3, r2
9000857a:	d01e      	beq.n	900085ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008588:	d10c      	bne.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000858e:	3328      	adds	r3, #40	@ 0x28
90008590:	2102      	movs	r1, #2
90008592:	4618      	mov	r0, r3
90008594:	f000 fe54 	bl	90009240 <RCCEx_PLL3_Config>
90008598:	4603      	mov	r3, r0
9000859a:	2b00      	cmp	r3, #0
9000859c:	d002      	beq.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
9000859e:	2301      	movs	r3, #1
900085a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
900085a4:	4b87      	ldr	r3, [pc, #540]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900085a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900085a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
900085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900085b4:	4a83      	ldr	r2, [pc, #524]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900085b6:	430b      	orrs	r3, r1
900085b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085be:	e9d3 2300 	ldrd	r2, r3, [r3]
900085c2:	f002 0310 	and.w	r3, r2, #16
900085c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
900085ca:	2300      	movs	r3, #0
900085cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
900085d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
900085d4:	460b      	mov	r3, r1
900085d6:	4313      	orrs	r3, r2
900085d8:	d01e      	beq.n	90008618 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
900085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
900085e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900085e6:	d10c      	bne.n	90008602 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900085e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085ec:	3328      	adds	r3, #40	@ 0x28
900085ee:	2102      	movs	r1, #2
900085f0:	4618      	mov	r0, r3
900085f2:	f000 fe25 	bl	90009240 <RCCEx_PLL3_Config>
900085f6:	4603      	mov	r3, r0
900085f8:	2b00      	cmp	r3, #0
900085fa:	d002      	beq.n	90008602 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
900085fc:	2301      	movs	r3, #1
900085fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008602:	4b70      	ldr	r3, [pc, #448]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008606:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
9000860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000860e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008612:	4a6c      	ldr	r2, [pc, #432]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008614:	430b      	orrs	r3, r1
90008616:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000861c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008620:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008628:	2300      	movs	r3, #0
9000862a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
9000862e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008632:	460b      	mov	r3, r1
90008634:	4313      	orrs	r3, r2
90008636:	d03e      	beq.n	900086b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000863c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008644:	d022      	beq.n	9000868c <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000864a:	d81b      	bhi.n	90008684 <HAL_RCCEx_PeriphCLKConfig+0xf38>
9000864c:	2b00      	cmp	r3, #0
9000864e:	d003      	beq.n	90008658 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008654:	d00b      	beq.n	9000866e <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008656:	e015      	b.n	90008684 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000865c:	3308      	adds	r3, #8
9000865e:	2100      	movs	r1, #0
90008660:	4618      	mov	r0, r3
90008662:	f000 fd3b 	bl	900090dc <RCCEx_PLL2_Config>
90008666:	4603      	mov	r3, r0
90008668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
9000866c:	e00f      	b.n	9000868e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008672:	3328      	adds	r3, #40	@ 0x28
90008674:	2102      	movs	r1, #2
90008676:	4618      	mov	r0, r3
90008678:	f000 fde2 	bl	90009240 <RCCEx_PLL3_Config>
9000867c:	4603      	mov	r3, r0
9000867e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008682:	e004      	b.n	9000868e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008684:	2301      	movs	r3, #1
90008686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000868a:	e000      	b.n	9000868e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
9000868c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000868e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008692:	2b00      	cmp	r3, #0
90008694:	d10b      	bne.n	900086ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008696:	4b4b      	ldr	r3, [pc, #300]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000869a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
9000869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
900086a6:	4a47      	ldr	r2, [pc, #284]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900086a8:	430b      	orrs	r3, r1
900086aa:	6593      	str	r3, [r2, #88]	@ 0x58
900086ac:	e003      	b.n	900086b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
900086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
900086be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
900086c2:	67bb      	str	r3, [r7, #120]	@ 0x78
900086c4:	2300      	movs	r3, #0
900086c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
900086c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
900086cc:	460b      	mov	r3, r1
900086ce:	4313      	orrs	r3, r2
900086d0:	d03b      	beq.n	9000874a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
900086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900086da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900086de:	d01f      	beq.n	90008720 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
900086e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900086e4:	d818      	bhi.n	90008718 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
900086e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
900086ea:	d003      	beq.n	900086f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
900086ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900086f0:	d007      	beq.n	90008702 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
900086f2:	e011      	b.n	90008718 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900086f4:	4b33      	ldr	r3, [pc, #204]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900086f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900086f8:	4a32      	ldr	r2, [pc, #200]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900086fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900086fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008700:	e00f      	b.n	90008722 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008706:	3328      	adds	r3, #40	@ 0x28
90008708:	2101      	movs	r1, #1
9000870a:	4618      	mov	r0, r3
9000870c:	f000 fd98 	bl	90009240 <RCCEx_PLL3_Config>
90008710:	4603      	mov	r3, r0
90008712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008716:	e004      	b.n	90008722 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008718:	2301      	movs	r3, #1
9000871a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000871e:	e000      	b.n	90008722 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008720:	bf00      	nop
    }

    if (ret == HAL_OK)
90008722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008726:	2b00      	cmp	r3, #0
90008728:	d10b      	bne.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000872a:	4b26      	ldr	r3, [pc, #152]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000872c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000872e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000873a:	4a22      	ldr	r2, [pc, #136]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000873c:	430b      	orrs	r3, r1
9000873e:	6553      	str	r3, [r2, #84]	@ 0x54
90008740:	e003      	b.n	9000874a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000874e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008752:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008756:	673b      	str	r3, [r7, #112]	@ 0x70
90008758:	2300      	movs	r3, #0
9000875a:	677b      	str	r3, [r7, #116]	@ 0x74
9000875c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008760:	460b      	mov	r3, r1
90008762:	4313      	orrs	r3, r2
90008764:	d034      	beq.n	900087d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000876a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000876c:	2b00      	cmp	r3, #0
9000876e:	d003      	beq.n	90008778 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008774:	d007      	beq.n	90008786 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008776:	e011      	b.n	9000879c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008778:	4b12      	ldr	r3, [pc, #72]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000877a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000877c:	4a11      	ldr	r2, [pc, #68]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000877e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008784:	e00e      	b.n	900087a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000878a:	3308      	adds	r3, #8
9000878c:	2102      	movs	r1, #2
9000878e:	4618      	mov	r0, r3
90008790:	f000 fca4 	bl	900090dc <RCCEx_PLL2_Config>
90008794:	4603      	mov	r3, r0
90008796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
9000879a:	e003      	b.n	900087a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
9000879c:	2301      	movs	r3, #1
9000879e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900087a2:	bf00      	nop
    }

    if (ret == HAL_OK)
900087a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087a8:	2b00      	cmp	r3, #0
900087aa:	d10d      	bne.n	900087c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
900087ac:	4b05      	ldr	r3, [pc, #20]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900087ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900087b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
900087b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900087ba:	4a02      	ldr	r2, [pc, #8]	@ (900087c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900087bc:	430b      	orrs	r3, r1
900087be:	64d3      	str	r3, [r2, #76]	@ 0x4c
900087c0:	e006      	b.n	900087d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
900087c2:	bf00      	nop
900087c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900087c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
900087d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
900087d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
900087dc:	66bb      	str	r3, [r7, #104]	@ 0x68
900087de:	2300      	movs	r3, #0
900087e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
900087e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
900087e6:	460b      	mov	r3, r1
900087e8:	4313      	orrs	r3, r2
900087ea:	d00c      	beq.n	90008806 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087f0:	3328      	adds	r3, #40	@ 0x28
900087f2:	2102      	movs	r1, #2
900087f4:	4618      	mov	r0, r3
900087f6:	f000 fd23 	bl	90009240 <RCCEx_PLL3_Config>
900087fa:	4603      	mov	r3, r0
900087fc:	2b00      	cmp	r3, #0
900087fe:	d002      	beq.n	90008806 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008800:	2301      	movs	r3, #1
90008802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000880a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000880e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008812:	663b      	str	r3, [r7, #96]	@ 0x60
90008814:	2300      	movs	r3, #0
90008816:	667b      	str	r3, [r7, #100]	@ 0x64
90008818:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
9000881c:	460b      	mov	r3, r1
9000881e:	4313      	orrs	r3, r2
90008820:	d038      	beq.n	90008894 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
9000882a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000882e:	d018      	beq.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008834:	d811      	bhi.n	9000885a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000883a:	d014      	beq.n	90008866 <HAL_RCCEx_PeriphCLKConfig+0x111a>
9000883c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008840:	d80b      	bhi.n	9000885a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008842:	2b00      	cmp	r3, #0
90008844:	d011      	beq.n	9000886a <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000884a:	d106      	bne.n	9000885a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000884c:	4bc3      	ldr	r3, [pc, #780]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000884e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008850:	4ac2      	ldr	r2, [pc, #776]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008858:	e008      	b.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000885a:	2301      	movs	r3, #1
9000885c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008860:	e004      	b.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008862:	bf00      	nop
90008864:	e002      	b.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008866:	bf00      	nop
90008868:	e000      	b.n	9000886c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000886a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000886c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008870:	2b00      	cmp	r3, #0
90008872:	d10b      	bne.n	9000888c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008874:	4bb9      	ldr	r3, [pc, #740]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008878:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
9000887c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008884:	4ab5      	ldr	r2, [pc, #724]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008886:	430b      	orrs	r3, r1
90008888:	6553      	str	r3, [r2, #84]	@ 0x54
9000888a:	e003      	b.n	90008894 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000888c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008898:	e9d3 2300 	ldrd	r2, r3, [r3]
9000889c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
900088a0:	65bb      	str	r3, [r7, #88]	@ 0x58
900088a2:	2300      	movs	r3, #0
900088a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
900088a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
900088aa:	460b      	mov	r3, r1
900088ac:	4313      	orrs	r3, r2
900088ae:	d009      	beq.n	900088c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
900088b0:	4baa      	ldr	r3, [pc, #680]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900088b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900088b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
900088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900088be:	4aa7      	ldr	r2, [pc, #668]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900088c0:	430b      	orrs	r3, r1
900088c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
900088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
900088cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
900088d0:	653b      	str	r3, [r7, #80]	@ 0x50
900088d2:	2300      	movs	r3, #0
900088d4:	657b      	str	r3, [r7, #84]	@ 0x54
900088d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
900088da:	460b      	mov	r3, r1
900088dc:	4313      	orrs	r3, r2
900088de:	d00a      	beq.n	900088f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
900088e0:	4b9e      	ldr	r3, [pc, #632]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900088e2:	691b      	ldr	r3, [r3, #16]
900088e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
900088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
900088f0:	4a9a      	ldr	r2, [pc, #616]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900088f2:	430b      	orrs	r3, r1
900088f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
900088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
900088fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008902:	64bb      	str	r3, [r7, #72]	@ 0x48
90008904:	2300      	movs	r3, #0
90008906:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008908:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
9000890c:	460b      	mov	r3, r1
9000890e:	4313      	orrs	r3, r2
90008910:	d009      	beq.n	90008926 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008912:	4b92      	ldr	r3, [pc, #584]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008916:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
9000891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000891e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008920:	4a8e      	ldr	r2, [pc, #568]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008922:	430b      	orrs	r3, r1
90008924:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000892a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000892e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008932:	643b      	str	r3, [r7, #64]	@ 0x40
90008934:	2300      	movs	r3, #0
90008936:	647b      	str	r3, [r7, #68]	@ 0x44
90008938:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
9000893c:	460b      	mov	r3, r1
9000893e:	4313      	orrs	r3, r2
90008940:	d00e      	beq.n	90008960 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008942:	4b86      	ldr	r3, [pc, #536]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008944:	691b      	ldr	r3, [r3, #16]
90008946:	4a85      	ldr	r2, [pc, #532]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008948:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000894c:	6113      	str	r3, [r2, #16]
9000894e:	4b83      	ldr	r3, [pc, #524]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008950:	6919      	ldr	r1, [r3, #16]
90008952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008956:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
9000895a:	4a80      	ldr	r2, [pc, #512]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000895c:	430b      	orrs	r3, r1
9000895e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008964:	e9d3 2300 	ldrd	r2, r3, [r3]
90008968:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
9000896c:	63bb      	str	r3, [r7, #56]	@ 0x38
9000896e:	2300      	movs	r3, #0
90008970:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008972:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008976:	460b      	mov	r3, r1
90008978:	4313      	orrs	r3, r2
9000897a:	d009      	beq.n	90008990 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000897c:	4b77      	ldr	r3, [pc, #476]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000897e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008980:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000898a:	4a74      	ldr	r2, [pc, #464]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000898c:	430b      	orrs	r3, r1
9000898e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008994:	e9d3 2300 	ldrd	r2, r3, [r3]
90008998:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
9000899c:	633b      	str	r3, [r7, #48]	@ 0x30
9000899e:	2300      	movs	r3, #0
900089a0:	637b      	str	r3, [r7, #52]	@ 0x34
900089a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
900089a6:	460b      	mov	r3, r1
900089a8:	4313      	orrs	r3, r2
900089aa:	d00a      	beq.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900089ac:	4b6b      	ldr	r3, [pc, #428]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900089ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900089b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
900089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
900089bc:	4a67      	ldr	r2, [pc, #412]	@ (90008b5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900089be:	430b      	orrs	r3, r1
900089c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
900089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
900089ca:	2100      	movs	r1, #0
900089cc:	62b9      	str	r1, [r7, #40]	@ 0x28
900089ce:	f003 0301 	and.w	r3, r3, #1
900089d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
900089d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
900089d8:	460b      	mov	r3, r1
900089da:	4313      	orrs	r3, r2
900089dc:	d011      	beq.n	90008a02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089e2:	3308      	adds	r3, #8
900089e4:	2100      	movs	r1, #0
900089e6:	4618      	mov	r0, r3
900089e8:	f000 fb78 	bl	900090dc <RCCEx_PLL2_Config>
900089ec:	4603      	mov	r3, r0
900089ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900089f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089f6:	2b00      	cmp	r3, #0
900089f8:	d003      	beq.n	90008a02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a0a:	2100      	movs	r1, #0
90008a0c:	6239      	str	r1, [r7, #32]
90008a0e:	f003 0302 	and.w	r3, r3, #2
90008a12:	627b      	str	r3, [r7, #36]	@ 0x24
90008a14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008a18:	460b      	mov	r3, r1
90008a1a:	4313      	orrs	r3, r2
90008a1c:	d011      	beq.n	90008a42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a22:	3308      	adds	r3, #8
90008a24:	2101      	movs	r1, #1
90008a26:	4618      	mov	r0, r3
90008a28:	f000 fb58 	bl	900090dc <RCCEx_PLL2_Config>
90008a2c:	4603      	mov	r3, r0
90008a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a36:	2b00      	cmp	r3, #0
90008a38:	d003      	beq.n	90008a42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a4a:	2100      	movs	r1, #0
90008a4c:	61b9      	str	r1, [r7, #24]
90008a4e:	f003 0304 	and.w	r3, r3, #4
90008a52:	61fb      	str	r3, [r7, #28]
90008a54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008a58:	460b      	mov	r3, r1
90008a5a:	4313      	orrs	r3, r2
90008a5c:	d011      	beq.n	90008a82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a62:	3308      	adds	r3, #8
90008a64:	2102      	movs	r1, #2
90008a66:	4618      	mov	r0, r3
90008a68:	f000 fb38 	bl	900090dc <RCCEx_PLL2_Config>
90008a6c:	4603      	mov	r3, r0
90008a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a76:	2b00      	cmp	r3, #0
90008a78:	d003      	beq.n	90008a82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a8a:	2100      	movs	r1, #0
90008a8c:	6139      	str	r1, [r7, #16]
90008a8e:	f003 0308 	and.w	r3, r3, #8
90008a92:	617b      	str	r3, [r7, #20]
90008a94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008a98:	460b      	mov	r3, r1
90008a9a:	4313      	orrs	r3, r2
90008a9c:	d011      	beq.n	90008ac2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aa2:	3328      	adds	r3, #40	@ 0x28
90008aa4:	2100      	movs	r1, #0
90008aa6:	4618      	mov	r0, r3
90008aa8:	f000 fbca 	bl	90009240 <RCCEx_PLL3_Config>
90008aac:	4603      	mov	r3, r0
90008aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ab6:	2b00      	cmp	r3, #0
90008ab8:	d003      	beq.n	90008ac2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008aca:	2100      	movs	r1, #0
90008acc:	60b9      	str	r1, [r7, #8]
90008ace:	f003 0310 	and.w	r3, r3, #16
90008ad2:	60fb      	str	r3, [r7, #12]
90008ad4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008ad8:	460b      	mov	r3, r1
90008ada:	4313      	orrs	r3, r2
90008adc:	d011      	beq.n	90008b02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ae2:	3328      	adds	r3, #40	@ 0x28
90008ae4:	2101      	movs	r1, #1
90008ae6:	4618      	mov	r0, r3
90008ae8:	f000 fbaa 	bl	90009240 <RCCEx_PLL3_Config>
90008aec:	4603      	mov	r3, r0
90008aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008af6:	2b00      	cmp	r3, #0
90008af8:	d003      	beq.n	90008b02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008afe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b0a:	2100      	movs	r1, #0
90008b0c:	6039      	str	r1, [r7, #0]
90008b0e:	f003 0320 	and.w	r3, r3, #32
90008b12:	607b      	str	r3, [r7, #4]
90008b14:	e9d7 1200 	ldrd	r1, r2, [r7]
90008b18:	460b      	mov	r3, r1
90008b1a:	4313      	orrs	r3, r2
90008b1c:	d011      	beq.n	90008b42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b22:	3328      	adds	r3, #40	@ 0x28
90008b24:	2102      	movs	r1, #2
90008b26:	4618      	mov	r0, r3
90008b28:	f000 fb8a 	bl	90009240 <RCCEx_PLL3_Config>
90008b2c:	4603      	mov	r3, r0
90008b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b36:	2b00      	cmp	r3, #0
90008b38:	d003      	beq.n	90008b42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008b42:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008b46:	2b00      	cmp	r3, #0
90008b48:	d101      	bne.n	90008b4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008b4a:	2300      	movs	r3, #0
90008b4c:	e000      	b.n	90008b50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008b4e:	2301      	movs	r3, #1
}
90008b50:	4618      	mov	r0, r3
90008b52:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90008b56:	46bd      	mov	sp, r7
90008b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008b5c:	58024400 	.word	0x58024400

90008b60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90008b60:	b580      	push	{r7, lr}
90008b62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90008b64:	f7fe fd96 	bl	90007694 <HAL_RCC_GetHCLKFreq>
90008b68:	4602      	mov	r2, r0
90008b6a:	4b06      	ldr	r3, [pc, #24]	@ (90008b84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90008b6c:	6a1b      	ldr	r3, [r3, #32]
90008b6e:	091b      	lsrs	r3, r3, #4
90008b70:	f003 0307 	and.w	r3, r3, #7
90008b74:	4904      	ldr	r1, [pc, #16]	@ (90008b88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90008b76:	5ccb      	ldrb	r3, [r1, r3]
90008b78:	f003 031f 	and.w	r3, r3, #31
90008b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90008b80:	4618      	mov	r0, r3
90008b82:	bd80      	pop	{r7, pc}
90008b84:	58024400 	.word	0x58024400
90008b88:	9000cdb0 	.word	0x9000cdb0

90008b8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90008b8c:	b480      	push	{r7}
90008b8e:	b089      	sub	sp, #36	@ 0x24
90008b90:	af00      	add	r7, sp, #0
90008b92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008b94:	4ba1      	ldr	r3, [pc, #644]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008b98:	f003 0303 	and.w	r3, r3, #3
90008b9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90008b9e:	4b9f      	ldr	r3, [pc, #636]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008ba2:	0b1b      	lsrs	r3, r3, #12
90008ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90008ba8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90008baa:	4b9c      	ldr	r3, [pc, #624]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008bae:	091b      	lsrs	r3, r3, #4
90008bb0:	f003 0301 	and.w	r3, r3, #1
90008bb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90008bb6:	4b99      	ldr	r3, [pc, #612]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90008bba:	08db      	lsrs	r3, r3, #3
90008bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008bc0:	693a      	ldr	r2, [r7, #16]
90008bc2:	fb02 f303 	mul.w	r3, r2, r3
90008bc6:	ee07 3a90 	vmov	s15, r3
90008bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008bce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90008bd2:	697b      	ldr	r3, [r7, #20]
90008bd4:	2b00      	cmp	r3, #0
90008bd6:	f000 8111 	beq.w	90008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90008bda:	69bb      	ldr	r3, [r7, #24]
90008bdc:	2b02      	cmp	r3, #2
90008bde:	f000 8083 	beq.w	90008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90008be2:	69bb      	ldr	r3, [r7, #24]
90008be4:	2b02      	cmp	r3, #2
90008be6:	f200 80a1 	bhi.w	90008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90008bea:	69bb      	ldr	r3, [r7, #24]
90008bec:	2b00      	cmp	r3, #0
90008bee:	d003      	beq.n	90008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90008bf0:	69bb      	ldr	r3, [r7, #24]
90008bf2:	2b01      	cmp	r3, #1
90008bf4:	d056      	beq.n	90008ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90008bf6:	e099      	b.n	90008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008bf8:	4b88      	ldr	r3, [pc, #544]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008bfa:	681b      	ldr	r3, [r3, #0]
90008bfc:	f003 0320 	and.w	r3, r3, #32
90008c00:	2b00      	cmp	r3, #0
90008c02:	d02d      	beq.n	90008c60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90008c04:	4b85      	ldr	r3, [pc, #532]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008c06:	681b      	ldr	r3, [r3, #0]
90008c08:	08db      	lsrs	r3, r3, #3
90008c0a:	f003 0303 	and.w	r3, r3, #3
90008c0e:	4a84      	ldr	r2, [pc, #528]	@ (90008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90008c10:	fa22 f303 	lsr.w	r3, r2, r3
90008c14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008c16:	68bb      	ldr	r3, [r7, #8]
90008c18:	ee07 3a90 	vmov	s15, r3
90008c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008c20:	697b      	ldr	r3, [r7, #20]
90008c22:	ee07 3a90 	vmov	s15, r3
90008c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008c2e:	4b7b      	ldr	r3, [pc, #492]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008c36:	ee07 3a90 	vmov	s15, r3
90008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
90008c42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
90008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90008c5e:	e087      	b.n	90008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008c60:	697b      	ldr	r3, [r7, #20]
90008c62:	ee07 3a90 	vmov	s15, r3
90008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008c6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90008e28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008c72:	4b6a      	ldr	r3, [pc, #424]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008c7a:	ee07 3a90 	vmov	s15, r3
90008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008c82:	ed97 6a03 	vldr	s12, [r7, #12]
90008c86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
90008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008ca2:	e065      	b.n	90008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008ca4:	697b      	ldr	r3, [r7, #20]
90008ca6:	ee07 3a90 	vmov	s15, r3
90008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008cae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008cb6:	4b59      	ldr	r3, [pc, #356]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008cbe:	ee07 3a90 	vmov	s15, r3
90008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
90008cca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
90008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008ce6:	e043      	b.n	90008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008ce8:	697b      	ldr	r3, [r7, #20]
90008cea:	ee07 3a90 	vmov	s15, r3
90008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008cf2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90008e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008cfa:	4b48      	ldr	r3, [pc, #288]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008d02:	ee07 3a90 	vmov	s15, r3
90008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
90008d0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
90008d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008d2a:	e021      	b.n	90008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008d2c:	697b      	ldr	r3, [r7, #20]
90008d2e:	ee07 3a90 	vmov	s15, r3
90008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008d36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90008d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008d3e:	4b37      	ldr	r3, [pc, #220]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008d46:	ee07 3a90 	vmov	s15, r3
90008d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008d4e:	ed97 6a03 	vldr	s12, [r7, #12]
90008d52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
90008d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008d6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90008d70:	4b2a      	ldr	r3, [pc, #168]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008d74:	0a5b      	lsrs	r3, r3, #9
90008d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90008d7a:	ee07 3a90 	vmov	s15, r3
90008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008d82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90008d86:	ee37 7a87 	vadd.f32	s14, s15, s14
90008d8a:	edd7 6a07 	vldr	s13, [r7, #28]
90008d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90008d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90008d96:	ee17 2a90 	vmov	r2, s15
90008d9a:	687b      	ldr	r3, [r7, #4]
90008d9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
90008d9e:	4b1f      	ldr	r3, [pc, #124]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008da2:	0c1b      	lsrs	r3, r3, #16
90008da4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90008da8:	ee07 3a90 	vmov	s15, r3
90008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008db0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90008db4:	ee37 7a87 	vadd.f32	s14, s15, s14
90008db8:	edd7 6a07 	vldr	s13, [r7, #28]
90008dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
90008dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90008dc4:	ee17 2a90 	vmov	r2, s15
90008dc8:	687b      	ldr	r3, [r7, #4]
90008dca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90008dcc:	4b13      	ldr	r3, [pc, #76]	@ (90008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008dd0:	0e1b      	lsrs	r3, r3, #24
90008dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90008dd6:	ee07 3a90 	vmov	s15, r3
90008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008dde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90008de2:	ee37 7a87 	vadd.f32	s14, s15, s14
90008de6:	edd7 6a07 	vldr	s13, [r7, #28]
90008dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
90008dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90008df2:	ee17 2a90 	vmov	r2, s15
90008df6:	687b      	ldr	r3, [r7, #4]
90008df8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
90008dfa:	e008      	b.n	90008e0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
90008dfc:	687b      	ldr	r3, [r7, #4]
90008dfe:	2200      	movs	r2, #0
90008e00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90008e02:	687b      	ldr	r3, [r7, #4]
90008e04:	2200      	movs	r2, #0
90008e06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90008e08:	687b      	ldr	r3, [r7, #4]
90008e0a:	2200      	movs	r2, #0
90008e0c:	609a      	str	r2, [r3, #8]
}
90008e0e:	bf00      	nop
90008e10:	3724      	adds	r7, #36	@ 0x24
90008e12:	46bd      	mov	sp, r7
90008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
90008e18:	4770      	bx	lr
90008e1a:	bf00      	nop
90008e1c:	58024400 	.word	0x58024400
90008e20:	03d09000 	.word	0x03d09000
90008e24:	46000000 	.word	0x46000000
90008e28:	4c742400 	.word	0x4c742400
90008e2c:	4a742400 	.word	0x4a742400
90008e30:	4bbebc20 	.word	0x4bbebc20

90008e34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90008e34:	b480      	push	{r7}
90008e36:	b089      	sub	sp, #36	@ 0x24
90008e38:	af00      	add	r7, sp, #0
90008e3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008e3c:	4ba1      	ldr	r3, [pc, #644]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008e40:	f003 0303 	and.w	r3, r3, #3
90008e44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
90008e46:	4b9f      	ldr	r3, [pc, #636]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008e4a:	0d1b      	lsrs	r3, r3, #20
90008e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90008e50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90008e52:	4b9c      	ldr	r3, [pc, #624]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008e56:	0a1b      	lsrs	r3, r3, #8
90008e58:	f003 0301 	and.w	r3, r3, #1
90008e5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
90008e5e:	4b99      	ldr	r3, [pc, #612]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90008e62:	08db      	lsrs	r3, r3, #3
90008e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008e68:	693a      	ldr	r2, [r7, #16]
90008e6a:	fb02 f303 	mul.w	r3, r2, r3
90008e6e:	ee07 3a90 	vmov	s15, r3
90008e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008e76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90008e7a:	697b      	ldr	r3, [r7, #20]
90008e7c:	2b00      	cmp	r3, #0
90008e7e:	f000 8111 	beq.w	900090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90008e82:	69bb      	ldr	r3, [r7, #24]
90008e84:	2b02      	cmp	r3, #2
90008e86:	f000 8083 	beq.w	90008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90008e8a:	69bb      	ldr	r3, [r7, #24]
90008e8c:	2b02      	cmp	r3, #2
90008e8e:	f200 80a1 	bhi.w	90008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90008e92:	69bb      	ldr	r3, [r7, #24]
90008e94:	2b00      	cmp	r3, #0
90008e96:	d003      	beq.n	90008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90008e98:	69bb      	ldr	r3, [r7, #24]
90008e9a:	2b01      	cmp	r3, #1
90008e9c:	d056      	beq.n	90008f4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90008e9e:	e099      	b.n	90008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008ea0:	4b88      	ldr	r3, [pc, #544]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008ea2:	681b      	ldr	r3, [r3, #0]
90008ea4:	f003 0320 	and.w	r3, r3, #32
90008ea8:	2b00      	cmp	r3, #0
90008eaa:	d02d      	beq.n	90008f08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90008eac:	4b85      	ldr	r3, [pc, #532]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008eae:	681b      	ldr	r3, [r3, #0]
90008eb0:	08db      	lsrs	r3, r3, #3
90008eb2:	f003 0303 	and.w	r3, r3, #3
90008eb6:	4a84      	ldr	r2, [pc, #528]	@ (900090c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90008eb8:	fa22 f303 	lsr.w	r3, r2, r3
90008ebc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90008ebe:	68bb      	ldr	r3, [r7, #8]
90008ec0:	ee07 3a90 	vmov	s15, r3
90008ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008ec8:	697b      	ldr	r3, [r7, #20]
90008eca:	ee07 3a90 	vmov	s15, r3
90008ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008ed6:	4b7b      	ldr	r3, [pc, #492]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90008eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008ede:	ee07 3a90 	vmov	s15, r3
90008ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008ee6:	ed97 6a03 	vldr	s12, [r7, #12]
90008eea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900090cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90008eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008efe:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90008f06:	e087      	b.n	90009018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90008f08:	697b      	ldr	r3, [r7, #20]
90008f0a:	ee07 3a90 	vmov	s15, r3
90008f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
90008f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f1a:	4b6a      	ldr	r3, [pc, #424]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90008f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f22:	ee07 3a90 	vmov	s15, r3
90008f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f2a:	ed97 6a03 	vldr	s12, [r7, #12]
90008f2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900090cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90008f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f42:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f4a:	e065      	b.n	90009018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90008f4c:	697b      	ldr	r3, [r7, #20]
90008f4e:	ee07 3a90 	vmov	s15, r3
90008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90008f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f5e:	4b59      	ldr	r3, [pc, #356]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90008f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f66:	ee07 3a90 	vmov	s15, r3
90008f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f6e:	ed97 6a03 	vldr	s12, [r7, #12]
90008f72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900090cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90008f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f8e:	e043      	b.n	90009018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90008f90:	697b      	ldr	r3, [r7, #20]
90008f92:	ee07 3a90 	vmov	s15, r3
90008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900090d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90008f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008fa2:	4b48      	ldr	r3, [pc, #288]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008faa:	ee07 3a90 	vmov	s15, r3
90008fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008fb2:	ed97 6a03 	vldr	s12, [r7, #12]
90008fb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900090cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90008fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008fca:	ee67 7a27 	vmul.f32	s15, s14, s15
90008fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008fd2:	e021      	b.n	90009018 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90008fd4:	697b      	ldr	r3, [r7, #20]
90008fd6:	ee07 3a90 	vmov	s15, r3
90008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008fde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90008fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008fe6:	4b37      	ldr	r3, [pc, #220]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90008fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008fee:	ee07 3a90 	vmov	s15, r3
90008ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008ff6:	ed97 6a03 	vldr	s12, [r7, #12]
90008ffa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900090cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90008ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009002:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000900a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000900e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009016:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90009018:	4b2a      	ldr	r3, [pc, #168]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000901a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000901c:	0a5b      	lsrs	r3, r3, #9
9000901e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009022:	ee07 3a90 	vmov	s15, r3
90009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000902a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000902e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009032:	edd7 6a07 	vldr	s13, [r7, #28]
90009036:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000903a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000903e:	ee17 2a90 	vmov	r2, s15
90009042:	687b      	ldr	r3, [r7, #4]
90009044:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
90009046:	4b1f      	ldr	r3, [pc, #124]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000904a:	0c1b      	lsrs	r3, r3, #16
9000904c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009050:	ee07 3a90 	vmov	s15, r3
90009054:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000905c:	ee37 7a87 	vadd.f32	s14, s15, s14
90009060:	edd7 6a07 	vldr	s13, [r7, #28]
90009064:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000906c:	ee17 2a90 	vmov	r2, s15
90009070:	687b      	ldr	r3, [r7, #4]
90009072:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009074:	4b13      	ldr	r3, [pc, #76]	@ (900090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009078:	0e1b      	lsrs	r3, r3, #24
9000907a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000907e:	ee07 3a90 	vmov	s15, r3
90009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000908a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000908e:	edd7 6a07 	vldr	s13, [r7, #28]
90009092:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000909a:	ee17 2a90 	vmov	r2, s15
9000909e:	687b      	ldr	r3, [r7, #4]
900090a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
900090a2:	e008      	b.n	900090b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
900090a4:	687b      	ldr	r3, [r7, #4]
900090a6:	2200      	movs	r2, #0
900090a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
900090aa:	687b      	ldr	r3, [r7, #4]
900090ac:	2200      	movs	r2, #0
900090ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
900090b0:	687b      	ldr	r3, [r7, #4]
900090b2:	2200      	movs	r2, #0
900090b4:	609a      	str	r2, [r3, #8]
}
900090b6:	bf00      	nop
900090b8:	3724      	adds	r7, #36	@ 0x24
900090ba:	46bd      	mov	sp, r7
900090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900090c0:	4770      	bx	lr
900090c2:	bf00      	nop
900090c4:	58024400 	.word	0x58024400
900090c8:	03d09000 	.word	0x03d09000
900090cc:	46000000 	.word	0x46000000
900090d0:	4c742400 	.word	0x4c742400
900090d4:	4a742400 	.word	0x4a742400
900090d8:	4bbebc20 	.word	0x4bbebc20

900090dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
900090dc:	b580      	push	{r7, lr}
900090de:	b084      	sub	sp, #16
900090e0:	af00      	add	r7, sp, #0
900090e2:	6078      	str	r0, [r7, #4]
900090e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900090e6:	2300      	movs	r3, #0
900090e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900090ea:	4b53      	ldr	r3, [pc, #332]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900090ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900090ee:	f003 0303 	and.w	r3, r3, #3
900090f2:	2b03      	cmp	r3, #3
900090f4:	d101      	bne.n	900090fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
900090f6:	2301      	movs	r3, #1
900090f8:	e099      	b.n	9000922e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
900090fa:	4b4f      	ldr	r3, [pc, #316]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900090fc:	681b      	ldr	r3, [r3, #0]
900090fe:	4a4e      	ldr	r2, [pc, #312]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009100:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009106:	f7f9 fe93 	bl	90002e30 <HAL_GetTick>
9000910a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000910c:	e008      	b.n	90009120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000910e:	f7f9 fe8f 	bl	90002e30 <HAL_GetTick>
90009112:	4602      	mov	r2, r0
90009114:	68bb      	ldr	r3, [r7, #8]
90009116:	1ad3      	subs	r3, r2, r3
90009118:	2b02      	cmp	r3, #2
9000911a:	d901      	bls.n	90009120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000911c:	2303      	movs	r3, #3
9000911e:	e086      	b.n	9000922e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009120:	4b45      	ldr	r3, [pc, #276]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009122:	681b      	ldr	r3, [r3, #0]
90009124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009128:	2b00      	cmp	r3, #0
9000912a:	d1f0      	bne.n	9000910e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000912c:	4b42      	ldr	r3, [pc, #264]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
9000912e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009130:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009134:	687b      	ldr	r3, [r7, #4]
90009136:	681b      	ldr	r3, [r3, #0]
90009138:	031b      	lsls	r3, r3, #12
9000913a:	493f      	ldr	r1, [pc, #252]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
9000913c:	4313      	orrs	r3, r2
9000913e:	628b      	str	r3, [r1, #40]	@ 0x28
90009140:	687b      	ldr	r3, [r7, #4]
90009142:	685b      	ldr	r3, [r3, #4]
90009144:	3b01      	subs	r3, #1
90009146:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000914a:	687b      	ldr	r3, [r7, #4]
9000914c:	689b      	ldr	r3, [r3, #8]
9000914e:	3b01      	subs	r3, #1
90009150:	025b      	lsls	r3, r3, #9
90009152:	b29b      	uxth	r3, r3
90009154:	431a      	orrs	r2, r3
90009156:	687b      	ldr	r3, [r7, #4]
90009158:	68db      	ldr	r3, [r3, #12]
9000915a:	3b01      	subs	r3, #1
9000915c:	041b      	lsls	r3, r3, #16
9000915e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009162:	431a      	orrs	r2, r3
90009164:	687b      	ldr	r3, [r7, #4]
90009166:	691b      	ldr	r3, [r3, #16]
90009168:	3b01      	subs	r3, #1
9000916a:	061b      	lsls	r3, r3, #24
9000916c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009170:	4931      	ldr	r1, [pc, #196]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009172:	4313      	orrs	r3, r2
90009174:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009176:	4b30      	ldr	r3, [pc, #192]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000917a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000917e:	687b      	ldr	r3, [r7, #4]
90009180:	695b      	ldr	r3, [r3, #20]
90009182:	492d      	ldr	r1, [pc, #180]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009184:	4313      	orrs	r3, r2
90009186:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009188:	4b2b      	ldr	r3, [pc, #172]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
9000918a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000918c:	f023 0220 	bic.w	r2, r3, #32
90009190:	687b      	ldr	r3, [r7, #4]
90009192:	699b      	ldr	r3, [r3, #24]
90009194:	4928      	ldr	r1, [pc, #160]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009196:	4313      	orrs	r3, r2
90009198:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
9000919a:	4b27      	ldr	r3, [pc, #156]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
9000919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000919e:	4a26      	ldr	r2, [pc, #152]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091a0:	f023 0310 	bic.w	r3, r3, #16
900091a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
900091a6:	4b24      	ldr	r3, [pc, #144]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
900091aa:	4b24      	ldr	r3, [pc, #144]	@ (9000923c <RCCEx_PLL2_Config+0x160>)
900091ac:	4013      	ands	r3, r2
900091ae:	687a      	ldr	r2, [r7, #4]
900091b0:	69d2      	ldr	r2, [r2, #28]
900091b2:	00d2      	lsls	r2, r2, #3
900091b4:	4920      	ldr	r1, [pc, #128]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091b6:	4313      	orrs	r3, r2
900091b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
900091ba:	4b1f      	ldr	r3, [pc, #124]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900091be:	4a1e      	ldr	r2, [pc, #120]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091c0:	f043 0310 	orr.w	r3, r3, #16
900091c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900091c6:	683b      	ldr	r3, [r7, #0]
900091c8:	2b00      	cmp	r3, #0
900091ca:	d106      	bne.n	900091da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
900091cc:	4b1a      	ldr	r3, [pc, #104]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900091d0:	4a19      	ldr	r2, [pc, #100]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
900091d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
900091d8:	e00f      	b.n	900091fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900091da:	683b      	ldr	r3, [r7, #0]
900091dc:	2b01      	cmp	r3, #1
900091de:	d106      	bne.n	900091ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
900091e0:	4b15      	ldr	r3, [pc, #84]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900091e4:	4a14      	ldr	r2, [pc, #80]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
900091ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
900091ec:	e005      	b.n	900091fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
900091ee:	4b12      	ldr	r3, [pc, #72]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900091f2:	4a11      	ldr	r2, [pc, #68]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
900091f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
900091fa:	4b0f      	ldr	r3, [pc, #60]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
900091fc:	681b      	ldr	r3, [r3, #0]
900091fe:	4a0e      	ldr	r2, [pc, #56]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009200:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009206:	f7f9 fe13 	bl	90002e30 <HAL_GetTick>
9000920a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000920c:	e008      	b.n	90009220 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000920e:	f7f9 fe0f 	bl	90002e30 <HAL_GetTick>
90009212:	4602      	mov	r2, r0
90009214:	68bb      	ldr	r3, [r7, #8]
90009216:	1ad3      	subs	r3, r2, r3
90009218:	2b02      	cmp	r3, #2
9000921a:	d901      	bls.n	90009220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000921c:	2303      	movs	r3, #3
9000921e:	e006      	b.n	9000922e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009220:	4b05      	ldr	r3, [pc, #20]	@ (90009238 <RCCEx_PLL2_Config+0x15c>)
90009222:	681b      	ldr	r3, [r3, #0]
90009224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009228:	2b00      	cmp	r3, #0
9000922a:	d0f0      	beq.n	9000920e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000922c:	7bfb      	ldrb	r3, [r7, #15]
}
9000922e:	4618      	mov	r0, r3
90009230:	3710      	adds	r7, #16
90009232:	46bd      	mov	sp, r7
90009234:	bd80      	pop	{r7, pc}
90009236:	bf00      	nop
90009238:	58024400 	.word	0x58024400
9000923c:	ffff0007 	.word	0xffff0007

90009240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90009240:	b580      	push	{r7, lr}
90009242:	b084      	sub	sp, #16
90009244:	af00      	add	r7, sp, #0
90009246:	6078      	str	r0, [r7, #4]
90009248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000924a:	2300      	movs	r3, #0
9000924c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000924e:	4b53      	ldr	r3, [pc, #332]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009252:	f003 0303 	and.w	r3, r3, #3
90009256:	2b03      	cmp	r3, #3
90009258:	d101      	bne.n	9000925e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000925a:	2301      	movs	r3, #1
9000925c:	e099      	b.n	90009392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000925e:	4b4f      	ldr	r3, [pc, #316]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009260:	681b      	ldr	r3, [r3, #0]
90009262:	4a4e      	ldr	r2, [pc, #312]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
90009268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000926a:	f7f9 fde1 	bl	90002e30 <HAL_GetTick>
9000926e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009270:	e008      	b.n	90009284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009272:	f7f9 fddd 	bl	90002e30 <HAL_GetTick>
90009276:	4602      	mov	r2, r0
90009278:	68bb      	ldr	r3, [r7, #8]
9000927a:	1ad3      	subs	r3, r2, r3
9000927c:	2b02      	cmp	r3, #2
9000927e:	d901      	bls.n	90009284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90009280:	2303      	movs	r3, #3
90009282:	e086      	b.n	90009392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009284:	4b45      	ldr	r3, [pc, #276]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009286:	681b      	ldr	r3, [r3, #0]
90009288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000928c:	2b00      	cmp	r3, #0
9000928e:	d1f0      	bne.n	90009272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90009290:	4b42      	ldr	r3, [pc, #264]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009294:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90009298:	687b      	ldr	r3, [r7, #4]
9000929a:	681b      	ldr	r3, [r3, #0]
9000929c:	051b      	lsls	r3, r3, #20
9000929e:	493f      	ldr	r1, [pc, #252]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
900092a0:	4313      	orrs	r3, r2
900092a2:	628b      	str	r3, [r1, #40]	@ 0x28
900092a4:	687b      	ldr	r3, [r7, #4]
900092a6:	685b      	ldr	r3, [r3, #4]
900092a8:	3b01      	subs	r3, #1
900092aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
900092ae:	687b      	ldr	r3, [r7, #4]
900092b0:	689b      	ldr	r3, [r3, #8]
900092b2:	3b01      	subs	r3, #1
900092b4:	025b      	lsls	r3, r3, #9
900092b6:	b29b      	uxth	r3, r3
900092b8:	431a      	orrs	r2, r3
900092ba:	687b      	ldr	r3, [r7, #4]
900092bc:	68db      	ldr	r3, [r3, #12]
900092be:	3b01      	subs	r3, #1
900092c0:	041b      	lsls	r3, r3, #16
900092c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900092c6:	431a      	orrs	r2, r3
900092c8:	687b      	ldr	r3, [r7, #4]
900092ca:	691b      	ldr	r3, [r3, #16]
900092cc:	3b01      	subs	r3, #1
900092ce:	061b      	lsls	r3, r3, #24
900092d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900092d4:	4931      	ldr	r1, [pc, #196]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
900092d6:	4313      	orrs	r3, r2
900092d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
900092da:	4b30      	ldr	r3, [pc, #192]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
900092dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
900092e2:	687b      	ldr	r3, [r7, #4]
900092e4:	695b      	ldr	r3, [r3, #20]
900092e6:	492d      	ldr	r1, [pc, #180]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
900092e8:	4313      	orrs	r3, r2
900092ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
900092ec:	4b2b      	ldr	r3, [pc, #172]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
900092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
900092f4:	687b      	ldr	r3, [r7, #4]
900092f6:	699b      	ldr	r3, [r3, #24]
900092f8:	4928      	ldr	r1, [pc, #160]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
900092fa:	4313      	orrs	r3, r2
900092fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900092fe:	4b27      	ldr	r3, [pc, #156]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009302:	4a26      	ldr	r2, [pc, #152]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90009308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000930a:	4b24      	ldr	r3, [pc, #144]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
9000930c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000930e:	4b24      	ldr	r3, [pc, #144]	@ (900093a0 <RCCEx_PLL3_Config+0x160>)
90009310:	4013      	ands	r3, r2
90009312:	687a      	ldr	r2, [r7, #4]
90009314:	69d2      	ldr	r2, [r2, #28]
90009316:	00d2      	lsls	r2, r2, #3
90009318:	4920      	ldr	r1, [pc, #128]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
9000931a:	4313      	orrs	r3, r2
9000931c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000931e:	4b1f      	ldr	r3, [pc, #124]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009322:	4a1e      	ldr	r2, [pc, #120]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90009328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000932a:	683b      	ldr	r3, [r7, #0]
9000932c:	2b00      	cmp	r3, #0
9000932e:	d106      	bne.n	9000933e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90009330:	4b1a      	ldr	r3, [pc, #104]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009334:	4a19      	ldr	r2, [pc, #100]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009336:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000933a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000933c:	e00f      	b.n	9000935e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000933e:	683b      	ldr	r3, [r7, #0]
90009340:	2b01      	cmp	r3, #1
90009342:	d106      	bne.n	90009352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90009344:	4b15      	ldr	r3, [pc, #84]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009348:	4a14      	ldr	r2, [pc, #80]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
9000934a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
9000934e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009350:	e005      	b.n	9000935e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90009352:	4b12      	ldr	r3, [pc, #72]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009356:	4a11      	ldr	r2, [pc, #68]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000935c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000935e:	4b0f      	ldr	r3, [pc, #60]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009360:	681b      	ldr	r3, [r3, #0]
90009362:	4a0e      	ldr	r2, [pc, #56]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
90009368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000936a:	f7f9 fd61 	bl	90002e30 <HAL_GetTick>
9000936e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009370:	e008      	b.n	90009384 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009372:	f7f9 fd5d 	bl	90002e30 <HAL_GetTick>
90009376:	4602      	mov	r2, r0
90009378:	68bb      	ldr	r3, [r7, #8]
9000937a:	1ad3      	subs	r3, r2, r3
9000937c:	2b02      	cmp	r3, #2
9000937e:	d901      	bls.n	90009384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90009380:	2303      	movs	r3, #3
90009382:	e006      	b.n	90009392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009384:	4b05      	ldr	r3, [pc, #20]	@ (9000939c <RCCEx_PLL3_Config+0x15c>)
90009386:	681b      	ldr	r3, [r3, #0]
90009388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000938c:	2b00      	cmp	r3, #0
9000938e:	d0f0      	beq.n	90009372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90009390:	7bfb      	ldrb	r3, [r7, #15]
}
90009392:	4618      	mov	r0, r3
90009394:	3710      	adds	r7, #16
90009396:	46bd      	mov	sp, r7
90009398:	bd80      	pop	{r7, pc}
9000939a:	bf00      	nop
9000939c:	58024400 	.word	0x58024400
900093a0:	ffff0007 	.word	0xffff0007

900093a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
900093a4:	b580      	push	{r7, lr}
900093a6:	b082      	sub	sp, #8
900093a8:	af00      	add	r7, sp, #0
900093aa:	6078      	str	r0, [r7, #4]
900093ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
900093ae:	687b      	ldr	r3, [r7, #4]
900093b0:	2b00      	cmp	r3, #0
900093b2:	d101      	bne.n	900093b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900093b4:	2301      	movs	r3, #1
900093b6:	e02b      	b.n	90009410 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
900093b8:	687b      	ldr	r3, [r7, #4]
900093ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900093be:	b2db      	uxtb	r3, r3
900093c0:	2b00      	cmp	r3, #0
900093c2:	d106      	bne.n	900093d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
900093c4:	687b      	ldr	r3, [r7, #4]
900093c6:	2200      	movs	r2, #0
900093c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
900093cc:	6878      	ldr	r0, [r7, #4]
900093ce:	f000 f825 	bl	9000941c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900093d2:	687b      	ldr	r3, [r7, #4]
900093d4:	2202      	movs	r2, #2
900093d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900093da:	687b      	ldr	r3, [r7, #4]
900093dc:	681a      	ldr	r2, [r3, #0]
900093de:	687b      	ldr	r3, [r7, #4]
900093e0:	3304      	adds	r3, #4
900093e2:	4619      	mov	r1, r3
900093e4:	4610      	mov	r0, r2
900093e6:	f001 fb51 	bl	9000aa8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
900093ea:	687b      	ldr	r3, [r7, #4]
900093ec:	6818      	ldr	r0, [r3, #0]
900093ee:	687b      	ldr	r3, [r7, #4]
900093f0:	685b      	ldr	r3, [r3, #4]
900093f2:	461a      	mov	r2, r3
900093f4:	6839      	ldr	r1, [r7, #0]
900093f6:	f001 fba5 	bl	9000ab44 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
900093fa:	4b07      	ldr	r3, [pc, #28]	@ (90009418 <HAL_SDRAM_Init+0x74>)
900093fc:	681b      	ldr	r3, [r3, #0]
900093fe:	4a06      	ldr	r2, [pc, #24]	@ (90009418 <HAL_SDRAM_Init+0x74>)
90009400:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009404:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009406:	687b      	ldr	r3, [r7, #4]
90009408:	2201      	movs	r2, #1
9000940a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000940e:	2300      	movs	r3, #0
}
90009410:	4618      	mov	r0, r3
90009412:	3708      	adds	r7, #8
90009414:	46bd      	mov	sp, r7
90009416:	bd80      	pop	{r7, pc}
90009418:	52004000 	.word	0x52004000

9000941c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
9000941c:	b480      	push	{r7}
9000941e:	b083      	sub	sp, #12
90009420:	af00      	add	r7, sp, #0
90009422:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009424:	bf00      	nop
90009426:	370c      	adds	r7, #12
90009428:	46bd      	mov	sp, r7
9000942a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000942e:	4770      	bx	lr

90009430 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90009430:	b580      	push	{r7, lr}
90009432:	b086      	sub	sp, #24
90009434:	af00      	add	r7, sp, #0
90009436:	60f8      	str	r0, [r7, #12]
90009438:	60b9      	str	r1, [r7, #8]
9000943a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000943c:	68fb      	ldr	r3, [r7, #12]
9000943e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009442:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90009444:	7dfb      	ldrb	r3, [r7, #23]
90009446:	2b02      	cmp	r3, #2
90009448:	d101      	bne.n	9000944e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
9000944a:	2302      	movs	r3, #2
9000944c:	e021      	b.n	90009492 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000944e:	7dfb      	ldrb	r3, [r7, #23]
90009450:	2b01      	cmp	r3, #1
90009452:	d002      	beq.n	9000945a <HAL_SDRAM_SendCommand+0x2a>
90009454:	7dfb      	ldrb	r3, [r7, #23]
90009456:	2b05      	cmp	r3, #5
90009458:	d118      	bne.n	9000948c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000945a:	68fb      	ldr	r3, [r7, #12]
9000945c:	2202      	movs	r2, #2
9000945e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90009462:	68fb      	ldr	r3, [r7, #12]
90009464:	681b      	ldr	r3, [r3, #0]
90009466:	687a      	ldr	r2, [r7, #4]
90009468:	68b9      	ldr	r1, [r7, #8]
9000946a:	4618      	mov	r0, r3
9000946c:	f001 fbd4 	bl	9000ac18 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009470:	68bb      	ldr	r3, [r7, #8]
90009472:	681b      	ldr	r3, [r3, #0]
90009474:	2b02      	cmp	r3, #2
90009476:	d104      	bne.n	90009482 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009478:	68fb      	ldr	r3, [r7, #12]
9000947a:	2205      	movs	r2, #5
9000947c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009480:	e006      	b.n	90009490 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
90009482:	68fb      	ldr	r3, [r7, #12]
90009484:	2201      	movs	r2, #1
90009486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000948a:	e001      	b.n	90009490 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
9000948c:	2301      	movs	r3, #1
9000948e:	e000      	b.n	90009492 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90009490:	2300      	movs	r3, #0
}
90009492:	4618      	mov	r0, r3
90009494:	3718      	adds	r7, #24
90009496:	46bd      	mov	sp, r7
90009498:	bd80      	pop	{r7, pc}

9000949a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000949a:	b580      	push	{r7, lr}
9000949c:	b082      	sub	sp, #8
9000949e:	af00      	add	r7, sp, #0
900094a0:	6078      	str	r0, [r7, #4]
900094a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
900094a4:	687b      	ldr	r3, [r7, #4]
900094a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900094aa:	b2db      	uxtb	r3, r3
900094ac:	2b02      	cmp	r3, #2
900094ae:	d101      	bne.n	900094b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
900094b0:	2302      	movs	r3, #2
900094b2:	e016      	b.n	900094e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
900094b4:	687b      	ldr	r3, [r7, #4]
900094b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900094ba:	b2db      	uxtb	r3, r3
900094bc:	2b01      	cmp	r3, #1
900094be:	d10f      	bne.n	900094e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900094c0:	687b      	ldr	r3, [r7, #4]
900094c2:	2202      	movs	r2, #2
900094c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
900094c8:	687b      	ldr	r3, [r7, #4]
900094ca:	681b      	ldr	r3, [r3, #0]
900094cc:	6839      	ldr	r1, [r7, #0]
900094ce:	4618      	mov	r0, r3
900094d0:	f001 fbc6 	bl	9000ac60 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
900094d4:	687b      	ldr	r3, [r7, #4]
900094d6:	2201      	movs	r2, #1
900094d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
900094dc:	2300      	movs	r3, #0
900094de:	e000      	b.n	900094e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
900094e0:	2301      	movs	r3, #1
}
900094e2:	4618      	mov	r0, r3
900094e4:	3708      	adds	r7, #8
900094e6:	46bd      	mov	sp, r7
900094e8:	bd80      	pop	{r7, pc}

900094ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
900094ea:	b580      	push	{r7, lr}
900094ec:	b082      	sub	sp, #8
900094ee:	af00      	add	r7, sp, #0
900094f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	2b00      	cmp	r3, #0
900094f6:	d101      	bne.n	900094fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
900094f8:	2301      	movs	r3, #1
900094fa:	e049      	b.n	90009590 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900094fc:	687b      	ldr	r3, [r7, #4]
900094fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009502:	b2db      	uxtb	r3, r3
90009504:	2b00      	cmp	r3, #0
90009506:	d106      	bne.n	90009516 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009508:	687b      	ldr	r3, [r7, #4]
9000950a:	2200      	movs	r2, #0
9000950c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90009510:	6878      	ldr	r0, [r7, #4]
90009512:	f000 f89d 	bl	90009650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90009516:	687b      	ldr	r3, [r7, #4]
90009518:	2202      	movs	r2, #2
9000951a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000951e:	687b      	ldr	r3, [r7, #4]
90009520:	681a      	ldr	r2, [r3, #0]
90009522:	687b      	ldr	r3, [r7, #4]
90009524:	3304      	adds	r3, #4
90009526:	4619      	mov	r1, r3
90009528:	4610      	mov	r0, r2
9000952a:	f000 f8a5 	bl	90009678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000952e:	687b      	ldr	r3, [r7, #4]
90009530:	2201      	movs	r2, #1
90009532:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009536:	687b      	ldr	r3, [r7, #4]
90009538:	2201      	movs	r2, #1
9000953a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000953e:	687b      	ldr	r3, [r7, #4]
90009540:	2201      	movs	r2, #1
90009542:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009546:	687b      	ldr	r3, [r7, #4]
90009548:	2201      	movs	r2, #1
9000954a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000954e:	687b      	ldr	r3, [r7, #4]
90009550:	2201      	movs	r2, #1
90009552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009556:	687b      	ldr	r3, [r7, #4]
90009558:	2201      	movs	r2, #1
9000955a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000955e:	687b      	ldr	r3, [r7, #4]
90009560:	2201      	movs	r2, #1
90009562:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009566:	687b      	ldr	r3, [r7, #4]
90009568:	2201      	movs	r2, #1
9000956a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000956e:	687b      	ldr	r3, [r7, #4]
90009570:	2201      	movs	r2, #1
90009572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009576:	687b      	ldr	r3, [r7, #4]
90009578:	2201      	movs	r2, #1
9000957a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000957e:	687b      	ldr	r3, [r7, #4]
90009580:	2201      	movs	r2, #1
90009582:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009586:	687b      	ldr	r3, [r7, #4]
90009588:	2201      	movs	r2, #1
9000958a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000958e:	2300      	movs	r3, #0
}
90009590:	4618      	mov	r0, r3
90009592:	3708      	adds	r7, #8
90009594:	46bd      	mov	sp, r7
90009596:	bd80      	pop	{r7, pc}

90009598 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009598:	b580      	push	{r7, lr}
9000959a:	b082      	sub	sp, #8
9000959c:	af00      	add	r7, sp, #0
9000959e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
900095a0:	687b      	ldr	r3, [r7, #4]
900095a2:	2202      	movs	r2, #2
900095a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
900095a8:	687b      	ldr	r3, [r7, #4]
900095aa:	681b      	ldr	r3, [r3, #0]
900095ac:	6a1a      	ldr	r2, [r3, #32]
900095ae:	f241 1311 	movw	r3, #4369	@ 0x1111
900095b2:	4013      	ands	r3, r2
900095b4:	2b00      	cmp	r3, #0
900095b6:	d10f      	bne.n	900095d8 <HAL_TIM_PWM_DeInit+0x40>
900095b8:	687b      	ldr	r3, [r7, #4]
900095ba:	681b      	ldr	r3, [r3, #0]
900095bc:	6a1a      	ldr	r2, [r3, #32]
900095be:	f240 4344 	movw	r3, #1092	@ 0x444
900095c2:	4013      	ands	r3, r2
900095c4:	2b00      	cmp	r3, #0
900095c6:	d107      	bne.n	900095d8 <HAL_TIM_PWM_DeInit+0x40>
900095c8:	687b      	ldr	r3, [r7, #4]
900095ca:	681b      	ldr	r3, [r3, #0]
900095cc:	681a      	ldr	r2, [r3, #0]
900095ce:	687b      	ldr	r3, [r7, #4]
900095d0:	681b      	ldr	r3, [r3, #0]
900095d2:	f022 0201 	bic.w	r2, r2, #1
900095d6:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
900095d8:	6878      	ldr	r0, [r7, #4]
900095da:	f000 f843 	bl	90009664 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
900095de:	687b      	ldr	r3, [r7, #4]
900095e0:	2200      	movs	r2, #0
900095e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900095e6:	687b      	ldr	r3, [r7, #4]
900095e8:	2200      	movs	r2, #0
900095ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900095ee:	687b      	ldr	r3, [r7, #4]
900095f0:	2200      	movs	r2, #0
900095f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900095f6:	687b      	ldr	r3, [r7, #4]
900095f8:	2200      	movs	r2, #0
900095fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900095fe:	687b      	ldr	r3, [r7, #4]
90009600:	2200      	movs	r2, #0
90009602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009606:	687b      	ldr	r3, [r7, #4]
90009608:	2200      	movs	r2, #0
9000960a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000960e:	687b      	ldr	r3, [r7, #4]
90009610:	2200      	movs	r2, #0
90009612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009616:	687b      	ldr	r3, [r7, #4]
90009618:	2200      	movs	r2, #0
9000961a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000961e:	687b      	ldr	r3, [r7, #4]
90009620:	2200      	movs	r2, #0
90009622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009626:	687b      	ldr	r3, [r7, #4]
90009628:	2200      	movs	r2, #0
9000962a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000962e:	687b      	ldr	r3, [r7, #4]
90009630:	2200      	movs	r2, #0
90009632:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009636:	687b      	ldr	r3, [r7, #4]
90009638:	2200      	movs	r2, #0
9000963a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
9000963e:	687b      	ldr	r3, [r7, #4]
90009640:	2200      	movs	r2, #0
90009642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90009646:	2300      	movs	r3, #0
}
90009648:	4618      	mov	r0, r3
9000964a:	3708      	adds	r7, #8
9000964c:	46bd      	mov	sp, r7
9000964e:	bd80      	pop	{r7, pc}

90009650 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009650:	b480      	push	{r7}
90009652:	b083      	sub	sp, #12
90009654:	af00      	add	r7, sp, #0
90009656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009658:	bf00      	nop
9000965a:	370c      	adds	r7, #12
9000965c:	46bd      	mov	sp, r7
9000965e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009662:	4770      	bx	lr

90009664 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009664:	b480      	push	{r7}
90009666:	b083      	sub	sp, #12
90009668:	af00      	add	r7, sp, #0
9000966a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
9000966c:	bf00      	nop
9000966e:	370c      	adds	r7, #12
90009670:	46bd      	mov	sp, r7
90009672:	f85d 7b04 	ldr.w	r7, [sp], #4
90009676:	4770      	bx	lr

90009678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009678:	b480      	push	{r7}
9000967a:	b085      	sub	sp, #20
9000967c:	af00      	add	r7, sp, #0
9000967e:	6078      	str	r0, [r7, #4]
90009680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009682:	687b      	ldr	r3, [r7, #4]
90009684:	681b      	ldr	r3, [r3, #0]
90009686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009688:	687b      	ldr	r3, [r7, #4]
9000968a:	4a43      	ldr	r2, [pc, #268]	@ (90009798 <TIM_Base_SetConfig+0x120>)
9000968c:	4293      	cmp	r3, r2
9000968e:	d013      	beq.n	900096b8 <TIM_Base_SetConfig+0x40>
90009690:	687b      	ldr	r3, [r7, #4]
90009692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009696:	d00f      	beq.n	900096b8 <TIM_Base_SetConfig+0x40>
90009698:	687b      	ldr	r3, [r7, #4]
9000969a:	4a40      	ldr	r2, [pc, #256]	@ (9000979c <TIM_Base_SetConfig+0x124>)
9000969c:	4293      	cmp	r3, r2
9000969e:	d00b      	beq.n	900096b8 <TIM_Base_SetConfig+0x40>
900096a0:	687b      	ldr	r3, [r7, #4]
900096a2:	4a3f      	ldr	r2, [pc, #252]	@ (900097a0 <TIM_Base_SetConfig+0x128>)
900096a4:	4293      	cmp	r3, r2
900096a6:	d007      	beq.n	900096b8 <TIM_Base_SetConfig+0x40>
900096a8:	687b      	ldr	r3, [r7, #4]
900096aa:	4a3e      	ldr	r2, [pc, #248]	@ (900097a4 <TIM_Base_SetConfig+0x12c>)
900096ac:	4293      	cmp	r3, r2
900096ae:	d003      	beq.n	900096b8 <TIM_Base_SetConfig+0x40>
900096b0:	687b      	ldr	r3, [r7, #4]
900096b2:	4a3d      	ldr	r2, [pc, #244]	@ (900097a8 <TIM_Base_SetConfig+0x130>)
900096b4:	4293      	cmp	r3, r2
900096b6:	d108      	bne.n	900096ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
900096b8:	68fb      	ldr	r3, [r7, #12]
900096ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
900096be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
900096c0:	683b      	ldr	r3, [r7, #0]
900096c2:	685b      	ldr	r3, [r3, #4]
900096c4:	68fa      	ldr	r2, [r7, #12]
900096c6:	4313      	orrs	r3, r2
900096c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
900096ca:	687b      	ldr	r3, [r7, #4]
900096cc:	4a32      	ldr	r2, [pc, #200]	@ (90009798 <TIM_Base_SetConfig+0x120>)
900096ce:	4293      	cmp	r3, r2
900096d0:	d01f      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
900096d2:	687b      	ldr	r3, [r7, #4]
900096d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900096d8:	d01b      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
900096da:	687b      	ldr	r3, [r7, #4]
900096dc:	4a2f      	ldr	r2, [pc, #188]	@ (9000979c <TIM_Base_SetConfig+0x124>)
900096de:	4293      	cmp	r3, r2
900096e0:	d017      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
900096e2:	687b      	ldr	r3, [r7, #4]
900096e4:	4a2e      	ldr	r2, [pc, #184]	@ (900097a0 <TIM_Base_SetConfig+0x128>)
900096e6:	4293      	cmp	r3, r2
900096e8:	d013      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
900096ea:	687b      	ldr	r3, [r7, #4]
900096ec:	4a2d      	ldr	r2, [pc, #180]	@ (900097a4 <TIM_Base_SetConfig+0x12c>)
900096ee:	4293      	cmp	r3, r2
900096f0:	d00f      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
900096f2:	687b      	ldr	r3, [r7, #4]
900096f4:	4a2c      	ldr	r2, [pc, #176]	@ (900097a8 <TIM_Base_SetConfig+0x130>)
900096f6:	4293      	cmp	r3, r2
900096f8:	d00b      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
900096fa:	687b      	ldr	r3, [r7, #4]
900096fc:	4a2b      	ldr	r2, [pc, #172]	@ (900097ac <TIM_Base_SetConfig+0x134>)
900096fe:	4293      	cmp	r3, r2
90009700:	d007      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
90009702:	687b      	ldr	r3, [r7, #4]
90009704:	4a2a      	ldr	r2, [pc, #168]	@ (900097b0 <TIM_Base_SetConfig+0x138>)
90009706:	4293      	cmp	r3, r2
90009708:	d003      	beq.n	90009712 <TIM_Base_SetConfig+0x9a>
9000970a:	687b      	ldr	r3, [r7, #4]
9000970c:	4a29      	ldr	r2, [pc, #164]	@ (900097b4 <TIM_Base_SetConfig+0x13c>)
9000970e:	4293      	cmp	r3, r2
90009710:	d108      	bne.n	90009724 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009712:	68fb      	ldr	r3, [r7, #12]
90009714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90009718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000971a:	683b      	ldr	r3, [r7, #0]
9000971c:	68db      	ldr	r3, [r3, #12]
9000971e:	68fa      	ldr	r2, [r7, #12]
90009720:	4313      	orrs	r3, r2
90009722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009724:	68fb      	ldr	r3, [r7, #12]
90009726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
9000972a:	683b      	ldr	r3, [r7, #0]
9000972c:	695b      	ldr	r3, [r3, #20]
9000972e:	4313      	orrs	r3, r2
90009730:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009732:	683b      	ldr	r3, [r7, #0]
90009734:	689a      	ldr	r2, [r3, #8]
90009736:	687b      	ldr	r3, [r7, #4]
90009738:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000973a:	683b      	ldr	r3, [r7, #0]
9000973c:	681a      	ldr	r2, [r3, #0]
9000973e:	687b      	ldr	r3, [r7, #4]
90009740:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009742:	687b      	ldr	r3, [r7, #4]
90009744:	4a14      	ldr	r2, [pc, #80]	@ (90009798 <TIM_Base_SetConfig+0x120>)
90009746:	4293      	cmp	r3, r2
90009748:	d00f      	beq.n	9000976a <TIM_Base_SetConfig+0xf2>
9000974a:	687b      	ldr	r3, [r7, #4]
9000974c:	4a16      	ldr	r2, [pc, #88]	@ (900097a8 <TIM_Base_SetConfig+0x130>)
9000974e:	4293      	cmp	r3, r2
90009750:	d00b      	beq.n	9000976a <TIM_Base_SetConfig+0xf2>
90009752:	687b      	ldr	r3, [r7, #4]
90009754:	4a15      	ldr	r2, [pc, #84]	@ (900097ac <TIM_Base_SetConfig+0x134>)
90009756:	4293      	cmp	r3, r2
90009758:	d007      	beq.n	9000976a <TIM_Base_SetConfig+0xf2>
9000975a:	687b      	ldr	r3, [r7, #4]
9000975c:	4a14      	ldr	r2, [pc, #80]	@ (900097b0 <TIM_Base_SetConfig+0x138>)
9000975e:	4293      	cmp	r3, r2
90009760:	d003      	beq.n	9000976a <TIM_Base_SetConfig+0xf2>
90009762:	687b      	ldr	r3, [r7, #4]
90009764:	4a13      	ldr	r2, [pc, #76]	@ (900097b4 <TIM_Base_SetConfig+0x13c>)
90009766:	4293      	cmp	r3, r2
90009768:	d103      	bne.n	90009772 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000976a:	683b      	ldr	r3, [r7, #0]
9000976c:	691a      	ldr	r2, [r3, #16]
9000976e:	687b      	ldr	r3, [r7, #4]
90009770:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009772:	687b      	ldr	r3, [r7, #4]
90009774:	681b      	ldr	r3, [r3, #0]
90009776:	f043 0204 	orr.w	r2, r3, #4
9000977a:	687b      	ldr	r3, [r7, #4]
9000977c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000977e:	687b      	ldr	r3, [r7, #4]
90009780:	2201      	movs	r2, #1
90009782:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009784:	687b      	ldr	r3, [r7, #4]
90009786:	68fa      	ldr	r2, [r7, #12]
90009788:	601a      	str	r2, [r3, #0]
}
9000978a:	bf00      	nop
9000978c:	3714      	adds	r7, #20
9000978e:	46bd      	mov	sp, r7
90009790:	f85d 7b04 	ldr.w	r7, [sp], #4
90009794:	4770      	bx	lr
90009796:	bf00      	nop
90009798:	40010000 	.word	0x40010000
9000979c:	40000400 	.word	0x40000400
900097a0:	40000800 	.word	0x40000800
900097a4:	40000c00 	.word	0x40000c00
900097a8:	40010400 	.word	0x40010400
900097ac:	40014000 	.word	0x40014000
900097b0:	40014400 	.word	0x40014400
900097b4:	40014800 	.word	0x40014800

900097b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
900097b8:	b580      	push	{r7, lr}
900097ba:	b082      	sub	sp, #8
900097bc:	af00      	add	r7, sp, #0
900097be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
900097c0:	687b      	ldr	r3, [r7, #4]
900097c2:	2b00      	cmp	r3, #0
900097c4:	d101      	bne.n	900097ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
900097c6:	2301      	movs	r3, #1
900097c8:	e042      	b.n	90009850 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
900097ca:	687b      	ldr	r3, [r7, #4]
900097cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900097d0:	2b00      	cmp	r3, #0
900097d2:	d106      	bne.n	900097e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
900097d4:	687b      	ldr	r3, [r7, #4]
900097d6:	2200      	movs	r2, #0
900097d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
900097dc:	6878      	ldr	r0, [r7, #4]
900097de:	f7f7 f82b 	bl	90000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
900097e2:	687b      	ldr	r3, [r7, #4]
900097e4:	2224      	movs	r2, #36	@ 0x24
900097e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
900097ea:	687b      	ldr	r3, [r7, #4]
900097ec:	681b      	ldr	r3, [r3, #0]
900097ee:	681a      	ldr	r2, [r3, #0]
900097f0:	687b      	ldr	r3, [r7, #4]
900097f2:	681b      	ldr	r3, [r3, #0]
900097f4:	f022 0201 	bic.w	r2, r2, #1
900097f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
900097fa:	687b      	ldr	r3, [r7, #4]
900097fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900097fe:	2b00      	cmp	r3, #0
90009800:	d002      	beq.n	90009808 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009802:	6878      	ldr	r0, [r7, #4]
90009804:	f000 fe1e 	bl	9000a444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009808:	6878      	ldr	r0, [r7, #4]
9000980a:	f000 f8b3 	bl	90009974 <UART_SetConfig>
9000980e:	4603      	mov	r3, r0
90009810:	2b01      	cmp	r3, #1
90009812:	d101      	bne.n	90009818 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009814:	2301      	movs	r3, #1
90009816:	e01b      	b.n	90009850 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009818:	687b      	ldr	r3, [r7, #4]
9000981a:	681b      	ldr	r3, [r3, #0]
9000981c:	685a      	ldr	r2, [r3, #4]
9000981e:	687b      	ldr	r3, [r7, #4]
90009820:	681b      	ldr	r3, [r3, #0]
90009822:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009828:	687b      	ldr	r3, [r7, #4]
9000982a:	681b      	ldr	r3, [r3, #0]
9000982c:	689a      	ldr	r2, [r3, #8]
9000982e:	687b      	ldr	r3, [r7, #4]
90009830:	681b      	ldr	r3, [r3, #0]
90009832:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009838:	687b      	ldr	r3, [r7, #4]
9000983a:	681b      	ldr	r3, [r3, #0]
9000983c:	681a      	ldr	r2, [r3, #0]
9000983e:	687b      	ldr	r3, [r7, #4]
90009840:	681b      	ldr	r3, [r3, #0]
90009842:	f042 0201 	orr.w	r2, r2, #1
90009846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009848:	6878      	ldr	r0, [r7, #4]
9000984a:	f000 fe9d 	bl	9000a588 <UART_CheckIdleState>
9000984e:	4603      	mov	r3, r0
}
90009850:	4618      	mov	r0, r3
90009852:	3708      	adds	r7, #8
90009854:	46bd      	mov	sp, r7
90009856:	bd80      	pop	{r7, pc}

90009858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009858:	b580      	push	{r7, lr}
9000985a:	b08a      	sub	sp, #40	@ 0x28
9000985c:	af02      	add	r7, sp, #8
9000985e:	60f8      	str	r0, [r7, #12]
90009860:	60b9      	str	r1, [r7, #8]
90009862:	603b      	str	r3, [r7, #0]
90009864:	4613      	mov	r3, r2
90009866:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009868:	68fb      	ldr	r3, [r7, #12]
9000986a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000986e:	2b20      	cmp	r3, #32
90009870:	d17b      	bne.n	9000996a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009872:	68bb      	ldr	r3, [r7, #8]
90009874:	2b00      	cmp	r3, #0
90009876:	d002      	beq.n	9000987e <HAL_UART_Transmit+0x26>
90009878:	88fb      	ldrh	r3, [r7, #6]
9000987a:	2b00      	cmp	r3, #0
9000987c:	d101      	bne.n	90009882 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
9000987e:	2301      	movs	r3, #1
90009880:	e074      	b.n	9000996c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009882:	68fb      	ldr	r3, [r7, #12]
90009884:	2200      	movs	r2, #0
90009886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000988a:	68fb      	ldr	r3, [r7, #12]
9000988c:	2221      	movs	r2, #33	@ 0x21
9000988e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009892:	f7f9 facd 	bl	90002e30 <HAL_GetTick>
90009896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009898:	68fb      	ldr	r3, [r7, #12]
9000989a:	88fa      	ldrh	r2, [r7, #6]
9000989c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
900098a0:	68fb      	ldr	r3, [r7, #12]
900098a2:	88fa      	ldrh	r2, [r7, #6]
900098a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
900098a8:	68fb      	ldr	r3, [r7, #12]
900098aa:	689b      	ldr	r3, [r3, #8]
900098ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900098b0:	d108      	bne.n	900098c4 <HAL_UART_Transmit+0x6c>
900098b2:	68fb      	ldr	r3, [r7, #12]
900098b4:	691b      	ldr	r3, [r3, #16]
900098b6:	2b00      	cmp	r3, #0
900098b8:	d104      	bne.n	900098c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
900098ba:	2300      	movs	r3, #0
900098bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
900098be:	68bb      	ldr	r3, [r7, #8]
900098c0:	61bb      	str	r3, [r7, #24]
900098c2:	e003      	b.n	900098cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
900098c4:	68bb      	ldr	r3, [r7, #8]
900098c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
900098c8:	2300      	movs	r3, #0
900098ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
900098cc:	e030      	b.n	90009930 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
900098ce:	683b      	ldr	r3, [r7, #0]
900098d0:	9300      	str	r3, [sp, #0]
900098d2:	697b      	ldr	r3, [r7, #20]
900098d4:	2200      	movs	r2, #0
900098d6:	2180      	movs	r1, #128	@ 0x80
900098d8:	68f8      	ldr	r0, [r7, #12]
900098da:	f000 feff 	bl	9000a6dc <UART_WaitOnFlagUntilTimeout>
900098de:	4603      	mov	r3, r0
900098e0:	2b00      	cmp	r3, #0
900098e2:	d005      	beq.n	900098f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
900098e4:	68fb      	ldr	r3, [r7, #12]
900098e6:	2220      	movs	r2, #32
900098e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
900098ec:	2303      	movs	r3, #3
900098ee:	e03d      	b.n	9000996c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
900098f0:	69fb      	ldr	r3, [r7, #28]
900098f2:	2b00      	cmp	r3, #0
900098f4:	d10b      	bne.n	9000990e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
900098f6:	69bb      	ldr	r3, [r7, #24]
900098f8:	881b      	ldrh	r3, [r3, #0]
900098fa:	461a      	mov	r2, r3
900098fc:	68fb      	ldr	r3, [r7, #12]
900098fe:	681b      	ldr	r3, [r3, #0]
90009900:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009904:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009906:	69bb      	ldr	r3, [r7, #24]
90009908:	3302      	adds	r3, #2
9000990a:	61bb      	str	r3, [r7, #24]
9000990c:	e007      	b.n	9000991e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000990e:	69fb      	ldr	r3, [r7, #28]
90009910:	781a      	ldrb	r2, [r3, #0]
90009912:	68fb      	ldr	r3, [r7, #12]
90009914:	681b      	ldr	r3, [r3, #0]
90009916:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009918:	69fb      	ldr	r3, [r7, #28]
9000991a:	3301      	adds	r3, #1
9000991c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
9000991e:	68fb      	ldr	r3, [r7, #12]
90009920:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009924:	b29b      	uxth	r3, r3
90009926:	3b01      	subs	r3, #1
90009928:	b29a      	uxth	r2, r3
9000992a:	68fb      	ldr	r3, [r7, #12]
9000992c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009930:	68fb      	ldr	r3, [r7, #12]
90009932:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009936:	b29b      	uxth	r3, r3
90009938:	2b00      	cmp	r3, #0
9000993a:	d1c8      	bne.n	900098ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
9000993c:	683b      	ldr	r3, [r7, #0]
9000993e:	9300      	str	r3, [sp, #0]
90009940:	697b      	ldr	r3, [r7, #20]
90009942:	2200      	movs	r2, #0
90009944:	2140      	movs	r1, #64	@ 0x40
90009946:	68f8      	ldr	r0, [r7, #12]
90009948:	f000 fec8 	bl	9000a6dc <UART_WaitOnFlagUntilTimeout>
9000994c:	4603      	mov	r3, r0
9000994e:	2b00      	cmp	r3, #0
90009950:	d005      	beq.n	9000995e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009952:	68fb      	ldr	r3, [r7, #12]
90009954:	2220      	movs	r2, #32
90009956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
9000995a:	2303      	movs	r3, #3
9000995c:	e006      	b.n	9000996c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
9000995e:	68fb      	ldr	r3, [r7, #12]
90009960:	2220      	movs	r2, #32
90009962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009966:	2300      	movs	r3, #0
90009968:	e000      	b.n	9000996c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
9000996a:	2302      	movs	r3, #2
  }
}
9000996c:	4618      	mov	r0, r3
9000996e:	3720      	adds	r7, #32
90009970:	46bd      	mov	sp, r7
90009972:	bd80      	pop	{r7, pc}

90009974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009978:	b092      	sub	sp, #72	@ 0x48
9000997a:	af00      	add	r7, sp, #0
9000997c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
9000997e:	2300      	movs	r3, #0
90009980:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009984:	697b      	ldr	r3, [r7, #20]
90009986:	689a      	ldr	r2, [r3, #8]
90009988:	697b      	ldr	r3, [r7, #20]
9000998a:	691b      	ldr	r3, [r3, #16]
9000998c:	431a      	orrs	r2, r3
9000998e:	697b      	ldr	r3, [r7, #20]
90009990:	695b      	ldr	r3, [r3, #20]
90009992:	431a      	orrs	r2, r3
90009994:	697b      	ldr	r3, [r7, #20]
90009996:	69db      	ldr	r3, [r3, #28]
90009998:	4313      	orrs	r3, r2
9000999a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000999c:	697b      	ldr	r3, [r7, #20]
9000999e:	681b      	ldr	r3, [r3, #0]
900099a0:	681a      	ldr	r2, [r3, #0]
900099a2:	4bbe      	ldr	r3, [pc, #760]	@ (90009c9c <UART_SetConfig+0x328>)
900099a4:	4013      	ands	r3, r2
900099a6:	697a      	ldr	r2, [r7, #20]
900099a8:	6812      	ldr	r2, [r2, #0]
900099aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
900099ac:	430b      	orrs	r3, r1
900099ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
900099b0:	697b      	ldr	r3, [r7, #20]
900099b2:	681b      	ldr	r3, [r3, #0]
900099b4:	685b      	ldr	r3, [r3, #4]
900099b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
900099ba:	697b      	ldr	r3, [r7, #20]
900099bc:	68da      	ldr	r2, [r3, #12]
900099be:	697b      	ldr	r3, [r7, #20]
900099c0:	681b      	ldr	r3, [r3, #0]
900099c2:	430a      	orrs	r2, r1
900099c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
900099c6:	697b      	ldr	r3, [r7, #20]
900099c8:	699b      	ldr	r3, [r3, #24]
900099ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
900099cc:	697b      	ldr	r3, [r7, #20]
900099ce:	681b      	ldr	r3, [r3, #0]
900099d0:	4ab3      	ldr	r2, [pc, #716]	@ (90009ca0 <UART_SetConfig+0x32c>)
900099d2:	4293      	cmp	r3, r2
900099d4:	d004      	beq.n	900099e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
900099d6:	697b      	ldr	r3, [r7, #20]
900099d8:	6a1b      	ldr	r3, [r3, #32]
900099da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
900099dc:	4313      	orrs	r3, r2
900099de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
900099e0:	697b      	ldr	r3, [r7, #20]
900099e2:	681b      	ldr	r3, [r3, #0]
900099e4:	689a      	ldr	r2, [r3, #8]
900099e6:	4baf      	ldr	r3, [pc, #700]	@ (90009ca4 <UART_SetConfig+0x330>)
900099e8:	4013      	ands	r3, r2
900099ea:	697a      	ldr	r2, [r7, #20]
900099ec:	6812      	ldr	r2, [r2, #0]
900099ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
900099f0:	430b      	orrs	r3, r1
900099f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
900099f4:	697b      	ldr	r3, [r7, #20]
900099f6:	681b      	ldr	r3, [r3, #0]
900099f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900099fa:	f023 010f 	bic.w	r1, r3, #15
900099fe:	697b      	ldr	r3, [r7, #20]
90009a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009a02:	697b      	ldr	r3, [r7, #20]
90009a04:	681b      	ldr	r3, [r3, #0]
90009a06:	430a      	orrs	r2, r1
90009a08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009a0a:	697b      	ldr	r3, [r7, #20]
90009a0c:	681b      	ldr	r3, [r3, #0]
90009a0e:	4aa6      	ldr	r2, [pc, #664]	@ (90009ca8 <UART_SetConfig+0x334>)
90009a10:	4293      	cmp	r3, r2
90009a12:	d177      	bne.n	90009b04 <UART_SetConfig+0x190>
90009a14:	4ba5      	ldr	r3, [pc, #660]	@ (90009cac <UART_SetConfig+0x338>)
90009a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009a18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009a1c:	2b28      	cmp	r3, #40	@ 0x28
90009a1e:	d86d      	bhi.n	90009afc <UART_SetConfig+0x188>
90009a20:	a201      	add	r2, pc, #4	@ (adr r2, 90009a28 <UART_SetConfig+0xb4>)
90009a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009a26:	bf00      	nop
90009a28:	90009acd 	.word	0x90009acd
90009a2c:	90009afd 	.word	0x90009afd
90009a30:	90009afd 	.word	0x90009afd
90009a34:	90009afd 	.word	0x90009afd
90009a38:	90009afd 	.word	0x90009afd
90009a3c:	90009afd 	.word	0x90009afd
90009a40:	90009afd 	.word	0x90009afd
90009a44:	90009afd 	.word	0x90009afd
90009a48:	90009ad5 	.word	0x90009ad5
90009a4c:	90009afd 	.word	0x90009afd
90009a50:	90009afd 	.word	0x90009afd
90009a54:	90009afd 	.word	0x90009afd
90009a58:	90009afd 	.word	0x90009afd
90009a5c:	90009afd 	.word	0x90009afd
90009a60:	90009afd 	.word	0x90009afd
90009a64:	90009afd 	.word	0x90009afd
90009a68:	90009add 	.word	0x90009add
90009a6c:	90009afd 	.word	0x90009afd
90009a70:	90009afd 	.word	0x90009afd
90009a74:	90009afd 	.word	0x90009afd
90009a78:	90009afd 	.word	0x90009afd
90009a7c:	90009afd 	.word	0x90009afd
90009a80:	90009afd 	.word	0x90009afd
90009a84:	90009afd 	.word	0x90009afd
90009a88:	90009ae5 	.word	0x90009ae5
90009a8c:	90009afd 	.word	0x90009afd
90009a90:	90009afd 	.word	0x90009afd
90009a94:	90009afd 	.word	0x90009afd
90009a98:	90009afd 	.word	0x90009afd
90009a9c:	90009afd 	.word	0x90009afd
90009aa0:	90009afd 	.word	0x90009afd
90009aa4:	90009afd 	.word	0x90009afd
90009aa8:	90009aed 	.word	0x90009aed
90009aac:	90009afd 	.word	0x90009afd
90009ab0:	90009afd 	.word	0x90009afd
90009ab4:	90009afd 	.word	0x90009afd
90009ab8:	90009afd 	.word	0x90009afd
90009abc:	90009afd 	.word	0x90009afd
90009ac0:	90009afd 	.word	0x90009afd
90009ac4:	90009afd 	.word	0x90009afd
90009ac8:	90009af5 	.word	0x90009af5
90009acc:	2301      	movs	r3, #1
90009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ad2:	e222      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009ad4:	2304      	movs	r3, #4
90009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ada:	e21e      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009adc:	2308      	movs	r3, #8
90009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ae2:	e21a      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009ae4:	2310      	movs	r3, #16
90009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009aea:	e216      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009aec:	2320      	movs	r3, #32
90009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009af2:	e212      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009af4:	2340      	movs	r3, #64	@ 0x40
90009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009afa:	e20e      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009afc:	2380      	movs	r3, #128	@ 0x80
90009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b02:	e20a      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b04:	697b      	ldr	r3, [r7, #20]
90009b06:	681b      	ldr	r3, [r3, #0]
90009b08:	4a69      	ldr	r2, [pc, #420]	@ (90009cb0 <UART_SetConfig+0x33c>)
90009b0a:	4293      	cmp	r3, r2
90009b0c:	d130      	bne.n	90009b70 <UART_SetConfig+0x1fc>
90009b0e:	4b67      	ldr	r3, [pc, #412]	@ (90009cac <UART_SetConfig+0x338>)
90009b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009b12:	f003 0307 	and.w	r3, r3, #7
90009b16:	2b05      	cmp	r3, #5
90009b18:	d826      	bhi.n	90009b68 <UART_SetConfig+0x1f4>
90009b1a:	a201      	add	r2, pc, #4	@ (adr r2, 90009b20 <UART_SetConfig+0x1ac>)
90009b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009b20:	90009b39 	.word	0x90009b39
90009b24:	90009b41 	.word	0x90009b41
90009b28:	90009b49 	.word	0x90009b49
90009b2c:	90009b51 	.word	0x90009b51
90009b30:	90009b59 	.word	0x90009b59
90009b34:	90009b61 	.word	0x90009b61
90009b38:	2300      	movs	r3, #0
90009b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b3e:	e1ec      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b40:	2304      	movs	r3, #4
90009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b46:	e1e8      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b48:	2308      	movs	r3, #8
90009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b4e:	e1e4      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b50:	2310      	movs	r3, #16
90009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b56:	e1e0      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b58:	2320      	movs	r3, #32
90009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b5e:	e1dc      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b60:	2340      	movs	r3, #64	@ 0x40
90009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b66:	e1d8      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b68:	2380      	movs	r3, #128	@ 0x80
90009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009b6e:	e1d4      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009b70:	697b      	ldr	r3, [r7, #20]
90009b72:	681b      	ldr	r3, [r3, #0]
90009b74:	4a4f      	ldr	r2, [pc, #316]	@ (90009cb4 <UART_SetConfig+0x340>)
90009b76:	4293      	cmp	r3, r2
90009b78:	d130      	bne.n	90009bdc <UART_SetConfig+0x268>
90009b7a:	4b4c      	ldr	r3, [pc, #304]	@ (90009cac <UART_SetConfig+0x338>)
90009b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009b7e:	f003 0307 	and.w	r3, r3, #7
90009b82:	2b05      	cmp	r3, #5
90009b84:	d826      	bhi.n	90009bd4 <UART_SetConfig+0x260>
90009b86:	a201      	add	r2, pc, #4	@ (adr r2, 90009b8c <UART_SetConfig+0x218>)
90009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009b8c:	90009ba5 	.word	0x90009ba5
90009b90:	90009bad 	.word	0x90009bad
90009b94:	90009bb5 	.word	0x90009bb5
90009b98:	90009bbd 	.word	0x90009bbd
90009b9c:	90009bc5 	.word	0x90009bc5
90009ba0:	90009bcd 	.word	0x90009bcd
90009ba4:	2300      	movs	r3, #0
90009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009baa:	e1b6      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009bac:	2304      	movs	r3, #4
90009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009bb2:	e1b2      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009bb4:	2308      	movs	r3, #8
90009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009bba:	e1ae      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009bbc:	2310      	movs	r3, #16
90009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009bc2:	e1aa      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009bc4:	2320      	movs	r3, #32
90009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009bca:	e1a6      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009bcc:	2340      	movs	r3, #64	@ 0x40
90009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009bd2:	e1a2      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009bd4:	2380      	movs	r3, #128	@ 0x80
90009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009bda:	e19e      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009bdc:	697b      	ldr	r3, [r7, #20]
90009bde:	681b      	ldr	r3, [r3, #0]
90009be0:	4a35      	ldr	r2, [pc, #212]	@ (90009cb8 <UART_SetConfig+0x344>)
90009be2:	4293      	cmp	r3, r2
90009be4:	d130      	bne.n	90009c48 <UART_SetConfig+0x2d4>
90009be6:	4b31      	ldr	r3, [pc, #196]	@ (90009cac <UART_SetConfig+0x338>)
90009be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009bea:	f003 0307 	and.w	r3, r3, #7
90009bee:	2b05      	cmp	r3, #5
90009bf0:	d826      	bhi.n	90009c40 <UART_SetConfig+0x2cc>
90009bf2:	a201      	add	r2, pc, #4	@ (adr r2, 90009bf8 <UART_SetConfig+0x284>)
90009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009bf8:	90009c11 	.word	0x90009c11
90009bfc:	90009c19 	.word	0x90009c19
90009c00:	90009c21 	.word	0x90009c21
90009c04:	90009c29 	.word	0x90009c29
90009c08:	90009c31 	.word	0x90009c31
90009c0c:	90009c39 	.word	0x90009c39
90009c10:	2300      	movs	r3, #0
90009c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c16:	e180      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c18:	2304      	movs	r3, #4
90009c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c1e:	e17c      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c20:	2308      	movs	r3, #8
90009c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c26:	e178      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c28:	2310      	movs	r3, #16
90009c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c2e:	e174      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c30:	2320      	movs	r3, #32
90009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c36:	e170      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c38:	2340      	movs	r3, #64	@ 0x40
90009c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c3e:	e16c      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c40:	2380      	movs	r3, #128	@ 0x80
90009c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c46:	e168      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c48:	697b      	ldr	r3, [r7, #20]
90009c4a:	681b      	ldr	r3, [r3, #0]
90009c4c:	4a1b      	ldr	r2, [pc, #108]	@ (90009cbc <UART_SetConfig+0x348>)
90009c4e:	4293      	cmp	r3, r2
90009c50:	d142      	bne.n	90009cd8 <UART_SetConfig+0x364>
90009c52:	4b16      	ldr	r3, [pc, #88]	@ (90009cac <UART_SetConfig+0x338>)
90009c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009c56:	f003 0307 	and.w	r3, r3, #7
90009c5a:	2b05      	cmp	r3, #5
90009c5c:	d838      	bhi.n	90009cd0 <UART_SetConfig+0x35c>
90009c5e:	a201      	add	r2, pc, #4	@ (adr r2, 90009c64 <UART_SetConfig+0x2f0>)
90009c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009c64:	90009c7d 	.word	0x90009c7d
90009c68:	90009c85 	.word	0x90009c85
90009c6c:	90009c8d 	.word	0x90009c8d
90009c70:	90009c95 	.word	0x90009c95
90009c74:	90009cc1 	.word	0x90009cc1
90009c78:	90009cc9 	.word	0x90009cc9
90009c7c:	2300      	movs	r3, #0
90009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c82:	e14a      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c84:	2304      	movs	r3, #4
90009c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c8a:	e146      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c8c:	2308      	movs	r3, #8
90009c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c92:	e142      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c94:	2310      	movs	r3, #16
90009c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009c9a:	e13e      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009c9c:	cfff69f3 	.word	0xcfff69f3
90009ca0:	58000c00 	.word	0x58000c00
90009ca4:	11fff4ff 	.word	0x11fff4ff
90009ca8:	40011000 	.word	0x40011000
90009cac:	58024400 	.word	0x58024400
90009cb0:	40004400 	.word	0x40004400
90009cb4:	40004800 	.word	0x40004800
90009cb8:	40004c00 	.word	0x40004c00
90009cbc:	40005000 	.word	0x40005000
90009cc0:	2320      	movs	r3, #32
90009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009cc6:	e128      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009cc8:	2340      	movs	r3, #64	@ 0x40
90009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009cce:	e124      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009cd0:	2380      	movs	r3, #128	@ 0x80
90009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009cd6:	e120      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009cd8:	697b      	ldr	r3, [r7, #20]
90009cda:	681b      	ldr	r3, [r3, #0]
90009cdc:	4acb      	ldr	r2, [pc, #812]	@ (9000a00c <UART_SetConfig+0x698>)
90009cde:	4293      	cmp	r3, r2
90009ce0:	d176      	bne.n	90009dd0 <UART_SetConfig+0x45c>
90009ce2:	4bcb      	ldr	r3, [pc, #812]	@ (9000a010 <UART_SetConfig+0x69c>)
90009ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009cea:	2b28      	cmp	r3, #40	@ 0x28
90009cec:	d86c      	bhi.n	90009dc8 <UART_SetConfig+0x454>
90009cee:	a201      	add	r2, pc, #4	@ (adr r2, 90009cf4 <UART_SetConfig+0x380>)
90009cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009cf4:	90009d99 	.word	0x90009d99
90009cf8:	90009dc9 	.word	0x90009dc9
90009cfc:	90009dc9 	.word	0x90009dc9
90009d00:	90009dc9 	.word	0x90009dc9
90009d04:	90009dc9 	.word	0x90009dc9
90009d08:	90009dc9 	.word	0x90009dc9
90009d0c:	90009dc9 	.word	0x90009dc9
90009d10:	90009dc9 	.word	0x90009dc9
90009d14:	90009da1 	.word	0x90009da1
90009d18:	90009dc9 	.word	0x90009dc9
90009d1c:	90009dc9 	.word	0x90009dc9
90009d20:	90009dc9 	.word	0x90009dc9
90009d24:	90009dc9 	.word	0x90009dc9
90009d28:	90009dc9 	.word	0x90009dc9
90009d2c:	90009dc9 	.word	0x90009dc9
90009d30:	90009dc9 	.word	0x90009dc9
90009d34:	90009da9 	.word	0x90009da9
90009d38:	90009dc9 	.word	0x90009dc9
90009d3c:	90009dc9 	.word	0x90009dc9
90009d40:	90009dc9 	.word	0x90009dc9
90009d44:	90009dc9 	.word	0x90009dc9
90009d48:	90009dc9 	.word	0x90009dc9
90009d4c:	90009dc9 	.word	0x90009dc9
90009d50:	90009dc9 	.word	0x90009dc9
90009d54:	90009db1 	.word	0x90009db1
90009d58:	90009dc9 	.word	0x90009dc9
90009d5c:	90009dc9 	.word	0x90009dc9
90009d60:	90009dc9 	.word	0x90009dc9
90009d64:	90009dc9 	.word	0x90009dc9
90009d68:	90009dc9 	.word	0x90009dc9
90009d6c:	90009dc9 	.word	0x90009dc9
90009d70:	90009dc9 	.word	0x90009dc9
90009d74:	90009db9 	.word	0x90009db9
90009d78:	90009dc9 	.word	0x90009dc9
90009d7c:	90009dc9 	.word	0x90009dc9
90009d80:	90009dc9 	.word	0x90009dc9
90009d84:	90009dc9 	.word	0x90009dc9
90009d88:	90009dc9 	.word	0x90009dc9
90009d8c:	90009dc9 	.word	0x90009dc9
90009d90:	90009dc9 	.word	0x90009dc9
90009d94:	90009dc1 	.word	0x90009dc1
90009d98:	2301      	movs	r3, #1
90009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d9e:	e0bc      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009da0:	2304      	movs	r3, #4
90009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009da6:	e0b8      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009da8:	2308      	movs	r3, #8
90009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dae:	e0b4      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009db0:	2310      	movs	r3, #16
90009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009db6:	e0b0      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009db8:	2320      	movs	r3, #32
90009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dbe:	e0ac      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009dc0:	2340      	movs	r3, #64	@ 0x40
90009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dc6:	e0a8      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009dc8:	2380      	movs	r3, #128	@ 0x80
90009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dce:	e0a4      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009dd0:	697b      	ldr	r3, [r7, #20]
90009dd2:	681b      	ldr	r3, [r3, #0]
90009dd4:	4a8f      	ldr	r2, [pc, #572]	@ (9000a014 <UART_SetConfig+0x6a0>)
90009dd6:	4293      	cmp	r3, r2
90009dd8:	d130      	bne.n	90009e3c <UART_SetConfig+0x4c8>
90009dda:	4b8d      	ldr	r3, [pc, #564]	@ (9000a010 <UART_SetConfig+0x69c>)
90009ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009dde:	f003 0307 	and.w	r3, r3, #7
90009de2:	2b05      	cmp	r3, #5
90009de4:	d826      	bhi.n	90009e34 <UART_SetConfig+0x4c0>
90009de6:	a201      	add	r2, pc, #4	@ (adr r2, 90009dec <UART_SetConfig+0x478>)
90009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009dec:	90009e05 	.word	0x90009e05
90009df0:	90009e0d 	.word	0x90009e0d
90009df4:	90009e15 	.word	0x90009e15
90009df8:	90009e1d 	.word	0x90009e1d
90009dfc:	90009e25 	.word	0x90009e25
90009e00:	90009e2d 	.word	0x90009e2d
90009e04:	2300      	movs	r3, #0
90009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e0a:	e086      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e0c:	2304      	movs	r3, #4
90009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e12:	e082      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e14:	2308      	movs	r3, #8
90009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e1a:	e07e      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e1c:	2310      	movs	r3, #16
90009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e22:	e07a      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e24:	2320      	movs	r3, #32
90009e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e2a:	e076      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e2c:	2340      	movs	r3, #64	@ 0x40
90009e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e32:	e072      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e34:	2380      	movs	r3, #128	@ 0x80
90009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e3a:	e06e      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e3c:	697b      	ldr	r3, [r7, #20]
90009e3e:	681b      	ldr	r3, [r3, #0]
90009e40:	4a75      	ldr	r2, [pc, #468]	@ (9000a018 <UART_SetConfig+0x6a4>)
90009e42:	4293      	cmp	r3, r2
90009e44:	d130      	bne.n	90009ea8 <UART_SetConfig+0x534>
90009e46:	4b72      	ldr	r3, [pc, #456]	@ (9000a010 <UART_SetConfig+0x69c>)
90009e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009e4a:	f003 0307 	and.w	r3, r3, #7
90009e4e:	2b05      	cmp	r3, #5
90009e50:	d826      	bhi.n	90009ea0 <UART_SetConfig+0x52c>
90009e52:	a201      	add	r2, pc, #4	@ (adr r2, 90009e58 <UART_SetConfig+0x4e4>)
90009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009e58:	90009e71 	.word	0x90009e71
90009e5c:	90009e79 	.word	0x90009e79
90009e60:	90009e81 	.word	0x90009e81
90009e64:	90009e89 	.word	0x90009e89
90009e68:	90009e91 	.word	0x90009e91
90009e6c:	90009e99 	.word	0x90009e99
90009e70:	2300      	movs	r3, #0
90009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e76:	e050      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e78:	2304      	movs	r3, #4
90009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e7e:	e04c      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e80:	2308      	movs	r3, #8
90009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e86:	e048      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e88:	2310      	movs	r3, #16
90009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e8e:	e044      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e90:	2320      	movs	r3, #32
90009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e96:	e040      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009e98:	2340      	movs	r3, #64	@ 0x40
90009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e9e:	e03c      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009ea0:	2380      	movs	r3, #128	@ 0x80
90009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ea6:	e038      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009ea8:	697b      	ldr	r3, [r7, #20]
90009eaa:	681b      	ldr	r3, [r3, #0]
90009eac:	4a5b      	ldr	r2, [pc, #364]	@ (9000a01c <UART_SetConfig+0x6a8>)
90009eae:	4293      	cmp	r3, r2
90009eb0:	d130      	bne.n	90009f14 <UART_SetConfig+0x5a0>
90009eb2:	4b57      	ldr	r3, [pc, #348]	@ (9000a010 <UART_SetConfig+0x69c>)
90009eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90009eb6:	f003 0307 	and.w	r3, r3, #7
90009eba:	2b05      	cmp	r3, #5
90009ebc:	d826      	bhi.n	90009f0c <UART_SetConfig+0x598>
90009ebe:	a201      	add	r2, pc, #4	@ (adr r2, 90009ec4 <UART_SetConfig+0x550>)
90009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009ec4:	90009edd 	.word	0x90009edd
90009ec8:	90009ee5 	.word	0x90009ee5
90009ecc:	90009eed 	.word	0x90009eed
90009ed0:	90009ef5 	.word	0x90009ef5
90009ed4:	90009efd 	.word	0x90009efd
90009ed8:	90009f05 	.word	0x90009f05
90009edc:	2302      	movs	r3, #2
90009ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ee2:	e01a      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009ee4:	2304      	movs	r3, #4
90009ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eea:	e016      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009eec:	2308      	movs	r3, #8
90009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ef2:	e012      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009ef4:	2310      	movs	r3, #16
90009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009efa:	e00e      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009efc:	2320      	movs	r3, #32
90009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f02:	e00a      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009f04:	2340      	movs	r3, #64	@ 0x40
90009f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f0a:	e006      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009f0c:	2380      	movs	r3, #128	@ 0x80
90009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f12:	e002      	b.n	90009f1a <UART_SetConfig+0x5a6>
90009f14:	2380      	movs	r3, #128	@ 0x80
90009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
90009f1a:	697b      	ldr	r3, [r7, #20]
90009f1c:	681b      	ldr	r3, [r3, #0]
90009f1e:	4a3f      	ldr	r2, [pc, #252]	@ (9000a01c <UART_SetConfig+0x6a8>)
90009f20:	4293      	cmp	r3, r2
90009f22:	f040 80f8 	bne.w	9000a116 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
90009f26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
90009f2a:	2b20      	cmp	r3, #32
90009f2c:	dc46      	bgt.n	90009fbc <UART_SetConfig+0x648>
90009f2e:	2b02      	cmp	r3, #2
90009f30:	f2c0 8082 	blt.w	9000a038 <UART_SetConfig+0x6c4>
90009f34:	3b02      	subs	r3, #2
90009f36:	2b1e      	cmp	r3, #30
90009f38:	d87e      	bhi.n	9000a038 <UART_SetConfig+0x6c4>
90009f3a:	a201      	add	r2, pc, #4	@ (adr r2, 90009f40 <UART_SetConfig+0x5cc>)
90009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f40:	90009fc3 	.word	0x90009fc3
90009f44:	9000a039 	.word	0x9000a039
90009f48:	90009fcb 	.word	0x90009fcb
90009f4c:	9000a039 	.word	0x9000a039
90009f50:	9000a039 	.word	0x9000a039
90009f54:	9000a039 	.word	0x9000a039
90009f58:	90009fdb 	.word	0x90009fdb
90009f5c:	9000a039 	.word	0x9000a039
90009f60:	9000a039 	.word	0x9000a039
90009f64:	9000a039 	.word	0x9000a039
90009f68:	9000a039 	.word	0x9000a039
90009f6c:	9000a039 	.word	0x9000a039
90009f70:	9000a039 	.word	0x9000a039
90009f74:	9000a039 	.word	0x9000a039
90009f78:	90009feb 	.word	0x90009feb
90009f7c:	9000a039 	.word	0x9000a039
90009f80:	9000a039 	.word	0x9000a039
90009f84:	9000a039 	.word	0x9000a039
90009f88:	9000a039 	.word	0x9000a039
90009f8c:	9000a039 	.word	0x9000a039
90009f90:	9000a039 	.word	0x9000a039
90009f94:	9000a039 	.word	0x9000a039
90009f98:	9000a039 	.word	0x9000a039
90009f9c:	9000a039 	.word	0x9000a039
90009fa0:	9000a039 	.word	0x9000a039
90009fa4:	9000a039 	.word	0x9000a039
90009fa8:	9000a039 	.word	0x9000a039
90009fac:	9000a039 	.word	0x9000a039
90009fb0:	9000a039 	.word	0x9000a039
90009fb4:	9000a039 	.word	0x9000a039
90009fb8:	9000a02b 	.word	0x9000a02b
90009fbc:	2b40      	cmp	r3, #64	@ 0x40
90009fbe:	d037      	beq.n	9000a030 <UART_SetConfig+0x6bc>
90009fc0:	e03a      	b.n	9000a038 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
90009fc2:	f7fe fdcd 	bl	90008b60 <HAL_RCCEx_GetD3PCLK1Freq>
90009fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
90009fc8:	e03c      	b.n	9000a044 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90009fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90009fce:	4618      	mov	r0, r3
90009fd0:	f7fe fddc 	bl	90008b8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90009fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
90009fd8:	e034      	b.n	9000a044 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90009fda:	f107 0318 	add.w	r3, r7, #24
90009fde:	4618      	mov	r0, r3
90009fe0:	f7fe ff28 	bl	90008e34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90009fe4:	69fb      	ldr	r3, [r7, #28]
90009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
90009fe8:	e02c      	b.n	9000a044 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009fea:	4b09      	ldr	r3, [pc, #36]	@ (9000a010 <UART_SetConfig+0x69c>)
90009fec:	681b      	ldr	r3, [r3, #0]
90009fee:	f003 0320 	and.w	r3, r3, #32
90009ff2:	2b00      	cmp	r3, #0
90009ff4:	d016      	beq.n	9000a024 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90009ff6:	4b06      	ldr	r3, [pc, #24]	@ (9000a010 <UART_SetConfig+0x69c>)
90009ff8:	681b      	ldr	r3, [r3, #0]
90009ffa:	08db      	lsrs	r3, r3, #3
90009ffc:	f003 0303 	and.w	r3, r3, #3
9000a000:	4a07      	ldr	r2, [pc, #28]	@ (9000a020 <UART_SetConfig+0x6ac>)
9000a002:	fa22 f303 	lsr.w	r3, r2, r3
9000a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a008:	e01c      	b.n	9000a044 <UART_SetConfig+0x6d0>
9000a00a:	bf00      	nop
9000a00c:	40011400 	.word	0x40011400
9000a010:	58024400 	.word	0x58024400
9000a014:	40007800 	.word	0x40007800
9000a018:	40007c00 	.word	0x40007c00
9000a01c:	58000c00 	.word	0x58000c00
9000a020:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a024:	4b9d      	ldr	r3, [pc, #628]	@ (9000a29c <UART_SetConfig+0x928>)
9000a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a028:	e00c      	b.n	9000a044 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a02a:	4b9d      	ldr	r3, [pc, #628]	@ (9000a2a0 <UART_SetConfig+0x92c>)
9000a02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a02e:	e009      	b.n	9000a044 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a030:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a036:	e005      	b.n	9000a044 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a038:	2300      	movs	r3, #0
9000a03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a03c:	2301      	movs	r3, #1
9000a03e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a042:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a046:	2b00      	cmp	r3, #0
9000a048:	f000 81de 	beq.w	9000a408 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a04c:	697b      	ldr	r3, [r7, #20]
9000a04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a050:	4a94      	ldr	r2, [pc, #592]	@ (9000a2a4 <UART_SetConfig+0x930>)
9000a052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a056:	461a      	mov	r2, r3
9000a058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a05a:	fbb3 f3f2 	udiv	r3, r3, r2
9000a05e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a060:	697b      	ldr	r3, [r7, #20]
9000a062:	685a      	ldr	r2, [r3, #4]
9000a064:	4613      	mov	r3, r2
9000a066:	005b      	lsls	r3, r3, #1
9000a068:	4413      	add	r3, r2
9000a06a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a06c:	429a      	cmp	r2, r3
9000a06e:	d305      	bcc.n	9000a07c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a070:	697b      	ldr	r3, [r7, #20]
9000a072:	685b      	ldr	r3, [r3, #4]
9000a074:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a078:	429a      	cmp	r2, r3
9000a07a:	d903      	bls.n	9000a084 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a07c:	2301      	movs	r3, #1
9000a07e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a082:	e1c1      	b.n	9000a408 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a086:	2200      	movs	r2, #0
9000a088:	60bb      	str	r3, [r7, #8]
9000a08a:	60fa      	str	r2, [r7, #12]
9000a08c:	697b      	ldr	r3, [r7, #20]
9000a08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a090:	4a84      	ldr	r2, [pc, #528]	@ (9000a2a4 <UART_SetConfig+0x930>)
9000a092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a096:	b29b      	uxth	r3, r3
9000a098:	2200      	movs	r2, #0
9000a09a:	603b      	str	r3, [r7, #0]
9000a09c:	607a      	str	r2, [r7, #4]
9000a09e:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a0a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a0a6:	f7f6 f96b 	bl	90000380 <__aeabi_uldivmod>
9000a0aa:	4602      	mov	r2, r0
9000a0ac:	460b      	mov	r3, r1
9000a0ae:	4610      	mov	r0, r2
9000a0b0:	4619      	mov	r1, r3
9000a0b2:	f04f 0200 	mov.w	r2, #0
9000a0b6:	f04f 0300 	mov.w	r3, #0
9000a0ba:	020b      	lsls	r3, r1, #8
9000a0bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a0c0:	0202      	lsls	r2, r0, #8
9000a0c2:	6979      	ldr	r1, [r7, #20]
9000a0c4:	6849      	ldr	r1, [r1, #4]
9000a0c6:	0849      	lsrs	r1, r1, #1
9000a0c8:	2000      	movs	r0, #0
9000a0ca:	460c      	mov	r4, r1
9000a0cc:	4605      	mov	r5, r0
9000a0ce:	eb12 0804 	adds.w	r8, r2, r4
9000a0d2:	eb43 0905 	adc.w	r9, r3, r5
9000a0d6:	697b      	ldr	r3, [r7, #20]
9000a0d8:	685b      	ldr	r3, [r3, #4]
9000a0da:	2200      	movs	r2, #0
9000a0dc:	469a      	mov	sl, r3
9000a0de:	4693      	mov	fp, r2
9000a0e0:	4652      	mov	r2, sl
9000a0e2:	465b      	mov	r3, fp
9000a0e4:	4640      	mov	r0, r8
9000a0e6:	4649      	mov	r1, r9
9000a0e8:	f7f6 f94a 	bl	90000380 <__aeabi_uldivmod>
9000a0ec:	4602      	mov	r2, r0
9000a0ee:	460b      	mov	r3, r1
9000a0f0:	4613      	mov	r3, r2
9000a0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a0f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a0fa:	d308      	bcc.n	9000a10e <UART_SetConfig+0x79a>
9000a0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a0fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a102:	d204      	bcs.n	9000a10e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a104:	697b      	ldr	r3, [r7, #20]
9000a106:	681b      	ldr	r3, [r3, #0]
9000a108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a10a:	60da      	str	r2, [r3, #12]
9000a10c:	e17c      	b.n	9000a408 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a10e:	2301      	movs	r3, #1
9000a110:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a114:	e178      	b.n	9000a408 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a116:	697b      	ldr	r3, [r7, #20]
9000a118:	69db      	ldr	r3, [r3, #28]
9000a11a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a11e:	f040 80c5 	bne.w	9000a2ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a122:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a126:	2b20      	cmp	r3, #32
9000a128:	dc48      	bgt.n	9000a1bc <UART_SetConfig+0x848>
9000a12a:	2b00      	cmp	r3, #0
9000a12c:	db7b      	blt.n	9000a226 <UART_SetConfig+0x8b2>
9000a12e:	2b20      	cmp	r3, #32
9000a130:	d879      	bhi.n	9000a226 <UART_SetConfig+0x8b2>
9000a132:	a201      	add	r2, pc, #4	@ (adr r2, 9000a138 <UART_SetConfig+0x7c4>)
9000a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a138:	9000a1c3 	.word	0x9000a1c3
9000a13c:	9000a1cb 	.word	0x9000a1cb
9000a140:	9000a227 	.word	0x9000a227
9000a144:	9000a227 	.word	0x9000a227
9000a148:	9000a1d3 	.word	0x9000a1d3
9000a14c:	9000a227 	.word	0x9000a227
9000a150:	9000a227 	.word	0x9000a227
9000a154:	9000a227 	.word	0x9000a227
9000a158:	9000a1e3 	.word	0x9000a1e3
9000a15c:	9000a227 	.word	0x9000a227
9000a160:	9000a227 	.word	0x9000a227
9000a164:	9000a227 	.word	0x9000a227
9000a168:	9000a227 	.word	0x9000a227
9000a16c:	9000a227 	.word	0x9000a227
9000a170:	9000a227 	.word	0x9000a227
9000a174:	9000a227 	.word	0x9000a227
9000a178:	9000a1f3 	.word	0x9000a1f3
9000a17c:	9000a227 	.word	0x9000a227
9000a180:	9000a227 	.word	0x9000a227
9000a184:	9000a227 	.word	0x9000a227
9000a188:	9000a227 	.word	0x9000a227
9000a18c:	9000a227 	.word	0x9000a227
9000a190:	9000a227 	.word	0x9000a227
9000a194:	9000a227 	.word	0x9000a227
9000a198:	9000a227 	.word	0x9000a227
9000a19c:	9000a227 	.word	0x9000a227
9000a1a0:	9000a227 	.word	0x9000a227
9000a1a4:	9000a227 	.word	0x9000a227
9000a1a8:	9000a227 	.word	0x9000a227
9000a1ac:	9000a227 	.word	0x9000a227
9000a1b0:	9000a227 	.word	0x9000a227
9000a1b4:	9000a227 	.word	0x9000a227
9000a1b8:	9000a219 	.word	0x9000a219
9000a1bc:	2b40      	cmp	r3, #64	@ 0x40
9000a1be:	d02e      	beq.n	9000a21e <UART_SetConfig+0x8aa>
9000a1c0:	e031      	b.n	9000a226 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a1c2:	f7fd fa97 	bl	900076f4 <HAL_RCC_GetPCLK1Freq>
9000a1c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a1c8:	e033      	b.n	9000a232 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a1ca:	f7fd faa9 	bl	90007720 <HAL_RCC_GetPCLK2Freq>
9000a1ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a1d0:	e02f      	b.n	9000a232 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a1d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a1d6:	4618      	mov	r0, r3
9000a1d8:	f7fe fcd8 	bl	90008b8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a1e0:	e027      	b.n	9000a232 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a1e2:	f107 0318 	add.w	r3, r7, #24
9000a1e6:	4618      	mov	r0, r3
9000a1e8:	f7fe fe24 	bl	90008e34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a1ec:	69fb      	ldr	r3, [r7, #28]
9000a1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a1f0:	e01f      	b.n	9000a232 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a1f2:	4b2d      	ldr	r3, [pc, #180]	@ (9000a2a8 <UART_SetConfig+0x934>)
9000a1f4:	681b      	ldr	r3, [r3, #0]
9000a1f6:	f003 0320 	and.w	r3, r3, #32
9000a1fa:	2b00      	cmp	r3, #0
9000a1fc:	d009      	beq.n	9000a212 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a1fe:	4b2a      	ldr	r3, [pc, #168]	@ (9000a2a8 <UART_SetConfig+0x934>)
9000a200:	681b      	ldr	r3, [r3, #0]
9000a202:	08db      	lsrs	r3, r3, #3
9000a204:	f003 0303 	and.w	r3, r3, #3
9000a208:	4a24      	ldr	r2, [pc, #144]	@ (9000a29c <UART_SetConfig+0x928>)
9000a20a:	fa22 f303 	lsr.w	r3, r2, r3
9000a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a210:	e00f      	b.n	9000a232 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a212:	4b22      	ldr	r3, [pc, #136]	@ (9000a29c <UART_SetConfig+0x928>)
9000a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a216:	e00c      	b.n	9000a232 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a218:	4b21      	ldr	r3, [pc, #132]	@ (9000a2a0 <UART_SetConfig+0x92c>)
9000a21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a21c:	e009      	b.n	9000a232 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a21e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a224:	e005      	b.n	9000a232 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a226:	2300      	movs	r3, #0
9000a228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a22a:	2301      	movs	r3, #1
9000a22c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a234:	2b00      	cmp	r3, #0
9000a236:	f000 80e7 	beq.w	9000a408 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a23a:	697b      	ldr	r3, [r7, #20]
9000a23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a23e:	4a19      	ldr	r2, [pc, #100]	@ (9000a2a4 <UART_SetConfig+0x930>)
9000a240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a244:	461a      	mov	r2, r3
9000a246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a248:	fbb3 f3f2 	udiv	r3, r3, r2
9000a24c:	005a      	lsls	r2, r3, #1
9000a24e:	697b      	ldr	r3, [r7, #20]
9000a250:	685b      	ldr	r3, [r3, #4]
9000a252:	085b      	lsrs	r3, r3, #1
9000a254:	441a      	add	r2, r3
9000a256:	697b      	ldr	r3, [r7, #20]
9000a258:	685b      	ldr	r3, [r3, #4]
9000a25a:	fbb2 f3f3 	udiv	r3, r2, r3
9000a25e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a262:	2b0f      	cmp	r3, #15
9000a264:	d916      	bls.n	9000a294 <UART_SetConfig+0x920>
9000a266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a26c:	d212      	bcs.n	9000a294 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a270:	b29b      	uxth	r3, r3
9000a272:	f023 030f 	bic.w	r3, r3, #15
9000a276:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a27a:	085b      	lsrs	r3, r3, #1
9000a27c:	b29b      	uxth	r3, r3
9000a27e:	f003 0307 	and.w	r3, r3, #7
9000a282:	b29a      	uxth	r2, r3
9000a284:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a286:	4313      	orrs	r3, r2
9000a288:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a28a:	697b      	ldr	r3, [r7, #20]
9000a28c:	681b      	ldr	r3, [r3, #0]
9000a28e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a290:	60da      	str	r2, [r3, #12]
9000a292:	e0b9      	b.n	9000a408 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a294:	2301      	movs	r3, #1
9000a296:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a29a:	e0b5      	b.n	9000a408 <UART_SetConfig+0xa94>
9000a29c:	03d09000 	.word	0x03d09000
9000a2a0:	003d0900 	.word	0x003d0900
9000a2a4:	9000cdc0 	.word	0x9000cdc0
9000a2a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a2ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a2b0:	2b20      	cmp	r3, #32
9000a2b2:	dc49      	bgt.n	9000a348 <UART_SetConfig+0x9d4>
9000a2b4:	2b00      	cmp	r3, #0
9000a2b6:	db7c      	blt.n	9000a3b2 <UART_SetConfig+0xa3e>
9000a2b8:	2b20      	cmp	r3, #32
9000a2ba:	d87a      	bhi.n	9000a3b2 <UART_SetConfig+0xa3e>
9000a2bc:	a201      	add	r2, pc, #4	@ (adr r2, 9000a2c4 <UART_SetConfig+0x950>)
9000a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a2c2:	bf00      	nop
9000a2c4:	9000a34f 	.word	0x9000a34f
9000a2c8:	9000a357 	.word	0x9000a357
9000a2cc:	9000a3b3 	.word	0x9000a3b3
9000a2d0:	9000a3b3 	.word	0x9000a3b3
9000a2d4:	9000a35f 	.word	0x9000a35f
9000a2d8:	9000a3b3 	.word	0x9000a3b3
9000a2dc:	9000a3b3 	.word	0x9000a3b3
9000a2e0:	9000a3b3 	.word	0x9000a3b3
9000a2e4:	9000a36f 	.word	0x9000a36f
9000a2e8:	9000a3b3 	.word	0x9000a3b3
9000a2ec:	9000a3b3 	.word	0x9000a3b3
9000a2f0:	9000a3b3 	.word	0x9000a3b3
9000a2f4:	9000a3b3 	.word	0x9000a3b3
9000a2f8:	9000a3b3 	.word	0x9000a3b3
9000a2fc:	9000a3b3 	.word	0x9000a3b3
9000a300:	9000a3b3 	.word	0x9000a3b3
9000a304:	9000a37f 	.word	0x9000a37f
9000a308:	9000a3b3 	.word	0x9000a3b3
9000a30c:	9000a3b3 	.word	0x9000a3b3
9000a310:	9000a3b3 	.word	0x9000a3b3
9000a314:	9000a3b3 	.word	0x9000a3b3
9000a318:	9000a3b3 	.word	0x9000a3b3
9000a31c:	9000a3b3 	.word	0x9000a3b3
9000a320:	9000a3b3 	.word	0x9000a3b3
9000a324:	9000a3b3 	.word	0x9000a3b3
9000a328:	9000a3b3 	.word	0x9000a3b3
9000a32c:	9000a3b3 	.word	0x9000a3b3
9000a330:	9000a3b3 	.word	0x9000a3b3
9000a334:	9000a3b3 	.word	0x9000a3b3
9000a338:	9000a3b3 	.word	0x9000a3b3
9000a33c:	9000a3b3 	.word	0x9000a3b3
9000a340:	9000a3b3 	.word	0x9000a3b3
9000a344:	9000a3a5 	.word	0x9000a3a5
9000a348:	2b40      	cmp	r3, #64	@ 0x40
9000a34a:	d02e      	beq.n	9000a3aa <UART_SetConfig+0xa36>
9000a34c:	e031      	b.n	9000a3b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a34e:	f7fd f9d1 	bl	900076f4 <HAL_RCC_GetPCLK1Freq>
9000a352:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a354:	e033      	b.n	9000a3be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a356:	f7fd f9e3 	bl	90007720 <HAL_RCC_GetPCLK2Freq>
9000a35a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a35c:	e02f      	b.n	9000a3be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a35e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a362:	4618      	mov	r0, r3
9000a364:	f7fe fc12 	bl	90008b8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a36c:	e027      	b.n	9000a3be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a36e:	f107 0318 	add.w	r3, r7, #24
9000a372:	4618      	mov	r0, r3
9000a374:	f7fe fd5e 	bl	90008e34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a378:	69fb      	ldr	r3, [r7, #28]
9000a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a37c:	e01f      	b.n	9000a3be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a37e:	4b2d      	ldr	r3, [pc, #180]	@ (9000a434 <UART_SetConfig+0xac0>)
9000a380:	681b      	ldr	r3, [r3, #0]
9000a382:	f003 0320 	and.w	r3, r3, #32
9000a386:	2b00      	cmp	r3, #0
9000a388:	d009      	beq.n	9000a39e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a38a:	4b2a      	ldr	r3, [pc, #168]	@ (9000a434 <UART_SetConfig+0xac0>)
9000a38c:	681b      	ldr	r3, [r3, #0]
9000a38e:	08db      	lsrs	r3, r3, #3
9000a390:	f003 0303 	and.w	r3, r3, #3
9000a394:	4a28      	ldr	r2, [pc, #160]	@ (9000a438 <UART_SetConfig+0xac4>)
9000a396:	fa22 f303 	lsr.w	r3, r2, r3
9000a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a39c:	e00f      	b.n	9000a3be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a39e:	4b26      	ldr	r3, [pc, #152]	@ (9000a438 <UART_SetConfig+0xac4>)
9000a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3a2:	e00c      	b.n	9000a3be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a3a4:	4b25      	ldr	r3, [pc, #148]	@ (9000a43c <UART_SetConfig+0xac8>)
9000a3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3a8:	e009      	b.n	9000a3be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a3aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3b0:	e005      	b.n	9000a3be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a3b2:	2300      	movs	r3, #0
9000a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a3b6:	2301      	movs	r3, #1
9000a3b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a3bc:	bf00      	nop
    }

    if (pclk != 0U)
9000a3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a3c0:	2b00      	cmp	r3, #0
9000a3c2:	d021      	beq.n	9000a408 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a3c4:	697b      	ldr	r3, [r7, #20]
9000a3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a3c8:	4a1d      	ldr	r2, [pc, #116]	@ (9000a440 <UART_SetConfig+0xacc>)
9000a3ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a3ce:	461a      	mov	r2, r3
9000a3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a3d2:	fbb3 f2f2 	udiv	r2, r3, r2
9000a3d6:	697b      	ldr	r3, [r7, #20]
9000a3d8:	685b      	ldr	r3, [r3, #4]
9000a3da:	085b      	lsrs	r3, r3, #1
9000a3dc:	441a      	add	r2, r3
9000a3de:	697b      	ldr	r3, [r7, #20]
9000a3e0:	685b      	ldr	r3, [r3, #4]
9000a3e2:	fbb2 f3f3 	udiv	r3, r2, r3
9000a3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a3ea:	2b0f      	cmp	r3, #15
9000a3ec:	d909      	bls.n	9000a402 <UART_SetConfig+0xa8e>
9000a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a3f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a3f4:	d205      	bcs.n	9000a402 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a3f8:	b29a      	uxth	r2, r3
9000a3fa:	697b      	ldr	r3, [r7, #20]
9000a3fc:	681b      	ldr	r3, [r3, #0]
9000a3fe:	60da      	str	r2, [r3, #12]
9000a400:	e002      	b.n	9000a408 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a402:	2301      	movs	r3, #1
9000a404:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a408:	697b      	ldr	r3, [r7, #20]
9000a40a:	2201      	movs	r2, #1
9000a40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a410:	697b      	ldr	r3, [r7, #20]
9000a412:	2201      	movs	r2, #1
9000a414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a418:	697b      	ldr	r3, [r7, #20]
9000a41a:	2200      	movs	r2, #0
9000a41c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a41e:	697b      	ldr	r3, [r7, #20]
9000a420:	2200      	movs	r2, #0
9000a422:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a424:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a428:	4618      	mov	r0, r3
9000a42a:	3748      	adds	r7, #72	@ 0x48
9000a42c:	46bd      	mov	sp, r7
9000a42e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a432:	bf00      	nop
9000a434:	58024400 	.word	0x58024400
9000a438:	03d09000 	.word	0x03d09000
9000a43c:	003d0900 	.word	0x003d0900
9000a440:	9000cdc0 	.word	0x9000cdc0

9000a444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a444:	b480      	push	{r7}
9000a446:	b083      	sub	sp, #12
9000a448:	af00      	add	r7, sp, #0
9000a44a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a44c:	687b      	ldr	r3, [r7, #4]
9000a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a450:	f003 0308 	and.w	r3, r3, #8
9000a454:	2b00      	cmp	r3, #0
9000a456:	d00a      	beq.n	9000a46e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a458:	687b      	ldr	r3, [r7, #4]
9000a45a:	681b      	ldr	r3, [r3, #0]
9000a45c:	685b      	ldr	r3, [r3, #4]
9000a45e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a462:	687b      	ldr	r3, [r7, #4]
9000a464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a466:	687b      	ldr	r3, [r7, #4]
9000a468:	681b      	ldr	r3, [r3, #0]
9000a46a:	430a      	orrs	r2, r1
9000a46c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a46e:	687b      	ldr	r3, [r7, #4]
9000a470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a472:	f003 0301 	and.w	r3, r3, #1
9000a476:	2b00      	cmp	r3, #0
9000a478:	d00a      	beq.n	9000a490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a47a:	687b      	ldr	r3, [r7, #4]
9000a47c:	681b      	ldr	r3, [r3, #0]
9000a47e:	685b      	ldr	r3, [r3, #4]
9000a480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a484:	687b      	ldr	r3, [r7, #4]
9000a486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a488:	687b      	ldr	r3, [r7, #4]
9000a48a:	681b      	ldr	r3, [r3, #0]
9000a48c:	430a      	orrs	r2, r1
9000a48e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a490:	687b      	ldr	r3, [r7, #4]
9000a492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a494:	f003 0302 	and.w	r3, r3, #2
9000a498:	2b00      	cmp	r3, #0
9000a49a:	d00a      	beq.n	9000a4b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a49c:	687b      	ldr	r3, [r7, #4]
9000a49e:	681b      	ldr	r3, [r3, #0]
9000a4a0:	685b      	ldr	r3, [r3, #4]
9000a4a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a4a6:	687b      	ldr	r3, [r7, #4]
9000a4a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a4aa:	687b      	ldr	r3, [r7, #4]
9000a4ac:	681b      	ldr	r3, [r3, #0]
9000a4ae:	430a      	orrs	r2, r1
9000a4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a4b2:	687b      	ldr	r3, [r7, #4]
9000a4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a4b6:	f003 0304 	and.w	r3, r3, #4
9000a4ba:	2b00      	cmp	r3, #0
9000a4bc:	d00a      	beq.n	9000a4d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a4be:	687b      	ldr	r3, [r7, #4]
9000a4c0:	681b      	ldr	r3, [r3, #0]
9000a4c2:	685b      	ldr	r3, [r3, #4]
9000a4c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a4c8:	687b      	ldr	r3, [r7, #4]
9000a4ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a4cc:	687b      	ldr	r3, [r7, #4]
9000a4ce:	681b      	ldr	r3, [r3, #0]
9000a4d0:	430a      	orrs	r2, r1
9000a4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a4d4:	687b      	ldr	r3, [r7, #4]
9000a4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a4d8:	f003 0310 	and.w	r3, r3, #16
9000a4dc:	2b00      	cmp	r3, #0
9000a4de:	d00a      	beq.n	9000a4f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a4e0:	687b      	ldr	r3, [r7, #4]
9000a4e2:	681b      	ldr	r3, [r3, #0]
9000a4e4:	689b      	ldr	r3, [r3, #8]
9000a4e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a4ea:	687b      	ldr	r3, [r7, #4]
9000a4ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a4ee:	687b      	ldr	r3, [r7, #4]
9000a4f0:	681b      	ldr	r3, [r3, #0]
9000a4f2:	430a      	orrs	r2, r1
9000a4f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a4f6:	687b      	ldr	r3, [r7, #4]
9000a4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a4fa:	f003 0320 	and.w	r3, r3, #32
9000a4fe:	2b00      	cmp	r3, #0
9000a500:	d00a      	beq.n	9000a518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a502:	687b      	ldr	r3, [r7, #4]
9000a504:	681b      	ldr	r3, [r3, #0]
9000a506:	689b      	ldr	r3, [r3, #8]
9000a508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a50c:	687b      	ldr	r3, [r7, #4]
9000a50e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a510:	687b      	ldr	r3, [r7, #4]
9000a512:	681b      	ldr	r3, [r3, #0]
9000a514:	430a      	orrs	r2, r1
9000a516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a518:	687b      	ldr	r3, [r7, #4]
9000a51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a520:	2b00      	cmp	r3, #0
9000a522:	d01a      	beq.n	9000a55a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a524:	687b      	ldr	r3, [r7, #4]
9000a526:	681b      	ldr	r3, [r3, #0]
9000a528:	685b      	ldr	r3, [r3, #4]
9000a52a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a52e:	687b      	ldr	r3, [r7, #4]
9000a530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a532:	687b      	ldr	r3, [r7, #4]
9000a534:	681b      	ldr	r3, [r3, #0]
9000a536:	430a      	orrs	r2, r1
9000a538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a53a:	687b      	ldr	r3, [r7, #4]
9000a53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a53e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a542:	d10a      	bne.n	9000a55a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a544:	687b      	ldr	r3, [r7, #4]
9000a546:	681b      	ldr	r3, [r3, #0]
9000a548:	685b      	ldr	r3, [r3, #4]
9000a54a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000a54e:	687b      	ldr	r3, [r7, #4]
9000a550:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000a552:	687b      	ldr	r3, [r7, #4]
9000a554:	681b      	ldr	r3, [r3, #0]
9000a556:	430a      	orrs	r2, r1
9000a558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000a55a:	687b      	ldr	r3, [r7, #4]
9000a55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a55e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000a562:	2b00      	cmp	r3, #0
9000a564:	d00a      	beq.n	9000a57c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000a566:	687b      	ldr	r3, [r7, #4]
9000a568:	681b      	ldr	r3, [r3, #0]
9000a56a:	685b      	ldr	r3, [r3, #4]
9000a56c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000a570:	687b      	ldr	r3, [r7, #4]
9000a572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000a574:	687b      	ldr	r3, [r7, #4]
9000a576:	681b      	ldr	r3, [r3, #0]
9000a578:	430a      	orrs	r2, r1
9000a57a:	605a      	str	r2, [r3, #4]
  }
}
9000a57c:	bf00      	nop
9000a57e:	370c      	adds	r7, #12
9000a580:	46bd      	mov	sp, r7
9000a582:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a586:	4770      	bx	lr

9000a588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000a588:	b580      	push	{r7, lr}
9000a58a:	b098      	sub	sp, #96	@ 0x60
9000a58c:	af02      	add	r7, sp, #8
9000a58e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a590:	687b      	ldr	r3, [r7, #4]
9000a592:	2200      	movs	r2, #0
9000a594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000a598:	f7f8 fc4a 	bl	90002e30 <HAL_GetTick>
9000a59c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000a59e:	687b      	ldr	r3, [r7, #4]
9000a5a0:	681b      	ldr	r3, [r3, #0]
9000a5a2:	681b      	ldr	r3, [r3, #0]
9000a5a4:	f003 0308 	and.w	r3, r3, #8
9000a5a8:	2b08      	cmp	r3, #8
9000a5aa:	d12f      	bne.n	9000a60c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a5ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a5b0:	9300      	str	r3, [sp, #0]
9000a5b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a5b4:	2200      	movs	r2, #0
9000a5b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000a5ba:	6878      	ldr	r0, [r7, #4]
9000a5bc:	f000 f88e 	bl	9000a6dc <UART_WaitOnFlagUntilTimeout>
9000a5c0:	4603      	mov	r3, r0
9000a5c2:	2b00      	cmp	r3, #0
9000a5c4:	d022      	beq.n	9000a60c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000a5c6:	687b      	ldr	r3, [r7, #4]
9000a5c8:	681b      	ldr	r3, [r3, #0]
9000a5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a5ce:	e853 3f00 	ldrex	r3, [r3]
9000a5d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000a5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000a5d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a5da:	653b      	str	r3, [r7, #80]	@ 0x50
9000a5dc:	687b      	ldr	r3, [r7, #4]
9000a5de:	681b      	ldr	r3, [r3, #0]
9000a5e0:	461a      	mov	r2, r3
9000a5e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000a5e4:	647b      	str	r3, [r7, #68]	@ 0x44
9000a5e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a5e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000a5ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000a5ec:	e841 2300 	strex	r3, r2, [r1]
9000a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000a5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a5f4:	2b00      	cmp	r3, #0
9000a5f6:	d1e6      	bne.n	9000a5c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000a5f8:	687b      	ldr	r3, [r7, #4]
9000a5fa:	2220      	movs	r2, #32
9000a5fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000a600:	687b      	ldr	r3, [r7, #4]
9000a602:	2200      	movs	r2, #0
9000a604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000a608:	2303      	movs	r3, #3
9000a60a:	e063      	b.n	9000a6d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000a60c:	687b      	ldr	r3, [r7, #4]
9000a60e:	681b      	ldr	r3, [r3, #0]
9000a610:	681b      	ldr	r3, [r3, #0]
9000a612:	f003 0304 	and.w	r3, r3, #4
9000a616:	2b04      	cmp	r3, #4
9000a618:	d149      	bne.n	9000a6ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a61a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a61e:	9300      	str	r3, [sp, #0]
9000a620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a622:	2200      	movs	r2, #0
9000a624:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000a628:	6878      	ldr	r0, [r7, #4]
9000a62a:	f000 f857 	bl	9000a6dc <UART_WaitOnFlagUntilTimeout>
9000a62e:	4603      	mov	r3, r0
9000a630:	2b00      	cmp	r3, #0
9000a632:	d03c      	beq.n	9000a6ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000a634:	687b      	ldr	r3, [r7, #4]
9000a636:	681b      	ldr	r3, [r3, #0]
9000a638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a63c:	e853 3f00 	ldrex	r3, [r3]
9000a640:	623b      	str	r3, [r7, #32]
   return(result);
9000a642:	6a3b      	ldr	r3, [r7, #32]
9000a644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000a648:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000a64a:	687b      	ldr	r3, [r7, #4]
9000a64c:	681b      	ldr	r3, [r3, #0]
9000a64e:	461a      	mov	r2, r3
9000a650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000a652:	633b      	str	r3, [r7, #48]	@ 0x30
9000a654:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000a658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a65a:	e841 2300 	strex	r3, r2, [r1]
9000a65e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000a660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a662:	2b00      	cmp	r3, #0
9000a664:	d1e6      	bne.n	9000a634 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000a666:	687b      	ldr	r3, [r7, #4]
9000a668:	681b      	ldr	r3, [r3, #0]
9000a66a:	3308      	adds	r3, #8
9000a66c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a66e:	693b      	ldr	r3, [r7, #16]
9000a670:	e853 3f00 	ldrex	r3, [r3]
9000a674:	60fb      	str	r3, [r7, #12]
   return(result);
9000a676:	68fb      	ldr	r3, [r7, #12]
9000a678:	f023 0301 	bic.w	r3, r3, #1
9000a67c:	64bb      	str	r3, [r7, #72]	@ 0x48
9000a67e:	687b      	ldr	r3, [r7, #4]
9000a680:	681b      	ldr	r3, [r3, #0]
9000a682:	3308      	adds	r3, #8
9000a684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000a686:	61fa      	str	r2, [r7, #28]
9000a688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a68a:	69b9      	ldr	r1, [r7, #24]
9000a68c:	69fa      	ldr	r2, [r7, #28]
9000a68e:	e841 2300 	strex	r3, r2, [r1]
9000a692:	617b      	str	r3, [r7, #20]
   return(result);
9000a694:	697b      	ldr	r3, [r7, #20]
9000a696:	2b00      	cmp	r3, #0
9000a698:	d1e5      	bne.n	9000a666 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000a69a:	687b      	ldr	r3, [r7, #4]
9000a69c:	2220      	movs	r2, #32
9000a69e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000a6a2:	687b      	ldr	r3, [r7, #4]
9000a6a4:	2200      	movs	r2, #0
9000a6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000a6aa:	2303      	movs	r3, #3
9000a6ac:	e012      	b.n	9000a6d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000a6ae:	687b      	ldr	r3, [r7, #4]
9000a6b0:	2220      	movs	r2, #32
9000a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000a6b6:	687b      	ldr	r3, [r7, #4]
9000a6b8:	2220      	movs	r2, #32
9000a6ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000a6be:	687b      	ldr	r3, [r7, #4]
9000a6c0:	2200      	movs	r2, #0
9000a6c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000a6c4:	687b      	ldr	r3, [r7, #4]
9000a6c6:	2200      	movs	r2, #0
9000a6c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000a6ca:	687b      	ldr	r3, [r7, #4]
9000a6cc:	2200      	movs	r2, #0
9000a6ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000a6d2:	2300      	movs	r3, #0
}
9000a6d4:	4618      	mov	r0, r3
9000a6d6:	3758      	adds	r7, #88	@ 0x58
9000a6d8:	46bd      	mov	sp, r7
9000a6da:	bd80      	pop	{r7, pc}

9000a6dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000a6dc:	b580      	push	{r7, lr}
9000a6de:	b084      	sub	sp, #16
9000a6e0:	af00      	add	r7, sp, #0
9000a6e2:	60f8      	str	r0, [r7, #12]
9000a6e4:	60b9      	str	r1, [r7, #8]
9000a6e6:	603b      	str	r3, [r7, #0]
9000a6e8:	4613      	mov	r3, r2
9000a6ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000a6ec:	e04f      	b.n	9000a78e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000a6ee:	69bb      	ldr	r3, [r7, #24]
9000a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a6f4:	d04b      	beq.n	9000a78e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a6f6:	f7f8 fb9b 	bl	90002e30 <HAL_GetTick>
9000a6fa:	4602      	mov	r2, r0
9000a6fc:	683b      	ldr	r3, [r7, #0]
9000a6fe:	1ad3      	subs	r3, r2, r3
9000a700:	69ba      	ldr	r2, [r7, #24]
9000a702:	429a      	cmp	r2, r3
9000a704:	d302      	bcc.n	9000a70c <UART_WaitOnFlagUntilTimeout+0x30>
9000a706:	69bb      	ldr	r3, [r7, #24]
9000a708:	2b00      	cmp	r3, #0
9000a70a:	d101      	bne.n	9000a710 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000a70c:	2303      	movs	r3, #3
9000a70e:	e04e      	b.n	9000a7ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000a710:	68fb      	ldr	r3, [r7, #12]
9000a712:	681b      	ldr	r3, [r3, #0]
9000a714:	681b      	ldr	r3, [r3, #0]
9000a716:	f003 0304 	and.w	r3, r3, #4
9000a71a:	2b00      	cmp	r3, #0
9000a71c:	d037      	beq.n	9000a78e <UART_WaitOnFlagUntilTimeout+0xb2>
9000a71e:	68bb      	ldr	r3, [r7, #8]
9000a720:	2b80      	cmp	r3, #128	@ 0x80
9000a722:	d034      	beq.n	9000a78e <UART_WaitOnFlagUntilTimeout+0xb2>
9000a724:	68bb      	ldr	r3, [r7, #8]
9000a726:	2b40      	cmp	r3, #64	@ 0x40
9000a728:	d031      	beq.n	9000a78e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000a72a:	68fb      	ldr	r3, [r7, #12]
9000a72c:	681b      	ldr	r3, [r3, #0]
9000a72e:	69db      	ldr	r3, [r3, #28]
9000a730:	f003 0308 	and.w	r3, r3, #8
9000a734:	2b08      	cmp	r3, #8
9000a736:	d110      	bne.n	9000a75a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000a738:	68fb      	ldr	r3, [r7, #12]
9000a73a:	681b      	ldr	r3, [r3, #0]
9000a73c:	2208      	movs	r2, #8
9000a73e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000a740:	68f8      	ldr	r0, [r7, #12]
9000a742:	f000 f839 	bl	9000a7b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000a746:	68fb      	ldr	r3, [r7, #12]
9000a748:	2208      	movs	r2, #8
9000a74a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000a74e:	68fb      	ldr	r3, [r7, #12]
9000a750:	2200      	movs	r2, #0
9000a752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000a756:	2301      	movs	r3, #1
9000a758:	e029      	b.n	9000a7ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000a75a:	68fb      	ldr	r3, [r7, #12]
9000a75c:	681b      	ldr	r3, [r3, #0]
9000a75e:	69db      	ldr	r3, [r3, #28]
9000a760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000a764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000a768:	d111      	bne.n	9000a78e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000a76a:	68fb      	ldr	r3, [r7, #12]
9000a76c:	681b      	ldr	r3, [r3, #0]
9000a76e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000a772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000a774:	68f8      	ldr	r0, [r7, #12]
9000a776:	f000 f81f 	bl	9000a7b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000a77a:	68fb      	ldr	r3, [r7, #12]
9000a77c:	2220      	movs	r2, #32
9000a77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000a782:	68fb      	ldr	r3, [r7, #12]
9000a784:	2200      	movs	r2, #0
9000a786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000a78a:	2303      	movs	r3, #3
9000a78c:	e00f      	b.n	9000a7ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000a78e:	68fb      	ldr	r3, [r7, #12]
9000a790:	681b      	ldr	r3, [r3, #0]
9000a792:	69da      	ldr	r2, [r3, #28]
9000a794:	68bb      	ldr	r3, [r7, #8]
9000a796:	4013      	ands	r3, r2
9000a798:	68ba      	ldr	r2, [r7, #8]
9000a79a:	429a      	cmp	r2, r3
9000a79c:	bf0c      	ite	eq
9000a79e:	2301      	moveq	r3, #1
9000a7a0:	2300      	movne	r3, #0
9000a7a2:	b2db      	uxtb	r3, r3
9000a7a4:	461a      	mov	r2, r3
9000a7a6:	79fb      	ldrb	r3, [r7, #7]
9000a7a8:	429a      	cmp	r2, r3
9000a7aa:	d0a0      	beq.n	9000a6ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000a7ac:	2300      	movs	r3, #0
}
9000a7ae:	4618      	mov	r0, r3
9000a7b0:	3710      	adds	r7, #16
9000a7b2:	46bd      	mov	sp, r7
9000a7b4:	bd80      	pop	{r7, pc}
	...

9000a7b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000a7b8:	b480      	push	{r7}
9000a7ba:	b095      	sub	sp, #84	@ 0x54
9000a7bc:	af00      	add	r7, sp, #0
9000a7be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000a7c0:	687b      	ldr	r3, [r7, #4]
9000a7c2:	681b      	ldr	r3, [r3, #0]
9000a7c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000a7c8:	e853 3f00 	ldrex	r3, [r3]
9000a7cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000a7d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000a7d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000a7d6:	687b      	ldr	r3, [r7, #4]
9000a7d8:	681b      	ldr	r3, [r3, #0]
9000a7da:	461a      	mov	r2, r3
9000a7dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000a7de:	643b      	str	r3, [r7, #64]	@ 0x40
9000a7e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a7e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000a7e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000a7e6:	e841 2300 	strex	r3, r2, [r1]
9000a7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7ee:	2b00      	cmp	r3, #0
9000a7f0:	d1e6      	bne.n	9000a7c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000a7f2:	687b      	ldr	r3, [r7, #4]
9000a7f4:	681b      	ldr	r3, [r3, #0]
9000a7f6:	3308      	adds	r3, #8
9000a7f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a7fa:	6a3b      	ldr	r3, [r7, #32]
9000a7fc:	e853 3f00 	ldrex	r3, [r3]
9000a800:	61fb      	str	r3, [r7, #28]
   return(result);
9000a802:	69fa      	ldr	r2, [r7, #28]
9000a804:	4b1e      	ldr	r3, [pc, #120]	@ (9000a880 <UART_EndRxTransfer+0xc8>)
9000a806:	4013      	ands	r3, r2
9000a808:	64bb      	str	r3, [r7, #72]	@ 0x48
9000a80a:	687b      	ldr	r3, [r7, #4]
9000a80c:	681b      	ldr	r3, [r3, #0]
9000a80e:	3308      	adds	r3, #8
9000a810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000a812:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000a814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000a818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000a81a:	e841 2300 	strex	r3, r2, [r1]
9000a81e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000a820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a822:	2b00      	cmp	r3, #0
9000a824:	d1e5      	bne.n	9000a7f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000a826:	687b      	ldr	r3, [r7, #4]
9000a828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000a82a:	2b01      	cmp	r3, #1
9000a82c:	d118      	bne.n	9000a860 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000a82e:	687b      	ldr	r3, [r7, #4]
9000a830:	681b      	ldr	r3, [r3, #0]
9000a832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a834:	68fb      	ldr	r3, [r7, #12]
9000a836:	e853 3f00 	ldrex	r3, [r3]
9000a83a:	60bb      	str	r3, [r7, #8]
   return(result);
9000a83c:	68bb      	ldr	r3, [r7, #8]
9000a83e:	f023 0310 	bic.w	r3, r3, #16
9000a842:	647b      	str	r3, [r7, #68]	@ 0x44
9000a844:	687b      	ldr	r3, [r7, #4]
9000a846:	681b      	ldr	r3, [r3, #0]
9000a848:	461a      	mov	r2, r3
9000a84a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000a84c:	61bb      	str	r3, [r7, #24]
9000a84e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a850:	6979      	ldr	r1, [r7, #20]
9000a852:	69ba      	ldr	r2, [r7, #24]
9000a854:	e841 2300 	strex	r3, r2, [r1]
9000a858:	613b      	str	r3, [r7, #16]
   return(result);
9000a85a:	693b      	ldr	r3, [r7, #16]
9000a85c:	2b00      	cmp	r3, #0
9000a85e:	d1e6      	bne.n	9000a82e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000a860:	687b      	ldr	r3, [r7, #4]
9000a862:	2220      	movs	r2, #32
9000a864:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000a868:	687b      	ldr	r3, [r7, #4]
9000a86a:	2200      	movs	r2, #0
9000a86c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000a86e:	687b      	ldr	r3, [r7, #4]
9000a870:	2200      	movs	r2, #0
9000a872:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000a874:	bf00      	nop
9000a876:	3754      	adds	r7, #84	@ 0x54
9000a878:	46bd      	mov	sp, r7
9000a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a87e:	4770      	bx	lr
9000a880:	effffffe 	.word	0xeffffffe

9000a884 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000a884:	b480      	push	{r7}
9000a886:	b085      	sub	sp, #20
9000a888:	af00      	add	r7, sp, #0
9000a88a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000a88c:	687b      	ldr	r3, [r7, #4]
9000a88e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000a892:	2b01      	cmp	r3, #1
9000a894:	d101      	bne.n	9000a89a <HAL_UARTEx_DisableFifoMode+0x16>
9000a896:	2302      	movs	r3, #2
9000a898:	e027      	b.n	9000a8ea <HAL_UARTEx_DisableFifoMode+0x66>
9000a89a:	687b      	ldr	r3, [r7, #4]
9000a89c:	2201      	movs	r2, #1
9000a89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000a8a2:	687b      	ldr	r3, [r7, #4]
9000a8a4:	2224      	movs	r2, #36	@ 0x24
9000a8a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000a8aa:	687b      	ldr	r3, [r7, #4]
9000a8ac:	681b      	ldr	r3, [r3, #0]
9000a8ae:	681b      	ldr	r3, [r3, #0]
9000a8b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000a8b2:	687b      	ldr	r3, [r7, #4]
9000a8b4:	681b      	ldr	r3, [r3, #0]
9000a8b6:	681a      	ldr	r2, [r3, #0]
9000a8b8:	687b      	ldr	r3, [r7, #4]
9000a8ba:	681b      	ldr	r3, [r3, #0]
9000a8bc:	f022 0201 	bic.w	r2, r2, #1
9000a8c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000a8c2:	68fb      	ldr	r3, [r7, #12]
9000a8c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000a8c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000a8ca:	687b      	ldr	r3, [r7, #4]
9000a8cc:	2200      	movs	r2, #0
9000a8ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000a8d0:	687b      	ldr	r3, [r7, #4]
9000a8d2:	681b      	ldr	r3, [r3, #0]
9000a8d4:	68fa      	ldr	r2, [r7, #12]
9000a8d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000a8d8:	687b      	ldr	r3, [r7, #4]
9000a8da:	2220      	movs	r2, #32
9000a8dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000a8e0:	687b      	ldr	r3, [r7, #4]
9000a8e2:	2200      	movs	r2, #0
9000a8e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000a8e8:	2300      	movs	r3, #0
}
9000a8ea:	4618      	mov	r0, r3
9000a8ec:	3714      	adds	r7, #20
9000a8ee:	46bd      	mov	sp, r7
9000a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a8f4:	4770      	bx	lr

9000a8f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000a8f6:	b580      	push	{r7, lr}
9000a8f8:	b084      	sub	sp, #16
9000a8fa:	af00      	add	r7, sp, #0
9000a8fc:	6078      	str	r0, [r7, #4]
9000a8fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000a900:	687b      	ldr	r3, [r7, #4]
9000a902:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000a906:	2b01      	cmp	r3, #1
9000a908:	d101      	bne.n	9000a90e <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000a90a:	2302      	movs	r3, #2
9000a90c:	e02d      	b.n	9000a96a <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000a90e:	687b      	ldr	r3, [r7, #4]
9000a910:	2201      	movs	r2, #1
9000a912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000a916:	687b      	ldr	r3, [r7, #4]
9000a918:	2224      	movs	r2, #36	@ 0x24
9000a91a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000a91e:	687b      	ldr	r3, [r7, #4]
9000a920:	681b      	ldr	r3, [r3, #0]
9000a922:	681b      	ldr	r3, [r3, #0]
9000a924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000a926:	687b      	ldr	r3, [r7, #4]
9000a928:	681b      	ldr	r3, [r3, #0]
9000a92a:	681a      	ldr	r2, [r3, #0]
9000a92c:	687b      	ldr	r3, [r7, #4]
9000a92e:	681b      	ldr	r3, [r3, #0]
9000a930:	f022 0201 	bic.w	r2, r2, #1
9000a934:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000a936:	687b      	ldr	r3, [r7, #4]
9000a938:	681b      	ldr	r3, [r3, #0]
9000a93a:	689b      	ldr	r3, [r3, #8]
9000a93c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000a940:	687b      	ldr	r3, [r7, #4]
9000a942:	681b      	ldr	r3, [r3, #0]
9000a944:	683a      	ldr	r2, [r7, #0]
9000a946:	430a      	orrs	r2, r1
9000a948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000a94a:	6878      	ldr	r0, [r7, #4]
9000a94c:	f000 f850 	bl	9000a9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000a950:	687b      	ldr	r3, [r7, #4]
9000a952:	681b      	ldr	r3, [r3, #0]
9000a954:	68fa      	ldr	r2, [r7, #12]
9000a956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000a958:	687b      	ldr	r3, [r7, #4]
9000a95a:	2220      	movs	r2, #32
9000a95c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000a960:	687b      	ldr	r3, [r7, #4]
9000a962:	2200      	movs	r2, #0
9000a964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000a968:	2300      	movs	r3, #0
}
9000a96a:	4618      	mov	r0, r3
9000a96c:	3710      	adds	r7, #16
9000a96e:	46bd      	mov	sp, r7
9000a970:	bd80      	pop	{r7, pc}

9000a972 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000a972:	b580      	push	{r7, lr}
9000a974:	b084      	sub	sp, #16
9000a976:	af00      	add	r7, sp, #0
9000a978:	6078      	str	r0, [r7, #4]
9000a97a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000a97c:	687b      	ldr	r3, [r7, #4]
9000a97e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000a982:	2b01      	cmp	r3, #1
9000a984:	d101      	bne.n	9000a98a <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000a986:	2302      	movs	r3, #2
9000a988:	e02d      	b.n	9000a9e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000a98a:	687b      	ldr	r3, [r7, #4]
9000a98c:	2201      	movs	r2, #1
9000a98e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000a992:	687b      	ldr	r3, [r7, #4]
9000a994:	2224      	movs	r2, #36	@ 0x24
9000a996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000a99a:	687b      	ldr	r3, [r7, #4]
9000a99c:	681b      	ldr	r3, [r3, #0]
9000a99e:	681b      	ldr	r3, [r3, #0]
9000a9a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000a9a2:	687b      	ldr	r3, [r7, #4]
9000a9a4:	681b      	ldr	r3, [r3, #0]
9000a9a6:	681a      	ldr	r2, [r3, #0]
9000a9a8:	687b      	ldr	r3, [r7, #4]
9000a9aa:	681b      	ldr	r3, [r3, #0]
9000a9ac:	f022 0201 	bic.w	r2, r2, #1
9000a9b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000a9b2:	687b      	ldr	r3, [r7, #4]
9000a9b4:	681b      	ldr	r3, [r3, #0]
9000a9b6:	689b      	ldr	r3, [r3, #8]
9000a9b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000a9bc:	687b      	ldr	r3, [r7, #4]
9000a9be:	681b      	ldr	r3, [r3, #0]
9000a9c0:	683a      	ldr	r2, [r7, #0]
9000a9c2:	430a      	orrs	r2, r1
9000a9c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000a9c6:	6878      	ldr	r0, [r7, #4]
9000a9c8:	f000 f812 	bl	9000a9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000a9cc:	687b      	ldr	r3, [r7, #4]
9000a9ce:	681b      	ldr	r3, [r3, #0]
9000a9d0:	68fa      	ldr	r2, [r7, #12]
9000a9d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000a9d4:	687b      	ldr	r3, [r7, #4]
9000a9d6:	2220      	movs	r2, #32
9000a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000a9dc:	687b      	ldr	r3, [r7, #4]
9000a9de:	2200      	movs	r2, #0
9000a9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000a9e4:	2300      	movs	r3, #0
}
9000a9e6:	4618      	mov	r0, r3
9000a9e8:	3710      	adds	r7, #16
9000a9ea:	46bd      	mov	sp, r7
9000a9ec:	bd80      	pop	{r7, pc}
	...

9000a9f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000a9f0:	b480      	push	{r7}
9000a9f2:	b085      	sub	sp, #20
9000a9f4:	af00      	add	r7, sp, #0
9000a9f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000a9f8:	687b      	ldr	r3, [r7, #4]
9000a9fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000a9fc:	2b00      	cmp	r3, #0
9000a9fe:	d108      	bne.n	9000aa12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000aa00:	687b      	ldr	r3, [r7, #4]
9000aa02:	2201      	movs	r2, #1
9000aa04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000aa08:	687b      	ldr	r3, [r7, #4]
9000aa0a:	2201      	movs	r2, #1
9000aa0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000aa10:	e031      	b.n	9000aa76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000aa12:	2310      	movs	r3, #16
9000aa14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000aa16:	2310      	movs	r3, #16
9000aa18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000aa1a:	687b      	ldr	r3, [r7, #4]
9000aa1c:	681b      	ldr	r3, [r3, #0]
9000aa1e:	689b      	ldr	r3, [r3, #8]
9000aa20:	0e5b      	lsrs	r3, r3, #25
9000aa22:	b2db      	uxtb	r3, r3
9000aa24:	f003 0307 	and.w	r3, r3, #7
9000aa28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000aa2a:	687b      	ldr	r3, [r7, #4]
9000aa2c:	681b      	ldr	r3, [r3, #0]
9000aa2e:	689b      	ldr	r3, [r3, #8]
9000aa30:	0f5b      	lsrs	r3, r3, #29
9000aa32:	b2db      	uxtb	r3, r3
9000aa34:	f003 0307 	and.w	r3, r3, #7
9000aa38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000aa3a:	7bbb      	ldrb	r3, [r7, #14]
9000aa3c:	7b3a      	ldrb	r2, [r7, #12]
9000aa3e:	4911      	ldr	r1, [pc, #68]	@ (9000aa84 <UARTEx_SetNbDataToProcess+0x94>)
9000aa40:	5c8a      	ldrb	r2, [r1, r2]
9000aa42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000aa46:	7b3a      	ldrb	r2, [r7, #12]
9000aa48:	490f      	ldr	r1, [pc, #60]	@ (9000aa88 <UARTEx_SetNbDataToProcess+0x98>)
9000aa4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000aa4c:	fb93 f3f2 	sdiv	r3, r3, r2
9000aa50:	b29a      	uxth	r2, r3
9000aa52:	687b      	ldr	r3, [r7, #4]
9000aa54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000aa58:	7bfb      	ldrb	r3, [r7, #15]
9000aa5a:	7b7a      	ldrb	r2, [r7, #13]
9000aa5c:	4909      	ldr	r1, [pc, #36]	@ (9000aa84 <UARTEx_SetNbDataToProcess+0x94>)
9000aa5e:	5c8a      	ldrb	r2, [r1, r2]
9000aa60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000aa64:	7b7a      	ldrb	r2, [r7, #13]
9000aa66:	4908      	ldr	r1, [pc, #32]	@ (9000aa88 <UARTEx_SetNbDataToProcess+0x98>)
9000aa68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000aa6a:	fb93 f3f2 	sdiv	r3, r3, r2
9000aa6e:	b29a      	uxth	r2, r3
9000aa70:	687b      	ldr	r3, [r7, #4]
9000aa72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000aa76:	bf00      	nop
9000aa78:	3714      	adds	r7, #20
9000aa7a:	46bd      	mov	sp, r7
9000aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aa80:	4770      	bx	lr
9000aa82:	bf00      	nop
9000aa84:	9000cdd8 	.word	0x9000cdd8
9000aa88:	9000cde0 	.word	0x9000cde0

9000aa8c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000aa8c:	b480      	push	{r7}
9000aa8e:	b083      	sub	sp, #12
9000aa90:	af00      	add	r7, sp, #0
9000aa92:	6078      	str	r0, [r7, #4]
9000aa94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000aa96:	683b      	ldr	r3, [r7, #0]
9000aa98:	681b      	ldr	r3, [r3, #0]
9000aa9a:	2b00      	cmp	r3, #0
9000aa9c:	d121      	bne.n	9000aae2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000aa9e:	687b      	ldr	r3, [r7, #4]
9000aaa0:	681a      	ldr	r2, [r3, #0]
9000aaa2:	4b27      	ldr	r3, [pc, #156]	@ (9000ab40 <FMC_SDRAM_Init+0xb4>)
9000aaa4:	4013      	ands	r3, r2
9000aaa6:	683a      	ldr	r2, [r7, #0]
9000aaa8:	6851      	ldr	r1, [r2, #4]
9000aaaa:	683a      	ldr	r2, [r7, #0]
9000aaac:	6892      	ldr	r2, [r2, #8]
9000aaae:	4311      	orrs	r1, r2
9000aab0:	683a      	ldr	r2, [r7, #0]
9000aab2:	68d2      	ldr	r2, [r2, #12]
9000aab4:	4311      	orrs	r1, r2
9000aab6:	683a      	ldr	r2, [r7, #0]
9000aab8:	6912      	ldr	r2, [r2, #16]
9000aaba:	4311      	orrs	r1, r2
9000aabc:	683a      	ldr	r2, [r7, #0]
9000aabe:	6952      	ldr	r2, [r2, #20]
9000aac0:	4311      	orrs	r1, r2
9000aac2:	683a      	ldr	r2, [r7, #0]
9000aac4:	6992      	ldr	r2, [r2, #24]
9000aac6:	4311      	orrs	r1, r2
9000aac8:	683a      	ldr	r2, [r7, #0]
9000aaca:	69d2      	ldr	r2, [r2, #28]
9000aacc:	4311      	orrs	r1, r2
9000aace:	683a      	ldr	r2, [r7, #0]
9000aad0:	6a12      	ldr	r2, [r2, #32]
9000aad2:	4311      	orrs	r1, r2
9000aad4:	683a      	ldr	r2, [r7, #0]
9000aad6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000aad8:	430a      	orrs	r2, r1
9000aada:	431a      	orrs	r2, r3
9000aadc:	687b      	ldr	r3, [r7, #4]
9000aade:	601a      	str	r2, [r3, #0]
9000aae0:	e026      	b.n	9000ab30 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000aae2:	687b      	ldr	r3, [r7, #4]
9000aae4:	681b      	ldr	r3, [r3, #0]
9000aae6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000aaea:	683b      	ldr	r3, [r7, #0]
9000aaec:	69d9      	ldr	r1, [r3, #28]
9000aaee:	683b      	ldr	r3, [r7, #0]
9000aaf0:	6a1b      	ldr	r3, [r3, #32]
9000aaf2:	4319      	orrs	r1, r3
9000aaf4:	683b      	ldr	r3, [r7, #0]
9000aaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000aaf8:	430b      	orrs	r3, r1
9000aafa:	431a      	orrs	r2, r3
9000aafc:	687b      	ldr	r3, [r7, #4]
9000aafe:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000ab00:	687b      	ldr	r3, [r7, #4]
9000ab02:	685a      	ldr	r2, [r3, #4]
9000ab04:	4b0e      	ldr	r3, [pc, #56]	@ (9000ab40 <FMC_SDRAM_Init+0xb4>)
9000ab06:	4013      	ands	r3, r2
9000ab08:	683a      	ldr	r2, [r7, #0]
9000ab0a:	6851      	ldr	r1, [r2, #4]
9000ab0c:	683a      	ldr	r2, [r7, #0]
9000ab0e:	6892      	ldr	r2, [r2, #8]
9000ab10:	4311      	orrs	r1, r2
9000ab12:	683a      	ldr	r2, [r7, #0]
9000ab14:	68d2      	ldr	r2, [r2, #12]
9000ab16:	4311      	orrs	r1, r2
9000ab18:	683a      	ldr	r2, [r7, #0]
9000ab1a:	6912      	ldr	r2, [r2, #16]
9000ab1c:	4311      	orrs	r1, r2
9000ab1e:	683a      	ldr	r2, [r7, #0]
9000ab20:	6952      	ldr	r2, [r2, #20]
9000ab22:	4311      	orrs	r1, r2
9000ab24:	683a      	ldr	r2, [r7, #0]
9000ab26:	6992      	ldr	r2, [r2, #24]
9000ab28:	430a      	orrs	r2, r1
9000ab2a:	431a      	orrs	r2, r3
9000ab2c:	687b      	ldr	r3, [r7, #4]
9000ab2e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000ab30:	2300      	movs	r3, #0
}
9000ab32:	4618      	mov	r0, r3
9000ab34:	370c      	adds	r7, #12
9000ab36:	46bd      	mov	sp, r7
9000ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ab3c:	4770      	bx	lr
9000ab3e:	bf00      	nop
9000ab40:	ffff8000 	.word	0xffff8000

9000ab44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000ab44:	b480      	push	{r7}
9000ab46:	b085      	sub	sp, #20
9000ab48:	af00      	add	r7, sp, #0
9000ab4a:	60f8      	str	r0, [r7, #12]
9000ab4c:	60b9      	str	r1, [r7, #8]
9000ab4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000ab50:	687b      	ldr	r3, [r7, #4]
9000ab52:	2b00      	cmp	r3, #0
9000ab54:	d128      	bne.n	9000aba8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ab56:	68fb      	ldr	r3, [r7, #12]
9000ab58:	689b      	ldr	r3, [r3, #8]
9000ab5a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000ab5e:	68bb      	ldr	r3, [r7, #8]
9000ab60:	681b      	ldr	r3, [r3, #0]
9000ab62:	1e59      	subs	r1, r3, #1
9000ab64:	68bb      	ldr	r3, [r7, #8]
9000ab66:	685b      	ldr	r3, [r3, #4]
9000ab68:	3b01      	subs	r3, #1
9000ab6a:	011b      	lsls	r3, r3, #4
9000ab6c:	4319      	orrs	r1, r3
9000ab6e:	68bb      	ldr	r3, [r7, #8]
9000ab70:	689b      	ldr	r3, [r3, #8]
9000ab72:	3b01      	subs	r3, #1
9000ab74:	021b      	lsls	r3, r3, #8
9000ab76:	4319      	orrs	r1, r3
9000ab78:	68bb      	ldr	r3, [r7, #8]
9000ab7a:	68db      	ldr	r3, [r3, #12]
9000ab7c:	3b01      	subs	r3, #1
9000ab7e:	031b      	lsls	r3, r3, #12
9000ab80:	4319      	orrs	r1, r3
9000ab82:	68bb      	ldr	r3, [r7, #8]
9000ab84:	691b      	ldr	r3, [r3, #16]
9000ab86:	3b01      	subs	r3, #1
9000ab88:	041b      	lsls	r3, r3, #16
9000ab8a:	4319      	orrs	r1, r3
9000ab8c:	68bb      	ldr	r3, [r7, #8]
9000ab8e:	695b      	ldr	r3, [r3, #20]
9000ab90:	3b01      	subs	r3, #1
9000ab92:	051b      	lsls	r3, r3, #20
9000ab94:	4319      	orrs	r1, r3
9000ab96:	68bb      	ldr	r3, [r7, #8]
9000ab98:	699b      	ldr	r3, [r3, #24]
9000ab9a:	3b01      	subs	r3, #1
9000ab9c:	061b      	lsls	r3, r3, #24
9000ab9e:	430b      	orrs	r3, r1
9000aba0:	431a      	orrs	r2, r3
9000aba2:	68fb      	ldr	r3, [r7, #12]
9000aba4:	609a      	str	r2, [r3, #8]
9000aba6:	e02d      	b.n	9000ac04 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000aba8:	68fb      	ldr	r3, [r7, #12]
9000abaa:	689a      	ldr	r2, [r3, #8]
9000abac:	4b19      	ldr	r3, [pc, #100]	@ (9000ac14 <FMC_SDRAM_Timing_Init+0xd0>)
9000abae:	4013      	ands	r3, r2
9000abb0:	68ba      	ldr	r2, [r7, #8]
9000abb2:	68d2      	ldr	r2, [r2, #12]
9000abb4:	3a01      	subs	r2, #1
9000abb6:	0311      	lsls	r1, r2, #12
9000abb8:	68ba      	ldr	r2, [r7, #8]
9000abba:	6952      	ldr	r2, [r2, #20]
9000abbc:	3a01      	subs	r2, #1
9000abbe:	0512      	lsls	r2, r2, #20
9000abc0:	430a      	orrs	r2, r1
9000abc2:	431a      	orrs	r2, r3
9000abc4:	68fb      	ldr	r3, [r7, #12]
9000abc6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000abc8:	68fb      	ldr	r3, [r7, #12]
9000abca:	68db      	ldr	r3, [r3, #12]
9000abcc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000abd0:	68bb      	ldr	r3, [r7, #8]
9000abd2:	681b      	ldr	r3, [r3, #0]
9000abd4:	1e59      	subs	r1, r3, #1
9000abd6:	68bb      	ldr	r3, [r7, #8]
9000abd8:	685b      	ldr	r3, [r3, #4]
9000abda:	3b01      	subs	r3, #1
9000abdc:	011b      	lsls	r3, r3, #4
9000abde:	4319      	orrs	r1, r3
9000abe0:	68bb      	ldr	r3, [r7, #8]
9000abe2:	689b      	ldr	r3, [r3, #8]
9000abe4:	3b01      	subs	r3, #1
9000abe6:	021b      	lsls	r3, r3, #8
9000abe8:	4319      	orrs	r1, r3
9000abea:	68bb      	ldr	r3, [r7, #8]
9000abec:	691b      	ldr	r3, [r3, #16]
9000abee:	3b01      	subs	r3, #1
9000abf0:	041b      	lsls	r3, r3, #16
9000abf2:	4319      	orrs	r1, r3
9000abf4:	68bb      	ldr	r3, [r7, #8]
9000abf6:	699b      	ldr	r3, [r3, #24]
9000abf8:	3b01      	subs	r3, #1
9000abfa:	061b      	lsls	r3, r3, #24
9000abfc:	430b      	orrs	r3, r1
9000abfe:	431a      	orrs	r2, r3
9000ac00:	68fb      	ldr	r3, [r7, #12]
9000ac02:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000ac04:	2300      	movs	r3, #0
}
9000ac06:	4618      	mov	r0, r3
9000ac08:	3714      	adds	r7, #20
9000ac0a:	46bd      	mov	sp, r7
9000ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ac10:	4770      	bx	lr
9000ac12:	bf00      	nop
9000ac14:	ff0f0fff 	.word	0xff0f0fff

9000ac18 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000ac18:	b480      	push	{r7}
9000ac1a:	b085      	sub	sp, #20
9000ac1c:	af00      	add	r7, sp, #0
9000ac1e:	60f8      	str	r0, [r7, #12]
9000ac20:	60b9      	str	r1, [r7, #8]
9000ac22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ac24:	68fb      	ldr	r3, [r7, #12]
9000ac26:	691a      	ldr	r2, [r3, #16]
9000ac28:	4b0c      	ldr	r3, [pc, #48]	@ (9000ac5c <FMC_SDRAM_SendCommand+0x44>)
9000ac2a:	4013      	ands	r3, r2
9000ac2c:	68ba      	ldr	r2, [r7, #8]
9000ac2e:	6811      	ldr	r1, [r2, #0]
9000ac30:	68ba      	ldr	r2, [r7, #8]
9000ac32:	6852      	ldr	r2, [r2, #4]
9000ac34:	4311      	orrs	r1, r2
9000ac36:	68ba      	ldr	r2, [r7, #8]
9000ac38:	6892      	ldr	r2, [r2, #8]
9000ac3a:	3a01      	subs	r2, #1
9000ac3c:	0152      	lsls	r2, r2, #5
9000ac3e:	4311      	orrs	r1, r2
9000ac40:	68ba      	ldr	r2, [r7, #8]
9000ac42:	68d2      	ldr	r2, [r2, #12]
9000ac44:	0252      	lsls	r2, r2, #9
9000ac46:	430a      	orrs	r2, r1
9000ac48:	431a      	orrs	r2, r3
9000ac4a:	68fb      	ldr	r3, [r7, #12]
9000ac4c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000ac4e:	2300      	movs	r3, #0
}
9000ac50:	4618      	mov	r0, r3
9000ac52:	3714      	adds	r7, #20
9000ac54:	46bd      	mov	sp, r7
9000ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ac5a:	4770      	bx	lr
9000ac5c:	ffc00000 	.word	0xffc00000

9000ac60 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000ac60:	b480      	push	{r7}
9000ac62:	b083      	sub	sp, #12
9000ac64:	af00      	add	r7, sp, #0
9000ac66:	6078      	str	r0, [r7, #4]
9000ac68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000ac6a:	687b      	ldr	r3, [r7, #4]
9000ac6c:	695a      	ldr	r2, [r3, #20]
9000ac6e:	4b07      	ldr	r3, [pc, #28]	@ (9000ac8c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000ac70:	4013      	ands	r3, r2
9000ac72:	683a      	ldr	r2, [r7, #0]
9000ac74:	0052      	lsls	r2, r2, #1
9000ac76:	431a      	orrs	r2, r3
9000ac78:	687b      	ldr	r3, [r7, #4]
9000ac7a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000ac7c:	2300      	movs	r3, #0
}
9000ac7e:	4618      	mov	r0, r3
9000ac80:	370c      	adds	r7, #12
9000ac82:	46bd      	mov	sp, r7
9000ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ac88:	4770      	bx	lr
9000ac8a:	bf00      	nop
9000ac8c:	ffffc001 	.word	0xffffc001

9000ac90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000ac90:	b480      	push	{r7}
9000ac92:	b083      	sub	sp, #12
9000ac94:	af00      	add	r7, sp, #0
9000ac96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000ac98:	687b      	ldr	r3, [r7, #4]
9000ac9a:	689b      	ldr	r3, [r3, #8]
9000ac9c:	f043 0201 	orr.w	r2, r3, #1
9000aca0:	687b      	ldr	r3, [r7, #4]
9000aca2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000aca4:	2300      	movs	r3, #0
}
9000aca6:	4618      	mov	r0, r3
9000aca8:	370c      	adds	r7, #12
9000acaa:	46bd      	mov	sp, r7
9000acac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000acb0:	4770      	bx	lr

9000acb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000acb2:	b480      	push	{r7}
9000acb4:	b083      	sub	sp, #12
9000acb6:	af00      	add	r7, sp, #0
9000acb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000acba:	687b      	ldr	r3, [r7, #4]
9000acbc:	689b      	ldr	r3, [r3, #8]
9000acbe:	f023 0201 	bic.w	r2, r3, #1
9000acc2:	687b      	ldr	r3, [r7, #4]
9000acc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000acc6:	2300      	movs	r3, #0
}
9000acc8:	4618      	mov	r0, r3
9000acca:	370c      	adds	r7, #12
9000accc:	46bd      	mov	sp, r7
9000acce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000acd2:	4770      	bx	lr

9000acd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000acd4:	b480      	push	{r7}
9000acd6:	b085      	sub	sp, #20
9000acd8:	af00      	add	r7, sp, #0
9000acda:	6078      	str	r0, [r7, #4]
9000acdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000acde:	2300      	movs	r3, #0
9000ace0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000ace2:	68fb      	ldr	r3, [r7, #12]
9000ace4:	3301      	adds	r3, #1
9000ace6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000ace8:	68fb      	ldr	r3, [r7, #12]
9000acea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000acee:	d901      	bls.n	9000acf4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000acf0:	2303      	movs	r3, #3
9000acf2:	e01b      	b.n	9000ad2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000acf4:	687b      	ldr	r3, [r7, #4]
9000acf6:	691b      	ldr	r3, [r3, #16]
9000acf8:	2b00      	cmp	r3, #0
9000acfa:	daf2      	bge.n	9000ace2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000acfc:	2300      	movs	r3, #0
9000acfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000ad00:	683b      	ldr	r3, [r7, #0]
9000ad02:	019b      	lsls	r3, r3, #6
9000ad04:	f043 0220 	orr.w	r2, r3, #32
9000ad08:	687b      	ldr	r3, [r7, #4]
9000ad0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000ad0c:	68fb      	ldr	r3, [r7, #12]
9000ad0e:	3301      	adds	r3, #1
9000ad10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000ad12:	68fb      	ldr	r3, [r7, #12]
9000ad14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000ad18:	d901      	bls.n	9000ad1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000ad1a:	2303      	movs	r3, #3
9000ad1c:	e006      	b.n	9000ad2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000ad1e:	687b      	ldr	r3, [r7, #4]
9000ad20:	691b      	ldr	r3, [r3, #16]
9000ad22:	f003 0320 	and.w	r3, r3, #32
9000ad26:	2b20      	cmp	r3, #32
9000ad28:	d0f0      	beq.n	9000ad0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000ad2a:	2300      	movs	r3, #0
}
9000ad2c:	4618      	mov	r0, r3
9000ad2e:	3714      	adds	r7, #20
9000ad30:	46bd      	mov	sp, r7
9000ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad36:	4770      	bx	lr

9000ad38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000ad38:	b480      	push	{r7}
9000ad3a:	b085      	sub	sp, #20
9000ad3c:	af00      	add	r7, sp, #0
9000ad3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000ad40:	2300      	movs	r3, #0
9000ad42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000ad44:	68fb      	ldr	r3, [r7, #12]
9000ad46:	3301      	adds	r3, #1
9000ad48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000ad4a:	68fb      	ldr	r3, [r7, #12]
9000ad4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000ad50:	d901      	bls.n	9000ad56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000ad52:	2303      	movs	r3, #3
9000ad54:	e018      	b.n	9000ad88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000ad56:	687b      	ldr	r3, [r7, #4]
9000ad58:	691b      	ldr	r3, [r3, #16]
9000ad5a:	2b00      	cmp	r3, #0
9000ad5c:	daf2      	bge.n	9000ad44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000ad5e:	2300      	movs	r3, #0
9000ad60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000ad62:	687b      	ldr	r3, [r7, #4]
9000ad64:	2210      	movs	r2, #16
9000ad66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000ad68:	68fb      	ldr	r3, [r7, #12]
9000ad6a:	3301      	adds	r3, #1
9000ad6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000ad6e:	68fb      	ldr	r3, [r7, #12]
9000ad70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000ad74:	d901      	bls.n	9000ad7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000ad76:	2303      	movs	r3, #3
9000ad78:	e006      	b.n	9000ad88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000ad7a:	687b      	ldr	r3, [r7, #4]
9000ad7c:	691b      	ldr	r3, [r3, #16]
9000ad7e:	f003 0310 	and.w	r3, r3, #16
9000ad82:	2b10      	cmp	r3, #16
9000ad84:	d0f0      	beq.n	9000ad68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000ad86:	2300      	movs	r3, #0
}
9000ad88:	4618      	mov	r0, r3
9000ad8a:	3714      	adds	r7, #20
9000ad8c:	46bd      	mov	sp, r7
9000ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad92:	4770      	bx	lr

9000ad94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000ad94:	b480      	push	{r7}
9000ad96:	b08b      	sub	sp, #44	@ 0x2c
9000ad98:	af00      	add	r7, sp, #0
9000ad9a:	60f8      	str	r0, [r7, #12]
9000ad9c:	60b9      	str	r1, [r7, #8]
9000ad9e:	4613      	mov	r3, r2
9000ada0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000ada2:	68fb      	ldr	r3, [r7, #12]
9000ada4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000ada6:	68bb      	ldr	r3, [r7, #8]
9000ada8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000adaa:	88fb      	ldrh	r3, [r7, #6]
9000adac:	089b      	lsrs	r3, r3, #2
9000adae:	b29b      	uxth	r3, r3
9000adb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000adb2:	88fb      	ldrh	r3, [r7, #6]
9000adb4:	f003 0303 	and.w	r3, r3, #3
9000adb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000adba:	2300      	movs	r3, #0
9000adbc:	623b      	str	r3, [r7, #32]
9000adbe:	e014      	b.n	9000adea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000adc0:	69bb      	ldr	r3, [r7, #24]
9000adc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000adc6:	681a      	ldr	r2, [r3, #0]
9000adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000adca:	601a      	str	r2, [r3, #0]
    pDest++;
9000adcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000adce:	3301      	adds	r3, #1
9000add0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000add4:	3301      	adds	r3, #1
9000add6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000adda:	3301      	adds	r3, #1
9000addc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ade0:	3301      	adds	r3, #1
9000ade2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000ade4:	6a3b      	ldr	r3, [r7, #32]
9000ade6:	3301      	adds	r3, #1
9000ade8:	623b      	str	r3, [r7, #32]
9000adea:	6a3a      	ldr	r2, [r7, #32]
9000adec:	697b      	ldr	r3, [r7, #20]
9000adee:	429a      	cmp	r2, r3
9000adf0:	d3e6      	bcc.n	9000adc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000adf2:	8bfb      	ldrh	r3, [r7, #30]
9000adf4:	2b00      	cmp	r3, #0
9000adf6:	d01e      	beq.n	9000ae36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000adf8:	2300      	movs	r3, #0
9000adfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000adfc:	69bb      	ldr	r3, [r7, #24]
9000adfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000ae02:	461a      	mov	r2, r3
9000ae04:	f107 0310 	add.w	r3, r7, #16
9000ae08:	6812      	ldr	r2, [r2, #0]
9000ae0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000ae0c:	693a      	ldr	r2, [r7, #16]
9000ae0e:	6a3b      	ldr	r3, [r7, #32]
9000ae10:	b2db      	uxtb	r3, r3
9000ae12:	00db      	lsls	r3, r3, #3
9000ae14:	fa22 f303 	lsr.w	r3, r2, r3
9000ae18:	b2da      	uxtb	r2, r3
9000ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ae1c:	701a      	strb	r2, [r3, #0]
      i++;
9000ae1e:	6a3b      	ldr	r3, [r7, #32]
9000ae20:	3301      	adds	r3, #1
9000ae22:	623b      	str	r3, [r7, #32]
      pDest++;
9000ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ae26:	3301      	adds	r3, #1
9000ae28:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000ae2a:	8bfb      	ldrh	r3, [r7, #30]
9000ae2c:	3b01      	subs	r3, #1
9000ae2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000ae30:	8bfb      	ldrh	r3, [r7, #30]
9000ae32:	2b00      	cmp	r3, #0
9000ae34:	d1ea      	bne.n	9000ae0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000ae36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000ae38:	4618      	mov	r0, r3
9000ae3a:	372c      	adds	r7, #44	@ 0x2c
9000ae3c:	46bd      	mov	sp, r7
9000ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae42:	4770      	bx	lr

9000ae44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000ae44:	b480      	push	{r7}
9000ae46:	b085      	sub	sp, #20
9000ae48:	af00      	add	r7, sp, #0
9000ae4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000ae4c:	687b      	ldr	r3, [r7, #4]
9000ae4e:	695b      	ldr	r3, [r3, #20]
9000ae50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000ae52:	687b      	ldr	r3, [r7, #4]
9000ae54:	699b      	ldr	r3, [r3, #24]
9000ae56:	68fa      	ldr	r2, [r7, #12]
9000ae58:	4013      	ands	r3, r2
9000ae5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000ae5c:	68fb      	ldr	r3, [r7, #12]
}
9000ae5e:	4618      	mov	r0, r3
9000ae60:	3714      	adds	r7, #20
9000ae62:	46bd      	mov	sp, r7
9000ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae68:	4770      	bx	lr

9000ae6a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000ae6a:	b480      	push	{r7}
9000ae6c:	b085      	sub	sp, #20
9000ae6e:	af00      	add	r7, sp, #0
9000ae70:	6078      	str	r0, [r7, #4]
9000ae72:	460b      	mov	r3, r1
9000ae74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000ae76:	687b      	ldr	r3, [r7, #4]
9000ae78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000ae7a:	78fb      	ldrb	r3, [r7, #3]
9000ae7c:	015a      	lsls	r2, r3, #5
9000ae7e:	68fb      	ldr	r3, [r7, #12]
9000ae80:	4413      	add	r3, r2
9000ae82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000ae86:	689b      	ldr	r3, [r3, #8]
9000ae88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000ae8a:	78fb      	ldrb	r3, [r7, #3]
9000ae8c:	015a      	lsls	r2, r3, #5
9000ae8e:	68fb      	ldr	r3, [r7, #12]
9000ae90:	4413      	add	r3, r2
9000ae92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000ae96:	68db      	ldr	r3, [r3, #12]
9000ae98:	68ba      	ldr	r2, [r7, #8]
9000ae9a:	4013      	ands	r3, r2
9000ae9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000ae9e:	68bb      	ldr	r3, [r7, #8]
}
9000aea0:	4618      	mov	r0, r3
9000aea2:	3714      	adds	r7, #20
9000aea4:	46bd      	mov	sp, r7
9000aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aeaa:	4770      	bx	lr

9000aeac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000aeac:	b480      	push	{r7}
9000aeae:	b083      	sub	sp, #12
9000aeb0:	af00      	add	r7, sp, #0
9000aeb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000aeb4:	687b      	ldr	r3, [r7, #4]
9000aeb6:	695b      	ldr	r3, [r3, #20]
9000aeb8:	f003 0301 	and.w	r3, r3, #1
}
9000aebc:	4618      	mov	r0, r3
9000aebe:	370c      	adds	r7, #12
9000aec0:	46bd      	mov	sp, r7
9000aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aec6:	4770      	bx	lr

9000aec8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000aec8:	b480      	push	{r7}
9000aeca:	b085      	sub	sp, #20
9000aecc:	af00      	add	r7, sp, #0
9000aece:	6078      	str	r0, [r7, #4]
9000aed0:	460b      	mov	r3, r1
9000aed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000aed4:	687b      	ldr	r3, [r7, #4]
9000aed6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000aed8:	68fb      	ldr	r3, [r7, #12]
9000aeda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000aede:	681b      	ldr	r3, [r3, #0]
9000aee0:	68fa      	ldr	r2, [r7, #12]
9000aee2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000aee6:	f023 0303 	bic.w	r3, r3, #3
9000aeea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000aeec:	68fb      	ldr	r3, [r7, #12]
9000aeee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000aef2:	681a      	ldr	r2, [r3, #0]
9000aef4:	78fb      	ldrb	r3, [r7, #3]
9000aef6:	f003 0303 	and.w	r3, r3, #3
9000aefa:	68f9      	ldr	r1, [r7, #12]
9000aefc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000af00:	4313      	orrs	r3, r2
9000af02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000af04:	78fb      	ldrb	r3, [r7, #3]
9000af06:	2b01      	cmp	r3, #1
9000af08:	d107      	bne.n	9000af1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000af0a:	68fb      	ldr	r3, [r7, #12]
9000af0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000af10:	461a      	mov	r2, r3
9000af12:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000af16:	6053      	str	r3, [r2, #4]
9000af18:	e00c      	b.n	9000af34 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000af1a:	78fb      	ldrb	r3, [r7, #3]
9000af1c:	2b02      	cmp	r3, #2
9000af1e:	d107      	bne.n	9000af30 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000af20:	68fb      	ldr	r3, [r7, #12]
9000af22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000af26:	461a      	mov	r2, r3
9000af28:	f241 7370 	movw	r3, #6000	@ 0x1770
9000af2c:	6053      	str	r3, [r2, #4]
9000af2e:	e001      	b.n	9000af34 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000af30:	2301      	movs	r3, #1
9000af32:	e000      	b.n	9000af36 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000af34:	2300      	movs	r3, #0
}
9000af36:	4618      	mov	r0, r3
9000af38:	3714      	adds	r7, #20
9000af3a:	46bd      	mov	sp, r7
9000af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af40:	4770      	bx	lr

9000af42 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000af42:	b480      	push	{r7}
9000af44:	b085      	sub	sp, #20
9000af46:	af00      	add	r7, sp, #0
9000af48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000af4a:	687b      	ldr	r3, [r7, #4]
9000af4c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000af4e:	68fb      	ldr	r3, [r7, #12]
9000af50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000af54:	695b      	ldr	r3, [r3, #20]
9000af56:	b29b      	uxth	r3, r3
}
9000af58:	4618      	mov	r0, r3
9000af5a:	3714      	adds	r7, #20
9000af5c:	46bd      	mov	sp, r7
9000af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af62:	4770      	bx	lr

9000af64 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000af64:	b480      	push	{r7}
9000af66:	b089      	sub	sp, #36	@ 0x24
9000af68:	af00      	add	r7, sp, #0
9000af6a:	6078      	str	r0, [r7, #4]
9000af6c:	460b      	mov	r3, r1
9000af6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000af70:	687b      	ldr	r3, [r7, #4]
9000af72:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000af74:	78fb      	ldrb	r3, [r7, #3]
9000af76:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000af78:	2300      	movs	r3, #0
9000af7a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000af7c:	69bb      	ldr	r3, [r7, #24]
9000af7e:	015a      	lsls	r2, r3, #5
9000af80:	69fb      	ldr	r3, [r7, #28]
9000af82:	4413      	add	r3, r2
9000af84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000af88:	681b      	ldr	r3, [r3, #0]
9000af8a:	0c9b      	lsrs	r3, r3, #18
9000af8c:	f003 0303 	and.w	r3, r3, #3
9000af90:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000af92:	69bb      	ldr	r3, [r7, #24]
9000af94:	015a      	lsls	r2, r3, #5
9000af96:	69fb      	ldr	r3, [r7, #28]
9000af98:	4413      	add	r3, r2
9000af9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000af9e:	681b      	ldr	r3, [r3, #0]
9000afa0:	0fdb      	lsrs	r3, r3, #31
9000afa2:	f003 0301 	and.w	r3, r3, #1
9000afa6:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000afa8:	69bb      	ldr	r3, [r7, #24]
9000afaa:	015a      	lsls	r2, r3, #5
9000afac:	69fb      	ldr	r3, [r7, #28]
9000afae:	4413      	add	r3, r2
9000afb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000afb4:	685b      	ldr	r3, [r3, #4]
9000afb6:	0fdb      	lsrs	r3, r3, #31
9000afb8:	f003 0301 	and.w	r3, r3, #1
9000afbc:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000afbe:	687b      	ldr	r3, [r7, #4]
9000afc0:	689b      	ldr	r3, [r3, #8]
9000afc2:	f003 0320 	and.w	r3, r3, #32
9000afc6:	2b20      	cmp	r3, #32
9000afc8:	d10d      	bne.n	9000afe6 <USB_HC_Halt+0x82>
9000afca:	68fb      	ldr	r3, [r7, #12]
9000afcc:	2b00      	cmp	r3, #0
9000afce:	d10a      	bne.n	9000afe6 <USB_HC_Halt+0x82>
9000afd0:	693b      	ldr	r3, [r7, #16]
9000afd2:	2b00      	cmp	r3, #0
9000afd4:	d005      	beq.n	9000afe2 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000afd6:	697b      	ldr	r3, [r7, #20]
9000afd8:	2b01      	cmp	r3, #1
9000afda:	d002      	beq.n	9000afe2 <USB_HC_Halt+0x7e>
9000afdc:	697b      	ldr	r3, [r7, #20]
9000afde:	2b03      	cmp	r3, #3
9000afe0:	d101      	bne.n	9000afe6 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000afe2:	2300      	movs	r3, #0
9000afe4:	e0d8      	b.n	9000b198 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000afe6:	697b      	ldr	r3, [r7, #20]
9000afe8:	2b00      	cmp	r3, #0
9000afea:	d002      	beq.n	9000aff2 <USB_HC_Halt+0x8e>
9000afec:	697b      	ldr	r3, [r7, #20]
9000afee:	2b02      	cmp	r3, #2
9000aff0:	d173      	bne.n	9000b0da <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000aff2:	69bb      	ldr	r3, [r7, #24]
9000aff4:	015a      	lsls	r2, r3, #5
9000aff6:	69fb      	ldr	r3, [r7, #28]
9000aff8:	4413      	add	r3, r2
9000affa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000affe:	681b      	ldr	r3, [r3, #0]
9000b000:	69ba      	ldr	r2, [r7, #24]
9000b002:	0151      	lsls	r1, r2, #5
9000b004:	69fa      	ldr	r2, [r7, #28]
9000b006:	440a      	add	r2, r1
9000b008:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b00c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b010:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b012:	687b      	ldr	r3, [r7, #4]
9000b014:	689b      	ldr	r3, [r3, #8]
9000b016:	f003 0320 	and.w	r3, r3, #32
9000b01a:	2b00      	cmp	r3, #0
9000b01c:	d14a      	bne.n	9000b0b4 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b01e:	687b      	ldr	r3, [r7, #4]
9000b020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b022:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b026:	2b00      	cmp	r3, #0
9000b028:	d133      	bne.n	9000b092 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b02a:	69bb      	ldr	r3, [r7, #24]
9000b02c:	015a      	lsls	r2, r3, #5
9000b02e:	69fb      	ldr	r3, [r7, #28]
9000b030:	4413      	add	r3, r2
9000b032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b036:	681b      	ldr	r3, [r3, #0]
9000b038:	69ba      	ldr	r2, [r7, #24]
9000b03a:	0151      	lsls	r1, r2, #5
9000b03c:	69fa      	ldr	r2, [r7, #28]
9000b03e:	440a      	add	r2, r1
9000b040:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b048:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b04a:	69bb      	ldr	r3, [r7, #24]
9000b04c:	015a      	lsls	r2, r3, #5
9000b04e:	69fb      	ldr	r3, [r7, #28]
9000b050:	4413      	add	r3, r2
9000b052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b056:	681b      	ldr	r3, [r3, #0]
9000b058:	69ba      	ldr	r2, [r7, #24]
9000b05a:	0151      	lsls	r1, r2, #5
9000b05c:	69fa      	ldr	r2, [r7, #28]
9000b05e:	440a      	add	r2, r1
9000b060:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b064:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b068:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b06a:	68bb      	ldr	r3, [r7, #8]
9000b06c:	3301      	adds	r3, #1
9000b06e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b070:	68bb      	ldr	r3, [r7, #8]
9000b072:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b076:	d82e      	bhi.n	9000b0d6 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b078:	69bb      	ldr	r3, [r7, #24]
9000b07a:	015a      	lsls	r2, r3, #5
9000b07c:	69fb      	ldr	r3, [r7, #28]
9000b07e:	4413      	add	r3, r2
9000b080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b084:	681b      	ldr	r3, [r3, #0]
9000b086:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b08a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b08e:	d0ec      	beq.n	9000b06a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b090:	e081      	b.n	9000b196 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b092:	69bb      	ldr	r3, [r7, #24]
9000b094:	015a      	lsls	r2, r3, #5
9000b096:	69fb      	ldr	r3, [r7, #28]
9000b098:	4413      	add	r3, r2
9000b09a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b09e:	681b      	ldr	r3, [r3, #0]
9000b0a0:	69ba      	ldr	r2, [r7, #24]
9000b0a2:	0151      	lsls	r1, r2, #5
9000b0a4:	69fa      	ldr	r2, [r7, #28]
9000b0a6:	440a      	add	r2, r1
9000b0a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b0ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b0b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b0b2:	e070      	b.n	9000b196 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b0b4:	69bb      	ldr	r3, [r7, #24]
9000b0b6:	015a      	lsls	r2, r3, #5
9000b0b8:	69fb      	ldr	r3, [r7, #28]
9000b0ba:	4413      	add	r3, r2
9000b0bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b0c0:	681b      	ldr	r3, [r3, #0]
9000b0c2:	69ba      	ldr	r2, [r7, #24]
9000b0c4:	0151      	lsls	r1, r2, #5
9000b0c6:	69fa      	ldr	r2, [r7, #28]
9000b0c8:	440a      	add	r2, r1
9000b0ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b0ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b0d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b0d4:	e05f      	b.n	9000b196 <USB_HC_Halt+0x232>
            break;
9000b0d6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b0d8:	e05d      	b.n	9000b196 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b0da:	69bb      	ldr	r3, [r7, #24]
9000b0dc:	015a      	lsls	r2, r3, #5
9000b0de:	69fb      	ldr	r3, [r7, #28]
9000b0e0:	4413      	add	r3, r2
9000b0e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b0e6:	681b      	ldr	r3, [r3, #0]
9000b0e8:	69ba      	ldr	r2, [r7, #24]
9000b0ea:	0151      	lsls	r1, r2, #5
9000b0ec:	69fa      	ldr	r2, [r7, #28]
9000b0ee:	440a      	add	r2, r1
9000b0f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b0f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b0f8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b0fa:	69fb      	ldr	r3, [r7, #28]
9000b0fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b100:	691b      	ldr	r3, [r3, #16]
9000b102:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b106:	2b00      	cmp	r3, #0
9000b108:	d133      	bne.n	9000b172 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b10a:	69bb      	ldr	r3, [r7, #24]
9000b10c:	015a      	lsls	r2, r3, #5
9000b10e:	69fb      	ldr	r3, [r7, #28]
9000b110:	4413      	add	r3, r2
9000b112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b116:	681b      	ldr	r3, [r3, #0]
9000b118:	69ba      	ldr	r2, [r7, #24]
9000b11a:	0151      	lsls	r1, r2, #5
9000b11c:	69fa      	ldr	r2, [r7, #28]
9000b11e:	440a      	add	r2, r1
9000b120:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b128:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b12a:	69bb      	ldr	r3, [r7, #24]
9000b12c:	015a      	lsls	r2, r3, #5
9000b12e:	69fb      	ldr	r3, [r7, #28]
9000b130:	4413      	add	r3, r2
9000b132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b136:	681b      	ldr	r3, [r3, #0]
9000b138:	69ba      	ldr	r2, [r7, #24]
9000b13a:	0151      	lsls	r1, r2, #5
9000b13c:	69fa      	ldr	r2, [r7, #28]
9000b13e:	440a      	add	r2, r1
9000b140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b144:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b148:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b14a:	68bb      	ldr	r3, [r7, #8]
9000b14c:	3301      	adds	r3, #1
9000b14e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b150:	68bb      	ldr	r3, [r7, #8]
9000b152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b156:	d81d      	bhi.n	9000b194 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b158:	69bb      	ldr	r3, [r7, #24]
9000b15a:	015a      	lsls	r2, r3, #5
9000b15c:	69fb      	ldr	r3, [r7, #28]
9000b15e:	4413      	add	r3, r2
9000b160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b164:	681b      	ldr	r3, [r3, #0]
9000b166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b16a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b16e:	d0ec      	beq.n	9000b14a <USB_HC_Halt+0x1e6>
9000b170:	e011      	b.n	9000b196 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b172:	69bb      	ldr	r3, [r7, #24]
9000b174:	015a      	lsls	r2, r3, #5
9000b176:	69fb      	ldr	r3, [r7, #28]
9000b178:	4413      	add	r3, r2
9000b17a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b17e:	681b      	ldr	r3, [r3, #0]
9000b180:	69ba      	ldr	r2, [r7, #24]
9000b182:	0151      	lsls	r1, r2, #5
9000b184:	69fa      	ldr	r2, [r7, #28]
9000b186:	440a      	add	r2, r1
9000b188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b18c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b190:	6013      	str	r3, [r2, #0]
9000b192:	e000      	b.n	9000b196 <USB_HC_Halt+0x232>
          break;
9000b194:	bf00      	nop
    }
  }

  return HAL_OK;
9000b196:	2300      	movs	r3, #0
}
9000b198:	4618      	mov	r0, r3
9000b19a:	3724      	adds	r7, #36	@ 0x24
9000b19c:	46bd      	mov	sp, r7
9000b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1a2:	4770      	bx	lr

9000b1a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b1a4:	b580      	push	{r7, lr}
9000b1a6:	b088      	sub	sp, #32
9000b1a8:	af00      	add	r7, sp, #0
9000b1aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b1ac:	2300      	movs	r3, #0
9000b1ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b1b0:	687b      	ldr	r3, [r7, #4]
9000b1b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b1b4:	2300      	movs	r3, #0
9000b1b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b1b8:	6878      	ldr	r0, [r7, #4]
9000b1ba:	f7ff fd7a 	bl	9000acb2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b1be:	2110      	movs	r1, #16
9000b1c0:	6878      	ldr	r0, [r7, #4]
9000b1c2:	f7ff fd87 	bl	9000acd4 <USB_FlushTxFifo>
9000b1c6:	4603      	mov	r3, r0
9000b1c8:	2b00      	cmp	r3, #0
9000b1ca:	d001      	beq.n	9000b1d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b1cc:	2301      	movs	r3, #1
9000b1ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b1d0:	6878      	ldr	r0, [r7, #4]
9000b1d2:	f7ff fdb1 	bl	9000ad38 <USB_FlushRxFifo>
9000b1d6:	4603      	mov	r3, r0
9000b1d8:	2b00      	cmp	r3, #0
9000b1da:	d001      	beq.n	9000b1e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b1dc:	2301      	movs	r3, #1
9000b1de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b1e0:	2300      	movs	r3, #0
9000b1e2:	61bb      	str	r3, [r7, #24]
9000b1e4:	e01f      	b.n	9000b226 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b1e6:	69bb      	ldr	r3, [r7, #24]
9000b1e8:	015a      	lsls	r2, r3, #5
9000b1ea:	697b      	ldr	r3, [r7, #20]
9000b1ec:	4413      	add	r3, r2
9000b1ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b1f2:	681b      	ldr	r3, [r3, #0]
9000b1f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b1f6:	693b      	ldr	r3, [r7, #16]
9000b1f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b1fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b1fe:	693b      	ldr	r3, [r7, #16]
9000b200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b204:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b206:	693b      	ldr	r3, [r7, #16]
9000b208:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b20c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b20e:	69bb      	ldr	r3, [r7, #24]
9000b210:	015a      	lsls	r2, r3, #5
9000b212:	697b      	ldr	r3, [r7, #20]
9000b214:	4413      	add	r3, r2
9000b216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b21a:	461a      	mov	r2, r3
9000b21c:	693b      	ldr	r3, [r7, #16]
9000b21e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b220:	69bb      	ldr	r3, [r7, #24]
9000b222:	3301      	adds	r3, #1
9000b224:	61bb      	str	r3, [r7, #24]
9000b226:	69bb      	ldr	r3, [r7, #24]
9000b228:	2b0f      	cmp	r3, #15
9000b22a:	d9dc      	bls.n	9000b1e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b22c:	2300      	movs	r3, #0
9000b22e:	61bb      	str	r3, [r7, #24]
9000b230:	e034      	b.n	9000b29c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b232:	69bb      	ldr	r3, [r7, #24]
9000b234:	015a      	lsls	r2, r3, #5
9000b236:	697b      	ldr	r3, [r7, #20]
9000b238:	4413      	add	r3, r2
9000b23a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b23e:	681b      	ldr	r3, [r3, #0]
9000b240:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b242:	693b      	ldr	r3, [r7, #16]
9000b244:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b248:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b24a:	693b      	ldr	r3, [r7, #16]
9000b24c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b250:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b252:	693b      	ldr	r3, [r7, #16]
9000b254:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b258:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b25a:	69bb      	ldr	r3, [r7, #24]
9000b25c:	015a      	lsls	r2, r3, #5
9000b25e:	697b      	ldr	r3, [r7, #20]
9000b260:	4413      	add	r3, r2
9000b262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b266:	461a      	mov	r2, r3
9000b268:	693b      	ldr	r3, [r7, #16]
9000b26a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b26c:	68fb      	ldr	r3, [r7, #12]
9000b26e:	3301      	adds	r3, #1
9000b270:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b272:	68fb      	ldr	r3, [r7, #12]
9000b274:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b278:	d80c      	bhi.n	9000b294 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b27a:	69bb      	ldr	r3, [r7, #24]
9000b27c:	015a      	lsls	r2, r3, #5
9000b27e:	697b      	ldr	r3, [r7, #20]
9000b280:	4413      	add	r3, r2
9000b282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b286:	681b      	ldr	r3, [r3, #0]
9000b288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b28c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b290:	d0ec      	beq.n	9000b26c <USB_StopHost+0xc8>
9000b292:	e000      	b.n	9000b296 <USB_StopHost+0xf2>
        break;
9000b294:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b296:	69bb      	ldr	r3, [r7, #24]
9000b298:	3301      	adds	r3, #1
9000b29a:	61bb      	str	r3, [r7, #24]
9000b29c:	69bb      	ldr	r3, [r7, #24]
9000b29e:	2b0f      	cmp	r3, #15
9000b2a0:	d9c7      	bls.n	9000b232 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b2a2:	697b      	ldr	r3, [r7, #20]
9000b2a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b2a8:	461a      	mov	r2, r3
9000b2aa:	f04f 33ff 	mov.w	r3, #4294967295
9000b2ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b2b0:	687b      	ldr	r3, [r7, #4]
9000b2b2:	f04f 32ff 	mov.w	r2, #4294967295
9000b2b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b2b8:	6878      	ldr	r0, [r7, #4]
9000b2ba:	f7ff fce9 	bl	9000ac90 <USB_EnableGlobalInt>

  return ret;
9000b2be:	7ffb      	ldrb	r3, [r7, #31]
}
9000b2c0:	4618      	mov	r0, r3
9000b2c2:	3720      	adds	r7, #32
9000b2c4:	46bd      	mov	sp, r7
9000b2c6:	bd80      	pop	{r7, pc}

9000b2c8 <setAllRowsInactive>:
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;
uint8_t receivedChar;

void setAllRowsInactive(void)
{
9000b2c8:	b580      	push	{r7, lr}
9000b2ca:	b082      	sub	sp, #8
9000b2cc:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000b2ce:	2300      	movs	r3, #0
9000b2d0:	607b      	str	r3, [r7, #4]
9000b2d2:	e00f      	b.n	9000b2f4 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000b2d4:	4a0b      	ldr	r2, [pc, #44]	@ (9000b304 <setAllRowsInactive+0x3c>)
9000b2d6:	687b      	ldr	r3, [r7, #4]
9000b2d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b2dc:	4a09      	ldr	r2, [pc, #36]	@ (9000b304 <setAllRowsInactive+0x3c>)
9000b2de:	687b      	ldr	r3, [r7, #4]
9000b2e0:	00db      	lsls	r3, r3, #3
9000b2e2:	4413      	add	r3, r2
9000b2e4:	889b      	ldrh	r3, [r3, #4]
9000b2e6:	2200      	movs	r2, #0
9000b2e8:	4619      	mov	r1, r3
9000b2ea:	f7f8 fc13 	bl	90003b14 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000b2ee:	687b      	ldr	r3, [r7, #4]
9000b2f0:	3301      	adds	r3, #1
9000b2f2:	607b      	str	r3, [r7, #4]
9000b2f4:	687b      	ldr	r3, [r7, #4]
9000b2f6:	2b04      	cmp	r3, #4
9000b2f8:	ddec      	ble.n	9000b2d4 <setAllRowsInactive+0xc>
    }
}
9000b2fa:	bf00      	nop
9000b2fc:	bf00      	nop
9000b2fe:	3708      	adds	r7, #8
9000b300:	46bd      	mov	sp, r7
9000b302:	bd80      	pop	{r7, pc}
9000b304:	20000018 	.word	0x20000018

9000b308 <setRowActive>:

void setRowActive(int row)
{
9000b308:	b580      	push	{r7, lr}
9000b30a:	b082      	sub	sp, #8
9000b30c:	af00      	add	r7, sp, #0
9000b30e:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000b310:	687b      	ldr	r3, [r7, #4]
9000b312:	2b00      	cmp	r3, #0
9000b314:	db12      	blt.n	9000b33c <setRowActive+0x34>
9000b316:	687b      	ldr	r3, [r7, #4]
9000b318:	2b04      	cmp	r3, #4
9000b31a:	dc0f      	bgt.n	9000b33c <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000b31c:	f7ff ffd4 	bl	9000b2c8 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000b320:	4a08      	ldr	r2, [pc, #32]	@ (9000b344 <setRowActive+0x3c>)
9000b322:	687b      	ldr	r3, [r7, #4]
9000b324:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b328:	4a06      	ldr	r2, [pc, #24]	@ (9000b344 <setRowActive+0x3c>)
9000b32a:	687b      	ldr	r3, [r7, #4]
9000b32c:	00db      	lsls	r3, r3, #3
9000b32e:	4413      	add	r3, r2
9000b330:	889b      	ldrh	r3, [r3, #4]
9000b332:	2201      	movs	r2, #1
9000b334:	4619      	mov	r1, r3
9000b336:	f7f8 fbed 	bl	90003b14 <HAL_GPIO_WritePin>
9000b33a:	e000      	b.n	9000b33e <setRowActive+0x36>
        return;
9000b33c:	bf00      	nop
}
9000b33e:	3708      	adds	r7, #8
9000b340:	46bd      	mov	sp, r7
9000b342:	bd80      	pop	{r7, pc}
9000b344:	20000018 	.word	0x20000018

9000b348 <ReadFlexiKeyboard>:

void ReadFlexiKeyboard(void)
{
9000b348:	b580      	push	{r7, lr}
9000b34a:	b082      	sub	sp, #8
9000b34c:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000b34e:	2300      	movs	r3, #0
9000b350:	607b      	str	r3, [r7, #4]
9000b352:	e033      	b.n	9000b3bc <ReadFlexiKeyboard+0x74>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000b354:	6878      	ldr	r0, [r7, #4]
9000b356:	f7ff ffd7 	bl	9000b308 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000b35a:	200a      	movs	r0, #10
9000b35c:	f7f7 fd74 	bl	90002e48 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000b360:	2300      	movs	r3, #0
9000b362:	603b      	str	r3, [r7, #0]
9000b364:	e024      	b.n	9000b3b0 <ReadFlexiKeyboard+0x68>
        {

        	//if (col == 2) break;
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000b366:	4a19      	ldr	r2, [pc, #100]	@ (9000b3cc <ReadFlexiKeyboard+0x84>)
9000b368:	683b      	ldr	r3, [r7, #0]
9000b36a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000b36e:	4917      	ldr	r1, [pc, #92]	@ (9000b3cc <ReadFlexiKeyboard+0x84>)
9000b370:	683b      	ldr	r3, [r7, #0]
9000b372:	00db      	lsls	r3, r3, #3
9000b374:	440b      	add	r3, r1
9000b376:	889b      	ldrh	r3, [r3, #4]
9000b378:	4619      	mov	r1, r3
9000b37a:	4610      	mov	r0, r2
9000b37c:	f7f8 fbb2 	bl	90003ae4 <HAL_GPIO_ReadPin>
9000b380:	4603      	mov	r3, r0
9000b382:	2b01      	cmp	r3, #1
9000b384:	d111      	bne.n	9000b3aa <ReadFlexiKeyboard+0x62>
//                lastRow = row;
//                lastCol = col;
//                lastTriggerTime = now;

                // Key at (row, col) pressed!
                receivedChar = keymap[row][col];
9000b386:	4912      	ldr	r1, [pc, #72]	@ (9000b3d0 <ReadFlexiKeyboard+0x88>)
9000b388:	687a      	ldr	r2, [r7, #4]
9000b38a:	4613      	mov	r3, r2
9000b38c:	009b      	lsls	r3, r3, #2
9000b38e:	4413      	add	r3, r2
9000b390:	18ca      	adds	r2, r1, r3
9000b392:	683b      	ldr	r3, [r7, #0]
9000b394:	4413      	add	r3, r2
9000b396:	781a      	ldrb	r2, [r3, #0]
9000b398:	4b0e      	ldr	r3, [pc, #56]	@ (9000b3d4 <ReadFlexiKeyboard+0x8c>)
9000b39a:	701a      	strb	r2, [r3, #0]
                printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
9000b39c:	4b0d      	ldr	r3, [pc, #52]	@ (9000b3d4 <ReadFlexiKeyboard+0x8c>)
9000b39e:	781b      	ldrb	r3, [r3, #0]
9000b3a0:	683a      	ldr	r2, [r7, #0]
9000b3a2:	6879      	ldr	r1, [r7, #4]
9000b3a4:	480c      	ldr	r0, [pc, #48]	@ (9000b3d8 <ReadFlexiKeyboard+0x90>)
9000b3a6:	f000 fe53 	bl	9000c050 <iprintf>
        for (int col = 0; col < NUM_COLS; col++)
9000b3aa:	683b      	ldr	r3, [r7, #0]
9000b3ac:	3301      	adds	r3, #1
9000b3ae:	603b      	str	r3, [r7, #0]
9000b3b0:	683b      	ldr	r3, [r7, #0]
9000b3b2:	2b04      	cmp	r3, #4
9000b3b4:	ddd7      	ble.n	9000b366 <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000b3b6:	687b      	ldr	r3, [r7, #4]
9000b3b8:	3301      	adds	r3, #1
9000b3ba:	607b      	str	r3, [r7, #4]
9000b3bc:	687b      	ldr	r3, [r7, #4]
9000b3be:	2b04      	cmp	r3, #4
9000b3c0:	ddc8      	ble.n	9000b354 <ReadFlexiKeyboard+0xc>
            }
        }

        //setAllRowsInactive();  // Set all rows HIGH before next row scan
    }
}
9000b3c2:	bf00      	nop
9000b3c4:	bf00      	nop
9000b3c6:	3708      	adds	r7, #8
9000b3c8:	46bd      	mov	sp, r7
9000b3ca:	bd80      	pop	{r7, pc}
9000b3cc:	20000040 	.word	0x20000040
9000b3d0:	9000cde8 	.word	0x9000cde8
9000b3d4:	200012d8 	.word	0x200012d8
9000b3d8:	9000ccc8 	.word	0x9000ccc8

9000b3dc <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000b3dc:	b580      	push	{r7, lr}
9000b3de:	b090      	sub	sp, #64	@ 0x40
9000b3e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000b3e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b3e6:	2200      	movs	r2, #0
9000b3e8:	601a      	str	r2, [r3, #0]
9000b3ea:	605a      	str	r2, [r3, #4]
9000b3ec:	609a      	str	r2, [r3, #8]
9000b3ee:	60da      	str	r2, [r3, #12]
9000b3f0:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000b3f2:	4b5c      	ldr	r3, [pc, #368]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b3f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b3f8:	4a5a      	ldr	r2, [pc, #360]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b3fa:	f043 0301 	orr.w	r3, r3, #1
9000b3fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b402:	4b58      	ldr	r3, [pc, #352]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b408:	f003 0301 	and.w	r3, r3, #1
9000b40c:	623b      	str	r3, [r7, #32]
9000b40e:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000b410:	4b54      	ldr	r3, [pc, #336]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b416:	4a53      	ldr	r2, [pc, #332]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b418:	f043 0302 	orr.w	r3, r3, #2
9000b41c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b420:	4b50      	ldr	r3, [pc, #320]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b426:	f003 0302 	and.w	r3, r3, #2
9000b42a:	61fb      	str	r3, [r7, #28]
9000b42c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000b42e:	4b4d      	ldr	r3, [pc, #308]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b434:	4a4b      	ldr	r2, [pc, #300]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b436:	f043 0308 	orr.w	r3, r3, #8
9000b43a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b43e:	4b49      	ldr	r3, [pc, #292]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b444:	f003 0308 	and.w	r3, r3, #8
9000b448:	61bb      	str	r3, [r7, #24]
9000b44a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000b44c:	4b45      	ldr	r3, [pc, #276]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b44e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b452:	4a44      	ldr	r2, [pc, #272]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b454:	f043 0310 	orr.w	r3, r3, #16
9000b458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b45c:	4b41      	ldr	r3, [pc, #260]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b462:	f003 0310 	and.w	r3, r3, #16
9000b466:	617b      	str	r3, [r7, #20]
9000b468:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000b46a:	4b3e      	ldr	r3, [pc, #248]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b46c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b470:	4a3c      	ldr	r2, [pc, #240]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b47a:	4b3a      	ldr	r3, [pc, #232]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b47c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b484:	613b      	str	r3, [r7, #16]
9000b486:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000b488:	4b36      	ldr	r3, [pc, #216]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b48a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b48e:	4a35      	ldr	r2, [pc, #212]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000b494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b498:	4b32      	ldr	r3, [pc, #200]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b49a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b49e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b4a2:	60fb      	str	r3, [r7, #12]
9000b4a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000b4a6:	4b2f      	ldr	r3, [pc, #188]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b4a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b4ac:	4a2d      	ldr	r2, [pc, #180]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b4ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b4b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b4b6:	4b2b      	ldr	r3, [pc, #172]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b4b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b4bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000b4c0:	60bb      	str	r3, [r7, #8]
9000b4c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000b4c4:	4b27      	ldr	r3, [pc, #156]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b4c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b4ca:	4a26      	ldr	r2, [pc, #152]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b4cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000b4d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b4d4:	4b23      	ldr	r3, [pc, #140]	@ (9000b564 <InitFlexiKeyboard+0x188>)
9000b4d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b4da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000b4de:	607b      	str	r3, [r7, #4]
9000b4e0:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000b4e2:	2301      	movs	r3, #1
9000b4e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000b4e6:	2300      	movs	r3, #0
9000b4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000b4ea:	2300      	movs	r3, #0
9000b4ec:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000b4ee:	2300      	movs	r3, #0
9000b4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b4f2:	e012      	b.n	9000b51a <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000b4f4:	4a1c      	ldr	r2, [pc, #112]	@ (9000b568 <InitFlexiKeyboard+0x18c>)
9000b4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b4f8:	00db      	lsls	r3, r3, #3
9000b4fa:	4413      	add	r3, r2
9000b4fc:	889b      	ldrh	r3, [r3, #4]
9000b4fe:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000b500:	4a19      	ldr	r2, [pc, #100]	@ (9000b568 <InitFlexiKeyboard+0x18c>)
9000b502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b508:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b50c:	4611      	mov	r1, r2
9000b50e:	4618      	mov	r0, r3
9000b510:	f7f8 f938 	bl	90003784 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000b514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b516:	3301      	adds	r3, #1
9000b518:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b51c:	2b04      	cmp	r3, #4
9000b51e:	dde9      	ble.n	9000b4f4 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000b520:	2300      	movs	r3, #0
9000b522:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000b524:	2302      	movs	r3, #2
9000b526:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000b528:	2300      	movs	r3, #0
9000b52a:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b52c:	e012      	b.n	9000b554 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000b52e:	4a0f      	ldr	r2, [pc, #60]	@ (9000b56c <InitFlexiKeyboard+0x190>)
9000b530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b532:	00db      	lsls	r3, r3, #3
9000b534:	4413      	add	r3, r2
9000b536:	889b      	ldrh	r3, [r3, #4]
9000b538:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000b53a:	4a0c      	ldr	r2, [pc, #48]	@ (9000b56c <InitFlexiKeyboard+0x190>)
9000b53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b53e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b542:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b546:	4611      	mov	r1, r2
9000b548:	4618      	mov	r0, r3
9000b54a:	f7f8 f91b 	bl	90003784 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000b54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b550:	3301      	adds	r3, #1
9000b552:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b556:	2b04      	cmp	r3, #4
9000b558:	dde9      	ble.n	9000b52e <InitFlexiKeyboard+0x152>
	}
}
9000b55a:	bf00      	nop
9000b55c:	bf00      	nop
9000b55e:	3740      	adds	r7, #64	@ 0x40
9000b560:	46bd      	mov	sp, r7
9000b562:	bd80      	pop	{r7, pc}
9000b564:	58024400 	.word	0x58024400
9000b568:	20000018 	.word	0x20000018
9000b56c:	20000040 	.word	0x20000040

9000b570 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000b570:	b580      	push	{r7, lr}
9000b572:	b082      	sub	sp, #8
9000b574:	af00      	add	r7, sp, #0
9000b576:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000b578:	687b      	ldr	r3, [r7, #4]
9000b57a:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000b57e:	1c5a      	adds	r2, r3, #1
9000b580:	687b      	ldr	r3, [r7, #4]
9000b582:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000b586:	6878      	ldr	r0, [r7, #4]
9000b588:	f000 f804 	bl	9000b594 <USBH_HandleSof>
}
9000b58c:	bf00      	nop
9000b58e:	3708      	adds	r7, #8
9000b590:	46bd      	mov	sp, r7
9000b592:	bd80      	pop	{r7, pc}

9000b594 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000b594:	b580      	push	{r7, lr}
9000b596:	b082      	sub	sp, #8
9000b598:	af00      	add	r7, sp, #0
9000b59a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000b59c:	687b      	ldr	r3, [r7, #4]
9000b59e:	781b      	ldrb	r3, [r3, #0]
9000b5a0:	b2db      	uxtb	r3, r3
9000b5a2:	2b0b      	cmp	r3, #11
9000b5a4:	d10a      	bne.n	9000b5bc <USBH_HandleSof+0x28>
9000b5a6:	687b      	ldr	r3, [r7, #4]
9000b5a8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b5ac:	2b00      	cmp	r3, #0
9000b5ae:	d005      	beq.n	9000b5bc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000b5b0:	687b      	ldr	r3, [r7, #4]
9000b5b2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b5b6:	699b      	ldr	r3, [r3, #24]
9000b5b8:	6878      	ldr	r0, [r7, #4]
9000b5ba:	4798      	blx	r3
  }
}
9000b5bc:	bf00      	nop
9000b5be:	3708      	adds	r7, #8
9000b5c0:	46bd      	mov	sp, r7
9000b5c2:	bd80      	pop	{r7, pc}

9000b5c4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000b5c4:	b480      	push	{r7}
9000b5c6:	b083      	sub	sp, #12
9000b5c8:	af00      	add	r7, sp, #0
9000b5ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000b5cc:	687b      	ldr	r3, [r7, #4]
9000b5ce:	2201      	movs	r2, #1
9000b5d0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000b5d4:	bf00      	nop
}
9000b5d6:	370c      	adds	r7, #12
9000b5d8:	46bd      	mov	sp, r7
9000b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b5de:	4770      	bx	lr

9000b5e0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000b5e0:	b480      	push	{r7}
9000b5e2:	b083      	sub	sp, #12
9000b5e4:	af00      	add	r7, sp, #0
9000b5e6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000b5e8:	687b      	ldr	r3, [r7, #4]
9000b5ea:	2200      	movs	r2, #0
9000b5ec:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000b5f0:	687b      	ldr	r3, [r7, #4]
9000b5f2:	2201      	movs	r2, #1
9000b5f4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000b5f8:	bf00      	nop
}
9000b5fa:	370c      	adds	r7, #12
9000b5fc:	46bd      	mov	sp, r7
9000b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b602:	4770      	bx	lr

9000b604 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000b604:	b480      	push	{r7}
9000b606:	b083      	sub	sp, #12
9000b608:	af00      	add	r7, sp, #0
9000b60a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000b60c:	687b      	ldr	r3, [r7, #4]
9000b60e:	2201      	movs	r2, #1
9000b610:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000b614:	687b      	ldr	r3, [r7, #4]
9000b616:	2200      	movs	r2, #0
9000b618:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000b61c:	687b      	ldr	r3, [r7, #4]
9000b61e:	2200      	movs	r2, #0
9000b620:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000b624:	2300      	movs	r3, #0
}
9000b626:	4618      	mov	r0, r3
9000b628:	370c      	adds	r7, #12
9000b62a:	46bd      	mov	sp, r7
9000b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b630:	4770      	bx	lr

9000b632 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000b632:	b580      	push	{r7, lr}
9000b634:	b082      	sub	sp, #8
9000b636:	af00      	add	r7, sp, #0
9000b638:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000b63a:	687b      	ldr	r3, [r7, #4]
9000b63c:	2201      	movs	r2, #1
9000b63e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000b642:	687b      	ldr	r3, [r7, #4]
9000b644:	2200      	movs	r2, #0
9000b646:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000b64a:	687b      	ldr	r3, [r7, #4]
9000b64c:	2200      	movs	r2, #0
9000b64e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000b652:	6878      	ldr	r0, [r7, #4]
9000b654:	f7f5 fc50 	bl	90000ef8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000b658:	687b      	ldr	r3, [r7, #4]
9000b65a:	791b      	ldrb	r3, [r3, #4]
9000b65c:	4619      	mov	r1, r3
9000b65e:	6878      	ldr	r0, [r7, #4]
9000b660:	f000 f80b 	bl	9000b67a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000b664:	687b      	ldr	r3, [r7, #4]
9000b666:	795b      	ldrb	r3, [r3, #5]
9000b668:	4619      	mov	r1, r3
9000b66a:	6878      	ldr	r0, [r7, #4]
9000b66c:	f000 f805 	bl	9000b67a <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000b670:	2300      	movs	r3, #0
}
9000b672:	4618      	mov	r0, r3
9000b674:	3708      	adds	r7, #8
9000b676:	46bd      	mov	sp, r7
9000b678:	bd80      	pop	{r7, pc}

9000b67a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000b67a:	b480      	push	{r7}
9000b67c:	b083      	sub	sp, #12
9000b67e:	af00      	add	r7, sp, #0
9000b680:	6078      	str	r0, [r7, #4]
9000b682:	460b      	mov	r3, r1
9000b684:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000b686:	78fb      	ldrb	r3, [r7, #3]
9000b688:	2b0f      	cmp	r3, #15
9000b68a:	d80f      	bhi.n	9000b6ac <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000b68c:	78fb      	ldrb	r3, [r7, #3]
9000b68e:	687a      	ldr	r2, [r7, #4]
9000b690:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000b694:	009b      	lsls	r3, r3, #2
9000b696:	4413      	add	r3, r2
9000b698:	685a      	ldr	r2, [r3, #4]
9000b69a:	78fb      	ldrb	r3, [r7, #3]
9000b69c:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000b6a0:	6879      	ldr	r1, [r7, #4]
9000b6a2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000b6a6:	009b      	lsls	r3, r3, #2
9000b6a8:	440b      	add	r3, r1
9000b6aa:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000b6ac:	2300      	movs	r3, #0
}
9000b6ae:	4618      	mov	r0, r3
9000b6b0:	370c      	adds	r7, #12
9000b6b2:	46bd      	mov	sp, r7
9000b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b6b8:	4770      	bx	lr
	...

9000b6bc <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000b6bc:	b580      	push	{r7, lr}
9000b6be:	b082      	sub	sp, #8
9000b6c0:	af00      	add	r7, sp, #0
9000b6c2:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000b6c4:	687b      	ldr	r3, [r7, #4]
9000b6c6:	681b      	ldr	r3, [r3, #0]
9000b6c8:	4a22      	ldr	r2, [pc, #136]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6ca:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000b6cc:	687b      	ldr	r3, [r7, #4]
9000b6ce:	685b      	ldr	r3, [r3, #4]
9000b6d0:	4a20      	ldr	r2, [pc, #128]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6d2:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000b6d4:	687b      	ldr	r3, [r7, #4]
9000b6d6:	689b      	ldr	r3, [r3, #8]
9000b6d8:	4a1e      	ldr	r2, [pc, #120]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6da:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000b6dc:	687b      	ldr	r3, [r7, #4]
9000b6de:	68db      	ldr	r3, [r3, #12]
9000b6e0:	4a1c      	ldr	r2, [pc, #112]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6e2:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000b6e4:	687b      	ldr	r3, [r7, #4]
9000b6e6:	691b      	ldr	r3, [r3, #16]
9000b6e8:	4a1a      	ldr	r2, [pc, #104]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6ea:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000b6ec:	687b      	ldr	r3, [r7, #4]
9000b6ee:	695b      	ldr	r3, [r3, #20]
9000b6f0:	4a18      	ldr	r2, [pc, #96]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6f2:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000b6f4:	687b      	ldr	r3, [r7, #4]
9000b6f6:	699b      	ldr	r3, [r3, #24]
9000b6f8:	4a16      	ldr	r2, [pc, #88]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6fa:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000b6fc:	687b      	ldr	r3, [r7, #4]
9000b6fe:	69db      	ldr	r3, [r3, #28]
9000b700:	4a14      	ldr	r2, [pc, #80]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b702:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000b704:	687b      	ldr	r3, [r7, #4]
9000b706:	6a1b      	ldr	r3, [r3, #32]
9000b708:	4a12      	ldr	r2, [pc, #72]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b70a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000b70c:	687b      	ldr	r3, [r7, #4]
9000b70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b710:	4a10      	ldr	r2, [pc, #64]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b712:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000b714:	687b      	ldr	r3, [r7, #4]
9000b716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b718:	4a0e      	ldr	r2, [pc, #56]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b71a:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000b71c:	4b0e      	ldr	r3, [pc, #56]	@ (9000b758 <UTIL_LCD_SetFuncDriver+0x9c>)
9000b71e:	2200      	movs	r2, #0
9000b720:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000b722:	4b0d      	ldr	r3, [pc, #52]	@ (9000b758 <UTIL_LCD_SetFuncDriver+0x9c>)
9000b724:	2200      	movs	r2, #0
9000b726:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000b728:	4b0a      	ldr	r3, [pc, #40]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b72a:	69db      	ldr	r3, [r3, #28]
9000b72c:	4a0b      	ldr	r2, [pc, #44]	@ (9000b75c <UTIL_LCD_SetFuncDriver+0xa0>)
9000b72e:	4611      	mov	r1, r2
9000b730:	2000      	movs	r0, #0
9000b732:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000b734:	4b07      	ldr	r3, [pc, #28]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b736:	6a1b      	ldr	r3, [r3, #32]
9000b738:	4a09      	ldr	r2, [pc, #36]	@ (9000b760 <UTIL_LCD_SetFuncDriver+0xa4>)
9000b73a:	4611      	mov	r1, r2
9000b73c:	2000      	movs	r0, #0
9000b73e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000b740:	4b04      	ldr	r3, [pc, #16]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x98>)
9000b742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b744:	4a07      	ldr	r2, [pc, #28]	@ (9000b764 <UTIL_LCD_SetFuncDriver+0xa8>)
9000b746:	4611      	mov	r1, r2
9000b748:	2000      	movs	r0, #0
9000b74a:	4798      	blx	r3
}
9000b74c:	bf00      	nop
9000b74e:	3708      	adds	r7, #8
9000b750:	46bd      	mov	sp, r7
9000b752:	bd80      	pop	{r7, pc}
9000b754:	2000131c 	.word	0x2000131c
9000b758:	200012dc 	.word	0x200012dc
9000b75c:	200012f0 	.word	0x200012f0
9000b760:	200012f4 	.word	0x200012f4
9000b764:	200012f8 	.word	0x200012f8

9000b768 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000b768:	b580      	push	{r7, lr}
9000b76a:	b082      	sub	sp, #8
9000b76c:	af00      	add	r7, sp, #0
9000b76e:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000b770:	4b0a      	ldr	r3, [pc, #40]	@ (9000b79c <UTIL_LCD_SetLayer+0x34>)
9000b772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b774:	2b00      	cmp	r3, #0
9000b776:	d00c      	beq.n	9000b792 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000b778:	4b08      	ldr	r3, [pc, #32]	@ (9000b79c <UTIL_LCD_SetLayer+0x34>)
9000b77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b77c:	4a08      	ldr	r2, [pc, #32]	@ (9000b7a0 <UTIL_LCD_SetLayer+0x38>)
9000b77e:	6912      	ldr	r2, [r2, #16]
9000b780:	6879      	ldr	r1, [r7, #4]
9000b782:	4610      	mov	r0, r2
9000b784:	4798      	blx	r3
9000b786:	4603      	mov	r3, r0
9000b788:	2b00      	cmp	r3, #0
9000b78a:	d102      	bne.n	9000b792 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000b78c:	4a04      	ldr	r2, [pc, #16]	@ (9000b7a0 <UTIL_LCD_SetLayer+0x38>)
9000b78e:	687b      	ldr	r3, [r7, #4]
9000b790:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000b792:	bf00      	nop
9000b794:	3708      	adds	r7, #8
9000b796:	46bd      	mov	sp, r7
9000b798:	bd80      	pop	{r7, pc}
9000b79a:	bf00      	nop
9000b79c:	2000131c 	.word	0x2000131c
9000b7a0:	200012dc 	.word	0x200012dc

9000b7a4 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000b7a4:	b480      	push	{r7}
9000b7a6:	b083      	sub	sp, #12
9000b7a8:	af00      	add	r7, sp, #0
9000b7aa:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000b7ac:	4b06      	ldr	r3, [pc, #24]	@ (9000b7c8 <UTIL_LCD_SetTextColor+0x24>)
9000b7ae:	68db      	ldr	r3, [r3, #12]
9000b7b0:	4a05      	ldr	r2, [pc, #20]	@ (9000b7c8 <UTIL_LCD_SetTextColor+0x24>)
9000b7b2:	015b      	lsls	r3, r3, #5
9000b7b4:	4413      	add	r3, r2
9000b7b6:	687a      	ldr	r2, [r7, #4]
9000b7b8:	601a      	str	r2, [r3, #0]
}
9000b7ba:	bf00      	nop
9000b7bc:	370c      	adds	r7, #12
9000b7be:	46bd      	mov	sp, r7
9000b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7c4:	4770      	bx	lr
9000b7c6:	bf00      	nop
9000b7c8:	200012dc 	.word	0x200012dc

9000b7cc <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000b7cc:	b480      	push	{r7}
9000b7ce:	b083      	sub	sp, #12
9000b7d0:	af00      	add	r7, sp, #0
9000b7d2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000b7d4:	4b06      	ldr	r3, [pc, #24]	@ (9000b7f0 <UTIL_LCD_SetBackColor+0x24>)
9000b7d6:	68db      	ldr	r3, [r3, #12]
9000b7d8:	4a05      	ldr	r2, [pc, #20]	@ (9000b7f0 <UTIL_LCD_SetBackColor+0x24>)
9000b7da:	015b      	lsls	r3, r3, #5
9000b7dc:	4413      	add	r3, r2
9000b7de:	3304      	adds	r3, #4
9000b7e0:	687a      	ldr	r2, [r7, #4]
9000b7e2:	601a      	str	r2, [r3, #0]
}
9000b7e4:	bf00      	nop
9000b7e6:	370c      	adds	r7, #12
9000b7e8:	46bd      	mov	sp, r7
9000b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7ee:	4770      	bx	lr
9000b7f0:	200012dc 	.word	0x200012dc

9000b7f4 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000b7f4:	b480      	push	{r7}
9000b7f6:	b083      	sub	sp, #12
9000b7f8:	af00      	add	r7, sp, #0
9000b7fa:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000b7fc:	4b06      	ldr	r3, [pc, #24]	@ (9000b818 <UTIL_LCD_SetFont+0x24>)
9000b7fe:	68db      	ldr	r3, [r3, #12]
9000b800:	4a05      	ldr	r2, [pc, #20]	@ (9000b818 <UTIL_LCD_SetFont+0x24>)
9000b802:	015b      	lsls	r3, r3, #5
9000b804:	4413      	add	r3, r2
9000b806:	3308      	adds	r3, #8
9000b808:	687a      	ldr	r2, [r7, #4]
9000b80a:	601a      	str	r2, [r3, #0]
}
9000b80c:	bf00      	nop
9000b80e:	370c      	adds	r7, #12
9000b810:	46bd      	mov	sp, r7
9000b812:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b816:	4770      	bx	lr
9000b818:	200012dc 	.word	0x200012dc

9000b81c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000b81c:	b590      	push	{r4, r7, lr}
9000b81e:	b087      	sub	sp, #28
9000b820:	af02      	add	r7, sp, #8
9000b822:	60f8      	str	r0, [r7, #12]
9000b824:	60b9      	str	r1, [r7, #8]
9000b826:	607a      	str	r2, [r7, #4]
9000b828:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000b82a:	4b08      	ldr	r3, [pc, #32]	@ (9000b84c <UTIL_LCD_FillRGBRect+0x30>)
9000b82c:	685c      	ldr	r4, [r3, #4]
9000b82e:	4b08      	ldr	r3, [pc, #32]	@ (9000b850 <UTIL_LCD_FillRGBRect+0x34>)
9000b830:	6918      	ldr	r0, [r3, #16]
9000b832:	6a3b      	ldr	r3, [r7, #32]
9000b834:	9301      	str	r3, [sp, #4]
9000b836:	683b      	ldr	r3, [r7, #0]
9000b838:	9300      	str	r3, [sp, #0]
9000b83a:	687b      	ldr	r3, [r7, #4]
9000b83c:	68ba      	ldr	r2, [r7, #8]
9000b83e:	68f9      	ldr	r1, [r7, #12]
9000b840:	47a0      	blx	r4
}
9000b842:	bf00      	nop
9000b844:	3714      	adds	r7, #20
9000b846:	46bd      	mov	sp, r7
9000b848:	bd90      	pop	{r4, r7, pc}
9000b84a:	bf00      	nop
9000b84c:	2000131c 	.word	0x2000131c
9000b850:	200012dc 	.word	0x200012dc

9000b854 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000b854:	b580      	push	{r7, lr}
9000b856:	b084      	sub	sp, #16
9000b858:	af02      	add	r7, sp, #8
9000b85a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000b85c:	4b07      	ldr	r3, [pc, #28]	@ (9000b87c <UTIL_LCD_Clear+0x28>)
9000b85e:	695a      	ldr	r2, [r3, #20]
9000b860:	4b06      	ldr	r3, [pc, #24]	@ (9000b87c <UTIL_LCD_Clear+0x28>)
9000b862:	6999      	ldr	r1, [r3, #24]
9000b864:	687b      	ldr	r3, [r7, #4]
9000b866:	9300      	str	r3, [sp, #0]
9000b868:	460b      	mov	r3, r1
9000b86a:	2100      	movs	r1, #0
9000b86c:	2000      	movs	r0, #0
9000b86e:	f000 f8eb 	bl	9000ba48 <UTIL_LCD_FillRect>
}
9000b872:	bf00      	nop
9000b874:	3708      	adds	r7, #8
9000b876:	46bd      	mov	sp, r7
9000b878:	bd80      	pop	{r7, pc}
9000b87a:	bf00      	nop
9000b87c:	200012dc 	.word	0x200012dc

9000b880 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000b880:	b580      	push	{r7, lr}
9000b882:	b084      	sub	sp, #16
9000b884:	af00      	add	r7, sp, #0
9000b886:	60f8      	str	r0, [r7, #12]
9000b888:	60b9      	str	r1, [r7, #8]
9000b88a:	4613      	mov	r3, r2
9000b88c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b88e:	4b16      	ldr	r3, [pc, #88]	@ (9000b8e8 <UTIL_LCD_DisplayChar+0x68>)
9000b890:	68db      	ldr	r3, [r3, #12]
9000b892:	4a15      	ldr	r2, [pc, #84]	@ (9000b8e8 <UTIL_LCD_DisplayChar+0x68>)
9000b894:	015b      	lsls	r3, r3, #5
9000b896:	4413      	add	r3, r2
9000b898:	3308      	adds	r3, #8
9000b89a:	681b      	ldr	r3, [r3, #0]
9000b89c:	681a      	ldr	r2, [r3, #0]
9000b89e:	79fb      	ldrb	r3, [r7, #7]
9000b8a0:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b8a2:	4911      	ldr	r1, [pc, #68]	@ (9000b8e8 <UTIL_LCD_DisplayChar+0x68>)
9000b8a4:	68c9      	ldr	r1, [r1, #12]
9000b8a6:	4810      	ldr	r0, [pc, #64]	@ (9000b8e8 <UTIL_LCD_DisplayChar+0x68>)
9000b8a8:	0149      	lsls	r1, r1, #5
9000b8aa:	4401      	add	r1, r0
9000b8ac:	3108      	adds	r1, #8
9000b8ae:	6809      	ldr	r1, [r1, #0]
9000b8b0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b8b2:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b8b6:	4b0c      	ldr	r3, [pc, #48]	@ (9000b8e8 <UTIL_LCD_DisplayChar+0x68>)
9000b8b8:	68db      	ldr	r3, [r3, #12]
9000b8ba:	480b      	ldr	r0, [pc, #44]	@ (9000b8e8 <UTIL_LCD_DisplayChar+0x68>)
9000b8bc:	015b      	lsls	r3, r3, #5
9000b8be:	4403      	add	r3, r0
9000b8c0:	3308      	adds	r3, #8
9000b8c2:	681b      	ldr	r3, [r3, #0]
9000b8c4:	889b      	ldrh	r3, [r3, #4]
9000b8c6:	3307      	adds	r3, #7
9000b8c8:	2b00      	cmp	r3, #0
9000b8ca:	da00      	bge.n	9000b8ce <UTIL_LCD_DisplayChar+0x4e>
9000b8cc:	3307      	adds	r3, #7
9000b8ce:	10db      	asrs	r3, r3, #3
9000b8d0:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b8d4:	4413      	add	r3, r2
9000b8d6:	461a      	mov	r2, r3
9000b8d8:	68b9      	ldr	r1, [r7, #8]
9000b8da:	68f8      	ldr	r0, [r7, #12]
9000b8dc:	f000 f8ee 	bl	9000babc <DrawChar>
}
9000b8e0:	bf00      	nop
9000b8e2:	3710      	adds	r7, #16
9000b8e4:	46bd      	mov	sp, r7
9000b8e6:	bd80      	pop	{r7, pc}
9000b8e8:	200012dc 	.word	0x200012dc

9000b8ec <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000b8ec:	b580      	push	{r7, lr}
9000b8ee:	b08a      	sub	sp, #40	@ 0x28
9000b8f0:	af00      	add	r7, sp, #0
9000b8f2:	60f8      	str	r0, [r7, #12]
9000b8f4:	60b9      	str	r1, [r7, #8]
9000b8f6:	607a      	str	r2, [r7, #4]
9000b8f8:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000b8fa:	2301      	movs	r3, #1
9000b8fc:	627b      	str	r3, [r7, #36]	@ 0x24
9000b8fe:	2300      	movs	r3, #0
9000b900:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000b902:	2300      	movs	r3, #0
9000b904:	61fb      	str	r3, [r7, #28]
9000b906:	2300      	movs	r3, #0
9000b908:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000b90a:	687b      	ldr	r3, [r7, #4]
9000b90c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000b90e:	e002      	b.n	9000b916 <UTIL_LCD_DisplayStringAt+0x2a>
9000b910:	69fb      	ldr	r3, [r7, #28]
9000b912:	3301      	adds	r3, #1
9000b914:	61fb      	str	r3, [r7, #28]
9000b916:	69bb      	ldr	r3, [r7, #24]
9000b918:	1c5a      	adds	r2, r3, #1
9000b91a:	61ba      	str	r2, [r7, #24]
9000b91c:	781b      	ldrb	r3, [r3, #0]
9000b91e:	2b00      	cmp	r3, #0
9000b920:	d1f6      	bne.n	9000b910 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b922:	4b48      	ldr	r3, [pc, #288]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b924:	695b      	ldr	r3, [r3, #20]
9000b926:	4a47      	ldr	r2, [pc, #284]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b928:	68d2      	ldr	r2, [r2, #12]
9000b92a:	4946      	ldr	r1, [pc, #280]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b92c:	0152      	lsls	r2, r2, #5
9000b92e:	440a      	add	r2, r1
9000b930:	3208      	adds	r2, #8
9000b932:	6812      	ldr	r2, [r2, #0]
9000b934:	8892      	ldrh	r2, [r2, #4]
9000b936:	fbb3 f3f2 	udiv	r3, r3, r2
9000b93a:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000b93c:	78fb      	ldrb	r3, [r7, #3]
9000b93e:	2b03      	cmp	r3, #3
9000b940:	d018      	beq.n	9000b974 <UTIL_LCD_DisplayStringAt+0x88>
9000b942:	2b03      	cmp	r3, #3
9000b944:	dc2a      	bgt.n	9000b99c <UTIL_LCD_DisplayStringAt+0xb0>
9000b946:	2b01      	cmp	r3, #1
9000b948:	d002      	beq.n	9000b950 <UTIL_LCD_DisplayStringAt+0x64>
9000b94a:	2b02      	cmp	r3, #2
9000b94c:	d015      	beq.n	9000b97a <UTIL_LCD_DisplayStringAt+0x8e>
9000b94e:	e025      	b.n	9000b99c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000b950:	697a      	ldr	r2, [r7, #20]
9000b952:	69fb      	ldr	r3, [r7, #28]
9000b954:	1ad3      	subs	r3, r2, r3
9000b956:	4a3b      	ldr	r2, [pc, #236]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b958:	68d2      	ldr	r2, [r2, #12]
9000b95a:	493a      	ldr	r1, [pc, #232]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b95c:	0152      	lsls	r2, r2, #5
9000b95e:	440a      	add	r2, r1
9000b960:	3208      	adds	r2, #8
9000b962:	6812      	ldr	r2, [r2, #0]
9000b964:	8892      	ldrh	r2, [r2, #4]
9000b966:	fb02 f303 	mul.w	r3, r2, r3
9000b96a:	085b      	lsrs	r3, r3, #1
9000b96c:	68fa      	ldr	r2, [r7, #12]
9000b96e:	4413      	add	r3, r2
9000b970:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b972:	e016      	b.n	9000b9a2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000b974:	68fb      	ldr	r3, [r7, #12]
9000b976:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b978:	e013      	b.n	9000b9a2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b97a:	697a      	ldr	r2, [r7, #20]
9000b97c:	69fb      	ldr	r3, [r7, #28]
9000b97e:	1ad3      	subs	r3, r2, r3
9000b980:	4a30      	ldr	r2, [pc, #192]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b982:	68d2      	ldr	r2, [r2, #12]
9000b984:	492f      	ldr	r1, [pc, #188]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b986:	0152      	lsls	r2, r2, #5
9000b988:	440a      	add	r2, r1
9000b98a:	3208      	adds	r2, #8
9000b98c:	6812      	ldr	r2, [r2, #0]
9000b98e:	8892      	ldrh	r2, [r2, #4]
9000b990:	fb03 f202 	mul.w	r2, r3, r2
9000b994:	68fb      	ldr	r3, [r7, #12]
9000b996:	1ad3      	subs	r3, r2, r3
9000b998:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b99a:	e002      	b.n	9000b9a2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000b99c:	68fb      	ldr	r3, [r7, #12]
9000b99e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b9a0:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000b9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b9a4:	2b00      	cmp	r3, #0
9000b9a6:	d003      	beq.n	9000b9b0 <UTIL_LCD_DisplayStringAt+0xc4>
9000b9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b9aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000b9ae:	d31b      	bcc.n	9000b9e8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000b9b0:	2301      	movs	r3, #1
9000b9b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b9b4:	e018      	b.n	9000b9e8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000b9b6:	687b      	ldr	r3, [r7, #4]
9000b9b8:	781b      	ldrb	r3, [r3, #0]
9000b9ba:	461a      	mov	r2, r3
9000b9bc:	68b9      	ldr	r1, [r7, #8]
9000b9be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000b9c0:	f7ff ff5e 	bl	9000b880 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000b9c4:	4b1f      	ldr	r3, [pc, #124]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9c6:	68db      	ldr	r3, [r3, #12]
9000b9c8:	4a1e      	ldr	r2, [pc, #120]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9ca:	015b      	lsls	r3, r3, #5
9000b9cc:	4413      	add	r3, r2
9000b9ce:	3308      	adds	r3, #8
9000b9d0:	681b      	ldr	r3, [r3, #0]
9000b9d2:	889b      	ldrh	r3, [r3, #4]
9000b9d4:	461a      	mov	r2, r3
9000b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b9d8:	4413      	add	r3, r2
9000b9da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000b9dc:	687b      	ldr	r3, [r7, #4]
9000b9de:	3301      	adds	r3, #1
9000b9e0:	607b      	str	r3, [r7, #4]
    i++;
9000b9e2:	6a3b      	ldr	r3, [r7, #32]
9000b9e4:	3301      	adds	r3, #1
9000b9e6:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b9e8:	687b      	ldr	r3, [r7, #4]
9000b9ea:	781b      	ldrb	r3, [r3, #0]
9000b9ec:	2b00      	cmp	r3, #0
9000b9ee:	bf14      	ite	ne
9000b9f0:	2301      	movne	r3, #1
9000b9f2:	2300      	moveq	r3, #0
9000b9f4:	b2da      	uxtb	r2, r3
9000b9f6:	4b13      	ldr	r3, [pc, #76]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9f8:	6959      	ldr	r1, [r3, #20]
9000b9fa:	4b12      	ldr	r3, [pc, #72]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9fc:	68db      	ldr	r3, [r3, #12]
9000b9fe:	4811      	ldr	r0, [pc, #68]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000ba00:	015b      	lsls	r3, r3, #5
9000ba02:	4403      	add	r3, r0
9000ba04:	3308      	adds	r3, #8
9000ba06:	681b      	ldr	r3, [r3, #0]
9000ba08:	889b      	ldrh	r3, [r3, #4]
9000ba0a:	4618      	mov	r0, r3
9000ba0c:	6a3b      	ldr	r3, [r7, #32]
9000ba0e:	fb00 f303 	mul.w	r3, r0, r3
9000ba12:	1acb      	subs	r3, r1, r3
9000ba14:	b29b      	uxth	r3, r3
9000ba16:	490b      	ldr	r1, [pc, #44]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000ba18:	68c9      	ldr	r1, [r1, #12]
9000ba1a:	480a      	ldr	r0, [pc, #40]	@ (9000ba44 <UTIL_LCD_DisplayStringAt+0x158>)
9000ba1c:	0149      	lsls	r1, r1, #5
9000ba1e:	4401      	add	r1, r0
9000ba20:	3108      	adds	r1, #8
9000ba22:	6809      	ldr	r1, [r1, #0]
9000ba24:	8889      	ldrh	r1, [r1, #4]
9000ba26:	428b      	cmp	r3, r1
9000ba28:	bf2c      	ite	cs
9000ba2a:	2301      	movcs	r3, #1
9000ba2c:	2300      	movcc	r3, #0
9000ba2e:	b2db      	uxtb	r3, r3
9000ba30:	4013      	ands	r3, r2
9000ba32:	b2db      	uxtb	r3, r3
9000ba34:	2b00      	cmp	r3, #0
9000ba36:	d1be      	bne.n	9000b9b6 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000ba38:	bf00      	nop
9000ba3a:	bf00      	nop
9000ba3c:	3728      	adds	r7, #40	@ 0x28
9000ba3e:	46bd      	mov	sp, r7
9000ba40:	bd80      	pop	{r7, pc}
9000ba42:	bf00      	nop
9000ba44:	200012dc 	.word	0x200012dc

9000ba48 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000ba48:	b590      	push	{r4, r7, lr}
9000ba4a:	b087      	sub	sp, #28
9000ba4c:	af02      	add	r7, sp, #8
9000ba4e:	60f8      	str	r0, [r7, #12]
9000ba50:	60b9      	str	r1, [r7, #8]
9000ba52:	607a      	str	r2, [r7, #4]
9000ba54:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000ba56:	4b17      	ldr	r3, [pc, #92]	@ (9000bab4 <UTIL_LCD_FillRect+0x6c>)
9000ba58:	69db      	ldr	r3, [r3, #28]
9000ba5a:	2b02      	cmp	r3, #2
9000ba5c:	d11a      	bne.n	9000ba94 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000ba5e:	4b16      	ldr	r3, [pc, #88]	@ (9000bab8 <UTIL_LCD_FillRect+0x70>)
9000ba60:	691c      	ldr	r4, [r3, #16]
9000ba62:	4b14      	ldr	r3, [pc, #80]	@ (9000bab4 <UTIL_LCD_FillRect+0x6c>)
9000ba64:	6918      	ldr	r0, [r3, #16]
9000ba66:	6a3b      	ldr	r3, [r7, #32]
9000ba68:	08db      	lsrs	r3, r3, #3
9000ba6a:	f003 021f 	and.w	r2, r3, #31
9000ba6e:	6a3b      	ldr	r3, [r7, #32]
9000ba70:	0a9b      	lsrs	r3, r3, #10
9000ba72:	015b      	lsls	r3, r3, #5
9000ba74:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000ba78:	431a      	orrs	r2, r3
9000ba7a:	6a3b      	ldr	r3, [r7, #32]
9000ba7c:	0cdb      	lsrs	r3, r3, #19
9000ba7e:	02db      	lsls	r3, r3, #11
9000ba80:	b29b      	uxth	r3, r3
9000ba82:	4313      	orrs	r3, r2
9000ba84:	9301      	str	r3, [sp, #4]
9000ba86:	683b      	ldr	r3, [r7, #0]
9000ba88:	9300      	str	r3, [sp, #0]
9000ba8a:	687b      	ldr	r3, [r7, #4]
9000ba8c:	68ba      	ldr	r2, [r7, #8]
9000ba8e:	68f9      	ldr	r1, [r7, #12]
9000ba90:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000ba92:	e00b      	b.n	9000baac <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000ba94:	4b08      	ldr	r3, [pc, #32]	@ (9000bab8 <UTIL_LCD_FillRect+0x70>)
9000ba96:	691c      	ldr	r4, [r3, #16]
9000ba98:	4b06      	ldr	r3, [pc, #24]	@ (9000bab4 <UTIL_LCD_FillRect+0x6c>)
9000ba9a:	6918      	ldr	r0, [r3, #16]
9000ba9c:	6a3b      	ldr	r3, [r7, #32]
9000ba9e:	9301      	str	r3, [sp, #4]
9000baa0:	683b      	ldr	r3, [r7, #0]
9000baa2:	9300      	str	r3, [sp, #0]
9000baa4:	687b      	ldr	r3, [r7, #4]
9000baa6:	68ba      	ldr	r2, [r7, #8]
9000baa8:	68f9      	ldr	r1, [r7, #12]
9000baaa:	47a0      	blx	r4
}
9000baac:	bf00      	nop
9000baae:	3714      	adds	r7, #20
9000bab0:	46bd      	mov	sp, r7
9000bab2:	bd90      	pop	{r4, r7, pc}
9000bab4:	200012dc 	.word	0x200012dc
9000bab8:	2000131c 	.word	0x2000131c

9000babc <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000babc:	b580      	push	{r7, lr}
9000babe:	b0b2      	sub	sp, #200	@ 0xc8
9000bac0:	af02      	add	r7, sp, #8
9000bac2:	60f8      	str	r0, [r7, #12]
9000bac4:	60b9      	str	r1, [r7, #8]
9000bac6:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000bac8:	2300      	movs	r3, #0
9000baca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bace:	2300      	movs	r3, #0
9000bad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bad4:	4ba5      	ldr	r3, [pc, #660]	@ (9000bd6c <DrawChar+0x2b0>)
9000bad6:	68db      	ldr	r3, [r3, #12]
9000bad8:	4aa4      	ldr	r2, [pc, #656]	@ (9000bd6c <DrawChar+0x2b0>)
9000bada:	015b      	lsls	r3, r3, #5
9000badc:	4413      	add	r3, r2
9000bade:	3308      	adds	r3, #8
9000bae0:	681b      	ldr	r3, [r3, #0]
9000bae2:	88db      	ldrh	r3, [r3, #6]
9000bae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bae8:	4ba0      	ldr	r3, [pc, #640]	@ (9000bd6c <DrawChar+0x2b0>)
9000baea:	68db      	ldr	r3, [r3, #12]
9000baec:	4a9f      	ldr	r2, [pc, #636]	@ (9000bd6c <DrawChar+0x2b0>)
9000baee:	015b      	lsls	r3, r3, #5
9000baf0:	4413      	add	r3, r2
9000baf2:	3308      	adds	r3, #8
9000baf4:	681b      	ldr	r3, [r3, #0]
9000baf6:	889b      	ldrh	r3, [r3, #4]
9000baf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000bafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb00:	3307      	adds	r3, #7
9000bb02:	f023 0207 	bic.w	r2, r3, #7
9000bb06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb0a:	1ad3      	subs	r3, r2, r3
9000bb0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000bb10:	2300      	movs	r3, #0
9000bb12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bb16:	e11c      	b.n	9000bd52 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000bb18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb1c:	3307      	adds	r3, #7
9000bb1e:	08db      	lsrs	r3, r3, #3
9000bb20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bb24:	fb02 f303 	mul.w	r3, r2, r3
9000bb28:	687a      	ldr	r2, [r7, #4]
9000bb2a:	4413      	add	r3, r2
9000bb2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000bb30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb34:	3307      	adds	r3, #7
9000bb36:	08db      	lsrs	r3, r3, #3
9000bb38:	2b01      	cmp	r3, #1
9000bb3a:	d002      	beq.n	9000bb42 <DrawChar+0x86>
9000bb3c:	2b02      	cmp	r3, #2
9000bb3e:	d006      	beq.n	9000bb4e <DrawChar+0x92>
9000bb40:	e011      	b.n	9000bb66 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000bb42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb46:	781b      	ldrb	r3, [r3, #0]
9000bb48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb4c:	e01d      	b.n	9000bb8a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000bb4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb52:	781b      	ldrb	r3, [r3, #0]
9000bb54:	021b      	lsls	r3, r3, #8
9000bb56:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bb5a:	3201      	adds	r2, #1
9000bb5c:	7812      	ldrb	r2, [r2, #0]
9000bb5e:	4313      	orrs	r3, r2
9000bb60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb64:	e011      	b.n	9000bb8a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000bb66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb6a:	781b      	ldrb	r3, [r3, #0]
9000bb6c:	041a      	lsls	r2, r3, #16
9000bb6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb72:	3301      	adds	r3, #1
9000bb74:	781b      	ldrb	r3, [r3, #0]
9000bb76:	021b      	lsls	r3, r3, #8
9000bb78:	4313      	orrs	r3, r2
9000bb7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bb7e:	3202      	adds	r2, #2
9000bb80:	7812      	ldrb	r2, [r2, #0]
9000bb82:	4313      	orrs	r3, r2
9000bb84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb88:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bb8a:	4b78      	ldr	r3, [pc, #480]	@ (9000bd6c <DrawChar+0x2b0>)
9000bb8c:	68db      	ldr	r3, [r3, #12]
9000bb8e:	4a77      	ldr	r2, [pc, #476]	@ (9000bd6c <DrawChar+0x2b0>)
9000bb90:	015b      	lsls	r3, r3, #5
9000bb92:	4413      	add	r3, r2
9000bb94:	331c      	adds	r3, #28
9000bb96:	681b      	ldr	r3, [r3, #0]
9000bb98:	2b02      	cmp	r3, #2
9000bb9a:	f040 808c 	bne.w	9000bcb6 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000bb9e:	2300      	movs	r3, #0
9000bba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bba4:	e074      	b.n	9000bc90 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bba6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bbaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bbae:	1ad2      	subs	r2, r2, r3
9000bbb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bbb4:	4413      	add	r3, r2
9000bbb6:	3b01      	subs	r3, #1
9000bbb8:	2201      	movs	r2, #1
9000bbba:	fa02 f303 	lsl.w	r3, r2, r3
9000bbbe:	461a      	mov	r2, r3
9000bbc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000bbc4:	4013      	ands	r3, r2
9000bbc6:	2b00      	cmp	r3, #0
9000bbc8:	d02d      	beq.n	9000bc26 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000bbca:	4b68      	ldr	r3, [pc, #416]	@ (9000bd6c <DrawChar+0x2b0>)
9000bbcc:	68db      	ldr	r3, [r3, #12]
9000bbce:	4a67      	ldr	r2, [pc, #412]	@ (9000bd6c <DrawChar+0x2b0>)
9000bbd0:	015b      	lsls	r3, r3, #5
9000bbd2:	4413      	add	r3, r2
9000bbd4:	681b      	ldr	r3, [r3, #0]
9000bbd6:	08db      	lsrs	r3, r3, #3
9000bbd8:	b29b      	uxth	r3, r3
9000bbda:	f003 031f 	and.w	r3, r3, #31
9000bbde:	b29a      	uxth	r2, r3
9000bbe0:	4b62      	ldr	r3, [pc, #392]	@ (9000bd6c <DrawChar+0x2b0>)
9000bbe2:	68db      	ldr	r3, [r3, #12]
9000bbe4:	4961      	ldr	r1, [pc, #388]	@ (9000bd6c <DrawChar+0x2b0>)
9000bbe6:	015b      	lsls	r3, r3, #5
9000bbe8:	440b      	add	r3, r1
9000bbea:	681b      	ldr	r3, [r3, #0]
9000bbec:	0a9b      	lsrs	r3, r3, #10
9000bbee:	b29b      	uxth	r3, r3
9000bbf0:	015b      	lsls	r3, r3, #5
9000bbf2:	b29b      	uxth	r3, r3
9000bbf4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bbf8:	b29b      	uxth	r3, r3
9000bbfa:	4313      	orrs	r3, r2
9000bbfc:	b29a      	uxth	r2, r3
9000bbfe:	4b5b      	ldr	r3, [pc, #364]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc00:	68db      	ldr	r3, [r3, #12]
9000bc02:	495a      	ldr	r1, [pc, #360]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc04:	015b      	lsls	r3, r3, #5
9000bc06:	440b      	add	r3, r1
9000bc08:	681b      	ldr	r3, [r3, #0]
9000bc0a:	0cdb      	lsrs	r3, r3, #19
9000bc0c:	b29b      	uxth	r3, r3
9000bc0e:	02db      	lsls	r3, r3, #11
9000bc10:	b29b      	uxth	r3, r3
9000bc12:	4313      	orrs	r3, r2
9000bc14:	b29a      	uxth	r2, r3
9000bc16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc1a:	005b      	lsls	r3, r3, #1
9000bc1c:	33c0      	adds	r3, #192	@ 0xc0
9000bc1e:	443b      	add	r3, r7
9000bc20:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000bc24:	e02f      	b.n	9000bc86 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000bc26:	4b51      	ldr	r3, [pc, #324]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc28:	68db      	ldr	r3, [r3, #12]
9000bc2a:	4a50      	ldr	r2, [pc, #320]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc2c:	015b      	lsls	r3, r3, #5
9000bc2e:	4413      	add	r3, r2
9000bc30:	3304      	adds	r3, #4
9000bc32:	681b      	ldr	r3, [r3, #0]
9000bc34:	08db      	lsrs	r3, r3, #3
9000bc36:	b29b      	uxth	r3, r3
9000bc38:	f003 031f 	and.w	r3, r3, #31
9000bc3c:	b29a      	uxth	r2, r3
9000bc3e:	4b4b      	ldr	r3, [pc, #300]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc40:	68db      	ldr	r3, [r3, #12]
9000bc42:	494a      	ldr	r1, [pc, #296]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc44:	015b      	lsls	r3, r3, #5
9000bc46:	440b      	add	r3, r1
9000bc48:	3304      	adds	r3, #4
9000bc4a:	681b      	ldr	r3, [r3, #0]
9000bc4c:	0a9b      	lsrs	r3, r3, #10
9000bc4e:	b29b      	uxth	r3, r3
9000bc50:	015b      	lsls	r3, r3, #5
9000bc52:	b29b      	uxth	r3, r3
9000bc54:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bc58:	b29b      	uxth	r3, r3
9000bc5a:	4313      	orrs	r3, r2
9000bc5c:	b29a      	uxth	r2, r3
9000bc5e:	4b43      	ldr	r3, [pc, #268]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc60:	68db      	ldr	r3, [r3, #12]
9000bc62:	4942      	ldr	r1, [pc, #264]	@ (9000bd6c <DrawChar+0x2b0>)
9000bc64:	015b      	lsls	r3, r3, #5
9000bc66:	440b      	add	r3, r1
9000bc68:	3304      	adds	r3, #4
9000bc6a:	681b      	ldr	r3, [r3, #0]
9000bc6c:	0cdb      	lsrs	r3, r3, #19
9000bc6e:	b29b      	uxth	r3, r3
9000bc70:	02db      	lsls	r3, r3, #11
9000bc72:	b29b      	uxth	r3, r3
9000bc74:	4313      	orrs	r3, r2
9000bc76:	b29a      	uxth	r2, r3
9000bc78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc7c:	005b      	lsls	r3, r3, #1
9000bc7e:	33c0      	adds	r3, #192	@ 0xc0
9000bc80:	443b      	add	r3, r7
9000bc82:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000bc86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc8a:	3301      	adds	r3, #1
9000bc8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bc90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000bc94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bc98:	429a      	cmp	r2, r3
9000bc9a:	d384      	bcc.n	9000bba6 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000bc9c:	68b9      	ldr	r1, [r7, #8]
9000bc9e:	1c4b      	adds	r3, r1, #1
9000bca0:	60bb      	str	r3, [r7, #8]
9000bca2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000bca6:	2301      	movs	r3, #1
9000bca8:	9300      	str	r3, [sp, #0]
9000bcaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bcae:	68f8      	ldr	r0, [r7, #12]
9000bcb0:	f7ff fdb4 	bl	9000b81c <UTIL_LCD_FillRGBRect>
9000bcb4:	e048      	b.n	9000bd48 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000bcb6:	2300      	movs	r3, #0
9000bcb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bcbc:	e032      	b.n	9000bd24 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bcbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bcc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bcc6:	1ad2      	subs	r2, r2, r3
9000bcc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bccc:	4413      	add	r3, r2
9000bcce:	3b01      	subs	r3, #1
9000bcd0:	2201      	movs	r2, #1
9000bcd2:	fa02 f303 	lsl.w	r3, r2, r3
9000bcd6:	461a      	mov	r2, r3
9000bcd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000bcdc:	4013      	ands	r3, r2
9000bcde:	2b00      	cmp	r3, #0
9000bce0:	d00d      	beq.n	9000bcfe <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000bce2:	4b22      	ldr	r3, [pc, #136]	@ (9000bd6c <DrawChar+0x2b0>)
9000bce4:	68db      	ldr	r3, [r3, #12]
9000bce6:	4a21      	ldr	r2, [pc, #132]	@ (9000bd6c <DrawChar+0x2b0>)
9000bce8:	015b      	lsls	r3, r3, #5
9000bcea:	4413      	add	r3, r2
9000bcec:	681a      	ldr	r2, [r3, #0]
9000bcee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bcf2:	009b      	lsls	r3, r3, #2
9000bcf4:	33c0      	adds	r3, #192	@ 0xc0
9000bcf6:	443b      	add	r3, r7
9000bcf8:	f843 2cac 	str.w	r2, [r3, #-172]
9000bcfc:	e00d      	b.n	9000bd1a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000bcfe:	4b1b      	ldr	r3, [pc, #108]	@ (9000bd6c <DrawChar+0x2b0>)
9000bd00:	68db      	ldr	r3, [r3, #12]
9000bd02:	4a1a      	ldr	r2, [pc, #104]	@ (9000bd6c <DrawChar+0x2b0>)
9000bd04:	015b      	lsls	r3, r3, #5
9000bd06:	4413      	add	r3, r2
9000bd08:	3304      	adds	r3, #4
9000bd0a:	681a      	ldr	r2, [r3, #0]
9000bd0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bd10:	009b      	lsls	r3, r3, #2
9000bd12:	33c0      	adds	r3, #192	@ 0xc0
9000bd14:	443b      	add	r3, r7
9000bd16:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000bd1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bd1e:	3301      	adds	r3, #1
9000bd20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bd24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000bd28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bd2c:	429a      	cmp	r2, r3
9000bd2e:	d3c6      	bcc.n	9000bcbe <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000bd30:	68b9      	ldr	r1, [r7, #8]
9000bd32:	1c4b      	adds	r3, r1, #1
9000bd34:	60bb      	str	r3, [r7, #8]
9000bd36:	f107 0214 	add.w	r2, r7, #20
9000bd3a:	2301      	movs	r3, #1
9000bd3c:	9300      	str	r3, [sp, #0]
9000bd3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bd42:	68f8      	ldr	r0, [r7, #12]
9000bd44:	f7ff fd6a 	bl	9000b81c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000bd48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000bd4c:	3301      	adds	r3, #1
9000bd4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bd52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bd56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000bd5a:	429a      	cmp	r2, r3
9000bd5c:	f4ff aedc 	bcc.w	9000bb18 <DrawChar+0x5c>
    }
  }
}
9000bd60:	bf00      	nop
9000bd62:	bf00      	nop
9000bd64:	37c0      	adds	r7, #192	@ 0xc0
9000bd66:	46bd      	mov	sp, r7
9000bd68:	bd80      	pop	{r7, pc}
9000bd6a:	bf00      	nop
9000bd6c:	200012dc 	.word	0x200012dc

9000bd70 <sbrk_aligned>:
9000bd70:	b570      	push	{r4, r5, r6, lr}
9000bd72:	4e0f      	ldr	r6, [pc, #60]	@ (9000bdb0 <sbrk_aligned+0x40>)
9000bd74:	460c      	mov	r4, r1
9000bd76:	6831      	ldr	r1, [r6, #0]
9000bd78:	4605      	mov	r5, r0
9000bd7a:	b911      	cbnz	r1, 9000bd82 <sbrk_aligned+0x12>
9000bd7c:	f000 faec 	bl	9000c358 <_sbrk_r>
9000bd80:	6030      	str	r0, [r6, #0]
9000bd82:	4621      	mov	r1, r4
9000bd84:	4628      	mov	r0, r5
9000bd86:	f000 fae7 	bl	9000c358 <_sbrk_r>
9000bd8a:	1c43      	adds	r3, r0, #1
9000bd8c:	d103      	bne.n	9000bd96 <sbrk_aligned+0x26>
9000bd8e:	f04f 34ff 	mov.w	r4, #4294967295
9000bd92:	4620      	mov	r0, r4
9000bd94:	bd70      	pop	{r4, r5, r6, pc}
9000bd96:	1cc4      	adds	r4, r0, #3
9000bd98:	f024 0403 	bic.w	r4, r4, #3
9000bd9c:	42a0      	cmp	r0, r4
9000bd9e:	d0f8      	beq.n	9000bd92 <sbrk_aligned+0x22>
9000bda0:	1a21      	subs	r1, r4, r0
9000bda2:	4628      	mov	r0, r5
9000bda4:	f000 fad8 	bl	9000c358 <_sbrk_r>
9000bda8:	3001      	adds	r0, #1
9000bdaa:	d1f2      	bne.n	9000bd92 <sbrk_aligned+0x22>
9000bdac:	e7ef      	b.n	9000bd8e <sbrk_aligned+0x1e>
9000bdae:	bf00      	nop
9000bdb0:	20001348 	.word	0x20001348

9000bdb4 <_malloc_r>:
9000bdb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000bdb8:	1ccd      	adds	r5, r1, #3
9000bdba:	f025 0503 	bic.w	r5, r5, #3
9000bdbe:	3508      	adds	r5, #8
9000bdc0:	2d0c      	cmp	r5, #12
9000bdc2:	bf38      	it	cc
9000bdc4:	250c      	movcc	r5, #12
9000bdc6:	2d00      	cmp	r5, #0
9000bdc8:	4606      	mov	r6, r0
9000bdca:	db01      	blt.n	9000bdd0 <_malloc_r+0x1c>
9000bdcc:	42a9      	cmp	r1, r5
9000bdce:	d904      	bls.n	9000bdda <_malloc_r+0x26>
9000bdd0:	230c      	movs	r3, #12
9000bdd2:	6033      	str	r3, [r6, #0]
9000bdd4:	2000      	movs	r0, #0
9000bdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000bdda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000beb0 <_malloc_r+0xfc>
9000bdde:	f000 f869 	bl	9000beb4 <__malloc_lock>
9000bde2:	f8d8 3000 	ldr.w	r3, [r8]
9000bde6:	461c      	mov	r4, r3
9000bde8:	bb44      	cbnz	r4, 9000be3c <_malloc_r+0x88>
9000bdea:	4629      	mov	r1, r5
9000bdec:	4630      	mov	r0, r6
9000bdee:	f7ff ffbf 	bl	9000bd70 <sbrk_aligned>
9000bdf2:	1c43      	adds	r3, r0, #1
9000bdf4:	4604      	mov	r4, r0
9000bdf6:	d158      	bne.n	9000beaa <_malloc_r+0xf6>
9000bdf8:	f8d8 4000 	ldr.w	r4, [r8]
9000bdfc:	4627      	mov	r7, r4
9000bdfe:	2f00      	cmp	r7, #0
9000be00:	d143      	bne.n	9000be8a <_malloc_r+0xd6>
9000be02:	2c00      	cmp	r4, #0
9000be04:	d04b      	beq.n	9000be9e <_malloc_r+0xea>
9000be06:	6823      	ldr	r3, [r4, #0]
9000be08:	4639      	mov	r1, r7
9000be0a:	4630      	mov	r0, r6
9000be0c:	eb04 0903 	add.w	r9, r4, r3
9000be10:	f000 faa2 	bl	9000c358 <_sbrk_r>
9000be14:	4581      	cmp	r9, r0
9000be16:	d142      	bne.n	9000be9e <_malloc_r+0xea>
9000be18:	6821      	ldr	r1, [r4, #0]
9000be1a:	1a6d      	subs	r5, r5, r1
9000be1c:	4629      	mov	r1, r5
9000be1e:	4630      	mov	r0, r6
9000be20:	f7ff ffa6 	bl	9000bd70 <sbrk_aligned>
9000be24:	3001      	adds	r0, #1
9000be26:	d03a      	beq.n	9000be9e <_malloc_r+0xea>
9000be28:	6823      	ldr	r3, [r4, #0]
9000be2a:	442b      	add	r3, r5
9000be2c:	6023      	str	r3, [r4, #0]
9000be2e:	f8d8 3000 	ldr.w	r3, [r8]
9000be32:	685a      	ldr	r2, [r3, #4]
9000be34:	bb62      	cbnz	r2, 9000be90 <_malloc_r+0xdc>
9000be36:	f8c8 7000 	str.w	r7, [r8]
9000be3a:	e00f      	b.n	9000be5c <_malloc_r+0xa8>
9000be3c:	6822      	ldr	r2, [r4, #0]
9000be3e:	1b52      	subs	r2, r2, r5
9000be40:	d420      	bmi.n	9000be84 <_malloc_r+0xd0>
9000be42:	2a0b      	cmp	r2, #11
9000be44:	d917      	bls.n	9000be76 <_malloc_r+0xc2>
9000be46:	1961      	adds	r1, r4, r5
9000be48:	42a3      	cmp	r3, r4
9000be4a:	6025      	str	r5, [r4, #0]
9000be4c:	bf18      	it	ne
9000be4e:	6059      	strne	r1, [r3, #4]
9000be50:	6863      	ldr	r3, [r4, #4]
9000be52:	bf08      	it	eq
9000be54:	f8c8 1000 	streq.w	r1, [r8]
9000be58:	5162      	str	r2, [r4, r5]
9000be5a:	604b      	str	r3, [r1, #4]
9000be5c:	4630      	mov	r0, r6
9000be5e:	f000 f82f 	bl	9000bec0 <__malloc_unlock>
9000be62:	f104 000b 	add.w	r0, r4, #11
9000be66:	1d23      	adds	r3, r4, #4
9000be68:	f020 0007 	bic.w	r0, r0, #7
9000be6c:	1ac2      	subs	r2, r0, r3
9000be6e:	bf1c      	itt	ne
9000be70:	1a1b      	subne	r3, r3, r0
9000be72:	50a3      	strne	r3, [r4, r2]
9000be74:	e7af      	b.n	9000bdd6 <_malloc_r+0x22>
9000be76:	6862      	ldr	r2, [r4, #4]
9000be78:	42a3      	cmp	r3, r4
9000be7a:	bf0c      	ite	eq
9000be7c:	f8c8 2000 	streq.w	r2, [r8]
9000be80:	605a      	strne	r2, [r3, #4]
9000be82:	e7eb      	b.n	9000be5c <_malloc_r+0xa8>
9000be84:	4623      	mov	r3, r4
9000be86:	6864      	ldr	r4, [r4, #4]
9000be88:	e7ae      	b.n	9000bde8 <_malloc_r+0x34>
9000be8a:	463c      	mov	r4, r7
9000be8c:	687f      	ldr	r7, [r7, #4]
9000be8e:	e7b6      	b.n	9000bdfe <_malloc_r+0x4a>
9000be90:	461a      	mov	r2, r3
9000be92:	685b      	ldr	r3, [r3, #4]
9000be94:	42a3      	cmp	r3, r4
9000be96:	d1fb      	bne.n	9000be90 <_malloc_r+0xdc>
9000be98:	2300      	movs	r3, #0
9000be9a:	6053      	str	r3, [r2, #4]
9000be9c:	e7de      	b.n	9000be5c <_malloc_r+0xa8>
9000be9e:	230c      	movs	r3, #12
9000bea0:	6033      	str	r3, [r6, #0]
9000bea2:	4630      	mov	r0, r6
9000bea4:	f000 f80c 	bl	9000bec0 <__malloc_unlock>
9000bea8:	e794      	b.n	9000bdd4 <_malloc_r+0x20>
9000beaa:	6005      	str	r5, [r0, #0]
9000beac:	e7d6      	b.n	9000be5c <_malloc_r+0xa8>
9000beae:	bf00      	nop
9000beb0:	2000134c 	.word	0x2000134c

9000beb4 <__malloc_lock>:
9000beb4:	4801      	ldr	r0, [pc, #4]	@ (9000bebc <__malloc_lock+0x8>)
9000beb6:	f000 ba9c 	b.w	9000c3f2 <__retarget_lock_acquire_recursive>
9000beba:	bf00      	nop
9000bebc:	20001490 	.word	0x20001490

9000bec0 <__malloc_unlock>:
9000bec0:	4801      	ldr	r0, [pc, #4]	@ (9000bec8 <__malloc_unlock+0x8>)
9000bec2:	f000 ba97 	b.w	9000c3f4 <__retarget_lock_release_recursive>
9000bec6:	bf00      	nop
9000bec8:	20001490 	.word	0x20001490

9000becc <std>:
9000becc:	2300      	movs	r3, #0
9000bece:	b510      	push	{r4, lr}
9000bed0:	4604      	mov	r4, r0
9000bed2:	e9c0 3300 	strd	r3, r3, [r0]
9000bed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000beda:	6083      	str	r3, [r0, #8]
9000bedc:	8181      	strh	r1, [r0, #12]
9000bede:	6643      	str	r3, [r0, #100]	@ 0x64
9000bee0:	81c2      	strh	r2, [r0, #14]
9000bee2:	6183      	str	r3, [r0, #24]
9000bee4:	4619      	mov	r1, r3
9000bee6:	2208      	movs	r2, #8
9000bee8:	305c      	adds	r0, #92	@ 0x5c
9000beea:	f000 f9f9 	bl	9000c2e0 <memset>
9000beee:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf24 <std+0x58>)
9000bef0:	6263      	str	r3, [r4, #36]	@ 0x24
9000bef2:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf28 <std+0x5c>)
9000bef4:	62a3      	str	r3, [r4, #40]	@ 0x28
9000bef6:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf2c <std+0x60>)
9000bef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000befa:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf30 <std+0x64>)
9000befc:	6323      	str	r3, [r4, #48]	@ 0x30
9000befe:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf34 <std+0x68>)
9000bf00:	6224      	str	r4, [r4, #32]
9000bf02:	429c      	cmp	r4, r3
9000bf04:	d006      	beq.n	9000bf14 <std+0x48>
9000bf06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000bf0a:	4294      	cmp	r4, r2
9000bf0c:	d002      	beq.n	9000bf14 <std+0x48>
9000bf0e:	33d0      	adds	r3, #208	@ 0xd0
9000bf10:	429c      	cmp	r4, r3
9000bf12:	d105      	bne.n	9000bf20 <std+0x54>
9000bf14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bf1c:	f000 ba68 	b.w	9000c3f0 <__retarget_lock_init_recursive>
9000bf20:	bd10      	pop	{r4, pc}
9000bf22:	bf00      	nop
9000bf24:	9000c131 	.word	0x9000c131
9000bf28:	9000c153 	.word	0x9000c153
9000bf2c:	9000c18b 	.word	0x9000c18b
9000bf30:	9000c1af 	.word	0x9000c1af
9000bf34:	20001350 	.word	0x20001350

9000bf38 <stdio_exit_handler>:
9000bf38:	4a02      	ldr	r2, [pc, #8]	@ (9000bf44 <stdio_exit_handler+0xc>)
9000bf3a:	4903      	ldr	r1, [pc, #12]	@ (9000bf48 <stdio_exit_handler+0x10>)
9000bf3c:	4803      	ldr	r0, [pc, #12]	@ (9000bf4c <stdio_exit_handler+0x14>)
9000bf3e:	f000 b869 	b.w	9000c014 <_fwalk_sglue>
9000bf42:	bf00      	nop
9000bf44:	20000070 	.word	0x20000070
9000bf48:	9000cb31 	.word	0x9000cb31
9000bf4c:	20000080 	.word	0x20000080

9000bf50 <cleanup_stdio>:
9000bf50:	6841      	ldr	r1, [r0, #4]
9000bf52:	4b0c      	ldr	r3, [pc, #48]	@ (9000bf84 <cleanup_stdio+0x34>)
9000bf54:	4299      	cmp	r1, r3
9000bf56:	b510      	push	{r4, lr}
9000bf58:	4604      	mov	r4, r0
9000bf5a:	d001      	beq.n	9000bf60 <cleanup_stdio+0x10>
9000bf5c:	f000 fde8 	bl	9000cb30 <_fflush_r>
9000bf60:	68a1      	ldr	r1, [r4, #8]
9000bf62:	4b09      	ldr	r3, [pc, #36]	@ (9000bf88 <cleanup_stdio+0x38>)
9000bf64:	4299      	cmp	r1, r3
9000bf66:	d002      	beq.n	9000bf6e <cleanup_stdio+0x1e>
9000bf68:	4620      	mov	r0, r4
9000bf6a:	f000 fde1 	bl	9000cb30 <_fflush_r>
9000bf6e:	68e1      	ldr	r1, [r4, #12]
9000bf70:	4b06      	ldr	r3, [pc, #24]	@ (9000bf8c <cleanup_stdio+0x3c>)
9000bf72:	4299      	cmp	r1, r3
9000bf74:	d004      	beq.n	9000bf80 <cleanup_stdio+0x30>
9000bf76:	4620      	mov	r0, r4
9000bf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bf7c:	f000 bdd8 	b.w	9000cb30 <_fflush_r>
9000bf80:	bd10      	pop	{r4, pc}
9000bf82:	bf00      	nop
9000bf84:	20001350 	.word	0x20001350
9000bf88:	200013b8 	.word	0x200013b8
9000bf8c:	20001420 	.word	0x20001420

9000bf90 <global_stdio_init.part.0>:
9000bf90:	b510      	push	{r4, lr}
9000bf92:	4b0b      	ldr	r3, [pc, #44]	@ (9000bfc0 <global_stdio_init.part.0+0x30>)
9000bf94:	4c0b      	ldr	r4, [pc, #44]	@ (9000bfc4 <global_stdio_init.part.0+0x34>)
9000bf96:	4a0c      	ldr	r2, [pc, #48]	@ (9000bfc8 <global_stdio_init.part.0+0x38>)
9000bf98:	601a      	str	r2, [r3, #0]
9000bf9a:	4620      	mov	r0, r4
9000bf9c:	2200      	movs	r2, #0
9000bf9e:	2104      	movs	r1, #4
9000bfa0:	f7ff ff94 	bl	9000becc <std>
9000bfa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000bfa8:	2201      	movs	r2, #1
9000bfaa:	2109      	movs	r1, #9
9000bfac:	f7ff ff8e 	bl	9000becc <std>
9000bfb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000bfb4:	2202      	movs	r2, #2
9000bfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bfba:	2112      	movs	r1, #18
9000bfbc:	f7ff bf86 	b.w	9000becc <std>
9000bfc0:	20001488 	.word	0x20001488
9000bfc4:	20001350 	.word	0x20001350
9000bfc8:	9000bf39 	.word	0x9000bf39

9000bfcc <__sfp_lock_acquire>:
9000bfcc:	4801      	ldr	r0, [pc, #4]	@ (9000bfd4 <__sfp_lock_acquire+0x8>)
9000bfce:	f000 ba10 	b.w	9000c3f2 <__retarget_lock_acquire_recursive>
9000bfd2:	bf00      	nop
9000bfd4:	20001491 	.word	0x20001491

9000bfd8 <__sfp_lock_release>:
9000bfd8:	4801      	ldr	r0, [pc, #4]	@ (9000bfe0 <__sfp_lock_release+0x8>)
9000bfda:	f000 ba0b 	b.w	9000c3f4 <__retarget_lock_release_recursive>
9000bfde:	bf00      	nop
9000bfe0:	20001491 	.word	0x20001491

9000bfe4 <__sinit>:
9000bfe4:	b510      	push	{r4, lr}
9000bfe6:	4604      	mov	r4, r0
9000bfe8:	f7ff fff0 	bl	9000bfcc <__sfp_lock_acquire>
9000bfec:	6a23      	ldr	r3, [r4, #32]
9000bfee:	b11b      	cbz	r3, 9000bff8 <__sinit+0x14>
9000bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bff4:	f7ff bff0 	b.w	9000bfd8 <__sfp_lock_release>
9000bff8:	4b04      	ldr	r3, [pc, #16]	@ (9000c00c <__sinit+0x28>)
9000bffa:	6223      	str	r3, [r4, #32]
9000bffc:	4b04      	ldr	r3, [pc, #16]	@ (9000c010 <__sinit+0x2c>)
9000bffe:	681b      	ldr	r3, [r3, #0]
9000c000:	2b00      	cmp	r3, #0
9000c002:	d1f5      	bne.n	9000bff0 <__sinit+0xc>
9000c004:	f7ff ffc4 	bl	9000bf90 <global_stdio_init.part.0>
9000c008:	e7f2      	b.n	9000bff0 <__sinit+0xc>
9000c00a:	bf00      	nop
9000c00c:	9000bf51 	.word	0x9000bf51
9000c010:	20001488 	.word	0x20001488

9000c014 <_fwalk_sglue>:
9000c014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c018:	4607      	mov	r7, r0
9000c01a:	4688      	mov	r8, r1
9000c01c:	4614      	mov	r4, r2
9000c01e:	2600      	movs	r6, #0
9000c020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c024:	f1b9 0901 	subs.w	r9, r9, #1
9000c028:	d505      	bpl.n	9000c036 <_fwalk_sglue+0x22>
9000c02a:	6824      	ldr	r4, [r4, #0]
9000c02c:	2c00      	cmp	r4, #0
9000c02e:	d1f7      	bne.n	9000c020 <_fwalk_sglue+0xc>
9000c030:	4630      	mov	r0, r6
9000c032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c036:	89ab      	ldrh	r3, [r5, #12]
9000c038:	2b01      	cmp	r3, #1
9000c03a:	d907      	bls.n	9000c04c <_fwalk_sglue+0x38>
9000c03c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c040:	3301      	adds	r3, #1
9000c042:	d003      	beq.n	9000c04c <_fwalk_sglue+0x38>
9000c044:	4629      	mov	r1, r5
9000c046:	4638      	mov	r0, r7
9000c048:	47c0      	blx	r8
9000c04a:	4306      	orrs	r6, r0
9000c04c:	3568      	adds	r5, #104	@ 0x68
9000c04e:	e7e9      	b.n	9000c024 <_fwalk_sglue+0x10>

9000c050 <iprintf>:
9000c050:	b40f      	push	{r0, r1, r2, r3}
9000c052:	b507      	push	{r0, r1, r2, lr}
9000c054:	4906      	ldr	r1, [pc, #24]	@ (9000c070 <iprintf+0x20>)
9000c056:	ab04      	add	r3, sp, #16
9000c058:	6808      	ldr	r0, [r1, #0]
9000c05a:	f853 2b04 	ldr.w	r2, [r3], #4
9000c05e:	6881      	ldr	r1, [r0, #8]
9000c060:	9301      	str	r3, [sp, #4]
9000c062:	f000 fa3d 	bl	9000c4e0 <_vfiprintf_r>
9000c066:	b003      	add	sp, #12
9000c068:	f85d eb04 	ldr.w	lr, [sp], #4
9000c06c:	b004      	add	sp, #16
9000c06e:	4770      	bx	lr
9000c070:	2000007c 	.word	0x2000007c

9000c074 <_puts_r>:
9000c074:	6a03      	ldr	r3, [r0, #32]
9000c076:	b570      	push	{r4, r5, r6, lr}
9000c078:	6884      	ldr	r4, [r0, #8]
9000c07a:	4605      	mov	r5, r0
9000c07c:	460e      	mov	r6, r1
9000c07e:	b90b      	cbnz	r3, 9000c084 <_puts_r+0x10>
9000c080:	f7ff ffb0 	bl	9000bfe4 <__sinit>
9000c084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c086:	07db      	lsls	r3, r3, #31
9000c088:	d405      	bmi.n	9000c096 <_puts_r+0x22>
9000c08a:	89a3      	ldrh	r3, [r4, #12]
9000c08c:	0598      	lsls	r0, r3, #22
9000c08e:	d402      	bmi.n	9000c096 <_puts_r+0x22>
9000c090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c092:	f000 f9ae 	bl	9000c3f2 <__retarget_lock_acquire_recursive>
9000c096:	89a3      	ldrh	r3, [r4, #12]
9000c098:	0719      	lsls	r1, r3, #28
9000c09a:	d502      	bpl.n	9000c0a2 <_puts_r+0x2e>
9000c09c:	6923      	ldr	r3, [r4, #16]
9000c09e:	2b00      	cmp	r3, #0
9000c0a0:	d135      	bne.n	9000c10e <_puts_r+0x9a>
9000c0a2:	4621      	mov	r1, r4
9000c0a4:	4628      	mov	r0, r5
9000c0a6:	f000 f8c5 	bl	9000c234 <__swsetup_r>
9000c0aa:	b380      	cbz	r0, 9000c10e <_puts_r+0x9a>
9000c0ac:	f04f 35ff 	mov.w	r5, #4294967295
9000c0b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c0b2:	07da      	lsls	r2, r3, #31
9000c0b4:	d405      	bmi.n	9000c0c2 <_puts_r+0x4e>
9000c0b6:	89a3      	ldrh	r3, [r4, #12]
9000c0b8:	059b      	lsls	r3, r3, #22
9000c0ba:	d402      	bmi.n	9000c0c2 <_puts_r+0x4e>
9000c0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c0be:	f000 f999 	bl	9000c3f4 <__retarget_lock_release_recursive>
9000c0c2:	4628      	mov	r0, r5
9000c0c4:	bd70      	pop	{r4, r5, r6, pc}
9000c0c6:	2b00      	cmp	r3, #0
9000c0c8:	da04      	bge.n	9000c0d4 <_puts_r+0x60>
9000c0ca:	69a2      	ldr	r2, [r4, #24]
9000c0cc:	429a      	cmp	r2, r3
9000c0ce:	dc17      	bgt.n	9000c100 <_puts_r+0x8c>
9000c0d0:	290a      	cmp	r1, #10
9000c0d2:	d015      	beq.n	9000c100 <_puts_r+0x8c>
9000c0d4:	6823      	ldr	r3, [r4, #0]
9000c0d6:	1c5a      	adds	r2, r3, #1
9000c0d8:	6022      	str	r2, [r4, #0]
9000c0da:	7019      	strb	r1, [r3, #0]
9000c0dc:	68a3      	ldr	r3, [r4, #8]
9000c0de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c0e2:	3b01      	subs	r3, #1
9000c0e4:	60a3      	str	r3, [r4, #8]
9000c0e6:	2900      	cmp	r1, #0
9000c0e8:	d1ed      	bne.n	9000c0c6 <_puts_r+0x52>
9000c0ea:	2b00      	cmp	r3, #0
9000c0ec:	da11      	bge.n	9000c112 <_puts_r+0x9e>
9000c0ee:	4622      	mov	r2, r4
9000c0f0:	210a      	movs	r1, #10
9000c0f2:	4628      	mov	r0, r5
9000c0f4:	f000 f85f 	bl	9000c1b6 <__swbuf_r>
9000c0f8:	3001      	adds	r0, #1
9000c0fa:	d0d7      	beq.n	9000c0ac <_puts_r+0x38>
9000c0fc:	250a      	movs	r5, #10
9000c0fe:	e7d7      	b.n	9000c0b0 <_puts_r+0x3c>
9000c100:	4622      	mov	r2, r4
9000c102:	4628      	mov	r0, r5
9000c104:	f000 f857 	bl	9000c1b6 <__swbuf_r>
9000c108:	3001      	adds	r0, #1
9000c10a:	d1e7      	bne.n	9000c0dc <_puts_r+0x68>
9000c10c:	e7ce      	b.n	9000c0ac <_puts_r+0x38>
9000c10e:	3e01      	subs	r6, #1
9000c110:	e7e4      	b.n	9000c0dc <_puts_r+0x68>
9000c112:	6823      	ldr	r3, [r4, #0]
9000c114:	1c5a      	adds	r2, r3, #1
9000c116:	6022      	str	r2, [r4, #0]
9000c118:	220a      	movs	r2, #10
9000c11a:	701a      	strb	r2, [r3, #0]
9000c11c:	e7ee      	b.n	9000c0fc <_puts_r+0x88>
	...

9000c120 <puts>:
9000c120:	4b02      	ldr	r3, [pc, #8]	@ (9000c12c <puts+0xc>)
9000c122:	4601      	mov	r1, r0
9000c124:	6818      	ldr	r0, [r3, #0]
9000c126:	f7ff bfa5 	b.w	9000c074 <_puts_r>
9000c12a:	bf00      	nop
9000c12c:	2000007c 	.word	0x2000007c

9000c130 <__sread>:
9000c130:	b510      	push	{r4, lr}
9000c132:	460c      	mov	r4, r1
9000c134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c138:	f000 f8fc 	bl	9000c334 <_read_r>
9000c13c:	2800      	cmp	r0, #0
9000c13e:	bfab      	itete	ge
9000c140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c142:	89a3      	ldrhlt	r3, [r4, #12]
9000c144:	181b      	addge	r3, r3, r0
9000c146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c14a:	bfac      	ite	ge
9000c14c:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c14e:	81a3      	strhlt	r3, [r4, #12]
9000c150:	bd10      	pop	{r4, pc}

9000c152 <__swrite>:
9000c152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c156:	461f      	mov	r7, r3
9000c158:	898b      	ldrh	r3, [r1, #12]
9000c15a:	05db      	lsls	r3, r3, #23
9000c15c:	4605      	mov	r5, r0
9000c15e:	460c      	mov	r4, r1
9000c160:	4616      	mov	r6, r2
9000c162:	d505      	bpl.n	9000c170 <__swrite+0x1e>
9000c164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c168:	2302      	movs	r3, #2
9000c16a:	2200      	movs	r2, #0
9000c16c:	f000 f8d0 	bl	9000c310 <_lseek_r>
9000c170:	89a3      	ldrh	r3, [r4, #12]
9000c172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c17a:	81a3      	strh	r3, [r4, #12]
9000c17c:	4632      	mov	r2, r6
9000c17e:	463b      	mov	r3, r7
9000c180:	4628      	mov	r0, r5
9000c182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c186:	f000 b8f7 	b.w	9000c378 <_write_r>

9000c18a <__sseek>:
9000c18a:	b510      	push	{r4, lr}
9000c18c:	460c      	mov	r4, r1
9000c18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c192:	f000 f8bd 	bl	9000c310 <_lseek_r>
9000c196:	1c43      	adds	r3, r0, #1
9000c198:	89a3      	ldrh	r3, [r4, #12]
9000c19a:	bf15      	itete	ne
9000c19c:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c19e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c1a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c1a6:	81a3      	strheq	r3, [r4, #12]
9000c1a8:	bf18      	it	ne
9000c1aa:	81a3      	strhne	r3, [r4, #12]
9000c1ac:	bd10      	pop	{r4, pc}

9000c1ae <__sclose>:
9000c1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c1b2:	f000 b89d 	b.w	9000c2f0 <_close_r>

9000c1b6 <__swbuf_r>:
9000c1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c1b8:	460e      	mov	r6, r1
9000c1ba:	4614      	mov	r4, r2
9000c1bc:	4605      	mov	r5, r0
9000c1be:	b118      	cbz	r0, 9000c1c8 <__swbuf_r+0x12>
9000c1c0:	6a03      	ldr	r3, [r0, #32]
9000c1c2:	b90b      	cbnz	r3, 9000c1c8 <__swbuf_r+0x12>
9000c1c4:	f7ff ff0e 	bl	9000bfe4 <__sinit>
9000c1c8:	69a3      	ldr	r3, [r4, #24]
9000c1ca:	60a3      	str	r3, [r4, #8]
9000c1cc:	89a3      	ldrh	r3, [r4, #12]
9000c1ce:	071a      	lsls	r2, r3, #28
9000c1d0:	d501      	bpl.n	9000c1d6 <__swbuf_r+0x20>
9000c1d2:	6923      	ldr	r3, [r4, #16]
9000c1d4:	b943      	cbnz	r3, 9000c1e8 <__swbuf_r+0x32>
9000c1d6:	4621      	mov	r1, r4
9000c1d8:	4628      	mov	r0, r5
9000c1da:	f000 f82b 	bl	9000c234 <__swsetup_r>
9000c1de:	b118      	cbz	r0, 9000c1e8 <__swbuf_r+0x32>
9000c1e0:	f04f 37ff 	mov.w	r7, #4294967295
9000c1e4:	4638      	mov	r0, r7
9000c1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c1e8:	6823      	ldr	r3, [r4, #0]
9000c1ea:	6922      	ldr	r2, [r4, #16]
9000c1ec:	1a98      	subs	r0, r3, r2
9000c1ee:	6963      	ldr	r3, [r4, #20]
9000c1f0:	b2f6      	uxtb	r6, r6
9000c1f2:	4283      	cmp	r3, r0
9000c1f4:	4637      	mov	r7, r6
9000c1f6:	dc05      	bgt.n	9000c204 <__swbuf_r+0x4e>
9000c1f8:	4621      	mov	r1, r4
9000c1fa:	4628      	mov	r0, r5
9000c1fc:	f000 fc98 	bl	9000cb30 <_fflush_r>
9000c200:	2800      	cmp	r0, #0
9000c202:	d1ed      	bne.n	9000c1e0 <__swbuf_r+0x2a>
9000c204:	68a3      	ldr	r3, [r4, #8]
9000c206:	3b01      	subs	r3, #1
9000c208:	60a3      	str	r3, [r4, #8]
9000c20a:	6823      	ldr	r3, [r4, #0]
9000c20c:	1c5a      	adds	r2, r3, #1
9000c20e:	6022      	str	r2, [r4, #0]
9000c210:	701e      	strb	r6, [r3, #0]
9000c212:	6962      	ldr	r2, [r4, #20]
9000c214:	1c43      	adds	r3, r0, #1
9000c216:	429a      	cmp	r2, r3
9000c218:	d004      	beq.n	9000c224 <__swbuf_r+0x6e>
9000c21a:	89a3      	ldrh	r3, [r4, #12]
9000c21c:	07db      	lsls	r3, r3, #31
9000c21e:	d5e1      	bpl.n	9000c1e4 <__swbuf_r+0x2e>
9000c220:	2e0a      	cmp	r6, #10
9000c222:	d1df      	bne.n	9000c1e4 <__swbuf_r+0x2e>
9000c224:	4621      	mov	r1, r4
9000c226:	4628      	mov	r0, r5
9000c228:	f000 fc82 	bl	9000cb30 <_fflush_r>
9000c22c:	2800      	cmp	r0, #0
9000c22e:	d0d9      	beq.n	9000c1e4 <__swbuf_r+0x2e>
9000c230:	e7d6      	b.n	9000c1e0 <__swbuf_r+0x2a>
	...

9000c234 <__swsetup_r>:
9000c234:	b538      	push	{r3, r4, r5, lr}
9000c236:	4b29      	ldr	r3, [pc, #164]	@ (9000c2dc <__swsetup_r+0xa8>)
9000c238:	4605      	mov	r5, r0
9000c23a:	6818      	ldr	r0, [r3, #0]
9000c23c:	460c      	mov	r4, r1
9000c23e:	b118      	cbz	r0, 9000c248 <__swsetup_r+0x14>
9000c240:	6a03      	ldr	r3, [r0, #32]
9000c242:	b90b      	cbnz	r3, 9000c248 <__swsetup_r+0x14>
9000c244:	f7ff fece 	bl	9000bfe4 <__sinit>
9000c248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c24c:	0719      	lsls	r1, r3, #28
9000c24e:	d422      	bmi.n	9000c296 <__swsetup_r+0x62>
9000c250:	06da      	lsls	r2, r3, #27
9000c252:	d407      	bmi.n	9000c264 <__swsetup_r+0x30>
9000c254:	2209      	movs	r2, #9
9000c256:	602a      	str	r2, [r5, #0]
9000c258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c25c:	81a3      	strh	r3, [r4, #12]
9000c25e:	f04f 30ff 	mov.w	r0, #4294967295
9000c262:	e033      	b.n	9000c2cc <__swsetup_r+0x98>
9000c264:	0758      	lsls	r0, r3, #29
9000c266:	d512      	bpl.n	9000c28e <__swsetup_r+0x5a>
9000c268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c26a:	b141      	cbz	r1, 9000c27e <__swsetup_r+0x4a>
9000c26c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c270:	4299      	cmp	r1, r3
9000c272:	d002      	beq.n	9000c27a <__swsetup_r+0x46>
9000c274:	4628      	mov	r0, r5
9000c276:	f000 f8bf 	bl	9000c3f8 <_free_r>
9000c27a:	2300      	movs	r3, #0
9000c27c:	6363      	str	r3, [r4, #52]	@ 0x34
9000c27e:	89a3      	ldrh	r3, [r4, #12]
9000c280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c284:	81a3      	strh	r3, [r4, #12]
9000c286:	2300      	movs	r3, #0
9000c288:	6063      	str	r3, [r4, #4]
9000c28a:	6923      	ldr	r3, [r4, #16]
9000c28c:	6023      	str	r3, [r4, #0]
9000c28e:	89a3      	ldrh	r3, [r4, #12]
9000c290:	f043 0308 	orr.w	r3, r3, #8
9000c294:	81a3      	strh	r3, [r4, #12]
9000c296:	6923      	ldr	r3, [r4, #16]
9000c298:	b94b      	cbnz	r3, 9000c2ae <__swsetup_r+0x7a>
9000c29a:	89a3      	ldrh	r3, [r4, #12]
9000c29c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c2a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c2a4:	d003      	beq.n	9000c2ae <__swsetup_r+0x7a>
9000c2a6:	4621      	mov	r1, r4
9000c2a8:	4628      	mov	r0, r5
9000c2aa:	f000 fc8f 	bl	9000cbcc <__smakebuf_r>
9000c2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c2b2:	f013 0201 	ands.w	r2, r3, #1
9000c2b6:	d00a      	beq.n	9000c2ce <__swsetup_r+0x9a>
9000c2b8:	2200      	movs	r2, #0
9000c2ba:	60a2      	str	r2, [r4, #8]
9000c2bc:	6962      	ldr	r2, [r4, #20]
9000c2be:	4252      	negs	r2, r2
9000c2c0:	61a2      	str	r2, [r4, #24]
9000c2c2:	6922      	ldr	r2, [r4, #16]
9000c2c4:	b942      	cbnz	r2, 9000c2d8 <__swsetup_r+0xa4>
9000c2c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c2ca:	d1c5      	bne.n	9000c258 <__swsetup_r+0x24>
9000c2cc:	bd38      	pop	{r3, r4, r5, pc}
9000c2ce:	0799      	lsls	r1, r3, #30
9000c2d0:	bf58      	it	pl
9000c2d2:	6962      	ldrpl	r2, [r4, #20]
9000c2d4:	60a2      	str	r2, [r4, #8]
9000c2d6:	e7f4      	b.n	9000c2c2 <__swsetup_r+0x8e>
9000c2d8:	2000      	movs	r0, #0
9000c2da:	e7f7      	b.n	9000c2cc <__swsetup_r+0x98>
9000c2dc:	2000007c 	.word	0x2000007c

9000c2e0 <memset>:
9000c2e0:	4402      	add	r2, r0
9000c2e2:	4603      	mov	r3, r0
9000c2e4:	4293      	cmp	r3, r2
9000c2e6:	d100      	bne.n	9000c2ea <memset+0xa>
9000c2e8:	4770      	bx	lr
9000c2ea:	f803 1b01 	strb.w	r1, [r3], #1
9000c2ee:	e7f9      	b.n	9000c2e4 <memset+0x4>

9000c2f0 <_close_r>:
9000c2f0:	b538      	push	{r3, r4, r5, lr}
9000c2f2:	4d06      	ldr	r5, [pc, #24]	@ (9000c30c <_close_r+0x1c>)
9000c2f4:	2300      	movs	r3, #0
9000c2f6:	4604      	mov	r4, r0
9000c2f8:	4608      	mov	r0, r1
9000c2fa:	602b      	str	r3, [r5, #0]
9000c2fc:	f7f4 fd3d 	bl	90000d7a <_close>
9000c300:	1c43      	adds	r3, r0, #1
9000c302:	d102      	bne.n	9000c30a <_close_r+0x1a>
9000c304:	682b      	ldr	r3, [r5, #0]
9000c306:	b103      	cbz	r3, 9000c30a <_close_r+0x1a>
9000c308:	6023      	str	r3, [r4, #0]
9000c30a:	bd38      	pop	{r3, r4, r5, pc}
9000c30c:	2000148c 	.word	0x2000148c

9000c310 <_lseek_r>:
9000c310:	b538      	push	{r3, r4, r5, lr}
9000c312:	4d07      	ldr	r5, [pc, #28]	@ (9000c330 <_lseek_r+0x20>)
9000c314:	4604      	mov	r4, r0
9000c316:	4608      	mov	r0, r1
9000c318:	4611      	mov	r1, r2
9000c31a:	2200      	movs	r2, #0
9000c31c:	602a      	str	r2, [r5, #0]
9000c31e:	461a      	mov	r2, r3
9000c320:	f7f4 fd52 	bl	90000dc8 <_lseek>
9000c324:	1c43      	adds	r3, r0, #1
9000c326:	d102      	bne.n	9000c32e <_lseek_r+0x1e>
9000c328:	682b      	ldr	r3, [r5, #0]
9000c32a:	b103      	cbz	r3, 9000c32e <_lseek_r+0x1e>
9000c32c:	6023      	str	r3, [r4, #0]
9000c32e:	bd38      	pop	{r3, r4, r5, pc}
9000c330:	2000148c 	.word	0x2000148c

9000c334 <_read_r>:
9000c334:	b538      	push	{r3, r4, r5, lr}
9000c336:	4d07      	ldr	r5, [pc, #28]	@ (9000c354 <_read_r+0x20>)
9000c338:	4604      	mov	r4, r0
9000c33a:	4608      	mov	r0, r1
9000c33c:	4611      	mov	r1, r2
9000c33e:	2200      	movs	r2, #0
9000c340:	602a      	str	r2, [r5, #0]
9000c342:	461a      	mov	r2, r3
9000c344:	f7f4 fce0 	bl	90000d08 <_read>
9000c348:	1c43      	adds	r3, r0, #1
9000c34a:	d102      	bne.n	9000c352 <_read_r+0x1e>
9000c34c:	682b      	ldr	r3, [r5, #0]
9000c34e:	b103      	cbz	r3, 9000c352 <_read_r+0x1e>
9000c350:	6023      	str	r3, [r4, #0]
9000c352:	bd38      	pop	{r3, r4, r5, pc}
9000c354:	2000148c 	.word	0x2000148c

9000c358 <_sbrk_r>:
9000c358:	b538      	push	{r3, r4, r5, lr}
9000c35a:	4d06      	ldr	r5, [pc, #24]	@ (9000c374 <_sbrk_r+0x1c>)
9000c35c:	2300      	movs	r3, #0
9000c35e:	4604      	mov	r4, r0
9000c360:	4608      	mov	r0, r1
9000c362:	602b      	str	r3, [r5, #0]
9000c364:	f7f4 fd3e 	bl	90000de4 <_sbrk>
9000c368:	1c43      	adds	r3, r0, #1
9000c36a:	d102      	bne.n	9000c372 <_sbrk_r+0x1a>
9000c36c:	682b      	ldr	r3, [r5, #0]
9000c36e:	b103      	cbz	r3, 9000c372 <_sbrk_r+0x1a>
9000c370:	6023      	str	r3, [r4, #0]
9000c372:	bd38      	pop	{r3, r4, r5, pc}
9000c374:	2000148c 	.word	0x2000148c

9000c378 <_write_r>:
9000c378:	b538      	push	{r3, r4, r5, lr}
9000c37a:	4d07      	ldr	r5, [pc, #28]	@ (9000c398 <_write_r+0x20>)
9000c37c:	4604      	mov	r4, r0
9000c37e:	4608      	mov	r0, r1
9000c380:	4611      	mov	r1, r2
9000c382:	2200      	movs	r2, #0
9000c384:	602a      	str	r2, [r5, #0]
9000c386:	461a      	mov	r2, r3
9000c388:	f7f4 fcdb 	bl	90000d42 <_write>
9000c38c:	1c43      	adds	r3, r0, #1
9000c38e:	d102      	bne.n	9000c396 <_write_r+0x1e>
9000c390:	682b      	ldr	r3, [r5, #0]
9000c392:	b103      	cbz	r3, 9000c396 <_write_r+0x1e>
9000c394:	6023      	str	r3, [r4, #0]
9000c396:	bd38      	pop	{r3, r4, r5, pc}
9000c398:	2000148c 	.word	0x2000148c

9000c39c <__errno>:
9000c39c:	4b01      	ldr	r3, [pc, #4]	@ (9000c3a4 <__errno+0x8>)
9000c39e:	6818      	ldr	r0, [r3, #0]
9000c3a0:	4770      	bx	lr
9000c3a2:	bf00      	nop
9000c3a4:	2000007c 	.word	0x2000007c

9000c3a8 <__libc_init_array>:
9000c3a8:	b570      	push	{r4, r5, r6, lr}
9000c3aa:	4d0d      	ldr	r5, [pc, #52]	@ (9000c3e0 <__libc_init_array+0x38>)
9000c3ac:	4c0d      	ldr	r4, [pc, #52]	@ (9000c3e4 <__libc_init_array+0x3c>)
9000c3ae:	1b64      	subs	r4, r4, r5
9000c3b0:	10a4      	asrs	r4, r4, #2
9000c3b2:	2600      	movs	r6, #0
9000c3b4:	42a6      	cmp	r6, r4
9000c3b6:	d109      	bne.n	9000c3cc <__libc_init_array+0x24>
9000c3b8:	4d0b      	ldr	r5, [pc, #44]	@ (9000c3e8 <__libc_init_array+0x40>)
9000c3ba:	4c0c      	ldr	r4, [pc, #48]	@ (9000c3ec <__libc_init_array+0x44>)
9000c3bc:	f000 fc64 	bl	9000cc88 <_init>
9000c3c0:	1b64      	subs	r4, r4, r5
9000c3c2:	10a4      	asrs	r4, r4, #2
9000c3c4:	2600      	movs	r6, #0
9000c3c6:	42a6      	cmp	r6, r4
9000c3c8:	d105      	bne.n	9000c3d6 <__libc_init_array+0x2e>
9000c3ca:	bd70      	pop	{r4, r5, r6, pc}
9000c3cc:	f855 3b04 	ldr.w	r3, [r5], #4
9000c3d0:	4798      	blx	r3
9000c3d2:	3601      	adds	r6, #1
9000c3d4:	e7ee      	b.n	9000c3b4 <__libc_init_array+0xc>
9000c3d6:	f855 3b04 	ldr.w	r3, [r5], #4
9000c3da:	4798      	blx	r3
9000c3dc:	3601      	adds	r6, #1
9000c3de:	e7f2      	b.n	9000c3c6 <__libc_init_array+0x1e>
9000c3e0:	9000f1e0 	.word	0x9000f1e0
9000c3e4:	9000f1e0 	.word	0x9000f1e0
9000c3e8:	9000f1e0 	.word	0x9000f1e0
9000c3ec:	9000f1e4 	.word	0x9000f1e4

9000c3f0 <__retarget_lock_init_recursive>:
9000c3f0:	4770      	bx	lr

9000c3f2 <__retarget_lock_acquire_recursive>:
9000c3f2:	4770      	bx	lr

9000c3f4 <__retarget_lock_release_recursive>:
9000c3f4:	4770      	bx	lr
	...

9000c3f8 <_free_r>:
9000c3f8:	b538      	push	{r3, r4, r5, lr}
9000c3fa:	4605      	mov	r5, r0
9000c3fc:	2900      	cmp	r1, #0
9000c3fe:	d041      	beq.n	9000c484 <_free_r+0x8c>
9000c400:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c404:	1f0c      	subs	r4, r1, #4
9000c406:	2b00      	cmp	r3, #0
9000c408:	bfb8      	it	lt
9000c40a:	18e4      	addlt	r4, r4, r3
9000c40c:	f7ff fd52 	bl	9000beb4 <__malloc_lock>
9000c410:	4a1d      	ldr	r2, [pc, #116]	@ (9000c488 <_free_r+0x90>)
9000c412:	6813      	ldr	r3, [r2, #0]
9000c414:	b933      	cbnz	r3, 9000c424 <_free_r+0x2c>
9000c416:	6063      	str	r3, [r4, #4]
9000c418:	6014      	str	r4, [r2, #0]
9000c41a:	4628      	mov	r0, r5
9000c41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c420:	f7ff bd4e 	b.w	9000bec0 <__malloc_unlock>
9000c424:	42a3      	cmp	r3, r4
9000c426:	d908      	bls.n	9000c43a <_free_r+0x42>
9000c428:	6820      	ldr	r0, [r4, #0]
9000c42a:	1821      	adds	r1, r4, r0
9000c42c:	428b      	cmp	r3, r1
9000c42e:	bf01      	itttt	eq
9000c430:	6819      	ldreq	r1, [r3, #0]
9000c432:	685b      	ldreq	r3, [r3, #4]
9000c434:	1809      	addeq	r1, r1, r0
9000c436:	6021      	streq	r1, [r4, #0]
9000c438:	e7ed      	b.n	9000c416 <_free_r+0x1e>
9000c43a:	461a      	mov	r2, r3
9000c43c:	685b      	ldr	r3, [r3, #4]
9000c43e:	b10b      	cbz	r3, 9000c444 <_free_r+0x4c>
9000c440:	42a3      	cmp	r3, r4
9000c442:	d9fa      	bls.n	9000c43a <_free_r+0x42>
9000c444:	6811      	ldr	r1, [r2, #0]
9000c446:	1850      	adds	r0, r2, r1
9000c448:	42a0      	cmp	r0, r4
9000c44a:	d10b      	bne.n	9000c464 <_free_r+0x6c>
9000c44c:	6820      	ldr	r0, [r4, #0]
9000c44e:	4401      	add	r1, r0
9000c450:	1850      	adds	r0, r2, r1
9000c452:	4283      	cmp	r3, r0
9000c454:	6011      	str	r1, [r2, #0]
9000c456:	d1e0      	bne.n	9000c41a <_free_r+0x22>
9000c458:	6818      	ldr	r0, [r3, #0]
9000c45a:	685b      	ldr	r3, [r3, #4]
9000c45c:	6053      	str	r3, [r2, #4]
9000c45e:	4408      	add	r0, r1
9000c460:	6010      	str	r0, [r2, #0]
9000c462:	e7da      	b.n	9000c41a <_free_r+0x22>
9000c464:	d902      	bls.n	9000c46c <_free_r+0x74>
9000c466:	230c      	movs	r3, #12
9000c468:	602b      	str	r3, [r5, #0]
9000c46a:	e7d6      	b.n	9000c41a <_free_r+0x22>
9000c46c:	6820      	ldr	r0, [r4, #0]
9000c46e:	1821      	adds	r1, r4, r0
9000c470:	428b      	cmp	r3, r1
9000c472:	bf04      	itt	eq
9000c474:	6819      	ldreq	r1, [r3, #0]
9000c476:	685b      	ldreq	r3, [r3, #4]
9000c478:	6063      	str	r3, [r4, #4]
9000c47a:	bf04      	itt	eq
9000c47c:	1809      	addeq	r1, r1, r0
9000c47e:	6021      	streq	r1, [r4, #0]
9000c480:	6054      	str	r4, [r2, #4]
9000c482:	e7ca      	b.n	9000c41a <_free_r+0x22>
9000c484:	bd38      	pop	{r3, r4, r5, pc}
9000c486:	bf00      	nop
9000c488:	2000134c 	.word	0x2000134c

9000c48c <__sfputc_r>:
9000c48c:	6893      	ldr	r3, [r2, #8]
9000c48e:	3b01      	subs	r3, #1
9000c490:	2b00      	cmp	r3, #0
9000c492:	b410      	push	{r4}
9000c494:	6093      	str	r3, [r2, #8]
9000c496:	da08      	bge.n	9000c4aa <__sfputc_r+0x1e>
9000c498:	6994      	ldr	r4, [r2, #24]
9000c49a:	42a3      	cmp	r3, r4
9000c49c:	db01      	blt.n	9000c4a2 <__sfputc_r+0x16>
9000c49e:	290a      	cmp	r1, #10
9000c4a0:	d103      	bne.n	9000c4aa <__sfputc_r+0x1e>
9000c4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c4a6:	f7ff be86 	b.w	9000c1b6 <__swbuf_r>
9000c4aa:	6813      	ldr	r3, [r2, #0]
9000c4ac:	1c58      	adds	r0, r3, #1
9000c4ae:	6010      	str	r0, [r2, #0]
9000c4b0:	7019      	strb	r1, [r3, #0]
9000c4b2:	4608      	mov	r0, r1
9000c4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c4b8:	4770      	bx	lr

9000c4ba <__sfputs_r>:
9000c4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c4bc:	4606      	mov	r6, r0
9000c4be:	460f      	mov	r7, r1
9000c4c0:	4614      	mov	r4, r2
9000c4c2:	18d5      	adds	r5, r2, r3
9000c4c4:	42ac      	cmp	r4, r5
9000c4c6:	d101      	bne.n	9000c4cc <__sfputs_r+0x12>
9000c4c8:	2000      	movs	r0, #0
9000c4ca:	e007      	b.n	9000c4dc <__sfputs_r+0x22>
9000c4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c4d0:	463a      	mov	r2, r7
9000c4d2:	4630      	mov	r0, r6
9000c4d4:	f7ff ffda 	bl	9000c48c <__sfputc_r>
9000c4d8:	1c43      	adds	r3, r0, #1
9000c4da:	d1f3      	bne.n	9000c4c4 <__sfputs_r+0xa>
9000c4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000c4e0 <_vfiprintf_r>:
9000c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c4e4:	460d      	mov	r5, r1
9000c4e6:	b09d      	sub	sp, #116	@ 0x74
9000c4e8:	4614      	mov	r4, r2
9000c4ea:	4698      	mov	r8, r3
9000c4ec:	4606      	mov	r6, r0
9000c4ee:	b118      	cbz	r0, 9000c4f8 <_vfiprintf_r+0x18>
9000c4f0:	6a03      	ldr	r3, [r0, #32]
9000c4f2:	b90b      	cbnz	r3, 9000c4f8 <_vfiprintf_r+0x18>
9000c4f4:	f7ff fd76 	bl	9000bfe4 <__sinit>
9000c4f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c4fa:	07d9      	lsls	r1, r3, #31
9000c4fc:	d405      	bmi.n	9000c50a <_vfiprintf_r+0x2a>
9000c4fe:	89ab      	ldrh	r3, [r5, #12]
9000c500:	059a      	lsls	r2, r3, #22
9000c502:	d402      	bmi.n	9000c50a <_vfiprintf_r+0x2a>
9000c504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c506:	f7ff ff74 	bl	9000c3f2 <__retarget_lock_acquire_recursive>
9000c50a:	89ab      	ldrh	r3, [r5, #12]
9000c50c:	071b      	lsls	r3, r3, #28
9000c50e:	d501      	bpl.n	9000c514 <_vfiprintf_r+0x34>
9000c510:	692b      	ldr	r3, [r5, #16]
9000c512:	b99b      	cbnz	r3, 9000c53c <_vfiprintf_r+0x5c>
9000c514:	4629      	mov	r1, r5
9000c516:	4630      	mov	r0, r6
9000c518:	f7ff fe8c 	bl	9000c234 <__swsetup_r>
9000c51c:	b170      	cbz	r0, 9000c53c <_vfiprintf_r+0x5c>
9000c51e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c520:	07dc      	lsls	r4, r3, #31
9000c522:	d504      	bpl.n	9000c52e <_vfiprintf_r+0x4e>
9000c524:	f04f 30ff 	mov.w	r0, #4294967295
9000c528:	b01d      	add	sp, #116	@ 0x74
9000c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c52e:	89ab      	ldrh	r3, [r5, #12]
9000c530:	0598      	lsls	r0, r3, #22
9000c532:	d4f7      	bmi.n	9000c524 <_vfiprintf_r+0x44>
9000c534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c536:	f7ff ff5d 	bl	9000c3f4 <__retarget_lock_release_recursive>
9000c53a:	e7f3      	b.n	9000c524 <_vfiprintf_r+0x44>
9000c53c:	2300      	movs	r3, #0
9000c53e:	9309      	str	r3, [sp, #36]	@ 0x24
9000c540:	2320      	movs	r3, #32
9000c542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000c546:	f8cd 800c 	str.w	r8, [sp, #12]
9000c54a:	2330      	movs	r3, #48	@ 0x30
9000c54c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000c6fc <_vfiprintf_r+0x21c>
9000c550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000c554:	f04f 0901 	mov.w	r9, #1
9000c558:	4623      	mov	r3, r4
9000c55a:	469a      	mov	sl, r3
9000c55c:	f813 2b01 	ldrb.w	r2, [r3], #1
9000c560:	b10a      	cbz	r2, 9000c566 <_vfiprintf_r+0x86>
9000c562:	2a25      	cmp	r2, #37	@ 0x25
9000c564:	d1f9      	bne.n	9000c55a <_vfiprintf_r+0x7a>
9000c566:	ebba 0b04 	subs.w	fp, sl, r4
9000c56a:	d00b      	beq.n	9000c584 <_vfiprintf_r+0xa4>
9000c56c:	465b      	mov	r3, fp
9000c56e:	4622      	mov	r2, r4
9000c570:	4629      	mov	r1, r5
9000c572:	4630      	mov	r0, r6
9000c574:	f7ff ffa1 	bl	9000c4ba <__sfputs_r>
9000c578:	3001      	adds	r0, #1
9000c57a:	f000 80a7 	beq.w	9000c6cc <_vfiprintf_r+0x1ec>
9000c57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000c580:	445a      	add	r2, fp
9000c582:	9209      	str	r2, [sp, #36]	@ 0x24
9000c584:	f89a 3000 	ldrb.w	r3, [sl]
9000c588:	2b00      	cmp	r3, #0
9000c58a:	f000 809f 	beq.w	9000c6cc <_vfiprintf_r+0x1ec>
9000c58e:	2300      	movs	r3, #0
9000c590:	f04f 32ff 	mov.w	r2, #4294967295
9000c594:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000c598:	f10a 0a01 	add.w	sl, sl, #1
9000c59c:	9304      	str	r3, [sp, #16]
9000c59e:	9307      	str	r3, [sp, #28]
9000c5a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000c5a4:	931a      	str	r3, [sp, #104]	@ 0x68
9000c5a6:	4654      	mov	r4, sl
9000c5a8:	2205      	movs	r2, #5
9000c5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c5ae:	4853      	ldr	r0, [pc, #332]	@ (9000c6fc <_vfiprintf_r+0x21c>)
9000c5b0:	f7f3 fe96 	bl	900002e0 <memchr>
9000c5b4:	9a04      	ldr	r2, [sp, #16]
9000c5b6:	b9d8      	cbnz	r0, 9000c5f0 <_vfiprintf_r+0x110>
9000c5b8:	06d1      	lsls	r1, r2, #27
9000c5ba:	bf44      	itt	mi
9000c5bc:	2320      	movmi	r3, #32
9000c5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000c5c2:	0713      	lsls	r3, r2, #28
9000c5c4:	bf44      	itt	mi
9000c5c6:	232b      	movmi	r3, #43	@ 0x2b
9000c5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000c5cc:	f89a 3000 	ldrb.w	r3, [sl]
9000c5d0:	2b2a      	cmp	r3, #42	@ 0x2a
9000c5d2:	d015      	beq.n	9000c600 <_vfiprintf_r+0x120>
9000c5d4:	9a07      	ldr	r2, [sp, #28]
9000c5d6:	4654      	mov	r4, sl
9000c5d8:	2000      	movs	r0, #0
9000c5da:	f04f 0c0a 	mov.w	ip, #10
9000c5de:	4621      	mov	r1, r4
9000c5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
9000c5e4:	3b30      	subs	r3, #48	@ 0x30
9000c5e6:	2b09      	cmp	r3, #9
9000c5e8:	d94b      	bls.n	9000c682 <_vfiprintf_r+0x1a2>
9000c5ea:	b1b0      	cbz	r0, 9000c61a <_vfiprintf_r+0x13a>
9000c5ec:	9207      	str	r2, [sp, #28]
9000c5ee:	e014      	b.n	9000c61a <_vfiprintf_r+0x13a>
9000c5f0:	eba0 0308 	sub.w	r3, r0, r8
9000c5f4:	fa09 f303 	lsl.w	r3, r9, r3
9000c5f8:	4313      	orrs	r3, r2
9000c5fa:	9304      	str	r3, [sp, #16]
9000c5fc:	46a2      	mov	sl, r4
9000c5fe:	e7d2      	b.n	9000c5a6 <_vfiprintf_r+0xc6>
9000c600:	9b03      	ldr	r3, [sp, #12]
9000c602:	1d19      	adds	r1, r3, #4
9000c604:	681b      	ldr	r3, [r3, #0]
9000c606:	9103      	str	r1, [sp, #12]
9000c608:	2b00      	cmp	r3, #0
9000c60a:	bfbb      	ittet	lt
9000c60c:	425b      	neglt	r3, r3
9000c60e:	f042 0202 	orrlt.w	r2, r2, #2
9000c612:	9307      	strge	r3, [sp, #28]
9000c614:	9307      	strlt	r3, [sp, #28]
9000c616:	bfb8      	it	lt
9000c618:	9204      	strlt	r2, [sp, #16]
9000c61a:	7823      	ldrb	r3, [r4, #0]
9000c61c:	2b2e      	cmp	r3, #46	@ 0x2e
9000c61e:	d10a      	bne.n	9000c636 <_vfiprintf_r+0x156>
9000c620:	7863      	ldrb	r3, [r4, #1]
9000c622:	2b2a      	cmp	r3, #42	@ 0x2a
9000c624:	d132      	bne.n	9000c68c <_vfiprintf_r+0x1ac>
9000c626:	9b03      	ldr	r3, [sp, #12]
9000c628:	1d1a      	adds	r2, r3, #4
9000c62a:	681b      	ldr	r3, [r3, #0]
9000c62c:	9203      	str	r2, [sp, #12]
9000c62e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000c632:	3402      	adds	r4, #2
9000c634:	9305      	str	r3, [sp, #20]
9000c636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000c70c <_vfiprintf_r+0x22c>
9000c63a:	7821      	ldrb	r1, [r4, #0]
9000c63c:	2203      	movs	r2, #3
9000c63e:	4650      	mov	r0, sl
9000c640:	f7f3 fe4e 	bl	900002e0 <memchr>
9000c644:	b138      	cbz	r0, 9000c656 <_vfiprintf_r+0x176>
9000c646:	9b04      	ldr	r3, [sp, #16]
9000c648:	eba0 000a 	sub.w	r0, r0, sl
9000c64c:	2240      	movs	r2, #64	@ 0x40
9000c64e:	4082      	lsls	r2, r0
9000c650:	4313      	orrs	r3, r2
9000c652:	3401      	adds	r4, #1
9000c654:	9304      	str	r3, [sp, #16]
9000c656:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c65a:	4829      	ldr	r0, [pc, #164]	@ (9000c700 <_vfiprintf_r+0x220>)
9000c65c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000c660:	2206      	movs	r2, #6
9000c662:	f7f3 fe3d 	bl	900002e0 <memchr>
9000c666:	2800      	cmp	r0, #0
9000c668:	d03f      	beq.n	9000c6ea <_vfiprintf_r+0x20a>
9000c66a:	4b26      	ldr	r3, [pc, #152]	@ (9000c704 <_vfiprintf_r+0x224>)
9000c66c:	bb1b      	cbnz	r3, 9000c6b6 <_vfiprintf_r+0x1d6>
9000c66e:	9b03      	ldr	r3, [sp, #12]
9000c670:	3307      	adds	r3, #7
9000c672:	f023 0307 	bic.w	r3, r3, #7
9000c676:	3308      	adds	r3, #8
9000c678:	9303      	str	r3, [sp, #12]
9000c67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000c67c:	443b      	add	r3, r7
9000c67e:	9309      	str	r3, [sp, #36]	@ 0x24
9000c680:	e76a      	b.n	9000c558 <_vfiprintf_r+0x78>
9000c682:	fb0c 3202 	mla	r2, ip, r2, r3
9000c686:	460c      	mov	r4, r1
9000c688:	2001      	movs	r0, #1
9000c68a:	e7a8      	b.n	9000c5de <_vfiprintf_r+0xfe>
9000c68c:	2300      	movs	r3, #0
9000c68e:	3401      	adds	r4, #1
9000c690:	9305      	str	r3, [sp, #20]
9000c692:	4619      	mov	r1, r3
9000c694:	f04f 0c0a 	mov.w	ip, #10
9000c698:	4620      	mov	r0, r4
9000c69a:	f810 2b01 	ldrb.w	r2, [r0], #1
9000c69e:	3a30      	subs	r2, #48	@ 0x30
9000c6a0:	2a09      	cmp	r2, #9
9000c6a2:	d903      	bls.n	9000c6ac <_vfiprintf_r+0x1cc>
9000c6a4:	2b00      	cmp	r3, #0
9000c6a6:	d0c6      	beq.n	9000c636 <_vfiprintf_r+0x156>
9000c6a8:	9105      	str	r1, [sp, #20]
9000c6aa:	e7c4      	b.n	9000c636 <_vfiprintf_r+0x156>
9000c6ac:	fb0c 2101 	mla	r1, ip, r1, r2
9000c6b0:	4604      	mov	r4, r0
9000c6b2:	2301      	movs	r3, #1
9000c6b4:	e7f0      	b.n	9000c698 <_vfiprintf_r+0x1b8>
9000c6b6:	ab03      	add	r3, sp, #12
9000c6b8:	9300      	str	r3, [sp, #0]
9000c6ba:	462a      	mov	r2, r5
9000c6bc:	4b12      	ldr	r3, [pc, #72]	@ (9000c708 <_vfiprintf_r+0x228>)
9000c6be:	a904      	add	r1, sp, #16
9000c6c0:	4630      	mov	r0, r6
9000c6c2:	f3af 8000 	nop.w
9000c6c6:	4607      	mov	r7, r0
9000c6c8:	1c78      	adds	r0, r7, #1
9000c6ca:	d1d6      	bne.n	9000c67a <_vfiprintf_r+0x19a>
9000c6cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c6ce:	07d9      	lsls	r1, r3, #31
9000c6d0:	d405      	bmi.n	9000c6de <_vfiprintf_r+0x1fe>
9000c6d2:	89ab      	ldrh	r3, [r5, #12]
9000c6d4:	059a      	lsls	r2, r3, #22
9000c6d6:	d402      	bmi.n	9000c6de <_vfiprintf_r+0x1fe>
9000c6d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c6da:	f7ff fe8b 	bl	9000c3f4 <__retarget_lock_release_recursive>
9000c6de:	89ab      	ldrh	r3, [r5, #12]
9000c6e0:	065b      	lsls	r3, r3, #25
9000c6e2:	f53f af1f 	bmi.w	9000c524 <_vfiprintf_r+0x44>
9000c6e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000c6e8:	e71e      	b.n	9000c528 <_vfiprintf_r+0x48>
9000c6ea:	ab03      	add	r3, sp, #12
9000c6ec:	9300      	str	r3, [sp, #0]
9000c6ee:	462a      	mov	r2, r5
9000c6f0:	4b05      	ldr	r3, [pc, #20]	@ (9000c708 <_vfiprintf_r+0x228>)
9000c6f2:	a904      	add	r1, sp, #16
9000c6f4:	4630      	mov	r0, r6
9000c6f6:	f000 f879 	bl	9000c7ec <_printf_i>
9000c6fa:	e7e4      	b.n	9000c6c6 <_vfiprintf_r+0x1e6>
9000c6fc:	9000f1a4 	.word	0x9000f1a4
9000c700:	9000f1ae 	.word	0x9000f1ae
9000c704:	00000000 	.word	0x00000000
9000c708:	9000c4bb 	.word	0x9000c4bb
9000c70c:	9000f1aa 	.word	0x9000f1aa

9000c710 <_printf_common>:
9000c710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c714:	4616      	mov	r6, r2
9000c716:	4698      	mov	r8, r3
9000c718:	688a      	ldr	r2, [r1, #8]
9000c71a:	690b      	ldr	r3, [r1, #16]
9000c71c:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000c720:	4293      	cmp	r3, r2
9000c722:	bfb8      	it	lt
9000c724:	4613      	movlt	r3, r2
9000c726:	6033      	str	r3, [r6, #0]
9000c728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000c72c:	4607      	mov	r7, r0
9000c72e:	460c      	mov	r4, r1
9000c730:	b10a      	cbz	r2, 9000c736 <_printf_common+0x26>
9000c732:	3301      	adds	r3, #1
9000c734:	6033      	str	r3, [r6, #0]
9000c736:	6823      	ldr	r3, [r4, #0]
9000c738:	0699      	lsls	r1, r3, #26
9000c73a:	bf42      	ittt	mi
9000c73c:	6833      	ldrmi	r3, [r6, #0]
9000c73e:	3302      	addmi	r3, #2
9000c740:	6033      	strmi	r3, [r6, #0]
9000c742:	6825      	ldr	r5, [r4, #0]
9000c744:	f015 0506 	ands.w	r5, r5, #6
9000c748:	d106      	bne.n	9000c758 <_printf_common+0x48>
9000c74a:	f104 0a19 	add.w	sl, r4, #25
9000c74e:	68e3      	ldr	r3, [r4, #12]
9000c750:	6832      	ldr	r2, [r6, #0]
9000c752:	1a9b      	subs	r3, r3, r2
9000c754:	42ab      	cmp	r3, r5
9000c756:	dc26      	bgt.n	9000c7a6 <_printf_common+0x96>
9000c758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000c75c:	6822      	ldr	r2, [r4, #0]
9000c75e:	3b00      	subs	r3, #0
9000c760:	bf18      	it	ne
9000c762:	2301      	movne	r3, #1
9000c764:	0692      	lsls	r2, r2, #26
9000c766:	d42b      	bmi.n	9000c7c0 <_printf_common+0xb0>
9000c768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000c76c:	4641      	mov	r1, r8
9000c76e:	4638      	mov	r0, r7
9000c770:	47c8      	blx	r9
9000c772:	3001      	adds	r0, #1
9000c774:	d01e      	beq.n	9000c7b4 <_printf_common+0xa4>
9000c776:	6823      	ldr	r3, [r4, #0]
9000c778:	6922      	ldr	r2, [r4, #16]
9000c77a:	f003 0306 	and.w	r3, r3, #6
9000c77e:	2b04      	cmp	r3, #4
9000c780:	bf02      	ittt	eq
9000c782:	68e5      	ldreq	r5, [r4, #12]
9000c784:	6833      	ldreq	r3, [r6, #0]
9000c786:	1aed      	subeq	r5, r5, r3
9000c788:	68a3      	ldr	r3, [r4, #8]
9000c78a:	bf0c      	ite	eq
9000c78c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000c790:	2500      	movne	r5, #0
9000c792:	4293      	cmp	r3, r2
9000c794:	bfc4      	itt	gt
9000c796:	1a9b      	subgt	r3, r3, r2
9000c798:	18ed      	addgt	r5, r5, r3
9000c79a:	2600      	movs	r6, #0
9000c79c:	341a      	adds	r4, #26
9000c79e:	42b5      	cmp	r5, r6
9000c7a0:	d11a      	bne.n	9000c7d8 <_printf_common+0xc8>
9000c7a2:	2000      	movs	r0, #0
9000c7a4:	e008      	b.n	9000c7b8 <_printf_common+0xa8>
9000c7a6:	2301      	movs	r3, #1
9000c7a8:	4652      	mov	r2, sl
9000c7aa:	4641      	mov	r1, r8
9000c7ac:	4638      	mov	r0, r7
9000c7ae:	47c8      	blx	r9
9000c7b0:	3001      	adds	r0, #1
9000c7b2:	d103      	bne.n	9000c7bc <_printf_common+0xac>
9000c7b4:	f04f 30ff 	mov.w	r0, #4294967295
9000c7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c7bc:	3501      	adds	r5, #1
9000c7be:	e7c6      	b.n	9000c74e <_printf_common+0x3e>
9000c7c0:	18e1      	adds	r1, r4, r3
9000c7c2:	1c5a      	adds	r2, r3, #1
9000c7c4:	2030      	movs	r0, #48	@ 0x30
9000c7c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000c7ca:	4422      	add	r2, r4
9000c7cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000c7d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000c7d4:	3302      	adds	r3, #2
9000c7d6:	e7c7      	b.n	9000c768 <_printf_common+0x58>
9000c7d8:	2301      	movs	r3, #1
9000c7da:	4622      	mov	r2, r4
9000c7dc:	4641      	mov	r1, r8
9000c7de:	4638      	mov	r0, r7
9000c7e0:	47c8      	blx	r9
9000c7e2:	3001      	adds	r0, #1
9000c7e4:	d0e6      	beq.n	9000c7b4 <_printf_common+0xa4>
9000c7e6:	3601      	adds	r6, #1
9000c7e8:	e7d9      	b.n	9000c79e <_printf_common+0x8e>
	...

9000c7ec <_printf_i>:
9000c7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000c7f0:	7e0f      	ldrb	r7, [r1, #24]
9000c7f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000c7f4:	2f78      	cmp	r7, #120	@ 0x78
9000c7f6:	4691      	mov	r9, r2
9000c7f8:	4680      	mov	r8, r0
9000c7fa:	460c      	mov	r4, r1
9000c7fc:	469a      	mov	sl, r3
9000c7fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000c802:	d807      	bhi.n	9000c814 <_printf_i+0x28>
9000c804:	2f62      	cmp	r7, #98	@ 0x62
9000c806:	d80a      	bhi.n	9000c81e <_printf_i+0x32>
9000c808:	2f00      	cmp	r7, #0
9000c80a:	f000 80d1 	beq.w	9000c9b0 <_printf_i+0x1c4>
9000c80e:	2f58      	cmp	r7, #88	@ 0x58
9000c810:	f000 80b8 	beq.w	9000c984 <_printf_i+0x198>
9000c814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000c818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000c81c:	e03a      	b.n	9000c894 <_printf_i+0xa8>
9000c81e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000c822:	2b15      	cmp	r3, #21
9000c824:	d8f6      	bhi.n	9000c814 <_printf_i+0x28>
9000c826:	a101      	add	r1, pc, #4	@ (adr r1, 9000c82c <_printf_i+0x40>)
9000c828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000c82c:	9000c885 	.word	0x9000c885
9000c830:	9000c899 	.word	0x9000c899
9000c834:	9000c815 	.word	0x9000c815
9000c838:	9000c815 	.word	0x9000c815
9000c83c:	9000c815 	.word	0x9000c815
9000c840:	9000c815 	.word	0x9000c815
9000c844:	9000c899 	.word	0x9000c899
9000c848:	9000c815 	.word	0x9000c815
9000c84c:	9000c815 	.word	0x9000c815
9000c850:	9000c815 	.word	0x9000c815
9000c854:	9000c815 	.word	0x9000c815
9000c858:	9000c997 	.word	0x9000c997
9000c85c:	9000c8c3 	.word	0x9000c8c3
9000c860:	9000c951 	.word	0x9000c951
9000c864:	9000c815 	.word	0x9000c815
9000c868:	9000c815 	.word	0x9000c815
9000c86c:	9000c9b9 	.word	0x9000c9b9
9000c870:	9000c815 	.word	0x9000c815
9000c874:	9000c8c3 	.word	0x9000c8c3
9000c878:	9000c815 	.word	0x9000c815
9000c87c:	9000c815 	.word	0x9000c815
9000c880:	9000c959 	.word	0x9000c959
9000c884:	6833      	ldr	r3, [r6, #0]
9000c886:	1d1a      	adds	r2, r3, #4
9000c888:	681b      	ldr	r3, [r3, #0]
9000c88a:	6032      	str	r2, [r6, #0]
9000c88c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000c890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000c894:	2301      	movs	r3, #1
9000c896:	e09c      	b.n	9000c9d2 <_printf_i+0x1e6>
9000c898:	6833      	ldr	r3, [r6, #0]
9000c89a:	6820      	ldr	r0, [r4, #0]
9000c89c:	1d19      	adds	r1, r3, #4
9000c89e:	6031      	str	r1, [r6, #0]
9000c8a0:	0606      	lsls	r6, r0, #24
9000c8a2:	d501      	bpl.n	9000c8a8 <_printf_i+0xbc>
9000c8a4:	681d      	ldr	r5, [r3, #0]
9000c8a6:	e003      	b.n	9000c8b0 <_printf_i+0xc4>
9000c8a8:	0645      	lsls	r5, r0, #25
9000c8aa:	d5fb      	bpl.n	9000c8a4 <_printf_i+0xb8>
9000c8ac:	f9b3 5000 	ldrsh.w	r5, [r3]
9000c8b0:	2d00      	cmp	r5, #0
9000c8b2:	da03      	bge.n	9000c8bc <_printf_i+0xd0>
9000c8b4:	232d      	movs	r3, #45	@ 0x2d
9000c8b6:	426d      	negs	r5, r5
9000c8b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000c8bc:	4858      	ldr	r0, [pc, #352]	@ (9000ca20 <_printf_i+0x234>)
9000c8be:	230a      	movs	r3, #10
9000c8c0:	e011      	b.n	9000c8e6 <_printf_i+0xfa>
9000c8c2:	6821      	ldr	r1, [r4, #0]
9000c8c4:	6833      	ldr	r3, [r6, #0]
9000c8c6:	0608      	lsls	r0, r1, #24
9000c8c8:	f853 5b04 	ldr.w	r5, [r3], #4
9000c8cc:	d402      	bmi.n	9000c8d4 <_printf_i+0xe8>
9000c8ce:	0649      	lsls	r1, r1, #25
9000c8d0:	bf48      	it	mi
9000c8d2:	b2ad      	uxthmi	r5, r5
9000c8d4:	2f6f      	cmp	r7, #111	@ 0x6f
9000c8d6:	4852      	ldr	r0, [pc, #328]	@ (9000ca20 <_printf_i+0x234>)
9000c8d8:	6033      	str	r3, [r6, #0]
9000c8da:	bf14      	ite	ne
9000c8dc:	230a      	movne	r3, #10
9000c8de:	2308      	moveq	r3, #8
9000c8e0:	2100      	movs	r1, #0
9000c8e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000c8e6:	6866      	ldr	r6, [r4, #4]
9000c8e8:	60a6      	str	r6, [r4, #8]
9000c8ea:	2e00      	cmp	r6, #0
9000c8ec:	db05      	blt.n	9000c8fa <_printf_i+0x10e>
9000c8ee:	6821      	ldr	r1, [r4, #0]
9000c8f0:	432e      	orrs	r6, r5
9000c8f2:	f021 0104 	bic.w	r1, r1, #4
9000c8f6:	6021      	str	r1, [r4, #0]
9000c8f8:	d04b      	beq.n	9000c992 <_printf_i+0x1a6>
9000c8fa:	4616      	mov	r6, r2
9000c8fc:	fbb5 f1f3 	udiv	r1, r5, r3
9000c900:	fb03 5711 	mls	r7, r3, r1, r5
9000c904:	5dc7      	ldrb	r7, [r0, r7]
9000c906:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000c90a:	462f      	mov	r7, r5
9000c90c:	42bb      	cmp	r3, r7
9000c90e:	460d      	mov	r5, r1
9000c910:	d9f4      	bls.n	9000c8fc <_printf_i+0x110>
9000c912:	2b08      	cmp	r3, #8
9000c914:	d10b      	bne.n	9000c92e <_printf_i+0x142>
9000c916:	6823      	ldr	r3, [r4, #0]
9000c918:	07df      	lsls	r7, r3, #31
9000c91a:	d508      	bpl.n	9000c92e <_printf_i+0x142>
9000c91c:	6923      	ldr	r3, [r4, #16]
9000c91e:	6861      	ldr	r1, [r4, #4]
9000c920:	4299      	cmp	r1, r3
9000c922:	bfde      	ittt	le
9000c924:	2330      	movle	r3, #48	@ 0x30
9000c926:	f806 3c01 	strble.w	r3, [r6, #-1]
9000c92a:	f106 36ff 	addle.w	r6, r6, #4294967295
9000c92e:	1b92      	subs	r2, r2, r6
9000c930:	6122      	str	r2, [r4, #16]
9000c932:	f8cd a000 	str.w	sl, [sp]
9000c936:	464b      	mov	r3, r9
9000c938:	aa03      	add	r2, sp, #12
9000c93a:	4621      	mov	r1, r4
9000c93c:	4640      	mov	r0, r8
9000c93e:	f7ff fee7 	bl	9000c710 <_printf_common>
9000c942:	3001      	adds	r0, #1
9000c944:	d14a      	bne.n	9000c9dc <_printf_i+0x1f0>
9000c946:	f04f 30ff 	mov.w	r0, #4294967295
9000c94a:	b004      	add	sp, #16
9000c94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c950:	6823      	ldr	r3, [r4, #0]
9000c952:	f043 0320 	orr.w	r3, r3, #32
9000c956:	6023      	str	r3, [r4, #0]
9000c958:	4832      	ldr	r0, [pc, #200]	@ (9000ca24 <_printf_i+0x238>)
9000c95a:	2778      	movs	r7, #120	@ 0x78
9000c95c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000c960:	6823      	ldr	r3, [r4, #0]
9000c962:	6831      	ldr	r1, [r6, #0]
9000c964:	061f      	lsls	r7, r3, #24
9000c966:	f851 5b04 	ldr.w	r5, [r1], #4
9000c96a:	d402      	bmi.n	9000c972 <_printf_i+0x186>
9000c96c:	065f      	lsls	r7, r3, #25
9000c96e:	bf48      	it	mi
9000c970:	b2ad      	uxthmi	r5, r5
9000c972:	6031      	str	r1, [r6, #0]
9000c974:	07d9      	lsls	r1, r3, #31
9000c976:	bf44      	itt	mi
9000c978:	f043 0320 	orrmi.w	r3, r3, #32
9000c97c:	6023      	strmi	r3, [r4, #0]
9000c97e:	b11d      	cbz	r5, 9000c988 <_printf_i+0x19c>
9000c980:	2310      	movs	r3, #16
9000c982:	e7ad      	b.n	9000c8e0 <_printf_i+0xf4>
9000c984:	4826      	ldr	r0, [pc, #152]	@ (9000ca20 <_printf_i+0x234>)
9000c986:	e7e9      	b.n	9000c95c <_printf_i+0x170>
9000c988:	6823      	ldr	r3, [r4, #0]
9000c98a:	f023 0320 	bic.w	r3, r3, #32
9000c98e:	6023      	str	r3, [r4, #0]
9000c990:	e7f6      	b.n	9000c980 <_printf_i+0x194>
9000c992:	4616      	mov	r6, r2
9000c994:	e7bd      	b.n	9000c912 <_printf_i+0x126>
9000c996:	6833      	ldr	r3, [r6, #0]
9000c998:	6825      	ldr	r5, [r4, #0]
9000c99a:	6961      	ldr	r1, [r4, #20]
9000c99c:	1d18      	adds	r0, r3, #4
9000c99e:	6030      	str	r0, [r6, #0]
9000c9a0:	062e      	lsls	r6, r5, #24
9000c9a2:	681b      	ldr	r3, [r3, #0]
9000c9a4:	d501      	bpl.n	9000c9aa <_printf_i+0x1be>
9000c9a6:	6019      	str	r1, [r3, #0]
9000c9a8:	e002      	b.n	9000c9b0 <_printf_i+0x1c4>
9000c9aa:	0668      	lsls	r0, r5, #25
9000c9ac:	d5fb      	bpl.n	9000c9a6 <_printf_i+0x1ba>
9000c9ae:	8019      	strh	r1, [r3, #0]
9000c9b0:	2300      	movs	r3, #0
9000c9b2:	6123      	str	r3, [r4, #16]
9000c9b4:	4616      	mov	r6, r2
9000c9b6:	e7bc      	b.n	9000c932 <_printf_i+0x146>
9000c9b8:	6833      	ldr	r3, [r6, #0]
9000c9ba:	1d1a      	adds	r2, r3, #4
9000c9bc:	6032      	str	r2, [r6, #0]
9000c9be:	681e      	ldr	r6, [r3, #0]
9000c9c0:	6862      	ldr	r2, [r4, #4]
9000c9c2:	2100      	movs	r1, #0
9000c9c4:	4630      	mov	r0, r6
9000c9c6:	f7f3 fc8b 	bl	900002e0 <memchr>
9000c9ca:	b108      	cbz	r0, 9000c9d0 <_printf_i+0x1e4>
9000c9cc:	1b80      	subs	r0, r0, r6
9000c9ce:	6060      	str	r0, [r4, #4]
9000c9d0:	6863      	ldr	r3, [r4, #4]
9000c9d2:	6123      	str	r3, [r4, #16]
9000c9d4:	2300      	movs	r3, #0
9000c9d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000c9da:	e7aa      	b.n	9000c932 <_printf_i+0x146>
9000c9dc:	6923      	ldr	r3, [r4, #16]
9000c9de:	4632      	mov	r2, r6
9000c9e0:	4649      	mov	r1, r9
9000c9e2:	4640      	mov	r0, r8
9000c9e4:	47d0      	blx	sl
9000c9e6:	3001      	adds	r0, #1
9000c9e8:	d0ad      	beq.n	9000c946 <_printf_i+0x15a>
9000c9ea:	6823      	ldr	r3, [r4, #0]
9000c9ec:	079b      	lsls	r3, r3, #30
9000c9ee:	d413      	bmi.n	9000ca18 <_printf_i+0x22c>
9000c9f0:	68e0      	ldr	r0, [r4, #12]
9000c9f2:	9b03      	ldr	r3, [sp, #12]
9000c9f4:	4298      	cmp	r0, r3
9000c9f6:	bfb8      	it	lt
9000c9f8:	4618      	movlt	r0, r3
9000c9fa:	e7a6      	b.n	9000c94a <_printf_i+0x15e>
9000c9fc:	2301      	movs	r3, #1
9000c9fe:	4632      	mov	r2, r6
9000ca00:	4649      	mov	r1, r9
9000ca02:	4640      	mov	r0, r8
9000ca04:	47d0      	blx	sl
9000ca06:	3001      	adds	r0, #1
9000ca08:	d09d      	beq.n	9000c946 <_printf_i+0x15a>
9000ca0a:	3501      	adds	r5, #1
9000ca0c:	68e3      	ldr	r3, [r4, #12]
9000ca0e:	9903      	ldr	r1, [sp, #12]
9000ca10:	1a5b      	subs	r3, r3, r1
9000ca12:	42ab      	cmp	r3, r5
9000ca14:	dcf2      	bgt.n	9000c9fc <_printf_i+0x210>
9000ca16:	e7eb      	b.n	9000c9f0 <_printf_i+0x204>
9000ca18:	2500      	movs	r5, #0
9000ca1a:	f104 0619 	add.w	r6, r4, #25
9000ca1e:	e7f5      	b.n	9000ca0c <_printf_i+0x220>
9000ca20:	9000f1b5 	.word	0x9000f1b5
9000ca24:	9000f1c6 	.word	0x9000f1c6

9000ca28 <__sflush_r>:
9000ca28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ca30:	0716      	lsls	r6, r2, #28
9000ca32:	4605      	mov	r5, r0
9000ca34:	460c      	mov	r4, r1
9000ca36:	d454      	bmi.n	9000cae2 <__sflush_r+0xba>
9000ca38:	684b      	ldr	r3, [r1, #4]
9000ca3a:	2b00      	cmp	r3, #0
9000ca3c:	dc02      	bgt.n	9000ca44 <__sflush_r+0x1c>
9000ca3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000ca40:	2b00      	cmp	r3, #0
9000ca42:	dd48      	ble.n	9000cad6 <__sflush_r+0xae>
9000ca44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000ca46:	2e00      	cmp	r6, #0
9000ca48:	d045      	beq.n	9000cad6 <__sflush_r+0xae>
9000ca4a:	2300      	movs	r3, #0
9000ca4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000ca50:	682f      	ldr	r7, [r5, #0]
9000ca52:	6a21      	ldr	r1, [r4, #32]
9000ca54:	602b      	str	r3, [r5, #0]
9000ca56:	d030      	beq.n	9000caba <__sflush_r+0x92>
9000ca58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000ca5a:	89a3      	ldrh	r3, [r4, #12]
9000ca5c:	0759      	lsls	r1, r3, #29
9000ca5e:	d505      	bpl.n	9000ca6c <__sflush_r+0x44>
9000ca60:	6863      	ldr	r3, [r4, #4]
9000ca62:	1ad2      	subs	r2, r2, r3
9000ca64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000ca66:	b10b      	cbz	r3, 9000ca6c <__sflush_r+0x44>
9000ca68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000ca6a:	1ad2      	subs	r2, r2, r3
9000ca6c:	2300      	movs	r3, #0
9000ca6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000ca70:	6a21      	ldr	r1, [r4, #32]
9000ca72:	4628      	mov	r0, r5
9000ca74:	47b0      	blx	r6
9000ca76:	1c43      	adds	r3, r0, #1
9000ca78:	89a3      	ldrh	r3, [r4, #12]
9000ca7a:	d106      	bne.n	9000ca8a <__sflush_r+0x62>
9000ca7c:	6829      	ldr	r1, [r5, #0]
9000ca7e:	291d      	cmp	r1, #29
9000ca80:	d82b      	bhi.n	9000cada <__sflush_r+0xb2>
9000ca82:	4a2a      	ldr	r2, [pc, #168]	@ (9000cb2c <__sflush_r+0x104>)
9000ca84:	40ca      	lsrs	r2, r1
9000ca86:	07d6      	lsls	r6, r2, #31
9000ca88:	d527      	bpl.n	9000cada <__sflush_r+0xb2>
9000ca8a:	2200      	movs	r2, #0
9000ca8c:	6062      	str	r2, [r4, #4]
9000ca8e:	04d9      	lsls	r1, r3, #19
9000ca90:	6922      	ldr	r2, [r4, #16]
9000ca92:	6022      	str	r2, [r4, #0]
9000ca94:	d504      	bpl.n	9000caa0 <__sflush_r+0x78>
9000ca96:	1c42      	adds	r2, r0, #1
9000ca98:	d101      	bne.n	9000ca9e <__sflush_r+0x76>
9000ca9a:	682b      	ldr	r3, [r5, #0]
9000ca9c:	b903      	cbnz	r3, 9000caa0 <__sflush_r+0x78>
9000ca9e:	6560      	str	r0, [r4, #84]	@ 0x54
9000caa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000caa2:	602f      	str	r7, [r5, #0]
9000caa4:	b1b9      	cbz	r1, 9000cad6 <__sflush_r+0xae>
9000caa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000caaa:	4299      	cmp	r1, r3
9000caac:	d002      	beq.n	9000cab4 <__sflush_r+0x8c>
9000caae:	4628      	mov	r0, r5
9000cab0:	f7ff fca2 	bl	9000c3f8 <_free_r>
9000cab4:	2300      	movs	r3, #0
9000cab6:	6363      	str	r3, [r4, #52]	@ 0x34
9000cab8:	e00d      	b.n	9000cad6 <__sflush_r+0xae>
9000caba:	2301      	movs	r3, #1
9000cabc:	4628      	mov	r0, r5
9000cabe:	47b0      	blx	r6
9000cac0:	4602      	mov	r2, r0
9000cac2:	1c50      	adds	r0, r2, #1
9000cac4:	d1c9      	bne.n	9000ca5a <__sflush_r+0x32>
9000cac6:	682b      	ldr	r3, [r5, #0]
9000cac8:	2b00      	cmp	r3, #0
9000caca:	d0c6      	beq.n	9000ca5a <__sflush_r+0x32>
9000cacc:	2b1d      	cmp	r3, #29
9000cace:	d001      	beq.n	9000cad4 <__sflush_r+0xac>
9000cad0:	2b16      	cmp	r3, #22
9000cad2:	d11e      	bne.n	9000cb12 <__sflush_r+0xea>
9000cad4:	602f      	str	r7, [r5, #0]
9000cad6:	2000      	movs	r0, #0
9000cad8:	e022      	b.n	9000cb20 <__sflush_r+0xf8>
9000cada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cade:	b21b      	sxth	r3, r3
9000cae0:	e01b      	b.n	9000cb1a <__sflush_r+0xf2>
9000cae2:	690f      	ldr	r7, [r1, #16]
9000cae4:	2f00      	cmp	r7, #0
9000cae6:	d0f6      	beq.n	9000cad6 <__sflush_r+0xae>
9000cae8:	0793      	lsls	r3, r2, #30
9000caea:	680e      	ldr	r6, [r1, #0]
9000caec:	bf08      	it	eq
9000caee:	694b      	ldreq	r3, [r1, #20]
9000caf0:	600f      	str	r7, [r1, #0]
9000caf2:	bf18      	it	ne
9000caf4:	2300      	movne	r3, #0
9000caf6:	eba6 0807 	sub.w	r8, r6, r7
9000cafa:	608b      	str	r3, [r1, #8]
9000cafc:	f1b8 0f00 	cmp.w	r8, #0
9000cb00:	dde9      	ble.n	9000cad6 <__sflush_r+0xae>
9000cb02:	6a21      	ldr	r1, [r4, #32]
9000cb04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000cb06:	4643      	mov	r3, r8
9000cb08:	463a      	mov	r2, r7
9000cb0a:	4628      	mov	r0, r5
9000cb0c:	47b0      	blx	r6
9000cb0e:	2800      	cmp	r0, #0
9000cb10:	dc08      	bgt.n	9000cb24 <__sflush_r+0xfc>
9000cb12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cb16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cb1a:	81a3      	strh	r3, [r4, #12]
9000cb1c:	f04f 30ff 	mov.w	r0, #4294967295
9000cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000cb24:	4407      	add	r7, r0
9000cb26:	eba8 0800 	sub.w	r8, r8, r0
9000cb2a:	e7e7      	b.n	9000cafc <__sflush_r+0xd4>
9000cb2c:	20400001 	.word	0x20400001

9000cb30 <_fflush_r>:
9000cb30:	b538      	push	{r3, r4, r5, lr}
9000cb32:	690b      	ldr	r3, [r1, #16]
9000cb34:	4605      	mov	r5, r0
9000cb36:	460c      	mov	r4, r1
9000cb38:	b913      	cbnz	r3, 9000cb40 <_fflush_r+0x10>
9000cb3a:	2500      	movs	r5, #0
9000cb3c:	4628      	mov	r0, r5
9000cb3e:	bd38      	pop	{r3, r4, r5, pc}
9000cb40:	b118      	cbz	r0, 9000cb4a <_fflush_r+0x1a>
9000cb42:	6a03      	ldr	r3, [r0, #32]
9000cb44:	b90b      	cbnz	r3, 9000cb4a <_fflush_r+0x1a>
9000cb46:	f7ff fa4d 	bl	9000bfe4 <__sinit>
9000cb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cb4e:	2b00      	cmp	r3, #0
9000cb50:	d0f3      	beq.n	9000cb3a <_fflush_r+0xa>
9000cb52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000cb54:	07d0      	lsls	r0, r2, #31
9000cb56:	d404      	bmi.n	9000cb62 <_fflush_r+0x32>
9000cb58:	0599      	lsls	r1, r3, #22
9000cb5a:	d402      	bmi.n	9000cb62 <_fflush_r+0x32>
9000cb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cb5e:	f7ff fc48 	bl	9000c3f2 <__retarget_lock_acquire_recursive>
9000cb62:	4628      	mov	r0, r5
9000cb64:	4621      	mov	r1, r4
9000cb66:	f7ff ff5f 	bl	9000ca28 <__sflush_r>
9000cb6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000cb6c:	07da      	lsls	r2, r3, #31
9000cb6e:	4605      	mov	r5, r0
9000cb70:	d4e4      	bmi.n	9000cb3c <_fflush_r+0xc>
9000cb72:	89a3      	ldrh	r3, [r4, #12]
9000cb74:	059b      	lsls	r3, r3, #22
9000cb76:	d4e1      	bmi.n	9000cb3c <_fflush_r+0xc>
9000cb78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cb7a:	f7ff fc3b 	bl	9000c3f4 <__retarget_lock_release_recursive>
9000cb7e:	e7dd      	b.n	9000cb3c <_fflush_r+0xc>

9000cb80 <__swhatbuf_r>:
9000cb80:	b570      	push	{r4, r5, r6, lr}
9000cb82:	460c      	mov	r4, r1
9000cb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cb88:	2900      	cmp	r1, #0
9000cb8a:	b096      	sub	sp, #88	@ 0x58
9000cb8c:	4615      	mov	r5, r2
9000cb8e:	461e      	mov	r6, r3
9000cb90:	da0d      	bge.n	9000cbae <__swhatbuf_r+0x2e>
9000cb92:	89a3      	ldrh	r3, [r4, #12]
9000cb94:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000cb98:	f04f 0100 	mov.w	r1, #0
9000cb9c:	bf14      	ite	ne
9000cb9e:	2340      	movne	r3, #64	@ 0x40
9000cba0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000cba4:	2000      	movs	r0, #0
9000cba6:	6031      	str	r1, [r6, #0]
9000cba8:	602b      	str	r3, [r5, #0]
9000cbaa:	b016      	add	sp, #88	@ 0x58
9000cbac:	bd70      	pop	{r4, r5, r6, pc}
9000cbae:	466a      	mov	r2, sp
9000cbb0:	f000 f848 	bl	9000cc44 <_fstat_r>
9000cbb4:	2800      	cmp	r0, #0
9000cbb6:	dbec      	blt.n	9000cb92 <__swhatbuf_r+0x12>
9000cbb8:	9901      	ldr	r1, [sp, #4]
9000cbba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000cbbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000cbc2:	4259      	negs	r1, r3
9000cbc4:	4159      	adcs	r1, r3
9000cbc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000cbca:	e7eb      	b.n	9000cba4 <__swhatbuf_r+0x24>

9000cbcc <__smakebuf_r>:
9000cbcc:	898b      	ldrh	r3, [r1, #12]
9000cbce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000cbd0:	079d      	lsls	r5, r3, #30
9000cbd2:	4606      	mov	r6, r0
9000cbd4:	460c      	mov	r4, r1
9000cbd6:	d507      	bpl.n	9000cbe8 <__smakebuf_r+0x1c>
9000cbd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000cbdc:	6023      	str	r3, [r4, #0]
9000cbde:	6123      	str	r3, [r4, #16]
9000cbe0:	2301      	movs	r3, #1
9000cbe2:	6163      	str	r3, [r4, #20]
9000cbe4:	b003      	add	sp, #12
9000cbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000cbe8:	ab01      	add	r3, sp, #4
9000cbea:	466a      	mov	r2, sp
9000cbec:	f7ff ffc8 	bl	9000cb80 <__swhatbuf_r>
9000cbf0:	9f00      	ldr	r7, [sp, #0]
9000cbf2:	4605      	mov	r5, r0
9000cbf4:	4639      	mov	r1, r7
9000cbf6:	4630      	mov	r0, r6
9000cbf8:	f7ff f8dc 	bl	9000bdb4 <_malloc_r>
9000cbfc:	b948      	cbnz	r0, 9000cc12 <__smakebuf_r+0x46>
9000cbfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cc02:	059a      	lsls	r2, r3, #22
9000cc04:	d4ee      	bmi.n	9000cbe4 <__smakebuf_r+0x18>
9000cc06:	f023 0303 	bic.w	r3, r3, #3
9000cc0a:	f043 0302 	orr.w	r3, r3, #2
9000cc0e:	81a3      	strh	r3, [r4, #12]
9000cc10:	e7e2      	b.n	9000cbd8 <__smakebuf_r+0xc>
9000cc12:	89a3      	ldrh	r3, [r4, #12]
9000cc14:	6020      	str	r0, [r4, #0]
9000cc16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000cc1a:	81a3      	strh	r3, [r4, #12]
9000cc1c:	9b01      	ldr	r3, [sp, #4]
9000cc1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000cc22:	b15b      	cbz	r3, 9000cc3c <__smakebuf_r+0x70>
9000cc24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000cc28:	4630      	mov	r0, r6
9000cc2a:	f000 f81d 	bl	9000cc68 <_isatty_r>
9000cc2e:	b128      	cbz	r0, 9000cc3c <__smakebuf_r+0x70>
9000cc30:	89a3      	ldrh	r3, [r4, #12]
9000cc32:	f023 0303 	bic.w	r3, r3, #3
9000cc36:	f043 0301 	orr.w	r3, r3, #1
9000cc3a:	81a3      	strh	r3, [r4, #12]
9000cc3c:	89a3      	ldrh	r3, [r4, #12]
9000cc3e:	431d      	orrs	r5, r3
9000cc40:	81a5      	strh	r5, [r4, #12]
9000cc42:	e7cf      	b.n	9000cbe4 <__smakebuf_r+0x18>

9000cc44 <_fstat_r>:
9000cc44:	b538      	push	{r3, r4, r5, lr}
9000cc46:	4d07      	ldr	r5, [pc, #28]	@ (9000cc64 <_fstat_r+0x20>)
9000cc48:	2300      	movs	r3, #0
9000cc4a:	4604      	mov	r4, r0
9000cc4c:	4608      	mov	r0, r1
9000cc4e:	4611      	mov	r1, r2
9000cc50:	602b      	str	r3, [r5, #0]
9000cc52:	f7f4 f89e 	bl	90000d92 <_fstat>
9000cc56:	1c43      	adds	r3, r0, #1
9000cc58:	d102      	bne.n	9000cc60 <_fstat_r+0x1c>
9000cc5a:	682b      	ldr	r3, [r5, #0]
9000cc5c:	b103      	cbz	r3, 9000cc60 <_fstat_r+0x1c>
9000cc5e:	6023      	str	r3, [r4, #0]
9000cc60:	bd38      	pop	{r3, r4, r5, pc}
9000cc62:	bf00      	nop
9000cc64:	2000148c 	.word	0x2000148c

9000cc68 <_isatty_r>:
9000cc68:	b538      	push	{r3, r4, r5, lr}
9000cc6a:	4d06      	ldr	r5, [pc, #24]	@ (9000cc84 <_isatty_r+0x1c>)
9000cc6c:	2300      	movs	r3, #0
9000cc6e:	4604      	mov	r4, r0
9000cc70:	4608      	mov	r0, r1
9000cc72:	602b      	str	r3, [r5, #0]
9000cc74:	f7f4 f89d 	bl	90000db2 <_isatty>
9000cc78:	1c43      	adds	r3, r0, #1
9000cc7a:	d102      	bne.n	9000cc82 <_isatty_r+0x1a>
9000cc7c:	682b      	ldr	r3, [r5, #0]
9000cc7e:	b103      	cbz	r3, 9000cc82 <_isatty_r+0x1a>
9000cc80:	6023      	str	r3, [r4, #0]
9000cc82:	bd38      	pop	{r3, r4, r5, pc}
9000cc84:	2000148c 	.word	0x2000148c

9000cc88 <_init>:
9000cc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc8a:	bf00      	nop
9000cc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cc8e:	bc08      	pop	{r3}
9000cc90:	469e      	mov	lr, r3
9000cc92:	4770      	bx	lr

9000cc94 <_fini>:
9000cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc96:	bf00      	nop
9000cc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cc9a:	bc08      	pop	{r3}
9000cc9c:	469e      	mov	lr, r3
9000cc9e:	4770      	bx	lr
