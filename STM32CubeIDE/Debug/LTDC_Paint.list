
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9fc  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002534  9000cc9c  9000cc9c  0000dc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000f1d0  9000f1d0  000110cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000f1d0  9000f1d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000f1d8  9000f1d8  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000f1d8  9000f1d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000f1dc  9000f1dc  000101dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000f1e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200000d0  9000f2ac  000110d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20001498  9000f2ac  00011498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002a706  00000000  00000000  000110fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000068  00000000  00000000  0003b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002a5be  00000000  00000000  0003b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005059  00000000  00000000  00065e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020f8  00000000  00000000  0006ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018db14  00000000  00000000  0006cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000019a0  00000000  00000000  001faa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00040452  00000000  00000000  001fc42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0023c87e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000095c0  00000000  00000000  0023c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000cc84 	.word	0x9000cc84

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000cc84 	.word	0x9000cc84

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900006ac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 900006e8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900006b0:	f002 fc60 	bl	90002f74 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900006b4:	f002 fbfc 	bl	90002eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900006b8:	480c      	ldr	r0, [pc, #48]	@ (900006ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900006ba:	490d      	ldr	r1, [pc, #52]	@ (900006f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900006bc:	4a0d      	ldr	r2, [pc, #52]	@ (900006f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
900006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
900006c0:	e002      	b.n	900006c8 <LoopCopyDataInit>

900006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900006c6:	3304      	adds	r3, #4

900006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
900006cc:	d3f9      	bcc.n	900006c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900006ce:	4a0a      	ldr	r2, [pc, #40]	@ (900006f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900006d0:	4c0a      	ldr	r4, [pc, #40]	@ (900006fc <LoopFillZerobss+0x22>)
  movs r3, #0
900006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
900006d4:	e001      	b.n	900006da <LoopFillZerobss>

900006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900006d8:	3204      	adds	r2, #4

900006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
900006dc:	d3fb      	bcc.n	900006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
900006de:	f00b fe61 	bl	9000c3a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900006e2:	f000 f827 	bl	90000734 <main>
  bx  lr
900006e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900006e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
900006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
900006f0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
900006f4:	9000f1e0 	.word	0x9000f1e0
  ldr r2, =_sbss
900006f8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
900006fc:	20001498 	.word	0x20001498

90000700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000700:	e7fe      	b.n	90000700 <ADC3_IRQHandler>
	...

90000704 <__io_putchar>:
static void MPU_Config(void);
static void GPIO_Init(void);
static void MX_USART3_UART_Init(void);
void readFlexiKeyboard();

int __io_putchar(int ch) {
90000704:	b580      	push	{r7, lr}
90000706:	b082      	sub	sp, #8
90000708:	af00      	add	r7, sp, #0
9000070a:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
9000070c:	1d39      	adds	r1, r7, #4
9000070e:	f04f 33ff 	mov.w	r3, #4294967295
90000712:	2201      	movs	r2, #1
90000714:	4806      	ldr	r0, [pc, #24]	@ (90000730 <__io_putchar+0x2c>)
90000716:	f009 f9e7 	bl	90009ae8 <HAL_UART_Transmit>
9000071a:	4603      	mov	r3, r0
9000071c:	2b00      	cmp	r3, #0
9000071e:	d002      	beq.n	90000726 <__io_putchar+0x22>
    return -1;
90000720:	f04f 33ff 	mov.w	r3, #4294967295
90000724:	e000      	b.n	90000728 <__io_putchar+0x24>
  }
  return ch;
90000726:	687b      	ldr	r3, [r7, #4]
}
90000728:	4618      	mov	r0, r3
9000072a:	3708      	adds	r7, #8
9000072c:	46bd      	mov	sp, r7
9000072e:	bd80      	pop	{r7, pc}
90000730:	200000f8 	.word	0x200000f8

90000734 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000734:	b580      	push	{r7, lr}
90000736:	af00      	add	r7, sp, #0
	Hello();
90000738:	f00a ff0e 	bl	9000b558 <Hello>
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
9000073c:	f000 fc18 	bl	90000f70 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
90000740:	f000 fb84 	bl	90000e4c <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
90000744:	f002 fc2e 	bl	90002fa4 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000748:	f000 fa7c 	bl	90000c44 <SystemClock_Config>

  MX_USART3_UART_Init();
9000074c:	f000 f9c0 	bl	90000ad0 <MX_USART3_UART_Init>

  printf("Hi there :)!\r\n");
90000750:	480c      	ldr	r0, [pc, #48]	@ (90000784 <main+0x50>)
90000752:	f00b fce3 	bl	9000c11c <puts>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
90000756:	2000      	movs	r0, #0
90000758:	f000 ff3a 	bl	900015d0 <BSP_LED_Init>


  InitializeLcd();
9000075c:	f000 f998 	bl	90000a90 <InitializeLcd>
  //CPU_CACHE_Disable();
  Draw_Menu();
90000760:	f000 f966 	bl	90000a30 <Draw_Menu>

  HAL_Delay(1000);
90000764:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
90000768:	f002 fcb6 	bl	900030d8 <HAL_Delay>
  GPIO_Init(); // has to be AFTER BSP_LCD_Init, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
9000076c:	f000 f896 	bl	9000089c <GPIO_Init>

  CPU_CACHE_Enable();
90000770:	f000 fb6c 	bl	90000e4c <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
  {
	  HAL_Delay(100);
90000774:	2064      	movs	r0, #100	@ 0x64
90000776:	f002 fcaf 	bl	900030d8 <HAL_Delay>
	  readFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
9000077a:	f000 f845 	bl	90000808 <readFlexiKeyboard>
	  HAL_Delay(100);
9000077e:	bf00      	nop
90000780:	e7f8      	b.n	90000774 <main+0x40>
90000782:	bf00      	nop
90000784:	9000cc9c 	.word	0x9000cc9c

90000788 <setAllRowsInactive>:
  }
}

void setAllRowsInactive(void)
{
90000788:	b580      	push	{r7, lr}
9000078a:	b082      	sub	sp, #8
9000078c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000078e:	2300      	movs	r3, #0
90000790:	607b      	str	r3, [r7, #4]
90000792:	e00f      	b.n	900007b4 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
90000794:	4a0b      	ldr	r2, [pc, #44]	@ (900007c4 <setAllRowsInactive+0x3c>)
90000796:	687b      	ldr	r3, [r7, #4]
90000798:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000079c:	4a09      	ldr	r2, [pc, #36]	@ (900007c4 <setAllRowsInactive+0x3c>)
9000079e:	687b      	ldr	r3, [r7, #4]
900007a0:	00db      	lsls	r3, r3, #3
900007a2:	4413      	add	r3, r2
900007a4:	889b      	ldrh	r3, [r3, #4]
900007a6:	2200      	movs	r2, #0
900007a8:	4619      	mov	r1, r3
900007aa:	f003 fafb 	bl	90003da4 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
900007ae:	687b      	ldr	r3, [r7, #4]
900007b0:	3301      	adds	r3, #1
900007b2:	607b      	str	r3, [r7, #4]
900007b4:	687b      	ldr	r3, [r7, #4]
900007b6:	2b04      	cmp	r3, #4
900007b8:	ddec      	ble.n	90000794 <setAllRowsInactive+0xc>
    }
}
900007ba:	bf00      	nop
900007bc:	bf00      	nop
900007be:	3708      	adds	r7, #8
900007c0:	46bd      	mov	sp, r7
900007c2:	bd80      	pop	{r7, pc}
900007c4:	20000000 	.word	0x20000000

900007c8 <setRowActive>:

void setRowActive(int row)
{
900007c8:	b580      	push	{r7, lr}
900007ca:	b082      	sub	sp, #8
900007cc:	af00      	add	r7, sp, #0
900007ce:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
900007d0:	687b      	ldr	r3, [r7, #4]
900007d2:	2b00      	cmp	r3, #0
900007d4:	db12      	blt.n	900007fc <setRowActive+0x34>
900007d6:	687b      	ldr	r3, [r7, #4]
900007d8:	2b04      	cmp	r3, #4
900007da:	dc0f      	bgt.n	900007fc <setRowActive+0x34>
        return;

    setAllRowsInactive();
900007dc:	f7ff ffd4 	bl	90000788 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
900007e0:	4a08      	ldr	r2, [pc, #32]	@ (90000804 <setRowActive+0x3c>)
900007e2:	687b      	ldr	r3, [r7, #4]
900007e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
900007e8:	4a06      	ldr	r2, [pc, #24]	@ (90000804 <setRowActive+0x3c>)
900007ea:	687b      	ldr	r3, [r7, #4]
900007ec:	00db      	lsls	r3, r3, #3
900007ee:	4413      	add	r3, r2
900007f0:	889b      	ldrh	r3, [r3, #4]
900007f2:	2201      	movs	r2, #1
900007f4:	4619      	mov	r1, r3
900007f6:	f003 fad5 	bl	90003da4 <HAL_GPIO_WritePin>
900007fa:	e000      	b.n	900007fe <setRowActive+0x36>
        return;
900007fc:	bf00      	nop
}
900007fe:	3708      	adds	r7, #8
90000800:	46bd      	mov	sp, r7
90000802:	bd80      	pop	{r7, pc}
90000804:	20000000 	.word	0x20000000

90000808 <readFlexiKeyboard>:

void readFlexiKeyboard(void)
{
90000808:	b580      	push	{r7, lr}
9000080a:	b082      	sub	sp, #8
9000080c:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000080e:	2300      	movs	r3, #0
90000810:	607b      	str	r3, [r7, #4]
90000812:	e033      	b.n	9000087c <readFlexiKeyboard+0x74>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
90000814:	6878      	ldr	r0, [r7, #4]
90000816:	f7ff ffd7 	bl	900007c8 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000081a:	200a      	movs	r0, #10
9000081c:	f002 fc5c 	bl	900030d8 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
90000820:	2300      	movs	r3, #0
90000822:	603b      	str	r3, [r7, #0]
90000824:	e024      	b.n	90000870 <readFlexiKeyboard+0x68>
        {

        	//if (col == 2) break;
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
90000826:	4a19      	ldr	r2, [pc, #100]	@ (9000088c <readFlexiKeyboard+0x84>)
90000828:	683b      	ldr	r3, [r7, #0]
9000082a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000082e:	4917      	ldr	r1, [pc, #92]	@ (9000088c <readFlexiKeyboard+0x84>)
90000830:	683b      	ldr	r3, [r7, #0]
90000832:	00db      	lsls	r3, r3, #3
90000834:	440b      	add	r3, r1
90000836:	889b      	ldrh	r3, [r3, #4]
90000838:	4619      	mov	r1, r3
9000083a:	4610      	mov	r0, r2
9000083c:	f003 fa9a 	bl	90003d74 <HAL_GPIO_ReadPin>
90000840:	4603      	mov	r3, r0
90000842:	2b01      	cmp	r3, #1
90000844:	d111      	bne.n	9000086a <readFlexiKeyboard+0x62>
//                lastRow = row;
//                lastCol = col;
//                lastTriggerTime = now;

                // Key at (row, col) pressed!
                receivedChar = keymap[row][col];
90000846:	4912      	ldr	r1, [pc, #72]	@ (90000890 <readFlexiKeyboard+0x88>)
90000848:	687a      	ldr	r2, [r7, #4]
9000084a:	4613      	mov	r3, r2
9000084c:	009b      	lsls	r3, r3, #2
9000084e:	4413      	add	r3, r2
90000850:	18ca      	adds	r2, r1, r3
90000852:	683b      	ldr	r3, [r7, #0]
90000854:	4413      	add	r3, r2
90000856:	781a      	ldrb	r2, [r3, #0]
90000858:	4b0e      	ldr	r3, [pc, #56]	@ (90000894 <readFlexiKeyboard+0x8c>)
9000085a:	701a      	strb	r2, [r3, #0]
                printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
9000085c:	4b0d      	ldr	r3, [pc, #52]	@ (90000894 <readFlexiKeyboard+0x8c>)
9000085e:	781b      	ldrb	r3, [r3, #0]
90000860:	683a      	ldr	r2, [r7, #0]
90000862:	6879      	ldr	r1, [r7, #4]
90000864:	480c      	ldr	r0, [pc, #48]	@ (90000898 <readFlexiKeyboard+0x90>)
90000866:	f00b fbf1 	bl	9000c04c <iprintf>
        for (int col = 0; col < NUM_COLS; col++)
9000086a:	683b      	ldr	r3, [r7, #0]
9000086c:	3301      	adds	r3, #1
9000086e:	603b      	str	r3, [r7, #0]
90000870:	683b      	ldr	r3, [r7, #0]
90000872:	2b04      	cmp	r3, #4
90000874:	ddd7      	ble.n	90000826 <readFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
90000876:	687b      	ldr	r3, [r7, #4]
90000878:	3301      	adds	r3, #1
9000087a:	607b      	str	r3, [r7, #4]
9000087c:	687b      	ldr	r3, [r7, #4]
9000087e:	2b04      	cmp	r3, #4
90000880:	ddc8      	ble.n	90000814 <readFlexiKeyboard+0xc>
            }
        }

        //setAllRowsInactive();  // Set all rows HIGH before next row scan
    }
}
90000882:	bf00      	nop
90000884:	bf00      	nop
90000886:	3708      	adds	r7, #8
90000888:	46bd      	mov	sp, r7
9000088a:	bd80      	pop	{r7, pc}
9000088c:	20000028 	.word	0x20000028
90000890:	9000ccf0 	.word	0x9000ccf0
90000894:	200000ec 	.word	0x200000ec
90000898:	9000ccac 	.word	0x9000ccac

9000089c <GPIO_Init>:

static void GPIO_Init(void)
{
9000089c:	b580      	push	{r7, lr}
9000089e:	b090      	sub	sp, #64	@ 0x40
900008a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
900008a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900008a6:	2200      	movs	r2, #0
900008a8:	601a      	str	r2, [r3, #0]
900008aa:	605a      	str	r2, [r3, #4]
900008ac:	609a      	str	r2, [r3, #8]
900008ae:	60da      	str	r2, [r3, #12]
900008b0:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
900008b2:	4b5c      	ldr	r3, [pc, #368]	@ (90000a24 <GPIO_Init+0x188>)
900008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008b8:	4a5a      	ldr	r2, [pc, #360]	@ (90000a24 <GPIO_Init+0x188>)
900008ba:	f043 0301 	orr.w	r3, r3, #1
900008be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900008c2:	4b58      	ldr	r3, [pc, #352]	@ (90000a24 <GPIO_Init+0x188>)
900008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008c8:	f003 0301 	and.w	r3, r3, #1
900008cc:	623b      	str	r3, [r7, #32]
900008ce:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
900008d0:	4b54      	ldr	r3, [pc, #336]	@ (90000a24 <GPIO_Init+0x188>)
900008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008d6:	4a53      	ldr	r2, [pc, #332]	@ (90000a24 <GPIO_Init+0x188>)
900008d8:	f043 0302 	orr.w	r3, r3, #2
900008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900008e0:	4b50      	ldr	r3, [pc, #320]	@ (90000a24 <GPIO_Init+0x188>)
900008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008e6:	f003 0302 	and.w	r3, r3, #2
900008ea:	61fb      	str	r3, [r7, #28]
900008ec:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
900008ee:	4b4d      	ldr	r3, [pc, #308]	@ (90000a24 <GPIO_Init+0x188>)
900008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008f4:	4a4b      	ldr	r2, [pc, #300]	@ (90000a24 <GPIO_Init+0x188>)
900008f6:	f043 0308 	orr.w	r3, r3, #8
900008fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900008fe:	4b49      	ldr	r3, [pc, #292]	@ (90000a24 <GPIO_Init+0x188>)
90000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000904:	f003 0308 	and.w	r3, r3, #8
90000908:	61bb      	str	r3, [r7, #24]
9000090a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000090c:	4b45      	ldr	r3, [pc, #276]	@ (90000a24 <GPIO_Init+0x188>)
9000090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000912:	4a44      	ldr	r2, [pc, #272]	@ (90000a24 <GPIO_Init+0x188>)
90000914:	f043 0310 	orr.w	r3, r3, #16
90000918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000091c:	4b41      	ldr	r3, [pc, #260]	@ (90000a24 <GPIO_Init+0x188>)
9000091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000922:	f003 0310 	and.w	r3, r3, #16
90000926:	617b      	str	r3, [r7, #20]
90000928:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000092a:	4b3e      	ldr	r3, [pc, #248]	@ (90000a24 <GPIO_Init+0x188>)
9000092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000930:	4a3c      	ldr	r2, [pc, #240]	@ (90000a24 <GPIO_Init+0x188>)
90000932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90000936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000093a:	4b3a      	ldr	r3, [pc, #232]	@ (90000a24 <GPIO_Init+0x188>)
9000093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90000944:	613b      	str	r3, [r7, #16]
90000946:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
90000948:	4b36      	ldr	r3, [pc, #216]	@ (90000a24 <GPIO_Init+0x188>)
9000094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000094e:	4a35      	ldr	r2, [pc, #212]	@ (90000a24 <GPIO_Init+0x188>)
90000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000958:	4b32      	ldr	r3, [pc, #200]	@ (90000a24 <GPIO_Init+0x188>)
9000095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90000962:	60fb      	str	r3, [r7, #12]
90000964:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
90000966:	4b2f      	ldr	r3, [pc, #188]	@ (90000a24 <GPIO_Init+0x188>)
90000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000096c:	4a2d      	ldr	r2, [pc, #180]	@ (90000a24 <GPIO_Init+0x188>)
9000096e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90000972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000976:	4b2b      	ldr	r3, [pc, #172]	@ (90000a24 <GPIO_Init+0x188>)
90000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000097c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90000980:	60bb      	str	r3, [r7, #8]
90000982:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90000984:	4b27      	ldr	r3, [pc, #156]	@ (90000a24 <GPIO_Init+0x188>)
90000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000098a:	4a26      	ldr	r2, [pc, #152]	@ (90000a24 <GPIO_Init+0x188>)
9000098c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90000990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000994:	4b23      	ldr	r3, [pc, #140]	@ (90000a24 <GPIO_Init+0x188>)
90000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000099a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000099e:	607b      	str	r3, [r7, #4]
900009a0:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009a2:	2301      	movs	r3, #1
900009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
900009a6:	2300      	movs	r3, #0
900009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009aa:	2300      	movs	r3, #0
900009ac:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
900009ae:	2300      	movs	r3, #0
900009b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
900009b2:	e012      	b.n	900009da <GPIO_Init+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
900009b4:	4a1c      	ldr	r2, [pc, #112]	@ (90000a28 <GPIO_Init+0x18c>)
900009b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009b8:	00db      	lsls	r3, r3, #3
900009ba:	4413      	add	r3, r2
900009bc:	889b      	ldrh	r3, [r3, #4]
900009be:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
900009c0:	4a19      	ldr	r2, [pc, #100]	@ (90000a28 <GPIO_Init+0x18c>)
900009c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
900009c8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
900009cc:	4611      	mov	r1, r2
900009ce:	4618      	mov	r0, r3
900009d0:	f003 f820 	bl	90003a14 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
900009d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009d6:	3301      	adds	r3, #1
900009d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
900009da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009dc:	2b04      	cmp	r3, #4
900009de:	dde9      	ble.n	900009b4 <GPIO_Init+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900009e0:	2300      	movs	r3, #0
900009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
900009e4:	2302      	movs	r3, #2
900009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
900009e8:	2300      	movs	r3, #0
900009ea:	63bb      	str	r3, [r7, #56]	@ 0x38
900009ec:	e012      	b.n	90000a14 <GPIO_Init+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
900009ee:	4a0f      	ldr	r2, [pc, #60]	@ (90000a2c <GPIO_Init+0x190>)
900009f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900009f2:	00db      	lsls	r3, r3, #3
900009f4:	4413      	add	r3, r2
900009f6:	889b      	ldrh	r3, [r3, #4]
900009f8:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
900009fa:	4a0c      	ldr	r2, [pc, #48]	@ (90000a2c <GPIO_Init+0x190>)
900009fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900009fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90000a02:	f107 0224 	add.w	r2, r7, #36	@ 0x24
90000a06:	4611      	mov	r1, r2
90000a08:	4618      	mov	r0, r3
90000a0a:	f003 f803 	bl	90003a14 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
90000a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90000a10:	3301      	adds	r3, #1
90000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
90000a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90000a16:	2b04      	cmp	r3, #4
90000a18:	dde9      	ble.n	900009ee <GPIO_Init+0x152>
	}
}
90000a1a:	bf00      	nop
90000a1c:	bf00      	nop
90000a1e:	3740      	adds	r7, #64	@ 0x40
90000a20:	46bd      	mov	sp, r7
90000a22:	bd80      	pop	{r7, pc}
90000a24:	58024400 	.word	0x58024400
90000a28:	20000000 	.word	0x20000000
90000a2c:	20000028 	.word	0x20000028

90000a30 <Draw_Menu>:
  * @brief  Draws the menu.
  * @param  None
  * @retval None
  */
static void Draw_Menu(void)
{ 
90000a30:	b580      	push	{r7, lr}
90000a32:	b082      	sub	sp, #8
90000a34:	af00      	add	r7, sp, #0
  UTIL_LCD_SetLayer(0);
90000a36:	2000      	movs	r0, #0
90000a38:	f00a fe94 	bl	9000b764 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000a3c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000a40:	f00a ff06 	bl	9000b850 <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90000a44:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90000a48:	f00a feaa 	bl	9000b7a0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90000a4c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000a50:	f00a feba 	bl	9000b7c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90000a54:	480c      	ldr	r0, [pc, #48]	@ (90000a88 <Draw_Menu+0x58>)
90000a56:	f00a fecb 	bl	9000b7f0 <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
90000a5a:	2300      	movs	r3, #0
90000a5c:	607b      	str	r3, [r7, #4]
90000a5e:	e00a      	b.n	90000a76 <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Bumbajs ubumbadadej", LEFT_MODE);
90000a60:	687b      	ldr	r3, [r7, #4]
90000a62:	015b      	lsls	r3, r3, #5
90000a64:	4619      	mov	r1, r3
90000a66:	2303      	movs	r3, #3
90000a68:	4a08      	ldr	r2, [pc, #32]	@ (90000a8c <Draw_Menu+0x5c>)
90000a6a:	2000      	movs	r0, #0
90000a6c:	f00a ff3c 	bl	9000b8e8 <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90000a70:	687b      	ldr	r3, [r7, #4]
90000a72:	3301      	adds	r3, #1
90000a74:	607b      	str	r3, [r7, #4]
90000a76:	687b      	ldr	r3, [r7, #4]
90000a78:	2b07      	cmp	r3, #7
90000a7a:	ddf1      	ble.n	90000a60 <Draw_Menu+0x30>
  }
}
90000a7c:	bf00      	nop
90000a7e:	bf00      	nop
90000a80:	3708      	adds	r7, #8
90000a82:	46bd      	mov	sp, r7
90000a84:	bd80      	pop	{r7, pc}
90000a86:	bf00      	nop
90000a88:	20000068 	.word	0x20000068
90000a8c:	9000ccdc 	.word	0x9000ccdc

90000a90 <InitializeLcd>:

static void InitializeLcd(void)
{
90000a90:	b580      	push	{r7, lr}
90000a92:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90000a94:	2101      	movs	r1, #1
90000a96:	2000      	movs	r0, #0
90000a98:	f001 f9aa 	bl	90001df0 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000a9c:	4809      	ldr	r0, [pc, #36]	@ (90000ac4 <InitializeLcd+0x34>)
90000a9e:	f00a fe0b 	bl	9000b6b8 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90000aa2:	2000      	movs	r0, #0
90000aa4:	f00a fe5e 	bl	9000b764 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000aa8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000aac:	f00a fed0 	bl	9000b850 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90000ab0:	4905      	ldr	r1, [pc, #20]	@ (90000ac8 <InitializeLcd+0x38>)
90000ab2:	2000      	movs	r0, #0
90000ab4:	f001 fb56 	bl	90002164 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90000ab8:	4904      	ldr	r1, [pc, #16]	@ (90000acc <InitializeLcd+0x3c>)
90000aba:	2000      	movs	r0, #0
90000abc:	f001 fb70 	bl	900021a0 <BSP_LCD_GetYSize>
}
90000ac0:	bf00      	nop
90000ac2:	bd80      	pop	{r7, pc}
90000ac4:	9000cd98 	.word	0x9000cd98
90000ac8:	200000f0 	.word	0x200000f0
90000acc:	200000f4 	.word	0x200000f4

90000ad0 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
90000ad0:	b580      	push	{r7, lr}
90000ad2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000ad4:	4b22      	ldr	r3, [pc, #136]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000ad6:	4a23      	ldr	r2, [pc, #140]	@ (90000b64 <MX_USART3_UART_Init+0x94>)
90000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000ada:	4b21      	ldr	r3, [pc, #132]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000ae4:	2200      	movs	r2, #0
90000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000ae8:	4b1d      	ldr	r3, [pc, #116]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000aea:	2200      	movs	r2, #0
90000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000aee:	4b1c      	ldr	r3, [pc, #112]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000af0:	2200      	movs	r2, #0
90000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000af4:	4b1a      	ldr	r3, [pc, #104]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000af6:	220c      	movs	r2, #12
90000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000afa:	4b19      	ldr	r3, [pc, #100]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000afc:	2200      	movs	r2, #0
90000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000b00:	4b17      	ldr	r3, [pc, #92]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b02:	2200      	movs	r2, #0
90000b04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000b06:	4b16      	ldr	r3, [pc, #88]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b08:	2200      	movs	r2, #0
90000b0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000b0c:	4b14      	ldr	r3, [pc, #80]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b0e:	2200      	movs	r2, #0
90000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000b12:	4b13      	ldr	r3, [pc, #76]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b14:	2200      	movs	r2, #0
90000b16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000b18:	4811      	ldr	r0, [pc, #68]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b1a:	f008 ff95 	bl	90009a48 <HAL_UART_Init>
90000b1e:	4603      	mov	r3, r0
90000b20:	2b00      	cmp	r3, #0
90000b22:	d001      	beq.n	90000b28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000b24:	f000 f88a 	bl	90000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b28:	2100      	movs	r1, #0
90000b2a:	480d      	ldr	r0, [pc, #52]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b2c:	f00a f82b 	bl	9000ab86 <HAL_UARTEx_SetTxFifoThreshold>
90000b30:	4603      	mov	r3, r0
90000b32:	2b00      	cmp	r3, #0
90000b34:	d001      	beq.n	90000b3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000b36:	f000 f881 	bl	90000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b3a:	2100      	movs	r1, #0
90000b3c:	4808      	ldr	r0, [pc, #32]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b3e:	f00a f860 	bl	9000ac02 <HAL_UARTEx_SetRxFifoThreshold>
90000b42:	4603      	mov	r3, r0
90000b44:	2b00      	cmp	r3, #0
90000b46:	d001      	beq.n	90000b4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000b48:	f000 f878 	bl	90000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000b4c:	4804      	ldr	r0, [pc, #16]	@ (90000b60 <MX_USART3_UART_Init+0x90>)
90000b4e:	f009 ffe1 	bl	9000ab14 <HAL_UARTEx_DisableFifoMode>
90000b52:	4603      	mov	r3, r0
90000b54:	2b00      	cmp	r3, #0
90000b56:	d001      	beq.n	90000b5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000b58:	f000 f870 	bl	90000c3c <Error_Handler>
  }
}
90000b5c:	bf00      	nop
90000b5e:	bd80      	pop	{r7, pc}
90000b60:	200000f8 	.word	0x200000f8
90000b64:	40004800 	.word	0x40004800

90000b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000b68:	b580      	push	{r7, lr}
90000b6a:	b0ba      	sub	sp, #232	@ 0xe8
90000b6c:	af00      	add	r7, sp, #0
90000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000b74:	2200      	movs	r2, #0
90000b76:	601a      	str	r2, [r3, #0]
90000b78:	605a      	str	r2, [r3, #4]
90000b7a:	609a      	str	r2, [r3, #8]
90000b7c:	60da      	str	r2, [r3, #12]
90000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b80:	f107 0310 	add.w	r3, r7, #16
90000b84:	22c0      	movs	r2, #192	@ 0xc0
90000b86:	2100      	movs	r1, #0
90000b88:	4618      	mov	r0, r3
90000b8a:	f00b fba7 	bl	9000c2dc <memset>
  if(huart->Instance==USART3)
90000b8e:	687b      	ldr	r3, [r7, #4]
90000b90:	681b      	ldr	r3, [r3, #0]
90000b92:	4a27      	ldr	r2, [pc, #156]	@ (90000c30 <HAL_UART_MspInit+0xc8>)
90000b94:	4293      	cmp	r3, r2
90000b96:	d146      	bne.n	90000c26 <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000b98:	f04f 0202 	mov.w	r2, #2
90000b9c:	f04f 0300 	mov.w	r3, #0
90000ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000ba4:	2300      	movs	r3, #0
90000ba6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000baa:	f107 0310 	add.w	r3, r7, #16
90000bae:	4618      	mov	r0, r3
90000bb0:	f006 ff14 	bl	900079dc <HAL_RCCEx_PeriphCLKConfig>
90000bb4:	4603      	mov	r3, r0
90000bb6:	2b00      	cmp	r3, #0
90000bb8:	d001      	beq.n	90000bbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000bba:	f000 f83f 	bl	90000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (90000c34 <HAL_UART_MspInit+0xcc>)
90000bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (90000c34 <HAL_UART_MspInit+0xcc>)
90000bc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000bca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000bce:	4b19      	ldr	r3, [pc, #100]	@ (90000c34 <HAL_UART_MspInit+0xcc>)
90000bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000bd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000bd8:	60fb      	str	r3, [r7, #12]
90000bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000bdc:	4b15      	ldr	r3, [pc, #84]	@ (90000c34 <HAL_UART_MspInit+0xcc>)
90000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000be2:	4a14      	ldr	r2, [pc, #80]	@ (90000c34 <HAL_UART_MspInit+0xcc>)
90000be4:	f043 0302 	orr.w	r3, r3, #2
90000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000bec:	4b11      	ldr	r3, [pc, #68]	@ (90000c34 <HAL_UART_MspInit+0xcc>)
90000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000bf2:	f003 0302 	and.w	r3, r3, #2
90000bf6:	60bb      	str	r3, [r7, #8]
90000bf8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000bfa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c02:	2302      	movs	r3, #2
90000c04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c08:	2300      	movs	r3, #0
90000c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c0e:	2300      	movs	r3, #0
90000c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000c14:	2307      	movs	r3, #7
90000c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000c1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000c1e:	4619      	mov	r1, r3
90000c20:	4805      	ldr	r0, [pc, #20]	@ (90000c38 <HAL_UART_MspInit+0xd0>)
90000c22:	f002 fef7 	bl	90003a14 <HAL_GPIO_Init>
  }
}
90000c26:	bf00      	nop
90000c28:	37e8      	adds	r7, #232	@ 0xe8
90000c2a:	46bd      	mov	sp, r7
90000c2c:	bd80      	pop	{r7, pc}
90000c2e:	bf00      	nop
90000c30:	40004800 	.word	0x40004800
90000c34:	58024400 	.word	0x58024400
90000c38:	58020400 	.word	0x58020400

90000c3c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000c3c:	b480      	push	{r7}
90000c3e:	af00      	add	r7, sp, #0
  while(1)
90000c40:	bf00      	nop
90000c42:	e7fd      	b.n	90000c40 <Error_Handler+0x4>

90000c44 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000c44:	b580      	push	{r7, lr}
90000c46:	b0ce      	sub	sp, #312	@ 0x138
90000c48:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000c4a:	2300      	movs	r3, #0
90000c4c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000c50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c58:	2200      	movs	r2, #0
90000c5a:	601a      	str	r2, [r3, #0]
90000c5c:	4b78      	ldr	r3, [pc, #480]	@ (90000e40 <SystemClock_Config+0x1fc>)
90000c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c60:	4a77      	ldr	r2, [pc, #476]	@ (90000e40 <SystemClock_Config+0x1fc>)
90000c62:	f023 0301 	bic.w	r3, r3, #1
90000c66:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000c68:	4b75      	ldr	r3, [pc, #468]	@ (90000e40 <SystemClock_Config+0x1fc>)
90000c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c6c:	f003 0201 	and.w	r2, r3, #1
90000c70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c78:	601a      	str	r2, [r3, #0]
90000c7a:	4b72      	ldr	r3, [pc, #456]	@ (90000e44 <SystemClock_Config+0x200>)
90000c7c:	699b      	ldr	r3, [r3, #24]
90000c7e:	4a71      	ldr	r2, [pc, #452]	@ (90000e44 <SystemClock_Config+0x200>)
90000c80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000c84:	6193      	str	r3, [r2, #24]
90000c86:	4b6f      	ldr	r3, [pc, #444]	@ (90000e44 <SystemClock_Config+0x200>)
90000c88:	699b      	ldr	r3, [r3, #24]
90000c8a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c96:	601a      	str	r2, [r3, #0]
90000c98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000ca0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000ca2:	bf00      	nop
90000ca4:	4b67      	ldr	r3, [pc, #412]	@ (90000e44 <SystemClock_Config+0x200>)
90000ca6:	699b      	ldr	r3, [r3, #24]
90000ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000cb0:	d1f8      	bne.n	90000ca4 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000cb2:	2301      	movs	r3, #1
90000cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000cc0:	2300      	movs	r3, #0
90000cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000cc6:	2300      	movs	r3, #0
90000cc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000ccc:	2302      	movs	r3, #2
90000cce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000cd2:	2302      	movs	r3, #2
90000cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000cd8:	2305      	movs	r3, #5
90000cda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000cde:	23a0      	movs	r3, #160	@ 0xa0
90000ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000ce4:	2300      	movs	r3, #0
90000ce6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000cea:	2302      	movs	r3, #2
90000cec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000cf0:	2302      	movs	r3, #2
90000cf2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000cf6:	2304      	movs	r3, #4
90000cf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000cfc:	2300      	movs	r3, #0
90000cfe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000d02:	2308      	movs	r3, #8
90000d04:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000d08:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000d0c:	4618      	mov	r0, r3
90000d0e:	f005 fe7f 	bl	90006a10 <HAL_RCC_OscConfig>
90000d12:	4603      	mov	r3, r0
90000d14:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000d18:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000d1c:	2b00      	cmp	r3, #0
90000d1e:	d001      	beq.n	90000d24 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000d20:	f7ff ff8c 	bl	90000c3c <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000d24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d2c:	2205      	movs	r2, #5
90000d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d38:	2260      	movs	r2, #96	@ 0x60
90000d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000d3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d44:	2202      	movs	r2, #2
90000d46:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d50:	220a      	movs	r2, #10
90000d52:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000d54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d58:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d5c:	2212      	movs	r2, #18
90000d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000d60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d64:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d68:	2200      	movs	r2, #0
90000d6a:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000d6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d70:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000d78:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000d7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d7e:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000d82:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000d86:	f04f 0300 	mov.w	r3, #0
90000d8a:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000d8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d96:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000d9e:	f107 0308 	add.w	r3, r7, #8
90000da2:	4618      	mov	r0, r3
90000da4:	f006 fe1a 	bl	900079dc <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000da8:	233f      	movs	r3, #63	@ 0x3f
90000daa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000dae:	2303      	movs	r3, #3
90000db0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000db4:	2300      	movs	r3, #0
90000db6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000dba:	2308      	movs	r3, #8
90000dbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000dc0:	2340      	movs	r3, #64	@ 0x40
90000dc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000dc6:	2340      	movs	r3, #64	@ 0x40
90000dc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000dcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000dd0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000dd4:	2340      	movs	r3, #64	@ 0x40
90000dd6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000dda:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000dde:	2104      	movs	r1, #4
90000de0:	4618      	mov	r0, r3
90000de2:	f006 fa6f 	bl	900072c4 <HAL_RCC_ClockConfig>
90000de6:	4603      	mov	r3, r0
90000de8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000dec:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000df0:	2b00      	cmp	r3, #0
90000df2:	d001      	beq.n	90000df8 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000df4:	f7ff ff22 	bl	90000c3c <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000df8:	4b13      	ldr	r3, [pc, #76]	@ (90000e48 <SystemClock_Config+0x204>)
90000dfa:	681b      	ldr	r3, [r3, #0]
90000dfc:	4a12      	ldr	r2, [pc, #72]	@ (90000e48 <SystemClock_Config+0x204>)
90000dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000e02:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000e04:	4b10      	ldr	r3, [pc, #64]	@ (90000e48 <SystemClock_Config+0x204>)
90000e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000e0a:	4a0f      	ldr	r2, [pc, #60]	@ (90000e48 <SystemClock_Config+0x204>)
90000e0c:	f043 0302 	orr.w	r3, r3, #2
90000e10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000e14:	4b0c      	ldr	r3, [pc, #48]	@ (90000e48 <SystemClock_Config+0x204>)
90000e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000e1a:	f003 0202 	and.w	r2, r3, #2
90000e1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e22:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e26:	601a      	str	r2, [r3, #0]
90000e28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e2c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e30:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000e32:	f002 f981 	bl	90003138 <HAL_EnableCompensationCell>
}
90000e36:	bf00      	nop
90000e38:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000e3c:	46bd      	mov	sp, r7
90000e3e:	bd80      	pop	{r7, pc}
90000e40:	58000400 	.word	0x58000400
90000e44:	58024800 	.word	0x58024800
90000e48:	58024400 	.word	0x58024400

90000e4c <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000e4c:	b480      	push	{r7}
90000e4e:	b085      	sub	sp, #20
90000e50:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e52:	4b34      	ldr	r3, [pc, #208]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000e54:	695b      	ldr	r3, [r3, #20]
90000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000e5a:	2b00      	cmp	r3, #0
90000e5c:	d11b      	bne.n	90000e96 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000e5e:	f3bf 8f4f 	dsb	sy
}
90000e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e64:	f3bf 8f6f 	isb	sy
}
90000e68:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000e6a:	4b2e      	ldr	r3, [pc, #184]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000e6c:	2200      	movs	r2, #0
90000e6e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000e72:	f3bf 8f4f 	dsb	sy
}
90000e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e78:	f3bf 8f6f 	isb	sy
}
90000e7c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000e7e:	4b29      	ldr	r3, [pc, #164]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000e80:	695b      	ldr	r3, [r3, #20]
90000e82:	4a28      	ldr	r2, [pc, #160]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000e88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e8a:	f3bf 8f4f 	dsb	sy
}
90000e8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e90:	f3bf 8f6f 	isb	sy
}
90000e94:	e000      	b.n	90000e98 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e96:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e98:	4b22      	ldr	r3, [pc, #136]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000e9a:	695b      	ldr	r3, [r3, #20]
90000e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000ea0:	2b00      	cmp	r3, #0
90000ea2:	d138      	bne.n	90000f16 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000ea4:	4b1f      	ldr	r3, [pc, #124]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000ea6:	2200      	movs	r2, #0
90000ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000eac:	f3bf 8f4f 	dsb	sy
}
90000eb0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000eb8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000eba:	68fb      	ldr	r3, [r7, #12]
90000ebc:	0b5b      	lsrs	r3, r3, #13
90000ebe:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000ec2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000ec4:	68fb      	ldr	r3, [r7, #12]
90000ec6:	08db      	lsrs	r3, r3, #3
90000ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000ecc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000ece:	68bb      	ldr	r3, [r7, #8]
90000ed0:	015a      	lsls	r2, r3, #5
90000ed2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000ed6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000ed8:	687a      	ldr	r2, [r7, #4]
90000eda:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000edc:	4911      	ldr	r1, [pc, #68]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000ede:	4313      	orrs	r3, r2
90000ee0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000ee4:	687b      	ldr	r3, [r7, #4]
90000ee6:	1e5a      	subs	r2, r3, #1
90000ee8:	607a      	str	r2, [r7, #4]
90000eea:	2b00      	cmp	r3, #0
90000eec:	d1ef      	bne.n	90000ece <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000eee:	68bb      	ldr	r3, [r7, #8]
90000ef0:	1e5a      	subs	r2, r3, #1
90000ef2:	60ba      	str	r2, [r7, #8]
90000ef4:	2b00      	cmp	r3, #0
90000ef6:	d1e5      	bne.n	90000ec4 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000ef8:	f3bf 8f4f 	dsb	sy
}
90000efc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000efe:	4b09      	ldr	r3, [pc, #36]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000f00:	695b      	ldr	r3, [r3, #20]
90000f02:	4a08      	ldr	r2, [pc, #32]	@ (90000f24 <CPU_CACHE_Enable+0xd8>)
90000f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000f08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000f0a:	f3bf 8f4f 	dsb	sy
}
90000f0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000f10:	f3bf 8f6f 	isb	sy
}
90000f14:	e000      	b.n	90000f18 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000f16:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000f18:	bf00      	nop
90000f1a:	3714      	adds	r7, #20
90000f1c:	46bd      	mov	sp, r7
90000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f22:	4770      	bx	lr
90000f24:	e000ed00 	.word	0xe000ed00

90000f28 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000f28:	b580      	push	{r7, lr}
90000f2a:	b082      	sub	sp, #8
90000f2c:	af00      	add	r7, sp, #0
90000f2e:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000f30:	490e      	ldr	r1, [pc, #56]	@ (90000f6c <MX_LTDC_ClockConfig+0x44>)
90000f32:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000f36:	f04f 0300 	mov.w	r3, #0
90000f3a:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (90000f6c <MX_LTDC_ClockConfig+0x44>)
90000f40:	2205      	movs	r2, #5
90000f42:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000f44:	4b09      	ldr	r3, [pc, #36]	@ (90000f6c <MX_LTDC_ClockConfig+0x44>)
90000f46:	22c0      	movs	r2, #192	@ 0xc0
90000f48:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000f4a:	4b08      	ldr	r3, [pc, #32]	@ (90000f6c <MX_LTDC_ClockConfig+0x44>)
90000f4c:	2202      	movs	r2, #2
90000f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000f50:	4b06      	ldr	r3, [pc, #24]	@ (90000f6c <MX_LTDC_ClockConfig+0x44>)
90000f52:	2214      	movs	r2, #20
90000f54:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000f56:	4b05      	ldr	r3, [pc, #20]	@ (90000f6c <MX_LTDC_ClockConfig+0x44>)
90000f58:	2263      	movs	r2, #99	@ 0x63
90000f5a:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000f5c:	4803      	ldr	r0, [pc, #12]	@ (90000f6c <MX_LTDC_ClockConfig+0x44>)
90000f5e:	f006 fd3d 	bl	900079dc <HAL_RCCEx_PeriphCLKConfig>
90000f62:	4603      	mov	r3, r0
}
90000f64:	4618      	mov	r0, r3
90000f66:	3708      	adds	r7, #8
90000f68:	46bd      	mov	sp, r7
90000f6a:	bd80      	pop	{r7, pc}
90000f6c:	20000190 	.word	0x20000190

90000f70 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000f70:	b580      	push	{r7, lr}
90000f72:	b084      	sub	sp, #16
90000f74:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000f76:	f002 f9ff 	bl	90003378 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000f7a:	2301      	movs	r3, #1
90000f7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000f7e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000f82:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000f84:	2318      	movs	r3, #24
90000f86:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000f88:	2303      	movs	r3, #3
90000f8a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000f8c:	2300      	movs	r3, #0
90000f8e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000f90:	2301      	movs	r3, #1
90000f92:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000f94:	2300      	movs	r3, #0
90000f96:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000f98:	2301      	movs	r3, #1
90000f9a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000f9c:	2300      	movs	r3, #0
90000f9e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000fa0:	2300      	movs	r3, #0
90000fa2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000fa4:	2300      	movs	r3, #0
90000fa6:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000fa8:	463b      	mov	r3, r7
90000faa:	4618      	mov	r0, r3
90000fac:	f002 fa1c 	bl	900033e8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000fb0:	2004      	movs	r0, #4
90000fb2:	f002 f9f9 	bl	900033a8 <HAL_MPU_Enable>
}
90000fb6:	bf00      	nop
90000fb8:	3710      	adds	r7, #16
90000fba:	46bd      	mov	sp, r7
90000fbc:	bd80      	pop	{r7, pc}

90000fbe <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000fbe:	b480      	push	{r7}
90000fc0:	af00      	add	r7, sp, #0
}
90000fc2:	bf00      	nop
90000fc4:	46bd      	mov	sp, r7
90000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fca:	4770      	bx	lr

90000fcc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000fcc:	b480      	push	{r7}
90000fce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000fd0:	bf00      	nop
90000fd2:	e7fd      	b.n	90000fd0 <HardFault_Handler+0x4>

90000fd4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000fd4:	b480      	push	{r7}
90000fd6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000fd8:	bf00      	nop
90000fda:	e7fd      	b.n	90000fd8 <MemManage_Handler+0x4>

90000fdc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000fdc:	b480      	push	{r7}
90000fde:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000fe0:	bf00      	nop
90000fe2:	e7fd      	b.n	90000fe0 <BusFault_Handler+0x4>

90000fe4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000fe4:	b480      	push	{r7}
90000fe6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000fe8:	bf00      	nop
90000fea:	e7fd      	b.n	90000fe8 <UsageFault_Handler+0x4>

90000fec <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000fec:	b480      	push	{r7}
90000fee:	af00      	add	r7, sp, #0
}
90000ff0:	bf00      	nop
90000ff2:	46bd      	mov	sp, r7
90000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ff8:	4770      	bx	lr

90000ffa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000ffa:	b480      	push	{r7}
90000ffc:	af00      	add	r7, sp, #0
}
90000ffe:	bf00      	nop
90001000:	46bd      	mov	sp, r7
90001002:	f85d 7b04 	ldr.w	r7, [sp], #4
90001006:	4770      	bx	lr

90001008 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90001008:	b480      	push	{r7}
9000100a:	af00      	add	r7, sp, #0
}
9000100c:	bf00      	nop
9000100e:	46bd      	mov	sp, r7
90001010:	f85d 7b04 	ldr.w	r7, [sp], #4
90001014:	4770      	bx	lr

90001016 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90001016:	b580      	push	{r7, lr}
90001018:	af00      	add	r7, sp, #0
  HAL_IncTick();
9000101a:	f002 f83d 	bl	90003098 <HAL_IncTick>
}
9000101e:	bf00      	nop
90001020:	bd80      	pop	{r7, pc}
	...

90001024 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90001024:	b580      	push	{r7, lr}
90001026:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90001028:	4802      	ldr	r0, [pc, #8]	@ (90001034 <OTG_FS_IRQHandler+0x10>)
9000102a:	f002 fed4 	bl	90003dd6 <HAL_HCD_IRQHandler>
}
9000102e:	bf00      	nop
90001030:	bd80      	pop	{r7, pc}
90001032:	bf00      	nop
90001034:	20000254 	.word	0x20000254

90001038 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001038:	b580      	push	{r7, lr}
9000103a:	b086      	sub	sp, #24
9000103c:	af00      	add	r7, sp, #0
9000103e:	60f8      	str	r0, [r7, #12]
90001040:	60b9      	str	r1, [r7, #8]
90001042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001044:	2300      	movs	r3, #0
90001046:	617b      	str	r3, [r7, #20]
90001048:	e00a      	b.n	90001060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
9000104a:	f3af 8000 	nop.w
9000104e:	4601      	mov	r1, r0
90001050:	68bb      	ldr	r3, [r7, #8]
90001052:	1c5a      	adds	r2, r3, #1
90001054:	60ba      	str	r2, [r7, #8]
90001056:	b2ca      	uxtb	r2, r1
90001058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000105a:	697b      	ldr	r3, [r7, #20]
9000105c:	3301      	adds	r3, #1
9000105e:	617b      	str	r3, [r7, #20]
90001060:	697a      	ldr	r2, [r7, #20]
90001062:	687b      	ldr	r3, [r7, #4]
90001064:	429a      	cmp	r2, r3
90001066:	dbf0      	blt.n	9000104a <_read+0x12>
  }

  return len;
90001068:	687b      	ldr	r3, [r7, #4]
}
9000106a:	4618      	mov	r0, r3
9000106c:	3718      	adds	r7, #24
9000106e:	46bd      	mov	sp, r7
90001070:	bd80      	pop	{r7, pc}

90001072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90001072:	b580      	push	{r7, lr}
90001074:	b086      	sub	sp, #24
90001076:	af00      	add	r7, sp, #0
90001078:	60f8      	str	r0, [r7, #12]
9000107a:	60b9      	str	r1, [r7, #8]
9000107c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000107e:	2300      	movs	r3, #0
90001080:	617b      	str	r3, [r7, #20]
90001082:	e009      	b.n	90001098 <_write+0x26>
  {
    __io_putchar(*ptr++);
90001084:	68bb      	ldr	r3, [r7, #8]
90001086:	1c5a      	adds	r2, r3, #1
90001088:	60ba      	str	r2, [r7, #8]
9000108a:	781b      	ldrb	r3, [r3, #0]
9000108c:	4618      	mov	r0, r3
9000108e:	f7ff fb39 	bl	90000704 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001092:	697b      	ldr	r3, [r7, #20]
90001094:	3301      	adds	r3, #1
90001096:	617b      	str	r3, [r7, #20]
90001098:	697a      	ldr	r2, [r7, #20]
9000109a:	687b      	ldr	r3, [r7, #4]
9000109c:	429a      	cmp	r2, r3
9000109e:	dbf1      	blt.n	90001084 <_write+0x12>
  }
  return len;
900010a0:	687b      	ldr	r3, [r7, #4]
}
900010a2:	4618      	mov	r0, r3
900010a4:	3718      	adds	r7, #24
900010a6:	46bd      	mov	sp, r7
900010a8:	bd80      	pop	{r7, pc}

900010aa <_close>:

int _close(int file)
{
900010aa:	b480      	push	{r7}
900010ac:	b083      	sub	sp, #12
900010ae:	af00      	add	r7, sp, #0
900010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
900010b2:	f04f 33ff 	mov.w	r3, #4294967295
}
900010b6:	4618      	mov	r0, r3
900010b8:	370c      	adds	r7, #12
900010ba:	46bd      	mov	sp, r7
900010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900010c0:	4770      	bx	lr

900010c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
900010c2:	b480      	push	{r7}
900010c4:	b083      	sub	sp, #12
900010c6:	af00      	add	r7, sp, #0
900010c8:	6078      	str	r0, [r7, #4]
900010ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
900010cc:	683b      	ldr	r3, [r7, #0]
900010ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
900010d2:	605a      	str	r2, [r3, #4]
  return 0;
900010d4:	2300      	movs	r3, #0
}
900010d6:	4618      	mov	r0, r3
900010d8:	370c      	adds	r7, #12
900010da:	46bd      	mov	sp, r7
900010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900010e0:	4770      	bx	lr

900010e2 <_isatty>:

int _isatty(int file)
{
900010e2:	b480      	push	{r7}
900010e4:	b083      	sub	sp, #12
900010e6:	af00      	add	r7, sp, #0
900010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
900010ea:	2301      	movs	r3, #1
}
900010ec:	4618      	mov	r0, r3
900010ee:	370c      	adds	r7, #12
900010f0:	46bd      	mov	sp, r7
900010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900010f6:	4770      	bx	lr

900010f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
900010f8:	b480      	push	{r7}
900010fa:	b085      	sub	sp, #20
900010fc:	af00      	add	r7, sp, #0
900010fe:	60f8      	str	r0, [r7, #12]
90001100:	60b9      	str	r1, [r7, #8]
90001102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90001104:	2300      	movs	r3, #0
}
90001106:	4618      	mov	r0, r3
90001108:	3714      	adds	r7, #20
9000110a:	46bd      	mov	sp, r7
9000110c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001110:	4770      	bx	lr
	...

90001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001114:	b580      	push	{r7, lr}
90001116:	b086      	sub	sp, #24
90001118:	af00      	add	r7, sp, #0
9000111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
9000111c:	4a14      	ldr	r2, [pc, #80]	@ (90001170 <_sbrk+0x5c>)
9000111e:	4b15      	ldr	r3, [pc, #84]	@ (90001174 <_sbrk+0x60>)
90001120:	1ad3      	subs	r3, r2, r3
90001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001124:	697b      	ldr	r3, [r7, #20]
90001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001128:	4b13      	ldr	r3, [pc, #76]	@ (90001178 <_sbrk+0x64>)
9000112a:	681b      	ldr	r3, [r3, #0]
9000112c:	2b00      	cmp	r3, #0
9000112e:	d102      	bne.n	90001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90001130:	4b11      	ldr	r3, [pc, #68]	@ (90001178 <_sbrk+0x64>)
90001132:	4a12      	ldr	r2, [pc, #72]	@ (9000117c <_sbrk+0x68>)
90001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001136:	4b10      	ldr	r3, [pc, #64]	@ (90001178 <_sbrk+0x64>)
90001138:	681a      	ldr	r2, [r3, #0]
9000113a:	687b      	ldr	r3, [r7, #4]
9000113c:	4413      	add	r3, r2
9000113e:	693a      	ldr	r2, [r7, #16]
90001140:	429a      	cmp	r2, r3
90001142:	d207      	bcs.n	90001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
90001144:	f00b f928 	bl	9000c398 <__errno>
90001148:	4603      	mov	r3, r0
9000114a:	220c      	movs	r2, #12
9000114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
9000114e:	f04f 33ff 	mov.w	r3, #4294967295
90001152:	e009      	b.n	90001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001154:	4b08      	ldr	r3, [pc, #32]	@ (90001178 <_sbrk+0x64>)
90001156:	681b      	ldr	r3, [r3, #0]
90001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
9000115a:	4b07      	ldr	r3, [pc, #28]	@ (90001178 <_sbrk+0x64>)
9000115c:	681a      	ldr	r2, [r3, #0]
9000115e:	687b      	ldr	r3, [r7, #4]
90001160:	4413      	add	r3, r2
90001162:	4a05      	ldr	r2, [pc, #20]	@ (90001178 <_sbrk+0x64>)
90001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001166:	68fb      	ldr	r3, [r7, #12]
}
90001168:	4618      	mov	r0, r3
9000116a:	3718      	adds	r7, #24
9000116c:	46bd      	mov	sp, r7
9000116e:	bd80      	pop	{r7, pc}
90001170:	20020000 	.word	0x20020000
90001174:	00001000 	.word	0x00001000
90001178:	20000250 	.word	0x20000250
9000117c:	20001498 	.word	0x20001498

90001180 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90001180:	b580      	push	{r7, lr}
90001182:	b082      	sub	sp, #8
90001184:	af00      	add	r7, sp, #0
90001186:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001188:	687b      	ldr	r3, [r7, #4]
9000118a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000118e:	4618      	mov	r0, r3
90001190:	f00a f9ed 	bl	9000b56e <USBH_LL_IncTimer>
}
90001194:	bf00      	nop
90001196:	3708      	adds	r7, #8
90001198:	46bd      	mov	sp, r7
9000119a:	bd80      	pop	{r7, pc}

9000119c <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
9000119c:	b580      	push	{r7, lr}
9000119e:	b082      	sub	sp, #8
900011a0:	af00      	add	r7, sp, #0
900011a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
900011a4:	687b      	ldr	r3, [r7, #4]
900011a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011aa:	4618      	mov	r0, r3
900011ac:	f00a fa29 	bl	9000b602 <USBH_LL_Connect>
}
900011b0:	bf00      	nop
900011b2:	3708      	adds	r7, #8
900011b4:	46bd      	mov	sp, r7
900011b6:	bd80      	pop	{r7, pc}

900011b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
900011b8:	b580      	push	{r7, lr}
900011ba:	b082      	sub	sp, #8
900011bc:	af00      	add	r7, sp, #0
900011be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
900011c0:	687b      	ldr	r3, [r7, #4]
900011c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011c6:	4618      	mov	r0, r3
900011c8:	f00a fa32 	bl	9000b630 <USBH_LL_Disconnect>
}
900011cc:	bf00      	nop
900011ce:	3708      	adds	r7, #8
900011d0:	46bd      	mov	sp, r7
900011d2:	bd80      	pop	{r7, pc}

900011d4 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011d4:	b580      	push	{r7, lr}
900011d6:	b082      	sub	sp, #8
900011d8:	af00      	add	r7, sp, #0
900011da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
900011dc:	687b      	ldr	r3, [r7, #4]
900011de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011e2:	4618      	mov	r0, r3
900011e4:	f00a f9ed 	bl	9000b5c2 <USBH_LL_PortEnabled>
}
900011e8:	bf00      	nop
900011ea:	3708      	adds	r7, #8
900011ec:	46bd      	mov	sp, r7
900011ee:	bd80      	pop	{r7, pc}

900011f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011f0:	b580      	push	{r7, lr}
900011f2:	b082      	sub	sp, #8
900011f4:	af00      	add	r7, sp, #0
900011f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
900011f8:	687b      	ldr	r3, [r7, #4]
900011fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011fe:	4618      	mov	r0, r3
90001200:	f00a f9ed 	bl	9000b5de <USBH_LL_PortDisabled>
}
90001204:	bf00      	nop
90001206:	3708      	adds	r7, #8
90001208:	46bd      	mov	sp, r7
9000120a:	bd80      	pop	{r7, pc}

9000120c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
9000120c:	b480      	push	{r7}
9000120e:	b083      	sub	sp, #12
90001210:	af00      	add	r7, sp, #0
90001212:	6078      	str	r0, [r7, #4]
90001214:	460b      	mov	r3, r1
90001216:	70fb      	strb	r3, [r7, #3]
90001218:	4613      	mov	r3, r2
9000121a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
9000121c:	bf00      	nop
9000121e:	370c      	adds	r7, #12
90001220:	46bd      	mov	sp, r7
90001222:	f85d 7b04 	ldr.w	r7, [sp], #4
90001226:	4770      	bx	lr

90001228 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90001228:	b580      	push	{r7, lr}
9000122a:	b082      	sub	sp, #8
9000122c:	af00      	add	r7, sp, #0
9000122e:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90001230:	687b      	ldr	r3, [r7, #4]
90001232:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001236:	4618      	mov	r0, r3
90001238:	f002 fedd 	bl	90003ff6 <HAL_HCD_Stop>
  return USBH_OK;
9000123c:	2300      	movs	r3, #0
}
9000123e:	4618      	mov	r0, r3
90001240:	3708      	adds	r7, #8
90001242:	46bd      	mov	sp, r7
90001244:	bd80      	pop	{r7, pc}
	...

90001248 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001248:	b580      	push	{r7, lr}
9000124a:	b084      	sub	sp, #16
9000124c:	af00      	add	r7, sp, #0
9000124e:	6078      	str	r0, [r7, #4]
90001250:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
90001252:	687b      	ldr	r3, [r7, #4]
90001254:	2b00      	cmp	r3, #0
90001256:	d103      	bne.n	90001260 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001258:	f04f 33ff 	mov.w	r3, #4294967295
9000125c:	60fb      	str	r3, [r7, #12]
9000125e:	e02c      	b.n	900012ba <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90001260:	683b      	ldr	r3, [r7, #0]
90001262:	681a      	ldr	r2, [r3, #0]
90001264:	687b      	ldr	r3, [r7, #4]
90001266:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001268:	683b      	ldr	r3, [r7, #0]
9000126a:	685a      	ldr	r2, [r3, #4]
9000126c:	687b      	ldr	r3, [r7, #4]
9000126e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90001270:	683b      	ldr	r3, [r7, #0]
90001272:	891a      	ldrh	r2, [r3, #8]
90001274:	687b      	ldr	r3, [r7, #4]
90001276:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90001278:	683b      	ldr	r3, [r7, #0]
9000127a:	68da      	ldr	r2, [r3, #12]
9000127c:	687b      	ldr	r3, [r7, #4]
9000127e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90001280:	683b      	ldr	r3, [r7, #0]
90001282:	691a      	ldr	r2, [r3, #16]
90001284:	687b      	ldr	r3, [r7, #4]
90001286:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90001288:	683b      	ldr	r3, [r7, #0]
9000128a:	695a      	ldr	r2, [r3, #20]
9000128c:	687b      	ldr	r3, [r7, #4]
9000128e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90001290:	687b      	ldr	r3, [r7, #4]
90001292:	4a0c      	ldr	r2, [pc, #48]	@ (900012c4 <FT5336_RegisterBusIO+0x7c>)
90001294:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90001296:	687b      	ldr	r3, [r7, #4]
90001298:	4a0b      	ldr	r2, [pc, #44]	@ (900012c8 <FT5336_RegisterBusIO+0x80>)
9000129a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
9000129c:	687b      	ldr	r3, [r7, #4]
9000129e:	687a      	ldr	r2, [r7, #4]
900012a0:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900012a2:	687b      	ldr	r3, [r7, #4]
900012a4:	681b      	ldr	r3, [r3, #0]
900012a6:	2b00      	cmp	r3, #0
900012a8:	d004      	beq.n	900012b4 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900012aa:	687b      	ldr	r3, [r7, #4]
900012ac:	681b      	ldr	r3, [r3, #0]
900012ae:	4798      	blx	r3
900012b0:	60f8      	str	r0, [r7, #12]
900012b2:	e002      	b.n	900012ba <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900012b4:	f04f 33ff 	mov.w	r3, #4294967295
900012b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900012ba:	68fb      	ldr	r3, [r7, #12]
}
900012bc:	4618      	mov	r0, r3
900012be:	3710      	adds	r7, #16
900012c0:	46bd      	mov	sp, r7
900012c2:	bd80      	pop	{r7, pc}
900012c4:	900012ed 	.word	0x900012ed
900012c8:	90001321 	.word	0x90001321

900012cc <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
900012cc:	b580      	push	{r7, lr}
900012ce:	b082      	sub	sp, #8
900012d0:	af00      	add	r7, sp, #0
900012d2:	6078      	str	r0, [r7, #4]
900012d4:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900012d6:	687b      	ldr	r3, [r7, #4]
900012d8:	3318      	adds	r3, #24
900012da:	6839      	ldr	r1, [r7, #0]
900012dc:	4618      	mov	r0, r3
900012de:	f000 f850 	bl	90001382 <ft5336_chip_id>
900012e2:	4603      	mov	r3, r0
}
900012e4:	4618      	mov	r0, r3
900012e6:	3708      	adds	r7, #8
900012e8:	46bd      	mov	sp, r7
900012ea:	bd80      	pop	{r7, pc}

900012ec <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900012ec:	b590      	push	{r4, r7, lr}
900012ee:	b087      	sub	sp, #28
900012f0:	af00      	add	r7, sp, #0
900012f2:	60f8      	str	r0, [r7, #12]
900012f4:	607a      	str	r2, [r7, #4]
900012f6:	461a      	mov	r2, r3
900012f8:	460b      	mov	r3, r1
900012fa:	72fb      	strb	r3, [r7, #11]
900012fc:	4613      	mov	r3, r2
900012fe:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001300:	68fb      	ldr	r3, [r7, #12]
90001302:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001304:	697b      	ldr	r3, [r7, #20]
90001306:	691c      	ldr	r4, [r3, #16]
90001308:	697b      	ldr	r3, [r7, #20]
9000130a:	8918      	ldrh	r0, [r3, #8]
9000130c:	7afb      	ldrb	r3, [r7, #11]
9000130e:	b299      	uxth	r1, r3
90001310:	893b      	ldrh	r3, [r7, #8]
90001312:	687a      	ldr	r2, [r7, #4]
90001314:	47a0      	blx	r4
90001316:	4603      	mov	r3, r0
}
90001318:	4618      	mov	r0, r3
9000131a:	371c      	adds	r7, #28
9000131c:	46bd      	mov	sp, r7
9000131e:	bd90      	pop	{r4, r7, pc}

90001320 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001320:	b590      	push	{r4, r7, lr}
90001322:	b087      	sub	sp, #28
90001324:	af00      	add	r7, sp, #0
90001326:	60f8      	str	r0, [r7, #12]
90001328:	607a      	str	r2, [r7, #4]
9000132a:	461a      	mov	r2, r3
9000132c:	460b      	mov	r3, r1
9000132e:	72fb      	strb	r3, [r7, #11]
90001330:	4613      	mov	r3, r2
90001332:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001334:	68fb      	ldr	r3, [r7, #12]
90001336:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001338:	697b      	ldr	r3, [r7, #20]
9000133a:	68dc      	ldr	r4, [r3, #12]
9000133c:	697b      	ldr	r3, [r7, #20]
9000133e:	8918      	ldrh	r0, [r3, #8]
90001340:	7afb      	ldrb	r3, [r7, #11]
90001342:	b299      	uxth	r1, r3
90001344:	893b      	ldrh	r3, [r7, #8]
90001346:	687a      	ldr	r2, [r7, #4]
90001348:	47a0      	blx	r4
9000134a:	4603      	mov	r3, r0
}
9000134c:	4618      	mov	r0, r3
9000134e:	371c      	adds	r7, #28
90001350:	46bd      	mov	sp, r7
90001352:	bd90      	pop	{r4, r7, pc}

90001354 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90001354:	b590      	push	{r4, r7, lr}
90001356:	b085      	sub	sp, #20
90001358:	af00      	add	r7, sp, #0
9000135a:	60f8      	str	r0, [r7, #12]
9000135c:	607a      	str	r2, [r7, #4]
9000135e:	461a      	mov	r2, r3
90001360:	460b      	mov	r3, r1
90001362:	72fb      	strb	r3, [r7, #11]
90001364:	4613      	mov	r3, r2
90001366:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001368:	68fb      	ldr	r3, [r7, #12]
9000136a:	685c      	ldr	r4, [r3, #4]
9000136c:	68fb      	ldr	r3, [r7, #12]
9000136e:	6898      	ldr	r0, [r3, #8]
90001370:	893b      	ldrh	r3, [r7, #8]
90001372:	7af9      	ldrb	r1, [r7, #11]
90001374:	687a      	ldr	r2, [r7, #4]
90001376:	47a0      	blx	r4
90001378:	4603      	mov	r3, r0
}
9000137a:	4618      	mov	r0, r3
9000137c:	3714      	adds	r7, #20
9000137e:	46bd      	mov	sp, r7
90001380:	bd90      	pop	{r4, r7, pc}

90001382 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90001382:	b580      	push	{r7, lr}
90001384:	b084      	sub	sp, #16
90001386:	af00      	add	r7, sp, #0
90001388:	6078      	str	r0, [r7, #4]
9000138a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
9000138c:	2301      	movs	r3, #1
9000138e:	683a      	ldr	r2, [r7, #0]
90001390:	21a8      	movs	r1, #168	@ 0xa8
90001392:	6878      	ldr	r0, [r7, #4]
90001394:	f7ff ffde 	bl	90001354 <ft5336_read_reg>
90001398:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
9000139a:	68fb      	ldr	r3, [r7, #12]
9000139c:	2b00      	cmp	r3, #0
9000139e:	d107      	bne.n	900013b0 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900013a0:	683b      	ldr	r3, [r7, #0]
900013a2:	781a      	ldrb	r2, [r3, #0]
900013a4:	683b      	ldr	r3, [r7, #0]
900013a6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900013a8:	683b      	ldr	r3, [r7, #0]
900013aa:	781a      	ldrb	r2, [r3, #0]
900013ac:	683b      	ldr	r3, [r7, #0]
900013ae:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900013b0:	68fb      	ldr	r3, [r7, #12]
}
900013b2:	4618      	mov	r0, r3
900013b4:	3710      	adds	r7, #16
900013b6:	46bd      	mov	sp, r7
900013b8:	bd80      	pop	{r7, pc}

900013ba <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900013ba:	b580      	push	{r7, lr}
900013bc:	b084      	sub	sp, #16
900013be:	af00      	add	r7, sp, #0
900013c0:	6078      	str	r0, [r7, #4]
900013c2:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
900013c4:	f04f 33ff 	mov.w	r3, #4294967295
900013c8:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900013ca:	683b      	ldr	r3, [r7, #0]
900013cc:	681b      	ldr	r3, [r3, #0]
900013ce:	4619      	mov	r1, r3
900013d0:	6878      	ldr	r0, [r7, #4]
900013d2:	f000 f831 	bl	90001438 <MT48LC4M32B2_ClockEnable>
900013d6:	4603      	mov	r3, r0
900013d8:	2b00      	cmp	r3, #0
900013da:	d128      	bne.n	9000142e <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
900013dc:	2001      	movs	r0, #1
900013de:	f000 f8e1 	bl	900015a4 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900013e2:	683b      	ldr	r3, [r7, #0]
900013e4:	681b      	ldr	r3, [r3, #0]
900013e6:	4619      	mov	r1, r3
900013e8:	6878      	ldr	r0, [r7, #4]
900013ea:	f000 f849 	bl	90001480 <MT48LC4M32B2_Precharge>
900013ee:	4603      	mov	r3, r0
900013f0:	2b00      	cmp	r3, #0
900013f2:	d11c      	bne.n	9000142e <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
900013f4:	683b      	ldr	r3, [r7, #0]
900013f6:	6819      	ldr	r1, [r3, #0]
900013f8:	683b      	ldr	r3, [r7, #0]
900013fa:	685b      	ldr	r3, [r3, #4]
900013fc:	461a      	mov	r2, r3
900013fe:	6878      	ldr	r0, [r7, #4]
90001400:	f000 f896 	bl	90001530 <MT48LC4M32B2_RefreshMode>
90001404:	4603      	mov	r3, r0
90001406:	2b00      	cmp	r3, #0
90001408:	d111      	bne.n	9000142e <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
9000140a:	6839      	ldr	r1, [r7, #0]
9000140c:	6878      	ldr	r0, [r7, #4]
9000140e:	f000 f85b 	bl	900014c8 <MT48LC4M32B2_ModeRegConfig>
90001412:	4603      	mov	r3, r0
90001414:	2b00      	cmp	r3, #0
90001416:	d10a      	bne.n	9000142e <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001418:	683b      	ldr	r3, [r7, #0]
9000141a:	689b      	ldr	r3, [r3, #8]
9000141c:	4619      	mov	r1, r3
9000141e:	6878      	ldr	r0, [r7, #4]
90001420:	f000 f8ac 	bl	9000157c <MT48LC4M32B2_RefreshRate>
90001424:	4603      	mov	r3, r0
90001426:	2b00      	cmp	r3, #0
90001428:	d101      	bne.n	9000142e <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
9000142a:	2300      	movs	r3, #0
9000142c:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000142e:	68fb      	ldr	r3, [r7, #12]
}
90001430:	4618      	mov	r0, r3
90001432:	3710      	adds	r7, #16
90001434:	46bd      	mov	sp, r7
90001436:	bd80      	pop	{r7, pc}

90001438 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001438:	b580      	push	{r7, lr}
9000143a:	b082      	sub	sp, #8
9000143c:	af00      	add	r7, sp, #0
9000143e:	6078      	str	r0, [r7, #4]
90001440:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90001442:	4b0e      	ldr	r3, [pc, #56]	@ (9000147c <MT48LC4M32B2_ClockEnable+0x44>)
90001444:	2201      	movs	r2, #1
90001446:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001448:	4a0c      	ldr	r2, [pc, #48]	@ (9000147c <MT48LC4M32B2_ClockEnable+0x44>)
9000144a:	683b      	ldr	r3, [r7, #0]
9000144c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000144e:	4b0b      	ldr	r3, [pc, #44]	@ (9000147c <MT48LC4M32B2_ClockEnable+0x44>)
90001450:	2201      	movs	r2, #1
90001452:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001454:	4b09      	ldr	r3, [pc, #36]	@ (9000147c <MT48LC4M32B2_ClockEnable+0x44>)
90001456:	2200      	movs	r2, #0
90001458:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000145a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000145e:	4907      	ldr	r1, [pc, #28]	@ (9000147c <MT48LC4M32B2_ClockEnable+0x44>)
90001460:	6878      	ldr	r0, [r7, #4]
90001462:	f008 f92d 	bl	900096c0 <HAL_SDRAM_SendCommand>
90001466:	4603      	mov	r3, r0
90001468:	2b00      	cmp	r3, #0
9000146a:	d002      	beq.n	90001472 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
9000146c:	f04f 33ff 	mov.w	r3, #4294967295
90001470:	e000      	b.n	90001474 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001472:	2300      	movs	r3, #0
  }
}
90001474:	4618      	mov	r0, r3
90001476:	3708      	adds	r7, #8
90001478:	46bd      	mov	sp, r7
9000147a:	bd80      	pop	{r7, pc}
9000147c:	20000634 	.word	0x20000634

90001480 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001480:	b580      	push	{r7, lr}
90001482:	b082      	sub	sp, #8
90001484:	af00      	add	r7, sp, #0
90001486:	6078      	str	r0, [r7, #4]
90001488:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
9000148a:	4b0e      	ldr	r3, [pc, #56]	@ (900014c4 <MT48LC4M32B2_Precharge+0x44>)
9000148c:	2202      	movs	r2, #2
9000148e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001490:	4a0c      	ldr	r2, [pc, #48]	@ (900014c4 <MT48LC4M32B2_Precharge+0x44>)
90001492:	683b      	ldr	r3, [r7, #0]
90001494:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001496:	4b0b      	ldr	r3, [pc, #44]	@ (900014c4 <MT48LC4M32B2_Precharge+0x44>)
90001498:	2201      	movs	r2, #1
9000149a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000149c:	4b09      	ldr	r3, [pc, #36]	@ (900014c4 <MT48LC4M32B2_Precharge+0x44>)
9000149e:	2200      	movs	r2, #0
900014a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900014a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900014a6:	4907      	ldr	r1, [pc, #28]	@ (900014c4 <MT48LC4M32B2_Precharge+0x44>)
900014a8:	6878      	ldr	r0, [r7, #4]
900014aa:	f008 f909 	bl	900096c0 <HAL_SDRAM_SendCommand>
900014ae:	4603      	mov	r3, r0
900014b0:	2b00      	cmp	r3, #0
900014b2:	d002      	beq.n	900014ba <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900014b4:	f04f 33ff 	mov.w	r3, #4294967295
900014b8:	e000      	b.n	900014bc <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900014ba:	2300      	movs	r3, #0
  }
}
900014bc:	4618      	mov	r0, r3
900014be:	3708      	adds	r7, #8
900014c0:	46bd      	mov	sp, r7
900014c2:	bd80      	pop	{r7, pc}
900014c4:	20000634 	.word	0x20000634

900014c8 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900014c8:	b580      	push	{r7, lr}
900014ca:	b084      	sub	sp, #16
900014cc:	af00      	add	r7, sp, #0
900014ce:	6078      	str	r0, [r7, #4]
900014d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900014d2:	683b      	ldr	r3, [r7, #0]
900014d4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
900014d6:	683b      	ldr	r3, [r7, #0]
900014d8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900014da:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
900014dc:	683b      	ldr	r3, [r7, #0]
900014de:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
900014e0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
900014e2:	683b      	ldr	r3, [r7, #0]
900014e4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
900014e6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
900014e8:	683b      	ldr	r3, [r7, #0]
900014ea:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900014ec:	4313      	orrs	r3, r2
900014ee:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
900014f0:	4b0e      	ldr	r3, [pc, #56]	@ (9000152c <MT48LC4M32B2_ModeRegConfig+0x64>)
900014f2:	2204      	movs	r2, #4
900014f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
900014f6:	683b      	ldr	r3, [r7, #0]
900014f8:	681b      	ldr	r3, [r3, #0]
900014fa:	4a0c      	ldr	r2, [pc, #48]	@ (9000152c <MT48LC4M32B2_ModeRegConfig+0x64>)
900014fc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900014fe:	4b0b      	ldr	r3, [pc, #44]	@ (9000152c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001500:	2201      	movs	r2, #1
90001502:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001504:	4a09      	ldr	r2, [pc, #36]	@ (9000152c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001506:	68fb      	ldr	r3, [r7, #12]
90001508:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000150a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000150e:	4907      	ldr	r1, [pc, #28]	@ (9000152c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001510:	6878      	ldr	r0, [r7, #4]
90001512:	f008 f8d5 	bl	900096c0 <HAL_SDRAM_SendCommand>
90001516:	4603      	mov	r3, r0
90001518:	2b00      	cmp	r3, #0
9000151a:	d002      	beq.n	90001522 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
9000151c:	f04f 33ff 	mov.w	r3, #4294967295
90001520:	e000      	b.n	90001524 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001522:	2300      	movs	r3, #0
  }
}
90001524:	4618      	mov	r0, r3
90001526:	3710      	adds	r7, #16
90001528:	46bd      	mov	sp, r7
9000152a:	bd80      	pop	{r7, pc}
9000152c:	20000634 	.word	0x20000634

90001530 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001530:	b580      	push	{r7, lr}
90001532:	b084      	sub	sp, #16
90001534:	af00      	add	r7, sp, #0
90001536:	60f8      	str	r0, [r7, #12]
90001538:	60b9      	str	r1, [r7, #8]
9000153a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
9000153c:	4a0e      	ldr	r2, [pc, #56]	@ (90001578 <MT48LC4M32B2_RefreshMode+0x48>)
9000153e:	687b      	ldr	r3, [r7, #4]
90001540:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001542:	4a0d      	ldr	r2, [pc, #52]	@ (90001578 <MT48LC4M32B2_RefreshMode+0x48>)
90001544:	68bb      	ldr	r3, [r7, #8]
90001546:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001548:	4b0b      	ldr	r3, [pc, #44]	@ (90001578 <MT48LC4M32B2_RefreshMode+0x48>)
9000154a:	2208      	movs	r2, #8
9000154c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000154e:	4b0a      	ldr	r3, [pc, #40]	@ (90001578 <MT48LC4M32B2_RefreshMode+0x48>)
90001550:	2200      	movs	r2, #0
90001552:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001554:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001558:	4907      	ldr	r1, [pc, #28]	@ (90001578 <MT48LC4M32B2_RefreshMode+0x48>)
9000155a:	68f8      	ldr	r0, [r7, #12]
9000155c:	f008 f8b0 	bl	900096c0 <HAL_SDRAM_SendCommand>
90001560:	4603      	mov	r3, r0
90001562:	2b00      	cmp	r3, #0
90001564:	d002      	beq.n	9000156c <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001566:	f04f 33ff 	mov.w	r3, #4294967295
9000156a:	e000      	b.n	9000156e <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000156c:	2300      	movs	r3, #0
  }
}
9000156e:	4618      	mov	r0, r3
90001570:	3710      	adds	r7, #16
90001572:	46bd      	mov	sp, r7
90001574:	bd80      	pop	{r7, pc}
90001576:	bf00      	nop
90001578:	20000634 	.word	0x20000634

9000157c <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
9000157c:	b580      	push	{r7, lr}
9000157e:	b082      	sub	sp, #8
90001580:	af00      	add	r7, sp, #0
90001582:	6078      	str	r0, [r7, #4]
90001584:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90001586:	6839      	ldr	r1, [r7, #0]
90001588:	6878      	ldr	r0, [r7, #4]
9000158a:	f008 f8ce 	bl	9000972a <HAL_SDRAM_ProgramRefreshRate>
9000158e:	4603      	mov	r3, r0
90001590:	2b00      	cmp	r3, #0
90001592:	d002      	beq.n	9000159a <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001594:	f04f 33ff 	mov.w	r3, #4294967295
90001598:	e000      	b.n	9000159c <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000159a:	2300      	movs	r3, #0
  }
}
9000159c:	4618      	mov	r0, r3
9000159e:	3708      	adds	r7, #8
900015a0:	46bd      	mov	sp, r7
900015a2:	bd80      	pop	{r7, pc}

900015a4 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900015a4:	b580      	push	{r7, lr}
900015a6:	b084      	sub	sp, #16
900015a8:	af00      	add	r7, sp, #0
900015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900015ac:	f001 fd88 	bl	900030c0 <HAL_GetTick>
900015b0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900015b2:	bf00      	nop
900015b4:	f001 fd84 	bl	900030c0 <HAL_GetTick>
900015b8:	4602      	mov	r2, r0
900015ba:	68fb      	ldr	r3, [r7, #12]
900015bc:	1ad3      	subs	r3, r2, r3
900015be:	687a      	ldr	r2, [r7, #4]
900015c0:	429a      	cmp	r2, r3
900015c2:	d8f7      	bhi.n	900015b4 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
900015c4:	2300      	movs	r3, #0
}
900015c6:	4618      	mov	r0, r3
900015c8:	3710      	adds	r7, #16
900015ca:	46bd      	mov	sp, r7
900015cc:	bd80      	pop	{r7, pc}
	...

900015d0 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
900015d0:	b580      	push	{r7, lr}
900015d2:	b08a      	sub	sp, #40	@ 0x28
900015d4:	af00      	add	r7, sp, #0
900015d6:	4603      	mov	r3, r0
900015d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
900015da:	2300      	movs	r3, #0
900015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
900015de:	79fb      	ldrb	r3, [r7, #7]
900015e0:	2b00      	cmp	r3, #0
900015e2:	d10f      	bne.n	90001604 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
900015e4:	4b26      	ldr	r3, [pc, #152]	@ (90001680 <BSP_LED_Init+0xb0>)
900015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900015ea:	4a25      	ldr	r2, [pc, #148]	@ (90001680 <BSP_LED_Init+0xb0>)
900015ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
900015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900015f4:	4b22      	ldr	r3, [pc, #136]	@ (90001680 <BSP_LED_Init+0xb0>)
900015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900015fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900015fe:	60fb      	str	r3, [r7, #12]
90001600:	68fb      	ldr	r3, [r7, #12]
90001602:	e015      	b.n	90001630 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001604:	79fb      	ldrb	r3, [r7, #7]
90001606:	2b01      	cmp	r3, #1
90001608:	d10f      	bne.n	9000162a <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
9000160a:	4b1d      	ldr	r3, [pc, #116]	@ (90001680 <BSP_LED_Init+0xb0>)
9000160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001610:	4a1b      	ldr	r2, [pc, #108]	@ (90001680 <BSP_LED_Init+0xb0>)
90001612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000161a:	4b19      	ldr	r3, [pc, #100]	@ (90001680 <BSP_LED_Init+0xb0>)
9000161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001624:	60bb      	str	r3, [r7, #8]
90001626:	68bb      	ldr	r3, [r7, #8]
90001628:	e002      	b.n	90001630 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000162a:	f06f 0301 	mvn.w	r3, #1
9000162e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
90001630:	79fb      	ldrb	r3, [r7, #7]
90001632:	4a14      	ldr	r2, [pc, #80]	@ (90001684 <BSP_LED_Init+0xb4>)
90001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001638:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
9000163a:	2301      	movs	r3, #1
9000163c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
9000163e:	2301      	movs	r3, #1
90001640:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001642:	2303      	movs	r3, #3
90001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
90001646:	79fb      	ldrb	r3, [r7, #7]
90001648:	4a0f      	ldr	r2, [pc, #60]	@ (90001688 <BSP_LED_Init+0xb8>)
9000164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000164e:	f107 0210 	add.w	r2, r7, #16
90001652:	4611      	mov	r1, r2
90001654:	4618      	mov	r0, r3
90001656:	f002 f9dd 	bl	90003a14 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
9000165a:	79fb      	ldrb	r3, [r7, #7]
9000165c:	4a0a      	ldr	r2, [pc, #40]	@ (90001688 <BSP_LED_Init+0xb8>)
9000165e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90001662:	79fb      	ldrb	r3, [r7, #7]
90001664:	4a07      	ldr	r2, [pc, #28]	@ (90001684 <BSP_LED_Init+0xb4>)
90001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000166a:	b29b      	uxth	r3, r3
9000166c:	2201      	movs	r2, #1
9000166e:	4619      	mov	r1, r3
90001670:	f002 fb98 	bl	90003da4 <HAL_GPIO_WritePin>
  return ret;
90001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
90001676:	4618      	mov	r0, r3
90001678:	3728      	adds	r7, #40	@ 0x28
9000167a:	46bd      	mov	sp, r7
9000167c:	bd80      	pop	{r7, pc}
9000167e:	bf00      	nop
90001680:	58024400 	.word	0x58024400
90001684:	9000cd0c 	.word	0x9000cd0c
90001688:	20000050 	.word	0x20000050

9000168c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
9000168c:	b580      	push	{r7, lr}
9000168e:	b082      	sub	sp, #8
90001690:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001692:	2300      	movs	r3, #0
90001694:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001696:	4b16      	ldr	r3, [pc, #88]	@ (900016f0 <BSP_I2C4_Init+0x64>)
90001698:	4a16      	ldr	r2, [pc, #88]	@ (900016f4 <BSP_I2C4_Init+0x68>)
9000169a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
9000169c:	4b16      	ldr	r3, [pc, #88]	@ (900016f8 <BSP_I2C4_Init+0x6c>)
9000169e:	681b      	ldr	r3, [r3, #0]
900016a0:	2b00      	cmp	r3, #0
900016a2:	d11f      	bne.n	900016e4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
900016a4:	4b14      	ldr	r3, [pc, #80]	@ (900016f8 <BSP_I2C4_Init+0x6c>)
900016a6:	681b      	ldr	r3, [r3, #0]
900016a8:	3301      	adds	r3, #1
900016aa:	4a13      	ldr	r2, [pc, #76]	@ (900016f8 <BSP_I2C4_Init+0x6c>)
900016ac:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
900016ae:	4810      	ldr	r0, [pc, #64]	@ (900016f0 <BSP_I2C4_Init+0x64>)
900016b0:	f004 faf8 	bl	90005ca4 <HAL_I2C_GetState>
900016b4:	4603      	mov	r3, r0
900016b6:	2b00      	cmp	r3, #0
900016b8:	d114      	bne.n	900016e4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
900016ba:	480d      	ldr	r0, [pc, #52]	@ (900016f0 <BSP_I2C4_Init+0x64>)
900016bc:	f000 fb06 	bl	90001ccc <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900016c0:	f006 f976 	bl	900079b0 <HAL_RCC_GetPCLK2Freq>
900016c4:	4603      	mov	r3, r0
900016c6:	490d      	ldr	r1, [pc, #52]	@ (900016fc <BSP_I2C4_Init+0x70>)
900016c8:	4618      	mov	r0, r3
900016ca:	f000 f889 	bl	900017e0 <I2C_GetTiming>
900016ce:	4603      	mov	r3, r0
900016d0:	4619      	mov	r1, r3
900016d2:	4807      	ldr	r0, [pc, #28]	@ (900016f0 <BSP_I2C4_Init+0x64>)
900016d4:	f000 f814 	bl	90001700 <MX_I2C4_Init>
900016d8:	4603      	mov	r3, r0
900016da:	2b00      	cmp	r3, #0
900016dc:	d002      	beq.n	900016e4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
900016de:	f06f 0307 	mvn.w	r3, #7
900016e2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
900016e4:	687b      	ldr	r3, [r7, #4]
}
900016e6:	4618      	mov	r0, r3
900016e8:	3708      	adds	r7, #8
900016ea:	46bd      	mov	sp, r7
900016ec:	bd80      	pop	{r7, pc}
900016ee:	bf00      	nop
900016f0:	2000104c 	.word	0x2000104c
900016f4:	58001c00 	.word	0x58001c00
900016f8:	20000644 	.word	0x20000644
900016fc:	000186a0 	.word	0x000186a0

90001700 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001700:	b580      	push	{r7, lr}
90001702:	b084      	sub	sp, #16
90001704:	af00      	add	r7, sp, #0
90001706:	6078      	str	r0, [r7, #4]
90001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
9000170a:	2300      	movs	r3, #0
9000170c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000170e:	687b      	ldr	r3, [r7, #4]
90001710:	683a      	ldr	r2, [r7, #0]
90001712:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001714:	687b      	ldr	r3, [r7, #4]
90001716:	2200      	movs	r2, #0
90001718:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000171a:	687b      	ldr	r3, [r7, #4]
9000171c:	2201      	movs	r2, #1
9000171e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001720:	687b      	ldr	r3, [r7, #4]
90001722:	2200      	movs	r2, #0
90001724:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001726:	687b      	ldr	r3, [r7, #4]
90001728:	2200      	movs	r2, #0
9000172a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
9000172c:	687b      	ldr	r3, [r7, #4]
9000172e:	2200      	movs	r2, #0
90001730:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001732:	687b      	ldr	r3, [r7, #4]
90001734:	2200      	movs	r2, #0
90001736:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001738:	687b      	ldr	r3, [r7, #4]
9000173a:	2200      	movs	r2, #0
9000173c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
9000173e:	6878      	ldr	r0, [r7, #4]
90001740:	f004 f8f0 	bl	90005924 <HAL_I2C_Init>
90001744:	4603      	mov	r3, r0
90001746:	2b00      	cmp	r3, #0
90001748:	d002      	beq.n	90001750 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
9000174a:	2301      	movs	r3, #1
9000174c:	73fb      	strb	r3, [r7, #15]
9000174e:	e014      	b.n	9000177a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001750:	2300      	movs	r3, #0
90001752:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001754:	68b9      	ldr	r1, [r7, #8]
90001756:	6878      	ldr	r0, [r7, #4]
90001758:	f004 fd2c 	bl	900061b4 <HAL_I2CEx_ConfigAnalogFilter>
9000175c:	4603      	mov	r3, r0
9000175e:	2b00      	cmp	r3, #0
90001760:	d002      	beq.n	90001768 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90001762:	2301      	movs	r3, #1
90001764:	73fb      	strb	r3, [r7, #15]
90001766:	e008      	b.n	9000177a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001768:	2100      	movs	r1, #0
9000176a:	6878      	ldr	r0, [r7, #4]
9000176c:	f004 fd6d 	bl	9000624a <HAL_I2CEx_ConfigDigitalFilter>
90001770:	4603      	mov	r3, r0
90001772:	2b00      	cmp	r3, #0
90001774:	d001      	beq.n	9000177a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001776:	2301      	movs	r3, #1
90001778:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
9000177a:	7bfb      	ldrb	r3, [r7, #15]
}
9000177c:	4618      	mov	r0, r3
9000177e:	3710      	adds	r7, #16
90001780:	46bd      	mov	sp, r7
90001782:	bd80      	pop	{r7, pc}

90001784 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001784:	b580      	push	{r7, lr}
90001786:	b088      	sub	sp, #32
90001788:	af02      	add	r7, sp, #8
9000178a:	60ba      	str	r2, [r7, #8]
9000178c:	461a      	mov	r2, r3
9000178e:	4603      	mov	r3, r0
90001790:	81fb      	strh	r3, [r7, #14]
90001792:	460b      	mov	r3, r1
90001794:	81bb      	strh	r3, [r7, #12]
90001796:	4613      	mov	r3, r2
90001798:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
9000179a:	89b9      	ldrh	r1, [r7, #12]
9000179c:	89f8      	ldrh	r0, [r7, #14]
9000179e:	88fb      	ldrh	r3, [r7, #6]
900017a0:	9300      	str	r3, [sp, #0]
900017a2:	68bb      	ldr	r3, [r7, #8]
900017a4:	2201      	movs	r2, #1
900017a6:	f000 fafd 	bl	90001da4 <I2C4_ReadReg>
900017aa:	4603      	mov	r3, r0
900017ac:	2b00      	cmp	r3, #0
900017ae:	d102      	bne.n	900017b6 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900017b0:	2300      	movs	r3, #0
900017b2:	617b      	str	r3, [r7, #20]
900017b4:	e00c      	b.n	900017d0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900017b6:	4809      	ldr	r0, [pc, #36]	@ (900017dc <BSP_I2C4_ReadReg+0x58>)
900017b8:	f004 fa82 	bl	90005cc0 <HAL_I2C_GetError>
900017bc:	4603      	mov	r3, r0
900017be:	2b04      	cmp	r3, #4
900017c0:	d103      	bne.n	900017ca <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900017c2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
900017c6:	617b      	str	r3, [r7, #20]
900017c8:	e002      	b.n	900017d0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900017ca:	f06f 0303 	mvn.w	r3, #3
900017ce:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900017d0:	697b      	ldr	r3, [r7, #20]
}
900017d2:	4618      	mov	r0, r3
900017d4:	3718      	adds	r7, #24
900017d6:	46bd      	mov	sp, r7
900017d8:	bd80      	pop	{r7, pc}
900017da:	bf00      	nop
900017dc:	2000104c 	.word	0x2000104c

900017e0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
900017e0:	b580      	push	{r7, lr}
900017e2:	b086      	sub	sp, #24
900017e4:	af00      	add	r7, sp, #0
900017e6:	6078      	str	r0, [r7, #4]
900017e8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
900017ea:	2300      	movs	r3, #0
900017ec:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900017ee:	687b      	ldr	r3, [r7, #4]
900017f0:	2b00      	cmp	r3, #0
900017f2:	d06b      	beq.n	900018cc <I2C_GetTiming+0xec>
900017f4:	683b      	ldr	r3, [r7, #0]
900017f6:	2b00      	cmp	r3, #0
900017f8:	d068      	beq.n	900018cc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
900017fa:	2300      	movs	r3, #0
900017fc:	613b      	str	r3, [r7, #16]
900017fe:	e060      	b.n	900018c2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001800:	4a35      	ldr	r2, [pc, #212]	@ (900018d8 <I2C_GetTiming+0xf8>)
90001802:	693b      	ldr	r3, [r7, #16]
90001804:	212c      	movs	r1, #44	@ 0x2c
90001806:	fb01 f303 	mul.w	r3, r1, r3
9000180a:	4413      	add	r3, r2
9000180c:	3304      	adds	r3, #4
9000180e:	681b      	ldr	r3, [r3, #0]
90001810:	683a      	ldr	r2, [r7, #0]
90001812:	429a      	cmp	r2, r3
90001814:	d352      	bcc.n	900018bc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001816:	4a30      	ldr	r2, [pc, #192]	@ (900018d8 <I2C_GetTiming+0xf8>)
90001818:	693b      	ldr	r3, [r7, #16]
9000181a:	212c      	movs	r1, #44	@ 0x2c
9000181c:	fb01 f303 	mul.w	r3, r1, r3
90001820:	4413      	add	r3, r2
90001822:	3308      	adds	r3, #8
90001824:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001826:	683a      	ldr	r2, [r7, #0]
90001828:	429a      	cmp	r2, r3
9000182a:	d847      	bhi.n	900018bc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
9000182c:	6939      	ldr	r1, [r7, #16]
9000182e:	6878      	ldr	r0, [r7, #4]
90001830:	f000 f856 	bl	900018e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001834:	6939      	ldr	r1, [r7, #16]
90001836:	6878      	ldr	r0, [r7, #4]
90001838:	f000 f940 	bl	90001abc <I2C_Compute_SCLL_SCLH>
9000183c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
9000183e:	68fb      	ldr	r3, [r7, #12]
90001840:	2b7f      	cmp	r3, #127	@ 0x7f
90001842:	d842      	bhi.n	900018ca <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001844:	4925      	ldr	r1, [pc, #148]	@ (900018dc <I2C_GetTiming+0xfc>)
90001846:	68fa      	ldr	r2, [r7, #12]
90001848:	4613      	mov	r3, r2
9000184a:	009b      	lsls	r3, r3, #2
9000184c:	4413      	add	r3, r2
9000184e:	009b      	lsls	r3, r3, #2
90001850:	440b      	add	r3, r1
90001852:	681b      	ldr	r3, [r3, #0]
90001854:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001856:	4821      	ldr	r0, [pc, #132]	@ (900018dc <I2C_GetTiming+0xfc>)
90001858:	68fa      	ldr	r2, [r7, #12]
9000185a:	4613      	mov	r3, r2
9000185c:	009b      	lsls	r3, r3, #2
9000185e:	4413      	add	r3, r2
90001860:	009b      	lsls	r3, r3, #2
90001862:	4403      	add	r3, r0
90001864:	3304      	adds	r3, #4
90001866:	681b      	ldr	r3, [r3, #0]
90001868:	051b      	lsls	r3, r3, #20
9000186a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000186e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001870:	481a      	ldr	r0, [pc, #104]	@ (900018dc <I2C_GetTiming+0xfc>)
90001872:	68fa      	ldr	r2, [r7, #12]
90001874:	4613      	mov	r3, r2
90001876:	009b      	lsls	r3, r3, #2
90001878:	4413      	add	r3, r2
9000187a:	009b      	lsls	r3, r3, #2
9000187c:	4403      	add	r3, r0
9000187e:	3308      	adds	r3, #8
90001880:	681b      	ldr	r3, [r3, #0]
90001882:	041b      	lsls	r3, r3, #16
90001884:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001888:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
9000188a:	4814      	ldr	r0, [pc, #80]	@ (900018dc <I2C_GetTiming+0xfc>)
9000188c:	68fa      	ldr	r2, [r7, #12]
9000188e:	4613      	mov	r3, r2
90001890:	009b      	lsls	r3, r3, #2
90001892:	4413      	add	r3, r2
90001894:	009b      	lsls	r3, r3, #2
90001896:	4403      	add	r3, r0
90001898:	330c      	adds	r3, #12
9000189a:	681b      	ldr	r3, [r3, #0]
9000189c:	021b      	lsls	r3, r3, #8
9000189e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900018a0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900018a2:	480e      	ldr	r0, [pc, #56]	@ (900018dc <I2C_GetTiming+0xfc>)
900018a4:	68fa      	ldr	r2, [r7, #12]
900018a6:	4613      	mov	r3, r2
900018a8:	009b      	lsls	r3, r3, #2
900018aa:	4413      	add	r3, r2
900018ac:	009b      	lsls	r3, r3, #2
900018ae:	4403      	add	r3, r0
900018b0:	3310      	adds	r3, #16
900018b2:	681b      	ldr	r3, [r3, #0]
900018b4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900018b6:	430b      	orrs	r3, r1
900018b8:	617b      	str	r3, [r7, #20]
        }
        break;
900018ba:	e006      	b.n	900018ca <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
900018bc:	693b      	ldr	r3, [r7, #16]
900018be:	3301      	adds	r3, #1
900018c0:	613b      	str	r3, [r7, #16]
900018c2:	693b      	ldr	r3, [r7, #16]
900018c4:	2b02      	cmp	r3, #2
900018c6:	d99b      	bls.n	90001800 <I2C_GetTiming+0x20>
900018c8:	e000      	b.n	900018cc <I2C_GetTiming+0xec>
        break;
900018ca:	bf00      	nop
      }
    }
  }

  return ret;
900018cc:	697b      	ldr	r3, [r7, #20]
}
900018ce:	4618      	mov	r0, r3
900018d0:	3718      	adds	r7, #24
900018d2:	46bd      	mov	sp, r7
900018d4:	bd80      	pop	{r7, pc}
900018d6:	bf00      	nop
900018d8:	9000cd14 	.word	0x9000cd14
900018dc:	20000648 	.word	0x20000648

900018e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
900018e0:	b480      	push	{r7}
900018e2:	b08f      	sub	sp, #60	@ 0x3c
900018e4:	af00      	add	r7, sp, #0
900018e6:	6078      	str	r0, [r7, #4]
900018e8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
900018ea:	2310      	movs	r3, #16
900018ec:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900018ee:	687b      	ldr	r3, [r7, #4]
900018f0:	085a      	lsrs	r2, r3, #1
900018f2:	4b6e      	ldr	r3, [pc, #440]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
900018f4:	4413      	add	r3, r2
900018f6:	687a      	ldr	r2, [r7, #4]
900018f8:	fbb3 f3f2 	udiv	r3, r3, r2
900018fc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
900018fe:	2332      	movs	r3, #50	@ 0x32
90001900:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001902:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001906:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001908:	4a69      	ldr	r2, [pc, #420]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000190a:	683b      	ldr	r3, [r7, #0]
9000190c:	212c      	movs	r1, #44	@ 0x2c
9000190e:	fb01 f303 	mul.w	r3, r1, r3
90001912:	4413      	add	r3, r2
90001914:	3324      	adds	r3, #36	@ 0x24
90001916:	681b      	ldr	r3, [r3, #0]
90001918:	4618      	mov	r0, r3
9000191a:	4a65      	ldr	r2, [pc, #404]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000191c:	683b      	ldr	r3, [r7, #0]
9000191e:	212c      	movs	r1, #44	@ 0x2c
90001920:	fb01 f303 	mul.w	r3, r1, r3
90001924:	4413      	add	r3, r2
90001926:	330c      	adds	r3, #12
90001928:	681b      	ldr	r3, [r3, #0]
9000192a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000192c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
9000192e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001930:	495f      	ldr	r1, [pc, #380]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001932:	683b      	ldr	r3, [r7, #0]
90001934:	202c      	movs	r0, #44	@ 0x2c
90001936:	fb00 f303 	mul.w	r3, r0, r3
9000193a:	440b      	add	r3, r1
9000193c:	3328      	adds	r3, #40	@ 0x28
9000193e:	681b      	ldr	r3, [r3, #0]
90001940:	3303      	adds	r3, #3
90001942:	69f9      	ldr	r1, [r7, #28]
90001944:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001948:	1ad3      	subs	r3, r2, r3
9000194a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
9000194c:	4a58      	ldr	r2, [pc, #352]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000194e:	683b      	ldr	r3, [r7, #0]
90001950:	212c      	movs	r1, #44	@ 0x2c
90001952:	fb01 f303 	mul.w	r3, r1, r3
90001956:	4413      	add	r3, r2
90001958:	3310      	adds	r3, #16
9000195a:	681b      	ldr	r3, [r3, #0]
9000195c:	4618      	mov	r0, r3
9000195e:	4a54      	ldr	r2, [pc, #336]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001960:	683b      	ldr	r3, [r7, #0]
90001962:	212c      	movs	r1, #44	@ 0x2c
90001964:	fb01 f303 	mul.w	r3, r1, r3
90001968:	4413      	add	r3, r2
9000196a:	3320      	adds	r3, #32
9000196c:	681b      	ldr	r3, [r3, #0]
9000196e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001970:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001972:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001974:	494e      	ldr	r1, [pc, #312]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001976:	683b      	ldr	r3, [r7, #0]
90001978:	202c      	movs	r0, #44	@ 0x2c
9000197a:	fb00 f303 	mul.w	r3, r0, r3
9000197e:	440b      	add	r3, r1
90001980:	3328      	adds	r3, #40	@ 0x28
90001982:	681b      	ldr	r3, [r3, #0]
90001984:	3304      	adds	r3, #4
90001986:	69f9      	ldr	r1, [r7, #28]
90001988:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
9000198c:	1ad3      	subs	r3, r2, r3
9000198e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001990:	4a47      	ldr	r2, [pc, #284]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001992:	683b      	ldr	r3, [r7, #0]
90001994:	212c      	movs	r1, #44	@ 0x2c
90001996:	fb01 f303 	mul.w	r3, r1, r3
9000199a:	4413      	add	r3, r2
9000199c:	3320      	adds	r3, #32
9000199e:	681b      	ldr	r3, [r3, #0]
900019a0:	4618      	mov	r0, r3
900019a2:	4a43      	ldr	r2, [pc, #268]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900019a4:	683b      	ldr	r3, [r7, #0]
900019a6:	212c      	movs	r1, #44	@ 0x2c
900019a8:	fb01 f303 	mul.w	r3, r1, r3
900019ac:	4413      	add	r3, r2
900019ae:	3314      	adds	r3, #20
900019b0:	681b      	ldr	r3, [r3, #0]
900019b2:	4403      	add	r3, r0
900019b4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
900019b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900019b8:	2b00      	cmp	r3, #0
900019ba:	dc01      	bgt.n	900019c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
900019bc:	2300      	movs	r3, #0
900019be:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
900019c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900019c2:	2b00      	cmp	r3, #0
900019c4:	dc01      	bgt.n	900019ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
900019c6:	2300      	movs	r3, #0
900019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
900019ca:	2300      	movs	r3, #0
900019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
900019ce:	e062      	b.n	90001a96 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900019d0:	2300      	movs	r3, #0
900019d2:	627b      	str	r3, [r7, #36]	@ 0x24
900019d4:	e059      	b.n	90001a8a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
900019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900019d8:	3301      	adds	r3, #1
900019da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900019dc:	3201      	adds	r2, #1
900019de:	fb03 f202 	mul.w	r2, r3, r2
900019e2:	69fb      	ldr	r3, [r7, #28]
900019e4:	fb02 f303 	mul.w	r3, r2, r3
900019e8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
900019ea:	693b      	ldr	r3, [r7, #16]
900019ec:	68fa      	ldr	r2, [r7, #12]
900019ee:	429a      	cmp	r2, r3
900019f0:	d348      	bcc.n	90001a84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900019f2:	2300      	movs	r3, #0
900019f4:	623b      	str	r3, [r7, #32]
900019f6:	e042      	b.n	90001a7e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
900019f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900019fa:	3301      	adds	r3, #1
900019fc:	6a3a      	ldr	r2, [r7, #32]
900019fe:	fb03 f202 	mul.w	r2, r3, r2
90001a02:	69fb      	ldr	r3, [r7, #28]
90001a04:	fb02 f303 	mul.w	r3, r2, r3
90001a08:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001a0c:	68ba      	ldr	r2, [r7, #8]
90001a0e:	429a      	cmp	r2, r3
90001a10:	d332      	bcc.n	90001a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001a14:	68ba      	ldr	r2, [r7, #8]
90001a16:	429a      	cmp	r2, r3
90001a18:	d82e      	bhi.n	90001a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001a1e:	429a      	cmp	r2, r3
90001a20:	d02a      	beq.n	90001a78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001a22:	4b24      	ldr	r3, [pc, #144]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a24:	681a      	ldr	r2, [r3, #0]
90001a26:	4924      	ldr	r1, [pc, #144]	@ (90001ab8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001a28:	4613      	mov	r3, r2
90001a2a:	009b      	lsls	r3, r3, #2
90001a2c:	4413      	add	r3, r2
90001a2e:	009b      	lsls	r3, r3, #2
90001a30:	440b      	add	r3, r1
90001a32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001a34:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001a36:	4b1f      	ldr	r3, [pc, #124]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a38:	681a      	ldr	r2, [r3, #0]
90001a3a:	491f      	ldr	r1, [pc, #124]	@ (90001ab8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001a3c:	4613      	mov	r3, r2
90001a3e:	009b      	lsls	r3, r3, #2
90001a40:	4413      	add	r3, r2
90001a42:	009b      	lsls	r3, r3, #2
90001a44:	440b      	add	r3, r1
90001a46:	3304      	adds	r3, #4
90001a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001a4a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001a4c:	4b19      	ldr	r3, [pc, #100]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a4e:	681a      	ldr	r2, [r3, #0]
90001a50:	4919      	ldr	r1, [pc, #100]	@ (90001ab8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001a52:	4613      	mov	r3, r2
90001a54:	009b      	lsls	r3, r3, #2
90001a56:	4413      	add	r3, r2
90001a58:	009b      	lsls	r3, r3, #2
90001a5a:	440b      	add	r3, r1
90001a5c:	3308      	adds	r3, #8
90001a5e:	6a3a      	ldr	r2, [r7, #32]
90001a60:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001a64:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001a66:	4b13      	ldr	r3, [pc, #76]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a68:	681b      	ldr	r3, [r3, #0]
90001a6a:	3301      	adds	r3, #1
90001a6c:	4a11      	ldr	r2, [pc, #68]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a6e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001a70:	4b10      	ldr	r3, [pc, #64]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a72:	681b      	ldr	r3, [r3, #0]
90001a74:	2b7f      	cmp	r3, #127	@ 0x7f
90001a76:	d812      	bhi.n	90001a9e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001a78:	6a3b      	ldr	r3, [r7, #32]
90001a7a:	3301      	adds	r3, #1
90001a7c:	623b      	str	r3, [r7, #32]
90001a7e:	6a3b      	ldr	r3, [r7, #32]
90001a80:	2b0f      	cmp	r3, #15
90001a82:	d9b9      	bls.n	900019f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001a86:	3301      	adds	r3, #1
90001a88:	627b      	str	r3, [r7, #36]	@ 0x24
90001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001a8c:	2b0f      	cmp	r3, #15
90001a8e:	d9a2      	bls.n	900019d6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001a92:	3301      	adds	r3, #1
90001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
90001a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001a98:	2b0f      	cmp	r3, #15
90001a9a:	d999      	bls.n	900019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001a9c:	e000      	b.n	90001aa0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001a9e:	bf00      	nop
          }
        }
      }
    }
  }
}
90001aa0:	373c      	adds	r7, #60	@ 0x3c
90001aa2:	46bd      	mov	sp, r7
90001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001aa8:	4770      	bx	lr
90001aaa:	bf00      	nop
90001aac:	3b9aca00 	.word	0x3b9aca00
90001ab0:	9000cd14 	.word	0x9000cd14
90001ab4:	20001048 	.word	0x20001048
90001ab8:	20000648 	.word	0x20000648

90001abc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001abc:	b480      	push	{r7}
90001abe:	b093      	sub	sp, #76	@ 0x4c
90001ac0:	af00      	add	r7, sp, #0
90001ac2:	6078      	str	r0, [r7, #4]
90001ac4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001ac6:	f04f 33ff 	mov.w	r3, #4294967295
90001aca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001acc:	687b      	ldr	r3, [r7, #4]
90001ace:	085a      	lsrs	r2, r3, #1
90001ad0:	4b7a      	ldr	r3, [pc, #488]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x200>)
90001ad2:	4413      	add	r3, r2
90001ad4:	687a      	ldr	r2, [r7, #4]
90001ad6:	fbb3 f3f2 	udiv	r3, r3, r2
90001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001adc:	4a78      	ldr	r2, [pc, #480]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001ade:	683b      	ldr	r3, [r7, #0]
90001ae0:	212c      	movs	r1, #44	@ 0x2c
90001ae2:	fb01 f303 	mul.w	r3, r1, r3
90001ae6:	4413      	add	r3, r2
90001ae8:	681b      	ldr	r3, [r3, #0]
90001aea:	085a      	lsrs	r2, r3, #1
90001aec:	4b73      	ldr	r3, [pc, #460]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x200>)
90001aee:	4413      	add	r3, r2
90001af0:	4973      	ldr	r1, [pc, #460]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001af2:	683a      	ldr	r2, [r7, #0]
90001af4:	202c      	movs	r0, #44	@ 0x2c
90001af6:	fb00 f202 	mul.w	r2, r0, r2
90001afa:	440a      	add	r2, r1
90001afc:	6812      	ldr	r2, [r2, #0]
90001afe:	fbb3 f3f2 	udiv	r3, r3, r2
90001b02:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001b04:	2332      	movs	r3, #50	@ 0x32
90001b06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001b08:	4a6d      	ldr	r2, [pc, #436]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001b0a:	683b      	ldr	r3, [r7, #0]
90001b0c:	212c      	movs	r1, #44	@ 0x2c
90001b0e:	fb01 f303 	mul.w	r3, r1, r3
90001b12:	4413      	add	r3, r2
90001b14:	3328      	adds	r3, #40	@ 0x28
90001b16:	681a      	ldr	r2, [r3, #0]
90001b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b1a:	fb02 f303 	mul.w	r3, r2, r3
90001b1e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001b20:	4a67      	ldr	r2, [pc, #412]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001b22:	683b      	ldr	r3, [r7, #0]
90001b24:	212c      	movs	r1, #44	@ 0x2c
90001b26:	fb01 f303 	mul.w	r3, r1, r3
90001b2a:	4413      	add	r3, r2
90001b2c:	3304      	adds	r3, #4
90001b2e:	681b      	ldr	r3, [r3, #0]
90001b30:	4a62      	ldr	r2, [pc, #392]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x200>)
90001b32:	fbb2 f3f3 	udiv	r3, r2, r3
90001b36:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001b38:	4a61      	ldr	r2, [pc, #388]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001b3a:	683b      	ldr	r3, [r7, #0]
90001b3c:	212c      	movs	r1, #44	@ 0x2c
90001b3e:	fb01 f303 	mul.w	r3, r1, r3
90001b42:	4413      	add	r3, r2
90001b44:	3308      	adds	r3, #8
90001b46:	681b      	ldr	r3, [r3, #0]
90001b48:	4a5c      	ldr	r2, [pc, #368]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x200>)
90001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
90001b4e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001b52:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001b54:	2300      	movs	r3, #0
90001b56:	637b      	str	r3, [r7, #52]	@ 0x34
90001b58:	e0a3      	b.n	90001ca2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001b5a:	495a      	ldr	r1, [pc, #360]	@ (90001cc4 <I2C_Compute_SCLL_SCLH+0x208>)
90001b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001b5e:	4613      	mov	r3, r2
90001b60:	009b      	lsls	r3, r3, #2
90001b62:	4413      	add	r3, r2
90001b64:	009b      	lsls	r3, r3, #2
90001b66:	440b      	add	r3, r1
90001b68:	681b      	ldr	r3, [r3, #0]
90001b6a:	1c5a      	adds	r2, r3, #1
90001b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b6e:	fb02 f303 	mul.w	r3, r2, r3
90001b72:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001b74:	2300      	movs	r3, #0
90001b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001b78:	e08c      	b.n	90001c94 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001b7c:	6a3b      	ldr	r3, [r7, #32]
90001b7e:	441a      	add	r2, r3
90001b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001b82:	3301      	adds	r3, #1
90001b84:	6979      	ldr	r1, [r7, #20]
90001b86:	fb03 f101 	mul.w	r1, r3, r1
90001b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b8c:	005b      	lsls	r3, r3, #1
90001b8e:	440b      	add	r3, r1
90001b90:	4413      	add	r3, r2
90001b92:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001b94:	4a4a      	ldr	r2, [pc, #296]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001b96:	683b      	ldr	r3, [r7, #0]
90001b98:	212c      	movs	r1, #44	@ 0x2c
90001b9a:	fb01 f303 	mul.w	r3, r1, r3
90001b9e:	4413      	add	r3, r2
90001ba0:	3318      	adds	r3, #24
90001ba2:	681b      	ldr	r3, [r3, #0]
90001ba4:	693a      	ldr	r2, [r7, #16]
90001ba6:	429a      	cmp	r2, r3
90001ba8:	d971      	bls.n	90001c8e <I2C_Compute_SCLL_SCLH+0x1d2>
90001baa:	693a      	ldr	r2, [r7, #16]
90001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001bae:	1ad2      	subs	r2, r2, r3
90001bb0:	6a3b      	ldr	r3, [r7, #32]
90001bb2:	1ad3      	subs	r3, r2, r3
90001bb4:	089b      	lsrs	r3, r3, #2
90001bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001bb8:	429a      	cmp	r2, r3
90001bba:	d268      	bcs.n	90001c8e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001bbc:	2300      	movs	r3, #0
90001bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
90001bc0:	e062      	b.n	90001c88 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001bc4:	6a3b      	ldr	r3, [r7, #32]
90001bc6:	441a      	add	r2, r3
90001bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001bca:	3301      	adds	r3, #1
90001bcc:	6979      	ldr	r1, [r7, #20]
90001bce:	fb03 f101 	mul.w	r1, r3, r1
90001bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001bd4:	005b      	lsls	r3, r3, #1
90001bd6:	440b      	add	r3, r1
90001bd8:	4413      	add	r3, r2
90001bda:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001bdc:	693a      	ldr	r2, [r7, #16]
90001bde:	68fb      	ldr	r3, [r7, #12]
90001be0:	441a      	add	r2, r3
90001be2:	4937      	ldr	r1, [pc, #220]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001be4:	683b      	ldr	r3, [r7, #0]
90001be6:	202c      	movs	r0, #44	@ 0x2c
90001be8:	fb00 f303 	mul.w	r3, r0, r3
90001bec:	440b      	add	r3, r1
90001bee:	3320      	adds	r3, #32
90001bf0:	681b      	ldr	r3, [r3, #0]
90001bf2:	441a      	add	r2, r3
90001bf4:	4932      	ldr	r1, [pc, #200]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001bf6:	683b      	ldr	r3, [r7, #0]
90001bf8:	202c      	movs	r0, #44	@ 0x2c
90001bfa:	fb00 f303 	mul.w	r3, r0, r3
90001bfe:	440b      	add	r3, r1
90001c00:	3324      	adds	r3, #36	@ 0x24
90001c02:	681b      	ldr	r3, [r3, #0]
90001c04:	4413      	add	r3, r2
90001c06:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001c08:	68ba      	ldr	r2, [r7, #8]
90001c0a:	69bb      	ldr	r3, [r7, #24]
90001c0c:	429a      	cmp	r2, r3
90001c0e:	d338      	bcc.n	90001c82 <I2C_Compute_SCLL_SCLH+0x1c6>
90001c10:	68ba      	ldr	r2, [r7, #8]
90001c12:	69fb      	ldr	r3, [r7, #28]
90001c14:	429a      	cmp	r2, r3
90001c16:	d834      	bhi.n	90001c82 <I2C_Compute_SCLL_SCLH+0x1c6>
90001c18:	4a29      	ldr	r2, [pc, #164]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x204>)
90001c1a:	683b      	ldr	r3, [r7, #0]
90001c1c:	212c      	movs	r1, #44	@ 0x2c
90001c1e:	fb01 f303 	mul.w	r3, r1, r3
90001c22:	4413      	add	r3, r2
90001c24:	331c      	adds	r3, #28
90001c26:	681b      	ldr	r3, [r3, #0]
90001c28:	68fa      	ldr	r2, [r7, #12]
90001c2a:	429a      	cmp	r2, r3
90001c2c:	d329      	bcc.n	90001c82 <I2C_Compute_SCLL_SCLH+0x1c6>
90001c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001c30:	68fb      	ldr	r3, [r7, #12]
90001c32:	429a      	cmp	r2, r3
90001c34:	d225      	bcs.n	90001c82 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001c36:	68ba      	ldr	r2, [r7, #8]
90001c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c3a:	1ad3      	subs	r3, r2, r3
90001c3c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c40:	2b00      	cmp	r3, #0
90001c42:	da02      	bge.n	90001c4a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c46:	425b      	negs	r3, r3
90001c48:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001c4e:	429a      	cmp	r2, r3
90001c50:	d917      	bls.n	90001c82 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c54:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001c56:	491b      	ldr	r1, [pc, #108]	@ (90001cc4 <I2C_Compute_SCLL_SCLH+0x208>)
90001c58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001c5a:	4613      	mov	r3, r2
90001c5c:	009b      	lsls	r3, r3, #2
90001c5e:	4413      	add	r3, r2
90001c60:	009b      	lsls	r3, r3, #2
90001c62:	440b      	add	r3, r1
90001c64:	3310      	adds	r3, #16
90001c66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001c68:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001c6a:	4916      	ldr	r1, [pc, #88]	@ (90001cc4 <I2C_Compute_SCLL_SCLH+0x208>)
90001c6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001c6e:	4613      	mov	r3, r2
90001c70:	009b      	lsls	r3, r3, #2
90001c72:	4413      	add	r3, r2
90001c74:	009b      	lsls	r3, r3, #2
90001c76:	440b      	add	r3, r1
90001c78:	330c      	adds	r3, #12
90001c7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001c7c:	601a      	str	r2, [r3, #0]
              ret = count;
90001c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001c80:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001c84:	3301      	adds	r3, #1
90001c86:	63bb      	str	r3, [r7, #56]	@ 0x38
90001c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001c8a:	2bff      	cmp	r3, #255	@ 0xff
90001c8c:	d999      	bls.n	90001bc2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001c90:	3301      	adds	r3, #1
90001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001c96:	2bff      	cmp	r3, #255	@ 0xff
90001c98:	f67f af6f 	bls.w	90001b7a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001c9e:	3301      	adds	r3, #1
90001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
90001ca2:	4b09      	ldr	r3, [pc, #36]	@ (90001cc8 <I2C_Compute_SCLL_SCLH+0x20c>)
90001ca4:	681b      	ldr	r3, [r3, #0]
90001ca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001ca8:	429a      	cmp	r2, r3
90001caa:	f4ff af56 	bcc.w	90001b5a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001cb0:	4618      	mov	r0, r3
90001cb2:	374c      	adds	r7, #76	@ 0x4c
90001cb4:	46bd      	mov	sp, r7
90001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
90001cba:	4770      	bx	lr
90001cbc:	3b9aca00 	.word	0x3b9aca00
90001cc0:	9000cd14 	.word	0x9000cd14
90001cc4:	20000648 	.word	0x20000648
90001cc8:	20001048 	.word	0x20001048

90001ccc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001ccc:	b580      	push	{r7, lr}
90001cce:	b08a      	sub	sp, #40	@ 0x28
90001cd0:	af00      	add	r7, sp, #0
90001cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001cd4:	4b31      	ldr	r3, [pc, #196]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001cda:	4a30      	ldr	r2, [pc, #192]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001cdc:	f043 0308 	orr.w	r3, r3, #8
90001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001ce4:	4b2d      	ldr	r3, [pc, #180]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001cea:	f003 0308 	and.w	r3, r3, #8
90001cee:	613b      	str	r3, [r7, #16]
90001cf0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001cf8:	4a28      	ldr	r2, [pc, #160]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001cfa:	f043 0308 	orr.w	r3, r3, #8
90001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001d02:	4b26      	ldr	r3, [pc, #152]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001d08:	f003 0308 	and.w	r3, r3, #8
90001d0c:	60fb      	str	r3, [r7, #12]
90001d0e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001d14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001d16:	2312      	movs	r3, #18
90001d18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001d1a:	2300      	movs	r3, #0
90001d1c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001d1e:	2302      	movs	r3, #2
90001d20:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001d22:	2304      	movs	r3, #4
90001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001d26:	f107 0314 	add.w	r3, r7, #20
90001d2a:	4619      	mov	r1, r3
90001d2c:	481c      	ldr	r0, [pc, #112]	@ (90001da0 <I2C4_MspInit+0xd4>)
90001d2e:	f001 fe71 	bl	90003a14 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001d36:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001d38:	2312      	movs	r3, #18
90001d3a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001d3c:	2300      	movs	r3, #0
90001d3e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001d40:	2302      	movs	r3, #2
90001d42:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001d44:	2304      	movs	r3, #4
90001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001d48:	f107 0314 	add.w	r3, r7, #20
90001d4c:	4619      	mov	r1, r3
90001d4e:	4814      	ldr	r0, [pc, #80]	@ (90001da0 <I2C4_MspInit+0xd4>)
90001d50:	f001 fe60 	bl	90003a14 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001d54:	4b11      	ldr	r3, [pc, #68]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001d5a:	4a10      	ldr	r2, [pc, #64]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001d60:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001d64:	4b0d      	ldr	r3, [pc, #52]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001d6e:	60bb      	str	r3, [r7, #8]
90001d70:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001d72:	4b0a      	ldr	r3, [pc, #40]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001d78:	4a08      	ldr	r2, [pc, #32]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001d7e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001d82:	4b06      	ldr	r3, [pc, #24]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001d88:	4a04      	ldr	r2, [pc, #16]	@ (90001d9c <I2C4_MspInit+0xd0>)
90001d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001d8e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001d92:	bf00      	nop
90001d94:	3728      	adds	r7, #40	@ 0x28
90001d96:	46bd      	mov	sp, r7
90001d98:	bd80      	pop	{r7, pc}
90001d9a:	bf00      	nop
90001d9c:	58024400 	.word	0x58024400
90001da0:	58020c00 	.word	0x58020c00

90001da4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001da4:	b580      	push	{r7, lr}
90001da6:	b088      	sub	sp, #32
90001da8:	af04      	add	r7, sp, #16
90001daa:	607b      	str	r3, [r7, #4]
90001dac:	4603      	mov	r3, r0
90001dae:	81fb      	strh	r3, [r7, #14]
90001db0:	460b      	mov	r3, r1
90001db2:	81bb      	strh	r3, [r7, #12]
90001db4:	4613      	mov	r3, r2
90001db6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001db8:	8978      	ldrh	r0, [r7, #10]
90001dba:	89ba      	ldrh	r2, [r7, #12]
90001dbc:	89f9      	ldrh	r1, [r7, #14]
90001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001dc2:	9302      	str	r3, [sp, #8]
90001dc4:	8b3b      	ldrh	r3, [r7, #24]
90001dc6:	9301      	str	r3, [sp, #4]
90001dc8:	687b      	ldr	r3, [r7, #4]
90001dca:	9300      	str	r3, [sp, #0]
90001dcc:	4603      	mov	r3, r0
90001dce:	4807      	ldr	r0, [pc, #28]	@ (90001dec <I2C4_ReadReg+0x48>)
90001dd0:	f003 fe4e 	bl	90005a70 <HAL_I2C_Mem_Read>
90001dd4:	4603      	mov	r3, r0
90001dd6:	2b00      	cmp	r3, #0
90001dd8:	d101      	bne.n	90001dde <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001dda:	2300      	movs	r3, #0
90001ddc:	e001      	b.n	90001de2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001dde:	f06f 0307 	mvn.w	r3, #7
}
90001de2:	4618      	mov	r0, r3
90001de4:	3710      	adds	r7, #16
90001de6:	46bd      	mov	sp, r7
90001de8:	bd80      	pop	{r7, pc}
90001dea:	bf00      	nop
90001dec:	2000104c 	.word	0x2000104c

90001df0 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001df0:	b580      	push	{r7, lr}
90001df2:	b084      	sub	sp, #16
90001df4:	af02      	add	r7, sp, #8
90001df6:	6078      	str	r0, [r7, #4]
90001df8:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001dfa:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001dfe:	9300      	str	r3, [sp, #0]
90001e00:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001e04:	2200      	movs	r2, #0
90001e06:	6839      	ldr	r1, [r7, #0]
90001e08:	6878      	ldr	r0, [r7, #4]
90001e0a:	f000 f805 	bl	90001e18 <BSP_LCD_InitEx>
90001e0e:	4603      	mov	r3, r0
}
90001e10:	4618      	mov	r0, r3
90001e12:	3708      	adds	r7, #8
90001e14:	46bd      	mov	sp, r7
90001e16:	bd80      	pop	{r7, pc}

90001e18 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001e18:	b580      	push	{r7, lr}
90001e1a:	b09e      	sub	sp, #120	@ 0x78
90001e1c:	af00      	add	r7, sp, #0
90001e1e:	60f8      	str	r0, [r7, #12]
90001e20:	60b9      	str	r1, [r7, #8]
90001e22:	607a      	str	r2, [r7, #4]
90001e24:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001e26:	2300      	movs	r3, #0
90001e28:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001e2a:	2300      	movs	r3, #0
90001e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001e2e:	68bb      	ldr	r3, [r7, #8]
90001e30:	2b01      	cmp	r3, #1
90001e32:	d808      	bhi.n	90001e46 <BSP_LCD_InitEx+0x2e>
90001e34:	68fb      	ldr	r3, [r7, #12]
90001e36:	2b00      	cmp	r3, #0
90001e38:	d105      	bne.n	90001e46 <BSP_LCD_InitEx+0x2e>
90001e3a:	687b      	ldr	r3, [r7, #4]
90001e3c:	2b02      	cmp	r3, #2
90001e3e:	d006      	beq.n	90001e4e <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001e40:	687b      	ldr	r3, [r7, #4]
90001e42:	2b00      	cmp	r3, #0
90001e44:	d003      	beq.n	90001e4e <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001e46:	f06f 0301 	mvn.w	r3, #1
90001e4a:	677b      	str	r3, [r7, #116]	@ 0x74
90001e4c:	e0a8      	b.n	90001fa0 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001e4e:	687b      	ldr	r3, [r7, #4]
90001e50:	2b02      	cmp	r3, #2
90001e52:	d109      	bne.n	90001e68 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001e54:	2302      	movs	r3, #2
90001e56:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001e58:	4a54      	ldr	r2, [pc, #336]	@ (90001fac <BSP_LCD_InitEx+0x194>)
90001e5a:	68fb      	ldr	r3, [r7, #12]
90001e5c:	015b      	lsls	r3, r3, #5
90001e5e:	4413      	add	r3, r2
90001e60:	3310      	adds	r3, #16
90001e62:	2202      	movs	r2, #2
90001e64:	601a      	str	r2, [r3, #0]
90001e66:	e008      	b.n	90001e7a <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001e68:	2300      	movs	r3, #0
90001e6a:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001e6c:	4a4f      	ldr	r2, [pc, #316]	@ (90001fac <BSP_LCD_InitEx+0x194>)
90001e6e:	68fb      	ldr	r3, [r7, #12]
90001e70:	015b      	lsls	r3, r3, #5
90001e72:	4413      	add	r3, r2
90001e74:	3310      	adds	r3, #16
90001e76:	2204      	movs	r2, #4
90001e78:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001e7a:	4a4c      	ldr	r2, [pc, #304]	@ (90001fac <BSP_LCD_InitEx+0x194>)
90001e7c:	68fb      	ldr	r3, [r7, #12]
90001e7e:	015b      	lsls	r3, r3, #5
90001e80:	4413      	add	r3, r2
90001e82:	330c      	adds	r3, #12
90001e84:	687a      	ldr	r2, [r7, #4]
90001e86:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001e88:	4a48      	ldr	r2, [pc, #288]	@ (90001fac <BSP_LCD_InitEx+0x194>)
90001e8a:	68fb      	ldr	r3, [r7, #12]
90001e8c:	015b      	lsls	r3, r3, #5
90001e8e:	4413      	add	r3, r2
90001e90:	683a      	ldr	r2, [r7, #0]
90001e92:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001e94:	4a45      	ldr	r2, [pc, #276]	@ (90001fac <BSP_LCD_InitEx+0x194>)
90001e96:	68fb      	ldr	r3, [r7, #12]
90001e98:	015b      	lsls	r3, r3, #5
90001e9a:	4413      	add	r3, r2
90001e9c:	3304      	adds	r3, #4
90001e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001ea2:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001ea4:	4b42      	ldr	r3, [pc, #264]	@ (90001fb0 <BSP_LCD_InitEx+0x198>)
90001ea6:	4a43      	ldr	r2, [pc, #268]	@ (90001fb4 <BSP_LCD_InitEx+0x19c>)
90001ea8:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001eaa:	4b43      	ldr	r3, [pc, #268]	@ (90001fb8 <BSP_LCD_InitEx+0x1a0>)
90001eac:	4a43      	ldr	r2, [pc, #268]	@ (90001fbc <BSP_LCD_InitEx+0x1a4>)
90001eae:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001eb0:	483f      	ldr	r0, [pc, #252]	@ (90001fb0 <BSP_LCD_InitEx+0x198>)
90001eb2:	f000 fcf9 	bl	900028a8 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001eb6:	4840      	ldr	r0, [pc, #256]	@ (90001fb8 <BSP_LCD_InitEx+0x1a0>)
90001eb8:	f000 fdc2 	bl	90002a40 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001ebc:	4b40      	ldr	r3, [pc, #256]	@ (90001fc0 <BSP_LCD_InitEx+0x1a8>)
90001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001ec0:	4b40      	ldr	r3, [pc, #256]	@ (90001fc4 <BSP_LCD_InitEx+0x1ac>)
90001ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001ec4:	2370      	movs	r3, #112	@ 0x70
90001ec6:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001ec8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90001ecc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001ed0:	4611      	mov	r1, r2
90001ed2:	4618      	mov	r0, r3
90001ed4:	f7ff f9b8 	bl	90001248 <FT5336_RegisterBusIO>
90001ed8:	4603      	mov	r3, r0
90001eda:	2b00      	cmp	r3, #0
90001edc:	da03      	bge.n	90001ee6 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001ede:	f06f 0304 	mvn.w	r3, #4
90001ee2:	677b      	str	r3, [r7, #116]	@ 0x74
90001ee4:	e02b      	b.n	90001f3e <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90001ee6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90001eea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001eee:	4611      	mov	r1, r2
90001ef0:	4618      	mov	r0, r3
90001ef2:	f7ff f9eb 	bl	900012cc <FT5336_ReadID>
90001ef6:	4603      	mov	r3, r0
90001ef8:	2b00      	cmp	r3, #0
90001efa:	da03      	bge.n	90001f04 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001efc:	f06f 0304 	mvn.w	r3, #4
90001f00:	677b      	str	r3, [r7, #116]	@ 0x74
90001f02:	e01c      	b.n	90001f3e <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90001f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90001f06:	2b51      	cmp	r3, #81	@ 0x51
90001f08:	d003      	beq.n	90001f12 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90001f0a:	f06f 0306 	mvn.w	r3, #6
90001f0e:	677b      	str	r3, [r7, #116]	@ 0x74
90001f10:	e015      	b.n	90001f3e <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90001f12:	4827      	ldr	r0, [pc, #156]	@ (90001fb0 <BSP_LCD_InitEx+0x198>)
90001f14:	f7ff f808 	bl	90000f28 <MX_LTDC_ClockConfig>
90001f18:	4603      	mov	r3, r0
90001f1a:	2b00      	cmp	r3, #0
90001f1c:	d003      	beq.n	90001f26 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001f1e:	f06f 0303 	mvn.w	r3, #3
90001f22:	677b      	str	r3, [r7, #116]	@ 0x74
90001f24:	e00b      	b.n	90001f3e <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90001f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001f2a:	6839      	ldr	r1, [r7, #0]
90001f2c:	4820      	ldr	r0, [pc, #128]	@ (90001fb0 <BSP_LCD_InitEx+0x198>)
90001f2e:	f000 f84d 	bl	90001fcc <MX_LTDC_Init>
90001f32:	4603      	mov	r3, r0
90001f34:	2b00      	cmp	r3, #0
90001f36:	d002      	beq.n	90001f3e <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001f38:	f06f 0303 	mvn.w	r3, #3
90001f3c:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90001f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90001f40:	2b00      	cmp	r3, #0
90001f42:	d12d      	bne.n	90001fa0 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90001f44:	2000      	movs	r0, #0
90001f46:	f000 fe0d 	bl	90002b64 <BSP_SDRAM_Init>
90001f4a:	4603      	mov	r3, r0
90001f4c:	2b00      	cmp	r3, #0
90001f4e:	d002      	beq.n	90001f56 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90001f50:	f06f 0303 	mvn.w	r3, #3
90001f54:	e025      	b.n	90001fa2 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90001f56:	2300      	movs	r3, #0
90001f58:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90001f5a:	683b      	ldr	r3, [r7, #0]
90001f5c:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90001f5e:	2300      	movs	r3, #0
90001f60:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90001f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90001f66:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90001f68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90001f6c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90001f72:	f107 0314 	add.w	r3, r7, #20
90001f76:	461a      	mov	r2, r3
90001f78:	2100      	movs	r1, #0
90001f7a:	480d      	ldr	r0, [pc, #52]	@ (90001fb0 <BSP_LCD_InitEx+0x198>)
90001f7c:	f000 f872 	bl	90002064 <MX_LTDC_ConfigLayer>
90001f80:	4603      	mov	r3, r0
90001f82:	2b00      	cmp	r3, #0
90001f84:	d002      	beq.n	90001f8c <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90001f86:	f06f 0303 	mvn.w	r3, #3
90001f8a:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90001f8c:	480e      	ldr	r0, [pc, #56]	@ (90001fc8 <BSP_LCD_InitEx+0x1b0>)
90001f8e:	f000 fdbf 	bl	90002b10 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90001f92:	4a06      	ldr	r2, [pc, #24]	@ (90001fac <BSP_LCD_InitEx+0x194>)
90001f94:	68fb      	ldr	r3, [r7, #12]
90001f96:	015b      	lsls	r3, r3, #5
90001f98:	4413      	add	r3, r2
90001f9a:	3318      	adds	r3, #24
90001f9c:	2201      	movs	r2, #1
90001f9e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90001fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90001fa2:	4618      	mov	r0, r3
90001fa4:	3778      	adds	r7, #120	@ 0x78
90001fa6:	46bd      	mov	sp, r7
90001fa8:	bd80      	pop	{r7, pc}
90001faa:	bf00      	nop
90001fac:	200011fc 	.word	0x200011fc
90001fb0:	20001154 	.word	0x20001154
90001fb4:	50001000 	.word	0x50001000
90001fb8:	200010ec 	.word	0x200010ec
90001fbc:	52001000 	.word	0x52001000
90001fc0:	9000168d 	.word	0x9000168d
90001fc4:	90001785 	.word	0x90001785
90001fc8:	200010a0 	.word	0x200010a0

90001fcc <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90001fcc:	b580      	push	{r7, lr}
90001fce:	b084      	sub	sp, #16
90001fd0:	af00      	add	r7, sp, #0
90001fd2:	60f8      	str	r0, [r7, #12]
90001fd4:	60b9      	str	r1, [r7, #8]
90001fd6:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90001fd8:	68fb      	ldr	r3, [r7, #12]
90001fda:	4a21      	ldr	r2, [pc, #132]	@ (90002060 <MX_LTDC_Init+0x94>)
90001fdc:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001fde:	68fb      	ldr	r3, [r7, #12]
90001fe0:	2200      	movs	r2, #0
90001fe2:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001fe4:	68fb      	ldr	r3, [r7, #12]
90001fe6:	2200      	movs	r2, #0
90001fe8:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001fea:	68fb      	ldr	r3, [r7, #12]
90001fec:	2200      	movs	r2, #0
90001fee:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001ff0:	68fb      	ldr	r3, [r7, #12]
90001ff2:	2200      	movs	r2, #0
90001ff4:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90001ff6:	68fb      	ldr	r3, [r7, #12]
90001ff8:	2228      	movs	r2, #40	@ 0x28
90001ffa:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90001ffc:	68fb      	ldr	r3, [r7, #12]
90001ffe:	222a      	movs	r2, #42	@ 0x2a
90002000:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90002002:	68bb      	ldr	r3, [r7, #8]
90002004:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002008:	68fb      	ldr	r3, [r7, #12]
9000200a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
9000200c:	68bb      	ldr	r3, [r7, #8]
9000200e:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
90002012:	68fb      	ldr	r3, [r7, #12]
90002014:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90002016:	68fb      	ldr	r3, [r7, #12]
90002018:	2209      	movs	r2, #9
9000201a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
9000201c:	68fb      	ldr	r3, [r7, #12]
9000201e:	220b      	movs	r2, #11
90002020:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90002022:	687b      	ldr	r3, [r7, #4]
90002024:	f103 020b 	add.w	r2, r3, #11
90002028:	68fb      	ldr	r3, [r7, #12]
9000202a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
9000202c:	687b      	ldr	r3, [r7, #4]
9000202e:	f103 020d 	add.w	r2, r3, #13
90002032:	68fb      	ldr	r3, [r7, #12]
90002034:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90002036:	68fb      	ldr	r3, [r7, #12]
90002038:	22ff      	movs	r2, #255	@ 0xff
9000203a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
9000203e:	68fb      	ldr	r3, [r7, #12]
90002040:	22ff      	movs	r2, #255	@ 0xff
90002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90002046:	68fb      	ldr	r3, [r7, #12]
90002048:	22ff      	movs	r2, #255	@ 0xff
9000204a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
9000204e:	68f8      	ldr	r0, [r7, #12]
90002050:	f004 f947 	bl	900062e2 <HAL_LTDC_Init>
90002054:	4603      	mov	r3, r0
}
90002056:	4618      	mov	r0, r3
90002058:	3710      	adds	r7, #16
9000205a:	46bd      	mov	sp, r7
9000205c:	bd80      	pop	{r7, pc}
9000205e:	bf00      	nop
90002060:	50001000 	.word	0x50001000

90002064 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90002064:	b580      	push	{r7, lr}
90002066:	b092      	sub	sp, #72	@ 0x48
90002068:	af00      	add	r7, sp, #0
9000206a:	60f8      	str	r0, [r7, #12]
9000206c:	60b9      	str	r1, [r7, #8]
9000206e:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90002070:	687b      	ldr	r3, [r7, #4]
90002072:	681b      	ldr	r3, [r3, #0]
90002074:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90002076:	687b      	ldr	r3, [r7, #4]
90002078:	685b      	ldr	r3, [r3, #4]
9000207a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
9000207c:	687b      	ldr	r3, [r7, #4]
9000207e:	689b      	ldr	r3, [r3, #8]
90002080:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90002082:	687b      	ldr	r3, [r7, #4]
90002084:	68db      	ldr	r3, [r3, #12]
90002086:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90002088:	687b      	ldr	r3, [r7, #4]
9000208a:	691b      	ldr	r3, [r3, #16]
9000208c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
9000208e:	23ff      	movs	r3, #255	@ 0xff
90002090:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90002092:	2300      	movs	r3, #0
90002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90002096:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
9000209a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000209c:	2307      	movs	r3, #7
9000209e:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
900020a0:	687b      	ldr	r3, [r7, #4]
900020a2:	695b      	ldr	r3, [r3, #20]
900020a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
900020a6:	687b      	ldr	r3, [r7, #4]
900020a8:	685a      	ldr	r2, [r3, #4]
900020aa:	687b      	ldr	r3, [r7, #4]
900020ac:	681b      	ldr	r3, [r3, #0]
900020ae:	1ad3      	subs	r3, r2, r3
900020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
900020b2:	687b      	ldr	r3, [r7, #4]
900020b4:	68da      	ldr	r2, [r3, #12]
900020b6:	687b      	ldr	r3, [r7, #4]
900020b8:	689b      	ldr	r3, [r3, #8]
900020ba:	1ad3      	subs	r3, r2, r3
900020bc:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
900020be:	2300      	movs	r3, #0
900020c0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
900020c4:	2300      	movs	r3, #0
900020c6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
900020ca:	2300      	movs	r3, #0
900020cc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
900020d0:	f107 0314 	add.w	r3, r7, #20
900020d4:	68ba      	ldr	r2, [r7, #8]
900020d6:	4619      	mov	r1, r3
900020d8:	68f8      	ldr	r0, [r7, #12]
900020da:	f004 f9a9 	bl	90006430 <HAL_LTDC_ConfigLayer>
900020de:	4603      	mov	r3, r0
}
900020e0:	4618      	mov	r0, r3
900020e2:	3748      	adds	r7, #72	@ 0x48
900020e4:	46bd      	mov	sp, r7
900020e6:	bd80      	pop	{r7, pc}

900020e8 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
900020e8:	b480      	push	{r7}
900020ea:	b085      	sub	sp, #20
900020ec:	af00      	add	r7, sp, #0
900020ee:	6078      	str	r0, [r7, #4]
900020f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900020f2:	2300      	movs	r3, #0
900020f4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900020f6:	687b      	ldr	r3, [r7, #4]
900020f8:	2b00      	cmp	r3, #0
900020fa:	d003      	beq.n	90002104 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900020fc:	f06f 0301 	mvn.w	r3, #1
90002100:	60fb      	str	r3, [r7, #12]
90002102:	e007      	b.n	90002114 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002104:	4a07      	ldr	r2, [pc, #28]	@ (90002124 <BSP_LCD_GetPixelFormat+0x3c>)
90002106:	687b      	ldr	r3, [r7, #4]
90002108:	015b      	lsls	r3, r3, #5
9000210a:	4413      	add	r3, r2
9000210c:	330c      	adds	r3, #12
9000210e:	681a      	ldr	r2, [r3, #0]
90002110:	683b      	ldr	r3, [r7, #0]
90002112:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002114:	68fb      	ldr	r3, [r7, #12]
}
90002116:	4618      	mov	r0, r3
90002118:	3714      	adds	r7, #20
9000211a:	46bd      	mov	sp, r7
9000211c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002120:	4770      	bx	lr
90002122:	bf00      	nop
90002124:	200011fc 	.word	0x200011fc

90002128 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002128:	b480      	push	{r7}
9000212a:	b085      	sub	sp, #20
9000212c:	af00      	add	r7, sp, #0
9000212e:	6078      	str	r0, [r7, #4]
90002130:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002132:	2300      	movs	r3, #0
90002134:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002136:	687b      	ldr	r3, [r7, #4]
90002138:	2b00      	cmp	r3, #0
9000213a:	d003      	beq.n	90002144 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000213c:	f06f 0301 	mvn.w	r3, #1
90002140:	60fb      	str	r3, [r7, #12]
90002142:	e006      	b.n	90002152 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002144:	4a06      	ldr	r2, [pc, #24]	@ (90002160 <BSP_LCD_SetActiveLayer+0x38>)
90002146:	687b      	ldr	r3, [r7, #4]
90002148:	015b      	lsls	r3, r3, #5
9000214a:	4413      	add	r3, r2
9000214c:	3308      	adds	r3, #8
9000214e:	683a      	ldr	r2, [r7, #0]
90002150:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002152:	68fb      	ldr	r3, [r7, #12]
}
90002154:	4618      	mov	r0, r3
90002156:	3714      	adds	r7, #20
90002158:	46bd      	mov	sp, r7
9000215a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000215e:	4770      	bx	lr
90002160:	200011fc 	.word	0x200011fc

90002164 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002164:	b480      	push	{r7}
90002166:	b085      	sub	sp, #20
90002168:	af00      	add	r7, sp, #0
9000216a:	6078      	str	r0, [r7, #4]
9000216c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000216e:	2300      	movs	r3, #0
90002170:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002172:	687b      	ldr	r3, [r7, #4]
90002174:	2b00      	cmp	r3, #0
90002176:	d003      	beq.n	90002180 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002178:	f06f 0301 	mvn.w	r3, #1
9000217c:	60fb      	str	r3, [r7, #12]
9000217e:	e006      	b.n	9000218e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90002180:	4a06      	ldr	r2, [pc, #24]	@ (9000219c <BSP_LCD_GetXSize+0x38>)
90002182:	687b      	ldr	r3, [r7, #4]
90002184:	015b      	lsls	r3, r3, #5
90002186:	4413      	add	r3, r2
90002188:	681a      	ldr	r2, [r3, #0]
9000218a:	683b      	ldr	r3, [r7, #0]
9000218c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000218e:	68fb      	ldr	r3, [r7, #12]
}
90002190:	4618      	mov	r0, r3
90002192:	3714      	adds	r7, #20
90002194:	46bd      	mov	sp, r7
90002196:	f85d 7b04 	ldr.w	r7, [sp], #4
9000219a:	4770      	bx	lr
9000219c:	200011fc 	.word	0x200011fc

900021a0 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
900021a0:	b480      	push	{r7}
900021a2:	b085      	sub	sp, #20
900021a4:	af00      	add	r7, sp, #0
900021a6:	6078      	str	r0, [r7, #4]
900021a8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900021aa:	2300      	movs	r3, #0
900021ac:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900021ae:	687b      	ldr	r3, [r7, #4]
900021b0:	2b00      	cmp	r3, #0
900021b2:	d003      	beq.n	900021bc <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900021b4:	f06f 0301 	mvn.w	r3, #1
900021b8:	60fb      	str	r3, [r7, #12]
900021ba:	e007      	b.n	900021cc <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900021bc:	4a07      	ldr	r2, [pc, #28]	@ (900021dc <BSP_LCD_GetYSize+0x3c>)
900021be:	687b      	ldr	r3, [r7, #4]
900021c0:	015b      	lsls	r3, r3, #5
900021c2:	4413      	add	r3, r2
900021c4:	3304      	adds	r3, #4
900021c6:	681a      	ldr	r2, [r3, #0]
900021c8:	683b      	ldr	r3, [r7, #0]
900021ca:	601a      	str	r2, [r3, #0]
  }

  return ret;
900021cc:	68fb      	ldr	r3, [r7, #12]
}
900021ce:	4618      	mov	r0, r3
900021d0:	3714      	adds	r7, #20
900021d2:	46bd      	mov	sp, r7
900021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900021d8:	4770      	bx	lr
900021da:	bf00      	nop
900021dc:	200011fc 	.word	0x200011fc

900021e0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900021e0:	b580      	push	{r7, lr}
900021e2:	b08e      	sub	sp, #56	@ 0x38
900021e4:	af02      	add	r7, sp, #8
900021e6:	60f8      	str	r0, [r7, #12]
900021e8:	60b9      	str	r1, [r7, #8]
900021ea:	607a      	str	r2, [r7, #4]
900021ec:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900021ee:	2300      	movs	r3, #0
900021f0:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
900021f2:	683b      	ldr	r3, [r7, #0]
900021f4:	330a      	adds	r3, #10
900021f6:	781b      	ldrb	r3, [r3, #0]
900021f8:	461a      	mov	r2, r3
900021fa:	683b      	ldr	r3, [r7, #0]
900021fc:	330b      	adds	r3, #11
900021fe:	781b      	ldrb	r3, [r3, #0]
90002200:	021b      	lsls	r3, r3, #8
90002202:	441a      	add	r2, r3
90002204:	683b      	ldr	r3, [r7, #0]
90002206:	330c      	adds	r3, #12
90002208:	781b      	ldrb	r3, [r3, #0]
9000220a:	041b      	lsls	r3, r3, #16
9000220c:	441a      	add	r2, r3
9000220e:	683b      	ldr	r3, [r7, #0]
90002210:	330d      	adds	r3, #13
90002212:	781b      	ldrb	r3, [r3, #0]
90002214:	061b      	lsls	r3, r3, #24
90002216:	4413      	add	r3, r2
90002218:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
9000221a:	683b      	ldr	r3, [r7, #0]
9000221c:	3312      	adds	r3, #18
9000221e:	781b      	ldrb	r3, [r3, #0]
90002220:	461a      	mov	r2, r3
90002222:	683b      	ldr	r3, [r7, #0]
90002224:	3313      	adds	r3, #19
90002226:	781b      	ldrb	r3, [r3, #0]
90002228:	021b      	lsls	r3, r3, #8
9000222a:	441a      	add	r2, r3
9000222c:	683b      	ldr	r3, [r7, #0]
9000222e:	3314      	adds	r3, #20
90002230:	781b      	ldrb	r3, [r3, #0]
90002232:	041b      	lsls	r3, r3, #16
90002234:	441a      	add	r2, r3
90002236:	683b      	ldr	r3, [r7, #0]
90002238:	3315      	adds	r3, #21
9000223a:	781b      	ldrb	r3, [r3, #0]
9000223c:	061b      	lsls	r3, r3, #24
9000223e:	4413      	add	r3, r2
90002240:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
90002242:	683b      	ldr	r3, [r7, #0]
90002244:	3316      	adds	r3, #22
90002246:	781b      	ldrb	r3, [r3, #0]
90002248:	461a      	mov	r2, r3
9000224a:	683b      	ldr	r3, [r7, #0]
9000224c:	3317      	adds	r3, #23
9000224e:	781b      	ldrb	r3, [r3, #0]
90002250:	021b      	lsls	r3, r3, #8
90002252:	441a      	add	r2, r3
90002254:	683b      	ldr	r3, [r7, #0]
90002256:	3318      	adds	r3, #24
90002258:	781b      	ldrb	r3, [r3, #0]
9000225a:	041b      	lsls	r3, r3, #16
9000225c:	441a      	add	r2, r3
9000225e:	683b      	ldr	r3, [r7, #0]
90002260:	3319      	adds	r3, #25
90002262:	781b      	ldrb	r3, [r3, #0]
90002264:	061b      	lsls	r3, r3, #24
90002266:	4413      	add	r3, r2
90002268:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
9000226a:	683b      	ldr	r3, [r7, #0]
9000226c:	331c      	adds	r3, #28
9000226e:	781b      	ldrb	r3, [r3, #0]
90002270:	461a      	mov	r2, r3
90002272:	683b      	ldr	r3, [r7, #0]
90002274:	331d      	adds	r3, #29
90002276:	781b      	ldrb	r3, [r3, #0]
90002278:	021b      	lsls	r3, r3, #8
9000227a:	4413      	add	r3, r2
9000227c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000227e:	4a37      	ldr	r2, [pc, #220]	@ (9000235c <BSP_LCD_DrawBitmap+0x17c>)
90002280:	68fb      	ldr	r3, [r7, #12]
90002282:	015b      	lsls	r3, r3, #5
90002284:	4413      	add	r3, r2
90002286:	3308      	adds	r3, #8
90002288:	681b      	ldr	r3, [r3, #0]
9000228a:	4a35      	ldr	r2, [pc, #212]	@ (90002360 <BSP_LCD_DrawBitmap+0x180>)
9000228c:	2134      	movs	r1, #52	@ 0x34
9000228e:	fb01 f303 	mul.w	r3, r1, r3
90002292:	4413      	add	r3, r2
90002294:	335c      	adds	r3, #92	@ 0x5c
90002296:	681a      	ldr	r2, [r3, #0]
90002298:	4930      	ldr	r1, [pc, #192]	@ (9000235c <BSP_LCD_DrawBitmap+0x17c>)
9000229a:	68fb      	ldr	r3, [r7, #12]
9000229c:	015b      	lsls	r3, r3, #5
9000229e:	440b      	add	r3, r1
900022a0:	681b      	ldr	r3, [r3, #0]
900022a2:	6879      	ldr	r1, [r7, #4]
900022a4:	fb03 f101 	mul.w	r1, r3, r1
900022a8:	68bb      	ldr	r3, [r7, #8]
900022aa:	440b      	add	r3, r1
900022ac:	482b      	ldr	r0, [pc, #172]	@ (9000235c <BSP_LCD_DrawBitmap+0x17c>)
900022ae:	68f9      	ldr	r1, [r7, #12]
900022b0:	0149      	lsls	r1, r1, #5
900022b2:	4401      	add	r1, r0
900022b4:	3110      	adds	r1, #16
900022b6:	6809      	ldr	r1, [r1, #0]
900022b8:	fb01 f303 	mul.w	r3, r1, r3
900022bc:	4413      	add	r3, r2
900022be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900022c0:	693b      	ldr	r3, [r7, #16]
900022c2:	3b20      	subs	r3, #32
900022c4:	2b07      	cmp	r3, #7
900022c6:	d802      	bhi.n	900022ce <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900022c8:	2300      	movs	r3, #0
900022ca:	627b      	str	r3, [r7, #36]	@ 0x24
900022cc:	e008      	b.n	900022e0 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900022ce:	693b      	ldr	r3, [r7, #16]
900022d0:	3b10      	subs	r3, #16
900022d2:	2b07      	cmp	r3, #7
900022d4:	d802      	bhi.n	900022dc <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900022d6:	2302      	movs	r3, #2
900022d8:	627b      	str	r3, [r7, #36]	@ 0x24
900022da:	e001      	b.n	900022e0 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
900022dc:	2301      	movs	r3, #1
900022de:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900022e0:	697b      	ldr	r3, [r7, #20]
900022e2:	3b01      	subs	r3, #1
900022e4:	69ba      	ldr	r2, [r7, #24]
900022e6:	fb02 f303 	mul.w	r3, r2, r3
900022ea:	693a      	ldr	r2, [r7, #16]
900022ec:	08d2      	lsrs	r2, r2, #3
900022ee:	fb03 f202 	mul.w	r2, r3, r2
900022f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900022f4:	4413      	add	r3, r2
900022f6:	683a      	ldr	r2, [r7, #0]
900022f8:	4413      	add	r3, r2
900022fa:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
900022fc:	2300      	movs	r3, #0
900022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002300:	e023      	b.n	9000234a <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
90002302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002306:	9300      	str	r3, [sp, #0]
90002308:	69bb      	ldr	r3, [r7, #24]
9000230a:	6a39      	ldr	r1, [r7, #32]
9000230c:	68f8      	ldr	r0, [r7, #12]
9000230e:	f000 fa77 	bl	90002800 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
90002312:	4a12      	ldr	r2, [pc, #72]	@ (9000235c <BSP_LCD_DrawBitmap+0x17c>)
90002314:	68fb      	ldr	r3, [r7, #12]
90002316:	015b      	lsls	r3, r3, #5
90002318:	4413      	add	r3, r2
9000231a:	681b      	ldr	r3, [r3, #0]
9000231c:	490f      	ldr	r1, [pc, #60]	@ (9000235c <BSP_LCD_DrawBitmap+0x17c>)
9000231e:	68fa      	ldr	r2, [r7, #12]
90002320:	0152      	lsls	r2, r2, #5
90002322:	440a      	add	r2, r1
90002324:	3210      	adds	r2, #16
90002326:	6812      	ldr	r2, [r2, #0]
90002328:	fb02 f303 	mul.w	r3, r2, r3
9000232c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000232e:	4413      	add	r3, r2
90002330:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
90002332:	693b      	ldr	r3, [r7, #16]
90002334:	08db      	lsrs	r3, r3, #3
90002336:	69ba      	ldr	r2, [r7, #24]
90002338:	fb02 f303 	mul.w	r3, r2, r3
9000233c:	425b      	negs	r3, r3
9000233e:	6a3a      	ldr	r2, [r7, #32]
90002340:	4413      	add	r3, r2
90002342:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002346:	3301      	adds	r3, #1
90002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
9000234a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000234c:	697b      	ldr	r3, [r7, #20]
9000234e:	429a      	cmp	r2, r3
90002350:	d3d7      	bcc.n	90002302 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
90002352:	69fb      	ldr	r3, [r7, #28]
}
90002354:	4618      	mov	r0, r3
90002356:	3730      	adds	r7, #48	@ 0x30
90002358:	46bd      	mov	sp, r7
9000235a:	bd80      	pop	{r7, pc}
9000235c:	200011fc 	.word	0x200011fc
90002360:	20001154 	.word	0x20001154

90002364 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002364:	b580      	push	{r7, lr}
90002366:	b088      	sub	sp, #32
90002368:	af00      	add	r7, sp, #0
9000236a:	60f8      	str	r0, [r7, #12]
9000236c:	60b9      	str	r1, [r7, #8]
9000236e:	607a      	str	r2, [r7, #4]
90002370:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
90002372:	683b      	ldr	r3, [r7, #0]
90002374:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002376:	2300      	movs	r3, #0
90002378:	61fb      	str	r3, [r7, #28]
9000237a:	e032      	b.n	900023e2 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
9000237c:	2300      	movs	r3, #0
9000237e:	617b      	str	r3, [r7, #20]
90002380:	e028      	b.n	900023d4 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
90002382:	69bb      	ldr	r3, [r7, #24]
90002384:	781b      	ldrb	r3, [r3, #0]
90002386:	461a      	mov	r2, r3
90002388:	69bb      	ldr	r3, [r7, #24]
9000238a:	3301      	adds	r3, #1
9000238c:	781b      	ldrb	r3, [r3, #0]
9000238e:	021b      	lsls	r3, r3, #8
90002390:	431a      	orrs	r2, r3
90002392:	69bb      	ldr	r3, [r7, #24]
90002394:	3302      	adds	r3, #2
90002396:	781b      	ldrb	r3, [r3, #0]
90002398:	041b      	lsls	r3, r3, #16
9000239a:	431a      	orrs	r2, r3
9000239c:	69bb      	ldr	r3, [r7, #24]
9000239e:	3303      	adds	r3, #3
900023a0:	781b      	ldrb	r3, [r3, #0]
900023a2:	061b      	lsls	r3, r3, #24
900023a4:	4313      	orrs	r3, r2
900023a6:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900023a8:	68ba      	ldr	r2, [r7, #8]
900023aa:	697b      	ldr	r3, [r7, #20]
900023ac:	18d1      	adds	r1, r2, r3
900023ae:	687a      	ldr	r2, [r7, #4]
900023b0:	69fb      	ldr	r3, [r7, #28]
900023b2:	441a      	add	r2, r3
900023b4:	693b      	ldr	r3, [r7, #16]
900023b6:	68f8      	ldr	r0, [r7, #12]
900023b8:	f000 f95e 	bl	90002678 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900023bc:	4a0d      	ldr	r2, [pc, #52]	@ (900023f4 <BSP_LCD_FillRGBRect+0x90>)
900023be:	68fb      	ldr	r3, [r7, #12]
900023c0:	015b      	lsls	r3, r3, #5
900023c2:	4413      	add	r3, r2
900023c4:	3310      	adds	r3, #16
900023c6:	681b      	ldr	r3, [r3, #0]
900023c8:	69ba      	ldr	r2, [r7, #24]
900023ca:	4413      	add	r3, r2
900023cc:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
900023ce:	697b      	ldr	r3, [r7, #20]
900023d0:	3301      	adds	r3, #1
900023d2:	617b      	str	r3, [r7, #20]
900023d4:	697a      	ldr	r2, [r7, #20]
900023d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900023d8:	429a      	cmp	r2, r3
900023da:	d3d2      	bcc.n	90002382 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
900023dc:	69fb      	ldr	r3, [r7, #28]
900023de:	3301      	adds	r3, #1
900023e0:	61fb      	str	r3, [r7, #28]
900023e2:	69fa      	ldr	r2, [r7, #28]
900023e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900023e6:	429a      	cmp	r2, r3
900023e8:	d3c8      	bcc.n	9000237c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
900023ea:	2300      	movs	r3, #0
}
900023ec:	4618      	mov	r0, r3
900023ee:	3720      	adds	r7, #32
900023f0:	46bd      	mov	sp, r7
900023f2:	bd80      	pop	{r7, pc}
900023f4:	200011fc 	.word	0x200011fc

900023f8 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900023f8:	b580      	push	{r7, lr}
900023fa:	b088      	sub	sp, #32
900023fc:	af02      	add	r7, sp, #8
900023fe:	60f8      	str	r0, [r7, #12]
90002400:	60b9      	str	r1, [r7, #8]
90002402:	607a      	str	r2, [r7, #4]
90002404:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002406:	4a21      	ldr	r2, [pc, #132]	@ (9000248c <BSP_LCD_DrawHLine+0x94>)
90002408:	68fb      	ldr	r3, [r7, #12]
9000240a:	015b      	lsls	r3, r3, #5
9000240c:	4413      	add	r3, r2
9000240e:	3308      	adds	r3, #8
90002410:	681b      	ldr	r3, [r3, #0]
90002412:	4a1f      	ldr	r2, [pc, #124]	@ (90002490 <BSP_LCD_DrawHLine+0x98>)
90002414:	2134      	movs	r1, #52	@ 0x34
90002416:	fb01 f303 	mul.w	r3, r1, r3
9000241a:	4413      	add	r3, r2
9000241c:	335c      	adds	r3, #92	@ 0x5c
9000241e:	681a      	ldr	r2, [r3, #0]
90002420:	491a      	ldr	r1, [pc, #104]	@ (9000248c <BSP_LCD_DrawHLine+0x94>)
90002422:	68fb      	ldr	r3, [r7, #12]
90002424:	015b      	lsls	r3, r3, #5
90002426:	440b      	add	r3, r1
90002428:	3310      	adds	r3, #16
9000242a:	681b      	ldr	r3, [r3, #0]
9000242c:	4817      	ldr	r0, [pc, #92]	@ (9000248c <BSP_LCD_DrawHLine+0x94>)
9000242e:	68f9      	ldr	r1, [r7, #12]
90002430:	0149      	lsls	r1, r1, #5
90002432:	4401      	add	r1, r0
90002434:	6809      	ldr	r1, [r1, #0]
90002436:	6878      	ldr	r0, [r7, #4]
90002438:	fb01 f000 	mul.w	r0, r1, r0
9000243c:	68b9      	ldr	r1, [r7, #8]
9000243e:	4401      	add	r1, r0
90002440:	fb01 f303 	mul.w	r3, r1, r3
90002444:	4413      	add	r3, r2
90002446:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002448:	68ba      	ldr	r2, [r7, #8]
9000244a:	683b      	ldr	r3, [r7, #0]
9000244c:	441a      	add	r2, r3
9000244e:	490f      	ldr	r1, [pc, #60]	@ (9000248c <BSP_LCD_DrawHLine+0x94>)
90002450:	68fb      	ldr	r3, [r7, #12]
90002452:	015b      	lsls	r3, r3, #5
90002454:	440b      	add	r3, r1
90002456:	681b      	ldr	r3, [r3, #0]
90002458:	429a      	cmp	r2, r3
9000245a:	d907      	bls.n	9000246c <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
9000245c:	4a0b      	ldr	r2, [pc, #44]	@ (9000248c <BSP_LCD_DrawHLine+0x94>)
9000245e:	68fb      	ldr	r3, [r7, #12]
90002460:	015b      	lsls	r3, r3, #5
90002462:	4413      	add	r3, r2
90002464:	681a      	ldr	r2, [r3, #0]
90002466:	68bb      	ldr	r3, [r7, #8]
90002468:	1ad3      	subs	r3, r2, r3
9000246a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
9000246c:	6979      	ldr	r1, [r7, #20]
9000246e:	6a3b      	ldr	r3, [r7, #32]
90002470:	9301      	str	r3, [sp, #4]
90002472:	2300      	movs	r3, #0
90002474:	9300      	str	r3, [sp, #0]
90002476:	2301      	movs	r3, #1
90002478:	683a      	ldr	r2, [r7, #0]
9000247a:	68f8      	ldr	r0, [r7, #12]
9000247c:	f000 f956 	bl	9000272c <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002480:	2300      	movs	r3, #0
}
90002482:	4618      	mov	r0, r3
90002484:	3718      	adds	r7, #24
90002486:	46bd      	mov	sp, r7
90002488:	bd80      	pop	{r7, pc}
9000248a:	bf00      	nop
9000248c:	200011fc 	.word	0x200011fc
90002490:	20001154 	.word	0x20001154

90002494 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002494:	b580      	push	{r7, lr}
90002496:	b088      	sub	sp, #32
90002498:	af02      	add	r7, sp, #8
9000249a:	60f8      	str	r0, [r7, #12]
9000249c:	60b9      	str	r1, [r7, #8]
9000249e:	607a      	str	r2, [r7, #4]
900024a0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900024a2:	4a24      	ldr	r2, [pc, #144]	@ (90002534 <BSP_LCD_DrawVLine+0xa0>)
900024a4:	68fb      	ldr	r3, [r7, #12]
900024a6:	015b      	lsls	r3, r3, #5
900024a8:	4413      	add	r3, r2
900024aa:	3308      	adds	r3, #8
900024ac:	681b      	ldr	r3, [r3, #0]
900024ae:	4a22      	ldr	r2, [pc, #136]	@ (90002538 <BSP_LCD_DrawVLine+0xa4>)
900024b0:	2134      	movs	r1, #52	@ 0x34
900024b2:	fb01 f303 	mul.w	r3, r1, r3
900024b6:	4413      	add	r3, r2
900024b8:	335c      	adds	r3, #92	@ 0x5c
900024ba:	681a      	ldr	r2, [r3, #0]
900024bc:	491d      	ldr	r1, [pc, #116]	@ (90002534 <BSP_LCD_DrawVLine+0xa0>)
900024be:	68fb      	ldr	r3, [r7, #12]
900024c0:	015b      	lsls	r3, r3, #5
900024c2:	440b      	add	r3, r1
900024c4:	3310      	adds	r3, #16
900024c6:	681b      	ldr	r3, [r3, #0]
900024c8:	481a      	ldr	r0, [pc, #104]	@ (90002534 <BSP_LCD_DrawVLine+0xa0>)
900024ca:	68f9      	ldr	r1, [r7, #12]
900024cc:	0149      	lsls	r1, r1, #5
900024ce:	4401      	add	r1, r0
900024d0:	6809      	ldr	r1, [r1, #0]
900024d2:	6878      	ldr	r0, [r7, #4]
900024d4:	fb01 f000 	mul.w	r0, r1, r0
900024d8:	68b9      	ldr	r1, [r7, #8]
900024da:	4401      	add	r1, r0
900024dc:	fb01 f303 	mul.w	r3, r1, r3
900024e0:	4413      	add	r3, r2
900024e2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
900024e4:	687a      	ldr	r2, [r7, #4]
900024e6:	683b      	ldr	r3, [r7, #0]
900024e8:	441a      	add	r2, r3
900024ea:	4912      	ldr	r1, [pc, #72]	@ (90002534 <BSP_LCD_DrawVLine+0xa0>)
900024ec:	68fb      	ldr	r3, [r7, #12]
900024ee:	015b      	lsls	r3, r3, #5
900024f0:	440b      	add	r3, r1
900024f2:	3304      	adds	r3, #4
900024f4:	681b      	ldr	r3, [r3, #0]
900024f6:	429a      	cmp	r2, r3
900024f8:	d908      	bls.n	9000250c <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
900024fa:	4a0e      	ldr	r2, [pc, #56]	@ (90002534 <BSP_LCD_DrawVLine+0xa0>)
900024fc:	68fb      	ldr	r3, [r7, #12]
900024fe:	015b      	lsls	r3, r3, #5
90002500:	4413      	add	r3, r2
90002502:	3304      	adds	r3, #4
90002504:	681a      	ldr	r2, [r3, #0]
90002506:	687b      	ldr	r3, [r7, #4]
90002508:	1ad3      	subs	r3, r2, r3
9000250a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
9000250c:	6979      	ldr	r1, [r7, #20]
9000250e:	4a09      	ldr	r2, [pc, #36]	@ (90002534 <BSP_LCD_DrawVLine+0xa0>)
90002510:	68fb      	ldr	r3, [r7, #12]
90002512:	015b      	lsls	r3, r3, #5
90002514:	4413      	add	r3, r2
90002516:	681b      	ldr	r3, [r3, #0]
90002518:	3b01      	subs	r3, #1
9000251a:	6a3a      	ldr	r2, [r7, #32]
9000251c:	9201      	str	r2, [sp, #4]
9000251e:	9300      	str	r3, [sp, #0]
90002520:	683b      	ldr	r3, [r7, #0]
90002522:	2201      	movs	r2, #1
90002524:	68f8      	ldr	r0, [r7, #12]
90002526:	f000 f901 	bl	9000272c <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000252a:	2300      	movs	r3, #0
}
9000252c:	4618      	mov	r0, r3
9000252e:	3718      	adds	r7, #24
90002530:	46bd      	mov	sp, r7
90002532:	bd80      	pop	{r7, pc}
90002534:	200011fc 	.word	0x200011fc
90002538:	20001154 	.word	0x20001154

9000253c <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000253c:	b580      	push	{r7, lr}
9000253e:	b088      	sub	sp, #32
90002540:	af02      	add	r7, sp, #8
90002542:	60f8      	str	r0, [r7, #12]
90002544:	60b9      	str	r1, [r7, #8]
90002546:	607a      	str	r2, [r7, #4]
90002548:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000254a:	4a1b      	ldr	r2, [pc, #108]	@ (900025b8 <BSP_LCD_FillRect+0x7c>)
9000254c:	68fb      	ldr	r3, [r7, #12]
9000254e:	015b      	lsls	r3, r3, #5
90002550:	4413      	add	r3, r2
90002552:	3308      	adds	r3, #8
90002554:	681b      	ldr	r3, [r3, #0]
90002556:	4a19      	ldr	r2, [pc, #100]	@ (900025bc <BSP_LCD_FillRect+0x80>)
90002558:	2134      	movs	r1, #52	@ 0x34
9000255a:	fb01 f303 	mul.w	r3, r1, r3
9000255e:	4413      	add	r3, r2
90002560:	335c      	adds	r3, #92	@ 0x5c
90002562:	681a      	ldr	r2, [r3, #0]
90002564:	4914      	ldr	r1, [pc, #80]	@ (900025b8 <BSP_LCD_FillRect+0x7c>)
90002566:	68fb      	ldr	r3, [r7, #12]
90002568:	015b      	lsls	r3, r3, #5
9000256a:	440b      	add	r3, r1
9000256c:	3310      	adds	r3, #16
9000256e:	681b      	ldr	r3, [r3, #0]
90002570:	4811      	ldr	r0, [pc, #68]	@ (900025b8 <BSP_LCD_FillRect+0x7c>)
90002572:	68f9      	ldr	r1, [r7, #12]
90002574:	0149      	lsls	r1, r1, #5
90002576:	4401      	add	r1, r0
90002578:	6809      	ldr	r1, [r1, #0]
9000257a:	6878      	ldr	r0, [r7, #4]
9000257c:	fb01 f000 	mul.w	r0, r1, r0
90002580:	68b9      	ldr	r1, [r7, #8]
90002582:	4401      	add	r1, r0
90002584:	fb01 f303 	mul.w	r3, r1, r3
90002588:	4413      	add	r3, r2
9000258a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
9000258c:	6979      	ldr	r1, [r7, #20]
9000258e:	4a0a      	ldr	r2, [pc, #40]	@ (900025b8 <BSP_LCD_FillRect+0x7c>)
90002590:	68fb      	ldr	r3, [r7, #12]
90002592:	015b      	lsls	r3, r3, #5
90002594:	4413      	add	r3, r2
90002596:	681a      	ldr	r2, [r3, #0]
90002598:	683b      	ldr	r3, [r7, #0]
9000259a:	1ad3      	subs	r3, r2, r3
9000259c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000259e:	9201      	str	r2, [sp, #4]
900025a0:	9300      	str	r3, [sp, #0]
900025a2:	6a3b      	ldr	r3, [r7, #32]
900025a4:	683a      	ldr	r2, [r7, #0]
900025a6:	68f8      	ldr	r0, [r7, #12]
900025a8:	f000 f8c0 	bl	9000272c <LL_FillBuffer>

  return BSP_ERROR_NONE;
900025ac:	2300      	movs	r3, #0
}
900025ae:	4618      	mov	r0, r3
900025b0:	3718      	adds	r7, #24
900025b2:	46bd      	mov	sp, r7
900025b4:	bd80      	pop	{r7, pc}
900025b6:	bf00      	nop
900025b8:	200011fc 	.word	0x200011fc
900025bc:	20001154 	.word	0x20001154

900025c0 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900025c0:	b480      	push	{r7}
900025c2:	b085      	sub	sp, #20
900025c4:	af00      	add	r7, sp, #0
900025c6:	60f8      	str	r0, [r7, #12]
900025c8:	60b9      	str	r1, [r7, #8]
900025ca:	607a      	str	r2, [r7, #4]
900025cc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900025ce:	4a28      	ldr	r2, [pc, #160]	@ (90002670 <BSP_LCD_ReadPixel+0xb0>)
900025d0:	68fb      	ldr	r3, [r7, #12]
900025d2:	015b      	lsls	r3, r3, #5
900025d4:	4413      	add	r3, r2
900025d6:	3308      	adds	r3, #8
900025d8:	681b      	ldr	r3, [r3, #0]
900025da:	4a26      	ldr	r2, [pc, #152]	@ (90002674 <BSP_LCD_ReadPixel+0xb4>)
900025dc:	2134      	movs	r1, #52	@ 0x34
900025de:	fb01 f303 	mul.w	r3, r1, r3
900025e2:	4413      	add	r3, r2
900025e4:	3348      	adds	r3, #72	@ 0x48
900025e6:	681b      	ldr	r3, [r3, #0]
900025e8:	2b00      	cmp	r3, #0
900025ea:	d11c      	bne.n	90002626 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900025ec:	4a20      	ldr	r2, [pc, #128]	@ (90002670 <BSP_LCD_ReadPixel+0xb0>)
900025ee:	68fb      	ldr	r3, [r7, #12]
900025f0:	015b      	lsls	r3, r3, #5
900025f2:	4413      	add	r3, r2
900025f4:	3308      	adds	r3, #8
900025f6:	681b      	ldr	r3, [r3, #0]
900025f8:	4a1e      	ldr	r2, [pc, #120]	@ (90002674 <BSP_LCD_ReadPixel+0xb4>)
900025fa:	2134      	movs	r1, #52	@ 0x34
900025fc:	fb01 f303 	mul.w	r3, r1, r3
90002600:	4413      	add	r3, r2
90002602:	335c      	adds	r3, #92	@ 0x5c
90002604:	681a      	ldr	r2, [r3, #0]
90002606:	491a      	ldr	r1, [pc, #104]	@ (90002670 <BSP_LCD_ReadPixel+0xb0>)
90002608:	68fb      	ldr	r3, [r7, #12]
9000260a:	015b      	lsls	r3, r3, #5
9000260c:	440b      	add	r3, r1
9000260e:	681b      	ldr	r3, [r3, #0]
90002610:	6879      	ldr	r1, [r7, #4]
90002612:	fb03 f101 	mul.w	r1, r3, r1
90002616:	68bb      	ldr	r3, [r7, #8]
90002618:	440b      	add	r3, r1
9000261a:	009b      	lsls	r3, r3, #2
9000261c:	4413      	add	r3, r2
9000261e:	681a      	ldr	r2, [r3, #0]
90002620:	683b      	ldr	r3, [r7, #0]
90002622:	601a      	str	r2, [r3, #0]
90002624:	e01d      	b.n	90002662 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002626:	4a12      	ldr	r2, [pc, #72]	@ (90002670 <BSP_LCD_ReadPixel+0xb0>)
90002628:	68fb      	ldr	r3, [r7, #12]
9000262a:	015b      	lsls	r3, r3, #5
9000262c:	4413      	add	r3, r2
9000262e:	3308      	adds	r3, #8
90002630:	681b      	ldr	r3, [r3, #0]
90002632:	4a10      	ldr	r2, [pc, #64]	@ (90002674 <BSP_LCD_ReadPixel+0xb4>)
90002634:	2134      	movs	r1, #52	@ 0x34
90002636:	fb01 f303 	mul.w	r3, r1, r3
9000263a:	4413      	add	r3, r2
9000263c:	335c      	adds	r3, #92	@ 0x5c
9000263e:	681a      	ldr	r2, [r3, #0]
90002640:	490b      	ldr	r1, [pc, #44]	@ (90002670 <BSP_LCD_ReadPixel+0xb0>)
90002642:	68fb      	ldr	r3, [r7, #12]
90002644:	015b      	lsls	r3, r3, #5
90002646:	440b      	add	r3, r1
90002648:	681b      	ldr	r3, [r3, #0]
9000264a:	6879      	ldr	r1, [r7, #4]
9000264c:	fb03 f101 	mul.w	r1, r3, r1
90002650:	68bb      	ldr	r3, [r7, #8]
90002652:	440b      	add	r3, r1
90002654:	005b      	lsls	r3, r3, #1
90002656:	4413      	add	r3, r2
90002658:	881b      	ldrh	r3, [r3, #0]
9000265a:	b29b      	uxth	r3, r3
9000265c:	461a      	mov	r2, r3
9000265e:	683b      	ldr	r3, [r7, #0]
90002660:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002662:	2300      	movs	r3, #0
}
90002664:	4618      	mov	r0, r3
90002666:	3714      	adds	r7, #20
90002668:	46bd      	mov	sp, r7
9000266a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000266e:	4770      	bx	lr
90002670:	200011fc 	.word	0x200011fc
90002674:	20001154 	.word	0x20001154

90002678 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002678:	b480      	push	{r7}
9000267a:	b085      	sub	sp, #20
9000267c:	af00      	add	r7, sp, #0
9000267e:	60f8      	str	r0, [r7, #12]
90002680:	60b9      	str	r1, [r7, #8]
90002682:	607a      	str	r2, [r7, #4]
90002684:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002686:	4a27      	ldr	r2, [pc, #156]	@ (90002724 <BSP_LCD_WritePixel+0xac>)
90002688:	68fb      	ldr	r3, [r7, #12]
9000268a:	015b      	lsls	r3, r3, #5
9000268c:	4413      	add	r3, r2
9000268e:	3308      	adds	r3, #8
90002690:	681b      	ldr	r3, [r3, #0]
90002692:	4a25      	ldr	r2, [pc, #148]	@ (90002728 <BSP_LCD_WritePixel+0xb0>)
90002694:	2134      	movs	r1, #52	@ 0x34
90002696:	fb01 f303 	mul.w	r3, r1, r3
9000269a:	4413      	add	r3, r2
9000269c:	3348      	adds	r3, #72	@ 0x48
9000269e:	681b      	ldr	r3, [r3, #0]
900026a0:	2b00      	cmp	r3, #0
900026a2:	d11c      	bne.n	900026de <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900026a4:	4a1f      	ldr	r2, [pc, #124]	@ (90002724 <BSP_LCD_WritePixel+0xac>)
900026a6:	68fb      	ldr	r3, [r7, #12]
900026a8:	015b      	lsls	r3, r3, #5
900026aa:	4413      	add	r3, r2
900026ac:	3308      	adds	r3, #8
900026ae:	681b      	ldr	r3, [r3, #0]
900026b0:	4a1d      	ldr	r2, [pc, #116]	@ (90002728 <BSP_LCD_WritePixel+0xb0>)
900026b2:	2134      	movs	r1, #52	@ 0x34
900026b4:	fb01 f303 	mul.w	r3, r1, r3
900026b8:	4413      	add	r3, r2
900026ba:	335c      	adds	r3, #92	@ 0x5c
900026bc:	681a      	ldr	r2, [r3, #0]
900026be:	4919      	ldr	r1, [pc, #100]	@ (90002724 <BSP_LCD_WritePixel+0xac>)
900026c0:	68fb      	ldr	r3, [r7, #12]
900026c2:	015b      	lsls	r3, r3, #5
900026c4:	440b      	add	r3, r1
900026c6:	681b      	ldr	r3, [r3, #0]
900026c8:	6879      	ldr	r1, [r7, #4]
900026ca:	fb03 f101 	mul.w	r1, r3, r1
900026ce:	68bb      	ldr	r3, [r7, #8]
900026d0:	440b      	add	r3, r1
900026d2:	009b      	lsls	r3, r3, #2
900026d4:	4413      	add	r3, r2
900026d6:	461a      	mov	r2, r3
900026d8:	683b      	ldr	r3, [r7, #0]
900026da:	6013      	str	r3, [r2, #0]
900026dc:	e01b      	b.n	90002716 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
900026de:	4a11      	ldr	r2, [pc, #68]	@ (90002724 <BSP_LCD_WritePixel+0xac>)
900026e0:	68fb      	ldr	r3, [r7, #12]
900026e2:	015b      	lsls	r3, r3, #5
900026e4:	4413      	add	r3, r2
900026e6:	3308      	adds	r3, #8
900026e8:	681b      	ldr	r3, [r3, #0]
900026ea:	4a0f      	ldr	r2, [pc, #60]	@ (90002728 <BSP_LCD_WritePixel+0xb0>)
900026ec:	2134      	movs	r1, #52	@ 0x34
900026ee:	fb01 f303 	mul.w	r3, r1, r3
900026f2:	4413      	add	r3, r2
900026f4:	335c      	adds	r3, #92	@ 0x5c
900026f6:	681a      	ldr	r2, [r3, #0]
900026f8:	490a      	ldr	r1, [pc, #40]	@ (90002724 <BSP_LCD_WritePixel+0xac>)
900026fa:	68fb      	ldr	r3, [r7, #12]
900026fc:	015b      	lsls	r3, r3, #5
900026fe:	440b      	add	r3, r1
90002700:	681b      	ldr	r3, [r3, #0]
90002702:	6879      	ldr	r1, [r7, #4]
90002704:	fb03 f101 	mul.w	r1, r3, r1
90002708:	68bb      	ldr	r3, [r7, #8]
9000270a:	440b      	add	r3, r1
9000270c:	005b      	lsls	r3, r3, #1
9000270e:	4413      	add	r3, r2
90002710:	683a      	ldr	r2, [r7, #0]
90002712:	b292      	uxth	r2, r2
90002714:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002716:	2300      	movs	r3, #0
}
90002718:	4618      	mov	r0, r3
9000271a:	3714      	adds	r7, #20
9000271c:	46bd      	mov	sp, r7
9000271e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002722:	4770      	bx	lr
90002724:	200011fc 	.word	0x200011fc
90002728:	20001154 	.word	0x20001154

9000272c <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
9000272c:	b580      	push	{r7, lr}
9000272e:	b088      	sub	sp, #32
90002730:	af02      	add	r7, sp, #8
90002732:	60f8      	str	r0, [r7, #12]
90002734:	60b9      	str	r1, [r7, #8]
90002736:	607a      	str	r2, [r7, #4]
90002738:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
9000273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000273c:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
9000273e:	4a2d      	ldr	r2, [pc, #180]	@ (900027f4 <LL_FillBuffer+0xc8>)
90002740:	68fb      	ldr	r3, [r7, #12]
90002742:	015b      	lsls	r3, r3, #5
90002744:	4413      	add	r3, r2
90002746:	330c      	adds	r3, #12
90002748:	681b      	ldr	r3, [r3, #0]
9000274a:	2b02      	cmp	r3, #2
9000274c:	d129      	bne.n	900027a2 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000274e:	2302      	movs	r3, #2
90002750:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002754:	0adb      	lsrs	r3, r3, #11
90002756:	f003 021f 	and.w	r2, r3, #31
9000275a:	4613      	mov	r3, r2
9000275c:	011b      	lsls	r3, r3, #4
9000275e:	4413      	add	r3, r2
90002760:	015a      	lsls	r2, r3, #5
90002762:	1ad3      	subs	r3, r2, r3
90002764:	3317      	adds	r3, #23
90002766:	099b      	lsrs	r3, r3, #6
90002768:	0419      	lsls	r1, r3, #16
9000276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000276c:	095b      	lsrs	r3, r3, #5
9000276e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002772:	4613      	mov	r3, r2
90002774:	01db      	lsls	r3, r3, #7
90002776:	4413      	add	r3, r2
90002778:	005b      	lsls	r3, r3, #1
9000277a:	4413      	add	r3, r2
9000277c:	3321      	adds	r3, #33	@ 0x21
9000277e:	099b      	lsrs	r3, r3, #6
90002780:	021b      	lsls	r3, r3, #8
90002782:	4319      	orrs	r1, r3
90002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002786:	f003 021f 	and.w	r2, r3, #31
9000278a:	4613      	mov	r3, r2
9000278c:	011b      	lsls	r3, r3, #4
9000278e:	4413      	add	r3, r2
90002790:	015a      	lsls	r2, r3, #5
90002792:	1ad3      	subs	r3, r2, r3
90002794:	3317      	adds	r3, #23
90002796:	099b      	lsrs	r3, r3, #6
90002798:	430b      	orrs	r3, r1
9000279a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
9000279e:	613b      	str	r3, [r7, #16]
    break;
900027a0:	e002      	b.n	900027a8 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900027a2:	2300      	movs	r3, #0
900027a4:	617b      	str	r3, [r7, #20]
    break;
900027a6:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900027a8:	4b13      	ldr	r3, [pc, #76]	@ (900027f8 <LL_FillBuffer+0xcc>)
900027aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
900027ae:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900027b0:	4a11      	ldr	r2, [pc, #68]	@ (900027f8 <LL_FillBuffer+0xcc>)
900027b2:	697b      	ldr	r3, [r7, #20]
900027b4:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900027b6:	4a10      	ldr	r2, [pc, #64]	@ (900027f8 <LL_FillBuffer+0xcc>)
900027b8:	6a3b      	ldr	r3, [r7, #32]
900027ba:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900027bc:	4b0e      	ldr	r3, [pc, #56]	@ (900027f8 <LL_FillBuffer+0xcc>)
900027be:	4a0f      	ldr	r2, [pc, #60]	@ (900027fc <LL_FillBuffer+0xd0>)
900027c0:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900027c2:	480d      	ldr	r0, [pc, #52]	@ (900027f8 <LL_FillBuffer+0xcc>)
900027c4:	f000 fe50 	bl	90003468 <HAL_DMA2D_Init>
900027c8:	4603      	mov	r3, r0
900027ca:	2b00      	cmp	r3, #0
900027cc:	d10e      	bne.n	900027ec <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900027ce:	68ba      	ldr	r2, [r7, #8]
900027d0:	683b      	ldr	r3, [r7, #0]
900027d2:	9300      	str	r3, [sp, #0]
900027d4:	687b      	ldr	r3, [r7, #4]
900027d6:	6939      	ldr	r1, [r7, #16]
900027d8:	4807      	ldr	r0, [pc, #28]	@ (900027f8 <LL_FillBuffer+0xcc>)
900027da:	f000 feb3 	bl	90003544 <HAL_DMA2D_Start>
900027de:	4603      	mov	r3, r0
900027e0:	2b00      	cmp	r3, #0
900027e2:	d103      	bne.n	900027ec <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900027e4:	2132      	movs	r1, #50	@ 0x32
900027e6:	4804      	ldr	r0, [pc, #16]	@ (900027f8 <LL_FillBuffer+0xcc>)
900027e8:	f000 fed7 	bl	9000359a <HAL_DMA2D_PollForTransfer>
    }
  }
}
900027ec:	bf00      	nop
900027ee:	3718      	adds	r7, #24
900027f0:	46bd      	mov	sp, r7
900027f2:	bd80      	pop	{r7, pc}
900027f4:	200011fc 	.word	0x200011fc
900027f8:	200010ec 	.word	0x200010ec
900027fc:	52001000 	.word	0x52001000

90002800 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002800:	b580      	push	{r7, lr}
90002802:	b088      	sub	sp, #32
90002804:	af02      	add	r7, sp, #8
90002806:	60f8      	str	r0, [r7, #12]
90002808:	60b9      	str	r1, [r7, #8]
9000280a:	607a      	str	r2, [r7, #4]
9000280c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000280e:	4a23      	ldr	r2, [pc, #140]	@ (9000289c <LL_ConvertLineToRGB+0x9c>)
90002810:	68fb      	ldr	r3, [r7, #12]
90002812:	015b      	lsls	r3, r3, #5
90002814:	4413      	add	r3, r2
90002816:	330c      	adds	r3, #12
90002818:	681b      	ldr	r3, [r3, #0]
9000281a:	2b02      	cmp	r3, #2
9000281c:	d102      	bne.n	90002824 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000281e:	2302      	movs	r3, #2
90002820:	617b      	str	r3, [r7, #20]
    break;
90002822:	e002      	b.n	9000282a <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002824:	2300      	movs	r3, #0
90002826:	617b      	str	r3, [r7, #20]
    break;
90002828:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
9000282a:	4b1d      	ldr	r3, [pc, #116]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
9000282c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002830:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002832:	4a1b      	ldr	r2, [pc, #108]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
90002834:	697b      	ldr	r3, [r7, #20]
90002836:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002838:	4b19      	ldr	r3, [pc, #100]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
9000283a:	2200      	movs	r2, #0
9000283c:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
9000283e:	4b18      	ldr	r3, [pc, #96]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
90002840:	2200      	movs	r2, #0
90002842:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002844:	4b16      	ldr	r3, [pc, #88]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
90002846:	22ff      	movs	r2, #255	@ 0xff
90002848:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
9000284a:	4a15      	ldr	r2, [pc, #84]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
9000284c:	6a3b      	ldr	r3, [r7, #32]
9000284e:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002850:	4b13      	ldr	r3, [pc, #76]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
90002852:	2200      	movs	r2, #0
90002854:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002856:	4b12      	ldr	r3, [pc, #72]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
90002858:	4a12      	ldr	r2, [pc, #72]	@ (900028a4 <LL_ConvertLineToRGB+0xa4>)
9000285a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
9000285c:	4810      	ldr	r0, [pc, #64]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
9000285e:	f000 fe03 	bl	90003468 <HAL_DMA2D_Init>
90002862:	4603      	mov	r3, r0
90002864:	2b00      	cmp	r3, #0
90002866:	d115      	bne.n	90002894 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002868:	2101      	movs	r1, #1
9000286a:	480d      	ldr	r0, [pc, #52]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
9000286c:	f000 ff7e 	bl	9000376c <HAL_DMA2D_ConfigLayer>
90002870:	4603      	mov	r3, r0
90002872:	2b00      	cmp	r3, #0
90002874:	d10e      	bne.n	90002894 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002876:	68b9      	ldr	r1, [r7, #8]
90002878:	687a      	ldr	r2, [r7, #4]
9000287a:	2301      	movs	r3, #1
9000287c:	9300      	str	r3, [sp, #0]
9000287e:	683b      	ldr	r3, [r7, #0]
90002880:	4807      	ldr	r0, [pc, #28]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
90002882:	f000 fe5f 	bl	90003544 <HAL_DMA2D_Start>
90002886:	4603      	mov	r3, r0
90002888:	2b00      	cmp	r3, #0
9000288a:	d103      	bne.n	90002894 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
9000288c:	2132      	movs	r1, #50	@ 0x32
9000288e:	4804      	ldr	r0, [pc, #16]	@ (900028a0 <LL_ConvertLineToRGB+0xa0>)
90002890:	f000 fe83 	bl	9000359a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002894:	bf00      	nop
90002896:	3718      	adds	r7, #24
90002898:	46bd      	mov	sp, r7
9000289a:	bd80      	pop	{r7, pc}
9000289c:	200011fc 	.word	0x200011fc
900028a0:	200010ec 	.word	0x200010ec
900028a4:	52001000 	.word	0x52001000

900028a8 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900028a8:	b580      	push	{r7, lr}
900028aa:	b08e      	sub	sp, #56	@ 0x38
900028ac:	af00      	add	r7, sp, #0
900028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
900028b0:	687b      	ldr	r3, [r7, #4]
900028b2:	681b      	ldr	r3, [r3, #0]
900028b4:	4a5b      	ldr	r2, [pc, #364]	@ (90002a24 <LTDC_MspInit+0x17c>)
900028b6:	4293      	cmp	r3, r2
900028b8:	f040 80b0 	bne.w	90002a1c <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
900028bc:	4b5a      	ldr	r3, [pc, #360]	@ (90002a28 <LTDC_MspInit+0x180>)
900028be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
900028c2:	4a59      	ldr	r2, [pc, #356]	@ (90002a28 <LTDC_MspInit+0x180>)
900028c4:	f043 0308 	orr.w	r3, r3, #8
900028c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
900028cc:	4b56      	ldr	r3, [pc, #344]	@ (90002a28 <LTDC_MspInit+0x180>)
900028ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
900028d2:	f003 0308 	and.w	r3, r3, #8
900028d6:	623b      	str	r3, [r7, #32]
900028d8:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
900028da:	4b53      	ldr	r3, [pc, #332]	@ (90002a28 <LTDC_MspInit+0x180>)
900028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900028e0:	4a51      	ldr	r2, [pc, #324]	@ (90002a28 <LTDC_MspInit+0x180>)
900028e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900028e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900028ea:	4b4f      	ldr	r3, [pc, #316]	@ (90002a28 <LTDC_MspInit+0x180>)
900028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900028f4:	61fb      	str	r3, [r7, #28]
900028f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
900028f8:	4b4b      	ldr	r3, [pc, #300]	@ (90002a28 <LTDC_MspInit+0x180>)
900028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900028fe:	4a4a      	ldr	r2, [pc, #296]	@ (90002a28 <LTDC_MspInit+0x180>)
90002900:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002908:	4b47      	ldr	r3, [pc, #284]	@ (90002a28 <LTDC_MspInit+0x180>)
9000290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000290e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002912:	61bb      	str	r3, [r7, #24]
90002914:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002916:	4b44      	ldr	r3, [pc, #272]	@ (90002a28 <LTDC_MspInit+0x180>)
90002918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000291c:	4a42      	ldr	r2, [pc, #264]	@ (90002a28 <LTDC_MspInit+0x180>)
9000291e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002922:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002926:	4b40      	ldr	r3, [pc, #256]	@ (90002a28 <LTDC_MspInit+0x180>)
90002928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002930:	617b      	str	r3, [r7, #20]
90002932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002934:	4b3c      	ldr	r3, [pc, #240]	@ (90002a28 <LTDC_MspInit+0x180>)
90002936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000293a:	4a3b      	ldr	r2, [pc, #236]	@ (90002a28 <LTDC_MspInit+0x180>)
9000293c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002940:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002944:	4b38      	ldr	r3, [pc, #224]	@ (90002a28 <LTDC_MspInit+0x180>)
90002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000294a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000294e:	613b      	str	r3, [r7, #16]
90002950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002952:	4b35      	ldr	r3, [pc, #212]	@ (90002a28 <LTDC_MspInit+0x180>)
90002954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002958:	4a33      	ldr	r2, [pc, #204]	@ (90002a28 <LTDC_MspInit+0x180>)
9000295a:	f043 0308 	orr.w	r3, r3, #8
9000295e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002962:	4b31      	ldr	r3, [pc, #196]	@ (90002a28 <LTDC_MspInit+0x180>)
90002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002968:	f003 0308 	and.w	r3, r3, #8
9000296c:	60fb      	str	r3, [r7, #12]
9000296e:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002970:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002974:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002976:	2302      	movs	r3, #2
90002978:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
9000297a:	2300      	movs	r3, #0
9000297c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000297e:	2302      	movs	r3, #2
90002980:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002982:	230e      	movs	r3, #14
90002984:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000298a:	4619      	mov	r1, r3
9000298c:	4827      	ldr	r0, [pc, #156]	@ (90002a2c <LTDC_MspInit+0x184>)
9000298e:	f001 f841 	bl	90003a14 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002996:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002998:	230e      	movs	r3, #14
9000299a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
9000299c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900029a0:	4619      	mov	r1, r3
900029a2:	4823      	ldr	r0, [pc, #140]	@ (90002a30 <LTDC_MspInit+0x188>)
900029a4:	f001 f836 	bl	90003a14 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900029a8:	23ff      	movs	r3, #255	@ 0xff
900029aa:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900029ac:	230e      	movs	r3, #14
900029ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
900029b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900029b4:	4619      	mov	r1, r3
900029b6:	481f      	ldr	r0, [pc, #124]	@ (90002a34 <LTDC_MspInit+0x18c>)
900029b8:	f001 f82c 	bl	90003a14 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
900029bc:	f240 2302 	movw	r3, #514	@ 0x202
900029c0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900029c2:	2302      	movs	r3, #2
900029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900029c6:	2300      	movs	r3, #0
900029c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900029ca:	2302      	movs	r3, #2
900029cc:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900029ce:	230e      	movs	r3, #14
900029d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900029d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900029d6:	4619      	mov	r1, r3
900029d8:	4817      	ldr	r0, [pc, #92]	@ (90002a38 <LTDC_MspInit+0x190>)
900029da:	f001 f81b 	bl	90003a14 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
900029de:	2380      	movs	r3, #128	@ 0x80
900029e0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900029e2:	2301      	movs	r3, #1
900029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900029e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900029ea:	4619      	mov	r1, r3
900029ec:	4813      	ldr	r0, [pc, #76]	@ (90002a3c <LTDC_MspInit+0x194>)
900029ee:	f001 f811 	bl	90003a14 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
900029f2:	2201      	movs	r2, #1
900029f4:	2180      	movs	r1, #128	@ 0x80
900029f6:	4811      	ldr	r0, [pc, #68]	@ (90002a3c <LTDC_MspInit+0x194>)
900029f8:	f001 f9d4 	bl	90003da4 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
900029fc:	4b0a      	ldr	r3, [pc, #40]	@ (90002a28 <LTDC_MspInit+0x180>)
900029fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002a02:	4a09      	ldr	r2, [pc, #36]	@ (90002a28 <LTDC_MspInit+0x180>)
90002a04:	f043 0308 	orr.w	r3, r3, #8
90002a08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002a0c:	4b06      	ldr	r3, [pc, #24]	@ (90002a28 <LTDC_MspInit+0x180>)
90002a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002a12:	4a05      	ldr	r2, [pc, #20]	@ (90002a28 <LTDC_MspInit+0x180>)
90002a14:	f023 0308 	bic.w	r3, r3, #8
90002a18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002a1c:	bf00      	nop
90002a1e:	3738      	adds	r7, #56	@ 0x38
90002a20:	46bd      	mov	sp, r7
90002a22:	bd80      	pop	{r7, pc}
90002a24:	50001000 	.word	0x50001000
90002a28:	58024400 	.word	0x58024400
90002a2c:	58022000 	.word	0x58022000
90002a30:	58022400 	.word	0x58022400
90002a34:	58022800 	.word	0x58022800
90002a38:	58021c00 	.word	0x58021c00
90002a3c:	58020c00 	.word	0x58020c00

90002a40 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002a40:	b480      	push	{r7}
90002a42:	b085      	sub	sp, #20
90002a44:	af00      	add	r7, sp, #0
90002a46:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002a48:	687b      	ldr	r3, [r7, #4]
90002a4a:	681b      	ldr	r3, [r3, #0]
90002a4c:	4a11      	ldr	r2, [pc, #68]	@ (90002a94 <DMA2D_MspInit+0x54>)
90002a4e:	4293      	cmp	r3, r2
90002a50:	d11a      	bne.n	90002a88 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002a52:	4b11      	ldr	r3, [pc, #68]	@ (90002a98 <DMA2D_MspInit+0x58>)
90002a54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a58:	4a0f      	ldr	r2, [pc, #60]	@ (90002a98 <DMA2D_MspInit+0x58>)
90002a5a:	f043 0310 	orr.w	r3, r3, #16
90002a5e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002a62:	4b0d      	ldr	r3, [pc, #52]	@ (90002a98 <DMA2D_MspInit+0x58>)
90002a64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a68:	f003 0310 	and.w	r3, r3, #16
90002a6c:	60fb      	str	r3, [r7, #12]
90002a6e:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002a70:	4b09      	ldr	r3, [pc, #36]	@ (90002a98 <DMA2D_MspInit+0x58>)
90002a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002a74:	4a08      	ldr	r2, [pc, #32]	@ (90002a98 <DMA2D_MspInit+0x58>)
90002a76:	f043 0310 	orr.w	r3, r3, #16
90002a7a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002a7c:	4b06      	ldr	r3, [pc, #24]	@ (90002a98 <DMA2D_MspInit+0x58>)
90002a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002a80:	4a05      	ldr	r2, [pc, #20]	@ (90002a98 <DMA2D_MspInit+0x58>)
90002a82:	f023 0310 	bic.w	r3, r3, #16
90002a86:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002a88:	bf00      	nop
90002a8a:	3714      	adds	r7, #20
90002a8c:	46bd      	mov	sp, r7
90002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002a92:	4770      	bx	lr
90002a94:	52001000 	.word	0x52001000
90002a98:	58024400 	.word	0x58024400

90002a9c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002a9c:	b580      	push	{r7, lr}
90002a9e:	b08a      	sub	sp, #40	@ 0x28
90002aa0:	af00      	add	r7, sp, #0
90002aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002aa4:	4b18      	ldr	r3, [pc, #96]	@ (90002b08 <TIMx_PWM_MspInit+0x6c>)
90002aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aaa:	4a17      	ldr	r2, [pc, #92]	@ (90002b08 <TIMx_PWM_MspInit+0x6c>)
90002aac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ab4:	4b14      	ldr	r3, [pc, #80]	@ (90002b08 <TIMx_PWM_MspInit+0x6c>)
90002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002abe:	613b      	str	r3, [r7, #16]
90002ac0:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002ac2:	4b11      	ldr	r3, [pc, #68]	@ (90002b08 <TIMx_PWM_MspInit+0x6c>)
90002ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002ac8:	4a0f      	ldr	r2, [pc, #60]	@ (90002b08 <TIMx_PWM_MspInit+0x6c>)
90002aca:	f043 0302 	orr.w	r3, r3, #2
90002ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (90002b08 <TIMx_PWM_MspInit+0x6c>)
90002ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002ad8:	f003 0302 	and.w	r3, r3, #2
90002adc:	60fb      	str	r3, [r7, #12]
90002ade:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002ae0:	2302      	movs	r3, #2
90002ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002ae4:	2300      	movs	r3, #0
90002ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002ae8:	2301      	movs	r3, #1
90002aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002aec:	2303      	movs	r3, #3
90002aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002af0:	2301      	movs	r3, #1
90002af2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002af4:	f107 0314 	add.w	r3, r7, #20
90002af8:	4619      	mov	r1, r3
90002afa:	4804      	ldr	r0, [pc, #16]	@ (90002b0c <TIMx_PWM_MspInit+0x70>)
90002afc:	f000 ff8a 	bl	90003a14 <HAL_GPIO_Init>
}
90002b00:	bf00      	nop
90002b02:	3728      	adds	r7, #40	@ 0x28
90002b04:	46bd      	mov	sp, r7
90002b06:	bd80      	pop	{r7, pc}
90002b08:	58024400 	.word	0x58024400
90002b0c:	58022800 	.word	0x58022800

90002b10 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002b10:	b580      	push	{r7, lr}
90002b12:	b082      	sub	sp, #8
90002b14:	af00      	add	r7, sp, #0
90002b16:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002b18:	687b      	ldr	r3, [r7, #4]
90002b1a:	4a11      	ldr	r2, [pc, #68]	@ (90002b60 <TIMx_PWM_Init+0x50>)
90002b1c:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002b1e:	6878      	ldr	r0, [r7, #4]
90002b20:	f006 fe82 	bl	90009828 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002b24:	6878      	ldr	r0, [r7, #4]
90002b26:	f7ff ffb9 	bl	90002a9c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002b2a:	687b      	ldr	r3, [r7, #4]
90002b2c:	2204      	movs	r2, #4
90002b2e:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002b30:	687b      	ldr	r3, [r7, #4]
90002b32:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002b36:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002b38:	687b      	ldr	r3, [r7, #4]
90002b3a:	2200      	movs	r2, #0
90002b3c:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002b3e:	687b      	ldr	r3, [r7, #4]
90002b40:	2200      	movs	r2, #0
90002b42:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002b44:	687b      	ldr	r3, [r7, #4]
90002b46:	2200      	movs	r2, #0
90002b48:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002b4a:	687b      	ldr	r3, [r7, #4]
90002b4c:	2200      	movs	r2, #0
90002b4e:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002b50:	6878      	ldr	r0, [r7, #4]
90002b52:	f006 fe12 	bl	9000977a <HAL_TIM_PWM_Init>
}
90002b56:	bf00      	nop
90002b58:	3708      	adds	r7, #8
90002b5a:	46bd      	mov	sp, r7
90002b5c:	bd80      	pop	{r7, pc}
90002b5e:	bf00      	nop
90002b60:	40010400 	.word	0x40010400

90002b64 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002b64:	b580      	push	{r7, lr}
90002b66:	b084      	sub	sp, #16
90002b68:	af00      	add	r7, sp, #0
90002b6a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002b6c:	2300      	movs	r3, #0
90002b6e:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002b70:	687b      	ldr	r3, [r7, #4]
90002b72:	2b00      	cmp	r3, #0
90002b74:	d003      	beq.n	90002b7e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002b76:	f06f 0301 	mvn.w	r3, #1
90002b7a:	60fb      	str	r3, [r7, #12]
90002b7c:	e044      	b.n	90002c08 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002b7e:	687b      	ldr	r3, [r7, #4]
90002b80:	2234      	movs	r2, #52	@ 0x34
90002b82:	fb02 f303 	mul.w	r3, r2, r3
90002b86:	4a23      	ldr	r2, [pc, #140]	@ (90002c14 <BSP_SDRAM_Init+0xb0>)
90002b88:	4413      	add	r3, r2
90002b8a:	4618      	mov	r0, r3
90002b8c:	f000 f892 	bl	90002cb4 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002b90:	687b      	ldr	r3, [r7, #4]
90002b92:	2234      	movs	r2, #52	@ 0x34
90002b94:	fb02 f303 	mul.w	r3, r2, r3
90002b98:	4a1e      	ldr	r2, [pc, #120]	@ (90002c14 <BSP_SDRAM_Init+0xb0>)
90002b9a:	4413      	add	r3, r2
90002b9c:	2210      	movs	r2, #16
90002b9e:	2104      	movs	r1, #4
90002ba0:	4618      	mov	r0, r3
90002ba2:	f000 f83b 	bl	90002c1c <MX_SDRAM_BANK2_Init>
90002ba6:	4603      	mov	r3, r0
90002ba8:	2b00      	cmp	r3, #0
90002baa:	d003      	beq.n	90002bb4 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002bac:	f04f 33ff 	mov.w	r3, #4294967295
90002bb0:	60fb      	str	r3, [r7, #12]
90002bb2:	e029      	b.n	90002c08 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002bb4:	4b18      	ldr	r3, [pc, #96]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bb6:	2208      	movs	r2, #8
90002bb8:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002bba:	4b17      	ldr	r3, [pc, #92]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bbc:	2203      	movs	r2, #3
90002bbe:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002bc0:	4b15      	ldr	r3, [pc, #84]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bc2:	f240 6203 	movw	r2, #1539	@ 0x603
90002bc6:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002bc8:	4b13      	ldr	r3, [pc, #76]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bca:	2200      	movs	r2, #0
90002bcc:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002bce:	4b12      	ldr	r3, [pc, #72]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bd0:	2200      	movs	r2, #0
90002bd2:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002bd4:	4b10      	ldr	r3, [pc, #64]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bd6:	2230      	movs	r2, #48	@ 0x30
90002bd8:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002bda:	4b0f      	ldr	r3, [pc, #60]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bdc:	2200      	movs	r2, #0
90002bde:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002be0:	4b0d      	ldr	r3, [pc, #52]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002be6:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002be8:	687b      	ldr	r3, [r7, #4]
90002bea:	2234      	movs	r2, #52	@ 0x34
90002bec:	fb02 f303 	mul.w	r3, r2, r3
90002bf0:	4a08      	ldr	r2, [pc, #32]	@ (90002c14 <BSP_SDRAM_Init+0xb0>)
90002bf2:	4413      	add	r3, r2
90002bf4:	4908      	ldr	r1, [pc, #32]	@ (90002c18 <BSP_SDRAM_Init+0xb4>)
90002bf6:	4618      	mov	r0, r3
90002bf8:	f7fe fbdf 	bl	900013ba <MT48LC4M32B2_Init>
90002bfc:	4603      	mov	r3, r0
90002bfe:	2b00      	cmp	r3, #0
90002c00:	d002      	beq.n	90002c08 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002c02:	f06f 0304 	mvn.w	r3, #4
90002c06:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002c08:	68fb      	ldr	r3, [r7, #12]
}
90002c0a:	4618      	mov	r0, r3
90002c0c:	3710      	adds	r7, #16
90002c0e:	46bd      	mov	sp, r7
90002c10:	bd80      	pop	{r7, pc}
90002c12:	bf00      	nop
90002c14:	2000121c 	.word	0x2000121c
90002c18:	20001250 	.word	0x20001250

90002c1c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002c1c:	b580      	push	{r7, lr}
90002c1e:	b08c      	sub	sp, #48	@ 0x30
90002c20:	af00      	add	r7, sp, #0
90002c22:	60f8      	str	r0, [r7, #12]
90002c24:	60b9      	str	r1, [r7, #8]
90002c26:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002c28:	4b20      	ldr	r3, [pc, #128]	@ (90002cac <MX_SDRAM_BANK2_Init+0x90>)
90002c2a:	4a21      	ldr	r2, [pc, #132]	@ (90002cb0 <MX_SDRAM_BANK2_Init+0x94>)
90002c2c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002c2e:	68fb      	ldr	r3, [r7, #12]
90002c30:	2201      	movs	r2, #1
90002c32:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002c34:	68fb      	ldr	r3, [r7, #12]
90002c36:	2200      	movs	r2, #0
90002c38:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002c3a:	68fb      	ldr	r3, [r7, #12]
90002c3c:	68ba      	ldr	r2, [r7, #8]
90002c3e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002c40:	68fb      	ldr	r3, [r7, #12]
90002c42:	687a      	ldr	r2, [r7, #4]
90002c44:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002c46:	4b19      	ldr	r3, [pc, #100]	@ (90002cac <MX_SDRAM_BANK2_Init+0x90>)
90002c48:	2240      	movs	r2, #64	@ 0x40
90002c4a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002c4c:	68fb      	ldr	r3, [r7, #12]
90002c4e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002c52:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002c54:	68fb      	ldr	r3, [r7, #12]
90002c56:	2200      	movs	r2, #0
90002c58:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002c5a:	68fb      	ldr	r3, [r7, #12]
90002c5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002c60:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002c62:	68fb      	ldr	r3, [r7, #12]
90002c64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002c68:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002c6a:	68fb      	ldr	r3, [r7, #12]
90002c6c:	2200      	movs	r2, #0
90002c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002c70:	2302      	movs	r3, #2
90002c72:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002c74:	2307      	movs	r3, #7
90002c76:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002c78:	2304      	movs	r3, #4
90002c7a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002c7c:	2307      	movs	r3, #7
90002c7e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002c80:	2302      	movs	r3, #2
90002c82:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002c84:	2302      	movs	r3, #2
90002c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002c88:	2302      	movs	r3, #2
90002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002c8c:	f107 0314 	add.w	r3, r7, #20
90002c90:	4619      	mov	r1, r3
90002c92:	68f8      	ldr	r0, [r7, #12]
90002c94:	f006 fcce 	bl	90009634 <HAL_SDRAM_Init>
90002c98:	4603      	mov	r3, r0
90002c9a:	2b00      	cmp	r3, #0
90002c9c:	d001      	beq.n	90002ca2 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002c9e:	2301      	movs	r3, #1
90002ca0:	e000      	b.n	90002ca4 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002ca2:	2300      	movs	r3, #0
}
90002ca4:	4618      	mov	r0, r3
90002ca6:	3730      	adds	r7, #48	@ 0x30
90002ca8:	46bd      	mov	sp, r7
90002caa:	bd80      	pop	{r7, pc}
90002cac:	2000121c 	.word	0x2000121c
90002cb0:	52004140 	.word	0x52004140

90002cb4 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002cb4:	b580      	push	{r7, lr}
90002cb6:	b08e      	sub	sp, #56	@ 0x38
90002cb8:	af00      	add	r7, sp, #0
90002cba:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002cbc:	4b73      	ldr	r3, [pc, #460]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002cbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002cc2:	4a72      	ldr	r2, [pc, #456]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002cc8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002ccc:	4b6f      	ldr	r3, [pc, #444]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002cce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002cd6:	623b      	str	r3, [r7, #32]
90002cd8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002cda:	4b6c      	ldr	r3, [pc, #432]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002cdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002ce0:	4a6a      	ldr	r2, [pc, #424]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002ce2:	f043 0301 	orr.w	r3, r3, #1
90002ce6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002cea:	4b68      	ldr	r3, [pc, #416]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002cec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002cf0:	f003 0301 	and.w	r3, r3, #1
90002cf4:	61fb      	str	r3, [r7, #28]
90002cf6:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002cf8:	4b64      	ldr	r3, [pc, #400]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cfe:	4a63      	ldr	r2, [pc, #396]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d00:	f043 0308 	orr.w	r3, r3, #8
90002d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d08:	4b60      	ldr	r3, [pc, #384]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d0e:	f003 0308 	and.w	r3, r3, #8
90002d12:	61bb      	str	r3, [r7, #24]
90002d14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002d16:	4b5d      	ldr	r3, [pc, #372]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d1c:	4a5b      	ldr	r2, [pc, #364]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d1e:	f043 0310 	orr.w	r3, r3, #16
90002d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d26:	4b59      	ldr	r3, [pc, #356]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d2c:	f003 0310 	and.w	r3, r3, #16
90002d30:	617b      	str	r3, [r7, #20]
90002d32:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002d34:	4b55      	ldr	r3, [pc, #340]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d3a:	4a54      	ldr	r2, [pc, #336]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d3c:	f043 0320 	orr.w	r3, r3, #32
90002d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d44:	4b51      	ldr	r3, [pc, #324]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d4a:	f003 0320 	and.w	r3, r3, #32
90002d4e:	613b      	str	r3, [r7, #16]
90002d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002d52:	4b4e      	ldr	r3, [pc, #312]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d58:	4a4c      	ldr	r2, [pc, #304]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d62:	4b4a      	ldr	r3, [pc, #296]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002d6c:	60fb      	str	r3, [r7, #12]
90002d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002d70:	4b46      	ldr	r3, [pc, #280]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d76:	4a45      	ldr	r2, [pc, #276]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d80:	4b42      	ldr	r3, [pc, #264]	@ (90002e8c <SDRAM_MspInit+0x1d8>)
90002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002d8a:	60bb      	str	r3, [r7, #8]
90002d8c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002d8e:	2302      	movs	r3, #2
90002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002d92:	2301      	movs	r3, #1
90002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002d96:	2303      	movs	r3, #3
90002d98:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002d9a:	230c      	movs	r3, #12
90002d9c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002d9e:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002da2:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002da8:	4619      	mov	r1, r3
90002daa:	4839      	ldr	r0, [pc, #228]	@ (90002e90 <SDRAM_MspInit+0x1dc>)
90002dac:	f000 fe32 	bl	90003a14 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002db0:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002db4:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002dba:	4619      	mov	r1, r3
90002dbc:	4835      	ldr	r0, [pc, #212]	@ (90002e94 <SDRAM_MspInit+0x1e0>)
90002dbe:	f000 fe29 	bl	90003a14 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002dc2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002dcc:	4619      	mov	r1, r3
90002dce:	4832      	ldr	r0, [pc, #200]	@ (90002e98 <SDRAM_MspInit+0x1e4>)
90002dd0:	f000 fe20 	bl	90003a14 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002dd4:	f248 1333 	movw	r3, #33075	@ 0x8133
90002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002dde:	4619      	mov	r1, r3
90002de0:	482e      	ldr	r0, [pc, #184]	@ (90002e9c <SDRAM_MspInit+0x1e8>)
90002de2:	f000 fe17 	bl	90003a14 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002de6:	23e0      	movs	r3, #224	@ 0xe0
90002de8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002dee:	4619      	mov	r1, r3
90002df0:	482b      	ldr	r0, [pc, #172]	@ (90002ea0 <SDRAM_MspInit+0x1ec>)
90002df2:	f000 fe0f 	bl	90003a14 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002df6:	4b2b      	ldr	r3, [pc, #172]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002df8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002dfc:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002dfe:	4b29      	ldr	r3, [pc, #164]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002e04:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002e06:	4b27      	ldr	r3, [pc, #156]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e08:	2280      	movs	r2, #128	@ 0x80
90002e0a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002e0c:	4b25      	ldr	r3, [pc, #148]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e0e:	2200      	movs	r2, #0
90002e10:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002e12:	4b24      	ldr	r3, [pc, #144]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e14:	f240 2202 	movw	r2, #514	@ 0x202
90002e18:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002e1a:	4b22      	ldr	r3, [pc, #136]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e1c:	f640 0208 	movw	r2, #2056	@ 0x808
90002e20:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002e22:	4b20      	ldr	r3, [pc, #128]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e24:	2220      	movs	r2, #32
90002e26:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002e28:	4b1e      	ldr	r3, [pc, #120]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e2a:	2280      	movs	r2, #128	@ 0x80
90002e2c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002e2e:	4b1d      	ldr	r3, [pc, #116]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002e34:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002e36:	4b1b      	ldr	r3, [pc, #108]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e38:	2200      	movs	r2, #0
90002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002e3c:	4b19      	ldr	r3, [pc, #100]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e3e:	2200      	movs	r2, #0
90002e40:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002e42:	4b18      	ldr	r3, [pc, #96]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e44:	2280      	movs	r2, #128	@ 0x80
90002e46:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002e48:	4b16      	ldr	r3, [pc, #88]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e4a:	2200      	movs	r2, #0
90002e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002e4e:	4b15      	ldr	r3, [pc, #84]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e50:	2200      	movs	r2, #0
90002e52:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002e54:	4b13      	ldr	r3, [pc, #76]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e56:	4a14      	ldr	r2, [pc, #80]	@ (90002ea8 <SDRAM_MspInit+0x1f4>)
90002e58:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002e5a:	4b14      	ldr	r3, [pc, #80]	@ (90002eac <SDRAM_MspInit+0x1f8>)
90002e5c:	4a11      	ldr	r2, [pc, #68]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
90002e60:	4b10      	ldr	r3, [pc, #64]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e62:	4a12      	ldr	r2, [pc, #72]	@ (90002eac <SDRAM_MspInit+0x1f8>)
90002e64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002e66:	480f      	ldr	r0, [pc, #60]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e68:	f003 fce2 	bl	90006830 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002e6c:	480d      	ldr	r0, [pc, #52]	@ (90002ea4 <SDRAM_MspInit+0x1f0>)
90002e6e:	f003 fc93 	bl	90006798 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002e72:	2200      	movs	r2, #0
90002e74:	210f      	movs	r1, #15
90002e76:	207a      	movs	r0, #122	@ 0x7a
90002e78:	f000 fa49 	bl	9000330e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002e7c:	207a      	movs	r0, #122	@ 0x7a
90002e7e:	f000 fa60 	bl	90003342 <HAL_NVIC_EnableIRQ>
}
90002e82:	bf00      	nop
90002e84:	3738      	adds	r7, #56	@ 0x38
90002e86:	46bd      	mov	sp, r7
90002e88:	bd80      	pop	{r7, pc}
90002e8a:	bf00      	nop
90002e8c:	58024400 	.word	0x58024400
90002e90:	58020c00 	.word	0x58020c00
90002e94:	58021000 	.word	0x58021000
90002e98:	58021400 	.word	0x58021400
90002e9c:	58021800 	.word	0x58021800
90002ea0:	58021c00 	.word	0x58021c00
90002ea4:	20001270 	.word	0x20001270
90002ea8:	52000040 	.word	0x52000040
90002eac:	2000121c 	.word	0x2000121c

90002eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90002eb0:	b480      	push	{r7}
90002eb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90002eb4:	4b29      	ldr	r3, [pc, #164]	@ (90002f5c <SystemInit+0xac>)
90002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90002eba:	4a28      	ldr	r2, [pc, #160]	@ (90002f5c <SystemInit+0xac>)
90002ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90002ec4:	4b26      	ldr	r3, [pc, #152]	@ (90002f60 <SystemInit+0xb0>)
90002ec6:	681b      	ldr	r3, [r3, #0]
90002ec8:	4a25      	ldr	r2, [pc, #148]	@ (90002f60 <SystemInit+0xb0>)
90002eca:	f043 0301 	orr.w	r3, r3, #1
90002ece:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002ed0:	4b23      	ldr	r3, [pc, #140]	@ (90002f60 <SystemInit+0xb0>)
90002ed2:	2200      	movs	r2, #0
90002ed4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90002ed6:	4b22      	ldr	r3, [pc, #136]	@ (90002f60 <SystemInit+0xb0>)
90002ed8:	681a      	ldr	r2, [r3, #0]
90002eda:	4921      	ldr	r1, [pc, #132]	@ (90002f60 <SystemInit+0xb0>)
90002edc:	4b21      	ldr	r3, [pc, #132]	@ (90002f64 <SystemInit+0xb4>)
90002ede:	4013      	ands	r3, r2
90002ee0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002ee2:	4b1f      	ldr	r3, [pc, #124]	@ (90002f60 <SystemInit+0xb0>)
90002ee4:	2200      	movs	r2, #0
90002ee6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90002ee8:	4b1d      	ldr	r3, [pc, #116]	@ (90002f60 <SystemInit+0xb0>)
90002eea:	2200      	movs	r2, #0
90002eec:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90002eee:	4b1c      	ldr	r3, [pc, #112]	@ (90002f60 <SystemInit+0xb0>)
90002ef0:	2200      	movs	r2, #0
90002ef2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90002ef4:	4b1a      	ldr	r3, [pc, #104]	@ (90002f60 <SystemInit+0xb0>)
90002ef6:	2200      	movs	r2, #0
90002ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90002efa:	4b19      	ldr	r3, [pc, #100]	@ (90002f60 <SystemInit+0xb0>)
90002efc:	2200      	movs	r2, #0
90002efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90002f00:	4b17      	ldr	r3, [pc, #92]	@ (90002f60 <SystemInit+0xb0>)
90002f02:	2200      	movs	r2, #0
90002f04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90002f06:	4b16      	ldr	r3, [pc, #88]	@ (90002f60 <SystemInit+0xb0>)
90002f08:	2200      	movs	r2, #0
90002f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90002f0c:	4b14      	ldr	r3, [pc, #80]	@ (90002f60 <SystemInit+0xb0>)
90002f0e:	2200      	movs	r2, #0
90002f10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90002f12:	4b13      	ldr	r3, [pc, #76]	@ (90002f60 <SystemInit+0xb0>)
90002f14:	2200      	movs	r2, #0
90002f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90002f18:	4b11      	ldr	r3, [pc, #68]	@ (90002f60 <SystemInit+0xb0>)
90002f1a:	2200      	movs	r2, #0
90002f1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90002f1e:	4b10      	ldr	r3, [pc, #64]	@ (90002f60 <SystemInit+0xb0>)
90002f20:	2200      	movs	r2, #0
90002f22:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90002f24:	4b0e      	ldr	r3, [pc, #56]	@ (90002f60 <SystemInit+0xb0>)
90002f26:	681b      	ldr	r3, [r3, #0]
90002f28:	4a0d      	ldr	r2, [pc, #52]	@ (90002f60 <SystemInit+0xb0>)
90002f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90002f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90002f30:	4b0b      	ldr	r3, [pc, #44]	@ (90002f60 <SystemInit+0xb0>)
90002f32:	2200      	movs	r2, #0
90002f34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90002f36:	4b0c      	ldr	r3, [pc, #48]	@ (90002f68 <SystemInit+0xb8>)
90002f38:	681a      	ldr	r2, [r3, #0]
90002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (90002f6c <SystemInit+0xbc>)
90002f3c:	4013      	ands	r3, r2
90002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90002f42:	d202      	bcs.n	90002f4a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90002f44:	4b0a      	ldr	r3, [pc, #40]	@ (90002f70 <SystemInit+0xc0>)
90002f46:	2201      	movs	r2, #1
90002f48:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90002f4a:	4b04      	ldr	r3, [pc, #16]	@ (90002f5c <SystemInit+0xac>)
90002f4c:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90002f50:	609a      	str	r2, [r3, #8]
#endif  


}
90002f52:	bf00      	nop
90002f54:	46bd      	mov	sp, r7
90002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f5a:	4770      	bx	lr
90002f5c:	e000ed00 	.word	0xe000ed00
90002f60:	58024400 	.word	0x58024400
90002f64:	eaf6ed7f 	.word	0xeaf6ed7f
90002f68:	5c001000 	.word	0x5c001000
90002f6c:	ffff0000 	.word	0xffff0000
90002f70:	51008108 	.word	0x51008108

90002f74 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90002f74:	b480      	push	{r7}
90002f76:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90002f78:	4b09      	ldr	r3, [pc, #36]	@ (90002fa0 <ExitRun0Mode+0x2c>)
90002f7a:	68db      	ldr	r3, [r3, #12]
90002f7c:	4a08      	ldr	r2, [pc, #32]	@ (90002fa0 <ExitRun0Mode+0x2c>)
90002f7e:	f043 0302 	orr.w	r3, r3, #2
90002f82:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90002f84:	bf00      	nop
90002f86:	4b06      	ldr	r3, [pc, #24]	@ (90002fa0 <ExitRun0Mode+0x2c>)
90002f88:	685b      	ldr	r3, [r3, #4]
90002f8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90002f8e:	2b00      	cmp	r3, #0
90002f90:	d0f9      	beq.n	90002f86 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90002f92:	bf00      	nop
90002f94:	bf00      	nop
90002f96:	46bd      	mov	sp, r7
90002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f9c:	4770      	bx	lr
90002f9e:	bf00      	nop
90002fa0:	58024800 	.word	0x58024800

90002fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90002fa4:	b580      	push	{r7, lr}
90002fa6:	b082      	sub	sp, #8
90002fa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002faa:	2003      	movs	r0, #3
90002fac:	f000 f9a4 	bl	900032f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90002fb0:	f004 fb3e 	bl	90007630 <HAL_RCC_GetSysClockFreq>
90002fb4:	4602      	mov	r2, r0
90002fb6:	4b15      	ldr	r3, [pc, #84]	@ (9000300c <HAL_Init+0x68>)
90002fb8:	699b      	ldr	r3, [r3, #24]
90002fba:	0a1b      	lsrs	r3, r3, #8
90002fbc:	f003 030f 	and.w	r3, r3, #15
90002fc0:	4913      	ldr	r1, [pc, #76]	@ (90003010 <HAL_Init+0x6c>)
90002fc2:	5ccb      	ldrb	r3, [r1, r3]
90002fc4:	f003 031f 	and.w	r3, r3, #31
90002fc8:	fa22 f303 	lsr.w	r3, r2, r3
90002fcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90002fce:	4b0f      	ldr	r3, [pc, #60]	@ (9000300c <HAL_Init+0x68>)
90002fd0:	699b      	ldr	r3, [r3, #24]
90002fd2:	f003 030f 	and.w	r3, r3, #15
90002fd6:	4a0e      	ldr	r2, [pc, #56]	@ (90003010 <HAL_Init+0x6c>)
90002fd8:	5cd3      	ldrb	r3, [r2, r3]
90002fda:	f003 031f 	and.w	r3, r3, #31
90002fde:	687a      	ldr	r2, [r7, #4]
90002fe0:	fa22 f303 	lsr.w	r3, r2, r3
90002fe4:	4a0b      	ldr	r2, [pc, #44]	@ (90003014 <HAL_Init+0x70>)
90002fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90002fe8:	4a0b      	ldr	r2, [pc, #44]	@ (90003018 <HAL_Init+0x74>)
90002fea:	687b      	ldr	r3, [r7, #4]
90002fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90002fee:	200f      	movs	r0, #15
90002ff0:	f000 f81c 	bl	9000302c <HAL_InitTick>
90002ff4:	4603      	mov	r3, r0
90002ff6:	2b00      	cmp	r3, #0
90002ff8:	d001      	beq.n	90002ffe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90002ffa:	2301      	movs	r3, #1
90002ffc:	e002      	b.n	90003004 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90002ffe:	f000 f80d 	bl	9000301c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90003002:	2300      	movs	r3, #0
}
90003004:	4618      	mov	r0, r3
90003006:	3708      	adds	r7, #8
90003008:	46bd      	mov	sp, r7
9000300a:	bd80      	pop	{r7, pc}
9000300c:	58024400 	.word	0x58024400
90003010:	9000cdc4 	.word	0x9000cdc4
90003014:	2000005c 	.word	0x2000005c
90003018:	20000058 	.word	0x20000058

9000301c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
9000301c:	b480      	push	{r7}
9000301e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90003020:	bf00      	nop
90003022:	46bd      	mov	sp, r7
90003024:	f85d 7b04 	ldr.w	r7, [sp], #4
90003028:	4770      	bx	lr
	...

9000302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
9000302c:	b580      	push	{r7, lr}
9000302e:	b082      	sub	sp, #8
90003030:	af00      	add	r7, sp, #0
90003032:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90003034:	4b15      	ldr	r3, [pc, #84]	@ (9000308c <HAL_InitTick+0x60>)
90003036:	781b      	ldrb	r3, [r3, #0]
90003038:	2b00      	cmp	r3, #0
9000303a:	d101      	bne.n	90003040 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
9000303c:	2301      	movs	r3, #1
9000303e:	e021      	b.n	90003084 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90003040:	4b13      	ldr	r3, [pc, #76]	@ (90003090 <HAL_InitTick+0x64>)
90003042:	681a      	ldr	r2, [r3, #0]
90003044:	4b11      	ldr	r3, [pc, #68]	@ (9000308c <HAL_InitTick+0x60>)
90003046:	781b      	ldrb	r3, [r3, #0]
90003048:	4619      	mov	r1, r3
9000304a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000304e:	fbb3 f3f1 	udiv	r3, r3, r1
90003052:	fbb2 f3f3 	udiv	r3, r2, r3
90003056:	4618      	mov	r0, r3
90003058:	f000 f981 	bl	9000335e <HAL_SYSTICK_Config>
9000305c:	4603      	mov	r3, r0
9000305e:	2b00      	cmp	r3, #0
90003060:	d001      	beq.n	90003066 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90003062:	2301      	movs	r3, #1
90003064:	e00e      	b.n	90003084 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90003066:	687b      	ldr	r3, [r7, #4]
90003068:	2b0f      	cmp	r3, #15
9000306a:	d80a      	bhi.n	90003082 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
9000306c:	2200      	movs	r2, #0
9000306e:	6879      	ldr	r1, [r7, #4]
90003070:	f04f 30ff 	mov.w	r0, #4294967295
90003074:	f000 f94b 	bl	9000330e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003078:	4a06      	ldr	r2, [pc, #24]	@ (90003094 <HAL_InitTick+0x68>)
9000307a:	687b      	ldr	r3, [r7, #4]
9000307c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000307e:	2300      	movs	r3, #0
90003080:	e000      	b.n	90003084 <HAL_InitTick+0x58>
    return HAL_ERROR;
90003082:	2301      	movs	r3, #1
}
90003084:	4618      	mov	r0, r3
90003086:	3708      	adds	r7, #8
90003088:	46bd      	mov	sp, r7
9000308a:	bd80      	pop	{r7, pc}
9000308c:	20000064 	.word	0x20000064
90003090:	20000058 	.word	0x20000058
90003094:	20000060 	.word	0x20000060

90003098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003098:	b480      	push	{r7}
9000309a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
9000309c:	4b06      	ldr	r3, [pc, #24]	@ (900030b8 <HAL_IncTick+0x20>)
9000309e:	781b      	ldrb	r3, [r3, #0]
900030a0:	461a      	mov	r2, r3
900030a2:	4b06      	ldr	r3, [pc, #24]	@ (900030bc <HAL_IncTick+0x24>)
900030a4:	681b      	ldr	r3, [r3, #0]
900030a6:	4413      	add	r3, r2
900030a8:	4a04      	ldr	r2, [pc, #16]	@ (900030bc <HAL_IncTick+0x24>)
900030aa:	6013      	str	r3, [r2, #0]
}
900030ac:	bf00      	nop
900030ae:	46bd      	mov	sp, r7
900030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900030b4:	4770      	bx	lr
900030b6:	bf00      	nop
900030b8:	20000064 	.word	0x20000064
900030bc:	200012dc 	.word	0x200012dc

900030c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900030c0:	b480      	push	{r7}
900030c2:	af00      	add	r7, sp, #0
  return uwTick;
900030c4:	4b03      	ldr	r3, [pc, #12]	@ (900030d4 <HAL_GetTick+0x14>)
900030c6:	681b      	ldr	r3, [r3, #0]
}
900030c8:	4618      	mov	r0, r3
900030ca:	46bd      	mov	sp, r7
900030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900030d0:	4770      	bx	lr
900030d2:	bf00      	nop
900030d4:	200012dc 	.word	0x200012dc

900030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900030d8:	b580      	push	{r7, lr}
900030da:	b084      	sub	sp, #16
900030dc:	af00      	add	r7, sp, #0
900030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900030e0:	f7ff ffee 	bl	900030c0 <HAL_GetTick>
900030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
900030e6:	687b      	ldr	r3, [r7, #4]
900030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900030ea:	68fb      	ldr	r3, [r7, #12]
900030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
900030f0:	d005      	beq.n	900030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
900030f2:	4b0a      	ldr	r3, [pc, #40]	@ (9000311c <HAL_Delay+0x44>)
900030f4:	781b      	ldrb	r3, [r3, #0]
900030f6:	461a      	mov	r2, r3
900030f8:	68fb      	ldr	r3, [r7, #12]
900030fa:	4413      	add	r3, r2
900030fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
900030fe:	bf00      	nop
90003100:	f7ff ffde 	bl	900030c0 <HAL_GetTick>
90003104:	4602      	mov	r2, r0
90003106:	68bb      	ldr	r3, [r7, #8]
90003108:	1ad3      	subs	r3, r2, r3
9000310a:	68fa      	ldr	r2, [r7, #12]
9000310c:	429a      	cmp	r2, r3
9000310e:	d8f7      	bhi.n	90003100 <HAL_Delay+0x28>
  {
  }
}
90003110:	bf00      	nop
90003112:	bf00      	nop
90003114:	3710      	adds	r7, #16
90003116:	46bd      	mov	sp, r7
90003118:	bd80      	pop	{r7, pc}
9000311a:	bf00      	nop
9000311c:	20000064 	.word	0x20000064

90003120 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003120:	b480      	push	{r7}
90003122:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003124:	4b03      	ldr	r3, [pc, #12]	@ (90003134 <HAL_GetREVID+0x14>)
90003126:	681b      	ldr	r3, [r3, #0]
90003128:	0c1b      	lsrs	r3, r3, #16
}
9000312a:	4618      	mov	r0, r3
9000312c:	46bd      	mov	sp, r7
9000312e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003132:	4770      	bx	lr
90003134:	5c001000 	.word	0x5c001000

90003138 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90003138:	b480      	push	{r7}
9000313a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
9000313c:	4b05      	ldr	r3, [pc, #20]	@ (90003154 <HAL_EnableCompensationCell+0x1c>)
9000313e:	6a1b      	ldr	r3, [r3, #32]
90003140:	4a04      	ldr	r2, [pc, #16]	@ (90003154 <HAL_EnableCompensationCell+0x1c>)
90003142:	f043 0301 	orr.w	r3, r3, #1
90003146:	6213      	str	r3, [r2, #32]
}
90003148:	bf00      	nop
9000314a:	46bd      	mov	sp, r7
9000314c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003150:	4770      	bx	lr
90003152:	bf00      	nop
90003154:	58000400 	.word	0x58000400

90003158 <__NVIC_SetPriorityGrouping>:
{
90003158:	b480      	push	{r7}
9000315a:	b085      	sub	sp, #20
9000315c:	af00      	add	r7, sp, #0
9000315e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003160:	687b      	ldr	r3, [r7, #4]
90003162:	f003 0307 	and.w	r3, r3, #7
90003166:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003168:	4b0b      	ldr	r3, [pc, #44]	@ (90003198 <__NVIC_SetPriorityGrouping+0x40>)
9000316a:	68db      	ldr	r3, [r3, #12]
9000316c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000316e:	68ba      	ldr	r2, [r7, #8]
90003170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003174:	4013      	ands	r3, r2
90003176:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003178:	68fb      	ldr	r3, [r7, #12]
9000317a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000317c:	68bb      	ldr	r3, [r7, #8]
9000317e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003180:	4b06      	ldr	r3, [pc, #24]	@ (9000319c <__NVIC_SetPriorityGrouping+0x44>)
90003182:	4313      	orrs	r3, r2
90003184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003186:	4a04      	ldr	r2, [pc, #16]	@ (90003198 <__NVIC_SetPriorityGrouping+0x40>)
90003188:	68bb      	ldr	r3, [r7, #8]
9000318a:	60d3      	str	r3, [r2, #12]
}
9000318c:	bf00      	nop
9000318e:	3714      	adds	r7, #20
90003190:	46bd      	mov	sp, r7
90003192:	f85d 7b04 	ldr.w	r7, [sp], #4
90003196:	4770      	bx	lr
90003198:	e000ed00 	.word	0xe000ed00
9000319c:	05fa0000 	.word	0x05fa0000

900031a0 <__NVIC_GetPriorityGrouping>:
{
900031a0:	b480      	push	{r7}
900031a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900031a4:	4b04      	ldr	r3, [pc, #16]	@ (900031b8 <__NVIC_GetPriorityGrouping+0x18>)
900031a6:	68db      	ldr	r3, [r3, #12]
900031a8:	0a1b      	lsrs	r3, r3, #8
900031aa:	f003 0307 	and.w	r3, r3, #7
}
900031ae:	4618      	mov	r0, r3
900031b0:	46bd      	mov	sp, r7
900031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
900031b6:	4770      	bx	lr
900031b8:	e000ed00 	.word	0xe000ed00

900031bc <__NVIC_EnableIRQ>:
{
900031bc:	b480      	push	{r7}
900031be:	b083      	sub	sp, #12
900031c0:	af00      	add	r7, sp, #0
900031c2:	4603      	mov	r3, r0
900031c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900031c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900031ca:	2b00      	cmp	r3, #0
900031cc:	db0b      	blt.n	900031e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900031ce:	88fb      	ldrh	r3, [r7, #6]
900031d0:	f003 021f 	and.w	r2, r3, #31
900031d4:	4907      	ldr	r1, [pc, #28]	@ (900031f4 <__NVIC_EnableIRQ+0x38>)
900031d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900031da:	095b      	lsrs	r3, r3, #5
900031dc:	2001      	movs	r0, #1
900031de:	fa00 f202 	lsl.w	r2, r0, r2
900031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900031e6:	bf00      	nop
900031e8:	370c      	adds	r7, #12
900031ea:	46bd      	mov	sp, r7
900031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900031f0:	4770      	bx	lr
900031f2:	bf00      	nop
900031f4:	e000e100 	.word	0xe000e100

900031f8 <__NVIC_SetPriority>:
{
900031f8:	b480      	push	{r7}
900031fa:	b083      	sub	sp, #12
900031fc:	af00      	add	r7, sp, #0
900031fe:	4603      	mov	r3, r0
90003200:	6039      	str	r1, [r7, #0]
90003202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003208:	2b00      	cmp	r3, #0
9000320a:	db0a      	blt.n	90003222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000320c:	683b      	ldr	r3, [r7, #0]
9000320e:	b2da      	uxtb	r2, r3
90003210:	490c      	ldr	r1, [pc, #48]	@ (90003244 <__NVIC_SetPriority+0x4c>)
90003212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003216:	0112      	lsls	r2, r2, #4
90003218:	b2d2      	uxtb	r2, r2
9000321a:	440b      	add	r3, r1
9000321c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003220:	e00a      	b.n	90003238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003222:	683b      	ldr	r3, [r7, #0]
90003224:	b2da      	uxtb	r2, r3
90003226:	4908      	ldr	r1, [pc, #32]	@ (90003248 <__NVIC_SetPriority+0x50>)
90003228:	88fb      	ldrh	r3, [r7, #6]
9000322a:	f003 030f 	and.w	r3, r3, #15
9000322e:	3b04      	subs	r3, #4
90003230:	0112      	lsls	r2, r2, #4
90003232:	b2d2      	uxtb	r2, r2
90003234:	440b      	add	r3, r1
90003236:	761a      	strb	r2, [r3, #24]
}
90003238:	bf00      	nop
9000323a:	370c      	adds	r7, #12
9000323c:	46bd      	mov	sp, r7
9000323e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003242:	4770      	bx	lr
90003244:	e000e100 	.word	0xe000e100
90003248:	e000ed00 	.word	0xe000ed00

9000324c <NVIC_EncodePriority>:
{
9000324c:	b480      	push	{r7}
9000324e:	b089      	sub	sp, #36	@ 0x24
90003250:	af00      	add	r7, sp, #0
90003252:	60f8      	str	r0, [r7, #12]
90003254:	60b9      	str	r1, [r7, #8]
90003256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003258:	68fb      	ldr	r3, [r7, #12]
9000325a:	f003 0307 	and.w	r3, r3, #7
9000325e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003260:	69fb      	ldr	r3, [r7, #28]
90003262:	f1c3 0307 	rsb	r3, r3, #7
90003266:	2b04      	cmp	r3, #4
90003268:	bf28      	it	cs
9000326a:	2304      	movcs	r3, #4
9000326c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000326e:	69fb      	ldr	r3, [r7, #28]
90003270:	3304      	adds	r3, #4
90003272:	2b06      	cmp	r3, #6
90003274:	d902      	bls.n	9000327c <NVIC_EncodePriority+0x30>
90003276:	69fb      	ldr	r3, [r7, #28]
90003278:	3b03      	subs	r3, #3
9000327a:	e000      	b.n	9000327e <NVIC_EncodePriority+0x32>
9000327c:	2300      	movs	r3, #0
9000327e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003280:	f04f 32ff 	mov.w	r2, #4294967295
90003284:	69bb      	ldr	r3, [r7, #24]
90003286:	fa02 f303 	lsl.w	r3, r2, r3
9000328a:	43da      	mvns	r2, r3
9000328c:	68bb      	ldr	r3, [r7, #8]
9000328e:	401a      	ands	r2, r3
90003290:	697b      	ldr	r3, [r7, #20]
90003292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003294:	f04f 31ff 	mov.w	r1, #4294967295
90003298:	697b      	ldr	r3, [r7, #20]
9000329a:	fa01 f303 	lsl.w	r3, r1, r3
9000329e:	43d9      	mvns	r1, r3
900032a0:	687b      	ldr	r3, [r7, #4]
900032a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900032a4:	4313      	orrs	r3, r2
}
900032a6:	4618      	mov	r0, r3
900032a8:	3724      	adds	r7, #36	@ 0x24
900032aa:	46bd      	mov	sp, r7
900032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900032b0:	4770      	bx	lr
	...

900032b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900032b4:	b580      	push	{r7, lr}
900032b6:	b082      	sub	sp, #8
900032b8:	af00      	add	r7, sp, #0
900032ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900032bc:	687b      	ldr	r3, [r7, #4]
900032be:	3b01      	subs	r3, #1
900032c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900032c4:	d301      	bcc.n	900032ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900032c6:	2301      	movs	r3, #1
900032c8:	e00f      	b.n	900032ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900032ca:	4a0a      	ldr	r2, [pc, #40]	@ (900032f4 <SysTick_Config+0x40>)
900032cc:	687b      	ldr	r3, [r7, #4]
900032ce:	3b01      	subs	r3, #1
900032d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900032d2:	210f      	movs	r1, #15
900032d4:	f04f 30ff 	mov.w	r0, #4294967295
900032d8:	f7ff ff8e 	bl	900031f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900032dc:	4b05      	ldr	r3, [pc, #20]	@ (900032f4 <SysTick_Config+0x40>)
900032de:	2200      	movs	r2, #0
900032e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900032e2:	4b04      	ldr	r3, [pc, #16]	@ (900032f4 <SysTick_Config+0x40>)
900032e4:	2207      	movs	r2, #7
900032e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900032e8:	2300      	movs	r3, #0
}
900032ea:	4618      	mov	r0, r3
900032ec:	3708      	adds	r7, #8
900032ee:	46bd      	mov	sp, r7
900032f0:	bd80      	pop	{r7, pc}
900032f2:	bf00      	nop
900032f4:	e000e010 	.word	0xe000e010

900032f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900032f8:	b580      	push	{r7, lr}
900032fa:	b082      	sub	sp, #8
900032fc:	af00      	add	r7, sp, #0
900032fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003300:	6878      	ldr	r0, [r7, #4]
90003302:	f7ff ff29 	bl	90003158 <__NVIC_SetPriorityGrouping>
}
90003306:	bf00      	nop
90003308:	3708      	adds	r7, #8
9000330a:	46bd      	mov	sp, r7
9000330c:	bd80      	pop	{r7, pc}

9000330e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000330e:	b580      	push	{r7, lr}
90003310:	b086      	sub	sp, #24
90003312:	af00      	add	r7, sp, #0
90003314:	4603      	mov	r3, r0
90003316:	60b9      	str	r1, [r7, #8]
90003318:	607a      	str	r2, [r7, #4]
9000331a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
9000331c:	f7ff ff40 	bl	900031a0 <__NVIC_GetPriorityGrouping>
90003320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003322:	687a      	ldr	r2, [r7, #4]
90003324:	68b9      	ldr	r1, [r7, #8]
90003326:	6978      	ldr	r0, [r7, #20]
90003328:	f7ff ff90 	bl	9000324c <NVIC_EncodePriority>
9000332c:	4602      	mov	r2, r0
9000332e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003332:	4611      	mov	r1, r2
90003334:	4618      	mov	r0, r3
90003336:	f7ff ff5f 	bl	900031f8 <__NVIC_SetPriority>
}
9000333a:	bf00      	nop
9000333c:	3718      	adds	r7, #24
9000333e:	46bd      	mov	sp, r7
90003340:	bd80      	pop	{r7, pc}

90003342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003342:	b580      	push	{r7, lr}
90003344:	b082      	sub	sp, #8
90003346:	af00      	add	r7, sp, #0
90003348:	4603      	mov	r3, r0
9000334a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
9000334c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003350:	4618      	mov	r0, r3
90003352:	f7ff ff33 	bl	900031bc <__NVIC_EnableIRQ>
}
90003356:	bf00      	nop
90003358:	3708      	adds	r7, #8
9000335a:	46bd      	mov	sp, r7
9000335c:	bd80      	pop	{r7, pc}

9000335e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000335e:	b580      	push	{r7, lr}
90003360:	b082      	sub	sp, #8
90003362:	af00      	add	r7, sp, #0
90003364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90003366:	6878      	ldr	r0, [r7, #4]
90003368:	f7ff ffa4 	bl	900032b4 <SysTick_Config>
9000336c:	4603      	mov	r3, r0
}
9000336e:	4618      	mov	r0, r3
90003370:	3708      	adds	r7, #8
90003372:	46bd      	mov	sp, r7
90003374:	bd80      	pop	{r7, pc}
	...

90003378 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003378:	b480      	push	{r7}
9000337a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
9000337c:	f3bf 8f5f 	dmb	sy
}
90003380:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003382:	4b07      	ldr	r3, [pc, #28]	@ (900033a0 <HAL_MPU_Disable+0x28>)
90003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003386:	4a06      	ldr	r2, [pc, #24]	@ (900033a0 <HAL_MPU_Disable+0x28>)
90003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000338c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000338e:	4b05      	ldr	r3, [pc, #20]	@ (900033a4 <HAL_MPU_Disable+0x2c>)
90003390:	2200      	movs	r2, #0
90003392:	605a      	str	r2, [r3, #4]
}
90003394:	bf00      	nop
90003396:	46bd      	mov	sp, r7
90003398:	f85d 7b04 	ldr.w	r7, [sp], #4
9000339c:	4770      	bx	lr
9000339e:	bf00      	nop
900033a0:	e000ed00 	.word	0xe000ed00
900033a4:	e000ed90 	.word	0xe000ed90

900033a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900033a8:	b480      	push	{r7}
900033aa:	b083      	sub	sp, #12
900033ac:	af00      	add	r7, sp, #0
900033ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900033b0:	4a0b      	ldr	r2, [pc, #44]	@ (900033e0 <HAL_MPU_Enable+0x38>)
900033b2:	687b      	ldr	r3, [r7, #4]
900033b4:	f043 0301 	orr.w	r3, r3, #1
900033b8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900033ba:	4b0a      	ldr	r3, [pc, #40]	@ (900033e4 <HAL_MPU_Enable+0x3c>)
900033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900033be:	4a09      	ldr	r2, [pc, #36]	@ (900033e4 <HAL_MPU_Enable+0x3c>)
900033c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900033c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900033c6:	f3bf 8f4f 	dsb	sy
}
900033ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900033cc:	f3bf 8f6f 	isb	sy
}
900033d0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900033d2:	bf00      	nop
900033d4:	370c      	adds	r7, #12
900033d6:	46bd      	mov	sp, r7
900033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900033dc:	4770      	bx	lr
900033de:	bf00      	nop
900033e0:	e000ed90 	.word	0xe000ed90
900033e4:	e000ed00 	.word	0xe000ed00

900033e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
900033e8:	b480      	push	{r7}
900033ea:	b083      	sub	sp, #12
900033ec:	af00      	add	r7, sp, #0
900033ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900033f0:	687b      	ldr	r3, [r7, #4]
900033f2:	785a      	ldrb	r2, [r3, #1]
900033f4:	4b1b      	ldr	r3, [pc, #108]	@ (90003464 <HAL_MPU_ConfigRegion+0x7c>)
900033f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
900033f8:	4b1a      	ldr	r3, [pc, #104]	@ (90003464 <HAL_MPU_ConfigRegion+0x7c>)
900033fa:	691b      	ldr	r3, [r3, #16]
900033fc:	4a19      	ldr	r2, [pc, #100]	@ (90003464 <HAL_MPU_ConfigRegion+0x7c>)
900033fe:	f023 0301 	bic.w	r3, r3, #1
90003402:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003404:	4a17      	ldr	r2, [pc, #92]	@ (90003464 <HAL_MPU_ConfigRegion+0x7c>)
90003406:	687b      	ldr	r3, [r7, #4]
90003408:	685b      	ldr	r3, [r3, #4]
9000340a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000340c:	687b      	ldr	r3, [r7, #4]
9000340e:	7b1b      	ldrb	r3, [r3, #12]
90003410:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003412:	687b      	ldr	r3, [r7, #4]
90003414:	7adb      	ldrb	r3, [r3, #11]
90003416:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003418:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000341a:	687b      	ldr	r3, [r7, #4]
9000341c:	7a9b      	ldrb	r3, [r3, #10]
9000341e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003420:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003422:	687b      	ldr	r3, [r7, #4]
90003424:	7b5b      	ldrb	r3, [r3, #13]
90003426:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003428:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000342a:	687b      	ldr	r3, [r7, #4]
9000342c:	7b9b      	ldrb	r3, [r3, #14]
9000342e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003430:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003432:	687b      	ldr	r3, [r7, #4]
90003434:	7bdb      	ldrb	r3, [r3, #15]
90003436:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003438:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000343a:	687b      	ldr	r3, [r7, #4]
9000343c:	7a5b      	ldrb	r3, [r3, #9]
9000343e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003442:	687b      	ldr	r3, [r7, #4]
90003444:	7a1b      	ldrb	r3, [r3, #8]
90003446:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003448:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000344a:	687a      	ldr	r2, [r7, #4]
9000344c:	7812      	ldrb	r2, [r2, #0]
9000344e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003450:	4a04      	ldr	r2, [pc, #16]	@ (90003464 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003452:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003454:	6113      	str	r3, [r2, #16]
}
90003456:	bf00      	nop
90003458:	370c      	adds	r7, #12
9000345a:	46bd      	mov	sp, r7
9000345c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003460:	4770      	bx	lr
90003462:	bf00      	nop
90003464:	e000ed90 	.word	0xe000ed90

90003468 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003468:	b580      	push	{r7, lr}
9000346a:	b082      	sub	sp, #8
9000346c:	af00      	add	r7, sp, #0
9000346e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003470:	687b      	ldr	r3, [r7, #4]
90003472:	2b00      	cmp	r3, #0
90003474:	d101      	bne.n	9000347a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90003476:	2301      	movs	r3, #1
90003478:	e04f      	b.n	9000351a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
9000347a:	687b      	ldr	r3, [r7, #4]
9000347c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003480:	b2db      	uxtb	r3, r3
90003482:	2b00      	cmp	r3, #0
90003484:	d106      	bne.n	90003494 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90003486:	687b      	ldr	r3, [r7, #4]
90003488:	2200      	movs	r2, #0
9000348a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
9000348e:	6878      	ldr	r0, [r7, #4]
90003490:	f000 f84e 	bl	90003530 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003494:	687b      	ldr	r3, [r7, #4]
90003496:	2202      	movs	r2, #2
90003498:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000349c:	687b      	ldr	r3, [r7, #4]
9000349e:	681b      	ldr	r3, [r3, #0]
900034a0:	681a      	ldr	r2, [r3, #0]
900034a2:	4b20      	ldr	r3, [pc, #128]	@ (90003524 <HAL_DMA2D_Init+0xbc>)
900034a4:	4013      	ands	r3, r2
900034a6:	687a      	ldr	r2, [r7, #4]
900034a8:	6851      	ldr	r1, [r2, #4]
900034aa:	687a      	ldr	r2, [r7, #4]
900034ac:	69d2      	ldr	r2, [r2, #28]
900034ae:	4311      	orrs	r1, r2
900034b0:	687a      	ldr	r2, [r7, #4]
900034b2:	6812      	ldr	r2, [r2, #0]
900034b4:	430b      	orrs	r3, r1
900034b6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900034b8:	687b      	ldr	r3, [r7, #4]
900034ba:	681b      	ldr	r3, [r3, #0]
900034bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900034be:	4b1a      	ldr	r3, [pc, #104]	@ (90003528 <HAL_DMA2D_Init+0xc0>)
900034c0:	4013      	ands	r3, r2
900034c2:	687a      	ldr	r2, [r7, #4]
900034c4:	6891      	ldr	r1, [r2, #8]
900034c6:	687a      	ldr	r2, [r7, #4]
900034c8:	6992      	ldr	r2, [r2, #24]
900034ca:	4311      	orrs	r1, r2
900034cc:	687a      	ldr	r2, [r7, #4]
900034ce:	6812      	ldr	r2, [r2, #0]
900034d0:	430b      	orrs	r3, r1
900034d2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900034d4:	687b      	ldr	r3, [r7, #4]
900034d6:	681b      	ldr	r3, [r3, #0]
900034d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
900034da:	4b14      	ldr	r3, [pc, #80]	@ (9000352c <HAL_DMA2D_Init+0xc4>)
900034dc:	4013      	ands	r3, r2
900034de:	687a      	ldr	r2, [r7, #4]
900034e0:	68d1      	ldr	r1, [r2, #12]
900034e2:	687a      	ldr	r2, [r7, #4]
900034e4:	6812      	ldr	r2, [r2, #0]
900034e6:	430b      	orrs	r3, r1
900034e8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
900034ea:	687b      	ldr	r3, [r7, #4]
900034ec:	681b      	ldr	r3, [r3, #0]
900034ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900034f0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900034f4:	687b      	ldr	r3, [r7, #4]
900034f6:	691b      	ldr	r3, [r3, #16]
900034f8:	051a      	lsls	r2, r3, #20
900034fa:	687b      	ldr	r3, [r7, #4]
900034fc:	695b      	ldr	r3, [r3, #20]
900034fe:	055b      	lsls	r3, r3, #21
90003500:	431a      	orrs	r2, r3
90003502:	687b      	ldr	r3, [r7, #4]
90003504:	681b      	ldr	r3, [r3, #0]
90003506:	430a      	orrs	r2, r1
90003508:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000350a:	687b      	ldr	r3, [r7, #4]
9000350c:	2200      	movs	r2, #0
9000350e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003510:	687b      	ldr	r3, [r7, #4]
90003512:	2201      	movs	r2, #1
90003514:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003518:	2300      	movs	r3, #0
}
9000351a:	4618      	mov	r0, r3
9000351c:	3708      	adds	r7, #8
9000351e:	46bd      	mov	sp, r7
90003520:	bd80      	pop	{r7, pc}
90003522:	bf00      	nop
90003524:	fff8ffbf 	.word	0xfff8ffbf
90003528:	fffffef8 	.word	0xfffffef8
9000352c:	ffff0000 	.word	0xffff0000

90003530 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003530:	b480      	push	{r7}
90003532:	b083      	sub	sp, #12
90003534:	af00      	add	r7, sp, #0
90003536:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003538:	bf00      	nop
9000353a:	370c      	adds	r7, #12
9000353c:	46bd      	mov	sp, r7
9000353e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003542:	4770      	bx	lr

90003544 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003544:	b580      	push	{r7, lr}
90003546:	b086      	sub	sp, #24
90003548:	af02      	add	r7, sp, #8
9000354a:	60f8      	str	r0, [r7, #12]
9000354c:	60b9      	str	r1, [r7, #8]
9000354e:	607a      	str	r2, [r7, #4]
90003550:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003552:	68fb      	ldr	r3, [r7, #12]
90003554:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003558:	2b01      	cmp	r3, #1
9000355a:	d101      	bne.n	90003560 <HAL_DMA2D_Start+0x1c>
9000355c:	2302      	movs	r3, #2
9000355e:	e018      	b.n	90003592 <HAL_DMA2D_Start+0x4e>
90003560:	68fb      	ldr	r3, [r7, #12]
90003562:	2201      	movs	r2, #1
90003564:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003568:	68fb      	ldr	r3, [r7, #12]
9000356a:	2202      	movs	r2, #2
9000356c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003570:	69bb      	ldr	r3, [r7, #24]
90003572:	9300      	str	r3, [sp, #0]
90003574:	683b      	ldr	r3, [r7, #0]
90003576:	687a      	ldr	r2, [r7, #4]
90003578:	68b9      	ldr	r1, [r7, #8]
9000357a:	68f8      	ldr	r0, [r7, #12]
9000357c:	f000 f9a4 	bl	900038c8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003580:	68fb      	ldr	r3, [r7, #12]
90003582:	681b      	ldr	r3, [r3, #0]
90003584:	681a      	ldr	r2, [r3, #0]
90003586:	68fb      	ldr	r3, [r7, #12]
90003588:	681b      	ldr	r3, [r3, #0]
9000358a:	f042 0201 	orr.w	r2, r2, #1
9000358e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003590:	2300      	movs	r3, #0
}
90003592:	4618      	mov	r0, r3
90003594:	3710      	adds	r7, #16
90003596:	46bd      	mov	sp, r7
90003598:	bd80      	pop	{r7, pc}

9000359a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
9000359a:	b580      	push	{r7, lr}
9000359c:	b086      	sub	sp, #24
9000359e:	af00      	add	r7, sp, #0
900035a0:	6078      	str	r0, [r7, #4]
900035a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900035a4:	2300      	movs	r3, #0
900035a6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900035a8:	687b      	ldr	r3, [r7, #4]
900035aa:	681b      	ldr	r3, [r3, #0]
900035ac:	681b      	ldr	r3, [r3, #0]
900035ae:	f003 0301 	and.w	r3, r3, #1
900035b2:	2b00      	cmp	r3, #0
900035b4:	d056      	beq.n	90003664 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900035b6:	f7ff fd83 	bl	900030c0 <HAL_GetTick>
900035ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900035bc:	e04b      	b.n	90003656 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900035be:	687b      	ldr	r3, [r7, #4]
900035c0:	681b      	ldr	r3, [r3, #0]
900035c2:	685b      	ldr	r3, [r3, #4]
900035c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900035c6:	68fb      	ldr	r3, [r7, #12]
900035c8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
900035cc:	2b00      	cmp	r3, #0
900035ce:	d023      	beq.n	90003618 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900035d0:	68fb      	ldr	r3, [r7, #12]
900035d2:	f003 0320 	and.w	r3, r3, #32
900035d6:	2b00      	cmp	r3, #0
900035d8:	d005      	beq.n	900035e6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900035da:	687b      	ldr	r3, [r7, #4]
900035dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900035de:	f043 0202 	orr.w	r2, r3, #2
900035e2:	687b      	ldr	r3, [r7, #4]
900035e4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900035e6:	68fb      	ldr	r3, [r7, #12]
900035e8:	f003 0301 	and.w	r3, r3, #1
900035ec:	2b00      	cmp	r3, #0
900035ee:	d005      	beq.n	900035fc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900035f0:	687b      	ldr	r3, [r7, #4]
900035f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900035f4:	f043 0201 	orr.w	r2, r3, #1
900035f8:	687b      	ldr	r3, [r7, #4]
900035fa:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900035fc:	687b      	ldr	r3, [r7, #4]
900035fe:	681b      	ldr	r3, [r3, #0]
90003600:	2221      	movs	r2, #33	@ 0x21
90003602:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003604:	687b      	ldr	r3, [r7, #4]
90003606:	2204      	movs	r2, #4
90003608:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
9000360c:	687b      	ldr	r3, [r7, #4]
9000360e:	2200      	movs	r2, #0
90003610:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003614:	2301      	movs	r3, #1
90003616:	e0a5      	b.n	90003764 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003618:	683b      	ldr	r3, [r7, #0]
9000361a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000361e:	d01a      	beq.n	90003656 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003620:	f7ff fd4e 	bl	900030c0 <HAL_GetTick>
90003624:	4602      	mov	r2, r0
90003626:	697b      	ldr	r3, [r7, #20]
90003628:	1ad3      	subs	r3, r2, r3
9000362a:	683a      	ldr	r2, [r7, #0]
9000362c:	429a      	cmp	r2, r3
9000362e:	d302      	bcc.n	90003636 <HAL_DMA2D_PollForTransfer+0x9c>
90003630:	683b      	ldr	r3, [r7, #0]
90003632:	2b00      	cmp	r3, #0
90003634:	d10f      	bne.n	90003656 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003636:	687b      	ldr	r3, [r7, #4]
90003638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000363a:	f043 0220 	orr.w	r2, r3, #32
9000363e:	687b      	ldr	r3, [r7, #4]
90003640:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003642:	687b      	ldr	r3, [r7, #4]
90003644:	2203      	movs	r2, #3
90003646:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000364a:	687b      	ldr	r3, [r7, #4]
9000364c:	2200      	movs	r2, #0
9000364e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003652:	2303      	movs	r3, #3
90003654:	e086      	b.n	90003764 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003656:	687b      	ldr	r3, [r7, #4]
90003658:	681b      	ldr	r3, [r3, #0]
9000365a:	685b      	ldr	r3, [r3, #4]
9000365c:	f003 0302 	and.w	r3, r3, #2
90003660:	2b00      	cmp	r3, #0
90003662:	d0ac      	beq.n	900035be <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003664:	687b      	ldr	r3, [r7, #4]
90003666:	681b      	ldr	r3, [r3, #0]
90003668:	69db      	ldr	r3, [r3, #28]
9000366a:	f003 0320 	and.w	r3, r3, #32
9000366e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003670:	687b      	ldr	r3, [r7, #4]
90003672:	681b      	ldr	r3, [r3, #0]
90003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003676:	f003 0320 	and.w	r3, r3, #32
9000367a:	693a      	ldr	r2, [r7, #16]
9000367c:	4313      	orrs	r3, r2
9000367e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003680:	693b      	ldr	r3, [r7, #16]
90003682:	2b00      	cmp	r3, #0
90003684:	d061      	beq.n	9000374a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003686:	f7ff fd1b 	bl	900030c0 <HAL_GetTick>
9000368a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
9000368c:	e056      	b.n	9000373c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000368e:	687b      	ldr	r3, [r7, #4]
90003690:	681b      	ldr	r3, [r3, #0]
90003692:	685b      	ldr	r3, [r3, #4]
90003694:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003696:	68fb      	ldr	r3, [r7, #12]
90003698:	f003 0329 	and.w	r3, r3, #41	@ 0x29
9000369c:	2b00      	cmp	r3, #0
9000369e:	d02e      	beq.n	900036fe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900036a0:	68fb      	ldr	r3, [r7, #12]
900036a2:	f003 0308 	and.w	r3, r3, #8
900036a6:	2b00      	cmp	r3, #0
900036a8:	d005      	beq.n	900036b6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900036aa:	687b      	ldr	r3, [r7, #4]
900036ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900036ae:	f043 0204 	orr.w	r2, r3, #4
900036b2:	687b      	ldr	r3, [r7, #4]
900036b4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900036b6:	68fb      	ldr	r3, [r7, #12]
900036b8:	f003 0320 	and.w	r3, r3, #32
900036bc:	2b00      	cmp	r3, #0
900036be:	d005      	beq.n	900036cc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900036c0:	687b      	ldr	r3, [r7, #4]
900036c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900036c4:	f043 0202 	orr.w	r2, r3, #2
900036c8:	687b      	ldr	r3, [r7, #4]
900036ca:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900036cc:	68fb      	ldr	r3, [r7, #12]
900036ce:	f003 0301 	and.w	r3, r3, #1
900036d2:	2b00      	cmp	r3, #0
900036d4:	d005      	beq.n	900036e2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900036d6:	687b      	ldr	r3, [r7, #4]
900036d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900036da:	f043 0201 	orr.w	r2, r3, #1
900036de:	687b      	ldr	r3, [r7, #4]
900036e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900036e2:	687b      	ldr	r3, [r7, #4]
900036e4:	681b      	ldr	r3, [r3, #0]
900036e6:	2229      	movs	r2, #41	@ 0x29
900036e8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900036ea:	687b      	ldr	r3, [r7, #4]
900036ec:	2204      	movs	r2, #4
900036ee:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900036f2:	687b      	ldr	r3, [r7, #4]
900036f4:	2200      	movs	r2, #0
900036f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
900036fa:	2301      	movs	r3, #1
900036fc:	e032      	b.n	90003764 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900036fe:	683b      	ldr	r3, [r7, #0]
90003700:	f1b3 3fff 	cmp.w	r3, #4294967295
90003704:	d01a      	beq.n	9000373c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003706:	f7ff fcdb 	bl	900030c0 <HAL_GetTick>
9000370a:	4602      	mov	r2, r0
9000370c:	697b      	ldr	r3, [r7, #20]
9000370e:	1ad3      	subs	r3, r2, r3
90003710:	683a      	ldr	r2, [r7, #0]
90003712:	429a      	cmp	r2, r3
90003714:	d302      	bcc.n	9000371c <HAL_DMA2D_PollForTransfer+0x182>
90003716:	683b      	ldr	r3, [r7, #0]
90003718:	2b00      	cmp	r3, #0
9000371a:	d10f      	bne.n	9000373c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000371c:	687b      	ldr	r3, [r7, #4]
9000371e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003720:	f043 0220 	orr.w	r2, r3, #32
90003724:	687b      	ldr	r3, [r7, #4]
90003726:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003728:	687b      	ldr	r3, [r7, #4]
9000372a:	2203      	movs	r2, #3
9000372c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003730:	687b      	ldr	r3, [r7, #4]
90003732:	2200      	movs	r2, #0
90003734:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003738:	2303      	movs	r3, #3
9000373a:	e013      	b.n	90003764 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
9000373c:	687b      	ldr	r3, [r7, #4]
9000373e:	681b      	ldr	r3, [r3, #0]
90003740:	685b      	ldr	r3, [r3, #4]
90003742:	f003 0310 	and.w	r3, r3, #16
90003746:	2b00      	cmp	r3, #0
90003748:	d0a1      	beq.n	9000368e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
9000374a:	687b      	ldr	r3, [r7, #4]
9000374c:	681b      	ldr	r3, [r3, #0]
9000374e:	2212      	movs	r2, #18
90003750:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003752:	687b      	ldr	r3, [r7, #4]
90003754:	2201      	movs	r2, #1
90003756:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000375a:	687b      	ldr	r3, [r7, #4]
9000375c:	2200      	movs	r2, #0
9000375e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003762:	2300      	movs	r3, #0
}
90003764:	4618      	mov	r0, r3
90003766:	3718      	adds	r7, #24
90003768:	46bd      	mov	sp, r7
9000376a:	bd80      	pop	{r7, pc}

9000376c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
9000376c:	b480      	push	{r7}
9000376e:	b087      	sub	sp, #28
90003770:	af00      	add	r7, sp, #0
90003772:	6078      	str	r0, [r7, #4]
90003774:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003776:	687b      	ldr	r3, [r7, #4]
90003778:	685b      	ldr	r3, [r3, #4]
9000377a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
9000377e:	683b      	ldr	r3, [r7, #0]
90003780:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003782:	687b      	ldr	r3, [r7, #4]
90003784:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003788:	2b01      	cmp	r3, #1
9000378a:	d101      	bne.n	90003790 <HAL_DMA2D_ConfigLayer+0x24>
9000378c:	2302      	movs	r3, #2
9000378e:	e092      	b.n	900038b6 <HAL_DMA2D_ConfigLayer+0x14a>
90003790:	687b      	ldr	r3, [r7, #4]
90003792:	2201      	movs	r2, #1
90003794:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003798:	687b      	ldr	r3, [r7, #4]
9000379a:	2202      	movs	r2, #2
9000379c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900037a0:	683a      	ldr	r2, [r7, #0]
900037a2:	4613      	mov	r3, r2
900037a4:	00db      	lsls	r3, r3, #3
900037a6:	1a9b      	subs	r3, r3, r2
900037a8:	009b      	lsls	r3, r3, #2
900037aa:	3328      	adds	r3, #40	@ 0x28
900037ac:	687a      	ldr	r2, [r7, #4]
900037ae:	4413      	add	r3, r2
900037b0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900037b2:	68fb      	ldr	r3, [r7, #12]
900037b4:	685a      	ldr	r2, [r3, #4]
900037b6:	68fb      	ldr	r3, [r7, #12]
900037b8:	689b      	ldr	r3, [r3, #8]
900037ba:	041b      	lsls	r3, r3, #16
900037bc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900037be:	68fb      	ldr	r3, [r7, #12]
900037c0:	691b      	ldr	r3, [r3, #16]
900037c2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900037c4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900037c6:	68fb      	ldr	r3, [r7, #12]
900037c8:	695b      	ldr	r3, [r3, #20]
900037ca:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900037cc:	4313      	orrs	r3, r2
900037ce:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
900037d0:	4b3c      	ldr	r3, [pc, #240]	@ (900038c4 <HAL_DMA2D_ConfigLayer+0x158>)
900037d2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900037d4:	68fb      	ldr	r3, [r7, #12]
900037d6:	685b      	ldr	r3, [r3, #4]
900037d8:	2b0a      	cmp	r3, #10
900037da:	d003      	beq.n	900037e4 <HAL_DMA2D_ConfigLayer+0x78>
900037dc:	68fb      	ldr	r3, [r7, #12]
900037de:	685b      	ldr	r3, [r3, #4]
900037e0:	2b09      	cmp	r3, #9
900037e2:	d107      	bne.n	900037f4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900037e4:	68fb      	ldr	r3, [r7, #12]
900037e6:	68db      	ldr	r3, [r3, #12]
900037e8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
900037ec:	693a      	ldr	r2, [r7, #16]
900037ee:	4313      	orrs	r3, r2
900037f0:	613b      	str	r3, [r7, #16]
900037f2:	e005      	b.n	90003800 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900037f4:	68fb      	ldr	r3, [r7, #12]
900037f6:	68db      	ldr	r3, [r3, #12]
900037f8:	061b      	lsls	r3, r3, #24
900037fa:	693a      	ldr	r2, [r7, #16]
900037fc:	4313      	orrs	r3, r2
900037fe:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003800:	683b      	ldr	r3, [r7, #0]
90003802:	2b00      	cmp	r3, #0
90003804:	d120      	bne.n	90003848 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003806:	687b      	ldr	r3, [r7, #4]
90003808:	681b      	ldr	r3, [r3, #0]
9000380a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000380c:	697b      	ldr	r3, [r7, #20]
9000380e:	43db      	mvns	r3, r3
90003810:	ea02 0103 	and.w	r1, r2, r3
90003814:	687b      	ldr	r3, [r7, #4]
90003816:	681b      	ldr	r3, [r3, #0]
90003818:	693a      	ldr	r2, [r7, #16]
9000381a:	430a      	orrs	r2, r1
9000381c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000381e:	687b      	ldr	r3, [r7, #4]
90003820:	681b      	ldr	r3, [r3, #0]
90003822:	68fa      	ldr	r2, [r7, #12]
90003824:	6812      	ldr	r2, [r2, #0]
90003826:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003828:	68fb      	ldr	r3, [r7, #12]
9000382a:	685b      	ldr	r3, [r3, #4]
9000382c:	2b0a      	cmp	r3, #10
9000382e:	d003      	beq.n	90003838 <HAL_DMA2D_ConfigLayer+0xcc>
90003830:	68fb      	ldr	r3, [r7, #12]
90003832:	685b      	ldr	r3, [r3, #4]
90003834:	2b09      	cmp	r3, #9
90003836:	d135      	bne.n	900038a4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003838:	68fb      	ldr	r3, [r7, #12]
9000383a:	68da      	ldr	r2, [r3, #12]
9000383c:	687b      	ldr	r3, [r7, #4]
9000383e:	681b      	ldr	r3, [r3, #0]
90003840:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003844:	629a      	str	r2, [r3, #40]	@ 0x28
90003846:	e02d      	b.n	900038a4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003848:	68fb      	ldr	r3, [r7, #12]
9000384a:	685b      	ldr	r3, [r3, #4]
9000384c:	2b0b      	cmp	r3, #11
9000384e:	d109      	bne.n	90003864 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003850:	68fb      	ldr	r3, [r7, #12]
90003852:	699b      	ldr	r3, [r3, #24]
90003854:	049b      	lsls	r3, r3, #18
90003856:	693a      	ldr	r2, [r7, #16]
90003858:	4313      	orrs	r3, r2
9000385a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
9000385c:	697b      	ldr	r3, [r7, #20]
9000385e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003862:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003864:	687b      	ldr	r3, [r7, #4]
90003866:	681b      	ldr	r3, [r3, #0]
90003868:	69da      	ldr	r2, [r3, #28]
9000386a:	697b      	ldr	r3, [r7, #20]
9000386c:	43db      	mvns	r3, r3
9000386e:	ea02 0103 	and.w	r1, r2, r3
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	681b      	ldr	r3, [r3, #0]
90003876:	693a      	ldr	r2, [r7, #16]
90003878:	430a      	orrs	r2, r1
9000387a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000387c:	687b      	ldr	r3, [r7, #4]
9000387e:	681b      	ldr	r3, [r3, #0]
90003880:	68fa      	ldr	r2, [r7, #12]
90003882:	6812      	ldr	r2, [r2, #0]
90003884:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003886:	68fb      	ldr	r3, [r7, #12]
90003888:	685b      	ldr	r3, [r3, #4]
9000388a:	2b0a      	cmp	r3, #10
9000388c:	d003      	beq.n	90003896 <HAL_DMA2D_ConfigLayer+0x12a>
9000388e:	68fb      	ldr	r3, [r7, #12]
90003890:	685b      	ldr	r3, [r3, #4]
90003892:	2b09      	cmp	r3, #9
90003894:	d106      	bne.n	900038a4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003896:	68fb      	ldr	r3, [r7, #12]
90003898:	68da      	ldr	r2, [r3, #12]
9000389a:	687b      	ldr	r3, [r7, #4]
9000389c:	681b      	ldr	r3, [r3, #0]
9000389e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900038a2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900038a4:	687b      	ldr	r3, [r7, #4]
900038a6:	2201      	movs	r2, #1
900038a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900038ac:	687b      	ldr	r3, [r7, #4]
900038ae:	2200      	movs	r2, #0
900038b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900038b4:	2300      	movs	r3, #0
}
900038b6:	4618      	mov	r0, r3
900038b8:	371c      	adds	r7, #28
900038ba:	46bd      	mov	sp, r7
900038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900038c0:	4770      	bx	lr
900038c2:	bf00      	nop
900038c4:	ff33000f 	.word	0xff33000f

900038c8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900038c8:	b480      	push	{r7}
900038ca:	b08b      	sub	sp, #44	@ 0x2c
900038cc:	af00      	add	r7, sp, #0
900038ce:	60f8      	str	r0, [r7, #12]
900038d0:	60b9      	str	r1, [r7, #8]
900038d2:	607a      	str	r2, [r7, #4]
900038d4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900038d6:	68fb      	ldr	r3, [r7, #12]
900038d8:	681b      	ldr	r3, [r3, #0]
900038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900038dc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
900038e0:	683b      	ldr	r3, [r7, #0]
900038e2:	041a      	lsls	r2, r3, #16
900038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900038e6:	431a      	orrs	r2, r3
900038e8:	68fb      	ldr	r3, [r7, #12]
900038ea:	681b      	ldr	r3, [r3, #0]
900038ec:	430a      	orrs	r2, r1
900038ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
900038f0:	68fb      	ldr	r3, [r7, #12]
900038f2:	681b      	ldr	r3, [r3, #0]
900038f4:	687a      	ldr	r2, [r7, #4]
900038f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
900038f8:	68fb      	ldr	r3, [r7, #12]
900038fa:	685b      	ldr	r3, [r3, #4]
900038fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003900:	d174      	bne.n	900039ec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003902:	68bb      	ldr	r3, [r7, #8]
90003904:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003908:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
9000390a:	68bb      	ldr	r3, [r7, #8]
9000390c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003910:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003912:	68bb      	ldr	r3, [r7, #8]
90003914:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003918:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
9000391a:	68bb      	ldr	r3, [r7, #8]
9000391c:	b2db      	uxtb	r3, r3
9000391e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003920:	68fb      	ldr	r3, [r7, #12]
90003922:	689b      	ldr	r3, [r3, #8]
90003924:	2b00      	cmp	r3, #0
90003926:	d108      	bne.n	9000393a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003928:	69ba      	ldr	r2, [r7, #24]
9000392a:	69fb      	ldr	r3, [r7, #28]
9000392c:	431a      	orrs	r2, r3
9000392e:	6a3b      	ldr	r3, [r7, #32]
90003930:	4313      	orrs	r3, r2
90003932:	697a      	ldr	r2, [r7, #20]
90003934:	4313      	orrs	r3, r2
90003936:	627b      	str	r3, [r7, #36]	@ 0x24
90003938:	e053      	b.n	900039e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
9000393a:	68fb      	ldr	r3, [r7, #12]
9000393c:	689b      	ldr	r3, [r3, #8]
9000393e:	2b01      	cmp	r3, #1
90003940:	d106      	bne.n	90003950 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003942:	69ba      	ldr	r2, [r7, #24]
90003944:	69fb      	ldr	r3, [r7, #28]
90003946:	4313      	orrs	r3, r2
90003948:	697a      	ldr	r2, [r7, #20]
9000394a:	4313      	orrs	r3, r2
9000394c:	627b      	str	r3, [r7, #36]	@ 0x24
9000394e:	e048      	b.n	900039e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003950:	68fb      	ldr	r3, [r7, #12]
90003952:	689b      	ldr	r3, [r3, #8]
90003954:	2b02      	cmp	r3, #2
90003956:	d111      	bne.n	9000397c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003958:	69fb      	ldr	r3, [r7, #28]
9000395a:	0cdb      	lsrs	r3, r3, #19
9000395c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
9000395e:	69bb      	ldr	r3, [r7, #24]
90003960:	0a9b      	lsrs	r3, r3, #10
90003962:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003964:	697b      	ldr	r3, [r7, #20]
90003966:	08db      	lsrs	r3, r3, #3
90003968:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
9000396a:	69bb      	ldr	r3, [r7, #24]
9000396c:	015a      	lsls	r2, r3, #5
9000396e:	69fb      	ldr	r3, [r7, #28]
90003970:	02db      	lsls	r3, r3, #11
90003972:	4313      	orrs	r3, r2
90003974:	697a      	ldr	r2, [r7, #20]
90003976:	4313      	orrs	r3, r2
90003978:	627b      	str	r3, [r7, #36]	@ 0x24
9000397a:	e032      	b.n	900039e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
9000397c:	68fb      	ldr	r3, [r7, #12]
9000397e:	689b      	ldr	r3, [r3, #8]
90003980:	2b03      	cmp	r3, #3
90003982:	d117      	bne.n	900039b4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003984:	6a3b      	ldr	r3, [r7, #32]
90003986:	0fdb      	lsrs	r3, r3, #31
90003988:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
9000398a:	69fb      	ldr	r3, [r7, #28]
9000398c:	0cdb      	lsrs	r3, r3, #19
9000398e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003990:	69bb      	ldr	r3, [r7, #24]
90003992:	0adb      	lsrs	r3, r3, #11
90003994:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003996:	697b      	ldr	r3, [r7, #20]
90003998:	08db      	lsrs	r3, r3, #3
9000399a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
9000399c:	69bb      	ldr	r3, [r7, #24]
9000399e:	015a      	lsls	r2, r3, #5
900039a0:	69fb      	ldr	r3, [r7, #28]
900039a2:	029b      	lsls	r3, r3, #10
900039a4:	431a      	orrs	r2, r3
900039a6:	6a3b      	ldr	r3, [r7, #32]
900039a8:	03db      	lsls	r3, r3, #15
900039aa:	4313      	orrs	r3, r2
900039ac:	697a      	ldr	r2, [r7, #20]
900039ae:	4313      	orrs	r3, r2
900039b0:	627b      	str	r3, [r7, #36]	@ 0x24
900039b2:	e016      	b.n	900039e2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900039b4:	6a3b      	ldr	r3, [r7, #32]
900039b6:	0f1b      	lsrs	r3, r3, #28
900039b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900039ba:	69fb      	ldr	r3, [r7, #28]
900039bc:	0d1b      	lsrs	r3, r3, #20
900039be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
900039c0:	69bb      	ldr	r3, [r7, #24]
900039c2:	0b1b      	lsrs	r3, r3, #12
900039c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
900039c6:	697b      	ldr	r3, [r7, #20]
900039c8:	091b      	lsrs	r3, r3, #4
900039ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900039cc:	69bb      	ldr	r3, [r7, #24]
900039ce:	011a      	lsls	r2, r3, #4
900039d0:	69fb      	ldr	r3, [r7, #28]
900039d2:	021b      	lsls	r3, r3, #8
900039d4:	431a      	orrs	r2, r3
900039d6:	6a3b      	ldr	r3, [r7, #32]
900039d8:	031b      	lsls	r3, r3, #12
900039da:	4313      	orrs	r3, r2
900039dc:	697a      	ldr	r2, [r7, #20]
900039de:	4313      	orrs	r3, r2
900039e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
900039e2:	68fb      	ldr	r3, [r7, #12]
900039e4:	681b      	ldr	r3, [r3, #0]
900039e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900039e8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
900039ea:	e00d      	b.n	90003a08 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
900039ec:	68fb      	ldr	r3, [r7, #12]
900039ee:	685b      	ldr	r3, [r3, #4]
900039f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900039f4:	d104      	bne.n	90003a00 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
900039f6:	68fb      	ldr	r3, [r7, #12]
900039f8:	681b      	ldr	r3, [r3, #0]
900039fa:	68ba      	ldr	r2, [r7, #8]
900039fc:	615a      	str	r2, [r3, #20]
}
900039fe:	e003      	b.n	90003a08 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003a00:	68fb      	ldr	r3, [r7, #12]
90003a02:	681b      	ldr	r3, [r3, #0]
90003a04:	68ba      	ldr	r2, [r7, #8]
90003a06:	60da      	str	r2, [r3, #12]
}
90003a08:	bf00      	nop
90003a0a:	372c      	adds	r7, #44	@ 0x2c
90003a0c:	46bd      	mov	sp, r7
90003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a12:	4770      	bx	lr

90003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003a14:	b480      	push	{r7}
90003a16:	b089      	sub	sp, #36	@ 0x24
90003a18:	af00      	add	r7, sp, #0
90003a1a:	6078      	str	r0, [r7, #4]
90003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003a1e:	2300      	movs	r3, #0
90003a20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003a22:	4b89      	ldr	r3, [pc, #548]	@ (90003c48 <HAL_GPIO_Init+0x234>)
90003a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003a26:	e194      	b.n	90003d52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003a28:	683b      	ldr	r3, [r7, #0]
90003a2a:	681a      	ldr	r2, [r3, #0]
90003a2c:	2101      	movs	r1, #1
90003a2e:	69fb      	ldr	r3, [r7, #28]
90003a30:	fa01 f303 	lsl.w	r3, r1, r3
90003a34:	4013      	ands	r3, r2
90003a36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003a38:	693b      	ldr	r3, [r7, #16]
90003a3a:	2b00      	cmp	r3, #0
90003a3c:	f000 8186 	beq.w	90003d4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003a40:	683b      	ldr	r3, [r7, #0]
90003a42:	685b      	ldr	r3, [r3, #4]
90003a44:	f003 0303 	and.w	r3, r3, #3
90003a48:	2b01      	cmp	r3, #1
90003a4a:	d005      	beq.n	90003a58 <HAL_GPIO_Init+0x44>
90003a4c:	683b      	ldr	r3, [r7, #0]
90003a4e:	685b      	ldr	r3, [r3, #4]
90003a50:	f003 0303 	and.w	r3, r3, #3
90003a54:	2b02      	cmp	r3, #2
90003a56:	d130      	bne.n	90003aba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003a58:	687b      	ldr	r3, [r7, #4]
90003a5a:	689b      	ldr	r3, [r3, #8]
90003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003a5e:	69fb      	ldr	r3, [r7, #28]
90003a60:	005b      	lsls	r3, r3, #1
90003a62:	2203      	movs	r2, #3
90003a64:	fa02 f303 	lsl.w	r3, r2, r3
90003a68:	43db      	mvns	r3, r3
90003a6a:	69ba      	ldr	r2, [r7, #24]
90003a6c:	4013      	ands	r3, r2
90003a6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003a70:	683b      	ldr	r3, [r7, #0]
90003a72:	68da      	ldr	r2, [r3, #12]
90003a74:	69fb      	ldr	r3, [r7, #28]
90003a76:	005b      	lsls	r3, r3, #1
90003a78:	fa02 f303 	lsl.w	r3, r2, r3
90003a7c:	69ba      	ldr	r2, [r7, #24]
90003a7e:	4313      	orrs	r3, r2
90003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003a82:	687b      	ldr	r3, [r7, #4]
90003a84:	69ba      	ldr	r2, [r7, #24]
90003a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003a88:	687b      	ldr	r3, [r7, #4]
90003a8a:	685b      	ldr	r3, [r3, #4]
90003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003a8e:	2201      	movs	r2, #1
90003a90:	69fb      	ldr	r3, [r7, #28]
90003a92:	fa02 f303 	lsl.w	r3, r2, r3
90003a96:	43db      	mvns	r3, r3
90003a98:	69ba      	ldr	r2, [r7, #24]
90003a9a:	4013      	ands	r3, r2
90003a9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003a9e:	683b      	ldr	r3, [r7, #0]
90003aa0:	685b      	ldr	r3, [r3, #4]
90003aa2:	091b      	lsrs	r3, r3, #4
90003aa4:	f003 0201 	and.w	r2, r3, #1
90003aa8:	69fb      	ldr	r3, [r7, #28]
90003aaa:	fa02 f303 	lsl.w	r3, r2, r3
90003aae:	69ba      	ldr	r2, [r7, #24]
90003ab0:	4313      	orrs	r3, r2
90003ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003ab4:	687b      	ldr	r3, [r7, #4]
90003ab6:	69ba      	ldr	r2, [r7, #24]
90003ab8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003aba:	683b      	ldr	r3, [r7, #0]
90003abc:	685b      	ldr	r3, [r3, #4]
90003abe:	f003 0303 	and.w	r3, r3, #3
90003ac2:	2b03      	cmp	r3, #3
90003ac4:	d017      	beq.n	90003af6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003ac6:	687b      	ldr	r3, [r7, #4]
90003ac8:	68db      	ldr	r3, [r3, #12]
90003aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003acc:	69fb      	ldr	r3, [r7, #28]
90003ace:	005b      	lsls	r3, r3, #1
90003ad0:	2203      	movs	r2, #3
90003ad2:	fa02 f303 	lsl.w	r3, r2, r3
90003ad6:	43db      	mvns	r3, r3
90003ad8:	69ba      	ldr	r2, [r7, #24]
90003ada:	4013      	ands	r3, r2
90003adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003ade:	683b      	ldr	r3, [r7, #0]
90003ae0:	689a      	ldr	r2, [r3, #8]
90003ae2:	69fb      	ldr	r3, [r7, #28]
90003ae4:	005b      	lsls	r3, r3, #1
90003ae6:	fa02 f303 	lsl.w	r3, r2, r3
90003aea:	69ba      	ldr	r2, [r7, #24]
90003aec:	4313      	orrs	r3, r2
90003aee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003af0:	687b      	ldr	r3, [r7, #4]
90003af2:	69ba      	ldr	r2, [r7, #24]
90003af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003af6:	683b      	ldr	r3, [r7, #0]
90003af8:	685b      	ldr	r3, [r3, #4]
90003afa:	f003 0303 	and.w	r3, r3, #3
90003afe:	2b02      	cmp	r3, #2
90003b00:	d123      	bne.n	90003b4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003b02:	69fb      	ldr	r3, [r7, #28]
90003b04:	08da      	lsrs	r2, r3, #3
90003b06:	687b      	ldr	r3, [r7, #4]
90003b08:	3208      	adds	r2, #8
90003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003b10:	69fb      	ldr	r3, [r7, #28]
90003b12:	f003 0307 	and.w	r3, r3, #7
90003b16:	009b      	lsls	r3, r3, #2
90003b18:	220f      	movs	r2, #15
90003b1a:	fa02 f303 	lsl.w	r3, r2, r3
90003b1e:	43db      	mvns	r3, r3
90003b20:	69ba      	ldr	r2, [r7, #24]
90003b22:	4013      	ands	r3, r2
90003b24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003b26:	683b      	ldr	r3, [r7, #0]
90003b28:	691a      	ldr	r2, [r3, #16]
90003b2a:	69fb      	ldr	r3, [r7, #28]
90003b2c:	f003 0307 	and.w	r3, r3, #7
90003b30:	009b      	lsls	r3, r3, #2
90003b32:	fa02 f303 	lsl.w	r3, r2, r3
90003b36:	69ba      	ldr	r2, [r7, #24]
90003b38:	4313      	orrs	r3, r2
90003b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003b3c:	69fb      	ldr	r3, [r7, #28]
90003b3e:	08da      	lsrs	r2, r3, #3
90003b40:	687b      	ldr	r3, [r7, #4]
90003b42:	3208      	adds	r2, #8
90003b44:	69b9      	ldr	r1, [r7, #24]
90003b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003b4a:	687b      	ldr	r3, [r7, #4]
90003b4c:	681b      	ldr	r3, [r3, #0]
90003b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003b50:	69fb      	ldr	r3, [r7, #28]
90003b52:	005b      	lsls	r3, r3, #1
90003b54:	2203      	movs	r2, #3
90003b56:	fa02 f303 	lsl.w	r3, r2, r3
90003b5a:	43db      	mvns	r3, r3
90003b5c:	69ba      	ldr	r2, [r7, #24]
90003b5e:	4013      	ands	r3, r2
90003b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003b62:	683b      	ldr	r3, [r7, #0]
90003b64:	685b      	ldr	r3, [r3, #4]
90003b66:	f003 0203 	and.w	r2, r3, #3
90003b6a:	69fb      	ldr	r3, [r7, #28]
90003b6c:	005b      	lsls	r3, r3, #1
90003b6e:	fa02 f303 	lsl.w	r3, r2, r3
90003b72:	69ba      	ldr	r2, [r7, #24]
90003b74:	4313      	orrs	r3, r2
90003b76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003b78:	687b      	ldr	r3, [r7, #4]
90003b7a:	69ba      	ldr	r2, [r7, #24]
90003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003b7e:	683b      	ldr	r3, [r7, #0]
90003b80:	685b      	ldr	r3, [r3, #4]
90003b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003b86:	2b00      	cmp	r3, #0
90003b88:	f000 80e0 	beq.w	90003d4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003b8c:	4b2f      	ldr	r3, [pc, #188]	@ (90003c4c <HAL_GPIO_Init+0x238>)
90003b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003b92:	4a2e      	ldr	r2, [pc, #184]	@ (90003c4c <HAL_GPIO_Init+0x238>)
90003b94:	f043 0302 	orr.w	r3, r3, #2
90003b98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003b9c:	4b2b      	ldr	r3, [pc, #172]	@ (90003c4c <HAL_GPIO_Init+0x238>)
90003b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003ba2:	f003 0302 	and.w	r3, r3, #2
90003ba6:	60fb      	str	r3, [r7, #12]
90003ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003baa:	4a29      	ldr	r2, [pc, #164]	@ (90003c50 <HAL_GPIO_Init+0x23c>)
90003bac:	69fb      	ldr	r3, [r7, #28]
90003bae:	089b      	lsrs	r3, r3, #2
90003bb0:	3302      	adds	r3, #2
90003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003bb8:	69fb      	ldr	r3, [r7, #28]
90003bba:	f003 0303 	and.w	r3, r3, #3
90003bbe:	009b      	lsls	r3, r3, #2
90003bc0:	220f      	movs	r2, #15
90003bc2:	fa02 f303 	lsl.w	r3, r2, r3
90003bc6:	43db      	mvns	r3, r3
90003bc8:	69ba      	ldr	r2, [r7, #24]
90003bca:	4013      	ands	r3, r2
90003bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003bce:	687b      	ldr	r3, [r7, #4]
90003bd0:	4a20      	ldr	r2, [pc, #128]	@ (90003c54 <HAL_GPIO_Init+0x240>)
90003bd2:	4293      	cmp	r3, r2
90003bd4:	d052      	beq.n	90003c7c <HAL_GPIO_Init+0x268>
90003bd6:	687b      	ldr	r3, [r7, #4]
90003bd8:	4a1f      	ldr	r2, [pc, #124]	@ (90003c58 <HAL_GPIO_Init+0x244>)
90003bda:	4293      	cmp	r3, r2
90003bdc:	d031      	beq.n	90003c42 <HAL_GPIO_Init+0x22e>
90003bde:	687b      	ldr	r3, [r7, #4]
90003be0:	4a1e      	ldr	r2, [pc, #120]	@ (90003c5c <HAL_GPIO_Init+0x248>)
90003be2:	4293      	cmp	r3, r2
90003be4:	d02b      	beq.n	90003c3e <HAL_GPIO_Init+0x22a>
90003be6:	687b      	ldr	r3, [r7, #4]
90003be8:	4a1d      	ldr	r2, [pc, #116]	@ (90003c60 <HAL_GPIO_Init+0x24c>)
90003bea:	4293      	cmp	r3, r2
90003bec:	d025      	beq.n	90003c3a <HAL_GPIO_Init+0x226>
90003bee:	687b      	ldr	r3, [r7, #4]
90003bf0:	4a1c      	ldr	r2, [pc, #112]	@ (90003c64 <HAL_GPIO_Init+0x250>)
90003bf2:	4293      	cmp	r3, r2
90003bf4:	d01f      	beq.n	90003c36 <HAL_GPIO_Init+0x222>
90003bf6:	687b      	ldr	r3, [r7, #4]
90003bf8:	4a1b      	ldr	r2, [pc, #108]	@ (90003c68 <HAL_GPIO_Init+0x254>)
90003bfa:	4293      	cmp	r3, r2
90003bfc:	d019      	beq.n	90003c32 <HAL_GPIO_Init+0x21e>
90003bfe:	687b      	ldr	r3, [r7, #4]
90003c00:	4a1a      	ldr	r2, [pc, #104]	@ (90003c6c <HAL_GPIO_Init+0x258>)
90003c02:	4293      	cmp	r3, r2
90003c04:	d013      	beq.n	90003c2e <HAL_GPIO_Init+0x21a>
90003c06:	687b      	ldr	r3, [r7, #4]
90003c08:	4a19      	ldr	r2, [pc, #100]	@ (90003c70 <HAL_GPIO_Init+0x25c>)
90003c0a:	4293      	cmp	r3, r2
90003c0c:	d00d      	beq.n	90003c2a <HAL_GPIO_Init+0x216>
90003c0e:	687b      	ldr	r3, [r7, #4]
90003c10:	4a18      	ldr	r2, [pc, #96]	@ (90003c74 <HAL_GPIO_Init+0x260>)
90003c12:	4293      	cmp	r3, r2
90003c14:	d007      	beq.n	90003c26 <HAL_GPIO_Init+0x212>
90003c16:	687b      	ldr	r3, [r7, #4]
90003c18:	4a17      	ldr	r2, [pc, #92]	@ (90003c78 <HAL_GPIO_Init+0x264>)
90003c1a:	4293      	cmp	r3, r2
90003c1c:	d101      	bne.n	90003c22 <HAL_GPIO_Init+0x20e>
90003c1e:	2309      	movs	r3, #9
90003c20:	e02d      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c22:	230a      	movs	r3, #10
90003c24:	e02b      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c26:	2308      	movs	r3, #8
90003c28:	e029      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c2a:	2307      	movs	r3, #7
90003c2c:	e027      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c2e:	2306      	movs	r3, #6
90003c30:	e025      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c32:	2305      	movs	r3, #5
90003c34:	e023      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c36:	2304      	movs	r3, #4
90003c38:	e021      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c3a:	2303      	movs	r3, #3
90003c3c:	e01f      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c3e:	2302      	movs	r3, #2
90003c40:	e01d      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c42:	2301      	movs	r3, #1
90003c44:	e01b      	b.n	90003c7e <HAL_GPIO_Init+0x26a>
90003c46:	bf00      	nop
90003c48:	58000080 	.word	0x58000080
90003c4c:	58024400 	.word	0x58024400
90003c50:	58000400 	.word	0x58000400
90003c54:	58020000 	.word	0x58020000
90003c58:	58020400 	.word	0x58020400
90003c5c:	58020800 	.word	0x58020800
90003c60:	58020c00 	.word	0x58020c00
90003c64:	58021000 	.word	0x58021000
90003c68:	58021400 	.word	0x58021400
90003c6c:	58021800 	.word	0x58021800
90003c70:	58021c00 	.word	0x58021c00
90003c74:	58022000 	.word	0x58022000
90003c78:	58022400 	.word	0x58022400
90003c7c:	2300      	movs	r3, #0
90003c7e:	69fa      	ldr	r2, [r7, #28]
90003c80:	f002 0203 	and.w	r2, r2, #3
90003c84:	0092      	lsls	r2, r2, #2
90003c86:	4093      	lsls	r3, r2
90003c88:	69ba      	ldr	r2, [r7, #24]
90003c8a:	4313      	orrs	r3, r2
90003c8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003c8e:	4938      	ldr	r1, [pc, #224]	@ (90003d70 <HAL_GPIO_Init+0x35c>)
90003c90:	69fb      	ldr	r3, [r7, #28]
90003c92:	089b      	lsrs	r3, r3, #2
90003c94:	3302      	adds	r3, #2
90003c96:	69ba      	ldr	r2, [r7, #24]
90003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003ca0:	681b      	ldr	r3, [r3, #0]
90003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003ca4:	693b      	ldr	r3, [r7, #16]
90003ca6:	43db      	mvns	r3, r3
90003ca8:	69ba      	ldr	r2, [r7, #24]
90003caa:	4013      	ands	r3, r2
90003cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003cae:	683b      	ldr	r3, [r7, #0]
90003cb0:	685b      	ldr	r3, [r3, #4]
90003cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003cb6:	2b00      	cmp	r3, #0
90003cb8:	d003      	beq.n	90003cc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003cba:	69ba      	ldr	r2, [r7, #24]
90003cbc:	693b      	ldr	r3, [r7, #16]
90003cbe:	4313      	orrs	r3, r2
90003cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003cc6:	69bb      	ldr	r3, [r7, #24]
90003cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003cce:	685b      	ldr	r3, [r3, #4]
90003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003cd2:	693b      	ldr	r3, [r7, #16]
90003cd4:	43db      	mvns	r3, r3
90003cd6:	69ba      	ldr	r2, [r7, #24]
90003cd8:	4013      	ands	r3, r2
90003cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003cdc:	683b      	ldr	r3, [r7, #0]
90003cde:	685b      	ldr	r3, [r3, #4]
90003ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003ce4:	2b00      	cmp	r3, #0
90003ce6:	d003      	beq.n	90003cf0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003ce8:	69ba      	ldr	r2, [r7, #24]
90003cea:	693b      	ldr	r3, [r7, #16]
90003cec:	4313      	orrs	r3, r2
90003cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003cf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003cf4:	69bb      	ldr	r3, [r7, #24]
90003cf6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003cf8:	697b      	ldr	r3, [r7, #20]
90003cfa:	685b      	ldr	r3, [r3, #4]
90003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003cfe:	693b      	ldr	r3, [r7, #16]
90003d00:	43db      	mvns	r3, r3
90003d02:	69ba      	ldr	r2, [r7, #24]
90003d04:	4013      	ands	r3, r2
90003d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003d08:	683b      	ldr	r3, [r7, #0]
90003d0a:	685b      	ldr	r3, [r3, #4]
90003d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003d10:	2b00      	cmp	r3, #0
90003d12:	d003      	beq.n	90003d1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003d14:	69ba      	ldr	r2, [r7, #24]
90003d16:	693b      	ldr	r3, [r7, #16]
90003d18:	4313      	orrs	r3, r2
90003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003d1c:	697b      	ldr	r3, [r7, #20]
90003d1e:	69ba      	ldr	r2, [r7, #24]
90003d20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003d22:	697b      	ldr	r3, [r7, #20]
90003d24:	681b      	ldr	r3, [r3, #0]
90003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003d28:	693b      	ldr	r3, [r7, #16]
90003d2a:	43db      	mvns	r3, r3
90003d2c:	69ba      	ldr	r2, [r7, #24]
90003d2e:	4013      	ands	r3, r2
90003d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003d32:	683b      	ldr	r3, [r7, #0]
90003d34:	685b      	ldr	r3, [r3, #4]
90003d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003d3a:	2b00      	cmp	r3, #0
90003d3c:	d003      	beq.n	90003d46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003d3e:	69ba      	ldr	r2, [r7, #24]
90003d40:	693b      	ldr	r3, [r7, #16]
90003d42:	4313      	orrs	r3, r2
90003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003d46:	697b      	ldr	r3, [r7, #20]
90003d48:	69ba      	ldr	r2, [r7, #24]
90003d4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003d4c:	69fb      	ldr	r3, [r7, #28]
90003d4e:	3301      	adds	r3, #1
90003d50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003d52:	683b      	ldr	r3, [r7, #0]
90003d54:	681a      	ldr	r2, [r3, #0]
90003d56:	69fb      	ldr	r3, [r7, #28]
90003d58:	fa22 f303 	lsr.w	r3, r2, r3
90003d5c:	2b00      	cmp	r3, #0
90003d5e:	f47f ae63 	bne.w	90003a28 <HAL_GPIO_Init+0x14>
  }
}
90003d62:	bf00      	nop
90003d64:	bf00      	nop
90003d66:	3724      	adds	r7, #36	@ 0x24
90003d68:	46bd      	mov	sp, r7
90003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d6e:	4770      	bx	lr
90003d70:	58000400 	.word	0x58000400

90003d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003d74:	b480      	push	{r7}
90003d76:	b085      	sub	sp, #20
90003d78:	af00      	add	r7, sp, #0
90003d7a:	6078      	str	r0, [r7, #4]
90003d7c:	460b      	mov	r3, r1
90003d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003d80:	687b      	ldr	r3, [r7, #4]
90003d82:	691a      	ldr	r2, [r3, #16]
90003d84:	887b      	ldrh	r3, [r7, #2]
90003d86:	4013      	ands	r3, r2
90003d88:	2b00      	cmp	r3, #0
90003d8a:	d002      	beq.n	90003d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003d8c:	2301      	movs	r3, #1
90003d8e:	73fb      	strb	r3, [r7, #15]
90003d90:	e001      	b.n	90003d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003d92:	2300      	movs	r3, #0
90003d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003d96:	7bfb      	ldrb	r3, [r7, #15]
}
90003d98:	4618      	mov	r0, r3
90003d9a:	3714      	adds	r7, #20
90003d9c:	46bd      	mov	sp, r7
90003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003da2:	4770      	bx	lr

90003da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003da4:	b480      	push	{r7}
90003da6:	b083      	sub	sp, #12
90003da8:	af00      	add	r7, sp, #0
90003daa:	6078      	str	r0, [r7, #4]
90003dac:	460b      	mov	r3, r1
90003dae:	807b      	strh	r3, [r7, #2]
90003db0:	4613      	mov	r3, r2
90003db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003db4:	787b      	ldrb	r3, [r7, #1]
90003db6:	2b00      	cmp	r3, #0
90003db8:	d003      	beq.n	90003dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003dba:	887a      	ldrh	r2, [r7, #2]
90003dbc:	687b      	ldr	r3, [r7, #4]
90003dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003dc0:	e003      	b.n	90003dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003dc2:	887b      	ldrh	r3, [r7, #2]
90003dc4:	041a      	lsls	r2, r3, #16
90003dc6:	687b      	ldr	r3, [r7, #4]
90003dc8:	619a      	str	r2, [r3, #24]
}
90003dca:	bf00      	nop
90003dcc:	370c      	adds	r7, #12
90003dce:	46bd      	mov	sp, r7
90003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
90003dd4:	4770      	bx	lr

90003dd6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003dd6:	b580      	push	{r7, lr}
90003dd8:	b086      	sub	sp, #24
90003dda:	af00      	add	r7, sp, #0
90003ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003dde:	687b      	ldr	r3, [r7, #4]
90003de0:	681b      	ldr	r3, [r3, #0]
90003de2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003de4:	693b      	ldr	r3, [r7, #16]
90003de6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003de8:	687b      	ldr	r3, [r7, #4]
90003dea:	681b      	ldr	r3, [r3, #0]
90003dec:	4618      	mov	r0, r3
90003dee:	f007 f9a5 	bl	9000b13c <USB_GetMode>
90003df2:	4603      	mov	r3, r0
90003df4:	2b01      	cmp	r3, #1
90003df6:	f040 80fb 	bne.w	90003ff0 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003dfa:	687b      	ldr	r3, [r7, #4]
90003dfc:	681b      	ldr	r3, [r3, #0]
90003dfe:	4618      	mov	r0, r3
90003e00:	f007 f968 	bl	9000b0d4 <USB_ReadInterrupts>
90003e04:	4603      	mov	r3, r0
90003e06:	2b00      	cmp	r3, #0
90003e08:	f000 80f1 	beq.w	90003fee <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003e0c:	687b      	ldr	r3, [r7, #4]
90003e0e:	681b      	ldr	r3, [r3, #0]
90003e10:	4618      	mov	r0, r3
90003e12:	f007 f95f 	bl	9000b0d4 <USB_ReadInterrupts>
90003e16:	4603      	mov	r3, r0
90003e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003e1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90003e20:	d104      	bne.n	90003e2c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003e22:	687b      	ldr	r3, [r7, #4]
90003e24:	681b      	ldr	r3, [r3, #0]
90003e26:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90003e2a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003e2c:	687b      	ldr	r3, [r7, #4]
90003e2e:	681b      	ldr	r3, [r3, #0]
90003e30:	4618      	mov	r0, r3
90003e32:	f007 f94f 	bl	9000b0d4 <USB_ReadInterrupts>
90003e36:	4603      	mov	r3, r0
90003e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90003e40:	d104      	bne.n	90003e4c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003e42:	687b      	ldr	r3, [r7, #4]
90003e44:	681b      	ldr	r3, [r3, #0]
90003e46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90003e4a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003e4c:	687b      	ldr	r3, [r7, #4]
90003e4e:	681b      	ldr	r3, [r3, #0]
90003e50:	4618      	mov	r0, r3
90003e52:	f007 f93f 	bl	9000b0d4 <USB_ReadInterrupts>
90003e56:	4603      	mov	r3, r0
90003e58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90003e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90003e60:	d104      	bne.n	90003e6c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003e62:	687b      	ldr	r3, [r7, #4]
90003e64:	681b      	ldr	r3, [r3, #0]
90003e66:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003e6a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003e6c:	687b      	ldr	r3, [r7, #4]
90003e6e:	681b      	ldr	r3, [r3, #0]
90003e70:	4618      	mov	r0, r3
90003e72:	f007 f92f 	bl	9000b0d4 <USB_ReadInterrupts>
90003e76:	4603      	mov	r3, r0
90003e78:	f003 0302 	and.w	r3, r3, #2
90003e7c:	2b02      	cmp	r3, #2
90003e7e:	d103      	bne.n	90003e88 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003e80:	687b      	ldr	r3, [r7, #4]
90003e82:	681b      	ldr	r3, [r3, #0]
90003e84:	2202      	movs	r2, #2
90003e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003e88:	687b      	ldr	r3, [r7, #4]
90003e8a:	681b      	ldr	r3, [r3, #0]
90003e8c:	4618      	mov	r0, r3
90003e8e:	f007 f921 	bl	9000b0d4 <USB_ReadInterrupts>
90003e92:	4603      	mov	r3, r0
90003e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90003e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003e9c:	d120      	bne.n	90003ee0 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90003e9e:	687b      	ldr	r3, [r7, #4]
90003ea0:	681b      	ldr	r3, [r3, #0]
90003ea2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90003ea6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90003ea8:	68fb      	ldr	r3, [r7, #12]
90003eaa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90003eae:	681b      	ldr	r3, [r3, #0]
90003eb0:	f003 0301 	and.w	r3, r3, #1
90003eb4:	2b00      	cmp	r3, #0
90003eb6:	d113      	bne.n	90003ee0 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90003eb8:	2110      	movs	r1, #16
90003eba:	6938      	ldr	r0, [r7, #16]
90003ebc:	f007 f852 	bl	9000af64 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90003ec0:	6938      	ldr	r0, [r7, #16]
90003ec2:	f007 f881 	bl	9000afc8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90003ec6:	687b      	ldr	r3, [r7, #4]
90003ec8:	7a5b      	ldrb	r3, [r3, #9]
90003eca:	2b02      	cmp	r3, #2
90003ecc:	d105      	bne.n	90003eda <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003ece:	687b      	ldr	r3, [r7, #4]
90003ed0:	681b      	ldr	r3, [r3, #0]
90003ed2:	2101      	movs	r1, #1
90003ed4:	4618      	mov	r0, r3
90003ed6:	f007 f93f 	bl	9000b158 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90003eda:	6878      	ldr	r0, [r7, #4]
90003edc:	f7fd f96c 	bl	900011b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90003ee0:	687b      	ldr	r3, [r7, #4]
90003ee2:	681b      	ldr	r3, [r3, #0]
90003ee4:	4618      	mov	r0, r3
90003ee6:	f007 f8f5 	bl	9000b0d4 <USB_ReadInterrupts>
90003eea:	4603      	mov	r3, r0
90003eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003ef4:	d102      	bne.n	90003efc <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90003ef6:	6878      	ldr	r0, [r7, #4]
90003ef8:	f001 fca1 	bl	9000583e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90003efc:	687b      	ldr	r3, [r7, #4]
90003efe:	681b      	ldr	r3, [r3, #0]
90003f00:	4618      	mov	r0, r3
90003f02:	f007 f8e7 	bl	9000b0d4 <USB_ReadInterrupts>
90003f06:	4603      	mov	r3, r0
90003f08:	f003 0308 	and.w	r3, r3, #8
90003f0c:	2b08      	cmp	r3, #8
90003f0e:	d106      	bne.n	90003f1e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90003f10:	6878      	ldr	r0, [r7, #4]
90003f12:	f7fd f935 	bl	90001180 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90003f16:	687b      	ldr	r3, [r7, #4]
90003f18:	681b      	ldr	r3, [r3, #0]
90003f1a:	2208      	movs	r2, #8
90003f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90003f1e:	687b      	ldr	r3, [r7, #4]
90003f20:	681b      	ldr	r3, [r3, #0]
90003f22:	4618      	mov	r0, r3
90003f24:	f007 f8d6 	bl	9000b0d4 <USB_ReadInterrupts>
90003f28:	4603      	mov	r3, r0
90003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90003f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90003f32:	d139      	bne.n	90003fa8 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003f34:	687b      	ldr	r3, [r7, #4]
90003f36:	681b      	ldr	r3, [r3, #0]
90003f38:	4618      	mov	r0, r3
90003f3a:	f007 f94a 	bl	9000b1d2 <USB_HC_ReadInterrupt>
90003f3e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003f40:	2300      	movs	r3, #0
90003f42:	617b      	str	r3, [r7, #20]
90003f44:	e025      	b.n	90003f92 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90003f46:	697b      	ldr	r3, [r7, #20]
90003f48:	f003 030f 	and.w	r3, r3, #15
90003f4c:	68ba      	ldr	r2, [r7, #8]
90003f4e:	fa22 f303 	lsr.w	r3, r2, r3
90003f52:	f003 0301 	and.w	r3, r3, #1
90003f56:	2b00      	cmp	r3, #0
90003f58:	d018      	beq.n	90003f8c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003f5a:	697b      	ldr	r3, [r7, #20]
90003f5c:	015a      	lsls	r2, r3, #5
90003f5e:	68fb      	ldr	r3, [r7, #12]
90003f60:	4413      	add	r3, r2
90003f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003f66:	681b      	ldr	r3, [r3, #0]
90003f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90003f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90003f70:	d106      	bne.n	90003f80 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90003f72:	697b      	ldr	r3, [r7, #20]
90003f74:	b2db      	uxtb	r3, r3
90003f76:	4619      	mov	r1, r3
90003f78:	6878      	ldr	r0, [r7, #4]
90003f7a:	f000 f859 	bl	90004030 <HCD_HC_IN_IRQHandler>
90003f7e:	e005      	b.n	90003f8c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90003f80:	697b      	ldr	r3, [r7, #20]
90003f82:	b2db      	uxtb	r3, r3
90003f84:	4619      	mov	r1, r3
90003f86:	6878      	ldr	r0, [r7, #4]
90003f88:	f000 febb 	bl	90004d02 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003f8c:	697b      	ldr	r3, [r7, #20]
90003f8e:	3301      	adds	r3, #1
90003f90:	617b      	str	r3, [r7, #20]
90003f92:	687b      	ldr	r3, [r7, #4]
90003f94:	795b      	ldrb	r3, [r3, #5]
90003f96:	461a      	mov	r2, r3
90003f98:	697b      	ldr	r3, [r7, #20]
90003f9a:	4293      	cmp	r3, r2
90003f9c:	d3d3      	bcc.n	90003f46 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90003f9e:	687b      	ldr	r3, [r7, #4]
90003fa0:	681b      	ldr	r3, [r3, #0]
90003fa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90003fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90003fa8:	687b      	ldr	r3, [r7, #4]
90003faa:	681b      	ldr	r3, [r3, #0]
90003fac:	4618      	mov	r0, r3
90003fae:	f007 f891 	bl	9000b0d4 <USB_ReadInterrupts>
90003fb2:	4603      	mov	r3, r0
90003fb4:	f003 0310 	and.w	r3, r3, #16
90003fb8:	2b10      	cmp	r3, #16
90003fba:	d101      	bne.n	90003fc0 <HAL_HCD_IRQHandler+0x1ea>
90003fbc:	2301      	movs	r3, #1
90003fbe:	e000      	b.n	90003fc2 <HAL_HCD_IRQHandler+0x1ec>
90003fc0:	2300      	movs	r3, #0
90003fc2:	2b00      	cmp	r3, #0
90003fc4:	d014      	beq.n	90003ff0 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003fc6:	687b      	ldr	r3, [r7, #4]
90003fc8:	681b      	ldr	r3, [r3, #0]
90003fca:	699a      	ldr	r2, [r3, #24]
90003fcc:	687b      	ldr	r3, [r7, #4]
90003fce:	681b      	ldr	r3, [r3, #0]
90003fd0:	f022 0210 	bic.w	r2, r2, #16
90003fd4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90003fd6:	6878      	ldr	r0, [r7, #4]
90003fd8:	f001 fb52 	bl	90005680 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003fdc:	687b      	ldr	r3, [r7, #4]
90003fde:	681b      	ldr	r3, [r3, #0]
90003fe0:	699a      	ldr	r2, [r3, #24]
90003fe2:	687b      	ldr	r3, [r7, #4]
90003fe4:	681b      	ldr	r3, [r3, #0]
90003fe6:	f042 0210 	orr.w	r2, r2, #16
90003fea:	619a      	str	r2, [r3, #24]
90003fec:	e000      	b.n	90003ff0 <HAL_HCD_IRQHandler+0x21a>
      return;
90003fee:	bf00      	nop
    }
  }
}
90003ff0:	3718      	adds	r7, #24
90003ff2:	46bd      	mov	sp, r7
90003ff4:	bd80      	pop	{r7, pc}

90003ff6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90003ff6:	b580      	push	{r7, lr}
90003ff8:	b082      	sub	sp, #8
90003ffa:	af00      	add	r7, sp, #0
90003ffc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90003ffe:	687b      	ldr	r3, [r7, #4]
90004000:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004004:	2b01      	cmp	r3, #1
90004006:	d101      	bne.n	9000400c <HAL_HCD_Stop+0x16>
90004008:	2302      	movs	r3, #2
9000400a:	e00d      	b.n	90004028 <HAL_HCD_Stop+0x32>
9000400c:	687b      	ldr	r3, [r7, #4]
9000400e:	2201      	movs	r2, #1
90004010:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004014:	687b      	ldr	r3, [r7, #4]
90004016:	681b      	ldr	r3, [r3, #0]
90004018:	4618      	mov	r0, r3
9000401a:	f007 fa0b 	bl	9000b434 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
9000401e:	687b      	ldr	r3, [r7, #4]
90004020:	2200      	movs	r2, #0
90004022:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
90004026:	2300      	movs	r3, #0
}
90004028:	4618      	mov	r0, r3
9000402a:	3708      	adds	r7, #8
9000402c:	46bd      	mov	sp, r7
9000402e:	bd80      	pop	{r7, pc}

90004030 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004030:	b580      	push	{r7, lr}
90004032:	b086      	sub	sp, #24
90004034:	af00      	add	r7, sp, #0
90004036:	6078      	str	r0, [r7, #4]
90004038:	460b      	mov	r3, r1
9000403a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000403c:	687b      	ldr	r3, [r7, #4]
9000403e:	681b      	ldr	r3, [r3, #0]
90004040:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004042:	697b      	ldr	r3, [r7, #20]
90004044:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004046:	687b      	ldr	r3, [r7, #4]
90004048:	681b      	ldr	r3, [r3, #0]
9000404a:	78fa      	ldrb	r2, [r7, #3]
9000404c:	4611      	mov	r1, r2
9000404e:	4618      	mov	r0, r3
90004050:	f007 f853 	bl	9000b0fa <USB_ReadChInterrupts>
90004054:	4603      	mov	r3, r0
90004056:	f003 0304 	and.w	r3, r3, #4
9000405a:	2b04      	cmp	r3, #4
9000405c:	d11a      	bne.n	90004094 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
9000405e:	78fb      	ldrb	r3, [r7, #3]
90004060:	015a      	lsls	r2, r3, #5
90004062:	693b      	ldr	r3, [r7, #16]
90004064:	4413      	add	r3, r2
90004066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000406a:	461a      	mov	r2, r3
9000406c:	2304      	movs	r3, #4
9000406e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004070:	78fa      	ldrb	r2, [r7, #3]
90004072:	6879      	ldr	r1, [r7, #4]
90004074:	4613      	mov	r3, r2
90004076:	011b      	lsls	r3, r3, #4
90004078:	1a9b      	subs	r3, r3, r2
9000407a:	009b      	lsls	r3, r3, #2
9000407c:	440b      	add	r3, r1
9000407e:	334d      	adds	r3, #77	@ 0x4d
90004080:	2207      	movs	r2, #7
90004082:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004084:	687b      	ldr	r3, [r7, #4]
90004086:	681b      	ldr	r3, [r3, #0]
90004088:	78fa      	ldrb	r2, [r7, #3]
9000408a:	4611      	mov	r1, r2
9000408c:	4618      	mov	r0, r3
9000408e:	f007 f8b1 	bl	9000b1f4 <USB_HC_Halt>
90004092:	e09e      	b.n	900041d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90004094:	687b      	ldr	r3, [r7, #4]
90004096:	681b      	ldr	r3, [r3, #0]
90004098:	78fa      	ldrb	r2, [r7, #3]
9000409a:	4611      	mov	r1, r2
9000409c:	4618      	mov	r0, r3
9000409e:	f007 f82c 	bl	9000b0fa <USB_ReadChInterrupts>
900040a2:	4603      	mov	r3, r0
900040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900040a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900040ac:	d11b      	bne.n	900040e6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
900040ae:	78fb      	ldrb	r3, [r7, #3]
900040b0:	015a      	lsls	r2, r3, #5
900040b2:	693b      	ldr	r3, [r7, #16]
900040b4:	4413      	add	r3, r2
900040b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900040ba:	461a      	mov	r2, r3
900040bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
900040c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900040c2:	78fa      	ldrb	r2, [r7, #3]
900040c4:	6879      	ldr	r1, [r7, #4]
900040c6:	4613      	mov	r3, r2
900040c8:	011b      	lsls	r3, r3, #4
900040ca:	1a9b      	subs	r3, r3, r2
900040cc:	009b      	lsls	r3, r3, #2
900040ce:	440b      	add	r3, r1
900040d0:	334d      	adds	r3, #77	@ 0x4d
900040d2:	2208      	movs	r2, #8
900040d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900040d6:	687b      	ldr	r3, [r7, #4]
900040d8:	681b      	ldr	r3, [r3, #0]
900040da:	78fa      	ldrb	r2, [r7, #3]
900040dc:	4611      	mov	r1, r2
900040de:	4618      	mov	r0, r3
900040e0:	f007 f888 	bl	9000b1f4 <USB_HC_Halt>
900040e4:	e075      	b.n	900041d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900040e6:	687b      	ldr	r3, [r7, #4]
900040e8:	681b      	ldr	r3, [r3, #0]
900040ea:	78fa      	ldrb	r2, [r7, #3]
900040ec:	4611      	mov	r1, r2
900040ee:	4618      	mov	r0, r3
900040f0:	f007 f803 	bl	9000b0fa <USB_ReadChInterrupts>
900040f4:	4603      	mov	r3, r0
900040f6:	f003 0308 	and.w	r3, r3, #8
900040fa:	2b08      	cmp	r3, #8
900040fc:	d11a      	bne.n	90004134 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900040fe:	78fb      	ldrb	r3, [r7, #3]
90004100:	015a      	lsls	r2, r3, #5
90004102:	693b      	ldr	r3, [r7, #16]
90004104:	4413      	add	r3, r2
90004106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000410a:	461a      	mov	r2, r3
9000410c:	2308      	movs	r3, #8
9000410e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004110:	78fa      	ldrb	r2, [r7, #3]
90004112:	6879      	ldr	r1, [r7, #4]
90004114:	4613      	mov	r3, r2
90004116:	011b      	lsls	r3, r3, #4
90004118:	1a9b      	subs	r3, r3, r2
9000411a:	009b      	lsls	r3, r3, #2
9000411c:	440b      	add	r3, r1
9000411e:	334d      	adds	r3, #77	@ 0x4d
90004120:	2206      	movs	r2, #6
90004122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004124:	687b      	ldr	r3, [r7, #4]
90004126:	681b      	ldr	r3, [r3, #0]
90004128:	78fa      	ldrb	r2, [r7, #3]
9000412a:	4611      	mov	r1, r2
9000412c:	4618      	mov	r0, r3
9000412e:	f007 f861 	bl	9000b1f4 <USB_HC_Halt>
90004132:	e04e      	b.n	900041d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004134:	687b      	ldr	r3, [r7, #4]
90004136:	681b      	ldr	r3, [r3, #0]
90004138:	78fa      	ldrb	r2, [r7, #3]
9000413a:	4611      	mov	r1, r2
9000413c:	4618      	mov	r0, r3
9000413e:	f006 ffdc 	bl	9000b0fa <USB_ReadChInterrupts>
90004142:	4603      	mov	r3, r0
90004144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000414c:	d11b      	bne.n	90004186 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
9000414e:	78fb      	ldrb	r3, [r7, #3]
90004150:	015a      	lsls	r2, r3, #5
90004152:	693b      	ldr	r3, [r7, #16]
90004154:	4413      	add	r3, r2
90004156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000415a:	461a      	mov	r2, r3
9000415c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90004160:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90004162:	78fa      	ldrb	r2, [r7, #3]
90004164:	6879      	ldr	r1, [r7, #4]
90004166:	4613      	mov	r3, r2
90004168:	011b      	lsls	r3, r3, #4
9000416a:	1a9b      	subs	r3, r3, r2
9000416c:	009b      	lsls	r3, r3, #2
9000416e:	440b      	add	r3, r1
90004170:	334d      	adds	r3, #77	@ 0x4d
90004172:	2209      	movs	r2, #9
90004174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004176:	687b      	ldr	r3, [r7, #4]
90004178:	681b      	ldr	r3, [r3, #0]
9000417a:	78fa      	ldrb	r2, [r7, #3]
9000417c:	4611      	mov	r1, r2
9000417e:	4618      	mov	r0, r3
90004180:	f007 f838 	bl	9000b1f4 <USB_HC_Halt>
90004184:	e025      	b.n	900041d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004186:	687b      	ldr	r3, [r7, #4]
90004188:	681b      	ldr	r3, [r3, #0]
9000418a:	78fa      	ldrb	r2, [r7, #3]
9000418c:	4611      	mov	r1, r2
9000418e:	4618      	mov	r0, r3
90004190:	f006 ffb3 	bl	9000b0fa <USB_ReadChInterrupts>
90004194:	4603      	mov	r3, r0
90004196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000419a:	2b80      	cmp	r3, #128	@ 0x80
9000419c:	d119      	bne.n	900041d2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000419e:	78fb      	ldrb	r3, [r7, #3]
900041a0:	015a      	lsls	r2, r3, #5
900041a2:	693b      	ldr	r3, [r7, #16]
900041a4:	4413      	add	r3, r2
900041a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900041aa:	461a      	mov	r2, r3
900041ac:	2380      	movs	r3, #128	@ 0x80
900041ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900041b0:	78fa      	ldrb	r2, [r7, #3]
900041b2:	6879      	ldr	r1, [r7, #4]
900041b4:	4613      	mov	r3, r2
900041b6:	011b      	lsls	r3, r3, #4
900041b8:	1a9b      	subs	r3, r3, r2
900041ba:	009b      	lsls	r3, r3, #2
900041bc:	440b      	add	r3, r1
900041be:	334d      	adds	r3, #77	@ 0x4d
900041c0:	2207      	movs	r2, #7
900041c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041c4:	687b      	ldr	r3, [r7, #4]
900041c6:	681b      	ldr	r3, [r3, #0]
900041c8:	78fa      	ldrb	r2, [r7, #3]
900041ca:	4611      	mov	r1, r2
900041cc:	4618      	mov	r0, r3
900041ce:	f007 f811 	bl	9000b1f4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900041d2:	687b      	ldr	r3, [r7, #4]
900041d4:	681b      	ldr	r3, [r3, #0]
900041d6:	78fa      	ldrb	r2, [r7, #3]
900041d8:	4611      	mov	r1, r2
900041da:	4618      	mov	r0, r3
900041dc:	f006 ff8d 	bl	9000b0fa <USB_ReadChInterrupts>
900041e0:	4603      	mov	r3, r0
900041e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900041e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900041ea:	d112      	bne.n	90004212 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041ec:	687b      	ldr	r3, [r7, #4]
900041ee:	681b      	ldr	r3, [r3, #0]
900041f0:	78fa      	ldrb	r2, [r7, #3]
900041f2:	4611      	mov	r1, r2
900041f4:	4618      	mov	r0, r3
900041f6:	f006 fffd 	bl	9000b1f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900041fa:	78fb      	ldrb	r3, [r7, #3]
900041fc:	015a      	lsls	r2, r3, #5
900041fe:	693b      	ldr	r3, [r7, #16]
90004200:	4413      	add	r3, r2
90004202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004206:	461a      	mov	r2, r3
90004208:	f44f 7300 	mov.w	r3, #512	@ 0x200
9000420c:	6093      	str	r3, [r2, #8]
9000420e:	f000 bd75 	b.w	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004212:	687b      	ldr	r3, [r7, #4]
90004214:	681b      	ldr	r3, [r3, #0]
90004216:	78fa      	ldrb	r2, [r7, #3]
90004218:	4611      	mov	r1, r2
9000421a:	4618      	mov	r0, r3
9000421c:	f006 ff6d 	bl	9000b0fa <USB_ReadChInterrupts>
90004220:	4603      	mov	r3, r0
90004222:	f003 0301 	and.w	r3, r3, #1
90004226:	2b01      	cmp	r3, #1
90004228:	f040 8128 	bne.w	9000447c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
9000422c:	78fb      	ldrb	r3, [r7, #3]
9000422e:	015a      	lsls	r2, r3, #5
90004230:	693b      	ldr	r3, [r7, #16]
90004232:	4413      	add	r3, r2
90004234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004238:	461a      	mov	r2, r3
9000423a:	2320      	movs	r3, #32
9000423c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
9000423e:	78fa      	ldrb	r2, [r7, #3]
90004240:	6879      	ldr	r1, [r7, #4]
90004242:	4613      	mov	r3, r2
90004244:	011b      	lsls	r3, r3, #4
90004246:	1a9b      	subs	r3, r3, r2
90004248:	009b      	lsls	r3, r3, #2
9000424a:	440b      	add	r3, r1
9000424c:	331b      	adds	r3, #27
9000424e:	781b      	ldrb	r3, [r3, #0]
90004250:	2b01      	cmp	r3, #1
90004252:	d119      	bne.n	90004288 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004254:	78fa      	ldrb	r2, [r7, #3]
90004256:	6879      	ldr	r1, [r7, #4]
90004258:	4613      	mov	r3, r2
9000425a:	011b      	lsls	r3, r3, #4
9000425c:	1a9b      	subs	r3, r3, r2
9000425e:	009b      	lsls	r3, r3, #2
90004260:	440b      	add	r3, r1
90004262:	331b      	adds	r3, #27
90004264:	2200      	movs	r2, #0
90004266:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004268:	78fb      	ldrb	r3, [r7, #3]
9000426a:	015a      	lsls	r2, r3, #5
9000426c:	693b      	ldr	r3, [r7, #16]
9000426e:	4413      	add	r3, r2
90004270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004274:	685b      	ldr	r3, [r3, #4]
90004276:	78fa      	ldrb	r2, [r7, #3]
90004278:	0151      	lsls	r1, r2, #5
9000427a:	693a      	ldr	r2, [r7, #16]
9000427c:	440a      	add	r2, r1
9000427e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004286:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90004288:	687b      	ldr	r3, [r7, #4]
9000428a:	799b      	ldrb	r3, [r3, #6]
9000428c:	2b00      	cmp	r3, #0
9000428e:	d01b      	beq.n	900042c8 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004290:	78fa      	ldrb	r2, [r7, #3]
90004292:	6879      	ldr	r1, [r7, #4]
90004294:	4613      	mov	r3, r2
90004296:	011b      	lsls	r3, r3, #4
90004298:	1a9b      	subs	r3, r3, r2
9000429a:	009b      	lsls	r3, r3, #2
9000429c:	440b      	add	r3, r1
9000429e:	3330      	adds	r3, #48	@ 0x30
900042a0:	6819      	ldr	r1, [r3, #0]
900042a2:	78fb      	ldrb	r3, [r7, #3]
900042a4:	015a      	lsls	r2, r3, #5
900042a6:	693b      	ldr	r3, [r7, #16]
900042a8:	4413      	add	r3, r2
900042aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042ae:	691b      	ldr	r3, [r3, #16]
900042b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
900042b4:	78fa      	ldrb	r2, [r7, #3]
900042b6:	1ac9      	subs	r1, r1, r3
900042b8:	6878      	ldr	r0, [r7, #4]
900042ba:	4613      	mov	r3, r2
900042bc:	011b      	lsls	r3, r3, #4
900042be:	1a9b      	subs	r3, r3, r2
900042c0:	009b      	lsls	r3, r3, #2
900042c2:	4403      	add	r3, r0
900042c4:	3338      	adds	r3, #56	@ 0x38
900042c6:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
900042c8:	78fa      	ldrb	r2, [r7, #3]
900042ca:	6879      	ldr	r1, [r7, #4]
900042cc:	4613      	mov	r3, r2
900042ce:	011b      	lsls	r3, r3, #4
900042d0:	1a9b      	subs	r3, r3, r2
900042d2:	009b      	lsls	r3, r3, #2
900042d4:	440b      	add	r3, r1
900042d6:	334d      	adds	r3, #77	@ 0x4d
900042d8:	2201      	movs	r2, #1
900042da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
900042dc:	78fa      	ldrb	r2, [r7, #3]
900042de:	6879      	ldr	r1, [r7, #4]
900042e0:	4613      	mov	r3, r2
900042e2:	011b      	lsls	r3, r3, #4
900042e4:	1a9b      	subs	r3, r3, r2
900042e6:	009b      	lsls	r3, r3, #2
900042e8:	440b      	add	r3, r1
900042ea:	3344      	adds	r3, #68	@ 0x44
900042ec:	2200      	movs	r2, #0
900042ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900042f0:	78fb      	ldrb	r3, [r7, #3]
900042f2:	015a      	lsls	r2, r3, #5
900042f4:	693b      	ldr	r3, [r7, #16]
900042f6:	4413      	add	r3, r2
900042f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042fc:	461a      	mov	r2, r3
900042fe:	2301      	movs	r3, #1
90004300:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004302:	78fa      	ldrb	r2, [r7, #3]
90004304:	6879      	ldr	r1, [r7, #4]
90004306:	4613      	mov	r3, r2
90004308:	011b      	lsls	r3, r3, #4
9000430a:	1a9b      	subs	r3, r3, r2
9000430c:	009b      	lsls	r3, r3, #2
9000430e:	440b      	add	r3, r1
90004310:	3326      	adds	r3, #38	@ 0x26
90004312:	781b      	ldrb	r3, [r3, #0]
90004314:	2b00      	cmp	r3, #0
90004316:	d00a      	beq.n	9000432e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004318:	78fa      	ldrb	r2, [r7, #3]
9000431a:	6879      	ldr	r1, [r7, #4]
9000431c:	4613      	mov	r3, r2
9000431e:	011b      	lsls	r3, r3, #4
90004320:	1a9b      	subs	r3, r3, r2
90004322:	009b      	lsls	r3, r3, #2
90004324:	440b      	add	r3, r1
90004326:	3326      	adds	r3, #38	@ 0x26
90004328:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000432a:	2b02      	cmp	r3, #2
9000432c:	d110      	bne.n	90004350 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000432e:	687b      	ldr	r3, [r7, #4]
90004330:	681b      	ldr	r3, [r3, #0]
90004332:	78fa      	ldrb	r2, [r7, #3]
90004334:	4611      	mov	r1, r2
90004336:	4618      	mov	r0, r3
90004338:	f006 ff5c 	bl	9000b1f4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000433c:	78fb      	ldrb	r3, [r7, #3]
9000433e:	015a      	lsls	r2, r3, #5
90004340:	693b      	ldr	r3, [r7, #16]
90004342:	4413      	add	r3, r2
90004344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004348:	461a      	mov	r2, r3
9000434a:	2310      	movs	r3, #16
9000434c:	6093      	str	r3, [r2, #8]
9000434e:	e03d      	b.n	900043cc <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004350:	78fa      	ldrb	r2, [r7, #3]
90004352:	6879      	ldr	r1, [r7, #4]
90004354:	4613      	mov	r3, r2
90004356:	011b      	lsls	r3, r3, #4
90004358:	1a9b      	subs	r3, r3, r2
9000435a:	009b      	lsls	r3, r3, #2
9000435c:	440b      	add	r3, r1
9000435e:	3326      	adds	r3, #38	@ 0x26
90004360:	781b      	ldrb	r3, [r3, #0]
90004362:	2b03      	cmp	r3, #3
90004364:	d00a      	beq.n	9000437c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
90004366:	78fa      	ldrb	r2, [r7, #3]
90004368:	6879      	ldr	r1, [r7, #4]
9000436a:	4613      	mov	r3, r2
9000436c:	011b      	lsls	r3, r3, #4
9000436e:	1a9b      	subs	r3, r3, r2
90004370:	009b      	lsls	r3, r3, #2
90004372:	440b      	add	r3, r1
90004374:	3326      	adds	r3, #38	@ 0x26
90004376:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004378:	2b01      	cmp	r3, #1
9000437a:	d127      	bne.n	900043cc <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
9000437c:	78fb      	ldrb	r3, [r7, #3]
9000437e:	015a      	lsls	r2, r3, #5
90004380:	693b      	ldr	r3, [r7, #16]
90004382:	4413      	add	r3, r2
90004384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004388:	681b      	ldr	r3, [r3, #0]
9000438a:	78fa      	ldrb	r2, [r7, #3]
9000438c:	0151      	lsls	r1, r2, #5
9000438e:	693a      	ldr	r2, [r7, #16]
90004390:	440a      	add	r2, r1
90004392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004396:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
9000439a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000439c:	78fa      	ldrb	r2, [r7, #3]
9000439e:	6879      	ldr	r1, [r7, #4]
900043a0:	4613      	mov	r3, r2
900043a2:	011b      	lsls	r3, r3, #4
900043a4:	1a9b      	subs	r3, r3, r2
900043a6:	009b      	lsls	r3, r3, #2
900043a8:	440b      	add	r3, r1
900043aa:	334c      	adds	r3, #76	@ 0x4c
900043ac:	2201      	movs	r2, #1
900043ae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900043b0:	78fa      	ldrb	r2, [r7, #3]
900043b2:	6879      	ldr	r1, [r7, #4]
900043b4:	4613      	mov	r3, r2
900043b6:	011b      	lsls	r3, r3, #4
900043b8:	1a9b      	subs	r3, r3, r2
900043ba:	009b      	lsls	r3, r3, #2
900043bc:	440b      	add	r3, r1
900043be:	334c      	adds	r3, #76	@ 0x4c
900043c0:	781a      	ldrb	r2, [r3, #0]
900043c2:	78fb      	ldrb	r3, [r7, #3]
900043c4:	4619      	mov	r1, r3
900043c6:	6878      	ldr	r0, [r7, #4]
900043c8:	f7fc ff20 	bl	9000120c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
900043cc:	687b      	ldr	r3, [r7, #4]
900043ce:	799b      	ldrb	r3, [r3, #6]
900043d0:	2b01      	cmp	r3, #1
900043d2:	d13b      	bne.n	9000444c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900043d4:	78fa      	ldrb	r2, [r7, #3]
900043d6:	6879      	ldr	r1, [r7, #4]
900043d8:	4613      	mov	r3, r2
900043da:	011b      	lsls	r3, r3, #4
900043dc:	1a9b      	subs	r3, r3, r2
900043de:	009b      	lsls	r3, r3, #2
900043e0:	440b      	add	r3, r1
900043e2:	3338      	adds	r3, #56	@ 0x38
900043e4:	6819      	ldr	r1, [r3, #0]
900043e6:	78fa      	ldrb	r2, [r7, #3]
900043e8:	6878      	ldr	r0, [r7, #4]
900043ea:	4613      	mov	r3, r2
900043ec:	011b      	lsls	r3, r3, #4
900043ee:	1a9b      	subs	r3, r3, r2
900043f0:	009b      	lsls	r3, r3, #2
900043f2:	4403      	add	r3, r0
900043f4:	3328      	adds	r3, #40	@ 0x28
900043f6:	881b      	ldrh	r3, [r3, #0]
900043f8:	440b      	add	r3, r1
900043fa:	1e59      	subs	r1, r3, #1
900043fc:	78fa      	ldrb	r2, [r7, #3]
900043fe:	6878      	ldr	r0, [r7, #4]
90004400:	4613      	mov	r3, r2
90004402:	011b      	lsls	r3, r3, #4
90004404:	1a9b      	subs	r3, r3, r2
90004406:	009b      	lsls	r3, r3, #2
90004408:	4403      	add	r3, r0
9000440a:	3328      	adds	r3, #40	@ 0x28
9000440c:	881b      	ldrh	r3, [r3, #0]
9000440e:	fbb1 f3f3 	udiv	r3, r1, r3
90004412:	f003 0301 	and.w	r3, r3, #1
90004416:	2b00      	cmp	r3, #0
90004418:	f000 8470 	beq.w	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
9000441c:	78fa      	ldrb	r2, [r7, #3]
9000441e:	6879      	ldr	r1, [r7, #4]
90004420:	4613      	mov	r3, r2
90004422:	011b      	lsls	r3, r3, #4
90004424:	1a9b      	subs	r3, r3, r2
90004426:	009b      	lsls	r3, r3, #2
90004428:	440b      	add	r3, r1
9000442a:	333c      	adds	r3, #60	@ 0x3c
9000442c:	781b      	ldrb	r3, [r3, #0]
9000442e:	78fa      	ldrb	r2, [r7, #3]
90004430:	f083 0301 	eor.w	r3, r3, #1
90004434:	b2d8      	uxtb	r0, r3
90004436:	6879      	ldr	r1, [r7, #4]
90004438:	4613      	mov	r3, r2
9000443a:	011b      	lsls	r3, r3, #4
9000443c:	1a9b      	subs	r3, r3, r2
9000443e:	009b      	lsls	r3, r3, #2
90004440:	440b      	add	r3, r1
90004442:	333c      	adds	r3, #60	@ 0x3c
90004444:	4602      	mov	r2, r0
90004446:	701a      	strb	r2, [r3, #0]
90004448:	f000 bc58 	b.w	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
9000444c:	78fa      	ldrb	r2, [r7, #3]
9000444e:	6879      	ldr	r1, [r7, #4]
90004450:	4613      	mov	r3, r2
90004452:	011b      	lsls	r3, r3, #4
90004454:	1a9b      	subs	r3, r3, r2
90004456:	009b      	lsls	r3, r3, #2
90004458:	440b      	add	r3, r1
9000445a:	333c      	adds	r3, #60	@ 0x3c
9000445c:	781b      	ldrb	r3, [r3, #0]
9000445e:	78fa      	ldrb	r2, [r7, #3]
90004460:	f083 0301 	eor.w	r3, r3, #1
90004464:	b2d8      	uxtb	r0, r3
90004466:	6879      	ldr	r1, [r7, #4]
90004468:	4613      	mov	r3, r2
9000446a:	011b      	lsls	r3, r3, #4
9000446c:	1a9b      	subs	r3, r3, r2
9000446e:	009b      	lsls	r3, r3, #2
90004470:	440b      	add	r3, r1
90004472:	333c      	adds	r3, #60	@ 0x3c
90004474:	4602      	mov	r2, r0
90004476:	701a      	strb	r2, [r3, #0]
90004478:	f000 bc40 	b.w	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
9000447c:	687b      	ldr	r3, [r7, #4]
9000447e:	681b      	ldr	r3, [r3, #0]
90004480:	78fa      	ldrb	r2, [r7, #3]
90004482:	4611      	mov	r1, r2
90004484:	4618      	mov	r0, r3
90004486:	f006 fe38 	bl	9000b0fa <USB_ReadChInterrupts>
9000448a:	4603      	mov	r3, r0
9000448c:	f003 0320 	and.w	r3, r3, #32
90004490:	2b20      	cmp	r3, #32
90004492:	d131      	bne.n	900044f8 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004494:	78fb      	ldrb	r3, [r7, #3]
90004496:	015a      	lsls	r2, r3, #5
90004498:	693b      	ldr	r3, [r7, #16]
9000449a:	4413      	add	r3, r2
9000449c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044a0:	461a      	mov	r2, r3
900044a2:	2320      	movs	r3, #32
900044a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
900044a6:	78fa      	ldrb	r2, [r7, #3]
900044a8:	6879      	ldr	r1, [r7, #4]
900044aa:	4613      	mov	r3, r2
900044ac:	011b      	lsls	r3, r3, #4
900044ae:	1a9b      	subs	r3, r3, r2
900044b0:	009b      	lsls	r3, r3, #2
900044b2:	440b      	add	r3, r1
900044b4:	331a      	adds	r3, #26
900044b6:	781b      	ldrb	r3, [r3, #0]
900044b8:	2b01      	cmp	r3, #1
900044ba:	f040 841f 	bne.w	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900044be:	78fa      	ldrb	r2, [r7, #3]
900044c0:	6879      	ldr	r1, [r7, #4]
900044c2:	4613      	mov	r3, r2
900044c4:	011b      	lsls	r3, r3, #4
900044c6:	1a9b      	subs	r3, r3, r2
900044c8:	009b      	lsls	r3, r3, #2
900044ca:	440b      	add	r3, r1
900044cc:	331b      	adds	r3, #27
900044ce:	2201      	movs	r2, #1
900044d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900044d2:	78fa      	ldrb	r2, [r7, #3]
900044d4:	6879      	ldr	r1, [r7, #4]
900044d6:	4613      	mov	r3, r2
900044d8:	011b      	lsls	r3, r3, #4
900044da:	1a9b      	subs	r3, r3, r2
900044dc:	009b      	lsls	r3, r3, #2
900044de:	440b      	add	r3, r1
900044e0:	334d      	adds	r3, #77	@ 0x4d
900044e2:	2203      	movs	r2, #3
900044e4:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
900044e6:	687b      	ldr	r3, [r7, #4]
900044e8:	681b      	ldr	r3, [r3, #0]
900044ea:	78fa      	ldrb	r2, [r7, #3]
900044ec:	4611      	mov	r1, r2
900044ee:	4618      	mov	r0, r3
900044f0:	f006 fe80 	bl	9000b1f4 <USB_HC_Halt>
900044f4:	f000 bc02 	b.w	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900044f8:	687b      	ldr	r3, [r7, #4]
900044fa:	681b      	ldr	r3, [r3, #0]
900044fc:	78fa      	ldrb	r2, [r7, #3]
900044fe:	4611      	mov	r1, r2
90004500:	4618      	mov	r0, r3
90004502:	f006 fdfa 	bl	9000b0fa <USB_ReadChInterrupts>
90004506:	4603      	mov	r3, r0
90004508:	f003 0302 	and.w	r3, r3, #2
9000450c:	2b02      	cmp	r3, #2
9000450e:	f040 8305 	bne.w	90004b1c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90004512:	78fb      	ldrb	r3, [r7, #3]
90004514:	015a      	lsls	r2, r3, #5
90004516:	693b      	ldr	r3, [r7, #16]
90004518:	4413      	add	r3, r2
9000451a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000451e:	461a      	mov	r2, r3
90004520:	2302      	movs	r3, #2
90004522:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004524:	78fa      	ldrb	r2, [r7, #3]
90004526:	6879      	ldr	r1, [r7, #4]
90004528:	4613      	mov	r3, r2
9000452a:	011b      	lsls	r3, r3, #4
9000452c:	1a9b      	subs	r3, r3, r2
9000452e:	009b      	lsls	r3, r3, #2
90004530:	440b      	add	r3, r1
90004532:	334d      	adds	r3, #77	@ 0x4d
90004534:	781b      	ldrb	r3, [r3, #0]
90004536:	2b01      	cmp	r3, #1
90004538:	d114      	bne.n	90004564 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000453a:	78fa      	ldrb	r2, [r7, #3]
9000453c:	6879      	ldr	r1, [r7, #4]
9000453e:	4613      	mov	r3, r2
90004540:	011b      	lsls	r3, r3, #4
90004542:	1a9b      	subs	r3, r3, r2
90004544:	009b      	lsls	r3, r3, #2
90004546:	440b      	add	r3, r1
90004548:	334d      	adds	r3, #77	@ 0x4d
9000454a:	2202      	movs	r2, #2
9000454c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000454e:	78fa      	ldrb	r2, [r7, #3]
90004550:	6879      	ldr	r1, [r7, #4]
90004552:	4613      	mov	r3, r2
90004554:	011b      	lsls	r3, r3, #4
90004556:	1a9b      	subs	r3, r3, r2
90004558:	009b      	lsls	r3, r3, #2
9000455a:	440b      	add	r3, r1
9000455c:	334c      	adds	r3, #76	@ 0x4c
9000455e:	2201      	movs	r2, #1
90004560:	701a      	strb	r2, [r3, #0]
90004562:	e2cc      	b.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90004564:	78fa      	ldrb	r2, [r7, #3]
90004566:	6879      	ldr	r1, [r7, #4]
90004568:	4613      	mov	r3, r2
9000456a:	011b      	lsls	r3, r3, #4
9000456c:	1a9b      	subs	r3, r3, r2
9000456e:	009b      	lsls	r3, r3, #2
90004570:	440b      	add	r3, r1
90004572:	334d      	adds	r3, #77	@ 0x4d
90004574:	781b      	ldrb	r3, [r3, #0]
90004576:	2b06      	cmp	r3, #6
90004578:	d114      	bne.n	900045a4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000457a:	78fa      	ldrb	r2, [r7, #3]
9000457c:	6879      	ldr	r1, [r7, #4]
9000457e:	4613      	mov	r3, r2
90004580:	011b      	lsls	r3, r3, #4
90004582:	1a9b      	subs	r3, r3, r2
90004584:	009b      	lsls	r3, r3, #2
90004586:	440b      	add	r3, r1
90004588:	334d      	adds	r3, #77	@ 0x4d
9000458a:	2202      	movs	r2, #2
9000458c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
9000458e:	78fa      	ldrb	r2, [r7, #3]
90004590:	6879      	ldr	r1, [r7, #4]
90004592:	4613      	mov	r3, r2
90004594:	011b      	lsls	r3, r3, #4
90004596:	1a9b      	subs	r3, r3, r2
90004598:	009b      	lsls	r3, r3, #2
9000459a:	440b      	add	r3, r1
9000459c:	334c      	adds	r3, #76	@ 0x4c
9000459e:	2205      	movs	r2, #5
900045a0:	701a      	strb	r2, [r3, #0]
900045a2:	e2ac      	b.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900045a4:	78fa      	ldrb	r2, [r7, #3]
900045a6:	6879      	ldr	r1, [r7, #4]
900045a8:	4613      	mov	r3, r2
900045aa:	011b      	lsls	r3, r3, #4
900045ac:	1a9b      	subs	r3, r3, r2
900045ae:	009b      	lsls	r3, r3, #2
900045b0:	440b      	add	r3, r1
900045b2:	334d      	adds	r3, #77	@ 0x4d
900045b4:	781b      	ldrb	r3, [r3, #0]
900045b6:	2b07      	cmp	r3, #7
900045b8:	d00b      	beq.n	900045d2 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900045ba:	78fa      	ldrb	r2, [r7, #3]
900045bc:	6879      	ldr	r1, [r7, #4]
900045be:	4613      	mov	r3, r2
900045c0:	011b      	lsls	r3, r3, #4
900045c2:	1a9b      	subs	r3, r3, r2
900045c4:	009b      	lsls	r3, r3, #2
900045c6:	440b      	add	r3, r1
900045c8:	334d      	adds	r3, #77	@ 0x4d
900045ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900045cc:	2b09      	cmp	r3, #9
900045ce:	f040 80a6 	bne.w	9000471e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900045d2:	78fa      	ldrb	r2, [r7, #3]
900045d4:	6879      	ldr	r1, [r7, #4]
900045d6:	4613      	mov	r3, r2
900045d8:	011b      	lsls	r3, r3, #4
900045da:	1a9b      	subs	r3, r3, r2
900045dc:	009b      	lsls	r3, r3, #2
900045de:	440b      	add	r3, r1
900045e0:	334d      	adds	r3, #77	@ 0x4d
900045e2:	2202      	movs	r2, #2
900045e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900045e6:	78fa      	ldrb	r2, [r7, #3]
900045e8:	6879      	ldr	r1, [r7, #4]
900045ea:	4613      	mov	r3, r2
900045ec:	011b      	lsls	r3, r3, #4
900045ee:	1a9b      	subs	r3, r3, r2
900045f0:	009b      	lsls	r3, r3, #2
900045f2:	440b      	add	r3, r1
900045f4:	3344      	adds	r3, #68	@ 0x44
900045f6:	681b      	ldr	r3, [r3, #0]
900045f8:	1c59      	adds	r1, r3, #1
900045fa:	6878      	ldr	r0, [r7, #4]
900045fc:	4613      	mov	r3, r2
900045fe:	011b      	lsls	r3, r3, #4
90004600:	1a9b      	subs	r3, r3, r2
90004602:	009b      	lsls	r3, r3, #2
90004604:	4403      	add	r3, r0
90004606:	3344      	adds	r3, #68	@ 0x44
90004608:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000460a:	78fa      	ldrb	r2, [r7, #3]
9000460c:	6879      	ldr	r1, [r7, #4]
9000460e:	4613      	mov	r3, r2
90004610:	011b      	lsls	r3, r3, #4
90004612:	1a9b      	subs	r3, r3, r2
90004614:	009b      	lsls	r3, r3, #2
90004616:	440b      	add	r3, r1
90004618:	3344      	adds	r3, #68	@ 0x44
9000461a:	681b      	ldr	r3, [r3, #0]
9000461c:	2b02      	cmp	r3, #2
9000461e:	d943      	bls.n	900046a8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004620:	78fa      	ldrb	r2, [r7, #3]
90004622:	6879      	ldr	r1, [r7, #4]
90004624:	4613      	mov	r3, r2
90004626:	011b      	lsls	r3, r3, #4
90004628:	1a9b      	subs	r3, r3, r2
9000462a:	009b      	lsls	r3, r3, #2
9000462c:	440b      	add	r3, r1
9000462e:	3344      	adds	r3, #68	@ 0x44
90004630:	2200      	movs	r2, #0
90004632:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90004634:	78fa      	ldrb	r2, [r7, #3]
90004636:	6879      	ldr	r1, [r7, #4]
90004638:	4613      	mov	r3, r2
9000463a:	011b      	lsls	r3, r3, #4
9000463c:	1a9b      	subs	r3, r3, r2
9000463e:	009b      	lsls	r3, r3, #2
90004640:	440b      	add	r3, r1
90004642:	331a      	adds	r3, #26
90004644:	781b      	ldrb	r3, [r3, #0]
90004646:	2b01      	cmp	r3, #1
90004648:	d123      	bne.n	90004692 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
9000464a:	78fa      	ldrb	r2, [r7, #3]
9000464c:	6879      	ldr	r1, [r7, #4]
9000464e:	4613      	mov	r3, r2
90004650:	011b      	lsls	r3, r3, #4
90004652:	1a9b      	subs	r3, r3, r2
90004654:	009b      	lsls	r3, r3, #2
90004656:	440b      	add	r3, r1
90004658:	331b      	adds	r3, #27
9000465a:	2200      	movs	r2, #0
9000465c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
9000465e:	78fa      	ldrb	r2, [r7, #3]
90004660:	6879      	ldr	r1, [r7, #4]
90004662:	4613      	mov	r3, r2
90004664:	011b      	lsls	r3, r3, #4
90004666:	1a9b      	subs	r3, r3, r2
90004668:	009b      	lsls	r3, r3, #2
9000466a:	440b      	add	r3, r1
9000466c:	331c      	adds	r3, #28
9000466e:	2200      	movs	r2, #0
90004670:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004672:	78fb      	ldrb	r3, [r7, #3]
90004674:	015a      	lsls	r2, r3, #5
90004676:	693b      	ldr	r3, [r7, #16]
90004678:	4413      	add	r3, r2
9000467a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000467e:	685b      	ldr	r3, [r3, #4]
90004680:	78fa      	ldrb	r2, [r7, #3]
90004682:	0151      	lsls	r1, r2, #5
90004684:	693a      	ldr	r2, [r7, #16]
90004686:	440a      	add	r2, r1
90004688:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000468c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004690:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90004692:	78fa      	ldrb	r2, [r7, #3]
90004694:	6879      	ldr	r1, [r7, #4]
90004696:	4613      	mov	r3, r2
90004698:	011b      	lsls	r3, r3, #4
9000469a:	1a9b      	subs	r3, r3, r2
9000469c:	009b      	lsls	r3, r3, #2
9000469e:	440b      	add	r3, r1
900046a0:	334c      	adds	r3, #76	@ 0x4c
900046a2:	2204      	movs	r2, #4
900046a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900046a6:	e229      	b.n	90004afc <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900046a8:	78fa      	ldrb	r2, [r7, #3]
900046aa:	6879      	ldr	r1, [r7, #4]
900046ac:	4613      	mov	r3, r2
900046ae:	011b      	lsls	r3, r3, #4
900046b0:	1a9b      	subs	r3, r3, r2
900046b2:	009b      	lsls	r3, r3, #2
900046b4:	440b      	add	r3, r1
900046b6:	334c      	adds	r3, #76	@ 0x4c
900046b8:	2202      	movs	r2, #2
900046ba:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900046bc:	78fa      	ldrb	r2, [r7, #3]
900046be:	6879      	ldr	r1, [r7, #4]
900046c0:	4613      	mov	r3, r2
900046c2:	011b      	lsls	r3, r3, #4
900046c4:	1a9b      	subs	r3, r3, r2
900046c6:	009b      	lsls	r3, r3, #2
900046c8:	440b      	add	r3, r1
900046ca:	3326      	adds	r3, #38	@ 0x26
900046cc:	781b      	ldrb	r3, [r3, #0]
900046ce:	2b00      	cmp	r3, #0
900046d0:	d00b      	beq.n	900046ea <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900046d2:	78fa      	ldrb	r2, [r7, #3]
900046d4:	6879      	ldr	r1, [r7, #4]
900046d6:	4613      	mov	r3, r2
900046d8:	011b      	lsls	r3, r3, #4
900046da:	1a9b      	subs	r3, r3, r2
900046dc:	009b      	lsls	r3, r3, #2
900046de:	440b      	add	r3, r1
900046e0:	3326      	adds	r3, #38	@ 0x26
900046e2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900046e4:	2b02      	cmp	r3, #2
900046e6:	f040 8209 	bne.w	90004afc <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900046ea:	78fb      	ldrb	r3, [r7, #3]
900046ec:	015a      	lsls	r2, r3, #5
900046ee:	693b      	ldr	r3, [r7, #16]
900046f0:	4413      	add	r3, r2
900046f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046f6:	681b      	ldr	r3, [r3, #0]
900046f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900046fa:	68fb      	ldr	r3, [r7, #12]
900046fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004700:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004702:	68fb      	ldr	r3, [r7, #12]
90004704:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004708:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000470a:	78fb      	ldrb	r3, [r7, #3]
9000470c:	015a      	lsls	r2, r3, #5
9000470e:	693b      	ldr	r3, [r7, #16]
90004710:	4413      	add	r3, r2
90004712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004716:	461a      	mov	r2, r3
90004718:	68fb      	ldr	r3, [r7, #12]
9000471a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000471c:	e1ee      	b.n	90004afc <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000471e:	78fa      	ldrb	r2, [r7, #3]
90004720:	6879      	ldr	r1, [r7, #4]
90004722:	4613      	mov	r3, r2
90004724:	011b      	lsls	r3, r3, #4
90004726:	1a9b      	subs	r3, r3, r2
90004728:	009b      	lsls	r3, r3, #2
9000472a:	440b      	add	r3, r1
9000472c:	334d      	adds	r3, #77	@ 0x4d
9000472e:	781b      	ldrb	r3, [r3, #0]
90004730:	2b05      	cmp	r3, #5
90004732:	f040 80c8 	bne.w	900048c6 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004736:	78fa      	ldrb	r2, [r7, #3]
90004738:	6879      	ldr	r1, [r7, #4]
9000473a:	4613      	mov	r3, r2
9000473c:	011b      	lsls	r3, r3, #4
9000473e:	1a9b      	subs	r3, r3, r2
90004740:	009b      	lsls	r3, r3, #2
90004742:	440b      	add	r3, r1
90004744:	334d      	adds	r3, #77	@ 0x4d
90004746:	2202      	movs	r2, #2
90004748:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000474a:	78fa      	ldrb	r2, [r7, #3]
9000474c:	6879      	ldr	r1, [r7, #4]
9000474e:	4613      	mov	r3, r2
90004750:	011b      	lsls	r3, r3, #4
90004752:	1a9b      	subs	r3, r3, r2
90004754:	009b      	lsls	r3, r3, #2
90004756:	440b      	add	r3, r1
90004758:	331b      	adds	r3, #27
9000475a:	781b      	ldrb	r3, [r3, #0]
9000475c:	2b01      	cmp	r3, #1
9000475e:	f040 81ce 	bne.w	90004afe <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004762:	78fa      	ldrb	r2, [r7, #3]
90004764:	6879      	ldr	r1, [r7, #4]
90004766:	4613      	mov	r3, r2
90004768:	011b      	lsls	r3, r3, #4
9000476a:	1a9b      	subs	r3, r3, r2
9000476c:	009b      	lsls	r3, r3, #2
9000476e:	440b      	add	r3, r1
90004770:	3326      	adds	r3, #38	@ 0x26
90004772:	781b      	ldrb	r3, [r3, #0]
90004774:	2b03      	cmp	r3, #3
90004776:	d16b      	bne.n	90004850 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004778:	78fa      	ldrb	r2, [r7, #3]
9000477a:	6879      	ldr	r1, [r7, #4]
9000477c:	4613      	mov	r3, r2
9000477e:	011b      	lsls	r3, r3, #4
90004780:	1a9b      	subs	r3, r3, r2
90004782:	009b      	lsls	r3, r3, #2
90004784:	440b      	add	r3, r1
90004786:	3348      	adds	r3, #72	@ 0x48
90004788:	681b      	ldr	r3, [r3, #0]
9000478a:	1c59      	adds	r1, r3, #1
9000478c:	6878      	ldr	r0, [r7, #4]
9000478e:	4613      	mov	r3, r2
90004790:	011b      	lsls	r3, r3, #4
90004792:	1a9b      	subs	r3, r3, r2
90004794:	009b      	lsls	r3, r3, #2
90004796:	4403      	add	r3, r0
90004798:	3348      	adds	r3, #72	@ 0x48
9000479a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
9000479c:	78fa      	ldrb	r2, [r7, #3]
9000479e:	6879      	ldr	r1, [r7, #4]
900047a0:	4613      	mov	r3, r2
900047a2:	011b      	lsls	r3, r3, #4
900047a4:	1a9b      	subs	r3, r3, r2
900047a6:	009b      	lsls	r3, r3, #2
900047a8:	440b      	add	r3, r1
900047aa:	3348      	adds	r3, #72	@ 0x48
900047ac:	681b      	ldr	r3, [r3, #0]
900047ae:	2b02      	cmp	r3, #2
900047b0:	d943      	bls.n	9000483a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
900047b2:	78fa      	ldrb	r2, [r7, #3]
900047b4:	6879      	ldr	r1, [r7, #4]
900047b6:	4613      	mov	r3, r2
900047b8:	011b      	lsls	r3, r3, #4
900047ba:	1a9b      	subs	r3, r3, r2
900047bc:	009b      	lsls	r3, r3, #2
900047be:	440b      	add	r3, r1
900047c0:	3348      	adds	r3, #72	@ 0x48
900047c2:	2200      	movs	r2, #0
900047c4:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
900047c6:	78fa      	ldrb	r2, [r7, #3]
900047c8:	6879      	ldr	r1, [r7, #4]
900047ca:	4613      	mov	r3, r2
900047cc:	011b      	lsls	r3, r3, #4
900047ce:	1a9b      	subs	r3, r3, r2
900047d0:	009b      	lsls	r3, r3, #2
900047d2:	440b      	add	r3, r1
900047d4:	331b      	adds	r3, #27
900047d6:	2200      	movs	r2, #0
900047d8:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
900047da:	78fa      	ldrb	r2, [r7, #3]
900047dc:	6879      	ldr	r1, [r7, #4]
900047de:	4613      	mov	r3, r2
900047e0:	011b      	lsls	r3, r3, #4
900047e2:	1a9b      	subs	r3, r3, r2
900047e4:	009b      	lsls	r3, r3, #2
900047e6:	440b      	add	r3, r1
900047e8:	3344      	adds	r3, #68	@ 0x44
900047ea:	681b      	ldr	r3, [r3, #0]
900047ec:	2b02      	cmp	r3, #2
900047ee:	d809      	bhi.n	90004804 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
900047f0:	78fa      	ldrb	r2, [r7, #3]
900047f2:	6879      	ldr	r1, [r7, #4]
900047f4:	4613      	mov	r3, r2
900047f6:	011b      	lsls	r3, r3, #4
900047f8:	1a9b      	subs	r3, r3, r2
900047fa:	009b      	lsls	r3, r3, #2
900047fc:	440b      	add	r3, r1
900047fe:	331c      	adds	r3, #28
90004800:	2201      	movs	r2, #1
90004802:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004804:	78fb      	ldrb	r3, [r7, #3]
90004806:	015a      	lsls	r2, r3, #5
90004808:	693b      	ldr	r3, [r7, #16]
9000480a:	4413      	add	r3, r2
9000480c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004810:	685b      	ldr	r3, [r3, #4]
90004812:	78fa      	ldrb	r2, [r7, #3]
90004814:	0151      	lsls	r1, r2, #5
90004816:	693a      	ldr	r2, [r7, #16]
90004818:	440a      	add	r2, r1
9000481a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000481e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004822:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004824:	78fa      	ldrb	r2, [r7, #3]
90004826:	6879      	ldr	r1, [r7, #4]
90004828:	4613      	mov	r3, r2
9000482a:	011b      	lsls	r3, r3, #4
9000482c:	1a9b      	subs	r3, r3, r2
9000482e:	009b      	lsls	r3, r3, #2
90004830:	440b      	add	r3, r1
90004832:	334c      	adds	r3, #76	@ 0x4c
90004834:	2204      	movs	r2, #4
90004836:	701a      	strb	r2, [r3, #0]
90004838:	e014      	b.n	90004864 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000483a:	78fa      	ldrb	r2, [r7, #3]
9000483c:	6879      	ldr	r1, [r7, #4]
9000483e:	4613      	mov	r3, r2
90004840:	011b      	lsls	r3, r3, #4
90004842:	1a9b      	subs	r3, r3, r2
90004844:	009b      	lsls	r3, r3, #2
90004846:	440b      	add	r3, r1
90004848:	334c      	adds	r3, #76	@ 0x4c
9000484a:	2202      	movs	r2, #2
9000484c:	701a      	strb	r2, [r3, #0]
9000484e:	e009      	b.n	90004864 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004850:	78fa      	ldrb	r2, [r7, #3]
90004852:	6879      	ldr	r1, [r7, #4]
90004854:	4613      	mov	r3, r2
90004856:	011b      	lsls	r3, r3, #4
90004858:	1a9b      	subs	r3, r3, r2
9000485a:	009b      	lsls	r3, r3, #2
9000485c:	440b      	add	r3, r1
9000485e:	334c      	adds	r3, #76	@ 0x4c
90004860:	2202      	movs	r2, #2
90004862:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004864:	78fa      	ldrb	r2, [r7, #3]
90004866:	6879      	ldr	r1, [r7, #4]
90004868:	4613      	mov	r3, r2
9000486a:	011b      	lsls	r3, r3, #4
9000486c:	1a9b      	subs	r3, r3, r2
9000486e:	009b      	lsls	r3, r3, #2
90004870:	440b      	add	r3, r1
90004872:	3326      	adds	r3, #38	@ 0x26
90004874:	781b      	ldrb	r3, [r3, #0]
90004876:	2b00      	cmp	r3, #0
90004878:	d00b      	beq.n	90004892 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
9000487a:	78fa      	ldrb	r2, [r7, #3]
9000487c:	6879      	ldr	r1, [r7, #4]
9000487e:	4613      	mov	r3, r2
90004880:	011b      	lsls	r3, r3, #4
90004882:	1a9b      	subs	r3, r3, r2
90004884:	009b      	lsls	r3, r3, #2
90004886:	440b      	add	r3, r1
90004888:	3326      	adds	r3, #38	@ 0x26
9000488a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000488c:	2b02      	cmp	r3, #2
9000488e:	f040 8136 	bne.w	90004afe <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004892:	78fb      	ldrb	r3, [r7, #3]
90004894:	015a      	lsls	r2, r3, #5
90004896:	693b      	ldr	r3, [r7, #16]
90004898:	4413      	add	r3, r2
9000489a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000489e:	681b      	ldr	r3, [r3, #0]
900048a0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900048a2:	68fb      	ldr	r3, [r7, #12]
900048a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900048a8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900048aa:	68fb      	ldr	r3, [r7, #12]
900048ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900048b0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
900048b2:	78fb      	ldrb	r3, [r7, #3]
900048b4:	015a      	lsls	r2, r3, #5
900048b6:	693b      	ldr	r3, [r7, #16]
900048b8:	4413      	add	r3, r2
900048ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048be:	461a      	mov	r2, r3
900048c0:	68fb      	ldr	r3, [r7, #12]
900048c2:	6013      	str	r3, [r2, #0]
900048c4:	e11b      	b.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
900048c6:	78fa      	ldrb	r2, [r7, #3]
900048c8:	6879      	ldr	r1, [r7, #4]
900048ca:	4613      	mov	r3, r2
900048cc:	011b      	lsls	r3, r3, #4
900048ce:	1a9b      	subs	r3, r3, r2
900048d0:	009b      	lsls	r3, r3, #2
900048d2:	440b      	add	r3, r1
900048d4:	334d      	adds	r3, #77	@ 0x4d
900048d6:	781b      	ldrb	r3, [r3, #0]
900048d8:	2b03      	cmp	r3, #3
900048da:	f040 8081 	bne.w	900049e0 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900048de:	78fa      	ldrb	r2, [r7, #3]
900048e0:	6879      	ldr	r1, [r7, #4]
900048e2:	4613      	mov	r3, r2
900048e4:	011b      	lsls	r3, r3, #4
900048e6:	1a9b      	subs	r3, r3, r2
900048e8:	009b      	lsls	r3, r3, #2
900048ea:	440b      	add	r3, r1
900048ec:	334d      	adds	r3, #77	@ 0x4d
900048ee:	2202      	movs	r2, #2
900048f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900048f2:	78fa      	ldrb	r2, [r7, #3]
900048f4:	6879      	ldr	r1, [r7, #4]
900048f6:	4613      	mov	r3, r2
900048f8:	011b      	lsls	r3, r3, #4
900048fa:	1a9b      	subs	r3, r3, r2
900048fc:	009b      	lsls	r3, r3, #2
900048fe:	440b      	add	r3, r1
90004900:	331b      	adds	r3, #27
90004902:	781b      	ldrb	r3, [r3, #0]
90004904:	2b01      	cmp	r3, #1
90004906:	f040 80fa 	bne.w	90004afe <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000490a:	78fa      	ldrb	r2, [r7, #3]
9000490c:	6879      	ldr	r1, [r7, #4]
9000490e:	4613      	mov	r3, r2
90004910:	011b      	lsls	r3, r3, #4
90004912:	1a9b      	subs	r3, r3, r2
90004914:	009b      	lsls	r3, r3, #2
90004916:	440b      	add	r3, r1
90004918:	334c      	adds	r3, #76	@ 0x4c
9000491a:	2202      	movs	r2, #2
9000491c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
9000491e:	78fb      	ldrb	r3, [r7, #3]
90004920:	015a      	lsls	r2, r3, #5
90004922:	693b      	ldr	r3, [r7, #16]
90004924:	4413      	add	r3, r2
90004926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000492a:	685b      	ldr	r3, [r3, #4]
9000492c:	78fa      	ldrb	r2, [r7, #3]
9000492e:	0151      	lsls	r1, r2, #5
90004930:	693a      	ldr	r2, [r7, #16]
90004932:	440a      	add	r2, r1
90004934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000493c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
9000493e:	78fb      	ldrb	r3, [r7, #3]
90004940:	015a      	lsls	r2, r3, #5
90004942:	693b      	ldr	r3, [r7, #16]
90004944:	4413      	add	r3, r2
90004946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000494a:	68db      	ldr	r3, [r3, #12]
9000494c:	78fa      	ldrb	r2, [r7, #3]
9000494e:	0151      	lsls	r1, r2, #5
90004950:	693a      	ldr	r2, [r7, #16]
90004952:	440a      	add	r2, r1
90004954:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000495c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
9000495e:	78fb      	ldrb	r3, [r7, #3]
90004960:	015a      	lsls	r2, r3, #5
90004962:	693b      	ldr	r3, [r7, #16]
90004964:	4413      	add	r3, r2
90004966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000496a:	68db      	ldr	r3, [r3, #12]
9000496c:	78fa      	ldrb	r2, [r7, #3]
9000496e:	0151      	lsls	r1, r2, #5
90004970:	693a      	ldr	r2, [r7, #16]
90004972:	440a      	add	r2, r1
90004974:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004978:	f023 0320 	bic.w	r3, r3, #32
9000497c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000497e:	78fa      	ldrb	r2, [r7, #3]
90004980:	6879      	ldr	r1, [r7, #4]
90004982:	4613      	mov	r3, r2
90004984:	011b      	lsls	r3, r3, #4
90004986:	1a9b      	subs	r3, r3, r2
90004988:	009b      	lsls	r3, r3, #2
9000498a:	440b      	add	r3, r1
9000498c:	3326      	adds	r3, #38	@ 0x26
9000498e:	781b      	ldrb	r3, [r3, #0]
90004990:	2b00      	cmp	r3, #0
90004992:	d00b      	beq.n	900049ac <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004994:	78fa      	ldrb	r2, [r7, #3]
90004996:	6879      	ldr	r1, [r7, #4]
90004998:	4613      	mov	r3, r2
9000499a:	011b      	lsls	r3, r3, #4
9000499c:	1a9b      	subs	r3, r3, r2
9000499e:	009b      	lsls	r3, r3, #2
900049a0:	440b      	add	r3, r1
900049a2:	3326      	adds	r3, #38	@ 0x26
900049a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900049a6:	2b02      	cmp	r3, #2
900049a8:	f040 80a9 	bne.w	90004afe <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900049ac:	78fb      	ldrb	r3, [r7, #3]
900049ae:	015a      	lsls	r2, r3, #5
900049b0:	693b      	ldr	r3, [r7, #16]
900049b2:	4413      	add	r3, r2
900049b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049b8:	681b      	ldr	r3, [r3, #0]
900049ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900049bc:	68fb      	ldr	r3, [r7, #12]
900049be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900049c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900049c4:	68fb      	ldr	r3, [r7, #12]
900049c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900049ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
900049cc:	78fb      	ldrb	r3, [r7, #3]
900049ce:	015a      	lsls	r2, r3, #5
900049d0:	693b      	ldr	r3, [r7, #16]
900049d2:	4413      	add	r3, r2
900049d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049d8:	461a      	mov	r2, r3
900049da:	68fb      	ldr	r3, [r7, #12]
900049dc:	6013      	str	r3, [r2, #0]
900049de:	e08e      	b.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900049e0:	78fa      	ldrb	r2, [r7, #3]
900049e2:	6879      	ldr	r1, [r7, #4]
900049e4:	4613      	mov	r3, r2
900049e6:	011b      	lsls	r3, r3, #4
900049e8:	1a9b      	subs	r3, r3, r2
900049ea:	009b      	lsls	r3, r3, #2
900049ec:	440b      	add	r3, r1
900049ee:	334d      	adds	r3, #77	@ 0x4d
900049f0:	781b      	ldrb	r3, [r3, #0]
900049f2:	2b04      	cmp	r3, #4
900049f4:	d143      	bne.n	90004a7e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900049f6:	78fa      	ldrb	r2, [r7, #3]
900049f8:	6879      	ldr	r1, [r7, #4]
900049fa:	4613      	mov	r3, r2
900049fc:	011b      	lsls	r3, r3, #4
900049fe:	1a9b      	subs	r3, r3, r2
90004a00:	009b      	lsls	r3, r3, #2
90004a02:	440b      	add	r3, r1
90004a04:	334d      	adds	r3, #77	@ 0x4d
90004a06:	2202      	movs	r2, #2
90004a08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a0a:	78fa      	ldrb	r2, [r7, #3]
90004a0c:	6879      	ldr	r1, [r7, #4]
90004a0e:	4613      	mov	r3, r2
90004a10:	011b      	lsls	r3, r3, #4
90004a12:	1a9b      	subs	r3, r3, r2
90004a14:	009b      	lsls	r3, r3, #2
90004a16:	440b      	add	r3, r1
90004a18:	334c      	adds	r3, #76	@ 0x4c
90004a1a:	2202      	movs	r2, #2
90004a1c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a1e:	78fa      	ldrb	r2, [r7, #3]
90004a20:	6879      	ldr	r1, [r7, #4]
90004a22:	4613      	mov	r3, r2
90004a24:	011b      	lsls	r3, r3, #4
90004a26:	1a9b      	subs	r3, r3, r2
90004a28:	009b      	lsls	r3, r3, #2
90004a2a:	440b      	add	r3, r1
90004a2c:	3326      	adds	r3, #38	@ 0x26
90004a2e:	781b      	ldrb	r3, [r3, #0]
90004a30:	2b00      	cmp	r3, #0
90004a32:	d00a      	beq.n	90004a4a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004a34:	78fa      	ldrb	r2, [r7, #3]
90004a36:	6879      	ldr	r1, [r7, #4]
90004a38:	4613      	mov	r3, r2
90004a3a:	011b      	lsls	r3, r3, #4
90004a3c:	1a9b      	subs	r3, r3, r2
90004a3e:	009b      	lsls	r3, r3, #2
90004a40:	440b      	add	r3, r1
90004a42:	3326      	adds	r3, #38	@ 0x26
90004a44:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a46:	2b02      	cmp	r3, #2
90004a48:	d159      	bne.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004a4a:	78fb      	ldrb	r3, [r7, #3]
90004a4c:	015a      	lsls	r2, r3, #5
90004a4e:	693b      	ldr	r3, [r7, #16]
90004a50:	4413      	add	r3, r2
90004a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a56:	681b      	ldr	r3, [r3, #0]
90004a58:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004a5a:	68fb      	ldr	r3, [r7, #12]
90004a5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004a60:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004a62:	68fb      	ldr	r3, [r7, #12]
90004a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004a68:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004a6a:	78fb      	ldrb	r3, [r7, #3]
90004a6c:	015a      	lsls	r2, r3, #5
90004a6e:	693b      	ldr	r3, [r7, #16]
90004a70:	4413      	add	r3, r2
90004a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a76:	461a      	mov	r2, r3
90004a78:	68fb      	ldr	r3, [r7, #12]
90004a7a:	6013      	str	r3, [r2, #0]
90004a7c:	e03f      	b.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004a7e:	78fa      	ldrb	r2, [r7, #3]
90004a80:	6879      	ldr	r1, [r7, #4]
90004a82:	4613      	mov	r3, r2
90004a84:	011b      	lsls	r3, r3, #4
90004a86:	1a9b      	subs	r3, r3, r2
90004a88:	009b      	lsls	r3, r3, #2
90004a8a:	440b      	add	r3, r1
90004a8c:	334d      	adds	r3, #77	@ 0x4d
90004a8e:	781b      	ldrb	r3, [r3, #0]
90004a90:	2b08      	cmp	r3, #8
90004a92:	d126      	bne.n	90004ae2 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a94:	78fa      	ldrb	r2, [r7, #3]
90004a96:	6879      	ldr	r1, [r7, #4]
90004a98:	4613      	mov	r3, r2
90004a9a:	011b      	lsls	r3, r3, #4
90004a9c:	1a9b      	subs	r3, r3, r2
90004a9e:	009b      	lsls	r3, r3, #2
90004aa0:	440b      	add	r3, r1
90004aa2:	334d      	adds	r3, #77	@ 0x4d
90004aa4:	2202      	movs	r2, #2
90004aa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004aa8:	78fa      	ldrb	r2, [r7, #3]
90004aaa:	6879      	ldr	r1, [r7, #4]
90004aac:	4613      	mov	r3, r2
90004aae:	011b      	lsls	r3, r3, #4
90004ab0:	1a9b      	subs	r3, r3, r2
90004ab2:	009b      	lsls	r3, r3, #2
90004ab4:	440b      	add	r3, r1
90004ab6:	3344      	adds	r3, #68	@ 0x44
90004ab8:	681b      	ldr	r3, [r3, #0]
90004aba:	1c59      	adds	r1, r3, #1
90004abc:	6878      	ldr	r0, [r7, #4]
90004abe:	4613      	mov	r3, r2
90004ac0:	011b      	lsls	r3, r3, #4
90004ac2:	1a9b      	subs	r3, r3, r2
90004ac4:	009b      	lsls	r3, r3, #2
90004ac6:	4403      	add	r3, r0
90004ac8:	3344      	adds	r3, #68	@ 0x44
90004aca:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004acc:	78fa      	ldrb	r2, [r7, #3]
90004ace:	6879      	ldr	r1, [r7, #4]
90004ad0:	4613      	mov	r3, r2
90004ad2:	011b      	lsls	r3, r3, #4
90004ad4:	1a9b      	subs	r3, r3, r2
90004ad6:	009b      	lsls	r3, r3, #2
90004ad8:	440b      	add	r3, r1
90004ada:	334c      	adds	r3, #76	@ 0x4c
90004adc:	2204      	movs	r2, #4
90004ade:	701a      	strb	r2, [r3, #0]
90004ae0:	e00d      	b.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004ae2:	78fa      	ldrb	r2, [r7, #3]
90004ae4:	6879      	ldr	r1, [r7, #4]
90004ae6:	4613      	mov	r3, r2
90004ae8:	011b      	lsls	r3, r3, #4
90004aea:	1a9b      	subs	r3, r3, r2
90004aec:	009b      	lsls	r3, r3, #2
90004aee:	440b      	add	r3, r1
90004af0:	334d      	adds	r3, #77	@ 0x4d
90004af2:	781b      	ldrb	r3, [r3, #0]
90004af4:	2b02      	cmp	r3, #2
90004af6:	f000 8100 	beq.w	90004cfa <HCD_HC_IN_IRQHandler+0xcca>
90004afa:	e000      	b.n	90004afe <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004afc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004afe:	78fa      	ldrb	r2, [r7, #3]
90004b00:	6879      	ldr	r1, [r7, #4]
90004b02:	4613      	mov	r3, r2
90004b04:	011b      	lsls	r3, r3, #4
90004b06:	1a9b      	subs	r3, r3, r2
90004b08:	009b      	lsls	r3, r3, #2
90004b0a:	440b      	add	r3, r1
90004b0c:	334c      	adds	r3, #76	@ 0x4c
90004b0e:	781a      	ldrb	r2, [r3, #0]
90004b10:	78fb      	ldrb	r3, [r7, #3]
90004b12:	4619      	mov	r1, r3
90004b14:	6878      	ldr	r0, [r7, #4]
90004b16:	f7fc fb79 	bl	9000120c <HAL_HCD_HC_NotifyURBChange_Callback>
90004b1a:	e0ef      	b.n	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004b1c:	687b      	ldr	r3, [r7, #4]
90004b1e:	681b      	ldr	r3, [r3, #0]
90004b20:	78fa      	ldrb	r2, [r7, #3]
90004b22:	4611      	mov	r1, r2
90004b24:	4618      	mov	r0, r3
90004b26:	f006 fae8 	bl	9000b0fa <USB_ReadChInterrupts>
90004b2a:	4603      	mov	r3, r0
90004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004b30:	2b40      	cmp	r3, #64	@ 0x40
90004b32:	d12f      	bne.n	90004b94 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004b34:	78fb      	ldrb	r3, [r7, #3]
90004b36:	015a      	lsls	r2, r3, #5
90004b38:	693b      	ldr	r3, [r7, #16]
90004b3a:	4413      	add	r3, r2
90004b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b40:	461a      	mov	r2, r3
90004b42:	2340      	movs	r3, #64	@ 0x40
90004b44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004b46:	78fa      	ldrb	r2, [r7, #3]
90004b48:	6879      	ldr	r1, [r7, #4]
90004b4a:	4613      	mov	r3, r2
90004b4c:	011b      	lsls	r3, r3, #4
90004b4e:	1a9b      	subs	r3, r3, r2
90004b50:	009b      	lsls	r3, r3, #2
90004b52:	440b      	add	r3, r1
90004b54:	334d      	adds	r3, #77	@ 0x4d
90004b56:	2205      	movs	r2, #5
90004b58:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004b5a:	78fa      	ldrb	r2, [r7, #3]
90004b5c:	6879      	ldr	r1, [r7, #4]
90004b5e:	4613      	mov	r3, r2
90004b60:	011b      	lsls	r3, r3, #4
90004b62:	1a9b      	subs	r3, r3, r2
90004b64:	009b      	lsls	r3, r3, #2
90004b66:	440b      	add	r3, r1
90004b68:	331a      	adds	r3, #26
90004b6a:	781b      	ldrb	r3, [r3, #0]
90004b6c:	2b00      	cmp	r3, #0
90004b6e:	d109      	bne.n	90004b84 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004b70:	78fa      	ldrb	r2, [r7, #3]
90004b72:	6879      	ldr	r1, [r7, #4]
90004b74:	4613      	mov	r3, r2
90004b76:	011b      	lsls	r3, r3, #4
90004b78:	1a9b      	subs	r3, r3, r2
90004b7a:	009b      	lsls	r3, r3, #2
90004b7c:	440b      	add	r3, r1
90004b7e:	3344      	adds	r3, #68	@ 0x44
90004b80:	2200      	movs	r2, #0
90004b82:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004b84:	687b      	ldr	r3, [r7, #4]
90004b86:	681b      	ldr	r3, [r3, #0]
90004b88:	78fa      	ldrb	r2, [r7, #3]
90004b8a:	4611      	mov	r1, r2
90004b8c:	4618      	mov	r0, r3
90004b8e:	f006 fb31 	bl	9000b1f4 <USB_HC_Halt>
90004b92:	e0b3      	b.n	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004b94:	687b      	ldr	r3, [r7, #4]
90004b96:	681b      	ldr	r3, [r3, #0]
90004b98:	78fa      	ldrb	r2, [r7, #3]
90004b9a:	4611      	mov	r1, r2
90004b9c:	4618      	mov	r0, r3
90004b9e:	f006 faac 	bl	9000b0fa <USB_ReadChInterrupts>
90004ba2:	4603      	mov	r3, r0
90004ba4:	f003 0310 	and.w	r3, r3, #16
90004ba8:	2b10      	cmp	r3, #16
90004baa:	f040 80a7 	bne.w	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004bae:	78fa      	ldrb	r2, [r7, #3]
90004bb0:	6879      	ldr	r1, [r7, #4]
90004bb2:	4613      	mov	r3, r2
90004bb4:	011b      	lsls	r3, r3, #4
90004bb6:	1a9b      	subs	r3, r3, r2
90004bb8:	009b      	lsls	r3, r3, #2
90004bba:	440b      	add	r3, r1
90004bbc:	3326      	adds	r3, #38	@ 0x26
90004bbe:	781b      	ldrb	r3, [r3, #0]
90004bc0:	2b03      	cmp	r3, #3
90004bc2:	d11b      	bne.n	90004bfc <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004bc4:	78fa      	ldrb	r2, [r7, #3]
90004bc6:	6879      	ldr	r1, [r7, #4]
90004bc8:	4613      	mov	r3, r2
90004bca:	011b      	lsls	r3, r3, #4
90004bcc:	1a9b      	subs	r3, r3, r2
90004bce:	009b      	lsls	r3, r3, #2
90004bd0:	440b      	add	r3, r1
90004bd2:	3344      	adds	r3, #68	@ 0x44
90004bd4:	2200      	movs	r2, #0
90004bd6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004bd8:	78fa      	ldrb	r2, [r7, #3]
90004bda:	6879      	ldr	r1, [r7, #4]
90004bdc:	4613      	mov	r3, r2
90004bde:	011b      	lsls	r3, r3, #4
90004be0:	1a9b      	subs	r3, r3, r2
90004be2:	009b      	lsls	r3, r3, #2
90004be4:	440b      	add	r3, r1
90004be6:	334d      	adds	r3, #77	@ 0x4d
90004be8:	2204      	movs	r2, #4
90004bea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004bec:	687b      	ldr	r3, [r7, #4]
90004bee:	681b      	ldr	r3, [r3, #0]
90004bf0:	78fa      	ldrb	r2, [r7, #3]
90004bf2:	4611      	mov	r1, r2
90004bf4:	4618      	mov	r0, r3
90004bf6:	f006 fafd 	bl	9000b1f4 <USB_HC_Halt>
90004bfa:	e03f      	b.n	90004c7c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bfc:	78fa      	ldrb	r2, [r7, #3]
90004bfe:	6879      	ldr	r1, [r7, #4]
90004c00:	4613      	mov	r3, r2
90004c02:	011b      	lsls	r3, r3, #4
90004c04:	1a9b      	subs	r3, r3, r2
90004c06:	009b      	lsls	r3, r3, #2
90004c08:	440b      	add	r3, r1
90004c0a:	3326      	adds	r3, #38	@ 0x26
90004c0c:	781b      	ldrb	r3, [r3, #0]
90004c0e:	2b00      	cmp	r3, #0
90004c10:	d00a      	beq.n	90004c28 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004c12:	78fa      	ldrb	r2, [r7, #3]
90004c14:	6879      	ldr	r1, [r7, #4]
90004c16:	4613      	mov	r3, r2
90004c18:	011b      	lsls	r3, r3, #4
90004c1a:	1a9b      	subs	r3, r3, r2
90004c1c:	009b      	lsls	r3, r3, #2
90004c1e:	440b      	add	r3, r1
90004c20:	3326      	adds	r3, #38	@ 0x26
90004c22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c24:	2b02      	cmp	r3, #2
90004c26:	d129      	bne.n	90004c7c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004c28:	78fa      	ldrb	r2, [r7, #3]
90004c2a:	6879      	ldr	r1, [r7, #4]
90004c2c:	4613      	mov	r3, r2
90004c2e:	011b      	lsls	r3, r3, #4
90004c30:	1a9b      	subs	r3, r3, r2
90004c32:	009b      	lsls	r3, r3, #2
90004c34:	440b      	add	r3, r1
90004c36:	3344      	adds	r3, #68	@ 0x44
90004c38:	2200      	movs	r2, #0
90004c3a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004c3c:	687b      	ldr	r3, [r7, #4]
90004c3e:	799b      	ldrb	r3, [r3, #6]
90004c40:	2b00      	cmp	r3, #0
90004c42:	d00a      	beq.n	90004c5a <HCD_HC_IN_IRQHandler+0xc2a>
90004c44:	78fa      	ldrb	r2, [r7, #3]
90004c46:	6879      	ldr	r1, [r7, #4]
90004c48:	4613      	mov	r3, r2
90004c4a:	011b      	lsls	r3, r3, #4
90004c4c:	1a9b      	subs	r3, r3, r2
90004c4e:	009b      	lsls	r3, r3, #2
90004c50:	440b      	add	r3, r1
90004c52:	331b      	adds	r3, #27
90004c54:	781b      	ldrb	r3, [r3, #0]
90004c56:	2b01      	cmp	r3, #1
90004c58:	d110      	bne.n	90004c7c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004c5a:	78fa      	ldrb	r2, [r7, #3]
90004c5c:	6879      	ldr	r1, [r7, #4]
90004c5e:	4613      	mov	r3, r2
90004c60:	011b      	lsls	r3, r3, #4
90004c62:	1a9b      	subs	r3, r3, r2
90004c64:	009b      	lsls	r3, r3, #2
90004c66:	440b      	add	r3, r1
90004c68:	334d      	adds	r3, #77	@ 0x4d
90004c6a:	2204      	movs	r2, #4
90004c6c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c6e:	687b      	ldr	r3, [r7, #4]
90004c70:	681b      	ldr	r3, [r3, #0]
90004c72:	78fa      	ldrb	r2, [r7, #3]
90004c74:	4611      	mov	r1, r2
90004c76:	4618      	mov	r0, r3
90004c78:	f006 fabc 	bl	9000b1f4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004c7c:	78fa      	ldrb	r2, [r7, #3]
90004c7e:	6879      	ldr	r1, [r7, #4]
90004c80:	4613      	mov	r3, r2
90004c82:	011b      	lsls	r3, r3, #4
90004c84:	1a9b      	subs	r3, r3, r2
90004c86:	009b      	lsls	r3, r3, #2
90004c88:	440b      	add	r3, r1
90004c8a:	331b      	adds	r3, #27
90004c8c:	781b      	ldrb	r3, [r3, #0]
90004c8e:	2b01      	cmp	r3, #1
90004c90:	d129      	bne.n	90004ce6 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004c92:	78fa      	ldrb	r2, [r7, #3]
90004c94:	6879      	ldr	r1, [r7, #4]
90004c96:	4613      	mov	r3, r2
90004c98:	011b      	lsls	r3, r3, #4
90004c9a:	1a9b      	subs	r3, r3, r2
90004c9c:	009b      	lsls	r3, r3, #2
90004c9e:	440b      	add	r3, r1
90004ca0:	331b      	adds	r3, #27
90004ca2:	2200      	movs	r2, #0
90004ca4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004ca6:	78fb      	ldrb	r3, [r7, #3]
90004ca8:	015a      	lsls	r2, r3, #5
90004caa:	693b      	ldr	r3, [r7, #16]
90004cac:	4413      	add	r3, r2
90004cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cb2:	685b      	ldr	r3, [r3, #4]
90004cb4:	78fa      	ldrb	r2, [r7, #3]
90004cb6:	0151      	lsls	r1, r2, #5
90004cb8:	693a      	ldr	r2, [r7, #16]
90004cba:	440a      	add	r2, r1
90004cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004cc4:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004cc6:	78fb      	ldrb	r3, [r7, #3]
90004cc8:	015a      	lsls	r2, r3, #5
90004cca:	693b      	ldr	r3, [r7, #16]
90004ccc:	4413      	add	r3, r2
90004cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cd2:	68db      	ldr	r3, [r3, #12]
90004cd4:	78fa      	ldrb	r2, [r7, #3]
90004cd6:	0151      	lsls	r1, r2, #5
90004cd8:	693a      	ldr	r2, [r7, #16]
90004cda:	440a      	add	r2, r1
90004cdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ce0:	f043 0320 	orr.w	r3, r3, #32
90004ce4:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004ce6:	78fb      	ldrb	r3, [r7, #3]
90004ce8:	015a      	lsls	r2, r3, #5
90004cea:	693b      	ldr	r3, [r7, #16]
90004cec:	4413      	add	r3, r2
90004cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cf2:	461a      	mov	r2, r3
90004cf4:	2310      	movs	r3, #16
90004cf6:	6093      	str	r3, [r2, #8]
90004cf8:	e000      	b.n	90004cfc <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004cfa:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004cfc:	3718      	adds	r7, #24
90004cfe:	46bd      	mov	sp, r7
90004d00:	bd80      	pop	{r7, pc}

90004d02 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004d02:	b580      	push	{r7, lr}
90004d04:	b086      	sub	sp, #24
90004d06:	af00      	add	r7, sp, #0
90004d08:	6078      	str	r0, [r7, #4]
90004d0a:	460b      	mov	r3, r1
90004d0c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004d0e:	687b      	ldr	r3, [r7, #4]
90004d10:	681b      	ldr	r3, [r3, #0]
90004d12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004d14:	697b      	ldr	r3, [r7, #20]
90004d16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004d18:	687b      	ldr	r3, [r7, #4]
90004d1a:	681b      	ldr	r3, [r3, #0]
90004d1c:	78fa      	ldrb	r2, [r7, #3]
90004d1e:	4611      	mov	r1, r2
90004d20:	4618      	mov	r0, r3
90004d22:	f006 f9ea 	bl	9000b0fa <USB_ReadChInterrupts>
90004d26:	4603      	mov	r3, r0
90004d28:	f003 0304 	and.w	r3, r3, #4
90004d2c:	2b04      	cmp	r3, #4
90004d2e:	d11b      	bne.n	90004d68 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004d30:	78fb      	ldrb	r3, [r7, #3]
90004d32:	015a      	lsls	r2, r3, #5
90004d34:	693b      	ldr	r3, [r7, #16]
90004d36:	4413      	add	r3, r2
90004d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d3c:	461a      	mov	r2, r3
90004d3e:	2304      	movs	r3, #4
90004d40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004d42:	78fa      	ldrb	r2, [r7, #3]
90004d44:	6879      	ldr	r1, [r7, #4]
90004d46:	4613      	mov	r3, r2
90004d48:	011b      	lsls	r3, r3, #4
90004d4a:	1a9b      	subs	r3, r3, r2
90004d4c:	009b      	lsls	r3, r3, #2
90004d4e:	440b      	add	r3, r1
90004d50:	334d      	adds	r3, #77	@ 0x4d
90004d52:	2207      	movs	r2, #7
90004d54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d56:	687b      	ldr	r3, [r7, #4]
90004d58:	681b      	ldr	r3, [r3, #0]
90004d5a:	78fa      	ldrb	r2, [r7, #3]
90004d5c:	4611      	mov	r1, r2
90004d5e:	4618      	mov	r0, r3
90004d60:	f006 fa48 	bl	9000b1f4 <USB_HC_Halt>
90004d64:	f000 bc89 	b.w	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004d68:	687b      	ldr	r3, [r7, #4]
90004d6a:	681b      	ldr	r3, [r3, #0]
90004d6c:	78fa      	ldrb	r2, [r7, #3]
90004d6e:	4611      	mov	r1, r2
90004d70:	4618      	mov	r0, r3
90004d72:	f006 f9c2 	bl	9000b0fa <USB_ReadChInterrupts>
90004d76:	4603      	mov	r3, r0
90004d78:	f003 0320 	and.w	r3, r3, #32
90004d7c:	2b20      	cmp	r3, #32
90004d7e:	f040 8082 	bne.w	90004e86 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004d82:	78fb      	ldrb	r3, [r7, #3]
90004d84:	015a      	lsls	r2, r3, #5
90004d86:	693b      	ldr	r3, [r7, #16]
90004d88:	4413      	add	r3, r2
90004d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d8e:	461a      	mov	r2, r3
90004d90:	2320      	movs	r3, #32
90004d92:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004d94:	78fa      	ldrb	r2, [r7, #3]
90004d96:	6879      	ldr	r1, [r7, #4]
90004d98:	4613      	mov	r3, r2
90004d9a:	011b      	lsls	r3, r3, #4
90004d9c:	1a9b      	subs	r3, r3, r2
90004d9e:	009b      	lsls	r3, r3, #2
90004da0:	440b      	add	r3, r1
90004da2:	3319      	adds	r3, #25
90004da4:	781b      	ldrb	r3, [r3, #0]
90004da6:	2b01      	cmp	r3, #1
90004da8:	d124      	bne.n	90004df4 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004daa:	78fa      	ldrb	r2, [r7, #3]
90004dac:	6879      	ldr	r1, [r7, #4]
90004dae:	4613      	mov	r3, r2
90004db0:	011b      	lsls	r3, r3, #4
90004db2:	1a9b      	subs	r3, r3, r2
90004db4:	009b      	lsls	r3, r3, #2
90004db6:	440b      	add	r3, r1
90004db8:	3319      	adds	r3, #25
90004dba:	2200      	movs	r2, #0
90004dbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004dbe:	78fa      	ldrb	r2, [r7, #3]
90004dc0:	6879      	ldr	r1, [r7, #4]
90004dc2:	4613      	mov	r3, r2
90004dc4:	011b      	lsls	r3, r3, #4
90004dc6:	1a9b      	subs	r3, r3, r2
90004dc8:	009b      	lsls	r3, r3, #2
90004dca:	440b      	add	r3, r1
90004dcc:	334c      	adds	r3, #76	@ 0x4c
90004dce:	2202      	movs	r2, #2
90004dd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004dd2:	78fa      	ldrb	r2, [r7, #3]
90004dd4:	6879      	ldr	r1, [r7, #4]
90004dd6:	4613      	mov	r3, r2
90004dd8:	011b      	lsls	r3, r3, #4
90004dda:	1a9b      	subs	r3, r3, r2
90004ddc:	009b      	lsls	r3, r3, #2
90004dde:	440b      	add	r3, r1
90004de0:	334d      	adds	r3, #77	@ 0x4d
90004de2:	2203      	movs	r2, #3
90004de4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004de6:	687b      	ldr	r3, [r7, #4]
90004de8:	681b      	ldr	r3, [r3, #0]
90004dea:	78fa      	ldrb	r2, [r7, #3]
90004dec:	4611      	mov	r1, r2
90004dee:	4618      	mov	r0, r3
90004df0:	f006 fa00 	bl	9000b1f4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90004df4:	78fa      	ldrb	r2, [r7, #3]
90004df6:	6879      	ldr	r1, [r7, #4]
90004df8:	4613      	mov	r3, r2
90004dfa:	011b      	lsls	r3, r3, #4
90004dfc:	1a9b      	subs	r3, r3, r2
90004dfe:	009b      	lsls	r3, r3, #2
90004e00:	440b      	add	r3, r1
90004e02:	331a      	adds	r3, #26
90004e04:	781b      	ldrb	r3, [r3, #0]
90004e06:	2b01      	cmp	r3, #1
90004e08:	f040 8437 	bne.w	9000567a <HCD_HC_OUT_IRQHandler+0x978>
90004e0c:	78fa      	ldrb	r2, [r7, #3]
90004e0e:	6879      	ldr	r1, [r7, #4]
90004e10:	4613      	mov	r3, r2
90004e12:	011b      	lsls	r3, r3, #4
90004e14:	1a9b      	subs	r3, r3, r2
90004e16:	009b      	lsls	r3, r3, #2
90004e18:	440b      	add	r3, r1
90004e1a:	331b      	adds	r3, #27
90004e1c:	781b      	ldrb	r3, [r3, #0]
90004e1e:	2b00      	cmp	r3, #0
90004e20:	f040 842b 	bne.w	9000567a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90004e24:	78fa      	ldrb	r2, [r7, #3]
90004e26:	6879      	ldr	r1, [r7, #4]
90004e28:	4613      	mov	r3, r2
90004e2a:	011b      	lsls	r3, r3, #4
90004e2c:	1a9b      	subs	r3, r3, r2
90004e2e:	009b      	lsls	r3, r3, #2
90004e30:	440b      	add	r3, r1
90004e32:	3326      	adds	r3, #38	@ 0x26
90004e34:	781b      	ldrb	r3, [r3, #0]
90004e36:	2b01      	cmp	r3, #1
90004e38:	d009      	beq.n	90004e4e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90004e3a:	78fa      	ldrb	r2, [r7, #3]
90004e3c:	6879      	ldr	r1, [r7, #4]
90004e3e:	4613      	mov	r3, r2
90004e40:	011b      	lsls	r3, r3, #4
90004e42:	1a9b      	subs	r3, r3, r2
90004e44:	009b      	lsls	r3, r3, #2
90004e46:	440b      	add	r3, r1
90004e48:	331b      	adds	r3, #27
90004e4a:	2201      	movs	r2, #1
90004e4c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90004e4e:	78fa      	ldrb	r2, [r7, #3]
90004e50:	6879      	ldr	r1, [r7, #4]
90004e52:	4613      	mov	r3, r2
90004e54:	011b      	lsls	r3, r3, #4
90004e56:	1a9b      	subs	r3, r3, r2
90004e58:	009b      	lsls	r3, r3, #2
90004e5a:	440b      	add	r3, r1
90004e5c:	334d      	adds	r3, #77	@ 0x4d
90004e5e:	2203      	movs	r2, #3
90004e60:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e62:	687b      	ldr	r3, [r7, #4]
90004e64:	681b      	ldr	r3, [r3, #0]
90004e66:	78fa      	ldrb	r2, [r7, #3]
90004e68:	4611      	mov	r1, r2
90004e6a:	4618      	mov	r0, r3
90004e6c:	f006 f9c2 	bl	9000b1f4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90004e70:	78fa      	ldrb	r2, [r7, #3]
90004e72:	6879      	ldr	r1, [r7, #4]
90004e74:	4613      	mov	r3, r2
90004e76:	011b      	lsls	r3, r3, #4
90004e78:	1a9b      	subs	r3, r3, r2
90004e7a:	009b      	lsls	r3, r3, #2
90004e7c:	440b      	add	r3, r1
90004e7e:	3344      	adds	r3, #68	@ 0x44
90004e80:	2200      	movs	r2, #0
90004e82:	601a      	str	r2, [r3, #0]
90004e84:	e3f9      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004e86:	687b      	ldr	r3, [r7, #4]
90004e88:	681b      	ldr	r3, [r3, #0]
90004e8a:	78fa      	ldrb	r2, [r7, #3]
90004e8c:	4611      	mov	r1, r2
90004e8e:	4618      	mov	r0, r3
90004e90:	f006 f933 	bl	9000b0fa <USB_ReadChInterrupts>
90004e94:	4603      	mov	r3, r0
90004e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004e9e:	d111      	bne.n	90004ec4 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004ea0:	78fb      	ldrb	r3, [r7, #3]
90004ea2:	015a      	lsls	r2, r3, #5
90004ea4:	693b      	ldr	r3, [r7, #16]
90004ea6:	4413      	add	r3, r2
90004ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004eac:	461a      	mov	r2, r3
90004eae:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004eb2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004eb4:	687b      	ldr	r3, [r7, #4]
90004eb6:	681b      	ldr	r3, [r3, #0]
90004eb8:	78fa      	ldrb	r2, [r7, #3]
90004eba:	4611      	mov	r1, r2
90004ebc:	4618      	mov	r0, r3
90004ebe:	f006 f999 	bl	9000b1f4 <USB_HC_Halt>
90004ec2:	e3da      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004ec4:	687b      	ldr	r3, [r7, #4]
90004ec6:	681b      	ldr	r3, [r3, #0]
90004ec8:	78fa      	ldrb	r2, [r7, #3]
90004eca:	4611      	mov	r1, r2
90004ecc:	4618      	mov	r0, r3
90004ece:	f006 f914 	bl	9000b0fa <USB_ReadChInterrupts>
90004ed2:	4603      	mov	r3, r0
90004ed4:	f003 0301 	and.w	r3, r3, #1
90004ed8:	2b01      	cmp	r3, #1
90004eda:	d168      	bne.n	90004fae <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004edc:	78fa      	ldrb	r2, [r7, #3]
90004ede:	6879      	ldr	r1, [r7, #4]
90004ee0:	4613      	mov	r3, r2
90004ee2:	011b      	lsls	r3, r3, #4
90004ee4:	1a9b      	subs	r3, r3, r2
90004ee6:	009b      	lsls	r3, r3, #2
90004ee8:	440b      	add	r3, r1
90004eea:	3344      	adds	r3, #68	@ 0x44
90004eec:	2200      	movs	r2, #0
90004eee:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004ef0:	687b      	ldr	r3, [r7, #4]
90004ef2:	681b      	ldr	r3, [r3, #0]
90004ef4:	78fa      	ldrb	r2, [r7, #3]
90004ef6:	4611      	mov	r1, r2
90004ef8:	4618      	mov	r0, r3
90004efa:	f006 f8fe 	bl	9000b0fa <USB_ReadChInterrupts>
90004efe:	4603      	mov	r3, r0
90004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004f04:	2b40      	cmp	r3, #64	@ 0x40
90004f06:	d112      	bne.n	90004f2e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004f08:	78fa      	ldrb	r2, [r7, #3]
90004f0a:	6879      	ldr	r1, [r7, #4]
90004f0c:	4613      	mov	r3, r2
90004f0e:	011b      	lsls	r3, r3, #4
90004f10:	1a9b      	subs	r3, r3, r2
90004f12:	009b      	lsls	r3, r3, #2
90004f14:	440b      	add	r3, r1
90004f16:	3319      	adds	r3, #25
90004f18:	2201      	movs	r2, #1
90004f1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004f1c:	78fb      	ldrb	r3, [r7, #3]
90004f1e:	015a      	lsls	r2, r3, #5
90004f20:	693b      	ldr	r3, [r7, #16]
90004f22:	4413      	add	r3, r2
90004f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f28:	461a      	mov	r2, r3
90004f2a:	2340      	movs	r3, #64	@ 0x40
90004f2c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90004f2e:	78fa      	ldrb	r2, [r7, #3]
90004f30:	6879      	ldr	r1, [r7, #4]
90004f32:	4613      	mov	r3, r2
90004f34:	011b      	lsls	r3, r3, #4
90004f36:	1a9b      	subs	r3, r3, r2
90004f38:	009b      	lsls	r3, r3, #2
90004f3a:	440b      	add	r3, r1
90004f3c:	331b      	adds	r3, #27
90004f3e:	781b      	ldrb	r3, [r3, #0]
90004f40:	2b00      	cmp	r3, #0
90004f42:	d019      	beq.n	90004f78 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004f44:	78fa      	ldrb	r2, [r7, #3]
90004f46:	6879      	ldr	r1, [r7, #4]
90004f48:	4613      	mov	r3, r2
90004f4a:	011b      	lsls	r3, r3, #4
90004f4c:	1a9b      	subs	r3, r3, r2
90004f4e:	009b      	lsls	r3, r3, #2
90004f50:	440b      	add	r3, r1
90004f52:	331b      	adds	r3, #27
90004f54:	2200      	movs	r2, #0
90004f56:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004f58:	78fb      	ldrb	r3, [r7, #3]
90004f5a:	015a      	lsls	r2, r3, #5
90004f5c:	693b      	ldr	r3, [r7, #16]
90004f5e:	4413      	add	r3, r2
90004f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f64:	685b      	ldr	r3, [r3, #4]
90004f66:	78fa      	ldrb	r2, [r7, #3]
90004f68:	0151      	lsls	r1, r2, #5
90004f6a:	693a      	ldr	r2, [r7, #16]
90004f6c:	440a      	add	r2, r1
90004f6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004f76:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004f78:	78fb      	ldrb	r3, [r7, #3]
90004f7a:	015a      	lsls	r2, r3, #5
90004f7c:	693b      	ldr	r3, [r7, #16]
90004f7e:	4413      	add	r3, r2
90004f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f84:	461a      	mov	r2, r3
90004f86:	2301      	movs	r3, #1
90004f88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90004f8a:	78fa      	ldrb	r2, [r7, #3]
90004f8c:	6879      	ldr	r1, [r7, #4]
90004f8e:	4613      	mov	r3, r2
90004f90:	011b      	lsls	r3, r3, #4
90004f92:	1a9b      	subs	r3, r3, r2
90004f94:	009b      	lsls	r3, r3, #2
90004f96:	440b      	add	r3, r1
90004f98:	334d      	adds	r3, #77	@ 0x4d
90004f9a:	2201      	movs	r2, #1
90004f9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f9e:	687b      	ldr	r3, [r7, #4]
90004fa0:	681b      	ldr	r3, [r3, #0]
90004fa2:	78fa      	ldrb	r2, [r7, #3]
90004fa4:	4611      	mov	r1, r2
90004fa6:	4618      	mov	r0, r3
90004fa8:	f006 f924 	bl	9000b1f4 <USB_HC_Halt>
90004fac:	e365      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004fae:	687b      	ldr	r3, [r7, #4]
90004fb0:	681b      	ldr	r3, [r3, #0]
90004fb2:	78fa      	ldrb	r2, [r7, #3]
90004fb4:	4611      	mov	r1, r2
90004fb6:	4618      	mov	r0, r3
90004fb8:	f006 f89f 	bl	9000b0fa <USB_ReadChInterrupts>
90004fbc:	4603      	mov	r3, r0
90004fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004fc2:	2b40      	cmp	r3, #64	@ 0x40
90004fc4:	d139      	bne.n	9000503a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90004fc6:	78fa      	ldrb	r2, [r7, #3]
90004fc8:	6879      	ldr	r1, [r7, #4]
90004fca:	4613      	mov	r3, r2
90004fcc:	011b      	lsls	r3, r3, #4
90004fce:	1a9b      	subs	r3, r3, r2
90004fd0:	009b      	lsls	r3, r3, #2
90004fd2:	440b      	add	r3, r1
90004fd4:	334d      	adds	r3, #77	@ 0x4d
90004fd6:	2205      	movs	r2, #5
90004fd8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004fda:	78fa      	ldrb	r2, [r7, #3]
90004fdc:	6879      	ldr	r1, [r7, #4]
90004fde:	4613      	mov	r3, r2
90004fe0:	011b      	lsls	r3, r3, #4
90004fe2:	1a9b      	subs	r3, r3, r2
90004fe4:	009b      	lsls	r3, r3, #2
90004fe6:	440b      	add	r3, r1
90004fe8:	331a      	adds	r3, #26
90004fea:	781b      	ldrb	r3, [r3, #0]
90004fec:	2b00      	cmp	r3, #0
90004fee:	d109      	bne.n	90005004 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004ff0:	78fa      	ldrb	r2, [r7, #3]
90004ff2:	6879      	ldr	r1, [r7, #4]
90004ff4:	4613      	mov	r3, r2
90004ff6:	011b      	lsls	r3, r3, #4
90004ff8:	1a9b      	subs	r3, r3, r2
90004ffa:	009b      	lsls	r3, r3, #2
90004ffc:	440b      	add	r3, r1
90004ffe:	3319      	adds	r3, #25
90005000:	2201      	movs	r2, #1
90005002:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005004:	78fa      	ldrb	r2, [r7, #3]
90005006:	6879      	ldr	r1, [r7, #4]
90005008:	4613      	mov	r3, r2
9000500a:	011b      	lsls	r3, r3, #4
9000500c:	1a9b      	subs	r3, r3, r2
9000500e:	009b      	lsls	r3, r3, #2
90005010:	440b      	add	r3, r1
90005012:	3344      	adds	r3, #68	@ 0x44
90005014:	2200      	movs	r2, #0
90005016:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005018:	687b      	ldr	r3, [r7, #4]
9000501a:	681b      	ldr	r3, [r3, #0]
9000501c:	78fa      	ldrb	r2, [r7, #3]
9000501e:	4611      	mov	r1, r2
90005020:	4618      	mov	r0, r3
90005022:	f006 f8e7 	bl	9000b1f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005026:	78fb      	ldrb	r3, [r7, #3]
90005028:	015a      	lsls	r2, r3, #5
9000502a:	693b      	ldr	r3, [r7, #16]
9000502c:	4413      	add	r3, r2
9000502e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005032:	461a      	mov	r2, r3
90005034:	2340      	movs	r3, #64	@ 0x40
90005036:	6093      	str	r3, [r2, #8]
90005038:	e31f      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000503a:	687b      	ldr	r3, [r7, #4]
9000503c:	681b      	ldr	r3, [r3, #0]
9000503e:	78fa      	ldrb	r2, [r7, #3]
90005040:	4611      	mov	r1, r2
90005042:	4618      	mov	r0, r3
90005044:	f006 f859 	bl	9000b0fa <USB_ReadChInterrupts>
90005048:	4603      	mov	r3, r0
9000504a:	f003 0308 	and.w	r3, r3, #8
9000504e:	2b08      	cmp	r3, #8
90005050:	d11a      	bne.n	90005088 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90005052:	78fb      	ldrb	r3, [r7, #3]
90005054:	015a      	lsls	r2, r3, #5
90005056:	693b      	ldr	r3, [r7, #16]
90005058:	4413      	add	r3, r2
9000505a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000505e:	461a      	mov	r2, r3
90005060:	2308      	movs	r3, #8
90005062:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90005064:	78fa      	ldrb	r2, [r7, #3]
90005066:	6879      	ldr	r1, [r7, #4]
90005068:	4613      	mov	r3, r2
9000506a:	011b      	lsls	r3, r3, #4
9000506c:	1a9b      	subs	r3, r3, r2
9000506e:	009b      	lsls	r3, r3, #2
90005070:	440b      	add	r3, r1
90005072:	334d      	adds	r3, #77	@ 0x4d
90005074:	2206      	movs	r2, #6
90005076:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005078:	687b      	ldr	r3, [r7, #4]
9000507a:	681b      	ldr	r3, [r3, #0]
9000507c:	78fa      	ldrb	r2, [r7, #3]
9000507e:	4611      	mov	r1, r2
90005080:	4618      	mov	r0, r3
90005082:	f006 f8b7 	bl	9000b1f4 <USB_HC_Halt>
90005086:	e2f8      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90005088:	687b      	ldr	r3, [r7, #4]
9000508a:	681b      	ldr	r3, [r3, #0]
9000508c:	78fa      	ldrb	r2, [r7, #3]
9000508e:	4611      	mov	r1, r2
90005090:	4618      	mov	r0, r3
90005092:	f006 f832 	bl	9000b0fa <USB_ReadChInterrupts>
90005096:	4603      	mov	r3, r0
90005098:	f003 0310 	and.w	r3, r3, #16
9000509c:	2b10      	cmp	r3, #16
9000509e:	d144      	bne.n	9000512a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900050a0:	78fa      	ldrb	r2, [r7, #3]
900050a2:	6879      	ldr	r1, [r7, #4]
900050a4:	4613      	mov	r3, r2
900050a6:	011b      	lsls	r3, r3, #4
900050a8:	1a9b      	subs	r3, r3, r2
900050aa:	009b      	lsls	r3, r3, #2
900050ac:	440b      	add	r3, r1
900050ae:	3344      	adds	r3, #68	@ 0x44
900050b0:	2200      	movs	r2, #0
900050b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
900050b4:	78fa      	ldrb	r2, [r7, #3]
900050b6:	6879      	ldr	r1, [r7, #4]
900050b8:	4613      	mov	r3, r2
900050ba:	011b      	lsls	r3, r3, #4
900050bc:	1a9b      	subs	r3, r3, r2
900050be:	009b      	lsls	r3, r3, #2
900050c0:	440b      	add	r3, r1
900050c2:	334d      	adds	r3, #77	@ 0x4d
900050c4:	2204      	movs	r2, #4
900050c6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
900050c8:	78fa      	ldrb	r2, [r7, #3]
900050ca:	6879      	ldr	r1, [r7, #4]
900050cc:	4613      	mov	r3, r2
900050ce:	011b      	lsls	r3, r3, #4
900050d0:	1a9b      	subs	r3, r3, r2
900050d2:	009b      	lsls	r3, r3, #2
900050d4:	440b      	add	r3, r1
900050d6:	3319      	adds	r3, #25
900050d8:	781b      	ldrb	r3, [r3, #0]
900050da:	2b00      	cmp	r3, #0
900050dc:	d114      	bne.n	90005108 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
900050de:	78fa      	ldrb	r2, [r7, #3]
900050e0:	6879      	ldr	r1, [r7, #4]
900050e2:	4613      	mov	r3, r2
900050e4:	011b      	lsls	r3, r3, #4
900050e6:	1a9b      	subs	r3, r3, r2
900050e8:	009b      	lsls	r3, r3, #2
900050ea:	440b      	add	r3, r1
900050ec:	3318      	adds	r3, #24
900050ee:	781b      	ldrb	r3, [r3, #0]
900050f0:	2b00      	cmp	r3, #0
900050f2:	d109      	bne.n	90005108 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
900050f4:	78fa      	ldrb	r2, [r7, #3]
900050f6:	6879      	ldr	r1, [r7, #4]
900050f8:	4613      	mov	r3, r2
900050fa:	011b      	lsls	r3, r3, #4
900050fc:	1a9b      	subs	r3, r3, r2
900050fe:	009b      	lsls	r3, r3, #2
90005100:	440b      	add	r3, r1
90005102:	3319      	adds	r3, #25
90005104:	2201      	movs	r2, #1
90005106:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005108:	687b      	ldr	r3, [r7, #4]
9000510a:	681b      	ldr	r3, [r3, #0]
9000510c:	78fa      	ldrb	r2, [r7, #3]
9000510e:	4611      	mov	r1, r2
90005110:	4618      	mov	r0, r3
90005112:	f006 f86f 	bl	9000b1f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90005116:	78fb      	ldrb	r3, [r7, #3]
90005118:	015a      	lsls	r2, r3, #5
9000511a:	693b      	ldr	r3, [r7, #16]
9000511c:	4413      	add	r3, r2
9000511e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005122:	461a      	mov	r2, r3
90005124:	2310      	movs	r3, #16
90005126:	6093      	str	r3, [r2, #8]
90005128:	e2a7      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
9000512a:	687b      	ldr	r3, [r7, #4]
9000512c:	681b      	ldr	r3, [r3, #0]
9000512e:	78fa      	ldrb	r2, [r7, #3]
90005130:	4611      	mov	r1, r2
90005132:	4618      	mov	r0, r3
90005134:	f005 ffe1 	bl	9000b0fa <USB_ReadChInterrupts>
90005138:	4603      	mov	r3, r0
9000513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000513e:	2b80      	cmp	r3, #128	@ 0x80
90005140:	f040 8083 	bne.w	9000524a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90005144:	687b      	ldr	r3, [r7, #4]
90005146:	799b      	ldrb	r3, [r3, #6]
90005148:	2b00      	cmp	r3, #0
9000514a:	d111      	bne.n	90005170 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
9000514c:	78fa      	ldrb	r2, [r7, #3]
9000514e:	6879      	ldr	r1, [r7, #4]
90005150:	4613      	mov	r3, r2
90005152:	011b      	lsls	r3, r3, #4
90005154:	1a9b      	subs	r3, r3, r2
90005156:	009b      	lsls	r3, r3, #2
90005158:	440b      	add	r3, r1
9000515a:	334d      	adds	r3, #77	@ 0x4d
9000515c:	2207      	movs	r2, #7
9000515e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005160:	687b      	ldr	r3, [r7, #4]
90005162:	681b      	ldr	r3, [r3, #0]
90005164:	78fa      	ldrb	r2, [r7, #3]
90005166:	4611      	mov	r1, r2
90005168:	4618      	mov	r0, r3
9000516a:	f006 f843 	bl	9000b1f4 <USB_HC_Halt>
9000516e:	e062      	b.n	90005236 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005170:	78fa      	ldrb	r2, [r7, #3]
90005172:	6879      	ldr	r1, [r7, #4]
90005174:	4613      	mov	r3, r2
90005176:	011b      	lsls	r3, r3, #4
90005178:	1a9b      	subs	r3, r3, r2
9000517a:	009b      	lsls	r3, r3, #2
9000517c:	440b      	add	r3, r1
9000517e:	3344      	adds	r3, #68	@ 0x44
90005180:	681b      	ldr	r3, [r3, #0]
90005182:	1c59      	adds	r1, r3, #1
90005184:	6878      	ldr	r0, [r7, #4]
90005186:	4613      	mov	r3, r2
90005188:	011b      	lsls	r3, r3, #4
9000518a:	1a9b      	subs	r3, r3, r2
9000518c:	009b      	lsls	r3, r3, #2
9000518e:	4403      	add	r3, r0
90005190:	3344      	adds	r3, #68	@ 0x44
90005192:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005194:	78fa      	ldrb	r2, [r7, #3]
90005196:	6879      	ldr	r1, [r7, #4]
90005198:	4613      	mov	r3, r2
9000519a:	011b      	lsls	r3, r3, #4
9000519c:	1a9b      	subs	r3, r3, r2
9000519e:	009b      	lsls	r3, r3, #2
900051a0:	440b      	add	r3, r1
900051a2:	3344      	adds	r3, #68	@ 0x44
900051a4:	681b      	ldr	r3, [r3, #0]
900051a6:	2b02      	cmp	r3, #2
900051a8:	d922      	bls.n	900051f0 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900051aa:	78fa      	ldrb	r2, [r7, #3]
900051ac:	6879      	ldr	r1, [r7, #4]
900051ae:	4613      	mov	r3, r2
900051b0:	011b      	lsls	r3, r3, #4
900051b2:	1a9b      	subs	r3, r3, r2
900051b4:	009b      	lsls	r3, r3, #2
900051b6:	440b      	add	r3, r1
900051b8:	3344      	adds	r3, #68	@ 0x44
900051ba:	2200      	movs	r2, #0
900051bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900051be:	78fa      	ldrb	r2, [r7, #3]
900051c0:	6879      	ldr	r1, [r7, #4]
900051c2:	4613      	mov	r3, r2
900051c4:	011b      	lsls	r3, r3, #4
900051c6:	1a9b      	subs	r3, r3, r2
900051c8:	009b      	lsls	r3, r3, #2
900051ca:	440b      	add	r3, r1
900051cc:	334c      	adds	r3, #76	@ 0x4c
900051ce:	2204      	movs	r2, #4
900051d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900051d2:	78fa      	ldrb	r2, [r7, #3]
900051d4:	6879      	ldr	r1, [r7, #4]
900051d6:	4613      	mov	r3, r2
900051d8:	011b      	lsls	r3, r3, #4
900051da:	1a9b      	subs	r3, r3, r2
900051dc:	009b      	lsls	r3, r3, #2
900051de:	440b      	add	r3, r1
900051e0:	334c      	adds	r3, #76	@ 0x4c
900051e2:	781a      	ldrb	r2, [r3, #0]
900051e4:	78fb      	ldrb	r3, [r7, #3]
900051e6:	4619      	mov	r1, r3
900051e8:	6878      	ldr	r0, [r7, #4]
900051ea:	f7fc f80f 	bl	9000120c <HAL_HCD_HC_NotifyURBChange_Callback>
900051ee:	e022      	b.n	90005236 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900051f0:	78fa      	ldrb	r2, [r7, #3]
900051f2:	6879      	ldr	r1, [r7, #4]
900051f4:	4613      	mov	r3, r2
900051f6:	011b      	lsls	r3, r3, #4
900051f8:	1a9b      	subs	r3, r3, r2
900051fa:	009b      	lsls	r3, r3, #2
900051fc:	440b      	add	r3, r1
900051fe:	334c      	adds	r3, #76	@ 0x4c
90005200:	2202      	movs	r2, #2
90005202:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005204:	78fb      	ldrb	r3, [r7, #3]
90005206:	015a      	lsls	r2, r3, #5
90005208:	693b      	ldr	r3, [r7, #16]
9000520a:	4413      	add	r3, r2
9000520c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005210:	681b      	ldr	r3, [r3, #0]
90005212:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005214:	68fb      	ldr	r3, [r7, #12]
90005216:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000521a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
9000521c:	68fb      	ldr	r3, [r7, #12]
9000521e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005222:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005224:	78fb      	ldrb	r3, [r7, #3]
90005226:	015a      	lsls	r2, r3, #5
90005228:	693b      	ldr	r3, [r7, #16]
9000522a:	4413      	add	r3, r2
9000522c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005230:	461a      	mov	r2, r3
90005232:	68fb      	ldr	r3, [r7, #12]
90005234:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90005236:	78fb      	ldrb	r3, [r7, #3]
90005238:	015a      	lsls	r2, r3, #5
9000523a:	693b      	ldr	r3, [r7, #16]
9000523c:	4413      	add	r3, r2
9000523e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005242:	461a      	mov	r2, r3
90005244:	2380      	movs	r3, #128	@ 0x80
90005246:	6093      	str	r3, [r2, #8]
90005248:	e217      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
9000524a:	687b      	ldr	r3, [r7, #4]
9000524c:	681b      	ldr	r3, [r3, #0]
9000524e:	78fa      	ldrb	r2, [r7, #3]
90005250:	4611      	mov	r1, r2
90005252:	4618      	mov	r0, r3
90005254:	f005 ff51 	bl	9000b0fa <USB_ReadChInterrupts>
90005258:	4603      	mov	r3, r0
9000525a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000525e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90005262:	d11b      	bne.n	9000529c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005264:	78fa      	ldrb	r2, [r7, #3]
90005266:	6879      	ldr	r1, [r7, #4]
90005268:	4613      	mov	r3, r2
9000526a:	011b      	lsls	r3, r3, #4
9000526c:	1a9b      	subs	r3, r3, r2
9000526e:	009b      	lsls	r3, r3, #2
90005270:	440b      	add	r3, r1
90005272:	334d      	adds	r3, #77	@ 0x4d
90005274:	2209      	movs	r2, #9
90005276:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005278:	687b      	ldr	r3, [r7, #4]
9000527a:	681b      	ldr	r3, [r3, #0]
9000527c:	78fa      	ldrb	r2, [r7, #3]
9000527e:	4611      	mov	r1, r2
90005280:	4618      	mov	r0, r3
90005282:	f005 ffb7 	bl	9000b1f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005286:	78fb      	ldrb	r3, [r7, #3]
90005288:	015a      	lsls	r2, r3, #5
9000528a:	693b      	ldr	r3, [r7, #16]
9000528c:	4413      	add	r3, r2
9000528e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005292:	461a      	mov	r2, r3
90005294:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005298:	6093      	str	r3, [r2, #8]
9000529a:	e1ee      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000529c:	687b      	ldr	r3, [r7, #4]
9000529e:	681b      	ldr	r3, [r3, #0]
900052a0:	78fa      	ldrb	r2, [r7, #3]
900052a2:	4611      	mov	r1, r2
900052a4:	4618      	mov	r0, r3
900052a6:	f005 ff28 	bl	9000b0fa <USB_ReadChInterrupts>
900052aa:	4603      	mov	r3, r0
900052ac:	f003 0302 	and.w	r3, r3, #2
900052b0:	2b02      	cmp	r3, #2
900052b2:	f040 81df 	bne.w	90005674 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900052b6:	78fb      	ldrb	r3, [r7, #3]
900052b8:	015a      	lsls	r2, r3, #5
900052ba:	693b      	ldr	r3, [r7, #16]
900052bc:	4413      	add	r3, r2
900052be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900052c2:	461a      	mov	r2, r3
900052c4:	2302      	movs	r3, #2
900052c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900052c8:	78fa      	ldrb	r2, [r7, #3]
900052ca:	6879      	ldr	r1, [r7, #4]
900052cc:	4613      	mov	r3, r2
900052ce:	011b      	lsls	r3, r3, #4
900052d0:	1a9b      	subs	r3, r3, r2
900052d2:	009b      	lsls	r3, r3, #2
900052d4:	440b      	add	r3, r1
900052d6:	334d      	adds	r3, #77	@ 0x4d
900052d8:	781b      	ldrb	r3, [r3, #0]
900052da:	2b01      	cmp	r3, #1
900052dc:	f040 8093 	bne.w	90005406 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052e0:	78fa      	ldrb	r2, [r7, #3]
900052e2:	6879      	ldr	r1, [r7, #4]
900052e4:	4613      	mov	r3, r2
900052e6:	011b      	lsls	r3, r3, #4
900052e8:	1a9b      	subs	r3, r3, r2
900052ea:	009b      	lsls	r3, r3, #2
900052ec:	440b      	add	r3, r1
900052ee:	334d      	adds	r3, #77	@ 0x4d
900052f0:	2202      	movs	r2, #2
900052f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900052f4:	78fa      	ldrb	r2, [r7, #3]
900052f6:	6879      	ldr	r1, [r7, #4]
900052f8:	4613      	mov	r3, r2
900052fa:	011b      	lsls	r3, r3, #4
900052fc:	1a9b      	subs	r3, r3, r2
900052fe:	009b      	lsls	r3, r3, #2
90005300:	440b      	add	r3, r1
90005302:	334c      	adds	r3, #76	@ 0x4c
90005304:	2201      	movs	r2, #1
90005306:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005308:	78fa      	ldrb	r2, [r7, #3]
9000530a:	6879      	ldr	r1, [r7, #4]
9000530c:	4613      	mov	r3, r2
9000530e:	011b      	lsls	r3, r3, #4
90005310:	1a9b      	subs	r3, r3, r2
90005312:	009b      	lsls	r3, r3, #2
90005314:	440b      	add	r3, r1
90005316:	3326      	adds	r3, #38	@ 0x26
90005318:	781b      	ldrb	r3, [r3, #0]
9000531a:	2b02      	cmp	r3, #2
9000531c:	d00b      	beq.n	90005336 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
9000531e:	78fa      	ldrb	r2, [r7, #3]
90005320:	6879      	ldr	r1, [r7, #4]
90005322:	4613      	mov	r3, r2
90005324:	011b      	lsls	r3, r3, #4
90005326:	1a9b      	subs	r3, r3, r2
90005328:	009b      	lsls	r3, r3, #2
9000532a:	440b      	add	r3, r1
9000532c:	3326      	adds	r3, #38	@ 0x26
9000532e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005330:	2b03      	cmp	r3, #3
90005332:	f040 8190 	bne.w	90005656 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
90005336:	687b      	ldr	r3, [r7, #4]
90005338:	799b      	ldrb	r3, [r3, #6]
9000533a:	2b00      	cmp	r3, #0
9000533c:	d115      	bne.n	9000536a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
9000533e:	78fa      	ldrb	r2, [r7, #3]
90005340:	6879      	ldr	r1, [r7, #4]
90005342:	4613      	mov	r3, r2
90005344:	011b      	lsls	r3, r3, #4
90005346:	1a9b      	subs	r3, r3, r2
90005348:	009b      	lsls	r3, r3, #2
9000534a:	440b      	add	r3, r1
9000534c:	333d      	adds	r3, #61	@ 0x3d
9000534e:	781b      	ldrb	r3, [r3, #0]
90005350:	78fa      	ldrb	r2, [r7, #3]
90005352:	f083 0301 	eor.w	r3, r3, #1
90005356:	b2d8      	uxtb	r0, r3
90005358:	6879      	ldr	r1, [r7, #4]
9000535a:	4613      	mov	r3, r2
9000535c:	011b      	lsls	r3, r3, #4
9000535e:	1a9b      	subs	r3, r3, r2
90005360:	009b      	lsls	r3, r3, #2
90005362:	440b      	add	r3, r1
90005364:	333d      	adds	r3, #61	@ 0x3d
90005366:	4602      	mov	r2, r0
90005368:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
9000536a:	687b      	ldr	r3, [r7, #4]
9000536c:	799b      	ldrb	r3, [r3, #6]
9000536e:	2b01      	cmp	r3, #1
90005370:	f040 8171 	bne.w	90005656 <HCD_HC_OUT_IRQHandler+0x954>
90005374:	78fa      	ldrb	r2, [r7, #3]
90005376:	6879      	ldr	r1, [r7, #4]
90005378:	4613      	mov	r3, r2
9000537a:	011b      	lsls	r3, r3, #4
9000537c:	1a9b      	subs	r3, r3, r2
9000537e:	009b      	lsls	r3, r3, #2
90005380:	440b      	add	r3, r1
90005382:	3334      	adds	r3, #52	@ 0x34
90005384:	681b      	ldr	r3, [r3, #0]
90005386:	2b00      	cmp	r3, #0
90005388:	f000 8165 	beq.w	90005656 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
9000538c:	78fa      	ldrb	r2, [r7, #3]
9000538e:	6879      	ldr	r1, [r7, #4]
90005390:	4613      	mov	r3, r2
90005392:	011b      	lsls	r3, r3, #4
90005394:	1a9b      	subs	r3, r3, r2
90005396:	009b      	lsls	r3, r3, #2
90005398:	440b      	add	r3, r1
9000539a:	3334      	adds	r3, #52	@ 0x34
9000539c:	6819      	ldr	r1, [r3, #0]
9000539e:	78fa      	ldrb	r2, [r7, #3]
900053a0:	6878      	ldr	r0, [r7, #4]
900053a2:	4613      	mov	r3, r2
900053a4:	011b      	lsls	r3, r3, #4
900053a6:	1a9b      	subs	r3, r3, r2
900053a8:	009b      	lsls	r3, r3, #2
900053aa:	4403      	add	r3, r0
900053ac:	3328      	adds	r3, #40	@ 0x28
900053ae:	881b      	ldrh	r3, [r3, #0]
900053b0:	440b      	add	r3, r1
900053b2:	1e59      	subs	r1, r3, #1
900053b4:	78fa      	ldrb	r2, [r7, #3]
900053b6:	6878      	ldr	r0, [r7, #4]
900053b8:	4613      	mov	r3, r2
900053ba:	011b      	lsls	r3, r3, #4
900053bc:	1a9b      	subs	r3, r3, r2
900053be:	009b      	lsls	r3, r3, #2
900053c0:	4403      	add	r3, r0
900053c2:	3328      	adds	r3, #40	@ 0x28
900053c4:	881b      	ldrh	r3, [r3, #0]
900053c6:	fbb1 f3f3 	udiv	r3, r1, r3
900053ca:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
900053cc:	68bb      	ldr	r3, [r7, #8]
900053ce:	f003 0301 	and.w	r3, r3, #1
900053d2:	2b00      	cmp	r3, #0
900053d4:	f000 813f 	beq.w	90005656 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
900053d8:	78fa      	ldrb	r2, [r7, #3]
900053da:	6879      	ldr	r1, [r7, #4]
900053dc:	4613      	mov	r3, r2
900053de:	011b      	lsls	r3, r3, #4
900053e0:	1a9b      	subs	r3, r3, r2
900053e2:	009b      	lsls	r3, r3, #2
900053e4:	440b      	add	r3, r1
900053e6:	333d      	adds	r3, #61	@ 0x3d
900053e8:	781b      	ldrb	r3, [r3, #0]
900053ea:	78fa      	ldrb	r2, [r7, #3]
900053ec:	f083 0301 	eor.w	r3, r3, #1
900053f0:	b2d8      	uxtb	r0, r3
900053f2:	6879      	ldr	r1, [r7, #4]
900053f4:	4613      	mov	r3, r2
900053f6:	011b      	lsls	r3, r3, #4
900053f8:	1a9b      	subs	r3, r3, r2
900053fa:	009b      	lsls	r3, r3, #2
900053fc:	440b      	add	r3, r1
900053fe:	333d      	adds	r3, #61	@ 0x3d
90005400:	4602      	mov	r2, r0
90005402:	701a      	strb	r2, [r3, #0]
90005404:	e127      	b.n	90005656 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005406:	78fa      	ldrb	r2, [r7, #3]
90005408:	6879      	ldr	r1, [r7, #4]
9000540a:	4613      	mov	r3, r2
9000540c:	011b      	lsls	r3, r3, #4
9000540e:	1a9b      	subs	r3, r3, r2
90005410:	009b      	lsls	r3, r3, #2
90005412:	440b      	add	r3, r1
90005414:	334d      	adds	r3, #77	@ 0x4d
90005416:	781b      	ldrb	r3, [r3, #0]
90005418:	2b03      	cmp	r3, #3
9000541a:	d120      	bne.n	9000545e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000541c:	78fa      	ldrb	r2, [r7, #3]
9000541e:	6879      	ldr	r1, [r7, #4]
90005420:	4613      	mov	r3, r2
90005422:	011b      	lsls	r3, r3, #4
90005424:	1a9b      	subs	r3, r3, r2
90005426:	009b      	lsls	r3, r3, #2
90005428:	440b      	add	r3, r1
9000542a:	334d      	adds	r3, #77	@ 0x4d
9000542c:	2202      	movs	r2, #2
9000542e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005430:	78fa      	ldrb	r2, [r7, #3]
90005432:	6879      	ldr	r1, [r7, #4]
90005434:	4613      	mov	r3, r2
90005436:	011b      	lsls	r3, r3, #4
90005438:	1a9b      	subs	r3, r3, r2
9000543a:	009b      	lsls	r3, r3, #2
9000543c:	440b      	add	r3, r1
9000543e:	331b      	adds	r3, #27
90005440:	781b      	ldrb	r3, [r3, #0]
90005442:	2b01      	cmp	r3, #1
90005444:	f040 8107 	bne.w	90005656 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005448:	78fa      	ldrb	r2, [r7, #3]
9000544a:	6879      	ldr	r1, [r7, #4]
9000544c:	4613      	mov	r3, r2
9000544e:	011b      	lsls	r3, r3, #4
90005450:	1a9b      	subs	r3, r3, r2
90005452:	009b      	lsls	r3, r3, #2
90005454:	440b      	add	r3, r1
90005456:	334c      	adds	r3, #76	@ 0x4c
90005458:	2202      	movs	r2, #2
9000545a:	701a      	strb	r2, [r3, #0]
9000545c:	e0fb      	b.n	90005656 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
9000545e:	78fa      	ldrb	r2, [r7, #3]
90005460:	6879      	ldr	r1, [r7, #4]
90005462:	4613      	mov	r3, r2
90005464:	011b      	lsls	r3, r3, #4
90005466:	1a9b      	subs	r3, r3, r2
90005468:	009b      	lsls	r3, r3, #2
9000546a:	440b      	add	r3, r1
9000546c:	334d      	adds	r3, #77	@ 0x4d
9000546e:	781b      	ldrb	r3, [r3, #0]
90005470:	2b04      	cmp	r3, #4
90005472:	d13a      	bne.n	900054ea <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005474:	78fa      	ldrb	r2, [r7, #3]
90005476:	6879      	ldr	r1, [r7, #4]
90005478:	4613      	mov	r3, r2
9000547a:	011b      	lsls	r3, r3, #4
9000547c:	1a9b      	subs	r3, r3, r2
9000547e:	009b      	lsls	r3, r3, #2
90005480:	440b      	add	r3, r1
90005482:	334d      	adds	r3, #77	@ 0x4d
90005484:	2202      	movs	r2, #2
90005486:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005488:	78fa      	ldrb	r2, [r7, #3]
9000548a:	6879      	ldr	r1, [r7, #4]
9000548c:	4613      	mov	r3, r2
9000548e:	011b      	lsls	r3, r3, #4
90005490:	1a9b      	subs	r3, r3, r2
90005492:	009b      	lsls	r3, r3, #2
90005494:	440b      	add	r3, r1
90005496:	334c      	adds	r3, #76	@ 0x4c
90005498:	2202      	movs	r2, #2
9000549a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000549c:	78fa      	ldrb	r2, [r7, #3]
9000549e:	6879      	ldr	r1, [r7, #4]
900054a0:	4613      	mov	r3, r2
900054a2:	011b      	lsls	r3, r3, #4
900054a4:	1a9b      	subs	r3, r3, r2
900054a6:	009b      	lsls	r3, r3, #2
900054a8:	440b      	add	r3, r1
900054aa:	331b      	adds	r3, #27
900054ac:	781b      	ldrb	r3, [r3, #0]
900054ae:	2b01      	cmp	r3, #1
900054b0:	f040 80d1 	bne.w	90005656 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
900054b4:	78fa      	ldrb	r2, [r7, #3]
900054b6:	6879      	ldr	r1, [r7, #4]
900054b8:	4613      	mov	r3, r2
900054ba:	011b      	lsls	r3, r3, #4
900054bc:	1a9b      	subs	r3, r3, r2
900054be:	009b      	lsls	r3, r3, #2
900054c0:	440b      	add	r3, r1
900054c2:	331b      	adds	r3, #27
900054c4:	2200      	movs	r2, #0
900054c6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900054c8:	78fb      	ldrb	r3, [r7, #3]
900054ca:	015a      	lsls	r2, r3, #5
900054cc:	693b      	ldr	r3, [r7, #16]
900054ce:	4413      	add	r3, r2
900054d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054d4:	685b      	ldr	r3, [r3, #4]
900054d6:	78fa      	ldrb	r2, [r7, #3]
900054d8:	0151      	lsls	r1, r2, #5
900054da:	693a      	ldr	r2, [r7, #16]
900054dc:	440a      	add	r2, r1
900054de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900054e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900054e6:	6053      	str	r3, [r2, #4]
900054e8:	e0b5      	b.n	90005656 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900054ea:	78fa      	ldrb	r2, [r7, #3]
900054ec:	6879      	ldr	r1, [r7, #4]
900054ee:	4613      	mov	r3, r2
900054f0:	011b      	lsls	r3, r3, #4
900054f2:	1a9b      	subs	r3, r3, r2
900054f4:	009b      	lsls	r3, r3, #2
900054f6:	440b      	add	r3, r1
900054f8:	334d      	adds	r3, #77	@ 0x4d
900054fa:	781b      	ldrb	r3, [r3, #0]
900054fc:	2b05      	cmp	r3, #5
900054fe:	d114      	bne.n	9000552a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005500:	78fa      	ldrb	r2, [r7, #3]
90005502:	6879      	ldr	r1, [r7, #4]
90005504:	4613      	mov	r3, r2
90005506:	011b      	lsls	r3, r3, #4
90005508:	1a9b      	subs	r3, r3, r2
9000550a:	009b      	lsls	r3, r3, #2
9000550c:	440b      	add	r3, r1
9000550e:	334d      	adds	r3, #77	@ 0x4d
90005510:	2202      	movs	r2, #2
90005512:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005514:	78fa      	ldrb	r2, [r7, #3]
90005516:	6879      	ldr	r1, [r7, #4]
90005518:	4613      	mov	r3, r2
9000551a:	011b      	lsls	r3, r3, #4
9000551c:	1a9b      	subs	r3, r3, r2
9000551e:	009b      	lsls	r3, r3, #2
90005520:	440b      	add	r3, r1
90005522:	334c      	adds	r3, #76	@ 0x4c
90005524:	2202      	movs	r2, #2
90005526:	701a      	strb	r2, [r3, #0]
90005528:	e095      	b.n	90005656 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000552a:	78fa      	ldrb	r2, [r7, #3]
9000552c:	6879      	ldr	r1, [r7, #4]
9000552e:	4613      	mov	r3, r2
90005530:	011b      	lsls	r3, r3, #4
90005532:	1a9b      	subs	r3, r3, r2
90005534:	009b      	lsls	r3, r3, #2
90005536:	440b      	add	r3, r1
90005538:	334d      	adds	r3, #77	@ 0x4d
9000553a:	781b      	ldrb	r3, [r3, #0]
9000553c:	2b06      	cmp	r3, #6
9000553e:	d114      	bne.n	9000556a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005540:	78fa      	ldrb	r2, [r7, #3]
90005542:	6879      	ldr	r1, [r7, #4]
90005544:	4613      	mov	r3, r2
90005546:	011b      	lsls	r3, r3, #4
90005548:	1a9b      	subs	r3, r3, r2
9000554a:	009b      	lsls	r3, r3, #2
9000554c:	440b      	add	r3, r1
9000554e:	334d      	adds	r3, #77	@ 0x4d
90005550:	2202      	movs	r2, #2
90005552:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
90005554:	78fa      	ldrb	r2, [r7, #3]
90005556:	6879      	ldr	r1, [r7, #4]
90005558:	4613      	mov	r3, r2
9000555a:	011b      	lsls	r3, r3, #4
9000555c:	1a9b      	subs	r3, r3, r2
9000555e:	009b      	lsls	r3, r3, #2
90005560:	440b      	add	r3, r1
90005562:	334c      	adds	r3, #76	@ 0x4c
90005564:	2205      	movs	r2, #5
90005566:	701a      	strb	r2, [r3, #0]
90005568:	e075      	b.n	90005656 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000556a:	78fa      	ldrb	r2, [r7, #3]
9000556c:	6879      	ldr	r1, [r7, #4]
9000556e:	4613      	mov	r3, r2
90005570:	011b      	lsls	r3, r3, #4
90005572:	1a9b      	subs	r3, r3, r2
90005574:	009b      	lsls	r3, r3, #2
90005576:	440b      	add	r3, r1
90005578:	334d      	adds	r3, #77	@ 0x4d
9000557a:	781b      	ldrb	r3, [r3, #0]
9000557c:	2b07      	cmp	r3, #7
9000557e:	d00a      	beq.n	90005596 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005580:	78fa      	ldrb	r2, [r7, #3]
90005582:	6879      	ldr	r1, [r7, #4]
90005584:	4613      	mov	r3, r2
90005586:	011b      	lsls	r3, r3, #4
90005588:	1a9b      	subs	r3, r3, r2
9000558a:	009b      	lsls	r3, r3, #2
9000558c:	440b      	add	r3, r1
9000558e:	334d      	adds	r3, #77	@ 0x4d
90005590:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005592:	2b09      	cmp	r3, #9
90005594:	d170      	bne.n	90005678 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005596:	78fa      	ldrb	r2, [r7, #3]
90005598:	6879      	ldr	r1, [r7, #4]
9000559a:	4613      	mov	r3, r2
9000559c:	011b      	lsls	r3, r3, #4
9000559e:	1a9b      	subs	r3, r3, r2
900055a0:	009b      	lsls	r3, r3, #2
900055a2:	440b      	add	r3, r1
900055a4:	334d      	adds	r3, #77	@ 0x4d
900055a6:	2202      	movs	r2, #2
900055a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900055aa:	78fa      	ldrb	r2, [r7, #3]
900055ac:	6879      	ldr	r1, [r7, #4]
900055ae:	4613      	mov	r3, r2
900055b0:	011b      	lsls	r3, r3, #4
900055b2:	1a9b      	subs	r3, r3, r2
900055b4:	009b      	lsls	r3, r3, #2
900055b6:	440b      	add	r3, r1
900055b8:	3344      	adds	r3, #68	@ 0x44
900055ba:	681b      	ldr	r3, [r3, #0]
900055bc:	1c59      	adds	r1, r3, #1
900055be:	6878      	ldr	r0, [r7, #4]
900055c0:	4613      	mov	r3, r2
900055c2:	011b      	lsls	r3, r3, #4
900055c4:	1a9b      	subs	r3, r3, r2
900055c6:	009b      	lsls	r3, r3, #2
900055c8:	4403      	add	r3, r0
900055ca:	3344      	adds	r3, #68	@ 0x44
900055cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900055ce:	78fa      	ldrb	r2, [r7, #3]
900055d0:	6879      	ldr	r1, [r7, #4]
900055d2:	4613      	mov	r3, r2
900055d4:	011b      	lsls	r3, r3, #4
900055d6:	1a9b      	subs	r3, r3, r2
900055d8:	009b      	lsls	r3, r3, #2
900055da:	440b      	add	r3, r1
900055dc:	3344      	adds	r3, #68	@ 0x44
900055de:	681b      	ldr	r3, [r3, #0]
900055e0:	2b02      	cmp	r3, #2
900055e2:	d914      	bls.n	9000560e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900055e4:	78fa      	ldrb	r2, [r7, #3]
900055e6:	6879      	ldr	r1, [r7, #4]
900055e8:	4613      	mov	r3, r2
900055ea:	011b      	lsls	r3, r3, #4
900055ec:	1a9b      	subs	r3, r3, r2
900055ee:	009b      	lsls	r3, r3, #2
900055f0:	440b      	add	r3, r1
900055f2:	3344      	adds	r3, #68	@ 0x44
900055f4:	2200      	movs	r2, #0
900055f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900055f8:	78fa      	ldrb	r2, [r7, #3]
900055fa:	6879      	ldr	r1, [r7, #4]
900055fc:	4613      	mov	r3, r2
900055fe:	011b      	lsls	r3, r3, #4
90005600:	1a9b      	subs	r3, r3, r2
90005602:	009b      	lsls	r3, r3, #2
90005604:	440b      	add	r3, r1
90005606:	334c      	adds	r3, #76	@ 0x4c
90005608:	2204      	movs	r2, #4
9000560a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000560c:	e022      	b.n	90005654 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000560e:	78fa      	ldrb	r2, [r7, #3]
90005610:	6879      	ldr	r1, [r7, #4]
90005612:	4613      	mov	r3, r2
90005614:	011b      	lsls	r3, r3, #4
90005616:	1a9b      	subs	r3, r3, r2
90005618:	009b      	lsls	r3, r3, #2
9000561a:	440b      	add	r3, r1
9000561c:	334c      	adds	r3, #76	@ 0x4c
9000561e:	2202      	movs	r2, #2
90005620:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005622:	78fb      	ldrb	r3, [r7, #3]
90005624:	015a      	lsls	r2, r3, #5
90005626:	693b      	ldr	r3, [r7, #16]
90005628:	4413      	add	r3, r2
9000562a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000562e:	681b      	ldr	r3, [r3, #0]
90005630:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005632:	68fb      	ldr	r3, [r7, #12]
90005634:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005638:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
9000563a:	68fb      	ldr	r3, [r7, #12]
9000563c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005640:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005642:	78fb      	ldrb	r3, [r7, #3]
90005644:	015a      	lsls	r2, r3, #5
90005646:	693b      	ldr	r3, [r7, #16]
90005648:	4413      	add	r3, r2
9000564a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000564e:	461a      	mov	r2, r3
90005650:	68fb      	ldr	r3, [r7, #12]
90005652:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005654:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005656:	78fa      	ldrb	r2, [r7, #3]
90005658:	6879      	ldr	r1, [r7, #4]
9000565a:	4613      	mov	r3, r2
9000565c:	011b      	lsls	r3, r3, #4
9000565e:	1a9b      	subs	r3, r3, r2
90005660:	009b      	lsls	r3, r3, #2
90005662:	440b      	add	r3, r1
90005664:	334c      	adds	r3, #76	@ 0x4c
90005666:	781a      	ldrb	r2, [r3, #0]
90005668:	78fb      	ldrb	r3, [r7, #3]
9000566a:	4619      	mov	r1, r3
9000566c:	6878      	ldr	r0, [r7, #4]
9000566e:	f7fb fdcd 	bl	9000120c <HAL_HCD_HC_NotifyURBChange_Callback>
90005672:	e002      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005674:	bf00      	nop
90005676:	e000      	b.n	9000567a <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005678:	bf00      	nop
  }
}
9000567a:	3718      	adds	r7, #24
9000567c:	46bd      	mov	sp, r7
9000567e:	bd80      	pop	{r7, pc}

90005680 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005680:	b580      	push	{r7, lr}
90005682:	b08a      	sub	sp, #40	@ 0x28
90005684:	af00      	add	r7, sp, #0
90005686:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005688:	687b      	ldr	r3, [r7, #4]
9000568a:	681b      	ldr	r3, [r3, #0]
9000568c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
9000568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005690:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005692:	687b      	ldr	r3, [r7, #4]
90005694:	681b      	ldr	r3, [r3, #0]
90005696:	6a1b      	ldr	r3, [r3, #32]
90005698:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
9000569a:	69fb      	ldr	r3, [r7, #28]
9000569c:	f003 030f 	and.w	r3, r3, #15
900056a0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
900056a2:	69fb      	ldr	r3, [r7, #28]
900056a4:	0c5b      	lsrs	r3, r3, #17
900056a6:	f003 030f 	and.w	r3, r3, #15
900056aa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
900056ac:	69fb      	ldr	r3, [r7, #28]
900056ae:	091b      	lsrs	r3, r3, #4
900056b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
900056b4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
900056b6:	697b      	ldr	r3, [r7, #20]
900056b8:	2b02      	cmp	r3, #2
900056ba:	d004      	beq.n	900056c6 <HCD_RXQLVL_IRQHandler+0x46>
900056bc:	697b      	ldr	r3, [r7, #20]
900056be:	2b05      	cmp	r3, #5
900056c0:	f000 80b6 	beq.w	90005830 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900056c4:	e0b7      	b.n	90005836 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900056c6:	693b      	ldr	r3, [r7, #16]
900056c8:	2b00      	cmp	r3, #0
900056ca:	f000 80b3 	beq.w	90005834 <HCD_RXQLVL_IRQHandler+0x1b4>
900056ce:	6879      	ldr	r1, [r7, #4]
900056d0:	69ba      	ldr	r2, [r7, #24]
900056d2:	4613      	mov	r3, r2
900056d4:	011b      	lsls	r3, r3, #4
900056d6:	1a9b      	subs	r3, r3, r2
900056d8:	009b      	lsls	r3, r3, #2
900056da:	440b      	add	r3, r1
900056dc:	332c      	adds	r3, #44	@ 0x2c
900056de:	681b      	ldr	r3, [r3, #0]
900056e0:	2b00      	cmp	r3, #0
900056e2:	f000 80a7 	beq.w	90005834 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
900056e6:	6879      	ldr	r1, [r7, #4]
900056e8:	69ba      	ldr	r2, [r7, #24]
900056ea:	4613      	mov	r3, r2
900056ec:	011b      	lsls	r3, r3, #4
900056ee:	1a9b      	subs	r3, r3, r2
900056f0:	009b      	lsls	r3, r3, #2
900056f2:	440b      	add	r3, r1
900056f4:	3338      	adds	r3, #56	@ 0x38
900056f6:	681a      	ldr	r2, [r3, #0]
900056f8:	693b      	ldr	r3, [r7, #16]
900056fa:	18d1      	adds	r1, r2, r3
900056fc:	6878      	ldr	r0, [r7, #4]
900056fe:	69ba      	ldr	r2, [r7, #24]
90005700:	4613      	mov	r3, r2
90005702:	011b      	lsls	r3, r3, #4
90005704:	1a9b      	subs	r3, r3, r2
90005706:	009b      	lsls	r3, r3, #2
90005708:	4403      	add	r3, r0
9000570a:	3334      	adds	r3, #52	@ 0x34
9000570c:	681b      	ldr	r3, [r3, #0]
9000570e:	4299      	cmp	r1, r3
90005710:	f200 8083 	bhi.w	9000581a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005714:	687b      	ldr	r3, [r7, #4]
90005716:	6818      	ldr	r0, [r3, #0]
90005718:	6879      	ldr	r1, [r7, #4]
9000571a:	69ba      	ldr	r2, [r7, #24]
9000571c:	4613      	mov	r3, r2
9000571e:	011b      	lsls	r3, r3, #4
90005720:	1a9b      	subs	r3, r3, r2
90005722:	009b      	lsls	r3, r3, #2
90005724:	440b      	add	r3, r1
90005726:	332c      	adds	r3, #44	@ 0x2c
90005728:	681b      	ldr	r3, [r3, #0]
9000572a:	693a      	ldr	r2, [r7, #16]
9000572c:	b292      	uxth	r2, r2
9000572e:	4619      	mov	r1, r3
90005730:	f005 fc78 	bl	9000b024 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90005734:	6879      	ldr	r1, [r7, #4]
90005736:	69ba      	ldr	r2, [r7, #24]
90005738:	4613      	mov	r3, r2
9000573a:	011b      	lsls	r3, r3, #4
9000573c:	1a9b      	subs	r3, r3, r2
9000573e:	009b      	lsls	r3, r3, #2
90005740:	440b      	add	r3, r1
90005742:	332c      	adds	r3, #44	@ 0x2c
90005744:	681a      	ldr	r2, [r3, #0]
90005746:	693b      	ldr	r3, [r7, #16]
90005748:	18d1      	adds	r1, r2, r3
9000574a:	6878      	ldr	r0, [r7, #4]
9000574c:	69ba      	ldr	r2, [r7, #24]
9000574e:	4613      	mov	r3, r2
90005750:	011b      	lsls	r3, r3, #4
90005752:	1a9b      	subs	r3, r3, r2
90005754:	009b      	lsls	r3, r3, #2
90005756:	4403      	add	r3, r0
90005758:	332c      	adds	r3, #44	@ 0x2c
9000575a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
9000575c:	6879      	ldr	r1, [r7, #4]
9000575e:	69ba      	ldr	r2, [r7, #24]
90005760:	4613      	mov	r3, r2
90005762:	011b      	lsls	r3, r3, #4
90005764:	1a9b      	subs	r3, r3, r2
90005766:	009b      	lsls	r3, r3, #2
90005768:	440b      	add	r3, r1
9000576a:	3338      	adds	r3, #56	@ 0x38
9000576c:	681a      	ldr	r2, [r3, #0]
9000576e:	693b      	ldr	r3, [r7, #16]
90005770:	18d1      	adds	r1, r2, r3
90005772:	6878      	ldr	r0, [r7, #4]
90005774:	69ba      	ldr	r2, [r7, #24]
90005776:	4613      	mov	r3, r2
90005778:	011b      	lsls	r3, r3, #4
9000577a:	1a9b      	subs	r3, r3, r2
9000577c:	009b      	lsls	r3, r3, #2
9000577e:	4403      	add	r3, r0
90005780:	3338      	adds	r3, #56	@ 0x38
90005782:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005784:	69bb      	ldr	r3, [r7, #24]
90005786:	015a      	lsls	r2, r3, #5
90005788:	6a3b      	ldr	r3, [r7, #32]
9000578a:	4413      	add	r3, r2
9000578c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005790:	691b      	ldr	r3, [r3, #16]
90005792:	0cdb      	lsrs	r3, r3, #19
90005794:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005798:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
9000579a:	6879      	ldr	r1, [r7, #4]
9000579c:	69ba      	ldr	r2, [r7, #24]
9000579e:	4613      	mov	r3, r2
900057a0:	011b      	lsls	r3, r3, #4
900057a2:	1a9b      	subs	r3, r3, r2
900057a4:	009b      	lsls	r3, r3, #2
900057a6:	440b      	add	r3, r1
900057a8:	3328      	adds	r3, #40	@ 0x28
900057aa:	881b      	ldrh	r3, [r3, #0]
900057ac:	461a      	mov	r2, r3
900057ae:	693b      	ldr	r3, [r7, #16]
900057b0:	4293      	cmp	r3, r2
900057b2:	d13f      	bne.n	90005834 <HCD_RXQLVL_IRQHandler+0x1b4>
900057b4:	68fb      	ldr	r3, [r7, #12]
900057b6:	2b00      	cmp	r3, #0
900057b8:	d03c      	beq.n	90005834 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
900057ba:	69bb      	ldr	r3, [r7, #24]
900057bc:	015a      	lsls	r2, r3, #5
900057be:	6a3b      	ldr	r3, [r7, #32]
900057c0:	4413      	add	r3, r2
900057c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057c6:	681b      	ldr	r3, [r3, #0]
900057c8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900057ca:	68bb      	ldr	r3, [r7, #8]
900057cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900057d0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
900057d2:	68bb      	ldr	r3, [r7, #8]
900057d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900057d8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
900057da:	69bb      	ldr	r3, [r7, #24]
900057dc:	015a      	lsls	r2, r3, #5
900057de:	6a3b      	ldr	r3, [r7, #32]
900057e0:	4413      	add	r3, r2
900057e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057e6:	461a      	mov	r2, r3
900057e8:	68bb      	ldr	r3, [r7, #8]
900057ea:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
900057ec:	6879      	ldr	r1, [r7, #4]
900057ee:	69ba      	ldr	r2, [r7, #24]
900057f0:	4613      	mov	r3, r2
900057f2:	011b      	lsls	r3, r3, #4
900057f4:	1a9b      	subs	r3, r3, r2
900057f6:	009b      	lsls	r3, r3, #2
900057f8:	440b      	add	r3, r1
900057fa:	333c      	adds	r3, #60	@ 0x3c
900057fc:	781b      	ldrb	r3, [r3, #0]
900057fe:	f083 0301 	eor.w	r3, r3, #1
90005802:	b2d8      	uxtb	r0, r3
90005804:	6879      	ldr	r1, [r7, #4]
90005806:	69ba      	ldr	r2, [r7, #24]
90005808:	4613      	mov	r3, r2
9000580a:	011b      	lsls	r3, r3, #4
9000580c:	1a9b      	subs	r3, r3, r2
9000580e:	009b      	lsls	r3, r3, #2
90005810:	440b      	add	r3, r1
90005812:	333c      	adds	r3, #60	@ 0x3c
90005814:	4602      	mov	r2, r0
90005816:	701a      	strb	r2, [r3, #0]
      break;
90005818:	e00c      	b.n	90005834 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
9000581a:	6879      	ldr	r1, [r7, #4]
9000581c:	69ba      	ldr	r2, [r7, #24]
9000581e:	4613      	mov	r3, r2
90005820:	011b      	lsls	r3, r3, #4
90005822:	1a9b      	subs	r3, r3, r2
90005824:	009b      	lsls	r3, r3, #2
90005826:	440b      	add	r3, r1
90005828:	334c      	adds	r3, #76	@ 0x4c
9000582a:	2204      	movs	r2, #4
9000582c:	701a      	strb	r2, [r3, #0]
      break;
9000582e:	e001      	b.n	90005834 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90005830:	bf00      	nop
90005832:	e000      	b.n	90005836 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005834:	bf00      	nop
  }
}
90005836:	bf00      	nop
90005838:	3728      	adds	r7, #40	@ 0x28
9000583a:	46bd      	mov	sp, r7
9000583c:	bd80      	pop	{r7, pc}

9000583e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000583e:	b580      	push	{r7, lr}
90005840:	b086      	sub	sp, #24
90005842:	af00      	add	r7, sp, #0
90005844:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005846:	687b      	ldr	r3, [r7, #4]
90005848:	681b      	ldr	r3, [r3, #0]
9000584a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000584c:	697b      	ldr	r3, [r7, #20]
9000584e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005850:	693b      	ldr	r3, [r7, #16]
90005852:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005856:	681b      	ldr	r3, [r3, #0]
90005858:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
9000585a:	693b      	ldr	r3, [r7, #16]
9000585c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005860:	681b      	ldr	r3, [r3, #0]
90005862:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005864:	68bb      	ldr	r3, [r7, #8]
90005866:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
9000586a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
9000586c:	68fb      	ldr	r3, [r7, #12]
9000586e:	f003 0302 	and.w	r3, r3, #2
90005872:	2b02      	cmp	r3, #2
90005874:	d10b      	bne.n	9000588e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005876:	68fb      	ldr	r3, [r7, #12]
90005878:	f003 0301 	and.w	r3, r3, #1
9000587c:	2b01      	cmp	r3, #1
9000587e:	d102      	bne.n	90005886 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005880:	6878      	ldr	r0, [r7, #4]
90005882:	f7fb fc8b 	bl	9000119c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005886:	68bb      	ldr	r3, [r7, #8]
90005888:	f043 0302 	orr.w	r3, r3, #2
9000588c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
9000588e:	68fb      	ldr	r3, [r7, #12]
90005890:	f003 0308 	and.w	r3, r3, #8
90005894:	2b08      	cmp	r3, #8
90005896:	d132      	bne.n	900058fe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005898:	68bb      	ldr	r3, [r7, #8]
9000589a:	f043 0308 	orr.w	r3, r3, #8
9000589e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
900058a0:	68fb      	ldr	r3, [r7, #12]
900058a2:	f003 0304 	and.w	r3, r3, #4
900058a6:	2b04      	cmp	r3, #4
900058a8:	d126      	bne.n	900058f8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900058aa:	687b      	ldr	r3, [r7, #4]
900058ac:	7a5b      	ldrb	r3, [r3, #9]
900058ae:	2b02      	cmp	r3, #2
900058b0:	d113      	bne.n	900058da <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
900058b2:	68fb      	ldr	r3, [r7, #12]
900058b4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
900058b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900058bc:	d106      	bne.n	900058cc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
900058be:	687b      	ldr	r3, [r7, #4]
900058c0:	681b      	ldr	r3, [r3, #0]
900058c2:	2102      	movs	r1, #2
900058c4:	4618      	mov	r0, r3
900058c6:	f005 fc47 	bl	9000b158 <USB_InitFSLSPClkSel>
900058ca:	e011      	b.n	900058f0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900058cc:	687b      	ldr	r3, [r7, #4]
900058ce:	681b      	ldr	r3, [r3, #0]
900058d0:	2101      	movs	r1, #1
900058d2:	4618      	mov	r0, r3
900058d4:	f005 fc40 	bl	9000b158 <USB_InitFSLSPClkSel>
900058d8:	e00a      	b.n	900058f0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900058da:	687b      	ldr	r3, [r7, #4]
900058dc:	79db      	ldrb	r3, [r3, #7]
900058de:	2b01      	cmp	r3, #1
900058e0:	d106      	bne.n	900058f0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
900058e2:	693b      	ldr	r3, [r7, #16]
900058e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
900058e8:	461a      	mov	r2, r3
900058ea:	f64e 2360 	movw	r3, #60000	@ 0xea60
900058ee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
900058f0:	6878      	ldr	r0, [r7, #4]
900058f2:	f7fb fc6f 	bl	900011d4 <HAL_HCD_PortEnabled_Callback>
900058f6:	e002      	b.n	900058fe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
900058f8:	6878      	ldr	r0, [r7, #4]
900058fa:	f7fb fc79 	bl	900011f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
900058fe:	68fb      	ldr	r3, [r7, #12]
90005900:	f003 0320 	and.w	r3, r3, #32
90005904:	2b20      	cmp	r3, #32
90005906:	d103      	bne.n	90005910 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005908:	68bb      	ldr	r3, [r7, #8]
9000590a:	f043 0320 	orr.w	r3, r3, #32
9000590e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005910:	693b      	ldr	r3, [r7, #16]
90005912:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005916:	461a      	mov	r2, r3
90005918:	68bb      	ldr	r3, [r7, #8]
9000591a:	6013      	str	r3, [r2, #0]
}
9000591c:	bf00      	nop
9000591e:	3718      	adds	r7, #24
90005920:	46bd      	mov	sp, r7
90005922:	bd80      	pop	{r7, pc}

90005924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005924:	b580      	push	{r7, lr}
90005926:	b082      	sub	sp, #8
90005928:	af00      	add	r7, sp, #0
9000592a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
9000592c:	687b      	ldr	r3, [r7, #4]
9000592e:	2b00      	cmp	r3, #0
90005930:	d101      	bne.n	90005936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005932:	2301      	movs	r3, #1
90005934:	e08b      	b.n	90005a4e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005936:	687b      	ldr	r3, [r7, #4]
90005938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
9000593c:	b2db      	uxtb	r3, r3
9000593e:	2b00      	cmp	r3, #0
90005940:	d106      	bne.n	90005950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005942:	687b      	ldr	r3, [r7, #4]
90005944:	2200      	movs	r2, #0
90005946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
9000594a:	6878      	ldr	r0, [r7, #4]
9000594c:	f000 f886 	bl	90005a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005950:	687b      	ldr	r3, [r7, #4]
90005952:	2224      	movs	r2, #36	@ 0x24
90005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005958:	687b      	ldr	r3, [r7, #4]
9000595a:	681b      	ldr	r3, [r3, #0]
9000595c:	681a      	ldr	r2, [r3, #0]
9000595e:	687b      	ldr	r3, [r7, #4]
90005960:	681b      	ldr	r3, [r3, #0]
90005962:	f022 0201 	bic.w	r2, r2, #1
90005966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005968:	687b      	ldr	r3, [r7, #4]
9000596a:	685a      	ldr	r2, [r3, #4]
9000596c:	687b      	ldr	r3, [r7, #4]
9000596e:	681b      	ldr	r3, [r3, #0]
90005970:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005974:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005976:	687b      	ldr	r3, [r7, #4]
90005978:	681b      	ldr	r3, [r3, #0]
9000597a:	689a      	ldr	r2, [r3, #8]
9000597c:	687b      	ldr	r3, [r7, #4]
9000597e:	681b      	ldr	r3, [r3, #0]
90005980:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005984:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005986:	687b      	ldr	r3, [r7, #4]
90005988:	68db      	ldr	r3, [r3, #12]
9000598a:	2b01      	cmp	r3, #1
9000598c:	d107      	bne.n	9000599e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000598e:	687b      	ldr	r3, [r7, #4]
90005990:	689a      	ldr	r2, [r3, #8]
90005992:	687b      	ldr	r3, [r7, #4]
90005994:	681b      	ldr	r3, [r3, #0]
90005996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
9000599a:	609a      	str	r2, [r3, #8]
9000599c:	e006      	b.n	900059ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000599e:	687b      	ldr	r3, [r7, #4]
900059a0:	689a      	ldr	r2, [r3, #8]
900059a2:	687b      	ldr	r3, [r7, #4]
900059a4:	681b      	ldr	r3, [r3, #0]
900059a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
900059aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900059ac:	687b      	ldr	r3, [r7, #4]
900059ae:	68db      	ldr	r3, [r3, #12]
900059b0:	2b02      	cmp	r3, #2
900059b2:	d108      	bne.n	900059c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
900059b4:	687b      	ldr	r3, [r7, #4]
900059b6:	681b      	ldr	r3, [r3, #0]
900059b8:	685a      	ldr	r2, [r3, #4]
900059ba:	687b      	ldr	r3, [r7, #4]
900059bc:	681b      	ldr	r3, [r3, #0]
900059be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
900059c2:	605a      	str	r2, [r3, #4]
900059c4:	e007      	b.n	900059d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
900059c6:	687b      	ldr	r3, [r7, #4]
900059c8:	681b      	ldr	r3, [r3, #0]
900059ca:	685a      	ldr	r2, [r3, #4]
900059cc:	687b      	ldr	r3, [r7, #4]
900059ce:	681b      	ldr	r3, [r3, #0]
900059d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
900059d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900059d6:	687b      	ldr	r3, [r7, #4]
900059d8:	681b      	ldr	r3, [r3, #0]
900059da:	6859      	ldr	r1, [r3, #4]
900059dc:	687b      	ldr	r3, [r7, #4]
900059de:	681a      	ldr	r2, [r3, #0]
900059e0:	4b1d      	ldr	r3, [pc, #116]	@ (90005a58 <HAL_I2C_Init+0x134>)
900059e2:	430b      	orrs	r3, r1
900059e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
900059e6:	687b      	ldr	r3, [r7, #4]
900059e8:	681b      	ldr	r3, [r3, #0]
900059ea:	68da      	ldr	r2, [r3, #12]
900059ec:	687b      	ldr	r3, [r7, #4]
900059ee:	681b      	ldr	r3, [r3, #0]
900059f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
900059f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900059f6:	687b      	ldr	r3, [r7, #4]
900059f8:	691a      	ldr	r2, [r3, #16]
900059fa:	687b      	ldr	r3, [r7, #4]
900059fc:	695b      	ldr	r3, [r3, #20]
900059fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005a02:	687b      	ldr	r3, [r7, #4]
90005a04:	699b      	ldr	r3, [r3, #24]
90005a06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005a08:	687b      	ldr	r3, [r7, #4]
90005a0a:	681b      	ldr	r3, [r3, #0]
90005a0c:	430a      	orrs	r2, r1
90005a0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005a10:	687b      	ldr	r3, [r7, #4]
90005a12:	69d9      	ldr	r1, [r3, #28]
90005a14:	687b      	ldr	r3, [r7, #4]
90005a16:	6a1a      	ldr	r2, [r3, #32]
90005a18:	687b      	ldr	r3, [r7, #4]
90005a1a:	681b      	ldr	r3, [r3, #0]
90005a1c:	430a      	orrs	r2, r1
90005a1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005a20:	687b      	ldr	r3, [r7, #4]
90005a22:	681b      	ldr	r3, [r3, #0]
90005a24:	681a      	ldr	r2, [r3, #0]
90005a26:	687b      	ldr	r3, [r7, #4]
90005a28:	681b      	ldr	r3, [r3, #0]
90005a2a:	f042 0201 	orr.w	r2, r2, #1
90005a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005a30:	687b      	ldr	r3, [r7, #4]
90005a32:	2200      	movs	r2, #0
90005a34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005a36:	687b      	ldr	r3, [r7, #4]
90005a38:	2220      	movs	r2, #32
90005a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005a3e:	687b      	ldr	r3, [r7, #4]
90005a40:	2200      	movs	r2, #0
90005a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005a44:	687b      	ldr	r3, [r7, #4]
90005a46:	2200      	movs	r2, #0
90005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005a4c:	2300      	movs	r3, #0
}
90005a4e:	4618      	mov	r0, r3
90005a50:	3708      	adds	r7, #8
90005a52:	46bd      	mov	sp, r7
90005a54:	bd80      	pop	{r7, pc}
90005a56:	bf00      	nop
90005a58:	02008000 	.word	0x02008000

90005a5c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005a5c:	b480      	push	{r7}
90005a5e:	b083      	sub	sp, #12
90005a60:	af00      	add	r7, sp, #0
90005a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005a64:	bf00      	nop
90005a66:	370c      	adds	r7, #12
90005a68:	46bd      	mov	sp, r7
90005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a6e:	4770      	bx	lr

90005a70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005a70:	b580      	push	{r7, lr}
90005a72:	b088      	sub	sp, #32
90005a74:	af02      	add	r7, sp, #8
90005a76:	60f8      	str	r0, [r7, #12]
90005a78:	4608      	mov	r0, r1
90005a7a:	4611      	mov	r1, r2
90005a7c:	461a      	mov	r2, r3
90005a7e:	4603      	mov	r3, r0
90005a80:	817b      	strh	r3, [r7, #10]
90005a82:	460b      	mov	r3, r1
90005a84:	813b      	strh	r3, [r7, #8]
90005a86:	4613      	mov	r3, r2
90005a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005a8a:	68fb      	ldr	r3, [r7, #12]
90005a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005a90:	b2db      	uxtb	r3, r3
90005a92:	2b20      	cmp	r3, #32
90005a94:	f040 80fd 	bne.w	90005c92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005a98:	6a3b      	ldr	r3, [r7, #32]
90005a9a:	2b00      	cmp	r3, #0
90005a9c:	d002      	beq.n	90005aa4 <HAL_I2C_Mem_Read+0x34>
90005a9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005aa0:	2b00      	cmp	r3, #0
90005aa2:	d105      	bne.n	90005ab0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005aa4:	68fb      	ldr	r3, [r7, #12]
90005aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005aaa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005aac:	2301      	movs	r3, #1
90005aae:	e0f1      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005ab0:	68fb      	ldr	r3, [r7, #12]
90005ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005ab6:	2b01      	cmp	r3, #1
90005ab8:	d101      	bne.n	90005abe <HAL_I2C_Mem_Read+0x4e>
90005aba:	2302      	movs	r3, #2
90005abc:	e0ea      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
90005abe:	68fb      	ldr	r3, [r7, #12]
90005ac0:	2201      	movs	r2, #1
90005ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005ac6:	f7fd fafb 	bl	900030c0 <HAL_GetTick>
90005aca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005acc:	697b      	ldr	r3, [r7, #20]
90005ace:	9300      	str	r3, [sp, #0]
90005ad0:	2319      	movs	r3, #25
90005ad2:	2201      	movs	r2, #1
90005ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005ad8:	68f8      	ldr	r0, [r7, #12]
90005ada:	f000 f975 	bl	90005dc8 <I2C_WaitOnFlagUntilTimeout>
90005ade:	4603      	mov	r3, r0
90005ae0:	2b00      	cmp	r3, #0
90005ae2:	d001      	beq.n	90005ae8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005ae4:	2301      	movs	r3, #1
90005ae6:	e0d5      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005ae8:	68fb      	ldr	r3, [r7, #12]
90005aea:	2222      	movs	r2, #34	@ 0x22
90005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005af0:	68fb      	ldr	r3, [r7, #12]
90005af2:	2240      	movs	r2, #64	@ 0x40
90005af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005af8:	68fb      	ldr	r3, [r7, #12]
90005afa:	2200      	movs	r2, #0
90005afc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005afe:	68fb      	ldr	r3, [r7, #12]
90005b00:	6a3a      	ldr	r2, [r7, #32]
90005b02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005b04:	68fb      	ldr	r3, [r7, #12]
90005b06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005b0a:	68fb      	ldr	r3, [r7, #12]
90005b0c:	2200      	movs	r2, #0
90005b0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005b10:	88f8      	ldrh	r0, [r7, #6]
90005b12:	893a      	ldrh	r2, [r7, #8]
90005b14:	8979      	ldrh	r1, [r7, #10]
90005b16:	697b      	ldr	r3, [r7, #20]
90005b18:	9301      	str	r3, [sp, #4]
90005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005b1c:	9300      	str	r3, [sp, #0]
90005b1e:	4603      	mov	r3, r0
90005b20:	68f8      	ldr	r0, [r7, #12]
90005b22:	f000 f8d9 	bl	90005cd8 <I2C_RequestMemoryRead>
90005b26:	4603      	mov	r3, r0
90005b28:	2b00      	cmp	r3, #0
90005b2a:	d005      	beq.n	90005b38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005b2c:	68fb      	ldr	r3, [r7, #12]
90005b2e:	2200      	movs	r2, #0
90005b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005b34:	2301      	movs	r3, #1
90005b36:	e0ad      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005b38:	68fb      	ldr	r3, [r7, #12]
90005b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005b3c:	b29b      	uxth	r3, r3
90005b3e:	2bff      	cmp	r3, #255	@ 0xff
90005b40:	d90e      	bls.n	90005b60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005b42:	68fb      	ldr	r3, [r7, #12]
90005b44:	22ff      	movs	r2, #255	@ 0xff
90005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005b48:	68fb      	ldr	r3, [r7, #12]
90005b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005b4c:	b2da      	uxtb	r2, r3
90005b4e:	8979      	ldrh	r1, [r7, #10]
90005b50:	4b52      	ldr	r3, [pc, #328]	@ (90005c9c <HAL_I2C_Mem_Read+0x22c>)
90005b52:	9300      	str	r3, [sp, #0]
90005b54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005b58:	68f8      	ldr	r0, [r7, #12]
90005b5a:	f000 faf9 	bl	90006150 <I2C_TransferConfig>
90005b5e:	e00f      	b.n	90005b80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005b60:	68fb      	ldr	r3, [r7, #12]
90005b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005b64:	b29a      	uxth	r2, r3
90005b66:	68fb      	ldr	r3, [r7, #12]
90005b68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005b6a:	68fb      	ldr	r3, [r7, #12]
90005b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005b6e:	b2da      	uxtb	r2, r3
90005b70:	8979      	ldrh	r1, [r7, #10]
90005b72:	4b4a      	ldr	r3, [pc, #296]	@ (90005c9c <HAL_I2C_Mem_Read+0x22c>)
90005b74:	9300      	str	r3, [sp, #0]
90005b76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005b7a:	68f8      	ldr	r0, [r7, #12]
90005b7c:	f000 fae8 	bl	90006150 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005b80:	697b      	ldr	r3, [r7, #20]
90005b82:	9300      	str	r3, [sp, #0]
90005b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005b86:	2200      	movs	r2, #0
90005b88:	2104      	movs	r1, #4
90005b8a:	68f8      	ldr	r0, [r7, #12]
90005b8c:	f000 f91c 	bl	90005dc8 <I2C_WaitOnFlagUntilTimeout>
90005b90:	4603      	mov	r3, r0
90005b92:	2b00      	cmp	r3, #0
90005b94:	d001      	beq.n	90005b9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005b96:	2301      	movs	r3, #1
90005b98:	e07c      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005b9a:	68fb      	ldr	r3, [r7, #12]
90005b9c:	681b      	ldr	r3, [r3, #0]
90005b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005ba0:	68fb      	ldr	r3, [r7, #12]
90005ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005ba4:	b2d2      	uxtb	r2, r2
90005ba6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005ba8:	68fb      	ldr	r3, [r7, #12]
90005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005bac:	1c5a      	adds	r2, r3, #1
90005bae:	68fb      	ldr	r3, [r7, #12]
90005bb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005bb2:	68fb      	ldr	r3, [r7, #12]
90005bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005bb6:	3b01      	subs	r3, #1
90005bb8:	b29a      	uxth	r2, r3
90005bba:	68fb      	ldr	r3, [r7, #12]
90005bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005bbe:	68fb      	ldr	r3, [r7, #12]
90005bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005bc2:	b29b      	uxth	r3, r3
90005bc4:	3b01      	subs	r3, #1
90005bc6:	b29a      	uxth	r2, r3
90005bc8:	68fb      	ldr	r3, [r7, #12]
90005bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005bcc:	68fb      	ldr	r3, [r7, #12]
90005bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005bd0:	b29b      	uxth	r3, r3
90005bd2:	2b00      	cmp	r3, #0
90005bd4:	d034      	beq.n	90005c40 <HAL_I2C_Mem_Read+0x1d0>
90005bd6:	68fb      	ldr	r3, [r7, #12]
90005bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005bda:	2b00      	cmp	r3, #0
90005bdc:	d130      	bne.n	90005c40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005bde:	697b      	ldr	r3, [r7, #20]
90005be0:	9300      	str	r3, [sp, #0]
90005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005be4:	2200      	movs	r2, #0
90005be6:	2180      	movs	r1, #128	@ 0x80
90005be8:	68f8      	ldr	r0, [r7, #12]
90005bea:	f000 f8ed 	bl	90005dc8 <I2C_WaitOnFlagUntilTimeout>
90005bee:	4603      	mov	r3, r0
90005bf0:	2b00      	cmp	r3, #0
90005bf2:	d001      	beq.n	90005bf8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005bf4:	2301      	movs	r3, #1
90005bf6:	e04d      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005bf8:	68fb      	ldr	r3, [r7, #12]
90005bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005bfc:	b29b      	uxth	r3, r3
90005bfe:	2bff      	cmp	r3, #255	@ 0xff
90005c00:	d90e      	bls.n	90005c20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005c02:	68fb      	ldr	r3, [r7, #12]
90005c04:	22ff      	movs	r2, #255	@ 0xff
90005c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005c08:	68fb      	ldr	r3, [r7, #12]
90005c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005c0c:	b2da      	uxtb	r2, r3
90005c0e:	8979      	ldrh	r1, [r7, #10]
90005c10:	2300      	movs	r3, #0
90005c12:	9300      	str	r3, [sp, #0]
90005c14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005c18:	68f8      	ldr	r0, [r7, #12]
90005c1a:	f000 fa99 	bl	90006150 <I2C_TransferConfig>
90005c1e:	e00f      	b.n	90005c40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005c20:	68fb      	ldr	r3, [r7, #12]
90005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005c24:	b29a      	uxth	r2, r3
90005c26:	68fb      	ldr	r3, [r7, #12]
90005c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005c2a:	68fb      	ldr	r3, [r7, #12]
90005c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005c2e:	b2da      	uxtb	r2, r3
90005c30:	8979      	ldrh	r1, [r7, #10]
90005c32:	2300      	movs	r3, #0
90005c34:	9300      	str	r3, [sp, #0]
90005c36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005c3a:	68f8      	ldr	r0, [r7, #12]
90005c3c:	f000 fa88 	bl	90006150 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005c40:	68fb      	ldr	r3, [r7, #12]
90005c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005c44:	b29b      	uxth	r3, r3
90005c46:	2b00      	cmp	r3, #0
90005c48:	d19a      	bne.n	90005b80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005c4a:	697a      	ldr	r2, [r7, #20]
90005c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005c4e:	68f8      	ldr	r0, [r7, #12]
90005c50:	f000 f95a 	bl	90005f08 <I2C_WaitOnSTOPFlagUntilTimeout>
90005c54:	4603      	mov	r3, r0
90005c56:	2b00      	cmp	r3, #0
90005c58:	d001      	beq.n	90005c5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005c5a:	2301      	movs	r3, #1
90005c5c:	e01a      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005c5e:	68fb      	ldr	r3, [r7, #12]
90005c60:	681b      	ldr	r3, [r3, #0]
90005c62:	2220      	movs	r2, #32
90005c64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005c66:	68fb      	ldr	r3, [r7, #12]
90005c68:	681b      	ldr	r3, [r3, #0]
90005c6a:	6859      	ldr	r1, [r3, #4]
90005c6c:	68fb      	ldr	r3, [r7, #12]
90005c6e:	681a      	ldr	r2, [r3, #0]
90005c70:	4b0b      	ldr	r3, [pc, #44]	@ (90005ca0 <HAL_I2C_Mem_Read+0x230>)
90005c72:	400b      	ands	r3, r1
90005c74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005c76:	68fb      	ldr	r3, [r7, #12]
90005c78:	2220      	movs	r2, #32
90005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005c7e:	68fb      	ldr	r3, [r7, #12]
90005c80:	2200      	movs	r2, #0
90005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005c86:	68fb      	ldr	r3, [r7, #12]
90005c88:	2200      	movs	r2, #0
90005c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005c8e:	2300      	movs	r3, #0
90005c90:	e000      	b.n	90005c94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005c92:	2302      	movs	r3, #2
  }
}
90005c94:	4618      	mov	r0, r3
90005c96:	3718      	adds	r7, #24
90005c98:	46bd      	mov	sp, r7
90005c9a:	bd80      	pop	{r7, pc}
90005c9c:	80002400 	.word	0x80002400
90005ca0:	fe00e800 	.word	0xfe00e800

90005ca4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005ca4:	b480      	push	{r7}
90005ca6:	b083      	sub	sp, #12
90005ca8:	af00      	add	r7, sp, #0
90005caa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005cac:	687b      	ldr	r3, [r7, #4]
90005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005cb2:	b2db      	uxtb	r3, r3
}
90005cb4:	4618      	mov	r0, r3
90005cb6:	370c      	adds	r7, #12
90005cb8:	46bd      	mov	sp, r7
90005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
90005cbe:	4770      	bx	lr

90005cc0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005cc0:	b480      	push	{r7}
90005cc2:	b083      	sub	sp, #12
90005cc4:	af00      	add	r7, sp, #0
90005cc6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005cc8:	687b      	ldr	r3, [r7, #4]
90005cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005ccc:	4618      	mov	r0, r3
90005cce:	370c      	adds	r7, #12
90005cd0:	46bd      	mov	sp, r7
90005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
90005cd6:	4770      	bx	lr

90005cd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005cd8:	b580      	push	{r7, lr}
90005cda:	b086      	sub	sp, #24
90005cdc:	af02      	add	r7, sp, #8
90005cde:	60f8      	str	r0, [r7, #12]
90005ce0:	4608      	mov	r0, r1
90005ce2:	4611      	mov	r1, r2
90005ce4:	461a      	mov	r2, r3
90005ce6:	4603      	mov	r3, r0
90005ce8:	817b      	strh	r3, [r7, #10]
90005cea:	460b      	mov	r3, r1
90005cec:	813b      	strh	r3, [r7, #8]
90005cee:	4613      	mov	r3, r2
90005cf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005cf2:	88fb      	ldrh	r3, [r7, #6]
90005cf4:	b2da      	uxtb	r2, r3
90005cf6:	8979      	ldrh	r1, [r7, #10]
90005cf8:	4b20      	ldr	r3, [pc, #128]	@ (90005d7c <I2C_RequestMemoryRead+0xa4>)
90005cfa:	9300      	str	r3, [sp, #0]
90005cfc:	2300      	movs	r3, #0
90005cfe:	68f8      	ldr	r0, [r7, #12]
90005d00:	f000 fa26 	bl	90006150 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d04:	69fa      	ldr	r2, [r7, #28]
90005d06:	69b9      	ldr	r1, [r7, #24]
90005d08:	68f8      	ldr	r0, [r7, #12]
90005d0a:	f000 f8b6 	bl	90005e7a <I2C_WaitOnTXISFlagUntilTimeout>
90005d0e:	4603      	mov	r3, r0
90005d10:	2b00      	cmp	r3, #0
90005d12:	d001      	beq.n	90005d18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005d14:	2301      	movs	r3, #1
90005d16:	e02c      	b.n	90005d72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005d18:	88fb      	ldrh	r3, [r7, #6]
90005d1a:	2b01      	cmp	r3, #1
90005d1c:	d105      	bne.n	90005d2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005d1e:	893b      	ldrh	r3, [r7, #8]
90005d20:	b2da      	uxtb	r2, r3
90005d22:	68fb      	ldr	r3, [r7, #12]
90005d24:	681b      	ldr	r3, [r3, #0]
90005d26:	629a      	str	r2, [r3, #40]	@ 0x28
90005d28:	e015      	b.n	90005d56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005d2a:	893b      	ldrh	r3, [r7, #8]
90005d2c:	0a1b      	lsrs	r3, r3, #8
90005d2e:	b29b      	uxth	r3, r3
90005d30:	b2da      	uxtb	r2, r3
90005d32:	68fb      	ldr	r3, [r7, #12]
90005d34:	681b      	ldr	r3, [r3, #0]
90005d36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d38:	69fa      	ldr	r2, [r7, #28]
90005d3a:	69b9      	ldr	r1, [r7, #24]
90005d3c:	68f8      	ldr	r0, [r7, #12]
90005d3e:	f000 f89c 	bl	90005e7a <I2C_WaitOnTXISFlagUntilTimeout>
90005d42:	4603      	mov	r3, r0
90005d44:	2b00      	cmp	r3, #0
90005d46:	d001      	beq.n	90005d4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005d48:	2301      	movs	r3, #1
90005d4a:	e012      	b.n	90005d72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005d4c:	893b      	ldrh	r3, [r7, #8]
90005d4e:	b2da      	uxtb	r2, r3
90005d50:	68fb      	ldr	r3, [r7, #12]
90005d52:	681b      	ldr	r3, [r3, #0]
90005d54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005d56:	69fb      	ldr	r3, [r7, #28]
90005d58:	9300      	str	r3, [sp, #0]
90005d5a:	69bb      	ldr	r3, [r7, #24]
90005d5c:	2200      	movs	r2, #0
90005d5e:	2140      	movs	r1, #64	@ 0x40
90005d60:	68f8      	ldr	r0, [r7, #12]
90005d62:	f000 f831 	bl	90005dc8 <I2C_WaitOnFlagUntilTimeout>
90005d66:	4603      	mov	r3, r0
90005d68:	2b00      	cmp	r3, #0
90005d6a:	d001      	beq.n	90005d70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005d6c:	2301      	movs	r3, #1
90005d6e:	e000      	b.n	90005d72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005d70:	2300      	movs	r3, #0
}
90005d72:	4618      	mov	r0, r3
90005d74:	3710      	adds	r7, #16
90005d76:	46bd      	mov	sp, r7
90005d78:	bd80      	pop	{r7, pc}
90005d7a:	bf00      	nop
90005d7c:	80002000 	.word	0x80002000

90005d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005d80:	b480      	push	{r7}
90005d82:	b083      	sub	sp, #12
90005d84:	af00      	add	r7, sp, #0
90005d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005d88:	687b      	ldr	r3, [r7, #4]
90005d8a:	681b      	ldr	r3, [r3, #0]
90005d8c:	699b      	ldr	r3, [r3, #24]
90005d8e:	f003 0302 	and.w	r3, r3, #2
90005d92:	2b02      	cmp	r3, #2
90005d94:	d103      	bne.n	90005d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005d96:	687b      	ldr	r3, [r7, #4]
90005d98:	681b      	ldr	r3, [r3, #0]
90005d9a:	2200      	movs	r2, #0
90005d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005d9e:	687b      	ldr	r3, [r7, #4]
90005da0:	681b      	ldr	r3, [r3, #0]
90005da2:	699b      	ldr	r3, [r3, #24]
90005da4:	f003 0301 	and.w	r3, r3, #1
90005da8:	2b01      	cmp	r3, #1
90005daa:	d007      	beq.n	90005dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005dac:	687b      	ldr	r3, [r7, #4]
90005dae:	681b      	ldr	r3, [r3, #0]
90005db0:	699a      	ldr	r2, [r3, #24]
90005db2:	687b      	ldr	r3, [r7, #4]
90005db4:	681b      	ldr	r3, [r3, #0]
90005db6:	f042 0201 	orr.w	r2, r2, #1
90005dba:	619a      	str	r2, [r3, #24]
  }
}
90005dbc:	bf00      	nop
90005dbe:	370c      	adds	r7, #12
90005dc0:	46bd      	mov	sp, r7
90005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
90005dc6:	4770      	bx	lr

90005dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005dc8:	b580      	push	{r7, lr}
90005dca:	b084      	sub	sp, #16
90005dcc:	af00      	add	r7, sp, #0
90005dce:	60f8      	str	r0, [r7, #12]
90005dd0:	60b9      	str	r1, [r7, #8]
90005dd2:	603b      	str	r3, [r7, #0]
90005dd4:	4613      	mov	r3, r2
90005dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005dd8:	e03b      	b.n	90005e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005dda:	69ba      	ldr	r2, [r7, #24]
90005ddc:	6839      	ldr	r1, [r7, #0]
90005dde:	68f8      	ldr	r0, [r7, #12]
90005de0:	f000 f8d6 	bl	90005f90 <I2C_IsErrorOccurred>
90005de4:	4603      	mov	r3, r0
90005de6:	2b00      	cmp	r3, #0
90005de8:	d001      	beq.n	90005dee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90005dea:	2301      	movs	r3, #1
90005dec:	e041      	b.n	90005e72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005dee:	683b      	ldr	r3, [r7, #0]
90005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
90005df4:	d02d      	beq.n	90005e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005df6:	f7fd f963 	bl	900030c0 <HAL_GetTick>
90005dfa:	4602      	mov	r2, r0
90005dfc:	69bb      	ldr	r3, [r7, #24]
90005dfe:	1ad3      	subs	r3, r2, r3
90005e00:	683a      	ldr	r2, [r7, #0]
90005e02:	429a      	cmp	r2, r3
90005e04:	d302      	bcc.n	90005e0c <I2C_WaitOnFlagUntilTimeout+0x44>
90005e06:	683b      	ldr	r3, [r7, #0]
90005e08:	2b00      	cmp	r3, #0
90005e0a:	d122      	bne.n	90005e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005e0c:	68fb      	ldr	r3, [r7, #12]
90005e0e:	681b      	ldr	r3, [r3, #0]
90005e10:	699a      	ldr	r2, [r3, #24]
90005e12:	68bb      	ldr	r3, [r7, #8]
90005e14:	4013      	ands	r3, r2
90005e16:	68ba      	ldr	r2, [r7, #8]
90005e18:	429a      	cmp	r2, r3
90005e1a:	bf0c      	ite	eq
90005e1c:	2301      	moveq	r3, #1
90005e1e:	2300      	movne	r3, #0
90005e20:	b2db      	uxtb	r3, r3
90005e22:	461a      	mov	r2, r3
90005e24:	79fb      	ldrb	r3, [r7, #7]
90005e26:	429a      	cmp	r2, r3
90005e28:	d113      	bne.n	90005e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005e2a:	68fb      	ldr	r3, [r7, #12]
90005e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005e2e:	f043 0220 	orr.w	r2, r3, #32
90005e32:	68fb      	ldr	r3, [r7, #12]
90005e34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005e36:	68fb      	ldr	r3, [r7, #12]
90005e38:	2220      	movs	r2, #32
90005e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005e3e:	68fb      	ldr	r3, [r7, #12]
90005e40:	2200      	movs	r2, #0
90005e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005e46:	68fb      	ldr	r3, [r7, #12]
90005e48:	2200      	movs	r2, #0
90005e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90005e4e:	2301      	movs	r3, #1
90005e50:	e00f      	b.n	90005e72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005e52:	68fb      	ldr	r3, [r7, #12]
90005e54:	681b      	ldr	r3, [r3, #0]
90005e56:	699a      	ldr	r2, [r3, #24]
90005e58:	68bb      	ldr	r3, [r7, #8]
90005e5a:	4013      	ands	r3, r2
90005e5c:	68ba      	ldr	r2, [r7, #8]
90005e5e:	429a      	cmp	r2, r3
90005e60:	bf0c      	ite	eq
90005e62:	2301      	moveq	r3, #1
90005e64:	2300      	movne	r3, #0
90005e66:	b2db      	uxtb	r3, r3
90005e68:	461a      	mov	r2, r3
90005e6a:	79fb      	ldrb	r3, [r7, #7]
90005e6c:	429a      	cmp	r2, r3
90005e6e:	d0b4      	beq.n	90005dda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005e70:	2300      	movs	r3, #0
}
90005e72:	4618      	mov	r0, r3
90005e74:	3710      	adds	r7, #16
90005e76:	46bd      	mov	sp, r7
90005e78:	bd80      	pop	{r7, pc}

90005e7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005e7a:	b580      	push	{r7, lr}
90005e7c:	b084      	sub	sp, #16
90005e7e:	af00      	add	r7, sp, #0
90005e80:	60f8      	str	r0, [r7, #12]
90005e82:	60b9      	str	r1, [r7, #8]
90005e84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005e86:	e033      	b.n	90005ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005e88:	687a      	ldr	r2, [r7, #4]
90005e8a:	68b9      	ldr	r1, [r7, #8]
90005e8c:	68f8      	ldr	r0, [r7, #12]
90005e8e:	f000 f87f 	bl	90005f90 <I2C_IsErrorOccurred>
90005e92:	4603      	mov	r3, r0
90005e94:	2b00      	cmp	r3, #0
90005e96:	d001      	beq.n	90005e9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005e98:	2301      	movs	r3, #1
90005e9a:	e031      	b.n	90005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005e9c:	68bb      	ldr	r3, [r7, #8]
90005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
90005ea2:	d025      	beq.n	90005ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005ea4:	f7fd f90c 	bl	900030c0 <HAL_GetTick>
90005ea8:	4602      	mov	r2, r0
90005eaa:	687b      	ldr	r3, [r7, #4]
90005eac:	1ad3      	subs	r3, r2, r3
90005eae:	68ba      	ldr	r2, [r7, #8]
90005eb0:	429a      	cmp	r2, r3
90005eb2:	d302      	bcc.n	90005eba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90005eb4:	68bb      	ldr	r3, [r7, #8]
90005eb6:	2b00      	cmp	r3, #0
90005eb8:	d11a      	bne.n	90005ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90005eba:	68fb      	ldr	r3, [r7, #12]
90005ebc:	681b      	ldr	r3, [r3, #0]
90005ebe:	699b      	ldr	r3, [r3, #24]
90005ec0:	f003 0302 	and.w	r3, r3, #2
90005ec4:	2b02      	cmp	r3, #2
90005ec6:	d013      	beq.n	90005ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005ec8:	68fb      	ldr	r3, [r7, #12]
90005eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005ecc:	f043 0220 	orr.w	r2, r3, #32
90005ed0:	68fb      	ldr	r3, [r7, #12]
90005ed2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005ed4:	68fb      	ldr	r3, [r7, #12]
90005ed6:	2220      	movs	r2, #32
90005ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005edc:	68fb      	ldr	r3, [r7, #12]
90005ede:	2200      	movs	r2, #0
90005ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005ee4:	68fb      	ldr	r3, [r7, #12]
90005ee6:	2200      	movs	r2, #0
90005ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90005eec:	2301      	movs	r3, #1
90005eee:	e007      	b.n	90005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005ef0:	68fb      	ldr	r3, [r7, #12]
90005ef2:	681b      	ldr	r3, [r3, #0]
90005ef4:	699b      	ldr	r3, [r3, #24]
90005ef6:	f003 0302 	and.w	r3, r3, #2
90005efa:	2b02      	cmp	r3, #2
90005efc:	d1c4      	bne.n	90005e88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90005efe:	2300      	movs	r3, #0
}
90005f00:	4618      	mov	r0, r3
90005f02:	3710      	adds	r7, #16
90005f04:	46bd      	mov	sp, r7
90005f06:	bd80      	pop	{r7, pc}

90005f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005f08:	b580      	push	{r7, lr}
90005f0a:	b084      	sub	sp, #16
90005f0c:	af00      	add	r7, sp, #0
90005f0e:	60f8      	str	r0, [r7, #12]
90005f10:	60b9      	str	r1, [r7, #8]
90005f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005f14:	e02f      	b.n	90005f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005f16:	687a      	ldr	r2, [r7, #4]
90005f18:	68b9      	ldr	r1, [r7, #8]
90005f1a:	68f8      	ldr	r0, [r7, #12]
90005f1c:	f000 f838 	bl	90005f90 <I2C_IsErrorOccurred>
90005f20:	4603      	mov	r3, r0
90005f22:	2b00      	cmp	r3, #0
90005f24:	d001      	beq.n	90005f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005f26:	2301      	movs	r3, #1
90005f28:	e02d      	b.n	90005f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005f2a:	f7fd f8c9 	bl	900030c0 <HAL_GetTick>
90005f2e:	4602      	mov	r2, r0
90005f30:	687b      	ldr	r3, [r7, #4]
90005f32:	1ad3      	subs	r3, r2, r3
90005f34:	68ba      	ldr	r2, [r7, #8]
90005f36:	429a      	cmp	r2, r3
90005f38:	d302      	bcc.n	90005f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90005f3a:	68bb      	ldr	r3, [r7, #8]
90005f3c:	2b00      	cmp	r3, #0
90005f3e:	d11a      	bne.n	90005f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90005f40:	68fb      	ldr	r3, [r7, #12]
90005f42:	681b      	ldr	r3, [r3, #0]
90005f44:	699b      	ldr	r3, [r3, #24]
90005f46:	f003 0320 	and.w	r3, r3, #32
90005f4a:	2b20      	cmp	r3, #32
90005f4c:	d013      	beq.n	90005f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005f4e:	68fb      	ldr	r3, [r7, #12]
90005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005f52:	f043 0220 	orr.w	r2, r3, #32
90005f56:	68fb      	ldr	r3, [r7, #12]
90005f58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90005f5a:	68fb      	ldr	r3, [r7, #12]
90005f5c:	2220      	movs	r2, #32
90005f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90005f62:	68fb      	ldr	r3, [r7, #12]
90005f64:	2200      	movs	r2, #0
90005f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90005f6a:	68fb      	ldr	r3, [r7, #12]
90005f6c:	2200      	movs	r2, #0
90005f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90005f72:	2301      	movs	r3, #1
90005f74:	e007      	b.n	90005f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005f76:	68fb      	ldr	r3, [r7, #12]
90005f78:	681b      	ldr	r3, [r3, #0]
90005f7a:	699b      	ldr	r3, [r3, #24]
90005f7c:	f003 0320 	and.w	r3, r3, #32
90005f80:	2b20      	cmp	r3, #32
90005f82:	d1c8      	bne.n	90005f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90005f84:	2300      	movs	r3, #0
}
90005f86:	4618      	mov	r0, r3
90005f88:	3710      	adds	r7, #16
90005f8a:	46bd      	mov	sp, r7
90005f8c:	bd80      	pop	{r7, pc}
	...

90005f90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90005f90:	b580      	push	{r7, lr}
90005f92:	b08a      	sub	sp, #40	@ 0x28
90005f94:	af00      	add	r7, sp, #0
90005f96:	60f8      	str	r0, [r7, #12]
90005f98:	60b9      	str	r1, [r7, #8]
90005f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90005f9c:	2300      	movs	r3, #0
90005f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90005fa2:	68fb      	ldr	r3, [r7, #12]
90005fa4:	681b      	ldr	r3, [r3, #0]
90005fa6:	699b      	ldr	r3, [r3, #24]
90005fa8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90005faa:	2300      	movs	r3, #0
90005fac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
90005fae:	687b      	ldr	r3, [r7, #4]
90005fb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90005fb2:	69bb      	ldr	r3, [r7, #24]
90005fb4:	f003 0310 	and.w	r3, r3, #16
90005fb8:	2b00      	cmp	r3, #0
90005fba:	d068      	beq.n	9000608e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90005fbc:	68fb      	ldr	r3, [r7, #12]
90005fbe:	681b      	ldr	r3, [r3, #0]
90005fc0:	2210      	movs	r2, #16
90005fc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90005fc4:	e049      	b.n	9000605a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90005fc6:	68bb      	ldr	r3, [r7, #8]
90005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
90005fcc:	d045      	beq.n	9000605a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90005fce:	f7fd f877 	bl	900030c0 <HAL_GetTick>
90005fd2:	4602      	mov	r2, r0
90005fd4:	69fb      	ldr	r3, [r7, #28]
90005fd6:	1ad3      	subs	r3, r2, r3
90005fd8:	68ba      	ldr	r2, [r7, #8]
90005fda:	429a      	cmp	r2, r3
90005fdc:	d302      	bcc.n	90005fe4 <I2C_IsErrorOccurred+0x54>
90005fde:	68bb      	ldr	r3, [r7, #8]
90005fe0:	2b00      	cmp	r3, #0
90005fe2:	d13a      	bne.n	9000605a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90005fe4:	68fb      	ldr	r3, [r7, #12]
90005fe6:	681b      	ldr	r3, [r3, #0]
90005fe8:	685b      	ldr	r3, [r3, #4]
90005fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
90005fee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90005ff0:	68fb      	ldr	r3, [r7, #12]
90005ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90005ff6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90005ff8:	68fb      	ldr	r3, [r7, #12]
90005ffa:	681b      	ldr	r3, [r3, #0]
90005ffc:	699b      	ldr	r3, [r3, #24]
90005ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90006002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006006:	d121      	bne.n	9000604c <I2C_IsErrorOccurred+0xbc>
90006008:	697b      	ldr	r3, [r7, #20]
9000600a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000600e:	d01d      	beq.n	9000604c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90006010:	7cfb      	ldrb	r3, [r7, #19]
90006012:	2b20      	cmp	r3, #32
90006014:	d01a      	beq.n	9000604c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006016:	68fb      	ldr	r3, [r7, #12]
90006018:	681b      	ldr	r3, [r3, #0]
9000601a:	685a      	ldr	r2, [r3, #4]
9000601c:	68fb      	ldr	r3, [r7, #12]
9000601e:	681b      	ldr	r3, [r3, #0]
90006020:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006024:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006026:	f7fd f84b 	bl	900030c0 <HAL_GetTick>
9000602a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000602c:	e00e      	b.n	9000604c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000602e:	f7fd f847 	bl	900030c0 <HAL_GetTick>
90006032:	4602      	mov	r2, r0
90006034:	69fb      	ldr	r3, [r7, #28]
90006036:	1ad3      	subs	r3, r2, r3
90006038:	2b19      	cmp	r3, #25
9000603a:	d907      	bls.n	9000604c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000603c:	6a3b      	ldr	r3, [r7, #32]
9000603e:	f043 0320 	orr.w	r3, r3, #32
90006042:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006044:	2301      	movs	r3, #1
90006046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
9000604a:	e006      	b.n	9000605a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000604c:	68fb      	ldr	r3, [r7, #12]
9000604e:	681b      	ldr	r3, [r3, #0]
90006050:	699b      	ldr	r3, [r3, #24]
90006052:	f003 0320 	and.w	r3, r3, #32
90006056:	2b20      	cmp	r3, #32
90006058:	d1e9      	bne.n	9000602e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000605a:	68fb      	ldr	r3, [r7, #12]
9000605c:	681b      	ldr	r3, [r3, #0]
9000605e:	699b      	ldr	r3, [r3, #24]
90006060:	f003 0320 	and.w	r3, r3, #32
90006064:	2b20      	cmp	r3, #32
90006066:	d003      	beq.n	90006070 <I2C_IsErrorOccurred+0xe0>
90006068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000606c:	2b00      	cmp	r3, #0
9000606e:	d0aa      	beq.n	90005fc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006074:	2b00      	cmp	r3, #0
90006076:	d103      	bne.n	90006080 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006078:	68fb      	ldr	r3, [r7, #12]
9000607a:	681b      	ldr	r3, [r3, #0]
9000607c:	2220      	movs	r2, #32
9000607e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006080:	6a3b      	ldr	r3, [r7, #32]
90006082:	f043 0304 	orr.w	r3, r3, #4
90006086:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006088:	2301      	movs	r3, #1
9000608a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000608e:	68fb      	ldr	r3, [r7, #12]
90006090:	681b      	ldr	r3, [r3, #0]
90006092:	699b      	ldr	r3, [r3, #24]
90006094:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006096:	69bb      	ldr	r3, [r7, #24]
90006098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000609c:	2b00      	cmp	r3, #0
9000609e:	d00b      	beq.n	900060b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
900060a0:	6a3b      	ldr	r3, [r7, #32]
900060a2:	f043 0301 	orr.w	r3, r3, #1
900060a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900060a8:	68fb      	ldr	r3, [r7, #12]
900060aa:	681b      	ldr	r3, [r3, #0]
900060ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
900060b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900060b2:	2301      	movs	r3, #1
900060b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900060b8:	69bb      	ldr	r3, [r7, #24]
900060ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900060be:	2b00      	cmp	r3, #0
900060c0:	d00b      	beq.n	900060da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900060c2:	6a3b      	ldr	r3, [r7, #32]
900060c4:	f043 0308 	orr.w	r3, r3, #8
900060c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900060ca:	68fb      	ldr	r3, [r7, #12]
900060cc:	681b      	ldr	r3, [r3, #0]
900060ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900060d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900060d4:	2301      	movs	r3, #1
900060d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900060da:	69bb      	ldr	r3, [r7, #24]
900060dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900060e0:	2b00      	cmp	r3, #0
900060e2:	d00b      	beq.n	900060fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
900060e4:	6a3b      	ldr	r3, [r7, #32]
900060e6:	f043 0302 	orr.w	r3, r3, #2
900060ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900060ec:	68fb      	ldr	r3, [r7, #12]
900060ee:	681b      	ldr	r3, [r3, #0]
900060f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
900060f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900060f6:	2301      	movs	r3, #1
900060f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
900060fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006100:	2b00      	cmp	r3, #0
90006102:	d01c      	beq.n	9000613e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006104:	68f8      	ldr	r0, [r7, #12]
90006106:	f7ff fe3b 	bl	90005d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000610a:	68fb      	ldr	r3, [r7, #12]
9000610c:	681b      	ldr	r3, [r3, #0]
9000610e:	6859      	ldr	r1, [r3, #4]
90006110:	68fb      	ldr	r3, [r7, #12]
90006112:	681a      	ldr	r2, [r3, #0]
90006114:	4b0d      	ldr	r3, [pc, #52]	@ (9000614c <I2C_IsErrorOccurred+0x1bc>)
90006116:	400b      	ands	r3, r1
90006118:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
9000611a:	68fb      	ldr	r3, [r7, #12]
9000611c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000611e:	6a3b      	ldr	r3, [r7, #32]
90006120:	431a      	orrs	r2, r3
90006122:	68fb      	ldr	r3, [r7, #12]
90006124:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006126:	68fb      	ldr	r3, [r7, #12]
90006128:	2220      	movs	r2, #32
9000612a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000612e:	68fb      	ldr	r3, [r7, #12]
90006130:	2200      	movs	r2, #0
90006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006136:	68fb      	ldr	r3, [r7, #12]
90006138:	2200      	movs	r2, #0
9000613a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
9000613e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
90006142:	4618      	mov	r0, r3
90006144:	3728      	adds	r7, #40	@ 0x28
90006146:	46bd      	mov	sp, r7
90006148:	bd80      	pop	{r7, pc}
9000614a:	bf00      	nop
9000614c:	fe00e800 	.word	0xfe00e800

90006150 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006150:	b480      	push	{r7}
90006152:	b087      	sub	sp, #28
90006154:	af00      	add	r7, sp, #0
90006156:	60f8      	str	r0, [r7, #12]
90006158:	607b      	str	r3, [r7, #4]
9000615a:	460b      	mov	r3, r1
9000615c:	817b      	strh	r3, [r7, #10]
9000615e:	4613      	mov	r3, r2
90006160:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006162:	897b      	ldrh	r3, [r7, #10]
90006164:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006168:	7a7b      	ldrb	r3, [r7, #9]
9000616a:	041b      	lsls	r3, r3, #16
9000616c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006170:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006172:	687b      	ldr	r3, [r7, #4]
90006174:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006176:	6a3b      	ldr	r3, [r7, #32]
90006178:	4313      	orrs	r3, r2
9000617a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000617e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90006180:	68fb      	ldr	r3, [r7, #12]
90006182:	681b      	ldr	r3, [r3, #0]
90006184:	685a      	ldr	r2, [r3, #4]
90006186:	6a3b      	ldr	r3, [r7, #32]
90006188:	0d5b      	lsrs	r3, r3, #21
9000618a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
9000618e:	4b08      	ldr	r3, [pc, #32]	@ (900061b0 <I2C_TransferConfig+0x60>)
90006190:	430b      	orrs	r3, r1
90006192:	43db      	mvns	r3, r3
90006194:	ea02 0103 	and.w	r1, r2, r3
90006198:	68fb      	ldr	r3, [r7, #12]
9000619a:	681b      	ldr	r3, [r3, #0]
9000619c:	697a      	ldr	r2, [r7, #20]
9000619e:	430a      	orrs	r2, r1
900061a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900061a2:	bf00      	nop
900061a4:	371c      	adds	r7, #28
900061a6:	46bd      	mov	sp, r7
900061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
900061ac:	4770      	bx	lr
900061ae:	bf00      	nop
900061b0:	03ff63ff 	.word	0x03ff63ff

900061b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900061b4:	b480      	push	{r7}
900061b6:	b083      	sub	sp, #12
900061b8:	af00      	add	r7, sp, #0
900061ba:	6078      	str	r0, [r7, #4]
900061bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900061be:	687b      	ldr	r3, [r7, #4]
900061c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900061c4:	b2db      	uxtb	r3, r3
900061c6:	2b20      	cmp	r3, #32
900061c8:	d138      	bne.n	9000623c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900061ca:	687b      	ldr	r3, [r7, #4]
900061cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900061d0:	2b01      	cmp	r3, #1
900061d2:	d101      	bne.n	900061d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
900061d4:	2302      	movs	r3, #2
900061d6:	e032      	b.n	9000623e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
900061d8:	687b      	ldr	r3, [r7, #4]
900061da:	2201      	movs	r2, #1
900061dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900061e0:	687b      	ldr	r3, [r7, #4]
900061e2:	2224      	movs	r2, #36	@ 0x24
900061e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900061e8:	687b      	ldr	r3, [r7, #4]
900061ea:	681b      	ldr	r3, [r3, #0]
900061ec:	681a      	ldr	r2, [r3, #0]
900061ee:	687b      	ldr	r3, [r7, #4]
900061f0:	681b      	ldr	r3, [r3, #0]
900061f2:	f022 0201 	bic.w	r2, r2, #1
900061f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
900061f8:	687b      	ldr	r3, [r7, #4]
900061fa:	681b      	ldr	r3, [r3, #0]
900061fc:	681a      	ldr	r2, [r3, #0]
900061fe:	687b      	ldr	r3, [r7, #4]
90006200:	681b      	ldr	r3, [r3, #0]
90006202:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006206:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006208:	687b      	ldr	r3, [r7, #4]
9000620a:	681b      	ldr	r3, [r3, #0]
9000620c:	6819      	ldr	r1, [r3, #0]
9000620e:	687b      	ldr	r3, [r7, #4]
90006210:	681b      	ldr	r3, [r3, #0]
90006212:	683a      	ldr	r2, [r7, #0]
90006214:	430a      	orrs	r2, r1
90006216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006218:	687b      	ldr	r3, [r7, #4]
9000621a:	681b      	ldr	r3, [r3, #0]
9000621c:	681a      	ldr	r2, [r3, #0]
9000621e:	687b      	ldr	r3, [r7, #4]
90006220:	681b      	ldr	r3, [r3, #0]
90006222:	f042 0201 	orr.w	r2, r2, #1
90006226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006228:	687b      	ldr	r3, [r7, #4]
9000622a:	2220      	movs	r2, #32
9000622c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006230:	687b      	ldr	r3, [r7, #4]
90006232:	2200      	movs	r2, #0
90006234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006238:	2300      	movs	r3, #0
9000623a:	e000      	b.n	9000623e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
9000623c:	2302      	movs	r3, #2
  }
}
9000623e:	4618      	mov	r0, r3
90006240:	370c      	adds	r7, #12
90006242:	46bd      	mov	sp, r7
90006244:	f85d 7b04 	ldr.w	r7, [sp], #4
90006248:	4770      	bx	lr

9000624a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
9000624a:	b480      	push	{r7}
9000624c:	b085      	sub	sp, #20
9000624e:	af00      	add	r7, sp, #0
90006250:	6078      	str	r0, [r7, #4]
90006252:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006254:	687b      	ldr	r3, [r7, #4]
90006256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
9000625a:	b2db      	uxtb	r3, r3
9000625c:	2b20      	cmp	r3, #32
9000625e:	d139      	bne.n	900062d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006260:	687b      	ldr	r3, [r7, #4]
90006262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006266:	2b01      	cmp	r3, #1
90006268:	d101      	bne.n	9000626e <HAL_I2CEx_ConfigDigitalFilter+0x24>
9000626a:	2302      	movs	r3, #2
9000626c:	e033      	b.n	900062d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000626e:	687b      	ldr	r3, [r7, #4]
90006270:	2201      	movs	r2, #1
90006272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006276:	687b      	ldr	r3, [r7, #4]
90006278:	2224      	movs	r2, #36	@ 0x24
9000627a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000627e:	687b      	ldr	r3, [r7, #4]
90006280:	681b      	ldr	r3, [r3, #0]
90006282:	681a      	ldr	r2, [r3, #0]
90006284:	687b      	ldr	r3, [r7, #4]
90006286:	681b      	ldr	r3, [r3, #0]
90006288:	f022 0201 	bic.w	r2, r2, #1
9000628c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
9000628e:	687b      	ldr	r3, [r7, #4]
90006290:	681b      	ldr	r3, [r3, #0]
90006292:	681b      	ldr	r3, [r3, #0]
90006294:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006296:	68fb      	ldr	r3, [r7, #12]
90006298:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
9000629c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000629e:	683b      	ldr	r3, [r7, #0]
900062a0:	021b      	lsls	r3, r3, #8
900062a2:	68fa      	ldr	r2, [r7, #12]
900062a4:	4313      	orrs	r3, r2
900062a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900062a8:	687b      	ldr	r3, [r7, #4]
900062aa:	681b      	ldr	r3, [r3, #0]
900062ac:	68fa      	ldr	r2, [r7, #12]
900062ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900062b0:	687b      	ldr	r3, [r7, #4]
900062b2:	681b      	ldr	r3, [r3, #0]
900062b4:	681a      	ldr	r2, [r3, #0]
900062b6:	687b      	ldr	r3, [r7, #4]
900062b8:	681b      	ldr	r3, [r3, #0]
900062ba:	f042 0201 	orr.w	r2, r2, #1
900062be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900062c0:	687b      	ldr	r3, [r7, #4]
900062c2:	2220      	movs	r2, #32
900062c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900062c8:	687b      	ldr	r3, [r7, #4]
900062ca:	2200      	movs	r2, #0
900062cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900062d0:	2300      	movs	r3, #0
900062d2:	e000      	b.n	900062d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900062d4:	2302      	movs	r3, #2
  }
}
900062d6:	4618      	mov	r0, r3
900062d8:	3714      	adds	r7, #20
900062da:	46bd      	mov	sp, r7
900062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900062e0:	4770      	bx	lr

900062e2 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900062e2:	b580      	push	{r7, lr}
900062e4:	b084      	sub	sp, #16
900062e6:	af00      	add	r7, sp, #0
900062e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900062ea:	687b      	ldr	r3, [r7, #4]
900062ec:	2b00      	cmp	r3, #0
900062ee:	d101      	bne.n	900062f4 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
900062f0:	2301      	movs	r3, #1
900062f2:	e08f      	b.n	90006414 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
900062f4:	687b      	ldr	r3, [r7, #4]
900062f6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
900062fa:	b2db      	uxtb	r3, r3
900062fc:	2b00      	cmp	r3, #0
900062fe:	d106      	bne.n	9000630e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90006300:	687b      	ldr	r3, [r7, #4]
90006302:	2200      	movs	r2, #0
90006304:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006308:	6878      	ldr	r0, [r7, #4]
9000630a:	f000 f887 	bl	9000641c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000630e:	687b      	ldr	r3, [r7, #4]
90006310:	2202      	movs	r2, #2
90006312:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006316:	687b      	ldr	r3, [r7, #4]
90006318:	681b      	ldr	r3, [r3, #0]
9000631a:	699a      	ldr	r2, [r3, #24]
9000631c:	687b      	ldr	r3, [r7, #4]
9000631e:	681b      	ldr	r3, [r3, #0]
90006320:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006324:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006326:	687b      	ldr	r3, [r7, #4]
90006328:	681b      	ldr	r3, [r3, #0]
9000632a:	6999      	ldr	r1, [r3, #24]
9000632c:	687b      	ldr	r3, [r7, #4]
9000632e:	685a      	ldr	r2, [r3, #4]
90006330:	687b      	ldr	r3, [r7, #4]
90006332:	689b      	ldr	r3, [r3, #8]
90006334:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006336:	687b      	ldr	r3, [r7, #4]
90006338:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000633a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000633c:	687b      	ldr	r3, [r7, #4]
9000633e:	691b      	ldr	r3, [r3, #16]
90006340:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006342:	687b      	ldr	r3, [r7, #4]
90006344:	681b      	ldr	r3, [r3, #0]
90006346:	430a      	orrs	r2, r1
90006348:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000634a:	687b      	ldr	r3, [r7, #4]
9000634c:	695b      	ldr	r3, [r3, #20]
9000634e:	041b      	lsls	r3, r3, #16
90006350:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
90006352:	687b      	ldr	r3, [r7, #4]
90006354:	6999      	ldr	r1, [r3, #24]
90006356:	687b      	ldr	r3, [r7, #4]
90006358:	681b      	ldr	r3, [r3, #0]
9000635a:	68fa      	ldr	r2, [r7, #12]
9000635c:	430a      	orrs	r2, r1
9000635e:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90006360:	687b      	ldr	r3, [r7, #4]
90006362:	69db      	ldr	r3, [r3, #28]
90006364:	041b      	lsls	r3, r3, #16
90006366:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90006368:	687b      	ldr	r3, [r7, #4]
9000636a:	6a19      	ldr	r1, [r3, #32]
9000636c:	687b      	ldr	r3, [r7, #4]
9000636e:	681b      	ldr	r3, [r3, #0]
90006370:	68fa      	ldr	r2, [r7, #12]
90006372:	430a      	orrs	r2, r1
90006374:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90006376:	687b      	ldr	r3, [r7, #4]
90006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000637a:	041b      	lsls	r3, r3, #16
9000637c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
9000637e:	687b      	ldr	r3, [r7, #4]
90006380:	6a99      	ldr	r1, [r3, #40]	@ 0x28
90006382:	687b      	ldr	r3, [r7, #4]
90006384:	681b      	ldr	r3, [r3, #0]
90006386:	68fa      	ldr	r2, [r7, #12]
90006388:	430a      	orrs	r2, r1
9000638a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
9000638c:	687b      	ldr	r3, [r7, #4]
9000638e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006390:	041b      	lsls	r3, r3, #16
90006392:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006394:	687b      	ldr	r3, [r7, #4]
90006396:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006398:	687b      	ldr	r3, [r7, #4]
9000639a:	681b      	ldr	r3, [r3, #0]
9000639c:	68fa      	ldr	r2, [r7, #12]
9000639e:	430a      	orrs	r2, r1
900063a0:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900063a2:	687b      	ldr	r3, [r7, #4]
900063a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
900063a8:	021b      	lsls	r3, r3, #8
900063aa:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900063ac:	687b      	ldr	r3, [r7, #4]
900063ae:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
900063b2:	041b      	lsls	r3, r3, #16
900063b4:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900063b6:	687b      	ldr	r3, [r7, #4]
900063b8:	681b      	ldr	r3, [r3, #0]
900063ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
900063bc:	687b      	ldr	r3, [r7, #4]
900063be:	681b      	ldr	r3, [r3, #0]
900063c0:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
900063c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900063c6:	687b      	ldr	r3, [r7, #4]
900063c8:	681b      	ldr	r3, [r3, #0]
900063ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
900063cc:	68ba      	ldr	r2, [r7, #8]
900063ce:	68fb      	ldr	r3, [r7, #12]
900063d0:	4313      	orrs	r3, r2
900063d2:	687a      	ldr	r2, [r7, #4]
900063d4:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
900063d8:	431a      	orrs	r2, r3
900063da:	687b      	ldr	r3, [r7, #4]
900063dc:	681b      	ldr	r3, [r3, #0]
900063de:	430a      	orrs	r2, r1
900063e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900063e2:	687b      	ldr	r3, [r7, #4]
900063e4:	681b      	ldr	r3, [r3, #0]
900063e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900063e8:	687b      	ldr	r3, [r7, #4]
900063ea:	681b      	ldr	r3, [r3, #0]
900063ec:	f042 0206 	orr.w	r2, r2, #6
900063f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
900063f2:	687b      	ldr	r3, [r7, #4]
900063f4:	681b      	ldr	r3, [r3, #0]
900063f6:	699a      	ldr	r2, [r3, #24]
900063f8:	687b      	ldr	r3, [r7, #4]
900063fa:	681b      	ldr	r3, [r3, #0]
900063fc:	f042 0201 	orr.w	r2, r2, #1
90006400:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006402:	687b      	ldr	r3, [r7, #4]
90006404:	2200      	movs	r2, #0
90006406:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000640a:	687b      	ldr	r3, [r7, #4]
9000640c:	2201      	movs	r2, #1
9000640e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
90006412:	2300      	movs	r3, #0
}
90006414:	4618      	mov	r0, r3
90006416:	3710      	adds	r7, #16
90006418:	46bd      	mov	sp, r7
9000641a:	bd80      	pop	{r7, pc}

9000641c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
9000641c:	b480      	push	{r7}
9000641e:	b083      	sub	sp, #12
90006420:	af00      	add	r7, sp, #0
90006422:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006424:	bf00      	nop
90006426:	370c      	adds	r7, #12
90006428:	46bd      	mov	sp, r7
9000642a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000642e:	4770      	bx	lr

90006430 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006430:	b5b0      	push	{r4, r5, r7, lr}
90006432:	b084      	sub	sp, #16
90006434:	af00      	add	r7, sp, #0
90006436:	60f8      	str	r0, [r7, #12]
90006438:	60b9      	str	r1, [r7, #8]
9000643a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000643c:	68fb      	ldr	r3, [r7, #12]
9000643e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90006442:	2b01      	cmp	r3, #1
90006444:	d101      	bne.n	9000644a <HAL_LTDC_ConfigLayer+0x1a>
90006446:	2302      	movs	r3, #2
90006448:	e02c      	b.n	900064a4 <HAL_LTDC_ConfigLayer+0x74>
9000644a:	68fb      	ldr	r3, [r7, #12]
9000644c:	2201      	movs	r2, #1
9000644e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006452:	68fb      	ldr	r3, [r7, #12]
90006454:	2202      	movs	r2, #2
90006456:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000645a:	68fa      	ldr	r2, [r7, #12]
9000645c:	687b      	ldr	r3, [r7, #4]
9000645e:	2134      	movs	r1, #52	@ 0x34
90006460:	fb01 f303 	mul.w	r3, r1, r3
90006464:	4413      	add	r3, r2
90006466:	f103 0238 	add.w	r2, r3, #56	@ 0x38
9000646a:	68bb      	ldr	r3, [r7, #8]
9000646c:	4614      	mov	r4, r2
9000646e:	461d      	mov	r5, r3
90006470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000647a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000647c:	682b      	ldr	r3, [r5, #0]
9000647e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90006480:	687a      	ldr	r2, [r7, #4]
90006482:	68b9      	ldr	r1, [r7, #8]
90006484:	68f8      	ldr	r0, [r7, #12]
90006486:	f000 f811 	bl	900064ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000648a:	68fb      	ldr	r3, [r7, #12]
9000648c:	681b      	ldr	r3, [r3, #0]
9000648e:	2201      	movs	r2, #1
90006490:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90006492:	68fb      	ldr	r3, [r7, #12]
90006494:	2201      	movs	r2, #1
90006496:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
9000649a:	68fb      	ldr	r3, [r7, #12]
9000649c:	2200      	movs	r2, #0
9000649e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
900064a2:	2300      	movs	r3, #0
}
900064a4:	4618      	mov	r0, r3
900064a6:	3710      	adds	r7, #16
900064a8:	46bd      	mov	sp, r7
900064aa:	bdb0      	pop	{r4, r5, r7, pc}

900064ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900064ac:	b480      	push	{r7}
900064ae:	b089      	sub	sp, #36	@ 0x24
900064b0:	af00      	add	r7, sp, #0
900064b2:	60f8      	str	r0, [r7, #12]
900064b4:	60b9      	str	r1, [r7, #8]
900064b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900064b8:	68bb      	ldr	r3, [r7, #8]
900064ba:	685a      	ldr	r2, [r3, #4]
900064bc:	68fb      	ldr	r3, [r7, #12]
900064be:	681b      	ldr	r3, [r3, #0]
900064c0:	68db      	ldr	r3, [r3, #12]
900064c2:	0c1b      	lsrs	r3, r3, #16
900064c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
900064c8:	4413      	add	r3, r2
900064ca:	041b      	lsls	r3, r3, #16
900064cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900064ce:	68fb      	ldr	r3, [r7, #12]
900064d0:	681b      	ldr	r3, [r3, #0]
900064d2:	461a      	mov	r2, r3
900064d4:	687b      	ldr	r3, [r7, #4]
900064d6:	01db      	lsls	r3, r3, #7
900064d8:	4413      	add	r3, r2
900064da:	3384      	adds	r3, #132	@ 0x84
900064dc:	685b      	ldr	r3, [r3, #4]
900064de:	68fa      	ldr	r2, [r7, #12]
900064e0:	6812      	ldr	r2, [r2, #0]
900064e2:	4611      	mov	r1, r2
900064e4:	687a      	ldr	r2, [r7, #4]
900064e6:	01d2      	lsls	r2, r2, #7
900064e8:	440a      	add	r2, r1
900064ea:	3284      	adds	r2, #132	@ 0x84
900064ec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900064f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900064f2:	68bb      	ldr	r3, [r7, #8]
900064f4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900064f6:	68fb      	ldr	r3, [r7, #12]
900064f8:	681b      	ldr	r3, [r3, #0]
900064fa:	68db      	ldr	r3, [r3, #12]
900064fc:	0c1b      	lsrs	r3, r3, #16
900064fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006502:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006504:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006506:	68fb      	ldr	r3, [r7, #12]
90006508:	681b      	ldr	r3, [r3, #0]
9000650a:	4619      	mov	r1, r3
9000650c:	687b      	ldr	r3, [r7, #4]
9000650e:	01db      	lsls	r3, r3, #7
90006510:	440b      	add	r3, r1
90006512:	3384      	adds	r3, #132	@ 0x84
90006514:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006516:	69fb      	ldr	r3, [r7, #28]
90006518:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000651a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000651c:	68bb      	ldr	r3, [r7, #8]
9000651e:	68da      	ldr	r2, [r3, #12]
90006520:	68fb      	ldr	r3, [r7, #12]
90006522:	681b      	ldr	r3, [r3, #0]
90006524:	68db      	ldr	r3, [r3, #12]
90006526:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000652a:	4413      	add	r3, r2
9000652c:	041b      	lsls	r3, r3, #16
9000652e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90006530:	68fb      	ldr	r3, [r7, #12]
90006532:	681b      	ldr	r3, [r3, #0]
90006534:	461a      	mov	r2, r3
90006536:	687b      	ldr	r3, [r7, #4]
90006538:	01db      	lsls	r3, r3, #7
9000653a:	4413      	add	r3, r2
9000653c:	3384      	adds	r3, #132	@ 0x84
9000653e:	689b      	ldr	r3, [r3, #8]
90006540:	68fa      	ldr	r2, [r7, #12]
90006542:	6812      	ldr	r2, [r2, #0]
90006544:	4611      	mov	r1, r2
90006546:	687a      	ldr	r2, [r7, #4]
90006548:	01d2      	lsls	r2, r2, #7
9000654a:	440a      	add	r2, r1
9000654c:	3284      	adds	r2, #132	@ 0x84
9000654e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006552:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90006554:	68bb      	ldr	r3, [r7, #8]
90006556:	689a      	ldr	r2, [r3, #8]
90006558:	68fb      	ldr	r3, [r7, #12]
9000655a:	681b      	ldr	r3, [r3, #0]
9000655c:	68db      	ldr	r3, [r3, #12]
9000655e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006562:	4413      	add	r3, r2
90006564:	1c5a      	adds	r2, r3, #1
90006566:	68fb      	ldr	r3, [r7, #12]
90006568:	681b      	ldr	r3, [r3, #0]
9000656a:	4619      	mov	r1, r3
9000656c:	687b      	ldr	r3, [r7, #4]
9000656e:	01db      	lsls	r3, r3, #7
90006570:	440b      	add	r3, r1
90006572:	3384      	adds	r3, #132	@ 0x84
90006574:	4619      	mov	r1, r3
90006576:	69fb      	ldr	r3, [r7, #28]
90006578:	4313      	orrs	r3, r2
9000657a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000657c:	68fb      	ldr	r3, [r7, #12]
9000657e:	681b      	ldr	r3, [r3, #0]
90006580:	461a      	mov	r2, r3
90006582:	687b      	ldr	r3, [r7, #4]
90006584:	01db      	lsls	r3, r3, #7
90006586:	4413      	add	r3, r2
90006588:	3384      	adds	r3, #132	@ 0x84
9000658a:	691b      	ldr	r3, [r3, #16]
9000658c:	68fa      	ldr	r2, [r7, #12]
9000658e:	6812      	ldr	r2, [r2, #0]
90006590:	4611      	mov	r1, r2
90006592:	687a      	ldr	r2, [r7, #4]
90006594:	01d2      	lsls	r2, r2, #7
90006596:	440a      	add	r2, r1
90006598:	3284      	adds	r2, #132	@ 0x84
9000659a:	f023 0307 	bic.w	r3, r3, #7
9000659e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900065a0:	68fb      	ldr	r3, [r7, #12]
900065a2:	681b      	ldr	r3, [r3, #0]
900065a4:	461a      	mov	r2, r3
900065a6:	687b      	ldr	r3, [r7, #4]
900065a8:	01db      	lsls	r3, r3, #7
900065aa:	4413      	add	r3, r2
900065ac:	3384      	adds	r3, #132	@ 0x84
900065ae:	461a      	mov	r2, r3
900065b0:	68bb      	ldr	r3, [r7, #8]
900065b2:	691b      	ldr	r3, [r3, #16]
900065b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900065b6:	68bb      	ldr	r3, [r7, #8]
900065b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
900065bc:	021b      	lsls	r3, r3, #8
900065be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900065c0:	68bb      	ldr	r3, [r7, #8]
900065c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
900065c6:	041b      	lsls	r3, r3, #16
900065c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900065ca:	68bb      	ldr	r3, [r7, #8]
900065cc:	699b      	ldr	r3, [r3, #24]
900065ce:	061b      	lsls	r3, r3, #24
900065d0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
900065d2:	68bb      	ldr	r3, [r7, #8]
900065d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
900065d8:	461a      	mov	r2, r3
900065da:	69fb      	ldr	r3, [r7, #28]
900065dc:	431a      	orrs	r2, r3
900065de:	69bb      	ldr	r3, [r7, #24]
900065e0:	431a      	orrs	r2, r3
900065e2:	68fb      	ldr	r3, [r7, #12]
900065e4:	681b      	ldr	r3, [r3, #0]
900065e6:	4619      	mov	r1, r3
900065e8:	687b      	ldr	r3, [r7, #4]
900065ea:	01db      	lsls	r3, r3, #7
900065ec:	440b      	add	r3, r1
900065ee:	3384      	adds	r3, #132	@ 0x84
900065f0:	4619      	mov	r1, r3
900065f2:	697b      	ldr	r3, [r7, #20]
900065f4:	4313      	orrs	r3, r2
900065f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900065f8:	68fb      	ldr	r3, [r7, #12]
900065fa:	681b      	ldr	r3, [r3, #0]
900065fc:	461a      	mov	r2, r3
900065fe:	687b      	ldr	r3, [r7, #4]
90006600:	01db      	lsls	r3, r3, #7
90006602:	4413      	add	r3, r2
90006604:	3384      	adds	r3, #132	@ 0x84
90006606:	695b      	ldr	r3, [r3, #20]
90006608:	68fa      	ldr	r2, [r7, #12]
9000660a:	6812      	ldr	r2, [r2, #0]
9000660c:	4611      	mov	r1, r2
9000660e:	687a      	ldr	r2, [r7, #4]
90006610:	01d2      	lsls	r2, r2, #7
90006612:	440a      	add	r2, r1
90006614:	3284      	adds	r2, #132	@ 0x84
90006616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
9000661a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000661c:	68fb      	ldr	r3, [r7, #12]
9000661e:	681b      	ldr	r3, [r3, #0]
90006620:	461a      	mov	r2, r3
90006622:	687b      	ldr	r3, [r7, #4]
90006624:	01db      	lsls	r3, r3, #7
90006626:	4413      	add	r3, r2
90006628:	3384      	adds	r3, #132	@ 0x84
9000662a:	461a      	mov	r2, r3
9000662c:	68bb      	ldr	r3, [r7, #8]
9000662e:	695b      	ldr	r3, [r3, #20]
90006630:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90006632:	68fb      	ldr	r3, [r7, #12]
90006634:	681b      	ldr	r3, [r3, #0]
90006636:	461a      	mov	r2, r3
90006638:	687b      	ldr	r3, [r7, #4]
9000663a:	01db      	lsls	r3, r3, #7
9000663c:	4413      	add	r3, r2
9000663e:	3384      	adds	r3, #132	@ 0x84
90006640:	69da      	ldr	r2, [r3, #28]
90006642:	68fb      	ldr	r3, [r7, #12]
90006644:	681b      	ldr	r3, [r3, #0]
90006646:	4619      	mov	r1, r3
90006648:	687b      	ldr	r3, [r7, #4]
9000664a:	01db      	lsls	r3, r3, #7
9000664c:	440b      	add	r3, r1
9000664e:	3384      	adds	r3, #132	@ 0x84
90006650:	4619      	mov	r1, r3
90006652:	4b4f      	ldr	r3, [pc, #316]	@ (90006790 <LTDC_SetConfig+0x2e4>)
90006654:	4013      	ands	r3, r2
90006656:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006658:	68bb      	ldr	r3, [r7, #8]
9000665a:	69da      	ldr	r2, [r3, #28]
9000665c:	68bb      	ldr	r3, [r7, #8]
9000665e:	6a1b      	ldr	r3, [r3, #32]
90006660:	68f9      	ldr	r1, [r7, #12]
90006662:	6809      	ldr	r1, [r1, #0]
90006664:	4608      	mov	r0, r1
90006666:	6879      	ldr	r1, [r7, #4]
90006668:	01c9      	lsls	r1, r1, #7
9000666a:	4401      	add	r1, r0
9000666c:	3184      	adds	r1, #132	@ 0x84
9000666e:	4313      	orrs	r3, r2
90006670:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90006672:	68fb      	ldr	r3, [r7, #12]
90006674:	681b      	ldr	r3, [r3, #0]
90006676:	461a      	mov	r2, r3
90006678:	687b      	ldr	r3, [r7, #4]
9000667a:	01db      	lsls	r3, r3, #7
9000667c:	4413      	add	r3, r2
9000667e:	3384      	adds	r3, #132	@ 0x84
90006680:	461a      	mov	r2, r3
90006682:	68bb      	ldr	r3, [r7, #8]
90006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006686:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006688:	68bb      	ldr	r3, [r7, #8]
9000668a:	691b      	ldr	r3, [r3, #16]
9000668c:	2b00      	cmp	r3, #0
9000668e:	d102      	bne.n	90006696 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006690:	2304      	movs	r3, #4
90006692:	61fb      	str	r3, [r7, #28]
90006694:	e01b      	b.n	900066ce <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006696:	68bb      	ldr	r3, [r7, #8]
90006698:	691b      	ldr	r3, [r3, #16]
9000669a:	2b01      	cmp	r3, #1
9000669c:	d102      	bne.n	900066a4 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
9000669e:	2303      	movs	r3, #3
900066a0:	61fb      	str	r3, [r7, #28]
900066a2:	e014      	b.n	900066ce <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900066a4:	68bb      	ldr	r3, [r7, #8]
900066a6:	691b      	ldr	r3, [r3, #16]
900066a8:	2b04      	cmp	r3, #4
900066aa:	d00b      	beq.n	900066c4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900066ac:	68bb      	ldr	r3, [r7, #8]
900066ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900066b0:	2b02      	cmp	r3, #2
900066b2:	d007      	beq.n	900066c4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900066b4:	68bb      	ldr	r3, [r7, #8]
900066b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900066b8:	2b03      	cmp	r3, #3
900066ba:	d003      	beq.n	900066c4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
900066bc:	68bb      	ldr	r3, [r7, #8]
900066be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900066c0:	2b07      	cmp	r3, #7
900066c2:	d102      	bne.n	900066ca <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
900066c4:	2302      	movs	r3, #2
900066c6:	61fb      	str	r3, [r7, #28]
900066c8:	e001      	b.n	900066ce <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
900066ca:	2301      	movs	r3, #1
900066cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900066ce:	68fb      	ldr	r3, [r7, #12]
900066d0:	681b      	ldr	r3, [r3, #0]
900066d2:	461a      	mov	r2, r3
900066d4:	687b      	ldr	r3, [r7, #4]
900066d6:	01db      	lsls	r3, r3, #7
900066d8:	4413      	add	r3, r2
900066da:	3384      	adds	r3, #132	@ 0x84
900066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900066de:	68fa      	ldr	r2, [r7, #12]
900066e0:	6812      	ldr	r2, [r2, #0]
900066e2:	4611      	mov	r1, r2
900066e4:	687a      	ldr	r2, [r7, #4]
900066e6:	01d2      	lsls	r2, r2, #7
900066e8:	440a      	add	r2, r1
900066ea:	3284      	adds	r2, #132	@ 0x84
900066ec:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
900066f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
900066f2:	68bb      	ldr	r3, [r7, #8]
900066f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900066f6:	69fa      	ldr	r2, [r7, #28]
900066f8:	fb02 f303 	mul.w	r3, r2, r3
900066fc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
900066fe:	68bb      	ldr	r3, [r7, #8]
90006700:	6859      	ldr	r1, [r3, #4]
90006702:	68bb      	ldr	r3, [r7, #8]
90006704:	681b      	ldr	r3, [r3, #0]
90006706:	1acb      	subs	r3, r1, r3
90006708:	69f9      	ldr	r1, [r7, #28]
9000670a:	fb01 f303 	mul.w	r3, r1, r3
9000670e:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006710:	68f9      	ldr	r1, [r7, #12]
90006712:	6809      	ldr	r1, [r1, #0]
90006714:	4608      	mov	r0, r1
90006716:	6879      	ldr	r1, [r7, #4]
90006718:	01c9      	lsls	r1, r1, #7
9000671a:	4401      	add	r1, r0
9000671c:	3184      	adds	r1, #132	@ 0x84
9000671e:	4313      	orrs	r3, r2
90006720:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90006722:	68fb      	ldr	r3, [r7, #12]
90006724:	681b      	ldr	r3, [r3, #0]
90006726:	461a      	mov	r2, r3
90006728:	687b      	ldr	r3, [r7, #4]
9000672a:	01db      	lsls	r3, r3, #7
9000672c:	4413      	add	r3, r2
9000672e:	3384      	adds	r3, #132	@ 0x84
90006730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90006732:	68fb      	ldr	r3, [r7, #12]
90006734:	681b      	ldr	r3, [r3, #0]
90006736:	4619      	mov	r1, r3
90006738:	687b      	ldr	r3, [r7, #4]
9000673a:	01db      	lsls	r3, r3, #7
9000673c:	440b      	add	r3, r1
9000673e:	3384      	adds	r3, #132	@ 0x84
90006740:	4619      	mov	r1, r3
90006742:	4b14      	ldr	r3, [pc, #80]	@ (90006794 <LTDC_SetConfig+0x2e8>)
90006744:	4013      	ands	r3, r2
90006746:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006748:	68fb      	ldr	r3, [r7, #12]
9000674a:	681b      	ldr	r3, [r3, #0]
9000674c:	461a      	mov	r2, r3
9000674e:	687b      	ldr	r3, [r7, #4]
90006750:	01db      	lsls	r3, r3, #7
90006752:	4413      	add	r3, r2
90006754:	3384      	adds	r3, #132	@ 0x84
90006756:	461a      	mov	r2, r3
90006758:	68bb      	ldr	r3, [r7, #8]
9000675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000675c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000675e:	68fb      	ldr	r3, [r7, #12]
90006760:	681b      	ldr	r3, [r3, #0]
90006762:	461a      	mov	r2, r3
90006764:	687b      	ldr	r3, [r7, #4]
90006766:	01db      	lsls	r3, r3, #7
90006768:	4413      	add	r3, r2
9000676a:	3384      	adds	r3, #132	@ 0x84
9000676c:	681b      	ldr	r3, [r3, #0]
9000676e:	68fa      	ldr	r2, [r7, #12]
90006770:	6812      	ldr	r2, [r2, #0]
90006772:	4611      	mov	r1, r2
90006774:	687a      	ldr	r2, [r7, #4]
90006776:	01d2      	lsls	r2, r2, #7
90006778:	440a      	add	r2, r1
9000677a:	3284      	adds	r2, #132	@ 0x84
9000677c:	f043 0301 	orr.w	r3, r3, #1
90006780:	6013      	str	r3, [r2, #0]
}
90006782:	bf00      	nop
90006784:	3724      	adds	r7, #36	@ 0x24
90006786:	46bd      	mov	sp, r7
90006788:	f85d 7b04 	ldr.w	r7, [sp], #4
9000678c:	4770      	bx	lr
9000678e:	bf00      	nop
90006790:	fffff8f8 	.word	0xfffff8f8
90006794:	fffff800 	.word	0xfffff800

90006798 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006798:	b580      	push	{r7, lr}
9000679a:	b084      	sub	sp, #16
9000679c:	af00      	add	r7, sp, #0
9000679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900067a0:	f7fc fc8e 	bl	900030c0 <HAL_GetTick>
900067a4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900067a6:	687b      	ldr	r3, [r7, #4]
900067a8:	2b00      	cmp	r3, #0
900067aa:	d101      	bne.n	900067b0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
900067ac:	2301      	movs	r3, #1
900067ae:	e03b      	b.n	90006828 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
900067b0:	687b      	ldr	r3, [r7, #4]
900067b2:	2200      	movs	r2, #0
900067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
900067b8:	687b      	ldr	r3, [r7, #4]
900067ba:	2202      	movs	r2, #2
900067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
900067c0:	687b      	ldr	r3, [r7, #4]
900067c2:	681b      	ldr	r3, [r3, #0]
900067c4:	68da      	ldr	r2, [r3, #12]
900067c6:	687b      	ldr	r3, [r7, #4]
900067c8:	681b      	ldr	r3, [r3, #0]
900067ca:	f022 0201 	bic.w	r2, r2, #1
900067ce:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900067d0:	e00f      	b.n	900067f2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
900067d2:	f7fc fc75 	bl	900030c0 <HAL_GetTick>
900067d6:	4602      	mov	r2, r0
900067d8:	68fb      	ldr	r3, [r7, #12]
900067da:	1ad3      	subs	r3, r2, r3
900067dc:	2b05      	cmp	r3, #5
900067de:	d908      	bls.n	900067f2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
900067e0:	687b      	ldr	r3, [r7, #4]
900067e2:	2240      	movs	r2, #64	@ 0x40
900067e4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
900067e6:	687b      	ldr	r3, [r7, #4]
900067e8:	2203      	movs	r2, #3
900067ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
900067ee:	2301      	movs	r3, #1
900067f0:	e01a      	b.n	90006828 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900067f2:	687b      	ldr	r3, [r7, #4]
900067f4:	681b      	ldr	r3, [r3, #0]
900067f6:	68db      	ldr	r3, [r3, #12]
900067f8:	f003 0301 	and.w	r3, r3, #1
900067fc:	2b00      	cmp	r3, #0
900067fe:	d1e8      	bne.n	900067d2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006800:	6878      	ldr	r0, [r7, #4]
90006802:	f000 f86d 	bl	900068e0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006806:	687b      	ldr	r3, [r7, #4]
90006808:	2200      	movs	r2, #0
9000680a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
9000680c:	687b      	ldr	r3, [r7, #4]
9000680e:	2200      	movs	r2, #0
90006810:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006812:	687b      	ldr	r3, [r7, #4]
90006814:	2200      	movs	r2, #0
90006816:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006818:	687b      	ldr	r3, [r7, #4]
9000681a:	2200      	movs	r2, #0
9000681c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
9000681e:	687b      	ldr	r3, [r7, #4]
90006820:	2201      	movs	r2, #1
90006822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006826:	2300      	movs	r3, #0
}
90006828:	4618      	mov	r0, r3
9000682a:	3710      	adds	r7, #16
9000682c:	46bd      	mov	sp, r7
9000682e:	bd80      	pop	{r7, pc}

90006830 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90006830:	b480      	push	{r7}
90006832:	b083      	sub	sp, #12
90006834:	af00      	add	r7, sp, #0
90006836:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006838:	687b      	ldr	r3, [r7, #4]
9000683a:	2b00      	cmp	r3, #0
9000683c:	d101      	bne.n	90006842 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
9000683e:	2301      	movs	r3, #1
90006840:	e048      	b.n	900068d4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90006842:	687b      	ldr	r3, [r7, #4]
90006844:	681b      	ldr	r3, [r3, #0]
90006846:	68da      	ldr	r2, [r3, #12]
90006848:	687b      	ldr	r3, [r7, #4]
9000684a:	681b      	ldr	r3, [r3, #0]
9000684c:	f022 0201 	bic.w	r2, r2, #1
90006850:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90006852:	687b      	ldr	r3, [r7, #4]
90006854:	681b      	ldr	r3, [r3, #0]
90006856:	2200      	movs	r2, #0
90006858:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
9000685a:	687b      	ldr	r3, [r7, #4]
9000685c:	681b      	ldr	r3, [r3, #0]
9000685e:	2200      	movs	r2, #0
90006860:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006862:	687b      	ldr	r3, [r7, #4]
90006864:	681b      	ldr	r3, [r3, #0]
90006866:	2200      	movs	r2, #0
90006868:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
9000686a:	687b      	ldr	r3, [r7, #4]
9000686c:	681b      	ldr	r3, [r3, #0]
9000686e:	2200      	movs	r2, #0
90006870:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006872:	687b      	ldr	r3, [r7, #4]
90006874:	681b      	ldr	r3, [r3, #0]
90006876:	2200      	movs	r2, #0
90006878:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
9000687a:	687b      	ldr	r3, [r7, #4]
9000687c:	681b      	ldr	r3, [r3, #0]
9000687e:	2200      	movs	r2, #0
90006880:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006882:	687b      	ldr	r3, [r7, #4]
90006884:	681b      	ldr	r3, [r3, #0]
90006886:	2200      	movs	r2, #0
90006888:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
9000688a:	687b      	ldr	r3, [r7, #4]
9000688c:	681b      	ldr	r3, [r3, #0]
9000688e:	2200      	movs	r2, #0
90006890:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006892:	687b      	ldr	r3, [r7, #4]
90006894:	681b      	ldr	r3, [r3, #0]
90006896:	2200      	movs	r2, #0
90006898:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
9000689a:	687b      	ldr	r3, [r7, #4]
9000689c:	681b      	ldr	r3, [r3, #0]
9000689e:	2200      	movs	r2, #0
900068a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
900068a2:	687b      	ldr	r3, [r7, #4]
900068a4:	681b      	ldr	r3, [r3, #0]
900068a6:	221f      	movs	r2, #31
900068a8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
900068aa:	687b      	ldr	r3, [r7, #4]
900068ac:	2200      	movs	r2, #0
900068ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900068b0:	687b      	ldr	r3, [r7, #4]
900068b2:	2200      	movs	r2, #0
900068b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900068b6:	687b      	ldr	r3, [r7, #4]
900068b8:	2200      	movs	r2, #0
900068ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900068bc:	687b      	ldr	r3, [r7, #4]
900068be:	2200      	movs	r2, #0
900068c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
900068c2:	687b      	ldr	r3, [r7, #4]
900068c4:	2200      	movs	r2, #0
900068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
900068ca:	687b      	ldr	r3, [r7, #4]
900068cc:	2200      	movs	r2, #0
900068ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900068d2:	2300      	movs	r3, #0
}
900068d4:	4618      	mov	r0, r3
900068d6:	370c      	adds	r7, #12
900068d8:	46bd      	mov	sp, r7
900068da:	f85d 7b04 	ldr.w	r7, [sp], #4
900068de:	4770      	bx	lr

900068e0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900068e0:	b480      	push	{r7}
900068e2:	b085      	sub	sp, #20
900068e4:	af00      	add	r7, sp, #0
900068e6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
900068e8:	687b      	ldr	r3, [r7, #4]
900068ea:	68d9      	ldr	r1, [r3, #12]
900068ec:	687b      	ldr	r3, [r7, #4]
900068ee:	691a      	ldr	r2, [r3, #16]
900068f0:	687b      	ldr	r3, [r7, #4]
900068f2:	681b      	ldr	r3, [r3, #0]
900068f4:	430a      	orrs	r2, r1
900068f6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900068f8:	687b      	ldr	r3, [r7, #4]
900068fa:	695a      	ldr	r2, [r3, #20]
900068fc:	687b      	ldr	r3, [r7, #4]
900068fe:	699b      	ldr	r3, [r3, #24]
90006900:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006902:	687b      	ldr	r3, [r7, #4]
90006904:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006906:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006908:	687b      	ldr	r3, [r7, #4]
9000690a:	6a1b      	ldr	r3, [r3, #32]
9000690c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000690e:	687b      	ldr	r3, [r7, #4]
90006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006912:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006914:	687b      	ldr	r3, [r7, #4]
90006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006918:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
9000691a:	687b      	ldr	r3, [r7, #4]
9000691c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000691e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006920:	687b      	ldr	r3, [r7, #4]
90006922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006924:	3b01      	subs	r3, #1
90006926:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006928:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
9000692c:	687b      	ldr	r3, [r7, #4]
9000692e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006930:	687b      	ldr	r3, [r7, #4]
90006932:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006934:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006936:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006938:	687b      	ldr	r3, [r7, #4]
9000693a:	685b      	ldr	r3, [r3, #4]
9000693c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006940:	d107      	bne.n	90006952 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006942:	687b      	ldr	r3, [r7, #4]
90006944:	681b      	ldr	r3, [r3, #0]
90006946:	691a      	ldr	r2, [r3, #16]
90006948:	687b      	ldr	r3, [r7, #4]
9000694a:	681b      	ldr	r3, [r3, #0]
9000694c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006950:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006952:	687b      	ldr	r3, [r7, #4]
90006954:	681b      	ldr	r3, [r3, #0]
90006956:	2200      	movs	r2, #0
90006958:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000695a:	687b      	ldr	r3, [r7, #4]
9000695c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000695e:	2b00      	cmp	r3, #0
90006960:	da11      	bge.n	90006986 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006962:	687b      	ldr	r3, [r7, #4]
90006964:	681b      	ldr	r3, [r3, #0]
90006966:	695a      	ldr	r2, [r3, #20]
90006968:	687b      	ldr	r3, [r7, #4]
9000696a:	681b      	ldr	r3, [r3, #0]
9000696c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006970:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006972:	687b      	ldr	r3, [r7, #4]
90006974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006976:	425b      	negs	r3, r3
90006978:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000697a:	687b      	ldr	r3, [r7, #4]
9000697c:	681b      	ldr	r3, [r3, #0]
9000697e:	68fa      	ldr	r2, [r7, #12]
90006980:	b292      	uxth	r2, r2
90006982:	621a      	str	r2, [r3, #32]
90006984:	e006      	b.n	90006994 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006986:	687b      	ldr	r3, [r7, #4]
90006988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000698a:	461a      	mov	r2, r3
9000698c:	687b      	ldr	r3, [r7, #4]
9000698e:	681b      	ldr	r3, [r3, #0]
90006990:	b292      	uxth	r2, r2
90006992:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006994:	687b      	ldr	r3, [r7, #4]
90006996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006998:	2b00      	cmp	r3, #0
9000699a:	da15      	bge.n	900069c8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000699c:	687b      	ldr	r3, [r7, #4]
9000699e:	681b      	ldr	r3, [r3, #0]
900069a0:	695a      	ldr	r2, [r3, #20]
900069a2:	687b      	ldr	r3, [r7, #4]
900069a4:	681b      	ldr	r3, [r3, #0]
900069a6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
900069aa:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
900069ac:	687b      	ldr	r3, [r7, #4]
900069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900069b0:	425b      	negs	r3, r3
900069b2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900069b4:	687b      	ldr	r3, [r7, #4]
900069b6:	681b      	ldr	r3, [r3, #0]
900069b8:	6a19      	ldr	r1, [r3, #32]
900069ba:	68fb      	ldr	r3, [r7, #12]
900069bc:	041a      	lsls	r2, r3, #16
900069be:	687b      	ldr	r3, [r7, #4]
900069c0:	681b      	ldr	r3, [r3, #0]
900069c2:	430a      	orrs	r2, r1
900069c4:	621a      	str	r2, [r3, #32]
900069c6:	e009      	b.n	900069dc <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900069c8:	687b      	ldr	r3, [r7, #4]
900069ca:	681b      	ldr	r3, [r3, #0]
900069cc:	6a19      	ldr	r1, [r3, #32]
900069ce:	687b      	ldr	r3, [r7, #4]
900069d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900069d2:	041a      	lsls	r2, r3, #16
900069d4:	687b      	ldr	r3, [r7, #4]
900069d6:	681b      	ldr	r3, [r3, #0]
900069d8:	430a      	orrs	r2, r1
900069da:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
900069dc:	687b      	ldr	r3, [r7, #4]
900069de:	685b      	ldr	r3, [r3, #4]
900069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900069e4:	d006      	beq.n	900069f4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
900069e6:	687b      	ldr	r3, [r7, #4]
900069e8:	685a      	ldr	r2, [r3, #4]
900069ea:	687b      	ldr	r3, [r7, #4]
900069ec:	681b      	ldr	r3, [r3, #0]
900069ee:	b2d2      	uxtb	r2, r2
900069f0:	629a      	str	r2, [r3, #40]	@ 0x28
900069f2:	e003      	b.n	900069fc <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
900069f4:	687b      	ldr	r3, [r7, #4]
900069f6:	681b      	ldr	r3, [r3, #0]
900069f8:	2200      	movs	r2, #0
900069fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
900069fc:	687b      	ldr	r3, [r7, #4]
900069fe:	681b      	ldr	r3, [r3, #0]
90006a00:	2200      	movs	r2, #0
90006a02:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006a04:	bf00      	nop
90006a06:	3714      	adds	r7, #20
90006a08:	46bd      	mov	sp, r7
90006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a0e:	4770      	bx	lr

90006a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006a10:	b580      	push	{r7, lr}
90006a12:	b08c      	sub	sp, #48	@ 0x30
90006a14:	af00      	add	r7, sp, #0
90006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006a18:	687b      	ldr	r3, [r7, #4]
90006a1a:	2b00      	cmp	r3, #0
90006a1c:	d102      	bne.n	90006a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006a1e:	2301      	movs	r3, #1
90006a20:	f000 bc48 	b.w	900072b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006a24:	687b      	ldr	r3, [r7, #4]
90006a26:	681b      	ldr	r3, [r3, #0]
90006a28:	f003 0301 	and.w	r3, r3, #1
90006a2c:	2b00      	cmp	r3, #0
90006a2e:	f000 8088 	beq.w	90006b42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006a32:	4b99      	ldr	r3, [pc, #612]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006a34:	691b      	ldr	r3, [r3, #16]
90006a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006a3c:	4b96      	ldr	r3, [pc, #600]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006a44:	2b10      	cmp	r3, #16
90006a46:	d007      	beq.n	90006a58 <HAL_RCC_OscConfig+0x48>
90006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006a4a:	2b18      	cmp	r3, #24
90006a4c:	d111      	bne.n	90006a72 <HAL_RCC_OscConfig+0x62>
90006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006a50:	f003 0303 	and.w	r3, r3, #3
90006a54:	2b02      	cmp	r3, #2
90006a56:	d10c      	bne.n	90006a72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006a58:	4b8f      	ldr	r3, [pc, #572]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006a5a:	681b      	ldr	r3, [r3, #0]
90006a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006a60:	2b00      	cmp	r3, #0
90006a62:	d06d      	beq.n	90006b40 <HAL_RCC_OscConfig+0x130>
90006a64:	687b      	ldr	r3, [r7, #4]
90006a66:	685b      	ldr	r3, [r3, #4]
90006a68:	2b00      	cmp	r3, #0
90006a6a:	d169      	bne.n	90006b40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006a6c:	2301      	movs	r3, #1
90006a6e:	f000 bc21 	b.w	900072b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006a72:	687b      	ldr	r3, [r7, #4]
90006a74:	685b      	ldr	r3, [r3, #4]
90006a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006a7a:	d106      	bne.n	90006a8a <HAL_RCC_OscConfig+0x7a>
90006a7c:	4b86      	ldr	r3, [pc, #536]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006a7e:	681b      	ldr	r3, [r3, #0]
90006a80:	4a85      	ldr	r2, [pc, #532]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006a86:	6013      	str	r3, [r2, #0]
90006a88:	e02e      	b.n	90006ae8 <HAL_RCC_OscConfig+0xd8>
90006a8a:	687b      	ldr	r3, [r7, #4]
90006a8c:	685b      	ldr	r3, [r3, #4]
90006a8e:	2b00      	cmp	r3, #0
90006a90:	d10c      	bne.n	90006aac <HAL_RCC_OscConfig+0x9c>
90006a92:	4b81      	ldr	r3, [pc, #516]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006a94:	681b      	ldr	r3, [r3, #0]
90006a96:	4a80      	ldr	r2, [pc, #512]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006a9c:	6013      	str	r3, [r2, #0]
90006a9e:	4b7e      	ldr	r3, [pc, #504]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006aa0:	681b      	ldr	r3, [r3, #0]
90006aa2:	4a7d      	ldr	r2, [pc, #500]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006aa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006aa8:	6013      	str	r3, [r2, #0]
90006aaa:	e01d      	b.n	90006ae8 <HAL_RCC_OscConfig+0xd8>
90006aac:	687b      	ldr	r3, [r7, #4]
90006aae:	685b      	ldr	r3, [r3, #4]
90006ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006ab4:	d10c      	bne.n	90006ad0 <HAL_RCC_OscConfig+0xc0>
90006ab6:	4b78      	ldr	r3, [pc, #480]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006ab8:	681b      	ldr	r3, [r3, #0]
90006aba:	4a77      	ldr	r2, [pc, #476]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006ac0:	6013      	str	r3, [r2, #0]
90006ac2:	4b75      	ldr	r3, [pc, #468]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006ac4:	681b      	ldr	r3, [r3, #0]
90006ac6:	4a74      	ldr	r2, [pc, #464]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006acc:	6013      	str	r3, [r2, #0]
90006ace:	e00b      	b.n	90006ae8 <HAL_RCC_OscConfig+0xd8>
90006ad0:	4b71      	ldr	r3, [pc, #452]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006ad2:	681b      	ldr	r3, [r3, #0]
90006ad4:	4a70      	ldr	r2, [pc, #448]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006ada:	6013      	str	r3, [r2, #0]
90006adc:	4b6e      	ldr	r3, [pc, #440]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006ade:	681b      	ldr	r3, [r3, #0]
90006ae0:	4a6d      	ldr	r2, [pc, #436]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006ae8:	687b      	ldr	r3, [r7, #4]
90006aea:	685b      	ldr	r3, [r3, #4]
90006aec:	2b00      	cmp	r3, #0
90006aee:	d013      	beq.n	90006b18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006af0:	f7fc fae6 	bl	900030c0 <HAL_GetTick>
90006af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006af6:	e008      	b.n	90006b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006af8:	f7fc fae2 	bl	900030c0 <HAL_GetTick>
90006afc:	4602      	mov	r2, r0
90006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006b00:	1ad3      	subs	r3, r2, r3
90006b02:	2b64      	cmp	r3, #100	@ 0x64
90006b04:	d901      	bls.n	90006b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006b06:	2303      	movs	r3, #3
90006b08:	e3d4      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006b0a:	4b63      	ldr	r3, [pc, #396]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006b0c:	681b      	ldr	r3, [r3, #0]
90006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006b12:	2b00      	cmp	r3, #0
90006b14:	d0f0      	beq.n	90006af8 <HAL_RCC_OscConfig+0xe8>
90006b16:	e014      	b.n	90006b42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006b18:	f7fc fad2 	bl	900030c0 <HAL_GetTick>
90006b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006b1e:	e008      	b.n	90006b32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006b20:	f7fc face 	bl	900030c0 <HAL_GetTick>
90006b24:	4602      	mov	r2, r0
90006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006b28:	1ad3      	subs	r3, r2, r3
90006b2a:	2b64      	cmp	r3, #100	@ 0x64
90006b2c:	d901      	bls.n	90006b32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006b2e:	2303      	movs	r3, #3
90006b30:	e3c0      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006b32:	4b59      	ldr	r3, [pc, #356]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006b34:	681b      	ldr	r3, [r3, #0]
90006b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006b3a:	2b00      	cmp	r3, #0
90006b3c:	d1f0      	bne.n	90006b20 <HAL_RCC_OscConfig+0x110>
90006b3e:	e000      	b.n	90006b42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006b42:	687b      	ldr	r3, [r7, #4]
90006b44:	681b      	ldr	r3, [r3, #0]
90006b46:	f003 0302 	and.w	r3, r3, #2
90006b4a:	2b00      	cmp	r3, #0
90006b4c:	f000 80ca 	beq.w	90006ce4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006b50:	4b51      	ldr	r3, [pc, #324]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006b52:	691b      	ldr	r3, [r3, #16]
90006b54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006b58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006b5a:	4b4f      	ldr	r3, [pc, #316]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006b5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006b60:	6a3b      	ldr	r3, [r7, #32]
90006b62:	2b00      	cmp	r3, #0
90006b64:	d007      	beq.n	90006b76 <HAL_RCC_OscConfig+0x166>
90006b66:	6a3b      	ldr	r3, [r7, #32]
90006b68:	2b18      	cmp	r3, #24
90006b6a:	d156      	bne.n	90006c1a <HAL_RCC_OscConfig+0x20a>
90006b6c:	69fb      	ldr	r3, [r7, #28]
90006b6e:	f003 0303 	and.w	r3, r3, #3
90006b72:	2b00      	cmp	r3, #0
90006b74:	d151      	bne.n	90006c1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006b76:	4b48      	ldr	r3, [pc, #288]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006b78:	681b      	ldr	r3, [r3, #0]
90006b7a:	f003 0304 	and.w	r3, r3, #4
90006b7e:	2b00      	cmp	r3, #0
90006b80:	d005      	beq.n	90006b8e <HAL_RCC_OscConfig+0x17e>
90006b82:	687b      	ldr	r3, [r7, #4]
90006b84:	68db      	ldr	r3, [r3, #12]
90006b86:	2b00      	cmp	r3, #0
90006b88:	d101      	bne.n	90006b8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006b8a:	2301      	movs	r3, #1
90006b8c:	e392      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006b8e:	4b42      	ldr	r3, [pc, #264]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006b90:	681b      	ldr	r3, [r3, #0]
90006b92:	f023 0219 	bic.w	r2, r3, #25
90006b96:	687b      	ldr	r3, [r7, #4]
90006b98:	68db      	ldr	r3, [r3, #12]
90006b9a:	493f      	ldr	r1, [pc, #252]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006b9c:	4313      	orrs	r3, r2
90006b9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006ba0:	f7fc fa8e 	bl	900030c0 <HAL_GetTick>
90006ba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006ba6:	e008      	b.n	90006bba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006ba8:	f7fc fa8a 	bl	900030c0 <HAL_GetTick>
90006bac:	4602      	mov	r2, r0
90006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006bb0:	1ad3      	subs	r3, r2, r3
90006bb2:	2b02      	cmp	r3, #2
90006bb4:	d901      	bls.n	90006bba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006bb6:	2303      	movs	r3, #3
90006bb8:	e37c      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006bba:	4b37      	ldr	r3, [pc, #220]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006bbc:	681b      	ldr	r3, [r3, #0]
90006bbe:	f003 0304 	and.w	r3, r3, #4
90006bc2:	2b00      	cmp	r3, #0
90006bc4:	d0f0      	beq.n	90006ba8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006bc6:	f7fc faab 	bl	90003120 <HAL_GetREVID>
90006bca:	4603      	mov	r3, r0
90006bcc:	f241 0203 	movw	r2, #4099	@ 0x1003
90006bd0:	4293      	cmp	r3, r2
90006bd2:	d817      	bhi.n	90006c04 <HAL_RCC_OscConfig+0x1f4>
90006bd4:	687b      	ldr	r3, [r7, #4]
90006bd6:	691b      	ldr	r3, [r3, #16]
90006bd8:	2b40      	cmp	r3, #64	@ 0x40
90006bda:	d108      	bne.n	90006bee <HAL_RCC_OscConfig+0x1de>
90006bdc:	4b2e      	ldr	r3, [pc, #184]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006bde:	685b      	ldr	r3, [r3, #4]
90006be0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006be4:	4a2c      	ldr	r2, [pc, #176]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006bea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006bec:	e07a      	b.n	90006ce4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006bee:	4b2a      	ldr	r3, [pc, #168]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006bf0:	685b      	ldr	r3, [r3, #4]
90006bf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006bf6:	687b      	ldr	r3, [r7, #4]
90006bf8:	691b      	ldr	r3, [r3, #16]
90006bfa:	031b      	lsls	r3, r3, #12
90006bfc:	4926      	ldr	r1, [pc, #152]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006bfe:	4313      	orrs	r3, r2
90006c00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006c02:	e06f      	b.n	90006ce4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006c04:	4b24      	ldr	r3, [pc, #144]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c06:	685b      	ldr	r3, [r3, #4]
90006c08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006c0c:	687b      	ldr	r3, [r7, #4]
90006c0e:	691b      	ldr	r3, [r3, #16]
90006c10:	061b      	lsls	r3, r3, #24
90006c12:	4921      	ldr	r1, [pc, #132]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c14:	4313      	orrs	r3, r2
90006c16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006c18:	e064      	b.n	90006ce4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006c1a:	687b      	ldr	r3, [r7, #4]
90006c1c:	68db      	ldr	r3, [r3, #12]
90006c1e:	2b00      	cmp	r3, #0
90006c20:	d047      	beq.n	90006cb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006c22:	4b1d      	ldr	r3, [pc, #116]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c24:	681b      	ldr	r3, [r3, #0]
90006c26:	f023 0219 	bic.w	r2, r3, #25
90006c2a:	687b      	ldr	r3, [r7, #4]
90006c2c:	68db      	ldr	r3, [r3, #12]
90006c2e:	491a      	ldr	r1, [pc, #104]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c30:	4313      	orrs	r3, r2
90006c32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006c34:	f7fc fa44 	bl	900030c0 <HAL_GetTick>
90006c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006c3a:	e008      	b.n	90006c4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006c3c:	f7fc fa40 	bl	900030c0 <HAL_GetTick>
90006c40:	4602      	mov	r2, r0
90006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c44:	1ad3      	subs	r3, r2, r3
90006c46:	2b02      	cmp	r3, #2
90006c48:	d901      	bls.n	90006c4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006c4a:	2303      	movs	r3, #3
90006c4c:	e332      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006c4e:	4b12      	ldr	r3, [pc, #72]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c50:	681b      	ldr	r3, [r3, #0]
90006c52:	f003 0304 	and.w	r3, r3, #4
90006c56:	2b00      	cmp	r3, #0
90006c58:	d0f0      	beq.n	90006c3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006c5a:	f7fc fa61 	bl	90003120 <HAL_GetREVID>
90006c5e:	4603      	mov	r3, r0
90006c60:	f241 0203 	movw	r2, #4099	@ 0x1003
90006c64:	4293      	cmp	r3, r2
90006c66:	d819      	bhi.n	90006c9c <HAL_RCC_OscConfig+0x28c>
90006c68:	687b      	ldr	r3, [r7, #4]
90006c6a:	691b      	ldr	r3, [r3, #16]
90006c6c:	2b40      	cmp	r3, #64	@ 0x40
90006c6e:	d108      	bne.n	90006c82 <HAL_RCC_OscConfig+0x272>
90006c70:	4b09      	ldr	r3, [pc, #36]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c72:	685b      	ldr	r3, [r3, #4]
90006c74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006c78:	4a07      	ldr	r2, [pc, #28]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006c7e:	6053      	str	r3, [r2, #4]
90006c80:	e030      	b.n	90006ce4 <HAL_RCC_OscConfig+0x2d4>
90006c82:	4b05      	ldr	r3, [pc, #20]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c84:	685b      	ldr	r3, [r3, #4]
90006c86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006c8a:	687b      	ldr	r3, [r7, #4]
90006c8c:	691b      	ldr	r3, [r3, #16]
90006c8e:	031b      	lsls	r3, r3, #12
90006c90:	4901      	ldr	r1, [pc, #4]	@ (90006c98 <HAL_RCC_OscConfig+0x288>)
90006c92:	4313      	orrs	r3, r2
90006c94:	604b      	str	r3, [r1, #4]
90006c96:	e025      	b.n	90006ce4 <HAL_RCC_OscConfig+0x2d4>
90006c98:	58024400 	.word	0x58024400
90006c9c:	4b9a      	ldr	r3, [pc, #616]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006c9e:	685b      	ldr	r3, [r3, #4]
90006ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006ca4:	687b      	ldr	r3, [r7, #4]
90006ca6:	691b      	ldr	r3, [r3, #16]
90006ca8:	061b      	lsls	r3, r3, #24
90006caa:	4997      	ldr	r1, [pc, #604]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006cac:	4313      	orrs	r3, r2
90006cae:	604b      	str	r3, [r1, #4]
90006cb0:	e018      	b.n	90006ce4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006cb2:	4b95      	ldr	r3, [pc, #596]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006cb4:	681b      	ldr	r3, [r3, #0]
90006cb6:	4a94      	ldr	r2, [pc, #592]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006cb8:	f023 0301 	bic.w	r3, r3, #1
90006cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006cbe:	f7fc f9ff 	bl	900030c0 <HAL_GetTick>
90006cc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006cc4:	e008      	b.n	90006cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006cc6:	f7fc f9fb 	bl	900030c0 <HAL_GetTick>
90006cca:	4602      	mov	r2, r0
90006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006cce:	1ad3      	subs	r3, r2, r3
90006cd0:	2b02      	cmp	r3, #2
90006cd2:	d901      	bls.n	90006cd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006cd4:	2303      	movs	r3, #3
90006cd6:	e2ed      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006cd8:	4b8b      	ldr	r3, [pc, #556]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006cda:	681b      	ldr	r3, [r3, #0]
90006cdc:	f003 0304 	and.w	r3, r3, #4
90006ce0:	2b00      	cmp	r3, #0
90006ce2:	d1f0      	bne.n	90006cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006ce4:	687b      	ldr	r3, [r7, #4]
90006ce6:	681b      	ldr	r3, [r3, #0]
90006ce8:	f003 0310 	and.w	r3, r3, #16
90006cec:	2b00      	cmp	r3, #0
90006cee:	f000 80a9 	beq.w	90006e44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006cf2:	4b85      	ldr	r3, [pc, #532]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006cf4:	691b      	ldr	r3, [r3, #16]
90006cf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006cfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006cfc:	4b82      	ldr	r3, [pc, #520]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006d00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006d02:	69bb      	ldr	r3, [r7, #24]
90006d04:	2b08      	cmp	r3, #8
90006d06:	d007      	beq.n	90006d18 <HAL_RCC_OscConfig+0x308>
90006d08:	69bb      	ldr	r3, [r7, #24]
90006d0a:	2b18      	cmp	r3, #24
90006d0c:	d13a      	bne.n	90006d84 <HAL_RCC_OscConfig+0x374>
90006d0e:	697b      	ldr	r3, [r7, #20]
90006d10:	f003 0303 	and.w	r3, r3, #3
90006d14:	2b01      	cmp	r3, #1
90006d16:	d135      	bne.n	90006d84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d18:	4b7b      	ldr	r3, [pc, #492]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d1a:	681b      	ldr	r3, [r3, #0]
90006d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006d20:	2b00      	cmp	r3, #0
90006d22:	d005      	beq.n	90006d30 <HAL_RCC_OscConfig+0x320>
90006d24:	687b      	ldr	r3, [r7, #4]
90006d26:	69db      	ldr	r3, [r3, #28]
90006d28:	2b80      	cmp	r3, #128	@ 0x80
90006d2a:	d001      	beq.n	90006d30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006d2c:	2301      	movs	r3, #1
90006d2e:	e2c1      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006d30:	f7fc f9f6 	bl	90003120 <HAL_GetREVID>
90006d34:	4603      	mov	r3, r0
90006d36:	f241 0203 	movw	r2, #4099	@ 0x1003
90006d3a:	4293      	cmp	r3, r2
90006d3c:	d817      	bhi.n	90006d6e <HAL_RCC_OscConfig+0x35e>
90006d3e:	687b      	ldr	r3, [r7, #4]
90006d40:	6a1b      	ldr	r3, [r3, #32]
90006d42:	2b20      	cmp	r3, #32
90006d44:	d108      	bne.n	90006d58 <HAL_RCC_OscConfig+0x348>
90006d46:	4b70      	ldr	r3, [pc, #448]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d48:	685b      	ldr	r3, [r3, #4]
90006d4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006d4e:	4a6e      	ldr	r2, [pc, #440]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006d54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d56:	e075      	b.n	90006e44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006d58:	4b6b      	ldr	r3, [pc, #428]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d5a:	685b      	ldr	r3, [r3, #4]
90006d5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006d60:	687b      	ldr	r3, [r7, #4]
90006d62:	6a1b      	ldr	r3, [r3, #32]
90006d64:	069b      	lsls	r3, r3, #26
90006d66:	4968      	ldr	r1, [pc, #416]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d68:	4313      	orrs	r3, r2
90006d6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d6c:	e06a      	b.n	90006e44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006d6e:	4b66      	ldr	r3, [pc, #408]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d70:	68db      	ldr	r3, [r3, #12]
90006d72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006d76:	687b      	ldr	r3, [r7, #4]
90006d78:	6a1b      	ldr	r3, [r3, #32]
90006d7a:	061b      	lsls	r3, r3, #24
90006d7c:	4962      	ldr	r1, [pc, #392]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d7e:	4313      	orrs	r3, r2
90006d80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d82:	e05f      	b.n	90006e44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006d84:	687b      	ldr	r3, [r7, #4]
90006d86:	69db      	ldr	r3, [r3, #28]
90006d88:	2b00      	cmp	r3, #0
90006d8a:	d042      	beq.n	90006e12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006d8c:	4b5e      	ldr	r3, [pc, #376]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d8e:	681b      	ldr	r3, [r3, #0]
90006d90:	4a5d      	ldr	r2, [pc, #372]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d98:	f7fc f992 	bl	900030c0 <HAL_GetTick>
90006d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006d9e:	e008      	b.n	90006db2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006da0:	f7fc f98e 	bl	900030c0 <HAL_GetTick>
90006da4:	4602      	mov	r2, r0
90006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006da8:	1ad3      	subs	r3, r2, r3
90006daa:	2b02      	cmp	r3, #2
90006dac:	d901      	bls.n	90006db2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006dae:	2303      	movs	r3, #3
90006db0:	e280      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006db2:	4b55      	ldr	r3, [pc, #340]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006db4:	681b      	ldr	r3, [r3, #0]
90006db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006dba:	2b00      	cmp	r3, #0
90006dbc:	d0f0      	beq.n	90006da0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006dbe:	f7fc f9af 	bl	90003120 <HAL_GetREVID>
90006dc2:	4603      	mov	r3, r0
90006dc4:	f241 0203 	movw	r2, #4099	@ 0x1003
90006dc8:	4293      	cmp	r3, r2
90006dca:	d817      	bhi.n	90006dfc <HAL_RCC_OscConfig+0x3ec>
90006dcc:	687b      	ldr	r3, [r7, #4]
90006dce:	6a1b      	ldr	r3, [r3, #32]
90006dd0:	2b20      	cmp	r3, #32
90006dd2:	d108      	bne.n	90006de6 <HAL_RCC_OscConfig+0x3d6>
90006dd4:	4b4c      	ldr	r3, [pc, #304]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006dd6:	685b      	ldr	r3, [r3, #4]
90006dd8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006ddc:	4a4a      	ldr	r2, [pc, #296]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006dde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006de2:	6053      	str	r3, [r2, #4]
90006de4:	e02e      	b.n	90006e44 <HAL_RCC_OscConfig+0x434>
90006de6:	4b48      	ldr	r3, [pc, #288]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006de8:	685b      	ldr	r3, [r3, #4]
90006dea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006dee:	687b      	ldr	r3, [r7, #4]
90006df0:	6a1b      	ldr	r3, [r3, #32]
90006df2:	069b      	lsls	r3, r3, #26
90006df4:	4944      	ldr	r1, [pc, #272]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006df6:	4313      	orrs	r3, r2
90006df8:	604b      	str	r3, [r1, #4]
90006dfa:	e023      	b.n	90006e44 <HAL_RCC_OscConfig+0x434>
90006dfc:	4b42      	ldr	r3, [pc, #264]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006dfe:	68db      	ldr	r3, [r3, #12]
90006e00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006e04:	687b      	ldr	r3, [r7, #4]
90006e06:	6a1b      	ldr	r3, [r3, #32]
90006e08:	061b      	lsls	r3, r3, #24
90006e0a:	493f      	ldr	r1, [pc, #252]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e0c:	4313      	orrs	r3, r2
90006e0e:	60cb      	str	r3, [r1, #12]
90006e10:	e018      	b.n	90006e44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90006e12:	4b3d      	ldr	r3, [pc, #244]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e14:	681b      	ldr	r3, [r3, #0]
90006e16:	4a3c      	ldr	r2, [pc, #240]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90006e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e1e:	f7fc f94f 	bl	900030c0 <HAL_GetTick>
90006e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006e24:	e008      	b.n	90006e38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006e26:	f7fc f94b 	bl	900030c0 <HAL_GetTick>
90006e2a:	4602      	mov	r2, r0
90006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e2e:	1ad3      	subs	r3, r2, r3
90006e30:	2b02      	cmp	r3, #2
90006e32:	d901      	bls.n	90006e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90006e34:	2303      	movs	r3, #3
90006e36:	e23d      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006e38:	4b33      	ldr	r3, [pc, #204]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e3a:	681b      	ldr	r3, [r3, #0]
90006e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006e40:	2b00      	cmp	r3, #0
90006e42:	d1f0      	bne.n	90006e26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90006e44:	687b      	ldr	r3, [r7, #4]
90006e46:	681b      	ldr	r3, [r3, #0]
90006e48:	f003 0308 	and.w	r3, r3, #8
90006e4c:	2b00      	cmp	r3, #0
90006e4e:	d036      	beq.n	90006ebe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90006e50:	687b      	ldr	r3, [r7, #4]
90006e52:	695b      	ldr	r3, [r3, #20]
90006e54:	2b00      	cmp	r3, #0
90006e56:	d019      	beq.n	90006e8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90006e58:	4b2b      	ldr	r3, [pc, #172]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006e5c:	4a2a      	ldr	r2, [pc, #168]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e5e:	f043 0301 	orr.w	r3, r3, #1
90006e62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006e64:	f7fc f92c 	bl	900030c0 <HAL_GetTick>
90006e68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006e6a:	e008      	b.n	90006e7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006e6c:	f7fc f928 	bl	900030c0 <HAL_GetTick>
90006e70:	4602      	mov	r2, r0
90006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e74:	1ad3      	subs	r3, r2, r3
90006e76:	2b02      	cmp	r3, #2
90006e78:	d901      	bls.n	90006e7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90006e7a:	2303      	movs	r3, #3
90006e7c:	e21a      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006e7e:	4b22      	ldr	r3, [pc, #136]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006e82:	f003 0302 	and.w	r3, r3, #2
90006e86:	2b00      	cmp	r3, #0
90006e88:	d0f0      	beq.n	90006e6c <HAL_RCC_OscConfig+0x45c>
90006e8a:	e018      	b.n	90006ebe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90006e8c:	4b1e      	ldr	r3, [pc, #120]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006e90:	4a1d      	ldr	r2, [pc, #116]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006e92:	f023 0301 	bic.w	r3, r3, #1
90006e96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006e98:	f7fc f912 	bl	900030c0 <HAL_GetTick>
90006e9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006e9e:	e008      	b.n	90006eb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006ea0:	f7fc f90e 	bl	900030c0 <HAL_GetTick>
90006ea4:	4602      	mov	r2, r0
90006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006ea8:	1ad3      	subs	r3, r2, r3
90006eaa:	2b02      	cmp	r3, #2
90006eac:	d901      	bls.n	90006eb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90006eae:	2303      	movs	r3, #3
90006eb0:	e200      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006eb2:	4b15      	ldr	r3, [pc, #84]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006eb6:	f003 0302 	and.w	r3, r3, #2
90006eba:	2b00      	cmp	r3, #0
90006ebc:	d1f0      	bne.n	90006ea0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90006ebe:	687b      	ldr	r3, [r7, #4]
90006ec0:	681b      	ldr	r3, [r3, #0]
90006ec2:	f003 0320 	and.w	r3, r3, #32
90006ec6:	2b00      	cmp	r3, #0
90006ec8:	d039      	beq.n	90006f3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90006eca:	687b      	ldr	r3, [r7, #4]
90006ecc:	699b      	ldr	r3, [r3, #24]
90006ece:	2b00      	cmp	r3, #0
90006ed0:	d01c      	beq.n	90006f0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90006ed2:	4b0d      	ldr	r3, [pc, #52]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006ed4:	681b      	ldr	r3, [r3, #0]
90006ed6:	4a0c      	ldr	r2, [pc, #48]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90006edc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90006ede:	f7fc f8ef 	bl	900030c0 <HAL_GetTick>
90006ee2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90006ee4:	e008      	b.n	90006ef8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90006ee6:	f7fc f8eb 	bl	900030c0 <HAL_GetTick>
90006eea:	4602      	mov	r2, r0
90006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006eee:	1ad3      	subs	r3, r2, r3
90006ef0:	2b02      	cmp	r3, #2
90006ef2:	d901      	bls.n	90006ef8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90006ef4:	2303      	movs	r3, #3
90006ef6:	e1dd      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90006ef8:	4b03      	ldr	r3, [pc, #12]	@ (90006f08 <HAL_RCC_OscConfig+0x4f8>)
90006efa:	681b      	ldr	r3, [r3, #0]
90006efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90006f00:	2b00      	cmp	r3, #0
90006f02:	d0f0      	beq.n	90006ee6 <HAL_RCC_OscConfig+0x4d6>
90006f04:	e01b      	b.n	90006f3e <HAL_RCC_OscConfig+0x52e>
90006f06:	bf00      	nop
90006f08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90006f0c:	4b9b      	ldr	r3, [pc, #620]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006f0e:	681b      	ldr	r3, [r3, #0]
90006f10:	4a9a      	ldr	r2, [pc, #616]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006f12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90006f16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90006f18:	f7fc f8d2 	bl	900030c0 <HAL_GetTick>
90006f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90006f1e:	e008      	b.n	90006f32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90006f20:	f7fc f8ce 	bl	900030c0 <HAL_GetTick>
90006f24:	4602      	mov	r2, r0
90006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f28:	1ad3      	subs	r3, r2, r3
90006f2a:	2b02      	cmp	r3, #2
90006f2c:	d901      	bls.n	90006f32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90006f2e:	2303      	movs	r3, #3
90006f30:	e1c0      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90006f32:	4b92      	ldr	r3, [pc, #584]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006f34:	681b      	ldr	r3, [r3, #0]
90006f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90006f3a:	2b00      	cmp	r3, #0
90006f3c:	d1f0      	bne.n	90006f20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90006f3e:	687b      	ldr	r3, [r7, #4]
90006f40:	681b      	ldr	r3, [r3, #0]
90006f42:	f003 0304 	and.w	r3, r3, #4
90006f46:	2b00      	cmp	r3, #0
90006f48:	f000 8081 	beq.w	9000704e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90006f4c:	4b8c      	ldr	r3, [pc, #560]	@ (90007180 <HAL_RCC_OscConfig+0x770>)
90006f4e:	681b      	ldr	r3, [r3, #0]
90006f50:	4a8b      	ldr	r2, [pc, #556]	@ (90007180 <HAL_RCC_OscConfig+0x770>)
90006f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90006f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90006f58:	f7fc f8b2 	bl	900030c0 <HAL_GetTick>
90006f5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006f5e:	e008      	b.n	90006f72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90006f60:	f7fc f8ae 	bl	900030c0 <HAL_GetTick>
90006f64:	4602      	mov	r2, r0
90006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f68:	1ad3      	subs	r3, r2, r3
90006f6a:	2b64      	cmp	r3, #100	@ 0x64
90006f6c:	d901      	bls.n	90006f72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90006f6e:	2303      	movs	r3, #3
90006f70:	e1a0      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006f72:	4b83      	ldr	r3, [pc, #524]	@ (90007180 <HAL_RCC_OscConfig+0x770>)
90006f74:	681b      	ldr	r3, [r3, #0]
90006f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f7a:	2b00      	cmp	r3, #0
90006f7c:	d0f0      	beq.n	90006f60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90006f7e:	687b      	ldr	r3, [r7, #4]
90006f80:	689b      	ldr	r3, [r3, #8]
90006f82:	2b01      	cmp	r3, #1
90006f84:	d106      	bne.n	90006f94 <HAL_RCC_OscConfig+0x584>
90006f86:	4b7d      	ldr	r3, [pc, #500]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006f8a:	4a7c      	ldr	r2, [pc, #496]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006f8c:	f043 0301 	orr.w	r3, r3, #1
90006f90:	6713      	str	r3, [r2, #112]	@ 0x70
90006f92:	e02d      	b.n	90006ff0 <HAL_RCC_OscConfig+0x5e0>
90006f94:	687b      	ldr	r3, [r7, #4]
90006f96:	689b      	ldr	r3, [r3, #8]
90006f98:	2b00      	cmp	r3, #0
90006f9a:	d10c      	bne.n	90006fb6 <HAL_RCC_OscConfig+0x5a6>
90006f9c:	4b77      	ldr	r3, [pc, #476]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fa0:	4a76      	ldr	r2, [pc, #472]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fa2:	f023 0301 	bic.w	r3, r3, #1
90006fa6:	6713      	str	r3, [r2, #112]	@ 0x70
90006fa8:	4b74      	ldr	r3, [pc, #464]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fac:	4a73      	ldr	r2, [pc, #460]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fae:	f023 0304 	bic.w	r3, r3, #4
90006fb2:	6713      	str	r3, [r2, #112]	@ 0x70
90006fb4:	e01c      	b.n	90006ff0 <HAL_RCC_OscConfig+0x5e0>
90006fb6:	687b      	ldr	r3, [r7, #4]
90006fb8:	689b      	ldr	r3, [r3, #8]
90006fba:	2b05      	cmp	r3, #5
90006fbc:	d10c      	bne.n	90006fd8 <HAL_RCC_OscConfig+0x5c8>
90006fbe:	4b6f      	ldr	r3, [pc, #444]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fc2:	4a6e      	ldr	r2, [pc, #440]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fc4:	f043 0304 	orr.w	r3, r3, #4
90006fc8:	6713      	str	r3, [r2, #112]	@ 0x70
90006fca:	4b6c      	ldr	r3, [pc, #432]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fce:	4a6b      	ldr	r2, [pc, #428]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fd0:	f043 0301 	orr.w	r3, r3, #1
90006fd4:	6713      	str	r3, [r2, #112]	@ 0x70
90006fd6:	e00b      	b.n	90006ff0 <HAL_RCC_OscConfig+0x5e0>
90006fd8:	4b68      	ldr	r3, [pc, #416]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fdc:	4a67      	ldr	r2, [pc, #412]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fde:	f023 0301 	bic.w	r3, r3, #1
90006fe2:	6713      	str	r3, [r2, #112]	@ 0x70
90006fe4:	4b65      	ldr	r3, [pc, #404]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fe8:	4a64      	ldr	r2, [pc, #400]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90006fea:	f023 0304 	bic.w	r3, r3, #4
90006fee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90006ff0:	687b      	ldr	r3, [r7, #4]
90006ff2:	689b      	ldr	r3, [r3, #8]
90006ff4:	2b00      	cmp	r3, #0
90006ff6:	d015      	beq.n	90007024 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006ff8:	f7fc f862 	bl	900030c0 <HAL_GetTick>
90006ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90006ffe:	e00a      	b.n	90007016 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007000:	f7fc f85e 	bl	900030c0 <HAL_GetTick>
90007004:	4602      	mov	r2, r0
90007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007008:	1ad3      	subs	r3, r2, r3
9000700a:	f241 3288 	movw	r2, #5000	@ 0x1388
9000700e:	4293      	cmp	r3, r2
90007010:	d901      	bls.n	90007016 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90007012:	2303      	movs	r3, #3
90007014:	e14e      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007016:	4b59      	ldr	r3, [pc, #356]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000701a:	f003 0302 	and.w	r3, r3, #2
9000701e:	2b00      	cmp	r3, #0
90007020:	d0ee      	beq.n	90007000 <HAL_RCC_OscConfig+0x5f0>
90007022:	e014      	b.n	9000704e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007024:	f7fc f84c 	bl	900030c0 <HAL_GetTick>
90007028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000702a:	e00a      	b.n	90007042 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000702c:	f7fc f848 	bl	900030c0 <HAL_GetTick>
90007030:	4602      	mov	r2, r0
90007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007034:	1ad3      	subs	r3, r2, r3
90007036:	f241 3288 	movw	r2, #5000	@ 0x1388
9000703a:	4293      	cmp	r3, r2
9000703c:	d901      	bls.n	90007042 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
9000703e:	2303      	movs	r3, #3
90007040:	e138      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007042:	4b4e      	ldr	r3, [pc, #312]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007046:	f003 0302 	and.w	r3, r3, #2
9000704a:	2b00      	cmp	r3, #0
9000704c:	d1ee      	bne.n	9000702c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000704e:	687b      	ldr	r3, [r7, #4]
90007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007052:	2b00      	cmp	r3, #0
90007054:	f000 812d 	beq.w	900072b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007058:	4b48      	ldr	r3, [pc, #288]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
9000705a:	691b      	ldr	r3, [r3, #16]
9000705c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007060:	2b18      	cmp	r3, #24
90007062:	f000 80bd 	beq.w	900071e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90007066:	687b      	ldr	r3, [r7, #4]
90007068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000706a:	2b02      	cmp	r3, #2
9000706c:	f040 809e 	bne.w	900071ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007070:	4b42      	ldr	r3, [pc, #264]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007072:	681b      	ldr	r3, [r3, #0]
90007074:	4a41      	ldr	r2, [pc, #260]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
9000707a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000707c:	f7fc f820 	bl	900030c0 <HAL_GetTick>
90007080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007082:	e008      	b.n	90007096 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007084:	f7fc f81c 	bl	900030c0 <HAL_GetTick>
90007088:	4602      	mov	r2, r0
9000708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000708c:	1ad3      	subs	r3, r2, r3
9000708e:	2b02      	cmp	r3, #2
90007090:	d901      	bls.n	90007096 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90007092:	2303      	movs	r3, #3
90007094:	e10e      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007096:	4b39      	ldr	r3, [pc, #228]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007098:	681b      	ldr	r3, [r3, #0]
9000709a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000709e:	2b00      	cmp	r3, #0
900070a0:	d1f0      	bne.n	90007084 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900070a2:	4b36      	ldr	r3, [pc, #216]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
900070a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900070a6:	4b37      	ldr	r3, [pc, #220]	@ (90007184 <HAL_RCC_OscConfig+0x774>)
900070a8:	4013      	ands	r3, r2
900070aa:	687a      	ldr	r2, [r7, #4]
900070ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900070ae:	687a      	ldr	r2, [r7, #4]
900070b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900070b2:	0112      	lsls	r2, r2, #4
900070b4:	430a      	orrs	r2, r1
900070b6:	4931      	ldr	r1, [pc, #196]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
900070b8:	4313      	orrs	r3, r2
900070ba:	628b      	str	r3, [r1, #40]	@ 0x28
900070bc:	687b      	ldr	r3, [r7, #4]
900070be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900070c0:	3b01      	subs	r3, #1
900070c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
900070c6:	687b      	ldr	r3, [r7, #4]
900070c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900070ca:	3b01      	subs	r3, #1
900070cc:	025b      	lsls	r3, r3, #9
900070ce:	b29b      	uxth	r3, r3
900070d0:	431a      	orrs	r2, r3
900070d2:	687b      	ldr	r3, [r7, #4]
900070d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900070d6:	3b01      	subs	r3, #1
900070d8:	041b      	lsls	r3, r3, #16
900070da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900070de:	431a      	orrs	r2, r3
900070e0:	687b      	ldr	r3, [r7, #4]
900070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900070e4:	3b01      	subs	r3, #1
900070e6:	061b      	lsls	r3, r3, #24
900070e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900070ec:	4923      	ldr	r1, [pc, #140]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
900070ee:	4313      	orrs	r3, r2
900070f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
900070f2:	4b22      	ldr	r3, [pc, #136]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
900070f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900070f6:	4a21      	ldr	r2, [pc, #132]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
900070f8:	f023 0301 	bic.w	r3, r3, #1
900070fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900070fe:	4b1f      	ldr	r3, [pc, #124]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007102:	4b21      	ldr	r3, [pc, #132]	@ (90007188 <HAL_RCC_OscConfig+0x778>)
90007104:	4013      	ands	r3, r2
90007106:	687a      	ldr	r2, [r7, #4]
90007108:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000710a:	00d2      	lsls	r2, r2, #3
9000710c:	491b      	ldr	r1, [pc, #108]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
9000710e:	4313      	orrs	r3, r2
90007110:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90007112:	4b1a      	ldr	r3, [pc, #104]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007116:	f023 020c 	bic.w	r2, r3, #12
9000711a:	687b      	ldr	r3, [r7, #4]
9000711c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000711e:	4917      	ldr	r1, [pc, #92]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007120:	4313      	orrs	r3, r2
90007122:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007124:	4b15      	ldr	r3, [pc, #84]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007128:	f023 0202 	bic.w	r2, r3, #2
9000712c:	687b      	ldr	r3, [r7, #4]
9000712e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90007130:	4912      	ldr	r1, [pc, #72]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007132:	4313      	orrs	r3, r2
90007134:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90007136:	4b11      	ldr	r3, [pc, #68]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000713a:	4a10      	ldr	r2, [pc, #64]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
9000713c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007142:	4b0e      	ldr	r3, [pc, #56]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007146:	4a0d      	ldr	r2, [pc, #52]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000714c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000714e:	4b0b      	ldr	r3, [pc, #44]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007152:	4a0a      	ldr	r2, [pc, #40]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
9000715a:	4b08      	ldr	r3, [pc, #32]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
9000715c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000715e:	4a07      	ldr	r2, [pc, #28]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007160:	f043 0301 	orr.w	r3, r3, #1
90007164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90007166:	4b05      	ldr	r3, [pc, #20]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
90007168:	681b      	ldr	r3, [r3, #0]
9000716a:	4a04      	ldr	r2, [pc, #16]	@ (9000717c <HAL_RCC_OscConfig+0x76c>)
9000716c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90007170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007172:	f7fb ffa5 	bl	900030c0 <HAL_GetTick>
90007176:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007178:	e011      	b.n	9000719e <HAL_RCC_OscConfig+0x78e>
9000717a:	bf00      	nop
9000717c:	58024400 	.word	0x58024400
90007180:	58024800 	.word	0x58024800
90007184:	fffffc0c 	.word	0xfffffc0c
90007188:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000718c:	f7fb ff98 	bl	900030c0 <HAL_GetTick>
90007190:	4602      	mov	r2, r0
90007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007194:	1ad3      	subs	r3, r2, r3
90007196:	2b02      	cmp	r3, #2
90007198:	d901      	bls.n	9000719e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
9000719a:	2303      	movs	r3, #3
9000719c:	e08a      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000719e:	4b47      	ldr	r3, [pc, #284]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900071a0:	681b      	ldr	r3, [r3, #0]
900071a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900071a6:	2b00      	cmp	r3, #0
900071a8:	d0f0      	beq.n	9000718c <HAL_RCC_OscConfig+0x77c>
900071aa:	e082      	b.n	900072b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900071ac:	4b43      	ldr	r3, [pc, #268]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900071ae:	681b      	ldr	r3, [r3, #0]
900071b0:	4a42      	ldr	r2, [pc, #264]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900071b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900071b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900071b8:	f7fb ff82 	bl	900030c0 <HAL_GetTick>
900071bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900071be:	e008      	b.n	900071d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900071c0:	f7fb ff7e 	bl	900030c0 <HAL_GetTick>
900071c4:	4602      	mov	r2, r0
900071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071c8:	1ad3      	subs	r3, r2, r3
900071ca:	2b02      	cmp	r3, #2
900071cc:	d901      	bls.n	900071d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900071ce:	2303      	movs	r3, #3
900071d0:	e070      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900071d2:	4b3a      	ldr	r3, [pc, #232]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900071d4:	681b      	ldr	r3, [r3, #0]
900071d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900071da:	2b00      	cmp	r3, #0
900071dc:	d1f0      	bne.n	900071c0 <HAL_RCC_OscConfig+0x7b0>
900071de:	e068      	b.n	900072b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
900071e0:	4b36      	ldr	r3, [pc, #216]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900071e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
900071e6:	4b35      	ldr	r3, [pc, #212]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900071e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900071ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900071ec:	687b      	ldr	r3, [r7, #4]
900071ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900071f0:	2b01      	cmp	r3, #1
900071f2:	d031      	beq.n	90007258 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900071f4:	693b      	ldr	r3, [r7, #16]
900071f6:	f003 0203 	and.w	r2, r3, #3
900071fa:	687b      	ldr	r3, [r7, #4]
900071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900071fe:	429a      	cmp	r2, r3
90007200:	d12a      	bne.n	90007258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007202:	693b      	ldr	r3, [r7, #16]
90007204:	091b      	lsrs	r3, r3, #4
90007206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
9000720a:	687b      	ldr	r3, [r7, #4]
9000720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000720e:	429a      	cmp	r2, r3
90007210:	d122      	bne.n	90007258 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007212:	68fb      	ldr	r3, [r7, #12]
90007214:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007218:	687b      	ldr	r3, [r7, #4]
9000721a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000721c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000721e:	429a      	cmp	r2, r3
90007220:	d11a      	bne.n	90007258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007222:	68fb      	ldr	r3, [r7, #12]
90007224:	0a5b      	lsrs	r3, r3, #9
90007226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000722a:	687b      	ldr	r3, [r7, #4]
9000722c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000722e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007230:	429a      	cmp	r2, r3
90007232:	d111      	bne.n	90007258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007234:	68fb      	ldr	r3, [r7, #12]
90007236:	0c1b      	lsrs	r3, r3, #16
90007238:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000723c:	687b      	ldr	r3, [r7, #4]
9000723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007240:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007242:	429a      	cmp	r2, r3
90007244:	d108      	bne.n	90007258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90007246:	68fb      	ldr	r3, [r7, #12]
90007248:	0e1b      	lsrs	r3, r3, #24
9000724a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000724e:	687b      	ldr	r3, [r7, #4]
90007250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007252:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007254:	429a      	cmp	r2, r3
90007256:	d001      	beq.n	9000725c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90007258:	2301      	movs	r3, #1
9000725a:	e02b      	b.n	900072b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000725c:	4b17      	ldr	r3, [pc, #92]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
9000725e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007260:	08db      	lsrs	r3, r3, #3
90007262:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007266:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90007268:	687b      	ldr	r3, [r7, #4]
9000726a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000726c:	693a      	ldr	r2, [r7, #16]
9000726e:	429a      	cmp	r2, r3
90007270:	d01f      	beq.n	900072b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90007272:	4b12      	ldr	r3, [pc, #72]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
90007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007276:	4a11      	ldr	r2, [pc, #68]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
90007278:	f023 0301 	bic.w	r3, r3, #1
9000727c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
9000727e:	f7fb ff1f 	bl	900030c0 <HAL_GetTick>
90007282:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007284:	bf00      	nop
90007286:	f7fb ff1b 	bl	900030c0 <HAL_GetTick>
9000728a:	4602      	mov	r2, r0
9000728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000728e:	4293      	cmp	r3, r2
90007290:	d0f9      	beq.n	90007286 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007292:	4b0a      	ldr	r3, [pc, #40]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
90007294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007296:	4b0a      	ldr	r3, [pc, #40]	@ (900072c0 <HAL_RCC_OscConfig+0x8b0>)
90007298:	4013      	ands	r3, r2
9000729a:	687a      	ldr	r2, [r7, #4]
9000729c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000729e:	00d2      	lsls	r2, r2, #3
900072a0:	4906      	ldr	r1, [pc, #24]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900072a2:	4313      	orrs	r3, r2
900072a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900072a6:	4b05      	ldr	r3, [pc, #20]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072aa:	4a04      	ldr	r2, [pc, #16]	@ (900072bc <HAL_RCC_OscConfig+0x8ac>)
900072ac:	f043 0301 	orr.w	r3, r3, #1
900072b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
900072b2:	2300      	movs	r3, #0
}
900072b4:	4618      	mov	r0, r3
900072b6:	3730      	adds	r7, #48	@ 0x30
900072b8:	46bd      	mov	sp, r7
900072ba:	bd80      	pop	{r7, pc}
900072bc:	58024400 	.word	0x58024400
900072c0:	ffff0007 	.word	0xffff0007

900072c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900072c4:	b580      	push	{r7, lr}
900072c6:	b086      	sub	sp, #24
900072c8:	af00      	add	r7, sp, #0
900072ca:	6078      	str	r0, [r7, #4]
900072cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900072ce:	687b      	ldr	r3, [r7, #4]
900072d0:	2b00      	cmp	r3, #0
900072d2:	d101      	bne.n	900072d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900072d4:	2301      	movs	r3, #1
900072d6:	e19c      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900072d8:	4b8a      	ldr	r3, [pc, #552]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900072da:	681b      	ldr	r3, [r3, #0]
900072dc:	f003 030f 	and.w	r3, r3, #15
900072e0:	683a      	ldr	r2, [r7, #0]
900072e2:	429a      	cmp	r2, r3
900072e4:	d910      	bls.n	90007308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900072e6:	4b87      	ldr	r3, [pc, #540]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900072e8:	681b      	ldr	r3, [r3, #0]
900072ea:	f023 020f 	bic.w	r2, r3, #15
900072ee:	4985      	ldr	r1, [pc, #532]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900072f0:	683b      	ldr	r3, [r7, #0]
900072f2:	4313      	orrs	r3, r2
900072f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900072f6:	4b83      	ldr	r3, [pc, #524]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900072f8:	681b      	ldr	r3, [r3, #0]
900072fa:	f003 030f 	and.w	r3, r3, #15
900072fe:	683a      	ldr	r2, [r7, #0]
90007300:	429a      	cmp	r2, r3
90007302:	d001      	beq.n	90007308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007304:	2301      	movs	r3, #1
90007306:	e184      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007308:	687b      	ldr	r3, [r7, #4]
9000730a:	681b      	ldr	r3, [r3, #0]
9000730c:	f003 0304 	and.w	r3, r3, #4
90007310:	2b00      	cmp	r3, #0
90007312:	d010      	beq.n	90007336 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007314:	687b      	ldr	r3, [r7, #4]
90007316:	691a      	ldr	r2, [r3, #16]
90007318:	4b7b      	ldr	r3, [pc, #492]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
9000731a:	699b      	ldr	r3, [r3, #24]
9000731c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007320:	429a      	cmp	r2, r3
90007322:	d908      	bls.n	90007336 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007324:	4b78      	ldr	r3, [pc, #480]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007326:	699b      	ldr	r3, [r3, #24]
90007328:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000732c:	687b      	ldr	r3, [r7, #4]
9000732e:	691b      	ldr	r3, [r3, #16]
90007330:	4975      	ldr	r1, [pc, #468]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007332:	4313      	orrs	r3, r2
90007334:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007336:	687b      	ldr	r3, [r7, #4]
90007338:	681b      	ldr	r3, [r3, #0]
9000733a:	f003 0308 	and.w	r3, r3, #8
9000733e:	2b00      	cmp	r3, #0
90007340:	d010      	beq.n	90007364 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007342:	687b      	ldr	r3, [r7, #4]
90007344:	695a      	ldr	r2, [r3, #20]
90007346:	4b70      	ldr	r3, [pc, #448]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007348:	69db      	ldr	r3, [r3, #28]
9000734a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000734e:	429a      	cmp	r2, r3
90007350:	d908      	bls.n	90007364 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007352:	4b6d      	ldr	r3, [pc, #436]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007354:	69db      	ldr	r3, [r3, #28]
90007356:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000735a:	687b      	ldr	r3, [r7, #4]
9000735c:	695b      	ldr	r3, [r3, #20]
9000735e:	496a      	ldr	r1, [pc, #424]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007360:	4313      	orrs	r3, r2
90007362:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007364:	687b      	ldr	r3, [r7, #4]
90007366:	681b      	ldr	r3, [r3, #0]
90007368:	f003 0310 	and.w	r3, r3, #16
9000736c:	2b00      	cmp	r3, #0
9000736e:	d010      	beq.n	90007392 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007370:	687b      	ldr	r3, [r7, #4]
90007372:	699a      	ldr	r2, [r3, #24]
90007374:	4b64      	ldr	r3, [pc, #400]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007376:	69db      	ldr	r3, [r3, #28]
90007378:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
9000737c:	429a      	cmp	r2, r3
9000737e:	d908      	bls.n	90007392 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007380:	4b61      	ldr	r3, [pc, #388]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007382:	69db      	ldr	r3, [r3, #28]
90007384:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007388:	687b      	ldr	r3, [r7, #4]
9000738a:	699b      	ldr	r3, [r3, #24]
9000738c:	495e      	ldr	r1, [pc, #376]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
9000738e:	4313      	orrs	r3, r2
90007390:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007392:	687b      	ldr	r3, [r7, #4]
90007394:	681b      	ldr	r3, [r3, #0]
90007396:	f003 0320 	and.w	r3, r3, #32
9000739a:	2b00      	cmp	r3, #0
9000739c:	d010      	beq.n	900073c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000739e:	687b      	ldr	r3, [r7, #4]
900073a0:	69da      	ldr	r2, [r3, #28]
900073a2:	4b59      	ldr	r3, [pc, #356]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900073a4:	6a1b      	ldr	r3, [r3, #32]
900073a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900073aa:	429a      	cmp	r2, r3
900073ac:	d908      	bls.n	900073c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900073ae:	4b56      	ldr	r3, [pc, #344]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900073b0:	6a1b      	ldr	r3, [r3, #32]
900073b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900073b6:	687b      	ldr	r3, [r7, #4]
900073b8:	69db      	ldr	r3, [r3, #28]
900073ba:	4953      	ldr	r1, [pc, #332]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900073bc:	4313      	orrs	r3, r2
900073be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900073c0:	687b      	ldr	r3, [r7, #4]
900073c2:	681b      	ldr	r3, [r3, #0]
900073c4:	f003 0302 	and.w	r3, r3, #2
900073c8:	2b00      	cmp	r3, #0
900073ca:	d010      	beq.n	900073ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900073cc:	687b      	ldr	r3, [r7, #4]
900073ce:	68da      	ldr	r2, [r3, #12]
900073d0:	4b4d      	ldr	r3, [pc, #308]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900073d2:	699b      	ldr	r3, [r3, #24]
900073d4:	f003 030f 	and.w	r3, r3, #15
900073d8:	429a      	cmp	r2, r3
900073da:	d908      	bls.n	900073ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900073dc:	4b4a      	ldr	r3, [pc, #296]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900073de:	699b      	ldr	r3, [r3, #24]
900073e0:	f023 020f 	bic.w	r2, r3, #15
900073e4:	687b      	ldr	r3, [r7, #4]
900073e6:	68db      	ldr	r3, [r3, #12]
900073e8:	4947      	ldr	r1, [pc, #284]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900073ea:	4313      	orrs	r3, r2
900073ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900073ee:	687b      	ldr	r3, [r7, #4]
900073f0:	681b      	ldr	r3, [r3, #0]
900073f2:	f003 0301 	and.w	r3, r3, #1
900073f6:	2b00      	cmp	r3, #0
900073f8:	d055      	beq.n	900074a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
900073fa:	4b43      	ldr	r3, [pc, #268]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900073fc:	699b      	ldr	r3, [r3, #24]
900073fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90007402:	687b      	ldr	r3, [r7, #4]
90007404:	689b      	ldr	r3, [r3, #8]
90007406:	4940      	ldr	r1, [pc, #256]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007408:	4313      	orrs	r3, r2
9000740a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000740c:	687b      	ldr	r3, [r7, #4]
9000740e:	685b      	ldr	r3, [r3, #4]
90007410:	2b02      	cmp	r3, #2
90007412:	d107      	bne.n	90007424 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007414:	4b3c      	ldr	r3, [pc, #240]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007416:	681b      	ldr	r3, [r3, #0]
90007418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000741c:	2b00      	cmp	r3, #0
9000741e:	d121      	bne.n	90007464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007420:	2301      	movs	r3, #1
90007422:	e0f6      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007424:	687b      	ldr	r3, [r7, #4]
90007426:	685b      	ldr	r3, [r3, #4]
90007428:	2b03      	cmp	r3, #3
9000742a:	d107      	bne.n	9000743c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000742c:	4b36      	ldr	r3, [pc, #216]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
9000742e:	681b      	ldr	r3, [r3, #0]
90007430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007434:	2b00      	cmp	r3, #0
90007436:	d115      	bne.n	90007464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007438:	2301      	movs	r3, #1
9000743a:	e0ea      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000743c:	687b      	ldr	r3, [r7, #4]
9000743e:	685b      	ldr	r3, [r3, #4]
90007440:	2b01      	cmp	r3, #1
90007442:	d107      	bne.n	90007454 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007444:	4b30      	ldr	r3, [pc, #192]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007446:	681b      	ldr	r3, [r3, #0]
90007448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000744c:	2b00      	cmp	r3, #0
9000744e:	d109      	bne.n	90007464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007450:	2301      	movs	r3, #1
90007452:	e0de      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007454:	4b2c      	ldr	r3, [pc, #176]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007456:	681b      	ldr	r3, [r3, #0]
90007458:	f003 0304 	and.w	r3, r3, #4
9000745c:	2b00      	cmp	r3, #0
9000745e:	d101      	bne.n	90007464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007460:	2301      	movs	r3, #1
90007462:	e0d6      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007464:	4b28      	ldr	r3, [pc, #160]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007466:	691b      	ldr	r3, [r3, #16]
90007468:	f023 0207 	bic.w	r2, r3, #7
9000746c:	687b      	ldr	r3, [r7, #4]
9000746e:	685b      	ldr	r3, [r3, #4]
90007470:	4925      	ldr	r1, [pc, #148]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007472:	4313      	orrs	r3, r2
90007474:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007476:	f7fb fe23 	bl	900030c0 <HAL_GetTick>
9000747a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000747c:	e00a      	b.n	90007494 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000747e:	f7fb fe1f 	bl	900030c0 <HAL_GetTick>
90007482:	4602      	mov	r2, r0
90007484:	697b      	ldr	r3, [r7, #20]
90007486:	1ad3      	subs	r3, r2, r3
90007488:	f241 3288 	movw	r2, #5000	@ 0x1388
9000748c:	4293      	cmp	r3, r2
9000748e:	d901      	bls.n	90007494 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90007490:	2303      	movs	r3, #3
90007492:	e0be      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007494:	4b1c      	ldr	r3, [pc, #112]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
90007496:	691b      	ldr	r3, [r3, #16]
90007498:	f003 0238 	and.w	r2, r3, #56	@ 0x38
9000749c:	687b      	ldr	r3, [r7, #4]
9000749e:	685b      	ldr	r3, [r3, #4]
900074a0:	00db      	lsls	r3, r3, #3
900074a2:	429a      	cmp	r2, r3
900074a4:	d1eb      	bne.n	9000747e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900074a6:	687b      	ldr	r3, [r7, #4]
900074a8:	681b      	ldr	r3, [r3, #0]
900074aa:	f003 0302 	and.w	r3, r3, #2
900074ae:	2b00      	cmp	r3, #0
900074b0:	d010      	beq.n	900074d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900074b2:	687b      	ldr	r3, [r7, #4]
900074b4:	68da      	ldr	r2, [r3, #12]
900074b6:	4b14      	ldr	r3, [pc, #80]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900074b8:	699b      	ldr	r3, [r3, #24]
900074ba:	f003 030f 	and.w	r3, r3, #15
900074be:	429a      	cmp	r2, r3
900074c0:	d208      	bcs.n	900074d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900074c2:	4b11      	ldr	r3, [pc, #68]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900074c4:	699b      	ldr	r3, [r3, #24]
900074c6:	f023 020f 	bic.w	r2, r3, #15
900074ca:	687b      	ldr	r3, [r7, #4]
900074cc:	68db      	ldr	r3, [r3, #12]
900074ce:	490e      	ldr	r1, [pc, #56]	@ (90007508 <HAL_RCC_ClockConfig+0x244>)
900074d0:	4313      	orrs	r3, r2
900074d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900074d4:	4b0b      	ldr	r3, [pc, #44]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900074d6:	681b      	ldr	r3, [r3, #0]
900074d8:	f003 030f 	and.w	r3, r3, #15
900074dc:	683a      	ldr	r2, [r7, #0]
900074de:	429a      	cmp	r2, r3
900074e0:	d214      	bcs.n	9000750c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900074e2:	4b08      	ldr	r3, [pc, #32]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900074e4:	681b      	ldr	r3, [r3, #0]
900074e6:	f023 020f 	bic.w	r2, r3, #15
900074ea:	4906      	ldr	r1, [pc, #24]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900074ec:	683b      	ldr	r3, [r7, #0]
900074ee:	4313      	orrs	r3, r2
900074f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900074f2:	4b04      	ldr	r3, [pc, #16]	@ (90007504 <HAL_RCC_ClockConfig+0x240>)
900074f4:	681b      	ldr	r3, [r3, #0]
900074f6:	f003 030f 	and.w	r3, r3, #15
900074fa:	683a      	ldr	r2, [r7, #0]
900074fc:	429a      	cmp	r2, r3
900074fe:	d005      	beq.n	9000750c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007500:	2301      	movs	r3, #1
90007502:	e086      	b.n	90007612 <HAL_RCC_ClockConfig+0x34e>
90007504:	52002000 	.word	0x52002000
90007508:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000750c:	687b      	ldr	r3, [r7, #4]
9000750e:	681b      	ldr	r3, [r3, #0]
90007510:	f003 0304 	and.w	r3, r3, #4
90007514:	2b00      	cmp	r3, #0
90007516:	d010      	beq.n	9000753a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007518:	687b      	ldr	r3, [r7, #4]
9000751a:	691a      	ldr	r2, [r3, #16]
9000751c:	4b3f      	ldr	r3, [pc, #252]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
9000751e:	699b      	ldr	r3, [r3, #24]
90007520:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007524:	429a      	cmp	r2, r3
90007526:	d208      	bcs.n	9000753a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007528:	4b3c      	ldr	r3, [pc, #240]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
9000752a:	699b      	ldr	r3, [r3, #24]
9000752c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007530:	687b      	ldr	r3, [r7, #4]
90007532:	691b      	ldr	r3, [r3, #16]
90007534:	4939      	ldr	r1, [pc, #228]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
90007536:	4313      	orrs	r3, r2
90007538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000753a:	687b      	ldr	r3, [r7, #4]
9000753c:	681b      	ldr	r3, [r3, #0]
9000753e:	f003 0308 	and.w	r3, r3, #8
90007542:	2b00      	cmp	r3, #0
90007544:	d010      	beq.n	90007568 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007546:	687b      	ldr	r3, [r7, #4]
90007548:	695a      	ldr	r2, [r3, #20]
9000754a:	4b34      	ldr	r3, [pc, #208]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
9000754c:	69db      	ldr	r3, [r3, #28]
9000754e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007552:	429a      	cmp	r2, r3
90007554:	d208      	bcs.n	90007568 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007556:	4b31      	ldr	r3, [pc, #196]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
90007558:	69db      	ldr	r3, [r3, #28]
9000755a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000755e:	687b      	ldr	r3, [r7, #4]
90007560:	695b      	ldr	r3, [r3, #20]
90007562:	492e      	ldr	r1, [pc, #184]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
90007564:	4313      	orrs	r3, r2
90007566:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007568:	687b      	ldr	r3, [r7, #4]
9000756a:	681b      	ldr	r3, [r3, #0]
9000756c:	f003 0310 	and.w	r3, r3, #16
90007570:	2b00      	cmp	r3, #0
90007572:	d010      	beq.n	90007596 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007574:	687b      	ldr	r3, [r7, #4]
90007576:	699a      	ldr	r2, [r3, #24]
90007578:	4b28      	ldr	r3, [pc, #160]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
9000757a:	69db      	ldr	r3, [r3, #28]
9000757c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007580:	429a      	cmp	r2, r3
90007582:	d208      	bcs.n	90007596 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007584:	4b25      	ldr	r3, [pc, #148]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
90007586:	69db      	ldr	r3, [r3, #28]
90007588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
9000758c:	687b      	ldr	r3, [r7, #4]
9000758e:	699b      	ldr	r3, [r3, #24]
90007590:	4922      	ldr	r1, [pc, #136]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
90007592:	4313      	orrs	r3, r2
90007594:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007596:	687b      	ldr	r3, [r7, #4]
90007598:	681b      	ldr	r3, [r3, #0]
9000759a:	f003 0320 	and.w	r3, r3, #32
9000759e:	2b00      	cmp	r3, #0
900075a0:	d010      	beq.n	900075c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900075a2:	687b      	ldr	r3, [r7, #4]
900075a4:	69da      	ldr	r2, [r3, #28]
900075a6:	4b1d      	ldr	r3, [pc, #116]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
900075a8:	6a1b      	ldr	r3, [r3, #32]
900075aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900075ae:	429a      	cmp	r2, r3
900075b0:	d208      	bcs.n	900075c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900075b2:	4b1a      	ldr	r3, [pc, #104]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
900075b4:	6a1b      	ldr	r3, [r3, #32]
900075b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900075ba:	687b      	ldr	r3, [r7, #4]
900075bc:	69db      	ldr	r3, [r3, #28]
900075be:	4917      	ldr	r1, [pc, #92]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
900075c0:	4313      	orrs	r3, r2
900075c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900075c4:	f000 f834 	bl	90007630 <HAL_RCC_GetSysClockFreq>
900075c8:	4602      	mov	r2, r0
900075ca:	4b14      	ldr	r3, [pc, #80]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
900075cc:	699b      	ldr	r3, [r3, #24]
900075ce:	0a1b      	lsrs	r3, r3, #8
900075d0:	f003 030f 	and.w	r3, r3, #15
900075d4:	4912      	ldr	r1, [pc, #72]	@ (90007620 <HAL_RCC_ClockConfig+0x35c>)
900075d6:	5ccb      	ldrb	r3, [r1, r3]
900075d8:	f003 031f 	and.w	r3, r3, #31
900075dc:	fa22 f303 	lsr.w	r3, r2, r3
900075e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900075e2:	4b0e      	ldr	r3, [pc, #56]	@ (9000761c <HAL_RCC_ClockConfig+0x358>)
900075e4:	699b      	ldr	r3, [r3, #24]
900075e6:	f003 030f 	and.w	r3, r3, #15
900075ea:	4a0d      	ldr	r2, [pc, #52]	@ (90007620 <HAL_RCC_ClockConfig+0x35c>)
900075ec:	5cd3      	ldrb	r3, [r2, r3]
900075ee:	f003 031f 	and.w	r3, r3, #31
900075f2:	693a      	ldr	r2, [r7, #16]
900075f4:	fa22 f303 	lsr.w	r3, r2, r3
900075f8:	4a0a      	ldr	r2, [pc, #40]	@ (90007624 <HAL_RCC_ClockConfig+0x360>)
900075fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900075fc:	4a0a      	ldr	r2, [pc, #40]	@ (90007628 <HAL_RCC_ClockConfig+0x364>)
900075fe:	693b      	ldr	r3, [r7, #16]
90007600:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007602:	4b0a      	ldr	r3, [pc, #40]	@ (9000762c <HAL_RCC_ClockConfig+0x368>)
90007604:	681b      	ldr	r3, [r3, #0]
90007606:	4618      	mov	r0, r3
90007608:	f7fb fd10 	bl	9000302c <HAL_InitTick>
9000760c:	4603      	mov	r3, r0
9000760e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007610:	7bfb      	ldrb	r3, [r7, #15]
}
90007612:	4618      	mov	r0, r3
90007614:	3718      	adds	r7, #24
90007616:	46bd      	mov	sp, r7
90007618:	bd80      	pop	{r7, pc}
9000761a:	bf00      	nop
9000761c:	58024400 	.word	0x58024400
90007620:	9000cdc4 	.word	0x9000cdc4
90007624:	2000005c 	.word	0x2000005c
90007628:	20000058 	.word	0x20000058
9000762c:	20000060 	.word	0x20000060

90007630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007630:	b480      	push	{r7}
90007632:	b089      	sub	sp, #36	@ 0x24
90007634:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90007636:	4bb3      	ldr	r3, [pc, #716]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007638:	691b      	ldr	r3, [r3, #16]
9000763a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000763e:	2b18      	cmp	r3, #24
90007640:	f200 8155 	bhi.w	900078ee <HAL_RCC_GetSysClockFreq+0x2be>
90007644:	a201      	add	r2, pc, #4	@ (adr r2, 9000764c <HAL_RCC_GetSysClockFreq+0x1c>)
90007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000764a:	bf00      	nop
9000764c:	900076b1 	.word	0x900076b1
90007650:	900078ef 	.word	0x900078ef
90007654:	900078ef 	.word	0x900078ef
90007658:	900078ef 	.word	0x900078ef
9000765c:	900078ef 	.word	0x900078ef
90007660:	900078ef 	.word	0x900078ef
90007664:	900078ef 	.word	0x900078ef
90007668:	900078ef 	.word	0x900078ef
9000766c:	900076d7 	.word	0x900076d7
90007670:	900078ef 	.word	0x900078ef
90007674:	900078ef 	.word	0x900078ef
90007678:	900078ef 	.word	0x900078ef
9000767c:	900078ef 	.word	0x900078ef
90007680:	900078ef 	.word	0x900078ef
90007684:	900078ef 	.word	0x900078ef
90007688:	900078ef 	.word	0x900078ef
9000768c:	900076dd 	.word	0x900076dd
90007690:	900078ef 	.word	0x900078ef
90007694:	900078ef 	.word	0x900078ef
90007698:	900078ef 	.word	0x900078ef
9000769c:	900078ef 	.word	0x900078ef
900076a0:	900078ef 	.word	0x900078ef
900076a4:	900078ef 	.word	0x900078ef
900076a8:	900078ef 	.word	0x900078ef
900076ac:	900076e3 	.word	0x900076e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900076b0:	4b94      	ldr	r3, [pc, #592]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076b2:	681b      	ldr	r3, [r3, #0]
900076b4:	f003 0320 	and.w	r3, r3, #32
900076b8:	2b00      	cmp	r3, #0
900076ba:	d009      	beq.n	900076d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900076bc:	4b91      	ldr	r3, [pc, #580]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076be:	681b      	ldr	r3, [r3, #0]
900076c0:	08db      	lsrs	r3, r3, #3
900076c2:	f003 0303 	and.w	r3, r3, #3
900076c6:	4a90      	ldr	r2, [pc, #576]	@ (90007908 <HAL_RCC_GetSysClockFreq+0x2d8>)
900076c8:	fa22 f303 	lsr.w	r3, r2, r3
900076cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
900076ce:	e111      	b.n	900078f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900076d0:	4b8d      	ldr	r3, [pc, #564]	@ (90007908 <HAL_RCC_GetSysClockFreq+0x2d8>)
900076d2:	61bb      	str	r3, [r7, #24]
      break;
900076d4:	e10e      	b.n	900078f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900076d6:	4b8d      	ldr	r3, [pc, #564]	@ (9000790c <HAL_RCC_GetSysClockFreq+0x2dc>)
900076d8:	61bb      	str	r3, [r7, #24]
      break;
900076da:	e10b      	b.n	900078f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
900076dc:	4b8c      	ldr	r3, [pc, #560]	@ (90007910 <HAL_RCC_GetSysClockFreq+0x2e0>)
900076de:	61bb      	str	r3, [r7, #24]
      break;
900076e0:	e108      	b.n	900078f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900076e2:	4b88      	ldr	r3, [pc, #544]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900076e6:	f003 0303 	and.w	r3, r3, #3
900076ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
900076ec:	4b85      	ldr	r3, [pc, #532]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900076f0:	091b      	lsrs	r3, r3, #4
900076f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900076f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
900076f8:	4b82      	ldr	r3, [pc, #520]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076fc:	f003 0301 	and.w	r3, r3, #1
90007700:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007702:	4b80      	ldr	r3, [pc, #512]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007706:	08db      	lsrs	r3, r3, #3
90007708:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000770c:	68fa      	ldr	r2, [r7, #12]
9000770e:	fb02 f303 	mul.w	r3, r2, r3
90007712:	ee07 3a90 	vmov	s15, r3
90007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000771a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
9000771e:	693b      	ldr	r3, [r7, #16]
90007720:	2b00      	cmp	r3, #0
90007722:	f000 80e1 	beq.w	900078e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007726:	697b      	ldr	r3, [r7, #20]
90007728:	2b02      	cmp	r3, #2
9000772a:	f000 8083 	beq.w	90007834 <HAL_RCC_GetSysClockFreq+0x204>
9000772e:	697b      	ldr	r3, [r7, #20]
90007730:	2b02      	cmp	r3, #2
90007732:	f200 80a1 	bhi.w	90007878 <HAL_RCC_GetSysClockFreq+0x248>
90007736:	697b      	ldr	r3, [r7, #20]
90007738:	2b00      	cmp	r3, #0
9000773a:	d003      	beq.n	90007744 <HAL_RCC_GetSysClockFreq+0x114>
9000773c:	697b      	ldr	r3, [r7, #20]
9000773e:	2b01      	cmp	r3, #1
90007740:	d056      	beq.n	900077f0 <HAL_RCC_GetSysClockFreq+0x1c0>
90007742:	e099      	b.n	90007878 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007744:	4b6f      	ldr	r3, [pc, #444]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007746:	681b      	ldr	r3, [r3, #0]
90007748:	f003 0320 	and.w	r3, r3, #32
9000774c:	2b00      	cmp	r3, #0
9000774e:	d02d      	beq.n	900077ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007750:	4b6c      	ldr	r3, [pc, #432]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007752:	681b      	ldr	r3, [r3, #0]
90007754:	08db      	lsrs	r3, r3, #3
90007756:	f003 0303 	and.w	r3, r3, #3
9000775a:	4a6b      	ldr	r2, [pc, #428]	@ (90007908 <HAL_RCC_GetSysClockFreq+0x2d8>)
9000775c:	fa22 f303 	lsr.w	r3, r2, r3
90007760:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007762:	687b      	ldr	r3, [r7, #4]
90007764:	ee07 3a90 	vmov	s15, r3
90007768:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000776c:	693b      	ldr	r3, [r7, #16]
9000776e:	ee07 3a90 	vmov	s15, r3
90007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000777a:	4b62      	ldr	r3, [pc, #392]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000777c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007782:	ee07 3a90 	vmov	s15, r3
90007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000778a:	ed97 6a02 	vldr	s12, [r7, #8]
9000778e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007914 <HAL_RCC_GetSysClockFreq+0x2e4>
90007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000779a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
900077a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
900077aa:	e087      	b.n	900078bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900077ac:	693b      	ldr	r3, [r7, #16]
900077ae:	ee07 3a90 	vmov	s15, r3
900077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900077b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007918 <HAL_RCC_GetSysClockFreq+0x2e8>
900077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900077be:	4b51      	ldr	r3, [pc, #324]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
900077c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900077c6:	ee07 3a90 	vmov	s15, r3
900077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
900077ce:	ed97 6a02 	vldr	s12, [r7, #8]
900077d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007914 <HAL_RCC_GetSysClockFreq+0x2e4>
900077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
900077de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
900077ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900077ee:	e065      	b.n	900078bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900077f0:	693b      	ldr	r3, [r7, #16]
900077f2:	ee07 3a90 	vmov	s15, r3
900077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900077fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 9000791c <HAL_RCC_GetSysClockFreq+0x2ec>
900077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007802:	4b40      	ldr	r3, [pc, #256]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000780a:	ee07 3a90 	vmov	s15, r3
9000780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007812:	ed97 6a02 	vldr	s12, [r7, #8]
90007816:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007914 <HAL_RCC_GetSysClockFreq+0x2e4>
9000781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000782a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000782e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007832:	e043      	b.n	900078bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007834:	693b      	ldr	r3, [r7, #16]
90007836:	ee07 3a90 	vmov	s15, r3
9000783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000783e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007920 <HAL_RCC_GetSysClockFreq+0x2f0>
90007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007846:	4b2f      	ldr	r3, [pc, #188]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000784e:	ee07 3a90 	vmov	s15, r3
90007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007856:	ed97 6a02 	vldr	s12, [r7, #8]
9000785a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007914 <HAL_RCC_GetSysClockFreq+0x2e4>
9000785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000786e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007876:	e021      	b.n	900078bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007878:	693b      	ldr	r3, [r7, #16]
9000787a:	ee07 3a90 	vmov	s15, r3
9000787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007882:	eddf 6a26 	vldr	s13, [pc, #152]	@ 9000791c <HAL_RCC_GetSysClockFreq+0x2ec>
90007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000788a:	4b1e      	ldr	r3, [pc, #120]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007892:	ee07 3a90 	vmov	s15, r3
90007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000789a:	ed97 6a02 	vldr	s12, [r7, #8]
9000789e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007914 <HAL_RCC_GetSysClockFreq+0x2e4>
900078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900078aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
900078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
900078b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900078ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
900078bc:	4b11      	ldr	r3, [pc, #68]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900078c0:	0a5b      	lsrs	r3, r3, #9
900078c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900078c6:	3301      	adds	r3, #1
900078c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
900078ca:	683b      	ldr	r3, [r7, #0]
900078cc:	ee07 3a90 	vmov	s15, r3
900078d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
900078d4:	edd7 6a07 	vldr	s13, [r7, #28]
900078d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
900078dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900078e0:	ee17 3a90 	vmov	r3, s15
900078e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
900078e6:	e005      	b.n	900078f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
900078e8:	2300      	movs	r3, #0
900078ea:	61bb      	str	r3, [r7, #24]
      break;
900078ec:	e002      	b.n	900078f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
900078ee:	4b07      	ldr	r3, [pc, #28]	@ (9000790c <HAL_RCC_GetSysClockFreq+0x2dc>)
900078f0:	61bb      	str	r3, [r7, #24]
      break;
900078f2:	bf00      	nop
  }

  return sysclockfreq;
900078f4:	69bb      	ldr	r3, [r7, #24]
}
900078f6:	4618      	mov	r0, r3
900078f8:	3724      	adds	r7, #36	@ 0x24
900078fa:	46bd      	mov	sp, r7
900078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
90007900:	4770      	bx	lr
90007902:	bf00      	nop
90007904:	58024400 	.word	0x58024400
90007908:	03d09000 	.word	0x03d09000
9000790c:	003d0900 	.word	0x003d0900
90007910:	017d7840 	.word	0x017d7840
90007914:	46000000 	.word	0x46000000
90007918:	4c742400 	.word	0x4c742400
9000791c:	4a742400 	.word	0x4a742400
90007920:	4bbebc20 	.word	0x4bbebc20

90007924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007924:	b580      	push	{r7, lr}
90007926:	b082      	sub	sp, #8
90007928:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000792a:	f7ff fe81 	bl	90007630 <HAL_RCC_GetSysClockFreq>
9000792e:	4602      	mov	r2, r0
90007930:	4b10      	ldr	r3, [pc, #64]	@ (90007974 <HAL_RCC_GetHCLKFreq+0x50>)
90007932:	699b      	ldr	r3, [r3, #24]
90007934:	0a1b      	lsrs	r3, r3, #8
90007936:	f003 030f 	and.w	r3, r3, #15
9000793a:	490f      	ldr	r1, [pc, #60]	@ (90007978 <HAL_RCC_GetHCLKFreq+0x54>)
9000793c:	5ccb      	ldrb	r3, [r1, r3]
9000793e:	f003 031f 	and.w	r3, r3, #31
90007942:	fa22 f303 	lsr.w	r3, r2, r3
90007946:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007948:	4b0a      	ldr	r3, [pc, #40]	@ (90007974 <HAL_RCC_GetHCLKFreq+0x50>)
9000794a:	699b      	ldr	r3, [r3, #24]
9000794c:	f003 030f 	and.w	r3, r3, #15
90007950:	4a09      	ldr	r2, [pc, #36]	@ (90007978 <HAL_RCC_GetHCLKFreq+0x54>)
90007952:	5cd3      	ldrb	r3, [r2, r3]
90007954:	f003 031f 	and.w	r3, r3, #31
90007958:	687a      	ldr	r2, [r7, #4]
9000795a:	fa22 f303 	lsr.w	r3, r2, r3
9000795e:	4a07      	ldr	r2, [pc, #28]	@ (9000797c <HAL_RCC_GetHCLKFreq+0x58>)
90007960:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007962:	4a07      	ldr	r2, [pc, #28]	@ (90007980 <HAL_RCC_GetHCLKFreq+0x5c>)
90007964:	687b      	ldr	r3, [r7, #4]
90007966:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007968:	4b04      	ldr	r3, [pc, #16]	@ (9000797c <HAL_RCC_GetHCLKFreq+0x58>)
9000796a:	681b      	ldr	r3, [r3, #0]
}
9000796c:	4618      	mov	r0, r3
9000796e:	3708      	adds	r7, #8
90007970:	46bd      	mov	sp, r7
90007972:	bd80      	pop	{r7, pc}
90007974:	58024400 	.word	0x58024400
90007978:	9000cdc4 	.word	0x9000cdc4
9000797c:	2000005c 	.word	0x2000005c
90007980:	20000058 	.word	0x20000058

90007984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007984:	b580      	push	{r7, lr}
90007986:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007988:	f7ff ffcc 	bl	90007924 <HAL_RCC_GetHCLKFreq>
9000798c:	4602      	mov	r2, r0
9000798e:	4b06      	ldr	r3, [pc, #24]	@ (900079a8 <HAL_RCC_GetPCLK1Freq+0x24>)
90007990:	69db      	ldr	r3, [r3, #28]
90007992:	091b      	lsrs	r3, r3, #4
90007994:	f003 0307 	and.w	r3, r3, #7
90007998:	4904      	ldr	r1, [pc, #16]	@ (900079ac <HAL_RCC_GetPCLK1Freq+0x28>)
9000799a:	5ccb      	ldrb	r3, [r1, r3]
9000799c:	f003 031f 	and.w	r3, r3, #31
900079a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
900079a4:	4618      	mov	r0, r3
900079a6:	bd80      	pop	{r7, pc}
900079a8:	58024400 	.word	0x58024400
900079ac:	9000cdc4 	.word	0x9000cdc4

900079b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900079b0:	b580      	push	{r7, lr}
900079b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
900079b4:	f7ff ffb6 	bl	90007924 <HAL_RCC_GetHCLKFreq>
900079b8:	4602      	mov	r2, r0
900079ba:	4b06      	ldr	r3, [pc, #24]	@ (900079d4 <HAL_RCC_GetPCLK2Freq+0x24>)
900079bc:	69db      	ldr	r3, [r3, #28]
900079be:	0a1b      	lsrs	r3, r3, #8
900079c0:	f003 0307 	and.w	r3, r3, #7
900079c4:	4904      	ldr	r1, [pc, #16]	@ (900079d8 <HAL_RCC_GetPCLK2Freq+0x28>)
900079c6:	5ccb      	ldrb	r3, [r1, r3]
900079c8:	f003 031f 	and.w	r3, r3, #31
900079cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
900079d0:	4618      	mov	r0, r3
900079d2:	bd80      	pop	{r7, pc}
900079d4:	58024400 	.word	0x58024400
900079d8:	9000cdc4 	.word	0x9000cdc4

900079dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
900079dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
900079e0:	b0ca      	sub	sp, #296	@ 0x128
900079e2:	af00      	add	r7, sp, #0
900079e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
900079e8:	2300      	movs	r3, #0
900079ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
900079ee:	2300      	movs	r3, #0
900079f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
900079fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007a00:	2500      	movs	r5, #0
90007a02:	ea54 0305 	orrs.w	r3, r4, r5
90007a06:	d049      	beq.n	90007a9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007a0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007a12:	d02f      	beq.n	90007a74 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007a14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007a18:	d828      	bhi.n	90007a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
90007a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007a1e:	d01a      	beq.n	90007a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007a20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007a24:	d822      	bhi.n	90007a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
90007a26:	2b00      	cmp	r3, #0
90007a28:	d003      	beq.n	90007a32 <HAL_RCCEx_PeriphCLKConfig+0x56>
90007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007a2e:	d007      	beq.n	90007a40 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007a30:	e01c      	b.n	90007a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007a32:	4bb8      	ldr	r3, [pc, #736]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007a36:	4ab7      	ldr	r2, [pc, #732]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007a3e:	e01a      	b.n	90007a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a44:	3308      	adds	r3, #8
90007a46:	2102      	movs	r1, #2
90007a48:	4618      	mov	r0, r3
90007a4a:	f001 fc8f 	bl	9000936c <RCCEx_PLL2_Config>
90007a4e:	4603      	mov	r3, r0
90007a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007a54:	e00f      	b.n	90007a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a5a:	3328      	adds	r3, #40	@ 0x28
90007a5c:	2102      	movs	r1, #2
90007a5e:	4618      	mov	r0, r3
90007a60:	f001 fd36 	bl	900094d0 <RCCEx_PLL3_Config>
90007a64:	4603      	mov	r3, r0
90007a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007a6a:	e004      	b.n	90007a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007a6c:	2301      	movs	r3, #1
90007a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007a72:	e000      	b.n	90007a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007a74:	bf00      	nop
    }

    if (ret == HAL_OK)
90007a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007a7a:	2b00      	cmp	r3, #0
90007a7c:	d10a      	bne.n	90007a94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007a7e:	4ba5      	ldr	r3, [pc, #660]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007a82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007a8c:	4aa1      	ldr	r2, [pc, #644]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a8e:	430b      	orrs	r3, r1
90007a90:	6513      	str	r3, [r2, #80]	@ 0x50
90007a92:	e003      	b.n	90007a9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007aa4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007aa8:	f04f 0900 	mov.w	r9, #0
90007aac:	ea58 0309 	orrs.w	r3, r8, r9
90007ab0:	d047      	beq.n	90007b42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007ab8:	2b04      	cmp	r3, #4
90007aba:	d82a      	bhi.n	90007b12 <HAL_RCCEx_PeriphCLKConfig+0x136>
90007abc:	a201      	add	r2, pc, #4	@ (adr r2, 90007ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007ac2:	bf00      	nop
90007ac4:	90007ad9 	.word	0x90007ad9
90007ac8:	90007ae7 	.word	0x90007ae7
90007acc:	90007afd 	.word	0x90007afd
90007ad0:	90007b1b 	.word	0x90007b1b
90007ad4:	90007b1b 	.word	0x90007b1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ad8:	4b8e      	ldr	r3, [pc, #568]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007adc:	4a8d      	ldr	r2, [pc, #564]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ae4:	e01a      	b.n	90007b1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007aea:	3308      	adds	r3, #8
90007aec:	2100      	movs	r1, #0
90007aee:	4618      	mov	r0, r3
90007af0:	f001 fc3c 	bl	9000936c <RCCEx_PLL2_Config>
90007af4:	4603      	mov	r3, r0
90007af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007afa:	e00f      	b.n	90007b1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b00:	3328      	adds	r3, #40	@ 0x28
90007b02:	2100      	movs	r1, #0
90007b04:	4618      	mov	r0, r3
90007b06:	f001 fce3 	bl	900094d0 <RCCEx_PLL3_Config>
90007b0a:	4603      	mov	r3, r0
90007b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007b10:	e004      	b.n	90007b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007b12:	2301      	movs	r3, #1
90007b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007b18:	e000      	b.n	90007b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007b20:	2b00      	cmp	r3, #0
90007b22:	d10a      	bne.n	90007b3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007b24:	4b7b      	ldr	r3, [pc, #492]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007b28:	f023 0107 	bic.w	r1, r3, #7
90007b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007b32:	4a78      	ldr	r2, [pc, #480]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b34:	430b      	orrs	r3, r1
90007b36:	6513      	str	r3, [r2, #80]	@ 0x50
90007b38:	e003      	b.n	90007b42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
90007b4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007b4e:	f04f 0b00 	mov.w	fp, #0
90007b52:	ea5a 030b 	orrs.w	r3, sl, fp
90007b56:	d04c      	beq.n	90007bf2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007b62:	d030      	beq.n	90007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007b68:	d829      	bhi.n	90007bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007b6a:	2bc0      	cmp	r3, #192	@ 0xc0
90007b6c:	d02d      	beq.n	90007bca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007b6e:	2bc0      	cmp	r3, #192	@ 0xc0
90007b70:	d825      	bhi.n	90007bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007b72:	2b80      	cmp	r3, #128	@ 0x80
90007b74:	d018      	beq.n	90007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007b76:	2b80      	cmp	r3, #128	@ 0x80
90007b78:	d821      	bhi.n	90007bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007b7a:	2b00      	cmp	r3, #0
90007b7c:	d002      	beq.n	90007b84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007b7e:	2b40      	cmp	r3, #64	@ 0x40
90007b80:	d007      	beq.n	90007b92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007b82:	e01c      	b.n	90007bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007b84:	4b63      	ldr	r3, [pc, #396]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007b88:	4a62      	ldr	r2, [pc, #392]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007b90:	e01c      	b.n	90007bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b96:	3308      	adds	r3, #8
90007b98:	2100      	movs	r1, #0
90007b9a:	4618      	mov	r0, r3
90007b9c:	f001 fbe6 	bl	9000936c <RCCEx_PLL2_Config>
90007ba0:	4603      	mov	r3, r0
90007ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007ba6:	e011      	b.n	90007bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bac:	3328      	adds	r3, #40	@ 0x28
90007bae:	2100      	movs	r1, #0
90007bb0:	4618      	mov	r0, r3
90007bb2:	f001 fc8d 	bl	900094d0 <RCCEx_PLL3_Config>
90007bb6:	4603      	mov	r3, r0
90007bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007bbc:	e006      	b.n	90007bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007bbe:	2301      	movs	r3, #1
90007bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007bc4:	e002      	b.n	90007bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007bc6:	bf00      	nop
90007bc8:	e000      	b.n	90007bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007bca:	bf00      	nop
    }

    if (ret == HAL_OK)
90007bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007bd0:	2b00      	cmp	r3, #0
90007bd2:	d10a      	bne.n	90007bea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007bd4:	4b4f      	ldr	r3, [pc, #316]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007bd8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007be2:	4a4c      	ldr	r2, [pc, #304]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007be4:	430b      	orrs	r3, r1
90007be6:	6513      	str	r3, [r2, #80]	@ 0x50
90007be8:	e003      	b.n	90007bf2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007bfa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007bfe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007c02:	2300      	movs	r3, #0
90007c04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007c08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007c0c:	460b      	mov	r3, r1
90007c0e:	4313      	orrs	r3, r2
90007c10:	d053      	beq.n	90007cba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007c1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007c1e:	d035      	beq.n	90007c8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007c20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007c24:	d82e      	bhi.n	90007c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007c26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007c2a:	d031      	beq.n	90007c90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007c2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007c30:	d828      	bhi.n	90007c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007c36:	d01a      	beq.n	90007c6e <HAL_RCCEx_PeriphCLKConfig+0x292>
90007c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007c3c:	d822      	bhi.n	90007c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007c3e:	2b00      	cmp	r3, #0
90007c40:	d003      	beq.n	90007c4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007c46:	d007      	beq.n	90007c58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007c48:	e01c      	b.n	90007c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c4a:	4b32      	ldr	r3, [pc, #200]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c4e:	4a31      	ldr	r2, [pc, #196]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c56:	e01c      	b.n	90007c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c5c:	3308      	adds	r3, #8
90007c5e:	2100      	movs	r1, #0
90007c60:	4618      	mov	r0, r3
90007c62:	f001 fb83 	bl	9000936c <RCCEx_PLL2_Config>
90007c66:	4603      	mov	r3, r0
90007c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007c6c:	e011      	b.n	90007c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c72:	3328      	adds	r3, #40	@ 0x28
90007c74:	2100      	movs	r1, #0
90007c76:	4618      	mov	r0, r3
90007c78:	f001 fc2a 	bl	900094d0 <RCCEx_PLL3_Config>
90007c7c:	4603      	mov	r3, r0
90007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c82:	e006      	b.n	90007c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007c84:	2301      	movs	r3, #1
90007c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c8a:	e002      	b.n	90007c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007c8c:	bf00      	nop
90007c8e:	e000      	b.n	90007c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007c90:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c96:	2b00      	cmp	r3, #0
90007c98:	d10b      	bne.n	90007cb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007c9a:	4b1e      	ldr	r3, [pc, #120]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007c9e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007caa:	4a1a      	ldr	r2, [pc, #104]	@ (90007d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cac:	430b      	orrs	r3, r1
90007cae:	6593      	str	r3, [r2, #88]	@ 0x58
90007cb0:	e003      	b.n	90007cba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
90007cc2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007cc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007cca:	2300      	movs	r3, #0
90007ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007cd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007cd4:	460b      	mov	r3, r1
90007cd6:	4313      	orrs	r3, r2
90007cd8:	d056      	beq.n	90007d88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007ce2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007ce6:	d038      	beq.n	90007d5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007ce8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007cec:	d831      	bhi.n	90007d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007cee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007cf2:	d034      	beq.n	90007d5e <HAL_RCCEx_PeriphCLKConfig+0x382>
90007cf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007cf8:	d82b      	bhi.n	90007d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007cfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007cfe:	d01d      	beq.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x360>
90007d00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007d04:	d825      	bhi.n	90007d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007d06:	2b00      	cmp	r3, #0
90007d08:	d006      	beq.n	90007d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007d0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007d0e:	d00a      	beq.n	90007d26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007d10:	e01f      	b.n	90007d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007d12:	bf00      	nop
90007d14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d18:	4ba2      	ldr	r3, [pc, #648]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007d1c:	4aa1      	ldr	r2, [pc, #644]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d24:	e01c      	b.n	90007d60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d2a:	3308      	adds	r3, #8
90007d2c:	2100      	movs	r1, #0
90007d2e:	4618      	mov	r0, r3
90007d30:	f001 fb1c 	bl	9000936c <RCCEx_PLL2_Config>
90007d34:	4603      	mov	r3, r0
90007d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007d3a:	e011      	b.n	90007d60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d40:	3328      	adds	r3, #40	@ 0x28
90007d42:	2100      	movs	r1, #0
90007d44:	4618      	mov	r0, r3
90007d46:	f001 fbc3 	bl	900094d0 <RCCEx_PLL3_Config>
90007d4a:	4603      	mov	r3, r0
90007d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d50:	e006      	b.n	90007d60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007d52:	2301      	movs	r3, #1
90007d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007d58:	e002      	b.n	90007d60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007d5a:	bf00      	nop
90007d5c:	e000      	b.n	90007d60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d64:	2b00      	cmp	r3, #0
90007d66:	d10b      	bne.n	90007d80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007d68:	4b8e      	ldr	r3, [pc, #568]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007d6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007d78:	4a8a      	ldr	r2, [pc, #552]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d7a:	430b      	orrs	r3, r1
90007d7c:	6593      	str	r3, [r2, #88]	@ 0x58
90007d7e:	e003      	b.n	90007d88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007d94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007d98:	2300      	movs	r3, #0
90007d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007d9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007da2:	460b      	mov	r3, r1
90007da4:	4313      	orrs	r3, r2
90007da6:	d03a      	beq.n	90007e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007dae:	2b30      	cmp	r3, #48	@ 0x30
90007db0:	d01f      	beq.n	90007df2 <HAL_RCCEx_PeriphCLKConfig+0x416>
90007db2:	2b30      	cmp	r3, #48	@ 0x30
90007db4:	d819      	bhi.n	90007dea <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007db6:	2b20      	cmp	r3, #32
90007db8:	d00c      	beq.n	90007dd4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007dba:	2b20      	cmp	r3, #32
90007dbc:	d815      	bhi.n	90007dea <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007dbe:	2b00      	cmp	r3, #0
90007dc0:	d019      	beq.n	90007df6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007dc2:	2b10      	cmp	r3, #16
90007dc4:	d111      	bne.n	90007dea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007dc6:	4b77      	ldr	r3, [pc, #476]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dca:	4a76      	ldr	r2, [pc, #472]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007dd2:	e011      	b.n	90007df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dd8:	3308      	adds	r3, #8
90007dda:	2102      	movs	r1, #2
90007ddc:	4618      	mov	r0, r3
90007dde:	f001 fac5 	bl	9000936c <RCCEx_PLL2_Config>
90007de2:	4603      	mov	r3, r0
90007de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007de8:	e006      	b.n	90007df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007dea:	2301      	movs	r3, #1
90007dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007df0:	e002      	b.n	90007df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007df2:	bf00      	nop
90007df4:	e000      	b.n	90007df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007df6:	bf00      	nop
    }

    if (ret == HAL_OK)
90007df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007dfc:	2b00      	cmp	r3, #0
90007dfe:	d10a      	bne.n	90007e16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007e00:	4b68      	ldr	r3, [pc, #416]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007e04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007e0e:	4a65      	ldr	r2, [pc, #404]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e10:	430b      	orrs	r3, r1
90007e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
90007e14:	e003      	b.n	90007e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90007e2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90007e2e:	2300      	movs	r3, #0
90007e30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90007e34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90007e38:	460b      	mov	r3, r1
90007e3a:	4313      	orrs	r3, r2
90007e3c:	d051      	beq.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90007e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007e48:	d035      	beq.n	90007eb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
90007e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007e4e:	d82e      	bhi.n	90007eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007e50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007e54:	d031      	beq.n	90007eba <HAL_RCCEx_PeriphCLKConfig+0x4de>
90007e56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007e5a:	d828      	bhi.n	90007eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007e60:	d01a      	beq.n	90007e98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90007e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007e66:	d822      	bhi.n	90007eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007e68:	2b00      	cmp	r3, #0
90007e6a:	d003      	beq.n	90007e74 <HAL_RCCEx_PeriphCLKConfig+0x498>
90007e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90007e70:	d007      	beq.n	90007e82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90007e72:	e01c      	b.n	90007eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e74:	4b4b      	ldr	r3, [pc, #300]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e78:	4a4a      	ldr	r2, [pc, #296]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007e80:	e01c      	b.n	90007ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e86:	3308      	adds	r3, #8
90007e88:	2100      	movs	r1, #0
90007e8a:	4618      	mov	r0, r3
90007e8c:	f001 fa6e 	bl	9000936c <RCCEx_PLL2_Config>
90007e90:	4603      	mov	r3, r0
90007e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007e96:	e011      	b.n	90007ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e9c:	3328      	adds	r3, #40	@ 0x28
90007e9e:	2100      	movs	r1, #0
90007ea0:	4618      	mov	r0, r3
90007ea2:	f001 fb15 	bl	900094d0 <RCCEx_PLL3_Config>
90007ea6:	4603      	mov	r3, r0
90007ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007eac:	e006      	b.n	90007ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007eae:	2301      	movs	r3, #1
90007eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007eb4:	e002      	b.n	90007ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007eb6:	bf00      	nop
90007eb8:	e000      	b.n	90007ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007eba:	bf00      	nop
    }

    if (ret == HAL_OK)
90007ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ec0:	2b00      	cmp	r3, #0
90007ec2:	d10a      	bne.n	90007eda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90007ec4:	4b37      	ldr	r3, [pc, #220]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007ec8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007ed2:	4a34      	ldr	r2, [pc, #208]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ed4:	430b      	orrs	r3, r1
90007ed6:	6513      	str	r3, [r2, #80]	@ 0x50
90007ed8:	e003      	b.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007eea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
90007eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90007ef2:	2300      	movs	r3, #0
90007ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90007ef8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90007efc:	460b      	mov	r3, r1
90007efe:	4313      	orrs	r3, r2
90007f00:	d056      	beq.n	90007fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90007f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90007f0c:	d033      	beq.n	90007f76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
90007f0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90007f12:	d82c      	bhi.n	90007f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90007f18:	d02f      	beq.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
90007f1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90007f1e:	d826      	bhi.n	90007f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90007f24:	d02b      	beq.n	90007f7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90007f26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90007f2a:	d820      	bhi.n	90007f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007f30:	d012      	beq.n	90007f58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90007f32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007f36:	d81a      	bhi.n	90007f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f38:	2b00      	cmp	r3, #0
90007f3a:	d022      	beq.n	90007f82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90007f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90007f40:	d115      	bne.n	90007f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f46:	3308      	adds	r3, #8
90007f48:	2101      	movs	r1, #1
90007f4a:	4618      	mov	r0, r3
90007f4c:	f001 fa0e 	bl	9000936c <RCCEx_PLL2_Config>
90007f50:	4603      	mov	r3, r0
90007f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90007f56:	e015      	b.n	90007f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f5c:	3328      	adds	r3, #40	@ 0x28
90007f5e:	2101      	movs	r1, #1
90007f60:	4618      	mov	r0, r3
90007f62:	f001 fab5 	bl	900094d0 <RCCEx_PLL3_Config>
90007f66:	4603      	mov	r3, r0
90007f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90007f6c:	e00a      	b.n	90007f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007f6e:	2301      	movs	r3, #1
90007f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f74:	e006      	b.n	90007f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f76:	bf00      	nop
90007f78:	e004      	b.n	90007f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f7a:	bf00      	nop
90007f7c:	e002      	b.n	90007f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f7e:	bf00      	nop
90007f80:	e000      	b.n	90007f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f82:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f88:	2b00      	cmp	r3, #0
90007f8a:	d10d      	bne.n	90007fa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90007f8c:	4b05      	ldr	r3, [pc, #20]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007f90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90007f9a:	4a02      	ldr	r2, [pc, #8]	@ (90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f9c:	430b      	orrs	r3, r1
90007f9e:	6513      	str	r3, [r2, #80]	@ 0x50
90007fa0:	e006      	b.n	90007fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90007fa2:	bf00      	nop
90007fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
90007fb8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
90007fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90007fc0:	2300      	movs	r3, #0
90007fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90007fc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
90007fca:	460b      	mov	r3, r1
90007fcc:	4313      	orrs	r3, r2
90007fce:	d055      	beq.n	9000807c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90007fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90007fdc:	d033      	beq.n	90008046 <HAL_RCCEx_PeriphCLKConfig+0x66a>
90007fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90007fe2:	d82c      	bhi.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x662>
90007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90007fe8:	d02f      	beq.n	9000804a <HAL_RCCEx_PeriphCLKConfig+0x66e>
90007fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90007fee:	d826      	bhi.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x662>
90007ff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90007ff4:	d02b      	beq.n	9000804e <HAL_RCCEx_PeriphCLKConfig+0x672>
90007ff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90007ffa:	d820      	bhi.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x662>
90007ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008000:	d012      	beq.n	90008028 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008006:	d81a      	bhi.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x662>
90008008:	2b00      	cmp	r3, #0
9000800a:	d022      	beq.n	90008052 <HAL_RCCEx_PeriphCLKConfig+0x676>
9000800c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008010:	d115      	bne.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008016:	3308      	adds	r3, #8
90008018:	2101      	movs	r1, #1
9000801a:	4618      	mov	r0, r3
9000801c:	f001 f9a6 	bl	9000936c <RCCEx_PLL2_Config>
90008020:	4603      	mov	r3, r0
90008022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008026:	e015      	b.n	90008054 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000802c:	3328      	adds	r3, #40	@ 0x28
9000802e:	2101      	movs	r1, #1
90008030:	4618      	mov	r0, r3
90008032:	f001 fa4d 	bl	900094d0 <RCCEx_PLL3_Config>
90008036:	4603      	mov	r3, r0
90008038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000803c:	e00a      	b.n	90008054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000803e:	2301      	movs	r3, #1
90008040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008044:	e006      	b.n	90008054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008046:	bf00      	nop
90008048:	e004      	b.n	90008054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000804a:	bf00      	nop
9000804c:	e002      	b.n	90008054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000804e:	bf00      	nop
90008050:	e000      	b.n	90008054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008052:	bf00      	nop
    }

    if (ret == HAL_OK)
90008054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008058:	2b00      	cmp	r3, #0
9000805a:	d10b      	bne.n	90008074 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000805c:	4ba3      	ldr	r3, [pc, #652]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000805e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008060:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008068:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
9000806c:	4a9f      	ldr	r2, [pc, #636]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000806e:	430b      	orrs	r3, r1
90008070:	6593      	str	r3, [r2, #88]	@ 0x58
90008072:	e003      	b.n	9000807c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008080:	e9d3 2300 	ldrd	r2, r3, [r3]
90008084:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90008088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
9000808c:	2300      	movs	r3, #0
9000808e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90008092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008096:	460b      	mov	r3, r1
90008098:	4313      	orrs	r3, r2
9000809a:	d037      	beq.n	9000810c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
9000809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900080a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900080a6:	d00e      	beq.n	900080c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900080a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900080ac:	d816      	bhi.n	900080dc <HAL_RCCEx_PeriphCLKConfig+0x700>
900080ae:	2b00      	cmp	r3, #0
900080b0:	d018      	beq.n	900080e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
900080b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900080b6:	d111      	bne.n	900080dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900080b8:	4b8c      	ldr	r3, [pc, #560]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900080bc:	4a8b      	ldr	r2, [pc, #556]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900080c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900080c4:	e00f      	b.n	900080e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080ca:	3308      	adds	r3, #8
900080cc:	2101      	movs	r1, #1
900080ce:	4618      	mov	r0, r3
900080d0:	f001 f94c 	bl	9000936c <RCCEx_PLL2_Config>
900080d4:	4603      	mov	r3, r0
900080d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900080da:	e004      	b.n	900080e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900080dc:	2301      	movs	r3, #1
900080de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900080e2:	e000      	b.n	900080e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900080e4:	bf00      	nop
    }

    if (ret == HAL_OK)
900080e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080ea:	2b00      	cmp	r3, #0
900080ec:	d10a      	bne.n	90008104 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
900080ee:	4b7f      	ldr	r3, [pc, #508]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900080f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
900080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900080fc:	4a7b      	ldr	r2, [pc, #492]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080fe:	430b      	orrs	r3, r1
90008100:	6513      	str	r3, [r2, #80]	@ 0x50
90008102:	e003      	b.n	9000810c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008110:	e9d3 2300 	ldrd	r2, r3, [r3]
90008114:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
9000811c:	2300      	movs	r3, #0
9000811e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90008122:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008126:	460b      	mov	r3, r1
90008128:	4313      	orrs	r3, r2
9000812a:	d039      	beq.n	900081a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
9000812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008132:	2b03      	cmp	r3, #3
90008134:	d81c      	bhi.n	90008170 <HAL_RCCEx_PeriphCLKConfig+0x794>
90008136:	a201      	add	r2, pc, #4	@ (adr r2, 9000813c <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000813c:	90008179 	.word	0x90008179
90008140:	9000814d 	.word	0x9000814d
90008144:	9000815b 	.word	0x9000815b
90008148:	90008179 	.word	0x90008179
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000814c:	4b67      	ldr	r3, [pc, #412]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000814e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008150:	4a66      	ldr	r2, [pc, #408]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008158:	e00f      	b.n	9000817a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000815e:	3308      	adds	r3, #8
90008160:	2102      	movs	r1, #2
90008162:	4618      	mov	r0, r3
90008164:	f001 f902 	bl	9000936c <RCCEx_PLL2_Config>
90008168:	4603      	mov	r3, r0
9000816a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
9000816e:	e004      	b.n	9000817a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008170:	2301      	movs	r3, #1
90008172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008176:	e000      	b.n	9000817a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008178:	bf00      	nop
    }

    if (ret == HAL_OK)
9000817a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000817e:	2b00      	cmp	r3, #0
90008180:	d10a      	bne.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90008182:	4b5a      	ldr	r3, [pc, #360]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008186:	f023 0103 	bic.w	r1, r3, #3
9000818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000818e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008190:	4a56      	ldr	r2, [pc, #344]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008192:	430b      	orrs	r3, r1
90008194:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008196:	e003      	b.n	900081a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000819c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
900081a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900081ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
900081b0:	2300      	movs	r3, #0
900081b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
900081b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
900081ba:	460b      	mov	r3, r1
900081bc:	4313      	orrs	r3, r2
900081be:	f000 809f 	beq.w	90008300 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900081c2:	4b4b      	ldr	r3, [pc, #300]	@ (900082f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900081c4:	681b      	ldr	r3, [r3, #0]
900081c6:	4a4a      	ldr	r2, [pc, #296]	@ (900082f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900081c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900081cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900081ce:	f7fa ff77 	bl	900030c0 <HAL_GetTick>
900081d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900081d6:	e00b      	b.n	900081f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900081d8:	f7fa ff72 	bl	900030c0 <HAL_GetTick>
900081dc:	4602      	mov	r2, r0
900081de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900081e2:	1ad3      	subs	r3, r2, r3
900081e4:	2b64      	cmp	r3, #100	@ 0x64
900081e6:	d903      	bls.n	900081f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
900081e8:	2303      	movs	r3, #3
900081ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081ee:	e005      	b.n	900081fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900081f0:	4b3f      	ldr	r3, [pc, #252]	@ (900082f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900081f2:	681b      	ldr	r3, [r3, #0]
900081f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900081f8:	2b00      	cmp	r3, #0
900081fa:	d0ed      	beq.n	900081d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
900081fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008200:	2b00      	cmp	r3, #0
90008202:	d179      	bne.n	900082f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008204:	4b39      	ldr	r3, [pc, #228]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008206:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000820c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008210:	4053      	eors	r3, r2
90008212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008216:	2b00      	cmp	r3, #0
90008218:	d015      	beq.n	90008246 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000821a:	4b34      	ldr	r3, [pc, #208]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000821e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008222:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008226:	4b31      	ldr	r3, [pc, #196]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000822a:	4a30      	ldr	r2, [pc, #192]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000822c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90008230:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90008232:	4b2e      	ldr	r3, [pc, #184]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008236:	4a2d      	ldr	r2, [pc, #180]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000823c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
9000823e:	4a2b      	ldr	r2, [pc, #172]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008244:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000824a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000824e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008252:	d118      	bne.n	90008286 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008254:	f7fa ff34 	bl	900030c0 <HAL_GetTick>
90008258:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000825c:	e00d      	b.n	9000827a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000825e:	f7fa ff2f 	bl	900030c0 <HAL_GetTick>
90008262:	4602      	mov	r2, r0
90008264:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008268:	1ad2      	subs	r2, r2, r3
9000826a:	f241 3388 	movw	r3, #5000	@ 0x1388
9000826e:	429a      	cmp	r2, r3
90008270:	d903      	bls.n	9000827a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90008272:	2303      	movs	r3, #3
90008274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90008278:	e005      	b.n	90008286 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000827a:	4b1c      	ldr	r3, [pc, #112]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000827c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000827e:	f003 0302 	and.w	r3, r3, #2
90008282:	2b00      	cmp	r3, #0
90008284:	d0eb      	beq.n	9000825e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90008286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000828a:	2b00      	cmp	r3, #0
9000828c:	d129      	bne.n	900082e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000829a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000829e:	d10e      	bne.n	900082be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
900082a0:	4b12      	ldr	r3, [pc, #72]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082a2:	691b      	ldr	r3, [r3, #16]
900082a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
900082a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900082b0:	091a      	lsrs	r2, r3, #4
900082b2:	4b10      	ldr	r3, [pc, #64]	@ (900082f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
900082b4:	4013      	ands	r3, r2
900082b6:	4a0d      	ldr	r2, [pc, #52]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082b8:	430b      	orrs	r3, r1
900082ba:	6113      	str	r3, [r2, #16]
900082bc:	e005      	b.n	900082ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
900082be:	4b0b      	ldr	r3, [pc, #44]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082c0:	691b      	ldr	r3, [r3, #16]
900082c2:	4a0a      	ldr	r2, [pc, #40]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
900082c8:	6113      	str	r3, [r2, #16]
900082ca:	4b08      	ldr	r3, [pc, #32]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
900082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900082d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
900082da:	4a04      	ldr	r2, [pc, #16]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082dc:	430b      	orrs	r3, r1
900082de:	6713      	str	r3, [r2, #112]	@ 0x70
900082e0:	e00e      	b.n	90008300 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900082e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
900082ea:	e009      	b.n	90008300 <HAL_RCCEx_PeriphCLKConfig+0x924>
900082ec:	58024400 	.word	0x58024400
900082f0:	58024800 	.word	0x58024800
900082f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
900082f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008304:	e9d3 2300 	ldrd	r2, r3, [r3]
90008308:	f002 0301 	and.w	r3, r2, #1
9000830c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008310:	2300      	movs	r3, #0
90008312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008316:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
9000831a:	460b      	mov	r3, r1
9000831c:	4313      	orrs	r3, r2
9000831e:	f000 8089 	beq.w	90008434 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008328:	2b28      	cmp	r3, #40	@ 0x28
9000832a:	d86b      	bhi.n	90008404 <HAL_RCCEx_PeriphCLKConfig+0xa28>
9000832c:	a201      	add	r2, pc, #4	@ (adr r2, 90008334 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008332:	bf00      	nop
90008334:	9000840d 	.word	0x9000840d
90008338:	90008405 	.word	0x90008405
9000833c:	90008405 	.word	0x90008405
90008340:	90008405 	.word	0x90008405
90008344:	90008405 	.word	0x90008405
90008348:	90008405 	.word	0x90008405
9000834c:	90008405 	.word	0x90008405
90008350:	90008405 	.word	0x90008405
90008354:	900083d9 	.word	0x900083d9
90008358:	90008405 	.word	0x90008405
9000835c:	90008405 	.word	0x90008405
90008360:	90008405 	.word	0x90008405
90008364:	90008405 	.word	0x90008405
90008368:	90008405 	.word	0x90008405
9000836c:	90008405 	.word	0x90008405
90008370:	90008405 	.word	0x90008405
90008374:	900083ef 	.word	0x900083ef
90008378:	90008405 	.word	0x90008405
9000837c:	90008405 	.word	0x90008405
90008380:	90008405 	.word	0x90008405
90008384:	90008405 	.word	0x90008405
90008388:	90008405 	.word	0x90008405
9000838c:	90008405 	.word	0x90008405
90008390:	90008405 	.word	0x90008405
90008394:	9000840d 	.word	0x9000840d
90008398:	90008405 	.word	0x90008405
9000839c:	90008405 	.word	0x90008405
900083a0:	90008405 	.word	0x90008405
900083a4:	90008405 	.word	0x90008405
900083a8:	90008405 	.word	0x90008405
900083ac:	90008405 	.word	0x90008405
900083b0:	90008405 	.word	0x90008405
900083b4:	9000840d 	.word	0x9000840d
900083b8:	90008405 	.word	0x90008405
900083bc:	90008405 	.word	0x90008405
900083c0:	90008405 	.word	0x90008405
900083c4:	90008405 	.word	0x90008405
900083c8:	90008405 	.word	0x90008405
900083cc:	90008405 	.word	0x90008405
900083d0:	90008405 	.word	0x90008405
900083d4:	9000840d 	.word	0x9000840d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900083d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083dc:	3308      	adds	r3, #8
900083de:	2101      	movs	r1, #1
900083e0:	4618      	mov	r0, r3
900083e2:	f000 ffc3 	bl	9000936c <RCCEx_PLL2_Config>
900083e6:	4603      	mov	r3, r0
900083e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900083ec:	e00f      	b.n	9000840e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083f2:	3328      	adds	r3, #40	@ 0x28
900083f4:	2101      	movs	r1, #1
900083f6:	4618      	mov	r0, r3
900083f8:	f001 f86a 	bl	900094d0 <RCCEx_PLL3_Config>
900083fc:	4603      	mov	r3, r0
900083fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008402:	e004      	b.n	9000840e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008404:	2301      	movs	r3, #1
90008406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000840a:	e000      	b.n	9000840e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
9000840c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008412:	2b00      	cmp	r3, #0
90008414:	d10a      	bne.n	9000842c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008416:	4bbf      	ldr	r3, [pc, #764]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000841a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008424:	4abb      	ldr	r2, [pc, #748]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008426:	430b      	orrs	r3, r1
90008428:	6553      	str	r3, [r2, #84]	@ 0x54
9000842a:	e003      	b.n	90008434 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000842c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008438:	e9d3 2300 	ldrd	r2, r3, [r3]
9000843c:	f002 0302 	and.w	r3, r2, #2
90008440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008444:	2300      	movs	r3, #0
90008446:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000844a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
9000844e:	460b      	mov	r3, r1
90008450:	4313      	orrs	r3, r2
90008452:	d041      	beq.n	900084d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
9000845a:	2b05      	cmp	r3, #5
9000845c:	d824      	bhi.n	900084a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
9000845e:	a201      	add	r2, pc, #4	@ (adr r2, 90008464 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008464:	900084b1 	.word	0x900084b1
90008468:	9000847d 	.word	0x9000847d
9000846c:	90008493 	.word	0x90008493
90008470:	900084b1 	.word	0x900084b1
90008474:	900084b1 	.word	0x900084b1
90008478:	900084b1 	.word	0x900084b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008480:	3308      	adds	r3, #8
90008482:	2101      	movs	r1, #1
90008484:	4618      	mov	r0, r3
90008486:	f000 ff71 	bl	9000936c <RCCEx_PLL2_Config>
9000848a:	4603      	mov	r3, r0
9000848c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008490:	e00f      	b.n	900084b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008496:	3328      	adds	r3, #40	@ 0x28
90008498:	2101      	movs	r1, #1
9000849a:	4618      	mov	r0, r3
9000849c:	f001 f818 	bl	900094d0 <RCCEx_PLL3_Config>
900084a0:	4603      	mov	r3, r0
900084a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900084a6:	e004      	b.n	900084b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900084a8:	2301      	movs	r3, #1
900084aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900084ae:	e000      	b.n	900084b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
900084b0:	bf00      	nop
    }

    if (ret == HAL_OK)
900084b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084b6:	2b00      	cmp	r3, #0
900084b8:	d10a      	bne.n	900084d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900084ba:	4b96      	ldr	r3, [pc, #600]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900084bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900084be:	f023 0107 	bic.w	r1, r3, #7
900084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900084c8:	4a92      	ldr	r2, [pc, #584]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900084ca:	430b      	orrs	r3, r1
900084cc:	6553      	str	r3, [r2, #84]	@ 0x54
900084ce:	e003      	b.n	900084d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900084d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
900084e0:	f002 0304 	and.w	r3, r2, #4
900084e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
900084e8:	2300      	movs	r3, #0
900084ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
900084ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
900084f2:	460b      	mov	r3, r1
900084f4:	4313      	orrs	r3, r2
900084f6:	d044      	beq.n	90008582 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
900084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008500:	2b05      	cmp	r3, #5
90008502:	d825      	bhi.n	90008550 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008504:	a201      	add	r2, pc, #4	@ (adr r2, 9000850c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000850a:	bf00      	nop
9000850c:	90008559 	.word	0x90008559
90008510:	90008525 	.word	0x90008525
90008514:	9000853b 	.word	0x9000853b
90008518:	90008559 	.word	0x90008559
9000851c:	90008559 	.word	0x90008559
90008520:	90008559 	.word	0x90008559
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008528:	3308      	adds	r3, #8
9000852a:	2101      	movs	r1, #1
9000852c:	4618      	mov	r0, r3
9000852e:	f000 ff1d 	bl	9000936c <RCCEx_PLL2_Config>
90008532:	4603      	mov	r3, r0
90008534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008538:	e00f      	b.n	9000855a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000853e:	3328      	adds	r3, #40	@ 0x28
90008540:	2101      	movs	r1, #1
90008542:	4618      	mov	r0, r3
90008544:	f000 ffc4 	bl	900094d0 <RCCEx_PLL3_Config>
90008548:	4603      	mov	r3, r0
9000854a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000854e:	e004      	b.n	9000855a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008550:	2301      	movs	r3, #1
90008552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008556:	e000      	b.n	9000855a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008558:	bf00      	nop
    }

    if (ret == HAL_OK)
9000855a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000855e:	2b00      	cmp	r3, #0
90008560:	d10b      	bne.n	9000857a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90008562:	4b6c      	ldr	r3, [pc, #432]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008566:	f023 0107 	bic.w	r1, r3, #7
9000856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000856e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008572:	4a68      	ldr	r2, [pc, #416]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008574:	430b      	orrs	r3, r1
90008576:	6593      	str	r3, [r2, #88]	@ 0x58
90008578:	e003      	b.n	90008582 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000857a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000857e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008586:	e9d3 2300 	ldrd	r2, r3, [r3]
9000858a:	f002 0320 	and.w	r3, r2, #32
9000858e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90008592:	2300      	movs	r3, #0
90008594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
9000859c:	460b      	mov	r3, r1
9000859e:	4313      	orrs	r3, r2
900085a0:	d055      	beq.n	9000864e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
900085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900085aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900085ae:	d033      	beq.n	90008618 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
900085b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900085b4:	d82c      	bhi.n	90008610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900085ba:	d02f      	beq.n	9000861c <HAL_RCCEx_PeriphCLKConfig+0xc40>
900085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900085c0:	d826      	bhi.n	90008610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900085c6:	d02b      	beq.n	90008620 <HAL_RCCEx_PeriphCLKConfig+0xc44>
900085c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900085cc:	d820      	bhi.n	90008610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900085d2:	d012      	beq.n	900085fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900085d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900085d8:	d81a      	bhi.n	90008610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085da:	2b00      	cmp	r3, #0
900085dc:	d022      	beq.n	90008624 <HAL_RCCEx_PeriphCLKConfig+0xc48>
900085de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900085e2:	d115      	bne.n	90008610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085e8:	3308      	adds	r3, #8
900085ea:	2100      	movs	r1, #0
900085ec:	4618      	mov	r0, r3
900085ee:	f000 febd 	bl	9000936c <RCCEx_PLL2_Config>
900085f2:	4603      	mov	r3, r0
900085f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900085f8:	e015      	b.n	90008626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900085fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085fe:	3328      	adds	r3, #40	@ 0x28
90008600:	2102      	movs	r1, #2
90008602:	4618      	mov	r0, r3
90008604:	f000 ff64 	bl	900094d0 <RCCEx_PLL3_Config>
90008608:	4603      	mov	r3, r0
9000860a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000860e:	e00a      	b.n	90008626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008610:	2301      	movs	r3, #1
90008612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008616:	e006      	b.n	90008626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008618:	bf00      	nop
9000861a:	e004      	b.n	90008626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000861c:	bf00      	nop
9000861e:	e002      	b.n	90008626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008620:	bf00      	nop
90008622:	e000      	b.n	90008626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008624:	bf00      	nop
    }

    if (ret == HAL_OK)
90008626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000862a:	2b00      	cmp	r3, #0
9000862c:	d10b      	bne.n	90008646 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000862e:	4b39      	ldr	r3, [pc, #228]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008632:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000863e:	4a35      	ldr	r2, [pc, #212]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008640:	430b      	orrs	r3, r1
90008642:	6553      	str	r3, [r2, #84]	@ 0x54
90008644:	e003      	b.n	9000864e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000864a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008652:	e9d3 2300 	ldrd	r2, r3, [r3]
90008656:	f002 0340 	and.w	r3, r2, #64	@ 0x40
9000865a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
9000865e:	2300      	movs	r3, #0
90008660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008664:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008668:	460b      	mov	r3, r1
9000866a:	4313      	orrs	r3, r2
9000866c:	d058      	beq.n	90008720 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
9000866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008676:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000867a:	d033      	beq.n	900086e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
9000867c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008680:	d82c      	bhi.n	900086dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008686:	d02f      	beq.n	900086e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000868c:	d826      	bhi.n	900086dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000868e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008692:	d02b      	beq.n	900086ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008694:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008698:	d820      	bhi.n	900086dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000869a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000869e:	d012      	beq.n	900086c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
900086a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900086a4:	d81a      	bhi.n	900086dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
900086a6:	2b00      	cmp	r3, #0
900086a8:	d022      	beq.n	900086f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
900086aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900086ae:	d115      	bne.n	900086dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086b4:	3308      	adds	r3, #8
900086b6:	2100      	movs	r1, #0
900086b8:	4618      	mov	r0, r3
900086ba:	f000 fe57 	bl	9000936c <RCCEx_PLL2_Config>
900086be:	4603      	mov	r3, r0
900086c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900086c4:	e015      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ca:	3328      	adds	r3, #40	@ 0x28
900086cc:	2102      	movs	r1, #2
900086ce:	4618      	mov	r0, r3
900086d0:	f000 fefe 	bl	900094d0 <RCCEx_PLL3_Config>
900086d4:	4603      	mov	r3, r0
900086d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900086da:	e00a      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086dc:	2301      	movs	r3, #1
900086de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086e2:	e006      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086e4:	bf00      	nop
900086e6:	e004      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086e8:	bf00      	nop
900086ea:	e002      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086ec:	bf00      	nop
900086ee:	e000      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086f0:	bf00      	nop
    }

    if (ret == HAL_OK)
900086f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086f6:	2b00      	cmp	r3, #0
900086f8:	d10e      	bne.n	90008718 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
900086fa:	4b06      	ldr	r3, [pc, #24]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900086fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000870a:	4a02      	ldr	r2, [pc, #8]	@ (90008714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000870c:	430b      	orrs	r3, r1
9000870e:	6593      	str	r3, [r2, #88]	@ 0x58
90008710:	e006      	b.n	90008720 <HAL_RCCEx_PeriphCLKConfig+0xd44>
90008712:	bf00      	nop
90008714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000871c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008724:	e9d3 2300 	ldrd	r2, r3, [r3]
90008728:	f002 0380 	and.w	r3, r2, #128	@ 0x80
9000872c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90008730:	2300      	movs	r3, #0
90008732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90008736:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
9000873a:	460b      	mov	r3, r1
9000873c:	4313      	orrs	r3, r2
9000873e:	d055      	beq.n	900087ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008748:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
9000874c:	d033      	beq.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
9000874e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008752:	d82c      	bhi.n	900087ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008758:	d02f      	beq.n	900087ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
9000875a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000875e:	d826      	bhi.n	900087ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008760:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008764:	d02b      	beq.n	900087be <HAL_RCCEx_PeriphCLKConfig+0xde2>
90008766:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
9000876a:	d820      	bhi.n	900087ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000876c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008770:	d012      	beq.n	90008798 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90008772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008776:	d81a      	bhi.n	900087ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008778:	2b00      	cmp	r3, #0
9000877a:	d022      	beq.n	900087c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
9000877c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008780:	d115      	bne.n	900087ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008786:	3308      	adds	r3, #8
90008788:	2100      	movs	r1, #0
9000878a:	4618      	mov	r0, r3
9000878c:	f000 fdee 	bl	9000936c <RCCEx_PLL2_Config>
90008790:	4603      	mov	r3, r0
90008792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008796:	e015      	b.n	900087c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000879c:	3328      	adds	r3, #40	@ 0x28
9000879e:	2102      	movs	r1, #2
900087a0:	4618      	mov	r0, r3
900087a2:	f000 fe95 	bl	900094d0 <RCCEx_PLL3_Config>
900087a6:	4603      	mov	r3, r0
900087a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900087ac:	e00a      	b.n	900087c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900087ae:	2301      	movs	r3, #1
900087b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900087b4:	e006      	b.n	900087c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087b6:	bf00      	nop
900087b8:	e004      	b.n	900087c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087ba:	bf00      	nop
900087bc:	e002      	b.n	900087c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087be:	bf00      	nop
900087c0:	e000      	b.n	900087c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087c2:	bf00      	nop
    }

    if (ret == HAL_OK)
900087c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087c8:	2b00      	cmp	r3, #0
900087ca:	d10b      	bne.n	900087e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900087cc:	4ba1      	ldr	r3, [pc, #644]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900087ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900087d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
900087d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900087dc:	4a9d      	ldr	r2, [pc, #628]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900087de:	430b      	orrs	r3, r1
900087e0:	6593      	str	r3, [r2, #88]	@ 0x58
900087e2:	e003      	b.n	900087ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
900087e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
900087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
900087f4:	f002 0308 	and.w	r3, r2, #8
900087f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
900087fc:	2300      	movs	r3, #0
900087fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008802:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008806:	460b      	mov	r3, r1
90008808:	4313      	orrs	r3, r2
9000880a:	d01e      	beq.n	9000884a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008818:	d10c      	bne.n	90008834 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000881a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000881e:	3328      	adds	r3, #40	@ 0x28
90008820:	2102      	movs	r1, #2
90008822:	4618      	mov	r0, r3
90008824:	f000 fe54 	bl	900094d0 <RCCEx_PLL3_Config>
90008828:	4603      	mov	r3, r0
9000882a:	2b00      	cmp	r3, #0
9000882c:	d002      	beq.n	90008834 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
9000882e:	2301      	movs	r3, #1
90008830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008834:	4b87      	ldr	r3, [pc, #540]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008838:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
9000883c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008844:	4a83      	ldr	r2, [pc, #524]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008846:	430b      	orrs	r3, r1
90008848:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000884e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008852:	f002 0310 	and.w	r3, r2, #16
90008856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
9000885a:	2300      	movs	r3, #0
9000885c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
90008860:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008864:	460b      	mov	r3, r1
90008866:	4313      	orrs	r3, r2
90008868:	d01e      	beq.n	900088a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000886a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000886e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008876:	d10c      	bne.n	90008892 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000887c:	3328      	adds	r3, #40	@ 0x28
9000887e:	2102      	movs	r1, #2
90008880:	4618      	mov	r0, r3
90008882:	f000 fe25 	bl	900094d0 <RCCEx_PLL3_Config>
90008886:	4603      	mov	r3, r0
90008888:	2b00      	cmp	r3, #0
9000888a:	d002      	beq.n	90008892 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
9000888c:	2301      	movs	r3, #1
9000888e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008892:	4b70      	ldr	r3, [pc, #448]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008896:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
9000889a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000889e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
900088a2:	4a6c      	ldr	r2, [pc, #432]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900088a4:	430b      	orrs	r3, r1
900088a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
900088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
900088b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
900088b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
900088b8:	2300      	movs	r3, #0
900088ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
900088be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
900088c2:	460b      	mov	r3, r1
900088c4:	4313      	orrs	r3, r2
900088c6:	d03e      	beq.n	90008946 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
900088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
900088d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900088d4:	d022      	beq.n	9000891c <HAL_RCCEx_PeriphCLKConfig+0xf40>
900088d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900088da:	d81b      	bhi.n	90008914 <HAL_RCCEx_PeriphCLKConfig+0xf38>
900088dc:	2b00      	cmp	r3, #0
900088de:	d003      	beq.n	900088e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
900088e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900088e4:	d00b      	beq.n	900088fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
900088e6:	e015      	b.n	90008914 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088ec:	3308      	adds	r3, #8
900088ee:	2100      	movs	r1, #0
900088f0:	4618      	mov	r0, r3
900088f2:	f000 fd3b 	bl	9000936c <RCCEx_PLL2_Config>
900088f6:	4603      	mov	r3, r0
900088f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
900088fc:	e00f      	b.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008902:	3328      	adds	r3, #40	@ 0x28
90008904:	2102      	movs	r1, #2
90008906:	4618      	mov	r0, r3
90008908:	f000 fde2 	bl	900094d0 <RCCEx_PLL3_Config>
9000890c:	4603      	mov	r3, r0
9000890e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008912:	e004      	b.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008914:	2301      	movs	r3, #1
90008916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000891a:	e000      	b.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
9000891c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000891e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008922:	2b00      	cmp	r3, #0
90008924:	d10b      	bne.n	9000893e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008926:	4b4b      	ldr	r3, [pc, #300]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000892a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
9000892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008936:	4a47      	ldr	r2, [pc, #284]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008938:	430b      	orrs	r3, r1
9000893a:	6593      	str	r3, [r2, #88]	@ 0x58
9000893c:	e003      	b.n	90008946 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000893e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000894a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000894e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008952:	67bb      	str	r3, [r7, #120]	@ 0x78
90008954:	2300      	movs	r3, #0
90008956:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008958:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
9000895c:	460b      	mov	r3, r1
9000895e:	4313      	orrs	r3, r2
90008960:	d03b      	beq.n	900089da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000896a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000896e:	d01f      	beq.n	900089b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008974:	d818      	bhi.n	900089a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000897a:	d003      	beq.n	90008984 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
9000897c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008980:	d007      	beq.n	90008992 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008982:	e011      	b.n	900089a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008984:	4b33      	ldr	r3, [pc, #204]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008988:	4a32      	ldr	r2, [pc, #200]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000898a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000898e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008990:	e00f      	b.n	900089b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008996:	3328      	adds	r3, #40	@ 0x28
90008998:	2101      	movs	r1, #1
9000899a:	4618      	mov	r0, r3
9000899c:	f000 fd98 	bl	900094d0 <RCCEx_PLL3_Config>
900089a0:	4603      	mov	r3, r0
900089a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
900089a6:	e004      	b.n	900089b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089a8:	2301      	movs	r3, #1
900089aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089ae:	e000      	b.n	900089b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
900089b0:	bf00      	nop
    }

    if (ret == HAL_OK)
900089b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089b6:	2b00      	cmp	r3, #0
900089b8:	d10b      	bne.n	900089d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
900089ba:	4b26      	ldr	r3, [pc, #152]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900089be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900089ca:	4a22      	ldr	r2, [pc, #136]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089cc:	430b      	orrs	r3, r1
900089ce:	6553      	str	r3, [r2, #84]	@ 0x54
900089d0:	e003      	b.n	900089da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
900089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089de:	e9d3 2300 	ldrd	r2, r3, [r3]
900089e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
900089e6:	673b      	str	r3, [r7, #112]	@ 0x70
900089e8:	2300      	movs	r3, #0
900089ea:	677b      	str	r3, [r7, #116]	@ 0x74
900089ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
900089f0:	460b      	mov	r3, r1
900089f2:	4313      	orrs	r3, r2
900089f4:	d034      	beq.n	90008a60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
900089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900089fc:	2b00      	cmp	r3, #0
900089fe:	d003      	beq.n	90008a08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008a04:	d007      	beq.n	90008a16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008a06:	e011      	b.n	90008a2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008a08:	4b12      	ldr	r3, [pc, #72]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008a0c:	4a11      	ldr	r2, [pc, #68]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008a14:	e00e      	b.n	90008a34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a1a:	3308      	adds	r3, #8
90008a1c:	2102      	movs	r1, #2
90008a1e:	4618      	mov	r0, r3
90008a20:	f000 fca4 	bl	9000936c <RCCEx_PLL2_Config>
90008a24:	4603      	mov	r3, r0
90008a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008a2a:	e003      	b.n	90008a34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008a2c:	2301      	movs	r3, #1
90008a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a32:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a38:	2b00      	cmp	r3, #0
90008a3a:	d10d      	bne.n	90008a58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008a3c:	4b05      	ldr	r3, [pc, #20]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008a40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008a4a:	4a02      	ldr	r2, [pc, #8]	@ (90008a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a4c:	430b      	orrs	r3, r1
90008a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008a50:	e006      	b.n	90008a60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008a52:	bf00      	nop
90008a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
90008a6e:	2300      	movs	r3, #0
90008a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008a72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008a76:	460b      	mov	r3, r1
90008a78:	4313      	orrs	r3, r2
90008a7a:	d00c      	beq.n	90008a96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a80:	3328      	adds	r3, #40	@ 0x28
90008a82:	2102      	movs	r1, #2
90008a84:	4618      	mov	r0, r3
90008a86:	f000 fd23 	bl	900094d0 <RCCEx_PLL3_Config>
90008a8a:	4603      	mov	r3, r0
90008a8c:	2b00      	cmp	r3, #0
90008a8e:	d002      	beq.n	90008a96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008a90:	2301      	movs	r3, #1
90008a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008aa2:	663b      	str	r3, [r7, #96]	@ 0x60
90008aa4:	2300      	movs	r3, #0
90008aa6:	667b      	str	r3, [r7, #100]	@ 0x64
90008aa8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008aac:	460b      	mov	r3, r1
90008aae:	4313      	orrs	r3, r2
90008ab0:	d038      	beq.n	90008b24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008abe:	d018      	beq.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008ac4:	d811      	bhi.n	90008aea <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008aca:	d014      	beq.n	90008af6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008ad0:	d80b      	bhi.n	90008aea <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008ad2:	2b00      	cmp	r3, #0
90008ad4:	d011      	beq.n	90008afa <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008ada:	d106      	bne.n	90008aea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008adc:	4bc3      	ldr	r3, [pc, #780]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008ae0:	4ac2      	ldr	r2, [pc, #776]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008ae8:	e008      	b.n	90008afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008aea:	2301      	movs	r3, #1
90008aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008af0:	e004      	b.n	90008afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008af2:	bf00      	nop
90008af4:	e002      	b.n	90008afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008af6:	bf00      	nop
90008af8:	e000      	b.n	90008afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008afa:	bf00      	nop
    }

    if (ret == HAL_OK)
90008afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b00:	2b00      	cmp	r3, #0
90008b02:	d10b      	bne.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008b04:	4bb9      	ldr	r3, [pc, #740]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008b08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008b14:	4ab5      	ldr	r2, [pc, #724]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b16:	430b      	orrs	r3, r1
90008b18:	6553      	str	r3, [r2, #84]	@ 0x54
90008b1a:	e003      	b.n	90008b24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008b30:	65bb      	str	r3, [r7, #88]	@ 0x58
90008b32:	2300      	movs	r3, #0
90008b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008b36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008b3a:	460b      	mov	r3, r1
90008b3c:	4313      	orrs	r3, r2
90008b3e:	d009      	beq.n	90008b54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008b40:	4baa      	ldr	r3, [pc, #680]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008b44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008b4e:	4aa7      	ldr	r2, [pc, #668]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b50:	430b      	orrs	r3, r1
90008b52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008b60:	653b      	str	r3, [r7, #80]	@ 0x50
90008b62:	2300      	movs	r3, #0
90008b64:	657b      	str	r3, [r7, #84]	@ 0x54
90008b66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008b6a:	460b      	mov	r3, r1
90008b6c:	4313      	orrs	r3, r2
90008b6e:	d00a      	beq.n	90008b86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008b70:	4b9e      	ldr	r3, [pc, #632]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b72:	691b      	ldr	r3, [r3, #16]
90008b74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008b80:	4a9a      	ldr	r2, [pc, #616]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b82:	430b      	orrs	r3, r1
90008b84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008b92:	64bb      	str	r3, [r7, #72]	@ 0x48
90008b94:	2300      	movs	r3, #0
90008b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008b98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008b9c:	460b      	mov	r3, r1
90008b9e:	4313      	orrs	r3, r2
90008ba0:	d009      	beq.n	90008bb6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008ba2:	4b92      	ldr	r3, [pc, #584]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008ba6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008bb0:	4a8e      	ldr	r2, [pc, #568]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bb2:	430b      	orrs	r3, r1
90008bb4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008bc2:	643b      	str	r3, [r7, #64]	@ 0x40
90008bc4:	2300      	movs	r3, #0
90008bc6:	647b      	str	r3, [r7, #68]	@ 0x44
90008bc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008bcc:	460b      	mov	r3, r1
90008bce:	4313      	orrs	r3, r2
90008bd0:	d00e      	beq.n	90008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008bd2:	4b86      	ldr	r3, [pc, #536]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bd4:	691b      	ldr	r3, [r3, #16]
90008bd6:	4a85      	ldr	r2, [pc, #532]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008bdc:	6113      	str	r3, [r2, #16]
90008bde:	4b83      	ldr	r3, [pc, #524]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008be0:	6919      	ldr	r1, [r3, #16]
90008be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008be6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008bea:	4a80      	ldr	r2, [pc, #512]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bec:	430b      	orrs	r3, r1
90008bee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bf8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
90008bfe:	2300      	movs	r3, #0
90008c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008c02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008c06:	460b      	mov	r3, r1
90008c08:	4313      	orrs	r3, r2
90008c0a:	d009      	beq.n	90008c20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008c0c:	4b77      	ldr	r3, [pc, #476]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008c10:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c1a:	4a74      	ldr	r2, [pc, #464]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c1c:	430b      	orrs	r3, r1
90008c1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c28:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008c2c:	633b      	str	r3, [r7, #48]	@ 0x30
90008c2e:	2300      	movs	r3, #0
90008c30:	637b      	str	r3, [r7, #52]	@ 0x34
90008c32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008c36:	460b      	mov	r3, r1
90008c38:	4313      	orrs	r3, r2
90008c3a:	d00a      	beq.n	90008c52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008c3c:	4b6b      	ldr	r3, [pc, #428]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c40:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008c4c:	4a67      	ldr	r2, [pc, #412]	@ (90008dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c4e:	430b      	orrs	r3, r1
90008c50:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c5a:	2100      	movs	r1, #0
90008c5c:	62b9      	str	r1, [r7, #40]	@ 0x28
90008c5e:	f003 0301 	and.w	r3, r3, #1
90008c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008c64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008c68:	460b      	mov	r3, r1
90008c6a:	4313      	orrs	r3, r2
90008c6c:	d011      	beq.n	90008c92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c72:	3308      	adds	r3, #8
90008c74:	2100      	movs	r1, #0
90008c76:	4618      	mov	r0, r3
90008c78:	f000 fb78 	bl	9000936c <RCCEx_PLL2_Config>
90008c7c:	4603      	mov	r3, r0
90008c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c86:	2b00      	cmp	r3, #0
90008c88:	d003      	beq.n	90008c92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c9a:	2100      	movs	r1, #0
90008c9c:	6239      	str	r1, [r7, #32]
90008c9e:	f003 0302 	and.w	r3, r3, #2
90008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
90008ca4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008ca8:	460b      	mov	r3, r1
90008caa:	4313      	orrs	r3, r2
90008cac:	d011      	beq.n	90008cd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cb2:	3308      	adds	r3, #8
90008cb4:	2101      	movs	r1, #1
90008cb6:	4618      	mov	r0, r3
90008cb8:	f000 fb58 	bl	9000936c <RCCEx_PLL2_Config>
90008cbc:	4603      	mov	r3, r0
90008cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008cc6:	2b00      	cmp	r3, #0
90008cc8:	d003      	beq.n	90008cd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cda:	2100      	movs	r1, #0
90008cdc:	61b9      	str	r1, [r7, #24]
90008cde:	f003 0304 	and.w	r3, r3, #4
90008ce2:	61fb      	str	r3, [r7, #28]
90008ce4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008ce8:	460b      	mov	r3, r1
90008cea:	4313      	orrs	r3, r2
90008cec:	d011      	beq.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cf2:	3308      	adds	r3, #8
90008cf4:	2102      	movs	r1, #2
90008cf6:	4618      	mov	r0, r3
90008cf8:	f000 fb38 	bl	9000936c <RCCEx_PLL2_Config>
90008cfc:	4603      	mov	r3, r0
90008cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d06:	2b00      	cmp	r3, #0
90008d08:	d003      	beq.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d1a:	2100      	movs	r1, #0
90008d1c:	6139      	str	r1, [r7, #16]
90008d1e:	f003 0308 	and.w	r3, r3, #8
90008d22:	617b      	str	r3, [r7, #20]
90008d24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008d28:	460b      	mov	r3, r1
90008d2a:	4313      	orrs	r3, r2
90008d2c:	d011      	beq.n	90008d52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d32:	3328      	adds	r3, #40	@ 0x28
90008d34:	2100      	movs	r1, #0
90008d36:	4618      	mov	r0, r3
90008d38:	f000 fbca 	bl	900094d0 <RCCEx_PLL3_Config>
90008d3c:	4603      	mov	r3, r0
90008d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d46:	2b00      	cmp	r3, #0
90008d48:	d003      	beq.n	90008d52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d5a:	2100      	movs	r1, #0
90008d5c:	60b9      	str	r1, [r7, #8]
90008d5e:	f003 0310 	and.w	r3, r3, #16
90008d62:	60fb      	str	r3, [r7, #12]
90008d64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008d68:	460b      	mov	r3, r1
90008d6a:	4313      	orrs	r3, r2
90008d6c:	d011      	beq.n	90008d92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d72:	3328      	adds	r3, #40	@ 0x28
90008d74:	2101      	movs	r1, #1
90008d76:	4618      	mov	r0, r3
90008d78:	f000 fbaa 	bl	900094d0 <RCCEx_PLL3_Config>
90008d7c:	4603      	mov	r3, r0
90008d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d86:	2b00      	cmp	r3, #0
90008d88:	d003      	beq.n	90008d92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d9a:	2100      	movs	r1, #0
90008d9c:	6039      	str	r1, [r7, #0]
90008d9e:	f003 0320 	and.w	r3, r3, #32
90008da2:	607b      	str	r3, [r7, #4]
90008da4:	e9d7 1200 	ldrd	r1, r2, [r7]
90008da8:	460b      	mov	r3, r1
90008daa:	4313      	orrs	r3, r2
90008dac:	d011      	beq.n	90008dd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008db2:	3328      	adds	r3, #40	@ 0x28
90008db4:	2102      	movs	r1, #2
90008db6:	4618      	mov	r0, r3
90008db8:	f000 fb8a 	bl	900094d0 <RCCEx_PLL3_Config>
90008dbc:	4603      	mov	r3, r0
90008dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dc6:	2b00      	cmp	r3, #0
90008dc8:	d003      	beq.n	90008dd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008dd2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008dd6:	2b00      	cmp	r3, #0
90008dd8:	d101      	bne.n	90008dde <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008dda:	2300      	movs	r3, #0
90008ddc:	e000      	b.n	90008de0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008dde:	2301      	movs	r3, #1
}
90008de0:	4618      	mov	r0, r3
90008de2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90008de6:	46bd      	mov	sp, r7
90008de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008dec:	58024400 	.word	0x58024400

90008df0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90008df0:	b580      	push	{r7, lr}
90008df2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90008df4:	f7fe fd96 	bl	90007924 <HAL_RCC_GetHCLKFreq>
90008df8:	4602      	mov	r2, r0
90008dfa:	4b06      	ldr	r3, [pc, #24]	@ (90008e14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90008dfc:	6a1b      	ldr	r3, [r3, #32]
90008dfe:	091b      	lsrs	r3, r3, #4
90008e00:	f003 0307 	and.w	r3, r3, #7
90008e04:	4904      	ldr	r1, [pc, #16]	@ (90008e18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90008e06:	5ccb      	ldrb	r3, [r1, r3]
90008e08:	f003 031f 	and.w	r3, r3, #31
90008e0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90008e10:	4618      	mov	r0, r3
90008e12:	bd80      	pop	{r7, pc}
90008e14:	58024400 	.word	0x58024400
90008e18:	9000cdc4 	.word	0x9000cdc4

90008e1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90008e1c:	b480      	push	{r7}
90008e1e:	b089      	sub	sp, #36	@ 0x24
90008e20:	af00      	add	r7, sp, #0
90008e22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008e24:	4ba1      	ldr	r3, [pc, #644]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008e28:	f003 0303 	and.w	r3, r3, #3
90008e2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90008e2e:	4b9f      	ldr	r3, [pc, #636]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008e32:	0b1b      	lsrs	r3, r3, #12
90008e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90008e38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90008e3a:	4b9c      	ldr	r3, [pc, #624]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008e3e:	091b      	lsrs	r3, r3, #4
90008e40:	f003 0301 	and.w	r3, r3, #1
90008e44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90008e46:	4b99      	ldr	r3, [pc, #612]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90008e4a:	08db      	lsrs	r3, r3, #3
90008e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008e50:	693a      	ldr	r2, [r7, #16]
90008e52:	fb02 f303 	mul.w	r3, r2, r3
90008e56:	ee07 3a90 	vmov	s15, r3
90008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008e5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90008e62:	697b      	ldr	r3, [r7, #20]
90008e64:	2b00      	cmp	r3, #0
90008e66:	f000 8111 	beq.w	9000908c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90008e6a:	69bb      	ldr	r3, [r7, #24]
90008e6c:	2b02      	cmp	r3, #2
90008e6e:	f000 8083 	beq.w	90008f78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90008e72:	69bb      	ldr	r3, [r7, #24]
90008e74:	2b02      	cmp	r3, #2
90008e76:	f200 80a1 	bhi.w	90008fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90008e7a:	69bb      	ldr	r3, [r7, #24]
90008e7c:	2b00      	cmp	r3, #0
90008e7e:	d003      	beq.n	90008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90008e80:	69bb      	ldr	r3, [r7, #24]
90008e82:	2b01      	cmp	r3, #1
90008e84:	d056      	beq.n	90008f34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90008e86:	e099      	b.n	90008fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008e88:	4b88      	ldr	r3, [pc, #544]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e8a:	681b      	ldr	r3, [r3, #0]
90008e8c:	f003 0320 	and.w	r3, r3, #32
90008e90:	2b00      	cmp	r3, #0
90008e92:	d02d      	beq.n	90008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90008e94:	4b85      	ldr	r3, [pc, #532]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e96:	681b      	ldr	r3, [r3, #0]
90008e98:	08db      	lsrs	r3, r3, #3
90008e9a:	f003 0303 	and.w	r3, r3, #3
90008e9e:	4a84      	ldr	r2, [pc, #528]	@ (900090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90008ea0:	fa22 f303 	lsr.w	r3, r2, r3
90008ea4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008ea6:	68bb      	ldr	r3, [r7, #8]
90008ea8:	ee07 3a90 	vmov	s15, r3
90008eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008eb0:	697b      	ldr	r3, [r7, #20]
90008eb2:	ee07 3a90 	vmov	s15, r3
90008eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008ebe:	4b7b      	ldr	r3, [pc, #492]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008ec6:	ee07 3a90 	vmov	s15, r3
90008eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008ece:	ed97 6a03 	vldr	s12, [r7, #12]
90008ed2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
90008eea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90008eee:	e087      	b.n	90009000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008ef0:	697b      	ldr	r3, [r7, #20]
90008ef2:	ee07 3a90 	vmov	s15, r3
90008ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008efa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900090b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90008efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f02:	4b6a      	ldr	r3, [pc, #424]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f0a:	ee07 3a90 	vmov	s15, r3
90008f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f12:	ed97 6a03 	vldr	s12, [r7, #12]
90008f16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f32:	e065      	b.n	90009000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008f34:	697b      	ldr	r3, [r7, #20]
90008f36:	ee07 3a90 	vmov	s15, r3
90008f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900090bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90008f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f46:	4b59      	ldr	r3, [pc, #356]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f4e:	ee07 3a90 	vmov	s15, r3
90008f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f56:	ed97 6a03 	vldr	s12, [r7, #12]
90008f5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f76:	e043      	b.n	90009000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008f78:	697b      	ldr	r3, [r7, #20]
90008f7a:	ee07 3a90 	vmov	s15, r3
90008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900090c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90008f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f8a:	4b48      	ldr	r3, [pc, #288]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f92:	ee07 3a90 	vmov	s15, r3
90008f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f9a:	ed97 6a03 	vldr	s12, [r7, #12]
90008f9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
90008fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008fba:	e021      	b.n	90009000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008fbc:	697b      	ldr	r3, [r7, #20]
90008fbe:	ee07 3a90 	vmov	s15, r3
90008fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008fc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900090bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90008fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008fce:	4b37      	ldr	r3, [pc, #220]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008fd6:	ee07 3a90 	vmov	s15, r3
90008fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008fde:	ed97 6a03 	vldr	s12, [r7, #12]
90008fe2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
90008ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008ffe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90009000:	4b2a      	ldr	r3, [pc, #168]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009004:	0a5b      	lsrs	r3, r3, #9
90009006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000900a:	ee07 3a90 	vmov	s15, r3
9000900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009016:	ee37 7a87 	vadd.f32	s14, s15, s14
9000901a:	edd7 6a07 	vldr	s13, [r7, #28]
9000901e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009026:	ee17 2a90 	vmov	r2, s15
9000902a:	687b      	ldr	r3, [r7, #4]
9000902c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000902e:	4b1f      	ldr	r3, [pc, #124]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009032:	0c1b      	lsrs	r3, r3, #16
90009034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009038:	ee07 3a90 	vmov	s15, r3
9000903c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009040:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009044:	ee37 7a87 	vadd.f32	s14, s15, s14
90009048:	edd7 6a07 	vldr	s13, [r7, #28]
9000904c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009054:	ee17 2a90 	vmov	r2, s15
90009058:	687b      	ldr	r3, [r7, #4]
9000905a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000905c:	4b13      	ldr	r3, [pc, #76]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000905e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009060:	0e1b      	lsrs	r3, r3, #24
90009062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009066:	ee07 3a90 	vmov	s15, r3
9000906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000906e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009072:	ee37 7a87 	vadd.f32	s14, s15, s14
90009076:	edd7 6a07 	vldr	s13, [r7, #28]
9000907a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000907e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009082:	ee17 2a90 	vmov	r2, s15
90009086:	687b      	ldr	r3, [r7, #4]
90009088:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
9000908a:	e008      	b.n	9000909e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
9000908c:	687b      	ldr	r3, [r7, #4]
9000908e:	2200      	movs	r2, #0
90009090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90009092:	687b      	ldr	r3, [r7, #4]
90009094:	2200      	movs	r2, #0
90009096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009098:	687b      	ldr	r3, [r7, #4]
9000909a:	2200      	movs	r2, #0
9000909c:	609a      	str	r2, [r3, #8]
}
9000909e:	bf00      	nop
900090a0:	3724      	adds	r7, #36	@ 0x24
900090a2:	46bd      	mov	sp, r7
900090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900090a8:	4770      	bx	lr
900090aa:	bf00      	nop
900090ac:	58024400 	.word	0x58024400
900090b0:	03d09000 	.word	0x03d09000
900090b4:	46000000 	.word	0x46000000
900090b8:	4c742400 	.word	0x4c742400
900090bc:	4a742400 	.word	0x4a742400
900090c0:	4bbebc20 	.word	0x4bbebc20

900090c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
900090c4:	b480      	push	{r7}
900090c6:	b089      	sub	sp, #36	@ 0x24
900090c8:	af00      	add	r7, sp, #0
900090ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900090cc:	4ba1      	ldr	r3, [pc, #644]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900090d0:	f003 0303 	and.w	r3, r3, #3
900090d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
900090d6:	4b9f      	ldr	r3, [pc, #636]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900090da:	0d1b      	lsrs	r3, r3, #20
900090dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900090e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
900090e2:	4b9c      	ldr	r3, [pc, #624]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900090e6:	0a1b      	lsrs	r3, r3, #8
900090e8:	f003 0301 	and.w	r3, r3, #1
900090ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
900090ee:	4b99      	ldr	r3, [pc, #612]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900090f2:	08db      	lsrs	r3, r3, #3
900090f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
900090f8:	693a      	ldr	r2, [r7, #16]
900090fa:	fb02 f303 	mul.w	r3, r2, r3
900090fe:	ee07 3a90 	vmov	s15, r3
90009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
9000910a:	697b      	ldr	r3, [r7, #20]
9000910c:	2b00      	cmp	r3, #0
9000910e:	f000 8111 	beq.w	90009334 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90009112:	69bb      	ldr	r3, [r7, #24]
90009114:	2b02      	cmp	r3, #2
90009116:	f000 8083 	beq.w	90009220 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
9000911a:	69bb      	ldr	r3, [r7, #24]
9000911c:	2b02      	cmp	r3, #2
9000911e:	f200 80a1 	bhi.w	90009264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90009122:	69bb      	ldr	r3, [r7, #24]
90009124:	2b00      	cmp	r3, #0
90009126:	d003      	beq.n	90009130 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009128:	69bb      	ldr	r3, [r7, #24]
9000912a:	2b01      	cmp	r3, #1
9000912c:	d056      	beq.n	900091dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
9000912e:	e099      	b.n	90009264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009130:	4b88      	ldr	r3, [pc, #544]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009132:	681b      	ldr	r3, [r3, #0]
90009134:	f003 0320 	and.w	r3, r3, #32
90009138:	2b00      	cmp	r3, #0
9000913a:	d02d      	beq.n	90009198 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000913c:	4b85      	ldr	r3, [pc, #532]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000913e:	681b      	ldr	r3, [r3, #0]
90009140:	08db      	lsrs	r3, r3, #3
90009142:	f003 0303 	and.w	r3, r3, #3
90009146:	4a84      	ldr	r2, [pc, #528]	@ (90009358 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90009148:	fa22 f303 	lsr.w	r3, r2, r3
9000914c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000914e:	68bb      	ldr	r3, [r7, #8]
90009150:	ee07 3a90 	vmov	s15, r3
90009154:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009158:	697b      	ldr	r3, [r7, #20]
9000915a:	ee07 3a90 	vmov	s15, r3
9000915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009166:	4b7b      	ldr	r3, [pc, #492]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000916e:	ee07 3a90 	vmov	s15, r3
90009172:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009176:	ed97 6a03 	vldr	s12, [r7, #12]
9000917a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 9000935c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000917e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009182:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000918a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000918e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009192:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009196:	e087      	b.n	900092a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009198:	697b      	ldr	r3, [r7, #20]
9000919a:	ee07 3a90 	vmov	s15, r3
9000919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009360 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091aa:	4b6a      	ldr	r3, [pc, #424]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900091ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900091ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091b2:	ee07 3a90 	vmov	s15, r3
900091b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091ba:	ed97 6a03 	vldr	s12, [r7, #12]
900091be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 9000935c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900091c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900091c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900091ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900091ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
900091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
900091d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900091da:	e065      	b.n	900092a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900091dc:	697b      	ldr	r3, [r7, #20]
900091de:	ee07 3a90 	vmov	s15, r3
900091e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
900091ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091ee:	4b59      	ldr	r3, [pc, #356]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900091f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900091f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091f6:	ee07 3a90 	vmov	s15, r3
900091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091fe:	ed97 6a03 	vldr	s12, [r7, #12]
90009202:	eddf 5a56 	vldr	s11, [pc, #344]	@ 9000935c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009206:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000920a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000920e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009212:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009216:	ee67 7a27 	vmul.f32	s15, s14, s15
9000921a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000921e:	e043      	b.n	900092a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009220:	697b      	ldr	r3, [r7, #20]
90009222:	ee07 3a90 	vmov	s15, r3
90009226:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000922a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
9000922e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009232:	4b48      	ldr	r3, [pc, #288]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009236:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000923a:	ee07 3a90 	vmov	s15, r3
9000923e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009242:	ed97 6a03 	vldr	s12, [r7, #12]
90009246:	eddf 5a45 	vldr	s11, [pc, #276]	@ 9000935c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000924a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000924e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009256:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000925a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000925e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009262:	e021      	b.n	900092a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009264:	697b      	ldr	r3, [r7, #20]
90009266:	ee07 3a90 	vmov	s15, r3
9000926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000926e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009276:	4b37      	ldr	r3, [pc, #220]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000927a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000927e:	ee07 3a90 	vmov	s15, r3
90009282:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009286:	ed97 6a03 	vldr	s12, [r7, #12]
9000928a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 9000935c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000928e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009292:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000929a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000929e:	ee67 7a27 	vmul.f32	s15, s14, s15
900092a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900092a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
900092a8:	4b2a      	ldr	r3, [pc, #168]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900092ac:	0a5b      	lsrs	r3, r3, #9
900092ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900092b2:	ee07 3a90 	vmov	s15, r3
900092b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900092be:	ee37 7a87 	vadd.f32	s14, s15, s14
900092c2:	edd7 6a07 	vldr	s13, [r7, #28]
900092c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
900092ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900092ce:	ee17 2a90 	vmov	r2, s15
900092d2:	687b      	ldr	r3, [r7, #4]
900092d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
900092d6:	4b1f      	ldr	r3, [pc, #124]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900092da:	0c1b      	lsrs	r3, r3, #16
900092dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900092e0:	ee07 3a90 	vmov	s15, r3
900092e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900092ec:	ee37 7a87 	vadd.f32	s14, s15, s14
900092f0:	edd7 6a07 	vldr	s13, [r7, #28]
900092f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
900092f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900092fc:	ee17 2a90 	vmov	r2, s15
90009300:	687b      	ldr	r3, [r7, #4]
90009302:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009304:	4b13      	ldr	r3, [pc, #76]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009308:	0e1b      	lsrs	r3, r3, #24
9000930a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000930e:	ee07 3a90 	vmov	s15, r3
90009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000931a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000931e:	edd7 6a07 	vldr	s13, [r7, #28]
90009322:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000932a:	ee17 2a90 	vmov	r2, s15
9000932e:	687b      	ldr	r3, [r7, #4]
90009330:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90009332:	e008      	b.n	90009346 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90009334:	687b      	ldr	r3, [r7, #4]
90009336:	2200      	movs	r2, #0
90009338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000933a:	687b      	ldr	r3, [r7, #4]
9000933c:	2200      	movs	r2, #0
9000933e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90009340:	687b      	ldr	r3, [r7, #4]
90009342:	2200      	movs	r2, #0
90009344:	609a      	str	r2, [r3, #8]
}
90009346:	bf00      	nop
90009348:	3724      	adds	r7, #36	@ 0x24
9000934a:	46bd      	mov	sp, r7
9000934c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009350:	4770      	bx	lr
90009352:	bf00      	nop
90009354:	58024400 	.word	0x58024400
90009358:	03d09000 	.word	0x03d09000
9000935c:	46000000 	.word	0x46000000
90009360:	4c742400 	.word	0x4c742400
90009364:	4a742400 	.word	0x4a742400
90009368:	4bbebc20 	.word	0x4bbebc20

9000936c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000936c:	b580      	push	{r7, lr}
9000936e:	b084      	sub	sp, #16
90009370:	af00      	add	r7, sp, #0
90009372:	6078      	str	r0, [r7, #4]
90009374:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009376:	2300      	movs	r3, #0
90009378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000937a:	4b53      	ldr	r3, [pc, #332]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
9000937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000937e:	f003 0303 	and.w	r3, r3, #3
90009382:	2b03      	cmp	r3, #3
90009384:	d101      	bne.n	9000938a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90009386:	2301      	movs	r3, #1
90009388:	e099      	b.n	900094be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000938a:	4b4f      	ldr	r3, [pc, #316]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
9000938c:	681b      	ldr	r3, [r3, #0]
9000938e:	4a4e      	ldr	r2, [pc, #312]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009390:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009396:	f7f9 fe93 	bl	900030c0 <HAL_GetTick>
9000939a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000939c:	e008      	b.n	900093b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000939e:	f7f9 fe8f 	bl	900030c0 <HAL_GetTick>
900093a2:	4602      	mov	r2, r0
900093a4:	68bb      	ldr	r3, [r7, #8]
900093a6:	1ad3      	subs	r3, r2, r3
900093a8:	2b02      	cmp	r3, #2
900093aa:	d901      	bls.n	900093b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
900093ac:	2303      	movs	r3, #3
900093ae:	e086      	b.n	900094be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900093b0:	4b45      	ldr	r3, [pc, #276]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
900093b2:	681b      	ldr	r3, [r3, #0]
900093b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900093b8:	2b00      	cmp	r3, #0
900093ba:	d1f0      	bne.n	9000939e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
900093bc:	4b42      	ldr	r3, [pc, #264]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
900093be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900093c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900093c4:	687b      	ldr	r3, [r7, #4]
900093c6:	681b      	ldr	r3, [r3, #0]
900093c8:	031b      	lsls	r3, r3, #12
900093ca:	493f      	ldr	r1, [pc, #252]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
900093cc:	4313      	orrs	r3, r2
900093ce:	628b      	str	r3, [r1, #40]	@ 0x28
900093d0:	687b      	ldr	r3, [r7, #4]
900093d2:	685b      	ldr	r3, [r3, #4]
900093d4:	3b01      	subs	r3, #1
900093d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
900093da:	687b      	ldr	r3, [r7, #4]
900093dc:	689b      	ldr	r3, [r3, #8]
900093de:	3b01      	subs	r3, #1
900093e0:	025b      	lsls	r3, r3, #9
900093e2:	b29b      	uxth	r3, r3
900093e4:	431a      	orrs	r2, r3
900093e6:	687b      	ldr	r3, [r7, #4]
900093e8:	68db      	ldr	r3, [r3, #12]
900093ea:	3b01      	subs	r3, #1
900093ec:	041b      	lsls	r3, r3, #16
900093ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900093f2:	431a      	orrs	r2, r3
900093f4:	687b      	ldr	r3, [r7, #4]
900093f6:	691b      	ldr	r3, [r3, #16]
900093f8:	3b01      	subs	r3, #1
900093fa:	061b      	lsls	r3, r3, #24
900093fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009400:	4931      	ldr	r1, [pc, #196]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009402:	4313      	orrs	r3, r2
90009404:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009406:	4b30      	ldr	r3, [pc, #192]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000940a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000940e:	687b      	ldr	r3, [r7, #4]
90009410:	695b      	ldr	r3, [r3, #20]
90009412:	492d      	ldr	r1, [pc, #180]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009414:	4313      	orrs	r3, r2
90009416:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009418:	4b2b      	ldr	r3, [pc, #172]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
9000941a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000941c:	f023 0220 	bic.w	r2, r3, #32
90009420:	687b      	ldr	r3, [r7, #4]
90009422:	699b      	ldr	r3, [r3, #24]
90009424:	4928      	ldr	r1, [pc, #160]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009426:	4313      	orrs	r3, r2
90009428:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
9000942a:	4b27      	ldr	r3, [pc, #156]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
9000942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000942e:	4a26      	ldr	r2, [pc, #152]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009430:	f023 0310 	bic.w	r3, r3, #16
90009434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90009436:	4b24      	ldr	r3, [pc, #144]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000943a:	4b24      	ldr	r3, [pc, #144]	@ (900094cc <RCCEx_PLL2_Config+0x160>)
9000943c:	4013      	ands	r3, r2
9000943e:	687a      	ldr	r2, [r7, #4]
90009440:	69d2      	ldr	r2, [r2, #28]
90009442:	00d2      	lsls	r2, r2, #3
90009444:	4920      	ldr	r1, [pc, #128]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009446:	4313      	orrs	r3, r2
90009448:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000944a:	4b1f      	ldr	r3, [pc, #124]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
9000944c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000944e:	4a1e      	ldr	r2, [pc, #120]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009450:	f043 0310 	orr.w	r3, r3, #16
90009454:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009456:	683b      	ldr	r3, [r7, #0]
90009458:	2b00      	cmp	r3, #0
9000945a:	d106      	bne.n	9000946a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000945c:	4b1a      	ldr	r3, [pc, #104]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
9000945e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009460:	4a19      	ldr	r2, [pc, #100]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009462:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
90009466:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009468:	e00f      	b.n	9000948a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000946a:	683b      	ldr	r3, [r7, #0]
9000946c:	2b01      	cmp	r3, #1
9000946e:	d106      	bne.n	9000947e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90009470:	4b15      	ldr	r3, [pc, #84]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009474:	4a14      	ldr	r2, [pc, #80]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000947a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000947c:	e005      	b.n	9000948a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000947e:	4b12      	ldr	r3, [pc, #72]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009482:	4a11      	ldr	r2, [pc, #68]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
90009488:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000948a:	4b0f      	ldr	r3, [pc, #60]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
9000948c:	681b      	ldr	r3, [r3, #0]
9000948e:	4a0e      	ldr	r2, [pc, #56]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
90009490:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009496:	f7f9 fe13 	bl	900030c0 <HAL_GetTick>
9000949a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000949c:	e008      	b.n	900094b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000949e:	f7f9 fe0f 	bl	900030c0 <HAL_GetTick>
900094a2:	4602      	mov	r2, r0
900094a4:	68bb      	ldr	r3, [r7, #8]
900094a6:	1ad3      	subs	r3, r2, r3
900094a8:	2b02      	cmp	r3, #2
900094aa:	d901      	bls.n	900094b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
900094ac:	2303      	movs	r3, #3
900094ae:	e006      	b.n	900094be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900094b0:	4b05      	ldr	r3, [pc, #20]	@ (900094c8 <RCCEx_PLL2_Config+0x15c>)
900094b2:	681b      	ldr	r3, [r3, #0]
900094b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900094b8:	2b00      	cmp	r3, #0
900094ba:	d0f0      	beq.n	9000949e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
900094bc:	7bfb      	ldrb	r3, [r7, #15]
}
900094be:	4618      	mov	r0, r3
900094c0:	3710      	adds	r7, #16
900094c2:	46bd      	mov	sp, r7
900094c4:	bd80      	pop	{r7, pc}
900094c6:	bf00      	nop
900094c8:	58024400 	.word	0x58024400
900094cc:	ffff0007 	.word	0xffff0007

900094d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
900094d0:	b580      	push	{r7, lr}
900094d2:	b084      	sub	sp, #16
900094d4:	af00      	add	r7, sp, #0
900094d6:	6078      	str	r0, [r7, #4]
900094d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900094da:	2300      	movs	r3, #0
900094dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900094de:	4b53      	ldr	r3, [pc, #332]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900094e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900094e2:	f003 0303 	and.w	r3, r3, #3
900094e6:	2b03      	cmp	r3, #3
900094e8:	d101      	bne.n	900094ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
900094ea:	2301      	movs	r3, #1
900094ec:	e099      	b.n	90009622 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
900094ee:	4b4f      	ldr	r3, [pc, #316]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900094f0:	681b      	ldr	r3, [r3, #0]
900094f2:	4a4e      	ldr	r2, [pc, #312]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900094f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
900094f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900094fa:	f7f9 fde1 	bl	900030c0 <HAL_GetTick>
900094fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009500:	e008      	b.n	90009514 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009502:	f7f9 fddd 	bl	900030c0 <HAL_GetTick>
90009506:	4602      	mov	r2, r0
90009508:	68bb      	ldr	r3, [r7, #8]
9000950a:	1ad3      	subs	r3, r2, r3
9000950c:	2b02      	cmp	r3, #2
9000950e:	d901      	bls.n	90009514 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90009510:	2303      	movs	r3, #3
90009512:	e086      	b.n	90009622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009514:	4b45      	ldr	r3, [pc, #276]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009516:	681b      	ldr	r3, [r3, #0]
90009518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000951c:	2b00      	cmp	r3, #0
9000951e:	d1f0      	bne.n	90009502 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90009520:	4b42      	ldr	r3, [pc, #264]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009524:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90009528:	687b      	ldr	r3, [r7, #4]
9000952a:	681b      	ldr	r3, [r3, #0]
9000952c:	051b      	lsls	r3, r3, #20
9000952e:	493f      	ldr	r1, [pc, #252]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009530:	4313      	orrs	r3, r2
90009532:	628b      	str	r3, [r1, #40]	@ 0x28
90009534:	687b      	ldr	r3, [r7, #4]
90009536:	685b      	ldr	r3, [r3, #4]
90009538:	3b01      	subs	r3, #1
9000953a:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000953e:	687b      	ldr	r3, [r7, #4]
90009540:	689b      	ldr	r3, [r3, #8]
90009542:	3b01      	subs	r3, #1
90009544:	025b      	lsls	r3, r3, #9
90009546:	b29b      	uxth	r3, r3
90009548:	431a      	orrs	r2, r3
9000954a:	687b      	ldr	r3, [r7, #4]
9000954c:	68db      	ldr	r3, [r3, #12]
9000954e:	3b01      	subs	r3, #1
90009550:	041b      	lsls	r3, r3, #16
90009552:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009556:	431a      	orrs	r2, r3
90009558:	687b      	ldr	r3, [r7, #4]
9000955a:	691b      	ldr	r3, [r3, #16]
9000955c:	3b01      	subs	r3, #1
9000955e:	061b      	lsls	r3, r3, #24
90009560:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009564:	4931      	ldr	r1, [pc, #196]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009566:	4313      	orrs	r3, r2
90009568:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000956a:	4b30      	ldr	r3, [pc, #192]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
9000956c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000956e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
90009572:	687b      	ldr	r3, [r7, #4]
90009574:	695b      	ldr	r3, [r3, #20]
90009576:	492d      	ldr	r1, [pc, #180]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009578:	4313      	orrs	r3, r2
9000957a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000957c:	4b2b      	ldr	r3, [pc, #172]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
9000957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009580:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90009584:	687b      	ldr	r3, [r7, #4]
90009586:	699b      	ldr	r3, [r3, #24]
90009588:	4928      	ldr	r1, [pc, #160]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
9000958a:	4313      	orrs	r3, r2
9000958c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000958e:	4b27      	ldr	r3, [pc, #156]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009592:	4a26      	ldr	r2, [pc, #152]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90009598:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000959a:	4b24      	ldr	r3, [pc, #144]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
9000959c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000959e:	4b24      	ldr	r3, [pc, #144]	@ (90009630 <RCCEx_PLL3_Config+0x160>)
900095a0:	4013      	ands	r3, r2
900095a2:	687a      	ldr	r2, [r7, #4]
900095a4:	69d2      	ldr	r2, [r2, #28]
900095a6:	00d2      	lsls	r2, r2, #3
900095a8:	4920      	ldr	r1, [pc, #128]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095aa:	4313      	orrs	r3, r2
900095ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
900095ae:	4b1f      	ldr	r3, [pc, #124]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095b2:	4a1e      	ldr	r2, [pc, #120]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900095b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900095ba:	683b      	ldr	r3, [r7, #0]
900095bc:	2b00      	cmp	r3, #0
900095be:	d106      	bne.n	900095ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
900095c0:	4b1a      	ldr	r3, [pc, #104]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095c4:	4a19      	ldr	r2, [pc, #100]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
900095ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095cc:	e00f      	b.n	900095ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900095ce:	683b      	ldr	r3, [r7, #0]
900095d0:	2b01      	cmp	r3, #1
900095d2:	d106      	bne.n	900095e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
900095d4:	4b15      	ldr	r3, [pc, #84]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095d8:	4a14      	ldr	r2, [pc, #80]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
900095de:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095e0:	e005      	b.n	900095ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
900095e2:	4b12      	ldr	r3, [pc, #72]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095e6:	4a11      	ldr	r2, [pc, #68]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900095ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
900095ee:	4b0f      	ldr	r3, [pc, #60]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095f0:	681b      	ldr	r3, [r3, #0]
900095f2:	4a0e      	ldr	r2, [pc, #56]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
900095f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
900095f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900095fa:	f7f9 fd61 	bl	900030c0 <HAL_GetTick>
900095fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009600:	e008      	b.n	90009614 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009602:	f7f9 fd5d 	bl	900030c0 <HAL_GetTick>
90009606:	4602      	mov	r2, r0
90009608:	68bb      	ldr	r3, [r7, #8]
9000960a:	1ad3      	subs	r3, r2, r3
9000960c:	2b02      	cmp	r3, #2
9000960e:	d901      	bls.n	90009614 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90009610:	2303      	movs	r3, #3
90009612:	e006      	b.n	90009622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009614:	4b05      	ldr	r3, [pc, #20]	@ (9000962c <RCCEx_PLL3_Config+0x15c>)
90009616:	681b      	ldr	r3, [r3, #0]
90009618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000961c:	2b00      	cmp	r3, #0
9000961e:	d0f0      	beq.n	90009602 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90009620:	7bfb      	ldrb	r3, [r7, #15]
}
90009622:	4618      	mov	r0, r3
90009624:	3710      	adds	r7, #16
90009626:	46bd      	mov	sp, r7
90009628:	bd80      	pop	{r7, pc}
9000962a:	bf00      	nop
9000962c:	58024400 	.word	0x58024400
90009630:	ffff0007 	.word	0xffff0007

90009634 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009634:	b580      	push	{r7, lr}
90009636:	b082      	sub	sp, #8
90009638:	af00      	add	r7, sp, #0
9000963a:	6078      	str	r0, [r7, #4]
9000963c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000963e:	687b      	ldr	r3, [r7, #4]
90009640:	2b00      	cmp	r3, #0
90009642:	d101      	bne.n	90009648 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90009644:	2301      	movs	r3, #1
90009646:	e02b      	b.n	900096a0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
90009648:	687b      	ldr	r3, [r7, #4]
9000964a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000964e:	b2db      	uxtb	r3, r3
90009650:	2b00      	cmp	r3, #0
90009652:	d106      	bne.n	90009662 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90009654:	687b      	ldr	r3, [r7, #4]
90009656:	2200      	movs	r2, #0
90009658:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
9000965c:	6878      	ldr	r0, [r7, #4]
9000965e:	f000 f825 	bl	900096ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90009662:	687b      	ldr	r3, [r7, #4]
90009664:	2202      	movs	r2, #2
90009666:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000966a:	687b      	ldr	r3, [r7, #4]
9000966c:	681a      	ldr	r2, [r3, #0]
9000966e:	687b      	ldr	r3, [r7, #4]
90009670:	3304      	adds	r3, #4
90009672:	4619      	mov	r1, r3
90009674:	4610      	mov	r0, r2
90009676:	f001 fb51 	bl	9000ad1c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000967a:	687b      	ldr	r3, [r7, #4]
9000967c:	6818      	ldr	r0, [r3, #0]
9000967e:	687b      	ldr	r3, [r7, #4]
90009680:	685b      	ldr	r3, [r3, #4]
90009682:	461a      	mov	r2, r3
90009684:	6839      	ldr	r1, [r7, #0]
90009686:	f001 fba5 	bl	9000add4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000968a:	4b07      	ldr	r3, [pc, #28]	@ (900096a8 <HAL_SDRAM_Init+0x74>)
9000968c:	681b      	ldr	r3, [r3, #0]
9000968e:	4a06      	ldr	r2, [pc, #24]	@ (900096a8 <HAL_SDRAM_Init+0x74>)
90009690:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009694:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009696:	687b      	ldr	r3, [r7, #4]
90009698:	2201      	movs	r2, #1
9000969a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000969e:	2300      	movs	r3, #0
}
900096a0:	4618      	mov	r0, r3
900096a2:	3708      	adds	r7, #8
900096a4:	46bd      	mov	sp, r7
900096a6:	bd80      	pop	{r7, pc}
900096a8:	52004000 	.word	0x52004000

900096ac <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
900096ac:	b480      	push	{r7}
900096ae:	b083      	sub	sp, #12
900096b0:	af00      	add	r7, sp, #0
900096b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
900096b4:	bf00      	nop
900096b6:	370c      	adds	r7, #12
900096b8:	46bd      	mov	sp, r7
900096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
900096be:	4770      	bx	lr

900096c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
900096c0:	b580      	push	{r7, lr}
900096c2:	b086      	sub	sp, #24
900096c4:	af00      	add	r7, sp, #0
900096c6:	60f8      	str	r0, [r7, #12]
900096c8:	60b9      	str	r1, [r7, #8]
900096ca:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
900096cc:	68fb      	ldr	r3, [r7, #12]
900096ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900096d2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900096d4:	7dfb      	ldrb	r3, [r7, #23]
900096d6:	2b02      	cmp	r3, #2
900096d8:	d101      	bne.n	900096de <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
900096da:	2302      	movs	r3, #2
900096dc:	e021      	b.n	90009722 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
900096de:	7dfb      	ldrb	r3, [r7, #23]
900096e0:	2b01      	cmp	r3, #1
900096e2:	d002      	beq.n	900096ea <HAL_SDRAM_SendCommand+0x2a>
900096e4:	7dfb      	ldrb	r3, [r7, #23]
900096e6:	2b05      	cmp	r3, #5
900096e8:	d118      	bne.n	9000971c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900096ea:	68fb      	ldr	r3, [r7, #12]
900096ec:	2202      	movs	r2, #2
900096ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900096f2:	68fb      	ldr	r3, [r7, #12]
900096f4:	681b      	ldr	r3, [r3, #0]
900096f6:	687a      	ldr	r2, [r7, #4]
900096f8:	68b9      	ldr	r1, [r7, #8]
900096fa:	4618      	mov	r0, r3
900096fc:	f001 fbd4 	bl	9000aea8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009700:	68bb      	ldr	r3, [r7, #8]
90009702:	681b      	ldr	r3, [r3, #0]
90009704:	2b02      	cmp	r3, #2
90009706:	d104      	bne.n	90009712 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009708:	68fb      	ldr	r3, [r7, #12]
9000970a:	2205      	movs	r2, #5
9000970c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009710:	e006      	b.n	90009720 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
90009712:	68fb      	ldr	r3, [r7, #12]
90009714:	2201      	movs	r2, #1
90009716:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000971a:	e001      	b.n	90009720 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
9000971c:	2301      	movs	r3, #1
9000971e:	e000      	b.n	90009722 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90009720:	2300      	movs	r3, #0
}
90009722:	4618      	mov	r0, r3
90009724:	3718      	adds	r7, #24
90009726:	46bd      	mov	sp, r7
90009728:	bd80      	pop	{r7, pc}

9000972a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000972a:	b580      	push	{r7, lr}
9000972c:	b082      	sub	sp, #8
9000972e:	af00      	add	r7, sp, #0
90009730:	6078      	str	r0, [r7, #4]
90009732:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009734:	687b      	ldr	r3, [r7, #4]
90009736:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000973a:	b2db      	uxtb	r3, r3
9000973c:	2b02      	cmp	r3, #2
9000973e:	d101      	bne.n	90009744 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90009740:	2302      	movs	r3, #2
90009742:	e016      	b.n	90009772 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90009744:	687b      	ldr	r3, [r7, #4]
90009746:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000974a:	b2db      	uxtb	r3, r3
9000974c:	2b01      	cmp	r3, #1
9000974e:	d10f      	bne.n	90009770 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009750:	687b      	ldr	r3, [r7, #4]
90009752:	2202      	movs	r2, #2
90009754:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90009758:	687b      	ldr	r3, [r7, #4]
9000975a:	681b      	ldr	r3, [r3, #0]
9000975c:	6839      	ldr	r1, [r7, #0]
9000975e:	4618      	mov	r0, r3
90009760:	f001 fbc6 	bl	9000aef0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90009764:	687b      	ldr	r3, [r7, #4]
90009766:	2201      	movs	r2, #1
90009768:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
9000976c:	2300      	movs	r3, #0
9000976e:	e000      	b.n	90009772 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90009770:	2301      	movs	r3, #1
}
90009772:	4618      	mov	r0, r3
90009774:	3708      	adds	r7, #8
90009776:	46bd      	mov	sp, r7
90009778:	bd80      	pop	{r7, pc}

9000977a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
9000977a:	b580      	push	{r7, lr}
9000977c:	b082      	sub	sp, #8
9000977e:	af00      	add	r7, sp, #0
90009780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90009782:	687b      	ldr	r3, [r7, #4]
90009784:	2b00      	cmp	r3, #0
90009786:	d101      	bne.n	9000978c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
90009788:	2301      	movs	r3, #1
9000978a:	e049      	b.n	90009820 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
9000978c:	687b      	ldr	r3, [r7, #4]
9000978e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009792:	b2db      	uxtb	r3, r3
90009794:	2b00      	cmp	r3, #0
90009796:	d106      	bne.n	900097a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009798:	687b      	ldr	r3, [r7, #4]
9000979a:	2200      	movs	r2, #0
9000979c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
900097a0:	6878      	ldr	r0, [r7, #4]
900097a2:	f000 f89d 	bl	900098e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900097a6:	687b      	ldr	r3, [r7, #4]
900097a8:	2202      	movs	r2, #2
900097aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900097ae:	687b      	ldr	r3, [r7, #4]
900097b0:	681a      	ldr	r2, [r3, #0]
900097b2:	687b      	ldr	r3, [r7, #4]
900097b4:	3304      	adds	r3, #4
900097b6:	4619      	mov	r1, r3
900097b8:	4610      	mov	r0, r2
900097ba:	f000 f8a5 	bl	90009908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
900097be:	687b      	ldr	r3, [r7, #4]
900097c0:	2201      	movs	r2, #1
900097c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900097c6:	687b      	ldr	r3, [r7, #4]
900097c8:	2201      	movs	r2, #1
900097ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900097ce:	687b      	ldr	r3, [r7, #4]
900097d0:	2201      	movs	r2, #1
900097d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900097d6:	687b      	ldr	r3, [r7, #4]
900097d8:	2201      	movs	r2, #1
900097da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900097de:	687b      	ldr	r3, [r7, #4]
900097e0:	2201      	movs	r2, #1
900097e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
900097e6:	687b      	ldr	r3, [r7, #4]
900097e8:	2201      	movs	r2, #1
900097ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
900097ee:	687b      	ldr	r3, [r7, #4]
900097f0:	2201      	movs	r2, #1
900097f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900097f6:	687b      	ldr	r3, [r7, #4]
900097f8:	2201      	movs	r2, #1
900097fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
900097fe:	687b      	ldr	r3, [r7, #4]
90009800:	2201      	movs	r2, #1
90009802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009806:	687b      	ldr	r3, [r7, #4]
90009808:	2201      	movs	r2, #1
9000980a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000980e:	687b      	ldr	r3, [r7, #4]
90009810:	2201      	movs	r2, #1
90009812:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009816:	687b      	ldr	r3, [r7, #4]
90009818:	2201      	movs	r2, #1
9000981a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000981e:	2300      	movs	r3, #0
}
90009820:	4618      	mov	r0, r3
90009822:	3708      	adds	r7, #8
90009824:	46bd      	mov	sp, r7
90009826:	bd80      	pop	{r7, pc}

90009828 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009828:	b580      	push	{r7, lr}
9000982a:	b082      	sub	sp, #8
9000982c:	af00      	add	r7, sp, #0
9000982e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
90009830:	687b      	ldr	r3, [r7, #4]
90009832:	2202      	movs	r2, #2
90009834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009838:	687b      	ldr	r3, [r7, #4]
9000983a:	681b      	ldr	r3, [r3, #0]
9000983c:	6a1a      	ldr	r2, [r3, #32]
9000983e:	f241 1311 	movw	r3, #4369	@ 0x1111
90009842:	4013      	ands	r3, r2
90009844:	2b00      	cmp	r3, #0
90009846:	d10f      	bne.n	90009868 <HAL_TIM_PWM_DeInit+0x40>
90009848:	687b      	ldr	r3, [r7, #4]
9000984a:	681b      	ldr	r3, [r3, #0]
9000984c:	6a1a      	ldr	r2, [r3, #32]
9000984e:	f240 4344 	movw	r3, #1092	@ 0x444
90009852:	4013      	ands	r3, r2
90009854:	2b00      	cmp	r3, #0
90009856:	d107      	bne.n	90009868 <HAL_TIM_PWM_DeInit+0x40>
90009858:	687b      	ldr	r3, [r7, #4]
9000985a:	681b      	ldr	r3, [r3, #0]
9000985c:	681a      	ldr	r2, [r3, #0]
9000985e:	687b      	ldr	r3, [r7, #4]
90009860:	681b      	ldr	r3, [r3, #0]
90009862:	f022 0201 	bic.w	r2, r2, #1
90009866:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
90009868:	6878      	ldr	r0, [r7, #4]
9000986a:	f000 f843 	bl	900098f4 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
9000986e:	687b      	ldr	r3, [r7, #4]
90009870:	2200      	movs	r2, #0
90009872:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009876:	687b      	ldr	r3, [r7, #4]
90009878:	2200      	movs	r2, #0
9000987a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000987e:	687b      	ldr	r3, [r7, #4]
90009880:	2200      	movs	r2, #0
90009882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009886:	687b      	ldr	r3, [r7, #4]
90009888:	2200      	movs	r2, #0
9000988a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000988e:	687b      	ldr	r3, [r7, #4]
90009890:	2200      	movs	r2, #0
90009892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009896:	687b      	ldr	r3, [r7, #4]
90009898:	2200      	movs	r2, #0
9000989a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000989e:	687b      	ldr	r3, [r7, #4]
900098a0:	2200      	movs	r2, #0
900098a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900098a6:	687b      	ldr	r3, [r7, #4]
900098a8:	2200      	movs	r2, #0
900098aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
900098ae:	687b      	ldr	r3, [r7, #4]
900098b0:	2200      	movs	r2, #0
900098b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
900098b6:	687b      	ldr	r3, [r7, #4]
900098b8:	2200      	movs	r2, #0
900098ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
900098be:	687b      	ldr	r3, [r7, #4]
900098c0:	2200      	movs	r2, #0
900098c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
900098c6:	687b      	ldr	r3, [r7, #4]
900098c8:	2200      	movs	r2, #0
900098ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
900098ce:	687b      	ldr	r3, [r7, #4]
900098d0:	2200      	movs	r2, #0
900098d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900098d6:	2300      	movs	r3, #0
}
900098d8:	4618      	mov	r0, r3
900098da:	3708      	adds	r7, #8
900098dc:	46bd      	mov	sp, r7
900098de:	bd80      	pop	{r7, pc}

900098e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
900098e0:	b480      	push	{r7}
900098e2:	b083      	sub	sp, #12
900098e4:	af00      	add	r7, sp, #0
900098e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
900098e8:	bf00      	nop
900098ea:	370c      	adds	r7, #12
900098ec:	46bd      	mov	sp, r7
900098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900098f2:	4770      	bx	lr

900098f4 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
900098f4:	b480      	push	{r7}
900098f6:	b083      	sub	sp, #12
900098f8:	af00      	add	r7, sp, #0
900098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
900098fc:	bf00      	nop
900098fe:	370c      	adds	r7, #12
90009900:	46bd      	mov	sp, r7
90009902:	f85d 7b04 	ldr.w	r7, [sp], #4
90009906:	4770      	bx	lr

90009908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009908:	b480      	push	{r7}
9000990a:	b085      	sub	sp, #20
9000990c:	af00      	add	r7, sp, #0
9000990e:	6078      	str	r0, [r7, #4]
90009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009912:	687b      	ldr	r3, [r7, #4]
90009914:	681b      	ldr	r3, [r3, #0]
90009916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009918:	687b      	ldr	r3, [r7, #4]
9000991a:	4a43      	ldr	r2, [pc, #268]	@ (90009a28 <TIM_Base_SetConfig+0x120>)
9000991c:	4293      	cmp	r3, r2
9000991e:	d013      	beq.n	90009948 <TIM_Base_SetConfig+0x40>
90009920:	687b      	ldr	r3, [r7, #4]
90009922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009926:	d00f      	beq.n	90009948 <TIM_Base_SetConfig+0x40>
90009928:	687b      	ldr	r3, [r7, #4]
9000992a:	4a40      	ldr	r2, [pc, #256]	@ (90009a2c <TIM_Base_SetConfig+0x124>)
9000992c:	4293      	cmp	r3, r2
9000992e:	d00b      	beq.n	90009948 <TIM_Base_SetConfig+0x40>
90009930:	687b      	ldr	r3, [r7, #4]
90009932:	4a3f      	ldr	r2, [pc, #252]	@ (90009a30 <TIM_Base_SetConfig+0x128>)
90009934:	4293      	cmp	r3, r2
90009936:	d007      	beq.n	90009948 <TIM_Base_SetConfig+0x40>
90009938:	687b      	ldr	r3, [r7, #4]
9000993a:	4a3e      	ldr	r2, [pc, #248]	@ (90009a34 <TIM_Base_SetConfig+0x12c>)
9000993c:	4293      	cmp	r3, r2
9000993e:	d003      	beq.n	90009948 <TIM_Base_SetConfig+0x40>
90009940:	687b      	ldr	r3, [r7, #4]
90009942:	4a3d      	ldr	r2, [pc, #244]	@ (90009a38 <TIM_Base_SetConfig+0x130>)
90009944:	4293      	cmp	r3, r2
90009946:	d108      	bne.n	9000995a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009948:	68fb      	ldr	r3, [r7, #12]
9000994a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000994e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009950:	683b      	ldr	r3, [r7, #0]
90009952:	685b      	ldr	r3, [r3, #4]
90009954:	68fa      	ldr	r2, [r7, #12]
90009956:	4313      	orrs	r3, r2
90009958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000995a:	687b      	ldr	r3, [r7, #4]
9000995c:	4a32      	ldr	r2, [pc, #200]	@ (90009a28 <TIM_Base_SetConfig+0x120>)
9000995e:	4293      	cmp	r3, r2
90009960:	d01f      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
90009962:	687b      	ldr	r3, [r7, #4]
90009964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009968:	d01b      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
9000996a:	687b      	ldr	r3, [r7, #4]
9000996c:	4a2f      	ldr	r2, [pc, #188]	@ (90009a2c <TIM_Base_SetConfig+0x124>)
9000996e:	4293      	cmp	r3, r2
90009970:	d017      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
90009972:	687b      	ldr	r3, [r7, #4]
90009974:	4a2e      	ldr	r2, [pc, #184]	@ (90009a30 <TIM_Base_SetConfig+0x128>)
90009976:	4293      	cmp	r3, r2
90009978:	d013      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
9000997a:	687b      	ldr	r3, [r7, #4]
9000997c:	4a2d      	ldr	r2, [pc, #180]	@ (90009a34 <TIM_Base_SetConfig+0x12c>)
9000997e:	4293      	cmp	r3, r2
90009980:	d00f      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
90009982:	687b      	ldr	r3, [r7, #4]
90009984:	4a2c      	ldr	r2, [pc, #176]	@ (90009a38 <TIM_Base_SetConfig+0x130>)
90009986:	4293      	cmp	r3, r2
90009988:	d00b      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
9000998a:	687b      	ldr	r3, [r7, #4]
9000998c:	4a2b      	ldr	r2, [pc, #172]	@ (90009a3c <TIM_Base_SetConfig+0x134>)
9000998e:	4293      	cmp	r3, r2
90009990:	d007      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
90009992:	687b      	ldr	r3, [r7, #4]
90009994:	4a2a      	ldr	r2, [pc, #168]	@ (90009a40 <TIM_Base_SetConfig+0x138>)
90009996:	4293      	cmp	r3, r2
90009998:	d003      	beq.n	900099a2 <TIM_Base_SetConfig+0x9a>
9000999a:	687b      	ldr	r3, [r7, #4]
9000999c:	4a29      	ldr	r2, [pc, #164]	@ (90009a44 <TIM_Base_SetConfig+0x13c>)
9000999e:	4293      	cmp	r3, r2
900099a0:	d108      	bne.n	900099b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
900099a2:	68fb      	ldr	r3, [r7, #12]
900099a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
900099a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
900099aa:	683b      	ldr	r3, [r7, #0]
900099ac:	68db      	ldr	r3, [r3, #12]
900099ae:	68fa      	ldr	r2, [r7, #12]
900099b0:	4313      	orrs	r3, r2
900099b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
900099b4:	68fb      	ldr	r3, [r7, #12]
900099b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
900099ba:	683b      	ldr	r3, [r7, #0]
900099bc:	695b      	ldr	r3, [r3, #20]
900099be:	4313      	orrs	r3, r2
900099c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
900099c2:	683b      	ldr	r3, [r7, #0]
900099c4:	689a      	ldr	r2, [r3, #8]
900099c6:	687b      	ldr	r3, [r7, #4]
900099c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
900099ca:	683b      	ldr	r3, [r7, #0]
900099cc:	681a      	ldr	r2, [r3, #0]
900099ce:	687b      	ldr	r3, [r7, #4]
900099d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
900099d2:	687b      	ldr	r3, [r7, #4]
900099d4:	4a14      	ldr	r2, [pc, #80]	@ (90009a28 <TIM_Base_SetConfig+0x120>)
900099d6:	4293      	cmp	r3, r2
900099d8:	d00f      	beq.n	900099fa <TIM_Base_SetConfig+0xf2>
900099da:	687b      	ldr	r3, [r7, #4]
900099dc:	4a16      	ldr	r2, [pc, #88]	@ (90009a38 <TIM_Base_SetConfig+0x130>)
900099de:	4293      	cmp	r3, r2
900099e0:	d00b      	beq.n	900099fa <TIM_Base_SetConfig+0xf2>
900099e2:	687b      	ldr	r3, [r7, #4]
900099e4:	4a15      	ldr	r2, [pc, #84]	@ (90009a3c <TIM_Base_SetConfig+0x134>)
900099e6:	4293      	cmp	r3, r2
900099e8:	d007      	beq.n	900099fa <TIM_Base_SetConfig+0xf2>
900099ea:	687b      	ldr	r3, [r7, #4]
900099ec:	4a14      	ldr	r2, [pc, #80]	@ (90009a40 <TIM_Base_SetConfig+0x138>)
900099ee:	4293      	cmp	r3, r2
900099f0:	d003      	beq.n	900099fa <TIM_Base_SetConfig+0xf2>
900099f2:	687b      	ldr	r3, [r7, #4]
900099f4:	4a13      	ldr	r2, [pc, #76]	@ (90009a44 <TIM_Base_SetConfig+0x13c>)
900099f6:	4293      	cmp	r3, r2
900099f8:	d103      	bne.n	90009a02 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
900099fa:	683b      	ldr	r3, [r7, #0]
900099fc:	691a      	ldr	r2, [r3, #16]
900099fe:	687b      	ldr	r3, [r7, #4]
90009a00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009a02:	687b      	ldr	r3, [r7, #4]
90009a04:	681b      	ldr	r3, [r3, #0]
90009a06:	f043 0204 	orr.w	r2, r3, #4
90009a0a:	687b      	ldr	r3, [r7, #4]
90009a0c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009a0e:	687b      	ldr	r3, [r7, #4]
90009a10:	2201      	movs	r2, #1
90009a12:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009a14:	687b      	ldr	r3, [r7, #4]
90009a16:	68fa      	ldr	r2, [r7, #12]
90009a18:	601a      	str	r2, [r3, #0]
}
90009a1a:	bf00      	nop
90009a1c:	3714      	adds	r7, #20
90009a1e:	46bd      	mov	sp, r7
90009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a24:	4770      	bx	lr
90009a26:	bf00      	nop
90009a28:	40010000 	.word	0x40010000
90009a2c:	40000400 	.word	0x40000400
90009a30:	40000800 	.word	0x40000800
90009a34:	40000c00 	.word	0x40000c00
90009a38:	40010400 	.word	0x40010400
90009a3c:	40014000 	.word	0x40014000
90009a40:	40014400 	.word	0x40014400
90009a44:	40014800 	.word	0x40014800

90009a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009a48:	b580      	push	{r7, lr}
90009a4a:	b082      	sub	sp, #8
90009a4c:	af00      	add	r7, sp, #0
90009a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009a50:	687b      	ldr	r3, [r7, #4]
90009a52:	2b00      	cmp	r3, #0
90009a54:	d101      	bne.n	90009a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009a56:	2301      	movs	r3, #1
90009a58:	e042      	b.n	90009ae0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009a5a:	687b      	ldr	r3, [r7, #4]
90009a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009a60:	2b00      	cmp	r3, #0
90009a62:	d106      	bne.n	90009a72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009a64:	687b      	ldr	r3, [r7, #4]
90009a66:	2200      	movs	r2, #0
90009a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009a6c:	6878      	ldr	r0, [r7, #4]
90009a6e:	f7f7 f87b 	bl	90000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009a72:	687b      	ldr	r3, [r7, #4]
90009a74:	2224      	movs	r2, #36	@ 0x24
90009a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009a7a:	687b      	ldr	r3, [r7, #4]
90009a7c:	681b      	ldr	r3, [r3, #0]
90009a7e:	681a      	ldr	r2, [r3, #0]
90009a80:	687b      	ldr	r3, [r7, #4]
90009a82:	681b      	ldr	r3, [r3, #0]
90009a84:	f022 0201 	bic.w	r2, r2, #1
90009a88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009a8a:	687b      	ldr	r3, [r7, #4]
90009a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009a8e:	2b00      	cmp	r3, #0
90009a90:	d002      	beq.n	90009a98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009a92:	6878      	ldr	r0, [r7, #4]
90009a94:	f000 fe1e 	bl	9000a6d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009a98:	6878      	ldr	r0, [r7, #4]
90009a9a:	f000 f8b3 	bl	90009c04 <UART_SetConfig>
90009a9e:	4603      	mov	r3, r0
90009aa0:	2b01      	cmp	r3, #1
90009aa2:	d101      	bne.n	90009aa8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009aa4:	2301      	movs	r3, #1
90009aa6:	e01b      	b.n	90009ae0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009aa8:	687b      	ldr	r3, [r7, #4]
90009aaa:	681b      	ldr	r3, [r3, #0]
90009aac:	685a      	ldr	r2, [r3, #4]
90009aae:	687b      	ldr	r3, [r7, #4]
90009ab0:	681b      	ldr	r3, [r3, #0]
90009ab2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009ab8:	687b      	ldr	r3, [r7, #4]
90009aba:	681b      	ldr	r3, [r3, #0]
90009abc:	689a      	ldr	r2, [r3, #8]
90009abe:	687b      	ldr	r3, [r7, #4]
90009ac0:	681b      	ldr	r3, [r3, #0]
90009ac2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009ac8:	687b      	ldr	r3, [r7, #4]
90009aca:	681b      	ldr	r3, [r3, #0]
90009acc:	681a      	ldr	r2, [r3, #0]
90009ace:	687b      	ldr	r3, [r7, #4]
90009ad0:	681b      	ldr	r3, [r3, #0]
90009ad2:	f042 0201 	orr.w	r2, r2, #1
90009ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009ad8:	6878      	ldr	r0, [r7, #4]
90009ada:	f000 fe9d 	bl	9000a818 <UART_CheckIdleState>
90009ade:	4603      	mov	r3, r0
}
90009ae0:	4618      	mov	r0, r3
90009ae2:	3708      	adds	r7, #8
90009ae4:	46bd      	mov	sp, r7
90009ae6:	bd80      	pop	{r7, pc}

90009ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009ae8:	b580      	push	{r7, lr}
90009aea:	b08a      	sub	sp, #40	@ 0x28
90009aec:	af02      	add	r7, sp, #8
90009aee:	60f8      	str	r0, [r7, #12]
90009af0:	60b9      	str	r1, [r7, #8]
90009af2:	603b      	str	r3, [r7, #0]
90009af4:	4613      	mov	r3, r2
90009af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009af8:	68fb      	ldr	r3, [r7, #12]
90009afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009afe:	2b20      	cmp	r3, #32
90009b00:	d17b      	bne.n	90009bfa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009b02:	68bb      	ldr	r3, [r7, #8]
90009b04:	2b00      	cmp	r3, #0
90009b06:	d002      	beq.n	90009b0e <HAL_UART_Transmit+0x26>
90009b08:	88fb      	ldrh	r3, [r7, #6]
90009b0a:	2b00      	cmp	r3, #0
90009b0c:	d101      	bne.n	90009b12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009b0e:	2301      	movs	r3, #1
90009b10:	e074      	b.n	90009bfc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009b12:	68fb      	ldr	r3, [r7, #12]
90009b14:	2200      	movs	r2, #0
90009b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009b1a:	68fb      	ldr	r3, [r7, #12]
90009b1c:	2221      	movs	r2, #33	@ 0x21
90009b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009b22:	f7f9 facd 	bl	900030c0 <HAL_GetTick>
90009b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009b28:	68fb      	ldr	r3, [r7, #12]
90009b2a:	88fa      	ldrh	r2, [r7, #6]
90009b2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009b30:	68fb      	ldr	r3, [r7, #12]
90009b32:	88fa      	ldrh	r2, [r7, #6]
90009b34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009b38:	68fb      	ldr	r3, [r7, #12]
90009b3a:	689b      	ldr	r3, [r3, #8]
90009b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009b40:	d108      	bne.n	90009b54 <HAL_UART_Transmit+0x6c>
90009b42:	68fb      	ldr	r3, [r7, #12]
90009b44:	691b      	ldr	r3, [r3, #16]
90009b46:	2b00      	cmp	r3, #0
90009b48:	d104      	bne.n	90009b54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009b4a:	2300      	movs	r3, #0
90009b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009b4e:	68bb      	ldr	r3, [r7, #8]
90009b50:	61bb      	str	r3, [r7, #24]
90009b52:	e003      	b.n	90009b5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009b54:	68bb      	ldr	r3, [r7, #8]
90009b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009b58:	2300      	movs	r3, #0
90009b5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009b5c:	e030      	b.n	90009bc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009b5e:	683b      	ldr	r3, [r7, #0]
90009b60:	9300      	str	r3, [sp, #0]
90009b62:	697b      	ldr	r3, [r7, #20]
90009b64:	2200      	movs	r2, #0
90009b66:	2180      	movs	r1, #128	@ 0x80
90009b68:	68f8      	ldr	r0, [r7, #12]
90009b6a:	f000 feff 	bl	9000a96c <UART_WaitOnFlagUntilTimeout>
90009b6e:	4603      	mov	r3, r0
90009b70:	2b00      	cmp	r3, #0
90009b72:	d005      	beq.n	90009b80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009b74:	68fb      	ldr	r3, [r7, #12]
90009b76:	2220      	movs	r2, #32
90009b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009b7c:	2303      	movs	r3, #3
90009b7e:	e03d      	b.n	90009bfc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009b80:	69fb      	ldr	r3, [r7, #28]
90009b82:	2b00      	cmp	r3, #0
90009b84:	d10b      	bne.n	90009b9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009b86:	69bb      	ldr	r3, [r7, #24]
90009b88:	881b      	ldrh	r3, [r3, #0]
90009b8a:	461a      	mov	r2, r3
90009b8c:	68fb      	ldr	r3, [r7, #12]
90009b8e:	681b      	ldr	r3, [r3, #0]
90009b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009b94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009b96:	69bb      	ldr	r3, [r7, #24]
90009b98:	3302      	adds	r3, #2
90009b9a:	61bb      	str	r3, [r7, #24]
90009b9c:	e007      	b.n	90009bae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009b9e:	69fb      	ldr	r3, [r7, #28]
90009ba0:	781a      	ldrb	r2, [r3, #0]
90009ba2:	68fb      	ldr	r3, [r7, #12]
90009ba4:	681b      	ldr	r3, [r3, #0]
90009ba6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009ba8:	69fb      	ldr	r3, [r7, #28]
90009baa:	3301      	adds	r3, #1
90009bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009bae:	68fb      	ldr	r3, [r7, #12]
90009bb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009bb4:	b29b      	uxth	r3, r3
90009bb6:	3b01      	subs	r3, #1
90009bb8:	b29a      	uxth	r2, r3
90009bba:	68fb      	ldr	r3, [r7, #12]
90009bbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009bc0:	68fb      	ldr	r3, [r7, #12]
90009bc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009bc6:	b29b      	uxth	r3, r3
90009bc8:	2b00      	cmp	r3, #0
90009bca:	d1c8      	bne.n	90009b5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009bcc:	683b      	ldr	r3, [r7, #0]
90009bce:	9300      	str	r3, [sp, #0]
90009bd0:	697b      	ldr	r3, [r7, #20]
90009bd2:	2200      	movs	r2, #0
90009bd4:	2140      	movs	r1, #64	@ 0x40
90009bd6:	68f8      	ldr	r0, [r7, #12]
90009bd8:	f000 fec8 	bl	9000a96c <UART_WaitOnFlagUntilTimeout>
90009bdc:	4603      	mov	r3, r0
90009bde:	2b00      	cmp	r3, #0
90009be0:	d005      	beq.n	90009bee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009be2:	68fb      	ldr	r3, [r7, #12]
90009be4:	2220      	movs	r2, #32
90009be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009bea:	2303      	movs	r3, #3
90009bec:	e006      	b.n	90009bfc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009bee:	68fb      	ldr	r3, [r7, #12]
90009bf0:	2220      	movs	r2, #32
90009bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009bf6:	2300      	movs	r3, #0
90009bf8:	e000      	b.n	90009bfc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009bfa:	2302      	movs	r3, #2
  }
}
90009bfc:	4618      	mov	r0, r3
90009bfe:	3720      	adds	r7, #32
90009c00:	46bd      	mov	sp, r7
90009c02:	bd80      	pop	{r7, pc}

90009c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009c08:	b092      	sub	sp, #72	@ 0x48
90009c0a:	af00      	add	r7, sp, #0
90009c0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009c0e:	2300      	movs	r3, #0
90009c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009c14:	697b      	ldr	r3, [r7, #20]
90009c16:	689a      	ldr	r2, [r3, #8]
90009c18:	697b      	ldr	r3, [r7, #20]
90009c1a:	691b      	ldr	r3, [r3, #16]
90009c1c:	431a      	orrs	r2, r3
90009c1e:	697b      	ldr	r3, [r7, #20]
90009c20:	695b      	ldr	r3, [r3, #20]
90009c22:	431a      	orrs	r2, r3
90009c24:	697b      	ldr	r3, [r7, #20]
90009c26:	69db      	ldr	r3, [r3, #28]
90009c28:	4313      	orrs	r3, r2
90009c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009c2c:	697b      	ldr	r3, [r7, #20]
90009c2e:	681b      	ldr	r3, [r3, #0]
90009c30:	681a      	ldr	r2, [r3, #0]
90009c32:	4bbe      	ldr	r3, [pc, #760]	@ (90009f2c <UART_SetConfig+0x328>)
90009c34:	4013      	ands	r3, r2
90009c36:	697a      	ldr	r2, [r7, #20]
90009c38:	6812      	ldr	r2, [r2, #0]
90009c3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009c3c:	430b      	orrs	r3, r1
90009c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009c40:	697b      	ldr	r3, [r7, #20]
90009c42:	681b      	ldr	r3, [r3, #0]
90009c44:	685b      	ldr	r3, [r3, #4]
90009c46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009c4a:	697b      	ldr	r3, [r7, #20]
90009c4c:	68da      	ldr	r2, [r3, #12]
90009c4e:	697b      	ldr	r3, [r7, #20]
90009c50:	681b      	ldr	r3, [r3, #0]
90009c52:	430a      	orrs	r2, r1
90009c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009c56:	697b      	ldr	r3, [r7, #20]
90009c58:	699b      	ldr	r3, [r3, #24]
90009c5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009c5c:	697b      	ldr	r3, [r7, #20]
90009c5e:	681b      	ldr	r3, [r3, #0]
90009c60:	4ab3      	ldr	r2, [pc, #716]	@ (90009f30 <UART_SetConfig+0x32c>)
90009c62:	4293      	cmp	r3, r2
90009c64:	d004      	beq.n	90009c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009c66:	697b      	ldr	r3, [r7, #20]
90009c68:	6a1b      	ldr	r3, [r3, #32]
90009c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009c6c:	4313      	orrs	r3, r2
90009c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009c70:	697b      	ldr	r3, [r7, #20]
90009c72:	681b      	ldr	r3, [r3, #0]
90009c74:	689a      	ldr	r2, [r3, #8]
90009c76:	4baf      	ldr	r3, [pc, #700]	@ (90009f34 <UART_SetConfig+0x330>)
90009c78:	4013      	ands	r3, r2
90009c7a:	697a      	ldr	r2, [r7, #20]
90009c7c:	6812      	ldr	r2, [r2, #0]
90009c7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009c80:	430b      	orrs	r3, r1
90009c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009c84:	697b      	ldr	r3, [r7, #20]
90009c86:	681b      	ldr	r3, [r3, #0]
90009c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009c8a:	f023 010f 	bic.w	r1, r3, #15
90009c8e:	697b      	ldr	r3, [r7, #20]
90009c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009c92:	697b      	ldr	r3, [r7, #20]
90009c94:	681b      	ldr	r3, [r3, #0]
90009c96:	430a      	orrs	r2, r1
90009c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009c9a:	697b      	ldr	r3, [r7, #20]
90009c9c:	681b      	ldr	r3, [r3, #0]
90009c9e:	4aa6      	ldr	r2, [pc, #664]	@ (90009f38 <UART_SetConfig+0x334>)
90009ca0:	4293      	cmp	r3, r2
90009ca2:	d177      	bne.n	90009d94 <UART_SetConfig+0x190>
90009ca4:	4ba5      	ldr	r3, [pc, #660]	@ (90009f3c <UART_SetConfig+0x338>)
90009ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009cac:	2b28      	cmp	r3, #40	@ 0x28
90009cae:	d86d      	bhi.n	90009d8c <UART_SetConfig+0x188>
90009cb0:	a201      	add	r2, pc, #4	@ (adr r2, 90009cb8 <UART_SetConfig+0xb4>)
90009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009cb6:	bf00      	nop
90009cb8:	90009d5d 	.word	0x90009d5d
90009cbc:	90009d8d 	.word	0x90009d8d
90009cc0:	90009d8d 	.word	0x90009d8d
90009cc4:	90009d8d 	.word	0x90009d8d
90009cc8:	90009d8d 	.word	0x90009d8d
90009ccc:	90009d8d 	.word	0x90009d8d
90009cd0:	90009d8d 	.word	0x90009d8d
90009cd4:	90009d8d 	.word	0x90009d8d
90009cd8:	90009d65 	.word	0x90009d65
90009cdc:	90009d8d 	.word	0x90009d8d
90009ce0:	90009d8d 	.word	0x90009d8d
90009ce4:	90009d8d 	.word	0x90009d8d
90009ce8:	90009d8d 	.word	0x90009d8d
90009cec:	90009d8d 	.word	0x90009d8d
90009cf0:	90009d8d 	.word	0x90009d8d
90009cf4:	90009d8d 	.word	0x90009d8d
90009cf8:	90009d6d 	.word	0x90009d6d
90009cfc:	90009d8d 	.word	0x90009d8d
90009d00:	90009d8d 	.word	0x90009d8d
90009d04:	90009d8d 	.word	0x90009d8d
90009d08:	90009d8d 	.word	0x90009d8d
90009d0c:	90009d8d 	.word	0x90009d8d
90009d10:	90009d8d 	.word	0x90009d8d
90009d14:	90009d8d 	.word	0x90009d8d
90009d18:	90009d75 	.word	0x90009d75
90009d1c:	90009d8d 	.word	0x90009d8d
90009d20:	90009d8d 	.word	0x90009d8d
90009d24:	90009d8d 	.word	0x90009d8d
90009d28:	90009d8d 	.word	0x90009d8d
90009d2c:	90009d8d 	.word	0x90009d8d
90009d30:	90009d8d 	.word	0x90009d8d
90009d34:	90009d8d 	.word	0x90009d8d
90009d38:	90009d7d 	.word	0x90009d7d
90009d3c:	90009d8d 	.word	0x90009d8d
90009d40:	90009d8d 	.word	0x90009d8d
90009d44:	90009d8d 	.word	0x90009d8d
90009d48:	90009d8d 	.word	0x90009d8d
90009d4c:	90009d8d 	.word	0x90009d8d
90009d50:	90009d8d 	.word	0x90009d8d
90009d54:	90009d8d 	.word	0x90009d8d
90009d58:	90009d85 	.word	0x90009d85
90009d5c:	2301      	movs	r3, #1
90009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d62:	e222      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009d64:	2304      	movs	r3, #4
90009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d6a:	e21e      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009d6c:	2308      	movs	r3, #8
90009d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d72:	e21a      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009d74:	2310      	movs	r3, #16
90009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d7a:	e216      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009d7c:	2320      	movs	r3, #32
90009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d82:	e212      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009d84:	2340      	movs	r3, #64	@ 0x40
90009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d8a:	e20e      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009d8c:	2380      	movs	r3, #128	@ 0x80
90009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d92:	e20a      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009d94:	697b      	ldr	r3, [r7, #20]
90009d96:	681b      	ldr	r3, [r3, #0]
90009d98:	4a69      	ldr	r2, [pc, #420]	@ (90009f40 <UART_SetConfig+0x33c>)
90009d9a:	4293      	cmp	r3, r2
90009d9c:	d130      	bne.n	90009e00 <UART_SetConfig+0x1fc>
90009d9e:	4b67      	ldr	r3, [pc, #412]	@ (90009f3c <UART_SetConfig+0x338>)
90009da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009da2:	f003 0307 	and.w	r3, r3, #7
90009da6:	2b05      	cmp	r3, #5
90009da8:	d826      	bhi.n	90009df8 <UART_SetConfig+0x1f4>
90009daa:	a201      	add	r2, pc, #4	@ (adr r2, 90009db0 <UART_SetConfig+0x1ac>)
90009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009db0:	90009dc9 	.word	0x90009dc9
90009db4:	90009dd1 	.word	0x90009dd1
90009db8:	90009dd9 	.word	0x90009dd9
90009dbc:	90009de1 	.word	0x90009de1
90009dc0:	90009de9 	.word	0x90009de9
90009dc4:	90009df1 	.word	0x90009df1
90009dc8:	2300      	movs	r3, #0
90009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dce:	e1ec      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009dd0:	2304      	movs	r3, #4
90009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dd6:	e1e8      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009dd8:	2308      	movs	r3, #8
90009dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dde:	e1e4      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009de0:	2310      	movs	r3, #16
90009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009de6:	e1e0      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009de8:	2320      	movs	r3, #32
90009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dee:	e1dc      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009df0:	2340      	movs	r3, #64	@ 0x40
90009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009df6:	e1d8      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009df8:	2380      	movs	r3, #128	@ 0x80
90009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dfe:	e1d4      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e00:	697b      	ldr	r3, [r7, #20]
90009e02:	681b      	ldr	r3, [r3, #0]
90009e04:	4a4f      	ldr	r2, [pc, #316]	@ (90009f44 <UART_SetConfig+0x340>)
90009e06:	4293      	cmp	r3, r2
90009e08:	d130      	bne.n	90009e6c <UART_SetConfig+0x268>
90009e0a:	4b4c      	ldr	r3, [pc, #304]	@ (90009f3c <UART_SetConfig+0x338>)
90009e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009e0e:	f003 0307 	and.w	r3, r3, #7
90009e12:	2b05      	cmp	r3, #5
90009e14:	d826      	bhi.n	90009e64 <UART_SetConfig+0x260>
90009e16:	a201      	add	r2, pc, #4	@ (adr r2, 90009e1c <UART_SetConfig+0x218>)
90009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009e1c:	90009e35 	.word	0x90009e35
90009e20:	90009e3d 	.word	0x90009e3d
90009e24:	90009e45 	.word	0x90009e45
90009e28:	90009e4d 	.word	0x90009e4d
90009e2c:	90009e55 	.word	0x90009e55
90009e30:	90009e5d 	.word	0x90009e5d
90009e34:	2300      	movs	r3, #0
90009e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e3a:	e1b6      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e3c:	2304      	movs	r3, #4
90009e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e42:	e1b2      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e44:	2308      	movs	r3, #8
90009e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e4a:	e1ae      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e4c:	2310      	movs	r3, #16
90009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e52:	e1aa      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e54:	2320      	movs	r3, #32
90009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e5a:	e1a6      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e5c:	2340      	movs	r3, #64	@ 0x40
90009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e62:	e1a2      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e64:	2380      	movs	r3, #128	@ 0x80
90009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e6a:	e19e      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009e6c:	697b      	ldr	r3, [r7, #20]
90009e6e:	681b      	ldr	r3, [r3, #0]
90009e70:	4a35      	ldr	r2, [pc, #212]	@ (90009f48 <UART_SetConfig+0x344>)
90009e72:	4293      	cmp	r3, r2
90009e74:	d130      	bne.n	90009ed8 <UART_SetConfig+0x2d4>
90009e76:	4b31      	ldr	r3, [pc, #196]	@ (90009f3c <UART_SetConfig+0x338>)
90009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009e7a:	f003 0307 	and.w	r3, r3, #7
90009e7e:	2b05      	cmp	r3, #5
90009e80:	d826      	bhi.n	90009ed0 <UART_SetConfig+0x2cc>
90009e82:	a201      	add	r2, pc, #4	@ (adr r2, 90009e88 <UART_SetConfig+0x284>)
90009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009e88:	90009ea1 	.word	0x90009ea1
90009e8c:	90009ea9 	.word	0x90009ea9
90009e90:	90009eb1 	.word	0x90009eb1
90009e94:	90009eb9 	.word	0x90009eb9
90009e98:	90009ec1 	.word	0x90009ec1
90009e9c:	90009ec9 	.word	0x90009ec9
90009ea0:	2300      	movs	r3, #0
90009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ea6:	e180      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009ea8:	2304      	movs	r3, #4
90009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eae:	e17c      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009eb0:	2308      	movs	r3, #8
90009eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eb6:	e178      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009eb8:	2310      	movs	r3, #16
90009eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ebe:	e174      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009ec0:	2320      	movs	r3, #32
90009ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ec6:	e170      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009ec8:	2340      	movs	r3, #64	@ 0x40
90009eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ece:	e16c      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009ed0:	2380      	movs	r3, #128	@ 0x80
90009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ed6:	e168      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009ed8:	697b      	ldr	r3, [r7, #20]
90009eda:	681b      	ldr	r3, [r3, #0]
90009edc:	4a1b      	ldr	r2, [pc, #108]	@ (90009f4c <UART_SetConfig+0x348>)
90009ede:	4293      	cmp	r3, r2
90009ee0:	d142      	bne.n	90009f68 <UART_SetConfig+0x364>
90009ee2:	4b16      	ldr	r3, [pc, #88]	@ (90009f3c <UART_SetConfig+0x338>)
90009ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ee6:	f003 0307 	and.w	r3, r3, #7
90009eea:	2b05      	cmp	r3, #5
90009eec:	d838      	bhi.n	90009f60 <UART_SetConfig+0x35c>
90009eee:	a201      	add	r2, pc, #4	@ (adr r2, 90009ef4 <UART_SetConfig+0x2f0>)
90009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009ef4:	90009f0d 	.word	0x90009f0d
90009ef8:	90009f15 	.word	0x90009f15
90009efc:	90009f1d 	.word	0x90009f1d
90009f00:	90009f25 	.word	0x90009f25
90009f04:	90009f51 	.word	0x90009f51
90009f08:	90009f59 	.word	0x90009f59
90009f0c:	2300      	movs	r3, #0
90009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f12:	e14a      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009f14:	2304      	movs	r3, #4
90009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f1a:	e146      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009f1c:	2308      	movs	r3, #8
90009f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f22:	e142      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009f24:	2310      	movs	r3, #16
90009f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f2a:	e13e      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009f2c:	cfff69f3 	.word	0xcfff69f3
90009f30:	58000c00 	.word	0x58000c00
90009f34:	11fff4ff 	.word	0x11fff4ff
90009f38:	40011000 	.word	0x40011000
90009f3c:	58024400 	.word	0x58024400
90009f40:	40004400 	.word	0x40004400
90009f44:	40004800 	.word	0x40004800
90009f48:	40004c00 	.word	0x40004c00
90009f4c:	40005000 	.word	0x40005000
90009f50:	2320      	movs	r3, #32
90009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f56:	e128      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009f58:	2340      	movs	r3, #64	@ 0x40
90009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f5e:	e124      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009f60:	2380      	movs	r3, #128	@ 0x80
90009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f66:	e120      	b.n	9000a1aa <UART_SetConfig+0x5a6>
90009f68:	697b      	ldr	r3, [r7, #20]
90009f6a:	681b      	ldr	r3, [r3, #0]
90009f6c:	4acb      	ldr	r2, [pc, #812]	@ (9000a29c <UART_SetConfig+0x698>)
90009f6e:	4293      	cmp	r3, r2
90009f70:	d176      	bne.n	9000a060 <UART_SetConfig+0x45c>
90009f72:	4bcb      	ldr	r3, [pc, #812]	@ (9000a2a0 <UART_SetConfig+0x69c>)
90009f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009f7a:	2b28      	cmp	r3, #40	@ 0x28
90009f7c:	d86c      	bhi.n	9000a058 <UART_SetConfig+0x454>
90009f7e:	a201      	add	r2, pc, #4	@ (adr r2, 90009f84 <UART_SetConfig+0x380>)
90009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f84:	9000a029 	.word	0x9000a029
90009f88:	9000a059 	.word	0x9000a059
90009f8c:	9000a059 	.word	0x9000a059
90009f90:	9000a059 	.word	0x9000a059
90009f94:	9000a059 	.word	0x9000a059
90009f98:	9000a059 	.word	0x9000a059
90009f9c:	9000a059 	.word	0x9000a059
90009fa0:	9000a059 	.word	0x9000a059
90009fa4:	9000a031 	.word	0x9000a031
90009fa8:	9000a059 	.word	0x9000a059
90009fac:	9000a059 	.word	0x9000a059
90009fb0:	9000a059 	.word	0x9000a059
90009fb4:	9000a059 	.word	0x9000a059
90009fb8:	9000a059 	.word	0x9000a059
90009fbc:	9000a059 	.word	0x9000a059
90009fc0:	9000a059 	.word	0x9000a059
90009fc4:	9000a039 	.word	0x9000a039
90009fc8:	9000a059 	.word	0x9000a059
90009fcc:	9000a059 	.word	0x9000a059
90009fd0:	9000a059 	.word	0x9000a059
90009fd4:	9000a059 	.word	0x9000a059
90009fd8:	9000a059 	.word	0x9000a059
90009fdc:	9000a059 	.word	0x9000a059
90009fe0:	9000a059 	.word	0x9000a059
90009fe4:	9000a041 	.word	0x9000a041
90009fe8:	9000a059 	.word	0x9000a059
90009fec:	9000a059 	.word	0x9000a059
90009ff0:	9000a059 	.word	0x9000a059
90009ff4:	9000a059 	.word	0x9000a059
90009ff8:	9000a059 	.word	0x9000a059
90009ffc:	9000a059 	.word	0x9000a059
9000a000:	9000a059 	.word	0x9000a059
9000a004:	9000a049 	.word	0x9000a049
9000a008:	9000a059 	.word	0x9000a059
9000a00c:	9000a059 	.word	0x9000a059
9000a010:	9000a059 	.word	0x9000a059
9000a014:	9000a059 	.word	0x9000a059
9000a018:	9000a059 	.word	0x9000a059
9000a01c:	9000a059 	.word	0x9000a059
9000a020:	9000a059 	.word	0x9000a059
9000a024:	9000a051 	.word	0x9000a051
9000a028:	2301      	movs	r3, #1
9000a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a02e:	e0bc      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a030:	2304      	movs	r3, #4
9000a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a036:	e0b8      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a038:	2308      	movs	r3, #8
9000a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a03e:	e0b4      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a040:	2310      	movs	r3, #16
9000a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a046:	e0b0      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a048:	2320      	movs	r3, #32
9000a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a04e:	e0ac      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a050:	2340      	movs	r3, #64	@ 0x40
9000a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a056:	e0a8      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a058:	2380      	movs	r3, #128	@ 0x80
9000a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a05e:	e0a4      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a060:	697b      	ldr	r3, [r7, #20]
9000a062:	681b      	ldr	r3, [r3, #0]
9000a064:	4a8f      	ldr	r2, [pc, #572]	@ (9000a2a4 <UART_SetConfig+0x6a0>)
9000a066:	4293      	cmp	r3, r2
9000a068:	d130      	bne.n	9000a0cc <UART_SetConfig+0x4c8>
9000a06a:	4b8d      	ldr	r3, [pc, #564]	@ (9000a2a0 <UART_SetConfig+0x69c>)
9000a06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a06e:	f003 0307 	and.w	r3, r3, #7
9000a072:	2b05      	cmp	r3, #5
9000a074:	d826      	bhi.n	9000a0c4 <UART_SetConfig+0x4c0>
9000a076:	a201      	add	r2, pc, #4	@ (adr r2, 9000a07c <UART_SetConfig+0x478>)
9000a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a07c:	9000a095 	.word	0x9000a095
9000a080:	9000a09d 	.word	0x9000a09d
9000a084:	9000a0a5 	.word	0x9000a0a5
9000a088:	9000a0ad 	.word	0x9000a0ad
9000a08c:	9000a0b5 	.word	0x9000a0b5
9000a090:	9000a0bd 	.word	0x9000a0bd
9000a094:	2300      	movs	r3, #0
9000a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a09a:	e086      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a09c:	2304      	movs	r3, #4
9000a09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0a2:	e082      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a0a4:	2308      	movs	r3, #8
9000a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0aa:	e07e      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a0ac:	2310      	movs	r3, #16
9000a0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0b2:	e07a      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a0b4:	2320      	movs	r3, #32
9000a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ba:	e076      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a0bc:	2340      	movs	r3, #64	@ 0x40
9000a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0c2:	e072      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a0c4:	2380      	movs	r3, #128	@ 0x80
9000a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ca:	e06e      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a0cc:	697b      	ldr	r3, [r7, #20]
9000a0ce:	681b      	ldr	r3, [r3, #0]
9000a0d0:	4a75      	ldr	r2, [pc, #468]	@ (9000a2a8 <UART_SetConfig+0x6a4>)
9000a0d2:	4293      	cmp	r3, r2
9000a0d4:	d130      	bne.n	9000a138 <UART_SetConfig+0x534>
9000a0d6:	4b72      	ldr	r3, [pc, #456]	@ (9000a2a0 <UART_SetConfig+0x69c>)
9000a0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a0da:	f003 0307 	and.w	r3, r3, #7
9000a0de:	2b05      	cmp	r3, #5
9000a0e0:	d826      	bhi.n	9000a130 <UART_SetConfig+0x52c>
9000a0e2:	a201      	add	r2, pc, #4	@ (adr r2, 9000a0e8 <UART_SetConfig+0x4e4>)
9000a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a0e8:	9000a101 	.word	0x9000a101
9000a0ec:	9000a109 	.word	0x9000a109
9000a0f0:	9000a111 	.word	0x9000a111
9000a0f4:	9000a119 	.word	0x9000a119
9000a0f8:	9000a121 	.word	0x9000a121
9000a0fc:	9000a129 	.word	0x9000a129
9000a100:	2300      	movs	r3, #0
9000a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a106:	e050      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a108:	2304      	movs	r3, #4
9000a10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a10e:	e04c      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a110:	2308      	movs	r3, #8
9000a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a116:	e048      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a118:	2310      	movs	r3, #16
9000a11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a11e:	e044      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a120:	2320      	movs	r3, #32
9000a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a126:	e040      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a128:	2340      	movs	r3, #64	@ 0x40
9000a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a12e:	e03c      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a130:	2380      	movs	r3, #128	@ 0x80
9000a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a136:	e038      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a138:	697b      	ldr	r3, [r7, #20]
9000a13a:	681b      	ldr	r3, [r3, #0]
9000a13c:	4a5b      	ldr	r2, [pc, #364]	@ (9000a2ac <UART_SetConfig+0x6a8>)
9000a13e:	4293      	cmp	r3, r2
9000a140:	d130      	bne.n	9000a1a4 <UART_SetConfig+0x5a0>
9000a142:	4b57      	ldr	r3, [pc, #348]	@ (9000a2a0 <UART_SetConfig+0x69c>)
9000a144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a146:	f003 0307 	and.w	r3, r3, #7
9000a14a:	2b05      	cmp	r3, #5
9000a14c:	d826      	bhi.n	9000a19c <UART_SetConfig+0x598>
9000a14e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a154 <UART_SetConfig+0x550>)
9000a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a154:	9000a16d 	.word	0x9000a16d
9000a158:	9000a175 	.word	0x9000a175
9000a15c:	9000a17d 	.word	0x9000a17d
9000a160:	9000a185 	.word	0x9000a185
9000a164:	9000a18d 	.word	0x9000a18d
9000a168:	9000a195 	.word	0x9000a195
9000a16c:	2302      	movs	r3, #2
9000a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a172:	e01a      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a174:	2304      	movs	r3, #4
9000a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a17a:	e016      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a17c:	2308      	movs	r3, #8
9000a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a182:	e012      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a184:	2310      	movs	r3, #16
9000a186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a18a:	e00e      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a18c:	2320      	movs	r3, #32
9000a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a192:	e00a      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a194:	2340      	movs	r3, #64	@ 0x40
9000a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a19a:	e006      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a19c:	2380      	movs	r3, #128	@ 0x80
9000a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1a2:	e002      	b.n	9000a1aa <UART_SetConfig+0x5a6>
9000a1a4:	2380      	movs	r3, #128	@ 0x80
9000a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a1aa:	697b      	ldr	r3, [r7, #20]
9000a1ac:	681b      	ldr	r3, [r3, #0]
9000a1ae:	4a3f      	ldr	r2, [pc, #252]	@ (9000a2ac <UART_SetConfig+0x6a8>)
9000a1b0:	4293      	cmp	r3, r2
9000a1b2:	f040 80f8 	bne.w	9000a3a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a1b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a1ba:	2b20      	cmp	r3, #32
9000a1bc:	dc46      	bgt.n	9000a24c <UART_SetConfig+0x648>
9000a1be:	2b02      	cmp	r3, #2
9000a1c0:	f2c0 8082 	blt.w	9000a2c8 <UART_SetConfig+0x6c4>
9000a1c4:	3b02      	subs	r3, #2
9000a1c6:	2b1e      	cmp	r3, #30
9000a1c8:	d87e      	bhi.n	9000a2c8 <UART_SetConfig+0x6c4>
9000a1ca:	a201      	add	r2, pc, #4	@ (adr r2, 9000a1d0 <UART_SetConfig+0x5cc>)
9000a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a1d0:	9000a253 	.word	0x9000a253
9000a1d4:	9000a2c9 	.word	0x9000a2c9
9000a1d8:	9000a25b 	.word	0x9000a25b
9000a1dc:	9000a2c9 	.word	0x9000a2c9
9000a1e0:	9000a2c9 	.word	0x9000a2c9
9000a1e4:	9000a2c9 	.word	0x9000a2c9
9000a1e8:	9000a26b 	.word	0x9000a26b
9000a1ec:	9000a2c9 	.word	0x9000a2c9
9000a1f0:	9000a2c9 	.word	0x9000a2c9
9000a1f4:	9000a2c9 	.word	0x9000a2c9
9000a1f8:	9000a2c9 	.word	0x9000a2c9
9000a1fc:	9000a2c9 	.word	0x9000a2c9
9000a200:	9000a2c9 	.word	0x9000a2c9
9000a204:	9000a2c9 	.word	0x9000a2c9
9000a208:	9000a27b 	.word	0x9000a27b
9000a20c:	9000a2c9 	.word	0x9000a2c9
9000a210:	9000a2c9 	.word	0x9000a2c9
9000a214:	9000a2c9 	.word	0x9000a2c9
9000a218:	9000a2c9 	.word	0x9000a2c9
9000a21c:	9000a2c9 	.word	0x9000a2c9
9000a220:	9000a2c9 	.word	0x9000a2c9
9000a224:	9000a2c9 	.word	0x9000a2c9
9000a228:	9000a2c9 	.word	0x9000a2c9
9000a22c:	9000a2c9 	.word	0x9000a2c9
9000a230:	9000a2c9 	.word	0x9000a2c9
9000a234:	9000a2c9 	.word	0x9000a2c9
9000a238:	9000a2c9 	.word	0x9000a2c9
9000a23c:	9000a2c9 	.word	0x9000a2c9
9000a240:	9000a2c9 	.word	0x9000a2c9
9000a244:	9000a2c9 	.word	0x9000a2c9
9000a248:	9000a2bb 	.word	0x9000a2bb
9000a24c:	2b40      	cmp	r3, #64	@ 0x40
9000a24e:	d037      	beq.n	9000a2c0 <UART_SetConfig+0x6bc>
9000a250:	e03a      	b.n	9000a2c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a252:	f7fe fdcd 	bl	90008df0 <HAL_RCCEx_GetD3PCLK1Freq>
9000a256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a258:	e03c      	b.n	9000a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a25a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a25e:	4618      	mov	r0, r3
9000a260:	f7fe fddc 	bl	90008e1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a268:	e034      	b.n	9000a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a26a:	f107 0318 	add.w	r3, r7, #24
9000a26e:	4618      	mov	r0, r3
9000a270:	f7fe ff28 	bl	900090c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a274:	69fb      	ldr	r3, [r7, #28]
9000a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a278:	e02c      	b.n	9000a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a27a:	4b09      	ldr	r3, [pc, #36]	@ (9000a2a0 <UART_SetConfig+0x69c>)
9000a27c:	681b      	ldr	r3, [r3, #0]
9000a27e:	f003 0320 	and.w	r3, r3, #32
9000a282:	2b00      	cmp	r3, #0
9000a284:	d016      	beq.n	9000a2b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a286:	4b06      	ldr	r3, [pc, #24]	@ (9000a2a0 <UART_SetConfig+0x69c>)
9000a288:	681b      	ldr	r3, [r3, #0]
9000a28a:	08db      	lsrs	r3, r3, #3
9000a28c:	f003 0303 	and.w	r3, r3, #3
9000a290:	4a07      	ldr	r2, [pc, #28]	@ (9000a2b0 <UART_SetConfig+0x6ac>)
9000a292:	fa22 f303 	lsr.w	r3, r2, r3
9000a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a298:	e01c      	b.n	9000a2d4 <UART_SetConfig+0x6d0>
9000a29a:	bf00      	nop
9000a29c:	40011400 	.word	0x40011400
9000a2a0:	58024400 	.word	0x58024400
9000a2a4:	40007800 	.word	0x40007800
9000a2a8:	40007c00 	.word	0x40007c00
9000a2ac:	58000c00 	.word	0x58000c00
9000a2b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a2b4:	4b9d      	ldr	r3, [pc, #628]	@ (9000a52c <UART_SetConfig+0x928>)
9000a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a2b8:	e00c      	b.n	9000a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a2ba:	4b9d      	ldr	r3, [pc, #628]	@ (9000a530 <UART_SetConfig+0x92c>)
9000a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a2be:	e009      	b.n	9000a2d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a2c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a2c6:	e005      	b.n	9000a2d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a2c8:	2300      	movs	r3, #0
9000a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a2cc:	2301      	movs	r3, #1
9000a2ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a2d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a2d6:	2b00      	cmp	r3, #0
9000a2d8:	f000 81de 	beq.w	9000a698 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a2dc:	697b      	ldr	r3, [r7, #20]
9000a2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a2e0:	4a94      	ldr	r2, [pc, #592]	@ (9000a534 <UART_SetConfig+0x930>)
9000a2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a2e6:	461a      	mov	r2, r3
9000a2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a2ea:	fbb3 f3f2 	udiv	r3, r3, r2
9000a2ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a2f0:	697b      	ldr	r3, [r7, #20]
9000a2f2:	685a      	ldr	r2, [r3, #4]
9000a2f4:	4613      	mov	r3, r2
9000a2f6:	005b      	lsls	r3, r3, #1
9000a2f8:	4413      	add	r3, r2
9000a2fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a2fc:	429a      	cmp	r2, r3
9000a2fe:	d305      	bcc.n	9000a30c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a300:	697b      	ldr	r3, [r7, #20]
9000a302:	685b      	ldr	r3, [r3, #4]
9000a304:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a308:	429a      	cmp	r2, r3
9000a30a:	d903      	bls.n	9000a314 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a30c:	2301      	movs	r3, #1
9000a30e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a312:	e1c1      	b.n	9000a698 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a316:	2200      	movs	r2, #0
9000a318:	60bb      	str	r3, [r7, #8]
9000a31a:	60fa      	str	r2, [r7, #12]
9000a31c:	697b      	ldr	r3, [r7, #20]
9000a31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a320:	4a84      	ldr	r2, [pc, #528]	@ (9000a534 <UART_SetConfig+0x930>)
9000a322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a326:	b29b      	uxth	r3, r3
9000a328:	2200      	movs	r2, #0
9000a32a:	603b      	str	r3, [r7, #0]
9000a32c:	607a      	str	r2, [r7, #4]
9000a32e:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a336:	f7f6 f823 	bl	90000380 <__aeabi_uldivmod>
9000a33a:	4602      	mov	r2, r0
9000a33c:	460b      	mov	r3, r1
9000a33e:	4610      	mov	r0, r2
9000a340:	4619      	mov	r1, r3
9000a342:	f04f 0200 	mov.w	r2, #0
9000a346:	f04f 0300 	mov.w	r3, #0
9000a34a:	020b      	lsls	r3, r1, #8
9000a34c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a350:	0202      	lsls	r2, r0, #8
9000a352:	6979      	ldr	r1, [r7, #20]
9000a354:	6849      	ldr	r1, [r1, #4]
9000a356:	0849      	lsrs	r1, r1, #1
9000a358:	2000      	movs	r0, #0
9000a35a:	460c      	mov	r4, r1
9000a35c:	4605      	mov	r5, r0
9000a35e:	eb12 0804 	adds.w	r8, r2, r4
9000a362:	eb43 0905 	adc.w	r9, r3, r5
9000a366:	697b      	ldr	r3, [r7, #20]
9000a368:	685b      	ldr	r3, [r3, #4]
9000a36a:	2200      	movs	r2, #0
9000a36c:	469a      	mov	sl, r3
9000a36e:	4693      	mov	fp, r2
9000a370:	4652      	mov	r2, sl
9000a372:	465b      	mov	r3, fp
9000a374:	4640      	mov	r0, r8
9000a376:	4649      	mov	r1, r9
9000a378:	f7f6 f802 	bl	90000380 <__aeabi_uldivmod>
9000a37c:	4602      	mov	r2, r0
9000a37e:	460b      	mov	r3, r1
9000a380:	4613      	mov	r3, r2
9000a382:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a38a:	d308      	bcc.n	9000a39e <UART_SetConfig+0x79a>
9000a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a38e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a392:	d204      	bcs.n	9000a39e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a394:	697b      	ldr	r3, [r7, #20]
9000a396:	681b      	ldr	r3, [r3, #0]
9000a398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a39a:	60da      	str	r2, [r3, #12]
9000a39c:	e17c      	b.n	9000a698 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a39e:	2301      	movs	r3, #1
9000a3a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a3a4:	e178      	b.n	9000a698 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a3a6:	697b      	ldr	r3, [r7, #20]
9000a3a8:	69db      	ldr	r3, [r3, #28]
9000a3aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a3ae:	f040 80c5 	bne.w	9000a53c <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a3b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a3b6:	2b20      	cmp	r3, #32
9000a3b8:	dc48      	bgt.n	9000a44c <UART_SetConfig+0x848>
9000a3ba:	2b00      	cmp	r3, #0
9000a3bc:	db7b      	blt.n	9000a4b6 <UART_SetConfig+0x8b2>
9000a3be:	2b20      	cmp	r3, #32
9000a3c0:	d879      	bhi.n	9000a4b6 <UART_SetConfig+0x8b2>
9000a3c2:	a201      	add	r2, pc, #4	@ (adr r2, 9000a3c8 <UART_SetConfig+0x7c4>)
9000a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a3c8:	9000a453 	.word	0x9000a453
9000a3cc:	9000a45b 	.word	0x9000a45b
9000a3d0:	9000a4b7 	.word	0x9000a4b7
9000a3d4:	9000a4b7 	.word	0x9000a4b7
9000a3d8:	9000a463 	.word	0x9000a463
9000a3dc:	9000a4b7 	.word	0x9000a4b7
9000a3e0:	9000a4b7 	.word	0x9000a4b7
9000a3e4:	9000a4b7 	.word	0x9000a4b7
9000a3e8:	9000a473 	.word	0x9000a473
9000a3ec:	9000a4b7 	.word	0x9000a4b7
9000a3f0:	9000a4b7 	.word	0x9000a4b7
9000a3f4:	9000a4b7 	.word	0x9000a4b7
9000a3f8:	9000a4b7 	.word	0x9000a4b7
9000a3fc:	9000a4b7 	.word	0x9000a4b7
9000a400:	9000a4b7 	.word	0x9000a4b7
9000a404:	9000a4b7 	.word	0x9000a4b7
9000a408:	9000a483 	.word	0x9000a483
9000a40c:	9000a4b7 	.word	0x9000a4b7
9000a410:	9000a4b7 	.word	0x9000a4b7
9000a414:	9000a4b7 	.word	0x9000a4b7
9000a418:	9000a4b7 	.word	0x9000a4b7
9000a41c:	9000a4b7 	.word	0x9000a4b7
9000a420:	9000a4b7 	.word	0x9000a4b7
9000a424:	9000a4b7 	.word	0x9000a4b7
9000a428:	9000a4b7 	.word	0x9000a4b7
9000a42c:	9000a4b7 	.word	0x9000a4b7
9000a430:	9000a4b7 	.word	0x9000a4b7
9000a434:	9000a4b7 	.word	0x9000a4b7
9000a438:	9000a4b7 	.word	0x9000a4b7
9000a43c:	9000a4b7 	.word	0x9000a4b7
9000a440:	9000a4b7 	.word	0x9000a4b7
9000a444:	9000a4b7 	.word	0x9000a4b7
9000a448:	9000a4a9 	.word	0x9000a4a9
9000a44c:	2b40      	cmp	r3, #64	@ 0x40
9000a44e:	d02e      	beq.n	9000a4ae <UART_SetConfig+0x8aa>
9000a450:	e031      	b.n	9000a4b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a452:	f7fd fa97 	bl	90007984 <HAL_RCC_GetPCLK1Freq>
9000a456:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a458:	e033      	b.n	9000a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a45a:	f7fd faa9 	bl	900079b0 <HAL_RCC_GetPCLK2Freq>
9000a45e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a460:	e02f      	b.n	9000a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a466:	4618      	mov	r0, r3
9000a468:	f7fe fcd8 	bl	90008e1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a470:	e027      	b.n	9000a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a472:	f107 0318 	add.w	r3, r7, #24
9000a476:	4618      	mov	r0, r3
9000a478:	f7fe fe24 	bl	900090c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a47c:	69fb      	ldr	r3, [r7, #28]
9000a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a480:	e01f      	b.n	9000a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a482:	4b2d      	ldr	r3, [pc, #180]	@ (9000a538 <UART_SetConfig+0x934>)
9000a484:	681b      	ldr	r3, [r3, #0]
9000a486:	f003 0320 	and.w	r3, r3, #32
9000a48a:	2b00      	cmp	r3, #0
9000a48c:	d009      	beq.n	9000a4a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a48e:	4b2a      	ldr	r3, [pc, #168]	@ (9000a538 <UART_SetConfig+0x934>)
9000a490:	681b      	ldr	r3, [r3, #0]
9000a492:	08db      	lsrs	r3, r3, #3
9000a494:	f003 0303 	and.w	r3, r3, #3
9000a498:	4a24      	ldr	r2, [pc, #144]	@ (9000a52c <UART_SetConfig+0x928>)
9000a49a:	fa22 f303 	lsr.w	r3, r2, r3
9000a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a4a0:	e00f      	b.n	9000a4c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a4a2:	4b22      	ldr	r3, [pc, #136]	@ (9000a52c <UART_SetConfig+0x928>)
9000a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4a6:	e00c      	b.n	9000a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a4a8:	4b21      	ldr	r3, [pc, #132]	@ (9000a530 <UART_SetConfig+0x92c>)
9000a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4ac:	e009      	b.n	9000a4c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a4ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4b4:	e005      	b.n	9000a4c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a4b6:	2300      	movs	r3, #0
9000a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a4ba:	2301      	movs	r3, #1
9000a4bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a4c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4c4:	2b00      	cmp	r3, #0
9000a4c6:	f000 80e7 	beq.w	9000a698 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a4ca:	697b      	ldr	r3, [r7, #20]
9000a4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a4ce:	4a19      	ldr	r2, [pc, #100]	@ (9000a534 <UART_SetConfig+0x930>)
9000a4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a4d4:	461a      	mov	r2, r3
9000a4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4d8:	fbb3 f3f2 	udiv	r3, r3, r2
9000a4dc:	005a      	lsls	r2, r3, #1
9000a4de:	697b      	ldr	r3, [r7, #20]
9000a4e0:	685b      	ldr	r3, [r3, #4]
9000a4e2:	085b      	lsrs	r3, r3, #1
9000a4e4:	441a      	add	r2, r3
9000a4e6:	697b      	ldr	r3, [r7, #20]
9000a4e8:	685b      	ldr	r3, [r3, #4]
9000a4ea:	fbb2 f3f3 	udiv	r3, r2, r3
9000a4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4f2:	2b0f      	cmp	r3, #15
9000a4f4:	d916      	bls.n	9000a524 <UART_SetConfig+0x920>
9000a4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a4fc:	d212      	bcs.n	9000a524 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a500:	b29b      	uxth	r3, r3
9000a502:	f023 030f 	bic.w	r3, r3, #15
9000a506:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a50a:	085b      	lsrs	r3, r3, #1
9000a50c:	b29b      	uxth	r3, r3
9000a50e:	f003 0307 	and.w	r3, r3, #7
9000a512:	b29a      	uxth	r2, r3
9000a514:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a516:	4313      	orrs	r3, r2
9000a518:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a51a:	697b      	ldr	r3, [r7, #20]
9000a51c:	681b      	ldr	r3, [r3, #0]
9000a51e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a520:	60da      	str	r2, [r3, #12]
9000a522:	e0b9      	b.n	9000a698 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a524:	2301      	movs	r3, #1
9000a526:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a52a:	e0b5      	b.n	9000a698 <UART_SetConfig+0xa94>
9000a52c:	03d09000 	.word	0x03d09000
9000a530:	003d0900 	.word	0x003d0900
9000a534:	9000cdd4 	.word	0x9000cdd4
9000a538:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a53c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a540:	2b20      	cmp	r3, #32
9000a542:	dc49      	bgt.n	9000a5d8 <UART_SetConfig+0x9d4>
9000a544:	2b00      	cmp	r3, #0
9000a546:	db7c      	blt.n	9000a642 <UART_SetConfig+0xa3e>
9000a548:	2b20      	cmp	r3, #32
9000a54a:	d87a      	bhi.n	9000a642 <UART_SetConfig+0xa3e>
9000a54c:	a201      	add	r2, pc, #4	@ (adr r2, 9000a554 <UART_SetConfig+0x950>)
9000a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a552:	bf00      	nop
9000a554:	9000a5df 	.word	0x9000a5df
9000a558:	9000a5e7 	.word	0x9000a5e7
9000a55c:	9000a643 	.word	0x9000a643
9000a560:	9000a643 	.word	0x9000a643
9000a564:	9000a5ef 	.word	0x9000a5ef
9000a568:	9000a643 	.word	0x9000a643
9000a56c:	9000a643 	.word	0x9000a643
9000a570:	9000a643 	.word	0x9000a643
9000a574:	9000a5ff 	.word	0x9000a5ff
9000a578:	9000a643 	.word	0x9000a643
9000a57c:	9000a643 	.word	0x9000a643
9000a580:	9000a643 	.word	0x9000a643
9000a584:	9000a643 	.word	0x9000a643
9000a588:	9000a643 	.word	0x9000a643
9000a58c:	9000a643 	.word	0x9000a643
9000a590:	9000a643 	.word	0x9000a643
9000a594:	9000a60f 	.word	0x9000a60f
9000a598:	9000a643 	.word	0x9000a643
9000a59c:	9000a643 	.word	0x9000a643
9000a5a0:	9000a643 	.word	0x9000a643
9000a5a4:	9000a643 	.word	0x9000a643
9000a5a8:	9000a643 	.word	0x9000a643
9000a5ac:	9000a643 	.word	0x9000a643
9000a5b0:	9000a643 	.word	0x9000a643
9000a5b4:	9000a643 	.word	0x9000a643
9000a5b8:	9000a643 	.word	0x9000a643
9000a5bc:	9000a643 	.word	0x9000a643
9000a5c0:	9000a643 	.word	0x9000a643
9000a5c4:	9000a643 	.word	0x9000a643
9000a5c8:	9000a643 	.word	0x9000a643
9000a5cc:	9000a643 	.word	0x9000a643
9000a5d0:	9000a643 	.word	0x9000a643
9000a5d4:	9000a635 	.word	0x9000a635
9000a5d8:	2b40      	cmp	r3, #64	@ 0x40
9000a5da:	d02e      	beq.n	9000a63a <UART_SetConfig+0xa36>
9000a5dc:	e031      	b.n	9000a642 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a5de:	f7fd f9d1 	bl	90007984 <HAL_RCC_GetPCLK1Freq>
9000a5e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5e4:	e033      	b.n	9000a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a5e6:	f7fd f9e3 	bl	900079b0 <HAL_RCC_GetPCLK2Freq>
9000a5ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5ec:	e02f      	b.n	9000a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a5ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a5f2:	4618      	mov	r0, r3
9000a5f4:	f7fe fc12 	bl	90008e1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a5fc:	e027      	b.n	9000a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a5fe:	f107 0318 	add.w	r3, r7, #24
9000a602:	4618      	mov	r0, r3
9000a604:	f7fe fd5e 	bl	900090c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a608:	69fb      	ldr	r3, [r7, #28]
9000a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a60c:	e01f      	b.n	9000a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a60e:	4b2d      	ldr	r3, [pc, #180]	@ (9000a6c4 <UART_SetConfig+0xac0>)
9000a610:	681b      	ldr	r3, [r3, #0]
9000a612:	f003 0320 	and.w	r3, r3, #32
9000a616:	2b00      	cmp	r3, #0
9000a618:	d009      	beq.n	9000a62e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a61a:	4b2a      	ldr	r3, [pc, #168]	@ (9000a6c4 <UART_SetConfig+0xac0>)
9000a61c:	681b      	ldr	r3, [r3, #0]
9000a61e:	08db      	lsrs	r3, r3, #3
9000a620:	f003 0303 	and.w	r3, r3, #3
9000a624:	4a28      	ldr	r2, [pc, #160]	@ (9000a6c8 <UART_SetConfig+0xac4>)
9000a626:	fa22 f303 	lsr.w	r3, r2, r3
9000a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a62c:	e00f      	b.n	9000a64e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a62e:	4b26      	ldr	r3, [pc, #152]	@ (9000a6c8 <UART_SetConfig+0xac4>)
9000a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a632:	e00c      	b.n	9000a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a634:	4b25      	ldr	r3, [pc, #148]	@ (9000a6cc <UART_SetConfig+0xac8>)
9000a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a638:	e009      	b.n	9000a64e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a63a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a640:	e005      	b.n	9000a64e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a642:	2300      	movs	r3, #0
9000a644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a646:	2301      	movs	r3, #1
9000a648:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a64c:	bf00      	nop
    }

    if (pclk != 0U)
9000a64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a650:	2b00      	cmp	r3, #0
9000a652:	d021      	beq.n	9000a698 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a654:	697b      	ldr	r3, [r7, #20]
9000a656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a658:	4a1d      	ldr	r2, [pc, #116]	@ (9000a6d0 <UART_SetConfig+0xacc>)
9000a65a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a65e:	461a      	mov	r2, r3
9000a660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a662:	fbb3 f2f2 	udiv	r2, r3, r2
9000a666:	697b      	ldr	r3, [r7, #20]
9000a668:	685b      	ldr	r3, [r3, #4]
9000a66a:	085b      	lsrs	r3, r3, #1
9000a66c:	441a      	add	r2, r3
9000a66e:	697b      	ldr	r3, [r7, #20]
9000a670:	685b      	ldr	r3, [r3, #4]
9000a672:	fbb2 f3f3 	udiv	r3, r2, r3
9000a676:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a67a:	2b0f      	cmp	r3, #15
9000a67c:	d909      	bls.n	9000a692 <UART_SetConfig+0xa8e>
9000a67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a684:	d205      	bcs.n	9000a692 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a688:	b29a      	uxth	r2, r3
9000a68a:	697b      	ldr	r3, [r7, #20]
9000a68c:	681b      	ldr	r3, [r3, #0]
9000a68e:	60da      	str	r2, [r3, #12]
9000a690:	e002      	b.n	9000a698 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a692:	2301      	movs	r3, #1
9000a694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a698:	697b      	ldr	r3, [r7, #20]
9000a69a:	2201      	movs	r2, #1
9000a69c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a6a0:	697b      	ldr	r3, [r7, #20]
9000a6a2:	2201      	movs	r2, #1
9000a6a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a6a8:	697b      	ldr	r3, [r7, #20]
9000a6aa:	2200      	movs	r2, #0
9000a6ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a6ae:	697b      	ldr	r3, [r7, #20]
9000a6b0:	2200      	movs	r2, #0
9000a6b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a6b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a6b8:	4618      	mov	r0, r3
9000a6ba:	3748      	adds	r7, #72	@ 0x48
9000a6bc:	46bd      	mov	sp, r7
9000a6be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a6c2:	bf00      	nop
9000a6c4:	58024400 	.word	0x58024400
9000a6c8:	03d09000 	.word	0x03d09000
9000a6cc:	003d0900 	.word	0x003d0900
9000a6d0:	9000cdd4 	.word	0x9000cdd4

9000a6d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a6d4:	b480      	push	{r7}
9000a6d6:	b083      	sub	sp, #12
9000a6d8:	af00      	add	r7, sp, #0
9000a6da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a6dc:	687b      	ldr	r3, [r7, #4]
9000a6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a6e0:	f003 0308 	and.w	r3, r3, #8
9000a6e4:	2b00      	cmp	r3, #0
9000a6e6:	d00a      	beq.n	9000a6fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a6e8:	687b      	ldr	r3, [r7, #4]
9000a6ea:	681b      	ldr	r3, [r3, #0]
9000a6ec:	685b      	ldr	r3, [r3, #4]
9000a6ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a6f2:	687b      	ldr	r3, [r7, #4]
9000a6f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a6f6:	687b      	ldr	r3, [r7, #4]
9000a6f8:	681b      	ldr	r3, [r3, #0]
9000a6fa:	430a      	orrs	r2, r1
9000a6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a6fe:	687b      	ldr	r3, [r7, #4]
9000a700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a702:	f003 0301 	and.w	r3, r3, #1
9000a706:	2b00      	cmp	r3, #0
9000a708:	d00a      	beq.n	9000a720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a70a:	687b      	ldr	r3, [r7, #4]
9000a70c:	681b      	ldr	r3, [r3, #0]
9000a70e:	685b      	ldr	r3, [r3, #4]
9000a710:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a714:	687b      	ldr	r3, [r7, #4]
9000a716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a718:	687b      	ldr	r3, [r7, #4]
9000a71a:	681b      	ldr	r3, [r3, #0]
9000a71c:	430a      	orrs	r2, r1
9000a71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a720:	687b      	ldr	r3, [r7, #4]
9000a722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a724:	f003 0302 	and.w	r3, r3, #2
9000a728:	2b00      	cmp	r3, #0
9000a72a:	d00a      	beq.n	9000a742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a72c:	687b      	ldr	r3, [r7, #4]
9000a72e:	681b      	ldr	r3, [r3, #0]
9000a730:	685b      	ldr	r3, [r3, #4]
9000a732:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a736:	687b      	ldr	r3, [r7, #4]
9000a738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a73a:	687b      	ldr	r3, [r7, #4]
9000a73c:	681b      	ldr	r3, [r3, #0]
9000a73e:	430a      	orrs	r2, r1
9000a740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a742:	687b      	ldr	r3, [r7, #4]
9000a744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a746:	f003 0304 	and.w	r3, r3, #4
9000a74a:	2b00      	cmp	r3, #0
9000a74c:	d00a      	beq.n	9000a764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a74e:	687b      	ldr	r3, [r7, #4]
9000a750:	681b      	ldr	r3, [r3, #0]
9000a752:	685b      	ldr	r3, [r3, #4]
9000a754:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a758:	687b      	ldr	r3, [r7, #4]
9000a75a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a75c:	687b      	ldr	r3, [r7, #4]
9000a75e:	681b      	ldr	r3, [r3, #0]
9000a760:	430a      	orrs	r2, r1
9000a762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a764:	687b      	ldr	r3, [r7, #4]
9000a766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a768:	f003 0310 	and.w	r3, r3, #16
9000a76c:	2b00      	cmp	r3, #0
9000a76e:	d00a      	beq.n	9000a786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a770:	687b      	ldr	r3, [r7, #4]
9000a772:	681b      	ldr	r3, [r3, #0]
9000a774:	689b      	ldr	r3, [r3, #8]
9000a776:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a77a:	687b      	ldr	r3, [r7, #4]
9000a77c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a77e:	687b      	ldr	r3, [r7, #4]
9000a780:	681b      	ldr	r3, [r3, #0]
9000a782:	430a      	orrs	r2, r1
9000a784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a786:	687b      	ldr	r3, [r7, #4]
9000a788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a78a:	f003 0320 	and.w	r3, r3, #32
9000a78e:	2b00      	cmp	r3, #0
9000a790:	d00a      	beq.n	9000a7a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a792:	687b      	ldr	r3, [r7, #4]
9000a794:	681b      	ldr	r3, [r3, #0]
9000a796:	689b      	ldr	r3, [r3, #8]
9000a798:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a79c:	687b      	ldr	r3, [r7, #4]
9000a79e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a7a0:	687b      	ldr	r3, [r7, #4]
9000a7a2:	681b      	ldr	r3, [r3, #0]
9000a7a4:	430a      	orrs	r2, r1
9000a7a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a7a8:	687b      	ldr	r3, [r7, #4]
9000a7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a7b0:	2b00      	cmp	r3, #0
9000a7b2:	d01a      	beq.n	9000a7ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a7b4:	687b      	ldr	r3, [r7, #4]
9000a7b6:	681b      	ldr	r3, [r3, #0]
9000a7b8:	685b      	ldr	r3, [r3, #4]
9000a7ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a7be:	687b      	ldr	r3, [r7, #4]
9000a7c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a7c2:	687b      	ldr	r3, [r7, #4]
9000a7c4:	681b      	ldr	r3, [r3, #0]
9000a7c6:	430a      	orrs	r2, r1
9000a7c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a7ca:	687b      	ldr	r3, [r7, #4]
9000a7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a7ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a7d2:	d10a      	bne.n	9000a7ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a7d4:	687b      	ldr	r3, [r7, #4]
9000a7d6:	681b      	ldr	r3, [r3, #0]
9000a7d8:	685b      	ldr	r3, [r3, #4]
9000a7da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000a7de:	687b      	ldr	r3, [r7, #4]
9000a7e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000a7e2:	687b      	ldr	r3, [r7, #4]
9000a7e4:	681b      	ldr	r3, [r3, #0]
9000a7e6:	430a      	orrs	r2, r1
9000a7e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000a7ea:	687b      	ldr	r3, [r7, #4]
9000a7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a7ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000a7f2:	2b00      	cmp	r3, #0
9000a7f4:	d00a      	beq.n	9000a80c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000a7f6:	687b      	ldr	r3, [r7, #4]
9000a7f8:	681b      	ldr	r3, [r3, #0]
9000a7fa:	685b      	ldr	r3, [r3, #4]
9000a7fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000a800:	687b      	ldr	r3, [r7, #4]
9000a802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000a804:	687b      	ldr	r3, [r7, #4]
9000a806:	681b      	ldr	r3, [r3, #0]
9000a808:	430a      	orrs	r2, r1
9000a80a:	605a      	str	r2, [r3, #4]
  }
}
9000a80c:	bf00      	nop
9000a80e:	370c      	adds	r7, #12
9000a810:	46bd      	mov	sp, r7
9000a812:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a816:	4770      	bx	lr

9000a818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000a818:	b580      	push	{r7, lr}
9000a81a:	b098      	sub	sp, #96	@ 0x60
9000a81c:	af02      	add	r7, sp, #8
9000a81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a820:	687b      	ldr	r3, [r7, #4]
9000a822:	2200      	movs	r2, #0
9000a824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000a828:	f7f8 fc4a 	bl	900030c0 <HAL_GetTick>
9000a82c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000a82e:	687b      	ldr	r3, [r7, #4]
9000a830:	681b      	ldr	r3, [r3, #0]
9000a832:	681b      	ldr	r3, [r3, #0]
9000a834:	f003 0308 	and.w	r3, r3, #8
9000a838:	2b08      	cmp	r3, #8
9000a83a:	d12f      	bne.n	9000a89c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a83c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a840:	9300      	str	r3, [sp, #0]
9000a842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a844:	2200      	movs	r2, #0
9000a846:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000a84a:	6878      	ldr	r0, [r7, #4]
9000a84c:	f000 f88e 	bl	9000a96c <UART_WaitOnFlagUntilTimeout>
9000a850:	4603      	mov	r3, r0
9000a852:	2b00      	cmp	r3, #0
9000a854:	d022      	beq.n	9000a89c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000a856:	687b      	ldr	r3, [r7, #4]
9000a858:	681b      	ldr	r3, [r3, #0]
9000a85a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a85e:	e853 3f00 	ldrex	r3, [r3]
9000a862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000a866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a86a:	653b      	str	r3, [r7, #80]	@ 0x50
9000a86c:	687b      	ldr	r3, [r7, #4]
9000a86e:	681b      	ldr	r3, [r3, #0]
9000a870:	461a      	mov	r2, r3
9000a872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000a874:	647b      	str	r3, [r7, #68]	@ 0x44
9000a876:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000a87a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000a87c:	e841 2300 	strex	r3, r2, [r1]
9000a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000a882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a884:	2b00      	cmp	r3, #0
9000a886:	d1e6      	bne.n	9000a856 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000a888:	687b      	ldr	r3, [r7, #4]
9000a88a:	2220      	movs	r2, #32
9000a88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000a890:	687b      	ldr	r3, [r7, #4]
9000a892:	2200      	movs	r2, #0
9000a894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000a898:	2303      	movs	r3, #3
9000a89a:	e063      	b.n	9000a964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000a89c:	687b      	ldr	r3, [r7, #4]
9000a89e:	681b      	ldr	r3, [r3, #0]
9000a8a0:	681b      	ldr	r3, [r3, #0]
9000a8a2:	f003 0304 	and.w	r3, r3, #4
9000a8a6:	2b04      	cmp	r3, #4
9000a8a8:	d149      	bne.n	9000a93e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a8aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a8ae:	9300      	str	r3, [sp, #0]
9000a8b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a8b2:	2200      	movs	r2, #0
9000a8b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000a8b8:	6878      	ldr	r0, [r7, #4]
9000a8ba:	f000 f857 	bl	9000a96c <UART_WaitOnFlagUntilTimeout>
9000a8be:	4603      	mov	r3, r0
9000a8c0:	2b00      	cmp	r3, #0
9000a8c2:	d03c      	beq.n	9000a93e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000a8c4:	687b      	ldr	r3, [r7, #4]
9000a8c6:	681b      	ldr	r3, [r3, #0]
9000a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a8cc:	e853 3f00 	ldrex	r3, [r3]
9000a8d0:	623b      	str	r3, [r7, #32]
   return(result);
9000a8d2:	6a3b      	ldr	r3, [r7, #32]
9000a8d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000a8d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000a8da:	687b      	ldr	r3, [r7, #4]
9000a8dc:	681b      	ldr	r3, [r3, #0]
9000a8de:	461a      	mov	r2, r3
9000a8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000a8e2:	633b      	str	r3, [r7, #48]	@ 0x30
9000a8e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a8e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000a8e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a8ea:	e841 2300 	strex	r3, r2, [r1]
9000a8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000a8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a8f2:	2b00      	cmp	r3, #0
9000a8f4:	d1e6      	bne.n	9000a8c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000a8f6:	687b      	ldr	r3, [r7, #4]
9000a8f8:	681b      	ldr	r3, [r3, #0]
9000a8fa:	3308      	adds	r3, #8
9000a8fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a8fe:	693b      	ldr	r3, [r7, #16]
9000a900:	e853 3f00 	ldrex	r3, [r3]
9000a904:	60fb      	str	r3, [r7, #12]
   return(result);
9000a906:	68fb      	ldr	r3, [r7, #12]
9000a908:	f023 0301 	bic.w	r3, r3, #1
9000a90c:	64bb      	str	r3, [r7, #72]	@ 0x48
9000a90e:	687b      	ldr	r3, [r7, #4]
9000a910:	681b      	ldr	r3, [r3, #0]
9000a912:	3308      	adds	r3, #8
9000a914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000a916:	61fa      	str	r2, [r7, #28]
9000a918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a91a:	69b9      	ldr	r1, [r7, #24]
9000a91c:	69fa      	ldr	r2, [r7, #28]
9000a91e:	e841 2300 	strex	r3, r2, [r1]
9000a922:	617b      	str	r3, [r7, #20]
   return(result);
9000a924:	697b      	ldr	r3, [r7, #20]
9000a926:	2b00      	cmp	r3, #0
9000a928:	d1e5      	bne.n	9000a8f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000a92a:	687b      	ldr	r3, [r7, #4]
9000a92c:	2220      	movs	r2, #32
9000a92e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000a932:	687b      	ldr	r3, [r7, #4]
9000a934:	2200      	movs	r2, #0
9000a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000a93a:	2303      	movs	r3, #3
9000a93c:	e012      	b.n	9000a964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000a93e:	687b      	ldr	r3, [r7, #4]
9000a940:	2220      	movs	r2, #32
9000a942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000a946:	687b      	ldr	r3, [r7, #4]
9000a948:	2220      	movs	r2, #32
9000a94a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000a94e:	687b      	ldr	r3, [r7, #4]
9000a950:	2200      	movs	r2, #0
9000a952:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000a954:	687b      	ldr	r3, [r7, #4]
9000a956:	2200      	movs	r2, #0
9000a958:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000a95a:	687b      	ldr	r3, [r7, #4]
9000a95c:	2200      	movs	r2, #0
9000a95e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000a962:	2300      	movs	r3, #0
}
9000a964:	4618      	mov	r0, r3
9000a966:	3758      	adds	r7, #88	@ 0x58
9000a968:	46bd      	mov	sp, r7
9000a96a:	bd80      	pop	{r7, pc}

9000a96c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000a96c:	b580      	push	{r7, lr}
9000a96e:	b084      	sub	sp, #16
9000a970:	af00      	add	r7, sp, #0
9000a972:	60f8      	str	r0, [r7, #12]
9000a974:	60b9      	str	r1, [r7, #8]
9000a976:	603b      	str	r3, [r7, #0]
9000a978:	4613      	mov	r3, r2
9000a97a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000a97c:	e04f      	b.n	9000aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000a97e:	69bb      	ldr	r3, [r7, #24]
9000a980:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a984:	d04b      	beq.n	9000aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a986:	f7f8 fb9b 	bl	900030c0 <HAL_GetTick>
9000a98a:	4602      	mov	r2, r0
9000a98c:	683b      	ldr	r3, [r7, #0]
9000a98e:	1ad3      	subs	r3, r2, r3
9000a990:	69ba      	ldr	r2, [r7, #24]
9000a992:	429a      	cmp	r2, r3
9000a994:	d302      	bcc.n	9000a99c <UART_WaitOnFlagUntilTimeout+0x30>
9000a996:	69bb      	ldr	r3, [r7, #24]
9000a998:	2b00      	cmp	r3, #0
9000a99a:	d101      	bne.n	9000a9a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000a99c:	2303      	movs	r3, #3
9000a99e:	e04e      	b.n	9000aa3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000a9a0:	68fb      	ldr	r3, [r7, #12]
9000a9a2:	681b      	ldr	r3, [r3, #0]
9000a9a4:	681b      	ldr	r3, [r3, #0]
9000a9a6:	f003 0304 	and.w	r3, r3, #4
9000a9aa:	2b00      	cmp	r3, #0
9000a9ac:	d037      	beq.n	9000aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
9000a9ae:	68bb      	ldr	r3, [r7, #8]
9000a9b0:	2b80      	cmp	r3, #128	@ 0x80
9000a9b2:	d034      	beq.n	9000aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
9000a9b4:	68bb      	ldr	r3, [r7, #8]
9000a9b6:	2b40      	cmp	r3, #64	@ 0x40
9000a9b8:	d031      	beq.n	9000aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000a9ba:	68fb      	ldr	r3, [r7, #12]
9000a9bc:	681b      	ldr	r3, [r3, #0]
9000a9be:	69db      	ldr	r3, [r3, #28]
9000a9c0:	f003 0308 	and.w	r3, r3, #8
9000a9c4:	2b08      	cmp	r3, #8
9000a9c6:	d110      	bne.n	9000a9ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000a9c8:	68fb      	ldr	r3, [r7, #12]
9000a9ca:	681b      	ldr	r3, [r3, #0]
9000a9cc:	2208      	movs	r2, #8
9000a9ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000a9d0:	68f8      	ldr	r0, [r7, #12]
9000a9d2:	f000 f839 	bl	9000aa48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000a9d6:	68fb      	ldr	r3, [r7, #12]
9000a9d8:	2208      	movs	r2, #8
9000a9da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000a9de:	68fb      	ldr	r3, [r7, #12]
9000a9e0:	2200      	movs	r2, #0
9000a9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000a9e6:	2301      	movs	r3, #1
9000a9e8:	e029      	b.n	9000aa3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000a9ea:	68fb      	ldr	r3, [r7, #12]
9000a9ec:	681b      	ldr	r3, [r3, #0]
9000a9ee:	69db      	ldr	r3, [r3, #28]
9000a9f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000a9f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000a9f8:	d111      	bne.n	9000aa1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000a9fa:	68fb      	ldr	r3, [r7, #12]
9000a9fc:	681b      	ldr	r3, [r3, #0]
9000a9fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000aa02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000aa04:	68f8      	ldr	r0, [r7, #12]
9000aa06:	f000 f81f 	bl	9000aa48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000aa0a:	68fb      	ldr	r3, [r7, #12]
9000aa0c:	2220      	movs	r2, #32
9000aa0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000aa12:	68fb      	ldr	r3, [r7, #12]
9000aa14:	2200      	movs	r2, #0
9000aa16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000aa1a:	2303      	movs	r3, #3
9000aa1c:	e00f      	b.n	9000aa3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000aa1e:	68fb      	ldr	r3, [r7, #12]
9000aa20:	681b      	ldr	r3, [r3, #0]
9000aa22:	69da      	ldr	r2, [r3, #28]
9000aa24:	68bb      	ldr	r3, [r7, #8]
9000aa26:	4013      	ands	r3, r2
9000aa28:	68ba      	ldr	r2, [r7, #8]
9000aa2a:	429a      	cmp	r2, r3
9000aa2c:	bf0c      	ite	eq
9000aa2e:	2301      	moveq	r3, #1
9000aa30:	2300      	movne	r3, #0
9000aa32:	b2db      	uxtb	r3, r3
9000aa34:	461a      	mov	r2, r3
9000aa36:	79fb      	ldrb	r3, [r7, #7]
9000aa38:	429a      	cmp	r2, r3
9000aa3a:	d0a0      	beq.n	9000a97e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000aa3c:	2300      	movs	r3, #0
}
9000aa3e:	4618      	mov	r0, r3
9000aa40:	3710      	adds	r7, #16
9000aa42:	46bd      	mov	sp, r7
9000aa44:	bd80      	pop	{r7, pc}
	...

9000aa48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000aa48:	b480      	push	{r7}
9000aa4a:	b095      	sub	sp, #84	@ 0x54
9000aa4c:	af00      	add	r7, sp, #0
9000aa4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000aa50:	687b      	ldr	r3, [r7, #4]
9000aa52:	681b      	ldr	r3, [r3, #0]
9000aa54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000aa58:	e853 3f00 	ldrex	r3, [r3]
9000aa5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000aa60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000aa64:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000aa66:	687b      	ldr	r3, [r7, #4]
9000aa68:	681b      	ldr	r3, [r3, #0]
9000aa6a:	461a      	mov	r2, r3
9000aa6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000aa6e:	643b      	str	r3, [r7, #64]	@ 0x40
9000aa70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000aa74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000aa76:	e841 2300 	strex	r3, r2, [r1]
9000aa7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000aa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000aa7e:	2b00      	cmp	r3, #0
9000aa80:	d1e6      	bne.n	9000aa50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000aa82:	687b      	ldr	r3, [r7, #4]
9000aa84:	681b      	ldr	r3, [r3, #0]
9000aa86:	3308      	adds	r3, #8
9000aa88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa8a:	6a3b      	ldr	r3, [r7, #32]
9000aa8c:	e853 3f00 	ldrex	r3, [r3]
9000aa90:	61fb      	str	r3, [r7, #28]
   return(result);
9000aa92:	69fa      	ldr	r2, [r7, #28]
9000aa94:	4b1e      	ldr	r3, [pc, #120]	@ (9000ab10 <UART_EndRxTransfer+0xc8>)
9000aa96:	4013      	ands	r3, r2
9000aa98:	64bb      	str	r3, [r7, #72]	@ 0x48
9000aa9a:	687b      	ldr	r3, [r7, #4]
9000aa9c:	681b      	ldr	r3, [r3, #0]
9000aa9e:	3308      	adds	r3, #8
9000aaa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000aaa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000aaa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aaa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000aaa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000aaaa:	e841 2300 	strex	r3, r2, [r1]
9000aaae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000aab2:	2b00      	cmp	r3, #0
9000aab4:	d1e5      	bne.n	9000aa82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000aab6:	687b      	ldr	r3, [r7, #4]
9000aab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000aaba:	2b01      	cmp	r3, #1
9000aabc:	d118      	bne.n	9000aaf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000aabe:	687b      	ldr	r3, [r7, #4]
9000aac0:	681b      	ldr	r3, [r3, #0]
9000aac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aac4:	68fb      	ldr	r3, [r7, #12]
9000aac6:	e853 3f00 	ldrex	r3, [r3]
9000aaca:	60bb      	str	r3, [r7, #8]
   return(result);
9000aacc:	68bb      	ldr	r3, [r7, #8]
9000aace:	f023 0310 	bic.w	r3, r3, #16
9000aad2:	647b      	str	r3, [r7, #68]	@ 0x44
9000aad4:	687b      	ldr	r3, [r7, #4]
9000aad6:	681b      	ldr	r3, [r3, #0]
9000aad8:	461a      	mov	r2, r3
9000aada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000aadc:	61bb      	str	r3, [r7, #24]
9000aade:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aae0:	6979      	ldr	r1, [r7, #20]
9000aae2:	69ba      	ldr	r2, [r7, #24]
9000aae4:	e841 2300 	strex	r3, r2, [r1]
9000aae8:	613b      	str	r3, [r7, #16]
   return(result);
9000aaea:	693b      	ldr	r3, [r7, #16]
9000aaec:	2b00      	cmp	r3, #0
9000aaee:	d1e6      	bne.n	9000aabe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000aaf0:	687b      	ldr	r3, [r7, #4]
9000aaf2:	2220      	movs	r2, #32
9000aaf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000aaf8:	687b      	ldr	r3, [r7, #4]
9000aafa:	2200      	movs	r2, #0
9000aafc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000aafe:	687b      	ldr	r3, [r7, #4]
9000ab00:	2200      	movs	r2, #0
9000ab02:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000ab04:	bf00      	nop
9000ab06:	3754      	adds	r7, #84	@ 0x54
9000ab08:	46bd      	mov	sp, r7
9000ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ab0e:	4770      	bx	lr
9000ab10:	effffffe 	.word	0xeffffffe

9000ab14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000ab14:	b480      	push	{r7}
9000ab16:	b085      	sub	sp, #20
9000ab18:	af00      	add	r7, sp, #0
9000ab1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ab1c:	687b      	ldr	r3, [r7, #4]
9000ab1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ab22:	2b01      	cmp	r3, #1
9000ab24:	d101      	bne.n	9000ab2a <HAL_UARTEx_DisableFifoMode+0x16>
9000ab26:	2302      	movs	r3, #2
9000ab28:	e027      	b.n	9000ab7a <HAL_UARTEx_DisableFifoMode+0x66>
9000ab2a:	687b      	ldr	r3, [r7, #4]
9000ab2c:	2201      	movs	r2, #1
9000ab2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ab32:	687b      	ldr	r3, [r7, #4]
9000ab34:	2224      	movs	r2, #36	@ 0x24
9000ab36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ab3a:	687b      	ldr	r3, [r7, #4]
9000ab3c:	681b      	ldr	r3, [r3, #0]
9000ab3e:	681b      	ldr	r3, [r3, #0]
9000ab40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ab42:	687b      	ldr	r3, [r7, #4]
9000ab44:	681b      	ldr	r3, [r3, #0]
9000ab46:	681a      	ldr	r2, [r3, #0]
9000ab48:	687b      	ldr	r3, [r7, #4]
9000ab4a:	681b      	ldr	r3, [r3, #0]
9000ab4c:	f022 0201 	bic.w	r2, r2, #1
9000ab50:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000ab52:	68fb      	ldr	r3, [r7, #12]
9000ab54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000ab58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000ab5a:	687b      	ldr	r3, [r7, #4]
9000ab5c:	2200      	movs	r2, #0
9000ab5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ab60:	687b      	ldr	r3, [r7, #4]
9000ab62:	681b      	ldr	r3, [r3, #0]
9000ab64:	68fa      	ldr	r2, [r7, #12]
9000ab66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ab68:	687b      	ldr	r3, [r7, #4]
9000ab6a:	2220      	movs	r2, #32
9000ab6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ab70:	687b      	ldr	r3, [r7, #4]
9000ab72:	2200      	movs	r2, #0
9000ab74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ab78:	2300      	movs	r3, #0
}
9000ab7a:	4618      	mov	r0, r3
9000ab7c:	3714      	adds	r7, #20
9000ab7e:	46bd      	mov	sp, r7
9000ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ab84:	4770      	bx	lr

9000ab86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ab86:	b580      	push	{r7, lr}
9000ab88:	b084      	sub	sp, #16
9000ab8a:	af00      	add	r7, sp, #0
9000ab8c:	6078      	str	r0, [r7, #4]
9000ab8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ab90:	687b      	ldr	r3, [r7, #4]
9000ab92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ab96:	2b01      	cmp	r3, #1
9000ab98:	d101      	bne.n	9000ab9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000ab9a:	2302      	movs	r3, #2
9000ab9c:	e02d      	b.n	9000abfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000ab9e:	687b      	ldr	r3, [r7, #4]
9000aba0:	2201      	movs	r2, #1
9000aba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000aba6:	687b      	ldr	r3, [r7, #4]
9000aba8:	2224      	movs	r2, #36	@ 0x24
9000abaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000abae:	687b      	ldr	r3, [r7, #4]
9000abb0:	681b      	ldr	r3, [r3, #0]
9000abb2:	681b      	ldr	r3, [r3, #0]
9000abb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000abb6:	687b      	ldr	r3, [r7, #4]
9000abb8:	681b      	ldr	r3, [r3, #0]
9000abba:	681a      	ldr	r2, [r3, #0]
9000abbc:	687b      	ldr	r3, [r7, #4]
9000abbe:	681b      	ldr	r3, [r3, #0]
9000abc0:	f022 0201 	bic.w	r2, r2, #1
9000abc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000abc6:	687b      	ldr	r3, [r7, #4]
9000abc8:	681b      	ldr	r3, [r3, #0]
9000abca:	689b      	ldr	r3, [r3, #8]
9000abcc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000abd0:	687b      	ldr	r3, [r7, #4]
9000abd2:	681b      	ldr	r3, [r3, #0]
9000abd4:	683a      	ldr	r2, [r7, #0]
9000abd6:	430a      	orrs	r2, r1
9000abd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000abda:	6878      	ldr	r0, [r7, #4]
9000abdc:	f000 f850 	bl	9000ac80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000abe0:	687b      	ldr	r3, [r7, #4]
9000abe2:	681b      	ldr	r3, [r3, #0]
9000abe4:	68fa      	ldr	r2, [r7, #12]
9000abe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000abe8:	687b      	ldr	r3, [r7, #4]
9000abea:	2220      	movs	r2, #32
9000abec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000abf0:	687b      	ldr	r3, [r7, #4]
9000abf2:	2200      	movs	r2, #0
9000abf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000abf8:	2300      	movs	r3, #0
}
9000abfa:	4618      	mov	r0, r3
9000abfc:	3710      	adds	r7, #16
9000abfe:	46bd      	mov	sp, r7
9000ac00:	bd80      	pop	{r7, pc}

9000ac02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ac02:	b580      	push	{r7, lr}
9000ac04:	b084      	sub	sp, #16
9000ac06:	af00      	add	r7, sp, #0
9000ac08:	6078      	str	r0, [r7, #4]
9000ac0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ac0c:	687b      	ldr	r3, [r7, #4]
9000ac0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ac12:	2b01      	cmp	r3, #1
9000ac14:	d101      	bne.n	9000ac1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000ac16:	2302      	movs	r3, #2
9000ac18:	e02d      	b.n	9000ac76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000ac1a:	687b      	ldr	r3, [r7, #4]
9000ac1c:	2201      	movs	r2, #1
9000ac1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ac22:	687b      	ldr	r3, [r7, #4]
9000ac24:	2224      	movs	r2, #36	@ 0x24
9000ac26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ac2a:	687b      	ldr	r3, [r7, #4]
9000ac2c:	681b      	ldr	r3, [r3, #0]
9000ac2e:	681b      	ldr	r3, [r3, #0]
9000ac30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ac32:	687b      	ldr	r3, [r7, #4]
9000ac34:	681b      	ldr	r3, [r3, #0]
9000ac36:	681a      	ldr	r2, [r3, #0]
9000ac38:	687b      	ldr	r3, [r7, #4]
9000ac3a:	681b      	ldr	r3, [r3, #0]
9000ac3c:	f022 0201 	bic.w	r2, r2, #1
9000ac40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000ac42:	687b      	ldr	r3, [r7, #4]
9000ac44:	681b      	ldr	r3, [r3, #0]
9000ac46:	689b      	ldr	r3, [r3, #8]
9000ac48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000ac4c:	687b      	ldr	r3, [r7, #4]
9000ac4e:	681b      	ldr	r3, [r3, #0]
9000ac50:	683a      	ldr	r2, [r7, #0]
9000ac52:	430a      	orrs	r2, r1
9000ac54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ac56:	6878      	ldr	r0, [r7, #4]
9000ac58:	f000 f812 	bl	9000ac80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ac5c:	687b      	ldr	r3, [r7, #4]
9000ac5e:	681b      	ldr	r3, [r3, #0]
9000ac60:	68fa      	ldr	r2, [r7, #12]
9000ac62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ac64:	687b      	ldr	r3, [r7, #4]
9000ac66:	2220      	movs	r2, #32
9000ac68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ac6c:	687b      	ldr	r3, [r7, #4]
9000ac6e:	2200      	movs	r2, #0
9000ac70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ac74:	2300      	movs	r3, #0
}
9000ac76:	4618      	mov	r0, r3
9000ac78:	3710      	adds	r7, #16
9000ac7a:	46bd      	mov	sp, r7
9000ac7c:	bd80      	pop	{r7, pc}
	...

9000ac80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000ac80:	b480      	push	{r7}
9000ac82:	b085      	sub	sp, #20
9000ac84:	af00      	add	r7, sp, #0
9000ac86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000ac88:	687b      	ldr	r3, [r7, #4]
9000ac8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000ac8c:	2b00      	cmp	r3, #0
9000ac8e:	d108      	bne.n	9000aca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000ac90:	687b      	ldr	r3, [r7, #4]
9000ac92:	2201      	movs	r2, #1
9000ac94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000ac98:	687b      	ldr	r3, [r7, #4]
9000ac9a:	2201      	movs	r2, #1
9000ac9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000aca0:	e031      	b.n	9000ad06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000aca2:	2310      	movs	r3, #16
9000aca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000aca6:	2310      	movs	r3, #16
9000aca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000acaa:	687b      	ldr	r3, [r7, #4]
9000acac:	681b      	ldr	r3, [r3, #0]
9000acae:	689b      	ldr	r3, [r3, #8]
9000acb0:	0e5b      	lsrs	r3, r3, #25
9000acb2:	b2db      	uxtb	r3, r3
9000acb4:	f003 0307 	and.w	r3, r3, #7
9000acb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000acba:	687b      	ldr	r3, [r7, #4]
9000acbc:	681b      	ldr	r3, [r3, #0]
9000acbe:	689b      	ldr	r3, [r3, #8]
9000acc0:	0f5b      	lsrs	r3, r3, #29
9000acc2:	b2db      	uxtb	r3, r3
9000acc4:	f003 0307 	and.w	r3, r3, #7
9000acc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000acca:	7bbb      	ldrb	r3, [r7, #14]
9000accc:	7b3a      	ldrb	r2, [r7, #12]
9000acce:	4911      	ldr	r1, [pc, #68]	@ (9000ad14 <UARTEx_SetNbDataToProcess+0x94>)
9000acd0:	5c8a      	ldrb	r2, [r1, r2]
9000acd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000acd6:	7b3a      	ldrb	r2, [r7, #12]
9000acd8:	490f      	ldr	r1, [pc, #60]	@ (9000ad18 <UARTEx_SetNbDataToProcess+0x98>)
9000acda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000acdc:	fb93 f3f2 	sdiv	r3, r3, r2
9000ace0:	b29a      	uxth	r2, r3
9000ace2:	687b      	ldr	r3, [r7, #4]
9000ace4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ace8:	7bfb      	ldrb	r3, [r7, #15]
9000acea:	7b7a      	ldrb	r2, [r7, #13]
9000acec:	4909      	ldr	r1, [pc, #36]	@ (9000ad14 <UARTEx_SetNbDataToProcess+0x94>)
9000acee:	5c8a      	ldrb	r2, [r1, r2]
9000acf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000acf4:	7b7a      	ldrb	r2, [r7, #13]
9000acf6:	4908      	ldr	r1, [pc, #32]	@ (9000ad18 <UARTEx_SetNbDataToProcess+0x98>)
9000acf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000acfa:	fb93 f3f2 	sdiv	r3, r3, r2
9000acfe:	b29a      	uxth	r2, r3
9000ad00:	687b      	ldr	r3, [r7, #4]
9000ad02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000ad06:	bf00      	nop
9000ad08:	3714      	adds	r7, #20
9000ad0a:	46bd      	mov	sp, r7
9000ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad10:	4770      	bx	lr
9000ad12:	bf00      	nop
9000ad14:	9000cdec 	.word	0x9000cdec
9000ad18:	9000cdf4 	.word	0x9000cdf4

9000ad1c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000ad1c:	b480      	push	{r7}
9000ad1e:	b083      	sub	sp, #12
9000ad20:	af00      	add	r7, sp, #0
9000ad22:	6078      	str	r0, [r7, #4]
9000ad24:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000ad26:	683b      	ldr	r3, [r7, #0]
9000ad28:	681b      	ldr	r3, [r3, #0]
9000ad2a:	2b00      	cmp	r3, #0
9000ad2c:	d121      	bne.n	9000ad72 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ad2e:	687b      	ldr	r3, [r7, #4]
9000ad30:	681a      	ldr	r2, [r3, #0]
9000ad32:	4b27      	ldr	r3, [pc, #156]	@ (9000add0 <FMC_SDRAM_Init+0xb4>)
9000ad34:	4013      	ands	r3, r2
9000ad36:	683a      	ldr	r2, [r7, #0]
9000ad38:	6851      	ldr	r1, [r2, #4]
9000ad3a:	683a      	ldr	r2, [r7, #0]
9000ad3c:	6892      	ldr	r2, [r2, #8]
9000ad3e:	4311      	orrs	r1, r2
9000ad40:	683a      	ldr	r2, [r7, #0]
9000ad42:	68d2      	ldr	r2, [r2, #12]
9000ad44:	4311      	orrs	r1, r2
9000ad46:	683a      	ldr	r2, [r7, #0]
9000ad48:	6912      	ldr	r2, [r2, #16]
9000ad4a:	4311      	orrs	r1, r2
9000ad4c:	683a      	ldr	r2, [r7, #0]
9000ad4e:	6952      	ldr	r2, [r2, #20]
9000ad50:	4311      	orrs	r1, r2
9000ad52:	683a      	ldr	r2, [r7, #0]
9000ad54:	6992      	ldr	r2, [r2, #24]
9000ad56:	4311      	orrs	r1, r2
9000ad58:	683a      	ldr	r2, [r7, #0]
9000ad5a:	69d2      	ldr	r2, [r2, #28]
9000ad5c:	4311      	orrs	r1, r2
9000ad5e:	683a      	ldr	r2, [r7, #0]
9000ad60:	6a12      	ldr	r2, [r2, #32]
9000ad62:	4311      	orrs	r1, r2
9000ad64:	683a      	ldr	r2, [r7, #0]
9000ad66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000ad68:	430a      	orrs	r2, r1
9000ad6a:	431a      	orrs	r2, r3
9000ad6c:	687b      	ldr	r3, [r7, #4]
9000ad6e:	601a      	str	r2, [r3, #0]
9000ad70:	e026      	b.n	9000adc0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ad72:	687b      	ldr	r3, [r7, #4]
9000ad74:	681b      	ldr	r3, [r3, #0]
9000ad76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000ad7a:	683b      	ldr	r3, [r7, #0]
9000ad7c:	69d9      	ldr	r1, [r3, #28]
9000ad7e:	683b      	ldr	r3, [r7, #0]
9000ad80:	6a1b      	ldr	r3, [r3, #32]
9000ad82:	4319      	orrs	r1, r3
9000ad84:	683b      	ldr	r3, [r7, #0]
9000ad86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000ad88:	430b      	orrs	r3, r1
9000ad8a:	431a      	orrs	r2, r3
9000ad8c:	687b      	ldr	r3, [r7, #4]
9000ad8e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000ad90:	687b      	ldr	r3, [r7, #4]
9000ad92:	685a      	ldr	r2, [r3, #4]
9000ad94:	4b0e      	ldr	r3, [pc, #56]	@ (9000add0 <FMC_SDRAM_Init+0xb4>)
9000ad96:	4013      	ands	r3, r2
9000ad98:	683a      	ldr	r2, [r7, #0]
9000ad9a:	6851      	ldr	r1, [r2, #4]
9000ad9c:	683a      	ldr	r2, [r7, #0]
9000ad9e:	6892      	ldr	r2, [r2, #8]
9000ada0:	4311      	orrs	r1, r2
9000ada2:	683a      	ldr	r2, [r7, #0]
9000ada4:	68d2      	ldr	r2, [r2, #12]
9000ada6:	4311      	orrs	r1, r2
9000ada8:	683a      	ldr	r2, [r7, #0]
9000adaa:	6912      	ldr	r2, [r2, #16]
9000adac:	4311      	orrs	r1, r2
9000adae:	683a      	ldr	r2, [r7, #0]
9000adb0:	6952      	ldr	r2, [r2, #20]
9000adb2:	4311      	orrs	r1, r2
9000adb4:	683a      	ldr	r2, [r7, #0]
9000adb6:	6992      	ldr	r2, [r2, #24]
9000adb8:	430a      	orrs	r2, r1
9000adba:	431a      	orrs	r2, r3
9000adbc:	687b      	ldr	r3, [r7, #4]
9000adbe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000adc0:	2300      	movs	r3, #0
}
9000adc2:	4618      	mov	r0, r3
9000adc4:	370c      	adds	r7, #12
9000adc6:	46bd      	mov	sp, r7
9000adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000adcc:	4770      	bx	lr
9000adce:	bf00      	nop
9000add0:	ffff8000 	.word	0xffff8000

9000add4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000add4:	b480      	push	{r7}
9000add6:	b085      	sub	sp, #20
9000add8:	af00      	add	r7, sp, #0
9000adda:	60f8      	str	r0, [r7, #12]
9000addc:	60b9      	str	r1, [r7, #8]
9000adde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000ade0:	687b      	ldr	r3, [r7, #4]
9000ade2:	2b00      	cmp	r3, #0
9000ade4:	d128      	bne.n	9000ae38 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ade6:	68fb      	ldr	r3, [r7, #12]
9000ade8:	689b      	ldr	r3, [r3, #8]
9000adea:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000adee:	68bb      	ldr	r3, [r7, #8]
9000adf0:	681b      	ldr	r3, [r3, #0]
9000adf2:	1e59      	subs	r1, r3, #1
9000adf4:	68bb      	ldr	r3, [r7, #8]
9000adf6:	685b      	ldr	r3, [r3, #4]
9000adf8:	3b01      	subs	r3, #1
9000adfa:	011b      	lsls	r3, r3, #4
9000adfc:	4319      	orrs	r1, r3
9000adfe:	68bb      	ldr	r3, [r7, #8]
9000ae00:	689b      	ldr	r3, [r3, #8]
9000ae02:	3b01      	subs	r3, #1
9000ae04:	021b      	lsls	r3, r3, #8
9000ae06:	4319      	orrs	r1, r3
9000ae08:	68bb      	ldr	r3, [r7, #8]
9000ae0a:	68db      	ldr	r3, [r3, #12]
9000ae0c:	3b01      	subs	r3, #1
9000ae0e:	031b      	lsls	r3, r3, #12
9000ae10:	4319      	orrs	r1, r3
9000ae12:	68bb      	ldr	r3, [r7, #8]
9000ae14:	691b      	ldr	r3, [r3, #16]
9000ae16:	3b01      	subs	r3, #1
9000ae18:	041b      	lsls	r3, r3, #16
9000ae1a:	4319      	orrs	r1, r3
9000ae1c:	68bb      	ldr	r3, [r7, #8]
9000ae1e:	695b      	ldr	r3, [r3, #20]
9000ae20:	3b01      	subs	r3, #1
9000ae22:	051b      	lsls	r3, r3, #20
9000ae24:	4319      	orrs	r1, r3
9000ae26:	68bb      	ldr	r3, [r7, #8]
9000ae28:	699b      	ldr	r3, [r3, #24]
9000ae2a:	3b01      	subs	r3, #1
9000ae2c:	061b      	lsls	r3, r3, #24
9000ae2e:	430b      	orrs	r3, r1
9000ae30:	431a      	orrs	r2, r3
9000ae32:	68fb      	ldr	r3, [r7, #12]
9000ae34:	609a      	str	r2, [r3, #8]
9000ae36:	e02d      	b.n	9000ae94 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ae38:	68fb      	ldr	r3, [r7, #12]
9000ae3a:	689a      	ldr	r2, [r3, #8]
9000ae3c:	4b19      	ldr	r3, [pc, #100]	@ (9000aea4 <FMC_SDRAM_Timing_Init+0xd0>)
9000ae3e:	4013      	ands	r3, r2
9000ae40:	68ba      	ldr	r2, [r7, #8]
9000ae42:	68d2      	ldr	r2, [r2, #12]
9000ae44:	3a01      	subs	r2, #1
9000ae46:	0311      	lsls	r1, r2, #12
9000ae48:	68ba      	ldr	r2, [r7, #8]
9000ae4a:	6952      	ldr	r2, [r2, #20]
9000ae4c:	3a01      	subs	r2, #1
9000ae4e:	0512      	lsls	r2, r2, #20
9000ae50:	430a      	orrs	r2, r1
9000ae52:	431a      	orrs	r2, r3
9000ae54:	68fb      	ldr	r3, [r7, #12]
9000ae56:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ae58:	68fb      	ldr	r3, [r7, #12]
9000ae5a:	68db      	ldr	r3, [r3, #12]
9000ae5c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000ae60:	68bb      	ldr	r3, [r7, #8]
9000ae62:	681b      	ldr	r3, [r3, #0]
9000ae64:	1e59      	subs	r1, r3, #1
9000ae66:	68bb      	ldr	r3, [r7, #8]
9000ae68:	685b      	ldr	r3, [r3, #4]
9000ae6a:	3b01      	subs	r3, #1
9000ae6c:	011b      	lsls	r3, r3, #4
9000ae6e:	4319      	orrs	r1, r3
9000ae70:	68bb      	ldr	r3, [r7, #8]
9000ae72:	689b      	ldr	r3, [r3, #8]
9000ae74:	3b01      	subs	r3, #1
9000ae76:	021b      	lsls	r3, r3, #8
9000ae78:	4319      	orrs	r1, r3
9000ae7a:	68bb      	ldr	r3, [r7, #8]
9000ae7c:	691b      	ldr	r3, [r3, #16]
9000ae7e:	3b01      	subs	r3, #1
9000ae80:	041b      	lsls	r3, r3, #16
9000ae82:	4319      	orrs	r1, r3
9000ae84:	68bb      	ldr	r3, [r7, #8]
9000ae86:	699b      	ldr	r3, [r3, #24]
9000ae88:	3b01      	subs	r3, #1
9000ae8a:	061b      	lsls	r3, r3, #24
9000ae8c:	430b      	orrs	r3, r1
9000ae8e:	431a      	orrs	r2, r3
9000ae90:	68fb      	ldr	r3, [r7, #12]
9000ae92:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000ae94:	2300      	movs	r3, #0
}
9000ae96:	4618      	mov	r0, r3
9000ae98:	3714      	adds	r7, #20
9000ae9a:	46bd      	mov	sp, r7
9000ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aea0:	4770      	bx	lr
9000aea2:	bf00      	nop
9000aea4:	ff0f0fff 	.word	0xff0f0fff

9000aea8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000aea8:	b480      	push	{r7}
9000aeaa:	b085      	sub	sp, #20
9000aeac:	af00      	add	r7, sp, #0
9000aeae:	60f8      	str	r0, [r7, #12]
9000aeb0:	60b9      	str	r1, [r7, #8]
9000aeb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000aeb4:	68fb      	ldr	r3, [r7, #12]
9000aeb6:	691a      	ldr	r2, [r3, #16]
9000aeb8:	4b0c      	ldr	r3, [pc, #48]	@ (9000aeec <FMC_SDRAM_SendCommand+0x44>)
9000aeba:	4013      	ands	r3, r2
9000aebc:	68ba      	ldr	r2, [r7, #8]
9000aebe:	6811      	ldr	r1, [r2, #0]
9000aec0:	68ba      	ldr	r2, [r7, #8]
9000aec2:	6852      	ldr	r2, [r2, #4]
9000aec4:	4311      	orrs	r1, r2
9000aec6:	68ba      	ldr	r2, [r7, #8]
9000aec8:	6892      	ldr	r2, [r2, #8]
9000aeca:	3a01      	subs	r2, #1
9000aecc:	0152      	lsls	r2, r2, #5
9000aece:	4311      	orrs	r1, r2
9000aed0:	68ba      	ldr	r2, [r7, #8]
9000aed2:	68d2      	ldr	r2, [r2, #12]
9000aed4:	0252      	lsls	r2, r2, #9
9000aed6:	430a      	orrs	r2, r1
9000aed8:	431a      	orrs	r2, r3
9000aeda:	68fb      	ldr	r3, [r7, #12]
9000aedc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000aede:	2300      	movs	r3, #0
}
9000aee0:	4618      	mov	r0, r3
9000aee2:	3714      	adds	r7, #20
9000aee4:	46bd      	mov	sp, r7
9000aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aeea:	4770      	bx	lr
9000aeec:	ffc00000 	.word	0xffc00000

9000aef0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000aef0:	b480      	push	{r7}
9000aef2:	b083      	sub	sp, #12
9000aef4:	af00      	add	r7, sp, #0
9000aef6:	6078      	str	r0, [r7, #4]
9000aef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000aefa:	687b      	ldr	r3, [r7, #4]
9000aefc:	695a      	ldr	r2, [r3, #20]
9000aefe:	4b07      	ldr	r3, [pc, #28]	@ (9000af1c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000af00:	4013      	ands	r3, r2
9000af02:	683a      	ldr	r2, [r7, #0]
9000af04:	0052      	lsls	r2, r2, #1
9000af06:	431a      	orrs	r2, r3
9000af08:	687b      	ldr	r3, [r7, #4]
9000af0a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000af0c:	2300      	movs	r3, #0
}
9000af0e:	4618      	mov	r0, r3
9000af10:	370c      	adds	r7, #12
9000af12:	46bd      	mov	sp, r7
9000af14:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af18:	4770      	bx	lr
9000af1a:	bf00      	nop
9000af1c:	ffffc001 	.word	0xffffc001

9000af20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000af20:	b480      	push	{r7}
9000af22:	b083      	sub	sp, #12
9000af24:	af00      	add	r7, sp, #0
9000af26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000af28:	687b      	ldr	r3, [r7, #4]
9000af2a:	689b      	ldr	r3, [r3, #8]
9000af2c:	f043 0201 	orr.w	r2, r3, #1
9000af30:	687b      	ldr	r3, [r7, #4]
9000af32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000af34:	2300      	movs	r3, #0
}
9000af36:	4618      	mov	r0, r3
9000af38:	370c      	adds	r7, #12
9000af3a:	46bd      	mov	sp, r7
9000af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af40:	4770      	bx	lr

9000af42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000af42:	b480      	push	{r7}
9000af44:	b083      	sub	sp, #12
9000af46:	af00      	add	r7, sp, #0
9000af48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000af4a:	687b      	ldr	r3, [r7, #4]
9000af4c:	689b      	ldr	r3, [r3, #8]
9000af4e:	f023 0201 	bic.w	r2, r3, #1
9000af52:	687b      	ldr	r3, [r7, #4]
9000af54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000af56:	2300      	movs	r3, #0
}
9000af58:	4618      	mov	r0, r3
9000af5a:	370c      	adds	r7, #12
9000af5c:	46bd      	mov	sp, r7
9000af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af62:	4770      	bx	lr

9000af64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000af64:	b480      	push	{r7}
9000af66:	b085      	sub	sp, #20
9000af68:	af00      	add	r7, sp, #0
9000af6a:	6078      	str	r0, [r7, #4]
9000af6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000af6e:	2300      	movs	r3, #0
9000af70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000af72:	68fb      	ldr	r3, [r7, #12]
9000af74:	3301      	adds	r3, #1
9000af76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000af78:	68fb      	ldr	r3, [r7, #12]
9000af7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000af7e:	d901      	bls.n	9000af84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000af80:	2303      	movs	r3, #3
9000af82:	e01b      	b.n	9000afbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000af84:	687b      	ldr	r3, [r7, #4]
9000af86:	691b      	ldr	r3, [r3, #16]
9000af88:	2b00      	cmp	r3, #0
9000af8a:	daf2      	bge.n	9000af72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000af8c:	2300      	movs	r3, #0
9000af8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000af90:	683b      	ldr	r3, [r7, #0]
9000af92:	019b      	lsls	r3, r3, #6
9000af94:	f043 0220 	orr.w	r2, r3, #32
9000af98:	687b      	ldr	r3, [r7, #4]
9000af9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000af9c:	68fb      	ldr	r3, [r7, #12]
9000af9e:	3301      	adds	r3, #1
9000afa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000afa2:	68fb      	ldr	r3, [r7, #12]
9000afa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000afa8:	d901      	bls.n	9000afae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000afaa:	2303      	movs	r3, #3
9000afac:	e006      	b.n	9000afbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000afae:	687b      	ldr	r3, [r7, #4]
9000afb0:	691b      	ldr	r3, [r3, #16]
9000afb2:	f003 0320 	and.w	r3, r3, #32
9000afb6:	2b20      	cmp	r3, #32
9000afb8:	d0f0      	beq.n	9000af9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000afba:	2300      	movs	r3, #0
}
9000afbc:	4618      	mov	r0, r3
9000afbe:	3714      	adds	r7, #20
9000afc0:	46bd      	mov	sp, r7
9000afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000afc6:	4770      	bx	lr

9000afc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000afc8:	b480      	push	{r7}
9000afca:	b085      	sub	sp, #20
9000afcc:	af00      	add	r7, sp, #0
9000afce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000afd0:	2300      	movs	r3, #0
9000afd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000afd4:	68fb      	ldr	r3, [r7, #12]
9000afd6:	3301      	adds	r3, #1
9000afd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000afda:	68fb      	ldr	r3, [r7, #12]
9000afdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000afe0:	d901      	bls.n	9000afe6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000afe2:	2303      	movs	r3, #3
9000afe4:	e018      	b.n	9000b018 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000afe6:	687b      	ldr	r3, [r7, #4]
9000afe8:	691b      	ldr	r3, [r3, #16]
9000afea:	2b00      	cmp	r3, #0
9000afec:	daf2      	bge.n	9000afd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000afee:	2300      	movs	r3, #0
9000aff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000aff2:	687b      	ldr	r3, [r7, #4]
9000aff4:	2210      	movs	r2, #16
9000aff6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000aff8:	68fb      	ldr	r3, [r7, #12]
9000affa:	3301      	adds	r3, #1
9000affc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000affe:	68fb      	ldr	r3, [r7, #12]
9000b000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b004:	d901      	bls.n	9000b00a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b006:	2303      	movs	r3, #3
9000b008:	e006      	b.n	9000b018 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b00a:	687b      	ldr	r3, [r7, #4]
9000b00c:	691b      	ldr	r3, [r3, #16]
9000b00e:	f003 0310 	and.w	r3, r3, #16
9000b012:	2b10      	cmp	r3, #16
9000b014:	d0f0      	beq.n	9000aff8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b016:	2300      	movs	r3, #0
}
9000b018:	4618      	mov	r0, r3
9000b01a:	3714      	adds	r7, #20
9000b01c:	46bd      	mov	sp, r7
9000b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b022:	4770      	bx	lr

9000b024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b024:	b480      	push	{r7}
9000b026:	b08b      	sub	sp, #44	@ 0x2c
9000b028:	af00      	add	r7, sp, #0
9000b02a:	60f8      	str	r0, [r7, #12]
9000b02c:	60b9      	str	r1, [r7, #8]
9000b02e:	4613      	mov	r3, r2
9000b030:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b032:	68fb      	ldr	r3, [r7, #12]
9000b034:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b036:	68bb      	ldr	r3, [r7, #8]
9000b038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b03a:	88fb      	ldrh	r3, [r7, #6]
9000b03c:	089b      	lsrs	r3, r3, #2
9000b03e:	b29b      	uxth	r3, r3
9000b040:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b042:	88fb      	ldrh	r3, [r7, #6]
9000b044:	f003 0303 	and.w	r3, r3, #3
9000b048:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b04a:	2300      	movs	r3, #0
9000b04c:	623b      	str	r3, [r7, #32]
9000b04e:	e014      	b.n	9000b07a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b050:	69bb      	ldr	r3, [r7, #24]
9000b052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b056:	681a      	ldr	r2, [r3, #0]
9000b058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b05a:	601a      	str	r2, [r3, #0]
    pDest++;
9000b05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b05e:	3301      	adds	r3, #1
9000b060:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b064:	3301      	adds	r3, #1
9000b066:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b06a:	3301      	adds	r3, #1
9000b06c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b070:	3301      	adds	r3, #1
9000b072:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b074:	6a3b      	ldr	r3, [r7, #32]
9000b076:	3301      	adds	r3, #1
9000b078:	623b      	str	r3, [r7, #32]
9000b07a:	6a3a      	ldr	r2, [r7, #32]
9000b07c:	697b      	ldr	r3, [r7, #20]
9000b07e:	429a      	cmp	r2, r3
9000b080:	d3e6      	bcc.n	9000b050 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b082:	8bfb      	ldrh	r3, [r7, #30]
9000b084:	2b00      	cmp	r3, #0
9000b086:	d01e      	beq.n	9000b0c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b088:	2300      	movs	r3, #0
9000b08a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b08c:	69bb      	ldr	r3, [r7, #24]
9000b08e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b092:	461a      	mov	r2, r3
9000b094:	f107 0310 	add.w	r3, r7, #16
9000b098:	6812      	ldr	r2, [r2, #0]
9000b09a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b09c:	693a      	ldr	r2, [r7, #16]
9000b09e:	6a3b      	ldr	r3, [r7, #32]
9000b0a0:	b2db      	uxtb	r3, r3
9000b0a2:	00db      	lsls	r3, r3, #3
9000b0a4:	fa22 f303 	lsr.w	r3, r2, r3
9000b0a8:	b2da      	uxtb	r2, r3
9000b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b0ac:	701a      	strb	r2, [r3, #0]
      i++;
9000b0ae:	6a3b      	ldr	r3, [r7, #32]
9000b0b0:	3301      	adds	r3, #1
9000b0b2:	623b      	str	r3, [r7, #32]
      pDest++;
9000b0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b0b6:	3301      	adds	r3, #1
9000b0b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b0ba:	8bfb      	ldrh	r3, [r7, #30]
9000b0bc:	3b01      	subs	r3, #1
9000b0be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b0c0:	8bfb      	ldrh	r3, [r7, #30]
9000b0c2:	2b00      	cmp	r3, #0
9000b0c4:	d1ea      	bne.n	9000b09c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b0c8:	4618      	mov	r0, r3
9000b0ca:	372c      	adds	r7, #44	@ 0x2c
9000b0cc:	46bd      	mov	sp, r7
9000b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0d2:	4770      	bx	lr

9000b0d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b0d4:	b480      	push	{r7}
9000b0d6:	b085      	sub	sp, #20
9000b0d8:	af00      	add	r7, sp, #0
9000b0da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b0dc:	687b      	ldr	r3, [r7, #4]
9000b0de:	695b      	ldr	r3, [r3, #20]
9000b0e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b0e2:	687b      	ldr	r3, [r7, #4]
9000b0e4:	699b      	ldr	r3, [r3, #24]
9000b0e6:	68fa      	ldr	r2, [r7, #12]
9000b0e8:	4013      	ands	r3, r2
9000b0ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b0ec:	68fb      	ldr	r3, [r7, #12]
}
9000b0ee:	4618      	mov	r0, r3
9000b0f0:	3714      	adds	r7, #20
9000b0f2:	46bd      	mov	sp, r7
9000b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0f8:	4770      	bx	lr

9000b0fa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b0fa:	b480      	push	{r7}
9000b0fc:	b085      	sub	sp, #20
9000b0fe:	af00      	add	r7, sp, #0
9000b100:	6078      	str	r0, [r7, #4]
9000b102:	460b      	mov	r3, r1
9000b104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b106:	687b      	ldr	r3, [r7, #4]
9000b108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b10a:	78fb      	ldrb	r3, [r7, #3]
9000b10c:	015a      	lsls	r2, r3, #5
9000b10e:	68fb      	ldr	r3, [r7, #12]
9000b110:	4413      	add	r3, r2
9000b112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b116:	689b      	ldr	r3, [r3, #8]
9000b118:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b11a:	78fb      	ldrb	r3, [r7, #3]
9000b11c:	015a      	lsls	r2, r3, #5
9000b11e:	68fb      	ldr	r3, [r7, #12]
9000b120:	4413      	add	r3, r2
9000b122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b126:	68db      	ldr	r3, [r3, #12]
9000b128:	68ba      	ldr	r2, [r7, #8]
9000b12a:	4013      	ands	r3, r2
9000b12c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b12e:	68bb      	ldr	r3, [r7, #8]
}
9000b130:	4618      	mov	r0, r3
9000b132:	3714      	adds	r7, #20
9000b134:	46bd      	mov	sp, r7
9000b136:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b13a:	4770      	bx	lr

9000b13c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b13c:	b480      	push	{r7}
9000b13e:	b083      	sub	sp, #12
9000b140:	af00      	add	r7, sp, #0
9000b142:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b144:	687b      	ldr	r3, [r7, #4]
9000b146:	695b      	ldr	r3, [r3, #20]
9000b148:	f003 0301 	and.w	r3, r3, #1
}
9000b14c:	4618      	mov	r0, r3
9000b14e:	370c      	adds	r7, #12
9000b150:	46bd      	mov	sp, r7
9000b152:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b156:	4770      	bx	lr

9000b158 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b158:	b480      	push	{r7}
9000b15a:	b085      	sub	sp, #20
9000b15c:	af00      	add	r7, sp, #0
9000b15e:	6078      	str	r0, [r7, #4]
9000b160:	460b      	mov	r3, r1
9000b162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b164:	687b      	ldr	r3, [r7, #4]
9000b166:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b168:	68fb      	ldr	r3, [r7, #12]
9000b16a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b16e:	681b      	ldr	r3, [r3, #0]
9000b170:	68fa      	ldr	r2, [r7, #12]
9000b172:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b176:	f023 0303 	bic.w	r3, r3, #3
9000b17a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b17c:	68fb      	ldr	r3, [r7, #12]
9000b17e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b182:	681a      	ldr	r2, [r3, #0]
9000b184:	78fb      	ldrb	r3, [r7, #3]
9000b186:	f003 0303 	and.w	r3, r3, #3
9000b18a:	68f9      	ldr	r1, [r7, #12]
9000b18c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b190:	4313      	orrs	r3, r2
9000b192:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b194:	78fb      	ldrb	r3, [r7, #3]
9000b196:	2b01      	cmp	r3, #1
9000b198:	d107      	bne.n	9000b1aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b19a:	68fb      	ldr	r3, [r7, #12]
9000b19c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b1a0:	461a      	mov	r2, r3
9000b1a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b1a6:	6053      	str	r3, [r2, #4]
9000b1a8:	e00c      	b.n	9000b1c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b1aa:	78fb      	ldrb	r3, [r7, #3]
9000b1ac:	2b02      	cmp	r3, #2
9000b1ae:	d107      	bne.n	9000b1c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b1b0:	68fb      	ldr	r3, [r7, #12]
9000b1b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b1b6:	461a      	mov	r2, r3
9000b1b8:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b1bc:	6053      	str	r3, [r2, #4]
9000b1be:	e001      	b.n	9000b1c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b1c0:	2301      	movs	r3, #1
9000b1c2:	e000      	b.n	9000b1c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b1c4:	2300      	movs	r3, #0
}
9000b1c6:	4618      	mov	r0, r3
9000b1c8:	3714      	adds	r7, #20
9000b1ca:	46bd      	mov	sp, r7
9000b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1d0:	4770      	bx	lr

9000b1d2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b1d2:	b480      	push	{r7}
9000b1d4:	b085      	sub	sp, #20
9000b1d6:	af00      	add	r7, sp, #0
9000b1d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b1da:	687b      	ldr	r3, [r7, #4]
9000b1dc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b1de:	68fb      	ldr	r3, [r7, #12]
9000b1e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b1e4:	695b      	ldr	r3, [r3, #20]
9000b1e6:	b29b      	uxth	r3, r3
}
9000b1e8:	4618      	mov	r0, r3
9000b1ea:	3714      	adds	r7, #20
9000b1ec:	46bd      	mov	sp, r7
9000b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1f2:	4770      	bx	lr

9000b1f4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b1f4:	b480      	push	{r7}
9000b1f6:	b089      	sub	sp, #36	@ 0x24
9000b1f8:	af00      	add	r7, sp, #0
9000b1fa:	6078      	str	r0, [r7, #4]
9000b1fc:	460b      	mov	r3, r1
9000b1fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b200:	687b      	ldr	r3, [r7, #4]
9000b202:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b204:	78fb      	ldrb	r3, [r7, #3]
9000b206:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b208:	2300      	movs	r3, #0
9000b20a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b20c:	69bb      	ldr	r3, [r7, #24]
9000b20e:	015a      	lsls	r2, r3, #5
9000b210:	69fb      	ldr	r3, [r7, #28]
9000b212:	4413      	add	r3, r2
9000b214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b218:	681b      	ldr	r3, [r3, #0]
9000b21a:	0c9b      	lsrs	r3, r3, #18
9000b21c:	f003 0303 	and.w	r3, r3, #3
9000b220:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b222:	69bb      	ldr	r3, [r7, #24]
9000b224:	015a      	lsls	r2, r3, #5
9000b226:	69fb      	ldr	r3, [r7, #28]
9000b228:	4413      	add	r3, r2
9000b22a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b22e:	681b      	ldr	r3, [r3, #0]
9000b230:	0fdb      	lsrs	r3, r3, #31
9000b232:	f003 0301 	and.w	r3, r3, #1
9000b236:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b238:	69bb      	ldr	r3, [r7, #24]
9000b23a:	015a      	lsls	r2, r3, #5
9000b23c:	69fb      	ldr	r3, [r7, #28]
9000b23e:	4413      	add	r3, r2
9000b240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b244:	685b      	ldr	r3, [r3, #4]
9000b246:	0fdb      	lsrs	r3, r3, #31
9000b248:	f003 0301 	and.w	r3, r3, #1
9000b24c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b24e:	687b      	ldr	r3, [r7, #4]
9000b250:	689b      	ldr	r3, [r3, #8]
9000b252:	f003 0320 	and.w	r3, r3, #32
9000b256:	2b20      	cmp	r3, #32
9000b258:	d10d      	bne.n	9000b276 <USB_HC_Halt+0x82>
9000b25a:	68fb      	ldr	r3, [r7, #12]
9000b25c:	2b00      	cmp	r3, #0
9000b25e:	d10a      	bne.n	9000b276 <USB_HC_Halt+0x82>
9000b260:	693b      	ldr	r3, [r7, #16]
9000b262:	2b00      	cmp	r3, #0
9000b264:	d005      	beq.n	9000b272 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b266:	697b      	ldr	r3, [r7, #20]
9000b268:	2b01      	cmp	r3, #1
9000b26a:	d002      	beq.n	9000b272 <USB_HC_Halt+0x7e>
9000b26c:	697b      	ldr	r3, [r7, #20]
9000b26e:	2b03      	cmp	r3, #3
9000b270:	d101      	bne.n	9000b276 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b272:	2300      	movs	r3, #0
9000b274:	e0d8      	b.n	9000b428 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b276:	697b      	ldr	r3, [r7, #20]
9000b278:	2b00      	cmp	r3, #0
9000b27a:	d002      	beq.n	9000b282 <USB_HC_Halt+0x8e>
9000b27c:	697b      	ldr	r3, [r7, #20]
9000b27e:	2b02      	cmp	r3, #2
9000b280:	d173      	bne.n	9000b36a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b282:	69bb      	ldr	r3, [r7, #24]
9000b284:	015a      	lsls	r2, r3, #5
9000b286:	69fb      	ldr	r3, [r7, #28]
9000b288:	4413      	add	r3, r2
9000b28a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b28e:	681b      	ldr	r3, [r3, #0]
9000b290:	69ba      	ldr	r2, [r7, #24]
9000b292:	0151      	lsls	r1, r2, #5
9000b294:	69fa      	ldr	r2, [r7, #28]
9000b296:	440a      	add	r2, r1
9000b298:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b29c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b2a0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b2a2:	687b      	ldr	r3, [r7, #4]
9000b2a4:	689b      	ldr	r3, [r3, #8]
9000b2a6:	f003 0320 	and.w	r3, r3, #32
9000b2aa:	2b00      	cmp	r3, #0
9000b2ac:	d14a      	bne.n	9000b344 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b2ae:	687b      	ldr	r3, [r7, #4]
9000b2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b2b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b2b6:	2b00      	cmp	r3, #0
9000b2b8:	d133      	bne.n	9000b322 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b2ba:	69bb      	ldr	r3, [r7, #24]
9000b2bc:	015a      	lsls	r2, r3, #5
9000b2be:	69fb      	ldr	r3, [r7, #28]
9000b2c0:	4413      	add	r3, r2
9000b2c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b2c6:	681b      	ldr	r3, [r3, #0]
9000b2c8:	69ba      	ldr	r2, [r7, #24]
9000b2ca:	0151      	lsls	r1, r2, #5
9000b2cc:	69fa      	ldr	r2, [r7, #28]
9000b2ce:	440a      	add	r2, r1
9000b2d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b2d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b2d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b2da:	69bb      	ldr	r3, [r7, #24]
9000b2dc:	015a      	lsls	r2, r3, #5
9000b2de:	69fb      	ldr	r3, [r7, #28]
9000b2e0:	4413      	add	r3, r2
9000b2e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b2e6:	681b      	ldr	r3, [r3, #0]
9000b2e8:	69ba      	ldr	r2, [r7, #24]
9000b2ea:	0151      	lsls	r1, r2, #5
9000b2ec:	69fa      	ldr	r2, [r7, #28]
9000b2ee:	440a      	add	r2, r1
9000b2f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b2f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b2f8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b2fa:	68bb      	ldr	r3, [r7, #8]
9000b2fc:	3301      	adds	r3, #1
9000b2fe:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b300:	68bb      	ldr	r3, [r7, #8]
9000b302:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b306:	d82e      	bhi.n	9000b366 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b308:	69bb      	ldr	r3, [r7, #24]
9000b30a:	015a      	lsls	r2, r3, #5
9000b30c:	69fb      	ldr	r3, [r7, #28]
9000b30e:	4413      	add	r3, r2
9000b310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b314:	681b      	ldr	r3, [r3, #0]
9000b316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b31a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b31e:	d0ec      	beq.n	9000b2fa <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b320:	e081      	b.n	9000b426 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b322:	69bb      	ldr	r3, [r7, #24]
9000b324:	015a      	lsls	r2, r3, #5
9000b326:	69fb      	ldr	r3, [r7, #28]
9000b328:	4413      	add	r3, r2
9000b32a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b32e:	681b      	ldr	r3, [r3, #0]
9000b330:	69ba      	ldr	r2, [r7, #24]
9000b332:	0151      	lsls	r1, r2, #5
9000b334:	69fa      	ldr	r2, [r7, #28]
9000b336:	440a      	add	r2, r1
9000b338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b33c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b340:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b342:	e070      	b.n	9000b426 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b344:	69bb      	ldr	r3, [r7, #24]
9000b346:	015a      	lsls	r2, r3, #5
9000b348:	69fb      	ldr	r3, [r7, #28]
9000b34a:	4413      	add	r3, r2
9000b34c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b350:	681b      	ldr	r3, [r3, #0]
9000b352:	69ba      	ldr	r2, [r7, #24]
9000b354:	0151      	lsls	r1, r2, #5
9000b356:	69fa      	ldr	r2, [r7, #28]
9000b358:	440a      	add	r2, r1
9000b35a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b35e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b362:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b364:	e05f      	b.n	9000b426 <USB_HC_Halt+0x232>
            break;
9000b366:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b368:	e05d      	b.n	9000b426 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b36a:	69bb      	ldr	r3, [r7, #24]
9000b36c:	015a      	lsls	r2, r3, #5
9000b36e:	69fb      	ldr	r3, [r7, #28]
9000b370:	4413      	add	r3, r2
9000b372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b376:	681b      	ldr	r3, [r3, #0]
9000b378:	69ba      	ldr	r2, [r7, #24]
9000b37a:	0151      	lsls	r1, r2, #5
9000b37c:	69fa      	ldr	r2, [r7, #28]
9000b37e:	440a      	add	r2, r1
9000b380:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b388:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b38a:	69fb      	ldr	r3, [r7, #28]
9000b38c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b390:	691b      	ldr	r3, [r3, #16]
9000b392:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b396:	2b00      	cmp	r3, #0
9000b398:	d133      	bne.n	9000b402 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b39a:	69bb      	ldr	r3, [r7, #24]
9000b39c:	015a      	lsls	r2, r3, #5
9000b39e:	69fb      	ldr	r3, [r7, #28]
9000b3a0:	4413      	add	r3, r2
9000b3a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3a6:	681b      	ldr	r3, [r3, #0]
9000b3a8:	69ba      	ldr	r2, [r7, #24]
9000b3aa:	0151      	lsls	r1, r2, #5
9000b3ac:	69fa      	ldr	r2, [r7, #28]
9000b3ae:	440a      	add	r2, r1
9000b3b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b3b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b3b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b3ba:	69bb      	ldr	r3, [r7, #24]
9000b3bc:	015a      	lsls	r2, r3, #5
9000b3be:	69fb      	ldr	r3, [r7, #28]
9000b3c0:	4413      	add	r3, r2
9000b3c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3c6:	681b      	ldr	r3, [r3, #0]
9000b3c8:	69ba      	ldr	r2, [r7, #24]
9000b3ca:	0151      	lsls	r1, r2, #5
9000b3cc:	69fa      	ldr	r2, [r7, #28]
9000b3ce:	440a      	add	r2, r1
9000b3d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b3d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b3d8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b3da:	68bb      	ldr	r3, [r7, #8]
9000b3dc:	3301      	adds	r3, #1
9000b3de:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b3e0:	68bb      	ldr	r3, [r7, #8]
9000b3e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b3e6:	d81d      	bhi.n	9000b424 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b3e8:	69bb      	ldr	r3, [r7, #24]
9000b3ea:	015a      	lsls	r2, r3, #5
9000b3ec:	69fb      	ldr	r3, [r7, #28]
9000b3ee:	4413      	add	r3, r2
9000b3f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3f4:	681b      	ldr	r3, [r3, #0]
9000b3f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b3fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b3fe:	d0ec      	beq.n	9000b3da <USB_HC_Halt+0x1e6>
9000b400:	e011      	b.n	9000b426 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b402:	69bb      	ldr	r3, [r7, #24]
9000b404:	015a      	lsls	r2, r3, #5
9000b406:	69fb      	ldr	r3, [r7, #28]
9000b408:	4413      	add	r3, r2
9000b40a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b40e:	681b      	ldr	r3, [r3, #0]
9000b410:	69ba      	ldr	r2, [r7, #24]
9000b412:	0151      	lsls	r1, r2, #5
9000b414:	69fa      	ldr	r2, [r7, #28]
9000b416:	440a      	add	r2, r1
9000b418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b41c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b420:	6013      	str	r3, [r2, #0]
9000b422:	e000      	b.n	9000b426 <USB_HC_Halt+0x232>
          break;
9000b424:	bf00      	nop
    }
  }

  return HAL_OK;
9000b426:	2300      	movs	r3, #0
}
9000b428:	4618      	mov	r0, r3
9000b42a:	3724      	adds	r7, #36	@ 0x24
9000b42c:	46bd      	mov	sp, r7
9000b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b432:	4770      	bx	lr

9000b434 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b434:	b580      	push	{r7, lr}
9000b436:	b088      	sub	sp, #32
9000b438:	af00      	add	r7, sp, #0
9000b43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b43c:	2300      	movs	r3, #0
9000b43e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b440:	687b      	ldr	r3, [r7, #4]
9000b442:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b444:	2300      	movs	r3, #0
9000b446:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b448:	6878      	ldr	r0, [r7, #4]
9000b44a:	f7ff fd7a 	bl	9000af42 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b44e:	2110      	movs	r1, #16
9000b450:	6878      	ldr	r0, [r7, #4]
9000b452:	f7ff fd87 	bl	9000af64 <USB_FlushTxFifo>
9000b456:	4603      	mov	r3, r0
9000b458:	2b00      	cmp	r3, #0
9000b45a:	d001      	beq.n	9000b460 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b45c:	2301      	movs	r3, #1
9000b45e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b460:	6878      	ldr	r0, [r7, #4]
9000b462:	f7ff fdb1 	bl	9000afc8 <USB_FlushRxFifo>
9000b466:	4603      	mov	r3, r0
9000b468:	2b00      	cmp	r3, #0
9000b46a:	d001      	beq.n	9000b470 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b46c:	2301      	movs	r3, #1
9000b46e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b470:	2300      	movs	r3, #0
9000b472:	61bb      	str	r3, [r7, #24]
9000b474:	e01f      	b.n	9000b4b6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b476:	69bb      	ldr	r3, [r7, #24]
9000b478:	015a      	lsls	r2, r3, #5
9000b47a:	697b      	ldr	r3, [r7, #20]
9000b47c:	4413      	add	r3, r2
9000b47e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b482:	681b      	ldr	r3, [r3, #0]
9000b484:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b486:	693b      	ldr	r3, [r7, #16]
9000b488:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b48c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b48e:	693b      	ldr	r3, [r7, #16]
9000b490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b494:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b496:	693b      	ldr	r3, [r7, #16]
9000b498:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b49c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b49e:	69bb      	ldr	r3, [r7, #24]
9000b4a0:	015a      	lsls	r2, r3, #5
9000b4a2:	697b      	ldr	r3, [r7, #20]
9000b4a4:	4413      	add	r3, r2
9000b4a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4aa:	461a      	mov	r2, r3
9000b4ac:	693b      	ldr	r3, [r7, #16]
9000b4ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b4b0:	69bb      	ldr	r3, [r7, #24]
9000b4b2:	3301      	adds	r3, #1
9000b4b4:	61bb      	str	r3, [r7, #24]
9000b4b6:	69bb      	ldr	r3, [r7, #24]
9000b4b8:	2b0f      	cmp	r3, #15
9000b4ba:	d9dc      	bls.n	9000b476 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b4bc:	2300      	movs	r3, #0
9000b4be:	61bb      	str	r3, [r7, #24]
9000b4c0:	e034      	b.n	9000b52c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b4c2:	69bb      	ldr	r3, [r7, #24]
9000b4c4:	015a      	lsls	r2, r3, #5
9000b4c6:	697b      	ldr	r3, [r7, #20]
9000b4c8:	4413      	add	r3, r2
9000b4ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4ce:	681b      	ldr	r3, [r3, #0]
9000b4d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b4d2:	693b      	ldr	r3, [r7, #16]
9000b4d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b4d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b4da:	693b      	ldr	r3, [r7, #16]
9000b4dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b4e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b4e2:	693b      	ldr	r3, [r7, #16]
9000b4e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b4e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b4ea:	69bb      	ldr	r3, [r7, #24]
9000b4ec:	015a      	lsls	r2, r3, #5
9000b4ee:	697b      	ldr	r3, [r7, #20]
9000b4f0:	4413      	add	r3, r2
9000b4f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4f6:	461a      	mov	r2, r3
9000b4f8:	693b      	ldr	r3, [r7, #16]
9000b4fa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b4fc:	68fb      	ldr	r3, [r7, #12]
9000b4fe:	3301      	adds	r3, #1
9000b500:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b502:	68fb      	ldr	r3, [r7, #12]
9000b504:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b508:	d80c      	bhi.n	9000b524 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b50a:	69bb      	ldr	r3, [r7, #24]
9000b50c:	015a      	lsls	r2, r3, #5
9000b50e:	697b      	ldr	r3, [r7, #20]
9000b510:	4413      	add	r3, r2
9000b512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b516:	681b      	ldr	r3, [r3, #0]
9000b518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b51c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b520:	d0ec      	beq.n	9000b4fc <USB_StopHost+0xc8>
9000b522:	e000      	b.n	9000b526 <USB_StopHost+0xf2>
        break;
9000b524:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b526:	69bb      	ldr	r3, [r7, #24]
9000b528:	3301      	adds	r3, #1
9000b52a:	61bb      	str	r3, [r7, #24]
9000b52c:	69bb      	ldr	r3, [r7, #24]
9000b52e:	2b0f      	cmp	r3, #15
9000b530:	d9c7      	bls.n	9000b4c2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b532:	697b      	ldr	r3, [r7, #20]
9000b534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b538:	461a      	mov	r2, r3
9000b53a:	f04f 33ff 	mov.w	r3, #4294967295
9000b53e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b540:	687b      	ldr	r3, [r7, #4]
9000b542:	f04f 32ff 	mov.w	r2, #4294967295
9000b546:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b548:	6878      	ldr	r0, [r7, #4]
9000b54a:	f7ff fce9 	bl	9000af20 <USB_EnableGlobalInt>

  return ret;
9000b54e:	7ffb      	ldrb	r3, [r7, #31]
}
9000b550:	4618      	mov	r0, r3
9000b552:	3720      	adds	r7, #32
9000b554:	46bd      	mov	sp, r7
9000b556:	bd80      	pop	{r7, pc}

9000b558 <Hello>:
 */

#include "FlexiKeyboard.h"

void Hello(void)
{
9000b558:	b480      	push	{r7}
9000b55a:	b083      	sub	sp, #12
9000b55c:	af00      	add	r7, sp, #0
	int a = 4;
9000b55e:	2304      	movs	r3, #4
9000b560:	607b      	str	r3, [r7, #4]
}
9000b562:	bf00      	nop
9000b564:	370c      	adds	r7, #12
9000b566:	46bd      	mov	sp, r7
9000b568:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b56c:	4770      	bx	lr

9000b56e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000b56e:	b580      	push	{r7, lr}
9000b570:	b082      	sub	sp, #8
9000b572:	af00      	add	r7, sp, #0
9000b574:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000b576:	687b      	ldr	r3, [r7, #4]
9000b578:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000b57c:	1c5a      	adds	r2, r3, #1
9000b57e:	687b      	ldr	r3, [r7, #4]
9000b580:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000b584:	6878      	ldr	r0, [r7, #4]
9000b586:	f000 f804 	bl	9000b592 <USBH_HandleSof>
}
9000b58a:	bf00      	nop
9000b58c:	3708      	adds	r7, #8
9000b58e:	46bd      	mov	sp, r7
9000b590:	bd80      	pop	{r7, pc}

9000b592 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000b592:	b580      	push	{r7, lr}
9000b594:	b082      	sub	sp, #8
9000b596:	af00      	add	r7, sp, #0
9000b598:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000b59a:	687b      	ldr	r3, [r7, #4]
9000b59c:	781b      	ldrb	r3, [r3, #0]
9000b59e:	b2db      	uxtb	r3, r3
9000b5a0:	2b0b      	cmp	r3, #11
9000b5a2:	d10a      	bne.n	9000b5ba <USBH_HandleSof+0x28>
9000b5a4:	687b      	ldr	r3, [r7, #4]
9000b5a6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b5aa:	2b00      	cmp	r3, #0
9000b5ac:	d005      	beq.n	9000b5ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000b5ae:	687b      	ldr	r3, [r7, #4]
9000b5b0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b5b4:	699b      	ldr	r3, [r3, #24]
9000b5b6:	6878      	ldr	r0, [r7, #4]
9000b5b8:	4798      	blx	r3
  }
}
9000b5ba:	bf00      	nop
9000b5bc:	3708      	adds	r7, #8
9000b5be:	46bd      	mov	sp, r7
9000b5c0:	bd80      	pop	{r7, pc}

9000b5c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000b5c2:	b480      	push	{r7}
9000b5c4:	b083      	sub	sp, #12
9000b5c6:	af00      	add	r7, sp, #0
9000b5c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000b5ca:	687b      	ldr	r3, [r7, #4]
9000b5cc:	2201      	movs	r2, #1
9000b5ce:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000b5d2:	bf00      	nop
}
9000b5d4:	370c      	adds	r7, #12
9000b5d6:	46bd      	mov	sp, r7
9000b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b5dc:	4770      	bx	lr

9000b5de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000b5de:	b480      	push	{r7}
9000b5e0:	b083      	sub	sp, #12
9000b5e2:	af00      	add	r7, sp, #0
9000b5e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000b5e6:	687b      	ldr	r3, [r7, #4]
9000b5e8:	2200      	movs	r2, #0
9000b5ea:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000b5ee:	687b      	ldr	r3, [r7, #4]
9000b5f0:	2201      	movs	r2, #1
9000b5f2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000b5f6:	bf00      	nop
}
9000b5f8:	370c      	adds	r7, #12
9000b5fa:	46bd      	mov	sp, r7
9000b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b600:	4770      	bx	lr

9000b602 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000b602:	b480      	push	{r7}
9000b604:	b083      	sub	sp, #12
9000b606:	af00      	add	r7, sp, #0
9000b608:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000b60a:	687b      	ldr	r3, [r7, #4]
9000b60c:	2201      	movs	r2, #1
9000b60e:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000b612:	687b      	ldr	r3, [r7, #4]
9000b614:	2200      	movs	r2, #0
9000b616:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000b61a:	687b      	ldr	r3, [r7, #4]
9000b61c:	2200      	movs	r2, #0
9000b61e:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000b622:	2300      	movs	r3, #0
}
9000b624:	4618      	mov	r0, r3
9000b626:	370c      	adds	r7, #12
9000b628:	46bd      	mov	sp, r7
9000b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b62e:	4770      	bx	lr

9000b630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000b630:	b580      	push	{r7, lr}
9000b632:	b082      	sub	sp, #8
9000b634:	af00      	add	r7, sp, #0
9000b636:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000b638:	687b      	ldr	r3, [r7, #4]
9000b63a:	2201      	movs	r2, #1
9000b63c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000b640:	687b      	ldr	r3, [r7, #4]
9000b642:	2200      	movs	r2, #0
9000b644:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000b648:	687b      	ldr	r3, [r7, #4]
9000b64a:	2200      	movs	r2, #0
9000b64c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000b650:	6878      	ldr	r0, [r7, #4]
9000b652:	f7f5 fde9 	bl	90001228 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000b656:	687b      	ldr	r3, [r7, #4]
9000b658:	791b      	ldrb	r3, [r3, #4]
9000b65a:	4619      	mov	r1, r3
9000b65c:	6878      	ldr	r0, [r7, #4]
9000b65e:	f000 f80b 	bl	9000b678 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000b662:	687b      	ldr	r3, [r7, #4]
9000b664:	795b      	ldrb	r3, [r3, #5]
9000b666:	4619      	mov	r1, r3
9000b668:	6878      	ldr	r0, [r7, #4]
9000b66a:	f000 f805 	bl	9000b678 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000b66e:	2300      	movs	r3, #0
}
9000b670:	4618      	mov	r0, r3
9000b672:	3708      	adds	r7, #8
9000b674:	46bd      	mov	sp, r7
9000b676:	bd80      	pop	{r7, pc}

9000b678 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000b678:	b480      	push	{r7}
9000b67a:	b083      	sub	sp, #12
9000b67c:	af00      	add	r7, sp, #0
9000b67e:	6078      	str	r0, [r7, #4]
9000b680:	460b      	mov	r3, r1
9000b682:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000b684:	78fb      	ldrb	r3, [r7, #3]
9000b686:	2b0f      	cmp	r3, #15
9000b688:	d80f      	bhi.n	9000b6aa <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000b68a:	78fb      	ldrb	r3, [r7, #3]
9000b68c:	687a      	ldr	r2, [r7, #4]
9000b68e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000b692:	009b      	lsls	r3, r3, #2
9000b694:	4413      	add	r3, r2
9000b696:	685a      	ldr	r2, [r3, #4]
9000b698:	78fb      	ldrb	r3, [r7, #3]
9000b69a:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000b69e:	6879      	ldr	r1, [r7, #4]
9000b6a0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000b6a4:	009b      	lsls	r3, r3, #2
9000b6a6:	440b      	add	r3, r1
9000b6a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000b6aa:	2300      	movs	r3, #0
}
9000b6ac:	4618      	mov	r0, r3
9000b6ae:	370c      	adds	r7, #12
9000b6b0:	46bd      	mov	sp, r7
9000b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b6b6:	4770      	bx	lr

9000b6b8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000b6b8:	b580      	push	{r7, lr}
9000b6ba:	b082      	sub	sp, #8
9000b6bc:	af00      	add	r7, sp, #0
9000b6be:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000b6c0:	687b      	ldr	r3, [r7, #4]
9000b6c2:	681b      	ldr	r3, [r3, #0]
9000b6c4:	4a22      	ldr	r2, [pc, #136]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6c6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000b6c8:	687b      	ldr	r3, [r7, #4]
9000b6ca:	685b      	ldr	r3, [r3, #4]
9000b6cc:	4a20      	ldr	r2, [pc, #128]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6ce:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000b6d0:	687b      	ldr	r3, [r7, #4]
9000b6d2:	689b      	ldr	r3, [r3, #8]
9000b6d4:	4a1e      	ldr	r2, [pc, #120]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6d6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000b6d8:	687b      	ldr	r3, [r7, #4]
9000b6da:	68db      	ldr	r3, [r3, #12]
9000b6dc:	4a1c      	ldr	r2, [pc, #112]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6de:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000b6e0:	687b      	ldr	r3, [r7, #4]
9000b6e2:	691b      	ldr	r3, [r3, #16]
9000b6e4:	4a1a      	ldr	r2, [pc, #104]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6e6:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000b6e8:	687b      	ldr	r3, [r7, #4]
9000b6ea:	695b      	ldr	r3, [r3, #20]
9000b6ec:	4a18      	ldr	r2, [pc, #96]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6ee:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000b6f0:	687b      	ldr	r3, [r7, #4]
9000b6f2:	699b      	ldr	r3, [r3, #24]
9000b6f4:	4a16      	ldr	r2, [pc, #88]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6f6:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000b6f8:	687b      	ldr	r3, [r7, #4]
9000b6fa:	69db      	ldr	r3, [r3, #28]
9000b6fc:	4a14      	ldr	r2, [pc, #80]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6fe:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000b700:	687b      	ldr	r3, [r7, #4]
9000b702:	6a1b      	ldr	r3, [r3, #32]
9000b704:	4a12      	ldr	r2, [pc, #72]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b706:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000b708:	687b      	ldr	r3, [r7, #4]
9000b70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b70c:	4a10      	ldr	r2, [pc, #64]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b70e:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000b710:	687b      	ldr	r3, [r7, #4]
9000b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b714:	4a0e      	ldr	r2, [pc, #56]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b716:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000b718:	4b0e      	ldr	r3, [pc, #56]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x9c>)
9000b71a:	2200      	movs	r2, #0
9000b71c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000b71e:	4b0d      	ldr	r3, [pc, #52]	@ (9000b754 <UTIL_LCD_SetFuncDriver+0x9c>)
9000b720:	2200      	movs	r2, #0
9000b722:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000b724:	4b0a      	ldr	r3, [pc, #40]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b726:	69db      	ldr	r3, [r3, #28]
9000b728:	4a0b      	ldr	r2, [pc, #44]	@ (9000b758 <UTIL_LCD_SetFuncDriver+0xa0>)
9000b72a:	4611      	mov	r1, r2
9000b72c:	2000      	movs	r0, #0
9000b72e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000b730:	4b07      	ldr	r3, [pc, #28]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b732:	6a1b      	ldr	r3, [r3, #32]
9000b734:	4a09      	ldr	r2, [pc, #36]	@ (9000b75c <UTIL_LCD_SetFuncDriver+0xa4>)
9000b736:	4611      	mov	r1, r2
9000b738:	2000      	movs	r0, #0
9000b73a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000b73c:	4b04      	ldr	r3, [pc, #16]	@ (9000b750 <UTIL_LCD_SetFuncDriver+0x98>)
9000b73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b740:	4a07      	ldr	r2, [pc, #28]	@ (9000b760 <UTIL_LCD_SetFuncDriver+0xa8>)
9000b742:	4611      	mov	r1, r2
9000b744:	2000      	movs	r0, #0
9000b746:	4798      	blx	r3
}
9000b748:	bf00      	nop
9000b74a:	3708      	adds	r7, #8
9000b74c:	46bd      	mov	sp, r7
9000b74e:	bd80      	pop	{r7, pc}
9000b750:	20001320 	.word	0x20001320
9000b754:	200012e0 	.word	0x200012e0
9000b758:	200012f4 	.word	0x200012f4
9000b75c:	200012f8 	.word	0x200012f8
9000b760:	200012fc 	.word	0x200012fc

9000b764 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000b764:	b580      	push	{r7, lr}
9000b766:	b082      	sub	sp, #8
9000b768:	af00      	add	r7, sp, #0
9000b76a:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000b76c:	4b0a      	ldr	r3, [pc, #40]	@ (9000b798 <UTIL_LCD_SetLayer+0x34>)
9000b76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b770:	2b00      	cmp	r3, #0
9000b772:	d00c      	beq.n	9000b78e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000b774:	4b08      	ldr	r3, [pc, #32]	@ (9000b798 <UTIL_LCD_SetLayer+0x34>)
9000b776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b778:	4a08      	ldr	r2, [pc, #32]	@ (9000b79c <UTIL_LCD_SetLayer+0x38>)
9000b77a:	6912      	ldr	r2, [r2, #16]
9000b77c:	6879      	ldr	r1, [r7, #4]
9000b77e:	4610      	mov	r0, r2
9000b780:	4798      	blx	r3
9000b782:	4603      	mov	r3, r0
9000b784:	2b00      	cmp	r3, #0
9000b786:	d102      	bne.n	9000b78e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000b788:	4a04      	ldr	r2, [pc, #16]	@ (9000b79c <UTIL_LCD_SetLayer+0x38>)
9000b78a:	687b      	ldr	r3, [r7, #4]
9000b78c:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000b78e:	bf00      	nop
9000b790:	3708      	adds	r7, #8
9000b792:	46bd      	mov	sp, r7
9000b794:	bd80      	pop	{r7, pc}
9000b796:	bf00      	nop
9000b798:	20001320 	.word	0x20001320
9000b79c:	200012e0 	.word	0x200012e0

9000b7a0 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000b7a0:	b480      	push	{r7}
9000b7a2:	b083      	sub	sp, #12
9000b7a4:	af00      	add	r7, sp, #0
9000b7a6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000b7a8:	4b06      	ldr	r3, [pc, #24]	@ (9000b7c4 <UTIL_LCD_SetTextColor+0x24>)
9000b7aa:	68db      	ldr	r3, [r3, #12]
9000b7ac:	4a05      	ldr	r2, [pc, #20]	@ (9000b7c4 <UTIL_LCD_SetTextColor+0x24>)
9000b7ae:	015b      	lsls	r3, r3, #5
9000b7b0:	4413      	add	r3, r2
9000b7b2:	687a      	ldr	r2, [r7, #4]
9000b7b4:	601a      	str	r2, [r3, #0]
}
9000b7b6:	bf00      	nop
9000b7b8:	370c      	adds	r7, #12
9000b7ba:	46bd      	mov	sp, r7
9000b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7c0:	4770      	bx	lr
9000b7c2:	bf00      	nop
9000b7c4:	200012e0 	.word	0x200012e0

9000b7c8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000b7c8:	b480      	push	{r7}
9000b7ca:	b083      	sub	sp, #12
9000b7cc:	af00      	add	r7, sp, #0
9000b7ce:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000b7d0:	4b06      	ldr	r3, [pc, #24]	@ (9000b7ec <UTIL_LCD_SetBackColor+0x24>)
9000b7d2:	68db      	ldr	r3, [r3, #12]
9000b7d4:	4a05      	ldr	r2, [pc, #20]	@ (9000b7ec <UTIL_LCD_SetBackColor+0x24>)
9000b7d6:	015b      	lsls	r3, r3, #5
9000b7d8:	4413      	add	r3, r2
9000b7da:	3304      	adds	r3, #4
9000b7dc:	687a      	ldr	r2, [r7, #4]
9000b7de:	601a      	str	r2, [r3, #0]
}
9000b7e0:	bf00      	nop
9000b7e2:	370c      	adds	r7, #12
9000b7e4:	46bd      	mov	sp, r7
9000b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7ea:	4770      	bx	lr
9000b7ec:	200012e0 	.word	0x200012e0

9000b7f0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000b7f0:	b480      	push	{r7}
9000b7f2:	b083      	sub	sp, #12
9000b7f4:	af00      	add	r7, sp, #0
9000b7f6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000b7f8:	4b06      	ldr	r3, [pc, #24]	@ (9000b814 <UTIL_LCD_SetFont+0x24>)
9000b7fa:	68db      	ldr	r3, [r3, #12]
9000b7fc:	4a05      	ldr	r2, [pc, #20]	@ (9000b814 <UTIL_LCD_SetFont+0x24>)
9000b7fe:	015b      	lsls	r3, r3, #5
9000b800:	4413      	add	r3, r2
9000b802:	3308      	adds	r3, #8
9000b804:	687a      	ldr	r2, [r7, #4]
9000b806:	601a      	str	r2, [r3, #0]
}
9000b808:	bf00      	nop
9000b80a:	370c      	adds	r7, #12
9000b80c:	46bd      	mov	sp, r7
9000b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b812:	4770      	bx	lr
9000b814:	200012e0 	.word	0x200012e0

9000b818 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000b818:	b590      	push	{r4, r7, lr}
9000b81a:	b087      	sub	sp, #28
9000b81c:	af02      	add	r7, sp, #8
9000b81e:	60f8      	str	r0, [r7, #12]
9000b820:	60b9      	str	r1, [r7, #8]
9000b822:	607a      	str	r2, [r7, #4]
9000b824:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000b826:	4b08      	ldr	r3, [pc, #32]	@ (9000b848 <UTIL_LCD_FillRGBRect+0x30>)
9000b828:	685c      	ldr	r4, [r3, #4]
9000b82a:	4b08      	ldr	r3, [pc, #32]	@ (9000b84c <UTIL_LCD_FillRGBRect+0x34>)
9000b82c:	6918      	ldr	r0, [r3, #16]
9000b82e:	6a3b      	ldr	r3, [r7, #32]
9000b830:	9301      	str	r3, [sp, #4]
9000b832:	683b      	ldr	r3, [r7, #0]
9000b834:	9300      	str	r3, [sp, #0]
9000b836:	687b      	ldr	r3, [r7, #4]
9000b838:	68ba      	ldr	r2, [r7, #8]
9000b83a:	68f9      	ldr	r1, [r7, #12]
9000b83c:	47a0      	blx	r4
}
9000b83e:	bf00      	nop
9000b840:	3714      	adds	r7, #20
9000b842:	46bd      	mov	sp, r7
9000b844:	bd90      	pop	{r4, r7, pc}
9000b846:	bf00      	nop
9000b848:	20001320 	.word	0x20001320
9000b84c:	200012e0 	.word	0x200012e0

9000b850 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000b850:	b580      	push	{r7, lr}
9000b852:	b084      	sub	sp, #16
9000b854:	af02      	add	r7, sp, #8
9000b856:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000b858:	4b07      	ldr	r3, [pc, #28]	@ (9000b878 <UTIL_LCD_Clear+0x28>)
9000b85a:	695a      	ldr	r2, [r3, #20]
9000b85c:	4b06      	ldr	r3, [pc, #24]	@ (9000b878 <UTIL_LCD_Clear+0x28>)
9000b85e:	6999      	ldr	r1, [r3, #24]
9000b860:	687b      	ldr	r3, [r7, #4]
9000b862:	9300      	str	r3, [sp, #0]
9000b864:	460b      	mov	r3, r1
9000b866:	2100      	movs	r1, #0
9000b868:	2000      	movs	r0, #0
9000b86a:	f000 f8eb 	bl	9000ba44 <UTIL_LCD_FillRect>
}
9000b86e:	bf00      	nop
9000b870:	3708      	adds	r7, #8
9000b872:	46bd      	mov	sp, r7
9000b874:	bd80      	pop	{r7, pc}
9000b876:	bf00      	nop
9000b878:	200012e0 	.word	0x200012e0

9000b87c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000b87c:	b580      	push	{r7, lr}
9000b87e:	b084      	sub	sp, #16
9000b880:	af00      	add	r7, sp, #0
9000b882:	60f8      	str	r0, [r7, #12]
9000b884:	60b9      	str	r1, [r7, #8]
9000b886:	4613      	mov	r3, r2
9000b888:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b88a:	4b16      	ldr	r3, [pc, #88]	@ (9000b8e4 <UTIL_LCD_DisplayChar+0x68>)
9000b88c:	68db      	ldr	r3, [r3, #12]
9000b88e:	4a15      	ldr	r2, [pc, #84]	@ (9000b8e4 <UTIL_LCD_DisplayChar+0x68>)
9000b890:	015b      	lsls	r3, r3, #5
9000b892:	4413      	add	r3, r2
9000b894:	3308      	adds	r3, #8
9000b896:	681b      	ldr	r3, [r3, #0]
9000b898:	681a      	ldr	r2, [r3, #0]
9000b89a:	79fb      	ldrb	r3, [r7, #7]
9000b89c:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b89e:	4911      	ldr	r1, [pc, #68]	@ (9000b8e4 <UTIL_LCD_DisplayChar+0x68>)
9000b8a0:	68c9      	ldr	r1, [r1, #12]
9000b8a2:	4810      	ldr	r0, [pc, #64]	@ (9000b8e4 <UTIL_LCD_DisplayChar+0x68>)
9000b8a4:	0149      	lsls	r1, r1, #5
9000b8a6:	4401      	add	r1, r0
9000b8a8:	3108      	adds	r1, #8
9000b8aa:	6809      	ldr	r1, [r1, #0]
9000b8ac:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b8ae:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b8b2:	4b0c      	ldr	r3, [pc, #48]	@ (9000b8e4 <UTIL_LCD_DisplayChar+0x68>)
9000b8b4:	68db      	ldr	r3, [r3, #12]
9000b8b6:	480b      	ldr	r0, [pc, #44]	@ (9000b8e4 <UTIL_LCD_DisplayChar+0x68>)
9000b8b8:	015b      	lsls	r3, r3, #5
9000b8ba:	4403      	add	r3, r0
9000b8bc:	3308      	adds	r3, #8
9000b8be:	681b      	ldr	r3, [r3, #0]
9000b8c0:	889b      	ldrh	r3, [r3, #4]
9000b8c2:	3307      	adds	r3, #7
9000b8c4:	2b00      	cmp	r3, #0
9000b8c6:	da00      	bge.n	9000b8ca <UTIL_LCD_DisplayChar+0x4e>
9000b8c8:	3307      	adds	r3, #7
9000b8ca:	10db      	asrs	r3, r3, #3
9000b8cc:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b8d0:	4413      	add	r3, r2
9000b8d2:	461a      	mov	r2, r3
9000b8d4:	68b9      	ldr	r1, [r7, #8]
9000b8d6:	68f8      	ldr	r0, [r7, #12]
9000b8d8:	f000 f8ee 	bl	9000bab8 <DrawChar>
}
9000b8dc:	bf00      	nop
9000b8de:	3710      	adds	r7, #16
9000b8e0:	46bd      	mov	sp, r7
9000b8e2:	bd80      	pop	{r7, pc}
9000b8e4:	200012e0 	.word	0x200012e0

9000b8e8 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000b8e8:	b580      	push	{r7, lr}
9000b8ea:	b08a      	sub	sp, #40	@ 0x28
9000b8ec:	af00      	add	r7, sp, #0
9000b8ee:	60f8      	str	r0, [r7, #12]
9000b8f0:	60b9      	str	r1, [r7, #8]
9000b8f2:	607a      	str	r2, [r7, #4]
9000b8f4:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000b8f6:	2301      	movs	r3, #1
9000b8f8:	627b      	str	r3, [r7, #36]	@ 0x24
9000b8fa:	2300      	movs	r3, #0
9000b8fc:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000b8fe:	2300      	movs	r3, #0
9000b900:	61fb      	str	r3, [r7, #28]
9000b902:	2300      	movs	r3, #0
9000b904:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000b906:	687b      	ldr	r3, [r7, #4]
9000b908:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000b90a:	e002      	b.n	9000b912 <UTIL_LCD_DisplayStringAt+0x2a>
9000b90c:	69fb      	ldr	r3, [r7, #28]
9000b90e:	3301      	adds	r3, #1
9000b910:	61fb      	str	r3, [r7, #28]
9000b912:	69bb      	ldr	r3, [r7, #24]
9000b914:	1c5a      	adds	r2, r3, #1
9000b916:	61ba      	str	r2, [r7, #24]
9000b918:	781b      	ldrb	r3, [r3, #0]
9000b91a:	2b00      	cmp	r3, #0
9000b91c:	d1f6      	bne.n	9000b90c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b91e:	4b48      	ldr	r3, [pc, #288]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b920:	695b      	ldr	r3, [r3, #20]
9000b922:	4a47      	ldr	r2, [pc, #284]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b924:	68d2      	ldr	r2, [r2, #12]
9000b926:	4946      	ldr	r1, [pc, #280]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b928:	0152      	lsls	r2, r2, #5
9000b92a:	440a      	add	r2, r1
9000b92c:	3208      	adds	r2, #8
9000b92e:	6812      	ldr	r2, [r2, #0]
9000b930:	8892      	ldrh	r2, [r2, #4]
9000b932:	fbb3 f3f2 	udiv	r3, r3, r2
9000b936:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000b938:	78fb      	ldrb	r3, [r7, #3]
9000b93a:	2b03      	cmp	r3, #3
9000b93c:	d018      	beq.n	9000b970 <UTIL_LCD_DisplayStringAt+0x88>
9000b93e:	2b03      	cmp	r3, #3
9000b940:	dc2a      	bgt.n	9000b998 <UTIL_LCD_DisplayStringAt+0xb0>
9000b942:	2b01      	cmp	r3, #1
9000b944:	d002      	beq.n	9000b94c <UTIL_LCD_DisplayStringAt+0x64>
9000b946:	2b02      	cmp	r3, #2
9000b948:	d015      	beq.n	9000b976 <UTIL_LCD_DisplayStringAt+0x8e>
9000b94a:	e025      	b.n	9000b998 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000b94c:	697a      	ldr	r2, [r7, #20]
9000b94e:	69fb      	ldr	r3, [r7, #28]
9000b950:	1ad3      	subs	r3, r2, r3
9000b952:	4a3b      	ldr	r2, [pc, #236]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b954:	68d2      	ldr	r2, [r2, #12]
9000b956:	493a      	ldr	r1, [pc, #232]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b958:	0152      	lsls	r2, r2, #5
9000b95a:	440a      	add	r2, r1
9000b95c:	3208      	adds	r2, #8
9000b95e:	6812      	ldr	r2, [r2, #0]
9000b960:	8892      	ldrh	r2, [r2, #4]
9000b962:	fb02 f303 	mul.w	r3, r2, r3
9000b966:	085b      	lsrs	r3, r3, #1
9000b968:	68fa      	ldr	r2, [r7, #12]
9000b96a:	4413      	add	r3, r2
9000b96c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b96e:	e016      	b.n	9000b99e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000b970:	68fb      	ldr	r3, [r7, #12]
9000b972:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b974:	e013      	b.n	9000b99e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b976:	697a      	ldr	r2, [r7, #20]
9000b978:	69fb      	ldr	r3, [r7, #28]
9000b97a:	1ad3      	subs	r3, r2, r3
9000b97c:	4a30      	ldr	r2, [pc, #192]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b97e:	68d2      	ldr	r2, [r2, #12]
9000b980:	492f      	ldr	r1, [pc, #188]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b982:	0152      	lsls	r2, r2, #5
9000b984:	440a      	add	r2, r1
9000b986:	3208      	adds	r2, #8
9000b988:	6812      	ldr	r2, [r2, #0]
9000b98a:	8892      	ldrh	r2, [r2, #4]
9000b98c:	fb03 f202 	mul.w	r2, r3, r2
9000b990:	68fb      	ldr	r3, [r7, #12]
9000b992:	1ad3      	subs	r3, r2, r3
9000b994:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b996:	e002      	b.n	9000b99e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000b998:	68fb      	ldr	r3, [r7, #12]
9000b99a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b99c:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000b99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b9a0:	2b00      	cmp	r3, #0
9000b9a2:	d003      	beq.n	9000b9ac <UTIL_LCD_DisplayStringAt+0xc4>
9000b9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b9a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000b9aa:	d31b      	bcc.n	9000b9e4 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000b9ac:	2301      	movs	r3, #1
9000b9ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b9b0:	e018      	b.n	9000b9e4 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000b9b2:	687b      	ldr	r3, [r7, #4]
9000b9b4:	781b      	ldrb	r3, [r3, #0]
9000b9b6:	461a      	mov	r2, r3
9000b9b8:	68b9      	ldr	r1, [r7, #8]
9000b9ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000b9bc:	f7ff ff5e 	bl	9000b87c <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000b9c0:	4b1f      	ldr	r3, [pc, #124]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9c2:	68db      	ldr	r3, [r3, #12]
9000b9c4:	4a1e      	ldr	r2, [pc, #120]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9c6:	015b      	lsls	r3, r3, #5
9000b9c8:	4413      	add	r3, r2
9000b9ca:	3308      	adds	r3, #8
9000b9cc:	681b      	ldr	r3, [r3, #0]
9000b9ce:	889b      	ldrh	r3, [r3, #4]
9000b9d0:	461a      	mov	r2, r3
9000b9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b9d4:	4413      	add	r3, r2
9000b9d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000b9d8:	687b      	ldr	r3, [r7, #4]
9000b9da:	3301      	adds	r3, #1
9000b9dc:	607b      	str	r3, [r7, #4]
    i++;
9000b9de:	6a3b      	ldr	r3, [r7, #32]
9000b9e0:	3301      	adds	r3, #1
9000b9e2:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b9e4:	687b      	ldr	r3, [r7, #4]
9000b9e6:	781b      	ldrb	r3, [r3, #0]
9000b9e8:	2b00      	cmp	r3, #0
9000b9ea:	bf14      	ite	ne
9000b9ec:	2301      	movne	r3, #1
9000b9ee:	2300      	moveq	r3, #0
9000b9f0:	b2da      	uxtb	r2, r3
9000b9f2:	4b13      	ldr	r3, [pc, #76]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9f4:	6959      	ldr	r1, [r3, #20]
9000b9f6:	4b12      	ldr	r3, [pc, #72]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9f8:	68db      	ldr	r3, [r3, #12]
9000b9fa:	4811      	ldr	r0, [pc, #68]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9fc:	015b      	lsls	r3, r3, #5
9000b9fe:	4403      	add	r3, r0
9000ba00:	3308      	adds	r3, #8
9000ba02:	681b      	ldr	r3, [r3, #0]
9000ba04:	889b      	ldrh	r3, [r3, #4]
9000ba06:	4618      	mov	r0, r3
9000ba08:	6a3b      	ldr	r3, [r7, #32]
9000ba0a:	fb00 f303 	mul.w	r3, r0, r3
9000ba0e:	1acb      	subs	r3, r1, r3
9000ba10:	b29b      	uxth	r3, r3
9000ba12:	490b      	ldr	r1, [pc, #44]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000ba14:	68c9      	ldr	r1, [r1, #12]
9000ba16:	480a      	ldr	r0, [pc, #40]	@ (9000ba40 <UTIL_LCD_DisplayStringAt+0x158>)
9000ba18:	0149      	lsls	r1, r1, #5
9000ba1a:	4401      	add	r1, r0
9000ba1c:	3108      	adds	r1, #8
9000ba1e:	6809      	ldr	r1, [r1, #0]
9000ba20:	8889      	ldrh	r1, [r1, #4]
9000ba22:	428b      	cmp	r3, r1
9000ba24:	bf2c      	ite	cs
9000ba26:	2301      	movcs	r3, #1
9000ba28:	2300      	movcc	r3, #0
9000ba2a:	b2db      	uxtb	r3, r3
9000ba2c:	4013      	ands	r3, r2
9000ba2e:	b2db      	uxtb	r3, r3
9000ba30:	2b00      	cmp	r3, #0
9000ba32:	d1be      	bne.n	9000b9b2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000ba34:	bf00      	nop
9000ba36:	bf00      	nop
9000ba38:	3728      	adds	r7, #40	@ 0x28
9000ba3a:	46bd      	mov	sp, r7
9000ba3c:	bd80      	pop	{r7, pc}
9000ba3e:	bf00      	nop
9000ba40:	200012e0 	.word	0x200012e0

9000ba44 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000ba44:	b590      	push	{r4, r7, lr}
9000ba46:	b087      	sub	sp, #28
9000ba48:	af02      	add	r7, sp, #8
9000ba4a:	60f8      	str	r0, [r7, #12]
9000ba4c:	60b9      	str	r1, [r7, #8]
9000ba4e:	607a      	str	r2, [r7, #4]
9000ba50:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000ba52:	4b17      	ldr	r3, [pc, #92]	@ (9000bab0 <UTIL_LCD_FillRect+0x6c>)
9000ba54:	69db      	ldr	r3, [r3, #28]
9000ba56:	2b02      	cmp	r3, #2
9000ba58:	d11a      	bne.n	9000ba90 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000ba5a:	4b16      	ldr	r3, [pc, #88]	@ (9000bab4 <UTIL_LCD_FillRect+0x70>)
9000ba5c:	691c      	ldr	r4, [r3, #16]
9000ba5e:	4b14      	ldr	r3, [pc, #80]	@ (9000bab0 <UTIL_LCD_FillRect+0x6c>)
9000ba60:	6918      	ldr	r0, [r3, #16]
9000ba62:	6a3b      	ldr	r3, [r7, #32]
9000ba64:	08db      	lsrs	r3, r3, #3
9000ba66:	f003 021f 	and.w	r2, r3, #31
9000ba6a:	6a3b      	ldr	r3, [r7, #32]
9000ba6c:	0a9b      	lsrs	r3, r3, #10
9000ba6e:	015b      	lsls	r3, r3, #5
9000ba70:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000ba74:	431a      	orrs	r2, r3
9000ba76:	6a3b      	ldr	r3, [r7, #32]
9000ba78:	0cdb      	lsrs	r3, r3, #19
9000ba7a:	02db      	lsls	r3, r3, #11
9000ba7c:	b29b      	uxth	r3, r3
9000ba7e:	4313      	orrs	r3, r2
9000ba80:	9301      	str	r3, [sp, #4]
9000ba82:	683b      	ldr	r3, [r7, #0]
9000ba84:	9300      	str	r3, [sp, #0]
9000ba86:	687b      	ldr	r3, [r7, #4]
9000ba88:	68ba      	ldr	r2, [r7, #8]
9000ba8a:	68f9      	ldr	r1, [r7, #12]
9000ba8c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000ba8e:	e00b      	b.n	9000baa8 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000ba90:	4b08      	ldr	r3, [pc, #32]	@ (9000bab4 <UTIL_LCD_FillRect+0x70>)
9000ba92:	691c      	ldr	r4, [r3, #16]
9000ba94:	4b06      	ldr	r3, [pc, #24]	@ (9000bab0 <UTIL_LCD_FillRect+0x6c>)
9000ba96:	6918      	ldr	r0, [r3, #16]
9000ba98:	6a3b      	ldr	r3, [r7, #32]
9000ba9a:	9301      	str	r3, [sp, #4]
9000ba9c:	683b      	ldr	r3, [r7, #0]
9000ba9e:	9300      	str	r3, [sp, #0]
9000baa0:	687b      	ldr	r3, [r7, #4]
9000baa2:	68ba      	ldr	r2, [r7, #8]
9000baa4:	68f9      	ldr	r1, [r7, #12]
9000baa6:	47a0      	blx	r4
}
9000baa8:	bf00      	nop
9000baaa:	3714      	adds	r7, #20
9000baac:	46bd      	mov	sp, r7
9000baae:	bd90      	pop	{r4, r7, pc}
9000bab0:	200012e0 	.word	0x200012e0
9000bab4:	20001320 	.word	0x20001320

9000bab8 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000bab8:	b580      	push	{r7, lr}
9000baba:	b0b2      	sub	sp, #200	@ 0xc8
9000babc:	af02      	add	r7, sp, #8
9000babe:	60f8      	str	r0, [r7, #12]
9000bac0:	60b9      	str	r1, [r7, #8]
9000bac2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000bac4:	2300      	movs	r3, #0
9000bac6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000baca:	2300      	movs	r3, #0
9000bacc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bad0:	4ba5      	ldr	r3, [pc, #660]	@ (9000bd68 <DrawChar+0x2b0>)
9000bad2:	68db      	ldr	r3, [r3, #12]
9000bad4:	4aa4      	ldr	r2, [pc, #656]	@ (9000bd68 <DrawChar+0x2b0>)
9000bad6:	015b      	lsls	r3, r3, #5
9000bad8:	4413      	add	r3, r2
9000bada:	3308      	adds	r3, #8
9000badc:	681b      	ldr	r3, [r3, #0]
9000bade:	88db      	ldrh	r3, [r3, #6]
9000bae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bae4:	4ba0      	ldr	r3, [pc, #640]	@ (9000bd68 <DrawChar+0x2b0>)
9000bae6:	68db      	ldr	r3, [r3, #12]
9000bae8:	4a9f      	ldr	r2, [pc, #636]	@ (9000bd68 <DrawChar+0x2b0>)
9000baea:	015b      	lsls	r3, r3, #5
9000baec:	4413      	add	r3, r2
9000baee:	3308      	adds	r3, #8
9000baf0:	681b      	ldr	r3, [r3, #0]
9000baf2:	889b      	ldrh	r3, [r3, #4]
9000baf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000baf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bafc:	3307      	adds	r3, #7
9000bafe:	f023 0207 	bic.w	r2, r3, #7
9000bb02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb06:	1ad3      	subs	r3, r2, r3
9000bb08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000bb0c:	2300      	movs	r3, #0
9000bb0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bb12:	e11c      	b.n	9000bd4e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000bb14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb18:	3307      	adds	r3, #7
9000bb1a:	08db      	lsrs	r3, r3, #3
9000bb1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bb20:	fb02 f303 	mul.w	r3, r2, r3
9000bb24:	687a      	ldr	r2, [r7, #4]
9000bb26:	4413      	add	r3, r2
9000bb28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000bb2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb30:	3307      	adds	r3, #7
9000bb32:	08db      	lsrs	r3, r3, #3
9000bb34:	2b01      	cmp	r3, #1
9000bb36:	d002      	beq.n	9000bb3e <DrawChar+0x86>
9000bb38:	2b02      	cmp	r3, #2
9000bb3a:	d006      	beq.n	9000bb4a <DrawChar+0x92>
9000bb3c:	e011      	b.n	9000bb62 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000bb3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb42:	781b      	ldrb	r3, [r3, #0]
9000bb44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb48:	e01d      	b.n	9000bb86 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000bb4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb4e:	781b      	ldrb	r3, [r3, #0]
9000bb50:	021b      	lsls	r3, r3, #8
9000bb52:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bb56:	3201      	adds	r2, #1
9000bb58:	7812      	ldrb	r2, [r2, #0]
9000bb5a:	4313      	orrs	r3, r2
9000bb5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb60:	e011      	b.n	9000bb86 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000bb62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb66:	781b      	ldrb	r3, [r3, #0]
9000bb68:	041a      	lsls	r2, r3, #16
9000bb6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb6e:	3301      	adds	r3, #1
9000bb70:	781b      	ldrb	r3, [r3, #0]
9000bb72:	021b      	lsls	r3, r3, #8
9000bb74:	4313      	orrs	r3, r2
9000bb76:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bb7a:	3202      	adds	r2, #2
9000bb7c:	7812      	ldrb	r2, [r2, #0]
9000bb7e:	4313      	orrs	r3, r2
9000bb80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb84:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bb86:	4b78      	ldr	r3, [pc, #480]	@ (9000bd68 <DrawChar+0x2b0>)
9000bb88:	68db      	ldr	r3, [r3, #12]
9000bb8a:	4a77      	ldr	r2, [pc, #476]	@ (9000bd68 <DrawChar+0x2b0>)
9000bb8c:	015b      	lsls	r3, r3, #5
9000bb8e:	4413      	add	r3, r2
9000bb90:	331c      	adds	r3, #28
9000bb92:	681b      	ldr	r3, [r3, #0]
9000bb94:	2b02      	cmp	r3, #2
9000bb96:	f040 808c 	bne.w	9000bcb2 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000bb9a:	2300      	movs	r3, #0
9000bb9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bba0:	e074      	b.n	9000bc8c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bba2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bbaa:	1ad2      	subs	r2, r2, r3
9000bbac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bbb0:	4413      	add	r3, r2
9000bbb2:	3b01      	subs	r3, #1
9000bbb4:	2201      	movs	r2, #1
9000bbb6:	fa02 f303 	lsl.w	r3, r2, r3
9000bbba:	461a      	mov	r2, r3
9000bbbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000bbc0:	4013      	ands	r3, r2
9000bbc2:	2b00      	cmp	r3, #0
9000bbc4:	d02d      	beq.n	9000bc22 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000bbc6:	4b68      	ldr	r3, [pc, #416]	@ (9000bd68 <DrawChar+0x2b0>)
9000bbc8:	68db      	ldr	r3, [r3, #12]
9000bbca:	4a67      	ldr	r2, [pc, #412]	@ (9000bd68 <DrawChar+0x2b0>)
9000bbcc:	015b      	lsls	r3, r3, #5
9000bbce:	4413      	add	r3, r2
9000bbd0:	681b      	ldr	r3, [r3, #0]
9000bbd2:	08db      	lsrs	r3, r3, #3
9000bbd4:	b29b      	uxth	r3, r3
9000bbd6:	f003 031f 	and.w	r3, r3, #31
9000bbda:	b29a      	uxth	r2, r3
9000bbdc:	4b62      	ldr	r3, [pc, #392]	@ (9000bd68 <DrawChar+0x2b0>)
9000bbde:	68db      	ldr	r3, [r3, #12]
9000bbe0:	4961      	ldr	r1, [pc, #388]	@ (9000bd68 <DrawChar+0x2b0>)
9000bbe2:	015b      	lsls	r3, r3, #5
9000bbe4:	440b      	add	r3, r1
9000bbe6:	681b      	ldr	r3, [r3, #0]
9000bbe8:	0a9b      	lsrs	r3, r3, #10
9000bbea:	b29b      	uxth	r3, r3
9000bbec:	015b      	lsls	r3, r3, #5
9000bbee:	b29b      	uxth	r3, r3
9000bbf0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bbf4:	b29b      	uxth	r3, r3
9000bbf6:	4313      	orrs	r3, r2
9000bbf8:	b29a      	uxth	r2, r3
9000bbfa:	4b5b      	ldr	r3, [pc, #364]	@ (9000bd68 <DrawChar+0x2b0>)
9000bbfc:	68db      	ldr	r3, [r3, #12]
9000bbfe:	495a      	ldr	r1, [pc, #360]	@ (9000bd68 <DrawChar+0x2b0>)
9000bc00:	015b      	lsls	r3, r3, #5
9000bc02:	440b      	add	r3, r1
9000bc04:	681b      	ldr	r3, [r3, #0]
9000bc06:	0cdb      	lsrs	r3, r3, #19
9000bc08:	b29b      	uxth	r3, r3
9000bc0a:	02db      	lsls	r3, r3, #11
9000bc0c:	b29b      	uxth	r3, r3
9000bc0e:	4313      	orrs	r3, r2
9000bc10:	b29a      	uxth	r2, r3
9000bc12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc16:	005b      	lsls	r3, r3, #1
9000bc18:	33c0      	adds	r3, #192	@ 0xc0
9000bc1a:	443b      	add	r3, r7
9000bc1c:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000bc20:	e02f      	b.n	9000bc82 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000bc22:	4b51      	ldr	r3, [pc, #324]	@ (9000bd68 <DrawChar+0x2b0>)
9000bc24:	68db      	ldr	r3, [r3, #12]
9000bc26:	4a50      	ldr	r2, [pc, #320]	@ (9000bd68 <DrawChar+0x2b0>)
9000bc28:	015b      	lsls	r3, r3, #5
9000bc2a:	4413      	add	r3, r2
9000bc2c:	3304      	adds	r3, #4
9000bc2e:	681b      	ldr	r3, [r3, #0]
9000bc30:	08db      	lsrs	r3, r3, #3
9000bc32:	b29b      	uxth	r3, r3
9000bc34:	f003 031f 	and.w	r3, r3, #31
9000bc38:	b29a      	uxth	r2, r3
9000bc3a:	4b4b      	ldr	r3, [pc, #300]	@ (9000bd68 <DrawChar+0x2b0>)
9000bc3c:	68db      	ldr	r3, [r3, #12]
9000bc3e:	494a      	ldr	r1, [pc, #296]	@ (9000bd68 <DrawChar+0x2b0>)
9000bc40:	015b      	lsls	r3, r3, #5
9000bc42:	440b      	add	r3, r1
9000bc44:	3304      	adds	r3, #4
9000bc46:	681b      	ldr	r3, [r3, #0]
9000bc48:	0a9b      	lsrs	r3, r3, #10
9000bc4a:	b29b      	uxth	r3, r3
9000bc4c:	015b      	lsls	r3, r3, #5
9000bc4e:	b29b      	uxth	r3, r3
9000bc50:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bc54:	b29b      	uxth	r3, r3
9000bc56:	4313      	orrs	r3, r2
9000bc58:	b29a      	uxth	r2, r3
9000bc5a:	4b43      	ldr	r3, [pc, #268]	@ (9000bd68 <DrawChar+0x2b0>)
9000bc5c:	68db      	ldr	r3, [r3, #12]
9000bc5e:	4942      	ldr	r1, [pc, #264]	@ (9000bd68 <DrawChar+0x2b0>)
9000bc60:	015b      	lsls	r3, r3, #5
9000bc62:	440b      	add	r3, r1
9000bc64:	3304      	adds	r3, #4
9000bc66:	681b      	ldr	r3, [r3, #0]
9000bc68:	0cdb      	lsrs	r3, r3, #19
9000bc6a:	b29b      	uxth	r3, r3
9000bc6c:	02db      	lsls	r3, r3, #11
9000bc6e:	b29b      	uxth	r3, r3
9000bc70:	4313      	orrs	r3, r2
9000bc72:	b29a      	uxth	r2, r3
9000bc74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc78:	005b      	lsls	r3, r3, #1
9000bc7a:	33c0      	adds	r3, #192	@ 0xc0
9000bc7c:	443b      	add	r3, r7
9000bc7e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000bc82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc86:	3301      	adds	r3, #1
9000bc88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bc8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000bc90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bc94:	429a      	cmp	r2, r3
9000bc96:	d384      	bcc.n	9000bba2 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000bc98:	68b9      	ldr	r1, [r7, #8]
9000bc9a:	1c4b      	adds	r3, r1, #1
9000bc9c:	60bb      	str	r3, [r7, #8]
9000bc9e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000bca2:	2301      	movs	r3, #1
9000bca4:	9300      	str	r3, [sp, #0]
9000bca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bcaa:	68f8      	ldr	r0, [r7, #12]
9000bcac:	f7ff fdb4 	bl	9000b818 <UTIL_LCD_FillRGBRect>
9000bcb0:	e048      	b.n	9000bd44 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000bcb2:	2300      	movs	r3, #0
9000bcb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bcb8:	e032      	b.n	9000bd20 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bcba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bcbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bcc2:	1ad2      	subs	r2, r2, r3
9000bcc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bcc8:	4413      	add	r3, r2
9000bcca:	3b01      	subs	r3, #1
9000bccc:	2201      	movs	r2, #1
9000bcce:	fa02 f303 	lsl.w	r3, r2, r3
9000bcd2:	461a      	mov	r2, r3
9000bcd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000bcd8:	4013      	ands	r3, r2
9000bcda:	2b00      	cmp	r3, #0
9000bcdc:	d00d      	beq.n	9000bcfa <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000bcde:	4b22      	ldr	r3, [pc, #136]	@ (9000bd68 <DrawChar+0x2b0>)
9000bce0:	68db      	ldr	r3, [r3, #12]
9000bce2:	4a21      	ldr	r2, [pc, #132]	@ (9000bd68 <DrawChar+0x2b0>)
9000bce4:	015b      	lsls	r3, r3, #5
9000bce6:	4413      	add	r3, r2
9000bce8:	681a      	ldr	r2, [r3, #0]
9000bcea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bcee:	009b      	lsls	r3, r3, #2
9000bcf0:	33c0      	adds	r3, #192	@ 0xc0
9000bcf2:	443b      	add	r3, r7
9000bcf4:	f843 2cac 	str.w	r2, [r3, #-172]
9000bcf8:	e00d      	b.n	9000bd16 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000bcfa:	4b1b      	ldr	r3, [pc, #108]	@ (9000bd68 <DrawChar+0x2b0>)
9000bcfc:	68db      	ldr	r3, [r3, #12]
9000bcfe:	4a1a      	ldr	r2, [pc, #104]	@ (9000bd68 <DrawChar+0x2b0>)
9000bd00:	015b      	lsls	r3, r3, #5
9000bd02:	4413      	add	r3, r2
9000bd04:	3304      	adds	r3, #4
9000bd06:	681a      	ldr	r2, [r3, #0]
9000bd08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bd0c:	009b      	lsls	r3, r3, #2
9000bd0e:	33c0      	adds	r3, #192	@ 0xc0
9000bd10:	443b      	add	r3, r7
9000bd12:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000bd16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bd1a:	3301      	adds	r3, #1
9000bd1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bd20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000bd24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bd28:	429a      	cmp	r2, r3
9000bd2a:	d3c6      	bcc.n	9000bcba <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000bd2c:	68b9      	ldr	r1, [r7, #8]
9000bd2e:	1c4b      	adds	r3, r1, #1
9000bd30:	60bb      	str	r3, [r7, #8]
9000bd32:	f107 0214 	add.w	r2, r7, #20
9000bd36:	2301      	movs	r3, #1
9000bd38:	9300      	str	r3, [sp, #0]
9000bd3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bd3e:	68f8      	ldr	r0, [r7, #12]
9000bd40:	f7ff fd6a 	bl	9000b818 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000bd44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000bd48:	3301      	adds	r3, #1
9000bd4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bd4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bd52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000bd56:	429a      	cmp	r2, r3
9000bd58:	f4ff aedc 	bcc.w	9000bb14 <DrawChar+0x5c>
    }
  }
}
9000bd5c:	bf00      	nop
9000bd5e:	bf00      	nop
9000bd60:	37c0      	adds	r7, #192	@ 0xc0
9000bd62:	46bd      	mov	sp, r7
9000bd64:	bd80      	pop	{r7, pc}
9000bd66:	bf00      	nop
9000bd68:	200012e0 	.word	0x200012e0

9000bd6c <sbrk_aligned>:
9000bd6c:	b570      	push	{r4, r5, r6, lr}
9000bd6e:	4e0f      	ldr	r6, [pc, #60]	@ (9000bdac <sbrk_aligned+0x40>)
9000bd70:	460c      	mov	r4, r1
9000bd72:	6831      	ldr	r1, [r6, #0]
9000bd74:	4605      	mov	r5, r0
9000bd76:	b911      	cbnz	r1, 9000bd7e <sbrk_aligned+0x12>
9000bd78:	f000 faec 	bl	9000c354 <_sbrk_r>
9000bd7c:	6030      	str	r0, [r6, #0]
9000bd7e:	4621      	mov	r1, r4
9000bd80:	4628      	mov	r0, r5
9000bd82:	f000 fae7 	bl	9000c354 <_sbrk_r>
9000bd86:	1c43      	adds	r3, r0, #1
9000bd88:	d103      	bne.n	9000bd92 <sbrk_aligned+0x26>
9000bd8a:	f04f 34ff 	mov.w	r4, #4294967295
9000bd8e:	4620      	mov	r0, r4
9000bd90:	bd70      	pop	{r4, r5, r6, pc}
9000bd92:	1cc4      	adds	r4, r0, #3
9000bd94:	f024 0403 	bic.w	r4, r4, #3
9000bd98:	42a0      	cmp	r0, r4
9000bd9a:	d0f8      	beq.n	9000bd8e <sbrk_aligned+0x22>
9000bd9c:	1a21      	subs	r1, r4, r0
9000bd9e:	4628      	mov	r0, r5
9000bda0:	f000 fad8 	bl	9000c354 <_sbrk_r>
9000bda4:	3001      	adds	r0, #1
9000bda6:	d1f2      	bne.n	9000bd8e <sbrk_aligned+0x22>
9000bda8:	e7ef      	b.n	9000bd8a <sbrk_aligned+0x1e>
9000bdaa:	bf00      	nop
9000bdac:	2000134c 	.word	0x2000134c

9000bdb0 <_malloc_r>:
9000bdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000bdb4:	1ccd      	adds	r5, r1, #3
9000bdb6:	f025 0503 	bic.w	r5, r5, #3
9000bdba:	3508      	adds	r5, #8
9000bdbc:	2d0c      	cmp	r5, #12
9000bdbe:	bf38      	it	cc
9000bdc0:	250c      	movcc	r5, #12
9000bdc2:	2d00      	cmp	r5, #0
9000bdc4:	4606      	mov	r6, r0
9000bdc6:	db01      	blt.n	9000bdcc <_malloc_r+0x1c>
9000bdc8:	42a9      	cmp	r1, r5
9000bdca:	d904      	bls.n	9000bdd6 <_malloc_r+0x26>
9000bdcc:	230c      	movs	r3, #12
9000bdce:	6033      	str	r3, [r6, #0]
9000bdd0:	2000      	movs	r0, #0
9000bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000bdd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000beac <_malloc_r+0xfc>
9000bdda:	f000 f869 	bl	9000beb0 <__malloc_lock>
9000bdde:	f8d8 3000 	ldr.w	r3, [r8]
9000bde2:	461c      	mov	r4, r3
9000bde4:	bb44      	cbnz	r4, 9000be38 <_malloc_r+0x88>
9000bde6:	4629      	mov	r1, r5
9000bde8:	4630      	mov	r0, r6
9000bdea:	f7ff ffbf 	bl	9000bd6c <sbrk_aligned>
9000bdee:	1c43      	adds	r3, r0, #1
9000bdf0:	4604      	mov	r4, r0
9000bdf2:	d158      	bne.n	9000bea6 <_malloc_r+0xf6>
9000bdf4:	f8d8 4000 	ldr.w	r4, [r8]
9000bdf8:	4627      	mov	r7, r4
9000bdfa:	2f00      	cmp	r7, #0
9000bdfc:	d143      	bne.n	9000be86 <_malloc_r+0xd6>
9000bdfe:	2c00      	cmp	r4, #0
9000be00:	d04b      	beq.n	9000be9a <_malloc_r+0xea>
9000be02:	6823      	ldr	r3, [r4, #0]
9000be04:	4639      	mov	r1, r7
9000be06:	4630      	mov	r0, r6
9000be08:	eb04 0903 	add.w	r9, r4, r3
9000be0c:	f000 faa2 	bl	9000c354 <_sbrk_r>
9000be10:	4581      	cmp	r9, r0
9000be12:	d142      	bne.n	9000be9a <_malloc_r+0xea>
9000be14:	6821      	ldr	r1, [r4, #0]
9000be16:	1a6d      	subs	r5, r5, r1
9000be18:	4629      	mov	r1, r5
9000be1a:	4630      	mov	r0, r6
9000be1c:	f7ff ffa6 	bl	9000bd6c <sbrk_aligned>
9000be20:	3001      	adds	r0, #1
9000be22:	d03a      	beq.n	9000be9a <_malloc_r+0xea>
9000be24:	6823      	ldr	r3, [r4, #0]
9000be26:	442b      	add	r3, r5
9000be28:	6023      	str	r3, [r4, #0]
9000be2a:	f8d8 3000 	ldr.w	r3, [r8]
9000be2e:	685a      	ldr	r2, [r3, #4]
9000be30:	bb62      	cbnz	r2, 9000be8c <_malloc_r+0xdc>
9000be32:	f8c8 7000 	str.w	r7, [r8]
9000be36:	e00f      	b.n	9000be58 <_malloc_r+0xa8>
9000be38:	6822      	ldr	r2, [r4, #0]
9000be3a:	1b52      	subs	r2, r2, r5
9000be3c:	d420      	bmi.n	9000be80 <_malloc_r+0xd0>
9000be3e:	2a0b      	cmp	r2, #11
9000be40:	d917      	bls.n	9000be72 <_malloc_r+0xc2>
9000be42:	1961      	adds	r1, r4, r5
9000be44:	42a3      	cmp	r3, r4
9000be46:	6025      	str	r5, [r4, #0]
9000be48:	bf18      	it	ne
9000be4a:	6059      	strne	r1, [r3, #4]
9000be4c:	6863      	ldr	r3, [r4, #4]
9000be4e:	bf08      	it	eq
9000be50:	f8c8 1000 	streq.w	r1, [r8]
9000be54:	5162      	str	r2, [r4, r5]
9000be56:	604b      	str	r3, [r1, #4]
9000be58:	4630      	mov	r0, r6
9000be5a:	f000 f82f 	bl	9000bebc <__malloc_unlock>
9000be5e:	f104 000b 	add.w	r0, r4, #11
9000be62:	1d23      	adds	r3, r4, #4
9000be64:	f020 0007 	bic.w	r0, r0, #7
9000be68:	1ac2      	subs	r2, r0, r3
9000be6a:	bf1c      	itt	ne
9000be6c:	1a1b      	subne	r3, r3, r0
9000be6e:	50a3      	strne	r3, [r4, r2]
9000be70:	e7af      	b.n	9000bdd2 <_malloc_r+0x22>
9000be72:	6862      	ldr	r2, [r4, #4]
9000be74:	42a3      	cmp	r3, r4
9000be76:	bf0c      	ite	eq
9000be78:	f8c8 2000 	streq.w	r2, [r8]
9000be7c:	605a      	strne	r2, [r3, #4]
9000be7e:	e7eb      	b.n	9000be58 <_malloc_r+0xa8>
9000be80:	4623      	mov	r3, r4
9000be82:	6864      	ldr	r4, [r4, #4]
9000be84:	e7ae      	b.n	9000bde4 <_malloc_r+0x34>
9000be86:	463c      	mov	r4, r7
9000be88:	687f      	ldr	r7, [r7, #4]
9000be8a:	e7b6      	b.n	9000bdfa <_malloc_r+0x4a>
9000be8c:	461a      	mov	r2, r3
9000be8e:	685b      	ldr	r3, [r3, #4]
9000be90:	42a3      	cmp	r3, r4
9000be92:	d1fb      	bne.n	9000be8c <_malloc_r+0xdc>
9000be94:	2300      	movs	r3, #0
9000be96:	6053      	str	r3, [r2, #4]
9000be98:	e7de      	b.n	9000be58 <_malloc_r+0xa8>
9000be9a:	230c      	movs	r3, #12
9000be9c:	6033      	str	r3, [r6, #0]
9000be9e:	4630      	mov	r0, r6
9000bea0:	f000 f80c 	bl	9000bebc <__malloc_unlock>
9000bea4:	e794      	b.n	9000bdd0 <_malloc_r+0x20>
9000bea6:	6005      	str	r5, [r0, #0]
9000bea8:	e7d6      	b.n	9000be58 <_malloc_r+0xa8>
9000beaa:	bf00      	nop
9000beac:	20001350 	.word	0x20001350

9000beb0 <__malloc_lock>:
9000beb0:	4801      	ldr	r0, [pc, #4]	@ (9000beb8 <__malloc_lock+0x8>)
9000beb2:	f000 ba9c 	b.w	9000c3ee <__retarget_lock_acquire_recursive>
9000beb6:	bf00      	nop
9000beb8:	20001494 	.word	0x20001494

9000bebc <__malloc_unlock>:
9000bebc:	4801      	ldr	r0, [pc, #4]	@ (9000bec4 <__malloc_unlock+0x8>)
9000bebe:	f000 ba97 	b.w	9000c3f0 <__retarget_lock_release_recursive>
9000bec2:	bf00      	nop
9000bec4:	20001494 	.word	0x20001494

9000bec8 <std>:
9000bec8:	2300      	movs	r3, #0
9000beca:	b510      	push	{r4, lr}
9000becc:	4604      	mov	r4, r0
9000bece:	e9c0 3300 	strd	r3, r3, [r0]
9000bed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000bed6:	6083      	str	r3, [r0, #8]
9000bed8:	8181      	strh	r1, [r0, #12]
9000beda:	6643      	str	r3, [r0, #100]	@ 0x64
9000bedc:	81c2      	strh	r2, [r0, #14]
9000bede:	6183      	str	r3, [r0, #24]
9000bee0:	4619      	mov	r1, r3
9000bee2:	2208      	movs	r2, #8
9000bee4:	305c      	adds	r0, #92	@ 0x5c
9000bee6:	f000 f9f9 	bl	9000c2dc <memset>
9000beea:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf20 <std+0x58>)
9000beec:	6263      	str	r3, [r4, #36]	@ 0x24
9000beee:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf24 <std+0x5c>)
9000bef0:	62a3      	str	r3, [r4, #40]	@ 0x28
9000bef2:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf28 <std+0x60>)
9000bef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000bef6:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf2c <std+0x64>)
9000bef8:	6323      	str	r3, [r4, #48]	@ 0x30
9000befa:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf30 <std+0x68>)
9000befc:	6224      	str	r4, [r4, #32]
9000befe:	429c      	cmp	r4, r3
9000bf00:	d006      	beq.n	9000bf10 <std+0x48>
9000bf02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000bf06:	4294      	cmp	r4, r2
9000bf08:	d002      	beq.n	9000bf10 <std+0x48>
9000bf0a:	33d0      	adds	r3, #208	@ 0xd0
9000bf0c:	429c      	cmp	r4, r3
9000bf0e:	d105      	bne.n	9000bf1c <std+0x54>
9000bf10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bf18:	f000 ba68 	b.w	9000c3ec <__retarget_lock_init_recursive>
9000bf1c:	bd10      	pop	{r4, pc}
9000bf1e:	bf00      	nop
9000bf20:	9000c12d 	.word	0x9000c12d
9000bf24:	9000c14f 	.word	0x9000c14f
9000bf28:	9000c187 	.word	0x9000c187
9000bf2c:	9000c1ab 	.word	0x9000c1ab
9000bf30:	20001354 	.word	0x20001354

9000bf34 <stdio_exit_handler>:
9000bf34:	4a02      	ldr	r2, [pc, #8]	@ (9000bf40 <stdio_exit_handler+0xc>)
9000bf36:	4903      	ldr	r1, [pc, #12]	@ (9000bf44 <stdio_exit_handler+0x10>)
9000bf38:	4803      	ldr	r0, [pc, #12]	@ (9000bf48 <stdio_exit_handler+0x14>)
9000bf3a:	f000 b869 	b.w	9000c010 <_fwalk_sglue>
9000bf3e:	bf00      	nop
9000bf40:	20000070 	.word	0x20000070
9000bf44:	9000cb2d 	.word	0x9000cb2d
9000bf48:	20000080 	.word	0x20000080

9000bf4c <cleanup_stdio>:
9000bf4c:	6841      	ldr	r1, [r0, #4]
9000bf4e:	4b0c      	ldr	r3, [pc, #48]	@ (9000bf80 <cleanup_stdio+0x34>)
9000bf50:	4299      	cmp	r1, r3
9000bf52:	b510      	push	{r4, lr}
9000bf54:	4604      	mov	r4, r0
9000bf56:	d001      	beq.n	9000bf5c <cleanup_stdio+0x10>
9000bf58:	f000 fde8 	bl	9000cb2c <_fflush_r>
9000bf5c:	68a1      	ldr	r1, [r4, #8]
9000bf5e:	4b09      	ldr	r3, [pc, #36]	@ (9000bf84 <cleanup_stdio+0x38>)
9000bf60:	4299      	cmp	r1, r3
9000bf62:	d002      	beq.n	9000bf6a <cleanup_stdio+0x1e>
9000bf64:	4620      	mov	r0, r4
9000bf66:	f000 fde1 	bl	9000cb2c <_fflush_r>
9000bf6a:	68e1      	ldr	r1, [r4, #12]
9000bf6c:	4b06      	ldr	r3, [pc, #24]	@ (9000bf88 <cleanup_stdio+0x3c>)
9000bf6e:	4299      	cmp	r1, r3
9000bf70:	d004      	beq.n	9000bf7c <cleanup_stdio+0x30>
9000bf72:	4620      	mov	r0, r4
9000bf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bf78:	f000 bdd8 	b.w	9000cb2c <_fflush_r>
9000bf7c:	bd10      	pop	{r4, pc}
9000bf7e:	bf00      	nop
9000bf80:	20001354 	.word	0x20001354
9000bf84:	200013bc 	.word	0x200013bc
9000bf88:	20001424 	.word	0x20001424

9000bf8c <global_stdio_init.part.0>:
9000bf8c:	b510      	push	{r4, lr}
9000bf8e:	4b0b      	ldr	r3, [pc, #44]	@ (9000bfbc <global_stdio_init.part.0+0x30>)
9000bf90:	4c0b      	ldr	r4, [pc, #44]	@ (9000bfc0 <global_stdio_init.part.0+0x34>)
9000bf92:	4a0c      	ldr	r2, [pc, #48]	@ (9000bfc4 <global_stdio_init.part.0+0x38>)
9000bf94:	601a      	str	r2, [r3, #0]
9000bf96:	4620      	mov	r0, r4
9000bf98:	2200      	movs	r2, #0
9000bf9a:	2104      	movs	r1, #4
9000bf9c:	f7ff ff94 	bl	9000bec8 <std>
9000bfa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000bfa4:	2201      	movs	r2, #1
9000bfa6:	2109      	movs	r1, #9
9000bfa8:	f7ff ff8e 	bl	9000bec8 <std>
9000bfac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000bfb0:	2202      	movs	r2, #2
9000bfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bfb6:	2112      	movs	r1, #18
9000bfb8:	f7ff bf86 	b.w	9000bec8 <std>
9000bfbc:	2000148c 	.word	0x2000148c
9000bfc0:	20001354 	.word	0x20001354
9000bfc4:	9000bf35 	.word	0x9000bf35

9000bfc8 <__sfp_lock_acquire>:
9000bfc8:	4801      	ldr	r0, [pc, #4]	@ (9000bfd0 <__sfp_lock_acquire+0x8>)
9000bfca:	f000 ba10 	b.w	9000c3ee <__retarget_lock_acquire_recursive>
9000bfce:	bf00      	nop
9000bfd0:	20001495 	.word	0x20001495

9000bfd4 <__sfp_lock_release>:
9000bfd4:	4801      	ldr	r0, [pc, #4]	@ (9000bfdc <__sfp_lock_release+0x8>)
9000bfd6:	f000 ba0b 	b.w	9000c3f0 <__retarget_lock_release_recursive>
9000bfda:	bf00      	nop
9000bfdc:	20001495 	.word	0x20001495

9000bfe0 <__sinit>:
9000bfe0:	b510      	push	{r4, lr}
9000bfe2:	4604      	mov	r4, r0
9000bfe4:	f7ff fff0 	bl	9000bfc8 <__sfp_lock_acquire>
9000bfe8:	6a23      	ldr	r3, [r4, #32]
9000bfea:	b11b      	cbz	r3, 9000bff4 <__sinit+0x14>
9000bfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bff0:	f7ff bff0 	b.w	9000bfd4 <__sfp_lock_release>
9000bff4:	4b04      	ldr	r3, [pc, #16]	@ (9000c008 <__sinit+0x28>)
9000bff6:	6223      	str	r3, [r4, #32]
9000bff8:	4b04      	ldr	r3, [pc, #16]	@ (9000c00c <__sinit+0x2c>)
9000bffa:	681b      	ldr	r3, [r3, #0]
9000bffc:	2b00      	cmp	r3, #0
9000bffe:	d1f5      	bne.n	9000bfec <__sinit+0xc>
9000c000:	f7ff ffc4 	bl	9000bf8c <global_stdio_init.part.0>
9000c004:	e7f2      	b.n	9000bfec <__sinit+0xc>
9000c006:	bf00      	nop
9000c008:	9000bf4d 	.word	0x9000bf4d
9000c00c:	2000148c 	.word	0x2000148c

9000c010 <_fwalk_sglue>:
9000c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c014:	4607      	mov	r7, r0
9000c016:	4688      	mov	r8, r1
9000c018:	4614      	mov	r4, r2
9000c01a:	2600      	movs	r6, #0
9000c01c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c020:	f1b9 0901 	subs.w	r9, r9, #1
9000c024:	d505      	bpl.n	9000c032 <_fwalk_sglue+0x22>
9000c026:	6824      	ldr	r4, [r4, #0]
9000c028:	2c00      	cmp	r4, #0
9000c02a:	d1f7      	bne.n	9000c01c <_fwalk_sglue+0xc>
9000c02c:	4630      	mov	r0, r6
9000c02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c032:	89ab      	ldrh	r3, [r5, #12]
9000c034:	2b01      	cmp	r3, #1
9000c036:	d907      	bls.n	9000c048 <_fwalk_sglue+0x38>
9000c038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c03c:	3301      	adds	r3, #1
9000c03e:	d003      	beq.n	9000c048 <_fwalk_sglue+0x38>
9000c040:	4629      	mov	r1, r5
9000c042:	4638      	mov	r0, r7
9000c044:	47c0      	blx	r8
9000c046:	4306      	orrs	r6, r0
9000c048:	3568      	adds	r5, #104	@ 0x68
9000c04a:	e7e9      	b.n	9000c020 <_fwalk_sglue+0x10>

9000c04c <iprintf>:
9000c04c:	b40f      	push	{r0, r1, r2, r3}
9000c04e:	b507      	push	{r0, r1, r2, lr}
9000c050:	4906      	ldr	r1, [pc, #24]	@ (9000c06c <iprintf+0x20>)
9000c052:	ab04      	add	r3, sp, #16
9000c054:	6808      	ldr	r0, [r1, #0]
9000c056:	f853 2b04 	ldr.w	r2, [r3], #4
9000c05a:	6881      	ldr	r1, [r0, #8]
9000c05c:	9301      	str	r3, [sp, #4]
9000c05e:	f000 fa3d 	bl	9000c4dc <_vfiprintf_r>
9000c062:	b003      	add	sp, #12
9000c064:	f85d eb04 	ldr.w	lr, [sp], #4
9000c068:	b004      	add	sp, #16
9000c06a:	4770      	bx	lr
9000c06c:	2000007c 	.word	0x2000007c

9000c070 <_puts_r>:
9000c070:	6a03      	ldr	r3, [r0, #32]
9000c072:	b570      	push	{r4, r5, r6, lr}
9000c074:	6884      	ldr	r4, [r0, #8]
9000c076:	4605      	mov	r5, r0
9000c078:	460e      	mov	r6, r1
9000c07a:	b90b      	cbnz	r3, 9000c080 <_puts_r+0x10>
9000c07c:	f7ff ffb0 	bl	9000bfe0 <__sinit>
9000c080:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c082:	07db      	lsls	r3, r3, #31
9000c084:	d405      	bmi.n	9000c092 <_puts_r+0x22>
9000c086:	89a3      	ldrh	r3, [r4, #12]
9000c088:	0598      	lsls	r0, r3, #22
9000c08a:	d402      	bmi.n	9000c092 <_puts_r+0x22>
9000c08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c08e:	f000 f9ae 	bl	9000c3ee <__retarget_lock_acquire_recursive>
9000c092:	89a3      	ldrh	r3, [r4, #12]
9000c094:	0719      	lsls	r1, r3, #28
9000c096:	d502      	bpl.n	9000c09e <_puts_r+0x2e>
9000c098:	6923      	ldr	r3, [r4, #16]
9000c09a:	2b00      	cmp	r3, #0
9000c09c:	d135      	bne.n	9000c10a <_puts_r+0x9a>
9000c09e:	4621      	mov	r1, r4
9000c0a0:	4628      	mov	r0, r5
9000c0a2:	f000 f8c5 	bl	9000c230 <__swsetup_r>
9000c0a6:	b380      	cbz	r0, 9000c10a <_puts_r+0x9a>
9000c0a8:	f04f 35ff 	mov.w	r5, #4294967295
9000c0ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c0ae:	07da      	lsls	r2, r3, #31
9000c0b0:	d405      	bmi.n	9000c0be <_puts_r+0x4e>
9000c0b2:	89a3      	ldrh	r3, [r4, #12]
9000c0b4:	059b      	lsls	r3, r3, #22
9000c0b6:	d402      	bmi.n	9000c0be <_puts_r+0x4e>
9000c0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c0ba:	f000 f999 	bl	9000c3f0 <__retarget_lock_release_recursive>
9000c0be:	4628      	mov	r0, r5
9000c0c0:	bd70      	pop	{r4, r5, r6, pc}
9000c0c2:	2b00      	cmp	r3, #0
9000c0c4:	da04      	bge.n	9000c0d0 <_puts_r+0x60>
9000c0c6:	69a2      	ldr	r2, [r4, #24]
9000c0c8:	429a      	cmp	r2, r3
9000c0ca:	dc17      	bgt.n	9000c0fc <_puts_r+0x8c>
9000c0cc:	290a      	cmp	r1, #10
9000c0ce:	d015      	beq.n	9000c0fc <_puts_r+0x8c>
9000c0d0:	6823      	ldr	r3, [r4, #0]
9000c0d2:	1c5a      	adds	r2, r3, #1
9000c0d4:	6022      	str	r2, [r4, #0]
9000c0d6:	7019      	strb	r1, [r3, #0]
9000c0d8:	68a3      	ldr	r3, [r4, #8]
9000c0da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c0de:	3b01      	subs	r3, #1
9000c0e0:	60a3      	str	r3, [r4, #8]
9000c0e2:	2900      	cmp	r1, #0
9000c0e4:	d1ed      	bne.n	9000c0c2 <_puts_r+0x52>
9000c0e6:	2b00      	cmp	r3, #0
9000c0e8:	da11      	bge.n	9000c10e <_puts_r+0x9e>
9000c0ea:	4622      	mov	r2, r4
9000c0ec:	210a      	movs	r1, #10
9000c0ee:	4628      	mov	r0, r5
9000c0f0:	f000 f85f 	bl	9000c1b2 <__swbuf_r>
9000c0f4:	3001      	adds	r0, #1
9000c0f6:	d0d7      	beq.n	9000c0a8 <_puts_r+0x38>
9000c0f8:	250a      	movs	r5, #10
9000c0fa:	e7d7      	b.n	9000c0ac <_puts_r+0x3c>
9000c0fc:	4622      	mov	r2, r4
9000c0fe:	4628      	mov	r0, r5
9000c100:	f000 f857 	bl	9000c1b2 <__swbuf_r>
9000c104:	3001      	adds	r0, #1
9000c106:	d1e7      	bne.n	9000c0d8 <_puts_r+0x68>
9000c108:	e7ce      	b.n	9000c0a8 <_puts_r+0x38>
9000c10a:	3e01      	subs	r6, #1
9000c10c:	e7e4      	b.n	9000c0d8 <_puts_r+0x68>
9000c10e:	6823      	ldr	r3, [r4, #0]
9000c110:	1c5a      	adds	r2, r3, #1
9000c112:	6022      	str	r2, [r4, #0]
9000c114:	220a      	movs	r2, #10
9000c116:	701a      	strb	r2, [r3, #0]
9000c118:	e7ee      	b.n	9000c0f8 <_puts_r+0x88>
	...

9000c11c <puts>:
9000c11c:	4b02      	ldr	r3, [pc, #8]	@ (9000c128 <puts+0xc>)
9000c11e:	4601      	mov	r1, r0
9000c120:	6818      	ldr	r0, [r3, #0]
9000c122:	f7ff bfa5 	b.w	9000c070 <_puts_r>
9000c126:	bf00      	nop
9000c128:	2000007c 	.word	0x2000007c

9000c12c <__sread>:
9000c12c:	b510      	push	{r4, lr}
9000c12e:	460c      	mov	r4, r1
9000c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c134:	f000 f8fc 	bl	9000c330 <_read_r>
9000c138:	2800      	cmp	r0, #0
9000c13a:	bfab      	itete	ge
9000c13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c13e:	89a3      	ldrhlt	r3, [r4, #12]
9000c140:	181b      	addge	r3, r3, r0
9000c142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c146:	bfac      	ite	ge
9000c148:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c14a:	81a3      	strhlt	r3, [r4, #12]
9000c14c:	bd10      	pop	{r4, pc}

9000c14e <__swrite>:
9000c14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c152:	461f      	mov	r7, r3
9000c154:	898b      	ldrh	r3, [r1, #12]
9000c156:	05db      	lsls	r3, r3, #23
9000c158:	4605      	mov	r5, r0
9000c15a:	460c      	mov	r4, r1
9000c15c:	4616      	mov	r6, r2
9000c15e:	d505      	bpl.n	9000c16c <__swrite+0x1e>
9000c160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c164:	2302      	movs	r3, #2
9000c166:	2200      	movs	r2, #0
9000c168:	f000 f8d0 	bl	9000c30c <_lseek_r>
9000c16c:	89a3      	ldrh	r3, [r4, #12]
9000c16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c176:	81a3      	strh	r3, [r4, #12]
9000c178:	4632      	mov	r2, r6
9000c17a:	463b      	mov	r3, r7
9000c17c:	4628      	mov	r0, r5
9000c17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c182:	f000 b8f7 	b.w	9000c374 <_write_r>

9000c186 <__sseek>:
9000c186:	b510      	push	{r4, lr}
9000c188:	460c      	mov	r4, r1
9000c18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c18e:	f000 f8bd 	bl	9000c30c <_lseek_r>
9000c192:	1c43      	adds	r3, r0, #1
9000c194:	89a3      	ldrh	r3, [r4, #12]
9000c196:	bf15      	itete	ne
9000c198:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c1a2:	81a3      	strheq	r3, [r4, #12]
9000c1a4:	bf18      	it	ne
9000c1a6:	81a3      	strhne	r3, [r4, #12]
9000c1a8:	bd10      	pop	{r4, pc}

9000c1aa <__sclose>:
9000c1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c1ae:	f000 b89d 	b.w	9000c2ec <_close_r>

9000c1b2 <__swbuf_r>:
9000c1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c1b4:	460e      	mov	r6, r1
9000c1b6:	4614      	mov	r4, r2
9000c1b8:	4605      	mov	r5, r0
9000c1ba:	b118      	cbz	r0, 9000c1c4 <__swbuf_r+0x12>
9000c1bc:	6a03      	ldr	r3, [r0, #32]
9000c1be:	b90b      	cbnz	r3, 9000c1c4 <__swbuf_r+0x12>
9000c1c0:	f7ff ff0e 	bl	9000bfe0 <__sinit>
9000c1c4:	69a3      	ldr	r3, [r4, #24]
9000c1c6:	60a3      	str	r3, [r4, #8]
9000c1c8:	89a3      	ldrh	r3, [r4, #12]
9000c1ca:	071a      	lsls	r2, r3, #28
9000c1cc:	d501      	bpl.n	9000c1d2 <__swbuf_r+0x20>
9000c1ce:	6923      	ldr	r3, [r4, #16]
9000c1d0:	b943      	cbnz	r3, 9000c1e4 <__swbuf_r+0x32>
9000c1d2:	4621      	mov	r1, r4
9000c1d4:	4628      	mov	r0, r5
9000c1d6:	f000 f82b 	bl	9000c230 <__swsetup_r>
9000c1da:	b118      	cbz	r0, 9000c1e4 <__swbuf_r+0x32>
9000c1dc:	f04f 37ff 	mov.w	r7, #4294967295
9000c1e0:	4638      	mov	r0, r7
9000c1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c1e4:	6823      	ldr	r3, [r4, #0]
9000c1e6:	6922      	ldr	r2, [r4, #16]
9000c1e8:	1a98      	subs	r0, r3, r2
9000c1ea:	6963      	ldr	r3, [r4, #20]
9000c1ec:	b2f6      	uxtb	r6, r6
9000c1ee:	4283      	cmp	r3, r0
9000c1f0:	4637      	mov	r7, r6
9000c1f2:	dc05      	bgt.n	9000c200 <__swbuf_r+0x4e>
9000c1f4:	4621      	mov	r1, r4
9000c1f6:	4628      	mov	r0, r5
9000c1f8:	f000 fc98 	bl	9000cb2c <_fflush_r>
9000c1fc:	2800      	cmp	r0, #0
9000c1fe:	d1ed      	bne.n	9000c1dc <__swbuf_r+0x2a>
9000c200:	68a3      	ldr	r3, [r4, #8]
9000c202:	3b01      	subs	r3, #1
9000c204:	60a3      	str	r3, [r4, #8]
9000c206:	6823      	ldr	r3, [r4, #0]
9000c208:	1c5a      	adds	r2, r3, #1
9000c20a:	6022      	str	r2, [r4, #0]
9000c20c:	701e      	strb	r6, [r3, #0]
9000c20e:	6962      	ldr	r2, [r4, #20]
9000c210:	1c43      	adds	r3, r0, #1
9000c212:	429a      	cmp	r2, r3
9000c214:	d004      	beq.n	9000c220 <__swbuf_r+0x6e>
9000c216:	89a3      	ldrh	r3, [r4, #12]
9000c218:	07db      	lsls	r3, r3, #31
9000c21a:	d5e1      	bpl.n	9000c1e0 <__swbuf_r+0x2e>
9000c21c:	2e0a      	cmp	r6, #10
9000c21e:	d1df      	bne.n	9000c1e0 <__swbuf_r+0x2e>
9000c220:	4621      	mov	r1, r4
9000c222:	4628      	mov	r0, r5
9000c224:	f000 fc82 	bl	9000cb2c <_fflush_r>
9000c228:	2800      	cmp	r0, #0
9000c22a:	d0d9      	beq.n	9000c1e0 <__swbuf_r+0x2e>
9000c22c:	e7d6      	b.n	9000c1dc <__swbuf_r+0x2a>
	...

9000c230 <__swsetup_r>:
9000c230:	b538      	push	{r3, r4, r5, lr}
9000c232:	4b29      	ldr	r3, [pc, #164]	@ (9000c2d8 <__swsetup_r+0xa8>)
9000c234:	4605      	mov	r5, r0
9000c236:	6818      	ldr	r0, [r3, #0]
9000c238:	460c      	mov	r4, r1
9000c23a:	b118      	cbz	r0, 9000c244 <__swsetup_r+0x14>
9000c23c:	6a03      	ldr	r3, [r0, #32]
9000c23e:	b90b      	cbnz	r3, 9000c244 <__swsetup_r+0x14>
9000c240:	f7ff fece 	bl	9000bfe0 <__sinit>
9000c244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c248:	0719      	lsls	r1, r3, #28
9000c24a:	d422      	bmi.n	9000c292 <__swsetup_r+0x62>
9000c24c:	06da      	lsls	r2, r3, #27
9000c24e:	d407      	bmi.n	9000c260 <__swsetup_r+0x30>
9000c250:	2209      	movs	r2, #9
9000c252:	602a      	str	r2, [r5, #0]
9000c254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c258:	81a3      	strh	r3, [r4, #12]
9000c25a:	f04f 30ff 	mov.w	r0, #4294967295
9000c25e:	e033      	b.n	9000c2c8 <__swsetup_r+0x98>
9000c260:	0758      	lsls	r0, r3, #29
9000c262:	d512      	bpl.n	9000c28a <__swsetup_r+0x5a>
9000c264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c266:	b141      	cbz	r1, 9000c27a <__swsetup_r+0x4a>
9000c268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c26c:	4299      	cmp	r1, r3
9000c26e:	d002      	beq.n	9000c276 <__swsetup_r+0x46>
9000c270:	4628      	mov	r0, r5
9000c272:	f000 f8bf 	bl	9000c3f4 <_free_r>
9000c276:	2300      	movs	r3, #0
9000c278:	6363      	str	r3, [r4, #52]	@ 0x34
9000c27a:	89a3      	ldrh	r3, [r4, #12]
9000c27c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c280:	81a3      	strh	r3, [r4, #12]
9000c282:	2300      	movs	r3, #0
9000c284:	6063      	str	r3, [r4, #4]
9000c286:	6923      	ldr	r3, [r4, #16]
9000c288:	6023      	str	r3, [r4, #0]
9000c28a:	89a3      	ldrh	r3, [r4, #12]
9000c28c:	f043 0308 	orr.w	r3, r3, #8
9000c290:	81a3      	strh	r3, [r4, #12]
9000c292:	6923      	ldr	r3, [r4, #16]
9000c294:	b94b      	cbnz	r3, 9000c2aa <__swsetup_r+0x7a>
9000c296:	89a3      	ldrh	r3, [r4, #12]
9000c298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c2a0:	d003      	beq.n	9000c2aa <__swsetup_r+0x7a>
9000c2a2:	4621      	mov	r1, r4
9000c2a4:	4628      	mov	r0, r5
9000c2a6:	f000 fc8f 	bl	9000cbc8 <__smakebuf_r>
9000c2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c2ae:	f013 0201 	ands.w	r2, r3, #1
9000c2b2:	d00a      	beq.n	9000c2ca <__swsetup_r+0x9a>
9000c2b4:	2200      	movs	r2, #0
9000c2b6:	60a2      	str	r2, [r4, #8]
9000c2b8:	6962      	ldr	r2, [r4, #20]
9000c2ba:	4252      	negs	r2, r2
9000c2bc:	61a2      	str	r2, [r4, #24]
9000c2be:	6922      	ldr	r2, [r4, #16]
9000c2c0:	b942      	cbnz	r2, 9000c2d4 <__swsetup_r+0xa4>
9000c2c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c2c6:	d1c5      	bne.n	9000c254 <__swsetup_r+0x24>
9000c2c8:	bd38      	pop	{r3, r4, r5, pc}
9000c2ca:	0799      	lsls	r1, r3, #30
9000c2cc:	bf58      	it	pl
9000c2ce:	6962      	ldrpl	r2, [r4, #20]
9000c2d0:	60a2      	str	r2, [r4, #8]
9000c2d2:	e7f4      	b.n	9000c2be <__swsetup_r+0x8e>
9000c2d4:	2000      	movs	r0, #0
9000c2d6:	e7f7      	b.n	9000c2c8 <__swsetup_r+0x98>
9000c2d8:	2000007c 	.word	0x2000007c

9000c2dc <memset>:
9000c2dc:	4402      	add	r2, r0
9000c2de:	4603      	mov	r3, r0
9000c2e0:	4293      	cmp	r3, r2
9000c2e2:	d100      	bne.n	9000c2e6 <memset+0xa>
9000c2e4:	4770      	bx	lr
9000c2e6:	f803 1b01 	strb.w	r1, [r3], #1
9000c2ea:	e7f9      	b.n	9000c2e0 <memset+0x4>

9000c2ec <_close_r>:
9000c2ec:	b538      	push	{r3, r4, r5, lr}
9000c2ee:	4d06      	ldr	r5, [pc, #24]	@ (9000c308 <_close_r+0x1c>)
9000c2f0:	2300      	movs	r3, #0
9000c2f2:	4604      	mov	r4, r0
9000c2f4:	4608      	mov	r0, r1
9000c2f6:	602b      	str	r3, [r5, #0]
9000c2f8:	f7f4 fed7 	bl	900010aa <_close>
9000c2fc:	1c43      	adds	r3, r0, #1
9000c2fe:	d102      	bne.n	9000c306 <_close_r+0x1a>
9000c300:	682b      	ldr	r3, [r5, #0]
9000c302:	b103      	cbz	r3, 9000c306 <_close_r+0x1a>
9000c304:	6023      	str	r3, [r4, #0]
9000c306:	bd38      	pop	{r3, r4, r5, pc}
9000c308:	20001490 	.word	0x20001490

9000c30c <_lseek_r>:
9000c30c:	b538      	push	{r3, r4, r5, lr}
9000c30e:	4d07      	ldr	r5, [pc, #28]	@ (9000c32c <_lseek_r+0x20>)
9000c310:	4604      	mov	r4, r0
9000c312:	4608      	mov	r0, r1
9000c314:	4611      	mov	r1, r2
9000c316:	2200      	movs	r2, #0
9000c318:	602a      	str	r2, [r5, #0]
9000c31a:	461a      	mov	r2, r3
9000c31c:	f7f4 feec 	bl	900010f8 <_lseek>
9000c320:	1c43      	adds	r3, r0, #1
9000c322:	d102      	bne.n	9000c32a <_lseek_r+0x1e>
9000c324:	682b      	ldr	r3, [r5, #0]
9000c326:	b103      	cbz	r3, 9000c32a <_lseek_r+0x1e>
9000c328:	6023      	str	r3, [r4, #0]
9000c32a:	bd38      	pop	{r3, r4, r5, pc}
9000c32c:	20001490 	.word	0x20001490

9000c330 <_read_r>:
9000c330:	b538      	push	{r3, r4, r5, lr}
9000c332:	4d07      	ldr	r5, [pc, #28]	@ (9000c350 <_read_r+0x20>)
9000c334:	4604      	mov	r4, r0
9000c336:	4608      	mov	r0, r1
9000c338:	4611      	mov	r1, r2
9000c33a:	2200      	movs	r2, #0
9000c33c:	602a      	str	r2, [r5, #0]
9000c33e:	461a      	mov	r2, r3
9000c340:	f7f4 fe7a 	bl	90001038 <_read>
9000c344:	1c43      	adds	r3, r0, #1
9000c346:	d102      	bne.n	9000c34e <_read_r+0x1e>
9000c348:	682b      	ldr	r3, [r5, #0]
9000c34a:	b103      	cbz	r3, 9000c34e <_read_r+0x1e>
9000c34c:	6023      	str	r3, [r4, #0]
9000c34e:	bd38      	pop	{r3, r4, r5, pc}
9000c350:	20001490 	.word	0x20001490

9000c354 <_sbrk_r>:
9000c354:	b538      	push	{r3, r4, r5, lr}
9000c356:	4d06      	ldr	r5, [pc, #24]	@ (9000c370 <_sbrk_r+0x1c>)
9000c358:	2300      	movs	r3, #0
9000c35a:	4604      	mov	r4, r0
9000c35c:	4608      	mov	r0, r1
9000c35e:	602b      	str	r3, [r5, #0]
9000c360:	f7f4 fed8 	bl	90001114 <_sbrk>
9000c364:	1c43      	adds	r3, r0, #1
9000c366:	d102      	bne.n	9000c36e <_sbrk_r+0x1a>
9000c368:	682b      	ldr	r3, [r5, #0]
9000c36a:	b103      	cbz	r3, 9000c36e <_sbrk_r+0x1a>
9000c36c:	6023      	str	r3, [r4, #0]
9000c36e:	bd38      	pop	{r3, r4, r5, pc}
9000c370:	20001490 	.word	0x20001490

9000c374 <_write_r>:
9000c374:	b538      	push	{r3, r4, r5, lr}
9000c376:	4d07      	ldr	r5, [pc, #28]	@ (9000c394 <_write_r+0x20>)
9000c378:	4604      	mov	r4, r0
9000c37a:	4608      	mov	r0, r1
9000c37c:	4611      	mov	r1, r2
9000c37e:	2200      	movs	r2, #0
9000c380:	602a      	str	r2, [r5, #0]
9000c382:	461a      	mov	r2, r3
9000c384:	f7f4 fe75 	bl	90001072 <_write>
9000c388:	1c43      	adds	r3, r0, #1
9000c38a:	d102      	bne.n	9000c392 <_write_r+0x1e>
9000c38c:	682b      	ldr	r3, [r5, #0]
9000c38e:	b103      	cbz	r3, 9000c392 <_write_r+0x1e>
9000c390:	6023      	str	r3, [r4, #0]
9000c392:	bd38      	pop	{r3, r4, r5, pc}
9000c394:	20001490 	.word	0x20001490

9000c398 <__errno>:
9000c398:	4b01      	ldr	r3, [pc, #4]	@ (9000c3a0 <__errno+0x8>)
9000c39a:	6818      	ldr	r0, [r3, #0]
9000c39c:	4770      	bx	lr
9000c39e:	bf00      	nop
9000c3a0:	2000007c 	.word	0x2000007c

9000c3a4 <__libc_init_array>:
9000c3a4:	b570      	push	{r4, r5, r6, lr}
9000c3a6:	4d0d      	ldr	r5, [pc, #52]	@ (9000c3dc <__libc_init_array+0x38>)
9000c3a8:	4c0d      	ldr	r4, [pc, #52]	@ (9000c3e0 <__libc_init_array+0x3c>)
9000c3aa:	1b64      	subs	r4, r4, r5
9000c3ac:	10a4      	asrs	r4, r4, #2
9000c3ae:	2600      	movs	r6, #0
9000c3b0:	42a6      	cmp	r6, r4
9000c3b2:	d109      	bne.n	9000c3c8 <__libc_init_array+0x24>
9000c3b4:	4d0b      	ldr	r5, [pc, #44]	@ (9000c3e4 <__libc_init_array+0x40>)
9000c3b6:	4c0c      	ldr	r4, [pc, #48]	@ (9000c3e8 <__libc_init_array+0x44>)
9000c3b8:	f000 fc64 	bl	9000cc84 <_init>
9000c3bc:	1b64      	subs	r4, r4, r5
9000c3be:	10a4      	asrs	r4, r4, #2
9000c3c0:	2600      	movs	r6, #0
9000c3c2:	42a6      	cmp	r6, r4
9000c3c4:	d105      	bne.n	9000c3d2 <__libc_init_array+0x2e>
9000c3c6:	bd70      	pop	{r4, r5, r6, pc}
9000c3c8:	f855 3b04 	ldr.w	r3, [r5], #4
9000c3cc:	4798      	blx	r3
9000c3ce:	3601      	adds	r6, #1
9000c3d0:	e7ee      	b.n	9000c3b0 <__libc_init_array+0xc>
9000c3d2:	f855 3b04 	ldr.w	r3, [r5], #4
9000c3d6:	4798      	blx	r3
9000c3d8:	3601      	adds	r6, #1
9000c3da:	e7f2      	b.n	9000c3c2 <__libc_init_array+0x1e>
9000c3dc:	9000f1d8 	.word	0x9000f1d8
9000c3e0:	9000f1d8 	.word	0x9000f1d8
9000c3e4:	9000f1d8 	.word	0x9000f1d8
9000c3e8:	9000f1dc 	.word	0x9000f1dc

9000c3ec <__retarget_lock_init_recursive>:
9000c3ec:	4770      	bx	lr

9000c3ee <__retarget_lock_acquire_recursive>:
9000c3ee:	4770      	bx	lr

9000c3f0 <__retarget_lock_release_recursive>:
9000c3f0:	4770      	bx	lr
	...

9000c3f4 <_free_r>:
9000c3f4:	b538      	push	{r3, r4, r5, lr}
9000c3f6:	4605      	mov	r5, r0
9000c3f8:	2900      	cmp	r1, #0
9000c3fa:	d041      	beq.n	9000c480 <_free_r+0x8c>
9000c3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c400:	1f0c      	subs	r4, r1, #4
9000c402:	2b00      	cmp	r3, #0
9000c404:	bfb8      	it	lt
9000c406:	18e4      	addlt	r4, r4, r3
9000c408:	f7ff fd52 	bl	9000beb0 <__malloc_lock>
9000c40c:	4a1d      	ldr	r2, [pc, #116]	@ (9000c484 <_free_r+0x90>)
9000c40e:	6813      	ldr	r3, [r2, #0]
9000c410:	b933      	cbnz	r3, 9000c420 <_free_r+0x2c>
9000c412:	6063      	str	r3, [r4, #4]
9000c414:	6014      	str	r4, [r2, #0]
9000c416:	4628      	mov	r0, r5
9000c418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c41c:	f7ff bd4e 	b.w	9000bebc <__malloc_unlock>
9000c420:	42a3      	cmp	r3, r4
9000c422:	d908      	bls.n	9000c436 <_free_r+0x42>
9000c424:	6820      	ldr	r0, [r4, #0]
9000c426:	1821      	adds	r1, r4, r0
9000c428:	428b      	cmp	r3, r1
9000c42a:	bf01      	itttt	eq
9000c42c:	6819      	ldreq	r1, [r3, #0]
9000c42e:	685b      	ldreq	r3, [r3, #4]
9000c430:	1809      	addeq	r1, r1, r0
9000c432:	6021      	streq	r1, [r4, #0]
9000c434:	e7ed      	b.n	9000c412 <_free_r+0x1e>
9000c436:	461a      	mov	r2, r3
9000c438:	685b      	ldr	r3, [r3, #4]
9000c43a:	b10b      	cbz	r3, 9000c440 <_free_r+0x4c>
9000c43c:	42a3      	cmp	r3, r4
9000c43e:	d9fa      	bls.n	9000c436 <_free_r+0x42>
9000c440:	6811      	ldr	r1, [r2, #0]
9000c442:	1850      	adds	r0, r2, r1
9000c444:	42a0      	cmp	r0, r4
9000c446:	d10b      	bne.n	9000c460 <_free_r+0x6c>
9000c448:	6820      	ldr	r0, [r4, #0]
9000c44a:	4401      	add	r1, r0
9000c44c:	1850      	adds	r0, r2, r1
9000c44e:	4283      	cmp	r3, r0
9000c450:	6011      	str	r1, [r2, #0]
9000c452:	d1e0      	bne.n	9000c416 <_free_r+0x22>
9000c454:	6818      	ldr	r0, [r3, #0]
9000c456:	685b      	ldr	r3, [r3, #4]
9000c458:	6053      	str	r3, [r2, #4]
9000c45a:	4408      	add	r0, r1
9000c45c:	6010      	str	r0, [r2, #0]
9000c45e:	e7da      	b.n	9000c416 <_free_r+0x22>
9000c460:	d902      	bls.n	9000c468 <_free_r+0x74>
9000c462:	230c      	movs	r3, #12
9000c464:	602b      	str	r3, [r5, #0]
9000c466:	e7d6      	b.n	9000c416 <_free_r+0x22>
9000c468:	6820      	ldr	r0, [r4, #0]
9000c46a:	1821      	adds	r1, r4, r0
9000c46c:	428b      	cmp	r3, r1
9000c46e:	bf04      	itt	eq
9000c470:	6819      	ldreq	r1, [r3, #0]
9000c472:	685b      	ldreq	r3, [r3, #4]
9000c474:	6063      	str	r3, [r4, #4]
9000c476:	bf04      	itt	eq
9000c478:	1809      	addeq	r1, r1, r0
9000c47a:	6021      	streq	r1, [r4, #0]
9000c47c:	6054      	str	r4, [r2, #4]
9000c47e:	e7ca      	b.n	9000c416 <_free_r+0x22>
9000c480:	bd38      	pop	{r3, r4, r5, pc}
9000c482:	bf00      	nop
9000c484:	20001350 	.word	0x20001350

9000c488 <__sfputc_r>:
9000c488:	6893      	ldr	r3, [r2, #8]
9000c48a:	3b01      	subs	r3, #1
9000c48c:	2b00      	cmp	r3, #0
9000c48e:	b410      	push	{r4}
9000c490:	6093      	str	r3, [r2, #8]
9000c492:	da08      	bge.n	9000c4a6 <__sfputc_r+0x1e>
9000c494:	6994      	ldr	r4, [r2, #24]
9000c496:	42a3      	cmp	r3, r4
9000c498:	db01      	blt.n	9000c49e <__sfputc_r+0x16>
9000c49a:	290a      	cmp	r1, #10
9000c49c:	d103      	bne.n	9000c4a6 <__sfputc_r+0x1e>
9000c49e:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c4a2:	f7ff be86 	b.w	9000c1b2 <__swbuf_r>
9000c4a6:	6813      	ldr	r3, [r2, #0]
9000c4a8:	1c58      	adds	r0, r3, #1
9000c4aa:	6010      	str	r0, [r2, #0]
9000c4ac:	7019      	strb	r1, [r3, #0]
9000c4ae:	4608      	mov	r0, r1
9000c4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c4b4:	4770      	bx	lr

9000c4b6 <__sfputs_r>:
9000c4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c4b8:	4606      	mov	r6, r0
9000c4ba:	460f      	mov	r7, r1
9000c4bc:	4614      	mov	r4, r2
9000c4be:	18d5      	adds	r5, r2, r3
9000c4c0:	42ac      	cmp	r4, r5
9000c4c2:	d101      	bne.n	9000c4c8 <__sfputs_r+0x12>
9000c4c4:	2000      	movs	r0, #0
9000c4c6:	e007      	b.n	9000c4d8 <__sfputs_r+0x22>
9000c4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c4cc:	463a      	mov	r2, r7
9000c4ce:	4630      	mov	r0, r6
9000c4d0:	f7ff ffda 	bl	9000c488 <__sfputc_r>
9000c4d4:	1c43      	adds	r3, r0, #1
9000c4d6:	d1f3      	bne.n	9000c4c0 <__sfputs_r+0xa>
9000c4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000c4dc <_vfiprintf_r>:
9000c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c4e0:	460d      	mov	r5, r1
9000c4e2:	b09d      	sub	sp, #116	@ 0x74
9000c4e4:	4614      	mov	r4, r2
9000c4e6:	4698      	mov	r8, r3
9000c4e8:	4606      	mov	r6, r0
9000c4ea:	b118      	cbz	r0, 9000c4f4 <_vfiprintf_r+0x18>
9000c4ec:	6a03      	ldr	r3, [r0, #32]
9000c4ee:	b90b      	cbnz	r3, 9000c4f4 <_vfiprintf_r+0x18>
9000c4f0:	f7ff fd76 	bl	9000bfe0 <__sinit>
9000c4f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c4f6:	07d9      	lsls	r1, r3, #31
9000c4f8:	d405      	bmi.n	9000c506 <_vfiprintf_r+0x2a>
9000c4fa:	89ab      	ldrh	r3, [r5, #12]
9000c4fc:	059a      	lsls	r2, r3, #22
9000c4fe:	d402      	bmi.n	9000c506 <_vfiprintf_r+0x2a>
9000c500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c502:	f7ff ff74 	bl	9000c3ee <__retarget_lock_acquire_recursive>
9000c506:	89ab      	ldrh	r3, [r5, #12]
9000c508:	071b      	lsls	r3, r3, #28
9000c50a:	d501      	bpl.n	9000c510 <_vfiprintf_r+0x34>
9000c50c:	692b      	ldr	r3, [r5, #16]
9000c50e:	b99b      	cbnz	r3, 9000c538 <_vfiprintf_r+0x5c>
9000c510:	4629      	mov	r1, r5
9000c512:	4630      	mov	r0, r6
9000c514:	f7ff fe8c 	bl	9000c230 <__swsetup_r>
9000c518:	b170      	cbz	r0, 9000c538 <_vfiprintf_r+0x5c>
9000c51a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c51c:	07dc      	lsls	r4, r3, #31
9000c51e:	d504      	bpl.n	9000c52a <_vfiprintf_r+0x4e>
9000c520:	f04f 30ff 	mov.w	r0, #4294967295
9000c524:	b01d      	add	sp, #116	@ 0x74
9000c526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c52a:	89ab      	ldrh	r3, [r5, #12]
9000c52c:	0598      	lsls	r0, r3, #22
9000c52e:	d4f7      	bmi.n	9000c520 <_vfiprintf_r+0x44>
9000c530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c532:	f7ff ff5d 	bl	9000c3f0 <__retarget_lock_release_recursive>
9000c536:	e7f3      	b.n	9000c520 <_vfiprintf_r+0x44>
9000c538:	2300      	movs	r3, #0
9000c53a:	9309      	str	r3, [sp, #36]	@ 0x24
9000c53c:	2320      	movs	r3, #32
9000c53e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000c542:	f8cd 800c 	str.w	r8, [sp, #12]
9000c546:	2330      	movs	r3, #48	@ 0x30
9000c548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000c6f8 <_vfiprintf_r+0x21c>
9000c54c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000c550:	f04f 0901 	mov.w	r9, #1
9000c554:	4623      	mov	r3, r4
9000c556:	469a      	mov	sl, r3
9000c558:	f813 2b01 	ldrb.w	r2, [r3], #1
9000c55c:	b10a      	cbz	r2, 9000c562 <_vfiprintf_r+0x86>
9000c55e:	2a25      	cmp	r2, #37	@ 0x25
9000c560:	d1f9      	bne.n	9000c556 <_vfiprintf_r+0x7a>
9000c562:	ebba 0b04 	subs.w	fp, sl, r4
9000c566:	d00b      	beq.n	9000c580 <_vfiprintf_r+0xa4>
9000c568:	465b      	mov	r3, fp
9000c56a:	4622      	mov	r2, r4
9000c56c:	4629      	mov	r1, r5
9000c56e:	4630      	mov	r0, r6
9000c570:	f7ff ffa1 	bl	9000c4b6 <__sfputs_r>
9000c574:	3001      	adds	r0, #1
9000c576:	f000 80a7 	beq.w	9000c6c8 <_vfiprintf_r+0x1ec>
9000c57a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000c57c:	445a      	add	r2, fp
9000c57e:	9209      	str	r2, [sp, #36]	@ 0x24
9000c580:	f89a 3000 	ldrb.w	r3, [sl]
9000c584:	2b00      	cmp	r3, #0
9000c586:	f000 809f 	beq.w	9000c6c8 <_vfiprintf_r+0x1ec>
9000c58a:	2300      	movs	r3, #0
9000c58c:	f04f 32ff 	mov.w	r2, #4294967295
9000c590:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000c594:	f10a 0a01 	add.w	sl, sl, #1
9000c598:	9304      	str	r3, [sp, #16]
9000c59a:	9307      	str	r3, [sp, #28]
9000c59c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000c5a0:	931a      	str	r3, [sp, #104]	@ 0x68
9000c5a2:	4654      	mov	r4, sl
9000c5a4:	2205      	movs	r2, #5
9000c5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c5aa:	4853      	ldr	r0, [pc, #332]	@ (9000c6f8 <_vfiprintf_r+0x21c>)
9000c5ac:	f7f3 fe98 	bl	900002e0 <memchr>
9000c5b0:	9a04      	ldr	r2, [sp, #16]
9000c5b2:	b9d8      	cbnz	r0, 9000c5ec <_vfiprintf_r+0x110>
9000c5b4:	06d1      	lsls	r1, r2, #27
9000c5b6:	bf44      	itt	mi
9000c5b8:	2320      	movmi	r3, #32
9000c5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000c5be:	0713      	lsls	r3, r2, #28
9000c5c0:	bf44      	itt	mi
9000c5c2:	232b      	movmi	r3, #43	@ 0x2b
9000c5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000c5c8:	f89a 3000 	ldrb.w	r3, [sl]
9000c5cc:	2b2a      	cmp	r3, #42	@ 0x2a
9000c5ce:	d015      	beq.n	9000c5fc <_vfiprintf_r+0x120>
9000c5d0:	9a07      	ldr	r2, [sp, #28]
9000c5d2:	4654      	mov	r4, sl
9000c5d4:	2000      	movs	r0, #0
9000c5d6:	f04f 0c0a 	mov.w	ip, #10
9000c5da:	4621      	mov	r1, r4
9000c5dc:	f811 3b01 	ldrb.w	r3, [r1], #1
9000c5e0:	3b30      	subs	r3, #48	@ 0x30
9000c5e2:	2b09      	cmp	r3, #9
9000c5e4:	d94b      	bls.n	9000c67e <_vfiprintf_r+0x1a2>
9000c5e6:	b1b0      	cbz	r0, 9000c616 <_vfiprintf_r+0x13a>
9000c5e8:	9207      	str	r2, [sp, #28]
9000c5ea:	e014      	b.n	9000c616 <_vfiprintf_r+0x13a>
9000c5ec:	eba0 0308 	sub.w	r3, r0, r8
9000c5f0:	fa09 f303 	lsl.w	r3, r9, r3
9000c5f4:	4313      	orrs	r3, r2
9000c5f6:	9304      	str	r3, [sp, #16]
9000c5f8:	46a2      	mov	sl, r4
9000c5fa:	e7d2      	b.n	9000c5a2 <_vfiprintf_r+0xc6>
9000c5fc:	9b03      	ldr	r3, [sp, #12]
9000c5fe:	1d19      	adds	r1, r3, #4
9000c600:	681b      	ldr	r3, [r3, #0]
9000c602:	9103      	str	r1, [sp, #12]
9000c604:	2b00      	cmp	r3, #0
9000c606:	bfbb      	ittet	lt
9000c608:	425b      	neglt	r3, r3
9000c60a:	f042 0202 	orrlt.w	r2, r2, #2
9000c60e:	9307      	strge	r3, [sp, #28]
9000c610:	9307      	strlt	r3, [sp, #28]
9000c612:	bfb8      	it	lt
9000c614:	9204      	strlt	r2, [sp, #16]
9000c616:	7823      	ldrb	r3, [r4, #0]
9000c618:	2b2e      	cmp	r3, #46	@ 0x2e
9000c61a:	d10a      	bne.n	9000c632 <_vfiprintf_r+0x156>
9000c61c:	7863      	ldrb	r3, [r4, #1]
9000c61e:	2b2a      	cmp	r3, #42	@ 0x2a
9000c620:	d132      	bne.n	9000c688 <_vfiprintf_r+0x1ac>
9000c622:	9b03      	ldr	r3, [sp, #12]
9000c624:	1d1a      	adds	r2, r3, #4
9000c626:	681b      	ldr	r3, [r3, #0]
9000c628:	9203      	str	r2, [sp, #12]
9000c62a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000c62e:	3402      	adds	r4, #2
9000c630:	9305      	str	r3, [sp, #20]
9000c632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000c708 <_vfiprintf_r+0x22c>
9000c636:	7821      	ldrb	r1, [r4, #0]
9000c638:	2203      	movs	r2, #3
9000c63a:	4650      	mov	r0, sl
9000c63c:	f7f3 fe50 	bl	900002e0 <memchr>
9000c640:	b138      	cbz	r0, 9000c652 <_vfiprintf_r+0x176>
9000c642:	9b04      	ldr	r3, [sp, #16]
9000c644:	eba0 000a 	sub.w	r0, r0, sl
9000c648:	2240      	movs	r2, #64	@ 0x40
9000c64a:	4082      	lsls	r2, r0
9000c64c:	4313      	orrs	r3, r2
9000c64e:	3401      	adds	r4, #1
9000c650:	9304      	str	r3, [sp, #16]
9000c652:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c656:	4829      	ldr	r0, [pc, #164]	@ (9000c6fc <_vfiprintf_r+0x220>)
9000c658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000c65c:	2206      	movs	r2, #6
9000c65e:	f7f3 fe3f 	bl	900002e0 <memchr>
9000c662:	2800      	cmp	r0, #0
9000c664:	d03f      	beq.n	9000c6e6 <_vfiprintf_r+0x20a>
9000c666:	4b26      	ldr	r3, [pc, #152]	@ (9000c700 <_vfiprintf_r+0x224>)
9000c668:	bb1b      	cbnz	r3, 9000c6b2 <_vfiprintf_r+0x1d6>
9000c66a:	9b03      	ldr	r3, [sp, #12]
9000c66c:	3307      	adds	r3, #7
9000c66e:	f023 0307 	bic.w	r3, r3, #7
9000c672:	3308      	adds	r3, #8
9000c674:	9303      	str	r3, [sp, #12]
9000c676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000c678:	443b      	add	r3, r7
9000c67a:	9309      	str	r3, [sp, #36]	@ 0x24
9000c67c:	e76a      	b.n	9000c554 <_vfiprintf_r+0x78>
9000c67e:	fb0c 3202 	mla	r2, ip, r2, r3
9000c682:	460c      	mov	r4, r1
9000c684:	2001      	movs	r0, #1
9000c686:	e7a8      	b.n	9000c5da <_vfiprintf_r+0xfe>
9000c688:	2300      	movs	r3, #0
9000c68a:	3401      	adds	r4, #1
9000c68c:	9305      	str	r3, [sp, #20]
9000c68e:	4619      	mov	r1, r3
9000c690:	f04f 0c0a 	mov.w	ip, #10
9000c694:	4620      	mov	r0, r4
9000c696:	f810 2b01 	ldrb.w	r2, [r0], #1
9000c69a:	3a30      	subs	r2, #48	@ 0x30
9000c69c:	2a09      	cmp	r2, #9
9000c69e:	d903      	bls.n	9000c6a8 <_vfiprintf_r+0x1cc>
9000c6a0:	2b00      	cmp	r3, #0
9000c6a2:	d0c6      	beq.n	9000c632 <_vfiprintf_r+0x156>
9000c6a4:	9105      	str	r1, [sp, #20]
9000c6a6:	e7c4      	b.n	9000c632 <_vfiprintf_r+0x156>
9000c6a8:	fb0c 2101 	mla	r1, ip, r1, r2
9000c6ac:	4604      	mov	r4, r0
9000c6ae:	2301      	movs	r3, #1
9000c6b0:	e7f0      	b.n	9000c694 <_vfiprintf_r+0x1b8>
9000c6b2:	ab03      	add	r3, sp, #12
9000c6b4:	9300      	str	r3, [sp, #0]
9000c6b6:	462a      	mov	r2, r5
9000c6b8:	4b12      	ldr	r3, [pc, #72]	@ (9000c704 <_vfiprintf_r+0x228>)
9000c6ba:	a904      	add	r1, sp, #16
9000c6bc:	4630      	mov	r0, r6
9000c6be:	f3af 8000 	nop.w
9000c6c2:	4607      	mov	r7, r0
9000c6c4:	1c78      	adds	r0, r7, #1
9000c6c6:	d1d6      	bne.n	9000c676 <_vfiprintf_r+0x19a>
9000c6c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c6ca:	07d9      	lsls	r1, r3, #31
9000c6cc:	d405      	bmi.n	9000c6da <_vfiprintf_r+0x1fe>
9000c6ce:	89ab      	ldrh	r3, [r5, #12]
9000c6d0:	059a      	lsls	r2, r3, #22
9000c6d2:	d402      	bmi.n	9000c6da <_vfiprintf_r+0x1fe>
9000c6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c6d6:	f7ff fe8b 	bl	9000c3f0 <__retarget_lock_release_recursive>
9000c6da:	89ab      	ldrh	r3, [r5, #12]
9000c6dc:	065b      	lsls	r3, r3, #25
9000c6de:	f53f af1f 	bmi.w	9000c520 <_vfiprintf_r+0x44>
9000c6e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000c6e4:	e71e      	b.n	9000c524 <_vfiprintf_r+0x48>
9000c6e6:	ab03      	add	r3, sp, #12
9000c6e8:	9300      	str	r3, [sp, #0]
9000c6ea:	462a      	mov	r2, r5
9000c6ec:	4b05      	ldr	r3, [pc, #20]	@ (9000c704 <_vfiprintf_r+0x228>)
9000c6ee:	a904      	add	r1, sp, #16
9000c6f0:	4630      	mov	r0, r6
9000c6f2:	f000 f879 	bl	9000c7e8 <_printf_i>
9000c6f6:	e7e4      	b.n	9000c6c2 <_vfiprintf_r+0x1e6>
9000c6f8:	9000f19c 	.word	0x9000f19c
9000c6fc:	9000f1a6 	.word	0x9000f1a6
9000c700:	00000000 	.word	0x00000000
9000c704:	9000c4b7 	.word	0x9000c4b7
9000c708:	9000f1a2 	.word	0x9000f1a2

9000c70c <_printf_common>:
9000c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c710:	4616      	mov	r6, r2
9000c712:	4698      	mov	r8, r3
9000c714:	688a      	ldr	r2, [r1, #8]
9000c716:	690b      	ldr	r3, [r1, #16]
9000c718:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000c71c:	4293      	cmp	r3, r2
9000c71e:	bfb8      	it	lt
9000c720:	4613      	movlt	r3, r2
9000c722:	6033      	str	r3, [r6, #0]
9000c724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000c728:	4607      	mov	r7, r0
9000c72a:	460c      	mov	r4, r1
9000c72c:	b10a      	cbz	r2, 9000c732 <_printf_common+0x26>
9000c72e:	3301      	adds	r3, #1
9000c730:	6033      	str	r3, [r6, #0]
9000c732:	6823      	ldr	r3, [r4, #0]
9000c734:	0699      	lsls	r1, r3, #26
9000c736:	bf42      	ittt	mi
9000c738:	6833      	ldrmi	r3, [r6, #0]
9000c73a:	3302      	addmi	r3, #2
9000c73c:	6033      	strmi	r3, [r6, #0]
9000c73e:	6825      	ldr	r5, [r4, #0]
9000c740:	f015 0506 	ands.w	r5, r5, #6
9000c744:	d106      	bne.n	9000c754 <_printf_common+0x48>
9000c746:	f104 0a19 	add.w	sl, r4, #25
9000c74a:	68e3      	ldr	r3, [r4, #12]
9000c74c:	6832      	ldr	r2, [r6, #0]
9000c74e:	1a9b      	subs	r3, r3, r2
9000c750:	42ab      	cmp	r3, r5
9000c752:	dc26      	bgt.n	9000c7a2 <_printf_common+0x96>
9000c754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000c758:	6822      	ldr	r2, [r4, #0]
9000c75a:	3b00      	subs	r3, #0
9000c75c:	bf18      	it	ne
9000c75e:	2301      	movne	r3, #1
9000c760:	0692      	lsls	r2, r2, #26
9000c762:	d42b      	bmi.n	9000c7bc <_printf_common+0xb0>
9000c764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000c768:	4641      	mov	r1, r8
9000c76a:	4638      	mov	r0, r7
9000c76c:	47c8      	blx	r9
9000c76e:	3001      	adds	r0, #1
9000c770:	d01e      	beq.n	9000c7b0 <_printf_common+0xa4>
9000c772:	6823      	ldr	r3, [r4, #0]
9000c774:	6922      	ldr	r2, [r4, #16]
9000c776:	f003 0306 	and.w	r3, r3, #6
9000c77a:	2b04      	cmp	r3, #4
9000c77c:	bf02      	ittt	eq
9000c77e:	68e5      	ldreq	r5, [r4, #12]
9000c780:	6833      	ldreq	r3, [r6, #0]
9000c782:	1aed      	subeq	r5, r5, r3
9000c784:	68a3      	ldr	r3, [r4, #8]
9000c786:	bf0c      	ite	eq
9000c788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000c78c:	2500      	movne	r5, #0
9000c78e:	4293      	cmp	r3, r2
9000c790:	bfc4      	itt	gt
9000c792:	1a9b      	subgt	r3, r3, r2
9000c794:	18ed      	addgt	r5, r5, r3
9000c796:	2600      	movs	r6, #0
9000c798:	341a      	adds	r4, #26
9000c79a:	42b5      	cmp	r5, r6
9000c79c:	d11a      	bne.n	9000c7d4 <_printf_common+0xc8>
9000c79e:	2000      	movs	r0, #0
9000c7a0:	e008      	b.n	9000c7b4 <_printf_common+0xa8>
9000c7a2:	2301      	movs	r3, #1
9000c7a4:	4652      	mov	r2, sl
9000c7a6:	4641      	mov	r1, r8
9000c7a8:	4638      	mov	r0, r7
9000c7aa:	47c8      	blx	r9
9000c7ac:	3001      	adds	r0, #1
9000c7ae:	d103      	bne.n	9000c7b8 <_printf_common+0xac>
9000c7b0:	f04f 30ff 	mov.w	r0, #4294967295
9000c7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c7b8:	3501      	adds	r5, #1
9000c7ba:	e7c6      	b.n	9000c74a <_printf_common+0x3e>
9000c7bc:	18e1      	adds	r1, r4, r3
9000c7be:	1c5a      	adds	r2, r3, #1
9000c7c0:	2030      	movs	r0, #48	@ 0x30
9000c7c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000c7c6:	4422      	add	r2, r4
9000c7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000c7cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000c7d0:	3302      	adds	r3, #2
9000c7d2:	e7c7      	b.n	9000c764 <_printf_common+0x58>
9000c7d4:	2301      	movs	r3, #1
9000c7d6:	4622      	mov	r2, r4
9000c7d8:	4641      	mov	r1, r8
9000c7da:	4638      	mov	r0, r7
9000c7dc:	47c8      	blx	r9
9000c7de:	3001      	adds	r0, #1
9000c7e0:	d0e6      	beq.n	9000c7b0 <_printf_common+0xa4>
9000c7e2:	3601      	adds	r6, #1
9000c7e4:	e7d9      	b.n	9000c79a <_printf_common+0x8e>
	...

9000c7e8 <_printf_i>:
9000c7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000c7ec:	7e0f      	ldrb	r7, [r1, #24]
9000c7ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000c7f0:	2f78      	cmp	r7, #120	@ 0x78
9000c7f2:	4691      	mov	r9, r2
9000c7f4:	4680      	mov	r8, r0
9000c7f6:	460c      	mov	r4, r1
9000c7f8:	469a      	mov	sl, r3
9000c7fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000c7fe:	d807      	bhi.n	9000c810 <_printf_i+0x28>
9000c800:	2f62      	cmp	r7, #98	@ 0x62
9000c802:	d80a      	bhi.n	9000c81a <_printf_i+0x32>
9000c804:	2f00      	cmp	r7, #0
9000c806:	f000 80d1 	beq.w	9000c9ac <_printf_i+0x1c4>
9000c80a:	2f58      	cmp	r7, #88	@ 0x58
9000c80c:	f000 80b8 	beq.w	9000c980 <_printf_i+0x198>
9000c810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000c814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000c818:	e03a      	b.n	9000c890 <_printf_i+0xa8>
9000c81a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000c81e:	2b15      	cmp	r3, #21
9000c820:	d8f6      	bhi.n	9000c810 <_printf_i+0x28>
9000c822:	a101      	add	r1, pc, #4	@ (adr r1, 9000c828 <_printf_i+0x40>)
9000c824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000c828:	9000c881 	.word	0x9000c881
9000c82c:	9000c895 	.word	0x9000c895
9000c830:	9000c811 	.word	0x9000c811
9000c834:	9000c811 	.word	0x9000c811
9000c838:	9000c811 	.word	0x9000c811
9000c83c:	9000c811 	.word	0x9000c811
9000c840:	9000c895 	.word	0x9000c895
9000c844:	9000c811 	.word	0x9000c811
9000c848:	9000c811 	.word	0x9000c811
9000c84c:	9000c811 	.word	0x9000c811
9000c850:	9000c811 	.word	0x9000c811
9000c854:	9000c993 	.word	0x9000c993
9000c858:	9000c8bf 	.word	0x9000c8bf
9000c85c:	9000c94d 	.word	0x9000c94d
9000c860:	9000c811 	.word	0x9000c811
9000c864:	9000c811 	.word	0x9000c811
9000c868:	9000c9b5 	.word	0x9000c9b5
9000c86c:	9000c811 	.word	0x9000c811
9000c870:	9000c8bf 	.word	0x9000c8bf
9000c874:	9000c811 	.word	0x9000c811
9000c878:	9000c811 	.word	0x9000c811
9000c87c:	9000c955 	.word	0x9000c955
9000c880:	6833      	ldr	r3, [r6, #0]
9000c882:	1d1a      	adds	r2, r3, #4
9000c884:	681b      	ldr	r3, [r3, #0]
9000c886:	6032      	str	r2, [r6, #0]
9000c888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000c88c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000c890:	2301      	movs	r3, #1
9000c892:	e09c      	b.n	9000c9ce <_printf_i+0x1e6>
9000c894:	6833      	ldr	r3, [r6, #0]
9000c896:	6820      	ldr	r0, [r4, #0]
9000c898:	1d19      	adds	r1, r3, #4
9000c89a:	6031      	str	r1, [r6, #0]
9000c89c:	0606      	lsls	r6, r0, #24
9000c89e:	d501      	bpl.n	9000c8a4 <_printf_i+0xbc>
9000c8a0:	681d      	ldr	r5, [r3, #0]
9000c8a2:	e003      	b.n	9000c8ac <_printf_i+0xc4>
9000c8a4:	0645      	lsls	r5, r0, #25
9000c8a6:	d5fb      	bpl.n	9000c8a0 <_printf_i+0xb8>
9000c8a8:	f9b3 5000 	ldrsh.w	r5, [r3]
9000c8ac:	2d00      	cmp	r5, #0
9000c8ae:	da03      	bge.n	9000c8b8 <_printf_i+0xd0>
9000c8b0:	232d      	movs	r3, #45	@ 0x2d
9000c8b2:	426d      	negs	r5, r5
9000c8b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000c8b8:	4858      	ldr	r0, [pc, #352]	@ (9000ca1c <_printf_i+0x234>)
9000c8ba:	230a      	movs	r3, #10
9000c8bc:	e011      	b.n	9000c8e2 <_printf_i+0xfa>
9000c8be:	6821      	ldr	r1, [r4, #0]
9000c8c0:	6833      	ldr	r3, [r6, #0]
9000c8c2:	0608      	lsls	r0, r1, #24
9000c8c4:	f853 5b04 	ldr.w	r5, [r3], #4
9000c8c8:	d402      	bmi.n	9000c8d0 <_printf_i+0xe8>
9000c8ca:	0649      	lsls	r1, r1, #25
9000c8cc:	bf48      	it	mi
9000c8ce:	b2ad      	uxthmi	r5, r5
9000c8d0:	2f6f      	cmp	r7, #111	@ 0x6f
9000c8d2:	4852      	ldr	r0, [pc, #328]	@ (9000ca1c <_printf_i+0x234>)
9000c8d4:	6033      	str	r3, [r6, #0]
9000c8d6:	bf14      	ite	ne
9000c8d8:	230a      	movne	r3, #10
9000c8da:	2308      	moveq	r3, #8
9000c8dc:	2100      	movs	r1, #0
9000c8de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000c8e2:	6866      	ldr	r6, [r4, #4]
9000c8e4:	60a6      	str	r6, [r4, #8]
9000c8e6:	2e00      	cmp	r6, #0
9000c8e8:	db05      	blt.n	9000c8f6 <_printf_i+0x10e>
9000c8ea:	6821      	ldr	r1, [r4, #0]
9000c8ec:	432e      	orrs	r6, r5
9000c8ee:	f021 0104 	bic.w	r1, r1, #4
9000c8f2:	6021      	str	r1, [r4, #0]
9000c8f4:	d04b      	beq.n	9000c98e <_printf_i+0x1a6>
9000c8f6:	4616      	mov	r6, r2
9000c8f8:	fbb5 f1f3 	udiv	r1, r5, r3
9000c8fc:	fb03 5711 	mls	r7, r3, r1, r5
9000c900:	5dc7      	ldrb	r7, [r0, r7]
9000c902:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000c906:	462f      	mov	r7, r5
9000c908:	42bb      	cmp	r3, r7
9000c90a:	460d      	mov	r5, r1
9000c90c:	d9f4      	bls.n	9000c8f8 <_printf_i+0x110>
9000c90e:	2b08      	cmp	r3, #8
9000c910:	d10b      	bne.n	9000c92a <_printf_i+0x142>
9000c912:	6823      	ldr	r3, [r4, #0]
9000c914:	07df      	lsls	r7, r3, #31
9000c916:	d508      	bpl.n	9000c92a <_printf_i+0x142>
9000c918:	6923      	ldr	r3, [r4, #16]
9000c91a:	6861      	ldr	r1, [r4, #4]
9000c91c:	4299      	cmp	r1, r3
9000c91e:	bfde      	ittt	le
9000c920:	2330      	movle	r3, #48	@ 0x30
9000c922:	f806 3c01 	strble.w	r3, [r6, #-1]
9000c926:	f106 36ff 	addle.w	r6, r6, #4294967295
9000c92a:	1b92      	subs	r2, r2, r6
9000c92c:	6122      	str	r2, [r4, #16]
9000c92e:	f8cd a000 	str.w	sl, [sp]
9000c932:	464b      	mov	r3, r9
9000c934:	aa03      	add	r2, sp, #12
9000c936:	4621      	mov	r1, r4
9000c938:	4640      	mov	r0, r8
9000c93a:	f7ff fee7 	bl	9000c70c <_printf_common>
9000c93e:	3001      	adds	r0, #1
9000c940:	d14a      	bne.n	9000c9d8 <_printf_i+0x1f0>
9000c942:	f04f 30ff 	mov.w	r0, #4294967295
9000c946:	b004      	add	sp, #16
9000c948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c94c:	6823      	ldr	r3, [r4, #0]
9000c94e:	f043 0320 	orr.w	r3, r3, #32
9000c952:	6023      	str	r3, [r4, #0]
9000c954:	4832      	ldr	r0, [pc, #200]	@ (9000ca20 <_printf_i+0x238>)
9000c956:	2778      	movs	r7, #120	@ 0x78
9000c958:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000c95c:	6823      	ldr	r3, [r4, #0]
9000c95e:	6831      	ldr	r1, [r6, #0]
9000c960:	061f      	lsls	r7, r3, #24
9000c962:	f851 5b04 	ldr.w	r5, [r1], #4
9000c966:	d402      	bmi.n	9000c96e <_printf_i+0x186>
9000c968:	065f      	lsls	r7, r3, #25
9000c96a:	bf48      	it	mi
9000c96c:	b2ad      	uxthmi	r5, r5
9000c96e:	6031      	str	r1, [r6, #0]
9000c970:	07d9      	lsls	r1, r3, #31
9000c972:	bf44      	itt	mi
9000c974:	f043 0320 	orrmi.w	r3, r3, #32
9000c978:	6023      	strmi	r3, [r4, #0]
9000c97a:	b11d      	cbz	r5, 9000c984 <_printf_i+0x19c>
9000c97c:	2310      	movs	r3, #16
9000c97e:	e7ad      	b.n	9000c8dc <_printf_i+0xf4>
9000c980:	4826      	ldr	r0, [pc, #152]	@ (9000ca1c <_printf_i+0x234>)
9000c982:	e7e9      	b.n	9000c958 <_printf_i+0x170>
9000c984:	6823      	ldr	r3, [r4, #0]
9000c986:	f023 0320 	bic.w	r3, r3, #32
9000c98a:	6023      	str	r3, [r4, #0]
9000c98c:	e7f6      	b.n	9000c97c <_printf_i+0x194>
9000c98e:	4616      	mov	r6, r2
9000c990:	e7bd      	b.n	9000c90e <_printf_i+0x126>
9000c992:	6833      	ldr	r3, [r6, #0]
9000c994:	6825      	ldr	r5, [r4, #0]
9000c996:	6961      	ldr	r1, [r4, #20]
9000c998:	1d18      	adds	r0, r3, #4
9000c99a:	6030      	str	r0, [r6, #0]
9000c99c:	062e      	lsls	r6, r5, #24
9000c99e:	681b      	ldr	r3, [r3, #0]
9000c9a0:	d501      	bpl.n	9000c9a6 <_printf_i+0x1be>
9000c9a2:	6019      	str	r1, [r3, #0]
9000c9a4:	e002      	b.n	9000c9ac <_printf_i+0x1c4>
9000c9a6:	0668      	lsls	r0, r5, #25
9000c9a8:	d5fb      	bpl.n	9000c9a2 <_printf_i+0x1ba>
9000c9aa:	8019      	strh	r1, [r3, #0]
9000c9ac:	2300      	movs	r3, #0
9000c9ae:	6123      	str	r3, [r4, #16]
9000c9b0:	4616      	mov	r6, r2
9000c9b2:	e7bc      	b.n	9000c92e <_printf_i+0x146>
9000c9b4:	6833      	ldr	r3, [r6, #0]
9000c9b6:	1d1a      	adds	r2, r3, #4
9000c9b8:	6032      	str	r2, [r6, #0]
9000c9ba:	681e      	ldr	r6, [r3, #0]
9000c9bc:	6862      	ldr	r2, [r4, #4]
9000c9be:	2100      	movs	r1, #0
9000c9c0:	4630      	mov	r0, r6
9000c9c2:	f7f3 fc8d 	bl	900002e0 <memchr>
9000c9c6:	b108      	cbz	r0, 9000c9cc <_printf_i+0x1e4>
9000c9c8:	1b80      	subs	r0, r0, r6
9000c9ca:	6060      	str	r0, [r4, #4]
9000c9cc:	6863      	ldr	r3, [r4, #4]
9000c9ce:	6123      	str	r3, [r4, #16]
9000c9d0:	2300      	movs	r3, #0
9000c9d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000c9d6:	e7aa      	b.n	9000c92e <_printf_i+0x146>
9000c9d8:	6923      	ldr	r3, [r4, #16]
9000c9da:	4632      	mov	r2, r6
9000c9dc:	4649      	mov	r1, r9
9000c9de:	4640      	mov	r0, r8
9000c9e0:	47d0      	blx	sl
9000c9e2:	3001      	adds	r0, #1
9000c9e4:	d0ad      	beq.n	9000c942 <_printf_i+0x15a>
9000c9e6:	6823      	ldr	r3, [r4, #0]
9000c9e8:	079b      	lsls	r3, r3, #30
9000c9ea:	d413      	bmi.n	9000ca14 <_printf_i+0x22c>
9000c9ec:	68e0      	ldr	r0, [r4, #12]
9000c9ee:	9b03      	ldr	r3, [sp, #12]
9000c9f0:	4298      	cmp	r0, r3
9000c9f2:	bfb8      	it	lt
9000c9f4:	4618      	movlt	r0, r3
9000c9f6:	e7a6      	b.n	9000c946 <_printf_i+0x15e>
9000c9f8:	2301      	movs	r3, #1
9000c9fa:	4632      	mov	r2, r6
9000c9fc:	4649      	mov	r1, r9
9000c9fe:	4640      	mov	r0, r8
9000ca00:	47d0      	blx	sl
9000ca02:	3001      	adds	r0, #1
9000ca04:	d09d      	beq.n	9000c942 <_printf_i+0x15a>
9000ca06:	3501      	adds	r5, #1
9000ca08:	68e3      	ldr	r3, [r4, #12]
9000ca0a:	9903      	ldr	r1, [sp, #12]
9000ca0c:	1a5b      	subs	r3, r3, r1
9000ca0e:	42ab      	cmp	r3, r5
9000ca10:	dcf2      	bgt.n	9000c9f8 <_printf_i+0x210>
9000ca12:	e7eb      	b.n	9000c9ec <_printf_i+0x204>
9000ca14:	2500      	movs	r5, #0
9000ca16:	f104 0619 	add.w	r6, r4, #25
9000ca1a:	e7f5      	b.n	9000ca08 <_printf_i+0x220>
9000ca1c:	9000f1ad 	.word	0x9000f1ad
9000ca20:	9000f1be 	.word	0x9000f1be

9000ca24 <__sflush_r>:
9000ca24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000ca28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ca2c:	0716      	lsls	r6, r2, #28
9000ca2e:	4605      	mov	r5, r0
9000ca30:	460c      	mov	r4, r1
9000ca32:	d454      	bmi.n	9000cade <__sflush_r+0xba>
9000ca34:	684b      	ldr	r3, [r1, #4]
9000ca36:	2b00      	cmp	r3, #0
9000ca38:	dc02      	bgt.n	9000ca40 <__sflush_r+0x1c>
9000ca3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000ca3c:	2b00      	cmp	r3, #0
9000ca3e:	dd48      	ble.n	9000cad2 <__sflush_r+0xae>
9000ca40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000ca42:	2e00      	cmp	r6, #0
9000ca44:	d045      	beq.n	9000cad2 <__sflush_r+0xae>
9000ca46:	2300      	movs	r3, #0
9000ca48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000ca4c:	682f      	ldr	r7, [r5, #0]
9000ca4e:	6a21      	ldr	r1, [r4, #32]
9000ca50:	602b      	str	r3, [r5, #0]
9000ca52:	d030      	beq.n	9000cab6 <__sflush_r+0x92>
9000ca54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000ca56:	89a3      	ldrh	r3, [r4, #12]
9000ca58:	0759      	lsls	r1, r3, #29
9000ca5a:	d505      	bpl.n	9000ca68 <__sflush_r+0x44>
9000ca5c:	6863      	ldr	r3, [r4, #4]
9000ca5e:	1ad2      	subs	r2, r2, r3
9000ca60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000ca62:	b10b      	cbz	r3, 9000ca68 <__sflush_r+0x44>
9000ca64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000ca66:	1ad2      	subs	r2, r2, r3
9000ca68:	2300      	movs	r3, #0
9000ca6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000ca6c:	6a21      	ldr	r1, [r4, #32]
9000ca6e:	4628      	mov	r0, r5
9000ca70:	47b0      	blx	r6
9000ca72:	1c43      	adds	r3, r0, #1
9000ca74:	89a3      	ldrh	r3, [r4, #12]
9000ca76:	d106      	bne.n	9000ca86 <__sflush_r+0x62>
9000ca78:	6829      	ldr	r1, [r5, #0]
9000ca7a:	291d      	cmp	r1, #29
9000ca7c:	d82b      	bhi.n	9000cad6 <__sflush_r+0xb2>
9000ca7e:	4a2a      	ldr	r2, [pc, #168]	@ (9000cb28 <__sflush_r+0x104>)
9000ca80:	40ca      	lsrs	r2, r1
9000ca82:	07d6      	lsls	r6, r2, #31
9000ca84:	d527      	bpl.n	9000cad6 <__sflush_r+0xb2>
9000ca86:	2200      	movs	r2, #0
9000ca88:	6062      	str	r2, [r4, #4]
9000ca8a:	04d9      	lsls	r1, r3, #19
9000ca8c:	6922      	ldr	r2, [r4, #16]
9000ca8e:	6022      	str	r2, [r4, #0]
9000ca90:	d504      	bpl.n	9000ca9c <__sflush_r+0x78>
9000ca92:	1c42      	adds	r2, r0, #1
9000ca94:	d101      	bne.n	9000ca9a <__sflush_r+0x76>
9000ca96:	682b      	ldr	r3, [r5, #0]
9000ca98:	b903      	cbnz	r3, 9000ca9c <__sflush_r+0x78>
9000ca9a:	6560      	str	r0, [r4, #84]	@ 0x54
9000ca9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000ca9e:	602f      	str	r7, [r5, #0]
9000caa0:	b1b9      	cbz	r1, 9000cad2 <__sflush_r+0xae>
9000caa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000caa6:	4299      	cmp	r1, r3
9000caa8:	d002      	beq.n	9000cab0 <__sflush_r+0x8c>
9000caaa:	4628      	mov	r0, r5
9000caac:	f7ff fca2 	bl	9000c3f4 <_free_r>
9000cab0:	2300      	movs	r3, #0
9000cab2:	6363      	str	r3, [r4, #52]	@ 0x34
9000cab4:	e00d      	b.n	9000cad2 <__sflush_r+0xae>
9000cab6:	2301      	movs	r3, #1
9000cab8:	4628      	mov	r0, r5
9000caba:	47b0      	blx	r6
9000cabc:	4602      	mov	r2, r0
9000cabe:	1c50      	adds	r0, r2, #1
9000cac0:	d1c9      	bne.n	9000ca56 <__sflush_r+0x32>
9000cac2:	682b      	ldr	r3, [r5, #0]
9000cac4:	2b00      	cmp	r3, #0
9000cac6:	d0c6      	beq.n	9000ca56 <__sflush_r+0x32>
9000cac8:	2b1d      	cmp	r3, #29
9000caca:	d001      	beq.n	9000cad0 <__sflush_r+0xac>
9000cacc:	2b16      	cmp	r3, #22
9000cace:	d11e      	bne.n	9000cb0e <__sflush_r+0xea>
9000cad0:	602f      	str	r7, [r5, #0]
9000cad2:	2000      	movs	r0, #0
9000cad4:	e022      	b.n	9000cb1c <__sflush_r+0xf8>
9000cad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cada:	b21b      	sxth	r3, r3
9000cadc:	e01b      	b.n	9000cb16 <__sflush_r+0xf2>
9000cade:	690f      	ldr	r7, [r1, #16]
9000cae0:	2f00      	cmp	r7, #0
9000cae2:	d0f6      	beq.n	9000cad2 <__sflush_r+0xae>
9000cae4:	0793      	lsls	r3, r2, #30
9000cae6:	680e      	ldr	r6, [r1, #0]
9000cae8:	bf08      	it	eq
9000caea:	694b      	ldreq	r3, [r1, #20]
9000caec:	600f      	str	r7, [r1, #0]
9000caee:	bf18      	it	ne
9000caf0:	2300      	movne	r3, #0
9000caf2:	eba6 0807 	sub.w	r8, r6, r7
9000caf6:	608b      	str	r3, [r1, #8]
9000caf8:	f1b8 0f00 	cmp.w	r8, #0
9000cafc:	dde9      	ble.n	9000cad2 <__sflush_r+0xae>
9000cafe:	6a21      	ldr	r1, [r4, #32]
9000cb00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000cb02:	4643      	mov	r3, r8
9000cb04:	463a      	mov	r2, r7
9000cb06:	4628      	mov	r0, r5
9000cb08:	47b0      	blx	r6
9000cb0a:	2800      	cmp	r0, #0
9000cb0c:	dc08      	bgt.n	9000cb20 <__sflush_r+0xfc>
9000cb0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cb16:	81a3      	strh	r3, [r4, #12]
9000cb18:	f04f 30ff 	mov.w	r0, #4294967295
9000cb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000cb20:	4407      	add	r7, r0
9000cb22:	eba8 0800 	sub.w	r8, r8, r0
9000cb26:	e7e7      	b.n	9000caf8 <__sflush_r+0xd4>
9000cb28:	20400001 	.word	0x20400001

9000cb2c <_fflush_r>:
9000cb2c:	b538      	push	{r3, r4, r5, lr}
9000cb2e:	690b      	ldr	r3, [r1, #16]
9000cb30:	4605      	mov	r5, r0
9000cb32:	460c      	mov	r4, r1
9000cb34:	b913      	cbnz	r3, 9000cb3c <_fflush_r+0x10>
9000cb36:	2500      	movs	r5, #0
9000cb38:	4628      	mov	r0, r5
9000cb3a:	bd38      	pop	{r3, r4, r5, pc}
9000cb3c:	b118      	cbz	r0, 9000cb46 <_fflush_r+0x1a>
9000cb3e:	6a03      	ldr	r3, [r0, #32]
9000cb40:	b90b      	cbnz	r3, 9000cb46 <_fflush_r+0x1a>
9000cb42:	f7ff fa4d 	bl	9000bfe0 <__sinit>
9000cb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cb4a:	2b00      	cmp	r3, #0
9000cb4c:	d0f3      	beq.n	9000cb36 <_fflush_r+0xa>
9000cb4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000cb50:	07d0      	lsls	r0, r2, #31
9000cb52:	d404      	bmi.n	9000cb5e <_fflush_r+0x32>
9000cb54:	0599      	lsls	r1, r3, #22
9000cb56:	d402      	bmi.n	9000cb5e <_fflush_r+0x32>
9000cb58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cb5a:	f7ff fc48 	bl	9000c3ee <__retarget_lock_acquire_recursive>
9000cb5e:	4628      	mov	r0, r5
9000cb60:	4621      	mov	r1, r4
9000cb62:	f7ff ff5f 	bl	9000ca24 <__sflush_r>
9000cb66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000cb68:	07da      	lsls	r2, r3, #31
9000cb6a:	4605      	mov	r5, r0
9000cb6c:	d4e4      	bmi.n	9000cb38 <_fflush_r+0xc>
9000cb6e:	89a3      	ldrh	r3, [r4, #12]
9000cb70:	059b      	lsls	r3, r3, #22
9000cb72:	d4e1      	bmi.n	9000cb38 <_fflush_r+0xc>
9000cb74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cb76:	f7ff fc3b 	bl	9000c3f0 <__retarget_lock_release_recursive>
9000cb7a:	e7dd      	b.n	9000cb38 <_fflush_r+0xc>

9000cb7c <__swhatbuf_r>:
9000cb7c:	b570      	push	{r4, r5, r6, lr}
9000cb7e:	460c      	mov	r4, r1
9000cb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cb84:	2900      	cmp	r1, #0
9000cb86:	b096      	sub	sp, #88	@ 0x58
9000cb88:	4615      	mov	r5, r2
9000cb8a:	461e      	mov	r6, r3
9000cb8c:	da0d      	bge.n	9000cbaa <__swhatbuf_r+0x2e>
9000cb8e:	89a3      	ldrh	r3, [r4, #12]
9000cb90:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000cb94:	f04f 0100 	mov.w	r1, #0
9000cb98:	bf14      	ite	ne
9000cb9a:	2340      	movne	r3, #64	@ 0x40
9000cb9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000cba0:	2000      	movs	r0, #0
9000cba2:	6031      	str	r1, [r6, #0]
9000cba4:	602b      	str	r3, [r5, #0]
9000cba6:	b016      	add	sp, #88	@ 0x58
9000cba8:	bd70      	pop	{r4, r5, r6, pc}
9000cbaa:	466a      	mov	r2, sp
9000cbac:	f000 f848 	bl	9000cc40 <_fstat_r>
9000cbb0:	2800      	cmp	r0, #0
9000cbb2:	dbec      	blt.n	9000cb8e <__swhatbuf_r+0x12>
9000cbb4:	9901      	ldr	r1, [sp, #4]
9000cbb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000cbba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000cbbe:	4259      	negs	r1, r3
9000cbc0:	4159      	adcs	r1, r3
9000cbc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000cbc6:	e7eb      	b.n	9000cba0 <__swhatbuf_r+0x24>

9000cbc8 <__smakebuf_r>:
9000cbc8:	898b      	ldrh	r3, [r1, #12]
9000cbca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000cbcc:	079d      	lsls	r5, r3, #30
9000cbce:	4606      	mov	r6, r0
9000cbd0:	460c      	mov	r4, r1
9000cbd2:	d507      	bpl.n	9000cbe4 <__smakebuf_r+0x1c>
9000cbd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000cbd8:	6023      	str	r3, [r4, #0]
9000cbda:	6123      	str	r3, [r4, #16]
9000cbdc:	2301      	movs	r3, #1
9000cbde:	6163      	str	r3, [r4, #20]
9000cbe0:	b003      	add	sp, #12
9000cbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000cbe4:	ab01      	add	r3, sp, #4
9000cbe6:	466a      	mov	r2, sp
9000cbe8:	f7ff ffc8 	bl	9000cb7c <__swhatbuf_r>
9000cbec:	9f00      	ldr	r7, [sp, #0]
9000cbee:	4605      	mov	r5, r0
9000cbf0:	4639      	mov	r1, r7
9000cbf2:	4630      	mov	r0, r6
9000cbf4:	f7ff f8dc 	bl	9000bdb0 <_malloc_r>
9000cbf8:	b948      	cbnz	r0, 9000cc0e <__smakebuf_r+0x46>
9000cbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cbfe:	059a      	lsls	r2, r3, #22
9000cc00:	d4ee      	bmi.n	9000cbe0 <__smakebuf_r+0x18>
9000cc02:	f023 0303 	bic.w	r3, r3, #3
9000cc06:	f043 0302 	orr.w	r3, r3, #2
9000cc0a:	81a3      	strh	r3, [r4, #12]
9000cc0c:	e7e2      	b.n	9000cbd4 <__smakebuf_r+0xc>
9000cc0e:	89a3      	ldrh	r3, [r4, #12]
9000cc10:	6020      	str	r0, [r4, #0]
9000cc12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000cc16:	81a3      	strh	r3, [r4, #12]
9000cc18:	9b01      	ldr	r3, [sp, #4]
9000cc1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000cc1e:	b15b      	cbz	r3, 9000cc38 <__smakebuf_r+0x70>
9000cc20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000cc24:	4630      	mov	r0, r6
9000cc26:	f000 f81d 	bl	9000cc64 <_isatty_r>
9000cc2a:	b128      	cbz	r0, 9000cc38 <__smakebuf_r+0x70>
9000cc2c:	89a3      	ldrh	r3, [r4, #12]
9000cc2e:	f023 0303 	bic.w	r3, r3, #3
9000cc32:	f043 0301 	orr.w	r3, r3, #1
9000cc36:	81a3      	strh	r3, [r4, #12]
9000cc38:	89a3      	ldrh	r3, [r4, #12]
9000cc3a:	431d      	orrs	r5, r3
9000cc3c:	81a5      	strh	r5, [r4, #12]
9000cc3e:	e7cf      	b.n	9000cbe0 <__smakebuf_r+0x18>

9000cc40 <_fstat_r>:
9000cc40:	b538      	push	{r3, r4, r5, lr}
9000cc42:	4d07      	ldr	r5, [pc, #28]	@ (9000cc60 <_fstat_r+0x20>)
9000cc44:	2300      	movs	r3, #0
9000cc46:	4604      	mov	r4, r0
9000cc48:	4608      	mov	r0, r1
9000cc4a:	4611      	mov	r1, r2
9000cc4c:	602b      	str	r3, [r5, #0]
9000cc4e:	f7f4 fa38 	bl	900010c2 <_fstat>
9000cc52:	1c43      	adds	r3, r0, #1
9000cc54:	d102      	bne.n	9000cc5c <_fstat_r+0x1c>
9000cc56:	682b      	ldr	r3, [r5, #0]
9000cc58:	b103      	cbz	r3, 9000cc5c <_fstat_r+0x1c>
9000cc5a:	6023      	str	r3, [r4, #0]
9000cc5c:	bd38      	pop	{r3, r4, r5, pc}
9000cc5e:	bf00      	nop
9000cc60:	20001490 	.word	0x20001490

9000cc64 <_isatty_r>:
9000cc64:	b538      	push	{r3, r4, r5, lr}
9000cc66:	4d06      	ldr	r5, [pc, #24]	@ (9000cc80 <_isatty_r+0x1c>)
9000cc68:	2300      	movs	r3, #0
9000cc6a:	4604      	mov	r4, r0
9000cc6c:	4608      	mov	r0, r1
9000cc6e:	602b      	str	r3, [r5, #0]
9000cc70:	f7f4 fa37 	bl	900010e2 <_isatty>
9000cc74:	1c43      	adds	r3, r0, #1
9000cc76:	d102      	bne.n	9000cc7e <_isatty_r+0x1a>
9000cc78:	682b      	ldr	r3, [r5, #0]
9000cc7a:	b103      	cbz	r3, 9000cc7e <_isatty_r+0x1a>
9000cc7c:	6023      	str	r3, [r4, #0]
9000cc7e:	bd38      	pop	{r3, r4, r5, pc}
9000cc80:	20001490 	.word	0x20001490

9000cc84 <_init>:
9000cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc86:	bf00      	nop
9000cc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cc8a:	bc08      	pop	{r3}
9000cc8c:	469e      	mov	lr, r3
9000cc8e:	4770      	bx	lr

9000cc90 <_fini>:
9000cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc92:	bf00      	nop
9000cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cc96:	bc08      	pop	{r3}
9000cc98:	469e      	mov	lr, r3
9000cc9a:	4770      	bx	lr
