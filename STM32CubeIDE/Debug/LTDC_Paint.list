
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f0  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026c8  9000d490  9000d490  0000e490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000fb58  9000fb58  000110cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000fb58  9000fb58  00010b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000fb60  9000fb60  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000fb60  9000fb60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000fb64  9000fb64  00010b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000fb68  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200000d0  9000fc34  000110d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20001498  9000fc34  00011498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a6f9  00000000  00000000  000110fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000535b  00000000  00000000  0003b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  00040b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019a8  00000000  00000000  00042c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004115d  00000000  00000000  00044600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c8c4  00000000  00000000  0008575d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018da45  00000000  00000000  000b2021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023fa66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009794  00000000  00000000  0023faac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00249240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000d478 	.word	0x9000d478

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000d478 	.word	0x9000d478

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <clearInput>:
#include "appLogic.h"


void clearInput(AppContext *ctx) {
900006ac:	b480      	push	{r7}
900006ae:	b083      	sub	sp, #12
900006b0:	af00      	add	r7, sp, #0
900006b2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006b4:	687b      	ldr	r3, [r7, #4]
900006b6:	2200      	movs	r2, #0
900006b8:	809a      	strh	r2, [r3, #4]
}
900006ba:	bf00      	nop
900006bc:	370c      	adds	r7, #12
900006be:	46bd      	mov	sp, r7
900006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006c4:	4770      	bx	lr

900006c6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006c6:	b480      	push	{r7}
900006c8:	b083      	sub	sp, #12
900006ca:	af00      	add	r7, sp, #0
900006cc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006ce:	687b      	ldr	r3, [r7, #4]
900006d0:	2200      	movs	r2, #0
900006d2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006d4:	687b      	ldr	r3, [r7, #4]
900006d6:	2200      	movs	r2, #0
900006d8:	719a      	strb	r2, [r3, #6]
}
900006da:	bf00      	nop
900006dc:	370c      	adds	r7, #12
900006de:	46bd      	mov	sp, r7
900006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006e4:	4770      	bx	lr
	...

900006e8 <backspace>:

void backspace(AppContext *ctx) {
900006e8:	b480      	push	{r7}
900006ea:	b083      	sub	sp, #12
900006ec:	af00      	add	r7, sp, #0
900006ee:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
900006f0:	687b      	ldr	r3, [r7, #4]
900006f2:	889b      	ldrh	r3, [r3, #4]
900006f4:	4a06      	ldr	r2, [pc, #24]	@ (90000710 <backspace+0x28>)
900006f6:	fba2 2303 	umull	r2, r3, r2, r3
900006fa:	08db      	lsrs	r3, r3, #3
900006fc:	b29a      	uxth	r2, r3
900006fe:	687b      	ldr	r3, [r7, #4]
90000700:	809a      	strh	r2, [r3, #4]
}
90000702:	bf00      	nop
90000704:	370c      	adds	r7, #12
90000706:	46bd      	mov	sp, r7
90000708:	f85d 7b04 	ldr.w	r7, [sp], #4
9000070c:	4770      	bx	lr
9000070e:	bf00      	nop
90000710:	cccccccd 	.word	0xcccccccd

90000714 <stopPWM>:

void stopPWM(AppContext *ctx) {
90000714:	b480      	push	{r7}
90000716:	b083      	sub	sp, #12
90000718:	af00      	add	r7, sp, #0
9000071a:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = false;
9000071c:	687b      	ldr	r3, [r7, #4]
9000071e:	2200      	movs	r2, #0
90000720:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
  // TODO callbakc
}
90000722:	bf00      	nop
90000724:	370c      	adds	r7, #12
90000726:	46bd      	mov	sp, r7
90000728:	f85d 7b04 	ldr.w	r7, [sp], #4
9000072c:	4770      	bx	lr

9000072e <startPWM>:

void startPWM(AppContext *ctx) {
9000072e:	b480      	push	{r7}
90000730:	b083      	sub	sp, #12
90000732:	af00      	add	r7, sp, #0
90000734:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = true;
90000736:	687b      	ldr	r3, [r7, #4]
90000738:	2201      	movs	r2, #1
9000073a:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ctx->voltage / 4);
  // TODO callbakc
}
9000073c:	bf00      	nop
9000073e:	370c      	adds	r7, #12
90000740:	46bd      	mov	sp, r7
90000742:	f85d 7b04 	ldr.w	r7, [sp], #4
90000746:	4770      	bx	lr

90000748 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000748:	b480      	push	{r7}
9000074a:	b083      	sub	sp, #12
9000074c:	af00      	add	r7, sp, #0
9000074e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
90000750:	687b      	ldr	r3, [r7, #4]
90000752:	2201      	movs	r2, #1
90000754:	701a      	strb	r2, [r3, #0]
}
90000756:	bf00      	nop
90000758:	370c      	adds	r7, #12
9000075a:	46bd      	mov	sp, r7
9000075c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000760:	4770      	bx	lr

90000762 <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
90000762:	b480      	push	{r7}
90000764:	b083      	sub	sp, #12
90000766:	af00      	add	r7, sp, #0
90000768:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
9000076a:	687b      	ldr	r3, [r7, #4]
9000076c:	2200      	movs	r2, #0
9000076e:	701a      	strb	r2, [r3, #0]
}
90000770:	bf00      	nop
90000772:	370c      	adds	r7, #12
90000774:	46bd      	mov	sp, r7
90000776:	f85d 7b04 	ldr.w	r7, [sp], #4
9000077a:	4770      	bx	lr

9000077c <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
9000077c:	b580      	push	{r7, lr}
9000077e:	b082      	sub	sp, #8
90000780:	af00      	add	r7, sp, #0
90000782:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
90000784:	687b      	ldr	r3, [r7, #4]
90000786:	889b      	ldrh	r3, [r3, #4]
90000788:	2b4f      	cmp	r3, #79	@ 0x4f
9000078a:	d904      	bls.n	90000796 <validateAndSetVoltage+0x1a>
9000078c:	687b      	ldr	r3, [r7, #4]
9000078e:	889b      	ldrh	r3, [r3, #4]
90000790:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000794:	d90c      	bls.n	900007b0 <validateAndSetVoltage+0x34>
  {
    strcpy(ctx->message, "Input voltage has to be in range 80 - 400. Resetting, try again!");
90000796:	687b      	ldr	r3, [r7, #4]
90000798:	3308      	adds	r3, #8
9000079a:	4a10      	ldr	r2, [pc, #64]	@ (900007dc <validateAndSetVoltage+0x60>)
9000079c:	4618      	mov	r0, r3
9000079e:	4611      	mov	r1, r2
900007a0:	2341      	movs	r3, #65	@ 0x41
900007a2:	461a      	mov	r2, r3
900007a4:	f00c f869 	bl	9000c87a <memcpy>
    clearInput(ctx);
900007a8:	6878      	ldr	r0, [r7, #4]
900007aa:	f7ff ff7f 	bl	900006ac <clearInput>
    return;
900007ae:	e012      	b.n	900007d6 <validateAndSetVoltage+0x5a>
  }
  ctx->isVoltageEntered = true;
900007b0:	687b      	ldr	r3, [r7, #4]
900007b2:	2201      	movs	r2, #1
900007b4:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
900007b6:	687b      	ldr	r3, [r7, #4]
900007b8:	889a      	ldrh	r2, [r3, #4]
900007ba:	687b      	ldr	r3, [r7, #4]
900007bc:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
900007be:	687b      	ldr	r3, [r7, #4]
900007c0:	2200      	movs	r2, #0
900007c2:	809a      	strh	r2, [r3, #4]
  sprintf(ctx->message, "Voltage %d has been successfully entered", ctx->voltage);
900007c4:	687b      	ldr	r3, [r7, #4]
900007c6:	f103 0008 	add.w	r0, r3, #8
900007ca:	687b      	ldr	r3, [r7, #4]
900007cc:	885b      	ldrh	r3, [r3, #2]
900007ce:	461a      	mov	r2, r3
900007d0:	4903      	ldr	r1, [pc, #12]	@ (900007e0 <validateAndSetVoltage+0x64>)
900007d2:	f00b fecd 	bl	9000c570 <siprintf>

}
900007d6:	3708      	adds	r7, #8
900007d8:	46bd      	mov	sp, r7
900007da:	bd80      	pop	{r7, pc}
900007dc:	9000d490 	.word	0x9000d490
900007e0:	9000d4d4 	.word	0x9000d4d4

900007e4 <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
900007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900007e6:	b085      	sub	sp, #20
900007e8:	af00      	add	r7, sp, #0
900007ea:	6078      	str	r0, [r7, #4]
900007ec:	460b      	mov	r3, r1
900007ee:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
900007f0:	78fb      	ldrb	r3, [r7, #3]
900007f2:	3b30      	subs	r3, #48	@ 0x30
900007f4:	73fb      	strb	r3, [r7, #15]
  ctx->inputValue = ctx->inputValue * 10 + digit;
900007f6:	687b      	ldr	r3, [r7, #4]
900007f8:	889b      	ldrh	r3, [r3, #4]
900007fa:	461a      	mov	r2, r3
900007fc:	0092      	lsls	r2, r2, #2
900007fe:	4413      	add	r3, r2
90000800:	005b      	lsls	r3, r3, #1
90000802:	b29a      	uxth	r2, r3
90000804:	7bfb      	ldrb	r3, [r7, #15]
90000806:	b29b      	uxth	r3, r3
90000808:	4413      	add	r3, r2
9000080a:	b29a      	uxth	r2, r3
9000080c:	687b      	ldr	r3, [r7, #4]
9000080e:	809a      	strh	r2, [r3, #4]
  if (ctx->inputValue > 400) {
90000810:	687b      	ldr	r3, [r7, #4]
90000812:	889b      	ldrh	r3, [r3, #4]
90000814:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000818:	d91c      	bls.n	90000854 <updateInput+0x70>
    strcpy(ctx->message, "Input set too high, resetting. Try again");
9000081a:	687b      	ldr	r3, [r7, #4]
9000081c:	3308      	adds	r3, #8
9000081e:	4a0f      	ldr	r2, [pc, #60]	@ (9000085c <updateInput+0x78>)
90000820:	4614      	mov	r4, r2
90000822:	469c      	mov	ip, r3
90000824:	f104 0e20 	add.w	lr, r4, #32
90000828:	4665      	mov	r5, ip
9000082a:	4626      	mov	r6, r4
9000082c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
9000082e:	6028      	str	r0, [r5, #0]
90000830:	6069      	str	r1, [r5, #4]
90000832:	60aa      	str	r2, [r5, #8]
90000834:	60eb      	str	r3, [r5, #12]
90000836:	3410      	adds	r4, #16
90000838:	f10c 0c10 	add.w	ip, ip, #16
9000083c:	4574      	cmp	r4, lr
9000083e:	d1f3      	bne.n	90000828 <updateInput+0x44>
90000840:	4662      	mov	r2, ip
90000842:	4623      	mov	r3, r4
90000844:	cb03      	ldmia	r3!, {r0, r1}
90000846:	6010      	str	r0, [r2, #0]
90000848:	6051      	str	r1, [r2, #4]
9000084a:	781b      	ldrb	r3, [r3, #0]
9000084c:	7213      	strb	r3, [r2, #8]
    clearInput(ctx);
9000084e:	6878      	ldr	r0, [r7, #4]
90000850:	f7ff ff2c 	bl	900006ac <clearInput>
  }
}
90000854:	bf00      	nop
90000856:	3714      	adds	r7, #20
90000858:	46bd      	mov	sp, r7
9000085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000085c:	9000d500 	.word	0x9000d500

90000860 <handle_event>:

void handle_event(AppContext *ctx, KeyboardButton key)
{
90000860:	b580      	push	{r7, lr}
90000862:	b082      	sub	sp, #8
90000864:	af00      	add	r7, sp, #0
90000866:	6078      	str	r0, [r7, #4]
90000868:	460b      	mov	r3, r1
9000086a:	70fb      	strb	r3, [r7, #3]
  strcpy(ctx->message, "");
9000086c:	687b      	ldr	r3, [r7, #4]
9000086e:	3308      	adds	r3, #8
90000870:	2200      	movs	r2, #0
90000872:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
90000874:	687b      	ldr	r3, [r7, #4]
90000876:	781b      	ldrb	r3, [r3, #0]
90000878:	2b00      	cmp	r3, #0
9000087a:	d13d      	bne.n	900008f8 <handle_event+0x98>
	if (ctx->isPwmRunning == true)
9000087c:	687b      	ldr	r3, [r7, #4]
9000087e:	79db      	ldrb	r3, [r3, #7]
90000880:	2b00      	cmp	r3, #0
90000882:	d006      	beq.n	90000892 <handle_event+0x32>
	{
	  if (key == KEY_Stop) stopPWM(ctx);
90000884:	78fb      	ldrb	r3, [r7, #3]
90000886:	2b73      	cmp	r3, #115	@ 0x73
90000888:	d141      	bne.n	9000090e <handle_event+0xae>
9000088a:	6878      	ldr	r0, [r7, #4]
9000088c:	f7ff ff42 	bl	90000714 <stopPWM>
	  return; // when PWM is running, we can only press the "STOP" button
90000890:	e03d      	b.n	9000090e <handle_event+0xae>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
90000892:	687b      	ldr	r3, [r7, #4]
90000894:	799b      	ldrb	r3, [r3, #6]
90000896:	2b00      	cmp	r3, #0
90000898:	d005      	beq.n	900008a6 <handle_event+0x46>
	{
	  if (key == KEY_Start) startPWM(ctx);
9000089a:	78fb      	ldrb	r3, [r7, #3]
9000089c:	2b53      	cmp	r3, #83	@ 0x53
9000089e:	d102      	bne.n	900008a6 <handle_event+0x46>
900008a0:	6878      	ldr	r0, [r7, #4]
900008a2:	f7ff ff44 	bl	9000072e <startPWM>
	}

	if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
900008a6:	78fb      	ldrb	r3, [r7, #3]
900008a8:	2b2f      	cmp	r3, #47	@ 0x2f
900008aa:	d907      	bls.n	900008bc <handle_event+0x5c>
900008ac:	78fb      	ldrb	r3, [r7, #3]
900008ae:	2b39      	cmp	r3, #57	@ 0x39
900008b0:	d804      	bhi.n	900008bc <handle_event+0x5c>
900008b2:	78fb      	ldrb	r3, [r7, #3]
900008b4:	4619      	mov	r1, r3
900008b6:	6878      	ldr	r0, [r7, #4]
900008b8:	f7ff ff94 	bl	900007e4 <updateInput>
	if (key == KEY_Clear) clearVoltage(ctx);
900008bc:	78fb      	ldrb	r3, [r7, #3]
900008be:	2b63      	cmp	r3, #99	@ 0x63
900008c0:	d102      	bne.n	900008c8 <handle_event+0x68>
900008c2:	6878      	ldr	r0, [r7, #4]
900008c4:	f7ff feff 	bl	900006c6 <clearVoltage>
	if (key == KEY_Enter) validateAndSetVoltage(ctx);
900008c8:	78fb      	ldrb	r3, [r7, #3]
900008ca:	2b65      	cmp	r3, #101	@ 0x65
900008cc:	d102      	bne.n	900008d4 <handle_event+0x74>
900008ce:	6878      	ldr	r0, [r7, #4]
900008d0:	f7ff ff54 	bl	9000077c <validateAndSetVoltage>
	if (key == KEY_BkSp) backspace(ctx);
900008d4:	78fb      	ldrb	r3, [r7, #3]
900008d6:	2b62      	cmp	r3, #98	@ 0x62
900008d8:	d102      	bne.n	900008e0 <handle_event+0x80>
900008da:	6878      	ldr	r0, [r7, #4]
900008dc:	f7ff ff04 	bl	900006e8 <backspace>
	if (key == KEY_F2) setSTATE_F2(ctx);
900008e0:	78fb      	ldrb	r3, [r7, #3]
900008e2:	2b40      	cmp	r3, #64	@ 0x40
900008e4:	d102      	bne.n	900008ec <handle_event+0x8c>
900008e6:	6878      	ldr	r0, [r7, #4]
900008e8:	f7ff ff2e 	bl	90000748 <setSTATE_F2>
	if (key == KEY_ESC) clearInput(ctx);
900008ec:	78fb      	ldrb	r3, [r7, #3]
900008ee:	2b60      	cmp	r3, #96	@ 0x60
900008f0:	d102      	bne.n	900008f8 <handle_event+0x98>
900008f2:	6878      	ldr	r0, [r7, #4]
900008f4:	f7ff feda 	bl	900006ac <clearInput>
  }

  if (ctx->currentState == STATE_F2) {
900008f8:	687b      	ldr	r3, [r7, #4]
900008fa:	781b      	ldrb	r3, [r3, #0]
900008fc:	2b01      	cmp	r3, #1
900008fe:	d109      	bne.n	90000914 <handle_event+0xb4>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000900:	78fb      	ldrb	r3, [r7, #3]
90000902:	2b21      	cmp	r3, #33	@ 0x21
90000904:	d105      	bne.n	90000912 <handle_event+0xb2>
90000906:	6878      	ldr	r0, [r7, #4]
90000908:	f7ff ff2b 	bl	90000762 <setSTATE_F1>
	return;
9000090c:	e001      	b.n	90000912 <handle_event+0xb2>
	  return; // when PWM is running, we can only press the "STOP" button
9000090e:	bf00      	nop
90000910:	e000      	b.n	90000914 <handle_event+0xb4>
	return;
90000912:	bf00      	nop
  }
}
90000914:	3708      	adds	r7, #8
90000916:	46bd      	mov	sp, r7
90000918:	bd80      	pop	{r7, pc}

9000091a <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
9000091a:	b480      	push	{r7}
9000091c:	b083      	sub	sp, #12
9000091e:	af00      	add	r7, sp, #0
90000920:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
90000922:	687b      	ldr	r3, [r7, #4]
90000924:	2200      	movs	r2, #0
90000926:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
90000928:	687b      	ldr	r3, [r7, #4]
9000092a:	2200      	movs	r2, #0
9000092c:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
9000092e:	687b      	ldr	r3, [r7, #4]
90000930:	2200      	movs	r2, #0
90000932:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
90000934:	687b      	ldr	r3, [r7, #4]
90000936:	2200      	movs	r2, #0
90000938:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
9000093a:	687b      	ldr	r3, [r7, #4]
9000093c:	2200      	movs	r2, #0
9000093e:	809a      	strh	r2, [r3, #4]
}
90000940:	bf00      	nop
90000942:	370c      	adds	r7, #12
90000944:	46bd      	mov	sp, r7
90000946:	f85d 7b04 	ldr.w	r7, [sp], #4
9000094a:	4770      	bx	lr

9000094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
9000094c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000988 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
90000950:	f002 fbc8 	bl	900030e4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
90000954:	f002 fb64 	bl	90003020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000958:	480c      	ldr	r0, [pc, #48]	@ (9000098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
9000095a:	490d      	ldr	r1, [pc, #52]	@ (90000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
9000095c:	4a0d      	ldr	r2, [pc, #52]	@ (90000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
9000095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000960:	e002      	b.n	90000968 <LoopCopyDataInit>

90000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000966:	3304      	adds	r3, #4

90000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
9000096c:	d3f9      	bcc.n	90000962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
9000096e:	4a0a      	ldr	r2, [pc, #40]	@ (90000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000970:	4c0a      	ldr	r4, [pc, #40]	@ (9000099c <LoopFillZerobss+0x22>)
  movs r3, #0
90000972:	2300      	movs	r3, #0
  b LoopFillZerobss
90000974:	e001      	b.n	9000097a <LoopFillZerobss>

90000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000978:	3204      	adds	r2, #4

9000097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
9000097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
9000097c:	d3fb      	bcc.n	90000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
9000097e:	f00b ff55 	bl	9000c82c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000982:	f000 f827 	bl	900009d4 <main>
  bx  lr
90000986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
9000098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000990:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
90000994:	9000fb68 	.word	0x9000fb68
  ldr r2, =_sbss
90000998:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
9000099c:	20001498 	.word	0x20001498

900009a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900009a0:	e7fe      	b.n	900009a0 <ADC3_IRQHandler>
	...

900009a4 <__io_putchar>:
static void CPU_CACHE_Enable(void);
static void CPU_CACHE_Disable(void);
static void MPU_Config(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
900009a4:	b580      	push	{r7, lr}
900009a6:	b082      	sub	sp, #8
900009a8:	af00      	add	r7, sp, #0
900009aa:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
900009ac:	1d39      	adds	r1, r7, #4
900009ae:	f04f 33ff 	mov.w	r3, #4294967295
900009b2:	2201      	movs	r2, #1
900009b4:	4806      	ldr	r0, [pc, #24]	@ (900009d0 <__io_putchar+0x2c>)
900009b6:	f009 f94f 	bl	90009c58 <HAL_UART_Transmit>
900009ba:	4603      	mov	r3, r0
900009bc:	2b00      	cmp	r3, #0
900009be:	d002      	beq.n	900009c6 <__io_putchar+0x22>
    return -1;
900009c0:	f04f 33ff 	mov.w	r3, #4294967295
900009c4:	e000      	b.n	900009c8 <__io_putchar+0x24>
  }
  return ch;
900009c6:	687b      	ldr	r3, [r7, #4]
}
900009c8:	4618      	mov	r0, r3
900009ca:	3708      	adds	r7, #8
900009cc:	46bd      	mov	sp, r7
900009ce:	bd80      	pop	{r7, pc}
900009d0:	200000ec 	.word	0x200000ec

900009d4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
900009d4:	b580      	push	{r7, lr}
900009d6:	b094      	sub	sp, #80	@ 0x50
900009d8:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
900009da:	f000 fa7d 	bl	90000ed8 <MPU_Config>
  CPU_CACHE_Enable();
900009de:	f000 f9e9 	bl	90000db4 <CPU_CACHE_Enable>
  HAL_Init();
900009e2:	f002 fb97 	bl	90003114 <HAL_Init>
  SystemClock_Config();
900009e6:	f000 f8e1 	bl	90000bac <SystemClock_Config>
  MX_USART3_UART_Init();
900009ea:	f000 f825 	bl	90000a38 <MX_USART3_UART_Init>
  
  printf("Starting...\r\n");
900009ee:	4811      	ldr	r0, [pc, #68]	@ (90000a34 <main+0x60>)
900009f0:	f00b fdb6 	bl	9000c560 <puts>

  AppContext ctx;
  InitializeAppContext(&ctx);
900009f4:	463b      	mov	r3, r7
900009f6:	4618      	mov	r0, r3
900009f8:	f7ff ff8f 	bl	9000091a <InitializeAppContext>

  InitializeLcd();
900009fc:	f000 fc0c 	bl	90001218 <InitializeLcd>
  UartClearScreen();
90000a00:	f000 fc48 	bl	90001294 <UartClearScreen>

  InitFlexiKeyboard(); // has to be AFTER InitializeLcd, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a04:	f00a ff0a 	bl	9000b81c <InitFlexiKeyboard>

  while (1)
  {
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000a08:	f00a fe9e 	bl	9000b748 <ReadFlexiKeyboard>
90000a0c:	4603      	mov	r3, r0
90000a0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  //if (key == KEY_NULL) continue;
	  handle_event(&ctx, key);
90000a12:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
90000a16:	463b      	mov	r3, r7
90000a18:	4611      	mov	r1, r2
90000a1a:	4618      	mov	r0, r3
90000a1c:	f7ff ff20 	bl	90000860 <handle_event>
	  UartRenderState(&ctx);
90000a20:	463b      	mov	r3, r7
90000a22:	4618      	mov	r0, r3
90000a24:	f000 fc44 	bl	900012b0 <UartRenderState>
	  DisplayRenderState(&ctx);
90000a28:	463b      	mov	r3, r7
90000a2a:	4618      	mov	r0, r3
90000a2c:	f000 fc9a 	bl	90001364 <DisplayRenderState>
  {
90000a30:	bf00      	nop
90000a32:	e7e9      	b.n	90000a08 <main+0x34>
90000a34:	9000d52c 	.word	0x9000d52c

90000a38 <MX_USART3_UART_Init>:
  }
}

static void MX_USART3_UART_Init(void)
{
90000a38:	b580      	push	{r7, lr}
90000a3a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000a3c:	4b22      	ldr	r3, [pc, #136]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a3e:	4a23      	ldr	r2, [pc, #140]	@ (90000acc <MX_USART3_UART_Init+0x94>)
90000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000a42:	4b21      	ldr	r3, [pc, #132]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000a4a:	4b1f      	ldr	r3, [pc, #124]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a4c:	2200      	movs	r2, #0
90000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000a50:	4b1d      	ldr	r3, [pc, #116]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a52:	2200      	movs	r2, #0
90000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000a56:	4b1c      	ldr	r3, [pc, #112]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a58:	2200      	movs	r2, #0
90000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a5e:	220c      	movs	r2, #12
90000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000a62:	4b19      	ldr	r3, [pc, #100]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a64:	2200      	movs	r2, #0
90000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000a68:	4b17      	ldr	r3, [pc, #92]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a6a:	2200      	movs	r2, #0
90000a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000a6e:	4b16      	ldr	r3, [pc, #88]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a70:	2200      	movs	r2, #0
90000a72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000a74:	4b14      	ldr	r3, [pc, #80]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a76:	2200      	movs	r2, #0
90000a78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000a7a:	4b13      	ldr	r3, [pc, #76]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a7c:	2200      	movs	r2, #0
90000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000a80:	4811      	ldr	r0, [pc, #68]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a82:	f009 f899 	bl	90009bb8 <HAL_UART_Init>
90000a86:	4603      	mov	r3, r0
90000a88:	2b00      	cmp	r3, #0
90000a8a:	d001      	beq.n	90000a90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000a8c:	f000 f88a 	bl	90000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000a90:	2100      	movs	r1, #0
90000a92:	480d      	ldr	r0, [pc, #52]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000a94:	f00a f92f 	bl	9000acf6 <HAL_UARTEx_SetTxFifoThreshold>
90000a98:	4603      	mov	r3, r0
90000a9a:	2b00      	cmp	r3, #0
90000a9c:	d001      	beq.n	90000aa2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000a9e:	f000 f881 	bl	90000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000aa2:	2100      	movs	r1, #0
90000aa4:	4808      	ldr	r0, [pc, #32]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000aa6:	f00a f964 	bl	9000ad72 <HAL_UARTEx_SetRxFifoThreshold>
90000aaa:	4603      	mov	r3, r0
90000aac:	2b00      	cmp	r3, #0
90000aae:	d001      	beq.n	90000ab4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000ab0:	f000 f878 	bl	90000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000ab4:	4804      	ldr	r0, [pc, #16]	@ (90000ac8 <MX_USART3_UART_Init+0x90>)
90000ab6:	f00a f8e5 	bl	9000ac84 <HAL_UARTEx_DisableFifoMode>
90000aba:	4603      	mov	r3, r0
90000abc:	2b00      	cmp	r3, #0
90000abe:	d001      	beq.n	90000ac4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000ac0:	f000 f870 	bl	90000ba4 <Error_Handler>
  }
}
90000ac4:	bf00      	nop
90000ac6:	bd80      	pop	{r7, pc}
90000ac8:	200000ec 	.word	0x200000ec
90000acc:	40004800 	.word	0x40004800

90000ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000ad0:	b580      	push	{r7, lr}
90000ad2:	b0ba      	sub	sp, #232	@ 0xe8
90000ad4:	af00      	add	r7, sp, #0
90000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000ad8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000adc:	2200      	movs	r2, #0
90000ade:	601a      	str	r2, [r3, #0]
90000ae0:	605a      	str	r2, [r3, #4]
90000ae2:	609a      	str	r2, [r3, #8]
90000ae4:	60da      	str	r2, [r3, #12]
90000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000ae8:	f107 0310 	add.w	r3, r7, #16
90000aec:	22c0      	movs	r2, #192	@ 0xc0
90000aee:	2100      	movs	r1, #0
90000af0:	4618      	mov	r0, r3
90000af2:	f00b fe37 	bl	9000c764 <memset>
  if(huart->Instance==USART3)
90000af6:	687b      	ldr	r3, [r7, #4]
90000af8:	681b      	ldr	r3, [r3, #0]
90000afa:	4a27      	ldr	r2, [pc, #156]	@ (90000b98 <HAL_UART_MspInit+0xc8>)
90000afc:	4293      	cmp	r3, r2
90000afe:	d146      	bne.n	90000b8e <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000b00:	f04f 0202 	mov.w	r2, #2
90000b04:	f04f 0300 	mov.w	r3, #0
90000b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000b0c:	2300      	movs	r3, #0
90000b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000b12:	f107 0310 	add.w	r3, r7, #16
90000b16:	4618      	mov	r0, r3
90000b18:	f007 f818 	bl	90007b4c <HAL_RCCEx_PeriphCLKConfig>
90000b1c:	4603      	mov	r3, r0
90000b1e:	2b00      	cmp	r3, #0
90000b20:	d001      	beq.n	90000b26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000b22:	f000 f83f 	bl	90000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000b26:	4b1d      	ldr	r3, [pc, #116]	@ (90000b9c <HAL_UART_MspInit+0xcc>)
90000b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (90000b9c <HAL_UART_MspInit+0xcc>)
90000b2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000b32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000b36:	4b19      	ldr	r3, [pc, #100]	@ (90000b9c <HAL_UART_MspInit+0xcc>)
90000b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000b40:	60fb      	str	r3, [r7, #12]
90000b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000b44:	4b15      	ldr	r3, [pc, #84]	@ (90000b9c <HAL_UART_MspInit+0xcc>)
90000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b4a:	4a14      	ldr	r2, [pc, #80]	@ (90000b9c <HAL_UART_MspInit+0xcc>)
90000b4c:	f043 0302 	orr.w	r3, r3, #2
90000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000b54:	4b11      	ldr	r3, [pc, #68]	@ (90000b9c <HAL_UART_MspInit+0xcc>)
90000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b5a:	f003 0302 	and.w	r3, r3, #2
90000b5e:	60bb      	str	r3, [r7, #8]
90000b60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000b62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b6a:	2302      	movs	r3, #2
90000b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b70:	2300      	movs	r3, #0
90000b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b76:	2300      	movs	r3, #0
90000b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000b7c:	2307      	movs	r3, #7
90000b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000b82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000b86:	4619      	mov	r1, r3
90000b88:	4805      	ldr	r0, [pc, #20]	@ (90000ba0 <HAL_UART_MspInit+0xd0>)
90000b8a:	f002 fffb 	bl	90003b84 <HAL_GPIO_Init>
  }
}
90000b8e:	bf00      	nop
90000b90:	37e8      	adds	r7, #232	@ 0xe8
90000b92:	46bd      	mov	sp, r7
90000b94:	bd80      	pop	{r7, pc}
90000b96:	bf00      	nop
90000b98:	40004800 	.word	0x40004800
90000b9c:	58024400 	.word	0x58024400
90000ba0:	58020400 	.word	0x58020400

90000ba4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000ba4:	b480      	push	{r7}
90000ba6:	af00      	add	r7, sp, #0
  while(1)
90000ba8:	bf00      	nop
90000baa:	e7fd      	b.n	90000ba8 <Error_Handler+0x4>

90000bac <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000bac:	b580      	push	{r7, lr}
90000bae:	b0ce      	sub	sp, #312	@ 0x138
90000bb0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000bb2:	2300      	movs	r3, #0
90000bb4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000bb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000bbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000bc0:	2200      	movs	r2, #0
90000bc2:	601a      	str	r2, [r3, #0]
90000bc4:	4b78      	ldr	r3, [pc, #480]	@ (90000da8 <SystemClock_Config+0x1fc>)
90000bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bc8:	4a77      	ldr	r2, [pc, #476]	@ (90000da8 <SystemClock_Config+0x1fc>)
90000bca:	f023 0301 	bic.w	r3, r3, #1
90000bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000bd0:	4b75      	ldr	r3, [pc, #468]	@ (90000da8 <SystemClock_Config+0x1fc>)
90000bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bd4:	f003 0201 	and.w	r2, r3, #1
90000bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000bdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000be0:	601a      	str	r2, [r3, #0]
90000be2:	4b72      	ldr	r3, [pc, #456]	@ (90000dac <SystemClock_Config+0x200>)
90000be4:	699b      	ldr	r3, [r3, #24]
90000be6:	4a71      	ldr	r2, [pc, #452]	@ (90000dac <SystemClock_Config+0x200>)
90000be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000bec:	6193      	str	r3, [r2, #24]
90000bee:	4b6f      	ldr	r3, [pc, #444]	@ (90000dac <SystemClock_Config+0x200>)
90000bf0:	699b      	ldr	r3, [r3, #24]
90000bf2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000bf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000bfa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000bfe:	601a      	str	r2, [r3, #0]
90000c00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c08:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000c0a:	bf00      	nop
90000c0c:	4b67      	ldr	r3, [pc, #412]	@ (90000dac <SystemClock_Config+0x200>)
90000c0e:	699b      	ldr	r3, [r3, #24]
90000c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000c18:	d1f8      	bne.n	90000c0c <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000c1a:	2301      	movs	r3, #1
90000c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000c20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000c24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000c28:	2300      	movs	r3, #0
90000c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000c2e:	2300      	movs	r3, #0
90000c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000c34:	2302      	movs	r3, #2
90000c36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000c3a:	2302      	movs	r3, #2
90000c3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000c40:	2305      	movs	r3, #5
90000c42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000c46:	23a0      	movs	r3, #160	@ 0xa0
90000c48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000c4c:	2300      	movs	r3, #0
90000c4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000c52:	2302      	movs	r3, #2
90000c54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000c58:	2302      	movs	r3, #2
90000c5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000c5e:	2304      	movs	r3, #4
90000c60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000c64:	2300      	movs	r3, #0
90000c66:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000c6a:	2308      	movs	r3, #8
90000c6c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000c70:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000c74:	4618      	mov	r0, r3
90000c76:	f005 ff83 	bl	90006b80 <HAL_RCC_OscConfig>
90000c7a:	4603      	mov	r3, r0
90000c7c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000c80:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000c84:	2b00      	cmp	r3, #0
90000c86:	d001      	beq.n	90000c8c <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000c88:	f7ff ff8c 	bl	90000ba4 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000c8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c90:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000c94:	2205      	movs	r2, #5
90000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000c98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c9c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ca0:	2260      	movs	r2, #96	@ 0x60
90000ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000ca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ca8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cac:	2202      	movs	r2, #2
90000cae:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000cb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cb4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cb8:	220a      	movs	r2, #10
90000cba:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000cbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cc4:	2212      	movs	r2, #18
90000cc6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000cc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ccc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cd0:	2200      	movs	r2, #0
90000cd2:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000cd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cd8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000ce2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ce6:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000cea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000cee:	f04f 0300 	mov.w	r3, #0
90000cf2:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000cf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cfa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cfe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000d06:	f107 0308 	add.w	r3, r7, #8
90000d0a:	4618      	mov	r0, r3
90000d0c:	f006 ff1e 	bl	90007b4c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000d10:	233f      	movs	r3, #63	@ 0x3f
90000d12:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000d16:	2303      	movs	r3, #3
90000d18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000d1c:	2300      	movs	r3, #0
90000d1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000d22:	2308      	movs	r3, #8
90000d24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000d28:	2340      	movs	r3, #64	@ 0x40
90000d2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000d2e:	2340      	movs	r3, #64	@ 0x40
90000d30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000d38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000d3c:	2340      	movs	r3, #64	@ 0x40
90000d3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000d42:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000d46:	2104      	movs	r1, #4
90000d48:	4618      	mov	r0, r3
90000d4a:	f006 fb73 	bl	90007434 <HAL_RCC_ClockConfig>
90000d4e:	4603      	mov	r3, r0
90000d50:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000d54:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000d58:	2b00      	cmp	r3, #0
90000d5a:	d001      	beq.n	90000d60 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000d5c:	f7ff ff22 	bl	90000ba4 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000d60:	4b13      	ldr	r3, [pc, #76]	@ (90000db0 <SystemClock_Config+0x204>)
90000d62:	681b      	ldr	r3, [r3, #0]
90000d64:	4a12      	ldr	r2, [pc, #72]	@ (90000db0 <SystemClock_Config+0x204>)
90000d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000d6a:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000d6c:	4b10      	ldr	r3, [pc, #64]	@ (90000db0 <SystemClock_Config+0x204>)
90000d6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000d72:	4a0f      	ldr	r2, [pc, #60]	@ (90000db0 <SystemClock_Config+0x204>)
90000d74:	f043 0302 	orr.w	r3, r3, #2
90000d78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (90000db0 <SystemClock_Config+0x204>)
90000d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000d82:	f003 0202 	and.w	r2, r3, #2
90000d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000d8e:	601a      	str	r2, [r3, #0]
90000d90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d94:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000d98:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000d9a:	f002 fa85 	bl	900032a8 <HAL_EnableCompensationCell>
}
90000d9e:	bf00      	nop
90000da0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000da4:	46bd      	mov	sp, r7
90000da6:	bd80      	pop	{r7, pc}
90000da8:	58000400 	.word	0x58000400
90000dac:	58024800 	.word	0x58024800
90000db0:	58024400 	.word	0x58024400

90000db4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000db4:	b480      	push	{r7}
90000db6:	b085      	sub	sp, #20
90000db8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000dba:	4b34      	ldr	r3, [pc, #208]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000dbc:	695b      	ldr	r3, [r3, #20]
90000dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000dc2:	2b00      	cmp	r3, #0
90000dc4:	d11b      	bne.n	90000dfe <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000dc6:	f3bf 8f4f 	dsb	sy
}
90000dca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000dcc:	f3bf 8f6f 	isb	sy
}
90000dd0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000dd2:	4b2e      	ldr	r3, [pc, #184]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000dd4:	2200      	movs	r2, #0
90000dd6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000dda:	f3bf 8f4f 	dsb	sy
}
90000dde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000de0:	f3bf 8f6f 	isb	sy
}
90000de4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000de6:	4b29      	ldr	r3, [pc, #164]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000de8:	695b      	ldr	r3, [r3, #20]
90000dea:	4a28      	ldr	r2, [pc, #160]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000df0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000df2:	f3bf 8f4f 	dsb	sy
}
90000df6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000df8:	f3bf 8f6f 	isb	sy
}
90000dfc:	e000      	b.n	90000e00 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000dfe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e00:	4b22      	ldr	r3, [pc, #136]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000e02:	695b      	ldr	r3, [r3, #20]
90000e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000e08:	2b00      	cmp	r3, #0
90000e0a:	d138      	bne.n	90000e7e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000e0e:	2200      	movs	r2, #0
90000e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000e14:	f3bf 8f4f 	dsb	sy
}
90000e18:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000e20:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000e22:	68fb      	ldr	r3, [r7, #12]
90000e24:	0b5b      	lsrs	r3, r3, #13
90000e26:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000e2a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000e2c:	68fb      	ldr	r3, [r7, #12]
90000e2e:	08db      	lsrs	r3, r3, #3
90000e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000e34:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e36:	68bb      	ldr	r3, [r7, #8]
90000e38:	015a      	lsls	r2, r3, #5
90000e3a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000e3e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000e40:	687a      	ldr	r2, [r7, #4]
90000e42:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e44:	4911      	ldr	r1, [pc, #68]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000e46:	4313      	orrs	r3, r2
90000e48:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000e4c:	687b      	ldr	r3, [r7, #4]
90000e4e:	1e5a      	subs	r2, r3, #1
90000e50:	607a      	str	r2, [r7, #4]
90000e52:	2b00      	cmp	r3, #0
90000e54:	d1ef      	bne.n	90000e36 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000e56:	68bb      	ldr	r3, [r7, #8]
90000e58:	1e5a      	subs	r2, r3, #1
90000e5a:	60ba      	str	r2, [r7, #8]
90000e5c:	2b00      	cmp	r3, #0
90000e5e:	d1e5      	bne.n	90000e2c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000e60:	f3bf 8f4f 	dsb	sy
}
90000e64:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000e66:	4b09      	ldr	r3, [pc, #36]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000e68:	695b      	ldr	r3, [r3, #20]
90000e6a:	4a08      	ldr	r2, [pc, #32]	@ (90000e8c <CPU_CACHE_Enable+0xd8>)
90000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000e70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e72:	f3bf 8f4f 	dsb	sy
}
90000e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e78:	f3bf 8f6f 	isb	sy
}
90000e7c:	e000      	b.n	90000e80 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e7e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000e80:	bf00      	nop
90000e82:	3714      	adds	r7, #20
90000e84:	46bd      	mov	sp, r7
90000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e8a:	4770      	bx	lr
90000e8c:	e000ed00 	.word	0xe000ed00

90000e90 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000e90:	b580      	push	{r7, lr}
90000e92:	b082      	sub	sp, #8
90000e94:	af00      	add	r7, sp, #0
90000e96:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000e98:	490e      	ldr	r1, [pc, #56]	@ (90000ed4 <MX_LTDC_ClockConfig+0x44>)
90000e9a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000e9e:	f04f 0300 	mov.w	r3, #0
90000ea2:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (90000ed4 <MX_LTDC_ClockConfig+0x44>)
90000ea8:	2205      	movs	r2, #5
90000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000eac:	4b09      	ldr	r3, [pc, #36]	@ (90000ed4 <MX_LTDC_ClockConfig+0x44>)
90000eae:	22c0      	movs	r2, #192	@ 0xc0
90000eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000eb2:	4b08      	ldr	r3, [pc, #32]	@ (90000ed4 <MX_LTDC_ClockConfig+0x44>)
90000eb4:	2202      	movs	r2, #2
90000eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000eb8:	4b06      	ldr	r3, [pc, #24]	@ (90000ed4 <MX_LTDC_ClockConfig+0x44>)
90000eba:	2214      	movs	r2, #20
90000ebc:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000ebe:	4b05      	ldr	r3, [pc, #20]	@ (90000ed4 <MX_LTDC_ClockConfig+0x44>)
90000ec0:	2263      	movs	r2, #99	@ 0x63
90000ec2:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000ec4:	4803      	ldr	r0, [pc, #12]	@ (90000ed4 <MX_LTDC_ClockConfig+0x44>)
90000ec6:	f006 fe41 	bl	90007b4c <HAL_RCCEx_PeriphCLKConfig>
90000eca:	4603      	mov	r3, r0
}
90000ecc:	4618      	mov	r0, r3
90000ece:	3708      	adds	r7, #8
90000ed0:	46bd      	mov	sp, r7
90000ed2:	bd80      	pop	{r7, pc}
90000ed4:	20000180 	.word	0x20000180

90000ed8 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000ed8:	b580      	push	{r7, lr}
90000eda:	b084      	sub	sp, #16
90000edc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000ede:	f002 fb03 	bl	900034e8 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000ee2:	2301      	movs	r3, #1
90000ee4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000ee6:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000eea:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000eec:	2318      	movs	r3, #24
90000eee:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000ef0:	2303      	movs	r3, #3
90000ef2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000ef4:	2300      	movs	r3, #0
90000ef6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000ef8:	2301      	movs	r3, #1
90000efa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000efc:	2300      	movs	r3, #0
90000efe:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000f00:	2301      	movs	r3, #1
90000f02:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000f04:	2300      	movs	r3, #0
90000f06:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000f08:	2300      	movs	r3, #0
90000f0a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000f0c:	2300      	movs	r3, #0
90000f0e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000f10:	463b      	mov	r3, r7
90000f12:	4618      	mov	r0, r3
90000f14:	f002 fb20 	bl	90003558 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000f18:	2004      	movs	r0, #4
90000f1a:	f002 fafd 	bl	90003518 <HAL_MPU_Enable>
}
90000f1e:	bf00      	nop
90000f20:	3710      	adds	r7, #16
90000f22:	46bd      	mov	sp, r7
90000f24:	bd80      	pop	{r7, pc}

90000f26 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000f26:	b480      	push	{r7}
90000f28:	af00      	add	r7, sp, #0
}
90000f2a:	bf00      	nop
90000f2c:	46bd      	mov	sp, r7
90000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f32:	4770      	bx	lr

90000f34 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000f34:	b480      	push	{r7}
90000f36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000f38:	bf00      	nop
90000f3a:	e7fd      	b.n	90000f38 <HardFault_Handler+0x4>

90000f3c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000f3c:	b480      	push	{r7}
90000f3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000f40:	bf00      	nop
90000f42:	e7fd      	b.n	90000f40 <MemManage_Handler+0x4>

90000f44 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000f44:	b480      	push	{r7}
90000f46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000f48:	bf00      	nop
90000f4a:	e7fd      	b.n	90000f48 <BusFault_Handler+0x4>

90000f4c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000f4c:	b480      	push	{r7}
90000f4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000f50:	bf00      	nop
90000f52:	e7fd      	b.n	90000f50 <UsageFault_Handler+0x4>

90000f54 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000f54:	b480      	push	{r7}
90000f56:	af00      	add	r7, sp, #0
}
90000f58:	bf00      	nop
90000f5a:	46bd      	mov	sp, r7
90000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f60:	4770      	bx	lr

90000f62 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000f62:	b480      	push	{r7}
90000f64:	af00      	add	r7, sp, #0
}
90000f66:	bf00      	nop
90000f68:	46bd      	mov	sp, r7
90000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f6e:	4770      	bx	lr

90000f70 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000f70:	b480      	push	{r7}
90000f72:	af00      	add	r7, sp, #0
}
90000f74:	bf00      	nop
90000f76:	46bd      	mov	sp, r7
90000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f7c:	4770      	bx	lr

90000f7e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000f7e:	b580      	push	{r7, lr}
90000f80:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000f82:	f002 f941 	bl	90003208 <HAL_IncTick>
}
90000f86:	bf00      	nop
90000f88:	bd80      	pop	{r7, pc}
	...

90000f8c <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000f8c:	b580      	push	{r7, lr}
90000f8e:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000f90:	4802      	ldr	r0, [pc, #8]	@ (90000f9c <OTG_FS_IRQHandler+0x10>)
90000f92:	f002 ffd8 	bl	90003f46 <HAL_HCD_IRQHandler>
}
90000f96:	bf00      	nop
90000f98:	bd80      	pop	{r7, pc}
90000f9a:	bf00      	nop
90000f9c:	20000244 	.word	0x20000244

90000fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000fa0:	b580      	push	{r7, lr}
90000fa2:	b086      	sub	sp, #24
90000fa4:	af00      	add	r7, sp, #0
90000fa6:	60f8      	str	r0, [r7, #12]
90000fa8:	60b9      	str	r1, [r7, #8]
90000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fac:	2300      	movs	r3, #0
90000fae:	617b      	str	r3, [r7, #20]
90000fb0:	e00a      	b.n	90000fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
90000fb2:	f3af 8000 	nop.w
90000fb6:	4601      	mov	r1, r0
90000fb8:	68bb      	ldr	r3, [r7, #8]
90000fba:	1c5a      	adds	r2, r3, #1
90000fbc:	60ba      	str	r2, [r7, #8]
90000fbe:	b2ca      	uxtb	r2, r1
90000fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fc2:	697b      	ldr	r3, [r7, #20]
90000fc4:	3301      	adds	r3, #1
90000fc6:	617b      	str	r3, [r7, #20]
90000fc8:	697a      	ldr	r2, [r7, #20]
90000fca:	687b      	ldr	r3, [r7, #4]
90000fcc:	429a      	cmp	r2, r3
90000fce:	dbf0      	blt.n	90000fb2 <_read+0x12>
  }

  return len;
90000fd0:	687b      	ldr	r3, [r7, #4]
}
90000fd2:	4618      	mov	r0, r3
90000fd4:	3718      	adds	r7, #24
90000fd6:	46bd      	mov	sp, r7
90000fd8:	bd80      	pop	{r7, pc}

90000fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90000fda:	b580      	push	{r7, lr}
90000fdc:	b086      	sub	sp, #24
90000fde:	af00      	add	r7, sp, #0
90000fe0:	60f8      	str	r0, [r7, #12]
90000fe2:	60b9      	str	r1, [r7, #8]
90000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fe6:	2300      	movs	r3, #0
90000fe8:	617b      	str	r3, [r7, #20]
90000fea:	e009      	b.n	90001000 <_write+0x26>
  {
    __io_putchar(*ptr++);
90000fec:	68bb      	ldr	r3, [r7, #8]
90000fee:	1c5a      	adds	r2, r3, #1
90000ff0:	60ba      	str	r2, [r7, #8]
90000ff2:	781b      	ldrb	r3, [r3, #0]
90000ff4:	4618      	mov	r0, r3
90000ff6:	f7ff fcd5 	bl	900009a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000ffa:	697b      	ldr	r3, [r7, #20]
90000ffc:	3301      	adds	r3, #1
90000ffe:	617b      	str	r3, [r7, #20]
90001000:	697a      	ldr	r2, [r7, #20]
90001002:	687b      	ldr	r3, [r7, #4]
90001004:	429a      	cmp	r2, r3
90001006:	dbf1      	blt.n	90000fec <_write+0x12>
  }
  return len;
90001008:	687b      	ldr	r3, [r7, #4]
}
9000100a:	4618      	mov	r0, r3
9000100c:	3718      	adds	r7, #24
9000100e:	46bd      	mov	sp, r7
90001010:	bd80      	pop	{r7, pc}

90001012 <_close>:

int _close(int file)
{
90001012:	b480      	push	{r7}
90001014:	b083      	sub	sp, #12
90001016:	af00      	add	r7, sp, #0
90001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
9000101a:	f04f 33ff 	mov.w	r3, #4294967295
}
9000101e:	4618      	mov	r0, r3
90001020:	370c      	adds	r7, #12
90001022:	46bd      	mov	sp, r7
90001024:	f85d 7b04 	ldr.w	r7, [sp], #4
90001028:	4770      	bx	lr

9000102a <_fstat>:


int _fstat(int file, struct stat *st)
{
9000102a:	b480      	push	{r7}
9000102c:	b083      	sub	sp, #12
9000102e:	af00      	add	r7, sp, #0
90001030:	6078      	str	r0, [r7, #4]
90001032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90001034:	683b      	ldr	r3, [r7, #0]
90001036:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
9000103a:	605a      	str	r2, [r3, #4]
  return 0;
9000103c:	2300      	movs	r3, #0
}
9000103e:	4618      	mov	r0, r3
90001040:	370c      	adds	r7, #12
90001042:	46bd      	mov	sp, r7
90001044:	f85d 7b04 	ldr.w	r7, [sp], #4
90001048:	4770      	bx	lr

9000104a <_isatty>:

int _isatty(int file)
{
9000104a:	b480      	push	{r7}
9000104c:	b083      	sub	sp, #12
9000104e:	af00      	add	r7, sp, #0
90001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90001052:	2301      	movs	r3, #1
}
90001054:	4618      	mov	r0, r3
90001056:	370c      	adds	r7, #12
90001058:	46bd      	mov	sp, r7
9000105a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000105e:	4770      	bx	lr

90001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001060:	b480      	push	{r7}
90001062:	b085      	sub	sp, #20
90001064:	af00      	add	r7, sp, #0
90001066:	60f8      	str	r0, [r7, #12]
90001068:	60b9      	str	r1, [r7, #8]
9000106a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
9000106c:	2300      	movs	r3, #0
}
9000106e:	4618      	mov	r0, r3
90001070:	3714      	adds	r7, #20
90001072:	46bd      	mov	sp, r7
90001074:	f85d 7b04 	ldr.w	r7, [sp], #4
90001078:	4770      	bx	lr
	...

9000107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
9000107c:	b580      	push	{r7, lr}
9000107e:	b086      	sub	sp, #24
90001080:	af00      	add	r7, sp, #0
90001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001084:	4a14      	ldr	r2, [pc, #80]	@ (900010d8 <_sbrk+0x5c>)
90001086:	4b15      	ldr	r3, [pc, #84]	@ (900010dc <_sbrk+0x60>)
90001088:	1ad3      	subs	r3, r2, r3
9000108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
9000108c:	697b      	ldr	r3, [r7, #20]
9000108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001090:	4b13      	ldr	r3, [pc, #76]	@ (900010e0 <_sbrk+0x64>)
90001092:	681b      	ldr	r3, [r3, #0]
90001094:	2b00      	cmp	r3, #0
90001096:	d102      	bne.n	9000109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90001098:	4b11      	ldr	r3, [pc, #68]	@ (900010e0 <_sbrk+0x64>)
9000109a:	4a12      	ldr	r2, [pc, #72]	@ (900010e4 <_sbrk+0x68>)
9000109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
9000109e:	4b10      	ldr	r3, [pc, #64]	@ (900010e0 <_sbrk+0x64>)
900010a0:	681a      	ldr	r2, [r3, #0]
900010a2:	687b      	ldr	r3, [r7, #4]
900010a4:	4413      	add	r3, r2
900010a6:	693a      	ldr	r2, [r7, #16]
900010a8:	429a      	cmp	r2, r3
900010aa:	d207      	bcs.n	900010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
900010ac:	f00b fbb8 	bl	9000c820 <__errno>
900010b0:	4603      	mov	r3, r0
900010b2:	220c      	movs	r2, #12
900010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900010b6:	f04f 33ff 	mov.w	r3, #4294967295
900010ba:	e009      	b.n	900010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900010bc:	4b08      	ldr	r3, [pc, #32]	@ (900010e0 <_sbrk+0x64>)
900010be:	681b      	ldr	r3, [r3, #0]
900010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900010c2:	4b07      	ldr	r3, [pc, #28]	@ (900010e0 <_sbrk+0x64>)
900010c4:	681a      	ldr	r2, [r3, #0]
900010c6:	687b      	ldr	r3, [r7, #4]
900010c8:	4413      	add	r3, r2
900010ca:	4a05      	ldr	r2, [pc, #20]	@ (900010e0 <_sbrk+0x64>)
900010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900010ce:	68fb      	ldr	r3, [r7, #12]
}
900010d0:	4618      	mov	r0, r3
900010d2:	3718      	adds	r7, #24
900010d4:	46bd      	mov	sp, r7
900010d6:	bd80      	pop	{r7, pc}
900010d8:	20020000 	.word	0x20020000
900010dc:	00001000 	.word	0x00001000
900010e0:	20000240 	.word	0x20000240
900010e4:	20001498 	.word	0x20001498

900010e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
900010e8:	b580      	push	{r7, lr}
900010ea:	b082      	sub	sp, #8
900010ec:	af00      	add	r7, sp, #0
900010ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
900010f0:	687b      	ldr	r3, [r7, #4]
900010f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900010f6:	4618      	mov	r0, r3
900010f8:	f00a fc5a 	bl	9000b9b0 <USBH_LL_IncTimer>
}
900010fc:	bf00      	nop
900010fe:	3708      	adds	r7, #8
90001100:	46bd      	mov	sp, r7
90001102:	bd80      	pop	{r7, pc}

90001104 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90001104:	b580      	push	{r7, lr}
90001106:	b082      	sub	sp, #8
90001108:	af00      	add	r7, sp, #0
9000110a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
9000110c:	687b      	ldr	r3, [r7, #4]
9000110e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001112:	4618      	mov	r0, r3
90001114:	f00a fc96 	bl	9000ba44 <USBH_LL_Connect>
}
90001118:	bf00      	nop
9000111a:	3708      	adds	r7, #8
9000111c:	46bd      	mov	sp, r7
9000111e:	bd80      	pop	{r7, pc}

90001120 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90001120:	b580      	push	{r7, lr}
90001122:	b082      	sub	sp, #8
90001124:	af00      	add	r7, sp, #0
90001126:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90001128:	687b      	ldr	r3, [r7, #4]
9000112a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000112e:	4618      	mov	r0, r3
90001130:	f00a fc9f 	bl	9000ba72 <USBH_LL_Disconnect>
}
90001134:	bf00      	nop
90001136:	3708      	adds	r7, #8
90001138:	46bd      	mov	sp, r7
9000113a:	bd80      	pop	{r7, pc}

9000113c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
9000113c:	b580      	push	{r7, lr}
9000113e:	b082      	sub	sp, #8
90001140:	af00      	add	r7, sp, #0
90001142:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90001144:	687b      	ldr	r3, [r7, #4]
90001146:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000114a:	4618      	mov	r0, r3
9000114c:	f00a fc5a 	bl	9000ba04 <USBH_LL_PortEnabled>
}
90001150:	bf00      	nop
90001152:	3708      	adds	r7, #8
90001154:	46bd      	mov	sp, r7
90001156:	bd80      	pop	{r7, pc}

90001158 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001158:	b580      	push	{r7, lr}
9000115a:	b082      	sub	sp, #8
9000115c:	af00      	add	r7, sp, #0
9000115e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90001160:	687b      	ldr	r3, [r7, #4]
90001162:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001166:	4618      	mov	r0, r3
90001168:	f00a fc5a 	bl	9000ba20 <USBH_LL_PortDisabled>
}
9000116c:	bf00      	nop
9000116e:	3708      	adds	r7, #8
90001170:	46bd      	mov	sp, r7
90001172:	bd80      	pop	{r7, pc}

90001174 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001174:	b480      	push	{r7}
90001176:	b083      	sub	sp, #12
90001178:	af00      	add	r7, sp, #0
9000117a:	6078      	str	r0, [r7, #4]
9000117c:	460b      	mov	r3, r1
9000117e:	70fb      	strb	r3, [r7, #3]
90001180:	4613      	mov	r3, r2
90001182:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90001184:	bf00      	nop
90001186:	370c      	adds	r7, #12
90001188:	46bd      	mov	sp, r7
9000118a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000118e:	4770      	bx	lr

90001190 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90001190:	b580      	push	{r7, lr}
90001192:	b082      	sub	sp, #8
90001194:	af00      	add	r7, sp, #0
90001196:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90001198:	687b      	ldr	r3, [r7, #4]
9000119a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
9000119e:	4618      	mov	r0, r3
900011a0:	f002 ffe1 	bl	90004166 <HAL_HCD_Stop>
  return USBH_OK;
900011a4:	2300      	movs	r3, #0
}
900011a6:	4618      	mov	r0, r3
900011a8:	3708      	adds	r7, #8
900011aa:	46bd      	mov	sp, r7
900011ac:	bd80      	pop	{r7, pc}
	...

900011b0 <ClearCache>:
#include "display.h"

uint32_t x_size, y_size;

void ClearCache()
{
900011b0:	b480      	push	{r7}
900011b2:	b085      	sub	sp, #20
900011b4:	af00      	add	r7, sp, #0
900011b6:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900011ba:	60fb      	str	r3, [r7, #12]
900011bc:	f44f 23ff 	mov.w	r3, #522240	@ 0x7f800
900011c0:	60bb      	str	r3, [r7, #8]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
900011c2:	68bb      	ldr	r3, [r7, #8]
900011c4:	2b00      	cmp	r3, #0
900011c6:	dd1d      	ble.n	90001204 <ClearCache+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
900011c8:	68fb      	ldr	r3, [r7, #12]
900011ca:	f003 021f 	and.w	r2, r3, #31
900011ce:	68bb      	ldr	r3, [r7, #8]
900011d0:	4413      	add	r3, r2
900011d2:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
900011d4:	68fb      	ldr	r3, [r7, #12]
900011d6:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
900011d8:	f3bf 8f4f 	dsb	sy
}
900011dc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
900011de:	4a0d      	ldr	r2, [pc, #52]	@ (90001214 <ClearCache+0x64>)
900011e0:	683b      	ldr	r3, [r7, #0]
900011e2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
900011e6:	683b      	ldr	r3, [r7, #0]
900011e8:	3320      	adds	r3, #32
900011ea:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
900011ec:	687b      	ldr	r3, [r7, #4]
900011ee:	3b20      	subs	r3, #32
900011f0:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
900011f2:	687b      	ldr	r3, [r7, #4]
900011f4:	2b00      	cmp	r3, #0
900011f6:	dcf2      	bgt.n	900011de <ClearCache+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
900011f8:	f3bf 8f4f 	dsb	sy
}
900011fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900011fe:	f3bf 8f6f 	isb	sy
}
90001202:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
90001204:	bf00      	nop
	// otherwise I get LCD artefacts
	SCB_CleanDCache_by_Addr(SDRAM_DEVICE_ADDR, 480*272*4);
}
90001206:	bf00      	nop
90001208:	3714      	adds	r7, #20
9000120a:	46bd      	mov	sp, r7
9000120c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001210:	4770      	bx	lr
90001212:	bf00      	nop
90001214:	e000ed00 	.word	0xe000ed00

90001218 <InitializeLcd>:

void InitializeLcd(void)
{
90001218:	b580      	push	{r7, lr}
9000121a:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
9000121c:	2101      	movs	r1, #1
9000121e:	2000      	movs	r0, #0
90001220:	f000 fe9e 	bl	90001f60 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90001224:	480f      	ldr	r0, [pc, #60]	@ (90001264 <InitializeLcd+0x4c>)
90001226:	f00a fc69 	bl	9000bafc <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
9000122a:	2000      	movs	r0, #0
9000122c:	f00a fcbc 	bl	9000bba8 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90001230:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001234:	f00a fd2e 	bl	9000bc94 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90001238:	490b      	ldr	r1, [pc, #44]	@ (90001268 <InitializeLcd+0x50>)
9000123a:	2000      	movs	r0, #0
9000123c:	f001 f84a 	bl	900022d4 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90001240:	490a      	ldr	r1, [pc, #40]	@ (9000126c <InitializeLcd+0x54>)
90001242:	2000      	movs	r0, #0
90001244:	f001 f864 	bl	90002310 <BSP_LCD_GetYSize>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90001248:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
9000124c:	f00a fcca 	bl	9000bbe4 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90001250:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001254:	f00a fcda 	bl	9000bc0c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90001258:	4805      	ldr	r0, [pc, #20]	@ (90001270 <InitializeLcd+0x58>)
9000125a:	f00a fceb 	bl	9000bc34 <UTIL_LCD_SetFont>
}
9000125e:	bf00      	nop
90001260:	bd80      	pop	{r7, pc}
90001262:	bf00      	nop
90001264:	9000d704 	.word	0x9000d704
90001268:	20000624 	.word	0x20000624
9000126c:	20000628 	.word	0x20000628
90001270:	20000068 	.word	0x20000068

90001274 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
90001274:	b580      	push	{r7, lr}
90001276:	b082      	sub	sp, #8
90001278:	af00      	add	r7, sp, #0
9000127a:	6078      	str	r0, [r7, #4]
9000127c:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
9000127e:	683a      	ldr	r2, [r7, #0]
90001280:	6879      	ldr	r1, [r7, #4]
90001282:	4803      	ldr	r0, [pc, #12]	@ (90001290 <uartSetCursorPosition+0x1c>)
90001284:	f00b f904 	bl	9000c490 <iprintf>
}
90001288:	bf00      	nop
9000128a:	3708      	adds	r7, #8
9000128c:	46bd      	mov	sp, r7
9000128e:	bd80      	pop	{r7, pc}
90001290:	9000d53c 	.word	0x9000d53c

90001294 <UartClearScreen>:

void UartClearScreen() {
90001294:	b580      	push	{r7, lr}
90001296:	af00      	add	r7, sp, #0
  printf("\033[2J");
90001298:	4803      	ldr	r0, [pc, #12]	@ (900012a8 <UartClearScreen+0x14>)
9000129a:	f00b f8f9 	bl	9000c490 <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
9000129e:	4803      	ldr	r0, [pc, #12]	@ (900012ac <UartClearScreen+0x18>)
900012a0:	f00b f8f6 	bl	9000c490 <iprintf>
}
900012a4:	bf00      	nop
900012a6:	bd80      	pop	{r7, pc}
900012a8:	9000d548 	.word	0x9000d548
900012ac:	9000d550 	.word	0x9000d550

900012b0 <UartRenderState>:

void UartRenderState(AppContext *ctx) {
900012b0:	b580      	push	{r7, lr}
900012b2:	b082      	sub	sp, #8
900012b4:	af00      	add	r7, sp, #0
900012b6:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
900012b8:	2101      	movs	r1, #1
900012ba:	2001      	movs	r0, #1
900012bc:	f7ff ffda 	bl	90001274 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
900012c0:	687b      	ldr	r3, [r7, #4]
900012c2:	781b      	ldrb	r3, [r3, #0]
900012c4:	2b00      	cmp	r3, #0
900012c6:	d13a      	bne.n	9000133e <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
900012c8:	481f      	ldr	r0, [pc, #124]	@ (90001348 <UartRenderState+0x98>)
900012ca:	f00b f8e1 	bl	9000c490 <iprintf>
    uartSetCursorPosition(2, 1);
900012ce:	2101      	movs	r1, #1
900012d0:	2002      	movs	r0, #2
900012d2:	f7ff ffcf 	bl	90001274 <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
900012d6:	687b      	ldr	r3, [r7, #4]
900012d8:	889b      	ldrh	r3, [r3, #4]
900012da:	4619      	mov	r1, r3
900012dc:	481b      	ldr	r0, [pc, #108]	@ (9000134c <UartRenderState+0x9c>)
900012de:	f00b f8d7 	bl	9000c490 <iprintf>
    uartSetCursorPosition(3, 1);
900012e2:	2101      	movs	r1, #1
900012e4:	2003      	movs	r0, #3
900012e6:	f7ff ffc5 	bl	90001274 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
900012ea:	687b      	ldr	r3, [r7, #4]
900012ec:	885b      	ldrh	r3, [r3, #2]
900012ee:	2b00      	cmp	r3, #0
900012f0:	d006      	beq.n	90001300 <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
900012f2:	687b      	ldr	r3, [r7, #4]
900012f4:	885b      	ldrh	r3, [r3, #2]
900012f6:	4619      	mov	r1, r3
900012f8:	4815      	ldr	r0, [pc, #84]	@ (90001350 <UartRenderState+0xa0>)
900012fa:	f00b f8c9 	bl	9000c490 <iprintf>
900012fe:	e002      	b.n	90001306 <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
90001300:	4814      	ldr	r0, [pc, #80]	@ (90001354 <UartRenderState+0xa4>)
90001302:	f00b f8c5 	bl	9000c490 <iprintf>
    }
    uartSetCursorPosition(4, 1);
90001306:	2101      	movs	r1, #1
90001308:	2004      	movs	r0, #4
9000130a:	f7ff ffb3 	bl	90001274 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
9000130e:	687b      	ldr	r3, [r7, #4]
90001310:	79db      	ldrb	r3, [r3, #7]
90001312:	2b00      	cmp	r3, #0
90001314:	d006      	beq.n	90001324 <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
90001316:	687b      	ldr	r3, [r7, #4]
90001318:	885b      	ldrh	r3, [r3, #2]
9000131a:	4619      	mov	r1, r3
9000131c:	480e      	ldr	r0, [pc, #56]	@ (90001358 <UartRenderState+0xa8>)
9000131e:	f00b f8b7 	bl	9000c490 <iprintf>
90001322:	e002      	b.n	9000132a <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
90001324:	480d      	ldr	r0, [pc, #52]	@ (9000135c <UartRenderState+0xac>)
90001326:	f00b f8b3 	bl	9000c490 <iprintf>
    }
    uartSetCursorPosition(5, 1);
9000132a:	2101      	movs	r1, #1
9000132c:	2005      	movs	r0, #5
9000132e:	f7ff ffa1 	bl	90001274 <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
90001332:	687b      	ldr	r3, [r7, #4]
90001334:	3308      	adds	r3, #8
90001336:	4619      	mov	r1, r3
90001338:	4809      	ldr	r0, [pc, #36]	@ (90001360 <UartRenderState+0xb0>)
9000133a:	f00b f8a9 	bl	9000c490 <iprintf>
  }
}
9000133e:	bf00      	nop
90001340:	3708      	adds	r7, #8
90001342:	46bd      	mov	sp, r7
90001344:	bd80      	pop	{r7, pc}
90001346:	bf00      	nop
90001348:	9000d554 	.word	0x9000d554
9000134c:	9000d56c 	.word	0x9000d56c
90001350:	9000d584 	.word	0x9000d584
90001354:	9000d598 	.word	0x9000d598
90001358:	9000d5ac 	.word	0x9000d5ac
9000135c:	9000d5c8 	.word	0x9000d5c8
90001360:	9000d5e4 	.word	0x9000d5e4

90001364 <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
90001364:	b590      	push	{r4, r7, lr}
90001366:	b08b      	sub	sp, #44	@ 0x2c
90001368:	af00      	add	r7, sp, #0
9000136a:	6078      	str	r0, [r7, #4]
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000136c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001370:	f00a fc90 	bl	9000bc94 <UTIL_LCD_Clear>

  if (ctx->currentState == STATE_F1) {
90001374:	687b      	ldr	r3, [r7, #4]
90001376:	781b      	ldrb	r3, [r3, #0]
90001378:	2b00      	cmp	r3, #0
9000137a:	d16a      	bne.n	90001452 <DisplayRenderState+0xee>
	char buffer[32];  // Make sure it's large enough
    UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"F1: Voltage control    ", LEFT_MODE);
9000137c:	2303      	movs	r3, #3
9000137e:	4a37      	ldr	r2, [pc, #220]	@ (9000145c <DisplayRenderState+0xf8>)
90001380:	2100      	movs	r1, #0
90001382:	2000      	movs	r0, #0
90001384:	f00a fcd2 	bl	9000bd2c <UTIL_LCD_DisplayStringAt>
    sprintf(buffer, "Current input: %d", ctx->inputValue);
90001388:	687b      	ldr	r3, [r7, #4]
9000138a:	889b      	ldrh	r3, [r3, #4]
9000138c:	461a      	mov	r2, r3
9000138e:	f107 0308 	add.w	r3, r7, #8
90001392:	4933      	ldr	r1, [pc, #204]	@ (90001460 <DisplayRenderState+0xfc>)
90001394:	4618      	mov	r0, r3
90001396:	f00b f8eb 	bl	9000c570 <siprintf>
    UTIL_LCD_DisplayStringAt(0, 32, (uint8_t *)buffer, LEFT_MODE);
9000139a:	f107 0208 	add.w	r2, r7, #8
9000139e:	2303      	movs	r3, #3
900013a0:	2120      	movs	r1, #32
900013a2:	2000      	movs	r0, #0
900013a4:	f00a fcc2 	bl	9000bd2c <UTIL_LCD_DisplayStringAt>

    sprintf(buffer, "Current input: %d", ctx->inputValue);
900013a8:	687b      	ldr	r3, [r7, #4]
900013aa:	889b      	ldrh	r3, [r3, #4]
900013ac:	461a      	mov	r2, r3
900013ae:	f107 0308 	add.w	r3, r7, #8
900013b2:	492b      	ldr	r1, [pc, #172]	@ (90001460 <DisplayRenderState+0xfc>)
900013b4:	4618      	mov	r0, r3
900013b6:	f00b f8db 	bl	9000c570 <siprintf>
    UTIL_LCD_DisplayStringAt(0, 32, (uint8_t *)buffer, LEFT_MODE);
900013ba:	f107 0208 	add.w	r2, r7, #8
900013be:	2303      	movs	r3, #3
900013c0:	2120      	movs	r1, #32
900013c2:	2000      	movs	r0, #0
900013c4:	f00a fcb2 	bl	9000bd2c <UTIL_LCD_DisplayStringAt>

    if (ctx->voltage > 0) {
900013c8:	687b      	ldr	r3, [r7, #4]
900013ca:	885b      	ldrh	r3, [r3, #2]
900013cc:	2b00      	cmp	r3, #0
900013ce:	d009      	beq.n	900013e4 <DisplayRenderState+0x80>
      sprintf(buffer, "Voltage: %dV", ctx->voltage);
900013d0:	687b      	ldr	r3, [r7, #4]
900013d2:	885b      	ldrh	r3, [r3, #2]
900013d4:	461a      	mov	r2, r3
900013d6:	f107 0308 	add.w	r3, r7, #8
900013da:	4922      	ldr	r1, [pc, #136]	@ (90001464 <DisplayRenderState+0x100>)
900013dc:	4618      	mov	r0, r3
900013de:	f00b f8c7 	bl	9000c570 <siprintf>
900013e2:	e007      	b.n	900013f4 <DisplayRenderState+0x90>
    } else {
      strcpy(buffer, "Voltage: N/A");
900013e4:	f107 0308 	add.w	r3, r7, #8
900013e8:	4a1f      	ldr	r2, [pc, #124]	@ (90001468 <DisplayRenderState+0x104>)
900013ea:	461c      	mov	r4, r3
900013ec:	4613      	mov	r3, r2
900013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
900013f0:	c407      	stmia	r4!, {r0, r1, r2}
900013f2:	7023      	strb	r3, [r4, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 64, (uint8_t *)buffer, LEFT_MODE);
900013f4:	f107 0208 	add.w	r2, r7, #8
900013f8:	2303      	movs	r3, #3
900013fa:	2140      	movs	r1, #64	@ 0x40
900013fc:	2000      	movs	r0, #0
900013fe:	f00a fc95 	bl	9000bd2c <UTIL_LCD_DisplayStringAt>

    if (ctx->isPwmRunning == true) {
90001402:	687b      	ldr	r3, [r7, #4]
90001404:	79db      	ldrb	r3, [r3, #7]
90001406:	2b00      	cmp	r3, #0
90001408:	d009      	beq.n	9000141e <DisplayRenderState+0xba>
      sprintf(buffer, "PWM is running at %dV", ctx->voltage);
9000140a:	687b      	ldr	r3, [r7, #4]
9000140c:	885b      	ldrh	r3, [r3, #2]
9000140e:	461a      	mov	r2, r3
90001410:	f107 0308 	add.w	r3, r7, #8
90001414:	4915      	ldr	r1, [pc, #84]	@ (9000146c <DisplayRenderState+0x108>)
90001416:	4618      	mov	r0, r3
90001418:	f00b f8aa 	bl	9000c570 <siprintf>
9000141c:	e008      	b.n	90001430 <DisplayRenderState+0xcc>
    } else {
      strcpy(buffer, "PWM is OFF");
9000141e:	f107 0308 	add.w	r3, r7, #8
90001422:	4a13      	ldr	r2, [pc, #76]	@ (90001470 <DisplayRenderState+0x10c>)
90001424:	ca07      	ldmia	r2, {r0, r1, r2}
90001426:	c303      	stmia	r3!, {r0, r1}
90001428:	801a      	strh	r2, [r3, #0]
9000142a:	3302      	adds	r3, #2
9000142c:	0c12      	lsrs	r2, r2, #16
9000142e:	701a      	strb	r2, [r3, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 96, (uint8_t *)buffer, LEFT_MODE);
90001430:	f107 0208 	add.w	r2, r7, #8
90001434:	2303      	movs	r3, #3
90001436:	2160      	movs	r1, #96	@ 0x60
90001438:	2000      	movs	r0, #0
9000143a:	f00a fc77 	bl	9000bd2c <UTIL_LCD_DisplayStringAt>

    UTIL_LCD_DisplayStringAt(0, 128, (uint8_t *)ctx->message, LEFT_MODE);
9000143e:	687b      	ldr	r3, [r7, #4]
90001440:	f103 0208 	add.w	r2, r3, #8
90001444:	2303      	movs	r3, #3
90001446:	2180      	movs	r1, #128	@ 0x80
90001448:	2000      	movs	r0, #0
9000144a:	f00a fc6f 	bl	9000bd2c <UTIL_LCD_DisplayStringAt>

    ClearCache();
9000144e:	f7ff feaf 	bl	900011b0 <ClearCache>


//    uartSetCursorPosition(5, 1);
//    printf("%s                                                               \r\n", ctx->message);
  }
}
90001452:	bf00      	nop
90001454:	372c      	adds	r7, #44	@ 0x2c
90001456:	46bd      	mov	sp, r7
90001458:	bd90      	pop	{r4, r7, pc}
9000145a:	bf00      	nop
9000145c:	9000d554 	.word	0x9000d554
90001460:	9000d628 	.word	0x9000d628
90001464:	9000d63c 	.word	0x9000d63c
90001468:	9000d64c 	.word	0x9000d64c
9000146c:	9000d65c 	.word	0x9000d65c
90001470:	9000d674 	.word	0x9000d674

90001474 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001474:	b580      	push	{r7, lr}
90001476:	b084      	sub	sp, #16
90001478:	af00      	add	r7, sp, #0
9000147a:	6078      	str	r0, [r7, #4]
9000147c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
9000147e:	687b      	ldr	r3, [r7, #4]
90001480:	2b00      	cmp	r3, #0
90001482:	d103      	bne.n	9000148c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001484:	f04f 33ff 	mov.w	r3, #4294967295
90001488:	60fb      	str	r3, [r7, #12]
9000148a:	e02c      	b.n	900014e6 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
9000148c:	683b      	ldr	r3, [r7, #0]
9000148e:	681a      	ldr	r2, [r3, #0]
90001490:	687b      	ldr	r3, [r7, #4]
90001492:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001494:	683b      	ldr	r3, [r7, #0]
90001496:	685a      	ldr	r2, [r3, #4]
90001498:	687b      	ldr	r3, [r7, #4]
9000149a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
9000149c:	683b      	ldr	r3, [r7, #0]
9000149e:	891a      	ldrh	r2, [r3, #8]
900014a0:	687b      	ldr	r3, [r7, #4]
900014a2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
900014a4:	683b      	ldr	r3, [r7, #0]
900014a6:	68da      	ldr	r2, [r3, #12]
900014a8:	687b      	ldr	r3, [r7, #4]
900014aa:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
900014ac:	683b      	ldr	r3, [r7, #0]
900014ae:	691a      	ldr	r2, [r3, #16]
900014b0:	687b      	ldr	r3, [r7, #4]
900014b2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900014b4:	683b      	ldr	r3, [r7, #0]
900014b6:	695a      	ldr	r2, [r3, #20]
900014b8:	687b      	ldr	r3, [r7, #4]
900014ba:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
900014bc:	687b      	ldr	r3, [r7, #4]
900014be:	4a0c      	ldr	r2, [pc, #48]	@ (900014f0 <FT5336_RegisterBusIO+0x7c>)
900014c0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900014c2:	687b      	ldr	r3, [r7, #4]
900014c4:	4a0b      	ldr	r2, [pc, #44]	@ (900014f4 <FT5336_RegisterBusIO+0x80>)
900014c6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900014c8:	687b      	ldr	r3, [r7, #4]
900014ca:	687a      	ldr	r2, [r7, #4]
900014cc:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900014ce:	687b      	ldr	r3, [r7, #4]
900014d0:	681b      	ldr	r3, [r3, #0]
900014d2:	2b00      	cmp	r3, #0
900014d4:	d004      	beq.n	900014e0 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900014d6:	687b      	ldr	r3, [r7, #4]
900014d8:	681b      	ldr	r3, [r3, #0]
900014da:	4798      	blx	r3
900014dc:	60f8      	str	r0, [r7, #12]
900014de:	e002      	b.n	900014e6 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900014e0:	f04f 33ff 	mov.w	r3, #4294967295
900014e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900014e6:	68fb      	ldr	r3, [r7, #12]
}
900014e8:	4618      	mov	r0, r3
900014ea:	3710      	adds	r7, #16
900014ec:	46bd      	mov	sp, r7
900014ee:	bd80      	pop	{r7, pc}
900014f0:	90001519 	.word	0x90001519
900014f4:	9000154d 	.word	0x9000154d

900014f8 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
900014f8:	b580      	push	{r7, lr}
900014fa:	b082      	sub	sp, #8
900014fc:	af00      	add	r7, sp, #0
900014fe:	6078      	str	r0, [r7, #4]
90001500:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90001502:	687b      	ldr	r3, [r7, #4]
90001504:	3318      	adds	r3, #24
90001506:	6839      	ldr	r1, [r7, #0]
90001508:	4618      	mov	r0, r3
9000150a:	f000 f850 	bl	900015ae <ft5336_chip_id>
9000150e:	4603      	mov	r3, r0
}
90001510:	4618      	mov	r0, r3
90001512:	3708      	adds	r7, #8
90001514:	46bd      	mov	sp, r7
90001516:	bd80      	pop	{r7, pc}

90001518 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001518:	b590      	push	{r4, r7, lr}
9000151a:	b087      	sub	sp, #28
9000151c:	af00      	add	r7, sp, #0
9000151e:	60f8      	str	r0, [r7, #12]
90001520:	607a      	str	r2, [r7, #4]
90001522:	461a      	mov	r2, r3
90001524:	460b      	mov	r3, r1
90001526:	72fb      	strb	r3, [r7, #11]
90001528:	4613      	mov	r3, r2
9000152a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
9000152c:	68fb      	ldr	r3, [r7, #12]
9000152e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001530:	697b      	ldr	r3, [r7, #20]
90001532:	691c      	ldr	r4, [r3, #16]
90001534:	697b      	ldr	r3, [r7, #20]
90001536:	8918      	ldrh	r0, [r3, #8]
90001538:	7afb      	ldrb	r3, [r7, #11]
9000153a:	b299      	uxth	r1, r3
9000153c:	893b      	ldrh	r3, [r7, #8]
9000153e:	687a      	ldr	r2, [r7, #4]
90001540:	47a0      	blx	r4
90001542:	4603      	mov	r3, r0
}
90001544:	4618      	mov	r0, r3
90001546:	371c      	adds	r7, #28
90001548:	46bd      	mov	sp, r7
9000154a:	bd90      	pop	{r4, r7, pc}

9000154c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000154c:	b590      	push	{r4, r7, lr}
9000154e:	b087      	sub	sp, #28
90001550:	af00      	add	r7, sp, #0
90001552:	60f8      	str	r0, [r7, #12]
90001554:	607a      	str	r2, [r7, #4]
90001556:	461a      	mov	r2, r3
90001558:	460b      	mov	r3, r1
9000155a:	72fb      	strb	r3, [r7, #11]
9000155c:	4613      	mov	r3, r2
9000155e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001560:	68fb      	ldr	r3, [r7, #12]
90001562:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001564:	697b      	ldr	r3, [r7, #20]
90001566:	68dc      	ldr	r4, [r3, #12]
90001568:	697b      	ldr	r3, [r7, #20]
9000156a:	8918      	ldrh	r0, [r3, #8]
9000156c:	7afb      	ldrb	r3, [r7, #11]
9000156e:	b299      	uxth	r1, r3
90001570:	893b      	ldrh	r3, [r7, #8]
90001572:	687a      	ldr	r2, [r7, #4]
90001574:	47a0      	blx	r4
90001576:	4603      	mov	r3, r0
}
90001578:	4618      	mov	r0, r3
9000157a:	371c      	adds	r7, #28
9000157c:	46bd      	mov	sp, r7
9000157e:	bd90      	pop	{r4, r7, pc}

90001580 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90001580:	b590      	push	{r4, r7, lr}
90001582:	b085      	sub	sp, #20
90001584:	af00      	add	r7, sp, #0
90001586:	60f8      	str	r0, [r7, #12]
90001588:	607a      	str	r2, [r7, #4]
9000158a:	461a      	mov	r2, r3
9000158c:	460b      	mov	r3, r1
9000158e:	72fb      	strb	r3, [r7, #11]
90001590:	4613      	mov	r3, r2
90001592:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001594:	68fb      	ldr	r3, [r7, #12]
90001596:	685c      	ldr	r4, [r3, #4]
90001598:	68fb      	ldr	r3, [r7, #12]
9000159a:	6898      	ldr	r0, [r3, #8]
9000159c:	893b      	ldrh	r3, [r7, #8]
9000159e:	7af9      	ldrb	r1, [r7, #11]
900015a0:	687a      	ldr	r2, [r7, #4]
900015a2:	47a0      	blx	r4
900015a4:	4603      	mov	r3, r0
}
900015a6:	4618      	mov	r0, r3
900015a8:	3714      	adds	r7, #20
900015aa:	46bd      	mov	sp, r7
900015ac:	bd90      	pop	{r4, r7, pc}

900015ae <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900015ae:	b580      	push	{r7, lr}
900015b0:	b084      	sub	sp, #16
900015b2:	af00      	add	r7, sp, #0
900015b4:	6078      	str	r0, [r7, #4]
900015b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900015b8:	2301      	movs	r3, #1
900015ba:	683a      	ldr	r2, [r7, #0]
900015bc:	21a8      	movs	r1, #168	@ 0xa8
900015be:	6878      	ldr	r0, [r7, #4]
900015c0:	f7ff ffde 	bl	90001580 <ft5336_read_reg>
900015c4:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900015c6:	68fb      	ldr	r3, [r7, #12]
900015c8:	2b00      	cmp	r3, #0
900015ca:	d107      	bne.n	900015dc <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900015cc:	683b      	ldr	r3, [r7, #0]
900015ce:	781a      	ldrb	r2, [r3, #0]
900015d0:	683b      	ldr	r3, [r7, #0]
900015d2:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900015d4:	683b      	ldr	r3, [r7, #0]
900015d6:	781a      	ldrb	r2, [r3, #0]
900015d8:	683b      	ldr	r3, [r7, #0]
900015da:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900015dc:	68fb      	ldr	r3, [r7, #12]
}
900015de:	4618      	mov	r0, r3
900015e0:	3710      	adds	r7, #16
900015e2:	46bd      	mov	sp, r7
900015e4:	bd80      	pop	{r7, pc}

900015e6 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900015e6:	b580      	push	{r7, lr}
900015e8:	b084      	sub	sp, #16
900015ea:	af00      	add	r7, sp, #0
900015ec:	6078      	str	r0, [r7, #4]
900015ee:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
900015f0:	f04f 33ff 	mov.w	r3, #4294967295
900015f4:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900015f6:	683b      	ldr	r3, [r7, #0]
900015f8:	681b      	ldr	r3, [r3, #0]
900015fa:	4619      	mov	r1, r3
900015fc:	6878      	ldr	r0, [r7, #4]
900015fe:	f000 f831 	bl	90001664 <MT48LC4M32B2_ClockEnable>
90001602:	4603      	mov	r3, r0
90001604:	2b00      	cmp	r3, #0
90001606:	d128      	bne.n	9000165a <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90001608:	2001      	movs	r0, #1
9000160a:	f000 f8e1 	bl	900017d0 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000160e:	683b      	ldr	r3, [r7, #0]
90001610:	681b      	ldr	r3, [r3, #0]
90001612:	4619      	mov	r1, r3
90001614:	6878      	ldr	r0, [r7, #4]
90001616:	f000 f849 	bl	900016ac <MT48LC4M32B2_Precharge>
9000161a:	4603      	mov	r3, r0
9000161c:	2b00      	cmp	r3, #0
9000161e:	d11c      	bne.n	9000165a <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90001620:	683b      	ldr	r3, [r7, #0]
90001622:	6819      	ldr	r1, [r3, #0]
90001624:	683b      	ldr	r3, [r7, #0]
90001626:	685b      	ldr	r3, [r3, #4]
90001628:	461a      	mov	r2, r3
9000162a:	6878      	ldr	r0, [r7, #4]
9000162c:	f000 f896 	bl	9000175c <MT48LC4M32B2_RefreshMode>
90001630:	4603      	mov	r3, r0
90001632:	2b00      	cmp	r3, #0
90001634:	d111      	bne.n	9000165a <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001636:	6839      	ldr	r1, [r7, #0]
90001638:	6878      	ldr	r0, [r7, #4]
9000163a:	f000 f85b 	bl	900016f4 <MT48LC4M32B2_ModeRegConfig>
9000163e:	4603      	mov	r3, r0
90001640:	2b00      	cmp	r3, #0
90001642:	d10a      	bne.n	9000165a <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001644:	683b      	ldr	r3, [r7, #0]
90001646:	689b      	ldr	r3, [r3, #8]
90001648:	4619      	mov	r1, r3
9000164a:	6878      	ldr	r0, [r7, #4]
9000164c:	f000 f8ac 	bl	900017a8 <MT48LC4M32B2_RefreshRate>
90001650:	4603      	mov	r3, r0
90001652:	2b00      	cmp	r3, #0
90001654:	d101      	bne.n	9000165a <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001656:	2300      	movs	r3, #0
90001658:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000165a:	68fb      	ldr	r3, [r7, #12]
}
9000165c:	4618      	mov	r0, r3
9000165e:	3710      	adds	r7, #16
90001660:	46bd      	mov	sp, r7
90001662:	bd80      	pop	{r7, pc}

90001664 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001664:	b580      	push	{r7, lr}
90001666:	b082      	sub	sp, #8
90001668:	af00      	add	r7, sp, #0
9000166a:	6078      	str	r0, [r7, #4]
9000166c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000166e:	4b0e      	ldr	r3, [pc, #56]	@ (900016a8 <MT48LC4M32B2_ClockEnable+0x44>)
90001670:	2201      	movs	r2, #1
90001672:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001674:	4a0c      	ldr	r2, [pc, #48]	@ (900016a8 <MT48LC4M32B2_ClockEnable+0x44>)
90001676:	683b      	ldr	r3, [r7, #0]
90001678:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000167a:	4b0b      	ldr	r3, [pc, #44]	@ (900016a8 <MT48LC4M32B2_ClockEnable+0x44>)
9000167c:	2201      	movs	r2, #1
9000167e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001680:	4b09      	ldr	r3, [pc, #36]	@ (900016a8 <MT48LC4M32B2_ClockEnable+0x44>)
90001682:	2200      	movs	r2, #0
90001684:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000168a:	4907      	ldr	r1, [pc, #28]	@ (900016a8 <MT48LC4M32B2_ClockEnable+0x44>)
9000168c:	6878      	ldr	r0, [r7, #4]
9000168e:	f008 f8cf 	bl	90009830 <HAL_SDRAM_SendCommand>
90001692:	4603      	mov	r3, r0
90001694:	2b00      	cmp	r3, #0
90001696:	d002      	beq.n	9000169e <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001698:	f04f 33ff 	mov.w	r3, #4294967295
9000169c:	e000      	b.n	900016a0 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000169e:	2300      	movs	r3, #0
  }
}
900016a0:	4618      	mov	r0, r3
900016a2:	3708      	adds	r7, #8
900016a4:	46bd      	mov	sp, r7
900016a6:	bd80      	pop	{r7, pc}
900016a8:	2000062c 	.word	0x2000062c

900016ac <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900016ac:	b580      	push	{r7, lr}
900016ae:	b082      	sub	sp, #8
900016b0:	af00      	add	r7, sp, #0
900016b2:	6078      	str	r0, [r7, #4]
900016b4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900016b6:	4b0e      	ldr	r3, [pc, #56]	@ (900016f0 <MT48LC4M32B2_Precharge+0x44>)
900016b8:	2202      	movs	r2, #2
900016ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900016bc:	4a0c      	ldr	r2, [pc, #48]	@ (900016f0 <MT48LC4M32B2_Precharge+0x44>)
900016be:	683b      	ldr	r3, [r7, #0]
900016c0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900016c2:	4b0b      	ldr	r3, [pc, #44]	@ (900016f0 <MT48LC4M32B2_Precharge+0x44>)
900016c4:	2201      	movs	r2, #1
900016c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900016c8:	4b09      	ldr	r3, [pc, #36]	@ (900016f0 <MT48LC4M32B2_Precharge+0x44>)
900016ca:	2200      	movs	r2, #0
900016cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900016ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900016d2:	4907      	ldr	r1, [pc, #28]	@ (900016f0 <MT48LC4M32B2_Precharge+0x44>)
900016d4:	6878      	ldr	r0, [r7, #4]
900016d6:	f008 f8ab 	bl	90009830 <HAL_SDRAM_SendCommand>
900016da:	4603      	mov	r3, r0
900016dc:	2b00      	cmp	r3, #0
900016de:	d002      	beq.n	900016e6 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900016e0:	f04f 33ff 	mov.w	r3, #4294967295
900016e4:	e000      	b.n	900016e8 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900016e6:	2300      	movs	r3, #0
  }
}
900016e8:	4618      	mov	r0, r3
900016ea:	3708      	adds	r7, #8
900016ec:	46bd      	mov	sp, r7
900016ee:	bd80      	pop	{r7, pc}
900016f0:	2000062c 	.word	0x2000062c

900016f4 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900016f4:	b580      	push	{r7, lr}
900016f6:	b084      	sub	sp, #16
900016f8:	af00      	add	r7, sp, #0
900016fa:	6078      	str	r0, [r7, #4]
900016fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900016fe:	683b      	ldr	r3, [r7, #0]
90001700:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90001702:	683b      	ldr	r3, [r7, #0]
90001704:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001706:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001708:	683b      	ldr	r3, [r7, #0]
9000170a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
9000170c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
9000170e:	683b      	ldr	r3, [r7, #0]
90001710:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001712:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001714:	683b      	ldr	r3, [r7, #0]
90001716:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001718:	4313      	orrs	r3, r2
9000171a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000171c:	4b0e      	ldr	r3, [pc, #56]	@ (90001758 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000171e:	2204      	movs	r2, #4
90001720:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001722:	683b      	ldr	r3, [r7, #0]
90001724:	681b      	ldr	r3, [r3, #0]
90001726:	4a0c      	ldr	r2, [pc, #48]	@ (90001758 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001728:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000172a:	4b0b      	ldr	r3, [pc, #44]	@ (90001758 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000172c:	2201      	movs	r2, #1
9000172e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001730:	4a09      	ldr	r2, [pc, #36]	@ (90001758 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001732:	68fb      	ldr	r3, [r7, #12]
90001734:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000173a:	4907      	ldr	r1, [pc, #28]	@ (90001758 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000173c:	6878      	ldr	r0, [r7, #4]
9000173e:	f008 f877 	bl	90009830 <HAL_SDRAM_SendCommand>
90001742:	4603      	mov	r3, r0
90001744:	2b00      	cmp	r3, #0
90001746:	d002      	beq.n	9000174e <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001748:	f04f 33ff 	mov.w	r3, #4294967295
9000174c:	e000      	b.n	90001750 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000174e:	2300      	movs	r3, #0
  }
}
90001750:	4618      	mov	r0, r3
90001752:	3710      	adds	r7, #16
90001754:	46bd      	mov	sp, r7
90001756:	bd80      	pop	{r7, pc}
90001758:	2000062c 	.word	0x2000062c

9000175c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
9000175c:	b580      	push	{r7, lr}
9000175e:	b084      	sub	sp, #16
90001760:	af00      	add	r7, sp, #0
90001762:	60f8      	str	r0, [r7, #12]
90001764:	60b9      	str	r1, [r7, #8]
90001766:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001768:	4a0e      	ldr	r2, [pc, #56]	@ (900017a4 <MT48LC4M32B2_RefreshMode+0x48>)
9000176a:	687b      	ldr	r3, [r7, #4]
9000176c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
9000176e:	4a0d      	ldr	r2, [pc, #52]	@ (900017a4 <MT48LC4M32B2_RefreshMode+0x48>)
90001770:	68bb      	ldr	r3, [r7, #8]
90001772:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001774:	4b0b      	ldr	r3, [pc, #44]	@ (900017a4 <MT48LC4M32B2_RefreshMode+0x48>)
90001776:	2208      	movs	r2, #8
90001778:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000177a:	4b0a      	ldr	r3, [pc, #40]	@ (900017a4 <MT48LC4M32B2_RefreshMode+0x48>)
9000177c:	2200      	movs	r2, #0
9000177e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001784:	4907      	ldr	r1, [pc, #28]	@ (900017a4 <MT48LC4M32B2_RefreshMode+0x48>)
90001786:	68f8      	ldr	r0, [r7, #12]
90001788:	f008 f852 	bl	90009830 <HAL_SDRAM_SendCommand>
9000178c:	4603      	mov	r3, r0
9000178e:	2b00      	cmp	r3, #0
90001790:	d002      	beq.n	90001798 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001792:	f04f 33ff 	mov.w	r3, #4294967295
90001796:	e000      	b.n	9000179a <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001798:	2300      	movs	r3, #0
  }
}
9000179a:	4618      	mov	r0, r3
9000179c:	3710      	adds	r7, #16
9000179e:	46bd      	mov	sp, r7
900017a0:	bd80      	pop	{r7, pc}
900017a2:	bf00      	nop
900017a4:	2000062c 	.word	0x2000062c

900017a8 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
900017a8:	b580      	push	{r7, lr}
900017aa:	b082      	sub	sp, #8
900017ac:	af00      	add	r7, sp, #0
900017ae:	6078      	str	r0, [r7, #4]
900017b0:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900017b2:	6839      	ldr	r1, [r7, #0]
900017b4:	6878      	ldr	r0, [r7, #4]
900017b6:	f008 f870 	bl	9000989a <HAL_SDRAM_ProgramRefreshRate>
900017ba:	4603      	mov	r3, r0
900017bc:	2b00      	cmp	r3, #0
900017be:	d002      	beq.n	900017c6 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
900017c0:	f04f 33ff 	mov.w	r3, #4294967295
900017c4:	e000      	b.n	900017c8 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
900017c6:	2300      	movs	r3, #0
  }
}
900017c8:	4618      	mov	r0, r3
900017ca:	3708      	adds	r7, #8
900017cc:	46bd      	mov	sp, r7
900017ce:	bd80      	pop	{r7, pc}

900017d0 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900017d0:	b580      	push	{r7, lr}
900017d2:	b084      	sub	sp, #16
900017d4:	af00      	add	r7, sp, #0
900017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900017d8:	f001 fd2a 	bl	90003230 <HAL_GetTick>
900017dc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900017de:	bf00      	nop
900017e0:	f001 fd26 	bl	90003230 <HAL_GetTick>
900017e4:	4602      	mov	r2, r0
900017e6:	68fb      	ldr	r3, [r7, #12]
900017e8:	1ad3      	subs	r3, r2, r3
900017ea:	687a      	ldr	r2, [r7, #4]
900017ec:	429a      	cmp	r2, r3
900017ee:	d8f7      	bhi.n	900017e0 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
900017f0:	2300      	movs	r3, #0
}
900017f2:	4618      	mov	r0, r3
900017f4:	3710      	adds	r7, #16
900017f6:	46bd      	mov	sp, r7
900017f8:	bd80      	pop	{r7, pc}
	...

900017fc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
900017fc:	b580      	push	{r7, lr}
900017fe:	b082      	sub	sp, #8
90001800:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001802:	2300      	movs	r3, #0
90001804:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001806:	4b16      	ldr	r3, [pc, #88]	@ (90001860 <BSP_I2C4_Init+0x64>)
90001808:	4a16      	ldr	r2, [pc, #88]	@ (90001864 <BSP_I2C4_Init+0x68>)
9000180a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
9000180c:	4b16      	ldr	r3, [pc, #88]	@ (90001868 <BSP_I2C4_Init+0x6c>)
9000180e:	681b      	ldr	r3, [r3, #0]
90001810:	2b00      	cmp	r3, #0
90001812:	d11f      	bne.n	90001854 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001814:	4b14      	ldr	r3, [pc, #80]	@ (90001868 <BSP_I2C4_Init+0x6c>)
90001816:	681b      	ldr	r3, [r3, #0]
90001818:	3301      	adds	r3, #1
9000181a:	4a13      	ldr	r2, [pc, #76]	@ (90001868 <BSP_I2C4_Init+0x6c>)
9000181c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
9000181e:	4810      	ldr	r0, [pc, #64]	@ (90001860 <BSP_I2C4_Init+0x64>)
90001820:	f004 faf8 	bl	90005e14 <HAL_I2C_GetState>
90001824:	4603      	mov	r3, r0
90001826:	2b00      	cmp	r3, #0
90001828:	d114      	bne.n	90001854 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
9000182a:	480d      	ldr	r0, [pc, #52]	@ (90001860 <BSP_I2C4_Init+0x64>)
9000182c:	f000 fb06 	bl	90001e3c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001830:	f006 f976 	bl	90007b20 <HAL_RCC_GetPCLK2Freq>
90001834:	4603      	mov	r3, r0
90001836:	490d      	ldr	r1, [pc, #52]	@ (9000186c <BSP_I2C4_Init+0x70>)
90001838:	4618      	mov	r0, r3
9000183a:	f000 f889 	bl	90001950 <I2C_GetTiming>
9000183e:	4603      	mov	r3, r0
90001840:	4619      	mov	r1, r3
90001842:	4807      	ldr	r0, [pc, #28]	@ (90001860 <BSP_I2C4_Init+0x64>)
90001844:	f000 f814 	bl	90001870 <MX_I2C4_Init>
90001848:	4603      	mov	r3, r0
9000184a:	2b00      	cmp	r3, #0
9000184c:	d002      	beq.n	90001854 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
9000184e:	f06f 0307 	mvn.w	r3, #7
90001852:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001854:	687b      	ldr	r3, [r7, #4]
}
90001856:	4618      	mov	r0, r3
90001858:	3708      	adds	r7, #8
9000185a:	46bd      	mov	sp, r7
9000185c:	bd80      	pop	{r7, pc}
9000185e:	bf00      	nop
90001860:	20001044 	.word	0x20001044
90001864:	58001c00 	.word	0x58001c00
90001868:	2000063c 	.word	0x2000063c
9000186c:	000186a0 	.word	0x000186a0

90001870 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001870:	b580      	push	{r7, lr}
90001872:	b084      	sub	sp, #16
90001874:	af00      	add	r7, sp, #0
90001876:	6078      	str	r0, [r7, #4]
90001878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
9000187a:	2300      	movs	r3, #0
9000187c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000187e:	687b      	ldr	r3, [r7, #4]
90001880:	683a      	ldr	r2, [r7, #0]
90001882:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001884:	687b      	ldr	r3, [r7, #4]
90001886:	2200      	movs	r2, #0
90001888:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000188a:	687b      	ldr	r3, [r7, #4]
9000188c:	2201      	movs	r2, #1
9000188e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001890:	687b      	ldr	r3, [r7, #4]
90001892:	2200      	movs	r2, #0
90001894:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001896:	687b      	ldr	r3, [r7, #4]
90001898:	2200      	movs	r2, #0
9000189a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
9000189c:	687b      	ldr	r3, [r7, #4]
9000189e:	2200      	movs	r2, #0
900018a0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
900018a2:	687b      	ldr	r3, [r7, #4]
900018a4:	2200      	movs	r2, #0
900018a6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900018a8:	687b      	ldr	r3, [r7, #4]
900018aa:	2200      	movs	r2, #0
900018ac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
900018ae:	6878      	ldr	r0, [r7, #4]
900018b0:	f004 f8f0 	bl	90005a94 <HAL_I2C_Init>
900018b4:	4603      	mov	r3, r0
900018b6:	2b00      	cmp	r3, #0
900018b8:	d002      	beq.n	900018c0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
900018ba:	2301      	movs	r3, #1
900018bc:	73fb      	strb	r3, [r7, #15]
900018be:	e014      	b.n	900018ea <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
900018c0:	2300      	movs	r3, #0
900018c2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
900018c4:	68b9      	ldr	r1, [r7, #8]
900018c6:	6878      	ldr	r0, [r7, #4]
900018c8:	f004 fd2c 	bl	90006324 <HAL_I2CEx_ConfigAnalogFilter>
900018cc:	4603      	mov	r3, r0
900018ce:	2b00      	cmp	r3, #0
900018d0:	d002      	beq.n	900018d8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
900018d2:	2301      	movs	r3, #1
900018d4:	73fb      	strb	r3, [r7, #15]
900018d6:	e008      	b.n	900018ea <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900018d8:	2100      	movs	r1, #0
900018da:	6878      	ldr	r0, [r7, #4]
900018dc:	f004 fd6d 	bl	900063ba <HAL_I2CEx_ConfigDigitalFilter>
900018e0:	4603      	mov	r3, r0
900018e2:	2b00      	cmp	r3, #0
900018e4:	d001      	beq.n	900018ea <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
900018e6:	2301      	movs	r3, #1
900018e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
900018ea:	7bfb      	ldrb	r3, [r7, #15]
}
900018ec:	4618      	mov	r0, r3
900018ee:	3710      	adds	r7, #16
900018f0:	46bd      	mov	sp, r7
900018f2:	bd80      	pop	{r7, pc}

900018f4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
900018f4:	b580      	push	{r7, lr}
900018f6:	b088      	sub	sp, #32
900018f8:	af02      	add	r7, sp, #8
900018fa:	60ba      	str	r2, [r7, #8]
900018fc:	461a      	mov	r2, r3
900018fe:	4603      	mov	r3, r0
90001900:	81fb      	strh	r3, [r7, #14]
90001902:	460b      	mov	r3, r1
90001904:	81bb      	strh	r3, [r7, #12]
90001906:	4613      	mov	r3, r2
90001908:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
9000190a:	89b9      	ldrh	r1, [r7, #12]
9000190c:	89f8      	ldrh	r0, [r7, #14]
9000190e:	88fb      	ldrh	r3, [r7, #6]
90001910:	9300      	str	r3, [sp, #0]
90001912:	68bb      	ldr	r3, [r7, #8]
90001914:	2201      	movs	r2, #1
90001916:	f000 fafd 	bl	90001f14 <I2C4_ReadReg>
9000191a:	4603      	mov	r3, r0
9000191c:	2b00      	cmp	r3, #0
9000191e:	d102      	bne.n	90001926 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001920:	2300      	movs	r3, #0
90001922:	617b      	str	r3, [r7, #20]
90001924:	e00c      	b.n	90001940 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001926:	4809      	ldr	r0, [pc, #36]	@ (9000194c <BSP_I2C4_ReadReg+0x58>)
90001928:	f004 fa82 	bl	90005e30 <HAL_I2C_GetError>
9000192c:	4603      	mov	r3, r0
9000192e:	2b04      	cmp	r3, #4
90001930:	d103      	bne.n	9000193a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001932:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001936:	617b      	str	r3, [r7, #20]
90001938:	e002      	b.n	90001940 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
9000193a:	f06f 0303 	mvn.w	r3, #3
9000193e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001940:	697b      	ldr	r3, [r7, #20]
}
90001942:	4618      	mov	r0, r3
90001944:	3718      	adds	r7, #24
90001946:	46bd      	mov	sp, r7
90001948:	bd80      	pop	{r7, pc}
9000194a:	bf00      	nop
9000194c:	20001044 	.word	0x20001044

90001950 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001950:	b580      	push	{r7, lr}
90001952:	b086      	sub	sp, #24
90001954:	af00      	add	r7, sp, #0
90001956:	6078      	str	r0, [r7, #4]
90001958:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
9000195a:	2300      	movs	r3, #0
9000195c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
9000195e:	687b      	ldr	r3, [r7, #4]
90001960:	2b00      	cmp	r3, #0
90001962:	d06b      	beq.n	90001a3c <I2C_GetTiming+0xec>
90001964:	683b      	ldr	r3, [r7, #0]
90001966:	2b00      	cmp	r3, #0
90001968:	d068      	beq.n	90001a3c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
9000196a:	2300      	movs	r3, #0
9000196c:	613b      	str	r3, [r7, #16]
9000196e:	e060      	b.n	90001a32 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001970:	4a35      	ldr	r2, [pc, #212]	@ (90001a48 <I2C_GetTiming+0xf8>)
90001972:	693b      	ldr	r3, [r7, #16]
90001974:	212c      	movs	r1, #44	@ 0x2c
90001976:	fb01 f303 	mul.w	r3, r1, r3
9000197a:	4413      	add	r3, r2
9000197c:	3304      	adds	r3, #4
9000197e:	681b      	ldr	r3, [r3, #0]
90001980:	683a      	ldr	r2, [r7, #0]
90001982:	429a      	cmp	r2, r3
90001984:	d352      	bcc.n	90001a2c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001986:	4a30      	ldr	r2, [pc, #192]	@ (90001a48 <I2C_GetTiming+0xf8>)
90001988:	693b      	ldr	r3, [r7, #16]
9000198a:	212c      	movs	r1, #44	@ 0x2c
9000198c:	fb01 f303 	mul.w	r3, r1, r3
90001990:	4413      	add	r3, r2
90001992:	3308      	adds	r3, #8
90001994:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001996:	683a      	ldr	r2, [r7, #0]
90001998:	429a      	cmp	r2, r3
9000199a:	d847      	bhi.n	90001a2c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
9000199c:	6939      	ldr	r1, [r7, #16]
9000199e:	6878      	ldr	r0, [r7, #4]
900019a0:	f000 f856 	bl	90001a50 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
900019a4:	6939      	ldr	r1, [r7, #16]
900019a6:	6878      	ldr	r0, [r7, #4]
900019a8:	f000 f940 	bl	90001c2c <I2C_Compute_SCLL_SCLH>
900019ac:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
900019ae:	68fb      	ldr	r3, [r7, #12]
900019b0:	2b7f      	cmp	r3, #127	@ 0x7f
900019b2:	d842      	bhi.n	90001a3a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900019b4:	4925      	ldr	r1, [pc, #148]	@ (90001a4c <I2C_GetTiming+0xfc>)
900019b6:	68fa      	ldr	r2, [r7, #12]
900019b8:	4613      	mov	r3, r2
900019ba:	009b      	lsls	r3, r3, #2
900019bc:	4413      	add	r3, r2
900019be:	009b      	lsls	r3, r3, #2
900019c0:	440b      	add	r3, r1
900019c2:	681b      	ldr	r3, [r3, #0]
900019c4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900019c6:	4821      	ldr	r0, [pc, #132]	@ (90001a4c <I2C_GetTiming+0xfc>)
900019c8:	68fa      	ldr	r2, [r7, #12]
900019ca:	4613      	mov	r3, r2
900019cc:	009b      	lsls	r3, r3, #2
900019ce:	4413      	add	r3, r2
900019d0:	009b      	lsls	r3, r3, #2
900019d2:	4403      	add	r3, r0
900019d4:	3304      	adds	r3, #4
900019d6:	681b      	ldr	r3, [r3, #0]
900019d8:	051b      	lsls	r3, r3, #20
900019da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900019de:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900019e0:	481a      	ldr	r0, [pc, #104]	@ (90001a4c <I2C_GetTiming+0xfc>)
900019e2:	68fa      	ldr	r2, [r7, #12]
900019e4:	4613      	mov	r3, r2
900019e6:	009b      	lsls	r3, r3, #2
900019e8:	4413      	add	r3, r2
900019ea:	009b      	lsls	r3, r3, #2
900019ec:	4403      	add	r3, r0
900019ee:	3308      	adds	r3, #8
900019f0:	681b      	ldr	r3, [r3, #0]
900019f2:	041b      	lsls	r3, r3, #16
900019f4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900019f8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900019fa:	4814      	ldr	r0, [pc, #80]	@ (90001a4c <I2C_GetTiming+0xfc>)
900019fc:	68fa      	ldr	r2, [r7, #12]
900019fe:	4613      	mov	r3, r2
90001a00:	009b      	lsls	r3, r3, #2
90001a02:	4413      	add	r3, r2
90001a04:	009b      	lsls	r3, r3, #2
90001a06:	4403      	add	r3, r0
90001a08:	330c      	adds	r3, #12
90001a0a:	681b      	ldr	r3, [r3, #0]
90001a0c:	021b      	lsls	r3, r3, #8
90001a0e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001a10:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001a12:	480e      	ldr	r0, [pc, #56]	@ (90001a4c <I2C_GetTiming+0xfc>)
90001a14:	68fa      	ldr	r2, [r7, #12]
90001a16:	4613      	mov	r3, r2
90001a18:	009b      	lsls	r3, r3, #2
90001a1a:	4413      	add	r3, r2
90001a1c:	009b      	lsls	r3, r3, #2
90001a1e:	4403      	add	r3, r0
90001a20:	3310      	adds	r3, #16
90001a22:	681b      	ldr	r3, [r3, #0]
90001a24:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001a26:	430b      	orrs	r3, r1
90001a28:	617b      	str	r3, [r7, #20]
        }
        break;
90001a2a:	e006      	b.n	90001a3a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001a2c:	693b      	ldr	r3, [r7, #16]
90001a2e:	3301      	adds	r3, #1
90001a30:	613b      	str	r3, [r7, #16]
90001a32:	693b      	ldr	r3, [r7, #16]
90001a34:	2b02      	cmp	r3, #2
90001a36:	d99b      	bls.n	90001970 <I2C_GetTiming+0x20>
90001a38:	e000      	b.n	90001a3c <I2C_GetTiming+0xec>
        break;
90001a3a:	bf00      	nop
      }
    }
  }

  return ret;
90001a3c:	697b      	ldr	r3, [r7, #20]
}
90001a3e:	4618      	mov	r0, r3
90001a40:	3718      	adds	r7, #24
90001a42:	46bd      	mov	sp, r7
90001a44:	bd80      	pop	{r7, pc}
90001a46:	bf00      	nop
90001a48:	9000d680 	.word	0x9000d680
90001a4c:	20000640 	.word	0x20000640

90001a50 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001a50:	b480      	push	{r7}
90001a52:	b08f      	sub	sp, #60	@ 0x3c
90001a54:	af00      	add	r7, sp, #0
90001a56:	6078      	str	r0, [r7, #4]
90001a58:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001a5a:	2310      	movs	r3, #16
90001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001a5e:	687b      	ldr	r3, [r7, #4]
90001a60:	085a      	lsrs	r2, r3, #1
90001a62:	4b6e      	ldr	r3, [pc, #440]	@ (90001c1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001a64:	4413      	add	r3, r2
90001a66:	687a      	ldr	r2, [r7, #4]
90001a68:	fbb3 f3f2 	udiv	r3, r3, r2
90001a6c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001a6e:	2332      	movs	r3, #50	@ 0x32
90001a70:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001a72:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001a76:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001a78:	4a69      	ldr	r2, [pc, #420]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a7a:	683b      	ldr	r3, [r7, #0]
90001a7c:	212c      	movs	r1, #44	@ 0x2c
90001a7e:	fb01 f303 	mul.w	r3, r1, r3
90001a82:	4413      	add	r3, r2
90001a84:	3324      	adds	r3, #36	@ 0x24
90001a86:	681b      	ldr	r3, [r3, #0]
90001a88:	4618      	mov	r0, r3
90001a8a:	4a65      	ldr	r2, [pc, #404]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a8c:	683b      	ldr	r3, [r7, #0]
90001a8e:	212c      	movs	r1, #44	@ 0x2c
90001a90:	fb01 f303 	mul.w	r3, r1, r3
90001a94:	4413      	add	r3, r2
90001a96:	330c      	adds	r3, #12
90001a98:	681b      	ldr	r3, [r3, #0]
90001a9a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001a9c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001a9e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001aa0:	495f      	ldr	r1, [pc, #380]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001aa2:	683b      	ldr	r3, [r7, #0]
90001aa4:	202c      	movs	r0, #44	@ 0x2c
90001aa6:	fb00 f303 	mul.w	r3, r0, r3
90001aaa:	440b      	add	r3, r1
90001aac:	3328      	adds	r3, #40	@ 0x28
90001aae:	681b      	ldr	r3, [r3, #0]
90001ab0:	3303      	adds	r3, #3
90001ab2:	69f9      	ldr	r1, [r7, #28]
90001ab4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001ab8:	1ad3      	subs	r3, r2, r3
90001aba:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001abc:	4a58      	ldr	r2, [pc, #352]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001abe:	683b      	ldr	r3, [r7, #0]
90001ac0:	212c      	movs	r1, #44	@ 0x2c
90001ac2:	fb01 f303 	mul.w	r3, r1, r3
90001ac6:	4413      	add	r3, r2
90001ac8:	3310      	adds	r3, #16
90001aca:	681b      	ldr	r3, [r3, #0]
90001acc:	4618      	mov	r0, r3
90001ace:	4a54      	ldr	r2, [pc, #336]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ad0:	683b      	ldr	r3, [r7, #0]
90001ad2:	212c      	movs	r1, #44	@ 0x2c
90001ad4:	fb01 f303 	mul.w	r3, r1, r3
90001ad8:	4413      	add	r3, r2
90001ada:	3320      	adds	r3, #32
90001adc:	681b      	ldr	r3, [r3, #0]
90001ade:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001ae0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001ae2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001ae4:	494e      	ldr	r1, [pc, #312]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ae6:	683b      	ldr	r3, [r7, #0]
90001ae8:	202c      	movs	r0, #44	@ 0x2c
90001aea:	fb00 f303 	mul.w	r3, r0, r3
90001aee:	440b      	add	r3, r1
90001af0:	3328      	adds	r3, #40	@ 0x28
90001af2:	681b      	ldr	r3, [r3, #0]
90001af4:	3304      	adds	r3, #4
90001af6:	69f9      	ldr	r1, [r7, #28]
90001af8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001afc:	1ad3      	subs	r3, r2, r3
90001afe:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001b00:	4a47      	ldr	r2, [pc, #284]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b02:	683b      	ldr	r3, [r7, #0]
90001b04:	212c      	movs	r1, #44	@ 0x2c
90001b06:	fb01 f303 	mul.w	r3, r1, r3
90001b0a:	4413      	add	r3, r2
90001b0c:	3320      	adds	r3, #32
90001b0e:	681b      	ldr	r3, [r3, #0]
90001b10:	4618      	mov	r0, r3
90001b12:	4a43      	ldr	r2, [pc, #268]	@ (90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b14:	683b      	ldr	r3, [r7, #0]
90001b16:	212c      	movs	r1, #44	@ 0x2c
90001b18:	fb01 f303 	mul.w	r3, r1, r3
90001b1c:	4413      	add	r3, r2
90001b1e:	3314      	adds	r3, #20
90001b20:	681b      	ldr	r3, [r3, #0]
90001b22:	4403      	add	r3, r0
90001b24:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001b28:	2b00      	cmp	r3, #0
90001b2a:	dc01      	bgt.n	90001b30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001b2c:	2300      	movs	r3, #0
90001b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b32:	2b00      	cmp	r3, #0
90001b34:	dc01      	bgt.n	90001b3a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001b36:	2300      	movs	r3, #0
90001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001b3a:	2300      	movs	r3, #0
90001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
90001b3e:	e062      	b.n	90001c06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001b40:	2300      	movs	r3, #0
90001b42:	627b      	str	r3, [r7, #36]	@ 0x24
90001b44:	e059      	b.n	90001bfa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001b48:	3301      	adds	r3, #1
90001b4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001b4c:	3201      	adds	r2, #1
90001b4e:	fb03 f202 	mul.w	r2, r3, r2
90001b52:	69fb      	ldr	r3, [r7, #28]
90001b54:	fb02 f303 	mul.w	r3, r2, r3
90001b58:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001b5a:	693b      	ldr	r3, [r7, #16]
90001b5c:	68fa      	ldr	r2, [r7, #12]
90001b5e:	429a      	cmp	r2, r3
90001b60:	d348      	bcc.n	90001bf4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001b62:	2300      	movs	r3, #0
90001b64:	623b      	str	r3, [r7, #32]
90001b66:	e042      	b.n	90001bee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001b6a:	3301      	adds	r3, #1
90001b6c:	6a3a      	ldr	r2, [r7, #32]
90001b6e:	fb03 f202 	mul.w	r2, r3, r2
90001b72:	69fb      	ldr	r3, [r7, #28]
90001b74:	fb02 f303 	mul.w	r3, r2, r3
90001b78:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001b7c:	68ba      	ldr	r2, [r7, #8]
90001b7e:	429a      	cmp	r2, r3
90001b80:	d332      	bcc.n	90001be8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b84:	68ba      	ldr	r2, [r7, #8]
90001b86:	429a      	cmp	r2, r3
90001b88:	d82e      	bhi.n	90001be8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001b8e:	429a      	cmp	r2, r3
90001b90:	d02a      	beq.n	90001be8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001b92:	4b24      	ldr	r3, [pc, #144]	@ (90001c24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001b94:	681a      	ldr	r2, [r3, #0]
90001b96:	4924      	ldr	r1, [pc, #144]	@ (90001c28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001b98:	4613      	mov	r3, r2
90001b9a:	009b      	lsls	r3, r3, #2
90001b9c:	4413      	add	r3, r2
90001b9e:	009b      	lsls	r3, r3, #2
90001ba0:	440b      	add	r3, r1
90001ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001ba4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001ba6:	4b1f      	ldr	r3, [pc, #124]	@ (90001c24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001ba8:	681a      	ldr	r2, [r3, #0]
90001baa:	491f      	ldr	r1, [pc, #124]	@ (90001c28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001bac:	4613      	mov	r3, r2
90001bae:	009b      	lsls	r3, r3, #2
90001bb0:	4413      	add	r3, r2
90001bb2:	009b      	lsls	r3, r3, #2
90001bb4:	440b      	add	r3, r1
90001bb6:	3304      	adds	r3, #4
90001bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001bba:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001bbc:	4b19      	ldr	r3, [pc, #100]	@ (90001c24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bbe:	681a      	ldr	r2, [r3, #0]
90001bc0:	4919      	ldr	r1, [pc, #100]	@ (90001c28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001bc2:	4613      	mov	r3, r2
90001bc4:	009b      	lsls	r3, r3, #2
90001bc6:	4413      	add	r3, r2
90001bc8:	009b      	lsls	r3, r3, #2
90001bca:	440b      	add	r3, r1
90001bcc:	3308      	adds	r3, #8
90001bce:	6a3a      	ldr	r2, [r7, #32]
90001bd0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001bd4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001bd6:	4b13      	ldr	r3, [pc, #76]	@ (90001c24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bd8:	681b      	ldr	r3, [r3, #0]
90001bda:	3301      	adds	r3, #1
90001bdc:	4a11      	ldr	r2, [pc, #68]	@ (90001c24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001bde:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001be0:	4b10      	ldr	r3, [pc, #64]	@ (90001c24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001be2:	681b      	ldr	r3, [r3, #0]
90001be4:	2b7f      	cmp	r3, #127	@ 0x7f
90001be6:	d812      	bhi.n	90001c0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001be8:	6a3b      	ldr	r3, [r7, #32]
90001bea:	3301      	adds	r3, #1
90001bec:	623b      	str	r3, [r7, #32]
90001bee:	6a3b      	ldr	r3, [r7, #32]
90001bf0:	2b0f      	cmp	r3, #15
90001bf2:	d9b9      	bls.n	90001b68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001bf6:	3301      	adds	r3, #1
90001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
90001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001bfc:	2b0f      	cmp	r3, #15
90001bfe:	d9a2      	bls.n	90001b46 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c02:	3301      	adds	r3, #1
90001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
90001c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c08:	2b0f      	cmp	r3, #15
90001c0a:	d999      	bls.n	90001b40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001c0c:	e000      	b.n	90001c10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001c0e:	bf00      	nop
          }
        }
      }
    }
  }
}
90001c10:	373c      	adds	r7, #60	@ 0x3c
90001c12:	46bd      	mov	sp, r7
90001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
90001c18:	4770      	bx	lr
90001c1a:	bf00      	nop
90001c1c:	3b9aca00 	.word	0x3b9aca00
90001c20:	9000d680 	.word	0x9000d680
90001c24:	20001040 	.word	0x20001040
90001c28:	20000640 	.word	0x20000640

90001c2c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001c2c:	b480      	push	{r7}
90001c2e:	b093      	sub	sp, #76	@ 0x4c
90001c30:	af00      	add	r7, sp, #0
90001c32:	6078      	str	r0, [r7, #4]
90001c34:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001c36:	f04f 33ff 	mov.w	r3, #4294967295
90001c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001c3c:	687b      	ldr	r3, [r7, #4]
90001c3e:	085a      	lsrs	r2, r3, #1
90001c40:	4b7a      	ldr	r3, [pc, #488]	@ (90001e2c <I2C_Compute_SCLL_SCLH+0x200>)
90001c42:	4413      	add	r3, r2
90001c44:	687a      	ldr	r2, [r7, #4]
90001c46:	fbb3 f3f2 	udiv	r3, r3, r2
90001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001c4c:	4a78      	ldr	r2, [pc, #480]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001c4e:	683b      	ldr	r3, [r7, #0]
90001c50:	212c      	movs	r1, #44	@ 0x2c
90001c52:	fb01 f303 	mul.w	r3, r1, r3
90001c56:	4413      	add	r3, r2
90001c58:	681b      	ldr	r3, [r3, #0]
90001c5a:	085a      	lsrs	r2, r3, #1
90001c5c:	4b73      	ldr	r3, [pc, #460]	@ (90001e2c <I2C_Compute_SCLL_SCLH+0x200>)
90001c5e:	4413      	add	r3, r2
90001c60:	4973      	ldr	r1, [pc, #460]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001c62:	683a      	ldr	r2, [r7, #0]
90001c64:	202c      	movs	r0, #44	@ 0x2c
90001c66:	fb00 f202 	mul.w	r2, r0, r2
90001c6a:	440a      	add	r2, r1
90001c6c:	6812      	ldr	r2, [r2, #0]
90001c6e:	fbb3 f3f2 	udiv	r3, r3, r2
90001c72:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001c74:	2332      	movs	r3, #50	@ 0x32
90001c76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001c78:	4a6d      	ldr	r2, [pc, #436]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001c7a:	683b      	ldr	r3, [r7, #0]
90001c7c:	212c      	movs	r1, #44	@ 0x2c
90001c7e:	fb01 f303 	mul.w	r3, r1, r3
90001c82:	4413      	add	r3, r2
90001c84:	3328      	adds	r3, #40	@ 0x28
90001c86:	681a      	ldr	r2, [r3, #0]
90001c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001c8a:	fb02 f303 	mul.w	r3, r2, r3
90001c8e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001c90:	4a67      	ldr	r2, [pc, #412]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001c92:	683b      	ldr	r3, [r7, #0]
90001c94:	212c      	movs	r1, #44	@ 0x2c
90001c96:	fb01 f303 	mul.w	r3, r1, r3
90001c9a:	4413      	add	r3, r2
90001c9c:	3304      	adds	r3, #4
90001c9e:	681b      	ldr	r3, [r3, #0]
90001ca0:	4a62      	ldr	r2, [pc, #392]	@ (90001e2c <I2C_Compute_SCLL_SCLH+0x200>)
90001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
90001ca6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001ca8:	4a61      	ldr	r2, [pc, #388]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001caa:	683b      	ldr	r3, [r7, #0]
90001cac:	212c      	movs	r1, #44	@ 0x2c
90001cae:	fb01 f303 	mul.w	r3, r1, r3
90001cb2:	4413      	add	r3, r2
90001cb4:	3308      	adds	r3, #8
90001cb6:	681b      	ldr	r3, [r3, #0]
90001cb8:	4a5c      	ldr	r2, [pc, #368]	@ (90001e2c <I2C_Compute_SCLL_SCLH+0x200>)
90001cba:	fbb2 f3f3 	udiv	r3, r2, r3
90001cbe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001cc2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001cc4:	2300      	movs	r3, #0
90001cc6:	637b      	str	r3, [r7, #52]	@ 0x34
90001cc8:	e0a3      	b.n	90001e12 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001cca:	495a      	ldr	r1, [pc, #360]	@ (90001e34 <I2C_Compute_SCLL_SCLH+0x208>)
90001ccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001cce:	4613      	mov	r3, r2
90001cd0:	009b      	lsls	r3, r3, #2
90001cd2:	4413      	add	r3, r2
90001cd4:	009b      	lsls	r3, r3, #2
90001cd6:	440b      	add	r3, r1
90001cd8:	681b      	ldr	r3, [r3, #0]
90001cda:	1c5a      	adds	r2, r3, #1
90001cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001cde:	fb02 f303 	mul.w	r3, r2, r3
90001ce2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001ce4:	2300      	movs	r3, #0
90001ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001ce8:	e08c      	b.n	90001e04 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001cec:	6a3b      	ldr	r3, [r7, #32]
90001cee:	441a      	add	r2, r3
90001cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001cf2:	3301      	adds	r3, #1
90001cf4:	6979      	ldr	r1, [r7, #20]
90001cf6:	fb03 f101 	mul.w	r1, r3, r1
90001cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001cfc:	005b      	lsls	r3, r3, #1
90001cfe:	440b      	add	r3, r1
90001d00:	4413      	add	r3, r2
90001d02:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001d04:	4a4a      	ldr	r2, [pc, #296]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001d06:	683b      	ldr	r3, [r7, #0]
90001d08:	212c      	movs	r1, #44	@ 0x2c
90001d0a:	fb01 f303 	mul.w	r3, r1, r3
90001d0e:	4413      	add	r3, r2
90001d10:	3318      	adds	r3, #24
90001d12:	681b      	ldr	r3, [r3, #0]
90001d14:	693a      	ldr	r2, [r7, #16]
90001d16:	429a      	cmp	r2, r3
90001d18:	d971      	bls.n	90001dfe <I2C_Compute_SCLL_SCLH+0x1d2>
90001d1a:	693a      	ldr	r2, [r7, #16]
90001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001d1e:	1ad2      	subs	r2, r2, r3
90001d20:	6a3b      	ldr	r3, [r7, #32]
90001d22:	1ad3      	subs	r3, r2, r3
90001d24:	089b      	lsrs	r3, r3, #2
90001d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001d28:	429a      	cmp	r2, r3
90001d2a:	d268      	bcs.n	90001dfe <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001d2c:	2300      	movs	r3, #0
90001d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
90001d30:	e062      	b.n	90001df8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001d34:	6a3b      	ldr	r3, [r7, #32]
90001d36:	441a      	add	r2, r3
90001d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001d3a:	3301      	adds	r3, #1
90001d3c:	6979      	ldr	r1, [r7, #20]
90001d3e:	fb03 f101 	mul.w	r1, r3, r1
90001d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d44:	005b      	lsls	r3, r3, #1
90001d46:	440b      	add	r3, r1
90001d48:	4413      	add	r3, r2
90001d4a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001d4c:	693a      	ldr	r2, [r7, #16]
90001d4e:	68fb      	ldr	r3, [r7, #12]
90001d50:	441a      	add	r2, r3
90001d52:	4937      	ldr	r1, [pc, #220]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001d54:	683b      	ldr	r3, [r7, #0]
90001d56:	202c      	movs	r0, #44	@ 0x2c
90001d58:	fb00 f303 	mul.w	r3, r0, r3
90001d5c:	440b      	add	r3, r1
90001d5e:	3320      	adds	r3, #32
90001d60:	681b      	ldr	r3, [r3, #0]
90001d62:	441a      	add	r2, r3
90001d64:	4932      	ldr	r1, [pc, #200]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001d66:	683b      	ldr	r3, [r7, #0]
90001d68:	202c      	movs	r0, #44	@ 0x2c
90001d6a:	fb00 f303 	mul.w	r3, r0, r3
90001d6e:	440b      	add	r3, r1
90001d70:	3324      	adds	r3, #36	@ 0x24
90001d72:	681b      	ldr	r3, [r3, #0]
90001d74:	4413      	add	r3, r2
90001d76:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001d78:	68ba      	ldr	r2, [r7, #8]
90001d7a:	69bb      	ldr	r3, [r7, #24]
90001d7c:	429a      	cmp	r2, r3
90001d7e:	d338      	bcc.n	90001df2 <I2C_Compute_SCLL_SCLH+0x1c6>
90001d80:	68ba      	ldr	r2, [r7, #8]
90001d82:	69fb      	ldr	r3, [r7, #28]
90001d84:	429a      	cmp	r2, r3
90001d86:	d834      	bhi.n	90001df2 <I2C_Compute_SCLL_SCLH+0x1c6>
90001d88:	4a29      	ldr	r2, [pc, #164]	@ (90001e30 <I2C_Compute_SCLL_SCLH+0x204>)
90001d8a:	683b      	ldr	r3, [r7, #0]
90001d8c:	212c      	movs	r1, #44	@ 0x2c
90001d8e:	fb01 f303 	mul.w	r3, r1, r3
90001d92:	4413      	add	r3, r2
90001d94:	331c      	adds	r3, #28
90001d96:	681b      	ldr	r3, [r3, #0]
90001d98:	68fa      	ldr	r2, [r7, #12]
90001d9a:	429a      	cmp	r2, r3
90001d9c:	d329      	bcc.n	90001df2 <I2C_Compute_SCLL_SCLH+0x1c6>
90001d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001da0:	68fb      	ldr	r3, [r7, #12]
90001da2:	429a      	cmp	r2, r3
90001da4:	d225      	bcs.n	90001df2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001da6:	68ba      	ldr	r2, [r7, #8]
90001da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001daa:	1ad3      	subs	r3, r2, r3
90001dac:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001db0:	2b00      	cmp	r3, #0
90001db2:	da02      	bge.n	90001dba <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001db6:	425b      	negs	r3, r3
90001db8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001dbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001dbe:	429a      	cmp	r2, r3
90001dc0:	d917      	bls.n	90001df2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001dc4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001dc6:	491b      	ldr	r1, [pc, #108]	@ (90001e34 <I2C_Compute_SCLL_SCLH+0x208>)
90001dc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001dca:	4613      	mov	r3, r2
90001dcc:	009b      	lsls	r3, r3, #2
90001dce:	4413      	add	r3, r2
90001dd0:	009b      	lsls	r3, r3, #2
90001dd2:	440b      	add	r3, r1
90001dd4:	3310      	adds	r3, #16
90001dd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001dd8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001dda:	4916      	ldr	r1, [pc, #88]	@ (90001e34 <I2C_Compute_SCLL_SCLH+0x208>)
90001ddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001dde:	4613      	mov	r3, r2
90001de0:	009b      	lsls	r3, r3, #2
90001de2:	4413      	add	r3, r2
90001de4:	009b      	lsls	r3, r3, #2
90001de6:	440b      	add	r3, r1
90001de8:	330c      	adds	r3, #12
90001dea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001dec:	601a      	str	r2, [r3, #0]
              ret = count;
90001dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001df0:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001df4:	3301      	adds	r3, #1
90001df6:	63bb      	str	r3, [r7, #56]	@ 0x38
90001df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001dfa:	2bff      	cmp	r3, #255	@ 0xff
90001dfc:	d999      	bls.n	90001d32 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001e00:	3301      	adds	r3, #1
90001e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001e06:	2bff      	cmp	r3, #255	@ 0xff
90001e08:	f67f af6f 	bls.w	90001cea <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001e0e:	3301      	adds	r3, #1
90001e10:	637b      	str	r3, [r7, #52]	@ 0x34
90001e12:	4b09      	ldr	r3, [pc, #36]	@ (90001e38 <I2C_Compute_SCLL_SCLH+0x20c>)
90001e14:	681b      	ldr	r3, [r3, #0]
90001e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001e18:	429a      	cmp	r2, r3
90001e1a:	f4ff af56 	bcc.w	90001cca <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001e20:	4618      	mov	r0, r3
90001e22:	374c      	adds	r7, #76	@ 0x4c
90001e24:	46bd      	mov	sp, r7
90001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e2a:	4770      	bx	lr
90001e2c:	3b9aca00 	.word	0x3b9aca00
90001e30:	9000d680 	.word	0x9000d680
90001e34:	20000640 	.word	0x20000640
90001e38:	20001040 	.word	0x20001040

90001e3c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001e3c:	b580      	push	{r7, lr}
90001e3e:	b08a      	sub	sp, #40	@ 0x28
90001e40:	af00      	add	r7, sp, #0
90001e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001e44:	4b31      	ldr	r3, [pc, #196]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e4a:	4a30      	ldr	r2, [pc, #192]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001e4c:	f043 0308 	orr.w	r3, r3, #8
90001e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001e54:	4b2d      	ldr	r3, [pc, #180]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e5a:	f003 0308 	and.w	r3, r3, #8
90001e5e:	613b      	str	r3, [r7, #16]
90001e60:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001e62:	4b2a      	ldr	r3, [pc, #168]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e68:	4a28      	ldr	r2, [pc, #160]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001e6a:	f043 0308 	orr.w	r3, r3, #8
90001e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001e72:	4b26      	ldr	r3, [pc, #152]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e78:	f003 0308 	and.w	r3, r3, #8
90001e7c:	60fb      	str	r3, [r7, #12]
90001e7e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001e84:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001e86:	2312      	movs	r3, #18
90001e88:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001e8a:	2300      	movs	r3, #0
90001e8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001e8e:	2302      	movs	r3, #2
90001e90:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001e92:	2304      	movs	r3, #4
90001e94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001e96:	f107 0314 	add.w	r3, r7, #20
90001e9a:	4619      	mov	r1, r3
90001e9c:	481c      	ldr	r0, [pc, #112]	@ (90001f10 <I2C4_MspInit+0xd4>)
90001e9e:	f001 fe71 	bl	90003b84 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001ea6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001ea8:	2312      	movs	r3, #18
90001eaa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001eac:	2300      	movs	r3, #0
90001eae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001eb0:	2302      	movs	r3, #2
90001eb2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001eb4:	2304      	movs	r3, #4
90001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001eb8:	f107 0314 	add.w	r3, r7, #20
90001ebc:	4619      	mov	r1, r3
90001ebe:	4814      	ldr	r0, [pc, #80]	@ (90001f10 <I2C4_MspInit+0xd4>)
90001ec0:	f001 fe60 	bl	90003b84 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001ec4:	4b11      	ldr	r3, [pc, #68]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001eca:	4a10      	ldr	r2, [pc, #64]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001ed0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001ed4:	4b0d      	ldr	r3, [pc, #52]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001ede:	60bb      	str	r3, [r7, #8]
90001ee0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001ee8:	4a08      	ldr	r2, [pc, #32]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001eee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001ef2:	4b06      	ldr	r3, [pc, #24]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001ef8:	4a04      	ldr	r2, [pc, #16]	@ (90001f0c <I2C4_MspInit+0xd0>)
90001efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001efe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001f02:	bf00      	nop
90001f04:	3728      	adds	r7, #40	@ 0x28
90001f06:	46bd      	mov	sp, r7
90001f08:	bd80      	pop	{r7, pc}
90001f0a:	bf00      	nop
90001f0c:	58024400 	.word	0x58024400
90001f10:	58020c00 	.word	0x58020c00

90001f14 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001f14:	b580      	push	{r7, lr}
90001f16:	b088      	sub	sp, #32
90001f18:	af04      	add	r7, sp, #16
90001f1a:	607b      	str	r3, [r7, #4]
90001f1c:	4603      	mov	r3, r0
90001f1e:	81fb      	strh	r3, [r7, #14]
90001f20:	460b      	mov	r3, r1
90001f22:	81bb      	strh	r3, [r7, #12]
90001f24:	4613      	mov	r3, r2
90001f26:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001f28:	8978      	ldrh	r0, [r7, #10]
90001f2a:	89ba      	ldrh	r2, [r7, #12]
90001f2c:	89f9      	ldrh	r1, [r7, #14]
90001f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001f32:	9302      	str	r3, [sp, #8]
90001f34:	8b3b      	ldrh	r3, [r7, #24]
90001f36:	9301      	str	r3, [sp, #4]
90001f38:	687b      	ldr	r3, [r7, #4]
90001f3a:	9300      	str	r3, [sp, #0]
90001f3c:	4603      	mov	r3, r0
90001f3e:	4807      	ldr	r0, [pc, #28]	@ (90001f5c <I2C4_ReadReg+0x48>)
90001f40:	f003 fe4e 	bl	90005be0 <HAL_I2C_Mem_Read>
90001f44:	4603      	mov	r3, r0
90001f46:	2b00      	cmp	r3, #0
90001f48:	d101      	bne.n	90001f4e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001f4a:	2300      	movs	r3, #0
90001f4c:	e001      	b.n	90001f52 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001f4e:	f06f 0307 	mvn.w	r3, #7
}
90001f52:	4618      	mov	r0, r3
90001f54:	3710      	adds	r7, #16
90001f56:	46bd      	mov	sp, r7
90001f58:	bd80      	pop	{r7, pc}
90001f5a:	bf00      	nop
90001f5c:	20001044 	.word	0x20001044

90001f60 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001f60:	b580      	push	{r7, lr}
90001f62:	b084      	sub	sp, #16
90001f64:	af02      	add	r7, sp, #8
90001f66:	6078      	str	r0, [r7, #4]
90001f68:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001f6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001f6e:	9300      	str	r3, [sp, #0]
90001f70:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001f74:	2200      	movs	r2, #0
90001f76:	6839      	ldr	r1, [r7, #0]
90001f78:	6878      	ldr	r0, [r7, #4]
90001f7a:	f000 f805 	bl	90001f88 <BSP_LCD_InitEx>
90001f7e:	4603      	mov	r3, r0
}
90001f80:	4618      	mov	r0, r3
90001f82:	3708      	adds	r7, #8
90001f84:	46bd      	mov	sp, r7
90001f86:	bd80      	pop	{r7, pc}

90001f88 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001f88:	b580      	push	{r7, lr}
90001f8a:	b09e      	sub	sp, #120	@ 0x78
90001f8c:	af00      	add	r7, sp, #0
90001f8e:	60f8      	str	r0, [r7, #12]
90001f90:	60b9      	str	r1, [r7, #8]
90001f92:	607a      	str	r2, [r7, #4]
90001f94:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001f96:	2300      	movs	r3, #0
90001f98:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001f9a:	2300      	movs	r3, #0
90001f9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001f9e:	68bb      	ldr	r3, [r7, #8]
90001fa0:	2b01      	cmp	r3, #1
90001fa2:	d808      	bhi.n	90001fb6 <BSP_LCD_InitEx+0x2e>
90001fa4:	68fb      	ldr	r3, [r7, #12]
90001fa6:	2b00      	cmp	r3, #0
90001fa8:	d105      	bne.n	90001fb6 <BSP_LCD_InitEx+0x2e>
90001faa:	687b      	ldr	r3, [r7, #4]
90001fac:	2b02      	cmp	r3, #2
90001fae:	d006      	beq.n	90001fbe <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001fb0:	687b      	ldr	r3, [r7, #4]
90001fb2:	2b00      	cmp	r3, #0
90001fb4:	d003      	beq.n	90001fbe <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001fb6:	f06f 0301 	mvn.w	r3, #1
90001fba:	677b      	str	r3, [r7, #116]	@ 0x74
90001fbc:	e0a8      	b.n	90002110 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001fbe:	687b      	ldr	r3, [r7, #4]
90001fc0:	2b02      	cmp	r3, #2
90001fc2:	d109      	bne.n	90001fd8 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001fc4:	2302      	movs	r3, #2
90001fc6:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001fc8:	4a54      	ldr	r2, [pc, #336]	@ (9000211c <BSP_LCD_InitEx+0x194>)
90001fca:	68fb      	ldr	r3, [r7, #12]
90001fcc:	015b      	lsls	r3, r3, #5
90001fce:	4413      	add	r3, r2
90001fd0:	3310      	adds	r3, #16
90001fd2:	2202      	movs	r2, #2
90001fd4:	601a      	str	r2, [r3, #0]
90001fd6:	e008      	b.n	90001fea <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001fd8:	2300      	movs	r3, #0
90001fda:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001fdc:	4a4f      	ldr	r2, [pc, #316]	@ (9000211c <BSP_LCD_InitEx+0x194>)
90001fde:	68fb      	ldr	r3, [r7, #12]
90001fe0:	015b      	lsls	r3, r3, #5
90001fe2:	4413      	add	r3, r2
90001fe4:	3310      	adds	r3, #16
90001fe6:	2204      	movs	r2, #4
90001fe8:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001fea:	4a4c      	ldr	r2, [pc, #304]	@ (9000211c <BSP_LCD_InitEx+0x194>)
90001fec:	68fb      	ldr	r3, [r7, #12]
90001fee:	015b      	lsls	r3, r3, #5
90001ff0:	4413      	add	r3, r2
90001ff2:	330c      	adds	r3, #12
90001ff4:	687a      	ldr	r2, [r7, #4]
90001ff6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001ff8:	4a48      	ldr	r2, [pc, #288]	@ (9000211c <BSP_LCD_InitEx+0x194>)
90001ffa:	68fb      	ldr	r3, [r7, #12]
90001ffc:	015b      	lsls	r3, r3, #5
90001ffe:	4413      	add	r3, r2
90002000:	683a      	ldr	r2, [r7, #0]
90002002:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90002004:	4a45      	ldr	r2, [pc, #276]	@ (9000211c <BSP_LCD_InitEx+0x194>)
90002006:	68fb      	ldr	r3, [r7, #12]
90002008:	015b      	lsls	r3, r3, #5
9000200a:	4413      	add	r3, r2
9000200c:	3304      	adds	r3, #4
9000200e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002012:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90002014:	4b42      	ldr	r3, [pc, #264]	@ (90002120 <BSP_LCD_InitEx+0x198>)
90002016:	4a43      	ldr	r2, [pc, #268]	@ (90002124 <BSP_LCD_InitEx+0x19c>)
90002018:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
9000201a:	4b43      	ldr	r3, [pc, #268]	@ (90002128 <BSP_LCD_InitEx+0x1a0>)
9000201c:	4a43      	ldr	r2, [pc, #268]	@ (9000212c <BSP_LCD_InitEx+0x1a4>)
9000201e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90002020:	483f      	ldr	r0, [pc, #252]	@ (90002120 <BSP_LCD_InitEx+0x198>)
90002022:	f000 fcf9 	bl	90002a18 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90002026:	4840      	ldr	r0, [pc, #256]	@ (90002128 <BSP_LCD_InitEx+0x1a0>)
90002028:	f000 fdc2 	bl	90002bb0 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
9000202c:	4b40      	ldr	r3, [pc, #256]	@ (90002130 <BSP_LCD_InitEx+0x1a8>)
9000202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90002030:	4b40      	ldr	r3, [pc, #256]	@ (90002134 <BSP_LCD_InitEx+0x1ac>)
90002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90002034:	2370      	movs	r3, #112	@ 0x70
90002036:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90002038:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
9000203c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002040:	4611      	mov	r1, r2
90002042:	4618      	mov	r0, r3
90002044:	f7ff fa16 	bl	90001474 <FT5336_RegisterBusIO>
90002048:	4603      	mov	r3, r0
9000204a:	2b00      	cmp	r3, #0
9000204c:	da03      	bge.n	90002056 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000204e:	f06f 0304 	mvn.w	r3, #4
90002052:	677b      	str	r3, [r7, #116]	@ 0x74
90002054:	e02b      	b.n	900020ae <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90002056:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
9000205a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000205e:	4611      	mov	r1, r2
90002060:	4618      	mov	r0, r3
90002062:	f7ff fa49 	bl	900014f8 <FT5336_ReadID>
90002066:	4603      	mov	r3, r0
90002068:	2b00      	cmp	r3, #0
9000206a:	da03      	bge.n	90002074 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000206c:	f06f 0304 	mvn.w	r3, #4
90002070:	677b      	str	r3, [r7, #116]	@ 0x74
90002072:	e01c      	b.n	900020ae <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90002074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90002076:	2b51      	cmp	r3, #81	@ 0x51
90002078:	d003      	beq.n	90002082 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
9000207a:	f06f 0306 	mvn.w	r3, #6
9000207e:	677b      	str	r3, [r7, #116]	@ 0x74
90002080:	e015      	b.n	900020ae <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90002082:	4827      	ldr	r0, [pc, #156]	@ (90002120 <BSP_LCD_InitEx+0x198>)
90002084:	f7fe ff04 	bl	90000e90 <MX_LTDC_ClockConfig>
90002088:	4603      	mov	r3, r0
9000208a:	2b00      	cmp	r3, #0
9000208c:	d003      	beq.n	90002096 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
9000208e:	f06f 0303 	mvn.w	r3, #3
90002092:	677b      	str	r3, [r7, #116]	@ 0x74
90002094:	e00b      	b.n	900020ae <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90002096:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
9000209a:	6839      	ldr	r1, [r7, #0]
9000209c:	4820      	ldr	r0, [pc, #128]	@ (90002120 <BSP_LCD_InitEx+0x198>)
9000209e:	f000 f84d 	bl	9000213c <MX_LTDC_Init>
900020a2:	4603      	mov	r3, r0
900020a4:	2b00      	cmp	r3, #0
900020a6:	d002      	beq.n	900020ae <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900020a8:	f06f 0303 	mvn.w	r3, #3
900020ac:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
900020ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
900020b0:	2b00      	cmp	r3, #0
900020b2:	d12d      	bne.n	90002110 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900020b4:	2000      	movs	r0, #0
900020b6:	f000 fe0d 	bl	90002cd4 <BSP_SDRAM_Init>
900020ba:	4603      	mov	r3, r0
900020bc:	2b00      	cmp	r3, #0
900020be:	d002      	beq.n	900020c6 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
900020c0:	f06f 0303 	mvn.w	r3, #3
900020c4:	e025      	b.n	90002112 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
900020c6:	2300      	movs	r3, #0
900020c8:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
900020ca:	683b      	ldr	r3, [r7, #0]
900020cc:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
900020ce:	2300      	movs	r3, #0
900020d0:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
900020d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
900020d6:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
900020d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
900020da:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
900020dc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
900020e2:	f107 0314 	add.w	r3, r7, #20
900020e6:	461a      	mov	r2, r3
900020e8:	2100      	movs	r1, #0
900020ea:	480d      	ldr	r0, [pc, #52]	@ (90002120 <BSP_LCD_InitEx+0x198>)
900020ec:	f000 f872 	bl	900021d4 <MX_LTDC_ConfigLayer>
900020f0:	4603      	mov	r3, r0
900020f2:	2b00      	cmp	r3, #0
900020f4:	d002      	beq.n	900020fc <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
900020f6:	f06f 0303 	mvn.w	r3, #3
900020fa:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
900020fc:	480e      	ldr	r0, [pc, #56]	@ (90002138 <BSP_LCD_InitEx+0x1b0>)
900020fe:	f000 fdbf 	bl	90002c80 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90002102:	4a06      	ldr	r2, [pc, #24]	@ (9000211c <BSP_LCD_InitEx+0x194>)
90002104:	68fb      	ldr	r3, [r7, #12]
90002106:	015b      	lsls	r3, r3, #5
90002108:	4413      	add	r3, r2
9000210a:	3318      	adds	r3, #24
9000210c:	2201      	movs	r2, #1
9000210e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90002110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90002112:	4618      	mov	r0, r3
90002114:	3778      	adds	r7, #120	@ 0x78
90002116:	46bd      	mov	sp, r7
90002118:	bd80      	pop	{r7, pc}
9000211a:	bf00      	nop
9000211c:	200011f4 	.word	0x200011f4
90002120:	2000114c 	.word	0x2000114c
90002124:	50001000 	.word	0x50001000
90002128:	200010e4 	.word	0x200010e4
9000212c:	52001000 	.word	0x52001000
90002130:	900017fd 	.word	0x900017fd
90002134:	900018f5 	.word	0x900018f5
90002138:	20001098 	.word	0x20001098

9000213c <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
9000213c:	b580      	push	{r7, lr}
9000213e:	b084      	sub	sp, #16
90002140:	af00      	add	r7, sp, #0
90002142:	60f8      	str	r0, [r7, #12]
90002144:	60b9      	str	r1, [r7, #8]
90002146:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90002148:	68fb      	ldr	r3, [r7, #12]
9000214a:	4a21      	ldr	r2, [pc, #132]	@ (900021d0 <MX_LTDC_Init+0x94>)
9000214c:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
9000214e:	68fb      	ldr	r3, [r7, #12]
90002150:	2200      	movs	r2, #0
90002152:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90002154:	68fb      	ldr	r3, [r7, #12]
90002156:	2200      	movs	r2, #0
90002158:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
9000215a:	68fb      	ldr	r3, [r7, #12]
9000215c:	2200      	movs	r2, #0
9000215e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90002160:	68fb      	ldr	r3, [r7, #12]
90002162:	2200      	movs	r2, #0
90002164:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90002166:	68fb      	ldr	r3, [r7, #12]
90002168:	2228      	movs	r2, #40	@ 0x28
9000216a:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
9000216c:	68fb      	ldr	r3, [r7, #12]
9000216e:	222a      	movs	r2, #42	@ 0x2a
90002170:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90002172:	68bb      	ldr	r3, [r7, #8]
90002174:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002178:	68fb      	ldr	r3, [r7, #12]
9000217a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
9000217c:	68bb      	ldr	r3, [r7, #8]
9000217e:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
90002182:	68fb      	ldr	r3, [r7, #12]
90002184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90002186:	68fb      	ldr	r3, [r7, #12]
90002188:	2209      	movs	r2, #9
9000218a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
9000218c:	68fb      	ldr	r3, [r7, #12]
9000218e:	220b      	movs	r2, #11
90002190:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90002192:	687b      	ldr	r3, [r7, #4]
90002194:	f103 020b 	add.w	r2, r3, #11
90002198:	68fb      	ldr	r3, [r7, #12]
9000219a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
9000219c:	687b      	ldr	r3, [r7, #4]
9000219e:	f103 020d 	add.w	r2, r3, #13
900021a2:	68fb      	ldr	r3, [r7, #12]
900021a4:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
900021a6:	68fb      	ldr	r3, [r7, #12]
900021a8:	22ff      	movs	r2, #255	@ 0xff
900021aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
900021ae:	68fb      	ldr	r3, [r7, #12]
900021b0:	22ff      	movs	r2, #255	@ 0xff
900021b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
900021b6:	68fb      	ldr	r3, [r7, #12]
900021b8:	22ff      	movs	r2, #255	@ 0xff
900021ba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
900021be:	68f8      	ldr	r0, [r7, #12]
900021c0:	f004 f947 	bl	90006452 <HAL_LTDC_Init>
900021c4:	4603      	mov	r3, r0
}
900021c6:	4618      	mov	r0, r3
900021c8:	3710      	adds	r7, #16
900021ca:	46bd      	mov	sp, r7
900021cc:	bd80      	pop	{r7, pc}
900021ce:	bf00      	nop
900021d0:	50001000 	.word	0x50001000

900021d4 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
900021d4:	b580      	push	{r7, lr}
900021d6:	b092      	sub	sp, #72	@ 0x48
900021d8:	af00      	add	r7, sp, #0
900021da:	60f8      	str	r0, [r7, #12]
900021dc:	60b9      	str	r1, [r7, #8]
900021de:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
900021e0:	687b      	ldr	r3, [r7, #4]
900021e2:	681b      	ldr	r3, [r3, #0]
900021e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
900021e6:	687b      	ldr	r3, [r7, #4]
900021e8:	685b      	ldr	r3, [r3, #4]
900021ea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
900021ec:	687b      	ldr	r3, [r7, #4]
900021ee:	689b      	ldr	r3, [r3, #8]
900021f0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
900021f2:	687b      	ldr	r3, [r7, #4]
900021f4:	68db      	ldr	r3, [r3, #12]
900021f6:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
900021f8:	687b      	ldr	r3, [r7, #4]
900021fa:	691b      	ldr	r3, [r3, #16]
900021fc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
900021fe:	23ff      	movs	r3, #255	@ 0xff
90002200:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90002202:	2300      	movs	r3, #0
90002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90002206:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
9000220a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000220c:	2307      	movs	r3, #7
9000220e:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90002210:	687b      	ldr	r3, [r7, #4]
90002212:	695b      	ldr	r3, [r3, #20]
90002214:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90002216:	687b      	ldr	r3, [r7, #4]
90002218:	685a      	ldr	r2, [r3, #4]
9000221a:	687b      	ldr	r3, [r7, #4]
9000221c:	681b      	ldr	r3, [r3, #0]
9000221e:	1ad3      	subs	r3, r2, r3
90002220:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90002222:	687b      	ldr	r3, [r7, #4]
90002224:	68da      	ldr	r2, [r3, #12]
90002226:	687b      	ldr	r3, [r7, #4]
90002228:	689b      	ldr	r3, [r3, #8]
9000222a:	1ad3      	subs	r3, r2, r3
9000222c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
9000222e:	2300      	movs	r3, #0
90002230:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90002234:	2300      	movs	r3, #0
90002236:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
9000223a:	2300      	movs	r3, #0
9000223c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90002240:	f107 0314 	add.w	r3, r7, #20
90002244:	68ba      	ldr	r2, [r7, #8]
90002246:	4619      	mov	r1, r3
90002248:	68f8      	ldr	r0, [r7, #12]
9000224a:	f004 f9a9 	bl	900065a0 <HAL_LTDC_ConfigLayer>
9000224e:	4603      	mov	r3, r0
}
90002250:	4618      	mov	r0, r3
90002252:	3748      	adds	r7, #72	@ 0x48
90002254:	46bd      	mov	sp, r7
90002256:	bd80      	pop	{r7, pc}

90002258 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90002258:	b480      	push	{r7}
9000225a:	b085      	sub	sp, #20
9000225c:	af00      	add	r7, sp, #0
9000225e:	6078      	str	r0, [r7, #4]
90002260:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002262:	2300      	movs	r3, #0
90002264:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002266:	687b      	ldr	r3, [r7, #4]
90002268:	2b00      	cmp	r3, #0
9000226a:	d003      	beq.n	90002274 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000226c:	f06f 0301 	mvn.w	r3, #1
90002270:	60fb      	str	r3, [r7, #12]
90002272:	e007      	b.n	90002284 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002274:	4a07      	ldr	r2, [pc, #28]	@ (90002294 <BSP_LCD_GetPixelFormat+0x3c>)
90002276:	687b      	ldr	r3, [r7, #4]
90002278:	015b      	lsls	r3, r3, #5
9000227a:	4413      	add	r3, r2
9000227c:	330c      	adds	r3, #12
9000227e:	681a      	ldr	r2, [r3, #0]
90002280:	683b      	ldr	r3, [r7, #0]
90002282:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002284:	68fb      	ldr	r3, [r7, #12]
}
90002286:	4618      	mov	r0, r3
90002288:	3714      	adds	r7, #20
9000228a:	46bd      	mov	sp, r7
9000228c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002290:	4770      	bx	lr
90002292:	bf00      	nop
90002294:	200011f4 	.word	0x200011f4

90002298 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002298:	b480      	push	{r7}
9000229a:	b085      	sub	sp, #20
9000229c:	af00      	add	r7, sp, #0
9000229e:	6078      	str	r0, [r7, #4]
900022a0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900022a2:	2300      	movs	r3, #0
900022a4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900022a6:	687b      	ldr	r3, [r7, #4]
900022a8:	2b00      	cmp	r3, #0
900022aa:	d003      	beq.n	900022b4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900022ac:	f06f 0301 	mvn.w	r3, #1
900022b0:	60fb      	str	r3, [r7, #12]
900022b2:	e006      	b.n	900022c2 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
900022b4:	4a06      	ldr	r2, [pc, #24]	@ (900022d0 <BSP_LCD_SetActiveLayer+0x38>)
900022b6:	687b      	ldr	r3, [r7, #4]
900022b8:	015b      	lsls	r3, r3, #5
900022ba:	4413      	add	r3, r2
900022bc:	3308      	adds	r3, #8
900022be:	683a      	ldr	r2, [r7, #0]
900022c0:	601a      	str	r2, [r3, #0]
  }

  return ret;
900022c2:	68fb      	ldr	r3, [r7, #12]
}
900022c4:	4618      	mov	r0, r3
900022c6:	3714      	adds	r7, #20
900022c8:	46bd      	mov	sp, r7
900022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
900022ce:	4770      	bx	lr
900022d0:	200011f4 	.word	0x200011f4

900022d4 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
900022d4:	b480      	push	{r7}
900022d6:	b085      	sub	sp, #20
900022d8:	af00      	add	r7, sp, #0
900022da:	6078      	str	r0, [r7, #4]
900022dc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900022de:	2300      	movs	r3, #0
900022e0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900022e2:	687b      	ldr	r3, [r7, #4]
900022e4:	2b00      	cmp	r3, #0
900022e6:	d003      	beq.n	900022f0 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900022e8:	f06f 0301 	mvn.w	r3, #1
900022ec:	60fb      	str	r3, [r7, #12]
900022ee:	e006      	b.n	900022fe <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
900022f0:	4a06      	ldr	r2, [pc, #24]	@ (9000230c <BSP_LCD_GetXSize+0x38>)
900022f2:	687b      	ldr	r3, [r7, #4]
900022f4:	015b      	lsls	r3, r3, #5
900022f6:	4413      	add	r3, r2
900022f8:	681a      	ldr	r2, [r3, #0]
900022fa:	683b      	ldr	r3, [r7, #0]
900022fc:	601a      	str	r2, [r3, #0]
  }

  return ret;
900022fe:	68fb      	ldr	r3, [r7, #12]
}
90002300:	4618      	mov	r0, r3
90002302:	3714      	adds	r7, #20
90002304:	46bd      	mov	sp, r7
90002306:	f85d 7b04 	ldr.w	r7, [sp], #4
9000230a:	4770      	bx	lr
9000230c:	200011f4 	.word	0x200011f4

90002310 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90002310:	b480      	push	{r7}
90002312:	b085      	sub	sp, #20
90002314:	af00      	add	r7, sp, #0
90002316:	6078      	str	r0, [r7, #4]
90002318:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000231a:	2300      	movs	r3, #0
9000231c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000231e:	687b      	ldr	r3, [r7, #4]
90002320:	2b00      	cmp	r3, #0
90002322:	d003      	beq.n	9000232c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002324:	f06f 0301 	mvn.w	r3, #1
90002328:	60fb      	str	r3, [r7, #12]
9000232a:	e007      	b.n	9000233c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
9000232c:	4a07      	ldr	r2, [pc, #28]	@ (9000234c <BSP_LCD_GetYSize+0x3c>)
9000232e:	687b      	ldr	r3, [r7, #4]
90002330:	015b      	lsls	r3, r3, #5
90002332:	4413      	add	r3, r2
90002334:	3304      	adds	r3, #4
90002336:	681a      	ldr	r2, [r3, #0]
90002338:	683b      	ldr	r3, [r7, #0]
9000233a:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000233c:	68fb      	ldr	r3, [r7, #12]
}
9000233e:	4618      	mov	r0, r3
90002340:	3714      	adds	r7, #20
90002342:	46bd      	mov	sp, r7
90002344:	f85d 7b04 	ldr.w	r7, [sp], #4
90002348:	4770      	bx	lr
9000234a:	bf00      	nop
9000234c:	200011f4 	.word	0x200011f4

90002350 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90002350:	b580      	push	{r7, lr}
90002352:	b08e      	sub	sp, #56	@ 0x38
90002354:	af02      	add	r7, sp, #8
90002356:	60f8      	str	r0, [r7, #12]
90002358:	60b9      	str	r1, [r7, #8]
9000235a:	607a      	str	r2, [r7, #4]
9000235c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000235e:	2300      	movs	r3, #0
90002360:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
90002362:	683b      	ldr	r3, [r7, #0]
90002364:	330a      	adds	r3, #10
90002366:	781b      	ldrb	r3, [r3, #0]
90002368:	461a      	mov	r2, r3
9000236a:	683b      	ldr	r3, [r7, #0]
9000236c:	330b      	adds	r3, #11
9000236e:	781b      	ldrb	r3, [r3, #0]
90002370:	021b      	lsls	r3, r3, #8
90002372:	441a      	add	r2, r3
90002374:	683b      	ldr	r3, [r7, #0]
90002376:	330c      	adds	r3, #12
90002378:	781b      	ldrb	r3, [r3, #0]
9000237a:	041b      	lsls	r3, r3, #16
9000237c:	441a      	add	r2, r3
9000237e:	683b      	ldr	r3, [r7, #0]
90002380:	330d      	adds	r3, #13
90002382:	781b      	ldrb	r3, [r3, #0]
90002384:	061b      	lsls	r3, r3, #24
90002386:	4413      	add	r3, r2
90002388:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
9000238a:	683b      	ldr	r3, [r7, #0]
9000238c:	3312      	adds	r3, #18
9000238e:	781b      	ldrb	r3, [r3, #0]
90002390:	461a      	mov	r2, r3
90002392:	683b      	ldr	r3, [r7, #0]
90002394:	3313      	adds	r3, #19
90002396:	781b      	ldrb	r3, [r3, #0]
90002398:	021b      	lsls	r3, r3, #8
9000239a:	441a      	add	r2, r3
9000239c:	683b      	ldr	r3, [r7, #0]
9000239e:	3314      	adds	r3, #20
900023a0:	781b      	ldrb	r3, [r3, #0]
900023a2:	041b      	lsls	r3, r3, #16
900023a4:	441a      	add	r2, r3
900023a6:	683b      	ldr	r3, [r7, #0]
900023a8:	3315      	adds	r3, #21
900023aa:	781b      	ldrb	r3, [r3, #0]
900023ac:	061b      	lsls	r3, r3, #24
900023ae:	4413      	add	r3, r2
900023b0:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
900023b2:	683b      	ldr	r3, [r7, #0]
900023b4:	3316      	adds	r3, #22
900023b6:	781b      	ldrb	r3, [r3, #0]
900023b8:	461a      	mov	r2, r3
900023ba:	683b      	ldr	r3, [r7, #0]
900023bc:	3317      	adds	r3, #23
900023be:	781b      	ldrb	r3, [r3, #0]
900023c0:	021b      	lsls	r3, r3, #8
900023c2:	441a      	add	r2, r3
900023c4:	683b      	ldr	r3, [r7, #0]
900023c6:	3318      	adds	r3, #24
900023c8:	781b      	ldrb	r3, [r3, #0]
900023ca:	041b      	lsls	r3, r3, #16
900023cc:	441a      	add	r2, r3
900023ce:	683b      	ldr	r3, [r7, #0]
900023d0:	3319      	adds	r3, #25
900023d2:	781b      	ldrb	r3, [r3, #0]
900023d4:	061b      	lsls	r3, r3, #24
900023d6:	4413      	add	r3, r2
900023d8:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
900023da:	683b      	ldr	r3, [r7, #0]
900023dc:	331c      	adds	r3, #28
900023de:	781b      	ldrb	r3, [r3, #0]
900023e0:	461a      	mov	r2, r3
900023e2:	683b      	ldr	r3, [r7, #0]
900023e4:	331d      	adds	r3, #29
900023e6:	781b      	ldrb	r3, [r3, #0]
900023e8:	021b      	lsls	r3, r3, #8
900023ea:	4413      	add	r3, r2
900023ec:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
900023ee:	4a37      	ldr	r2, [pc, #220]	@ (900024cc <BSP_LCD_DrawBitmap+0x17c>)
900023f0:	68fb      	ldr	r3, [r7, #12]
900023f2:	015b      	lsls	r3, r3, #5
900023f4:	4413      	add	r3, r2
900023f6:	3308      	adds	r3, #8
900023f8:	681b      	ldr	r3, [r3, #0]
900023fa:	4a35      	ldr	r2, [pc, #212]	@ (900024d0 <BSP_LCD_DrawBitmap+0x180>)
900023fc:	2134      	movs	r1, #52	@ 0x34
900023fe:	fb01 f303 	mul.w	r3, r1, r3
90002402:	4413      	add	r3, r2
90002404:	335c      	adds	r3, #92	@ 0x5c
90002406:	681a      	ldr	r2, [r3, #0]
90002408:	4930      	ldr	r1, [pc, #192]	@ (900024cc <BSP_LCD_DrawBitmap+0x17c>)
9000240a:	68fb      	ldr	r3, [r7, #12]
9000240c:	015b      	lsls	r3, r3, #5
9000240e:	440b      	add	r3, r1
90002410:	681b      	ldr	r3, [r3, #0]
90002412:	6879      	ldr	r1, [r7, #4]
90002414:	fb03 f101 	mul.w	r1, r3, r1
90002418:	68bb      	ldr	r3, [r7, #8]
9000241a:	440b      	add	r3, r1
9000241c:	482b      	ldr	r0, [pc, #172]	@ (900024cc <BSP_LCD_DrawBitmap+0x17c>)
9000241e:	68f9      	ldr	r1, [r7, #12]
90002420:	0149      	lsls	r1, r1, #5
90002422:	4401      	add	r1, r0
90002424:	3110      	adds	r1, #16
90002426:	6809      	ldr	r1, [r1, #0]
90002428:	fb01 f303 	mul.w	r3, r1, r3
9000242c:	4413      	add	r3, r2
9000242e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90002430:	693b      	ldr	r3, [r7, #16]
90002432:	3b20      	subs	r3, #32
90002434:	2b07      	cmp	r3, #7
90002436:	d802      	bhi.n	9000243e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002438:	2300      	movs	r3, #0
9000243a:	627b      	str	r3, [r7, #36]	@ 0x24
9000243c:	e008      	b.n	90002450 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
9000243e:	693b      	ldr	r3, [r7, #16]
90002440:	3b10      	subs	r3, #16
90002442:	2b07      	cmp	r3, #7
90002444:	d802      	bhi.n	9000244c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
90002446:	2302      	movs	r3, #2
90002448:	627b      	str	r3, [r7, #36]	@ 0x24
9000244a:	e001      	b.n	90002450 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
9000244c:	2301      	movs	r3, #1
9000244e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002450:	697b      	ldr	r3, [r7, #20]
90002452:	3b01      	subs	r3, #1
90002454:	69ba      	ldr	r2, [r7, #24]
90002456:	fb02 f303 	mul.w	r3, r2, r3
9000245a:	693a      	ldr	r2, [r7, #16]
9000245c:	08d2      	lsrs	r2, r2, #3
9000245e:	fb03 f202 	mul.w	r2, r3, r2
90002462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002464:	4413      	add	r3, r2
90002466:	683a      	ldr	r2, [r7, #0]
90002468:	4413      	add	r3, r2
9000246a:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
9000246c:	2300      	movs	r3, #0
9000246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002470:	e023      	b.n	900024ba <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
90002472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002476:	9300      	str	r3, [sp, #0]
90002478:	69bb      	ldr	r3, [r7, #24]
9000247a:	6a39      	ldr	r1, [r7, #32]
9000247c:	68f8      	ldr	r0, [r7, #12]
9000247e:	f000 fa77 	bl	90002970 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
90002482:	4a12      	ldr	r2, [pc, #72]	@ (900024cc <BSP_LCD_DrawBitmap+0x17c>)
90002484:	68fb      	ldr	r3, [r7, #12]
90002486:	015b      	lsls	r3, r3, #5
90002488:	4413      	add	r3, r2
9000248a:	681b      	ldr	r3, [r3, #0]
9000248c:	490f      	ldr	r1, [pc, #60]	@ (900024cc <BSP_LCD_DrawBitmap+0x17c>)
9000248e:	68fa      	ldr	r2, [r7, #12]
90002490:	0152      	lsls	r2, r2, #5
90002492:	440a      	add	r2, r1
90002494:	3210      	adds	r2, #16
90002496:	6812      	ldr	r2, [r2, #0]
90002498:	fb02 f303 	mul.w	r3, r2, r3
9000249c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000249e:	4413      	add	r3, r2
900024a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
900024a2:	693b      	ldr	r3, [r7, #16]
900024a4:	08db      	lsrs	r3, r3, #3
900024a6:	69ba      	ldr	r2, [r7, #24]
900024a8:	fb02 f303 	mul.w	r3, r2, r3
900024ac:	425b      	negs	r3, r3
900024ae:	6a3a      	ldr	r2, [r7, #32]
900024b0:	4413      	add	r3, r2
900024b2:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
900024b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900024b6:	3301      	adds	r3, #1
900024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
900024ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900024bc:	697b      	ldr	r3, [r7, #20]
900024be:	429a      	cmp	r2, r3
900024c0:	d3d7      	bcc.n	90002472 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
900024c2:	69fb      	ldr	r3, [r7, #28]
}
900024c4:	4618      	mov	r0, r3
900024c6:	3730      	adds	r7, #48	@ 0x30
900024c8:	46bd      	mov	sp, r7
900024ca:	bd80      	pop	{r7, pc}
900024cc:	200011f4 	.word	0x200011f4
900024d0:	2000114c 	.word	0x2000114c

900024d4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
900024d4:	b580      	push	{r7, lr}
900024d6:	b088      	sub	sp, #32
900024d8:	af00      	add	r7, sp, #0
900024da:	60f8      	str	r0, [r7, #12]
900024dc:	60b9      	str	r1, [r7, #8]
900024de:	607a      	str	r2, [r7, #4]
900024e0:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
900024e2:	683b      	ldr	r3, [r7, #0]
900024e4:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
900024e6:	2300      	movs	r3, #0
900024e8:	61fb      	str	r3, [r7, #28]
900024ea:	e032      	b.n	90002552 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
900024ec:	2300      	movs	r3, #0
900024ee:	617b      	str	r3, [r7, #20]
900024f0:	e028      	b.n	90002544 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
900024f2:	69bb      	ldr	r3, [r7, #24]
900024f4:	781b      	ldrb	r3, [r3, #0]
900024f6:	461a      	mov	r2, r3
900024f8:	69bb      	ldr	r3, [r7, #24]
900024fa:	3301      	adds	r3, #1
900024fc:	781b      	ldrb	r3, [r3, #0]
900024fe:	021b      	lsls	r3, r3, #8
90002500:	431a      	orrs	r2, r3
90002502:	69bb      	ldr	r3, [r7, #24]
90002504:	3302      	adds	r3, #2
90002506:	781b      	ldrb	r3, [r3, #0]
90002508:	041b      	lsls	r3, r3, #16
9000250a:	431a      	orrs	r2, r3
9000250c:	69bb      	ldr	r3, [r7, #24]
9000250e:	3303      	adds	r3, #3
90002510:	781b      	ldrb	r3, [r3, #0]
90002512:	061b      	lsls	r3, r3, #24
90002514:	4313      	orrs	r3, r2
90002516:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002518:	68ba      	ldr	r2, [r7, #8]
9000251a:	697b      	ldr	r3, [r7, #20]
9000251c:	18d1      	adds	r1, r2, r3
9000251e:	687a      	ldr	r2, [r7, #4]
90002520:	69fb      	ldr	r3, [r7, #28]
90002522:	441a      	add	r2, r3
90002524:	693b      	ldr	r3, [r7, #16]
90002526:	68f8      	ldr	r0, [r7, #12]
90002528:	f000 f95e 	bl	900027e8 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
9000252c:	4a0d      	ldr	r2, [pc, #52]	@ (90002564 <BSP_LCD_FillRGBRect+0x90>)
9000252e:	68fb      	ldr	r3, [r7, #12]
90002530:	015b      	lsls	r3, r3, #5
90002532:	4413      	add	r3, r2
90002534:	3310      	adds	r3, #16
90002536:	681b      	ldr	r3, [r3, #0]
90002538:	69ba      	ldr	r2, [r7, #24]
9000253a:	4413      	add	r3, r2
9000253c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
9000253e:	697b      	ldr	r3, [r7, #20]
90002540:	3301      	adds	r3, #1
90002542:	617b      	str	r3, [r7, #20]
90002544:	697a      	ldr	r2, [r7, #20]
90002546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002548:	429a      	cmp	r2, r3
9000254a:	d3d2      	bcc.n	900024f2 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
9000254c:	69fb      	ldr	r3, [r7, #28]
9000254e:	3301      	adds	r3, #1
90002550:	61fb      	str	r3, [r7, #28]
90002552:	69fa      	ldr	r2, [r7, #28]
90002554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002556:	429a      	cmp	r2, r3
90002558:	d3c8      	bcc.n	900024ec <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
9000255a:	2300      	movs	r3, #0
}
9000255c:	4618      	mov	r0, r3
9000255e:	3720      	adds	r7, #32
90002560:	46bd      	mov	sp, r7
90002562:	bd80      	pop	{r7, pc}
90002564:	200011f4 	.word	0x200011f4

90002568 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002568:	b580      	push	{r7, lr}
9000256a:	b088      	sub	sp, #32
9000256c:	af02      	add	r7, sp, #8
9000256e:	60f8      	str	r0, [r7, #12]
90002570:	60b9      	str	r1, [r7, #8]
90002572:	607a      	str	r2, [r7, #4]
90002574:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002576:	4a21      	ldr	r2, [pc, #132]	@ (900025fc <BSP_LCD_DrawHLine+0x94>)
90002578:	68fb      	ldr	r3, [r7, #12]
9000257a:	015b      	lsls	r3, r3, #5
9000257c:	4413      	add	r3, r2
9000257e:	3308      	adds	r3, #8
90002580:	681b      	ldr	r3, [r3, #0]
90002582:	4a1f      	ldr	r2, [pc, #124]	@ (90002600 <BSP_LCD_DrawHLine+0x98>)
90002584:	2134      	movs	r1, #52	@ 0x34
90002586:	fb01 f303 	mul.w	r3, r1, r3
9000258a:	4413      	add	r3, r2
9000258c:	335c      	adds	r3, #92	@ 0x5c
9000258e:	681a      	ldr	r2, [r3, #0]
90002590:	491a      	ldr	r1, [pc, #104]	@ (900025fc <BSP_LCD_DrawHLine+0x94>)
90002592:	68fb      	ldr	r3, [r7, #12]
90002594:	015b      	lsls	r3, r3, #5
90002596:	440b      	add	r3, r1
90002598:	3310      	adds	r3, #16
9000259a:	681b      	ldr	r3, [r3, #0]
9000259c:	4817      	ldr	r0, [pc, #92]	@ (900025fc <BSP_LCD_DrawHLine+0x94>)
9000259e:	68f9      	ldr	r1, [r7, #12]
900025a0:	0149      	lsls	r1, r1, #5
900025a2:	4401      	add	r1, r0
900025a4:	6809      	ldr	r1, [r1, #0]
900025a6:	6878      	ldr	r0, [r7, #4]
900025a8:	fb01 f000 	mul.w	r0, r1, r0
900025ac:	68b9      	ldr	r1, [r7, #8]
900025ae:	4401      	add	r1, r0
900025b0:	fb01 f303 	mul.w	r3, r1, r3
900025b4:	4413      	add	r3, r2
900025b6:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
900025b8:	68ba      	ldr	r2, [r7, #8]
900025ba:	683b      	ldr	r3, [r7, #0]
900025bc:	441a      	add	r2, r3
900025be:	490f      	ldr	r1, [pc, #60]	@ (900025fc <BSP_LCD_DrawHLine+0x94>)
900025c0:	68fb      	ldr	r3, [r7, #12]
900025c2:	015b      	lsls	r3, r3, #5
900025c4:	440b      	add	r3, r1
900025c6:	681b      	ldr	r3, [r3, #0]
900025c8:	429a      	cmp	r2, r3
900025ca:	d907      	bls.n	900025dc <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
900025cc:	4a0b      	ldr	r2, [pc, #44]	@ (900025fc <BSP_LCD_DrawHLine+0x94>)
900025ce:	68fb      	ldr	r3, [r7, #12]
900025d0:	015b      	lsls	r3, r3, #5
900025d2:	4413      	add	r3, r2
900025d4:	681a      	ldr	r2, [r3, #0]
900025d6:	68bb      	ldr	r3, [r7, #8]
900025d8:	1ad3      	subs	r3, r2, r3
900025da:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
900025dc:	6979      	ldr	r1, [r7, #20]
900025de:	6a3b      	ldr	r3, [r7, #32]
900025e0:	9301      	str	r3, [sp, #4]
900025e2:	2300      	movs	r3, #0
900025e4:	9300      	str	r3, [sp, #0]
900025e6:	2301      	movs	r3, #1
900025e8:	683a      	ldr	r2, [r7, #0]
900025ea:	68f8      	ldr	r0, [r7, #12]
900025ec:	f000 f956 	bl	9000289c <LL_FillBuffer>

  return BSP_ERROR_NONE;
900025f0:	2300      	movs	r3, #0
}
900025f2:	4618      	mov	r0, r3
900025f4:	3718      	adds	r7, #24
900025f6:	46bd      	mov	sp, r7
900025f8:	bd80      	pop	{r7, pc}
900025fa:	bf00      	nop
900025fc:	200011f4 	.word	0x200011f4
90002600:	2000114c 	.word	0x2000114c

90002604 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002604:	b580      	push	{r7, lr}
90002606:	b088      	sub	sp, #32
90002608:	af02      	add	r7, sp, #8
9000260a:	60f8      	str	r0, [r7, #12]
9000260c:	60b9      	str	r1, [r7, #8]
9000260e:	607a      	str	r2, [r7, #4]
90002610:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002612:	4a24      	ldr	r2, [pc, #144]	@ (900026a4 <BSP_LCD_DrawVLine+0xa0>)
90002614:	68fb      	ldr	r3, [r7, #12]
90002616:	015b      	lsls	r3, r3, #5
90002618:	4413      	add	r3, r2
9000261a:	3308      	adds	r3, #8
9000261c:	681b      	ldr	r3, [r3, #0]
9000261e:	4a22      	ldr	r2, [pc, #136]	@ (900026a8 <BSP_LCD_DrawVLine+0xa4>)
90002620:	2134      	movs	r1, #52	@ 0x34
90002622:	fb01 f303 	mul.w	r3, r1, r3
90002626:	4413      	add	r3, r2
90002628:	335c      	adds	r3, #92	@ 0x5c
9000262a:	681a      	ldr	r2, [r3, #0]
9000262c:	491d      	ldr	r1, [pc, #116]	@ (900026a4 <BSP_LCD_DrawVLine+0xa0>)
9000262e:	68fb      	ldr	r3, [r7, #12]
90002630:	015b      	lsls	r3, r3, #5
90002632:	440b      	add	r3, r1
90002634:	3310      	adds	r3, #16
90002636:	681b      	ldr	r3, [r3, #0]
90002638:	481a      	ldr	r0, [pc, #104]	@ (900026a4 <BSP_LCD_DrawVLine+0xa0>)
9000263a:	68f9      	ldr	r1, [r7, #12]
9000263c:	0149      	lsls	r1, r1, #5
9000263e:	4401      	add	r1, r0
90002640:	6809      	ldr	r1, [r1, #0]
90002642:	6878      	ldr	r0, [r7, #4]
90002644:	fb01 f000 	mul.w	r0, r1, r0
90002648:	68b9      	ldr	r1, [r7, #8]
9000264a:	4401      	add	r1, r0
9000264c:	fb01 f303 	mul.w	r3, r1, r3
90002650:	4413      	add	r3, r2
90002652:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90002654:	687a      	ldr	r2, [r7, #4]
90002656:	683b      	ldr	r3, [r7, #0]
90002658:	441a      	add	r2, r3
9000265a:	4912      	ldr	r1, [pc, #72]	@ (900026a4 <BSP_LCD_DrawVLine+0xa0>)
9000265c:	68fb      	ldr	r3, [r7, #12]
9000265e:	015b      	lsls	r3, r3, #5
90002660:	440b      	add	r3, r1
90002662:	3304      	adds	r3, #4
90002664:	681b      	ldr	r3, [r3, #0]
90002666:	429a      	cmp	r2, r3
90002668:	d908      	bls.n	9000267c <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
9000266a:	4a0e      	ldr	r2, [pc, #56]	@ (900026a4 <BSP_LCD_DrawVLine+0xa0>)
9000266c:	68fb      	ldr	r3, [r7, #12]
9000266e:	015b      	lsls	r3, r3, #5
90002670:	4413      	add	r3, r2
90002672:	3304      	adds	r3, #4
90002674:	681a      	ldr	r2, [r3, #0]
90002676:	687b      	ldr	r3, [r7, #4]
90002678:	1ad3      	subs	r3, r2, r3
9000267a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
9000267c:	6979      	ldr	r1, [r7, #20]
9000267e:	4a09      	ldr	r2, [pc, #36]	@ (900026a4 <BSP_LCD_DrawVLine+0xa0>)
90002680:	68fb      	ldr	r3, [r7, #12]
90002682:	015b      	lsls	r3, r3, #5
90002684:	4413      	add	r3, r2
90002686:	681b      	ldr	r3, [r3, #0]
90002688:	3b01      	subs	r3, #1
9000268a:	6a3a      	ldr	r2, [r7, #32]
9000268c:	9201      	str	r2, [sp, #4]
9000268e:	9300      	str	r3, [sp, #0]
90002690:	683b      	ldr	r3, [r7, #0]
90002692:	2201      	movs	r2, #1
90002694:	68f8      	ldr	r0, [r7, #12]
90002696:	f000 f901 	bl	9000289c <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000269a:	2300      	movs	r3, #0
}
9000269c:	4618      	mov	r0, r3
9000269e:	3718      	adds	r7, #24
900026a0:	46bd      	mov	sp, r7
900026a2:	bd80      	pop	{r7, pc}
900026a4:	200011f4 	.word	0x200011f4
900026a8:	2000114c 	.word	0x2000114c

900026ac <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900026ac:	b580      	push	{r7, lr}
900026ae:	b088      	sub	sp, #32
900026b0:	af02      	add	r7, sp, #8
900026b2:	60f8      	str	r0, [r7, #12]
900026b4:	60b9      	str	r1, [r7, #8]
900026b6:	607a      	str	r2, [r7, #4]
900026b8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900026ba:	4a1b      	ldr	r2, [pc, #108]	@ (90002728 <BSP_LCD_FillRect+0x7c>)
900026bc:	68fb      	ldr	r3, [r7, #12]
900026be:	015b      	lsls	r3, r3, #5
900026c0:	4413      	add	r3, r2
900026c2:	3308      	adds	r3, #8
900026c4:	681b      	ldr	r3, [r3, #0]
900026c6:	4a19      	ldr	r2, [pc, #100]	@ (9000272c <BSP_LCD_FillRect+0x80>)
900026c8:	2134      	movs	r1, #52	@ 0x34
900026ca:	fb01 f303 	mul.w	r3, r1, r3
900026ce:	4413      	add	r3, r2
900026d0:	335c      	adds	r3, #92	@ 0x5c
900026d2:	681a      	ldr	r2, [r3, #0]
900026d4:	4914      	ldr	r1, [pc, #80]	@ (90002728 <BSP_LCD_FillRect+0x7c>)
900026d6:	68fb      	ldr	r3, [r7, #12]
900026d8:	015b      	lsls	r3, r3, #5
900026da:	440b      	add	r3, r1
900026dc:	3310      	adds	r3, #16
900026de:	681b      	ldr	r3, [r3, #0]
900026e0:	4811      	ldr	r0, [pc, #68]	@ (90002728 <BSP_LCD_FillRect+0x7c>)
900026e2:	68f9      	ldr	r1, [r7, #12]
900026e4:	0149      	lsls	r1, r1, #5
900026e6:	4401      	add	r1, r0
900026e8:	6809      	ldr	r1, [r1, #0]
900026ea:	6878      	ldr	r0, [r7, #4]
900026ec:	fb01 f000 	mul.w	r0, r1, r0
900026f0:	68b9      	ldr	r1, [r7, #8]
900026f2:	4401      	add	r1, r0
900026f4:	fb01 f303 	mul.w	r3, r1, r3
900026f8:	4413      	add	r3, r2
900026fa:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
900026fc:	6979      	ldr	r1, [r7, #20]
900026fe:	4a0a      	ldr	r2, [pc, #40]	@ (90002728 <BSP_LCD_FillRect+0x7c>)
90002700:	68fb      	ldr	r3, [r7, #12]
90002702:	015b      	lsls	r3, r3, #5
90002704:	4413      	add	r3, r2
90002706:	681a      	ldr	r2, [r3, #0]
90002708:	683b      	ldr	r3, [r7, #0]
9000270a:	1ad3      	subs	r3, r2, r3
9000270c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000270e:	9201      	str	r2, [sp, #4]
90002710:	9300      	str	r3, [sp, #0]
90002712:	6a3b      	ldr	r3, [r7, #32]
90002714:	683a      	ldr	r2, [r7, #0]
90002716:	68f8      	ldr	r0, [r7, #12]
90002718:	f000 f8c0 	bl	9000289c <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000271c:	2300      	movs	r3, #0
}
9000271e:	4618      	mov	r0, r3
90002720:	3718      	adds	r7, #24
90002722:	46bd      	mov	sp, r7
90002724:	bd80      	pop	{r7, pc}
90002726:	bf00      	nop
90002728:	200011f4 	.word	0x200011f4
9000272c:	2000114c 	.word	0x2000114c

90002730 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002730:	b480      	push	{r7}
90002732:	b085      	sub	sp, #20
90002734:	af00      	add	r7, sp, #0
90002736:	60f8      	str	r0, [r7, #12]
90002738:	60b9      	str	r1, [r7, #8]
9000273a:	607a      	str	r2, [r7, #4]
9000273c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000273e:	4a28      	ldr	r2, [pc, #160]	@ (900027e0 <BSP_LCD_ReadPixel+0xb0>)
90002740:	68fb      	ldr	r3, [r7, #12]
90002742:	015b      	lsls	r3, r3, #5
90002744:	4413      	add	r3, r2
90002746:	3308      	adds	r3, #8
90002748:	681b      	ldr	r3, [r3, #0]
9000274a:	4a26      	ldr	r2, [pc, #152]	@ (900027e4 <BSP_LCD_ReadPixel+0xb4>)
9000274c:	2134      	movs	r1, #52	@ 0x34
9000274e:	fb01 f303 	mul.w	r3, r1, r3
90002752:	4413      	add	r3, r2
90002754:	3348      	adds	r3, #72	@ 0x48
90002756:	681b      	ldr	r3, [r3, #0]
90002758:	2b00      	cmp	r3, #0
9000275a:	d11c      	bne.n	90002796 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
9000275c:	4a20      	ldr	r2, [pc, #128]	@ (900027e0 <BSP_LCD_ReadPixel+0xb0>)
9000275e:	68fb      	ldr	r3, [r7, #12]
90002760:	015b      	lsls	r3, r3, #5
90002762:	4413      	add	r3, r2
90002764:	3308      	adds	r3, #8
90002766:	681b      	ldr	r3, [r3, #0]
90002768:	4a1e      	ldr	r2, [pc, #120]	@ (900027e4 <BSP_LCD_ReadPixel+0xb4>)
9000276a:	2134      	movs	r1, #52	@ 0x34
9000276c:	fb01 f303 	mul.w	r3, r1, r3
90002770:	4413      	add	r3, r2
90002772:	335c      	adds	r3, #92	@ 0x5c
90002774:	681a      	ldr	r2, [r3, #0]
90002776:	491a      	ldr	r1, [pc, #104]	@ (900027e0 <BSP_LCD_ReadPixel+0xb0>)
90002778:	68fb      	ldr	r3, [r7, #12]
9000277a:	015b      	lsls	r3, r3, #5
9000277c:	440b      	add	r3, r1
9000277e:	681b      	ldr	r3, [r3, #0]
90002780:	6879      	ldr	r1, [r7, #4]
90002782:	fb03 f101 	mul.w	r1, r3, r1
90002786:	68bb      	ldr	r3, [r7, #8]
90002788:	440b      	add	r3, r1
9000278a:	009b      	lsls	r3, r3, #2
9000278c:	4413      	add	r3, r2
9000278e:	681a      	ldr	r2, [r3, #0]
90002790:	683b      	ldr	r3, [r7, #0]
90002792:	601a      	str	r2, [r3, #0]
90002794:	e01d      	b.n	900027d2 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002796:	4a12      	ldr	r2, [pc, #72]	@ (900027e0 <BSP_LCD_ReadPixel+0xb0>)
90002798:	68fb      	ldr	r3, [r7, #12]
9000279a:	015b      	lsls	r3, r3, #5
9000279c:	4413      	add	r3, r2
9000279e:	3308      	adds	r3, #8
900027a0:	681b      	ldr	r3, [r3, #0]
900027a2:	4a10      	ldr	r2, [pc, #64]	@ (900027e4 <BSP_LCD_ReadPixel+0xb4>)
900027a4:	2134      	movs	r1, #52	@ 0x34
900027a6:	fb01 f303 	mul.w	r3, r1, r3
900027aa:	4413      	add	r3, r2
900027ac:	335c      	adds	r3, #92	@ 0x5c
900027ae:	681a      	ldr	r2, [r3, #0]
900027b0:	490b      	ldr	r1, [pc, #44]	@ (900027e0 <BSP_LCD_ReadPixel+0xb0>)
900027b2:	68fb      	ldr	r3, [r7, #12]
900027b4:	015b      	lsls	r3, r3, #5
900027b6:	440b      	add	r3, r1
900027b8:	681b      	ldr	r3, [r3, #0]
900027ba:	6879      	ldr	r1, [r7, #4]
900027bc:	fb03 f101 	mul.w	r1, r3, r1
900027c0:	68bb      	ldr	r3, [r7, #8]
900027c2:	440b      	add	r3, r1
900027c4:	005b      	lsls	r3, r3, #1
900027c6:	4413      	add	r3, r2
900027c8:	881b      	ldrh	r3, [r3, #0]
900027ca:	b29b      	uxth	r3, r3
900027cc:	461a      	mov	r2, r3
900027ce:	683b      	ldr	r3, [r7, #0]
900027d0:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
900027d2:	2300      	movs	r3, #0
}
900027d4:	4618      	mov	r0, r3
900027d6:	3714      	adds	r7, #20
900027d8:	46bd      	mov	sp, r7
900027da:	f85d 7b04 	ldr.w	r7, [sp], #4
900027de:	4770      	bx	lr
900027e0:	200011f4 	.word	0x200011f4
900027e4:	2000114c 	.word	0x2000114c

900027e8 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
900027e8:	b480      	push	{r7}
900027ea:	b085      	sub	sp, #20
900027ec:	af00      	add	r7, sp, #0
900027ee:	60f8      	str	r0, [r7, #12]
900027f0:	60b9      	str	r1, [r7, #8]
900027f2:	607a      	str	r2, [r7, #4]
900027f4:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900027f6:	4a27      	ldr	r2, [pc, #156]	@ (90002894 <BSP_LCD_WritePixel+0xac>)
900027f8:	68fb      	ldr	r3, [r7, #12]
900027fa:	015b      	lsls	r3, r3, #5
900027fc:	4413      	add	r3, r2
900027fe:	3308      	adds	r3, #8
90002800:	681b      	ldr	r3, [r3, #0]
90002802:	4a25      	ldr	r2, [pc, #148]	@ (90002898 <BSP_LCD_WritePixel+0xb0>)
90002804:	2134      	movs	r1, #52	@ 0x34
90002806:	fb01 f303 	mul.w	r3, r1, r3
9000280a:	4413      	add	r3, r2
9000280c:	3348      	adds	r3, #72	@ 0x48
9000280e:	681b      	ldr	r3, [r3, #0]
90002810:	2b00      	cmp	r3, #0
90002812:	d11c      	bne.n	9000284e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002814:	4a1f      	ldr	r2, [pc, #124]	@ (90002894 <BSP_LCD_WritePixel+0xac>)
90002816:	68fb      	ldr	r3, [r7, #12]
90002818:	015b      	lsls	r3, r3, #5
9000281a:	4413      	add	r3, r2
9000281c:	3308      	adds	r3, #8
9000281e:	681b      	ldr	r3, [r3, #0]
90002820:	4a1d      	ldr	r2, [pc, #116]	@ (90002898 <BSP_LCD_WritePixel+0xb0>)
90002822:	2134      	movs	r1, #52	@ 0x34
90002824:	fb01 f303 	mul.w	r3, r1, r3
90002828:	4413      	add	r3, r2
9000282a:	335c      	adds	r3, #92	@ 0x5c
9000282c:	681a      	ldr	r2, [r3, #0]
9000282e:	4919      	ldr	r1, [pc, #100]	@ (90002894 <BSP_LCD_WritePixel+0xac>)
90002830:	68fb      	ldr	r3, [r7, #12]
90002832:	015b      	lsls	r3, r3, #5
90002834:	440b      	add	r3, r1
90002836:	681b      	ldr	r3, [r3, #0]
90002838:	6879      	ldr	r1, [r7, #4]
9000283a:	fb03 f101 	mul.w	r1, r3, r1
9000283e:	68bb      	ldr	r3, [r7, #8]
90002840:	440b      	add	r3, r1
90002842:	009b      	lsls	r3, r3, #2
90002844:	4413      	add	r3, r2
90002846:	461a      	mov	r2, r3
90002848:	683b      	ldr	r3, [r7, #0]
9000284a:	6013      	str	r3, [r2, #0]
9000284c:	e01b      	b.n	90002886 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
9000284e:	4a11      	ldr	r2, [pc, #68]	@ (90002894 <BSP_LCD_WritePixel+0xac>)
90002850:	68fb      	ldr	r3, [r7, #12]
90002852:	015b      	lsls	r3, r3, #5
90002854:	4413      	add	r3, r2
90002856:	3308      	adds	r3, #8
90002858:	681b      	ldr	r3, [r3, #0]
9000285a:	4a0f      	ldr	r2, [pc, #60]	@ (90002898 <BSP_LCD_WritePixel+0xb0>)
9000285c:	2134      	movs	r1, #52	@ 0x34
9000285e:	fb01 f303 	mul.w	r3, r1, r3
90002862:	4413      	add	r3, r2
90002864:	335c      	adds	r3, #92	@ 0x5c
90002866:	681a      	ldr	r2, [r3, #0]
90002868:	490a      	ldr	r1, [pc, #40]	@ (90002894 <BSP_LCD_WritePixel+0xac>)
9000286a:	68fb      	ldr	r3, [r7, #12]
9000286c:	015b      	lsls	r3, r3, #5
9000286e:	440b      	add	r3, r1
90002870:	681b      	ldr	r3, [r3, #0]
90002872:	6879      	ldr	r1, [r7, #4]
90002874:	fb03 f101 	mul.w	r1, r3, r1
90002878:	68bb      	ldr	r3, [r7, #8]
9000287a:	440b      	add	r3, r1
9000287c:	005b      	lsls	r3, r3, #1
9000287e:	4413      	add	r3, r2
90002880:	683a      	ldr	r2, [r7, #0]
90002882:	b292      	uxth	r2, r2
90002884:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002886:	2300      	movs	r3, #0
}
90002888:	4618      	mov	r0, r3
9000288a:	3714      	adds	r7, #20
9000288c:	46bd      	mov	sp, r7
9000288e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002892:	4770      	bx	lr
90002894:	200011f4 	.word	0x200011f4
90002898:	2000114c 	.word	0x2000114c

9000289c <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
9000289c:	b580      	push	{r7, lr}
9000289e:	b088      	sub	sp, #32
900028a0:	af02      	add	r7, sp, #8
900028a2:	60f8      	str	r0, [r7, #12]
900028a4:	60b9      	str	r1, [r7, #8]
900028a6:	607a      	str	r2, [r7, #4]
900028a8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
900028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028ac:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
900028ae:	4a2d      	ldr	r2, [pc, #180]	@ (90002964 <LL_FillBuffer+0xc8>)
900028b0:	68fb      	ldr	r3, [r7, #12]
900028b2:	015b      	lsls	r3, r3, #5
900028b4:	4413      	add	r3, r2
900028b6:	330c      	adds	r3, #12
900028b8:	681b      	ldr	r3, [r3, #0]
900028ba:	2b02      	cmp	r3, #2
900028bc:	d129      	bne.n	90002912 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
900028be:	2302      	movs	r3, #2
900028c0:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
900028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028c4:	0adb      	lsrs	r3, r3, #11
900028c6:	f003 021f 	and.w	r2, r3, #31
900028ca:	4613      	mov	r3, r2
900028cc:	011b      	lsls	r3, r3, #4
900028ce:	4413      	add	r3, r2
900028d0:	015a      	lsls	r2, r3, #5
900028d2:	1ad3      	subs	r3, r2, r3
900028d4:	3317      	adds	r3, #23
900028d6:	099b      	lsrs	r3, r3, #6
900028d8:	0419      	lsls	r1, r3, #16
900028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028dc:	095b      	lsrs	r3, r3, #5
900028de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
900028e2:	4613      	mov	r3, r2
900028e4:	01db      	lsls	r3, r3, #7
900028e6:	4413      	add	r3, r2
900028e8:	005b      	lsls	r3, r3, #1
900028ea:	4413      	add	r3, r2
900028ec:	3321      	adds	r3, #33	@ 0x21
900028ee:	099b      	lsrs	r3, r3, #6
900028f0:	021b      	lsls	r3, r3, #8
900028f2:	4319      	orrs	r1, r3
900028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028f6:	f003 021f 	and.w	r2, r3, #31
900028fa:	4613      	mov	r3, r2
900028fc:	011b      	lsls	r3, r3, #4
900028fe:	4413      	add	r3, r2
90002900:	015a      	lsls	r2, r3, #5
90002902:	1ad3      	subs	r3, r2, r3
90002904:	3317      	adds	r3, #23
90002906:	099b      	lsrs	r3, r3, #6
90002908:	430b      	orrs	r3, r1
9000290a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
9000290e:	613b      	str	r3, [r7, #16]
    break;
90002910:	e002      	b.n	90002918 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002912:	2300      	movs	r3, #0
90002914:	617b      	str	r3, [r7, #20]
    break;
90002916:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002918:	4b13      	ldr	r3, [pc, #76]	@ (90002968 <LL_FillBuffer+0xcc>)
9000291a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
9000291e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002920:	4a11      	ldr	r2, [pc, #68]	@ (90002968 <LL_FillBuffer+0xcc>)
90002922:	697b      	ldr	r3, [r7, #20]
90002924:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002926:	4a10      	ldr	r2, [pc, #64]	@ (90002968 <LL_FillBuffer+0xcc>)
90002928:	6a3b      	ldr	r3, [r7, #32]
9000292a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
9000292c:	4b0e      	ldr	r3, [pc, #56]	@ (90002968 <LL_FillBuffer+0xcc>)
9000292e:	4a0f      	ldr	r2, [pc, #60]	@ (9000296c <LL_FillBuffer+0xd0>)
90002930:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002932:	480d      	ldr	r0, [pc, #52]	@ (90002968 <LL_FillBuffer+0xcc>)
90002934:	f000 fe50 	bl	900035d8 <HAL_DMA2D_Init>
90002938:	4603      	mov	r3, r0
9000293a:	2b00      	cmp	r3, #0
9000293c:	d10e      	bne.n	9000295c <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
9000293e:	68ba      	ldr	r2, [r7, #8]
90002940:	683b      	ldr	r3, [r7, #0]
90002942:	9300      	str	r3, [sp, #0]
90002944:	687b      	ldr	r3, [r7, #4]
90002946:	6939      	ldr	r1, [r7, #16]
90002948:	4807      	ldr	r0, [pc, #28]	@ (90002968 <LL_FillBuffer+0xcc>)
9000294a:	f000 feb3 	bl	900036b4 <HAL_DMA2D_Start>
9000294e:	4603      	mov	r3, r0
90002950:	2b00      	cmp	r3, #0
90002952:	d103      	bne.n	9000295c <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002954:	2132      	movs	r1, #50	@ 0x32
90002956:	4804      	ldr	r0, [pc, #16]	@ (90002968 <LL_FillBuffer+0xcc>)
90002958:	f000 fed7 	bl	9000370a <HAL_DMA2D_PollForTransfer>
    }
  }
}
9000295c:	bf00      	nop
9000295e:	3718      	adds	r7, #24
90002960:	46bd      	mov	sp, r7
90002962:	bd80      	pop	{r7, pc}
90002964:	200011f4 	.word	0x200011f4
90002968:	200010e4 	.word	0x200010e4
9000296c:	52001000 	.word	0x52001000

90002970 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002970:	b580      	push	{r7, lr}
90002972:	b088      	sub	sp, #32
90002974:	af02      	add	r7, sp, #8
90002976:	60f8      	str	r0, [r7, #12]
90002978:	60b9      	str	r1, [r7, #8]
9000297a:	607a      	str	r2, [r7, #4]
9000297c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000297e:	4a23      	ldr	r2, [pc, #140]	@ (90002a0c <LL_ConvertLineToRGB+0x9c>)
90002980:	68fb      	ldr	r3, [r7, #12]
90002982:	015b      	lsls	r3, r3, #5
90002984:	4413      	add	r3, r2
90002986:	330c      	adds	r3, #12
90002988:	681b      	ldr	r3, [r3, #0]
9000298a:	2b02      	cmp	r3, #2
9000298c:	d102      	bne.n	90002994 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000298e:	2302      	movs	r3, #2
90002990:	617b      	str	r3, [r7, #20]
    break;
90002992:	e002      	b.n	9000299a <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002994:	2300      	movs	r3, #0
90002996:	617b      	str	r3, [r7, #20]
    break;
90002998:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
9000299a:	4b1d      	ldr	r3, [pc, #116]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
9000299c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
900029a0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900029a2:	4a1b      	ldr	r2, [pc, #108]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029a4:	697b      	ldr	r3, [r7, #20]
900029a6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
900029a8:	4b19      	ldr	r3, [pc, #100]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029aa:	2200      	movs	r2, #0
900029ac:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
900029ae:	4b18      	ldr	r3, [pc, #96]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029b0:	2200      	movs	r2, #0
900029b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
900029b4:	4b16      	ldr	r3, [pc, #88]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029b6:	22ff      	movs	r2, #255	@ 0xff
900029b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
900029ba:	4a15      	ldr	r2, [pc, #84]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029bc:	6a3b      	ldr	r3, [r7, #32]
900029be:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
900029c0:	4b13      	ldr	r3, [pc, #76]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029c2:	2200      	movs	r2, #0
900029c4:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
900029c6:	4b12      	ldr	r3, [pc, #72]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029c8:	4a12      	ldr	r2, [pc, #72]	@ (90002a14 <LL_ConvertLineToRGB+0xa4>)
900029ca:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900029cc:	4810      	ldr	r0, [pc, #64]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029ce:	f000 fe03 	bl	900035d8 <HAL_DMA2D_Init>
900029d2:	4603      	mov	r3, r0
900029d4:	2b00      	cmp	r3, #0
900029d6:	d115      	bne.n	90002a04 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
900029d8:	2101      	movs	r1, #1
900029da:	480d      	ldr	r0, [pc, #52]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029dc:	f000 ff7e 	bl	900038dc <HAL_DMA2D_ConfigLayer>
900029e0:	4603      	mov	r3, r0
900029e2:	2b00      	cmp	r3, #0
900029e4:	d10e      	bne.n	90002a04 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
900029e6:	68b9      	ldr	r1, [r7, #8]
900029e8:	687a      	ldr	r2, [r7, #4]
900029ea:	2301      	movs	r3, #1
900029ec:	9300      	str	r3, [sp, #0]
900029ee:	683b      	ldr	r3, [r7, #0]
900029f0:	4807      	ldr	r0, [pc, #28]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
900029f2:	f000 fe5f 	bl	900036b4 <HAL_DMA2D_Start>
900029f6:	4603      	mov	r3, r0
900029f8:	2b00      	cmp	r3, #0
900029fa:	d103      	bne.n	90002a04 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900029fc:	2132      	movs	r1, #50	@ 0x32
900029fe:	4804      	ldr	r0, [pc, #16]	@ (90002a10 <LL_ConvertLineToRGB+0xa0>)
90002a00:	f000 fe83 	bl	9000370a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002a04:	bf00      	nop
90002a06:	3718      	adds	r7, #24
90002a08:	46bd      	mov	sp, r7
90002a0a:	bd80      	pop	{r7, pc}
90002a0c:	200011f4 	.word	0x200011f4
90002a10:	200010e4 	.word	0x200010e4
90002a14:	52001000 	.word	0x52001000

90002a18 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002a18:	b580      	push	{r7, lr}
90002a1a:	b08e      	sub	sp, #56	@ 0x38
90002a1c:	af00      	add	r7, sp, #0
90002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002a20:	687b      	ldr	r3, [r7, #4]
90002a22:	681b      	ldr	r3, [r3, #0]
90002a24:	4a5b      	ldr	r2, [pc, #364]	@ (90002b94 <LTDC_MspInit+0x17c>)
90002a26:	4293      	cmp	r3, r2
90002a28:	f040 80b0 	bne.w	90002b8c <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002a32:	4a59      	ldr	r2, [pc, #356]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a34:	f043 0308 	orr.w	r3, r3, #8
90002a38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002a3c:	4b56      	ldr	r3, [pc, #344]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002a42:	f003 0308 	and.w	r3, r3, #8
90002a46:	623b      	str	r3, [r7, #32]
90002a48:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002a4a:	4b53      	ldr	r3, [pc, #332]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a50:	4a51      	ldr	r2, [pc, #324]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a5a:	4b4f      	ldr	r3, [pc, #316]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002a64:	61fb      	str	r3, [r7, #28]
90002a66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002a68:	4b4b      	ldr	r3, [pc, #300]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a6e:	4a4a      	ldr	r2, [pc, #296]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a78:	4b47      	ldr	r3, [pc, #284]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002a82:	61bb      	str	r3, [r7, #24]
90002a84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002a86:	4b44      	ldr	r3, [pc, #272]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a8c:	4a42      	ldr	r2, [pc, #264]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a96:	4b40      	ldr	r3, [pc, #256]	@ (90002b98 <LTDC_MspInit+0x180>)
90002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002aa0:	617b      	str	r3, [r7, #20]
90002aa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002aa4:	4b3c      	ldr	r3, [pc, #240]	@ (90002b98 <LTDC_MspInit+0x180>)
90002aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aaa:	4a3b      	ldr	r2, [pc, #236]	@ (90002b98 <LTDC_MspInit+0x180>)
90002aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ab4:	4b38      	ldr	r3, [pc, #224]	@ (90002b98 <LTDC_MspInit+0x180>)
90002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002abe:	613b      	str	r3, [r7, #16]
90002ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002ac2:	4b35      	ldr	r3, [pc, #212]	@ (90002b98 <LTDC_MspInit+0x180>)
90002ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ac8:	4a33      	ldr	r2, [pc, #204]	@ (90002b98 <LTDC_MspInit+0x180>)
90002aca:	f043 0308 	orr.w	r3, r3, #8
90002ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ad2:	4b31      	ldr	r3, [pc, #196]	@ (90002b98 <LTDC_MspInit+0x180>)
90002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ad8:	f003 0308 	and.w	r3, r3, #8
90002adc:	60fb      	str	r3, [r7, #12]
90002ade:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002ae0:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002ae6:	2302      	movs	r3, #2
90002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002aea:	2300      	movs	r3, #0
90002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002aee:	2302      	movs	r3, #2
90002af0:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002af2:	230e      	movs	r3, #14
90002af4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002afa:	4619      	mov	r1, r3
90002afc:	4827      	ldr	r0, [pc, #156]	@ (90002b9c <LTDC_MspInit+0x184>)
90002afe:	f001 f841 	bl	90003b84 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002b06:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b08:	230e      	movs	r3, #14
90002b0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b10:	4619      	mov	r1, r3
90002b12:	4823      	ldr	r0, [pc, #140]	@ (90002ba0 <LTDC_MspInit+0x188>)
90002b14:	f001 f836 	bl	90003b84 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002b18:	23ff      	movs	r3, #255	@ 0xff
90002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b1c:	230e      	movs	r3, #14
90002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b24:	4619      	mov	r1, r3
90002b26:	481f      	ldr	r0, [pc, #124]	@ (90002ba4 <LTDC_MspInit+0x18c>)
90002b28:	f001 f82c 	bl	90003b84 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002b2c:	f240 2302 	movw	r3, #514	@ 0x202
90002b30:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002b32:	2302      	movs	r3, #2
90002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002b36:	2300      	movs	r3, #0
90002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002b3a:	2302      	movs	r3, #2
90002b3c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b3e:	230e      	movs	r3, #14
90002b40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b46:	4619      	mov	r1, r3
90002b48:	4817      	ldr	r0, [pc, #92]	@ (90002ba8 <LTDC_MspInit+0x190>)
90002b4a:	f001 f81b 	bl	90003b84 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002b4e:	2380      	movs	r3, #128	@ 0x80
90002b50:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002b52:	2301      	movs	r3, #1
90002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b5a:	4619      	mov	r1, r3
90002b5c:	4813      	ldr	r0, [pc, #76]	@ (90002bac <LTDC_MspInit+0x194>)
90002b5e:	f001 f811 	bl	90003b84 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002b62:	2201      	movs	r2, #1
90002b64:	2180      	movs	r1, #128	@ 0x80
90002b66:	4811      	ldr	r0, [pc, #68]	@ (90002bac <LTDC_MspInit+0x194>)
90002b68:	f001 f9d4 	bl	90003f14 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (90002b98 <LTDC_MspInit+0x180>)
90002b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002b72:	4a09      	ldr	r2, [pc, #36]	@ (90002b98 <LTDC_MspInit+0x180>)
90002b74:	f043 0308 	orr.w	r3, r3, #8
90002b78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002b7c:	4b06      	ldr	r3, [pc, #24]	@ (90002b98 <LTDC_MspInit+0x180>)
90002b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002b82:	4a05      	ldr	r2, [pc, #20]	@ (90002b98 <LTDC_MspInit+0x180>)
90002b84:	f023 0308 	bic.w	r3, r3, #8
90002b88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002b8c:	bf00      	nop
90002b8e:	3738      	adds	r7, #56	@ 0x38
90002b90:	46bd      	mov	sp, r7
90002b92:	bd80      	pop	{r7, pc}
90002b94:	50001000 	.word	0x50001000
90002b98:	58024400 	.word	0x58024400
90002b9c:	58022000 	.word	0x58022000
90002ba0:	58022400 	.word	0x58022400
90002ba4:	58022800 	.word	0x58022800
90002ba8:	58021c00 	.word	0x58021c00
90002bac:	58020c00 	.word	0x58020c00

90002bb0 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002bb0:	b480      	push	{r7}
90002bb2:	b085      	sub	sp, #20
90002bb4:	af00      	add	r7, sp, #0
90002bb6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002bb8:	687b      	ldr	r3, [r7, #4]
90002bba:	681b      	ldr	r3, [r3, #0]
90002bbc:	4a11      	ldr	r2, [pc, #68]	@ (90002c04 <DMA2D_MspInit+0x54>)
90002bbe:	4293      	cmp	r3, r2
90002bc0:	d11a      	bne.n	90002bf8 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002bc2:	4b11      	ldr	r3, [pc, #68]	@ (90002c08 <DMA2D_MspInit+0x58>)
90002bc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002bc8:	4a0f      	ldr	r2, [pc, #60]	@ (90002c08 <DMA2D_MspInit+0x58>)
90002bca:	f043 0310 	orr.w	r3, r3, #16
90002bce:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (90002c08 <DMA2D_MspInit+0x58>)
90002bd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002bd8:	f003 0310 	and.w	r3, r3, #16
90002bdc:	60fb      	str	r3, [r7, #12]
90002bde:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002be0:	4b09      	ldr	r3, [pc, #36]	@ (90002c08 <DMA2D_MspInit+0x58>)
90002be2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002be4:	4a08      	ldr	r2, [pc, #32]	@ (90002c08 <DMA2D_MspInit+0x58>)
90002be6:	f043 0310 	orr.w	r3, r3, #16
90002bea:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002bec:	4b06      	ldr	r3, [pc, #24]	@ (90002c08 <DMA2D_MspInit+0x58>)
90002bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002bf0:	4a05      	ldr	r2, [pc, #20]	@ (90002c08 <DMA2D_MspInit+0x58>)
90002bf2:	f023 0310 	bic.w	r3, r3, #16
90002bf6:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002bf8:	bf00      	nop
90002bfa:	3714      	adds	r7, #20
90002bfc:	46bd      	mov	sp, r7
90002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
90002c02:	4770      	bx	lr
90002c04:	52001000 	.word	0x52001000
90002c08:	58024400 	.word	0x58024400

90002c0c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002c0c:	b580      	push	{r7, lr}
90002c0e:	b08a      	sub	sp, #40	@ 0x28
90002c10:	af00      	add	r7, sp, #0
90002c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002c14:	4b18      	ldr	r3, [pc, #96]	@ (90002c78 <TIMx_PWM_MspInit+0x6c>)
90002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c1a:	4a17      	ldr	r2, [pc, #92]	@ (90002c78 <TIMx_PWM_MspInit+0x6c>)
90002c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002c24:	4b14      	ldr	r3, [pc, #80]	@ (90002c78 <TIMx_PWM_MspInit+0x6c>)
90002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002c2e:	613b      	str	r3, [r7, #16]
90002c30:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002c32:	4b11      	ldr	r3, [pc, #68]	@ (90002c78 <TIMx_PWM_MspInit+0x6c>)
90002c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002c38:	4a0f      	ldr	r2, [pc, #60]	@ (90002c78 <TIMx_PWM_MspInit+0x6c>)
90002c3a:	f043 0302 	orr.w	r3, r3, #2
90002c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002c42:	4b0d      	ldr	r3, [pc, #52]	@ (90002c78 <TIMx_PWM_MspInit+0x6c>)
90002c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002c48:	f003 0302 	and.w	r3, r3, #2
90002c4c:	60fb      	str	r3, [r7, #12]
90002c4e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002c50:	2302      	movs	r3, #2
90002c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002c54:	2300      	movs	r3, #0
90002c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002c58:	2301      	movs	r3, #1
90002c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002c5c:	2303      	movs	r3, #3
90002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002c60:	2301      	movs	r3, #1
90002c62:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002c64:	f107 0314 	add.w	r3, r7, #20
90002c68:	4619      	mov	r1, r3
90002c6a:	4804      	ldr	r0, [pc, #16]	@ (90002c7c <TIMx_PWM_MspInit+0x70>)
90002c6c:	f000 ff8a 	bl	90003b84 <HAL_GPIO_Init>
}
90002c70:	bf00      	nop
90002c72:	3728      	adds	r7, #40	@ 0x28
90002c74:	46bd      	mov	sp, r7
90002c76:	bd80      	pop	{r7, pc}
90002c78:	58024400 	.word	0x58024400
90002c7c:	58022800 	.word	0x58022800

90002c80 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002c80:	b580      	push	{r7, lr}
90002c82:	b082      	sub	sp, #8
90002c84:	af00      	add	r7, sp, #0
90002c86:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002c88:	687b      	ldr	r3, [r7, #4]
90002c8a:	4a11      	ldr	r2, [pc, #68]	@ (90002cd0 <TIMx_PWM_Init+0x50>)
90002c8c:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002c8e:	6878      	ldr	r0, [r7, #4]
90002c90:	f006 fe82 	bl	90009998 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002c94:	6878      	ldr	r0, [r7, #4]
90002c96:	f7ff ffb9 	bl	90002c0c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002c9a:	687b      	ldr	r3, [r7, #4]
90002c9c:	2204      	movs	r2, #4
90002c9e:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002ca0:	687b      	ldr	r3, [r7, #4]
90002ca2:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002ca6:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002ca8:	687b      	ldr	r3, [r7, #4]
90002caa:	2200      	movs	r2, #0
90002cac:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002cae:	687b      	ldr	r3, [r7, #4]
90002cb0:	2200      	movs	r2, #0
90002cb2:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002cb4:	687b      	ldr	r3, [r7, #4]
90002cb6:	2200      	movs	r2, #0
90002cb8:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002cba:	687b      	ldr	r3, [r7, #4]
90002cbc:	2200      	movs	r2, #0
90002cbe:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002cc0:	6878      	ldr	r0, [r7, #4]
90002cc2:	f006 fe12 	bl	900098ea <HAL_TIM_PWM_Init>
}
90002cc6:	bf00      	nop
90002cc8:	3708      	adds	r7, #8
90002cca:	46bd      	mov	sp, r7
90002ccc:	bd80      	pop	{r7, pc}
90002cce:	bf00      	nop
90002cd0:	40010400 	.word	0x40010400

90002cd4 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002cd4:	b580      	push	{r7, lr}
90002cd6:	b084      	sub	sp, #16
90002cd8:	af00      	add	r7, sp, #0
90002cda:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002cdc:	2300      	movs	r3, #0
90002cde:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002ce0:	687b      	ldr	r3, [r7, #4]
90002ce2:	2b00      	cmp	r3, #0
90002ce4:	d003      	beq.n	90002cee <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002ce6:	f06f 0301 	mvn.w	r3, #1
90002cea:	60fb      	str	r3, [r7, #12]
90002cec:	e044      	b.n	90002d78 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002cee:	687b      	ldr	r3, [r7, #4]
90002cf0:	2234      	movs	r2, #52	@ 0x34
90002cf2:	fb02 f303 	mul.w	r3, r2, r3
90002cf6:	4a23      	ldr	r2, [pc, #140]	@ (90002d84 <BSP_SDRAM_Init+0xb0>)
90002cf8:	4413      	add	r3, r2
90002cfa:	4618      	mov	r0, r3
90002cfc:	f000 f892 	bl	90002e24 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002d00:	687b      	ldr	r3, [r7, #4]
90002d02:	2234      	movs	r2, #52	@ 0x34
90002d04:	fb02 f303 	mul.w	r3, r2, r3
90002d08:	4a1e      	ldr	r2, [pc, #120]	@ (90002d84 <BSP_SDRAM_Init+0xb0>)
90002d0a:	4413      	add	r3, r2
90002d0c:	2210      	movs	r2, #16
90002d0e:	2104      	movs	r1, #4
90002d10:	4618      	mov	r0, r3
90002d12:	f000 f83b 	bl	90002d8c <MX_SDRAM_BANK2_Init>
90002d16:	4603      	mov	r3, r0
90002d18:	2b00      	cmp	r3, #0
90002d1a:	d003      	beq.n	90002d24 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002d1c:	f04f 33ff 	mov.w	r3, #4294967295
90002d20:	60fb      	str	r3, [r7, #12]
90002d22:	e029      	b.n	90002d78 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002d24:	4b18      	ldr	r3, [pc, #96]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d26:	2208      	movs	r2, #8
90002d28:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002d2a:	4b17      	ldr	r3, [pc, #92]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d2c:	2203      	movs	r2, #3
90002d2e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002d30:	4b15      	ldr	r3, [pc, #84]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d32:	f240 6203 	movw	r2, #1539	@ 0x603
90002d36:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002d38:	4b13      	ldr	r3, [pc, #76]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d3a:	2200      	movs	r2, #0
90002d3c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002d3e:	4b12      	ldr	r3, [pc, #72]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d40:	2200      	movs	r2, #0
90002d42:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002d44:	4b10      	ldr	r3, [pc, #64]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d46:	2230      	movs	r2, #48	@ 0x30
90002d48:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002d4a:	4b0f      	ldr	r3, [pc, #60]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d4c:	2200      	movs	r2, #0
90002d4e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002d50:	4b0d      	ldr	r3, [pc, #52]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002d56:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002d58:	687b      	ldr	r3, [r7, #4]
90002d5a:	2234      	movs	r2, #52	@ 0x34
90002d5c:	fb02 f303 	mul.w	r3, r2, r3
90002d60:	4a08      	ldr	r2, [pc, #32]	@ (90002d84 <BSP_SDRAM_Init+0xb0>)
90002d62:	4413      	add	r3, r2
90002d64:	4908      	ldr	r1, [pc, #32]	@ (90002d88 <BSP_SDRAM_Init+0xb4>)
90002d66:	4618      	mov	r0, r3
90002d68:	f7fe fc3d 	bl	900015e6 <MT48LC4M32B2_Init>
90002d6c:	4603      	mov	r3, r0
90002d6e:	2b00      	cmp	r3, #0
90002d70:	d002      	beq.n	90002d78 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002d72:	f06f 0304 	mvn.w	r3, #4
90002d76:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002d78:	68fb      	ldr	r3, [r7, #12]
}
90002d7a:	4618      	mov	r0, r3
90002d7c:	3710      	adds	r7, #16
90002d7e:	46bd      	mov	sp, r7
90002d80:	bd80      	pop	{r7, pc}
90002d82:	bf00      	nop
90002d84:	20001214 	.word	0x20001214
90002d88:	20001248 	.word	0x20001248

90002d8c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002d8c:	b580      	push	{r7, lr}
90002d8e:	b08c      	sub	sp, #48	@ 0x30
90002d90:	af00      	add	r7, sp, #0
90002d92:	60f8      	str	r0, [r7, #12]
90002d94:	60b9      	str	r1, [r7, #8]
90002d96:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002d98:	4b20      	ldr	r3, [pc, #128]	@ (90002e1c <MX_SDRAM_BANK2_Init+0x90>)
90002d9a:	4a21      	ldr	r2, [pc, #132]	@ (90002e20 <MX_SDRAM_BANK2_Init+0x94>)
90002d9c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002d9e:	68fb      	ldr	r3, [r7, #12]
90002da0:	2201      	movs	r2, #1
90002da2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002da4:	68fb      	ldr	r3, [r7, #12]
90002da6:	2200      	movs	r2, #0
90002da8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002daa:	68fb      	ldr	r3, [r7, #12]
90002dac:	68ba      	ldr	r2, [r7, #8]
90002dae:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002db0:	68fb      	ldr	r3, [r7, #12]
90002db2:	687a      	ldr	r2, [r7, #4]
90002db4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002db6:	4b19      	ldr	r3, [pc, #100]	@ (90002e1c <MX_SDRAM_BANK2_Init+0x90>)
90002db8:	2240      	movs	r2, #64	@ 0x40
90002dba:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002dbc:	68fb      	ldr	r3, [r7, #12]
90002dbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002dc2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002dc4:	68fb      	ldr	r3, [r7, #12]
90002dc6:	2200      	movs	r2, #0
90002dc8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002dca:	68fb      	ldr	r3, [r7, #12]
90002dcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002dd0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002dd2:	68fb      	ldr	r3, [r7, #12]
90002dd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002dda:	68fb      	ldr	r3, [r7, #12]
90002ddc:	2200      	movs	r2, #0
90002dde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002de0:	2302      	movs	r3, #2
90002de2:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002de4:	2307      	movs	r3, #7
90002de6:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002de8:	2304      	movs	r3, #4
90002dea:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002dec:	2307      	movs	r3, #7
90002dee:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002df0:	2302      	movs	r3, #2
90002df2:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002df4:	2302      	movs	r3, #2
90002df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002df8:	2302      	movs	r3, #2
90002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002dfc:	f107 0314 	add.w	r3, r7, #20
90002e00:	4619      	mov	r1, r3
90002e02:	68f8      	ldr	r0, [r7, #12]
90002e04:	f006 fcce 	bl	900097a4 <HAL_SDRAM_Init>
90002e08:	4603      	mov	r3, r0
90002e0a:	2b00      	cmp	r3, #0
90002e0c:	d001      	beq.n	90002e12 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002e0e:	2301      	movs	r3, #1
90002e10:	e000      	b.n	90002e14 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002e12:	2300      	movs	r3, #0
}
90002e14:	4618      	mov	r0, r3
90002e16:	3730      	adds	r7, #48	@ 0x30
90002e18:	46bd      	mov	sp, r7
90002e1a:	bd80      	pop	{r7, pc}
90002e1c:	20001214 	.word	0x20001214
90002e20:	52004140 	.word	0x52004140

90002e24 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002e24:	b580      	push	{r7, lr}
90002e26:	b08e      	sub	sp, #56	@ 0x38
90002e28:	af00      	add	r7, sp, #0
90002e2a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002e2c:	4b73      	ldr	r3, [pc, #460]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e32:	4a72      	ldr	r2, [pc, #456]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002e38:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002e3c:	4b6f      	ldr	r3, [pc, #444]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002e46:	623b      	str	r3, [r7, #32]
90002e48:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002e4a:	4b6c      	ldr	r3, [pc, #432]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e50:	4a6a      	ldr	r2, [pc, #424]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e52:	f043 0301 	orr.w	r3, r3, #1
90002e56:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002e5a:	4b68      	ldr	r3, [pc, #416]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e60:	f003 0301 	and.w	r3, r3, #1
90002e64:	61fb      	str	r3, [r7, #28]
90002e66:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002e68:	4b64      	ldr	r3, [pc, #400]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e6e:	4a63      	ldr	r2, [pc, #396]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e70:	f043 0308 	orr.w	r3, r3, #8
90002e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e78:	4b60      	ldr	r3, [pc, #384]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e7e:	f003 0308 	and.w	r3, r3, #8
90002e82:	61bb      	str	r3, [r7, #24]
90002e84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002e86:	4b5d      	ldr	r3, [pc, #372]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e8c:	4a5b      	ldr	r2, [pc, #364]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e8e:	f043 0310 	orr.w	r3, r3, #16
90002e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e96:	4b59      	ldr	r3, [pc, #356]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e9c:	f003 0310 	and.w	r3, r3, #16
90002ea0:	617b      	str	r3, [r7, #20]
90002ea2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002ea4:	4b55      	ldr	r3, [pc, #340]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002eaa:	4a54      	ldr	r2, [pc, #336]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002eac:	f043 0320 	orr.w	r3, r3, #32
90002eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002eb4:	4b51      	ldr	r3, [pc, #324]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002eba:	f003 0320 	and.w	r3, r3, #32
90002ebe:	613b      	str	r3, [r7, #16]
90002ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002ec2:	4b4e      	ldr	r3, [pc, #312]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ec8:	4a4c      	ldr	r2, [pc, #304]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ed2:	4b4a      	ldr	r3, [pc, #296]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002edc:	60fb      	str	r3, [r7, #12]
90002ede:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002ee0:	4b46      	ldr	r3, [pc, #280]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ee6:	4a45      	ldr	r2, [pc, #276]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ef0:	4b42      	ldr	r3, [pc, #264]	@ (90002ffc <SDRAM_MspInit+0x1d8>)
90002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002efa:	60bb      	str	r3, [r7, #8]
90002efc:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002efe:	2302      	movs	r3, #2
90002f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002f02:	2301      	movs	r3, #1
90002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002f06:	2303      	movs	r3, #3
90002f08:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002f0a:	230c      	movs	r3, #12
90002f0c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002f0e:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002f12:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f18:	4619      	mov	r1, r3
90002f1a:	4839      	ldr	r0, [pc, #228]	@ (90003000 <SDRAM_MspInit+0x1dc>)
90002f1c:	f000 fe32 	bl	90003b84 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002f20:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002f24:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f2a:	4619      	mov	r1, r3
90002f2c:	4835      	ldr	r0, [pc, #212]	@ (90003004 <SDRAM_MspInit+0x1e0>)
90002f2e:	f000 fe29 	bl	90003b84 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002f32:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002f36:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f3c:	4619      	mov	r1, r3
90002f3e:	4832      	ldr	r0, [pc, #200]	@ (90003008 <SDRAM_MspInit+0x1e4>)
90002f40:	f000 fe20 	bl	90003b84 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002f44:	f248 1333 	movw	r3, #33075	@ 0x8133
90002f48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f4e:	4619      	mov	r1, r3
90002f50:	482e      	ldr	r0, [pc, #184]	@ (9000300c <SDRAM_MspInit+0x1e8>)
90002f52:	f000 fe17 	bl	90003b84 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002f56:	23e0      	movs	r3, #224	@ 0xe0
90002f58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f5e:	4619      	mov	r1, r3
90002f60:	482b      	ldr	r0, [pc, #172]	@ (90003010 <SDRAM_MspInit+0x1ec>)
90002f62:	f000 fe0f 	bl	90003b84 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002f66:	4b2b      	ldr	r3, [pc, #172]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002f6c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002f6e:	4b29      	ldr	r3, [pc, #164]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002f74:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002f76:	4b27      	ldr	r3, [pc, #156]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f78:	2280      	movs	r2, #128	@ 0x80
90002f7a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002f7c:	4b25      	ldr	r3, [pc, #148]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f7e:	2200      	movs	r2, #0
90002f80:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002f82:	4b24      	ldr	r3, [pc, #144]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f84:	f240 2202 	movw	r2, #514	@ 0x202
90002f88:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002f8a:	4b22      	ldr	r3, [pc, #136]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f8c:	f640 0208 	movw	r2, #2056	@ 0x808
90002f90:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002f92:	4b20      	ldr	r3, [pc, #128]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f94:	2220      	movs	r2, #32
90002f96:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002f98:	4b1e      	ldr	r3, [pc, #120]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002f9a:	2280      	movs	r2, #128	@ 0x80
90002f9c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002f9e:	4b1d      	ldr	r3, [pc, #116]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002fa6:	4b1b      	ldr	r3, [pc, #108]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fa8:	2200      	movs	r2, #0
90002faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002fac:	4b19      	ldr	r3, [pc, #100]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fae:	2200      	movs	r2, #0
90002fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002fb2:	4b18      	ldr	r3, [pc, #96]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fb4:	2280      	movs	r2, #128	@ 0x80
90002fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002fb8:	4b16      	ldr	r3, [pc, #88]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fba:	2200      	movs	r2, #0
90002fbc:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002fbe:	4b15      	ldr	r3, [pc, #84]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fc0:	2200      	movs	r2, #0
90002fc2:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002fc4:	4b13      	ldr	r3, [pc, #76]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fc6:	4a14      	ldr	r2, [pc, #80]	@ (90003018 <SDRAM_MspInit+0x1f4>)
90002fc8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002fca:	4b14      	ldr	r3, [pc, #80]	@ (9000301c <SDRAM_MspInit+0x1f8>)
90002fcc:	4a11      	ldr	r2, [pc, #68]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fce:	631a      	str	r2, [r3, #48]	@ 0x30
90002fd0:	4b10      	ldr	r3, [pc, #64]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fd2:	4a12      	ldr	r2, [pc, #72]	@ (9000301c <SDRAM_MspInit+0x1f8>)
90002fd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002fd6:	480f      	ldr	r0, [pc, #60]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fd8:	f003 fce2 	bl	900069a0 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002fdc:	480d      	ldr	r0, [pc, #52]	@ (90003014 <SDRAM_MspInit+0x1f0>)
90002fde:	f003 fc93 	bl	90006908 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002fe2:	2200      	movs	r2, #0
90002fe4:	210f      	movs	r1, #15
90002fe6:	207a      	movs	r0, #122	@ 0x7a
90002fe8:	f000 fa49 	bl	9000347e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002fec:	207a      	movs	r0, #122	@ 0x7a
90002fee:	f000 fa60 	bl	900034b2 <HAL_NVIC_EnableIRQ>
}
90002ff2:	bf00      	nop
90002ff4:	3738      	adds	r7, #56	@ 0x38
90002ff6:	46bd      	mov	sp, r7
90002ff8:	bd80      	pop	{r7, pc}
90002ffa:	bf00      	nop
90002ffc:	58024400 	.word	0x58024400
90003000:	58020c00 	.word	0x58020c00
90003004:	58021000 	.word	0x58021000
90003008:	58021400 	.word	0x58021400
9000300c:	58021800 	.word	0x58021800
90003010:	58021c00 	.word	0x58021c00
90003014:	20001268 	.word	0x20001268
90003018:	52000040 	.word	0x52000040
9000301c:	20001214 	.word	0x20001214

90003020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90003020:	b480      	push	{r7}
90003022:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90003024:	4b29      	ldr	r3, [pc, #164]	@ (900030cc <SystemInit+0xac>)
90003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000302a:	4a28      	ldr	r2, [pc, #160]	@ (900030cc <SystemInit+0xac>)
9000302c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90003030:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90003034:	4b26      	ldr	r3, [pc, #152]	@ (900030d0 <SystemInit+0xb0>)
90003036:	681b      	ldr	r3, [r3, #0]
90003038:	4a25      	ldr	r2, [pc, #148]	@ (900030d0 <SystemInit+0xb0>)
9000303a:	f043 0301 	orr.w	r3, r3, #1
9000303e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90003040:	4b23      	ldr	r3, [pc, #140]	@ (900030d0 <SystemInit+0xb0>)
90003042:	2200      	movs	r2, #0
90003044:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90003046:	4b22      	ldr	r3, [pc, #136]	@ (900030d0 <SystemInit+0xb0>)
90003048:	681a      	ldr	r2, [r3, #0]
9000304a:	4921      	ldr	r1, [pc, #132]	@ (900030d0 <SystemInit+0xb0>)
9000304c:	4b21      	ldr	r3, [pc, #132]	@ (900030d4 <SystemInit+0xb4>)
9000304e:	4013      	ands	r3, r2
90003050:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90003052:	4b1f      	ldr	r3, [pc, #124]	@ (900030d0 <SystemInit+0xb0>)
90003054:	2200      	movs	r2, #0
90003056:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003058:	4b1d      	ldr	r3, [pc, #116]	@ (900030d0 <SystemInit+0xb0>)
9000305a:	2200      	movs	r2, #0
9000305c:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
9000305e:	4b1c      	ldr	r3, [pc, #112]	@ (900030d0 <SystemInit+0xb0>)
90003060:	2200      	movs	r2, #0
90003062:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90003064:	4b1a      	ldr	r3, [pc, #104]	@ (900030d0 <SystemInit+0xb0>)
90003066:	2200      	movs	r2, #0
90003068:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
9000306a:	4b19      	ldr	r3, [pc, #100]	@ (900030d0 <SystemInit+0xb0>)
9000306c:	2200      	movs	r2, #0
9000306e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003070:	4b17      	ldr	r3, [pc, #92]	@ (900030d0 <SystemInit+0xb0>)
90003072:	2200      	movs	r2, #0
90003074:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90003076:	4b16      	ldr	r3, [pc, #88]	@ (900030d0 <SystemInit+0xb0>)
90003078:	2200      	movs	r2, #0
9000307a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
9000307c:	4b14      	ldr	r3, [pc, #80]	@ (900030d0 <SystemInit+0xb0>)
9000307e:	2200      	movs	r2, #0
90003080:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90003082:	4b13      	ldr	r3, [pc, #76]	@ (900030d0 <SystemInit+0xb0>)
90003084:	2200      	movs	r2, #0
90003086:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90003088:	4b11      	ldr	r3, [pc, #68]	@ (900030d0 <SystemInit+0xb0>)
9000308a:	2200      	movs	r2, #0
9000308c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
9000308e:	4b10      	ldr	r3, [pc, #64]	@ (900030d0 <SystemInit+0xb0>)
90003090:	2200      	movs	r2, #0
90003092:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90003094:	4b0e      	ldr	r3, [pc, #56]	@ (900030d0 <SystemInit+0xb0>)
90003096:	681b      	ldr	r3, [r3, #0]
90003098:	4a0d      	ldr	r2, [pc, #52]	@ (900030d0 <SystemInit+0xb0>)
9000309a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000309e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
900030a0:	4b0b      	ldr	r3, [pc, #44]	@ (900030d0 <SystemInit+0xb0>)
900030a2:	2200      	movs	r2, #0
900030a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900030a6:	4b0c      	ldr	r3, [pc, #48]	@ (900030d8 <SystemInit+0xb8>)
900030a8:	681a      	ldr	r2, [r3, #0]
900030aa:	4b0c      	ldr	r3, [pc, #48]	@ (900030dc <SystemInit+0xbc>)
900030ac:	4013      	ands	r3, r2
900030ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900030b2:	d202      	bcs.n	900030ba <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
900030b4:	4b0a      	ldr	r3, [pc, #40]	@ (900030e0 <SystemInit+0xc0>)
900030b6:	2201      	movs	r2, #1
900030b8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
900030ba:	4b04      	ldr	r3, [pc, #16]	@ (900030cc <SystemInit+0xac>)
900030bc:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
900030c0:	609a      	str	r2, [r3, #8]
#endif  


}
900030c2:	bf00      	nop
900030c4:	46bd      	mov	sp, r7
900030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900030ca:	4770      	bx	lr
900030cc:	e000ed00 	.word	0xe000ed00
900030d0:	58024400 	.word	0x58024400
900030d4:	eaf6ed7f 	.word	0xeaf6ed7f
900030d8:	5c001000 	.word	0x5c001000
900030dc:	ffff0000 	.word	0xffff0000
900030e0:	51008108 	.word	0x51008108

900030e4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
900030e4:	b480      	push	{r7}
900030e6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
900030e8:	4b09      	ldr	r3, [pc, #36]	@ (90003110 <ExitRun0Mode+0x2c>)
900030ea:	68db      	ldr	r3, [r3, #12]
900030ec:	4a08      	ldr	r2, [pc, #32]	@ (90003110 <ExitRun0Mode+0x2c>)
900030ee:	f043 0302 	orr.w	r3, r3, #2
900030f2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
900030f4:	bf00      	nop
900030f6:	4b06      	ldr	r3, [pc, #24]	@ (90003110 <ExitRun0Mode+0x2c>)
900030f8:	685b      	ldr	r3, [r3, #4]
900030fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900030fe:	2b00      	cmp	r3, #0
90003100:	d0f9      	beq.n	900030f6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90003102:	bf00      	nop
90003104:	bf00      	nop
90003106:	46bd      	mov	sp, r7
90003108:	f85d 7b04 	ldr.w	r7, [sp], #4
9000310c:	4770      	bx	lr
9000310e:	bf00      	nop
90003110:	58024800 	.word	0x58024800

90003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90003114:	b580      	push	{r7, lr}
90003116:	b082      	sub	sp, #8
90003118:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000311a:	2003      	movs	r0, #3
9000311c:	f000 f9a4 	bl	90003468 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90003120:	f004 fb3e 	bl	900077a0 <HAL_RCC_GetSysClockFreq>
90003124:	4602      	mov	r2, r0
90003126:	4b15      	ldr	r3, [pc, #84]	@ (9000317c <HAL_Init+0x68>)
90003128:	699b      	ldr	r3, [r3, #24]
9000312a:	0a1b      	lsrs	r3, r3, #8
9000312c:	f003 030f 	and.w	r3, r3, #15
90003130:	4913      	ldr	r1, [pc, #76]	@ (90003180 <HAL_Init+0x6c>)
90003132:	5ccb      	ldrb	r3, [r1, r3]
90003134:	f003 031f 	and.w	r3, r3, #31
90003138:	fa22 f303 	lsr.w	r3, r2, r3
9000313c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000313e:	4b0f      	ldr	r3, [pc, #60]	@ (9000317c <HAL_Init+0x68>)
90003140:	699b      	ldr	r3, [r3, #24]
90003142:	f003 030f 	and.w	r3, r3, #15
90003146:	4a0e      	ldr	r2, [pc, #56]	@ (90003180 <HAL_Init+0x6c>)
90003148:	5cd3      	ldrb	r3, [r2, r3]
9000314a:	f003 031f 	and.w	r3, r3, #31
9000314e:	687a      	ldr	r2, [r7, #4]
90003150:	fa22 f303 	lsr.w	r3, r2, r3
90003154:	4a0b      	ldr	r2, [pc, #44]	@ (90003184 <HAL_Init+0x70>)
90003156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003158:	4a0b      	ldr	r2, [pc, #44]	@ (90003188 <HAL_Init+0x74>)
9000315a:	687b      	ldr	r3, [r7, #4]
9000315c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000315e:	200f      	movs	r0, #15
90003160:	f000 f81c 	bl	9000319c <HAL_InitTick>
90003164:	4603      	mov	r3, r0
90003166:	2b00      	cmp	r3, #0
90003168:	d001      	beq.n	9000316e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
9000316a:	2301      	movs	r3, #1
9000316c:	e002      	b.n	90003174 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
9000316e:	f000 f80d 	bl	9000318c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90003172:	2300      	movs	r3, #0
}
90003174:	4618      	mov	r0, r3
90003176:	3708      	adds	r7, #8
90003178:	46bd      	mov	sp, r7
9000317a:	bd80      	pop	{r7, pc}
9000317c:	58024400 	.word	0x58024400
90003180:	9000d730 	.word	0x9000d730
90003184:	20000004 	.word	0x20000004
90003188:	20000000 	.word	0x20000000

9000318c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
9000318c:	b480      	push	{r7}
9000318e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90003190:	bf00      	nop
90003192:	46bd      	mov	sp, r7
90003194:	f85d 7b04 	ldr.w	r7, [sp], #4
90003198:	4770      	bx	lr
	...

9000319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
9000319c:	b580      	push	{r7, lr}
9000319e:	b082      	sub	sp, #8
900031a0:	af00      	add	r7, sp, #0
900031a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
900031a4:	4b15      	ldr	r3, [pc, #84]	@ (900031fc <HAL_InitTick+0x60>)
900031a6:	781b      	ldrb	r3, [r3, #0]
900031a8:	2b00      	cmp	r3, #0
900031aa:	d101      	bne.n	900031b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
900031ac:	2301      	movs	r3, #1
900031ae:	e021      	b.n	900031f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
900031b0:	4b13      	ldr	r3, [pc, #76]	@ (90003200 <HAL_InitTick+0x64>)
900031b2:	681a      	ldr	r2, [r3, #0]
900031b4:	4b11      	ldr	r3, [pc, #68]	@ (900031fc <HAL_InitTick+0x60>)
900031b6:	781b      	ldrb	r3, [r3, #0]
900031b8:	4619      	mov	r1, r3
900031ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900031be:	fbb3 f3f1 	udiv	r3, r3, r1
900031c2:	fbb2 f3f3 	udiv	r3, r2, r3
900031c6:	4618      	mov	r0, r3
900031c8:	f000 f981 	bl	900034ce <HAL_SYSTICK_Config>
900031cc:	4603      	mov	r3, r0
900031ce:	2b00      	cmp	r3, #0
900031d0:	d001      	beq.n	900031d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
900031d2:	2301      	movs	r3, #1
900031d4:	e00e      	b.n	900031f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900031d6:	687b      	ldr	r3, [r7, #4]
900031d8:	2b0f      	cmp	r3, #15
900031da:	d80a      	bhi.n	900031f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900031dc:	2200      	movs	r2, #0
900031de:	6879      	ldr	r1, [r7, #4]
900031e0:	f04f 30ff 	mov.w	r0, #4294967295
900031e4:	f000 f94b 	bl	9000347e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
900031e8:	4a06      	ldr	r2, [pc, #24]	@ (90003204 <HAL_InitTick+0x68>)
900031ea:	687b      	ldr	r3, [r7, #4]
900031ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
900031ee:	2300      	movs	r3, #0
900031f0:	e000      	b.n	900031f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
900031f2:	2301      	movs	r3, #1
}
900031f4:	4618      	mov	r0, r3
900031f6:	3708      	adds	r7, #8
900031f8:	46bd      	mov	sp, r7
900031fa:	bd80      	pop	{r7, pc}
900031fc:	2000000c 	.word	0x2000000c
90003200:	20000000 	.word	0x20000000
90003204:	20000008 	.word	0x20000008

90003208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003208:	b480      	push	{r7}
9000320a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
9000320c:	4b06      	ldr	r3, [pc, #24]	@ (90003228 <HAL_IncTick+0x20>)
9000320e:	781b      	ldrb	r3, [r3, #0]
90003210:	461a      	mov	r2, r3
90003212:	4b06      	ldr	r3, [pc, #24]	@ (9000322c <HAL_IncTick+0x24>)
90003214:	681b      	ldr	r3, [r3, #0]
90003216:	4413      	add	r3, r2
90003218:	4a04      	ldr	r2, [pc, #16]	@ (9000322c <HAL_IncTick+0x24>)
9000321a:	6013      	str	r3, [r2, #0]
}
9000321c:	bf00      	nop
9000321e:	46bd      	mov	sp, r7
90003220:	f85d 7b04 	ldr.w	r7, [sp], #4
90003224:	4770      	bx	lr
90003226:	bf00      	nop
90003228:	2000000c 	.word	0x2000000c
9000322c:	200012d4 	.word	0x200012d4

90003230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90003230:	b480      	push	{r7}
90003232:	af00      	add	r7, sp, #0
  return uwTick;
90003234:	4b03      	ldr	r3, [pc, #12]	@ (90003244 <HAL_GetTick+0x14>)
90003236:	681b      	ldr	r3, [r3, #0]
}
90003238:	4618      	mov	r0, r3
9000323a:	46bd      	mov	sp, r7
9000323c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003240:	4770      	bx	lr
90003242:	bf00      	nop
90003244:	200012d4 	.word	0x200012d4

90003248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90003248:	b580      	push	{r7, lr}
9000324a:	b084      	sub	sp, #16
9000324c:	af00      	add	r7, sp, #0
9000324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90003250:	f7ff ffee 	bl	90003230 <HAL_GetTick>
90003254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90003256:	687b      	ldr	r3, [r7, #4]
90003258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
9000325a:	68fb      	ldr	r3, [r7, #12]
9000325c:	f1b3 3fff 	cmp.w	r3, #4294967295
90003260:	d005      	beq.n	9000326e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90003262:	4b0a      	ldr	r3, [pc, #40]	@ (9000328c <HAL_Delay+0x44>)
90003264:	781b      	ldrb	r3, [r3, #0]
90003266:	461a      	mov	r2, r3
90003268:	68fb      	ldr	r3, [r7, #12]
9000326a:	4413      	add	r3, r2
9000326c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000326e:	bf00      	nop
90003270:	f7ff ffde 	bl	90003230 <HAL_GetTick>
90003274:	4602      	mov	r2, r0
90003276:	68bb      	ldr	r3, [r7, #8]
90003278:	1ad3      	subs	r3, r2, r3
9000327a:	68fa      	ldr	r2, [r7, #12]
9000327c:	429a      	cmp	r2, r3
9000327e:	d8f7      	bhi.n	90003270 <HAL_Delay+0x28>
  {
  }
}
90003280:	bf00      	nop
90003282:	bf00      	nop
90003284:	3710      	adds	r7, #16
90003286:	46bd      	mov	sp, r7
90003288:	bd80      	pop	{r7, pc}
9000328a:	bf00      	nop
9000328c:	2000000c 	.word	0x2000000c

90003290 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003290:	b480      	push	{r7}
90003292:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003294:	4b03      	ldr	r3, [pc, #12]	@ (900032a4 <HAL_GetREVID+0x14>)
90003296:	681b      	ldr	r3, [r3, #0]
90003298:	0c1b      	lsrs	r3, r3, #16
}
9000329a:	4618      	mov	r0, r3
9000329c:	46bd      	mov	sp, r7
9000329e:	f85d 7b04 	ldr.w	r7, [sp], #4
900032a2:	4770      	bx	lr
900032a4:	5c001000 	.word	0x5c001000

900032a8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
900032a8:	b480      	push	{r7}
900032aa:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
900032ac:	4b05      	ldr	r3, [pc, #20]	@ (900032c4 <HAL_EnableCompensationCell+0x1c>)
900032ae:	6a1b      	ldr	r3, [r3, #32]
900032b0:	4a04      	ldr	r2, [pc, #16]	@ (900032c4 <HAL_EnableCompensationCell+0x1c>)
900032b2:	f043 0301 	orr.w	r3, r3, #1
900032b6:	6213      	str	r3, [r2, #32]
}
900032b8:	bf00      	nop
900032ba:	46bd      	mov	sp, r7
900032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900032c0:	4770      	bx	lr
900032c2:	bf00      	nop
900032c4:	58000400 	.word	0x58000400

900032c8 <__NVIC_SetPriorityGrouping>:
{
900032c8:	b480      	push	{r7}
900032ca:	b085      	sub	sp, #20
900032cc:	af00      	add	r7, sp, #0
900032ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900032d0:	687b      	ldr	r3, [r7, #4]
900032d2:	f003 0307 	and.w	r3, r3, #7
900032d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900032d8:	4b0b      	ldr	r3, [pc, #44]	@ (90003308 <__NVIC_SetPriorityGrouping+0x40>)
900032da:	68db      	ldr	r3, [r3, #12]
900032dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900032de:	68ba      	ldr	r2, [r7, #8]
900032e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
900032e4:	4013      	ands	r3, r2
900032e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900032e8:	68fb      	ldr	r3, [r7, #12]
900032ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900032ec:	68bb      	ldr	r3, [r7, #8]
900032ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900032f0:	4b06      	ldr	r3, [pc, #24]	@ (9000330c <__NVIC_SetPriorityGrouping+0x44>)
900032f2:	4313      	orrs	r3, r2
900032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900032f6:	4a04      	ldr	r2, [pc, #16]	@ (90003308 <__NVIC_SetPriorityGrouping+0x40>)
900032f8:	68bb      	ldr	r3, [r7, #8]
900032fa:	60d3      	str	r3, [r2, #12]
}
900032fc:	bf00      	nop
900032fe:	3714      	adds	r7, #20
90003300:	46bd      	mov	sp, r7
90003302:	f85d 7b04 	ldr.w	r7, [sp], #4
90003306:	4770      	bx	lr
90003308:	e000ed00 	.word	0xe000ed00
9000330c:	05fa0000 	.word	0x05fa0000

90003310 <__NVIC_GetPriorityGrouping>:
{
90003310:	b480      	push	{r7}
90003312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003314:	4b04      	ldr	r3, [pc, #16]	@ (90003328 <__NVIC_GetPriorityGrouping+0x18>)
90003316:	68db      	ldr	r3, [r3, #12]
90003318:	0a1b      	lsrs	r3, r3, #8
9000331a:	f003 0307 	and.w	r3, r3, #7
}
9000331e:	4618      	mov	r0, r3
90003320:	46bd      	mov	sp, r7
90003322:	f85d 7b04 	ldr.w	r7, [sp], #4
90003326:	4770      	bx	lr
90003328:	e000ed00 	.word	0xe000ed00

9000332c <__NVIC_EnableIRQ>:
{
9000332c:	b480      	push	{r7}
9000332e:	b083      	sub	sp, #12
90003330:	af00      	add	r7, sp, #0
90003332:	4603      	mov	r3, r0
90003334:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000333a:	2b00      	cmp	r3, #0
9000333c:	db0b      	blt.n	90003356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000333e:	88fb      	ldrh	r3, [r7, #6]
90003340:	f003 021f 	and.w	r2, r3, #31
90003344:	4907      	ldr	r1, [pc, #28]	@ (90003364 <__NVIC_EnableIRQ+0x38>)
90003346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000334a:	095b      	lsrs	r3, r3, #5
9000334c:	2001      	movs	r0, #1
9000334e:	fa00 f202 	lsl.w	r2, r0, r2
90003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90003356:	bf00      	nop
90003358:	370c      	adds	r7, #12
9000335a:	46bd      	mov	sp, r7
9000335c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003360:	4770      	bx	lr
90003362:	bf00      	nop
90003364:	e000e100 	.word	0xe000e100

90003368 <__NVIC_SetPriority>:
{
90003368:	b480      	push	{r7}
9000336a:	b083      	sub	sp, #12
9000336c:	af00      	add	r7, sp, #0
9000336e:	4603      	mov	r3, r0
90003370:	6039      	str	r1, [r7, #0]
90003372:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003378:	2b00      	cmp	r3, #0
9000337a:	db0a      	blt.n	90003392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000337c:	683b      	ldr	r3, [r7, #0]
9000337e:	b2da      	uxtb	r2, r3
90003380:	490c      	ldr	r1, [pc, #48]	@ (900033b4 <__NVIC_SetPriority+0x4c>)
90003382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003386:	0112      	lsls	r2, r2, #4
90003388:	b2d2      	uxtb	r2, r2
9000338a:	440b      	add	r3, r1
9000338c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003390:	e00a      	b.n	900033a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003392:	683b      	ldr	r3, [r7, #0]
90003394:	b2da      	uxtb	r2, r3
90003396:	4908      	ldr	r1, [pc, #32]	@ (900033b8 <__NVIC_SetPriority+0x50>)
90003398:	88fb      	ldrh	r3, [r7, #6]
9000339a:	f003 030f 	and.w	r3, r3, #15
9000339e:	3b04      	subs	r3, #4
900033a0:	0112      	lsls	r2, r2, #4
900033a2:	b2d2      	uxtb	r2, r2
900033a4:	440b      	add	r3, r1
900033a6:	761a      	strb	r2, [r3, #24]
}
900033a8:	bf00      	nop
900033aa:	370c      	adds	r7, #12
900033ac:	46bd      	mov	sp, r7
900033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900033b2:	4770      	bx	lr
900033b4:	e000e100 	.word	0xe000e100
900033b8:	e000ed00 	.word	0xe000ed00

900033bc <NVIC_EncodePriority>:
{
900033bc:	b480      	push	{r7}
900033be:	b089      	sub	sp, #36	@ 0x24
900033c0:	af00      	add	r7, sp, #0
900033c2:	60f8      	str	r0, [r7, #12]
900033c4:	60b9      	str	r1, [r7, #8]
900033c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900033c8:	68fb      	ldr	r3, [r7, #12]
900033ca:	f003 0307 	and.w	r3, r3, #7
900033ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900033d0:	69fb      	ldr	r3, [r7, #28]
900033d2:	f1c3 0307 	rsb	r3, r3, #7
900033d6:	2b04      	cmp	r3, #4
900033d8:	bf28      	it	cs
900033da:	2304      	movcs	r3, #4
900033dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900033de:	69fb      	ldr	r3, [r7, #28]
900033e0:	3304      	adds	r3, #4
900033e2:	2b06      	cmp	r3, #6
900033e4:	d902      	bls.n	900033ec <NVIC_EncodePriority+0x30>
900033e6:	69fb      	ldr	r3, [r7, #28]
900033e8:	3b03      	subs	r3, #3
900033ea:	e000      	b.n	900033ee <NVIC_EncodePriority+0x32>
900033ec:	2300      	movs	r3, #0
900033ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900033f0:	f04f 32ff 	mov.w	r2, #4294967295
900033f4:	69bb      	ldr	r3, [r7, #24]
900033f6:	fa02 f303 	lsl.w	r3, r2, r3
900033fa:	43da      	mvns	r2, r3
900033fc:	68bb      	ldr	r3, [r7, #8]
900033fe:	401a      	ands	r2, r3
90003400:	697b      	ldr	r3, [r7, #20]
90003402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003404:	f04f 31ff 	mov.w	r1, #4294967295
90003408:	697b      	ldr	r3, [r7, #20]
9000340a:	fa01 f303 	lsl.w	r3, r1, r3
9000340e:	43d9      	mvns	r1, r3
90003410:	687b      	ldr	r3, [r7, #4]
90003412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003414:	4313      	orrs	r3, r2
}
90003416:	4618      	mov	r0, r3
90003418:	3724      	adds	r7, #36	@ 0x24
9000341a:	46bd      	mov	sp, r7
9000341c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003420:	4770      	bx	lr
	...

90003424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003424:	b580      	push	{r7, lr}
90003426:	b082      	sub	sp, #8
90003428:	af00      	add	r7, sp, #0
9000342a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
9000342c:	687b      	ldr	r3, [r7, #4]
9000342e:	3b01      	subs	r3, #1
90003430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003434:	d301      	bcc.n	9000343a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003436:	2301      	movs	r3, #1
90003438:	e00f      	b.n	9000345a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000343a:	4a0a      	ldr	r2, [pc, #40]	@ (90003464 <SysTick_Config+0x40>)
9000343c:	687b      	ldr	r3, [r7, #4]
9000343e:	3b01      	subs	r3, #1
90003440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90003442:	210f      	movs	r1, #15
90003444:	f04f 30ff 	mov.w	r0, #4294967295
90003448:	f7ff ff8e 	bl	90003368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
9000344c:	4b05      	ldr	r3, [pc, #20]	@ (90003464 <SysTick_Config+0x40>)
9000344e:	2200      	movs	r2, #0
90003450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90003452:	4b04      	ldr	r3, [pc, #16]	@ (90003464 <SysTick_Config+0x40>)
90003454:	2207      	movs	r2, #7
90003456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003458:	2300      	movs	r3, #0
}
9000345a:	4618      	mov	r0, r3
9000345c:	3708      	adds	r7, #8
9000345e:	46bd      	mov	sp, r7
90003460:	bd80      	pop	{r7, pc}
90003462:	bf00      	nop
90003464:	e000e010 	.word	0xe000e010

90003468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003468:	b580      	push	{r7, lr}
9000346a:	b082      	sub	sp, #8
9000346c:	af00      	add	r7, sp, #0
9000346e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003470:	6878      	ldr	r0, [r7, #4]
90003472:	f7ff ff29 	bl	900032c8 <__NVIC_SetPriorityGrouping>
}
90003476:	bf00      	nop
90003478:	3708      	adds	r7, #8
9000347a:	46bd      	mov	sp, r7
9000347c:	bd80      	pop	{r7, pc}

9000347e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000347e:	b580      	push	{r7, lr}
90003480:	b086      	sub	sp, #24
90003482:	af00      	add	r7, sp, #0
90003484:	4603      	mov	r3, r0
90003486:	60b9      	str	r1, [r7, #8]
90003488:	607a      	str	r2, [r7, #4]
9000348a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
9000348c:	f7ff ff40 	bl	90003310 <__NVIC_GetPriorityGrouping>
90003490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003492:	687a      	ldr	r2, [r7, #4]
90003494:	68b9      	ldr	r1, [r7, #8]
90003496:	6978      	ldr	r0, [r7, #20]
90003498:	f7ff ff90 	bl	900033bc <NVIC_EncodePriority>
9000349c:	4602      	mov	r2, r0
9000349e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
900034a2:	4611      	mov	r1, r2
900034a4:	4618      	mov	r0, r3
900034a6:	f7ff ff5f 	bl	90003368 <__NVIC_SetPriority>
}
900034aa:	bf00      	nop
900034ac:	3718      	adds	r7, #24
900034ae:	46bd      	mov	sp, r7
900034b0:	bd80      	pop	{r7, pc}

900034b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900034b2:	b580      	push	{r7, lr}
900034b4:	b082      	sub	sp, #8
900034b6:	af00      	add	r7, sp, #0
900034b8:	4603      	mov	r3, r0
900034ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900034bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034c0:	4618      	mov	r0, r3
900034c2:	f7ff ff33 	bl	9000332c <__NVIC_EnableIRQ>
}
900034c6:	bf00      	nop
900034c8:	3708      	adds	r7, #8
900034ca:	46bd      	mov	sp, r7
900034cc:	bd80      	pop	{r7, pc}

900034ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900034ce:	b580      	push	{r7, lr}
900034d0:	b082      	sub	sp, #8
900034d2:	af00      	add	r7, sp, #0
900034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900034d6:	6878      	ldr	r0, [r7, #4]
900034d8:	f7ff ffa4 	bl	90003424 <SysTick_Config>
900034dc:	4603      	mov	r3, r0
}
900034de:	4618      	mov	r0, r3
900034e0:	3708      	adds	r7, #8
900034e2:	46bd      	mov	sp, r7
900034e4:	bd80      	pop	{r7, pc}
	...

900034e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
900034e8:	b480      	push	{r7}
900034ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900034ec:	f3bf 8f5f 	dmb	sy
}
900034f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900034f2:	4b07      	ldr	r3, [pc, #28]	@ (90003510 <HAL_MPU_Disable+0x28>)
900034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900034f6:	4a06      	ldr	r2, [pc, #24]	@ (90003510 <HAL_MPU_Disable+0x28>)
900034f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900034fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900034fe:	4b05      	ldr	r3, [pc, #20]	@ (90003514 <HAL_MPU_Disable+0x2c>)
90003500:	2200      	movs	r2, #0
90003502:	605a      	str	r2, [r3, #4]
}
90003504:	bf00      	nop
90003506:	46bd      	mov	sp, r7
90003508:	f85d 7b04 	ldr.w	r7, [sp], #4
9000350c:	4770      	bx	lr
9000350e:	bf00      	nop
90003510:	e000ed00 	.word	0xe000ed00
90003514:	e000ed90 	.word	0xe000ed90

90003518 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003518:	b480      	push	{r7}
9000351a:	b083      	sub	sp, #12
9000351c:	af00      	add	r7, sp, #0
9000351e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003520:	4a0b      	ldr	r2, [pc, #44]	@ (90003550 <HAL_MPU_Enable+0x38>)
90003522:	687b      	ldr	r3, [r7, #4]
90003524:	f043 0301 	orr.w	r3, r3, #1
90003528:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000352a:	4b0a      	ldr	r3, [pc, #40]	@ (90003554 <HAL_MPU_Enable+0x3c>)
9000352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000352e:	4a09      	ldr	r2, [pc, #36]	@ (90003554 <HAL_MPU_Enable+0x3c>)
90003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003534:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003536:	f3bf 8f4f 	dsb	sy
}
9000353a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000353c:	f3bf 8f6f 	isb	sy
}
90003540:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003542:	bf00      	nop
90003544:	370c      	adds	r7, #12
90003546:	46bd      	mov	sp, r7
90003548:	f85d 7b04 	ldr.w	r7, [sp], #4
9000354c:	4770      	bx	lr
9000354e:	bf00      	nop
90003550:	e000ed90 	.word	0xe000ed90
90003554:	e000ed00 	.word	0xe000ed00

90003558 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003558:	b480      	push	{r7}
9000355a:	b083      	sub	sp, #12
9000355c:	af00      	add	r7, sp, #0
9000355e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003560:	687b      	ldr	r3, [r7, #4]
90003562:	785a      	ldrb	r2, [r3, #1]
90003564:	4b1b      	ldr	r3, [pc, #108]	@ (900035d4 <HAL_MPU_ConfigRegion+0x7c>)
90003566:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003568:	4b1a      	ldr	r3, [pc, #104]	@ (900035d4 <HAL_MPU_ConfigRegion+0x7c>)
9000356a:	691b      	ldr	r3, [r3, #16]
9000356c:	4a19      	ldr	r2, [pc, #100]	@ (900035d4 <HAL_MPU_ConfigRegion+0x7c>)
9000356e:	f023 0301 	bic.w	r3, r3, #1
90003572:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003574:	4a17      	ldr	r2, [pc, #92]	@ (900035d4 <HAL_MPU_ConfigRegion+0x7c>)
90003576:	687b      	ldr	r3, [r7, #4]
90003578:	685b      	ldr	r3, [r3, #4]
9000357a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000357c:	687b      	ldr	r3, [r7, #4]
9000357e:	7b1b      	ldrb	r3, [r3, #12]
90003580:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003582:	687b      	ldr	r3, [r7, #4]
90003584:	7adb      	ldrb	r3, [r3, #11]
90003586:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003588:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000358a:	687b      	ldr	r3, [r7, #4]
9000358c:	7a9b      	ldrb	r3, [r3, #10]
9000358e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003592:	687b      	ldr	r3, [r7, #4]
90003594:	7b5b      	ldrb	r3, [r3, #13]
90003596:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000359a:	687b      	ldr	r3, [r7, #4]
9000359c:	7b9b      	ldrb	r3, [r3, #14]
9000359e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900035a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900035a2:	687b      	ldr	r3, [r7, #4]
900035a4:	7bdb      	ldrb	r3, [r3, #15]
900035a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900035a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900035aa:	687b      	ldr	r3, [r7, #4]
900035ac:	7a5b      	ldrb	r3, [r3, #9]
900035ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900035b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900035b2:	687b      	ldr	r3, [r7, #4]
900035b4:	7a1b      	ldrb	r3, [r3, #8]
900035b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900035b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
900035ba:	687a      	ldr	r2, [r7, #4]
900035bc:	7812      	ldrb	r2, [r2, #0]
900035be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900035c0:	4a04      	ldr	r2, [pc, #16]	@ (900035d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900035c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900035c4:	6113      	str	r3, [r2, #16]
}
900035c6:	bf00      	nop
900035c8:	370c      	adds	r7, #12
900035ca:	46bd      	mov	sp, r7
900035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900035d0:	4770      	bx	lr
900035d2:	bf00      	nop
900035d4:	e000ed90 	.word	0xe000ed90

900035d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900035d8:	b580      	push	{r7, lr}
900035da:	b082      	sub	sp, #8
900035dc:	af00      	add	r7, sp, #0
900035de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900035e0:	687b      	ldr	r3, [r7, #4]
900035e2:	2b00      	cmp	r3, #0
900035e4:	d101      	bne.n	900035ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
900035e6:	2301      	movs	r3, #1
900035e8:	e04f      	b.n	9000368a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900035ea:	687b      	ldr	r3, [r7, #4]
900035ec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
900035f0:	b2db      	uxtb	r3, r3
900035f2:	2b00      	cmp	r3, #0
900035f4:	d106      	bne.n	90003604 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900035f6:	687b      	ldr	r3, [r7, #4]
900035f8:	2200      	movs	r2, #0
900035fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900035fe:	6878      	ldr	r0, [r7, #4]
90003600:	f000 f84e 	bl	900036a0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003604:	687b      	ldr	r3, [r7, #4]
90003606:	2202      	movs	r2, #2
90003608:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000360c:	687b      	ldr	r3, [r7, #4]
9000360e:	681b      	ldr	r3, [r3, #0]
90003610:	681a      	ldr	r2, [r3, #0]
90003612:	4b20      	ldr	r3, [pc, #128]	@ (90003694 <HAL_DMA2D_Init+0xbc>)
90003614:	4013      	ands	r3, r2
90003616:	687a      	ldr	r2, [r7, #4]
90003618:	6851      	ldr	r1, [r2, #4]
9000361a:	687a      	ldr	r2, [r7, #4]
9000361c:	69d2      	ldr	r2, [r2, #28]
9000361e:	4311      	orrs	r1, r2
90003620:	687a      	ldr	r2, [r7, #4]
90003622:	6812      	ldr	r2, [r2, #0]
90003624:	430b      	orrs	r3, r1
90003626:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003628:	687b      	ldr	r3, [r7, #4]
9000362a:	681b      	ldr	r3, [r3, #0]
9000362c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000362e:	4b1a      	ldr	r3, [pc, #104]	@ (90003698 <HAL_DMA2D_Init+0xc0>)
90003630:	4013      	ands	r3, r2
90003632:	687a      	ldr	r2, [r7, #4]
90003634:	6891      	ldr	r1, [r2, #8]
90003636:	687a      	ldr	r2, [r7, #4]
90003638:	6992      	ldr	r2, [r2, #24]
9000363a:	4311      	orrs	r1, r2
9000363c:	687a      	ldr	r2, [r7, #4]
9000363e:	6812      	ldr	r2, [r2, #0]
90003640:	430b      	orrs	r3, r1
90003642:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003644:	687b      	ldr	r3, [r7, #4]
90003646:	681b      	ldr	r3, [r3, #0]
90003648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000364a:	4b14      	ldr	r3, [pc, #80]	@ (9000369c <HAL_DMA2D_Init+0xc4>)
9000364c:	4013      	ands	r3, r2
9000364e:	687a      	ldr	r2, [r7, #4]
90003650:	68d1      	ldr	r1, [r2, #12]
90003652:	687a      	ldr	r2, [r7, #4]
90003654:	6812      	ldr	r2, [r2, #0]
90003656:	430b      	orrs	r3, r1
90003658:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000365a:	687b      	ldr	r3, [r7, #4]
9000365c:	681b      	ldr	r3, [r3, #0]
9000365e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003660:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003664:	687b      	ldr	r3, [r7, #4]
90003666:	691b      	ldr	r3, [r3, #16]
90003668:	051a      	lsls	r2, r3, #20
9000366a:	687b      	ldr	r3, [r7, #4]
9000366c:	695b      	ldr	r3, [r3, #20]
9000366e:	055b      	lsls	r3, r3, #21
90003670:	431a      	orrs	r2, r3
90003672:	687b      	ldr	r3, [r7, #4]
90003674:	681b      	ldr	r3, [r3, #0]
90003676:	430a      	orrs	r2, r1
90003678:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000367a:	687b      	ldr	r3, [r7, #4]
9000367c:	2200      	movs	r2, #0
9000367e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003680:	687b      	ldr	r3, [r7, #4]
90003682:	2201      	movs	r2, #1
90003684:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003688:	2300      	movs	r3, #0
}
9000368a:	4618      	mov	r0, r3
9000368c:	3708      	adds	r7, #8
9000368e:	46bd      	mov	sp, r7
90003690:	bd80      	pop	{r7, pc}
90003692:	bf00      	nop
90003694:	fff8ffbf 	.word	0xfff8ffbf
90003698:	fffffef8 	.word	0xfffffef8
9000369c:	ffff0000 	.word	0xffff0000

900036a0 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
900036a0:	b480      	push	{r7}
900036a2:	b083      	sub	sp, #12
900036a4:	af00      	add	r7, sp, #0
900036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
900036a8:	bf00      	nop
900036aa:	370c      	adds	r7, #12
900036ac:	46bd      	mov	sp, r7
900036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900036b2:	4770      	bx	lr

900036b4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
900036b4:	b580      	push	{r7, lr}
900036b6:	b086      	sub	sp, #24
900036b8:	af02      	add	r7, sp, #8
900036ba:	60f8      	str	r0, [r7, #12]
900036bc:	60b9      	str	r1, [r7, #8]
900036be:	607a      	str	r2, [r7, #4]
900036c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
900036c2:	68fb      	ldr	r3, [r7, #12]
900036c4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900036c8:	2b01      	cmp	r3, #1
900036ca:	d101      	bne.n	900036d0 <HAL_DMA2D_Start+0x1c>
900036cc:	2302      	movs	r3, #2
900036ce:	e018      	b.n	90003702 <HAL_DMA2D_Start+0x4e>
900036d0:	68fb      	ldr	r3, [r7, #12]
900036d2:	2201      	movs	r2, #1
900036d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900036d8:	68fb      	ldr	r3, [r7, #12]
900036da:	2202      	movs	r2, #2
900036dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900036e0:	69bb      	ldr	r3, [r7, #24]
900036e2:	9300      	str	r3, [sp, #0]
900036e4:	683b      	ldr	r3, [r7, #0]
900036e6:	687a      	ldr	r2, [r7, #4]
900036e8:	68b9      	ldr	r1, [r7, #8]
900036ea:	68f8      	ldr	r0, [r7, #12]
900036ec:	f000 f9a4 	bl	90003a38 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
900036f0:	68fb      	ldr	r3, [r7, #12]
900036f2:	681b      	ldr	r3, [r3, #0]
900036f4:	681a      	ldr	r2, [r3, #0]
900036f6:	68fb      	ldr	r3, [r7, #12]
900036f8:	681b      	ldr	r3, [r3, #0]
900036fa:	f042 0201 	orr.w	r2, r2, #1
900036fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003700:	2300      	movs	r3, #0
}
90003702:	4618      	mov	r0, r3
90003704:	3710      	adds	r7, #16
90003706:	46bd      	mov	sp, r7
90003708:	bd80      	pop	{r7, pc}

9000370a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
9000370a:	b580      	push	{r7, lr}
9000370c:	b086      	sub	sp, #24
9000370e:	af00      	add	r7, sp, #0
90003710:	6078      	str	r0, [r7, #4]
90003712:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90003714:	2300      	movs	r3, #0
90003716:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003718:	687b      	ldr	r3, [r7, #4]
9000371a:	681b      	ldr	r3, [r3, #0]
9000371c:	681b      	ldr	r3, [r3, #0]
9000371e:	f003 0301 	and.w	r3, r3, #1
90003722:	2b00      	cmp	r3, #0
90003724:	d056      	beq.n	900037d4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003726:	f7ff fd83 	bl	90003230 <HAL_GetTick>
9000372a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000372c:	e04b      	b.n	900037c6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000372e:	687b      	ldr	r3, [r7, #4]
90003730:	681b      	ldr	r3, [r3, #0]
90003732:	685b      	ldr	r3, [r3, #4]
90003734:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003736:	68fb      	ldr	r3, [r7, #12]
90003738:	f003 0321 	and.w	r3, r3, #33	@ 0x21
9000373c:	2b00      	cmp	r3, #0
9000373e:	d023      	beq.n	90003788 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003740:	68fb      	ldr	r3, [r7, #12]
90003742:	f003 0320 	and.w	r3, r3, #32
90003746:	2b00      	cmp	r3, #0
90003748:	d005      	beq.n	90003756 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000374a:	687b      	ldr	r3, [r7, #4]
9000374c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000374e:	f043 0202 	orr.w	r2, r3, #2
90003752:	687b      	ldr	r3, [r7, #4]
90003754:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003756:	68fb      	ldr	r3, [r7, #12]
90003758:	f003 0301 	and.w	r3, r3, #1
9000375c:	2b00      	cmp	r3, #0
9000375e:	d005      	beq.n	9000376c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003760:	687b      	ldr	r3, [r7, #4]
90003762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003764:	f043 0201 	orr.w	r2, r3, #1
90003768:	687b      	ldr	r3, [r7, #4]
9000376a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
9000376c:	687b      	ldr	r3, [r7, #4]
9000376e:	681b      	ldr	r3, [r3, #0]
90003770:	2221      	movs	r2, #33	@ 0x21
90003772:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003774:	687b      	ldr	r3, [r7, #4]
90003776:	2204      	movs	r2, #4
90003778:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
9000377c:	687b      	ldr	r3, [r7, #4]
9000377e:	2200      	movs	r2, #0
90003780:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003784:	2301      	movs	r3, #1
90003786:	e0a5      	b.n	900038d4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003788:	683b      	ldr	r3, [r7, #0]
9000378a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000378e:	d01a      	beq.n	900037c6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003790:	f7ff fd4e 	bl	90003230 <HAL_GetTick>
90003794:	4602      	mov	r2, r0
90003796:	697b      	ldr	r3, [r7, #20]
90003798:	1ad3      	subs	r3, r2, r3
9000379a:	683a      	ldr	r2, [r7, #0]
9000379c:	429a      	cmp	r2, r3
9000379e:	d302      	bcc.n	900037a6 <HAL_DMA2D_PollForTransfer+0x9c>
900037a0:	683b      	ldr	r3, [r7, #0]
900037a2:	2b00      	cmp	r3, #0
900037a4:	d10f      	bne.n	900037c6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900037a6:	687b      	ldr	r3, [r7, #4]
900037a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900037aa:	f043 0220 	orr.w	r2, r3, #32
900037ae:	687b      	ldr	r3, [r7, #4]
900037b0:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
900037b2:	687b      	ldr	r3, [r7, #4]
900037b4:	2203      	movs	r2, #3
900037b6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900037ba:	687b      	ldr	r3, [r7, #4]
900037bc:	2200      	movs	r2, #0
900037be:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900037c2:	2303      	movs	r3, #3
900037c4:	e086      	b.n	900038d4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900037c6:	687b      	ldr	r3, [r7, #4]
900037c8:	681b      	ldr	r3, [r3, #0]
900037ca:	685b      	ldr	r3, [r3, #4]
900037cc:	f003 0302 	and.w	r3, r3, #2
900037d0:	2b00      	cmp	r3, #0
900037d2:	d0ac      	beq.n	9000372e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900037d4:	687b      	ldr	r3, [r7, #4]
900037d6:	681b      	ldr	r3, [r3, #0]
900037d8:	69db      	ldr	r3, [r3, #28]
900037da:	f003 0320 	and.w	r3, r3, #32
900037de:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
900037e0:	687b      	ldr	r3, [r7, #4]
900037e2:	681b      	ldr	r3, [r3, #0]
900037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900037e6:	f003 0320 	and.w	r3, r3, #32
900037ea:	693a      	ldr	r2, [r7, #16]
900037ec:	4313      	orrs	r3, r2
900037ee:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
900037f0:	693b      	ldr	r3, [r7, #16]
900037f2:	2b00      	cmp	r3, #0
900037f4:	d061      	beq.n	900038ba <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900037f6:	f7ff fd1b 	bl	90003230 <HAL_GetTick>
900037fa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900037fc:	e056      	b.n	900038ac <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900037fe:	687b      	ldr	r3, [r7, #4]
90003800:	681b      	ldr	r3, [r3, #0]
90003802:	685b      	ldr	r3, [r3, #4]
90003804:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003806:	68fb      	ldr	r3, [r7, #12]
90003808:	f003 0329 	and.w	r3, r3, #41	@ 0x29
9000380c:	2b00      	cmp	r3, #0
9000380e:	d02e      	beq.n	9000386e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003810:	68fb      	ldr	r3, [r7, #12]
90003812:	f003 0308 	and.w	r3, r3, #8
90003816:	2b00      	cmp	r3, #0
90003818:	d005      	beq.n	90003826 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
9000381a:	687b      	ldr	r3, [r7, #4]
9000381c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000381e:	f043 0204 	orr.w	r2, r3, #4
90003822:	687b      	ldr	r3, [r7, #4]
90003824:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003826:	68fb      	ldr	r3, [r7, #12]
90003828:	f003 0320 	and.w	r3, r3, #32
9000382c:	2b00      	cmp	r3, #0
9000382e:	d005      	beq.n	9000383c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003830:	687b      	ldr	r3, [r7, #4]
90003832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003834:	f043 0202 	orr.w	r2, r3, #2
90003838:	687b      	ldr	r3, [r7, #4]
9000383a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000383c:	68fb      	ldr	r3, [r7, #12]
9000383e:	f003 0301 	and.w	r3, r3, #1
90003842:	2b00      	cmp	r3, #0
90003844:	d005      	beq.n	90003852 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003846:	687b      	ldr	r3, [r7, #4]
90003848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000384a:	f043 0201 	orr.w	r2, r3, #1
9000384e:	687b      	ldr	r3, [r7, #4]
90003850:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003852:	687b      	ldr	r3, [r7, #4]
90003854:	681b      	ldr	r3, [r3, #0]
90003856:	2229      	movs	r2, #41	@ 0x29
90003858:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000385a:	687b      	ldr	r3, [r7, #4]
9000385c:	2204      	movs	r2, #4
9000385e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003862:	687b      	ldr	r3, [r7, #4]
90003864:	2200      	movs	r2, #0
90003866:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000386a:	2301      	movs	r3, #1
9000386c:	e032      	b.n	900038d4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000386e:	683b      	ldr	r3, [r7, #0]
90003870:	f1b3 3fff 	cmp.w	r3, #4294967295
90003874:	d01a      	beq.n	900038ac <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003876:	f7ff fcdb 	bl	90003230 <HAL_GetTick>
9000387a:	4602      	mov	r2, r0
9000387c:	697b      	ldr	r3, [r7, #20]
9000387e:	1ad3      	subs	r3, r2, r3
90003880:	683a      	ldr	r2, [r7, #0]
90003882:	429a      	cmp	r2, r3
90003884:	d302      	bcc.n	9000388c <HAL_DMA2D_PollForTransfer+0x182>
90003886:	683b      	ldr	r3, [r7, #0]
90003888:	2b00      	cmp	r3, #0
9000388a:	d10f      	bne.n	900038ac <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000388c:	687b      	ldr	r3, [r7, #4]
9000388e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003890:	f043 0220 	orr.w	r2, r3, #32
90003894:	687b      	ldr	r3, [r7, #4]
90003896:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003898:	687b      	ldr	r3, [r7, #4]
9000389a:	2203      	movs	r2, #3
9000389c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900038a0:	687b      	ldr	r3, [r7, #4]
900038a2:	2200      	movs	r2, #0
900038a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900038a8:	2303      	movs	r3, #3
900038aa:	e013      	b.n	900038d4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900038ac:	687b      	ldr	r3, [r7, #4]
900038ae:	681b      	ldr	r3, [r3, #0]
900038b0:	685b      	ldr	r3, [r3, #4]
900038b2:	f003 0310 	and.w	r3, r3, #16
900038b6:	2b00      	cmp	r3, #0
900038b8:	d0a1      	beq.n	900037fe <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
900038ba:	687b      	ldr	r3, [r7, #4]
900038bc:	681b      	ldr	r3, [r3, #0]
900038be:	2212      	movs	r2, #18
900038c0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
900038c2:	687b      	ldr	r3, [r7, #4]
900038c4:	2201      	movs	r2, #1
900038c6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900038ca:	687b      	ldr	r3, [r7, #4]
900038cc:	2200      	movs	r2, #0
900038ce:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900038d2:	2300      	movs	r3, #0
}
900038d4:	4618      	mov	r0, r3
900038d6:	3718      	adds	r7, #24
900038d8:	46bd      	mov	sp, r7
900038da:	bd80      	pop	{r7, pc}

900038dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
900038dc:	b480      	push	{r7}
900038de:	b087      	sub	sp, #28
900038e0:	af00      	add	r7, sp, #0
900038e2:	6078      	str	r0, [r7, #4]
900038e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
900038e6:	687b      	ldr	r3, [r7, #4]
900038e8:	685b      	ldr	r3, [r3, #4]
900038ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
900038ee:	683b      	ldr	r3, [r7, #0]
900038f0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900038f2:	687b      	ldr	r3, [r7, #4]
900038f4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900038f8:	2b01      	cmp	r3, #1
900038fa:	d101      	bne.n	90003900 <HAL_DMA2D_ConfigLayer+0x24>
900038fc:	2302      	movs	r3, #2
900038fe:	e092      	b.n	90003a26 <HAL_DMA2D_ConfigLayer+0x14a>
90003900:	687b      	ldr	r3, [r7, #4]
90003902:	2201      	movs	r2, #1
90003904:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003908:	687b      	ldr	r3, [r7, #4]
9000390a:	2202      	movs	r2, #2
9000390c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003910:	683a      	ldr	r2, [r7, #0]
90003912:	4613      	mov	r3, r2
90003914:	00db      	lsls	r3, r3, #3
90003916:	1a9b      	subs	r3, r3, r2
90003918:	009b      	lsls	r3, r3, #2
9000391a:	3328      	adds	r3, #40	@ 0x28
9000391c:	687a      	ldr	r2, [r7, #4]
9000391e:	4413      	add	r3, r2
90003920:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003922:	68fb      	ldr	r3, [r7, #12]
90003924:	685a      	ldr	r2, [r3, #4]
90003926:	68fb      	ldr	r3, [r7, #12]
90003928:	689b      	ldr	r3, [r3, #8]
9000392a:	041b      	lsls	r3, r3, #16
9000392c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000392e:	68fb      	ldr	r3, [r7, #12]
90003930:	691b      	ldr	r3, [r3, #16]
90003932:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003934:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003936:	68fb      	ldr	r3, [r7, #12]
90003938:	695b      	ldr	r3, [r3, #20]
9000393a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000393c:	4313      	orrs	r3, r2
9000393e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003940:	4b3c      	ldr	r3, [pc, #240]	@ (90003a34 <HAL_DMA2D_ConfigLayer+0x158>)
90003942:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003944:	68fb      	ldr	r3, [r7, #12]
90003946:	685b      	ldr	r3, [r3, #4]
90003948:	2b0a      	cmp	r3, #10
9000394a:	d003      	beq.n	90003954 <HAL_DMA2D_ConfigLayer+0x78>
9000394c:	68fb      	ldr	r3, [r7, #12]
9000394e:	685b      	ldr	r3, [r3, #4]
90003950:	2b09      	cmp	r3, #9
90003952:	d107      	bne.n	90003964 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003954:	68fb      	ldr	r3, [r7, #12]
90003956:	68db      	ldr	r3, [r3, #12]
90003958:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
9000395c:	693a      	ldr	r2, [r7, #16]
9000395e:	4313      	orrs	r3, r2
90003960:	613b      	str	r3, [r7, #16]
90003962:	e005      	b.n	90003970 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003964:	68fb      	ldr	r3, [r7, #12]
90003966:	68db      	ldr	r3, [r3, #12]
90003968:	061b      	lsls	r3, r3, #24
9000396a:	693a      	ldr	r2, [r7, #16]
9000396c:	4313      	orrs	r3, r2
9000396e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003970:	683b      	ldr	r3, [r7, #0]
90003972:	2b00      	cmp	r3, #0
90003974:	d120      	bne.n	900039b8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003976:	687b      	ldr	r3, [r7, #4]
90003978:	681b      	ldr	r3, [r3, #0]
9000397a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000397c:	697b      	ldr	r3, [r7, #20]
9000397e:	43db      	mvns	r3, r3
90003980:	ea02 0103 	and.w	r1, r2, r3
90003984:	687b      	ldr	r3, [r7, #4]
90003986:	681b      	ldr	r3, [r3, #0]
90003988:	693a      	ldr	r2, [r7, #16]
9000398a:	430a      	orrs	r2, r1
9000398c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000398e:	687b      	ldr	r3, [r7, #4]
90003990:	681b      	ldr	r3, [r3, #0]
90003992:	68fa      	ldr	r2, [r7, #12]
90003994:	6812      	ldr	r2, [r2, #0]
90003996:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003998:	68fb      	ldr	r3, [r7, #12]
9000399a:	685b      	ldr	r3, [r3, #4]
9000399c:	2b0a      	cmp	r3, #10
9000399e:	d003      	beq.n	900039a8 <HAL_DMA2D_ConfigLayer+0xcc>
900039a0:	68fb      	ldr	r3, [r7, #12]
900039a2:	685b      	ldr	r3, [r3, #4]
900039a4:	2b09      	cmp	r3, #9
900039a6:	d135      	bne.n	90003a14 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
900039a8:	68fb      	ldr	r3, [r7, #12]
900039aa:	68da      	ldr	r2, [r3, #12]
900039ac:	687b      	ldr	r3, [r7, #4]
900039ae:	681b      	ldr	r3, [r3, #0]
900039b0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900039b4:	629a      	str	r2, [r3, #40]	@ 0x28
900039b6:	e02d      	b.n	90003a14 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
900039b8:	68fb      	ldr	r3, [r7, #12]
900039ba:	685b      	ldr	r3, [r3, #4]
900039bc:	2b0b      	cmp	r3, #11
900039be:	d109      	bne.n	900039d4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
900039c0:	68fb      	ldr	r3, [r7, #12]
900039c2:	699b      	ldr	r3, [r3, #24]
900039c4:	049b      	lsls	r3, r3, #18
900039c6:	693a      	ldr	r2, [r7, #16]
900039c8:	4313      	orrs	r3, r2
900039ca:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
900039cc:	697b      	ldr	r3, [r7, #20]
900039ce:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
900039d2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900039d4:	687b      	ldr	r3, [r7, #4]
900039d6:	681b      	ldr	r3, [r3, #0]
900039d8:	69da      	ldr	r2, [r3, #28]
900039da:	697b      	ldr	r3, [r7, #20]
900039dc:	43db      	mvns	r3, r3
900039de:	ea02 0103 	and.w	r1, r2, r3
900039e2:	687b      	ldr	r3, [r7, #4]
900039e4:	681b      	ldr	r3, [r3, #0]
900039e6:	693a      	ldr	r2, [r7, #16]
900039e8:	430a      	orrs	r2, r1
900039ea:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900039ec:	687b      	ldr	r3, [r7, #4]
900039ee:	681b      	ldr	r3, [r3, #0]
900039f0:	68fa      	ldr	r2, [r7, #12]
900039f2:	6812      	ldr	r2, [r2, #0]
900039f4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900039f6:	68fb      	ldr	r3, [r7, #12]
900039f8:	685b      	ldr	r3, [r3, #4]
900039fa:	2b0a      	cmp	r3, #10
900039fc:	d003      	beq.n	90003a06 <HAL_DMA2D_ConfigLayer+0x12a>
900039fe:	68fb      	ldr	r3, [r7, #12]
90003a00:	685b      	ldr	r3, [r3, #4]
90003a02:	2b09      	cmp	r3, #9
90003a04:	d106      	bne.n	90003a14 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003a06:	68fb      	ldr	r3, [r7, #12]
90003a08:	68da      	ldr	r2, [r3, #12]
90003a0a:	687b      	ldr	r3, [r7, #4]
90003a0c:	681b      	ldr	r3, [r3, #0]
90003a0e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003a12:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003a14:	687b      	ldr	r3, [r7, #4]
90003a16:	2201      	movs	r2, #1
90003a18:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003a1c:	687b      	ldr	r3, [r7, #4]
90003a1e:	2200      	movs	r2, #0
90003a20:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003a24:	2300      	movs	r3, #0
}
90003a26:	4618      	mov	r0, r3
90003a28:	371c      	adds	r7, #28
90003a2a:	46bd      	mov	sp, r7
90003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a30:	4770      	bx	lr
90003a32:	bf00      	nop
90003a34:	ff33000f 	.word	0xff33000f

90003a38 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003a38:	b480      	push	{r7}
90003a3a:	b08b      	sub	sp, #44	@ 0x2c
90003a3c:	af00      	add	r7, sp, #0
90003a3e:	60f8      	str	r0, [r7, #12]
90003a40:	60b9      	str	r1, [r7, #8]
90003a42:	607a      	str	r2, [r7, #4]
90003a44:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003a46:	68fb      	ldr	r3, [r7, #12]
90003a48:	681b      	ldr	r3, [r3, #0]
90003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003a4c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003a50:	683b      	ldr	r3, [r7, #0]
90003a52:	041a      	lsls	r2, r3, #16
90003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003a56:	431a      	orrs	r2, r3
90003a58:	68fb      	ldr	r3, [r7, #12]
90003a5a:	681b      	ldr	r3, [r3, #0]
90003a5c:	430a      	orrs	r2, r1
90003a5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003a60:	68fb      	ldr	r3, [r7, #12]
90003a62:	681b      	ldr	r3, [r3, #0]
90003a64:	687a      	ldr	r2, [r7, #4]
90003a66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003a68:	68fb      	ldr	r3, [r7, #12]
90003a6a:	685b      	ldr	r3, [r3, #4]
90003a6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003a70:	d174      	bne.n	90003b5c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003a72:	68bb      	ldr	r3, [r7, #8]
90003a74:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003a78:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003a7a:	68bb      	ldr	r3, [r7, #8]
90003a7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003a80:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003a82:	68bb      	ldr	r3, [r7, #8]
90003a84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003a88:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003a8a:	68bb      	ldr	r3, [r7, #8]
90003a8c:	b2db      	uxtb	r3, r3
90003a8e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003a90:	68fb      	ldr	r3, [r7, #12]
90003a92:	689b      	ldr	r3, [r3, #8]
90003a94:	2b00      	cmp	r3, #0
90003a96:	d108      	bne.n	90003aaa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003a98:	69ba      	ldr	r2, [r7, #24]
90003a9a:	69fb      	ldr	r3, [r7, #28]
90003a9c:	431a      	orrs	r2, r3
90003a9e:	6a3b      	ldr	r3, [r7, #32]
90003aa0:	4313      	orrs	r3, r2
90003aa2:	697a      	ldr	r2, [r7, #20]
90003aa4:	4313      	orrs	r3, r2
90003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
90003aa8:	e053      	b.n	90003b52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003aaa:	68fb      	ldr	r3, [r7, #12]
90003aac:	689b      	ldr	r3, [r3, #8]
90003aae:	2b01      	cmp	r3, #1
90003ab0:	d106      	bne.n	90003ac0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003ab2:	69ba      	ldr	r2, [r7, #24]
90003ab4:	69fb      	ldr	r3, [r7, #28]
90003ab6:	4313      	orrs	r3, r2
90003ab8:	697a      	ldr	r2, [r7, #20]
90003aba:	4313      	orrs	r3, r2
90003abc:	627b      	str	r3, [r7, #36]	@ 0x24
90003abe:	e048      	b.n	90003b52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003ac0:	68fb      	ldr	r3, [r7, #12]
90003ac2:	689b      	ldr	r3, [r3, #8]
90003ac4:	2b02      	cmp	r3, #2
90003ac6:	d111      	bne.n	90003aec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003ac8:	69fb      	ldr	r3, [r7, #28]
90003aca:	0cdb      	lsrs	r3, r3, #19
90003acc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003ace:	69bb      	ldr	r3, [r7, #24]
90003ad0:	0a9b      	lsrs	r3, r3, #10
90003ad2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003ad4:	697b      	ldr	r3, [r7, #20]
90003ad6:	08db      	lsrs	r3, r3, #3
90003ad8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003ada:	69bb      	ldr	r3, [r7, #24]
90003adc:	015a      	lsls	r2, r3, #5
90003ade:	69fb      	ldr	r3, [r7, #28]
90003ae0:	02db      	lsls	r3, r3, #11
90003ae2:	4313      	orrs	r3, r2
90003ae4:	697a      	ldr	r2, [r7, #20]
90003ae6:	4313      	orrs	r3, r2
90003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
90003aea:	e032      	b.n	90003b52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003aec:	68fb      	ldr	r3, [r7, #12]
90003aee:	689b      	ldr	r3, [r3, #8]
90003af0:	2b03      	cmp	r3, #3
90003af2:	d117      	bne.n	90003b24 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003af4:	6a3b      	ldr	r3, [r7, #32]
90003af6:	0fdb      	lsrs	r3, r3, #31
90003af8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003afa:	69fb      	ldr	r3, [r7, #28]
90003afc:	0cdb      	lsrs	r3, r3, #19
90003afe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003b00:	69bb      	ldr	r3, [r7, #24]
90003b02:	0adb      	lsrs	r3, r3, #11
90003b04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003b06:	697b      	ldr	r3, [r7, #20]
90003b08:	08db      	lsrs	r3, r3, #3
90003b0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003b0c:	69bb      	ldr	r3, [r7, #24]
90003b0e:	015a      	lsls	r2, r3, #5
90003b10:	69fb      	ldr	r3, [r7, #28]
90003b12:	029b      	lsls	r3, r3, #10
90003b14:	431a      	orrs	r2, r3
90003b16:	6a3b      	ldr	r3, [r7, #32]
90003b18:	03db      	lsls	r3, r3, #15
90003b1a:	4313      	orrs	r3, r2
90003b1c:	697a      	ldr	r2, [r7, #20]
90003b1e:	4313      	orrs	r3, r2
90003b20:	627b      	str	r3, [r7, #36]	@ 0x24
90003b22:	e016      	b.n	90003b52 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003b24:	6a3b      	ldr	r3, [r7, #32]
90003b26:	0f1b      	lsrs	r3, r3, #28
90003b28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003b2a:	69fb      	ldr	r3, [r7, #28]
90003b2c:	0d1b      	lsrs	r3, r3, #20
90003b2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003b30:	69bb      	ldr	r3, [r7, #24]
90003b32:	0b1b      	lsrs	r3, r3, #12
90003b34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003b36:	697b      	ldr	r3, [r7, #20]
90003b38:	091b      	lsrs	r3, r3, #4
90003b3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003b3c:	69bb      	ldr	r3, [r7, #24]
90003b3e:	011a      	lsls	r2, r3, #4
90003b40:	69fb      	ldr	r3, [r7, #28]
90003b42:	021b      	lsls	r3, r3, #8
90003b44:	431a      	orrs	r2, r3
90003b46:	6a3b      	ldr	r3, [r7, #32]
90003b48:	031b      	lsls	r3, r3, #12
90003b4a:	4313      	orrs	r3, r2
90003b4c:	697a      	ldr	r2, [r7, #20]
90003b4e:	4313      	orrs	r3, r2
90003b50:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003b52:	68fb      	ldr	r3, [r7, #12]
90003b54:	681b      	ldr	r3, [r3, #0]
90003b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003b58:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003b5a:	e00d      	b.n	90003b78 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003b5c:	68fb      	ldr	r3, [r7, #12]
90003b5e:	685b      	ldr	r3, [r3, #4]
90003b60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003b64:	d104      	bne.n	90003b70 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003b66:	68fb      	ldr	r3, [r7, #12]
90003b68:	681b      	ldr	r3, [r3, #0]
90003b6a:	68ba      	ldr	r2, [r7, #8]
90003b6c:	615a      	str	r2, [r3, #20]
}
90003b6e:	e003      	b.n	90003b78 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003b70:	68fb      	ldr	r3, [r7, #12]
90003b72:	681b      	ldr	r3, [r3, #0]
90003b74:	68ba      	ldr	r2, [r7, #8]
90003b76:	60da      	str	r2, [r3, #12]
}
90003b78:	bf00      	nop
90003b7a:	372c      	adds	r7, #44	@ 0x2c
90003b7c:	46bd      	mov	sp, r7
90003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b82:	4770      	bx	lr

90003b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003b84:	b480      	push	{r7}
90003b86:	b089      	sub	sp, #36	@ 0x24
90003b88:	af00      	add	r7, sp, #0
90003b8a:	6078      	str	r0, [r7, #4]
90003b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003b8e:	2300      	movs	r3, #0
90003b90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003b92:	4b89      	ldr	r3, [pc, #548]	@ (90003db8 <HAL_GPIO_Init+0x234>)
90003b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003b96:	e194      	b.n	90003ec2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003b98:	683b      	ldr	r3, [r7, #0]
90003b9a:	681a      	ldr	r2, [r3, #0]
90003b9c:	2101      	movs	r1, #1
90003b9e:	69fb      	ldr	r3, [r7, #28]
90003ba0:	fa01 f303 	lsl.w	r3, r1, r3
90003ba4:	4013      	ands	r3, r2
90003ba6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003ba8:	693b      	ldr	r3, [r7, #16]
90003baa:	2b00      	cmp	r3, #0
90003bac:	f000 8186 	beq.w	90003ebc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003bb0:	683b      	ldr	r3, [r7, #0]
90003bb2:	685b      	ldr	r3, [r3, #4]
90003bb4:	f003 0303 	and.w	r3, r3, #3
90003bb8:	2b01      	cmp	r3, #1
90003bba:	d005      	beq.n	90003bc8 <HAL_GPIO_Init+0x44>
90003bbc:	683b      	ldr	r3, [r7, #0]
90003bbe:	685b      	ldr	r3, [r3, #4]
90003bc0:	f003 0303 	and.w	r3, r3, #3
90003bc4:	2b02      	cmp	r3, #2
90003bc6:	d130      	bne.n	90003c2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003bc8:	687b      	ldr	r3, [r7, #4]
90003bca:	689b      	ldr	r3, [r3, #8]
90003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003bce:	69fb      	ldr	r3, [r7, #28]
90003bd0:	005b      	lsls	r3, r3, #1
90003bd2:	2203      	movs	r2, #3
90003bd4:	fa02 f303 	lsl.w	r3, r2, r3
90003bd8:	43db      	mvns	r3, r3
90003bda:	69ba      	ldr	r2, [r7, #24]
90003bdc:	4013      	ands	r3, r2
90003bde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003be0:	683b      	ldr	r3, [r7, #0]
90003be2:	68da      	ldr	r2, [r3, #12]
90003be4:	69fb      	ldr	r3, [r7, #28]
90003be6:	005b      	lsls	r3, r3, #1
90003be8:	fa02 f303 	lsl.w	r3, r2, r3
90003bec:	69ba      	ldr	r2, [r7, #24]
90003bee:	4313      	orrs	r3, r2
90003bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003bf2:	687b      	ldr	r3, [r7, #4]
90003bf4:	69ba      	ldr	r2, [r7, #24]
90003bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003bf8:	687b      	ldr	r3, [r7, #4]
90003bfa:	685b      	ldr	r3, [r3, #4]
90003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003bfe:	2201      	movs	r2, #1
90003c00:	69fb      	ldr	r3, [r7, #28]
90003c02:	fa02 f303 	lsl.w	r3, r2, r3
90003c06:	43db      	mvns	r3, r3
90003c08:	69ba      	ldr	r2, [r7, #24]
90003c0a:	4013      	ands	r3, r2
90003c0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003c0e:	683b      	ldr	r3, [r7, #0]
90003c10:	685b      	ldr	r3, [r3, #4]
90003c12:	091b      	lsrs	r3, r3, #4
90003c14:	f003 0201 	and.w	r2, r3, #1
90003c18:	69fb      	ldr	r3, [r7, #28]
90003c1a:	fa02 f303 	lsl.w	r3, r2, r3
90003c1e:	69ba      	ldr	r2, [r7, #24]
90003c20:	4313      	orrs	r3, r2
90003c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003c24:	687b      	ldr	r3, [r7, #4]
90003c26:	69ba      	ldr	r2, [r7, #24]
90003c28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003c2a:	683b      	ldr	r3, [r7, #0]
90003c2c:	685b      	ldr	r3, [r3, #4]
90003c2e:	f003 0303 	and.w	r3, r3, #3
90003c32:	2b03      	cmp	r3, #3
90003c34:	d017      	beq.n	90003c66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003c36:	687b      	ldr	r3, [r7, #4]
90003c38:	68db      	ldr	r3, [r3, #12]
90003c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003c3c:	69fb      	ldr	r3, [r7, #28]
90003c3e:	005b      	lsls	r3, r3, #1
90003c40:	2203      	movs	r2, #3
90003c42:	fa02 f303 	lsl.w	r3, r2, r3
90003c46:	43db      	mvns	r3, r3
90003c48:	69ba      	ldr	r2, [r7, #24]
90003c4a:	4013      	ands	r3, r2
90003c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003c4e:	683b      	ldr	r3, [r7, #0]
90003c50:	689a      	ldr	r2, [r3, #8]
90003c52:	69fb      	ldr	r3, [r7, #28]
90003c54:	005b      	lsls	r3, r3, #1
90003c56:	fa02 f303 	lsl.w	r3, r2, r3
90003c5a:	69ba      	ldr	r2, [r7, #24]
90003c5c:	4313      	orrs	r3, r2
90003c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003c60:	687b      	ldr	r3, [r7, #4]
90003c62:	69ba      	ldr	r2, [r7, #24]
90003c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003c66:	683b      	ldr	r3, [r7, #0]
90003c68:	685b      	ldr	r3, [r3, #4]
90003c6a:	f003 0303 	and.w	r3, r3, #3
90003c6e:	2b02      	cmp	r3, #2
90003c70:	d123      	bne.n	90003cba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003c72:	69fb      	ldr	r3, [r7, #28]
90003c74:	08da      	lsrs	r2, r3, #3
90003c76:	687b      	ldr	r3, [r7, #4]
90003c78:	3208      	adds	r2, #8
90003c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003c80:	69fb      	ldr	r3, [r7, #28]
90003c82:	f003 0307 	and.w	r3, r3, #7
90003c86:	009b      	lsls	r3, r3, #2
90003c88:	220f      	movs	r2, #15
90003c8a:	fa02 f303 	lsl.w	r3, r2, r3
90003c8e:	43db      	mvns	r3, r3
90003c90:	69ba      	ldr	r2, [r7, #24]
90003c92:	4013      	ands	r3, r2
90003c94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003c96:	683b      	ldr	r3, [r7, #0]
90003c98:	691a      	ldr	r2, [r3, #16]
90003c9a:	69fb      	ldr	r3, [r7, #28]
90003c9c:	f003 0307 	and.w	r3, r3, #7
90003ca0:	009b      	lsls	r3, r3, #2
90003ca2:	fa02 f303 	lsl.w	r3, r2, r3
90003ca6:	69ba      	ldr	r2, [r7, #24]
90003ca8:	4313      	orrs	r3, r2
90003caa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003cac:	69fb      	ldr	r3, [r7, #28]
90003cae:	08da      	lsrs	r2, r3, #3
90003cb0:	687b      	ldr	r3, [r7, #4]
90003cb2:	3208      	adds	r2, #8
90003cb4:	69b9      	ldr	r1, [r7, #24]
90003cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003cba:	687b      	ldr	r3, [r7, #4]
90003cbc:	681b      	ldr	r3, [r3, #0]
90003cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003cc0:	69fb      	ldr	r3, [r7, #28]
90003cc2:	005b      	lsls	r3, r3, #1
90003cc4:	2203      	movs	r2, #3
90003cc6:	fa02 f303 	lsl.w	r3, r2, r3
90003cca:	43db      	mvns	r3, r3
90003ccc:	69ba      	ldr	r2, [r7, #24]
90003cce:	4013      	ands	r3, r2
90003cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003cd2:	683b      	ldr	r3, [r7, #0]
90003cd4:	685b      	ldr	r3, [r3, #4]
90003cd6:	f003 0203 	and.w	r2, r3, #3
90003cda:	69fb      	ldr	r3, [r7, #28]
90003cdc:	005b      	lsls	r3, r3, #1
90003cde:	fa02 f303 	lsl.w	r3, r2, r3
90003ce2:	69ba      	ldr	r2, [r7, #24]
90003ce4:	4313      	orrs	r3, r2
90003ce6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003ce8:	687b      	ldr	r3, [r7, #4]
90003cea:	69ba      	ldr	r2, [r7, #24]
90003cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003cee:	683b      	ldr	r3, [r7, #0]
90003cf0:	685b      	ldr	r3, [r3, #4]
90003cf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003cf6:	2b00      	cmp	r3, #0
90003cf8:	f000 80e0 	beq.w	90003ebc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003cfc:	4b2f      	ldr	r3, [pc, #188]	@ (90003dbc <HAL_GPIO_Init+0x238>)
90003cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003d02:	4a2e      	ldr	r2, [pc, #184]	@ (90003dbc <HAL_GPIO_Init+0x238>)
90003d04:	f043 0302 	orr.w	r3, r3, #2
90003d08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003d0c:	4b2b      	ldr	r3, [pc, #172]	@ (90003dbc <HAL_GPIO_Init+0x238>)
90003d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003d12:	f003 0302 	and.w	r3, r3, #2
90003d16:	60fb      	str	r3, [r7, #12]
90003d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003d1a:	4a29      	ldr	r2, [pc, #164]	@ (90003dc0 <HAL_GPIO_Init+0x23c>)
90003d1c:	69fb      	ldr	r3, [r7, #28]
90003d1e:	089b      	lsrs	r3, r3, #2
90003d20:	3302      	adds	r3, #2
90003d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003d28:	69fb      	ldr	r3, [r7, #28]
90003d2a:	f003 0303 	and.w	r3, r3, #3
90003d2e:	009b      	lsls	r3, r3, #2
90003d30:	220f      	movs	r2, #15
90003d32:	fa02 f303 	lsl.w	r3, r2, r3
90003d36:	43db      	mvns	r3, r3
90003d38:	69ba      	ldr	r2, [r7, #24]
90003d3a:	4013      	ands	r3, r2
90003d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003d3e:	687b      	ldr	r3, [r7, #4]
90003d40:	4a20      	ldr	r2, [pc, #128]	@ (90003dc4 <HAL_GPIO_Init+0x240>)
90003d42:	4293      	cmp	r3, r2
90003d44:	d052      	beq.n	90003dec <HAL_GPIO_Init+0x268>
90003d46:	687b      	ldr	r3, [r7, #4]
90003d48:	4a1f      	ldr	r2, [pc, #124]	@ (90003dc8 <HAL_GPIO_Init+0x244>)
90003d4a:	4293      	cmp	r3, r2
90003d4c:	d031      	beq.n	90003db2 <HAL_GPIO_Init+0x22e>
90003d4e:	687b      	ldr	r3, [r7, #4]
90003d50:	4a1e      	ldr	r2, [pc, #120]	@ (90003dcc <HAL_GPIO_Init+0x248>)
90003d52:	4293      	cmp	r3, r2
90003d54:	d02b      	beq.n	90003dae <HAL_GPIO_Init+0x22a>
90003d56:	687b      	ldr	r3, [r7, #4]
90003d58:	4a1d      	ldr	r2, [pc, #116]	@ (90003dd0 <HAL_GPIO_Init+0x24c>)
90003d5a:	4293      	cmp	r3, r2
90003d5c:	d025      	beq.n	90003daa <HAL_GPIO_Init+0x226>
90003d5e:	687b      	ldr	r3, [r7, #4]
90003d60:	4a1c      	ldr	r2, [pc, #112]	@ (90003dd4 <HAL_GPIO_Init+0x250>)
90003d62:	4293      	cmp	r3, r2
90003d64:	d01f      	beq.n	90003da6 <HAL_GPIO_Init+0x222>
90003d66:	687b      	ldr	r3, [r7, #4]
90003d68:	4a1b      	ldr	r2, [pc, #108]	@ (90003dd8 <HAL_GPIO_Init+0x254>)
90003d6a:	4293      	cmp	r3, r2
90003d6c:	d019      	beq.n	90003da2 <HAL_GPIO_Init+0x21e>
90003d6e:	687b      	ldr	r3, [r7, #4]
90003d70:	4a1a      	ldr	r2, [pc, #104]	@ (90003ddc <HAL_GPIO_Init+0x258>)
90003d72:	4293      	cmp	r3, r2
90003d74:	d013      	beq.n	90003d9e <HAL_GPIO_Init+0x21a>
90003d76:	687b      	ldr	r3, [r7, #4]
90003d78:	4a19      	ldr	r2, [pc, #100]	@ (90003de0 <HAL_GPIO_Init+0x25c>)
90003d7a:	4293      	cmp	r3, r2
90003d7c:	d00d      	beq.n	90003d9a <HAL_GPIO_Init+0x216>
90003d7e:	687b      	ldr	r3, [r7, #4]
90003d80:	4a18      	ldr	r2, [pc, #96]	@ (90003de4 <HAL_GPIO_Init+0x260>)
90003d82:	4293      	cmp	r3, r2
90003d84:	d007      	beq.n	90003d96 <HAL_GPIO_Init+0x212>
90003d86:	687b      	ldr	r3, [r7, #4]
90003d88:	4a17      	ldr	r2, [pc, #92]	@ (90003de8 <HAL_GPIO_Init+0x264>)
90003d8a:	4293      	cmp	r3, r2
90003d8c:	d101      	bne.n	90003d92 <HAL_GPIO_Init+0x20e>
90003d8e:	2309      	movs	r3, #9
90003d90:	e02d      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003d92:	230a      	movs	r3, #10
90003d94:	e02b      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003d96:	2308      	movs	r3, #8
90003d98:	e029      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003d9a:	2307      	movs	r3, #7
90003d9c:	e027      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003d9e:	2306      	movs	r3, #6
90003da0:	e025      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003da2:	2305      	movs	r3, #5
90003da4:	e023      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003da6:	2304      	movs	r3, #4
90003da8:	e021      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003daa:	2303      	movs	r3, #3
90003dac:	e01f      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003dae:	2302      	movs	r3, #2
90003db0:	e01d      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003db2:	2301      	movs	r3, #1
90003db4:	e01b      	b.n	90003dee <HAL_GPIO_Init+0x26a>
90003db6:	bf00      	nop
90003db8:	58000080 	.word	0x58000080
90003dbc:	58024400 	.word	0x58024400
90003dc0:	58000400 	.word	0x58000400
90003dc4:	58020000 	.word	0x58020000
90003dc8:	58020400 	.word	0x58020400
90003dcc:	58020800 	.word	0x58020800
90003dd0:	58020c00 	.word	0x58020c00
90003dd4:	58021000 	.word	0x58021000
90003dd8:	58021400 	.word	0x58021400
90003ddc:	58021800 	.word	0x58021800
90003de0:	58021c00 	.word	0x58021c00
90003de4:	58022000 	.word	0x58022000
90003de8:	58022400 	.word	0x58022400
90003dec:	2300      	movs	r3, #0
90003dee:	69fa      	ldr	r2, [r7, #28]
90003df0:	f002 0203 	and.w	r2, r2, #3
90003df4:	0092      	lsls	r2, r2, #2
90003df6:	4093      	lsls	r3, r2
90003df8:	69ba      	ldr	r2, [r7, #24]
90003dfa:	4313      	orrs	r3, r2
90003dfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003dfe:	4938      	ldr	r1, [pc, #224]	@ (90003ee0 <HAL_GPIO_Init+0x35c>)
90003e00:	69fb      	ldr	r3, [r7, #28]
90003e02:	089b      	lsrs	r3, r3, #2
90003e04:	3302      	adds	r3, #2
90003e06:	69ba      	ldr	r2, [r7, #24]
90003e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003e10:	681b      	ldr	r3, [r3, #0]
90003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e14:	693b      	ldr	r3, [r7, #16]
90003e16:	43db      	mvns	r3, r3
90003e18:	69ba      	ldr	r2, [r7, #24]
90003e1a:	4013      	ands	r3, r2
90003e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003e1e:	683b      	ldr	r3, [r7, #0]
90003e20:	685b      	ldr	r3, [r3, #4]
90003e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003e26:	2b00      	cmp	r3, #0
90003e28:	d003      	beq.n	90003e32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003e2a:	69ba      	ldr	r2, [r7, #24]
90003e2c:	693b      	ldr	r3, [r7, #16]
90003e2e:	4313      	orrs	r3, r2
90003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003e32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003e36:	69bb      	ldr	r3, [r7, #24]
90003e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003e3e:	685b      	ldr	r3, [r3, #4]
90003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e42:	693b      	ldr	r3, [r7, #16]
90003e44:	43db      	mvns	r3, r3
90003e46:	69ba      	ldr	r2, [r7, #24]
90003e48:	4013      	ands	r3, r2
90003e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003e4c:	683b      	ldr	r3, [r7, #0]
90003e4e:	685b      	ldr	r3, [r3, #4]
90003e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003e54:	2b00      	cmp	r3, #0
90003e56:	d003      	beq.n	90003e60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003e58:	69ba      	ldr	r2, [r7, #24]
90003e5a:	693b      	ldr	r3, [r7, #16]
90003e5c:	4313      	orrs	r3, r2
90003e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003e60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003e64:	69bb      	ldr	r3, [r7, #24]
90003e66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003e68:	697b      	ldr	r3, [r7, #20]
90003e6a:	685b      	ldr	r3, [r3, #4]
90003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e6e:	693b      	ldr	r3, [r7, #16]
90003e70:	43db      	mvns	r3, r3
90003e72:	69ba      	ldr	r2, [r7, #24]
90003e74:	4013      	ands	r3, r2
90003e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003e78:	683b      	ldr	r3, [r7, #0]
90003e7a:	685b      	ldr	r3, [r3, #4]
90003e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003e80:	2b00      	cmp	r3, #0
90003e82:	d003      	beq.n	90003e8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003e84:	69ba      	ldr	r2, [r7, #24]
90003e86:	693b      	ldr	r3, [r7, #16]
90003e88:	4313      	orrs	r3, r2
90003e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003e8c:	697b      	ldr	r3, [r7, #20]
90003e8e:	69ba      	ldr	r2, [r7, #24]
90003e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003e92:	697b      	ldr	r3, [r7, #20]
90003e94:	681b      	ldr	r3, [r3, #0]
90003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e98:	693b      	ldr	r3, [r7, #16]
90003e9a:	43db      	mvns	r3, r3
90003e9c:	69ba      	ldr	r2, [r7, #24]
90003e9e:	4013      	ands	r3, r2
90003ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003ea2:	683b      	ldr	r3, [r7, #0]
90003ea4:	685b      	ldr	r3, [r3, #4]
90003ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003eaa:	2b00      	cmp	r3, #0
90003eac:	d003      	beq.n	90003eb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003eae:	69ba      	ldr	r2, [r7, #24]
90003eb0:	693b      	ldr	r3, [r7, #16]
90003eb2:	4313      	orrs	r3, r2
90003eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003eb6:	697b      	ldr	r3, [r7, #20]
90003eb8:	69ba      	ldr	r2, [r7, #24]
90003eba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003ebc:	69fb      	ldr	r3, [r7, #28]
90003ebe:	3301      	adds	r3, #1
90003ec0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003ec2:	683b      	ldr	r3, [r7, #0]
90003ec4:	681a      	ldr	r2, [r3, #0]
90003ec6:	69fb      	ldr	r3, [r7, #28]
90003ec8:	fa22 f303 	lsr.w	r3, r2, r3
90003ecc:	2b00      	cmp	r3, #0
90003ece:	f47f ae63 	bne.w	90003b98 <HAL_GPIO_Init+0x14>
  }
}
90003ed2:	bf00      	nop
90003ed4:	bf00      	nop
90003ed6:	3724      	adds	r7, #36	@ 0x24
90003ed8:	46bd      	mov	sp, r7
90003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ede:	4770      	bx	lr
90003ee0:	58000400 	.word	0x58000400

90003ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003ee4:	b480      	push	{r7}
90003ee6:	b085      	sub	sp, #20
90003ee8:	af00      	add	r7, sp, #0
90003eea:	6078      	str	r0, [r7, #4]
90003eec:	460b      	mov	r3, r1
90003eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003ef0:	687b      	ldr	r3, [r7, #4]
90003ef2:	691a      	ldr	r2, [r3, #16]
90003ef4:	887b      	ldrh	r3, [r7, #2]
90003ef6:	4013      	ands	r3, r2
90003ef8:	2b00      	cmp	r3, #0
90003efa:	d002      	beq.n	90003f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003efc:	2301      	movs	r3, #1
90003efe:	73fb      	strb	r3, [r7, #15]
90003f00:	e001      	b.n	90003f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003f02:	2300      	movs	r3, #0
90003f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003f06:	7bfb      	ldrb	r3, [r7, #15]
}
90003f08:	4618      	mov	r0, r3
90003f0a:	3714      	adds	r7, #20
90003f0c:	46bd      	mov	sp, r7
90003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f12:	4770      	bx	lr

90003f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003f14:	b480      	push	{r7}
90003f16:	b083      	sub	sp, #12
90003f18:	af00      	add	r7, sp, #0
90003f1a:	6078      	str	r0, [r7, #4]
90003f1c:	460b      	mov	r3, r1
90003f1e:	807b      	strh	r3, [r7, #2]
90003f20:	4613      	mov	r3, r2
90003f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003f24:	787b      	ldrb	r3, [r7, #1]
90003f26:	2b00      	cmp	r3, #0
90003f28:	d003      	beq.n	90003f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003f2a:	887a      	ldrh	r2, [r7, #2]
90003f2c:	687b      	ldr	r3, [r7, #4]
90003f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003f30:	e003      	b.n	90003f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003f32:	887b      	ldrh	r3, [r7, #2]
90003f34:	041a      	lsls	r2, r3, #16
90003f36:	687b      	ldr	r3, [r7, #4]
90003f38:	619a      	str	r2, [r3, #24]
}
90003f3a:	bf00      	nop
90003f3c:	370c      	adds	r7, #12
90003f3e:	46bd      	mov	sp, r7
90003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f44:	4770      	bx	lr

90003f46 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003f46:	b580      	push	{r7, lr}
90003f48:	b086      	sub	sp, #24
90003f4a:	af00      	add	r7, sp, #0
90003f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003f4e:	687b      	ldr	r3, [r7, #4]
90003f50:	681b      	ldr	r3, [r3, #0]
90003f52:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003f54:	693b      	ldr	r3, [r7, #16]
90003f56:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003f58:	687b      	ldr	r3, [r7, #4]
90003f5a:	681b      	ldr	r3, [r3, #0]
90003f5c:	4618      	mov	r0, r3
90003f5e:	f007 f9a5 	bl	9000b2ac <USB_GetMode>
90003f62:	4603      	mov	r3, r0
90003f64:	2b01      	cmp	r3, #1
90003f66:	f040 80fb 	bne.w	90004160 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003f6a:	687b      	ldr	r3, [r7, #4]
90003f6c:	681b      	ldr	r3, [r3, #0]
90003f6e:	4618      	mov	r0, r3
90003f70:	f007 f968 	bl	9000b244 <USB_ReadInterrupts>
90003f74:	4603      	mov	r3, r0
90003f76:	2b00      	cmp	r3, #0
90003f78:	f000 80f1 	beq.w	9000415e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003f7c:	687b      	ldr	r3, [r7, #4]
90003f7e:	681b      	ldr	r3, [r3, #0]
90003f80:	4618      	mov	r0, r3
90003f82:	f007 f95f 	bl	9000b244 <USB_ReadInterrupts>
90003f86:	4603      	mov	r3, r0
90003f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90003f90:	d104      	bne.n	90003f9c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003f92:	687b      	ldr	r3, [r7, #4]
90003f94:	681b      	ldr	r3, [r3, #0]
90003f96:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90003f9a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003f9c:	687b      	ldr	r3, [r7, #4]
90003f9e:	681b      	ldr	r3, [r3, #0]
90003fa0:	4618      	mov	r0, r3
90003fa2:	f007 f94f 	bl	9000b244 <USB_ReadInterrupts>
90003fa6:	4603      	mov	r3, r0
90003fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003fac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90003fb0:	d104      	bne.n	90003fbc <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003fb2:	687b      	ldr	r3, [r7, #4]
90003fb4:	681b      	ldr	r3, [r3, #0]
90003fb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90003fba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003fbc:	687b      	ldr	r3, [r7, #4]
90003fbe:	681b      	ldr	r3, [r3, #0]
90003fc0:	4618      	mov	r0, r3
90003fc2:	f007 f93f 	bl	9000b244 <USB_ReadInterrupts>
90003fc6:	4603      	mov	r3, r0
90003fc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90003fcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90003fd0:	d104      	bne.n	90003fdc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003fd2:	687b      	ldr	r3, [r7, #4]
90003fd4:	681b      	ldr	r3, [r3, #0]
90003fd6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003fda:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003fdc:	687b      	ldr	r3, [r7, #4]
90003fde:	681b      	ldr	r3, [r3, #0]
90003fe0:	4618      	mov	r0, r3
90003fe2:	f007 f92f 	bl	9000b244 <USB_ReadInterrupts>
90003fe6:	4603      	mov	r3, r0
90003fe8:	f003 0302 	and.w	r3, r3, #2
90003fec:	2b02      	cmp	r3, #2
90003fee:	d103      	bne.n	90003ff8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003ff0:	687b      	ldr	r3, [r7, #4]
90003ff2:	681b      	ldr	r3, [r3, #0]
90003ff4:	2202      	movs	r2, #2
90003ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003ff8:	687b      	ldr	r3, [r7, #4]
90003ffa:	681b      	ldr	r3, [r3, #0]
90003ffc:	4618      	mov	r0, r3
90003ffe:	f007 f921 	bl	9000b244 <USB_ReadInterrupts>
90004002:	4603      	mov	r3, r0
90004004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90004008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000400c:	d120      	bne.n	90004050 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000400e:	687b      	ldr	r3, [r7, #4]
90004010:	681b      	ldr	r3, [r3, #0]
90004012:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90004016:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90004018:	68fb      	ldr	r3, [r7, #12]
9000401a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000401e:	681b      	ldr	r3, [r3, #0]
90004020:	f003 0301 	and.w	r3, r3, #1
90004024:	2b00      	cmp	r3, #0
90004026:	d113      	bne.n	90004050 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90004028:	2110      	movs	r1, #16
9000402a:	6938      	ldr	r0, [r7, #16]
9000402c:	f007 f852 	bl	9000b0d4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90004030:	6938      	ldr	r0, [r7, #16]
90004032:	f007 f881 	bl	9000b138 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90004036:	687b      	ldr	r3, [r7, #4]
90004038:	7a5b      	ldrb	r3, [r3, #9]
9000403a:	2b02      	cmp	r3, #2
9000403c:	d105      	bne.n	9000404a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000403e:	687b      	ldr	r3, [r7, #4]
90004040:	681b      	ldr	r3, [r3, #0]
90004042:	2101      	movs	r1, #1
90004044:	4618      	mov	r0, r3
90004046:	f007 f93f 	bl	9000b2c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
9000404a:	6878      	ldr	r0, [r7, #4]
9000404c:	f7fd f868 	bl	90001120 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90004050:	687b      	ldr	r3, [r7, #4]
90004052:	681b      	ldr	r3, [r3, #0]
90004054:	4618      	mov	r0, r3
90004056:	f007 f8f5 	bl	9000b244 <USB_ReadInterrupts>
9000405a:	4603      	mov	r3, r0
9000405c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90004060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004064:	d102      	bne.n	9000406c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90004066:	6878      	ldr	r0, [r7, #4]
90004068:	f001 fca1 	bl	900059ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
9000406c:	687b      	ldr	r3, [r7, #4]
9000406e:	681b      	ldr	r3, [r3, #0]
90004070:	4618      	mov	r0, r3
90004072:	f007 f8e7 	bl	9000b244 <USB_ReadInterrupts>
90004076:	4603      	mov	r3, r0
90004078:	f003 0308 	and.w	r3, r3, #8
9000407c:	2b08      	cmp	r3, #8
9000407e:	d106      	bne.n	9000408e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90004080:	6878      	ldr	r0, [r7, #4]
90004082:	f7fd f831 	bl	900010e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90004086:	687b      	ldr	r3, [r7, #4]
90004088:	681b      	ldr	r3, [r3, #0]
9000408a:	2208      	movs	r2, #8
9000408c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
9000408e:	687b      	ldr	r3, [r7, #4]
90004090:	681b      	ldr	r3, [r3, #0]
90004092:	4618      	mov	r0, r3
90004094:	f007 f8d6 	bl	9000b244 <USB_ReadInterrupts>
90004098:	4603      	mov	r3, r0
9000409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000409e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
900040a2:	d139      	bne.n	90004118 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
900040a4:	687b      	ldr	r3, [r7, #4]
900040a6:	681b      	ldr	r3, [r3, #0]
900040a8:	4618      	mov	r0, r3
900040aa:	f007 f94a 	bl	9000b342 <USB_HC_ReadInterrupt>
900040ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900040b0:	2300      	movs	r3, #0
900040b2:	617b      	str	r3, [r7, #20]
900040b4:	e025      	b.n	90004102 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
900040b6:	697b      	ldr	r3, [r7, #20]
900040b8:	f003 030f 	and.w	r3, r3, #15
900040bc:	68ba      	ldr	r2, [r7, #8]
900040be:	fa22 f303 	lsr.w	r3, r2, r3
900040c2:	f003 0301 	and.w	r3, r3, #1
900040c6:	2b00      	cmp	r3, #0
900040c8:	d018      	beq.n	900040fc <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900040ca:	697b      	ldr	r3, [r7, #20]
900040cc:	015a      	lsls	r2, r3, #5
900040ce:	68fb      	ldr	r3, [r7, #12]
900040d0:	4413      	add	r3, r2
900040d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900040d6:	681b      	ldr	r3, [r3, #0]
900040d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
900040dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900040e0:	d106      	bne.n	900040f0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
900040e2:	697b      	ldr	r3, [r7, #20]
900040e4:	b2db      	uxtb	r3, r3
900040e6:	4619      	mov	r1, r3
900040e8:	6878      	ldr	r0, [r7, #4]
900040ea:	f000 f859 	bl	900041a0 <HCD_HC_IN_IRQHandler>
900040ee:	e005      	b.n	900040fc <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
900040f0:	697b      	ldr	r3, [r7, #20]
900040f2:	b2db      	uxtb	r3, r3
900040f4:	4619      	mov	r1, r3
900040f6:	6878      	ldr	r0, [r7, #4]
900040f8:	f000 febb 	bl	90004e72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900040fc:	697b      	ldr	r3, [r7, #20]
900040fe:	3301      	adds	r3, #1
90004100:	617b      	str	r3, [r7, #20]
90004102:	687b      	ldr	r3, [r7, #4]
90004104:	795b      	ldrb	r3, [r3, #5]
90004106:	461a      	mov	r2, r3
90004108:	697b      	ldr	r3, [r7, #20]
9000410a:	4293      	cmp	r3, r2
9000410c:	d3d3      	bcc.n	900040b6 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000410e:	687b      	ldr	r3, [r7, #4]
90004110:	681b      	ldr	r3, [r3, #0]
90004112:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90004116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90004118:	687b      	ldr	r3, [r7, #4]
9000411a:	681b      	ldr	r3, [r3, #0]
9000411c:	4618      	mov	r0, r3
9000411e:	f007 f891 	bl	9000b244 <USB_ReadInterrupts>
90004122:	4603      	mov	r3, r0
90004124:	f003 0310 	and.w	r3, r3, #16
90004128:	2b10      	cmp	r3, #16
9000412a:	d101      	bne.n	90004130 <HAL_HCD_IRQHandler+0x1ea>
9000412c:	2301      	movs	r3, #1
9000412e:	e000      	b.n	90004132 <HAL_HCD_IRQHandler+0x1ec>
90004130:	2300      	movs	r3, #0
90004132:	2b00      	cmp	r3, #0
90004134:	d014      	beq.n	90004160 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004136:	687b      	ldr	r3, [r7, #4]
90004138:	681b      	ldr	r3, [r3, #0]
9000413a:	699a      	ldr	r2, [r3, #24]
9000413c:	687b      	ldr	r3, [r7, #4]
9000413e:	681b      	ldr	r3, [r3, #0]
90004140:	f022 0210 	bic.w	r2, r2, #16
90004144:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90004146:	6878      	ldr	r0, [r7, #4]
90004148:	f001 fb52 	bl	900057f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
9000414c:	687b      	ldr	r3, [r7, #4]
9000414e:	681b      	ldr	r3, [r3, #0]
90004150:	699a      	ldr	r2, [r3, #24]
90004152:	687b      	ldr	r3, [r7, #4]
90004154:	681b      	ldr	r3, [r3, #0]
90004156:	f042 0210 	orr.w	r2, r2, #16
9000415a:	619a      	str	r2, [r3, #24]
9000415c:	e000      	b.n	90004160 <HAL_HCD_IRQHandler+0x21a>
      return;
9000415e:	bf00      	nop
    }
  }
}
90004160:	3718      	adds	r7, #24
90004162:	46bd      	mov	sp, r7
90004164:	bd80      	pop	{r7, pc}

90004166 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90004166:	b580      	push	{r7, lr}
90004168:	b082      	sub	sp, #8
9000416a:	af00      	add	r7, sp, #0
9000416c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
9000416e:	687b      	ldr	r3, [r7, #4]
90004170:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004174:	2b01      	cmp	r3, #1
90004176:	d101      	bne.n	9000417c <HAL_HCD_Stop+0x16>
90004178:	2302      	movs	r3, #2
9000417a:	e00d      	b.n	90004198 <HAL_HCD_Stop+0x32>
9000417c:	687b      	ldr	r3, [r7, #4]
9000417e:	2201      	movs	r2, #1
90004180:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004184:	687b      	ldr	r3, [r7, #4]
90004186:	681b      	ldr	r3, [r3, #0]
90004188:	4618      	mov	r0, r3
9000418a:	f007 fa0b 	bl	9000b5a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
9000418e:	687b      	ldr	r3, [r7, #4]
90004190:	2200      	movs	r2, #0
90004192:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
90004196:	2300      	movs	r3, #0
}
90004198:	4618      	mov	r0, r3
9000419a:	3708      	adds	r7, #8
9000419c:	46bd      	mov	sp, r7
9000419e:	bd80      	pop	{r7, pc}

900041a0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
900041a0:	b580      	push	{r7, lr}
900041a2:	b086      	sub	sp, #24
900041a4:	af00      	add	r7, sp, #0
900041a6:	6078      	str	r0, [r7, #4]
900041a8:	460b      	mov	r3, r1
900041aa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900041ac:	687b      	ldr	r3, [r7, #4]
900041ae:	681b      	ldr	r3, [r3, #0]
900041b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900041b2:	697b      	ldr	r3, [r7, #20]
900041b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
900041b6:	687b      	ldr	r3, [r7, #4]
900041b8:	681b      	ldr	r3, [r3, #0]
900041ba:	78fa      	ldrb	r2, [r7, #3]
900041bc:	4611      	mov	r1, r2
900041be:	4618      	mov	r0, r3
900041c0:	f007 f853 	bl	9000b26a <USB_ReadChInterrupts>
900041c4:	4603      	mov	r3, r0
900041c6:	f003 0304 	and.w	r3, r3, #4
900041ca:	2b04      	cmp	r3, #4
900041cc:	d11a      	bne.n	90004204 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
900041ce:	78fb      	ldrb	r3, [r7, #3]
900041d0:	015a      	lsls	r2, r3, #5
900041d2:	693b      	ldr	r3, [r7, #16]
900041d4:	4413      	add	r3, r2
900041d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900041da:	461a      	mov	r2, r3
900041dc:	2304      	movs	r3, #4
900041de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900041e0:	78fa      	ldrb	r2, [r7, #3]
900041e2:	6879      	ldr	r1, [r7, #4]
900041e4:	4613      	mov	r3, r2
900041e6:	011b      	lsls	r3, r3, #4
900041e8:	1a9b      	subs	r3, r3, r2
900041ea:	009b      	lsls	r3, r3, #2
900041ec:	440b      	add	r3, r1
900041ee:	334d      	adds	r3, #77	@ 0x4d
900041f0:	2207      	movs	r2, #7
900041f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041f4:	687b      	ldr	r3, [r7, #4]
900041f6:	681b      	ldr	r3, [r3, #0]
900041f8:	78fa      	ldrb	r2, [r7, #3]
900041fa:	4611      	mov	r1, r2
900041fc:	4618      	mov	r0, r3
900041fe:	f007 f8b1 	bl	9000b364 <USB_HC_Halt>
90004202:	e09e      	b.n	90004342 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90004204:	687b      	ldr	r3, [r7, #4]
90004206:	681b      	ldr	r3, [r3, #0]
90004208:	78fa      	ldrb	r2, [r7, #3]
9000420a:	4611      	mov	r1, r2
9000420c:	4618      	mov	r0, r3
9000420e:	f007 f82c 	bl	9000b26a <USB_ReadChInterrupts>
90004212:	4603      	mov	r3, r0
90004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90004218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000421c:	d11b      	bne.n	90004256 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
9000421e:	78fb      	ldrb	r3, [r7, #3]
90004220:	015a      	lsls	r2, r3, #5
90004222:	693b      	ldr	r3, [r7, #16]
90004224:	4413      	add	r3, r2
90004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000422a:	461a      	mov	r2, r3
9000422c:	f44f 7380 	mov.w	r3, #256	@ 0x100
90004230:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
90004232:	78fa      	ldrb	r2, [r7, #3]
90004234:	6879      	ldr	r1, [r7, #4]
90004236:	4613      	mov	r3, r2
90004238:	011b      	lsls	r3, r3, #4
9000423a:	1a9b      	subs	r3, r3, r2
9000423c:	009b      	lsls	r3, r3, #2
9000423e:	440b      	add	r3, r1
90004240:	334d      	adds	r3, #77	@ 0x4d
90004242:	2208      	movs	r2, #8
90004244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004246:	687b      	ldr	r3, [r7, #4]
90004248:	681b      	ldr	r3, [r3, #0]
9000424a:	78fa      	ldrb	r2, [r7, #3]
9000424c:	4611      	mov	r1, r2
9000424e:	4618      	mov	r0, r3
90004250:	f007 f888 	bl	9000b364 <USB_HC_Halt>
90004254:	e075      	b.n	90004342 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004256:	687b      	ldr	r3, [r7, #4]
90004258:	681b      	ldr	r3, [r3, #0]
9000425a:	78fa      	ldrb	r2, [r7, #3]
9000425c:	4611      	mov	r1, r2
9000425e:	4618      	mov	r0, r3
90004260:	f007 f803 	bl	9000b26a <USB_ReadChInterrupts>
90004264:	4603      	mov	r3, r0
90004266:	f003 0308 	and.w	r3, r3, #8
9000426a:	2b08      	cmp	r3, #8
9000426c:	d11a      	bne.n	900042a4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000426e:	78fb      	ldrb	r3, [r7, #3]
90004270:	015a      	lsls	r2, r3, #5
90004272:	693b      	ldr	r3, [r7, #16]
90004274:	4413      	add	r3, r2
90004276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000427a:	461a      	mov	r2, r3
9000427c:	2308      	movs	r3, #8
9000427e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004280:	78fa      	ldrb	r2, [r7, #3]
90004282:	6879      	ldr	r1, [r7, #4]
90004284:	4613      	mov	r3, r2
90004286:	011b      	lsls	r3, r3, #4
90004288:	1a9b      	subs	r3, r3, r2
9000428a:	009b      	lsls	r3, r3, #2
9000428c:	440b      	add	r3, r1
9000428e:	334d      	adds	r3, #77	@ 0x4d
90004290:	2206      	movs	r2, #6
90004292:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004294:	687b      	ldr	r3, [r7, #4]
90004296:	681b      	ldr	r3, [r3, #0]
90004298:	78fa      	ldrb	r2, [r7, #3]
9000429a:	4611      	mov	r1, r2
9000429c:	4618      	mov	r0, r3
9000429e:	f007 f861 	bl	9000b364 <USB_HC_Halt>
900042a2:	e04e      	b.n	90004342 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900042a4:	687b      	ldr	r3, [r7, #4]
900042a6:	681b      	ldr	r3, [r3, #0]
900042a8:	78fa      	ldrb	r2, [r7, #3]
900042aa:	4611      	mov	r1, r2
900042ac:	4618      	mov	r0, r3
900042ae:	f006 ffdc 	bl	9000b26a <USB_ReadChInterrupts>
900042b2:	4603      	mov	r3, r0
900042b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900042b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900042bc:	d11b      	bne.n	900042f6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900042be:	78fb      	ldrb	r3, [r7, #3]
900042c0:	015a      	lsls	r2, r3, #5
900042c2:	693b      	ldr	r3, [r7, #16]
900042c4:	4413      	add	r3, r2
900042c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042ca:	461a      	mov	r2, r3
900042cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900042d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
900042d2:	78fa      	ldrb	r2, [r7, #3]
900042d4:	6879      	ldr	r1, [r7, #4]
900042d6:	4613      	mov	r3, r2
900042d8:	011b      	lsls	r3, r3, #4
900042da:	1a9b      	subs	r3, r3, r2
900042dc:	009b      	lsls	r3, r3, #2
900042de:	440b      	add	r3, r1
900042e0:	334d      	adds	r3, #77	@ 0x4d
900042e2:	2209      	movs	r2, #9
900042e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042e6:	687b      	ldr	r3, [r7, #4]
900042e8:	681b      	ldr	r3, [r3, #0]
900042ea:	78fa      	ldrb	r2, [r7, #3]
900042ec:	4611      	mov	r1, r2
900042ee:	4618      	mov	r0, r3
900042f0:	f007 f838 	bl	9000b364 <USB_HC_Halt>
900042f4:	e025      	b.n	90004342 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900042f6:	687b      	ldr	r3, [r7, #4]
900042f8:	681b      	ldr	r3, [r3, #0]
900042fa:	78fa      	ldrb	r2, [r7, #3]
900042fc:	4611      	mov	r1, r2
900042fe:	4618      	mov	r0, r3
90004300:	f006 ffb3 	bl	9000b26a <USB_ReadChInterrupts>
90004304:	4603      	mov	r3, r0
90004306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000430a:	2b80      	cmp	r3, #128	@ 0x80
9000430c:	d119      	bne.n	90004342 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000430e:	78fb      	ldrb	r3, [r7, #3]
90004310:	015a      	lsls	r2, r3, #5
90004312:	693b      	ldr	r3, [r7, #16]
90004314:	4413      	add	r3, r2
90004316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000431a:	461a      	mov	r2, r3
9000431c:	2380      	movs	r3, #128	@ 0x80
9000431e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004320:	78fa      	ldrb	r2, [r7, #3]
90004322:	6879      	ldr	r1, [r7, #4]
90004324:	4613      	mov	r3, r2
90004326:	011b      	lsls	r3, r3, #4
90004328:	1a9b      	subs	r3, r3, r2
9000432a:	009b      	lsls	r3, r3, #2
9000432c:	440b      	add	r3, r1
9000432e:	334d      	adds	r3, #77	@ 0x4d
90004330:	2207      	movs	r2, #7
90004332:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004334:	687b      	ldr	r3, [r7, #4]
90004336:	681b      	ldr	r3, [r3, #0]
90004338:	78fa      	ldrb	r2, [r7, #3]
9000433a:	4611      	mov	r1, r2
9000433c:	4618      	mov	r0, r3
9000433e:	f007 f811 	bl	9000b364 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004342:	687b      	ldr	r3, [r7, #4]
90004344:	681b      	ldr	r3, [r3, #0]
90004346:	78fa      	ldrb	r2, [r7, #3]
90004348:	4611      	mov	r1, r2
9000434a:	4618      	mov	r0, r3
9000434c:	f006 ff8d 	bl	9000b26a <USB_ReadChInterrupts>
90004350:	4603      	mov	r3, r0
90004352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000435a:	d112      	bne.n	90004382 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000435c:	687b      	ldr	r3, [r7, #4]
9000435e:	681b      	ldr	r3, [r3, #0]
90004360:	78fa      	ldrb	r2, [r7, #3]
90004362:	4611      	mov	r1, r2
90004364:	4618      	mov	r0, r3
90004366:	f006 fffd 	bl	9000b364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
9000436a:	78fb      	ldrb	r3, [r7, #3]
9000436c:	015a      	lsls	r2, r3, #5
9000436e:	693b      	ldr	r3, [r7, #16]
90004370:	4413      	add	r3, r2
90004372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004376:	461a      	mov	r2, r3
90004378:	f44f 7300 	mov.w	r3, #512	@ 0x200
9000437c:	6093      	str	r3, [r2, #8]
9000437e:	f000 bd75 	b.w	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004382:	687b      	ldr	r3, [r7, #4]
90004384:	681b      	ldr	r3, [r3, #0]
90004386:	78fa      	ldrb	r2, [r7, #3]
90004388:	4611      	mov	r1, r2
9000438a:	4618      	mov	r0, r3
9000438c:	f006 ff6d 	bl	9000b26a <USB_ReadChInterrupts>
90004390:	4603      	mov	r3, r0
90004392:	f003 0301 	and.w	r3, r3, #1
90004396:	2b01      	cmp	r3, #1
90004398:	f040 8128 	bne.w	900045ec <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
9000439c:	78fb      	ldrb	r3, [r7, #3]
9000439e:	015a      	lsls	r2, r3, #5
900043a0:	693b      	ldr	r3, [r7, #16]
900043a2:	4413      	add	r3, r2
900043a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043a8:	461a      	mov	r2, r3
900043aa:	2320      	movs	r3, #32
900043ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
900043ae:	78fa      	ldrb	r2, [r7, #3]
900043b0:	6879      	ldr	r1, [r7, #4]
900043b2:	4613      	mov	r3, r2
900043b4:	011b      	lsls	r3, r3, #4
900043b6:	1a9b      	subs	r3, r3, r2
900043b8:	009b      	lsls	r3, r3, #2
900043ba:	440b      	add	r3, r1
900043bc:	331b      	adds	r3, #27
900043be:	781b      	ldrb	r3, [r3, #0]
900043c0:	2b01      	cmp	r3, #1
900043c2:	d119      	bne.n	900043f8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900043c4:	78fa      	ldrb	r2, [r7, #3]
900043c6:	6879      	ldr	r1, [r7, #4]
900043c8:	4613      	mov	r3, r2
900043ca:	011b      	lsls	r3, r3, #4
900043cc:	1a9b      	subs	r3, r3, r2
900043ce:	009b      	lsls	r3, r3, #2
900043d0:	440b      	add	r3, r1
900043d2:	331b      	adds	r3, #27
900043d4:	2200      	movs	r2, #0
900043d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900043d8:	78fb      	ldrb	r3, [r7, #3]
900043da:	015a      	lsls	r2, r3, #5
900043dc:	693b      	ldr	r3, [r7, #16]
900043de:	4413      	add	r3, r2
900043e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043e4:	685b      	ldr	r3, [r3, #4]
900043e6:	78fa      	ldrb	r2, [r7, #3]
900043e8:	0151      	lsls	r1, r2, #5
900043ea:	693a      	ldr	r2, [r7, #16]
900043ec:	440a      	add	r2, r1
900043ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900043f6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
900043f8:	687b      	ldr	r3, [r7, #4]
900043fa:	799b      	ldrb	r3, [r3, #6]
900043fc:	2b00      	cmp	r3, #0
900043fe:	d01b      	beq.n	90004438 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004400:	78fa      	ldrb	r2, [r7, #3]
90004402:	6879      	ldr	r1, [r7, #4]
90004404:	4613      	mov	r3, r2
90004406:	011b      	lsls	r3, r3, #4
90004408:	1a9b      	subs	r3, r3, r2
9000440a:	009b      	lsls	r3, r3, #2
9000440c:	440b      	add	r3, r1
9000440e:	3330      	adds	r3, #48	@ 0x30
90004410:	6819      	ldr	r1, [r3, #0]
90004412:	78fb      	ldrb	r3, [r7, #3]
90004414:	015a      	lsls	r2, r3, #5
90004416:	693b      	ldr	r3, [r7, #16]
90004418:	4413      	add	r3, r2
9000441a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000441e:	691b      	ldr	r3, [r3, #16]
90004420:	f3c3 0312 	ubfx	r3, r3, #0, #19
90004424:	78fa      	ldrb	r2, [r7, #3]
90004426:	1ac9      	subs	r1, r1, r3
90004428:	6878      	ldr	r0, [r7, #4]
9000442a:	4613      	mov	r3, r2
9000442c:	011b      	lsls	r3, r3, #4
9000442e:	1a9b      	subs	r3, r3, r2
90004430:	009b      	lsls	r3, r3, #2
90004432:	4403      	add	r3, r0
90004434:	3338      	adds	r3, #56	@ 0x38
90004436:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004438:	78fa      	ldrb	r2, [r7, #3]
9000443a:	6879      	ldr	r1, [r7, #4]
9000443c:	4613      	mov	r3, r2
9000443e:	011b      	lsls	r3, r3, #4
90004440:	1a9b      	subs	r3, r3, r2
90004442:	009b      	lsls	r3, r3, #2
90004444:	440b      	add	r3, r1
90004446:	334d      	adds	r3, #77	@ 0x4d
90004448:	2201      	movs	r2, #1
9000444a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
9000444c:	78fa      	ldrb	r2, [r7, #3]
9000444e:	6879      	ldr	r1, [r7, #4]
90004450:	4613      	mov	r3, r2
90004452:	011b      	lsls	r3, r3, #4
90004454:	1a9b      	subs	r3, r3, r2
90004456:	009b      	lsls	r3, r3, #2
90004458:	440b      	add	r3, r1
9000445a:	3344      	adds	r3, #68	@ 0x44
9000445c:	2200      	movs	r2, #0
9000445e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004460:	78fb      	ldrb	r3, [r7, #3]
90004462:	015a      	lsls	r2, r3, #5
90004464:	693b      	ldr	r3, [r7, #16]
90004466:	4413      	add	r3, r2
90004468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000446c:	461a      	mov	r2, r3
9000446e:	2301      	movs	r3, #1
90004470:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004472:	78fa      	ldrb	r2, [r7, #3]
90004474:	6879      	ldr	r1, [r7, #4]
90004476:	4613      	mov	r3, r2
90004478:	011b      	lsls	r3, r3, #4
9000447a:	1a9b      	subs	r3, r3, r2
9000447c:	009b      	lsls	r3, r3, #2
9000447e:	440b      	add	r3, r1
90004480:	3326      	adds	r3, #38	@ 0x26
90004482:	781b      	ldrb	r3, [r3, #0]
90004484:	2b00      	cmp	r3, #0
90004486:	d00a      	beq.n	9000449e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004488:	78fa      	ldrb	r2, [r7, #3]
9000448a:	6879      	ldr	r1, [r7, #4]
9000448c:	4613      	mov	r3, r2
9000448e:	011b      	lsls	r3, r3, #4
90004490:	1a9b      	subs	r3, r3, r2
90004492:	009b      	lsls	r3, r3, #2
90004494:	440b      	add	r3, r1
90004496:	3326      	adds	r3, #38	@ 0x26
90004498:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000449a:	2b02      	cmp	r3, #2
9000449c:	d110      	bne.n	900044c0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000449e:	687b      	ldr	r3, [r7, #4]
900044a0:	681b      	ldr	r3, [r3, #0]
900044a2:	78fa      	ldrb	r2, [r7, #3]
900044a4:	4611      	mov	r1, r2
900044a6:	4618      	mov	r0, r3
900044a8:	f006 ff5c 	bl	9000b364 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900044ac:	78fb      	ldrb	r3, [r7, #3]
900044ae:	015a      	lsls	r2, r3, #5
900044b0:	693b      	ldr	r3, [r7, #16]
900044b2:	4413      	add	r3, r2
900044b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044b8:	461a      	mov	r2, r3
900044ba:	2310      	movs	r3, #16
900044bc:	6093      	str	r3, [r2, #8]
900044be:	e03d      	b.n	9000453c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900044c0:	78fa      	ldrb	r2, [r7, #3]
900044c2:	6879      	ldr	r1, [r7, #4]
900044c4:	4613      	mov	r3, r2
900044c6:	011b      	lsls	r3, r3, #4
900044c8:	1a9b      	subs	r3, r3, r2
900044ca:	009b      	lsls	r3, r3, #2
900044cc:	440b      	add	r3, r1
900044ce:	3326      	adds	r3, #38	@ 0x26
900044d0:	781b      	ldrb	r3, [r3, #0]
900044d2:	2b03      	cmp	r3, #3
900044d4:	d00a      	beq.n	900044ec <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
900044d6:	78fa      	ldrb	r2, [r7, #3]
900044d8:	6879      	ldr	r1, [r7, #4]
900044da:	4613      	mov	r3, r2
900044dc:	011b      	lsls	r3, r3, #4
900044de:	1a9b      	subs	r3, r3, r2
900044e0:	009b      	lsls	r3, r3, #2
900044e2:	440b      	add	r3, r1
900044e4:	3326      	adds	r3, #38	@ 0x26
900044e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900044e8:	2b01      	cmp	r3, #1
900044ea:	d127      	bne.n	9000453c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900044ec:	78fb      	ldrb	r3, [r7, #3]
900044ee:	015a      	lsls	r2, r3, #5
900044f0:	693b      	ldr	r3, [r7, #16]
900044f2:	4413      	add	r3, r2
900044f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044f8:	681b      	ldr	r3, [r3, #0]
900044fa:	78fa      	ldrb	r2, [r7, #3]
900044fc:	0151      	lsls	r1, r2, #5
900044fe:	693a      	ldr	r2, [r7, #16]
90004500:	440a      	add	r2, r1
90004502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004506:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
9000450a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000450c:	78fa      	ldrb	r2, [r7, #3]
9000450e:	6879      	ldr	r1, [r7, #4]
90004510:	4613      	mov	r3, r2
90004512:	011b      	lsls	r3, r3, #4
90004514:	1a9b      	subs	r3, r3, r2
90004516:	009b      	lsls	r3, r3, #2
90004518:	440b      	add	r3, r1
9000451a:	334c      	adds	r3, #76	@ 0x4c
9000451c:	2201      	movs	r2, #1
9000451e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004520:	78fa      	ldrb	r2, [r7, #3]
90004522:	6879      	ldr	r1, [r7, #4]
90004524:	4613      	mov	r3, r2
90004526:	011b      	lsls	r3, r3, #4
90004528:	1a9b      	subs	r3, r3, r2
9000452a:	009b      	lsls	r3, r3, #2
9000452c:	440b      	add	r3, r1
9000452e:	334c      	adds	r3, #76	@ 0x4c
90004530:	781a      	ldrb	r2, [r3, #0]
90004532:	78fb      	ldrb	r3, [r7, #3]
90004534:	4619      	mov	r1, r3
90004536:	6878      	ldr	r0, [r7, #4]
90004538:	f7fc fe1c 	bl	90001174 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
9000453c:	687b      	ldr	r3, [r7, #4]
9000453e:	799b      	ldrb	r3, [r3, #6]
90004540:	2b01      	cmp	r3, #1
90004542:	d13b      	bne.n	900045bc <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004544:	78fa      	ldrb	r2, [r7, #3]
90004546:	6879      	ldr	r1, [r7, #4]
90004548:	4613      	mov	r3, r2
9000454a:	011b      	lsls	r3, r3, #4
9000454c:	1a9b      	subs	r3, r3, r2
9000454e:	009b      	lsls	r3, r3, #2
90004550:	440b      	add	r3, r1
90004552:	3338      	adds	r3, #56	@ 0x38
90004554:	6819      	ldr	r1, [r3, #0]
90004556:	78fa      	ldrb	r2, [r7, #3]
90004558:	6878      	ldr	r0, [r7, #4]
9000455a:	4613      	mov	r3, r2
9000455c:	011b      	lsls	r3, r3, #4
9000455e:	1a9b      	subs	r3, r3, r2
90004560:	009b      	lsls	r3, r3, #2
90004562:	4403      	add	r3, r0
90004564:	3328      	adds	r3, #40	@ 0x28
90004566:	881b      	ldrh	r3, [r3, #0]
90004568:	440b      	add	r3, r1
9000456a:	1e59      	subs	r1, r3, #1
9000456c:	78fa      	ldrb	r2, [r7, #3]
9000456e:	6878      	ldr	r0, [r7, #4]
90004570:	4613      	mov	r3, r2
90004572:	011b      	lsls	r3, r3, #4
90004574:	1a9b      	subs	r3, r3, r2
90004576:	009b      	lsls	r3, r3, #2
90004578:	4403      	add	r3, r0
9000457a:	3328      	adds	r3, #40	@ 0x28
9000457c:	881b      	ldrh	r3, [r3, #0]
9000457e:	fbb1 f3f3 	udiv	r3, r1, r3
90004582:	f003 0301 	and.w	r3, r3, #1
90004586:	2b00      	cmp	r3, #0
90004588:	f000 8470 	beq.w	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
9000458c:	78fa      	ldrb	r2, [r7, #3]
9000458e:	6879      	ldr	r1, [r7, #4]
90004590:	4613      	mov	r3, r2
90004592:	011b      	lsls	r3, r3, #4
90004594:	1a9b      	subs	r3, r3, r2
90004596:	009b      	lsls	r3, r3, #2
90004598:	440b      	add	r3, r1
9000459a:	333c      	adds	r3, #60	@ 0x3c
9000459c:	781b      	ldrb	r3, [r3, #0]
9000459e:	78fa      	ldrb	r2, [r7, #3]
900045a0:	f083 0301 	eor.w	r3, r3, #1
900045a4:	b2d8      	uxtb	r0, r3
900045a6:	6879      	ldr	r1, [r7, #4]
900045a8:	4613      	mov	r3, r2
900045aa:	011b      	lsls	r3, r3, #4
900045ac:	1a9b      	subs	r3, r3, r2
900045ae:	009b      	lsls	r3, r3, #2
900045b0:	440b      	add	r3, r1
900045b2:	333c      	adds	r3, #60	@ 0x3c
900045b4:	4602      	mov	r2, r0
900045b6:	701a      	strb	r2, [r3, #0]
900045b8:	f000 bc58 	b.w	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
900045bc:	78fa      	ldrb	r2, [r7, #3]
900045be:	6879      	ldr	r1, [r7, #4]
900045c0:	4613      	mov	r3, r2
900045c2:	011b      	lsls	r3, r3, #4
900045c4:	1a9b      	subs	r3, r3, r2
900045c6:	009b      	lsls	r3, r3, #2
900045c8:	440b      	add	r3, r1
900045ca:	333c      	adds	r3, #60	@ 0x3c
900045cc:	781b      	ldrb	r3, [r3, #0]
900045ce:	78fa      	ldrb	r2, [r7, #3]
900045d0:	f083 0301 	eor.w	r3, r3, #1
900045d4:	b2d8      	uxtb	r0, r3
900045d6:	6879      	ldr	r1, [r7, #4]
900045d8:	4613      	mov	r3, r2
900045da:	011b      	lsls	r3, r3, #4
900045dc:	1a9b      	subs	r3, r3, r2
900045de:	009b      	lsls	r3, r3, #2
900045e0:	440b      	add	r3, r1
900045e2:	333c      	adds	r3, #60	@ 0x3c
900045e4:	4602      	mov	r2, r0
900045e6:	701a      	strb	r2, [r3, #0]
900045e8:	f000 bc40 	b.w	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900045ec:	687b      	ldr	r3, [r7, #4]
900045ee:	681b      	ldr	r3, [r3, #0]
900045f0:	78fa      	ldrb	r2, [r7, #3]
900045f2:	4611      	mov	r1, r2
900045f4:	4618      	mov	r0, r3
900045f6:	f006 fe38 	bl	9000b26a <USB_ReadChInterrupts>
900045fa:	4603      	mov	r3, r0
900045fc:	f003 0320 	and.w	r3, r3, #32
90004600:	2b20      	cmp	r3, #32
90004602:	d131      	bne.n	90004668 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004604:	78fb      	ldrb	r3, [r7, #3]
90004606:	015a      	lsls	r2, r3, #5
90004608:	693b      	ldr	r3, [r7, #16]
9000460a:	4413      	add	r3, r2
9000460c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004610:	461a      	mov	r2, r3
90004612:	2320      	movs	r3, #32
90004614:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
90004616:	78fa      	ldrb	r2, [r7, #3]
90004618:	6879      	ldr	r1, [r7, #4]
9000461a:	4613      	mov	r3, r2
9000461c:	011b      	lsls	r3, r3, #4
9000461e:	1a9b      	subs	r3, r3, r2
90004620:	009b      	lsls	r3, r3, #2
90004622:	440b      	add	r3, r1
90004624:	331a      	adds	r3, #26
90004626:	781b      	ldrb	r3, [r3, #0]
90004628:	2b01      	cmp	r3, #1
9000462a:	f040 841f 	bne.w	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
9000462e:	78fa      	ldrb	r2, [r7, #3]
90004630:	6879      	ldr	r1, [r7, #4]
90004632:	4613      	mov	r3, r2
90004634:	011b      	lsls	r3, r3, #4
90004636:	1a9b      	subs	r3, r3, r2
90004638:	009b      	lsls	r3, r3, #2
9000463a:	440b      	add	r3, r1
9000463c:	331b      	adds	r3, #27
9000463e:	2201      	movs	r2, #1
90004640:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004642:	78fa      	ldrb	r2, [r7, #3]
90004644:	6879      	ldr	r1, [r7, #4]
90004646:	4613      	mov	r3, r2
90004648:	011b      	lsls	r3, r3, #4
9000464a:	1a9b      	subs	r3, r3, r2
9000464c:	009b      	lsls	r3, r3, #2
9000464e:	440b      	add	r3, r1
90004650:	334d      	adds	r3, #77	@ 0x4d
90004652:	2203      	movs	r2, #3
90004654:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004656:	687b      	ldr	r3, [r7, #4]
90004658:	681b      	ldr	r3, [r3, #0]
9000465a:	78fa      	ldrb	r2, [r7, #3]
9000465c:	4611      	mov	r1, r2
9000465e:	4618      	mov	r0, r3
90004660:	f006 fe80 	bl	9000b364 <USB_HC_Halt>
90004664:	f000 bc02 	b.w	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004668:	687b      	ldr	r3, [r7, #4]
9000466a:	681b      	ldr	r3, [r3, #0]
9000466c:	78fa      	ldrb	r2, [r7, #3]
9000466e:	4611      	mov	r1, r2
90004670:	4618      	mov	r0, r3
90004672:	f006 fdfa 	bl	9000b26a <USB_ReadChInterrupts>
90004676:	4603      	mov	r3, r0
90004678:	f003 0302 	and.w	r3, r3, #2
9000467c:	2b02      	cmp	r3, #2
9000467e:	f040 8305 	bne.w	90004c8c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90004682:	78fb      	ldrb	r3, [r7, #3]
90004684:	015a      	lsls	r2, r3, #5
90004686:	693b      	ldr	r3, [r7, #16]
90004688:	4413      	add	r3, r2
9000468a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000468e:	461a      	mov	r2, r3
90004690:	2302      	movs	r3, #2
90004692:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004694:	78fa      	ldrb	r2, [r7, #3]
90004696:	6879      	ldr	r1, [r7, #4]
90004698:	4613      	mov	r3, r2
9000469a:	011b      	lsls	r3, r3, #4
9000469c:	1a9b      	subs	r3, r3, r2
9000469e:	009b      	lsls	r3, r3, #2
900046a0:	440b      	add	r3, r1
900046a2:	334d      	adds	r3, #77	@ 0x4d
900046a4:	781b      	ldrb	r3, [r3, #0]
900046a6:	2b01      	cmp	r3, #1
900046a8:	d114      	bne.n	900046d4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900046aa:	78fa      	ldrb	r2, [r7, #3]
900046ac:	6879      	ldr	r1, [r7, #4]
900046ae:	4613      	mov	r3, r2
900046b0:	011b      	lsls	r3, r3, #4
900046b2:	1a9b      	subs	r3, r3, r2
900046b4:	009b      	lsls	r3, r3, #2
900046b6:	440b      	add	r3, r1
900046b8:	334d      	adds	r3, #77	@ 0x4d
900046ba:	2202      	movs	r2, #2
900046bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900046be:	78fa      	ldrb	r2, [r7, #3]
900046c0:	6879      	ldr	r1, [r7, #4]
900046c2:	4613      	mov	r3, r2
900046c4:	011b      	lsls	r3, r3, #4
900046c6:	1a9b      	subs	r3, r3, r2
900046c8:	009b      	lsls	r3, r3, #2
900046ca:	440b      	add	r3, r1
900046cc:	334c      	adds	r3, #76	@ 0x4c
900046ce:	2201      	movs	r2, #1
900046d0:	701a      	strb	r2, [r3, #0]
900046d2:	e2cc      	b.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
900046d4:	78fa      	ldrb	r2, [r7, #3]
900046d6:	6879      	ldr	r1, [r7, #4]
900046d8:	4613      	mov	r3, r2
900046da:	011b      	lsls	r3, r3, #4
900046dc:	1a9b      	subs	r3, r3, r2
900046de:	009b      	lsls	r3, r3, #2
900046e0:	440b      	add	r3, r1
900046e2:	334d      	adds	r3, #77	@ 0x4d
900046e4:	781b      	ldrb	r3, [r3, #0]
900046e6:	2b06      	cmp	r3, #6
900046e8:	d114      	bne.n	90004714 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900046ea:	78fa      	ldrb	r2, [r7, #3]
900046ec:	6879      	ldr	r1, [r7, #4]
900046ee:	4613      	mov	r3, r2
900046f0:	011b      	lsls	r3, r3, #4
900046f2:	1a9b      	subs	r3, r3, r2
900046f4:	009b      	lsls	r3, r3, #2
900046f6:	440b      	add	r3, r1
900046f8:	334d      	adds	r3, #77	@ 0x4d
900046fa:	2202      	movs	r2, #2
900046fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900046fe:	78fa      	ldrb	r2, [r7, #3]
90004700:	6879      	ldr	r1, [r7, #4]
90004702:	4613      	mov	r3, r2
90004704:	011b      	lsls	r3, r3, #4
90004706:	1a9b      	subs	r3, r3, r2
90004708:	009b      	lsls	r3, r3, #2
9000470a:	440b      	add	r3, r1
9000470c:	334c      	adds	r3, #76	@ 0x4c
9000470e:	2205      	movs	r2, #5
90004710:	701a      	strb	r2, [r3, #0]
90004712:	e2ac      	b.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004714:	78fa      	ldrb	r2, [r7, #3]
90004716:	6879      	ldr	r1, [r7, #4]
90004718:	4613      	mov	r3, r2
9000471a:	011b      	lsls	r3, r3, #4
9000471c:	1a9b      	subs	r3, r3, r2
9000471e:	009b      	lsls	r3, r3, #2
90004720:	440b      	add	r3, r1
90004722:	334d      	adds	r3, #77	@ 0x4d
90004724:	781b      	ldrb	r3, [r3, #0]
90004726:	2b07      	cmp	r3, #7
90004728:	d00b      	beq.n	90004742 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000472a:	78fa      	ldrb	r2, [r7, #3]
9000472c:	6879      	ldr	r1, [r7, #4]
9000472e:	4613      	mov	r3, r2
90004730:	011b      	lsls	r3, r3, #4
90004732:	1a9b      	subs	r3, r3, r2
90004734:	009b      	lsls	r3, r3, #2
90004736:	440b      	add	r3, r1
90004738:	334d      	adds	r3, #77	@ 0x4d
9000473a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000473c:	2b09      	cmp	r3, #9
9000473e:	f040 80a6 	bne.w	9000488e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004742:	78fa      	ldrb	r2, [r7, #3]
90004744:	6879      	ldr	r1, [r7, #4]
90004746:	4613      	mov	r3, r2
90004748:	011b      	lsls	r3, r3, #4
9000474a:	1a9b      	subs	r3, r3, r2
9000474c:	009b      	lsls	r3, r3, #2
9000474e:	440b      	add	r3, r1
90004750:	334d      	adds	r3, #77	@ 0x4d
90004752:	2202      	movs	r2, #2
90004754:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004756:	78fa      	ldrb	r2, [r7, #3]
90004758:	6879      	ldr	r1, [r7, #4]
9000475a:	4613      	mov	r3, r2
9000475c:	011b      	lsls	r3, r3, #4
9000475e:	1a9b      	subs	r3, r3, r2
90004760:	009b      	lsls	r3, r3, #2
90004762:	440b      	add	r3, r1
90004764:	3344      	adds	r3, #68	@ 0x44
90004766:	681b      	ldr	r3, [r3, #0]
90004768:	1c59      	adds	r1, r3, #1
9000476a:	6878      	ldr	r0, [r7, #4]
9000476c:	4613      	mov	r3, r2
9000476e:	011b      	lsls	r3, r3, #4
90004770:	1a9b      	subs	r3, r3, r2
90004772:	009b      	lsls	r3, r3, #2
90004774:	4403      	add	r3, r0
90004776:	3344      	adds	r3, #68	@ 0x44
90004778:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000477a:	78fa      	ldrb	r2, [r7, #3]
9000477c:	6879      	ldr	r1, [r7, #4]
9000477e:	4613      	mov	r3, r2
90004780:	011b      	lsls	r3, r3, #4
90004782:	1a9b      	subs	r3, r3, r2
90004784:	009b      	lsls	r3, r3, #2
90004786:	440b      	add	r3, r1
90004788:	3344      	adds	r3, #68	@ 0x44
9000478a:	681b      	ldr	r3, [r3, #0]
9000478c:	2b02      	cmp	r3, #2
9000478e:	d943      	bls.n	90004818 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004790:	78fa      	ldrb	r2, [r7, #3]
90004792:	6879      	ldr	r1, [r7, #4]
90004794:	4613      	mov	r3, r2
90004796:	011b      	lsls	r3, r3, #4
90004798:	1a9b      	subs	r3, r3, r2
9000479a:	009b      	lsls	r3, r3, #2
9000479c:	440b      	add	r3, r1
9000479e:	3344      	adds	r3, #68	@ 0x44
900047a0:	2200      	movs	r2, #0
900047a2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
900047a4:	78fa      	ldrb	r2, [r7, #3]
900047a6:	6879      	ldr	r1, [r7, #4]
900047a8:	4613      	mov	r3, r2
900047aa:	011b      	lsls	r3, r3, #4
900047ac:	1a9b      	subs	r3, r3, r2
900047ae:	009b      	lsls	r3, r3, #2
900047b0:	440b      	add	r3, r1
900047b2:	331a      	adds	r3, #26
900047b4:	781b      	ldrb	r3, [r3, #0]
900047b6:	2b01      	cmp	r3, #1
900047b8:	d123      	bne.n	90004802 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
900047ba:	78fa      	ldrb	r2, [r7, #3]
900047bc:	6879      	ldr	r1, [r7, #4]
900047be:	4613      	mov	r3, r2
900047c0:	011b      	lsls	r3, r3, #4
900047c2:	1a9b      	subs	r3, r3, r2
900047c4:	009b      	lsls	r3, r3, #2
900047c6:	440b      	add	r3, r1
900047c8:	331b      	adds	r3, #27
900047ca:	2200      	movs	r2, #0
900047cc:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
900047ce:	78fa      	ldrb	r2, [r7, #3]
900047d0:	6879      	ldr	r1, [r7, #4]
900047d2:	4613      	mov	r3, r2
900047d4:	011b      	lsls	r3, r3, #4
900047d6:	1a9b      	subs	r3, r3, r2
900047d8:	009b      	lsls	r3, r3, #2
900047da:	440b      	add	r3, r1
900047dc:	331c      	adds	r3, #28
900047de:	2200      	movs	r2, #0
900047e0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900047e2:	78fb      	ldrb	r3, [r7, #3]
900047e4:	015a      	lsls	r2, r3, #5
900047e6:	693b      	ldr	r3, [r7, #16]
900047e8:	4413      	add	r3, r2
900047ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047ee:	685b      	ldr	r3, [r3, #4]
900047f0:	78fa      	ldrb	r2, [r7, #3]
900047f2:	0151      	lsls	r1, r2, #5
900047f4:	693a      	ldr	r2, [r7, #16]
900047f6:	440a      	add	r2, r1
900047f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900047fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004800:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90004802:	78fa      	ldrb	r2, [r7, #3]
90004804:	6879      	ldr	r1, [r7, #4]
90004806:	4613      	mov	r3, r2
90004808:	011b      	lsls	r3, r3, #4
9000480a:	1a9b      	subs	r3, r3, r2
9000480c:	009b      	lsls	r3, r3, #2
9000480e:	440b      	add	r3, r1
90004810:	334c      	adds	r3, #76	@ 0x4c
90004812:	2204      	movs	r2, #4
90004814:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004816:	e229      	b.n	90004c6c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004818:	78fa      	ldrb	r2, [r7, #3]
9000481a:	6879      	ldr	r1, [r7, #4]
9000481c:	4613      	mov	r3, r2
9000481e:	011b      	lsls	r3, r3, #4
90004820:	1a9b      	subs	r3, r3, r2
90004822:	009b      	lsls	r3, r3, #2
90004824:	440b      	add	r3, r1
90004826:	334c      	adds	r3, #76	@ 0x4c
90004828:	2202      	movs	r2, #2
9000482a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000482c:	78fa      	ldrb	r2, [r7, #3]
9000482e:	6879      	ldr	r1, [r7, #4]
90004830:	4613      	mov	r3, r2
90004832:	011b      	lsls	r3, r3, #4
90004834:	1a9b      	subs	r3, r3, r2
90004836:	009b      	lsls	r3, r3, #2
90004838:	440b      	add	r3, r1
9000483a:	3326      	adds	r3, #38	@ 0x26
9000483c:	781b      	ldrb	r3, [r3, #0]
9000483e:	2b00      	cmp	r3, #0
90004840:	d00b      	beq.n	9000485a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004842:	78fa      	ldrb	r2, [r7, #3]
90004844:	6879      	ldr	r1, [r7, #4]
90004846:	4613      	mov	r3, r2
90004848:	011b      	lsls	r3, r3, #4
9000484a:	1a9b      	subs	r3, r3, r2
9000484c:	009b      	lsls	r3, r3, #2
9000484e:	440b      	add	r3, r1
90004850:	3326      	adds	r3, #38	@ 0x26
90004852:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004854:	2b02      	cmp	r3, #2
90004856:	f040 8209 	bne.w	90004c6c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
9000485a:	78fb      	ldrb	r3, [r7, #3]
9000485c:	015a      	lsls	r2, r3, #5
9000485e:	693b      	ldr	r3, [r7, #16]
90004860:	4413      	add	r3, r2
90004862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004866:	681b      	ldr	r3, [r3, #0]
90004868:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000486a:	68fb      	ldr	r3, [r7, #12]
9000486c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004870:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004872:	68fb      	ldr	r3, [r7, #12]
90004874:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004878:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000487a:	78fb      	ldrb	r3, [r7, #3]
9000487c:	015a      	lsls	r2, r3, #5
9000487e:	693b      	ldr	r3, [r7, #16]
90004880:	4413      	add	r3, r2
90004882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004886:	461a      	mov	r2, r3
90004888:	68fb      	ldr	r3, [r7, #12]
9000488a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000488c:	e1ee      	b.n	90004c6c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000488e:	78fa      	ldrb	r2, [r7, #3]
90004890:	6879      	ldr	r1, [r7, #4]
90004892:	4613      	mov	r3, r2
90004894:	011b      	lsls	r3, r3, #4
90004896:	1a9b      	subs	r3, r3, r2
90004898:	009b      	lsls	r3, r3, #2
9000489a:	440b      	add	r3, r1
9000489c:	334d      	adds	r3, #77	@ 0x4d
9000489e:	781b      	ldrb	r3, [r3, #0]
900048a0:	2b05      	cmp	r3, #5
900048a2:	f040 80c8 	bne.w	90004a36 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900048a6:	78fa      	ldrb	r2, [r7, #3]
900048a8:	6879      	ldr	r1, [r7, #4]
900048aa:	4613      	mov	r3, r2
900048ac:	011b      	lsls	r3, r3, #4
900048ae:	1a9b      	subs	r3, r3, r2
900048b0:	009b      	lsls	r3, r3, #2
900048b2:	440b      	add	r3, r1
900048b4:	334d      	adds	r3, #77	@ 0x4d
900048b6:	2202      	movs	r2, #2
900048b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900048ba:	78fa      	ldrb	r2, [r7, #3]
900048bc:	6879      	ldr	r1, [r7, #4]
900048be:	4613      	mov	r3, r2
900048c0:	011b      	lsls	r3, r3, #4
900048c2:	1a9b      	subs	r3, r3, r2
900048c4:	009b      	lsls	r3, r3, #2
900048c6:	440b      	add	r3, r1
900048c8:	331b      	adds	r3, #27
900048ca:	781b      	ldrb	r3, [r3, #0]
900048cc:	2b01      	cmp	r3, #1
900048ce:	f040 81ce 	bne.w	90004c6e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
900048d2:	78fa      	ldrb	r2, [r7, #3]
900048d4:	6879      	ldr	r1, [r7, #4]
900048d6:	4613      	mov	r3, r2
900048d8:	011b      	lsls	r3, r3, #4
900048da:	1a9b      	subs	r3, r3, r2
900048dc:	009b      	lsls	r3, r3, #2
900048de:	440b      	add	r3, r1
900048e0:	3326      	adds	r3, #38	@ 0x26
900048e2:	781b      	ldrb	r3, [r3, #0]
900048e4:	2b03      	cmp	r3, #3
900048e6:	d16b      	bne.n	900049c0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
900048e8:	78fa      	ldrb	r2, [r7, #3]
900048ea:	6879      	ldr	r1, [r7, #4]
900048ec:	4613      	mov	r3, r2
900048ee:	011b      	lsls	r3, r3, #4
900048f0:	1a9b      	subs	r3, r3, r2
900048f2:	009b      	lsls	r3, r3, #2
900048f4:	440b      	add	r3, r1
900048f6:	3348      	adds	r3, #72	@ 0x48
900048f8:	681b      	ldr	r3, [r3, #0]
900048fa:	1c59      	adds	r1, r3, #1
900048fc:	6878      	ldr	r0, [r7, #4]
900048fe:	4613      	mov	r3, r2
90004900:	011b      	lsls	r3, r3, #4
90004902:	1a9b      	subs	r3, r3, r2
90004904:	009b      	lsls	r3, r3, #2
90004906:	4403      	add	r3, r0
90004908:	3348      	adds	r3, #72	@ 0x48
9000490a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
9000490c:	78fa      	ldrb	r2, [r7, #3]
9000490e:	6879      	ldr	r1, [r7, #4]
90004910:	4613      	mov	r3, r2
90004912:	011b      	lsls	r3, r3, #4
90004914:	1a9b      	subs	r3, r3, r2
90004916:	009b      	lsls	r3, r3, #2
90004918:	440b      	add	r3, r1
9000491a:	3348      	adds	r3, #72	@ 0x48
9000491c:	681b      	ldr	r3, [r3, #0]
9000491e:	2b02      	cmp	r3, #2
90004920:	d943      	bls.n	900049aa <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90004922:	78fa      	ldrb	r2, [r7, #3]
90004924:	6879      	ldr	r1, [r7, #4]
90004926:	4613      	mov	r3, r2
90004928:	011b      	lsls	r3, r3, #4
9000492a:	1a9b      	subs	r3, r3, r2
9000492c:	009b      	lsls	r3, r3, #2
9000492e:	440b      	add	r3, r1
90004930:	3348      	adds	r3, #72	@ 0x48
90004932:	2200      	movs	r2, #0
90004934:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
90004936:	78fa      	ldrb	r2, [r7, #3]
90004938:	6879      	ldr	r1, [r7, #4]
9000493a:	4613      	mov	r3, r2
9000493c:	011b      	lsls	r3, r3, #4
9000493e:	1a9b      	subs	r3, r3, r2
90004940:	009b      	lsls	r3, r3, #2
90004942:	440b      	add	r3, r1
90004944:	331b      	adds	r3, #27
90004946:	2200      	movs	r2, #0
90004948:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
9000494a:	78fa      	ldrb	r2, [r7, #3]
9000494c:	6879      	ldr	r1, [r7, #4]
9000494e:	4613      	mov	r3, r2
90004950:	011b      	lsls	r3, r3, #4
90004952:	1a9b      	subs	r3, r3, r2
90004954:	009b      	lsls	r3, r3, #2
90004956:	440b      	add	r3, r1
90004958:	3344      	adds	r3, #68	@ 0x44
9000495a:	681b      	ldr	r3, [r3, #0]
9000495c:	2b02      	cmp	r3, #2
9000495e:	d809      	bhi.n	90004974 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004960:	78fa      	ldrb	r2, [r7, #3]
90004962:	6879      	ldr	r1, [r7, #4]
90004964:	4613      	mov	r3, r2
90004966:	011b      	lsls	r3, r3, #4
90004968:	1a9b      	subs	r3, r3, r2
9000496a:	009b      	lsls	r3, r3, #2
9000496c:	440b      	add	r3, r1
9000496e:	331c      	adds	r3, #28
90004970:	2201      	movs	r2, #1
90004972:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004974:	78fb      	ldrb	r3, [r7, #3]
90004976:	015a      	lsls	r2, r3, #5
90004978:	693b      	ldr	r3, [r7, #16]
9000497a:	4413      	add	r3, r2
9000497c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004980:	685b      	ldr	r3, [r3, #4]
90004982:	78fa      	ldrb	r2, [r7, #3]
90004984:	0151      	lsls	r1, r2, #5
90004986:	693a      	ldr	r2, [r7, #16]
90004988:	440a      	add	r2, r1
9000498a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000498e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004992:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004994:	78fa      	ldrb	r2, [r7, #3]
90004996:	6879      	ldr	r1, [r7, #4]
90004998:	4613      	mov	r3, r2
9000499a:	011b      	lsls	r3, r3, #4
9000499c:	1a9b      	subs	r3, r3, r2
9000499e:	009b      	lsls	r3, r3, #2
900049a0:	440b      	add	r3, r1
900049a2:	334c      	adds	r3, #76	@ 0x4c
900049a4:	2204      	movs	r2, #4
900049a6:	701a      	strb	r2, [r3, #0]
900049a8:	e014      	b.n	900049d4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
900049aa:	78fa      	ldrb	r2, [r7, #3]
900049ac:	6879      	ldr	r1, [r7, #4]
900049ae:	4613      	mov	r3, r2
900049b0:	011b      	lsls	r3, r3, #4
900049b2:	1a9b      	subs	r3, r3, r2
900049b4:	009b      	lsls	r3, r3, #2
900049b6:	440b      	add	r3, r1
900049b8:	334c      	adds	r3, #76	@ 0x4c
900049ba:	2202      	movs	r2, #2
900049bc:	701a      	strb	r2, [r3, #0]
900049be:	e009      	b.n	900049d4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
900049c0:	78fa      	ldrb	r2, [r7, #3]
900049c2:	6879      	ldr	r1, [r7, #4]
900049c4:	4613      	mov	r3, r2
900049c6:	011b      	lsls	r3, r3, #4
900049c8:	1a9b      	subs	r3, r3, r2
900049ca:	009b      	lsls	r3, r3, #2
900049cc:	440b      	add	r3, r1
900049ce:	334c      	adds	r3, #76	@ 0x4c
900049d0:	2202      	movs	r2, #2
900049d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900049d4:	78fa      	ldrb	r2, [r7, #3]
900049d6:	6879      	ldr	r1, [r7, #4]
900049d8:	4613      	mov	r3, r2
900049da:	011b      	lsls	r3, r3, #4
900049dc:	1a9b      	subs	r3, r3, r2
900049de:	009b      	lsls	r3, r3, #2
900049e0:	440b      	add	r3, r1
900049e2:	3326      	adds	r3, #38	@ 0x26
900049e4:	781b      	ldrb	r3, [r3, #0]
900049e6:	2b00      	cmp	r3, #0
900049e8:	d00b      	beq.n	90004a02 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900049ea:	78fa      	ldrb	r2, [r7, #3]
900049ec:	6879      	ldr	r1, [r7, #4]
900049ee:	4613      	mov	r3, r2
900049f0:	011b      	lsls	r3, r3, #4
900049f2:	1a9b      	subs	r3, r3, r2
900049f4:	009b      	lsls	r3, r3, #2
900049f6:	440b      	add	r3, r1
900049f8:	3326      	adds	r3, #38	@ 0x26
900049fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900049fc:	2b02      	cmp	r3, #2
900049fe:	f040 8136 	bne.w	90004c6e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004a02:	78fb      	ldrb	r3, [r7, #3]
90004a04:	015a      	lsls	r2, r3, #5
90004a06:	693b      	ldr	r3, [r7, #16]
90004a08:	4413      	add	r3, r2
90004a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a0e:	681b      	ldr	r3, [r3, #0]
90004a10:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004a12:	68fb      	ldr	r3, [r7, #12]
90004a14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004a18:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004a1a:	68fb      	ldr	r3, [r7, #12]
90004a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004a20:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004a22:	78fb      	ldrb	r3, [r7, #3]
90004a24:	015a      	lsls	r2, r3, #5
90004a26:	693b      	ldr	r3, [r7, #16]
90004a28:	4413      	add	r3, r2
90004a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a2e:	461a      	mov	r2, r3
90004a30:	68fb      	ldr	r3, [r7, #12]
90004a32:	6013      	str	r3, [r2, #0]
90004a34:	e11b      	b.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004a36:	78fa      	ldrb	r2, [r7, #3]
90004a38:	6879      	ldr	r1, [r7, #4]
90004a3a:	4613      	mov	r3, r2
90004a3c:	011b      	lsls	r3, r3, #4
90004a3e:	1a9b      	subs	r3, r3, r2
90004a40:	009b      	lsls	r3, r3, #2
90004a42:	440b      	add	r3, r1
90004a44:	334d      	adds	r3, #77	@ 0x4d
90004a46:	781b      	ldrb	r3, [r3, #0]
90004a48:	2b03      	cmp	r3, #3
90004a4a:	f040 8081 	bne.w	90004b50 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a4e:	78fa      	ldrb	r2, [r7, #3]
90004a50:	6879      	ldr	r1, [r7, #4]
90004a52:	4613      	mov	r3, r2
90004a54:	011b      	lsls	r3, r3, #4
90004a56:	1a9b      	subs	r3, r3, r2
90004a58:	009b      	lsls	r3, r3, #2
90004a5a:	440b      	add	r3, r1
90004a5c:	334d      	adds	r3, #77	@ 0x4d
90004a5e:	2202      	movs	r2, #2
90004a60:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004a62:	78fa      	ldrb	r2, [r7, #3]
90004a64:	6879      	ldr	r1, [r7, #4]
90004a66:	4613      	mov	r3, r2
90004a68:	011b      	lsls	r3, r3, #4
90004a6a:	1a9b      	subs	r3, r3, r2
90004a6c:	009b      	lsls	r3, r3, #2
90004a6e:	440b      	add	r3, r1
90004a70:	331b      	adds	r3, #27
90004a72:	781b      	ldrb	r3, [r3, #0]
90004a74:	2b01      	cmp	r3, #1
90004a76:	f040 80fa 	bne.w	90004c6e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a7a:	78fa      	ldrb	r2, [r7, #3]
90004a7c:	6879      	ldr	r1, [r7, #4]
90004a7e:	4613      	mov	r3, r2
90004a80:	011b      	lsls	r3, r3, #4
90004a82:	1a9b      	subs	r3, r3, r2
90004a84:	009b      	lsls	r3, r3, #2
90004a86:	440b      	add	r3, r1
90004a88:	334c      	adds	r3, #76	@ 0x4c
90004a8a:	2202      	movs	r2, #2
90004a8c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004a8e:	78fb      	ldrb	r3, [r7, #3]
90004a90:	015a      	lsls	r2, r3, #5
90004a92:	693b      	ldr	r3, [r7, #16]
90004a94:	4413      	add	r3, r2
90004a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a9a:	685b      	ldr	r3, [r3, #4]
90004a9c:	78fa      	ldrb	r2, [r7, #3]
90004a9e:	0151      	lsls	r1, r2, #5
90004aa0:	693a      	ldr	r2, [r7, #16]
90004aa2:	440a      	add	r2, r1
90004aa4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004aac:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004aae:	78fb      	ldrb	r3, [r7, #3]
90004ab0:	015a      	lsls	r2, r3, #5
90004ab2:	693b      	ldr	r3, [r7, #16]
90004ab4:	4413      	add	r3, r2
90004ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004aba:	68db      	ldr	r3, [r3, #12]
90004abc:	78fa      	ldrb	r2, [r7, #3]
90004abe:	0151      	lsls	r1, r2, #5
90004ac0:	693a      	ldr	r2, [r7, #16]
90004ac2:	440a      	add	r2, r1
90004ac4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004acc:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004ace:	78fb      	ldrb	r3, [r7, #3]
90004ad0:	015a      	lsls	r2, r3, #5
90004ad2:	693b      	ldr	r3, [r7, #16]
90004ad4:	4413      	add	r3, r2
90004ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ada:	68db      	ldr	r3, [r3, #12]
90004adc:	78fa      	ldrb	r2, [r7, #3]
90004ade:	0151      	lsls	r1, r2, #5
90004ae0:	693a      	ldr	r2, [r7, #16]
90004ae2:	440a      	add	r2, r1
90004ae4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ae8:	f023 0320 	bic.w	r3, r3, #32
90004aec:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004aee:	78fa      	ldrb	r2, [r7, #3]
90004af0:	6879      	ldr	r1, [r7, #4]
90004af2:	4613      	mov	r3, r2
90004af4:	011b      	lsls	r3, r3, #4
90004af6:	1a9b      	subs	r3, r3, r2
90004af8:	009b      	lsls	r3, r3, #2
90004afa:	440b      	add	r3, r1
90004afc:	3326      	adds	r3, #38	@ 0x26
90004afe:	781b      	ldrb	r3, [r3, #0]
90004b00:	2b00      	cmp	r3, #0
90004b02:	d00b      	beq.n	90004b1c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004b04:	78fa      	ldrb	r2, [r7, #3]
90004b06:	6879      	ldr	r1, [r7, #4]
90004b08:	4613      	mov	r3, r2
90004b0a:	011b      	lsls	r3, r3, #4
90004b0c:	1a9b      	subs	r3, r3, r2
90004b0e:	009b      	lsls	r3, r3, #2
90004b10:	440b      	add	r3, r1
90004b12:	3326      	adds	r3, #38	@ 0x26
90004b14:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b16:	2b02      	cmp	r3, #2
90004b18:	f040 80a9 	bne.w	90004c6e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004b1c:	78fb      	ldrb	r3, [r7, #3]
90004b1e:	015a      	lsls	r2, r3, #5
90004b20:	693b      	ldr	r3, [r7, #16]
90004b22:	4413      	add	r3, r2
90004b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b28:	681b      	ldr	r3, [r3, #0]
90004b2a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b2c:	68fb      	ldr	r3, [r7, #12]
90004b2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004b32:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b34:	68fb      	ldr	r3, [r7, #12]
90004b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004b3a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004b3c:	78fb      	ldrb	r3, [r7, #3]
90004b3e:	015a      	lsls	r2, r3, #5
90004b40:	693b      	ldr	r3, [r7, #16]
90004b42:	4413      	add	r3, r2
90004b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b48:	461a      	mov	r2, r3
90004b4a:	68fb      	ldr	r3, [r7, #12]
90004b4c:	6013      	str	r3, [r2, #0]
90004b4e:	e08e      	b.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004b50:	78fa      	ldrb	r2, [r7, #3]
90004b52:	6879      	ldr	r1, [r7, #4]
90004b54:	4613      	mov	r3, r2
90004b56:	011b      	lsls	r3, r3, #4
90004b58:	1a9b      	subs	r3, r3, r2
90004b5a:	009b      	lsls	r3, r3, #2
90004b5c:	440b      	add	r3, r1
90004b5e:	334d      	adds	r3, #77	@ 0x4d
90004b60:	781b      	ldrb	r3, [r3, #0]
90004b62:	2b04      	cmp	r3, #4
90004b64:	d143      	bne.n	90004bee <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b66:	78fa      	ldrb	r2, [r7, #3]
90004b68:	6879      	ldr	r1, [r7, #4]
90004b6a:	4613      	mov	r3, r2
90004b6c:	011b      	lsls	r3, r3, #4
90004b6e:	1a9b      	subs	r3, r3, r2
90004b70:	009b      	lsls	r3, r3, #2
90004b72:	440b      	add	r3, r1
90004b74:	334d      	adds	r3, #77	@ 0x4d
90004b76:	2202      	movs	r2, #2
90004b78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b7a:	78fa      	ldrb	r2, [r7, #3]
90004b7c:	6879      	ldr	r1, [r7, #4]
90004b7e:	4613      	mov	r3, r2
90004b80:	011b      	lsls	r3, r3, #4
90004b82:	1a9b      	subs	r3, r3, r2
90004b84:	009b      	lsls	r3, r3, #2
90004b86:	440b      	add	r3, r1
90004b88:	334c      	adds	r3, #76	@ 0x4c
90004b8a:	2202      	movs	r2, #2
90004b8c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b8e:	78fa      	ldrb	r2, [r7, #3]
90004b90:	6879      	ldr	r1, [r7, #4]
90004b92:	4613      	mov	r3, r2
90004b94:	011b      	lsls	r3, r3, #4
90004b96:	1a9b      	subs	r3, r3, r2
90004b98:	009b      	lsls	r3, r3, #2
90004b9a:	440b      	add	r3, r1
90004b9c:	3326      	adds	r3, #38	@ 0x26
90004b9e:	781b      	ldrb	r3, [r3, #0]
90004ba0:	2b00      	cmp	r3, #0
90004ba2:	d00a      	beq.n	90004bba <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ba4:	78fa      	ldrb	r2, [r7, #3]
90004ba6:	6879      	ldr	r1, [r7, #4]
90004ba8:	4613      	mov	r3, r2
90004baa:	011b      	lsls	r3, r3, #4
90004bac:	1a9b      	subs	r3, r3, r2
90004bae:	009b      	lsls	r3, r3, #2
90004bb0:	440b      	add	r3, r1
90004bb2:	3326      	adds	r3, #38	@ 0x26
90004bb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bb6:	2b02      	cmp	r3, #2
90004bb8:	d159      	bne.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004bba:	78fb      	ldrb	r3, [r7, #3]
90004bbc:	015a      	lsls	r2, r3, #5
90004bbe:	693b      	ldr	r3, [r7, #16]
90004bc0:	4413      	add	r3, r2
90004bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004bc6:	681b      	ldr	r3, [r3, #0]
90004bc8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004bca:	68fb      	ldr	r3, [r7, #12]
90004bcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004bd0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004bd2:	68fb      	ldr	r3, [r7, #12]
90004bd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004bd8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004bda:	78fb      	ldrb	r3, [r7, #3]
90004bdc:	015a      	lsls	r2, r3, #5
90004bde:	693b      	ldr	r3, [r7, #16]
90004be0:	4413      	add	r3, r2
90004be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004be6:	461a      	mov	r2, r3
90004be8:	68fb      	ldr	r3, [r7, #12]
90004bea:	6013      	str	r3, [r2, #0]
90004bec:	e03f      	b.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004bee:	78fa      	ldrb	r2, [r7, #3]
90004bf0:	6879      	ldr	r1, [r7, #4]
90004bf2:	4613      	mov	r3, r2
90004bf4:	011b      	lsls	r3, r3, #4
90004bf6:	1a9b      	subs	r3, r3, r2
90004bf8:	009b      	lsls	r3, r3, #2
90004bfa:	440b      	add	r3, r1
90004bfc:	334d      	adds	r3, #77	@ 0x4d
90004bfe:	781b      	ldrb	r3, [r3, #0]
90004c00:	2b08      	cmp	r3, #8
90004c02:	d126      	bne.n	90004c52 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004c04:	78fa      	ldrb	r2, [r7, #3]
90004c06:	6879      	ldr	r1, [r7, #4]
90004c08:	4613      	mov	r3, r2
90004c0a:	011b      	lsls	r3, r3, #4
90004c0c:	1a9b      	subs	r3, r3, r2
90004c0e:	009b      	lsls	r3, r3, #2
90004c10:	440b      	add	r3, r1
90004c12:	334d      	adds	r3, #77	@ 0x4d
90004c14:	2202      	movs	r2, #2
90004c16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004c18:	78fa      	ldrb	r2, [r7, #3]
90004c1a:	6879      	ldr	r1, [r7, #4]
90004c1c:	4613      	mov	r3, r2
90004c1e:	011b      	lsls	r3, r3, #4
90004c20:	1a9b      	subs	r3, r3, r2
90004c22:	009b      	lsls	r3, r3, #2
90004c24:	440b      	add	r3, r1
90004c26:	3344      	adds	r3, #68	@ 0x44
90004c28:	681b      	ldr	r3, [r3, #0]
90004c2a:	1c59      	adds	r1, r3, #1
90004c2c:	6878      	ldr	r0, [r7, #4]
90004c2e:	4613      	mov	r3, r2
90004c30:	011b      	lsls	r3, r3, #4
90004c32:	1a9b      	subs	r3, r3, r2
90004c34:	009b      	lsls	r3, r3, #2
90004c36:	4403      	add	r3, r0
90004c38:	3344      	adds	r3, #68	@ 0x44
90004c3a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004c3c:	78fa      	ldrb	r2, [r7, #3]
90004c3e:	6879      	ldr	r1, [r7, #4]
90004c40:	4613      	mov	r3, r2
90004c42:	011b      	lsls	r3, r3, #4
90004c44:	1a9b      	subs	r3, r3, r2
90004c46:	009b      	lsls	r3, r3, #2
90004c48:	440b      	add	r3, r1
90004c4a:	334c      	adds	r3, #76	@ 0x4c
90004c4c:	2204      	movs	r2, #4
90004c4e:	701a      	strb	r2, [r3, #0]
90004c50:	e00d      	b.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004c52:	78fa      	ldrb	r2, [r7, #3]
90004c54:	6879      	ldr	r1, [r7, #4]
90004c56:	4613      	mov	r3, r2
90004c58:	011b      	lsls	r3, r3, #4
90004c5a:	1a9b      	subs	r3, r3, r2
90004c5c:	009b      	lsls	r3, r3, #2
90004c5e:	440b      	add	r3, r1
90004c60:	334d      	adds	r3, #77	@ 0x4d
90004c62:	781b      	ldrb	r3, [r3, #0]
90004c64:	2b02      	cmp	r3, #2
90004c66:	f000 8100 	beq.w	90004e6a <HCD_HC_IN_IRQHandler+0xcca>
90004c6a:	e000      	b.n	90004c6e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004c6c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004c6e:	78fa      	ldrb	r2, [r7, #3]
90004c70:	6879      	ldr	r1, [r7, #4]
90004c72:	4613      	mov	r3, r2
90004c74:	011b      	lsls	r3, r3, #4
90004c76:	1a9b      	subs	r3, r3, r2
90004c78:	009b      	lsls	r3, r3, #2
90004c7a:	440b      	add	r3, r1
90004c7c:	334c      	adds	r3, #76	@ 0x4c
90004c7e:	781a      	ldrb	r2, [r3, #0]
90004c80:	78fb      	ldrb	r3, [r7, #3]
90004c82:	4619      	mov	r1, r3
90004c84:	6878      	ldr	r0, [r7, #4]
90004c86:	f7fc fa75 	bl	90001174 <HAL_HCD_HC_NotifyURBChange_Callback>
90004c8a:	e0ef      	b.n	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004c8c:	687b      	ldr	r3, [r7, #4]
90004c8e:	681b      	ldr	r3, [r3, #0]
90004c90:	78fa      	ldrb	r2, [r7, #3]
90004c92:	4611      	mov	r1, r2
90004c94:	4618      	mov	r0, r3
90004c96:	f006 fae8 	bl	9000b26a <USB_ReadChInterrupts>
90004c9a:	4603      	mov	r3, r0
90004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004ca0:	2b40      	cmp	r3, #64	@ 0x40
90004ca2:	d12f      	bne.n	90004d04 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004ca4:	78fb      	ldrb	r3, [r7, #3]
90004ca6:	015a      	lsls	r2, r3, #5
90004ca8:	693b      	ldr	r3, [r7, #16]
90004caa:	4413      	add	r3, r2
90004cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cb0:	461a      	mov	r2, r3
90004cb2:	2340      	movs	r3, #64	@ 0x40
90004cb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004cb6:	78fa      	ldrb	r2, [r7, #3]
90004cb8:	6879      	ldr	r1, [r7, #4]
90004cba:	4613      	mov	r3, r2
90004cbc:	011b      	lsls	r3, r3, #4
90004cbe:	1a9b      	subs	r3, r3, r2
90004cc0:	009b      	lsls	r3, r3, #2
90004cc2:	440b      	add	r3, r1
90004cc4:	334d      	adds	r3, #77	@ 0x4d
90004cc6:	2205      	movs	r2, #5
90004cc8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004cca:	78fa      	ldrb	r2, [r7, #3]
90004ccc:	6879      	ldr	r1, [r7, #4]
90004cce:	4613      	mov	r3, r2
90004cd0:	011b      	lsls	r3, r3, #4
90004cd2:	1a9b      	subs	r3, r3, r2
90004cd4:	009b      	lsls	r3, r3, #2
90004cd6:	440b      	add	r3, r1
90004cd8:	331a      	adds	r3, #26
90004cda:	781b      	ldrb	r3, [r3, #0]
90004cdc:	2b00      	cmp	r3, #0
90004cde:	d109      	bne.n	90004cf4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004ce0:	78fa      	ldrb	r2, [r7, #3]
90004ce2:	6879      	ldr	r1, [r7, #4]
90004ce4:	4613      	mov	r3, r2
90004ce6:	011b      	lsls	r3, r3, #4
90004ce8:	1a9b      	subs	r3, r3, r2
90004cea:	009b      	lsls	r3, r3, #2
90004cec:	440b      	add	r3, r1
90004cee:	3344      	adds	r3, #68	@ 0x44
90004cf0:	2200      	movs	r2, #0
90004cf2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004cf4:	687b      	ldr	r3, [r7, #4]
90004cf6:	681b      	ldr	r3, [r3, #0]
90004cf8:	78fa      	ldrb	r2, [r7, #3]
90004cfa:	4611      	mov	r1, r2
90004cfc:	4618      	mov	r0, r3
90004cfe:	f006 fb31 	bl	9000b364 <USB_HC_Halt>
90004d02:	e0b3      	b.n	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004d04:	687b      	ldr	r3, [r7, #4]
90004d06:	681b      	ldr	r3, [r3, #0]
90004d08:	78fa      	ldrb	r2, [r7, #3]
90004d0a:	4611      	mov	r1, r2
90004d0c:	4618      	mov	r0, r3
90004d0e:	f006 faac 	bl	9000b26a <USB_ReadChInterrupts>
90004d12:	4603      	mov	r3, r0
90004d14:	f003 0310 	and.w	r3, r3, #16
90004d18:	2b10      	cmp	r3, #16
90004d1a:	f040 80a7 	bne.w	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004d1e:	78fa      	ldrb	r2, [r7, #3]
90004d20:	6879      	ldr	r1, [r7, #4]
90004d22:	4613      	mov	r3, r2
90004d24:	011b      	lsls	r3, r3, #4
90004d26:	1a9b      	subs	r3, r3, r2
90004d28:	009b      	lsls	r3, r3, #2
90004d2a:	440b      	add	r3, r1
90004d2c:	3326      	adds	r3, #38	@ 0x26
90004d2e:	781b      	ldrb	r3, [r3, #0]
90004d30:	2b03      	cmp	r3, #3
90004d32:	d11b      	bne.n	90004d6c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d34:	78fa      	ldrb	r2, [r7, #3]
90004d36:	6879      	ldr	r1, [r7, #4]
90004d38:	4613      	mov	r3, r2
90004d3a:	011b      	lsls	r3, r3, #4
90004d3c:	1a9b      	subs	r3, r3, r2
90004d3e:	009b      	lsls	r3, r3, #2
90004d40:	440b      	add	r3, r1
90004d42:	3344      	adds	r3, #68	@ 0x44
90004d44:	2200      	movs	r2, #0
90004d46:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004d48:	78fa      	ldrb	r2, [r7, #3]
90004d4a:	6879      	ldr	r1, [r7, #4]
90004d4c:	4613      	mov	r3, r2
90004d4e:	011b      	lsls	r3, r3, #4
90004d50:	1a9b      	subs	r3, r3, r2
90004d52:	009b      	lsls	r3, r3, #2
90004d54:	440b      	add	r3, r1
90004d56:	334d      	adds	r3, #77	@ 0x4d
90004d58:	2204      	movs	r2, #4
90004d5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d5c:	687b      	ldr	r3, [r7, #4]
90004d5e:	681b      	ldr	r3, [r3, #0]
90004d60:	78fa      	ldrb	r2, [r7, #3]
90004d62:	4611      	mov	r1, r2
90004d64:	4618      	mov	r0, r3
90004d66:	f006 fafd 	bl	9000b364 <USB_HC_Halt>
90004d6a:	e03f      	b.n	90004dec <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004d6c:	78fa      	ldrb	r2, [r7, #3]
90004d6e:	6879      	ldr	r1, [r7, #4]
90004d70:	4613      	mov	r3, r2
90004d72:	011b      	lsls	r3, r3, #4
90004d74:	1a9b      	subs	r3, r3, r2
90004d76:	009b      	lsls	r3, r3, #2
90004d78:	440b      	add	r3, r1
90004d7a:	3326      	adds	r3, #38	@ 0x26
90004d7c:	781b      	ldrb	r3, [r3, #0]
90004d7e:	2b00      	cmp	r3, #0
90004d80:	d00a      	beq.n	90004d98 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004d82:	78fa      	ldrb	r2, [r7, #3]
90004d84:	6879      	ldr	r1, [r7, #4]
90004d86:	4613      	mov	r3, r2
90004d88:	011b      	lsls	r3, r3, #4
90004d8a:	1a9b      	subs	r3, r3, r2
90004d8c:	009b      	lsls	r3, r3, #2
90004d8e:	440b      	add	r3, r1
90004d90:	3326      	adds	r3, #38	@ 0x26
90004d92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004d94:	2b02      	cmp	r3, #2
90004d96:	d129      	bne.n	90004dec <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d98:	78fa      	ldrb	r2, [r7, #3]
90004d9a:	6879      	ldr	r1, [r7, #4]
90004d9c:	4613      	mov	r3, r2
90004d9e:	011b      	lsls	r3, r3, #4
90004da0:	1a9b      	subs	r3, r3, r2
90004da2:	009b      	lsls	r3, r3, #2
90004da4:	440b      	add	r3, r1
90004da6:	3344      	adds	r3, #68	@ 0x44
90004da8:	2200      	movs	r2, #0
90004daa:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004dac:	687b      	ldr	r3, [r7, #4]
90004dae:	799b      	ldrb	r3, [r3, #6]
90004db0:	2b00      	cmp	r3, #0
90004db2:	d00a      	beq.n	90004dca <HCD_HC_IN_IRQHandler+0xc2a>
90004db4:	78fa      	ldrb	r2, [r7, #3]
90004db6:	6879      	ldr	r1, [r7, #4]
90004db8:	4613      	mov	r3, r2
90004dba:	011b      	lsls	r3, r3, #4
90004dbc:	1a9b      	subs	r3, r3, r2
90004dbe:	009b      	lsls	r3, r3, #2
90004dc0:	440b      	add	r3, r1
90004dc2:	331b      	adds	r3, #27
90004dc4:	781b      	ldrb	r3, [r3, #0]
90004dc6:	2b01      	cmp	r3, #1
90004dc8:	d110      	bne.n	90004dec <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004dca:	78fa      	ldrb	r2, [r7, #3]
90004dcc:	6879      	ldr	r1, [r7, #4]
90004dce:	4613      	mov	r3, r2
90004dd0:	011b      	lsls	r3, r3, #4
90004dd2:	1a9b      	subs	r3, r3, r2
90004dd4:	009b      	lsls	r3, r3, #2
90004dd6:	440b      	add	r3, r1
90004dd8:	334d      	adds	r3, #77	@ 0x4d
90004dda:	2204      	movs	r2, #4
90004ddc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004dde:	687b      	ldr	r3, [r7, #4]
90004de0:	681b      	ldr	r3, [r3, #0]
90004de2:	78fa      	ldrb	r2, [r7, #3]
90004de4:	4611      	mov	r1, r2
90004de6:	4618      	mov	r0, r3
90004de8:	f006 fabc 	bl	9000b364 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004dec:	78fa      	ldrb	r2, [r7, #3]
90004dee:	6879      	ldr	r1, [r7, #4]
90004df0:	4613      	mov	r3, r2
90004df2:	011b      	lsls	r3, r3, #4
90004df4:	1a9b      	subs	r3, r3, r2
90004df6:	009b      	lsls	r3, r3, #2
90004df8:	440b      	add	r3, r1
90004dfa:	331b      	adds	r3, #27
90004dfc:	781b      	ldrb	r3, [r3, #0]
90004dfe:	2b01      	cmp	r3, #1
90004e00:	d129      	bne.n	90004e56 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004e02:	78fa      	ldrb	r2, [r7, #3]
90004e04:	6879      	ldr	r1, [r7, #4]
90004e06:	4613      	mov	r3, r2
90004e08:	011b      	lsls	r3, r3, #4
90004e0a:	1a9b      	subs	r3, r3, r2
90004e0c:	009b      	lsls	r3, r3, #2
90004e0e:	440b      	add	r3, r1
90004e10:	331b      	adds	r3, #27
90004e12:	2200      	movs	r2, #0
90004e14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004e16:	78fb      	ldrb	r3, [r7, #3]
90004e18:	015a      	lsls	r2, r3, #5
90004e1a:	693b      	ldr	r3, [r7, #16]
90004e1c:	4413      	add	r3, r2
90004e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e22:	685b      	ldr	r3, [r3, #4]
90004e24:	78fa      	ldrb	r2, [r7, #3]
90004e26:	0151      	lsls	r1, r2, #5
90004e28:	693a      	ldr	r2, [r7, #16]
90004e2a:	440a      	add	r2, r1
90004e2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004e34:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004e36:	78fb      	ldrb	r3, [r7, #3]
90004e38:	015a      	lsls	r2, r3, #5
90004e3a:	693b      	ldr	r3, [r7, #16]
90004e3c:	4413      	add	r3, r2
90004e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e42:	68db      	ldr	r3, [r3, #12]
90004e44:	78fa      	ldrb	r2, [r7, #3]
90004e46:	0151      	lsls	r1, r2, #5
90004e48:	693a      	ldr	r2, [r7, #16]
90004e4a:	440a      	add	r2, r1
90004e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004e50:	f043 0320 	orr.w	r3, r3, #32
90004e54:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004e56:	78fb      	ldrb	r3, [r7, #3]
90004e58:	015a      	lsls	r2, r3, #5
90004e5a:	693b      	ldr	r3, [r7, #16]
90004e5c:	4413      	add	r3, r2
90004e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e62:	461a      	mov	r2, r3
90004e64:	2310      	movs	r3, #16
90004e66:	6093      	str	r3, [r2, #8]
90004e68:	e000      	b.n	90004e6c <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004e6a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004e6c:	3718      	adds	r7, #24
90004e6e:	46bd      	mov	sp, r7
90004e70:	bd80      	pop	{r7, pc}

90004e72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004e72:	b580      	push	{r7, lr}
90004e74:	b086      	sub	sp, #24
90004e76:	af00      	add	r7, sp, #0
90004e78:	6078      	str	r0, [r7, #4]
90004e7a:	460b      	mov	r3, r1
90004e7c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004e7e:	687b      	ldr	r3, [r7, #4]
90004e80:	681b      	ldr	r3, [r3, #0]
90004e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004e84:	697b      	ldr	r3, [r7, #20]
90004e86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004e88:	687b      	ldr	r3, [r7, #4]
90004e8a:	681b      	ldr	r3, [r3, #0]
90004e8c:	78fa      	ldrb	r2, [r7, #3]
90004e8e:	4611      	mov	r1, r2
90004e90:	4618      	mov	r0, r3
90004e92:	f006 f9ea 	bl	9000b26a <USB_ReadChInterrupts>
90004e96:	4603      	mov	r3, r0
90004e98:	f003 0304 	and.w	r3, r3, #4
90004e9c:	2b04      	cmp	r3, #4
90004e9e:	d11b      	bne.n	90004ed8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004ea0:	78fb      	ldrb	r3, [r7, #3]
90004ea2:	015a      	lsls	r2, r3, #5
90004ea4:	693b      	ldr	r3, [r7, #16]
90004ea6:	4413      	add	r3, r2
90004ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004eac:	461a      	mov	r2, r3
90004eae:	2304      	movs	r3, #4
90004eb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004eb2:	78fa      	ldrb	r2, [r7, #3]
90004eb4:	6879      	ldr	r1, [r7, #4]
90004eb6:	4613      	mov	r3, r2
90004eb8:	011b      	lsls	r3, r3, #4
90004eba:	1a9b      	subs	r3, r3, r2
90004ebc:	009b      	lsls	r3, r3, #2
90004ebe:	440b      	add	r3, r1
90004ec0:	334d      	adds	r3, #77	@ 0x4d
90004ec2:	2207      	movs	r2, #7
90004ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ec6:	687b      	ldr	r3, [r7, #4]
90004ec8:	681b      	ldr	r3, [r3, #0]
90004eca:	78fa      	ldrb	r2, [r7, #3]
90004ecc:	4611      	mov	r1, r2
90004ece:	4618      	mov	r0, r3
90004ed0:	f006 fa48 	bl	9000b364 <USB_HC_Halt>
90004ed4:	f000 bc89 	b.w	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004ed8:	687b      	ldr	r3, [r7, #4]
90004eda:	681b      	ldr	r3, [r3, #0]
90004edc:	78fa      	ldrb	r2, [r7, #3]
90004ede:	4611      	mov	r1, r2
90004ee0:	4618      	mov	r0, r3
90004ee2:	f006 f9c2 	bl	9000b26a <USB_ReadChInterrupts>
90004ee6:	4603      	mov	r3, r0
90004ee8:	f003 0320 	and.w	r3, r3, #32
90004eec:	2b20      	cmp	r3, #32
90004eee:	f040 8082 	bne.w	90004ff6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004ef2:	78fb      	ldrb	r3, [r7, #3]
90004ef4:	015a      	lsls	r2, r3, #5
90004ef6:	693b      	ldr	r3, [r7, #16]
90004ef8:	4413      	add	r3, r2
90004efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004efe:	461a      	mov	r2, r3
90004f00:	2320      	movs	r3, #32
90004f02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004f04:	78fa      	ldrb	r2, [r7, #3]
90004f06:	6879      	ldr	r1, [r7, #4]
90004f08:	4613      	mov	r3, r2
90004f0a:	011b      	lsls	r3, r3, #4
90004f0c:	1a9b      	subs	r3, r3, r2
90004f0e:	009b      	lsls	r3, r3, #2
90004f10:	440b      	add	r3, r1
90004f12:	3319      	adds	r3, #25
90004f14:	781b      	ldrb	r3, [r3, #0]
90004f16:	2b01      	cmp	r3, #1
90004f18:	d124      	bne.n	90004f64 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004f1a:	78fa      	ldrb	r2, [r7, #3]
90004f1c:	6879      	ldr	r1, [r7, #4]
90004f1e:	4613      	mov	r3, r2
90004f20:	011b      	lsls	r3, r3, #4
90004f22:	1a9b      	subs	r3, r3, r2
90004f24:	009b      	lsls	r3, r3, #2
90004f26:	440b      	add	r3, r1
90004f28:	3319      	adds	r3, #25
90004f2a:	2200      	movs	r2, #0
90004f2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004f2e:	78fa      	ldrb	r2, [r7, #3]
90004f30:	6879      	ldr	r1, [r7, #4]
90004f32:	4613      	mov	r3, r2
90004f34:	011b      	lsls	r3, r3, #4
90004f36:	1a9b      	subs	r3, r3, r2
90004f38:	009b      	lsls	r3, r3, #2
90004f3a:	440b      	add	r3, r1
90004f3c:	334c      	adds	r3, #76	@ 0x4c
90004f3e:	2202      	movs	r2, #2
90004f40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004f42:	78fa      	ldrb	r2, [r7, #3]
90004f44:	6879      	ldr	r1, [r7, #4]
90004f46:	4613      	mov	r3, r2
90004f48:	011b      	lsls	r3, r3, #4
90004f4a:	1a9b      	subs	r3, r3, r2
90004f4c:	009b      	lsls	r3, r3, #2
90004f4e:	440b      	add	r3, r1
90004f50:	334d      	adds	r3, #77	@ 0x4d
90004f52:	2203      	movs	r2, #3
90004f54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f56:	687b      	ldr	r3, [r7, #4]
90004f58:	681b      	ldr	r3, [r3, #0]
90004f5a:	78fa      	ldrb	r2, [r7, #3]
90004f5c:	4611      	mov	r1, r2
90004f5e:	4618      	mov	r0, r3
90004f60:	f006 fa00 	bl	9000b364 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90004f64:	78fa      	ldrb	r2, [r7, #3]
90004f66:	6879      	ldr	r1, [r7, #4]
90004f68:	4613      	mov	r3, r2
90004f6a:	011b      	lsls	r3, r3, #4
90004f6c:	1a9b      	subs	r3, r3, r2
90004f6e:	009b      	lsls	r3, r3, #2
90004f70:	440b      	add	r3, r1
90004f72:	331a      	adds	r3, #26
90004f74:	781b      	ldrb	r3, [r3, #0]
90004f76:	2b01      	cmp	r3, #1
90004f78:	f040 8437 	bne.w	900057ea <HCD_HC_OUT_IRQHandler+0x978>
90004f7c:	78fa      	ldrb	r2, [r7, #3]
90004f7e:	6879      	ldr	r1, [r7, #4]
90004f80:	4613      	mov	r3, r2
90004f82:	011b      	lsls	r3, r3, #4
90004f84:	1a9b      	subs	r3, r3, r2
90004f86:	009b      	lsls	r3, r3, #2
90004f88:	440b      	add	r3, r1
90004f8a:	331b      	adds	r3, #27
90004f8c:	781b      	ldrb	r3, [r3, #0]
90004f8e:	2b00      	cmp	r3, #0
90004f90:	f040 842b 	bne.w	900057ea <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90004f94:	78fa      	ldrb	r2, [r7, #3]
90004f96:	6879      	ldr	r1, [r7, #4]
90004f98:	4613      	mov	r3, r2
90004f9a:	011b      	lsls	r3, r3, #4
90004f9c:	1a9b      	subs	r3, r3, r2
90004f9e:	009b      	lsls	r3, r3, #2
90004fa0:	440b      	add	r3, r1
90004fa2:	3326      	adds	r3, #38	@ 0x26
90004fa4:	781b      	ldrb	r3, [r3, #0]
90004fa6:	2b01      	cmp	r3, #1
90004fa8:	d009      	beq.n	90004fbe <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90004faa:	78fa      	ldrb	r2, [r7, #3]
90004fac:	6879      	ldr	r1, [r7, #4]
90004fae:	4613      	mov	r3, r2
90004fb0:	011b      	lsls	r3, r3, #4
90004fb2:	1a9b      	subs	r3, r3, r2
90004fb4:	009b      	lsls	r3, r3, #2
90004fb6:	440b      	add	r3, r1
90004fb8:	331b      	adds	r3, #27
90004fba:	2201      	movs	r2, #1
90004fbc:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90004fbe:	78fa      	ldrb	r2, [r7, #3]
90004fc0:	6879      	ldr	r1, [r7, #4]
90004fc2:	4613      	mov	r3, r2
90004fc4:	011b      	lsls	r3, r3, #4
90004fc6:	1a9b      	subs	r3, r3, r2
90004fc8:	009b      	lsls	r3, r3, #2
90004fca:	440b      	add	r3, r1
90004fcc:	334d      	adds	r3, #77	@ 0x4d
90004fce:	2203      	movs	r2, #3
90004fd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004fd2:	687b      	ldr	r3, [r7, #4]
90004fd4:	681b      	ldr	r3, [r3, #0]
90004fd6:	78fa      	ldrb	r2, [r7, #3]
90004fd8:	4611      	mov	r1, r2
90004fda:	4618      	mov	r0, r3
90004fdc:	f006 f9c2 	bl	9000b364 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90004fe0:	78fa      	ldrb	r2, [r7, #3]
90004fe2:	6879      	ldr	r1, [r7, #4]
90004fe4:	4613      	mov	r3, r2
90004fe6:	011b      	lsls	r3, r3, #4
90004fe8:	1a9b      	subs	r3, r3, r2
90004fea:	009b      	lsls	r3, r3, #2
90004fec:	440b      	add	r3, r1
90004fee:	3344      	adds	r3, #68	@ 0x44
90004ff0:	2200      	movs	r2, #0
90004ff2:	601a      	str	r2, [r3, #0]
90004ff4:	e3f9      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004ff6:	687b      	ldr	r3, [r7, #4]
90004ff8:	681b      	ldr	r3, [r3, #0]
90004ffa:	78fa      	ldrb	r2, [r7, #3]
90004ffc:	4611      	mov	r1, r2
90004ffe:	4618      	mov	r0, r3
90005000:	f006 f933 	bl	9000b26a <USB_ReadChInterrupts>
90005004:	4603      	mov	r3, r0
90005006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000500a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000500e:	d111      	bne.n	90005034 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90005010:	78fb      	ldrb	r3, [r7, #3]
90005012:	015a      	lsls	r2, r3, #5
90005014:	693b      	ldr	r3, [r7, #16]
90005016:	4413      	add	r3, r2
90005018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000501c:	461a      	mov	r2, r3
9000501e:	f44f 7300 	mov.w	r3, #512	@ 0x200
90005022:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005024:	687b      	ldr	r3, [r7, #4]
90005026:	681b      	ldr	r3, [r3, #0]
90005028:	78fa      	ldrb	r2, [r7, #3]
9000502a:	4611      	mov	r1, r2
9000502c:	4618      	mov	r0, r3
9000502e:	f006 f999 	bl	9000b364 <USB_HC_Halt>
90005032:	e3da      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90005034:	687b      	ldr	r3, [r7, #4]
90005036:	681b      	ldr	r3, [r3, #0]
90005038:	78fa      	ldrb	r2, [r7, #3]
9000503a:	4611      	mov	r1, r2
9000503c:	4618      	mov	r0, r3
9000503e:	f006 f914 	bl	9000b26a <USB_ReadChInterrupts>
90005042:	4603      	mov	r3, r0
90005044:	f003 0301 	and.w	r3, r3, #1
90005048:	2b01      	cmp	r3, #1
9000504a:	d168      	bne.n	9000511e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
9000504c:	78fa      	ldrb	r2, [r7, #3]
9000504e:	6879      	ldr	r1, [r7, #4]
90005050:	4613      	mov	r3, r2
90005052:	011b      	lsls	r3, r3, #4
90005054:	1a9b      	subs	r3, r3, r2
90005056:	009b      	lsls	r3, r3, #2
90005058:	440b      	add	r3, r1
9000505a:	3344      	adds	r3, #68	@ 0x44
9000505c:	2200      	movs	r2, #0
9000505e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005060:	687b      	ldr	r3, [r7, #4]
90005062:	681b      	ldr	r3, [r3, #0]
90005064:	78fa      	ldrb	r2, [r7, #3]
90005066:	4611      	mov	r1, r2
90005068:	4618      	mov	r0, r3
9000506a:	f006 f8fe 	bl	9000b26a <USB_ReadChInterrupts>
9000506e:	4603      	mov	r3, r0
90005070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005074:	2b40      	cmp	r3, #64	@ 0x40
90005076:	d112      	bne.n	9000509e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005078:	78fa      	ldrb	r2, [r7, #3]
9000507a:	6879      	ldr	r1, [r7, #4]
9000507c:	4613      	mov	r3, r2
9000507e:	011b      	lsls	r3, r3, #4
90005080:	1a9b      	subs	r3, r3, r2
90005082:	009b      	lsls	r3, r3, #2
90005084:	440b      	add	r3, r1
90005086:	3319      	adds	r3, #25
90005088:	2201      	movs	r2, #1
9000508a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
9000508c:	78fb      	ldrb	r3, [r7, #3]
9000508e:	015a      	lsls	r2, r3, #5
90005090:	693b      	ldr	r3, [r7, #16]
90005092:	4413      	add	r3, r2
90005094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005098:	461a      	mov	r2, r3
9000509a:	2340      	movs	r3, #64	@ 0x40
9000509c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
9000509e:	78fa      	ldrb	r2, [r7, #3]
900050a0:	6879      	ldr	r1, [r7, #4]
900050a2:	4613      	mov	r3, r2
900050a4:	011b      	lsls	r3, r3, #4
900050a6:	1a9b      	subs	r3, r3, r2
900050a8:	009b      	lsls	r3, r3, #2
900050aa:	440b      	add	r3, r1
900050ac:	331b      	adds	r3, #27
900050ae:	781b      	ldrb	r3, [r3, #0]
900050b0:	2b00      	cmp	r3, #0
900050b2:	d019      	beq.n	900050e8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900050b4:	78fa      	ldrb	r2, [r7, #3]
900050b6:	6879      	ldr	r1, [r7, #4]
900050b8:	4613      	mov	r3, r2
900050ba:	011b      	lsls	r3, r3, #4
900050bc:	1a9b      	subs	r3, r3, r2
900050be:	009b      	lsls	r3, r3, #2
900050c0:	440b      	add	r3, r1
900050c2:	331b      	adds	r3, #27
900050c4:	2200      	movs	r2, #0
900050c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900050c8:	78fb      	ldrb	r3, [r7, #3]
900050ca:	015a      	lsls	r2, r3, #5
900050cc:	693b      	ldr	r3, [r7, #16]
900050ce:	4413      	add	r3, r2
900050d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050d4:	685b      	ldr	r3, [r3, #4]
900050d6:	78fa      	ldrb	r2, [r7, #3]
900050d8:	0151      	lsls	r1, r2, #5
900050da:	693a      	ldr	r2, [r7, #16]
900050dc:	440a      	add	r2, r1
900050de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900050e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900050e6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900050e8:	78fb      	ldrb	r3, [r7, #3]
900050ea:	015a      	lsls	r2, r3, #5
900050ec:	693b      	ldr	r3, [r7, #16]
900050ee:	4413      	add	r3, r2
900050f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050f4:	461a      	mov	r2, r3
900050f6:	2301      	movs	r3, #1
900050f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
900050fa:	78fa      	ldrb	r2, [r7, #3]
900050fc:	6879      	ldr	r1, [r7, #4]
900050fe:	4613      	mov	r3, r2
90005100:	011b      	lsls	r3, r3, #4
90005102:	1a9b      	subs	r3, r3, r2
90005104:	009b      	lsls	r3, r3, #2
90005106:	440b      	add	r3, r1
90005108:	334d      	adds	r3, #77	@ 0x4d
9000510a:	2201      	movs	r2, #1
9000510c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000510e:	687b      	ldr	r3, [r7, #4]
90005110:	681b      	ldr	r3, [r3, #0]
90005112:	78fa      	ldrb	r2, [r7, #3]
90005114:	4611      	mov	r1, r2
90005116:	4618      	mov	r0, r3
90005118:	f006 f924 	bl	9000b364 <USB_HC_Halt>
9000511c:	e365      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
9000511e:	687b      	ldr	r3, [r7, #4]
90005120:	681b      	ldr	r3, [r3, #0]
90005122:	78fa      	ldrb	r2, [r7, #3]
90005124:	4611      	mov	r1, r2
90005126:	4618      	mov	r0, r3
90005128:	f006 f89f 	bl	9000b26a <USB_ReadChInterrupts>
9000512c:	4603      	mov	r3, r0
9000512e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005132:	2b40      	cmp	r3, #64	@ 0x40
90005134:	d139      	bne.n	900051aa <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90005136:	78fa      	ldrb	r2, [r7, #3]
90005138:	6879      	ldr	r1, [r7, #4]
9000513a:	4613      	mov	r3, r2
9000513c:	011b      	lsls	r3, r3, #4
9000513e:	1a9b      	subs	r3, r3, r2
90005140:	009b      	lsls	r3, r3, #2
90005142:	440b      	add	r3, r1
90005144:	334d      	adds	r3, #77	@ 0x4d
90005146:	2205      	movs	r2, #5
90005148:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
9000514a:	78fa      	ldrb	r2, [r7, #3]
9000514c:	6879      	ldr	r1, [r7, #4]
9000514e:	4613      	mov	r3, r2
90005150:	011b      	lsls	r3, r3, #4
90005152:	1a9b      	subs	r3, r3, r2
90005154:	009b      	lsls	r3, r3, #2
90005156:	440b      	add	r3, r1
90005158:	331a      	adds	r3, #26
9000515a:	781b      	ldrb	r3, [r3, #0]
9000515c:	2b00      	cmp	r3, #0
9000515e:	d109      	bne.n	90005174 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005160:	78fa      	ldrb	r2, [r7, #3]
90005162:	6879      	ldr	r1, [r7, #4]
90005164:	4613      	mov	r3, r2
90005166:	011b      	lsls	r3, r3, #4
90005168:	1a9b      	subs	r3, r3, r2
9000516a:	009b      	lsls	r3, r3, #2
9000516c:	440b      	add	r3, r1
9000516e:	3319      	adds	r3, #25
90005170:	2201      	movs	r2, #1
90005172:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005174:	78fa      	ldrb	r2, [r7, #3]
90005176:	6879      	ldr	r1, [r7, #4]
90005178:	4613      	mov	r3, r2
9000517a:	011b      	lsls	r3, r3, #4
9000517c:	1a9b      	subs	r3, r3, r2
9000517e:	009b      	lsls	r3, r3, #2
90005180:	440b      	add	r3, r1
90005182:	3344      	adds	r3, #68	@ 0x44
90005184:	2200      	movs	r2, #0
90005186:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005188:	687b      	ldr	r3, [r7, #4]
9000518a:	681b      	ldr	r3, [r3, #0]
9000518c:	78fa      	ldrb	r2, [r7, #3]
9000518e:	4611      	mov	r1, r2
90005190:	4618      	mov	r0, r3
90005192:	f006 f8e7 	bl	9000b364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005196:	78fb      	ldrb	r3, [r7, #3]
90005198:	015a      	lsls	r2, r3, #5
9000519a:	693b      	ldr	r3, [r7, #16]
9000519c:	4413      	add	r3, r2
9000519e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051a2:	461a      	mov	r2, r3
900051a4:	2340      	movs	r3, #64	@ 0x40
900051a6:	6093      	str	r3, [r2, #8]
900051a8:	e31f      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900051aa:	687b      	ldr	r3, [r7, #4]
900051ac:	681b      	ldr	r3, [r3, #0]
900051ae:	78fa      	ldrb	r2, [r7, #3]
900051b0:	4611      	mov	r1, r2
900051b2:	4618      	mov	r0, r3
900051b4:	f006 f859 	bl	9000b26a <USB_ReadChInterrupts>
900051b8:	4603      	mov	r3, r0
900051ba:	f003 0308 	and.w	r3, r3, #8
900051be:	2b08      	cmp	r3, #8
900051c0:	d11a      	bne.n	900051f8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900051c2:	78fb      	ldrb	r3, [r7, #3]
900051c4:	015a      	lsls	r2, r3, #5
900051c6:	693b      	ldr	r3, [r7, #16]
900051c8:	4413      	add	r3, r2
900051ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051ce:	461a      	mov	r2, r3
900051d0:	2308      	movs	r3, #8
900051d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900051d4:	78fa      	ldrb	r2, [r7, #3]
900051d6:	6879      	ldr	r1, [r7, #4]
900051d8:	4613      	mov	r3, r2
900051da:	011b      	lsls	r3, r3, #4
900051dc:	1a9b      	subs	r3, r3, r2
900051de:	009b      	lsls	r3, r3, #2
900051e0:	440b      	add	r3, r1
900051e2:	334d      	adds	r3, #77	@ 0x4d
900051e4:	2206      	movs	r2, #6
900051e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900051e8:	687b      	ldr	r3, [r7, #4]
900051ea:	681b      	ldr	r3, [r3, #0]
900051ec:	78fa      	ldrb	r2, [r7, #3]
900051ee:	4611      	mov	r1, r2
900051f0:	4618      	mov	r0, r3
900051f2:	f006 f8b7 	bl	9000b364 <USB_HC_Halt>
900051f6:	e2f8      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900051f8:	687b      	ldr	r3, [r7, #4]
900051fa:	681b      	ldr	r3, [r3, #0]
900051fc:	78fa      	ldrb	r2, [r7, #3]
900051fe:	4611      	mov	r1, r2
90005200:	4618      	mov	r0, r3
90005202:	f006 f832 	bl	9000b26a <USB_ReadChInterrupts>
90005206:	4603      	mov	r3, r0
90005208:	f003 0310 	and.w	r3, r3, #16
9000520c:	2b10      	cmp	r3, #16
9000520e:	d144      	bne.n	9000529a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005210:	78fa      	ldrb	r2, [r7, #3]
90005212:	6879      	ldr	r1, [r7, #4]
90005214:	4613      	mov	r3, r2
90005216:	011b      	lsls	r3, r3, #4
90005218:	1a9b      	subs	r3, r3, r2
9000521a:	009b      	lsls	r3, r3, #2
9000521c:	440b      	add	r3, r1
9000521e:	3344      	adds	r3, #68	@ 0x44
90005220:	2200      	movs	r2, #0
90005222:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90005224:	78fa      	ldrb	r2, [r7, #3]
90005226:	6879      	ldr	r1, [r7, #4]
90005228:	4613      	mov	r3, r2
9000522a:	011b      	lsls	r3, r3, #4
9000522c:	1a9b      	subs	r3, r3, r2
9000522e:	009b      	lsls	r3, r3, #2
90005230:	440b      	add	r3, r1
90005232:	334d      	adds	r3, #77	@ 0x4d
90005234:	2204      	movs	r2, #4
90005236:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90005238:	78fa      	ldrb	r2, [r7, #3]
9000523a:	6879      	ldr	r1, [r7, #4]
9000523c:	4613      	mov	r3, r2
9000523e:	011b      	lsls	r3, r3, #4
90005240:	1a9b      	subs	r3, r3, r2
90005242:	009b      	lsls	r3, r3, #2
90005244:	440b      	add	r3, r1
90005246:	3319      	adds	r3, #25
90005248:	781b      	ldrb	r3, [r3, #0]
9000524a:	2b00      	cmp	r3, #0
9000524c:	d114      	bne.n	90005278 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
9000524e:	78fa      	ldrb	r2, [r7, #3]
90005250:	6879      	ldr	r1, [r7, #4]
90005252:	4613      	mov	r3, r2
90005254:	011b      	lsls	r3, r3, #4
90005256:	1a9b      	subs	r3, r3, r2
90005258:	009b      	lsls	r3, r3, #2
9000525a:	440b      	add	r3, r1
9000525c:	3318      	adds	r3, #24
9000525e:	781b      	ldrb	r3, [r3, #0]
90005260:	2b00      	cmp	r3, #0
90005262:	d109      	bne.n	90005278 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90005264:	78fa      	ldrb	r2, [r7, #3]
90005266:	6879      	ldr	r1, [r7, #4]
90005268:	4613      	mov	r3, r2
9000526a:	011b      	lsls	r3, r3, #4
9000526c:	1a9b      	subs	r3, r3, r2
9000526e:	009b      	lsls	r3, r3, #2
90005270:	440b      	add	r3, r1
90005272:	3319      	adds	r3, #25
90005274:	2201      	movs	r2, #1
90005276:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005278:	687b      	ldr	r3, [r7, #4]
9000527a:	681b      	ldr	r3, [r3, #0]
9000527c:	78fa      	ldrb	r2, [r7, #3]
9000527e:	4611      	mov	r1, r2
90005280:	4618      	mov	r0, r3
90005282:	f006 f86f 	bl	9000b364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90005286:	78fb      	ldrb	r3, [r7, #3]
90005288:	015a      	lsls	r2, r3, #5
9000528a:	693b      	ldr	r3, [r7, #16]
9000528c:	4413      	add	r3, r2
9000528e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005292:	461a      	mov	r2, r3
90005294:	2310      	movs	r3, #16
90005296:	6093      	str	r3, [r2, #8]
90005298:	e2a7      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
9000529a:	687b      	ldr	r3, [r7, #4]
9000529c:	681b      	ldr	r3, [r3, #0]
9000529e:	78fa      	ldrb	r2, [r7, #3]
900052a0:	4611      	mov	r1, r2
900052a2:	4618      	mov	r0, r3
900052a4:	f005 ffe1 	bl	9000b26a <USB_ReadChInterrupts>
900052a8:	4603      	mov	r3, r0
900052aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900052ae:	2b80      	cmp	r3, #128	@ 0x80
900052b0:	f040 8083 	bne.w	900053ba <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
900052b4:	687b      	ldr	r3, [r7, #4]
900052b6:	799b      	ldrb	r3, [r3, #6]
900052b8:	2b00      	cmp	r3, #0
900052ba:	d111      	bne.n	900052e0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
900052bc:	78fa      	ldrb	r2, [r7, #3]
900052be:	6879      	ldr	r1, [r7, #4]
900052c0:	4613      	mov	r3, r2
900052c2:	011b      	lsls	r3, r3, #4
900052c4:	1a9b      	subs	r3, r3, r2
900052c6:	009b      	lsls	r3, r3, #2
900052c8:	440b      	add	r3, r1
900052ca:	334d      	adds	r3, #77	@ 0x4d
900052cc:	2207      	movs	r2, #7
900052ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900052d0:	687b      	ldr	r3, [r7, #4]
900052d2:	681b      	ldr	r3, [r3, #0]
900052d4:	78fa      	ldrb	r2, [r7, #3]
900052d6:	4611      	mov	r1, r2
900052d8:	4618      	mov	r0, r3
900052da:	f006 f843 	bl	9000b364 <USB_HC_Halt>
900052de:	e062      	b.n	900053a6 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
900052e0:	78fa      	ldrb	r2, [r7, #3]
900052e2:	6879      	ldr	r1, [r7, #4]
900052e4:	4613      	mov	r3, r2
900052e6:	011b      	lsls	r3, r3, #4
900052e8:	1a9b      	subs	r3, r3, r2
900052ea:	009b      	lsls	r3, r3, #2
900052ec:	440b      	add	r3, r1
900052ee:	3344      	adds	r3, #68	@ 0x44
900052f0:	681b      	ldr	r3, [r3, #0]
900052f2:	1c59      	adds	r1, r3, #1
900052f4:	6878      	ldr	r0, [r7, #4]
900052f6:	4613      	mov	r3, r2
900052f8:	011b      	lsls	r3, r3, #4
900052fa:	1a9b      	subs	r3, r3, r2
900052fc:	009b      	lsls	r3, r3, #2
900052fe:	4403      	add	r3, r0
90005300:	3344      	adds	r3, #68	@ 0x44
90005302:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005304:	78fa      	ldrb	r2, [r7, #3]
90005306:	6879      	ldr	r1, [r7, #4]
90005308:	4613      	mov	r3, r2
9000530a:	011b      	lsls	r3, r3, #4
9000530c:	1a9b      	subs	r3, r3, r2
9000530e:	009b      	lsls	r3, r3, #2
90005310:	440b      	add	r3, r1
90005312:	3344      	adds	r3, #68	@ 0x44
90005314:	681b      	ldr	r3, [r3, #0]
90005316:	2b02      	cmp	r3, #2
90005318:	d922      	bls.n	90005360 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
9000531a:	78fa      	ldrb	r2, [r7, #3]
9000531c:	6879      	ldr	r1, [r7, #4]
9000531e:	4613      	mov	r3, r2
90005320:	011b      	lsls	r3, r3, #4
90005322:	1a9b      	subs	r3, r3, r2
90005324:	009b      	lsls	r3, r3, #2
90005326:	440b      	add	r3, r1
90005328:	3344      	adds	r3, #68	@ 0x44
9000532a:	2200      	movs	r2, #0
9000532c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
9000532e:	78fa      	ldrb	r2, [r7, #3]
90005330:	6879      	ldr	r1, [r7, #4]
90005332:	4613      	mov	r3, r2
90005334:	011b      	lsls	r3, r3, #4
90005336:	1a9b      	subs	r3, r3, r2
90005338:	009b      	lsls	r3, r3, #2
9000533a:	440b      	add	r3, r1
9000533c:	334c      	adds	r3, #76	@ 0x4c
9000533e:	2204      	movs	r2, #4
90005340:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005342:	78fa      	ldrb	r2, [r7, #3]
90005344:	6879      	ldr	r1, [r7, #4]
90005346:	4613      	mov	r3, r2
90005348:	011b      	lsls	r3, r3, #4
9000534a:	1a9b      	subs	r3, r3, r2
9000534c:	009b      	lsls	r3, r3, #2
9000534e:	440b      	add	r3, r1
90005350:	334c      	adds	r3, #76	@ 0x4c
90005352:	781a      	ldrb	r2, [r3, #0]
90005354:	78fb      	ldrb	r3, [r7, #3]
90005356:	4619      	mov	r1, r3
90005358:	6878      	ldr	r0, [r7, #4]
9000535a:	f7fb ff0b 	bl	90001174 <HAL_HCD_HC_NotifyURBChange_Callback>
9000535e:	e022      	b.n	900053a6 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005360:	78fa      	ldrb	r2, [r7, #3]
90005362:	6879      	ldr	r1, [r7, #4]
90005364:	4613      	mov	r3, r2
90005366:	011b      	lsls	r3, r3, #4
90005368:	1a9b      	subs	r3, r3, r2
9000536a:	009b      	lsls	r3, r3, #2
9000536c:	440b      	add	r3, r1
9000536e:	334c      	adds	r3, #76	@ 0x4c
90005370:	2202      	movs	r2, #2
90005372:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005374:	78fb      	ldrb	r3, [r7, #3]
90005376:	015a      	lsls	r2, r3, #5
90005378:	693b      	ldr	r3, [r7, #16]
9000537a:	4413      	add	r3, r2
9000537c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005380:	681b      	ldr	r3, [r3, #0]
90005382:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005384:	68fb      	ldr	r3, [r7, #12]
90005386:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000538a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
9000538c:	68fb      	ldr	r3, [r7, #12]
9000538e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005392:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005394:	78fb      	ldrb	r3, [r7, #3]
90005396:	015a      	lsls	r2, r3, #5
90005398:	693b      	ldr	r3, [r7, #16]
9000539a:	4413      	add	r3, r2
9000539c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053a0:	461a      	mov	r2, r3
900053a2:	68fb      	ldr	r3, [r7, #12]
900053a4:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900053a6:	78fb      	ldrb	r3, [r7, #3]
900053a8:	015a      	lsls	r2, r3, #5
900053aa:	693b      	ldr	r3, [r7, #16]
900053ac:	4413      	add	r3, r2
900053ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053b2:	461a      	mov	r2, r3
900053b4:	2380      	movs	r3, #128	@ 0x80
900053b6:	6093      	str	r3, [r2, #8]
900053b8:	e217      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900053ba:	687b      	ldr	r3, [r7, #4]
900053bc:	681b      	ldr	r3, [r3, #0]
900053be:	78fa      	ldrb	r2, [r7, #3]
900053c0:	4611      	mov	r1, r2
900053c2:	4618      	mov	r0, r3
900053c4:	f005 ff51 	bl	9000b26a <USB_ReadChInterrupts>
900053c8:	4603      	mov	r3, r0
900053ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900053ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900053d2:	d11b      	bne.n	9000540c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
900053d4:	78fa      	ldrb	r2, [r7, #3]
900053d6:	6879      	ldr	r1, [r7, #4]
900053d8:	4613      	mov	r3, r2
900053da:	011b      	lsls	r3, r3, #4
900053dc:	1a9b      	subs	r3, r3, r2
900053de:	009b      	lsls	r3, r3, #2
900053e0:	440b      	add	r3, r1
900053e2:	334d      	adds	r3, #77	@ 0x4d
900053e4:	2209      	movs	r2, #9
900053e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900053e8:	687b      	ldr	r3, [r7, #4]
900053ea:	681b      	ldr	r3, [r3, #0]
900053ec:	78fa      	ldrb	r2, [r7, #3]
900053ee:	4611      	mov	r1, r2
900053f0:	4618      	mov	r0, r3
900053f2:	f005 ffb7 	bl	9000b364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900053f6:	78fb      	ldrb	r3, [r7, #3]
900053f8:	015a      	lsls	r2, r3, #5
900053fa:	693b      	ldr	r3, [r7, #16]
900053fc:	4413      	add	r3, r2
900053fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005402:	461a      	mov	r2, r3
90005404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005408:	6093      	str	r3, [r2, #8]
9000540a:	e1ee      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000540c:	687b      	ldr	r3, [r7, #4]
9000540e:	681b      	ldr	r3, [r3, #0]
90005410:	78fa      	ldrb	r2, [r7, #3]
90005412:	4611      	mov	r1, r2
90005414:	4618      	mov	r0, r3
90005416:	f005 ff28 	bl	9000b26a <USB_ReadChInterrupts>
9000541a:	4603      	mov	r3, r0
9000541c:	f003 0302 	and.w	r3, r3, #2
90005420:	2b02      	cmp	r3, #2
90005422:	f040 81df 	bne.w	900057e4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005426:	78fb      	ldrb	r3, [r7, #3]
90005428:	015a      	lsls	r2, r3, #5
9000542a:	693b      	ldr	r3, [r7, #16]
9000542c:	4413      	add	r3, r2
9000542e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005432:	461a      	mov	r2, r3
90005434:	2302      	movs	r3, #2
90005436:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005438:	78fa      	ldrb	r2, [r7, #3]
9000543a:	6879      	ldr	r1, [r7, #4]
9000543c:	4613      	mov	r3, r2
9000543e:	011b      	lsls	r3, r3, #4
90005440:	1a9b      	subs	r3, r3, r2
90005442:	009b      	lsls	r3, r3, #2
90005444:	440b      	add	r3, r1
90005446:	334d      	adds	r3, #77	@ 0x4d
90005448:	781b      	ldrb	r3, [r3, #0]
9000544a:	2b01      	cmp	r3, #1
9000544c:	f040 8093 	bne.w	90005576 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005450:	78fa      	ldrb	r2, [r7, #3]
90005452:	6879      	ldr	r1, [r7, #4]
90005454:	4613      	mov	r3, r2
90005456:	011b      	lsls	r3, r3, #4
90005458:	1a9b      	subs	r3, r3, r2
9000545a:	009b      	lsls	r3, r3, #2
9000545c:	440b      	add	r3, r1
9000545e:	334d      	adds	r3, #77	@ 0x4d
90005460:	2202      	movs	r2, #2
90005462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005464:	78fa      	ldrb	r2, [r7, #3]
90005466:	6879      	ldr	r1, [r7, #4]
90005468:	4613      	mov	r3, r2
9000546a:	011b      	lsls	r3, r3, #4
9000546c:	1a9b      	subs	r3, r3, r2
9000546e:	009b      	lsls	r3, r3, #2
90005470:	440b      	add	r3, r1
90005472:	334c      	adds	r3, #76	@ 0x4c
90005474:	2201      	movs	r2, #1
90005476:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005478:	78fa      	ldrb	r2, [r7, #3]
9000547a:	6879      	ldr	r1, [r7, #4]
9000547c:	4613      	mov	r3, r2
9000547e:	011b      	lsls	r3, r3, #4
90005480:	1a9b      	subs	r3, r3, r2
90005482:	009b      	lsls	r3, r3, #2
90005484:	440b      	add	r3, r1
90005486:	3326      	adds	r3, #38	@ 0x26
90005488:	781b      	ldrb	r3, [r3, #0]
9000548a:	2b02      	cmp	r3, #2
9000548c:	d00b      	beq.n	900054a6 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
9000548e:	78fa      	ldrb	r2, [r7, #3]
90005490:	6879      	ldr	r1, [r7, #4]
90005492:	4613      	mov	r3, r2
90005494:	011b      	lsls	r3, r3, #4
90005496:	1a9b      	subs	r3, r3, r2
90005498:	009b      	lsls	r3, r3, #2
9000549a:	440b      	add	r3, r1
9000549c:	3326      	adds	r3, #38	@ 0x26
9000549e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900054a0:	2b03      	cmp	r3, #3
900054a2:	f040 8190 	bne.w	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
900054a6:	687b      	ldr	r3, [r7, #4]
900054a8:	799b      	ldrb	r3, [r3, #6]
900054aa:	2b00      	cmp	r3, #0
900054ac:	d115      	bne.n	900054da <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
900054ae:	78fa      	ldrb	r2, [r7, #3]
900054b0:	6879      	ldr	r1, [r7, #4]
900054b2:	4613      	mov	r3, r2
900054b4:	011b      	lsls	r3, r3, #4
900054b6:	1a9b      	subs	r3, r3, r2
900054b8:	009b      	lsls	r3, r3, #2
900054ba:	440b      	add	r3, r1
900054bc:	333d      	adds	r3, #61	@ 0x3d
900054be:	781b      	ldrb	r3, [r3, #0]
900054c0:	78fa      	ldrb	r2, [r7, #3]
900054c2:	f083 0301 	eor.w	r3, r3, #1
900054c6:	b2d8      	uxtb	r0, r3
900054c8:	6879      	ldr	r1, [r7, #4]
900054ca:	4613      	mov	r3, r2
900054cc:	011b      	lsls	r3, r3, #4
900054ce:	1a9b      	subs	r3, r3, r2
900054d0:	009b      	lsls	r3, r3, #2
900054d2:	440b      	add	r3, r1
900054d4:	333d      	adds	r3, #61	@ 0x3d
900054d6:	4602      	mov	r2, r0
900054d8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
900054da:	687b      	ldr	r3, [r7, #4]
900054dc:	799b      	ldrb	r3, [r3, #6]
900054de:	2b01      	cmp	r3, #1
900054e0:	f040 8171 	bne.w	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
900054e4:	78fa      	ldrb	r2, [r7, #3]
900054e6:	6879      	ldr	r1, [r7, #4]
900054e8:	4613      	mov	r3, r2
900054ea:	011b      	lsls	r3, r3, #4
900054ec:	1a9b      	subs	r3, r3, r2
900054ee:	009b      	lsls	r3, r3, #2
900054f0:	440b      	add	r3, r1
900054f2:	3334      	adds	r3, #52	@ 0x34
900054f4:	681b      	ldr	r3, [r3, #0]
900054f6:	2b00      	cmp	r3, #0
900054f8:	f000 8165 	beq.w	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
900054fc:	78fa      	ldrb	r2, [r7, #3]
900054fe:	6879      	ldr	r1, [r7, #4]
90005500:	4613      	mov	r3, r2
90005502:	011b      	lsls	r3, r3, #4
90005504:	1a9b      	subs	r3, r3, r2
90005506:	009b      	lsls	r3, r3, #2
90005508:	440b      	add	r3, r1
9000550a:	3334      	adds	r3, #52	@ 0x34
9000550c:	6819      	ldr	r1, [r3, #0]
9000550e:	78fa      	ldrb	r2, [r7, #3]
90005510:	6878      	ldr	r0, [r7, #4]
90005512:	4613      	mov	r3, r2
90005514:	011b      	lsls	r3, r3, #4
90005516:	1a9b      	subs	r3, r3, r2
90005518:	009b      	lsls	r3, r3, #2
9000551a:	4403      	add	r3, r0
9000551c:	3328      	adds	r3, #40	@ 0x28
9000551e:	881b      	ldrh	r3, [r3, #0]
90005520:	440b      	add	r3, r1
90005522:	1e59      	subs	r1, r3, #1
90005524:	78fa      	ldrb	r2, [r7, #3]
90005526:	6878      	ldr	r0, [r7, #4]
90005528:	4613      	mov	r3, r2
9000552a:	011b      	lsls	r3, r3, #4
9000552c:	1a9b      	subs	r3, r3, r2
9000552e:	009b      	lsls	r3, r3, #2
90005530:	4403      	add	r3, r0
90005532:	3328      	adds	r3, #40	@ 0x28
90005534:	881b      	ldrh	r3, [r3, #0]
90005536:	fbb1 f3f3 	udiv	r3, r1, r3
9000553a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
9000553c:	68bb      	ldr	r3, [r7, #8]
9000553e:	f003 0301 	and.w	r3, r3, #1
90005542:	2b00      	cmp	r3, #0
90005544:	f000 813f 	beq.w	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005548:	78fa      	ldrb	r2, [r7, #3]
9000554a:	6879      	ldr	r1, [r7, #4]
9000554c:	4613      	mov	r3, r2
9000554e:	011b      	lsls	r3, r3, #4
90005550:	1a9b      	subs	r3, r3, r2
90005552:	009b      	lsls	r3, r3, #2
90005554:	440b      	add	r3, r1
90005556:	333d      	adds	r3, #61	@ 0x3d
90005558:	781b      	ldrb	r3, [r3, #0]
9000555a:	78fa      	ldrb	r2, [r7, #3]
9000555c:	f083 0301 	eor.w	r3, r3, #1
90005560:	b2d8      	uxtb	r0, r3
90005562:	6879      	ldr	r1, [r7, #4]
90005564:	4613      	mov	r3, r2
90005566:	011b      	lsls	r3, r3, #4
90005568:	1a9b      	subs	r3, r3, r2
9000556a:	009b      	lsls	r3, r3, #2
9000556c:	440b      	add	r3, r1
9000556e:	333d      	adds	r3, #61	@ 0x3d
90005570:	4602      	mov	r2, r0
90005572:	701a      	strb	r2, [r3, #0]
90005574:	e127      	b.n	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005576:	78fa      	ldrb	r2, [r7, #3]
90005578:	6879      	ldr	r1, [r7, #4]
9000557a:	4613      	mov	r3, r2
9000557c:	011b      	lsls	r3, r3, #4
9000557e:	1a9b      	subs	r3, r3, r2
90005580:	009b      	lsls	r3, r3, #2
90005582:	440b      	add	r3, r1
90005584:	334d      	adds	r3, #77	@ 0x4d
90005586:	781b      	ldrb	r3, [r3, #0]
90005588:	2b03      	cmp	r3, #3
9000558a:	d120      	bne.n	900055ce <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000558c:	78fa      	ldrb	r2, [r7, #3]
9000558e:	6879      	ldr	r1, [r7, #4]
90005590:	4613      	mov	r3, r2
90005592:	011b      	lsls	r3, r3, #4
90005594:	1a9b      	subs	r3, r3, r2
90005596:	009b      	lsls	r3, r3, #2
90005598:	440b      	add	r3, r1
9000559a:	334d      	adds	r3, #77	@ 0x4d
9000559c:	2202      	movs	r2, #2
9000559e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900055a0:	78fa      	ldrb	r2, [r7, #3]
900055a2:	6879      	ldr	r1, [r7, #4]
900055a4:	4613      	mov	r3, r2
900055a6:	011b      	lsls	r3, r3, #4
900055a8:	1a9b      	subs	r3, r3, r2
900055aa:	009b      	lsls	r3, r3, #2
900055ac:	440b      	add	r3, r1
900055ae:	331b      	adds	r3, #27
900055b0:	781b      	ldrb	r3, [r3, #0]
900055b2:	2b01      	cmp	r3, #1
900055b4:	f040 8107 	bne.w	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900055b8:	78fa      	ldrb	r2, [r7, #3]
900055ba:	6879      	ldr	r1, [r7, #4]
900055bc:	4613      	mov	r3, r2
900055be:	011b      	lsls	r3, r3, #4
900055c0:	1a9b      	subs	r3, r3, r2
900055c2:	009b      	lsls	r3, r3, #2
900055c4:	440b      	add	r3, r1
900055c6:	334c      	adds	r3, #76	@ 0x4c
900055c8:	2202      	movs	r2, #2
900055ca:	701a      	strb	r2, [r3, #0]
900055cc:	e0fb      	b.n	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900055ce:	78fa      	ldrb	r2, [r7, #3]
900055d0:	6879      	ldr	r1, [r7, #4]
900055d2:	4613      	mov	r3, r2
900055d4:	011b      	lsls	r3, r3, #4
900055d6:	1a9b      	subs	r3, r3, r2
900055d8:	009b      	lsls	r3, r3, #2
900055da:	440b      	add	r3, r1
900055dc:	334d      	adds	r3, #77	@ 0x4d
900055de:	781b      	ldrb	r3, [r3, #0]
900055e0:	2b04      	cmp	r3, #4
900055e2:	d13a      	bne.n	9000565a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900055e4:	78fa      	ldrb	r2, [r7, #3]
900055e6:	6879      	ldr	r1, [r7, #4]
900055e8:	4613      	mov	r3, r2
900055ea:	011b      	lsls	r3, r3, #4
900055ec:	1a9b      	subs	r3, r3, r2
900055ee:	009b      	lsls	r3, r3, #2
900055f0:	440b      	add	r3, r1
900055f2:	334d      	adds	r3, #77	@ 0x4d
900055f4:	2202      	movs	r2, #2
900055f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900055f8:	78fa      	ldrb	r2, [r7, #3]
900055fa:	6879      	ldr	r1, [r7, #4]
900055fc:	4613      	mov	r3, r2
900055fe:	011b      	lsls	r3, r3, #4
90005600:	1a9b      	subs	r3, r3, r2
90005602:	009b      	lsls	r3, r3, #2
90005604:	440b      	add	r3, r1
90005606:	334c      	adds	r3, #76	@ 0x4c
90005608:	2202      	movs	r2, #2
9000560a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000560c:	78fa      	ldrb	r2, [r7, #3]
9000560e:	6879      	ldr	r1, [r7, #4]
90005610:	4613      	mov	r3, r2
90005612:	011b      	lsls	r3, r3, #4
90005614:	1a9b      	subs	r3, r3, r2
90005616:	009b      	lsls	r3, r3, #2
90005618:	440b      	add	r3, r1
9000561a:	331b      	adds	r3, #27
9000561c:	781b      	ldrb	r3, [r3, #0]
9000561e:	2b01      	cmp	r3, #1
90005620:	f040 80d1 	bne.w	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
90005624:	78fa      	ldrb	r2, [r7, #3]
90005626:	6879      	ldr	r1, [r7, #4]
90005628:	4613      	mov	r3, r2
9000562a:	011b      	lsls	r3, r3, #4
9000562c:	1a9b      	subs	r3, r3, r2
9000562e:	009b      	lsls	r3, r3, #2
90005630:	440b      	add	r3, r1
90005632:	331b      	adds	r3, #27
90005634:	2200      	movs	r2, #0
90005636:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005638:	78fb      	ldrb	r3, [r7, #3]
9000563a:	015a      	lsls	r2, r3, #5
9000563c:	693b      	ldr	r3, [r7, #16]
9000563e:	4413      	add	r3, r2
90005640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005644:	685b      	ldr	r3, [r3, #4]
90005646:	78fa      	ldrb	r2, [r7, #3]
90005648:	0151      	lsls	r1, r2, #5
9000564a:	693a      	ldr	r2, [r7, #16]
9000564c:	440a      	add	r2, r1
9000564e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005656:	6053      	str	r3, [r2, #4]
90005658:	e0b5      	b.n	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000565a:	78fa      	ldrb	r2, [r7, #3]
9000565c:	6879      	ldr	r1, [r7, #4]
9000565e:	4613      	mov	r3, r2
90005660:	011b      	lsls	r3, r3, #4
90005662:	1a9b      	subs	r3, r3, r2
90005664:	009b      	lsls	r3, r3, #2
90005666:	440b      	add	r3, r1
90005668:	334d      	adds	r3, #77	@ 0x4d
9000566a:	781b      	ldrb	r3, [r3, #0]
9000566c:	2b05      	cmp	r3, #5
9000566e:	d114      	bne.n	9000569a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005670:	78fa      	ldrb	r2, [r7, #3]
90005672:	6879      	ldr	r1, [r7, #4]
90005674:	4613      	mov	r3, r2
90005676:	011b      	lsls	r3, r3, #4
90005678:	1a9b      	subs	r3, r3, r2
9000567a:	009b      	lsls	r3, r3, #2
9000567c:	440b      	add	r3, r1
9000567e:	334d      	adds	r3, #77	@ 0x4d
90005680:	2202      	movs	r2, #2
90005682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005684:	78fa      	ldrb	r2, [r7, #3]
90005686:	6879      	ldr	r1, [r7, #4]
90005688:	4613      	mov	r3, r2
9000568a:	011b      	lsls	r3, r3, #4
9000568c:	1a9b      	subs	r3, r3, r2
9000568e:	009b      	lsls	r3, r3, #2
90005690:	440b      	add	r3, r1
90005692:	334c      	adds	r3, #76	@ 0x4c
90005694:	2202      	movs	r2, #2
90005696:	701a      	strb	r2, [r3, #0]
90005698:	e095      	b.n	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000569a:	78fa      	ldrb	r2, [r7, #3]
9000569c:	6879      	ldr	r1, [r7, #4]
9000569e:	4613      	mov	r3, r2
900056a0:	011b      	lsls	r3, r3, #4
900056a2:	1a9b      	subs	r3, r3, r2
900056a4:	009b      	lsls	r3, r3, #2
900056a6:	440b      	add	r3, r1
900056a8:	334d      	adds	r3, #77	@ 0x4d
900056aa:	781b      	ldrb	r3, [r3, #0]
900056ac:	2b06      	cmp	r3, #6
900056ae:	d114      	bne.n	900056da <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900056b0:	78fa      	ldrb	r2, [r7, #3]
900056b2:	6879      	ldr	r1, [r7, #4]
900056b4:	4613      	mov	r3, r2
900056b6:	011b      	lsls	r3, r3, #4
900056b8:	1a9b      	subs	r3, r3, r2
900056ba:	009b      	lsls	r3, r3, #2
900056bc:	440b      	add	r3, r1
900056be:	334d      	adds	r3, #77	@ 0x4d
900056c0:	2202      	movs	r2, #2
900056c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
900056c4:	78fa      	ldrb	r2, [r7, #3]
900056c6:	6879      	ldr	r1, [r7, #4]
900056c8:	4613      	mov	r3, r2
900056ca:	011b      	lsls	r3, r3, #4
900056cc:	1a9b      	subs	r3, r3, r2
900056ce:	009b      	lsls	r3, r3, #2
900056d0:	440b      	add	r3, r1
900056d2:	334c      	adds	r3, #76	@ 0x4c
900056d4:	2205      	movs	r2, #5
900056d6:	701a      	strb	r2, [r3, #0]
900056d8:	e075      	b.n	900057c6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900056da:	78fa      	ldrb	r2, [r7, #3]
900056dc:	6879      	ldr	r1, [r7, #4]
900056de:	4613      	mov	r3, r2
900056e0:	011b      	lsls	r3, r3, #4
900056e2:	1a9b      	subs	r3, r3, r2
900056e4:	009b      	lsls	r3, r3, #2
900056e6:	440b      	add	r3, r1
900056e8:	334d      	adds	r3, #77	@ 0x4d
900056ea:	781b      	ldrb	r3, [r3, #0]
900056ec:	2b07      	cmp	r3, #7
900056ee:	d00a      	beq.n	90005706 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900056f0:	78fa      	ldrb	r2, [r7, #3]
900056f2:	6879      	ldr	r1, [r7, #4]
900056f4:	4613      	mov	r3, r2
900056f6:	011b      	lsls	r3, r3, #4
900056f8:	1a9b      	subs	r3, r3, r2
900056fa:	009b      	lsls	r3, r3, #2
900056fc:	440b      	add	r3, r1
900056fe:	334d      	adds	r3, #77	@ 0x4d
90005700:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005702:	2b09      	cmp	r3, #9
90005704:	d170      	bne.n	900057e8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005706:	78fa      	ldrb	r2, [r7, #3]
90005708:	6879      	ldr	r1, [r7, #4]
9000570a:	4613      	mov	r3, r2
9000570c:	011b      	lsls	r3, r3, #4
9000570e:	1a9b      	subs	r3, r3, r2
90005710:	009b      	lsls	r3, r3, #2
90005712:	440b      	add	r3, r1
90005714:	334d      	adds	r3, #77	@ 0x4d
90005716:	2202      	movs	r2, #2
90005718:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000571a:	78fa      	ldrb	r2, [r7, #3]
9000571c:	6879      	ldr	r1, [r7, #4]
9000571e:	4613      	mov	r3, r2
90005720:	011b      	lsls	r3, r3, #4
90005722:	1a9b      	subs	r3, r3, r2
90005724:	009b      	lsls	r3, r3, #2
90005726:	440b      	add	r3, r1
90005728:	3344      	adds	r3, #68	@ 0x44
9000572a:	681b      	ldr	r3, [r3, #0]
9000572c:	1c59      	adds	r1, r3, #1
9000572e:	6878      	ldr	r0, [r7, #4]
90005730:	4613      	mov	r3, r2
90005732:	011b      	lsls	r3, r3, #4
90005734:	1a9b      	subs	r3, r3, r2
90005736:	009b      	lsls	r3, r3, #2
90005738:	4403      	add	r3, r0
9000573a:	3344      	adds	r3, #68	@ 0x44
9000573c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000573e:	78fa      	ldrb	r2, [r7, #3]
90005740:	6879      	ldr	r1, [r7, #4]
90005742:	4613      	mov	r3, r2
90005744:	011b      	lsls	r3, r3, #4
90005746:	1a9b      	subs	r3, r3, r2
90005748:	009b      	lsls	r3, r3, #2
9000574a:	440b      	add	r3, r1
9000574c:	3344      	adds	r3, #68	@ 0x44
9000574e:	681b      	ldr	r3, [r3, #0]
90005750:	2b02      	cmp	r3, #2
90005752:	d914      	bls.n	9000577e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005754:	78fa      	ldrb	r2, [r7, #3]
90005756:	6879      	ldr	r1, [r7, #4]
90005758:	4613      	mov	r3, r2
9000575a:	011b      	lsls	r3, r3, #4
9000575c:	1a9b      	subs	r3, r3, r2
9000575e:	009b      	lsls	r3, r3, #2
90005760:	440b      	add	r3, r1
90005762:	3344      	adds	r3, #68	@ 0x44
90005764:	2200      	movs	r2, #0
90005766:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005768:	78fa      	ldrb	r2, [r7, #3]
9000576a:	6879      	ldr	r1, [r7, #4]
9000576c:	4613      	mov	r3, r2
9000576e:	011b      	lsls	r3, r3, #4
90005770:	1a9b      	subs	r3, r3, r2
90005772:	009b      	lsls	r3, r3, #2
90005774:	440b      	add	r3, r1
90005776:	334c      	adds	r3, #76	@ 0x4c
90005778:	2204      	movs	r2, #4
9000577a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000577c:	e022      	b.n	900057c4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000577e:	78fa      	ldrb	r2, [r7, #3]
90005780:	6879      	ldr	r1, [r7, #4]
90005782:	4613      	mov	r3, r2
90005784:	011b      	lsls	r3, r3, #4
90005786:	1a9b      	subs	r3, r3, r2
90005788:	009b      	lsls	r3, r3, #2
9000578a:	440b      	add	r3, r1
9000578c:	334c      	adds	r3, #76	@ 0x4c
9000578e:	2202      	movs	r2, #2
90005790:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005792:	78fb      	ldrb	r3, [r7, #3]
90005794:	015a      	lsls	r2, r3, #5
90005796:	693b      	ldr	r3, [r7, #16]
90005798:	4413      	add	r3, r2
9000579a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000579e:	681b      	ldr	r3, [r3, #0]
900057a0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900057a2:	68fb      	ldr	r3, [r7, #12]
900057a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900057a8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900057aa:	68fb      	ldr	r3, [r7, #12]
900057ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900057b0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900057b2:	78fb      	ldrb	r3, [r7, #3]
900057b4:	015a      	lsls	r2, r3, #5
900057b6:	693b      	ldr	r3, [r7, #16]
900057b8:	4413      	add	r3, r2
900057ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057be:	461a      	mov	r2, r3
900057c0:	68fb      	ldr	r3, [r7, #12]
900057c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900057c4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900057c6:	78fa      	ldrb	r2, [r7, #3]
900057c8:	6879      	ldr	r1, [r7, #4]
900057ca:	4613      	mov	r3, r2
900057cc:	011b      	lsls	r3, r3, #4
900057ce:	1a9b      	subs	r3, r3, r2
900057d0:	009b      	lsls	r3, r3, #2
900057d2:	440b      	add	r3, r1
900057d4:	334c      	adds	r3, #76	@ 0x4c
900057d6:	781a      	ldrb	r2, [r3, #0]
900057d8:	78fb      	ldrb	r3, [r7, #3]
900057da:	4619      	mov	r1, r3
900057dc:	6878      	ldr	r0, [r7, #4]
900057de:	f7fb fcc9 	bl	90001174 <HAL_HCD_HC_NotifyURBChange_Callback>
900057e2:	e002      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
900057e4:	bf00      	nop
900057e6:	e000      	b.n	900057ea <HCD_HC_OUT_IRQHandler+0x978>
      return;
900057e8:	bf00      	nop
  }
}
900057ea:	3718      	adds	r7, #24
900057ec:	46bd      	mov	sp, r7
900057ee:	bd80      	pop	{r7, pc}

900057f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900057f0:	b580      	push	{r7, lr}
900057f2:	b08a      	sub	sp, #40	@ 0x28
900057f4:	af00      	add	r7, sp, #0
900057f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900057f8:	687b      	ldr	r3, [r7, #4]
900057fa:	681b      	ldr	r3, [r3, #0]
900057fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
900057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005800:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005802:	687b      	ldr	r3, [r7, #4]
90005804:	681b      	ldr	r3, [r3, #0]
90005806:	6a1b      	ldr	r3, [r3, #32]
90005808:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
9000580a:	69fb      	ldr	r3, [r7, #28]
9000580c:	f003 030f 	and.w	r3, r3, #15
90005810:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005812:	69fb      	ldr	r3, [r7, #28]
90005814:	0c5b      	lsrs	r3, r3, #17
90005816:	f003 030f 	and.w	r3, r3, #15
9000581a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
9000581c:	69fb      	ldr	r3, [r7, #28]
9000581e:	091b      	lsrs	r3, r3, #4
90005820:	f3c3 030a 	ubfx	r3, r3, #0, #11
90005824:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90005826:	697b      	ldr	r3, [r7, #20]
90005828:	2b02      	cmp	r3, #2
9000582a:	d004      	beq.n	90005836 <HCD_RXQLVL_IRQHandler+0x46>
9000582c:	697b      	ldr	r3, [r7, #20]
9000582e:	2b05      	cmp	r3, #5
90005830:	f000 80b6 	beq.w	900059a0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90005834:	e0b7      	b.n	900059a6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
90005836:	693b      	ldr	r3, [r7, #16]
90005838:	2b00      	cmp	r3, #0
9000583a:	f000 80b3 	beq.w	900059a4 <HCD_RXQLVL_IRQHandler+0x1b4>
9000583e:	6879      	ldr	r1, [r7, #4]
90005840:	69ba      	ldr	r2, [r7, #24]
90005842:	4613      	mov	r3, r2
90005844:	011b      	lsls	r3, r3, #4
90005846:	1a9b      	subs	r3, r3, r2
90005848:	009b      	lsls	r3, r3, #2
9000584a:	440b      	add	r3, r1
9000584c:	332c      	adds	r3, #44	@ 0x2c
9000584e:	681b      	ldr	r3, [r3, #0]
90005850:	2b00      	cmp	r3, #0
90005852:	f000 80a7 	beq.w	900059a4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
90005856:	6879      	ldr	r1, [r7, #4]
90005858:	69ba      	ldr	r2, [r7, #24]
9000585a:	4613      	mov	r3, r2
9000585c:	011b      	lsls	r3, r3, #4
9000585e:	1a9b      	subs	r3, r3, r2
90005860:	009b      	lsls	r3, r3, #2
90005862:	440b      	add	r3, r1
90005864:	3338      	adds	r3, #56	@ 0x38
90005866:	681a      	ldr	r2, [r3, #0]
90005868:	693b      	ldr	r3, [r7, #16]
9000586a:	18d1      	adds	r1, r2, r3
9000586c:	6878      	ldr	r0, [r7, #4]
9000586e:	69ba      	ldr	r2, [r7, #24]
90005870:	4613      	mov	r3, r2
90005872:	011b      	lsls	r3, r3, #4
90005874:	1a9b      	subs	r3, r3, r2
90005876:	009b      	lsls	r3, r3, #2
90005878:	4403      	add	r3, r0
9000587a:	3334      	adds	r3, #52	@ 0x34
9000587c:	681b      	ldr	r3, [r3, #0]
9000587e:	4299      	cmp	r1, r3
90005880:	f200 8083 	bhi.w	9000598a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005884:	687b      	ldr	r3, [r7, #4]
90005886:	6818      	ldr	r0, [r3, #0]
90005888:	6879      	ldr	r1, [r7, #4]
9000588a:	69ba      	ldr	r2, [r7, #24]
9000588c:	4613      	mov	r3, r2
9000588e:	011b      	lsls	r3, r3, #4
90005890:	1a9b      	subs	r3, r3, r2
90005892:	009b      	lsls	r3, r3, #2
90005894:	440b      	add	r3, r1
90005896:	332c      	adds	r3, #44	@ 0x2c
90005898:	681b      	ldr	r3, [r3, #0]
9000589a:	693a      	ldr	r2, [r7, #16]
9000589c:	b292      	uxth	r2, r2
9000589e:	4619      	mov	r1, r3
900058a0:	f005 fc78 	bl	9000b194 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
900058a4:	6879      	ldr	r1, [r7, #4]
900058a6:	69ba      	ldr	r2, [r7, #24]
900058a8:	4613      	mov	r3, r2
900058aa:	011b      	lsls	r3, r3, #4
900058ac:	1a9b      	subs	r3, r3, r2
900058ae:	009b      	lsls	r3, r3, #2
900058b0:	440b      	add	r3, r1
900058b2:	332c      	adds	r3, #44	@ 0x2c
900058b4:	681a      	ldr	r2, [r3, #0]
900058b6:	693b      	ldr	r3, [r7, #16]
900058b8:	18d1      	adds	r1, r2, r3
900058ba:	6878      	ldr	r0, [r7, #4]
900058bc:	69ba      	ldr	r2, [r7, #24]
900058be:	4613      	mov	r3, r2
900058c0:	011b      	lsls	r3, r3, #4
900058c2:	1a9b      	subs	r3, r3, r2
900058c4:	009b      	lsls	r3, r3, #2
900058c6:	4403      	add	r3, r0
900058c8:	332c      	adds	r3, #44	@ 0x2c
900058ca:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
900058cc:	6879      	ldr	r1, [r7, #4]
900058ce:	69ba      	ldr	r2, [r7, #24]
900058d0:	4613      	mov	r3, r2
900058d2:	011b      	lsls	r3, r3, #4
900058d4:	1a9b      	subs	r3, r3, r2
900058d6:	009b      	lsls	r3, r3, #2
900058d8:	440b      	add	r3, r1
900058da:	3338      	adds	r3, #56	@ 0x38
900058dc:	681a      	ldr	r2, [r3, #0]
900058de:	693b      	ldr	r3, [r7, #16]
900058e0:	18d1      	adds	r1, r2, r3
900058e2:	6878      	ldr	r0, [r7, #4]
900058e4:	69ba      	ldr	r2, [r7, #24]
900058e6:	4613      	mov	r3, r2
900058e8:	011b      	lsls	r3, r3, #4
900058ea:	1a9b      	subs	r3, r3, r2
900058ec:	009b      	lsls	r3, r3, #2
900058ee:	4403      	add	r3, r0
900058f0:	3338      	adds	r3, #56	@ 0x38
900058f2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
900058f4:	69bb      	ldr	r3, [r7, #24]
900058f6:	015a      	lsls	r2, r3, #5
900058f8:	6a3b      	ldr	r3, [r7, #32]
900058fa:	4413      	add	r3, r2
900058fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005900:	691b      	ldr	r3, [r3, #16]
90005902:	0cdb      	lsrs	r3, r3, #19
90005904:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005908:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
9000590a:	6879      	ldr	r1, [r7, #4]
9000590c:	69ba      	ldr	r2, [r7, #24]
9000590e:	4613      	mov	r3, r2
90005910:	011b      	lsls	r3, r3, #4
90005912:	1a9b      	subs	r3, r3, r2
90005914:	009b      	lsls	r3, r3, #2
90005916:	440b      	add	r3, r1
90005918:	3328      	adds	r3, #40	@ 0x28
9000591a:	881b      	ldrh	r3, [r3, #0]
9000591c:	461a      	mov	r2, r3
9000591e:	693b      	ldr	r3, [r7, #16]
90005920:	4293      	cmp	r3, r2
90005922:	d13f      	bne.n	900059a4 <HCD_RXQLVL_IRQHandler+0x1b4>
90005924:	68fb      	ldr	r3, [r7, #12]
90005926:	2b00      	cmp	r3, #0
90005928:	d03c      	beq.n	900059a4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
9000592a:	69bb      	ldr	r3, [r7, #24]
9000592c:	015a      	lsls	r2, r3, #5
9000592e:	6a3b      	ldr	r3, [r7, #32]
90005930:	4413      	add	r3, r2
90005932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005936:	681b      	ldr	r3, [r3, #0]
90005938:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000593a:	68bb      	ldr	r3, [r7, #8]
9000593c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005940:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90005942:	68bb      	ldr	r3, [r7, #8]
90005944:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005948:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
9000594a:	69bb      	ldr	r3, [r7, #24]
9000594c:	015a      	lsls	r2, r3, #5
9000594e:	6a3b      	ldr	r3, [r7, #32]
90005950:	4413      	add	r3, r2
90005952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005956:	461a      	mov	r2, r3
90005958:	68bb      	ldr	r3, [r7, #8]
9000595a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
9000595c:	6879      	ldr	r1, [r7, #4]
9000595e:	69ba      	ldr	r2, [r7, #24]
90005960:	4613      	mov	r3, r2
90005962:	011b      	lsls	r3, r3, #4
90005964:	1a9b      	subs	r3, r3, r2
90005966:	009b      	lsls	r3, r3, #2
90005968:	440b      	add	r3, r1
9000596a:	333c      	adds	r3, #60	@ 0x3c
9000596c:	781b      	ldrb	r3, [r3, #0]
9000596e:	f083 0301 	eor.w	r3, r3, #1
90005972:	b2d8      	uxtb	r0, r3
90005974:	6879      	ldr	r1, [r7, #4]
90005976:	69ba      	ldr	r2, [r7, #24]
90005978:	4613      	mov	r3, r2
9000597a:	011b      	lsls	r3, r3, #4
9000597c:	1a9b      	subs	r3, r3, r2
9000597e:	009b      	lsls	r3, r3, #2
90005980:	440b      	add	r3, r1
90005982:	333c      	adds	r3, #60	@ 0x3c
90005984:	4602      	mov	r2, r0
90005986:	701a      	strb	r2, [r3, #0]
      break;
90005988:	e00c      	b.n	900059a4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
9000598a:	6879      	ldr	r1, [r7, #4]
9000598c:	69ba      	ldr	r2, [r7, #24]
9000598e:	4613      	mov	r3, r2
90005990:	011b      	lsls	r3, r3, #4
90005992:	1a9b      	subs	r3, r3, r2
90005994:	009b      	lsls	r3, r3, #2
90005996:	440b      	add	r3, r1
90005998:	334c      	adds	r3, #76	@ 0x4c
9000599a:	2204      	movs	r2, #4
9000599c:	701a      	strb	r2, [r3, #0]
      break;
9000599e:	e001      	b.n	900059a4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
900059a0:	bf00      	nop
900059a2:	e000      	b.n	900059a6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
900059a4:	bf00      	nop
  }
}
900059a6:	bf00      	nop
900059a8:	3728      	adds	r7, #40	@ 0x28
900059aa:	46bd      	mov	sp, r7
900059ac:	bd80      	pop	{r7, pc}

900059ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900059ae:	b580      	push	{r7, lr}
900059b0:	b086      	sub	sp, #24
900059b2:	af00      	add	r7, sp, #0
900059b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900059b6:	687b      	ldr	r3, [r7, #4]
900059b8:	681b      	ldr	r3, [r3, #0]
900059ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900059bc:	697b      	ldr	r3, [r7, #20]
900059be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
900059c0:	693b      	ldr	r3, [r7, #16]
900059c2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900059c6:	681b      	ldr	r3, [r3, #0]
900059c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
900059ca:	693b      	ldr	r3, [r7, #16]
900059cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900059d0:	681b      	ldr	r3, [r3, #0]
900059d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900059d4:	68bb      	ldr	r3, [r7, #8]
900059d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
900059da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900059dc:	68fb      	ldr	r3, [r7, #12]
900059de:	f003 0302 	and.w	r3, r3, #2
900059e2:	2b02      	cmp	r3, #2
900059e4:	d10b      	bne.n	900059fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
900059e6:	68fb      	ldr	r3, [r7, #12]
900059e8:	f003 0301 	and.w	r3, r3, #1
900059ec:	2b01      	cmp	r3, #1
900059ee:	d102      	bne.n	900059f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
900059f0:	6878      	ldr	r0, [r7, #4]
900059f2:	f7fb fb87 	bl	90001104 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
900059f6:	68bb      	ldr	r3, [r7, #8]
900059f8:	f043 0302 	orr.w	r3, r3, #2
900059fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900059fe:	68fb      	ldr	r3, [r7, #12]
90005a00:	f003 0308 	and.w	r3, r3, #8
90005a04:	2b08      	cmp	r3, #8
90005a06:	d132      	bne.n	90005a6e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005a08:	68bb      	ldr	r3, [r7, #8]
90005a0a:	f043 0308 	orr.w	r3, r3, #8
90005a0e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005a10:	68fb      	ldr	r3, [r7, #12]
90005a12:	f003 0304 	and.w	r3, r3, #4
90005a16:	2b04      	cmp	r3, #4
90005a18:	d126      	bne.n	90005a68 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005a1a:	687b      	ldr	r3, [r7, #4]
90005a1c:	7a5b      	ldrb	r3, [r3, #9]
90005a1e:	2b02      	cmp	r3, #2
90005a20:	d113      	bne.n	90005a4a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005a22:	68fb      	ldr	r3, [r7, #12]
90005a24:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005a28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90005a2c:	d106      	bne.n	90005a3c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005a2e:	687b      	ldr	r3, [r7, #4]
90005a30:	681b      	ldr	r3, [r3, #0]
90005a32:	2102      	movs	r1, #2
90005a34:	4618      	mov	r0, r3
90005a36:	f005 fc47 	bl	9000b2c8 <USB_InitFSLSPClkSel>
90005a3a:	e011      	b.n	90005a60 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005a3c:	687b      	ldr	r3, [r7, #4]
90005a3e:	681b      	ldr	r3, [r3, #0]
90005a40:	2101      	movs	r1, #1
90005a42:	4618      	mov	r0, r3
90005a44:	f005 fc40 	bl	9000b2c8 <USB_InitFSLSPClkSel>
90005a48:	e00a      	b.n	90005a60 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90005a4a:	687b      	ldr	r3, [r7, #4]
90005a4c:	79db      	ldrb	r3, [r3, #7]
90005a4e:	2b01      	cmp	r3, #1
90005a50:	d106      	bne.n	90005a60 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005a52:	693b      	ldr	r3, [r7, #16]
90005a54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005a58:	461a      	mov	r2, r3
90005a5a:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005a5e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005a60:	6878      	ldr	r0, [r7, #4]
90005a62:	f7fb fb6b 	bl	9000113c <HAL_HCD_PortEnabled_Callback>
90005a66:	e002      	b.n	90005a6e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005a68:	6878      	ldr	r0, [r7, #4]
90005a6a:	f7fb fb75 	bl	90001158 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005a6e:	68fb      	ldr	r3, [r7, #12]
90005a70:	f003 0320 	and.w	r3, r3, #32
90005a74:	2b20      	cmp	r3, #32
90005a76:	d103      	bne.n	90005a80 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005a78:	68bb      	ldr	r3, [r7, #8]
90005a7a:	f043 0320 	orr.w	r3, r3, #32
90005a7e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005a80:	693b      	ldr	r3, [r7, #16]
90005a82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a86:	461a      	mov	r2, r3
90005a88:	68bb      	ldr	r3, [r7, #8]
90005a8a:	6013      	str	r3, [r2, #0]
}
90005a8c:	bf00      	nop
90005a8e:	3718      	adds	r7, #24
90005a90:	46bd      	mov	sp, r7
90005a92:	bd80      	pop	{r7, pc}

90005a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005a94:	b580      	push	{r7, lr}
90005a96:	b082      	sub	sp, #8
90005a98:	af00      	add	r7, sp, #0
90005a9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005a9c:	687b      	ldr	r3, [r7, #4]
90005a9e:	2b00      	cmp	r3, #0
90005aa0:	d101      	bne.n	90005aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005aa2:	2301      	movs	r3, #1
90005aa4:	e08b      	b.n	90005bbe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005aa6:	687b      	ldr	r3, [r7, #4]
90005aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005aac:	b2db      	uxtb	r3, r3
90005aae:	2b00      	cmp	r3, #0
90005ab0:	d106      	bne.n	90005ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005ab2:	687b      	ldr	r3, [r7, #4]
90005ab4:	2200      	movs	r2, #0
90005ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005aba:	6878      	ldr	r0, [r7, #4]
90005abc:	f000 f886 	bl	90005bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005ac0:	687b      	ldr	r3, [r7, #4]
90005ac2:	2224      	movs	r2, #36	@ 0x24
90005ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005ac8:	687b      	ldr	r3, [r7, #4]
90005aca:	681b      	ldr	r3, [r3, #0]
90005acc:	681a      	ldr	r2, [r3, #0]
90005ace:	687b      	ldr	r3, [r7, #4]
90005ad0:	681b      	ldr	r3, [r3, #0]
90005ad2:	f022 0201 	bic.w	r2, r2, #1
90005ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005ad8:	687b      	ldr	r3, [r7, #4]
90005ada:	685a      	ldr	r2, [r3, #4]
90005adc:	687b      	ldr	r3, [r7, #4]
90005ade:	681b      	ldr	r3, [r3, #0]
90005ae0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005ae4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005ae6:	687b      	ldr	r3, [r7, #4]
90005ae8:	681b      	ldr	r3, [r3, #0]
90005aea:	689a      	ldr	r2, [r3, #8]
90005aec:	687b      	ldr	r3, [r7, #4]
90005aee:	681b      	ldr	r3, [r3, #0]
90005af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005af4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005af6:	687b      	ldr	r3, [r7, #4]
90005af8:	68db      	ldr	r3, [r3, #12]
90005afa:	2b01      	cmp	r3, #1
90005afc:	d107      	bne.n	90005b0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005afe:	687b      	ldr	r3, [r7, #4]
90005b00:	689a      	ldr	r2, [r3, #8]
90005b02:	687b      	ldr	r3, [r7, #4]
90005b04:	681b      	ldr	r3, [r3, #0]
90005b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005b0a:	609a      	str	r2, [r3, #8]
90005b0c:	e006      	b.n	90005b1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005b0e:	687b      	ldr	r3, [r7, #4]
90005b10:	689a      	ldr	r2, [r3, #8]
90005b12:	687b      	ldr	r3, [r7, #4]
90005b14:	681b      	ldr	r3, [r3, #0]
90005b16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005b1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005b1c:	687b      	ldr	r3, [r7, #4]
90005b1e:	68db      	ldr	r3, [r3, #12]
90005b20:	2b02      	cmp	r3, #2
90005b22:	d108      	bne.n	90005b36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005b24:	687b      	ldr	r3, [r7, #4]
90005b26:	681b      	ldr	r3, [r3, #0]
90005b28:	685a      	ldr	r2, [r3, #4]
90005b2a:	687b      	ldr	r3, [r7, #4]
90005b2c:	681b      	ldr	r3, [r3, #0]
90005b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005b32:	605a      	str	r2, [r3, #4]
90005b34:	e007      	b.n	90005b46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005b36:	687b      	ldr	r3, [r7, #4]
90005b38:	681b      	ldr	r3, [r3, #0]
90005b3a:	685a      	ldr	r2, [r3, #4]
90005b3c:	687b      	ldr	r3, [r7, #4]
90005b3e:	681b      	ldr	r3, [r3, #0]
90005b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005b44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005b46:	687b      	ldr	r3, [r7, #4]
90005b48:	681b      	ldr	r3, [r3, #0]
90005b4a:	6859      	ldr	r1, [r3, #4]
90005b4c:	687b      	ldr	r3, [r7, #4]
90005b4e:	681a      	ldr	r2, [r3, #0]
90005b50:	4b1d      	ldr	r3, [pc, #116]	@ (90005bc8 <HAL_I2C_Init+0x134>)
90005b52:	430b      	orrs	r3, r1
90005b54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005b56:	687b      	ldr	r3, [r7, #4]
90005b58:	681b      	ldr	r3, [r3, #0]
90005b5a:	68da      	ldr	r2, [r3, #12]
90005b5c:	687b      	ldr	r3, [r7, #4]
90005b5e:	681b      	ldr	r3, [r3, #0]
90005b60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005b64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005b66:	687b      	ldr	r3, [r7, #4]
90005b68:	691a      	ldr	r2, [r3, #16]
90005b6a:	687b      	ldr	r3, [r7, #4]
90005b6c:	695b      	ldr	r3, [r3, #20]
90005b6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005b72:	687b      	ldr	r3, [r7, #4]
90005b74:	699b      	ldr	r3, [r3, #24]
90005b76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005b78:	687b      	ldr	r3, [r7, #4]
90005b7a:	681b      	ldr	r3, [r3, #0]
90005b7c:	430a      	orrs	r2, r1
90005b7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005b80:	687b      	ldr	r3, [r7, #4]
90005b82:	69d9      	ldr	r1, [r3, #28]
90005b84:	687b      	ldr	r3, [r7, #4]
90005b86:	6a1a      	ldr	r2, [r3, #32]
90005b88:	687b      	ldr	r3, [r7, #4]
90005b8a:	681b      	ldr	r3, [r3, #0]
90005b8c:	430a      	orrs	r2, r1
90005b8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005b90:	687b      	ldr	r3, [r7, #4]
90005b92:	681b      	ldr	r3, [r3, #0]
90005b94:	681a      	ldr	r2, [r3, #0]
90005b96:	687b      	ldr	r3, [r7, #4]
90005b98:	681b      	ldr	r3, [r3, #0]
90005b9a:	f042 0201 	orr.w	r2, r2, #1
90005b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005ba0:	687b      	ldr	r3, [r7, #4]
90005ba2:	2200      	movs	r2, #0
90005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005ba6:	687b      	ldr	r3, [r7, #4]
90005ba8:	2220      	movs	r2, #32
90005baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005bae:	687b      	ldr	r3, [r7, #4]
90005bb0:	2200      	movs	r2, #0
90005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005bb4:	687b      	ldr	r3, [r7, #4]
90005bb6:	2200      	movs	r2, #0
90005bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005bbc:	2300      	movs	r3, #0
}
90005bbe:	4618      	mov	r0, r3
90005bc0:	3708      	adds	r7, #8
90005bc2:	46bd      	mov	sp, r7
90005bc4:	bd80      	pop	{r7, pc}
90005bc6:	bf00      	nop
90005bc8:	02008000 	.word	0x02008000

90005bcc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005bcc:	b480      	push	{r7}
90005bce:	b083      	sub	sp, #12
90005bd0:	af00      	add	r7, sp, #0
90005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005bd4:	bf00      	nop
90005bd6:	370c      	adds	r7, #12
90005bd8:	46bd      	mov	sp, r7
90005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
90005bde:	4770      	bx	lr

90005be0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005be0:	b580      	push	{r7, lr}
90005be2:	b088      	sub	sp, #32
90005be4:	af02      	add	r7, sp, #8
90005be6:	60f8      	str	r0, [r7, #12]
90005be8:	4608      	mov	r0, r1
90005bea:	4611      	mov	r1, r2
90005bec:	461a      	mov	r2, r3
90005bee:	4603      	mov	r3, r0
90005bf0:	817b      	strh	r3, [r7, #10]
90005bf2:	460b      	mov	r3, r1
90005bf4:	813b      	strh	r3, [r7, #8]
90005bf6:	4613      	mov	r3, r2
90005bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005bfa:	68fb      	ldr	r3, [r7, #12]
90005bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005c00:	b2db      	uxtb	r3, r3
90005c02:	2b20      	cmp	r3, #32
90005c04:	f040 80fd 	bne.w	90005e02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005c08:	6a3b      	ldr	r3, [r7, #32]
90005c0a:	2b00      	cmp	r3, #0
90005c0c:	d002      	beq.n	90005c14 <HAL_I2C_Mem_Read+0x34>
90005c0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005c10:	2b00      	cmp	r3, #0
90005c12:	d105      	bne.n	90005c20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005c14:	68fb      	ldr	r3, [r7, #12]
90005c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005c1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005c1c:	2301      	movs	r3, #1
90005c1e:	e0f1      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005c20:	68fb      	ldr	r3, [r7, #12]
90005c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005c26:	2b01      	cmp	r3, #1
90005c28:	d101      	bne.n	90005c2e <HAL_I2C_Mem_Read+0x4e>
90005c2a:	2302      	movs	r3, #2
90005c2c:	e0ea      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
90005c2e:	68fb      	ldr	r3, [r7, #12]
90005c30:	2201      	movs	r2, #1
90005c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005c36:	f7fd fafb 	bl	90003230 <HAL_GetTick>
90005c3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005c3c:	697b      	ldr	r3, [r7, #20]
90005c3e:	9300      	str	r3, [sp, #0]
90005c40:	2319      	movs	r3, #25
90005c42:	2201      	movs	r2, #1
90005c44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005c48:	68f8      	ldr	r0, [r7, #12]
90005c4a:	f000 f975 	bl	90005f38 <I2C_WaitOnFlagUntilTimeout>
90005c4e:	4603      	mov	r3, r0
90005c50:	2b00      	cmp	r3, #0
90005c52:	d001      	beq.n	90005c58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005c54:	2301      	movs	r3, #1
90005c56:	e0d5      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005c58:	68fb      	ldr	r3, [r7, #12]
90005c5a:	2222      	movs	r2, #34	@ 0x22
90005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005c60:	68fb      	ldr	r3, [r7, #12]
90005c62:	2240      	movs	r2, #64	@ 0x40
90005c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005c68:	68fb      	ldr	r3, [r7, #12]
90005c6a:	2200      	movs	r2, #0
90005c6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005c6e:	68fb      	ldr	r3, [r7, #12]
90005c70:	6a3a      	ldr	r2, [r7, #32]
90005c72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005c74:	68fb      	ldr	r3, [r7, #12]
90005c76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005c7a:	68fb      	ldr	r3, [r7, #12]
90005c7c:	2200      	movs	r2, #0
90005c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005c80:	88f8      	ldrh	r0, [r7, #6]
90005c82:	893a      	ldrh	r2, [r7, #8]
90005c84:	8979      	ldrh	r1, [r7, #10]
90005c86:	697b      	ldr	r3, [r7, #20]
90005c88:	9301      	str	r3, [sp, #4]
90005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005c8c:	9300      	str	r3, [sp, #0]
90005c8e:	4603      	mov	r3, r0
90005c90:	68f8      	ldr	r0, [r7, #12]
90005c92:	f000 f8d9 	bl	90005e48 <I2C_RequestMemoryRead>
90005c96:	4603      	mov	r3, r0
90005c98:	2b00      	cmp	r3, #0
90005c9a:	d005      	beq.n	90005ca8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005c9c:	68fb      	ldr	r3, [r7, #12]
90005c9e:	2200      	movs	r2, #0
90005ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005ca4:	2301      	movs	r3, #1
90005ca6:	e0ad      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005ca8:	68fb      	ldr	r3, [r7, #12]
90005caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005cac:	b29b      	uxth	r3, r3
90005cae:	2bff      	cmp	r3, #255	@ 0xff
90005cb0:	d90e      	bls.n	90005cd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005cb2:	68fb      	ldr	r3, [r7, #12]
90005cb4:	22ff      	movs	r2, #255	@ 0xff
90005cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005cb8:	68fb      	ldr	r3, [r7, #12]
90005cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005cbc:	b2da      	uxtb	r2, r3
90005cbe:	8979      	ldrh	r1, [r7, #10]
90005cc0:	4b52      	ldr	r3, [pc, #328]	@ (90005e0c <HAL_I2C_Mem_Read+0x22c>)
90005cc2:	9300      	str	r3, [sp, #0]
90005cc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005cc8:	68f8      	ldr	r0, [r7, #12]
90005cca:	f000 faf9 	bl	900062c0 <I2C_TransferConfig>
90005cce:	e00f      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005cd0:	68fb      	ldr	r3, [r7, #12]
90005cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005cd4:	b29a      	uxth	r2, r3
90005cd6:	68fb      	ldr	r3, [r7, #12]
90005cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005cda:	68fb      	ldr	r3, [r7, #12]
90005cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005cde:	b2da      	uxtb	r2, r3
90005ce0:	8979      	ldrh	r1, [r7, #10]
90005ce2:	4b4a      	ldr	r3, [pc, #296]	@ (90005e0c <HAL_I2C_Mem_Read+0x22c>)
90005ce4:	9300      	str	r3, [sp, #0]
90005ce6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005cea:	68f8      	ldr	r0, [r7, #12]
90005cec:	f000 fae8 	bl	900062c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005cf0:	697b      	ldr	r3, [r7, #20]
90005cf2:	9300      	str	r3, [sp, #0]
90005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005cf6:	2200      	movs	r2, #0
90005cf8:	2104      	movs	r1, #4
90005cfa:	68f8      	ldr	r0, [r7, #12]
90005cfc:	f000 f91c 	bl	90005f38 <I2C_WaitOnFlagUntilTimeout>
90005d00:	4603      	mov	r3, r0
90005d02:	2b00      	cmp	r3, #0
90005d04:	d001      	beq.n	90005d0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005d06:	2301      	movs	r3, #1
90005d08:	e07c      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005d0a:	68fb      	ldr	r3, [r7, #12]
90005d0c:	681b      	ldr	r3, [r3, #0]
90005d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005d10:	68fb      	ldr	r3, [r7, #12]
90005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005d14:	b2d2      	uxtb	r2, r2
90005d16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005d18:	68fb      	ldr	r3, [r7, #12]
90005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005d1c:	1c5a      	adds	r2, r3, #1
90005d1e:	68fb      	ldr	r3, [r7, #12]
90005d20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005d22:	68fb      	ldr	r3, [r7, #12]
90005d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d26:	3b01      	subs	r3, #1
90005d28:	b29a      	uxth	r2, r3
90005d2a:	68fb      	ldr	r3, [r7, #12]
90005d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005d2e:	68fb      	ldr	r3, [r7, #12]
90005d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d32:	b29b      	uxth	r3, r3
90005d34:	3b01      	subs	r3, #1
90005d36:	b29a      	uxth	r2, r3
90005d38:	68fb      	ldr	r3, [r7, #12]
90005d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005d3c:	68fb      	ldr	r3, [r7, #12]
90005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d40:	b29b      	uxth	r3, r3
90005d42:	2b00      	cmp	r3, #0
90005d44:	d034      	beq.n	90005db0 <HAL_I2C_Mem_Read+0x1d0>
90005d46:	68fb      	ldr	r3, [r7, #12]
90005d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d4a:	2b00      	cmp	r3, #0
90005d4c:	d130      	bne.n	90005db0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005d4e:	697b      	ldr	r3, [r7, #20]
90005d50:	9300      	str	r3, [sp, #0]
90005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d54:	2200      	movs	r2, #0
90005d56:	2180      	movs	r1, #128	@ 0x80
90005d58:	68f8      	ldr	r0, [r7, #12]
90005d5a:	f000 f8ed 	bl	90005f38 <I2C_WaitOnFlagUntilTimeout>
90005d5e:	4603      	mov	r3, r0
90005d60:	2b00      	cmp	r3, #0
90005d62:	d001      	beq.n	90005d68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005d64:	2301      	movs	r3, #1
90005d66:	e04d      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005d68:	68fb      	ldr	r3, [r7, #12]
90005d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d6c:	b29b      	uxth	r3, r3
90005d6e:	2bff      	cmp	r3, #255	@ 0xff
90005d70:	d90e      	bls.n	90005d90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005d72:	68fb      	ldr	r3, [r7, #12]
90005d74:	22ff      	movs	r2, #255	@ 0xff
90005d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005d78:	68fb      	ldr	r3, [r7, #12]
90005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d7c:	b2da      	uxtb	r2, r3
90005d7e:	8979      	ldrh	r1, [r7, #10]
90005d80:	2300      	movs	r3, #0
90005d82:	9300      	str	r3, [sp, #0]
90005d84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005d88:	68f8      	ldr	r0, [r7, #12]
90005d8a:	f000 fa99 	bl	900062c0 <I2C_TransferConfig>
90005d8e:	e00f      	b.n	90005db0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005d90:	68fb      	ldr	r3, [r7, #12]
90005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d94:	b29a      	uxth	r2, r3
90005d96:	68fb      	ldr	r3, [r7, #12]
90005d98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005d9a:	68fb      	ldr	r3, [r7, #12]
90005d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d9e:	b2da      	uxtb	r2, r3
90005da0:	8979      	ldrh	r1, [r7, #10]
90005da2:	2300      	movs	r3, #0
90005da4:	9300      	str	r3, [sp, #0]
90005da6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005daa:	68f8      	ldr	r0, [r7, #12]
90005dac:	f000 fa88 	bl	900062c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005db0:	68fb      	ldr	r3, [r7, #12]
90005db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005db4:	b29b      	uxth	r3, r3
90005db6:	2b00      	cmp	r3, #0
90005db8:	d19a      	bne.n	90005cf0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005dba:	697a      	ldr	r2, [r7, #20]
90005dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005dbe:	68f8      	ldr	r0, [r7, #12]
90005dc0:	f000 f95a 	bl	90006078 <I2C_WaitOnSTOPFlagUntilTimeout>
90005dc4:	4603      	mov	r3, r0
90005dc6:	2b00      	cmp	r3, #0
90005dc8:	d001      	beq.n	90005dce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005dca:	2301      	movs	r3, #1
90005dcc:	e01a      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005dce:	68fb      	ldr	r3, [r7, #12]
90005dd0:	681b      	ldr	r3, [r3, #0]
90005dd2:	2220      	movs	r2, #32
90005dd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005dd6:	68fb      	ldr	r3, [r7, #12]
90005dd8:	681b      	ldr	r3, [r3, #0]
90005dda:	6859      	ldr	r1, [r3, #4]
90005ddc:	68fb      	ldr	r3, [r7, #12]
90005dde:	681a      	ldr	r2, [r3, #0]
90005de0:	4b0b      	ldr	r3, [pc, #44]	@ (90005e10 <HAL_I2C_Mem_Read+0x230>)
90005de2:	400b      	ands	r3, r1
90005de4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005de6:	68fb      	ldr	r3, [r7, #12]
90005de8:	2220      	movs	r2, #32
90005dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005dee:	68fb      	ldr	r3, [r7, #12]
90005df0:	2200      	movs	r2, #0
90005df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005df6:	68fb      	ldr	r3, [r7, #12]
90005df8:	2200      	movs	r2, #0
90005dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005dfe:	2300      	movs	r3, #0
90005e00:	e000      	b.n	90005e04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005e02:	2302      	movs	r3, #2
  }
}
90005e04:	4618      	mov	r0, r3
90005e06:	3718      	adds	r7, #24
90005e08:	46bd      	mov	sp, r7
90005e0a:	bd80      	pop	{r7, pc}
90005e0c:	80002400 	.word	0x80002400
90005e10:	fe00e800 	.word	0xfe00e800

90005e14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005e14:	b480      	push	{r7}
90005e16:	b083      	sub	sp, #12
90005e18:	af00      	add	r7, sp, #0
90005e1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005e1c:	687b      	ldr	r3, [r7, #4]
90005e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005e22:	b2db      	uxtb	r3, r3
}
90005e24:	4618      	mov	r0, r3
90005e26:	370c      	adds	r7, #12
90005e28:	46bd      	mov	sp, r7
90005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005e2e:	4770      	bx	lr

90005e30 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005e30:	b480      	push	{r7}
90005e32:	b083      	sub	sp, #12
90005e34:	af00      	add	r7, sp, #0
90005e36:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005e38:	687b      	ldr	r3, [r7, #4]
90005e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005e3c:	4618      	mov	r0, r3
90005e3e:	370c      	adds	r7, #12
90005e40:	46bd      	mov	sp, r7
90005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
90005e46:	4770      	bx	lr

90005e48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005e48:	b580      	push	{r7, lr}
90005e4a:	b086      	sub	sp, #24
90005e4c:	af02      	add	r7, sp, #8
90005e4e:	60f8      	str	r0, [r7, #12]
90005e50:	4608      	mov	r0, r1
90005e52:	4611      	mov	r1, r2
90005e54:	461a      	mov	r2, r3
90005e56:	4603      	mov	r3, r0
90005e58:	817b      	strh	r3, [r7, #10]
90005e5a:	460b      	mov	r3, r1
90005e5c:	813b      	strh	r3, [r7, #8]
90005e5e:	4613      	mov	r3, r2
90005e60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005e62:	88fb      	ldrh	r3, [r7, #6]
90005e64:	b2da      	uxtb	r2, r3
90005e66:	8979      	ldrh	r1, [r7, #10]
90005e68:	4b20      	ldr	r3, [pc, #128]	@ (90005eec <I2C_RequestMemoryRead+0xa4>)
90005e6a:	9300      	str	r3, [sp, #0]
90005e6c:	2300      	movs	r3, #0
90005e6e:	68f8      	ldr	r0, [r7, #12]
90005e70:	f000 fa26 	bl	900062c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005e74:	69fa      	ldr	r2, [r7, #28]
90005e76:	69b9      	ldr	r1, [r7, #24]
90005e78:	68f8      	ldr	r0, [r7, #12]
90005e7a:	f000 f8b6 	bl	90005fea <I2C_WaitOnTXISFlagUntilTimeout>
90005e7e:	4603      	mov	r3, r0
90005e80:	2b00      	cmp	r3, #0
90005e82:	d001      	beq.n	90005e88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005e84:	2301      	movs	r3, #1
90005e86:	e02c      	b.n	90005ee2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005e88:	88fb      	ldrh	r3, [r7, #6]
90005e8a:	2b01      	cmp	r3, #1
90005e8c:	d105      	bne.n	90005e9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005e8e:	893b      	ldrh	r3, [r7, #8]
90005e90:	b2da      	uxtb	r2, r3
90005e92:	68fb      	ldr	r3, [r7, #12]
90005e94:	681b      	ldr	r3, [r3, #0]
90005e96:	629a      	str	r2, [r3, #40]	@ 0x28
90005e98:	e015      	b.n	90005ec6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005e9a:	893b      	ldrh	r3, [r7, #8]
90005e9c:	0a1b      	lsrs	r3, r3, #8
90005e9e:	b29b      	uxth	r3, r3
90005ea0:	b2da      	uxtb	r2, r3
90005ea2:	68fb      	ldr	r3, [r7, #12]
90005ea4:	681b      	ldr	r3, [r3, #0]
90005ea6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005ea8:	69fa      	ldr	r2, [r7, #28]
90005eaa:	69b9      	ldr	r1, [r7, #24]
90005eac:	68f8      	ldr	r0, [r7, #12]
90005eae:	f000 f89c 	bl	90005fea <I2C_WaitOnTXISFlagUntilTimeout>
90005eb2:	4603      	mov	r3, r0
90005eb4:	2b00      	cmp	r3, #0
90005eb6:	d001      	beq.n	90005ebc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005eb8:	2301      	movs	r3, #1
90005eba:	e012      	b.n	90005ee2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005ebc:	893b      	ldrh	r3, [r7, #8]
90005ebe:	b2da      	uxtb	r2, r3
90005ec0:	68fb      	ldr	r3, [r7, #12]
90005ec2:	681b      	ldr	r3, [r3, #0]
90005ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005ec6:	69fb      	ldr	r3, [r7, #28]
90005ec8:	9300      	str	r3, [sp, #0]
90005eca:	69bb      	ldr	r3, [r7, #24]
90005ecc:	2200      	movs	r2, #0
90005ece:	2140      	movs	r1, #64	@ 0x40
90005ed0:	68f8      	ldr	r0, [r7, #12]
90005ed2:	f000 f831 	bl	90005f38 <I2C_WaitOnFlagUntilTimeout>
90005ed6:	4603      	mov	r3, r0
90005ed8:	2b00      	cmp	r3, #0
90005eda:	d001      	beq.n	90005ee0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005edc:	2301      	movs	r3, #1
90005ede:	e000      	b.n	90005ee2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005ee0:	2300      	movs	r3, #0
}
90005ee2:	4618      	mov	r0, r3
90005ee4:	3710      	adds	r7, #16
90005ee6:	46bd      	mov	sp, r7
90005ee8:	bd80      	pop	{r7, pc}
90005eea:	bf00      	nop
90005eec:	80002000 	.word	0x80002000

90005ef0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005ef0:	b480      	push	{r7}
90005ef2:	b083      	sub	sp, #12
90005ef4:	af00      	add	r7, sp, #0
90005ef6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005ef8:	687b      	ldr	r3, [r7, #4]
90005efa:	681b      	ldr	r3, [r3, #0]
90005efc:	699b      	ldr	r3, [r3, #24]
90005efe:	f003 0302 	and.w	r3, r3, #2
90005f02:	2b02      	cmp	r3, #2
90005f04:	d103      	bne.n	90005f0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005f06:	687b      	ldr	r3, [r7, #4]
90005f08:	681b      	ldr	r3, [r3, #0]
90005f0a:	2200      	movs	r2, #0
90005f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005f0e:	687b      	ldr	r3, [r7, #4]
90005f10:	681b      	ldr	r3, [r3, #0]
90005f12:	699b      	ldr	r3, [r3, #24]
90005f14:	f003 0301 	and.w	r3, r3, #1
90005f18:	2b01      	cmp	r3, #1
90005f1a:	d007      	beq.n	90005f2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005f1c:	687b      	ldr	r3, [r7, #4]
90005f1e:	681b      	ldr	r3, [r3, #0]
90005f20:	699a      	ldr	r2, [r3, #24]
90005f22:	687b      	ldr	r3, [r7, #4]
90005f24:	681b      	ldr	r3, [r3, #0]
90005f26:	f042 0201 	orr.w	r2, r2, #1
90005f2a:	619a      	str	r2, [r3, #24]
  }
}
90005f2c:	bf00      	nop
90005f2e:	370c      	adds	r7, #12
90005f30:	46bd      	mov	sp, r7
90005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
90005f36:	4770      	bx	lr

90005f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005f38:	b580      	push	{r7, lr}
90005f3a:	b084      	sub	sp, #16
90005f3c:	af00      	add	r7, sp, #0
90005f3e:	60f8      	str	r0, [r7, #12]
90005f40:	60b9      	str	r1, [r7, #8]
90005f42:	603b      	str	r3, [r7, #0]
90005f44:	4613      	mov	r3, r2
90005f46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005f48:	e03b      	b.n	90005fc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005f4a:	69ba      	ldr	r2, [r7, #24]
90005f4c:	6839      	ldr	r1, [r7, #0]
90005f4e:	68f8      	ldr	r0, [r7, #12]
90005f50:	f000 f8d6 	bl	90006100 <I2C_IsErrorOccurred>
90005f54:	4603      	mov	r3, r0
90005f56:	2b00      	cmp	r3, #0
90005f58:	d001      	beq.n	90005f5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90005f5a:	2301      	movs	r3, #1
90005f5c:	e041      	b.n	90005fe2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005f5e:	683b      	ldr	r3, [r7, #0]
90005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
90005f64:	d02d      	beq.n	90005fc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005f66:	f7fd f963 	bl	90003230 <HAL_GetTick>
90005f6a:	4602      	mov	r2, r0
90005f6c:	69bb      	ldr	r3, [r7, #24]
90005f6e:	1ad3      	subs	r3, r2, r3
90005f70:	683a      	ldr	r2, [r7, #0]
90005f72:	429a      	cmp	r2, r3
90005f74:	d302      	bcc.n	90005f7c <I2C_WaitOnFlagUntilTimeout+0x44>
90005f76:	683b      	ldr	r3, [r7, #0]
90005f78:	2b00      	cmp	r3, #0
90005f7a:	d122      	bne.n	90005fc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005f7c:	68fb      	ldr	r3, [r7, #12]
90005f7e:	681b      	ldr	r3, [r3, #0]
90005f80:	699a      	ldr	r2, [r3, #24]
90005f82:	68bb      	ldr	r3, [r7, #8]
90005f84:	4013      	ands	r3, r2
90005f86:	68ba      	ldr	r2, [r7, #8]
90005f88:	429a      	cmp	r2, r3
90005f8a:	bf0c      	ite	eq
90005f8c:	2301      	moveq	r3, #1
90005f8e:	2300      	movne	r3, #0
90005f90:	b2db      	uxtb	r3, r3
90005f92:	461a      	mov	r2, r3
90005f94:	79fb      	ldrb	r3, [r7, #7]
90005f96:	429a      	cmp	r2, r3
90005f98:	d113      	bne.n	90005fc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005f9a:	68fb      	ldr	r3, [r7, #12]
90005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005f9e:	f043 0220 	orr.w	r2, r3, #32
90005fa2:	68fb      	ldr	r3, [r7, #12]
90005fa4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005fa6:	68fb      	ldr	r3, [r7, #12]
90005fa8:	2220      	movs	r2, #32
90005faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005fae:	68fb      	ldr	r3, [r7, #12]
90005fb0:	2200      	movs	r2, #0
90005fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005fb6:	68fb      	ldr	r3, [r7, #12]
90005fb8:	2200      	movs	r2, #0
90005fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90005fbe:	2301      	movs	r3, #1
90005fc0:	e00f      	b.n	90005fe2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005fc2:	68fb      	ldr	r3, [r7, #12]
90005fc4:	681b      	ldr	r3, [r3, #0]
90005fc6:	699a      	ldr	r2, [r3, #24]
90005fc8:	68bb      	ldr	r3, [r7, #8]
90005fca:	4013      	ands	r3, r2
90005fcc:	68ba      	ldr	r2, [r7, #8]
90005fce:	429a      	cmp	r2, r3
90005fd0:	bf0c      	ite	eq
90005fd2:	2301      	moveq	r3, #1
90005fd4:	2300      	movne	r3, #0
90005fd6:	b2db      	uxtb	r3, r3
90005fd8:	461a      	mov	r2, r3
90005fda:	79fb      	ldrb	r3, [r7, #7]
90005fdc:	429a      	cmp	r2, r3
90005fde:	d0b4      	beq.n	90005f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005fe0:	2300      	movs	r3, #0
}
90005fe2:	4618      	mov	r0, r3
90005fe4:	3710      	adds	r7, #16
90005fe6:	46bd      	mov	sp, r7
90005fe8:	bd80      	pop	{r7, pc}

90005fea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005fea:	b580      	push	{r7, lr}
90005fec:	b084      	sub	sp, #16
90005fee:	af00      	add	r7, sp, #0
90005ff0:	60f8      	str	r0, [r7, #12]
90005ff2:	60b9      	str	r1, [r7, #8]
90005ff4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005ff6:	e033      	b.n	90006060 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005ff8:	687a      	ldr	r2, [r7, #4]
90005ffa:	68b9      	ldr	r1, [r7, #8]
90005ffc:	68f8      	ldr	r0, [r7, #12]
90005ffe:	f000 f87f 	bl	90006100 <I2C_IsErrorOccurred>
90006002:	4603      	mov	r3, r0
90006004:	2b00      	cmp	r3, #0
90006006:	d001      	beq.n	9000600c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006008:	2301      	movs	r3, #1
9000600a:	e031      	b.n	90006070 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000600c:	68bb      	ldr	r3, [r7, #8]
9000600e:	f1b3 3fff 	cmp.w	r3, #4294967295
90006012:	d025      	beq.n	90006060 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006014:	f7fd f90c 	bl	90003230 <HAL_GetTick>
90006018:	4602      	mov	r2, r0
9000601a:	687b      	ldr	r3, [r7, #4]
9000601c:	1ad3      	subs	r3, r2, r3
9000601e:	68ba      	ldr	r2, [r7, #8]
90006020:	429a      	cmp	r2, r3
90006022:	d302      	bcc.n	9000602a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90006024:	68bb      	ldr	r3, [r7, #8]
90006026:	2b00      	cmp	r3, #0
90006028:	d11a      	bne.n	90006060 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000602a:	68fb      	ldr	r3, [r7, #12]
9000602c:	681b      	ldr	r3, [r3, #0]
9000602e:	699b      	ldr	r3, [r3, #24]
90006030:	f003 0302 	and.w	r3, r3, #2
90006034:	2b02      	cmp	r3, #2
90006036:	d013      	beq.n	90006060 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006038:	68fb      	ldr	r3, [r7, #12]
9000603a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000603c:	f043 0220 	orr.w	r2, r3, #32
90006040:	68fb      	ldr	r3, [r7, #12]
90006042:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006044:	68fb      	ldr	r3, [r7, #12]
90006046:	2220      	movs	r2, #32
90006048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000604c:	68fb      	ldr	r3, [r7, #12]
9000604e:	2200      	movs	r2, #0
90006050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006054:	68fb      	ldr	r3, [r7, #12]
90006056:	2200      	movs	r2, #0
90006058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
9000605c:	2301      	movs	r3, #1
9000605e:	e007      	b.n	90006070 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006060:	68fb      	ldr	r3, [r7, #12]
90006062:	681b      	ldr	r3, [r3, #0]
90006064:	699b      	ldr	r3, [r3, #24]
90006066:	f003 0302 	and.w	r3, r3, #2
9000606a:	2b02      	cmp	r3, #2
9000606c:	d1c4      	bne.n	90005ff8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000606e:	2300      	movs	r3, #0
}
90006070:	4618      	mov	r0, r3
90006072:	3710      	adds	r7, #16
90006074:	46bd      	mov	sp, r7
90006076:	bd80      	pop	{r7, pc}

90006078 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006078:	b580      	push	{r7, lr}
9000607a:	b084      	sub	sp, #16
9000607c:	af00      	add	r7, sp, #0
9000607e:	60f8      	str	r0, [r7, #12]
90006080:	60b9      	str	r1, [r7, #8]
90006082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006084:	e02f      	b.n	900060e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006086:	687a      	ldr	r2, [r7, #4]
90006088:	68b9      	ldr	r1, [r7, #8]
9000608a:	68f8      	ldr	r0, [r7, #12]
9000608c:	f000 f838 	bl	90006100 <I2C_IsErrorOccurred>
90006090:	4603      	mov	r3, r0
90006092:	2b00      	cmp	r3, #0
90006094:	d001      	beq.n	9000609a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006096:	2301      	movs	r3, #1
90006098:	e02d      	b.n	900060f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000609a:	f7fd f8c9 	bl	90003230 <HAL_GetTick>
9000609e:	4602      	mov	r2, r0
900060a0:	687b      	ldr	r3, [r7, #4]
900060a2:	1ad3      	subs	r3, r2, r3
900060a4:	68ba      	ldr	r2, [r7, #8]
900060a6:	429a      	cmp	r2, r3
900060a8:	d302      	bcc.n	900060b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
900060aa:	68bb      	ldr	r3, [r7, #8]
900060ac:	2b00      	cmp	r3, #0
900060ae:	d11a      	bne.n	900060e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900060b0:	68fb      	ldr	r3, [r7, #12]
900060b2:	681b      	ldr	r3, [r3, #0]
900060b4:	699b      	ldr	r3, [r3, #24]
900060b6:	f003 0320 	and.w	r3, r3, #32
900060ba:	2b20      	cmp	r3, #32
900060bc:	d013      	beq.n	900060e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900060be:	68fb      	ldr	r3, [r7, #12]
900060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900060c2:	f043 0220 	orr.w	r2, r3, #32
900060c6:	68fb      	ldr	r3, [r7, #12]
900060c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
900060ca:	68fb      	ldr	r3, [r7, #12]
900060cc:	2220      	movs	r2, #32
900060ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
900060d2:	68fb      	ldr	r3, [r7, #12]
900060d4:	2200      	movs	r2, #0
900060d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
900060da:	68fb      	ldr	r3, [r7, #12]
900060dc:	2200      	movs	r2, #0
900060de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
900060e2:	2301      	movs	r3, #1
900060e4:	e007      	b.n	900060f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900060e6:	68fb      	ldr	r3, [r7, #12]
900060e8:	681b      	ldr	r3, [r3, #0]
900060ea:	699b      	ldr	r3, [r3, #24]
900060ec:	f003 0320 	and.w	r3, r3, #32
900060f0:	2b20      	cmp	r3, #32
900060f2:	d1c8      	bne.n	90006086 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
900060f4:	2300      	movs	r3, #0
}
900060f6:	4618      	mov	r0, r3
900060f8:	3710      	adds	r7, #16
900060fa:	46bd      	mov	sp, r7
900060fc:	bd80      	pop	{r7, pc}
	...

90006100 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90006100:	b580      	push	{r7, lr}
90006102:	b08a      	sub	sp, #40	@ 0x28
90006104:	af00      	add	r7, sp, #0
90006106:	60f8      	str	r0, [r7, #12]
90006108:	60b9      	str	r1, [r7, #8]
9000610a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
9000610c:	2300      	movs	r3, #0
9000610e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90006112:	68fb      	ldr	r3, [r7, #12]
90006114:	681b      	ldr	r3, [r3, #0]
90006116:	699b      	ldr	r3, [r3, #24]
90006118:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
9000611a:	2300      	movs	r3, #0
9000611c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
9000611e:	687b      	ldr	r3, [r7, #4]
90006120:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90006122:	69bb      	ldr	r3, [r7, #24]
90006124:	f003 0310 	and.w	r3, r3, #16
90006128:	2b00      	cmp	r3, #0
9000612a:	d068      	beq.n	900061fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000612c:	68fb      	ldr	r3, [r7, #12]
9000612e:	681b      	ldr	r3, [r3, #0]
90006130:	2210      	movs	r2, #16
90006132:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006134:	e049      	b.n	900061ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90006136:	68bb      	ldr	r3, [r7, #8]
90006138:	f1b3 3fff 	cmp.w	r3, #4294967295
9000613c:	d045      	beq.n	900061ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000613e:	f7fd f877 	bl	90003230 <HAL_GetTick>
90006142:	4602      	mov	r2, r0
90006144:	69fb      	ldr	r3, [r7, #28]
90006146:	1ad3      	subs	r3, r2, r3
90006148:	68ba      	ldr	r2, [r7, #8]
9000614a:	429a      	cmp	r2, r3
9000614c:	d302      	bcc.n	90006154 <I2C_IsErrorOccurred+0x54>
9000614e:	68bb      	ldr	r3, [r7, #8]
90006150:	2b00      	cmp	r3, #0
90006152:	d13a      	bne.n	900061ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006154:	68fb      	ldr	r3, [r7, #12]
90006156:	681b      	ldr	r3, [r3, #0]
90006158:	685b      	ldr	r3, [r3, #4]
9000615a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000615e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90006160:	68fb      	ldr	r3, [r7, #12]
90006162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006166:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006168:	68fb      	ldr	r3, [r7, #12]
9000616a:	681b      	ldr	r3, [r3, #0]
9000616c:	699b      	ldr	r3, [r3, #24]
9000616e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90006172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006176:	d121      	bne.n	900061bc <I2C_IsErrorOccurred+0xbc>
90006178:	697b      	ldr	r3, [r7, #20]
9000617a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000617e:	d01d      	beq.n	900061bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90006180:	7cfb      	ldrb	r3, [r7, #19]
90006182:	2b20      	cmp	r3, #32
90006184:	d01a      	beq.n	900061bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006186:	68fb      	ldr	r3, [r7, #12]
90006188:	681b      	ldr	r3, [r3, #0]
9000618a:	685a      	ldr	r2, [r3, #4]
9000618c:	68fb      	ldr	r3, [r7, #12]
9000618e:	681b      	ldr	r3, [r3, #0]
90006190:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006194:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006196:	f7fd f84b 	bl	90003230 <HAL_GetTick>
9000619a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000619c:	e00e      	b.n	900061bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000619e:	f7fd f847 	bl	90003230 <HAL_GetTick>
900061a2:	4602      	mov	r2, r0
900061a4:	69fb      	ldr	r3, [r7, #28]
900061a6:	1ad3      	subs	r3, r2, r3
900061a8:	2b19      	cmp	r3, #25
900061aa:	d907      	bls.n	900061bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900061ac:	6a3b      	ldr	r3, [r7, #32]
900061ae:	f043 0320 	orr.w	r3, r3, #32
900061b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
900061b4:	2301      	movs	r3, #1
900061b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
900061ba:	e006      	b.n	900061ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900061bc:	68fb      	ldr	r3, [r7, #12]
900061be:	681b      	ldr	r3, [r3, #0]
900061c0:	699b      	ldr	r3, [r3, #24]
900061c2:	f003 0320 	and.w	r3, r3, #32
900061c6:	2b20      	cmp	r3, #32
900061c8:	d1e9      	bne.n	9000619e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900061ca:	68fb      	ldr	r3, [r7, #12]
900061cc:	681b      	ldr	r3, [r3, #0]
900061ce:	699b      	ldr	r3, [r3, #24]
900061d0:	f003 0320 	and.w	r3, r3, #32
900061d4:	2b20      	cmp	r3, #32
900061d6:	d003      	beq.n	900061e0 <I2C_IsErrorOccurred+0xe0>
900061d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900061dc:	2b00      	cmp	r3, #0
900061de:	d0aa      	beq.n	90006136 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
900061e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900061e4:	2b00      	cmp	r3, #0
900061e6:	d103      	bne.n	900061f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900061e8:	68fb      	ldr	r3, [r7, #12]
900061ea:	681b      	ldr	r3, [r3, #0]
900061ec:	2220      	movs	r2, #32
900061ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900061f0:	6a3b      	ldr	r3, [r7, #32]
900061f2:	f043 0304 	orr.w	r3, r3, #4
900061f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
900061f8:	2301      	movs	r3, #1
900061fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900061fe:	68fb      	ldr	r3, [r7, #12]
90006200:	681b      	ldr	r3, [r3, #0]
90006202:	699b      	ldr	r3, [r3, #24]
90006204:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006206:	69bb      	ldr	r3, [r7, #24]
90006208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000620c:	2b00      	cmp	r3, #0
9000620e:	d00b      	beq.n	90006228 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90006210:	6a3b      	ldr	r3, [r7, #32]
90006212:	f043 0301 	orr.w	r3, r3, #1
90006216:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006218:	68fb      	ldr	r3, [r7, #12]
9000621a:	681b      	ldr	r3, [r3, #0]
9000621c:	f44f 7280 	mov.w	r2, #256	@ 0x100
90006220:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006222:	2301      	movs	r3, #1
90006224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006228:	69bb      	ldr	r3, [r7, #24]
9000622a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000622e:	2b00      	cmp	r3, #0
90006230:	d00b      	beq.n	9000624a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
90006232:	6a3b      	ldr	r3, [r7, #32]
90006234:	f043 0308 	orr.w	r3, r3, #8
90006238:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000623a:	68fb      	ldr	r3, [r7, #12]
9000623c:	681b      	ldr	r3, [r3, #0]
9000623e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
90006242:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006244:	2301      	movs	r3, #1
90006246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000624a:	69bb      	ldr	r3, [r7, #24]
9000624c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90006250:	2b00      	cmp	r3, #0
90006252:	d00b      	beq.n	9000626c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006254:	6a3b      	ldr	r3, [r7, #32]
90006256:	f043 0302 	orr.w	r3, r3, #2
9000625a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000625c:	68fb      	ldr	r3, [r7, #12]
9000625e:	681b      	ldr	r3, [r3, #0]
90006260:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006264:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006266:	2301      	movs	r3, #1
90006268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
9000626c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006270:	2b00      	cmp	r3, #0
90006272:	d01c      	beq.n	900062ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006274:	68f8      	ldr	r0, [r7, #12]
90006276:	f7ff fe3b 	bl	90005ef0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000627a:	68fb      	ldr	r3, [r7, #12]
9000627c:	681b      	ldr	r3, [r3, #0]
9000627e:	6859      	ldr	r1, [r3, #4]
90006280:	68fb      	ldr	r3, [r7, #12]
90006282:	681a      	ldr	r2, [r3, #0]
90006284:	4b0d      	ldr	r3, [pc, #52]	@ (900062bc <I2C_IsErrorOccurred+0x1bc>)
90006286:	400b      	ands	r3, r1
90006288:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
9000628a:	68fb      	ldr	r3, [r7, #12]
9000628c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000628e:	6a3b      	ldr	r3, [r7, #32]
90006290:	431a      	orrs	r2, r3
90006292:	68fb      	ldr	r3, [r7, #12]
90006294:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006296:	68fb      	ldr	r3, [r7, #12]
90006298:	2220      	movs	r2, #32
9000629a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000629e:	68fb      	ldr	r3, [r7, #12]
900062a0:	2200      	movs	r2, #0
900062a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900062a6:	68fb      	ldr	r3, [r7, #12]
900062a8:	2200      	movs	r2, #0
900062aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
900062ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
900062b2:	4618      	mov	r0, r3
900062b4:	3728      	adds	r7, #40	@ 0x28
900062b6:	46bd      	mov	sp, r7
900062b8:	bd80      	pop	{r7, pc}
900062ba:	bf00      	nop
900062bc:	fe00e800 	.word	0xfe00e800

900062c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
900062c0:	b480      	push	{r7}
900062c2:	b087      	sub	sp, #28
900062c4:	af00      	add	r7, sp, #0
900062c6:	60f8      	str	r0, [r7, #12]
900062c8:	607b      	str	r3, [r7, #4]
900062ca:	460b      	mov	r3, r1
900062cc:	817b      	strh	r3, [r7, #10]
900062ce:	4613      	mov	r3, r2
900062d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900062d2:	897b      	ldrh	r3, [r7, #10]
900062d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900062d8:	7a7b      	ldrb	r3, [r7, #9]
900062da:	041b      	lsls	r3, r3, #16
900062dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900062e0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900062e2:	687b      	ldr	r3, [r7, #4]
900062e4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900062e6:	6a3b      	ldr	r3, [r7, #32]
900062e8:	4313      	orrs	r3, r2
900062ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
900062ee:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900062f0:	68fb      	ldr	r3, [r7, #12]
900062f2:	681b      	ldr	r3, [r3, #0]
900062f4:	685a      	ldr	r2, [r3, #4]
900062f6:	6a3b      	ldr	r3, [r7, #32]
900062f8:	0d5b      	lsrs	r3, r3, #21
900062fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900062fe:	4b08      	ldr	r3, [pc, #32]	@ (90006320 <I2C_TransferConfig+0x60>)
90006300:	430b      	orrs	r3, r1
90006302:	43db      	mvns	r3, r3
90006304:	ea02 0103 	and.w	r1, r2, r3
90006308:	68fb      	ldr	r3, [r7, #12]
9000630a:	681b      	ldr	r3, [r3, #0]
9000630c:	697a      	ldr	r2, [r7, #20]
9000630e:	430a      	orrs	r2, r1
90006310:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90006312:	bf00      	nop
90006314:	371c      	adds	r7, #28
90006316:	46bd      	mov	sp, r7
90006318:	f85d 7b04 	ldr.w	r7, [sp], #4
9000631c:	4770      	bx	lr
9000631e:	bf00      	nop
90006320:	03ff63ff 	.word	0x03ff63ff

90006324 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90006324:	b480      	push	{r7}
90006326:	b083      	sub	sp, #12
90006328:	af00      	add	r7, sp, #0
9000632a:	6078      	str	r0, [r7, #4]
9000632c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000632e:	687b      	ldr	r3, [r7, #4]
90006330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006334:	b2db      	uxtb	r3, r3
90006336:	2b20      	cmp	r3, #32
90006338:	d138      	bne.n	900063ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000633a:	687b      	ldr	r3, [r7, #4]
9000633c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006340:	2b01      	cmp	r3, #1
90006342:	d101      	bne.n	90006348 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90006344:	2302      	movs	r3, #2
90006346:	e032      	b.n	900063ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90006348:	687b      	ldr	r3, [r7, #4]
9000634a:	2201      	movs	r2, #1
9000634c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006350:	687b      	ldr	r3, [r7, #4]
90006352:	2224      	movs	r2, #36	@ 0x24
90006354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006358:	687b      	ldr	r3, [r7, #4]
9000635a:	681b      	ldr	r3, [r3, #0]
9000635c:	681a      	ldr	r2, [r3, #0]
9000635e:	687b      	ldr	r3, [r7, #4]
90006360:	681b      	ldr	r3, [r3, #0]
90006362:	f022 0201 	bic.w	r2, r2, #1
90006366:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006368:	687b      	ldr	r3, [r7, #4]
9000636a:	681b      	ldr	r3, [r3, #0]
9000636c:	681a      	ldr	r2, [r3, #0]
9000636e:	687b      	ldr	r3, [r7, #4]
90006370:	681b      	ldr	r3, [r3, #0]
90006372:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006376:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006378:	687b      	ldr	r3, [r7, #4]
9000637a:	681b      	ldr	r3, [r3, #0]
9000637c:	6819      	ldr	r1, [r3, #0]
9000637e:	687b      	ldr	r3, [r7, #4]
90006380:	681b      	ldr	r3, [r3, #0]
90006382:	683a      	ldr	r2, [r7, #0]
90006384:	430a      	orrs	r2, r1
90006386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006388:	687b      	ldr	r3, [r7, #4]
9000638a:	681b      	ldr	r3, [r3, #0]
9000638c:	681a      	ldr	r2, [r3, #0]
9000638e:	687b      	ldr	r3, [r7, #4]
90006390:	681b      	ldr	r3, [r3, #0]
90006392:	f042 0201 	orr.w	r2, r2, #1
90006396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006398:	687b      	ldr	r3, [r7, #4]
9000639a:	2220      	movs	r2, #32
9000639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900063a0:	687b      	ldr	r3, [r7, #4]
900063a2:	2200      	movs	r2, #0
900063a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900063a8:	2300      	movs	r3, #0
900063aa:	e000      	b.n	900063ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
900063ac:	2302      	movs	r3, #2
  }
}
900063ae:	4618      	mov	r0, r3
900063b0:	370c      	adds	r7, #12
900063b2:	46bd      	mov	sp, r7
900063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900063b8:	4770      	bx	lr

900063ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
900063ba:	b480      	push	{r7}
900063bc:	b085      	sub	sp, #20
900063be:	af00      	add	r7, sp, #0
900063c0:	6078      	str	r0, [r7, #4]
900063c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900063c4:	687b      	ldr	r3, [r7, #4]
900063c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900063ca:	b2db      	uxtb	r3, r3
900063cc:	2b20      	cmp	r3, #32
900063ce:	d139      	bne.n	90006444 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900063d0:	687b      	ldr	r3, [r7, #4]
900063d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900063d6:	2b01      	cmp	r3, #1
900063d8:	d101      	bne.n	900063de <HAL_I2CEx_ConfigDigitalFilter+0x24>
900063da:	2302      	movs	r3, #2
900063dc:	e033      	b.n	90006446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
900063de:	687b      	ldr	r3, [r7, #4]
900063e0:	2201      	movs	r2, #1
900063e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900063e6:	687b      	ldr	r3, [r7, #4]
900063e8:	2224      	movs	r2, #36	@ 0x24
900063ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900063ee:	687b      	ldr	r3, [r7, #4]
900063f0:	681b      	ldr	r3, [r3, #0]
900063f2:	681a      	ldr	r2, [r3, #0]
900063f4:	687b      	ldr	r3, [r7, #4]
900063f6:	681b      	ldr	r3, [r3, #0]
900063f8:	f022 0201 	bic.w	r2, r2, #1
900063fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900063fe:	687b      	ldr	r3, [r7, #4]
90006400:	681b      	ldr	r3, [r3, #0]
90006402:	681b      	ldr	r3, [r3, #0]
90006404:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006406:	68fb      	ldr	r3, [r7, #12]
90006408:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
9000640c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000640e:	683b      	ldr	r3, [r7, #0]
90006410:	021b      	lsls	r3, r3, #8
90006412:	68fa      	ldr	r2, [r7, #12]
90006414:	4313      	orrs	r3, r2
90006416:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006418:	687b      	ldr	r3, [r7, #4]
9000641a:	681b      	ldr	r3, [r3, #0]
9000641c:	68fa      	ldr	r2, [r7, #12]
9000641e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006420:	687b      	ldr	r3, [r7, #4]
90006422:	681b      	ldr	r3, [r3, #0]
90006424:	681a      	ldr	r2, [r3, #0]
90006426:	687b      	ldr	r3, [r7, #4]
90006428:	681b      	ldr	r3, [r3, #0]
9000642a:	f042 0201 	orr.w	r2, r2, #1
9000642e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006430:	687b      	ldr	r3, [r7, #4]
90006432:	2220      	movs	r2, #32
90006434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006438:	687b      	ldr	r3, [r7, #4]
9000643a:	2200      	movs	r2, #0
9000643c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006440:	2300      	movs	r3, #0
90006442:	e000      	b.n	90006446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90006444:	2302      	movs	r3, #2
  }
}
90006446:	4618      	mov	r0, r3
90006448:	3714      	adds	r7, #20
9000644a:	46bd      	mov	sp, r7
9000644c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006450:	4770      	bx	lr

90006452 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90006452:	b580      	push	{r7, lr}
90006454:	b084      	sub	sp, #16
90006456:	af00      	add	r7, sp, #0
90006458:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000645a:	687b      	ldr	r3, [r7, #4]
9000645c:	2b00      	cmp	r3, #0
9000645e:	d101      	bne.n	90006464 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90006460:	2301      	movs	r3, #1
90006462:	e08f      	b.n	90006584 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006464:	687b      	ldr	r3, [r7, #4]
90006466:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
9000646a:	b2db      	uxtb	r3, r3
9000646c:	2b00      	cmp	r3, #0
9000646e:	d106      	bne.n	9000647e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90006470:	687b      	ldr	r3, [r7, #4]
90006472:	2200      	movs	r2, #0
90006474:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006478:	6878      	ldr	r0, [r7, #4]
9000647a:	f000 f887 	bl	9000658c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000647e:	687b      	ldr	r3, [r7, #4]
90006480:	2202      	movs	r2, #2
90006482:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006486:	687b      	ldr	r3, [r7, #4]
90006488:	681b      	ldr	r3, [r3, #0]
9000648a:	699a      	ldr	r2, [r3, #24]
9000648c:	687b      	ldr	r3, [r7, #4]
9000648e:	681b      	ldr	r3, [r3, #0]
90006490:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006494:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006496:	687b      	ldr	r3, [r7, #4]
90006498:	681b      	ldr	r3, [r3, #0]
9000649a:	6999      	ldr	r1, [r3, #24]
9000649c:	687b      	ldr	r3, [r7, #4]
9000649e:	685a      	ldr	r2, [r3, #4]
900064a0:	687b      	ldr	r3, [r7, #4]
900064a2:	689b      	ldr	r3, [r3, #8]
900064a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900064a6:	687b      	ldr	r3, [r7, #4]
900064a8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900064aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900064ac:	687b      	ldr	r3, [r7, #4]
900064ae:	691b      	ldr	r3, [r3, #16]
900064b0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900064b2:	687b      	ldr	r3, [r7, #4]
900064b4:	681b      	ldr	r3, [r3, #0]
900064b6:	430a      	orrs	r2, r1
900064b8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
900064ba:	687b      	ldr	r3, [r7, #4]
900064bc:	695b      	ldr	r3, [r3, #20]
900064be:	041b      	lsls	r3, r3, #16
900064c0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
900064c2:	687b      	ldr	r3, [r7, #4]
900064c4:	6999      	ldr	r1, [r3, #24]
900064c6:	687b      	ldr	r3, [r7, #4]
900064c8:	681b      	ldr	r3, [r3, #0]
900064ca:	68fa      	ldr	r2, [r7, #12]
900064cc:	430a      	orrs	r2, r1
900064ce:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900064d0:	687b      	ldr	r3, [r7, #4]
900064d2:	69db      	ldr	r3, [r3, #28]
900064d4:	041b      	lsls	r3, r3, #16
900064d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
900064d8:	687b      	ldr	r3, [r7, #4]
900064da:	6a19      	ldr	r1, [r3, #32]
900064dc:	687b      	ldr	r3, [r7, #4]
900064de:	681b      	ldr	r3, [r3, #0]
900064e0:	68fa      	ldr	r2, [r7, #12]
900064e2:	430a      	orrs	r2, r1
900064e4:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900064e6:	687b      	ldr	r3, [r7, #4]
900064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900064ea:	041b      	lsls	r3, r3, #16
900064ec:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
900064ee:	687b      	ldr	r3, [r7, #4]
900064f0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
900064f2:	687b      	ldr	r3, [r7, #4]
900064f4:	681b      	ldr	r3, [r3, #0]
900064f6:	68fa      	ldr	r2, [r7, #12]
900064f8:	430a      	orrs	r2, r1
900064fa:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
900064fc:	687b      	ldr	r3, [r7, #4]
900064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006500:	041b      	lsls	r3, r3, #16
90006502:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006504:	687b      	ldr	r3, [r7, #4]
90006506:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006508:	687b      	ldr	r3, [r7, #4]
9000650a:	681b      	ldr	r3, [r3, #0]
9000650c:	68fa      	ldr	r2, [r7, #12]
9000650e:	430a      	orrs	r2, r1
90006510:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90006512:	687b      	ldr	r3, [r7, #4]
90006514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90006518:	021b      	lsls	r3, r3, #8
9000651a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000651c:	687b      	ldr	r3, [r7, #4]
9000651e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
90006522:	041b      	lsls	r3, r3, #16
90006524:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006526:	687b      	ldr	r3, [r7, #4]
90006528:	681b      	ldr	r3, [r3, #0]
9000652a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000652c:	687b      	ldr	r3, [r7, #4]
9000652e:	681b      	ldr	r3, [r3, #0]
90006530:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90006534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006536:	687b      	ldr	r3, [r7, #4]
90006538:	681b      	ldr	r3, [r3, #0]
9000653a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
9000653c:	68ba      	ldr	r2, [r7, #8]
9000653e:	68fb      	ldr	r3, [r7, #12]
90006540:	4313      	orrs	r3, r2
90006542:	687a      	ldr	r2, [r7, #4]
90006544:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006548:	431a      	orrs	r2, r3
9000654a:	687b      	ldr	r3, [r7, #4]
9000654c:	681b      	ldr	r3, [r3, #0]
9000654e:	430a      	orrs	r2, r1
90006550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90006552:	687b      	ldr	r3, [r7, #4]
90006554:	681b      	ldr	r3, [r3, #0]
90006556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006558:	687b      	ldr	r3, [r7, #4]
9000655a:	681b      	ldr	r3, [r3, #0]
9000655c:	f042 0206 	orr.w	r2, r2, #6
90006560:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90006562:	687b      	ldr	r3, [r7, #4]
90006564:	681b      	ldr	r3, [r3, #0]
90006566:	699a      	ldr	r2, [r3, #24]
90006568:	687b      	ldr	r3, [r7, #4]
9000656a:	681b      	ldr	r3, [r3, #0]
9000656c:	f042 0201 	orr.w	r2, r2, #1
90006570:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006572:	687b      	ldr	r3, [r7, #4]
90006574:	2200      	movs	r2, #0
90006576:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000657a:	687b      	ldr	r3, [r7, #4]
9000657c:	2201      	movs	r2, #1
9000657e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
90006582:	2300      	movs	r3, #0
}
90006584:	4618      	mov	r0, r3
90006586:	3710      	adds	r7, #16
90006588:	46bd      	mov	sp, r7
9000658a:	bd80      	pop	{r7, pc}

9000658c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
9000658c:	b480      	push	{r7}
9000658e:	b083      	sub	sp, #12
90006590:	af00      	add	r7, sp, #0
90006592:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006594:	bf00      	nop
90006596:	370c      	adds	r7, #12
90006598:	46bd      	mov	sp, r7
9000659a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000659e:	4770      	bx	lr

900065a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900065a0:	b5b0      	push	{r4, r5, r7, lr}
900065a2:	b084      	sub	sp, #16
900065a4:	af00      	add	r7, sp, #0
900065a6:	60f8      	str	r0, [r7, #12]
900065a8:	60b9      	str	r1, [r7, #8]
900065aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900065ac:	68fb      	ldr	r3, [r7, #12]
900065ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
900065b2:	2b01      	cmp	r3, #1
900065b4:	d101      	bne.n	900065ba <HAL_LTDC_ConfigLayer+0x1a>
900065b6:	2302      	movs	r3, #2
900065b8:	e02c      	b.n	90006614 <HAL_LTDC_ConfigLayer+0x74>
900065ba:	68fb      	ldr	r3, [r7, #12]
900065bc:	2201      	movs	r2, #1
900065be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900065c2:	68fb      	ldr	r3, [r7, #12]
900065c4:	2202      	movs	r2, #2
900065c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900065ca:	68fa      	ldr	r2, [r7, #12]
900065cc:	687b      	ldr	r3, [r7, #4]
900065ce:	2134      	movs	r1, #52	@ 0x34
900065d0:	fb01 f303 	mul.w	r3, r1, r3
900065d4:	4413      	add	r3, r2
900065d6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
900065da:	68bb      	ldr	r3, [r7, #8]
900065dc:	4614      	mov	r4, r2
900065de:	461d      	mov	r5, r3
900065e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065ec:	682b      	ldr	r3, [r5, #0]
900065ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900065f0:	687a      	ldr	r2, [r7, #4]
900065f2:	68b9      	ldr	r1, [r7, #8]
900065f4:	68f8      	ldr	r0, [r7, #12]
900065f6:	f000 f811 	bl	9000661c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900065fa:	68fb      	ldr	r3, [r7, #12]
900065fc:	681b      	ldr	r3, [r3, #0]
900065fe:	2201      	movs	r2, #1
90006600:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90006602:	68fb      	ldr	r3, [r7, #12]
90006604:	2201      	movs	r2, #1
90006606:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
9000660a:	68fb      	ldr	r3, [r7, #12]
9000660c:	2200      	movs	r2, #0
9000660e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90006612:	2300      	movs	r3, #0
}
90006614:	4618      	mov	r0, r3
90006616:	3710      	adds	r7, #16
90006618:	46bd      	mov	sp, r7
9000661a:	bdb0      	pop	{r4, r5, r7, pc}

9000661c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000661c:	b480      	push	{r7}
9000661e:	b089      	sub	sp, #36	@ 0x24
90006620:	af00      	add	r7, sp, #0
90006622:	60f8      	str	r0, [r7, #12]
90006624:	60b9      	str	r1, [r7, #8]
90006626:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006628:	68bb      	ldr	r3, [r7, #8]
9000662a:	685a      	ldr	r2, [r3, #4]
9000662c:	68fb      	ldr	r3, [r7, #12]
9000662e:	681b      	ldr	r3, [r3, #0]
90006630:	68db      	ldr	r3, [r3, #12]
90006632:	0c1b      	lsrs	r3, r3, #16
90006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006638:	4413      	add	r3, r2
9000663a:	041b      	lsls	r3, r3, #16
9000663c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000663e:	68fb      	ldr	r3, [r7, #12]
90006640:	681b      	ldr	r3, [r3, #0]
90006642:	461a      	mov	r2, r3
90006644:	687b      	ldr	r3, [r7, #4]
90006646:	01db      	lsls	r3, r3, #7
90006648:	4413      	add	r3, r2
9000664a:	3384      	adds	r3, #132	@ 0x84
9000664c:	685b      	ldr	r3, [r3, #4]
9000664e:	68fa      	ldr	r2, [r7, #12]
90006650:	6812      	ldr	r2, [r2, #0]
90006652:	4611      	mov	r1, r2
90006654:	687a      	ldr	r2, [r7, #4]
90006656:	01d2      	lsls	r2, r2, #7
90006658:	440a      	add	r2, r1
9000665a:	3284      	adds	r2, #132	@ 0x84
9000665c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006660:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006662:	68bb      	ldr	r3, [r7, #8]
90006664:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006666:	68fb      	ldr	r3, [r7, #12]
90006668:	681b      	ldr	r3, [r3, #0]
9000666a:	68db      	ldr	r3, [r3, #12]
9000666c:	0c1b      	lsrs	r3, r3, #16
9000666e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006672:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006674:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006676:	68fb      	ldr	r3, [r7, #12]
90006678:	681b      	ldr	r3, [r3, #0]
9000667a:	4619      	mov	r1, r3
9000667c:	687b      	ldr	r3, [r7, #4]
9000667e:	01db      	lsls	r3, r3, #7
90006680:	440b      	add	r3, r1
90006682:	3384      	adds	r3, #132	@ 0x84
90006684:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006686:	69fb      	ldr	r3, [r7, #28]
90006688:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000668a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000668c:	68bb      	ldr	r3, [r7, #8]
9000668e:	68da      	ldr	r2, [r3, #12]
90006690:	68fb      	ldr	r3, [r7, #12]
90006692:	681b      	ldr	r3, [r3, #0]
90006694:	68db      	ldr	r3, [r3, #12]
90006696:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000669a:	4413      	add	r3, r2
9000669c:	041b      	lsls	r3, r3, #16
9000669e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900066a0:	68fb      	ldr	r3, [r7, #12]
900066a2:	681b      	ldr	r3, [r3, #0]
900066a4:	461a      	mov	r2, r3
900066a6:	687b      	ldr	r3, [r7, #4]
900066a8:	01db      	lsls	r3, r3, #7
900066aa:	4413      	add	r3, r2
900066ac:	3384      	adds	r3, #132	@ 0x84
900066ae:	689b      	ldr	r3, [r3, #8]
900066b0:	68fa      	ldr	r2, [r7, #12]
900066b2:	6812      	ldr	r2, [r2, #0]
900066b4:	4611      	mov	r1, r2
900066b6:	687a      	ldr	r2, [r7, #4]
900066b8:	01d2      	lsls	r2, r2, #7
900066ba:	440a      	add	r2, r1
900066bc:	3284      	adds	r2, #132	@ 0x84
900066be:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900066c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900066c4:	68bb      	ldr	r3, [r7, #8]
900066c6:	689a      	ldr	r2, [r3, #8]
900066c8:	68fb      	ldr	r3, [r7, #12]
900066ca:	681b      	ldr	r3, [r3, #0]
900066cc:	68db      	ldr	r3, [r3, #12]
900066ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
900066d2:	4413      	add	r3, r2
900066d4:	1c5a      	adds	r2, r3, #1
900066d6:	68fb      	ldr	r3, [r7, #12]
900066d8:	681b      	ldr	r3, [r3, #0]
900066da:	4619      	mov	r1, r3
900066dc:	687b      	ldr	r3, [r7, #4]
900066de:	01db      	lsls	r3, r3, #7
900066e0:	440b      	add	r3, r1
900066e2:	3384      	adds	r3, #132	@ 0x84
900066e4:	4619      	mov	r1, r3
900066e6:	69fb      	ldr	r3, [r7, #28]
900066e8:	4313      	orrs	r3, r2
900066ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900066ec:	68fb      	ldr	r3, [r7, #12]
900066ee:	681b      	ldr	r3, [r3, #0]
900066f0:	461a      	mov	r2, r3
900066f2:	687b      	ldr	r3, [r7, #4]
900066f4:	01db      	lsls	r3, r3, #7
900066f6:	4413      	add	r3, r2
900066f8:	3384      	adds	r3, #132	@ 0x84
900066fa:	691b      	ldr	r3, [r3, #16]
900066fc:	68fa      	ldr	r2, [r7, #12]
900066fe:	6812      	ldr	r2, [r2, #0]
90006700:	4611      	mov	r1, r2
90006702:	687a      	ldr	r2, [r7, #4]
90006704:	01d2      	lsls	r2, r2, #7
90006706:	440a      	add	r2, r1
90006708:	3284      	adds	r2, #132	@ 0x84
9000670a:	f023 0307 	bic.w	r3, r3, #7
9000670e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90006710:	68fb      	ldr	r3, [r7, #12]
90006712:	681b      	ldr	r3, [r3, #0]
90006714:	461a      	mov	r2, r3
90006716:	687b      	ldr	r3, [r7, #4]
90006718:	01db      	lsls	r3, r3, #7
9000671a:	4413      	add	r3, r2
9000671c:	3384      	adds	r3, #132	@ 0x84
9000671e:	461a      	mov	r2, r3
90006720:	68bb      	ldr	r3, [r7, #8]
90006722:	691b      	ldr	r3, [r3, #16]
90006724:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90006726:	68bb      	ldr	r3, [r7, #8]
90006728:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
9000672c:	021b      	lsls	r3, r3, #8
9000672e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006730:	68bb      	ldr	r3, [r7, #8]
90006732:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90006736:	041b      	lsls	r3, r3, #16
90006738:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000673a:	68bb      	ldr	r3, [r7, #8]
9000673c:	699b      	ldr	r3, [r3, #24]
9000673e:	061b      	lsls	r3, r3, #24
90006740:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
90006742:	68bb      	ldr	r3, [r7, #8]
90006744:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90006748:	461a      	mov	r2, r3
9000674a:	69fb      	ldr	r3, [r7, #28]
9000674c:	431a      	orrs	r2, r3
9000674e:	69bb      	ldr	r3, [r7, #24]
90006750:	431a      	orrs	r2, r3
90006752:	68fb      	ldr	r3, [r7, #12]
90006754:	681b      	ldr	r3, [r3, #0]
90006756:	4619      	mov	r1, r3
90006758:	687b      	ldr	r3, [r7, #4]
9000675a:	01db      	lsls	r3, r3, #7
9000675c:	440b      	add	r3, r1
9000675e:	3384      	adds	r3, #132	@ 0x84
90006760:	4619      	mov	r1, r3
90006762:	697b      	ldr	r3, [r7, #20]
90006764:	4313      	orrs	r3, r2
90006766:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006768:	68fb      	ldr	r3, [r7, #12]
9000676a:	681b      	ldr	r3, [r3, #0]
9000676c:	461a      	mov	r2, r3
9000676e:	687b      	ldr	r3, [r7, #4]
90006770:	01db      	lsls	r3, r3, #7
90006772:	4413      	add	r3, r2
90006774:	3384      	adds	r3, #132	@ 0x84
90006776:	695b      	ldr	r3, [r3, #20]
90006778:	68fa      	ldr	r2, [r7, #12]
9000677a:	6812      	ldr	r2, [r2, #0]
9000677c:	4611      	mov	r1, r2
9000677e:	687a      	ldr	r2, [r7, #4]
90006780:	01d2      	lsls	r2, r2, #7
90006782:	440a      	add	r2, r1
90006784:	3284      	adds	r2, #132	@ 0x84
90006786:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
9000678a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000678c:	68fb      	ldr	r3, [r7, #12]
9000678e:	681b      	ldr	r3, [r3, #0]
90006790:	461a      	mov	r2, r3
90006792:	687b      	ldr	r3, [r7, #4]
90006794:	01db      	lsls	r3, r3, #7
90006796:	4413      	add	r3, r2
90006798:	3384      	adds	r3, #132	@ 0x84
9000679a:	461a      	mov	r2, r3
9000679c:	68bb      	ldr	r3, [r7, #8]
9000679e:	695b      	ldr	r3, [r3, #20]
900067a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900067a2:	68fb      	ldr	r3, [r7, #12]
900067a4:	681b      	ldr	r3, [r3, #0]
900067a6:	461a      	mov	r2, r3
900067a8:	687b      	ldr	r3, [r7, #4]
900067aa:	01db      	lsls	r3, r3, #7
900067ac:	4413      	add	r3, r2
900067ae:	3384      	adds	r3, #132	@ 0x84
900067b0:	69da      	ldr	r2, [r3, #28]
900067b2:	68fb      	ldr	r3, [r7, #12]
900067b4:	681b      	ldr	r3, [r3, #0]
900067b6:	4619      	mov	r1, r3
900067b8:	687b      	ldr	r3, [r7, #4]
900067ba:	01db      	lsls	r3, r3, #7
900067bc:	440b      	add	r3, r1
900067be:	3384      	adds	r3, #132	@ 0x84
900067c0:	4619      	mov	r1, r3
900067c2:	4b4f      	ldr	r3, [pc, #316]	@ (90006900 <LTDC_SetConfig+0x2e4>)
900067c4:	4013      	ands	r3, r2
900067c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900067c8:	68bb      	ldr	r3, [r7, #8]
900067ca:	69da      	ldr	r2, [r3, #28]
900067cc:	68bb      	ldr	r3, [r7, #8]
900067ce:	6a1b      	ldr	r3, [r3, #32]
900067d0:	68f9      	ldr	r1, [r7, #12]
900067d2:	6809      	ldr	r1, [r1, #0]
900067d4:	4608      	mov	r0, r1
900067d6:	6879      	ldr	r1, [r7, #4]
900067d8:	01c9      	lsls	r1, r1, #7
900067da:	4401      	add	r1, r0
900067dc:	3184      	adds	r1, #132	@ 0x84
900067de:	4313      	orrs	r3, r2
900067e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
900067e2:	68fb      	ldr	r3, [r7, #12]
900067e4:	681b      	ldr	r3, [r3, #0]
900067e6:	461a      	mov	r2, r3
900067e8:	687b      	ldr	r3, [r7, #4]
900067ea:	01db      	lsls	r3, r3, #7
900067ec:	4413      	add	r3, r2
900067ee:	3384      	adds	r3, #132	@ 0x84
900067f0:	461a      	mov	r2, r3
900067f2:	68bb      	ldr	r3, [r7, #8]
900067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900067f6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900067f8:	68bb      	ldr	r3, [r7, #8]
900067fa:	691b      	ldr	r3, [r3, #16]
900067fc:	2b00      	cmp	r3, #0
900067fe:	d102      	bne.n	90006806 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006800:	2304      	movs	r3, #4
90006802:	61fb      	str	r3, [r7, #28]
90006804:	e01b      	b.n	9000683e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006806:	68bb      	ldr	r3, [r7, #8]
90006808:	691b      	ldr	r3, [r3, #16]
9000680a:	2b01      	cmp	r3, #1
9000680c:	d102      	bne.n	90006814 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
9000680e:	2303      	movs	r3, #3
90006810:	61fb      	str	r3, [r7, #28]
90006812:	e014      	b.n	9000683e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006814:	68bb      	ldr	r3, [r7, #8]
90006816:	691b      	ldr	r3, [r3, #16]
90006818:	2b04      	cmp	r3, #4
9000681a:	d00b      	beq.n	90006834 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
9000681c:	68bb      	ldr	r3, [r7, #8]
9000681e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006820:	2b02      	cmp	r3, #2
90006822:	d007      	beq.n	90006834 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006824:	68bb      	ldr	r3, [r7, #8]
90006826:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006828:	2b03      	cmp	r3, #3
9000682a:	d003      	beq.n	90006834 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
9000682c:	68bb      	ldr	r3, [r7, #8]
9000682e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006830:	2b07      	cmp	r3, #7
90006832:	d102      	bne.n	9000683a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90006834:	2302      	movs	r3, #2
90006836:	61fb      	str	r3, [r7, #28]
90006838:	e001      	b.n	9000683e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
9000683a:	2301      	movs	r3, #1
9000683c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000683e:	68fb      	ldr	r3, [r7, #12]
90006840:	681b      	ldr	r3, [r3, #0]
90006842:	461a      	mov	r2, r3
90006844:	687b      	ldr	r3, [r7, #4]
90006846:	01db      	lsls	r3, r3, #7
90006848:	4413      	add	r3, r2
9000684a:	3384      	adds	r3, #132	@ 0x84
9000684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000684e:	68fa      	ldr	r2, [r7, #12]
90006850:	6812      	ldr	r2, [r2, #0]
90006852:	4611      	mov	r1, r2
90006854:	687a      	ldr	r2, [r7, #4]
90006856:	01d2      	lsls	r2, r2, #7
90006858:	440a      	add	r2, r1
9000685a:	3284      	adds	r2, #132	@ 0x84
9000685c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006860:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006862:	68bb      	ldr	r3, [r7, #8]
90006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006866:	69fa      	ldr	r2, [r7, #28]
90006868:	fb02 f303 	mul.w	r3, r2, r3
9000686c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000686e:	68bb      	ldr	r3, [r7, #8]
90006870:	6859      	ldr	r1, [r3, #4]
90006872:	68bb      	ldr	r3, [r7, #8]
90006874:	681b      	ldr	r3, [r3, #0]
90006876:	1acb      	subs	r3, r1, r3
90006878:	69f9      	ldr	r1, [r7, #28]
9000687a:	fb01 f303 	mul.w	r3, r1, r3
9000687e:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006880:	68f9      	ldr	r1, [r7, #12]
90006882:	6809      	ldr	r1, [r1, #0]
90006884:	4608      	mov	r0, r1
90006886:	6879      	ldr	r1, [r7, #4]
90006888:	01c9      	lsls	r1, r1, #7
9000688a:	4401      	add	r1, r0
9000688c:	3184      	adds	r1, #132	@ 0x84
9000688e:	4313      	orrs	r3, r2
90006890:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90006892:	68fb      	ldr	r3, [r7, #12]
90006894:	681b      	ldr	r3, [r3, #0]
90006896:	461a      	mov	r2, r3
90006898:	687b      	ldr	r3, [r7, #4]
9000689a:	01db      	lsls	r3, r3, #7
9000689c:	4413      	add	r3, r2
9000689e:	3384      	adds	r3, #132	@ 0x84
900068a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900068a2:	68fb      	ldr	r3, [r7, #12]
900068a4:	681b      	ldr	r3, [r3, #0]
900068a6:	4619      	mov	r1, r3
900068a8:	687b      	ldr	r3, [r7, #4]
900068aa:	01db      	lsls	r3, r3, #7
900068ac:	440b      	add	r3, r1
900068ae:	3384      	adds	r3, #132	@ 0x84
900068b0:	4619      	mov	r1, r3
900068b2:	4b14      	ldr	r3, [pc, #80]	@ (90006904 <LTDC_SetConfig+0x2e8>)
900068b4:	4013      	ands	r3, r2
900068b6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900068b8:	68fb      	ldr	r3, [r7, #12]
900068ba:	681b      	ldr	r3, [r3, #0]
900068bc:	461a      	mov	r2, r3
900068be:	687b      	ldr	r3, [r7, #4]
900068c0:	01db      	lsls	r3, r3, #7
900068c2:	4413      	add	r3, r2
900068c4:	3384      	adds	r3, #132	@ 0x84
900068c6:	461a      	mov	r2, r3
900068c8:	68bb      	ldr	r3, [r7, #8]
900068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900068cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900068ce:	68fb      	ldr	r3, [r7, #12]
900068d0:	681b      	ldr	r3, [r3, #0]
900068d2:	461a      	mov	r2, r3
900068d4:	687b      	ldr	r3, [r7, #4]
900068d6:	01db      	lsls	r3, r3, #7
900068d8:	4413      	add	r3, r2
900068da:	3384      	adds	r3, #132	@ 0x84
900068dc:	681b      	ldr	r3, [r3, #0]
900068de:	68fa      	ldr	r2, [r7, #12]
900068e0:	6812      	ldr	r2, [r2, #0]
900068e2:	4611      	mov	r1, r2
900068e4:	687a      	ldr	r2, [r7, #4]
900068e6:	01d2      	lsls	r2, r2, #7
900068e8:	440a      	add	r2, r1
900068ea:	3284      	adds	r2, #132	@ 0x84
900068ec:	f043 0301 	orr.w	r3, r3, #1
900068f0:	6013      	str	r3, [r2, #0]
}
900068f2:	bf00      	nop
900068f4:	3724      	adds	r7, #36	@ 0x24
900068f6:	46bd      	mov	sp, r7
900068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900068fc:	4770      	bx	lr
900068fe:	bf00      	nop
90006900:	fffff8f8 	.word	0xfffff8f8
90006904:	fffff800 	.word	0xfffff800

90006908 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006908:	b580      	push	{r7, lr}
9000690a:	b084      	sub	sp, #16
9000690c:	af00      	add	r7, sp, #0
9000690e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006910:	f7fc fc8e 	bl	90003230 <HAL_GetTick>
90006914:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006916:	687b      	ldr	r3, [r7, #4]
90006918:	2b00      	cmp	r3, #0
9000691a:	d101      	bne.n	90006920 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
9000691c:	2301      	movs	r3, #1
9000691e:	e03b      	b.n	90006998 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006920:	687b      	ldr	r3, [r7, #4]
90006922:	2200      	movs	r2, #0
90006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006928:	687b      	ldr	r3, [r7, #4]
9000692a:	2202      	movs	r2, #2
9000692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006930:	687b      	ldr	r3, [r7, #4]
90006932:	681b      	ldr	r3, [r3, #0]
90006934:	68da      	ldr	r2, [r3, #12]
90006936:	687b      	ldr	r3, [r7, #4]
90006938:	681b      	ldr	r3, [r3, #0]
9000693a:	f022 0201 	bic.w	r2, r2, #1
9000693e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006940:	e00f      	b.n	90006962 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006942:	f7fc fc75 	bl	90003230 <HAL_GetTick>
90006946:	4602      	mov	r2, r0
90006948:	68fb      	ldr	r3, [r7, #12]
9000694a:	1ad3      	subs	r3, r2, r3
9000694c:	2b05      	cmp	r3, #5
9000694e:	d908      	bls.n	90006962 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006950:	687b      	ldr	r3, [r7, #4]
90006952:	2240      	movs	r2, #64	@ 0x40
90006954:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006956:	687b      	ldr	r3, [r7, #4]
90006958:	2203      	movs	r2, #3
9000695a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
9000695e:	2301      	movs	r3, #1
90006960:	e01a      	b.n	90006998 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006962:	687b      	ldr	r3, [r7, #4]
90006964:	681b      	ldr	r3, [r3, #0]
90006966:	68db      	ldr	r3, [r3, #12]
90006968:	f003 0301 	and.w	r3, r3, #1
9000696c:	2b00      	cmp	r3, #0
9000696e:	d1e8      	bne.n	90006942 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006970:	6878      	ldr	r0, [r7, #4]
90006972:	f000 f86d 	bl	90006a50 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006976:	687b      	ldr	r3, [r7, #4]
90006978:	2200      	movs	r2, #0
9000697a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
9000697c:	687b      	ldr	r3, [r7, #4]
9000697e:	2200      	movs	r2, #0
90006980:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006982:	687b      	ldr	r3, [r7, #4]
90006984:	2200      	movs	r2, #0
90006986:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006988:	687b      	ldr	r3, [r7, #4]
9000698a:	2200      	movs	r2, #0
9000698c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
9000698e:	687b      	ldr	r3, [r7, #4]
90006990:	2201      	movs	r2, #1
90006992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006996:	2300      	movs	r3, #0
}
90006998:	4618      	mov	r0, r3
9000699a:	3710      	adds	r7, #16
9000699c:	46bd      	mov	sp, r7
9000699e:	bd80      	pop	{r7, pc}

900069a0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
900069a0:	b480      	push	{r7}
900069a2:	b083      	sub	sp, #12
900069a4:	af00      	add	r7, sp, #0
900069a6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900069a8:	687b      	ldr	r3, [r7, #4]
900069aa:	2b00      	cmp	r3, #0
900069ac:	d101      	bne.n	900069b2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
900069ae:	2301      	movs	r3, #1
900069b0:	e048      	b.n	90006a44 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
900069b2:	687b      	ldr	r3, [r7, #4]
900069b4:	681b      	ldr	r3, [r3, #0]
900069b6:	68da      	ldr	r2, [r3, #12]
900069b8:	687b      	ldr	r3, [r7, #4]
900069ba:	681b      	ldr	r3, [r3, #0]
900069bc:	f022 0201 	bic.w	r2, r2, #1
900069c0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
900069c2:	687b      	ldr	r3, [r7, #4]
900069c4:	681b      	ldr	r3, [r3, #0]
900069c6:	2200      	movs	r2, #0
900069c8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
900069ca:	687b      	ldr	r3, [r7, #4]
900069cc:	681b      	ldr	r3, [r3, #0]
900069ce:	2200      	movs	r2, #0
900069d0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
900069d2:	687b      	ldr	r3, [r7, #4]
900069d4:	681b      	ldr	r3, [r3, #0]
900069d6:	2200      	movs	r2, #0
900069d8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
900069da:	687b      	ldr	r3, [r7, #4]
900069dc:	681b      	ldr	r3, [r3, #0]
900069de:	2200      	movs	r2, #0
900069e0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
900069e2:	687b      	ldr	r3, [r7, #4]
900069e4:	681b      	ldr	r3, [r3, #0]
900069e6:	2200      	movs	r2, #0
900069e8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
900069ea:	687b      	ldr	r3, [r7, #4]
900069ec:	681b      	ldr	r3, [r3, #0]
900069ee:	2200      	movs	r2, #0
900069f0:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
900069f2:	687b      	ldr	r3, [r7, #4]
900069f4:	681b      	ldr	r3, [r3, #0]
900069f6:	2200      	movs	r2, #0
900069f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
900069fa:	687b      	ldr	r3, [r7, #4]
900069fc:	681b      	ldr	r3, [r3, #0]
900069fe:	2200      	movs	r2, #0
90006a00:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006a02:	687b      	ldr	r3, [r7, #4]
90006a04:	681b      	ldr	r3, [r3, #0]
90006a06:	2200      	movs	r2, #0
90006a08:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006a0a:	687b      	ldr	r3, [r7, #4]
90006a0c:	681b      	ldr	r3, [r3, #0]
90006a0e:	2200      	movs	r2, #0
90006a10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006a12:	687b      	ldr	r3, [r7, #4]
90006a14:	681b      	ldr	r3, [r3, #0]
90006a16:	221f      	movs	r2, #31
90006a18:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006a1a:	687b      	ldr	r3, [r7, #4]
90006a1c:	2200      	movs	r2, #0
90006a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006a20:	687b      	ldr	r3, [r7, #4]
90006a22:	2200      	movs	r2, #0
90006a24:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006a26:	687b      	ldr	r3, [r7, #4]
90006a28:	2200      	movs	r2, #0
90006a2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006a2c:	687b      	ldr	r3, [r7, #4]
90006a2e:	2200      	movs	r2, #0
90006a30:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006a32:	687b      	ldr	r3, [r7, #4]
90006a34:	2200      	movs	r2, #0
90006a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006a3a:	687b      	ldr	r3, [r7, #4]
90006a3c:	2200      	movs	r2, #0
90006a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006a42:	2300      	movs	r3, #0
}
90006a44:	4618      	mov	r0, r3
90006a46:	370c      	adds	r7, #12
90006a48:	46bd      	mov	sp, r7
90006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a4e:	4770      	bx	lr

90006a50 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006a50:	b480      	push	{r7}
90006a52:	b085      	sub	sp, #20
90006a54:	af00      	add	r7, sp, #0
90006a56:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006a58:	687b      	ldr	r3, [r7, #4]
90006a5a:	68d9      	ldr	r1, [r3, #12]
90006a5c:	687b      	ldr	r3, [r7, #4]
90006a5e:	691a      	ldr	r2, [r3, #16]
90006a60:	687b      	ldr	r3, [r7, #4]
90006a62:	681b      	ldr	r3, [r3, #0]
90006a64:	430a      	orrs	r2, r1
90006a66:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a68:	687b      	ldr	r3, [r7, #4]
90006a6a:	695a      	ldr	r2, [r3, #20]
90006a6c:	687b      	ldr	r3, [r7, #4]
90006a6e:	699b      	ldr	r3, [r3, #24]
90006a70:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a72:	687b      	ldr	r3, [r7, #4]
90006a74:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a76:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a78:	687b      	ldr	r3, [r7, #4]
90006a7a:	6a1b      	ldr	r3, [r3, #32]
90006a7c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a7e:	687b      	ldr	r3, [r7, #4]
90006a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a82:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a84:	687b      	ldr	r3, [r7, #4]
90006a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006a88:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006a8a:	687b      	ldr	r3, [r7, #4]
90006a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a8e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006a90:	687b      	ldr	r3, [r7, #4]
90006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006a94:	3b01      	subs	r3, #1
90006a96:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006a98:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006a9c:	687b      	ldr	r3, [r7, #4]
90006a9e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006aa0:	687b      	ldr	r3, [r7, #4]
90006aa2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006aa4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006aa6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006aa8:	687b      	ldr	r3, [r7, #4]
90006aaa:	685b      	ldr	r3, [r3, #4]
90006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006ab0:	d107      	bne.n	90006ac2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006ab2:	687b      	ldr	r3, [r7, #4]
90006ab4:	681b      	ldr	r3, [r3, #0]
90006ab6:	691a      	ldr	r2, [r3, #16]
90006ab8:	687b      	ldr	r3, [r7, #4]
90006aba:	681b      	ldr	r3, [r3, #0]
90006abc:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006ac0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006ac2:	687b      	ldr	r3, [r7, #4]
90006ac4:	681b      	ldr	r3, [r3, #0]
90006ac6:	2200      	movs	r2, #0
90006ac8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006aca:	687b      	ldr	r3, [r7, #4]
90006acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006ace:	2b00      	cmp	r3, #0
90006ad0:	da11      	bge.n	90006af6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006ad2:	687b      	ldr	r3, [r7, #4]
90006ad4:	681b      	ldr	r3, [r3, #0]
90006ad6:	695a      	ldr	r2, [r3, #20]
90006ad8:	687b      	ldr	r3, [r7, #4]
90006ada:	681b      	ldr	r3, [r3, #0]
90006adc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006ae0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006ae2:	687b      	ldr	r3, [r7, #4]
90006ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006ae6:	425b      	negs	r3, r3
90006ae8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006aea:	687b      	ldr	r3, [r7, #4]
90006aec:	681b      	ldr	r3, [r3, #0]
90006aee:	68fa      	ldr	r2, [r7, #12]
90006af0:	b292      	uxth	r2, r2
90006af2:	621a      	str	r2, [r3, #32]
90006af4:	e006      	b.n	90006b04 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006af6:	687b      	ldr	r3, [r7, #4]
90006af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006afa:	461a      	mov	r2, r3
90006afc:	687b      	ldr	r3, [r7, #4]
90006afe:	681b      	ldr	r3, [r3, #0]
90006b00:	b292      	uxth	r2, r2
90006b02:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006b04:	687b      	ldr	r3, [r7, #4]
90006b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006b08:	2b00      	cmp	r3, #0
90006b0a:	da15      	bge.n	90006b38 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006b0c:	687b      	ldr	r3, [r7, #4]
90006b0e:	681b      	ldr	r3, [r3, #0]
90006b10:	695a      	ldr	r2, [r3, #20]
90006b12:	687b      	ldr	r3, [r7, #4]
90006b14:	681b      	ldr	r3, [r3, #0]
90006b16:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006b1a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006b1c:	687b      	ldr	r3, [r7, #4]
90006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006b20:	425b      	negs	r3, r3
90006b22:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b24:	687b      	ldr	r3, [r7, #4]
90006b26:	681b      	ldr	r3, [r3, #0]
90006b28:	6a19      	ldr	r1, [r3, #32]
90006b2a:	68fb      	ldr	r3, [r7, #12]
90006b2c:	041a      	lsls	r2, r3, #16
90006b2e:	687b      	ldr	r3, [r7, #4]
90006b30:	681b      	ldr	r3, [r3, #0]
90006b32:	430a      	orrs	r2, r1
90006b34:	621a      	str	r2, [r3, #32]
90006b36:	e009      	b.n	90006b4c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b38:	687b      	ldr	r3, [r7, #4]
90006b3a:	681b      	ldr	r3, [r3, #0]
90006b3c:	6a19      	ldr	r1, [r3, #32]
90006b3e:	687b      	ldr	r3, [r7, #4]
90006b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006b42:	041a      	lsls	r2, r3, #16
90006b44:	687b      	ldr	r3, [r7, #4]
90006b46:	681b      	ldr	r3, [r3, #0]
90006b48:	430a      	orrs	r2, r1
90006b4a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006b4c:	687b      	ldr	r3, [r7, #4]
90006b4e:	685b      	ldr	r3, [r3, #4]
90006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006b54:	d006      	beq.n	90006b64 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006b56:	687b      	ldr	r3, [r7, #4]
90006b58:	685a      	ldr	r2, [r3, #4]
90006b5a:	687b      	ldr	r3, [r7, #4]
90006b5c:	681b      	ldr	r3, [r3, #0]
90006b5e:	b2d2      	uxtb	r2, r2
90006b60:	629a      	str	r2, [r3, #40]	@ 0x28
90006b62:	e003      	b.n	90006b6c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006b64:	687b      	ldr	r3, [r7, #4]
90006b66:	681b      	ldr	r3, [r3, #0]
90006b68:	2200      	movs	r2, #0
90006b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006b6c:	687b      	ldr	r3, [r7, #4]
90006b6e:	681b      	ldr	r3, [r3, #0]
90006b70:	2200      	movs	r2, #0
90006b72:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006b74:	bf00      	nop
90006b76:	3714      	adds	r7, #20
90006b78:	46bd      	mov	sp, r7
90006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b7e:	4770      	bx	lr

90006b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006b80:	b580      	push	{r7, lr}
90006b82:	b08c      	sub	sp, #48	@ 0x30
90006b84:	af00      	add	r7, sp, #0
90006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006b88:	687b      	ldr	r3, [r7, #4]
90006b8a:	2b00      	cmp	r3, #0
90006b8c:	d102      	bne.n	90006b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006b8e:	2301      	movs	r3, #1
90006b90:	f000 bc48 	b.w	90007424 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006b94:	687b      	ldr	r3, [r7, #4]
90006b96:	681b      	ldr	r3, [r3, #0]
90006b98:	f003 0301 	and.w	r3, r3, #1
90006b9c:	2b00      	cmp	r3, #0
90006b9e:	f000 8088 	beq.w	90006cb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006ba2:	4b99      	ldr	r3, [pc, #612]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006ba4:	691b      	ldr	r3, [r3, #16]
90006ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006bac:	4b96      	ldr	r3, [pc, #600]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006bb4:	2b10      	cmp	r3, #16
90006bb6:	d007      	beq.n	90006bc8 <HAL_RCC_OscConfig+0x48>
90006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006bba:	2b18      	cmp	r3, #24
90006bbc:	d111      	bne.n	90006be2 <HAL_RCC_OscConfig+0x62>
90006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006bc0:	f003 0303 	and.w	r3, r3, #3
90006bc4:	2b02      	cmp	r3, #2
90006bc6:	d10c      	bne.n	90006be2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006bc8:	4b8f      	ldr	r3, [pc, #572]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006bca:	681b      	ldr	r3, [r3, #0]
90006bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006bd0:	2b00      	cmp	r3, #0
90006bd2:	d06d      	beq.n	90006cb0 <HAL_RCC_OscConfig+0x130>
90006bd4:	687b      	ldr	r3, [r7, #4]
90006bd6:	685b      	ldr	r3, [r3, #4]
90006bd8:	2b00      	cmp	r3, #0
90006bda:	d169      	bne.n	90006cb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006bdc:	2301      	movs	r3, #1
90006bde:	f000 bc21 	b.w	90007424 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006be2:	687b      	ldr	r3, [r7, #4]
90006be4:	685b      	ldr	r3, [r3, #4]
90006be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006bea:	d106      	bne.n	90006bfa <HAL_RCC_OscConfig+0x7a>
90006bec:	4b86      	ldr	r3, [pc, #536]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006bee:	681b      	ldr	r3, [r3, #0]
90006bf0:	4a85      	ldr	r2, [pc, #532]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006bf6:	6013      	str	r3, [r2, #0]
90006bf8:	e02e      	b.n	90006c58 <HAL_RCC_OscConfig+0xd8>
90006bfa:	687b      	ldr	r3, [r7, #4]
90006bfc:	685b      	ldr	r3, [r3, #4]
90006bfe:	2b00      	cmp	r3, #0
90006c00:	d10c      	bne.n	90006c1c <HAL_RCC_OscConfig+0x9c>
90006c02:	4b81      	ldr	r3, [pc, #516]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c04:	681b      	ldr	r3, [r3, #0]
90006c06:	4a80      	ldr	r2, [pc, #512]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006c0c:	6013      	str	r3, [r2, #0]
90006c0e:	4b7e      	ldr	r3, [pc, #504]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c10:	681b      	ldr	r3, [r3, #0]
90006c12:	4a7d      	ldr	r2, [pc, #500]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006c18:	6013      	str	r3, [r2, #0]
90006c1a:	e01d      	b.n	90006c58 <HAL_RCC_OscConfig+0xd8>
90006c1c:	687b      	ldr	r3, [r7, #4]
90006c1e:	685b      	ldr	r3, [r3, #4]
90006c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006c24:	d10c      	bne.n	90006c40 <HAL_RCC_OscConfig+0xc0>
90006c26:	4b78      	ldr	r3, [pc, #480]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c28:	681b      	ldr	r3, [r3, #0]
90006c2a:	4a77      	ldr	r2, [pc, #476]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006c30:	6013      	str	r3, [r2, #0]
90006c32:	4b75      	ldr	r3, [pc, #468]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c34:	681b      	ldr	r3, [r3, #0]
90006c36:	4a74      	ldr	r2, [pc, #464]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006c3c:	6013      	str	r3, [r2, #0]
90006c3e:	e00b      	b.n	90006c58 <HAL_RCC_OscConfig+0xd8>
90006c40:	4b71      	ldr	r3, [pc, #452]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c42:	681b      	ldr	r3, [r3, #0]
90006c44:	4a70      	ldr	r2, [pc, #448]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006c4a:	6013      	str	r3, [r2, #0]
90006c4c:	4b6e      	ldr	r3, [pc, #440]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c4e:	681b      	ldr	r3, [r3, #0]
90006c50:	4a6d      	ldr	r2, [pc, #436]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006c58:	687b      	ldr	r3, [r7, #4]
90006c5a:	685b      	ldr	r3, [r3, #4]
90006c5c:	2b00      	cmp	r3, #0
90006c5e:	d013      	beq.n	90006c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006c60:	f7fc fae6 	bl	90003230 <HAL_GetTick>
90006c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006c66:	e008      	b.n	90006c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006c68:	f7fc fae2 	bl	90003230 <HAL_GetTick>
90006c6c:	4602      	mov	r2, r0
90006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c70:	1ad3      	subs	r3, r2, r3
90006c72:	2b64      	cmp	r3, #100	@ 0x64
90006c74:	d901      	bls.n	90006c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006c76:	2303      	movs	r3, #3
90006c78:	e3d4      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006c7a:	4b63      	ldr	r3, [pc, #396]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006c7c:	681b      	ldr	r3, [r3, #0]
90006c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006c82:	2b00      	cmp	r3, #0
90006c84:	d0f0      	beq.n	90006c68 <HAL_RCC_OscConfig+0xe8>
90006c86:	e014      	b.n	90006cb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006c88:	f7fc fad2 	bl	90003230 <HAL_GetTick>
90006c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006c8e:	e008      	b.n	90006ca2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006c90:	f7fc face 	bl	90003230 <HAL_GetTick>
90006c94:	4602      	mov	r2, r0
90006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c98:	1ad3      	subs	r3, r2, r3
90006c9a:	2b64      	cmp	r3, #100	@ 0x64
90006c9c:	d901      	bls.n	90006ca2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006c9e:	2303      	movs	r3, #3
90006ca0:	e3c0      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006ca2:	4b59      	ldr	r3, [pc, #356]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006ca4:	681b      	ldr	r3, [r3, #0]
90006ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006caa:	2b00      	cmp	r3, #0
90006cac:	d1f0      	bne.n	90006c90 <HAL_RCC_OscConfig+0x110>
90006cae:	e000      	b.n	90006cb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006cb2:	687b      	ldr	r3, [r7, #4]
90006cb4:	681b      	ldr	r3, [r3, #0]
90006cb6:	f003 0302 	and.w	r3, r3, #2
90006cba:	2b00      	cmp	r3, #0
90006cbc:	f000 80ca 	beq.w	90006e54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006cc0:	4b51      	ldr	r3, [pc, #324]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006cc2:	691b      	ldr	r3, [r3, #16]
90006cc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006cc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006cca:	4b4f      	ldr	r3, [pc, #316]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006cce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006cd0:	6a3b      	ldr	r3, [r7, #32]
90006cd2:	2b00      	cmp	r3, #0
90006cd4:	d007      	beq.n	90006ce6 <HAL_RCC_OscConfig+0x166>
90006cd6:	6a3b      	ldr	r3, [r7, #32]
90006cd8:	2b18      	cmp	r3, #24
90006cda:	d156      	bne.n	90006d8a <HAL_RCC_OscConfig+0x20a>
90006cdc:	69fb      	ldr	r3, [r7, #28]
90006cde:	f003 0303 	and.w	r3, r3, #3
90006ce2:	2b00      	cmp	r3, #0
90006ce4:	d151      	bne.n	90006d8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006ce6:	4b48      	ldr	r3, [pc, #288]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006ce8:	681b      	ldr	r3, [r3, #0]
90006cea:	f003 0304 	and.w	r3, r3, #4
90006cee:	2b00      	cmp	r3, #0
90006cf0:	d005      	beq.n	90006cfe <HAL_RCC_OscConfig+0x17e>
90006cf2:	687b      	ldr	r3, [r7, #4]
90006cf4:	68db      	ldr	r3, [r3, #12]
90006cf6:	2b00      	cmp	r3, #0
90006cf8:	d101      	bne.n	90006cfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006cfa:	2301      	movs	r3, #1
90006cfc:	e392      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006cfe:	4b42      	ldr	r3, [pc, #264]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d00:	681b      	ldr	r3, [r3, #0]
90006d02:	f023 0219 	bic.w	r2, r3, #25
90006d06:	687b      	ldr	r3, [r7, #4]
90006d08:	68db      	ldr	r3, [r3, #12]
90006d0a:	493f      	ldr	r1, [pc, #252]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d0c:	4313      	orrs	r3, r2
90006d0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d10:	f7fc fa8e 	bl	90003230 <HAL_GetTick>
90006d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006d16:	e008      	b.n	90006d2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006d18:	f7fc fa8a 	bl	90003230 <HAL_GetTick>
90006d1c:	4602      	mov	r2, r0
90006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d20:	1ad3      	subs	r3, r2, r3
90006d22:	2b02      	cmp	r3, #2
90006d24:	d901      	bls.n	90006d2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006d26:	2303      	movs	r3, #3
90006d28:	e37c      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006d2a:	4b37      	ldr	r3, [pc, #220]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d2c:	681b      	ldr	r3, [r3, #0]
90006d2e:	f003 0304 	and.w	r3, r3, #4
90006d32:	2b00      	cmp	r3, #0
90006d34:	d0f0      	beq.n	90006d18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d36:	f7fc faab 	bl	90003290 <HAL_GetREVID>
90006d3a:	4603      	mov	r3, r0
90006d3c:	f241 0203 	movw	r2, #4099	@ 0x1003
90006d40:	4293      	cmp	r3, r2
90006d42:	d817      	bhi.n	90006d74 <HAL_RCC_OscConfig+0x1f4>
90006d44:	687b      	ldr	r3, [r7, #4]
90006d46:	691b      	ldr	r3, [r3, #16]
90006d48:	2b40      	cmp	r3, #64	@ 0x40
90006d4a:	d108      	bne.n	90006d5e <HAL_RCC_OscConfig+0x1de>
90006d4c:	4b2e      	ldr	r3, [pc, #184]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d4e:	685b      	ldr	r3, [r3, #4]
90006d50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006d54:	4a2c      	ldr	r2, [pc, #176]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006d5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d5c:	e07a      	b.n	90006e54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d5e:	4b2a      	ldr	r3, [pc, #168]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d60:	685b      	ldr	r3, [r3, #4]
90006d62:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006d66:	687b      	ldr	r3, [r7, #4]
90006d68:	691b      	ldr	r3, [r3, #16]
90006d6a:	031b      	lsls	r3, r3, #12
90006d6c:	4926      	ldr	r1, [pc, #152]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d6e:	4313      	orrs	r3, r2
90006d70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d72:	e06f      	b.n	90006e54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d74:	4b24      	ldr	r3, [pc, #144]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d76:	685b      	ldr	r3, [r3, #4]
90006d78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006d7c:	687b      	ldr	r3, [r7, #4]
90006d7e:	691b      	ldr	r3, [r3, #16]
90006d80:	061b      	lsls	r3, r3, #24
90006d82:	4921      	ldr	r1, [pc, #132]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d84:	4313      	orrs	r3, r2
90006d86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d88:	e064      	b.n	90006e54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006d8a:	687b      	ldr	r3, [r7, #4]
90006d8c:	68db      	ldr	r3, [r3, #12]
90006d8e:	2b00      	cmp	r3, #0
90006d90:	d047      	beq.n	90006e22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006d92:	4b1d      	ldr	r3, [pc, #116]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006d94:	681b      	ldr	r3, [r3, #0]
90006d96:	f023 0219 	bic.w	r2, r3, #25
90006d9a:	687b      	ldr	r3, [r7, #4]
90006d9c:	68db      	ldr	r3, [r3, #12]
90006d9e:	491a      	ldr	r1, [pc, #104]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006da0:	4313      	orrs	r3, r2
90006da2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006da4:	f7fc fa44 	bl	90003230 <HAL_GetTick>
90006da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006daa:	e008      	b.n	90006dbe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006dac:	f7fc fa40 	bl	90003230 <HAL_GetTick>
90006db0:	4602      	mov	r2, r0
90006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006db4:	1ad3      	subs	r3, r2, r3
90006db6:	2b02      	cmp	r3, #2
90006db8:	d901      	bls.n	90006dbe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006dba:	2303      	movs	r3, #3
90006dbc:	e332      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dbe:	4b12      	ldr	r3, [pc, #72]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006dc0:	681b      	ldr	r3, [r3, #0]
90006dc2:	f003 0304 	and.w	r3, r3, #4
90006dc6:	2b00      	cmp	r3, #0
90006dc8:	d0f0      	beq.n	90006dac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006dca:	f7fc fa61 	bl	90003290 <HAL_GetREVID>
90006dce:	4603      	mov	r3, r0
90006dd0:	f241 0203 	movw	r2, #4099	@ 0x1003
90006dd4:	4293      	cmp	r3, r2
90006dd6:	d819      	bhi.n	90006e0c <HAL_RCC_OscConfig+0x28c>
90006dd8:	687b      	ldr	r3, [r7, #4]
90006dda:	691b      	ldr	r3, [r3, #16]
90006ddc:	2b40      	cmp	r3, #64	@ 0x40
90006dde:	d108      	bne.n	90006df2 <HAL_RCC_OscConfig+0x272>
90006de0:	4b09      	ldr	r3, [pc, #36]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006de2:	685b      	ldr	r3, [r3, #4]
90006de4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006de8:	4a07      	ldr	r2, [pc, #28]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006dee:	6053      	str	r3, [r2, #4]
90006df0:	e030      	b.n	90006e54 <HAL_RCC_OscConfig+0x2d4>
90006df2:	4b05      	ldr	r3, [pc, #20]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006df4:	685b      	ldr	r3, [r3, #4]
90006df6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006dfa:	687b      	ldr	r3, [r7, #4]
90006dfc:	691b      	ldr	r3, [r3, #16]
90006dfe:	031b      	lsls	r3, r3, #12
90006e00:	4901      	ldr	r1, [pc, #4]	@ (90006e08 <HAL_RCC_OscConfig+0x288>)
90006e02:	4313      	orrs	r3, r2
90006e04:	604b      	str	r3, [r1, #4]
90006e06:	e025      	b.n	90006e54 <HAL_RCC_OscConfig+0x2d4>
90006e08:	58024400 	.word	0x58024400
90006e0c:	4b9a      	ldr	r3, [pc, #616]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e0e:	685b      	ldr	r3, [r3, #4]
90006e10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006e14:	687b      	ldr	r3, [r7, #4]
90006e16:	691b      	ldr	r3, [r3, #16]
90006e18:	061b      	lsls	r3, r3, #24
90006e1a:	4997      	ldr	r1, [pc, #604]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e1c:	4313      	orrs	r3, r2
90006e1e:	604b      	str	r3, [r1, #4]
90006e20:	e018      	b.n	90006e54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006e22:	4b95      	ldr	r3, [pc, #596]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e24:	681b      	ldr	r3, [r3, #0]
90006e26:	4a94      	ldr	r2, [pc, #592]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e28:	f023 0301 	bic.w	r3, r3, #1
90006e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e2e:	f7fc f9ff 	bl	90003230 <HAL_GetTick>
90006e32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006e34:	e008      	b.n	90006e48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006e36:	f7fc f9fb 	bl	90003230 <HAL_GetTick>
90006e3a:	4602      	mov	r2, r0
90006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e3e:	1ad3      	subs	r3, r2, r3
90006e40:	2b02      	cmp	r3, #2
90006e42:	d901      	bls.n	90006e48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006e44:	2303      	movs	r3, #3
90006e46:	e2ed      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006e48:	4b8b      	ldr	r3, [pc, #556]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e4a:	681b      	ldr	r3, [r3, #0]
90006e4c:	f003 0304 	and.w	r3, r3, #4
90006e50:	2b00      	cmp	r3, #0
90006e52:	d1f0      	bne.n	90006e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006e54:	687b      	ldr	r3, [r7, #4]
90006e56:	681b      	ldr	r3, [r3, #0]
90006e58:	f003 0310 	and.w	r3, r3, #16
90006e5c:	2b00      	cmp	r3, #0
90006e5e:	f000 80a9 	beq.w	90006fb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006e62:	4b85      	ldr	r3, [pc, #532]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e64:	691b      	ldr	r3, [r3, #16]
90006e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006e6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006e6c:	4b82      	ldr	r3, [pc, #520]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006e70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006e72:	69bb      	ldr	r3, [r7, #24]
90006e74:	2b08      	cmp	r3, #8
90006e76:	d007      	beq.n	90006e88 <HAL_RCC_OscConfig+0x308>
90006e78:	69bb      	ldr	r3, [r7, #24]
90006e7a:	2b18      	cmp	r3, #24
90006e7c:	d13a      	bne.n	90006ef4 <HAL_RCC_OscConfig+0x374>
90006e7e:	697b      	ldr	r3, [r7, #20]
90006e80:	f003 0303 	and.w	r3, r3, #3
90006e84:	2b01      	cmp	r3, #1
90006e86:	d135      	bne.n	90006ef4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006e88:	4b7b      	ldr	r3, [pc, #492]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006e8a:	681b      	ldr	r3, [r3, #0]
90006e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006e90:	2b00      	cmp	r3, #0
90006e92:	d005      	beq.n	90006ea0 <HAL_RCC_OscConfig+0x320>
90006e94:	687b      	ldr	r3, [r7, #4]
90006e96:	69db      	ldr	r3, [r3, #28]
90006e98:	2b80      	cmp	r3, #128	@ 0x80
90006e9a:	d001      	beq.n	90006ea0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006e9c:	2301      	movs	r3, #1
90006e9e:	e2c1      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006ea0:	f7fc f9f6 	bl	90003290 <HAL_GetREVID>
90006ea4:	4603      	mov	r3, r0
90006ea6:	f241 0203 	movw	r2, #4099	@ 0x1003
90006eaa:	4293      	cmp	r3, r2
90006eac:	d817      	bhi.n	90006ede <HAL_RCC_OscConfig+0x35e>
90006eae:	687b      	ldr	r3, [r7, #4]
90006eb0:	6a1b      	ldr	r3, [r3, #32]
90006eb2:	2b20      	cmp	r3, #32
90006eb4:	d108      	bne.n	90006ec8 <HAL_RCC_OscConfig+0x348>
90006eb6:	4b70      	ldr	r3, [pc, #448]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006eb8:	685b      	ldr	r3, [r3, #4]
90006eba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006ebe:	4a6e      	ldr	r2, [pc, #440]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006ec4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006ec6:	e075      	b.n	90006fb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006ec8:	4b6b      	ldr	r3, [pc, #428]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006eca:	685b      	ldr	r3, [r3, #4]
90006ecc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006ed0:	687b      	ldr	r3, [r7, #4]
90006ed2:	6a1b      	ldr	r3, [r3, #32]
90006ed4:	069b      	lsls	r3, r3, #26
90006ed6:	4968      	ldr	r1, [pc, #416]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006ed8:	4313      	orrs	r3, r2
90006eda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006edc:	e06a      	b.n	90006fb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006ede:	4b66      	ldr	r3, [pc, #408]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006ee0:	68db      	ldr	r3, [r3, #12]
90006ee2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006ee6:	687b      	ldr	r3, [r7, #4]
90006ee8:	6a1b      	ldr	r3, [r3, #32]
90006eea:	061b      	lsls	r3, r3, #24
90006eec:	4962      	ldr	r1, [pc, #392]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006eee:	4313      	orrs	r3, r2
90006ef0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006ef2:	e05f      	b.n	90006fb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006ef4:	687b      	ldr	r3, [r7, #4]
90006ef6:	69db      	ldr	r3, [r3, #28]
90006ef8:	2b00      	cmp	r3, #0
90006efa:	d042      	beq.n	90006f82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006efc:	4b5e      	ldr	r3, [pc, #376]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006efe:	681b      	ldr	r3, [r3, #0]
90006f00:	4a5d      	ldr	r2, [pc, #372]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f08:	f7fc f992 	bl	90003230 <HAL_GetTick>
90006f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006f0e:	e008      	b.n	90006f22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006f10:	f7fc f98e 	bl	90003230 <HAL_GetTick>
90006f14:	4602      	mov	r2, r0
90006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f18:	1ad3      	subs	r3, r2, r3
90006f1a:	2b02      	cmp	r3, #2
90006f1c:	d901      	bls.n	90006f22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006f1e:	2303      	movs	r3, #3
90006f20:	e280      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006f22:	4b55      	ldr	r3, [pc, #340]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f24:	681b      	ldr	r3, [r3, #0]
90006f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f2a:	2b00      	cmp	r3, #0
90006f2c:	d0f0      	beq.n	90006f10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f2e:	f7fc f9af 	bl	90003290 <HAL_GetREVID>
90006f32:	4603      	mov	r3, r0
90006f34:	f241 0203 	movw	r2, #4099	@ 0x1003
90006f38:	4293      	cmp	r3, r2
90006f3a:	d817      	bhi.n	90006f6c <HAL_RCC_OscConfig+0x3ec>
90006f3c:	687b      	ldr	r3, [r7, #4]
90006f3e:	6a1b      	ldr	r3, [r3, #32]
90006f40:	2b20      	cmp	r3, #32
90006f42:	d108      	bne.n	90006f56 <HAL_RCC_OscConfig+0x3d6>
90006f44:	4b4c      	ldr	r3, [pc, #304]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f46:	685b      	ldr	r3, [r3, #4]
90006f48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006f4c:	4a4a      	ldr	r2, [pc, #296]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006f52:	6053      	str	r3, [r2, #4]
90006f54:	e02e      	b.n	90006fb4 <HAL_RCC_OscConfig+0x434>
90006f56:	4b48      	ldr	r3, [pc, #288]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f58:	685b      	ldr	r3, [r3, #4]
90006f5a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006f5e:	687b      	ldr	r3, [r7, #4]
90006f60:	6a1b      	ldr	r3, [r3, #32]
90006f62:	069b      	lsls	r3, r3, #26
90006f64:	4944      	ldr	r1, [pc, #272]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f66:	4313      	orrs	r3, r2
90006f68:	604b      	str	r3, [r1, #4]
90006f6a:	e023      	b.n	90006fb4 <HAL_RCC_OscConfig+0x434>
90006f6c:	4b42      	ldr	r3, [pc, #264]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f6e:	68db      	ldr	r3, [r3, #12]
90006f70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006f74:	687b      	ldr	r3, [r7, #4]
90006f76:	6a1b      	ldr	r3, [r3, #32]
90006f78:	061b      	lsls	r3, r3, #24
90006f7a:	493f      	ldr	r1, [pc, #252]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f7c:	4313      	orrs	r3, r2
90006f7e:	60cb      	str	r3, [r1, #12]
90006f80:	e018      	b.n	90006fb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90006f82:	4b3d      	ldr	r3, [pc, #244]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f84:	681b      	ldr	r3, [r3, #0]
90006f86:	4a3c      	ldr	r2, [pc, #240]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90006f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f8e:	f7fc f94f 	bl	90003230 <HAL_GetTick>
90006f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006f94:	e008      	b.n	90006fa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006f96:	f7fc f94b 	bl	90003230 <HAL_GetTick>
90006f9a:	4602      	mov	r2, r0
90006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f9e:	1ad3      	subs	r3, r2, r3
90006fa0:	2b02      	cmp	r3, #2
90006fa2:	d901      	bls.n	90006fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90006fa4:	2303      	movs	r3, #3
90006fa6:	e23d      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006fa8:	4b33      	ldr	r3, [pc, #204]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006faa:	681b      	ldr	r3, [r3, #0]
90006fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006fb0:	2b00      	cmp	r3, #0
90006fb2:	d1f0      	bne.n	90006f96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90006fb4:	687b      	ldr	r3, [r7, #4]
90006fb6:	681b      	ldr	r3, [r3, #0]
90006fb8:	f003 0308 	and.w	r3, r3, #8
90006fbc:	2b00      	cmp	r3, #0
90006fbe:	d036      	beq.n	9000702e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90006fc0:	687b      	ldr	r3, [r7, #4]
90006fc2:	695b      	ldr	r3, [r3, #20]
90006fc4:	2b00      	cmp	r3, #0
90006fc6:	d019      	beq.n	90006ffc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90006fc8:	4b2b      	ldr	r3, [pc, #172]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006fcc:	4a2a      	ldr	r2, [pc, #168]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006fce:	f043 0301 	orr.w	r3, r3, #1
90006fd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006fd4:	f7fc f92c 	bl	90003230 <HAL_GetTick>
90006fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006fda:	e008      	b.n	90006fee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006fdc:	f7fc f928 	bl	90003230 <HAL_GetTick>
90006fe0:	4602      	mov	r2, r0
90006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006fe4:	1ad3      	subs	r3, r2, r3
90006fe6:	2b02      	cmp	r3, #2
90006fe8:	d901      	bls.n	90006fee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90006fea:	2303      	movs	r3, #3
90006fec:	e21a      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006fee:	4b22      	ldr	r3, [pc, #136]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006ff2:	f003 0302 	and.w	r3, r3, #2
90006ff6:	2b00      	cmp	r3, #0
90006ff8:	d0f0      	beq.n	90006fdc <HAL_RCC_OscConfig+0x45c>
90006ffa:	e018      	b.n	9000702e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90006ffc:	4b1e      	ldr	r3, [pc, #120]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90006ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007000:	4a1d      	ldr	r2, [pc, #116]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90007002:	f023 0301 	bic.w	r3, r3, #1
90007006:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007008:	f7fc f912 	bl	90003230 <HAL_GetTick>
9000700c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000700e:	e008      	b.n	90007022 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007010:	f7fc f90e 	bl	90003230 <HAL_GetTick>
90007014:	4602      	mov	r2, r0
90007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007018:	1ad3      	subs	r3, r2, r3
9000701a:	2b02      	cmp	r3, #2
9000701c:	d901      	bls.n	90007022 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
9000701e:	2303      	movs	r3, #3
90007020:	e200      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90007022:	4b15      	ldr	r3, [pc, #84]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90007024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007026:	f003 0302 	and.w	r3, r3, #2
9000702a:	2b00      	cmp	r3, #0
9000702c:	d1f0      	bne.n	90007010 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000702e:	687b      	ldr	r3, [r7, #4]
90007030:	681b      	ldr	r3, [r3, #0]
90007032:	f003 0320 	and.w	r3, r3, #32
90007036:	2b00      	cmp	r3, #0
90007038:	d039      	beq.n	900070ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000703a:	687b      	ldr	r3, [r7, #4]
9000703c:	699b      	ldr	r3, [r3, #24]
9000703e:	2b00      	cmp	r3, #0
90007040:	d01c      	beq.n	9000707c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90007042:	4b0d      	ldr	r3, [pc, #52]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90007044:	681b      	ldr	r3, [r3, #0]
90007046:	4a0c      	ldr	r2, [pc, #48]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
90007048:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
9000704c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000704e:	f7fc f8ef 	bl	90003230 <HAL_GetTick>
90007052:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007054:	e008      	b.n	90007068 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007056:	f7fc f8eb 	bl	90003230 <HAL_GetTick>
9000705a:	4602      	mov	r2, r0
9000705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000705e:	1ad3      	subs	r3, r2, r3
90007060:	2b02      	cmp	r3, #2
90007062:	d901      	bls.n	90007068 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007064:	2303      	movs	r3, #3
90007066:	e1dd      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007068:	4b03      	ldr	r3, [pc, #12]	@ (90007078 <HAL_RCC_OscConfig+0x4f8>)
9000706a:	681b      	ldr	r3, [r3, #0]
9000706c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007070:	2b00      	cmp	r3, #0
90007072:	d0f0      	beq.n	90007056 <HAL_RCC_OscConfig+0x4d6>
90007074:	e01b      	b.n	900070ae <HAL_RCC_OscConfig+0x52e>
90007076:	bf00      	nop
90007078:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
9000707c:	4b9b      	ldr	r3, [pc, #620]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000707e:	681b      	ldr	r3, [r3, #0]
90007080:	4a9a      	ldr	r2, [pc, #616]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90007086:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007088:	f7fc f8d2 	bl	90003230 <HAL_GetTick>
9000708c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000708e:	e008      	b.n	900070a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007090:	f7fc f8ce 	bl	90003230 <HAL_GetTick>
90007094:	4602      	mov	r2, r0
90007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007098:	1ad3      	subs	r3, r2, r3
9000709a:	2b02      	cmp	r3, #2
9000709c:	d901      	bls.n	900070a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
9000709e:	2303      	movs	r3, #3
900070a0:	e1c0      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900070a2:	4b92      	ldr	r3, [pc, #584]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900070a4:	681b      	ldr	r3, [r3, #0]
900070a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900070aa:	2b00      	cmp	r3, #0
900070ac:	d1f0      	bne.n	90007090 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900070ae:	687b      	ldr	r3, [r7, #4]
900070b0:	681b      	ldr	r3, [r3, #0]
900070b2:	f003 0304 	and.w	r3, r3, #4
900070b6:	2b00      	cmp	r3, #0
900070b8:	f000 8081 	beq.w	900071be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900070bc:	4b8c      	ldr	r3, [pc, #560]	@ (900072f0 <HAL_RCC_OscConfig+0x770>)
900070be:	681b      	ldr	r3, [r3, #0]
900070c0:	4a8b      	ldr	r2, [pc, #556]	@ (900072f0 <HAL_RCC_OscConfig+0x770>)
900070c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900070c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900070c8:	f7fc f8b2 	bl	90003230 <HAL_GetTick>
900070cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900070ce:	e008      	b.n	900070e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900070d0:	f7fc f8ae 	bl	90003230 <HAL_GetTick>
900070d4:	4602      	mov	r2, r0
900070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070d8:	1ad3      	subs	r3, r2, r3
900070da:	2b64      	cmp	r3, #100	@ 0x64
900070dc:	d901      	bls.n	900070e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
900070de:	2303      	movs	r3, #3
900070e0:	e1a0      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900070e2:	4b83      	ldr	r3, [pc, #524]	@ (900072f0 <HAL_RCC_OscConfig+0x770>)
900070e4:	681b      	ldr	r3, [r3, #0]
900070e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900070ea:	2b00      	cmp	r3, #0
900070ec:	d0f0      	beq.n	900070d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900070ee:	687b      	ldr	r3, [r7, #4]
900070f0:	689b      	ldr	r3, [r3, #8]
900070f2:	2b01      	cmp	r3, #1
900070f4:	d106      	bne.n	90007104 <HAL_RCC_OscConfig+0x584>
900070f6:	4b7d      	ldr	r3, [pc, #500]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900070f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900070fa:	4a7c      	ldr	r2, [pc, #496]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900070fc:	f043 0301 	orr.w	r3, r3, #1
90007100:	6713      	str	r3, [r2, #112]	@ 0x70
90007102:	e02d      	b.n	90007160 <HAL_RCC_OscConfig+0x5e0>
90007104:	687b      	ldr	r3, [r7, #4]
90007106:	689b      	ldr	r3, [r3, #8]
90007108:	2b00      	cmp	r3, #0
9000710a:	d10c      	bne.n	90007126 <HAL_RCC_OscConfig+0x5a6>
9000710c:	4b77      	ldr	r3, [pc, #476]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000710e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007110:	4a76      	ldr	r2, [pc, #472]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007112:	f023 0301 	bic.w	r3, r3, #1
90007116:	6713      	str	r3, [r2, #112]	@ 0x70
90007118:	4b74      	ldr	r3, [pc, #464]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000711a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000711c:	4a73      	ldr	r2, [pc, #460]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000711e:	f023 0304 	bic.w	r3, r3, #4
90007122:	6713      	str	r3, [r2, #112]	@ 0x70
90007124:	e01c      	b.n	90007160 <HAL_RCC_OscConfig+0x5e0>
90007126:	687b      	ldr	r3, [r7, #4]
90007128:	689b      	ldr	r3, [r3, #8]
9000712a:	2b05      	cmp	r3, #5
9000712c:	d10c      	bne.n	90007148 <HAL_RCC_OscConfig+0x5c8>
9000712e:	4b6f      	ldr	r3, [pc, #444]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007132:	4a6e      	ldr	r2, [pc, #440]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007134:	f043 0304 	orr.w	r3, r3, #4
90007138:	6713      	str	r3, [r2, #112]	@ 0x70
9000713a:	4b6c      	ldr	r3, [pc, #432]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000713c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000713e:	4a6b      	ldr	r2, [pc, #428]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007140:	f043 0301 	orr.w	r3, r3, #1
90007144:	6713      	str	r3, [r2, #112]	@ 0x70
90007146:	e00b      	b.n	90007160 <HAL_RCC_OscConfig+0x5e0>
90007148:	4b68      	ldr	r3, [pc, #416]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000714a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000714c:	4a67      	ldr	r2, [pc, #412]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000714e:	f023 0301 	bic.w	r3, r3, #1
90007152:	6713      	str	r3, [r2, #112]	@ 0x70
90007154:	4b65      	ldr	r3, [pc, #404]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007158:	4a64      	ldr	r2, [pc, #400]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000715a:	f023 0304 	bic.w	r3, r3, #4
9000715e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90007160:	687b      	ldr	r3, [r7, #4]
90007162:	689b      	ldr	r3, [r3, #8]
90007164:	2b00      	cmp	r3, #0
90007166:	d015      	beq.n	90007194 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007168:	f7fc f862 	bl	90003230 <HAL_GetTick>
9000716c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000716e:	e00a      	b.n	90007186 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007170:	f7fc f85e 	bl	90003230 <HAL_GetTick>
90007174:	4602      	mov	r2, r0
90007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007178:	1ad3      	subs	r3, r2, r3
9000717a:	f241 3288 	movw	r2, #5000	@ 0x1388
9000717e:	4293      	cmp	r3, r2
90007180:	d901      	bls.n	90007186 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90007182:	2303      	movs	r3, #3
90007184:	e14e      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007186:	4b59      	ldr	r3, [pc, #356]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000718a:	f003 0302 	and.w	r3, r3, #2
9000718e:	2b00      	cmp	r3, #0
90007190:	d0ee      	beq.n	90007170 <HAL_RCC_OscConfig+0x5f0>
90007192:	e014      	b.n	900071be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007194:	f7fc f84c 	bl	90003230 <HAL_GetTick>
90007198:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000719a:	e00a      	b.n	900071b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000719c:	f7fc f848 	bl	90003230 <HAL_GetTick>
900071a0:	4602      	mov	r2, r0
900071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071a4:	1ad3      	subs	r3, r2, r3
900071a6:	f241 3288 	movw	r2, #5000	@ 0x1388
900071aa:	4293      	cmp	r3, r2
900071ac:	d901      	bls.n	900071b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
900071ae:	2303      	movs	r3, #3
900071b0:	e138      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900071b2:	4b4e      	ldr	r3, [pc, #312]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900071b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071b6:	f003 0302 	and.w	r3, r3, #2
900071ba:	2b00      	cmp	r3, #0
900071bc:	d1ee      	bne.n	9000719c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900071be:	687b      	ldr	r3, [r7, #4]
900071c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900071c2:	2b00      	cmp	r3, #0
900071c4:	f000 812d 	beq.w	90007422 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
900071c8:	4b48      	ldr	r3, [pc, #288]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900071ca:	691b      	ldr	r3, [r3, #16]
900071cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900071d0:	2b18      	cmp	r3, #24
900071d2:	f000 80bd 	beq.w	90007350 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900071d6:	687b      	ldr	r3, [r7, #4]
900071d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900071da:	2b02      	cmp	r3, #2
900071dc:	f040 809e 	bne.w	9000731c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900071e0:	4b42      	ldr	r3, [pc, #264]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900071e2:	681b      	ldr	r3, [r3, #0]
900071e4:	4a41      	ldr	r2, [pc, #260]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900071e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900071ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900071ec:	f7fc f820 	bl	90003230 <HAL_GetTick>
900071f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900071f2:	e008      	b.n	90007206 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900071f4:	f7fc f81c 	bl	90003230 <HAL_GetTick>
900071f8:	4602      	mov	r2, r0
900071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071fc:	1ad3      	subs	r3, r2, r3
900071fe:	2b02      	cmp	r3, #2
90007200:	d901      	bls.n	90007206 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90007202:	2303      	movs	r3, #3
90007204:	e10e      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007206:	4b39      	ldr	r3, [pc, #228]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007208:	681b      	ldr	r3, [r3, #0]
9000720a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000720e:	2b00      	cmp	r3, #0
90007210:	d1f0      	bne.n	900071f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90007212:	4b36      	ldr	r3, [pc, #216]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90007216:	4b37      	ldr	r3, [pc, #220]	@ (900072f4 <HAL_RCC_OscConfig+0x774>)
90007218:	4013      	ands	r3, r2
9000721a:	687a      	ldr	r2, [r7, #4]
9000721c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
9000721e:	687a      	ldr	r2, [r7, #4]
90007220:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
90007222:	0112      	lsls	r2, r2, #4
90007224:	430a      	orrs	r2, r1
90007226:	4931      	ldr	r1, [pc, #196]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007228:	4313      	orrs	r3, r2
9000722a:	628b      	str	r3, [r1, #40]	@ 0x28
9000722c:	687b      	ldr	r3, [r7, #4]
9000722e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007230:	3b01      	subs	r3, #1
90007232:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007236:	687b      	ldr	r3, [r7, #4]
90007238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000723a:	3b01      	subs	r3, #1
9000723c:	025b      	lsls	r3, r3, #9
9000723e:	b29b      	uxth	r3, r3
90007240:	431a      	orrs	r2, r3
90007242:	687b      	ldr	r3, [r7, #4]
90007244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007246:	3b01      	subs	r3, #1
90007248:	041b      	lsls	r3, r3, #16
9000724a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000724e:	431a      	orrs	r2, r3
90007250:	687b      	ldr	r3, [r7, #4]
90007252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007254:	3b01      	subs	r3, #1
90007256:	061b      	lsls	r3, r3, #24
90007258:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000725c:	4923      	ldr	r1, [pc, #140]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000725e:	4313      	orrs	r3, r2
90007260:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90007262:	4b22      	ldr	r3, [pc, #136]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007266:	4a21      	ldr	r2, [pc, #132]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007268:	f023 0301 	bic.w	r3, r3, #1
9000726c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000726e:	4b1f      	ldr	r3, [pc, #124]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007272:	4b21      	ldr	r3, [pc, #132]	@ (900072f8 <HAL_RCC_OscConfig+0x778>)
90007274:	4013      	ands	r3, r2
90007276:	687a      	ldr	r2, [r7, #4]
90007278:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000727a:	00d2      	lsls	r2, r2, #3
9000727c:	491b      	ldr	r1, [pc, #108]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
9000727e:	4313      	orrs	r3, r2
90007280:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90007282:	4b1a      	ldr	r3, [pc, #104]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007286:	f023 020c 	bic.w	r2, r3, #12
9000728a:	687b      	ldr	r3, [r7, #4]
9000728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000728e:	4917      	ldr	r1, [pc, #92]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007290:	4313      	orrs	r3, r2
90007292:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007294:	4b15      	ldr	r3, [pc, #84]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
90007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007298:	f023 0202 	bic.w	r2, r3, #2
9000729c:	687b      	ldr	r3, [r7, #4]
9000729e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900072a0:	4912      	ldr	r1, [pc, #72]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072a2:	4313      	orrs	r3, r2
900072a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
900072a6:	4b11      	ldr	r3, [pc, #68]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072aa:	4a10      	ldr	r2, [pc, #64]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900072b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900072b2:	4b0e      	ldr	r3, [pc, #56]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072b6:	4a0d      	ldr	r2, [pc, #52]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900072bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900072be:	4b0b      	ldr	r3, [pc, #44]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072c2:	4a0a      	ldr	r2, [pc, #40]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
900072c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
900072ca:	4b08      	ldr	r3, [pc, #32]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072ce:	4a07      	ldr	r2, [pc, #28]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072d0:	f043 0301 	orr.w	r3, r3, #1
900072d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900072d6:	4b05      	ldr	r3, [pc, #20]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072d8:	681b      	ldr	r3, [r3, #0]
900072da:	4a04      	ldr	r2, [pc, #16]	@ (900072ec <HAL_RCC_OscConfig+0x76c>)
900072dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900072e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900072e2:	f7fb ffa5 	bl	90003230 <HAL_GetTick>
900072e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900072e8:	e011      	b.n	9000730e <HAL_RCC_OscConfig+0x78e>
900072ea:	bf00      	nop
900072ec:	58024400 	.word	0x58024400
900072f0:	58024800 	.word	0x58024800
900072f4:	fffffc0c 	.word	0xfffffc0c
900072f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900072fc:	f7fb ff98 	bl	90003230 <HAL_GetTick>
90007300:	4602      	mov	r2, r0
90007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007304:	1ad3      	subs	r3, r2, r3
90007306:	2b02      	cmp	r3, #2
90007308:	d901      	bls.n	9000730e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
9000730a:	2303      	movs	r3, #3
9000730c:	e08a      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000730e:	4b47      	ldr	r3, [pc, #284]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007310:	681b      	ldr	r3, [r3, #0]
90007312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007316:	2b00      	cmp	r3, #0
90007318:	d0f0      	beq.n	900072fc <HAL_RCC_OscConfig+0x77c>
9000731a:	e082      	b.n	90007422 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000731c:	4b43      	ldr	r3, [pc, #268]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
9000731e:	681b      	ldr	r3, [r3, #0]
90007320:	4a42      	ldr	r2, [pc, #264]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007328:	f7fb ff82 	bl	90003230 <HAL_GetTick>
9000732c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000732e:	e008      	b.n	90007342 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007330:	f7fb ff7e 	bl	90003230 <HAL_GetTick>
90007334:	4602      	mov	r2, r0
90007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007338:	1ad3      	subs	r3, r2, r3
9000733a:	2b02      	cmp	r3, #2
9000733c:	d901      	bls.n	90007342 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
9000733e:	2303      	movs	r3, #3
90007340:	e070      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007342:	4b3a      	ldr	r3, [pc, #232]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007344:	681b      	ldr	r3, [r3, #0]
90007346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000734a:	2b00      	cmp	r3, #0
9000734c:	d1f0      	bne.n	90007330 <HAL_RCC_OscConfig+0x7b0>
9000734e:	e068      	b.n	90007422 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90007350:	4b36      	ldr	r3, [pc, #216]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007354:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90007356:	4b35      	ldr	r3, [pc, #212]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000735a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000735c:	687b      	ldr	r3, [r7, #4]
9000735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007360:	2b01      	cmp	r3, #1
90007362:	d031      	beq.n	900073c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007364:	693b      	ldr	r3, [r7, #16]
90007366:	f003 0203 	and.w	r2, r3, #3
9000736a:	687b      	ldr	r3, [r7, #4]
9000736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000736e:	429a      	cmp	r2, r3
90007370:	d12a      	bne.n	900073c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007372:	693b      	ldr	r3, [r7, #16]
90007374:	091b      	lsrs	r3, r3, #4
90007376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
9000737a:	687b      	ldr	r3, [r7, #4]
9000737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000737e:	429a      	cmp	r2, r3
90007380:	d122      	bne.n	900073c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007382:	68fb      	ldr	r3, [r7, #12]
90007384:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007388:	687b      	ldr	r3, [r7, #4]
9000738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000738c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000738e:	429a      	cmp	r2, r3
90007390:	d11a      	bne.n	900073c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007392:	68fb      	ldr	r3, [r7, #12]
90007394:	0a5b      	lsrs	r3, r3, #9
90007396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000739a:	687b      	ldr	r3, [r7, #4]
9000739c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000739e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900073a0:	429a      	cmp	r2, r3
900073a2:	d111      	bne.n	900073c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900073a4:	68fb      	ldr	r3, [r7, #12]
900073a6:	0c1b      	lsrs	r3, r3, #16
900073a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900073ac:	687b      	ldr	r3, [r7, #4]
900073ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900073b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900073b2:	429a      	cmp	r2, r3
900073b4:	d108      	bne.n	900073c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900073b6:	68fb      	ldr	r3, [r7, #12]
900073b8:	0e1b      	lsrs	r3, r3, #24
900073ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900073be:	687b      	ldr	r3, [r7, #4]
900073c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900073c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900073c4:	429a      	cmp	r2, r3
900073c6:	d001      	beq.n	900073cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
900073c8:	2301      	movs	r3, #1
900073ca:	e02b      	b.n	90007424 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
900073cc:	4b17      	ldr	r3, [pc, #92]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
900073ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900073d0:	08db      	lsrs	r3, r3, #3
900073d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
900073d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
900073d8:	687b      	ldr	r3, [r7, #4]
900073da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900073dc:	693a      	ldr	r2, [r7, #16]
900073de:	429a      	cmp	r2, r3
900073e0:	d01f      	beq.n	90007422 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
900073e2:	4b12      	ldr	r3, [pc, #72]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
900073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900073e6:	4a11      	ldr	r2, [pc, #68]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
900073e8:	f023 0301 	bic.w	r3, r3, #1
900073ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
900073ee:	f7fb ff1f 	bl	90003230 <HAL_GetTick>
900073f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
900073f4:	bf00      	nop
900073f6:	f7fb ff1b 	bl	90003230 <HAL_GetTick>
900073fa:	4602      	mov	r2, r0
900073fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073fe:	4293      	cmp	r3, r2
90007400:	d0f9      	beq.n	900073f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007402:	4b0a      	ldr	r3, [pc, #40]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007406:	4b0a      	ldr	r3, [pc, #40]	@ (90007430 <HAL_RCC_OscConfig+0x8b0>)
90007408:	4013      	ands	r3, r2
9000740a:	687a      	ldr	r2, [r7, #4]
9000740c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000740e:	00d2      	lsls	r2, r2, #3
90007410:	4906      	ldr	r1, [pc, #24]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007412:	4313      	orrs	r3, r2
90007414:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90007416:	4b05      	ldr	r3, [pc, #20]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
90007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000741a:	4a04      	ldr	r2, [pc, #16]	@ (9000742c <HAL_RCC_OscConfig+0x8ac>)
9000741c:	f043 0301 	orr.w	r3, r3, #1
90007420:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
90007422:	2300      	movs	r3, #0
}
90007424:	4618      	mov	r0, r3
90007426:	3730      	adds	r7, #48	@ 0x30
90007428:	46bd      	mov	sp, r7
9000742a:	bd80      	pop	{r7, pc}
9000742c:	58024400 	.word	0x58024400
90007430:	ffff0007 	.word	0xffff0007

90007434 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90007434:	b580      	push	{r7, lr}
90007436:	b086      	sub	sp, #24
90007438:	af00      	add	r7, sp, #0
9000743a:	6078      	str	r0, [r7, #4]
9000743c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
9000743e:	687b      	ldr	r3, [r7, #4]
90007440:	2b00      	cmp	r3, #0
90007442:	d101      	bne.n	90007448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90007444:	2301      	movs	r3, #1
90007446:	e19c      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007448:	4b8a      	ldr	r3, [pc, #552]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
9000744a:	681b      	ldr	r3, [r3, #0]
9000744c:	f003 030f 	and.w	r3, r3, #15
90007450:	683a      	ldr	r2, [r7, #0]
90007452:	429a      	cmp	r2, r3
90007454:	d910      	bls.n	90007478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007456:	4b87      	ldr	r3, [pc, #540]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
90007458:	681b      	ldr	r3, [r3, #0]
9000745a:	f023 020f 	bic.w	r2, r3, #15
9000745e:	4985      	ldr	r1, [pc, #532]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
90007460:	683b      	ldr	r3, [r7, #0]
90007462:	4313      	orrs	r3, r2
90007464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007466:	4b83      	ldr	r3, [pc, #524]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
90007468:	681b      	ldr	r3, [r3, #0]
9000746a:	f003 030f 	and.w	r3, r3, #15
9000746e:	683a      	ldr	r2, [r7, #0]
90007470:	429a      	cmp	r2, r3
90007472:	d001      	beq.n	90007478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007474:	2301      	movs	r3, #1
90007476:	e184      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007478:	687b      	ldr	r3, [r7, #4]
9000747a:	681b      	ldr	r3, [r3, #0]
9000747c:	f003 0304 	and.w	r3, r3, #4
90007480:	2b00      	cmp	r3, #0
90007482:	d010      	beq.n	900074a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007484:	687b      	ldr	r3, [r7, #4]
90007486:	691a      	ldr	r2, [r3, #16]
90007488:	4b7b      	ldr	r3, [pc, #492]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
9000748a:	699b      	ldr	r3, [r3, #24]
9000748c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007490:	429a      	cmp	r2, r3
90007492:	d908      	bls.n	900074a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007494:	4b78      	ldr	r3, [pc, #480]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007496:	699b      	ldr	r3, [r3, #24]
90007498:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000749c:	687b      	ldr	r3, [r7, #4]
9000749e:	691b      	ldr	r3, [r3, #16]
900074a0:	4975      	ldr	r1, [pc, #468]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900074a2:	4313      	orrs	r3, r2
900074a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900074a6:	687b      	ldr	r3, [r7, #4]
900074a8:	681b      	ldr	r3, [r3, #0]
900074aa:	f003 0308 	and.w	r3, r3, #8
900074ae:	2b00      	cmp	r3, #0
900074b0:	d010      	beq.n	900074d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900074b2:	687b      	ldr	r3, [r7, #4]
900074b4:	695a      	ldr	r2, [r3, #20]
900074b6:	4b70      	ldr	r3, [pc, #448]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900074b8:	69db      	ldr	r3, [r3, #28]
900074ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900074be:	429a      	cmp	r2, r3
900074c0:	d908      	bls.n	900074d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900074c2:	4b6d      	ldr	r3, [pc, #436]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900074c4:	69db      	ldr	r3, [r3, #28]
900074c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900074ca:	687b      	ldr	r3, [r7, #4]
900074cc:	695b      	ldr	r3, [r3, #20]
900074ce:	496a      	ldr	r1, [pc, #424]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900074d0:	4313      	orrs	r3, r2
900074d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900074d4:	687b      	ldr	r3, [r7, #4]
900074d6:	681b      	ldr	r3, [r3, #0]
900074d8:	f003 0310 	and.w	r3, r3, #16
900074dc:	2b00      	cmp	r3, #0
900074de:	d010      	beq.n	90007502 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900074e0:	687b      	ldr	r3, [r7, #4]
900074e2:	699a      	ldr	r2, [r3, #24]
900074e4:	4b64      	ldr	r3, [pc, #400]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900074e6:	69db      	ldr	r3, [r3, #28]
900074e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900074ec:	429a      	cmp	r2, r3
900074ee:	d908      	bls.n	90007502 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900074f0:	4b61      	ldr	r3, [pc, #388]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900074f2:	69db      	ldr	r3, [r3, #28]
900074f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900074f8:	687b      	ldr	r3, [r7, #4]
900074fa:	699b      	ldr	r3, [r3, #24]
900074fc:	495e      	ldr	r1, [pc, #376]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900074fe:	4313      	orrs	r3, r2
90007500:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007502:	687b      	ldr	r3, [r7, #4]
90007504:	681b      	ldr	r3, [r3, #0]
90007506:	f003 0320 	and.w	r3, r3, #32
9000750a:	2b00      	cmp	r3, #0
9000750c:	d010      	beq.n	90007530 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000750e:	687b      	ldr	r3, [r7, #4]
90007510:	69da      	ldr	r2, [r3, #28]
90007512:	4b59      	ldr	r3, [pc, #356]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007514:	6a1b      	ldr	r3, [r3, #32]
90007516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000751a:	429a      	cmp	r2, r3
9000751c:	d908      	bls.n	90007530 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000751e:	4b56      	ldr	r3, [pc, #344]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007520:	6a1b      	ldr	r3, [r3, #32]
90007522:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007526:	687b      	ldr	r3, [r7, #4]
90007528:	69db      	ldr	r3, [r3, #28]
9000752a:	4953      	ldr	r1, [pc, #332]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
9000752c:	4313      	orrs	r3, r2
9000752e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007530:	687b      	ldr	r3, [r7, #4]
90007532:	681b      	ldr	r3, [r3, #0]
90007534:	f003 0302 	and.w	r3, r3, #2
90007538:	2b00      	cmp	r3, #0
9000753a:	d010      	beq.n	9000755e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000753c:	687b      	ldr	r3, [r7, #4]
9000753e:	68da      	ldr	r2, [r3, #12]
90007540:	4b4d      	ldr	r3, [pc, #308]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007542:	699b      	ldr	r3, [r3, #24]
90007544:	f003 030f 	and.w	r3, r3, #15
90007548:	429a      	cmp	r2, r3
9000754a:	d908      	bls.n	9000755e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000754c:	4b4a      	ldr	r3, [pc, #296]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
9000754e:	699b      	ldr	r3, [r3, #24]
90007550:	f023 020f 	bic.w	r2, r3, #15
90007554:	687b      	ldr	r3, [r7, #4]
90007556:	68db      	ldr	r3, [r3, #12]
90007558:	4947      	ldr	r1, [pc, #284]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
9000755a:	4313      	orrs	r3, r2
9000755c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000755e:	687b      	ldr	r3, [r7, #4]
90007560:	681b      	ldr	r3, [r3, #0]
90007562:	f003 0301 	and.w	r3, r3, #1
90007566:	2b00      	cmp	r3, #0
90007568:	d055      	beq.n	90007616 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000756a:	4b43      	ldr	r3, [pc, #268]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
9000756c:	699b      	ldr	r3, [r3, #24]
9000756e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90007572:	687b      	ldr	r3, [r7, #4]
90007574:	689b      	ldr	r3, [r3, #8]
90007576:	4940      	ldr	r1, [pc, #256]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007578:	4313      	orrs	r3, r2
9000757a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000757c:	687b      	ldr	r3, [r7, #4]
9000757e:	685b      	ldr	r3, [r3, #4]
90007580:	2b02      	cmp	r3, #2
90007582:	d107      	bne.n	90007594 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007584:	4b3c      	ldr	r3, [pc, #240]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007586:	681b      	ldr	r3, [r3, #0]
90007588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000758c:	2b00      	cmp	r3, #0
9000758e:	d121      	bne.n	900075d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007590:	2301      	movs	r3, #1
90007592:	e0f6      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007594:	687b      	ldr	r3, [r7, #4]
90007596:	685b      	ldr	r3, [r3, #4]
90007598:	2b03      	cmp	r3, #3
9000759a:	d107      	bne.n	900075ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000759c:	4b36      	ldr	r3, [pc, #216]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
9000759e:	681b      	ldr	r3, [r3, #0]
900075a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900075a4:	2b00      	cmp	r3, #0
900075a6:	d115      	bne.n	900075d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900075a8:	2301      	movs	r3, #1
900075aa:	e0ea      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
900075ac:	687b      	ldr	r3, [r7, #4]
900075ae:	685b      	ldr	r3, [r3, #4]
900075b0:	2b01      	cmp	r3, #1
900075b2:	d107      	bne.n	900075c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900075b4:	4b30      	ldr	r3, [pc, #192]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900075b6:	681b      	ldr	r3, [r3, #0]
900075b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900075bc:	2b00      	cmp	r3, #0
900075be:	d109      	bne.n	900075d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900075c0:	2301      	movs	r3, #1
900075c2:	e0de      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900075c4:	4b2c      	ldr	r3, [pc, #176]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900075c6:	681b      	ldr	r3, [r3, #0]
900075c8:	f003 0304 	and.w	r3, r3, #4
900075cc:	2b00      	cmp	r3, #0
900075ce:	d101      	bne.n	900075d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900075d0:	2301      	movs	r3, #1
900075d2:	e0d6      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
900075d4:	4b28      	ldr	r3, [pc, #160]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900075d6:	691b      	ldr	r3, [r3, #16]
900075d8:	f023 0207 	bic.w	r2, r3, #7
900075dc:	687b      	ldr	r3, [r7, #4]
900075de:	685b      	ldr	r3, [r3, #4]
900075e0:	4925      	ldr	r1, [pc, #148]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
900075e2:	4313      	orrs	r3, r2
900075e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900075e6:	f7fb fe23 	bl	90003230 <HAL_GetTick>
900075ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900075ec:	e00a      	b.n	90007604 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900075ee:	f7fb fe1f 	bl	90003230 <HAL_GetTick>
900075f2:	4602      	mov	r2, r0
900075f4:	697b      	ldr	r3, [r7, #20]
900075f6:	1ad3      	subs	r3, r2, r3
900075f8:	f241 3288 	movw	r2, #5000	@ 0x1388
900075fc:	4293      	cmp	r3, r2
900075fe:	d901      	bls.n	90007604 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90007600:	2303      	movs	r3, #3
90007602:	e0be      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007604:	4b1c      	ldr	r3, [pc, #112]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007606:	691b      	ldr	r3, [r3, #16]
90007608:	f003 0238 	and.w	r2, r3, #56	@ 0x38
9000760c:	687b      	ldr	r3, [r7, #4]
9000760e:	685b      	ldr	r3, [r3, #4]
90007610:	00db      	lsls	r3, r3, #3
90007612:	429a      	cmp	r2, r3
90007614:	d1eb      	bne.n	900075ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007616:	687b      	ldr	r3, [r7, #4]
90007618:	681b      	ldr	r3, [r3, #0]
9000761a:	f003 0302 	and.w	r3, r3, #2
9000761e:	2b00      	cmp	r3, #0
90007620:	d010      	beq.n	90007644 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007622:	687b      	ldr	r3, [r7, #4]
90007624:	68da      	ldr	r2, [r3, #12]
90007626:	4b14      	ldr	r3, [pc, #80]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007628:	699b      	ldr	r3, [r3, #24]
9000762a:	f003 030f 	and.w	r3, r3, #15
9000762e:	429a      	cmp	r2, r3
90007630:	d208      	bcs.n	90007644 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007632:	4b11      	ldr	r3, [pc, #68]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007634:	699b      	ldr	r3, [r3, #24]
90007636:	f023 020f 	bic.w	r2, r3, #15
9000763a:	687b      	ldr	r3, [r7, #4]
9000763c:	68db      	ldr	r3, [r3, #12]
9000763e:	490e      	ldr	r1, [pc, #56]	@ (90007678 <HAL_RCC_ClockConfig+0x244>)
90007640:	4313      	orrs	r3, r2
90007642:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90007644:	4b0b      	ldr	r3, [pc, #44]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
90007646:	681b      	ldr	r3, [r3, #0]
90007648:	f003 030f 	and.w	r3, r3, #15
9000764c:	683a      	ldr	r2, [r7, #0]
9000764e:	429a      	cmp	r2, r3
90007650:	d214      	bcs.n	9000767c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007652:	4b08      	ldr	r3, [pc, #32]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
90007654:	681b      	ldr	r3, [r3, #0]
90007656:	f023 020f 	bic.w	r2, r3, #15
9000765a:	4906      	ldr	r1, [pc, #24]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
9000765c:	683b      	ldr	r3, [r7, #0]
9000765e:	4313      	orrs	r3, r2
90007660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007662:	4b04      	ldr	r3, [pc, #16]	@ (90007674 <HAL_RCC_ClockConfig+0x240>)
90007664:	681b      	ldr	r3, [r3, #0]
90007666:	f003 030f 	and.w	r3, r3, #15
9000766a:	683a      	ldr	r2, [r7, #0]
9000766c:	429a      	cmp	r2, r3
9000766e:	d005      	beq.n	9000767c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007670:	2301      	movs	r3, #1
90007672:	e086      	b.n	90007782 <HAL_RCC_ClockConfig+0x34e>
90007674:	52002000 	.word	0x52002000
90007678:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000767c:	687b      	ldr	r3, [r7, #4]
9000767e:	681b      	ldr	r3, [r3, #0]
90007680:	f003 0304 	and.w	r3, r3, #4
90007684:	2b00      	cmp	r3, #0
90007686:	d010      	beq.n	900076aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007688:	687b      	ldr	r3, [r7, #4]
9000768a:	691a      	ldr	r2, [r3, #16]
9000768c:	4b3f      	ldr	r3, [pc, #252]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
9000768e:	699b      	ldr	r3, [r3, #24]
90007690:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007694:	429a      	cmp	r2, r3
90007696:	d208      	bcs.n	900076aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007698:	4b3c      	ldr	r3, [pc, #240]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
9000769a:	699b      	ldr	r3, [r3, #24]
9000769c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900076a0:	687b      	ldr	r3, [r7, #4]
900076a2:	691b      	ldr	r3, [r3, #16]
900076a4:	4939      	ldr	r1, [pc, #228]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
900076a6:	4313      	orrs	r3, r2
900076a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900076aa:	687b      	ldr	r3, [r7, #4]
900076ac:	681b      	ldr	r3, [r3, #0]
900076ae:	f003 0308 	and.w	r3, r3, #8
900076b2:	2b00      	cmp	r3, #0
900076b4:	d010      	beq.n	900076d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900076b6:	687b      	ldr	r3, [r7, #4]
900076b8:	695a      	ldr	r2, [r3, #20]
900076ba:	4b34      	ldr	r3, [pc, #208]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
900076bc:	69db      	ldr	r3, [r3, #28]
900076be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900076c2:	429a      	cmp	r2, r3
900076c4:	d208      	bcs.n	900076d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900076c6:	4b31      	ldr	r3, [pc, #196]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
900076c8:	69db      	ldr	r3, [r3, #28]
900076ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900076ce:	687b      	ldr	r3, [r7, #4]
900076d0:	695b      	ldr	r3, [r3, #20]
900076d2:	492e      	ldr	r1, [pc, #184]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
900076d4:	4313      	orrs	r3, r2
900076d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900076d8:	687b      	ldr	r3, [r7, #4]
900076da:	681b      	ldr	r3, [r3, #0]
900076dc:	f003 0310 	and.w	r3, r3, #16
900076e0:	2b00      	cmp	r3, #0
900076e2:	d010      	beq.n	90007706 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900076e4:	687b      	ldr	r3, [r7, #4]
900076e6:	699a      	ldr	r2, [r3, #24]
900076e8:	4b28      	ldr	r3, [pc, #160]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
900076ea:	69db      	ldr	r3, [r3, #28]
900076ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900076f0:	429a      	cmp	r2, r3
900076f2:	d208      	bcs.n	90007706 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900076f4:	4b25      	ldr	r3, [pc, #148]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
900076f6:	69db      	ldr	r3, [r3, #28]
900076f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900076fc:	687b      	ldr	r3, [r7, #4]
900076fe:	699b      	ldr	r3, [r3, #24]
90007700:	4922      	ldr	r1, [pc, #136]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
90007702:	4313      	orrs	r3, r2
90007704:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007706:	687b      	ldr	r3, [r7, #4]
90007708:	681b      	ldr	r3, [r3, #0]
9000770a:	f003 0320 	and.w	r3, r3, #32
9000770e:	2b00      	cmp	r3, #0
90007710:	d010      	beq.n	90007734 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90007712:	687b      	ldr	r3, [r7, #4]
90007714:	69da      	ldr	r2, [r3, #28]
90007716:	4b1d      	ldr	r3, [pc, #116]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
90007718:	6a1b      	ldr	r3, [r3, #32]
9000771a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000771e:	429a      	cmp	r2, r3
90007720:	d208      	bcs.n	90007734 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90007722:	4b1a      	ldr	r3, [pc, #104]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
90007724:	6a1b      	ldr	r3, [r3, #32]
90007726:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000772a:	687b      	ldr	r3, [r7, #4]
9000772c:	69db      	ldr	r3, [r3, #28]
9000772e:	4917      	ldr	r1, [pc, #92]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
90007730:	4313      	orrs	r3, r2
90007732:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007734:	f000 f834 	bl	900077a0 <HAL_RCC_GetSysClockFreq>
90007738:	4602      	mov	r2, r0
9000773a:	4b14      	ldr	r3, [pc, #80]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
9000773c:	699b      	ldr	r3, [r3, #24]
9000773e:	0a1b      	lsrs	r3, r3, #8
90007740:	f003 030f 	and.w	r3, r3, #15
90007744:	4912      	ldr	r1, [pc, #72]	@ (90007790 <HAL_RCC_ClockConfig+0x35c>)
90007746:	5ccb      	ldrb	r3, [r1, r3]
90007748:	f003 031f 	and.w	r3, r3, #31
9000774c:	fa22 f303 	lsr.w	r3, r2, r3
90007750:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007752:	4b0e      	ldr	r3, [pc, #56]	@ (9000778c <HAL_RCC_ClockConfig+0x358>)
90007754:	699b      	ldr	r3, [r3, #24]
90007756:	f003 030f 	and.w	r3, r3, #15
9000775a:	4a0d      	ldr	r2, [pc, #52]	@ (90007790 <HAL_RCC_ClockConfig+0x35c>)
9000775c:	5cd3      	ldrb	r3, [r2, r3]
9000775e:	f003 031f 	and.w	r3, r3, #31
90007762:	693a      	ldr	r2, [r7, #16]
90007764:	fa22 f303 	lsr.w	r3, r2, r3
90007768:	4a0a      	ldr	r2, [pc, #40]	@ (90007794 <HAL_RCC_ClockConfig+0x360>)
9000776a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000776c:	4a0a      	ldr	r2, [pc, #40]	@ (90007798 <HAL_RCC_ClockConfig+0x364>)
9000776e:	693b      	ldr	r3, [r7, #16]
90007770:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007772:	4b0a      	ldr	r3, [pc, #40]	@ (9000779c <HAL_RCC_ClockConfig+0x368>)
90007774:	681b      	ldr	r3, [r3, #0]
90007776:	4618      	mov	r0, r3
90007778:	f7fb fd10 	bl	9000319c <HAL_InitTick>
9000777c:	4603      	mov	r3, r0
9000777e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007780:	7bfb      	ldrb	r3, [r7, #15]
}
90007782:	4618      	mov	r0, r3
90007784:	3718      	adds	r7, #24
90007786:	46bd      	mov	sp, r7
90007788:	bd80      	pop	{r7, pc}
9000778a:	bf00      	nop
9000778c:	58024400 	.word	0x58024400
90007790:	9000d730 	.word	0x9000d730
90007794:	20000004 	.word	0x20000004
90007798:	20000000 	.word	0x20000000
9000779c:	20000008 	.word	0x20000008

900077a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
900077a0:	b480      	push	{r7}
900077a2:	b089      	sub	sp, #36	@ 0x24
900077a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
900077a6:	4bb3      	ldr	r3, [pc, #716]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
900077a8:	691b      	ldr	r3, [r3, #16]
900077aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900077ae:	2b18      	cmp	r3, #24
900077b0:	f200 8155 	bhi.w	90007a5e <HAL_RCC_GetSysClockFreq+0x2be>
900077b4:	a201      	add	r2, pc, #4	@ (adr r2, 900077bc <HAL_RCC_GetSysClockFreq+0x1c>)
900077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900077ba:	bf00      	nop
900077bc:	90007821 	.word	0x90007821
900077c0:	90007a5f 	.word	0x90007a5f
900077c4:	90007a5f 	.word	0x90007a5f
900077c8:	90007a5f 	.word	0x90007a5f
900077cc:	90007a5f 	.word	0x90007a5f
900077d0:	90007a5f 	.word	0x90007a5f
900077d4:	90007a5f 	.word	0x90007a5f
900077d8:	90007a5f 	.word	0x90007a5f
900077dc:	90007847 	.word	0x90007847
900077e0:	90007a5f 	.word	0x90007a5f
900077e4:	90007a5f 	.word	0x90007a5f
900077e8:	90007a5f 	.word	0x90007a5f
900077ec:	90007a5f 	.word	0x90007a5f
900077f0:	90007a5f 	.word	0x90007a5f
900077f4:	90007a5f 	.word	0x90007a5f
900077f8:	90007a5f 	.word	0x90007a5f
900077fc:	9000784d 	.word	0x9000784d
90007800:	90007a5f 	.word	0x90007a5f
90007804:	90007a5f 	.word	0x90007a5f
90007808:	90007a5f 	.word	0x90007a5f
9000780c:	90007a5f 	.word	0x90007a5f
90007810:	90007a5f 	.word	0x90007a5f
90007814:	90007a5f 	.word	0x90007a5f
90007818:	90007a5f 	.word	0x90007a5f
9000781c:	90007853 	.word	0x90007853
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007820:	4b94      	ldr	r3, [pc, #592]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007822:	681b      	ldr	r3, [r3, #0]
90007824:	f003 0320 	and.w	r3, r3, #32
90007828:	2b00      	cmp	r3, #0
9000782a:	d009      	beq.n	90007840 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000782c:	4b91      	ldr	r3, [pc, #580]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000782e:	681b      	ldr	r3, [r3, #0]
90007830:	08db      	lsrs	r3, r3, #3
90007832:	f003 0303 	and.w	r3, r3, #3
90007836:	4a90      	ldr	r2, [pc, #576]	@ (90007a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007838:	fa22 f303 	lsr.w	r3, r2, r3
9000783c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
9000783e:	e111      	b.n	90007a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90007840:	4b8d      	ldr	r3, [pc, #564]	@ (90007a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007842:	61bb      	str	r3, [r7, #24]
      break;
90007844:	e10e      	b.n	90007a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90007846:	4b8d      	ldr	r3, [pc, #564]	@ (90007a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
90007848:	61bb      	str	r3, [r7, #24]
      break;
9000784a:	e10b      	b.n	90007a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
9000784c:	4b8c      	ldr	r3, [pc, #560]	@ (90007a80 <HAL_RCC_GetSysClockFreq+0x2e0>)
9000784e:	61bb      	str	r3, [r7, #24]
      break;
90007850:	e108      	b.n	90007a64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007852:	4b88      	ldr	r3, [pc, #544]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007856:	f003 0303 	and.w	r3, r3, #3
9000785a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000785c:	4b85      	ldr	r3, [pc, #532]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000785e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007860:	091b      	lsrs	r3, r3, #4
90007862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007866:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007868:	4b82      	ldr	r3, [pc, #520]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000786c:	f003 0301 	and.w	r3, r3, #1
90007870:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007872:	4b80      	ldr	r3, [pc, #512]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007876:	08db      	lsrs	r3, r3, #3
90007878:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000787c:	68fa      	ldr	r2, [r7, #12]
9000787e:	fb02 f303 	mul.w	r3, r2, r3
90007882:	ee07 3a90 	vmov	s15, r3
90007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000788a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
9000788e:	693b      	ldr	r3, [r7, #16]
90007890:	2b00      	cmp	r3, #0
90007892:	f000 80e1 	beq.w	90007a58 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007896:	697b      	ldr	r3, [r7, #20]
90007898:	2b02      	cmp	r3, #2
9000789a:	f000 8083 	beq.w	900079a4 <HAL_RCC_GetSysClockFreq+0x204>
9000789e:	697b      	ldr	r3, [r7, #20]
900078a0:	2b02      	cmp	r3, #2
900078a2:	f200 80a1 	bhi.w	900079e8 <HAL_RCC_GetSysClockFreq+0x248>
900078a6:	697b      	ldr	r3, [r7, #20]
900078a8:	2b00      	cmp	r3, #0
900078aa:	d003      	beq.n	900078b4 <HAL_RCC_GetSysClockFreq+0x114>
900078ac:	697b      	ldr	r3, [r7, #20]
900078ae:	2b01      	cmp	r3, #1
900078b0:	d056      	beq.n	90007960 <HAL_RCC_GetSysClockFreq+0x1c0>
900078b2:	e099      	b.n	900079e8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900078b4:	4b6f      	ldr	r3, [pc, #444]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078b6:	681b      	ldr	r3, [r3, #0]
900078b8:	f003 0320 	and.w	r3, r3, #32
900078bc:	2b00      	cmp	r3, #0
900078be:	d02d      	beq.n	9000791c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900078c0:	4b6c      	ldr	r3, [pc, #432]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078c2:	681b      	ldr	r3, [r3, #0]
900078c4:	08db      	lsrs	r3, r3, #3
900078c6:	f003 0303 	and.w	r3, r3, #3
900078ca:	4a6b      	ldr	r2, [pc, #428]	@ (90007a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
900078cc:	fa22 f303 	lsr.w	r3, r2, r3
900078d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900078d2:	687b      	ldr	r3, [r7, #4]
900078d4:	ee07 3a90 	vmov	s15, r3
900078d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900078dc:	693b      	ldr	r3, [r7, #16]
900078de:	ee07 3a90 	vmov	s15, r3
900078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900078ea:	4b62      	ldr	r3, [pc, #392]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
900078f2:	ee07 3a90 	vmov	s15, r3
900078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900078fa:	ed97 6a02 	vldr	s12, [r7, #8]
900078fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007a84 <HAL_RCC_GetSysClockFreq+0x2e4>
90007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000790a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007912:	ee67 7a27 	vmul.f32	s15, s14, s15
90007916:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
9000791a:	e087      	b.n	90007a2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000791c:	693b      	ldr	r3, [r7, #16]
9000791e:	ee07 3a90 	vmov	s15, r3
90007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007926:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007a88 <HAL_RCC_GetSysClockFreq+0x2e8>
9000792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000792e:	4b51      	ldr	r3, [pc, #324]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007936:	ee07 3a90 	vmov	s15, r3
9000793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000793e:	ed97 6a02 	vldr	s12, [r7, #8]
90007942:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007a84 <HAL_RCC_GetSysClockFreq+0x2e4>
90007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000794e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007956:	ee67 7a27 	vmul.f32	s15, s14, s15
9000795a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000795e:	e065      	b.n	90007a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007960:	693b      	ldr	r3, [r7, #16]
90007962:	ee07 3a90 	vmov	s15, r3
90007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000796a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007a8c <HAL_RCC_GetSysClockFreq+0x2ec>
9000796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007972:	4b40      	ldr	r3, [pc, #256]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000797a:	ee07 3a90 	vmov	s15, r3
9000797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007982:	ed97 6a02 	vldr	s12, [r7, #8]
90007986:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007a84 <HAL_RCC_GetSysClockFreq+0x2e4>
9000798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000799a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000799e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900079a2:	e043      	b.n	90007a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079a4:	693b      	ldr	r3, [r7, #16]
900079a6:	ee07 3a90 	vmov	s15, r3
900079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007a90 <HAL_RCC_GetSysClockFreq+0x2f0>
900079b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079b6:	4b2f      	ldr	r3, [pc, #188]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079be:	ee07 3a90 	vmov	s15, r3
900079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079c6:	ed97 6a02 	vldr	s12, [r7, #8]
900079ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007a84 <HAL_RCC_GetSysClockFreq+0x2e4>
900079ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079da:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079de:	ee67 7a27 	vmul.f32	s15, s14, s15
900079e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900079e6:	e021      	b.n	90007a2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079e8:	693b      	ldr	r3, [r7, #16]
900079ea:	ee07 3a90 	vmov	s15, r3
900079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007a8c <HAL_RCC_GetSysClockFreq+0x2ec>
900079f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079fa:	4b1e      	ldr	r3, [pc, #120]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a02:	ee07 3a90 	vmov	s15, r3
90007a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a0a:	ed97 6a02 	vldr	s12, [r7, #8]
90007a0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007a84 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a22:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007a2c:	4b11      	ldr	r3, [pc, #68]	@ (90007a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a30:	0a5b      	lsrs	r3, r3, #9
90007a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007a36:	3301      	adds	r3, #1
90007a38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007a3a:	683b      	ldr	r3, [r7, #0]
90007a3c:	ee07 3a90 	vmov	s15, r3
90007a40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007a44:	edd7 6a07 	vldr	s13, [r7, #28]
90007a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007a50:	ee17 3a90 	vmov	r3, s15
90007a54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007a56:	e005      	b.n	90007a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007a58:	2300      	movs	r3, #0
90007a5a:	61bb      	str	r3, [r7, #24]
      break;
90007a5c:	e002      	b.n	90007a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007a5e:	4b07      	ldr	r3, [pc, #28]	@ (90007a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
90007a60:	61bb      	str	r3, [r7, #24]
      break;
90007a62:	bf00      	nop
  }

  return sysclockfreq;
90007a64:	69bb      	ldr	r3, [r7, #24]
}
90007a66:	4618      	mov	r0, r3
90007a68:	3724      	adds	r7, #36	@ 0x24
90007a6a:	46bd      	mov	sp, r7
90007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
90007a70:	4770      	bx	lr
90007a72:	bf00      	nop
90007a74:	58024400 	.word	0x58024400
90007a78:	03d09000 	.word	0x03d09000
90007a7c:	003d0900 	.word	0x003d0900
90007a80:	017d7840 	.word	0x017d7840
90007a84:	46000000 	.word	0x46000000
90007a88:	4c742400 	.word	0x4c742400
90007a8c:	4a742400 	.word	0x4a742400
90007a90:	4bbebc20 	.word	0x4bbebc20

90007a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007a94:	b580      	push	{r7, lr}
90007a96:	b082      	sub	sp, #8
90007a98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007a9a:	f7ff fe81 	bl	900077a0 <HAL_RCC_GetSysClockFreq>
90007a9e:	4602      	mov	r2, r0
90007aa0:	4b10      	ldr	r3, [pc, #64]	@ (90007ae4 <HAL_RCC_GetHCLKFreq+0x50>)
90007aa2:	699b      	ldr	r3, [r3, #24]
90007aa4:	0a1b      	lsrs	r3, r3, #8
90007aa6:	f003 030f 	and.w	r3, r3, #15
90007aaa:	490f      	ldr	r1, [pc, #60]	@ (90007ae8 <HAL_RCC_GetHCLKFreq+0x54>)
90007aac:	5ccb      	ldrb	r3, [r1, r3]
90007aae:	f003 031f 	and.w	r3, r3, #31
90007ab2:	fa22 f303 	lsr.w	r3, r2, r3
90007ab6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007ab8:	4b0a      	ldr	r3, [pc, #40]	@ (90007ae4 <HAL_RCC_GetHCLKFreq+0x50>)
90007aba:	699b      	ldr	r3, [r3, #24]
90007abc:	f003 030f 	and.w	r3, r3, #15
90007ac0:	4a09      	ldr	r2, [pc, #36]	@ (90007ae8 <HAL_RCC_GetHCLKFreq+0x54>)
90007ac2:	5cd3      	ldrb	r3, [r2, r3]
90007ac4:	f003 031f 	and.w	r3, r3, #31
90007ac8:	687a      	ldr	r2, [r7, #4]
90007aca:	fa22 f303 	lsr.w	r3, r2, r3
90007ace:	4a07      	ldr	r2, [pc, #28]	@ (90007aec <HAL_RCC_GetHCLKFreq+0x58>)
90007ad0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007ad2:	4a07      	ldr	r2, [pc, #28]	@ (90007af0 <HAL_RCC_GetHCLKFreq+0x5c>)
90007ad4:	687b      	ldr	r3, [r7, #4]
90007ad6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007ad8:	4b04      	ldr	r3, [pc, #16]	@ (90007aec <HAL_RCC_GetHCLKFreq+0x58>)
90007ada:	681b      	ldr	r3, [r3, #0]
}
90007adc:	4618      	mov	r0, r3
90007ade:	3708      	adds	r7, #8
90007ae0:	46bd      	mov	sp, r7
90007ae2:	bd80      	pop	{r7, pc}
90007ae4:	58024400 	.word	0x58024400
90007ae8:	9000d730 	.word	0x9000d730
90007aec:	20000004 	.word	0x20000004
90007af0:	20000000 	.word	0x20000000

90007af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007af4:	b580      	push	{r7, lr}
90007af6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007af8:	f7ff ffcc 	bl	90007a94 <HAL_RCC_GetHCLKFreq>
90007afc:	4602      	mov	r2, r0
90007afe:	4b06      	ldr	r3, [pc, #24]	@ (90007b18 <HAL_RCC_GetPCLK1Freq+0x24>)
90007b00:	69db      	ldr	r3, [r3, #28]
90007b02:	091b      	lsrs	r3, r3, #4
90007b04:	f003 0307 	and.w	r3, r3, #7
90007b08:	4904      	ldr	r1, [pc, #16]	@ (90007b1c <HAL_RCC_GetPCLK1Freq+0x28>)
90007b0a:	5ccb      	ldrb	r3, [r1, r3]
90007b0c:	f003 031f 	and.w	r3, r3, #31
90007b10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007b14:	4618      	mov	r0, r3
90007b16:	bd80      	pop	{r7, pc}
90007b18:	58024400 	.word	0x58024400
90007b1c:	9000d730 	.word	0x9000d730

90007b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007b20:	b580      	push	{r7, lr}
90007b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007b24:	f7ff ffb6 	bl	90007a94 <HAL_RCC_GetHCLKFreq>
90007b28:	4602      	mov	r2, r0
90007b2a:	4b06      	ldr	r3, [pc, #24]	@ (90007b44 <HAL_RCC_GetPCLK2Freq+0x24>)
90007b2c:	69db      	ldr	r3, [r3, #28]
90007b2e:	0a1b      	lsrs	r3, r3, #8
90007b30:	f003 0307 	and.w	r3, r3, #7
90007b34:	4904      	ldr	r1, [pc, #16]	@ (90007b48 <HAL_RCC_GetPCLK2Freq+0x28>)
90007b36:	5ccb      	ldrb	r3, [r1, r3]
90007b38:	f003 031f 	and.w	r3, r3, #31
90007b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007b40:	4618      	mov	r0, r3
90007b42:	bd80      	pop	{r7, pc}
90007b44:	58024400 	.word	0x58024400
90007b48:	9000d730 	.word	0x9000d730

90007b4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007b50:	b0ca      	sub	sp, #296	@ 0x128
90007b52:	af00      	add	r7, sp, #0
90007b54:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007b58:	2300      	movs	r3, #0
90007b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007b5e:	2300      	movs	r3, #0
90007b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
90007b6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007b70:	2500      	movs	r5, #0
90007b72:	ea54 0305 	orrs.w	r3, r4, r5
90007b76:	d049      	beq.n	90007c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007b7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007b82:	d02f      	beq.n	90007be4 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007b88:	d828      	bhi.n	90007bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
90007b8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007b8e:	d01a      	beq.n	90007bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007b94:	d822      	bhi.n	90007bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
90007b96:	2b00      	cmp	r3, #0
90007b98:	d003      	beq.n	90007ba2 <HAL_RCCEx_PeriphCLKConfig+0x56>
90007b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007b9e:	d007      	beq.n	90007bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007ba0:	e01c      	b.n	90007bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ba2:	4bb8      	ldr	r3, [pc, #736]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ba6:	4ab7      	ldr	r2, [pc, #732]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007bae:	e01a      	b.n	90007be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bb4:	3308      	adds	r3, #8
90007bb6:	2102      	movs	r1, #2
90007bb8:	4618      	mov	r0, r3
90007bba:	f001 fc8f 	bl	900094dc <RCCEx_PLL2_Config>
90007bbe:	4603      	mov	r3, r0
90007bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007bc4:	e00f      	b.n	90007be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bca:	3328      	adds	r3, #40	@ 0x28
90007bcc:	2102      	movs	r1, #2
90007bce:	4618      	mov	r0, r3
90007bd0:	f001 fd36 	bl	90009640 <RCCEx_PLL3_Config>
90007bd4:	4603      	mov	r3, r0
90007bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007bda:	e004      	b.n	90007be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007bdc:	2301      	movs	r3, #1
90007bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007be2:	e000      	b.n	90007be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007be4:	bf00      	nop
    }

    if (ret == HAL_OK)
90007be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007bea:	2b00      	cmp	r3, #0
90007bec:	d10a      	bne.n	90007c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007bee:	4ba5      	ldr	r3, [pc, #660]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007bf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007bfc:	4aa1      	ldr	r2, [pc, #644]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bfe:	430b      	orrs	r3, r1
90007c00:	6513      	str	r3, [r2, #80]	@ 0x50
90007c02:	e003      	b.n	90007c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007c18:	f04f 0900 	mov.w	r9, #0
90007c1c:	ea58 0309 	orrs.w	r3, r8, r9
90007c20:	d047      	beq.n	90007cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007c28:	2b04      	cmp	r3, #4
90007c2a:	d82a      	bhi.n	90007c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
90007c2c:	a201      	add	r2, pc, #4	@ (adr r2, 90007c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007c32:	bf00      	nop
90007c34:	90007c49 	.word	0x90007c49
90007c38:	90007c57 	.word	0x90007c57
90007c3c:	90007c6d 	.word	0x90007c6d
90007c40:	90007c8b 	.word	0x90007c8b
90007c44:	90007c8b 	.word	0x90007c8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c48:	4b8e      	ldr	r3, [pc, #568]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c4c:	4a8d      	ldr	r2, [pc, #564]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c54:	e01a      	b.n	90007c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c5a:	3308      	adds	r3, #8
90007c5c:	2100      	movs	r1, #0
90007c5e:	4618      	mov	r0, r3
90007c60:	f001 fc3c 	bl	900094dc <RCCEx_PLL2_Config>
90007c64:	4603      	mov	r3, r0
90007c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c6a:	e00f      	b.n	90007c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c70:	3328      	adds	r3, #40	@ 0x28
90007c72:	2100      	movs	r1, #0
90007c74:	4618      	mov	r0, r3
90007c76:	f001 fce3 	bl	90009640 <RCCEx_PLL3_Config>
90007c7a:	4603      	mov	r3, r0
90007c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c80:	e004      	b.n	90007c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007c82:	2301      	movs	r3, #1
90007c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c88:	e000      	b.n	90007c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c90:	2b00      	cmp	r3, #0
90007c92:	d10a      	bne.n	90007caa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007c94:	4b7b      	ldr	r3, [pc, #492]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007c98:	f023 0107 	bic.w	r1, r3, #7
90007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007ca2:	4a78      	ldr	r2, [pc, #480]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ca4:	430b      	orrs	r3, r1
90007ca6:	6513      	str	r3, [r2, #80]	@ 0x50
90007ca8:	e003      	b.n	90007cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007cba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007cbe:	f04f 0b00 	mov.w	fp, #0
90007cc2:	ea5a 030b 	orrs.w	r3, sl, fp
90007cc6:	d04c      	beq.n	90007d62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007cd2:	d030      	beq.n	90007d36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007cd8:	d829      	bhi.n	90007d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007cda:	2bc0      	cmp	r3, #192	@ 0xc0
90007cdc:	d02d      	beq.n	90007d3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007cde:	2bc0      	cmp	r3, #192	@ 0xc0
90007ce0:	d825      	bhi.n	90007d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007ce2:	2b80      	cmp	r3, #128	@ 0x80
90007ce4:	d018      	beq.n	90007d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007ce6:	2b80      	cmp	r3, #128	@ 0x80
90007ce8:	d821      	bhi.n	90007d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007cea:	2b00      	cmp	r3, #0
90007cec:	d002      	beq.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007cee:	2b40      	cmp	r3, #64	@ 0x40
90007cf0:	d007      	beq.n	90007d02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007cf2:	e01c      	b.n	90007d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007cf4:	4b63      	ldr	r3, [pc, #396]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cf8:	4a62      	ldr	r2, [pc, #392]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d00:	e01c      	b.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d06:	3308      	adds	r3, #8
90007d08:	2100      	movs	r1, #0
90007d0a:	4618      	mov	r0, r3
90007d0c:	f001 fbe6 	bl	900094dc <RCCEx_PLL2_Config>
90007d10:	4603      	mov	r3, r0
90007d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d16:	e011      	b.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d1c:	3328      	adds	r3, #40	@ 0x28
90007d1e:	2100      	movs	r1, #0
90007d20:	4618      	mov	r0, r3
90007d22:	f001 fc8d 	bl	90009640 <RCCEx_PLL3_Config>
90007d26:	4603      	mov	r3, r0
90007d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d2c:	e006      	b.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007d2e:	2301      	movs	r3, #1
90007d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007d34:	e002      	b.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007d36:	bf00      	nop
90007d38:	e000      	b.n	90007d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d40:	2b00      	cmp	r3, #0
90007d42:	d10a      	bne.n	90007d5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007d44:	4b4f      	ldr	r3, [pc, #316]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007d48:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007d52:	4a4c      	ldr	r2, [pc, #304]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d54:	430b      	orrs	r3, r1
90007d56:	6513      	str	r3, [r2, #80]	@ 0x50
90007d58:	e003      	b.n	90007d62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d6a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007d6e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007d72:	2300      	movs	r3, #0
90007d74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007d78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007d7c:	460b      	mov	r3, r1
90007d7e:	4313      	orrs	r3, r2
90007d80:	d053      	beq.n	90007e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007d8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007d8e:	d035      	beq.n	90007dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007d90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007d94:	d82e      	bhi.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007d96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007d9a:	d031      	beq.n	90007e00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007da0:	d828      	bhi.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007da2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007da6:	d01a      	beq.n	90007dde <HAL_RCCEx_PeriphCLKConfig+0x292>
90007da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007dac:	d822      	bhi.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007dae:	2b00      	cmp	r3, #0
90007db0:	d003      	beq.n	90007dba <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007db6:	d007      	beq.n	90007dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007db8:	e01c      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007dba:	4b32      	ldr	r3, [pc, #200]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dbe:	4a31      	ldr	r2, [pc, #196]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007dc6:	e01c      	b.n	90007e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dcc:	3308      	adds	r3, #8
90007dce:	2100      	movs	r1, #0
90007dd0:	4618      	mov	r0, r3
90007dd2:	f001 fb83 	bl	900094dc <RCCEx_PLL2_Config>
90007dd6:	4603      	mov	r3, r0
90007dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007ddc:	e011      	b.n	90007e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007de2:	3328      	adds	r3, #40	@ 0x28
90007de4:	2100      	movs	r1, #0
90007de6:	4618      	mov	r0, r3
90007de8:	f001 fc2a 	bl	90009640 <RCCEx_PLL3_Config>
90007dec:	4603      	mov	r3, r0
90007dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007df2:	e006      	b.n	90007e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007df4:	2301      	movs	r3, #1
90007df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007dfa:	e002      	b.n	90007e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007dfc:	bf00      	nop
90007dfe:	e000      	b.n	90007e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007e00:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e06:	2b00      	cmp	r3, #0
90007e08:	d10b      	bne.n	90007e22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007e0a:	4b1e      	ldr	r3, [pc, #120]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007e0e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007e1a:	4a1a      	ldr	r2, [pc, #104]	@ (90007e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e1c:	430b      	orrs	r3, r1
90007e1e:	6593      	str	r3, [r2, #88]	@ 0x58
90007e20:	e003      	b.n	90007e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e32:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007e36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007e3a:	2300      	movs	r3, #0
90007e3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007e40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007e44:	460b      	mov	r3, r1
90007e46:	4313      	orrs	r3, r2
90007e48:	d056      	beq.n	90007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007e52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007e56:	d038      	beq.n	90007eca <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007e5c:	d831      	bhi.n	90007ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007e62:	d034      	beq.n	90007ece <HAL_RCCEx_PeriphCLKConfig+0x382>
90007e64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007e68:	d82b      	bhi.n	90007ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007e6e:	d01d      	beq.n	90007eac <HAL_RCCEx_PeriphCLKConfig+0x360>
90007e70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007e74:	d825      	bhi.n	90007ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e76:	2b00      	cmp	r3, #0
90007e78:	d006      	beq.n	90007e88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007e7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007e7e:	d00a      	beq.n	90007e96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007e80:	e01f      	b.n	90007ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e82:	bf00      	nop
90007e84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e88:	4ba2      	ldr	r3, [pc, #648]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e8c:	4aa1      	ldr	r2, [pc, #644]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e94:	e01c      	b.n	90007ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e9a:	3308      	adds	r3, #8
90007e9c:	2100      	movs	r1, #0
90007e9e:	4618      	mov	r0, r3
90007ea0:	f001 fb1c 	bl	900094dc <RCCEx_PLL2_Config>
90007ea4:	4603      	mov	r3, r0
90007ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007eaa:	e011      	b.n	90007ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007eb0:	3328      	adds	r3, #40	@ 0x28
90007eb2:	2100      	movs	r1, #0
90007eb4:	4618      	mov	r0, r3
90007eb6:	f001 fbc3 	bl	90009640 <RCCEx_PLL3_Config>
90007eba:	4603      	mov	r3, r0
90007ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ec0:	e006      	b.n	90007ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007ec2:	2301      	movs	r3, #1
90007ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ec8:	e002      	b.n	90007ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007eca:	bf00      	nop
90007ecc:	e000      	b.n	90007ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007ece:	bf00      	nop
    }

    if (ret == HAL_OK)
90007ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ed4:	2b00      	cmp	r3, #0
90007ed6:	d10b      	bne.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007ed8:	4b8e      	ldr	r3, [pc, #568]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007edc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ee4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007ee8:	4a8a      	ldr	r2, [pc, #552]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007eea:	430b      	orrs	r3, r1
90007eec:	6593      	str	r3, [r2, #88]	@ 0x58
90007eee:	e003      	b.n	90007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007f08:	2300      	movs	r3, #0
90007f0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007f0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007f12:	460b      	mov	r3, r1
90007f14:	4313      	orrs	r3, r2
90007f16:	d03a      	beq.n	90007f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f1e:	2b30      	cmp	r3, #48	@ 0x30
90007f20:	d01f      	beq.n	90007f62 <HAL_RCCEx_PeriphCLKConfig+0x416>
90007f22:	2b30      	cmp	r3, #48	@ 0x30
90007f24:	d819      	bhi.n	90007f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007f26:	2b20      	cmp	r3, #32
90007f28:	d00c      	beq.n	90007f44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007f2a:	2b20      	cmp	r3, #32
90007f2c:	d815      	bhi.n	90007f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007f2e:	2b00      	cmp	r3, #0
90007f30:	d019      	beq.n	90007f66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007f32:	2b10      	cmp	r3, #16
90007f34:	d111      	bne.n	90007f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f36:	4b77      	ldr	r3, [pc, #476]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f3a:	4a76      	ldr	r2, [pc, #472]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007f42:	e011      	b.n	90007f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f48:	3308      	adds	r3, #8
90007f4a:	2102      	movs	r1, #2
90007f4c:	4618      	mov	r0, r3
90007f4e:	f001 fac5 	bl	900094dc <RCCEx_PLL2_Config>
90007f52:	4603      	mov	r3, r0
90007f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007f58:	e006      	b.n	90007f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007f5a:	2301      	movs	r3, #1
90007f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f60:	e002      	b.n	90007f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007f62:	bf00      	nop
90007f64:	e000      	b.n	90007f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007f66:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f6c:	2b00      	cmp	r3, #0
90007f6e:	d10a      	bne.n	90007f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007f70:	4b68      	ldr	r3, [pc, #416]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90007f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f7e:	4a65      	ldr	r2, [pc, #404]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f80:	430b      	orrs	r3, r1
90007f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
90007f84:	e003      	b.n	90007f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90007f9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90007f9e:	2300      	movs	r3, #0
90007fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90007fa4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90007fa8:	460b      	mov	r3, r1
90007faa:	4313      	orrs	r3, r2
90007fac:	d051      	beq.n	90008052 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007fb8:	d035      	beq.n	90008026 <HAL_RCCEx_PeriphCLKConfig+0x4da>
90007fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007fbe:	d82e      	bhi.n	9000801e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007fc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007fc4:	d031      	beq.n	9000802a <HAL_RCCEx_PeriphCLKConfig+0x4de>
90007fc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007fca:	d828      	bhi.n	9000801e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007fd0:	d01a      	beq.n	90008008 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90007fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007fd6:	d822      	bhi.n	9000801e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007fd8:	2b00      	cmp	r3, #0
90007fda:	d003      	beq.n	90007fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>
90007fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90007fe0:	d007      	beq.n	90007ff2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90007fe2:	e01c      	b.n	9000801e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007fe4:	4b4b      	ldr	r3, [pc, #300]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fe8:	4a4a      	ldr	r2, [pc, #296]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007ff0:	e01c      	b.n	9000802c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ff6:	3308      	adds	r3, #8
90007ff8:	2100      	movs	r1, #0
90007ffa:	4618      	mov	r0, r3
90007ffc:	f001 fa6e 	bl	900094dc <RCCEx_PLL2_Config>
90008000:	4603      	mov	r3, r0
90008002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008006:	e011      	b.n	9000802c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000800c:	3328      	adds	r3, #40	@ 0x28
9000800e:	2100      	movs	r1, #0
90008010:	4618      	mov	r0, r3
90008012:	f001 fb15 	bl	90009640 <RCCEx_PLL3_Config>
90008016:	4603      	mov	r3, r0
90008018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000801c:	e006      	b.n	9000802c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000801e:	2301      	movs	r3, #1
90008020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008024:	e002      	b.n	9000802c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008026:	bf00      	nop
90008028:	e000      	b.n	9000802c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000802a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000802c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008030:	2b00      	cmp	r3, #0
90008032:	d10a      	bne.n	9000804a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90008034:	4b37      	ldr	r3, [pc, #220]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008038:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
9000803c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008042:	4a34      	ldr	r2, [pc, #208]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008044:	430b      	orrs	r3, r1
90008046:	6513      	str	r3, [r2, #80]	@ 0x50
90008048:	e003      	b.n	90008052 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000804a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000804e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008056:	e9d3 2300 	ldrd	r2, r3, [r3]
9000805a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
9000805e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90008062:	2300      	movs	r3, #0
90008064:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008068:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
9000806c:	460b      	mov	r3, r1
9000806e:	4313      	orrs	r3, r2
90008070:	d056      	beq.n	90008120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000807c:	d033      	beq.n	900080e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000807e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008082:	d82c      	bhi.n	900080de <HAL_RCCEx_PeriphCLKConfig+0x592>
90008084:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008088:	d02f      	beq.n	900080ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
9000808a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000808e:	d826      	bhi.n	900080de <HAL_RCCEx_PeriphCLKConfig+0x592>
90008090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008094:	d02b      	beq.n	900080ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90008096:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
9000809a:	d820      	bhi.n	900080de <HAL_RCCEx_PeriphCLKConfig+0x592>
9000809c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900080a0:	d012      	beq.n	900080c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
900080a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900080a6:	d81a      	bhi.n	900080de <HAL_RCCEx_PeriphCLKConfig+0x592>
900080a8:	2b00      	cmp	r3, #0
900080aa:	d022      	beq.n	900080f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
900080ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900080b0:	d115      	bne.n	900080de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080b6:	3308      	adds	r3, #8
900080b8:	2101      	movs	r1, #1
900080ba:	4618      	mov	r0, r3
900080bc:	f001 fa0e 	bl	900094dc <RCCEx_PLL2_Config>
900080c0:	4603      	mov	r3, r0
900080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900080c6:	e015      	b.n	900080f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900080c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080cc:	3328      	adds	r3, #40	@ 0x28
900080ce:	2101      	movs	r1, #1
900080d0:	4618      	mov	r0, r3
900080d2:	f001 fab5 	bl	90009640 <RCCEx_PLL3_Config>
900080d6:	4603      	mov	r3, r0
900080d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900080dc:	e00a      	b.n	900080f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900080de:	2301      	movs	r3, #1
900080e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900080e4:	e006      	b.n	900080f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900080e6:	bf00      	nop
900080e8:	e004      	b.n	900080f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900080ea:	bf00      	nop
900080ec:	e002      	b.n	900080f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900080ee:	bf00      	nop
900080f0:	e000      	b.n	900080f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900080f2:	bf00      	nop
    }

    if (ret == HAL_OK)
900080f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080f8:	2b00      	cmp	r3, #0
900080fa:	d10d      	bne.n	90008118 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900080fc:	4b05      	ldr	r3, [pc, #20]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008100:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000810a:	4a02      	ldr	r2, [pc, #8]	@ (90008114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000810c:	430b      	orrs	r3, r1
9000810e:	6513      	str	r3, [r2, #80]	@ 0x50
90008110:	e006      	b.n	90008120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90008112:	bf00      	nop
90008114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000811c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008124:	e9d3 2300 	ldrd	r2, r3, [r3]
90008128:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
9000812c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90008130:	2300      	movs	r3, #0
90008132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90008136:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
9000813a:	460b      	mov	r3, r1
9000813c:	4313      	orrs	r3, r2
9000813e:	d055      	beq.n	900081ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000814c:	d033      	beq.n	900081b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
9000814e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008152:	d82c      	bhi.n	900081ae <HAL_RCCEx_PeriphCLKConfig+0x662>
90008154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008158:	d02f      	beq.n	900081ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
9000815a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000815e:	d826      	bhi.n	900081ae <HAL_RCCEx_PeriphCLKConfig+0x662>
90008160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008164:	d02b      	beq.n	900081be <HAL_RCCEx_PeriphCLKConfig+0x672>
90008166:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000816a:	d820      	bhi.n	900081ae <HAL_RCCEx_PeriphCLKConfig+0x662>
9000816c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008170:	d012      	beq.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008176:	d81a      	bhi.n	900081ae <HAL_RCCEx_PeriphCLKConfig+0x662>
90008178:	2b00      	cmp	r3, #0
9000817a:	d022      	beq.n	900081c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
9000817c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008180:	d115      	bne.n	900081ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008186:	3308      	adds	r3, #8
90008188:	2101      	movs	r1, #1
9000818a:	4618      	mov	r0, r3
9000818c:	f001 f9a6 	bl	900094dc <RCCEx_PLL2_Config>
90008190:	4603      	mov	r3, r0
90008192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008196:	e015      	b.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000819c:	3328      	adds	r3, #40	@ 0x28
9000819e:	2101      	movs	r1, #1
900081a0:	4618      	mov	r0, r3
900081a2:	f001 fa4d 	bl	90009640 <RCCEx_PLL3_Config>
900081a6:	4603      	mov	r3, r0
900081a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
900081ac:	e00a      	b.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
900081ae:	2301      	movs	r3, #1
900081b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081b4:	e006      	b.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081b6:	bf00      	nop
900081b8:	e004      	b.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081ba:	bf00      	nop
900081bc:	e002      	b.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081be:	bf00      	nop
900081c0:	e000      	b.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900081c2:	bf00      	nop
    }

    if (ret == HAL_OK)
900081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081c8:	2b00      	cmp	r3, #0
900081ca:	d10b      	bne.n	900081e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
900081cc:	4ba3      	ldr	r3, [pc, #652]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900081ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900081d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900081dc:	4a9f      	ldr	r2, [pc, #636]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900081de:	430b      	orrs	r3, r1
900081e0:	6593      	str	r3, [r2, #88]	@ 0x58
900081e2:	e003      	b.n	900081ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
900081e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
900081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
900081f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
900081f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
900081fc:	2300      	movs	r3, #0
900081fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90008202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008206:	460b      	mov	r3, r1
90008208:	4313      	orrs	r3, r2
9000820a:	d037      	beq.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
9000820c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008216:	d00e      	beq.n	90008236 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000821c:	d816      	bhi.n	9000824c <HAL_RCCEx_PeriphCLKConfig+0x700>
9000821e:	2b00      	cmp	r3, #0
90008220:	d018      	beq.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x708>
90008222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008226:	d111      	bne.n	9000824c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008228:	4b8c      	ldr	r3, [pc, #560]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000822c:	4a8b      	ldr	r2, [pc, #556]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000822e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008234:	e00f      	b.n	90008256 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000823a:	3308      	adds	r3, #8
9000823c:	2101      	movs	r1, #1
9000823e:	4618      	mov	r0, r3
90008240:	f001 f94c 	bl	900094dc <RCCEx_PLL2_Config>
90008244:	4603      	mov	r3, r0
90008246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
9000824a:	e004      	b.n	90008256 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000824c:	2301      	movs	r3, #1
9000824e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008252:	e000      	b.n	90008256 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90008254:	bf00      	nop
    }

    if (ret == HAL_OK)
90008256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000825a:	2b00      	cmp	r3, #0
9000825c:	d10a      	bne.n	90008274 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000825e:	4b7f      	ldr	r3, [pc, #508]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008262:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000826a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000826c:	4a7b      	ldr	r2, [pc, #492]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000826e:	430b      	orrs	r3, r1
90008270:	6513      	str	r3, [r2, #80]	@ 0x50
90008272:	e003      	b.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008280:	e9d3 2300 	ldrd	r2, r3, [r3]
90008284:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
9000828c:	2300      	movs	r3, #0
9000828e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90008292:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008296:	460b      	mov	r3, r1
90008298:	4313      	orrs	r3, r2
9000829a:	d039      	beq.n	90008310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
9000829c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900082a2:	2b03      	cmp	r3, #3
900082a4:	d81c      	bhi.n	900082e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
900082a6:	a201      	add	r2, pc, #4	@ (adr r2, 900082ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
900082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900082ac:	900082e9 	.word	0x900082e9
900082b0:	900082bd 	.word	0x900082bd
900082b4:	900082cb 	.word	0x900082cb
900082b8:	900082e9 	.word	0x900082e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900082bc:	4b67      	ldr	r3, [pc, #412]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900082c0:	4a66      	ldr	r2, [pc, #408]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900082c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
900082c8:	e00f      	b.n	900082ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082ce:	3308      	adds	r3, #8
900082d0:	2102      	movs	r1, #2
900082d2:	4618      	mov	r0, r3
900082d4:	f001 f902 	bl	900094dc <RCCEx_PLL2_Config>
900082d8:	4603      	mov	r3, r0
900082da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
900082de:	e004      	b.n	900082ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
900082e0:	2301      	movs	r3, #1
900082e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900082e6:	e000      	b.n	900082ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
900082e8:	bf00      	nop
    }

    if (ret == HAL_OK)
900082ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082ee:	2b00      	cmp	r3, #0
900082f0:	d10a      	bne.n	90008308 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
900082f2:	4b5a      	ldr	r3, [pc, #360]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900082f6:	f023 0103 	bic.w	r1, r3, #3
900082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008300:	4a56      	ldr	r2, [pc, #344]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008302:	430b      	orrs	r3, r1
90008304:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008306:	e003      	b.n	90008310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000830c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008314:	e9d3 2300 	ldrd	r2, r3, [r3]
90008318:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
9000831c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
90008320:	2300      	movs	r3, #0
90008322:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
90008326:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
9000832a:	460b      	mov	r3, r1
9000832c:	4313      	orrs	r3, r2
9000832e:	f000 809f 	beq.w	90008470 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90008332:	4b4b      	ldr	r3, [pc, #300]	@ (90008460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008334:	681b      	ldr	r3, [r3, #0]
90008336:	4a4a      	ldr	r2, [pc, #296]	@ (90008460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000833c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000833e:	f7fa ff77 	bl	90003230 <HAL_GetTick>
90008342:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008346:	e00b      	b.n	90008360 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90008348:	f7fa ff72 	bl	90003230 <HAL_GetTick>
9000834c:	4602      	mov	r2, r0
9000834e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008352:	1ad3      	subs	r3, r2, r3
90008354:	2b64      	cmp	r3, #100	@ 0x64
90008356:	d903      	bls.n	90008360 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90008358:	2303      	movs	r3, #3
9000835a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000835e:	e005      	b.n	9000836c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008360:	4b3f      	ldr	r3, [pc, #252]	@ (90008460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008362:	681b      	ldr	r3, [r3, #0]
90008364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90008368:	2b00      	cmp	r3, #0
9000836a:	d0ed      	beq.n	90008348 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
9000836c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008370:	2b00      	cmp	r3, #0
90008372:	d179      	bne.n	90008468 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008374:	4b39      	ldr	r3, [pc, #228]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008376:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000837c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008380:	4053      	eors	r3, r2
90008382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008386:	2b00      	cmp	r3, #0
90008388:	d015      	beq.n	900083b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000838a:	4b34      	ldr	r3, [pc, #208]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000838c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000838e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008392:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008396:	4b31      	ldr	r3, [pc, #196]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000839a:	4a30      	ldr	r2, [pc, #192]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000839c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900083a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
900083a2:	4b2e      	ldr	r3, [pc, #184]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900083a6:	4a2d      	ldr	r2, [pc, #180]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900083ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
900083ae:	4a2b      	ldr	r2, [pc, #172]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
900083b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
900083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900083be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900083c2:	d118      	bne.n	900083f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900083c4:	f7fa ff34 	bl	90003230 <HAL_GetTick>
900083c8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900083cc:	e00d      	b.n	900083ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900083ce:	f7fa ff2f 	bl	90003230 <HAL_GetTick>
900083d2:	4602      	mov	r2, r0
900083d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900083d8:	1ad2      	subs	r2, r2, r3
900083da:	f241 3388 	movw	r3, #5000	@ 0x1388
900083de:	429a      	cmp	r2, r3
900083e0:	d903      	bls.n	900083ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
900083e2:	2303      	movs	r3, #3
900083e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
900083e8:	e005      	b.n	900083f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900083ea:	4b1c      	ldr	r3, [pc, #112]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900083ee:	f003 0302 	and.w	r3, r3, #2
900083f2:	2b00      	cmp	r3, #0
900083f4:	d0eb      	beq.n	900083ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
900083f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083fa:	2b00      	cmp	r3, #0
900083fc:	d129      	bne.n	90008452 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000840a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000840e:	d10e      	bne.n	9000842e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90008410:	4b12      	ldr	r3, [pc, #72]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008412:	691b      	ldr	r3, [r3, #16]
90008414:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90008418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000841c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008420:	091a      	lsrs	r2, r3, #4
90008422:	4b10      	ldr	r3, [pc, #64]	@ (90008464 <HAL_RCCEx_PeriphCLKConfig+0x918>)
90008424:	4013      	ands	r3, r2
90008426:	4a0d      	ldr	r2, [pc, #52]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008428:	430b      	orrs	r3, r1
9000842a:	6113      	str	r3, [r2, #16]
9000842c:	e005      	b.n	9000843a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000842e:	4b0b      	ldr	r3, [pc, #44]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008430:	691b      	ldr	r3, [r3, #16]
90008432:	4a0a      	ldr	r2, [pc, #40]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008434:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90008438:	6113      	str	r3, [r2, #16]
9000843a:	4b08      	ldr	r3, [pc, #32]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000843c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
9000843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008446:	f3c3 030b 	ubfx	r3, r3, #0, #12
9000844a:	4a04      	ldr	r2, [pc, #16]	@ (9000845c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000844c:	430b      	orrs	r3, r1
9000844e:	6713      	str	r3, [r2, #112]	@ 0x70
90008450:	e00e      	b.n	90008470 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
90008452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
9000845a:	e009      	b.n	90008470 <HAL_RCCEx_PeriphCLKConfig+0x924>
9000845c:	58024400 	.word	0x58024400
90008460:	58024800 	.word	0x58024800
90008464:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000846c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008474:	e9d3 2300 	ldrd	r2, r3, [r3]
90008478:	f002 0301 	and.w	r3, r2, #1
9000847c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008480:	2300      	movs	r3, #0
90008482:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
9000848a:	460b      	mov	r3, r1
9000848c:	4313      	orrs	r3, r2
9000848e:	f000 8089 	beq.w	900085a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008498:	2b28      	cmp	r3, #40	@ 0x28
9000849a:	d86b      	bhi.n	90008574 <HAL_RCCEx_PeriphCLKConfig+0xa28>
9000849c:	a201      	add	r2, pc, #4	@ (adr r2, 900084a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900084a2:	bf00      	nop
900084a4:	9000857d 	.word	0x9000857d
900084a8:	90008575 	.word	0x90008575
900084ac:	90008575 	.word	0x90008575
900084b0:	90008575 	.word	0x90008575
900084b4:	90008575 	.word	0x90008575
900084b8:	90008575 	.word	0x90008575
900084bc:	90008575 	.word	0x90008575
900084c0:	90008575 	.word	0x90008575
900084c4:	90008549 	.word	0x90008549
900084c8:	90008575 	.word	0x90008575
900084cc:	90008575 	.word	0x90008575
900084d0:	90008575 	.word	0x90008575
900084d4:	90008575 	.word	0x90008575
900084d8:	90008575 	.word	0x90008575
900084dc:	90008575 	.word	0x90008575
900084e0:	90008575 	.word	0x90008575
900084e4:	9000855f 	.word	0x9000855f
900084e8:	90008575 	.word	0x90008575
900084ec:	90008575 	.word	0x90008575
900084f0:	90008575 	.word	0x90008575
900084f4:	90008575 	.word	0x90008575
900084f8:	90008575 	.word	0x90008575
900084fc:	90008575 	.word	0x90008575
90008500:	90008575 	.word	0x90008575
90008504:	9000857d 	.word	0x9000857d
90008508:	90008575 	.word	0x90008575
9000850c:	90008575 	.word	0x90008575
90008510:	90008575 	.word	0x90008575
90008514:	90008575 	.word	0x90008575
90008518:	90008575 	.word	0x90008575
9000851c:	90008575 	.word	0x90008575
90008520:	90008575 	.word	0x90008575
90008524:	9000857d 	.word	0x9000857d
90008528:	90008575 	.word	0x90008575
9000852c:	90008575 	.word	0x90008575
90008530:	90008575 	.word	0x90008575
90008534:	90008575 	.word	0x90008575
90008538:	90008575 	.word	0x90008575
9000853c:	90008575 	.word	0x90008575
90008540:	90008575 	.word	0x90008575
90008544:	9000857d 	.word	0x9000857d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000854c:	3308      	adds	r3, #8
9000854e:	2101      	movs	r1, #1
90008550:	4618      	mov	r0, r3
90008552:	f000 ffc3 	bl	900094dc <RCCEx_PLL2_Config>
90008556:	4603      	mov	r3, r0
90008558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000855c:	e00f      	b.n	9000857e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008562:	3328      	adds	r3, #40	@ 0x28
90008564:	2101      	movs	r1, #1
90008566:	4618      	mov	r0, r3
90008568:	f001 f86a 	bl	90009640 <RCCEx_PLL3_Config>
9000856c:	4603      	mov	r3, r0
9000856e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008572:	e004      	b.n	9000857e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008574:	2301      	movs	r3, #1
90008576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000857a:	e000      	b.n	9000857e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
9000857c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000857e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008582:	2b00      	cmp	r3, #0
90008584:	d10a      	bne.n	9000859c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008586:	4bbf      	ldr	r3, [pc, #764]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000858a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008594:	4abb      	ldr	r2, [pc, #748]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008596:	430b      	orrs	r3, r1
90008598:	6553      	str	r3, [r2, #84]	@ 0x54
9000859a:	e003      	b.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000859c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
900085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
900085ac:	f002 0302 	and.w	r3, r2, #2
900085b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
900085b4:	2300      	movs	r3, #0
900085b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
900085ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
900085be:	460b      	mov	r3, r1
900085c0:	4313      	orrs	r3, r2
900085c2:	d041      	beq.n	90008648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
900085c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900085ca:	2b05      	cmp	r3, #5
900085cc:	d824      	bhi.n	90008618 <HAL_RCCEx_PeriphCLKConfig+0xacc>
900085ce:	a201      	add	r2, pc, #4	@ (adr r2, 900085d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
900085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900085d4:	90008621 	.word	0x90008621
900085d8:	900085ed 	.word	0x900085ed
900085dc:	90008603 	.word	0x90008603
900085e0:	90008621 	.word	0x90008621
900085e4:	90008621 	.word	0x90008621
900085e8:	90008621 	.word	0x90008621
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900085ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085f0:	3308      	adds	r3, #8
900085f2:	2101      	movs	r1, #1
900085f4:	4618      	mov	r0, r3
900085f6:	f000 ff71 	bl	900094dc <RCCEx_PLL2_Config>
900085fa:	4603      	mov	r3, r0
900085fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008600:	e00f      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008606:	3328      	adds	r3, #40	@ 0x28
90008608:	2101      	movs	r1, #1
9000860a:	4618      	mov	r0, r3
9000860c:	f001 f818 	bl	90009640 <RCCEx_PLL3_Config>
90008610:	4603      	mov	r3, r0
90008612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008616:	e004      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008618:	2301      	movs	r3, #1
9000861a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000861e:	e000      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90008620:	bf00      	nop
    }

    if (ret == HAL_OK)
90008622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008626:	2b00      	cmp	r3, #0
90008628:	d10a      	bne.n	90008640 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000862a:	4b96      	ldr	r3, [pc, #600]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000862c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000862e:	f023 0107 	bic.w	r1, r3, #7
90008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008638:	4a92      	ldr	r2, [pc, #584]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000863a:	430b      	orrs	r3, r1
9000863c:	6553      	str	r3, [r2, #84]	@ 0x54
9000863e:	e003      	b.n	90008648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90008648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000864c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008650:	f002 0304 	and.w	r3, r2, #4
90008654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90008658:	2300      	movs	r3, #0
9000865a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
9000865e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
90008662:	460b      	mov	r3, r1
90008664:	4313      	orrs	r3, r2
90008666:	d044      	beq.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90008668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000866c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008670:	2b05      	cmp	r3, #5
90008672:	d825      	bhi.n	900086c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008674:	a201      	add	r2, pc, #4	@ (adr r2, 9000867c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000867a:	bf00      	nop
9000867c:	900086c9 	.word	0x900086c9
90008680:	90008695 	.word	0x90008695
90008684:	900086ab 	.word	0x900086ab
90008688:	900086c9 	.word	0x900086c9
9000868c:	900086c9 	.word	0x900086c9
90008690:	900086c9 	.word	0x900086c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008698:	3308      	adds	r3, #8
9000869a:	2101      	movs	r1, #1
9000869c:	4618      	mov	r0, r3
9000869e:	f000 ff1d 	bl	900094dc <RCCEx_PLL2_Config>
900086a2:	4603      	mov	r3, r0
900086a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900086a8:	e00f      	b.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ae:	3328      	adds	r3, #40	@ 0x28
900086b0:	2101      	movs	r1, #1
900086b2:	4618      	mov	r0, r3
900086b4:	f000 ffc4 	bl	90009640 <RCCEx_PLL3_Config>
900086b8:	4603      	mov	r3, r0
900086ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900086be:	e004      	b.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086c0:	2301      	movs	r3, #1
900086c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086c6:	e000      	b.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
900086c8:	bf00      	nop
    }

    if (ret == HAL_OK)
900086ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086ce:	2b00      	cmp	r3, #0
900086d0:	d10b      	bne.n	900086ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
900086d2:	4b6c      	ldr	r3, [pc, #432]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900086d6:	f023 0107 	bic.w	r1, r3, #7
900086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
900086e2:	4a68      	ldr	r2, [pc, #416]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086e4:	430b      	orrs	r3, r1
900086e6:	6593      	str	r3, [r2, #88]	@ 0x58
900086e8:	e003      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
900086fa:	f002 0320 	and.w	r3, r2, #32
900086fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90008702:	2300      	movs	r3, #0
90008704:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
9000870c:	460b      	mov	r3, r1
9000870e:	4313      	orrs	r3, r2
90008710:	d055      	beq.n	900087be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000871a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000871e:	d033      	beq.n	90008788 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008724:	d82c      	bhi.n	90008780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000872a:	d02f      	beq.n	9000878c <HAL_RCCEx_PeriphCLKConfig+0xc40>
9000872c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008730:	d826      	bhi.n	90008780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008736:	d02b      	beq.n	90008790 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90008738:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000873c:	d820      	bhi.n	90008780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000873e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008742:	d012      	beq.n	9000876a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
90008744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008748:	d81a      	bhi.n	90008780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000874a:	2b00      	cmp	r3, #0
9000874c:	d022      	beq.n	90008794 <HAL_RCCEx_PeriphCLKConfig+0xc48>
9000874e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008752:	d115      	bne.n	90008780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008758:	3308      	adds	r3, #8
9000875a:	2100      	movs	r1, #0
9000875c:	4618      	mov	r0, r3
9000875e:	f000 febd 	bl	900094dc <RCCEx_PLL2_Config>
90008762:	4603      	mov	r3, r0
90008764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008768:	e015      	b.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000876e:	3328      	adds	r3, #40	@ 0x28
90008770:	2102      	movs	r1, #2
90008772:	4618      	mov	r0, r3
90008774:	f000 ff64 	bl	90009640 <RCCEx_PLL3_Config>
90008778:	4603      	mov	r3, r0
9000877a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000877e:	e00a      	b.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008780:	2301      	movs	r3, #1
90008782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008786:	e006      	b.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008788:	bf00      	nop
9000878a:	e004      	b.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000878c:	bf00      	nop
9000878e:	e002      	b.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008790:	bf00      	nop
90008792:	e000      	b.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008794:	bf00      	nop
    }

    if (ret == HAL_OK)
90008796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000879a:	2b00      	cmp	r3, #0
9000879c:	d10b      	bne.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000879e:	4b39      	ldr	r3, [pc, #228]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900087a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900087a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900087ae:	4a35      	ldr	r2, [pc, #212]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900087b0:	430b      	orrs	r3, r1
900087b2:	6553      	str	r3, [r2, #84]	@ 0x54
900087b4:	e003      	b.n	900087be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
900087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
900087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
900087c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
900087ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
900087ce:	2300      	movs	r3, #0
900087d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
900087d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
900087d8:	460b      	mov	r3, r1
900087da:	4313      	orrs	r3, r2
900087dc:	d058      	beq.n	90008890 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
900087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900087e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
900087ea:	d033      	beq.n	90008854 <HAL_RCCEx_PeriphCLKConfig+0xd08>
900087ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
900087f0:	d82c      	bhi.n	9000884c <HAL_RCCEx_PeriphCLKConfig+0xd00>
900087f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900087f6:	d02f      	beq.n	90008858 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
900087f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900087fc:	d826      	bhi.n	9000884c <HAL_RCCEx_PeriphCLKConfig+0xd00>
900087fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008802:	d02b      	beq.n	9000885c <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008804:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008808:	d820      	bhi.n	9000884c <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000880a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000880e:	d012      	beq.n	90008836 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008814:	d81a      	bhi.n	9000884c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008816:	2b00      	cmp	r3, #0
90008818:	d022      	beq.n	90008860 <HAL_RCCEx_PeriphCLKConfig+0xd14>
9000881a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000881e:	d115      	bne.n	9000884c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008824:	3308      	adds	r3, #8
90008826:	2100      	movs	r1, #0
90008828:	4618      	mov	r0, r3
9000882a:	f000 fe57 	bl	900094dc <RCCEx_PLL2_Config>
9000882e:	4603      	mov	r3, r0
90008830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008834:	e015      	b.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000883a:	3328      	adds	r3, #40	@ 0x28
9000883c:	2102      	movs	r1, #2
9000883e:	4618      	mov	r0, r3
90008840:	f000 fefe 	bl	90009640 <RCCEx_PLL3_Config>
90008844:	4603      	mov	r3, r0
90008846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000884a:	e00a      	b.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000884c:	2301      	movs	r3, #1
9000884e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008852:	e006      	b.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008854:	bf00      	nop
90008856:	e004      	b.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008858:	bf00      	nop
9000885a:	e002      	b.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000885c:	bf00      	nop
9000885e:	e000      	b.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008860:	bf00      	nop
    }

    if (ret == HAL_OK)
90008862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008866:	2b00      	cmp	r3, #0
90008868:	d10e      	bne.n	90008888 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000886a:	4b06      	ldr	r3, [pc, #24]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000886c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000886e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000887a:	4a02      	ldr	r2, [pc, #8]	@ (90008884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000887c:	430b      	orrs	r3, r1
9000887e:	6593      	str	r3, [r2, #88]	@ 0x58
90008880:	e006      	b.n	90008890 <HAL_RCCEx_PeriphCLKConfig+0xd44>
90008882:	bf00      	nop
90008884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000888c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008894:	e9d3 2300 	ldrd	r2, r3, [r3]
90008898:	f002 0380 	and.w	r3, r2, #128	@ 0x80
9000889c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
900088a0:	2300      	movs	r3, #0
900088a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
900088a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
900088aa:	460b      	mov	r3, r1
900088ac:	4313      	orrs	r3, r2
900088ae:	d055      	beq.n	9000895c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
900088b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900088b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900088bc:	d033      	beq.n	90008926 <HAL_RCCEx_PeriphCLKConfig+0xdda>
900088be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900088c2:	d82c      	bhi.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900088c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900088c8:	d02f      	beq.n	9000892a <HAL_RCCEx_PeriphCLKConfig+0xdde>
900088ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900088ce:	d826      	bhi.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900088d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900088d4:	d02b      	beq.n	9000892e <HAL_RCCEx_PeriphCLKConfig+0xde2>
900088d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900088da:	d820      	bhi.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900088dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900088e0:	d012      	beq.n	90008908 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
900088e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900088e6:	d81a      	bhi.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900088e8:	2b00      	cmp	r3, #0
900088ea:	d022      	beq.n	90008932 <HAL_RCCEx_PeriphCLKConfig+0xde6>
900088ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900088f0:	d115      	bne.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088f6:	3308      	adds	r3, #8
900088f8:	2100      	movs	r1, #0
900088fa:	4618      	mov	r0, r3
900088fc:	f000 fdee 	bl	900094dc <RCCEx_PLL2_Config>
90008900:	4603      	mov	r3, r0
90008902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008906:	e015      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000890c:	3328      	adds	r3, #40	@ 0x28
9000890e:	2102      	movs	r1, #2
90008910:	4618      	mov	r0, r3
90008912:	f000 fe95 	bl	90009640 <RCCEx_PLL3_Config>
90008916:	4603      	mov	r3, r0
90008918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000891c:	e00a      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000891e:	2301      	movs	r3, #1
90008920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008924:	e006      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008926:	bf00      	nop
90008928:	e004      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000892a:	bf00      	nop
9000892c:	e002      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000892e:	bf00      	nop
90008930:	e000      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008932:	bf00      	nop
    }

    if (ret == HAL_OK)
90008934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008938:	2b00      	cmp	r3, #0
9000893a:	d10b      	bne.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000893c:	4ba1      	ldr	r3, [pc, #644]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000893e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008940:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008948:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
9000894c:	4a9d      	ldr	r2, [pc, #628]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000894e:	430b      	orrs	r3, r1
90008950:	6593      	str	r3, [r2, #88]	@ 0x58
90008952:	e003      	b.n	9000895c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008958:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008960:	e9d3 2300 	ldrd	r2, r3, [r3]
90008964:	f002 0308 	and.w	r3, r2, #8
90008968:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
9000896c:	2300      	movs	r3, #0
9000896e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008972:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008976:	460b      	mov	r3, r1
90008978:	4313      	orrs	r3, r2
9000897a:	d01e      	beq.n	900089ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000897c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008988:	d10c      	bne.n	900089a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000898e:	3328      	adds	r3, #40	@ 0x28
90008990:	2102      	movs	r1, #2
90008992:	4618      	mov	r0, r3
90008994:	f000 fe54 	bl	90009640 <RCCEx_PLL3_Config>
90008998:	4603      	mov	r3, r0
9000899a:	2b00      	cmp	r3, #0
9000899c:	d002      	beq.n	900089a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
9000899e:	2301      	movs	r3, #1
900089a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
900089a4:	4b87      	ldr	r3, [pc, #540]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900089a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
900089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900089b4:	4a83      	ldr	r2, [pc, #524]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089b6:	430b      	orrs	r3, r1
900089b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900089ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089be:	e9d3 2300 	ldrd	r2, r3, [r3]
900089c2:	f002 0310 	and.w	r3, r2, #16
900089c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
900089ca:	2300      	movs	r3, #0
900089cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
900089d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
900089d4:	460b      	mov	r3, r1
900089d6:	4313      	orrs	r3, r2
900089d8:	d01e      	beq.n	90008a18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
900089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
900089e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900089e6:	d10c      	bne.n	90008a02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089ec:	3328      	adds	r3, #40	@ 0x28
900089ee:	2102      	movs	r1, #2
900089f0:	4618      	mov	r0, r3
900089f2:	f000 fe25 	bl	90009640 <RCCEx_PLL3_Config>
900089f6:	4603      	mov	r3, r0
900089f8:	2b00      	cmp	r3, #0
900089fa:	d002      	beq.n	90008a02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
900089fc:	2301      	movs	r3, #1
900089fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008a02:	4b70      	ldr	r3, [pc, #448]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008a06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008a12:	4a6c      	ldr	r2, [pc, #432]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a14:	430b      	orrs	r3, r1
90008a16:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a20:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008a28:	2300      	movs	r3, #0
90008a2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008a2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008a32:	460b      	mov	r3, r1
90008a34:	4313      	orrs	r3, r2
90008a36:	d03e      	beq.n	90008ab6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008a40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008a44:	d022      	beq.n	90008a8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008a4a:	d81b      	bhi.n	90008a84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008a4c:	2b00      	cmp	r3, #0
90008a4e:	d003      	beq.n	90008a58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008a54:	d00b      	beq.n	90008a6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008a56:	e015      	b.n	90008a84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a5c:	3308      	adds	r3, #8
90008a5e:	2100      	movs	r1, #0
90008a60:	4618      	mov	r0, r3
90008a62:	f000 fd3b 	bl	900094dc <RCCEx_PLL2_Config>
90008a66:	4603      	mov	r3, r0
90008a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008a6c:	e00f      	b.n	90008a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a72:	3328      	adds	r3, #40	@ 0x28
90008a74:	2102      	movs	r1, #2
90008a76:	4618      	mov	r0, r3
90008a78:	f000 fde2 	bl	90009640 <RCCEx_PLL3_Config>
90008a7c:	4603      	mov	r3, r0
90008a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008a82:	e004      	b.n	90008a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008a84:	2301      	movs	r3, #1
90008a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a8a:	e000      	b.n	90008a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a92:	2b00      	cmp	r3, #0
90008a94:	d10b      	bne.n	90008aae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008a96:	4b4b      	ldr	r3, [pc, #300]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008a9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008aa6:	4a47      	ldr	r2, [pc, #284]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008aa8:	430b      	orrs	r3, r1
90008aaa:	6593      	str	r3, [r2, #88]	@ 0x58
90008aac:	e003      	b.n	90008ab6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
90008abe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
90008ac4:	2300      	movs	r3, #0
90008ac6:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008ac8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008acc:	460b      	mov	r3, r1
90008ace:	4313      	orrs	r3, r2
90008ad0:	d03b      	beq.n	90008b4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008ade:	d01f      	beq.n	90008b20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008ae0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008ae4:	d818      	bhi.n	90008b18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008aea:	d003      	beq.n	90008af4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008af0:	d007      	beq.n	90008b02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008af2:	e011      	b.n	90008b18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008af4:	4b33      	ldr	r3, [pc, #204]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008af8:	4a32      	ldr	r2, [pc, #200]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008b00:	e00f      	b.n	90008b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b06:	3328      	adds	r3, #40	@ 0x28
90008b08:	2101      	movs	r1, #1
90008b0a:	4618      	mov	r0, r3
90008b0c:	f000 fd98 	bl	90009640 <RCCEx_PLL3_Config>
90008b10:	4603      	mov	r3, r0
90008b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008b16:	e004      	b.n	90008b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b18:	2301      	movs	r3, #1
90008b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b1e:	e000      	b.n	90008b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008b20:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b26:	2b00      	cmp	r3, #0
90008b28:	d10b      	bne.n	90008b42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008b2a:	4b26      	ldr	r3, [pc, #152]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008b2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008b3a:	4a22      	ldr	r2, [pc, #136]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b3c:	430b      	orrs	r3, r1
90008b3e:	6553      	str	r3, [r2, #84]	@ 0x54
90008b40:	e003      	b.n	90008b4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b52:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008b56:	673b      	str	r3, [r7, #112]	@ 0x70
90008b58:	2300      	movs	r3, #0
90008b5a:	677b      	str	r3, [r7, #116]	@ 0x74
90008b5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008b60:	460b      	mov	r3, r1
90008b62:	4313      	orrs	r3, r2
90008b64:	d034      	beq.n	90008bd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008b6c:	2b00      	cmp	r3, #0
90008b6e:	d003      	beq.n	90008b78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008b74:	d007      	beq.n	90008b86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008b76:	e011      	b.n	90008b9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008b78:	4b12      	ldr	r3, [pc, #72]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008b7c:	4a11      	ldr	r2, [pc, #68]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008b84:	e00e      	b.n	90008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b8a:	3308      	adds	r3, #8
90008b8c:	2102      	movs	r1, #2
90008b8e:	4618      	mov	r0, r3
90008b90:	f000 fca4 	bl	900094dc <RCCEx_PLL2_Config>
90008b94:	4603      	mov	r3, r0
90008b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008b9a:	e003      	b.n	90008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008b9c:	2301      	movs	r3, #1
90008b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
90008ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ba8:	2b00      	cmp	r3, #0
90008baa:	d10d      	bne.n	90008bc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008bac:	4b05      	ldr	r3, [pc, #20]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008bb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008bba:	4a02      	ldr	r2, [pc, #8]	@ (90008bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bbc:	430b      	orrs	r3, r1
90008bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008bc0:	e006      	b.n	90008bd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008bc2:	bf00      	nop
90008bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bd8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
90008bde:	2300      	movs	r3, #0
90008be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008be2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008be6:	460b      	mov	r3, r1
90008be8:	4313      	orrs	r3, r2
90008bea:	d00c      	beq.n	90008c06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bf0:	3328      	adds	r3, #40	@ 0x28
90008bf2:	2102      	movs	r1, #2
90008bf4:	4618      	mov	r0, r3
90008bf6:	f000 fd23 	bl	90009640 <RCCEx_PLL3_Config>
90008bfa:	4603      	mov	r3, r0
90008bfc:	2b00      	cmp	r3, #0
90008bfe:	d002      	beq.n	90008c06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008c00:	2301      	movs	r3, #1
90008c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008c12:	663b      	str	r3, [r7, #96]	@ 0x60
90008c14:	2300      	movs	r3, #0
90008c16:	667b      	str	r3, [r7, #100]	@ 0x64
90008c18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008c1c:	460b      	mov	r3, r1
90008c1e:	4313      	orrs	r3, r2
90008c20:	d038      	beq.n	90008c94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008c2e:	d018      	beq.n	90008c62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008c34:	d811      	bhi.n	90008c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008c3a:	d014      	beq.n	90008c66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008c40:	d80b      	bhi.n	90008c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008c42:	2b00      	cmp	r3, #0
90008c44:	d011      	beq.n	90008c6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008c4a:	d106      	bne.n	90008c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008c4c:	4bc3      	ldr	r3, [pc, #780]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008c50:	4ac2      	ldr	r2, [pc, #776]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008c58:	e008      	b.n	90008c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008c5a:	2301      	movs	r3, #1
90008c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c60:	e004      	b.n	90008c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c62:	bf00      	nop
90008c64:	e002      	b.n	90008c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c66:	bf00      	nop
90008c68:	e000      	b.n	90008c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c70:	2b00      	cmp	r3, #0
90008c72:	d10b      	bne.n	90008c8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008c74:	4bb9      	ldr	r3, [pc, #740]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008c84:	4ab5      	ldr	r2, [pc, #724]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c86:	430b      	orrs	r3, r1
90008c88:	6553      	str	r3, [r2, #84]	@ 0x54
90008c8a:	e003      	b.n	90008c94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
90008ca2:	2300      	movs	r3, #0
90008ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008ca6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008caa:	460b      	mov	r3, r1
90008cac:	4313      	orrs	r3, r2
90008cae:	d009      	beq.n	90008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008cb0:	4baa      	ldr	r3, [pc, #680]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008cb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008cbe:	4aa7      	ldr	r2, [pc, #668]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cc0:	430b      	orrs	r3, r1
90008cc2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ccc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008cd0:	653b      	str	r3, [r7, #80]	@ 0x50
90008cd2:	2300      	movs	r3, #0
90008cd4:	657b      	str	r3, [r7, #84]	@ 0x54
90008cd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008cda:	460b      	mov	r3, r1
90008cdc:	4313      	orrs	r3, r2
90008cde:	d00a      	beq.n	90008cf6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008ce0:	4b9e      	ldr	r3, [pc, #632]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ce2:	691b      	ldr	r3, [r3, #16]
90008ce4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008cf0:	4a9a      	ldr	r2, [pc, #616]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cf2:	430b      	orrs	r3, r1
90008cf4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cfe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008d02:	64bb      	str	r3, [r7, #72]	@ 0x48
90008d04:	2300      	movs	r3, #0
90008d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008d08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008d0c:	460b      	mov	r3, r1
90008d0e:	4313      	orrs	r3, r2
90008d10:	d009      	beq.n	90008d26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008d12:	4b92      	ldr	r3, [pc, #584]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008d16:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008d20:	4a8e      	ldr	r2, [pc, #568]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d22:	430b      	orrs	r3, r1
90008d24:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008d32:	643b      	str	r3, [r7, #64]	@ 0x40
90008d34:	2300      	movs	r3, #0
90008d36:	647b      	str	r3, [r7, #68]	@ 0x44
90008d38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008d3c:	460b      	mov	r3, r1
90008d3e:	4313      	orrs	r3, r2
90008d40:	d00e      	beq.n	90008d60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008d42:	4b86      	ldr	r3, [pc, #536]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d44:	691b      	ldr	r3, [r3, #16]
90008d46:	4a85      	ldr	r2, [pc, #532]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008d4c:	6113      	str	r3, [r2, #16]
90008d4e:	4b83      	ldr	r3, [pc, #524]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d50:	6919      	ldr	r1, [r3, #16]
90008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008d5a:	4a80      	ldr	r2, [pc, #512]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d5c:	430b      	orrs	r3, r1
90008d5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d68:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
90008d6e:	2300      	movs	r3, #0
90008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008d72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008d76:	460b      	mov	r3, r1
90008d78:	4313      	orrs	r3, r2
90008d7a:	d009      	beq.n	90008d90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008d7c:	4b77      	ldr	r3, [pc, #476]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008d80:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008d8a:	4a74      	ldr	r2, [pc, #464]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d8c:	430b      	orrs	r3, r1
90008d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d98:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008d9c:	633b      	str	r3, [r7, #48]	@ 0x30
90008d9e:	2300      	movs	r3, #0
90008da0:	637b      	str	r3, [r7, #52]	@ 0x34
90008da2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008da6:	460b      	mov	r3, r1
90008da8:	4313      	orrs	r3, r2
90008daa:	d00a      	beq.n	90008dc2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008dac:	4b6b      	ldr	r3, [pc, #428]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008db0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008dbc:	4a67      	ldr	r2, [pc, #412]	@ (90008f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dbe:	430b      	orrs	r3, r1
90008dc0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008dca:	2100      	movs	r1, #0
90008dcc:	62b9      	str	r1, [r7, #40]	@ 0x28
90008dce:	f003 0301 	and.w	r3, r3, #1
90008dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008dd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008dd8:	460b      	mov	r3, r1
90008dda:	4313      	orrs	r3, r2
90008ddc:	d011      	beq.n	90008e02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008de2:	3308      	adds	r3, #8
90008de4:	2100      	movs	r1, #0
90008de6:	4618      	mov	r0, r3
90008de8:	f000 fb78 	bl	900094dc <RCCEx_PLL2_Config>
90008dec:	4603      	mov	r3, r0
90008dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008df6:	2b00      	cmp	r3, #0
90008df8:	d003      	beq.n	90008e02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e0a:	2100      	movs	r1, #0
90008e0c:	6239      	str	r1, [r7, #32]
90008e0e:	f003 0302 	and.w	r3, r3, #2
90008e12:	627b      	str	r3, [r7, #36]	@ 0x24
90008e14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008e18:	460b      	mov	r3, r1
90008e1a:	4313      	orrs	r3, r2
90008e1c:	d011      	beq.n	90008e42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e22:	3308      	adds	r3, #8
90008e24:	2101      	movs	r1, #1
90008e26:	4618      	mov	r0, r3
90008e28:	f000 fb58 	bl	900094dc <RCCEx_PLL2_Config>
90008e2c:	4603      	mov	r3, r0
90008e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e36:	2b00      	cmp	r3, #0
90008e38:	d003      	beq.n	90008e42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e4a:	2100      	movs	r1, #0
90008e4c:	61b9      	str	r1, [r7, #24]
90008e4e:	f003 0304 	and.w	r3, r3, #4
90008e52:	61fb      	str	r3, [r7, #28]
90008e54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008e58:	460b      	mov	r3, r1
90008e5a:	4313      	orrs	r3, r2
90008e5c:	d011      	beq.n	90008e82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e62:	3308      	adds	r3, #8
90008e64:	2102      	movs	r1, #2
90008e66:	4618      	mov	r0, r3
90008e68:	f000 fb38 	bl	900094dc <RCCEx_PLL2_Config>
90008e6c:	4603      	mov	r3, r0
90008e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e76:	2b00      	cmp	r3, #0
90008e78:	d003      	beq.n	90008e82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e8a:	2100      	movs	r1, #0
90008e8c:	6139      	str	r1, [r7, #16]
90008e8e:	f003 0308 	and.w	r3, r3, #8
90008e92:	617b      	str	r3, [r7, #20]
90008e94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008e98:	460b      	mov	r3, r1
90008e9a:	4313      	orrs	r3, r2
90008e9c:	d011      	beq.n	90008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ea2:	3328      	adds	r3, #40	@ 0x28
90008ea4:	2100      	movs	r1, #0
90008ea6:	4618      	mov	r0, r3
90008ea8:	f000 fbca 	bl	90009640 <RCCEx_PLL3_Config>
90008eac:	4603      	mov	r3, r0
90008eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008eb6:	2b00      	cmp	r3, #0
90008eb8:	d003      	beq.n	90008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008eca:	2100      	movs	r1, #0
90008ecc:	60b9      	str	r1, [r7, #8]
90008ece:	f003 0310 	and.w	r3, r3, #16
90008ed2:	60fb      	str	r3, [r7, #12]
90008ed4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008ed8:	460b      	mov	r3, r1
90008eda:	4313      	orrs	r3, r2
90008edc:	d011      	beq.n	90008f02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ee2:	3328      	adds	r3, #40	@ 0x28
90008ee4:	2101      	movs	r1, #1
90008ee6:	4618      	mov	r0, r3
90008ee8:	f000 fbaa 	bl	90009640 <RCCEx_PLL3_Config>
90008eec:	4603      	mov	r3, r0
90008eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ef6:	2b00      	cmp	r3, #0
90008ef8:	d003      	beq.n	90008f02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f0a:	2100      	movs	r1, #0
90008f0c:	6039      	str	r1, [r7, #0]
90008f0e:	f003 0320 	and.w	r3, r3, #32
90008f12:	607b      	str	r3, [r7, #4]
90008f14:	e9d7 1200 	ldrd	r1, r2, [r7]
90008f18:	460b      	mov	r3, r1
90008f1a:	4313      	orrs	r3, r2
90008f1c:	d011      	beq.n	90008f42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f22:	3328      	adds	r3, #40	@ 0x28
90008f24:	2102      	movs	r1, #2
90008f26:	4618      	mov	r0, r3
90008f28:	f000 fb8a 	bl	90009640 <RCCEx_PLL3_Config>
90008f2c:	4603      	mov	r3, r0
90008f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f36:	2b00      	cmp	r3, #0
90008f38:	d003      	beq.n	90008f42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008f42:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008f46:	2b00      	cmp	r3, #0
90008f48:	d101      	bne.n	90008f4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008f4a:	2300      	movs	r3, #0
90008f4c:	e000      	b.n	90008f50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008f4e:	2301      	movs	r3, #1
}
90008f50:	4618      	mov	r0, r3
90008f52:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90008f56:	46bd      	mov	sp, r7
90008f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008f5c:	58024400 	.word	0x58024400

90008f60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90008f60:	b580      	push	{r7, lr}
90008f62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90008f64:	f7fe fd96 	bl	90007a94 <HAL_RCC_GetHCLKFreq>
90008f68:	4602      	mov	r2, r0
90008f6a:	4b06      	ldr	r3, [pc, #24]	@ (90008f84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90008f6c:	6a1b      	ldr	r3, [r3, #32]
90008f6e:	091b      	lsrs	r3, r3, #4
90008f70:	f003 0307 	and.w	r3, r3, #7
90008f74:	4904      	ldr	r1, [pc, #16]	@ (90008f88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90008f76:	5ccb      	ldrb	r3, [r1, r3]
90008f78:	f003 031f 	and.w	r3, r3, #31
90008f7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90008f80:	4618      	mov	r0, r3
90008f82:	bd80      	pop	{r7, pc}
90008f84:	58024400 	.word	0x58024400
90008f88:	9000d730 	.word	0x9000d730

90008f8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90008f8c:	b480      	push	{r7}
90008f8e:	b089      	sub	sp, #36	@ 0x24
90008f90:	af00      	add	r7, sp, #0
90008f92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008f94:	4ba1      	ldr	r3, [pc, #644]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008f98:	f003 0303 	and.w	r3, r3, #3
90008f9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90008f9e:	4b9f      	ldr	r3, [pc, #636]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008fa2:	0b1b      	lsrs	r3, r3, #12
90008fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90008fa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90008faa:	4b9c      	ldr	r3, [pc, #624]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008fae:	091b      	lsrs	r3, r3, #4
90008fb0:	f003 0301 	and.w	r3, r3, #1
90008fb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90008fb6:	4b99      	ldr	r3, [pc, #612]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90008fba:	08db      	lsrs	r3, r3, #3
90008fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008fc0:	693a      	ldr	r2, [r7, #16]
90008fc2:	fb02 f303 	mul.w	r3, r2, r3
90008fc6:	ee07 3a90 	vmov	s15, r3
90008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90008fd2:	697b      	ldr	r3, [r7, #20]
90008fd4:	2b00      	cmp	r3, #0
90008fd6:	f000 8111 	beq.w	900091fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90008fda:	69bb      	ldr	r3, [r7, #24]
90008fdc:	2b02      	cmp	r3, #2
90008fde:	f000 8083 	beq.w	900090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90008fe2:	69bb      	ldr	r3, [r7, #24]
90008fe4:	2b02      	cmp	r3, #2
90008fe6:	f200 80a1 	bhi.w	9000912c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90008fea:	69bb      	ldr	r3, [r7, #24]
90008fec:	2b00      	cmp	r3, #0
90008fee:	d003      	beq.n	90008ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90008ff0:	69bb      	ldr	r3, [r7, #24]
90008ff2:	2b01      	cmp	r3, #1
90008ff4:	d056      	beq.n	900090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90008ff6:	e099      	b.n	9000912c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008ff8:	4b88      	ldr	r3, [pc, #544]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008ffa:	681b      	ldr	r3, [r3, #0]
90008ffc:	f003 0320 	and.w	r3, r3, #32
90009000:	2b00      	cmp	r3, #0
90009002:	d02d      	beq.n	90009060 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009004:	4b85      	ldr	r3, [pc, #532]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009006:	681b      	ldr	r3, [r3, #0]
90009008:	08db      	lsrs	r3, r3, #3
9000900a:	f003 0303 	and.w	r3, r3, #3
9000900e:	4a84      	ldr	r2, [pc, #528]	@ (90009220 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90009010:	fa22 f303 	lsr.w	r3, r2, r3
90009014:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009016:	68bb      	ldr	r3, [r7, #8]
90009018:	ee07 3a90 	vmov	s15, r3
9000901c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009020:	697b      	ldr	r3, [r7, #20]
90009022:	ee07 3a90 	vmov	s15, r3
90009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000902a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000902e:	4b7b      	ldr	r3, [pc, #492]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009032:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009036:	ee07 3a90 	vmov	s15, r3
9000903a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000903e:	ed97 6a03 	vldr	s12, [r7, #12]
90009042:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009046:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000904a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000904e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009052:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009056:	ee67 7a27 	vmul.f32	s15, s14, s15
9000905a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
9000905e:	e087      	b.n	90009170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009060:	697b      	ldr	r3, [r7, #20]
90009062:	ee07 3a90 	vmov	s15, r3
90009066:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000906a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009228 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
9000906e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009072:	4b6a      	ldr	r3, [pc, #424]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009076:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000907a:	ee07 3a90 	vmov	s15, r3
9000907e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009082:	ed97 6a03 	vldr	s12, [r7, #12]
90009086:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000908a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000908e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009096:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000909a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000909e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900090a2:	e065      	b.n	90009170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900090a4:	697b      	ldr	r3, [r7, #20]
900090a6:	ee07 3a90 	vmov	s15, r3
900090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900090ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 9000922c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900090b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900090b6:	4b59      	ldr	r3, [pc, #356]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900090ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
900090be:	ee07 3a90 	vmov	s15, r3
900090c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090c6:	ed97 6a03 	vldr	s12, [r7, #12]
900090ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900090ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
900090d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900090d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900090da:	ee77 7aa6 	vadd.f32	s15, s15, s13
900090de:	ee67 7a27 	vmul.f32	s15, s14, s15
900090e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900090e6:	e043      	b.n	90009170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900090e8:	697b      	ldr	r3, [r7, #20]
900090ea:	ee07 3a90 	vmov	s15, r3
900090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
900090f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
900090f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900090fa:	4b48      	ldr	r3, [pc, #288]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900090fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009102:	ee07 3a90 	vmov	s15, r3
90009106:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000910a:	ed97 6a03 	vldr	s12, [r7, #12]
9000910e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009112:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009116:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000911a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000911e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009122:	ee67 7a27 	vmul.f32	s15, s14, s15
90009126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000912a:	e021      	b.n	90009170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000912c:	697b      	ldr	r3, [r7, #20]
9000912e:	ee07 3a90 	vmov	s15, r3
90009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009136:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 9000922c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000913e:	4b37      	ldr	r3, [pc, #220]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009146:	ee07 3a90 	vmov	s15, r3
9000914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000914e:	ed97 6a03 	vldr	s12, [r7, #12]
90009152:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000915e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009166:	ee67 7a27 	vmul.f32	s15, s14, s15
9000916a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000916e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90009170:	4b2a      	ldr	r3, [pc, #168]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009174:	0a5b      	lsrs	r3, r3, #9
90009176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000917a:	ee07 3a90 	vmov	s15, r3
9000917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009186:	ee37 7a87 	vadd.f32	s14, s15, s14
9000918a:	edd7 6a07 	vldr	s13, [r7, #28]
9000918e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009196:	ee17 2a90 	vmov	r2, s15
9000919a:	687b      	ldr	r3, [r7, #4]
9000919c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000919e:	4b1f      	ldr	r3, [pc, #124]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091a2:	0c1b      	lsrs	r3, r3, #16
900091a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900091a8:	ee07 3a90 	vmov	s15, r3
900091ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900091b4:	ee37 7a87 	vadd.f32	s14, s15, s14
900091b8:	edd7 6a07 	vldr	s13, [r7, #28]
900091bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
900091c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900091c4:	ee17 2a90 	vmov	r2, s15
900091c8:	687b      	ldr	r3, [r7, #4]
900091ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
900091cc:	4b13      	ldr	r3, [pc, #76]	@ (9000921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091d0:	0e1b      	lsrs	r3, r3, #24
900091d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900091d6:	ee07 3a90 	vmov	s15, r3
900091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900091e2:	ee37 7a87 	vadd.f32	s14, s15, s14
900091e6:	edd7 6a07 	vldr	s13, [r7, #28]
900091ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
900091ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900091f2:	ee17 2a90 	vmov	r2, s15
900091f6:	687b      	ldr	r3, [r7, #4]
900091f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900091fa:	e008      	b.n	9000920e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900091fc:	687b      	ldr	r3, [r7, #4]
900091fe:	2200      	movs	r2, #0
90009200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90009202:	687b      	ldr	r3, [r7, #4]
90009204:	2200      	movs	r2, #0
90009206:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009208:	687b      	ldr	r3, [r7, #4]
9000920a:	2200      	movs	r2, #0
9000920c:	609a      	str	r2, [r3, #8]
}
9000920e:	bf00      	nop
90009210:	3724      	adds	r7, #36	@ 0x24
90009212:	46bd      	mov	sp, r7
90009214:	f85d 7b04 	ldr.w	r7, [sp], #4
90009218:	4770      	bx	lr
9000921a:	bf00      	nop
9000921c:	58024400 	.word	0x58024400
90009220:	03d09000 	.word	0x03d09000
90009224:	46000000 	.word	0x46000000
90009228:	4c742400 	.word	0x4c742400
9000922c:	4a742400 	.word	0x4a742400
90009230:	4bbebc20 	.word	0x4bbebc20

90009234 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90009234:	b480      	push	{r7}
90009236:	b089      	sub	sp, #36	@ 0x24
90009238:	af00      	add	r7, sp, #0
9000923a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000923c:	4ba1      	ldr	r3, [pc, #644]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000923e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009240:	f003 0303 	and.w	r3, r3, #3
90009244:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
90009246:	4b9f      	ldr	r3, [pc, #636]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000924a:	0d1b      	lsrs	r3, r3, #20
9000924c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009250:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90009252:	4b9c      	ldr	r3, [pc, #624]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009256:	0a1b      	lsrs	r3, r3, #8
90009258:	f003 0301 	and.w	r3, r3, #1
9000925c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000925e:	4b99      	ldr	r3, [pc, #612]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90009262:	08db      	lsrs	r3, r3, #3
90009264:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009268:	693a      	ldr	r2, [r7, #16]
9000926a:	fb02 f303 	mul.w	r3, r2, r3
9000926e:	ee07 3a90 	vmov	s15, r3
90009272:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
9000927a:	697b      	ldr	r3, [r7, #20]
9000927c:	2b00      	cmp	r3, #0
9000927e:	f000 8111 	beq.w	900094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90009282:	69bb      	ldr	r3, [r7, #24]
90009284:	2b02      	cmp	r3, #2
90009286:	f000 8083 	beq.w	90009390 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
9000928a:	69bb      	ldr	r3, [r7, #24]
9000928c:	2b02      	cmp	r3, #2
9000928e:	f200 80a1 	bhi.w	900093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90009292:	69bb      	ldr	r3, [r7, #24]
90009294:	2b00      	cmp	r3, #0
90009296:	d003      	beq.n	900092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009298:	69bb      	ldr	r3, [r7, #24]
9000929a:	2b01      	cmp	r3, #1
9000929c:	d056      	beq.n	9000934c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
9000929e:	e099      	b.n	900093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900092a0:	4b88      	ldr	r3, [pc, #544]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092a2:	681b      	ldr	r3, [r3, #0]
900092a4:	f003 0320 	and.w	r3, r3, #32
900092a8:	2b00      	cmp	r3, #0
900092aa:	d02d      	beq.n	90009308 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900092ac:	4b85      	ldr	r3, [pc, #532]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092ae:	681b      	ldr	r3, [r3, #0]
900092b0:	08db      	lsrs	r3, r3, #3
900092b2:	f003 0303 	and.w	r3, r3, #3
900092b6:	4a84      	ldr	r2, [pc, #528]	@ (900094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
900092b8:	fa22 f303 	lsr.w	r3, r2, r3
900092bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900092be:	68bb      	ldr	r3, [r7, #8]
900092c0:	ee07 3a90 	vmov	s15, r3
900092c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
900092c8:	697b      	ldr	r3, [r7, #20]
900092ca:	ee07 3a90 	vmov	s15, r3
900092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900092d6:	4b7b      	ldr	r3, [pc, #492]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900092da:	f3c3 0308 	ubfx	r3, r3, #0, #9
900092de:	ee07 3a90 	vmov	s15, r3
900092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900092e6:	ed97 6a03 	vldr	s12, [r7, #12]
900092ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900094cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900092ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
900092f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900092f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900092fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
900092fe:	ee67 7a27 	vmul.f32	s15, s14, s15
90009302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009306:	e087      	b.n	90009418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009308:	697b      	ldr	r3, [r7, #20]
9000930a:	ee07 3a90 	vmov	s15, r3
9000930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009312:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
90009316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000931a:	4b6a      	ldr	r3, [pc, #424]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000931c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000931e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009322:	ee07 3a90 	vmov	s15, r3
90009326:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000932a:	ed97 6a03 	vldr	s12, [r7, #12]
9000932e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900094cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009332:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009336:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000933a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000933e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009342:	ee67 7a27 	vmul.f32	s15, s14, s15
90009346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000934a:	e065      	b.n	90009418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000934c:	697b      	ldr	r3, [r7, #20]
9000934e:	ee07 3a90 	vmov	s15, r3
90009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009356:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000935a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000935e:	4b59      	ldr	r3, [pc, #356]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009362:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009366:	ee07 3a90 	vmov	s15, r3
9000936a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000936e:	ed97 6a03 	vldr	s12, [r7, #12]
90009372:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900094cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009376:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000937a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000937e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009382:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009386:	ee67 7a27 	vmul.f32	s15, s14, s15
9000938a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000938e:	e043      	b.n	90009418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009390:	697b      	ldr	r3, [r7, #20]
90009392:	ee07 3a90 	vmov	s15, r3
90009396:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000939a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
9000939e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900093a2:	4b48      	ldr	r3, [pc, #288]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900093a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900093aa:	ee07 3a90 	vmov	s15, r3
900093ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
900093b2:	ed97 6a03 	vldr	s12, [r7, #12]
900093b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900094cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900093ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
900093be:	ee76 7aa7 	vadd.f32	s15, s13, s15
900093c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093ca:	ee67 7a27 	vmul.f32	s15, s14, s15
900093ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900093d2:	e021      	b.n	90009418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900093d4:	697b      	ldr	r3, [r7, #20]
900093d6:	ee07 3a90 	vmov	s15, r3
900093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
900093e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900093e6:	4b37      	ldr	r3, [pc, #220]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900093ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
900093ee:	ee07 3a90 	vmov	s15, r3
900093f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900093f6:	ed97 6a03 	vldr	s12, [r7, #12]
900093fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900094cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900093fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009402:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000940a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000940e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009416:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90009418:	4b2a      	ldr	r3, [pc, #168]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000941a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000941c:	0a5b      	lsrs	r3, r3, #9
9000941e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009422:	ee07 3a90 	vmov	s15, r3
90009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000942a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000942e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009432:	edd7 6a07 	vldr	s13, [r7, #28]
90009436:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000943a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000943e:	ee17 2a90 	vmov	r2, s15
90009442:	687b      	ldr	r3, [r7, #4]
90009444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
90009446:	4b1f      	ldr	r3, [pc, #124]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000944a:	0c1b      	lsrs	r3, r3, #16
9000944c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009450:	ee07 3a90 	vmov	s15, r3
90009454:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000945c:	ee37 7a87 	vadd.f32	s14, s15, s14
90009460:	edd7 6a07 	vldr	s13, [r7, #28]
90009464:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000946c:	ee17 2a90 	vmov	r2, s15
90009470:	687b      	ldr	r3, [r7, #4]
90009472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009474:	4b13      	ldr	r3, [pc, #76]	@ (900094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009478:	0e1b      	lsrs	r3, r3, #24
9000947a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000947e:	ee07 3a90 	vmov	s15, r3
90009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000948a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000948e:	edd7 6a07 	vldr	s13, [r7, #28]
90009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000949a:	ee17 2a90 	vmov	r2, s15
9000949e:	687b      	ldr	r3, [r7, #4]
900094a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
900094a2:	e008      	b.n	900094b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
900094a4:	687b      	ldr	r3, [r7, #4]
900094a6:	2200      	movs	r2, #0
900094a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
900094aa:	687b      	ldr	r3, [r7, #4]
900094ac:	2200      	movs	r2, #0
900094ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
900094b0:	687b      	ldr	r3, [r7, #4]
900094b2:	2200      	movs	r2, #0
900094b4:	609a      	str	r2, [r3, #8]
}
900094b6:	bf00      	nop
900094b8:	3724      	adds	r7, #36	@ 0x24
900094ba:	46bd      	mov	sp, r7
900094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900094c0:	4770      	bx	lr
900094c2:	bf00      	nop
900094c4:	58024400 	.word	0x58024400
900094c8:	03d09000 	.word	0x03d09000
900094cc:	46000000 	.word	0x46000000
900094d0:	4c742400 	.word	0x4c742400
900094d4:	4a742400 	.word	0x4a742400
900094d8:	4bbebc20 	.word	0x4bbebc20

900094dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
900094dc:	b580      	push	{r7, lr}
900094de:	b084      	sub	sp, #16
900094e0:	af00      	add	r7, sp, #0
900094e2:	6078      	str	r0, [r7, #4]
900094e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900094e6:	2300      	movs	r3, #0
900094e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900094ea:	4b53      	ldr	r3, [pc, #332]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900094ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900094ee:	f003 0303 	and.w	r3, r3, #3
900094f2:	2b03      	cmp	r3, #3
900094f4:	d101      	bne.n	900094fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
900094f6:	2301      	movs	r3, #1
900094f8:	e099      	b.n	9000962e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
900094fa:	4b4f      	ldr	r3, [pc, #316]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900094fc:	681b      	ldr	r3, [r3, #0]
900094fe:	4a4e      	ldr	r2, [pc, #312]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009500:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009506:	f7f9 fe93 	bl	90003230 <HAL_GetTick>
9000950a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000950c:	e008      	b.n	90009520 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000950e:	f7f9 fe8f 	bl	90003230 <HAL_GetTick>
90009512:	4602      	mov	r2, r0
90009514:	68bb      	ldr	r3, [r7, #8]
90009516:	1ad3      	subs	r3, r2, r3
90009518:	2b02      	cmp	r3, #2
9000951a:	d901      	bls.n	90009520 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000951c:	2303      	movs	r3, #3
9000951e:	e086      	b.n	9000962e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009520:	4b45      	ldr	r3, [pc, #276]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009522:	681b      	ldr	r3, [r3, #0]
90009524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009528:	2b00      	cmp	r3, #0
9000952a:	d1f0      	bne.n	9000950e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000952c:	4b42      	ldr	r3, [pc, #264]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
9000952e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009530:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009534:	687b      	ldr	r3, [r7, #4]
90009536:	681b      	ldr	r3, [r3, #0]
90009538:	031b      	lsls	r3, r3, #12
9000953a:	493f      	ldr	r1, [pc, #252]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
9000953c:	4313      	orrs	r3, r2
9000953e:	628b      	str	r3, [r1, #40]	@ 0x28
90009540:	687b      	ldr	r3, [r7, #4]
90009542:	685b      	ldr	r3, [r3, #4]
90009544:	3b01      	subs	r3, #1
90009546:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000954a:	687b      	ldr	r3, [r7, #4]
9000954c:	689b      	ldr	r3, [r3, #8]
9000954e:	3b01      	subs	r3, #1
90009550:	025b      	lsls	r3, r3, #9
90009552:	b29b      	uxth	r3, r3
90009554:	431a      	orrs	r2, r3
90009556:	687b      	ldr	r3, [r7, #4]
90009558:	68db      	ldr	r3, [r3, #12]
9000955a:	3b01      	subs	r3, #1
9000955c:	041b      	lsls	r3, r3, #16
9000955e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009562:	431a      	orrs	r2, r3
90009564:	687b      	ldr	r3, [r7, #4]
90009566:	691b      	ldr	r3, [r3, #16]
90009568:	3b01      	subs	r3, #1
9000956a:	061b      	lsls	r3, r3, #24
9000956c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009570:	4931      	ldr	r1, [pc, #196]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009572:	4313      	orrs	r3, r2
90009574:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009576:	4b30      	ldr	r3, [pc, #192]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000957a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000957e:	687b      	ldr	r3, [r7, #4]
90009580:	695b      	ldr	r3, [r3, #20]
90009582:	492d      	ldr	r1, [pc, #180]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009584:	4313      	orrs	r3, r2
90009586:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009588:	4b2b      	ldr	r3, [pc, #172]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
9000958a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000958c:	f023 0220 	bic.w	r2, r3, #32
90009590:	687b      	ldr	r3, [r7, #4]
90009592:	699b      	ldr	r3, [r3, #24]
90009594:	4928      	ldr	r1, [pc, #160]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009596:	4313      	orrs	r3, r2
90009598:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
9000959a:	4b27      	ldr	r3, [pc, #156]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
9000959c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000959e:	4a26      	ldr	r2, [pc, #152]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095a0:	f023 0310 	bic.w	r3, r3, #16
900095a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
900095a6:	4b24      	ldr	r3, [pc, #144]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
900095aa:	4b24      	ldr	r3, [pc, #144]	@ (9000963c <RCCEx_PLL2_Config+0x160>)
900095ac:	4013      	ands	r3, r2
900095ae:	687a      	ldr	r2, [r7, #4]
900095b0:	69d2      	ldr	r2, [r2, #28]
900095b2:	00d2      	lsls	r2, r2, #3
900095b4:	4920      	ldr	r1, [pc, #128]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095b6:	4313      	orrs	r3, r2
900095b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
900095ba:	4b1f      	ldr	r3, [pc, #124]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095be:	4a1e      	ldr	r2, [pc, #120]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095c0:	f043 0310 	orr.w	r3, r3, #16
900095c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900095c6:	683b      	ldr	r3, [r7, #0]
900095c8:	2b00      	cmp	r3, #0
900095ca:	d106      	bne.n	900095da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
900095cc:	4b1a      	ldr	r3, [pc, #104]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095d0:	4a19      	ldr	r2, [pc, #100]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
900095d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095d8:	e00f      	b.n	900095fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900095da:	683b      	ldr	r3, [r7, #0]
900095dc:	2b01      	cmp	r3, #1
900095de:	d106      	bne.n	900095ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
900095e0:	4b15      	ldr	r3, [pc, #84]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095e4:	4a14      	ldr	r2, [pc, #80]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
900095ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095ec:	e005      	b.n	900095fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
900095ee:	4b12      	ldr	r3, [pc, #72]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095f2:	4a11      	ldr	r2, [pc, #68]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
900095f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
900095fa:	4b0f      	ldr	r3, [pc, #60]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
900095fc:	681b      	ldr	r3, [r3, #0]
900095fe:	4a0e      	ldr	r2, [pc, #56]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009600:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009606:	f7f9 fe13 	bl	90003230 <HAL_GetTick>
9000960a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000960c:	e008      	b.n	90009620 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000960e:	f7f9 fe0f 	bl	90003230 <HAL_GetTick>
90009612:	4602      	mov	r2, r0
90009614:	68bb      	ldr	r3, [r7, #8]
90009616:	1ad3      	subs	r3, r2, r3
90009618:	2b02      	cmp	r3, #2
9000961a:	d901      	bls.n	90009620 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000961c:	2303      	movs	r3, #3
9000961e:	e006      	b.n	9000962e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009620:	4b05      	ldr	r3, [pc, #20]	@ (90009638 <RCCEx_PLL2_Config+0x15c>)
90009622:	681b      	ldr	r3, [r3, #0]
90009624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009628:	2b00      	cmp	r3, #0
9000962a:	d0f0      	beq.n	9000960e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000962c:	7bfb      	ldrb	r3, [r7, #15]
}
9000962e:	4618      	mov	r0, r3
90009630:	3710      	adds	r7, #16
90009632:	46bd      	mov	sp, r7
90009634:	bd80      	pop	{r7, pc}
90009636:	bf00      	nop
90009638:	58024400 	.word	0x58024400
9000963c:	ffff0007 	.word	0xffff0007

90009640 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90009640:	b580      	push	{r7, lr}
90009642:	b084      	sub	sp, #16
90009644:	af00      	add	r7, sp, #0
90009646:	6078      	str	r0, [r7, #4]
90009648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000964a:	2300      	movs	r3, #0
9000964c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000964e:	4b53      	ldr	r3, [pc, #332]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009652:	f003 0303 	and.w	r3, r3, #3
90009656:	2b03      	cmp	r3, #3
90009658:	d101      	bne.n	9000965e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000965a:	2301      	movs	r3, #1
9000965c:	e099      	b.n	90009792 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000965e:	4b4f      	ldr	r3, [pc, #316]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009660:	681b      	ldr	r3, [r3, #0]
90009662:	4a4e      	ldr	r2, [pc, #312]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
90009668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000966a:	f7f9 fde1 	bl	90003230 <HAL_GetTick>
9000966e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009670:	e008      	b.n	90009684 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009672:	f7f9 fddd 	bl	90003230 <HAL_GetTick>
90009676:	4602      	mov	r2, r0
90009678:	68bb      	ldr	r3, [r7, #8]
9000967a:	1ad3      	subs	r3, r2, r3
9000967c:	2b02      	cmp	r3, #2
9000967e:	d901      	bls.n	90009684 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90009680:	2303      	movs	r3, #3
90009682:	e086      	b.n	90009792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009684:	4b45      	ldr	r3, [pc, #276]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009686:	681b      	ldr	r3, [r3, #0]
90009688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000968c:	2b00      	cmp	r3, #0
9000968e:	d1f0      	bne.n	90009672 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90009690:	4b42      	ldr	r3, [pc, #264]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009694:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90009698:	687b      	ldr	r3, [r7, #4]
9000969a:	681b      	ldr	r3, [r3, #0]
9000969c:	051b      	lsls	r3, r3, #20
9000969e:	493f      	ldr	r1, [pc, #252]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
900096a0:	4313      	orrs	r3, r2
900096a2:	628b      	str	r3, [r1, #40]	@ 0x28
900096a4:	687b      	ldr	r3, [r7, #4]
900096a6:	685b      	ldr	r3, [r3, #4]
900096a8:	3b01      	subs	r3, #1
900096aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
900096ae:	687b      	ldr	r3, [r7, #4]
900096b0:	689b      	ldr	r3, [r3, #8]
900096b2:	3b01      	subs	r3, #1
900096b4:	025b      	lsls	r3, r3, #9
900096b6:	b29b      	uxth	r3, r3
900096b8:	431a      	orrs	r2, r3
900096ba:	687b      	ldr	r3, [r7, #4]
900096bc:	68db      	ldr	r3, [r3, #12]
900096be:	3b01      	subs	r3, #1
900096c0:	041b      	lsls	r3, r3, #16
900096c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900096c6:	431a      	orrs	r2, r3
900096c8:	687b      	ldr	r3, [r7, #4]
900096ca:	691b      	ldr	r3, [r3, #16]
900096cc:	3b01      	subs	r3, #1
900096ce:	061b      	lsls	r3, r3, #24
900096d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900096d4:	4931      	ldr	r1, [pc, #196]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
900096d6:	4313      	orrs	r3, r2
900096d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
900096da:	4b30      	ldr	r3, [pc, #192]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
900096dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
900096e2:	687b      	ldr	r3, [r7, #4]
900096e4:	695b      	ldr	r3, [r3, #20]
900096e6:	492d      	ldr	r1, [pc, #180]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
900096e8:	4313      	orrs	r3, r2
900096ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
900096ec:	4b2b      	ldr	r3, [pc, #172]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
900096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
900096f4:	687b      	ldr	r3, [r7, #4]
900096f6:	699b      	ldr	r3, [r3, #24]
900096f8:	4928      	ldr	r1, [pc, #160]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
900096fa:	4313      	orrs	r3, r2
900096fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900096fe:	4b27      	ldr	r3, [pc, #156]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009702:	4a26      	ldr	r2, [pc, #152]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90009708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000970a:	4b24      	ldr	r3, [pc, #144]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
9000970c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000970e:	4b24      	ldr	r3, [pc, #144]	@ (900097a0 <RCCEx_PLL3_Config+0x160>)
90009710:	4013      	ands	r3, r2
90009712:	687a      	ldr	r2, [r7, #4]
90009714:	69d2      	ldr	r2, [r2, #28]
90009716:	00d2      	lsls	r2, r2, #3
90009718:	4920      	ldr	r1, [pc, #128]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
9000971a:	4313      	orrs	r3, r2
9000971c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000971e:	4b1f      	ldr	r3, [pc, #124]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009722:	4a1e      	ldr	r2, [pc, #120]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90009728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000972a:	683b      	ldr	r3, [r7, #0]
9000972c:	2b00      	cmp	r3, #0
9000972e:	d106      	bne.n	9000973e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90009730:	4b1a      	ldr	r3, [pc, #104]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009734:	4a19      	ldr	r2, [pc, #100]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009736:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000973a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000973c:	e00f      	b.n	9000975e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000973e:	683b      	ldr	r3, [r7, #0]
90009740:	2b01      	cmp	r3, #1
90009742:	d106      	bne.n	90009752 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90009744:	4b15      	ldr	r3, [pc, #84]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009748:	4a14      	ldr	r2, [pc, #80]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
9000974a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
9000974e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009750:	e005      	b.n	9000975e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90009752:	4b12      	ldr	r3, [pc, #72]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009756:	4a11      	ldr	r2, [pc, #68]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009758:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000975c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000975e:	4b0f      	ldr	r3, [pc, #60]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009760:	681b      	ldr	r3, [r3, #0]
90009762:	4a0e      	ldr	r2, [pc, #56]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
90009768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000976a:	f7f9 fd61 	bl	90003230 <HAL_GetTick>
9000976e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009770:	e008      	b.n	90009784 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009772:	f7f9 fd5d 	bl	90003230 <HAL_GetTick>
90009776:	4602      	mov	r2, r0
90009778:	68bb      	ldr	r3, [r7, #8]
9000977a:	1ad3      	subs	r3, r2, r3
9000977c:	2b02      	cmp	r3, #2
9000977e:	d901      	bls.n	90009784 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90009780:	2303      	movs	r3, #3
90009782:	e006      	b.n	90009792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009784:	4b05      	ldr	r3, [pc, #20]	@ (9000979c <RCCEx_PLL3_Config+0x15c>)
90009786:	681b      	ldr	r3, [r3, #0]
90009788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000978c:	2b00      	cmp	r3, #0
9000978e:	d0f0      	beq.n	90009772 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90009790:	7bfb      	ldrb	r3, [r7, #15]
}
90009792:	4618      	mov	r0, r3
90009794:	3710      	adds	r7, #16
90009796:	46bd      	mov	sp, r7
90009798:	bd80      	pop	{r7, pc}
9000979a:	bf00      	nop
9000979c:	58024400 	.word	0x58024400
900097a0:	ffff0007 	.word	0xffff0007

900097a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
900097a4:	b580      	push	{r7, lr}
900097a6:	b082      	sub	sp, #8
900097a8:	af00      	add	r7, sp, #0
900097aa:	6078      	str	r0, [r7, #4]
900097ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
900097ae:	687b      	ldr	r3, [r7, #4]
900097b0:	2b00      	cmp	r3, #0
900097b2:	d101      	bne.n	900097b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900097b4:	2301      	movs	r3, #1
900097b6:	e02b      	b.n	90009810 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
900097b8:	687b      	ldr	r3, [r7, #4]
900097ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900097be:	b2db      	uxtb	r3, r3
900097c0:	2b00      	cmp	r3, #0
900097c2:	d106      	bne.n	900097d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
900097c4:	687b      	ldr	r3, [r7, #4]
900097c6:	2200      	movs	r2, #0
900097c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
900097cc:	6878      	ldr	r0, [r7, #4]
900097ce:	f000 f825 	bl	9000981c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900097d2:	687b      	ldr	r3, [r7, #4]
900097d4:	2202      	movs	r2, #2
900097d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900097da:	687b      	ldr	r3, [r7, #4]
900097dc:	681a      	ldr	r2, [r3, #0]
900097de:	687b      	ldr	r3, [r7, #4]
900097e0:	3304      	adds	r3, #4
900097e2:	4619      	mov	r1, r3
900097e4:	4610      	mov	r0, r2
900097e6:	f001 fb51 	bl	9000ae8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
900097ea:	687b      	ldr	r3, [r7, #4]
900097ec:	6818      	ldr	r0, [r3, #0]
900097ee:	687b      	ldr	r3, [r7, #4]
900097f0:	685b      	ldr	r3, [r3, #4]
900097f2:	461a      	mov	r2, r3
900097f4:	6839      	ldr	r1, [r7, #0]
900097f6:	f001 fba5 	bl	9000af44 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
900097fa:	4b07      	ldr	r3, [pc, #28]	@ (90009818 <HAL_SDRAM_Init+0x74>)
900097fc:	681b      	ldr	r3, [r3, #0]
900097fe:	4a06      	ldr	r2, [pc, #24]	@ (90009818 <HAL_SDRAM_Init+0x74>)
90009800:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009804:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009806:	687b      	ldr	r3, [r7, #4]
90009808:	2201      	movs	r2, #1
9000980a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000980e:	2300      	movs	r3, #0
}
90009810:	4618      	mov	r0, r3
90009812:	3708      	adds	r7, #8
90009814:	46bd      	mov	sp, r7
90009816:	bd80      	pop	{r7, pc}
90009818:	52004000 	.word	0x52004000

9000981c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
9000981c:	b480      	push	{r7}
9000981e:	b083      	sub	sp, #12
90009820:	af00      	add	r7, sp, #0
90009822:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009824:	bf00      	nop
90009826:	370c      	adds	r7, #12
90009828:	46bd      	mov	sp, r7
9000982a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000982e:	4770      	bx	lr

90009830 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90009830:	b580      	push	{r7, lr}
90009832:	b086      	sub	sp, #24
90009834:	af00      	add	r7, sp, #0
90009836:	60f8      	str	r0, [r7, #12]
90009838:	60b9      	str	r1, [r7, #8]
9000983a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000983c:	68fb      	ldr	r3, [r7, #12]
9000983e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009842:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90009844:	7dfb      	ldrb	r3, [r7, #23]
90009846:	2b02      	cmp	r3, #2
90009848:	d101      	bne.n	9000984e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
9000984a:	2302      	movs	r3, #2
9000984c:	e021      	b.n	90009892 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000984e:	7dfb      	ldrb	r3, [r7, #23]
90009850:	2b01      	cmp	r3, #1
90009852:	d002      	beq.n	9000985a <HAL_SDRAM_SendCommand+0x2a>
90009854:	7dfb      	ldrb	r3, [r7, #23]
90009856:	2b05      	cmp	r3, #5
90009858:	d118      	bne.n	9000988c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000985a:	68fb      	ldr	r3, [r7, #12]
9000985c:	2202      	movs	r2, #2
9000985e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90009862:	68fb      	ldr	r3, [r7, #12]
90009864:	681b      	ldr	r3, [r3, #0]
90009866:	687a      	ldr	r2, [r7, #4]
90009868:	68b9      	ldr	r1, [r7, #8]
9000986a:	4618      	mov	r0, r3
9000986c:	f001 fbd4 	bl	9000b018 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009870:	68bb      	ldr	r3, [r7, #8]
90009872:	681b      	ldr	r3, [r3, #0]
90009874:	2b02      	cmp	r3, #2
90009876:	d104      	bne.n	90009882 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009878:	68fb      	ldr	r3, [r7, #12]
9000987a:	2205      	movs	r2, #5
9000987c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009880:	e006      	b.n	90009890 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
90009882:	68fb      	ldr	r3, [r7, #12]
90009884:	2201      	movs	r2, #1
90009886:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000988a:	e001      	b.n	90009890 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
9000988c:	2301      	movs	r3, #1
9000988e:	e000      	b.n	90009892 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90009890:	2300      	movs	r3, #0
}
90009892:	4618      	mov	r0, r3
90009894:	3718      	adds	r7, #24
90009896:	46bd      	mov	sp, r7
90009898:	bd80      	pop	{r7, pc}

9000989a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000989a:	b580      	push	{r7, lr}
9000989c:	b082      	sub	sp, #8
9000989e:	af00      	add	r7, sp, #0
900098a0:	6078      	str	r0, [r7, #4]
900098a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
900098a4:	687b      	ldr	r3, [r7, #4]
900098a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900098aa:	b2db      	uxtb	r3, r3
900098ac:	2b02      	cmp	r3, #2
900098ae:	d101      	bne.n	900098b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
900098b0:	2302      	movs	r3, #2
900098b2:	e016      	b.n	900098e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
900098b4:	687b      	ldr	r3, [r7, #4]
900098b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900098ba:	b2db      	uxtb	r3, r3
900098bc:	2b01      	cmp	r3, #1
900098be:	d10f      	bne.n	900098e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900098c0:	687b      	ldr	r3, [r7, #4]
900098c2:	2202      	movs	r2, #2
900098c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
900098c8:	687b      	ldr	r3, [r7, #4]
900098ca:	681b      	ldr	r3, [r3, #0]
900098cc:	6839      	ldr	r1, [r7, #0]
900098ce:	4618      	mov	r0, r3
900098d0:	f001 fbc6 	bl	9000b060 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
900098d4:	687b      	ldr	r3, [r7, #4]
900098d6:	2201      	movs	r2, #1
900098d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
900098dc:	2300      	movs	r3, #0
900098de:	e000      	b.n	900098e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
900098e0:	2301      	movs	r3, #1
}
900098e2:	4618      	mov	r0, r3
900098e4:	3708      	adds	r7, #8
900098e6:	46bd      	mov	sp, r7
900098e8:	bd80      	pop	{r7, pc}

900098ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
900098ea:	b580      	push	{r7, lr}
900098ec:	b082      	sub	sp, #8
900098ee:	af00      	add	r7, sp, #0
900098f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
900098f2:	687b      	ldr	r3, [r7, #4]
900098f4:	2b00      	cmp	r3, #0
900098f6:	d101      	bne.n	900098fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
900098f8:	2301      	movs	r3, #1
900098fa:	e049      	b.n	90009990 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900098fc:	687b      	ldr	r3, [r7, #4]
900098fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009902:	b2db      	uxtb	r3, r3
90009904:	2b00      	cmp	r3, #0
90009906:	d106      	bne.n	90009916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009908:	687b      	ldr	r3, [r7, #4]
9000990a:	2200      	movs	r2, #0
9000990c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90009910:	6878      	ldr	r0, [r7, #4]
90009912:	f000 f89d 	bl	90009a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90009916:	687b      	ldr	r3, [r7, #4]
90009918:	2202      	movs	r2, #2
9000991a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000991e:	687b      	ldr	r3, [r7, #4]
90009920:	681a      	ldr	r2, [r3, #0]
90009922:	687b      	ldr	r3, [r7, #4]
90009924:	3304      	adds	r3, #4
90009926:	4619      	mov	r1, r3
90009928:	4610      	mov	r0, r2
9000992a:	f000 f8a5 	bl	90009a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000992e:	687b      	ldr	r3, [r7, #4]
90009930:	2201      	movs	r2, #1
90009932:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009936:	687b      	ldr	r3, [r7, #4]
90009938:	2201      	movs	r2, #1
9000993a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000993e:	687b      	ldr	r3, [r7, #4]
90009940:	2201      	movs	r2, #1
90009942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009946:	687b      	ldr	r3, [r7, #4]
90009948:	2201      	movs	r2, #1
9000994a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000994e:	687b      	ldr	r3, [r7, #4]
90009950:	2201      	movs	r2, #1
90009952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009956:	687b      	ldr	r3, [r7, #4]
90009958:	2201      	movs	r2, #1
9000995a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000995e:	687b      	ldr	r3, [r7, #4]
90009960:	2201      	movs	r2, #1
90009962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009966:	687b      	ldr	r3, [r7, #4]
90009968:	2201      	movs	r2, #1
9000996a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000996e:	687b      	ldr	r3, [r7, #4]
90009970:	2201      	movs	r2, #1
90009972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009976:	687b      	ldr	r3, [r7, #4]
90009978:	2201      	movs	r2, #1
9000997a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000997e:	687b      	ldr	r3, [r7, #4]
90009980:	2201      	movs	r2, #1
90009982:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009986:	687b      	ldr	r3, [r7, #4]
90009988:	2201      	movs	r2, #1
9000998a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000998e:	2300      	movs	r3, #0
}
90009990:	4618      	mov	r0, r3
90009992:	3708      	adds	r7, #8
90009994:	46bd      	mov	sp, r7
90009996:	bd80      	pop	{r7, pc}

90009998 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009998:	b580      	push	{r7, lr}
9000999a:	b082      	sub	sp, #8
9000999c:	af00      	add	r7, sp, #0
9000999e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
900099a0:	687b      	ldr	r3, [r7, #4]
900099a2:	2202      	movs	r2, #2
900099a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
900099a8:	687b      	ldr	r3, [r7, #4]
900099aa:	681b      	ldr	r3, [r3, #0]
900099ac:	6a1a      	ldr	r2, [r3, #32]
900099ae:	f241 1311 	movw	r3, #4369	@ 0x1111
900099b2:	4013      	ands	r3, r2
900099b4:	2b00      	cmp	r3, #0
900099b6:	d10f      	bne.n	900099d8 <HAL_TIM_PWM_DeInit+0x40>
900099b8:	687b      	ldr	r3, [r7, #4]
900099ba:	681b      	ldr	r3, [r3, #0]
900099bc:	6a1a      	ldr	r2, [r3, #32]
900099be:	f240 4344 	movw	r3, #1092	@ 0x444
900099c2:	4013      	ands	r3, r2
900099c4:	2b00      	cmp	r3, #0
900099c6:	d107      	bne.n	900099d8 <HAL_TIM_PWM_DeInit+0x40>
900099c8:	687b      	ldr	r3, [r7, #4]
900099ca:	681b      	ldr	r3, [r3, #0]
900099cc:	681a      	ldr	r2, [r3, #0]
900099ce:	687b      	ldr	r3, [r7, #4]
900099d0:	681b      	ldr	r3, [r3, #0]
900099d2:	f022 0201 	bic.w	r2, r2, #1
900099d6:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
900099d8:	6878      	ldr	r0, [r7, #4]
900099da:	f000 f843 	bl	90009a64 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
900099de:	687b      	ldr	r3, [r7, #4]
900099e0:	2200      	movs	r2, #0
900099e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900099e6:	687b      	ldr	r3, [r7, #4]
900099e8:	2200      	movs	r2, #0
900099ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900099ee:	687b      	ldr	r3, [r7, #4]
900099f0:	2200      	movs	r2, #0
900099f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900099f6:	687b      	ldr	r3, [r7, #4]
900099f8:	2200      	movs	r2, #0
900099fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900099fe:	687b      	ldr	r3, [r7, #4]
90009a00:	2200      	movs	r2, #0
90009a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009a06:	687b      	ldr	r3, [r7, #4]
90009a08:	2200      	movs	r2, #0
90009a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009a0e:	687b      	ldr	r3, [r7, #4]
90009a10:	2200      	movs	r2, #0
90009a12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009a16:	687b      	ldr	r3, [r7, #4]
90009a18:	2200      	movs	r2, #0
90009a1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009a1e:	687b      	ldr	r3, [r7, #4]
90009a20:	2200      	movs	r2, #0
90009a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009a26:	687b      	ldr	r3, [r7, #4]
90009a28:	2200      	movs	r2, #0
90009a2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009a2e:	687b      	ldr	r3, [r7, #4]
90009a30:	2200      	movs	r2, #0
90009a32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009a36:	687b      	ldr	r3, [r7, #4]
90009a38:	2200      	movs	r2, #0
90009a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
90009a3e:	687b      	ldr	r3, [r7, #4]
90009a40:	2200      	movs	r2, #0
90009a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90009a46:	2300      	movs	r3, #0
}
90009a48:	4618      	mov	r0, r3
90009a4a:	3708      	adds	r7, #8
90009a4c:	46bd      	mov	sp, r7
90009a4e:	bd80      	pop	{r7, pc}

90009a50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009a50:	b480      	push	{r7}
90009a52:	b083      	sub	sp, #12
90009a54:	af00      	add	r7, sp, #0
90009a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009a58:	bf00      	nop
90009a5a:	370c      	adds	r7, #12
90009a5c:	46bd      	mov	sp, r7
90009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a62:	4770      	bx	lr

90009a64 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009a64:	b480      	push	{r7}
90009a66:	b083      	sub	sp, #12
90009a68:	af00      	add	r7, sp, #0
90009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009a6c:	bf00      	nop
90009a6e:	370c      	adds	r7, #12
90009a70:	46bd      	mov	sp, r7
90009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a76:	4770      	bx	lr

90009a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009a78:	b480      	push	{r7}
90009a7a:	b085      	sub	sp, #20
90009a7c:	af00      	add	r7, sp, #0
90009a7e:	6078      	str	r0, [r7, #4]
90009a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009a82:	687b      	ldr	r3, [r7, #4]
90009a84:	681b      	ldr	r3, [r3, #0]
90009a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009a88:	687b      	ldr	r3, [r7, #4]
90009a8a:	4a43      	ldr	r2, [pc, #268]	@ (90009b98 <TIM_Base_SetConfig+0x120>)
90009a8c:	4293      	cmp	r3, r2
90009a8e:	d013      	beq.n	90009ab8 <TIM_Base_SetConfig+0x40>
90009a90:	687b      	ldr	r3, [r7, #4]
90009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009a96:	d00f      	beq.n	90009ab8 <TIM_Base_SetConfig+0x40>
90009a98:	687b      	ldr	r3, [r7, #4]
90009a9a:	4a40      	ldr	r2, [pc, #256]	@ (90009b9c <TIM_Base_SetConfig+0x124>)
90009a9c:	4293      	cmp	r3, r2
90009a9e:	d00b      	beq.n	90009ab8 <TIM_Base_SetConfig+0x40>
90009aa0:	687b      	ldr	r3, [r7, #4]
90009aa2:	4a3f      	ldr	r2, [pc, #252]	@ (90009ba0 <TIM_Base_SetConfig+0x128>)
90009aa4:	4293      	cmp	r3, r2
90009aa6:	d007      	beq.n	90009ab8 <TIM_Base_SetConfig+0x40>
90009aa8:	687b      	ldr	r3, [r7, #4]
90009aaa:	4a3e      	ldr	r2, [pc, #248]	@ (90009ba4 <TIM_Base_SetConfig+0x12c>)
90009aac:	4293      	cmp	r3, r2
90009aae:	d003      	beq.n	90009ab8 <TIM_Base_SetConfig+0x40>
90009ab0:	687b      	ldr	r3, [r7, #4]
90009ab2:	4a3d      	ldr	r2, [pc, #244]	@ (90009ba8 <TIM_Base_SetConfig+0x130>)
90009ab4:	4293      	cmp	r3, r2
90009ab6:	d108      	bne.n	90009aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009ab8:	68fb      	ldr	r3, [r7, #12]
90009aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
90009abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009ac0:	683b      	ldr	r3, [r7, #0]
90009ac2:	685b      	ldr	r3, [r3, #4]
90009ac4:	68fa      	ldr	r2, [r7, #12]
90009ac6:	4313      	orrs	r3, r2
90009ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90009aca:	687b      	ldr	r3, [r7, #4]
90009acc:	4a32      	ldr	r2, [pc, #200]	@ (90009b98 <TIM_Base_SetConfig+0x120>)
90009ace:	4293      	cmp	r3, r2
90009ad0:	d01f      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009ad2:	687b      	ldr	r3, [r7, #4]
90009ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009ad8:	d01b      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009ada:	687b      	ldr	r3, [r7, #4]
90009adc:	4a2f      	ldr	r2, [pc, #188]	@ (90009b9c <TIM_Base_SetConfig+0x124>)
90009ade:	4293      	cmp	r3, r2
90009ae0:	d017      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009ae2:	687b      	ldr	r3, [r7, #4]
90009ae4:	4a2e      	ldr	r2, [pc, #184]	@ (90009ba0 <TIM_Base_SetConfig+0x128>)
90009ae6:	4293      	cmp	r3, r2
90009ae8:	d013      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009aea:	687b      	ldr	r3, [r7, #4]
90009aec:	4a2d      	ldr	r2, [pc, #180]	@ (90009ba4 <TIM_Base_SetConfig+0x12c>)
90009aee:	4293      	cmp	r3, r2
90009af0:	d00f      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009af2:	687b      	ldr	r3, [r7, #4]
90009af4:	4a2c      	ldr	r2, [pc, #176]	@ (90009ba8 <TIM_Base_SetConfig+0x130>)
90009af6:	4293      	cmp	r3, r2
90009af8:	d00b      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009afa:	687b      	ldr	r3, [r7, #4]
90009afc:	4a2b      	ldr	r2, [pc, #172]	@ (90009bac <TIM_Base_SetConfig+0x134>)
90009afe:	4293      	cmp	r3, r2
90009b00:	d007      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009b02:	687b      	ldr	r3, [r7, #4]
90009b04:	4a2a      	ldr	r2, [pc, #168]	@ (90009bb0 <TIM_Base_SetConfig+0x138>)
90009b06:	4293      	cmp	r3, r2
90009b08:	d003      	beq.n	90009b12 <TIM_Base_SetConfig+0x9a>
90009b0a:	687b      	ldr	r3, [r7, #4]
90009b0c:	4a29      	ldr	r2, [pc, #164]	@ (90009bb4 <TIM_Base_SetConfig+0x13c>)
90009b0e:	4293      	cmp	r3, r2
90009b10:	d108      	bne.n	90009b24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009b12:	68fb      	ldr	r3, [r7, #12]
90009b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90009b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009b1a:	683b      	ldr	r3, [r7, #0]
90009b1c:	68db      	ldr	r3, [r3, #12]
90009b1e:	68fa      	ldr	r2, [r7, #12]
90009b20:	4313      	orrs	r3, r2
90009b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009b24:	68fb      	ldr	r3, [r7, #12]
90009b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
90009b2a:	683b      	ldr	r3, [r7, #0]
90009b2c:	695b      	ldr	r3, [r3, #20]
90009b2e:	4313      	orrs	r3, r2
90009b30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009b32:	683b      	ldr	r3, [r7, #0]
90009b34:	689a      	ldr	r2, [r3, #8]
90009b36:	687b      	ldr	r3, [r7, #4]
90009b38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90009b3a:	683b      	ldr	r3, [r7, #0]
90009b3c:	681a      	ldr	r2, [r3, #0]
90009b3e:	687b      	ldr	r3, [r7, #4]
90009b40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009b42:	687b      	ldr	r3, [r7, #4]
90009b44:	4a14      	ldr	r2, [pc, #80]	@ (90009b98 <TIM_Base_SetConfig+0x120>)
90009b46:	4293      	cmp	r3, r2
90009b48:	d00f      	beq.n	90009b6a <TIM_Base_SetConfig+0xf2>
90009b4a:	687b      	ldr	r3, [r7, #4]
90009b4c:	4a16      	ldr	r2, [pc, #88]	@ (90009ba8 <TIM_Base_SetConfig+0x130>)
90009b4e:	4293      	cmp	r3, r2
90009b50:	d00b      	beq.n	90009b6a <TIM_Base_SetConfig+0xf2>
90009b52:	687b      	ldr	r3, [r7, #4]
90009b54:	4a15      	ldr	r2, [pc, #84]	@ (90009bac <TIM_Base_SetConfig+0x134>)
90009b56:	4293      	cmp	r3, r2
90009b58:	d007      	beq.n	90009b6a <TIM_Base_SetConfig+0xf2>
90009b5a:	687b      	ldr	r3, [r7, #4]
90009b5c:	4a14      	ldr	r2, [pc, #80]	@ (90009bb0 <TIM_Base_SetConfig+0x138>)
90009b5e:	4293      	cmp	r3, r2
90009b60:	d003      	beq.n	90009b6a <TIM_Base_SetConfig+0xf2>
90009b62:	687b      	ldr	r3, [r7, #4]
90009b64:	4a13      	ldr	r2, [pc, #76]	@ (90009bb4 <TIM_Base_SetConfig+0x13c>)
90009b66:	4293      	cmp	r3, r2
90009b68:	d103      	bne.n	90009b72 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90009b6a:	683b      	ldr	r3, [r7, #0]
90009b6c:	691a      	ldr	r2, [r3, #16]
90009b6e:	687b      	ldr	r3, [r7, #4]
90009b70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009b72:	687b      	ldr	r3, [r7, #4]
90009b74:	681b      	ldr	r3, [r3, #0]
90009b76:	f043 0204 	orr.w	r2, r3, #4
90009b7a:	687b      	ldr	r3, [r7, #4]
90009b7c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009b7e:	687b      	ldr	r3, [r7, #4]
90009b80:	2201      	movs	r2, #1
90009b82:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009b84:	687b      	ldr	r3, [r7, #4]
90009b86:	68fa      	ldr	r2, [r7, #12]
90009b88:	601a      	str	r2, [r3, #0]
}
90009b8a:	bf00      	nop
90009b8c:	3714      	adds	r7, #20
90009b8e:	46bd      	mov	sp, r7
90009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b94:	4770      	bx	lr
90009b96:	bf00      	nop
90009b98:	40010000 	.word	0x40010000
90009b9c:	40000400 	.word	0x40000400
90009ba0:	40000800 	.word	0x40000800
90009ba4:	40000c00 	.word	0x40000c00
90009ba8:	40010400 	.word	0x40010400
90009bac:	40014000 	.word	0x40014000
90009bb0:	40014400 	.word	0x40014400
90009bb4:	40014800 	.word	0x40014800

90009bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009bb8:	b580      	push	{r7, lr}
90009bba:	b082      	sub	sp, #8
90009bbc:	af00      	add	r7, sp, #0
90009bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009bc0:	687b      	ldr	r3, [r7, #4]
90009bc2:	2b00      	cmp	r3, #0
90009bc4:	d101      	bne.n	90009bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009bc6:	2301      	movs	r3, #1
90009bc8:	e042      	b.n	90009c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009bca:	687b      	ldr	r3, [r7, #4]
90009bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009bd0:	2b00      	cmp	r3, #0
90009bd2:	d106      	bne.n	90009be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009bd4:	687b      	ldr	r3, [r7, #4]
90009bd6:	2200      	movs	r2, #0
90009bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009bdc:	6878      	ldr	r0, [r7, #4]
90009bde:	f7f6 ff77 	bl	90000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009be2:	687b      	ldr	r3, [r7, #4]
90009be4:	2224      	movs	r2, #36	@ 0x24
90009be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009bea:	687b      	ldr	r3, [r7, #4]
90009bec:	681b      	ldr	r3, [r3, #0]
90009bee:	681a      	ldr	r2, [r3, #0]
90009bf0:	687b      	ldr	r3, [r7, #4]
90009bf2:	681b      	ldr	r3, [r3, #0]
90009bf4:	f022 0201 	bic.w	r2, r2, #1
90009bf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009bfa:	687b      	ldr	r3, [r7, #4]
90009bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009bfe:	2b00      	cmp	r3, #0
90009c00:	d002      	beq.n	90009c08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009c02:	6878      	ldr	r0, [r7, #4]
90009c04:	f000 fe1e 	bl	9000a844 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009c08:	6878      	ldr	r0, [r7, #4]
90009c0a:	f000 f8b3 	bl	90009d74 <UART_SetConfig>
90009c0e:	4603      	mov	r3, r0
90009c10:	2b01      	cmp	r3, #1
90009c12:	d101      	bne.n	90009c18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009c14:	2301      	movs	r3, #1
90009c16:	e01b      	b.n	90009c50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009c18:	687b      	ldr	r3, [r7, #4]
90009c1a:	681b      	ldr	r3, [r3, #0]
90009c1c:	685a      	ldr	r2, [r3, #4]
90009c1e:	687b      	ldr	r3, [r7, #4]
90009c20:	681b      	ldr	r3, [r3, #0]
90009c22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009c28:	687b      	ldr	r3, [r7, #4]
90009c2a:	681b      	ldr	r3, [r3, #0]
90009c2c:	689a      	ldr	r2, [r3, #8]
90009c2e:	687b      	ldr	r3, [r7, #4]
90009c30:	681b      	ldr	r3, [r3, #0]
90009c32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009c38:	687b      	ldr	r3, [r7, #4]
90009c3a:	681b      	ldr	r3, [r3, #0]
90009c3c:	681a      	ldr	r2, [r3, #0]
90009c3e:	687b      	ldr	r3, [r7, #4]
90009c40:	681b      	ldr	r3, [r3, #0]
90009c42:	f042 0201 	orr.w	r2, r2, #1
90009c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009c48:	6878      	ldr	r0, [r7, #4]
90009c4a:	f000 fe9d 	bl	9000a988 <UART_CheckIdleState>
90009c4e:	4603      	mov	r3, r0
}
90009c50:	4618      	mov	r0, r3
90009c52:	3708      	adds	r7, #8
90009c54:	46bd      	mov	sp, r7
90009c56:	bd80      	pop	{r7, pc}

90009c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009c58:	b580      	push	{r7, lr}
90009c5a:	b08a      	sub	sp, #40	@ 0x28
90009c5c:	af02      	add	r7, sp, #8
90009c5e:	60f8      	str	r0, [r7, #12]
90009c60:	60b9      	str	r1, [r7, #8]
90009c62:	603b      	str	r3, [r7, #0]
90009c64:	4613      	mov	r3, r2
90009c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009c68:	68fb      	ldr	r3, [r7, #12]
90009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009c6e:	2b20      	cmp	r3, #32
90009c70:	d17b      	bne.n	90009d6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009c72:	68bb      	ldr	r3, [r7, #8]
90009c74:	2b00      	cmp	r3, #0
90009c76:	d002      	beq.n	90009c7e <HAL_UART_Transmit+0x26>
90009c78:	88fb      	ldrh	r3, [r7, #6]
90009c7a:	2b00      	cmp	r3, #0
90009c7c:	d101      	bne.n	90009c82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009c7e:	2301      	movs	r3, #1
90009c80:	e074      	b.n	90009d6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009c82:	68fb      	ldr	r3, [r7, #12]
90009c84:	2200      	movs	r2, #0
90009c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009c8a:	68fb      	ldr	r3, [r7, #12]
90009c8c:	2221      	movs	r2, #33	@ 0x21
90009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009c92:	f7f9 facd 	bl	90003230 <HAL_GetTick>
90009c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009c98:	68fb      	ldr	r3, [r7, #12]
90009c9a:	88fa      	ldrh	r2, [r7, #6]
90009c9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009ca0:	68fb      	ldr	r3, [r7, #12]
90009ca2:	88fa      	ldrh	r2, [r7, #6]
90009ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009ca8:	68fb      	ldr	r3, [r7, #12]
90009caa:	689b      	ldr	r3, [r3, #8]
90009cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009cb0:	d108      	bne.n	90009cc4 <HAL_UART_Transmit+0x6c>
90009cb2:	68fb      	ldr	r3, [r7, #12]
90009cb4:	691b      	ldr	r3, [r3, #16]
90009cb6:	2b00      	cmp	r3, #0
90009cb8:	d104      	bne.n	90009cc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009cba:	2300      	movs	r3, #0
90009cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009cbe:	68bb      	ldr	r3, [r7, #8]
90009cc0:	61bb      	str	r3, [r7, #24]
90009cc2:	e003      	b.n	90009ccc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009cc4:	68bb      	ldr	r3, [r7, #8]
90009cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009cc8:	2300      	movs	r3, #0
90009cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009ccc:	e030      	b.n	90009d30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009cce:	683b      	ldr	r3, [r7, #0]
90009cd0:	9300      	str	r3, [sp, #0]
90009cd2:	697b      	ldr	r3, [r7, #20]
90009cd4:	2200      	movs	r2, #0
90009cd6:	2180      	movs	r1, #128	@ 0x80
90009cd8:	68f8      	ldr	r0, [r7, #12]
90009cda:	f000 feff 	bl	9000aadc <UART_WaitOnFlagUntilTimeout>
90009cde:	4603      	mov	r3, r0
90009ce0:	2b00      	cmp	r3, #0
90009ce2:	d005      	beq.n	90009cf0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009ce4:	68fb      	ldr	r3, [r7, #12]
90009ce6:	2220      	movs	r2, #32
90009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009cec:	2303      	movs	r3, #3
90009cee:	e03d      	b.n	90009d6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009cf0:	69fb      	ldr	r3, [r7, #28]
90009cf2:	2b00      	cmp	r3, #0
90009cf4:	d10b      	bne.n	90009d0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009cf6:	69bb      	ldr	r3, [r7, #24]
90009cf8:	881b      	ldrh	r3, [r3, #0]
90009cfa:	461a      	mov	r2, r3
90009cfc:	68fb      	ldr	r3, [r7, #12]
90009cfe:	681b      	ldr	r3, [r3, #0]
90009d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009d04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009d06:	69bb      	ldr	r3, [r7, #24]
90009d08:	3302      	adds	r3, #2
90009d0a:	61bb      	str	r3, [r7, #24]
90009d0c:	e007      	b.n	90009d1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009d0e:	69fb      	ldr	r3, [r7, #28]
90009d10:	781a      	ldrb	r2, [r3, #0]
90009d12:	68fb      	ldr	r3, [r7, #12]
90009d14:	681b      	ldr	r3, [r3, #0]
90009d16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009d18:	69fb      	ldr	r3, [r7, #28]
90009d1a:	3301      	adds	r3, #1
90009d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009d1e:	68fb      	ldr	r3, [r7, #12]
90009d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009d24:	b29b      	uxth	r3, r3
90009d26:	3b01      	subs	r3, #1
90009d28:	b29a      	uxth	r2, r3
90009d2a:	68fb      	ldr	r3, [r7, #12]
90009d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009d30:	68fb      	ldr	r3, [r7, #12]
90009d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009d36:	b29b      	uxth	r3, r3
90009d38:	2b00      	cmp	r3, #0
90009d3a:	d1c8      	bne.n	90009cce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009d3c:	683b      	ldr	r3, [r7, #0]
90009d3e:	9300      	str	r3, [sp, #0]
90009d40:	697b      	ldr	r3, [r7, #20]
90009d42:	2200      	movs	r2, #0
90009d44:	2140      	movs	r1, #64	@ 0x40
90009d46:	68f8      	ldr	r0, [r7, #12]
90009d48:	f000 fec8 	bl	9000aadc <UART_WaitOnFlagUntilTimeout>
90009d4c:	4603      	mov	r3, r0
90009d4e:	2b00      	cmp	r3, #0
90009d50:	d005      	beq.n	90009d5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009d52:	68fb      	ldr	r3, [r7, #12]
90009d54:	2220      	movs	r2, #32
90009d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009d5a:	2303      	movs	r3, #3
90009d5c:	e006      	b.n	90009d6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009d5e:	68fb      	ldr	r3, [r7, #12]
90009d60:	2220      	movs	r2, #32
90009d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009d66:	2300      	movs	r3, #0
90009d68:	e000      	b.n	90009d6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009d6a:	2302      	movs	r3, #2
  }
}
90009d6c:	4618      	mov	r0, r3
90009d6e:	3720      	adds	r7, #32
90009d70:	46bd      	mov	sp, r7
90009d72:	bd80      	pop	{r7, pc}

90009d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009d78:	b092      	sub	sp, #72	@ 0x48
90009d7a:	af00      	add	r7, sp, #0
90009d7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009d7e:	2300      	movs	r3, #0
90009d80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009d84:	697b      	ldr	r3, [r7, #20]
90009d86:	689a      	ldr	r2, [r3, #8]
90009d88:	697b      	ldr	r3, [r7, #20]
90009d8a:	691b      	ldr	r3, [r3, #16]
90009d8c:	431a      	orrs	r2, r3
90009d8e:	697b      	ldr	r3, [r7, #20]
90009d90:	695b      	ldr	r3, [r3, #20]
90009d92:	431a      	orrs	r2, r3
90009d94:	697b      	ldr	r3, [r7, #20]
90009d96:	69db      	ldr	r3, [r3, #28]
90009d98:	4313      	orrs	r3, r2
90009d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009d9c:	697b      	ldr	r3, [r7, #20]
90009d9e:	681b      	ldr	r3, [r3, #0]
90009da0:	681a      	ldr	r2, [r3, #0]
90009da2:	4bbe      	ldr	r3, [pc, #760]	@ (9000a09c <UART_SetConfig+0x328>)
90009da4:	4013      	ands	r3, r2
90009da6:	697a      	ldr	r2, [r7, #20]
90009da8:	6812      	ldr	r2, [r2, #0]
90009daa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009dac:	430b      	orrs	r3, r1
90009dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009db0:	697b      	ldr	r3, [r7, #20]
90009db2:	681b      	ldr	r3, [r3, #0]
90009db4:	685b      	ldr	r3, [r3, #4]
90009db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009dba:	697b      	ldr	r3, [r7, #20]
90009dbc:	68da      	ldr	r2, [r3, #12]
90009dbe:	697b      	ldr	r3, [r7, #20]
90009dc0:	681b      	ldr	r3, [r3, #0]
90009dc2:	430a      	orrs	r2, r1
90009dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009dc6:	697b      	ldr	r3, [r7, #20]
90009dc8:	699b      	ldr	r3, [r3, #24]
90009dca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009dcc:	697b      	ldr	r3, [r7, #20]
90009dce:	681b      	ldr	r3, [r3, #0]
90009dd0:	4ab3      	ldr	r2, [pc, #716]	@ (9000a0a0 <UART_SetConfig+0x32c>)
90009dd2:	4293      	cmp	r3, r2
90009dd4:	d004      	beq.n	90009de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009dd6:	697b      	ldr	r3, [r7, #20]
90009dd8:	6a1b      	ldr	r3, [r3, #32]
90009dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009ddc:	4313      	orrs	r3, r2
90009dde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009de0:	697b      	ldr	r3, [r7, #20]
90009de2:	681b      	ldr	r3, [r3, #0]
90009de4:	689a      	ldr	r2, [r3, #8]
90009de6:	4baf      	ldr	r3, [pc, #700]	@ (9000a0a4 <UART_SetConfig+0x330>)
90009de8:	4013      	ands	r3, r2
90009dea:	697a      	ldr	r2, [r7, #20]
90009dec:	6812      	ldr	r2, [r2, #0]
90009dee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009df0:	430b      	orrs	r3, r1
90009df2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009df4:	697b      	ldr	r3, [r7, #20]
90009df6:	681b      	ldr	r3, [r3, #0]
90009df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009dfa:	f023 010f 	bic.w	r1, r3, #15
90009dfe:	697b      	ldr	r3, [r7, #20]
90009e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009e02:	697b      	ldr	r3, [r7, #20]
90009e04:	681b      	ldr	r3, [r3, #0]
90009e06:	430a      	orrs	r2, r1
90009e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009e0a:	697b      	ldr	r3, [r7, #20]
90009e0c:	681b      	ldr	r3, [r3, #0]
90009e0e:	4aa6      	ldr	r2, [pc, #664]	@ (9000a0a8 <UART_SetConfig+0x334>)
90009e10:	4293      	cmp	r3, r2
90009e12:	d177      	bne.n	90009f04 <UART_SetConfig+0x190>
90009e14:	4ba5      	ldr	r3, [pc, #660]	@ (9000a0ac <UART_SetConfig+0x338>)
90009e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009e1c:	2b28      	cmp	r3, #40	@ 0x28
90009e1e:	d86d      	bhi.n	90009efc <UART_SetConfig+0x188>
90009e20:	a201      	add	r2, pc, #4	@ (adr r2, 90009e28 <UART_SetConfig+0xb4>)
90009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009e26:	bf00      	nop
90009e28:	90009ecd 	.word	0x90009ecd
90009e2c:	90009efd 	.word	0x90009efd
90009e30:	90009efd 	.word	0x90009efd
90009e34:	90009efd 	.word	0x90009efd
90009e38:	90009efd 	.word	0x90009efd
90009e3c:	90009efd 	.word	0x90009efd
90009e40:	90009efd 	.word	0x90009efd
90009e44:	90009efd 	.word	0x90009efd
90009e48:	90009ed5 	.word	0x90009ed5
90009e4c:	90009efd 	.word	0x90009efd
90009e50:	90009efd 	.word	0x90009efd
90009e54:	90009efd 	.word	0x90009efd
90009e58:	90009efd 	.word	0x90009efd
90009e5c:	90009efd 	.word	0x90009efd
90009e60:	90009efd 	.word	0x90009efd
90009e64:	90009efd 	.word	0x90009efd
90009e68:	90009edd 	.word	0x90009edd
90009e6c:	90009efd 	.word	0x90009efd
90009e70:	90009efd 	.word	0x90009efd
90009e74:	90009efd 	.word	0x90009efd
90009e78:	90009efd 	.word	0x90009efd
90009e7c:	90009efd 	.word	0x90009efd
90009e80:	90009efd 	.word	0x90009efd
90009e84:	90009efd 	.word	0x90009efd
90009e88:	90009ee5 	.word	0x90009ee5
90009e8c:	90009efd 	.word	0x90009efd
90009e90:	90009efd 	.word	0x90009efd
90009e94:	90009efd 	.word	0x90009efd
90009e98:	90009efd 	.word	0x90009efd
90009e9c:	90009efd 	.word	0x90009efd
90009ea0:	90009efd 	.word	0x90009efd
90009ea4:	90009efd 	.word	0x90009efd
90009ea8:	90009eed 	.word	0x90009eed
90009eac:	90009efd 	.word	0x90009efd
90009eb0:	90009efd 	.word	0x90009efd
90009eb4:	90009efd 	.word	0x90009efd
90009eb8:	90009efd 	.word	0x90009efd
90009ebc:	90009efd 	.word	0x90009efd
90009ec0:	90009efd 	.word	0x90009efd
90009ec4:	90009efd 	.word	0x90009efd
90009ec8:	90009ef5 	.word	0x90009ef5
90009ecc:	2301      	movs	r3, #1
90009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ed2:	e222      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009ed4:	2304      	movs	r3, #4
90009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eda:	e21e      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009edc:	2308      	movs	r3, #8
90009ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ee2:	e21a      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009ee4:	2310      	movs	r3, #16
90009ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eea:	e216      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009eec:	2320      	movs	r3, #32
90009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ef2:	e212      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009ef4:	2340      	movs	r3, #64	@ 0x40
90009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009efa:	e20e      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009efc:	2380      	movs	r3, #128	@ 0x80
90009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f02:	e20a      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f04:	697b      	ldr	r3, [r7, #20]
90009f06:	681b      	ldr	r3, [r3, #0]
90009f08:	4a69      	ldr	r2, [pc, #420]	@ (9000a0b0 <UART_SetConfig+0x33c>)
90009f0a:	4293      	cmp	r3, r2
90009f0c:	d130      	bne.n	90009f70 <UART_SetConfig+0x1fc>
90009f0e:	4b67      	ldr	r3, [pc, #412]	@ (9000a0ac <UART_SetConfig+0x338>)
90009f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f12:	f003 0307 	and.w	r3, r3, #7
90009f16:	2b05      	cmp	r3, #5
90009f18:	d826      	bhi.n	90009f68 <UART_SetConfig+0x1f4>
90009f1a:	a201      	add	r2, pc, #4	@ (adr r2, 90009f20 <UART_SetConfig+0x1ac>)
90009f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f20:	90009f39 	.word	0x90009f39
90009f24:	90009f41 	.word	0x90009f41
90009f28:	90009f49 	.word	0x90009f49
90009f2c:	90009f51 	.word	0x90009f51
90009f30:	90009f59 	.word	0x90009f59
90009f34:	90009f61 	.word	0x90009f61
90009f38:	2300      	movs	r3, #0
90009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f3e:	e1ec      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f40:	2304      	movs	r3, #4
90009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f46:	e1e8      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f48:	2308      	movs	r3, #8
90009f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f4e:	e1e4      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f50:	2310      	movs	r3, #16
90009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f56:	e1e0      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f58:	2320      	movs	r3, #32
90009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f5e:	e1dc      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f60:	2340      	movs	r3, #64	@ 0x40
90009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f66:	e1d8      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f68:	2380      	movs	r3, #128	@ 0x80
90009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f6e:	e1d4      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009f70:	697b      	ldr	r3, [r7, #20]
90009f72:	681b      	ldr	r3, [r3, #0]
90009f74:	4a4f      	ldr	r2, [pc, #316]	@ (9000a0b4 <UART_SetConfig+0x340>)
90009f76:	4293      	cmp	r3, r2
90009f78:	d130      	bne.n	90009fdc <UART_SetConfig+0x268>
90009f7a:	4b4c      	ldr	r3, [pc, #304]	@ (9000a0ac <UART_SetConfig+0x338>)
90009f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f7e:	f003 0307 	and.w	r3, r3, #7
90009f82:	2b05      	cmp	r3, #5
90009f84:	d826      	bhi.n	90009fd4 <UART_SetConfig+0x260>
90009f86:	a201      	add	r2, pc, #4	@ (adr r2, 90009f8c <UART_SetConfig+0x218>)
90009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f8c:	90009fa5 	.word	0x90009fa5
90009f90:	90009fad 	.word	0x90009fad
90009f94:	90009fb5 	.word	0x90009fb5
90009f98:	90009fbd 	.word	0x90009fbd
90009f9c:	90009fc5 	.word	0x90009fc5
90009fa0:	90009fcd 	.word	0x90009fcd
90009fa4:	2300      	movs	r3, #0
90009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009faa:	e1b6      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009fac:	2304      	movs	r3, #4
90009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fb2:	e1b2      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009fb4:	2308      	movs	r3, #8
90009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fba:	e1ae      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009fbc:	2310      	movs	r3, #16
90009fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fc2:	e1aa      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009fc4:	2320      	movs	r3, #32
90009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fca:	e1a6      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009fcc:	2340      	movs	r3, #64	@ 0x40
90009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fd2:	e1a2      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009fd4:	2380      	movs	r3, #128	@ 0x80
90009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fda:	e19e      	b.n	9000a31a <UART_SetConfig+0x5a6>
90009fdc:	697b      	ldr	r3, [r7, #20]
90009fde:	681b      	ldr	r3, [r3, #0]
90009fe0:	4a35      	ldr	r2, [pc, #212]	@ (9000a0b8 <UART_SetConfig+0x344>)
90009fe2:	4293      	cmp	r3, r2
90009fe4:	d130      	bne.n	9000a048 <UART_SetConfig+0x2d4>
90009fe6:	4b31      	ldr	r3, [pc, #196]	@ (9000a0ac <UART_SetConfig+0x338>)
90009fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009fea:	f003 0307 	and.w	r3, r3, #7
90009fee:	2b05      	cmp	r3, #5
90009ff0:	d826      	bhi.n	9000a040 <UART_SetConfig+0x2cc>
90009ff2:	a201      	add	r2, pc, #4	@ (adr r2, 90009ff8 <UART_SetConfig+0x284>)
90009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009ff8:	9000a011 	.word	0x9000a011
90009ffc:	9000a019 	.word	0x9000a019
9000a000:	9000a021 	.word	0x9000a021
9000a004:	9000a029 	.word	0x9000a029
9000a008:	9000a031 	.word	0x9000a031
9000a00c:	9000a039 	.word	0x9000a039
9000a010:	2300      	movs	r3, #0
9000a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a016:	e180      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a018:	2304      	movs	r3, #4
9000a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a01e:	e17c      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a020:	2308      	movs	r3, #8
9000a022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a026:	e178      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a028:	2310      	movs	r3, #16
9000a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a02e:	e174      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a030:	2320      	movs	r3, #32
9000a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a036:	e170      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a038:	2340      	movs	r3, #64	@ 0x40
9000a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a03e:	e16c      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a040:	2380      	movs	r3, #128	@ 0x80
9000a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a046:	e168      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a048:	697b      	ldr	r3, [r7, #20]
9000a04a:	681b      	ldr	r3, [r3, #0]
9000a04c:	4a1b      	ldr	r2, [pc, #108]	@ (9000a0bc <UART_SetConfig+0x348>)
9000a04e:	4293      	cmp	r3, r2
9000a050:	d142      	bne.n	9000a0d8 <UART_SetConfig+0x364>
9000a052:	4b16      	ldr	r3, [pc, #88]	@ (9000a0ac <UART_SetConfig+0x338>)
9000a054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a056:	f003 0307 	and.w	r3, r3, #7
9000a05a:	2b05      	cmp	r3, #5
9000a05c:	d838      	bhi.n	9000a0d0 <UART_SetConfig+0x35c>
9000a05e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a064 <UART_SetConfig+0x2f0>)
9000a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a064:	9000a07d 	.word	0x9000a07d
9000a068:	9000a085 	.word	0x9000a085
9000a06c:	9000a08d 	.word	0x9000a08d
9000a070:	9000a095 	.word	0x9000a095
9000a074:	9000a0c1 	.word	0x9000a0c1
9000a078:	9000a0c9 	.word	0x9000a0c9
9000a07c:	2300      	movs	r3, #0
9000a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a082:	e14a      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a084:	2304      	movs	r3, #4
9000a086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a08a:	e146      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a08c:	2308      	movs	r3, #8
9000a08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a092:	e142      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a094:	2310      	movs	r3, #16
9000a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a09a:	e13e      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a09c:	cfff69f3 	.word	0xcfff69f3
9000a0a0:	58000c00 	.word	0x58000c00
9000a0a4:	11fff4ff 	.word	0x11fff4ff
9000a0a8:	40011000 	.word	0x40011000
9000a0ac:	58024400 	.word	0x58024400
9000a0b0:	40004400 	.word	0x40004400
9000a0b4:	40004800 	.word	0x40004800
9000a0b8:	40004c00 	.word	0x40004c00
9000a0bc:	40005000 	.word	0x40005000
9000a0c0:	2320      	movs	r3, #32
9000a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0c6:	e128      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a0c8:	2340      	movs	r3, #64	@ 0x40
9000a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ce:	e124      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a0d0:	2380      	movs	r3, #128	@ 0x80
9000a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0d6:	e120      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a0d8:	697b      	ldr	r3, [r7, #20]
9000a0da:	681b      	ldr	r3, [r3, #0]
9000a0dc:	4acb      	ldr	r2, [pc, #812]	@ (9000a40c <UART_SetConfig+0x698>)
9000a0de:	4293      	cmp	r3, r2
9000a0e0:	d176      	bne.n	9000a1d0 <UART_SetConfig+0x45c>
9000a0e2:	4bcb      	ldr	r3, [pc, #812]	@ (9000a410 <UART_SetConfig+0x69c>)
9000a0e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a0e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a0ea:	2b28      	cmp	r3, #40	@ 0x28
9000a0ec:	d86c      	bhi.n	9000a1c8 <UART_SetConfig+0x454>
9000a0ee:	a201      	add	r2, pc, #4	@ (adr r2, 9000a0f4 <UART_SetConfig+0x380>)
9000a0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a0f4:	9000a199 	.word	0x9000a199
9000a0f8:	9000a1c9 	.word	0x9000a1c9
9000a0fc:	9000a1c9 	.word	0x9000a1c9
9000a100:	9000a1c9 	.word	0x9000a1c9
9000a104:	9000a1c9 	.word	0x9000a1c9
9000a108:	9000a1c9 	.word	0x9000a1c9
9000a10c:	9000a1c9 	.word	0x9000a1c9
9000a110:	9000a1c9 	.word	0x9000a1c9
9000a114:	9000a1a1 	.word	0x9000a1a1
9000a118:	9000a1c9 	.word	0x9000a1c9
9000a11c:	9000a1c9 	.word	0x9000a1c9
9000a120:	9000a1c9 	.word	0x9000a1c9
9000a124:	9000a1c9 	.word	0x9000a1c9
9000a128:	9000a1c9 	.word	0x9000a1c9
9000a12c:	9000a1c9 	.word	0x9000a1c9
9000a130:	9000a1c9 	.word	0x9000a1c9
9000a134:	9000a1a9 	.word	0x9000a1a9
9000a138:	9000a1c9 	.word	0x9000a1c9
9000a13c:	9000a1c9 	.word	0x9000a1c9
9000a140:	9000a1c9 	.word	0x9000a1c9
9000a144:	9000a1c9 	.word	0x9000a1c9
9000a148:	9000a1c9 	.word	0x9000a1c9
9000a14c:	9000a1c9 	.word	0x9000a1c9
9000a150:	9000a1c9 	.word	0x9000a1c9
9000a154:	9000a1b1 	.word	0x9000a1b1
9000a158:	9000a1c9 	.word	0x9000a1c9
9000a15c:	9000a1c9 	.word	0x9000a1c9
9000a160:	9000a1c9 	.word	0x9000a1c9
9000a164:	9000a1c9 	.word	0x9000a1c9
9000a168:	9000a1c9 	.word	0x9000a1c9
9000a16c:	9000a1c9 	.word	0x9000a1c9
9000a170:	9000a1c9 	.word	0x9000a1c9
9000a174:	9000a1b9 	.word	0x9000a1b9
9000a178:	9000a1c9 	.word	0x9000a1c9
9000a17c:	9000a1c9 	.word	0x9000a1c9
9000a180:	9000a1c9 	.word	0x9000a1c9
9000a184:	9000a1c9 	.word	0x9000a1c9
9000a188:	9000a1c9 	.word	0x9000a1c9
9000a18c:	9000a1c9 	.word	0x9000a1c9
9000a190:	9000a1c9 	.word	0x9000a1c9
9000a194:	9000a1c1 	.word	0x9000a1c1
9000a198:	2301      	movs	r3, #1
9000a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a19e:	e0bc      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a1a0:	2304      	movs	r3, #4
9000a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1a6:	e0b8      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a1a8:	2308      	movs	r3, #8
9000a1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1ae:	e0b4      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a1b0:	2310      	movs	r3, #16
9000a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1b6:	e0b0      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a1b8:	2320      	movs	r3, #32
9000a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1be:	e0ac      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a1c0:	2340      	movs	r3, #64	@ 0x40
9000a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1c6:	e0a8      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a1c8:	2380      	movs	r3, #128	@ 0x80
9000a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1ce:	e0a4      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a1d0:	697b      	ldr	r3, [r7, #20]
9000a1d2:	681b      	ldr	r3, [r3, #0]
9000a1d4:	4a8f      	ldr	r2, [pc, #572]	@ (9000a414 <UART_SetConfig+0x6a0>)
9000a1d6:	4293      	cmp	r3, r2
9000a1d8:	d130      	bne.n	9000a23c <UART_SetConfig+0x4c8>
9000a1da:	4b8d      	ldr	r3, [pc, #564]	@ (9000a410 <UART_SetConfig+0x69c>)
9000a1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a1de:	f003 0307 	and.w	r3, r3, #7
9000a1e2:	2b05      	cmp	r3, #5
9000a1e4:	d826      	bhi.n	9000a234 <UART_SetConfig+0x4c0>
9000a1e6:	a201      	add	r2, pc, #4	@ (adr r2, 9000a1ec <UART_SetConfig+0x478>)
9000a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a1ec:	9000a205 	.word	0x9000a205
9000a1f0:	9000a20d 	.word	0x9000a20d
9000a1f4:	9000a215 	.word	0x9000a215
9000a1f8:	9000a21d 	.word	0x9000a21d
9000a1fc:	9000a225 	.word	0x9000a225
9000a200:	9000a22d 	.word	0x9000a22d
9000a204:	2300      	movs	r3, #0
9000a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a20a:	e086      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a20c:	2304      	movs	r3, #4
9000a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a212:	e082      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a214:	2308      	movs	r3, #8
9000a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a21a:	e07e      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a21c:	2310      	movs	r3, #16
9000a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a222:	e07a      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a224:	2320      	movs	r3, #32
9000a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a22a:	e076      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a22c:	2340      	movs	r3, #64	@ 0x40
9000a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a232:	e072      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a234:	2380      	movs	r3, #128	@ 0x80
9000a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a23a:	e06e      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a23c:	697b      	ldr	r3, [r7, #20]
9000a23e:	681b      	ldr	r3, [r3, #0]
9000a240:	4a75      	ldr	r2, [pc, #468]	@ (9000a418 <UART_SetConfig+0x6a4>)
9000a242:	4293      	cmp	r3, r2
9000a244:	d130      	bne.n	9000a2a8 <UART_SetConfig+0x534>
9000a246:	4b72      	ldr	r3, [pc, #456]	@ (9000a410 <UART_SetConfig+0x69c>)
9000a248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a24a:	f003 0307 	and.w	r3, r3, #7
9000a24e:	2b05      	cmp	r3, #5
9000a250:	d826      	bhi.n	9000a2a0 <UART_SetConfig+0x52c>
9000a252:	a201      	add	r2, pc, #4	@ (adr r2, 9000a258 <UART_SetConfig+0x4e4>)
9000a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a258:	9000a271 	.word	0x9000a271
9000a25c:	9000a279 	.word	0x9000a279
9000a260:	9000a281 	.word	0x9000a281
9000a264:	9000a289 	.word	0x9000a289
9000a268:	9000a291 	.word	0x9000a291
9000a26c:	9000a299 	.word	0x9000a299
9000a270:	2300      	movs	r3, #0
9000a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a276:	e050      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a278:	2304      	movs	r3, #4
9000a27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a27e:	e04c      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a280:	2308      	movs	r3, #8
9000a282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a286:	e048      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a288:	2310      	movs	r3, #16
9000a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a28e:	e044      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a290:	2320      	movs	r3, #32
9000a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a296:	e040      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a298:	2340      	movs	r3, #64	@ 0x40
9000a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a29e:	e03c      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a2a0:	2380      	movs	r3, #128	@ 0x80
9000a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2a6:	e038      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a2a8:	697b      	ldr	r3, [r7, #20]
9000a2aa:	681b      	ldr	r3, [r3, #0]
9000a2ac:	4a5b      	ldr	r2, [pc, #364]	@ (9000a41c <UART_SetConfig+0x6a8>)
9000a2ae:	4293      	cmp	r3, r2
9000a2b0:	d130      	bne.n	9000a314 <UART_SetConfig+0x5a0>
9000a2b2:	4b57      	ldr	r3, [pc, #348]	@ (9000a410 <UART_SetConfig+0x69c>)
9000a2b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a2b6:	f003 0307 	and.w	r3, r3, #7
9000a2ba:	2b05      	cmp	r3, #5
9000a2bc:	d826      	bhi.n	9000a30c <UART_SetConfig+0x598>
9000a2be:	a201      	add	r2, pc, #4	@ (adr r2, 9000a2c4 <UART_SetConfig+0x550>)
9000a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a2c4:	9000a2dd 	.word	0x9000a2dd
9000a2c8:	9000a2e5 	.word	0x9000a2e5
9000a2cc:	9000a2ed 	.word	0x9000a2ed
9000a2d0:	9000a2f5 	.word	0x9000a2f5
9000a2d4:	9000a2fd 	.word	0x9000a2fd
9000a2d8:	9000a305 	.word	0x9000a305
9000a2dc:	2302      	movs	r3, #2
9000a2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2e2:	e01a      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a2e4:	2304      	movs	r3, #4
9000a2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2ea:	e016      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a2ec:	2308      	movs	r3, #8
9000a2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2f2:	e012      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a2f4:	2310      	movs	r3, #16
9000a2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2fa:	e00e      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a2fc:	2320      	movs	r3, #32
9000a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a302:	e00a      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a304:	2340      	movs	r3, #64	@ 0x40
9000a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a30a:	e006      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a30c:	2380      	movs	r3, #128	@ 0x80
9000a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a312:	e002      	b.n	9000a31a <UART_SetConfig+0x5a6>
9000a314:	2380      	movs	r3, #128	@ 0x80
9000a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a31a:	697b      	ldr	r3, [r7, #20]
9000a31c:	681b      	ldr	r3, [r3, #0]
9000a31e:	4a3f      	ldr	r2, [pc, #252]	@ (9000a41c <UART_SetConfig+0x6a8>)
9000a320:	4293      	cmp	r3, r2
9000a322:	f040 80f8 	bne.w	9000a516 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a32a:	2b20      	cmp	r3, #32
9000a32c:	dc46      	bgt.n	9000a3bc <UART_SetConfig+0x648>
9000a32e:	2b02      	cmp	r3, #2
9000a330:	f2c0 8082 	blt.w	9000a438 <UART_SetConfig+0x6c4>
9000a334:	3b02      	subs	r3, #2
9000a336:	2b1e      	cmp	r3, #30
9000a338:	d87e      	bhi.n	9000a438 <UART_SetConfig+0x6c4>
9000a33a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a340 <UART_SetConfig+0x5cc>)
9000a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a340:	9000a3c3 	.word	0x9000a3c3
9000a344:	9000a439 	.word	0x9000a439
9000a348:	9000a3cb 	.word	0x9000a3cb
9000a34c:	9000a439 	.word	0x9000a439
9000a350:	9000a439 	.word	0x9000a439
9000a354:	9000a439 	.word	0x9000a439
9000a358:	9000a3db 	.word	0x9000a3db
9000a35c:	9000a439 	.word	0x9000a439
9000a360:	9000a439 	.word	0x9000a439
9000a364:	9000a439 	.word	0x9000a439
9000a368:	9000a439 	.word	0x9000a439
9000a36c:	9000a439 	.word	0x9000a439
9000a370:	9000a439 	.word	0x9000a439
9000a374:	9000a439 	.word	0x9000a439
9000a378:	9000a3eb 	.word	0x9000a3eb
9000a37c:	9000a439 	.word	0x9000a439
9000a380:	9000a439 	.word	0x9000a439
9000a384:	9000a439 	.word	0x9000a439
9000a388:	9000a439 	.word	0x9000a439
9000a38c:	9000a439 	.word	0x9000a439
9000a390:	9000a439 	.word	0x9000a439
9000a394:	9000a439 	.word	0x9000a439
9000a398:	9000a439 	.word	0x9000a439
9000a39c:	9000a439 	.word	0x9000a439
9000a3a0:	9000a439 	.word	0x9000a439
9000a3a4:	9000a439 	.word	0x9000a439
9000a3a8:	9000a439 	.word	0x9000a439
9000a3ac:	9000a439 	.word	0x9000a439
9000a3b0:	9000a439 	.word	0x9000a439
9000a3b4:	9000a439 	.word	0x9000a439
9000a3b8:	9000a42b 	.word	0x9000a42b
9000a3bc:	2b40      	cmp	r3, #64	@ 0x40
9000a3be:	d037      	beq.n	9000a430 <UART_SetConfig+0x6bc>
9000a3c0:	e03a      	b.n	9000a438 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a3c2:	f7fe fdcd 	bl	90008f60 <HAL_RCCEx_GetD3PCLK1Freq>
9000a3c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a3c8:	e03c      	b.n	9000a444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a3ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a3ce:	4618      	mov	r0, r3
9000a3d0:	f7fe fddc 	bl	90008f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3d8:	e034      	b.n	9000a444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a3da:	f107 0318 	add.w	r3, r7, #24
9000a3de:	4618      	mov	r0, r3
9000a3e0:	f7fe ff28 	bl	90009234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a3e4:	69fb      	ldr	r3, [r7, #28]
9000a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3e8:	e02c      	b.n	9000a444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a3ea:	4b09      	ldr	r3, [pc, #36]	@ (9000a410 <UART_SetConfig+0x69c>)
9000a3ec:	681b      	ldr	r3, [r3, #0]
9000a3ee:	f003 0320 	and.w	r3, r3, #32
9000a3f2:	2b00      	cmp	r3, #0
9000a3f4:	d016      	beq.n	9000a424 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a3f6:	4b06      	ldr	r3, [pc, #24]	@ (9000a410 <UART_SetConfig+0x69c>)
9000a3f8:	681b      	ldr	r3, [r3, #0]
9000a3fa:	08db      	lsrs	r3, r3, #3
9000a3fc:	f003 0303 	and.w	r3, r3, #3
9000a400:	4a07      	ldr	r2, [pc, #28]	@ (9000a420 <UART_SetConfig+0x6ac>)
9000a402:	fa22 f303 	lsr.w	r3, r2, r3
9000a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a408:	e01c      	b.n	9000a444 <UART_SetConfig+0x6d0>
9000a40a:	bf00      	nop
9000a40c:	40011400 	.word	0x40011400
9000a410:	58024400 	.word	0x58024400
9000a414:	40007800 	.word	0x40007800
9000a418:	40007c00 	.word	0x40007c00
9000a41c:	58000c00 	.word	0x58000c00
9000a420:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a424:	4b9d      	ldr	r3, [pc, #628]	@ (9000a69c <UART_SetConfig+0x928>)
9000a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a428:	e00c      	b.n	9000a444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a42a:	4b9d      	ldr	r3, [pc, #628]	@ (9000a6a0 <UART_SetConfig+0x92c>)
9000a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a42e:	e009      	b.n	9000a444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a436:	e005      	b.n	9000a444 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a438:	2300      	movs	r3, #0
9000a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a43c:	2301      	movs	r3, #1
9000a43e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a442:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a446:	2b00      	cmp	r3, #0
9000a448:	f000 81de 	beq.w	9000a808 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a44c:	697b      	ldr	r3, [r7, #20]
9000a44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a450:	4a94      	ldr	r2, [pc, #592]	@ (9000a6a4 <UART_SetConfig+0x930>)
9000a452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a456:	461a      	mov	r2, r3
9000a458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a45a:	fbb3 f3f2 	udiv	r3, r3, r2
9000a45e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a460:	697b      	ldr	r3, [r7, #20]
9000a462:	685a      	ldr	r2, [r3, #4]
9000a464:	4613      	mov	r3, r2
9000a466:	005b      	lsls	r3, r3, #1
9000a468:	4413      	add	r3, r2
9000a46a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a46c:	429a      	cmp	r2, r3
9000a46e:	d305      	bcc.n	9000a47c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a470:	697b      	ldr	r3, [r7, #20]
9000a472:	685b      	ldr	r3, [r3, #4]
9000a474:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a478:	429a      	cmp	r2, r3
9000a47a:	d903      	bls.n	9000a484 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a47c:	2301      	movs	r3, #1
9000a47e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a482:	e1c1      	b.n	9000a808 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a486:	2200      	movs	r2, #0
9000a488:	60bb      	str	r3, [r7, #8]
9000a48a:	60fa      	str	r2, [r7, #12]
9000a48c:	697b      	ldr	r3, [r7, #20]
9000a48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a490:	4a84      	ldr	r2, [pc, #528]	@ (9000a6a4 <UART_SetConfig+0x930>)
9000a492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a496:	b29b      	uxth	r3, r3
9000a498:	2200      	movs	r2, #0
9000a49a:	603b      	str	r3, [r7, #0]
9000a49c:	607a      	str	r2, [r7, #4]
9000a49e:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a4a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a4a6:	f7f5 ff6b 	bl	90000380 <__aeabi_uldivmod>
9000a4aa:	4602      	mov	r2, r0
9000a4ac:	460b      	mov	r3, r1
9000a4ae:	4610      	mov	r0, r2
9000a4b0:	4619      	mov	r1, r3
9000a4b2:	f04f 0200 	mov.w	r2, #0
9000a4b6:	f04f 0300 	mov.w	r3, #0
9000a4ba:	020b      	lsls	r3, r1, #8
9000a4bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a4c0:	0202      	lsls	r2, r0, #8
9000a4c2:	6979      	ldr	r1, [r7, #20]
9000a4c4:	6849      	ldr	r1, [r1, #4]
9000a4c6:	0849      	lsrs	r1, r1, #1
9000a4c8:	2000      	movs	r0, #0
9000a4ca:	460c      	mov	r4, r1
9000a4cc:	4605      	mov	r5, r0
9000a4ce:	eb12 0804 	adds.w	r8, r2, r4
9000a4d2:	eb43 0905 	adc.w	r9, r3, r5
9000a4d6:	697b      	ldr	r3, [r7, #20]
9000a4d8:	685b      	ldr	r3, [r3, #4]
9000a4da:	2200      	movs	r2, #0
9000a4dc:	469a      	mov	sl, r3
9000a4de:	4693      	mov	fp, r2
9000a4e0:	4652      	mov	r2, sl
9000a4e2:	465b      	mov	r3, fp
9000a4e4:	4640      	mov	r0, r8
9000a4e6:	4649      	mov	r1, r9
9000a4e8:	f7f5 ff4a 	bl	90000380 <__aeabi_uldivmod>
9000a4ec:	4602      	mov	r2, r0
9000a4ee:	460b      	mov	r3, r1
9000a4f0:	4613      	mov	r3, r2
9000a4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a4fa:	d308      	bcc.n	9000a50e <UART_SetConfig+0x79a>
9000a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a502:	d204      	bcs.n	9000a50e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a504:	697b      	ldr	r3, [r7, #20]
9000a506:	681b      	ldr	r3, [r3, #0]
9000a508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a50a:	60da      	str	r2, [r3, #12]
9000a50c:	e17c      	b.n	9000a808 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a50e:	2301      	movs	r3, #1
9000a510:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a514:	e178      	b.n	9000a808 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a516:	697b      	ldr	r3, [r7, #20]
9000a518:	69db      	ldr	r3, [r3, #28]
9000a51a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a51e:	f040 80c5 	bne.w	9000a6ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a522:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a526:	2b20      	cmp	r3, #32
9000a528:	dc48      	bgt.n	9000a5bc <UART_SetConfig+0x848>
9000a52a:	2b00      	cmp	r3, #0
9000a52c:	db7b      	blt.n	9000a626 <UART_SetConfig+0x8b2>
9000a52e:	2b20      	cmp	r3, #32
9000a530:	d879      	bhi.n	9000a626 <UART_SetConfig+0x8b2>
9000a532:	a201      	add	r2, pc, #4	@ (adr r2, 9000a538 <UART_SetConfig+0x7c4>)
9000a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a538:	9000a5c3 	.word	0x9000a5c3
9000a53c:	9000a5cb 	.word	0x9000a5cb
9000a540:	9000a627 	.word	0x9000a627
9000a544:	9000a627 	.word	0x9000a627
9000a548:	9000a5d3 	.word	0x9000a5d3
9000a54c:	9000a627 	.word	0x9000a627
9000a550:	9000a627 	.word	0x9000a627
9000a554:	9000a627 	.word	0x9000a627
9000a558:	9000a5e3 	.word	0x9000a5e3
9000a55c:	9000a627 	.word	0x9000a627
9000a560:	9000a627 	.word	0x9000a627
9000a564:	9000a627 	.word	0x9000a627
9000a568:	9000a627 	.word	0x9000a627
9000a56c:	9000a627 	.word	0x9000a627
9000a570:	9000a627 	.word	0x9000a627
9000a574:	9000a627 	.word	0x9000a627
9000a578:	9000a5f3 	.word	0x9000a5f3
9000a57c:	9000a627 	.word	0x9000a627
9000a580:	9000a627 	.word	0x9000a627
9000a584:	9000a627 	.word	0x9000a627
9000a588:	9000a627 	.word	0x9000a627
9000a58c:	9000a627 	.word	0x9000a627
9000a590:	9000a627 	.word	0x9000a627
9000a594:	9000a627 	.word	0x9000a627
9000a598:	9000a627 	.word	0x9000a627
9000a59c:	9000a627 	.word	0x9000a627
9000a5a0:	9000a627 	.word	0x9000a627
9000a5a4:	9000a627 	.word	0x9000a627
9000a5a8:	9000a627 	.word	0x9000a627
9000a5ac:	9000a627 	.word	0x9000a627
9000a5b0:	9000a627 	.word	0x9000a627
9000a5b4:	9000a627 	.word	0x9000a627
9000a5b8:	9000a619 	.word	0x9000a619
9000a5bc:	2b40      	cmp	r3, #64	@ 0x40
9000a5be:	d02e      	beq.n	9000a61e <UART_SetConfig+0x8aa>
9000a5c0:	e031      	b.n	9000a626 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a5c2:	f7fd fa97 	bl	90007af4 <HAL_RCC_GetPCLK1Freq>
9000a5c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5c8:	e033      	b.n	9000a632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a5ca:	f7fd faa9 	bl	90007b20 <HAL_RCC_GetPCLK2Freq>
9000a5ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5d0:	e02f      	b.n	9000a632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a5d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a5d6:	4618      	mov	r0, r3
9000a5d8:	f7fe fcd8 	bl	90008f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a5e0:	e027      	b.n	9000a632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a5e2:	f107 0318 	add.w	r3, r7, #24
9000a5e6:	4618      	mov	r0, r3
9000a5e8:	f7fe fe24 	bl	90009234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a5ec:	69fb      	ldr	r3, [r7, #28]
9000a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a5f0:	e01f      	b.n	9000a632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a5f2:	4b2d      	ldr	r3, [pc, #180]	@ (9000a6a8 <UART_SetConfig+0x934>)
9000a5f4:	681b      	ldr	r3, [r3, #0]
9000a5f6:	f003 0320 	and.w	r3, r3, #32
9000a5fa:	2b00      	cmp	r3, #0
9000a5fc:	d009      	beq.n	9000a612 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a5fe:	4b2a      	ldr	r3, [pc, #168]	@ (9000a6a8 <UART_SetConfig+0x934>)
9000a600:	681b      	ldr	r3, [r3, #0]
9000a602:	08db      	lsrs	r3, r3, #3
9000a604:	f003 0303 	and.w	r3, r3, #3
9000a608:	4a24      	ldr	r2, [pc, #144]	@ (9000a69c <UART_SetConfig+0x928>)
9000a60a:	fa22 f303 	lsr.w	r3, r2, r3
9000a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a610:	e00f      	b.n	9000a632 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a612:	4b22      	ldr	r3, [pc, #136]	@ (9000a69c <UART_SetConfig+0x928>)
9000a614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a616:	e00c      	b.n	9000a632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a618:	4b21      	ldr	r3, [pc, #132]	@ (9000a6a0 <UART_SetConfig+0x92c>)
9000a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a61c:	e009      	b.n	9000a632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a61e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a624:	e005      	b.n	9000a632 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a626:	2300      	movs	r3, #0
9000a628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a62a:	2301      	movs	r3, #1
9000a62c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a634:	2b00      	cmp	r3, #0
9000a636:	f000 80e7 	beq.w	9000a808 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a63a:	697b      	ldr	r3, [r7, #20]
9000a63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a63e:	4a19      	ldr	r2, [pc, #100]	@ (9000a6a4 <UART_SetConfig+0x930>)
9000a640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a644:	461a      	mov	r2, r3
9000a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a648:	fbb3 f3f2 	udiv	r3, r3, r2
9000a64c:	005a      	lsls	r2, r3, #1
9000a64e:	697b      	ldr	r3, [r7, #20]
9000a650:	685b      	ldr	r3, [r3, #4]
9000a652:	085b      	lsrs	r3, r3, #1
9000a654:	441a      	add	r2, r3
9000a656:	697b      	ldr	r3, [r7, #20]
9000a658:	685b      	ldr	r3, [r3, #4]
9000a65a:	fbb2 f3f3 	udiv	r3, r2, r3
9000a65e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a662:	2b0f      	cmp	r3, #15
9000a664:	d916      	bls.n	9000a694 <UART_SetConfig+0x920>
9000a666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a66c:	d212      	bcs.n	9000a694 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a670:	b29b      	uxth	r3, r3
9000a672:	f023 030f 	bic.w	r3, r3, #15
9000a676:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a67a:	085b      	lsrs	r3, r3, #1
9000a67c:	b29b      	uxth	r3, r3
9000a67e:	f003 0307 	and.w	r3, r3, #7
9000a682:	b29a      	uxth	r2, r3
9000a684:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a686:	4313      	orrs	r3, r2
9000a688:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a68a:	697b      	ldr	r3, [r7, #20]
9000a68c:	681b      	ldr	r3, [r3, #0]
9000a68e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a690:	60da      	str	r2, [r3, #12]
9000a692:	e0b9      	b.n	9000a808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a694:	2301      	movs	r3, #1
9000a696:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a69a:	e0b5      	b.n	9000a808 <UART_SetConfig+0xa94>
9000a69c:	03d09000 	.word	0x03d09000
9000a6a0:	003d0900 	.word	0x003d0900
9000a6a4:	9000d740 	.word	0x9000d740
9000a6a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a6ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a6b0:	2b20      	cmp	r3, #32
9000a6b2:	dc49      	bgt.n	9000a748 <UART_SetConfig+0x9d4>
9000a6b4:	2b00      	cmp	r3, #0
9000a6b6:	db7c      	blt.n	9000a7b2 <UART_SetConfig+0xa3e>
9000a6b8:	2b20      	cmp	r3, #32
9000a6ba:	d87a      	bhi.n	9000a7b2 <UART_SetConfig+0xa3e>
9000a6bc:	a201      	add	r2, pc, #4	@ (adr r2, 9000a6c4 <UART_SetConfig+0x950>)
9000a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a6c2:	bf00      	nop
9000a6c4:	9000a74f 	.word	0x9000a74f
9000a6c8:	9000a757 	.word	0x9000a757
9000a6cc:	9000a7b3 	.word	0x9000a7b3
9000a6d0:	9000a7b3 	.word	0x9000a7b3
9000a6d4:	9000a75f 	.word	0x9000a75f
9000a6d8:	9000a7b3 	.word	0x9000a7b3
9000a6dc:	9000a7b3 	.word	0x9000a7b3
9000a6e0:	9000a7b3 	.word	0x9000a7b3
9000a6e4:	9000a76f 	.word	0x9000a76f
9000a6e8:	9000a7b3 	.word	0x9000a7b3
9000a6ec:	9000a7b3 	.word	0x9000a7b3
9000a6f0:	9000a7b3 	.word	0x9000a7b3
9000a6f4:	9000a7b3 	.word	0x9000a7b3
9000a6f8:	9000a7b3 	.word	0x9000a7b3
9000a6fc:	9000a7b3 	.word	0x9000a7b3
9000a700:	9000a7b3 	.word	0x9000a7b3
9000a704:	9000a77f 	.word	0x9000a77f
9000a708:	9000a7b3 	.word	0x9000a7b3
9000a70c:	9000a7b3 	.word	0x9000a7b3
9000a710:	9000a7b3 	.word	0x9000a7b3
9000a714:	9000a7b3 	.word	0x9000a7b3
9000a718:	9000a7b3 	.word	0x9000a7b3
9000a71c:	9000a7b3 	.word	0x9000a7b3
9000a720:	9000a7b3 	.word	0x9000a7b3
9000a724:	9000a7b3 	.word	0x9000a7b3
9000a728:	9000a7b3 	.word	0x9000a7b3
9000a72c:	9000a7b3 	.word	0x9000a7b3
9000a730:	9000a7b3 	.word	0x9000a7b3
9000a734:	9000a7b3 	.word	0x9000a7b3
9000a738:	9000a7b3 	.word	0x9000a7b3
9000a73c:	9000a7b3 	.word	0x9000a7b3
9000a740:	9000a7b3 	.word	0x9000a7b3
9000a744:	9000a7a5 	.word	0x9000a7a5
9000a748:	2b40      	cmp	r3, #64	@ 0x40
9000a74a:	d02e      	beq.n	9000a7aa <UART_SetConfig+0xa36>
9000a74c:	e031      	b.n	9000a7b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a74e:	f7fd f9d1 	bl	90007af4 <HAL_RCC_GetPCLK1Freq>
9000a752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a754:	e033      	b.n	9000a7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a756:	f7fd f9e3 	bl	90007b20 <HAL_RCC_GetPCLK2Freq>
9000a75a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a75c:	e02f      	b.n	9000a7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a75e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a762:	4618      	mov	r0, r3
9000a764:	f7fe fc12 	bl	90008f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a76c:	e027      	b.n	9000a7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a76e:	f107 0318 	add.w	r3, r7, #24
9000a772:	4618      	mov	r0, r3
9000a774:	f7fe fd5e 	bl	90009234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a778:	69fb      	ldr	r3, [r7, #28]
9000a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a77c:	e01f      	b.n	9000a7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a77e:	4b2d      	ldr	r3, [pc, #180]	@ (9000a834 <UART_SetConfig+0xac0>)
9000a780:	681b      	ldr	r3, [r3, #0]
9000a782:	f003 0320 	and.w	r3, r3, #32
9000a786:	2b00      	cmp	r3, #0
9000a788:	d009      	beq.n	9000a79e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a78a:	4b2a      	ldr	r3, [pc, #168]	@ (9000a834 <UART_SetConfig+0xac0>)
9000a78c:	681b      	ldr	r3, [r3, #0]
9000a78e:	08db      	lsrs	r3, r3, #3
9000a790:	f003 0303 	and.w	r3, r3, #3
9000a794:	4a28      	ldr	r2, [pc, #160]	@ (9000a838 <UART_SetConfig+0xac4>)
9000a796:	fa22 f303 	lsr.w	r3, r2, r3
9000a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a79c:	e00f      	b.n	9000a7be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a79e:	4b26      	ldr	r3, [pc, #152]	@ (9000a838 <UART_SetConfig+0xac4>)
9000a7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a7a2:	e00c      	b.n	9000a7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a7a4:	4b25      	ldr	r3, [pc, #148]	@ (9000a83c <UART_SetConfig+0xac8>)
9000a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a7a8:	e009      	b.n	9000a7be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a7aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a7b0:	e005      	b.n	9000a7be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a7b2:	2300      	movs	r3, #0
9000a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a7b6:	2301      	movs	r3, #1
9000a7b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a7bc:	bf00      	nop
    }

    if (pclk != 0U)
9000a7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a7c0:	2b00      	cmp	r3, #0
9000a7c2:	d021      	beq.n	9000a808 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a7c4:	697b      	ldr	r3, [r7, #20]
9000a7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a7c8:	4a1d      	ldr	r2, [pc, #116]	@ (9000a840 <UART_SetConfig+0xacc>)
9000a7ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a7ce:	461a      	mov	r2, r3
9000a7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a7d2:	fbb3 f2f2 	udiv	r2, r3, r2
9000a7d6:	697b      	ldr	r3, [r7, #20]
9000a7d8:	685b      	ldr	r3, [r3, #4]
9000a7da:	085b      	lsrs	r3, r3, #1
9000a7dc:	441a      	add	r2, r3
9000a7de:	697b      	ldr	r3, [r7, #20]
9000a7e0:	685b      	ldr	r3, [r3, #4]
9000a7e2:	fbb2 f3f3 	udiv	r3, r2, r3
9000a7e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7ea:	2b0f      	cmp	r3, #15
9000a7ec:	d909      	bls.n	9000a802 <UART_SetConfig+0xa8e>
9000a7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a7f4:	d205      	bcs.n	9000a802 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7f8:	b29a      	uxth	r2, r3
9000a7fa:	697b      	ldr	r3, [r7, #20]
9000a7fc:	681b      	ldr	r3, [r3, #0]
9000a7fe:	60da      	str	r2, [r3, #12]
9000a800:	e002      	b.n	9000a808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a802:	2301      	movs	r3, #1
9000a804:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a808:	697b      	ldr	r3, [r7, #20]
9000a80a:	2201      	movs	r2, #1
9000a80c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a810:	697b      	ldr	r3, [r7, #20]
9000a812:	2201      	movs	r2, #1
9000a814:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a818:	697b      	ldr	r3, [r7, #20]
9000a81a:	2200      	movs	r2, #0
9000a81c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a81e:	697b      	ldr	r3, [r7, #20]
9000a820:	2200      	movs	r2, #0
9000a822:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a824:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a828:	4618      	mov	r0, r3
9000a82a:	3748      	adds	r7, #72	@ 0x48
9000a82c:	46bd      	mov	sp, r7
9000a82e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a832:	bf00      	nop
9000a834:	58024400 	.word	0x58024400
9000a838:	03d09000 	.word	0x03d09000
9000a83c:	003d0900 	.word	0x003d0900
9000a840:	9000d740 	.word	0x9000d740

9000a844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a844:	b480      	push	{r7}
9000a846:	b083      	sub	sp, #12
9000a848:	af00      	add	r7, sp, #0
9000a84a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a84c:	687b      	ldr	r3, [r7, #4]
9000a84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a850:	f003 0308 	and.w	r3, r3, #8
9000a854:	2b00      	cmp	r3, #0
9000a856:	d00a      	beq.n	9000a86e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a858:	687b      	ldr	r3, [r7, #4]
9000a85a:	681b      	ldr	r3, [r3, #0]
9000a85c:	685b      	ldr	r3, [r3, #4]
9000a85e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a862:	687b      	ldr	r3, [r7, #4]
9000a864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a866:	687b      	ldr	r3, [r7, #4]
9000a868:	681b      	ldr	r3, [r3, #0]
9000a86a:	430a      	orrs	r2, r1
9000a86c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a86e:	687b      	ldr	r3, [r7, #4]
9000a870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a872:	f003 0301 	and.w	r3, r3, #1
9000a876:	2b00      	cmp	r3, #0
9000a878:	d00a      	beq.n	9000a890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a87a:	687b      	ldr	r3, [r7, #4]
9000a87c:	681b      	ldr	r3, [r3, #0]
9000a87e:	685b      	ldr	r3, [r3, #4]
9000a880:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a884:	687b      	ldr	r3, [r7, #4]
9000a886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a888:	687b      	ldr	r3, [r7, #4]
9000a88a:	681b      	ldr	r3, [r3, #0]
9000a88c:	430a      	orrs	r2, r1
9000a88e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a890:	687b      	ldr	r3, [r7, #4]
9000a892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a894:	f003 0302 	and.w	r3, r3, #2
9000a898:	2b00      	cmp	r3, #0
9000a89a:	d00a      	beq.n	9000a8b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a89c:	687b      	ldr	r3, [r7, #4]
9000a89e:	681b      	ldr	r3, [r3, #0]
9000a8a0:	685b      	ldr	r3, [r3, #4]
9000a8a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a8a6:	687b      	ldr	r3, [r7, #4]
9000a8a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a8aa:	687b      	ldr	r3, [r7, #4]
9000a8ac:	681b      	ldr	r3, [r3, #0]
9000a8ae:	430a      	orrs	r2, r1
9000a8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a8b2:	687b      	ldr	r3, [r7, #4]
9000a8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8b6:	f003 0304 	and.w	r3, r3, #4
9000a8ba:	2b00      	cmp	r3, #0
9000a8bc:	d00a      	beq.n	9000a8d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a8be:	687b      	ldr	r3, [r7, #4]
9000a8c0:	681b      	ldr	r3, [r3, #0]
9000a8c2:	685b      	ldr	r3, [r3, #4]
9000a8c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a8c8:	687b      	ldr	r3, [r7, #4]
9000a8ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a8cc:	687b      	ldr	r3, [r7, #4]
9000a8ce:	681b      	ldr	r3, [r3, #0]
9000a8d0:	430a      	orrs	r2, r1
9000a8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a8d4:	687b      	ldr	r3, [r7, #4]
9000a8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8d8:	f003 0310 	and.w	r3, r3, #16
9000a8dc:	2b00      	cmp	r3, #0
9000a8de:	d00a      	beq.n	9000a8f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a8e0:	687b      	ldr	r3, [r7, #4]
9000a8e2:	681b      	ldr	r3, [r3, #0]
9000a8e4:	689b      	ldr	r3, [r3, #8]
9000a8e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a8ea:	687b      	ldr	r3, [r7, #4]
9000a8ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a8ee:	687b      	ldr	r3, [r7, #4]
9000a8f0:	681b      	ldr	r3, [r3, #0]
9000a8f2:	430a      	orrs	r2, r1
9000a8f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a8f6:	687b      	ldr	r3, [r7, #4]
9000a8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8fa:	f003 0320 	and.w	r3, r3, #32
9000a8fe:	2b00      	cmp	r3, #0
9000a900:	d00a      	beq.n	9000a918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a902:	687b      	ldr	r3, [r7, #4]
9000a904:	681b      	ldr	r3, [r3, #0]
9000a906:	689b      	ldr	r3, [r3, #8]
9000a908:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a90c:	687b      	ldr	r3, [r7, #4]
9000a90e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a910:	687b      	ldr	r3, [r7, #4]
9000a912:	681b      	ldr	r3, [r3, #0]
9000a914:	430a      	orrs	r2, r1
9000a916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a918:	687b      	ldr	r3, [r7, #4]
9000a91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a920:	2b00      	cmp	r3, #0
9000a922:	d01a      	beq.n	9000a95a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a924:	687b      	ldr	r3, [r7, #4]
9000a926:	681b      	ldr	r3, [r3, #0]
9000a928:	685b      	ldr	r3, [r3, #4]
9000a92a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a92e:	687b      	ldr	r3, [r7, #4]
9000a930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a932:	687b      	ldr	r3, [r7, #4]
9000a934:	681b      	ldr	r3, [r3, #0]
9000a936:	430a      	orrs	r2, r1
9000a938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a93a:	687b      	ldr	r3, [r7, #4]
9000a93c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a93e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a942:	d10a      	bne.n	9000a95a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a944:	687b      	ldr	r3, [r7, #4]
9000a946:	681b      	ldr	r3, [r3, #0]
9000a948:	685b      	ldr	r3, [r3, #4]
9000a94a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000a94e:	687b      	ldr	r3, [r7, #4]
9000a950:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000a952:	687b      	ldr	r3, [r7, #4]
9000a954:	681b      	ldr	r3, [r3, #0]
9000a956:	430a      	orrs	r2, r1
9000a958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000a95a:	687b      	ldr	r3, [r7, #4]
9000a95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a95e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000a962:	2b00      	cmp	r3, #0
9000a964:	d00a      	beq.n	9000a97c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000a966:	687b      	ldr	r3, [r7, #4]
9000a968:	681b      	ldr	r3, [r3, #0]
9000a96a:	685b      	ldr	r3, [r3, #4]
9000a96c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000a970:	687b      	ldr	r3, [r7, #4]
9000a972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000a974:	687b      	ldr	r3, [r7, #4]
9000a976:	681b      	ldr	r3, [r3, #0]
9000a978:	430a      	orrs	r2, r1
9000a97a:	605a      	str	r2, [r3, #4]
  }
}
9000a97c:	bf00      	nop
9000a97e:	370c      	adds	r7, #12
9000a980:	46bd      	mov	sp, r7
9000a982:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a986:	4770      	bx	lr

9000a988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000a988:	b580      	push	{r7, lr}
9000a98a:	b098      	sub	sp, #96	@ 0x60
9000a98c:	af02      	add	r7, sp, #8
9000a98e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a990:	687b      	ldr	r3, [r7, #4]
9000a992:	2200      	movs	r2, #0
9000a994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000a998:	f7f8 fc4a 	bl	90003230 <HAL_GetTick>
9000a99c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000a99e:	687b      	ldr	r3, [r7, #4]
9000a9a0:	681b      	ldr	r3, [r3, #0]
9000a9a2:	681b      	ldr	r3, [r3, #0]
9000a9a4:	f003 0308 	and.w	r3, r3, #8
9000a9a8:	2b08      	cmp	r3, #8
9000a9aa:	d12f      	bne.n	9000aa0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a9ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a9b0:	9300      	str	r3, [sp, #0]
9000a9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a9b4:	2200      	movs	r2, #0
9000a9b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000a9ba:	6878      	ldr	r0, [r7, #4]
9000a9bc:	f000 f88e 	bl	9000aadc <UART_WaitOnFlagUntilTimeout>
9000a9c0:	4603      	mov	r3, r0
9000a9c2:	2b00      	cmp	r3, #0
9000a9c4:	d022      	beq.n	9000aa0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000a9c6:	687b      	ldr	r3, [r7, #4]
9000a9c8:	681b      	ldr	r3, [r3, #0]
9000a9ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a9ce:	e853 3f00 	ldrex	r3, [r3]
9000a9d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000a9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000a9d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a9da:	653b      	str	r3, [r7, #80]	@ 0x50
9000a9dc:	687b      	ldr	r3, [r7, #4]
9000a9de:	681b      	ldr	r3, [r3, #0]
9000a9e0:	461a      	mov	r2, r3
9000a9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000a9e4:	647b      	str	r3, [r7, #68]	@ 0x44
9000a9e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a9e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000a9ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000a9ec:	e841 2300 	strex	r3, r2, [r1]
9000a9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000a9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a9f4:	2b00      	cmp	r3, #0
9000a9f6:	d1e6      	bne.n	9000a9c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000a9f8:	687b      	ldr	r3, [r7, #4]
9000a9fa:	2220      	movs	r2, #32
9000a9fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000aa00:	687b      	ldr	r3, [r7, #4]
9000aa02:	2200      	movs	r2, #0
9000aa04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000aa08:	2303      	movs	r3, #3
9000aa0a:	e063      	b.n	9000aad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000aa0c:	687b      	ldr	r3, [r7, #4]
9000aa0e:	681b      	ldr	r3, [r3, #0]
9000aa10:	681b      	ldr	r3, [r3, #0]
9000aa12:	f003 0304 	and.w	r3, r3, #4
9000aa16:	2b04      	cmp	r3, #4
9000aa18:	d149      	bne.n	9000aaae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000aa1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000aa1e:	9300      	str	r3, [sp, #0]
9000aa20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000aa22:	2200      	movs	r2, #0
9000aa24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000aa28:	6878      	ldr	r0, [r7, #4]
9000aa2a:	f000 f857 	bl	9000aadc <UART_WaitOnFlagUntilTimeout>
9000aa2e:	4603      	mov	r3, r0
9000aa30:	2b00      	cmp	r3, #0
9000aa32:	d03c      	beq.n	9000aaae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000aa34:	687b      	ldr	r3, [r7, #4]
9000aa36:	681b      	ldr	r3, [r3, #0]
9000aa38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000aa3c:	e853 3f00 	ldrex	r3, [r3]
9000aa40:	623b      	str	r3, [r7, #32]
   return(result);
9000aa42:	6a3b      	ldr	r3, [r7, #32]
9000aa44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000aa48:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000aa4a:	687b      	ldr	r3, [r7, #4]
9000aa4c:	681b      	ldr	r3, [r3, #0]
9000aa4e:	461a      	mov	r2, r3
9000aa50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000aa52:	633b      	str	r3, [r7, #48]	@ 0x30
9000aa54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000aa58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000aa5a:	e841 2300 	strex	r3, r2, [r1]
9000aa5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000aa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000aa62:	2b00      	cmp	r3, #0
9000aa64:	d1e6      	bne.n	9000aa34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000aa66:	687b      	ldr	r3, [r7, #4]
9000aa68:	681b      	ldr	r3, [r3, #0]
9000aa6a:	3308      	adds	r3, #8
9000aa6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa6e:	693b      	ldr	r3, [r7, #16]
9000aa70:	e853 3f00 	ldrex	r3, [r3]
9000aa74:	60fb      	str	r3, [r7, #12]
   return(result);
9000aa76:	68fb      	ldr	r3, [r7, #12]
9000aa78:	f023 0301 	bic.w	r3, r3, #1
9000aa7c:	64bb      	str	r3, [r7, #72]	@ 0x48
9000aa7e:	687b      	ldr	r3, [r7, #4]
9000aa80:	681b      	ldr	r3, [r3, #0]
9000aa82:	3308      	adds	r3, #8
9000aa84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000aa86:	61fa      	str	r2, [r7, #28]
9000aa88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa8a:	69b9      	ldr	r1, [r7, #24]
9000aa8c:	69fa      	ldr	r2, [r7, #28]
9000aa8e:	e841 2300 	strex	r3, r2, [r1]
9000aa92:	617b      	str	r3, [r7, #20]
   return(result);
9000aa94:	697b      	ldr	r3, [r7, #20]
9000aa96:	2b00      	cmp	r3, #0
9000aa98:	d1e5      	bne.n	9000aa66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000aa9a:	687b      	ldr	r3, [r7, #4]
9000aa9c:	2220      	movs	r2, #32
9000aa9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000aaa2:	687b      	ldr	r3, [r7, #4]
9000aaa4:	2200      	movs	r2, #0
9000aaa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000aaaa:	2303      	movs	r3, #3
9000aaac:	e012      	b.n	9000aad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000aaae:	687b      	ldr	r3, [r7, #4]
9000aab0:	2220      	movs	r2, #32
9000aab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000aab6:	687b      	ldr	r3, [r7, #4]
9000aab8:	2220      	movs	r2, #32
9000aaba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000aabe:	687b      	ldr	r3, [r7, #4]
9000aac0:	2200      	movs	r2, #0
9000aac2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000aac4:	687b      	ldr	r3, [r7, #4]
9000aac6:	2200      	movs	r2, #0
9000aac8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000aaca:	687b      	ldr	r3, [r7, #4]
9000aacc:	2200      	movs	r2, #0
9000aace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000aad2:	2300      	movs	r3, #0
}
9000aad4:	4618      	mov	r0, r3
9000aad6:	3758      	adds	r7, #88	@ 0x58
9000aad8:	46bd      	mov	sp, r7
9000aada:	bd80      	pop	{r7, pc}

9000aadc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000aadc:	b580      	push	{r7, lr}
9000aade:	b084      	sub	sp, #16
9000aae0:	af00      	add	r7, sp, #0
9000aae2:	60f8      	str	r0, [r7, #12]
9000aae4:	60b9      	str	r1, [r7, #8]
9000aae6:	603b      	str	r3, [r7, #0]
9000aae8:	4613      	mov	r3, r2
9000aaea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000aaec:	e04f      	b.n	9000ab8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000aaee:	69bb      	ldr	r3, [r7, #24]
9000aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
9000aaf4:	d04b      	beq.n	9000ab8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aaf6:	f7f8 fb9b 	bl	90003230 <HAL_GetTick>
9000aafa:	4602      	mov	r2, r0
9000aafc:	683b      	ldr	r3, [r7, #0]
9000aafe:	1ad3      	subs	r3, r2, r3
9000ab00:	69ba      	ldr	r2, [r7, #24]
9000ab02:	429a      	cmp	r2, r3
9000ab04:	d302      	bcc.n	9000ab0c <UART_WaitOnFlagUntilTimeout+0x30>
9000ab06:	69bb      	ldr	r3, [r7, #24]
9000ab08:	2b00      	cmp	r3, #0
9000ab0a:	d101      	bne.n	9000ab10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000ab0c:	2303      	movs	r3, #3
9000ab0e:	e04e      	b.n	9000abae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000ab10:	68fb      	ldr	r3, [r7, #12]
9000ab12:	681b      	ldr	r3, [r3, #0]
9000ab14:	681b      	ldr	r3, [r3, #0]
9000ab16:	f003 0304 	and.w	r3, r3, #4
9000ab1a:	2b00      	cmp	r3, #0
9000ab1c:	d037      	beq.n	9000ab8e <UART_WaitOnFlagUntilTimeout+0xb2>
9000ab1e:	68bb      	ldr	r3, [r7, #8]
9000ab20:	2b80      	cmp	r3, #128	@ 0x80
9000ab22:	d034      	beq.n	9000ab8e <UART_WaitOnFlagUntilTimeout+0xb2>
9000ab24:	68bb      	ldr	r3, [r7, #8]
9000ab26:	2b40      	cmp	r3, #64	@ 0x40
9000ab28:	d031      	beq.n	9000ab8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000ab2a:	68fb      	ldr	r3, [r7, #12]
9000ab2c:	681b      	ldr	r3, [r3, #0]
9000ab2e:	69db      	ldr	r3, [r3, #28]
9000ab30:	f003 0308 	and.w	r3, r3, #8
9000ab34:	2b08      	cmp	r3, #8
9000ab36:	d110      	bne.n	9000ab5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000ab38:	68fb      	ldr	r3, [r7, #12]
9000ab3a:	681b      	ldr	r3, [r3, #0]
9000ab3c:	2208      	movs	r2, #8
9000ab3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000ab40:	68f8      	ldr	r0, [r7, #12]
9000ab42:	f000 f839 	bl	9000abb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000ab46:	68fb      	ldr	r3, [r7, #12]
9000ab48:	2208      	movs	r2, #8
9000ab4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ab4e:	68fb      	ldr	r3, [r7, #12]
9000ab50:	2200      	movs	r2, #0
9000ab52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000ab56:	2301      	movs	r3, #1
9000ab58:	e029      	b.n	9000abae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000ab5a:	68fb      	ldr	r3, [r7, #12]
9000ab5c:	681b      	ldr	r3, [r3, #0]
9000ab5e:	69db      	ldr	r3, [r3, #28]
9000ab60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000ab64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000ab68:	d111      	bne.n	9000ab8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000ab6a:	68fb      	ldr	r3, [r7, #12]
9000ab6c:	681b      	ldr	r3, [r3, #0]
9000ab6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000ab72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000ab74:	68f8      	ldr	r0, [r7, #12]
9000ab76:	f000 f81f 	bl	9000abb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000ab7a:	68fb      	ldr	r3, [r7, #12]
9000ab7c:	2220      	movs	r2, #32
9000ab7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ab82:	68fb      	ldr	r3, [r7, #12]
9000ab84:	2200      	movs	r2, #0
9000ab86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000ab8a:	2303      	movs	r3, #3
9000ab8c:	e00f      	b.n	9000abae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000ab8e:	68fb      	ldr	r3, [r7, #12]
9000ab90:	681b      	ldr	r3, [r3, #0]
9000ab92:	69da      	ldr	r2, [r3, #28]
9000ab94:	68bb      	ldr	r3, [r7, #8]
9000ab96:	4013      	ands	r3, r2
9000ab98:	68ba      	ldr	r2, [r7, #8]
9000ab9a:	429a      	cmp	r2, r3
9000ab9c:	bf0c      	ite	eq
9000ab9e:	2301      	moveq	r3, #1
9000aba0:	2300      	movne	r3, #0
9000aba2:	b2db      	uxtb	r3, r3
9000aba4:	461a      	mov	r2, r3
9000aba6:	79fb      	ldrb	r3, [r7, #7]
9000aba8:	429a      	cmp	r2, r3
9000abaa:	d0a0      	beq.n	9000aaee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000abac:	2300      	movs	r3, #0
}
9000abae:	4618      	mov	r0, r3
9000abb0:	3710      	adds	r7, #16
9000abb2:	46bd      	mov	sp, r7
9000abb4:	bd80      	pop	{r7, pc}
	...

9000abb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000abb8:	b480      	push	{r7}
9000abba:	b095      	sub	sp, #84	@ 0x54
9000abbc:	af00      	add	r7, sp, #0
9000abbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000abc0:	687b      	ldr	r3, [r7, #4]
9000abc2:	681b      	ldr	r3, [r3, #0]
9000abc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000abc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000abc8:	e853 3f00 	ldrex	r3, [r3]
9000abcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000abd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000abd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000abd6:	687b      	ldr	r3, [r7, #4]
9000abd8:	681b      	ldr	r3, [r3, #0]
9000abda:	461a      	mov	r2, r3
9000abdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000abde:	643b      	str	r3, [r7, #64]	@ 0x40
9000abe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000abe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000abe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000abe6:	e841 2300 	strex	r3, r2, [r1]
9000abea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000abec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000abee:	2b00      	cmp	r3, #0
9000abf0:	d1e6      	bne.n	9000abc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000abf2:	687b      	ldr	r3, [r7, #4]
9000abf4:	681b      	ldr	r3, [r3, #0]
9000abf6:	3308      	adds	r3, #8
9000abf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000abfa:	6a3b      	ldr	r3, [r7, #32]
9000abfc:	e853 3f00 	ldrex	r3, [r3]
9000ac00:	61fb      	str	r3, [r7, #28]
   return(result);
9000ac02:	69fa      	ldr	r2, [r7, #28]
9000ac04:	4b1e      	ldr	r3, [pc, #120]	@ (9000ac80 <UART_EndRxTransfer+0xc8>)
9000ac06:	4013      	ands	r3, r2
9000ac08:	64bb      	str	r3, [r7, #72]	@ 0x48
9000ac0a:	687b      	ldr	r3, [r7, #4]
9000ac0c:	681b      	ldr	r3, [r3, #0]
9000ac0e:	3308      	adds	r3, #8
9000ac10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000ac12:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000ac14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ac16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000ac18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000ac1a:	e841 2300 	strex	r3, r2, [r1]
9000ac1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ac22:	2b00      	cmp	r3, #0
9000ac24:	d1e5      	bne.n	9000abf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000ac26:	687b      	ldr	r3, [r7, #4]
9000ac28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000ac2a:	2b01      	cmp	r3, #1
9000ac2c:	d118      	bne.n	9000ac60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000ac2e:	687b      	ldr	r3, [r7, #4]
9000ac30:	681b      	ldr	r3, [r3, #0]
9000ac32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ac34:	68fb      	ldr	r3, [r7, #12]
9000ac36:	e853 3f00 	ldrex	r3, [r3]
9000ac3a:	60bb      	str	r3, [r7, #8]
   return(result);
9000ac3c:	68bb      	ldr	r3, [r7, #8]
9000ac3e:	f023 0310 	bic.w	r3, r3, #16
9000ac42:	647b      	str	r3, [r7, #68]	@ 0x44
9000ac44:	687b      	ldr	r3, [r7, #4]
9000ac46:	681b      	ldr	r3, [r3, #0]
9000ac48:	461a      	mov	r2, r3
9000ac4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000ac4c:	61bb      	str	r3, [r7, #24]
9000ac4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ac50:	6979      	ldr	r1, [r7, #20]
9000ac52:	69ba      	ldr	r2, [r7, #24]
9000ac54:	e841 2300 	strex	r3, r2, [r1]
9000ac58:	613b      	str	r3, [r7, #16]
   return(result);
9000ac5a:	693b      	ldr	r3, [r7, #16]
9000ac5c:	2b00      	cmp	r3, #0
9000ac5e:	d1e6      	bne.n	9000ac2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000ac60:	687b      	ldr	r3, [r7, #4]
9000ac62:	2220      	movs	r2, #32
9000ac64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ac68:	687b      	ldr	r3, [r7, #4]
9000ac6a:	2200      	movs	r2, #0
9000ac6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000ac6e:	687b      	ldr	r3, [r7, #4]
9000ac70:	2200      	movs	r2, #0
9000ac72:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000ac74:	bf00      	nop
9000ac76:	3754      	adds	r7, #84	@ 0x54
9000ac78:	46bd      	mov	sp, r7
9000ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ac7e:	4770      	bx	lr
9000ac80:	effffffe 	.word	0xeffffffe

9000ac84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000ac84:	b480      	push	{r7}
9000ac86:	b085      	sub	sp, #20
9000ac88:	af00      	add	r7, sp, #0
9000ac8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ac8c:	687b      	ldr	r3, [r7, #4]
9000ac8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ac92:	2b01      	cmp	r3, #1
9000ac94:	d101      	bne.n	9000ac9a <HAL_UARTEx_DisableFifoMode+0x16>
9000ac96:	2302      	movs	r3, #2
9000ac98:	e027      	b.n	9000acea <HAL_UARTEx_DisableFifoMode+0x66>
9000ac9a:	687b      	ldr	r3, [r7, #4]
9000ac9c:	2201      	movs	r2, #1
9000ac9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000aca2:	687b      	ldr	r3, [r7, #4]
9000aca4:	2224      	movs	r2, #36	@ 0x24
9000aca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000acaa:	687b      	ldr	r3, [r7, #4]
9000acac:	681b      	ldr	r3, [r3, #0]
9000acae:	681b      	ldr	r3, [r3, #0]
9000acb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000acb2:	687b      	ldr	r3, [r7, #4]
9000acb4:	681b      	ldr	r3, [r3, #0]
9000acb6:	681a      	ldr	r2, [r3, #0]
9000acb8:	687b      	ldr	r3, [r7, #4]
9000acba:	681b      	ldr	r3, [r3, #0]
9000acbc:	f022 0201 	bic.w	r2, r2, #1
9000acc0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000acc2:	68fb      	ldr	r3, [r7, #12]
9000acc4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000acc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000acca:	687b      	ldr	r3, [r7, #4]
9000accc:	2200      	movs	r2, #0
9000acce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000acd0:	687b      	ldr	r3, [r7, #4]
9000acd2:	681b      	ldr	r3, [r3, #0]
9000acd4:	68fa      	ldr	r2, [r7, #12]
9000acd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000acd8:	687b      	ldr	r3, [r7, #4]
9000acda:	2220      	movs	r2, #32
9000acdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ace0:	687b      	ldr	r3, [r7, #4]
9000ace2:	2200      	movs	r2, #0
9000ace4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ace8:	2300      	movs	r3, #0
}
9000acea:	4618      	mov	r0, r3
9000acec:	3714      	adds	r7, #20
9000acee:	46bd      	mov	sp, r7
9000acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000acf4:	4770      	bx	lr

9000acf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000acf6:	b580      	push	{r7, lr}
9000acf8:	b084      	sub	sp, #16
9000acfa:	af00      	add	r7, sp, #0
9000acfc:	6078      	str	r0, [r7, #4]
9000acfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ad00:	687b      	ldr	r3, [r7, #4]
9000ad02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ad06:	2b01      	cmp	r3, #1
9000ad08:	d101      	bne.n	9000ad0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000ad0a:	2302      	movs	r3, #2
9000ad0c:	e02d      	b.n	9000ad6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000ad0e:	687b      	ldr	r3, [r7, #4]
9000ad10:	2201      	movs	r2, #1
9000ad12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ad16:	687b      	ldr	r3, [r7, #4]
9000ad18:	2224      	movs	r2, #36	@ 0x24
9000ad1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ad1e:	687b      	ldr	r3, [r7, #4]
9000ad20:	681b      	ldr	r3, [r3, #0]
9000ad22:	681b      	ldr	r3, [r3, #0]
9000ad24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ad26:	687b      	ldr	r3, [r7, #4]
9000ad28:	681b      	ldr	r3, [r3, #0]
9000ad2a:	681a      	ldr	r2, [r3, #0]
9000ad2c:	687b      	ldr	r3, [r7, #4]
9000ad2e:	681b      	ldr	r3, [r3, #0]
9000ad30:	f022 0201 	bic.w	r2, r2, #1
9000ad34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000ad36:	687b      	ldr	r3, [r7, #4]
9000ad38:	681b      	ldr	r3, [r3, #0]
9000ad3a:	689b      	ldr	r3, [r3, #8]
9000ad3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000ad40:	687b      	ldr	r3, [r7, #4]
9000ad42:	681b      	ldr	r3, [r3, #0]
9000ad44:	683a      	ldr	r2, [r7, #0]
9000ad46:	430a      	orrs	r2, r1
9000ad48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ad4a:	6878      	ldr	r0, [r7, #4]
9000ad4c:	f000 f850 	bl	9000adf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ad50:	687b      	ldr	r3, [r7, #4]
9000ad52:	681b      	ldr	r3, [r3, #0]
9000ad54:	68fa      	ldr	r2, [r7, #12]
9000ad56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ad58:	687b      	ldr	r3, [r7, #4]
9000ad5a:	2220      	movs	r2, #32
9000ad5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ad60:	687b      	ldr	r3, [r7, #4]
9000ad62:	2200      	movs	r2, #0
9000ad64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ad68:	2300      	movs	r3, #0
}
9000ad6a:	4618      	mov	r0, r3
9000ad6c:	3710      	adds	r7, #16
9000ad6e:	46bd      	mov	sp, r7
9000ad70:	bd80      	pop	{r7, pc}

9000ad72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ad72:	b580      	push	{r7, lr}
9000ad74:	b084      	sub	sp, #16
9000ad76:	af00      	add	r7, sp, #0
9000ad78:	6078      	str	r0, [r7, #4]
9000ad7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ad7c:	687b      	ldr	r3, [r7, #4]
9000ad7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ad82:	2b01      	cmp	r3, #1
9000ad84:	d101      	bne.n	9000ad8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000ad86:	2302      	movs	r3, #2
9000ad88:	e02d      	b.n	9000ade6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000ad8a:	687b      	ldr	r3, [r7, #4]
9000ad8c:	2201      	movs	r2, #1
9000ad8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ad92:	687b      	ldr	r3, [r7, #4]
9000ad94:	2224      	movs	r2, #36	@ 0x24
9000ad96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ad9a:	687b      	ldr	r3, [r7, #4]
9000ad9c:	681b      	ldr	r3, [r3, #0]
9000ad9e:	681b      	ldr	r3, [r3, #0]
9000ada0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ada2:	687b      	ldr	r3, [r7, #4]
9000ada4:	681b      	ldr	r3, [r3, #0]
9000ada6:	681a      	ldr	r2, [r3, #0]
9000ada8:	687b      	ldr	r3, [r7, #4]
9000adaa:	681b      	ldr	r3, [r3, #0]
9000adac:	f022 0201 	bic.w	r2, r2, #1
9000adb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000adb2:	687b      	ldr	r3, [r7, #4]
9000adb4:	681b      	ldr	r3, [r3, #0]
9000adb6:	689b      	ldr	r3, [r3, #8]
9000adb8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000adbc:	687b      	ldr	r3, [r7, #4]
9000adbe:	681b      	ldr	r3, [r3, #0]
9000adc0:	683a      	ldr	r2, [r7, #0]
9000adc2:	430a      	orrs	r2, r1
9000adc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000adc6:	6878      	ldr	r0, [r7, #4]
9000adc8:	f000 f812 	bl	9000adf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000adcc:	687b      	ldr	r3, [r7, #4]
9000adce:	681b      	ldr	r3, [r3, #0]
9000add0:	68fa      	ldr	r2, [r7, #12]
9000add2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000add4:	687b      	ldr	r3, [r7, #4]
9000add6:	2220      	movs	r2, #32
9000add8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000addc:	687b      	ldr	r3, [r7, #4]
9000adde:	2200      	movs	r2, #0
9000ade0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ade4:	2300      	movs	r3, #0
}
9000ade6:	4618      	mov	r0, r3
9000ade8:	3710      	adds	r7, #16
9000adea:	46bd      	mov	sp, r7
9000adec:	bd80      	pop	{r7, pc}
	...

9000adf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000adf0:	b480      	push	{r7}
9000adf2:	b085      	sub	sp, #20
9000adf4:	af00      	add	r7, sp, #0
9000adf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000adf8:	687b      	ldr	r3, [r7, #4]
9000adfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000adfc:	2b00      	cmp	r3, #0
9000adfe:	d108      	bne.n	9000ae12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000ae00:	687b      	ldr	r3, [r7, #4]
9000ae02:	2201      	movs	r2, #1
9000ae04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000ae08:	687b      	ldr	r3, [r7, #4]
9000ae0a:	2201      	movs	r2, #1
9000ae0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000ae10:	e031      	b.n	9000ae76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000ae12:	2310      	movs	r3, #16
9000ae14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000ae16:	2310      	movs	r3, #16
9000ae18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000ae1a:	687b      	ldr	r3, [r7, #4]
9000ae1c:	681b      	ldr	r3, [r3, #0]
9000ae1e:	689b      	ldr	r3, [r3, #8]
9000ae20:	0e5b      	lsrs	r3, r3, #25
9000ae22:	b2db      	uxtb	r3, r3
9000ae24:	f003 0307 	and.w	r3, r3, #7
9000ae28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000ae2a:	687b      	ldr	r3, [r7, #4]
9000ae2c:	681b      	ldr	r3, [r3, #0]
9000ae2e:	689b      	ldr	r3, [r3, #8]
9000ae30:	0f5b      	lsrs	r3, r3, #29
9000ae32:	b2db      	uxtb	r3, r3
9000ae34:	f003 0307 	and.w	r3, r3, #7
9000ae38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000ae3a:	7bbb      	ldrb	r3, [r7, #14]
9000ae3c:	7b3a      	ldrb	r2, [r7, #12]
9000ae3e:	4911      	ldr	r1, [pc, #68]	@ (9000ae84 <UARTEx_SetNbDataToProcess+0x94>)
9000ae40:	5c8a      	ldrb	r2, [r1, r2]
9000ae42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000ae46:	7b3a      	ldrb	r2, [r7, #12]
9000ae48:	490f      	ldr	r1, [pc, #60]	@ (9000ae88 <UARTEx_SetNbDataToProcess+0x98>)
9000ae4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000ae4c:	fb93 f3f2 	sdiv	r3, r3, r2
9000ae50:	b29a      	uxth	r2, r3
9000ae52:	687b      	ldr	r3, [r7, #4]
9000ae54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ae58:	7bfb      	ldrb	r3, [r7, #15]
9000ae5a:	7b7a      	ldrb	r2, [r7, #13]
9000ae5c:	4909      	ldr	r1, [pc, #36]	@ (9000ae84 <UARTEx_SetNbDataToProcess+0x94>)
9000ae5e:	5c8a      	ldrb	r2, [r1, r2]
9000ae60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000ae64:	7b7a      	ldrb	r2, [r7, #13]
9000ae66:	4908      	ldr	r1, [pc, #32]	@ (9000ae88 <UARTEx_SetNbDataToProcess+0x98>)
9000ae68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ae6a:	fb93 f3f2 	sdiv	r3, r3, r2
9000ae6e:	b29a      	uxth	r2, r3
9000ae70:	687b      	ldr	r3, [r7, #4]
9000ae72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000ae76:	bf00      	nop
9000ae78:	3714      	adds	r7, #20
9000ae7a:	46bd      	mov	sp, r7
9000ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae80:	4770      	bx	lr
9000ae82:	bf00      	nop
9000ae84:	9000d758 	.word	0x9000d758
9000ae88:	9000d760 	.word	0x9000d760

9000ae8c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000ae8c:	b480      	push	{r7}
9000ae8e:	b083      	sub	sp, #12
9000ae90:	af00      	add	r7, sp, #0
9000ae92:	6078      	str	r0, [r7, #4]
9000ae94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000ae96:	683b      	ldr	r3, [r7, #0]
9000ae98:	681b      	ldr	r3, [r3, #0]
9000ae9a:	2b00      	cmp	r3, #0
9000ae9c:	d121      	bne.n	9000aee2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ae9e:	687b      	ldr	r3, [r7, #4]
9000aea0:	681a      	ldr	r2, [r3, #0]
9000aea2:	4b27      	ldr	r3, [pc, #156]	@ (9000af40 <FMC_SDRAM_Init+0xb4>)
9000aea4:	4013      	ands	r3, r2
9000aea6:	683a      	ldr	r2, [r7, #0]
9000aea8:	6851      	ldr	r1, [r2, #4]
9000aeaa:	683a      	ldr	r2, [r7, #0]
9000aeac:	6892      	ldr	r2, [r2, #8]
9000aeae:	4311      	orrs	r1, r2
9000aeb0:	683a      	ldr	r2, [r7, #0]
9000aeb2:	68d2      	ldr	r2, [r2, #12]
9000aeb4:	4311      	orrs	r1, r2
9000aeb6:	683a      	ldr	r2, [r7, #0]
9000aeb8:	6912      	ldr	r2, [r2, #16]
9000aeba:	4311      	orrs	r1, r2
9000aebc:	683a      	ldr	r2, [r7, #0]
9000aebe:	6952      	ldr	r2, [r2, #20]
9000aec0:	4311      	orrs	r1, r2
9000aec2:	683a      	ldr	r2, [r7, #0]
9000aec4:	6992      	ldr	r2, [r2, #24]
9000aec6:	4311      	orrs	r1, r2
9000aec8:	683a      	ldr	r2, [r7, #0]
9000aeca:	69d2      	ldr	r2, [r2, #28]
9000aecc:	4311      	orrs	r1, r2
9000aece:	683a      	ldr	r2, [r7, #0]
9000aed0:	6a12      	ldr	r2, [r2, #32]
9000aed2:	4311      	orrs	r1, r2
9000aed4:	683a      	ldr	r2, [r7, #0]
9000aed6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000aed8:	430a      	orrs	r2, r1
9000aeda:	431a      	orrs	r2, r3
9000aedc:	687b      	ldr	r3, [r7, #4]
9000aede:	601a      	str	r2, [r3, #0]
9000aee0:	e026      	b.n	9000af30 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000aee2:	687b      	ldr	r3, [r7, #4]
9000aee4:	681b      	ldr	r3, [r3, #0]
9000aee6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000aeea:	683b      	ldr	r3, [r7, #0]
9000aeec:	69d9      	ldr	r1, [r3, #28]
9000aeee:	683b      	ldr	r3, [r7, #0]
9000aef0:	6a1b      	ldr	r3, [r3, #32]
9000aef2:	4319      	orrs	r1, r3
9000aef4:	683b      	ldr	r3, [r7, #0]
9000aef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000aef8:	430b      	orrs	r3, r1
9000aefa:	431a      	orrs	r2, r3
9000aefc:	687b      	ldr	r3, [r7, #4]
9000aefe:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000af00:	687b      	ldr	r3, [r7, #4]
9000af02:	685a      	ldr	r2, [r3, #4]
9000af04:	4b0e      	ldr	r3, [pc, #56]	@ (9000af40 <FMC_SDRAM_Init+0xb4>)
9000af06:	4013      	ands	r3, r2
9000af08:	683a      	ldr	r2, [r7, #0]
9000af0a:	6851      	ldr	r1, [r2, #4]
9000af0c:	683a      	ldr	r2, [r7, #0]
9000af0e:	6892      	ldr	r2, [r2, #8]
9000af10:	4311      	orrs	r1, r2
9000af12:	683a      	ldr	r2, [r7, #0]
9000af14:	68d2      	ldr	r2, [r2, #12]
9000af16:	4311      	orrs	r1, r2
9000af18:	683a      	ldr	r2, [r7, #0]
9000af1a:	6912      	ldr	r2, [r2, #16]
9000af1c:	4311      	orrs	r1, r2
9000af1e:	683a      	ldr	r2, [r7, #0]
9000af20:	6952      	ldr	r2, [r2, #20]
9000af22:	4311      	orrs	r1, r2
9000af24:	683a      	ldr	r2, [r7, #0]
9000af26:	6992      	ldr	r2, [r2, #24]
9000af28:	430a      	orrs	r2, r1
9000af2a:	431a      	orrs	r2, r3
9000af2c:	687b      	ldr	r3, [r7, #4]
9000af2e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000af30:	2300      	movs	r3, #0
}
9000af32:	4618      	mov	r0, r3
9000af34:	370c      	adds	r7, #12
9000af36:	46bd      	mov	sp, r7
9000af38:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af3c:	4770      	bx	lr
9000af3e:	bf00      	nop
9000af40:	ffff8000 	.word	0xffff8000

9000af44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000af44:	b480      	push	{r7}
9000af46:	b085      	sub	sp, #20
9000af48:	af00      	add	r7, sp, #0
9000af4a:	60f8      	str	r0, [r7, #12]
9000af4c:	60b9      	str	r1, [r7, #8]
9000af4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000af50:	687b      	ldr	r3, [r7, #4]
9000af52:	2b00      	cmp	r3, #0
9000af54:	d128      	bne.n	9000afa8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000af56:	68fb      	ldr	r3, [r7, #12]
9000af58:	689b      	ldr	r3, [r3, #8]
9000af5a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000af5e:	68bb      	ldr	r3, [r7, #8]
9000af60:	681b      	ldr	r3, [r3, #0]
9000af62:	1e59      	subs	r1, r3, #1
9000af64:	68bb      	ldr	r3, [r7, #8]
9000af66:	685b      	ldr	r3, [r3, #4]
9000af68:	3b01      	subs	r3, #1
9000af6a:	011b      	lsls	r3, r3, #4
9000af6c:	4319      	orrs	r1, r3
9000af6e:	68bb      	ldr	r3, [r7, #8]
9000af70:	689b      	ldr	r3, [r3, #8]
9000af72:	3b01      	subs	r3, #1
9000af74:	021b      	lsls	r3, r3, #8
9000af76:	4319      	orrs	r1, r3
9000af78:	68bb      	ldr	r3, [r7, #8]
9000af7a:	68db      	ldr	r3, [r3, #12]
9000af7c:	3b01      	subs	r3, #1
9000af7e:	031b      	lsls	r3, r3, #12
9000af80:	4319      	orrs	r1, r3
9000af82:	68bb      	ldr	r3, [r7, #8]
9000af84:	691b      	ldr	r3, [r3, #16]
9000af86:	3b01      	subs	r3, #1
9000af88:	041b      	lsls	r3, r3, #16
9000af8a:	4319      	orrs	r1, r3
9000af8c:	68bb      	ldr	r3, [r7, #8]
9000af8e:	695b      	ldr	r3, [r3, #20]
9000af90:	3b01      	subs	r3, #1
9000af92:	051b      	lsls	r3, r3, #20
9000af94:	4319      	orrs	r1, r3
9000af96:	68bb      	ldr	r3, [r7, #8]
9000af98:	699b      	ldr	r3, [r3, #24]
9000af9a:	3b01      	subs	r3, #1
9000af9c:	061b      	lsls	r3, r3, #24
9000af9e:	430b      	orrs	r3, r1
9000afa0:	431a      	orrs	r2, r3
9000afa2:	68fb      	ldr	r3, [r7, #12]
9000afa4:	609a      	str	r2, [r3, #8]
9000afa6:	e02d      	b.n	9000b004 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000afa8:	68fb      	ldr	r3, [r7, #12]
9000afaa:	689a      	ldr	r2, [r3, #8]
9000afac:	4b19      	ldr	r3, [pc, #100]	@ (9000b014 <FMC_SDRAM_Timing_Init+0xd0>)
9000afae:	4013      	ands	r3, r2
9000afb0:	68ba      	ldr	r2, [r7, #8]
9000afb2:	68d2      	ldr	r2, [r2, #12]
9000afb4:	3a01      	subs	r2, #1
9000afb6:	0311      	lsls	r1, r2, #12
9000afb8:	68ba      	ldr	r2, [r7, #8]
9000afba:	6952      	ldr	r2, [r2, #20]
9000afbc:	3a01      	subs	r2, #1
9000afbe:	0512      	lsls	r2, r2, #20
9000afc0:	430a      	orrs	r2, r1
9000afc2:	431a      	orrs	r2, r3
9000afc4:	68fb      	ldr	r3, [r7, #12]
9000afc6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000afc8:	68fb      	ldr	r3, [r7, #12]
9000afca:	68db      	ldr	r3, [r3, #12]
9000afcc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000afd0:	68bb      	ldr	r3, [r7, #8]
9000afd2:	681b      	ldr	r3, [r3, #0]
9000afd4:	1e59      	subs	r1, r3, #1
9000afd6:	68bb      	ldr	r3, [r7, #8]
9000afd8:	685b      	ldr	r3, [r3, #4]
9000afda:	3b01      	subs	r3, #1
9000afdc:	011b      	lsls	r3, r3, #4
9000afde:	4319      	orrs	r1, r3
9000afe0:	68bb      	ldr	r3, [r7, #8]
9000afe2:	689b      	ldr	r3, [r3, #8]
9000afe4:	3b01      	subs	r3, #1
9000afe6:	021b      	lsls	r3, r3, #8
9000afe8:	4319      	orrs	r1, r3
9000afea:	68bb      	ldr	r3, [r7, #8]
9000afec:	691b      	ldr	r3, [r3, #16]
9000afee:	3b01      	subs	r3, #1
9000aff0:	041b      	lsls	r3, r3, #16
9000aff2:	4319      	orrs	r1, r3
9000aff4:	68bb      	ldr	r3, [r7, #8]
9000aff6:	699b      	ldr	r3, [r3, #24]
9000aff8:	3b01      	subs	r3, #1
9000affa:	061b      	lsls	r3, r3, #24
9000affc:	430b      	orrs	r3, r1
9000affe:	431a      	orrs	r2, r3
9000b000:	68fb      	ldr	r3, [r7, #12]
9000b002:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000b004:	2300      	movs	r3, #0
}
9000b006:	4618      	mov	r0, r3
9000b008:	3714      	adds	r7, #20
9000b00a:	46bd      	mov	sp, r7
9000b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b010:	4770      	bx	lr
9000b012:	bf00      	nop
9000b014:	ff0f0fff 	.word	0xff0f0fff

9000b018 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000b018:	b480      	push	{r7}
9000b01a:	b085      	sub	sp, #20
9000b01c:	af00      	add	r7, sp, #0
9000b01e:	60f8      	str	r0, [r7, #12]
9000b020:	60b9      	str	r1, [r7, #8]
9000b022:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000b024:	68fb      	ldr	r3, [r7, #12]
9000b026:	691a      	ldr	r2, [r3, #16]
9000b028:	4b0c      	ldr	r3, [pc, #48]	@ (9000b05c <FMC_SDRAM_SendCommand+0x44>)
9000b02a:	4013      	ands	r3, r2
9000b02c:	68ba      	ldr	r2, [r7, #8]
9000b02e:	6811      	ldr	r1, [r2, #0]
9000b030:	68ba      	ldr	r2, [r7, #8]
9000b032:	6852      	ldr	r2, [r2, #4]
9000b034:	4311      	orrs	r1, r2
9000b036:	68ba      	ldr	r2, [r7, #8]
9000b038:	6892      	ldr	r2, [r2, #8]
9000b03a:	3a01      	subs	r2, #1
9000b03c:	0152      	lsls	r2, r2, #5
9000b03e:	4311      	orrs	r1, r2
9000b040:	68ba      	ldr	r2, [r7, #8]
9000b042:	68d2      	ldr	r2, [r2, #12]
9000b044:	0252      	lsls	r2, r2, #9
9000b046:	430a      	orrs	r2, r1
9000b048:	431a      	orrs	r2, r3
9000b04a:	68fb      	ldr	r3, [r7, #12]
9000b04c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000b04e:	2300      	movs	r3, #0
}
9000b050:	4618      	mov	r0, r3
9000b052:	3714      	adds	r7, #20
9000b054:	46bd      	mov	sp, r7
9000b056:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b05a:	4770      	bx	lr
9000b05c:	ffc00000 	.word	0xffc00000

9000b060 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000b060:	b480      	push	{r7}
9000b062:	b083      	sub	sp, #12
9000b064:	af00      	add	r7, sp, #0
9000b066:	6078      	str	r0, [r7, #4]
9000b068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000b06a:	687b      	ldr	r3, [r7, #4]
9000b06c:	695a      	ldr	r2, [r3, #20]
9000b06e:	4b07      	ldr	r3, [pc, #28]	@ (9000b08c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000b070:	4013      	ands	r3, r2
9000b072:	683a      	ldr	r2, [r7, #0]
9000b074:	0052      	lsls	r2, r2, #1
9000b076:	431a      	orrs	r2, r3
9000b078:	687b      	ldr	r3, [r7, #4]
9000b07a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000b07c:	2300      	movs	r3, #0
}
9000b07e:	4618      	mov	r0, r3
9000b080:	370c      	adds	r7, #12
9000b082:	46bd      	mov	sp, r7
9000b084:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b088:	4770      	bx	lr
9000b08a:	bf00      	nop
9000b08c:	ffffc001 	.word	0xffffc001

9000b090 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b090:	b480      	push	{r7}
9000b092:	b083      	sub	sp, #12
9000b094:	af00      	add	r7, sp, #0
9000b096:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000b098:	687b      	ldr	r3, [r7, #4]
9000b09a:	689b      	ldr	r3, [r3, #8]
9000b09c:	f043 0201 	orr.w	r2, r3, #1
9000b0a0:	687b      	ldr	r3, [r7, #4]
9000b0a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b0a4:	2300      	movs	r3, #0
}
9000b0a6:	4618      	mov	r0, r3
9000b0a8:	370c      	adds	r7, #12
9000b0aa:	46bd      	mov	sp, r7
9000b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0b0:	4770      	bx	lr

9000b0b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b0b2:	b480      	push	{r7}
9000b0b4:	b083      	sub	sp, #12
9000b0b6:	af00      	add	r7, sp, #0
9000b0b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000b0ba:	687b      	ldr	r3, [r7, #4]
9000b0bc:	689b      	ldr	r3, [r3, #8]
9000b0be:	f023 0201 	bic.w	r2, r3, #1
9000b0c2:	687b      	ldr	r3, [r7, #4]
9000b0c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b0c6:	2300      	movs	r3, #0
}
9000b0c8:	4618      	mov	r0, r3
9000b0ca:	370c      	adds	r7, #12
9000b0cc:	46bd      	mov	sp, r7
9000b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0d2:	4770      	bx	lr

9000b0d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000b0d4:	b480      	push	{r7}
9000b0d6:	b085      	sub	sp, #20
9000b0d8:	af00      	add	r7, sp, #0
9000b0da:	6078      	str	r0, [r7, #4]
9000b0dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000b0de:	2300      	movs	r3, #0
9000b0e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b0e2:	68fb      	ldr	r3, [r7, #12]
9000b0e4:	3301      	adds	r3, #1
9000b0e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b0e8:	68fb      	ldr	r3, [r7, #12]
9000b0ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b0ee:	d901      	bls.n	9000b0f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000b0f0:	2303      	movs	r3, #3
9000b0f2:	e01b      	b.n	9000b12c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b0f4:	687b      	ldr	r3, [r7, #4]
9000b0f6:	691b      	ldr	r3, [r3, #16]
9000b0f8:	2b00      	cmp	r3, #0
9000b0fa:	daf2      	bge.n	9000b0e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000b0fc:	2300      	movs	r3, #0
9000b0fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000b100:	683b      	ldr	r3, [r7, #0]
9000b102:	019b      	lsls	r3, r3, #6
9000b104:	f043 0220 	orr.w	r2, r3, #32
9000b108:	687b      	ldr	r3, [r7, #4]
9000b10a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b10c:	68fb      	ldr	r3, [r7, #12]
9000b10e:	3301      	adds	r3, #1
9000b110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b112:	68fb      	ldr	r3, [r7, #12]
9000b114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b118:	d901      	bls.n	9000b11e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000b11a:	2303      	movs	r3, #3
9000b11c:	e006      	b.n	9000b12c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000b11e:	687b      	ldr	r3, [r7, #4]
9000b120:	691b      	ldr	r3, [r3, #16]
9000b122:	f003 0320 	and.w	r3, r3, #32
9000b126:	2b20      	cmp	r3, #32
9000b128:	d0f0      	beq.n	9000b10c <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000b12a:	2300      	movs	r3, #0
}
9000b12c:	4618      	mov	r0, r3
9000b12e:	3714      	adds	r7, #20
9000b130:	46bd      	mov	sp, r7
9000b132:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b136:	4770      	bx	lr

9000b138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000b138:	b480      	push	{r7}
9000b13a:	b085      	sub	sp, #20
9000b13c:	af00      	add	r7, sp, #0
9000b13e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000b140:	2300      	movs	r3, #0
9000b142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b144:	68fb      	ldr	r3, [r7, #12]
9000b146:	3301      	adds	r3, #1
9000b148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b14a:	68fb      	ldr	r3, [r7, #12]
9000b14c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b150:	d901      	bls.n	9000b156 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000b152:	2303      	movs	r3, #3
9000b154:	e018      	b.n	9000b188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b156:	687b      	ldr	r3, [r7, #4]
9000b158:	691b      	ldr	r3, [r3, #16]
9000b15a:	2b00      	cmp	r3, #0
9000b15c:	daf2      	bge.n	9000b144 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000b15e:	2300      	movs	r3, #0
9000b160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000b162:	687b      	ldr	r3, [r7, #4]
9000b164:	2210      	movs	r2, #16
9000b166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b168:	68fb      	ldr	r3, [r7, #12]
9000b16a:	3301      	adds	r3, #1
9000b16c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b16e:	68fb      	ldr	r3, [r7, #12]
9000b170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b174:	d901      	bls.n	9000b17a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b176:	2303      	movs	r3, #3
9000b178:	e006      	b.n	9000b188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b17a:	687b      	ldr	r3, [r7, #4]
9000b17c:	691b      	ldr	r3, [r3, #16]
9000b17e:	f003 0310 	and.w	r3, r3, #16
9000b182:	2b10      	cmp	r3, #16
9000b184:	d0f0      	beq.n	9000b168 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b186:	2300      	movs	r3, #0
}
9000b188:	4618      	mov	r0, r3
9000b18a:	3714      	adds	r7, #20
9000b18c:	46bd      	mov	sp, r7
9000b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b192:	4770      	bx	lr

9000b194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b194:	b480      	push	{r7}
9000b196:	b08b      	sub	sp, #44	@ 0x2c
9000b198:	af00      	add	r7, sp, #0
9000b19a:	60f8      	str	r0, [r7, #12]
9000b19c:	60b9      	str	r1, [r7, #8]
9000b19e:	4613      	mov	r3, r2
9000b1a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b1a2:	68fb      	ldr	r3, [r7, #12]
9000b1a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b1a6:	68bb      	ldr	r3, [r7, #8]
9000b1a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b1aa:	88fb      	ldrh	r3, [r7, #6]
9000b1ac:	089b      	lsrs	r3, r3, #2
9000b1ae:	b29b      	uxth	r3, r3
9000b1b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b1b2:	88fb      	ldrh	r3, [r7, #6]
9000b1b4:	f003 0303 	and.w	r3, r3, #3
9000b1b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b1ba:	2300      	movs	r3, #0
9000b1bc:	623b      	str	r3, [r7, #32]
9000b1be:	e014      	b.n	9000b1ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b1c0:	69bb      	ldr	r3, [r7, #24]
9000b1c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b1c6:	681a      	ldr	r2, [r3, #0]
9000b1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1ca:	601a      	str	r2, [r3, #0]
    pDest++;
9000b1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1ce:	3301      	adds	r3, #1
9000b1d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1d4:	3301      	adds	r3, #1
9000b1d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1da:	3301      	adds	r3, #1
9000b1dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1e0:	3301      	adds	r3, #1
9000b1e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b1e4:	6a3b      	ldr	r3, [r7, #32]
9000b1e6:	3301      	adds	r3, #1
9000b1e8:	623b      	str	r3, [r7, #32]
9000b1ea:	6a3a      	ldr	r2, [r7, #32]
9000b1ec:	697b      	ldr	r3, [r7, #20]
9000b1ee:	429a      	cmp	r2, r3
9000b1f0:	d3e6      	bcc.n	9000b1c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b1f2:	8bfb      	ldrh	r3, [r7, #30]
9000b1f4:	2b00      	cmp	r3, #0
9000b1f6:	d01e      	beq.n	9000b236 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b1f8:	2300      	movs	r3, #0
9000b1fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b1fc:	69bb      	ldr	r3, [r7, #24]
9000b1fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b202:	461a      	mov	r2, r3
9000b204:	f107 0310 	add.w	r3, r7, #16
9000b208:	6812      	ldr	r2, [r2, #0]
9000b20a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b20c:	693a      	ldr	r2, [r7, #16]
9000b20e:	6a3b      	ldr	r3, [r7, #32]
9000b210:	b2db      	uxtb	r3, r3
9000b212:	00db      	lsls	r3, r3, #3
9000b214:	fa22 f303 	lsr.w	r3, r2, r3
9000b218:	b2da      	uxtb	r2, r3
9000b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b21c:	701a      	strb	r2, [r3, #0]
      i++;
9000b21e:	6a3b      	ldr	r3, [r7, #32]
9000b220:	3301      	adds	r3, #1
9000b222:	623b      	str	r3, [r7, #32]
      pDest++;
9000b224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b226:	3301      	adds	r3, #1
9000b228:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b22a:	8bfb      	ldrh	r3, [r7, #30]
9000b22c:	3b01      	subs	r3, #1
9000b22e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b230:	8bfb      	ldrh	r3, [r7, #30]
9000b232:	2b00      	cmp	r3, #0
9000b234:	d1ea      	bne.n	9000b20c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b238:	4618      	mov	r0, r3
9000b23a:	372c      	adds	r7, #44	@ 0x2c
9000b23c:	46bd      	mov	sp, r7
9000b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b242:	4770      	bx	lr

9000b244 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b244:	b480      	push	{r7}
9000b246:	b085      	sub	sp, #20
9000b248:	af00      	add	r7, sp, #0
9000b24a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b24c:	687b      	ldr	r3, [r7, #4]
9000b24e:	695b      	ldr	r3, [r3, #20]
9000b250:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b252:	687b      	ldr	r3, [r7, #4]
9000b254:	699b      	ldr	r3, [r3, #24]
9000b256:	68fa      	ldr	r2, [r7, #12]
9000b258:	4013      	ands	r3, r2
9000b25a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b25c:	68fb      	ldr	r3, [r7, #12]
}
9000b25e:	4618      	mov	r0, r3
9000b260:	3714      	adds	r7, #20
9000b262:	46bd      	mov	sp, r7
9000b264:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b268:	4770      	bx	lr

9000b26a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b26a:	b480      	push	{r7}
9000b26c:	b085      	sub	sp, #20
9000b26e:	af00      	add	r7, sp, #0
9000b270:	6078      	str	r0, [r7, #4]
9000b272:	460b      	mov	r3, r1
9000b274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b276:	687b      	ldr	r3, [r7, #4]
9000b278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b27a:	78fb      	ldrb	r3, [r7, #3]
9000b27c:	015a      	lsls	r2, r3, #5
9000b27e:	68fb      	ldr	r3, [r7, #12]
9000b280:	4413      	add	r3, r2
9000b282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b286:	689b      	ldr	r3, [r3, #8]
9000b288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b28a:	78fb      	ldrb	r3, [r7, #3]
9000b28c:	015a      	lsls	r2, r3, #5
9000b28e:	68fb      	ldr	r3, [r7, #12]
9000b290:	4413      	add	r3, r2
9000b292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b296:	68db      	ldr	r3, [r3, #12]
9000b298:	68ba      	ldr	r2, [r7, #8]
9000b29a:	4013      	ands	r3, r2
9000b29c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b29e:	68bb      	ldr	r3, [r7, #8]
}
9000b2a0:	4618      	mov	r0, r3
9000b2a2:	3714      	adds	r7, #20
9000b2a4:	46bd      	mov	sp, r7
9000b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2aa:	4770      	bx	lr

9000b2ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b2ac:	b480      	push	{r7}
9000b2ae:	b083      	sub	sp, #12
9000b2b0:	af00      	add	r7, sp, #0
9000b2b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b2b4:	687b      	ldr	r3, [r7, #4]
9000b2b6:	695b      	ldr	r3, [r3, #20]
9000b2b8:	f003 0301 	and.w	r3, r3, #1
}
9000b2bc:	4618      	mov	r0, r3
9000b2be:	370c      	adds	r7, #12
9000b2c0:	46bd      	mov	sp, r7
9000b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2c6:	4770      	bx	lr

9000b2c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b2c8:	b480      	push	{r7}
9000b2ca:	b085      	sub	sp, #20
9000b2cc:	af00      	add	r7, sp, #0
9000b2ce:	6078      	str	r0, [r7, #4]
9000b2d0:	460b      	mov	r3, r1
9000b2d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b2d4:	687b      	ldr	r3, [r7, #4]
9000b2d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b2d8:	68fb      	ldr	r3, [r7, #12]
9000b2da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b2de:	681b      	ldr	r3, [r3, #0]
9000b2e0:	68fa      	ldr	r2, [r7, #12]
9000b2e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b2e6:	f023 0303 	bic.w	r3, r3, #3
9000b2ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b2ec:	68fb      	ldr	r3, [r7, #12]
9000b2ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b2f2:	681a      	ldr	r2, [r3, #0]
9000b2f4:	78fb      	ldrb	r3, [r7, #3]
9000b2f6:	f003 0303 	and.w	r3, r3, #3
9000b2fa:	68f9      	ldr	r1, [r7, #12]
9000b2fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b300:	4313      	orrs	r3, r2
9000b302:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b304:	78fb      	ldrb	r3, [r7, #3]
9000b306:	2b01      	cmp	r3, #1
9000b308:	d107      	bne.n	9000b31a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b30a:	68fb      	ldr	r3, [r7, #12]
9000b30c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b310:	461a      	mov	r2, r3
9000b312:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b316:	6053      	str	r3, [r2, #4]
9000b318:	e00c      	b.n	9000b334 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b31a:	78fb      	ldrb	r3, [r7, #3]
9000b31c:	2b02      	cmp	r3, #2
9000b31e:	d107      	bne.n	9000b330 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b320:	68fb      	ldr	r3, [r7, #12]
9000b322:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b326:	461a      	mov	r2, r3
9000b328:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b32c:	6053      	str	r3, [r2, #4]
9000b32e:	e001      	b.n	9000b334 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b330:	2301      	movs	r3, #1
9000b332:	e000      	b.n	9000b336 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b334:	2300      	movs	r3, #0
}
9000b336:	4618      	mov	r0, r3
9000b338:	3714      	adds	r7, #20
9000b33a:	46bd      	mov	sp, r7
9000b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b340:	4770      	bx	lr

9000b342 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b342:	b480      	push	{r7}
9000b344:	b085      	sub	sp, #20
9000b346:	af00      	add	r7, sp, #0
9000b348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b34a:	687b      	ldr	r3, [r7, #4]
9000b34c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b34e:	68fb      	ldr	r3, [r7, #12]
9000b350:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b354:	695b      	ldr	r3, [r3, #20]
9000b356:	b29b      	uxth	r3, r3
}
9000b358:	4618      	mov	r0, r3
9000b35a:	3714      	adds	r7, #20
9000b35c:	46bd      	mov	sp, r7
9000b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b362:	4770      	bx	lr

9000b364 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b364:	b480      	push	{r7}
9000b366:	b089      	sub	sp, #36	@ 0x24
9000b368:	af00      	add	r7, sp, #0
9000b36a:	6078      	str	r0, [r7, #4]
9000b36c:	460b      	mov	r3, r1
9000b36e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b370:	687b      	ldr	r3, [r7, #4]
9000b372:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b374:	78fb      	ldrb	r3, [r7, #3]
9000b376:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b378:	2300      	movs	r3, #0
9000b37a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b37c:	69bb      	ldr	r3, [r7, #24]
9000b37e:	015a      	lsls	r2, r3, #5
9000b380:	69fb      	ldr	r3, [r7, #28]
9000b382:	4413      	add	r3, r2
9000b384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b388:	681b      	ldr	r3, [r3, #0]
9000b38a:	0c9b      	lsrs	r3, r3, #18
9000b38c:	f003 0303 	and.w	r3, r3, #3
9000b390:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b392:	69bb      	ldr	r3, [r7, #24]
9000b394:	015a      	lsls	r2, r3, #5
9000b396:	69fb      	ldr	r3, [r7, #28]
9000b398:	4413      	add	r3, r2
9000b39a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b39e:	681b      	ldr	r3, [r3, #0]
9000b3a0:	0fdb      	lsrs	r3, r3, #31
9000b3a2:	f003 0301 	and.w	r3, r3, #1
9000b3a6:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b3a8:	69bb      	ldr	r3, [r7, #24]
9000b3aa:	015a      	lsls	r2, r3, #5
9000b3ac:	69fb      	ldr	r3, [r7, #28]
9000b3ae:	4413      	add	r3, r2
9000b3b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3b4:	685b      	ldr	r3, [r3, #4]
9000b3b6:	0fdb      	lsrs	r3, r3, #31
9000b3b8:	f003 0301 	and.w	r3, r3, #1
9000b3bc:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b3be:	687b      	ldr	r3, [r7, #4]
9000b3c0:	689b      	ldr	r3, [r3, #8]
9000b3c2:	f003 0320 	and.w	r3, r3, #32
9000b3c6:	2b20      	cmp	r3, #32
9000b3c8:	d10d      	bne.n	9000b3e6 <USB_HC_Halt+0x82>
9000b3ca:	68fb      	ldr	r3, [r7, #12]
9000b3cc:	2b00      	cmp	r3, #0
9000b3ce:	d10a      	bne.n	9000b3e6 <USB_HC_Halt+0x82>
9000b3d0:	693b      	ldr	r3, [r7, #16]
9000b3d2:	2b00      	cmp	r3, #0
9000b3d4:	d005      	beq.n	9000b3e2 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b3d6:	697b      	ldr	r3, [r7, #20]
9000b3d8:	2b01      	cmp	r3, #1
9000b3da:	d002      	beq.n	9000b3e2 <USB_HC_Halt+0x7e>
9000b3dc:	697b      	ldr	r3, [r7, #20]
9000b3de:	2b03      	cmp	r3, #3
9000b3e0:	d101      	bne.n	9000b3e6 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b3e2:	2300      	movs	r3, #0
9000b3e4:	e0d8      	b.n	9000b598 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b3e6:	697b      	ldr	r3, [r7, #20]
9000b3e8:	2b00      	cmp	r3, #0
9000b3ea:	d002      	beq.n	9000b3f2 <USB_HC_Halt+0x8e>
9000b3ec:	697b      	ldr	r3, [r7, #20]
9000b3ee:	2b02      	cmp	r3, #2
9000b3f0:	d173      	bne.n	9000b4da <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b3f2:	69bb      	ldr	r3, [r7, #24]
9000b3f4:	015a      	lsls	r2, r3, #5
9000b3f6:	69fb      	ldr	r3, [r7, #28]
9000b3f8:	4413      	add	r3, r2
9000b3fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3fe:	681b      	ldr	r3, [r3, #0]
9000b400:	69ba      	ldr	r2, [r7, #24]
9000b402:	0151      	lsls	r1, r2, #5
9000b404:	69fa      	ldr	r2, [r7, #28]
9000b406:	440a      	add	r2, r1
9000b408:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b40c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b410:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b412:	687b      	ldr	r3, [r7, #4]
9000b414:	689b      	ldr	r3, [r3, #8]
9000b416:	f003 0320 	and.w	r3, r3, #32
9000b41a:	2b00      	cmp	r3, #0
9000b41c:	d14a      	bne.n	9000b4b4 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b41e:	687b      	ldr	r3, [r7, #4]
9000b420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b422:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b426:	2b00      	cmp	r3, #0
9000b428:	d133      	bne.n	9000b492 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b42a:	69bb      	ldr	r3, [r7, #24]
9000b42c:	015a      	lsls	r2, r3, #5
9000b42e:	69fb      	ldr	r3, [r7, #28]
9000b430:	4413      	add	r3, r2
9000b432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b436:	681b      	ldr	r3, [r3, #0]
9000b438:	69ba      	ldr	r2, [r7, #24]
9000b43a:	0151      	lsls	r1, r2, #5
9000b43c:	69fa      	ldr	r2, [r7, #28]
9000b43e:	440a      	add	r2, r1
9000b440:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b448:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b44a:	69bb      	ldr	r3, [r7, #24]
9000b44c:	015a      	lsls	r2, r3, #5
9000b44e:	69fb      	ldr	r3, [r7, #28]
9000b450:	4413      	add	r3, r2
9000b452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b456:	681b      	ldr	r3, [r3, #0]
9000b458:	69ba      	ldr	r2, [r7, #24]
9000b45a:	0151      	lsls	r1, r2, #5
9000b45c:	69fa      	ldr	r2, [r7, #28]
9000b45e:	440a      	add	r2, r1
9000b460:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b464:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b468:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b46a:	68bb      	ldr	r3, [r7, #8]
9000b46c:	3301      	adds	r3, #1
9000b46e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b470:	68bb      	ldr	r3, [r7, #8]
9000b472:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b476:	d82e      	bhi.n	9000b4d6 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b478:	69bb      	ldr	r3, [r7, #24]
9000b47a:	015a      	lsls	r2, r3, #5
9000b47c:	69fb      	ldr	r3, [r7, #28]
9000b47e:	4413      	add	r3, r2
9000b480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b484:	681b      	ldr	r3, [r3, #0]
9000b486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b48a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b48e:	d0ec      	beq.n	9000b46a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b490:	e081      	b.n	9000b596 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b492:	69bb      	ldr	r3, [r7, #24]
9000b494:	015a      	lsls	r2, r3, #5
9000b496:	69fb      	ldr	r3, [r7, #28]
9000b498:	4413      	add	r3, r2
9000b49a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b49e:	681b      	ldr	r3, [r3, #0]
9000b4a0:	69ba      	ldr	r2, [r7, #24]
9000b4a2:	0151      	lsls	r1, r2, #5
9000b4a4:	69fa      	ldr	r2, [r7, #28]
9000b4a6:	440a      	add	r2, r1
9000b4a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b4b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4b2:	e070      	b.n	9000b596 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b4b4:	69bb      	ldr	r3, [r7, #24]
9000b4b6:	015a      	lsls	r2, r3, #5
9000b4b8:	69fb      	ldr	r3, [r7, #28]
9000b4ba:	4413      	add	r3, r2
9000b4bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4c0:	681b      	ldr	r3, [r3, #0]
9000b4c2:	69ba      	ldr	r2, [r7, #24]
9000b4c4:	0151      	lsls	r1, r2, #5
9000b4c6:	69fa      	ldr	r2, [r7, #28]
9000b4c8:	440a      	add	r2, r1
9000b4ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b4d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4d4:	e05f      	b.n	9000b596 <USB_HC_Halt+0x232>
            break;
9000b4d6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4d8:	e05d      	b.n	9000b596 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b4da:	69bb      	ldr	r3, [r7, #24]
9000b4dc:	015a      	lsls	r2, r3, #5
9000b4de:	69fb      	ldr	r3, [r7, #28]
9000b4e0:	4413      	add	r3, r2
9000b4e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4e6:	681b      	ldr	r3, [r3, #0]
9000b4e8:	69ba      	ldr	r2, [r7, #24]
9000b4ea:	0151      	lsls	r1, r2, #5
9000b4ec:	69fa      	ldr	r2, [r7, #28]
9000b4ee:	440a      	add	r2, r1
9000b4f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b4f8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b4fa:	69fb      	ldr	r3, [r7, #28]
9000b4fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b500:	691b      	ldr	r3, [r3, #16]
9000b502:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b506:	2b00      	cmp	r3, #0
9000b508:	d133      	bne.n	9000b572 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b50a:	69bb      	ldr	r3, [r7, #24]
9000b50c:	015a      	lsls	r2, r3, #5
9000b50e:	69fb      	ldr	r3, [r7, #28]
9000b510:	4413      	add	r3, r2
9000b512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b516:	681b      	ldr	r3, [r3, #0]
9000b518:	69ba      	ldr	r2, [r7, #24]
9000b51a:	0151      	lsls	r1, r2, #5
9000b51c:	69fa      	ldr	r2, [r7, #28]
9000b51e:	440a      	add	r2, r1
9000b520:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b528:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b52a:	69bb      	ldr	r3, [r7, #24]
9000b52c:	015a      	lsls	r2, r3, #5
9000b52e:	69fb      	ldr	r3, [r7, #28]
9000b530:	4413      	add	r3, r2
9000b532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b536:	681b      	ldr	r3, [r3, #0]
9000b538:	69ba      	ldr	r2, [r7, #24]
9000b53a:	0151      	lsls	r1, r2, #5
9000b53c:	69fa      	ldr	r2, [r7, #28]
9000b53e:	440a      	add	r2, r1
9000b540:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b544:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b548:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b54a:	68bb      	ldr	r3, [r7, #8]
9000b54c:	3301      	adds	r3, #1
9000b54e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b550:	68bb      	ldr	r3, [r7, #8]
9000b552:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b556:	d81d      	bhi.n	9000b594 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b558:	69bb      	ldr	r3, [r7, #24]
9000b55a:	015a      	lsls	r2, r3, #5
9000b55c:	69fb      	ldr	r3, [r7, #28]
9000b55e:	4413      	add	r3, r2
9000b560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b564:	681b      	ldr	r3, [r3, #0]
9000b566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b56a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b56e:	d0ec      	beq.n	9000b54a <USB_HC_Halt+0x1e6>
9000b570:	e011      	b.n	9000b596 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b572:	69bb      	ldr	r3, [r7, #24]
9000b574:	015a      	lsls	r2, r3, #5
9000b576:	69fb      	ldr	r3, [r7, #28]
9000b578:	4413      	add	r3, r2
9000b57a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b57e:	681b      	ldr	r3, [r3, #0]
9000b580:	69ba      	ldr	r2, [r7, #24]
9000b582:	0151      	lsls	r1, r2, #5
9000b584:	69fa      	ldr	r2, [r7, #28]
9000b586:	440a      	add	r2, r1
9000b588:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b58c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b590:	6013      	str	r3, [r2, #0]
9000b592:	e000      	b.n	9000b596 <USB_HC_Halt+0x232>
          break;
9000b594:	bf00      	nop
    }
  }

  return HAL_OK;
9000b596:	2300      	movs	r3, #0
}
9000b598:	4618      	mov	r0, r3
9000b59a:	3724      	adds	r7, #36	@ 0x24
9000b59c:	46bd      	mov	sp, r7
9000b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b5a2:	4770      	bx	lr

9000b5a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b5a4:	b580      	push	{r7, lr}
9000b5a6:	b088      	sub	sp, #32
9000b5a8:	af00      	add	r7, sp, #0
9000b5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b5ac:	2300      	movs	r3, #0
9000b5ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b5b0:	687b      	ldr	r3, [r7, #4]
9000b5b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b5b4:	2300      	movs	r3, #0
9000b5b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b5b8:	6878      	ldr	r0, [r7, #4]
9000b5ba:	f7ff fd7a 	bl	9000b0b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b5be:	2110      	movs	r1, #16
9000b5c0:	6878      	ldr	r0, [r7, #4]
9000b5c2:	f7ff fd87 	bl	9000b0d4 <USB_FlushTxFifo>
9000b5c6:	4603      	mov	r3, r0
9000b5c8:	2b00      	cmp	r3, #0
9000b5ca:	d001      	beq.n	9000b5d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b5cc:	2301      	movs	r3, #1
9000b5ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b5d0:	6878      	ldr	r0, [r7, #4]
9000b5d2:	f7ff fdb1 	bl	9000b138 <USB_FlushRxFifo>
9000b5d6:	4603      	mov	r3, r0
9000b5d8:	2b00      	cmp	r3, #0
9000b5da:	d001      	beq.n	9000b5e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b5dc:	2301      	movs	r3, #1
9000b5de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b5e0:	2300      	movs	r3, #0
9000b5e2:	61bb      	str	r3, [r7, #24]
9000b5e4:	e01f      	b.n	9000b626 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b5e6:	69bb      	ldr	r3, [r7, #24]
9000b5e8:	015a      	lsls	r2, r3, #5
9000b5ea:	697b      	ldr	r3, [r7, #20]
9000b5ec:	4413      	add	r3, r2
9000b5ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5f2:	681b      	ldr	r3, [r3, #0]
9000b5f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b5f6:	693b      	ldr	r3, [r7, #16]
9000b5f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b5fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b5fe:	693b      	ldr	r3, [r7, #16]
9000b600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b604:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b606:	693b      	ldr	r3, [r7, #16]
9000b608:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b60c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b60e:	69bb      	ldr	r3, [r7, #24]
9000b610:	015a      	lsls	r2, r3, #5
9000b612:	697b      	ldr	r3, [r7, #20]
9000b614:	4413      	add	r3, r2
9000b616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b61a:	461a      	mov	r2, r3
9000b61c:	693b      	ldr	r3, [r7, #16]
9000b61e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b620:	69bb      	ldr	r3, [r7, #24]
9000b622:	3301      	adds	r3, #1
9000b624:	61bb      	str	r3, [r7, #24]
9000b626:	69bb      	ldr	r3, [r7, #24]
9000b628:	2b0f      	cmp	r3, #15
9000b62a:	d9dc      	bls.n	9000b5e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b62c:	2300      	movs	r3, #0
9000b62e:	61bb      	str	r3, [r7, #24]
9000b630:	e034      	b.n	9000b69c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b632:	69bb      	ldr	r3, [r7, #24]
9000b634:	015a      	lsls	r2, r3, #5
9000b636:	697b      	ldr	r3, [r7, #20]
9000b638:	4413      	add	r3, r2
9000b63a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b63e:	681b      	ldr	r3, [r3, #0]
9000b640:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b642:	693b      	ldr	r3, [r7, #16]
9000b644:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b648:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b64a:	693b      	ldr	r3, [r7, #16]
9000b64c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b650:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b652:	693b      	ldr	r3, [r7, #16]
9000b654:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b658:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b65a:	69bb      	ldr	r3, [r7, #24]
9000b65c:	015a      	lsls	r2, r3, #5
9000b65e:	697b      	ldr	r3, [r7, #20]
9000b660:	4413      	add	r3, r2
9000b662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b666:	461a      	mov	r2, r3
9000b668:	693b      	ldr	r3, [r7, #16]
9000b66a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b66c:	68fb      	ldr	r3, [r7, #12]
9000b66e:	3301      	adds	r3, #1
9000b670:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b672:	68fb      	ldr	r3, [r7, #12]
9000b674:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b678:	d80c      	bhi.n	9000b694 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b67a:	69bb      	ldr	r3, [r7, #24]
9000b67c:	015a      	lsls	r2, r3, #5
9000b67e:	697b      	ldr	r3, [r7, #20]
9000b680:	4413      	add	r3, r2
9000b682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b686:	681b      	ldr	r3, [r3, #0]
9000b688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b68c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b690:	d0ec      	beq.n	9000b66c <USB_StopHost+0xc8>
9000b692:	e000      	b.n	9000b696 <USB_StopHost+0xf2>
        break;
9000b694:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b696:	69bb      	ldr	r3, [r7, #24]
9000b698:	3301      	adds	r3, #1
9000b69a:	61bb      	str	r3, [r7, #24]
9000b69c:	69bb      	ldr	r3, [r7, #24]
9000b69e:	2b0f      	cmp	r3, #15
9000b6a0:	d9c7      	bls.n	9000b632 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b6a2:	697b      	ldr	r3, [r7, #20]
9000b6a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b6a8:	461a      	mov	r2, r3
9000b6aa:	f04f 33ff 	mov.w	r3, #4294967295
9000b6ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b6b0:	687b      	ldr	r3, [r7, #4]
9000b6b2:	f04f 32ff 	mov.w	r2, #4294967295
9000b6b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b6b8:	6878      	ldr	r0, [r7, #4]
9000b6ba:	f7ff fce9 	bl	9000b090 <USB_EnableGlobalInt>

  return ret;
9000b6be:	7ffb      	ldrb	r3, [r7, #31]
}
9000b6c0:	4618      	mov	r0, r3
9000b6c2:	3720      	adds	r7, #32
9000b6c4:	46bd      	mov	sp, r7
9000b6c6:	bd80      	pop	{r7, pc}

9000b6c8 <setAllRowsInactive>:
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;
KeyboardButton receivedChar;

void setAllRowsInactive(void)
{
9000b6c8:	b580      	push	{r7, lr}
9000b6ca:	b082      	sub	sp, #8
9000b6cc:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000b6ce:	2300      	movs	r3, #0
9000b6d0:	607b      	str	r3, [r7, #4]
9000b6d2:	e00f      	b.n	9000b6f4 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000b6d4:	4a0b      	ldr	r2, [pc, #44]	@ (9000b704 <setAllRowsInactive+0x3c>)
9000b6d6:	687b      	ldr	r3, [r7, #4]
9000b6d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b6dc:	4a09      	ldr	r2, [pc, #36]	@ (9000b704 <setAllRowsInactive+0x3c>)
9000b6de:	687b      	ldr	r3, [r7, #4]
9000b6e0:	00db      	lsls	r3, r3, #3
9000b6e2:	4413      	add	r3, r2
9000b6e4:	889b      	ldrh	r3, [r3, #4]
9000b6e6:	2200      	movs	r2, #0
9000b6e8:	4619      	mov	r1, r3
9000b6ea:	f7f8 fc13 	bl	90003f14 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000b6ee:	687b      	ldr	r3, [r7, #4]
9000b6f0:	3301      	adds	r3, #1
9000b6f2:	607b      	str	r3, [r7, #4]
9000b6f4:	687b      	ldr	r3, [r7, #4]
9000b6f6:	2b04      	cmp	r3, #4
9000b6f8:	ddec      	ble.n	9000b6d4 <setAllRowsInactive+0xc>
    }
}
9000b6fa:	bf00      	nop
9000b6fc:	bf00      	nop
9000b6fe:	3708      	adds	r7, #8
9000b700:	46bd      	mov	sp, r7
9000b702:	bd80      	pop	{r7, pc}
9000b704:	20000010 	.word	0x20000010

9000b708 <setRowActive>:

void setRowActive(int row)
{
9000b708:	b580      	push	{r7, lr}
9000b70a:	b082      	sub	sp, #8
9000b70c:	af00      	add	r7, sp, #0
9000b70e:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000b710:	687b      	ldr	r3, [r7, #4]
9000b712:	2b00      	cmp	r3, #0
9000b714:	db12      	blt.n	9000b73c <setRowActive+0x34>
9000b716:	687b      	ldr	r3, [r7, #4]
9000b718:	2b04      	cmp	r3, #4
9000b71a:	dc0f      	bgt.n	9000b73c <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000b71c:	f7ff ffd4 	bl	9000b6c8 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000b720:	4a08      	ldr	r2, [pc, #32]	@ (9000b744 <setRowActive+0x3c>)
9000b722:	687b      	ldr	r3, [r7, #4]
9000b724:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b728:	4a06      	ldr	r2, [pc, #24]	@ (9000b744 <setRowActive+0x3c>)
9000b72a:	687b      	ldr	r3, [r7, #4]
9000b72c:	00db      	lsls	r3, r3, #3
9000b72e:	4413      	add	r3, r2
9000b730:	889b      	ldrh	r3, [r3, #4]
9000b732:	2201      	movs	r2, #1
9000b734:	4619      	mov	r1, r3
9000b736:	f7f8 fbed 	bl	90003f14 <HAL_GPIO_WritePin>
9000b73a:	e000      	b.n	9000b73e <setRowActive+0x36>
        return;
9000b73c:	bf00      	nop
}
9000b73e:	3708      	adds	r7, #8
9000b740:	46bd      	mov	sp, r7
9000b742:	bd80      	pop	{r7, pc}
9000b744:	20000010 	.word	0x20000010

9000b748 <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000b748:	b580      	push	{r7, lr}
9000b74a:	b084      	sub	sp, #16
9000b74c:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000b74e:	2300      	movs	r3, #0
9000b750:	60fb      	str	r3, [r7, #12]
9000b752:	e04e      	b.n	9000b7f2 <ReadFlexiKeyboard+0xaa>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000b754:	68f8      	ldr	r0, [r7, #12]
9000b756:	f7ff ffd7 	bl	9000b708 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000b75a:	200a      	movs	r0, #10
9000b75c:	f7f7 fd74 	bl	90003248 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000b760:	2300      	movs	r3, #0
9000b762:	60bb      	str	r3, [r7, #8]
9000b764:	e03f      	b.n	9000b7e6 <ReadFlexiKeyboard+0x9e>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000b766:	4a27      	ldr	r2, [pc, #156]	@ (9000b804 <ReadFlexiKeyboard+0xbc>)
9000b768:	68bb      	ldr	r3, [r7, #8]
9000b76a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000b76e:	4925      	ldr	r1, [pc, #148]	@ (9000b804 <ReadFlexiKeyboard+0xbc>)
9000b770:	68bb      	ldr	r3, [r7, #8]
9000b772:	00db      	lsls	r3, r3, #3
9000b774:	440b      	add	r3, r1
9000b776:	889b      	ldrh	r3, [r3, #4]
9000b778:	4619      	mov	r1, r3
9000b77a:	4610      	mov	r0, r2
9000b77c:	f7f8 fbb2 	bl	90003ee4 <HAL_GPIO_ReadPin>
9000b780:	4603      	mov	r3, r0
9000b782:	2b01      	cmp	r3, #1
9000b784:	d12c      	bne.n	9000b7e0 <ReadFlexiKeyboard+0x98>
            {
                uint32_t now = HAL_GetTick();
9000b786:	f7f7 fd53 	bl	90003230 <HAL_GetTick>
9000b78a:	6078      	str	r0, [r7, #4]

                // Debounce/repeat suppression
                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) {
9000b78c:	4b1e      	ldr	r3, [pc, #120]	@ (9000b808 <ReadFlexiKeyboard+0xc0>)
9000b78e:	681b      	ldr	r3, [r3, #0]
9000b790:	68fa      	ldr	r2, [r7, #12]
9000b792:	429a      	cmp	r2, r3
9000b794:	d10d      	bne.n	9000b7b2 <ReadFlexiKeyboard+0x6a>
9000b796:	4b1d      	ldr	r3, [pc, #116]	@ (9000b80c <ReadFlexiKeyboard+0xc4>)
9000b798:	681b      	ldr	r3, [r3, #0]
9000b79a:	68ba      	ldr	r2, [r7, #8]
9000b79c:	429a      	cmp	r2, r3
9000b79e:	d108      	bne.n	9000b7b2 <ReadFlexiKeyboard+0x6a>
9000b7a0:	4b1b      	ldr	r3, [pc, #108]	@ (9000b810 <ReadFlexiKeyboard+0xc8>)
9000b7a2:	681b      	ldr	r3, [r3, #0]
9000b7a4:	687a      	ldr	r2, [r7, #4]
9000b7a6:	1ad3      	subs	r3, r2, r3
9000b7a8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000b7ac:	d201      	bcs.n	9000b7b2 <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000b7ae:	234e      	movs	r3, #78	@ 0x4e
9000b7b0:	e023      	b.n	9000b7fa <ReadFlexiKeyboard+0xb2>
                }

                lastRow = row;
9000b7b2:	4a15      	ldr	r2, [pc, #84]	@ (9000b808 <ReadFlexiKeyboard+0xc0>)
9000b7b4:	68fb      	ldr	r3, [r7, #12]
9000b7b6:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000b7b8:	4a14      	ldr	r2, [pc, #80]	@ (9000b80c <ReadFlexiKeyboard+0xc4>)
9000b7ba:	68bb      	ldr	r3, [r7, #8]
9000b7bc:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000b7be:	4a14      	ldr	r2, [pc, #80]	@ (9000b810 <ReadFlexiKeyboard+0xc8>)
9000b7c0:	687b      	ldr	r3, [r7, #4]
9000b7c2:	6013      	str	r3, [r2, #0]

                receivedChar = keymap[row][col];
9000b7c4:	4913      	ldr	r1, [pc, #76]	@ (9000b814 <ReadFlexiKeyboard+0xcc>)
9000b7c6:	68fa      	ldr	r2, [r7, #12]
9000b7c8:	4613      	mov	r3, r2
9000b7ca:	009b      	lsls	r3, r3, #2
9000b7cc:	4413      	add	r3, r2
9000b7ce:	18ca      	adds	r2, r1, r3
9000b7d0:	68bb      	ldr	r3, [r7, #8]
9000b7d2:	4413      	add	r3, r2
9000b7d4:	781a      	ldrb	r2, [r3, #0]
9000b7d6:	4b10      	ldr	r3, [pc, #64]	@ (9000b818 <ReadFlexiKeyboard+0xd0>)
9000b7d8:	701a      	strb	r2, [r3, #0]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
9000b7da:	4b0f      	ldr	r3, [pc, #60]	@ (9000b818 <ReadFlexiKeyboard+0xd0>)
9000b7dc:	781b      	ldrb	r3, [r3, #0]
9000b7de:	e00c      	b.n	9000b7fa <ReadFlexiKeyboard+0xb2>
        for (int col = 0; col < NUM_COLS; col++)
9000b7e0:	68bb      	ldr	r3, [r7, #8]
9000b7e2:	3301      	adds	r3, #1
9000b7e4:	60bb      	str	r3, [r7, #8]
9000b7e6:	68bb      	ldr	r3, [r7, #8]
9000b7e8:	2b04      	cmp	r3, #4
9000b7ea:	ddbc      	ble.n	9000b766 <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000b7ec:	68fb      	ldr	r3, [r7, #12]
9000b7ee:	3301      	adds	r3, #1
9000b7f0:	60fb      	str	r3, [r7, #12]
9000b7f2:	68fb      	ldr	r3, [r7, #12]
9000b7f4:	2b04      	cmp	r3, #4
9000b7f6:	ddad      	ble.n	9000b754 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000b7f8:	234e      	movs	r3, #78	@ 0x4e
}
9000b7fa:	4618      	mov	r0, r3
9000b7fc:	3710      	adds	r7, #16
9000b7fe:	46bd      	mov	sp, r7
9000b800:	bd80      	pop	{r7, pc}
9000b802:	bf00      	nop
9000b804:	20000038 	.word	0x20000038
9000b808:	20000060 	.word	0x20000060
9000b80c:	20000064 	.word	0x20000064
9000b810:	200012d8 	.word	0x200012d8
9000b814:	9000d768 	.word	0x9000d768
9000b818:	200012dc 	.word	0x200012dc

9000b81c <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000b81c:	b580      	push	{r7, lr}
9000b81e:	b090      	sub	sp, #64	@ 0x40
9000b820:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000b822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b826:	2200      	movs	r2, #0
9000b828:	601a      	str	r2, [r3, #0]
9000b82a:	605a      	str	r2, [r3, #4]
9000b82c:	609a      	str	r2, [r3, #8]
9000b82e:	60da      	str	r2, [r3, #12]
9000b830:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000b832:	4b5c      	ldr	r3, [pc, #368]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b838:	4a5a      	ldr	r2, [pc, #360]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b83a:	f043 0301 	orr.w	r3, r3, #1
9000b83e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b842:	4b58      	ldr	r3, [pc, #352]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b848:	f003 0301 	and.w	r3, r3, #1
9000b84c:	623b      	str	r3, [r7, #32]
9000b84e:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000b850:	4b54      	ldr	r3, [pc, #336]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b856:	4a53      	ldr	r2, [pc, #332]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b858:	f043 0302 	orr.w	r3, r3, #2
9000b85c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b860:	4b50      	ldr	r3, [pc, #320]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b866:	f003 0302 	and.w	r3, r3, #2
9000b86a:	61fb      	str	r3, [r7, #28]
9000b86c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000b86e:	4b4d      	ldr	r3, [pc, #308]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b874:	4a4b      	ldr	r2, [pc, #300]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b876:	f043 0308 	orr.w	r3, r3, #8
9000b87a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b87e:	4b49      	ldr	r3, [pc, #292]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b884:	f003 0308 	and.w	r3, r3, #8
9000b888:	61bb      	str	r3, [r7, #24]
9000b88a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000b88c:	4b45      	ldr	r3, [pc, #276]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b88e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b892:	4a44      	ldr	r2, [pc, #272]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b894:	f043 0310 	orr.w	r3, r3, #16
9000b898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b89c:	4b41      	ldr	r3, [pc, #260]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b89e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8a2:	f003 0310 	and.w	r3, r3, #16
9000b8a6:	617b      	str	r3, [r7, #20]
9000b8a8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000b8aa:	4b3e      	ldr	r3, [pc, #248]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8b0:	4a3c      	ldr	r2, [pc, #240]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b8b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8ba:	4b3a      	ldr	r3, [pc, #232]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b8c4:	613b      	str	r3, [r7, #16]
9000b8c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000b8c8:	4b36      	ldr	r3, [pc, #216]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8ce:	4a35      	ldr	r2, [pc, #212]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000b8d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8d8:	4b32      	ldr	r3, [pc, #200]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b8e2:	60fb      	str	r3, [r7, #12]
9000b8e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000b8e6:	4b2f      	ldr	r3, [pc, #188]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8ec:	4a2d      	ldr	r2, [pc, #180]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b8f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8f6:	4b2b      	ldr	r3, [pc, #172]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b8f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000b900:	60bb      	str	r3, [r7, #8]
9000b902:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000b904:	4b27      	ldr	r3, [pc, #156]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b90a:	4a26      	ldr	r2, [pc, #152]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b90c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000b910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b914:	4b23      	ldr	r3, [pc, #140]	@ (9000b9a4 <InitFlexiKeyboard+0x188>)
9000b916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b91a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000b91e:	607b      	str	r3, [r7, #4]
9000b920:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000b922:	2301      	movs	r3, #1
9000b924:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000b926:	2300      	movs	r3, #0
9000b928:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000b92a:	2300      	movs	r3, #0
9000b92c:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000b92e:	2300      	movs	r3, #0
9000b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b932:	e012      	b.n	9000b95a <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000b934:	4a1c      	ldr	r2, [pc, #112]	@ (9000b9a8 <InitFlexiKeyboard+0x18c>)
9000b936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b938:	00db      	lsls	r3, r3, #3
9000b93a:	4413      	add	r3, r2
9000b93c:	889b      	ldrh	r3, [r3, #4]
9000b93e:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000b940:	4a19      	ldr	r2, [pc, #100]	@ (9000b9a8 <InitFlexiKeyboard+0x18c>)
9000b942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b948:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b94c:	4611      	mov	r1, r2
9000b94e:	4618      	mov	r0, r3
9000b950:	f7f8 f918 	bl	90003b84 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000b954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b956:	3301      	adds	r3, #1
9000b958:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b95a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b95c:	2b04      	cmp	r3, #4
9000b95e:	dde9      	ble.n	9000b934 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000b960:	2300      	movs	r3, #0
9000b962:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000b964:	2302      	movs	r3, #2
9000b966:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000b968:	2300      	movs	r3, #0
9000b96a:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b96c:	e012      	b.n	9000b994 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000b96e:	4a0f      	ldr	r2, [pc, #60]	@ (9000b9ac <InitFlexiKeyboard+0x190>)
9000b970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b972:	00db      	lsls	r3, r3, #3
9000b974:	4413      	add	r3, r2
9000b976:	889b      	ldrh	r3, [r3, #4]
9000b978:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000b97a:	4a0c      	ldr	r2, [pc, #48]	@ (9000b9ac <InitFlexiKeyboard+0x190>)
9000b97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b97e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b982:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b986:	4611      	mov	r1, r2
9000b988:	4618      	mov	r0, r3
9000b98a:	f7f8 f8fb 	bl	90003b84 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b990:	3301      	adds	r3, #1
9000b992:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b996:	2b04      	cmp	r3, #4
9000b998:	dde9      	ble.n	9000b96e <InitFlexiKeyboard+0x152>
	}
}
9000b99a:	bf00      	nop
9000b99c:	bf00      	nop
9000b99e:	3740      	adds	r7, #64	@ 0x40
9000b9a0:	46bd      	mov	sp, r7
9000b9a2:	bd80      	pop	{r7, pc}
9000b9a4:	58024400 	.word	0x58024400
9000b9a8:	20000010 	.word	0x20000010
9000b9ac:	20000038 	.word	0x20000038

9000b9b0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000b9b0:	b580      	push	{r7, lr}
9000b9b2:	b082      	sub	sp, #8
9000b9b4:	af00      	add	r7, sp, #0
9000b9b6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000b9b8:	687b      	ldr	r3, [r7, #4]
9000b9ba:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000b9be:	1c5a      	adds	r2, r3, #1
9000b9c0:	687b      	ldr	r3, [r7, #4]
9000b9c2:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000b9c6:	6878      	ldr	r0, [r7, #4]
9000b9c8:	f000 f804 	bl	9000b9d4 <USBH_HandleSof>
}
9000b9cc:	bf00      	nop
9000b9ce:	3708      	adds	r7, #8
9000b9d0:	46bd      	mov	sp, r7
9000b9d2:	bd80      	pop	{r7, pc}

9000b9d4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000b9d4:	b580      	push	{r7, lr}
9000b9d6:	b082      	sub	sp, #8
9000b9d8:	af00      	add	r7, sp, #0
9000b9da:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000b9dc:	687b      	ldr	r3, [r7, #4]
9000b9de:	781b      	ldrb	r3, [r3, #0]
9000b9e0:	b2db      	uxtb	r3, r3
9000b9e2:	2b0b      	cmp	r3, #11
9000b9e4:	d10a      	bne.n	9000b9fc <USBH_HandleSof+0x28>
9000b9e6:	687b      	ldr	r3, [r7, #4]
9000b9e8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b9ec:	2b00      	cmp	r3, #0
9000b9ee:	d005      	beq.n	9000b9fc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000b9f0:	687b      	ldr	r3, [r7, #4]
9000b9f2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b9f6:	699b      	ldr	r3, [r3, #24]
9000b9f8:	6878      	ldr	r0, [r7, #4]
9000b9fa:	4798      	blx	r3
  }
}
9000b9fc:	bf00      	nop
9000b9fe:	3708      	adds	r7, #8
9000ba00:	46bd      	mov	sp, r7
9000ba02:	bd80      	pop	{r7, pc}

9000ba04 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000ba04:	b480      	push	{r7}
9000ba06:	b083      	sub	sp, #12
9000ba08:	af00      	add	r7, sp, #0
9000ba0a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000ba0c:	687b      	ldr	r3, [r7, #4]
9000ba0e:	2201      	movs	r2, #1
9000ba10:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000ba14:	bf00      	nop
}
9000ba16:	370c      	adds	r7, #12
9000ba18:	46bd      	mov	sp, r7
9000ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba1e:	4770      	bx	lr

9000ba20 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000ba20:	b480      	push	{r7}
9000ba22:	b083      	sub	sp, #12
9000ba24:	af00      	add	r7, sp, #0
9000ba26:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000ba28:	687b      	ldr	r3, [r7, #4]
9000ba2a:	2200      	movs	r2, #0
9000ba2c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000ba30:	687b      	ldr	r3, [r7, #4]
9000ba32:	2201      	movs	r2, #1
9000ba34:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000ba38:	bf00      	nop
}
9000ba3a:	370c      	adds	r7, #12
9000ba3c:	46bd      	mov	sp, r7
9000ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba42:	4770      	bx	lr

9000ba44 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000ba44:	b480      	push	{r7}
9000ba46:	b083      	sub	sp, #12
9000ba48:	af00      	add	r7, sp, #0
9000ba4a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000ba4c:	687b      	ldr	r3, [r7, #4]
9000ba4e:	2201      	movs	r2, #1
9000ba50:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000ba54:	687b      	ldr	r3, [r7, #4]
9000ba56:	2200      	movs	r2, #0
9000ba58:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000ba5c:	687b      	ldr	r3, [r7, #4]
9000ba5e:	2200      	movs	r2, #0
9000ba60:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000ba64:	2300      	movs	r3, #0
}
9000ba66:	4618      	mov	r0, r3
9000ba68:	370c      	adds	r7, #12
9000ba6a:	46bd      	mov	sp, r7
9000ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba70:	4770      	bx	lr

9000ba72 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000ba72:	b580      	push	{r7, lr}
9000ba74:	b082      	sub	sp, #8
9000ba76:	af00      	add	r7, sp, #0
9000ba78:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000ba7a:	687b      	ldr	r3, [r7, #4]
9000ba7c:	2201      	movs	r2, #1
9000ba7e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000ba82:	687b      	ldr	r3, [r7, #4]
9000ba84:	2200      	movs	r2, #0
9000ba86:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000ba8a:	687b      	ldr	r3, [r7, #4]
9000ba8c:	2200      	movs	r2, #0
9000ba8e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000ba92:	6878      	ldr	r0, [r7, #4]
9000ba94:	f7f5 fb7c 	bl	90001190 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000ba98:	687b      	ldr	r3, [r7, #4]
9000ba9a:	791b      	ldrb	r3, [r3, #4]
9000ba9c:	4619      	mov	r1, r3
9000ba9e:	6878      	ldr	r0, [r7, #4]
9000baa0:	f000 f80b 	bl	9000baba <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000baa4:	687b      	ldr	r3, [r7, #4]
9000baa6:	795b      	ldrb	r3, [r3, #5]
9000baa8:	4619      	mov	r1, r3
9000baaa:	6878      	ldr	r0, [r7, #4]
9000baac:	f000 f805 	bl	9000baba <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bab0:	2300      	movs	r3, #0
}
9000bab2:	4618      	mov	r0, r3
9000bab4:	3708      	adds	r7, #8
9000bab6:	46bd      	mov	sp, r7
9000bab8:	bd80      	pop	{r7, pc}

9000baba <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000baba:	b480      	push	{r7}
9000babc:	b083      	sub	sp, #12
9000babe:	af00      	add	r7, sp, #0
9000bac0:	6078      	str	r0, [r7, #4]
9000bac2:	460b      	mov	r3, r1
9000bac4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000bac6:	78fb      	ldrb	r3, [r7, #3]
9000bac8:	2b0f      	cmp	r3, #15
9000baca:	d80f      	bhi.n	9000baec <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000bacc:	78fb      	ldrb	r3, [r7, #3]
9000bace:	687a      	ldr	r2, [r7, #4]
9000bad0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bad4:	009b      	lsls	r3, r3, #2
9000bad6:	4413      	add	r3, r2
9000bad8:	685a      	ldr	r2, [r3, #4]
9000bada:	78fb      	ldrb	r3, [r7, #3]
9000badc:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000bae0:	6879      	ldr	r1, [r7, #4]
9000bae2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bae6:	009b      	lsls	r3, r3, #2
9000bae8:	440b      	add	r3, r1
9000baea:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000baec:	2300      	movs	r3, #0
}
9000baee:	4618      	mov	r0, r3
9000baf0:	370c      	adds	r7, #12
9000baf2:	46bd      	mov	sp, r7
9000baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000baf8:	4770      	bx	lr
	...

9000bafc <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000bafc:	b580      	push	{r7, lr}
9000bafe:	b082      	sub	sp, #8
9000bb00:	af00      	add	r7, sp, #0
9000bb02:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000bb04:	687b      	ldr	r3, [r7, #4]
9000bb06:	681b      	ldr	r3, [r3, #0]
9000bb08:	4a22      	ldr	r2, [pc, #136]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb0a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000bb0c:	687b      	ldr	r3, [r7, #4]
9000bb0e:	685b      	ldr	r3, [r3, #4]
9000bb10:	4a20      	ldr	r2, [pc, #128]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb12:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000bb14:	687b      	ldr	r3, [r7, #4]
9000bb16:	689b      	ldr	r3, [r3, #8]
9000bb18:	4a1e      	ldr	r2, [pc, #120]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb1a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000bb1c:	687b      	ldr	r3, [r7, #4]
9000bb1e:	68db      	ldr	r3, [r3, #12]
9000bb20:	4a1c      	ldr	r2, [pc, #112]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb22:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000bb24:	687b      	ldr	r3, [r7, #4]
9000bb26:	691b      	ldr	r3, [r3, #16]
9000bb28:	4a1a      	ldr	r2, [pc, #104]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb2a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000bb2c:	687b      	ldr	r3, [r7, #4]
9000bb2e:	695b      	ldr	r3, [r3, #20]
9000bb30:	4a18      	ldr	r2, [pc, #96]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb32:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000bb34:	687b      	ldr	r3, [r7, #4]
9000bb36:	699b      	ldr	r3, [r3, #24]
9000bb38:	4a16      	ldr	r2, [pc, #88]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb3a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000bb3c:	687b      	ldr	r3, [r7, #4]
9000bb3e:	69db      	ldr	r3, [r3, #28]
9000bb40:	4a14      	ldr	r2, [pc, #80]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb42:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000bb44:	687b      	ldr	r3, [r7, #4]
9000bb46:	6a1b      	ldr	r3, [r3, #32]
9000bb48:	4a12      	ldr	r2, [pc, #72]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb4a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000bb4c:	687b      	ldr	r3, [r7, #4]
9000bb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bb50:	4a10      	ldr	r2, [pc, #64]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb52:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000bb54:	687b      	ldr	r3, [r7, #4]
9000bb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bb58:	4a0e      	ldr	r2, [pc, #56]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb5a:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000bb5c:	4b0e      	ldr	r3, [pc, #56]	@ (9000bb98 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bb5e:	2200      	movs	r2, #0
9000bb60:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000bb62:	4b0d      	ldr	r3, [pc, #52]	@ (9000bb98 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bb64:	2200      	movs	r2, #0
9000bb66:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000bb68:	4b0a      	ldr	r3, [pc, #40]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb6a:	69db      	ldr	r3, [r3, #28]
9000bb6c:	4a0b      	ldr	r2, [pc, #44]	@ (9000bb9c <UTIL_LCD_SetFuncDriver+0xa0>)
9000bb6e:	4611      	mov	r1, r2
9000bb70:	2000      	movs	r0, #0
9000bb72:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000bb74:	4b07      	ldr	r3, [pc, #28]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb76:	6a1b      	ldr	r3, [r3, #32]
9000bb78:	4a09      	ldr	r2, [pc, #36]	@ (9000bba0 <UTIL_LCD_SetFuncDriver+0xa4>)
9000bb7a:	4611      	mov	r1, r2
9000bb7c:	2000      	movs	r0, #0
9000bb7e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000bb80:	4b04      	ldr	r3, [pc, #16]	@ (9000bb94 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bb84:	4a07      	ldr	r2, [pc, #28]	@ (9000bba4 <UTIL_LCD_SetFuncDriver+0xa8>)
9000bb86:	4611      	mov	r1, r2
9000bb88:	2000      	movs	r0, #0
9000bb8a:	4798      	blx	r3
}
9000bb8c:	bf00      	nop
9000bb8e:	3708      	adds	r7, #8
9000bb90:	46bd      	mov	sp, r7
9000bb92:	bd80      	pop	{r7, pc}
9000bb94:	20001320 	.word	0x20001320
9000bb98:	200012e0 	.word	0x200012e0
9000bb9c:	200012f4 	.word	0x200012f4
9000bba0:	200012f8 	.word	0x200012f8
9000bba4:	200012fc 	.word	0x200012fc

9000bba8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000bba8:	b580      	push	{r7, lr}
9000bbaa:	b082      	sub	sp, #8
9000bbac:	af00      	add	r7, sp, #0
9000bbae:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000bbb0:	4b0a      	ldr	r3, [pc, #40]	@ (9000bbdc <UTIL_LCD_SetLayer+0x34>)
9000bbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bbb4:	2b00      	cmp	r3, #0
9000bbb6:	d00c      	beq.n	9000bbd2 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000bbb8:	4b08      	ldr	r3, [pc, #32]	@ (9000bbdc <UTIL_LCD_SetLayer+0x34>)
9000bbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bbbc:	4a08      	ldr	r2, [pc, #32]	@ (9000bbe0 <UTIL_LCD_SetLayer+0x38>)
9000bbbe:	6912      	ldr	r2, [r2, #16]
9000bbc0:	6879      	ldr	r1, [r7, #4]
9000bbc2:	4610      	mov	r0, r2
9000bbc4:	4798      	blx	r3
9000bbc6:	4603      	mov	r3, r0
9000bbc8:	2b00      	cmp	r3, #0
9000bbca:	d102      	bne.n	9000bbd2 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000bbcc:	4a04      	ldr	r2, [pc, #16]	@ (9000bbe0 <UTIL_LCD_SetLayer+0x38>)
9000bbce:	687b      	ldr	r3, [r7, #4]
9000bbd0:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000bbd2:	bf00      	nop
9000bbd4:	3708      	adds	r7, #8
9000bbd6:	46bd      	mov	sp, r7
9000bbd8:	bd80      	pop	{r7, pc}
9000bbda:	bf00      	nop
9000bbdc:	20001320 	.word	0x20001320
9000bbe0:	200012e0 	.word	0x200012e0

9000bbe4 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000bbe4:	b480      	push	{r7}
9000bbe6:	b083      	sub	sp, #12
9000bbe8:	af00      	add	r7, sp, #0
9000bbea:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000bbec:	4b06      	ldr	r3, [pc, #24]	@ (9000bc08 <UTIL_LCD_SetTextColor+0x24>)
9000bbee:	68db      	ldr	r3, [r3, #12]
9000bbf0:	4a05      	ldr	r2, [pc, #20]	@ (9000bc08 <UTIL_LCD_SetTextColor+0x24>)
9000bbf2:	015b      	lsls	r3, r3, #5
9000bbf4:	4413      	add	r3, r2
9000bbf6:	687a      	ldr	r2, [r7, #4]
9000bbf8:	601a      	str	r2, [r3, #0]
}
9000bbfa:	bf00      	nop
9000bbfc:	370c      	adds	r7, #12
9000bbfe:	46bd      	mov	sp, r7
9000bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc04:	4770      	bx	lr
9000bc06:	bf00      	nop
9000bc08:	200012e0 	.word	0x200012e0

9000bc0c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000bc0c:	b480      	push	{r7}
9000bc0e:	b083      	sub	sp, #12
9000bc10:	af00      	add	r7, sp, #0
9000bc12:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000bc14:	4b06      	ldr	r3, [pc, #24]	@ (9000bc30 <UTIL_LCD_SetBackColor+0x24>)
9000bc16:	68db      	ldr	r3, [r3, #12]
9000bc18:	4a05      	ldr	r2, [pc, #20]	@ (9000bc30 <UTIL_LCD_SetBackColor+0x24>)
9000bc1a:	015b      	lsls	r3, r3, #5
9000bc1c:	4413      	add	r3, r2
9000bc1e:	3304      	adds	r3, #4
9000bc20:	687a      	ldr	r2, [r7, #4]
9000bc22:	601a      	str	r2, [r3, #0]
}
9000bc24:	bf00      	nop
9000bc26:	370c      	adds	r7, #12
9000bc28:	46bd      	mov	sp, r7
9000bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc2e:	4770      	bx	lr
9000bc30:	200012e0 	.word	0x200012e0

9000bc34 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000bc34:	b480      	push	{r7}
9000bc36:	b083      	sub	sp, #12
9000bc38:	af00      	add	r7, sp, #0
9000bc3a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000bc3c:	4b06      	ldr	r3, [pc, #24]	@ (9000bc58 <UTIL_LCD_SetFont+0x24>)
9000bc3e:	68db      	ldr	r3, [r3, #12]
9000bc40:	4a05      	ldr	r2, [pc, #20]	@ (9000bc58 <UTIL_LCD_SetFont+0x24>)
9000bc42:	015b      	lsls	r3, r3, #5
9000bc44:	4413      	add	r3, r2
9000bc46:	3308      	adds	r3, #8
9000bc48:	687a      	ldr	r2, [r7, #4]
9000bc4a:	601a      	str	r2, [r3, #0]
}
9000bc4c:	bf00      	nop
9000bc4e:	370c      	adds	r7, #12
9000bc50:	46bd      	mov	sp, r7
9000bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc56:	4770      	bx	lr
9000bc58:	200012e0 	.word	0x200012e0

9000bc5c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000bc5c:	b590      	push	{r4, r7, lr}
9000bc5e:	b087      	sub	sp, #28
9000bc60:	af02      	add	r7, sp, #8
9000bc62:	60f8      	str	r0, [r7, #12]
9000bc64:	60b9      	str	r1, [r7, #8]
9000bc66:	607a      	str	r2, [r7, #4]
9000bc68:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000bc6a:	4b08      	ldr	r3, [pc, #32]	@ (9000bc8c <UTIL_LCD_FillRGBRect+0x30>)
9000bc6c:	685c      	ldr	r4, [r3, #4]
9000bc6e:	4b08      	ldr	r3, [pc, #32]	@ (9000bc90 <UTIL_LCD_FillRGBRect+0x34>)
9000bc70:	6918      	ldr	r0, [r3, #16]
9000bc72:	6a3b      	ldr	r3, [r7, #32]
9000bc74:	9301      	str	r3, [sp, #4]
9000bc76:	683b      	ldr	r3, [r7, #0]
9000bc78:	9300      	str	r3, [sp, #0]
9000bc7a:	687b      	ldr	r3, [r7, #4]
9000bc7c:	68ba      	ldr	r2, [r7, #8]
9000bc7e:	68f9      	ldr	r1, [r7, #12]
9000bc80:	47a0      	blx	r4
}
9000bc82:	bf00      	nop
9000bc84:	3714      	adds	r7, #20
9000bc86:	46bd      	mov	sp, r7
9000bc88:	bd90      	pop	{r4, r7, pc}
9000bc8a:	bf00      	nop
9000bc8c:	20001320 	.word	0x20001320
9000bc90:	200012e0 	.word	0x200012e0

9000bc94 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000bc94:	b580      	push	{r7, lr}
9000bc96:	b084      	sub	sp, #16
9000bc98:	af02      	add	r7, sp, #8
9000bc9a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000bc9c:	4b07      	ldr	r3, [pc, #28]	@ (9000bcbc <UTIL_LCD_Clear+0x28>)
9000bc9e:	695a      	ldr	r2, [r3, #20]
9000bca0:	4b06      	ldr	r3, [pc, #24]	@ (9000bcbc <UTIL_LCD_Clear+0x28>)
9000bca2:	6999      	ldr	r1, [r3, #24]
9000bca4:	687b      	ldr	r3, [r7, #4]
9000bca6:	9300      	str	r3, [sp, #0]
9000bca8:	460b      	mov	r3, r1
9000bcaa:	2100      	movs	r1, #0
9000bcac:	2000      	movs	r0, #0
9000bcae:	f000 f8eb 	bl	9000be88 <UTIL_LCD_FillRect>
}
9000bcb2:	bf00      	nop
9000bcb4:	3708      	adds	r7, #8
9000bcb6:	46bd      	mov	sp, r7
9000bcb8:	bd80      	pop	{r7, pc}
9000bcba:	bf00      	nop
9000bcbc:	200012e0 	.word	0x200012e0

9000bcc0 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000bcc0:	b580      	push	{r7, lr}
9000bcc2:	b084      	sub	sp, #16
9000bcc4:	af00      	add	r7, sp, #0
9000bcc6:	60f8      	str	r0, [r7, #12]
9000bcc8:	60b9      	str	r1, [r7, #8]
9000bcca:	4613      	mov	r3, r2
9000bccc:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bcce:	4b16      	ldr	r3, [pc, #88]	@ (9000bd28 <UTIL_LCD_DisplayChar+0x68>)
9000bcd0:	68db      	ldr	r3, [r3, #12]
9000bcd2:	4a15      	ldr	r2, [pc, #84]	@ (9000bd28 <UTIL_LCD_DisplayChar+0x68>)
9000bcd4:	015b      	lsls	r3, r3, #5
9000bcd6:	4413      	add	r3, r2
9000bcd8:	3308      	adds	r3, #8
9000bcda:	681b      	ldr	r3, [r3, #0]
9000bcdc:	681a      	ldr	r2, [r3, #0]
9000bcde:	79fb      	ldrb	r3, [r7, #7]
9000bce0:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bce2:	4911      	ldr	r1, [pc, #68]	@ (9000bd28 <UTIL_LCD_DisplayChar+0x68>)
9000bce4:	68c9      	ldr	r1, [r1, #12]
9000bce6:	4810      	ldr	r0, [pc, #64]	@ (9000bd28 <UTIL_LCD_DisplayChar+0x68>)
9000bce8:	0149      	lsls	r1, r1, #5
9000bcea:	4401      	add	r1, r0
9000bcec:	3108      	adds	r1, #8
9000bcee:	6809      	ldr	r1, [r1, #0]
9000bcf0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bcf2:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bcf6:	4b0c      	ldr	r3, [pc, #48]	@ (9000bd28 <UTIL_LCD_DisplayChar+0x68>)
9000bcf8:	68db      	ldr	r3, [r3, #12]
9000bcfa:	480b      	ldr	r0, [pc, #44]	@ (9000bd28 <UTIL_LCD_DisplayChar+0x68>)
9000bcfc:	015b      	lsls	r3, r3, #5
9000bcfe:	4403      	add	r3, r0
9000bd00:	3308      	adds	r3, #8
9000bd02:	681b      	ldr	r3, [r3, #0]
9000bd04:	889b      	ldrh	r3, [r3, #4]
9000bd06:	3307      	adds	r3, #7
9000bd08:	2b00      	cmp	r3, #0
9000bd0a:	da00      	bge.n	9000bd0e <UTIL_LCD_DisplayChar+0x4e>
9000bd0c:	3307      	adds	r3, #7
9000bd0e:	10db      	asrs	r3, r3, #3
9000bd10:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bd14:	4413      	add	r3, r2
9000bd16:	461a      	mov	r2, r3
9000bd18:	68b9      	ldr	r1, [r7, #8]
9000bd1a:	68f8      	ldr	r0, [r7, #12]
9000bd1c:	f000 f8ee 	bl	9000befc <DrawChar>
}
9000bd20:	bf00      	nop
9000bd22:	3710      	adds	r7, #16
9000bd24:	46bd      	mov	sp, r7
9000bd26:	bd80      	pop	{r7, pc}
9000bd28:	200012e0 	.word	0x200012e0

9000bd2c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000bd2c:	b580      	push	{r7, lr}
9000bd2e:	b08a      	sub	sp, #40	@ 0x28
9000bd30:	af00      	add	r7, sp, #0
9000bd32:	60f8      	str	r0, [r7, #12]
9000bd34:	60b9      	str	r1, [r7, #8]
9000bd36:	607a      	str	r2, [r7, #4]
9000bd38:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000bd3a:	2301      	movs	r3, #1
9000bd3c:	627b      	str	r3, [r7, #36]	@ 0x24
9000bd3e:	2300      	movs	r3, #0
9000bd40:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000bd42:	2300      	movs	r3, #0
9000bd44:	61fb      	str	r3, [r7, #28]
9000bd46:	2300      	movs	r3, #0
9000bd48:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000bd4a:	687b      	ldr	r3, [r7, #4]
9000bd4c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000bd4e:	e002      	b.n	9000bd56 <UTIL_LCD_DisplayStringAt+0x2a>
9000bd50:	69fb      	ldr	r3, [r7, #28]
9000bd52:	3301      	adds	r3, #1
9000bd54:	61fb      	str	r3, [r7, #28]
9000bd56:	69bb      	ldr	r3, [r7, #24]
9000bd58:	1c5a      	adds	r2, r3, #1
9000bd5a:	61ba      	str	r2, [r7, #24]
9000bd5c:	781b      	ldrb	r3, [r3, #0]
9000bd5e:	2b00      	cmp	r3, #0
9000bd60:	d1f6      	bne.n	9000bd50 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bd62:	4b48      	ldr	r3, [pc, #288]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd64:	695b      	ldr	r3, [r3, #20]
9000bd66:	4a47      	ldr	r2, [pc, #284]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd68:	68d2      	ldr	r2, [r2, #12]
9000bd6a:	4946      	ldr	r1, [pc, #280]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd6c:	0152      	lsls	r2, r2, #5
9000bd6e:	440a      	add	r2, r1
9000bd70:	3208      	adds	r2, #8
9000bd72:	6812      	ldr	r2, [r2, #0]
9000bd74:	8892      	ldrh	r2, [r2, #4]
9000bd76:	fbb3 f3f2 	udiv	r3, r3, r2
9000bd7a:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000bd7c:	78fb      	ldrb	r3, [r7, #3]
9000bd7e:	2b03      	cmp	r3, #3
9000bd80:	d018      	beq.n	9000bdb4 <UTIL_LCD_DisplayStringAt+0x88>
9000bd82:	2b03      	cmp	r3, #3
9000bd84:	dc2a      	bgt.n	9000bddc <UTIL_LCD_DisplayStringAt+0xb0>
9000bd86:	2b01      	cmp	r3, #1
9000bd88:	d002      	beq.n	9000bd90 <UTIL_LCD_DisplayStringAt+0x64>
9000bd8a:	2b02      	cmp	r3, #2
9000bd8c:	d015      	beq.n	9000bdba <UTIL_LCD_DisplayStringAt+0x8e>
9000bd8e:	e025      	b.n	9000bddc <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000bd90:	697a      	ldr	r2, [r7, #20]
9000bd92:	69fb      	ldr	r3, [r7, #28]
9000bd94:	1ad3      	subs	r3, r2, r3
9000bd96:	4a3b      	ldr	r2, [pc, #236]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd98:	68d2      	ldr	r2, [r2, #12]
9000bd9a:	493a      	ldr	r1, [pc, #232]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd9c:	0152      	lsls	r2, r2, #5
9000bd9e:	440a      	add	r2, r1
9000bda0:	3208      	adds	r2, #8
9000bda2:	6812      	ldr	r2, [r2, #0]
9000bda4:	8892      	ldrh	r2, [r2, #4]
9000bda6:	fb02 f303 	mul.w	r3, r2, r3
9000bdaa:	085b      	lsrs	r3, r3, #1
9000bdac:	68fa      	ldr	r2, [r7, #12]
9000bdae:	4413      	add	r3, r2
9000bdb0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bdb2:	e016      	b.n	9000bde2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000bdb4:	68fb      	ldr	r3, [r7, #12]
9000bdb6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bdb8:	e013      	b.n	9000bde2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bdba:	697a      	ldr	r2, [r7, #20]
9000bdbc:	69fb      	ldr	r3, [r7, #28]
9000bdbe:	1ad3      	subs	r3, r2, r3
9000bdc0:	4a30      	ldr	r2, [pc, #192]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdc2:	68d2      	ldr	r2, [r2, #12]
9000bdc4:	492f      	ldr	r1, [pc, #188]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdc6:	0152      	lsls	r2, r2, #5
9000bdc8:	440a      	add	r2, r1
9000bdca:	3208      	adds	r2, #8
9000bdcc:	6812      	ldr	r2, [r2, #0]
9000bdce:	8892      	ldrh	r2, [r2, #4]
9000bdd0:	fb03 f202 	mul.w	r2, r3, r2
9000bdd4:	68fb      	ldr	r3, [r7, #12]
9000bdd6:	1ad3      	subs	r3, r2, r3
9000bdd8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bdda:	e002      	b.n	9000bde2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000bddc:	68fb      	ldr	r3, [r7, #12]
9000bdde:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bde0:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000bde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bde4:	2b00      	cmp	r3, #0
9000bde6:	d003      	beq.n	9000bdf0 <UTIL_LCD_DisplayStringAt+0xc4>
9000bde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bdea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000bdee:	d31b      	bcc.n	9000be28 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000bdf0:	2301      	movs	r3, #1
9000bdf2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000bdf4:	e018      	b.n	9000be28 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000bdf6:	687b      	ldr	r3, [r7, #4]
9000bdf8:	781b      	ldrb	r3, [r3, #0]
9000bdfa:	461a      	mov	r2, r3
9000bdfc:	68b9      	ldr	r1, [r7, #8]
9000bdfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000be00:	f7ff ff5e 	bl	9000bcc0 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000be04:	4b1f      	ldr	r3, [pc, #124]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000be06:	68db      	ldr	r3, [r3, #12]
9000be08:	4a1e      	ldr	r2, [pc, #120]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000be0a:	015b      	lsls	r3, r3, #5
9000be0c:	4413      	add	r3, r2
9000be0e:	3308      	adds	r3, #8
9000be10:	681b      	ldr	r3, [r3, #0]
9000be12:	889b      	ldrh	r3, [r3, #4]
9000be14:	461a      	mov	r2, r3
9000be16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000be18:	4413      	add	r3, r2
9000be1a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000be1c:	687b      	ldr	r3, [r7, #4]
9000be1e:	3301      	adds	r3, #1
9000be20:	607b      	str	r3, [r7, #4]
    i++;
9000be22:	6a3b      	ldr	r3, [r7, #32]
9000be24:	3301      	adds	r3, #1
9000be26:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000be28:	687b      	ldr	r3, [r7, #4]
9000be2a:	781b      	ldrb	r3, [r3, #0]
9000be2c:	2b00      	cmp	r3, #0
9000be2e:	bf14      	ite	ne
9000be30:	2301      	movne	r3, #1
9000be32:	2300      	moveq	r3, #0
9000be34:	b2da      	uxtb	r2, r3
9000be36:	4b13      	ldr	r3, [pc, #76]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000be38:	6959      	ldr	r1, [r3, #20]
9000be3a:	4b12      	ldr	r3, [pc, #72]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000be3c:	68db      	ldr	r3, [r3, #12]
9000be3e:	4811      	ldr	r0, [pc, #68]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000be40:	015b      	lsls	r3, r3, #5
9000be42:	4403      	add	r3, r0
9000be44:	3308      	adds	r3, #8
9000be46:	681b      	ldr	r3, [r3, #0]
9000be48:	889b      	ldrh	r3, [r3, #4]
9000be4a:	4618      	mov	r0, r3
9000be4c:	6a3b      	ldr	r3, [r7, #32]
9000be4e:	fb00 f303 	mul.w	r3, r0, r3
9000be52:	1acb      	subs	r3, r1, r3
9000be54:	b29b      	uxth	r3, r3
9000be56:	490b      	ldr	r1, [pc, #44]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000be58:	68c9      	ldr	r1, [r1, #12]
9000be5a:	480a      	ldr	r0, [pc, #40]	@ (9000be84 <UTIL_LCD_DisplayStringAt+0x158>)
9000be5c:	0149      	lsls	r1, r1, #5
9000be5e:	4401      	add	r1, r0
9000be60:	3108      	adds	r1, #8
9000be62:	6809      	ldr	r1, [r1, #0]
9000be64:	8889      	ldrh	r1, [r1, #4]
9000be66:	428b      	cmp	r3, r1
9000be68:	bf2c      	ite	cs
9000be6a:	2301      	movcs	r3, #1
9000be6c:	2300      	movcc	r3, #0
9000be6e:	b2db      	uxtb	r3, r3
9000be70:	4013      	ands	r3, r2
9000be72:	b2db      	uxtb	r3, r3
9000be74:	2b00      	cmp	r3, #0
9000be76:	d1be      	bne.n	9000bdf6 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000be78:	bf00      	nop
9000be7a:	bf00      	nop
9000be7c:	3728      	adds	r7, #40	@ 0x28
9000be7e:	46bd      	mov	sp, r7
9000be80:	bd80      	pop	{r7, pc}
9000be82:	bf00      	nop
9000be84:	200012e0 	.word	0x200012e0

9000be88 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000be88:	b590      	push	{r4, r7, lr}
9000be8a:	b087      	sub	sp, #28
9000be8c:	af02      	add	r7, sp, #8
9000be8e:	60f8      	str	r0, [r7, #12]
9000be90:	60b9      	str	r1, [r7, #8]
9000be92:	607a      	str	r2, [r7, #4]
9000be94:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000be96:	4b17      	ldr	r3, [pc, #92]	@ (9000bef4 <UTIL_LCD_FillRect+0x6c>)
9000be98:	69db      	ldr	r3, [r3, #28]
9000be9a:	2b02      	cmp	r3, #2
9000be9c:	d11a      	bne.n	9000bed4 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000be9e:	4b16      	ldr	r3, [pc, #88]	@ (9000bef8 <UTIL_LCD_FillRect+0x70>)
9000bea0:	691c      	ldr	r4, [r3, #16]
9000bea2:	4b14      	ldr	r3, [pc, #80]	@ (9000bef4 <UTIL_LCD_FillRect+0x6c>)
9000bea4:	6918      	ldr	r0, [r3, #16]
9000bea6:	6a3b      	ldr	r3, [r7, #32]
9000bea8:	08db      	lsrs	r3, r3, #3
9000beaa:	f003 021f 	and.w	r2, r3, #31
9000beae:	6a3b      	ldr	r3, [r7, #32]
9000beb0:	0a9b      	lsrs	r3, r3, #10
9000beb2:	015b      	lsls	r3, r3, #5
9000beb4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000beb8:	431a      	orrs	r2, r3
9000beba:	6a3b      	ldr	r3, [r7, #32]
9000bebc:	0cdb      	lsrs	r3, r3, #19
9000bebe:	02db      	lsls	r3, r3, #11
9000bec0:	b29b      	uxth	r3, r3
9000bec2:	4313      	orrs	r3, r2
9000bec4:	9301      	str	r3, [sp, #4]
9000bec6:	683b      	ldr	r3, [r7, #0]
9000bec8:	9300      	str	r3, [sp, #0]
9000beca:	687b      	ldr	r3, [r7, #4]
9000becc:	68ba      	ldr	r2, [r7, #8]
9000bece:	68f9      	ldr	r1, [r7, #12]
9000bed0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000bed2:	e00b      	b.n	9000beec <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000bed4:	4b08      	ldr	r3, [pc, #32]	@ (9000bef8 <UTIL_LCD_FillRect+0x70>)
9000bed6:	691c      	ldr	r4, [r3, #16]
9000bed8:	4b06      	ldr	r3, [pc, #24]	@ (9000bef4 <UTIL_LCD_FillRect+0x6c>)
9000beda:	6918      	ldr	r0, [r3, #16]
9000bedc:	6a3b      	ldr	r3, [r7, #32]
9000bede:	9301      	str	r3, [sp, #4]
9000bee0:	683b      	ldr	r3, [r7, #0]
9000bee2:	9300      	str	r3, [sp, #0]
9000bee4:	687b      	ldr	r3, [r7, #4]
9000bee6:	68ba      	ldr	r2, [r7, #8]
9000bee8:	68f9      	ldr	r1, [r7, #12]
9000beea:	47a0      	blx	r4
}
9000beec:	bf00      	nop
9000beee:	3714      	adds	r7, #20
9000bef0:	46bd      	mov	sp, r7
9000bef2:	bd90      	pop	{r4, r7, pc}
9000bef4:	200012e0 	.word	0x200012e0
9000bef8:	20001320 	.word	0x20001320

9000befc <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000befc:	b580      	push	{r7, lr}
9000befe:	b0b2      	sub	sp, #200	@ 0xc8
9000bf00:	af02      	add	r7, sp, #8
9000bf02:	60f8      	str	r0, [r7, #12]
9000bf04:	60b9      	str	r1, [r7, #8]
9000bf06:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000bf08:	2300      	movs	r3, #0
9000bf0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bf0e:	2300      	movs	r3, #0
9000bf10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bf14:	4ba5      	ldr	r3, [pc, #660]	@ (9000c1ac <DrawChar+0x2b0>)
9000bf16:	68db      	ldr	r3, [r3, #12]
9000bf18:	4aa4      	ldr	r2, [pc, #656]	@ (9000c1ac <DrawChar+0x2b0>)
9000bf1a:	015b      	lsls	r3, r3, #5
9000bf1c:	4413      	add	r3, r2
9000bf1e:	3308      	adds	r3, #8
9000bf20:	681b      	ldr	r3, [r3, #0]
9000bf22:	88db      	ldrh	r3, [r3, #6]
9000bf24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bf28:	4ba0      	ldr	r3, [pc, #640]	@ (9000c1ac <DrawChar+0x2b0>)
9000bf2a:	68db      	ldr	r3, [r3, #12]
9000bf2c:	4a9f      	ldr	r2, [pc, #636]	@ (9000c1ac <DrawChar+0x2b0>)
9000bf2e:	015b      	lsls	r3, r3, #5
9000bf30:	4413      	add	r3, r2
9000bf32:	3308      	adds	r3, #8
9000bf34:	681b      	ldr	r3, [r3, #0]
9000bf36:	889b      	ldrh	r3, [r3, #4]
9000bf38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000bf3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf40:	3307      	adds	r3, #7
9000bf42:	f023 0207 	bic.w	r2, r3, #7
9000bf46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf4a:	1ad3      	subs	r3, r2, r3
9000bf4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000bf50:	2300      	movs	r3, #0
9000bf52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bf56:	e11c      	b.n	9000c192 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000bf58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf5c:	3307      	adds	r3, #7
9000bf5e:	08db      	lsrs	r3, r3, #3
9000bf60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bf64:	fb02 f303 	mul.w	r3, r2, r3
9000bf68:	687a      	ldr	r2, [r7, #4]
9000bf6a:	4413      	add	r3, r2
9000bf6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000bf70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf74:	3307      	adds	r3, #7
9000bf76:	08db      	lsrs	r3, r3, #3
9000bf78:	2b01      	cmp	r3, #1
9000bf7a:	d002      	beq.n	9000bf82 <DrawChar+0x86>
9000bf7c:	2b02      	cmp	r3, #2
9000bf7e:	d006      	beq.n	9000bf8e <DrawChar+0x92>
9000bf80:	e011      	b.n	9000bfa6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000bf82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bf86:	781b      	ldrb	r3, [r3, #0]
9000bf88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bf8c:	e01d      	b.n	9000bfca <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000bf8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bf92:	781b      	ldrb	r3, [r3, #0]
9000bf94:	021b      	lsls	r3, r3, #8
9000bf96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bf9a:	3201      	adds	r2, #1
9000bf9c:	7812      	ldrb	r2, [r2, #0]
9000bf9e:	4313      	orrs	r3, r2
9000bfa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bfa4:	e011      	b.n	9000bfca <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000bfa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bfaa:	781b      	ldrb	r3, [r3, #0]
9000bfac:	041a      	lsls	r2, r3, #16
9000bfae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bfb2:	3301      	adds	r3, #1
9000bfb4:	781b      	ldrb	r3, [r3, #0]
9000bfb6:	021b      	lsls	r3, r3, #8
9000bfb8:	4313      	orrs	r3, r2
9000bfba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bfbe:	3202      	adds	r2, #2
9000bfc0:	7812      	ldrb	r2, [r2, #0]
9000bfc2:	4313      	orrs	r3, r2
9000bfc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bfc8:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bfca:	4b78      	ldr	r3, [pc, #480]	@ (9000c1ac <DrawChar+0x2b0>)
9000bfcc:	68db      	ldr	r3, [r3, #12]
9000bfce:	4a77      	ldr	r2, [pc, #476]	@ (9000c1ac <DrawChar+0x2b0>)
9000bfd0:	015b      	lsls	r3, r3, #5
9000bfd2:	4413      	add	r3, r2
9000bfd4:	331c      	adds	r3, #28
9000bfd6:	681b      	ldr	r3, [r3, #0]
9000bfd8:	2b02      	cmp	r3, #2
9000bfda:	f040 808c 	bne.w	9000c0f6 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000bfde:	2300      	movs	r3, #0
9000bfe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bfe4:	e074      	b.n	9000c0d0 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bfe6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bfea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bfee:	1ad2      	subs	r2, r2, r3
9000bff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bff4:	4413      	add	r3, r2
9000bff6:	3b01      	subs	r3, #1
9000bff8:	2201      	movs	r2, #1
9000bffa:	fa02 f303 	lsl.w	r3, r2, r3
9000bffe:	461a      	mov	r2, r3
9000c000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c004:	4013      	ands	r3, r2
9000c006:	2b00      	cmp	r3, #0
9000c008:	d02d      	beq.n	9000c066 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000c00a:	4b68      	ldr	r3, [pc, #416]	@ (9000c1ac <DrawChar+0x2b0>)
9000c00c:	68db      	ldr	r3, [r3, #12]
9000c00e:	4a67      	ldr	r2, [pc, #412]	@ (9000c1ac <DrawChar+0x2b0>)
9000c010:	015b      	lsls	r3, r3, #5
9000c012:	4413      	add	r3, r2
9000c014:	681b      	ldr	r3, [r3, #0]
9000c016:	08db      	lsrs	r3, r3, #3
9000c018:	b29b      	uxth	r3, r3
9000c01a:	f003 031f 	and.w	r3, r3, #31
9000c01e:	b29a      	uxth	r2, r3
9000c020:	4b62      	ldr	r3, [pc, #392]	@ (9000c1ac <DrawChar+0x2b0>)
9000c022:	68db      	ldr	r3, [r3, #12]
9000c024:	4961      	ldr	r1, [pc, #388]	@ (9000c1ac <DrawChar+0x2b0>)
9000c026:	015b      	lsls	r3, r3, #5
9000c028:	440b      	add	r3, r1
9000c02a:	681b      	ldr	r3, [r3, #0]
9000c02c:	0a9b      	lsrs	r3, r3, #10
9000c02e:	b29b      	uxth	r3, r3
9000c030:	015b      	lsls	r3, r3, #5
9000c032:	b29b      	uxth	r3, r3
9000c034:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c038:	b29b      	uxth	r3, r3
9000c03a:	4313      	orrs	r3, r2
9000c03c:	b29a      	uxth	r2, r3
9000c03e:	4b5b      	ldr	r3, [pc, #364]	@ (9000c1ac <DrawChar+0x2b0>)
9000c040:	68db      	ldr	r3, [r3, #12]
9000c042:	495a      	ldr	r1, [pc, #360]	@ (9000c1ac <DrawChar+0x2b0>)
9000c044:	015b      	lsls	r3, r3, #5
9000c046:	440b      	add	r3, r1
9000c048:	681b      	ldr	r3, [r3, #0]
9000c04a:	0cdb      	lsrs	r3, r3, #19
9000c04c:	b29b      	uxth	r3, r3
9000c04e:	02db      	lsls	r3, r3, #11
9000c050:	b29b      	uxth	r3, r3
9000c052:	4313      	orrs	r3, r2
9000c054:	b29a      	uxth	r2, r3
9000c056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c05a:	005b      	lsls	r3, r3, #1
9000c05c:	33c0      	adds	r3, #192	@ 0xc0
9000c05e:	443b      	add	r3, r7
9000c060:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000c064:	e02f      	b.n	9000c0c6 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000c066:	4b51      	ldr	r3, [pc, #324]	@ (9000c1ac <DrawChar+0x2b0>)
9000c068:	68db      	ldr	r3, [r3, #12]
9000c06a:	4a50      	ldr	r2, [pc, #320]	@ (9000c1ac <DrawChar+0x2b0>)
9000c06c:	015b      	lsls	r3, r3, #5
9000c06e:	4413      	add	r3, r2
9000c070:	3304      	adds	r3, #4
9000c072:	681b      	ldr	r3, [r3, #0]
9000c074:	08db      	lsrs	r3, r3, #3
9000c076:	b29b      	uxth	r3, r3
9000c078:	f003 031f 	and.w	r3, r3, #31
9000c07c:	b29a      	uxth	r2, r3
9000c07e:	4b4b      	ldr	r3, [pc, #300]	@ (9000c1ac <DrawChar+0x2b0>)
9000c080:	68db      	ldr	r3, [r3, #12]
9000c082:	494a      	ldr	r1, [pc, #296]	@ (9000c1ac <DrawChar+0x2b0>)
9000c084:	015b      	lsls	r3, r3, #5
9000c086:	440b      	add	r3, r1
9000c088:	3304      	adds	r3, #4
9000c08a:	681b      	ldr	r3, [r3, #0]
9000c08c:	0a9b      	lsrs	r3, r3, #10
9000c08e:	b29b      	uxth	r3, r3
9000c090:	015b      	lsls	r3, r3, #5
9000c092:	b29b      	uxth	r3, r3
9000c094:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c098:	b29b      	uxth	r3, r3
9000c09a:	4313      	orrs	r3, r2
9000c09c:	b29a      	uxth	r2, r3
9000c09e:	4b43      	ldr	r3, [pc, #268]	@ (9000c1ac <DrawChar+0x2b0>)
9000c0a0:	68db      	ldr	r3, [r3, #12]
9000c0a2:	4942      	ldr	r1, [pc, #264]	@ (9000c1ac <DrawChar+0x2b0>)
9000c0a4:	015b      	lsls	r3, r3, #5
9000c0a6:	440b      	add	r3, r1
9000c0a8:	3304      	adds	r3, #4
9000c0aa:	681b      	ldr	r3, [r3, #0]
9000c0ac:	0cdb      	lsrs	r3, r3, #19
9000c0ae:	b29b      	uxth	r3, r3
9000c0b0:	02db      	lsls	r3, r3, #11
9000c0b2:	b29b      	uxth	r3, r3
9000c0b4:	4313      	orrs	r3, r2
9000c0b6:	b29a      	uxth	r2, r3
9000c0b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0bc:	005b      	lsls	r3, r3, #1
9000c0be:	33c0      	adds	r3, #192	@ 0xc0
9000c0c0:	443b      	add	r3, r7
9000c0c2:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000c0c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0ca:	3301      	adds	r3, #1
9000c0cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c0d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c0d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0d8:	429a      	cmp	r2, r3
9000c0da:	d384      	bcc.n	9000bfe6 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000c0dc:	68b9      	ldr	r1, [r7, #8]
9000c0de:	1c4b      	adds	r3, r1, #1
9000c0e0:	60bb      	str	r3, [r7, #8]
9000c0e2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000c0e6:	2301      	movs	r3, #1
9000c0e8:	9300      	str	r3, [sp, #0]
9000c0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0ee:	68f8      	ldr	r0, [r7, #12]
9000c0f0:	f7ff fdb4 	bl	9000bc5c <UTIL_LCD_FillRGBRect>
9000c0f4:	e048      	b.n	9000c188 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000c0f6:	2300      	movs	r3, #0
9000c0f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c0fc:	e032      	b.n	9000c164 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c0fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c106:	1ad2      	subs	r2, r2, r3
9000c108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c10c:	4413      	add	r3, r2
9000c10e:	3b01      	subs	r3, #1
9000c110:	2201      	movs	r2, #1
9000c112:	fa02 f303 	lsl.w	r3, r2, r3
9000c116:	461a      	mov	r2, r3
9000c118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c11c:	4013      	ands	r3, r2
9000c11e:	2b00      	cmp	r3, #0
9000c120:	d00d      	beq.n	9000c13e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000c122:	4b22      	ldr	r3, [pc, #136]	@ (9000c1ac <DrawChar+0x2b0>)
9000c124:	68db      	ldr	r3, [r3, #12]
9000c126:	4a21      	ldr	r2, [pc, #132]	@ (9000c1ac <DrawChar+0x2b0>)
9000c128:	015b      	lsls	r3, r3, #5
9000c12a:	4413      	add	r3, r2
9000c12c:	681a      	ldr	r2, [r3, #0]
9000c12e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c132:	009b      	lsls	r3, r3, #2
9000c134:	33c0      	adds	r3, #192	@ 0xc0
9000c136:	443b      	add	r3, r7
9000c138:	f843 2cac 	str.w	r2, [r3, #-172]
9000c13c:	e00d      	b.n	9000c15a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000c13e:	4b1b      	ldr	r3, [pc, #108]	@ (9000c1ac <DrawChar+0x2b0>)
9000c140:	68db      	ldr	r3, [r3, #12]
9000c142:	4a1a      	ldr	r2, [pc, #104]	@ (9000c1ac <DrawChar+0x2b0>)
9000c144:	015b      	lsls	r3, r3, #5
9000c146:	4413      	add	r3, r2
9000c148:	3304      	adds	r3, #4
9000c14a:	681a      	ldr	r2, [r3, #0]
9000c14c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c150:	009b      	lsls	r3, r3, #2
9000c152:	33c0      	adds	r3, #192	@ 0xc0
9000c154:	443b      	add	r3, r7
9000c156:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000c15a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c15e:	3301      	adds	r3, #1
9000c160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c164:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c16c:	429a      	cmp	r2, r3
9000c16e:	d3c6      	bcc.n	9000c0fe <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000c170:	68b9      	ldr	r1, [r7, #8]
9000c172:	1c4b      	adds	r3, r1, #1
9000c174:	60bb      	str	r3, [r7, #8]
9000c176:	f107 0214 	add.w	r2, r7, #20
9000c17a:	2301      	movs	r3, #1
9000c17c:	9300      	str	r3, [sp, #0]
9000c17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c182:	68f8      	ldr	r0, [r7, #12]
9000c184:	f7ff fd6a 	bl	9000bc5c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000c188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000c18c:	3301      	adds	r3, #1
9000c18e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c192:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000c19a:	429a      	cmp	r2, r3
9000c19c:	f4ff aedc 	bcc.w	9000bf58 <DrawChar+0x5c>
    }
  }
}
9000c1a0:	bf00      	nop
9000c1a2:	bf00      	nop
9000c1a4:	37c0      	adds	r7, #192	@ 0xc0
9000c1a6:	46bd      	mov	sp, r7
9000c1a8:	bd80      	pop	{r7, pc}
9000c1aa:	bf00      	nop
9000c1ac:	200012e0 	.word	0x200012e0

9000c1b0 <sbrk_aligned>:
9000c1b0:	b570      	push	{r4, r5, r6, lr}
9000c1b2:	4e0f      	ldr	r6, [pc, #60]	@ (9000c1f0 <sbrk_aligned+0x40>)
9000c1b4:	460c      	mov	r4, r1
9000c1b6:	6831      	ldr	r1, [r6, #0]
9000c1b8:	4605      	mov	r5, r0
9000c1ba:	b911      	cbnz	r1, 9000c1c2 <sbrk_aligned+0x12>
9000c1bc:	f000 fb0e 	bl	9000c7dc <_sbrk_r>
9000c1c0:	6030      	str	r0, [r6, #0]
9000c1c2:	4621      	mov	r1, r4
9000c1c4:	4628      	mov	r0, r5
9000c1c6:	f000 fb09 	bl	9000c7dc <_sbrk_r>
9000c1ca:	1c43      	adds	r3, r0, #1
9000c1cc:	d103      	bne.n	9000c1d6 <sbrk_aligned+0x26>
9000c1ce:	f04f 34ff 	mov.w	r4, #4294967295
9000c1d2:	4620      	mov	r0, r4
9000c1d4:	bd70      	pop	{r4, r5, r6, pc}
9000c1d6:	1cc4      	adds	r4, r0, #3
9000c1d8:	f024 0403 	bic.w	r4, r4, #3
9000c1dc:	42a0      	cmp	r0, r4
9000c1de:	d0f8      	beq.n	9000c1d2 <sbrk_aligned+0x22>
9000c1e0:	1a21      	subs	r1, r4, r0
9000c1e2:	4628      	mov	r0, r5
9000c1e4:	f000 fafa 	bl	9000c7dc <_sbrk_r>
9000c1e8:	3001      	adds	r0, #1
9000c1ea:	d1f2      	bne.n	9000c1d2 <sbrk_aligned+0x22>
9000c1ec:	e7ef      	b.n	9000c1ce <sbrk_aligned+0x1e>
9000c1ee:	bf00      	nop
9000c1f0:	2000134c 	.word	0x2000134c

9000c1f4 <_malloc_r>:
9000c1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c1f8:	1ccd      	adds	r5, r1, #3
9000c1fa:	f025 0503 	bic.w	r5, r5, #3
9000c1fe:	3508      	adds	r5, #8
9000c200:	2d0c      	cmp	r5, #12
9000c202:	bf38      	it	cc
9000c204:	250c      	movcc	r5, #12
9000c206:	2d00      	cmp	r5, #0
9000c208:	4606      	mov	r6, r0
9000c20a:	db01      	blt.n	9000c210 <_malloc_r+0x1c>
9000c20c:	42a9      	cmp	r1, r5
9000c20e:	d904      	bls.n	9000c21a <_malloc_r+0x26>
9000c210:	230c      	movs	r3, #12
9000c212:	6033      	str	r3, [r6, #0]
9000c214:	2000      	movs	r0, #0
9000c216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c21a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000c2f0 <_malloc_r+0xfc>
9000c21e:	f000 f869 	bl	9000c2f4 <__malloc_lock>
9000c222:	f8d8 3000 	ldr.w	r3, [r8]
9000c226:	461c      	mov	r4, r3
9000c228:	bb44      	cbnz	r4, 9000c27c <_malloc_r+0x88>
9000c22a:	4629      	mov	r1, r5
9000c22c:	4630      	mov	r0, r6
9000c22e:	f7ff ffbf 	bl	9000c1b0 <sbrk_aligned>
9000c232:	1c43      	adds	r3, r0, #1
9000c234:	4604      	mov	r4, r0
9000c236:	d158      	bne.n	9000c2ea <_malloc_r+0xf6>
9000c238:	f8d8 4000 	ldr.w	r4, [r8]
9000c23c:	4627      	mov	r7, r4
9000c23e:	2f00      	cmp	r7, #0
9000c240:	d143      	bne.n	9000c2ca <_malloc_r+0xd6>
9000c242:	2c00      	cmp	r4, #0
9000c244:	d04b      	beq.n	9000c2de <_malloc_r+0xea>
9000c246:	6823      	ldr	r3, [r4, #0]
9000c248:	4639      	mov	r1, r7
9000c24a:	4630      	mov	r0, r6
9000c24c:	eb04 0903 	add.w	r9, r4, r3
9000c250:	f000 fac4 	bl	9000c7dc <_sbrk_r>
9000c254:	4581      	cmp	r9, r0
9000c256:	d142      	bne.n	9000c2de <_malloc_r+0xea>
9000c258:	6821      	ldr	r1, [r4, #0]
9000c25a:	1a6d      	subs	r5, r5, r1
9000c25c:	4629      	mov	r1, r5
9000c25e:	4630      	mov	r0, r6
9000c260:	f7ff ffa6 	bl	9000c1b0 <sbrk_aligned>
9000c264:	3001      	adds	r0, #1
9000c266:	d03a      	beq.n	9000c2de <_malloc_r+0xea>
9000c268:	6823      	ldr	r3, [r4, #0]
9000c26a:	442b      	add	r3, r5
9000c26c:	6023      	str	r3, [r4, #0]
9000c26e:	f8d8 3000 	ldr.w	r3, [r8]
9000c272:	685a      	ldr	r2, [r3, #4]
9000c274:	bb62      	cbnz	r2, 9000c2d0 <_malloc_r+0xdc>
9000c276:	f8c8 7000 	str.w	r7, [r8]
9000c27a:	e00f      	b.n	9000c29c <_malloc_r+0xa8>
9000c27c:	6822      	ldr	r2, [r4, #0]
9000c27e:	1b52      	subs	r2, r2, r5
9000c280:	d420      	bmi.n	9000c2c4 <_malloc_r+0xd0>
9000c282:	2a0b      	cmp	r2, #11
9000c284:	d917      	bls.n	9000c2b6 <_malloc_r+0xc2>
9000c286:	1961      	adds	r1, r4, r5
9000c288:	42a3      	cmp	r3, r4
9000c28a:	6025      	str	r5, [r4, #0]
9000c28c:	bf18      	it	ne
9000c28e:	6059      	strne	r1, [r3, #4]
9000c290:	6863      	ldr	r3, [r4, #4]
9000c292:	bf08      	it	eq
9000c294:	f8c8 1000 	streq.w	r1, [r8]
9000c298:	5162      	str	r2, [r4, r5]
9000c29a:	604b      	str	r3, [r1, #4]
9000c29c:	4630      	mov	r0, r6
9000c29e:	f000 f82f 	bl	9000c300 <__malloc_unlock>
9000c2a2:	f104 000b 	add.w	r0, r4, #11
9000c2a6:	1d23      	adds	r3, r4, #4
9000c2a8:	f020 0007 	bic.w	r0, r0, #7
9000c2ac:	1ac2      	subs	r2, r0, r3
9000c2ae:	bf1c      	itt	ne
9000c2b0:	1a1b      	subne	r3, r3, r0
9000c2b2:	50a3      	strne	r3, [r4, r2]
9000c2b4:	e7af      	b.n	9000c216 <_malloc_r+0x22>
9000c2b6:	6862      	ldr	r2, [r4, #4]
9000c2b8:	42a3      	cmp	r3, r4
9000c2ba:	bf0c      	ite	eq
9000c2bc:	f8c8 2000 	streq.w	r2, [r8]
9000c2c0:	605a      	strne	r2, [r3, #4]
9000c2c2:	e7eb      	b.n	9000c29c <_malloc_r+0xa8>
9000c2c4:	4623      	mov	r3, r4
9000c2c6:	6864      	ldr	r4, [r4, #4]
9000c2c8:	e7ae      	b.n	9000c228 <_malloc_r+0x34>
9000c2ca:	463c      	mov	r4, r7
9000c2cc:	687f      	ldr	r7, [r7, #4]
9000c2ce:	e7b6      	b.n	9000c23e <_malloc_r+0x4a>
9000c2d0:	461a      	mov	r2, r3
9000c2d2:	685b      	ldr	r3, [r3, #4]
9000c2d4:	42a3      	cmp	r3, r4
9000c2d6:	d1fb      	bne.n	9000c2d0 <_malloc_r+0xdc>
9000c2d8:	2300      	movs	r3, #0
9000c2da:	6053      	str	r3, [r2, #4]
9000c2dc:	e7de      	b.n	9000c29c <_malloc_r+0xa8>
9000c2de:	230c      	movs	r3, #12
9000c2e0:	6033      	str	r3, [r6, #0]
9000c2e2:	4630      	mov	r0, r6
9000c2e4:	f000 f80c 	bl	9000c300 <__malloc_unlock>
9000c2e8:	e794      	b.n	9000c214 <_malloc_r+0x20>
9000c2ea:	6005      	str	r5, [r0, #0]
9000c2ec:	e7d6      	b.n	9000c29c <_malloc_r+0xa8>
9000c2ee:	bf00      	nop
9000c2f0:	20001350 	.word	0x20001350

9000c2f4 <__malloc_lock>:
9000c2f4:	4801      	ldr	r0, [pc, #4]	@ (9000c2fc <__malloc_lock+0x8>)
9000c2f6:	f000 babe 	b.w	9000c876 <__retarget_lock_acquire_recursive>
9000c2fa:	bf00      	nop
9000c2fc:	20001494 	.word	0x20001494

9000c300 <__malloc_unlock>:
9000c300:	4801      	ldr	r0, [pc, #4]	@ (9000c308 <__malloc_unlock+0x8>)
9000c302:	f000 bab9 	b.w	9000c878 <__retarget_lock_release_recursive>
9000c306:	bf00      	nop
9000c308:	20001494 	.word	0x20001494

9000c30c <std>:
9000c30c:	2300      	movs	r3, #0
9000c30e:	b510      	push	{r4, lr}
9000c310:	4604      	mov	r4, r0
9000c312:	e9c0 3300 	strd	r3, r3, [r0]
9000c316:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000c31a:	6083      	str	r3, [r0, #8]
9000c31c:	8181      	strh	r1, [r0, #12]
9000c31e:	6643      	str	r3, [r0, #100]	@ 0x64
9000c320:	81c2      	strh	r2, [r0, #14]
9000c322:	6183      	str	r3, [r0, #24]
9000c324:	4619      	mov	r1, r3
9000c326:	2208      	movs	r2, #8
9000c328:	305c      	adds	r0, #92	@ 0x5c
9000c32a:	f000 fa1b 	bl	9000c764 <memset>
9000c32e:	4b0d      	ldr	r3, [pc, #52]	@ (9000c364 <std+0x58>)
9000c330:	6263      	str	r3, [r4, #36]	@ 0x24
9000c332:	4b0d      	ldr	r3, [pc, #52]	@ (9000c368 <std+0x5c>)
9000c334:	62a3      	str	r3, [r4, #40]	@ 0x28
9000c336:	4b0d      	ldr	r3, [pc, #52]	@ (9000c36c <std+0x60>)
9000c338:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000c33a:	4b0d      	ldr	r3, [pc, #52]	@ (9000c370 <std+0x64>)
9000c33c:	6323      	str	r3, [r4, #48]	@ 0x30
9000c33e:	4b0d      	ldr	r3, [pc, #52]	@ (9000c374 <std+0x68>)
9000c340:	6224      	str	r4, [r4, #32]
9000c342:	429c      	cmp	r4, r3
9000c344:	d006      	beq.n	9000c354 <std+0x48>
9000c346:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000c34a:	4294      	cmp	r4, r2
9000c34c:	d002      	beq.n	9000c354 <std+0x48>
9000c34e:	33d0      	adds	r3, #208	@ 0xd0
9000c350:	429c      	cmp	r4, r3
9000c352:	d105      	bne.n	9000c360 <std+0x54>
9000c354:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000c358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c35c:	f000 ba8a 	b.w	9000c874 <__retarget_lock_init_recursive>
9000c360:	bd10      	pop	{r4, pc}
9000c362:	bf00      	nop
9000c364:	9000c5b5 	.word	0x9000c5b5
9000c368:	9000c5d7 	.word	0x9000c5d7
9000c36c:	9000c60f 	.word	0x9000c60f
9000c370:	9000c633 	.word	0x9000c633
9000c374:	20001354 	.word	0x20001354

9000c378 <stdio_exit_handler>:
9000c378:	4a02      	ldr	r2, [pc, #8]	@ (9000c384 <stdio_exit_handler+0xc>)
9000c37a:	4903      	ldr	r1, [pc, #12]	@ (9000c388 <stdio_exit_handler+0x10>)
9000c37c:	4803      	ldr	r0, [pc, #12]	@ (9000c38c <stdio_exit_handler+0x14>)
9000c37e:	f000 b869 	b.w	9000c454 <_fwalk_sglue>
9000c382:	bf00      	nop
9000c384:	20000070 	.word	0x20000070
9000c388:	9000d281 	.word	0x9000d281
9000c38c:	20000080 	.word	0x20000080

9000c390 <cleanup_stdio>:
9000c390:	6841      	ldr	r1, [r0, #4]
9000c392:	4b0c      	ldr	r3, [pc, #48]	@ (9000c3c4 <cleanup_stdio+0x34>)
9000c394:	4299      	cmp	r1, r3
9000c396:	b510      	push	{r4, lr}
9000c398:	4604      	mov	r4, r0
9000c39a:	d001      	beq.n	9000c3a0 <cleanup_stdio+0x10>
9000c39c:	f000 ff70 	bl	9000d280 <_fflush_r>
9000c3a0:	68a1      	ldr	r1, [r4, #8]
9000c3a2:	4b09      	ldr	r3, [pc, #36]	@ (9000c3c8 <cleanup_stdio+0x38>)
9000c3a4:	4299      	cmp	r1, r3
9000c3a6:	d002      	beq.n	9000c3ae <cleanup_stdio+0x1e>
9000c3a8:	4620      	mov	r0, r4
9000c3aa:	f000 ff69 	bl	9000d280 <_fflush_r>
9000c3ae:	68e1      	ldr	r1, [r4, #12]
9000c3b0:	4b06      	ldr	r3, [pc, #24]	@ (9000c3cc <cleanup_stdio+0x3c>)
9000c3b2:	4299      	cmp	r1, r3
9000c3b4:	d004      	beq.n	9000c3c0 <cleanup_stdio+0x30>
9000c3b6:	4620      	mov	r0, r4
9000c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c3bc:	f000 bf60 	b.w	9000d280 <_fflush_r>
9000c3c0:	bd10      	pop	{r4, pc}
9000c3c2:	bf00      	nop
9000c3c4:	20001354 	.word	0x20001354
9000c3c8:	200013bc 	.word	0x200013bc
9000c3cc:	20001424 	.word	0x20001424

9000c3d0 <global_stdio_init.part.0>:
9000c3d0:	b510      	push	{r4, lr}
9000c3d2:	4b0b      	ldr	r3, [pc, #44]	@ (9000c400 <global_stdio_init.part.0+0x30>)
9000c3d4:	4c0b      	ldr	r4, [pc, #44]	@ (9000c404 <global_stdio_init.part.0+0x34>)
9000c3d6:	4a0c      	ldr	r2, [pc, #48]	@ (9000c408 <global_stdio_init.part.0+0x38>)
9000c3d8:	601a      	str	r2, [r3, #0]
9000c3da:	4620      	mov	r0, r4
9000c3dc:	2200      	movs	r2, #0
9000c3de:	2104      	movs	r1, #4
9000c3e0:	f7ff ff94 	bl	9000c30c <std>
9000c3e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000c3e8:	2201      	movs	r2, #1
9000c3ea:	2109      	movs	r1, #9
9000c3ec:	f7ff ff8e 	bl	9000c30c <std>
9000c3f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000c3f4:	2202      	movs	r2, #2
9000c3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c3fa:	2112      	movs	r1, #18
9000c3fc:	f7ff bf86 	b.w	9000c30c <std>
9000c400:	2000148c 	.word	0x2000148c
9000c404:	20001354 	.word	0x20001354
9000c408:	9000c379 	.word	0x9000c379

9000c40c <__sfp_lock_acquire>:
9000c40c:	4801      	ldr	r0, [pc, #4]	@ (9000c414 <__sfp_lock_acquire+0x8>)
9000c40e:	f000 ba32 	b.w	9000c876 <__retarget_lock_acquire_recursive>
9000c412:	bf00      	nop
9000c414:	20001495 	.word	0x20001495

9000c418 <__sfp_lock_release>:
9000c418:	4801      	ldr	r0, [pc, #4]	@ (9000c420 <__sfp_lock_release+0x8>)
9000c41a:	f000 ba2d 	b.w	9000c878 <__retarget_lock_release_recursive>
9000c41e:	bf00      	nop
9000c420:	20001495 	.word	0x20001495

9000c424 <__sinit>:
9000c424:	b510      	push	{r4, lr}
9000c426:	4604      	mov	r4, r0
9000c428:	f7ff fff0 	bl	9000c40c <__sfp_lock_acquire>
9000c42c:	6a23      	ldr	r3, [r4, #32]
9000c42e:	b11b      	cbz	r3, 9000c438 <__sinit+0x14>
9000c430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c434:	f7ff bff0 	b.w	9000c418 <__sfp_lock_release>
9000c438:	4b04      	ldr	r3, [pc, #16]	@ (9000c44c <__sinit+0x28>)
9000c43a:	6223      	str	r3, [r4, #32]
9000c43c:	4b04      	ldr	r3, [pc, #16]	@ (9000c450 <__sinit+0x2c>)
9000c43e:	681b      	ldr	r3, [r3, #0]
9000c440:	2b00      	cmp	r3, #0
9000c442:	d1f5      	bne.n	9000c430 <__sinit+0xc>
9000c444:	f7ff ffc4 	bl	9000c3d0 <global_stdio_init.part.0>
9000c448:	e7f2      	b.n	9000c430 <__sinit+0xc>
9000c44a:	bf00      	nop
9000c44c:	9000c391 	.word	0x9000c391
9000c450:	2000148c 	.word	0x2000148c

9000c454 <_fwalk_sglue>:
9000c454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c458:	4607      	mov	r7, r0
9000c45a:	4688      	mov	r8, r1
9000c45c:	4614      	mov	r4, r2
9000c45e:	2600      	movs	r6, #0
9000c460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c464:	f1b9 0901 	subs.w	r9, r9, #1
9000c468:	d505      	bpl.n	9000c476 <_fwalk_sglue+0x22>
9000c46a:	6824      	ldr	r4, [r4, #0]
9000c46c:	2c00      	cmp	r4, #0
9000c46e:	d1f7      	bne.n	9000c460 <_fwalk_sglue+0xc>
9000c470:	4630      	mov	r0, r6
9000c472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c476:	89ab      	ldrh	r3, [r5, #12]
9000c478:	2b01      	cmp	r3, #1
9000c47a:	d907      	bls.n	9000c48c <_fwalk_sglue+0x38>
9000c47c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c480:	3301      	adds	r3, #1
9000c482:	d003      	beq.n	9000c48c <_fwalk_sglue+0x38>
9000c484:	4629      	mov	r1, r5
9000c486:	4638      	mov	r0, r7
9000c488:	47c0      	blx	r8
9000c48a:	4306      	orrs	r6, r0
9000c48c:	3568      	adds	r5, #104	@ 0x68
9000c48e:	e7e9      	b.n	9000c464 <_fwalk_sglue+0x10>

9000c490 <iprintf>:
9000c490:	b40f      	push	{r0, r1, r2, r3}
9000c492:	b507      	push	{r0, r1, r2, lr}
9000c494:	4906      	ldr	r1, [pc, #24]	@ (9000c4b0 <iprintf+0x20>)
9000c496:	ab04      	add	r3, sp, #16
9000c498:	6808      	ldr	r0, [r1, #0]
9000c49a:	f853 2b04 	ldr.w	r2, [r3], #4
9000c49e:	6881      	ldr	r1, [r0, #8]
9000c4a0:	9301      	str	r3, [sp, #4]
9000c4a2:	f000 fbc5 	bl	9000cc30 <_vfiprintf_r>
9000c4a6:	b003      	add	sp, #12
9000c4a8:	f85d eb04 	ldr.w	lr, [sp], #4
9000c4ac:	b004      	add	sp, #16
9000c4ae:	4770      	bx	lr
9000c4b0:	2000007c 	.word	0x2000007c

9000c4b4 <_puts_r>:
9000c4b4:	6a03      	ldr	r3, [r0, #32]
9000c4b6:	b570      	push	{r4, r5, r6, lr}
9000c4b8:	6884      	ldr	r4, [r0, #8]
9000c4ba:	4605      	mov	r5, r0
9000c4bc:	460e      	mov	r6, r1
9000c4be:	b90b      	cbnz	r3, 9000c4c4 <_puts_r+0x10>
9000c4c0:	f7ff ffb0 	bl	9000c424 <__sinit>
9000c4c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c4c6:	07db      	lsls	r3, r3, #31
9000c4c8:	d405      	bmi.n	9000c4d6 <_puts_r+0x22>
9000c4ca:	89a3      	ldrh	r3, [r4, #12]
9000c4cc:	0598      	lsls	r0, r3, #22
9000c4ce:	d402      	bmi.n	9000c4d6 <_puts_r+0x22>
9000c4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c4d2:	f000 f9d0 	bl	9000c876 <__retarget_lock_acquire_recursive>
9000c4d6:	89a3      	ldrh	r3, [r4, #12]
9000c4d8:	0719      	lsls	r1, r3, #28
9000c4da:	d502      	bpl.n	9000c4e2 <_puts_r+0x2e>
9000c4dc:	6923      	ldr	r3, [r4, #16]
9000c4de:	2b00      	cmp	r3, #0
9000c4e0:	d135      	bne.n	9000c54e <_puts_r+0x9a>
9000c4e2:	4621      	mov	r1, r4
9000c4e4:	4628      	mov	r0, r5
9000c4e6:	f000 f8e7 	bl	9000c6b8 <__swsetup_r>
9000c4ea:	b380      	cbz	r0, 9000c54e <_puts_r+0x9a>
9000c4ec:	f04f 35ff 	mov.w	r5, #4294967295
9000c4f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c4f2:	07da      	lsls	r2, r3, #31
9000c4f4:	d405      	bmi.n	9000c502 <_puts_r+0x4e>
9000c4f6:	89a3      	ldrh	r3, [r4, #12]
9000c4f8:	059b      	lsls	r3, r3, #22
9000c4fa:	d402      	bmi.n	9000c502 <_puts_r+0x4e>
9000c4fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c4fe:	f000 f9bb 	bl	9000c878 <__retarget_lock_release_recursive>
9000c502:	4628      	mov	r0, r5
9000c504:	bd70      	pop	{r4, r5, r6, pc}
9000c506:	2b00      	cmp	r3, #0
9000c508:	da04      	bge.n	9000c514 <_puts_r+0x60>
9000c50a:	69a2      	ldr	r2, [r4, #24]
9000c50c:	429a      	cmp	r2, r3
9000c50e:	dc17      	bgt.n	9000c540 <_puts_r+0x8c>
9000c510:	290a      	cmp	r1, #10
9000c512:	d015      	beq.n	9000c540 <_puts_r+0x8c>
9000c514:	6823      	ldr	r3, [r4, #0]
9000c516:	1c5a      	adds	r2, r3, #1
9000c518:	6022      	str	r2, [r4, #0]
9000c51a:	7019      	strb	r1, [r3, #0]
9000c51c:	68a3      	ldr	r3, [r4, #8]
9000c51e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c522:	3b01      	subs	r3, #1
9000c524:	60a3      	str	r3, [r4, #8]
9000c526:	2900      	cmp	r1, #0
9000c528:	d1ed      	bne.n	9000c506 <_puts_r+0x52>
9000c52a:	2b00      	cmp	r3, #0
9000c52c:	da11      	bge.n	9000c552 <_puts_r+0x9e>
9000c52e:	4622      	mov	r2, r4
9000c530:	210a      	movs	r1, #10
9000c532:	4628      	mov	r0, r5
9000c534:	f000 f881 	bl	9000c63a <__swbuf_r>
9000c538:	3001      	adds	r0, #1
9000c53a:	d0d7      	beq.n	9000c4ec <_puts_r+0x38>
9000c53c:	250a      	movs	r5, #10
9000c53e:	e7d7      	b.n	9000c4f0 <_puts_r+0x3c>
9000c540:	4622      	mov	r2, r4
9000c542:	4628      	mov	r0, r5
9000c544:	f000 f879 	bl	9000c63a <__swbuf_r>
9000c548:	3001      	adds	r0, #1
9000c54a:	d1e7      	bne.n	9000c51c <_puts_r+0x68>
9000c54c:	e7ce      	b.n	9000c4ec <_puts_r+0x38>
9000c54e:	3e01      	subs	r6, #1
9000c550:	e7e4      	b.n	9000c51c <_puts_r+0x68>
9000c552:	6823      	ldr	r3, [r4, #0]
9000c554:	1c5a      	adds	r2, r3, #1
9000c556:	6022      	str	r2, [r4, #0]
9000c558:	220a      	movs	r2, #10
9000c55a:	701a      	strb	r2, [r3, #0]
9000c55c:	e7ee      	b.n	9000c53c <_puts_r+0x88>
	...

9000c560 <puts>:
9000c560:	4b02      	ldr	r3, [pc, #8]	@ (9000c56c <puts+0xc>)
9000c562:	4601      	mov	r1, r0
9000c564:	6818      	ldr	r0, [r3, #0]
9000c566:	f7ff bfa5 	b.w	9000c4b4 <_puts_r>
9000c56a:	bf00      	nop
9000c56c:	2000007c 	.word	0x2000007c

9000c570 <siprintf>:
9000c570:	b40e      	push	{r1, r2, r3}
9000c572:	b510      	push	{r4, lr}
9000c574:	b09d      	sub	sp, #116	@ 0x74
9000c576:	ab1f      	add	r3, sp, #124	@ 0x7c
9000c578:	9002      	str	r0, [sp, #8]
9000c57a:	9006      	str	r0, [sp, #24]
9000c57c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000c580:	480a      	ldr	r0, [pc, #40]	@ (9000c5ac <siprintf+0x3c>)
9000c582:	9107      	str	r1, [sp, #28]
9000c584:	9104      	str	r1, [sp, #16]
9000c586:	490a      	ldr	r1, [pc, #40]	@ (9000c5b0 <siprintf+0x40>)
9000c588:	f853 2b04 	ldr.w	r2, [r3], #4
9000c58c:	9105      	str	r1, [sp, #20]
9000c58e:	2400      	movs	r4, #0
9000c590:	a902      	add	r1, sp, #8
9000c592:	6800      	ldr	r0, [r0, #0]
9000c594:	9301      	str	r3, [sp, #4]
9000c596:	941b      	str	r4, [sp, #108]	@ 0x6c
9000c598:	f000 fa24 	bl	9000c9e4 <_svfiprintf_r>
9000c59c:	9b02      	ldr	r3, [sp, #8]
9000c59e:	701c      	strb	r4, [r3, #0]
9000c5a0:	b01d      	add	sp, #116	@ 0x74
9000c5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c5a6:	b003      	add	sp, #12
9000c5a8:	4770      	bx	lr
9000c5aa:	bf00      	nop
9000c5ac:	2000007c 	.word	0x2000007c
9000c5b0:	ffff0208 	.word	0xffff0208

9000c5b4 <__sread>:
9000c5b4:	b510      	push	{r4, lr}
9000c5b6:	460c      	mov	r4, r1
9000c5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c5bc:	f000 f8fc 	bl	9000c7b8 <_read_r>
9000c5c0:	2800      	cmp	r0, #0
9000c5c2:	bfab      	itete	ge
9000c5c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c5c6:	89a3      	ldrhlt	r3, [r4, #12]
9000c5c8:	181b      	addge	r3, r3, r0
9000c5ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c5ce:	bfac      	ite	ge
9000c5d0:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c5d2:	81a3      	strhlt	r3, [r4, #12]
9000c5d4:	bd10      	pop	{r4, pc}

9000c5d6 <__swrite>:
9000c5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c5da:	461f      	mov	r7, r3
9000c5dc:	898b      	ldrh	r3, [r1, #12]
9000c5de:	05db      	lsls	r3, r3, #23
9000c5e0:	4605      	mov	r5, r0
9000c5e2:	460c      	mov	r4, r1
9000c5e4:	4616      	mov	r6, r2
9000c5e6:	d505      	bpl.n	9000c5f4 <__swrite+0x1e>
9000c5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c5ec:	2302      	movs	r3, #2
9000c5ee:	2200      	movs	r2, #0
9000c5f0:	f000 f8d0 	bl	9000c794 <_lseek_r>
9000c5f4:	89a3      	ldrh	r3, [r4, #12]
9000c5f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c5fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c5fe:	81a3      	strh	r3, [r4, #12]
9000c600:	4632      	mov	r2, r6
9000c602:	463b      	mov	r3, r7
9000c604:	4628      	mov	r0, r5
9000c606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c60a:	f000 b8f7 	b.w	9000c7fc <_write_r>

9000c60e <__sseek>:
9000c60e:	b510      	push	{r4, lr}
9000c610:	460c      	mov	r4, r1
9000c612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c616:	f000 f8bd 	bl	9000c794 <_lseek_r>
9000c61a:	1c43      	adds	r3, r0, #1
9000c61c:	89a3      	ldrh	r3, [r4, #12]
9000c61e:	bf15      	itete	ne
9000c620:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c62a:	81a3      	strheq	r3, [r4, #12]
9000c62c:	bf18      	it	ne
9000c62e:	81a3      	strhne	r3, [r4, #12]
9000c630:	bd10      	pop	{r4, pc}

9000c632 <__sclose>:
9000c632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c636:	f000 b89d 	b.w	9000c774 <_close_r>

9000c63a <__swbuf_r>:
9000c63a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c63c:	460e      	mov	r6, r1
9000c63e:	4614      	mov	r4, r2
9000c640:	4605      	mov	r5, r0
9000c642:	b118      	cbz	r0, 9000c64c <__swbuf_r+0x12>
9000c644:	6a03      	ldr	r3, [r0, #32]
9000c646:	b90b      	cbnz	r3, 9000c64c <__swbuf_r+0x12>
9000c648:	f7ff feec 	bl	9000c424 <__sinit>
9000c64c:	69a3      	ldr	r3, [r4, #24]
9000c64e:	60a3      	str	r3, [r4, #8]
9000c650:	89a3      	ldrh	r3, [r4, #12]
9000c652:	071a      	lsls	r2, r3, #28
9000c654:	d501      	bpl.n	9000c65a <__swbuf_r+0x20>
9000c656:	6923      	ldr	r3, [r4, #16]
9000c658:	b943      	cbnz	r3, 9000c66c <__swbuf_r+0x32>
9000c65a:	4621      	mov	r1, r4
9000c65c:	4628      	mov	r0, r5
9000c65e:	f000 f82b 	bl	9000c6b8 <__swsetup_r>
9000c662:	b118      	cbz	r0, 9000c66c <__swbuf_r+0x32>
9000c664:	f04f 37ff 	mov.w	r7, #4294967295
9000c668:	4638      	mov	r0, r7
9000c66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c66c:	6823      	ldr	r3, [r4, #0]
9000c66e:	6922      	ldr	r2, [r4, #16]
9000c670:	1a98      	subs	r0, r3, r2
9000c672:	6963      	ldr	r3, [r4, #20]
9000c674:	b2f6      	uxtb	r6, r6
9000c676:	4283      	cmp	r3, r0
9000c678:	4637      	mov	r7, r6
9000c67a:	dc05      	bgt.n	9000c688 <__swbuf_r+0x4e>
9000c67c:	4621      	mov	r1, r4
9000c67e:	4628      	mov	r0, r5
9000c680:	f000 fdfe 	bl	9000d280 <_fflush_r>
9000c684:	2800      	cmp	r0, #0
9000c686:	d1ed      	bne.n	9000c664 <__swbuf_r+0x2a>
9000c688:	68a3      	ldr	r3, [r4, #8]
9000c68a:	3b01      	subs	r3, #1
9000c68c:	60a3      	str	r3, [r4, #8]
9000c68e:	6823      	ldr	r3, [r4, #0]
9000c690:	1c5a      	adds	r2, r3, #1
9000c692:	6022      	str	r2, [r4, #0]
9000c694:	701e      	strb	r6, [r3, #0]
9000c696:	6962      	ldr	r2, [r4, #20]
9000c698:	1c43      	adds	r3, r0, #1
9000c69a:	429a      	cmp	r2, r3
9000c69c:	d004      	beq.n	9000c6a8 <__swbuf_r+0x6e>
9000c69e:	89a3      	ldrh	r3, [r4, #12]
9000c6a0:	07db      	lsls	r3, r3, #31
9000c6a2:	d5e1      	bpl.n	9000c668 <__swbuf_r+0x2e>
9000c6a4:	2e0a      	cmp	r6, #10
9000c6a6:	d1df      	bne.n	9000c668 <__swbuf_r+0x2e>
9000c6a8:	4621      	mov	r1, r4
9000c6aa:	4628      	mov	r0, r5
9000c6ac:	f000 fde8 	bl	9000d280 <_fflush_r>
9000c6b0:	2800      	cmp	r0, #0
9000c6b2:	d0d9      	beq.n	9000c668 <__swbuf_r+0x2e>
9000c6b4:	e7d6      	b.n	9000c664 <__swbuf_r+0x2a>
	...

9000c6b8 <__swsetup_r>:
9000c6b8:	b538      	push	{r3, r4, r5, lr}
9000c6ba:	4b29      	ldr	r3, [pc, #164]	@ (9000c760 <__swsetup_r+0xa8>)
9000c6bc:	4605      	mov	r5, r0
9000c6be:	6818      	ldr	r0, [r3, #0]
9000c6c0:	460c      	mov	r4, r1
9000c6c2:	b118      	cbz	r0, 9000c6cc <__swsetup_r+0x14>
9000c6c4:	6a03      	ldr	r3, [r0, #32]
9000c6c6:	b90b      	cbnz	r3, 9000c6cc <__swsetup_r+0x14>
9000c6c8:	f7ff feac 	bl	9000c424 <__sinit>
9000c6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c6d0:	0719      	lsls	r1, r3, #28
9000c6d2:	d422      	bmi.n	9000c71a <__swsetup_r+0x62>
9000c6d4:	06da      	lsls	r2, r3, #27
9000c6d6:	d407      	bmi.n	9000c6e8 <__swsetup_r+0x30>
9000c6d8:	2209      	movs	r2, #9
9000c6da:	602a      	str	r2, [r5, #0]
9000c6dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c6e0:	81a3      	strh	r3, [r4, #12]
9000c6e2:	f04f 30ff 	mov.w	r0, #4294967295
9000c6e6:	e033      	b.n	9000c750 <__swsetup_r+0x98>
9000c6e8:	0758      	lsls	r0, r3, #29
9000c6ea:	d512      	bpl.n	9000c712 <__swsetup_r+0x5a>
9000c6ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c6ee:	b141      	cbz	r1, 9000c702 <__swsetup_r+0x4a>
9000c6f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c6f4:	4299      	cmp	r1, r3
9000c6f6:	d002      	beq.n	9000c6fe <__swsetup_r+0x46>
9000c6f8:	4628      	mov	r0, r5
9000c6fa:	f000 f8cd 	bl	9000c898 <_free_r>
9000c6fe:	2300      	movs	r3, #0
9000c700:	6363      	str	r3, [r4, #52]	@ 0x34
9000c702:	89a3      	ldrh	r3, [r4, #12]
9000c704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c708:	81a3      	strh	r3, [r4, #12]
9000c70a:	2300      	movs	r3, #0
9000c70c:	6063      	str	r3, [r4, #4]
9000c70e:	6923      	ldr	r3, [r4, #16]
9000c710:	6023      	str	r3, [r4, #0]
9000c712:	89a3      	ldrh	r3, [r4, #12]
9000c714:	f043 0308 	orr.w	r3, r3, #8
9000c718:	81a3      	strh	r3, [r4, #12]
9000c71a:	6923      	ldr	r3, [r4, #16]
9000c71c:	b94b      	cbnz	r3, 9000c732 <__swsetup_r+0x7a>
9000c71e:	89a3      	ldrh	r3, [r4, #12]
9000c720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c728:	d003      	beq.n	9000c732 <__swsetup_r+0x7a>
9000c72a:	4621      	mov	r1, r4
9000c72c:	4628      	mov	r0, r5
9000c72e:	f000 fdf5 	bl	9000d31c <__smakebuf_r>
9000c732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c736:	f013 0201 	ands.w	r2, r3, #1
9000c73a:	d00a      	beq.n	9000c752 <__swsetup_r+0x9a>
9000c73c:	2200      	movs	r2, #0
9000c73e:	60a2      	str	r2, [r4, #8]
9000c740:	6962      	ldr	r2, [r4, #20]
9000c742:	4252      	negs	r2, r2
9000c744:	61a2      	str	r2, [r4, #24]
9000c746:	6922      	ldr	r2, [r4, #16]
9000c748:	b942      	cbnz	r2, 9000c75c <__swsetup_r+0xa4>
9000c74a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c74e:	d1c5      	bne.n	9000c6dc <__swsetup_r+0x24>
9000c750:	bd38      	pop	{r3, r4, r5, pc}
9000c752:	0799      	lsls	r1, r3, #30
9000c754:	bf58      	it	pl
9000c756:	6962      	ldrpl	r2, [r4, #20]
9000c758:	60a2      	str	r2, [r4, #8]
9000c75a:	e7f4      	b.n	9000c746 <__swsetup_r+0x8e>
9000c75c:	2000      	movs	r0, #0
9000c75e:	e7f7      	b.n	9000c750 <__swsetup_r+0x98>
9000c760:	2000007c 	.word	0x2000007c

9000c764 <memset>:
9000c764:	4402      	add	r2, r0
9000c766:	4603      	mov	r3, r0
9000c768:	4293      	cmp	r3, r2
9000c76a:	d100      	bne.n	9000c76e <memset+0xa>
9000c76c:	4770      	bx	lr
9000c76e:	f803 1b01 	strb.w	r1, [r3], #1
9000c772:	e7f9      	b.n	9000c768 <memset+0x4>

9000c774 <_close_r>:
9000c774:	b538      	push	{r3, r4, r5, lr}
9000c776:	4d06      	ldr	r5, [pc, #24]	@ (9000c790 <_close_r+0x1c>)
9000c778:	2300      	movs	r3, #0
9000c77a:	4604      	mov	r4, r0
9000c77c:	4608      	mov	r0, r1
9000c77e:	602b      	str	r3, [r5, #0]
9000c780:	f7f4 fc47 	bl	90001012 <_close>
9000c784:	1c43      	adds	r3, r0, #1
9000c786:	d102      	bne.n	9000c78e <_close_r+0x1a>
9000c788:	682b      	ldr	r3, [r5, #0]
9000c78a:	b103      	cbz	r3, 9000c78e <_close_r+0x1a>
9000c78c:	6023      	str	r3, [r4, #0]
9000c78e:	bd38      	pop	{r3, r4, r5, pc}
9000c790:	20001490 	.word	0x20001490

9000c794 <_lseek_r>:
9000c794:	b538      	push	{r3, r4, r5, lr}
9000c796:	4d07      	ldr	r5, [pc, #28]	@ (9000c7b4 <_lseek_r+0x20>)
9000c798:	4604      	mov	r4, r0
9000c79a:	4608      	mov	r0, r1
9000c79c:	4611      	mov	r1, r2
9000c79e:	2200      	movs	r2, #0
9000c7a0:	602a      	str	r2, [r5, #0]
9000c7a2:	461a      	mov	r2, r3
9000c7a4:	f7f4 fc5c 	bl	90001060 <_lseek>
9000c7a8:	1c43      	adds	r3, r0, #1
9000c7aa:	d102      	bne.n	9000c7b2 <_lseek_r+0x1e>
9000c7ac:	682b      	ldr	r3, [r5, #0]
9000c7ae:	b103      	cbz	r3, 9000c7b2 <_lseek_r+0x1e>
9000c7b0:	6023      	str	r3, [r4, #0]
9000c7b2:	bd38      	pop	{r3, r4, r5, pc}
9000c7b4:	20001490 	.word	0x20001490

9000c7b8 <_read_r>:
9000c7b8:	b538      	push	{r3, r4, r5, lr}
9000c7ba:	4d07      	ldr	r5, [pc, #28]	@ (9000c7d8 <_read_r+0x20>)
9000c7bc:	4604      	mov	r4, r0
9000c7be:	4608      	mov	r0, r1
9000c7c0:	4611      	mov	r1, r2
9000c7c2:	2200      	movs	r2, #0
9000c7c4:	602a      	str	r2, [r5, #0]
9000c7c6:	461a      	mov	r2, r3
9000c7c8:	f7f4 fbea 	bl	90000fa0 <_read>
9000c7cc:	1c43      	adds	r3, r0, #1
9000c7ce:	d102      	bne.n	9000c7d6 <_read_r+0x1e>
9000c7d0:	682b      	ldr	r3, [r5, #0]
9000c7d2:	b103      	cbz	r3, 9000c7d6 <_read_r+0x1e>
9000c7d4:	6023      	str	r3, [r4, #0]
9000c7d6:	bd38      	pop	{r3, r4, r5, pc}
9000c7d8:	20001490 	.word	0x20001490

9000c7dc <_sbrk_r>:
9000c7dc:	b538      	push	{r3, r4, r5, lr}
9000c7de:	4d06      	ldr	r5, [pc, #24]	@ (9000c7f8 <_sbrk_r+0x1c>)
9000c7e0:	2300      	movs	r3, #0
9000c7e2:	4604      	mov	r4, r0
9000c7e4:	4608      	mov	r0, r1
9000c7e6:	602b      	str	r3, [r5, #0]
9000c7e8:	f7f4 fc48 	bl	9000107c <_sbrk>
9000c7ec:	1c43      	adds	r3, r0, #1
9000c7ee:	d102      	bne.n	9000c7f6 <_sbrk_r+0x1a>
9000c7f0:	682b      	ldr	r3, [r5, #0]
9000c7f2:	b103      	cbz	r3, 9000c7f6 <_sbrk_r+0x1a>
9000c7f4:	6023      	str	r3, [r4, #0]
9000c7f6:	bd38      	pop	{r3, r4, r5, pc}
9000c7f8:	20001490 	.word	0x20001490

9000c7fc <_write_r>:
9000c7fc:	b538      	push	{r3, r4, r5, lr}
9000c7fe:	4d07      	ldr	r5, [pc, #28]	@ (9000c81c <_write_r+0x20>)
9000c800:	4604      	mov	r4, r0
9000c802:	4608      	mov	r0, r1
9000c804:	4611      	mov	r1, r2
9000c806:	2200      	movs	r2, #0
9000c808:	602a      	str	r2, [r5, #0]
9000c80a:	461a      	mov	r2, r3
9000c80c:	f7f4 fbe5 	bl	90000fda <_write>
9000c810:	1c43      	adds	r3, r0, #1
9000c812:	d102      	bne.n	9000c81a <_write_r+0x1e>
9000c814:	682b      	ldr	r3, [r5, #0]
9000c816:	b103      	cbz	r3, 9000c81a <_write_r+0x1e>
9000c818:	6023      	str	r3, [r4, #0]
9000c81a:	bd38      	pop	{r3, r4, r5, pc}
9000c81c:	20001490 	.word	0x20001490

9000c820 <__errno>:
9000c820:	4b01      	ldr	r3, [pc, #4]	@ (9000c828 <__errno+0x8>)
9000c822:	6818      	ldr	r0, [r3, #0]
9000c824:	4770      	bx	lr
9000c826:	bf00      	nop
9000c828:	2000007c 	.word	0x2000007c

9000c82c <__libc_init_array>:
9000c82c:	b570      	push	{r4, r5, r6, lr}
9000c82e:	4d0d      	ldr	r5, [pc, #52]	@ (9000c864 <__libc_init_array+0x38>)
9000c830:	4c0d      	ldr	r4, [pc, #52]	@ (9000c868 <__libc_init_array+0x3c>)
9000c832:	1b64      	subs	r4, r4, r5
9000c834:	10a4      	asrs	r4, r4, #2
9000c836:	2600      	movs	r6, #0
9000c838:	42a6      	cmp	r6, r4
9000c83a:	d109      	bne.n	9000c850 <__libc_init_array+0x24>
9000c83c:	4d0b      	ldr	r5, [pc, #44]	@ (9000c86c <__libc_init_array+0x40>)
9000c83e:	4c0c      	ldr	r4, [pc, #48]	@ (9000c870 <__libc_init_array+0x44>)
9000c840:	f000 fe1a 	bl	9000d478 <_init>
9000c844:	1b64      	subs	r4, r4, r5
9000c846:	10a4      	asrs	r4, r4, #2
9000c848:	2600      	movs	r6, #0
9000c84a:	42a6      	cmp	r6, r4
9000c84c:	d105      	bne.n	9000c85a <__libc_init_array+0x2e>
9000c84e:	bd70      	pop	{r4, r5, r6, pc}
9000c850:	f855 3b04 	ldr.w	r3, [r5], #4
9000c854:	4798      	blx	r3
9000c856:	3601      	adds	r6, #1
9000c858:	e7ee      	b.n	9000c838 <__libc_init_array+0xc>
9000c85a:	f855 3b04 	ldr.w	r3, [r5], #4
9000c85e:	4798      	blx	r3
9000c860:	3601      	adds	r6, #1
9000c862:	e7f2      	b.n	9000c84a <__libc_init_array+0x1e>
9000c864:	9000fb60 	.word	0x9000fb60
9000c868:	9000fb60 	.word	0x9000fb60
9000c86c:	9000fb60 	.word	0x9000fb60
9000c870:	9000fb64 	.word	0x9000fb64

9000c874 <__retarget_lock_init_recursive>:
9000c874:	4770      	bx	lr

9000c876 <__retarget_lock_acquire_recursive>:
9000c876:	4770      	bx	lr

9000c878 <__retarget_lock_release_recursive>:
9000c878:	4770      	bx	lr

9000c87a <memcpy>:
9000c87a:	440a      	add	r2, r1
9000c87c:	4291      	cmp	r1, r2
9000c87e:	f100 33ff 	add.w	r3, r0, #4294967295
9000c882:	d100      	bne.n	9000c886 <memcpy+0xc>
9000c884:	4770      	bx	lr
9000c886:	b510      	push	{r4, lr}
9000c888:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c88c:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c890:	4291      	cmp	r1, r2
9000c892:	d1f9      	bne.n	9000c888 <memcpy+0xe>
9000c894:	bd10      	pop	{r4, pc}
	...

9000c898 <_free_r>:
9000c898:	b538      	push	{r3, r4, r5, lr}
9000c89a:	4605      	mov	r5, r0
9000c89c:	2900      	cmp	r1, #0
9000c89e:	d041      	beq.n	9000c924 <_free_r+0x8c>
9000c8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c8a4:	1f0c      	subs	r4, r1, #4
9000c8a6:	2b00      	cmp	r3, #0
9000c8a8:	bfb8      	it	lt
9000c8aa:	18e4      	addlt	r4, r4, r3
9000c8ac:	f7ff fd22 	bl	9000c2f4 <__malloc_lock>
9000c8b0:	4a1d      	ldr	r2, [pc, #116]	@ (9000c928 <_free_r+0x90>)
9000c8b2:	6813      	ldr	r3, [r2, #0]
9000c8b4:	b933      	cbnz	r3, 9000c8c4 <_free_r+0x2c>
9000c8b6:	6063      	str	r3, [r4, #4]
9000c8b8:	6014      	str	r4, [r2, #0]
9000c8ba:	4628      	mov	r0, r5
9000c8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c8c0:	f7ff bd1e 	b.w	9000c300 <__malloc_unlock>
9000c8c4:	42a3      	cmp	r3, r4
9000c8c6:	d908      	bls.n	9000c8da <_free_r+0x42>
9000c8c8:	6820      	ldr	r0, [r4, #0]
9000c8ca:	1821      	adds	r1, r4, r0
9000c8cc:	428b      	cmp	r3, r1
9000c8ce:	bf01      	itttt	eq
9000c8d0:	6819      	ldreq	r1, [r3, #0]
9000c8d2:	685b      	ldreq	r3, [r3, #4]
9000c8d4:	1809      	addeq	r1, r1, r0
9000c8d6:	6021      	streq	r1, [r4, #0]
9000c8d8:	e7ed      	b.n	9000c8b6 <_free_r+0x1e>
9000c8da:	461a      	mov	r2, r3
9000c8dc:	685b      	ldr	r3, [r3, #4]
9000c8de:	b10b      	cbz	r3, 9000c8e4 <_free_r+0x4c>
9000c8e0:	42a3      	cmp	r3, r4
9000c8e2:	d9fa      	bls.n	9000c8da <_free_r+0x42>
9000c8e4:	6811      	ldr	r1, [r2, #0]
9000c8e6:	1850      	adds	r0, r2, r1
9000c8e8:	42a0      	cmp	r0, r4
9000c8ea:	d10b      	bne.n	9000c904 <_free_r+0x6c>
9000c8ec:	6820      	ldr	r0, [r4, #0]
9000c8ee:	4401      	add	r1, r0
9000c8f0:	1850      	adds	r0, r2, r1
9000c8f2:	4283      	cmp	r3, r0
9000c8f4:	6011      	str	r1, [r2, #0]
9000c8f6:	d1e0      	bne.n	9000c8ba <_free_r+0x22>
9000c8f8:	6818      	ldr	r0, [r3, #0]
9000c8fa:	685b      	ldr	r3, [r3, #4]
9000c8fc:	6053      	str	r3, [r2, #4]
9000c8fe:	4408      	add	r0, r1
9000c900:	6010      	str	r0, [r2, #0]
9000c902:	e7da      	b.n	9000c8ba <_free_r+0x22>
9000c904:	d902      	bls.n	9000c90c <_free_r+0x74>
9000c906:	230c      	movs	r3, #12
9000c908:	602b      	str	r3, [r5, #0]
9000c90a:	e7d6      	b.n	9000c8ba <_free_r+0x22>
9000c90c:	6820      	ldr	r0, [r4, #0]
9000c90e:	1821      	adds	r1, r4, r0
9000c910:	428b      	cmp	r3, r1
9000c912:	bf04      	itt	eq
9000c914:	6819      	ldreq	r1, [r3, #0]
9000c916:	685b      	ldreq	r3, [r3, #4]
9000c918:	6063      	str	r3, [r4, #4]
9000c91a:	bf04      	itt	eq
9000c91c:	1809      	addeq	r1, r1, r0
9000c91e:	6021      	streq	r1, [r4, #0]
9000c920:	6054      	str	r4, [r2, #4]
9000c922:	e7ca      	b.n	9000c8ba <_free_r+0x22>
9000c924:	bd38      	pop	{r3, r4, r5, pc}
9000c926:	bf00      	nop
9000c928:	20001350 	.word	0x20001350

9000c92c <__ssputs_r>:
9000c92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c930:	688e      	ldr	r6, [r1, #8]
9000c932:	461f      	mov	r7, r3
9000c934:	42be      	cmp	r6, r7
9000c936:	680b      	ldr	r3, [r1, #0]
9000c938:	4682      	mov	sl, r0
9000c93a:	460c      	mov	r4, r1
9000c93c:	4690      	mov	r8, r2
9000c93e:	d82d      	bhi.n	9000c99c <__ssputs_r+0x70>
9000c940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000c944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000c948:	d026      	beq.n	9000c998 <__ssputs_r+0x6c>
9000c94a:	6965      	ldr	r5, [r4, #20]
9000c94c:	6909      	ldr	r1, [r1, #16]
9000c94e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000c952:	eba3 0901 	sub.w	r9, r3, r1
9000c956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000c95a:	1c7b      	adds	r3, r7, #1
9000c95c:	444b      	add	r3, r9
9000c95e:	106d      	asrs	r5, r5, #1
9000c960:	429d      	cmp	r5, r3
9000c962:	bf38      	it	cc
9000c964:	461d      	movcc	r5, r3
9000c966:	0553      	lsls	r3, r2, #21
9000c968:	d527      	bpl.n	9000c9ba <__ssputs_r+0x8e>
9000c96a:	4629      	mov	r1, r5
9000c96c:	f7ff fc42 	bl	9000c1f4 <_malloc_r>
9000c970:	4606      	mov	r6, r0
9000c972:	b360      	cbz	r0, 9000c9ce <__ssputs_r+0xa2>
9000c974:	6921      	ldr	r1, [r4, #16]
9000c976:	464a      	mov	r2, r9
9000c978:	f7ff ff7f 	bl	9000c87a <memcpy>
9000c97c:	89a3      	ldrh	r3, [r4, #12]
9000c97e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000c982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000c986:	81a3      	strh	r3, [r4, #12]
9000c988:	6126      	str	r6, [r4, #16]
9000c98a:	6165      	str	r5, [r4, #20]
9000c98c:	444e      	add	r6, r9
9000c98e:	eba5 0509 	sub.w	r5, r5, r9
9000c992:	6026      	str	r6, [r4, #0]
9000c994:	60a5      	str	r5, [r4, #8]
9000c996:	463e      	mov	r6, r7
9000c998:	42be      	cmp	r6, r7
9000c99a:	d900      	bls.n	9000c99e <__ssputs_r+0x72>
9000c99c:	463e      	mov	r6, r7
9000c99e:	6820      	ldr	r0, [r4, #0]
9000c9a0:	4632      	mov	r2, r6
9000c9a2:	4641      	mov	r1, r8
9000c9a4:	f000 fcf6 	bl	9000d394 <memmove>
9000c9a8:	68a3      	ldr	r3, [r4, #8]
9000c9aa:	1b9b      	subs	r3, r3, r6
9000c9ac:	60a3      	str	r3, [r4, #8]
9000c9ae:	6823      	ldr	r3, [r4, #0]
9000c9b0:	4433      	add	r3, r6
9000c9b2:	6023      	str	r3, [r4, #0]
9000c9b4:	2000      	movs	r0, #0
9000c9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c9ba:	462a      	mov	r2, r5
9000c9bc:	f000 fd26 	bl	9000d40c <_realloc_r>
9000c9c0:	4606      	mov	r6, r0
9000c9c2:	2800      	cmp	r0, #0
9000c9c4:	d1e0      	bne.n	9000c988 <__ssputs_r+0x5c>
9000c9c6:	6921      	ldr	r1, [r4, #16]
9000c9c8:	4650      	mov	r0, sl
9000c9ca:	f7ff ff65 	bl	9000c898 <_free_r>
9000c9ce:	230c      	movs	r3, #12
9000c9d0:	f8ca 3000 	str.w	r3, [sl]
9000c9d4:	89a3      	ldrh	r3, [r4, #12]
9000c9d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c9da:	81a3      	strh	r3, [r4, #12]
9000c9dc:	f04f 30ff 	mov.w	r0, #4294967295
9000c9e0:	e7e9      	b.n	9000c9b6 <__ssputs_r+0x8a>
	...

9000c9e4 <_svfiprintf_r>:
9000c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c9e8:	4698      	mov	r8, r3
9000c9ea:	898b      	ldrh	r3, [r1, #12]
9000c9ec:	061b      	lsls	r3, r3, #24
9000c9ee:	b09d      	sub	sp, #116	@ 0x74
9000c9f0:	4607      	mov	r7, r0
9000c9f2:	460d      	mov	r5, r1
9000c9f4:	4614      	mov	r4, r2
9000c9f6:	d510      	bpl.n	9000ca1a <_svfiprintf_r+0x36>
9000c9f8:	690b      	ldr	r3, [r1, #16]
9000c9fa:	b973      	cbnz	r3, 9000ca1a <_svfiprintf_r+0x36>
9000c9fc:	2140      	movs	r1, #64	@ 0x40
9000c9fe:	f7ff fbf9 	bl	9000c1f4 <_malloc_r>
9000ca02:	6028      	str	r0, [r5, #0]
9000ca04:	6128      	str	r0, [r5, #16]
9000ca06:	b930      	cbnz	r0, 9000ca16 <_svfiprintf_r+0x32>
9000ca08:	230c      	movs	r3, #12
9000ca0a:	603b      	str	r3, [r7, #0]
9000ca0c:	f04f 30ff 	mov.w	r0, #4294967295
9000ca10:	b01d      	add	sp, #116	@ 0x74
9000ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000ca16:	2340      	movs	r3, #64	@ 0x40
9000ca18:	616b      	str	r3, [r5, #20]
9000ca1a:	2300      	movs	r3, #0
9000ca1c:	9309      	str	r3, [sp, #36]	@ 0x24
9000ca1e:	2320      	movs	r3, #32
9000ca20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000ca24:	f8cd 800c 	str.w	r8, [sp, #12]
9000ca28:	2330      	movs	r3, #48	@ 0x30
9000ca2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000cbc8 <_svfiprintf_r+0x1e4>
9000ca2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000ca32:	f04f 0901 	mov.w	r9, #1
9000ca36:	4623      	mov	r3, r4
9000ca38:	469a      	mov	sl, r3
9000ca3a:	f813 2b01 	ldrb.w	r2, [r3], #1
9000ca3e:	b10a      	cbz	r2, 9000ca44 <_svfiprintf_r+0x60>
9000ca40:	2a25      	cmp	r2, #37	@ 0x25
9000ca42:	d1f9      	bne.n	9000ca38 <_svfiprintf_r+0x54>
9000ca44:	ebba 0b04 	subs.w	fp, sl, r4
9000ca48:	d00b      	beq.n	9000ca62 <_svfiprintf_r+0x7e>
9000ca4a:	465b      	mov	r3, fp
9000ca4c:	4622      	mov	r2, r4
9000ca4e:	4629      	mov	r1, r5
9000ca50:	4638      	mov	r0, r7
9000ca52:	f7ff ff6b 	bl	9000c92c <__ssputs_r>
9000ca56:	3001      	adds	r0, #1
9000ca58:	f000 80a7 	beq.w	9000cbaa <_svfiprintf_r+0x1c6>
9000ca5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000ca5e:	445a      	add	r2, fp
9000ca60:	9209      	str	r2, [sp, #36]	@ 0x24
9000ca62:	f89a 3000 	ldrb.w	r3, [sl]
9000ca66:	2b00      	cmp	r3, #0
9000ca68:	f000 809f 	beq.w	9000cbaa <_svfiprintf_r+0x1c6>
9000ca6c:	2300      	movs	r3, #0
9000ca6e:	f04f 32ff 	mov.w	r2, #4294967295
9000ca72:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000ca76:	f10a 0a01 	add.w	sl, sl, #1
9000ca7a:	9304      	str	r3, [sp, #16]
9000ca7c:	9307      	str	r3, [sp, #28]
9000ca7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000ca82:	931a      	str	r3, [sp, #104]	@ 0x68
9000ca84:	4654      	mov	r4, sl
9000ca86:	2205      	movs	r2, #5
9000ca88:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ca8c:	484e      	ldr	r0, [pc, #312]	@ (9000cbc8 <_svfiprintf_r+0x1e4>)
9000ca8e:	f7f3 fc27 	bl	900002e0 <memchr>
9000ca92:	9a04      	ldr	r2, [sp, #16]
9000ca94:	b9d8      	cbnz	r0, 9000cace <_svfiprintf_r+0xea>
9000ca96:	06d0      	lsls	r0, r2, #27
9000ca98:	bf44      	itt	mi
9000ca9a:	2320      	movmi	r3, #32
9000ca9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000caa0:	0711      	lsls	r1, r2, #28
9000caa2:	bf44      	itt	mi
9000caa4:	232b      	movmi	r3, #43	@ 0x2b
9000caa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000caaa:	f89a 3000 	ldrb.w	r3, [sl]
9000caae:	2b2a      	cmp	r3, #42	@ 0x2a
9000cab0:	d015      	beq.n	9000cade <_svfiprintf_r+0xfa>
9000cab2:	9a07      	ldr	r2, [sp, #28]
9000cab4:	4654      	mov	r4, sl
9000cab6:	2000      	movs	r0, #0
9000cab8:	f04f 0c0a 	mov.w	ip, #10
9000cabc:	4621      	mov	r1, r4
9000cabe:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cac2:	3b30      	subs	r3, #48	@ 0x30
9000cac4:	2b09      	cmp	r3, #9
9000cac6:	d94b      	bls.n	9000cb60 <_svfiprintf_r+0x17c>
9000cac8:	b1b0      	cbz	r0, 9000caf8 <_svfiprintf_r+0x114>
9000caca:	9207      	str	r2, [sp, #28]
9000cacc:	e014      	b.n	9000caf8 <_svfiprintf_r+0x114>
9000cace:	eba0 0308 	sub.w	r3, r0, r8
9000cad2:	fa09 f303 	lsl.w	r3, r9, r3
9000cad6:	4313      	orrs	r3, r2
9000cad8:	9304      	str	r3, [sp, #16]
9000cada:	46a2      	mov	sl, r4
9000cadc:	e7d2      	b.n	9000ca84 <_svfiprintf_r+0xa0>
9000cade:	9b03      	ldr	r3, [sp, #12]
9000cae0:	1d19      	adds	r1, r3, #4
9000cae2:	681b      	ldr	r3, [r3, #0]
9000cae4:	9103      	str	r1, [sp, #12]
9000cae6:	2b00      	cmp	r3, #0
9000cae8:	bfbb      	ittet	lt
9000caea:	425b      	neglt	r3, r3
9000caec:	f042 0202 	orrlt.w	r2, r2, #2
9000caf0:	9307      	strge	r3, [sp, #28]
9000caf2:	9307      	strlt	r3, [sp, #28]
9000caf4:	bfb8      	it	lt
9000caf6:	9204      	strlt	r2, [sp, #16]
9000caf8:	7823      	ldrb	r3, [r4, #0]
9000cafa:	2b2e      	cmp	r3, #46	@ 0x2e
9000cafc:	d10a      	bne.n	9000cb14 <_svfiprintf_r+0x130>
9000cafe:	7863      	ldrb	r3, [r4, #1]
9000cb00:	2b2a      	cmp	r3, #42	@ 0x2a
9000cb02:	d132      	bne.n	9000cb6a <_svfiprintf_r+0x186>
9000cb04:	9b03      	ldr	r3, [sp, #12]
9000cb06:	1d1a      	adds	r2, r3, #4
9000cb08:	681b      	ldr	r3, [r3, #0]
9000cb0a:	9203      	str	r2, [sp, #12]
9000cb0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cb10:	3402      	adds	r4, #2
9000cb12:	9305      	str	r3, [sp, #20]
9000cb14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000cbd8 <_svfiprintf_r+0x1f4>
9000cb18:	7821      	ldrb	r1, [r4, #0]
9000cb1a:	2203      	movs	r2, #3
9000cb1c:	4650      	mov	r0, sl
9000cb1e:	f7f3 fbdf 	bl	900002e0 <memchr>
9000cb22:	b138      	cbz	r0, 9000cb34 <_svfiprintf_r+0x150>
9000cb24:	9b04      	ldr	r3, [sp, #16]
9000cb26:	eba0 000a 	sub.w	r0, r0, sl
9000cb2a:	2240      	movs	r2, #64	@ 0x40
9000cb2c:	4082      	lsls	r2, r0
9000cb2e:	4313      	orrs	r3, r2
9000cb30:	3401      	adds	r4, #1
9000cb32:	9304      	str	r3, [sp, #16]
9000cb34:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cb38:	4824      	ldr	r0, [pc, #144]	@ (9000cbcc <_svfiprintf_r+0x1e8>)
9000cb3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cb3e:	2206      	movs	r2, #6
9000cb40:	f7f3 fbce 	bl	900002e0 <memchr>
9000cb44:	2800      	cmp	r0, #0
9000cb46:	d036      	beq.n	9000cbb6 <_svfiprintf_r+0x1d2>
9000cb48:	4b21      	ldr	r3, [pc, #132]	@ (9000cbd0 <_svfiprintf_r+0x1ec>)
9000cb4a:	bb1b      	cbnz	r3, 9000cb94 <_svfiprintf_r+0x1b0>
9000cb4c:	9b03      	ldr	r3, [sp, #12]
9000cb4e:	3307      	adds	r3, #7
9000cb50:	f023 0307 	bic.w	r3, r3, #7
9000cb54:	3308      	adds	r3, #8
9000cb56:	9303      	str	r3, [sp, #12]
9000cb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cb5a:	4433      	add	r3, r6
9000cb5c:	9309      	str	r3, [sp, #36]	@ 0x24
9000cb5e:	e76a      	b.n	9000ca36 <_svfiprintf_r+0x52>
9000cb60:	fb0c 3202 	mla	r2, ip, r2, r3
9000cb64:	460c      	mov	r4, r1
9000cb66:	2001      	movs	r0, #1
9000cb68:	e7a8      	b.n	9000cabc <_svfiprintf_r+0xd8>
9000cb6a:	2300      	movs	r3, #0
9000cb6c:	3401      	adds	r4, #1
9000cb6e:	9305      	str	r3, [sp, #20]
9000cb70:	4619      	mov	r1, r3
9000cb72:	f04f 0c0a 	mov.w	ip, #10
9000cb76:	4620      	mov	r0, r4
9000cb78:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cb7c:	3a30      	subs	r2, #48	@ 0x30
9000cb7e:	2a09      	cmp	r2, #9
9000cb80:	d903      	bls.n	9000cb8a <_svfiprintf_r+0x1a6>
9000cb82:	2b00      	cmp	r3, #0
9000cb84:	d0c6      	beq.n	9000cb14 <_svfiprintf_r+0x130>
9000cb86:	9105      	str	r1, [sp, #20]
9000cb88:	e7c4      	b.n	9000cb14 <_svfiprintf_r+0x130>
9000cb8a:	fb0c 2101 	mla	r1, ip, r1, r2
9000cb8e:	4604      	mov	r4, r0
9000cb90:	2301      	movs	r3, #1
9000cb92:	e7f0      	b.n	9000cb76 <_svfiprintf_r+0x192>
9000cb94:	ab03      	add	r3, sp, #12
9000cb96:	9300      	str	r3, [sp, #0]
9000cb98:	462a      	mov	r2, r5
9000cb9a:	4b0e      	ldr	r3, [pc, #56]	@ (9000cbd4 <_svfiprintf_r+0x1f0>)
9000cb9c:	a904      	add	r1, sp, #16
9000cb9e:	4638      	mov	r0, r7
9000cba0:	f3af 8000 	nop.w
9000cba4:	1c42      	adds	r2, r0, #1
9000cba6:	4606      	mov	r6, r0
9000cba8:	d1d6      	bne.n	9000cb58 <_svfiprintf_r+0x174>
9000cbaa:	89ab      	ldrh	r3, [r5, #12]
9000cbac:	065b      	lsls	r3, r3, #25
9000cbae:	f53f af2d 	bmi.w	9000ca0c <_svfiprintf_r+0x28>
9000cbb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cbb4:	e72c      	b.n	9000ca10 <_svfiprintf_r+0x2c>
9000cbb6:	ab03      	add	r3, sp, #12
9000cbb8:	9300      	str	r3, [sp, #0]
9000cbba:	462a      	mov	r2, r5
9000cbbc:	4b05      	ldr	r3, [pc, #20]	@ (9000cbd4 <_svfiprintf_r+0x1f0>)
9000cbbe:	a904      	add	r1, sp, #16
9000cbc0:	4638      	mov	r0, r7
9000cbc2:	f000 f9bb 	bl	9000cf3c <_printf_i>
9000cbc6:	e7ed      	b.n	9000cba4 <_svfiprintf_r+0x1c0>
9000cbc8:	9000fb24 	.word	0x9000fb24
9000cbcc:	9000fb2e 	.word	0x9000fb2e
9000cbd0:	00000000 	.word	0x00000000
9000cbd4:	9000c92d 	.word	0x9000c92d
9000cbd8:	9000fb2a 	.word	0x9000fb2a

9000cbdc <__sfputc_r>:
9000cbdc:	6893      	ldr	r3, [r2, #8]
9000cbde:	3b01      	subs	r3, #1
9000cbe0:	2b00      	cmp	r3, #0
9000cbe2:	b410      	push	{r4}
9000cbe4:	6093      	str	r3, [r2, #8]
9000cbe6:	da08      	bge.n	9000cbfa <__sfputc_r+0x1e>
9000cbe8:	6994      	ldr	r4, [r2, #24]
9000cbea:	42a3      	cmp	r3, r4
9000cbec:	db01      	blt.n	9000cbf2 <__sfputc_r+0x16>
9000cbee:	290a      	cmp	r1, #10
9000cbf0:	d103      	bne.n	9000cbfa <__sfputc_r+0x1e>
9000cbf2:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cbf6:	f7ff bd20 	b.w	9000c63a <__swbuf_r>
9000cbfa:	6813      	ldr	r3, [r2, #0]
9000cbfc:	1c58      	adds	r0, r3, #1
9000cbfe:	6010      	str	r0, [r2, #0]
9000cc00:	7019      	strb	r1, [r3, #0]
9000cc02:	4608      	mov	r0, r1
9000cc04:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cc08:	4770      	bx	lr

9000cc0a <__sfputs_r>:
9000cc0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc0c:	4606      	mov	r6, r0
9000cc0e:	460f      	mov	r7, r1
9000cc10:	4614      	mov	r4, r2
9000cc12:	18d5      	adds	r5, r2, r3
9000cc14:	42ac      	cmp	r4, r5
9000cc16:	d101      	bne.n	9000cc1c <__sfputs_r+0x12>
9000cc18:	2000      	movs	r0, #0
9000cc1a:	e007      	b.n	9000cc2c <__sfputs_r+0x22>
9000cc1c:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cc20:	463a      	mov	r2, r7
9000cc22:	4630      	mov	r0, r6
9000cc24:	f7ff ffda 	bl	9000cbdc <__sfputc_r>
9000cc28:	1c43      	adds	r3, r0, #1
9000cc2a:	d1f3      	bne.n	9000cc14 <__sfputs_r+0xa>
9000cc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000cc30 <_vfiprintf_r>:
9000cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000cc34:	460d      	mov	r5, r1
9000cc36:	b09d      	sub	sp, #116	@ 0x74
9000cc38:	4614      	mov	r4, r2
9000cc3a:	4698      	mov	r8, r3
9000cc3c:	4606      	mov	r6, r0
9000cc3e:	b118      	cbz	r0, 9000cc48 <_vfiprintf_r+0x18>
9000cc40:	6a03      	ldr	r3, [r0, #32]
9000cc42:	b90b      	cbnz	r3, 9000cc48 <_vfiprintf_r+0x18>
9000cc44:	f7ff fbee 	bl	9000c424 <__sinit>
9000cc48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cc4a:	07d9      	lsls	r1, r3, #31
9000cc4c:	d405      	bmi.n	9000cc5a <_vfiprintf_r+0x2a>
9000cc4e:	89ab      	ldrh	r3, [r5, #12]
9000cc50:	059a      	lsls	r2, r3, #22
9000cc52:	d402      	bmi.n	9000cc5a <_vfiprintf_r+0x2a>
9000cc54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cc56:	f7ff fe0e 	bl	9000c876 <__retarget_lock_acquire_recursive>
9000cc5a:	89ab      	ldrh	r3, [r5, #12]
9000cc5c:	071b      	lsls	r3, r3, #28
9000cc5e:	d501      	bpl.n	9000cc64 <_vfiprintf_r+0x34>
9000cc60:	692b      	ldr	r3, [r5, #16]
9000cc62:	b99b      	cbnz	r3, 9000cc8c <_vfiprintf_r+0x5c>
9000cc64:	4629      	mov	r1, r5
9000cc66:	4630      	mov	r0, r6
9000cc68:	f7ff fd26 	bl	9000c6b8 <__swsetup_r>
9000cc6c:	b170      	cbz	r0, 9000cc8c <_vfiprintf_r+0x5c>
9000cc6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cc70:	07dc      	lsls	r4, r3, #31
9000cc72:	d504      	bpl.n	9000cc7e <_vfiprintf_r+0x4e>
9000cc74:	f04f 30ff 	mov.w	r0, #4294967295
9000cc78:	b01d      	add	sp, #116	@ 0x74
9000cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cc7e:	89ab      	ldrh	r3, [r5, #12]
9000cc80:	0598      	lsls	r0, r3, #22
9000cc82:	d4f7      	bmi.n	9000cc74 <_vfiprintf_r+0x44>
9000cc84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cc86:	f7ff fdf7 	bl	9000c878 <__retarget_lock_release_recursive>
9000cc8a:	e7f3      	b.n	9000cc74 <_vfiprintf_r+0x44>
9000cc8c:	2300      	movs	r3, #0
9000cc8e:	9309      	str	r3, [sp, #36]	@ 0x24
9000cc90:	2320      	movs	r3, #32
9000cc92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cc96:	f8cd 800c 	str.w	r8, [sp, #12]
9000cc9a:	2330      	movs	r3, #48	@ 0x30
9000cc9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000ce4c <_vfiprintf_r+0x21c>
9000cca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000cca4:	f04f 0901 	mov.w	r9, #1
9000cca8:	4623      	mov	r3, r4
9000ccaa:	469a      	mov	sl, r3
9000ccac:	f813 2b01 	ldrb.w	r2, [r3], #1
9000ccb0:	b10a      	cbz	r2, 9000ccb6 <_vfiprintf_r+0x86>
9000ccb2:	2a25      	cmp	r2, #37	@ 0x25
9000ccb4:	d1f9      	bne.n	9000ccaa <_vfiprintf_r+0x7a>
9000ccb6:	ebba 0b04 	subs.w	fp, sl, r4
9000ccba:	d00b      	beq.n	9000ccd4 <_vfiprintf_r+0xa4>
9000ccbc:	465b      	mov	r3, fp
9000ccbe:	4622      	mov	r2, r4
9000ccc0:	4629      	mov	r1, r5
9000ccc2:	4630      	mov	r0, r6
9000ccc4:	f7ff ffa1 	bl	9000cc0a <__sfputs_r>
9000ccc8:	3001      	adds	r0, #1
9000ccca:	f000 80a7 	beq.w	9000ce1c <_vfiprintf_r+0x1ec>
9000ccce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000ccd0:	445a      	add	r2, fp
9000ccd2:	9209      	str	r2, [sp, #36]	@ 0x24
9000ccd4:	f89a 3000 	ldrb.w	r3, [sl]
9000ccd8:	2b00      	cmp	r3, #0
9000ccda:	f000 809f 	beq.w	9000ce1c <_vfiprintf_r+0x1ec>
9000ccde:	2300      	movs	r3, #0
9000cce0:	f04f 32ff 	mov.w	r2, #4294967295
9000cce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cce8:	f10a 0a01 	add.w	sl, sl, #1
9000ccec:	9304      	str	r3, [sp, #16]
9000ccee:	9307      	str	r3, [sp, #28]
9000ccf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000ccf4:	931a      	str	r3, [sp, #104]	@ 0x68
9000ccf6:	4654      	mov	r4, sl
9000ccf8:	2205      	movs	r2, #5
9000ccfa:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ccfe:	4853      	ldr	r0, [pc, #332]	@ (9000ce4c <_vfiprintf_r+0x21c>)
9000cd00:	f7f3 faee 	bl	900002e0 <memchr>
9000cd04:	9a04      	ldr	r2, [sp, #16]
9000cd06:	b9d8      	cbnz	r0, 9000cd40 <_vfiprintf_r+0x110>
9000cd08:	06d1      	lsls	r1, r2, #27
9000cd0a:	bf44      	itt	mi
9000cd0c:	2320      	movmi	r3, #32
9000cd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cd12:	0713      	lsls	r3, r2, #28
9000cd14:	bf44      	itt	mi
9000cd16:	232b      	movmi	r3, #43	@ 0x2b
9000cd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cd1c:	f89a 3000 	ldrb.w	r3, [sl]
9000cd20:	2b2a      	cmp	r3, #42	@ 0x2a
9000cd22:	d015      	beq.n	9000cd50 <_vfiprintf_r+0x120>
9000cd24:	9a07      	ldr	r2, [sp, #28]
9000cd26:	4654      	mov	r4, sl
9000cd28:	2000      	movs	r0, #0
9000cd2a:	f04f 0c0a 	mov.w	ip, #10
9000cd2e:	4621      	mov	r1, r4
9000cd30:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cd34:	3b30      	subs	r3, #48	@ 0x30
9000cd36:	2b09      	cmp	r3, #9
9000cd38:	d94b      	bls.n	9000cdd2 <_vfiprintf_r+0x1a2>
9000cd3a:	b1b0      	cbz	r0, 9000cd6a <_vfiprintf_r+0x13a>
9000cd3c:	9207      	str	r2, [sp, #28]
9000cd3e:	e014      	b.n	9000cd6a <_vfiprintf_r+0x13a>
9000cd40:	eba0 0308 	sub.w	r3, r0, r8
9000cd44:	fa09 f303 	lsl.w	r3, r9, r3
9000cd48:	4313      	orrs	r3, r2
9000cd4a:	9304      	str	r3, [sp, #16]
9000cd4c:	46a2      	mov	sl, r4
9000cd4e:	e7d2      	b.n	9000ccf6 <_vfiprintf_r+0xc6>
9000cd50:	9b03      	ldr	r3, [sp, #12]
9000cd52:	1d19      	adds	r1, r3, #4
9000cd54:	681b      	ldr	r3, [r3, #0]
9000cd56:	9103      	str	r1, [sp, #12]
9000cd58:	2b00      	cmp	r3, #0
9000cd5a:	bfbb      	ittet	lt
9000cd5c:	425b      	neglt	r3, r3
9000cd5e:	f042 0202 	orrlt.w	r2, r2, #2
9000cd62:	9307      	strge	r3, [sp, #28]
9000cd64:	9307      	strlt	r3, [sp, #28]
9000cd66:	bfb8      	it	lt
9000cd68:	9204      	strlt	r2, [sp, #16]
9000cd6a:	7823      	ldrb	r3, [r4, #0]
9000cd6c:	2b2e      	cmp	r3, #46	@ 0x2e
9000cd6e:	d10a      	bne.n	9000cd86 <_vfiprintf_r+0x156>
9000cd70:	7863      	ldrb	r3, [r4, #1]
9000cd72:	2b2a      	cmp	r3, #42	@ 0x2a
9000cd74:	d132      	bne.n	9000cddc <_vfiprintf_r+0x1ac>
9000cd76:	9b03      	ldr	r3, [sp, #12]
9000cd78:	1d1a      	adds	r2, r3, #4
9000cd7a:	681b      	ldr	r3, [r3, #0]
9000cd7c:	9203      	str	r2, [sp, #12]
9000cd7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cd82:	3402      	adds	r4, #2
9000cd84:	9305      	str	r3, [sp, #20]
9000cd86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000ce5c <_vfiprintf_r+0x22c>
9000cd8a:	7821      	ldrb	r1, [r4, #0]
9000cd8c:	2203      	movs	r2, #3
9000cd8e:	4650      	mov	r0, sl
9000cd90:	f7f3 faa6 	bl	900002e0 <memchr>
9000cd94:	b138      	cbz	r0, 9000cda6 <_vfiprintf_r+0x176>
9000cd96:	9b04      	ldr	r3, [sp, #16]
9000cd98:	eba0 000a 	sub.w	r0, r0, sl
9000cd9c:	2240      	movs	r2, #64	@ 0x40
9000cd9e:	4082      	lsls	r2, r0
9000cda0:	4313      	orrs	r3, r2
9000cda2:	3401      	adds	r4, #1
9000cda4:	9304      	str	r3, [sp, #16]
9000cda6:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cdaa:	4829      	ldr	r0, [pc, #164]	@ (9000ce50 <_vfiprintf_r+0x220>)
9000cdac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cdb0:	2206      	movs	r2, #6
9000cdb2:	f7f3 fa95 	bl	900002e0 <memchr>
9000cdb6:	2800      	cmp	r0, #0
9000cdb8:	d03f      	beq.n	9000ce3a <_vfiprintf_r+0x20a>
9000cdba:	4b26      	ldr	r3, [pc, #152]	@ (9000ce54 <_vfiprintf_r+0x224>)
9000cdbc:	bb1b      	cbnz	r3, 9000ce06 <_vfiprintf_r+0x1d6>
9000cdbe:	9b03      	ldr	r3, [sp, #12]
9000cdc0:	3307      	adds	r3, #7
9000cdc2:	f023 0307 	bic.w	r3, r3, #7
9000cdc6:	3308      	adds	r3, #8
9000cdc8:	9303      	str	r3, [sp, #12]
9000cdca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cdcc:	443b      	add	r3, r7
9000cdce:	9309      	str	r3, [sp, #36]	@ 0x24
9000cdd0:	e76a      	b.n	9000cca8 <_vfiprintf_r+0x78>
9000cdd2:	fb0c 3202 	mla	r2, ip, r2, r3
9000cdd6:	460c      	mov	r4, r1
9000cdd8:	2001      	movs	r0, #1
9000cdda:	e7a8      	b.n	9000cd2e <_vfiprintf_r+0xfe>
9000cddc:	2300      	movs	r3, #0
9000cdde:	3401      	adds	r4, #1
9000cde0:	9305      	str	r3, [sp, #20]
9000cde2:	4619      	mov	r1, r3
9000cde4:	f04f 0c0a 	mov.w	ip, #10
9000cde8:	4620      	mov	r0, r4
9000cdea:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cdee:	3a30      	subs	r2, #48	@ 0x30
9000cdf0:	2a09      	cmp	r2, #9
9000cdf2:	d903      	bls.n	9000cdfc <_vfiprintf_r+0x1cc>
9000cdf4:	2b00      	cmp	r3, #0
9000cdf6:	d0c6      	beq.n	9000cd86 <_vfiprintf_r+0x156>
9000cdf8:	9105      	str	r1, [sp, #20]
9000cdfa:	e7c4      	b.n	9000cd86 <_vfiprintf_r+0x156>
9000cdfc:	fb0c 2101 	mla	r1, ip, r1, r2
9000ce00:	4604      	mov	r4, r0
9000ce02:	2301      	movs	r3, #1
9000ce04:	e7f0      	b.n	9000cde8 <_vfiprintf_r+0x1b8>
9000ce06:	ab03      	add	r3, sp, #12
9000ce08:	9300      	str	r3, [sp, #0]
9000ce0a:	462a      	mov	r2, r5
9000ce0c:	4b12      	ldr	r3, [pc, #72]	@ (9000ce58 <_vfiprintf_r+0x228>)
9000ce0e:	a904      	add	r1, sp, #16
9000ce10:	4630      	mov	r0, r6
9000ce12:	f3af 8000 	nop.w
9000ce16:	4607      	mov	r7, r0
9000ce18:	1c78      	adds	r0, r7, #1
9000ce1a:	d1d6      	bne.n	9000cdca <_vfiprintf_r+0x19a>
9000ce1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000ce1e:	07d9      	lsls	r1, r3, #31
9000ce20:	d405      	bmi.n	9000ce2e <_vfiprintf_r+0x1fe>
9000ce22:	89ab      	ldrh	r3, [r5, #12]
9000ce24:	059a      	lsls	r2, r3, #22
9000ce26:	d402      	bmi.n	9000ce2e <_vfiprintf_r+0x1fe>
9000ce28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000ce2a:	f7ff fd25 	bl	9000c878 <__retarget_lock_release_recursive>
9000ce2e:	89ab      	ldrh	r3, [r5, #12]
9000ce30:	065b      	lsls	r3, r3, #25
9000ce32:	f53f af1f 	bmi.w	9000cc74 <_vfiprintf_r+0x44>
9000ce36:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000ce38:	e71e      	b.n	9000cc78 <_vfiprintf_r+0x48>
9000ce3a:	ab03      	add	r3, sp, #12
9000ce3c:	9300      	str	r3, [sp, #0]
9000ce3e:	462a      	mov	r2, r5
9000ce40:	4b05      	ldr	r3, [pc, #20]	@ (9000ce58 <_vfiprintf_r+0x228>)
9000ce42:	a904      	add	r1, sp, #16
9000ce44:	4630      	mov	r0, r6
9000ce46:	f000 f879 	bl	9000cf3c <_printf_i>
9000ce4a:	e7e4      	b.n	9000ce16 <_vfiprintf_r+0x1e6>
9000ce4c:	9000fb24 	.word	0x9000fb24
9000ce50:	9000fb2e 	.word	0x9000fb2e
9000ce54:	00000000 	.word	0x00000000
9000ce58:	9000cc0b 	.word	0x9000cc0b
9000ce5c:	9000fb2a 	.word	0x9000fb2a

9000ce60 <_printf_common>:
9000ce60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ce64:	4616      	mov	r6, r2
9000ce66:	4698      	mov	r8, r3
9000ce68:	688a      	ldr	r2, [r1, #8]
9000ce6a:	690b      	ldr	r3, [r1, #16]
9000ce6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000ce70:	4293      	cmp	r3, r2
9000ce72:	bfb8      	it	lt
9000ce74:	4613      	movlt	r3, r2
9000ce76:	6033      	str	r3, [r6, #0]
9000ce78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000ce7c:	4607      	mov	r7, r0
9000ce7e:	460c      	mov	r4, r1
9000ce80:	b10a      	cbz	r2, 9000ce86 <_printf_common+0x26>
9000ce82:	3301      	adds	r3, #1
9000ce84:	6033      	str	r3, [r6, #0]
9000ce86:	6823      	ldr	r3, [r4, #0]
9000ce88:	0699      	lsls	r1, r3, #26
9000ce8a:	bf42      	ittt	mi
9000ce8c:	6833      	ldrmi	r3, [r6, #0]
9000ce8e:	3302      	addmi	r3, #2
9000ce90:	6033      	strmi	r3, [r6, #0]
9000ce92:	6825      	ldr	r5, [r4, #0]
9000ce94:	f015 0506 	ands.w	r5, r5, #6
9000ce98:	d106      	bne.n	9000cea8 <_printf_common+0x48>
9000ce9a:	f104 0a19 	add.w	sl, r4, #25
9000ce9e:	68e3      	ldr	r3, [r4, #12]
9000cea0:	6832      	ldr	r2, [r6, #0]
9000cea2:	1a9b      	subs	r3, r3, r2
9000cea4:	42ab      	cmp	r3, r5
9000cea6:	dc26      	bgt.n	9000cef6 <_printf_common+0x96>
9000cea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000ceac:	6822      	ldr	r2, [r4, #0]
9000ceae:	3b00      	subs	r3, #0
9000ceb0:	bf18      	it	ne
9000ceb2:	2301      	movne	r3, #1
9000ceb4:	0692      	lsls	r2, r2, #26
9000ceb6:	d42b      	bmi.n	9000cf10 <_printf_common+0xb0>
9000ceb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000cebc:	4641      	mov	r1, r8
9000cebe:	4638      	mov	r0, r7
9000cec0:	47c8      	blx	r9
9000cec2:	3001      	adds	r0, #1
9000cec4:	d01e      	beq.n	9000cf04 <_printf_common+0xa4>
9000cec6:	6823      	ldr	r3, [r4, #0]
9000cec8:	6922      	ldr	r2, [r4, #16]
9000ceca:	f003 0306 	and.w	r3, r3, #6
9000cece:	2b04      	cmp	r3, #4
9000ced0:	bf02      	ittt	eq
9000ced2:	68e5      	ldreq	r5, [r4, #12]
9000ced4:	6833      	ldreq	r3, [r6, #0]
9000ced6:	1aed      	subeq	r5, r5, r3
9000ced8:	68a3      	ldr	r3, [r4, #8]
9000ceda:	bf0c      	ite	eq
9000cedc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000cee0:	2500      	movne	r5, #0
9000cee2:	4293      	cmp	r3, r2
9000cee4:	bfc4      	itt	gt
9000cee6:	1a9b      	subgt	r3, r3, r2
9000cee8:	18ed      	addgt	r5, r5, r3
9000ceea:	2600      	movs	r6, #0
9000ceec:	341a      	adds	r4, #26
9000ceee:	42b5      	cmp	r5, r6
9000cef0:	d11a      	bne.n	9000cf28 <_printf_common+0xc8>
9000cef2:	2000      	movs	r0, #0
9000cef4:	e008      	b.n	9000cf08 <_printf_common+0xa8>
9000cef6:	2301      	movs	r3, #1
9000cef8:	4652      	mov	r2, sl
9000cefa:	4641      	mov	r1, r8
9000cefc:	4638      	mov	r0, r7
9000cefe:	47c8      	blx	r9
9000cf00:	3001      	adds	r0, #1
9000cf02:	d103      	bne.n	9000cf0c <_printf_common+0xac>
9000cf04:	f04f 30ff 	mov.w	r0, #4294967295
9000cf08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000cf0c:	3501      	adds	r5, #1
9000cf0e:	e7c6      	b.n	9000ce9e <_printf_common+0x3e>
9000cf10:	18e1      	adds	r1, r4, r3
9000cf12:	1c5a      	adds	r2, r3, #1
9000cf14:	2030      	movs	r0, #48	@ 0x30
9000cf16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000cf1a:	4422      	add	r2, r4
9000cf1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000cf20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000cf24:	3302      	adds	r3, #2
9000cf26:	e7c7      	b.n	9000ceb8 <_printf_common+0x58>
9000cf28:	2301      	movs	r3, #1
9000cf2a:	4622      	mov	r2, r4
9000cf2c:	4641      	mov	r1, r8
9000cf2e:	4638      	mov	r0, r7
9000cf30:	47c8      	blx	r9
9000cf32:	3001      	adds	r0, #1
9000cf34:	d0e6      	beq.n	9000cf04 <_printf_common+0xa4>
9000cf36:	3601      	adds	r6, #1
9000cf38:	e7d9      	b.n	9000ceee <_printf_common+0x8e>
	...

9000cf3c <_printf_i>:
9000cf3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000cf40:	7e0f      	ldrb	r7, [r1, #24]
9000cf42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000cf44:	2f78      	cmp	r7, #120	@ 0x78
9000cf46:	4691      	mov	r9, r2
9000cf48:	4680      	mov	r8, r0
9000cf4a:	460c      	mov	r4, r1
9000cf4c:	469a      	mov	sl, r3
9000cf4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000cf52:	d807      	bhi.n	9000cf64 <_printf_i+0x28>
9000cf54:	2f62      	cmp	r7, #98	@ 0x62
9000cf56:	d80a      	bhi.n	9000cf6e <_printf_i+0x32>
9000cf58:	2f00      	cmp	r7, #0
9000cf5a:	f000 80d1 	beq.w	9000d100 <_printf_i+0x1c4>
9000cf5e:	2f58      	cmp	r7, #88	@ 0x58
9000cf60:	f000 80b8 	beq.w	9000d0d4 <_printf_i+0x198>
9000cf64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000cf68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000cf6c:	e03a      	b.n	9000cfe4 <_printf_i+0xa8>
9000cf6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000cf72:	2b15      	cmp	r3, #21
9000cf74:	d8f6      	bhi.n	9000cf64 <_printf_i+0x28>
9000cf76:	a101      	add	r1, pc, #4	@ (adr r1, 9000cf7c <_printf_i+0x40>)
9000cf78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000cf7c:	9000cfd5 	.word	0x9000cfd5
9000cf80:	9000cfe9 	.word	0x9000cfe9
9000cf84:	9000cf65 	.word	0x9000cf65
9000cf88:	9000cf65 	.word	0x9000cf65
9000cf8c:	9000cf65 	.word	0x9000cf65
9000cf90:	9000cf65 	.word	0x9000cf65
9000cf94:	9000cfe9 	.word	0x9000cfe9
9000cf98:	9000cf65 	.word	0x9000cf65
9000cf9c:	9000cf65 	.word	0x9000cf65
9000cfa0:	9000cf65 	.word	0x9000cf65
9000cfa4:	9000cf65 	.word	0x9000cf65
9000cfa8:	9000d0e7 	.word	0x9000d0e7
9000cfac:	9000d013 	.word	0x9000d013
9000cfb0:	9000d0a1 	.word	0x9000d0a1
9000cfb4:	9000cf65 	.word	0x9000cf65
9000cfb8:	9000cf65 	.word	0x9000cf65
9000cfbc:	9000d109 	.word	0x9000d109
9000cfc0:	9000cf65 	.word	0x9000cf65
9000cfc4:	9000d013 	.word	0x9000d013
9000cfc8:	9000cf65 	.word	0x9000cf65
9000cfcc:	9000cf65 	.word	0x9000cf65
9000cfd0:	9000d0a9 	.word	0x9000d0a9
9000cfd4:	6833      	ldr	r3, [r6, #0]
9000cfd6:	1d1a      	adds	r2, r3, #4
9000cfd8:	681b      	ldr	r3, [r3, #0]
9000cfda:	6032      	str	r2, [r6, #0]
9000cfdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000cfe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000cfe4:	2301      	movs	r3, #1
9000cfe6:	e09c      	b.n	9000d122 <_printf_i+0x1e6>
9000cfe8:	6833      	ldr	r3, [r6, #0]
9000cfea:	6820      	ldr	r0, [r4, #0]
9000cfec:	1d19      	adds	r1, r3, #4
9000cfee:	6031      	str	r1, [r6, #0]
9000cff0:	0606      	lsls	r6, r0, #24
9000cff2:	d501      	bpl.n	9000cff8 <_printf_i+0xbc>
9000cff4:	681d      	ldr	r5, [r3, #0]
9000cff6:	e003      	b.n	9000d000 <_printf_i+0xc4>
9000cff8:	0645      	lsls	r5, r0, #25
9000cffa:	d5fb      	bpl.n	9000cff4 <_printf_i+0xb8>
9000cffc:	f9b3 5000 	ldrsh.w	r5, [r3]
9000d000:	2d00      	cmp	r5, #0
9000d002:	da03      	bge.n	9000d00c <_printf_i+0xd0>
9000d004:	232d      	movs	r3, #45	@ 0x2d
9000d006:	426d      	negs	r5, r5
9000d008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d00c:	4858      	ldr	r0, [pc, #352]	@ (9000d170 <_printf_i+0x234>)
9000d00e:	230a      	movs	r3, #10
9000d010:	e011      	b.n	9000d036 <_printf_i+0xfa>
9000d012:	6821      	ldr	r1, [r4, #0]
9000d014:	6833      	ldr	r3, [r6, #0]
9000d016:	0608      	lsls	r0, r1, #24
9000d018:	f853 5b04 	ldr.w	r5, [r3], #4
9000d01c:	d402      	bmi.n	9000d024 <_printf_i+0xe8>
9000d01e:	0649      	lsls	r1, r1, #25
9000d020:	bf48      	it	mi
9000d022:	b2ad      	uxthmi	r5, r5
9000d024:	2f6f      	cmp	r7, #111	@ 0x6f
9000d026:	4852      	ldr	r0, [pc, #328]	@ (9000d170 <_printf_i+0x234>)
9000d028:	6033      	str	r3, [r6, #0]
9000d02a:	bf14      	ite	ne
9000d02c:	230a      	movne	r3, #10
9000d02e:	2308      	moveq	r3, #8
9000d030:	2100      	movs	r1, #0
9000d032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000d036:	6866      	ldr	r6, [r4, #4]
9000d038:	60a6      	str	r6, [r4, #8]
9000d03a:	2e00      	cmp	r6, #0
9000d03c:	db05      	blt.n	9000d04a <_printf_i+0x10e>
9000d03e:	6821      	ldr	r1, [r4, #0]
9000d040:	432e      	orrs	r6, r5
9000d042:	f021 0104 	bic.w	r1, r1, #4
9000d046:	6021      	str	r1, [r4, #0]
9000d048:	d04b      	beq.n	9000d0e2 <_printf_i+0x1a6>
9000d04a:	4616      	mov	r6, r2
9000d04c:	fbb5 f1f3 	udiv	r1, r5, r3
9000d050:	fb03 5711 	mls	r7, r3, r1, r5
9000d054:	5dc7      	ldrb	r7, [r0, r7]
9000d056:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000d05a:	462f      	mov	r7, r5
9000d05c:	42bb      	cmp	r3, r7
9000d05e:	460d      	mov	r5, r1
9000d060:	d9f4      	bls.n	9000d04c <_printf_i+0x110>
9000d062:	2b08      	cmp	r3, #8
9000d064:	d10b      	bne.n	9000d07e <_printf_i+0x142>
9000d066:	6823      	ldr	r3, [r4, #0]
9000d068:	07df      	lsls	r7, r3, #31
9000d06a:	d508      	bpl.n	9000d07e <_printf_i+0x142>
9000d06c:	6923      	ldr	r3, [r4, #16]
9000d06e:	6861      	ldr	r1, [r4, #4]
9000d070:	4299      	cmp	r1, r3
9000d072:	bfde      	ittt	le
9000d074:	2330      	movle	r3, #48	@ 0x30
9000d076:	f806 3c01 	strble.w	r3, [r6, #-1]
9000d07a:	f106 36ff 	addle.w	r6, r6, #4294967295
9000d07e:	1b92      	subs	r2, r2, r6
9000d080:	6122      	str	r2, [r4, #16]
9000d082:	f8cd a000 	str.w	sl, [sp]
9000d086:	464b      	mov	r3, r9
9000d088:	aa03      	add	r2, sp, #12
9000d08a:	4621      	mov	r1, r4
9000d08c:	4640      	mov	r0, r8
9000d08e:	f7ff fee7 	bl	9000ce60 <_printf_common>
9000d092:	3001      	adds	r0, #1
9000d094:	d14a      	bne.n	9000d12c <_printf_i+0x1f0>
9000d096:	f04f 30ff 	mov.w	r0, #4294967295
9000d09a:	b004      	add	sp, #16
9000d09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d0a0:	6823      	ldr	r3, [r4, #0]
9000d0a2:	f043 0320 	orr.w	r3, r3, #32
9000d0a6:	6023      	str	r3, [r4, #0]
9000d0a8:	4832      	ldr	r0, [pc, #200]	@ (9000d174 <_printf_i+0x238>)
9000d0aa:	2778      	movs	r7, #120	@ 0x78
9000d0ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000d0b0:	6823      	ldr	r3, [r4, #0]
9000d0b2:	6831      	ldr	r1, [r6, #0]
9000d0b4:	061f      	lsls	r7, r3, #24
9000d0b6:	f851 5b04 	ldr.w	r5, [r1], #4
9000d0ba:	d402      	bmi.n	9000d0c2 <_printf_i+0x186>
9000d0bc:	065f      	lsls	r7, r3, #25
9000d0be:	bf48      	it	mi
9000d0c0:	b2ad      	uxthmi	r5, r5
9000d0c2:	6031      	str	r1, [r6, #0]
9000d0c4:	07d9      	lsls	r1, r3, #31
9000d0c6:	bf44      	itt	mi
9000d0c8:	f043 0320 	orrmi.w	r3, r3, #32
9000d0cc:	6023      	strmi	r3, [r4, #0]
9000d0ce:	b11d      	cbz	r5, 9000d0d8 <_printf_i+0x19c>
9000d0d0:	2310      	movs	r3, #16
9000d0d2:	e7ad      	b.n	9000d030 <_printf_i+0xf4>
9000d0d4:	4826      	ldr	r0, [pc, #152]	@ (9000d170 <_printf_i+0x234>)
9000d0d6:	e7e9      	b.n	9000d0ac <_printf_i+0x170>
9000d0d8:	6823      	ldr	r3, [r4, #0]
9000d0da:	f023 0320 	bic.w	r3, r3, #32
9000d0de:	6023      	str	r3, [r4, #0]
9000d0e0:	e7f6      	b.n	9000d0d0 <_printf_i+0x194>
9000d0e2:	4616      	mov	r6, r2
9000d0e4:	e7bd      	b.n	9000d062 <_printf_i+0x126>
9000d0e6:	6833      	ldr	r3, [r6, #0]
9000d0e8:	6825      	ldr	r5, [r4, #0]
9000d0ea:	6961      	ldr	r1, [r4, #20]
9000d0ec:	1d18      	adds	r0, r3, #4
9000d0ee:	6030      	str	r0, [r6, #0]
9000d0f0:	062e      	lsls	r6, r5, #24
9000d0f2:	681b      	ldr	r3, [r3, #0]
9000d0f4:	d501      	bpl.n	9000d0fa <_printf_i+0x1be>
9000d0f6:	6019      	str	r1, [r3, #0]
9000d0f8:	e002      	b.n	9000d100 <_printf_i+0x1c4>
9000d0fa:	0668      	lsls	r0, r5, #25
9000d0fc:	d5fb      	bpl.n	9000d0f6 <_printf_i+0x1ba>
9000d0fe:	8019      	strh	r1, [r3, #0]
9000d100:	2300      	movs	r3, #0
9000d102:	6123      	str	r3, [r4, #16]
9000d104:	4616      	mov	r6, r2
9000d106:	e7bc      	b.n	9000d082 <_printf_i+0x146>
9000d108:	6833      	ldr	r3, [r6, #0]
9000d10a:	1d1a      	adds	r2, r3, #4
9000d10c:	6032      	str	r2, [r6, #0]
9000d10e:	681e      	ldr	r6, [r3, #0]
9000d110:	6862      	ldr	r2, [r4, #4]
9000d112:	2100      	movs	r1, #0
9000d114:	4630      	mov	r0, r6
9000d116:	f7f3 f8e3 	bl	900002e0 <memchr>
9000d11a:	b108      	cbz	r0, 9000d120 <_printf_i+0x1e4>
9000d11c:	1b80      	subs	r0, r0, r6
9000d11e:	6060      	str	r0, [r4, #4]
9000d120:	6863      	ldr	r3, [r4, #4]
9000d122:	6123      	str	r3, [r4, #16]
9000d124:	2300      	movs	r3, #0
9000d126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d12a:	e7aa      	b.n	9000d082 <_printf_i+0x146>
9000d12c:	6923      	ldr	r3, [r4, #16]
9000d12e:	4632      	mov	r2, r6
9000d130:	4649      	mov	r1, r9
9000d132:	4640      	mov	r0, r8
9000d134:	47d0      	blx	sl
9000d136:	3001      	adds	r0, #1
9000d138:	d0ad      	beq.n	9000d096 <_printf_i+0x15a>
9000d13a:	6823      	ldr	r3, [r4, #0]
9000d13c:	079b      	lsls	r3, r3, #30
9000d13e:	d413      	bmi.n	9000d168 <_printf_i+0x22c>
9000d140:	68e0      	ldr	r0, [r4, #12]
9000d142:	9b03      	ldr	r3, [sp, #12]
9000d144:	4298      	cmp	r0, r3
9000d146:	bfb8      	it	lt
9000d148:	4618      	movlt	r0, r3
9000d14a:	e7a6      	b.n	9000d09a <_printf_i+0x15e>
9000d14c:	2301      	movs	r3, #1
9000d14e:	4632      	mov	r2, r6
9000d150:	4649      	mov	r1, r9
9000d152:	4640      	mov	r0, r8
9000d154:	47d0      	blx	sl
9000d156:	3001      	adds	r0, #1
9000d158:	d09d      	beq.n	9000d096 <_printf_i+0x15a>
9000d15a:	3501      	adds	r5, #1
9000d15c:	68e3      	ldr	r3, [r4, #12]
9000d15e:	9903      	ldr	r1, [sp, #12]
9000d160:	1a5b      	subs	r3, r3, r1
9000d162:	42ab      	cmp	r3, r5
9000d164:	dcf2      	bgt.n	9000d14c <_printf_i+0x210>
9000d166:	e7eb      	b.n	9000d140 <_printf_i+0x204>
9000d168:	2500      	movs	r5, #0
9000d16a:	f104 0619 	add.w	r6, r4, #25
9000d16e:	e7f5      	b.n	9000d15c <_printf_i+0x220>
9000d170:	9000fb35 	.word	0x9000fb35
9000d174:	9000fb46 	.word	0x9000fb46

9000d178 <__sflush_r>:
9000d178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d180:	0716      	lsls	r6, r2, #28
9000d182:	4605      	mov	r5, r0
9000d184:	460c      	mov	r4, r1
9000d186:	d454      	bmi.n	9000d232 <__sflush_r+0xba>
9000d188:	684b      	ldr	r3, [r1, #4]
9000d18a:	2b00      	cmp	r3, #0
9000d18c:	dc02      	bgt.n	9000d194 <__sflush_r+0x1c>
9000d18e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d190:	2b00      	cmp	r3, #0
9000d192:	dd48      	ble.n	9000d226 <__sflush_r+0xae>
9000d194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d196:	2e00      	cmp	r6, #0
9000d198:	d045      	beq.n	9000d226 <__sflush_r+0xae>
9000d19a:	2300      	movs	r3, #0
9000d19c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d1a0:	682f      	ldr	r7, [r5, #0]
9000d1a2:	6a21      	ldr	r1, [r4, #32]
9000d1a4:	602b      	str	r3, [r5, #0]
9000d1a6:	d030      	beq.n	9000d20a <__sflush_r+0x92>
9000d1a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d1aa:	89a3      	ldrh	r3, [r4, #12]
9000d1ac:	0759      	lsls	r1, r3, #29
9000d1ae:	d505      	bpl.n	9000d1bc <__sflush_r+0x44>
9000d1b0:	6863      	ldr	r3, [r4, #4]
9000d1b2:	1ad2      	subs	r2, r2, r3
9000d1b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d1b6:	b10b      	cbz	r3, 9000d1bc <__sflush_r+0x44>
9000d1b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d1ba:	1ad2      	subs	r2, r2, r3
9000d1bc:	2300      	movs	r3, #0
9000d1be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d1c0:	6a21      	ldr	r1, [r4, #32]
9000d1c2:	4628      	mov	r0, r5
9000d1c4:	47b0      	blx	r6
9000d1c6:	1c43      	adds	r3, r0, #1
9000d1c8:	89a3      	ldrh	r3, [r4, #12]
9000d1ca:	d106      	bne.n	9000d1da <__sflush_r+0x62>
9000d1cc:	6829      	ldr	r1, [r5, #0]
9000d1ce:	291d      	cmp	r1, #29
9000d1d0:	d82b      	bhi.n	9000d22a <__sflush_r+0xb2>
9000d1d2:	4a2a      	ldr	r2, [pc, #168]	@ (9000d27c <__sflush_r+0x104>)
9000d1d4:	40ca      	lsrs	r2, r1
9000d1d6:	07d6      	lsls	r6, r2, #31
9000d1d8:	d527      	bpl.n	9000d22a <__sflush_r+0xb2>
9000d1da:	2200      	movs	r2, #0
9000d1dc:	6062      	str	r2, [r4, #4]
9000d1de:	04d9      	lsls	r1, r3, #19
9000d1e0:	6922      	ldr	r2, [r4, #16]
9000d1e2:	6022      	str	r2, [r4, #0]
9000d1e4:	d504      	bpl.n	9000d1f0 <__sflush_r+0x78>
9000d1e6:	1c42      	adds	r2, r0, #1
9000d1e8:	d101      	bne.n	9000d1ee <__sflush_r+0x76>
9000d1ea:	682b      	ldr	r3, [r5, #0]
9000d1ec:	b903      	cbnz	r3, 9000d1f0 <__sflush_r+0x78>
9000d1ee:	6560      	str	r0, [r4, #84]	@ 0x54
9000d1f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d1f2:	602f      	str	r7, [r5, #0]
9000d1f4:	b1b9      	cbz	r1, 9000d226 <__sflush_r+0xae>
9000d1f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d1fa:	4299      	cmp	r1, r3
9000d1fc:	d002      	beq.n	9000d204 <__sflush_r+0x8c>
9000d1fe:	4628      	mov	r0, r5
9000d200:	f7ff fb4a 	bl	9000c898 <_free_r>
9000d204:	2300      	movs	r3, #0
9000d206:	6363      	str	r3, [r4, #52]	@ 0x34
9000d208:	e00d      	b.n	9000d226 <__sflush_r+0xae>
9000d20a:	2301      	movs	r3, #1
9000d20c:	4628      	mov	r0, r5
9000d20e:	47b0      	blx	r6
9000d210:	4602      	mov	r2, r0
9000d212:	1c50      	adds	r0, r2, #1
9000d214:	d1c9      	bne.n	9000d1aa <__sflush_r+0x32>
9000d216:	682b      	ldr	r3, [r5, #0]
9000d218:	2b00      	cmp	r3, #0
9000d21a:	d0c6      	beq.n	9000d1aa <__sflush_r+0x32>
9000d21c:	2b1d      	cmp	r3, #29
9000d21e:	d001      	beq.n	9000d224 <__sflush_r+0xac>
9000d220:	2b16      	cmp	r3, #22
9000d222:	d11e      	bne.n	9000d262 <__sflush_r+0xea>
9000d224:	602f      	str	r7, [r5, #0]
9000d226:	2000      	movs	r0, #0
9000d228:	e022      	b.n	9000d270 <__sflush_r+0xf8>
9000d22a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d22e:	b21b      	sxth	r3, r3
9000d230:	e01b      	b.n	9000d26a <__sflush_r+0xf2>
9000d232:	690f      	ldr	r7, [r1, #16]
9000d234:	2f00      	cmp	r7, #0
9000d236:	d0f6      	beq.n	9000d226 <__sflush_r+0xae>
9000d238:	0793      	lsls	r3, r2, #30
9000d23a:	680e      	ldr	r6, [r1, #0]
9000d23c:	bf08      	it	eq
9000d23e:	694b      	ldreq	r3, [r1, #20]
9000d240:	600f      	str	r7, [r1, #0]
9000d242:	bf18      	it	ne
9000d244:	2300      	movne	r3, #0
9000d246:	eba6 0807 	sub.w	r8, r6, r7
9000d24a:	608b      	str	r3, [r1, #8]
9000d24c:	f1b8 0f00 	cmp.w	r8, #0
9000d250:	dde9      	ble.n	9000d226 <__sflush_r+0xae>
9000d252:	6a21      	ldr	r1, [r4, #32]
9000d254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d256:	4643      	mov	r3, r8
9000d258:	463a      	mov	r2, r7
9000d25a:	4628      	mov	r0, r5
9000d25c:	47b0      	blx	r6
9000d25e:	2800      	cmp	r0, #0
9000d260:	dc08      	bgt.n	9000d274 <__sflush_r+0xfc>
9000d262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d26a:	81a3      	strh	r3, [r4, #12]
9000d26c:	f04f 30ff 	mov.w	r0, #4294967295
9000d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d274:	4407      	add	r7, r0
9000d276:	eba8 0800 	sub.w	r8, r8, r0
9000d27a:	e7e7      	b.n	9000d24c <__sflush_r+0xd4>
9000d27c:	20400001 	.word	0x20400001

9000d280 <_fflush_r>:
9000d280:	b538      	push	{r3, r4, r5, lr}
9000d282:	690b      	ldr	r3, [r1, #16]
9000d284:	4605      	mov	r5, r0
9000d286:	460c      	mov	r4, r1
9000d288:	b913      	cbnz	r3, 9000d290 <_fflush_r+0x10>
9000d28a:	2500      	movs	r5, #0
9000d28c:	4628      	mov	r0, r5
9000d28e:	bd38      	pop	{r3, r4, r5, pc}
9000d290:	b118      	cbz	r0, 9000d29a <_fflush_r+0x1a>
9000d292:	6a03      	ldr	r3, [r0, #32]
9000d294:	b90b      	cbnz	r3, 9000d29a <_fflush_r+0x1a>
9000d296:	f7ff f8c5 	bl	9000c424 <__sinit>
9000d29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d29e:	2b00      	cmp	r3, #0
9000d2a0:	d0f3      	beq.n	9000d28a <_fflush_r+0xa>
9000d2a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d2a4:	07d0      	lsls	r0, r2, #31
9000d2a6:	d404      	bmi.n	9000d2b2 <_fflush_r+0x32>
9000d2a8:	0599      	lsls	r1, r3, #22
9000d2aa:	d402      	bmi.n	9000d2b2 <_fflush_r+0x32>
9000d2ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d2ae:	f7ff fae2 	bl	9000c876 <__retarget_lock_acquire_recursive>
9000d2b2:	4628      	mov	r0, r5
9000d2b4:	4621      	mov	r1, r4
9000d2b6:	f7ff ff5f 	bl	9000d178 <__sflush_r>
9000d2ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d2bc:	07da      	lsls	r2, r3, #31
9000d2be:	4605      	mov	r5, r0
9000d2c0:	d4e4      	bmi.n	9000d28c <_fflush_r+0xc>
9000d2c2:	89a3      	ldrh	r3, [r4, #12]
9000d2c4:	059b      	lsls	r3, r3, #22
9000d2c6:	d4e1      	bmi.n	9000d28c <_fflush_r+0xc>
9000d2c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d2ca:	f7ff fad5 	bl	9000c878 <__retarget_lock_release_recursive>
9000d2ce:	e7dd      	b.n	9000d28c <_fflush_r+0xc>

9000d2d0 <__swhatbuf_r>:
9000d2d0:	b570      	push	{r4, r5, r6, lr}
9000d2d2:	460c      	mov	r4, r1
9000d2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d2d8:	2900      	cmp	r1, #0
9000d2da:	b096      	sub	sp, #88	@ 0x58
9000d2dc:	4615      	mov	r5, r2
9000d2de:	461e      	mov	r6, r3
9000d2e0:	da0d      	bge.n	9000d2fe <__swhatbuf_r+0x2e>
9000d2e2:	89a3      	ldrh	r3, [r4, #12]
9000d2e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000d2e8:	f04f 0100 	mov.w	r1, #0
9000d2ec:	bf14      	ite	ne
9000d2ee:	2340      	movne	r3, #64	@ 0x40
9000d2f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000d2f4:	2000      	movs	r0, #0
9000d2f6:	6031      	str	r1, [r6, #0]
9000d2f8:	602b      	str	r3, [r5, #0]
9000d2fa:	b016      	add	sp, #88	@ 0x58
9000d2fc:	bd70      	pop	{r4, r5, r6, pc}
9000d2fe:	466a      	mov	r2, sp
9000d300:	f000 f862 	bl	9000d3c8 <_fstat_r>
9000d304:	2800      	cmp	r0, #0
9000d306:	dbec      	blt.n	9000d2e2 <__swhatbuf_r+0x12>
9000d308:	9901      	ldr	r1, [sp, #4]
9000d30a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000d30e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000d312:	4259      	negs	r1, r3
9000d314:	4159      	adcs	r1, r3
9000d316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000d31a:	e7eb      	b.n	9000d2f4 <__swhatbuf_r+0x24>

9000d31c <__smakebuf_r>:
9000d31c:	898b      	ldrh	r3, [r1, #12]
9000d31e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000d320:	079d      	lsls	r5, r3, #30
9000d322:	4606      	mov	r6, r0
9000d324:	460c      	mov	r4, r1
9000d326:	d507      	bpl.n	9000d338 <__smakebuf_r+0x1c>
9000d328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000d32c:	6023      	str	r3, [r4, #0]
9000d32e:	6123      	str	r3, [r4, #16]
9000d330:	2301      	movs	r3, #1
9000d332:	6163      	str	r3, [r4, #20]
9000d334:	b003      	add	sp, #12
9000d336:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000d338:	ab01      	add	r3, sp, #4
9000d33a:	466a      	mov	r2, sp
9000d33c:	f7ff ffc8 	bl	9000d2d0 <__swhatbuf_r>
9000d340:	9f00      	ldr	r7, [sp, #0]
9000d342:	4605      	mov	r5, r0
9000d344:	4639      	mov	r1, r7
9000d346:	4630      	mov	r0, r6
9000d348:	f7fe ff54 	bl	9000c1f4 <_malloc_r>
9000d34c:	b948      	cbnz	r0, 9000d362 <__smakebuf_r+0x46>
9000d34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d352:	059a      	lsls	r2, r3, #22
9000d354:	d4ee      	bmi.n	9000d334 <__smakebuf_r+0x18>
9000d356:	f023 0303 	bic.w	r3, r3, #3
9000d35a:	f043 0302 	orr.w	r3, r3, #2
9000d35e:	81a3      	strh	r3, [r4, #12]
9000d360:	e7e2      	b.n	9000d328 <__smakebuf_r+0xc>
9000d362:	89a3      	ldrh	r3, [r4, #12]
9000d364:	6020      	str	r0, [r4, #0]
9000d366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d36a:	81a3      	strh	r3, [r4, #12]
9000d36c:	9b01      	ldr	r3, [sp, #4]
9000d36e:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000d372:	b15b      	cbz	r3, 9000d38c <__smakebuf_r+0x70>
9000d374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d378:	4630      	mov	r0, r6
9000d37a:	f000 f837 	bl	9000d3ec <_isatty_r>
9000d37e:	b128      	cbz	r0, 9000d38c <__smakebuf_r+0x70>
9000d380:	89a3      	ldrh	r3, [r4, #12]
9000d382:	f023 0303 	bic.w	r3, r3, #3
9000d386:	f043 0301 	orr.w	r3, r3, #1
9000d38a:	81a3      	strh	r3, [r4, #12]
9000d38c:	89a3      	ldrh	r3, [r4, #12]
9000d38e:	431d      	orrs	r5, r3
9000d390:	81a5      	strh	r5, [r4, #12]
9000d392:	e7cf      	b.n	9000d334 <__smakebuf_r+0x18>

9000d394 <memmove>:
9000d394:	4288      	cmp	r0, r1
9000d396:	b510      	push	{r4, lr}
9000d398:	eb01 0402 	add.w	r4, r1, r2
9000d39c:	d902      	bls.n	9000d3a4 <memmove+0x10>
9000d39e:	4284      	cmp	r4, r0
9000d3a0:	4623      	mov	r3, r4
9000d3a2:	d807      	bhi.n	9000d3b4 <memmove+0x20>
9000d3a4:	1e43      	subs	r3, r0, #1
9000d3a6:	42a1      	cmp	r1, r4
9000d3a8:	d008      	beq.n	9000d3bc <memmove+0x28>
9000d3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
9000d3ae:	f803 2f01 	strb.w	r2, [r3, #1]!
9000d3b2:	e7f8      	b.n	9000d3a6 <memmove+0x12>
9000d3b4:	4402      	add	r2, r0
9000d3b6:	4601      	mov	r1, r0
9000d3b8:	428a      	cmp	r2, r1
9000d3ba:	d100      	bne.n	9000d3be <memmove+0x2a>
9000d3bc:	bd10      	pop	{r4, pc}
9000d3be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000d3c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000d3c6:	e7f7      	b.n	9000d3b8 <memmove+0x24>

9000d3c8 <_fstat_r>:
9000d3c8:	b538      	push	{r3, r4, r5, lr}
9000d3ca:	4d07      	ldr	r5, [pc, #28]	@ (9000d3e8 <_fstat_r+0x20>)
9000d3cc:	2300      	movs	r3, #0
9000d3ce:	4604      	mov	r4, r0
9000d3d0:	4608      	mov	r0, r1
9000d3d2:	4611      	mov	r1, r2
9000d3d4:	602b      	str	r3, [r5, #0]
9000d3d6:	f7f3 fe28 	bl	9000102a <_fstat>
9000d3da:	1c43      	adds	r3, r0, #1
9000d3dc:	d102      	bne.n	9000d3e4 <_fstat_r+0x1c>
9000d3de:	682b      	ldr	r3, [r5, #0]
9000d3e0:	b103      	cbz	r3, 9000d3e4 <_fstat_r+0x1c>
9000d3e2:	6023      	str	r3, [r4, #0]
9000d3e4:	bd38      	pop	{r3, r4, r5, pc}
9000d3e6:	bf00      	nop
9000d3e8:	20001490 	.word	0x20001490

9000d3ec <_isatty_r>:
9000d3ec:	b538      	push	{r3, r4, r5, lr}
9000d3ee:	4d06      	ldr	r5, [pc, #24]	@ (9000d408 <_isatty_r+0x1c>)
9000d3f0:	2300      	movs	r3, #0
9000d3f2:	4604      	mov	r4, r0
9000d3f4:	4608      	mov	r0, r1
9000d3f6:	602b      	str	r3, [r5, #0]
9000d3f8:	f7f3 fe27 	bl	9000104a <_isatty>
9000d3fc:	1c43      	adds	r3, r0, #1
9000d3fe:	d102      	bne.n	9000d406 <_isatty_r+0x1a>
9000d400:	682b      	ldr	r3, [r5, #0]
9000d402:	b103      	cbz	r3, 9000d406 <_isatty_r+0x1a>
9000d404:	6023      	str	r3, [r4, #0]
9000d406:	bd38      	pop	{r3, r4, r5, pc}
9000d408:	20001490 	.word	0x20001490

9000d40c <_realloc_r>:
9000d40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d410:	4607      	mov	r7, r0
9000d412:	4614      	mov	r4, r2
9000d414:	460d      	mov	r5, r1
9000d416:	b921      	cbnz	r1, 9000d422 <_realloc_r+0x16>
9000d418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d41c:	4611      	mov	r1, r2
9000d41e:	f7fe bee9 	b.w	9000c1f4 <_malloc_r>
9000d422:	b92a      	cbnz	r2, 9000d430 <_realloc_r+0x24>
9000d424:	f7ff fa38 	bl	9000c898 <_free_r>
9000d428:	4625      	mov	r5, r4
9000d42a:	4628      	mov	r0, r5
9000d42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d430:	f000 f81a 	bl	9000d468 <_malloc_usable_size_r>
9000d434:	4284      	cmp	r4, r0
9000d436:	4606      	mov	r6, r0
9000d438:	d802      	bhi.n	9000d440 <_realloc_r+0x34>
9000d43a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000d43e:	d8f4      	bhi.n	9000d42a <_realloc_r+0x1e>
9000d440:	4621      	mov	r1, r4
9000d442:	4638      	mov	r0, r7
9000d444:	f7fe fed6 	bl	9000c1f4 <_malloc_r>
9000d448:	4680      	mov	r8, r0
9000d44a:	b908      	cbnz	r0, 9000d450 <_realloc_r+0x44>
9000d44c:	4645      	mov	r5, r8
9000d44e:	e7ec      	b.n	9000d42a <_realloc_r+0x1e>
9000d450:	42b4      	cmp	r4, r6
9000d452:	4622      	mov	r2, r4
9000d454:	4629      	mov	r1, r5
9000d456:	bf28      	it	cs
9000d458:	4632      	movcs	r2, r6
9000d45a:	f7ff fa0e 	bl	9000c87a <memcpy>
9000d45e:	4629      	mov	r1, r5
9000d460:	4638      	mov	r0, r7
9000d462:	f7ff fa19 	bl	9000c898 <_free_r>
9000d466:	e7f1      	b.n	9000d44c <_realloc_r+0x40>

9000d468 <_malloc_usable_size_r>:
9000d468:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d46c:	1f18      	subs	r0, r3, #4
9000d46e:	2b00      	cmp	r3, #0
9000d470:	bfbc      	itt	lt
9000d472:	580b      	ldrlt	r3, [r1, r0]
9000d474:	18c0      	addlt	r0, r0, r3
9000d476:	4770      	bx	lr

9000d478 <_init>:
9000d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d47a:	bf00      	nop
9000d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d47e:	bc08      	pop	{r3}
9000d480:	469e      	mov	lr, r3
9000d482:	4770      	bx	lr

9000d484 <_fini>:
9000d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d486:	bf00      	nop
9000d488:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d48a:	bc08      	pop	{r3}
9000d48c:	469e      	mov	lr, r3
9000d48e:	4770      	bx	lr
