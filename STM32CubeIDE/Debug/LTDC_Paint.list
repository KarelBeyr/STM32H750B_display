
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d880  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002538  9000db20  9000db20  0000eb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  90010058  90010058  000120fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  90010058  90010058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  90010060  90010060  000120fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  90010060  90010060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  90010064  90010064  00011064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  90010068  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  20000100  90010164  00012100  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20001538  90010164  00012538  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000120fc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002b774  00000000  00000000  0001212a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000068  00000000  00000000  0003d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002bae5  00000000  00000000  0003d906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000530f  00000000  00000000  000693eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002160  00000000  00000000  0006e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018dd47  00000000  00000000  00070860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000019f5  00000000  00000000  001fe5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000407b5  00000000  00000000  001fff9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00240751  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097a4  00000000  00000000  00240794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	20000100 	.word	0x20000100
900002bc:	00000000 	.word	0x00000000
900002c0:	9000db08 	.word	0x9000db08

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	20000104 	.word	0x20000104
900002dc:	9000db08 	.word	0x9000db08

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900006ac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 900006e8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900006b0:	f003 f900 	bl	900038b4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900006b4:	f003 f89c 	bl	900037f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900006b8:	480c      	ldr	r0, [pc, #48]	@ (900006ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900006ba:	490d      	ldr	r1, [pc, #52]	@ (900006f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900006bc:	4a0d      	ldr	r2, [pc, #52]	@ (900006f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
900006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
900006c0:	e002      	b.n	900006c8 <LoopCopyDataInit>

900006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900006c6:	3304      	adds	r3, #4

900006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
900006cc:	d3f9      	bcc.n	900006c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900006ce:	4a0a      	ldr	r2, [pc, #40]	@ (900006f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900006d0:	4c0a      	ldr	r4, [pc, #40]	@ (900006fc <LoopFillZerobss+0x22>)
  movs r3, #0
900006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
900006d4:	e001      	b.n	900006da <LoopFillZerobss>

900006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900006d8:	3204      	adds	r2, #4

900006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
900006dc:	d3fb      	bcc.n	900006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
900006de:	f00c fda3 	bl	9000d228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900006e2:	f000 f891 	bl	90000808 <main>
  bx  lr
900006e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900006e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
900006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
900006f0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
900006f4:	90010068 	.word	0x90010068
  ldr r2, =_sbss
900006f8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
900006fc:	20001538 	.word	0x20001538

90000700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000700:	e7fe      	b.n	90000700 <ADC3_IRQHandler>
	...

90000704 <__io_putchar>:
static void MPU_Config(void);
static void GPIO_Init(void);
static void MX_USART3_UART_Init(void);
void readFlexiKeyboard();

int __io_putchar(int ch) {
90000704:	b580      	push	{r7, lr}
90000706:	b082      	sub	sp, #8
90000708:	af00      	add	r7, sp, #0
9000070a:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
9000070c:	1d39      	adds	r1, r7, #4
9000070e:	f04f 33ff 	mov.w	r3, #4294967295
90000712:	2201      	movs	r2, #1
90000714:	4806      	ldr	r0, [pc, #24]	@ (90000730 <__io_putchar+0x2c>)
90000716:	f00a f933 	bl	9000a980 <HAL_UART_Transmit>
9000071a:	4603      	mov	r3, r0
9000071c:	2b00      	cmp	r3, #0
9000071e:	d002      	beq.n	90000726 <__io_putchar+0x22>
    return -1;
90000720:	f04f 33ff 	mov.w	r3, #4294967295
90000724:	e000      	b.n	90000728 <__io_putchar+0x24>
  }
  return ch;
90000726:	687b      	ldr	r3, [r7, #4]
}
90000728:	4618      	mov	r0, r3
9000072a:	3708      	adds	r7, #8
9000072c:	46bd      	mov	sp, r7
9000072e:	bd80      	pop	{r7, pc}
90000730:	2000012c 	.word	0x2000012c

90000734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
90000734:	b580      	push	{r7, lr}
90000736:	b0ba      	sub	sp, #232	@ 0xe8
90000738:	af00      	add	r7, sp, #0
9000073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000073c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000740:	2200      	movs	r2, #0
90000742:	601a      	str	r2, [r3, #0]
90000744:	605a      	str	r2, [r3, #4]
90000746:	609a      	str	r2, [r3, #8]
90000748:	60da      	str	r2, [r3, #12]
9000074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000074c:	f107 0310 	add.w	r3, r7, #16
90000750:	22c0      	movs	r2, #192	@ 0xc0
90000752:	2100      	movs	r1, #0
90000754:	4618      	mov	r0, r3
90000756:	f00c fd03 	bl	9000d160 <memset>
  if(huart->Instance==USART3)
9000075a:	687b      	ldr	r3, [r7, #4]
9000075c:	681b      	ldr	r3, [r3, #0]
9000075e:	4a27      	ldr	r2, [pc, #156]	@ (900007fc <HAL_UART_MspInit+0xc8>)
90000760:	4293      	cmp	r3, r2
90000762:	d146      	bne.n	900007f2 <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000764:	f04f 0202 	mov.w	r2, #2
90000768:	f04f 0300 	mov.w	r3, #0
9000076c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000770:	2300      	movs	r3, #0
90000772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000776:	f107 0310 	add.w	r3, r7, #16
9000077a:	4618      	mov	r0, r3
9000077c:	f008 f87a 	bl	90008874 <HAL_RCCEx_PeriphCLKConfig>
90000780:	4603      	mov	r3, r0
90000782:	2b00      	cmp	r3, #0
90000784:	d001      	beq.n	9000078a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000786:	f000 faa3 	bl	90000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
9000078a:	4b1d      	ldr	r3, [pc, #116]	@ (90000800 <HAL_UART_MspInit+0xcc>)
9000078c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000790:	4a1b      	ldr	r2, [pc, #108]	@ (90000800 <HAL_UART_MspInit+0xcc>)
90000792:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000796:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
9000079a:	4b19      	ldr	r3, [pc, #100]	@ (90000800 <HAL_UART_MspInit+0xcc>)
9000079c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
900007a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
900007a4:	60fb      	str	r3, [r7, #12]
900007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
900007a8:	4b15      	ldr	r3, [pc, #84]	@ (90000800 <HAL_UART_MspInit+0xcc>)
900007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900007ae:	4a14      	ldr	r2, [pc, #80]	@ (90000800 <HAL_UART_MspInit+0xcc>)
900007b0:	f043 0302 	orr.w	r3, r3, #2
900007b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900007b8:	4b11      	ldr	r3, [pc, #68]	@ (90000800 <HAL_UART_MspInit+0xcc>)
900007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900007be:	f003 0302 	and.w	r3, r3, #2
900007c2:	60bb      	str	r3, [r7, #8]
900007c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
900007c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
900007ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900007ce:	2302      	movs	r3, #2
900007d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900007d4:	2300      	movs	r3, #0
900007d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900007da:	2300      	movs	r3, #0
900007dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
900007e0:	2307      	movs	r3, #7
900007e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900007e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
900007ea:	4619      	mov	r1, r3
900007ec:	4805      	ldr	r0, [pc, #20]	@ (90000804 <HAL_UART_MspInit+0xd0>)
900007ee:	f003 fdb1 	bl	90004354 <HAL_GPIO_Init>
  }

}
900007f2:	bf00      	nop
900007f4:	37e8      	adds	r7, #232	@ 0xe8
900007f6:	46bd      	mov	sp, r7
900007f8:	bd80      	pop	{r7, pc}
900007fa:	bf00      	nop
900007fc:	40004800 	.word	0x40004800
90000800:	58024400 	.word	0x58024400
90000804:	58020400 	.word	0x58020400

90000808 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000808:	b580      	push	{r7, lr}
9000080a:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
9000080c:	f000 fbfa 	bl	90001004 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
90000810:	f000 fb66 	bl	90000ee0 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
90000814:	f003 f866 	bl	900038e4 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000818:	f000 fa5e 	bl	90000cd8 <SystemClock_Config>

  GPIO_Init();
9000081c:	f000 f8d8 	bl	900009d0 <GPIO_Init>
  MX_USART3_UART_Init();
90000820:	f000 fa0a 	bl	90000c38 <MX_USART3_UART_Init>

 printf("Hi there :)!\r\n");
90000824:	481f      	ldr	r0, [pc, #124]	@ (900008a4 <main+0x9c>)
90000826:	f00c fbbb 	bl	9000cfa0 <puts>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
9000082a:	2000      	movs	r0, #0
9000082c:	f001 f9c2 	bl	90001bb4 <BSP_LED_Init>

  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90000830:	2101      	movs	r1, #1
90000832:	2000      	movs	r0, #0
90000834:	f001 fe72 	bl	9000251c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000838:	481b      	ldr	r0, [pc, #108]	@ (900008a8 <main+0xa0>)
9000083a:	f00b fe7f 	bl	9000c53c <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
9000083e:	2000      	movs	r0, #0
90000840:	f00b fed2 	bl	9000c5e8 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000844:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000848:	f00b ff44 	bl	9000c6d4 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
9000084c:	4917      	ldr	r1, [pc, #92]	@ (900008ac <main+0xa4>)
9000084e:	2000      	movs	r0, #0
90000850:	f002 f81e 	bl	90002890 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90000854:	4916      	ldr	r1, [pc, #88]	@ (900008b0 <main+0xa8>)
90000856:	2000      	movs	r0, #0
90000858:	f002 f838 	bl	900028cc <BSP_LCD_GetYSize>

  hTS->Width = x_size;
9000085c:	4b15      	ldr	r3, [pc, #84]	@ (900008b4 <main+0xac>)
9000085e:	681b      	ldr	r3, [r3, #0]
90000860:	4a12      	ldr	r2, [pc, #72]	@ (900008ac <main+0xa4>)
90000862:	6812      	ldr	r2, [r2, #0]
90000864:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
90000866:	4b13      	ldr	r3, [pc, #76]	@ (900008b4 <main+0xac>)
90000868:	681b      	ldr	r3, [r3, #0]
9000086a:	4a11      	ldr	r2, [pc, #68]	@ (900008b0 <main+0xa8>)
9000086c:	6812      	ldr	r2, [r2, #0]
9000086e:	605a      	str	r2, [r3, #4]
  hTS->Orientation =TS_SWAP_XY ;
90000870:	4b10      	ldr	r3, [pc, #64]	@ (900008b4 <main+0xac>)
90000872:	681b      	ldr	r3, [r3, #0]
90000874:	2208      	movs	r2, #8
90000876:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
90000878:	4b0e      	ldr	r3, [pc, #56]	@ (900008b4 <main+0xac>)
9000087a:	681b      	ldr	r3, [r3, #0]
9000087c:	2205      	movs	r2, #5
9000087e:	60da      	str	r2, [r3, #12]
  /* Touchscreen initialization */
  BSP_TS_Init(0, hTS);
90000880:	4b0c      	ldr	r3, [pc, #48]	@ (900008b4 <main+0xac>)
90000882:	681b      	ldr	r3, [r3, #0]
90000884:	4619      	mov	r1, r3
90000886:	2000      	movs	r0, #0
90000888:	f002 fea8 	bl	900035dc <BSP_TS_Init>


  /*##-6- Draw the menu ######################################################*/
  //CPU_CACHE_Disable();
  Draw_Menu();
9000088c:	f000 f9a4 	bl	90000bd8 <Draw_Menu>
  CPU_CACHE_Enable();
90000890:	f000 fb26 	bl	90000ee0 <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
  {

	  HAL_Delay(100);
90000894:	2064      	movs	r0, #100	@ 0x64
90000896:	f003 f8bf 	bl	90003a18 <HAL_Delay>
	  readFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
9000089a:	f000 f84d 	bl	90000938 <readFlexiKeyboard>
	  HAL_Delay(100);
9000089e:	bf00      	nop
900008a0:	e7f8      	b.n	90000894 <main+0x8c>
900008a2:	bf00      	nop
900008a4:	9000db20 	.word	0x9000db20
900008a8:	9000dc20 	.word	0x9000dc20
900008ac:	20000120 	.word	0x20000120
900008b0:	20000124 	.word	0x20000124
900008b4:	20000128 	.word	0x20000128

900008b8 <setAllRowsInactive>:
//	  printf("Level %d\r\n", l);
  }
}

void setAllRowsInactive(void)
{
900008b8:	b580      	push	{r7, lr}
900008ba:	b082      	sub	sp, #8
900008bc:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
900008be:	2300      	movs	r3, #0
900008c0:	607b      	str	r3, [r7, #4]
900008c2:	e00f      	b.n	900008e4 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_SET);
900008c4:	4a0b      	ldr	r2, [pc, #44]	@ (900008f4 <setAllRowsInactive+0x3c>)
900008c6:	687b      	ldr	r3, [r7, #4]
900008c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
900008cc:	4a09      	ldr	r2, [pc, #36]	@ (900008f4 <setAllRowsInactive+0x3c>)
900008ce:	687b      	ldr	r3, [r7, #4]
900008d0:	00db      	lsls	r3, r3, #3
900008d2:	4413      	add	r3, r2
900008d4:	889b      	ldrh	r3, [r3, #4]
900008d6:	2201      	movs	r2, #1
900008d8:	4619      	mov	r1, r3
900008da:	f004 f80d 	bl	900048f8 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
900008de:	687b      	ldr	r3, [r7, #4]
900008e0:	3301      	adds	r3, #1
900008e2:	607b      	str	r3, [r7, #4]
900008e4:	687b      	ldr	r3, [r7, #4]
900008e6:	2b04      	cmp	r3, #4
900008e8:	ddec      	ble.n	900008c4 <setAllRowsInactive+0xc>
    }
}
900008ea:	bf00      	nop
900008ec:	bf00      	nop
900008ee:	3708      	adds	r7, #8
900008f0:	46bd      	mov	sp, r7
900008f2:	bd80      	pop	{r7, pc}
900008f4:	20000000 	.word	0x20000000

900008f8 <setRowActive>:

void setRowActive(int row)
{
900008f8:	b580      	push	{r7, lr}
900008fa:	b082      	sub	sp, #8
900008fc:	af00      	add	r7, sp, #0
900008fe:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
90000900:	687b      	ldr	r3, [r7, #4]
90000902:	2b00      	cmp	r3, #0
90000904:	db12      	blt.n	9000092c <setRowActive+0x34>
90000906:	687b      	ldr	r3, [r7, #4]
90000908:	2b04      	cmp	r3, #4
9000090a:	dc0f      	bgt.n	9000092c <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000090c:	f7ff ffd4 	bl	900008b8 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_RESET);
90000910:	4a08      	ldr	r2, [pc, #32]	@ (90000934 <setRowActive+0x3c>)
90000912:	687b      	ldr	r3, [r7, #4]
90000914:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
90000918:	4a06      	ldr	r2, [pc, #24]	@ (90000934 <setRowActive+0x3c>)
9000091a:	687b      	ldr	r3, [r7, #4]
9000091c:	00db      	lsls	r3, r3, #3
9000091e:	4413      	add	r3, r2
90000920:	889b      	ldrh	r3, [r3, #4]
90000922:	2200      	movs	r2, #0
90000924:	4619      	mov	r1, r3
90000926:	f003 ffe7 	bl	900048f8 <HAL_GPIO_WritePin>
9000092a:	e000      	b.n	9000092e <setRowActive+0x36>
        return;
9000092c:	bf00      	nop
}
9000092e:	3708      	adds	r7, #8
90000930:	46bd      	mov	sp, r7
90000932:	bd80      	pop	{r7, pc}
90000934:	20000000 	.word	0x20000000

90000938 <readFlexiKeyboard>:

void readFlexiKeyboard(void)
{
90000938:	b580      	push	{r7, lr}
9000093a:	b082      	sub	sp, #8
9000093c:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000093e:	2300      	movs	r3, #0
90000940:	607b      	str	r3, [r7, #4]
90000942:	e034      	b.n	900009ae <readFlexiKeyboard+0x76>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
90000944:	6878      	ldr	r0, [r7, #4]
90000946:	f7ff ffd7 	bl	900008f8 <setRowActive>
        HAL_Delay(5);         // Small delay for settling
9000094a:	2005      	movs	r0, #5
9000094c:	f003 f864 	bl	90003a18 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
90000950:	2300      	movs	r3, #0
90000952:	603b      	str	r3, [r7, #0]
90000954:	e025      	b.n	900009a2 <readFlexiKeyboard+0x6a>
        {
        	//if (col == 3) break;
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_RESET)
90000956:	4a1a      	ldr	r2, [pc, #104]	@ (900009c0 <readFlexiKeyboard+0x88>)
90000958:	683b      	ldr	r3, [r7, #0]
9000095a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000095e:	4918      	ldr	r1, [pc, #96]	@ (900009c0 <readFlexiKeyboard+0x88>)
90000960:	683b      	ldr	r3, [r7, #0]
90000962:	00db      	lsls	r3, r3, #3
90000964:	440b      	add	r3, r1
90000966:	889b      	ldrh	r3, [r3, #4]
90000968:	4619      	mov	r1, r3
9000096a:	4610      	mov	r0, r2
9000096c:	f003 ffac 	bl	900048c8 <HAL_GPIO_ReadPin>
90000970:	4603      	mov	r3, r0
90000972:	2b00      	cmp	r3, #0
90000974:	d112      	bne.n	9000099c <readFlexiKeyboard+0x64>
//                lastRow = row;
//                lastCol = col;
//                lastTriggerTime = now;

                // Key at (row, col) pressed!
                receivedChar = keymap[row][col];
90000976:	4913      	ldr	r1, [pc, #76]	@ (900009c4 <readFlexiKeyboard+0x8c>)
90000978:	687a      	ldr	r2, [r7, #4]
9000097a:	4613      	mov	r3, r2
9000097c:	009b      	lsls	r3, r3, #2
9000097e:	4413      	add	r3, r2
90000980:	18ca      	adds	r2, r1, r3
90000982:	683b      	ldr	r3, [r7, #0]
90000984:	4413      	add	r3, r2
90000986:	781a      	ldrb	r2, [r3, #0]
90000988:	4b0f      	ldr	r3, [pc, #60]	@ (900009c8 <readFlexiKeyboard+0x90>)
9000098a:	701a      	strb	r2, [r3, #0]
                printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
9000098c:	4b0e      	ldr	r3, [pc, #56]	@ (900009c8 <readFlexiKeyboard+0x90>)
9000098e:	781b      	ldrb	r3, [r3, #0]
90000990:	683a      	ldr	r2, [r7, #0]
90000992:	6879      	ldr	r1, [r7, #4]
90000994:	480d      	ldr	r0, [pc, #52]	@ (900009cc <readFlexiKeyboard+0x94>)
90000996:	f00c fa9b 	bl	9000ced0 <iprintf>
//                    .type = EVENT_KEY_PRESSED,
//                    .key = receivedChar
//                };

                // handle_event(&ctx, &evt); // Uncomment if needed
                break; // Optionally break to avoid multiple key detections per scan
9000099a:	e005      	b.n	900009a8 <readFlexiKeyboard+0x70>
        for (int col = 0; col < NUM_COLS; col++)
9000099c:	683b      	ldr	r3, [r7, #0]
9000099e:	3301      	adds	r3, #1
900009a0:	603b      	str	r3, [r7, #0]
900009a2:	683b      	ldr	r3, [r7, #0]
900009a4:	2b04      	cmp	r3, #4
900009a6:	ddd6      	ble.n	90000956 <readFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
900009a8:	687b      	ldr	r3, [r7, #4]
900009aa:	3301      	adds	r3, #1
900009ac:	607b      	str	r3, [r7, #4]
900009ae:	687b      	ldr	r3, [r7, #4]
900009b0:	2b04      	cmp	r3, #4
900009b2:	ddc7      	ble.n	90000944 <readFlexiKeyboard+0xc>
            }
        }

        //setAllRowsInactive();  // Set all rows HIGH before next row scan
    }
}
900009b4:	bf00      	nop
900009b6:	bf00      	nop
900009b8:	3708      	adds	r7, #8
900009ba:	46bd      	mov	sp, r7
900009bc:	bd80      	pop	{r7, pc}
900009be:	bf00      	nop
900009c0:	20000028 	.word	0x20000028
900009c4:	9000db78 	.word	0x9000db78
900009c8:	2000011c 	.word	0x2000011c
900009cc:	9000db30 	.word	0x9000db30

900009d0 <GPIO_Init>:

static void GPIO_Init(void)
{
900009d0:	b580      	push	{r7, lr}
900009d2:	b092      	sub	sp, #72	@ 0x48
900009d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
900009d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
900009da:	2200      	movs	r2, #0
900009dc:	601a      	str	r2, [r3, #0]
900009de:	605a      	str	r2, [r3, #4]
900009e0:	609a      	str	r2, [r3, #8]
900009e2:	60da      	str	r2, [r3, #12]
900009e4:	611a      	str	r2, [r3, #16]
	 __HAL_RCC_GPIOI_CLK_ENABLE();
900009e6:	4b79      	ldr	r3, [pc, #484]	@ (90000bcc <GPIO_Init+0x1fc>)
900009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900009ec:	4a77      	ldr	r2, [pc, #476]	@ (90000bcc <GPIO_Init+0x1fc>)
900009ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900009f6:	4b75      	ldr	r3, [pc, #468]	@ (90000bcc <GPIO_Init+0x1fc>)
900009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900009fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
90000a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	  __HAL_RCC_GPIOB_CLK_ENABLE();
90000a04:	4b71      	ldr	r3, [pc, #452]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a0a:	4a70      	ldr	r2, [pc, #448]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a0c:	f043 0302 	orr.w	r3, r3, #2
90000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000a14:	4b6d      	ldr	r3, [pc, #436]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a1a:	f003 0302 	and.w	r3, r3, #2
90000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
90000a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	  __HAL_RCC_GPIOK_CLK_ENABLE();
90000a22:	4b6a      	ldr	r3, [pc, #424]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a28:	4a68      	ldr	r2, [pc, #416]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000a32:	4b66      	ldr	r3, [pc, #408]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90000a3c:	623b      	str	r3, [r7, #32]
90000a3e:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
90000a40:	4b62      	ldr	r3, [pc, #392]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a46:	4a61      	ldr	r2, [pc, #388]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000a50:	4b5e      	ldr	r3, [pc, #376]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90000a5a:	61fb      	str	r3, [r7, #28]
90000a5c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
90000a5e:	4b5b      	ldr	r3, [pc, #364]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a64:	4a59      	ldr	r2, [pc, #356]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a66:	f043 0304 	orr.w	r3, r3, #4
90000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000a6e:	4b57      	ldr	r3, [pc, #348]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a74:	f003 0304 	and.w	r3, r3, #4
90000a78:	61bb      	str	r3, [r7, #24]
90000a7a:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
90000a7c:	4b53      	ldr	r3, [pc, #332]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a82:	4a52      	ldr	r2, [pc, #328]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a84:	f043 0310 	orr.w	r3, r3, #16
90000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000a8c:	4b4f      	ldr	r3, [pc, #316]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000a92:	f003 0310 	and.w	r3, r3, #16
90000a96:	617b      	str	r3, [r7, #20]
90000a98:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOJ_CLK_ENABLE();
90000a9a:	4b4c      	ldr	r3, [pc, #304]	@ (90000bcc <GPIO_Init+0x1fc>)
90000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000aa0:	4a4a      	ldr	r2, [pc, #296]	@ (90000bcc <GPIO_Init+0x1fc>)
90000aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000aaa:	4b48      	ldr	r3, [pc, #288]	@ (90000bcc <GPIO_Init+0x1fc>)
90000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90000ab4:	613b      	str	r3, [r7, #16]
90000ab6:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
90000ab8:	4b44      	ldr	r3, [pc, #272]	@ (90000bcc <GPIO_Init+0x1fc>)
90000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000abe:	4a43      	ldr	r2, [pc, #268]	@ (90000bcc <GPIO_Init+0x1fc>)
90000ac0:	f043 0308 	orr.w	r3, r3, #8
90000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000ac8:	4b40      	ldr	r3, [pc, #256]	@ (90000bcc <GPIO_Init+0x1fc>)
90000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000ace:	f003 0308 	and.w	r3, r3, #8
90000ad2:	60fb      	str	r3, [r7, #12]
90000ad4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
90000ad6:	4b3d      	ldr	r3, [pc, #244]	@ (90000bcc <GPIO_Init+0x1fc>)
90000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000adc:	4a3b      	ldr	r2, [pc, #236]	@ (90000bcc <GPIO_Init+0x1fc>)
90000ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000ae6:	4b39      	ldr	r3, [pc, #228]	@ (90000bcc <GPIO_Init+0x1fc>)
90000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90000af0:	60bb      	str	r3, [r7, #8]
90000af2:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
90000af4:	4b35      	ldr	r3, [pc, #212]	@ (90000bcc <GPIO_Init+0x1fc>)
90000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000afa:	4a34      	ldr	r2, [pc, #208]	@ (90000bcc <GPIO_Init+0x1fc>)
90000afc:	f043 0301 	orr.w	r3, r3, #1
90000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000b04:	4b31      	ldr	r3, [pc, #196]	@ (90000bcc <GPIO_Init+0x1fc>)
90000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b0a:	f003 0301 	and.w	r3, r3, #1
90000b0e:	607b      	str	r3, [r7, #4]
90000b10:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
90000b12:	4b2e      	ldr	r3, [pc, #184]	@ (90000bcc <GPIO_Init+0x1fc>)
90000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b18:	4a2c      	ldr	r2, [pc, #176]	@ (90000bcc <GPIO_Init+0x1fc>)
90000b1a:	f043 0320 	orr.w	r3, r3, #32
90000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000b22:	4b2a      	ldr	r3, [pc, #168]	@ (90000bcc <GPIO_Init+0x1fc>)
90000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b28:	f003 0320 	and.w	r3, r3, #32
90000b2c:	603b      	str	r3, [r7, #0]
90000b2e:	683b      	ldr	r3, [r7, #0]
//	  /*Configure GPIO pin Output Level */
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);


	    // --- Configure row pins as OUTPUT ---
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000b30:	2301      	movs	r3, #1
90000b32:	633b      	str	r3, [r7, #48]	@ 0x30
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b34:	2300      	movs	r3, #0
90000b36:	637b      	str	r3, [r7, #52]	@ 0x34
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b38:	2300      	movs	r3, #0
90000b3a:	63bb      	str	r3, [r7, #56]	@ 0x38

	    for (int i = 0; i < NUM_ROWS; i++) {
90000b3c:	2300      	movs	r3, #0
90000b3e:	647b      	str	r3, [r7, #68]	@ 0x44
90000b40:	e01f      	b.n	90000b82 <GPIO_Init+0x1b2>
	        GPIO_InitStruct.Pin = rowPins[i].pin;
90000b42:	4a23      	ldr	r2, [pc, #140]	@ (90000bd0 <GPIO_Init+0x200>)
90000b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
90000b46:	00db      	lsls	r3, r3, #3
90000b48:	4413      	add	r3, r2
90000b4a:	889b      	ldrh	r3, [r3, #4]
90000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
90000b4e:	4a20      	ldr	r2, [pc, #128]	@ (90000bd0 <GPIO_Init+0x200>)
90000b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
90000b52:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90000b56:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90000b5a:	4611      	mov	r1, r2
90000b5c:	4618      	mov	r0, r3
90000b5e:	f003 fbf9 	bl	90004354 <HAL_GPIO_Init>

	        // Set initial output state (HIGH = inactive)
	        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
90000b62:	4a1b      	ldr	r2, [pc, #108]	@ (90000bd0 <GPIO_Init+0x200>)
90000b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
90000b66:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
90000b6a:	4a19      	ldr	r2, [pc, #100]	@ (90000bd0 <GPIO_Init+0x200>)
90000b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
90000b6e:	00db      	lsls	r3, r3, #3
90000b70:	4413      	add	r3, r2
90000b72:	889b      	ldrh	r3, [r3, #4]
90000b74:	2200      	movs	r2, #0
90000b76:	4619      	mov	r1, r3
90000b78:	f003 febe 	bl	900048f8 <HAL_GPIO_WritePin>
	    for (int i = 0; i < NUM_ROWS; i++) {
90000b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
90000b7e:	3301      	adds	r3, #1
90000b80:	647b      	str	r3, [r7, #68]	@ 0x44
90000b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
90000b84:	2b04      	cmp	r3, #4
90000b86:	dddc      	ble.n	90000b42 <GPIO_Init+0x172>
	    }

	    // --- Configure column pins as INPUT with PULL-UP ---
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000b88:	2300      	movs	r3, #0
90000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
90000b8c:	2301      	movs	r3, #1
90000b8e:	637b      	str	r3, [r7, #52]	@ 0x34

	    for (int i = 0; i < NUM_COLS; i++) {
90000b90:	2300      	movs	r3, #0
90000b92:	643b      	str	r3, [r7, #64]	@ 0x40
90000b94:	e012      	b.n	90000bbc <GPIO_Init+0x1ec>
	        GPIO_InitStruct.Pin = colPins[i].pin;
90000b96:	4a0f      	ldr	r2, [pc, #60]	@ (90000bd4 <GPIO_Init+0x204>)
90000b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000b9a:	00db      	lsls	r3, r3, #3
90000b9c:	4413      	add	r3, r2
90000b9e:	889b      	ldrh	r3, [r3, #4]
90000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
90000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (90000bd4 <GPIO_Init+0x204>)
90000ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000ba6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90000baa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90000bae:	4611      	mov	r1, r2
90000bb0:	4618      	mov	r0, r3
90000bb2:	f003 fbcf 	bl	90004354 <HAL_GPIO_Init>
	    for (int i = 0; i < NUM_COLS; i++) {
90000bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000bb8:	3301      	adds	r3, #1
90000bba:	643b      	str	r3, [r7, #64]	@ 0x40
90000bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000bbe:	2b04      	cmp	r3, #4
90000bc0:	dde9      	ble.n	90000b96 <GPIO_Init+0x1c6>
	    }
}
90000bc2:	bf00      	nop
90000bc4:	bf00      	nop
90000bc6:	3748      	adds	r7, #72	@ 0x48
90000bc8:	46bd      	mov	sp, r7
90000bca:	bd80      	pop	{r7, pc}
90000bcc:	58024400 	.word	0x58024400
90000bd0:	20000000 	.word	0x20000000
90000bd4:	20000028 	.word	0x20000028

90000bd8 <Draw_Menu>:
  * @brief  Draws the menu.
  * @param  None
  * @retval None
  */
static void Draw_Menu(void)
{ 
90000bd8:	b580      	push	{r7, lr}
90000bda:	b082      	sub	sp, #8
90000bdc:	af00      	add	r7, sp, #0
  UTIL_LCD_SetLayer(0);
90000bde:	2000      	movs	r0, #0
90000be0:	f00b fd02 	bl	9000c5e8 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000be4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000be8:	f00b fd74 	bl	9000c6d4 <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90000bec:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90000bf0:	f00b fd18 	bl	9000c624 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90000bf4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000bf8:	f00b fd28 	bl	9000c64c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90000bfc:	480c      	ldr	r0, [pc, #48]	@ (90000c30 <Draw_Menu+0x58>)
90000bfe:	f00b fd39 	bl	9000c674 <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
90000c02:	2300      	movs	r3, #0
90000c04:	607b      	str	r3, [r7, #4]
90000c06:	e00a      	b.n	90000c1e <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Hello Jaja! Hello zabak", LEFT_MODE);
90000c08:	687b      	ldr	r3, [r7, #4]
90000c0a:	015b      	lsls	r3, r3, #5
90000c0c:	4619      	mov	r1, r3
90000c0e:	2303      	movs	r3, #3
90000c10:	4a08      	ldr	r2, [pc, #32]	@ (90000c34 <Draw_Menu+0x5c>)
90000c12:	2000      	movs	r0, #0
90000c14:	f00b fdaa 	bl	9000c76c <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90000c18:	687b      	ldr	r3, [r7, #4]
90000c1a:	3301      	adds	r3, #1
90000c1c:	607b      	str	r3, [r7, #4]
90000c1e:	687b      	ldr	r3, [r7, #4]
90000c20:	2b07      	cmp	r3, #7
90000c22:	ddf1      	ble.n	90000c08 <Draw_Menu+0x30>
  }
}
90000c24:	bf00      	nop
90000c26:	bf00      	nop
90000c28:	3708      	adds	r7, #8
90000c2a:	46bd      	mov	sp, r7
90000c2c:	bd80      	pop	{r7, pc}
90000c2e:	bf00      	nop
90000c30:	20000098 	.word	0x20000098
90000c34:	9000db60 	.word	0x9000db60

90000c38 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
90000c38:	b580      	push	{r7, lr}
90000c3a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000c3c:	4b22      	ldr	r3, [pc, #136]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c3e:	4a23      	ldr	r2, [pc, #140]	@ (90000ccc <MX_USART3_UART_Init+0x94>)
90000c40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000c42:	4b21      	ldr	r3, [pc, #132]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000c48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c4c:	2200      	movs	r2, #0
90000c4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000c50:	4b1d      	ldr	r3, [pc, #116]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c52:	2200      	movs	r2, #0
90000c54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000c56:	4b1c      	ldr	r3, [pc, #112]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c58:	2200      	movs	r2, #0
90000c5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c5e:	220c      	movs	r2, #12
90000c60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000c62:	4b19      	ldr	r3, [pc, #100]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c64:	2200      	movs	r2, #0
90000c66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000c68:	4b17      	ldr	r3, [pc, #92]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c6a:	2200      	movs	r2, #0
90000c6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000c6e:	4b16      	ldr	r3, [pc, #88]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c70:	2200      	movs	r2, #0
90000c72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000c74:	4b14      	ldr	r3, [pc, #80]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c76:	2200      	movs	r2, #0
90000c78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000c7a:	4b13      	ldr	r3, [pc, #76]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c7c:	2200      	movs	r2, #0
90000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000c80:	4811      	ldr	r0, [pc, #68]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c82:	f009 fe2d 	bl	9000a8e0 <HAL_UART_Init>
90000c86:	4603      	mov	r3, r0
90000c88:	2b00      	cmp	r3, #0
90000c8a:	d001      	beq.n	90000c90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000c8c:	f000 f820 	bl	90000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000c90:	2100      	movs	r1, #0
90000c92:	480d      	ldr	r0, [pc, #52]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000c94:	f00a fec3 	bl	9000ba1e <HAL_UARTEx_SetTxFifoThreshold>
90000c98:	4603      	mov	r3, r0
90000c9a:	2b00      	cmp	r3, #0
90000c9c:	d001      	beq.n	90000ca2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000c9e:	f000 f817 	bl	90000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ca2:	2100      	movs	r1, #0
90000ca4:	4808      	ldr	r0, [pc, #32]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000ca6:	f00a fef8 	bl	9000ba9a <HAL_UARTEx_SetRxFifoThreshold>
90000caa:	4603      	mov	r3, r0
90000cac:	2b00      	cmp	r3, #0
90000cae:	d001      	beq.n	90000cb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000cb0:	f000 f80e 	bl	90000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000cb4:	4804      	ldr	r0, [pc, #16]	@ (90000cc8 <MX_USART3_UART_Init+0x90>)
90000cb6:	f00a fe79 	bl	9000b9ac <HAL_UARTEx_DisableFifoMode>
90000cba:	4603      	mov	r3, r0
90000cbc:	2b00      	cmp	r3, #0
90000cbe:	d001      	beq.n	90000cc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000cc0:	f000 f806 	bl	90000cd0 <Error_Handler>
  }
}
90000cc4:	bf00      	nop
90000cc6:	bd80      	pop	{r7, pc}
90000cc8:	2000012c 	.word	0x2000012c
90000ccc:	40004800 	.word	0x40004800

90000cd0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000cd0:	b480      	push	{r7}
90000cd2:	af00      	add	r7, sp, #0
  while(1)
90000cd4:	bf00      	nop
90000cd6:	e7fd      	b.n	90000cd4 <Error_Handler+0x4>

90000cd8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000cd8:	b580      	push	{r7, lr}
90000cda:	b0ce      	sub	sp, #312	@ 0x138
90000cdc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000cde:	2300      	movs	r3, #0
90000ce0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000ce4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ce8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000cec:	2200      	movs	r2, #0
90000cee:	601a      	str	r2, [r3, #0]
90000cf0:	4b78      	ldr	r3, [pc, #480]	@ (90000ed4 <SystemClock_Config+0x1fc>)
90000cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000cf4:	4a77      	ldr	r2, [pc, #476]	@ (90000ed4 <SystemClock_Config+0x1fc>)
90000cf6:	f023 0301 	bic.w	r3, r3, #1
90000cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000cfc:	4b75      	ldr	r3, [pc, #468]	@ (90000ed4 <SystemClock_Config+0x1fc>)
90000cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000d00:	f003 0201 	and.w	r2, r3, #1
90000d04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000d0c:	601a      	str	r2, [r3, #0]
90000d0e:	4b72      	ldr	r3, [pc, #456]	@ (90000ed8 <SystemClock_Config+0x200>)
90000d10:	699b      	ldr	r3, [r3, #24]
90000d12:	4a71      	ldr	r2, [pc, #452]	@ (90000ed8 <SystemClock_Config+0x200>)
90000d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000d18:	6193      	str	r3, [r2, #24]
90000d1a:	4b6f      	ldr	r3, [pc, #444]	@ (90000ed8 <SystemClock_Config+0x200>)
90000d1c:	699b      	ldr	r3, [r3, #24]
90000d1e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000d22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000d2a:	601a      	str	r2, [r3, #0]
90000d2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000d34:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000d36:	bf00      	nop
90000d38:	4b67      	ldr	r3, [pc, #412]	@ (90000ed8 <SystemClock_Config+0x200>)
90000d3a:	699b      	ldr	r3, [r3, #24]
90000d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000d44:	d1f8      	bne.n	90000d38 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000d46:	2301      	movs	r3, #1
90000d48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000d54:	2300      	movs	r3, #0
90000d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000d5a:	2300      	movs	r3, #0
90000d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000d60:	2302      	movs	r3, #2
90000d62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000d66:	2302      	movs	r3, #2
90000d68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000d6c:	2305      	movs	r3, #5
90000d6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000d72:	23a0      	movs	r3, #160	@ 0xa0
90000d74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000d78:	2300      	movs	r3, #0
90000d7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000d7e:	2302      	movs	r3, #2
90000d80:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000d84:	2302      	movs	r3, #2
90000d86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000d8a:	2304      	movs	r3, #4
90000d8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000d90:	2300      	movs	r3, #0
90000d92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000d96:	2308      	movs	r3, #8
90000d98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000d9c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000da0:	4618      	mov	r0, r3
90000da2:	f006 fd81 	bl	900078a8 <HAL_RCC_OscConfig>
90000da6:	4603      	mov	r3, r0
90000da8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000dac:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000db0:	2b00      	cmp	r3, #0
90000db2:	d001      	beq.n	90000db8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000db4:	f7ff ff8c 	bl	90000cd0 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000db8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000dbc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000dc0:	2205      	movs	r2, #5
90000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000dc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000dc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000dcc:	2260      	movs	r2, #96	@ 0x60
90000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000dd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000dd4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000dd8:	2202      	movs	r2, #2
90000dda:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000de0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000de4:	220a      	movs	r2, #10
90000de6:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000de8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000dec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000df0:	2212      	movs	r2, #18
90000df2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000df4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000df8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000dfc:	2200      	movs	r2, #0
90000dfe:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000e00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e04:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000e08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000e0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e12:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000e16:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000e1a:	f04f 0300 	mov.w	r3, #0
90000e1e:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000e22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000e2a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000e32:	f107 0308 	add.w	r3, r7, #8
90000e36:	4618      	mov	r0, r3
90000e38:	f007 fd1c 	bl	90008874 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000e3c:	233f      	movs	r3, #63	@ 0x3f
90000e3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000e42:	2303      	movs	r3, #3
90000e44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000e48:	2300      	movs	r3, #0
90000e4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000e4e:	2308      	movs	r3, #8
90000e50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000e54:	2340      	movs	r3, #64	@ 0x40
90000e56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000e5a:	2340      	movs	r3, #64	@ 0x40
90000e5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000e64:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000e68:	2340      	movs	r3, #64	@ 0x40
90000e6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000e6e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000e72:	2104      	movs	r1, #4
90000e74:	4618      	mov	r0, r3
90000e76:	f007 f971 	bl	9000815c <HAL_RCC_ClockConfig>
90000e7a:	4603      	mov	r3, r0
90000e7c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000e80:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000e84:	2b00      	cmp	r3, #0
90000e86:	d001      	beq.n	90000e8c <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000e88:	f7ff ff22 	bl	90000cd0 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000e8c:	4b13      	ldr	r3, [pc, #76]	@ (90000edc <SystemClock_Config+0x204>)
90000e8e:	681b      	ldr	r3, [r3, #0]
90000e90:	4a12      	ldr	r2, [pc, #72]	@ (90000edc <SystemClock_Config+0x204>)
90000e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000e96:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000e98:	4b10      	ldr	r3, [pc, #64]	@ (90000edc <SystemClock_Config+0x204>)
90000e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000e9e:	4a0f      	ldr	r2, [pc, #60]	@ (90000edc <SystemClock_Config+0x204>)
90000ea0:	f043 0302 	orr.w	r3, r3, #2
90000ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (90000edc <SystemClock_Config+0x204>)
90000eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000eae:	f003 0202 	and.w	r2, r3, #2
90000eb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000eb6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000eba:	601a      	str	r2, [r3, #0]
90000ebc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ec0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000ec4:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000ec6:	f002 fdd7 	bl	90003a78 <HAL_EnableCompensationCell>
}
90000eca:	bf00      	nop
90000ecc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000ed0:	46bd      	mov	sp, r7
90000ed2:	bd80      	pop	{r7, pc}
90000ed4:	58000400 	.word	0x58000400
90000ed8:	58024800 	.word	0x58024800
90000edc:	58024400 	.word	0x58024400

90000ee0 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000ee0:	b480      	push	{r7}
90000ee2:	b085      	sub	sp, #20
90000ee4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000ee6:	4b34      	ldr	r3, [pc, #208]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000ee8:	695b      	ldr	r3, [r3, #20]
90000eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000eee:	2b00      	cmp	r3, #0
90000ef0:	d11b      	bne.n	90000f2a <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000ef2:	f3bf 8f4f 	dsb	sy
}
90000ef6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000ef8:	f3bf 8f6f 	isb	sy
}
90000efc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000efe:	4b2e      	ldr	r3, [pc, #184]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f00:	2200      	movs	r2, #0
90000f02:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000f06:	f3bf 8f4f 	dsb	sy
}
90000f0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000f0c:	f3bf 8f6f 	isb	sy
}
90000f10:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000f12:	4b29      	ldr	r3, [pc, #164]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f14:	695b      	ldr	r3, [r3, #20]
90000f16:	4a28      	ldr	r2, [pc, #160]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000f1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000f1e:	f3bf 8f4f 	dsb	sy
}
90000f22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000f24:	f3bf 8f6f 	isb	sy
}
90000f28:	e000      	b.n	90000f2c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000f2a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000f2c:	4b22      	ldr	r3, [pc, #136]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f2e:	695b      	ldr	r3, [r3, #20]
90000f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000f34:	2b00      	cmp	r3, #0
90000f36:	d138      	bne.n	90000faa <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000f38:	4b1f      	ldr	r3, [pc, #124]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f3a:	2200      	movs	r2, #0
90000f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000f40:	f3bf 8f4f 	dsb	sy
}
90000f44:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000f46:	4b1c      	ldr	r3, [pc, #112]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000f4c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000f4e:	68fb      	ldr	r3, [r7, #12]
90000f50:	0b5b      	lsrs	r3, r3, #13
90000f52:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000f56:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000f58:	68fb      	ldr	r3, [r7, #12]
90000f5a:	08db      	lsrs	r3, r3, #3
90000f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000f60:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000f62:	68bb      	ldr	r3, [r7, #8]
90000f64:	015a      	lsls	r2, r3, #5
90000f66:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000f6a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000f6c:	687a      	ldr	r2, [r7, #4]
90000f6e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000f70:	4911      	ldr	r1, [pc, #68]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f72:	4313      	orrs	r3, r2
90000f74:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000f78:	687b      	ldr	r3, [r7, #4]
90000f7a:	1e5a      	subs	r2, r3, #1
90000f7c:	607a      	str	r2, [r7, #4]
90000f7e:	2b00      	cmp	r3, #0
90000f80:	d1ef      	bne.n	90000f62 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000f82:	68bb      	ldr	r3, [r7, #8]
90000f84:	1e5a      	subs	r2, r3, #1
90000f86:	60ba      	str	r2, [r7, #8]
90000f88:	2b00      	cmp	r3, #0
90000f8a:	d1e5      	bne.n	90000f58 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000f8c:	f3bf 8f4f 	dsb	sy
}
90000f90:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000f92:	4b09      	ldr	r3, [pc, #36]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f94:	695b      	ldr	r3, [r3, #20]
90000f96:	4a08      	ldr	r2, [pc, #32]	@ (90000fb8 <CPU_CACHE_Enable+0xd8>)
90000f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000f9c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000f9e:	f3bf 8f4f 	dsb	sy
}
90000fa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000fa4:	f3bf 8f6f 	isb	sy
}
90000fa8:	e000      	b.n	90000fac <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000faa:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000fac:	bf00      	nop
90000fae:	3714      	adds	r7, #20
90000fb0:	46bd      	mov	sp, r7
90000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fb6:	4770      	bx	lr
90000fb8:	e000ed00 	.word	0xe000ed00

90000fbc <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000fbc:	b580      	push	{r7, lr}
90000fbe:	b082      	sub	sp, #8
90000fc0:	af00      	add	r7, sp, #0
90000fc2:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000fc4:	490e      	ldr	r1, [pc, #56]	@ (90001000 <MX_LTDC_ClockConfig+0x44>)
90000fc6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000fca:	f04f 0300 	mov.w	r3, #0
90000fce:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (90001000 <MX_LTDC_ClockConfig+0x44>)
90000fd4:	2205      	movs	r2, #5
90000fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000fd8:	4b09      	ldr	r3, [pc, #36]	@ (90001000 <MX_LTDC_ClockConfig+0x44>)
90000fda:	22c0      	movs	r2, #192	@ 0xc0
90000fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000fde:	4b08      	ldr	r3, [pc, #32]	@ (90001000 <MX_LTDC_ClockConfig+0x44>)
90000fe0:	2202      	movs	r2, #2
90000fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000fe4:	4b06      	ldr	r3, [pc, #24]	@ (90001000 <MX_LTDC_ClockConfig+0x44>)
90000fe6:	2214      	movs	r2, #20
90000fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000fea:	4b05      	ldr	r3, [pc, #20]	@ (90001000 <MX_LTDC_ClockConfig+0x44>)
90000fec:	2263      	movs	r2, #99	@ 0x63
90000fee:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000ff0:	4803      	ldr	r0, [pc, #12]	@ (90001000 <MX_LTDC_ClockConfig+0x44>)
90000ff2:	f007 fc3f 	bl	90008874 <HAL_RCCEx_PeriphCLKConfig>
90000ff6:	4603      	mov	r3, r0
}
90000ff8:	4618      	mov	r0, r3
90000ffa:	3708      	adds	r7, #8
90000ffc:	46bd      	mov	sp, r7
90000ffe:	bd80      	pop	{r7, pc}
90001000:	200001c0 	.word	0x200001c0

90001004 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90001004:	b580      	push	{r7, lr}
90001006:	b084      	sub	sp, #16
90001008:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
9000100a:	f002 fe55 	bl	90003cb8 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000100e:	2301      	movs	r3, #1
90001010:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90001012:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001016:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90001018:	2318      	movs	r3, #24
9000101a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
9000101c:	2303      	movs	r3, #3
9000101e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90001020:	2300      	movs	r3, #0
90001022:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90001024:	2301      	movs	r3, #1
90001026:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90001028:	2300      	movs	r3, #0
9000102a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
9000102c:	2301      	movs	r3, #1
9000102e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90001030:	2300      	movs	r3, #0
90001032:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90001034:	2300      	movs	r3, #0
90001036:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90001038:	2300      	movs	r3, #0
9000103a:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000103c:	463b      	mov	r3, r7
9000103e:	4618      	mov	r0, r3
90001040:	f002 fe72 	bl	90003d28 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90001044:	2004      	movs	r0, #4
90001046:	f002 fe4f 	bl	90003ce8 <HAL_MPU_Enable>
}
9000104a:	bf00      	nop
9000104c:	3710      	adds	r7, #16
9000104e:	46bd      	mov	sp, r7
90001050:	bd80      	pop	{r7, pc}

90001052 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90001052:	b480      	push	{r7}
90001054:	af00      	add	r7, sp, #0
}
90001056:	bf00      	nop
90001058:	46bd      	mov	sp, r7
9000105a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000105e:	4770      	bx	lr

90001060 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90001060:	b480      	push	{r7}
90001062:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90001064:	bf00      	nop
90001066:	e7fd      	b.n	90001064 <HardFault_Handler+0x4>

90001068 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90001068:	b480      	push	{r7}
9000106a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
9000106c:	bf00      	nop
9000106e:	e7fd      	b.n	9000106c <MemManage_Handler+0x4>

90001070 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90001070:	b480      	push	{r7}
90001072:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90001074:	bf00      	nop
90001076:	e7fd      	b.n	90001074 <BusFault_Handler+0x4>

90001078 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90001078:	b480      	push	{r7}
9000107a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
9000107c:	bf00      	nop
9000107e:	e7fd      	b.n	9000107c <UsageFault_Handler+0x4>

90001080 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90001080:	b480      	push	{r7}
90001082:	af00      	add	r7, sp, #0
}
90001084:	bf00      	nop
90001086:	46bd      	mov	sp, r7
90001088:	f85d 7b04 	ldr.w	r7, [sp], #4
9000108c:	4770      	bx	lr

9000108e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
9000108e:	b480      	push	{r7}
90001090:	af00      	add	r7, sp, #0
}
90001092:	bf00      	nop
90001094:	46bd      	mov	sp, r7
90001096:	f85d 7b04 	ldr.w	r7, [sp], #4
9000109a:	4770      	bx	lr

9000109c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
9000109c:	b480      	push	{r7}
9000109e:	af00      	add	r7, sp, #0
}
900010a0:	bf00      	nop
900010a2:	46bd      	mov	sp, r7
900010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900010a8:	4770      	bx	lr

900010aa <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
900010aa:	b580      	push	{r7, lr}
900010ac:	af00      	add	r7, sp, #0
  HAL_IncTick();
900010ae:	f002 fc93 	bl	900039d8 <HAL_IncTick>
}
900010b2:	bf00      	nop
900010b4:	bd80      	pop	{r7, pc}
	...

900010b8 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
900010b8:	b580      	push	{r7, lr}
900010ba:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
900010bc:	4802      	ldr	r0, [pc, #8]	@ (900010c8 <OTG_FS_IRQHandler+0x10>)
900010be:	f003 fc34 	bl	9000492a <HAL_HCD_IRQHandler>
}
900010c2:	bf00      	nop
900010c4:	bd80      	pop	{r7, pc}
900010c6:	bf00      	nop
900010c8:	20000284 	.word	0x20000284

900010cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
900010cc:	b580      	push	{r7, lr}
900010ce:	b086      	sub	sp, #24
900010d0:	af00      	add	r7, sp, #0
900010d2:	60f8      	str	r0, [r7, #12]
900010d4:	60b9      	str	r1, [r7, #8]
900010d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
900010d8:	2300      	movs	r3, #0
900010da:	617b      	str	r3, [r7, #20]
900010dc:	e00a      	b.n	900010f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
900010de:	f3af 8000 	nop.w
900010e2:	4601      	mov	r1, r0
900010e4:	68bb      	ldr	r3, [r7, #8]
900010e6:	1c5a      	adds	r2, r3, #1
900010e8:	60ba      	str	r2, [r7, #8]
900010ea:	b2ca      	uxtb	r2, r1
900010ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
900010ee:	697b      	ldr	r3, [r7, #20]
900010f0:	3301      	adds	r3, #1
900010f2:	617b      	str	r3, [r7, #20]
900010f4:	697a      	ldr	r2, [r7, #20]
900010f6:	687b      	ldr	r3, [r7, #4]
900010f8:	429a      	cmp	r2, r3
900010fa:	dbf0      	blt.n	900010de <_read+0x12>
  }

  return len;
900010fc:	687b      	ldr	r3, [r7, #4]
}
900010fe:	4618      	mov	r0, r3
90001100:	3718      	adds	r7, #24
90001102:	46bd      	mov	sp, r7
90001104:	bd80      	pop	{r7, pc}

90001106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90001106:	b580      	push	{r7, lr}
90001108:	b086      	sub	sp, #24
9000110a:	af00      	add	r7, sp, #0
9000110c:	60f8      	str	r0, [r7, #12]
9000110e:	60b9      	str	r1, [r7, #8]
90001110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001112:	2300      	movs	r3, #0
90001114:	617b      	str	r3, [r7, #20]
90001116:	e009      	b.n	9000112c <_write+0x26>
  {
    __io_putchar(*ptr++);
90001118:	68bb      	ldr	r3, [r7, #8]
9000111a:	1c5a      	adds	r2, r3, #1
9000111c:	60ba      	str	r2, [r7, #8]
9000111e:	781b      	ldrb	r3, [r3, #0]
90001120:	4618      	mov	r0, r3
90001122:	f7ff faef 	bl	90000704 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001126:	697b      	ldr	r3, [r7, #20]
90001128:	3301      	adds	r3, #1
9000112a:	617b      	str	r3, [r7, #20]
9000112c:	697a      	ldr	r2, [r7, #20]
9000112e:	687b      	ldr	r3, [r7, #4]
90001130:	429a      	cmp	r2, r3
90001132:	dbf1      	blt.n	90001118 <_write+0x12>
  }
  return len;
90001134:	687b      	ldr	r3, [r7, #4]
}
90001136:	4618      	mov	r0, r3
90001138:	3718      	adds	r7, #24
9000113a:	46bd      	mov	sp, r7
9000113c:	bd80      	pop	{r7, pc}

9000113e <_close>:

int _close(int file)
{
9000113e:	b480      	push	{r7}
90001140:	b083      	sub	sp, #12
90001142:	af00      	add	r7, sp, #0
90001144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
90001146:	f04f 33ff 	mov.w	r3, #4294967295
}
9000114a:	4618      	mov	r0, r3
9000114c:	370c      	adds	r7, #12
9000114e:	46bd      	mov	sp, r7
90001150:	f85d 7b04 	ldr.w	r7, [sp], #4
90001154:	4770      	bx	lr

90001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
90001156:	b480      	push	{r7}
90001158:	b083      	sub	sp, #12
9000115a:	af00      	add	r7, sp, #0
9000115c:	6078      	str	r0, [r7, #4]
9000115e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90001160:	683b      	ldr	r3, [r7, #0]
90001162:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
90001166:	605a      	str	r2, [r3, #4]
  return 0;
90001168:	2300      	movs	r3, #0
}
9000116a:	4618      	mov	r0, r3
9000116c:	370c      	adds	r7, #12
9000116e:	46bd      	mov	sp, r7
90001170:	f85d 7b04 	ldr.w	r7, [sp], #4
90001174:	4770      	bx	lr

90001176 <_isatty>:

int _isatty(int file)
{
90001176:	b480      	push	{r7}
90001178:	b083      	sub	sp, #12
9000117a:	af00      	add	r7, sp, #0
9000117c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
9000117e:	2301      	movs	r3, #1
}
90001180:	4618      	mov	r0, r3
90001182:	370c      	adds	r7, #12
90001184:	46bd      	mov	sp, r7
90001186:	f85d 7b04 	ldr.w	r7, [sp], #4
9000118a:	4770      	bx	lr

9000118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
9000118c:	b480      	push	{r7}
9000118e:	b085      	sub	sp, #20
90001190:	af00      	add	r7, sp, #0
90001192:	60f8      	str	r0, [r7, #12]
90001194:	60b9      	str	r1, [r7, #8]
90001196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90001198:	2300      	movs	r3, #0
}
9000119a:	4618      	mov	r0, r3
9000119c:	3714      	adds	r7, #20
9000119e:	46bd      	mov	sp, r7
900011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900011a4:	4770      	bx	lr
	...

900011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
900011a8:	b580      	push	{r7, lr}
900011aa:	b086      	sub	sp, #24
900011ac:	af00      	add	r7, sp, #0
900011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900011b0:	4a14      	ldr	r2, [pc, #80]	@ (90001204 <_sbrk+0x5c>)
900011b2:	4b15      	ldr	r3, [pc, #84]	@ (90001208 <_sbrk+0x60>)
900011b4:	1ad3      	subs	r3, r2, r3
900011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900011b8:	697b      	ldr	r3, [r7, #20]
900011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900011bc:	4b13      	ldr	r3, [pc, #76]	@ (9000120c <_sbrk+0x64>)
900011be:	681b      	ldr	r3, [r3, #0]
900011c0:	2b00      	cmp	r3, #0
900011c2:	d102      	bne.n	900011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900011c4:	4b11      	ldr	r3, [pc, #68]	@ (9000120c <_sbrk+0x64>)
900011c6:	4a12      	ldr	r2, [pc, #72]	@ (90001210 <_sbrk+0x68>)
900011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900011ca:	4b10      	ldr	r3, [pc, #64]	@ (9000120c <_sbrk+0x64>)
900011cc:	681a      	ldr	r2, [r3, #0]
900011ce:	687b      	ldr	r3, [r7, #4]
900011d0:	4413      	add	r3, r2
900011d2:	693a      	ldr	r2, [r7, #16]
900011d4:	429a      	cmp	r2, r3
900011d6:	d207      	bcs.n	900011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
900011d8:	f00c f820 	bl	9000d21c <__errno>
900011dc:	4603      	mov	r3, r0
900011de:	220c      	movs	r2, #12
900011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900011e2:	f04f 33ff 	mov.w	r3, #4294967295
900011e6:	e009      	b.n	900011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900011e8:	4b08      	ldr	r3, [pc, #32]	@ (9000120c <_sbrk+0x64>)
900011ea:	681b      	ldr	r3, [r3, #0]
900011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900011ee:	4b07      	ldr	r3, [pc, #28]	@ (9000120c <_sbrk+0x64>)
900011f0:	681a      	ldr	r2, [r3, #0]
900011f2:	687b      	ldr	r3, [r7, #4]
900011f4:	4413      	add	r3, r2
900011f6:	4a05      	ldr	r2, [pc, #20]	@ (9000120c <_sbrk+0x64>)
900011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900011fa:	68fb      	ldr	r3, [r7, #12]
}
900011fc:	4618      	mov	r0, r3
900011fe:	3718      	adds	r7, #24
90001200:	46bd      	mov	sp, r7
90001202:	bd80      	pop	{r7, pc}
90001204:	20020000 	.word	0x20020000
90001208:	00001000 	.word	0x00001000
9000120c:	20000280 	.word	0x20000280
90001210:	20001538 	.word	0x20001538

90001214 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90001214:	b580      	push	{r7, lr}
90001216:	b082      	sub	sp, #8
90001218:	af00      	add	r7, sp, #0
9000121a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
9000121c:	687b      	ldr	r3, [r7, #4]
9000121e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001222:	4618      	mov	r0, r3
90001224:	f00b f8e4 	bl	9000c3f0 <USBH_LL_IncTimer>
}
90001228:	bf00      	nop
9000122a:	3708      	adds	r7, #8
9000122c:	46bd      	mov	sp, r7
9000122e:	bd80      	pop	{r7, pc}

90001230 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90001230:	b580      	push	{r7, lr}
90001232:	b082      	sub	sp, #8
90001234:	af00      	add	r7, sp, #0
90001236:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90001238:	687b      	ldr	r3, [r7, #4]
9000123a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000123e:	4618      	mov	r0, r3
90001240:	f00b f920 	bl	9000c484 <USBH_LL_Connect>
}
90001244:	bf00      	nop
90001246:	3708      	adds	r7, #8
90001248:	46bd      	mov	sp, r7
9000124a:	bd80      	pop	{r7, pc}

9000124c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
9000124c:	b580      	push	{r7, lr}
9000124e:	b082      	sub	sp, #8
90001250:	af00      	add	r7, sp, #0
90001252:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90001254:	687b      	ldr	r3, [r7, #4]
90001256:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000125a:	4618      	mov	r0, r3
9000125c:	f00b f929 	bl	9000c4b2 <USBH_LL_Disconnect>
}
90001260:	bf00      	nop
90001262:	3708      	adds	r7, #8
90001264:	46bd      	mov	sp, r7
90001266:	bd80      	pop	{r7, pc}

90001268 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001268:	b580      	push	{r7, lr}
9000126a:	b082      	sub	sp, #8
9000126c:	af00      	add	r7, sp, #0
9000126e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90001270:	687b      	ldr	r3, [r7, #4]
90001272:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001276:	4618      	mov	r0, r3
90001278:	f00b f8e4 	bl	9000c444 <USBH_LL_PortEnabled>
}
9000127c:	bf00      	nop
9000127e:	3708      	adds	r7, #8
90001280:	46bd      	mov	sp, r7
90001282:	bd80      	pop	{r7, pc}

90001284 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001284:	b580      	push	{r7, lr}
90001286:	b082      	sub	sp, #8
90001288:	af00      	add	r7, sp, #0
9000128a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
9000128c:	687b      	ldr	r3, [r7, #4]
9000128e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001292:	4618      	mov	r0, r3
90001294:	f00b f8e4 	bl	9000c460 <USBH_LL_PortDisabled>
}
90001298:	bf00      	nop
9000129a:	3708      	adds	r7, #8
9000129c:	46bd      	mov	sp, r7
9000129e:	bd80      	pop	{r7, pc}

900012a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
900012a0:	b480      	push	{r7}
900012a2:	b083      	sub	sp, #12
900012a4:	af00      	add	r7, sp, #0
900012a6:	6078      	str	r0, [r7, #4]
900012a8:	460b      	mov	r3, r1
900012aa:	70fb      	strb	r3, [r7, #3]
900012ac:	4613      	mov	r3, r2
900012ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
900012b0:	bf00      	nop
900012b2:	370c      	adds	r7, #12
900012b4:	46bd      	mov	sp, r7
900012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900012ba:	4770      	bx	lr

900012bc <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
900012bc:	b580      	push	{r7, lr}
900012be:	b082      	sub	sp, #8
900012c0:	af00      	add	r7, sp, #0
900012c2:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
900012c4:	687b      	ldr	r3, [r7, #4]
900012c6:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
900012ca:	4618      	mov	r0, r3
900012cc:	f003 fc3d 	bl	90004b4a <HAL_HCD_Stop>
  return USBH_OK;
900012d0:	2300      	movs	r3, #0
}
900012d2:	4618      	mov	r0, r3
900012d4:	3708      	adds	r7, #8
900012d6:	46bd      	mov	sp, r7
900012d8:	bd80      	pop	{r7, pc}
	...

900012dc <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
900012dc:	b580      	push	{r7, lr}
900012de:	b084      	sub	sp, #16
900012e0:	af00      	add	r7, sp, #0
900012e2:	6078      	str	r0, [r7, #4]
900012e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
900012e6:	687b      	ldr	r3, [r7, #4]
900012e8:	2b00      	cmp	r3, #0
900012ea:	d103      	bne.n	900012f4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
900012ec:	f04f 33ff 	mov.w	r3, #4294967295
900012f0:	60fb      	str	r3, [r7, #12]
900012f2:	e02c      	b.n	9000134e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
900012f4:	683b      	ldr	r3, [r7, #0]
900012f6:	681a      	ldr	r2, [r3, #0]
900012f8:	687b      	ldr	r3, [r7, #4]
900012fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
900012fc:	683b      	ldr	r3, [r7, #0]
900012fe:	685a      	ldr	r2, [r3, #4]
90001300:	687b      	ldr	r3, [r7, #4]
90001302:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90001304:	683b      	ldr	r3, [r7, #0]
90001306:	891a      	ldrh	r2, [r3, #8]
90001308:	687b      	ldr	r3, [r7, #4]
9000130a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
9000130c:	683b      	ldr	r3, [r7, #0]
9000130e:	68da      	ldr	r2, [r3, #12]
90001310:	687b      	ldr	r3, [r7, #4]
90001312:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90001314:	683b      	ldr	r3, [r7, #0]
90001316:	691a      	ldr	r2, [r3, #16]
90001318:	687b      	ldr	r3, [r7, #4]
9000131a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
9000131c:	683b      	ldr	r3, [r7, #0]
9000131e:	695a      	ldr	r2, [r3, #20]
90001320:	687b      	ldr	r3, [r7, #4]
90001322:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90001324:	687b      	ldr	r3, [r7, #4]
90001326:	4a0c      	ldr	r2, [pc, #48]	@ (90001358 <FT5336_RegisterBusIO+0x7c>)
90001328:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
9000132a:	687b      	ldr	r3, [r7, #4]
9000132c:	4a0b      	ldr	r2, [pc, #44]	@ (9000135c <FT5336_RegisterBusIO+0x80>)
9000132e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
90001330:	687b      	ldr	r3, [r7, #4]
90001332:	687a      	ldr	r2, [r7, #4]
90001334:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
90001336:	687b      	ldr	r3, [r7, #4]
90001338:	681b      	ldr	r3, [r3, #0]
9000133a:	2b00      	cmp	r3, #0
9000133c:	d004      	beq.n	90001348 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
9000133e:	687b      	ldr	r3, [r7, #4]
90001340:	681b      	ldr	r3, [r3, #0]
90001342:	4798      	blx	r3
90001344:	60f8      	str	r0, [r7, #12]
90001346:	e002      	b.n	9000134e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90001348:	f04f 33ff 	mov.w	r3, #4294967295
9000134c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
9000134e:	68fb      	ldr	r3, [r7, #12]
}
90001350:	4618      	mov	r0, r3
90001352:	3710      	adds	r7, #16
90001354:	46bd      	mov	sp, r7
90001356:	bd80      	pop	{r7, pc}
90001358:	90001755 	.word	0x90001755
9000135c:	90001789 	.word	0x90001789

90001360 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
90001360:	b480      	push	{r7}
90001362:	b083      	sub	sp, #12
90001364:	af00      	add	r7, sp, #0
90001366:	6078      	str	r0, [r7, #4]
90001368:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
9000136a:	683b      	ldr	r3, [r7, #0]
9000136c:	2201      	movs	r2, #1
9000136e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
90001370:	683b      	ldr	r3, [r7, #0]
90001372:	2201      	movs	r2, #1
90001374:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90001376:	683b      	ldr	r3, [r7, #0]
90001378:	2205      	movs	r2, #5
9000137a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
9000137c:	683b      	ldr	r3, [r7, #0]
9000137e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
90001382:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90001384:	683b      	ldr	r3, [r7, #0]
90001386:	f44f 7288 	mov.w	r2, #272	@ 0x110
9000138a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
9000138c:	2300      	movs	r3, #0
}
9000138e:	4618      	mov	r0, r3
90001390:	370c      	adds	r7, #12
90001392:	46bd      	mov	sp, r7
90001394:	f85d 7b04 	ldr.w	r7, [sp], #4
90001398:	4770      	bx	lr

9000139a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
9000139a:	b580      	push	{r7, lr}
9000139c:	b084      	sub	sp, #16
9000139e:	af00      	add	r7, sp, #0
900013a0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
900013a2:	2300      	movs	r3, #0
900013a4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
900013a6:	687b      	ldr	r3, [r7, #4]
900013a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
900013ac:	2b00      	cmp	r3, #0
900013ae:	d10d      	bne.n	900013cc <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
900013b0:	687b      	ldr	r3, [r7, #4]
900013b2:	681b      	ldr	r3, [r3, #0]
900013b4:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
900013b6:	6878      	ldr	r0, [r7, #4]
900013b8:	f000 f987 	bl	900016ca <FT5336_DisableIT>
900013bc:	4602      	mov	r2, r0
900013be:	68fb      	ldr	r3, [r7, #12]
900013c0:	4413      	add	r3, r2
900013c2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
900013c4:	687b      	ldr	r3, [r7, #4]
900013c6:	2201      	movs	r2, #1
900013c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
900013cc:	68fb      	ldr	r3, [r7, #12]
900013ce:	2b00      	cmp	r3, #0
900013d0:	d002      	beq.n	900013d8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
900013d2:	f04f 33ff 	mov.w	r3, #4294967295
900013d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
900013d8:	68fb      	ldr	r3, [r7, #12]
}
900013da:	4618      	mov	r0, r3
900013dc:	3710      	adds	r7, #16
900013de:	46bd      	mov	sp, r7
900013e0:	bd80      	pop	{r7, pc}

900013e2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
900013e2:	b480      	push	{r7}
900013e4:	b085      	sub	sp, #20
900013e6:	af00      	add	r7, sp, #0
900013e8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
900013ea:	2300      	movs	r3, #0
900013ec:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
900013ee:	687b      	ldr	r3, [r7, #4]
900013f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
900013f4:	2b01      	cmp	r3, #1
900013f6:	d103      	bne.n	90001400 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
900013f8:	687b      	ldr	r3, [r7, #4]
900013fa:	2200      	movs	r2, #0
900013fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
90001400:	68fb      	ldr	r3, [r7, #12]
}
90001402:	4618      	mov	r0, r3
90001404:	3714      	adds	r7, #20
90001406:	46bd      	mov	sp, r7
90001408:	f85d 7b04 	ldr.w	r7, [sp], #4
9000140c:	4770      	bx	lr

9000140e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
9000140e:	b580      	push	{r7, lr}
90001410:	b084      	sub	sp, #16
90001412:	af00      	add	r7, sp, #0
90001414:	6078      	str	r0, [r7, #4]
90001416:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90001418:	687b      	ldr	r3, [r7, #4]
9000141a:	f103 0218 	add.w	r2, r3, #24
9000141e:	683b      	ldr	r3, [r7, #0]
90001420:	681b      	ldr	r3, [r3, #0]
90001422:	b2db      	uxtb	r3, r3
90001424:	4619      	mov	r1, r3
90001426:	4610      	mov	r0, r2
90001428:	f000 fa25 	bl	90001876 <ft5336_radian_value>
9000142c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
9000142e:	687b      	ldr	r3, [r7, #4]
90001430:	f103 0218 	add.w	r2, r3, #24
90001434:	683b      	ldr	r3, [r7, #0]
90001436:	685b      	ldr	r3, [r3, #4]
90001438:	b2db      	uxtb	r3, r3
9000143a:	4619      	mov	r1, r3
9000143c:	4610      	mov	r0, r2
9000143e:	f000 fa2b 	bl	90001898 <ft5336_offset_left_right>
90001442:	4602      	mov	r2, r0
90001444:	68fb      	ldr	r3, [r7, #12]
90001446:	4413      	add	r3, r2
90001448:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
9000144a:	687b      	ldr	r3, [r7, #4]
9000144c:	f103 0218 	add.w	r2, r3, #24
90001450:	683b      	ldr	r3, [r7, #0]
90001452:	689b      	ldr	r3, [r3, #8]
90001454:	b2db      	uxtb	r3, r3
90001456:	4619      	mov	r1, r3
90001458:	4610      	mov	r0, r2
9000145a:	f000 fa2e 	bl	900018ba <ft5336_offset_up_down>
9000145e:	4602      	mov	r2, r0
90001460:	68fb      	ldr	r3, [r7, #12]
90001462:	4413      	add	r3, r2
90001464:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90001466:	687b      	ldr	r3, [r7, #4]
90001468:	f103 0218 	add.w	r2, r3, #24
9000146c:	683b      	ldr	r3, [r7, #0]
9000146e:	68db      	ldr	r3, [r3, #12]
90001470:	b2db      	uxtb	r3, r3
90001472:	4619      	mov	r1, r3
90001474:	4610      	mov	r0, r2
90001476:	f000 fa31 	bl	900018dc <ft5336_disatnce_left_right>
9000147a:	4602      	mov	r2, r0
9000147c:	68fb      	ldr	r3, [r7, #12]
9000147e:	4413      	add	r3, r2
90001480:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90001482:	687b      	ldr	r3, [r7, #4]
90001484:	f103 0218 	add.w	r2, r3, #24
90001488:	683b      	ldr	r3, [r7, #0]
9000148a:	691b      	ldr	r3, [r3, #16]
9000148c:	b2db      	uxtb	r3, r3
9000148e:	4619      	mov	r1, r3
90001490:	4610      	mov	r0, r2
90001492:	f000 fa34 	bl	900018fe <ft5336_distance_up_down>
90001496:	4602      	mov	r2, r0
90001498:	68fb      	ldr	r3, [r7, #12]
9000149a:	4413      	add	r3, r2
9000149c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
9000149e:	687b      	ldr	r3, [r7, #4]
900014a0:	f103 0218 	add.w	r2, r3, #24
900014a4:	683b      	ldr	r3, [r7, #0]
900014a6:	695b      	ldr	r3, [r3, #20]
900014a8:	b2db      	uxtb	r3, r3
900014aa:	4619      	mov	r1, r3
900014ac:	4610      	mov	r0, r2
900014ae:	f000 fa37 	bl	90001920 <ft5336_distance_zoom>
900014b2:	4602      	mov	r2, r0
900014b4:	68fb      	ldr	r3, [r7, #12]
900014b6:	4413      	add	r3, r2
900014b8:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
900014ba:	68fb      	ldr	r3, [r7, #12]
900014bc:	2b00      	cmp	r3, #0
900014be:	d002      	beq.n	900014c6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
900014c0:	f04f 33ff 	mov.w	r3, #4294967295
900014c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
900014c6:	68fb      	ldr	r3, [r7, #12]
}
900014c8:	4618      	mov	r0, r3
900014ca:	3710      	adds	r7, #16
900014cc:	46bd      	mov	sp, r7
900014ce:	bd80      	pop	{r7, pc}

900014d0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
900014d0:	b580      	push	{r7, lr}
900014d2:	b082      	sub	sp, #8
900014d4:	af00      	add	r7, sp, #0
900014d6:	6078      	str	r0, [r7, #4]
900014d8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900014da:	687b      	ldr	r3, [r7, #4]
900014dc:	3318      	adds	r3, #24
900014de:	6839      	ldr	r1, [r7, #0]
900014e0:	4618      	mov	r0, r3
900014e2:	f000 fa3f 	bl	90001964 <ft5336_chip_id>
900014e6:	4603      	mov	r3, r0
}
900014e8:	4618      	mov	r0, r3
900014ea:	3708      	adds	r7, #8
900014ec:	46bd      	mov	sp, r7
900014ee:	bd80      	pop	{r7, pc}

900014f0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
900014f0:	b580      	push	{r7, lr}
900014f2:	b084      	sub	sp, #16
900014f4:	af00      	add	r7, sp, #0
900014f6:	6078      	str	r0, [r7, #4]
900014f8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
900014fa:	2300      	movs	r3, #0
900014fc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900014fe:	6878      	ldr	r0, [r7, #4]
90001500:	f000 f908 	bl	90001714 <FT5336_DetectTouch>
90001504:	4603      	mov	r3, r0
90001506:	461a      	mov	r2, r3
90001508:	683b      	ldr	r3, [r7, #0]
9000150a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
9000150c:	687b      	ldr	r3, [r7, #4]
9000150e:	f103 0018 	add.w	r0, r3, #24
90001512:	f107 0208 	add.w	r2, r7, #8
90001516:	2304      	movs	r3, #4
90001518:	2103      	movs	r1, #3
9000151a:	f000 f94f 	bl	900017bc <ft5336_read_reg>
9000151e:	4603      	mov	r3, r0
90001520:	2b00      	cmp	r3, #0
90001522:	d003      	beq.n	9000152c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
90001524:	f04f 33ff 	mov.w	r3, #4294967295
90001528:	60fb      	str	r3, [r7, #12]
9000152a:	e00f      	b.n	9000154c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
9000152c:	7a3b      	ldrb	r3, [r7, #8]
9000152e:	021b      	lsls	r3, r3, #8
90001530:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
90001534:	7a7a      	ldrb	r2, [r7, #9]
90001536:	431a      	orrs	r2, r3
90001538:	683b      	ldr	r3, [r7, #0]
9000153a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
9000153c:	7abb      	ldrb	r3, [r7, #10]
9000153e:	021b      	lsls	r3, r3, #8
90001540:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
90001544:	7afa      	ldrb	r2, [r7, #11]
90001546:	431a      	orrs	r2, r3
90001548:	683b      	ldr	r3, [r7, #0]
9000154a:	609a      	str	r2, [r3, #8]
  }

  return ret;
9000154c:	68fb      	ldr	r3, [r7, #12]
}
9000154e:	4618      	mov	r0, r3
90001550:	3710      	adds	r7, #16
90001552:	46bd      	mov	sp, r7
90001554:	bd80      	pop	{r7, pc}

90001556 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
90001556:	b580      	push	{r7, lr}
90001558:	b08c      	sub	sp, #48	@ 0x30
9000155a:	af00      	add	r7, sp, #0
9000155c:	6078      	str	r0, [r7, #4]
9000155e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90001560:	2300      	movs	r3, #0
90001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90001564:	6878      	ldr	r0, [r7, #4]
90001566:	f000 f8d5 	bl	90001714 <FT5336_DetectTouch>
9000156a:	4603      	mov	r3, r0
9000156c:	461a      	mov	r2, r3
9000156e:	683b      	ldr	r3, [r7, #0]
90001570:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90001572:	687b      	ldr	r3, [r7, #4]
90001574:	f103 0018 	add.w	r0, r3, #24
90001578:	f107 0208 	add.w	r2, r7, #8
9000157c:	231e      	movs	r3, #30
9000157e:	2103      	movs	r1, #3
90001580:	f000 f91c 	bl	900017bc <ft5336_read_reg>
90001584:	4603      	mov	r3, r0
90001586:	2b00      	cmp	r3, #0
90001588:	d003      	beq.n	90001592 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
9000158a:	f04f 33ff 	mov.w	r3, #4294967295
9000158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
90001590:	e077      	b.n	90001682 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90001592:	2300      	movs	r3, #0
90001594:	62bb      	str	r3, [r7, #40]	@ 0x28
90001596:	e071      	b.n	9000167c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90001598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000159a:	4613      	mov	r3, r2
9000159c:	005b      	lsls	r3, r3, #1
9000159e:	4413      	add	r3, r2
900015a0:	005b      	lsls	r3, r3, #1
900015a2:	3330      	adds	r3, #48	@ 0x30
900015a4:	443b      	add	r3, r7
900015a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900015aa:	021b      	lsls	r3, r3, #8
900015ac:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
900015b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900015b2:	4613      	mov	r3, r2
900015b4:	005b      	lsls	r3, r3, #1
900015b6:	4413      	add	r3, r2
900015b8:	005b      	lsls	r3, r3, #1
900015ba:	3301      	adds	r3, #1
900015bc:	3330      	adds	r3, #48	@ 0x30
900015be:	443b      	add	r3, r7
900015c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900015c4:	ea41 0203 	orr.w	r2, r1, r3
900015c8:	6839      	ldr	r1, [r7, #0]
900015ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900015cc:	009b      	lsls	r3, r3, #2
900015ce:	440b      	add	r3, r1
900015d0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900015d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900015d4:	4613      	mov	r3, r2
900015d6:	005b      	lsls	r3, r3, #1
900015d8:	4413      	add	r3, r2
900015da:	005b      	lsls	r3, r3, #1
900015dc:	3302      	adds	r3, #2
900015de:	3330      	adds	r3, #48	@ 0x30
900015e0:	443b      	add	r3, r7
900015e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900015e6:	021b      	lsls	r3, r3, #8
900015e8:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
900015ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900015ee:	4613      	mov	r3, r2
900015f0:	005b      	lsls	r3, r3, #1
900015f2:	4413      	add	r3, r2
900015f4:	005b      	lsls	r3, r3, #1
900015f6:	3303      	adds	r3, #3
900015f8:	3330      	adds	r3, #48	@ 0x30
900015fa:	443b      	add	r3, r7
900015fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90001600:	4319      	orrs	r1, r3
90001602:	683b      	ldr	r3, [r7, #0]
90001604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001606:	3206      	adds	r2, #6
90001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000160c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000160e:	4613      	mov	r3, r2
90001610:	005b      	lsls	r3, r3, #1
90001612:	4413      	add	r3, r2
90001614:	005b      	lsls	r3, r3, #1
90001616:	3330      	adds	r3, #48	@ 0x30
90001618:	443b      	add	r3, r7
9000161a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
9000161e:	099b      	lsrs	r3, r3, #6
90001620:	b2db      	uxtb	r3, r3
90001622:	4619      	mov	r1, r3
90001624:	683b      	ldr	r3, [r7, #0]
90001626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001628:	3210      	adds	r2, #16
9000162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000162e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001630:	4613      	mov	r3, r2
90001632:	005b      	lsls	r3, r3, #1
90001634:	4413      	add	r3, r2
90001636:	005b      	lsls	r3, r3, #1
90001638:	3304      	adds	r3, #4
9000163a:	3330      	adds	r3, #48	@ 0x30
9000163c:	443b      	add	r3, r7
9000163e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90001642:	4619      	mov	r1, r3
90001644:	683a      	ldr	r2, [r7, #0]
90001646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001648:	330a      	adds	r3, #10
9000164a:	009b      	lsls	r3, r3, #2
9000164c:	4413      	add	r3, r2
9000164e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90001650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001652:	4613      	mov	r3, r2
90001654:	005b      	lsls	r3, r3, #1
90001656:	4413      	add	r3, r2
90001658:	005b      	lsls	r3, r3, #1
9000165a:	3305      	adds	r3, #5
9000165c:	3330      	adds	r3, #48	@ 0x30
9000165e:	443b      	add	r3, r7
90001660:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90001664:	091b      	lsrs	r3, r3, #4
90001666:	b2db      	uxtb	r3, r3
90001668:	4619      	mov	r1, r3
9000166a:	683a      	ldr	r2, [r7, #0]
9000166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000166e:	3314      	adds	r3, #20
90001670:	009b      	lsls	r3, r3, #2
90001672:	4413      	add	r3, r2
90001674:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90001676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001678:	3301      	adds	r3, #1
9000167a:	62bb      	str	r3, [r7, #40]	@ 0x28
9000167c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000167e:	2b04      	cmp	r3, #4
90001680:	d98a      	bls.n	90001598 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
90001682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
90001684:	4618      	mov	r0, r3
90001686:	3730      	adds	r7, #48	@ 0x30
90001688:	46bd      	mov	sp, r7
9000168a:	bd80      	pop	{r7, pc}

9000168c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
9000168c:	b580      	push	{r7, lr}
9000168e:	b082      	sub	sp, #8
90001690:	af00      	add	r7, sp, #0
90001692:	6078      	str	r0, [r7, #4]
90001694:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90001696:	687b      	ldr	r3, [r7, #4]
90001698:	3318      	adds	r3, #24
9000169a:	6839      	ldr	r1, [r7, #0]
9000169c:	4618      	mov	r0, r3
9000169e:	f000 f8bb 	bl	90001818 <ft5336_gest_id>
900016a2:	4603      	mov	r3, r0
}
900016a4:	4618      	mov	r0, r3
900016a6:	3708      	adds	r7, #8
900016a8:	46bd      	mov	sp, r7
900016aa:	bd80      	pop	{r7, pc}

900016ac <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
900016ac:	b580      	push	{r7, lr}
900016ae:	b082      	sub	sp, #8
900016b0:	af00      	add	r7, sp, #0
900016b2:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
900016b4:	687b      	ldr	r3, [r7, #4]
900016b6:	3318      	adds	r3, #24
900016b8:	2101      	movs	r1, #1
900016ba:	4618      	mov	r0, r3
900016bc:	f000 f941 	bl	90001942 <ft5336_g_mode>
900016c0:	4603      	mov	r3, r0
}
900016c2:	4618      	mov	r0, r3
900016c4:	3708      	adds	r7, #8
900016c6:	46bd      	mov	sp, r7
900016c8:	bd80      	pop	{r7, pc}

900016ca <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
900016ca:	b580      	push	{r7, lr}
900016cc:	b082      	sub	sp, #8
900016ce:	af00      	add	r7, sp, #0
900016d0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
900016d2:	687b      	ldr	r3, [r7, #4]
900016d4:	3318      	adds	r3, #24
900016d6:	2100      	movs	r1, #0
900016d8:	4618      	mov	r0, r3
900016da:	f000 f932 	bl	90001942 <ft5336_g_mode>
900016de:	4603      	mov	r3, r0
}
900016e0:	4618      	mov	r0, r3
900016e2:	3708      	adds	r7, #8
900016e4:	46bd      	mov	sp, r7
900016e6:	bd80      	pop	{r7, pc}

900016e8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
900016e8:	b480      	push	{r7}
900016ea:	b083      	sub	sp, #12
900016ec:	af00      	add	r7, sp, #0
900016ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
900016f0:	2300      	movs	r3, #0
}
900016f2:	4618      	mov	r0, r3
900016f4:	370c      	adds	r7, #12
900016f6:	46bd      	mov	sp, r7
900016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900016fc:	4770      	bx	lr

900016fe <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
900016fe:	b480      	push	{r7}
90001700:	b083      	sub	sp, #12
90001702:	af00      	add	r7, sp, #0
90001704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90001706:	2300      	movs	r3, #0
}
90001708:	4618      	mov	r0, r3
9000170a:	370c      	adds	r7, #12
9000170c:	46bd      	mov	sp, r7
9000170e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001712:	4770      	bx	lr

90001714 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
90001714:	b580      	push	{r7, lr}
90001716:	b084      	sub	sp, #16
90001718:	af00      	add	r7, sp, #0
9000171a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000171c:	687b      	ldr	r3, [r7, #4]
9000171e:	3318      	adds	r3, #24
90001720:	f107 020b 	add.w	r2, r7, #11
90001724:	4611      	mov	r1, r2
90001726:	4618      	mov	r0, r3
90001728:	f000 f886 	bl	90001838 <ft5336_td_status>
9000172c:	4603      	mov	r3, r0
9000172e:	2b00      	cmp	r3, #0
90001730:	d003      	beq.n	9000173a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
90001732:	f04f 33ff 	mov.w	r3, #4294967295
90001736:	60fb      	str	r3, [r7, #12]
90001738:	e007      	b.n	9000174a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
9000173a:	7afb      	ldrb	r3, [r7, #11]
9000173c:	2b05      	cmp	r3, #5
9000173e:	d902      	bls.n	90001746 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
90001740:	2300      	movs	r3, #0
90001742:	60fb      	str	r3, [r7, #12]
90001744:	e001      	b.n	9000174a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
90001746:	7afb      	ldrb	r3, [r7, #11]
90001748:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
9000174a:	68fb      	ldr	r3, [r7, #12]
}
9000174c:	4618      	mov	r0, r3
9000174e:	3710      	adds	r7, #16
90001750:	46bd      	mov	sp, r7
90001752:	bd80      	pop	{r7, pc}

90001754 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001754:	b590      	push	{r4, r7, lr}
90001756:	b087      	sub	sp, #28
90001758:	af00      	add	r7, sp, #0
9000175a:	60f8      	str	r0, [r7, #12]
9000175c:	607a      	str	r2, [r7, #4]
9000175e:	461a      	mov	r2, r3
90001760:	460b      	mov	r3, r1
90001762:	72fb      	strb	r3, [r7, #11]
90001764:	4613      	mov	r3, r2
90001766:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001768:	68fb      	ldr	r3, [r7, #12]
9000176a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
9000176c:	697b      	ldr	r3, [r7, #20]
9000176e:	691c      	ldr	r4, [r3, #16]
90001770:	697b      	ldr	r3, [r7, #20]
90001772:	8918      	ldrh	r0, [r3, #8]
90001774:	7afb      	ldrb	r3, [r7, #11]
90001776:	b299      	uxth	r1, r3
90001778:	893b      	ldrh	r3, [r7, #8]
9000177a:	687a      	ldr	r2, [r7, #4]
9000177c:	47a0      	blx	r4
9000177e:	4603      	mov	r3, r0
}
90001780:	4618      	mov	r0, r3
90001782:	371c      	adds	r7, #28
90001784:	46bd      	mov	sp, r7
90001786:	bd90      	pop	{r4, r7, pc}

90001788 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001788:	b590      	push	{r4, r7, lr}
9000178a:	b087      	sub	sp, #28
9000178c:	af00      	add	r7, sp, #0
9000178e:	60f8      	str	r0, [r7, #12]
90001790:	607a      	str	r2, [r7, #4]
90001792:	461a      	mov	r2, r3
90001794:	460b      	mov	r3, r1
90001796:	72fb      	strb	r3, [r7, #11]
90001798:	4613      	mov	r3, r2
9000179a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
9000179c:	68fb      	ldr	r3, [r7, #12]
9000179e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900017a0:	697b      	ldr	r3, [r7, #20]
900017a2:	68dc      	ldr	r4, [r3, #12]
900017a4:	697b      	ldr	r3, [r7, #20]
900017a6:	8918      	ldrh	r0, [r3, #8]
900017a8:	7afb      	ldrb	r3, [r7, #11]
900017aa:	b299      	uxth	r1, r3
900017ac:	893b      	ldrh	r3, [r7, #8]
900017ae:	687a      	ldr	r2, [r7, #4]
900017b0:	47a0      	blx	r4
900017b2:	4603      	mov	r3, r0
}
900017b4:	4618      	mov	r0, r3
900017b6:	371c      	adds	r7, #28
900017b8:	46bd      	mov	sp, r7
900017ba:	bd90      	pop	{r4, r7, pc}

900017bc <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900017bc:	b590      	push	{r4, r7, lr}
900017be:	b085      	sub	sp, #20
900017c0:	af00      	add	r7, sp, #0
900017c2:	60f8      	str	r0, [r7, #12]
900017c4:	607a      	str	r2, [r7, #4]
900017c6:	461a      	mov	r2, r3
900017c8:	460b      	mov	r3, r1
900017ca:	72fb      	strb	r3, [r7, #11]
900017cc:	4613      	mov	r3, r2
900017ce:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900017d0:	68fb      	ldr	r3, [r7, #12]
900017d2:	685c      	ldr	r4, [r3, #4]
900017d4:	68fb      	ldr	r3, [r7, #12]
900017d6:	6898      	ldr	r0, [r3, #8]
900017d8:	893b      	ldrh	r3, [r7, #8]
900017da:	7af9      	ldrb	r1, [r7, #11]
900017dc:	687a      	ldr	r2, [r7, #4]
900017de:	47a0      	blx	r4
900017e0:	4603      	mov	r3, r0
}
900017e2:	4618      	mov	r0, r3
900017e4:	3714      	adds	r7, #20
900017e6:	46bd      	mov	sp, r7
900017e8:	bd90      	pop	{r4, r7, pc}

900017ea <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
900017ea:	b590      	push	{r4, r7, lr}
900017ec:	b085      	sub	sp, #20
900017ee:	af00      	add	r7, sp, #0
900017f0:	60f8      	str	r0, [r7, #12]
900017f2:	607a      	str	r2, [r7, #4]
900017f4:	461a      	mov	r2, r3
900017f6:	460b      	mov	r3, r1
900017f8:	72fb      	strb	r3, [r7, #11]
900017fa:	4613      	mov	r3, r2
900017fc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900017fe:	68fb      	ldr	r3, [r7, #12]
90001800:	681c      	ldr	r4, [r3, #0]
90001802:	68fb      	ldr	r3, [r7, #12]
90001804:	6898      	ldr	r0, [r3, #8]
90001806:	893b      	ldrh	r3, [r7, #8]
90001808:	7af9      	ldrb	r1, [r7, #11]
9000180a:	687a      	ldr	r2, [r7, #4]
9000180c:	47a0      	blx	r4
9000180e:	4603      	mov	r3, r0
}
90001810:	4618      	mov	r0, r3
90001812:	3714      	adds	r7, #20
90001814:	46bd      	mov	sp, r7
90001816:	bd90      	pop	{r4, r7, pc}

90001818 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90001818:	b580      	push	{r7, lr}
9000181a:	b082      	sub	sp, #8
9000181c:	af00      	add	r7, sp, #0
9000181e:	6078      	str	r0, [r7, #4]
90001820:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
90001822:	2301      	movs	r3, #1
90001824:	683a      	ldr	r2, [r7, #0]
90001826:	2101      	movs	r1, #1
90001828:	6878      	ldr	r0, [r7, #4]
9000182a:	f7ff ffc7 	bl	900017bc <ft5336_read_reg>
9000182e:	4603      	mov	r3, r0
}
90001830:	4618      	mov	r0, r3
90001832:	3708      	adds	r7, #8
90001834:	46bd      	mov	sp, r7
90001836:	bd80      	pop	{r7, pc}

90001838 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90001838:	b580      	push	{r7, lr}
9000183a:	b084      	sub	sp, #16
9000183c:	af00      	add	r7, sp, #0
9000183e:	6078      	str	r0, [r7, #4]
90001840:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
90001842:	2301      	movs	r3, #1
90001844:	683a      	ldr	r2, [r7, #0]
90001846:	2102      	movs	r1, #2
90001848:	6878      	ldr	r0, [r7, #4]
9000184a:	f7ff ffb7 	bl	900017bc <ft5336_read_reg>
9000184e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90001850:	68fb      	ldr	r3, [r7, #12]
90001852:	2b00      	cmp	r3, #0
90001854:	d10a      	bne.n	9000186c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90001856:	683b      	ldr	r3, [r7, #0]
90001858:	781b      	ldrb	r3, [r3, #0]
9000185a:	f003 030f 	and.w	r3, r3, #15
9000185e:	b2da      	uxtb	r2, r3
90001860:	683b      	ldr	r3, [r7, #0]
90001862:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
90001864:	683b      	ldr	r3, [r7, #0]
90001866:	781a      	ldrb	r2, [r3, #0]
90001868:	683b      	ldr	r3, [r7, #0]
9000186a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
9000186c:	68fb      	ldr	r3, [r7, #12]
}
9000186e:	4618      	mov	r0, r3
90001870:	3710      	adds	r7, #16
90001872:	46bd      	mov	sp, r7
90001874:	bd80      	pop	{r7, pc}

90001876 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90001876:	b580      	push	{r7, lr}
90001878:	b082      	sub	sp, #8
9000187a:	af00      	add	r7, sp, #0
9000187c:	6078      	str	r0, [r7, #4]
9000187e:	460b      	mov	r3, r1
90001880:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
90001882:	1cfa      	adds	r2, r7, #3
90001884:	2301      	movs	r3, #1
90001886:	2191      	movs	r1, #145	@ 0x91
90001888:	6878      	ldr	r0, [r7, #4]
9000188a:	f7ff ffae 	bl	900017ea <ft5336_write_reg>
9000188e:	4603      	mov	r3, r0
}
90001890:	4618      	mov	r0, r3
90001892:	3708      	adds	r7, #8
90001894:	46bd      	mov	sp, r7
90001896:	bd80      	pop	{r7, pc}

90001898 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90001898:	b580      	push	{r7, lr}
9000189a:	b082      	sub	sp, #8
9000189c:	af00      	add	r7, sp, #0
9000189e:	6078      	str	r0, [r7, #4]
900018a0:	460b      	mov	r3, r1
900018a2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
900018a4:	1cfa      	adds	r2, r7, #3
900018a6:	2301      	movs	r3, #1
900018a8:	2192      	movs	r1, #146	@ 0x92
900018aa:	6878      	ldr	r0, [r7, #4]
900018ac:	f7ff ff9d 	bl	900017ea <ft5336_write_reg>
900018b0:	4603      	mov	r3, r0
}
900018b2:	4618      	mov	r0, r3
900018b4:	3708      	adds	r7, #8
900018b6:	46bd      	mov	sp, r7
900018b8:	bd80      	pop	{r7, pc}

900018ba <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900018ba:	b580      	push	{r7, lr}
900018bc:	b082      	sub	sp, #8
900018be:	af00      	add	r7, sp, #0
900018c0:	6078      	str	r0, [r7, #4]
900018c2:	460b      	mov	r3, r1
900018c4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
900018c6:	1cfa      	adds	r2, r7, #3
900018c8:	2301      	movs	r3, #1
900018ca:	2193      	movs	r1, #147	@ 0x93
900018cc:	6878      	ldr	r0, [r7, #4]
900018ce:	f7ff ff8c 	bl	900017ea <ft5336_write_reg>
900018d2:	4603      	mov	r3, r0
}
900018d4:	4618      	mov	r0, r3
900018d6:	3708      	adds	r7, #8
900018d8:	46bd      	mov	sp, r7
900018da:	bd80      	pop	{r7, pc}

900018dc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900018dc:	b580      	push	{r7, lr}
900018de:	b082      	sub	sp, #8
900018e0:	af00      	add	r7, sp, #0
900018e2:	6078      	str	r0, [r7, #4]
900018e4:	460b      	mov	r3, r1
900018e6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
900018e8:	1cfa      	adds	r2, r7, #3
900018ea:	2301      	movs	r3, #1
900018ec:	2194      	movs	r1, #148	@ 0x94
900018ee:	6878      	ldr	r0, [r7, #4]
900018f0:	f7ff ff7b 	bl	900017ea <ft5336_write_reg>
900018f4:	4603      	mov	r3, r0
}
900018f6:	4618      	mov	r0, r3
900018f8:	3708      	adds	r7, #8
900018fa:	46bd      	mov	sp, r7
900018fc:	bd80      	pop	{r7, pc}

900018fe <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900018fe:	b580      	push	{r7, lr}
90001900:	b082      	sub	sp, #8
90001902:	af00      	add	r7, sp, #0
90001904:	6078      	str	r0, [r7, #4]
90001906:	460b      	mov	r3, r1
90001908:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
9000190a:	1cfa      	adds	r2, r7, #3
9000190c:	2301      	movs	r3, #1
9000190e:	2195      	movs	r1, #149	@ 0x95
90001910:	6878      	ldr	r0, [r7, #4]
90001912:	f7ff ff6a 	bl	900017ea <ft5336_write_reg>
90001916:	4603      	mov	r3, r0
}
90001918:	4618      	mov	r0, r3
9000191a:	3708      	adds	r7, #8
9000191c:	46bd      	mov	sp, r7
9000191e:	bd80      	pop	{r7, pc}

90001920 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90001920:	b580      	push	{r7, lr}
90001922:	b082      	sub	sp, #8
90001924:	af00      	add	r7, sp, #0
90001926:	6078      	str	r0, [r7, #4]
90001928:	460b      	mov	r3, r1
9000192a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
9000192c:	1cfa      	adds	r2, r7, #3
9000192e:	2301      	movs	r3, #1
90001930:	2196      	movs	r1, #150	@ 0x96
90001932:	6878      	ldr	r0, [r7, #4]
90001934:	f7ff ff59 	bl	900017ea <ft5336_write_reg>
90001938:	4603      	mov	r3, r0
}
9000193a:	4618      	mov	r0, r3
9000193c:	3708      	adds	r7, #8
9000193e:	46bd      	mov	sp, r7
90001940:	bd80      	pop	{r7, pc}

90001942 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90001942:	b580      	push	{r7, lr}
90001944:	b082      	sub	sp, #8
90001946:	af00      	add	r7, sp, #0
90001948:	6078      	str	r0, [r7, #4]
9000194a:	460b      	mov	r3, r1
9000194c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
9000194e:	1cfa      	adds	r2, r7, #3
90001950:	2301      	movs	r3, #1
90001952:	21a4      	movs	r1, #164	@ 0xa4
90001954:	6878      	ldr	r0, [r7, #4]
90001956:	f7ff ff48 	bl	900017ea <ft5336_write_reg>
9000195a:	4603      	mov	r3, r0
}
9000195c:	4618      	mov	r0, r3
9000195e:	3708      	adds	r7, #8
90001960:	46bd      	mov	sp, r7
90001962:	bd80      	pop	{r7, pc}

90001964 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90001964:	b580      	push	{r7, lr}
90001966:	b084      	sub	sp, #16
90001968:	af00      	add	r7, sp, #0
9000196a:	6078      	str	r0, [r7, #4]
9000196c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
9000196e:	2301      	movs	r3, #1
90001970:	683a      	ldr	r2, [r7, #0]
90001972:	21a8      	movs	r1, #168	@ 0xa8
90001974:	6878      	ldr	r0, [r7, #4]
90001976:	f7ff ff21 	bl	900017bc <ft5336_read_reg>
9000197a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
9000197c:	68fb      	ldr	r3, [r7, #12]
9000197e:	2b00      	cmp	r3, #0
90001980:	d107      	bne.n	90001992 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
90001982:	683b      	ldr	r3, [r7, #0]
90001984:	781a      	ldrb	r2, [r3, #0]
90001986:	683b      	ldr	r3, [r7, #0]
90001988:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
9000198a:	683b      	ldr	r3, [r7, #0]
9000198c:	781a      	ldrb	r2, [r3, #0]
9000198e:	683b      	ldr	r3, [r7, #0]
90001990:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90001992:	68fb      	ldr	r3, [r7, #12]
}
90001994:	4618      	mov	r0, r3
90001996:	3710      	adds	r7, #16
90001998:	46bd      	mov	sp, r7
9000199a:	bd80      	pop	{r7, pc}

9000199c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000199c:	b580      	push	{r7, lr}
9000199e:	b084      	sub	sp, #16
900019a0:	af00      	add	r7, sp, #0
900019a2:	6078      	str	r0, [r7, #4]
900019a4:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
900019a6:	f04f 33ff 	mov.w	r3, #4294967295
900019aa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900019ac:	683b      	ldr	r3, [r7, #0]
900019ae:	681b      	ldr	r3, [r3, #0]
900019b0:	4619      	mov	r1, r3
900019b2:	6878      	ldr	r0, [r7, #4]
900019b4:	f000 f832 	bl	90001a1c <MT48LC4M32B2_ClockEnable>
900019b8:	4603      	mov	r3, r0
900019ba:	2b00      	cmp	r3, #0
900019bc:	d128      	bne.n	90001a10 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
900019be:	2001      	movs	r0, #1
900019c0:	f000 f8e2 	bl	90001b88 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900019c4:	683b      	ldr	r3, [r7, #0]
900019c6:	681b      	ldr	r3, [r3, #0]
900019c8:	4619      	mov	r1, r3
900019ca:	6878      	ldr	r0, [r7, #4]
900019cc:	f000 f84a 	bl	90001a64 <MT48LC4M32B2_Precharge>
900019d0:	4603      	mov	r3, r0
900019d2:	2b00      	cmp	r3, #0
900019d4:	d11c      	bne.n	90001a10 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
900019d6:	683b      	ldr	r3, [r7, #0]
900019d8:	6819      	ldr	r1, [r3, #0]
900019da:	683b      	ldr	r3, [r7, #0]
900019dc:	685b      	ldr	r3, [r3, #4]
900019de:	461a      	mov	r2, r3
900019e0:	6878      	ldr	r0, [r7, #4]
900019e2:	f000 f897 	bl	90001b14 <MT48LC4M32B2_RefreshMode>
900019e6:	4603      	mov	r3, r0
900019e8:	2b00      	cmp	r3, #0
900019ea:	d111      	bne.n	90001a10 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
900019ec:	6839      	ldr	r1, [r7, #0]
900019ee:	6878      	ldr	r0, [r7, #4]
900019f0:	f000 f85c 	bl	90001aac <MT48LC4M32B2_ModeRegConfig>
900019f4:	4603      	mov	r3, r0
900019f6:	2b00      	cmp	r3, #0
900019f8:	d10a      	bne.n	90001a10 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
900019fa:	683b      	ldr	r3, [r7, #0]
900019fc:	689b      	ldr	r3, [r3, #8]
900019fe:	4619      	mov	r1, r3
90001a00:	6878      	ldr	r0, [r7, #4]
90001a02:	f000 f8ad 	bl	90001b60 <MT48LC4M32B2_RefreshRate>
90001a06:	4603      	mov	r3, r0
90001a08:	2b00      	cmp	r3, #0
90001a0a:	d101      	bne.n	90001a10 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001a0c:	2300      	movs	r3, #0
90001a0e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
90001a10:	68fb      	ldr	r3, [r7, #12]
}
90001a12:	4618      	mov	r0, r3
90001a14:	3710      	adds	r7, #16
90001a16:	46bd      	mov	sp, r7
90001a18:	bd80      	pop	{r7, pc}
	...

90001a1c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001a1c:	b580      	push	{r7, lr}
90001a1e:	b082      	sub	sp, #8
90001a20:	af00      	add	r7, sp, #0
90001a22:	6078      	str	r0, [r7, #4]
90001a24:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90001a26:	4b0e      	ldr	r3, [pc, #56]	@ (90001a60 <MT48LC4M32B2_ClockEnable+0x44>)
90001a28:	2201      	movs	r2, #1
90001a2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001a2c:	4a0c      	ldr	r2, [pc, #48]	@ (90001a60 <MT48LC4M32B2_ClockEnable+0x44>)
90001a2e:	683b      	ldr	r3, [r7, #0]
90001a30:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001a32:	4b0b      	ldr	r3, [pc, #44]	@ (90001a60 <MT48LC4M32B2_ClockEnable+0x44>)
90001a34:	2201      	movs	r2, #1
90001a36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001a38:	4b09      	ldr	r3, [pc, #36]	@ (90001a60 <MT48LC4M32B2_ClockEnable+0x44>)
90001a3a:	2200      	movs	r2, #0
90001a3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001a42:	4907      	ldr	r1, [pc, #28]	@ (90001a60 <MT48LC4M32B2_ClockEnable+0x44>)
90001a44:	6878      	ldr	r0, [r7, #4]
90001a46:	f008 fd87 	bl	9000a558 <HAL_SDRAM_SendCommand>
90001a4a:	4603      	mov	r3, r0
90001a4c:	2b00      	cmp	r3, #0
90001a4e:	d002      	beq.n	90001a56 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001a50:	f04f 33ff 	mov.w	r3, #4294967295
90001a54:	e000      	b.n	90001a58 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001a56:	2300      	movs	r3, #0
  }
}
90001a58:	4618      	mov	r0, r3
90001a5a:	3708      	adds	r7, #8
90001a5c:	46bd      	mov	sp, r7
90001a5e:	bd80      	pop	{r7, pc}
90001a60:	20000664 	.word	0x20000664

90001a64 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001a64:	b580      	push	{r7, lr}
90001a66:	b082      	sub	sp, #8
90001a68:	af00      	add	r7, sp, #0
90001a6a:	6078      	str	r0, [r7, #4]
90001a6c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (90001aa8 <MT48LC4M32B2_Precharge+0x44>)
90001a70:	2202      	movs	r2, #2
90001a72:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001a74:	4a0c      	ldr	r2, [pc, #48]	@ (90001aa8 <MT48LC4M32B2_Precharge+0x44>)
90001a76:	683b      	ldr	r3, [r7, #0]
90001a78:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (90001aa8 <MT48LC4M32B2_Precharge+0x44>)
90001a7c:	2201      	movs	r2, #1
90001a7e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001a80:	4b09      	ldr	r3, [pc, #36]	@ (90001aa8 <MT48LC4M32B2_Precharge+0x44>)
90001a82:	2200      	movs	r2, #0
90001a84:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001a8a:	4907      	ldr	r1, [pc, #28]	@ (90001aa8 <MT48LC4M32B2_Precharge+0x44>)
90001a8c:	6878      	ldr	r0, [r7, #4]
90001a8e:	f008 fd63 	bl	9000a558 <HAL_SDRAM_SendCommand>
90001a92:	4603      	mov	r3, r0
90001a94:	2b00      	cmp	r3, #0
90001a96:	d002      	beq.n	90001a9e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001a98:	f04f 33ff 	mov.w	r3, #4294967295
90001a9c:	e000      	b.n	90001aa0 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001a9e:	2300      	movs	r3, #0
  }
}
90001aa0:	4618      	mov	r0, r3
90001aa2:	3708      	adds	r7, #8
90001aa4:	46bd      	mov	sp, r7
90001aa6:	bd80      	pop	{r7, pc}
90001aa8:	20000664 	.word	0x20000664

90001aac <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001aac:	b580      	push	{r7, lr}
90001aae:	b084      	sub	sp, #16
90001ab0:	af00      	add	r7, sp, #0
90001ab2:	6078      	str	r0, [r7, #4]
90001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001ab6:	683b      	ldr	r3, [r7, #0]
90001ab8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90001aba:	683b      	ldr	r3, [r7, #0]
90001abc:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001abe:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001ac0:	683b      	ldr	r3, [r7, #0]
90001ac2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
90001ac4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
90001ac6:	683b      	ldr	r3, [r7, #0]
90001ac8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001aca:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001acc:	683b      	ldr	r3, [r7, #0]
90001ace:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001ad0:	4313      	orrs	r3, r2
90001ad2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (90001b10 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001ad6:	2204      	movs	r2, #4
90001ad8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001ada:	683b      	ldr	r3, [r7, #0]
90001adc:	681b      	ldr	r3, [r3, #0]
90001ade:	4a0c      	ldr	r2, [pc, #48]	@ (90001b10 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001ae0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (90001b10 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001ae4:	2201      	movs	r2, #1
90001ae6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001ae8:	4a09      	ldr	r2, [pc, #36]	@ (90001b10 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001aea:	68fb      	ldr	r3, [r7, #12]
90001aec:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001af2:	4907      	ldr	r1, [pc, #28]	@ (90001b10 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001af4:	6878      	ldr	r0, [r7, #4]
90001af6:	f008 fd2f 	bl	9000a558 <HAL_SDRAM_SendCommand>
90001afa:	4603      	mov	r3, r0
90001afc:	2b00      	cmp	r3, #0
90001afe:	d002      	beq.n	90001b06 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001b00:	f04f 33ff 	mov.w	r3, #4294967295
90001b04:	e000      	b.n	90001b08 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001b06:	2300      	movs	r3, #0
  }
}
90001b08:	4618      	mov	r0, r3
90001b0a:	3710      	adds	r7, #16
90001b0c:	46bd      	mov	sp, r7
90001b0e:	bd80      	pop	{r7, pc}
90001b10:	20000664 	.word	0x20000664

90001b14 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001b14:	b580      	push	{r7, lr}
90001b16:	b084      	sub	sp, #16
90001b18:	af00      	add	r7, sp, #0
90001b1a:	60f8      	str	r0, [r7, #12]
90001b1c:	60b9      	str	r1, [r7, #8]
90001b1e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001b20:	4a0e      	ldr	r2, [pc, #56]	@ (90001b5c <MT48LC4M32B2_RefreshMode+0x48>)
90001b22:	687b      	ldr	r3, [r7, #4]
90001b24:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001b26:	4a0d      	ldr	r2, [pc, #52]	@ (90001b5c <MT48LC4M32B2_RefreshMode+0x48>)
90001b28:	68bb      	ldr	r3, [r7, #8]
90001b2a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (90001b5c <MT48LC4M32B2_RefreshMode+0x48>)
90001b2e:	2208      	movs	r2, #8
90001b30:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001b32:	4b0a      	ldr	r3, [pc, #40]	@ (90001b5c <MT48LC4M32B2_RefreshMode+0x48>)
90001b34:	2200      	movs	r2, #0
90001b36:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001b3c:	4907      	ldr	r1, [pc, #28]	@ (90001b5c <MT48LC4M32B2_RefreshMode+0x48>)
90001b3e:	68f8      	ldr	r0, [r7, #12]
90001b40:	f008 fd0a 	bl	9000a558 <HAL_SDRAM_SendCommand>
90001b44:	4603      	mov	r3, r0
90001b46:	2b00      	cmp	r3, #0
90001b48:	d002      	beq.n	90001b50 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001b4a:	f04f 33ff 	mov.w	r3, #4294967295
90001b4e:	e000      	b.n	90001b52 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001b50:	2300      	movs	r3, #0
  }
}
90001b52:	4618      	mov	r0, r3
90001b54:	3710      	adds	r7, #16
90001b56:	46bd      	mov	sp, r7
90001b58:	bd80      	pop	{r7, pc}
90001b5a:	bf00      	nop
90001b5c:	20000664 	.word	0x20000664

90001b60 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90001b60:	b580      	push	{r7, lr}
90001b62:	b082      	sub	sp, #8
90001b64:	af00      	add	r7, sp, #0
90001b66:	6078      	str	r0, [r7, #4]
90001b68:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90001b6a:	6839      	ldr	r1, [r7, #0]
90001b6c:	6878      	ldr	r0, [r7, #4]
90001b6e:	f008 fd28 	bl	9000a5c2 <HAL_SDRAM_ProgramRefreshRate>
90001b72:	4603      	mov	r3, r0
90001b74:	2b00      	cmp	r3, #0
90001b76:	d002      	beq.n	90001b7e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001b78:	f04f 33ff 	mov.w	r3, #4294967295
90001b7c:	e000      	b.n	90001b80 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001b7e:	2300      	movs	r3, #0
  }
}
90001b80:	4618      	mov	r0, r3
90001b82:	3708      	adds	r7, #8
90001b84:	46bd      	mov	sp, r7
90001b86:	bd80      	pop	{r7, pc}

90001b88 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001b88:	b580      	push	{r7, lr}
90001b8a:	b084      	sub	sp, #16
90001b8c:	af00      	add	r7, sp, #0
90001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90001b90:	f001 ff36 	bl	90003a00 <HAL_GetTick>
90001b94:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
90001b96:	bf00      	nop
90001b98:	f001 ff32 	bl	90003a00 <HAL_GetTick>
90001b9c:	4602      	mov	r2, r0
90001b9e:	68fb      	ldr	r3, [r7, #12]
90001ba0:	1ad3      	subs	r3, r2, r3
90001ba2:	687a      	ldr	r2, [r7, #4]
90001ba4:	429a      	cmp	r2, r3
90001ba6:	d8f7      	bhi.n	90001b98 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001ba8:	2300      	movs	r3, #0
}
90001baa:	4618      	mov	r0, r3
90001bac:	3710      	adds	r7, #16
90001bae:	46bd      	mov	sp, r7
90001bb0:	bd80      	pop	{r7, pc}
	...

90001bb4 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
90001bb4:	b580      	push	{r7, lr}
90001bb6:	b08a      	sub	sp, #40	@ 0x28
90001bb8:	af00      	add	r7, sp, #0
90001bba:	4603      	mov	r3, r0
90001bbc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90001bbe:	2300      	movs	r3, #0
90001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
90001bc2:	79fb      	ldrb	r3, [r7, #7]
90001bc4:	2b00      	cmp	r3, #0
90001bc6:	d10f      	bne.n	90001be8 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90001bc8:	4b26      	ldr	r3, [pc, #152]	@ (90001c64 <BSP_LED_Init+0xb0>)
90001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001bce:	4a25      	ldr	r2, [pc, #148]	@ (90001c64 <BSP_LED_Init+0xb0>)
90001bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001bd8:	4b22      	ldr	r3, [pc, #136]	@ (90001c64 <BSP_LED_Init+0xb0>)
90001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90001be2:	60fb      	str	r3, [r7, #12]
90001be4:	68fb      	ldr	r3, [r7, #12]
90001be6:	e015      	b.n	90001c14 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001be8:	79fb      	ldrb	r3, [r7, #7]
90001bea:	2b01      	cmp	r3, #1
90001bec:	d10f      	bne.n	90001c0e <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
90001bee:	4b1d      	ldr	r3, [pc, #116]	@ (90001c64 <BSP_LED_Init+0xb0>)
90001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001bf4:	4a1b      	ldr	r2, [pc, #108]	@ (90001c64 <BSP_LED_Init+0xb0>)
90001bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001bfe:	4b19      	ldr	r3, [pc, #100]	@ (90001c64 <BSP_LED_Init+0xb0>)
90001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001c08:	60bb      	str	r3, [r7, #8]
90001c0a:	68bb      	ldr	r3, [r7, #8]
90001c0c:	e002      	b.n	90001c14 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001c0e:	f06f 0301 	mvn.w	r3, #1
90001c12:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
90001c14:	79fb      	ldrb	r3, [r7, #7]
90001c16:	4a14      	ldr	r2, [pc, #80]	@ (90001c68 <BSP_LED_Init+0xb4>)
90001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001c1c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001c1e:	2301      	movs	r3, #1
90001c20:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
90001c22:	2301      	movs	r3, #1
90001c24:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001c26:	2303      	movs	r3, #3
90001c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
90001c2a:	79fb      	ldrb	r3, [r7, #7]
90001c2c:	4a0f      	ldr	r2, [pc, #60]	@ (90001c6c <BSP_LED_Init+0xb8>)
90001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001c32:	f107 0210 	add.w	r2, r7, #16
90001c36:	4611      	mov	r1, r2
90001c38:	4618      	mov	r0, r3
90001c3a:	f002 fb8b 	bl	90004354 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
90001c3e:	79fb      	ldrb	r3, [r7, #7]
90001c40:	4a0a      	ldr	r2, [pc, #40]	@ (90001c6c <BSP_LED_Init+0xb8>)
90001c42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90001c46:	79fb      	ldrb	r3, [r7, #7]
90001c48:	4a07      	ldr	r2, [pc, #28]	@ (90001c68 <BSP_LED_Init+0xb4>)
90001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001c4e:	b29b      	uxth	r3, r3
90001c50:	2201      	movs	r2, #1
90001c52:	4619      	mov	r1, r3
90001c54:	f002 fe50 	bl	900048f8 <HAL_GPIO_WritePin>
  return ret;
90001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
90001c5a:	4618      	mov	r0, r3
90001c5c:	3728      	adds	r7, #40	@ 0x28
90001c5e:	46bd      	mov	sp, r7
90001c60:	bd80      	pop	{r7, pc}
90001c62:	bf00      	nop
90001c64:	58024400 	.word	0x58024400
90001c68:	9000db94 	.word	0x9000db94
90001c6c:	20000080 	.word	0x20000080

90001c70 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
90001c70:	b580      	push	{r7, lr}
90001c72:	b082      	sub	sp, #8
90001c74:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001c76:	2300      	movs	r3, #0
90001c78:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001c7a:	4b16      	ldr	r3, [pc, #88]	@ (90001cd4 <BSP_I2C4_Init+0x64>)
90001c7c:	4a16      	ldr	r2, [pc, #88]	@ (90001cd8 <BSP_I2C4_Init+0x68>)
90001c7e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
90001c80:	4b16      	ldr	r3, [pc, #88]	@ (90001cdc <BSP_I2C4_Init+0x6c>)
90001c82:	681b      	ldr	r3, [r3, #0]
90001c84:	2b00      	cmp	r3, #0
90001c86:	d11f      	bne.n	90001cc8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001c88:	4b14      	ldr	r3, [pc, #80]	@ (90001cdc <BSP_I2C4_Init+0x6c>)
90001c8a:	681b      	ldr	r3, [r3, #0]
90001c8c:	3301      	adds	r3, #1
90001c8e:	4a13      	ldr	r2, [pc, #76]	@ (90001cdc <BSP_I2C4_Init+0x6c>)
90001c90:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90001c92:	4810      	ldr	r0, [pc, #64]	@ (90001cd4 <BSP_I2C4_Init+0x64>)
90001c94:	f004 fefe 	bl	90006a94 <HAL_I2C_GetState>
90001c98:	4603      	mov	r3, r0
90001c9a:	2b00      	cmp	r3, #0
90001c9c:	d114      	bne.n	90001cc8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
90001c9e:	480d      	ldr	r0, [pc, #52]	@ (90001cd4 <BSP_I2C4_Init+0x64>)
90001ca0:	f000 fb60 	bl	90002364 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001ca4:	f006 fdd0 	bl	90008848 <HAL_RCC_GetPCLK2Freq>
90001ca8:	4603      	mov	r3, r0
90001caa:	490d      	ldr	r1, [pc, #52]	@ (90001ce0 <BSP_I2C4_Init+0x70>)
90001cac:	4618      	mov	r0, r3
90001cae:	f000 f8e3 	bl	90001e78 <I2C_GetTiming>
90001cb2:	4603      	mov	r3, r0
90001cb4:	4619      	mov	r1, r3
90001cb6:	4807      	ldr	r0, [pc, #28]	@ (90001cd4 <BSP_I2C4_Init+0x64>)
90001cb8:	f000 f838 	bl	90001d2c <MX_I2C4_Init>
90001cbc:	4603      	mov	r3, r0
90001cbe:	2b00      	cmp	r3, #0
90001cc0:	d002      	beq.n	90001cc8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
90001cc2:	f06f 0307 	mvn.w	r3, #7
90001cc6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001cc8:	687b      	ldr	r3, [r7, #4]
}
90001cca:	4618      	mov	r0, r3
90001ccc:	3708      	adds	r7, #8
90001cce:	46bd      	mov	sp, r7
90001cd0:	bd80      	pop	{r7, pc}
90001cd2:	bf00      	nop
90001cd4:	2000107c 	.word	0x2000107c
90001cd8:	58001c00 	.word	0x58001c00
90001cdc:	20000674 	.word	0x20000674
90001ce0:	000186a0 	.word	0x000186a0

90001ce4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
90001ce4:	b580      	push	{r7, lr}
90001ce6:	b082      	sub	sp, #8
90001ce8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
90001cea:	2300      	movs	r3, #0
90001cec:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
90001cee:	4b0d      	ldr	r3, [pc, #52]	@ (90001d24 <BSP_I2C4_DeInit+0x40>)
90001cf0:	681b      	ldr	r3, [r3, #0]
90001cf2:	3b01      	subs	r3, #1
90001cf4:	4a0b      	ldr	r2, [pc, #44]	@ (90001d24 <BSP_I2C4_DeInit+0x40>)
90001cf6:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (90001d24 <BSP_I2C4_DeInit+0x40>)
90001cfa:	681b      	ldr	r3, [r3, #0]
90001cfc:	2b00      	cmp	r3, #0
90001cfe:	d10b      	bne.n	90001d18 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
90001d00:	4809      	ldr	r0, [pc, #36]	@ (90001d28 <BSP_I2C4_DeInit+0x44>)
90001d02:	f000 fb9b 	bl	9000243c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90001d06:	4808      	ldr	r0, [pc, #32]	@ (90001d28 <BSP_I2C4_DeInit+0x44>)
90001d08:	f004 fc52 	bl	900065b0 <HAL_I2C_DeInit>
90001d0c:	4603      	mov	r3, r0
90001d0e:	2b00      	cmp	r3, #0
90001d10:	d002      	beq.n	90001d18 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
90001d12:	f06f 0307 	mvn.w	r3, #7
90001d16:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
90001d18:	687b      	ldr	r3, [r7, #4]
}
90001d1a:	4618      	mov	r0, r3
90001d1c:	3708      	adds	r7, #8
90001d1e:	46bd      	mov	sp, r7
90001d20:	bd80      	pop	{r7, pc}
90001d22:	bf00      	nop
90001d24:	20000674 	.word	0x20000674
90001d28:	2000107c 	.word	0x2000107c

90001d2c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001d2c:	b580      	push	{r7, lr}
90001d2e:	b084      	sub	sp, #16
90001d30:	af00      	add	r7, sp, #0
90001d32:	6078      	str	r0, [r7, #4]
90001d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001d36:	2300      	movs	r3, #0
90001d38:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001d3a:	687b      	ldr	r3, [r7, #4]
90001d3c:	683a      	ldr	r2, [r7, #0]
90001d3e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001d40:	687b      	ldr	r3, [r7, #4]
90001d42:	2200      	movs	r2, #0
90001d44:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001d46:	687b      	ldr	r3, [r7, #4]
90001d48:	2201      	movs	r2, #1
90001d4a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001d4c:	687b      	ldr	r3, [r7, #4]
90001d4e:	2200      	movs	r2, #0
90001d50:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001d52:	687b      	ldr	r3, [r7, #4]
90001d54:	2200      	movs	r2, #0
90001d56:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001d58:	687b      	ldr	r3, [r7, #4]
90001d5a:	2200      	movs	r2, #0
90001d5c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001d5e:	687b      	ldr	r3, [r7, #4]
90001d60:	2200      	movs	r2, #0
90001d62:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001d64:	687b      	ldr	r3, [r7, #4]
90001d66:	2200      	movs	r2, #0
90001d68:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001d6a:	6878      	ldr	r0, [r7, #4]
90001d6c:	f004 fb84 	bl	90006478 <HAL_I2C_Init>
90001d70:	4603      	mov	r3, r0
90001d72:	2b00      	cmp	r3, #0
90001d74:	d002      	beq.n	90001d7c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001d76:	2301      	movs	r3, #1
90001d78:	73fb      	strb	r3, [r7, #15]
90001d7a:	e014      	b.n	90001da6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001d7c:	2300      	movs	r3, #0
90001d7e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001d80:	68b9      	ldr	r1, [r7, #8]
90001d82:	6878      	ldr	r0, [r7, #4]
90001d84:	f005 f962 	bl	9000704c <HAL_I2CEx_ConfigAnalogFilter>
90001d88:	4603      	mov	r3, r0
90001d8a:	2b00      	cmp	r3, #0
90001d8c:	d002      	beq.n	90001d94 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90001d8e:	2301      	movs	r3, #1
90001d90:	73fb      	strb	r3, [r7, #15]
90001d92:	e008      	b.n	90001da6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001d94:	2100      	movs	r1, #0
90001d96:	6878      	ldr	r0, [r7, #4]
90001d98:	f005 f9a3 	bl	900070e2 <HAL_I2CEx_ConfigDigitalFilter>
90001d9c:	4603      	mov	r3, r0
90001d9e:	2b00      	cmp	r3, #0
90001da0:	d001      	beq.n	90001da6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001da2:	2301      	movs	r3, #1
90001da4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001da6:	7bfb      	ldrb	r3, [r7, #15]
}
90001da8:	4618      	mov	r0, r3
90001daa:	3710      	adds	r7, #16
90001dac:	46bd      	mov	sp, r7
90001dae:	bd80      	pop	{r7, pc}

90001db0 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001db0:	b580      	push	{r7, lr}
90001db2:	b088      	sub	sp, #32
90001db4:	af02      	add	r7, sp, #8
90001db6:	60ba      	str	r2, [r7, #8]
90001db8:	461a      	mov	r2, r3
90001dba:	4603      	mov	r3, r0
90001dbc:	81fb      	strh	r3, [r7, #14]
90001dbe:	460b      	mov	r3, r1
90001dc0:	81bb      	strh	r3, [r7, #12]
90001dc2:	4613      	mov	r3, r2
90001dc4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001dc6:	89b9      	ldrh	r1, [r7, #12]
90001dc8:	89f8      	ldrh	r0, [r7, #14]
90001dca:	88fb      	ldrh	r3, [r7, #6]
90001dcc:	9300      	str	r3, [sp, #0]
90001dce:	68bb      	ldr	r3, [r7, #8]
90001dd0:	2201      	movs	r2, #1
90001dd2:	f000 fb57 	bl	90002484 <I2C4_WriteReg>
90001dd6:	4603      	mov	r3, r0
90001dd8:	2b00      	cmp	r3, #0
90001dda:	d102      	bne.n	90001de2 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001ddc:	2300      	movs	r3, #0
90001dde:	617b      	str	r3, [r7, #20]
90001de0:	e00c      	b.n	90001dfc <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001de2:	4809      	ldr	r0, [pc, #36]	@ (90001e08 <BSP_I2C4_WriteReg+0x58>)
90001de4:	f004 fe64 	bl	90006ab0 <HAL_I2C_GetError>
90001de8:	4603      	mov	r3, r0
90001dea:	2b04      	cmp	r3, #4
90001dec:	d103      	bne.n	90001df6 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001dee:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001df2:	617b      	str	r3, [r7, #20]
90001df4:	e002      	b.n	90001dfc <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001df6:	f06f 0303 	mvn.w	r3, #3
90001dfa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001dfc:	697b      	ldr	r3, [r7, #20]
}
90001dfe:	4618      	mov	r0, r3
90001e00:	3718      	adds	r7, #24
90001e02:	46bd      	mov	sp, r7
90001e04:	bd80      	pop	{r7, pc}
90001e06:	bf00      	nop
90001e08:	2000107c 	.word	0x2000107c

90001e0c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001e0c:	b580      	push	{r7, lr}
90001e0e:	b088      	sub	sp, #32
90001e10:	af02      	add	r7, sp, #8
90001e12:	60ba      	str	r2, [r7, #8]
90001e14:	461a      	mov	r2, r3
90001e16:	4603      	mov	r3, r0
90001e18:	81fb      	strh	r3, [r7, #14]
90001e1a:	460b      	mov	r3, r1
90001e1c:	81bb      	strh	r3, [r7, #12]
90001e1e:	4613      	mov	r3, r2
90001e20:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001e22:	89b9      	ldrh	r1, [r7, #12]
90001e24:	89f8      	ldrh	r0, [r7, #14]
90001e26:	88fb      	ldrh	r3, [r7, #6]
90001e28:	9300      	str	r3, [sp, #0]
90001e2a:	68bb      	ldr	r3, [r7, #8]
90001e2c:	2201      	movs	r2, #1
90001e2e:	f000 fb4f 	bl	900024d0 <I2C4_ReadReg>
90001e32:	4603      	mov	r3, r0
90001e34:	2b00      	cmp	r3, #0
90001e36:	d102      	bne.n	90001e3e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001e38:	2300      	movs	r3, #0
90001e3a:	617b      	str	r3, [r7, #20]
90001e3c:	e00c      	b.n	90001e58 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001e3e:	4809      	ldr	r0, [pc, #36]	@ (90001e64 <BSP_I2C4_ReadReg+0x58>)
90001e40:	f004 fe36 	bl	90006ab0 <HAL_I2C_GetError>
90001e44:	4603      	mov	r3, r0
90001e46:	2b04      	cmp	r3, #4
90001e48:	d103      	bne.n	90001e52 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001e4a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001e4e:	617b      	str	r3, [r7, #20]
90001e50:	e002      	b.n	90001e58 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001e52:	f06f 0303 	mvn.w	r3, #3
90001e56:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001e58:	697b      	ldr	r3, [r7, #20]
}
90001e5a:	4618      	mov	r0, r3
90001e5c:	3718      	adds	r7, #24
90001e5e:	46bd      	mov	sp, r7
90001e60:	bd80      	pop	{r7, pc}
90001e62:	bf00      	nop
90001e64:	2000107c 	.word	0x2000107c

90001e68 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
90001e68:	b580      	push	{r7, lr}
90001e6a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
90001e6c:	f001 fdc8 	bl	90003a00 <HAL_GetTick>
90001e70:	4603      	mov	r3, r0
}
90001e72:	4618      	mov	r0, r3
90001e74:	bd80      	pop	{r7, pc}
	...

90001e78 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001e78:	b580      	push	{r7, lr}
90001e7a:	b086      	sub	sp, #24
90001e7c:	af00      	add	r7, sp, #0
90001e7e:	6078      	str	r0, [r7, #4]
90001e80:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001e82:	2300      	movs	r3, #0
90001e84:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001e86:	687b      	ldr	r3, [r7, #4]
90001e88:	2b00      	cmp	r3, #0
90001e8a:	d06b      	beq.n	90001f64 <I2C_GetTiming+0xec>
90001e8c:	683b      	ldr	r3, [r7, #0]
90001e8e:	2b00      	cmp	r3, #0
90001e90:	d068      	beq.n	90001f64 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001e92:	2300      	movs	r3, #0
90001e94:	613b      	str	r3, [r7, #16]
90001e96:	e060      	b.n	90001f5a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001e98:	4a35      	ldr	r2, [pc, #212]	@ (90001f70 <I2C_GetTiming+0xf8>)
90001e9a:	693b      	ldr	r3, [r7, #16]
90001e9c:	212c      	movs	r1, #44	@ 0x2c
90001e9e:	fb01 f303 	mul.w	r3, r1, r3
90001ea2:	4413      	add	r3, r2
90001ea4:	3304      	adds	r3, #4
90001ea6:	681b      	ldr	r3, [r3, #0]
90001ea8:	683a      	ldr	r2, [r7, #0]
90001eaa:	429a      	cmp	r2, r3
90001eac:	d352      	bcc.n	90001f54 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001eae:	4a30      	ldr	r2, [pc, #192]	@ (90001f70 <I2C_GetTiming+0xf8>)
90001eb0:	693b      	ldr	r3, [r7, #16]
90001eb2:	212c      	movs	r1, #44	@ 0x2c
90001eb4:	fb01 f303 	mul.w	r3, r1, r3
90001eb8:	4413      	add	r3, r2
90001eba:	3308      	adds	r3, #8
90001ebc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001ebe:	683a      	ldr	r2, [r7, #0]
90001ec0:	429a      	cmp	r2, r3
90001ec2:	d847      	bhi.n	90001f54 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001ec4:	6939      	ldr	r1, [r7, #16]
90001ec6:	6878      	ldr	r0, [r7, #4]
90001ec8:	f000 f856 	bl	90001f78 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001ecc:	6939      	ldr	r1, [r7, #16]
90001ece:	6878      	ldr	r0, [r7, #4]
90001ed0:	f000 f940 	bl	90002154 <I2C_Compute_SCLL_SCLH>
90001ed4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001ed6:	68fb      	ldr	r3, [r7, #12]
90001ed8:	2b7f      	cmp	r3, #127	@ 0x7f
90001eda:	d842      	bhi.n	90001f62 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001edc:	4925      	ldr	r1, [pc, #148]	@ (90001f74 <I2C_GetTiming+0xfc>)
90001ede:	68fa      	ldr	r2, [r7, #12]
90001ee0:	4613      	mov	r3, r2
90001ee2:	009b      	lsls	r3, r3, #2
90001ee4:	4413      	add	r3, r2
90001ee6:	009b      	lsls	r3, r3, #2
90001ee8:	440b      	add	r3, r1
90001eea:	681b      	ldr	r3, [r3, #0]
90001eec:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001eee:	4821      	ldr	r0, [pc, #132]	@ (90001f74 <I2C_GetTiming+0xfc>)
90001ef0:	68fa      	ldr	r2, [r7, #12]
90001ef2:	4613      	mov	r3, r2
90001ef4:	009b      	lsls	r3, r3, #2
90001ef6:	4413      	add	r3, r2
90001ef8:	009b      	lsls	r3, r3, #2
90001efa:	4403      	add	r3, r0
90001efc:	3304      	adds	r3, #4
90001efe:	681b      	ldr	r3, [r3, #0]
90001f00:	051b      	lsls	r3, r3, #20
90001f02:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001f06:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001f08:	481a      	ldr	r0, [pc, #104]	@ (90001f74 <I2C_GetTiming+0xfc>)
90001f0a:	68fa      	ldr	r2, [r7, #12]
90001f0c:	4613      	mov	r3, r2
90001f0e:	009b      	lsls	r3, r3, #2
90001f10:	4413      	add	r3, r2
90001f12:	009b      	lsls	r3, r3, #2
90001f14:	4403      	add	r3, r0
90001f16:	3308      	adds	r3, #8
90001f18:	681b      	ldr	r3, [r3, #0]
90001f1a:	041b      	lsls	r3, r3, #16
90001f1c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001f20:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001f22:	4814      	ldr	r0, [pc, #80]	@ (90001f74 <I2C_GetTiming+0xfc>)
90001f24:	68fa      	ldr	r2, [r7, #12]
90001f26:	4613      	mov	r3, r2
90001f28:	009b      	lsls	r3, r3, #2
90001f2a:	4413      	add	r3, r2
90001f2c:	009b      	lsls	r3, r3, #2
90001f2e:	4403      	add	r3, r0
90001f30:	330c      	adds	r3, #12
90001f32:	681b      	ldr	r3, [r3, #0]
90001f34:	021b      	lsls	r3, r3, #8
90001f36:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001f38:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001f3a:	480e      	ldr	r0, [pc, #56]	@ (90001f74 <I2C_GetTiming+0xfc>)
90001f3c:	68fa      	ldr	r2, [r7, #12]
90001f3e:	4613      	mov	r3, r2
90001f40:	009b      	lsls	r3, r3, #2
90001f42:	4413      	add	r3, r2
90001f44:	009b      	lsls	r3, r3, #2
90001f46:	4403      	add	r3, r0
90001f48:	3310      	adds	r3, #16
90001f4a:	681b      	ldr	r3, [r3, #0]
90001f4c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001f4e:	430b      	orrs	r3, r1
90001f50:	617b      	str	r3, [r7, #20]
        }
        break;
90001f52:	e006      	b.n	90001f62 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001f54:	693b      	ldr	r3, [r7, #16]
90001f56:	3301      	adds	r3, #1
90001f58:	613b      	str	r3, [r7, #16]
90001f5a:	693b      	ldr	r3, [r7, #16]
90001f5c:	2b02      	cmp	r3, #2
90001f5e:	d99b      	bls.n	90001e98 <I2C_GetTiming+0x20>
90001f60:	e000      	b.n	90001f64 <I2C_GetTiming+0xec>
        break;
90001f62:	bf00      	nop
      }
    }
  }

  return ret;
90001f64:	697b      	ldr	r3, [r7, #20]
}
90001f66:	4618      	mov	r0, r3
90001f68:	3718      	adds	r7, #24
90001f6a:	46bd      	mov	sp, r7
90001f6c:	bd80      	pop	{r7, pc}
90001f6e:	bf00      	nop
90001f70:	9000db9c 	.word	0x9000db9c
90001f74:	20000678 	.word	0x20000678

90001f78 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001f78:	b480      	push	{r7}
90001f7a:	b08f      	sub	sp, #60	@ 0x3c
90001f7c:	af00      	add	r7, sp, #0
90001f7e:	6078      	str	r0, [r7, #4]
90001f80:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001f82:	2310      	movs	r3, #16
90001f84:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001f86:	687b      	ldr	r3, [r7, #4]
90001f88:	085a      	lsrs	r2, r3, #1
90001f8a:	4b6e      	ldr	r3, [pc, #440]	@ (90002144 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001f8c:	4413      	add	r3, r2
90001f8e:	687a      	ldr	r2, [r7, #4]
90001f90:	fbb3 f3f2 	udiv	r3, r3, r2
90001f94:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001f96:	2332      	movs	r3, #50	@ 0x32
90001f98:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001f9a:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001f9e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001fa0:	4a69      	ldr	r2, [pc, #420]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001fa2:	683b      	ldr	r3, [r7, #0]
90001fa4:	212c      	movs	r1, #44	@ 0x2c
90001fa6:	fb01 f303 	mul.w	r3, r1, r3
90001faa:	4413      	add	r3, r2
90001fac:	3324      	adds	r3, #36	@ 0x24
90001fae:	681b      	ldr	r3, [r3, #0]
90001fb0:	4618      	mov	r0, r3
90001fb2:	4a65      	ldr	r2, [pc, #404]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001fb4:	683b      	ldr	r3, [r7, #0]
90001fb6:	212c      	movs	r1, #44	@ 0x2c
90001fb8:	fb01 f303 	mul.w	r3, r1, r3
90001fbc:	4413      	add	r3, r2
90001fbe:	330c      	adds	r3, #12
90001fc0:	681b      	ldr	r3, [r3, #0]
90001fc2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001fc4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001fc6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001fc8:	495f      	ldr	r1, [pc, #380]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001fca:	683b      	ldr	r3, [r7, #0]
90001fcc:	202c      	movs	r0, #44	@ 0x2c
90001fce:	fb00 f303 	mul.w	r3, r0, r3
90001fd2:	440b      	add	r3, r1
90001fd4:	3328      	adds	r3, #40	@ 0x28
90001fd6:	681b      	ldr	r3, [r3, #0]
90001fd8:	3303      	adds	r3, #3
90001fda:	69f9      	ldr	r1, [r7, #28]
90001fdc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001fe0:	1ad3      	subs	r3, r2, r3
90001fe2:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001fe4:	4a58      	ldr	r2, [pc, #352]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001fe6:	683b      	ldr	r3, [r7, #0]
90001fe8:	212c      	movs	r1, #44	@ 0x2c
90001fea:	fb01 f303 	mul.w	r3, r1, r3
90001fee:	4413      	add	r3, r2
90001ff0:	3310      	adds	r3, #16
90001ff2:	681b      	ldr	r3, [r3, #0]
90001ff4:	4618      	mov	r0, r3
90001ff6:	4a54      	ldr	r2, [pc, #336]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ff8:	683b      	ldr	r3, [r7, #0]
90001ffa:	212c      	movs	r1, #44	@ 0x2c
90001ffc:	fb01 f303 	mul.w	r3, r1, r3
90002000:	4413      	add	r3, r2
90002002:	3320      	adds	r3, #32
90002004:	681b      	ldr	r3, [r3, #0]
90002006:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90002008:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
9000200a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
9000200c:	494e      	ldr	r1, [pc, #312]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000200e:	683b      	ldr	r3, [r7, #0]
90002010:	202c      	movs	r0, #44	@ 0x2c
90002012:	fb00 f303 	mul.w	r3, r0, r3
90002016:	440b      	add	r3, r1
90002018:	3328      	adds	r3, #40	@ 0x28
9000201a:	681b      	ldr	r3, [r3, #0]
9000201c:	3304      	adds	r3, #4
9000201e:	69f9      	ldr	r1, [r7, #28]
90002020:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90002024:	1ad3      	subs	r3, r2, r3
90002026:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90002028:	4a47      	ldr	r2, [pc, #284]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000202a:	683b      	ldr	r3, [r7, #0]
9000202c:	212c      	movs	r1, #44	@ 0x2c
9000202e:	fb01 f303 	mul.w	r3, r1, r3
90002032:	4413      	add	r3, r2
90002034:	3320      	adds	r3, #32
90002036:	681b      	ldr	r3, [r3, #0]
90002038:	4618      	mov	r0, r3
9000203a:	4a43      	ldr	r2, [pc, #268]	@ (90002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000203c:	683b      	ldr	r3, [r7, #0]
9000203e:	212c      	movs	r1, #44	@ 0x2c
90002040:	fb01 f303 	mul.w	r3, r1, r3
90002044:	4413      	add	r3, r2
90002046:	3314      	adds	r3, #20
90002048:	681b      	ldr	r3, [r3, #0]
9000204a:	4403      	add	r3, r0
9000204c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
9000204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90002050:	2b00      	cmp	r3, #0
90002052:	dc01      	bgt.n	90002058 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90002054:	2300      	movs	r3, #0
90002056:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90002058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000205a:	2b00      	cmp	r3, #0
9000205c:	dc01      	bgt.n	90002062 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
9000205e:	2300      	movs	r3, #0
90002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90002062:	2300      	movs	r3, #0
90002064:	62bb      	str	r3, [r7, #40]	@ 0x28
90002066:	e062      	b.n	9000212e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90002068:	2300      	movs	r3, #0
9000206a:	627b      	str	r3, [r7, #36]	@ 0x24
9000206c:	e059      	b.n	90002122 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
9000206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002070:	3301      	adds	r3, #1
90002072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002074:	3201      	adds	r2, #1
90002076:	fb03 f202 	mul.w	r2, r3, r2
9000207a:	69fb      	ldr	r3, [r7, #28]
9000207c:	fb02 f303 	mul.w	r3, r2, r3
90002080:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90002082:	693b      	ldr	r3, [r7, #16]
90002084:	68fa      	ldr	r2, [r7, #12]
90002086:	429a      	cmp	r2, r3
90002088:	d348      	bcc.n	9000211c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
9000208a:	2300      	movs	r3, #0
9000208c:	623b      	str	r3, [r7, #32]
9000208e:	e042      	b.n	90002116 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90002090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002092:	3301      	adds	r3, #1
90002094:	6a3a      	ldr	r2, [r7, #32]
90002096:	fb03 f202 	mul.w	r2, r3, r2
9000209a:	69fb      	ldr	r3, [r7, #28]
9000209c:	fb02 f303 	mul.w	r3, r2, r3
900020a0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900020a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900020a4:	68ba      	ldr	r2, [r7, #8]
900020a6:	429a      	cmp	r2, r3
900020a8:	d332      	bcc.n	90002110 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
900020aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900020ac:	68ba      	ldr	r2, [r7, #8]
900020ae:	429a      	cmp	r2, r3
900020b0:	d82e      	bhi.n	90002110 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
900020b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900020b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
900020b6:	429a      	cmp	r2, r3
900020b8:	d02a      	beq.n	90002110 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900020ba:	4b24      	ldr	r3, [pc, #144]	@ (9000214c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900020bc:	681a      	ldr	r2, [r3, #0]
900020be:	4924      	ldr	r1, [pc, #144]	@ (90002150 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900020c0:	4613      	mov	r3, r2
900020c2:	009b      	lsls	r3, r3, #2
900020c4:	4413      	add	r3, r2
900020c6:	009b      	lsls	r3, r3, #2
900020c8:	440b      	add	r3, r1
900020ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900020cc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900020ce:	4b1f      	ldr	r3, [pc, #124]	@ (9000214c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900020d0:	681a      	ldr	r2, [r3, #0]
900020d2:	491f      	ldr	r1, [pc, #124]	@ (90002150 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900020d4:	4613      	mov	r3, r2
900020d6:	009b      	lsls	r3, r3, #2
900020d8:	4413      	add	r3, r2
900020da:	009b      	lsls	r3, r3, #2
900020dc:	440b      	add	r3, r1
900020de:	3304      	adds	r3, #4
900020e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900020e2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900020e4:	4b19      	ldr	r3, [pc, #100]	@ (9000214c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900020e6:	681a      	ldr	r2, [r3, #0]
900020e8:	4919      	ldr	r1, [pc, #100]	@ (90002150 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900020ea:	4613      	mov	r3, r2
900020ec:	009b      	lsls	r3, r3, #2
900020ee:	4413      	add	r3, r2
900020f0:	009b      	lsls	r3, r3, #2
900020f2:	440b      	add	r3, r1
900020f4:	3308      	adds	r3, #8
900020f6:	6a3a      	ldr	r2, [r7, #32]
900020f8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
900020fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900020fc:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
900020fe:	4b13      	ldr	r3, [pc, #76]	@ (9000214c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002100:	681b      	ldr	r3, [r3, #0]
90002102:	3301      	adds	r3, #1
90002104:	4a11      	ldr	r2, [pc, #68]	@ (9000214c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002106:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90002108:	4b10      	ldr	r3, [pc, #64]	@ (9000214c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
9000210a:	681b      	ldr	r3, [r3, #0]
9000210c:	2b7f      	cmp	r3, #127	@ 0x7f
9000210e:	d812      	bhi.n	90002136 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90002110:	6a3b      	ldr	r3, [r7, #32]
90002112:	3301      	adds	r3, #1
90002114:	623b      	str	r3, [r7, #32]
90002116:	6a3b      	ldr	r3, [r7, #32]
90002118:	2b0f      	cmp	r3, #15
9000211a:	d9b9      	bls.n	90002090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000211e:	3301      	adds	r3, #1
90002120:	627b      	str	r3, [r7, #36]	@ 0x24
90002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002124:	2b0f      	cmp	r3, #15
90002126:	d9a2      	bls.n	9000206e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90002128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000212a:	3301      	adds	r3, #1
9000212c:	62bb      	str	r3, [r7, #40]	@ 0x28
9000212e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002130:	2b0f      	cmp	r3, #15
90002132:	d999      	bls.n	90002068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90002134:	e000      	b.n	90002138 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90002136:	bf00      	nop
          }
        }
      }
    }
  }
}
90002138:	373c      	adds	r7, #60	@ 0x3c
9000213a:	46bd      	mov	sp, r7
9000213c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002140:	4770      	bx	lr
90002142:	bf00      	nop
90002144:	3b9aca00 	.word	0x3b9aca00
90002148:	9000db9c 	.word	0x9000db9c
9000214c:	20001078 	.word	0x20001078
90002150:	20000678 	.word	0x20000678

90002154 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90002154:	b480      	push	{r7}
90002156:	b093      	sub	sp, #76	@ 0x4c
90002158:	af00      	add	r7, sp, #0
9000215a:	6078      	str	r0, [r7, #4]
9000215c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
9000215e:	f04f 33ff 	mov.w	r3, #4294967295
90002162:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90002164:	687b      	ldr	r3, [r7, #4]
90002166:	085a      	lsrs	r2, r3, #1
90002168:	4b7a      	ldr	r3, [pc, #488]	@ (90002354 <I2C_Compute_SCLL_SCLH+0x200>)
9000216a:	4413      	add	r3, r2
9000216c:	687a      	ldr	r2, [r7, #4]
9000216e:	fbb3 f3f2 	udiv	r3, r3, r2
90002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90002174:	4a78      	ldr	r2, [pc, #480]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
90002176:	683b      	ldr	r3, [r7, #0]
90002178:	212c      	movs	r1, #44	@ 0x2c
9000217a:	fb01 f303 	mul.w	r3, r1, r3
9000217e:	4413      	add	r3, r2
90002180:	681b      	ldr	r3, [r3, #0]
90002182:	085a      	lsrs	r2, r3, #1
90002184:	4b73      	ldr	r3, [pc, #460]	@ (90002354 <I2C_Compute_SCLL_SCLH+0x200>)
90002186:	4413      	add	r3, r2
90002188:	4973      	ldr	r1, [pc, #460]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
9000218a:	683a      	ldr	r2, [r7, #0]
9000218c:	202c      	movs	r0, #44	@ 0x2c
9000218e:	fb00 f202 	mul.w	r2, r0, r2
90002192:	440a      	add	r2, r1
90002194:	6812      	ldr	r2, [r2, #0]
90002196:	fbb3 f3f2 	udiv	r3, r3, r2
9000219a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
9000219c:	2332      	movs	r3, #50	@ 0x32
9000219e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
900021a0:	4a6d      	ldr	r2, [pc, #436]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
900021a2:	683b      	ldr	r3, [r7, #0]
900021a4:	212c      	movs	r1, #44	@ 0x2c
900021a6:	fb01 f303 	mul.w	r3, r1, r3
900021aa:	4413      	add	r3, r2
900021ac:	3328      	adds	r3, #40	@ 0x28
900021ae:	681a      	ldr	r2, [r3, #0]
900021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900021b2:	fb02 f303 	mul.w	r3, r2, r3
900021b6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
900021b8:	4a67      	ldr	r2, [pc, #412]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
900021ba:	683b      	ldr	r3, [r7, #0]
900021bc:	212c      	movs	r1, #44	@ 0x2c
900021be:	fb01 f303 	mul.w	r3, r1, r3
900021c2:	4413      	add	r3, r2
900021c4:	3304      	adds	r3, #4
900021c6:	681b      	ldr	r3, [r3, #0]
900021c8:	4a62      	ldr	r2, [pc, #392]	@ (90002354 <I2C_Compute_SCLL_SCLH+0x200>)
900021ca:	fbb2 f3f3 	udiv	r3, r2, r3
900021ce:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
900021d0:	4a61      	ldr	r2, [pc, #388]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
900021d2:	683b      	ldr	r3, [r7, #0]
900021d4:	212c      	movs	r1, #44	@ 0x2c
900021d6:	fb01 f303 	mul.w	r3, r1, r3
900021da:	4413      	add	r3, r2
900021dc:	3308      	adds	r3, #8
900021de:	681b      	ldr	r3, [r3, #0]
900021e0:	4a5c      	ldr	r2, [pc, #368]	@ (90002354 <I2C_Compute_SCLL_SCLH+0x200>)
900021e2:	fbb2 f3f3 	udiv	r3, r2, r3
900021e6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
900021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900021ea:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900021ec:	2300      	movs	r3, #0
900021ee:	637b      	str	r3, [r7, #52]	@ 0x34
900021f0:	e0a3      	b.n	9000233a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900021f2:	495a      	ldr	r1, [pc, #360]	@ (9000235c <I2C_Compute_SCLL_SCLH+0x208>)
900021f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900021f6:	4613      	mov	r3, r2
900021f8:	009b      	lsls	r3, r3, #2
900021fa:	4413      	add	r3, r2
900021fc:	009b      	lsls	r3, r3, #2
900021fe:	440b      	add	r3, r1
90002200:	681b      	ldr	r3, [r3, #0]
90002202:	1c5a      	adds	r2, r3, #1
90002204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002206:	fb02 f303 	mul.w	r3, r2, r3
9000220a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
9000220c:	2300      	movs	r3, #0
9000220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
90002210:	e08c      	b.n	9000232c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002214:	6a3b      	ldr	r3, [r7, #32]
90002216:	441a      	add	r2, r3
90002218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000221a:	3301      	adds	r3, #1
9000221c:	6979      	ldr	r1, [r7, #20]
9000221e:	fb03 f101 	mul.w	r1, r3, r1
90002222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002224:	005b      	lsls	r3, r3, #1
90002226:	440b      	add	r3, r1
90002228:	4413      	add	r3, r2
9000222a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
9000222c:	4a4a      	ldr	r2, [pc, #296]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
9000222e:	683b      	ldr	r3, [r7, #0]
90002230:	212c      	movs	r1, #44	@ 0x2c
90002232:	fb01 f303 	mul.w	r3, r1, r3
90002236:	4413      	add	r3, r2
90002238:	3318      	adds	r3, #24
9000223a:	681b      	ldr	r3, [r3, #0]
9000223c:	693a      	ldr	r2, [r7, #16]
9000223e:	429a      	cmp	r2, r3
90002240:	d971      	bls.n	90002326 <I2C_Compute_SCLL_SCLH+0x1d2>
90002242:	693a      	ldr	r2, [r7, #16]
90002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002246:	1ad2      	subs	r2, r2, r3
90002248:	6a3b      	ldr	r3, [r7, #32]
9000224a:	1ad3      	subs	r3, r2, r3
9000224c:	089b      	lsrs	r3, r3, #2
9000224e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002250:	429a      	cmp	r2, r3
90002252:	d268      	bcs.n	90002326 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90002254:	2300      	movs	r3, #0
90002256:	63bb      	str	r3, [r7, #56]	@ 0x38
90002258:	e062      	b.n	90002320 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
9000225a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000225c:	6a3b      	ldr	r3, [r7, #32]
9000225e:	441a      	add	r2, r3
90002260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90002262:	3301      	adds	r3, #1
90002264:	6979      	ldr	r1, [r7, #20]
90002266:	fb03 f101 	mul.w	r1, r3, r1
9000226a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000226c:	005b      	lsls	r3, r3, #1
9000226e:	440b      	add	r3, r1
90002270:	4413      	add	r3, r2
90002272:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90002274:	693a      	ldr	r2, [r7, #16]
90002276:	68fb      	ldr	r3, [r7, #12]
90002278:	441a      	add	r2, r3
9000227a:	4937      	ldr	r1, [pc, #220]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
9000227c:	683b      	ldr	r3, [r7, #0]
9000227e:	202c      	movs	r0, #44	@ 0x2c
90002280:	fb00 f303 	mul.w	r3, r0, r3
90002284:	440b      	add	r3, r1
90002286:	3320      	adds	r3, #32
90002288:	681b      	ldr	r3, [r3, #0]
9000228a:	441a      	add	r2, r3
9000228c:	4932      	ldr	r1, [pc, #200]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
9000228e:	683b      	ldr	r3, [r7, #0]
90002290:	202c      	movs	r0, #44	@ 0x2c
90002292:	fb00 f303 	mul.w	r3, r0, r3
90002296:	440b      	add	r3, r1
90002298:	3324      	adds	r3, #36	@ 0x24
9000229a:	681b      	ldr	r3, [r3, #0]
9000229c:	4413      	add	r3, r2
9000229e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900022a0:	68ba      	ldr	r2, [r7, #8]
900022a2:	69bb      	ldr	r3, [r7, #24]
900022a4:	429a      	cmp	r2, r3
900022a6:	d338      	bcc.n	9000231a <I2C_Compute_SCLL_SCLH+0x1c6>
900022a8:	68ba      	ldr	r2, [r7, #8]
900022aa:	69fb      	ldr	r3, [r7, #28]
900022ac:	429a      	cmp	r2, r3
900022ae:	d834      	bhi.n	9000231a <I2C_Compute_SCLL_SCLH+0x1c6>
900022b0:	4a29      	ldr	r2, [pc, #164]	@ (90002358 <I2C_Compute_SCLL_SCLH+0x204>)
900022b2:	683b      	ldr	r3, [r7, #0]
900022b4:	212c      	movs	r1, #44	@ 0x2c
900022b6:	fb01 f303 	mul.w	r3, r1, r3
900022ba:	4413      	add	r3, r2
900022bc:	331c      	adds	r3, #28
900022be:	681b      	ldr	r3, [r3, #0]
900022c0:	68fa      	ldr	r2, [r7, #12]
900022c2:	429a      	cmp	r2, r3
900022c4:	d329      	bcc.n	9000231a <I2C_Compute_SCLL_SCLH+0x1c6>
900022c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900022c8:	68fb      	ldr	r3, [r7, #12]
900022ca:	429a      	cmp	r2, r3
900022cc:	d225      	bcs.n	9000231a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
900022ce:	68ba      	ldr	r2, [r7, #8]
900022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900022d2:	1ad3      	subs	r3, r2, r3
900022d4:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
900022d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900022d8:	2b00      	cmp	r3, #0
900022da:	da02      	bge.n	900022e2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
900022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900022de:	425b      	negs	r3, r3
900022e0:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
900022e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900022e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
900022e6:	429a      	cmp	r2, r3
900022e8:	d917      	bls.n	9000231a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
900022ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900022ec:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
900022ee:	491b      	ldr	r1, [pc, #108]	@ (9000235c <I2C_Compute_SCLL_SCLH+0x208>)
900022f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900022f2:	4613      	mov	r3, r2
900022f4:	009b      	lsls	r3, r3, #2
900022f6:	4413      	add	r3, r2
900022f8:	009b      	lsls	r3, r3, #2
900022fa:	440b      	add	r3, r1
900022fc:	3310      	adds	r3, #16
900022fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90002300:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90002302:	4916      	ldr	r1, [pc, #88]	@ (9000235c <I2C_Compute_SCLL_SCLH+0x208>)
90002304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90002306:	4613      	mov	r3, r2
90002308:	009b      	lsls	r3, r3, #2
9000230a:	4413      	add	r3, r2
9000230c:	009b      	lsls	r3, r3, #2
9000230e:	440b      	add	r3, r1
90002310:	330c      	adds	r3, #12
90002312:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90002314:	601a      	str	r2, [r3, #0]
              ret = count;
90002316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90002318:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000231c:	3301      	adds	r3, #1
9000231e:	63bb      	str	r3, [r7, #56]	@ 0x38
90002320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90002322:	2bff      	cmp	r3, #255	@ 0xff
90002324:	d999      	bls.n	9000225a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90002326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90002328:	3301      	adds	r3, #1
9000232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000232c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000232e:	2bff      	cmp	r3, #255	@ 0xff
90002330:	f67f af6f 	bls.w	90002212 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90002334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90002336:	3301      	adds	r3, #1
90002338:	637b      	str	r3, [r7, #52]	@ 0x34
9000233a:	4b09      	ldr	r3, [pc, #36]	@ (90002360 <I2C_Compute_SCLL_SCLH+0x20c>)
9000233c:	681b      	ldr	r3, [r3, #0]
9000233e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90002340:	429a      	cmp	r2, r3
90002342:	f4ff af56 	bcc.w	900021f2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90002346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90002348:	4618      	mov	r0, r3
9000234a:	374c      	adds	r7, #76	@ 0x4c
9000234c:	46bd      	mov	sp, r7
9000234e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002352:	4770      	bx	lr
90002354:	3b9aca00 	.word	0x3b9aca00
90002358:	9000db9c 	.word	0x9000db9c
9000235c:	20000678 	.word	0x20000678
90002360:	20001078 	.word	0x20001078

90002364 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90002364:	b580      	push	{r7, lr}
90002366:	b08a      	sub	sp, #40	@ 0x28
90002368:	af00      	add	r7, sp, #0
9000236a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000236c:	4b31      	ldr	r3, [pc, #196]	@ (90002434 <I2C4_MspInit+0xd0>)
9000236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002372:	4a30      	ldr	r2, [pc, #192]	@ (90002434 <I2C4_MspInit+0xd0>)
90002374:	f043 0308 	orr.w	r3, r3, #8
90002378:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000237c:	4b2d      	ldr	r3, [pc, #180]	@ (90002434 <I2C4_MspInit+0xd0>)
9000237e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002382:	f003 0308 	and.w	r3, r3, #8
90002386:	613b      	str	r3, [r7, #16]
90002388:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000238a:	4b2a      	ldr	r3, [pc, #168]	@ (90002434 <I2C4_MspInit+0xd0>)
9000238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002390:	4a28      	ldr	r2, [pc, #160]	@ (90002434 <I2C4_MspInit+0xd0>)
90002392:	f043 0308 	orr.w	r3, r3, #8
90002396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000239a:	4b26      	ldr	r3, [pc, #152]	@ (90002434 <I2C4_MspInit+0xd0>)
9000239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900023a0:	f003 0308 	and.w	r3, r3, #8
900023a4:	60fb      	str	r3, [r7, #12]
900023a6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
900023a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
900023ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
900023ae:	2312      	movs	r3, #18
900023b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900023b2:	2300      	movs	r3, #0
900023b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900023b6:	2302      	movs	r3, #2
900023b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
900023ba:	2304      	movs	r3, #4
900023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900023be:	f107 0314 	add.w	r3, r7, #20
900023c2:	4619      	mov	r1, r3
900023c4:	481c      	ldr	r0, [pc, #112]	@ (90002438 <I2C4_MspInit+0xd4>)
900023c6:	f001 ffc5 	bl	90004354 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900023ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
900023ce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
900023d0:	2312      	movs	r3, #18
900023d2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900023d4:	2300      	movs	r3, #0
900023d6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900023d8:	2302      	movs	r3, #2
900023da:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
900023dc:	2304      	movs	r3, #4
900023de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900023e0:	f107 0314 	add.w	r3, r7, #20
900023e4:	4619      	mov	r1, r3
900023e6:	4814      	ldr	r0, [pc, #80]	@ (90002438 <I2C4_MspInit+0xd4>)
900023e8:	f001 ffb4 	bl	90004354 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
900023ec:	4b11      	ldr	r3, [pc, #68]	@ (90002434 <I2C4_MspInit+0xd0>)
900023ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900023f2:	4a10      	ldr	r2, [pc, #64]	@ (90002434 <I2C4_MspInit+0xd0>)
900023f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900023f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
900023fc:	4b0d      	ldr	r3, [pc, #52]	@ (90002434 <I2C4_MspInit+0xd0>)
900023fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90002402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002406:	60bb      	str	r3, [r7, #8]
90002408:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
9000240a:	4b0a      	ldr	r3, [pc, #40]	@ (90002434 <I2C4_MspInit+0xd0>)
9000240c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002410:	4a08      	ldr	r2, [pc, #32]	@ (90002434 <I2C4_MspInit+0xd0>)
90002412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002416:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
9000241a:	4b06      	ldr	r3, [pc, #24]	@ (90002434 <I2C4_MspInit+0xd0>)
9000241c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90002420:	4a04      	ldr	r2, [pc, #16]	@ (90002434 <I2C4_MspInit+0xd0>)
90002422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90002426:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
9000242a:	bf00      	nop
9000242c:	3728      	adds	r7, #40	@ 0x28
9000242e:	46bd      	mov	sp, r7
90002430:	bd80      	pop	{r7, pc}
90002432:	bf00      	nop
90002434:	58024400 	.word	0x58024400
90002438:	58020c00 	.word	0x58020c00

9000243c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
9000243c:	b580      	push	{r7, lr}
9000243e:	b088      	sub	sp, #32
90002440:	af00      	add	r7, sp, #0
90002442:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
90002444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90002448:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
9000244a:	68fb      	ldr	r3, [r7, #12]
9000244c:	4619      	mov	r1, r3
9000244e:	480b      	ldr	r0, [pc, #44]	@ (9000247c <I2C4_MspDeInit+0x40>)
90002450:	f002 f930 	bl	900046b4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
90002454:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90002458:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
9000245a:	68fb      	ldr	r3, [r7, #12]
9000245c:	4619      	mov	r1, r3
9000245e:	4807      	ldr	r0, [pc, #28]	@ (9000247c <I2C4_MspDeInit+0x40>)
90002460:	f002 f928 	bl	900046b4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90002464:	4b06      	ldr	r3, [pc, #24]	@ (90002480 <I2C4_MspDeInit+0x44>)
90002466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000246a:	4a05      	ldr	r2, [pc, #20]	@ (90002480 <I2C4_MspDeInit+0x44>)
9000246c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90002470:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
90002474:	bf00      	nop
90002476:	3720      	adds	r7, #32
90002478:	46bd      	mov	sp, r7
9000247a:	bd80      	pop	{r7, pc}
9000247c:	58020c00 	.word	0x58020c00
90002480:	58024400 	.word	0x58024400

90002484 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90002484:	b580      	push	{r7, lr}
90002486:	b088      	sub	sp, #32
90002488:	af04      	add	r7, sp, #16
9000248a:	607b      	str	r3, [r7, #4]
9000248c:	4603      	mov	r3, r0
9000248e:	81fb      	strh	r3, [r7, #14]
90002490:	460b      	mov	r3, r1
90002492:	81bb      	strh	r3, [r7, #12]
90002494:	4613      	mov	r3, r2
90002496:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90002498:	8978      	ldrh	r0, [r7, #10]
9000249a:	89ba      	ldrh	r2, [r7, #12]
9000249c:	89f9      	ldrh	r1, [r7, #14]
9000249e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900024a2:	9302      	str	r3, [sp, #8]
900024a4:	8b3b      	ldrh	r3, [r7, #24]
900024a6:	9301      	str	r3, [sp, #4]
900024a8:	687b      	ldr	r3, [r7, #4]
900024aa:	9300      	str	r3, [sp, #0]
900024ac:	4603      	mov	r3, r0
900024ae:	4807      	ldr	r0, [pc, #28]	@ (900024cc <I2C4_WriteReg+0x48>)
900024b0:	f004 f8c2 	bl	90006638 <HAL_I2C_Mem_Write>
900024b4:	4603      	mov	r3, r0
900024b6:	2b00      	cmp	r3, #0
900024b8:	d101      	bne.n	900024be <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
900024ba:	2300      	movs	r3, #0
900024bc:	e001      	b.n	900024c2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
900024be:	f06f 0307 	mvn.w	r3, #7
}
900024c2:	4618      	mov	r0, r3
900024c4:	3710      	adds	r7, #16
900024c6:	46bd      	mov	sp, r7
900024c8:	bd80      	pop	{r7, pc}
900024ca:	bf00      	nop
900024cc:	2000107c 	.word	0x2000107c

900024d0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
900024d0:	b580      	push	{r7, lr}
900024d2:	b088      	sub	sp, #32
900024d4:	af04      	add	r7, sp, #16
900024d6:	607b      	str	r3, [r7, #4]
900024d8:	4603      	mov	r3, r0
900024da:	81fb      	strh	r3, [r7, #14]
900024dc:	460b      	mov	r3, r1
900024de:	81bb      	strh	r3, [r7, #12]
900024e0:	4613      	mov	r3, r2
900024e2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900024e4:	8978      	ldrh	r0, [r7, #10]
900024e6:	89ba      	ldrh	r2, [r7, #12]
900024e8:	89f9      	ldrh	r1, [r7, #14]
900024ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900024ee:	9302      	str	r3, [sp, #8]
900024f0:	8b3b      	ldrh	r3, [r7, #24]
900024f2:	9301      	str	r3, [sp, #4]
900024f4:	687b      	ldr	r3, [r7, #4]
900024f6:	9300      	str	r3, [sp, #0]
900024f8:	4603      	mov	r3, r0
900024fa:	4807      	ldr	r0, [pc, #28]	@ (90002518 <I2C4_ReadReg+0x48>)
900024fc:	f004 f9b0 	bl	90006860 <HAL_I2C_Mem_Read>
90002500:	4603      	mov	r3, r0
90002502:	2b00      	cmp	r3, #0
90002504:	d101      	bne.n	9000250a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90002506:	2300      	movs	r3, #0
90002508:	e001      	b.n	9000250e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
9000250a:	f06f 0307 	mvn.w	r3, #7
}
9000250e:	4618      	mov	r0, r3
90002510:	3710      	adds	r7, #16
90002512:	46bd      	mov	sp, r7
90002514:	bd80      	pop	{r7, pc}
90002516:	bf00      	nop
90002518:	2000107c 	.word	0x2000107c

9000251c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
9000251c:	b580      	push	{r7, lr}
9000251e:	b084      	sub	sp, #16
90002520:	af02      	add	r7, sp, #8
90002522:	6078      	str	r0, [r7, #4]
90002524:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90002526:	f44f 7388 	mov.w	r3, #272	@ 0x110
9000252a:	9300      	str	r3, [sp, #0]
9000252c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90002530:	2200      	movs	r2, #0
90002532:	6839      	ldr	r1, [r7, #0]
90002534:	6878      	ldr	r0, [r7, #4]
90002536:	f000 f805 	bl	90002544 <BSP_LCD_InitEx>
9000253a:	4603      	mov	r3, r0
}
9000253c:	4618      	mov	r0, r3
9000253e:	3708      	adds	r7, #8
90002540:	46bd      	mov	sp, r7
90002542:	bd80      	pop	{r7, pc}

90002544 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90002544:	b580      	push	{r7, lr}
90002546:	b09e      	sub	sp, #120	@ 0x78
90002548:	af00      	add	r7, sp, #0
9000254a:	60f8      	str	r0, [r7, #12]
9000254c:	60b9      	str	r1, [r7, #8]
9000254e:	607a      	str	r2, [r7, #4]
90002550:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002552:	2300      	movs	r3, #0
90002554:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90002556:	2300      	movs	r3, #0
90002558:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
9000255a:	68bb      	ldr	r3, [r7, #8]
9000255c:	2b01      	cmp	r3, #1
9000255e:	d808      	bhi.n	90002572 <BSP_LCD_InitEx+0x2e>
90002560:	68fb      	ldr	r3, [r7, #12]
90002562:	2b00      	cmp	r3, #0
90002564:	d105      	bne.n	90002572 <BSP_LCD_InitEx+0x2e>
90002566:	687b      	ldr	r3, [r7, #4]
90002568:	2b02      	cmp	r3, #2
9000256a:	d006      	beq.n	9000257a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
9000256c:	687b      	ldr	r3, [r7, #4]
9000256e:	2b00      	cmp	r3, #0
90002570:	d003      	beq.n	9000257a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002572:	f06f 0301 	mvn.w	r3, #1
90002576:	677b      	str	r3, [r7, #116]	@ 0x74
90002578:	e0a8      	b.n	900026cc <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000257a:	687b      	ldr	r3, [r7, #4]
9000257c:	2b02      	cmp	r3, #2
9000257e:	d109      	bne.n	90002594 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90002580:	2302      	movs	r3, #2
90002582:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90002584:	4a54      	ldr	r2, [pc, #336]	@ (900026d8 <BSP_LCD_InitEx+0x194>)
90002586:	68fb      	ldr	r3, [r7, #12]
90002588:	015b      	lsls	r3, r3, #5
9000258a:	4413      	add	r3, r2
9000258c:	3310      	adds	r3, #16
9000258e:	2202      	movs	r2, #2
90002590:	601a      	str	r2, [r3, #0]
90002592:	e008      	b.n	900025a6 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90002594:	2300      	movs	r3, #0
90002596:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90002598:	4a4f      	ldr	r2, [pc, #316]	@ (900026d8 <BSP_LCD_InitEx+0x194>)
9000259a:	68fb      	ldr	r3, [r7, #12]
9000259c:	015b      	lsls	r3, r3, #5
9000259e:	4413      	add	r3, r2
900025a0:	3310      	adds	r3, #16
900025a2:	2204      	movs	r2, #4
900025a4:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
900025a6:	4a4c      	ldr	r2, [pc, #304]	@ (900026d8 <BSP_LCD_InitEx+0x194>)
900025a8:	68fb      	ldr	r3, [r7, #12]
900025aa:	015b      	lsls	r3, r3, #5
900025ac:	4413      	add	r3, r2
900025ae:	330c      	adds	r3, #12
900025b0:	687a      	ldr	r2, [r7, #4]
900025b2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
900025b4:	4a48      	ldr	r2, [pc, #288]	@ (900026d8 <BSP_LCD_InitEx+0x194>)
900025b6:	68fb      	ldr	r3, [r7, #12]
900025b8:	015b      	lsls	r3, r3, #5
900025ba:	4413      	add	r3, r2
900025bc:	683a      	ldr	r2, [r7, #0]
900025be:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
900025c0:	4a45      	ldr	r2, [pc, #276]	@ (900026d8 <BSP_LCD_InitEx+0x194>)
900025c2:	68fb      	ldr	r3, [r7, #12]
900025c4:	015b      	lsls	r3, r3, #5
900025c6:	4413      	add	r3, r2
900025c8:	3304      	adds	r3, #4
900025ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
900025ce:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
900025d0:	4b42      	ldr	r3, [pc, #264]	@ (900026dc <BSP_LCD_InitEx+0x198>)
900025d2:	4a43      	ldr	r2, [pc, #268]	@ (900026e0 <BSP_LCD_InitEx+0x19c>)
900025d4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
900025d6:	4b43      	ldr	r3, [pc, #268]	@ (900026e4 <BSP_LCD_InitEx+0x1a0>)
900025d8:	4a43      	ldr	r2, [pc, #268]	@ (900026e8 <BSP_LCD_InitEx+0x1a4>)
900025da:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
900025dc:	483f      	ldr	r0, [pc, #252]	@ (900026dc <BSP_LCD_InitEx+0x198>)
900025de:	f000 fcf9 	bl	90002fd4 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
900025e2:	4840      	ldr	r0, [pc, #256]	@ (900026e4 <BSP_LCD_InitEx+0x1a0>)
900025e4:	f000 fdc2 	bl	9000316c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
900025e8:	4b40      	ldr	r3, [pc, #256]	@ (900026ec <BSP_LCD_InitEx+0x1a8>)
900025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
900025ec:	4b40      	ldr	r3, [pc, #256]	@ (900026f0 <BSP_LCD_InitEx+0x1ac>)
900025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
900025f0:	2370      	movs	r3, #112	@ 0x70
900025f2:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
900025f4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
900025f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
900025fc:	4611      	mov	r1, r2
900025fe:	4618      	mov	r0, r3
90002600:	f7fe fe6c 	bl	900012dc <FT5336_RegisterBusIO>
90002604:	4603      	mov	r3, r0
90002606:	2b00      	cmp	r3, #0
90002608:	da03      	bge.n	90002612 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000260a:	f06f 0304 	mvn.w	r3, #4
9000260e:	677b      	str	r3, [r7, #116]	@ 0x74
90002610:	e02b      	b.n	9000266a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90002612:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90002616:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000261a:	4611      	mov	r1, r2
9000261c:	4618      	mov	r0, r3
9000261e:	f7fe ff57 	bl	900014d0 <FT5336_ReadID>
90002622:	4603      	mov	r3, r0
90002624:	2b00      	cmp	r3, #0
90002626:	da03      	bge.n	90002630 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002628:	f06f 0304 	mvn.w	r3, #4
9000262c:	677b      	str	r3, [r7, #116]	@ 0x74
9000262e:	e01c      	b.n	9000266a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90002630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90002632:	2b51      	cmp	r3, #81	@ 0x51
90002634:	d003      	beq.n	9000263e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90002636:	f06f 0306 	mvn.w	r3, #6
9000263a:	677b      	str	r3, [r7, #116]	@ 0x74
9000263c:	e015      	b.n	9000266a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
9000263e:	4827      	ldr	r0, [pc, #156]	@ (900026dc <BSP_LCD_InitEx+0x198>)
90002640:	f7fe fcbc 	bl	90000fbc <MX_LTDC_ClockConfig>
90002644:	4603      	mov	r3, r0
90002646:	2b00      	cmp	r3, #0
90002648:	d003      	beq.n	90002652 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
9000264a:	f06f 0303 	mvn.w	r3, #3
9000264e:	677b      	str	r3, [r7, #116]	@ 0x74
90002650:	e00b      	b.n	9000266a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90002652:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002656:	6839      	ldr	r1, [r7, #0]
90002658:	4820      	ldr	r0, [pc, #128]	@ (900026dc <BSP_LCD_InitEx+0x198>)
9000265a:	f000 f84d 	bl	900026f8 <MX_LTDC_Init>
9000265e:	4603      	mov	r3, r0
90002660:	2b00      	cmp	r3, #0
90002662:	d002      	beq.n	9000266a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90002664:	f06f 0303 	mvn.w	r3, #3
90002668:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
9000266a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
9000266c:	2b00      	cmp	r3, #0
9000266e:	d12d      	bne.n	900026cc <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90002670:	2000      	movs	r0, #0
90002672:	f000 fe0d 	bl	90003290 <BSP_SDRAM_Init>
90002676:	4603      	mov	r3, r0
90002678:	2b00      	cmp	r3, #0
9000267a:	d002      	beq.n	90002682 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
9000267c:	f06f 0303 	mvn.w	r3, #3
90002680:	e025      	b.n	900026ce <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90002682:	2300      	movs	r3, #0
90002684:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90002686:	683b      	ldr	r3, [r7, #0]
90002688:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
9000268a:	2300      	movs	r3, #0
9000268c:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
9000268e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90002692:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90002694:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90002696:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90002698:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
9000269c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
9000269e:	f107 0314 	add.w	r3, r7, #20
900026a2:	461a      	mov	r2, r3
900026a4:	2100      	movs	r1, #0
900026a6:	480d      	ldr	r0, [pc, #52]	@ (900026dc <BSP_LCD_InitEx+0x198>)
900026a8:	f000 f872 	bl	90002790 <MX_LTDC_ConfigLayer>
900026ac:	4603      	mov	r3, r0
900026ae:	2b00      	cmp	r3, #0
900026b0:	d002      	beq.n	900026b8 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
900026b2:	f06f 0303 	mvn.w	r3, #3
900026b6:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
900026b8:	480e      	ldr	r0, [pc, #56]	@ (900026f4 <BSP_LCD_InitEx+0x1b0>)
900026ba:	f000 fdbf 	bl	9000323c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
900026be:	4a06      	ldr	r2, [pc, #24]	@ (900026d8 <BSP_LCD_InitEx+0x194>)
900026c0:	68fb      	ldr	r3, [r7, #12]
900026c2:	015b      	lsls	r3, r3, #5
900026c4:	4413      	add	r3, r2
900026c6:	3318      	adds	r3, #24
900026c8:	2201      	movs	r2, #1
900026ca:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
900026cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
900026ce:	4618      	mov	r0, r3
900026d0:	3778      	adds	r7, #120	@ 0x78
900026d2:	46bd      	mov	sp, r7
900026d4:	bd80      	pop	{r7, pc}
900026d6:	bf00      	nop
900026d8:	2000122c 	.word	0x2000122c
900026dc:	20001184 	.word	0x20001184
900026e0:	50001000 	.word	0x50001000
900026e4:	2000111c 	.word	0x2000111c
900026e8:	52001000 	.word	0x52001000
900026ec:	90001c71 	.word	0x90001c71
900026f0:	90001e0d 	.word	0x90001e0d
900026f4:	200010d0 	.word	0x200010d0

900026f8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
900026f8:	b580      	push	{r7, lr}
900026fa:	b084      	sub	sp, #16
900026fc:	af00      	add	r7, sp, #0
900026fe:	60f8      	str	r0, [r7, #12]
90002700:	60b9      	str	r1, [r7, #8]
90002702:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90002704:	68fb      	ldr	r3, [r7, #12]
90002706:	4a21      	ldr	r2, [pc, #132]	@ (9000278c <MX_LTDC_Init+0x94>)
90002708:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
9000270a:	68fb      	ldr	r3, [r7, #12]
9000270c:	2200      	movs	r2, #0
9000270e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90002710:	68fb      	ldr	r3, [r7, #12]
90002712:	2200      	movs	r2, #0
90002714:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90002716:	68fb      	ldr	r3, [r7, #12]
90002718:	2200      	movs	r2, #0
9000271a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000271c:	68fb      	ldr	r3, [r7, #12]
9000271e:	2200      	movs	r2, #0
90002720:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90002722:	68fb      	ldr	r3, [r7, #12]
90002724:	2228      	movs	r2, #40	@ 0x28
90002726:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90002728:	68fb      	ldr	r3, [r7, #12]
9000272a:	222a      	movs	r2, #42	@ 0x2a
9000272c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
9000272e:	68bb      	ldr	r3, [r7, #8]
90002730:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002734:	68fb      	ldr	r3, [r7, #12]
90002736:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90002738:	68bb      	ldr	r3, [r7, #8]
9000273a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
9000273e:	68fb      	ldr	r3, [r7, #12]
90002740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90002742:	68fb      	ldr	r3, [r7, #12]
90002744:	2209      	movs	r2, #9
90002746:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90002748:	68fb      	ldr	r3, [r7, #12]
9000274a:	220b      	movs	r2, #11
9000274c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
9000274e:	687b      	ldr	r3, [r7, #4]
90002750:	f103 020b 	add.w	r2, r3, #11
90002754:	68fb      	ldr	r3, [r7, #12]
90002756:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90002758:	687b      	ldr	r3, [r7, #4]
9000275a:	f103 020d 	add.w	r2, r3, #13
9000275e:	68fb      	ldr	r3, [r7, #12]
90002760:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90002762:	68fb      	ldr	r3, [r7, #12]
90002764:	22ff      	movs	r2, #255	@ 0xff
90002766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
9000276a:	68fb      	ldr	r3, [r7, #12]
9000276c:	22ff      	movs	r2, #255	@ 0xff
9000276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90002772:	68fb      	ldr	r3, [r7, #12]
90002774:	22ff      	movs	r2, #255	@ 0xff
90002776:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
9000277a:	68f8      	ldr	r0, [r7, #12]
9000277c:	f004 fcfd 	bl	9000717a <HAL_LTDC_Init>
90002780:	4603      	mov	r3, r0
}
90002782:	4618      	mov	r0, r3
90002784:	3710      	adds	r7, #16
90002786:	46bd      	mov	sp, r7
90002788:	bd80      	pop	{r7, pc}
9000278a:	bf00      	nop
9000278c:	50001000 	.word	0x50001000

90002790 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90002790:	b580      	push	{r7, lr}
90002792:	b092      	sub	sp, #72	@ 0x48
90002794:	af00      	add	r7, sp, #0
90002796:	60f8      	str	r0, [r7, #12]
90002798:	60b9      	str	r1, [r7, #8]
9000279a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
9000279c:	687b      	ldr	r3, [r7, #4]
9000279e:	681b      	ldr	r3, [r3, #0]
900027a0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
900027a2:	687b      	ldr	r3, [r7, #4]
900027a4:	685b      	ldr	r3, [r3, #4]
900027a6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
900027a8:	687b      	ldr	r3, [r7, #4]
900027aa:	689b      	ldr	r3, [r3, #8]
900027ac:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
900027ae:	687b      	ldr	r3, [r7, #4]
900027b0:	68db      	ldr	r3, [r3, #12]
900027b2:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
900027b4:	687b      	ldr	r3, [r7, #4]
900027b6:	691b      	ldr	r3, [r3, #16]
900027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
900027ba:	23ff      	movs	r3, #255	@ 0xff
900027bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
900027be:	2300      	movs	r3, #0
900027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
900027c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
900027c6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900027c8:	2307      	movs	r3, #7
900027ca:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
900027cc:	687b      	ldr	r3, [r7, #4]
900027ce:	695b      	ldr	r3, [r3, #20]
900027d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
900027d2:	687b      	ldr	r3, [r7, #4]
900027d4:	685a      	ldr	r2, [r3, #4]
900027d6:	687b      	ldr	r3, [r7, #4]
900027d8:	681b      	ldr	r3, [r3, #0]
900027da:	1ad3      	subs	r3, r2, r3
900027dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
900027de:	687b      	ldr	r3, [r7, #4]
900027e0:	68da      	ldr	r2, [r3, #12]
900027e2:	687b      	ldr	r3, [r7, #4]
900027e4:	689b      	ldr	r3, [r3, #8]
900027e6:	1ad3      	subs	r3, r2, r3
900027e8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
900027ea:	2300      	movs	r3, #0
900027ec:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
900027f0:	2300      	movs	r3, #0
900027f2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
900027f6:	2300      	movs	r3, #0
900027f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
900027fc:	f107 0314 	add.w	r3, r7, #20
90002800:	68ba      	ldr	r2, [r7, #8]
90002802:	4619      	mov	r1, r3
90002804:	68f8      	ldr	r0, [r7, #12]
90002806:	f004 fd5f 	bl	900072c8 <HAL_LTDC_ConfigLayer>
9000280a:	4603      	mov	r3, r0
}
9000280c:	4618      	mov	r0, r3
9000280e:	3748      	adds	r7, #72	@ 0x48
90002810:	46bd      	mov	sp, r7
90002812:	bd80      	pop	{r7, pc}

90002814 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90002814:	b480      	push	{r7}
90002816:	b085      	sub	sp, #20
90002818:	af00      	add	r7, sp, #0
9000281a:	6078      	str	r0, [r7, #4]
9000281c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000281e:	2300      	movs	r3, #0
90002820:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002822:	687b      	ldr	r3, [r7, #4]
90002824:	2b00      	cmp	r3, #0
90002826:	d003      	beq.n	90002830 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002828:	f06f 0301 	mvn.w	r3, #1
9000282c:	60fb      	str	r3, [r7, #12]
9000282e:	e007      	b.n	90002840 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002830:	4a07      	ldr	r2, [pc, #28]	@ (90002850 <BSP_LCD_GetPixelFormat+0x3c>)
90002832:	687b      	ldr	r3, [r7, #4]
90002834:	015b      	lsls	r3, r3, #5
90002836:	4413      	add	r3, r2
90002838:	330c      	adds	r3, #12
9000283a:	681a      	ldr	r2, [r3, #0]
9000283c:	683b      	ldr	r3, [r7, #0]
9000283e:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002840:	68fb      	ldr	r3, [r7, #12]
}
90002842:	4618      	mov	r0, r3
90002844:	3714      	adds	r7, #20
90002846:	46bd      	mov	sp, r7
90002848:	f85d 7b04 	ldr.w	r7, [sp], #4
9000284c:	4770      	bx	lr
9000284e:	bf00      	nop
90002850:	2000122c 	.word	0x2000122c

90002854 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002854:	b480      	push	{r7}
90002856:	b085      	sub	sp, #20
90002858:	af00      	add	r7, sp, #0
9000285a:	6078      	str	r0, [r7, #4]
9000285c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000285e:	2300      	movs	r3, #0
90002860:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002862:	687b      	ldr	r3, [r7, #4]
90002864:	2b00      	cmp	r3, #0
90002866:	d003      	beq.n	90002870 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002868:	f06f 0301 	mvn.w	r3, #1
9000286c:	60fb      	str	r3, [r7, #12]
9000286e:	e006      	b.n	9000287e <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002870:	4a06      	ldr	r2, [pc, #24]	@ (9000288c <BSP_LCD_SetActiveLayer+0x38>)
90002872:	687b      	ldr	r3, [r7, #4]
90002874:	015b      	lsls	r3, r3, #5
90002876:	4413      	add	r3, r2
90002878:	3308      	adds	r3, #8
9000287a:	683a      	ldr	r2, [r7, #0]
9000287c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000287e:	68fb      	ldr	r3, [r7, #12]
}
90002880:	4618      	mov	r0, r3
90002882:	3714      	adds	r7, #20
90002884:	46bd      	mov	sp, r7
90002886:	f85d 7b04 	ldr.w	r7, [sp], #4
9000288a:	4770      	bx	lr
9000288c:	2000122c 	.word	0x2000122c

90002890 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002890:	b480      	push	{r7}
90002892:	b085      	sub	sp, #20
90002894:	af00      	add	r7, sp, #0
90002896:	6078      	str	r0, [r7, #4]
90002898:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000289a:	2300      	movs	r3, #0
9000289c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000289e:	687b      	ldr	r3, [r7, #4]
900028a0:	2b00      	cmp	r3, #0
900028a2:	d003      	beq.n	900028ac <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900028a4:	f06f 0301 	mvn.w	r3, #1
900028a8:	60fb      	str	r3, [r7, #12]
900028aa:	e006      	b.n	900028ba <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
900028ac:	4a06      	ldr	r2, [pc, #24]	@ (900028c8 <BSP_LCD_GetXSize+0x38>)
900028ae:	687b      	ldr	r3, [r7, #4]
900028b0:	015b      	lsls	r3, r3, #5
900028b2:	4413      	add	r3, r2
900028b4:	681a      	ldr	r2, [r3, #0]
900028b6:	683b      	ldr	r3, [r7, #0]
900028b8:	601a      	str	r2, [r3, #0]
  }

  return ret;
900028ba:	68fb      	ldr	r3, [r7, #12]
}
900028bc:	4618      	mov	r0, r3
900028be:	3714      	adds	r7, #20
900028c0:	46bd      	mov	sp, r7
900028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900028c6:	4770      	bx	lr
900028c8:	2000122c 	.word	0x2000122c

900028cc <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
900028cc:	b480      	push	{r7}
900028ce:	b085      	sub	sp, #20
900028d0:	af00      	add	r7, sp, #0
900028d2:	6078      	str	r0, [r7, #4]
900028d4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900028d6:	2300      	movs	r3, #0
900028d8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900028da:	687b      	ldr	r3, [r7, #4]
900028dc:	2b00      	cmp	r3, #0
900028de:	d003      	beq.n	900028e8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900028e0:	f06f 0301 	mvn.w	r3, #1
900028e4:	60fb      	str	r3, [r7, #12]
900028e6:	e007      	b.n	900028f8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900028e8:	4a07      	ldr	r2, [pc, #28]	@ (90002908 <BSP_LCD_GetYSize+0x3c>)
900028ea:	687b      	ldr	r3, [r7, #4]
900028ec:	015b      	lsls	r3, r3, #5
900028ee:	4413      	add	r3, r2
900028f0:	3304      	adds	r3, #4
900028f2:	681a      	ldr	r2, [r3, #0]
900028f4:	683b      	ldr	r3, [r7, #0]
900028f6:	601a      	str	r2, [r3, #0]
  }

  return ret;
900028f8:	68fb      	ldr	r3, [r7, #12]
}
900028fa:	4618      	mov	r0, r3
900028fc:	3714      	adds	r7, #20
900028fe:	46bd      	mov	sp, r7
90002900:	f85d 7b04 	ldr.w	r7, [sp], #4
90002904:	4770      	bx	lr
90002906:	bf00      	nop
90002908:	2000122c 	.word	0x2000122c

9000290c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
9000290c:	b580      	push	{r7, lr}
9000290e:	b08e      	sub	sp, #56	@ 0x38
90002910:	af02      	add	r7, sp, #8
90002912:	60f8      	str	r0, [r7, #12]
90002914:	60b9      	str	r1, [r7, #8]
90002916:	607a      	str	r2, [r7, #4]
90002918:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000291a:	2300      	movs	r3, #0
9000291c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
9000291e:	683b      	ldr	r3, [r7, #0]
90002920:	330a      	adds	r3, #10
90002922:	781b      	ldrb	r3, [r3, #0]
90002924:	461a      	mov	r2, r3
90002926:	683b      	ldr	r3, [r7, #0]
90002928:	330b      	adds	r3, #11
9000292a:	781b      	ldrb	r3, [r3, #0]
9000292c:	021b      	lsls	r3, r3, #8
9000292e:	441a      	add	r2, r3
90002930:	683b      	ldr	r3, [r7, #0]
90002932:	330c      	adds	r3, #12
90002934:	781b      	ldrb	r3, [r3, #0]
90002936:	041b      	lsls	r3, r3, #16
90002938:	441a      	add	r2, r3
9000293a:	683b      	ldr	r3, [r7, #0]
9000293c:	330d      	adds	r3, #13
9000293e:	781b      	ldrb	r3, [r3, #0]
90002940:	061b      	lsls	r3, r3, #24
90002942:	4413      	add	r3, r2
90002944:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90002946:	683b      	ldr	r3, [r7, #0]
90002948:	3312      	adds	r3, #18
9000294a:	781b      	ldrb	r3, [r3, #0]
9000294c:	461a      	mov	r2, r3
9000294e:	683b      	ldr	r3, [r7, #0]
90002950:	3313      	adds	r3, #19
90002952:	781b      	ldrb	r3, [r3, #0]
90002954:	021b      	lsls	r3, r3, #8
90002956:	441a      	add	r2, r3
90002958:	683b      	ldr	r3, [r7, #0]
9000295a:	3314      	adds	r3, #20
9000295c:	781b      	ldrb	r3, [r3, #0]
9000295e:	041b      	lsls	r3, r3, #16
90002960:	441a      	add	r2, r3
90002962:	683b      	ldr	r3, [r7, #0]
90002964:	3315      	adds	r3, #21
90002966:	781b      	ldrb	r3, [r3, #0]
90002968:	061b      	lsls	r3, r3, #24
9000296a:	4413      	add	r3, r2
9000296c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
9000296e:	683b      	ldr	r3, [r7, #0]
90002970:	3316      	adds	r3, #22
90002972:	781b      	ldrb	r3, [r3, #0]
90002974:	461a      	mov	r2, r3
90002976:	683b      	ldr	r3, [r7, #0]
90002978:	3317      	adds	r3, #23
9000297a:	781b      	ldrb	r3, [r3, #0]
9000297c:	021b      	lsls	r3, r3, #8
9000297e:	441a      	add	r2, r3
90002980:	683b      	ldr	r3, [r7, #0]
90002982:	3318      	adds	r3, #24
90002984:	781b      	ldrb	r3, [r3, #0]
90002986:	041b      	lsls	r3, r3, #16
90002988:	441a      	add	r2, r3
9000298a:	683b      	ldr	r3, [r7, #0]
9000298c:	3319      	adds	r3, #25
9000298e:	781b      	ldrb	r3, [r3, #0]
90002990:	061b      	lsls	r3, r3, #24
90002992:	4413      	add	r3, r2
90002994:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90002996:	683b      	ldr	r3, [r7, #0]
90002998:	331c      	adds	r3, #28
9000299a:	781b      	ldrb	r3, [r3, #0]
9000299c:	461a      	mov	r2, r3
9000299e:	683b      	ldr	r3, [r7, #0]
900029a0:	331d      	adds	r3, #29
900029a2:	781b      	ldrb	r3, [r3, #0]
900029a4:	021b      	lsls	r3, r3, #8
900029a6:	4413      	add	r3, r2
900029a8:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
900029aa:	4a37      	ldr	r2, [pc, #220]	@ (90002a88 <BSP_LCD_DrawBitmap+0x17c>)
900029ac:	68fb      	ldr	r3, [r7, #12]
900029ae:	015b      	lsls	r3, r3, #5
900029b0:	4413      	add	r3, r2
900029b2:	3308      	adds	r3, #8
900029b4:	681b      	ldr	r3, [r3, #0]
900029b6:	4a35      	ldr	r2, [pc, #212]	@ (90002a8c <BSP_LCD_DrawBitmap+0x180>)
900029b8:	2134      	movs	r1, #52	@ 0x34
900029ba:	fb01 f303 	mul.w	r3, r1, r3
900029be:	4413      	add	r3, r2
900029c0:	335c      	adds	r3, #92	@ 0x5c
900029c2:	681a      	ldr	r2, [r3, #0]
900029c4:	4930      	ldr	r1, [pc, #192]	@ (90002a88 <BSP_LCD_DrawBitmap+0x17c>)
900029c6:	68fb      	ldr	r3, [r7, #12]
900029c8:	015b      	lsls	r3, r3, #5
900029ca:	440b      	add	r3, r1
900029cc:	681b      	ldr	r3, [r3, #0]
900029ce:	6879      	ldr	r1, [r7, #4]
900029d0:	fb03 f101 	mul.w	r1, r3, r1
900029d4:	68bb      	ldr	r3, [r7, #8]
900029d6:	440b      	add	r3, r1
900029d8:	482b      	ldr	r0, [pc, #172]	@ (90002a88 <BSP_LCD_DrawBitmap+0x17c>)
900029da:	68f9      	ldr	r1, [r7, #12]
900029dc:	0149      	lsls	r1, r1, #5
900029de:	4401      	add	r1, r0
900029e0:	3110      	adds	r1, #16
900029e2:	6809      	ldr	r1, [r1, #0]
900029e4:	fb01 f303 	mul.w	r3, r1, r3
900029e8:	4413      	add	r3, r2
900029ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900029ec:	693b      	ldr	r3, [r7, #16]
900029ee:	3b20      	subs	r3, #32
900029f0:	2b07      	cmp	r3, #7
900029f2:	d802      	bhi.n	900029fa <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900029f4:	2300      	movs	r3, #0
900029f6:	627b      	str	r3, [r7, #36]	@ 0x24
900029f8:	e008      	b.n	90002a0c <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900029fa:	693b      	ldr	r3, [r7, #16]
900029fc:	3b10      	subs	r3, #16
900029fe:	2b07      	cmp	r3, #7
90002a00:	d802      	bhi.n	90002a08 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
90002a02:	2302      	movs	r3, #2
90002a04:	627b      	str	r3, [r7, #36]	@ 0x24
90002a06:	e001      	b.n	90002a0c <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
90002a08:	2301      	movs	r3, #1
90002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002a0c:	697b      	ldr	r3, [r7, #20]
90002a0e:	3b01      	subs	r3, #1
90002a10:	69ba      	ldr	r2, [r7, #24]
90002a12:	fb02 f303 	mul.w	r3, r2, r3
90002a16:	693a      	ldr	r2, [r7, #16]
90002a18:	08d2      	lsrs	r2, r2, #3
90002a1a:	fb03 f202 	mul.w	r2, r3, r2
90002a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002a20:	4413      	add	r3, r2
90002a22:	683a      	ldr	r2, [r7, #0]
90002a24:	4413      	add	r3, r2
90002a26:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002a28:	2300      	movs	r3, #0
90002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002a2c:	e023      	b.n	90002a76 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
90002a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002a32:	9300      	str	r3, [sp, #0]
90002a34:	69bb      	ldr	r3, [r7, #24]
90002a36:	6a39      	ldr	r1, [r7, #32]
90002a38:	68f8      	ldr	r0, [r7, #12]
90002a3a:	f000 fa77 	bl	90002f2c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
90002a3e:	4a12      	ldr	r2, [pc, #72]	@ (90002a88 <BSP_LCD_DrawBitmap+0x17c>)
90002a40:	68fb      	ldr	r3, [r7, #12]
90002a42:	015b      	lsls	r3, r3, #5
90002a44:	4413      	add	r3, r2
90002a46:	681b      	ldr	r3, [r3, #0]
90002a48:	490f      	ldr	r1, [pc, #60]	@ (90002a88 <BSP_LCD_DrawBitmap+0x17c>)
90002a4a:	68fa      	ldr	r2, [r7, #12]
90002a4c:	0152      	lsls	r2, r2, #5
90002a4e:	440a      	add	r2, r1
90002a50:	3210      	adds	r2, #16
90002a52:	6812      	ldr	r2, [r2, #0]
90002a54:	fb02 f303 	mul.w	r3, r2, r3
90002a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002a5a:	4413      	add	r3, r2
90002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
90002a5e:	693b      	ldr	r3, [r7, #16]
90002a60:	08db      	lsrs	r3, r3, #3
90002a62:	69ba      	ldr	r2, [r7, #24]
90002a64:	fb02 f303 	mul.w	r3, r2, r3
90002a68:	425b      	negs	r3, r3
90002a6a:	6a3a      	ldr	r2, [r7, #32]
90002a6c:	4413      	add	r3, r2
90002a6e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002a72:	3301      	adds	r3, #1
90002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002a78:	697b      	ldr	r3, [r7, #20]
90002a7a:	429a      	cmp	r2, r3
90002a7c:	d3d7      	bcc.n	90002a2e <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
90002a7e:	69fb      	ldr	r3, [r7, #28]
}
90002a80:	4618      	mov	r0, r3
90002a82:	3730      	adds	r7, #48	@ 0x30
90002a84:	46bd      	mov	sp, r7
90002a86:	bd80      	pop	{r7, pc}
90002a88:	2000122c 	.word	0x2000122c
90002a8c:	20001184 	.word	0x20001184

90002a90 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002a90:	b580      	push	{r7, lr}
90002a92:	b088      	sub	sp, #32
90002a94:	af00      	add	r7, sp, #0
90002a96:	60f8      	str	r0, [r7, #12]
90002a98:	60b9      	str	r1, [r7, #8]
90002a9a:	607a      	str	r2, [r7, #4]
90002a9c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
90002a9e:	683b      	ldr	r3, [r7, #0]
90002aa0:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002aa2:	2300      	movs	r3, #0
90002aa4:	61fb      	str	r3, [r7, #28]
90002aa6:	e032      	b.n	90002b0e <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002aa8:	2300      	movs	r3, #0
90002aaa:	617b      	str	r3, [r7, #20]
90002aac:	e028      	b.n	90002b00 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
90002aae:	69bb      	ldr	r3, [r7, #24]
90002ab0:	781b      	ldrb	r3, [r3, #0]
90002ab2:	461a      	mov	r2, r3
90002ab4:	69bb      	ldr	r3, [r7, #24]
90002ab6:	3301      	adds	r3, #1
90002ab8:	781b      	ldrb	r3, [r3, #0]
90002aba:	021b      	lsls	r3, r3, #8
90002abc:	431a      	orrs	r2, r3
90002abe:	69bb      	ldr	r3, [r7, #24]
90002ac0:	3302      	adds	r3, #2
90002ac2:	781b      	ldrb	r3, [r3, #0]
90002ac4:	041b      	lsls	r3, r3, #16
90002ac6:	431a      	orrs	r2, r3
90002ac8:	69bb      	ldr	r3, [r7, #24]
90002aca:	3303      	adds	r3, #3
90002acc:	781b      	ldrb	r3, [r3, #0]
90002ace:	061b      	lsls	r3, r3, #24
90002ad0:	4313      	orrs	r3, r2
90002ad2:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002ad4:	68ba      	ldr	r2, [r7, #8]
90002ad6:	697b      	ldr	r3, [r7, #20]
90002ad8:	18d1      	adds	r1, r2, r3
90002ada:	687a      	ldr	r2, [r7, #4]
90002adc:	69fb      	ldr	r3, [r7, #28]
90002ade:	441a      	add	r2, r3
90002ae0:	693b      	ldr	r3, [r7, #16]
90002ae2:	68f8      	ldr	r0, [r7, #12]
90002ae4:	f000 f95e 	bl	90002da4 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
90002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (90002b20 <BSP_LCD_FillRGBRect+0x90>)
90002aea:	68fb      	ldr	r3, [r7, #12]
90002aec:	015b      	lsls	r3, r3, #5
90002aee:	4413      	add	r3, r2
90002af0:	3310      	adds	r3, #16
90002af2:	681b      	ldr	r3, [r3, #0]
90002af4:	69ba      	ldr	r2, [r7, #24]
90002af6:	4413      	add	r3, r2
90002af8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
90002afa:	697b      	ldr	r3, [r7, #20]
90002afc:	3301      	adds	r3, #1
90002afe:	617b      	str	r3, [r7, #20]
90002b00:	697a      	ldr	r2, [r7, #20]
90002b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002b04:	429a      	cmp	r2, r3
90002b06:	d3d2      	bcc.n	90002aae <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90002b08:	69fb      	ldr	r3, [r7, #28]
90002b0a:	3301      	adds	r3, #1
90002b0c:	61fb      	str	r3, [r7, #28]
90002b0e:	69fa      	ldr	r2, [r7, #28]
90002b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002b12:	429a      	cmp	r2, r3
90002b14:	d3c8      	bcc.n	90002aa8 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90002b16:	2300      	movs	r3, #0
}
90002b18:	4618      	mov	r0, r3
90002b1a:	3720      	adds	r7, #32
90002b1c:	46bd      	mov	sp, r7
90002b1e:	bd80      	pop	{r7, pc}
90002b20:	2000122c 	.word	0x2000122c

90002b24 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002b24:	b580      	push	{r7, lr}
90002b26:	b088      	sub	sp, #32
90002b28:	af02      	add	r7, sp, #8
90002b2a:	60f8      	str	r0, [r7, #12]
90002b2c:	60b9      	str	r1, [r7, #8]
90002b2e:	607a      	str	r2, [r7, #4]
90002b30:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002b32:	4a21      	ldr	r2, [pc, #132]	@ (90002bb8 <BSP_LCD_DrawHLine+0x94>)
90002b34:	68fb      	ldr	r3, [r7, #12]
90002b36:	015b      	lsls	r3, r3, #5
90002b38:	4413      	add	r3, r2
90002b3a:	3308      	adds	r3, #8
90002b3c:	681b      	ldr	r3, [r3, #0]
90002b3e:	4a1f      	ldr	r2, [pc, #124]	@ (90002bbc <BSP_LCD_DrawHLine+0x98>)
90002b40:	2134      	movs	r1, #52	@ 0x34
90002b42:	fb01 f303 	mul.w	r3, r1, r3
90002b46:	4413      	add	r3, r2
90002b48:	335c      	adds	r3, #92	@ 0x5c
90002b4a:	681a      	ldr	r2, [r3, #0]
90002b4c:	491a      	ldr	r1, [pc, #104]	@ (90002bb8 <BSP_LCD_DrawHLine+0x94>)
90002b4e:	68fb      	ldr	r3, [r7, #12]
90002b50:	015b      	lsls	r3, r3, #5
90002b52:	440b      	add	r3, r1
90002b54:	3310      	adds	r3, #16
90002b56:	681b      	ldr	r3, [r3, #0]
90002b58:	4817      	ldr	r0, [pc, #92]	@ (90002bb8 <BSP_LCD_DrawHLine+0x94>)
90002b5a:	68f9      	ldr	r1, [r7, #12]
90002b5c:	0149      	lsls	r1, r1, #5
90002b5e:	4401      	add	r1, r0
90002b60:	6809      	ldr	r1, [r1, #0]
90002b62:	6878      	ldr	r0, [r7, #4]
90002b64:	fb01 f000 	mul.w	r0, r1, r0
90002b68:	68b9      	ldr	r1, [r7, #8]
90002b6a:	4401      	add	r1, r0
90002b6c:	fb01 f303 	mul.w	r3, r1, r3
90002b70:	4413      	add	r3, r2
90002b72:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002b74:	68ba      	ldr	r2, [r7, #8]
90002b76:	683b      	ldr	r3, [r7, #0]
90002b78:	441a      	add	r2, r3
90002b7a:	490f      	ldr	r1, [pc, #60]	@ (90002bb8 <BSP_LCD_DrawHLine+0x94>)
90002b7c:	68fb      	ldr	r3, [r7, #12]
90002b7e:	015b      	lsls	r3, r3, #5
90002b80:	440b      	add	r3, r1
90002b82:	681b      	ldr	r3, [r3, #0]
90002b84:	429a      	cmp	r2, r3
90002b86:	d907      	bls.n	90002b98 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002b88:	4a0b      	ldr	r2, [pc, #44]	@ (90002bb8 <BSP_LCD_DrawHLine+0x94>)
90002b8a:	68fb      	ldr	r3, [r7, #12]
90002b8c:	015b      	lsls	r3, r3, #5
90002b8e:	4413      	add	r3, r2
90002b90:	681a      	ldr	r2, [r3, #0]
90002b92:	68bb      	ldr	r3, [r7, #8]
90002b94:	1ad3      	subs	r3, r2, r3
90002b96:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002b98:	6979      	ldr	r1, [r7, #20]
90002b9a:	6a3b      	ldr	r3, [r7, #32]
90002b9c:	9301      	str	r3, [sp, #4]
90002b9e:	2300      	movs	r3, #0
90002ba0:	9300      	str	r3, [sp, #0]
90002ba2:	2301      	movs	r3, #1
90002ba4:	683a      	ldr	r2, [r7, #0]
90002ba6:	68f8      	ldr	r0, [r7, #12]
90002ba8:	f000 f956 	bl	90002e58 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002bac:	2300      	movs	r3, #0
}
90002bae:	4618      	mov	r0, r3
90002bb0:	3718      	adds	r7, #24
90002bb2:	46bd      	mov	sp, r7
90002bb4:	bd80      	pop	{r7, pc}
90002bb6:	bf00      	nop
90002bb8:	2000122c 	.word	0x2000122c
90002bbc:	20001184 	.word	0x20001184

90002bc0 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002bc0:	b580      	push	{r7, lr}
90002bc2:	b088      	sub	sp, #32
90002bc4:	af02      	add	r7, sp, #8
90002bc6:	60f8      	str	r0, [r7, #12]
90002bc8:	60b9      	str	r1, [r7, #8]
90002bca:	607a      	str	r2, [r7, #4]
90002bcc:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002bce:	4a24      	ldr	r2, [pc, #144]	@ (90002c60 <BSP_LCD_DrawVLine+0xa0>)
90002bd0:	68fb      	ldr	r3, [r7, #12]
90002bd2:	015b      	lsls	r3, r3, #5
90002bd4:	4413      	add	r3, r2
90002bd6:	3308      	adds	r3, #8
90002bd8:	681b      	ldr	r3, [r3, #0]
90002bda:	4a22      	ldr	r2, [pc, #136]	@ (90002c64 <BSP_LCD_DrawVLine+0xa4>)
90002bdc:	2134      	movs	r1, #52	@ 0x34
90002bde:	fb01 f303 	mul.w	r3, r1, r3
90002be2:	4413      	add	r3, r2
90002be4:	335c      	adds	r3, #92	@ 0x5c
90002be6:	681a      	ldr	r2, [r3, #0]
90002be8:	491d      	ldr	r1, [pc, #116]	@ (90002c60 <BSP_LCD_DrawVLine+0xa0>)
90002bea:	68fb      	ldr	r3, [r7, #12]
90002bec:	015b      	lsls	r3, r3, #5
90002bee:	440b      	add	r3, r1
90002bf0:	3310      	adds	r3, #16
90002bf2:	681b      	ldr	r3, [r3, #0]
90002bf4:	481a      	ldr	r0, [pc, #104]	@ (90002c60 <BSP_LCD_DrawVLine+0xa0>)
90002bf6:	68f9      	ldr	r1, [r7, #12]
90002bf8:	0149      	lsls	r1, r1, #5
90002bfa:	4401      	add	r1, r0
90002bfc:	6809      	ldr	r1, [r1, #0]
90002bfe:	6878      	ldr	r0, [r7, #4]
90002c00:	fb01 f000 	mul.w	r0, r1, r0
90002c04:	68b9      	ldr	r1, [r7, #8]
90002c06:	4401      	add	r1, r0
90002c08:	fb01 f303 	mul.w	r3, r1, r3
90002c0c:	4413      	add	r3, r2
90002c0e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90002c10:	687a      	ldr	r2, [r7, #4]
90002c12:	683b      	ldr	r3, [r7, #0]
90002c14:	441a      	add	r2, r3
90002c16:	4912      	ldr	r1, [pc, #72]	@ (90002c60 <BSP_LCD_DrawVLine+0xa0>)
90002c18:	68fb      	ldr	r3, [r7, #12]
90002c1a:	015b      	lsls	r3, r3, #5
90002c1c:	440b      	add	r3, r1
90002c1e:	3304      	adds	r3, #4
90002c20:	681b      	ldr	r3, [r3, #0]
90002c22:	429a      	cmp	r2, r3
90002c24:	d908      	bls.n	90002c38 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002c26:	4a0e      	ldr	r2, [pc, #56]	@ (90002c60 <BSP_LCD_DrawVLine+0xa0>)
90002c28:	68fb      	ldr	r3, [r7, #12]
90002c2a:	015b      	lsls	r3, r3, #5
90002c2c:	4413      	add	r3, r2
90002c2e:	3304      	adds	r3, #4
90002c30:	681a      	ldr	r2, [r3, #0]
90002c32:	687b      	ldr	r3, [r7, #4]
90002c34:	1ad3      	subs	r3, r2, r3
90002c36:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002c38:	6979      	ldr	r1, [r7, #20]
90002c3a:	4a09      	ldr	r2, [pc, #36]	@ (90002c60 <BSP_LCD_DrawVLine+0xa0>)
90002c3c:	68fb      	ldr	r3, [r7, #12]
90002c3e:	015b      	lsls	r3, r3, #5
90002c40:	4413      	add	r3, r2
90002c42:	681b      	ldr	r3, [r3, #0]
90002c44:	3b01      	subs	r3, #1
90002c46:	6a3a      	ldr	r2, [r7, #32]
90002c48:	9201      	str	r2, [sp, #4]
90002c4a:	9300      	str	r3, [sp, #0]
90002c4c:	683b      	ldr	r3, [r7, #0]
90002c4e:	2201      	movs	r2, #1
90002c50:	68f8      	ldr	r0, [r7, #12]
90002c52:	f000 f901 	bl	90002e58 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002c56:	2300      	movs	r3, #0
}
90002c58:	4618      	mov	r0, r3
90002c5a:	3718      	adds	r7, #24
90002c5c:	46bd      	mov	sp, r7
90002c5e:	bd80      	pop	{r7, pc}
90002c60:	2000122c 	.word	0x2000122c
90002c64:	20001184 	.word	0x20001184

90002c68 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002c68:	b580      	push	{r7, lr}
90002c6a:	b088      	sub	sp, #32
90002c6c:	af02      	add	r7, sp, #8
90002c6e:	60f8      	str	r0, [r7, #12]
90002c70:	60b9      	str	r1, [r7, #8]
90002c72:	607a      	str	r2, [r7, #4]
90002c74:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002c76:	4a1b      	ldr	r2, [pc, #108]	@ (90002ce4 <BSP_LCD_FillRect+0x7c>)
90002c78:	68fb      	ldr	r3, [r7, #12]
90002c7a:	015b      	lsls	r3, r3, #5
90002c7c:	4413      	add	r3, r2
90002c7e:	3308      	adds	r3, #8
90002c80:	681b      	ldr	r3, [r3, #0]
90002c82:	4a19      	ldr	r2, [pc, #100]	@ (90002ce8 <BSP_LCD_FillRect+0x80>)
90002c84:	2134      	movs	r1, #52	@ 0x34
90002c86:	fb01 f303 	mul.w	r3, r1, r3
90002c8a:	4413      	add	r3, r2
90002c8c:	335c      	adds	r3, #92	@ 0x5c
90002c8e:	681a      	ldr	r2, [r3, #0]
90002c90:	4914      	ldr	r1, [pc, #80]	@ (90002ce4 <BSP_LCD_FillRect+0x7c>)
90002c92:	68fb      	ldr	r3, [r7, #12]
90002c94:	015b      	lsls	r3, r3, #5
90002c96:	440b      	add	r3, r1
90002c98:	3310      	adds	r3, #16
90002c9a:	681b      	ldr	r3, [r3, #0]
90002c9c:	4811      	ldr	r0, [pc, #68]	@ (90002ce4 <BSP_LCD_FillRect+0x7c>)
90002c9e:	68f9      	ldr	r1, [r7, #12]
90002ca0:	0149      	lsls	r1, r1, #5
90002ca2:	4401      	add	r1, r0
90002ca4:	6809      	ldr	r1, [r1, #0]
90002ca6:	6878      	ldr	r0, [r7, #4]
90002ca8:	fb01 f000 	mul.w	r0, r1, r0
90002cac:	68b9      	ldr	r1, [r7, #8]
90002cae:	4401      	add	r1, r0
90002cb0:	fb01 f303 	mul.w	r3, r1, r3
90002cb4:	4413      	add	r3, r2
90002cb6:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90002cb8:	6979      	ldr	r1, [r7, #20]
90002cba:	4a0a      	ldr	r2, [pc, #40]	@ (90002ce4 <BSP_LCD_FillRect+0x7c>)
90002cbc:	68fb      	ldr	r3, [r7, #12]
90002cbe:	015b      	lsls	r3, r3, #5
90002cc0:	4413      	add	r3, r2
90002cc2:	681a      	ldr	r2, [r3, #0]
90002cc4:	683b      	ldr	r3, [r7, #0]
90002cc6:	1ad3      	subs	r3, r2, r3
90002cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002cca:	9201      	str	r2, [sp, #4]
90002ccc:	9300      	str	r3, [sp, #0]
90002cce:	6a3b      	ldr	r3, [r7, #32]
90002cd0:	683a      	ldr	r2, [r7, #0]
90002cd2:	68f8      	ldr	r0, [r7, #12]
90002cd4:	f000 f8c0 	bl	90002e58 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002cd8:	2300      	movs	r3, #0
}
90002cda:	4618      	mov	r0, r3
90002cdc:	3718      	adds	r7, #24
90002cde:	46bd      	mov	sp, r7
90002ce0:	bd80      	pop	{r7, pc}
90002ce2:	bf00      	nop
90002ce4:	2000122c 	.word	0x2000122c
90002ce8:	20001184 	.word	0x20001184

90002cec <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002cec:	b480      	push	{r7}
90002cee:	b085      	sub	sp, #20
90002cf0:	af00      	add	r7, sp, #0
90002cf2:	60f8      	str	r0, [r7, #12]
90002cf4:	60b9      	str	r1, [r7, #8]
90002cf6:	607a      	str	r2, [r7, #4]
90002cf8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002cfa:	4a28      	ldr	r2, [pc, #160]	@ (90002d9c <BSP_LCD_ReadPixel+0xb0>)
90002cfc:	68fb      	ldr	r3, [r7, #12]
90002cfe:	015b      	lsls	r3, r3, #5
90002d00:	4413      	add	r3, r2
90002d02:	3308      	adds	r3, #8
90002d04:	681b      	ldr	r3, [r3, #0]
90002d06:	4a26      	ldr	r2, [pc, #152]	@ (90002da0 <BSP_LCD_ReadPixel+0xb4>)
90002d08:	2134      	movs	r1, #52	@ 0x34
90002d0a:	fb01 f303 	mul.w	r3, r1, r3
90002d0e:	4413      	add	r3, r2
90002d10:	3348      	adds	r3, #72	@ 0x48
90002d12:	681b      	ldr	r3, [r3, #0]
90002d14:	2b00      	cmp	r3, #0
90002d16:	d11c      	bne.n	90002d52 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002d18:	4a20      	ldr	r2, [pc, #128]	@ (90002d9c <BSP_LCD_ReadPixel+0xb0>)
90002d1a:	68fb      	ldr	r3, [r7, #12]
90002d1c:	015b      	lsls	r3, r3, #5
90002d1e:	4413      	add	r3, r2
90002d20:	3308      	adds	r3, #8
90002d22:	681b      	ldr	r3, [r3, #0]
90002d24:	4a1e      	ldr	r2, [pc, #120]	@ (90002da0 <BSP_LCD_ReadPixel+0xb4>)
90002d26:	2134      	movs	r1, #52	@ 0x34
90002d28:	fb01 f303 	mul.w	r3, r1, r3
90002d2c:	4413      	add	r3, r2
90002d2e:	335c      	adds	r3, #92	@ 0x5c
90002d30:	681a      	ldr	r2, [r3, #0]
90002d32:	491a      	ldr	r1, [pc, #104]	@ (90002d9c <BSP_LCD_ReadPixel+0xb0>)
90002d34:	68fb      	ldr	r3, [r7, #12]
90002d36:	015b      	lsls	r3, r3, #5
90002d38:	440b      	add	r3, r1
90002d3a:	681b      	ldr	r3, [r3, #0]
90002d3c:	6879      	ldr	r1, [r7, #4]
90002d3e:	fb03 f101 	mul.w	r1, r3, r1
90002d42:	68bb      	ldr	r3, [r7, #8]
90002d44:	440b      	add	r3, r1
90002d46:	009b      	lsls	r3, r3, #2
90002d48:	4413      	add	r3, r2
90002d4a:	681a      	ldr	r2, [r3, #0]
90002d4c:	683b      	ldr	r3, [r7, #0]
90002d4e:	601a      	str	r2, [r3, #0]
90002d50:	e01d      	b.n	90002d8e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002d52:	4a12      	ldr	r2, [pc, #72]	@ (90002d9c <BSP_LCD_ReadPixel+0xb0>)
90002d54:	68fb      	ldr	r3, [r7, #12]
90002d56:	015b      	lsls	r3, r3, #5
90002d58:	4413      	add	r3, r2
90002d5a:	3308      	adds	r3, #8
90002d5c:	681b      	ldr	r3, [r3, #0]
90002d5e:	4a10      	ldr	r2, [pc, #64]	@ (90002da0 <BSP_LCD_ReadPixel+0xb4>)
90002d60:	2134      	movs	r1, #52	@ 0x34
90002d62:	fb01 f303 	mul.w	r3, r1, r3
90002d66:	4413      	add	r3, r2
90002d68:	335c      	adds	r3, #92	@ 0x5c
90002d6a:	681a      	ldr	r2, [r3, #0]
90002d6c:	490b      	ldr	r1, [pc, #44]	@ (90002d9c <BSP_LCD_ReadPixel+0xb0>)
90002d6e:	68fb      	ldr	r3, [r7, #12]
90002d70:	015b      	lsls	r3, r3, #5
90002d72:	440b      	add	r3, r1
90002d74:	681b      	ldr	r3, [r3, #0]
90002d76:	6879      	ldr	r1, [r7, #4]
90002d78:	fb03 f101 	mul.w	r1, r3, r1
90002d7c:	68bb      	ldr	r3, [r7, #8]
90002d7e:	440b      	add	r3, r1
90002d80:	005b      	lsls	r3, r3, #1
90002d82:	4413      	add	r3, r2
90002d84:	881b      	ldrh	r3, [r3, #0]
90002d86:	b29b      	uxth	r3, r3
90002d88:	461a      	mov	r2, r3
90002d8a:	683b      	ldr	r3, [r7, #0]
90002d8c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002d8e:	2300      	movs	r3, #0
}
90002d90:	4618      	mov	r0, r3
90002d92:	3714      	adds	r7, #20
90002d94:	46bd      	mov	sp, r7
90002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
90002d9a:	4770      	bx	lr
90002d9c:	2000122c 	.word	0x2000122c
90002da0:	20001184 	.word	0x20001184

90002da4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002da4:	b480      	push	{r7}
90002da6:	b085      	sub	sp, #20
90002da8:	af00      	add	r7, sp, #0
90002daa:	60f8      	str	r0, [r7, #12]
90002dac:	60b9      	str	r1, [r7, #8]
90002dae:	607a      	str	r2, [r7, #4]
90002db0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002db2:	4a27      	ldr	r2, [pc, #156]	@ (90002e50 <BSP_LCD_WritePixel+0xac>)
90002db4:	68fb      	ldr	r3, [r7, #12]
90002db6:	015b      	lsls	r3, r3, #5
90002db8:	4413      	add	r3, r2
90002dba:	3308      	adds	r3, #8
90002dbc:	681b      	ldr	r3, [r3, #0]
90002dbe:	4a25      	ldr	r2, [pc, #148]	@ (90002e54 <BSP_LCD_WritePixel+0xb0>)
90002dc0:	2134      	movs	r1, #52	@ 0x34
90002dc2:	fb01 f303 	mul.w	r3, r1, r3
90002dc6:	4413      	add	r3, r2
90002dc8:	3348      	adds	r3, #72	@ 0x48
90002dca:	681b      	ldr	r3, [r3, #0]
90002dcc:	2b00      	cmp	r3, #0
90002dce:	d11c      	bne.n	90002e0a <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002dd0:	4a1f      	ldr	r2, [pc, #124]	@ (90002e50 <BSP_LCD_WritePixel+0xac>)
90002dd2:	68fb      	ldr	r3, [r7, #12]
90002dd4:	015b      	lsls	r3, r3, #5
90002dd6:	4413      	add	r3, r2
90002dd8:	3308      	adds	r3, #8
90002dda:	681b      	ldr	r3, [r3, #0]
90002ddc:	4a1d      	ldr	r2, [pc, #116]	@ (90002e54 <BSP_LCD_WritePixel+0xb0>)
90002dde:	2134      	movs	r1, #52	@ 0x34
90002de0:	fb01 f303 	mul.w	r3, r1, r3
90002de4:	4413      	add	r3, r2
90002de6:	335c      	adds	r3, #92	@ 0x5c
90002de8:	681a      	ldr	r2, [r3, #0]
90002dea:	4919      	ldr	r1, [pc, #100]	@ (90002e50 <BSP_LCD_WritePixel+0xac>)
90002dec:	68fb      	ldr	r3, [r7, #12]
90002dee:	015b      	lsls	r3, r3, #5
90002df0:	440b      	add	r3, r1
90002df2:	681b      	ldr	r3, [r3, #0]
90002df4:	6879      	ldr	r1, [r7, #4]
90002df6:	fb03 f101 	mul.w	r1, r3, r1
90002dfa:	68bb      	ldr	r3, [r7, #8]
90002dfc:	440b      	add	r3, r1
90002dfe:	009b      	lsls	r3, r3, #2
90002e00:	4413      	add	r3, r2
90002e02:	461a      	mov	r2, r3
90002e04:	683b      	ldr	r3, [r7, #0]
90002e06:	6013      	str	r3, [r2, #0]
90002e08:	e01b      	b.n	90002e42 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90002e0a:	4a11      	ldr	r2, [pc, #68]	@ (90002e50 <BSP_LCD_WritePixel+0xac>)
90002e0c:	68fb      	ldr	r3, [r7, #12]
90002e0e:	015b      	lsls	r3, r3, #5
90002e10:	4413      	add	r3, r2
90002e12:	3308      	adds	r3, #8
90002e14:	681b      	ldr	r3, [r3, #0]
90002e16:	4a0f      	ldr	r2, [pc, #60]	@ (90002e54 <BSP_LCD_WritePixel+0xb0>)
90002e18:	2134      	movs	r1, #52	@ 0x34
90002e1a:	fb01 f303 	mul.w	r3, r1, r3
90002e1e:	4413      	add	r3, r2
90002e20:	335c      	adds	r3, #92	@ 0x5c
90002e22:	681a      	ldr	r2, [r3, #0]
90002e24:	490a      	ldr	r1, [pc, #40]	@ (90002e50 <BSP_LCD_WritePixel+0xac>)
90002e26:	68fb      	ldr	r3, [r7, #12]
90002e28:	015b      	lsls	r3, r3, #5
90002e2a:	440b      	add	r3, r1
90002e2c:	681b      	ldr	r3, [r3, #0]
90002e2e:	6879      	ldr	r1, [r7, #4]
90002e30:	fb03 f101 	mul.w	r1, r3, r1
90002e34:	68bb      	ldr	r3, [r7, #8]
90002e36:	440b      	add	r3, r1
90002e38:	005b      	lsls	r3, r3, #1
90002e3a:	4413      	add	r3, r2
90002e3c:	683a      	ldr	r2, [r7, #0]
90002e3e:	b292      	uxth	r2, r2
90002e40:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002e42:	2300      	movs	r3, #0
}
90002e44:	4618      	mov	r0, r3
90002e46:	3714      	adds	r7, #20
90002e48:	46bd      	mov	sp, r7
90002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
90002e4e:	4770      	bx	lr
90002e50:	2000122c 	.word	0x2000122c
90002e54:	20001184 	.word	0x20001184

90002e58 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002e58:	b580      	push	{r7, lr}
90002e5a:	b088      	sub	sp, #32
90002e5c:	af02      	add	r7, sp, #8
90002e5e:	60f8      	str	r0, [r7, #12]
90002e60:	60b9      	str	r1, [r7, #8]
90002e62:	607a      	str	r2, [r7, #4]
90002e64:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002e68:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002e6a:	4a2d      	ldr	r2, [pc, #180]	@ (90002f20 <LL_FillBuffer+0xc8>)
90002e6c:	68fb      	ldr	r3, [r7, #12]
90002e6e:	015b      	lsls	r3, r3, #5
90002e70:	4413      	add	r3, r2
90002e72:	330c      	adds	r3, #12
90002e74:	681b      	ldr	r3, [r3, #0]
90002e76:	2b02      	cmp	r3, #2
90002e78:	d129      	bne.n	90002ece <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002e7a:	2302      	movs	r3, #2
90002e7c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002e80:	0adb      	lsrs	r3, r3, #11
90002e82:	f003 021f 	and.w	r2, r3, #31
90002e86:	4613      	mov	r3, r2
90002e88:	011b      	lsls	r3, r3, #4
90002e8a:	4413      	add	r3, r2
90002e8c:	015a      	lsls	r2, r3, #5
90002e8e:	1ad3      	subs	r3, r2, r3
90002e90:	3317      	adds	r3, #23
90002e92:	099b      	lsrs	r3, r3, #6
90002e94:	0419      	lsls	r1, r3, #16
90002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002e98:	095b      	lsrs	r3, r3, #5
90002e9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002e9e:	4613      	mov	r3, r2
90002ea0:	01db      	lsls	r3, r3, #7
90002ea2:	4413      	add	r3, r2
90002ea4:	005b      	lsls	r3, r3, #1
90002ea6:	4413      	add	r3, r2
90002ea8:	3321      	adds	r3, #33	@ 0x21
90002eaa:	099b      	lsrs	r3, r3, #6
90002eac:	021b      	lsls	r3, r3, #8
90002eae:	4319      	orrs	r1, r3
90002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002eb2:	f003 021f 	and.w	r2, r3, #31
90002eb6:	4613      	mov	r3, r2
90002eb8:	011b      	lsls	r3, r3, #4
90002eba:	4413      	add	r3, r2
90002ebc:	015a      	lsls	r2, r3, #5
90002ebe:	1ad3      	subs	r3, r2, r3
90002ec0:	3317      	adds	r3, #23
90002ec2:	099b      	lsrs	r3, r3, #6
90002ec4:	430b      	orrs	r3, r1
90002ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
90002eca:	613b      	str	r3, [r7, #16]
    break;
90002ecc:	e002      	b.n	90002ed4 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002ece:	2300      	movs	r3, #0
90002ed0:	617b      	str	r3, [r7, #20]
    break;
90002ed2:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002ed4:	4b13      	ldr	r3, [pc, #76]	@ (90002f24 <LL_FillBuffer+0xcc>)
90002ed6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
90002eda:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002edc:	4a11      	ldr	r2, [pc, #68]	@ (90002f24 <LL_FillBuffer+0xcc>)
90002ede:	697b      	ldr	r3, [r7, #20]
90002ee0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002ee2:	4a10      	ldr	r2, [pc, #64]	@ (90002f24 <LL_FillBuffer+0xcc>)
90002ee4:	6a3b      	ldr	r3, [r7, #32]
90002ee6:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
90002ee8:	4b0e      	ldr	r3, [pc, #56]	@ (90002f24 <LL_FillBuffer+0xcc>)
90002eea:	4a0f      	ldr	r2, [pc, #60]	@ (90002f28 <LL_FillBuffer+0xd0>)
90002eec:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002eee:	480d      	ldr	r0, [pc, #52]	@ (90002f24 <LL_FillBuffer+0xcc>)
90002ef0:	f000 ff5a 	bl	90003da8 <HAL_DMA2D_Init>
90002ef4:	4603      	mov	r3, r0
90002ef6:	2b00      	cmp	r3, #0
90002ef8:	d10e      	bne.n	90002f18 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90002efa:	68ba      	ldr	r2, [r7, #8]
90002efc:	683b      	ldr	r3, [r7, #0]
90002efe:	9300      	str	r3, [sp, #0]
90002f00:	687b      	ldr	r3, [r7, #4]
90002f02:	6939      	ldr	r1, [r7, #16]
90002f04:	4807      	ldr	r0, [pc, #28]	@ (90002f24 <LL_FillBuffer+0xcc>)
90002f06:	f000 ffbd 	bl	90003e84 <HAL_DMA2D_Start>
90002f0a:	4603      	mov	r3, r0
90002f0c:	2b00      	cmp	r3, #0
90002f0e:	d103      	bne.n	90002f18 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002f10:	2132      	movs	r1, #50	@ 0x32
90002f12:	4804      	ldr	r0, [pc, #16]	@ (90002f24 <LL_FillBuffer+0xcc>)
90002f14:	f000 ffe1 	bl	90003eda <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002f18:	bf00      	nop
90002f1a:	3718      	adds	r7, #24
90002f1c:	46bd      	mov	sp, r7
90002f1e:	bd80      	pop	{r7, pc}
90002f20:	2000122c 	.word	0x2000122c
90002f24:	2000111c 	.word	0x2000111c
90002f28:	52001000 	.word	0x52001000

90002f2c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002f2c:	b580      	push	{r7, lr}
90002f2e:	b088      	sub	sp, #32
90002f30:	af02      	add	r7, sp, #8
90002f32:	60f8      	str	r0, [r7, #12]
90002f34:	60b9      	str	r1, [r7, #8]
90002f36:	607a      	str	r2, [r7, #4]
90002f38:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002f3a:	4a23      	ldr	r2, [pc, #140]	@ (90002fc8 <LL_ConvertLineToRGB+0x9c>)
90002f3c:	68fb      	ldr	r3, [r7, #12]
90002f3e:	015b      	lsls	r3, r3, #5
90002f40:	4413      	add	r3, r2
90002f42:	330c      	adds	r3, #12
90002f44:	681b      	ldr	r3, [r3, #0]
90002f46:	2b02      	cmp	r3, #2
90002f48:	d102      	bne.n	90002f50 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002f4a:	2302      	movs	r3, #2
90002f4c:	617b      	str	r3, [r7, #20]
    break;
90002f4e:	e002      	b.n	90002f56 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002f50:	2300      	movs	r3, #0
90002f52:	617b      	str	r3, [r7, #20]
    break;
90002f54:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002f56:	4b1d      	ldr	r3, [pc, #116]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002f5c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002f5e:	4a1b      	ldr	r2, [pc, #108]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f60:	697b      	ldr	r3, [r7, #20]
90002f62:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002f64:	4b19      	ldr	r3, [pc, #100]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f66:	2200      	movs	r2, #0
90002f68:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002f6a:	4b18      	ldr	r3, [pc, #96]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f6c:	2200      	movs	r2, #0
90002f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002f70:	4b16      	ldr	r3, [pc, #88]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f72:	22ff      	movs	r2, #255	@ 0xff
90002f74:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002f76:	4a15      	ldr	r2, [pc, #84]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f78:	6a3b      	ldr	r3, [r7, #32]
90002f7a:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002f7c:	4b13      	ldr	r3, [pc, #76]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f7e:	2200      	movs	r2, #0
90002f80:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002f82:	4b12      	ldr	r3, [pc, #72]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f84:	4a12      	ldr	r2, [pc, #72]	@ (90002fd0 <LL_ConvertLineToRGB+0xa4>)
90002f86:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002f88:	4810      	ldr	r0, [pc, #64]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f8a:	f000 ff0d 	bl	90003da8 <HAL_DMA2D_Init>
90002f8e:	4603      	mov	r3, r0
90002f90:	2b00      	cmp	r3, #0
90002f92:	d115      	bne.n	90002fc0 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002f94:	2101      	movs	r1, #1
90002f96:	480d      	ldr	r0, [pc, #52]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002f98:	f001 f888 	bl	900040ac <HAL_DMA2D_ConfigLayer>
90002f9c:	4603      	mov	r3, r0
90002f9e:	2b00      	cmp	r3, #0
90002fa0:	d10e      	bne.n	90002fc0 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002fa2:	68b9      	ldr	r1, [r7, #8]
90002fa4:	687a      	ldr	r2, [r7, #4]
90002fa6:	2301      	movs	r3, #1
90002fa8:	9300      	str	r3, [sp, #0]
90002faa:	683b      	ldr	r3, [r7, #0]
90002fac:	4807      	ldr	r0, [pc, #28]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002fae:	f000 ff69 	bl	90003e84 <HAL_DMA2D_Start>
90002fb2:	4603      	mov	r3, r0
90002fb4:	2b00      	cmp	r3, #0
90002fb6:	d103      	bne.n	90002fc0 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002fb8:	2132      	movs	r1, #50	@ 0x32
90002fba:	4804      	ldr	r0, [pc, #16]	@ (90002fcc <LL_ConvertLineToRGB+0xa0>)
90002fbc:	f000 ff8d 	bl	90003eda <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002fc0:	bf00      	nop
90002fc2:	3718      	adds	r7, #24
90002fc4:	46bd      	mov	sp, r7
90002fc6:	bd80      	pop	{r7, pc}
90002fc8:	2000122c 	.word	0x2000122c
90002fcc:	2000111c 	.word	0x2000111c
90002fd0:	52001000 	.word	0x52001000

90002fd4 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002fd4:	b580      	push	{r7, lr}
90002fd6:	b08e      	sub	sp, #56	@ 0x38
90002fd8:	af00      	add	r7, sp, #0
90002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002fdc:	687b      	ldr	r3, [r7, #4]
90002fde:	681b      	ldr	r3, [r3, #0]
90002fe0:	4a5b      	ldr	r2, [pc, #364]	@ (90003150 <LTDC_MspInit+0x17c>)
90002fe2:	4293      	cmp	r3, r2
90002fe4:	f040 80b0 	bne.w	90003148 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002fe8:	4b5a      	ldr	r3, [pc, #360]	@ (90003154 <LTDC_MspInit+0x180>)
90002fea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002fee:	4a59      	ldr	r2, [pc, #356]	@ (90003154 <LTDC_MspInit+0x180>)
90002ff0:	f043 0308 	orr.w	r3, r3, #8
90002ff4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002ff8:	4b56      	ldr	r3, [pc, #344]	@ (90003154 <LTDC_MspInit+0x180>)
90002ffa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002ffe:	f003 0308 	and.w	r3, r3, #8
90003002:	623b      	str	r3, [r7, #32]
90003004:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90003006:	4b53      	ldr	r3, [pc, #332]	@ (90003154 <LTDC_MspInit+0x180>)
90003008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000300c:	4a51      	ldr	r2, [pc, #324]	@ (90003154 <LTDC_MspInit+0x180>)
9000300e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90003012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003016:	4b4f      	ldr	r3, [pc, #316]	@ (90003154 <LTDC_MspInit+0x180>)
90003018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90003020:	61fb      	str	r3, [r7, #28]
90003022:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90003024:	4b4b      	ldr	r3, [pc, #300]	@ (90003154 <LTDC_MspInit+0x180>)
90003026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000302a:	4a4a      	ldr	r2, [pc, #296]	@ (90003154 <LTDC_MspInit+0x180>)
9000302c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90003030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003034:	4b47      	ldr	r3, [pc, #284]	@ (90003154 <LTDC_MspInit+0x180>)
90003036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000303a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000303e:	61bb      	str	r3, [r7, #24]
90003040:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90003042:	4b44      	ldr	r3, [pc, #272]	@ (90003154 <LTDC_MspInit+0x180>)
90003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003048:	4a42      	ldr	r2, [pc, #264]	@ (90003154 <LTDC_MspInit+0x180>)
9000304a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000304e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003052:	4b40      	ldr	r3, [pc, #256]	@ (90003154 <LTDC_MspInit+0x180>)
90003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000305c:	617b      	str	r3, [r7, #20]
9000305e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90003060:	4b3c      	ldr	r3, [pc, #240]	@ (90003154 <LTDC_MspInit+0x180>)
90003062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003066:	4a3b      	ldr	r2, [pc, #236]	@ (90003154 <LTDC_MspInit+0x180>)
90003068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000306c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003070:	4b38      	ldr	r3, [pc, #224]	@ (90003154 <LTDC_MspInit+0x180>)
90003072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000307a:	613b      	str	r3, [r7, #16]
9000307c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000307e:	4b35      	ldr	r3, [pc, #212]	@ (90003154 <LTDC_MspInit+0x180>)
90003080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003084:	4a33      	ldr	r2, [pc, #204]	@ (90003154 <LTDC_MspInit+0x180>)
90003086:	f043 0308 	orr.w	r3, r3, #8
9000308a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000308e:	4b31      	ldr	r3, [pc, #196]	@ (90003154 <LTDC_MspInit+0x180>)
90003090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003094:	f003 0308 	and.w	r3, r3, #8
90003098:	60fb      	str	r3, [r7, #12]
9000309a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
9000309c:	f24d 2303 	movw	r3, #53763	@ 0xd203
900030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900030a2:	2302      	movs	r3, #2
900030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900030a6:	2300      	movs	r3, #0
900030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900030aa:	2302      	movs	r3, #2
900030ac:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900030ae:	230e      	movs	r3, #14
900030b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900030b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900030b6:	4619      	mov	r1, r3
900030b8:	4827      	ldr	r0, [pc, #156]	@ (90003158 <LTDC_MspInit+0x184>)
900030ba:	f001 f94b 	bl	90004354 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
900030be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
900030c2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900030c4:	230e      	movs	r3, #14
900030c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
900030c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900030cc:	4619      	mov	r1, r3
900030ce:	4823      	ldr	r0, [pc, #140]	@ (9000315c <LTDC_MspInit+0x188>)
900030d0:	f001 f940 	bl	90004354 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900030d4:	23ff      	movs	r3, #255	@ 0xff
900030d6:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900030d8:	230e      	movs	r3, #14
900030da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
900030dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900030e0:	4619      	mov	r1, r3
900030e2:	481f      	ldr	r0, [pc, #124]	@ (90003160 <LTDC_MspInit+0x18c>)
900030e4:	f001 f936 	bl	90004354 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
900030e8:	f240 2302 	movw	r3, #514	@ 0x202
900030ec:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900030ee:	2302      	movs	r3, #2
900030f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900030f2:	2300      	movs	r3, #0
900030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900030f6:	2302      	movs	r3, #2
900030f8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900030fa:	230e      	movs	r3, #14
900030fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900030fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003102:	4619      	mov	r1, r3
90003104:	4817      	ldr	r0, [pc, #92]	@ (90003164 <LTDC_MspInit+0x190>)
90003106:	f001 f925 	bl	90004354 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
9000310a:	2380      	movs	r3, #128	@ 0x80
9000310c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000310e:	2301      	movs	r3, #1
90003110:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90003112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003116:	4619      	mov	r1, r3
90003118:	4813      	ldr	r0, [pc, #76]	@ (90003168 <LTDC_MspInit+0x194>)
9000311a:	f001 f91b 	bl	90004354 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
9000311e:	2201      	movs	r2, #1
90003120:	2180      	movs	r1, #128	@ 0x80
90003122:	4811      	ldr	r0, [pc, #68]	@ (90003168 <LTDC_MspInit+0x194>)
90003124:	f001 fbe8 	bl	900048f8 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90003128:	4b0a      	ldr	r3, [pc, #40]	@ (90003154 <LTDC_MspInit+0x180>)
9000312a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000312e:	4a09      	ldr	r2, [pc, #36]	@ (90003154 <LTDC_MspInit+0x180>)
90003130:	f043 0308 	orr.w	r3, r3, #8
90003134:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90003138:	4b06      	ldr	r3, [pc, #24]	@ (90003154 <LTDC_MspInit+0x180>)
9000313a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000313e:	4a05      	ldr	r2, [pc, #20]	@ (90003154 <LTDC_MspInit+0x180>)
90003140:	f023 0308 	bic.w	r3, r3, #8
90003144:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90003148:	bf00      	nop
9000314a:	3738      	adds	r7, #56	@ 0x38
9000314c:	46bd      	mov	sp, r7
9000314e:	bd80      	pop	{r7, pc}
90003150:	50001000 	.word	0x50001000
90003154:	58024400 	.word	0x58024400
90003158:	58022000 	.word	0x58022000
9000315c:	58022400 	.word	0x58022400
90003160:	58022800 	.word	0x58022800
90003164:	58021c00 	.word	0x58021c00
90003168:	58020c00 	.word	0x58020c00

9000316c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
9000316c:	b480      	push	{r7}
9000316e:	b085      	sub	sp, #20
90003170:	af00      	add	r7, sp, #0
90003172:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90003174:	687b      	ldr	r3, [r7, #4]
90003176:	681b      	ldr	r3, [r3, #0]
90003178:	4a11      	ldr	r2, [pc, #68]	@ (900031c0 <DMA2D_MspInit+0x54>)
9000317a:	4293      	cmp	r3, r2
9000317c:	d11a      	bne.n	900031b4 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000317e:	4b11      	ldr	r3, [pc, #68]	@ (900031c4 <DMA2D_MspInit+0x58>)
90003180:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003184:	4a0f      	ldr	r2, [pc, #60]	@ (900031c4 <DMA2D_MspInit+0x58>)
90003186:	f043 0310 	orr.w	r3, r3, #16
9000318a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
9000318e:	4b0d      	ldr	r3, [pc, #52]	@ (900031c4 <DMA2D_MspInit+0x58>)
90003190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90003194:	f003 0310 	and.w	r3, r3, #16
90003198:	60fb      	str	r3, [r7, #12]
9000319a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
9000319c:	4b09      	ldr	r3, [pc, #36]	@ (900031c4 <DMA2D_MspInit+0x58>)
9000319e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900031a0:	4a08      	ldr	r2, [pc, #32]	@ (900031c4 <DMA2D_MspInit+0x58>)
900031a2:	f043 0310 	orr.w	r3, r3, #16
900031a6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
900031a8:	4b06      	ldr	r3, [pc, #24]	@ (900031c4 <DMA2D_MspInit+0x58>)
900031aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900031ac:	4a05      	ldr	r2, [pc, #20]	@ (900031c4 <DMA2D_MspInit+0x58>)
900031ae:	f023 0310 	bic.w	r3, r3, #16
900031b2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
900031b4:	bf00      	nop
900031b6:	3714      	adds	r7, #20
900031b8:	46bd      	mov	sp, r7
900031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
900031be:	4770      	bx	lr
900031c0:	52001000 	.word	0x52001000
900031c4:	58024400 	.word	0x58024400

900031c8 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
900031c8:	b580      	push	{r7, lr}
900031ca:	b08a      	sub	sp, #40	@ 0x28
900031cc:	af00      	add	r7, sp, #0
900031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900031d0:	4b18      	ldr	r3, [pc, #96]	@ (90003234 <TIMx_PWM_MspInit+0x6c>)
900031d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031d6:	4a17      	ldr	r2, [pc, #92]	@ (90003234 <TIMx_PWM_MspInit+0x6c>)
900031d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
900031dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031e0:	4b14      	ldr	r3, [pc, #80]	@ (90003234 <TIMx_PWM_MspInit+0x6c>)
900031e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900031ea:	613b      	str	r3, [r7, #16]
900031ec:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
900031ee:	4b11      	ldr	r3, [pc, #68]	@ (90003234 <TIMx_PWM_MspInit+0x6c>)
900031f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
900031f4:	4a0f      	ldr	r2, [pc, #60]	@ (90003234 <TIMx_PWM_MspInit+0x6c>)
900031f6:	f043 0302 	orr.w	r3, r3, #2
900031fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
900031fe:	4b0d      	ldr	r3, [pc, #52]	@ (90003234 <TIMx_PWM_MspInit+0x6c>)
90003200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90003204:	f003 0302 	and.w	r3, r3, #2
90003208:	60fb      	str	r3, [r7, #12]
9000320a:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
9000320c:	2302      	movs	r3, #2
9000320e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90003210:	2300      	movs	r3, #0
90003212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90003214:	2301      	movs	r3, #1
90003216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90003218:	2303      	movs	r3, #3
9000321a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
9000321c:	2301      	movs	r3, #1
9000321e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90003220:	f107 0314 	add.w	r3, r7, #20
90003224:	4619      	mov	r1, r3
90003226:	4804      	ldr	r0, [pc, #16]	@ (90003238 <TIMx_PWM_MspInit+0x70>)
90003228:	f001 f894 	bl	90004354 <HAL_GPIO_Init>
}
9000322c:	bf00      	nop
9000322e:	3728      	adds	r7, #40	@ 0x28
90003230:	46bd      	mov	sp, r7
90003232:	bd80      	pop	{r7, pc}
90003234:	58024400 	.word	0x58024400
90003238:	58022800 	.word	0x58022800

9000323c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
9000323c:	b580      	push	{r7, lr}
9000323e:	b082      	sub	sp, #8
90003240:	af00      	add	r7, sp, #0
90003242:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90003244:	687b      	ldr	r3, [r7, #4]
90003246:	4a11      	ldr	r2, [pc, #68]	@ (9000328c <TIMx_PWM_Init+0x50>)
90003248:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
9000324a:	6878      	ldr	r0, [r7, #4]
9000324c:	f007 fa38 	bl	9000a6c0 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90003250:	6878      	ldr	r0, [r7, #4]
90003252:	f7ff ffb9 	bl	900031c8 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90003256:	687b      	ldr	r3, [r7, #4]
90003258:	2204      	movs	r2, #4
9000325a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
9000325c:	687b      	ldr	r3, [r7, #4]
9000325e:	f24c 3250 	movw	r2, #50000	@ 0xc350
90003262:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90003264:	687b      	ldr	r3, [r7, #4]
90003266:	2200      	movs	r2, #0
90003268:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
9000326a:	687b      	ldr	r3, [r7, #4]
9000326c:	2200      	movs	r2, #0
9000326e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90003270:	687b      	ldr	r3, [r7, #4]
90003272:	2200      	movs	r2, #0
90003274:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90003276:	687b      	ldr	r3, [r7, #4]
90003278:	2200      	movs	r2, #0
9000327a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
9000327c:	6878      	ldr	r0, [r7, #4]
9000327e:	f007 f9c8 	bl	9000a612 <HAL_TIM_PWM_Init>
}
90003282:	bf00      	nop
90003284:	3708      	adds	r7, #8
90003286:	46bd      	mov	sp, r7
90003288:	bd80      	pop	{r7, pc}
9000328a:	bf00      	nop
9000328c:	40010400 	.word	0x40010400

90003290 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90003290:	b580      	push	{r7, lr}
90003292:	b084      	sub	sp, #16
90003294:	af00      	add	r7, sp, #0
90003296:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90003298:	2300      	movs	r3, #0
9000329a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
9000329c:	687b      	ldr	r3, [r7, #4]
9000329e:	2b00      	cmp	r3, #0
900032a0:	d003      	beq.n	900032aa <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
900032a2:	f06f 0301 	mvn.w	r3, #1
900032a6:	60fb      	str	r3, [r7, #12]
900032a8:	e044      	b.n	90003334 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
900032aa:	687b      	ldr	r3, [r7, #4]
900032ac:	2234      	movs	r2, #52	@ 0x34
900032ae:	fb02 f303 	mul.w	r3, r2, r3
900032b2:	4a23      	ldr	r2, [pc, #140]	@ (90003340 <BSP_SDRAM_Init+0xb0>)
900032b4:	4413      	add	r3, r2
900032b6:	4618      	mov	r0, r3
900032b8:	f000 f892 	bl	900033e0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
900032bc:	687b      	ldr	r3, [r7, #4]
900032be:	2234      	movs	r2, #52	@ 0x34
900032c0:	fb02 f303 	mul.w	r3, r2, r3
900032c4:	4a1e      	ldr	r2, [pc, #120]	@ (90003340 <BSP_SDRAM_Init+0xb0>)
900032c6:	4413      	add	r3, r2
900032c8:	2210      	movs	r2, #16
900032ca:	2104      	movs	r1, #4
900032cc:	4618      	mov	r0, r3
900032ce:	f000 f83b 	bl	90003348 <MX_SDRAM_BANK2_Init>
900032d2:	4603      	mov	r3, r0
900032d4:	2b00      	cmp	r3, #0
900032d6:	d003      	beq.n	900032e0 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
900032d8:	f04f 33ff 	mov.w	r3, #4294967295
900032dc:	60fb      	str	r3, [r7, #12]
900032de:	e029      	b.n	90003334 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900032e0:	4b18      	ldr	r3, [pc, #96]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
900032e2:	2208      	movs	r2, #8
900032e4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
900032e6:	4b17      	ldr	r3, [pc, #92]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
900032e8:	2203      	movs	r2, #3
900032ea:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
900032ec:	4b15      	ldr	r3, [pc, #84]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
900032ee:	f240 6203 	movw	r2, #1539	@ 0x603
900032f2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
900032f4:	4b13      	ldr	r3, [pc, #76]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
900032f6:	2200      	movs	r2, #0
900032f8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
900032fa:	4b12      	ldr	r3, [pc, #72]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
900032fc:	2200      	movs	r2, #0
900032fe:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90003300:	4b10      	ldr	r3, [pc, #64]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
90003302:	2230      	movs	r2, #48	@ 0x30
90003304:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90003306:	4b0f      	ldr	r3, [pc, #60]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
90003308:	2200      	movs	r2, #0
9000330a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
9000330c:	4b0d      	ldr	r3, [pc, #52]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
9000330e:	f44f 7200 	mov.w	r2, #512	@ 0x200
90003312:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90003314:	687b      	ldr	r3, [r7, #4]
90003316:	2234      	movs	r2, #52	@ 0x34
90003318:	fb02 f303 	mul.w	r3, r2, r3
9000331c:	4a08      	ldr	r2, [pc, #32]	@ (90003340 <BSP_SDRAM_Init+0xb0>)
9000331e:	4413      	add	r3, r2
90003320:	4908      	ldr	r1, [pc, #32]	@ (90003344 <BSP_SDRAM_Init+0xb4>)
90003322:	4618      	mov	r0, r3
90003324:	f7fe fb3a 	bl	9000199c <MT48LC4M32B2_Init>
90003328:	4603      	mov	r3, r0
9000332a:	2b00      	cmp	r3, #0
9000332c:	d002      	beq.n	90003334 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
9000332e:	f06f 0304 	mvn.w	r3, #4
90003332:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90003334:	68fb      	ldr	r3, [r7, #12]
}
90003336:	4618      	mov	r0, r3
90003338:	3710      	adds	r7, #16
9000333a:	46bd      	mov	sp, r7
9000333c:	bd80      	pop	{r7, pc}
9000333e:	bf00      	nop
90003340:	2000124c 	.word	0x2000124c
90003344:	20001280 	.word	0x20001280

90003348 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90003348:	b580      	push	{r7, lr}
9000334a:	b08c      	sub	sp, #48	@ 0x30
9000334c:	af00      	add	r7, sp, #0
9000334e:	60f8      	str	r0, [r7, #12]
90003350:	60b9      	str	r1, [r7, #8]
90003352:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90003354:	4b20      	ldr	r3, [pc, #128]	@ (900033d8 <MX_SDRAM_BANK2_Init+0x90>)
90003356:	4a21      	ldr	r2, [pc, #132]	@ (900033dc <MX_SDRAM_BANK2_Init+0x94>)
90003358:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
9000335a:	68fb      	ldr	r3, [r7, #12]
9000335c:	2201      	movs	r2, #1
9000335e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90003360:	68fb      	ldr	r3, [r7, #12]
90003362:	2200      	movs	r2, #0
90003364:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90003366:	68fb      	ldr	r3, [r7, #12]
90003368:	68ba      	ldr	r2, [r7, #8]
9000336a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
9000336c:	68fb      	ldr	r3, [r7, #12]
9000336e:	687a      	ldr	r2, [r7, #4]
90003370:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90003372:	4b19      	ldr	r3, [pc, #100]	@ (900033d8 <MX_SDRAM_BANK2_Init+0x90>)
90003374:	2240      	movs	r2, #64	@ 0x40
90003376:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90003378:	68fb      	ldr	r3, [r7, #12]
9000337a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
9000337e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90003380:	68fb      	ldr	r3, [r7, #12]
90003382:	2200      	movs	r2, #0
90003384:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90003386:	68fb      	ldr	r3, [r7, #12]
90003388:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000338c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000338e:	68fb      	ldr	r3, [r7, #12]
90003390:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90003394:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90003396:	68fb      	ldr	r3, [r7, #12]
90003398:	2200      	movs	r2, #0
9000339a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
9000339c:	2302      	movs	r3, #2
9000339e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
900033a0:	2307      	movs	r3, #7
900033a2:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
900033a4:	2304      	movs	r3, #4
900033a6:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
900033a8:	2307      	movs	r3, #7
900033aa:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
900033ac:	2302      	movs	r3, #2
900033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
900033b0:	2302      	movs	r3, #2
900033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
900033b4:	2302      	movs	r3, #2
900033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900033b8:	f107 0314 	add.w	r3, r7, #20
900033bc:	4619      	mov	r1, r3
900033be:	68f8      	ldr	r0, [r7, #12]
900033c0:	f007 f884 	bl	9000a4cc <HAL_SDRAM_Init>
900033c4:	4603      	mov	r3, r0
900033c6:	2b00      	cmp	r3, #0
900033c8:	d001      	beq.n	900033ce <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
900033ca:	2301      	movs	r3, #1
900033cc:	e000      	b.n	900033d0 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
900033ce:	2300      	movs	r3, #0
}
900033d0:	4618      	mov	r0, r3
900033d2:	3730      	adds	r7, #48	@ 0x30
900033d4:	46bd      	mov	sp, r7
900033d6:	bd80      	pop	{r7, pc}
900033d8:	2000124c 	.word	0x2000124c
900033dc:	52004140 	.word	0x52004140

900033e0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
900033e0:	b580      	push	{r7, lr}
900033e2:	b08e      	sub	sp, #56	@ 0x38
900033e4:	af00      	add	r7, sp, #0
900033e6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
900033e8:	4b73      	ldr	r3, [pc, #460]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
900033ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900033ee:	4a72      	ldr	r2, [pc, #456]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
900033f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
900033f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
900033f8:	4b6f      	ldr	r3, [pc, #444]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
900033fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900033fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90003402:	623b      	str	r3, [r7, #32]
90003404:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90003406:	4b6c      	ldr	r3, [pc, #432]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003408:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000340c:	4a6a      	ldr	r2, [pc, #424]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
9000340e:	f043 0301 	orr.w	r3, r3, #1
90003412:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90003416:	4b68      	ldr	r3, [pc, #416]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003418:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000341c:	f003 0301 	and.w	r3, r3, #1
90003420:	61fb      	str	r3, [r7, #28]
90003422:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90003424:	4b64      	ldr	r3, [pc, #400]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000342a:	4a63      	ldr	r2, [pc, #396]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
9000342c:	f043 0308 	orr.w	r3, r3, #8
90003430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003434:	4b60      	ldr	r3, [pc, #384]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000343a:	f003 0308 	and.w	r3, r3, #8
9000343e:	61bb      	str	r3, [r7, #24]
90003440:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90003442:	4b5d      	ldr	r3, [pc, #372]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003448:	4a5b      	ldr	r2, [pc, #364]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
9000344a:	f043 0310 	orr.w	r3, r3, #16
9000344e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003452:	4b59      	ldr	r3, [pc, #356]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003458:	f003 0310 	and.w	r3, r3, #16
9000345c:	617b      	str	r3, [r7, #20]
9000345e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90003460:	4b55      	ldr	r3, [pc, #340]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003466:	4a54      	ldr	r2, [pc, #336]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003468:	f043 0320 	orr.w	r3, r3, #32
9000346c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003470:	4b51      	ldr	r3, [pc, #324]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003476:	f003 0320 	and.w	r3, r3, #32
9000347a:	613b      	str	r3, [r7, #16]
9000347c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
9000347e:	4b4e      	ldr	r3, [pc, #312]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003484:	4a4c      	ldr	r2, [pc, #304]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000348a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000348e:	4b4a      	ldr	r3, [pc, #296]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
90003490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90003498:	60fb      	str	r3, [r7, #12]
9000349a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000349c:	4b46      	ldr	r3, [pc, #280]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
9000349e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900034a2:	4a45      	ldr	r2, [pc, #276]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
900034a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900034a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900034ac:	4b42      	ldr	r3, [pc, #264]	@ (900035b8 <SDRAM_MspInit+0x1d8>)
900034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900034b6:	60bb      	str	r3, [r7, #8]
900034b8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900034ba:	2302      	movs	r3, #2
900034bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
900034be:	2301      	movs	r3, #1
900034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
900034c2:	2303      	movs	r3, #3
900034c4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900034c6:	230c      	movs	r3, #12
900034c8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900034ca:	f24c 7303 	movw	r3, #50947	@ 0xc703
900034ce:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900034d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900034d4:	4619      	mov	r1, r3
900034d6:	4839      	ldr	r0, [pc, #228]	@ (900035bc <SDRAM_MspInit+0x1dc>)
900034d8:	f000 ff3c 	bl	90004354 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900034dc:	f64f 7383 	movw	r3, #65411	@ 0xff83
900034e0:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900034e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900034e6:	4619      	mov	r1, r3
900034e8:	4835      	ldr	r0, [pc, #212]	@ (900035c0 <SDRAM_MspInit+0x1e0>)
900034ea:	f000 ff33 	bl	90004354 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900034ee:	f64f 033f 	movw	r3, #63551	@ 0xf83f
900034f2:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900034f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900034f8:	4619      	mov	r1, r3
900034fa:	4832      	ldr	r0, [pc, #200]	@ (900035c4 <SDRAM_MspInit+0x1e4>)
900034fc:	f000 ff2a 	bl	90004354 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90003500:	f248 1333 	movw	r3, #33075	@ 0x8133
90003504:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90003506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000350a:	4619      	mov	r1, r3
9000350c:	482e      	ldr	r0, [pc, #184]	@ (900035c8 <SDRAM_MspInit+0x1e8>)
9000350e:	f000 ff21 	bl	90004354 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90003512:	23e0      	movs	r3, #224	@ 0xe0
90003514:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90003516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000351a:	4619      	mov	r1, r3
9000351c:	482b      	ldr	r0, [pc, #172]	@ (900035cc <SDRAM_MspInit+0x1ec>)
9000351e:	f000 ff19 	bl	90004354 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90003522:	4b2b      	ldr	r3, [pc, #172]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003524:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90003528:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
9000352a:	4b29      	ldr	r3, [pc, #164]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000352c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90003530:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90003532:	4b27      	ldr	r3, [pc, #156]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003534:	2280      	movs	r2, #128	@ 0x80
90003536:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90003538:	4b25      	ldr	r3, [pc, #148]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000353a:	2200      	movs	r2, #0
9000353c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
9000353e:	4b24      	ldr	r3, [pc, #144]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003540:	f240 2202 	movw	r2, #514	@ 0x202
90003544:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90003546:	4b22      	ldr	r3, [pc, #136]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003548:	f640 0208 	movw	r2, #2056	@ 0x808
9000354c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000354e:	4b20      	ldr	r3, [pc, #128]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003550:	2220      	movs	r2, #32
90003552:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90003554:	4b1e      	ldr	r3, [pc, #120]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003556:	2280      	movs	r2, #128	@ 0x80
90003558:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000355a:	4b1d      	ldr	r3, [pc, #116]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000355c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90003560:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90003562:	4b1b      	ldr	r3, [pc, #108]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003564:	2200      	movs	r2, #0
90003566:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90003568:	4b19      	ldr	r3, [pc, #100]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000356a:	2200      	movs	r2, #0
9000356c:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
9000356e:	4b18      	ldr	r3, [pc, #96]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003570:	2280      	movs	r2, #128	@ 0x80
90003572:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90003574:	4b16      	ldr	r3, [pc, #88]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003576:	2200      	movs	r2, #0
90003578:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
9000357a:	4b15      	ldr	r3, [pc, #84]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000357c:	2200      	movs	r2, #0
9000357e:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90003580:	4b13      	ldr	r3, [pc, #76]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003582:	4a14      	ldr	r2, [pc, #80]	@ (900035d4 <SDRAM_MspInit+0x1f4>)
90003584:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90003586:	4b14      	ldr	r3, [pc, #80]	@ (900035d8 <SDRAM_MspInit+0x1f8>)
90003588:	4a11      	ldr	r2, [pc, #68]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000358a:	631a      	str	r2, [r3, #48]	@ 0x30
9000358c:	4b10      	ldr	r3, [pc, #64]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000358e:	4a12      	ldr	r2, [pc, #72]	@ (900035d8 <SDRAM_MspInit+0x1f8>)
90003590:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90003592:	480f      	ldr	r0, [pc, #60]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
90003594:	f004 f898 	bl	900076c8 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90003598:	480d      	ldr	r0, [pc, #52]	@ (900035d0 <SDRAM_MspInit+0x1f0>)
9000359a:	f004 f849 	bl	90007630 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
9000359e:	2200      	movs	r2, #0
900035a0:	210f      	movs	r1, #15
900035a2:	207a      	movs	r0, #122	@ 0x7a
900035a4:	f000 fb53 	bl	90003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
900035a8:	207a      	movs	r0, #122	@ 0x7a
900035aa:	f000 fb6a 	bl	90003c82 <HAL_NVIC_EnableIRQ>
}
900035ae:	bf00      	nop
900035b0:	3738      	adds	r7, #56	@ 0x38
900035b2:	46bd      	mov	sp, r7
900035b4:	bd80      	pop	{r7, pc}
900035b6:	bf00      	nop
900035b8:	58024400 	.word	0x58024400
900035bc:	58020c00 	.word	0x58020c00
900035c0:	58021000 	.word	0x58021000
900035c4:	58021400 	.word	0x58021400
900035c8:	58021800 	.word	0x58021800
900035cc:	58021c00 	.word	0x58021c00
900035d0:	200012a0 	.word	0x200012a0
900035d4:	52000040 	.word	0x52000040
900035d8:	2000124c 	.word	0x2000124c

900035dc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
900035dc:	b580      	push	{r7, lr}
900035de:	b088      	sub	sp, #32
900035e0:	af00      	add	r7, sp, #0
900035e2:	6078      	str	r0, [r7, #4]
900035e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900035e6:	2300      	movs	r3, #0
900035e8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
900035ea:	687b      	ldr	r3, [r7, #4]
900035ec:	2b00      	cmp	r3, #0
900035ee:	d11c      	bne.n	9000362a <BSP_TS_Init+0x4e>
900035f0:	683b      	ldr	r3, [r7, #0]
900035f2:	681b      	ldr	r3, [r3, #0]
900035f4:	2b00      	cmp	r3, #0
900035f6:	d018      	beq.n	9000362a <BSP_TS_Init+0x4e>
900035f8:	683b      	ldr	r3, [r7, #0]
900035fa:	681b      	ldr	r3, [r3, #0]
900035fc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
90003600:	d813      	bhi.n	9000362a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90003602:	683b      	ldr	r3, [r7, #0]
90003604:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90003606:	2b00      	cmp	r3, #0
90003608:	d00f      	beq.n	9000362a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
9000360a:	683b      	ldr	r3, [r7, #0]
9000360c:	685b      	ldr	r3, [r3, #4]
9000360e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
90003612:	d80a      	bhi.n	9000362a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90003614:	683b      	ldr	r3, [r7, #0]
90003616:	68da      	ldr	r2, [r3, #12]
90003618:	683b      	ldr	r3, [r7, #0]
9000361a:	6819      	ldr	r1, [r3, #0]
9000361c:	683b      	ldr	r3, [r7, #0]
9000361e:	685b      	ldr	r3, [r3, #4]
90003620:	428b      	cmp	r3, r1
90003622:	bf28      	it	cs
90003624:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90003626:	429a      	cmp	r2, r3
90003628:	d903      	bls.n	90003632 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000362a:	f06f 0301 	mvn.w	r3, #1
9000362e:	61fb      	str	r3, [r7, #28]
90003630:	e06e      	b.n	90003710 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
90003632:	6878      	ldr	r0, [r7, #4]
90003634:	f000 f878 	bl	90003728 <FT5336_Probe>
90003638:	4603      	mov	r3, r0
9000363a:	2b00      	cmp	r3, #0
9000363c:	d003      	beq.n	90003646 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
9000363e:	f04f 33ff 	mov.w	r3, #4294967295
90003642:	61fb      	str	r3, [r7, #28]
90003644:	e064      	b.n	90003710 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90003646:	683b      	ldr	r3, [r7, #0]
90003648:	681a      	ldr	r2, [r3, #0]
9000364a:	4934      	ldr	r1, [pc, #208]	@ (9000371c <BSP_TS_Init+0x140>)
9000364c:	687b      	ldr	r3, [r7, #4]
9000364e:	019b      	lsls	r3, r3, #6
90003650:	440b      	add	r3, r1
90003652:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
90003654:	683b      	ldr	r3, [r7, #0]
90003656:	685a      	ldr	r2, [r3, #4]
90003658:	4930      	ldr	r1, [pc, #192]	@ (9000371c <BSP_TS_Init+0x140>)
9000365a:	687b      	ldr	r3, [r7, #4]
9000365c:	019b      	lsls	r3, r3, #6
9000365e:	440b      	add	r3, r1
90003660:	3304      	adds	r3, #4
90003662:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
90003664:	683b      	ldr	r3, [r7, #0]
90003666:	689a      	ldr	r2, [r3, #8]
90003668:	492c      	ldr	r1, [pc, #176]	@ (9000371c <BSP_TS_Init+0x140>)
9000366a:	687b      	ldr	r3, [r7, #4]
9000366c:	019b      	lsls	r3, r3, #6
9000366e:	440b      	add	r3, r1
90003670:	3308      	adds	r3, #8
90003672:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
90003674:	683b      	ldr	r3, [r7, #0]
90003676:	68da      	ldr	r2, [r3, #12]
90003678:	4928      	ldr	r1, [pc, #160]	@ (9000371c <BSP_TS_Init+0x140>)
9000367a:	687b      	ldr	r3, [r7, #4]
9000367c:	019b      	lsls	r3, r3, #6
9000367e:	440b      	add	r3, r1
90003680:	330c      	adds	r3, #12
90003682:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90003684:	4b26      	ldr	r3, [pc, #152]	@ (90003720 <BSP_TS_Init+0x144>)
90003686:	681b      	ldr	r3, [r3, #0]
90003688:	69db      	ldr	r3, [r3, #28]
9000368a:	4926      	ldr	r1, [pc, #152]	@ (90003724 <BSP_TS_Init+0x148>)
9000368c:	687a      	ldr	r2, [r7, #4]
9000368e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90003692:	f107 010c 	add.w	r1, r7, #12
90003696:	4610      	mov	r0, r2
90003698:	4798      	blx	r3
9000369a:	4603      	mov	r3, r0
9000369c:	2b00      	cmp	r3, #0
9000369e:	da03      	bge.n	900036a8 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
900036a0:	f06f 0304 	mvn.w	r3, #4
900036a4:	61fb      	str	r3, [r7, #28]
900036a6:	e033      	b.n	90003710 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
900036a8:	693a      	ldr	r2, [r7, #16]
900036aa:	491c      	ldr	r1, [pc, #112]	@ (9000371c <BSP_TS_Init+0x140>)
900036ac:	687b      	ldr	r3, [r7, #4]
900036ae:	019b      	lsls	r3, r3, #6
900036b0:	440b      	add	r3, r1
900036b2:	3310      	adds	r3, #16
900036b4:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
900036b6:	697a      	ldr	r2, [r7, #20]
900036b8:	4918      	ldr	r1, [pc, #96]	@ (9000371c <BSP_TS_Init+0x140>)
900036ba:	687b      	ldr	r3, [r7, #4]
900036bc:	019b      	lsls	r3, r3, #6
900036be:	440b      	add	r3, r1
900036c0:	3314      	adds	r3, #20
900036c2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
900036c4:	2300      	movs	r3, #0
900036c6:	61bb      	str	r3, [r7, #24]
900036c8:	e01f      	b.n	9000370a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900036ca:	683b      	ldr	r3, [r7, #0]
900036cc:	681a      	ldr	r2, [r3, #0]
900036ce:	683b      	ldr	r3, [r7, #0]
900036d0:	68db      	ldr	r3, [r3, #12]
900036d2:	4413      	add	r3, r2
900036d4:	1c5a      	adds	r2, r3, #1
900036d6:	4811      	ldr	r0, [pc, #68]	@ (9000371c <BSP_TS_Init+0x140>)
900036d8:	687b      	ldr	r3, [r7, #4]
900036da:	0119      	lsls	r1, r3, #4
900036dc:	69bb      	ldr	r3, [r7, #24]
900036de:	440b      	add	r3, r1
900036e0:	3306      	adds	r3, #6
900036e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900036e6:	683b      	ldr	r3, [r7, #0]
900036e8:	685a      	ldr	r2, [r3, #4]
900036ea:	683b      	ldr	r3, [r7, #0]
900036ec:	68db      	ldr	r3, [r3, #12]
900036ee:	4413      	add	r3, r2
900036f0:	1c5a      	adds	r2, r3, #1
900036f2:	480a      	ldr	r0, [pc, #40]	@ (9000371c <BSP_TS_Init+0x140>)
900036f4:	687b      	ldr	r3, [r7, #4]
900036f6:	0119      	lsls	r1, r3, #4
900036f8:	69bb      	ldr	r3, [r7, #24]
900036fa:	440b      	add	r3, r1
900036fc:	330a      	adds	r3, #10
900036fe:	009b      	lsls	r3, r3, #2
90003700:	4403      	add	r3, r0
90003702:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
90003704:	69bb      	ldr	r3, [r7, #24]
90003706:	3301      	adds	r3, #1
90003708:	61bb      	str	r3, [r7, #24]
9000370a:	69bb      	ldr	r3, [r7, #24]
9000370c:	2b04      	cmp	r3, #4
9000370e:	d9dc      	bls.n	900036ca <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
90003710:	69fb      	ldr	r3, [r7, #28]
}
90003712:	4618      	mov	r0, r3
90003714:	3720      	adds	r7, #32
90003716:	46bd      	mov	sp, r7
90003718:	bd80      	pop	{r7, pc}
9000371a:	bf00      	nop
9000371c:	20001314 	.word	0x20001314
90003720:	2000130c 	.word	0x2000130c
90003724:	20001310 	.word	0x20001310

90003728 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
90003728:	b580      	push	{r7, lr}
9000372a:	b08a      	sub	sp, #40	@ 0x28
9000372c:	af00      	add	r7, sp, #0
9000372e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90003730:	2300      	movs	r3, #0
90003732:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
90003734:	2300      	movs	r3, #0
90003736:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90003738:	2370      	movs	r3, #112	@ 0x70
9000373a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
9000373c:	4b23      	ldr	r3, [pc, #140]	@ (900037cc <FT5336_Probe+0xa4>)
9000373e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90003740:	4b23      	ldr	r3, [pc, #140]	@ (900037d0 <FT5336_Probe+0xa8>)
90003742:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90003744:	4b23      	ldr	r3, [pc, #140]	@ (900037d4 <FT5336_Probe+0xac>)
90003746:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90003748:	4b23      	ldr	r3, [pc, #140]	@ (900037d8 <FT5336_Probe+0xb0>)
9000374a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
9000374c:	4b23      	ldr	r3, [pc, #140]	@ (900037dc <FT5336_Probe+0xb4>)
9000374e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90003750:	f107 030c 	add.w	r3, r7, #12
90003754:	4619      	mov	r1, r3
90003756:	4822      	ldr	r0, [pc, #136]	@ (900037e0 <FT5336_Probe+0xb8>)
90003758:	f7fd fdc0 	bl	900012dc <FT5336_RegisterBusIO>
9000375c:	4603      	mov	r3, r0
9000375e:	2b00      	cmp	r3, #0
90003760:	d003      	beq.n	9000376a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
90003762:	f06f 0307 	mvn.w	r3, #7
90003766:	627b      	str	r3, [r7, #36]	@ 0x24
90003768:	e02a      	b.n	900037c0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
9000376a:	f107 0308 	add.w	r3, r7, #8
9000376e:	4619      	mov	r1, r3
90003770:	481b      	ldr	r0, [pc, #108]	@ (900037e0 <FT5336_Probe+0xb8>)
90003772:	f7fd fead 	bl	900014d0 <FT5336_ReadID>
90003776:	4603      	mov	r3, r0
90003778:	2b00      	cmp	r3, #0
9000377a:	d003      	beq.n	90003784 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
9000377c:	f06f 0304 	mvn.w	r3, #4
90003780:	627b      	str	r3, [r7, #36]	@ 0x24
90003782:	e01d      	b.n	900037c0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
90003784:	68bb      	ldr	r3, [r7, #8]
90003786:	2b51      	cmp	r3, #81	@ 0x51
90003788:	d003      	beq.n	90003792 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
9000378a:	f06f 0306 	mvn.w	r3, #6
9000378e:	627b      	str	r3, [r7, #36]	@ 0x24
90003790:	e016      	b.n	900037c0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
90003792:	4a14      	ldr	r2, [pc, #80]	@ (900037e4 <FT5336_Probe+0xbc>)
90003794:	687b      	ldr	r3, [r7, #4]
90003796:	4912      	ldr	r1, [pc, #72]	@ (900037e0 <FT5336_Probe+0xb8>)
90003798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
9000379c:	4b12      	ldr	r3, [pc, #72]	@ (900037e8 <FT5336_Probe+0xc0>)
9000379e:	4a13      	ldr	r2, [pc, #76]	@ (900037ec <FT5336_Probe+0xc4>)
900037a0:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
900037a2:	4b11      	ldr	r3, [pc, #68]	@ (900037e8 <FT5336_Probe+0xc0>)
900037a4:	681b      	ldr	r3, [r3, #0]
900037a6:	681b      	ldr	r3, [r3, #0]
900037a8:	490e      	ldr	r1, [pc, #56]	@ (900037e4 <FT5336_Probe+0xbc>)
900037aa:	687a      	ldr	r2, [r7, #4]
900037ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900037b0:	4610      	mov	r0, r2
900037b2:	4798      	blx	r3
900037b4:	4603      	mov	r3, r0
900037b6:	2b00      	cmp	r3, #0
900037b8:	d002      	beq.n	900037c0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
900037ba:	f06f 0304 	mvn.w	r3, #4
900037be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
900037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
900037c2:	4618      	mov	r0, r3
900037c4:	3728      	adds	r7, #40	@ 0x28
900037c6:	46bd      	mov	sp, r7
900037c8:	bd80      	pop	{r7, pc}
900037ca:	bf00      	nop
900037cc:	90001c71 	.word	0x90001c71
900037d0:	90001ce5 	.word	0x90001ce5
900037d4:	90001e0d 	.word	0x90001e0d
900037d8:	90001db1 	.word	0x90001db1
900037dc:	90001e69 	.word	0x90001e69
900037e0:	20001354 	.word	0x20001354
900037e4:	20001310 	.word	0x20001310
900037e8:	2000130c 	.word	0x2000130c
900037ec:	20000050 	.word	0x20000050

900037f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
900037f0:	b480      	push	{r7}
900037f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900037f4:	4b29      	ldr	r3, [pc, #164]	@ (9000389c <SystemInit+0xac>)
900037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900037fa:	4a28      	ldr	r2, [pc, #160]	@ (9000389c <SystemInit+0xac>)
900037fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90003800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90003804:	4b26      	ldr	r3, [pc, #152]	@ (900038a0 <SystemInit+0xb0>)
90003806:	681b      	ldr	r3, [r3, #0]
90003808:	4a25      	ldr	r2, [pc, #148]	@ (900038a0 <SystemInit+0xb0>)
9000380a:	f043 0301 	orr.w	r3, r3, #1
9000380e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90003810:	4b23      	ldr	r3, [pc, #140]	@ (900038a0 <SystemInit+0xb0>)
90003812:	2200      	movs	r2, #0
90003814:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90003816:	4b22      	ldr	r3, [pc, #136]	@ (900038a0 <SystemInit+0xb0>)
90003818:	681a      	ldr	r2, [r3, #0]
9000381a:	4921      	ldr	r1, [pc, #132]	@ (900038a0 <SystemInit+0xb0>)
9000381c:	4b21      	ldr	r3, [pc, #132]	@ (900038a4 <SystemInit+0xb4>)
9000381e:	4013      	ands	r3, r2
90003820:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90003822:	4b1f      	ldr	r3, [pc, #124]	@ (900038a0 <SystemInit+0xb0>)
90003824:	2200      	movs	r2, #0
90003826:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003828:	4b1d      	ldr	r3, [pc, #116]	@ (900038a0 <SystemInit+0xb0>)
9000382a:	2200      	movs	r2, #0
9000382c:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
9000382e:	4b1c      	ldr	r3, [pc, #112]	@ (900038a0 <SystemInit+0xb0>)
90003830:	2200      	movs	r2, #0
90003832:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90003834:	4b1a      	ldr	r3, [pc, #104]	@ (900038a0 <SystemInit+0xb0>)
90003836:	2200      	movs	r2, #0
90003838:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
9000383a:	4b19      	ldr	r3, [pc, #100]	@ (900038a0 <SystemInit+0xb0>)
9000383c:	2200      	movs	r2, #0
9000383e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003840:	4b17      	ldr	r3, [pc, #92]	@ (900038a0 <SystemInit+0xb0>)
90003842:	2200      	movs	r2, #0
90003844:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90003846:	4b16      	ldr	r3, [pc, #88]	@ (900038a0 <SystemInit+0xb0>)
90003848:	2200      	movs	r2, #0
9000384a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
9000384c:	4b14      	ldr	r3, [pc, #80]	@ (900038a0 <SystemInit+0xb0>)
9000384e:	2200      	movs	r2, #0
90003850:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90003852:	4b13      	ldr	r3, [pc, #76]	@ (900038a0 <SystemInit+0xb0>)
90003854:	2200      	movs	r2, #0
90003856:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90003858:	4b11      	ldr	r3, [pc, #68]	@ (900038a0 <SystemInit+0xb0>)
9000385a:	2200      	movs	r2, #0
9000385c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
9000385e:	4b10      	ldr	r3, [pc, #64]	@ (900038a0 <SystemInit+0xb0>)
90003860:	2200      	movs	r2, #0
90003862:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90003864:	4b0e      	ldr	r3, [pc, #56]	@ (900038a0 <SystemInit+0xb0>)
90003866:	681b      	ldr	r3, [r3, #0]
90003868:	4a0d      	ldr	r2, [pc, #52]	@ (900038a0 <SystemInit+0xb0>)
9000386a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000386e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90003870:	4b0b      	ldr	r3, [pc, #44]	@ (900038a0 <SystemInit+0xb0>)
90003872:	2200      	movs	r2, #0
90003874:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90003876:	4b0c      	ldr	r3, [pc, #48]	@ (900038a8 <SystemInit+0xb8>)
90003878:	681a      	ldr	r2, [r3, #0]
9000387a:	4b0c      	ldr	r3, [pc, #48]	@ (900038ac <SystemInit+0xbc>)
9000387c:	4013      	ands	r3, r2
9000387e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003882:	d202      	bcs.n	9000388a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90003884:	4b0a      	ldr	r3, [pc, #40]	@ (900038b0 <SystemInit+0xc0>)
90003886:	2201      	movs	r2, #1
90003888:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
9000388a:	4b04      	ldr	r3, [pc, #16]	@ (9000389c <SystemInit+0xac>)
9000388c:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90003890:	609a      	str	r2, [r3, #8]
#endif  


}
90003892:	bf00      	nop
90003894:	46bd      	mov	sp, r7
90003896:	f85d 7b04 	ldr.w	r7, [sp], #4
9000389a:	4770      	bx	lr
9000389c:	e000ed00 	.word	0xe000ed00
900038a0:	58024400 	.word	0x58024400
900038a4:	eaf6ed7f 	.word	0xeaf6ed7f
900038a8:	5c001000 	.word	0x5c001000
900038ac:	ffff0000 	.word	0xffff0000
900038b0:	51008108 	.word	0x51008108

900038b4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
900038b4:	b480      	push	{r7}
900038b6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
900038b8:	4b09      	ldr	r3, [pc, #36]	@ (900038e0 <ExitRun0Mode+0x2c>)
900038ba:	68db      	ldr	r3, [r3, #12]
900038bc:	4a08      	ldr	r2, [pc, #32]	@ (900038e0 <ExitRun0Mode+0x2c>)
900038be:	f043 0302 	orr.w	r3, r3, #2
900038c2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
900038c4:	bf00      	nop
900038c6:	4b06      	ldr	r3, [pc, #24]	@ (900038e0 <ExitRun0Mode+0x2c>)
900038c8:	685b      	ldr	r3, [r3, #4]
900038ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900038ce:	2b00      	cmp	r3, #0
900038d0:	d0f9      	beq.n	900038c6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
900038d2:	bf00      	nop
900038d4:	bf00      	nop
900038d6:	46bd      	mov	sp, r7
900038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900038dc:	4770      	bx	lr
900038de:	bf00      	nop
900038e0:	58024800 	.word	0x58024800

900038e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900038e4:	b580      	push	{r7, lr}
900038e6:	b082      	sub	sp, #8
900038e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900038ea:	2003      	movs	r0, #3
900038ec:	f000 f9a4 	bl	90003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900038f0:	f004 fdea 	bl	900084c8 <HAL_RCC_GetSysClockFreq>
900038f4:	4602      	mov	r2, r0
900038f6:	4b15      	ldr	r3, [pc, #84]	@ (9000394c <HAL_Init+0x68>)
900038f8:	699b      	ldr	r3, [r3, #24]
900038fa:	0a1b      	lsrs	r3, r3, #8
900038fc:	f003 030f 	and.w	r3, r3, #15
90003900:	4913      	ldr	r1, [pc, #76]	@ (90003950 <HAL_Init+0x6c>)
90003902:	5ccb      	ldrb	r3, [r1, r3]
90003904:	f003 031f 	and.w	r3, r3, #31
90003908:	fa22 f303 	lsr.w	r3, r2, r3
9000390c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000390e:	4b0f      	ldr	r3, [pc, #60]	@ (9000394c <HAL_Init+0x68>)
90003910:	699b      	ldr	r3, [r3, #24]
90003912:	f003 030f 	and.w	r3, r3, #15
90003916:	4a0e      	ldr	r2, [pc, #56]	@ (90003950 <HAL_Init+0x6c>)
90003918:	5cd3      	ldrb	r3, [r2, r3]
9000391a:	f003 031f 	and.w	r3, r3, #31
9000391e:	687a      	ldr	r2, [r7, #4]
90003920:	fa22 f303 	lsr.w	r3, r2, r3
90003924:	4a0b      	ldr	r2, [pc, #44]	@ (90003954 <HAL_Init+0x70>)
90003926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003928:	4a0b      	ldr	r2, [pc, #44]	@ (90003958 <HAL_Init+0x74>)
9000392a:	687b      	ldr	r3, [r7, #4]
9000392c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000392e:	200f      	movs	r0, #15
90003930:	f000 f81c 	bl	9000396c <HAL_InitTick>
90003934:	4603      	mov	r3, r0
90003936:	2b00      	cmp	r3, #0
90003938:	d001      	beq.n	9000393e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
9000393a:	2301      	movs	r3, #1
9000393c:	e002      	b.n	90003944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
9000393e:	f000 f80d 	bl	9000395c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90003942:	2300      	movs	r3, #0
}
90003944:	4618      	mov	r0, r3
90003946:	3708      	adds	r7, #8
90003948:	46bd      	mov	sp, r7
9000394a:	bd80      	pop	{r7, pc}
9000394c:	58024400 	.word	0x58024400
90003950:	9000dc4c 	.word	0x9000dc4c
90003954:	2000008c 	.word	0x2000008c
90003958:	20000088 	.word	0x20000088

9000395c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
9000395c:	b480      	push	{r7}
9000395e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90003960:	bf00      	nop
90003962:	46bd      	mov	sp, r7
90003964:	f85d 7b04 	ldr.w	r7, [sp], #4
90003968:	4770      	bx	lr
	...

9000396c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
9000396c:	b580      	push	{r7, lr}
9000396e:	b082      	sub	sp, #8
90003970:	af00      	add	r7, sp, #0
90003972:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90003974:	4b15      	ldr	r3, [pc, #84]	@ (900039cc <HAL_InitTick+0x60>)
90003976:	781b      	ldrb	r3, [r3, #0]
90003978:	2b00      	cmp	r3, #0
9000397a:	d101      	bne.n	90003980 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
9000397c:	2301      	movs	r3, #1
9000397e:	e021      	b.n	900039c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90003980:	4b13      	ldr	r3, [pc, #76]	@ (900039d0 <HAL_InitTick+0x64>)
90003982:	681a      	ldr	r2, [r3, #0]
90003984:	4b11      	ldr	r3, [pc, #68]	@ (900039cc <HAL_InitTick+0x60>)
90003986:	781b      	ldrb	r3, [r3, #0]
90003988:	4619      	mov	r1, r3
9000398a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000398e:	fbb3 f3f1 	udiv	r3, r3, r1
90003992:	fbb2 f3f3 	udiv	r3, r2, r3
90003996:	4618      	mov	r0, r3
90003998:	f000 f981 	bl	90003c9e <HAL_SYSTICK_Config>
9000399c:	4603      	mov	r3, r0
9000399e:	2b00      	cmp	r3, #0
900039a0:	d001      	beq.n	900039a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
900039a2:	2301      	movs	r3, #1
900039a4:	e00e      	b.n	900039c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900039a6:	687b      	ldr	r3, [r7, #4]
900039a8:	2b0f      	cmp	r3, #15
900039aa:	d80a      	bhi.n	900039c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900039ac:	2200      	movs	r2, #0
900039ae:	6879      	ldr	r1, [r7, #4]
900039b0:	f04f 30ff 	mov.w	r0, #4294967295
900039b4:	f000 f94b 	bl	90003c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
900039b8:	4a06      	ldr	r2, [pc, #24]	@ (900039d4 <HAL_InitTick+0x68>)
900039ba:	687b      	ldr	r3, [r7, #4]
900039bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
900039be:	2300      	movs	r3, #0
900039c0:	e000      	b.n	900039c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
900039c2:	2301      	movs	r3, #1
}
900039c4:	4618      	mov	r0, r3
900039c6:	3708      	adds	r7, #8
900039c8:	46bd      	mov	sp, r7
900039ca:	bd80      	pop	{r7, pc}
900039cc:	20000094 	.word	0x20000094
900039d0:	20000088 	.word	0x20000088
900039d4:	20000090 	.word	0x20000090

900039d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
900039d8:	b480      	push	{r7}
900039da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
900039dc:	4b06      	ldr	r3, [pc, #24]	@ (900039f8 <HAL_IncTick+0x20>)
900039de:	781b      	ldrb	r3, [r3, #0]
900039e0:	461a      	mov	r2, r3
900039e2:	4b06      	ldr	r3, [pc, #24]	@ (900039fc <HAL_IncTick+0x24>)
900039e4:	681b      	ldr	r3, [r3, #0]
900039e6:	4413      	add	r3, r2
900039e8:	4a04      	ldr	r2, [pc, #16]	@ (900039fc <HAL_IncTick+0x24>)
900039ea:	6013      	str	r3, [r2, #0]
}
900039ec:	bf00      	nop
900039ee:	46bd      	mov	sp, r7
900039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900039f4:	4770      	bx	lr
900039f6:	bf00      	nop
900039f8:	20000094 	.word	0x20000094
900039fc:	2000137c 	.word	0x2000137c

90003a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90003a00:	b480      	push	{r7}
90003a02:	af00      	add	r7, sp, #0
  return uwTick;
90003a04:	4b03      	ldr	r3, [pc, #12]	@ (90003a14 <HAL_GetTick+0x14>)
90003a06:	681b      	ldr	r3, [r3, #0]
}
90003a08:	4618      	mov	r0, r3
90003a0a:	46bd      	mov	sp, r7
90003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a10:	4770      	bx	lr
90003a12:	bf00      	nop
90003a14:	2000137c 	.word	0x2000137c

90003a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90003a18:	b580      	push	{r7, lr}
90003a1a:	b084      	sub	sp, #16
90003a1c:	af00      	add	r7, sp, #0
90003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90003a20:	f7ff ffee 	bl	90003a00 <HAL_GetTick>
90003a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90003a26:	687b      	ldr	r3, [r7, #4]
90003a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90003a2a:	68fb      	ldr	r3, [r7, #12]
90003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
90003a30:	d005      	beq.n	90003a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90003a32:	4b0a      	ldr	r3, [pc, #40]	@ (90003a5c <HAL_Delay+0x44>)
90003a34:	781b      	ldrb	r3, [r3, #0]
90003a36:	461a      	mov	r2, r3
90003a38:	68fb      	ldr	r3, [r7, #12]
90003a3a:	4413      	add	r3, r2
90003a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90003a3e:	bf00      	nop
90003a40:	f7ff ffde 	bl	90003a00 <HAL_GetTick>
90003a44:	4602      	mov	r2, r0
90003a46:	68bb      	ldr	r3, [r7, #8]
90003a48:	1ad3      	subs	r3, r2, r3
90003a4a:	68fa      	ldr	r2, [r7, #12]
90003a4c:	429a      	cmp	r2, r3
90003a4e:	d8f7      	bhi.n	90003a40 <HAL_Delay+0x28>
  {
  }
}
90003a50:	bf00      	nop
90003a52:	bf00      	nop
90003a54:	3710      	adds	r7, #16
90003a56:	46bd      	mov	sp, r7
90003a58:	bd80      	pop	{r7, pc}
90003a5a:	bf00      	nop
90003a5c:	20000094 	.word	0x20000094

90003a60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003a60:	b480      	push	{r7}
90003a62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003a64:	4b03      	ldr	r3, [pc, #12]	@ (90003a74 <HAL_GetREVID+0x14>)
90003a66:	681b      	ldr	r3, [r3, #0]
90003a68:	0c1b      	lsrs	r3, r3, #16
}
90003a6a:	4618      	mov	r0, r3
90003a6c:	46bd      	mov	sp, r7
90003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a72:	4770      	bx	lr
90003a74:	5c001000 	.word	0x5c001000

90003a78 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90003a78:	b480      	push	{r7}
90003a7a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90003a7c:	4b05      	ldr	r3, [pc, #20]	@ (90003a94 <HAL_EnableCompensationCell+0x1c>)
90003a7e:	6a1b      	ldr	r3, [r3, #32]
90003a80:	4a04      	ldr	r2, [pc, #16]	@ (90003a94 <HAL_EnableCompensationCell+0x1c>)
90003a82:	f043 0301 	orr.w	r3, r3, #1
90003a86:	6213      	str	r3, [r2, #32]
}
90003a88:	bf00      	nop
90003a8a:	46bd      	mov	sp, r7
90003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a90:	4770      	bx	lr
90003a92:	bf00      	nop
90003a94:	58000400 	.word	0x58000400

90003a98 <__NVIC_SetPriorityGrouping>:
{
90003a98:	b480      	push	{r7}
90003a9a:	b085      	sub	sp, #20
90003a9c:	af00      	add	r7, sp, #0
90003a9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003aa0:	687b      	ldr	r3, [r7, #4]
90003aa2:	f003 0307 	and.w	r3, r3, #7
90003aa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (90003ad8 <__NVIC_SetPriorityGrouping+0x40>)
90003aaa:	68db      	ldr	r3, [r3, #12]
90003aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90003aae:	68ba      	ldr	r2, [r7, #8]
90003ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003ab4:	4013      	ands	r3, r2
90003ab6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003ab8:	68fb      	ldr	r3, [r7, #12]
90003aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003abc:	68bb      	ldr	r3, [r7, #8]
90003abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003ac0:	4b06      	ldr	r3, [pc, #24]	@ (90003adc <__NVIC_SetPriorityGrouping+0x44>)
90003ac2:	4313      	orrs	r3, r2
90003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003ac6:	4a04      	ldr	r2, [pc, #16]	@ (90003ad8 <__NVIC_SetPriorityGrouping+0x40>)
90003ac8:	68bb      	ldr	r3, [r7, #8]
90003aca:	60d3      	str	r3, [r2, #12]
}
90003acc:	bf00      	nop
90003ace:	3714      	adds	r7, #20
90003ad0:	46bd      	mov	sp, r7
90003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ad6:	4770      	bx	lr
90003ad8:	e000ed00 	.word	0xe000ed00
90003adc:	05fa0000 	.word	0x05fa0000

90003ae0 <__NVIC_GetPriorityGrouping>:
{
90003ae0:	b480      	push	{r7}
90003ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003ae4:	4b04      	ldr	r3, [pc, #16]	@ (90003af8 <__NVIC_GetPriorityGrouping+0x18>)
90003ae6:	68db      	ldr	r3, [r3, #12]
90003ae8:	0a1b      	lsrs	r3, r3, #8
90003aea:	f003 0307 	and.w	r3, r3, #7
}
90003aee:	4618      	mov	r0, r3
90003af0:	46bd      	mov	sp, r7
90003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
90003af6:	4770      	bx	lr
90003af8:	e000ed00 	.word	0xe000ed00

90003afc <__NVIC_EnableIRQ>:
{
90003afc:	b480      	push	{r7}
90003afe:	b083      	sub	sp, #12
90003b00:	af00      	add	r7, sp, #0
90003b02:	4603      	mov	r3, r0
90003b04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003b0a:	2b00      	cmp	r3, #0
90003b0c:	db0b      	blt.n	90003b26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90003b0e:	88fb      	ldrh	r3, [r7, #6]
90003b10:	f003 021f 	and.w	r2, r3, #31
90003b14:	4907      	ldr	r1, [pc, #28]	@ (90003b34 <__NVIC_EnableIRQ+0x38>)
90003b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003b1a:	095b      	lsrs	r3, r3, #5
90003b1c:	2001      	movs	r0, #1
90003b1e:	fa00 f202 	lsl.w	r2, r0, r2
90003b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90003b26:	bf00      	nop
90003b28:	370c      	adds	r7, #12
90003b2a:	46bd      	mov	sp, r7
90003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b30:	4770      	bx	lr
90003b32:	bf00      	nop
90003b34:	e000e100 	.word	0xe000e100

90003b38 <__NVIC_SetPriority>:
{
90003b38:	b480      	push	{r7}
90003b3a:	b083      	sub	sp, #12
90003b3c:	af00      	add	r7, sp, #0
90003b3e:	4603      	mov	r3, r0
90003b40:	6039      	str	r1, [r7, #0]
90003b42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003b48:	2b00      	cmp	r3, #0
90003b4a:	db0a      	blt.n	90003b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003b4c:	683b      	ldr	r3, [r7, #0]
90003b4e:	b2da      	uxtb	r2, r3
90003b50:	490c      	ldr	r1, [pc, #48]	@ (90003b84 <__NVIC_SetPriority+0x4c>)
90003b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003b56:	0112      	lsls	r2, r2, #4
90003b58:	b2d2      	uxtb	r2, r2
90003b5a:	440b      	add	r3, r1
90003b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003b60:	e00a      	b.n	90003b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003b62:	683b      	ldr	r3, [r7, #0]
90003b64:	b2da      	uxtb	r2, r3
90003b66:	4908      	ldr	r1, [pc, #32]	@ (90003b88 <__NVIC_SetPriority+0x50>)
90003b68:	88fb      	ldrh	r3, [r7, #6]
90003b6a:	f003 030f 	and.w	r3, r3, #15
90003b6e:	3b04      	subs	r3, #4
90003b70:	0112      	lsls	r2, r2, #4
90003b72:	b2d2      	uxtb	r2, r2
90003b74:	440b      	add	r3, r1
90003b76:	761a      	strb	r2, [r3, #24]
}
90003b78:	bf00      	nop
90003b7a:	370c      	adds	r7, #12
90003b7c:	46bd      	mov	sp, r7
90003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b82:	4770      	bx	lr
90003b84:	e000e100 	.word	0xe000e100
90003b88:	e000ed00 	.word	0xe000ed00

90003b8c <NVIC_EncodePriority>:
{
90003b8c:	b480      	push	{r7}
90003b8e:	b089      	sub	sp, #36	@ 0x24
90003b90:	af00      	add	r7, sp, #0
90003b92:	60f8      	str	r0, [r7, #12]
90003b94:	60b9      	str	r1, [r7, #8]
90003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003b98:	68fb      	ldr	r3, [r7, #12]
90003b9a:	f003 0307 	and.w	r3, r3, #7
90003b9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003ba0:	69fb      	ldr	r3, [r7, #28]
90003ba2:	f1c3 0307 	rsb	r3, r3, #7
90003ba6:	2b04      	cmp	r3, #4
90003ba8:	bf28      	it	cs
90003baa:	2304      	movcs	r3, #4
90003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90003bae:	69fb      	ldr	r3, [r7, #28]
90003bb0:	3304      	adds	r3, #4
90003bb2:	2b06      	cmp	r3, #6
90003bb4:	d902      	bls.n	90003bbc <NVIC_EncodePriority+0x30>
90003bb6:	69fb      	ldr	r3, [r7, #28]
90003bb8:	3b03      	subs	r3, #3
90003bba:	e000      	b.n	90003bbe <NVIC_EncodePriority+0x32>
90003bbc:	2300      	movs	r3, #0
90003bbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003bc0:	f04f 32ff 	mov.w	r2, #4294967295
90003bc4:	69bb      	ldr	r3, [r7, #24]
90003bc6:	fa02 f303 	lsl.w	r3, r2, r3
90003bca:	43da      	mvns	r2, r3
90003bcc:	68bb      	ldr	r3, [r7, #8]
90003bce:	401a      	ands	r2, r3
90003bd0:	697b      	ldr	r3, [r7, #20]
90003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003bd4:	f04f 31ff 	mov.w	r1, #4294967295
90003bd8:	697b      	ldr	r3, [r7, #20]
90003bda:	fa01 f303 	lsl.w	r3, r1, r3
90003bde:	43d9      	mvns	r1, r3
90003be0:	687b      	ldr	r3, [r7, #4]
90003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003be4:	4313      	orrs	r3, r2
}
90003be6:	4618      	mov	r0, r3
90003be8:	3724      	adds	r7, #36	@ 0x24
90003bea:	46bd      	mov	sp, r7
90003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
90003bf0:	4770      	bx	lr
	...

90003bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003bf4:	b580      	push	{r7, lr}
90003bf6:	b082      	sub	sp, #8
90003bf8:	af00      	add	r7, sp, #0
90003bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90003bfc:	687b      	ldr	r3, [r7, #4]
90003bfe:	3b01      	subs	r3, #1
90003c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003c04:	d301      	bcc.n	90003c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003c06:	2301      	movs	r3, #1
90003c08:	e00f      	b.n	90003c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90003c0a:	4a0a      	ldr	r2, [pc, #40]	@ (90003c34 <SysTick_Config+0x40>)
90003c0c:	687b      	ldr	r3, [r7, #4]
90003c0e:	3b01      	subs	r3, #1
90003c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90003c12:	210f      	movs	r1, #15
90003c14:	f04f 30ff 	mov.w	r0, #4294967295
90003c18:	f7ff ff8e 	bl	90003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90003c1c:	4b05      	ldr	r3, [pc, #20]	@ (90003c34 <SysTick_Config+0x40>)
90003c1e:	2200      	movs	r2, #0
90003c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90003c22:	4b04      	ldr	r3, [pc, #16]	@ (90003c34 <SysTick_Config+0x40>)
90003c24:	2207      	movs	r2, #7
90003c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003c28:	2300      	movs	r3, #0
}
90003c2a:	4618      	mov	r0, r3
90003c2c:	3708      	adds	r7, #8
90003c2e:	46bd      	mov	sp, r7
90003c30:	bd80      	pop	{r7, pc}
90003c32:	bf00      	nop
90003c34:	e000e010 	.word	0xe000e010

90003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003c38:	b580      	push	{r7, lr}
90003c3a:	b082      	sub	sp, #8
90003c3c:	af00      	add	r7, sp, #0
90003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003c40:	6878      	ldr	r0, [r7, #4]
90003c42:	f7ff ff29 	bl	90003a98 <__NVIC_SetPriorityGrouping>
}
90003c46:	bf00      	nop
90003c48:	3708      	adds	r7, #8
90003c4a:	46bd      	mov	sp, r7
90003c4c:	bd80      	pop	{r7, pc}

90003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003c4e:	b580      	push	{r7, lr}
90003c50:	b086      	sub	sp, #24
90003c52:	af00      	add	r7, sp, #0
90003c54:	4603      	mov	r3, r0
90003c56:	60b9      	str	r1, [r7, #8]
90003c58:	607a      	str	r2, [r7, #4]
90003c5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003c5c:	f7ff ff40 	bl	90003ae0 <__NVIC_GetPriorityGrouping>
90003c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003c62:	687a      	ldr	r2, [r7, #4]
90003c64:	68b9      	ldr	r1, [r7, #8]
90003c66:	6978      	ldr	r0, [r7, #20]
90003c68:	f7ff ff90 	bl	90003b8c <NVIC_EncodePriority>
90003c6c:	4602      	mov	r2, r0
90003c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003c72:	4611      	mov	r1, r2
90003c74:	4618      	mov	r0, r3
90003c76:	f7ff ff5f 	bl	90003b38 <__NVIC_SetPriority>
}
90003c7a:	bf00      	nop
90003c7c:	3718      	adds	r7, #24
90003c7e:	46bd      	mov	sp, r7
90003c80:	bd80      	pop	{r7, pc}

90003c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003c82:	b580      	push	{r7, lr}
90003c84:	b082      	sub	sp, #8
90003c86:	af00      	add	r7, sp, #0
90003c88:	4603      	mov	r3, r0
90003c8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003c90:	4618      	mov	r0, r3
90003c92:	f7ff ff33 	bl	90003afc <__NVIC_EnableIRQ>
}
90003c96:	bf00      	nop
90003c98:	3708      	adds	r7, #8
90003c9a:	46bd      	mov	sp, r7
90003c9c:	bd80      	pop	{r7, pc}

90003c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90003c9e:	b580      	push	{r7, lr}
90003ca0:	b082      	sub	sp, #8
90003ca2:	af00      	add	r7, sp, #0
90003ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90003ca6:	6878      	ldr	r0, [r7, #4]
90003ca8:	f7ff ffa4 	bl	90003bf4 <SysTick_Config>
90003cac:	4603      	mov	r3, r0
}
90003cae:	4618      	mov	r0, r3
90003cb0:	3708      	adds	r7, #8
90003cb2:	46bd      	mov	sp, r7
90003cb4:	bd80      	pop	{r7, pc}
	...

90003cb8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003cb8:	b480      	push	{r7}
90003cba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90003cbc:	f3bf 8f5f 	dmb	sy
}
90003cc0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003cc2:	4b07      	ldr	r3, [pc, #28]	@ (90003ce0 <HAL_MPU_Disable+0x28>)
90003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003cc6:	4a06      	ldr	r2, [pc, #24]	@ (90003ce0 <HAL_MPU_Disable+0x28>)
90003cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90003ccc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90003cce:	4b05      	ldr	r3, [pc, #20]	@ (90003ce4 <HAL_MPU_Disable+0x2c>)
90003cd0:	2200      	movs	r2, #0
90003cd2:	605a      	str	r2, [r3, #4]
}
90003cd4:	bf00      	nop
90003cd6:	46bd      	mov	sp, r7
90003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
90003cdc:	4770      	bx	lr
90003cde:	bf00      	nop
90003ce0:	e000ed00 	.word	0xe000ed00
90003ce4:	e000ed90 	.word	0xe000ed90

90003ce8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003ce8:	b480      	push	{r7}
90003cea:	b083      	sub	sp, #12
90003cec:	af00      	add	r7, sp, #0
90003cee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003cf0:	4a0b      	ldr	r2, [pc, #44]	@ (90003d20 <HAL_MPU_Enable+0x38>)
90003cf2:	687b      	ldr	r3, [r7, #4]
90003cf4:	f043 0301 	orr.w	r3, r3, #1
90003cf8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90003cfa:	4b0a      	ldr	r3, [pc, #40]	@ (90003d24 <HAL_MPU_Enable+0x3c>)
90003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003cfe:	4a09      	ldr	r2, [pc, #36]	@ (90003d24 <HAL_MPU_Enable+0x3c>)
90003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003d04:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003d06:	f3bf 8f4f 	dsb	sy
}
90003d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90003d0c:	f3bf 8f6f 	isb	sy
}
90003d10:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003d12:	bf00      	nop
90003d14:	370c      	adds	r7, #12
90003d16:	46bd      	mov	sp, r7
90003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d1c:	4770      	bx	lr
90003d1e:	bf00      	nop
90003d20:	e000ed90 	.word	0xe000ed90
90003d24:	e000ed00 	.word	0xe000ed00

90003d28 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003d28:	b480      	push	{r7}
90003d2a:	b083      	sub	sp, #12
90003d2c:	af00      	add	r7, sp, #0
90003d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003d30:	687b      	ldr	r3, [r7, #4]
90003d32:	785a      	ldrb	r2, [r3, #1]
90003d34:	4b1b      	ldr	r3, [pc, #108]	@ (90003da4 <HAL_MPU_ConfigRegion+0x7c>)
90003d36:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003d38:	4b1a      	ldr	r3, [pc, #104]	@ (90003da4 <HAL_MPU_ConfigRegion+0x7c>)
90003d3a:	691b      	ldr	r3, [r3, #16]
90003d3c:	4a19      	ldr	r2, [pc, #100]	@ (90003da4 <HAL_MPU_ConfigRegion+0x7c>)
90003d3e:	f023 0301 	bic.w	r3, r3, #1
90003d42:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003d44:	4a17      	ldr	r2, [pc, #92]	@ (90003da4 <HAL_MPU_ConfigRegion+0x7c>)
90003d46:	687b      	ldr	r3, [r7, #4]
90003d48:	685b      	ldr	r3, [r3, #4]
90003d4a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003d4c:	687b      	ldr	r3, [r7, #4]
90003d4e:	7b1b      	ldrb	r3, [r3, #12]
90003d50:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003d52:	687b      	ldr	r3, [r7, #4]
90003d54:	7adb      	ldrb	r3, [r3, #11]
90003d56:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003d5a:	687b      	ldr	r3, [r7, #4]
90003d5c:	7a9b      	ldrb	r3, [r3, #10]
90003d5e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003d62:	687b      	ldr	r3, [r7, #4]
90003d64:	7b5b      	ldrb	r3, [r3, #13]
90003d66:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003d6a:	687b      	ldr	r3, [r7, #4]
90003d6c:	7b9b      	ldrb	r3, [r3, #14]
90003d6e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003d70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003d72:	687b      	ldr	r3, [r7, #4]
90003d74:	7bdb      	ldrb	r3, [r3, #15]
90003d76:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003d7a:	687b      	ldr	r3, [r7, #4]
90003d7c:	7a5b      	ldrb	r3, [r3, #9]
90003d7e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003d82:	687b      	ldr	r3, [r7, #4]
90003d84:	7a1b      	ldrb	r3, [r3, #8]
90003d86:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003d88:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003d8a:	687a      	ldr	r2, [r7, #4]
90003d8c:	7812      	ldrb	r2, [r2, #0]
90003d8e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003d90:	4a04      	ldr	r2, [pc, #16]	@ (90003da4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003d92:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003d94:	6113      	str	r3, [r2, #16]
}
90003d96:	bf00      	nop
90003d98:	370c      	adds	r7, #12
90003d9a:	46bd      	mov	sp, r7
90003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003da0:	4770      	bx	lr
90003da2:	bf00      	nop
90003da4:	e000ed90 	.word	0xe000ed90

90003da8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003da8:	b580      	push	{r7, lr}
90003daa:	b082      	sub	sp, #8
90003dac:	af00      	add	r7, sp, #0
90003dae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003db0:	687b      	ldr	r3, [r7, #4]
90003db2:	2b00      	cmp	r3, #0
90003db4:	d101      	bne.n	90003dba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90003db6:	2301      	movs	r3, #1
90003db8:	e04f      	b.n	90003e5a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90003dba:	687b      	ldr	r3, [r7, #4]
90003dbc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003dc0:	b2db      	uxtb	r3, r3
90003dc2:	2b00      	cmp	r3, #0
90003dc4:	d106      	bne.n	90003dd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90003dc6:	687b      	ldr	r3, [r7, #4]
90003dc8:	2200      	movs	r2, #0
90003dca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90003dce:	6878      	ldr	r0, [r7, #4]
90003dd0:	f000 f84e 	bl	90003e70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003dd4:	687b      	ldr	r3, [r7, #4]
90003dd6:	2202      	movs	r2, #2
90003dd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90003ddc:	687b      	ldr	r3, [r7, #4]
90003dde:	681b      	ldr	r3, [r3, #0]
90003de0:	681a      	ldr	r2, [r3, #0]
90003de2:	4b20      	ldr	r3, [pc, #128]	@ (90003e64 <HAL_DMA2D_Init+0xbc>)
90003de4:	4013      	ands	r3, r2
90003de6:	687a      	ldr	r2, [r7, #4]
90003de8:	6851      	ldr	r1, [r2, #4]
90003dea:	687a      	ldr	r2, [r7, #4]
90003dec:	69d2      	ldr	r2, [r2, #28]
90003dee:	4311      	orrs	r1, r2
90003df0:	687a      	ldr	r2, [r7, #4]
90003df2:	6812      	ldr	r2, [r2, #0]
90003df4:	430b      	orrs	r3, r1
90003df6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003df8:	687b      	ldr	r3, [r7, #4]
90003dfa:	681b      	ldr	r3, [r3, #0]
90003dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90003dfe:	4b1a      	ldr	r3, [pc, #104]	@ (90003e68 <HAL_DMA2D_Init+0xc0>)
90003e00:	4013      	ands	r3, r2
90003e02:	687a      	ldr	r2, [r7, #4]
90003e04:	6891      	ldr	r1, [r2, #8]
90003e06:	687a      	ldr	r2, [r7, #4]
90003e08:	6992      	ldr	r2, [r2, #24]
90003e0a:	4311      	orrs	r1, r2
90003e0c:	687a      	ldr	r2, [r7, #4]
90003e0e:	6812      	ldr	r2, [r2, #0]
90003e10:	430b      	orrs	r3, r1
90003e12:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003e14:	687b      	ldr	r3, [r7, #4]
90003e16:	681b      	ldr	r3, [r3, #0]
90003e18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90003e1a:	4b14      	ldr	r3, [pc, #80]	@ (90003e6c <HAL_DMA2D_Init+0xc4>)
90003e1c:	4013      	ands	r3, r2
90003e1e:	687a      	ldr	r2, [r7, #4]
90003e20:	68d1      	ldr	r1, [r2, #12]
90003e22:	687a      	ldr	r2, [r7, #4]
90003e24:	6812      	ldr	r2, [r2, #0]
90003e26:	430b      	orrs	r3, r1
90003e28:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90003e2a:	687b      	ldr	r3, [r7, #4]
90003e2c:	681b      	ldr	r3, [r3, #0]
90003e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003e30:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003e34:	687b      	ldr	r3, [r7, #4]
90003e36:	691b      	ldr	r3, [r3, #16]
90003e38:	051a      	lsls	r2, r3, #20
90003e3a:	687b      	ldr	r3, [r7, #4]
90003e3c:	695b      	ldr	r3, [r3, #20]
90003e3e:	055b      	lsls	r3, r3, #21
90003e40:	431a      	orrs	r2, r3
90003e42:	687b      	ldr	r3, [r7, #4]
90003e44:	681b      	ldr	r3, [r3, #0]
90003e46:	430a      	orrs	r2, r1
90003e48:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003e4a:	687b      	ldr	r3, [r7, #4]
90003e4c:	2200      	movs	r2, #0
90003e4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003e50:	687b      	ldr	r3, [r7, #4]
90003e52:	2201      	movs	r2, #1
90003e54:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003e58:	2300      	movs	r3, #0
}
90003e5a:	4618      	mov	r0, r3
90003e5c:	3708      	adds	r7, #8
90003e5e:	46bd      	mov	sp, r7
90003e60:	bd80      	pop	{r7, pc}
90003e62:	bf00      	nop
90003e64:	fff8ffbf 	.word	0xfff8ffbf
90003e68:	fffffef8 	.word	0xfffffef8
90003e6c:	ffff0000 	.word	0xffff0000

90003e70 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003e70:	b480      	push	{r7}
90003e72:	b083      	sub	sp, #12
90003e74:	af00      	add	r7, sp, #0
90003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003e78:	bf00      	nop
90003e7a:	370c      	adds	r7, #12
90003e7c:	46bd      	mov	sp, r7
90003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003e82:	4770      	bx	lr

90003e84 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003e84:	b580      	push	{r7, lr}
90003e86:	b086      	sub	sp, #24
90003e88:	af02      	add	r7, sp, #8
90003e8a:	60f8      	str	r0, [r7, #12]
90003e8c:	60b9      	str	r1, [r7, #8]
90003e8e:	607a      	str	r2, [r7, #4]
90003e90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003e92:	68fb      	ldr	r3, [r7, #12]
90003e94:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003e98:	2b01      	cmp	r3, #1
90003e9a:	d101      	bne.n	90003ea0 <HAL_DMA2D_Start+0x1c>
90003e9c:	2302      	movs	r3, #2
90003e9e:	e018      	b.n	90003ed2 <HAL_DMA2D_Start+0x4e>
90003ea0:	68fb      	ldr	r3, [r7, #12]
90003ea2:	2201      	movs	r2, #1
90003ea4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003ea8:	68fb      	ldr	r3, [r7, #12]
90003eaa:	2202      	movs	r2, #2
90003eac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003eb0:	69bb      	ldr	r3, [r7, #24]
90003eb2:	9300      	str	r3, [sp, #0]
90003eb4:	683b      	ldr	r3, [r7, #0]
90003eb6:	687a      	ldr	r2, [r7, #4]
90003eb8:	68b9      	ldr	r1, [r7, #8]
90003eba:	68f8      	ldr	r0, [r7, #12]
90003ebc:	f000 f9a4 	bl	90004208 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003ec0:	68fb      	ldr	r3, [r7, #12]
90003ec2:	681b      	ldr	r3, [r3, #0]
90003ec4:	681a      	ldr	r2, [r3, #0]
90003ec6:	68fb      	ldr	r3, [r7, #12]
90003ec8:	681b      	ldr	r3, [r3, #0]
90003eca:	f042 0201 	orr.w	r2, r2, #1
90003ece:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003ed0:	2300      	movs	r3, #0
}
90003ed2:	4618      	mov	r0, r3
90003ed4:	3710      	adds	r7, #16
90003ed6:	46bd      	mov	sp, r7
90003ed8:	bd80      	pop	{r7, pc}

90003eda <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90003eda:	b580      	push	{r7, lr}
90003edc:	b086      	sub	sp, #24
90003ede:	af00      	add	r7, sp, #0
90003ee0:	6078      	str	r0, [r7, #4]
90003ee2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90003ee4:	2300      	movs	r3, #0
90003ee6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003ee8:	687b      	ldr	r3, [r7, #4]
90003eea:	681b      	ldr	r3, [r3, #0]
90003eec:	681b      	ldr	r3, [r3, #0]
90003eee:	f003 0301 	and.w	r3, r3, #1
90003ef2:	2b00      	cmp	r3, #0
90003ef4:	d056      	beq.n	90003fa4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003ef6:	f7ff fd83 	bl	90003a00 <HAL_GetTick>
90003efa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003efc:	e04b      	b.n	90003f96 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003efe:	687b      	ldr	r3, [r7, #4]
90003f00:	681b      	ldr	r3, [r3, #0]
90003f02:	685b      	ldr	r3, [r3, #4]
90003f04:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003f06:	68fb      	ldr	r3, [r7, #12]
90003f08:	f003 0321 	and.w	r3, r3, #33	@ 0x21
90003f0c:	2b00      	cmp	r3, #0
90003f0e:	d023      	beq.n	90003f58 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003f10:	68fb      	ldr	r3, [r7, #12]
90003f12:	f003 0320 	and.w	r3, r3, #32
90003f16:	2b00      	cmp	r3, #0
90003f18:	d005      	beq.n	90003f26 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003f1a:	687b      	ldr	r3, [r7, #4]
90003f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003f1e:	f043 0202 	orr.w	r2, r3, #2
90003f22:	687b      	ldr	r3, [r7, #4]
90003f24:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003f26:	68fb      	ldr	r3, [r7, #12]
90003f28:	f003 0301 	and.w	r3, r3, #1
90003f2c:	2b00      	cmp	r3, #0
90003f2e:	d005      	beq.n	90003f3c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003f30:	687b      	ldr	r3, [r7, #4]
90003f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003f34:	f043 0201 	orr.w	r2, r3, #1
90003f38:	687b      	ldr	r3, [r7, #4]
90003f3a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003f3c:	687b      	ldr	r3, [r7, #4]
90003f3e:	681b      	ldr	r3, [r3, #0]
90003f40:	2221      	movs	r2, #33	@ 0x21
90003f42:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003f44:	687b      	ldr	r3, [r7, #4]
90003f46:	2204      	movs	r2, #4
90003f48:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003f4c:	687b      	ldr	r3, [r7, #4]
90003f4e:	2200      	movs	r2, #0
90003f50:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003f54:	2301      	movs	r3, #1
90003f56:	e0a5      	b.n	900040a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003f58:	683b      	ldr	r3, [r7, #0]
90003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
90003f5e:	d01a      	beq.n	90003f96 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003f60:	f7ff fd4e 	bl	90003a00 <HAL_GetTick>
90003f64:	4602      	mov	r2, r0
90003f66:	697b      	ldr	r3, [r7, #20]
90003f68:	1ad3      	subs	r3, r2, r3
90003f6a:	683a      	ldr	r2, [r7, #0]
90003f6c:	429a      	cmp	r2, r3
90003f6e:	d302      	bcc.n	90003f76 <HAL_DMA2D_PollForTransfer+0x9c>
90003f70:	683b      	ldr	r3, [r7, #0]
90003f72:	2b00      	cmp	r3, #0
90003f74:	d10f      	bne.n	90003f96 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003f76:	687b      	ldr	r3, [r7, #4]
90003f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003f7a:	f043 0220 	orr.w	r2, r3, #32
90003f7e:	687b      	ldr	r3, [r7, #4]
90003f80:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003f82:	687b      	ldr	r3, [r7, #4]
90003f84:	2203      	movs	r2, #3
90003f86:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003f8a:	687b      	ldr	r3, [r7, #4]
90003f8c:	2200      	movs	r2, #0
90003f8e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003f92:	2303      	movs	r3, #3
90003f94:	e086      	b.n	900040a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003f96:	687b      	ldr	r3, [r7, #4]
90003f98:	681b      	ldr	r3, [r3, #0]
90003f9a:	685b      	ldr	r3, [r3, #4]
90003f9c:	f003 0302 	and.w	r3, r3, #2
90003fa0:	2b00      	cmp	r3, #0
90003fa2:	d0ac      	beq.n	90003efe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003fa4:	687b      	ldr	r3, [r7, #4]
90003fa6:	681b      	ldr	r3, [r3, #0]
90003fa8:	69db      	ldr	r3, [r3, #28]
90003faa:	f003 0320 	and.w	r3, r3, #32
90003fae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003fb0:	687b      	ldr	r3, [r7, #4]
90003fb2:	681b      	ldr	r3, [r3, #0]
90003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003fb6:	f003 0320 	and.w	r3, r3, #32
90003fba:	693a      	ldr	r2, [r7, #16]
90003fbc:	4313      	orrs	r3, r2
90003fbe:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003fc0:	693b      	ldr	r3, [r7, #16]
90003fc2:	2b00      	cmp	r3, #0
90003fc4:	d061      	beq.n	9000408a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003fc6:	f7ff fd1b 	bl	90003a00 <HAL_GetTick>
90003fca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003fcc:	e056      	b.n	9000407c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003fce:	687b      	ldr	r3, [r7, #4]
90003fd0:	681b      	ldr	r3, [r3, #0]
90003fd2:	685b      	ldr	r3, [r3, #4]
90003fd4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003fd6:	68fb      	ldr	r3, [r7, #12]
90003fd8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
90003fdc:	2b00      	cmp	r3, #0
90003fde:	d02e      	beq.n	9000403e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003fe0:	68fb      	ldr	r3, [r7, #12]
90003fe2:	f003 0308 	and.w	r3, r3, #8
90003fe6:	2b00      	cmp	r3, #0
90003fe8:	d005      	beq.n	90003ff6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003fea:	687b      	ldr	r3, [r7, #4]
90003fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003fee:	f043 0204 	orr.w	r2, r3, #4
90003ff2:	687b      	ldr	r3, [r7, #4]
90003ff4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003ff6:	68fb      	ldr	r3, [r7, #12]
90003ff8:	f003 0320 	and.w	r3, r3, #32
90003ffc:	2b00      	cmp	r3, #0
90003ffe:	d005      	beq.n	9000400c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90004000:	687b      	ldr	r3, [r7, #4]
90004002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90004004:	f043 0202 	orr.w	r2, r3, #2
90004008:	687b      	ldr	r3, [r7, #4]
9000400a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000400c:	68fb      	ldr	r3, [r7, #12]
9000400e:	f003 0301 	and.w	r3, r3, #1
90004012:	2b00      	cmp	r3, #0
90004014:	d005      	beq.n	90004022 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90004016:	687b      	ldr	r3, [r7, #4]
90004018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000401a:	f043 0201 	orr.w	r2, r3, #1
9000401e:	687b      	ldr	r3, [r7, #4]
90004020:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90004022:	687b      	ldr	r3, [r7, #4]
90004024:	681b      	ldr	r3, [r3, #0]
90004026:	2229      	movs	r2, #41	@ 0x29
90004028:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000402a:	687b      	ldr	r3, [r7, #4]
9000402c:	2204      	movs	r2, #4
9000402e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90004032:	687b      	ldr	r3, [r7, #4]
90004034:	2200      	movs	r2, #0
90004036:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000403a:	2301      	movs	r3, #1
9000403c:	e032      	b.n	900040a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000403e:	683b      	ldr	r3, [r7, #0]
90004040:	f1b3 3fff 	cmp.w	r3, #4294967295
90004044:	d01a      	beq.n	9000407c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90004046:	f7ff fcdb 	bl	90003a00 <HAL_GetTick>
9000404a:	4602      	mov	r2, r0
9000404c:	697b      	ldr	r3, [r7, #20]
9000404e:	1ad3      	subs	r3, r2, r3
90004050:	683a      	ldr	r2, [r7, #0]
90004052:	429a      	cmp	r2, r3
90004054:	d302      	bcc.n	9000405c <HAL_DMA2D_PollForTransfer+0x182>
90004056:	683b      	ldr	r3, [r7, #0]
90004058:	2b00      	cmp	r3, #0
9000405a:	d10f      	bne.n	9000407c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000405c:	687b      	ldr	r3, [r7, #4]
9000405e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90004060:	f043 0220 	orr.w	r2, r3, #32
90004064:	687b      	ldr	r3, [r7, #4]
90004066:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90004068:	687b      	ldr	r3, [r7, #4]
9000406a:	2203      	movs	r2, #3
9000406c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90004070:	687b      	ldr	r3, [r7, #4]
90004072:	2200      	movs	r2, #0
90004074:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90004078:	2303      	movs	r3, #3
9000407a:	e013      	b.n	900040a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
9000407c:	687b      	ldr	r3, [r7, #4]
9000407e:	681b      	ldr	r3, [r3, #0]
90004080:	685b      	ldr	r3, [r3, #4]
90004082:	f003 0310 	and.w	r3, r3, #16
90004086:	2b00      	cmp	r3, #0
90004088:	d0a1      	beq.n	90003fce <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
9000408a:	687b      	ldr	r3, [r7, #4]
9000408c:	681b      	ldr	r3, [r3, #0]
9000408e:	2212      	movs	r2, #18
90004090:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90004092:	687b      	ldr	r3, [r7, #4]
90004094:	2201      	movs	r2, #1
90004096:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000409a:	687b      	ldr	r3, [r7, #4]
9000409c:	2200      	movs	r2, #0
9000409e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900040a2:	2300      	movs	r3, #0
}
900040a4:	4618      	mov	r0, r3
900040a6:	3718      	adds	r7, #24
900040a8:	46bd      	mov	sp, r7
900040aa:	bd80      	pop	{r7, pc}

900040ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
900040ac:	b480      	push	{r7}
900040ae:	b087      	sub	sp, #28
900040b0:	af00      	add	r7, sp, #0
900040b2:	6078      	str	r0, [r7, #4]
900040b4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
900040b6:	687b      	ldr	r3, [r7, #4]
900040b8:	685b      	ldr	r3, [r3, #4]
900040ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
900040be:	683b      	ldr	r3, [r7, #0]
900040c0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900040c2:	687b      	ldr	r3, [r7, #4]
900040c4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900040c8:	2b01      	cmp	r3, #1
900040ca:	d101      	bne.n	900040d0 <HAL_DMA2D_ConfigLayer+0x24>
900040cc:	2302      	movs	r3, #2
900040ce:	e092      	b.n	900041f6 <HAL_DMA2D_ConfigLayer+0x14a>
900040d0:	687b      	ldr	r3, [r7, #4]
900040d2:	2201      	movs	r2, #1
900040d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900040d8:	687b      	ldr	r3, [r7, #4]
900040da:	2202      	movs	r2, #2
900040dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900040e0:	683a      	ldr	r2, [r7, #0]
900040e2:	4613      	mov	r3, r2
900040e4:	00db      	lsls	r3, r3, #3
900040e6:	1a9b      	subs	r3, r3, r2
900040e8:	009b      	lsls	r3, r3, #2
900040ea:	3328      	adds	r3, #40	@ 0x28
900040ec:	687a      	ldr	r2, [r7, #4]
900040ee:	4413      	add	r3, r2
900040f0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900040f2:	68fb      	ldr	r3, [r7, #12]
900040f4:	685a      	ldr	r2, [r3, #4]
900040f6:	68fb      	ldr	r3, [r7, #12]
900040f8:	689b      	ldr	r3, [r3, #8]
900040fa:	041b      	lsls	r3, r3, #16
900040fc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900040fe:	68fb      	ldr	r3, [r7, #12]
90004100:	691b      	ldr	r3, [r3, #16]
90004102:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90004104:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90004106:	68fb      	ldr	r3, [r7, #12]
90004108:	695b      	ldr	r3, [r3, #20]
9000410a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000410c:	4313      	orrs	r3, r2
9000410e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90004110:	4b3c      	ldr	r3, [pc, #240]	@ (90004204 <HAL_DMA2D_ConfigLayer+0x158>)
90004112:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90004114:	68fb      	ldr	r3, [r7, #12]
90004116:	685b      	ldr	r3, [r3, #4]
90004118:	2b0a      	cmp	r3, #10
9000411a:	d003      	beq.n	90004124 <HAL_DMA2D_ConfigLayer+0x78>
9000411c:	68fb      	ldr	r3, [r7, #12]
9000411e:	685b      	ldr	r3, [r3, #4]
90004120:	2b09      	cmp	r3, #9
90004122:	d107      	bne.n	90004134 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90004124:	68fb      	ldr	r3, [r7, #12]
90004126:	68db      	ldr	r3, [r3, #12]
90004128:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
9000412c:	693a      	ldr	r2, [r7, #16]
9000412e:	4313      	orrs	r3, r2
90004130:	613b      	str	r3, [r7, #16]
90004132:	e005      	b.n	90004140 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90004134:	68fb      	ldr	r3, [r7, #12]
90004136:	68db      	ldr	r3, [r3, #12]
90004138:	061b      	lsls	r3, r3, #24
9000413a:	693a      	ldr	r2, [r7, #16]
9000413c:	4313      	orrs	r3, r2
9000413e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90004140:	683b      	ldr	r3, [r7, #0]
90004142:	2b00      	cmp	r3, #0
90004144:	d120      	bne.n	90004188 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90004146:	687b      	ldr	r3, [r7, #4]
90004148:	681b      	ldr	r3, [r3, #0]
9000414a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000414c:	697b      	ldr	r3, [r7, #20]
9000414e:	43db      	mvns	r3, r3
90004150:	ea02 0103 	and.w	r1, r2, r3
90004154:	687b      	ldr	r3, [r7, #4]
90004156:	681b      	ldr	r3, [r3, #0]
90004158:	693a      	ldr	r2, [r7, #16]
9000415a:	430a      	orrs	r2, r1
9000415c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000415e:	687b      	ldr	r3, [r7, #4]
90004160:	681b      	ldr	r3, [r3, #0]
90004162:	68fa      	ldr	r2, [r7, #12]
90004164:	6812      	ldr	r2, [r2, #0]
90004166:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90004168:	68fb      	ldr	r3, [r7, #12]
9000416a:	685b      	ldr	r3, [r3, #4]
9000416c:	2b0a      	cmp	r3, #10
9000416e:	d003      	beq.n	90004178 <HAL_DMA2D_ConfigLayer+0xcc>
90004170:	68fb      	ldr	r3, [r7, #12]
90004172:	685b      	ldr	r3, [r3, #4]
90004174:	2b09      	cmp	r3, #9
90004176:	d135      	bne.n	900041e4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90004178:	68fb      	ldr	r3, [r7, #12]
9000417a:	68da      	ldr	r2, [r3, #12]
9000417c:	687b      	ldr	r3, [r7, #4]
9000417e:	681b      	ldr	r3, [r3, #0]
90004180:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90004184:	629a      	str	r2, [r3, #40]	@ 0x28
90004186:	e02d      	b.n	900041e4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90004188:	68fb      	ldr	r3, [r7, #12]
9000418a:	685b      	ldr	r3, [r3, #4]
9000418c:	2b0b      	cmp	r3, #11
9000418e:	d109      	bne.n	900041a4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90004190:	68fb      	ldr	r3, [r7, #12]
90004192:	699b      	ldr	r3, [r3, #24]
90004194:	049b      	lsls	r3, r3, #18
90004196:	693a      	ldr	r2, [r7, #16]
90004198:	4313      	orrs	r3, r2
9000419a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
9000419c:	697b      	ldr	r3, [r7, #20]
9000419e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
900041a2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900041a4:	687b      	ldr	r3, [r7, #4]
900041a6:	681b      	ldr	r3, [r3, #0]
900041a8:	69da      	ldr	r2, [r3, #28]
900041aa:	697b      	ldr	r3, [r7, #20]
900041ac:	43db      	mvns	r3, r3
900041ae:	ea02 0103 	and.w	r1, r2, r3
900041b2:	687b      	ldr	r3, [r7, #4]
900041b4:	681b      	ldr	r3, [r3, #0]
900041b6:	693a      	ldr	r2, [r7, #16]
900041b8:	430a      	orrs	r2, r1
900041ba:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900041bc:	687b      	ldr	r3, [r7, #4]
900041be:	681b      	ldr	r3, [r3, #0]
900041c0:	68fa      	ldr	r2, [r7, #12]
900041c2:	6812      	ldr	r2, [r2, #0]
900041c4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900041c6:	68fb      	ldr	r3, [r7, #12]
900041c8:	685b      	ldr	r3, [r3, #4]
900041ca:	2b0a      	cmp	r3, #10
900041cc:	d003      	beq.n	900041d6 <HAL_DMA2D_ConfigLayer+0x12a>
900041ce:	68fb      	ldr	r3, [r7, #12]
900041d0:	685b      	ldr	r3, [r3, #4]
900041d2:	2b09      	cmp	r3, #9
900041d4:	d106      	bne.n	900041e4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
900041d6:	68fb      	ldr	r3, [r7, #12]
900041d8:	68da      	ldr	r2, [r3, #12]
900041da:	687b      	ldr	r3, [r7, #4]
900041dc:	681b      	ldr	r3, [r3, #0]
900041de:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900041e2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900041e4:	687b      	ldr	r3, [r7, #4]
900041e6:	2201      	movs	r2, #1
900041e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900041ec:	687b      	ldr	r3, [r7, #4]
900041ee:	2200      	movs	r2, #0
900041f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900041f4:	2300      	movs	r3, #0
}
900041f6:	4618      	mov	r0, r3
900041f8:	371c      	adds	r7, #28
900041fa:	46bd      	mov	sp, r7
900041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
90004200:	4770      	bx	lr
90004202:	bf00      	nop
90004204:	ff33000f 	.word	0xff33000f

90004208 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90004208:	b480      	push	{r7}
9000420a:	b08b      	sub	sp, #44	@ 0x2c
9000420c:	af00      	add	r7, sp, #0
9000420e:	60f8      	str	r0, [r7, #12]
90004210:	60b9      	str	r1, [r7, #8]
90004212:	607a      	str	r2, [r7, #4]
90004214:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90004216:	68fb      	ldr	r3, [r7, #12]
90004218:	681b      	ldr	r3, [r3, #0]
9000421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000421c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90004220:	683b      	ldr	r3, [r7, #0]
90004222:	041a      	lsls	r2, r3, #16
90004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90004226:	431a      	orrs	r2, r3
90004228:	68fb      	ldr	r3, [r7, #12]
9000422a:	681b      	ldr	r3, [r3, #0]
9000422c:	430a      	orrs	r2, r1
9000422e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90004230:	68fb      	ldr	r3, [r7, #12]
90004232:	681b      	ldr	r3, [r3, #0]
90004234:	687a      	ldr	r2, [r7, #4]
90004236:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90004238:	68fb      	ldr	r3, [r7, #12]
9000423a:	685b      	ldr	r3, [r3, #4]
9000423c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90004240:	d174      	bne.n	9000432c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90004242:	68bb      	ldr	r3, [r7, #8]
90004244:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90004248:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
9000424a:	68bb      	ldr	r3, [r7, #8]
9000424c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90004250:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90004252:	68bb      	ldr	r3, [r7, #8]
90004254:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90004258:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
9000425a:	68bb      	ldr	r3, [r7, #8]
9000425c:	b2db      	uxtb	r3, r3
9000425e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90004260:	68fb      	ldr	r3, [r7, #12]
90004262:	689b      	ldr	r3, [r3, #8]
90004264:	2b00      	cmp	r3, #0
90004266:	d108      	bne.n	9000427a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90004268:	69ba      	ldr	r2, [r7, #24]
9000426a:	69fb      	ldr	r3, [r7, #28]
9000426c:	431a      	orrs	r2, r3
9000426e:	6a3b      	ldr	r3, [r7, #32]
90004270:	4313      	orrs	r3, r2
90004272:	697a      	ldr	r2, [r7, #20]
90004274:	4313      	orrs	r3, r2
90004276:	627b      	str	r3, [r7, #36]	@ 0x24
90004278:	e053      	b.n	90004322 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
9000427a:	68fb      	ldr	r3, [r7, #12]
9000427c:	689b      	ldr	r3, [r3, #8]
9000427e:	2b01      	cmp	r3, #1
90004280:	d106      	bne.n	90004290 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90004282:	69ba      	ldr	r2, [r7, #24]
90004284:	69fb      	ldr	r3, [r7, #28]
90004286:	4313      	orrs	r3, r2
90004288:	697a      	ldr	r2, [r7, #20]
9000428a:	4313      	orrs	r3, r2
9000428c:	627b      	str	r3, [r7, #36]	@ 0x24
9000428e:	e048      	b.n	90004322 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90004290:	68fb      	ldr	r3, [r7, #12]
90004292:	689b      	ldr	r3, [r3, #8]
90004294:	2b02      	cmp	r3, #2
90004296:	d111      	bne.n	900042bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90004298:	69fb      	ldr	r3, [r7, #28]
9000429a:	0cdb      	lsrs	r3, r3, #19
9000429c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
9000429e:	69bb      	ldr	r3, [r7, #24]
900042a0:	0a9b      	lsrs	r3, r3, #10
900042a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
900042a4:	697b      	ldr	r3, [r7, #20]
900042a6:	08db      	lsrs	r3, r3, #3
900042a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
900042aa:	69bb      	ldr	r3, [r7, #24]
900042ac:	015a      	lsls	r2, r3, #5
900042ae:	69fb      	ldr	r3, [r7, #28]
900042b0:	02db      	lsls	r3, r3, #11
900042b2:	4313      	orrs	r3, r2
900042b4:	697a      	ldr	r2, [r7, #20]
900042b6:	4313      	orrs	r3, r2
900042b8:	627b      	str	r3, [r7, #36]	@ 0x24
900042ba:	e032      	b.n	90004322 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900042bc:	68fb      	ldr	r3, [r7, #12]
900042be:	689b      	ldr	r3, [r3, #8]
900042c0:	2b03      	cmp	r3, #3
900042c2:	d117      	bne.n	900042f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
900042c4:	6a3b      	ldr	r3, [r7, #32]
900042c6:	0fdb      	lsrs	r3, r3, #31
900042c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
900042ca:	69fb      	ldr	r3, [r7, #28]
900042cc:	0cdb      	lsrs	r3, r3, #19
900042ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
900042d0:	69bb      	ldr	r3, [r7, #24]
900042d2:	0adb      	lsrs	r3, r3, #11
900042d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
900042d6:	697b      	ldr	r3, [r7, #20]
900042d8:	08db      	lsrs	r3, r3, #3
900042da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900042dc:	69bb      	ldr	r3, [r7, #24]
900042de:	015a      	lsls	r2, r3, #5
900042e0:	69fb      	ldr	r3, [r7, #28]
900042e2:	029b      	lsls	r3, r3, #10
900042e4:	431a      	orrs	r2, r3
900042e6:	6a3b      	ldr	r3, [r7, #32]
900042e8:	03db      	lsls	r3, r3, #15
900042ea:	4313      	orrs	r3, r2
900042ec:	697a      	ldr	r2, [r7, #20]
900042ee:	4313      	orrs	r3, r2
900042f0:	627b      	str	r3, [r7, #36]	@ 0x24
900042f2:	e016      	b.n	90004322 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900042f4:	6a3b      	ldr	r3, [r7, #32]
900042f6:	0f1b      	lsrs	r3, r3, #28
900042f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900042fa:	69fb      	ldr	r3, [r7, #28]
900042fc:	0d1b      	lsrs	r3, r3, #20
900042fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90004300:	69bb      	ldr	r3, [r7, #24]
90004302:	0b1b      	lsrs	r3, r3, #12
90004304:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90004306:	697b      	ldr	r3, [r7, #20]
90004308:	091b      	lsrs	r3, r3, #4
9000430a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
9000430c:	69bb      	ldr	r3, [r7, #24]
9000430e:	011a      	lsls	r2, r3, #4
90004310:	69fb      	ldr	r3, [r7, #28]
90004312:	021b      	lsls	r3, r3, #8
90004314:	431a      	orrs	r2, r3
90004316:	6a3b      	ldr	r3, [r7, #32]
90004318:	031b      	lsls	r3, r3, #12
9000431a:	4313      	orrs	r3, r2
9000431c:	697a      	ldr	r2, [r7, #20]
9000431e:	4313      	orrs	r3, r2
90004320:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90004322:	68fb      	ldr	r3, [r7, #12]
90004324:	681b      	ldr	r3, [r3, #0]
90004326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90004328:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
9000432a:	e00d      	b.n	90004348 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
9000432c:	68fb      	ldr	r3, [r7, #12]
9000432e:	685b      	ldr	r3, [r3, #4]
90004330:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90004334:	d104      	bne.n	90004340 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90004336:	68fb      	ldr	r3, [r7, #12]
90004338:	681b      	ldr	r3, [r3, #0]
9000433a:	68ba      	ldr	r2, [r7, #8]
9000433c:	615a      	str	r2, [r3, #20]
}
9000433e:	e003      	b.n	90004348 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90004340:	68fb      	ldr	r3, [r7, #12]
90004342:	681b      	ldr	r3, [r3, #0]
90004344:	68ba      	ldr	r2, [r7, #8]
90004346:	60da      	str	r2, [r3, #12]
}
90004348:	bf00      	nop
9000434a:	372c      	adds	r7, #44	@ 0x2c
9000434c:	46bd      	mov	sp, r7
9000434e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004352:	4770      	bx	lr

90004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90004354:	b480      	push	{r7}
90004356:	b089      	sub	sp, #36	@ 0x24
90004358:	af00      	add	r7, sp, #0
9000435a:	6078      	str	r0, [r7, #4]
9000435c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
9000435e:	2300      	movs	r3, #0
90004360:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90004362:	4b89      	ldr	r3, [pc, #548]	@ (90004588 <HAL_GPIO_Init+0x234>)
90004364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90004366:	e194      	b.n	90004692 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90004368:	683b      	ldr	r3, [r7, #0]
9000436a:	681a      	ldr	r2, [r3, #0]
9000436c:	2101      	movs	r1, #1
9000436e:	69fb      	ldr	r3, [r7, #28]
90004370:	fa01 f303 	lsl.w	r3, r1, r3
90004374:	4013      	ands	r3, r2
90004376:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90004378:	693b      	ldr	r3, [r7, #16]
9000437a:	2b00      	cmp	r3, #0
9000437c:	f000 8186 	beq.w	9000468c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90004380:	683b      	ldr	r3, [r7, #0]
90004382:	685b      	ldr	r3, [r3, #4]
90004384:	f003 0303 	and.w	r3, r3, #3
90004388:	2b01      	cmp	r3, #1
9000438a:	d005      	beq.n	90004398 <HAL_GPIO_Init+0x44>
9000438c:	683b      	ldr	r3, [r7, #0]
9000438e:	685b      	ldr	r3, [r3, #4]
90004390:	f003 0303 	and.w	r3, r3, #3
90004394:	2b02      	cmp	r3, #2
90004396:	d130      	bne.n	900043fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90004398:	687b      	ldr	r3, [r7, #4]
9000439a:	689b      	ldr	r3, [r3, #8]
9000439c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000439e:	69fb      	ldr	r3, [r7, #28]
900043a0:	005b      	lsls	r3, r3, #1
900043a2:	2203      	movs	r2, #3
900043a4:	fa02 f303 	lsl.w	r3, r2, r3
900043a8:	43db      	mvns	r3, r3
900043aa:	69ba      	ldr	r2, [r7, #24]
900043ac:	4013      	ands	r3, r2
900043ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
900043b0:	683b      	ldr	r3, [r7, #0]
900043b2:	68da      	ldr	r2, [r3, #12]
900043b4:	69fb      	ldr	r3, [r7, #28]
900043b6:	005b      	lsls	r3, r3, #1
900043b8:	fa02 f303 	lsl.w	r3, r2, r3
900043bc:	69ba      	ldr	r2, [r7, #24]
900043be:	4313      	orrs	r3, r2
900043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900043c2:	687b      	ldr	r3, [r7, #4]
900043c4:	69ba      	ldr	r2, [r7, #24]
900043c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
900043c8:	687b      	ldr	r3, [r7, #4]
900043ca:	685b      	ldr	r3, [r3, #4]
900043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
900043ce:	2201      	movs	r2, #1
900043d0:	69fb      	ldr	r3, [r7, #28]
900043d2:	fa02 f303 	lsl.w	r3, r2, r3
900043d6:	43db      	mvns	r3, r3
900043d8:	69ba      	ldr	r2, [r7, #24]
900043da:	4013      	ands	r3, r2
900043dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
900043de:	683b      	ldr	r3, [r7, #0]
900043e0:	685b      	ldr	r3, [r3, #4]
900043e2:	091b      	lsrs	r3, r3, #4
900043e4:	f003 0201 	and.w	r2, r3, #1
900043e8:	69fb      	ldr	r3, [r7, #28]
900043ea:	fa02 f303 	lsl.w	r3, r2, r3
900043ee:	69ba      	ldr	r2, [r7, #24]
900043f0:	4313      	orrs	r3, r2
900043f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900043f4:	687b      	ldr	r3, [r7, #4]
900043f6:	69ba      	ldr	r2, [r7, #24]
900043f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900043fa:	683b      	ldr	r3, [r7, #0]
900043fc:	685b      	ldr	r3, [r3, #4]
900043fe:	f003 0303 	and.w	r3, r3, #3
90004402:	2b03      	cmp	r3, #3
90004404:	d017      	beq.n	90004436 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90004406:	687b      	ldr	r3, [r7, #4]
90004408:	68db      	ldr	r3, [r3, #12]
9000440a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000440c:	69fb      	ldr	r3, [r7, #28]
9000440e:	005b      	lsls	r3, r3, #1
90004410:	2203      	movs	r2, #3
90004412:	fa02 f303 	lsl.w	r3, r2, r3
90004416:	43db      	mvns	r3, r3
90004418:	69ba      	ldr	r2, [r7, #24]
9000441a:	4013      	ands	r3, r2
9000441c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000441e:	683b      	ldr	r3, [r7, #0]
90004420:	689a      	ldr	r2, [r3, #8]
90004422:	69fb      	ldr	r3, [r7, #28]
90004424:	005b      	lsls	r3, r3, #1
90004426:	fa02 f303 	lsl.w	r3, r2, r3
9000442a:	69ba      	ldr	r2, [r7, #24]
9000442c:	4313      	orrs	r3, r2
9000442e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90004430:	687b      	ldr	r3, [r7, #4]
90004432:	69ba      	ldr	r2, [r7, #24]
90004434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90004436:	683b      	ldr	r3, [r7, #0]
90004438:	685b      	ldr	r3, [r3, #4]
9000443a:	f003 0303 	and.w	r3, r3, #3
9000443e:	2b02      	cmp	r3, #2
90004440:	d123      	bne.n	9000448a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90004442:	69fb      	ldr	r3, [r7, #28]
90004444:	08da      	lsrs	r2, r3, #3
90004446:	687b      	ldr	r3, [r7, #4]
90004448:	3208      	adds	r2, #8
9000444a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000444e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90004450:	69fb      	ldr	r3, [r7, #28]
90004452:	f003 0307 	and.w	r3, r3, #7
90004456:	009b      	lsls	r3, r3, #2
90004458:	220f      	movs	r2, #15
9000445a:	fa02 f303 	lsl.w	r3, r2, r3
9000445e:	43db      	mvns	r3, r3
90004460:	69ba      	ldr	r2, [r7, #24]
90004462:	4013      	ands	r3, r2
90004464:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90004466:	683b      	ldr	r3, [r7, #0]
90004468:	691a      	ldr	r2, [r3, #16]
9000446a:	69fb      	ldr	r3, [r7, #28]
9000446c:	f003 0307 	and.w	r3, r3, #7
90004470:	009b      	lsls	r3, r3, #2
90004472:	fa02 f303 	lsl.w	r3, r2, r3
90004476:	69ba      	ldr	r2, [r7, #24]
90004478:	4313      	orrs	r3, r2
9000447a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
9000447c:	69fb      	ldr	r3, [r7, #28]
9000447e:	08da      	lsrs	r2, r3, #3
90004480:	687b      	ldr	r3, [r7, #4]
90004482:	3208      	adds	r2, #8
90004484:	69b9      	ldr	r1, [r7, #24]
90004486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
9000448a:	687b      	ldr	r3, [r7, #4]
9000448c:	681b      	ldr	r3, [r3, #0]
9000448e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90004490:	69fb      	ldr	r3, [r7, #28]
90004492:	005b      	lsls	r3, r3, #1
90004494:	2203      	movs	r2, #3
90004496:	fa02 f303 	lsl.w	r3, r2, r3
9000449a:	43db      	mvns	r3, r3
9000449c:	69ba      	ldr	r2, [r7, #24]
9000449e:	4013      	ands	r3, r2
900044a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900044a2:	683b      	ldr	r3, [r7, #0]
900044a4:	685b      	ldr	r3, [r3, #4]
900044a6:	f003 0203 	and.w	r2, r3, #3
900044aa:	69fb      	ldr	r3, [r7, #28]
900044ac:	005b      	lsls	r3, r3, #1
900044ae:	fa02 f303 	lsl.w	r3, r2, r3
900044b2:	69ba      	ldr	r2, [r7, #24]
900044b4:	4313      	orrs	r3, r2
900044b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900044b8:	687b      	ldr	r3, [r7, #4]
900044ba:	69ba      	ldr	r2, [r7, #24]
900044bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900044be:	683b      	ldr	r3, [r7, #0]
900044c0:	685b      	ldr	r3, [r3, #4]
900044c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
900044c6:	2b00      	cmp	r3, #0
900044c8:	f000 80e0 	beq.w	9000468c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900044cc:	4b2f      	ldr	r3, [pc, #188]	@ (9000458c <HAL_GPIO_Init+0x238>)
900044ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900044d2:	4a2e      	ldr	r2, [pc, #184]	@ (9000458c <HAL_GPIO_Init+0x238>)
900044d4:	f043 0302 	orr.w	r3, r3, #2
900044d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
900044dc:	4b2b      	ldr	r3, [pc, #172]	@ (9000458c <HAL_GPIO_Init+0x238>)
900044de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900044e2:	f003 0302 	and.w	r3, r3, #2
900044e6:	60fb      	str	r3, [r7, #12]
900044e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
900044ea:	4a29      	ldr	r2, [pc, #164]	@ (90004590 <HAL_GPIO_Init+0x23c>)
900044ec:	69fb      	ldr	r3, [r7, #28]
900044ee:	089b      	lsrs	r3, r3, #2
900044f0:	3302      	adds	r3, #2
900044f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900044f8:	69fb      	ldr	r3, [r7, #28]
900044fa:	f003 0303 	and.w	r3, r3, #3
900044fe:	009b      	lsls	r3, r3, #2
90004500:	220f      	movs	r2, #15
90004502:	fa02 f303 	lsl.w	r3, r2, r3
90004506:	43db      	mvns	r3, r3
90004508:	69ba      	ldr	r2, [r7, #24]
9000450a:	4013      	ands	r3, r2
9000450c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000450e:	687b      	ldr	r3, [r7, #4]
90004510:	4a20      	ldr	r2, [pc, #128]	@ (90004594 <HAL_GPIO_Init+0x240>)
90004512:	4293      	cmp	r3, r2
90004514:	d052      	beq.n	900045bc <HAL_GPIO_Init+0x268>
90004516:	687b      	ldr	r3, [r7, #4]
90004518:	4a1f      	ldr	r2, [pc, #124]	@ (90004598 <HAL_GPIO_Init+0x244>)
9000451a:	4293      	cmp	r3, r2
9000451c:	d031      	beq.n	90004582 <HAL_GPIO_Init+0x22e>
9000451e:	687b      	ldr	r3, [r7, #4]
90004520:	4a1e      	ldr	r2, [pc, #120]	@ (9000459c <HAL_GPIO_Init+0x248>)
90004522:	4293      	cmp	r3, r2
90004524:	d02b      	beq.n	9000457e <HAL_GPIO_Init+0x22a>
90004526:	687b      	ldr	r3, [r7, #4]
90004528:	4a1d      	ldr	r2, [pc, #116]	@ (900045a0 <HAL_GPIO_Init+0x24c>)
9000452a:	4293      	cmp	r3, r2
9000452c:	d025      	beq.n	9000457a <HAL_GPIO_Init+0x226>
9000452e:	687b      	ldr	r3, [r7, #4]
90004530:	4a1c      	ldr	r2, [pc, #112]	@ (900045a4 <HAL_GPIO_Init+0x250>)
90004532:	4293      	cmp	r3, r2
90004534:	d01f      	beq.n	90004576 <HAL_GPIO_Init+0x222>
90004536:	687b      	ldr	r3, [r7, #4]
90004538:	4a1b      	ldr	r2, [pc, #108]	@ (900045a8 <HAL_GPIO_Init+0x254>)
9000453a:	4293      	cmp	r3, r2
9000453c:	d019      	beq.n	90004572 <HAL_GPIO_Init+0x21e>
9000453e:	687b      	ldr	r3, [r7, #4]
90004540:	4a1a      	ldr	r2, [pc, #104]	@ (900045ac <HAL_GPIO_Init+0x258>)
90004542:	4293      	cmp	r3, r2
90004544:	d013      	beq.n	9000456e <HAL_GPIO_Init+0x21a>
90004546:	687b      	ldr	r3, [r7, #4]
90004548:	4a19      	ldr	r2, [pc, #100]	@ (900045b0 <HAL_GPIO_Init+0x25c>)
9000454a:	4293      	cmp	r3, r2
9000454c:	d00d      	beq.n	9000456a <HAL_GPIO_Init+0x216>
9000454e:	687b      	ldr	r3, [r7, #4]
90004550:	4a18      	ldr	r2, [pc, #96]	@ (900045b4 <HAL_GPIO_Init+0x260>)
90004552:	4293      	cmp	r3, r2
90004554:	d007      	beq.n	90004566 <HAL_GPIO_Init+0x212>
90004556:	687b      	ldr	r3, [r7, #4]
90004558:	4a17      	ldr	r2, [pc, #92]	@ (900045b8 <HAL_GPIO_Init+0x264>)
9000455a:	4293      	cmp	r3, r2
9000455c:	d101      	bne.n	90004562 <HAL_GPIO_Init+0x20e>
9000455e:	2309      	movs	r3, #9
90004560:	e02d      	b.n	900045be <HAL_GPIO_Init+0x26a>
90004562:	230a      	movs	r3, #10
90004564:	e02b      	b.n	900045be <HAL_GPIO_Init+0x26a>
90004566:	2308      	movs	r3, #8
90004568:	e029      	b.n	900045be <HAL_GPIO_Init+0x26a>
9000456a:	2307      	movs	r3, #7
9000456c:	e027      	b.n	900045be <HAL_GPIO_Init+0x26a>
9000456e:	2306      	movs	r3, #6
90004570:	e025      	b.n	900045be <HAL_GPIO_Init+0x26a>
90004572:	2305      	movs	r3, #5
90004574:	e023      	b.n	900045be <HAL_GPIO_Init+0x26a>
90004576:	2304      	movs	r3, #4
90004578:	e021      	b.n	900045be <HAL_GPIO_Init+0x26a>
9000457a:	2303      	movs	r3, #3
9000457c:	e01f      	b.n	900045be <HAL_GPIO_Init+0x26a>
9000457e:	2302      	movs	r3, #2
90004580:	e01d      	b.n	900045be <HAL_GPIO_Init+0x26a>
90004582:	2301      	movs	r3, #1
90004584:	e01b      	b.n	900045be <HAL_GPIO_Init+0x26a>
90004586:	bf00      	nop
90004588:	58000080 	.word	0x58000080
9000458c:	58024400 	.word	0x58024400
90004590:	58000400 	.word	0x58000400
90004594:	58020000 	.word	0x58020000
90004598:	58020400 	.word	0x58020400
9000459c:	58020800 	.word	0x58020800
900045a0:	58020c00 	.word	0x58020c00
900045a4:	58021000 	.word	0x58021000
900045a8:	58021400 	.word	0x58021400
900045ac:	58021800 	.word	0x58021800
900045b0:	58021c00 	.word	0x58021c00
900045b4:	58022000 	.word	0x58022000
900045b8:	58022400 	.word	0x58022400
900045bc:	2300      	movs	r3, #0
900045be:	69fa      	ldr	r2, [r7, #28]
900045c0:	f002 0203 	and.w	r2, r2, #3
900045c4:	0092      	lsls	r2, r2, #2
900045c6:	4093      	lsls	r3, r2
900045c8:	69ba      	ldr	r2, [r7, #24]
900045ca:	4313      	orrs	r3, r2
900045cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
900045ce:	4938      	ldr	r1, [pc, #224]	@ (900046b0 <HAL_GPIO_Init+0x35c>)
900045d0:	69fb      	ldr	r3, [r7, #28]
900045d2:	089b      	lsrs	r3, r3, #2
900045d4:	3302      	adds	r3, #2
900045d6:	69ba      	ldr	r2, [r7, #24]
900045d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
900045dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
900045e0:	681b      	ldr	r3, [r3, #0]
900045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900045e4:	693b      	ldr	r3, [r7, #16]
900045e6:	43db      	mvns	r3, r3
900045e8:	69ba      	ldr	r2, [r7, #24]
900045ea:	4013      	ands	r3, r2
900045ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
900045ee:	683b      	ldr	r3, [r7, #0]
900045f0:	685b      	ldr	r3, [r3, #4]
900045f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
900045f6:	2b00      	cmp	r3, #0
900045f8:	d003      	beq.n	90004602 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
900045fa:	69ba      	ldr	r2, [r7, #24]
900045fc:	693b      	ldr	r3, [r7, #16]
900045fe:	4313      	orrs	r3, r2
90004600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90004602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90004606:	69bb      	ldr	r3, [r7, #24]
90004608:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
9000460a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
9000460e:	685b      	ldr	r3, [r3, #4]
90004610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004612:	693b      	ldr	r3, [r7, #16]
90004614:	43db      	mvns	r3, r3
90004616:	69ba      	ldr	r2, [r7, #24]
90004618:	4013      	ands	r3, r2
9000461a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
9000461c:	683b      	ldr	r3, [r7, #0]
9000461e:	685b      	ldr	r3, [r3, #4]
90004620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004624:	2b00      	cmp	r3, #0
90004626:	d003      	beq.n	90004630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90004628:	69ba      	ldr	r2, [r7, #24]
9000462a:	693b      	ldr	r3, [r7, #16]
9000462c:	4313      	orrs	r3, r2
9000462e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90004630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90004634:	69bb      	ldr	r3, [r7, #24]
90004636:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90004638:	697b      	ldr	r3, [r7, #20]
9000463a:	685b      	ldr	r3, [r3, #4]
9000463c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000463e:	693b      	ldr	r3, [r7, #16]
90004640:	43db      	mvns	r3, r3
90004642:	69ba      	ldr	r2, [r7, #24]
90004644:	4013      	ands	r3, r2
90004646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90004648:	683b      	ldr	r3, [r7, #0]
9000464a:	685b      	ldr	r3, [r3, #4]
9000464c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90004650:	2b00      	cmp	r3, #0
90004652:	d003      	beq.n	9000465c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90004654:	69ba      	ldr	r2, [r7, #24]
90004656:	693b      	ldr	r3, [r7, #16]
90004658:	4313      	orrs	r3, r2
9000465a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
9000465c:	697b      	ldr	r3, [r7, #20]
9000465e:	69ba      	ldr	r2, [r7, #24]
90004660:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90004662:	697b      	ldr	r3, [r7, #20]
90004664:	681b      	ldr	r3, [r3, #0]
90004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004668:	693b      	ldr	r3, [r7, #16]
9000466a:	43db      	mvns	r3, r3
9000466c:	69ba      	ldr	r2, [r7, #24]
9000466e:	4013      	ands	r3, r2
90004670:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90004672:	683b      	ldr	r3, [r7, #0]
90004674:	685b      	ldr	r3, [r3, #4]
90004676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
9000467a:	2b00      	cmp	r3, #0
9000467c:	d003      	beq.n	90004686 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
9000467e:	69ba      	ldr	r2, [r7, #24]
90004680:	693b      	ldr	r3, [r7, #16]
90004682:	4313      	orrs	r3, r2
90004684:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90004686:	697b      	ldr	r3, [r7, #20]
90004688:	69ba      	ldr	r2, [r7, #24]
9000468a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
9000468c:	69fb      	ldr	r3, [r7, #28]
9000468e:	3301      	adds	r3, #1
90004690:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90004692:	683b      	ldr	r3, [r7, #0]
90004694:	681a      	ldr	r2, [r3, #0]
90004696:	69fb      	ldr	r3, [r7, #28]
90004698:	fa22 f303 	lsr.w	r3, r2, r3
9000469c:	2b00      	cmp	r3, #0
9000469e:	f47f ae63 	bne.w	90004368 <HAL_GPIO_Init+0x14>
  }
}
900046a2:	bf00      	nop
900046a4:	bf00      	nop
900046a6:	3724      	adds	r7, #36	@ 0x24
900046a8:	46bd      	mov	sp, r7
900046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900046ae:	4770      	bx	lr
900046b0:	58000400 	.word	0x58000400

900046b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
900046b4:	b480      	push	{r7}
900046b6:	b087      	sub	sp, #28
900046b8:	af00      	add	r7, sp, #0
900046ba:	6078      	str	r0, [r7, #4]
900046bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
900046be:	2300      	movs	r3, #0
900046c0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
900046c2:	4b75      	ldr	r3, [pc, #468]	@ (90004898 <HAL_GPIO_DeInit+0x1e4>)
900046c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
900046c6:	e0d9      	b.n	9000487c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
900046c8:	2201      	movs	r2, #1
900046ca:	697b      	ldr	r3, [r7, #20]
900046cc:	fa02 f303 	lsl.w	r3, r2, r3
900046d0:	683a      	ldr	r2, [r7, #0]
900046d2:	4013      	ands	r3, r2
900046d4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
900046d6:	68fb      	ldr	r3, [r7, #12]
900046d8:	2b00      	cmp	r3, #0
900046da:	f000 80cc 	beq.w	90004876 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
900046de:	4a6f      	ldr	r2, [pc, #444]	@ (9000489c <HAL_GPIO_DeInit+0x1e8>)
900046e0:	697b      	ldr	r3, [r7, #20]
900046e2:	089b      	lsrs	r3, r3, #2
900046e4:	3302      	adds	r3, #2
900046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900046ea:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
900046ec:	697b      	ldr	r3, [r7, #20]
900046ee:	f003 0303 	and.w	r3, r3, #3
900046f2:	009b      	lsls	r3, r3, #2
900046f4:	220f      	movs	r2, #15
900046f6:	fa02 f303 	lsl.w	r3, r2, r3
900046fa:	68ba      	ldr	r2, [r7, #8]
900046fc:	4013      	ands	r3, r2
900046fe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90004700:	687b      	ldr	r3, [r7, #4]
90004702:	4a67      	ldr	r2, [pc, #412]	@ (900048a0 <HAL_GPIO_DeInit+0x1ec>)
90004704:	4293      	cmp	r3, r2
90004706:	d037      	beq.n	90004778 <HAL_GPIO_DeInit+0xc4>
90004708:	687b      	ldr	r3, [r7, #4]
9000470a:	4a66      	ldr	r2, [pc, #408]	@ (900048a4 <HAL_GPIO_DeInit+0x1f0>)
9000470c:	4293      	cmp	r3, r2
9000470e:	d031      	beq.n	90004774 <HAL_GPIO_DeInit+0xc0>
90004710:	687b      	ldr	r3, [r7, #4]
90004712:	4a65      	ldr	r2, [pc, #404]	@ (900048a8 <HAL_GPIO_DeInit+0x1f4>)
90004714:	4293      	cmp	r3, r2
90004716:	d02b      	beq.n	90004770 <HAL_GPIO_DeInit+0xbc>
90004718:	687b      	ldr	r3, [r7, #4]
9000471a:	4a64      	ldr	r2, [pc, #400]	@ (900048ac <HAL_GPIO_DeInit+0x1f8>)
9000471c:	4293      	cmp	r3, r2
9000471e:	d025      	beq.n	9000476c <HAL_GPIO_DeInit+0xb8>
90004720:	687b      	ldr	r3, [r7, #4]
90004722:	4a63      	ldr	r2, [pc, #396]	@ (900048b0 <HAL_GPIO_DeInit+0x1fc>)
90004724:	4293      	cmp	r3, r2
90004726:	d01f      	beq.n	90004768 <HAL_GPIO_DeInit+0xb4>
90004728:	687b      	ldr	r3, [r7, #4]
9000472a:	4a62      	ldr	r2, [pc, #392]	@ (900048b4 <HAL_GPIO_DeInit+0x200>)
9000472c:	4293      	cmp	r3, r2
9000472e:	d019      	beq.n	90004764 <HAL_GPIO_DeInit+0xb0>
90004730:	687b      	ldr	r3, [r7, #4]
90004732:	4a61      	ldr	r2, [pc, #388]	@ (900048b8 <HAL_GPIO_DeInit+0x204>)
90004734:	4293      	cmp	r3, r2
90004736:	d013      	beq.n	90004760 <HAL_GPIO_DeInit+0xac>
90004738:	687b      	ldr	r3, [r7, #4]
9000473a:	4a60      	ldr	r2, [pc, #384]	@ (900048bc <HAL_GPIO_DeInit+0x208>)
9000473c:	4293      	cmp	r3, r2
9000473e:	d00d      	beq.n	9000475c <HAL_GPIO_DeInit+0xa8>
90004740:	687b      	ldr	r3, [r7, #4]
90004742:	4a5f      	ldr	r2, [pc, #380]	@ (900048c0 <HAL_GPIO_DeInit+0x20c>)
90004744:	4293      	cmp	r3, r2
90004746:	d007      	beq.n	90004758 <HAL_GPIO_DeInit+0xa4>
90004748:	687b      	ldr	r3, [r7, #4]
9000474a:	4a5e      	ldr	r2, [pc, #376]	@ (900048c4 <HAL_GPIO_DeInit+0x210>)
9000474c:	4293      	cmp	r3, r2
9000474e:	d101      	bne.n	90004754 <HAL_GPIO_DeInit+0xa0>
90004750:	2309      	movs	r3, #9
90004752:	e012      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004754:	230a      	movs	r3, #10
90004756:	e010      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004758:	2308      	movs	r3, #8
9000475a:	e00e      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
9000475c:	2307      	movs	r3, #7
9000475e:	e00c      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004760:	2306      	movs	r3, #6
90004762:	e00a      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004764:	2305      	movs	r3, #5
90004766:	e008      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004768:	2304      	movs	r3, #4
9000476a:	e006      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
9000476c:	2303      	movs	r3, #3
9000476e:	e004      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004770:	2302      	movs	r3, #2
90004772:	e002      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004774:	2301      	movs	r3, #1
90004776:	e000      	b.n	9000477a <HAL_GPIO_DeInit+0xc6>
90004778:	2300      	movs	r3, #0
9000477a:	697a      	ldr	r2, [r7, #20]
9000477c:	f002 0203 	and.w	r2, r2, #3
90004780:	0092      	lsls	r2, r2, #2
90004782:	4093      	lsls	r3, r2
90004784:	68ba      	ldr	r2, [r7, #8]
90004786:	429a      	cmp	r2, r3
90004788:	d136      	bne.n	900047f8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
9000478a:	693b      	ldr	r3, [r7, #16]
9000478c:	681a      	ldr	r2, [r3, #0]
9000478e:	68fb      	ldr	r3, [r7, #12]
90004790:	43db      	mvns	r3, r3
90004792:	401a      	ands	r2, r3
90004794:	693b      	ldr	r3, [r7, #16]
90004796:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90004798:	693b      	ldr	r3, [r7, #16]
9000479a:	685a      	ldr	r2, [r3, #4]
9000479c:	68fb      	ldr	r3, [r7, #12]
9000479e:	43db      	mvns	r3, r3
900047a0:	401a      	ands	r2, r3
900047a2:	693b      	ldr	r3, [r7, #16]
900047a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
900047a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
900047aa:	685a      	ldr	r2, [r3, #4]
900047ac:	68fb      	ldr	r3, [r7, #12]
900047ae:	43db      	mvns	r3, r3
900047b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
900047b4:	4013      	ands	r3, r2
900047b6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
900047b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
900047bc:	681a      	ldr	r2, [r3, #0]
900047be:	68fb      	ldr	r3, [r7, #12]
900047c0:	43db      	mvns	r3, r3
900047c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
900047c6:	4013      	ands	r3, r2
900047c8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
900047ca:	697b      	ldr	r3, [r7, #20]
900047cc:	f003 0303 	and.w	r3, r3, #3
900047d0:	009b      	lsls	r3, r3, #2
900047d2:	220f      	movs	r2, #15
900047d4:	fa02 f303 	lsl.w	r3, r2, r3
900047d8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
900047da:	4a30      	ldr	r2, [pc, #192]	@ (9000489c <HAL_GPIO_DeInit+0x1e8>)
900047dc:	697b      	ldr	r3, [r7, #20]
900047de:	089b      	lsrs	r3, r3, #2
900047e0:	3302      	adds	r3, #2
900047e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
900047e6:	68bb      	ldr	r3, [r7, #8]
900047e8:	43da      	mvns	r2, r3
900047ea:	482c      	ldr	r0, [pc, #176]	@ (9000489c <HAL_GPIO_DeInit+0x1e8>)
900047ec:	697b      	ldr	r3, [r7, #20]
900047ee:	089b      	lsrs	r3, r3, #2
900047f0:	400a      	ands	r2, r1
900047f2:	3302      	adds	r3, #2
900047f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900047f8:	687b      	ldr	r3, [r7, #4]
900047fa:	681a      	ldr	r2, [r3, #0]
900047fc:	697b      	ldr	r3, [r7, #20]
900047fe:	005b      	lsls	r3, r3, #1
90004800:	2103      	movs	r1, #3
90004802:	fa01 f303 	lsl.w	r3, r1, r3
90004806:	431a      	orrs	r2, r3
90004808:	687b      	ldr	r3, [r7, #4]
9000480a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000480c:	697b      	ldr	r3, [r7, #20]
9000480e:	08da      	lsrs	r2, r3, #3
90004810:	687b      	ldr	r3, [r7, #4]
90004812:	3208      	adds	r2, #8
90004814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90004818:	697b      	ldr	r3, [r7, #20]
9000481a:	f003 0307 	and.w	r3, r3, #7
9000481e:	009b      	lsls	r3, r3, #2
90004820:	220f      	movs	r2, #15
90004822:	fa02 f303 	lsl.w	r3, r2, r3
90004826:	43db      	mvns	r3, r3
90004828:	697a      	ldr	r2, [r7, #20]
9000482a:	08d2      	lsrs	r2, r2, #3
9000482c:	4019      	ands	r1, r3
9000482e:	687b      	ldr	r3, [r7, #4]
90004830:	3208      	adds	r2, #8
90004832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90004836:	687b      	ldr	r3, [r7, #4]
90004838:	68da      	ldr	r2, [r3, #12]
9000483a:	697b      	ldr	r3, [r7, #20]
9000483c:	005b      	lsls	r3, r3, #1
9000483e:	2103      	movs	r1, #3
90004840:	fa01 f303 	lsl.w	r3, r1, r3
90004844:	43db      	mvns	r3, r3
90004846:	401a      	ands	r2, r3
90004848:	687b      	ldr	r3, [r7, #4]
9000484a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
9000484c:	687b      	ldr	r3, [r7, #4]
9000484e:	685a      	ldr	r2, [r3, #4]
90004850:	2101      	movs	r1, #1
90004852:	697b      	ldr	r3, [r7, #20]
90004854:	fa01 f303 	lsl.w	r3, r1, r3
90004858:	43db      	mvns	r3, r3
9000485a:	401a      	ands	r2, r3
9000485c:	687b      	ldr	r3, [r7, #4]
9000485e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90004860:	687b      	ldr	r3, [r7, #4]
90004862:	689a      	ldr	r2, [r3, #8]
90004864:	697b      	ldr	r3, [r7, #20]
90004866:	005b      	lsls	r3, r3, #1
90004868:	2103      	movs	r1, #3
9000486a:	fa01 f303 	lsl.w	r3, r1, r3
9000486e:	43db      	mvns	r3, r3
90004870:	401a      	ands	r2, r3
90004872:	687b      	ldr	r3, [r7, #4]
90004874:	609a      	str	r2, [r3, #8]
    }

    position++;
90004876:	697b      	ldr	r3, [r7, #20]
90004878:	3301      	adds	r3, #1
9000487a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
9000487c:	683a      	ldr	r2, [r7, #0]
9000487e:	697b      	ldr	r3, [r7, #20]
90004880:	fa22 f303 	lsr.w	r3, r2, r3
90004884:	2b00      	cmp	r3, #0
90004886:	f47f af1f 	bne.w	900046c8 <HAL_GPIO_DeInit+0x14>
  }
}
9000488a:	bf00      	nop
9000488c:	bf00      	nop
9000488e:	371c      	adds	r7, #28
90004890:	46bd      	mov	sp, r7
90004892:	f85d 7b04 	ldr.w	r7, [sp], #4
90004896:	4770      	bx	lr
90004898:	58000080 	.word	0x58000080
9000489c:	58000400 	.word	0x58000400
900048a0:	58020000 	.word	0x58020000
900048a4:	58020400 	.word	0x58020400
900048a8:	58020800 	.word	0x58020800
900048ac:	58020c00 	.word	0x58020c00
900048b0:	58021000 	.word	0x58021000
900048b4:	58021400 	.word	0x58021400
900048b8:	58021800 	.word	0x58021800
900048bc:	58021c00 	.word	0x58021c00
900048c0:	58022000 	.word	0x58022000
900048c4:	58022400 	.word	0x58022400

900048c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
900048c8:	b480      	push	{r7}
900048ca:	b085      	sub	sp, #20
900048cc:	af00      	add	r7, sp, #0
900048ce:	6078      	str	r0, [r7, #4]
900048d0:	460b      	mov	r3, r1
900048d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
900048d4:	687b      	ldr	r3, [r7, #4]
900048d6:	691a      	ldr	r2, [r3, #16]
900048d8:	887b      	ldrh	r3, [r7, #2]
900048da:	4013      	ands	r3, r2
900048dc:	2b00      	cmp	r3, #0
900048de:	d002      	beq.n	900048e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
900048e0:	2301      	movs	r3, #1
900048e2:	73fb      	strb	r3, [r7, #15]
900048e4:	e001      	b.n	900048ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
900048e6:	2300      	movs	r3, #0
900048e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
900048ea:	7bfb      	ldrb	r3, [r7, #15]
}
900048ec:	4618      	mov	r0, r3
900048ee:	3714      	adds	r7, #20
900048f0:	46bd      	mov	sp, r7
900048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900048f6:	4770      	bx	lr

900048f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
900048f8:	b480      	push	{r7}
900048fa:	b083      	sub	sp, #12
900048fc:	af00      	add	r7, sp, #0
900048fe:	6078      	str	r0, [r7, #4]
90004900:	460b      	mov	r3, r1
90004902:	807b      	strh	r3, [r7, #2]
90004904:	4613      	mov	r3, r2
90004906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90004908:	787b      	ldrb	r3, [r7, #1]
9000490a:	2b00      	cmp	r3, #0
9000490c:	d003      	beq.n	90004916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
9000490e:	887a      	ldrh	r2, [r7, #2]
90004910:	687b      	ldr	r3, [r7, #4]
90004912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90004914:	e003      	b.n	9000491e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90004916:	887b      	ldrh	r3, [r7, #2]
90004918:	041a      	lsls	r2, r3, #16
9000491a:	687b      	ldr	r3, [r7, #4]
9000491c:	619a      	str	r2, [r3, #24]
}
9000491e:	bf00      	nop
90004920:	370c      	adds	r7, #12
90004922:	46bd      	mov	sp, r7
90004924:	f85d 7b04 	ldr.w	r7, [sp], #4
90004928:	4770      	bx	lr

9000492a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000492a:	b580      	push	{r7, lr}
9000492c:	b086      	sub	sp, #24
9000492e:	af00      	add	r7, sp, #0
90004930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004932:	687b      	ldr	r3, [r7, #4]
90004934:	681b      	ldr	r3, [r3, #0]
90004936:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004938:	693b      	ldr	r3, [r7, #16]
9000493a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
9000493c:	687b      	ldr	r3, [r7, #4]
9000493e:	681b      	ldr	r3, [r3, #0]
90004940:	4618      	mov	r0, r3
90004942:	f007 fb47 	bl	9000bfd4 <USB_GetMode>
90004946:	4603      	mov	r3, r0
90004948:	2b01      	cmp	r3, #1
9000494a:	f040 80fb 	bne.w	90004b44 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
9000494e:	687b      	ldr	r3, [r7, #4]
90004950:	681b      	ldr	r3, [r3, #0]
90004952:	4618      	mov	r0, r3
90004954:	f007 fb0a 	bl	9000bf6c <USB_ReadInterrupts>
90004958:	4603      	mov	r3, r0
9000495a:	2b00      	cmp	r3, #0
9000495c:	f000 80f1 	beq.w	90004b42 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90004960:	687b      	ldr	r3, [r7, #4]
90004962:	681b      	ldr	r3, [r3, #0]
90004964:	4618      	mov	r0, r3
90004966:	f007 fb01 	bl	9000bf6c <USB_ReadInterrupts>
9000496a:	4603      	mov	r3, r0
9000496c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90004974:	d104      	bne.n	90004980 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90004976:	687b      	ldr	r3, [r7, #4]
90004978:	681b      	ldr	r3, [r3, #0]
9000497a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
9000497e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90004980:	687b      	ldr	r3, [r7, #4]
90004982:	681b      	ldr	r3, [r3, #0]
90004984:	4618      	mov	r0, r3
90004986:	f007 faf1 	bl	9000bf6c <USB_ReadInterrupts>
9000498a:	4603      	mov	r3, r0
9000498c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90004990:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90004994:	d104      	bne.n	900049a0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90004996:	687b      	ldr	r3, [r7, #4]
90004998:	681b      	ldr	r3, [r3, #0]
9000499a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
9000499e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
900049a0:	687b      	ldr	r3, [r7, #4]
900049a2:	681b      	ldr	r3, [r3, #0]
900049a4:	4618      	mov	r0, r3
900049a6:	f007 fae1 	bl	9000bf6c <USB_ReadInterrupts>
900049aa:	4603      	mov	r3, r0
900049ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
900049b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
900049b4:	d104      	bne.n	900049c0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
900049b6:	687b      	ldr	r3, [r7, #4]
900049b8:	681b      	ldr	r3, [r3, #0]
900049ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
900049be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
900049c0:	687b      	ldr	r3, [r7, #4]
900049c2:	681b      	ldr	r3, [r3, #0]
900049c4:	4618      	mov	r0, r3
900049c6:	f007 fad1 	bl	9000bf6c <USB_ReadInterrupts>
900049ca:	4603      	mov	r3, r0
900049cc:	f003 0302 	and.w	r3, r3, #2
900049d0:	2b02      	cmp	r3, #2
900049d2:	d103      	bne.n	900049dc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
900049d4:	687b      	ldr	r3, [r7, #4]
900049d6:	681b      	ldr	r3, [r3, #0]
900049d8:	2202      	movs	r2, #2
900049da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
900049dc:	687b      	ldr	r3, [r7, #4]
900049de:	681b      	ldr	r3, [r3, #0]
900049e0:	4618      	mov	r0, r3
900049e2:	f007 fac3 	bl	9000bf6c <USB_ReadInterrupts>
900049e6:	4603      	mov	r3, r0
900049e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900049ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900049f0:	d120      	bne.n	90004a34 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
900049f2:	687b      	ldr	r3, [r7, #4]
900049f4:	681b      	ldr	r3, [r3, #0]
900049f6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900049fa:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
900049fc:	68fb      	ldr	r3, [r7, #12]
900049fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90004a02:	681b      	ldr	r3, [r3, #0]
90004a04:	f003 0301 	and.w	r3, r3, #1
90004a08:	2b00      	cmp	r3, #0
90004a0a:	d113      	bne.n	90004a34 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90004a0c:	2110      	movs	r1, #16
90004a0e:	6938      	ldr	r0, [r7, #16]
90004a10:	f007 f9f4 	bl	9000bdfc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90004a14:	6938      	ldr	r0, [r7, #16]
90004a16:	f007 fa23 	bl	9000be60 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90004a1a:	687b      	ldr	r3, [r7, #4]
90004a1c:	7a5b      	ldrb	r3, [r3, #9]
90004a1e:	2b02      	cmp	r3, #2
90004a20:	d105      	bne.n	90004a2e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90004a22:	687b      	ldr	r3, [r7, #4]
90004a24:	681b      	ldr	r3, [r3, #0]
90004a26:	2101      	movs	r1, #1
90004a28:	4618      	mov	r0, r3
90004a2a:	f007 fae1 	bl	9000bff0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90004a2e:	6878      	ldr	r0, [r7, #4]
90004a30:	f7fc fc0c 	bl	9000124c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90004a34:	687b      	ldr	r3, [r7, #4]
90004a36:	681b      	ldr	r3, [r3, #0]
90004a38:	4618      	mov	r0, r3
90004a3a:	f007 fa97 	bl	9000bf6c <USB_ReadInterrupts>
90004a3e:	4603      	mov	r3, r0
90004a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90004a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004a48:	d102      	bne.n	90004a50 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90004a4a:	6878      	ldr	r0, [r7, #4]
90004a4c:	f001 fca1 	bl	90006392 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90004a50:	687b      	ldr	r3, [r7, #4]
90004a52:	681b      	ldr	r3, [r3, #0]
90004a54:	4618      	mov	r0, r3
90004a56:	f007 fa89 	bl	9000bf6c <USB_ReadInterrupts>
90004a5a:	4603      	mov	r3, r0
90004a5c:	f003 0308 	and.w	r3, r3, #8
90004a60:	2b08      	cmp	r3, #8
90004a62:	d106      	bne.n	90004a72 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90004a64:	6878      	ldr	r0, [r7, #4]
90004a66:	f7fc fbd5 	bl	90001214 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90004a6a:	687b      	ldr	r3, [r7, #4]
90004a6c:	681b      	ldr	r3, [r3, #0]
90004a6e:	2208      	movs	r2, #8
90004a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90004a72:	687b      	ldr	r3, [r7, #4]
90004a74:	681b      	ldr	r3, [r3, #0]
90004a76:	4618      	mov	r0, r3
90004a78:	f007 fa78 	bl	9000bf6c <USB_ReadInterrupts>
90004a7c:	4603      	mov	r3, r0
90004a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90004a82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90004a86:	d139      	bne.n	90004afc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90004a88:	687b      	ldr	r3, [r7, #4]
90004a8a:	681b      	ldr	r3, [r3, #0]
90004a8c:	4618      	mov	r0, r3
90004a8e:	f007 faec 	bl	9000c06a <USB_HC_ReadInterrupt>
90004a92:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004a94:	2300      	movs	r3, #0
90004a96:	617b      	str	r3, [r7, #20]
90004a98:	e025      	b.n	90004ae6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90004a9a:	697b      	ldr	r3, [r7, #20]
90004a9c:	f003 030f 	and.w	r3, r3, #15
90004aa0:	68ba      	ldr	r2, [r7, #8]
90004aa2:	fa22 f303 	lsr.w	r3, r2, r3
90004aa6:	f003 0301 	and.w	r3, r3, #1
90004aaa:	2b00      	cmp	r3, #0
90004aac:	d018      	beq.n	90004ae0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90004aae:	697b      	ldr	r3, [r7, #20]
90004ab0:	015a      	lsls	r2, r3, #5
90004ab2:	68fb      	ldr	r3, [r7, #12]
90004ab4:	4413      	add	r3, r2
90004ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004aba:	681b      	ldr	r3, [r3, #0]
90004abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90004ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90004ac4:	d106      	bne.n	90004ad4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90004ac6:	697b      	ldr	r3, [r7, #20]
90004ac8:	b2db      	uxtb	r3, r3
90004aca:	4619      	mov	r1, r3
90004acc:	6878      	ldr	r0, [r7, #4]
90004ace:	f000 f859 	bl	90004b84 <HCD_HC_IN_IRQHandler>
90004ad2:	e005      	b.n	90004ae0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90004ad4:	697b      	ldr	r3, [r7, #20]
90004ad6:	b2db      	uxtb	r3, r3
90004ad8:	4619      	mov	r1, r3
90004ada:	6878      	ldr	r0, [r7, #4]
90004adc:	f000 febb 	bl	90005856 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004ae0:	697b      	ldr	r3, [r7, #20]
90004ae2:	3301      	adds	r3, #1
90004ae4:	617b      	str	r3, [r7, #20]
90004ae6:	687b      	ldr	r3, [r7, #4]
90004ae8:	795b      	ldrb	r3, [r3, #5]
90004aea:	461a      	mov	r2, r3
90004aec:	697b      	ldr	r3, [r7, #20]
90004aee:	4293      	cmp	r3, r2
90004af0:	d3d3      	bcc.n	90004a9a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90004af2:	687b      	ldr	r3, [r7, #4]
90004af4:	681b      	ldr	r3, [r3, #0]
90004af6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90004afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90004afc:	687b      	ldr	r3, [r7, #4]
90004afe:	681b      	ldr	r3, [r3, #0]
90004b00:	4618      	mov	r0, r3
90004b02:	f007 fa33 	bl	9000bf6c <USB_ReadInterrupts>
90004b06:	4603      	mov	r3, r0
90004b08:	f003 0310 	and.w	r3, r3, #16
90004b0c:	2b10      	cmp	r3, #16
90004b0e:	d101      	bne.n	90004b14 <HAL_HCD_IRQHandler+0x1ea>
90004b10:	2301      	movs	r3, #1
90004b12:	e000      	b.n	90004b16 <HAL_HCD_IRQHandler+0x1ec>
90004b14:	2300      	movs	r3, #0
90004b16:	2b00      	cmp	r3, #0
90004b18:	d014      	beq.n	90004b44 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004b1a:	687b      	ldr	r3, [r7, #4]
90004b1c:	681b      	ldr	r3, [r3, #0]
90004b1e:	699a      	ldr	r2, [r3, #24]
90004b20:	687b      	ldr	r3, [r7, #4]
90004b22:	681b      	ldr	r3, [r3, #0]
90004b24:	f022 0210 	bic.w	r2, r2, #16
90004b28:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90004b2a:	6878      	ldr	r0, [r7, #4]
90004b2c:	f001 fb52 	bl	900061d4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004b30:	687b      	ldr	r3, [r7, #4]
90004b32:	681b      	ldr	r3, [r3, #0]
90004b34:	699a      	ldr	r2, [r3, #24]
90004b36:	687b      	ldr	r3, [r7, #4]
90004b38:	681b      	ldr	r3, [r3, #0]
90004b3a:	f042 0210 	orr.w	r2, r2, #16
90004b3e:	619a      	str	r2, [r3, #24]
90004b40:	e000      	b.n	90004b44 <HAL_HCD_IRQHandler+0x21a>
      return;
90004b42:	bf00      	nop
    }
  }
}
90004b44:	3718      	adds	r7, #24
90004b46:	46bd      	mov	sp, r7
90004b48:	bd80      	pop	{r7, pc}

90004b4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90004b4a:	b580      	push	{r7, lr}
90004b4c:	b082      	sub	sp, #8
90004b4e:	af00      	add	r7, sp, #0
90004b50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90004b52:	687b      	ldr	r3, [r7, #4]
90004b54:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004b58:	2b01      	cmp	r3, #1
90004b5a:	d101      	bne.n	90004b60 <HAL_HCD_Stop+0x16>
90004b5c:	2302      	movs	r3, #2
90004b5e:	e00d      	b.n	90004b7c <HAL_HCD_Stop+0x32>
90004b60:	687b      	ldr	r3, [r7, #4]
90004b62:	2201      	movs	r2, #1
90004b64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004b68:	687b      	ldr	r3, [r7, #4]
90004b6a:	681b      	ldr	r3, [r3, #0]
90004b6c:	4618      	mov	r0, r3
90004b6e:	f007 fbad 	bl	9000c2cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90004b72:	687b      	ldr	r3, [r7, #4]
90004b74:	2200      	movs	r2, #0
90004b76:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
90004b7a:	2300      	movs	r3, #0
}
90004b7c:	4618      	mov	r0, r3
90004b7e:	3708      	adds	r7, #8
90004b80:	46bd      	mov	sp, r7
90004b82:	bd80      	pop	{r7, pc}

90004b84 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004b84:	b580      	push	{r7, lr}
90004b86:	b086      	sub	sp, #24
90004b88:	af00      	add	r7, sp, #0
90004b8a:	6078      	str	r0, [r7, #4]
90004b8c:	460b      	mov	r3, r1
90004b8e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004b90:	687b      	ldr	r3, [r7, #4]
90004b92:	681b      	ldr	r3, [r3, #0]
90004b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004b96:	697b      	ldr	r3, [r7, #20]
90004b98:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004b9a:	687b      	ldr	r3, [r7, #4]
90004b9c:	681b      	ldr	r3, [r3, #0]
90004b9e:	78fa      	ldrb	r2, [r7, #3]
90004ba0:	4611      	mov	r1, r2
90004ba2:	4618      	mov	r0, r3
90004ba4:	f007 f9f5 	bl	9000bf92 <USB_ReadChInterrupts>
90004ba8:	4603      	mov	r3, r0
90004baa:	f003 0304 	and.w	r3, r3, #4
90004bae:	2b04      	cmp	r3, #4
90004bb0:	d11a      	bne.n	90004be8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004bb2:	78fb      	ldrb	r3, [r7, #3]
90004bb4:	015a      	lsls	r2, r3, #5
90004bb6:	693b      	ldr	r3, [r7, #16]
90004bb8:	4413      	add	r3, r2
90004bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004bbe:	461a      	mov	r2, r3
90004bc0:	2304      	movs	r3, #4
90004bc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004bc4:	78fa      	ldrb	r2, [r7, #3]
90004bc6:	6879      	ldr	r1, [r7, #4]
90004bc8:	4613      	mov	r3, r2
90004bca:	011b      	lsls	r3, r3, #4
90004bcc:	1a9b      	subs	r3, r3, r2
90004bce:	009b      	lsls	r3, r3, #2
90004bd0:	440b      	add	r3, r1
90004bd2:	334d      	adds	r3, #77	@ 0x4d
90004bd4:	2207      	movs	r2, #7
90004bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004bd8:	687b      	ldr	r3, [r7, #4]
90004bda:	681b      	ldr	r3, [r3, #0]
90004bdc:	78fa      	ldrb	r2, [r7, #3]
90004bde:	4611      	mov	r1, r2
90004be0:	4618      	mov	r0, r3
90004be2:	f007 fa53 	bl	9000c08c <USB_HC_Halt>
90004be6:	e09e      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90004be8:	687b      	ldr	r3, [r7, #4]
90004bea:	681b      	ldr	r3, [r3, #0]
90004bec:	78fa      	ldrb	r2, [r7, #3]
90004bee:	4611      	mov	r1, r2
90004bf0:	4618      	mov	r0, r3
90004bf2:	f007 f9ce 	bl	9000bf92 <USB_ReadChInterrupts>
90004bf6:	4603      	mov	r3, r0
90004bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90004bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90004c00:	d11b      	bne.n	90004c3a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
90004c02:	78fb      	ldrb	r3, [r7, #3]
90004c04:	015a      	lsls	r2, r3, #5
90004c06:	693b      	ldr	r3, [r7, #16]
90004c08:	4413      	add	r3, r2
90004c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c0e:	461a      	mov	r2, r3
90004c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
90004c14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
90004c16:	78fa      	ldrb	r2, [r7, #3]
90004c18:	6879      	ldr	r1, [r7, #4]
90004c1a:	4613      	mov	r3, r2
90004c1c:	011b      	lsls	r3, r3, #4
90004c1e:	1a9b      	subs	r3, r3, r2
90004c20:	009b      	lsls	r3, r3, #2
90004c22:	440b      	add	r3, r1
90004c24:	334d      	adds	r3, #77	@ 0x4d
90004c26:	2208      	movs	r2, #8
90004c28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c2a:	687b      	ldr	r3, [r7, #4]
90004c2c:	681b      	ldr	r3, [r3, #0]
90004c2e:	78fa      	ldrb	r2, [r7, #3]
90004c30:	4611      	mov	r1, r2
90004c32:	4618      	mov	r0, r3
90004c34:	f007 fa2a 	bl	9000c08c <USB_HC_Halt>
90004c38:	e075      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004c3a:	687b      	ldr	r3, [r7, #4]
90004c3c:	681b      	ldr	r3, [r3, #0]
90004c3e:	78fa      	ldrb	r2, [r7, #3]
90004c40:	4611      	mov	r1, r2
90004c42:	4618      	mov	r0, r3
90004c44:	f007 f9a5 	bl	9000bf92 <USB_ReadChInterrupts>
90004c48:	4603      	mov	r3, r0
90004c4a:	f003 0308 	and.w	r3, r3, #8
90004c4e:	2b08      	cmp	r3, #8
90004c50:	d11a      	bne.n	90004c88 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004c52:	78fb      	ldrb	r3, [r7, #3]
90004c54:	015a      	lsls	r2, r3, #5
90004c56:	693b      	ldr	r3, [r7, #16]
90004c58:	4413      	add	r3, r2
90004c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c5e:	461a      	mov	r2, r3
90004c60:	2308      	movs	r3, #8
90004c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004c64:	78fa      	ldrb	r2, [r7, #3]
90004c66:	6879      	ldr	r1, [r7, #4]
90004c68:	4613      	mov	r3, r2
90004c6a:	011b      	lsls	r3, r3, #4
90004c6c:	1a9b      	subs	r3, r3, r2
90004c6e:	009b      	lsls	r3, r3, #2
90004c70:	440b      	add	r3, r1
90004c72:	334d      	adds	r3, #77	@ 0x4d
90004c74:	2206      	movs	r2, #6
90004c76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c78:	687b      	ldr	r3, [r7, #4]
90004c7a:	681b      	ldr	r3, [r3, #0]
90004c7c:	78fa      	ldrb	r2, [r7, #3]
90004c7e:	4611      	mov	r1, r2
90004c80:	4618      	mov	r0, r3
90004c82:	f007 fa03 	bl	9000c08c <USB_HC_Halt>
90004c86:	e04e      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004c88:	687b      	ldr	r3, [r7, #4]
90004c8a:	681b      	ldr	r3, [r3, #0]
90004c8c:	78fa      	ldrb	r2, [r7, #3]
90004c8e:	4611      	mov	r1, r2
90004c90:	4618      	mov	r0, r3
90004c92:	f007 f97e 	bl	9000bf92 <USB_ReadChInterrupts>
90004c96:	4603      	mov	r3, r0
90004c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004ca0:	d11b      	bne.n	90004cda <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90004ca2:	78fb      	ldrb	r3, [r7, #3]
90004ca4:	015a      	lsls	r2, r3, #5
90004ca6:	693b      	ldr	r3, [r7, #16]
90004ca8:	4413      	add	r3, r2
90004caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cae:	461a      	mov	r2, r3
90004cb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90004cb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90004cb6:	78fa      	ldrb	r2, [r7, #3]
90004cb8:	6879      	ldr	r1, [r7, #4]
90004cba:	4613      	mov	r3, r2
90004cbc:	011b      	lsls	r3, r3, #4
90004cbe:	1a9b      	subs	r3, r3, r2
90004cc0:	009b      	lsls	r3, r3, #2
90004cc2:	440b      	add	r3, r1
90004cc4:	334d      	adds	r3, #77	@ 0x4d
90004cc6:	2209      	movs	r2, #9
90004cc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004cca:	687b      	ldr	r3, [r7, #4]
90004ccc:	681b      	ldr	r3, [r3, #0]
90004cce:	78fa      	ldrb	r2, [r7, #3]
90004cd0:	4611      	mov	r1, r2
90004cd2:	4618      	mov	r0, r3
90004cd4:	f007 f9da 	bl	9000c08c <USB_HC_Halt>
90004cd8:	e025      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004cda:	687b      	ldr	r3, [r7, #4]
90004cdc:	681b      	ldr	r3, [r3, #0]
90004cde:	78fa      	ldrb	r2, [r7, #3]
90004ce0:	4611      	mov	r1, r2
90004ce2:	4618      	mov	r0, r3
90004ce4:	f007 f955 	bl	9000bf92 <USB_ReadChInterrupts>
90004ce8:	4603      	mov	r3, r0
90004cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90004cee:	2b80      	cmp	r3, #128	@ 0x80
90004cf0:	d119      	bne.n	90004d26 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90004cf2:	78fb      	ldrb	r3, [r7, #3]
90004cf4:	015a      	lsls	r2, r3, #5
90004cf6:	693b      	ldr	r3, [r7, #16]
90004cf8:	4413      	add	r3, r2
90004cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cfe:	461a      	mov	r2, r3
90004d00:	2380      	movs	r3, #128	@ 0x80
90004d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004d04:	78fa      	ldrb	r2, [r7, #3]
90004d06:	6879      	ldr	r1, [r7, #4]
90004d08:	4613      	mov	r3, r2
90004d0a:	011b      	lsls	r3, r3, #4
90004d0c:	1a9b      	subs	r3, r3, r2
90004d0e:	009b      	lsls	r3, r3, #2
90004d10:	440b      	add	r3, r1
90004d12:	334d      	adds	r3, #77	@ 0x4d
90004d14:	2207      	movs	r2, #7
90004d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d18:	687b      	ldr	r3, [r7, #4]
90004d1a:	681b      	ldr	r3, [r3, #0]
90004d1c:	78fa      	ldrb	r2, [r7, #3]
90004d1e:	4611      	mov	r1, r2
90004d20:	4618      	mov	r0, r3
90004d22:	f007 f9b3 	bl	9000c08c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004d26:	687b      	ldr	r3, [r7, #4]
90004d28:	681b      	ldr	r3, [r3, #0]
90004d2a:	78fa      	ldrb	r2, [r7, #3]
90004d2c:	4611      	mov	r1, r2
90004d2e:	4618      	mov	r0, r3
90004d30:	f007 f92f 	bl	9000bf92 <USB_ReadChInterrupts>
90004d34:	4603      	mov	r3, r0
90004d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004d3e:	d112      	bne.n	90004d66 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d40:	687b      	ldr	r3, [r7, #4]
90004d42:	681b      	ldr	r3, [r3, #0]
90004d44:	78fa      	ldrb	r2, [r7, #3]
90004d46:	4611      	mov	r1, r2
90004d48:	4618      	mov	r0, r3
90004d4a:	f007 f99f 	bl	9000c08c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004d4e:	78fb      	ldrb	r3, [r7, #3]
90004d50:	015a      	lsls	r2, r3, #5
90004d52:	693b      	ldr	r3, [r7, #16]
90004d54:	4413      	add	r3, r2
90004d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d5a:	461a      	mov	r2, r3
90004d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004d60:	6093      	str	r3, [r2, #8]
90004d62:	f000 bd75 	b.w	90005850 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004d66:	687b      	ldr	r3, [r7, #4]
90004d68:	681b      	ldr	r3, [r3, #0]
90004d6a:	78fa      	ldrb	r2, [r7, #3]
90004d6c:	4611      	mov	r1, r2
90004d6e:	4618      	mov	r0, r3
90004d70:	f007 f90f 	bl	9000bf92 <USB_ReadChInterrupts>
90004d74:	4603      	mov	r3, r0
90004d76:	f003 0301 	and.w	r3, r3, #1
90004d7a:	2b01      	cmp	r3, #1
90004d7c:	f040 8128 	bne.w	90004fd0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004d80:	78fb      	ldrb	r3, [r7, #3]
90004d82:	015a      	lsls	r2, r3, #5
90004d84:	693b      	ldr	r3, [r7, #16]
90004d86:	4413      	add	r3, r2
90004d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d8c:	461a      	mov	r2, r3
90004d8e:	2320      	movs	r3, #32
90004d90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90004d92:	78fa      	ldrb	r2, [r7, #3]
90004d94:	6879      	ldr	r1, [r7, #4]
90004d96:	4613      	mov	r3, r2
90004d98:	011b      	lsls	r3, r3, #4
90004d9a:	1a9b      	subs	r3, r3, r2
90004d9c:	009b      	lsls	r3, r3, #2
90004d9e:	440b      	add	r3, r1
90004da0:	331b      	adds	r3, #27
90004da2:	781b      	ldrb	r3, [r3, #0]
90004da4:	2b01      	cmp	r3, #1
90004da6:	d119      	bne.n	90004ddc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004da8:	78fa      	ldrb	r2, [r7, #3]
90004daa:	6879      	ldr	r1, [r7, #4]
90004dac:	4613      	mov	r3, r2
90004dae:	011b      	lsls	r3, r3, #4
90004db0:	1a9b      	subs	r3, r3, r2
90004db2:	009b      	lsls	r3, r3, #2
90004db4:	440b      	add	r3, r1
90004db6:	331b      	adds	r3, #27
90004db8:	2200      	movs	r2, #0
90004dba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004dbc:	78fb      	ldrb	r3, [r7, #3]
90004dbe:	015a      	lsls	r2, r3, #5
90004dc0:	693b      	ldr	r3, [r7, #16]
90004dc2:	4413      	add	r3, r2
90004dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004dc8:	685b      	ldr	r3, [r3, #4]
90004dca:	78fa      	ldrb	r2, [r7, #3]
90004dcc:	0151      	lsls	r1, r2, #5
90004dce:	693a      	ldr	r2, [r7, #16]
90004dd0:	440a      	add	r2, r1
90004dd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004dda:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90004ddc:	687b      	ldr	r3, [r7, #4]
90004dde:	799b      	ldrb	r3, [r3, #6]
90004de0:	2b00      	cmp	r3, #0
90004de2:	d01b      	beq.n	90004e1c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90004de4:	78fa      	ldrb	r2, [r7, #3]
90004de6:	6879      	ldr	r1, [r7, #4]
90004de8:	4613      	mov	r3, r2
90004dea:	011b      	lsls	r3, r3, #4
90004dec:	1a9b      	subs	r3, r3, r2
90004dee:	009b      	lsls	r3, r3, #2
90004df0:	440b      	add	r3, r1
90004df2:	3330      	adds	r3, #48	@ 0x30
90004df4:	6819      	ldr	r1, [r3, #0]
90004df6:	78fb      	ldrb	r3, [r7, #3]
90004df8:	015a      	lsls	r2, r3, #5
90004dfa:	693b      	ldr	r3, [r7, #16]
90004dfc:	4413      	add	r3, r2
90004dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e02:	691b      	ldr	r3, [r3, #16]
90004e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
90004e08:	78fa      	ldrb	r2, [r7, #3]
90004e0a:	1ac9      	subs	r1, r1, r3
90004e0c:	6878      	ldr	r0, [r7, #4]
90004e0e:	4613      	mov	r3, r2
90004e10:	011b      	lsls	r3, r3, #4
90004e12:	1a9b      	subs	r3, r3, r2
90004e14:	009b      	lsls	r3, r3, #2
90004e16:	4403      	add	r3, r0
90004e18:	3338      	adds	r3, #56	@ 0x38
90004e1a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004e1c:	78fa      	ldrb	r2, [r7, #3]
90004e1e:	6879      	ldr	r1, [r7, #4]
90004e20:	4613      	mov	r3, r2
90004e22:	011b      	lsls	r3, r3, #4
90004e24:	1a9b      	subs	r3, r3, r2
90004e26:	009b      	lsls	r3, r3, #2
90004e28:	440b      	add	r3, r1
90004e2a:	334d      	adds	r3, #77	@ 0x4d
90004e2c:	2201      	movs	r2, #1
90004e2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004e30:	78fa      	ldrb	r2, [r7, #3]
90004e32:	6879      	ldr	r1, [r7, #4]
90004e34:	4613      	mov	r3, r2
90004e36:	011b      	lsls	r3, r3, #4
90004e38:	1a9b      	subs	r3, r3, r2
90004e3a:	009b      	lsls	r3, r3, #2
90004e3c:	440b      	add	r3, r1
90004e3e:	3344      	adds	r3, #68	@ 0x44
90004e40:	2200      	movs	r2, #0
90004e42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004e44:	78fb      	ldrb	r3, [r7, #3]
90004e46:	015a      	lsls	r2, r3, #5
90004e48:	693b      	ldr	r3, [r7, #16]
90004e4a:	4413      	add	r3, r2
90004e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e50:	461a      	mov	r2, r3
90004e52:	2301      	movs	r3, #1
90004e54:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e56:	78fa      	ldrb	r2, [r7, #3]
90004e58:	6879      	ldr	r1, [r7, #4]
90004e5a:	4613      	mov	r3, r2
90004e5c:	011b      	lsls	r3, r3, #4
90004e5e:	1a9b      	subs	r3, r3, r2
90004e60:	009b      	lsls	r3, r3, #2
90004e62:	440b      	add	r3, r1
90004e64:	3326      	adds	r3, #38	@ 0x26
90004e66:	781b      	ldrb	r3, [r3, #0]
90004e68:	2b00      	cmp	r3, #0
90004e6a:	d00a      	beq.n	90004e82 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004e6c:	78fa      	ldrb	r2, [r7, #3]
90004e6e:	6879      	ldr	r1, [r7, #4]
90004e70:	4613      	mov	r3, r2
90004e72:	011b      	lsls	r3, r3, #4
90004e74:	1a9b      	subs	r3, r3, r2
90004e76:	009b      	lsls	r3, r3, #2
90004e78:	440b      	add	r3, r1
90004e7a:	3326      	adds	r3, #38	@ 0x26
90004e7c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e7e:	2b02      	cmp	r3, #2
90004e80:	d110      	bne.n	90004ea4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e82:	687b      	ldr	r3, [r7, #4]
90004e84:	681b      	ldr	r3, [r3, #0]
90004e86:	78fa      	ldrb	r2, [r7, #3]
90004e88:	4611      	mov	r1, r2
90004e8a:	4618      	mov	r0, r3
90004e8c:	f007 f8fe 	bl	9000c08c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004e90:	78fb      	ldrb	r3, [r7, #3]
90004e92:	015a      	lsls	r2, r3, #5
90004e94:	693b      	ldr	r3, [r7, #16]
90004e96:	4413      	add	r3, r2
90004e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e9c:	461a      	mov	r2, r3
90004e9e:	2310      	movs	r3, #16
90004ea0:	6093      	str	r3, [r2, #8]
90004ea2:	e03d      	b.n	90004f20 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004ea4:	78fa      	ldrb	r2, [r7, #3]
90004ea6:	6879      	ldr	r1, [r7, #4]
90004ea8:	4613      	mov	r3, r2
90004eaa:	011b      	lsls	r3, r3, #4
90004eac:	1a9b      	subs	r3, r3, r2
90004eae:	009b      	lsls	r3, r3, #2
90004eb0:	440b      	add	r3, r1
90004eb2:	3326      	adds	r3, #38	@ 0x26
90004eb4:	781b      	ldrb	r3, [r3, #0]
90004eb6:	2b03      	cmp	r3, #3
90004eb8:	d00a      	beq.n	90004ed0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
90004eba:	78fa      	ldrb	r2, [r7, #3]
90004ebc:	6879      	ldr	r1, [r7, #4]
90004ebe:	4613      	mov	r3, r2
90004ec0:	011b      	lsls	r3, r3, #4
90004ec2:	1a9b      	subs	r3, r3, r2
90004ec4:	009b      	lsls	r3, r3, #2
90004ec6:	440b      	add	r3, r1
90004ec8:	3326      	adds	r3, #38	@ 0x26
90004eca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004ecc:	2b01      	cmp	r3, #1
90004ece:	d127      	bne.n	90004f20 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90004ed0:	78fb      	ldrb	r3, [r7, #3]
90004ed2:	015a      	lsls	r2, r3, #5
90004ed4:	693b      	ldr	r3, [r7, #16]
90004ed6:	4413      	add	r3, r2
90004ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004edc:	681b      	ldr	r3, [r3, #0]
90004ede:	78fa      	ldrb	r2, [r7, #3]
90004ee0:	0151      	lsls	r1, r2, #5
90004ee2:	693a      	ldr	r2, [r7, #16]
90004ee4:	440a      	add	r2, r1
90004ee6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004eea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
90004eee:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004ef0:	78fa      	ldrb	r2, [r7, #3]
90004ef2:	6879      	ldr	r1, [r7, #4]
90004ef4:	4613      	mov	r3, r2
90004ef6:	011b      	lsls	r3, r3, #4
90004ef8:	1a9b      	subs	r3, r3, r2
90004efa:	009b      	lsls	r3, r3, #2
90004efc:	440b      	add	r3, r1
90004efe:	334c      	adds	r3, #76	@ 0x4c
90004f00:	2201      	movs	r2, #1
90004f02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004f04:	78fa      	ldrb	r2, [r7, #3]
90004f06:	6879      	ldr	r1, [r7, #4]
90004f08:	4613      	mov	r3, r2
90004f0a:	011b      	lsls	r3, r3, #4
90004f0c:	1a9b      	subs	r3, r3, r2
90004f0e:	009b      	lsls	r3, r3, #2
90004f10:	440b      	add	r3, r1
90004f12:	334c      	adds	r3, #76	@ 0x4c
90004f14:	781a      	ldrb	r2, [r3, #0]
90004f16:	78fb      	ldrb	r3, [r7, #3]
90004f18:	4619      	mov	r1, r3
90004f1a:	6878      	ldr	r0, [r7, #4]
90004f1c:	f7fc f9c0 	bl	900012a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
90004f20:	687b      	ldr	r3, [r7, #4]
90004f22:	799b      	ldrb	r3, [r3, #6]
90004f24:	2b01      	cmp	r3, #1
90004f26:	d13b      	bne.n	90004fa0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004f28:	78fa      	ldrb	r2, [r7, #3]
90004f2a:	6879      	ldr	r1, [r7, #4]
90004f2c:	4613      	mov	r3, r2
90004f2e:	011b      	lsls	r3, r3, #4
90004f30:	1a9b      	subs	r3, r3, r2
90004f32:	009b      	lsls	r3, r3, #2
90004f34:	440b      	add	r3, r1
90004f36:	3338      	adds	r3, #56	@ 0x38
90004f38:	6819      	ldr	r1, [r3, #0]
90004f3a:	78fa      	ldrb	r2, [r7, #3]
90004f3c:	6878      	ldr	r0, [r7, #4]
90004f3e:	4613      	mov	r3, r2
90004f40:	011b      	lsls	r3, r3, #4
90004f42:	1a9b      	subs	r3, r3, r2
90004f44:	009b      	lsls	r3, r3, #2
90004f46:	4403      	add	r3, r0
90004f48:	3328      	adds	r3, #40	@ 0x28
90004f4a:	881b      	ldrh	r3, [r3, #0]
90004f4c:	440b      	add	r3, r1
90004f4e:	1e59      	subs	r1, r3, #1
90004f50:	78fa      	ldrb	r2, [r7, #3]
90004f52:	6878      	ldr	r0, [r7, #4]
90004f54:	4613      	mov	r3, r2
90004f56:	011b      	lsls	r3, r3, #4
90004f58:	1a9b      	subs	r3, r3, r2
90004f5a:	009b      	lsls	r3, r3, #2
90004f5c:	4403      	add	r3, r0
90004f5e:	3328      	adds	r3, #40	@ 0x28
90004f60:	881b      	ldrh	r3, [r3, #0]
90004f62:	fbb1 f3f3 	udiv	r3, r1, r3
90004f66:	f003 0301 	and.w	r3, r3, #1
90004f6a:	2b00      	cmp	r3, #0
90004f6c:	f000 8470 	beq.w	90005850 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004f70:	78fa      	ldrb	r2, [r7, #3]
90004f72:	6879      	ldr	r1, [r7, #4]
90004f74:	4613      	mov	r3, r2
90004f76:	011b      	lsls	r3, r3, #4
90004f78:	1a9b      	subs	r3, r3, r2
90004f7a:	009b      	lsls	r3, r3, #2
90004f7c:	440b      	add	r3, r1
90004f7e:	333c      	adds	r3, #60	@ 0x3c
90004f80:	781b      	ldrb	r3, [r3, #0]
90004f82:	78fa      	ldrb	r2, [r7, #3]
90004f84:	f083 0301 	eor.w	r3, r3, #1
90004f88:	b2d8      	uxtb	r0, r3
90004f8a:	6879      	ldr	r1, [r7, #4]
90004f8c:	4613      	mov	r3, r2
90004f8e:	011b      	lsls	r3, r3, #4
90004f90:	1a9b      	subs	r3, r3, r2
90004f92:	009b      	lsls	r3, r3, #2
90004f94:	440b      	add	r3, r1
90004f96:	333c      	adds	r3, #60	@ 0x3c
90004f98:	4602      	mov	r2, r0
90004f9a:	701a      	strb	r2, [r3, #0]
90004f9c:	f000 bc58 	b.w	90005850 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004fa0:	78fa      	ldrb	r2, [r7, #3]
90004fa2:	6879      	ldr	r1, [r7, #4]
90004fa4:	4613      	mov	r3, r2
90004fa6:	011b      	lsls	r3, r3, #4
90004fa8:	1a9b      	subs	r3, r3, r2
90004faa:	009b      	lsls	r3, r3, #2
90004fac:	440b      	add	r3, r1
90004fae:	333c      	adds	r3, #60	@ 0x3c
90004fb0:	781b      	ldrb	r3, [r3, #0]
90004fb2:	78fa      	ldrb	r2, [r7, #3]
90004fb4:	f083 0301 	eor.w	r3, r3, #1
90004fb8:	b2d8      	uxtb	r0, r3
90004fba:	6879      	ldr	r1, [r7, #4]
90004fbc:	4613      	mov	r3, r2
90004fbe:	011b      	lsls	r3, r3, #4
90004fc0:	1a9b      	subs	r3, r3, r2
90004fc2:	009b      	lsls	r3, r3, #2
90004fc4:	440b      	add	r3, r1
90004fc6:	333c      	adds	r3, #60	@ 0x3c
90004fc8:	4602      	mov	r2, r0
90004fca:	701a      	strb	r2, [r3, #0]
90004fcc:	f000 bc40 	b.w	90005850 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004fd0:	687b      	ldr	r3, [r7, #4]
90004fd2:	681b      	ldr	r3, [r3, #0]
90004fd4:	78fa      	ldrb	r2, [r7, #3]
90004fd6:	4611      	mov	r1, r2
90004fd8:	4618      	mov	r0, r3
90004fda:	f006 ffda 	bl	9000bf92 <USB_ReadChInterrupts>
90004fde:	4603      	mov	r3, r0
90004fe0:	f003 0320 	and.w	r3, r3, #32
90004fe4:	2b20      	cmp	r3, #32
90004fe6:	d131      	bne.n	9000504c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004fe8:	78fb      	ldrb	r3, [r7, #3]
90004fea:	015a      	lsls	r2, r3, #5
90004fec:	693b      	ldr	r3, [r7, #16]
90004fee:	4413      	add	r3, r2
90004ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ff4:	461a      	mov	r2, r3
90004ff6:	2320      	movs	r3, #32
90004ff8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
90004ffa:	78fa      	ldrb	r2, [r7, #3]
90004ffc:	6879      	ldr	r1, [r7, #4]
90004ffe:	4613      	mov	r3, r2
90005000:	011b      	lsls	r3, r3, #4
90005002:	1a9b      	subs	r3, r3, r2
90005004:	009b      	lsls	r3, r3, #2
90005006:	440b      	add	r3, r1
90005008:	331a      	adds	r3, #26
9000500a:	781b      	ldrb	r3, [r3, #0]
9000500c:	2b01      	cmp	r3, #1
9000500e:	f040 841f 	bne.w	90005850 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
90005012:	78fa      	ldrb	r2, [r7, #3]
90005014:	6879      	ldr	r1, [r7, #4]
90005016:	4613      	mov	r3, r2
90005018:	011b      	lsls	r3, r3, #4
9000501a:	1a9b      	subs	r3, r3, r2
9000501c:	009b      	lsls	r3, r3, #2
9000501e:	440b      	add	r3, r1
90005020:	331b      	adds	r3, #27
90005022:	2201      	movs	r2, #1
90005024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90005026:	78fa      	ldrb	r2, [r7, #3]
90005028:	6879      	ldr	r1, [r7, #4]
9000502a:	4613      	mov	r3, r2
9000502c:	011b      	lsls	r3, r3, #4
9000502e:	1a9b      	subs	r3, r3, r2
90005030:	009b      	lsls	r3, r3, #2
90005032:	440b      	add	r3, r1
90005034:	334d      	adds	r3, #77	@ 0x4d
90005036:	2203      	movs	r2, #3
90005038:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000503a:	687b      	ldr	r3, [r7, #4]
9000503c:	681b      	ldr	r3, [r3, #0]
9000503e:	78fa      	ldrb	r2, [r7, #3]
90005040:	4611      	mov	r1, r2
90005042:	4618      	mov	r0, r3
90005044:	f007 f822 	bl	9000c08c <USB_HC_Halt>
90005048:	f000 bc02 	b.w	90005850 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000504c:	687b      	ldr	r3, [r7, #4]
9000504e:	681b      	ldr	r3, [r3, #0]
90005050:	78fa      	ldrb	r2, [r7, #3]
90005052:	4611      	mov	r1, r2
90005054:	4618      	mov	r0, r3
90005056:	f006 ff9c 	bl	9000bf92 <USB_ReadChInterrupts>
9000505a:	4603      	mov	r3, r0
9000505c:	f003 0302 	and.w	r3, r3, #2
90005060:	2b02      	cmp	r3, #2
90005062:	f040 8305 	bne.w	90005670 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005066:	78fb      	ldrb	r3, [r7, #3]
90005068:	015a      	lsls	r2, r3, #5
9000506a:	693b      	ldr	r3, [r7, #16]
9000506c:	4413      	add	r3, r2
9000506e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005072:	461a      	mov	r2, r3
90005074:	2302      	movs	r3, #2
90005076:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005078:	78fa      	ldrb	r2, [r7, #3]
9000507a:	6879      	ldr	r1, [r7, #4]
9000507c:	4613      	mov	r3, r2
9000507e:	011b      	lsls	r3, r3, #4
90005080:	1a9b      	subs	r3, r3, r2
90005082:	009b      	lsls	r3, r3, #2
90005084:	440b      	add	r3, r1
90005086:	334d      	adds	r3, #77	@ 0x4d
90005088:	781b      	ldrb	r3, [r3, #0]
9000508a:	2b01      	cmp	r3, #1
9000508c:	d114      	bne.n	900050b8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000508e:	78fa      	ldrb	r2, [r7, #3]
90005090:	6879      	ldr	r1, [r7, #4]
90005092:	4613      	mov	r3, r2
90005094:	011b      	lsls	r3, r3, #4
90005096:	1a9b      	subs	r3, r3, r2
90005098:	009b      	lsls	r3, r3, #2
9000509a:	440b      	add	r3, r1
9000509c:	334d      	adds	r3, #77	@ 0x4d
9000509e:	2202      	movs	r2, #2
900050a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900050a2:	78fa      	ldrb	r2, [r7, #3]
900050a4:	6879      	ldr	r1, [r7, #4]
900050a6:	4613      	mov	r3, r2
900050a8:	011b      	lsls	r3, r3, #4
900050aa:	1a9b      	subs	r3, r3, r2
900050ac:	009b      	lsls	r3, r3, #2
900050ae:	440b      	add	r3, r1
900050b0:	334c      	adds	r3, #76	@ 0x4c
900050b2:	2201      	movs	r2, #1
900050b4:	701a      	strb	r2, [r3, #0]
900050b6:	e2cc      	b.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
900050b8:	78fa      	ldrb	r2, [r7, #3]
900050ba:	6879      	ldr	r1, [r7, #4]
900050bc:	4613      	mov	r3, r2
900050be:	011b      	lsls	r3, r3, #4
900050c0:	1a9b      	subs	r3, r3, r2
900050c2:	009b      	lsls	r3, r3, #2
900050c4:	440b      	add	r3, r1
900050c6:	334d      	adds	r3, #77	@ 0x4d
900050c8:	781b      	ldrb	r3, [r3, #0]
900050ca:	2b06      	cmp	r3, #6
900050cc:	d114      	bne.n	900050f8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900050ce:	78fa      	ldrb	r2, [r7, #3]
900050d0:	6879      	ldr	r1, [r7, #4]
900050d2:	4613      	mov	r3, r2
900050d4:	011b      	lsls	r3, r3, #4
900050d6:	1a9b      	subs	r3, r3, r2
900050d8:	009b      	lsls	r3, r3, #2
900050da:	440b      	add	r3, r1
900050dc:	334d      	adds	r3, #77	@ 0x4d
900050de:	2202      	movs	r2, #2
900050e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900050e2:	78fa      	ldrb	r2, [r7, #3]
900050e4:	6879      	ldr	r1, [r7, #4]
900050e6:	4613      	mov	r3, r2
900050e8:	011b      	lsls	r3, r3, #4
900050ea:	1a9b      	subs	r3, r3, r2
900050ec:	009b      	lsls	r3, r3, #2
900050ee:	440b      	add	r3, r1
900050f0:	334c      	adds	r3, #76	@ 0x4c
900050f2:	2205      	movs	r2, #5
900050f4:	701a      	strb	r2, [r3, #0]
900050f6:	e2ac      	b.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900050f8:	78fa      	ldrb	r2, [r7, #3]
900050fa:	6879      	ldr	r1, [r7, #4]
900050fc:	4613      	mov	r3, r2
900050fe:	011b      	lsls	r3, r3, #4
90005100:	1a9b      	subs	r3, r3, r2
90005102:	009b      	lsls	r3, r3, #2
90005104:	440b      	add	r3, r1
90005106:	334d      	adds	r3, #77	@ 0x4d
90005108:	781b      	ldrb	r3, [r3, #0]
9000510a:	2b07      	cmp	r3, #7
9000510c:	d00b      	beq.n	90005126 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000510e:	78fa      	ldrb	r2, [r7, #3]
90005110:	6879      	ldr	r1, [r7, #4]
90005112:	4613      	mov	r3, r2
90005114:	011b      	lsls	r3, r3, #4
90005116:	1a9b      	subs	r3, r3, r2
90005118:	009b      	lsls	r3, r3, #2
9000511a:	440b      	add	r3, r1
9000511c:	334d      	adds	r3, #77	@ 0x4d
9000511e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005120:	2b09      	cmp	r3, #9
90005122:	f040 80a6 	bne.w	90005272 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005126:	78fa      	ldrb	r2, [r7, #3]
90005128:	6879      	ldr	r1, [r7, #4]
9000512a:	4613      	mov	r3, r2
9000512c:	011b      	lsls	r3, r3, #4
9000512e:	1a9b      	subs	r3, r3, r2
90005130:	009b      	lsls	r3, r3, #2
90005132:	440b      	add	r3, r1
90005134:	334d      	adds	r3, #77	@ 0x4d
90005136:	2202      	movs	r2, #2
90005138:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000513a:	78fa      	ldrb	r2, [r7, #3]
9000513c:	6879      	ldr	r1, [r7, #4]
9000513e:	4613      	mov	r3, r2
90005140:	011b      	lsls	r3, r3, #4
90005142:	1a9b      	subs	r3, r3, r2
90005144:	009b      	lsls	r3, r3, #2
90005146:	440b      	add	r3, r1
90005148:	3344      	adds	r3, #68	@ 0x44
9000514a:	681b      	ldr	r3, [r3, #0]
9000514c:	1c59      	adds	r1, r3, #1
9000514e:	6878      	ldr	r0, [r7, #4]
90005150:	4613      	mov	r3, r2
90005152:	011b      	lsls	r3, r3, #4
90005154:	1a9b      	subs	r3, r3, r2
90005156:	009b      	lsls	r3, r3, #2
90005158:	4403      	add	r3, r0
9000515a:	3344      	adds	r3, #68	@ 0x44
9000515c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000515e:	78fa      	ldrb	r2, [r7, #3]
90005160:	6879      	ldr	r1, [r7, #4]
90005162:	4613      	mov	r3, r2
90005164:	011b      	lsls	r3, r3, #4
90005166:	1a9b      	subs	r3, r3, r2
90005168:	009b      	lsls	r3, r3, #2
9000516a:	440b      	add	r3, r1
9000516c:	3344      	adds	r3, #68	@ 0x44
9000516e:	681b      	ldr	r3, [r3, #0]
90005170:	2b02      	cmp	r3, #2
90005172:	d943      	bls.n	900051fc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005174:	78fa      	ldrb	r2, [r7, #3]
90005176:	6879      	ldr	r1, [r7, #4]
90005178:	4613      	mov	r3, r2
9000517a:	011b      	lsls	r3, r3, #4
9000517c:	1a9b      	subs	r3, r3, r2
9000517e:	009b      	lsls	r3, r3, #2
90005180:	440b      	add	r3, r1
90005182:	3344      	adds	r3, #68	@ 0x44
90005184:	2200      	movs	r2, #0
90005186:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90005188:	78fa      	ldrb	r2, [r7, #3]
9000518a:	6879      	ldr	r1, [r7, #4]
9000518c:	4613      	mov	r3, r2
9000518e:	011b      	lsls	r3, r3, #4
90005190:	1a9b      	subs	r3, r3, r2
90005192:	009b      	lsls	r3, r3, #2
90005194:	440b      	add	r3, r1
90005196:	331a      	adds	r3, #26
90005198:	781b      	ldrb	r3, [r3, #0]
9000519a:	2b01      	cmp	r3, #1
9000519c:	d123      	bne.n	900051e6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
9000519e:	78fa      	ldrb	r2, [r7, #3]
900051a0:	6879      	ldr	r1, [r7, #4]
900051a2:	4613      	mov	r3, r2
900051a4:	011b      	lsls	r3, r3, #4
900051a6:	1a9b      	subs	r3, r3, r2
900051a8:	009b      	lsls	r3, r3, #2
900051aa:	440b      	add	r3, r1
900051ac:	331b      	adds	r3, #27
900051ae:	2200      	movs	r2, #0
900051b0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
900051b2:	78fa      	ldrb	r2, [r7, #3]
900051b4:	6879      	ldr	r1, [r7, #4]
900051b6:	4613      	mov	r3, r2
900051b8:	011b      	lsls	r3, r3, #4
900051ba:	1a9b      	subs	r3, r3, r2
900051bc:	009b      	lsls	r3, r3, #2
900051be:	440b      	add	r3, r1
900051c0:	331c      	adds	r3, #28
900051c2:	2200      	movs	r2, #0
900051c4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900051c6:	78fb      	ldrb	r3, [r7, #3]
900051c8:	015a      	lsls	r2, r3, #5
900051ca:	693b      	ldr	r3, [r7, #16]
900051cc:	4413      	add	r3, r2
900051ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051d2:	685b      	ldr	r3, [r3, #4]
900051d4:	78fa      	ldrb	r2, [r7, #3]
900051d6:	0151      	lsls	r1, r2, #5
900051d8:	693a      	ldr	r2, [r7, #16]
900051da:	440a      	add	r2, r1
900051dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900051e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900051e4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
900051e6:	78fa      	ldrb	r2, [r7, #3]
900051e8:	6879      	ldr	r1, [r7, #4]
900051ea:	4613      	mov	r3, r2
900051ec:	011b      	lsls	r3, r3, #4
900051ee:	1a9b      	subs	r3, r3, r2
900051f0:	009b      	lsls	r3, r3, #2
900051f2:	440b      	add	r3, r1
900051f4:	334c      	adds	r3, #76	@ 0x4c
900051f6:	2204      	movs	r2, #4
900051f8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900051fa:	e229      	b.n	90005650 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900051fc:	78fa      	ldrb	r2, [r7, #3]
900051fe:	6879      	ldr	r1, [r7, #4]
90005200:	4613      	mov	r3, r2
90005202:	011b      	lsls	r3, r3, #4
90005204:	1a9b      	subs	r3, r3, r2
90005206:	009b      	lsls	r3, r3, #2
90005208:	440b      	add	r3, r1
9000520a:	334c      	adds	r3, #76	@ 0x4c
9000520c:	2202      	movs	r2, #2
9000520e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005210:	78fa      	ldrb	r2, [r7, #3]
90005212:	6879      	ldr	r1, [r7, #4]
90005214:	4613      	mov	r3, r2
90005216:	011b      	lsls	r3, r3, #4
90005218:	1a9b      	subs	r3, r3, r2
9000521a:	009b      	lsls	r3, r3, #2
9000521c:	440b      	add	r3, r1
9000521e:	3326      	adds	r3, #38	@ 0x26
90005220:	781b      	ldrb	r3, [r3, #0]
90005222:	2b00      	cmp	r3, #0
90005224:	d00b      	beq.n	9000523e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90005226:	78fa      	ldrb	r2, [r7, #3]
90005228:	6879      	ldr	r1, [r7, #4]
9000522a:	4613      	mov	r3, r2
9000522c:	011b      	lsls	r3, r3, #4
9000522e:	1a9b      	subs	r3, r3, r2
90005230:	009b      	lsls	r3, r3, #2
90005232:	440b      	add	r3, r1
90005234:	3326      	adds	r3, #38	@ 0x26
90005236:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005238:	2b02      	cmp	r3, #2
9000523a:	f040 8209 	bne.w	90005650 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
9000523e:	78fb      	ldrb	r3, [r7, #3]
90005240:	015a      	lsls	r2, r3, #5
90005242:	693b      	ldr	r3, [r7, #16]
90005244:	4413      	add	r3, r2
90005246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000524a:	681b      	ldr	r3, [r3, #0]
9000524c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000524e:	68fb      	ldr	r3, [r7, #12]
90005250:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005254:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90005256:	68fb      	ldr	r3, [r7, #12]
90005258:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000525c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000525e:	78fb      	ldrb	r3, [r7, #3]
90005260:	015a      	lsls	r2, r3, #5
90005262:	693b      	ldr	r3, [r7, #16]
90005264:	4413      	add	r3, r2
90005266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000526a:	461a      	mov	r2, r3
9000526c:	68fb      	ldr	r3, [r7, #12]
9000526e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005270:	e1ee      	b.n	90005650 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90005272:	78fa      	ldrb	r2, [r7, #3]
90005274:	6879      	ldr	r1, [r7, #4]
90005276:	4613      	mov	r3, r2
90005278:	011b      	lsls	r3, r3, #4
9000527a:	1a9b      	subs	r3, r3, r2
9000527c:	009b      	lsls	r3, r3, #2
9000527e:	440b      	add	r3, r1
90005280:	334d      	adds	r3, #77	@ 0x4d
90005282:	781b      	ldrb	r3, [r3, #0]
90005284:	2b05      	cmp	r3, #5
90005286:	f040 80c8 	bne.w	9000541a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000528a:	78fa      	ldrb	r2, [r7, #3]
9000528c:	6879      	ldr	r1, [r7, #4]
9000528e:	4613      	mov	r3, r2
90005290:	011b      	lsls	r3, r3, #4
90005292:	1a9b      	subs	r3, r3, r2
90005294:	009b      	lsls	r3, r3, #2
90005296:	440b      	add	r3, r1
90005298:	334d      	adds	r3, #77	@ 0x4d
9000529a:	2202      	movs	r2, #2
9000529c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000529e:	78fa      	ldrb	r2, [r7, #3]
900052a0:	6879      	ldr	r1, [r7, #4]
900052a2:	4613      	mov	r3, r2
900052a4:	011b      	lsls	r3, r3, #4
900052a6:	1a9b      	subs	r3, r3, r2
900052a8:	009b      	lsls	r3, r3, #2
900052aa:	440b      	add	r3, r1
900052ac:	331b      	adds	r3, #27
900052ae:	781b      	ldrb	r3, [r3, #0]
900052b0:	2b01      	cmp	r3, #1
900052b2:	f040 81ce 	bne.w	90005652 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
900052b6:	78fa      	ldrb	r2, [r7, #3]
900052b8:	6879      	ldr	r1, [r7, #4]
900052ba:	4613      	mov	r3, r2
900052bc:	011b      	lsls	r3, r3, #4
900052be:	1a9b      	subs	r3, r3, r2
900052c0:	009b      	lsls	r3, r3, #2
900052c2:	440b      	add	r3, r1
900052c4:	3326      	adds	r3, #38	@ 0x26
900052c6:	781b      	ldrb	r3, [r3, #0]
900052c8:	2b03      	cmp	r3, #3
900052ca:	d16b      	bne.n	900053a4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
900052cc:	78fa      	ldrb	r2, [r7, #3]
900052ce:	6879      	ldr	r1, [r7, #4]
900052d0:	4613      	mov	r3, r2
900052d2:	011b      	lsls	r3, r3, #4
900052d4:	1a9b      	subs	r3, r3, r2
900052d6:	009b      	lsls	r3, r3, #2
900052d8:	440b      	add	r3, r1
900052da:	3348      	adds	r3, #72	@ 0x48
900052dc:	681b      	ldr	r3, [r3, #0]
900052de:	1c59      	adds	r1, r3, #1
900052e0:	6878      	ldr	r0, [r7, #4]
900052e2:	4613      	mov	r3, r2
900052e4:	011b      	lsls	r3, r3, #4
900052e6:	1a9b      	subs	r3, r3, r2
900052e8:	009b      	lsls	r3, r3, #2
900052ea:	4403      	add	r3, r0
900052ec:	3348      	adds	r3, #72	@ 0x48
900052ee:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
900052f0:	78fa      	ldrb	r2, [r7, #3]
900052f2:	6879      	ldr	r1, [r7, #4]
900052f4:	4613      	mov	r3, r2
900052f6:	011b      	lsls	r3, r3, #4
900052f8:	1a9b      	subs	r3, r3, r2
900052fa:	009b      	lsls	r3, r3, #2
900052fc:	440b      	add	r3, r1
900052fe:	3348      	adds	r3, #72	@ 0x48
90005300:	681b      	ldr	r3, [r3, #0]
90005302:	2b02      	cmp	r3, #2
90005304:	d943      	bls.n	9000538e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90005306:	78fa      	ldrb	r2, [r7, #3]
90005308:	6879      	ldr	r1, [r7, #4]
9000530a:	4613      	mov	r3, r2
9000530c:	011b      	lsls	r3, r3, #4
9000530e:	1a9b      	subs	r3, r3, r2
90005310:	009b      	lsls	r3, r3, #2
90005312:	440b      	add	r3, r1
90005314:	3348      	adds	r3, #72	@ 0x48
90005316:	2200      	movs	r2, #0
90005318:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
9000531a:	78fa      	ldrb	r2, [r7, #3]
9000531c:	6879      	ldr	r1, [r7, #4]
9000531e:	4613      	mov	r3, r2
90005320:	011b      	lsls	r3, r3, #4
90005322:	1a9b      	subs	r3, r3, r2
90005324:	009b      	lsls	r3, r3, #2
90005326:	440b      	add	r3, r1
90005328:	331b      	adds	r3, #27
9000532a:	2200      	movs	r2, #0
9000532c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
9000532e:	78fa      	ldrb	r2, [r7, #3]
90005330:	6879      	ldr	r1, [r7, #4]
90005332:	4613      	mov	r3, r2
90005334:	011b      	lsls	r3, r3, #4
90005336:	1a9b      	subs	r3, r3, r2
90005338:	009b      	lsls	r3, r3, #2
9000533a:	440b      	add	r3, r1
9000533c:	3344      	adds	r3, #68	@ 0x44
9000533e:	681b      	ldr	r3, [r3, #0]
90005340:	2b02      	cmp	r3, #2
90005342:	d809      	bhi.n	90005358 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90005344:	78fa      	ldrb	r2, [r7, #3]
90005346:	6879      	ldr	r1, [r7, #4]
90005348:	4613      	mov	r3, r2
9000534a:	011b      	lsls	r3, r3, #4
9000534c:	1a9b      	subs	r3, r3, r2
9000534e:	009b      	lsls	r3, r3, #2
90005350:	440b      	add	r3, r1
90005352:	331c      	adds	r3, #28
90005354:	2201      	movs	r2, #1
90005356:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005358:	78fb      	ldrb	r3, [r7, #3]
9000535a:	015a      	lsls	r2, r3, #5
9000535c:	693b      	ldr	r3, [r7, #16]
9000535e:	4413      	add	r3, r2
90005360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005364:	685b      	ldr	r3, [r3, #4]
90005366:	78fa      	ldrb	r2, [r7, #3]
90005368:	0151      	lsls	r1, r2, #5
9000536a:	693a      	ldr	r2, [r7, #16]
9000536c:	440a      	add	r2, r1
9000536e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005376:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90005378:	78fa      	ldrb	r2, [r7, #3]
9000537a:	6879      	ldr	r1, [r7, #4]
9000537c:	4613      	mov	r3, r2
9000537e:	011b      	lsls	r3, r3, #4
90005380:	1a9b      	subs	r3, r3, r2
90005382:	009b      	lsls	r3, r3, #2
90005384:	440b      	add	r3, r1
90005386:	334c      	adds	r3, #76	@ 0x4c
90005388:	2204      	movs	r2, #4
9000538a:	701a      	strb	r2, [r3, #0]
9000538c:	e014      	b.n	900053b8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000538e:	78fa      	ldrb	r2, [r7, #3]
90005390:	6879      	ldr	r1, [r7, #4]
90005392:	4613      	mov	r3, r2
90005394:	011b      	lsls	r3, r3, #4
90005396:	1a9b      	subs	r3, r3, r2
90005398:	009b      	lsls	r3, r3, #2
9000539a:	440b      	add	r3, r1
9000539c:	334c      	adds	r3, #76	@ 0x4c
9000539e:	2202      	movs	r2, #2
900053a0:	701a      	strb	r2, [r3, #0]
900053a2:	e009      	b.n	900053b8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
900053a4:	78fa      	ldrb	r2, [r7, #3]
900053a6:	6879      	ldr	r1, [r7, #4]
900053a8:	4613      	mov	r3, r2
900053aa:	011b      	lsls	r3, r3, #4
900053ac:	1a9b      	subs	r3, r3, r2
900053ae:	009b      	lsls	r3, r3, #2
900053b0:	440b      	add	r3, r1
900053b2:	334c      	adds	r3, #76	@ 0x4c
900053b4:	2202      	movs	r2, #2
900053b6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900053b8:	78fa      	ldrb	r2, [r7, #3]
900053ba:	6879      	ldr	r1, [r7, #4]
900053bc:	4613      	mov	r3, r2
900053be:	011b      	lsls	r3, r3, #4
900053c0:	1a9b      	subs	r3, r3, r2
900053c2:	009b      	lsls	r3, r3, #2
900053c4:	440b      	add	r3, r1
900053c6:	3326      	adds	r3, #38	@ 0x26
900053c8:	781b      	ldrb	r3, [r3, #0]
900053ca:	2b00      	cmp	r3, #0
900053cc:	d00b      	beq.n	900053e6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900053ce:	78fa      	ldrb	r2, [r7, #3]
900053d0:	6879      	ldr	r1, [r7, #4]
900053d2:	4613      	mov	r3, r2
900053d4:	011b      	lsls	r3, r3, #4
900053d6:	1a9b      	subs	r3, r3, r2
900053d8:	009b      	lsls	r3, r3, #2
900053da:	440b      	add	r3, r1
900053dc:	3326      	adds	r3, #38	@ 0x26
900053de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900053e0:	2b02      	cmp	r3, #2
900053e2:	f040 8136 	bne.w	90005652 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900053e6:	78fb      	ldrb	r3, [r7, #3]
900053e8:	015a      	lsls	r2, r3, #5
900053ea:	693b      	ldr	r3, [r7, #16]
900053ec:	4413      	add	r3, r2
900053ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053f2:	681b      	ldr	r3, [r3, #0]
900053f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900053f6:	68fb      	ldr	r3, [r7, #12]
900053f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900053fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900053fe:	68fb      	ldr	r3, [r7, #12]
90005400:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005404:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90005406:	78fb      	ldrb	r3, [r7, #3]
90005408:	015a      	lsls	r2, r3, #5
9000540a:	693b      	ldr	r3, [r7, #16]
9000540c:	4413      	add	r3, r2
9000540e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005412:	461a      	mov	r2, r3
90005414:	68fb      	ldr	r3, [r7, #12]
90005416:	6013      	str	r3, [r2, #0]
90005418:	e11b      	b.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
9000541a:	78fa      	ldrb	r2, [r7, #3]
9000541c:	6879      	ldr	r1, [r7, #4]
9000541e:	4613      	mov	r3, r2
90005420:	011b      	lsls	r3, r3, #4
90005422:	1a9b      	subs	r3, r3, r2
90005424:	009b      	lsls	r3, r3, #2
90005426:	440b      	add	r3, r1
90005428:	334d      	adds	r3, #77	@ 0x4d
9000542a:	781b      	ldrb	r3, [r3, #0]
9000542c:	2b03      	cmp	r3, #3
9000542e:	f040 8081 	bne.w	90005534 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005432:	78fa      	ldrb	r2, [r7, #3]
90005434:	6879      	ldr	r1, [r7, #4]
90005436:	4613      	mov	r3, r2
90005438:	011b      	lsls	r3, r3, #4
9000543a:	1a9b      	subs	r3, r3, r2
9000543c:	009b      	lsls	r3, r3, #2
9000543e:	440b      	add	r3, r1
90005440:	334d      	adds	r3, #77	@ 0x4d
90005442:	2202      	movs	r2, #2
90005444:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005446:	78fa      	ldrb	r2, [r7, #3]
90005448:	6879      	ldr	r1, [r7, #4]
9000544a:	4613      	mov	r3, r2
9000544c:	011b      	lsls	r3, r3, #4
9000544e:	1a9b      	subs	r3, r3, r2
90005450:	009b      	lsls	r3, r3, #2
90005452:	440b      	add	r3, r1
90005454:	331b      	adds	r3, #27
90005456:	781b      	ldrb	r3, [r3, #0]
90005458:	2b01      	cmp	r3, #1
9000545a:	f040 80fa 	bne.w	90005652 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000545e:	78fa      	ldrb	r2, [r7, #3]
90005460:	6879      	ldr	r1, [r7, #4]
90005462:	4613      	mov	r3, r2
90005464:	011b      	lsls	r3, r3, #4
90005466:	1a9b      	subs	r3, r3, r2
90005468:	009b      	lsls	r3, r3, #2
9000546a:	440b      	add	r3, r1
9000546c:	334c      	adds	r3, #76	@ 0x4c
9000546e:	2202      	movs	r2, #2
90005470:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90005472:	78fb      	ldrb	r3, [r7, #3]
90005474:	015a      	lsls	r2, r3, #5
90005476:	693b      	ldr	r3, [r7, #16]
90005478:	4413      	add	r3, r2
9000547a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000547e:	685b      	ldr	r3, [r3, #4]
90005480:	78fa      	ldrb	r2, [r7, #3]
90005482:	0151      	lsls	r1, r2, #5
90005484:	693a      	ldr	r2, [r7, #16]
90005486:	440a      	add	r2, r1
90005488:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000548c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90005490:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90005492:	78fb      	ldrb	r3, [r7, #3]
90005494:	015a      	lsls	r2, r3, #5
90005496:	693b      	ldr	r3, [r7, #16]
90005498:	4413      	add	r3, r2
9000549a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000549e:	68db      	ldr	r3, [r3, #12]
900054a0:	78fa      	ldrb	r2, [r7, #3]
900054a2:	0151      	lsls	r1, r2, #5
900054a4:	693a      	ldr	r2, [r7, #16]
900054a6:	440a      	add	r2, r1
900054a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900054ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
900054b0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
900054b2:	78fb      	ldrb	r3, [r7, #3]
900054b4:	015a      	lsls	r2, r3, #5
900054b6:	693b      	ldr	r3, [r7, #16]
900054b8:	4413      	add	r3, r2
900054ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054be:	68db      	ldr	r3, [r3, #12]
900054c0:	78fa      	ldrb	r2, [r7, #3]
900054c2:	0151      	lsls	r1, r2, #5
900054c4:	693a      	ldr	r2, [r7, #16]
900054c6:	440a      	add	r2, r1
900054c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900054cc:	f023 0320 	bic.w	r3, r3, #32
900054d0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900054d2:	78fa      	ldrb	r2, [r7, #3]
900054d4:	6879      	ldr	r1, [r7, #4]
900054d6:	4613      	mov	r3, r2
900054d8:	011b      	lsls	r3, r3, #4
900054da:	1a9b      	subs	r3, r3, r2
900054dc:	009b      	lsls	r3, r3, #2
900054de:	440b      	add	r3, r1
900054e0:	3326      	adds	r3, #38	@ 0x26
900054e2:	781b      	ldrb	r3, [r3, #0]
900054e4:	2b00      	cmp	r3, #0
900054e6:	d00b      	beq.n	90005500 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900054e8:	78fa      	ldrb	r2, [r7, #3]
900054ea:	6879      	ldr	r1, [r7, #4]
900054ec:	4613      	mov	r3, r2
900054ee:	011b      	lsls	r3, r3, #4
900054f0:	1a9b      	subs	r3, r3, r2
900054f2:	009b      	lsls	r3, r3, #2
900054f4:	440b      	add	r3, r1
900054f6:	3326      	adds	r3, #38	@ 0x26
900054f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900054fa:	2b02      	cmp	r3, #2
900054fc:	f040 80a9 	bne.w	90005652 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90005500:	78fb      	ldrb	r3, [r7, #3]
90005502:	015a      	lsls	r2, r3, #5
90005504:	693b      	ldr	r3, [r7, #16]
90005506:	4413      	add	r3, r2
90005508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000550c:	681b      	ldr	r3, [r3, #0]
9000550e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005510:	68fb      	ldr	r3, [r7, #12]
90005512:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005516:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90005518:	68fb      	ldr	r3, [r7, #12]
9000551a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000551e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90005520:	78fb      	ldrb	r3, [r7, #3]
90005522:	015a      	lsls	r2, r3, #5
90005524:	693b      	ldr	r3, [r7, #16]
90005526:	4413      	add	r3, r2
90005528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000552c:	461a      	mov	r2, r3
9000552e:	68fb      	ldr	r3, [r7, #12]
90005530:	6013      	str	r3, [r2, #0]
90005532:	e08e      	b.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005534:	78fa      	ldrb	r2, [r7, #3]
90005536:	6879      	ldr	r1, [r7, #4]
90005538:	4613      	mov	r3, r2
9000553a:	011b      	lsls	r3, r3, #4
9000553c:	1a9b      	subs	r3, r3, r2
9000553e:	009b      	lsls	r3, r3, #2
90005540:	440b      	add	r3, r1
90005542:	334d      	adds	r3, #77	@ 0x4d
90005544:	781b      	ldrb	r3, [r3, #0]
90005546:	2b04      	cmp	r3, #4
90005548:	d143      	bne.n	900055d2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000554a:	78fa      	ldrb	r2, [r7, #3]
9000554c:	6879      	ldr	r1, [r7, #4]
9000554e:	4613      	mov	r3, r2
90005550:	011b      	lsls	r3, r3, #4
90005552:	1a9b      	subs	r3, r3, r2
90005554:	009b      	lsls	r3, r3, #2
90005556:	440b      	add	r3, r1
90005558:	334d      	adds	r3, #77	@ 0x4d
9000555a:	2202      	movs	r2, #2
9000555c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000555e:	78fa      	ldrb	r2, [r7, #3]
90005560:	6879      	ldr	r1, [r7, #4]
90005562:	4613      	mov	r3, r2
90005564:	011b      	lsls	r3, r3, #4
90005566:	1a9b      	subs	r3, r3, r2
90005568:	009b      	lsls	r3, r3, #2
9000556a:	440b      	add	r3, r1
9000556c:	334c      	adds	r3, #76	@ 0x4c
9000556e:	2202      	movs	r2, #2
90005570:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005572:	78fa      	ldrb	r2, [r7, #3]
90005574:	6879      	ldr	r1, [r7, #4]
90005576:	4613      	mov	r3, r2
90005578:	011b      	lsls	r3, r3, #4
9000557a:	1a9b      	subs	r3, r3, r2
9000557c:	009b      	lsls	r3, r3, #2
9000557e:	440b      	add	r3, r1
90005580:	3326      	adds	r3, #38	@ 0x26
90005582:	781b      	ldrb	r3, [r3, #0]
90005584:	2b00      	cmp	r3, #0
90005586:	d00a      	beq.n	9000559e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90005588:	78fa      	ldrb	r2, [r7, #3]
9000558a:	6879      	ldr	r1, [r7, #4]
9000558c:	4613      	mov	r3, r2
9000558e:	011b      	lsls	r3, r3, #4
90005590:	1a9b      	subs	r3, r3, r2
90005592:	009b      	lsls	r3, r3, #2
90005594:	440b      	add	r3, r1
90005596:	3326      	adds	r3, #38	@ 0x26
90005598:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000559a:	2b02      	cmp	r3, #2
9000559c:	d159      	bne.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000559e:	78fb      	ldrb	r3, [r7, #3]
900055a0:	015a      	lsls	r2, r3, #5
900055a2:	693b      	ldr	r3, [r7, #16]
900055a4:	4413      	add	r3, r2
900055a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900055aa:	681b      	ldr	r3, [r3, #0]
900055ac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900055ae:	68fb      	ldr	r3, [r7, #12]
900055b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900055b4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
900055b6:	68fb      	ldr	r3, [r7, #12]
900055b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900055bc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
900055be:	78fb      	ldrb	r3, [r7, #3]
900055c0:	015a      	lsls	r2, r3, #5
900055c2:	693b      	ldr	r3, [r7, #16]
900055c4:	4413      	add	r3, r2
900055c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900055ca:	461a      	mov	r2, r3
900055cc:	68fb      	ldr	r3, [r7, #12]
900055ce:	6013      	str	r3, [r2, #0]
900055d0:	e03f      	b.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
900055d2:	78fa      	ldrb	r2, [r7, #3]
900055d4:	6879      	ldr	r1, [r7, #4]
900055d6:	4613      	mov	r3, r2
900055d8:	011b      	lsls	r3, r3, #4
900055da:	1a9b      	subs	r3, r3, r2
900055dc:	009b      	lsls	r3, r3, #2
900055de:	440b      	add	r3, r1
900055e0:	334d      	adds	r3, #77	@ 0x4d
900055e2:	781b      	ldrb	r3, [r3, #0]
900055e4:	2b08      	cmp	r3, #8
900055e6:	d126      	bne.n	90005636 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900055e8:	78fa      	ldrb	r2, [r7, #3]
900055ea:	6879      	ldr	r1, [r7, #4]
900055ec:	4613      	mov	r3, r2
900055ee:	011b      	lsls	r3, r3, #4
900055f0:	1a9b      	subs	r3, r3, r2
900055f2:	009b      	lsls	r3, r3, #2
900055f4:	440b      	add	r3, r1
900055f6:	334d      	adds	r3, #77	@ 0x4d
900055f8:	2202      	movs	r2, #2
900055fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900055fc:	78fa      	ldrb	r2, [r7, #3]
900055fe:	6879      	ldr	r1, [r7, #4]
90005600:	4613      	mov	r3, r2
90005602:	011b      	lsls	r3, r3, #4
90005604:	1a9b      	subs	r3, r3, r2
90005606:	009b      	lsls	r3, r3, #2
90005608:	440b      	add	r3, r1
9000560a:	3344      	adds	r3, #68	@ 0x44
9000560c:	681b      	ldr	r3, [r3, #0]
9000560e:	1c59      	adds	r1, r3, #1
90005610:	6878      	ldr	r0, [r7, #4]
90005612:	4613      	mov	r3, r2
90005614:	011b      	lsls	r3, r3, #4
90005616:	1a9b      	subs	r3, r3, r2
90005618:	009b      	lsls	r3, r3, #2
9000561a:	4403      	add	r3, r0
9000561c:	3344      	adds	r3, #68	@ 0x44
9000561e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90005620:	78fa      	ldrb	r2, [r7, #3]
90005622:	6879      	ldr	r1, [r7, #4]
90005624:	4613      	mov	r3, r2
90005626:	011b      	lsls	r3, r3, #4
90005628:	1a9b      	subs	r3, r3, r2
9000562a:	009b      	lsls	r3, r3, #2
9000562c:	440b      	add	r3, r1
9000562e:	334c      	adds	r3, #76	@ 0x4c
90005630:	2204      	movs	r2, #4
90005632:	701a      	strb	r2, [r3, #0]
90005634:	e00d      	b.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90005636:	78fa      	ldrb	r2, [r7, #3]
90005638:	6879      	ldr	r1, [r7, #4]
9000563a:	4613      	mov	r3, r2
9000563c:	011b      	lsls	r3, r3, #4
9000563e:	1a9b      	subs	r3, r3, r2
90005640:	009b      	lsls	r3, r3, #2
90005642:	440b      	add	r3, r1
90005644:	334d      	adds	r3, #77	@ 0x4d
90005646:	781b      	ldrb	r3, [r3, #0]
90005648:	2b02      	cmp	r3, #2
9000564a:	f000 8100 	beq.w	9000584e <HCD_HC_IN_IRQHandler+0xcca>
9000564e:	e000      	b.n	90005652 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005650:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005652:	78fa      	ldrb	r2, [r7, #3]
90005654:	6879      	ldr	r1, [r7, #4]
90005656:	4613      	mov	r3, r2
90005658:	011b      	lsls	r3, r3, #4
9000565a:	1a9b      	subs	r3, r3, r2
9000565c:	009b      	lsls	r3, r3, #2
9000565e:	440b      	add	r3, r1
90005660:	334c      	adds	r3, #76	@ 0x4c
90005662:	781a      	ldrb	r2, [r3, #0]
90005664:	78fb      	ldrb	r3, [r7, #3]
90005666:	4619      	mov	r1, r3
90005668:	6878      	ldr	r0, [r7, #4]
9000566a:	f7fb fe19 	bl	900012a0 <HAL_HCD_HC_NotifyURBChange_Callback>
9000566e:	e0ef      	b.n	90005850 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005670:	687b      	ldr	r3, [r7, #4]
90005672:	681b      	ldr	r3, [r3, #0]
90005674:	78fa      	ldrb	r2, [r7, #3]
90005676:	4611      	mov	r1, r2
90005678:	4618      	mov	r0, r3
9000567a:	f006 fc8a 	bl	9000bf92 <USB_ReadChInterrupts>
9000567e:	4603      	mov	r3, r0
90005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005684:	2b40      	cmp	r3, #64	@ 0x40
90005686:	d12f      	bne.n	900056e8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005688:	78fb      	ldrb	r3, [r7, #3]
9000568a:	015a      	lsls	r2, r3, #5
9000568c:	693b      	ldr	r3, [r7, #16]
9000568e:	4413      	add	r3, r2
90005690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005694:	461a      	mov	r2, r3
90005696:	2340      	movs	r3, #64	@ 0x40
90005698:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
9000569a:	78fa      	ldrb	r2, [r7, #3]
9000569c:	6879      	ldr	r1, [r7, #4]
9000569e:	4613      	mov	r3, r2
900056a0:	011b      	lsls	r3, r3, #4
900056a2:	1a9b      	subs	r3, r3, r2
900056a4:	009b      	lsls	r3, r3, #2
900056a6:	440b      	add	r3, r1
900056a8:	334d      	adds	r3, #77	@ 0x4d
900056aa:	2205      	movs	r2, #5
900056ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900056ae:	78fa      	ldrb	r2, [r7, #3]
900056b0:	6879      	ldr	r1, [r7, #4]
900056b2:	4613      	mov	r3, r2
900056b4:	011b      	lsls	r3, r3, #4
900056b6:	1a9b      	subs	r3, r3, r2
900056b8:	009b      	lsls	r3, r3, #2
900056ba:	440b      	add	r3, r1
900056bc:	331a      	adds	r3, #26
900056be:	781b      	ldrb	r3, [r3, #0]
900056c0:	2b00      	cmp	r3, #0
900056c2:	d109      	bne.n	900056d8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
900056c4:	78fa      	ldrb	r2, [r7, #3]
900056c6:	6879      	ldr	r1, [r7, #4]
900056c8:	4613      	mov	r3, r2
900056ca:	011b      	lsls	r3, r3, #4
900056cc:	1a9b      	subs	r3, r3, r2
900056ce:	009b      	lsls	r3, r3, #2
900056d0:	440b      	add	r3, r1
900056d2:	3344      	adds	r3, #68	@ 0x44
900056d4:	2200      	movs	r2, #0
900056d6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
900056d8:	687b      	ldr	r3, [r7, #4]
900056da:	681b      	ldr	r3, [r3, #0]
900056dc:	78fa      	ldrb	r2, [r7, #3]
900056de:	4611      	mov	r1, r2
900056e0:	4618      	mov	r0, r3
900056e2:	f006 fcd3 	bl	9000c08c <USB_HC_Halt>
900056e6:	e0b3      	b.n	90005850 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900056e8:	687b      	ldr	r3, [r7, #4]
900056ea:	681b      	ldr	r3, [r3, #0]
900056ec:	78fa      	ldrb	r2, [r7, #3]
900056ee:	4611      	mov	r1, r2
900056f0:	4618      	mov	r0, r3
900056f2:	f006 fc4e 	bl	9000bf92 <USB_ReadChInterrupts>
900056f6:	4603      	mov	r3, r0
900056f8:	f003 0310 	and.w	r3, r3, #16
900056fc:	2b10      	cmp	r3, #16
900056fe:	f040 80a7 	bne.w	90005850 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90005702:	78fa      	ldrb	r2, [r7, #3]
90005704:	6879      	ldr	r1, [r7, #4]
90005706:	4613      	mov	r3, r2
90005708:	011b      	lsls	r3, r3, #4
9000570a:	1a9b      	subs	r3, r3, r2
9000570c:	009b      	lsls	r3, r3, #2
9000570e:	440b      	add	r3, r1
90005710:	3326      	adds	r3, #38	@ 0x26
90005712:	781b      	ldrb	r3, [r3, #0]
90005714:	2b03      	cmp	r3, #3
90005716:	d11b      	bne.n	90005750 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90005718:	78fa      	ldrb	r2, [r7, #3]
9000571a:	6879      	ldr	r1, [r7, #4]
9000571c:	4613      	mov	r3, r2
9000571e:	011b      	lsls	r3, r3, #4
90005720:	1a9b      	subs	r3, r3, r2
90005722:	009b      	lsls	r3, r3, #2
90005724:	440b      	add	r3, r1
90005726:	3344      	adds	r3, #68	@ 0x44
90005728:	2200      	movs	r2, #0
9000572a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
9000572c:	78fa      	ldrb	r2, [r7, #3]
9000572e:	6879      	ldr	r1, [r7, #4]
90005730:	4613      	mov	r3, r2
90005732:	011b      	lsls	r3, r3, #4
90005734:	1a9b      	subs	r3, r3, r2
90005736:	009b      	lsls	r3, r3, #2
90005738:	440b      	add	r3, r1
9000573a:	334d      	adds	r3, #77	@ 0x4d
9000573c:	2204      	movs	r2, #4
9000573e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005740:	687b      	ldr	r3, [r7, #4]
90005742:	681b      	ldr	r3, [r3, #0]
90005744:	78fa      	ldrb	r2, [r7, #3]
90005746:	4611      	mov	r1, r2
90005748:	4618      	mov	r0, r3
9000574a:	f006 fc9f 	bl	9000c08c <USB_HC_Halt>
9000574e:	e03f      	b.n	900057d0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005750:	78fa      	ldrb	r2, [r7, #3]
90005752:	6879      	ldr	r1, [r7, #4]
90005754:	4613      	mov	r3, r2
90005756:	011b      	lsls	r3, r3, #4
90005758:	1a9b      	subs	r3, r3, r2
9000575a:	009b      	lsls	r3, r3, #2
9000575c:	440b      	add	r3, r1
9000575e:	3326      	adds	r3, #38	@ 0x26
90005760:	781b      	ldrb	r3, [r3, #0]
90005762:	2b00      	cmp	r3, #0
90005764:	d00a      	beq.n	9000577c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90005766:	78fa      	ldrb	r2, [r7, #3]
90005768:	6879      	ldr	r1, [r7, #4]
9000576a:	4613      	mov	r3, r2
9000576c:	011b      	lsls	r3, r3, #4
9000576e:	1a9b      	subs	r3, r3, r2
90005770:	009b      	lsls	r3, r3, #2
90005772:	440b      	add	r3, r1
90005774:	3326      	adds	r3, #38	@ 0x26
90005776:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005778:	2b02      	cmp	r3, #2
9000577a:	d129      	bne.n	900057d0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
9000577c:	78fa      	ldrb	r2, [r7, #3]
9000577e:	6879      	ldr	r1, [r7, #4]
90005780:	4613      	mov	r3, r2
90005782:	011b      	lsls	r3, r3, #4
90005784:	1a9b      	subs	r3, r3, r2
90005786:	009b      	lsls	r3, r3, #2
90005788:	440b      	add	r3, r1
9000578a:	3344      	adds	r3, #68	@ 0x44
9000578c:	2200      	movs	r2, #0
9000578e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90005790:	687b      	ldr	r3, [r7, #4]
90005792:	799b      	ldrb	r3, [r3, #6]
90005794:	2b00      	cmp	r3, #0
90005796:	d00a      	beq.n	900057ae <HCD_HC_IN_IRQHandler+0xc2a>
90005798:	78fa      	ldrb	r2, [r7, #3]
9000579a:	6879      	ldr	r1, [r7, #4]
9000579c:	4613      	mov	r3, r2
9000579e:	011b      	lsls	r3, r3, #4
900057a0:	1a9b      	subs	r3, r3, r2
900057a2:	009b      	lsls	r3, r3, #2
900057a4:	440b      	add	r3, r1
900057a6:	331b      	adds	r3, #27
900057a8:	781b      	ldrb	r3, [r3, #0]
900057aa:	2b01      	cmp	r3, #1
900057ac:	d110      	bne.n	900057d0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
900057ae:	78fa      	ldrb	r2, [r7, #3]
900057b0:	6879      	ldr	r1, [r7, #4]
900057b2:	4613      	mov	r3, r2
900057b4:	011b      	lsls	r3, r3, #4
900057b6:	1a9b      	subs	r3, r3, r2
900057b8:	009b      	lsls	r3, r3, #2
900057ba:	440b      	add	r3, r1
900057bc:	334d      	adds	r3, #77	@ 0x4d
900057be:	2204      	movs	r2, #4
900057c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
900057c2:	687b      	ldr	r3, [r7, #4]
900057c4:	681b      	ldr	r3, [r3, #0]
900057c6:	78fa      	ldrb	r2, [r7, #3]
900057c8:	4611      	mov	r1, r2
900057ca:	4618      	mov	r0, r3
900057cc:	f006 fc5e 	bl	9000c08c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
900057d0:	78fa      	ldrb	r2, [r7, #3]
900057d2:	6879      	ldr	r1, [r7, #4]
900057d4:	4613      	mov	r3, r2
900057d6:	011b      	lsls	r3, r3, #4
900057d8:	1a9b      	subs	r3, r3, r2
900057da:	009b      	lsls	r3, r3, #2
900057dc:	440b      	add	r3, r1
900057de:	331b      	adds	r3, #27
900057e0:	781b      	ldrb	r3, [r3, #0]
900057e2:	2b01      	cmp	r3, #1
900057e4:	d129      	bne.n	9000583a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900057e6:	78fa      	ldrb	r2, [r7, #3]
900057e8:	6879      	ldr	r1, [r7, #4]
900057ea:	4613      	mov	r3, r2
900057ec:	011b      	lsls	r3, r3, #4
900057ee:	1a9b      	subs	r3, r3, r2
900057f0:	009b      	lsls	r3, r3, #2
900057f2:	440b      	add	r3, r1
900057f4:	331b      	adds	r3, #27
900057f6:	2200      	movs	r2, #0
900057f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900057fa:	78fb      	ldrb	r3, [r7, #3]
900057fc:	015a      	lsls	r2, r3, #5
900057fe:	693b      	ldr	r3, [r7, #16]
90005800:	4413      	add	r3, r2
90005802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005806:	685b      	ldr	r3, [r3, #4]
90005808:	78fa      	ldrb	r2, [r7, #3]
9000580a:	0151      	lsls	r1, r2, #5
9000580c:	693a      	ldr	r2, [r7, #16]
9000580e:	440a      	add	r2, r1
90005810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005818:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
9000581a:	78fb      	ldrb	r3, [r7, #3]
9000581c:	015a      	lsls	r2, r3, #5
9000581e:	693b      	ldr	r3, [r7, #16]
90005820:	4413      	add	r3, r2
90005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005826:	68db      	ldr	r3, [r3, #12]
90005828:	78fa      	ldrb	r2, [r7, #3]
9000582a:	0151      	lsls	r1, r2, #5
9000582c:	693a      	ldr	r2, [r7, #16]
9000582e:	440a      	add	r2, r1
90005830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005834:	f043 0320 	orr.w	r3, r3, #32
90005838:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000583a:	78fb      	ldrb	r3, [r7, #3]
9000583c:	015a      	lsls	r2, r3, #5
9000583e:	693b      	ldr	r3, [r7, #16]
90005840:	4413      	add	r3, r2
90005842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005846:	461a      	mov	r2, r3
90005848:	2310      	movs	r3, #16
9000584a:	6093      	str	r3, [r2, #8]
9000584c:	e000      	b.n	90005850 <HCD_HC_IN_IRQHandler+0xccc>
        return;
9000584e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90005850:	3718      	adds	r7, #24
90005852:	46bd      	mov	sp, r7
90005854:	bd80      	pop	{r7, pc}

90005856 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90005856:	b580      	push	{r7, lr}
90005858:	b086      	sub	sp, #24
9000585a:	af00      	add	r7, sp, #0
9000585c:	6078      	str	r0, [r7, #4]
9000585e:	460b      	mov	r3, r1
90005860:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005862:	687b      	ldr	r3, [r7, #4]
90005864:	681b      	ldr	r3, [r3, #0]
90005866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005868:	697b      	ldr	r3, [r7, #20]
9000586a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000586c:	687b      	ldr	r3, [r7, #4]
9000586e:	681b      	ldr	r3, [r3, #0]
90005870:	78fa      	ldrb	r2, [r7, #3]
90005872:	4611      	mov	r1, r2
90005874:	4618      	mov	r0, r3
90005876:	f006 fb8c 	bl	9000bf92 <USB_ReadChInterrupts>
9000587a:	4603      	mov	r3, r0
9000587c:	f003 0304 	and.w	r3, r3, #4
90005880:	2b04      	cmp	r3, #4
90005882:	d11b      	bne.n	900058bc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90005884:	78fb      	ldrb	r3, [r7, #3]
90005886:	015a      	lsls	r2, r3, #5
90005888:	693b      	ldr	r3, [r7, #16]
9000588a:	4413      	add	r3, r2
9000588c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005890:	461a      	mov	r2, r3
90005892:	2304      	movs	r3, #4
90005894:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90005896:	78fa      	ldrb	r2, [r7, #3]
90005898:	6879      	ldr	r1, [r7, #4]
9000589a:	4613      	mov	r3, r2
9000589c:	011b      	lsls	r3, r3, #4
9000589e:	1a9b      	subs	r3, r3, r2
900058a0:	009b      	lsls	r3, r3, #2
900058a2:	440b      	add	r3, r1
900058a4:	334d      	adds	r3, #77	@ 0x4d
900058a6:	2207      	movs	r2, #7
900058a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900058aa:	687b      	ldr	r3, [r7, #4]
900058ac:	681b      	ldr	r3, [r3, #0]
900058ae:	78fa      	ldrb	r2, [r7, #3]
900058b0:	4611      	mov	r1, r2
900058b2:	4618      	mov	r0, r3
900058b4:	f006 fbea 	bl	9000c08c <USB_HC_Halt>
900058b8:	f000 bc89 	b.w	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900058bc:	687b      	ldr	r3, [r7, #4]
900058be:	681b      	ldr	r3, [r3, #0]
900058c0:	78fa      	ldrb	r2, [r7, #3]
900058c2:	4611      	mov	r1, r2
900058c4:	4618      	mov	r0, r3
900058c6:	f006 fb64 	bl	9000bf92 <USB_ReadChInterrupts>
900058ca:	4603      	mov	r3, r0
900058cc:	f003 0320 	and.w	r3, r3, #32
900058d0:	2b20      	cmp	r3, #32
900058d2:	f040 8082 	bne.w	900059da <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900058d6:	78fb      	ldrb	r3, [r7, #3]
900058d8:	015a      	lsls	r2, r3, #5
900058da:	693b      	ldr	r3, [r7, #16]
900058dc:	4413      	add	r3, r2
900058de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900058e2:	461a      	mov	r2, r3
900058e4:	2320      	movs	r3, #32
900058e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
900058e8:	78fa      	ldrb	r2, [r7, #3]
900058ea:	6879      	ldr	r1, [r7, #4]
900058ec:	4613      	mov	r3, r2
900058ee:	011b      	lsls	r3, r3, #4
900058f0:	1a9b      	subs	r3, r3, r2
900058f2:	009b      	lsls	r3, r3, #2
900058f4:	440b      	add	r3, r1
900058f6:	3319      	adds	r3, #25
900058f8:	781b      	ldrb	r3, [r3, #0]
900058fa:	2b01      	cmp	r3, #1
900058fc:	d124      	bne.n	90005948 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
900058fe:	78fa      	ldrb	r2, [r7, #3]
90005900:	6879      	ldr	r1, [r7, #4]
90005902:	4613      	mov	r3, r2
90005904:	011b      	lsls	r3, r3, #4
90005906:	1a9b      	subs	r3, r3, r2
90005908:	009b      	lsls	r3, r3, #2
9000590a:	440b      	add	r3, r1
9000590c:	3319      	adds	r3, #25
9000590e:	2200      	movs	r2, #0
90005910:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005912:	78fa      	ldrb	r2, [r7, #3]
90005914:	6879      	ldr	r1, [r7, #4]
90005916:	4613      	mov	r3, r2
90005918:	011b      	lsls	r3, r3, #4
9000591a:	1a9b      	subs	r3, r3, r2
9000591c:	009b      	lsls	r3, r3, #2
9000591e:	440b      	add	r3, r1
90005920:	334c      	adds	r3, #76	@ 0x4c
90005922:	2202      	movs	r2, #2
90005924:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90005926:	78fa      	ldrb	r2, [r7, #3]
90005928:	6879      	ldr	r1, [r7, #4]
9000592a:	4613      	mov	r3, r2
9000592c:	011b      	lsls	r3, r3, #4
9000592e:	1a9b      	subs	r3, r3, r2
90005930:	009b      	lsls	r3, r3, #2
90005932:	440b      	add	r3, r1
90005934:	334d      	adds	r3, #77	@ 0x4d
90005936:	2203      	movs	r2, #3
90005938:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000593a:	687b      	ldr	r3, [r7, #4]
9000593c:	681b      	ldr	r3, [r3, #0]
9000593e:	78fa      	ldrb	r2, [r7, #3]
90005940:	4611      	mov	r1, r2
90005942:	4618      	mov	r0, r3
90005944:	f006 fba2 	bl	9000c08c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90005948:	78fa      	ldrb	r2, [r7, #3]
9000594a:	6879      	ldr	r1, [r7, #4]
9000594c:	4613      	mov	r3, r2
9000594e:	011b      	lsls	r3, r3, #4
90005950:	1a9b      	subs	r3, r3, r2
90005952:	009b      	lsls	r3, r3, #2
90005954:	440b      	add	r3, r1
90005956:	331a      	adds	r3, #26
90005958:	781b      	ldrb	r3, [r3, #0]
9000595a:	2b01      	cmp	r3, #1
9000595c:	f040 8437 	bne.w	900061ce <HCD_HC_OUT_IRQHandler+0x978>
90005960:	78fa      	ldrb	r2, [r7, #3]
90005962:	6879      	ldr	r1, [r7, #4]
90005964:	4613      	mov	r3, r2
90005966:	011b      	lsls	r3, r3, #4
90005968:	1a9b      	subs	r3, r3, r2
9000596a:	009b      	lsls	r3, r3, #2
9000596c:	440b      	add	r3, r1
9000596e:	331b      	adds	r3, #27
90005970:	781b      	ldrb	r3, [r3, #0]
90005972:	2b00      	cmp	r3, #0
90005974:	f040 842b 	bne.w	900061ce <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90005978:	78fa      	ldrb	r2, [r7, #3]
9000597a:	6879      	ldr	r1, [r7, #4]
9000597c:	4613      	mov	r3, r2
9000597e:	011b      	lsls	r3, r3, #4
90005980:	1a9b      	subs	r3, r3, r2
90005982:	009b      	lsls	r3, r3, #2
90005984:	440b      	add	r3, r1
90005986:	3326      	adds	r3, #38	@ 0x26
90005988:	781b      	ldrb	r3, [r3, #0]
9000598a:	2b01      	cmp	r3, #1
9000598c:	d009      	beq.n	900059a2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
9000598e:	78fa      	ldrb	r2, [r7, #3]
90005990:	6879      	ldr	r1, [r7, #4]
90005992:	4613      	mov	r3, r2
90005994:	011b      	lsls	r3, r3, #4
90005996:	1a9b      	subs	r3, r3, r2
90005998:	009b      	lsls	r3, r3, #2
9000599a:	440b      	add	r3, r1
9000599c:	331b      	adds	r3, #27
9000599e:	2201      	movs	r2, #1
900059a0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
900059a2:	78fa      	ldrb	r2, [r7, #3]
900059a4:	6879      	ldr	r1, [r7, #4]
900059a6:	4613      	mov	r3, r2
900059a8:	011b      	lsls	r3, r3, #4
900059aa:	1a9b      	subs	r3, r3, r2
900059ac:	009b      	lsls	r3, r3, #2
900059ae:	440b      	add	r3, r1
900059b0:	334d      	adds	r3, #77	@ 0x4d
900059b2:	2203      	movs	r2, #3
900059b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900059b6:	687b      	ldr	r3, [r7, #4]
900059b8:	681b      	ldr	r3, [r3, #0]
900059ba:	78fa      	ldrb	r2, [r7, #3]
900059bc:	4611      	mov	r1, r2
900059be:	4618      	mov	r0, r3
900059c0:	f006 fb64 	bl	9000c08c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
900059c4:	78fa      	ldrb	r2, [r7, #3]
900059c6:	6879      	ldr	r1, [r7, #4]
900059c8:	4613      	mov	r3, r2
900059ca:	011b      	lsls	r3, r3, #4
900059cc:	1a9b      	subs	r3, r3, r2
900059ce:	009b      	lsls	r3, r3, #2
900059d0:	440b      	add	r3, r1
900059d2:	3344      	adds	r3, #68	@ 0x44
900059d4:	2200      	movs	r2, #0
900059d6:	601a      	str	r2, [r3, #0]
900059d8:	e3f9      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900059da:	687b      	ldr	r3, [r7, #4]
900059dc:	681b      	ldr	r3, [r3, #0]
900059de:	78fa      	ldrb	r2, [r7, #3]
900059e0:	4611      	mov	r1, r2
900059e2:	4618      	mov	r0, r3
900059e4:	f006 fad5 	bl	9000bf92 <USB_ReadChInterrupts>
900059e8:	4603      	mov	r3, r0
900059ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900059ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900059f2:	d111      	bne.n	90005a18 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900059f4:	78fb      	ldrb	r3, [r7, #3]
900059f6:	015a      	lsls	r2, r3, #5
900059f8:	693b      	ldr	r3, [r7, #16]
900059fa:	4413      	add	r3, r2
900059fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a00:	461a      	mov	r2, r3
90005a02:	f44f 7300 	mov.w	r3, #512	@ 0x200
90005a06:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005a08:	687b      	ldr	r3, [r7, #4]
90005a0a:	681b      	ldr	r3, [r3, #0]
90005a0c:	78fa      	ldrb	r2, [r7, #3]
90005a0e:	4611      	mov	r1, r2
90005a10:	4618      	mov	r0, r3
90005a12:	f006 fb3b 	bl	9000c08c <USB_HC_Halt>
90005a16:	e3da      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90005a18:	687b      	ldr	r3, [r7, #4]
90005a1a:	681b      	ldr	r3, [r3, #0]
90005a1c:	78fa      	ldrb	r2, [r7, #3]
90005a1e:	4611      	mov	r1, r2
90005a20:	4618      	mov	r0, r3
90005a22:	f006 fab6 	bl	9000bf92 <USB_ReadChInterrupts>
90005a26:	4603      	mov	r3, r0
90005a28:	f003 0301 	and.w	r3, r3, #1
90005a2c:	2b01      	cmp	r3, #1
90005a2e:	d168      	bne.n	90005b02 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005a30:	78fa      	ldrb	r2, [r7, #3]
90005a32:	6879      	ldr	r1, [r7, #4]
90005a34:	4613      	mov	r3, r2
90005a36:	011b      	lsls	r3, r3, #4
90005a38:	1a9b      	subs	r3, r3, r2
90005a3a:	009b      	lsls	r3, r3, #2
90005a3c:	440b      	add	r3, r1
90005a3e:	3344      	adds	r3, #68	@ 0x44
90005a40:	2200      	movs	r2, #0
90005a42:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005a44:	687b      	ldr	r3, [r7, #4]
90005a46:	681b      	ldr	r3, [r3, #0]
90005a48:	78fa      	ldrb	r2, [r7, #3]
90005a4a:	4611      	mov	r1, r2
90005a4c:	4618      	mov	r0, r3
90005a4e:	f006 faa0 	bl	9000bf92 <USB_ReadChInterrupts>
90005a52:	4603      	mov	r3, r0
90005a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005a58:	2b40      	cmp	r3, #64	@ 0x40
90005a5a:	d112      	bne.n	90005a82 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005a5c:	78fa      	ldrb	r2, [r7, #3]
90005a5e:	6879      	ldr	r1, [r7, #4]
90005a60:	4613      	mov	r3, r2
90005a62:	011b      	lsls	r3, r3, #4
90005a64:	1a9b      	subs	r3, r3, r2
90005a66:	009b      	lsls	r3, r3, #2
90005a68:	440b      	add	r3, r1
90005a6a:	3319      	adds	r3, #25
90005a6c:	2201      	movs	r2, #1
90005a6e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005a70:	78fb      	ldrb	r3, [r7, #3]
90005a72:	015a      	lsls	r2, r3, #5
90005a74:	693b      	ldr	r3, [r7, #16]
90005a76:	4413      	add	r3, r2
90005a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a7c:	461a      	mov	r2, r3
90005a7e:	2340      	movs	r3, #64	@ 0x40
90005a80:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90005a82:	78fa      	ldrb	r2, [r7, #3]
90005a84:	6879      	ldr	r1, [r7, #4]
90005a86:	4613      	mov	r3, r2
90005a88:	011b      	lsls	r3, r3, #4
90005a8a:	1a9b      	subs	r3, r3, r2
90005a8c:	009b      	lsls	r3, r3, #2
90005a8e:	440b      	add	r3, r1
90005a90:	331b      	adds	r3, #27
90005a92:	781b      	ldrb	r3, [r3, #0]
90005a94:	2b00      	cmp	r3, #0
90005a96:	d019      	beq.n	90005acc <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90005a98:	78fa      	ldrb	r2, [r7, #3]
90005a9a:	6879      	ldr	r1, [r7, #4]
90005a9c:	4613      	mov	r3, r2
90005a9e:	011b      	lsls	r3, r3, #4
90005aa0:	1a9b      	subs	r3, r3, r2
90005aa2:	009b      	lsls	r3, r3, #2
90005aa4:	440b      	add	r3, r1
90005aa6:	331b      	adds	r3, #27
90005aa8:	2200      	movs	r2, #0
90005aaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005aac:	78fb      	ldrb	r3, [r7, #3]
90005aae:	015a      	lsls	r2, r3, #5
90005ab0:	693b      	ldr	r3, [r7, #16]
90005ab2:	4413      	add	r3, r2
90005ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005ab8:	685b      	ldr	r3, [r3, #4]
90005aba:	78fa      	ldrb	r2, [r7, #3]
90005abc:	0151      	lsls	r1, r2, #5
90005abe:	693a      	ldr	r2, [r7, #16]
90005ac0:	440a      	add	r2, r1
90005ac2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005aca:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90005acc:	78fb      	ldrb	r3, [r7, #3]
90005ace:	015a      	lsls	r2, r3, #5
90005ad0:	693b      	ldr	r3, [r7, #16]
90005ad2:	4413      	add	r3, r2
90005ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005ad8:	461a      	mov	r2, r3
90005ada:	2301      	movs	r3, #1
90005adc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90005ade:	78fa      	ldrb	r2, [r7, #3]
90005ae0:	6879      	ldr	r1, [r7, #4]
90005ae2:	4613      	mov	r3, r2
90005ae4:	011b      	lsls	r3, r3, #4
90005ae6:	1a9b      	subs	r3, r3, r2
90005ae8:	009b      	lsls	r3, r3, #2
90005aea:	440b      	add	r3, r1
90005aec:	334d      	adds	r3, #77	@ 0x4d
90005aee:	2201      	movs	r2, #1
90005af0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005af2:	687b      	ldr	r3, [r7, #4]
90005af4:	681b      	ldr	r3, [r3, #0]
90005af6:	78fa      	ldrb	r2, [r7, #3]
90005af8:	4611      	mov	r1, r2
90005afa:	4618      	mov	r0, r3
90005afc:	f006 fac6 	bl	9000c08c <USB_HC_Halt>
90005b00:	e365      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005b02:	687b      	ldr	r3, [r7, #4]
90005b04:	681b      	ldr	r3, [r3, #0]
90005b06:	78fa      	ldrb	r2, [r7, #3]
90005b08:	4611      	mov	r1, r2
90005b0a:	4618      	mov	r0, r3
90005b0c:	f006 fa41 	bl	9000bf92 <USB_ReadChInterrupts>
90005b10:	4603      	mov	r3, r0
90005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005b16:	2b40      	cmp	r3, #64	@ 0x40
90005b18:	d139      	bne.n	90005b8e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90005b1a:	78fa      	ldrb	r2, [r7, #3]
90005b1c:	6879      	ldr	r1, [r7, #4]
90005b1e:	4613      	mov	r3, r2
90005b20:	011b      	lsls	r3, r3, #4
90005b22:	1a9b      	subs	r3, r3, r2
90005b24:	009b      	lsls	r3, r3, #2
90005b26:	440b      	add	r3, r1
90005b28:	334d      	adds	r3, #77	@ 0x4d
90005b2a:	2205      	movs	r2, #5
90005b2c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90005b2e:	78fa      	ldrb	r2, [r7, #3]
90005b30:	6879      	ldr	r1, [r7, #4]
90005b32:	4613      	mov	r3, r2
90005b34:	011b      	lsls	r3, r3, #4
90005b36:	1a9b      	subs	r3, r3, r2
90005b38:	009b      	lsls	r3, r3, #2
90005b3a:	440b      	add	r3, r1
90005b3c:	331a      	adds	r3, #26
90005b3e:	781b      	ldrb	r3, [r3, #0]
90005b40:	2b00      	cmp	r3, #0
90005b42:	d109      	bne.n	90005b58 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005b44:	78fa      	ldrb	r2, [r7, #3]
90005b46:	6879      	ldr	r1, [r7, #4]
90005b48:	4613      	mov	r3, r2
90005b4a:	011b      	lsls	r3, r3, #4
90005b4c:	1a9b      	subs	r3, r3, r2
90005b4e:	009b      	lsls	r3, r3, #2
90005b50:	440b      	add	r3, r1
90005b52:	3319      	adds	r3, #25
90005b54:	2201      	movs	r2, #1
90005b56:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005b58:	78fa      	ldrb	r2, [r7, #3]
90005b5a:	6879      	ldr	r1, [r7, #4]
90005b5c:	4613      	mov	r3, r2
90005b5e:	011b      	lsls	r3, r3, #4
90005b60:	1a9b      	subs	r3, r3, r2
90005b62:	009b      	lsls	r3, r3, #2
90005b64:	440b      	add	r3, r1
90005b66:	3344      	adds	r3, #68	@ 0x44
90005b68:	2200      	movs	r2, #0
90005b6a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005b6c:	687b      	ldr	r3, [r7, #4]
90005b6e:	681b      	ldr	r3, [r3, #0]
90005b70:	78fa      	ldrb	r2, [r7, #3]
90005b72:	4611      	mov	r1, r2
90005b74:	4618      	mov	r0, r3
90005b76:	f006 fa89 	bl	9000c08c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005b7a:	78fb      	ldrb	r3, [r7, #3]
90005b7c:	015a      	lsls	r2, r3, #5
90005b7e:	693b      	ldr	r3, [r7, #16]
90005b80:	4413      	add	r3, r2
90005b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005b86:	461a      	mov	r2, r3
90005b88:	2340      	movs	r3, #64	@ 0x40
90005b8a:	6093      	str	r3, [r2, #8]
90005b8c:	e31f      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90005b8e:	687b      	ldr	r3, [r7, #4]
90005b90:	681b      	ldr	r3, [r3, #0]
90005b92:	78fa      	ldrb	r2, [r7, #3]
90005b94:	4611      	mov	r1, r2
90005b96:	4618      	mov	r0, r3
90005b98:	f006 f9fb 	bl	9000bf92 <USB_ReadChInterrupts>
90005b9c:	4603      	mov	r3, r0
90005b9e:	f003 0308 	and.w	r3, r3, #8
90005ba2:	2b08      	cmp	r3, #8
90005ba4:	d11a      	bne.n	90005bdc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90005ba6:	78fb      	ldrb	r3, [r7, #3]
90005ba8:	015a      	lsls	r2, r3, #5
90005baa:	693b      	ldr	r3, [r7, #16]
90005bac:	4413      	add	r3, r2
90005bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005bb2:	461a      	mov	r2, r3
90005bb4:	2308      	movs	r3, #8
90005bb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90005bb8:	78fa      	ldrb	r2, [r7, #3]
90005bba:	6879      	ldr	r1, [r7, #4]
90005bbc:	4613      	mov	r3, r2
90005bbe:	011b      	lsls	r3, r3, #4
90005bc0:	1a9b      	subs	r3, r3, r2
90005bc2:	009b      	lsls	r3, r3, #2
90005bc4:	440b      	add	r3, r1
90005bc6:	334d      	adds	r3, #77	@ 0x4d
90005bc8:	2206      	movs	r2, #6
90005bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005bcc:	687b      	ldr	r3, [r7, #4]
90005bce:	681b      	ldr	r3, [r3, #0]
90005bd0:	78fa      	ldrb	r2, [r7, #3]
90005bd2:	4611      	mov	r1, r2
90005bd4:	4618      	mov	r0, r3
90005bd6:	f006 fa59 	bl	9000c08c <USB_HC_Halt>
90005bda:	e2f8      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90005bdc:	687b      	ldr	r3, [r7, #4]
90005bde:	681b      	ldr	r3, [r3, #0]
90005be0:	78fa      	ldrb	r2, [r7, #3]
90005be2:	4611      	mov	r1, r2
90005be4:	4618      	mov	r0, r3
90005be6:	f006 f9d4 	bl	9000bf92 <USB_ReadChInterrupts>
90005bea:	4603      	mov	r3, r0
90005bec:	f003 0310 	and.w	r3, r3, #16
90005bf0:	2b10      	cmp	r3, #16
90005bf2:	d144      	bne.n	90005c7e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005bf4:	78fa      	ldrb	r2, [r7, #3]
90005bf6:	6879      	ldr	r1, [r7, #4]
90005bf8:	4613      	mov	r3, r2
90005bfa:	011b      	lsls	r3, r3, #4
90005bfc:	1a9b      	subs	r3, r3, r2
90005bfe:	009b      	lsls	r3, r3, #2
90005c00:	440b      	add	r3, r1
90005c02:	3344      	adds	r3, #68	@ 0x44
90005c04:	2200      	movs	r2, #0
90005c06:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90005c08:	78fa      	ldrb	r2, [r7, #3]
90005c0a:	6879      	ldr	r1, [r7, #4]
90005c0c:	4613      	mov	r3, r2
90005c0e:	011b      	lsls	r3, r3, #4
90005c10:	1a9b      	subs	r3, r3, r2
90005c12:	009b      	lsls	r3, r3, #2
90005c14:	440b      	add	r3, r1
90005c16:	334d      	adds	r3, #77	@ 0x4d
90005c18:	2204      	movs	r2, #4
90005c1a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90005c1c:	78fa      	ldrb	r2, [r7, #3]
90005c1e:	6879      	ldr	r1, [r7, #4]
90005c20:	4613      	mov	r3, r2
90005c22:	011b      	lsls	r3, r3, #4
90005c24:	1a9b      	subs	r3, r3, r2
90005c26:	009b      	lsls	r3, r3, #2
90005c28:	440b      	add	r3, r1
90005c2a:	3319      	adds	r3, #25
90005c2c:	781b      	ldrb	r3, [r3, #0]
90005c2e:	2b00      	cmp	r3, #0
90005c30:	d114      	bne.n	90005c5c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
90005c32:	78fa      	ldrb	r2, [r7, #3]
90005c34:	6879      	ldr	r1, [r7, #4]
90005c36:	4613      	mov	r3, r2
90005c38:	011b      	lsls	r3, r3, #4
90005c3a:	1a9b      	subs	r3, r3, r2
90005c3c:	009b      	lsls	r3, r3, #2
90005c3e:	440b      	add	r3, r1
90005c40:	3318      	adds	r3, #24
90005c42:	781b      	ldrb	r3, [r3, #0]
90005c44:	2b00      	cmp	r3, #0
90005c46:	d109      	bne.n	90005c5c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90005c48:	78fa      	ldrb	r2, [r7, #3]
90005c4a:	6879      	ldr	r1, [r7, #4]
90005c4c:	4613      	mov	r3, r2
90005c4e:	011b      	lsls	r3, r3, #4
90005c50:	1a9b      	subs	r3, r3, r2
90005c52:	009b      	lsls	r3, r3, #2
90005c54:	440b      	add	r3, r1
90005c56:	3319      	adds	r3, #25
90005c58:	2201      	movs	r2, #1
90005c5a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005c5c:	687b      	ldr	r3, [r7, #4]
90005c5e:	681b      	ldr	r3, [r3, #0]
90005c60:	78fa      	ldrb	r2, [r7, #3]
90005c62:	4611      	mov	r1, r2
90005c64:	4618      	mov	r0, r3
90005c66:	f006 fa11 	bl	9000c08c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90005c6a:	78fb      	ldrb	r3, [r7, #3]
90005c6c:	015a      	lsls	r2, r3, #5
90005c6e:	693b      	ldr	r3, [r7, #16]
90005c70:	4413      	add	r3, r2
90005c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005c76:	461a      	mov	r2, r3
90005c78:	2310      	movs	r3, #16
90005c7a:	6093      	str	r3, [r2, #8]
90005c7c:	e2a7      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005c7e:	687b      	ldr	r3, [r7, #4]
90005c80:	681b      	ldr	r3, [r3, #0]
90005c82:	78fa      	ldrb	r2, [r7, #3]
90005c84:	4611      	mov	r1, r2
90005c86:	4618      	mov	r0, r3
90005c88:	f006 f983 	bl	9000bf92 <USB_ReadChInterrupts>
90005c8c:	4603      	mov	r3, r0
90005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90005c92:	2b80      	cmp	r3, #128	@ 0x80
90005c94:	f040 8083 	bne.w	90005d9e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90005c98:	687b      	ldr	r3, [r7, #4]
90005c9a:	799b      	ldrb	r3, [r3, #6]
90005c9c:	2b00      	cmp	r3, #0
90005c9e:	d111      	bne.n	90005cc4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005ca0:	78fa      	ldrb	r2, [r7, #3]
90005ca2:	6879      	ldr	r1, [r7, #4]
90005ca4:	4613      	mov	r3, r2
90005ca6:	011b      	lsls	r3, r3, #4
90005ca8:	1a9b      	subs	r3, r3, r2
90005caa:	009b      	lsls	r3, r3, #2
90005cac:	440b      	add	r3, r1
90005cae:	334d      	adds	r3, #77	@ 0x4d
90005cb0:	2207      	movs	r2, #7
90005cb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005cb4:	687b      	ldr	r3, [r7, #4]
90005cb6:	681b      	ldr	r3, [r3, #0]
90005cb8:	78fa      	ldrb	r2, [r7, #3]
90005cba:	4611      	mov	r1, r2
90005cbc:	4618      	mov	r0, r3
90005cbe:	f006 f9e5 	bl	9000c08c <USB_HC_Halt>
90005cc2:	e062      	b.n	90005d8a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005cc4:	78fa      	ldrb	r2, [r7, #3]
90005cc6:	6879      	ldr	r1, [r7, #4]
90005cc8:	4613      	mov	r3, r2
90005cca:	011b      	lsls	r3, r3, #4
90005ccc:	1a9b      	subs	r3, r3, r2
90005cce:	009b      	lsls	r3, r3, #2
90005cd0:	440b      	add	r3, r1
90005cd2:	3344      	adds	r3, #68	@ 0x44
90005cd4:	681b      	ldr	r3, [r3, #0]
90005cd6:	1c59      	adds	r1, r3, #1
90005cd8:	6878      	ldr	r0, [r7, #4]
90005cda:	4613      	mov	r3, r2
90005cdc:	011b      	lsls	r3, r3, #4
90005cde:	1a9b      	subs	r3, r3, r2
90005ce0:	009b      	lsls	r3, r3, #2
90005ce2:	4403      	add	r3, r0
90005ce4:	3344      	adds	r3, #68	@ 0x44
90005ce6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005ce8:	78fa      	ldrb	r2, [r7, #3]
90005cea:	6879      	ldr	r1, [r7, #4]
90005cec:	4613      	mov	r3, r2
90005cee:	011b      	lsls	r3, r3, #4
90005cf0:	1a9b      	subs	r3, r3, r2
90005cf2:	009b      	lsls	r3, r3, #2
90005cf4:	440b      	add	r3, r1
90005cf6:	3344      	adds	r3, #68	@ 0x44
90005cf8:	681b      	ldr	r3, [r3, #0]
90005cfa:	2b02      	cmp	r3, #2
90005cfc:	d922      	bls.n	90005d44 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005cfe:	78fa      	ldrb	r2, [r7, #3]
90005d00:	6879      	ldr	r1, [r7, #4]
90005d02:	4613      	mov	r3, r2
90005d04:	011b      	lsls	r3, r3, #4
90005d06:	1a9b      	subs	r3, r3, r2
90005d08:	009b      	lsls	r3, r3, #2
90005d0a:	440b      	add	r3, r1
90005d0c:	3344      	adds	r3, #68	@ 0x44
90005d0e:	2200      	movs	r2, #0
90005d10:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005d12:	78fa      	ldrb	r2, [r7, #3]
90005d14:	6879      	ldr	r1, [r7, #4]
90005d16:	4613      	mov	r3, r2
90005d18:	011b      	lsls	r3, r3, #4
90005d1a:	1a9b      	subs	r3, r3, r2
90005d1c:	009b      	lsls	r3, r3, #2
90005d1e:	440b      	add	r3, r1
90005d20:	334c      	adds	r3, #76	@ 0x4c
90005d22:	2204      	movs	r2, #4
90005d24:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005d26:	78fa      	ldrb	r2, [r7, #3]
90005d28:	6879      	ldr	r1, [r7, #4]
90005d2a:	4613      	mov	r3, r2
90005d2c:	011b      	lsls	r3, r3, #4
90005d2e:	1a9b      	subs	r3, r3, r2
90005d30:	009b      	lsls	r3, r3, #2
90005d32:	440b      	add	r3, r1
90005d34:	334c      	adds	r3, #76	@ 0x4c
90005d36:	781a      	ldrb	r2, [r3, #0]
90005d38:	78fb      	ldrb	r3, [r7, #3]
90005d3a:	4619      	mov	r1, r3
90005d3c:	6878      	ldr	r0, [r7, #4]
90005d3e:	f7fb faaf 	bl	900012a0 <HAL_HCD_HC_NotifyURBChange_Callback>
90005d42:	e022      	b.n	90005d8a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005d44:	78fa      	ldrb	r2, [r7, #3]
90005d46:	6879      	ldr	r1, [r7, #4]
90005d48:	4613      	mov	r3, r2
90005d4a:	011b      	lsls	r3, r3, #4
90005d4c:	1a9b      	subs	r3, r3, r2
90005d4e:	009b      	lsls	r3, r3, #2
90005d50:	440b      	add	r3, r1
90005d52:	334c      	adds	r3, #76	@ 0x4c
90005d54:	2202      	movs	r2, #2
90005d56:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005d58:	78fb      	ldrb	r3, [r7, #3]
90005d5a:	015a      	lsls	r2, r3, #5
90005d5c:	693b      	ldr	r3, [r7, #16]
90005d5e:	4413      	add	r3, r2
90005d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005d64:	681b      	ldr	r3, [r3, #0]
90005d66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005d68:	68fb      	ldr	r3, [r7, #12]
90005d6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005d6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005d70:	68fb      	ldr	r3, [r7, #12]
90005d72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005d76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005d78:	78fb      	ldrb	r3, [r7, #3]
90005d7a:	015a      	lsls	r2, r3, #5
90005d7c:	693b      	ldr	r3, [r7, #16]
90005d7e:	4413      	add	r3, r2
90005d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005d84:	461a      	mov	r2, r3
90005d86:	68fb      	ldr	r3, [r7, #12]
90005d88:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90005d8a:	78fb      	ldrb	r3, [r7, #3]
90005d8c:	015a      	lsls	r2, r3, #5
90005d8e:	693b      	ldr	r3, [r7, #16]
90005d90:	4413      	add	r3, r2
90005d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005d96:	461a      	mov	r2, r3
90005d98:	2380      	movs	r3, #128	@ 0x80
90005d9a:	6093      	str	r3, [r2, #8]
90005d9c:	e217      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90005d9e:	687b      	ldr	r3, [r7, #4]
90005da0:	681b      	ldr	r3, [r3, #0]
90005da2:	78fa      	ldrb	r2, [r7, #3]
90005da4:	4611      	mov	r1, r2
90005da6:	4618      	mov	r0, r3
90005da8:	f006 f8f3 	bl	9000bf92 <USB_ReadChInterrupts>
90005dac:	4603      	mov	r3, r0
90005dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90005db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90005db6:	d11b      	bne.n	90005df0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005db8:	78fa      	ldrb	r2, [r7, #3]
90005dba:	6879      	ldr	r1, [r7, #4]
90005dbc:	4613      	mov	r3, r2
90005dbe:	011b      	lsls	r3, r3, #4
90005dc0:	1a9b      	subs	r3, r3, r2
90005dc2:	009b      	lsls	r3, r3, #2
90005dc4:	440b      	add	r3, r1
90005dc6:	334d      	adds	r3, #77	@ 0x4d
90005dc8:	2209      	movs	r2, #9
90005dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005dcc:	687b      	ldr	r3, [r7, #4]
90005dce:	681b      	ldr	r3, [r3, #0]
90005dd0:	78fa      	ldrb	r2, [r7, #3]
90005dd2:	4611      	mov	r1, r2
90005dd4:	4618      	mov	r0, r3
90005dd6:	f006 f959 	bl	9000c08c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005dda:	78fb      	ldrb	r3, [r7, #3]
90005ddc:	015a      	lsls	r2, r3, #5
90005dde:	693b      	ldr	r3, [r7, #16]
90005de0:	4413      	add	r3, r2
90005de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005de6:	461a      	mov	r2, r3
90005de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005dec:	6093      	str	r3, [r2, #8]
90005dee:	e1ee      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90005df0:	687b      	ldr	r3, [r7, #4]
90005df2:	681b      	ldr	r3, [r3, #0]
90005df4:	78fa      	ldrb	r2, [r7, #3]
90005df6:	4611      	mov	r1, r2
90005df8:	4618      	mov	r0, r3
90005dfa:	f006 f8ca 	bl	9000bf92 <USB_ReadChInterrupts>
90005dfe:	4603      	mov	r3, r0
90005e00:	f003 0302 	and.w	r3, r3, #2
90005e04:	2b02      	cmp	r3, #2
90005e06:	f040 81df 	bne.w	900061c8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005e0a:	78fb      	ldrb	r3, [r7, #3]
90005e0c:	015a      	lsls	r2, r3, #5
90005e0e:	693b      	ldr	r3, [r7, #16]
90005e10:	4413      	add	r3, r2
90005e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005e16:	461a      	mov	r2, r3
90005e18:	2302      	movs	r3, #2
90005e1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005e1c:	78fa      	ldrb	r2, [r7, #3]
90005e1e:	6879      	ldr	r1, [r7, #4]
90005e20:	4613      	mov	r3, r2
90005e22:	011b      	lsls	r3, r3, #4
90005e24:	1a9b      	subs	r3, r3, r2
90005e26:	009b      	lsls	r3, r3, #2
90005e28:	440b      	add	r3, r1
90005e2a:	334d      	adds	r3, #77	@ 0x4d
90005e2c:	781b      	ldrb	r3, [r3, #0]
90005e2e:	2b01      	cmp	r3, #1
90005e30:	f040 8093 	bne.w	90005f5a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005e34:	78fa      	ldrb	r2, [r7, #3]
90005e36:	6879      	ldr	r1, [r7, #4]
90005e38:	4613      	mov	r3, r2
90005e3a:	011b      	lsls	r3, r3, #4
90005e3c:	1a9b      	subs	r3, r3, r2
90005e3e:	009b      	lsls	r3, r3, #2
90005e40:	440b      	add	r3, r1
90005e42:	334d      	adds	r3, #77	@ 0x4d
90005e44:	2202      	movs	r2, #2
90005e46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005e48:	78fa      	ldrb	r2, [r7, #3]
90005e4a:	6879      	ldr	r1, [r7, #4]
90005e4c:	4613      	mov	r3, r2
90005e4e:	011b      	lsls	r3, r3, #4
90005e50:	1a9b      	subs	r3, r3, r2
90005e52:	009b      	lsls	r3, r3, #2
90005e54:	440b      	add	r3, r1
90005e56:	334c      	adds	r3, #76	@ 0x4c
90005e58:	2201      	movs	r2, #1
90005e5a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005e5c:	78fa      	ldrb	r2, [r7, #3]
90005e5e:	6879      	ldr	r1, [r7, #4]
90005e60:	4613      	mov	r3, r2
90005e62:	011b      	lsls	r3, r3, #4
90005e64:	1a9b      	subs	r3, r3, r2
90005e66:	009b      	lsls	r3, r3, #2
90005e68:	440b      	add	r3, r1
90005e6a:	3326      	adds	r3, #38	@ 0x26
90005e6c:	781b      	ldrb	r3, [r3, #0]
90005e6e:	2b02      	cmp	r3, #2
90005e70:	d00b      	beq.n	90005e8a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
90005e72:	78fa      	ldrb	r2, [r7, #3]
90005e74:	6879      	ldr	r1, [r7, #4]
90005e76:	4613      	mov	r3, r2
90005e78:	011b      	lsls	r3, r3, #4
90005e7a:	1a9b      	subs	r3, r3, r2
90005e7c:	009b      	lsls	r3, r3, #2
90005e7e:	440b      	add	r3, r1
90005e80:	3326      	adds	r3, #38	@ 0x26
90005e82:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005e84:	2b03      	cmp	r3, #3
90005e86:	f040 8190 	bne.w	900061aa <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
90005e8a:	687b      	ldr	r3, [r7, #4]
90005e8c:	799b      	ldrb	r3, [r3, #6]
90005e8e:	2b00      	cmp	r3, #0
90005e90:	d115      	bne.n	90005ebe <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
90005e92:	78fa      	ldrb	r2, [r7, #3]
90005e94:	6879      	ldr	r1, [r7, #4]
90005e96:	4613      	mov	r3, r2
90005e98:	011b      	lsls	r3, r3, #4
90005e9a:	1a9b      	subs	r3, r3, r2
90005e9c:	009b      	lsls	r3, r3, #2
90005e9e:	440b      	add	r3, r1
90005ea0:	333d      	adds	r3, #61	@ 0x3d
90005ea2:	781b      	ldrb	r3, [r3, #0]
90005ea4:	78fa      	ldrb	r2, [r7, #3]
90005ea6:	f083 0301 	eor.w	r3, r3, #1
90005eaa:	b2d8      	uxtb	r0, r3
90005eac:	6879      	ldr	r1, [r7, #4]
90005eae:	4613      	mov	r3, r2
90005eb0:	011b      	lsls	r3, r3, #4
90005eb2:	1a9b      	subs	r3, r3, r2
90005eb4:	009b      	lsls	r3, r3, #2
90005eb6:	440b      	add	r3, r1
90005eb8:	333d      	adds	r3, #61	@ 0x3d
90005eba:	4602      	mov	r2, r0
90005ebc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
90005ebe:	687b      	ldr	r3, [r7, #4]
90005ec0:	799b      	ldrb	r3, [r3, #6]
90005ec2:	2b01      	cmp	r3, #1
90005ec4:	f040 8171 	bne.w	900061aa <HCD_HC_OUT_IRQHandler+0x954>
90005ec8:	78fa      	ldrb	r2, [r7, #3]
90005eca:	6879      	ldr	r1, [r7, #4]
90005ecc:	4613      	mov	r3, r2
90005ece:	011b      	lsls	r3, r3, #4
90005ed0:	1a9b      	subs	r3, r3, r2
90005ed2:	009b      	lsls	r3, r3, #2
90005ed4:	440b      	add	r3, r1
90005ed6:	3334      	adds	r3, #52	@ 0x34
90005ed8:	681b      	ldr	r3, [r3, #0]
90005eda:	2b00      	cmp	r3, #0
90005edc:	f000 8165 	beq.w	900061aa <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
90005ee0:	78fa      	ldrb	r2, [r7, #3]
90005ee2:	6879      	ldr	r1, [r7, #4]
90005ee4:	4613      	mov	r3, r2
90005ee6:	011b      	lsls	r3, r3, #4
90005ee8:	1a9b      	subs	r3, r3, r2
90005eea:	009b      	lsls	r3, r3, #2
90005eec:	440b      	add	r3, r1
90005eee:	3334      	adds	r3, #52	@ 0x34
90005ef0:	6819      	ldr	r1, [r3, #0]
90005ef2:	78fa      	ldrb	r2, [r7, #3]
90005ef4:	6878      	ldr	r0, [r7, #4]
90005ef6:	4613      	mov	r3, r2
90005ef8:	011b      	lsls	r3, r3, #4
90005efa:	1a9b      	subs	r3, r3, r2
90005efc:	009b      	lsls	r3, r3, #2
90005efe:	4403      	add	r3, r0
90005f00:	3328      	adds	r3, #40	@ 0x28
90005f02:	881b      	ldrh	r3, [r3, #0]
90005f04:	440b      	add	r3, r1
90005f06:	1e59      	subs	r1, r3, #1
90005f08:	78fa      	ldrb	r2, [r7, #3]
90005f0a:	6878      	ldr	r0, [r7, #4]
90005f0c:	4613      	mov	r3, r2
90005f0e:	011b      	lsls	r3, r3, #4
90005f10:	1a9b      	subs	r3, r3, r2
90005f12:	009b      	lsls	r3, r3, #2
90005f14:	4403      	add	r3, r0
90005f16:	3328      	adds	r3, #40	@ 0x28
90005f18:	881b      	ldrh	r3, [r3, #0]
90005f1a:	fbb1 f3f3 	udiv	r3, r1, r3
90005f1e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
90005f20:	68bb      	ldr	r3, [r7, #8]
90005f22:	f003 0301 	and.w	r3, r3, #1
90005f26:	2b00      	cmp	r3, #0
90005f28:	f000 813f 	beq.w	900061aa <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005f2c:	78fa      	ldrb	r2, [r7, #3]
90005f2e:	6879      	ldr	r1, [r7, #4]
90005f30:	4613      	mov	r3, r2
90005f32:	011b      	lsls	r3, r3, #4
90005f34:	1a9b      	subs	r3, r3, r2
90005f36:	009b      	lsls	r3, r3, #2
90005f38:	440b      	add	r3, r1
90005f3a:	333d      	adds	r3, #61	@ 0x3d
90005f3c:	781b      	ldrb	r3, [r3, #0]
90005f3e:	78fa      	ldrb	r2, [r7, #3]
90005f40:	f083 0301 	eor.w	r3, r3, #1
90005f44:	b2d8      	uxtb	r0, r3
90005f46:	6879      	ldr	r1, [r7, #4]
90005f48:	4613      	mov	r3, r2
90005f4a:	011b      	lsls	r3, r3, #4
90005f4c:	1a9b      	subs	r3, r3, r2
90005f4e:	009b      	lsls	r3, r3, #2
90005f50:	440b      	add	r3, r1
90005f52:	333d      	adds	r3, #61	@ 0x3d
90005f54:	4602      	mov	r2, r0
90005f56:	701a      	strb	r2, [r3, #0]
90005f58:	e127      	b.n	900061aa <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005f5a:	78fa      	ldrb	r2, [r7, #3]
90005f5c:	6879      	ldr	r1, [r7, #4]
90005f5e:	4613      	mov	r3, r2
90005f60:	011b      	lsls	r3, r3, #4
90005f62:	1a9b      	subs	r3, r3, r2
90005f64:	009b      	lsls	r3, r3, #2
90005f66:	440b      	add	r3, r1
90005f68:	334d      	adds	r3, #77	@ 0x4d
90005f6a:	781b      	ldrb	r3, [r3, #0]
90005f6c:	2b03      	cmp	r3, #3
90005f6e:	d120      	bne.n	90005fb2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005f70:	78fa      	ldrb	r2, [r7, #3]
90005f72:	6879      	ldr	r1, [r7, #4]
90005f74:	4613      	mov	r3, r2
90005f76:	011b      	lsls	r3, r3, #4
90005f78:	1a9b      	subs	r3, r3, r2
90005f7a:	009b      	lsls	r3, r3, #2
90005f7c:	440b      	add	r3, r1
90005f7e:	334d      	adds	r3, #77	@ 0x4d
90005f80:	2202      	movs	r2, #2
90005f82:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005f84:	78fa      	ldrb	r2, [r7, #3]
90005f86:	6879      	ldr	r1, [r7, #4]
90005f88:	4613      	mov	r3, r2
90005f8a:	011b      	lsls	r3, r3, #4
90005f8c:	1a9b      	subs	r3, r3, r2
90005f8e:	009b      	lsls	r3, r3, #2
90005f90:	440b      	add	r3, r1
90005f92:	331b      	adds	r3, #27
90005f94:	781b      	ldrb	r3, [r3, #0]
90005f96:	2b01      	cmp	r3, #1
90005f98:	f040 8107 	bne.w	900061aa <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005f9c:	78fa      	ldrb	r2, [r7, #3]
90005f9e:	6879      	ldr	r1, [r7, #4]
90005fa0:	4613      	mov	r3, r2
90005fa2:	011b      	lsls	r3, r3, #4
90005fa4:	1a9b      	subs	r3, r3, r2
90005fa6:	009b      	lsls	r3, r3, #2
90005fa8:	440b      	add	r3, r1
90005faa:	334c      	adds	r3, #76	@ 0x4c
90005fac:	2202      	movs	r2, #2
90005fae:	701a      	strb	r2, [r3, #0]
90005fb0:	e0fb      	b.n	900061aa <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005fb2:	78fa      	ldrb	r2, [r7, #3]
90005fb4:	6879      	ldr	r1, [r7, #4]
90005fb6:	4613      	mov	r3, r2
90005fb8:	011b      	lsls	r3, r3, #4
90005fba:	1a9b      	subs	r3, r3, r2
90005fbc:	009b      	lsls	r3, r3, #2
90005fbe:	440b      	add	r3, r1
90005fc0:	334d      	adds	r3, #77	@ 0x4d
90005fc2:	781b      	ldrb	r3, [r3, #0]
90005fc4:	2b04      	cmp	r3, #4
90005fc6:	d13a      	bne.n	9000603e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005fc8:	78fa      	ldrb	r2, [r7, #3]
90005fca:	6879      	ldr	r1, [r7, #4]
90005fcc:	4613      	mov	r3, r2
90005fce:	011b      	lsls	r3, r3, #4
90005fd0:	1a9b      	subs	r3, r3, r2
90005fd2:	009b      	lsls	r3, r3, #2
90005fd4:	440b      	add	r3, r1
90005fd6:	334d      	adds	r3, #77	@ 0x4d
90005fd8:	2202      	movs	r2, #2
90005fda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005fdc:	78fa      	ldrb	r2, [r7, #3]
90005fde:	6879      	ldr	r1, [r7, #4]
90005fe0:	4613      	mov	r3, r2
90005fe2:	011b      	lsls	r3, r3, #4
90005fe4:	1a9b      	subs	r3, r3, r2
90005fe6:	009b      	lsls	r3, r3, #2
90005fe8:	440b      	add	r3, r1
90005fea:	334c      	adds	r3, #76	@ 0x4c
90005fec:	2202      	movs	r2, #2
90005fee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005ff0:	78fa      	ldrb	r2, [r7, #3]
90005ff2:	6879      	ldr	r1, [r7, #4]
90005ff4:	4613      	mov	r3, r2
90005ff6:	011b      	lsls	r3, r3, #4
90005ff8:	1a9b      	subs	r3, r3, r2
90005ffa:	009b      	lsls	r3, r3, #2
90005ffc:	440b      	add	r3, r1
90005ffe:	331b      	adds	r3, #27
90006000:	781b      	ldrb	r3, [r3, #0]
90006002:	2b01      	cmp	r3, #1
90006004:	f040 80d1 	bne.w	900061aa <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
90006008:	78fa      	ldrb	r2, [r7, #3]
9000600a:	6879      	ldr	r1, [r7, #4]
9000600c:	4613      	mov	r3, r2
9000600e:	011b      	lsls	r3, r3, #4
90006010:	1a9b      	subs	r3, r3, r2
90006012:	009b      	lsls	r3, r3, #2
90006014:	440b      	add	r3, r1
90006016:	331b      	adds	r3, #27
90006018:	2200      	movs	r2, #0
9000601a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000601c:	78fb      	ldrb	r3, [r7, #3]
9000601e:	015a      	lsls	r2, r3, #5
90006020:	693b      	ldr	r3, [r7, #16]
90006022:	4413      	add	r3, r2
90006024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006028:	685b      	ldr	r3, [r3, #4]
9000602a:	78fa      	ldrb	r2, [r7, #3]
9000602c:	0151      	lsls	r1, r2, #5
9000602e:	693a      	ldr	r2, [r7, #16]
90006030:	440a      	add	r2, r1
90006032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90006036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000603a:	6053      	str	r3, [r2, #4]
9000603c:	e0b5      	b.n	900061aa <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000603e:	78fa      	ldrb	r2, [r7, #3]
90006040:	6879      	ldr	r1, [r7, #4]
90006042:	4613      	mov	r3, r2
90006044:	011b      	lsls	r3, r3, #4
90006046:	1a9b      	subs	r3, r3, r2
90006048:	009b      	lsls	r3, r3, #2
9000604a:	440b      	add	r3, r1
9000604c:	334d      	adds	r3, #77	@ 0x4d
9000604e:	781b      	ldrb	r3, [r3, #0]
90006050:	2b05      	cmp	r3, #5
90006052:	d114      	bne.n	9000607e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006054:	78fa      	ldrb	r2, [r7, #3]
90006056:	6879      	ldr	r1, [r7, #4]
90006058:	4613      	mov	r3, r2
9000605a:	011b      	lsls	r3, r3, #4
9000605c:	1a9b      	subs	r3, r3, r2
9000605e:	009b      	lsls	r3, r3, #2
90006060:	440b      	add	r3, r1
90006062:	334d      	adds	r3, #77	@ 0x4d
90006064:	2202      	movs	r2, #2
90006066:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90006068:	78fa      	ldrb	r2, [r7, #3]
9000606a:	6879      	ldr	r1, [r7, #4]
9000606c:	4613      	mov	r3, r2
9000606e:	011b      	lsls	r3, r3, #4
90006070:	1a9b      	subs	r3, r3, r2
90006072:	009b      	lsls	r3, r3, #2
90006074:	440b      	add	r3, r1
90006076:	334c      	adds	r3, #76	@ 0x4c
90006078:	2202      	movs	r2, #2
9000607a:	701a      	strb	r2, [r3, #0]
9000607c:	e095      	b.n	900061aa <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000607e:	78fa      	ldrb	r2, [r7, #3]
90006080:	6879      	ldr	r1, [r7, #4]
90006082:	4613      	mov	r3, r2
90006084:	011b      	lsls	r3, r3, #4
90006086:	1a9b      	subs	r3, r3, r2
90006088:	009b      	lsls	r3, r3, #2
9000608a:	440b      	add	r3, r1
9000608c:	334d      	adds	r3, #77	@ 0x4d
9000608e:	781b      	ldrb	r3, [r3, #0]
90006090:	2b06      	cmp	r3, #6
90006092:	d114      	bne.n	900060be <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006094:	78fa      	ldrb	r2, [r7, #3]
90006096:	6879      	ldr	r1, [r7, #4]
90006098:	4613      	mov	r3, r2
9000609a:	011b      	lsls	r3, r3, #4
9000609c:	1a9b      	subs	r3, r3, r2
9000609e:	009b      	lsls	r3, r3, #2
900060a0:	440b      	add	r3, r1
900060a2:	334d      	adds	r3, #77	@ 0x4d
900060a4:	2202      	movs	r2, #2
900060a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
900060a8:	78fa      	ldrb	r2, [r7, #3]
900060aa:	6879      	ldr	r1, [r7, #4]
900060ac:	4613      	mov	r3, r2
900060ae:	011b      	lsls	r3, r3, #4
900060b0:	1a9b      	subs	r3, r3, r2
900060b2:	009b      	lsls	r3, r3, #2
900060b4:	440b      	add	r3, r1
900060b6:	334c      	adds	r3, #76	@ 0x4c
900060b8:	2205      	movs	r2, #5
900060ba:	701a      	strb	r2, [r3, #0]
900060bc:	e075      	b.n	900061aa <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900060be:	78fa      	ldrb	r2, [r7, #3]
900060c0:	6879      	ldr	r1, [r7, #4]
900060c2:	4613      	mov	r3, r2
900060c4:	011b      	lsls	r3, r3, #4
900060c6:	1a9b      	subs	r3, r3, r2
900060c8:	009b      	lsls	r3, r3, #2
900060ca:	440b      	add	r3, r1
900060cc:	334d      	adds	r3, #77	@ 0x4d
900060ce:	781b      	ldrb	r3, [r3, #0]
900060d0:	2b07      	cmp	r3, #7
900060d2:	d00a      	beq.n	900060ea <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900060d4:	78fa      	ldrb	r2, [r7, #3]
900060d6:	6879      	ldr	r1, [r7, #4]
900060d8:	4613      	mov	r3, r2
900060da:	011b      	lsls	r3, r3, #4
900060dc:	1a9b      	subs	r3, r3, r2
900060de:	009b      	lsls	r3, r3, #2
900060e0:	440b      	add	r3, r1
900060e2:	334d      	adds	r3, #77	@ 0x4d
900060e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900060e6:	2b09      	cmp	r3, #9
900060e8:	d170      	bne.n	900061cc <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900060ea:	78fa      	ldrb	r2, [r7, #3]
900060ec:	6879      	ldr	r1, [r7, #4]
900060ee:	4613      	mov	r3, r2
900060f0:	011b      	lsls	r3, r3, #4
900060f2:	1a9b      	subs	r3, r3, r2
900060f4:	009b      	lsls	r3, r3, #2
900060f6:	440b      	add	r3, r1
900060f8:	334d      	adds	r3, #77	@ 0x4d
900060fa:	2202      	movs	r2, #2
900060fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900060fe:	78fa      	ldrb	r2, [r7, #3]
90006100:	6879      	ldr	r1, [r7, #4]
90006102:	4613      	mov	r3, r2
90006104:	011b      	lsls	r3, r3, #4
90006106:	1a9b      	subs	r3, r3, r2
90006108:	009b      	lsls	r3, r3, #2
9000610a:	440b      	add	r3, r1
9000610c:	3344      	adds	r3, #68	@ 0x44
9000610e:	681b      	ldr	r3, [r3, #0]
90006110:	1c59      	adds	r1, r3, #1
90006112:	6878      	ldr	r0, [r7, #4]
90006114:	4613      	mov	r3, r2
90006116:	011b      	lsls	r3, r3, #4
90006118:	1a9b      	subs	r3, r3, r2
9000611a:	009b      	lsls	r3, r3, #2
9000611c:	4403      	add	r3, r0
9000611e:	3344      	adds	r3, #68	@ 0x44
90006120:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90006122:	78fa      	ldrb	r2, [r7, #3]
90006124:	6879      	ldr	r1, [r7, #4]
90006126:	4613      	mov	r3, r2
90006128:	011b      	lsls	r3, r3, #4
9000612a:	1a9b      	subs	r3, r3, r2
9000612c:	009b      	lsls	r3, r3, #2
9000612e:	440b      	add	r3, r1
90006130:	3344      	adds	r3, #68	@ 0x44
90006132:	681b      	ldr	r3, [r3, #0]
90006134:	2b02      	cmp	r3, #2
90006136:	d914      	bls.n	90006162 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90006138:	78fa      	ldrb	r2, [r7, #3]
9000613a:	6879      	ldr	r1, [r7, #4]
9000613c:	4613      	mov	r3, r2
9000613e:	011b      	lsls	r3, r3, #4
90006140:	1a9b      	subs	r3, r3, r2
90006142:	009b      	lsls	r3, r3, #2
90006144:	440b      	add	r3, r1
90006146:	3344      	adds	r3, #68	@ 0x44
90006148:	2200      	movs	r2, #0
9000614a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
9000614c:	78fa      	ldrb	r2, [r7, #3]
9000614e:	6879      	ldr	r1, [r7, #4]
90006150:	4613      	mov	r3, r2
90006152:	011b      	lsls	r3, r3, #4
90006154:	1a9b      	subs	r3, r3, r2
90006156:	009b      	lsls	r3, r3, #2
90006158:	440b      	add	r3, r1
9000615a:	334c      	adds	r3, #76	@ 0x4c
9000615c:	2204      	movs	r2, #4
9000615e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90006160:	e022      	b.n	900061a8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90006162:	78fa      	ldrb	r2, [r7, #3]
90006164:	6879      	ldr	r1, [r7, #4]
90006166:	4613      	mov	r3, r2
90006168:	011b      	lsls	r3, r3, #4
9000616a:	1a9b      	subs	r3, r3, r2
9000616c:	009b      	lsls	r3, r3, #2
9000616e:	440b      	add	r3, r1
90006170:	334c      	adds	r3, #76	@ 0x4c
90006172:	2202      	movs	r2, #2
90006174:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90006176:	78fb      	ldrb	r3, [r7, #3]
90006178:	015a      	lsls	r2, r3, #5
9000617a:	693b      	ldr	r3, [r7, #16]
9000617c:	4413      	add	r3, r2
9000617e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006182:	681b      	ldr	r3, [r3, #0]
90006184:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90006186:	68fb      	ldr	r3, [r7, #12]
90006188:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000618c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
9000618e:	68fb      	ldr	r3, [r7, #12]
90006190:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90006194:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90006196:	78fb      	ldrb	r3, [r7, #3]
90006198:	015a      	lsls	r2, r3, #5
9000619a:	693b      	ldr	r3, [r7, #16]
9000619c:	4413      	add	r3, r2
9000619e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900061a2:	461a      	mov	r2, r3
900061a4:	68fb      	ldr	r3, [r7, #12]
900061a6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900061a8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900061aa:	78fa      	ldrb	r2, [r7, #3]
900061ac:	6879      	ldr	r1, [r7, #4]
900061ae:	4613      	mov	r3, r2
900061b0:	011b      	lsls	r3, r3, #4
900061b2:	1a9b      	subs	r3, r3, r2
900061b4:	009b      	lsls	r3, r3, #2
900061b6:	440b      	add	r3, r1
900061b8:	334c      	adds	r3, #76	@ 0x4c
900061ba:	781a      	ldrb	r2, [r3, #0]
900061bc:	78fb      	ldrb	r3, [r7, #3]
900061be:	4619      	mov	r1, r3
900061c0:	6878      	ldr	r0, [r7, #4]
900061c2:	f7fb f86d 	bl	900012a0 <HAL_HCD_HC_NotifyURBChange_Callback>
900061c6:	e002      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
900061c8:	bf00      	nop
900061ca:	e000      	b.n	900061ce <HCD_HC_OUT_IRQHandler+0x978>
      return;
900061cc:	bf00      	nop
  }
}
900061ce:	3718      	adds	r7, #24
900061d0:	46bd      	mov	sp, r7
900061d2:	bd80      	pop	{r7, pc}

900061d4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900061d4:	b580      	push	{r7, lr}
900061d6:	b08a      	sub	sp, #40	@ 0x28
900061d8:	af00      	add	r7, sp, #0
900061da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900061dc:	687b      	ldr	r3, [r7, #4]
900061de:	681b      	ldr	r3, [r3, #0]
900061e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
900061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900061e4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
900061e6:	687b      	ldr	r3, [r7, #4]
900061e8:	681b      	ldr	r3, [r3, #0]
900061ea:	6a1b      	ldr	r3, [r3, #32]
900061ec:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
900061ee:	69fb      	ldr	r3, [r7, #28]
900061f0:	f003 030f 	and.w	r3, r3, #15
900061f4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
900061f6:	69fb      	ldr	r3, [r7, #28]
900061f8:	0c5b      	lsrs	r3, r3, #17
900061fa:	f003 030f 	and.w	r3, r3, #15
900061fe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
90006200:	69fb      	ldr	r3, [r7, #28]
90006202:	091b      	lsrs	r3, r3, #4
90006204:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006208:	613b      	str	r3, [r7, #16]

  switch (pktsts)
9000620a:	697b      	ldr	r3, [r7, #20]
9000620c:	2b02      	cmp	r3, #2
9000620e:	d004      	beq.n	9000621a <HCD_RXQLVL_IRQHandler+0x46>
90006210:	697b      	ldr	r3, [r7, #20]
90006212:	2b05      	cmp	r3, #5
90006214:	f000 80b6 	beq.w	90006384 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90006218:	e0b7      	b.n	9000638a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
9000621a:	693b      	ldr	r3, [r7, #16]
9000621c:	2b00      	cmp	r3, #0
9000621e:	f000 80b3 	beq.w	90006388 <HCD_RXQLVL_IRQHandler+0x1b4>
90006222:	6879      	ldr	r1, [r7, #4]
90006224:	69ba      	ldr	r2, [r7, #24]
90006226:	4613      	mov	r3, r2
90006228:	011b      	lsls	r3, r3, #4
9000622a:	1a9b      	subs	r3, r3, r2
9000622c:	009b      	lsls	r3, r3, #2
9000622e:	440b      	add	r3, r1
90006230:	332c      	adds	r3, #44	@ 0x2c
90006232:	681b      	ldr	r3, [r3, #0]
90006234:	2b00      	cmp	r3, #0
90006236:	f000 80a7 	beq.w	90006388 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
9000623a:	6879      	ldr	r1, [r7, #4]
9000623c:	69ba      	ldr	r2, [r7, #24]
9000623e:	4613      	mov	r3, r2
90006240:	011b      	lsls	r3, r3, #4
90006242:	1a9b      	subs	r3, r3, r2
90006244:	009b      	lsls	r3, r3, #2
90006246:	440b      	add	r3, r1
90006248:	3338      	adds	r3, #56	@ 0x38
9000624a:	681a      	ldr	r2, [r3, #0]
9000624c:	693b      	ldr	r3, [r7, #16]
9000624e:	18d1      	adds	r1, r2, r3
90006250:	6878      	ldr	r0, [r7, #4]
90006252:	69ba      	ldr	r2, [r7, #24]
90006254:	4613      	mov	r3, r2
90006256:	011b      	lsls	r3, r3, #4
90006258:	1a9b      	subs	r3, r3, r2
9000625a:	009b      	lsls	r3, r3, #2
9000625c:	4403      	add	r3, r0
9000625e:	3334      	adds	r3, #52	@ 0x34
90006260:	681b      	ldr	r3, [r3, #0]
90006262:	4299      	cmp	r1, r3
90006264:	f200 8083 	bhi.w	9000636e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90006268:	687b      	ldr	r3, [r7, #4]
9000626a:	6818      	ldr	r0, [r3, #0]
9000626c:	6879      	ldr	r1, [r7, #4]
9000626e:	69ba      	ldr	r2, [r7, #24]
90006270:	4613      	mov	r3, r2
90006272:	011b      	lsls	r3, r3, #4
90006274:	1a9b      	subs	r3, r3, r2
90006276:	009b      	lsls	r3, r3, #2
90006278:	440b      	add	r3, r1
9000627a:	332c      	adds	r3, #44	@ 0x2c
9000627c:	681b      	ldr	r3, [r3, #0]
9000627e:	693a      	ldr	r2, [r7, #16]
90006280:	b292      	uxth	r2, r2
90006282:	4619      	mov	r1, r3
90006284:	f005 fe1a 	bl	9000bebc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90006288:	6879      	ldr	r1, [r7, #4]
9000628a:	69ba      	ldr	r2, [r7, #24]
9000628c:	4613      	mov	r3, r2
9000628e:	011b      	lsls	r3, r3, #4
90006290:	1a9b      	subs	r3, r3, r2
90006292:	009b      	lsls	r3, r3, #2
90006294:	440b      	add	r3, r1
90006296:	332c      	adds	r3, #44	@ 0x2c
90006298:	681a      	ldr	r2, [r3, #0]
9000629a:	693b      	ldr	r3, [r7, #16]
9000629c:	18d1      	adds	r1, r2, r3
9000629e:	6878      	ldr	r0, [r7, #4]
900062a0:	69ba      	ldr	r2, [r7, #24]
900062a2:	4613      	mov	r3, r2
900062a4:	011b      	lsls	r3, r3, #4
900062a6:	1a9b      	subs	r3, r3, r2
900062a8:	009b      	lsls	r3, r3, #2
900062aa:	4403      	add	r3, r0
900062ac:	332c      	adds	r3, #44	@ 0x2c
900062ae:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
900062b0:	6879      	ldr	r1, [r7, #4]
900062b2:	69ba      	ldr	r2, [r7, #24]
900062b4:	4613      	mov	r3, r2
900062b6:	011b      	lsls	r3, r3, #4
900062b8:	1a9b      	subs	r3, r3, r2
900062ba:	009b      	lsls	r3, r3, #2
900062bc:	440b      	add	r3, r1
900062be:	3338      	adds	r3, #56	@ 0x38
900062c0:	681a      	ldr	r2, [r3, #0]
900062c2:	693b      	ldr	r3, [r7, #16]
900062c4:	18d1      	adds	r1, r2, r3
900062c6:	6878      	ldr	r0, [r7, #4]
900062c8:	69ba      	ldr	r2, [r7, #24]
900062ca:	4613      	mov	r3, r2
900062cc:	011b      	lsls	r3, r3, #4
900062ce:	1a9b      	subs	r3, r3, r2
900062d0:	009b      	lsls	r3, r3, #2
900062d2:	4403      	add	r3, r0
900062d4:	3338      	adds	r3, #56	@ 0x38
900062d6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
900062d8:	69bb      	ldr	r3, [r7, #24]
900062da:	015a      	lsls	r2, r3, #5
900062dc:	6a3b      	ldr	r3, [r7, #32]
900062de:	4413      	add	r3, r2
900062e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900062e4:	691b      	ldr	r3, [r3, #16]
900062e6:	0cdb      	lsrs	r3, r3, #19
900062e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
900062ec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
900062ee:	6879      	ldr	r1, [r7, #4]
900062f0:	69ba      	ldr	r2, [r7, #24]
900062f2:	4613      	mov	r3, r2
900062f4:	011b      	lsls	r3, r3, #4
900062f6:	1a9b      	subs	r3, r3, r2
900062f8:	009b      	lsls	r3, r3, #2
900062fa:	440b      	add	r3, r1
900062fc:	3328      	adds	r3, #40	@ 0x28
900062fe:	881b      	ldrh	r3, [r3, #0]
90006300:	461a      	mov	r2, r3
90006302:	693b      	ldr	r3, [r7, #16]
90006304:	4293      	cmp	r3, r2
90006306:	d13f      	bne.n	90006388 <HCD_RXQLVL_IRQHandler+0x1b4>
90006308:	68fb      	ldr	r3, [r7, #12]
9000630a:	2b00      	cmp	r3, #0
9000630c:	d03c      	beq.n	90006388 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
9000630e:	69bb      	ldr	r3, [r7, #24]
90006310:	015a      	lsls	r2, r3, #5
90006312:	6a3b      	ldr	r3, [r7, #32]
90006314:	4413      	add	r3, r2
90006316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000631a:	681b      	ldr	r3, [r3, #0]
9000631c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000631e:	68bb      	ldr	r3, [r7, #8]
90006320:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90006324:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90006326:	68bb      	ldr	r3, [r7, #8]
90006328:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000632c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
9000632e:	69bb      	ldr	r3, [r7, #24]
90006330:	015a      	lsls	r2, r3, #5
90006332:	6a3b      	ldr	r3, [r7, #32]
90006334:	4413      	add	r3, r2
90006336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000633a:	461a      	mov	r2, r3
9000633c:	68bb      	ldr	r3, [r7, #8]
9000633e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90006340:	6879      	ldr	r1, [r7, #4]
90006342:	69ba      	ldr	r2, [r7, #24]
90006344:	4613      	mov	r3, r2
90006346:	011b      	lsls	r3, r3, #4
90006348:	1a9b      	subs	r3, r3, r2
9000634a:	009b      	lsls	r3, r3, #2
9000634c:	440b      	add	r3, r1
9000634e:	333c      	adds	r3, #60	@ 0x3c
90006350:	781b      	ldrb	r3, [r3, #0]
90006352:	f083 0301 	eor.w	r3, r3, #1
90006356:	b2d8      	uxtb	r0, r3
90006358:	6879      	ldr	r1, [r7, #4]
9000635a:	69ba      	ldr	r2, [r7, #24]
9000635c:	4613      	mov	r3, r2
9000635e:	011b      	lsls	r3, r3, #4
90006360:	1a9b      	subs	r3, r3, r2
90006362:	009b      	lsls	r3, r3, #2
90006364:	440b      	add	r3, r1
90006366:	333c      	adds	r3, #60	@ 0x3c
90006368:	4602      	mov	r2, r0
9000636a:	701a      	strb	r2, [r3, #0]
      break;
9000636c:	e00c      	b.n	90006388 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
9000636e:	6879      	ldr	r1, [r7, #4]
90006370:	69ba      	ldr	r2, [r7, #24]
90006372:	4613      	mov	r3, r2
90006374:	011b      	lsls	r3, r3, #4
90006376:	1a9b      	subs	r3, r3, r2
90006378:	009b      	lsls	r3, r3, #2
9000637a:	440b      	add	r3, r1
9000637c:	334c      	adds	r3, #76	@ 0x4c
9000637e:	2204      	movs	r2, #4
90006380:	701a      	strb	r2, [r3, #0]
      break;
90006382:	e001      	b.n	90006388 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90006384:	bf00      	nop
90006386:	e000      	b.n	9000638a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90006388:	bf00      	nop
  }
}
9000638a:	bf00      	nop
9000638c:	3728      	adds	r7, #40	@ 0x28
9000638e:	46bd      	mov	sp, r7
90006390:	bd80      	pop	{r7, pc}

90006392 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90006392:	b580      	push	{r7, lr}
90006394:	b086      	sub	sp, #24
90006396:	af00      	add	r7, sp, #0
90006398:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000639a:	687b      	ldr	r3, [r7, #4]
9000639c:	681b      	ldr	r3, [r3, #0]
9000639e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900063a0:	697b      	ldr	r3, [r7, #20]
900063a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
900063a4:	693b      	ldr	r3, [r7, #16]
900063a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900063aa:	681b      	ldr	r3, [r3, #0]
900063ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
900063ae:	693b      	ldr	r3, [r7, #16]
900063b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900063b4:	681b      	ldr	r3, [r3, #0]
900063b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900063b8:	68bb      	ldr	r3, [r7, #8]
900063ba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
900063be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900063c0:	68fb      	ldr	r3, [r7, #12]
900063c2:	f003 0302 	and.w	r3, r3, #2
900063c6:	2b02      	cmp	r3, #2
900063c8:	d10b      	bne.n	900063e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
900063ca:	68fb      	ldr	r3, [r7, #12]
900063cc:	f003 0301 	and.w	r3, r3, #1
900063d0:	2b01      	cmp	r3, #1
900063d2:	d102      	bne.n	900063da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
900063d4:	6878      	ldr	r0, [r7, #4]
900063d6:	f7fa ff2b 	bl	90001230 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
900063da:	68bb      	ldr	r3, [r7, #8]
900063dc:	f043 0302 	orr.w	r3, r3, #2
900063e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900063e2:	68fb      	ldr	r3, [r7, #12]
900063e4:	f003 0308 	and.w	r3, r3, #8
900063e8:	2b08      	cmp	r3, #8
900063ea:	d132      	bne.n	90006452 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
900063ec:	68bb      	ldr	r3, [r7, #8]
900063ee:	f043 0308 	orr.w	r3, r3, #8
900063f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
900063f4:	68fb      	ldr	r3, [r7, #12]
900063f6:	f003 0304 	and.w	r3, r3, #4
900063fa:	2b04      	cmp	r3, #4
900063fc:	d126      	bne.n	9000644c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900063fe:	687b      	ldr	r3, [r7, #4]
90006400:	7a5b      	ldrb	r3, [r3, #9]
90006402:	2b02      	cmp	r3, #2
90006404:	d113      	bne.n	9000642e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90006406:	68fb      	ldr	r3, [r7, #12]
90006408:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
9000640c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90006410:	d106      	bne.n	90006420 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90006412:	687b      	ldr	r3, [r7, #4]
90006414:	681b      	ldr	r3, [r3, #0]
90006416:	2102      	movs	r1, #2
90006418:	4618      	mov	r0, r3
9000641a:	f005 fde9 	bl	9000bff0 <USB_InitFSLSPClkSel>
9000641e:	e011      	b.n	90006444 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90006420:	687b      	ldr	r3, [r7, #4]
90006422:	681b      	ldr	r3, [r3, #0]
90006424:	2101      	movs	r1, #1
90006426:	4618      	mov	r0, r3
90006428:	f005 fde2 	bl	9000bff0 <USB_InitFSLSPClkSel>
9000642c:	e00a      	b.n	90006444 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
9000642e:	687b      	ldr	r3, [r7, #4]
90006430:	79db      	ldrb	r3, [r3, #7]
90006432:	2b01      	cmp	r3, #1
90006434:	d106      	bne.n	90006444 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90006436:	693b      	ldr	r3, [r7, #16]
90006438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000643c:	461a      	mov	r2, r3
9000643e:	f64e 2360 	movw	r3, #60000	@ 0xea60
90006442:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90006444:	6878      	ldr	r0, [r7, #4]
90006446:	f7fa ff0f 	bl	90001268 <HAL_HCD_PortEnabled_Callback>
9000644a:	e002      	b.n	90006452 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
9000644c:	6878      	ldr	r0, [r7, #4]
9000644e:	f7fa ff19 	bl	90001284 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90006452:	68fb      	ldr	r3, [r7, #12]
90006454:	f003 0320 	and.w	r3, r3, #32
90006458:	2b20      	cmp	r3, #32
9000645a:	d103      	bne.n	90006464 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
9000645c:	68bb      	ldr	r3, [r7, #8]
9000645e:	f043 0320 	orr.w	r3, r3, #32
90006462:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90006464:	693b      	ldr	r3, [r7, #16]
90006466:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000646a:	461a      	mov	r2, r3
9000646c:	68bb      	ldr	r3, [r7, #8]
9000646e:	6013      	str	r3, [r2, #0]
}
90006470:	bf00      	nop
90006472:	3718      	adds	r7, #24
90006474:	46bd      	mov	sp, r7
90006476:	bd80      	pop	{r7, pc}

90006478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90006478:	b580      	push	{r7, lr}
9000647a:	b082      	sub	sp, #8
9000647c:	af00      	add	r7, sp, #0
9000647e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90006480:	687b      	ldr	r3, [r7, #4]
90006482:	2b00      	cmp	r3, #0
90006484:	d101      	bne.n	9000648a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90006486:	2301      	movs	r3, #1
90006488:	e08b      	b.n	900065a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
9000648a:	687b      	ldr	r3, [r7, #4]
9000648c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006490:	b2db      	uxtb	r3, r3
90006492:	2b00      	cmp	r3, #0
90006494:	d106      	bne.n	900064a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90006496:	687b      	ldr	r3, [r7, #4]
90006498:	2200      	movs	r2, #0
9000649a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
9000649e:	6878      	ldr	r0, [r7, #4]
900064a0:	f000 f8b5 	bl	9000660e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
900064a4:	687b      	ldr	r3, [r7, #4]
900064a6:	2224      	movs	r2, #36	@ 0x24
900064a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
900064ac:	687b      	ldr	r3, [r7, #4]
900064ae:	681b      	ldr	r3, [r3, #0]
900064b0:	681a      	ldr	r2, [r3, #0]
900064b2:	687b      	ldr	r3, [r7, #4]
900064b4:	681b      	ldr	r3, [r3, #0]
900064b6:	f022 0201 	bic.w	r2, r2, #1
900064ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900064bc:	687b      	ldr	r3, [r7, #4]
900064be:	685a      	ldr	r2, [r3, #4]
900064c0:	687b      	ldr	r3, [r7, #4]
900064c2:	681b      	ldr	r3, [r3, #0]
900064c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
900064c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900064ca:	687b      	ldr	r3, [r7, #4]
900064cc:	681b      	ldr	r3, [r3, #0]
900064ce:	689a      	ldr	r2, [r3, #8]
900064d0:	687b      	ldr	r3, [r7, #4]
900064d2:	681b      	ldr	r3, [r3, #0]
900064d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
900064d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900064da:	687b      	ldr	r3, [r7, #4]
900064dc:	68db      	ldr	r3, [r3, #12]
900064de:	2b01      	cmp	r3, #1
900064e0:	d107      	bne.n	900064f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900064e2:	687b      	ldr	r3, [r7, #4]
900064e4:	689a      	ldr	r2, [r3, #8]
900064e6:	687b      	ldr	r3, [r7, #4]
900064e8:	681b      	ldr	r3, [r3, #0]
900064ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
900064ee:	609a      	str	r2, [r3, #8]
900064f0:	e006      	b.n	90006500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900064f2:	687b      	ldr	r3, [r7, #4]
900064f4:	689a      	ldr	r2, [r3, #8]
900064f6:	687b      	ldr	r3, [r7, #4]
900064f8:	681b      	ldr	r3, [r3, #0]
900064fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
900064fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90006500:	687b      	ldr	r3, [r7, #4]
90006502:	68db      	ldr	r3, [r3, #12]
90006504:	2b02      	cmp	r3, #2
90006506:	d108      	bne.n	9000651a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90006508:	687b      	ldr	r3, [r7, #4]
9000650a:	681b      	ldr	r3, [r3, #0]
9000650c:	685a      	ldr	r2, [r3, #4]
9000650e:	687b      	ldr	r3, [r7, #4]
90006510:	681b      	ldr	r3, [r3, #0]
90006512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90006516:	605a      	str	r2, [r3, #4]
90006518:	e007      	b.n	9000652a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
9000651a:	687b      	ldr	r3, [r7, #4]
9000651c:	681b      	ldr	r3, [r3, #0]
9000651e:	685a      	ldr	r2, [r3, #4]
90006520:	687b      	ldr	r3, [r7, #4]
90006522:	681b      	ldr	r3, [r3, #0]
90006524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90006528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000652a:	687b      	ldr	r3, [r7, #4]
9000652c:	681b      	ldr	r3, [r3, #0]
9000652e:	6859      	ldr	r1, [r3, #4]
90006530:	687b      	ldr	r3, [r7, #4]
90006532:	681a      	ldr	r2, [r3, #0]
90006534:	4b1d      	ldr	r3, [pc, #116]	@ (900065ac <HAL_I2C_Init+0x134>)
90006536:	430b      	orrs	r3, r1
90006538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000653a:	687b      	ldr	r3, [r7, #4]
9000653c:	681b      	ldr	r3, [r3, #0]
9000653e:	68da      	ldr	r2, [r3, #12]
90006540:	687b      	ldr	r3, [r7, #4]
90006542:	681b      	ldr	r3, [r3, #0]
90006544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90006548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000654a:	687b      	ldr	r3, [r7, #4]
9000654c:	691a      	ldr	r2, [r3, #16]
9000654e:	687b      	ldr	r3, [r7, #4]
90006550:	695b      	ldr	r3, [r3, #20]
90006552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90006556:	687b      	ldr	r3, [r7, #4]
90006558:	699b      	ldr	r3, [r3, #24]
9000655a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000655c:	687b      	ldr	r3, [r7, #4]
9000655e:	681b      	ldr	r3, [r3, #0]
90006560:	430a      	orrs	r2, r1
90006562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90006564:	687b      	ldr	r3, [r7, #4]
90006566:	69d9      	ldr	r1, [r3, #28]
90006568:	687b      	ldr	r3, [r7, #4]
9000656a:	6a1a      	ldr	r2, [r3, #32]
9000656c:	687b      	ldr	r3, [r7, #4]
9000656e:	681b      	ldr	r3, [r3, #0]
90006570:	430a      	orrs	r2, r1
90006572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90006574:	687b      	ldr	r3, [r7, #4]
90006576:	681b      	ldr	r3, [r3, #0]
90006578:	681a      	ldr	r2, [r3, #0]
9000657a:	687b      	ldr	r3, [r7, #4]
9000657c:	681b      	ldr	r3, [r3, #0]
9000657e:	f042 0201 	orr.w	r2, r2, #1
90006582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90006584:	687b      	ldr	r3, [r7, #4]
90006586:	2200      	movs	r2, #0
90006588:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
9000658a:	687b      	ldr	r3, [r7, #4]
9000658c:	2220      	movs	r2, #32
9000658e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90006592:	687b      	ldr	r3, [r7, #4]
90006594:	2200      	movs	r2, #0
90006596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90006598:	687b      	ldr	r3, [r7, #4]
9000659a:	2200      	movs	r2, #0
9000659c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
900065a0:	2300      	movs	r3, #0
}
900065a2:	4618      	mov	r0, r3
900065a4:	3708      	adds	r7, #8
900065a6:	46bd      	mov	sp, r7
900065a8:	bd80      	pop	{r7, pc}
900065aa:	bf00      	nop
900065ac:	02008000 	.word	0x02008000

900065b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
900065b0:	b580      	push	{r7, lr}
900065b2:	b082      	sub	sp, #8
900065b4:	af00      	add	r7, sp, #0
900065b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
900065b8:	687b      	ldr	r3, [r7, #4]
900065ba:	2b00      	cmp	r3, #0
900065bc:	d101      	bne.n	900065c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
900065be:	2301      	movs	r3, #1
900065c0:	e021      	b.n	90006606 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
900065c2:	687b      	ldr	r3, [r7, #4]
900065c4:	2224      	movs	r2, #36	@ 0x24
900065c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
900065ca:	687b      	ldr	r3, [r7, #4]
900065cc:	681b      	ldr	r3, [r3, #0]
900065ce:	681a      	ldr	r2, [r3, #0]
900065d0:	687b      	ldr	r3, [r7, #4]
900065d2:	681b      	ldr	r3, [r3, #0]
900065d4:	f022 0201 	bic.w	r2, r2, #1
900065d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
900065da:	6878      	ldr	r0, [r7, #4]
900065dc:	f000 f821 	bl	90006622 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900065e0:	687b      	ldr	r3, [r7, #4]
900065e2:	2200      	movs	r2, #0
900065e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
900065e6:	687b      	ldr	r3, [r7, #4]
900065e8:	2200      	movs	r2, #0
900065ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900065ee:	687b      	ldr	r3, [r7, #4]
900065f0:	2200      	movs	r2, #0
900065f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900065f4:	687b      	ldr	r3, [r7, #4]
900065f6:	2200      	movs	r2, #0
900065f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
900065fc:	687b      	ldr	r3, [r7, #4]
900065fe:	2200      	movs	r2, #0
90006600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
90006604:	2300      	movs	r3, #0
}
90006606:	4618      	mov	r0, r3
90006608:	3708      	adds	r7, #8
9000660a:	46bd      	mov	sp, r7
9000660c:	bd80      	pop	{r7, pc}

9000660e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
9000660e:	b480      	push	{r7}
90006610:	b083      	sub	sp, #12
90006612:	af00      	add	r7, sp, #0
90006614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90006616:	bf00      	nop
90006618:	370c      	adds	r7, #12
9000661a:	46bd      	mov	sp, r7
9000661c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006620:	4770      	bx	lr

90006622 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
90006622:	b480      	push	{r7}
90006624:	b083      	sub	sp, #12
90006626:	af00      	add	r7, sp, #0
90006628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
9000662a:	bf00      	nop
9000662c:	370c      	adds	r7, #12
9000662e:	46bd      	mov	sp, r7
90006630:	f85d 7b04 	ldr.w	r7, [sp], #4
90006634:	4770      	bx	lr
	...

90006638 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90006638:	b580      	push	{r7, lr}
9000663a:	b088      	sub	sp, #32
9000663c:	af02      	add	r7, sp, #8
9000663e:	60f8      	str	r0, [r7, #12]
90006640:	4608      	mov	r0, r1
90006642:	4611      	mov	r1, r2
90006644:	461a      	mov	r2, r3
90006646:	4603      	mov	r3, r0
90006648:	817b      	strh	r3, [r7, #10]
9000664a:	460b      	mov	r3, r1
9000664c:	813b      	strh	r3, [r7, #8]
9000664e:	4613      	mov	r3, r2
90006650:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006652:	68fb      	ldr	r3, [r7, #12]
90006654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006658:	b2db      	uxtb	r3, r3
9000665a:	2b20      	cmp	r3, #32
9000665c:	f040 80f9 	bne.w	90006852 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
90006660:	6a3b      	ldr	r3, [r7, #32]
90006662:	2b00      	cmp	r3, #0
90006664:	d002      	beq.n	9000666c <HAL_I2C_Mem_Write+0x34>
90006666:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90006668:	2b00      	cmp	r3, #0
9000666a:	d105      	bne.n	90006678 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000666c:	68fb      	ldr	r3, [r7, #12]
9000666e:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006672:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90006674:	2301      	movs	r3, #1
90006676:	e0ed      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90006678:	68fb      	ldr	r3, [r7, #12]
9000667a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000667e:	2b01      	cmp	r3, #1
90006680:	d101      	bne.n	90006686 <HAL_I2C_Mem_Write+0x4e>
90006682:	2302      	movs	r3, #2
90006684:	e0e6      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
90006686:	68fb      	ldr	r3, [r7, #12]
90006688:	2201      	movs	r2, #1
9000668a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
9000668e:	f7fd f9b7 	bl	90003a00 <HAL_GetTick>
90006692:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90006694:	697b      	ldr	r3, [r7, #20]
90006696:	9300      	str	r3, [sp, #0]
90006698:	2319      	movs	r3, #25
9000669a:	2201      	movs	r2, #1
9000669c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
900066a0:	68f8      	ldr	r0, [r7, #12]
900066a2:	f000 fadd 	bl	90006c60 <I2C_WaitOnFlagUntilTimeout>
900066a6:	4603      	mov	r3, r0
900066a8:	2b00      	cmp	r3, #0
900066aa:	d001      	beq.n	900066b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
900066ac:	2301      	movs	r3, #1
900066ae:	e0d1      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900066b0:	68fb      	ldr	r3, [r7, #12]
900066b2:	2221      	movs	r2, #33	@ 0x21
900066b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900066b8:	68fb      	ldr	r3, [r7, #12]
900066ba:	2240      	movs	r2, #64	@ 0x40
900066bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900066c0:	68fb      	ldr	r3, [r7, #12]
900066c2:	2200      	movs	r2, #0
900066c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
900066c6:	68fb      	ldr	r3, [r7, #12]
900066c8:	6a3a      	ldr	r2, [r7, #32]
900066ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
900066cc:	68fb      	ldr	r3, [r7, #12]
900066ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
900066d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
900066d2:	68fb      	ldr	r3, [r7, #12]
900066d4:	2200      	movs	r2, #0
900066d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900066d8:	88f8      	ldrh	r0, [r7, #6]
900066da:	893a      	ldrh	r2, [r7, #8]
900066dc:	8979      	ldrh	r1, [r7, #10]
900066de:	697b      	ldr	r3, [r7, #20]
900066e0:	9301      	str	r3, [sp, #4]
900066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900066e4:	9300      	str	r3, [sp, #0]
900066e6:	4603      	mov	r3, r0
900066e8:	68f8      	ldr	r0, [r7, #12]
900066ea:	f000 f9ed 	bl	90006ac8 <I2C_RequestMemoryWrite>
900066ee:	4603      	mov	r3, r0
900066f0:	2b00      	cmp	r3, #0
900066f2:	d005      	beq.n	90006700 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
900066f4:	68fb      	ldr	r3, [r7, #12]
900066f6:	2200      	movs	r2, #0
900066f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
900066fc:	2301      	movs	r3, #1
900066fe:	e0a9      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90006700:	68fb      	ldr	r3, [r7, #12]
90006702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006704:	b29b      	uxth	r3, r3
90006706:	2bff      	cmp	r3, #255	@ 0xff
90006708:	d90e      	bls.n	90006728 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000670a:	68fb      	ldr	r3, [r7, #12]
9000670c:	22ff      	movs	r2, #255	@ 0xff
9000670e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90006710:	68fb      	ldr	r3, [r7, #12]
90006712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006714:	b2da      	uxtb	r2, r3
90006716:	8979      	ldrh	r1, [r7, #10]
90006718:	2300      	movs	r3, #0
9000671a:	9300      	str	r3, [sp, #0]
9000671c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006720:	68f8      	ldr	r0, [r7, #12]
90006722:	f000 fc61 	bl	90006fe8 <I2C_TransferConfig>
90006726:	e00f      	b.n	90006748 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90006728:	68fb      	ldr	r3, [r7, #12]
9000672a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000672c:	b29a      	uxth	r2, r3
9000672e:	68fb      	ldr	r3, [r7, #12]
90006730:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90006732:	68fb      	ldr	r3, [r7, #12]
90006734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006736:	b2da      	uxtb	r2, r3
90006738:	8979      	ldrh	r1, [r7, #10]
9000673a:	2300      	movs	r3, #0
9000673c:	9300      	str	r3, [sp, #0]
9000673e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90006742:	68f8      	ldr	r0, [r7, #12]
90006744:	f000 fc50 	bl	90006fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90006748:	697a      	ldr	r2, [r7, #20]
9000674a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000674c:	68f8      	ldr	r0, [r7, #12]
9000674e:	f000 fae0 	bl	90006d12 <I2C_WaitOnTXISFlagUntilTimeout>
90006752:	4603      	mov	r3, r0
90006754:	2b00      	cmp	r3, #0
90006756:	d001      	beq.n	9000675c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
90006758:	2301      	movs	r3, #1
9000675a:	e07b      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000675c:	68fb      	ldr	r3, [r7, #12]
9000675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006760:	781a      	ldrb	r2, [r3, #0]
90006762:	68fb      	ldr	r3, [r7, #12]
90006764:	681b      	ldr	r3, [r3, #0]
90006766:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90006768:	68fb      	ldr	r3, [r7, #12]
9000676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000676c:	1c5a      	adds	r2, r3, #1
9000676e:	68fb      	ldr	r3, [r7, #12]
90006770:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
90006772:	68fb      	ldr	r3, [r7, #12]
90006774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006776:	b29b      	uxth	r3, r3
90006778:	3b01      	subs	r3, #1
9000677a:	b29a      	uxth	r2, r3
9000677c:	68fb      	ldr	r3, [r7, #12]
9000677e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
90006780:	68fb      	ldr	r3, [r7, #12]
90006782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006784:	3b01      	subs	r3, #1
90006786:	b29a      	uxth	r2, r3
90006788:	68fb      	ldr	r3, [r7, #12]
9000678a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000678c:	68fb      	ldr	r3, [r7, #12]
9000678e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006790:	b29b      	uxth	r3, r3
90006792:	2b00      	cmp	r3, #0
90006794:	d034      	beq.n	90006800 <HAL_I2C_Mem_Write+0x1c8>
90006796:	68fb      	ldr	r3, [r7, #12]
90006798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000679a:	2b00      	cmp	r3, #0
9000679c:	d130      	bne.n	90006800 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000679e:	697b      	ldr	r3, [r7, #20]
900067a0:	9300      	str	r3, [sp, #0]
900067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900067a4:	2200      	movs	r2, #0
900067a6:	2180      	movs	r1, #128	@ 0x80
900067a8:	68f8      	ldr	r0, [r7, #12]
900067aa:	f000 fa59 	bl	90006c60 <I2C_WaitOnFlagUntilTimeout>
900067ae:	4603      	mov	r3, r0
900067b0:	2b00      	cmp	r3, #0
900067b2:	d001      	beq.n	900067b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
900067b4:	2301      	movs	r3, #1
900067b6:	e04d      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900067b8:	68fb      	ldr	r3, [r7, #12]
900067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900067bc:	b29b      	uxth	r3, r3
900067be:	2bff      	cmp	r3, #255	@ 0xff
900067c0:	d90e      	bls.n	900067e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
900067c2:	68fb      	ldr	r3, [r7, #12]
900067c4:	22ff      	movs	r2, #255	@ 0xff
900067c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
900067c8:	68fb      	ldr	r3, [r7, #12]
900067ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900067cc:	b2da      	uxtb	r2, r3
900067ce:	8979      	ldrh	r1, [r7, #10]
900067d0:	2300      	movs	r3, #0
900067d2:	9300      	str	r3, [sp, #0]
900067d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
900067d8:	68f8      	ldr	r0, [r7, #12]
900067da:	f000 fc05 	bl	90006fe8 <I2C_TransferConfig>
900067de:	e00f      	b.n	90006800 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
900067e0:	68fb      	ldr	r3, [r7, #12]
900067e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900067e4:	b29a      	uxth	r2, r3
900067e6:	68fb      	ldr	r3, [r7, #12]
900067e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900067ea:	68fb      	ldr	r3, [r7, #12]
900067ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900067ee:	b2da      	uxtb	r2, r3
900067f0:	8979      	ldrh	r1, [r7, #10]
900067f2:	2300      	movs	r3, #0
900067f4:	9300      	str	r3, [sp, #0]
900067f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900067fa:	68f8      	ldr	r0, [r7, #12]
900067fc:	f000 fbf4 	bl	90006fe8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
90006800:	68fb      	ldr	r3, [r7, #12]
90006802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006804:	b29b      	uxth	r3, r3
90006806:	2b00      	cmp	r3, #0
90006808:	d19e      	bne.n	90006748 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000680a:	697a      	ldr	r2, [r7, #20]
9000680c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000680e:	68f8      	ldr	r0, [r7, #12]
90006810:	f000 fac6 	bl	90006da0 <I2C_WaitOnSTOPFlagUntilTimeout>
90006814:	4603      	mov	r3, r0
90006816:	2b00      	cmp	r3, #0
90006818:	d001      	beq.n	9000681e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
9000681a:	2301      	movs	r3, #1
9000681c:	e01a      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000681e:	68fb      	ldr	r3, [r7, #12]
90006820:	681b      	ldr	r3, [r3, #0]
90006822:	2220      	movs	r2, #32
90006824:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006826:	68fb      	ldr	r3, [r7, #12]
90006828:	681b      	ldr	r3, [r3, #0]
9000682a:	6859      	ldr	r1, [r3, #4]
9000682c:	68fb      	ldr	r3, [r7, #12]
9000682e:	681a      	ldr	r2, [r3, #0]
90006830:	4b0a      	ldr	r3, [pc, #40]	@ (9000685c <HAL_I2C_Mem_Write+0x224>)
90006832:	400b      	ands	r3, r1
90006834:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90006836:	68fb      	ldr	r3, [r7, #12]
90006838:	2220      	movs	r2, #32
9000683a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000683e:	68fb      	ldr	r3, [r7, #12]
90006840:	2200      	movs	r2, #0
90006842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006846:	68fb      	ldr	r3, [r7, #12]
90006848:	2200      	movs	r2, #0
9000684a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
9000684e:	2300      	movs	r3, #0
90006850:	e000      	b.n	90006854 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
90006852:	2302      	movs	r3, #2
  }
}
90006854:	4618      	mov	r0, r3
90006856:	3718      	adds	r7, #24
90006858:	46bd      	mov	sp, r7
9000685a:	bd80      	pop	{r7, pc}
9000685c:	fe00e800 	.word	0xfe00e800

90006860 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90006860:	b580      	push	{r7, lr}
90006862:	b088      	sub	sp, #32
90006864:	af02      	add	r7, sp, #8
90006866:	60f8      	str	r0, [r7, #12]
90006868:	4608      	mov	r0, r1
9000686a:	4611      	mov	r1, r2
9000686c:	461a      	mov	r2, r3
9000686e:	4603      	mov	r3, r0
90006870:	817b      	strh	r3, [r7, #10]
90006872:	460b      	mov	r3, r1
90006874:	813b      	strh	r3, [r7, #8]
90006876:	4613      	mov	r3, r2
90006878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000687a:	68fb      	ldr	r3, [r7, #12]
9000687c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006880:	b2db      	uxtb	r3, r3
90006882:	2b20      	cmp	r3, #32
90006884:	f040 80fd 	bne.w	90006a82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90006888:	6a3b      	ldr	r3, [r7, #32]
9000688a:	2b00      	cmp	r3, #0
9000688c:	d002      	beq.n	90006894 <HAL_I2C_Mem_Read+0x34>
9000688e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90006890:	2b00      	cmp	r3, #0
90006892:	d105      	bne.n	900068a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90006894:	68fb      	ldr	r3, [r7, #12]
90006896:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000689a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
9000689c:	2301      	movs	r3, #1
9000689e:	e0f1      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
900068a0:	68fb      	ldr	r3, [r7, #12]
900068a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900068a6:	2b01      	cmp	r3, #1
900068a8:	d101      	bne.n	900068ae <HAL_I2C_Mem_Read+0x4e>
900068aa:	2302      	movs	r3, #2
900068ac:	e0ea      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
900068ae:	68fb      	ldr	r3, [r7, #12]
900068b0:	2201      	movs	r2, #1
900068b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
900068b6:	f7fd f8a3 	bl	90003a00 <HAL_GetTick>
900068ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900068bc:	697b      	ldr	r3, [r7, #20]
900068be:	9300      	str	r3, [sp, #0]
900068c0:	2319      	movs	r3, #25
900068c2:	2201      	movs	r2, #1
900068c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
900068c8:	68f8      	ldr	r0, [r7, #12]
900068ca:	f000 f9c9 	bl	90006c60 <I2C_WaitOnFlagUntilTimeout>
900068ce:	4603      	mov	r3, r0
900068d0:	2b00      	cmp	r3, #0
900068d2:	d001      	beq.n	900068d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
900068d4:	2301      	movs	r3, #1
900068d6:	e0d5      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
900068d8:	68fb      	ldr	r3, [r7, #12]
900068da:	2222      	movs	r2, #34	@ 0x22
900068dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900068e0:	68fb      	ldr	r3, [r7, #12]
900068e2:	2240      	movs	r2, #64	@ 0x40
900068e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900068e8:	68fb      	ldr	r3, [r7, #12]
900068ea:	2200      	movs	r2, #0
900068ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
900068ee:	68fb      	ldr	r3, [r7, #12]
900068f0:	6a3a      	ldr	r2, [r7, #32]
900068f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
900068f4:	68fb      	ldr	r3, [r7, #12]
900068f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
900068f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
900068fa:	68fb      	ldr	r3, [r7, #12]
900068fc:	2200      	movs	r2, #0
900068fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90006900:	88f8      	ldrh	r0, [r7, #6]
90006902:	893a      	ldrh	r2, [r7, #8]
90006904:	8979      	ldrh	r1, [r7, #10]
90006906:	697b      	ldr	r3, [r7, #20]
90006908:	9301      	str	r3, [sp, #4]
9000690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000690c:	9300      	str	r3, [sp, #0]
9000690e:	4603      	mov	r3, r0
90006910:	68f8      	ldr	r0, [r7, #12]
90006912:	f000 f92d 	bl	90006b70 <I2C_RequestMemoryRead>
90006916:	4603      	mov	r3, r0
90006918:	2b00      	cmp	r3, #0
9000691a:	d005      	beq.n	90006928 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
9000691c:	68fb      	ldr	r3, [r7, #12]
9000691e:	2200      	movs	r2, #0
90006920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90006924:	2301      	movs	r3, #1
90006926:	e0ad      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90006928:	68fb      	ldr	r3, [r7, #12]
9000692a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000692c:	b29b      	uxth	r3, r3
9000692e:	2bff      	cmp	r3, #255	@ 0xff
90006930:	d90e      	bls.n	90006950 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90006932:	68fb      	ldr	r3, [r7, #12]
90006934:	22ff      	movs	r2, #255	@ 0xff
90006936:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90006938:	68fb      	ldr	r3, [r7, #12]
9000693a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000693c:	b2da      	uxtb	r2, r3
9000693e:	8979      	ldrh	r1, [r7, #10]
90006940:	4b52      	ldr	r3, [pc, #328]	@ (90006a8c <HAL_I2C_Mem_Read+0x22c>)
90006942:	9300      	str	r3, [sp, #0]
90006944:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006948:	68f8      	ldr	r0, [r7, #12]
9000694a:	f000 fb4d 	bl	90006fe8 <I2C_TransferConfig>
9000694e:	e00f      	b.n	90006970 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90006950:	68fb      	ldr	r3, [r7, #12]
90006952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006954:	b29a      	uxth	r2, r3
90006956:	68fb      	ldr	r3, [r7, #12]
90006958:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
9000695a:	68fb      	ldr	r3, [r7, #12]
9000695c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000695e:	b2da      	uxtb	r2, r3
90006960:	8979      	ldrh	r1, [r7, #10]
90006962:	4b4a      	ldr	r3, [pc, #296]	@ (90006a8c <HAL_I2C_Mem_Read+0x22c>)
90006964:	9300      	str	r3, [sp, #0]
90006966:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
9000696a:	68f8      	ldr	r0, [r7, #12]
9000696c:	f000 fb3c 	bl	90006fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90006970:	697b      	ldr	r3, [r7, #20]
90006972:	9300      	str	r3, [sp, #0]
90006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006976:	2200      	movs	r2, #0
90006978:	2104      	movs	r1, #4
9000697a:	68f8      	ldr	r0, [r7, #12]
9000697c:	f000 f970 	bl	90006c60 <I2C_WaitOnFlagUntilTimeout>
90006980:	4603      	mov	r3, r0
90006982:	2b00      	cmp	r3, #0
90006984:	d001      	beq.n	9000698a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90006986:	2301      	movs	r3, #1
90006988:	e07c      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000698a:	68fb      	ldr	r3, [r7, #12]
9000698c:	681b      	ldr	r3, [r3, #0]
9000698e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90006990:	68fb      	ldr	r3, [r7, #12]
90006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006994:	b2d2      	uxtb	r2, r2
90006996:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90006998:	68fb      	ldr	r3, [r7, #12]
9000699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000699c:	1c5a      	adds	r2, r3, #1
9000699e:	68fb      	ldr	r3, [r7, #12]
900069a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
900069a2:	68fb      	ldr	r3, [r7, #12]
900069a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900069a6:	3b01      	subs	r3, #1
900069a8:	b29a      	uxth	r2, r3
900069aa:	68fb      	ldr	r3, [r7, #12]
900069ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
900069ae:	68fb      	ldr	r3, [r7, #12]
900069b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900069b2:	b29b      	uxth	r3, r3
900069b4:	3b01      	subs	r3, #1
900069b6:	b29a      	uxth	r2, r3
900069b8:	68fb      	ldr	r3, [r7, #12]
900069ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900069bc:	68fb      	ldr	r3, [r7, #12]
900069be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900069c0:	b29b      	uxth	r3, r3
900069c2:	2b00      	cmp	r3, #0
900069c4:	d034      	beq.n	90006a30 <HAL_I2C_Mem_Read+0x1d0>
900069c6:	68fb      	ldr	r3, [r7, #12]
900069c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900069ca:	2b00      	cmp	r3, #0
900069cc:	d130      	bne.n	90006a30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
900069ce:	697b      	ldr	r3, [r7, #20]
900069d0:	9300      	str	r3, [sp, #0]
900069d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900069d4:	2200      	movs	r2, #0
900069d6:	2180      	movs	r1, #128	@ 0x80
900069d8:	68f8      	ldr	r0, [r7, #12]
900069da:	f000 f941 	bl	90006c60 <I2C_WaitOnFlagUntilTimeout>
900069de:	4603      	mov	r3, r0
900069e0:	2b00      	cmp	r3, #0
900069e2:	d001      	beq.n	900069e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
900069e4:	2301      	movs	r3, #1
900069e6:	e04d      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900069e8:	68fb      	ldr	r3, [r7, #12]
900069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900069ec:	b29b      	uxth	r3, r3
900069ee:	2bff      	cmp	r3, #255	@ 0xff
900069f0:	d90e      	bls.n	90006a10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
900069f2:	68fb      	ldr	r3, [r7, #12]
900069f4:	22ff      	movs	r2, #255	@ 0xff
900069f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
900069f8:	68fb      	ldr	r3, [r7, #12]
900069fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900069fc:	b2da      	uxtb	r2, r3
900069fe:	8979      	ldrh	r1, [r7, #10]
90006a00:	2300      	movs	r3, #0
90006a02:	9300      	str	r3, [sp, #0]
90006a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006a08:	68f8      	ldr	r0, [r7, #12]
90006a0a:	f000 faed 	bl	90006fe8 <I2C_TransferConfig>
90006a0e:	e00f      	b.n	90006a30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90006a10:	68fb      	ldr	r3, [r7, #12]
90006a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006a14:	b29a      	uxth	r2, r3
90006a16:	68fb      	ldr	r3, [r7, #12]
90006a18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90006a1a:	68fb      	ldr	r3, [r7, #12]
90006a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006a1e:	b2da      	uxtb	r2, r3
90006a20:	8979      	ldrh	r1, [r7, #10]
90006a22:	2300      	movs	r3, #0
90006a24:	9300      	str	r3, [sp, #0]
90006a26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90006a2a:	68f8      	ldr	r0, [r7, #12]
90006a2c:	f000 fadc 	bl	90006fe8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90006a30:	68fb      	ldr	r3, [r7, #12]
90006a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006a34:	b29b      	uxth	r3, r3
90006a36:	2b00      	cmp	r3, #0
90006a38:	d19a      	bne.n	90006970 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90006a3a:	697a      	ldr	r2, [r7, #20]
90006a3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90006a3e:	68f8      	ldr	r0, [r7, #12]
90006a40:	f000 f9ae 	bl	90006da0 <I2C_WaitOnSTOPFlagUntilTimeout>
90006a44:	4603      	mov	r3, r0
90006a46:	2b00      	cmp	r3, #0
90006a48:	d001      	beq.n	90006a4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90006a4a:	2301      	movs	r3, #1
90006a4c:	e01a      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006a4e:	68fb      	ldr	r3, [r7, #12]
90006a50:	681b      	ldr	r3, [r3, #0]
90006a52:	2220      	movs	r2, #32
90006a54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006a56:	68fb      	ldr	r3, [r7, #12]
90006a58:	681b      	ldr	r3, [r3, #0]
90006a5a:	6859      	ldr	r1, [r3, #4]
90006a5c:	68fb      	ldr	r3, [r7, #12]
90006a5e:	681a      	ldr	r2, [r3, #0]
90006a60:	4b0b      	ldr	r3, [pc, #44]	@ (90006a90 <HAL_I2C_Mem_Read+0x230>)
90006a62:	400b      	ands	r3, r1
90006a64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90006a66:	68fb      	ldr	r3, [r7, #12]
90006a68:	2220      	movs	r2, #32
90006a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90006a6e:	68fb      	ldr	r3, [r7, #12]
90006a70:	2200      	movs	r2, #0
90006a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006a76:	68fb      	ldr	r3, [r7, #12]
90006a78:	2200      	movs	r2, #0
90006a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006a7e:	2300      	movs	r3, #0
90006a80:	e000      	b.n	90006a84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90006a82:	2302      	movs	r3, #2
  }
}
90006a84:	4618      	mov	r0, r3
90006a86:	3718      	adds	r7, #24
90006a88:	46bd      	mov	sp, r7
90006a8a:	bd80      	pop	{r7, pc}
90006a8c:	80002400 	.word	0x80002400
90006a90:	fe00e800 	.word	0xfe00e800

90006a94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90006a94:	b480      	push	{r7}
90006a96:	b083      	sub	sp, #12
90006a98:	af00      	add	r7, sp, #0
90006a9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90006a9c:	687b      	ldr	r3, [r7, #4]
90006a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006aa2:	b2db      	uxtb	r3, r3
}
90006aa4:	4618      	mov	r0, r3
90006aa6:	370c      	adds	r7, #12
90006aa8:	46bd      	mov	sp, r7
90006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
90006aae:	4770      	bx	lr

90006ab0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90006ab0:	b480      	push	{r7}
90006ab2:	b083      	sub	sp, #12
90006ab4:	af00      	add	r7, sp, #0
90006ab6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90006ab8:	687b      	ldr	r3, [r7, #4]
90006aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90006abc:	4618      	mov	r0, r3
90006abe:	370c      	adds	r7, #12
90006ac0:	46bd      	mov	sp, r7
90006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
90006ac6:	4770      	bx	lr

90006ac8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
90006ac8:	b580      	push	{r7, lr}
90006aca:	b086      	sub	sp, #24
90006acc:	af02      	add	r7, sp, #8
90006ace:	60f8      	str	r0, [r7, #12]
90006ad0:	4608      	mov	r0, r1
90006ad2:	4611      	mov	r1, r2
90006ad4:	461a      	mov	r2, r3
90006ad6:	4603      	mov	r3, r0
90006ad8:	817b      	strh	r3, [r7, #10]
90006ada:	460b      	mov	r3, r1
90006adc:	813b      	strh	r3, [r7, #8]
90006ade:	4613      	mov	r3, r2
90006ae0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90006ae2:	88fb      	ldrh	r3, [r7, #6]
90006ae4:	b2da      	uxtb	r2, r3
90006ae6:	8979      	ldrh	r1, [r7, #10]
90006ae8:	4b20      	ldr	r3, [pc, #128]	@ (90006b6c <I2C_RequestMemoryWrite+0xa4>)
90006aea:	9300      	str	r3, [sp, #0]
90006aec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006af0:	68f8      	ldr	r0, [r7, #12]
90006af2:	f000 fa79 	bl	90006fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006af6:	69fa      	ldr	r2, [r7, #28]
90006af8:	69b9      	ldr	r1, [r7, #24]
90006afa:	68f8      	ldr	r0, [r7, #12]
90006afc:	f000 f909 	bl	90006d12 <I2C_WaitOnTXISFlagUntilTimeout>
90006b00:	4603      	mov	r3, r0
90006b02:	2b00      	cmp	r3, #0
90006b04:	d001      	beq.n	90006b0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
90006b06:	2301      	movs	r3, #1
90006b08:	e02c      	b.n	90006b64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90006b0a:	88fb      	ldrh	r3, [r7, #6]
90006b0c:	2b01      	cmp	r3, #1
90006b0e:	d105      	bne.n	90006b1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90006b10:	893b      	ldrh	r3, [r7, #8]
90006b12:	b2da      	uxtb	r2, r3
90006b14:	68fb      	ldr	r3, [r7, #12]
90006b16:	681b      	ldr	r3, [r3, #0]
90006b18:	629a      	str	r2, [r3, #40]	@ 0x28
90006b1a:	e015      	b.n	90006b48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90006b1c:	893b      	ldrh	r3, [r7, #8]
90006b1e:	0a1b      	lsrs	r3, r3, #8
90006b20:	b29b      	uxth	r3, r3
90006b22:	b2da      	uxtb	r2, r3
90006b24:	68fb      	ldr	r3, [r7, #12]
90006b26:	681b      	ldr	r3, [r3, #0]
90006b28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006b2a:	69fa      	ldr	r2, [r7, #28]
90006b2c:	69b9      	ldr	r1, [r7, #24]
90006b2e:	68f8      	ldr	r0, [r7, #12]
90006b30:	f000 f8ef 	bl	90006d12 <I2C_WaitOnTXISFlagUntilTimeout>
90006b34:	4603      	mov	r3, r0
90006b36:	2b00      	cmp	r3, #0
90006b38:	d001      	beq.n	90006b3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
90006b3a:	2301      	movs	r3, #1
90006b3c:	e012      	b.n	90006b64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90006b3e:	893b      	ldrh	r3, [r7, #8]
90006b40:	b2da      	uxtb	r2, r3
90006b42:	68fb      	ldr	r3, [r7, #12]
90006b44:	681b      	ldr	r3, [r3, #0]
90006b46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90006b48:	69fb      	ldr	r3, [r7, #28]
90006b4a:	9300      	str	r3, [sp, #0]
90006b4c:	69bb      	ldr	r3, [r7, #24]
90006b4e:	2200      	movs	r2, #0
90006b50:	2180      	movs	r1, #128	@ 0x80
90006b52:	68f8      	ldr	r0, [r7, #12]
90006b54:	f000 f884 	bl	90006c60 <I2C_WaitOnFlagUntilTimeout>
90006b58:	4603      	mov	r3, r0
90006b5a:	2b00      	cmp	r3, #0
90006b5c:	d001      	beq.n	90006b62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
90006b5e:	2301      	movs	r3, #1
90006b60:	e000      	b.n	90006b64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
90006b62:	2300      	movs	r3, #0
}
90006b64:	4618      	mov	r0, r3
90006b66:	3710      	adds	r7, #16
90006b68:	46bd      	mov	sp, r7
90006b6a:	bd80      	pop	{r7, pc}
90006b6c:	80002000 	.word	0x80002000

90006b70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90006b70:	b580      	push	{r7, lr}
90006b72:	b086      	sub	sp, #24
90006b74:	af02      	add	r7, sp, #8
90006b76:	60f8      	str	r0, [r7, #12]
90006b78:	4608      	mov	r0, r1
90006b7a:	4611      	mov	r1, r2
90006b7c:	461a      	mov	r2, r3
90006b7e:	4603      	mov	r3, r0
90006b80:	817b      	strh	r3, [r7, #10]
90006b82:	460b      	mov	r3, r1
90006b84:	813b      	strh	r3, [r7, #8]
90006b86:	4613      	mov	r3, r2
90006b88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90006b8a:	88fb      	ldrh	r3, [r7, #6]
90006b8c:	b2da      	uxtb	r2, r3
90006b8e:	8979      	ldrh	r1, [r7, #10]
90006b90:	4b20      	ldr	r3, [pc, #128]	@ (90006c14 <I2C_RequestMemoryRead+0xa4>)
90006b92:	9300      	str	r3, [sp, #0]
90006b94:	2300      	movs	r3, #0
90006b96:	68f8      	ldr	r0, [r7, #12]
90006b98:	f000 fa26 	bl	90006fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006b9c:	69fa      	ldr	r2, [r7, #28]
90006b9e:	69b9      	ldr	r1, [r7, #24]
90006ba0:	68f8      	ldr	r0, [r7, #12]
90006ba2:	f000 f8b6 	bl	90006d12 <I2C_WaitOnTXISFlagUntilTimeout>
90006ba6:	4603      	mov	r3, r0
90006ba8:	2b00      	cmp	r3, #0
90006baa:	d001      	beq.n	90006bb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90006bac:	2301      	movs	r3, #1
90006bae:	e02c      	b.n	90006c0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90006bb0:	88fb      	ldrh	r3, [r7, #6]
90006bb2:	2b01      	cmp	r3, #1
90006bb4:	d105      	bne.n	90006bc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90006bb6:	893b      	ldrh	r3, [r7, #8]
90006bb8:	b2da      	uxtb	r2, r3
90006bba:	68fb      	ldr	r3, [r7, #12]
90006bbc:	681b      	ldr	r3, [r3, #0]
90006bbe:	629a      	str	r2, [r3, #40]	@ 0x28
90006bc0:	e015      	b.n	90006bee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90006bc2:	893b      	ldrh	r3, [r7, #8]
90006bc4:	0a1b      	lsrs	r3, r3, #8
90006bc6:	b29b      	uxth	r3, r3
90006bc8:	b2da      	uxtb	r2, r3
90006bca:	68fb      	ldr	r3, [r7, #12]
90006bcc:	681b      	ldr	r3, [r3, #0]
90006bce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006bd0:	69fa      	ldr	r2, [r7, #28]
90006bd2:	69b9      	ldr	r1, [r7, #24]
90006bd4:	68f8      	ldr	r0, [r7, #12]
90006bd6:	f000 f89c 	bl	90006d12 <I2C_WaitOnTXISFlagUntilTimeout>
90006bda:	4603      	mov	r3, r0
90006bdc:	2b00      	cmp	r3, #0
90006bde:	d001      	beq.n	90006be4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90006be0:	2301      	movs	r3, #1
90006be2:	e012      	b.n	90006c0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90006be4:	893b      	ldrh	r3, [r7, #8]
90006be6:	b2da      	uxtb	r2, r3
90006be8:	68fb      	ldr	r3, [r7, #12]
90006bea:	681b      	ldr	r3, [r3, #0]
90006bec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90006bee:	69fb      	ldr	r3, [r7, #28]
90006bf0:	9300      	str	r3, [sp, #0]
90006bf2:	69bb      	ldr	r3, [r7, #24]
90006bf4:	2200      	movs	r2, #0
90006bf6:	2140      	movs	r1, #64	@ 0x40
90006bf8:	68f8      	ldr	r0, [r7, #12]
90006bfa:	f000 f831 	bl	90006c60 <I2C_WaitOnFlagUntilTimeout>
90006bfe:	4603      	mov	r3, r0
90006c00:	2b00      	cmp	r3, #0
90006c02:	d001      	beq.n	90006c08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90006c04:	2301      	movs	r3, #1
90006c06:	e000      	b.n	90006c0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90006c08:	2300      	movs	r3, #0
}
90006c0a:	4618      	mov	r0, r3
90006c0c:	3710      	adds	r7, #16
90006c0e:	46bd      	mov	sp, r7
90006c10:	bd80      	pop	{r7, pc}
90006c12:	bf00      	nop
90006c14:	80002000 	.word	0x80002000

90006c18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90006c18:	b480      	push	{r7}
90006c1a:	b083      	sub	sp, #12
90006c1c:	af00      	add	r7, sp, #0
90006c1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90006c20:	687b      	ldr	r3, [r7, #4]
90006c22:	681b      	ldr	r3, [r3, #0]
90006c24:	699b      	ldr	r3, [r3, #24]
90006c26:	f003 0302 	and.w	r3, r3, #2
90006c2a:	2b02      	cmp	r3, #2
90006c2c:	d103      	bne.n	90006c36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90006c2e:	687b      	ldr	r3, [r7, #4]
90006c30:	681b      	ldr	r3, [r3, #0]
90006c32:	2200      	movs	r2, #0
90006c34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90006c36:	687b      	ldr	r3, [r7, #4]
90006c38:	681b      	ldr	r3, [r3, #0]
90006c3a:	699b      	ldr	r3, [r3, #24]
90006c3c:	f003 0301 	and.w	r3, r3, #1
90006c40:	2b01      	cmp	r3, #1
90006c42:	d007      	beq.n	90006c54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90006c44:	687b      	ldr	r3, [r7, #4]
90006c46:	681b      	ldr	r3, [r3, #0]
90006c48:	699a      	ldr	r2, [r3, #24]
90006c4a:	687b      	ldr	r3, [r7, #4]
90006c4c:	681b      	ldr	r3, [r3, #0]
90006c4e:	f042 0201 	orr.w	r2, r2, #1
90006c52:	619a      	str	r2, [r3, #24]
  }
}
90006c54:	bf00      	nop
90006c56:	370c      	adds	r7, #12
90006c58:	46bd      	mov	sp, r7
90006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006c5e:	4770      	bx	lr

90006c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90006c60:	b580      	push	{r7, lr}
90006c62:	b084      	sub	sp, #16
90006c64:	af00      	add	r7, sp, #0
90006c66:	60f8      	str	r0, [r7, #12]
90006c68:	60b9      	str	r1, [r7, #8]
90006c6a:	603b      	str	r3, [r7, #0]
90006c6c:	4613      	mov	r3, r2
90006c6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006c70:	e03b      	b.n	90006cea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006c72:	69ba      	ldr	r2, [r7, #24]
90006c74:	6839      	ldr	r1, [r7, #0]
90006c76:	68f8      	ldr	r0, [r7, #12]
90006c78:	f000 f8d6 	bl	90006e28 <I2C_IsErrorOccurred>
90006c7c:	4603      	mov	r3, r0
90006c7e:	2b00      	cmp	r3, #0
90006c80:	d001      	beq.n	90006c86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90006c82:	2301      	movs	r3, #1
90006c84:	e041      	b.n	90006d0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006c86:	683b      	ldr	r3, [r7, #0]
90006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
90006c8c:	d02d      	beq.n	90006cea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006c8e:	f7fc feb7 	bl	90003a00 <HAL_GetTick>
90006c92:	4602      	mov	r2, r0
90006c94:	69bb      	ldr	r3, [r7, #24]
90006c96:	1ad3      	subs	r3, r2, r3
90006c98:	683a      	ldr	r2, [r7, #0]
90006c9a:	429a      	cmp	r2, r3
90006c9c:	d302      	bcc.n	90006ca4 <I2C_WaitOnFlagUntilTimeout+0x44>
90006c9e:	683b      	ldr	r3, [r7, #0]
90006ca0:	2b00      	cmp	r3, #0
90006ca2:	d122      	bne.n	90006cea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90006ca4:	68fb      	ldr	r3, [r7, #12]
90006ca6:	681b      	ldr	r3, [r3, #0]
90006ca8:	699a      	ldr	r2, [r3, #24]
90006caa:	68bb      	ldr	r3, [r7, #8]
90006cac:	4013      	ands	r3, r2
90006cae:	68ba      	ldr	r2, [r7, #8]
90006cb0:	429a      	cmp	r2, r3
90006cb2:	bf0c      	ite	eq
90006cb4:	2301      	moveq	r3, #1
90006cb6:	2300      	movne	r3, #0
90006cb8:	b2db      	uxtb	r3, r3
90006cba:	461a      	mov	r2, r3
90006cbc:	79fb      	ldrb	r3, [r7, #7]
90006cbe:	429a      	cmp	r2, r3
90006cc0:	d113      	bne.n	90006cea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006cc2:	68fb      	ldr	r3, [r7, #12]
90006cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006cc6:	f043 0220 	orr.w	r2, r3, #32
90006cca:	68fb      	ldr	r3, [r7, #12]
90006ccc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006cce:	68fb      	ldr	r3, [r7, #12]
90006cd0:	2220      	movs	r2, #32
90006cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006cd6:	68fb      	ldr	r3, [r7, #12]
90006cd8:	2200      	movs	r2, #0
90006cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006cde:	68fb      	ldr	r3, [r7, #12]
90006ce0:	2200      	movs	r2, #0
90006ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90006ce6:	2301      	movs	r3, #1
90006ce8:	e00f      	b.n	90006d0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006cea:	68fb      	ldr	r3, [r7, #12]
90006cec:	681b      	ldr	r3, [r3, #0]
90006cee:	699a      	ldr	r2, [r3, #24]
90006cf0:	68bb      	ldr	r3, [r7, #8]
90006cf2:	4013      	ands	r3, r2
90006cf4:	68ba      	ldr	r2, [r7, #8]
90006cf6:	429a      	cmp	r2, r3
90006cf8:	bf0c      	ite	eq
90006cfa:	2301      	moveq	r3, #1
90006cfc:	2300      	movne	r3, #0
90006cfe:	b2db      	uxtb	r3, r3
90006d00:	461a      	mov	r2, r3
90006d02:	79fb      	ldrb	r3, [r7, #7]
90006d04:	429a      	cmp	r2, r3
90006d06:	d0b4      	beq.n	90006c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90006d08:	2300      	movs	r3, #0
}
90006d0a:	4618      	mov	r0, r3
90006d0c:	3710      	adds	r7, #16
90006d0e:	46bd      	mov	sp, r7
90006d10:	bd80      	pop	{r7, pc}

90006d12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006d12:	b580      	push	{r7, lr}
90006d14:	b084      	sub	sp, #16
90006d16:	af00      	add	r7, sp, #0
90006d18:	60f8      	str	r0, [r7, #12]
90006d1a:	60b9      	str	r1, [r7, #8]
90006d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006d1e:	e033      	b.n	90006d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006d20:	687a      	ldr	r2, [r7, #4]
90006d22:	68b9      	ldr	r1, [r7, #8]
90006d24:	68f8      	ldr	r0, [r7, #12]
90006d26:	f000 f87f 	bl	90006e28 <I2C_IsErrorOccurred>
90006d2a:	4603      	mov	r3, r0
90006d2c:	2b00      	cmp	r3, #0
90006d2e:	d001      	beq.n	90006d34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006d30:	2301      	movs	r3, #1
90006d32:	e031      	b.n	90006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006d34:	68bb      	ldr	r3, [r7, #8]
90006d36:	f1b3 3fff 	cmp.w	r3, #4294967295
90006d3a:	d025      	beq.n	90006d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006d3c:	f7fc fe60 	bl	90003a00 <HAL_GetTick>
90006d40:	4602      	mov	r2, r0
90006d42:	687b      	ldr	r3, [r7, #4]
90006d44:	1ad3      	subs	r3, r2, r3
90006d46:	68ba      	ldr	r2, [r7, #8]
90006d48:	429a      	cmp	r2, r3
90006d4a:	d302      	bcc.n	90006d52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90006d4c:	68bb      	ldr	r3, [r7, #8]
90006d4e:	2b00      	cmp	r3, #0
90006d50:	d11a      	bne.n	90006d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90006d52:	68fb      	ldr	r3, [r7, #12]
90006d54:	681b      	ldr	r3, [r3, #0]
90006d56:	699b      	ldr	r3, [r3, #24]
90006d58:	f003 0302 	and.w	r3, r3, #2
90006d5c:	2b02      	cmp	r3, #2
90006d5e:	d013      	beq.n	90006d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006d60:	68fb      	ldr	r3, [r7, #12]
90006d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006d64:	f043 0220 	orr.w	r2, r3, #32
90006d68:	68fb      	ldr	r3, [r7, #12]
90006d6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006d6c:	68fb      	ldr	r3, [r7, #12]
90006d6e:	2220      	movs	r2, #32
90006d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006d74:	68fb      	ldr	r3, [r7, #12]
90006d76:	2200      	movs	r2, #0
90006d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006d7c:	68fb      	ldr	r3, [r7, #12]
90006d7e:	2200      	movs	r2, #0
90006d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006d84:	2301      	movs	r3, #1
90006d86:	e007      	b.n	90006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006d88:	68fb      	ldr	r3, [r7, #12]
90006d8a:	681b      	ldr	r3, [r3, #0]
90006d8c:	699b      	ldr	r3, [r3, #24]
90006d8e:	f003 0302 	and.w	r3, r3, #2
90006d92:	2b02      	cmp	r3, #2
90006d94:	d1c4      	bne.n	90006d20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90006d96:	2300      	movs	r3, #0
}
90006d98:	4618      	mov	r0, r3
90006d9a:	3710      	adds	r7, #16
90006d9c:	46bd      	mov	sp, r7
90006d9e:	bd80      	pop	{r7, pc}

90006da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006da0:	b580      	push	{r7, lr}
90006da2:	b084      	sub	sp, #16
90006da4:	af00      	add	r7, sp, #0
90006da6:	60f8      	str	r0, [r7, #12]
90006da8:	60b9      	str	r1, [r7, #8]
90006daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006dac:	e02f      	b.n	90006e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006dae:	687a      	ldr	r2, [r7, #4]
90006db0:	68b9      	ldr	r1, [r7, #8]
90006db2:	68f8      	ldr	r0, [r7, #12]
90006db4:	f000 f838 	bl	90006e28 <I2C_IsErrorOccurred>
90006db8:	4603      	mov	r3, r0
90006dba:	2b00      	cmp	r3, #0
90006dbc:	d001      	beq.n	90006dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006dbe:	2301      	movs	r3, #1
90006dc0:	e02d      	b.n	90006e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006dc2:	f7fc fe1d 	bl	90003a00 <HAL_GetTick>
90006dc6:	4602      	mov	r2, r0
90006dc8:	687b      	ldr	r3, [r7, #4]
90006dca:	1ad3      	subs	r3, r2, r3
90006dcc:	68ba      	ldr	r2, [r7, #8]
90006dce:	429a      	cmp	r2, r3
90006dd0:	d302      	bcc.n	90006dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90006dd2:	68bb      	ldr	r3, [r7, #8]
90006dd4:	2b00      	cmp	r3, #0
90006dd6:	d11a      	bne.n	90006e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90006dd8:	68fb      	ldr	r3, [r7, #12]
90006dda:	681b      	ldr	r3, [r3, #0]
90006ddc:	699b      	ldr	r3, [r3, #24]
90006dde:	f003 0320 	and.w	r3, r3, #32
90006de2:	2b20      	cmp	r3, #32
90006de4:	d013      	beq.n	90006e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006de6:	68fb      	ldr	r3, [r7, #12]
90006de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006dea:	f043 0220 	orr.w	r2, r3, #32
90006dee:	68fb      	ldr	r3, [r7, #12]
90006df0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90006df2:	68fb      	ldr	r3, [r7, #12]
90006df4:	2220      	movs	r2, #32
90006df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90006dfa:	68fb      	ldr	r3, [r7, #12]
90006dfc:	2200      	movs	r2, #0
90006dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90006e02:	68fb      	ldr	r3, [r7, #12]
90006e04:	2200      	movs	r2, #0
90006e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90006e0a:	2301      	movs	r3, #1
90006e0c:	e007      	b.n	90006e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006e0e:	68fb      	ldr	r3, [r7, #12]
90006e10:	681b      	ldr	r3, [r3, #0]
90006e12:	699b      	ldr	r3, [r3, #24]
90006e14:	f003 0320 	and.w	r3, r3, #32
90006e18:	2b20      	cmp	r3, #32
90006e1a:	d1c8      	bne.n	90006dae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006e1c:	2300      	movs	r3, #0
}
90006e1e:	4618      	mov	r0, r3
90006e20:	3710      	adds	r7, #16
90006e22:	46bd      	mov	sp, r7
90006e24:	bd80      	pop	{r7, pc}
	...

90006e28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90006e28:	b580      	push	{r7, lr}
90006e2a:	b08a      	sub	sp, #40	@ 0x28
90006e2c:	af00      	add	r7, sp, #0
90006e2e:	60f8      	str	r0, [r7, #12]
90006e30:	60b9      	str	r1, [r7, #8]
90006e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90006e34:	2300      	movs	r3, #0
90006e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90006e3a:	68fb      	ldr	r3, [r7, #12]
90006e3c:	681b      	ldr	r3, [r3, #0]
90006e3e:	699b      	ldr	r3, [r3, #24]
90006e40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90006e42:	2300      	movs	r3, #0
90006e44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
90006e46:	687b      	ldr	r3, [r7, #4]
90006e48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90006e4a:	69bb      	ldr	r3, [r7, #24]
90006e4c:	f003 0310 	and.w	r3, r3, #16
90006e50:	2b00      	cmp	r3, #0
90006e52:	d068      	beq.n	90006f26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90006e54:	68fb      	ldr	r3, [r7, #12]
90006e56:	681b      	ldr	r3, [r3, #0]
90006e58:	2210      	movs	r2, #16
90006e5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006e5c:	e049      	b.n	90006ef2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90006e5e:	68bb      	ldr	r3, [r7, #8]
90006e60:	f1b3 3fff 	cmp.w	r3, #4294967295
90006e64:	d045      	beq.n	90006ef2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90006e66:	f7fc fdcb 	bl	90003a00 <HAL_GetTick>
90006e6a:	4602      	mov	r2, r0
90006e6c:	69fb      	ldr	r3, [r7, #28]
90006e6e:	1ad3      	subs	r3, r2, r3
90006e70:	68ba      	ldr	r2, [r7, #8]
90006e72:	429a      	cmp	r2, r3
90006e74:	d302      	bcc.n	90006e7c <I2C_IsErrorOccurred+0x54>
90006e76:	68bb      	ldr	r3, [r7, #8]
90006e78:	2b00      	cmp	r3, #0
90006e7a:	d13a      	bne.n	90006ef2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006e7c:	68fb      	ldr	r3, [r7, #12]
90006e7e:	681b      	ldr	r3, [r3, #0]
90006e80:	685b      	ldr	r3, [r3, #4]
90006e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
90006e86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90006e88:	68fb      	ldr	r3, [r7, #12]
90006e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006e8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006e90:	68fb      	ldr	r3, [r7, #12]
90006e92:	681b      	ldr	r3, [r3, #0]
90006e94:	699b      	ldr	r3, [r3, #24]
90006e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90006e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006e9e:	d121      	bne.n	90006ee4 <I2C_IsErrorOccurred+0xbc>
90006ea0:	697b      	ldr	r3, [r7, #20]
90006ea2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90006ea6:	d01d      	beq.n	90006ee4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90006ea8:	7cfb      	ldrb	r3, [r7, #19]
90006eaa:	2b20      	cmp	r3, #32
90006eac:	d01a      	beq.n	90006ee4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006eae:	68fb      	ldr	r3, [r7, #12]
90006eb0:	681b      	ldr	r3, [r3, #0]
90006eb2:	685a      	ldr	r2, [r3, #4]
90006eb4:	68fb      	ldr	r3, [r7, #12]
90006eb6:	681b      	ldr	r3, [r3, #0]
90006eb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006ebc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006ebe:	f7fc fd9f 	bl	90003a00 <HAL_GetTick>
90006ec2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006ec4:	e00e      	b.n	90006ee4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90006ec6:	f7fc fd9b 	bl	90003a00 <HAL_GetTick>
90006eca:	4602      	mov	r2, r0
90006ecc:	69fb      	ldr	r3, [r7, #28]
90006ece:	1ad3      	subs	r3, r2, r3
90006ed0:	2b19      	cmp	r3, #25
90006ed2:	d907      	bls.n	90006ee4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90006ed4:	6a3b      	ldr	r3, [r7, #32]
90006ed6:	f043 0320 	orr.w	r3, r3, #32
90006eda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006edc:	2301      	movs	r3, #1
90006ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90006ee2:	e006      	b.n	90006ef2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006ee4:	68fb      	ldr	r3, [r7, #12]
90006ee6:	681b      	ldr	r3, [r3, #0]
90006ee8:	699b      	ldr	r3, [r3, #24]
90006eea:	f003 0320 	and.w	r3, r3, #32
90006eee:	2b20      	cmp	r3, #32
90006ef0:	d1e9      	bne.n	90006ec6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006ef2:	68fb      	ldr	r3, [r7, #12]
90006ef4:	681b      	ldr	r3, [r3, #0]
90006ef6:	699b      	ldr	r3, [r3, #24]
90006ef8:	f003 0320 	and.w	r3, r3, #32
90006efc:	2b20      	cmp	r3, #32
90006efe:	d003      	beq.n	90006f08 <I2C_IsErrorOccurred+0xe0>
90006f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006f04:	2b00      	cmp	r3, #0
90006f06:	d0aa      	beq.n	90006e5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006f0c:	2b00      	cmp	r3, #0
90006f0e:	d103      	bne.n	90006f18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006f10:	68fb      	ldr	r3, [r7, #12]
90006f12:	681b      	ldr	r3, [r3, #0]
90006f14:	2220      	movs	r2, #32
90006f16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006f18:	6a3b      	ldr	r3, [r7, #32]
90006f1a:	f043 0304 	orr.w	r3, r3, #4
90006f1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006f20:	2301      	movs	r3, #1
90006f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90006f26:	68fb      	ldr	r3, [r7, #12]
90006f28:	681b      	ldr	r3, [r3, #0]
90006f2a:	699b      	ldr	r3, [r3, #24]
90006f2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006f2e:	69bb      	ldr	r3, [r7, #24]
90006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f34:	2b00      	cmp	r3, #0
90006f36:	d00b      	beq.n	90006f50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90006f38:	6a3b      	ldr	r3, [r7, #32]
90006f3a:	f043 0301 	orr.w	r3, r3, #1
90006f3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006f40:	68fb      	ldr	r3, [r7, #12]
90006f42:	681b      	ldr	r3, [r3, #0]
90006f44:	f44f 7280 	mov.w	r2, #256	@ 0x100
90006f48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006f4a:	2301      	movs	r3, #1
90006f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006f50:	69bb      	ldr	r3, [r7, #24]
90006f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90006f56:	2b00      	cmp	r3, #0
90006f58:	d00b      	beq.n	90006f72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
90006f5a:	6a3b      	ldr	r3, [r7, #32]
90006f5c:	f043 0308 	orr.w	r3, r3, #8
90006f60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90006f62:	68fb      	ldr	r3, [r7, #12]
90006f64:	681b      	ldr	r3, [r3, #0]
90006f66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
90006f6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006f6c:	2301      	movs	r3, #1
90006f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90006f72:	69bb      	ldr	r3, [r7, #24]
90006f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90006f78:	2b00      	cmp	r3, #0
90006f7a:	d00b      	beq.n	90006f94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006f7c:	6a3b      	ldr	r3, [r7, #32]
90006f7e:	f043 0302 	orr.w	r3, r3, #2
90006f82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006f84:	68fb      	ldr	r3, [r7, #12]
90006f86:	681b      	ldr	r3, [r3, #0]
90006f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006f8e:	2301      	movs	r3, #1
90006f90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006f98:	2b00      	cmp	r3, #0
90006f9a:	d01c      	beq.n	90006fd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006f9c:	68f8      	ldr	r0, [r7, #12]
90006f9e:	f7ff fe3b 	bl	90006c18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006fa2:	68fb      	ldr	r3, [r7, #12]
90006fa4:	681b      	ldr	r3, [r3, #0]
90006fa6:	6859      	ldr	r1, [r3, #4]
90006fa8:	68fb      	ldr	r3, [r7, #12]
90006faa:	681a      	ldr	r2, [r3, #0]
90006fac:	4b0d      	ldr	r3, [pc, #52]	@ (90006fe4 <I2C_IsErrorOccurred+0x1bc>)
90006fae:	400b      	ands	r3, r1
90006fb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006fb2:	68fb      	ldr	r3, [r7, #12]
90006fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90006fb6:	6a3b      	ldr	r3, [r7, #32]
90006fb8:	431a      	orrs	r2, r3
90006fba:	68fb      	ldr	r3, [r7, #12]
90006fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006fbe:	68fb      	ldr	r3, [r7, #12]
90006fc0:	2220      	movs	r2, #32
90006fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90006fc6:	68fb      	ldr	r3, [r7, #12]
90006fc8:	2200      	movs	r2, #0
90006fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006fce:	68fb      	ldr	r3, [r7, #12]
90006fd0:	2200      	movs	r2, #0
90006fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
90006fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
90006fda:	4618      	mov	r0, r3
90006fdc:	3728      	adds	r7, #40	@ 0x28
90006fde:	46bd      	mov	sp, r7
90006fe0:	bd80      	pop	{r7, pc}
90006fe2:	bf00      	nop
90006fe4:	fe00e800 	.word	0xfe00e800

90006fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006fe8:	b480      	push	{r7}
90006fea:	b087      	sub	sp, #28
90006fec:	af00      	add	r7, sp, #0
90006fee:	60f8      	str	r0, [r7, #12]
90006ff0:	607b      	str	r3, [r7, #4]
90006ff2:	460b      	mov	r3, r1
90006ff4:	817b      	strh	r3, [r7, #10]
90006ff6:	4613      	mov	r3, r2
90006ff8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006ffa:	897b      	ldrh	r3, [r7, #10]
90006ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007000:	7a7b      	ldrb	r3, [r7, #9]
90007002:	041b      	lsls	r3, r3, #16
90007004:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007008:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000700a:	687b      	ldr	r3, [r7, #4]
9000700c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000700e:	6a3b      	ldr	r3, [r7, #32]
90007010:	4313      	orrs	r3, r2
90007012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
90007016:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90007018:	68fb      	ldr	r3, [r7, #12]
9000701a:	681b      	ldr	r3, [r3, #0]
9000701c:	685a      	ldr	r2, [r3, #4]
9000701e:	6a3b      	ldr	r3, [r7, #32]
90007020:	0d5b      	lsrs	r3, r3, #21
90007022:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
90007026:	4b08      	ldr	r3, [pc, #32]	@ (90007048 <I2C_TransferConfig+0x60>)
90007028:	430b      	orrs	r3, r1
9000702a:	43db      	mvns	r3, r3
9000702c:	ea02 0103 	and.w	r1, r2, r3
90007030:	68fb      	ldr	r3, [r7, #12]
90007032:	681b      	ldr	r3, [r3, #0]
90007034:	697a      	ldr	r2, [r7, #20]
90007036:	430a      	orrs	r2, r1
90007038:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000703a:	bf00      	nop
9000703c:	371c      	adds	r7, #28
9000703e:	46bd      	mov	sp, r7
90007040:	f85d 7b04 	ldr.w	r7, [sp], #4
90007044:	4770      	bx	lr
90007046:	bf00      	nop
90007048:	03ff63ff 	.word	0x03ff63ff

9000704c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
9000704c:	b480      	push	{r7}
9000704e:	b083      	sub	sp, #12
90007050:	af00      	add	r7, sp, #0
90007052:	6078      	str	r0, [r7, #4]
90007054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007056:	687b      	ldr	r3, [r7, #4]
90007058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
9000705c:	b2db      	uxtb	r3, r3
9000705e:	2b20      	cmp	r3, #32
90007060:	d138      	bne.n	900070d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007062:	687b      	ldr	r3, [r7, #4]
90007064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90007068:	2b01      	cmp	r3, #1
9000706a:	d101      	bne.n	90007070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
9000706c:	2302      	movs	r3, #2
9000706e:	e032      	b.n	900070d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90007070:	687b      	ldr	r3, [r7, #4]
90007072:	2201      	movs	r2, #1
90007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90007078:	687b      	ldr	r3, [r7, #4]
9000707a:	2224      	movs	r2, #36	@ 0x24
9000707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90007080:	687b      	ldr	r3, [r7, #4]
90007082:	681b      	ldr	r3, [r3, #0]
90007084:	681a      	ldr	r2, [r3, #0]
90007086:	687b      	ldr	r3, [r7, #4]
90007088:	681b      	ldr	r3, [r3, #0]
9000708a:	f022 0201 	bic.w	r2, r2, #1
9000708e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90007090:	687b      	ldr	r3, [r7, #4]
90007092:	681b      	ldr	r3, [r3, #0]
90007094:	681a      	ldr	r2, [r3, #0]
90007096:	687b      	ldr	r3, [r7, #4]
90007098:	681b      	ldr	r3, [r3, #0]
9000709a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
9000709e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
900070a0:	687b      	ldr	r3, [r7, #4]
900070a2:	681b      	ldr	r3, [r3, #0]
900070a4:	6819      	ldr	r1, [r3, #0]
900070a6:	687b      	ldr	r3, [r7, #4]
900070a8:	681b      	ldr	r3, [r3, #0]
900070aa:	683a      	ldr	r2, [r7, #0]
900070ac:	430a      	orrs	r2, r1
900070ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900070b0:	687b      	ldr	r3, [r7, #4]
900070b2:	681b      	ldr	r3, [r3, #0]
900070b4:	681a      	ldr	r2, [r3, #0]
900070b6:	687b      	ldr	r3, [r7, #4]
900070b8:	681b      	ldr	r3, [r3, #0]
900070ba:	f042 0201 	orr.w	r2, r2, #1
900070be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900070c0:	687b      	ldr	r3, [r7, #4]
900070c2:	2220      	movs	r2, #32
900070c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900070c8:	687b      	ldr	r3, [r7, #4]
900070ca:	2200      	movs	r2, #0
900070cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900070d0:	2300      	movs	r3, #0
900070d2:	e000      	b.n	900070d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
900070d4:	2302      	movs	r3, #2
  }
}
900070d6:	4618      	mov	r0, r3
900070d8:	370c      	adds	r7, #12
900070da:	46bd      	mov	sp, r7
900070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900070e0:	4770      	bx	lr

900070e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
900070e2:	b480      	push	{r7}
900070e4:	b085      	sub	sp, #20
900070e6:	af00      	add	r7, sp, #0
900070e8:	6078      	str	r0, [r7, #4]
900070ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900070ec:	687b      	ldr	r3, [r7, #4]
900070ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900070f2:	b2db      	uxtb	r3, r3
900070f4:	2b20      	cmp	r3, #32
900070f6:	d139      	bne.n	9000716c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900070f8:	687b      	ldr	r3, [r7, #4]
900070fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900070fe:	2b01      	cmp	r3, #1
90007100:	d101      	bne.n	90007106 <HAL_I2CEx_ConfigDigitalFilter+0x24>
90007102:	2302      	movs	r3, #2
90007104:	e033      	b.n	9000716e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
90007106:	687b      	ldr	r3, [r7, #4]
90007108:	2201      	movs	r2, #1
9000710a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000710e:	687b      	ldr	r3, [r7, #4]
90007110:	2224      	movs	r2, #36	@ 0x24
90007112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90007116:	687b      	ldr	r3, [r7, #4]
90007118:	681b      	ldr	r3, [r3, #0]
9000711a:	681a      	ldr	r2, [r3, #0]
9000711c:	687b      	ldr	r3, [r7, #4]
9000711e:	681b      	ldr	r3, [r3, #0]
90007120:	f022 0201 	bic.w	r2, r2, #1
90007124:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
90007126:	687b      	ldr	r3, [r7, #4]
90007128:	681b      	ldr	r3, [r3, #0]
9000712a:	681b      	ldr	r3, [r3, #0]
9000712c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
9000712e:	68fb      	ldr	r3, [r7, #12]
90007130:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
90007134:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
90007136:	683b      	ldr	r3, [r7, #0]
90007138:	021b      	lsls	r3, r3, #8
9000713a:	68fa      	ldr	r2, [r7, #12]
9000713c:	4313      	orrs	r3, r2
9000713e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90007140:	687b      	ldr	r3, [r7, #4]
90007142:	681b      	ldr	r3, [r3, #0]
90007144:	68fa      	ldr	r2, [r7, #12]
90007146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90007148:	687b      	ldr	r3, [r7, #4]
9000714a:	681b      	ldr	r3, [r3, #0]
9000714c:	681a      	ldr	r2, [r3, #0]
9000714e:	687b      	ldr	r3, [r7, #4]
90007150:	681b      	ldr	r3, [r3, #0]
90007152:	f042 0201 	orr.w	r2, r2, #1
90007156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90007158:	687b      	ldr	r3, [r7, #4]
9000715a:	2220      	movs	r2, #32
9000715c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007160:	687b      	ldr	r3, [r7, #4]
90007162:	2200      	movs	r2, #0
90007164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90007168:	2300      	movs	r3, #0
9000716a:	e000      	b.n	9000716e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
9000716c:	2302      	movs	r3, #2
  }
}
9000716e:	4618      	mov	r0, r3
90007170:	3714      	adds	r7, #20
90007172:	46bd      	mov	sp, r7
90007174:	f85d 7b04 	ldr.w	r7, [sp], #4
90007178:	4770      	bx	lr

9000717a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
9000717a:	b580      	push	{r7, lr}
9000717c:	b084      	sub	sp, #16
9000717e:	af00      	add	r7, sp, #0
90007180:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90007182:	687b      	ldr	r3, [r7, #4]
90007184:	2b00      	cmp	r3, #0
90007186:	d101      	bne.n	9000718c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90007188:	2301      	movs	r3, #1
9000718a:	e08f      	b.n	900072ac <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000718c:	687b      	ldr	r3, [r7, #4]
9000718e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90007192:	b2db      	uxtb	r3, r3
90007194:	2b00      	cmp	r3, #0
90007196:	d106      	bne.n	900071a6 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90007198:	687b      	ldr	r3, [r7, #4]
9000719a:	2200      	movs	r2, #0
9000719c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
900071a0:	6878      	ldr	r0, [r7, #4]
900071a2:	f000 f887 	bl	900072b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900071a6:	687b      	ldr	r3, [r7, #4]
900071a8:	2202      	movs	r2, #2
900071aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
900071ae:	687b      	ldr	r3, [r7, #4]
900071b0:	681b      	ldr	r3, [r3, #0]
900071b2:	699a      	ldr	r2, [r3, #24]
900071b4:	687b      	ldr	r3, [r7, #4]
900071b6:	681b      	ldr	r3, [r3, #0]
900071b8:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
900071bc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900071be:	687b      	ldr	r3, [r7, #4]
900071c0:	681b      	ldr	r3, [r3, #0]
900071c2:	6999      	ldr	r1, [r3, #24]
900071c4:	687b      	ldr	r3, [r7, #4]
900071c6:	685a      	ldr	r2, [r3, #4]
900071c8:	687b      	ldr	r3, [r7, #4]
900071ca:	689b      	ldr	r3, [r3, #8]
900071cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900071ce:	687b      	ldr	r3, [r7, #4]
900071d0:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900071d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900071d4:	687b      	ldr	r3, [r7, #4]
900071d6:	691b      	ldr	r3, [r3, #16]
900071d8:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900071da:	687b      	ldr	r3, [r7, #4]
900071dc:	681b      	ldr	r3, [r3, #0]
900071de:	430a      	orrs	r2, r1
900071e0:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
900071e2:	687b      	ldr	r3, [r7, #4]
900071e4:	695b      	ldr	r3, [r3, #20]
900071e6:	041b      	lsls	r3, r3, #16
900071e8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
900071ea:	687b      	ldr	r3, [r7, #4]
900071ec:	6999      	ldr	r1, [r3, #24]
900071ee:	687b      	ldr	r3, [r7, #4]
900071f0:	681b      	ldr	r3, [r3, #0]
900071f2:	68fa      	ldr	r2, [r7, #12]
900071f4:	430a      	orrs	r2, r1
900071f6:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900071f8:	687b      	ldr	r3, [r7, #4]
900071fa:	69db      	ldr	r3, [r3, #28]
900071fc:	041b      	lsls	r3, r3, #16
900071fe:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90007200:	687b      	ldr	r3, [r7, #4]
90007202:	6a19      	ldr	r1, [r3, #32]
90007204:	687b      	ldr	r3, [r7, #4]
90007206:	681b      	ldr	r3, [r3, #0]
90007208:	68fa      	ldr	r2, [r7, #12]
9000720a:	430a      	orrs	r2, r1
9000720c:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000720e:	687b      	ldr	r3, [r7, #4]
90007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007212:	041b      	lsls	r3, r3, #16
90007214:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
90007216:	687b      	ldr	r3, [r7, #4]
90007218:	6a99      	ldr	r1, [r3, #40]	@ 0x28
9000721a:	687b      	ldr	r3, [r7, #4]
9000721c:	681b      	ldr	r3, [r3, #0]
9000721e:	68fa      	ldr	r2, [r7, #12]
90007220:	430a      	orrs	r2, r1
90007222:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
90007224:	687b      	ldr	r3, [r7, #4]
90007226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007228:	041b      	lsls	r3, r3, #16
9000722a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
9000722c:	687b      	ldr	r3, [r7, #4]
9000722e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90007230:	687b      	ldr	r3, [r7, #4]
90007232:	681b      	ldr	r3, [r3, #0]
90007234:	68fa      	ldr	r2, [r7, #12]
90007236:	430a      	orrs	r2, r1
90007238:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000723a:	687b      	ldr	r3, [r7, #4]
9000723c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90007240:	021b      	lsls	r3, r3, #8
90007242:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90007244:	687b      	ldr	r3, [r7, #4]
90007246:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
9000724a:	041b      	lsls	r3, r3, #16
9000724c:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000724e:	687b      	ldr	r3, [r7, #4]
90007250:	681b      	ldr	r3, [r3, #0]
90007252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
90007254:	687b      	ldr	r3, [r7, #4]
90007256:	681b      	ldr	r3, [r3, #0]
90007258:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
9000725c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000725e:	687b      	ldr	r3, [r7, #4]
90007260:	681b      	ldr	r3, [r3, #0]
90007262:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
90007264:	68ba      	ldr	r2, [r7, #8]
90007266:	68fb      	ldr	r3, [r7, #12]
90007268:	4313      	orrs	r3, r2
9000726a:	687a      	ldr	r2, [r7, #4]
9000726c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90007270:	431a      	orrs	r2, r3
90007272:	687b      	ldr	r3, [r7, #4]
90007274:	681b      	ldr	r3, [r3, #0]
90007276:	430a      	orrs	r2, r1
90007278:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000727a:	687b      	ldr	r3, [r7, #4]
9000727c:	681b      	ldr	r3, [r3, #0]
9000727e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007280:	687b      	ldr	r3, [r7, #4]
90007282:	681b      	ldr	r3, [r3, #0]
90007284:	f042 0206 	orr.w	r2, r2, #6
90007288:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
9000728a:	687b      	ldr	r3, [r7, #4]
9000728c:	681b      	ldr	r3, [r3, #0]
9000728e:	699a      	ldr	r2, [r3, #24]
90007290:	687b      	ldr	r3, [r7, #4]
90007292:	681b      	ldr	r3, [r3, #0]
90007294:	f042 0201 	orr.w	r2, r2, #1
90007298:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000729a:	687b      	ldr	r3, [r7, #4]
9000729c:	2200      	movs	r2, #0
9000729e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
900072a2:	687b      	ldr	r3, [r7, #4]
900072a4:	2201      	movs	r2, #1
900072a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
900072aa:	2300      	movs	r3, #0
}
900072ac:	4618      	mov	r0, r3
900072ae:	3710      	adds	r7, #16
900072b0:	46bd      	mov	sp, r7
900072b2:	bd80      	pop	{r7, pc}

900072b4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900072b4:	b480      	push	{r7}
900072b6:	b083      	sub	sp, #12
900072b8:	af00      	add	r7, sp, #0
900072ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
900072bc:	bf00      	nop
900072be:	370c      	adds	r7, #12
900072c0:	46bd      	mov	sp, r7
900072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900072c6:	4770      	bx	lr

900072c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900072c8:	b5b0      	push	{r4, r5, r7, lr}
900072ca:	b084      	sub	sp, #16
900072cc:	af00      	add	r7, sp, #0
900072ce:	60f8      	str	r0, [r7, #12]
900072d0:	60b9      	str	r1, [r7, #8]
900072d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900072d4:	68fb      	ldr	r3, [r7, #12]
900072d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
900072da:	2b01      	cmp	r3, #1
900072dc:	d101      	bne.n	900072e2 <HAL_LTDC_ConfigLayer+0x1a>
900072de:	2302      	movs	r3, #2
900072e0:	e02c      	b.n	9000733c <HAL_LTDC_ConfigLayer+0x74>
900072e2:	68fb      	ldr	r3, [r7, #12]
900072e4:	2201      	movs	r2, #1
900072e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900072ea:	68fb      	ldr	r3, [r7, #12]
900072ec:	2202      	movs	r2, #2
900072ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900072f2:	68fa      	ldr	r2, [r7, #12]
900072f4:	687b      	ldr	r3, [r7, #4]
900072f6:	2134      	movs	r1, #52	@ 0x34
900072f8:	fb01 f303 	mul.w	r3, r1, r3
900072fc:	4413      	add	r3, r2
900072fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90007302:	68bb      	ldr	r3, [r7, #8]
90007304:	4614      	mov	r4, r2
90007306:	461d      	mov	r5, r3
90007308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000730a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000730c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000730e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90007310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90007312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90007314:	682b      	ldr	r3, [r5, #0]
90007316:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90007318:	687a      	ldr	r2, [r7, #4]
9000731a:	68b9      	ldr	r1, [r7, #8]
9000731c:	68f8      	ldr	r0, [r7, #12]
9000731e:	f000 f811 	bl	90007344 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90007322:	68fb      	ldr	r3, [r7, #12]
90007324:	681b      	ldr	r3, [r3, #0]
90007326:	2201      	movs	r2, #1
90007328:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
9000732a:	68fb      	ldr	r3, [r7, #12]
9000732c:	2201      	movs	r2, #1
9000732e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90007332:	68fb      	ldr	r3, [r7, #12]
90007334:	2200      	movs	r2, #0
90007336:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
9000733a:	2300      	movs	r3, #0
}
9000733c:	4618      	mov	r0, r3
9000733e:	3710      	adds	r7, #16
90007340:	46bd      	mov	sp, r7
90007342:	bdb0      	pop	{r4, r5, r7, pc}

90007344 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90007344:	b480      	push	{r7}
90007346:	b089      	sub	sp, #36	@ 0x24
90007348:	af00      	add	r7, sp, #0
9000734a:	60f8      	str	r0, [r7, #12]
9000734c:	60b9      	str	r1, [r7, #8]
9000734e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90007350:	68bb      	ldr	r3, [r7, #8]
90007352:	685a      	ldr	r2, [r3, #4]
90007354:	68fb      	ldr	r3, [r7, #12]
90007356:	681b      	ldr	r3, [r3, #0]
90007358:	68db      	ldr	r3, [r3, #12]
9000735a:	0c1b      	lsrs	r3, r3, #16
9000735c:	f3c3 030b 	ubfx	r3, r3, #0, #12
90007360:	4413      	add	r3, r2
90007362:	041b      	lsls	r3, r3, #16
90007364:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90007366:	68fb      	ldr	r3, [r7, #12]
90007368:	681b      	ldr	r3, [r3, #0]
9000736a:	461a      	mov	r2, r3
9000736c:	687b      	ldr	r3, [r7, #4]
9000736e:	01db      	lsls	r3, r3, #7
90007370:	4413      	add	r3, r2
90007372:	3384      	adds	r3, #132	@ 0x84
90007374:	685b      	ldr	r3, [r3, #4]
90007376:	68fa      	ldr	r2, [r7, #12]
90007378:	6812      	ldr	r2, [r2, #0]
9000737a:	4611      	mov	r1, r2
9000737c:	687a      	ldr	r2, [r7, #4]
9000737e:	01d2      	lsls	r2, r2, #7
90007380:	440a      	add	r2, r1
90007382:	3284      	adds	r2, #132	@ 0x84
90007384:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90007388:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000738a:	68bb      	ldr	r3, [r7, #8]
9000738c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000738e:	68fb      	ldr	r3, [r7, #12]
90007390:	681b      	ldr	r3, [r3, #0]
90007392:	68db      	ldr	r3, [r3, #12]
90007394:	0c1b      	lsrs	r3, r3, #16
90007396:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000739a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000739c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000739e:	68fb      	ldr	r3, [r7, #12]
900073a0:	681b      	ldr	r3, [r3, #0]
900073a2:	4619      	mov	r1, r3
900073a4:	687b      	ldr	r3, [r7, #4]
900073a6:	01db      	lsls	r3, r3, #7
900073a8:	440b      	add	r3, r1
900073aa:	3384      	adds	r3, #132	@ 0x84
900073ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900073ae:	69fb      	ldr	r3, [r7, #28]
900073b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900073b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900073b4:	68bb      	ldr	r3, [r7, #8]
900073b6:	68da      	ldr	r2, [r3, #12]
900073b8:	68fb      	ldr	r3, [r7, #12]
900073ba:	681b      	ldr	r3, [r3, #0]
900073bc:	68db      	ldr	r3, [r3, #12]
900073be:	f3c3 030a 	ubfx	r3, r3, #0, #11
900073c2:	4413      	add	r3, r2
900073c4:	041b      	lsls	r3, r3, #16
900073c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900073c8:	68fb      	ldr	r3, [r7, #12]
900073ca:	681b      	ldr	r3, [r3, #0]
900073cc:	461a      	mov	r2, r3
900073ce:	687b      	ldr	r3, [r7, #4]
900073d0:	01db      	lsls	r3, r3, #7
900073d2:	4413      	add	r3, r2
900073d4:	3384      	adds	r3, #132	@ 0x84
900073d6:	689b      	ldr	r3, [r3, #8]
900073d8:	68fa      	ldr	r2, [r7, #12]
900073da:	6812      	ldr	r2, [r2, #0]
900073dc:	4611      	mov	r1, r2
900073de:	687a      	ldr	r2, [r7, #4]
900073e0:	01d2      	lsls	r2, r2, #7
900073e2:	440a      	add	r2, r1
900073e4:	3284      	adds	r2, #132	@ 0x84
900073e6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900073ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900073ec:	68bb      	ldr	r3, [r7, #8]
900073ee:	689a      	ldr	r2, [r3, #8]
900073f0:	68fb      	ldr	r3, [r7, #12]
900073f2:	681b      	ldr	r3, [r3, #0]
900073f4:	68db      	ldr	r3, [r3, #12]
900073f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
900073fa:	4413      	add	r3, r2
900073fc:	1c5a      	adds	r2, r3, #1
900073fe:	68fb      	ldr	r3, [r7, #12]
90007400:	681b      	ldr	r3, [r3, #0]
90007402:	4619      	mov	r1, r3
90007404:	687b      	ldr	r3, [r7, #4]
90007406:	01db      	lsls	r3, r3, #7
90007408:	440b      	add	r3, r1
9000740a:	3384      	adds	r3, #132	@ 0x84
9000740c:	4619      	mov	r1, r3
9000740e:	69fb      	ldr	r3, [r7, #28]
90007410:	4313      	orrs	r3, r2
90007412:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90007414:	68fb      	ldr	r3, [r7, #12]
90007416:	681b      	ldr	r3, [r3, #0]
90007418:	461a      	mov	r2, r3
9000741a:	687b      	ldr	r3, [r7, #4]
9000741c:	01db      	lsls	r3, r3, #7
9000741e:	4413      	add	r3, r2
90007420:	3384      	adds	r3, #132	@ 0x84
90007422:	691b      	ldr	r3, [r3, #16]
90007424:	68fa      	ldr	r2, [r7, #12]
90007426:	6812      	ldr	r2, [r2, #0]
90007428:	4611      	mov	r1, r2
9000742a:	687a      	ldr	r2, [r7, #4]
9000742c:	01d2      	lsls	r2, r2, #7
9000742e:	440a      	add	r2, r1
90007430:	3284      	adds	r2, #132	@ 0x84
90007432:	f023 0307 	bic.w	r3, r3, #7
90007436:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90007438:	68fb      	ldr	r3, [r7, #12]
9000743a:	681b      	ldr	r3, [r3, #0]
9000743c:	461a      	mov	r2, r3
9000743e:	687b      	ldr	r3, [r7, #4]
90007440:	01db      	lsls	r3, r3, #7
90007442:	4413      	add	r3, r2
90007444:	3384      	adds	r3, #132	@ 0x84
90007446:	461a      	mov	r2, r3
90007448:	68bb      	ldr	r3, [r7, #8]
9000744a:	691b      	ldr	r3, [r3, #16]
9000744c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000744e:	68bb      	ldr	r3, [r7, #8]
90007450:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
90007454:	021b      	lsls	r3, r3, #8
90007456:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90007458:	68bb      	ldr	r3, [r7, #8]
9000745a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
9000745e:	041b      	lsls	r3, r3, #16
90007460:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90007462:	68bb      	ldr	r3, [r7, #8]
90007464:	699b      	ldr	r3, [r3, #24]
90007466:	061b      	lsls	r3, r3, #24
90007468:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
9000746a:	68bb      	ldr	r3, [r7, #8]
9000746c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90007470:	461a      	mov	r2, r3
90007472:	69fb      	ldr	r3, [r7, #28]
90007474:	431a      	orrs	r2, r3
90007476:	69bb      	ldr	r3, [r7, #24]
90007478:	431a      	orrs	r2, r3
9000747a:	68fb      	ldr	r3, [r7, #12]
9000747c:	681b      	ldr	r3, [r3, #0]
9000747e:	4619      	mov	r1, r3
90007480:	687b      	ldr	r3, [r7, #4]
90007482:	01db      	lsls	r3, r3, #7
90007484:	440b      	add	r3, r1
90007486:	3384      	adds	r3, #132	@ 0x84
90007488:	4619      	mov	r1, r3
9000748a:	697b      	ldr	r3, [r7, #20]
9000748c:	4313      	orrs	r3, r2
9000748e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90007490:	68fb      	ldr	r3, [r7, #12]
90007492:	681b      	ldr	r3, [r3, #0]
90007494:	461a      	mov	r2, r3
90007496:	687b      	ldr	r3, [r7, #4]
90007498:	01db      	lsls	r3, r3, #7
9000749a:	4413      	add	r3, r2
9000749c:	3384      	adds	r3, #132	@ 0x84
9000749e:	695b      	ldr	r3, [r3, #20]
900074a0:	68fa      	ldr	r2, [r7, #12]
900074a2:	6812      	ldr	r2, [r2, #0]
900074a4:	4611      	mov	r1, r2
900074a6:	687a      	ldr	r2, [r7, #4]
900074a8:	01d2      	lsls	r2, r2, #7
900074aa:	440a      	add	r2, r1
900074ac:	3284      	adds	r2, #132	@ 0x84
900074ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
900074b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900074b4:	68fb      	ldr	r3, [r7, #12]
900074b6:	681b      	ldr	r3, [r3, #0]
900074b8:	461a      	mov	r2, r3
900074ba:	687b      	ldr	r3, [r7, #4]
900074bc:	01db      	lsls	r3, r3, #7
900074be:	4413      	add	r3, r2
900074c0:	3384      	adds	r3, #132	@ 0x84
900074c2:	461a      	mov	r2, r3
900074c4:	68bb      	ldr	r3, [r7, #8]
900074c6:	695b      	ldr	r3, [r3, #20]
900074c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900074ca:	68fb      	ldr	r3, [r7, #12]
900074cc:	681b      	ldr	r3, [r3, #0]
900074ce:	461a      	mov	r2, r3
900074d0:	687b      	ldr	r3, [r7, #4]
900074d2:	01db      	lsls	r3, r3, #7
900074d4:	4413      	add	r3, r2
900074d6:	3384      	adds	r3, #132	@ 0x84
900074d8:	69da      	ldr	r2, [r3, #28]
900074da:	68fb      	ldr	r3, [r7, #12]
900074dc:	681b      	ldr	r3, [r3, #0]
900074de:	4619      	mov	r1, r3
900074e0:	687b      	ldr	r3, [r7, #4]
900074e2:	01db      	lsls	r3, r3, #7
900074e4:	440b      	add	r3, r1
900074e6:	3384      	adds	r3, #132	@ 0x84
900074e8:	4619      	mov	r1, r3
900074ea:	4b4f      	ldr	r3, [pc, #316]	@ (90007628 <LTDC_SetConfig+0x2e4>)
900074ec:	4013      	ands	r3, r2
900074ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900074f0:	68bb      	ldr	r3, [r7, #8]
900074f2:	69da      	ldr	r2, [r3, #28]
900074f4:	68bb      	ldr	r3, [r7, #8]
900074f6:	6a1b      	ldr	r3, [r3, #32]
900074f8:	68f9      	ldr	r1, [r7, #12]
900074fa:	6809      	ldr	r1, [r1, #0]
900074fc:	4608      	mov	r0, r1
900074fe:	6879      	ldr	r1, [r7, #4]
90007500:	01c9      	lsls	r1, r1, #7
90007502:	4401      	add	r1, r0
90007504:	3184      	adds	r1, #132	@ 0x84
90007506:	4313      	orrs	r3, r2
90007508:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
9000750a:	68fb      	ldr	r3, [r7, #12]
9000750c:	681b      	ldr	r3, [r3, #0]
9000750e:	461a      	mov	r2, r3
90007510:	687b      	ldr	r3, [r7, #4]
90007512:	01db      	lsls	r3, r3, #7
90007514:	4413      	add	r3, r2
90007516:	3384      	adds	r3, #132	@ 0x84
90007518:	461a      	mov	r2, r3
9000751a:	68bb      	ldr	r3, [r7, #8]
9000751c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000751e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90007520:	68bb      	ldr	r3, [r7, #8]
90007522:	691b      	ldr	r3, [r3, #16]
90007524:	2b00      	cmp	r3, #0
90007526:	d102      	bne.n	9000752e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90007528:	2304      	movs	r3, #4
9000752a:	61fb      	str	r3, [r7, #28]
9000752c:	e01b      	b.n	90007566 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000752e:	68bb      	ldr	r3, [r7, #8]
90007530:	691b      	ldr	r3, [r3, #16]
90007532:	2b01      	cmp	r3, #1
90007534:	d102      	bne.n	9000753c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
90007536:	2303      	movs	r3, #3
90007538:	61fb      	str	r3, [r7, #28]
9000753a:	e014      	b.n	90007566 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
9000753c:	68bb      	ldr	r3, [r7, #8]
9000753e:	691b      	ldr	r3, [r3, #16]
90007540:	2b04      	cmp	r3, #4
90007542:	d00b      	beq.n	9000755c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90007544:	68bb      	ldr	r3, [r7, #8]
90007546:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90007548:	2b02      	cmp	r3, #2
9000754a:	d007      	beq.n	9000755c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
9000754c:	68bb      	ldr	r3, [r7, #8]
9000754e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90007550:	2b03      	cmp	r3, #3
90007552:	d003      	beq.n	9000755c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90007554:	68bb      	ldr	r3, [r7, #8]
90007556:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90007558:	2b07      	cmp	r3, #7
9000755a:	d102      	bne.n	90007562 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
9000755c:	2302      	movs	r3, #2
9000755e:	61fb      	str	r3, [r7, #28]
90007560:	e001      	b.n	90007566 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
90007562:	2301      	movs	r3, #1
90007564:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90007566:	68fb      	ldr	r3, [r7, #12]
90007568:	681b      	ldr	r3, [r3, #0]
9000756a:	461a      	mov	r2, r3
9000756c:	687b      	ldr	r3, [r7, #4]
9000756e:	01db      	lsls	r3, r3, #7
90007570:	4413      	add	r3, r2
90007572:	3384      	adds	r3, #132	@ 0x84
90007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007576:	68fa      	ldr	r2, [r7, #12]
90007578:	6812      	ldr	r2, [r2, #0]
9000757a:	4611      	mov	r1, r2
9000757c:	687a      	ldr	r2, [r7, #4]
9000757e:	01d2      	lsls	r2, r2, #7
90007580:	440a      	add	r2, r1
90007582:	3284      	adds	r2, #132	@ 0x84
90007584:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90007588:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
9000758a:	68bb      	ldr	r3, [r7, #8]
9000758c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000758e:	69fa      	ldr	r2, [r7, #28]
90007590:	fb02 f303 	mul.w	r3, r2, r3
90007594:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90007596:	68bb      	ldr	r3, [r7, #8]
90007598:	6859      	ldr	r1, [r3, #4]
9000759a:	68bb      	ldr	r3, [r7, #8]
9000759c:	681b      	ldr	r3, [r3, #0]
9000759e:	1acb      	subs	r3, r1, r3
900075a0:	69f9      	ldr	r1, [r7, #28]
900075a2:	fb01 f303 	mul.w	r3, r1, r3
900075a6:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
900075a8:	68f9      	ldr	r1, [r7, #12]
900075aa:	6809      	ldr	r1, [r1, #0]
900075ac:	4608      	mov	r0, r1
900075ae:	6879      	ldr	r1, [r7, #4]
900075b0:	01c9      	lsls	r1, r1, #7
900075b2:	4401      	add	r1, r0
900075b4:	3184      	adds	r1, #132	@ 0x84
900075b6:	4313      	orrs	r3, r2
900075b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900075ba:	68fb      	ldr	r3, [r7, #12]
900075bc:	681b      	ldr	r3, [r3, #0]
900075be:	461a      	mov	r2, r3
900075c0:	687b      	ldr	r3, [r7, #4]
900075c2:	01db      	lsls	r3, r3, #7
900075c4:	4413      	add	r3, r2
900075c6:	3384      	adds	r3, #132	@ 0x84
900075c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
900075ca:	68fb      	ldr	r3, [r7, #12]
900075cc:	681b      	ldr	r3, [r3, #0]
900075ce:	4619      	mov	r1, r3
900075d0:	687b      	ldr	r3, [r7, #4]
900075d2:	01db      	lsls	r3, r3, #7
900075d4:	440b      	add	r3, r1
900075d6:	3384      	adds	r3, #132	@ 0x84
900075d8:	4619      	mov	r1, r3
900075da:	4b14      	ldr	r3, [pc, #80]	@ (9000762c <LTDC_SetConfig+0x2e8>)
900075dc:	4013      	ands	r3, r2
900075de:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900075e0:	68fb      	ldr	r3, [r7, #12]
900075e2:	681b      	ldr	r3, [r3, #0]
900075e4:	461a      	mov	r2, r3
900075e6:	687b      	ldr	r3, [r7, #4]
900075e8:	01db      	lsls	r3, r3, #7
900075ea:	4413      	add	r3, r2
900075ec:	3384      	adds	r3, #132	@ 0x84
900075ee:	461a      	mov	r2, r3
900075f0:	68bb      	ldr	r3, [r7, #8]
900075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900075f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900075f6:	68fb      	ldr	r3, [r7, #12]
900075f8:	681b      	ldr	r3, [r3, #0]
900075fa:	461a      	mov	r2, r3
900075fc:	687b      	ldr	r3, [r7, #4]
900075fe:	01db      	lsls	r3, r3, #7
90007600:	4413      	add	r3, r2
90007602:	3384      	adds	r3, #132	@ 0x84
90007604:	681b      	ldr	r3, [r3, #0]
90007606:	68fa      	ldr	r2, [r7, #12]
90007608:	6812      	ldr	r2, [r2, #0]
9000760a:	4611      	mov	r1, r2
9000760c:	687a      	ldr	r2, [r7, #4]
9000760e:	01d2      	lsls	r2, r2, #7
90007610:	440a      	add	r2, r1
90007612:	3284      	adds	r2, #132	@ 0x84
90007614:	f043 0301 	orr.w	r3, r3, #1
90007618:	6013      	str	r3, [r2, #0]
}
9000761a:	bf00      	nop
9000761c:	3724      	adds	r7, #36	@ 0x24
9000761e:	46bd      	mov	sp, r7
90007620:	f85d 7b04 	ldr.w	r7, [sp], #4
90007624:	4770      	bx	lr
90007626:	bf00      	nop
90007628:	fffff8f8 	.word	0xfffff8f8
9000762c:	fffff800 	.word	0xfffff800

90007630 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90007630:	b580      	push	{r7, lr}
90007632:	b084      	sub	sp, #16
90007634:	af00      	add	r7, sp, #0
90007636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90007638:	f7fc f9e2 	bl	90003a00 <HAL_GetTick>
9000763c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000763e:	687b      	ldr	r3, [r7, #4]
90007640:	2b00      	cmp	r3, #0
90007642:	d101      	bne.n	90007648 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
90007644:	2301      	movs	r3, #1
90007646:	e03b      	b.n	900076c0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90007648:	687b      	ldr	r3, [r7, #4]
9000764a:	2200      	movs	r2, #0
9000764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90007650:	687b      	ldr	r3, [r7, #4]
90007652:	2202      	movs	r2, #2
90007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90007658:	687b      	ldr	r3, [r7, #4]
9000765a:	681b      	ldr	r3, [r3, #0]
9000765c:	68da      	ldr	r2, [r3, #12]
9000765e:	687b      	ldr	r3, [r7, #4]
90007660:	681b      	ldr	r3, [r3, #0]
90007662:	f022 0201 	bic.w	r2, r2, #1
90007666:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90007668:	e00f      	b.n	9000768a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000766a:	f7fc f9c9 	bl	90003a00 <HAL_GetTick>
9000766e:	4602      	mov	r2, r0
90007670:	68fb      	ldr	r3, [r7, #12]
90007672:	1ad3      	subs	r3, r2, r3
90007674:	2b05      	cmp	r3, #5
90007676:	d908      	bls.n	9000768a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90007678:	687b      	ldr	r3, [r7, #4]
9000767a:	2240      	movs	r2, #64	@ 0x40
9000767c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000767e:	687b      	ldr	r3, [r7, #4]
90007680:	2203      	movs	r2, #3
90007682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90007686:	2301      	movs	r3, #1
90007688:	e01a      	b.n	900076c0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000768a:	687b      	ldr	r3, [r7, #4]
9000768c:	681b      	ldr	r3, [r3, #0]
9000768e:	68db      	ldr	r3, [r3, #12]
90007690:	f003 0301 	and.w	r3, r3, #1
90007694:	2b00      	cmp	r3, #0
90007696:	d1e8      	bne.n	9000766a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90007698:	6878      	ldr	r0, [r7, #4]
9000769a:	f000 f86d 	bl	90007778 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
9000769e:	687b      	ldr	r3, [r7, #4]
900076a0:	2200      	movs	r2, #0
900076a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900076a4:	687b      	ldr	r3, [r7, #4]
900076a6:	2200      	movs	r2, #0
900076a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900076aa:	687b      	ldr	r3, [r7, #4]
900076ac:	2200      	movs	r2, #0
900076ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900076b0:	687b      	ldr	r3, [r7, #4]
900076b2:	2200      	movs	r2, #0
900076b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
900076b6:	687b      	ldr	r3, [r7, #4]
900076b8:	2201      	movs	r2, #1
900076ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
900076be:	2300      	movs	r3, #0
}
900076c0:	4618      	mov	r0, r3
900076c2:	3710      	adds	r7, #16
900076c4:	46bd      	mov	sp, r7
900076c6:	bd80      	pop	{r7, pc}

900076c8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
900076c8:	b480      	push	{r7}
900076ca:	b083      	sub	sp, #12
900076cc:	af00      	add	r7, sp, #0
900076ce:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900076d0:	687b      	ldr	r3, [r7, #4]
900076d2:	2b00      	cmp	r3, #0
900076d4:	d101      	bne.n	900076da <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
900076d6:	2301      	movs	r3, #1
900076d8:	e048      	b.n	9000776c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
900076da:	687b      	ldr	r3, [r7, #4]
900076dc:	681b      	ldr	r3, [r3, #0]
900076de:	68da      	ldr	r2, [r3, #12]
900076e0:	687b      	ldr	r3, [r7, #4]
900076e2:	681b      	ldr	r3, [r3, #0]
900076e4:	f022 0201 	bic.w	r2, r2, #1
900076e8:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
900076ea:	687b      	ldr	r3, [r7, #4]
900076ec:	681b      	ldr	r3, [r3, #0]
900076ee:	2200      	movs	r2, #0
900076f0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
900076f2:	687b      	ldr	r3, [r7, #4]
900076f4:	681b      	ldr	r3, [r3, #0]
900076f6:	2200      	movs	r2, #0
900076f8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
900076fa:	687b      	ldr	r3, [r7, #4]
900076fc:	681b      	ldr	r3, [r3, #0]
900076fe:	2200      	movs	r2, #0
90007700:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90007702:	687b      	ldr	r3, [r7, #4]
90007704:	681b      	ldr	r3, [r3, #0]
90007706:	2200      	movs	r2, #0
90007708:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
9000770a:	687b      	ldr	r3, [r7, #4]
9000770c:	681b      	ldr	r3, [r3, #0]
9000770e:	2200      	movs	r2, #0
90007710:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90007712:	687b      	ldr	r3, [r7, #4]
90007714:	681b      	ldr	r3, [r3, #0]
90007716:	2200      	movs	r2, #0
90007718:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
9000771a:	687b      	ldr	r3, [r7, #4]
9000771c:	681b      	ldr	r3, [r3, #0]
9000771e:	2200      	movs	r2, #0
90007720:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90007722:	687b      	ldr	r3, [r7, #4]
90007724:	681b      	ldr	r3, [r3, #0]
90007726:	2200      	movs	r2, #0
90007728:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
9000772a:	687b      	ldr	r3, [r7, #4]
9000772c:	681b      	ldr	r3, [r3, #0]
9000772e:	2200      	movs	r2, #0
90007730:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90007732:	687b      	ldr	r3, [r7, #4]
90007734:	681b      	ldr	r3, [r3, #0]
90007736:	2200      	movs	r2, #0
90007738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000773a:	687b      	ldr	r3, [r7, #4]
9000773c:	681b      	ldr	r3, [r3, #0]
9000773e:	221f      	movs	r2, #31
90007740:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90007742:	687b      	ldr	r3, [r7, #4]
90007744:	2200      	movs	r2, #0
90007746:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90007748:	687b      	ldr	r3, [r7, #4]
9000774a:	2200      	movs	r2, #0
9000774c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
9000774e:	687b      	ldr	r3, [r7, #4]
90007750:	2200      	movs	r2, #0
90007752:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90007754:	687b      	ldr	r3, [r7, #4]
90007756:	2200      	movs	r2, #0
90007758:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
9000775a:	687b      	ldr	r3, [r7, #4]
9000775c:	2200      	movs	r2, #0
9000775e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90007762:	687b      	ldr	r3, [r7, #4]
90007764:	2200      	movs	r2, #0
90007766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
9000776a:	2300      	movs	r3, #0
}
9000776c:	4618      	mov	r0, r3
9000776e:	370c      	adds	r7, #12
90007770:	46bd      	mov	sp, r7
90007772:	f85d 7b04 	ldr.w	r7, [sp], #4
90007776:	4770      	bx	lr

90007778 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90007778:	b480      	push	{r7}
9000777a:	b085      	sub	sp, #20
9000777c:	af00      	add	r7, sp, #0
9000777e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90007780:	687b      	ldr	r3, [r7, #4]
90007782:	68d9      	ldr	r1, [r3, #12]
90007784:	687b      	ldr	r3, [r7, #4]
90007786:	691a      	ldr	r2, [r3, #16]
90007788:	687b      	ldr	r3, [r7, #4]
9000778a:	681b      	ldr	r3, [r3, #0]
9000778c:	430a      	orrs	r2, r1
9000778e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90007790:	687b      	ldr	r3, [r7, #4]
90007792:	695a      	ldr	r2, [r3, #20]
90007794:	687b      	ldr	r3, [r7, #4]
90007796:	699b      	ldr	r3, [r3, #24]
90007798:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
9000779a:	687b      	ldr	r3, [r7, #4]
9000779c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000779e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
900077a0:	687b      	ldr	r3, [r7, #4]
900077a2:	6a1b      	ldr	r3, [r3, #32]
900077a4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
900077a6:	687b      	ldr	r3, [r7, #4]
900077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
900077aa:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
900077ac:	687b      	ldr	r3, [r7, #4]
900077ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900077b0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
900077b2:	687b      	ldr	r3, [r7, #4]
900077b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
900077b6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
900077b8:	687b      	ldr	r3, [r7, #4]
900077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900077bc:	3b01      	subs	r3, #1
900077be:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
900077c0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
900077c4:	687b      	ldr	r3, [r7, #4]
900077c6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900077c8:	687b      	ldr	r3, [r7, #4]
900077ca:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
900077cc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900077ce:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
900077d0:	687b      	ldr	r3, [r7, #4]
900077d2:	685b      	ldr	r3, [r3, #4]
900077d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900077d8:	d107      	bne.n	900077ea <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
900077da:	687b      	ldr	r3, [r7, #4]
900077dc:	681b      	ldr	r3, [r3, #0]
900077de:	691a      	ldr	r2, [r3, #16]
900077e0:	687b      	ldr	r3, [r7, #4]
900077e2:	681b      	ldr	r3, [r3, #0]
900077e4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
900077e8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
900077ea:	687b      	ldr	r3, [r7, #4]
900077ec:	681b      	ldr	r3, [r3, #0]
900077ee:	2200      	movs	r2, #0
900077f0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
900077f2:	687b      	ldr	r3, [r7, #4]
900077f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900077f6:	2b00      	cmp	r3, #0
900077f8:	da11      	bge.n	9000781e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
900077fa:	687b      	ldr	r3, [r7, #4]
900077fc:	681b      	ldr	r3, [r3, #0]
900077fe:	695a      	ldr	r2, [r3, #20]
90007800:	687b      	ldr	r3, [r7, #4]
90007802:	681b      	ldr	r3, [r3, #0]
90007804:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90007808:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000780a:	687b      	ldr	r3, [r7, #4]
9000780c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000780e:	425b      	negs	r3, r3
90007810:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90007812:	687b      	ldr	r3, [r7, #4]
90007814:	681b      	ldr	r3, [r3, #0]
90007816:	68fa      	ldr	r2, [r7, #12]
90007818:	b292      	uxth	r2, r2
9000781a:	621a      	str	r2, [r3, #32]
9000781c:	e006      	b.n	9000782c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000781e:	687b      	ldr	r3, [r7, #4]
90007820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007822:	461a      	mov	r2, r3
90007824:	687b      	ldr	r3, [r7, #4]
90007826:	681b      	ldr	r3, [r3, #0]
90007828:	b292      	uxth	r2, r2
9000782a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000782c:	687b      	ldr	r3, [r7, #4]
9000782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007830:	2b00      	cmp	r3, #0
90007832:	da15      	bge.n	90007860 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90007834:	687b      	ldr	r3, [r7, #4]
90007836:	681b      	ldr	r3, [r3, #0]
90007838:	695a      	ldr	r2, [r3, #20]
9000783a:	687b      	ldr	r3, [r7, #4]
9000783c:	681b      	ldr	r3, [r3, #0]
9000783e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90007842:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90007844:	687b      	ldr	r3, [r7, #4]
90007846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007848:	425b      	negs	r3, r3
9000784a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000784c:	687b      	ldr	r3, [r7, #4]
9000784e:	681b      	ldr	r3, [r3, #0]
90007850:	6a19      	ldr	r1, [r3, #32]
90007852:	68fb      	ldr	r3, [r7, #12]
90007854:	041a      	lsls	r2, r3, #16
90007856:	687b      	ldr	r3, [r7, #4]
90007858:	681b      	ldr	r3, [r3, #0]
9000785a:	430a      	orrs	r2, r1
9000785c:	621a      	str	r2, [r3, #32]
9000785e:	e009      	b.n	90007874 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90007860:	687b      	ldr	r3, [r7, #4]
90007862:	681b      	ldr	r3, [r3, #0]
90007864:	6a19      	ldr	r1, [r3, #32]
90007866:	687b      	ldr	r3, [r7, #4]
90007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000786a:	041a      	lsls	r2, r3, #16
9000786c:	687b      	ldr	r3, [r7, #4]
9000786e:	681b      	ldr	r3, [r3, #0]
90007870:	430a      	orrs	r2, r1
90007872:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90007874:	687b      	ldr	r3, [r7, #4]
90007876:	685b      	ldr	r3, [r3, #4]
90007878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000787c:	d006      	beq.n	9000788c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000787e:	687b      	ldr	r3, [r7, #4]
90007880:	685a      	ldr	r2, [r3, #4]
90007882:	687b      	ldr	r3, [r7, #4]
90007884:	681b      	ldr	r3, [r3, #0]
90007886:	b2d2      	uxtb	r2, r2
90007888:	629a      	str	r2, [r3, #40]	@ 0x28
9000788a:	e003      	b.n	90007894 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
9000788c:	687b      	ldr	r3, [r7, #4]
9000788e:	681b      	ldr	r3, [r3, #0]
90007890:	2200      	movs	r2, #0
90007892:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90007894:	687b      	ldr	r3, [r7, #4]
90007896:	681b      	ldr	r3, [r3, #0]
90007898:	2200      	movs	r2, #0
9000789a:	625a      	str	r2, [r3, #36]	@ 0x24
}
9000789c:	bf00      	nop
9000789e:	3714      	adds	r7, #20
900078a0:	46bd      	mov	sp, r7
900078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900078a6:	4770      	bx	lr

900078a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900078a8:	b580      	push	{r7, lr}
900078aa:	b08c      	sub	sp, #48	@ 0x30
900078ac:	af00      	add	r7, sp, #0
900078ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900078b0:	687b      	ldr	r3, [r7, #4]
900078b2:	2b00      	cmp	r3, #0
900078b4:	d102      	bne.n	900078bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
900078b6:	2301      	movs	r3, #1
900078b8:	f000 bc48 	b.w	9000814c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900078bc:	687b      	ldr	r3, [r7, #4]
900078be:	681b      	ldr	r3, [r3, #0]
900078c0:	f003 0301 	and.w	r3, r3, #1
900078c4:	2b00      	cmp	r3, #0
900078c6:	f000 8088 	beq.w	900079da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900078ca:	4b99      	ldr	r3, [pc, #612]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
900078cc:	691b      	ldr	r3, [r3, #16]
900078ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900078d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900078d4:	4b96      	ldr	r3, [pc, #600]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
900078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900078d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
900078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900078dc:	2b10      	cmp	r3, #16
900078de:	d007      	beq.n	900078f0 <HAL_RCC_OscConfig+0x48>
900078e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900078e2:	2b18      	cmp	r3, #24
900078e4:	d111      	bne.n	9000790a <HAL_RCC_OscConfig+0x62>
900078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900078e8:	f003 0303 	and.w	r3, r3, #3
900078ec:	2b02      	cmp	r3, #2
900078ee:	d10c      	bne.n	9000790a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900078f0:	4b8f      	ldr	r3, [pc, #572]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
900078f2:	681b      	ldr	r3, [r3, #0]
900078f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900078f8:	2b00      	cmp	r3, #0
900078fa:	d06d      	beq.n	900079d8 <HAL_RCC_OscConfig+0x130>
900078fc:	687b      	ldr	r3, [r7, #4]
900078fe:	685b      	ldr	r3, [r3, #4]
90007900:	2b00      	cmp	r3, #0
90007902:	d169      	bne.n	900079d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90007904:	2301      	movs	r3, #1
90007906:	f000 bc21 	b.w	9000814c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000790a:	687b      	ldr	r3, [r7, #4]
9000790c:	685b      	ldr	r3, [r3, #4]
9000790e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90007912:	d106      	bne.n	90007922 <HAL_RCC_OscConfig+0x7a>
90007914:	4b86      	ldr	r3, [pc, #536]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007916:	681b      	ldr	r3, [r3, #0]
90007918:	4a85      	ldr	r2, [pc, #532]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
9000791a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000791e:	6013      	str	r3, [r2, #0]
90007920:	e02e      	b.n	90007980 <HAL_RCC_OscConfig+0xd8>
90007922:	687b      	ldr	r3, [r7, #4]
90007924:	685b      	ldr	r3, [r3, #4]
90007926:	2b00      	cmp	r3, #0
90007928:	d10c      	bne.n	90007944 <HAL_RCC_OscConfig+0x9c>
9000792a:	4b81      	ldr	r3, [pc, #516]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
9000792c:	681b      	ldr	r3, [r3, #0]
9000792e:	4a80      	ldr	r2, [pc, #512]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90007934:	6013      	str	r3, [r2, #0]
90007936:	4b7e      	ldr	r3, [pc, #504]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007938:	681b      	ldr	r3, [r3, #0]
9000793a:	4a7d      	ldr	r2, [pc, #500]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
9000793c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90007940:	6013      	str	r3, [r2, #0]
90007942:	e01d      	b.n	90007980 <HAL_RCC_OscConfig+0xd8>
90007944:	687b      	ldr	r3, [r7, #4]
90007946:	685b      	ldr	r3, [r3, #4]
90007948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000794c:	d10c      	bne.n	90007968 <HAL_RCC_OscConfig+0xc0>
9000794e:	4b78      	ldr	r3, [pc, #480]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007950:	681b      	ldr	r3, [r3, #0]
90007952:	4a77      	ldr	r2, [pc, #476]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007958:	6013      	str	r3, [r2, #0]
9000795a:	4b75      	ldr	r3, [pc, #468]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
9000795c:	681b      	ldr	r3, [r3, #0]
9000795e:	4a74      	ldr	r2, [pc, #464]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007964:	6013      	str	r3, [r2, #0]
90007966:	e00b      	b.n	90007980 <HAL_RCC_OscConfig+0xd8>
90007968:	4b71      	ldr	r3, [pc, #452]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
9000796a:	681b      	ldr	r3, [r3, #0]
9000796c:	4a70      	ldr	r2, [pc, #448]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
9000796e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90007972:	6013      	str	r3, [r2, #0]
90007974:	4b6e      	ldr	r3, [pc, #440]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007976:	681b      	ldr	r3, [r3, #0]
90007978:	4a6d      	ldr	r2, [pc, #436]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
9000797a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000797e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90007980:	687b      	ldr	r3, [r7, #4]
90007982:	685b      	ldr	r3, [r3, #4]
90007984:	2b00      	cmp	r3, #0
90007986:	d013      	beq.n	900079b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007988:	f7fc f83a 	bl	90003a00 <HAL_GetTick>
9000798c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000798e:	e008      	b.n	900079a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90007990:	f7fc f836 	bl	90003a00 <HAL_GetTick>
90007994:	4602      	mov	r2, r0
90007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007998:	1ad3      	subs	r3, r2, r3
9000799a:	2b64      	cmp	r3, #100	@ 0x64
9000799c:	d901      	bls.n	900079a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
9000799e:	2303      	movs	r3, #3
900079a0:	e3d4      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900079a2:	4b63      	ldr	r3, [pc, #396]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
900079a4:	681b      	ldr	r3, [r3, #0]
900079a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900079aa:	2b00      	cmp	r3, #0
900079ac:	d0f0      	beq.n	90007990 <HAL_RCC_OscConfig+0xe8>
900079ae:	e014      	b.n	900079da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900079b0:	f7fc f826 	bl	90003a00 <HAL_GetTick>
900079b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900079b6:	e008      	b.n	900079ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900079b8:	f7fc f822 	bl	90003a00 <HAL_GetTick>
900079bc:	4602      	mov	r2, r0
900079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900079c0:	1ad3      	subs	r3, r2, r3
900079c2:	2b64      	cmp	r3, #100	@ 0x64
900079c4:	d901      	bls.n	900079ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
900079c6:	2303      	movs	r3, #3
900079c8:	e3c0      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900079ca:	4b59      	ldr	r3, [pc, #356]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
900079cc:	681b      	ldr	r3, [r3, #0]
900079ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900079d2:	2b00      	cmp	r3, #0
900079d4:	d1f0      	bne.n	900079b8 <HAL_RCC_OscConfig+0x110>
900079d6:	e000      	b.n	900079da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900079d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900079da:	687b      	ldr	r3, [r7, #4]
900079dc:	681b      	ldr	r3, [r3, #0]
900079de:	f003 0302 	and.w	r3, r3, #2
900079e2:	2b00      	cmp	r3, #0
900079e4:	f000 80ca 	beq.w	90007b7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900079e8:	4b51      	ldr	r3, [pc, #324]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
900079ea:	691b      	ldr	r3, [r3, #16]
900079ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900079f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900079f2:	4b4f      	ldr	r3, [pc, #316]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
900079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900079f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
900079f8:	6a3b      	ldr	r3, [r7, #32]
900079fa:	2b00      	cmp	r3, #0
900079fc:	d007      	beq.n	90007a0e <HAL_RCC_OscConfig+0x166>
900079fe:	6a3b      	ldr	r3, [r7, #32]
90007a00:	2b18      	cmp	r3, #24
90007a02:	d156      	bne.n	90007ab2 <HAL_RCC_OscConfig+0x20a>
90007a04:	69fb      	ldr	r3, [r7, #28]
90007a06:	f003 0303 	and.w	r3, r3, #3
90007a0a:	2b00      	cmp	r3, #0
90007a0c:	d151      	bne.n	90007ab2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007a0e:	4b48      	ldr	r3, [pc, #288]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a10:	681b      	ldr	r3, [r3, #0]
90007a12:	f003 0304 	and.w	r3, r3, #4
90007a16:	2b00      	cmp	r3, #0
90007a18:	d005      	beq.n	90007a26 <HAL_RCC_OscConfig+0x17e>
90007a1a:	687b      	ldr	r3, [r7, #4]
90007a1c:	68db      	ldr	r3, [r3, #12]
90007a1e:	2b00      	cmp	r3, #0
90007a20:	d101      	bne.n	90007a26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90007a22:	2301      	movs	r3, #1
90007a24:	e392      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90007a26:	4b42      	ldr	r3, [pc, #264]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a28:	681b      	ldr	r3, [r3, #0]
90007a2a:	f023 0219 	bic.w	r2, r3, #25
90007a2e:	687b      	ldr	r3, [r7, #4]
90007a30:	68db      	ldr	r3, [r3, #12]
90007a32:	493f      	ldr	r1, [pc, #252]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a34:	4313      	orrs	r3, r2
90007a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007a38:	f7fb ffe2 	bl	90003a00 <HAL_GetTick>
90007a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007a3e:	e008      	b.n	90007a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007a40:	f7fb ffde 	bl	90003a00 <HAL_GetTick>
90007a44:	4602      	mov	r2, r0
90007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007a48:	1ad3      	subs	r3, r2, r3
90007a4a:	2b02      	cmp	r3, #2
90007a4c:	d901      	bls.n	90007a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90007a4e:	2303      	movs	r3, #3
90007a50:	e37c      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007a52:	4b37      	ldr	r3, [pc, #220]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a54:	681b      	ldr	r3, [r3, #0]
90007a56:	f003 0304 	and.w	r3, r3, #4
90007a5a:	2b00      	cmp	r3, #0
90007a5c:	d0f0      	beq.n	90007a40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007a5e:	f7fb ffff 	bl	90003a60 <HAL_GetREVID>
90007a62:	4603      	mov	r3, r0
90007a64:	f241 0203 	movw	r2, #4099	@ 0x1003
90007a68:	4293      	cmp	r3, r2
90007a6a:	d817      	bhi.n	90007a9c <HAL_RCC_OscConfig+0x1f4>
90007a6c:	687b      	ldr	r3, [r7, #4]
90007a6e:	691b      	ldr	r3, [r3, #16]
90007a70:	2b40      	cmp	r3, #64	@ 0x40
90007a72:	d108      	bne.n	90007a86 <HAL_RCC_OscConfig+0x1de>
90007a74:	4b2e      	ldr	r3, [pc, #184]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a76:	685b      	ldr	r3, [r3, #4]
90007a78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90007a7c:	4a2c      	ldr	r2, [pc, #176]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007a82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007a84:	e07a      	b.n	90007b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007a86:	4b2a      	ldr	r3, [pc, #168]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a88:	685b      	ldr	r3, [r3, #4]
90007a8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007a8e:	687b      	ldr	r3, [r7, #4]
90007a90:	691b      	ldr	r3, [r3, #16]
90007a92:	031b      	lsls	r3, r3, #12
90007a94:	4926      	ldr	r1, [pc, #152]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a96:	4313      	orrs	r3, r2
90007a98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007a9a:	e06f      	b.n	90007b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007a9c:	4b24      	ldr	r3, [pc, #144]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007a9e:	685b      	ldr	r3, [r3, #4]
90007aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90007aa4:	687b      	ldr	r3, [r7, #4]
90007aa6:	691b      	ldr	r3, [r3, #16]
90007aa8:	061b      	lsls	r3, r3, #24
90007aaa:	4921      	ldr	r1, [pc, #132]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007aac:	4313      	orrs	r3, r2
90007aae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007ab0:	e064      	b.n	90007b7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90007ab2:	687b      	ldr	r3, [r7, #4]
90007ab4:	68db      	ldr	r3, [r3, #12]
90007ab6:	2b00      	cmp	r3, #0
90007ab8:	d047      	beq.n	90007b4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90007aba:	4b1d      	ldr	r3, [pc, #116]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007abc:	681b      	ldr	r3, [r3, #0]
90007abe:	f023 0219 	bic.w	r2, r3, #25
90007ac2:	687b      	ldr	r3, [r7, #4]
90007ac4:	68db      	ldr	r3, [r3, #12]
90007ac6:	491a      	ldr	r1, [pc, #104]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007ac8:	4313      	orrs	r3, r2
90007aca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007acc:	f7fb ff98 	bl	90003a00 <HAL_GetTick>
90007ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007ad2:	e008      	b.n	90007ae6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007ad4:	f7fb ff94 	bl	90003a00 <HAL_GetTick>
90007ad8:	4602      	mov	r2, r0
90007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007adc:	1ad3      	subs	r3, r2, r3
90007ade:	2b02      	cmp	r3, #2
90007ae0:	d901      	bls.n	90007ae6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90007ae2:	2303      	movs	r3, #3
90007ae4:	e332      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007ae6:	4b12      	ldr	r3, [pc, #72]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007ae8:	681b      	ldr	r3, [r3, #0]
90007aea:	f003 0304 	and.w	r3, r3, #4
90007aee:	2b00      	cmp	r3, #0
90007af0:	d0f0      	beq.n	90007ad4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007af2:	f7fb ffb5 	bl	90003a60 <HAL_GetREVID>
90007af6:	4603      	mov	r3, r0
90007af8:	f241 0203 	movw	r2, #4099	@ 0x1003
90007afc:	4293      	cmp	r3, r2
90007afe:	d819      	bhi.n	90007b34 <HAL_RCC_OscConfig+0x28c>
90007b00:	687b      	ldr	r3, [r7, #4]
90007b02:	691b      	ldr	r3, [r3, #16]
90007b04:	2b40      	cmp	r3, #64	@ 0x40
90007b06:	d108      	bne.n	90007b1a <HAL_RCC_OscConfig+0x272>
90007b08:	4b09      	ldr	r3, [pc, #36]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007b0a:	685b      	ldr	r3, [r3, #4]
90007b0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90007b10:	4a07      	ldr	r2, [pc, #28]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007b16:	6053      	str	r3, [r2, #4]
90007b18:	e030      	b.n	90007b7c <HAL_RCC_OscConfig+0x2d4>
90007b1a:	4b05      	ldr	r3, [pc, #20]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007b1c:	685b      	ldr	r3, [r3, #4]
90007b1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007b22:	687b      	ldr	r3, [r7, #4]
90007b24:	691b      	ldr	r3, [r3, #16]
90007b26:	031b      	lsls	r3, r3, #12
90007b28:	4901      	ldr	r1, [pc, #4]	@ (90007b30 <HAL_RCC_OscConfig+0x288>)
90007b2a:	4313      	orrs	r3, r2
90007b2c:	604b      	str	r3, [r1, #4]
90007b2e:	e025      	b.n	90007b7c <HAL_RCC_OscConfig+0x2d4>
90007b30:	58024400 	.word	0x58024400
90007b34:	4b9a      	ldr	r3, [pc, #616]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007b36:	685b      	ldr	r3, [r3, #4]
90007b38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90007b3c:	687b      	ldr	r3, [r7, #4]
90007b3e:	691b      	ldr	r3, [r3, #16]
90007b40:	061b      	lsls	r3, r3, #24
90007b42:	4997      	ldr	r1, [pc, #604]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007b44:	4313      	orrs	r3, r2
90007b46:	604b      	str	r3, [r1, #4]
90007b48:	e018      	b.n	90007b7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90007b4a:	4b95      	ldr	r3, [pc, #596]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007b4c:	681b      	ldr	r3, [r3, #0]
90007b4e:	4a94      	ldr	r2, [pc, #592]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007b50:	f023 0301 	bic.w	r3, r3, #1
90007b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007b56:	f7fb ff53 	bl	90003a00 <HAL_GetTick>
90007b5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007b5c:	e008      	b.n	90007b70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007b5e:	f7fb ff4f 	bl	90003a00 <HAL_GetTick>
90007b62:	4602      	mov	r2, r0
90007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007b66:	1ad3      	subs	r3, r2, r3
90007b68:	2b02      	cmp	r3, #2
90007b6a:	d901      	bls.n	90007b70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90007b6c:	2303      	movs	r3, #3
90007b6e:	e2ed      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007b70:	4b8b      	ldr	r3, [pc, #556]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007b72:	681b      	ldr	r3, [r3, #0]
90007b74:	f003 0304 	and.w	r3, r3, #4
90007b78:	2b00      	cmp	r3, #0
90007b7a:	d1f0      	bne.n	90007b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90007b7c:	687b      	ldr	r3, [r7, #4]
90007b7e:	681b      	ldr	r3, [r3, #0]
90007b80:	f003 0310 	and.w	r3, r3, #16
90007b84:	2b00      	cmp	r3, #0
90007b86:	f000 80a9 	beq.w	90007cdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90007b8a:	4b85      	ldr	r3, [pc, #532]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007b8c:	691b      	ldr	r3, [r3, #16]
90007b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007b92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90007b94:	4b82      	ldr	r3, [pc, #520]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007b98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90007b9a:	69bb      	ldr	r3, [r7, #24]
90007b9c:	2b08      	cmp	r3, #8
90007b9e:	d007      	beq.n	90007bb0 <HAL_RCC_OscConfig+0x308>
90007ba0:	69bb      	ldr	r3, [r7, #24]
90007ba2:	2b18      	cmp	r3, #24
90007ba4:	d13a      	bne.n	90007c1c <HAL_RCC_OscConfig+0x374>
90007ba6:	697b      	ldr	r3, [r7, #20]
90007ba8:	f003 0303 	and.w	r3, r3, #3
90007bac:	2b01      	cmp	r3, #1
90007bae:	d135      	bne.n	90007c1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007bb0:	4b7b      	ldr	r3, [pc, #492]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007bb2:	681b      	ldr	r3, [r3, #0]
90007bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007bb8:	2b00      	cmp	r3, #0
90007bba:	d005      	beq.n	90007bc8 <HAL_RCC_OscConfig+0x320>
90007bbc:	687b      	ldr	r3, [r7, #4]
90007bbe:	69db      	ldr	r3, [r3, #28]
90007bc0:	2b80      	cmp	r3, #128	@ 0x80
90007bc2:	d001      	beq.n	90007bc8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90007bc4:	2301      	movs	r3, #1
90007bc6:	e2c1      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007bc8:	f7fb ff4a 	bl	90003a60 <HAL_GetREVID>
90007bcc:	4603      	mov	r3, r0
90007bce:	f241 0203 	movw	r2, #4099	@ 0x1003
90007bd2:	4293      	cmp	r3, r2
90007bd4:	d817      	bhi.n	90007c06 <HAL_RCC_OscConfig+0x35e>
90007bd6:	687b      	ldr	r3, [r7, #4]
90007bd8:	6a1b      	ldr	r3, [r3, #32]
90007bda:	2b20      	cmp	r3, #32
90007bdc:	d108      	bne.n	90007bf0 <HAL_RCC_OscConfig+0x348>
90007bde:	4b70      	ldr	r3, [pc, #448]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007be0:	685b      	ldr	r3, [r3, #4]
90007be2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90007be6:	4a6e      	ldr	r2, [pc, #440]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90007bec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007bee:	e075      	b.n	90007cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007bf0:	4b6b      	ldr	r3, [pc, #428]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007bf2:	685b      	ldr	r3, [r3, #4]
90007bf4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90007bf8:	687b      	ldr	r3, [r7, #4]
90007bfa:	6a1b      	ldr	r3, [r3, #32]
90007bfc:	069b      	lsls	r3, r3, #26
90007bfe:	4968      	ldr	r1, [pc, #416]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c00:	4313      	orrs	r3, r2
90007c02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007c04:	e06a      	b.n	90007cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007c06:	4b66      	ldr	r3, [pc, #408]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c08:	68db      	ldr	r3, [r3, #12]
90007c0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90007c0e:	687b      	ldr	r3, [r7, #4]
90007c10:	6a1b      	ldr	r3, [r3, #32]
90007c12:	061b      	lsls	r3, r3, #24
90007c14:	4962      	ldr	r1, [pc, #392]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c16:	4313      	orrs	r3, r2
90007c18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007c1a:	e05f      	b.n	90007cdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90007c1c:	687b      	ldr	r3, [r7, #4]
90007c1e:	69db      	ldr	r3, [r3, #28]
90007c20:	2b00      	cmp	r3, #0
90007c22:	d042      	beq.n	90007caa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90007c24:	4b5e      	ldr	r3, [pc, #376]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c26:	681b      	ldr	r3, [r3, #0]
90007c28:	4a5d      	ldr	r2, [pc, #372]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90007c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007c30:	f7fb fee6 	bl	90003a00 <HAL_GetTick>
90007c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007c36:	e008      	b.n	90007c4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90007c38:	f7fb fee2 	bl	90003a00 <HAL_GetTick>
90007c3c:	4602      	mov	r2, r0
90007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007c40:	1ad3      	subs	r3, r2, r3
90007c42:	2b02      	cmp	r3, #2
90007c44:	d901      	bls.n	90007c4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90007c46:	2303      	movs	r3, #3
90007c48:	e280      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007c4a:	4b55      	ldr	r3, [pc, #340]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c4c:	681b      	ldr	r3, [r3, #0]
90007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007c52:	2b00      	cmp	r3, #0
90007c54:	d0f0      	beq.n	90007c38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90007c56:	f7fb ff03 	bl	90003a60 <HAL_GetREVID>
90007c5a:	4603      	mov	r3, r0
90007c5c:	f241 0203 	movw	r2, #4099	@ 0x1003
90007c60:	4293      	cmp	r3, r2
90007c62:	d817      	bhi.n	90007c94 <HAL_RCC_OscConfig+0x3ec>
90007c64:	687b      	ldr	r3, [r7, #4]
90007c66:	6a1b      	ldr	r3, [r3, #32]
90007c68:	2b20      	cmp	r3, #32
90007c6a:	d108      	bne.n	90007c7e <HAL_RCC_OscConfig+0x3d6>
90007c6c:	4b4c      	ldr	r3, [pc, #304]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c6e:	685b      	ldr	r3, [r3, #4]
90007c70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90007c74:	4a4a      	ldr	r2, [pc, #296]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90007c7a:	6053      	str	r3, [r2, #4]
90007c7c:	e02e      	b.n	90007cdc <HAL_RCC_OscConfig+0x434>
90007c7e:	4b48      	ldr	r3, [pc, #288]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c80:	685b      	ldr	r3, [r3, #4]
90007c82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90007c86:	687b      	ldr	r3, [r7, #4]
90007c88:	6a1b      	ldr	r3, [r3, #32]
90007c8a:	069b      	lsls	r3, r3, #26
90007c8c:	4944      	ldr	r1, [pc, #272]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c8e:	4313      	orrs	r3, r2
90007c90:	604b      	str	r3, [r1, #4]
90007c92:	e023      	b.n	90007cdc <HAL_RCC_OscConfig+0x434>
90007c94:	4b42      	ldr	r3, [pc, #264]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007c96:	68db      	ldr	r3, [r3, #12]
90007c98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90007c9c:	687b      	ldr	r3, [r7, #4]
90007c9e:	6a1b      	ldr	r3, [r3, #32]
90007ca0:	061b      	lsls	r3, r3, #24
90007ca2:	493f      	ldr	r1, [pc, #252]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007ca4:	4313      	orrs	r3, r2
90007ca6:	60cb      	str	r3, [r1, #12]
90007ca8:	e018      	b.n	90007cdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90007caa:	4b3d      	ldr	r3, [pc, #244]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007cac:	681b      	ldr	r3, [r3, #0]
90007cae:	4a3c      	ldr	r2, [pc, #240]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90007cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007cb6:	f7fb fea3 	bl	90003a00 <HAL_GetTick>
90007cba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007cbc:	e008      	b.n	90007cd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90007cbe:	f7fb fe9f 	bl	90003a00 <HAL_GetTick>
90007cc2:	4602      	mov	r2, r0
90007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007cc6:	1ad3      	subs	r3, r2, r3
90007cc8:	2b02      	cmp	r3, #2
90007cca:	d901      	bls.n	90007cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90007ccc:	2303      	movs	r3, #3
90007cce:	e23d      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007cd0:	4b33      	ldr	r3, [pc, #204]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007cd2:	681b      	ldr	r3, [r3, #0]
90007cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007cd8:	2b00      	cmp	r3, #0
90007cda:	d1f0      	bne.n	90007cbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90007cdc:	687b      	ldr	r3, [r7, #4]
90007cde:	681b      	ldr	r3, [r3, #0]
90007ce0:	f003 0308 	and.w	r3, r3, #8
90007ce4:	2b00      	cmp	r3, #0
90007ce6:	d036      	beq.n	90007d56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90007ce8:	687b      	ldr	r3, [r7, #4]
90007cea:	695b      	ldr	r3, [r3, #20]
90007cec:	2b00      	cmp	r3, #0
90007cee:	d019      	beq.n	90007d24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90007cf0:	4b2b      	ldr	r3, [pc, #172]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007cf4:	4a2a      	ldr	r2, [pc, #168]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007cf6:	f043 0301 	orr.w	r3, r3, #1
90007cfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007cfc:	f7fb fe80 	bl	90003a00 <HAL_GetTick>
90007d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007d02:	e008      	b.n	90007d16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007d04:	f7fb fe7c 	bl	90003a00 <HAL_GetTick>
90007d08:	4602      	mov	r2, r0
90007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007d0c:	1ad3      	subs	r3, r2, r3
90007d0e:	2b02      	cmp	r3, #2
90007d10:	d901      	bls.n	90007d16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90007d12:	2303      	movs	r3, #3
90007d14:	e21a      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007d16:	4b22      	ldr	r3, [pc, #136]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007d1a:	f003 0302 	and.w	r3, r3, #2
90007d1e:	2b00      	cmp	r3, #0
90007d20:	d0f0      	beq.n	90007d04 <HAL_RCC_OscConfig+0x45c>
90007d22:	e018      	b.n	90007d56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90007d24:	4b1e      	ldr	r3, [pc, #120]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007d28:	4a1d      	ldr	r2, [pc, #116]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007d2a:	f023 0301 	bic.w	r3, r3, #1
90007d2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007d30:	f7fb fe66 	bl	90003a00 <HAL_GetTick>
90007d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90007d36:	e008      	b.n	90007d4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007d38:	f7fb fe62 	bl	90003a00 <HAL_GetTick>
90007d3c:	4602      	mov	r2, r0
90007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007d40:	1ad3      	subs	r3, r2, r3
90007d42:	2b02      	cmp	r3, #2
90007d44:	d901      	bls.n	90007d4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90007d46:	2303      	movs	r3, #3
90007d48:	e200      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90007d4a:	4b15      	ldr	r3, [pc, #84]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007d4e:	f003 0302 	and.w	r3, r3, #2
90007d52:	2b00      	cmp	r3, #0
90007d54:	d1f0      	bne.n	90007d38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90007d56:	687b      	ldr	r3, [r7, #4]
90007d58:	681b      	ldr	r3, [r3, #0]
90007d5a:	f003 0320 	and.w	r3, r3, #32
90007d5e:	2b00      	cmp	r3, #0
90007d60:	d039      	beq.n	90007dd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90007d62:	687b      	ldr	r3, [r7, #4]
90007d64:	699b      	ldr	r3, [r3, #24]
90007d66:	2b00      	cmp	r3, #0
90007d68:	d01c      	beq.n	90007da4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90007d6a:	4b0d      	ldr	r3, [pc, #52]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007d6c:	681b      	ldr	r3, [r3, #0]
90007d6e:	4a0c      	ldr	r2, [pc, #48]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90007d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007d76:	f7fb fe43 	bl	90003a00 <HAL_GetTick>
90007d7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007d7c:	e008      	b.n	90007d90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007d7e:	f7fb fe3f 	bl	90003a00 <HAL_GetTick>
90007d82:	4602      	mov	r2, r0
90007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007d86:	1ad3      	subs	r3, r2, r3
90007d88:	2b02      	cmp	r3, #2
90007d8a:	d901      	bls.n	90007d90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007d8c:	2303      	movs	r3, #3
90007d8e:	e1dd      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007d90:	4b03      	ldr	r3, [pc, #12]	@ (90007da0 <HAL_RCC_OscConfig+0x4f8>)
90007d92:	681b      	ldr	r3, [r3, #0]
90007d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007d98:	2b00      	cmp	r3, #0
90007d9a:	d0f0      	beq.n	90007d7e <HAL_RCC_OscConfig+0x4d6>
90007d9c:	e01b      	b.n	90007dd6 <HAL_RCC_OscConfig+0x52e>
90007d9e:	bf00      	nop
90007da0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007da4:	4b9b      	ldr	r3, [pc, #620]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007da6:	681b      	ldr	r3, [r3, #0]
90007da8:	4a9a      	ldr	r2, [pc, #616]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90007dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007db0:	f7fb fe26 	bl	90003a00 <HAL_GetTick>
90007db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007db6:	e008      	b.n	90007dca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007db8:	f7fb fe22 	bl	90003a00 <HAL_GetTick>
90007dbc:	4602      	mov	r2, r0
90007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007dc0:	1ad3      	subs	r3, r2, r3
90007dc2:	2b02      	cmp	r3, #2
90007dc4:	d901      	bls.n	90007dca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90007dc6:	2303      	movs	r3, #3
90007dc8:	e1c0      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007dca:	4b92      	ldr	r3, [pc, #584]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007dcc:	681b      	ldr	r3, [r3, #0]
90007dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007dd2:	2b00      	cmp	r3, #0
90007dd4:	d1f0      	bne.n	90007db8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90007dd6:	687b      	ldr	r3, [r7, #4]
90007dd8:	681b      	ldr	r3, [r3, #0]
90007dda:	f003 0304 	and.w	r3, r3, #4
90007dde:	2b00      	cmp	r3, #0
90007de0:	f000 8081 	beq.w	90007ee6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007de4:	4b8c      	ldr	r3, [pc, #560]	@ (90008018 <HAL_RCC_OscConfig+0x770>)
90007de6:	681b      	ldr	r3, [r3, #0]
90007de8:	4a8b      	ldr	r2, [pc, #556]	@ (90008018 <HAL_RCC_OscConfig+0x770>)
90007dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90007dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90007df0:	f7fb fe06 	bl	90003a00 <HAL_GetTick>
90007df4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007df6:	e008      	b.n	90007e0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007df8:	f7fb fe02 	bl	90003a00 <HAL_GetTick>
90007dfc:	4602      	mov	r2, r0
90007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007e00:	1ad3      	subs	r3, r2, r3
90007e02:	2b64      	cmp	r3, #100	@ 0x64
90007e04:	d901      	bls.n	90007e0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90007e06:	2303      	movs	r3, #3
90007e08:	e1a0      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007e0a:	4b83      	ldr	r3, [pc, #524]	@ (90008018 <HAL_RCC_OscConfig+0x770>)
90007e0c:	681b      	ldr	r3, [r3, #0]
90007e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007e12:	2b00      	cmp	r3, #0
90007e14:	d0f0      	beq.n	90007df8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90007e16:	687b      	ldr	r3, [r7, #4]
90007e18:	689b      	ldr	r3, [r3, #8]
90007e1a:	2b01      	cmp	r3, #1
90007e1c:	d106      	bne.n	90007e2c <HAL_RCC_OscConfig+0x584>
90007e1e:	4b7d      	ldr	r3, [pc, #500]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e22:	4a7c      	ldr	r2, [pc, #496]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e24:	f043 0301 	orr.w	r3, r3, #1
90007e28:	6713      	str	r3, [r2, #112]	@ 0x70
90007e2a:	e02d      	b.n	90007e88 <HAL_RCC_OscConfig+0x5e0>
90007e2c:	687b      	ldr	r3, [r7, #4]
90007e2e:	689b      	ldr	r3, [r3, #8]
90007e30:	2b00      	cmp	r3, #0
90007e32:	d10c      	bne.n	90007e4e <HAL_RCC_OscConfig+0x5a6>
90007e34:	4b77      	ldr	r3, [pc, #476]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e38:	4a76      	ldr	r2, [pc, #472]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e3a:	f023 0301 	bic.w	r3, r3, #1
90007e3e:	6713      	str	r3, [r2, #112]	@ 0x70
90007e40:	4b74      	ldr	r3, [pc, #464]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e44:	4a73      	ldr	r2, [pc, #460]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e46:	f023 0304 	bic.w	r3, r3, #4
90007e4a:	6713      	str	r3, [r2, #112]	@ 0x70
90007e4c:	e01c      	b.n	90007e88 <HAL_RCC_OscConfig+0x5e0>
90007e4e:	687b      	ldr	r3, [r7, #4]
90007e50:	689b      	ldr	r3, [r3, #8]
90007e52:	2b05      	cmp	r3, #5
90007e54:	d10c      	bne.n	90007e70 <HAL_RCC_OscConfig+0x5c8>
90007e56:	4b6f      	ldr	r3, [pc, #444]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e5a:	4a6e      	ldr	r2, [pc, #440]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e5c:	f043 0304 	orr.w	r3, r3, #4
90007e60:	6713      	str	r3, [r2, #112]	@ 0x70
90007e62:	4b6c      	ldr	r3, [pc, #432]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e66:	4a6b      	ldr	r2, [pc, #428]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e68:	f043 0301 	orr.w	r3, r3, #1
90007e6c:	6713      	str	r3, [r2, #112]	@ 0x70
90007e6e:	e00b      	b.n	90007e88 <HAL_RCC_OscConfig+0x5e0>
90007e70:	4b68      	ldr	r3, [pc, #416]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e74:	4a67      	ldr	r2, [pc, #412]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e76:	f023 0301 	bic.w	r3, r3, #1
90007e7a:	6713      	str	r3, [r2, #112]	@ 0x70
90007e7c:	4b65      	ldr	r3, [pc, #404]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007e80:	4a64      	ldr	r2, [pc, #400]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007e82:	f023 0304 	bic.w	r3, r3, #4
90007e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90007e88:	687b      	ldr	r3, [r7, #4]
90007e8a:	689b      	ldr	r3, [r3, #8]
90007e8c:	2b00      	cmp	r3, #0
90007e8e:	d015      	beq.n	90007ebc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007e90:	f7fb fdb6 	bl	90003a00 <HAL_GetTick>
90007e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007e96:	e00a      	b.n	90007eae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007e98:	f7fb fdb2 	bl	90003a00 <HAL_GetTick>
90007e9c:	4602      	mov	r2, r0
90007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007ea0:	1ad3      	subs	r3, r2, r3
90007ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
90007ea6:	4293      	cmp	r3, r2
90007ea8:	d901      	bls.n	90007eae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90007eaa:	2303      	movs	r3, #3
90007eac:	e14e      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007eae:	4b59      	ldr	r3, [pc, #356]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007eb2:	f003 0302 	and.w	r3, r3, #2
90007eb6:	2b00      	cmp	r3, #0
90007eb8:	d0ee      	beq.n	90007e98 <HAL_RCC_OscConfig+0x5f0>
90007eba:	e014      	b.n	90007ee6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007ebc:	f7fb fda0 	bl	90003a00 <HAL_GetTick>
90007ec0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007ec2:	e00a      	b.n	90007eda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007ec4:	f7fb fd9c 	bl	90003a00 <HAL_GetTick>
90007ec8:	4602      	mov	r2, r0
90007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007ecc:	1ad3      	subs	r3, r2, r3
90007ece:	f241 3288 	movw	r2, #5000	@ 0x1388
90007ed2:	4293      	cmp	r3, r2
90007ed4:	d901      	bls.n	90007eda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90007ed6:	2303      	movs	r3, #3
90007ed8:	e138      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007eda:	4b4e      	ldr	r3, [pc, #312]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007ede:	f003 0302 	and.w	r3, r3, #2
90007ee2:	2b00      	cmp	r3, #0
90007ee4:	d1ee      	bne.n	90007ec4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90007ee6:	687b      	ldr	r3, [r7, #4]
90007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007eea:	2b00      	cmp	r3, #0
90007eec:	f000 812d 	beq.w	9000814a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007ef0:	4b48      	ldr	r3, [pc, #288]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007ef2:	691b      	ldr	r3, [r3, #16]
90007ef4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007ef8:	2b18      	cmp	r3, #24
90007efa:	f000 80bd 	beq.w	90008078 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90007efe:	687b      	ldr	r3, [r7, #4]
90007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007f02:	2b02      	cmp	r3, #2
90007f04:	f040 809e 	bne.w	90008044 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007f08:	4b42      	ldr	r3, [pc, #264]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f0a:	681b      	ldr	r3, [r3, #0]
90007f0c:	4a41      	ldr	r2, [pc, #260]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007f14:	f7fb fd74 	bl	90003a00 <HAL_GetTick>
90007f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007f1a:	e008      	b.n	90007f2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007f1c:	f7fb fd70 	bl	90003a00 <HAL_GetTick>
90007f20:	4602      	mov	r2, r0
90007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007f24:	1ad3      	subs	r3, r2, r3
90007f26:	2b02      	cmp	r3, #2
90007f28:	d901      	bls.n	90007f2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90007f2a:	2303      	movs	r3, #3
90007f2c:	e10e      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007f2e:	4b39      	ldr	r3, [pc, #228]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f30:	681b      	ldr	r3, [r3, #0]
90007f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007f36:	2b00      	cmp	r3, #0
90007f38:	d1f0      	bne.n	90007f1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90007f3a:	4b36      	ldr	r3, [pc, #216]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90007f3e:	4b37      	ldr	r3, [pc, #220]	@ (9000801c <HAL_RCC_OscConfig+0x774>)
90007f40:	4013      	ands	r3, r2
90007f42:	687a      	ldr	r2, [r7, #4]
90007f44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
90007f46:	687a      	ldr	r2, [r7, #4]
90007f48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
90007f4a:	0112      	lsls	r2, r2, #4
90007f4c:	430a      	orrs	r2, r1
90007f4e:	4931      	ldr	r1, [pc, #196]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f50:	4313      	orrs	r3, r2
90007f52:	628b      	str	r3, [r1, #40]	@ 0x28
90007f54:	687b      	ldr	r3, [r7, #4]
90007f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007f58:	3b01      	subs	r3, #1
90007f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007f5e:	687b      	ldr	r3, [r7, #4]
90007f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007f62:	3b01      	subs	r3, #1
90007f64:	025b      	lsls	r3, r3, #9
90007f66:	b29b      	uxth	r3, r3
90007f68:	431a      	orrs	r2, r3
90007f6a:	687b      	ldr	r3, [r7, #4]
90007f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007f6e:	3b01      	subs	r3, #1
90007f70:	041b      	lsls	r3, r3, #16
90007f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90007f76:	431a      	orrs	r2, r3
90007f78:	687b      	ldr	r3, [r7, #4]
90007f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007f7c:	3b01      	subs	r3, #1
90007f7e:	061b      	lsls	r3, r3, #24
90007f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007f84:	4923      	ldr	r1, [pc, #140]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f86:	4313      	orrs	r3, r2
90007f88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90007f8a:	4b22      	ldr	r3, [pc, #136]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f8e:	4a21      	ldr	r2, [pc, #132]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f90:	f023 0301 	bic.w	r3, r3, #1
90007f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007f96:	4b1f      	ldr	r3, [pc, #124]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007f9a:	4b21      	ldr	r3, [pc, #132]	@ (90008020 <HAL_RCC_OscConfig+0x778>)
90007f9c:	4013      	ands	r3, r2
90007f9e:	687a      	ldr	r2, [r7, #4]
90007fa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007fa2:	00d2      	lsls	r2, r2, #3
90007fa4:	491b      	ldr	r1, [pc, #108]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fa6:	4313      	orrs	r3, r2
90007fa8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90007faa:	4b1a      	ldr	r3, [pc, #104]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fae:	f023 020c 	bic.w	r2, r3, #12
90007fb2:	687b      	ldr	r3, [r7, #4]
90007fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007fb6:	4917      	ldr	r1, [pc, #92]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fb8:	4313      	orrs	r3, r2
90007fba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007fbc:	4b15      	ldr	r3, [pc, #84]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fc0:	f023 0202 	bic.w	r2, r3, #2
90007fc4:	687b      	ldr	r3, [r7, #4]
90007fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90007fc8:	4912      	ldr	r1, [pc, #72]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fca:	4313      	orrs	r3, r2
90007fcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90007fce:	4b11      	ldr	r3, [pc, #68]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fd2:	4a10      	ldr	r2, [pc, #64]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007fda:	4b0e      	ldr	r3, [pc, #56]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fde:	4a0d      	ldr	r2, [pc, #52]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90007fe6:	4b0b      	ldr	r3, [pc, #44]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fea:	4a0a      	ldr	r2, [pc, #40]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90007ff2:	4b08      	ldr	r3, [pc, #32]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ff6:	4a07      	ldr	r2, [pc, #28]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90007ff8:	f043 0301 	orr.w	r3, r3, #1
90007ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90007ffe:	4b05      	ldr	r3, [pc, #20]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90008000:	681b      	ldr	r3, [r3, #0]
90008002:	4a04      	ldr	r2, [pc, #16]	@ (90008014 <HAL_RCC_OscConfig+0x76c>)
90008004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90008008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000800a:	f7fb fcf9 	bl	90003a00 <HAL_GetTick>
9000800e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90008010:	e011      	b.n	90008036 <HAL_RCC_OscConfig+0x78e>
90008012:	bf00      	nop
90008014:	58024400 	.word	0x58024400
90008018:	58024800 	.word	0x58024800
9000801c:	fffffc0c 	.word	0xfffffc0c
90008020:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90008024:	f7fb fcec 	bl	90003a00 <HAL_GetTick>
90008028:	4602      	mov	r2, r0
9000802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000802c:	1ad3      	subs	r3, r2, r3
9000802e:	2b02      	cmp	r3, #2
90008030:	d901      	bls.n	90008036 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90008032:	2303      	movs	r3, #3
90008034:	e08a      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90008036:	4b47      	ldr	r3, [pc, #284]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
90008038:	681b      	ldr	r3, [r3, #0]
9000803a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000803e:	2b00      	cmp	r3, #0
90008040:	d0f0      	beq.n	90008024 <HAL_RCC_OscConfig+0x77c>
90008042:	e082      	b.n	9000814a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90008044:	4b43      	ldr	r3, [pc, #268]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
90008046:	681b      	ldr	r3, [r3, #0]
90008048:	4a42      	ldr	r2, [pc, #264]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
9000804a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
9000804e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008050:	f7fb fcd6 	bl	90003a00 <HAL_GetTick>
90008054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90008056:	e008      	b.n	9000806a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90008058:	f7fb fcd2 	bl	90003a00 <HAL_GetTick>
9000805c:	4602      	mov	r2, r0
9000805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90008060:	1ad3      	subs	r3, r2, r3
90008062:	2b02      	cmp	r3, #2
90008064:	d901      	bls.n	9000806a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90008066:	2303      	movs	r3, #3
90008068:	e070      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000806a:	4b3a      	ldr	r3, [pc, #232]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
9000806c:	681b      	ldr	r3, [r3, #0]
9000806e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90008072:	2b00      	cmp	r3, #0
90008074:	d1f0      	bne.n	90008058 <HAL_RCC_OscConfig+0x7b0>
90008076:	e068      	b.n	9000814a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90008078:	4b36      	ldr	r3, [pc, #216]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
9000807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000807c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
9000807e:	4b35      	ldr	r3, [pc, #212]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
90008080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90008082:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90008084:	687b      	ldr	r3, [r7, #4]
90008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90008088:	2b01      	cmp	r3, #1
9000808a:	d031      	beq.n	900080f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000808c:	693b      	ldr	r3, [r7, #16]
9000808e:	f003 0203 	and.w	r2, r3, #3
90008092:	687b      	ldr	r3, [r7, #4]
90008094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90008096:	429a      	cmp	r2, r3
90008098:	d12a      	bne.n	900080f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000809a:	693b      	ldr	r3, [r7, #16]
9000809c:	091b      	lsrs	r3, r3, #4
9000809e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
900080a2:	687b      	ldr	r3, [r7, #4]
900080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900080a6:	429a      	cmp	r2, r3
900080a8:	d122      	bne.n	900080f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900080aa:	68fb      	ldr	r3, [r7, #12]
900080ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
900080b0:	687b      	ldr	r3, [r7, #4]
900080b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900080b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900080b6:	429a      	cmp	r2, r3
900080b8:	d11a      	bne.n	900080f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900080ba:	68fb      	ldr	r3, [r7, #12]
900080bc:	0a5b      	lsrs	r3, r3, #9
900080be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900080c2:	687b      	ldr	r3, [r7, #4]
900080c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900080c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900080c8:	429a      	cmp	r2, r3
900080ca:	d111      	bne.n	900080f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900080cc:	68fb      	ldr	r3, [r7, #12]
900080ce:	0c1b      	lsrs	r3, r3, #16
900080d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900080d4:	687b      	ldr	r3, [r7, #4]
900080d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900080d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900080da:	429a      	cmp	r2, r3
900080dc:	d108      	bne.n	900080f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900080de:	68fb      	ldr	r3, [r7, #12]
900080e0:	0e1b      	lsrs	r3, r3, #24
900080e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900080e6:	687b      	ldr	r3, [r7, #4]
900080e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900080ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900080ec:	429a      	cmp	r2, r3
900080ee:	d001      	beq.n	900080f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
900080f0:	2301      	movs	r3, #1
900080f2:	e02b      	b.n	9000814c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
900080f4:	4b17      	ldr	r3, [pc, #92]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
900080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900080f8:	08db      	lsrs	r3, r3, #3
900080fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
900080fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90008100:	687b      	ldr	r3, [r7, #4]
90008102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008104:	693a      	ldr	r2, [r7, #16]
90008106:	429a      	cmp	r2, r3
90008108:	d01f      	beq.n	9000814a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
9000810a:	4b12      	ldr	r3, [pc, #72]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
9000810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000810e:	4a11      	ldr	r2, [pc, #68]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
90008110:	f023 0301 	bic.w	r3, r3, #1
90008114:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90008116:	f7fb fc73 	bl	90003a00 <HAL_GetTick>
9000811a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000811c:	bf00      	nop
9000811e:	f7fb fc6f 	bl	90003a00 <HAL_GetTick>
90008122:	4602      	mov	r2, r0
90008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90008126:	4293      	cmp	r3, r2
90008128:	d0f9      	beq.n	9000811e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000812a:	4b0a      	ldr	r3, [pc, #40]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
9000812c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000812e:	4b0a      	ldr	r3, [pc, #40]	@ (90008158 <HAL_RCC_OscConfig+0x8b0>)
90008130:	4013      	ands	r3, r2
90008132:	687a      	ldr	r2, [r7, #4]
90008134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90008136:	00d2      	lsls	r2, r2, #3
90008138:	4906      	ldr	r1, [pc, #24]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
9000813a:	4313      	orrs	r3, r2
9000813c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
9000813e:	4b05      	ldr	r3, [pc, #20]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
90008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008142:	4a04      	ldr	r2, [pc, #16]	@ (90008154 <HAL_RCC_OscConfig+0x8ac>)
90008144:	f043 0301 	orr.w	r3, r3, #1
90008148:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
9000814a:	2300      	movs	r3, #0
}
9000814c:	4618      	mov	r0, r3
9000814e:	3730      	adds	r7, #48	@ 0x30
90008150:	46bd      	mov	sp, r7
90008152:	bd80      	pop	{r7, pc}
90008154:	58024400 	.word	0x58024400
90008158:	ffff0007 	.word	0xffff0007

9000815c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
9000815c:	b580      	push	{r7, lr}
9000815e:	b086      	sub	sp, #24
90008160:	af00      	add	r7, sp, #0
90008162:	6078      	str	r0, [r7, #4]
90008164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90008166:	687b      	ldr	r3, [r7, #4]
90008168:	2b00      	cmp	r3, #0
9000816a:	d101      	bne.n	90008170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
9000816c:	2301      	movs	r3, #1
9000816e:	e19c      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90008170:	4b8a      	ldr	r3, [pc, #552]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
90008172:	681b      	ldr	r3, [r3, #0]
90008174:	f003 030f 	and.w	r3, r3, #15
90008178:	683a      	ldr	r2, [r7, #0]
9000817a:	429a      	cmp	r2, r3
9000817c:	d910      	bls.n	900081a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000817e:	4b87      	ldr	r3, [pc, #540]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
90008180:	681b      	ldr	r3, [r3, #0]
90008182:	f023 020f 	bic.w	r2, r3, #15
90008186:	4985      	ldr	r1, [pc, #532]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
90008188:	683b      	ldr	r3, [r7, #0]
9000818a:	4313      	orrs	r3, r2
9000818c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000818e:	4b83      	ldr	r3, [pc, #524]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
90008190:	681b      	ldr	r3, [r3, #0]
90008192:	f003 030f 	and.w	r3, r3, #15
90008196:	683a      	ldr	r2, [r7, #0]
90008198:	429a      	cmp	r2, r3
9000819a:	d001      	beq.n	900081a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
9000819c:	2301      	movs	r3, #1
9000819e:	e184      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
900081a0:	687b      	ldr	r3, [r7, #4]
900081a2:	681b      	ldr	r3, [r3, #0]
900081a4:	f003 0304 	and.w	r3, r3, #4
900081a8:	2b00      	cmp	r3, #0
900081aa:	d010      	beq.n	900081ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
900081ac:	687b      	ldr	r3, [r7, #4]
900081ae:	691a      	ldr	r2, [r3, #16]
900081b0:	4b7b      	ldr	r3, [pc, #492]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900081b2:	699b      	ldr	r3, [r3, #24]
900081b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900081b8:	429a      	cmp	r2, r3
900081ba:	d908      	bls.n	900081ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900081bc:	4b78      	ldr	r3, [pc, #480]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900081be:	699b      	ldr	r3, [r3, #24]
900081c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900081c4:	687b      	ldr	r3, [r7, #4]
900081c6:	691b      	ldr	r3, [r3, #16]
900081c8:	4975      	ldr	r1, [pc, #468]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900081ca:	4313      	orrs	r3, r2
900081cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900081ce:	687b      	ldr	r3, [r7, #4]
900081d0:	681b      	ldr	r3, [r3, #0]
900081d2:	f003 0308 	and.w	r3, r3, #8
900081d6:	2b00      	cmp	r3, #0
900081d8:	d010      	beq.n	900081fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900081da:	687b      	ldr	r3, [r7, #4]
900081dc:	695a      	ldr	r2, [r3, #20]
900081de:	4b70      	ldr	r3, [pc, #448]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900081e0:	69db      	ldr	r3, [r3, #28]
900081e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900081e6:	429a      	cmp	r2, r3
900081e8:	d908      	bls.n	900081fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900081ea:	4b6d      	ldr	r3, [pc, #436]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900081ec:	69db      	ldr	r3, [r3, #28]
900081ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900081f2:	687b      	ldr	r3, [r7, #4]
900081f4:	695b      	ldr	r3, [r3, #20]
900081f6:	496a      	ldr	r1, [pc, #424]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900081f8:	4313      	orrs	r3, r2
900081fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900081fc:	687b      	ldr	r3, [r7, #4]
900081fe:	681b      	ldr	r3, [r3, #0]
90008200:	f003 0310 	and.w	r3, r3, #16
90008204:	2b00      	cmp	r3, #0
90008206:	d010      	beq.n	9000822a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90008208:	687b      	ldr	r3, [r7, #4]
9000820a:	699a      	ldr	r2, [r3, #24]
9000820c:	4b64      	ldr	r3, [pc, #400]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
9000820e:	69db      	ldr	r3, [r3, #28]
90008210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90008214:	429a      	cmp	r2, r3
90008216:	d908      	bls.n	9000822a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90008218:	4b61      	ldr	r3, [pc, #388]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
9000821a:	69db      	ldr	r3, [r3, #28]
9000821c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90008220:	687b      	ldr	r3, [r7, #4]
90008222:	699b      	ldr	r3, [r3, #24]
90008224:	495e      	ldr	r1, [pc, #376]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008226:	4313      	orrs	r3, r2
90008228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000822a:	687b      	ldr	r3, [r7, #4]
9000822c:	681b      	ldr	r3, [r3, #0]
9000822e:	f003 0320 	and.w	r3, r3, #32
90008232:	2b00      	cmp	r3, #0
90008234:	d010      	beq.n	90008258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90008236:	687b      	ldr	r3, [r7, #4]
90008238:	69da      	ldr	r2, [r3, #28]
9000823a:	4b59      	ldr	r3, [pc, #356]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
9000823c:	6a1b      	ldr	r3, [r3, #32]
9000823e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90008242:	429a      	cmp	r2, r3
90008244:	d908      	bls.n	90008258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90008246:	4b56      	ldr	r3, [pc, #344]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008248:	6a1b      	ldr	r3, [r3, #32]
9000824a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000824e:	687b      	ldr	r3, [r7, #4]
90008250:	69db      	ldr	r3, [r3, #28]
90008252:	4953      	ldr	r1, [pc, #332]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008254:	4313      	orrs	r3, r2
90008256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90008258:	687b      	ldr	r3, [r7, #4]
9000825a:	681b      	ldr	r3, [r3, #0]
9000825c:	f003 0302 	and.w	r3, r3, #2
90008260:	2b00      	cmp	r3, #0
90008262:	d010      	beq.n	90008286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90008264:	687b      	ldr	r3, [r7, #4]
90008266:	68da      	ldr	r2, [r3, #12]
90008268:	4b4d      	ldr	r3, [pc, #308]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
9000826a:	699b      	ldr	r3, [r3, #24]
9000826c:	f003 030f 	and.w	r3, r3, #15
90008270:	429a      	cmp	r2, r3
90008272:	d908      	bls.n	90008286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90008274:	4b4a      	ldr	r3, [pc, #296]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008276:	699b      	ldr	r3, [r3, #24]
90008278:	f023 020f 	bic.w	r2, r3, #15
9000827c:	687b      	ldr	r3, [r7, #4]
9000827e:	68db      	ldr	r3, [r3, #12]
90008280:	4947      	ldr	r1, [pc, #284]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008282:	4313      	orrs	r3, r2
90008284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90008286:	687b      	ldr	r3, [r7, #4]
90008288:	681b      	ldr	r3, [r3, #0]
9000828a:	f003 0301 	and.w	r3, r3, #1
9000828e:	2b00      	cmp	r3, #0
90008290:	d055      	beq.n	9000833e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90008292:	4b43      	ldr	r3, [pc, #268]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008294:	699b      	ldr	r3, [r3, #24]
90008296:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
9000829a:	687b      	ldr	r3, [r7, #4]
9000829c:	689b      	ldr	r3, [r3, #8]
9000829e:	4940      	ldr	r1, [pc, #256]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900082a0:	4313      	orrs	r3, r2
900082a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
900082a4:	687b      	ldr	r3, [r7, #4]
900082a6:	685b      	ldr	r3, [r3, #4]
900082a8:	2b02      	cmp	r3, #2
900082aa:	d107      	bne.n	900082bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900082ac:	4b3c      	ldr	r3, [pc, #240]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900082ae:	681b      	ldr	r3, [r3, #0]
900082b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900082b4:	2b00      	cmp	r3, #0
900082b6:	d121      	bne.n	900082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900082b8:	2301      	movs	r3, #1
900082ba:	e0f6      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
900082bc:	687b      	ldr	r3, [r7, #4]
900082be:	685b      	ldr	r3, [r3, #4]
900082c0:	2b03      	cmp	r3, #3
900082c2:	d107      	bne.n	900082d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900082c4:	4b36      	ldr	r3, [pc, #216]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900082c6:	681b      	ldr	r3, [r3, #0]
900082c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900082cc:	2b00      	cmp	r3, #0
900082ce:	d115      	bne.n	900082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900082d0:	2301      	movs	r3, #1
900082d2:	e0ea      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
900082d4:	687b      	ldr	r3, [r7, #4]
900082d6:	685b      	ldr	r3, [r3, #4]
900082d8:	2b01      	cmp	r3, #1
900082da:	d107      	bne.n	900082ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900082dc:	4b30      	ldr	r3, [pc, #192]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900082de:	681b      	ldr	r3, [r3, #0]
900082e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900082e4:	2b00      	cmp	r3, #0
900082e6:	d109      	bne.n	900082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900082e8:	2301      	movs	r3, #1
900082ea:	e0de      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900082ec:	4b2c      	ldr	r3, [pc, #176]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900082ee:	681b      	ldr	r3, [r3, #0]
900082f0:	f003 0304 	and.w	r3, r3, #4
900082f4:	2b00      	cmp	r3, #0
900082f6:	d101      	bne.n	900082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900082f8:	2301      	movs	r3, #1
900082fa:	e0d6      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
900082fc:	4b28      	ldr	r3, [pc, #160]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
900082fe:	691b      	ldr	r3, [r3, #16]
90008300:	f023 0207 	bic.w	r2, r3, #7
90008304:	687b      	ldr	r3, [r7, #4]
90008306:	685b      	ldr	r3, [r3, #4]
90008308:	4925      	ldr	r1, [pc, #148]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
9000830a:	4313      	orrs	r3, r2
9000830c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000830e:	f7fb fb77 	bl	90003a00 <HAL_GetTick>
90008312:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90008314:	e00a      	b.n	9000832c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90008316:	f7fb fb73 	bl	90003a00 <HAL_GetTick>
9000831a:	4602      	mov	r2, r0
9000831c:	697b      	ldr	r3, [r7, #20]
9000831e:	1ad3      	subs	r3, r2, r3
90008320:	f241 3288 	movw	r2, #5000	@ 0x1388
90008324:	4293      	cmp	r3, r2
90008326:	d901      	bls.n	9000832c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90008328:	2303      	movs	r3, #3
9000832a:	e0be      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000832c:	4b1c      	ldr	r3, [pc, #112]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
9000832e:	691b      	ldr	r3, [r3, #16]
90008330:	f003 0238 	and.w	r2, r3, #56	@ 0x38
90008334:	687b      	ldr	r3, [r7, #4]
90008336:	685b      	ldr	r3, [r3, #4]
90008338:	00db      	lsls	r3, r3, #3
9000833a:	429a      	cmp	r2, r3
9000833c:	d1eb      	bne.n	90008316 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000833e:	687b      	ldr	r3, [r7, #4]
90008340:	681b      	ldr	r3, [r3, #0]
90008342:	f003 0302 	and.w	r3, r3, #2
90008346:	2b00      	cmp	r3, #0
90008348:	d010      	beq.n	9000836c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000834a:	687b      	ldr	r3, [r7, #4]
9000834c:	68da      	ldr	r2, [r3, #12]
9000834e:	4b14      	ldr	r3, [pc, #80]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008350:	699b      	ldr	r3, [r3, #24]
90008352:	f003 030f 	and.w	r3, r3, #15
90008356:	429a      	cmp	r2, r3
90008358:	d208      	bcs.n	9000836c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000835a:	4b11      	ldr	r3, [pc, #68]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
9000835c:	699b      	ldr	r3, [r3, #24]
9000835e:	f023 020f 	bic.w	r2, r3, #15
90008362:	687b      	ldr	r3, [r7, #4]
90008364:	68db      	ldr	r3, [r3, #12]
90008366:	490e      	ldr	r1, [pc, #56]	@ (900083a0 <HAL_RCC_ClockConfig+0x244>)
90008368:	4313      	orrs	r3, r2
9000836a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000836c:	4b0b      	ldr	r3, [pc, #44]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
9000836e:	681b      	ldr	r3, [r3, #0]
90008370:	f003 030f 	and.w	r3, r3, #15
90008374:	683a      	ldr	r2, [r7, #0]
90008376:	429a      	cmp	r2, r3
90008378:	d214      	bcs.n	900083a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000837a:	4b08      	ldr	r3, [pc, #32]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
9000837c:	681b      	ldr	r3, [r3, #0]
9000837e:	f023 020f 	bic.w	r2, r3, #15
90008382:	4906      	ldr	r1, [pc, #24]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
90008384:	683b      	ldr	r3, [r7, #0]
90008386:	4313      	orrs	r3, r2
90008388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000838a:	4b04      	ldr	r3, [pc, #16]	@ (9000839c <HAL_RCC_ClockConfig+0x240>)
9000838c:	681b      	ldr	r3, [r3, #0]
9000838e:	f003 030f 	and.w	r3, r3, #15
90008392:	683a      	ldr	r2, [r7, #0]
90008394:	429a      	cmp	r2, r3
90008396:	d005      	beq.n	900083a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90008398:	2301      	movs	r3, #1
9000839a:	e086      	b.n	900084aa <HAL_RCC_ClockConfig+0x34e>
9000839c:	52002000 	.word	0x52002000
900083a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
900083a4:	687b      	ldr	r3, [r7, #4]
900083a6:	681b      	ldr	r3, [r3, #0]
900083a8:	f003 0304 	and.w	r3, r3, #4
900083ac:	2b00      	cmp	r3, #0
900083ae:	d010      	beq.n	900083d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
900083b0:	687b      	ldr	r3, [r7, #4]
900083b2:	691a      	ldr	r2, [r3, #16]
900083b4:	4b3f      	ldr	r3, [pc, #252]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
900083b6:	699b      	ldr	r3, [r3, #24]
900083b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900083bc:	429a      	cmp	r2, r3
900083be:	d208      	bcs.n	900083d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900083c0:	4b3c      	ldr	r3, [pc, #240]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
900083c2:	699b      	ldr	r3, [r3, #24]
900083c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900083c8:	687b      	ldr	r3, [r7, #4]
900083ca:	691b      	ldr	r3, [r3, #16]
900083cc:	4939      	ldr	r1, [pc, #228]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
900083ce:	4313      	orrs	r3, r2
900083d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900083d2:	687b      	ldr	r3, [r7, #4]
900083d4:	681b      	ldr	r3, [r3, #0]
900083d6:	f003 0308 	and.w	r3, r3, #8
900083da:	2b00      	cmp	r3, #0
900083dc:	d010      	beq.n	90008400 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900083de:	687b      	ldr	r3, [r7, #4]
900083e0:	695a      	ldr	r2, [r3, #20]
900083e2:	4b34      	ldr	r3, [pc, #208]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
900083e4:	69db      	ldr	r3, [r3, #28]
900083e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900083ea:	429a      	cmp	r2, r3
900083ec:	d208      	bcs.n	90008400 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900083ee:	4b31      	ldr	r3, [pc, #196]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
900083f0:	69db      	ldr	r3, [r3, #28]
900083f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900083f6:	687b      	ldr	r3, [r7, #4]
900083f8:	695b      	ldr	r3, [r3, #20]
900083fa:	492e      	ldr	r1, [pc, #184]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
900083fc:	4313      	orrs	r3, r2
900083fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90008400:	687b      	ldr	r3, [r7, #4]
90008402:	681b      	ldr	r3, [r3, #0]
90008404:	f003 0310 	and.w	r3, r3, #16
90008408:	2b00      	cmp	r3, #0
9000840a:	d010      	beq.n	9000842e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000840c:	687b      	ldr	r3, [r7, #4]
9000840e:	699a      	ldr	r2, [r3, #24]
90008410:	4b28      	ldr	r3, [pc, #160]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
90008412:	69db      	ldr	r3, [r3, #28]
90008414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90008418:	429a      	cmp	r2, r3
9000841a:	d208      	bcs.n	9000842e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000841c:	4b25      	ldr	r3, [pc, #148]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
9000841e:	69db      	ldr	r3, [r3, #28]
90008420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90008424:	687b      	ldr	r3, [r7, #4]
90008426:	699b      	ldr	r3, [r3, #24]
90008428:	4922      	ldr	r1, [pc, #136]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
9000842a:	4313      	orrs	r3, r2
9000842c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000842e:	687b      	ldr	r3, [r7, #4]
90008430:	681b      	ldr	r3, [r3, #0]
90008432:	f003 0320 	and.w	r3, r3, #32
90008436:	2b00      	cmp	r3, #0
90008438:	d010      	beq.n	9000845c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000843a:	687b      	ldr	r3, [r7, #4]
9000843c:	69da      	ldr	r2, [r3, #28]
9000843e:	4b1d      	ldr	r3, [pc, #116]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
90008440:	6a1b      	ldr	r3, [r3, #32]
90008442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90008446:	429a      	cmp	r2, r3
90008448:	d208      	bcs.n	9000845c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000844a:	4b1a      	ldr	r3, [pc, #104]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
9000844c:	6a1b      	ldr	r3, [r3, #32]
9000844e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90008452:	687b      	ldr	r3, [r7, #4]
90008454:	69db      	ldr	r3, [r3, #28]
90008456:	4917      	ldr	r1, [pc, #92]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
90008458:	4313      	orrs	r3, r2
9000845a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000845c:	f000 f834 	bl	900084c8 <HAL_RCC_GetSysClockFreq>
90008460:	4602      	mov	r2, r0
90008462:	4b14      	ldr	r3, [pc, #80]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
90008464:	699b      	ldr	r3, [r3, #24]
90008466:	0a1b      	lsrs	r3, r3, #8
90008468:	f003 030f 	and.w	r3, r3, #15
9000846c:	4912      	ldr	r1, [pc, #72]	@ (900084b8 <HAL_RCC_ClockConfig+0x35c>)
9000846e:	5ccb      	ldrb	r3, [r1, r3]
90008470:	f003 031f 	and.w	r3, r3, #31
90008474:	fa22 f303 	lsr.w	r3, r2, r3
90008478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000847a:	4b0e      	ldr	r3, [pc, #56]	@ (900084b4 <HAL_RCC_ClockConfig+0x358>)
9000847c:	699b      	ldr	r3, [r3, #24]
9000847e:	f003 030f 	and.w	r3, r3, #15
90008482:	4a0d      	ldr	r2, [pc, #52]	@ (900084b8 <HAL_RCC_ClockConfig+0x35c>)
90008484:	5cd3      	ldrb	r3, [r2, r3]
90008486:	f003 031f 	and.w	r3, r3, #31
9000848a:	693a      	ldr	r2, [r7, #16]
9000848c:	fa22 f303 	lsr.w	r3, r2, r3
90008490:	4a0a      	ldr	r2, [pc, #40]	@ (900084bc <HAL_RCC_ClockConfig+0x360>)
90008492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90008494:	4a0a      	ldr	r2, [pc, #40]	@ (900084c0 <HAL_RCC_ClockConfig+0x364>)
90008496:	693b      	ldr	r3, [r7, #16]
90008498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
9000849a:	4b0a      	ldr	r3, [pc, #40]	@ (900084c4 <HAL_RCC_ClockConfig+0x368>)
9000849c:	681b      	ldr	r3, [r3, #0]
9000849e:	4618      	mov	r0, r3
900084a0:	f7fb fa64 	bl	9000396c <HAL_InitTick>
900084a4:	4603      	mov	r3, r0
900084a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
900084a8:	7bfb      	ldrb	r3, [r7, #15]
}
900084aa:	4618      	mov	r0, r3
900084ac:	3718      	adds	r7, #24
900084ae:	46bd      	mov	sp, r7
900084b0:	bd80      	pop	{r7, pc}
900084b2:	bf00      	nop
900084b4:	58024400 	.word	0x58024400
900084b8:	9000dc4c 	.word	0x9000dc4c
900084bc:	2000008c 	.word	0x2000008c
900084c0:	20000088 	.word	0x20000088
900084c4:	20000090 	.word	0x20000090

900084c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
900084c8:	b480      	push	{r7}
900084ca:	b089      	sub	sp, #36	@ 0x24
900084cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
900084ce:	4bb3      	ldr	r3, [pc, #716]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
900084d0:	691b      	ldr	r3, [r3, #16]
900084d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900084d6:	2b18      	cmp	r3, #24
900084d8:	f200 8155 	bhi.w	90008786 <HAL_RCC_GetSysClockFreq+0x2be>
900084dc:	a201      	add	r2, pc, #4	@ (adr r2, 900084e4 <HAL_RCC_GetSysClockFreq+0x1c>)
900084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900084e2:	bf00      	nop
900084e4:	90008549 	.word	0x90008549
900084e8:	90008787 	.word	0x90008787
900084ec:	90008787 	.word	0x90008787
900084f0:	90008787 	.word	0x90008787
900084f4:	90008787 	.word	0x90008787
900084f8:	90008787 	.word	0x90008787
900084fc:	90008787 	.word	0x90008787
90008500:	90008787 	.word	0x90008787
90008504:	9000856f 	.word	0x9000856f
90008508:	90008787 	.word	0x90008787
9000850c:	90008787 	.word	0x90008787
90008510:	90008787 	.word	0x90008787
90008514:	90008787 	.word	0x90008787
90008518:	90008787 	.word	0x90008787
9000851c:	90008787 	.word	0x90008787
90008520:	90008787 	.word	0x90008787
90008524:	90008575 	.word	0x90008575
90008528:	90008787 	.word	0x90008787
9000852c:	90008787 	.word	0x90008787
90008530:	90008787 	.word	0x90008787
90008534:	90008787 	.word	0x90008787
90008538:	90008787 	.word	0x90008787
9000853c:	90008787 	.word	0x90008787
90008540:	90008787 	.word	0x90008787
90008544:	9000857b 	.word	0x9000857b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008548:	4b94      	ldr	r3, [pc, #592]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000854a:	681b      	ldr	r3, [r3, #0]
9000854c:	f003 0320 	and.w	r3, r3, #32
90008550:	2b00      	cmp	r3, #0
90008552:	d009      	beq.n	90008568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90008554:	4b91      	ldr	r3, [pc, #580]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008556:	681b      	ldr	r3, [r3, #0]
90008558:	08db      	lsrs	r3, r3, #3
9000855a:	f003 0303 	and.w	r3, r3, #3
9000855e:	4a90      	ldr	r2, [pc, #576]	@ (900087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
90008560:	fa22 f303 	lsr.w	r3, r2, r3
90008564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90008566:	e111      	b.n	9000878c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90008568:	4b8d      	ldr	r3, [pc, #564]	@ (900087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
9000856a:	61bb      	str	r3, [r7, #24]
      break;
9000856c:	e10e      	b.n	9000878c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
9000856e:	4b8d      	ldr	r3, [pc, #564]	@ (900087a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
90008570:	61bb      	str	r3, [r7, #24]
      break;
90008572:	e10b      	b.n	9000878c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90008574:	4b8c      	ldr	r3, [pc, #560]	@ (900087a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
90008576:	61bb      	str	r3, [r7, #24]
      break;
90008578:	e108      	b.n	9000878c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000857a:	4b88      	ldr	r3, [pc, #544]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000857e:	f003 0303 	and.w	r3, r3, #3
90008582:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90008584:	4b85      	ldr	r3, [pc, #532]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008588:	091b      	lsrs	r3, r3, #4
9000858a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000858e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90008590:	4b82      	ldr	r3, [pc, #520]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008594:	f003 0301 	and.w	r3, r3, #1
90008598:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000859a:	4b80      	ldr	r3, [pc, #512]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000859c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000859e:	08db      	lsrs	r3, r3, #3
900085a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
900085a4:	68fa      	ldr	r2, [r7, #12]
900085a6:	fb02 f303 	mul.w	r3, r2, r3
900085aa:	ee07 3a90 	vmov	s15, r3
900085ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
900085b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
900085b6:	693b      	ldr	r3, [r7, #16]
900085b8:	2b00      	cmp	r3, #0
900085ba:	f000 80e1 	beq.w	90008780 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
900085be:	697b      	ldr	r3, [r7, #20]
900085c0:	2b02      	cmp	r3, #2
900085c2:	f000 8083 	beq.w	900086cc <HAL_RCC_GetSysClockFreq+0x204>
900085c6:	697b      	ldr	r3, [r7, #20]
900085c8:	2b02      	cmp	r3, #2
900085ca:	f200 80a1 	bhi.w	90008710 <HAL_RCC_GetSysClockFreq+0x248>
900085ce:	697b      	ldr	r3, [r7, #20]
900085d0:	2b00      	cmp	r3, #0
900085d2:	d003      	beq.n	900085dc <HAL_RCC_GetSysClockFreq+0x114>
900085d4:	697b      	ldr	r3, [r7, #20]
900085d6:	2b01      	cmp	r3, #1
900085d8:	d056      	beq.n	90008688 <HAL_RCC_GetSysClockFreq+0x1c0>
900085da:	e099      	b.n	90008710 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900085dc:	4b6f      	ldr	r3, [pc, #444]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
900085de:	681b      	ldr	r3, [r3, #0]
900085e0:	f003 0320 	and.w	r3, r3, #32
900085e4:	2b00      	cmp	r3, #0
900085e6:	d02d      	beq.n	90008644 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900085e8:	4b6c      	ldr	r3, [pc, #432]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
900085ea:	681b      	ldr	r3, [r3, #0]
900085ec:	08db      	lsrs	r3, r3, #3
900085ee:	f003 0303 	and.w	r3, r3, #3
900085f2:	4a6b      	ldr	r2, [pc, #428]	@ (900087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
900085f4:	fa22 f303 	lsr.w	r3, r2, r3
900085f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900085fa:	687b      	ldr	r3, [r7, #4]
900085fc:	ee07 3a90 	vmov	s15, r3
90008600:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008604:	693b      	ldr	r3, [r7, #16]
90008606:	ee07 3a90 	vmov	s15, r3
9000860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000860e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008612:	4b62      	ldr	r3, [pc, #392]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90008616:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000861a:	ee07 3a90 	vmov	s15, r3
9000861e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008622:	ed97 6a02 	vldr	s12, [r7, #8]
90008626:	eddf 5a61 	vldr	s11, [pc, #388]	@ 900087ac <HAL_RCC_GetSysClockFreq+0x2e4>
9000862a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000862e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008636:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000863a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000863e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90008642:	e087      	b.n	90008754 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90008644:	693b      	ldr	r3, [r7, #16]
90008646:	ee07 3a90 	vmov	s15, r3
9000864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000864e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 900087b0 <HAL_RCC_GetSysClockFreq+0x2e8>
90008652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008656:	4b51      	ldr	r3, [pc, #324]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000865a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000865e:	ee07 3a90 	vmov	s15, r3
90008662:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008666:	ed97 6a02 	vldr	s12, [r7, #8]
9000866a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 900087ac <HAL_RCC_GetSysClockFreq+0x2e4>
9000866e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008672:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000867a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000867e:	ee67 7a27 	vmul.f32	s15, s14, s15
90008682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90008686:	e065      	b.n	90008754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90008688:	693b      	ldr	r3, [r7, #16]
9000868a:	ee07 3a90 	vmov	s15, r3
9000868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008692:	eddf 6a48 	vldr	s13, [pc, #288]	@ 900087b4 <HAL_RCC_GetSysClockFreq+0x2ec>
90008696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000869a:	4b40      	ldr	r3, [pc, #256]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000869c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000869e:	f3c3 0308 	ubfx	r3, r3, #0, #9
900086a2:	ee07 3a90 	vmov	s15, r3
900086a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900086aa:	ed97 6a02 	vldr	s12, [r7, #8]
900086ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 900087ac <HAL_RCC_GetSysClockFreq+0x2e4>
900086b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900086b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900086ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900086be:	ee77 7aa6 	vadd.f32	s15, s15, s13
900086c2:	ee67 7a27 	vmul.f32	s15, s14, s15
900086c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900086ca:	e043      	b.n	90008754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900086cc:	693b      	ldr	r3, [r7, #16]
900086ce:	ee07 3a90 	vmov	s15, r3
900086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900086d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 900087b8 <HAL_RCC_GetSysClockFreq+0x2f0>
900086da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900086de:	4b2f      	ldr	r3, [pc, #188]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
900086e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900086e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900086e6:	ee07 3a90 	vmov	s15, r3
900086ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
900086ee:	ed97 6a02 	vldr	s12, [r7, #8]
900086f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 900087ac <HAL_RCC_GetSysClockFreq+0x2e4>
900086f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900086fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
900086fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008702:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008706:	ee67 7a27 	vmul.f32	s15, s14, s15
9000870a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000870e:	e021      	b.n	90008754 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90008710:	693b      	ldr	r3, [r7, #16]
90008712:	ee07 3a90 	vmov	s15, r3
90008716:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000871a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 900087b4 <HAL_RCC_GetSysClockFreq+0x2ec>
9000871e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008722:	4b1e      	ldr	r3, [pc, #120]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000872a:	ee07 3a90 	vmov	s15, r3
9000872e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008732:	ed97 6a02 	vldr	s12, [r7, #8]
90008736:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 900087ac <HAL_RCC_GetSysClockFreq+0x2e4>
9000873a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000873e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008746:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000874a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000874e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90008752:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90008754:	4b11      	ldr	r3, [pc, #68]	@ (9000879c <HAL_RCC_GetSysClockFreq+0x2d4>)
90008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90008758:	0a5b      	lsrs	r3, r3, #9
9000875a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000875e:	3301      	adds	r3, #1
90008760:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90008762:	683b      	ldr	r3, [r7, #0]
90008764:	ee07 3a90 	vmov	s15, r3
90008768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
9000876c:	edd7 6a07 	vldr	s13, [r7, #28]
90008770:	eec6 7a87 	vdiv.f32	s15, s13, s14
90008774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90008778:	ee17 3a90 	vmov	r3, s15
9000877c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
9000877e:	e005      	b.n	9000878c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90008780:	2300      	movs	r3, #0
90008782:	61bb      	str	r3, [r7, #24]
      break;
90008784:	e002      	b.n	9000878c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90008786:	4b07      	ldr	r3, [pc, #28]	@ (900087a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
90008788:	61bb      	str	r3, [r7, #24]
      break;
9000878a:	bf00      	nop
  }

  return sysclockfreq;
9000878c:	69bb      	ldr	r3, [r7, #24]
}
9000878e:	4618      	mov	r0, r3
90008790:	3724      	adds	r7, #36	@ 0x24
90008792:	46bd      	mov	sp, r7
90008794:	f85d 7b04 	ldr.w	r7, [sp], #4
90008798:	4770      	bx	lr
9000879a:	bf00      	nop
9000879c:	58024400 	.word	0x58024400
900087a0:	03d09000 	.word	0x03d09000
900087a4:	003d0900 	.word	0x003d0900
900087a8:	017d7840 	.word	0x017d7840
900087ac:	46000000 	.word	0x46000000
900087b0:	4c742400 	.word	0x4c742400
900087b4:	4a742400 	.word	0x4a742400
900087b8:	4bbebc20 	.word	0x4bbebc20

900087bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
900087bc:	b580      	push	{r7, lr}
900087be:	b082      	sub	sp, #8
900087c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
900087c2:	f7ff fe81 	bl	900084c8 <HAL_RCC_GetSysClockFreq>
900087c6:	4602      	mov	r2, r0
900087c8:	4b10      	ldr	r3, [pc, #64]	@ (9000880c <HAL_RCC_GetHCLKFreq+0x50>)
900087ca:	699b      	ldr	r3, [r3, #24]
900087cc:	0a1b      	lsrs	r3, r3, #8
900087ce:	f003 030f 	and.w	r3, r3, #15
900087d2:	490f      	ldr	r1, [pc, #60]	@ (90008810 <HAL_RCC_GetHCLKFreq+0x54>)
900087d4:	5ccb      	ldrb	r3, [r1, r3]
900087d6:	f003 031f 	and.w	r3, r3, #31
900087da:	fa22 f303 	lsr.w	r3, r2, r3
900087de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900087e0:	4b0a      	ldr	r3, [pc, #40]	@ (9000880c <HAL_RCC_GetHCLKFreq+0x50>)
900087e2:	699b      	ldr	r3, [r3, #24]
900087e4:	f003 030f 	and.w	r3, r3, #15
900087e8:	4a09      	ldr	r2, [pc, #36]	@ (90008810 <HAL_RCC_GetHCLKFreq+0x54>)
900087ea:	5cd3      	ldrb	r3, [r2, r3]
900087ec:	f003 031f 	and.w	r3, r3, #31
900087f0:	687a      	ldr	r2, [r7, #4]
900087f2:	fa22 f303 	lsr.w	r3, r2, r3
900087f6:	4a07      	ldr	r2, [pc, #28]	@ (90008814 <HAL_RCC_GetHCLKFreq+0x58>)
900087f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900087fa:	4a07      	ldr	r2, [pc, #28]	@ (90008818 <HAL_RCC_GetHCLKFreq+0x5c>)
900087fc:	687b      	ldr	r3, [r7, #4]
900087fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90008800:	4b04      	ldr	r3, [pc, #16]	@ (90008814 <HAL_RCC_GetHCLKFreq+0x58>)
90008802:	681b      	ldr	r3, [r3, #0]
}
90008804:	4618      	mov	r0, r3
90008806:	3708      	adds	r7, #8
90008808:	46bd      	mov	sp, r7
9000880a:	bd80      	pop	{r7, pc}
9000880c:	58024400 	.word	0x58024400
90008810:	9000dc4c 	.word	0x9000dc4c
90008814:	2000008c 	.word	0x2000008c
90008818:	20000088 	.word	0x20000088

9000881c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000881c:	b580      	push	{r7, lr}
9000881e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90008820:	f7ff ffcc 	bl	900087bc <HAL_RCC_GetHCLKFreq>
90008824:	4602      	mov	r2, r0
90008826:	4b06      	ldr	r3, [pc, #24]	@ (90008840 <HAL_RCC_GetPCLK1Freq+0x24>)
90008828:	69db      	ldr	r3, [r3, #28]
9000882a:	091b      	lsrs	r3, r3, #4
9000882c:	f003 0307 	and.w	r3, r3, #7
90008830:	4904      	ldr	r1, [pc, #16]	@ (90008844 <HAL_RCC_GetPCLK1Freq+0x28>)
90008832:	5ccb      	ldrb	r3, [r1, r3]
90008834:	f003 031f 	and.w	r3, r3, #31
90008838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000883c:	4618      	mov	r0, r3
9000883e:	bd80      	pop	{r7, pc}
90008840:	58024400 	.word	0x58024400
90008844:	9000dc4c 	.word	0x9000dc4c

90008848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90008848:	b580      	push	{r7, lr}
9000884a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000884c:	f7ff ffb6 	bl	900087bc <HAL_RCC_GetHCLKFreq>
90008850:	4602      	mov	r2, r0
90008852:	4b06      	ldr	r3, [pc, #24]	@ (9000886c <HAL_RCC_GetPCLK2Freq+0x24>)
90008854:	69db      	ldr	r3, [r3, #28]
90008856:	0a1b      	lsrs	r3, r3, #8
90008858:	f003 0307 	and.w	r3, r3, #7
9000885c:	4904      	ldr	r1, [pc, #16]	@ (90008870 <HAL_RCC_GetPCLK2Freq+0x28>)
9000885e:	5ccb      	ldrb	r3, [r1, r3]
90008860:	f003 031f 	and.w	r3, r3, #31
90008864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90008868:	4618      	mov	r0, r3
9000886a:	bd80      	pop	{r7, pc}
9000886c:	58024400 	.word	0x58024400
90008870:	9000dc4c 	.word	0x9000dc4c

90008874 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90008874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90008878:	b0ca      	sub	sp, #296	@ 0x128
9000887a:	af00      	add	r7, sp, #0
9000887c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90008880:	2300      	movs	r3, #0
90008882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90008886:	2300      	movs	r3, #0
90008888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000888c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008890:	e9d3 2300 	ldrd	r2, r3, [r3]
90008894:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90008898:	2500      	movs	r5, #0
9000889a:	ea54 0305 	orrs.w	r3, r4, r5
9000889e:	d049      	beq.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
900088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
900088a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900088aa:	d02f      	beq.n	9000890c <HAL_RCCEx_PeriphCLKConfig+0x98>
900088ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
900088b0:	d828      	bhi.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0x90>
900088b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900088b6:	d01a      	beq.n	900088ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
900088b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900088bc:	d822      	bhi.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0x90>
900088be:	2b00      	cmp	r3, #0
900088c0:	d003      	beq.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0x56>
900088c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
900088c6:	d007      	beq.n	900088d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
900088c8:	e01c      	b.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900088ca:	4bb8      	ldr	r3, [pc, #736]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900088ce:	4ab7      	ldr	r2, [pc, #732]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900088d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900088d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900088d6:	e01a      	b.n	9000890e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088dc:	3308      	adds	r3, #8
900088de:	2102      	movs	r1, #2
900088e0:	4618      	mov	r0, r3
900088e2:	f001 fc8f 	bl	9000a204 <RCCEx_PLL2_Config>
900088e6:	4603      	mov	r3, r0
900088e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
900088ec:	e00f      	b.n	9000890e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088f2:	3328      	adds	r3, #40	@ 0x28
900088f4:	2102      	movs	r1, #2
900088f6:	4618      	mov	r0, r3
900088f8:	f001 fd36 	bl	9000a368 <RCCEx_PLL3_Config>
900088fc:	4603      	mov	r3, r0
900088fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90008902:	e004      	b.n	9000890e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008904:	2301      	movs	r3, #1
90008906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000890a:	e000      	b.n	9000890e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
9000890c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000890e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008912:	2b00      	cmp	r3, #0
90008914:	d10a      	bne.n	9000892c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90008916:	4ba5      	ldr	r3, [pc, #660]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000891a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90008924:	4aa1      	ldr	r2, [pc, #644]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008926:	430b      	orrs	r3, r1
90008928:	6513      	str	r3, [r2, #80]	@ 0x50
9000892a:	e003      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000892c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90008934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008938:	e9d3 2300 	ldrd	r2, r3, [r3]
9000893c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90008940:	f04f 0900 	mov.w	r9, #0
90008944:	ea58 0309 	orrs.w	r3, r8, r9
90008948:	d047      	beq.n	900089da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
9000894a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000894e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008950:	2b04      	cmp	r3, #4
90008952:	d82a      	bhi.n	900089aa <HAL_RCCEx_PeriphCLKConfig+0x136>
90008954:	a201      	add	r2, pc, #4	@ (adr r2, 9000895c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000895a:	bf00      	nop
9000895c:	90008971 	.word	0x90008971
90008960:	9000897f 	.word	0x9000897f
90008964:	90008995 	.word	0x90008995
90008968:	900089b3 	.word	0x900089b3
9000896c:	900089b3 	.word	0x900089b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008970:	4b8e      	ldr	r3, [pc, #568]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008974:	4a8d      	ldr	r2, [pc, #564]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000897a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000897c:	e01a      	b.n	900089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000897e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008982:	3308      	adds	r3, #8
90008984:	2100      	movs	r1, #0
90008986:	4618      	mov	r0, r3
90008988:	f001 fc3c 	bl	9000a204 <RCCEx_PLL2_Config>
9000898c:	4603      	mov	r3, r0
9000898e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008992:	e00f      	b.n	900089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008998:	3328      	adds	r3, #40	@ 0x28
9000899a:	2100      	movs	r1, #0
9000899c:	4618      	mov	r0, r3
9000899e:	f001 fce3 	bl	9000a368 <RCCEx_PLL3_Config>
900089a2:	4603      	mov	r3, r0
900089a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900089a8:	e004      	b.n	900089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089aa:	2301      	movs	r3, #1
900089ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089b0:	e000      	b.n	900089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
900089b2:	bf00      	nop
    }

    if (ret == HAL_OK)
900089b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089b8:	2b00      	cmp	r3, #0
900089ba:	d10a      	bne.n	900089d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900089bc:	4b7b      	ldr	r3, [pc, #492]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900089be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900089c0:	f023 0107 	bic.w	r1, r3, #7
900089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900089ca:	4a78      	ldr	r2, [pc, #480]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
900089cc:	430b      	orrs	r3, r1
900089ce:	6513      	str	r3, [r2, #80]	@ 0x50
900089d0:	e003      	b.n	900089da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
900089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089de:	e9d3 2300 	ldrd	r2, r3, [r3]
900089e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
900089e6:	f04f 0b00 	mov.w	fp, #0
900089ea:	ea5a 030b 	orrs.w	r3, sl, fp
900089ee:	d04c      	beq.n	90008a8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
900089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
900089f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900089fa:	d030      	beq.n	90008a5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
900089fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008a00:	d829      	bhi.n	90008a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90008a02:	2bc0      	cmp	r3, #192	@ 0xc0
90008a04:	d02d      	beq.n	90008a62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90008a06:	2bc0      	cmp	r3, #192	@ 0xc0
90008a08:	d825      	bhi.n	90008a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90008a0a:	2b80      	cmp	r3, #128	@ 0x80
90008a0c:	d018      	beq.n	90008a40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90008a0e:	2b80      	cmp	r3, #128	@ 0x80
90008a10:	d821      	bhi.n	90008a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90008a12:	2b00      	cmp	r3, #0
90008a14:	d002      	beq.n	90008a1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90008a16:	2b40      	cmp	r3, #64	@ 0x40
90008a18:	d007      	beq.n	90008a2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90008a1a:	e01c      	b.n	90008a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008a1c:	4b63      	ldr	r3, [pc, #396]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008a20:	4a62      	ldr	r2, [pc, #392]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90008a28:	e01c      	b.n	90008a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a2e:	3308      	adds	r3, #8
90008a30:	2100      	movs	r1, #0
90008a32:	4618      	mov	r0, r3
90008a34:	f001 fbe6 	bl	9000a204 <RCCEx_PLL2_Config>
90008a38:	4603      	mov	r3, r0
90008a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90008a3e:	e011      	b.n	90008a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a44:	3328      	adds	r3, #40	@ 0x28
90008a46:	2100      	movs	r1, #0
90008a48:	4618      	mov	r0, r3
90008a4a:	f001 fc8d 	bl	9000a368 <RCCEx_PLL3_Config>
90008a4e:	4603      	mov	r3, r0
90008a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90008a54:	e006      	b.n	90008a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008a56:	2301      	movs	r3, #1
90008a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a5c:	e002      	b.n	90008a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90008a5e:	bf00      	nop
90008a60:	e000      	b.n	90008a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90008a62:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a68:	2b00      	cmp	r3, #0
90008a6a:	d10a      	bne.n	90008a82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90008a6c:	4b4f      	ldr	r3, [pc, #316]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008a70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90008a7a:	4a4c      	ldr	r2, [pc, #304]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008a7c:	430b      	orrs	r3, r1
90008a7e:	6513      	str	r3, [r2, #80]	@ 0x50
90008a80:	e003      	b.n	90008a8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90008a96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90008a9a:	2300      	movs	r3, #0
90008a9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90008aa0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90008aa4:	460b      	mov	r3, r1
90008aa6:	4313      	orrs	r3, r2
90008aa8:	d053      	beq.n	90008b52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90008ab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90008ab6:	d035      	beq.n	90008b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90008ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90008abc:	d82e      	bhi.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008abe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90008ac2:	d031      	beq.n	90008b28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90008ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90008ac8:	d828      	bhi.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90008ace:	d01a      	beq.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0x292>
90008ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90008ad4:	d822      	bhi.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008ad6:	2b00      	cmp	r3, #0
90008ad8:	d003      	beq.n	90008ae2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
90008ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008ade:	d007      	beq.n	90008af0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90008ae0:	e01c      	b.n	90008b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008ae2:	4b32      	ldr	r3, [pc, #200]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008ae6:	4a31      	ldr	r2, [pc, #196]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008aee:	e01c      	b.n	90008b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008af4:	3308      	adds	r3, #8
90008af6:	2100      	movs	r1, #0
90008af8:	4618      	mov	r0, r3
90008afa:	f001 fb83 	bl	9000a204 <RCCEx_PLL2_Config>
90008afe:	4603      	mov	r3, r0
90008b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90008b04:	e011      	b.n	90008b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b0a:	3328      	adds	r3, #40	@ 0x28
90008b0c:	2100      	movs	r1, #0
90008b0e:	4618      	mov	r0, r3
90008b10:	f001 fc2a 	bl	9000a368 <RCCEx_PLL3_Config>
90008b14:	4603      	mov	r3, r0
90008b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008b1a:	e006      	b.n	90008b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90008b1c:	2301      	movs	r3, #1
90008b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b22:	e002      	b.n	90008b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90008b24:	bf00      	nop
90008b26:	e000      	b.n	90008b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90008b28:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b2e:	2b00      	cmp	r3, #0
90008b30:	d10b      	bne.n	90008b4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90008b32:	4b1e      	ldr	r3, [pc, #120]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008b36:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90008b42:	4a1a      	ldr	r2, [pc, #104]	@ (90008bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008b44:	430b      	orrs	r3, r1
90008b46:	6593      	str	r3, [r2, #88]	@ 0x58
90008b48:	e003      	b.n	90008b52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90008b5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90008b62:	2300      	movs	r3, #0
90008b64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90008b68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90008b6c:	460b      	mov	r3, r1
90008b6e:	4313      	orrs	r3, r2
90008b70:	d056      	beq.n	90008c20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90008b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90008b7e:	d038      	beq.n	90008bf2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90008b80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90008b84:	d831      	bhi.n	90008bea <HAL_RCCEx_PeriphCLKConfig+0x376>
90008b86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90008b8a:	d034      	beq.n	90008bf6 <HAL_RCCEx_PeriphCLKConfig+0x382>
90008b8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90008b90:	d82b      	bhi.n	90008bea <HAL_RCCEx_PeriphCLKConfig+0x376>
90008b92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90008b96:	d01d      	beq.n	90008bd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
90008b98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90008b9c:	d825      	bhi.n	90008bea <HAL_RCCEx_PeriphCLKConfig+0x376>
90008b9e:	2b00      	cmp	r3, #0
90008ba0:	d006      	beq.n	90008bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90008ba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90008ba6:	d00a      	beq.n	90008bbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
90008ba8:	e01f      	b.n	90008bea <HAL_RCCEx_PeriphCLKConfig+0x376>
90008baa:	bf00      	nop
90008bac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008bb0:	4ba2      	ldr	r3, [pc, #648]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008bb4:	4aa1      	ldr	r2, [pc, #644]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008bbc:	e01c      	b.n	90008bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bc2:	3308      	adds	r3, #8
90008bc4:	2100      	movs	r1, #0
90008bc6:	4618      	mov	r0, r3
90008bc8:	f001 fb1c 	bl	9000a204 <RCCEx_PLL2_Config>
90008bcc:	4603      	mov	r3, r0
90008bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90008bd2:	e011      	b.n	90008bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bd8:	3328      	adds	r3, #40	@ 0x28
90008bda:	2100      	movs	r1, #0
90008bdc:	4618      	mov	r0, r3
90008bde:	f001 fbc3 	bl	9000a368 <RCCEx_PLL3_Config>
90008be2:	4603      	mov	r3, r0
90008be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008be8:	e006      	b.n	90008bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90008bea:	2301      	movs	r3, #1
90008bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008bf0:	e002      	b.n	90008bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90008bf2:	bf00      	nop
90008bf4:	e000      	b.n	90008bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90008bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
90008bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bfc:	2b00      	cmp	r3, #0
90008bfe:	d10b      	bne.n	90008c18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90008c00:	4b8e      	ldr	r3, [pc, #568]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008c04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90008c10:	4a8a      	ldr	r2, [pc, #552]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008c12:	430b      	orrs	r3, r1
90008c14:	6593      	str	r3, [r2, #88]	@ 0x58
90008c16:	e003      	b.n	90008c20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90008c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90008c30:	2300      	movs	r3, #0
90008c32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90008c36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90008c3a:	460b      	mov	r3, r1
90008c3c:	4313      	orrs	r3, r2
90008c3e:	d03a      	beq.n	90008cb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008c46:	2b30      	cmp	r3, #48	@ 0x30
90008c48:	d01f      	beq.n	90008c8a <HAL_RCCEx_PeriphCLKConfig+0x416>
90008c4a:	2b30      	cmp	r3, #48	@ 0x30
90008c4c:	d819      	bhi.n	90008c82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90008c4e:	2b20      	cmp	r3, #32
90008c50:	d00c      	beq.n	90008c6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90008c52:	2b20      	cmp	r3, #32
90008c54:	d815      	bhi.n	90008c82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90008c56:	2b00      	cmp	r3, #0
90008c58:	d019      	beq.n	90008c8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
90008c5a:	2b10      	cmp	r3, #16
90008c5c:	d111      	bne.n	90008c82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008c5e:	4b77      	ldr	r3, [pc, #476]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008c62:	4a76      	ldr	r2, [pc, #472]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90008c6a:	e011      	b.n	90008c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c70:	3308      	adds	r3, #8
90008c72:	2102      	movs	r1, #2
90008c74:	4618      	mov	r0, r3
90008c76:	f001 fac5 	bl	9000a204 <RCCEx_PLL2_Config>
90008c7a:	4603      	mov	r3, r0
90008c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90008c80:	e006      	b.n	90008c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008c82:	2301      	movs	r3, #1
90008c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c88:	e002      	b.n	90008c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90008c8a:	bf00      	nop
90008c8c:	e000      	b.n	90008c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90008c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c94:	2b00      	cmp	r3, #0
90008c96:	d10a      	bne.n	90008cae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90008c98:	4b68      	ldr	r3, [pc, #416]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008c9c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90008ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008ca6:	4a65      	ldr	r2, [pc, #404]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008ca8:	430b      	orrs	r3, r1
90008caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008cac:	e003      	b.n	90008cb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cbe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90008cc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90008cc6:	2300      	movs	r3, #0
90008cc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90008ccc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90008cd0:	460b      	mov	r3, r1
90008cd2:	4313      	orrs	r3, r2
90008cd4:	d051      	beq.n	90008d7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008ce0:	d035      	beq.n	90008d4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
90008ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008ce6:	d82e      	bhi.n	90008d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008ce8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90008cec:	d031      	beq.n	90008d52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
90008cee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90008cf2:	d828      	bhi.n	90008d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008cf8:	d01a      	beq.n	90008d30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90008cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008cfe:	d822      	bhi.n	90008d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008d00:	2b00      	cmp	r3, #0
90008d02:	d003      	beq.n	90008d0c <HAL_RCCEx_PeriphCLKConfig+0x498>
90008d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008d08:	d007      	beq.n	90008d1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90008d0a:	e01c      	b.n	90008d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008d0c:	4b4b      	ldr	r3, [pc, #300]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008d10:	4a4a      	ldr	r2, [pc, #296]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008d18:	e01c      	b.n	90008d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d1e:	3308      	adds	r3, #8
90008d20:	2100      	movs	r1, #0
90008d22:	4618      	mov	r0, r3
90008d24:	f001 fa6e 	bl	9000a204 <RCCEx_PLL2_Config>
90008d28:	4603      	mov	r3, r0
90008d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008d2e:	e011      	b.n	90008d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d34:	3328      	adds	r3, #40	@ 0x28
90008d36:	2100      	movs	r1, #0
90008d38:	4618      	mov	r0, r3
90008d3a:	f001 fb15 	bl	9000a368 <RCCEx_PLL3_Config>
90008d3e:	4603      	mov	r3, r0
90008d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008d44:	e006      	b.n	90008d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008d46:	2301      	movs	r3, #1
90008d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d4c:	e002      	b.n	90008d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008d4e:	bf00      	nop
90008d50:	e000      	b.n	90008d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008d52:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d58:	2b00      	cmp	r3, #0
90008d5a:	d10a      	bne.n	90008d72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90008d5c:	4b37      	ldr	r3, [pc, #220]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008d60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90008d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008d6a:	4a34      	ldr	r2, [pc, #208]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008d6c:	430b      	orrs	r3, r1
90008d6e:	6513      	str	r3, [r2, #80]	@ 0x50
90008d70:	e003      	b.n	90008d7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90008d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
90008d86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90008d8a:	2300      	movs	r3, #0
90008d8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008d90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90008d94:	460b      	mov	r3, r1
90008d96:	4313      	orrs	r3, r2
90008d98:	d056      	beq.n	90008e48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008da4:	d033      	beq.n	90008e0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
90008da6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008daa:	d82c      	bhi.n	90008e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008dac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008db0:	d02f      	beq.n	90008e12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90008db2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008db6:	d826      	bhi.n	90008e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008db8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008dbc:	d02b      	beq.n	90008e16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90008dbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008dc2:	d820      	bhi.n	90008e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008dc8:	d012      	beq.n	90008df0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90008dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008dce:	d81a      	bhi.n	90008e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008dd0:	2b00      	cmp	r3, #0
90008dd2:	d022      	beq.n	90008e1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90008dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008dd8:	d115      	bne.n	90008e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dde:	3308      	adds	r3, #8
90008de0:	2101      	movs	r1, #1
90008de2:	4618      	mov	r0, r3
90008de4:	f001 fa0e 	bl	9000a204 <RCCEx_PLL2_Config>
90008de8:	4603      	mov	r3, r0
90008dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008dee:	e015      	b.n	90008e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008df4:	3328      	adds	r3, #40	@ 0x28
90008df6:	2101      	movs	r1, #1
90008df8:	4618      	mov	r0, r3
90008dfa:	f001 fab5 	bl	9000a368 <RCCEx_PLL3_Config>
90008dfe:	4603      	mov	r3, r0
90008e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008e04:	e00a      	b.n	90008e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008e06:	2301      	movs	r3, #1
90008e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008e0c:	e006      	b.n	90008e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008e0e:	bf00      	nop
90008e10:	e004      	b.n	90008e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008e12:	bf00      	nop
90008e14:	e002      	b.n	90008e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008e16:	bf00      	nop
90008e18:	e000      	b.n	90008e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
90008e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e20:	2b00      	cmp	r3, #0
90008e22:	d10d      	bne.n	90008e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90008e24:	4b05      	ldr	r3, [pc, #20]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008e28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008e32:	4a02      	ldr	r2, [pc, #8]	@ (90008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008e34:	430b      	orrs	r3, r1
90008e36:	6513      	str	r3, [r2, #80]	@ 0x50
90008e38:	e006      	b.n	90008e48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90008e3a:	bf00      	nop
90008e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
90008e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90008e58:	2300      	movs	r3, #0
90008e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90008e5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
90008e62:	460b      	mov	r3, r1
90008e64:	4313      	orrs	r3, r2
90008e66:	d055      	beq.n	90008f14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90008e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008e74:	d033      	beq.n	90008ede <HAL_RCCEx_PeriphCLKConfig+0x66a>
90008e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008e7a:	d82c      	bhi.n	90008ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008e80:	d02f      	beq.n	90008ee2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008e86:	d826      	bhi.n	90008ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008e88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008e8c:	d02b      	beq.n	90008ee6 <HAL_RCCEx_PeriphCLKConfig+0x672>
90008e8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008e92:	d820      	bhi.n	90008ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008e98:	d012      	beq.n	90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008e9e:	d81a      	bhi.n	90008ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008ea0:	2b00      	cmp	r3, #0
90008ea2:	d022      	beq.n	90008eea <HAL_RCCEx_PeriphCLKConfig+0x676>
90008ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008ea8:	d115      	bne.n	90008ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eae:	3308      	adds	r3, #8
90008eb0:	2101      	movs	r1, #1
90008eb2:	4618      	mov	r0, r3
90008eb4:	f001 f9a6 	bl	9000a204 <RCCEx_PLL2_Config>
90008eb8:	4603      	mov	r3, r0
90008eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008ebe:	e015      	b.n	90008eec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ec4:	3328      	adds	r3, #40	@ 0x28
90008ec6:	2101      	movs	r1, #1
90008ec8:	4618      	mov	r0, r3
90008eca:	f001 fa4d 	bl	9000a368 <RCCEx_PLL3_Config>
90008ece:	4603      	mov	r3, r0
90008ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008ed4:	e00a      	b.n	90008eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90008ed6:	2301      	movs	r3, #1
90008ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008edc:	e006      	b.n	90008eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008ede:	bf00      	nop
90008ee0:	e004      	b.n	90008eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008ee2:	bf00      	nop
90008ee4:	e002      	b.n	90008eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008ee6:	bf00      	nop
90008ee8:	e000      	b.n	90008eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008eea:	bf00      	nop
    }

    if (ret == HAL_OK)
90008eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ef0:	2b00      	cmp	r3, #0
90008ef2:	d10b      	bne.n	90008f0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008ef4:	4ba3      	ldr	r3, [pc, #652]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008ef8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008f04:	4a9f      	ldr	r2, [pc, #636]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008f06:	430b      	orrs	r3, r1
90008f08:	6593      	str	r3, [r2, #88]	@ 0x58
90008f0a:	e003      	b.n	90008f14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90008f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
90008f24:	2300      	movs	r3, #0
90008f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
90008f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008f2e:	460b      	mov	r3, r1
90008f30:	4313      	orrs	r3, r2
90008f32:	d037      	beq.n	90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
90008f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008f3e:	d00e      	beq.n	90008f5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008f44:	d816      	bhi.n	90008f74 <HAL_RCCEx_PeriphCLKConfig+0x700>
90008f46:	2b00      	cmp	r3, #0
90008f48:	d018      	beq.n	90008f7c <HAL_RCCEx_PeriphCLKConfig+0x708>
90008f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008f4e:	d111      	bne.n	90008f74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008f50:	4b8c      	ldr	r3, [pc, #560]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008f54:	4a8b      	ldr	r2, [pc, #556]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008f5c:	e00f      	b.n	90008f7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f62:	3308      	adds	r3, #8
90008f64:	2101      	movs	r1, #1
90008f66:	4618      	mov	r0, r3
90008f68:	f001 f94c 	bl	9000a204 <RCCEx_PLL2_Config>
90008f6c:	4603      	mov	r3, r0
90008f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008f72:	e004      	b.n	90008f7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008f74:	2301      	movs	r3, #1
90008f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008f7a:	e000      	b.n	90008f7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90008f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
90008f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f82:	2b00      	cmp	r3, #0
90008f84:	d10a      	bne.n	90008f9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90008f86:	4b7f      	ldr	r3, [pc, #508]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008f8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008f94:	4a7b      	ldr	r2, [pc, #492]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008f96:	430b      	orrs	r3, r1
90008f98:	6513      	str	r3, [r2, #80]	@ 0x50
90008f9a:	e003      	b.n	90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90008fb4:	2300      	movs	r3, #0
90008fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90008fba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008fbe:	460b      	mov	r3, r1
90008fc0:	4313      	orrs	r3, r2
90008fc2:	d039      	beq.n	90009038 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008fca:	2b03      	cmp	r3, #3
90008fcc:	d81c      	bhi.n	90009008 <HAL_RCCEx_PeriphCLKConfig+0x794>
90008fce:	a201      	add	r2, pc, #4	@ (adr r2, 90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008fd4:	90009011 	.word	0x90009011
90008fd8:	90008fe5 	.word	0x90008fe5
90008fdc:	90008ff3 	.word	0x90008ff3
90008fe0:	90009011 	.word	0x90009011
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008fe4:	4b67      	ldr	r3, [pc, #412]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008fe8:	4a66      	ldr	r2, [pc, #408]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008ff0:	e00f      	b.n	90009012 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ff6:	3308      	adds	r3, #8
90008ff8:	2102      	movs	r1, #2
90008ffa:	4618      	mov	r0, r3
90008ffc:	f001 f902 	bl	9000a204 <RCCEx_PLL2_Config>
90009000:	4603      	mov	r3, r0
90009002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90009006:	e004      	b.n	90009012 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90009008:	2301      	movs	r3, #1
9000900a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000900e:	e000      	b.n	90009012 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90009010:	bf00      	nop
    }

    if (ret == HAL_OK)
90009012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009016:	2b00      	cmp	r3, #0
90009018:	d10a      	bne.n	90009030 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000901a:	4b5a      	ldr	r3, [pc, #360]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000901c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000901e:	f023 0103 	bic.w	r1, r3, #3
90009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90009028:	4a56      	ldr	r2, [pc, #344]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000902a:	430b      	orrs	r3, r1
9000902c:	64d3      	str	r3, [r2, #76]	@ 0x4c
9000902e:	e003      	b.n	90009038 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90009038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000903c:	e9d3 2300 	ldrd	r2, r3, [r3]
90009040:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
90009044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
90009048:	2300      	movs	r3, #0
9000904a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
9000904e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
90009052:	460b      	mov	r3, r1
90009054:	4313      	orrs	r3, r2
90009056:	f000 809f 	beq.w	90009198 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000905a:	4b4b      	ldr	r3, [pc, #300]	@ (90009188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000905c:	681b      	ldr	r3, [r3, #0]
9000905e:	4a4a      	ldr	r2, [pc, #296]	@ (90009188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90009060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90009064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90009066:	f7fa fccb 	bl	90003a00 <HAL_GetTick>
9000906a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000906e:	e00b      	b.n	90009088 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90009070:	f7fa fcc6 	bl	90003a00 <HAL_GetTick>
90009074:	4602      	mov	r2, r0
90009076:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
9000907a:	1ad3      	subs	r3, r2, r3
9000907c:	2b64      	cmp	r3, #100	@ 0x64
9000907e:	d903      	bls.n	90009088 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90009080:	2303      	movs	r3, #3
90009082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009086:	e005      	b.n	90009094 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90009088:	4b3f      	ldr	r3, [pc, #252]	@ (90009188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000908a:	681b      	ldr	r3, [r3, #0]
9000908c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90009090:	2b00      	cmp	r3, #0
90009092:	d0ed      	beq.n	90009070 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90009094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009098:	2b00      	cmp	r3, #0
9000909a:	d179      	bne.n	90009190 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000909c:	4b39      	ldr	r3, [pc, #228]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000909e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
900090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900090a8:	4053      	eors	r3, r2
900090aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
900090ae:	2b00      	cmp	r3, #0
900090b0:	d015      	beq.n	900090de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
900090b2:	4b34      	ldr	r3, [pc, #208]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900090b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900090b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
900090ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
900090be:	4b31      	ldr	r3, [pc, #196]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900090c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900090c2:	4a30      	ldr	r2, [pc, #192]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900090c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900090c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
900090ca:	4b2e      	ldr	r3, [pc, #184]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900090cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900090ce:	4a2d      	ldr	r2, [pc, #180]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900090d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900090d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
900090d6:	4a2b      	ldr	r2, [pc, #172]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900090d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
900090dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
900090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900090e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900090ea:	d118      	bne.n	9000911e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900090ec:	f7fa fc88 	bl	90003a00 <HAL_GetTick>
900090f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900090f4:	e00d      	b.n	90009112 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900090f6:	f7fa fc83 	bl	90003a00 <HAL_GetTick>
900090fa:	4602      	mov	r2, r0
900090fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90009100:	1ad2      	subs	r2, r2, r3
90009102:	f241 3388 	movw	r3, #5000	@ 0x1388
90009106:	429a      	cmp	r2, r3
90009108:	d903      	bls.n	90009112 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
9000910a:	2303      	movs	r3, #3
9000910c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90009110:	e005      	b.n	9000911e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90009112:	4b1c      	ldr	r3, [pc, #112]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90009114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90009116:	f003 0302 	and.w	r3, r3, #2
9000911a:	2b00      	cmp	r3, #0
9000911c:	d0eb      	beq.n	900090f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
9000911e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009122:	2b00      	cmp	r3, #0
90009124:	d129      	bne.n	9000917a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000912a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000912e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90009132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90009136:	d10e      	bne.n	90009156 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90009138:	4b12      	ldr	r3, [pc, #72]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000913a:	691b      	ldr	r3, [r3, #16]
9000913c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90009140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90009148:	091a      	lsrs	r2, r3, #4
9000914a:	4b10      	ldr	r3, [pc, #64]	@ (9000918c <HAL_RCCEx_PeriphCLKConfig+0x918>)
9000914c:	4013      	ands	r3, r2
9000914e:	4a0d      	ldr	r2, [pc, #52]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90009150:	430b      	orrs	r3, r1
90009152:	6113      	str	r3, [r2, #16]
90009154:	e005      	b.n	90009162 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
90009156:	4b0b      	ldr	r3, [pc, #44]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90009158:	691b      	ldr	r3, [r3, #16]
9000915a:	4a0a      	ldr	r2, [pc, #40]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000915c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90009160:	6113      	str	r3, [r2, #16]
90009162:	4b08      	ldr	r3, [pc, #32]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90009164:	6f19      	ldr	r1, [r3, #112]	@ 0x70
90009166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000916a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000916e:	f3c3 030b 	ubfx	r3, r3, #0, #12
90009172:	4a04      	ldr	r2, [pc, #16]	@ (90009184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90009174:	430b      	orrs	r3, r1
90009176:	6713      	str	r3, [r2, #112]	@ 0x70
90009178:	e00e      	b.n	90009198 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
9000917a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000917e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
90009182:	e009      	b.n	90009198 <HAL_RCCEx_PeriphCLKConfig+0x924>
90009184:	58024400 	.word	0x58024400
90009188:	58024800 	.word	0x58024800
9000918c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90009190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90009198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000919c:	e9d3 2300 	ldrd	r2, r3, [r3]
900091a0:	f002 0301 	and.w	r3, r2, #1
900091a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
900091a8:	2300      	movs	r3, #0
900091aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
900091ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
900091b2:	460b      	mov	r3, r1
900091b4:	4313      	orrs	r3, r2
900091b6:	f000 8089 	beq.w	900092cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
900091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900091c0:	2b28      	cmp	r3, #40	@ 0x28
900091c2:	d86b      	bhi.n	9000929c <HAL_RCCEx_PeriphCLKConfig+0xa28>
900091c4:	a201      	add	r2, pc, #4	@ (adr r2, 900091cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
900091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900091ca:	bf00      	nop
900091cc:	900092a5 	.word	0x900092a5
900091d0:	9000929d 	.word	0x9000929d
900091d4:	9000929d 	.word	0x9000929d
900091d8:	9000929d 	.word	0x9000929d
900091dc:	9000929d 	.word	0x9000929d
900091e0:	9000929d 	.word	0x9000929d
900091e4:	9000929d 	.word	0x9000929d
900091e8:	9000929d 	.word	0x9000929d
900091ec:	90009271 	.word	0x90009271
900091f0:	9000929d 	.word	0x9000929d
900091f4:	9000929d 	.word	0x9000929d
900091f8:	9000929d 	.word	0x9000929d
900091fc:	9000929d 	.word	0x9000929d
90009200:	9000929d 	.word	0x9000929d
90009204:	9000929d 	.word	0x9000929d
90009208:	9000929d 	.word	0x9000929d
9000920c:	90009287 	.word	0x90009287
90009210:	9000929d 	.word	0x9000929d
90009214:	9000929d 	.word	0x9000929d
90009218:	9000929d 	.word	0x9000929d
9000921c:	9000929d 	.word	0x9000929d
90009220:	9000929d 	.word	0x9000929d
90009224:	9000929d 	.word	0x9000929d
90009228:	9000929d 	.word	0x9000929d
9000922c:	900092a5 	.word	0x900092a5
90009230:	9000929d 	.word	0x9000929d
90009234:	9000929d 	.word	0x9000929d
90009238:	9000929d 	.word	0x9000929d
9000923c:	9000929d 	.word	0x9000929d
90009240:	9000929d 	.word	0x9000929d
90009244:	9000929d 	.word	0x9000929d
90009248:	9000929d 	.word	0x9000929d
9000924c:	900092a5 	.word	0x900092a5
90009250:	9000929d 	.word	0x9000929d
90009254:	9000929d 	.word	0x9000929d
90009258:	9000929d 	.word	0x9000929d
9000925c:	9000929d 	.word	0x9000929d
90009260:	9000929d 	.word	0x9000929d
90009264:	9000929d 	.word	0x9000929d
90009268:	9000929d 	.word	0x9000929d
9000926c:	900092a5 	.word	0x900092a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90009270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009274:	3308      	adds	r3, #8
90009276:	2101      	movs	r1, #1
90009278:	4618      	mov	r0, r3
9000927a:	f000 ffc3 	bl	9000a204 <RCCEx_PLL2_Config>
9000927e:	4603      	mov	r3, r0
90009280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90009284:	e00f      	b.n	900092a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90009286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000928a:	3328      	adds	r3, #40	@ 0x28
9000928c:	2101      	movs	r1, #1
9000928e:	4618      	mov	r0, r3
90009290:	f001 f86a 	bl	9000a368 <RCCEx_PLL3_Config>
90009294:	4603      	mov	r3, r0
90009296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000929a:	e004      	b.n	900092a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000929c:	2301      	movs	r3, #1
9000929e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900092a2:	e000      	b.n	900092a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
900092a4:	bf00      	nop
    }

    if (ret == HAL_OK)
900092a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900092aa:	2b00      	cmp	r3, #0
900092ac:	d10a      	bne.n	900092c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
900092ae:	4bbf      	ldr	r3, [pc, #764]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900092b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900092b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
900092b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900092bc:	4abb      	ldr	r2, [pc, #748]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900092be:	430b      	orrs	r3, r1
900092c0:	6553      	str	r3, [r2, #84]	@ 0x54
900092c2:	e003      	b.n	900092cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
900092c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900092c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
900092cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
900092d4:	f002 0302 	and.w	r3, r2, #2
900092d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
900092dc:	2300      	movs	r3, #0
900092de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
900092e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
900092e6:	460b      	mov	r3, r1
900092e8:	4313      	orrs	r3, r2
900092ea:	d041      	beq.n	90009370 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
900092ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900092f2:	2b05      	cmp	r3, #5
900092f4:	d824      	bhi.n	90009340 <HAL_RCCEx_PeriphCLKConfig+0xacc>
900092f6:	a201      	add	r2, pc, #4	@ (adr r2, 900092fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
900092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900092fc:	90009349 	.word	0x90009349
90009300:	90009315 	.word	0x90009315
90009304:	9000932b 	.word	0x9000932b
90009308:	90009349 	.word	0x90009349
9000930c:	90009349 	.word	0x90009349
90009310:	90009349 	.word	0x90009349
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90009314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009318:	3308      	adds	r3, #8
9000931a:	2101      	movs	r1, #1
9000931c:	4618      	mov	r0, r3
9000931e:	f000 ff71 	bl	9000a204 <RCCEx_PLL2_Config>
90009322:	4603      	mov	r3, r0
90009324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90009328:	e00f      	b.n	9000934a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000932a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000932e:	3328      	adds	r3, #40	@ 0x28
90009330:	2101      	movs	r1, #1
90009332:	4618      	mov	r0, r3
90009334:	f001 f818 	bl	9000a368 <RCCEx_PLL3_Config>
90009338:	4603      	mov	r3, r0
9000933a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
9000933e:	e004      	b.n	9000934a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009340:	2301      	movs	r3, #1
90009342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009346:	e000      	b.n	9000934a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90009348:	bf00      	nop
    }

    if (ret == HAL_OK)
9000934a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000934e:	2b00      	cmp	r3, #0
90009350:	d10a      	bne.n	90009368 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90009352:	4b96      	ldr	r3, [pc, #600]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90009354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009356:	f023 0107 	bic.w	r1, r3, #7
9000935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000935e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90009360:	4a92      	ldr	r2, [pc, #584]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90009362:	430b      	orrs	r3, r1
90009364:	6553      	str	r3, [r2, #84]	@ 0x54
90009366:	e003      	b.n	90009370 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000936c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009374:	e9d3 2300 	ldrd	r2, r3, [r3]
90009378:	f002 0304 	and.w	r3, r2, #4
9000937c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90009380:	2300      	movs	r3, #0
90009382:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
90009386:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
9000938a:	460b      	mov	r3, r1
9000938c:	4313      	orrs	r3, r2
9000938e:	d044      	beq.n	9000941a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90009398:	2b05      	cmp	r3, #5
9000939a:	d825      	bhi.n	900093e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
9000939c:	a201      	add	r2, pc, #4	@ (adr r2, 900093a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
9000939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900093a2:	bf00      	nop
900093a4:	900093f1 	.word	0x900093f1
900093a8:	900093bd 	.word	0x900093bd
900093ac:	900093d3 	.word	0x900093d3
900093b0:	900093f1 	.word	0x900093f1
900093b4:	900093f1 	.word	0x900093f1
900093b8:	900093f1 	.word	0x900093f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900093bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900093c0:	3308      	adds	r3, #8
900093c2:	2101      	movs	r1, #1
900093c4:	4618      	mov	r0, r3
900093c6:	f000 ff1d 	bl	9000a204 <RCCEx_PLL2_Config>
900093ca:	4603      	mov	r3, r0
900093cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900093d0:	e00f      	b.n	900093f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900093d6:	3328      	adds	r3, #40	@ 0x28
900093d8:	2101      	movs	r1, #1
900093da:	4618      	mov	r0, r3
900093dc:	f000 ffc4 	bl	9000a368 <RCCEx_PLL3_Config>
900093e0:	4603      	mov	r3, r0
900093e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900093e6:	e004      	b.n	900093f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900093e8:	2301      	movs	r3, #1
900093ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900093ee:	e000      	b.n	900093f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
900093f0:	bf00      	nop
    }

    if (ret == HAL_OK)
900093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900093f6:	2b00      	cmp	r3, #0
900093f8:	d10b      	bne.n	90009412 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
900093fa:	4b6c      	ldr	r3, [pc, #432]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900093fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900093fe:	f023 0107 	bic.w	r1, r3, #7
90009402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000940a:	4a68      	ldr	r2, [pc, #416]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000940c:	430b      	orrs	r3, r1
9000940e:	6593      	str	r3, [r2, #88]	@ 0x58
90009410:	e003      	b.n	9000941a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000941a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000941e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009422:	f002 0320 	and.w	r3, r2, #32
90009426:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
9000942a:	2300      	movs	r3, #0
9000942c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90009430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
90009434:	460b      	mov	r3, r1
90009436:	4313      	orrs	r3, r2
90009438:	d055      	beq.n	900094e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
9000943a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000943e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90009442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90009446:	d033      	beq.n	900094b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90009448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000944c:	d82c      	bhi.n	900094a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000944e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009452:	d02f      	beq.n	900094b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
90009454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009458:	d826      	bhi.n	900094a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000945a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000945e:	d02b      	beq.n	900094b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90009460:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90009464:	d820      	bhi.n	900094a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90009466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000946a:	d012      	beq.n	90009492 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
9000946c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90009470:	d81a      	bhi.n	900094a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90009472:	2b00      	cmp	r3, #0
90009474:	d022      	beq.n	900094bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
90009476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000947a:	d115      	bne.n	900094a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000947c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009480:	3308      	adds	r3, #8
90009482:	2100      	movs	r1, #0
90009484:	4618      	mov	r0, r3
90009486:	f000 febd 	bl	9000a204 <RCCEx_PLL2_Config>
9000948a:	4603      	mov	r3, r0
9000948c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90009490:	e015      	b.n	900094be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009496:	3328      	adds	r3, #40	@ 0x28
90009498:	2102      	movs	r1, #2
9000949a:	4618      	mov	r0, r3
9000949c:	f000 ff64 	bl	9000a368 <RCCEx_PLL3_Config>
900094a0:	4603      	mov	r3, r0
900094a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900094a6:	e00a      	b.n	900094be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900094a8:	2301      	movs	r3, #1
900094aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900094ae:	e006      	b.n	900094be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900094b0:	bf00      	nop
900094b2:	e004      	b.n	900094be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900094b4:	bf00      	nop
900094b6:	e002      	b.n	900094be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900094b8:	bf00      	nop
900094ba:	e000      	b.n	900094be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900094bc:	bf00      	nop
    }

    if (ret == HAL_OK)
900094be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900094c2:	2b00      	cmp	r3, #0
900094c4:	d10b      	bne.n	900094de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
900094c6:	4b39      	ldr	r3, [pc, #228]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900094c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900094ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900094ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900094d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900094d6:	4a35      	ldr	r2, [pc, #212]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900094d8:	430b      	orrs	r3, r1
900094da:	6553      	str	r3, [r2, #84]	@ 0x54
900094dc:	e003      	b.n	900094e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
900094de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900094e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
900094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
900094ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
900094f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
900094f6:	2300      	movs	r3, #0
900094f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
900094fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90009500:	460b      	mov	r3, r1
90009502:	4313      	orrs	r3, r2
90009504:	d058      	beq.n	900095b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000950a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000950e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90009512:	d033      	beq.n	9000957c <HAL_RCCEx_PeriphCLKConfig+0xd08>
90009514:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90009518:	d82c      	bhi.n	90009574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000951a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000951e:	d02f      	beq.n	90009580 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90009520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009524:	d826      	bhi.n	90009574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90009526:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
9000952a:	d02b      	beq.n	90009584 <HAL_RCCEx_PeriphCLKConfig+0xd10>
9000952c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90009530:	d820      	bhi.n	90009574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90009532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90009536:	d012      	beq.n	9000955e <HAL_RCCEx_PeriphCLKConfig+0xcea>
90009538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000953c:	d81a      	bhi.n	90009574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000953e:	2b00      	cmp	r3, #0
90009540:	d022      	beq.n	90009588 <HAL_RCCEx_PeriphCLKConfig+0xd14>
90009542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90009546:	d115      	bne.n	90009574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000954c:	3308      	adds	r3, #8
9000954e:	2100      	movs	r1, #0
90009550:	4618      	mov	r0, r3
90009552:	f000 fe57 	bl	9000a204 <RCCEx_PLL2_Config>
90009556:	4603      	mov	r3, r0
90009558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000955c:	e015      	b.n	9000958a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000955e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009562:	3328      	adds	r3, #40	@ 0x28
90009564:	2102      	movs	r1, #2
90009566:	4618      	mov	r0, r3
90009568:	f000 fefe 	bl	9000a368 <RCCEx_PLL3_Config>
9000956c:	4603      	mov	r3, r0
9000956e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90009572:	e00a      	b.n	9000958a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009574:	2301      	movs	r3, #1
90009576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000957a:	e006      	b.n	9000958a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000957c:	bf00      	nop
9000957e:	e004      	b.n	9000958a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90009580:	bf00      	nop
90009582:	e002      	b.n	9000958a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90009584:	bf00      	nop
90009586:	e000      	b.n	9000958a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90009588:	bf00      	nop
    }

    if (ret == HAL_OK)
9000958a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000958e:	2b00      	cmp	r3, #0
90009590:	d10e      	bne.n	900095b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90009592:	4b06      	ldr	r3, [pc, #24]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90009594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90009596:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
9000959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000959e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900095a2:	4a02      	ldr	r2, [pc, #8]	@ (900095ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900095a4:	430b      	orrs	r3, r1
900095a6:	6593      	str	r3, [r2, #88]	@ 0x58
900095a8:	e006      	b.n	900095b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
900095aa:	bf00      	nop
900095ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900095b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900095b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
900095b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
900095c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
900095c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
900095c8:	2300      	movs	r3, #0
900095ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
900095ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
900095d2:	460b      	mov	r3, r1
900095d4:	4313      	orrs	r3, r2
900095d6:	d055      	beq.n	90009684 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
900095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900095dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900095e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900095e4:	d033      	beq.n	9000964e <HAL_RCCEx_PeriphCLKConfig+0xdda>
900095e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
900095ea:	d82c      	bhi.n	90009646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900095ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900095f0:	d02f      	beq.n	90009652 <HAL_RCCEx_PeriphCLKConfig+0xdde>
900095f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900095f6:	d826      	bhi.n	90009646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900095f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
900095fc:	d02b      	beq.n	90009656 <HAL_RCCEx_PeriphCLKConfig+0xde2>
900095fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90009602:	d820      	bhi.n	90009646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90009604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90009608:	d012      	beq.n	90009630 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000960a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000960e:	d81a      	bhi.n	90009646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90009610:	2b00      	cmp	r3, #0
90009612:	d022      	beq.n	9000965a <HAL_RCCEx_PeriphCLKConfig+0xde6>
90009614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90009618:	d115      	bne.n	90009646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000961e:	3308      	adds	r3, #8
90009620:	2100      	movs	r1, #0
90009622:	4618      	mov	r0, r3
90009624:	f000 fdee 	bl	9000a204 <RCCEx_PLL2_Config>
90009628:	4603      	mov	r3, r0
9000962a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000962e:	e015      	b.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009634:	3328      	adds	r3, #40	@ 0x28
90009636:	2102      	movs	r1, #2
90009638:	4618      	mov	r0, r3
9000963a:	f000 fe95 	bl	9000a368 <RCCEx_PLL3_Config>
9000963e:	4603      	mov	r3, r0
90009640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90009644:	e00a      	b.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009646:	2301      	movs	r3, #1
90009648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000964c:	e006      	b.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000964e:	bf00      	nop
90009650:	e004      	b.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90009652:	bf00      	nop
90009654:	e002      	b.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90009656:	bf00      	nop
90009658:	e000      	b.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000965a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000965c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009660:	2b00      	cmp	r3, #0
90009662:	d10b      	bne.n	9000967c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90009664:	4ba1      	ldr	r3, [pc, #644]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90009668:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
9000966c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009670:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90009674:	4a9d      	ldr	r2, [pc, #628]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009676:	430b      	orrs	r3, r1
90009678:	6593      	str	r3, [r2, #88]	@ 0x58
9000967a:	e003      	b.n	90009684 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000967c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90009684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009688:	e9d3 2300 	ldrd	r2, r3, [r3]
9000968c:	f002 0308 	and.w	r3, r2, #8
90009690:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90009694:	2300      	movs	r3, #0
90009696:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
9000969a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
9000969e:	460b      	mov	r3, r1
900096a0:	4313      	orrs	r3, r2
900096a2:	d01e      	beq.n	900096e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
900096a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900096ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900096b0:	d10c      	bne.n	900096cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096b6:	3328      	adds	r3, #40	@ 0x28
900096b8:	2102      	movs	r1, #2
900096ba:	4618      	mov	r0, r3
900096bc:	f000 fe54 	bl	9000a368 <RCCEx_PLL3_Config>
900096c0:	4603      	mov	r3, r0
900096c2:	2b00      	cmp	r3, #0
900096c4:	d002      	beq.n	900096cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
900096c6:	2301      	movs	r3, #1
900096c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
900096cc:	4b87      	ldr	r3, [pc, #540]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900096ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900096d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
900096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
900096dc:	4a83      	ldr	r2, [pc, #524]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900096de:	430b      	orrs	r3, r1
900096e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
900096ea:	f002 0310 	and.w	r3, r2, #16
900096ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
900096f2:	2300      	movs	r3, #0
900096f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
900096f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
900096fc:	460b      	mov	r3, r1
900096fe:	4313      	orrs	r3, r2
90009700:	d01e      	beq.n	90009740 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90009702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000970a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000970e:	d10c      	bne.n	9000972a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009714:	3328      	adds	r3, #40	@ 0x28
90009716:	2102      	movs	r1, #2
90009718:	4618      	mov	r0, r3
9000971a:	f000 fe25 	bl	9000a368 <RCCEx_PLL3_Config>
9000971e:	4603      	mov	r3, r0
90009720:	2b00      	cmp	r3, #0
90009722:	d002      	beq.n	9000972a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90009724:	2301      	movs	r3, #1
90009726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000972a:	4b70      	ldr	r3, [pc, #448]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000972c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000972e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000973a:	4a6c      	ldr	r2, [pc, #432]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000973c:	430b      	orrs	r3, r1
9000973e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009744:	e9d3 2300 	ldrd	r2, r3, [r3]
90009748:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
9000974c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90009750:	2300      	movs	r3, #0
90009752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90009756:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
9000975a:	460b      	mov	r3, r1
9000975c:	4313      	orrs	r3, r2
9000975e:	d03e      	beq.n	900097de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90009760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90009768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000976c:	d022      	beq.n	900097b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
9000976e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90009772:	d81b      	bhi.n	900097ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
90009774:	2b00      	cmp	r3, #0
90009776:	d003      	beq.n	90009780 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90009778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000977c:	d00b      	beq.n	90009796 <HAL_RCCEx_PeriphCLKConfig+0xf22>
9000977e:	e015      	b.n	900097ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009784:	3308      	adds	r3, #8
90009786:	2100      	movs	r1, #0
90009788:	4618      	mov	r0, r3
9000978a:	f000 fd3b 	bl	9000a204 <RCCEx_PLL2_Config>
9000978e:	4603      	mov	r3, r0
90009790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90009794:	e00f      	b.n	900097b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000979a:	3328      	adds	r3, #40	@ 0x28
9000979c:	2102      	movs	r1, #2
9000979e:	4618      	mov	r0, r3
900097a0:	f000 fde2 	bl	9000a368 <RCCEx_PLL3_Config>
900097a4:	4603      	mov	r3, r0
900097a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
900097aa:	e004      	b.n	900097b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900097ac:	2301      	movs	r3, #1
900097ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900097b2:	e000      	b.n	900097b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
900097b4:	bf00      	nop
    }

    if (ret == HAL_OK)
900097b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900097ba:	2b00      	cmp	r3, #0
900097bc:	d10b      	bne.n	900097d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
900097be:	4b4b      	ldr	r3, [pc, #300]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900097c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900097c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
900097c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900097ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
900097ce:	4a47      	ldr	r2, [pc, #284]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900097d0:	430b      	orrs	r3, r1
900097d2:	6593      	str	r3, [r2, #88]	@ 0x58
900097d4:	e003      	b.n	900097de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
900097d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900097da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
900097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
900097e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
900097ea:	67bb      	str	r3, [r7, #120]	@ 0x78
900097ec:	2300      	movs	r3, #0
900097ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
900097f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
900097f4:	460b      	mov	r3, r1
900097f6:	4313      	orrs	r3, r2
900097f8:	d03b      	beq.n	90009872 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
900097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900097fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009802:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90009806:	d01f      	beq.n	90009848 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90009808:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000980c:	d818      	bhi.n	90009840 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
9000980e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90009812:	d003      	beq.n	9000981c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90009814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90009818:	d007      	beq.n	9000982a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
9000981a:	e011      	b.n	90009840 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000981c:	4b33      	ldr	r3, [pc, #204]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000981e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009820:	4a32      	ldr	r2, [pc, #200]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90009826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90009828:	e00f      	b.n	9000984a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000982a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000982e:	3328      	adds	r3, #40	@ 0x28
90009830:	2101      	movs	r1, #1
90009832:	4618      	mov	r0, r3
90009834:	f000 fd98 	bl	9000a368 <RCCEx_PLL3_Config>
90009838:	4603      	mov	r3, r0
9000983a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
9000983e:	e004      	b.n	9000984a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009840:	2301      	movs	r3, #1
90009842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009846:	e000      	b.n	9000984a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90009848:	bf00      	nop
    }

    if (ret == HAL_OK)
9000984a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000984e:	2b00      	cmp	r3, #0
90009850:	d10b      	bne.n	9000986a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90009852:	4b26      	ldr	r3, [pc, #152]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009856:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000985a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009862:	4a22      	ldr	r2, [pc, #136]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90009864:	430b      	orrs	r3, r1
90009866:	6553      	str	r3, [r2, #84]	@ 0x54
90009868:	e003      	b.n	90009872 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000986a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000986e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90009872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009876:	e9d3 2300 	ldrd	r2, r3, [r3]
9000987a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
9000987e:	673b      	str	r3, [r7, #112]	@ 0x70
90009880:	2300      	movs	r3, #0
90009882:	677b      	str	r3, [r7, #116]	@ 0x74
90009884:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90009888:	460b      	mov	r3, r1
9000988a:	4313      	orrs	r3, r2
9000988c:	d034      	beq.n	900098f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
9000988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90009894:	2b00      	cmp	r3, #0
90009896:	d003      	beq.n	900098a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90009898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000989c:	d007      	beq.n	900098ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
9000989e:	e011      	b.n	900098c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900098a0:	4b12      	ldr	r3, [pc, #72]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900098a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900098a4:	4a11      	ldr	r2, [pc, #68]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900098a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900098aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
900098ac:	e00e      	b.n	900098cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900098b2:	3308      	adds	r3, #8
900098b4:	2102      	movs	r1, #2
900098b6:	4618      	mov	r0, r3
900098b8:	f000 fca4 	bl	9000a204 <RCCEx_PLL2_Config>
900098bc:	4603      	mov	r3, r0
900098be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
900098c2:	e003      	b.n	900098cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
900098c4:	2301      	movs	r3, #1
900098c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900098ca:	bf00      	nop
    }

    if (ret == HAL_OK)
900098cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900098d0:	2b00      	cmp	r3, #0
900098d2:	d10d      	bne.n	900098f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
900098d4:	4b05      	ldr	r3, [pc, #20]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900098d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900098d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
900098dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900098e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900098e2:	4a02      	ldr	r2, [pc, #8]	@ (900098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900098e4:	430b      	orrs	r3, r1
900098e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
900098e8:	e006      	b.n	900098f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
900098ea:	bf00      	nop
900098ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900098f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900098f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
900098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
90009900:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90009904:	66bb      	str	r3, [r7, #104]	@ 0x68
90009906:	2300      	movs	r3, #0
90009908:	66fb      	str	r3, [r7, #108]	@ 0x6c
9000990a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
9000990e:	460b      	mov	r3, r1
90009910:	4313      	orrs	r3, r2
90009912:	d00c      	beq.n	9000992e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009918:	3328      	adds	r3, #40	@ 0x28
9000991a:	2102      	movs	r1, #2
9000991c:	4618      	mov	r0, r3
9000991e:	f000 fd23 	bl	9000a368 <RCCEx_PLL3_Config>
90009922:	4603      	mov	r3, r0
90009924:	2b00      	cmp	r3, #0
90009926:	d002      	beq.n	9000992e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90009928:	2301      	movs	r3, #1
9000992a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009932:	e9d3 2300 	ldrd	r2, r3, [r3]
90009936:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
9000993a:	663b      	str	r3, [r7, #96]	@ 0x60
9000993c:	2300      	movs	r3, #0
9000993e:	667b      	str	r3, [r7, #100]	@ 0x64
90009940:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90009944:	460b      	mov	r3, r1
90009946:	4313      	orrs	r3, r2
90009948:	d038      	beq.n	900099bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
9000994a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000994e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90009952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90009956:	d018      	beq.n	9000998a <HAL_RCCEx_PeriphCLKConfig+0x1116>
90009958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000995c:	d811      	bhi.n	90009982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
9000995e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90009962:	d014      	beq.n	9000998e <HAL_RCCEx_PeriphCLKConfig+0x111a>
90009964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90009968:	d80b      	bhi.n	90009982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
9000996a:	2b00      	cmp	r3, #0
9000996c:	d011      	beq.n	90009992 <HAL_RCCEx_PeriphCLKConfig+0x111e>
9000996e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90009972:	d106      	bne.n	90009982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009974:	4bc3      	ldr	r3, [pc, #780]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009978:	4ac2      	ldr	r2, [pc, #776]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000997a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000997e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90009980:	e008      	b.n	90009994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90009982:	2301      	movs	r3, #1
90009984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009988:	e004      	b.n	90009994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000998a:	bf00      	nop
9000998c:	e002      	b.n	90009994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000998e:	bf00      	nop
90009990:	e000      	b.n	90009994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90009992:	bf00      	nop
    }

    if (ret == HAL_OK)
90009994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009998:	2b00      	cmp	r3, #0
9000999a:	d10b      	bne.n	900099b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000999c:	4bb9      	ldr	r3, [pc, #740]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000999e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900099a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
900099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900099a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
900099ac:	4ab5      	ldr	r2, [pc, #724]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900099ae:	430b      	orrs	r3, r1
900099b0:	6553      	str	r3, [r2, #84]	@ 0x54
900099b2:	e003      	b.n	900099bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
900099b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900099b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
900099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
900099c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
900099c8:	65bb      	str	r3, [r7, #88]	@ 0x58
900099ca:	2300      	movs	r3, #0
900099cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
900099ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
900099d2:	460b      	mov	r3, r1
900099d4:	4313      	orrs	r3, r2
900099d6:	d009      	beq.n	900099ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
900099d8:	4baa      	ldr	r3, [pc, #680]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900099da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900099dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
900099e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900099e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900099e6:	4aa7      	ldr	r2, [pc, #668]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900099e8:	430b      	orrs	r3, r1
900099ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
900099ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
900099f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
900099f8:	653b      	str	r3, [r7, #80]	@ 0x50
900099fa:	2300      	movs	r3, #0
900099fc:	657b      	str	r3, [r7, #84]	@ 0x54
900099fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90009a02:	460b      	mov	r3, r1
90009a04:	4313      	orrs	r3, r2
90009a06:	d00a      	beq.n	90009a1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90009a08:	4b9e      	ldr	r3, [pc, #632]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a0a:	691b      	ldr	r3, [r3, #16]
90009a0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90009a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009a14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90009a18:	4a9a      	ldr	r2, [pc, #616]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a1a:	430b      	orrs	r3, r1
90009a1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
90009a26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90009a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
90009a2c:	2300      	movs	r3, #0
90009a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
90009a30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90009a34:	460b      	mov	r3, r1
90009a36:	4313      	orrs	r3, r2
90009a38:	d009      	beq.n	90009a4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90009a3a:	4b92      	ldr	r3, [pc, #584]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90009a3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90009a48:	4a8e      	ldr	r2, [pc, #568]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a4a:	430b      	orrs	r3, r1
90009a4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
90009a56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90009a5a:	643b      	str	r3, [r7, #64]	@ 0x40
90009a5c:	2300      	movs	r3, #0
90009a5e:	647b      	str	r3, [r7, #68]	@ 0x44
90009a60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90009a64:	460b      	mov	r3, r1
90009a66:	4313      	orrs	r3, r2
90009a68:	d00e      	beq.n	90009a88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90009a6a:	4b86      	ldr	r3, [pc, #536]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a6c:	691b      	ldr	r3, [r3, #16]
90009a6e:	4a85      	ldr	r2, [pc, #532]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90009a74:	6113      	str	r3, [r2, #16]
90009a76:	4b83      	ldr	r3, [pc, #524]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a78:	6919      	ldr	r1, [r3, #16]
90009a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009a7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90009a82:	4a80      	ldr	r2, [pc, #512]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009a84:	430b      	orrs	r3, r1
90009a86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
90009a90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90009a94:	63bb      	str	r3, [r7, #56]	@ 0x38
90009a96:	2300      	movs	r3, #0
90009a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
90009a9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90009a9e:	460b      	mov	r3, r1
90009aa0:	4313      	orrs	r3, r2
90009aa2:	d009      	beq.n	90009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90009aa4:	4b77      	ldr	r3, [pc, #476]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90009aa8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ab2:	4a74      	ldr	r2, [pc, #464]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009ab4:	430b      	orrs	r3, r1
90009ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90009ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
90009ac0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90009ac4:	633b      	str	r3, [r7, #48]	@ 0x30
90009ac6:	2300      	movs	r3, #0
90009ac8:	637b      	str	r3, [r7, #52]	@ 0x34
90009aca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90009ace:	460b      	mov	r3, r1
90009ad0:	4313      	orrs	r3, r2
90009ad2:	d00a      	beq.n	90009aea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90009ad4:	4b6b      	ldr	r3, [pc, #428]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ad8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90009adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90009ae4:	4a67      	ldr	r2, [pc, #412]	@ (90009c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009ae6:	430b      	orrs	r3, r1
90009ae8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90009aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
90009af2:	2100      	movs	r1, #0
90009af4:	62b9      	str	r1, [r7, #40]	@ 0x28
90009af6:	f003 0301 	and.w	r3, r3, #1
90009afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
90009afc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90009b00:	460b      	mov	r3, r1
90009b02:	4313      	orrs	r3, r2
90009b04:	d011      	beq.n	90009b2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009b0a:	3308      	adds	r3, #8
90009b0c:	2100      	movs	r1, #0
90009b0e:	4618      	mov	r0, r3
90009b10:	f000 fb78 	bl	9000a204 <RCCEx_PLL2_Config>
90009b14:	4603      	mov	r3, r0
90009b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009b1e:	2b00      	cmp	r3, #0
90009b20:	d003      	beq.n	90009b2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009b32:	2100      	movs	r1, #0
90009b34:	6239      	str	r1, [r7, #32]
90009b36:	f003 0302 	and.w	r3, r3, #2
90009b3a:	627b      	str	r3, [r7, #36]	@ 0x24
90009b3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90009b40:	460b      	mov	r3, r1
90009b42:	4313      	orrs	r3, r2
90009b44:	d011      	beq.n	90009b6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90009b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009b4a:	3308      	adds	r3, #8
90009b4c:	2101      	movs	r1, #1
90009b4e:	4618      	mov	r0, r3
90009b50:	f000 fb58 	bl	9000a204 <RCCEx_PLL2_Config>
90009b54:	4603      	mov	r3, r0
90009b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009b5e:	2b00      	cmp	r3, #0
90009b60:	d003      	beq.n	90009b6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90009b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009b72:	2100      	movs	r1, #0
90009b74:	61b9      	str	r1, [r7, #24]
90009b76:	f003 0304 	and.w	r3, r3, #4
90009b7a:	61fb      	str	r3, [r7, #28]
90009b7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90009b80:	460b      	mov	r3, r1
90009b82:	4313      	orrs	r3, r2
90009b84:	d011      	beq.n	90009baa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90009b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009b8a:	3308      	adds	r3, #8
90009b8c:	2102      	movs	r1, #2
90009b8e:	4618      	mov	r0, r3
90009b90:	f000 fb38 	bl	9000a204 <RCCEx_PLL2_Config>
90009b94:	4603      	mov	r3, r0
90009b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009b9e:	2b00      	cmp	r3, #0
90009ba0:	d003      	beq.n	90009baa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90009baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
90009bb2:	2100      	movs	r1, #0
90009bb4:	6139      	str	r1, [r7, #16]
90009bb6:	f003 0308 	and.w	r3, r3, #8
90009bba:	617b      	str	r3, [r7, #20]
90009bbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90009bc0:	460b      	mov	r3, r1
90009bc2:	4313      	orrs	r3, r2
90009bc4:	d011      	beq.n	90009bea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90009bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009bca:	3328      	adds	r3, #40	@ 0x28
90009bcc:	2100      	movs	r1, #0
90009bce:	4618      	mov	r0, r3
90009bd0:	f000 fbca 	bl	9000a368 <RCCEx_PLL3_Config>
90009bd4:	4603      	mov	r3, r0
90009bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90009bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009bde:	2b00      	cmp	r3, #0
90009be0:	d003      	beq.n	90009bea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90009bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
90009bf2:	2100      	movs	r1, #0
90009bf4:	60b9      	str	r1, [r7, #8]
90009bf6:	f003 0310 	and.w	r3, r3, #16
90009bfa:	60fb      	str	r3, [r7, #12]
90009bfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90009c00:	460b      	mov	r3, r1
90009c02:	4313      	orrs	r3, r2
90009c04:	d011      	beq.n	90009c2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90009c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009c0a:	3328      	adds	r3, #40	@ 0x28
90009c0c:	2101      	movs	r1, #1
90009c0e:	4618      	mov	r0, r3
90009c10:	f000 fbaa 	bl	9000a368 <RCCEx_PLL3_Config>
90009c14:	4603      	mov	r3, r0
90009c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009c1e:	2b00      	cmp	r3, #0
90009c20:	d003      	beq.n	90009c2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90009c32:	2100      	movs	r1, #0
90009c34:	6039      	str	r1, [r7, #0]
90009c36:	f003 0320 	and.w	r3, r3, #32
90009c3a:	607b      	str	r3, [r7, #4]
90009c3c:	e9d7 1200 	ldrd	r1, r2, [r7]
90009c40:	460b      	mov	r3, r1
90009c42:	4313      	orrs	r3, r2
90009c44:	d011      	beq.n	90009c6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009c4a:	3328      	adds	r3, #40	@ 0x28
90009c4c:	2102      	movs	r1, #2
90009c4e:	4618      	mov	r0, r3
90009c50:	f000 fb8a 	bl	9000a368 <RCCEx_PLL3_Config>
90009c54:	4603      	mov	r3, r0
90009c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009c5e:	2b00      	cmp	r3, #0
90009c60:	d003      	beq.n	90009c6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90009c6a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90009c6e:	2b00      	cmp	r3, #0
90009c70:	d101      	bne.n	90009c76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90009c72:	2300      	movs	r3, #0
90009c74:	e000      	b.n	90009c78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90009c76:	2301      	movs	r3, #1
}
90009c78:	4618      	mov	r0, r3
90009c7a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90009c7e:	46bd      	mov	sp, r7
90009c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90009c84:	58024400 	.word	0x58024400

90009c88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90009c88:	b580      	push	{r7, lr}
90009c8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90009c8c:	f7fe fd96 	bl	900087bc <HAL_RCC_GetHCLKFreq>
90009c90:	4602      	mov	r2, r0
90009c92:	4b06      	ldr	r3, [pc, #24]	@ (90009cac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90009c94:	6a1b      	ldr	r3, [r3, #32]
90009c96:	091b      	lsrs	r3, r3, #4
90009c98:	f003 0307 	and.w	r3, r3, #7
90009c9c:	4904      	ldr	r1, [pc, #16]	@ (90009cb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90009c9e:	5ccb      	ldrb	r3, [r1, r3]
90009ca0:	f003 031f 	and.w	r3, r3, #31
90009ca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90009ca8:	4618      	mov	r0, r3
90009caa:	bd80      	pop	{r7, pc}
90009cac:	58024400 	.word	0x58024400
90009cb0:	9000dc4c 	.word	0x9000dc4c

90009cb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90009cb4:	b480      	push	{r7}
90009cb6:	b089      	sub	sp, #36	@ 0x24
90009cb8:	af00      	add	r7, sp, #0
90009cba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009cbc:	4ba1      	ldr	r3, [pc, #644]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009cc0:	f003 0303 	and.w	r3, r3, #3
90009cc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90009cc6:	4b9f      	ldr	r3, [pc, #636]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009cca:	0b1b      	lsrs	r3, r3, #12
90009ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009cd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90009cd2:	4b9c      	ldr	r3, [pc, #624]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009cd6:	091b      	lsrs	r3, r3, #4
90009cd8:	f003 0301 	and.w	r3, r3, #1
90009cdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90009cde:	4b99      	ldr	r3, [pc, #612]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90009ce2:	08db      	lsrs	r3, r3, #3
90009ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009ce8:	693a      	ldr	r2, [r7, #16]
90009cea:	fb02 f303 	mul.w	r3, r2, r3
90009cee:	ee07 3a90 	vmov	s15, r3
90009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90009cfa:	697b      	ldr	r3, [r7, #20]
90009cfc:	2b00      	cmp	r3, #0
90009cfe:	f000 8111 	beq.w	90009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90009d02:	69bb      	ldr	r3, [r7, #24]
90009d04:	2b02      	cmp	r3, #2
90009d06:	f000 8083 	beq.w	90009e10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90009d0a:	69bb      	ldr	r3, [r7, #24]
90009d0c:	2b02      	cmp	r3, #2
90009d0e:	f200 80a1 	bhi.w	90009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90009d12:	69bb      	ldr	r3, [r7, #24]
90009d14:	2b00      	cmp	r3, #0
90009d16:	d003      	beq.n	90009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90009d18:	69bb      	ldr	r3, [r7, #24]
90009d1a:	2b01      	cmp	r3, #1
90009d1c:	d056      	beq.n	90009dcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90009d1e:	e099      	b.n	90009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009d20:	4b88      	ldr	r3, [pc, #544]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009d22:	681b      	ldr	r3, [r3, #0]
90009d24:	f003 0320 	and.w	r3, r3, #32
90009d28:	2b00      	cmp	r3, #0
90009d2a:	d02d      	beq.n	90009d88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009d2c:	4b85      	ldr	r3, [pc, #532]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009d2e:	681b      	ldr	r3, [r3, #0]
90009d30:	08db      	lsrs	r3, r3, #3
90009d32:	f003 0303 	and.w	r3, r3, #3
90009d36:	4a84      	ldr	r2, [pc, #528]	@ (90009f48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90009d38:	fa22 f303 	lsr.w	r3, r2, r3
90009d3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009d3e:	68bb      	ldr	r3, [r7, #8]
90009d40:	ee07 3a90 	vmov	s15, r3
90009d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009d48:	697b      	ldr	r3, [r7, #20]
90009d4a:	ee07 3a90 	vmov	s15, r3
90009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009d56:	4b7b      	ldr	r3, [pc, #492]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009d5e:	ee07 3a90 	vmov	s15, r3
90009d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009d66:	ed97 6a03 	vldr	s12, [r7, #12]
90009d6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009d82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009d86:	e087      	b.n	90009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009d88:	697b      	ldr	r3, [r7, #20]
90009d8a:	ee07 3a90 	vmov	s15, r3
90009d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009d92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90009d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009d9a:	4b6a      	ldr	r3, [pc, #424]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009da2:	ee07 3a90 	vmov	s15, r3
90009da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009daa:	ed97 6a03 	vldr	s12, [r7, #12]
90009dae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
90009dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009dca:	e065      	b.n	90009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009dcc:	697b      	ldr	r3, [r7, #20]
90009dce:	ee07 3a90 	vmov	s15, r3
90009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90009dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009dde:	4b59      	ldr	r3, [pc, #356]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009de6:	ee07 3a90 	vmov	s15, r3
90009dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009dee:	ed97 6a03 	vldr	s12, [r7, #12]
90009df2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009e06:	ee67 7a27 	vmul.f32	s15, s14, s15
90009e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009e0e:	e043      	b.n	90009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009e10:	697b      	ldr	r3, [r7, #20]
90009e12:	ee07 3a90 	vmov	s15, r3
90009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90009e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009e22:	4b48      	ldr	r3, [pc, #288]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009e2a:	ee07 3a90 	vmov	s15, r3
90009e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009e32:	ed97 6a03 	vldr	s12, [r7, #12]
90009e36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
90009e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009e52:	e021      	b.n	90009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009e54:	697b      	ldr	r3, [r7, #20]
90009e56:	ee07 3a90 	vmov	s15, r3
90009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90009e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009e66:	4b37      	ldr	r3, [pc, #220]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009e6e:	ee07 3a90 	vmov	s15, r3
90009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009e76:	ed97 6a03 	vldr	s12, [r7, #12]
90009e7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009e96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90009e98:	4b2a      	ldr	r3, [pc, #168]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009e9c:	0a5b      	lsrs	r3, r3, #9
90009e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009ea2:	ee07 3a90 	vmov	s15, r3
90009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009eae:	ee37 7a87 	vadd.f32	s14, s15, s14
90009eb2:	edd7 6a07 	vldr	s13, [r7, #28]
90009eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009ebe:	ee17 2a90 	vmov	r2, s15
90009ec2:	687b      	ldr	r3, [r7, #4]
90009ec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
90009ec6:	4b1f      	ldr	r3, [pc, #124]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009eca:	0c1b      	lsrs	r3, r3, #16
90009ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009ed0:	ee07 3a90 	vmov	s15, r3
90009ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009edc:	ee37 7a87 	vadd.f32	s14, s15, s14
90009ee0:	edd7 6a07 	vldr	s13, [r7, #28]
90009ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009eec:	ee17 2a90 	vmov	r2, s15
90009ef0:	687b      	ldr	r3, [r7, #4]
90009ef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90009ef4:	4b13      	ldr	r3, [pc, #76]	@ (90009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009ef8:	0e1b      	lsrs	r3, r3, #24
90009efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009efe:	ee07 3a90 	vmov	s15, r3
90009f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
90009f0e:	edd7 6a07 	vldr	s13, [r7, #28]
90009f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009f1a:	ee17 2a90 	vmov	r2, s15
90009f1e:	687b      	ldr	r3, [r7, #4]
90009f20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
90009f22:	e008      	b.n	90009f36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
90009f24:	687b      	ldr	r3, [r7, #4]
90009f26:	2200      	movs	r2, #0
90009f28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90009f2a:	687b      	ldr	r3, [r7, #4]
90009f2c:	2200      	movs	r2, #0
90009f2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009f30:	687b      	ldr	r3, [r7, #4]
90009f32:	2200      	movs	r2, #0
90009f34:	609a      	str	r2, [r3, #8]
}
90009f36:	bf00      	nop
90009f38:	3724      	adds	r7, #36	@ 0x24
90009f3a:	46bd      	mov	sp, r7
90009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f40:	4770      	bx	lr
90009f42:	bf00      	nop
90009f44:	58024400 	.word	0x58024400
90009f48:	03d09000 	.word	0x03d09000
90009f4c:	46000000 	.word	0x46000000
90009f50:	4c742400 	.word	0x4c742400
90009f54:	4a742400 	.word	0x4a742400
90009f58:	4bbebc20 	.word	0x4bbebc20

90009f5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90009f5c:	b480      	push	{r7}
90009f5e:	b089      	sub	sp, #36	@ 0x24
90009f60:	af00      	add	r7, sp, #0
90009f62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009f64:	4ba1      	ldr	r3, [pc, #644]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009f68:	f003 0303 	and.w	r3, r3, #3
90009f6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
90009f6e:	4b9f      	ldr	r3, [pc, #636]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009f72:	0d1b      	lsrs	r3, r3, #20
90009f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009f78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90009f7a:	4b9c      	ldr	r3, [pc, #624]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009f7e:	0a1b      	lsrs	r3, r3, #8
90009f80:	f003 0301 	and.w	r3, r3, #1
90009f84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
90009f86:	4b99      	ldr	r3, [pc, #612]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90009f8a:	08db      	lsrs	r3, r3, #3
90009f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009f90:	693a      	ldr	r2, [r7, #16]
90009f92:	fb02 f303 	mul.w	r3, r2, r3
90009f96:	ee07 3a90 	vmov	s15, r3
90009f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009f9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90009fa2:	697b      	ldr	r3, [r7, #20]
90009fa4:	2b00      	cmp	r3, #0
90009fa6:	f000 8111 	beq.w	9000a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90009faa:	69bb      	ldr	r3, [r7, #24]
90009fac:	2b02      	cmp	r3, #2
90009fae:	f000 8083 	beq.w	9000a0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90009fb2:	69bb      	ldr	r3, [r7, #24]
90009fb4:	2b02      	cmp	r3, #2
90009fb6:	f200 80a1 	bhi.w	9000a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90009fba:	69bb      	ldr	r3, [r7, #24]
90009fbc:	2b00      	cmp	r3, #0
90009fbe:	d003      	beq.n	90009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009fc0:	69bb      	ldr	r3, [r7, #24]
90009fc2:	2b01      	cmp	r3, #1
90009fc4:	d056      	beq.n	9000a074 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90009fc6:	e099      	b.n	9000a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009fc8:	4b88      	ldr	r3, [pc, #544]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009fca:	681b      	ldr	r3, [r3, #0]
90009fcc:	f003 0320 	and.w	r3, r3, #32
90009fd0:	2b00      	cmp	r3, #0
90009fd2:	d02d      	beq.n	9000a030 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009fd4:	4b85      	ldr	r3, [pc, #532]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009fd6:	681b      	ldr	r3, [r3, #0]
90009fd8:	08db      	lsrs	r3, r3, #3
90009fda:	f003 0303 	and.w	r3, r3, #3
90009fde:	4a84      	ldr	r2, [pc, #528]	@ (9000a1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90009fe0:	fa22 f303 	lsr.w	r3, r2, r3
90009fe4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009fe6:	68bb      	ldr	r3, [r7, #8]
90009fe8:	ee07 3a90 	vmov	s15, r3
90009fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009ff0:	697b      	ldr	r3, [r7, #20]
90009ff2:	ee07 3a90 	vmov	s15, r3
90009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009ffe:	4b7b      	ldr	r3, [pc, #492]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a002:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a006:	ee07 3a90 	vmov	s15, r3
9000a00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a00e:	ed97 6a03 	vldr	s12, [r7, #12]
9000a012:	eddf 5a78 	vldr	s11, [pc, #480]	@ 9000a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a016:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a022:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a026:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a02a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
9000a02e:	e087      	b.n	9000a140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000a030:	697b      	ldr	r3, [r7, #20]
9000a032:	ee07 3a90 	vmov	s15, r3
9000a036:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a03a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 9000a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
9000a03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a042:	4b6a      	ldr	r3, [pc, #424]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a046:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a04a:	ee07 3a90 	vmov	s15, r3
9000a04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a052:	ed97 6a03 	vldr	s12, [r7, #12]
9000a056:	eddf 5a67 	vldr	s11, [pc, #412]	@ 9000a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a066:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a06a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a06e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000a072:	e065      	b.n	9000a140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000a074:	697b      	ldr	r3, [r7, #20]
9000a076:	ee07 3a90 	vmov	s15, r3
9000a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a07e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 9000a1fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a086:	4b59      	ldr	r3, [pc, #356]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a08e:	ee07 3a90 	vmov	s15, r3
9000a092:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a096:	ed97 6a03 	vldr	s12, [r7, #12]
9000a09a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 9000a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000a0b6:	e043      	b.n	9000a140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000a0b8:	697b      	ldr	r3, [r7, #20]
9000a0ba:	ee07 3a90 	vmov	s15, r3
9000a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a0c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 9000a200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
9000a0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a0ca:	4b48      	ldr	r3, [pc, #288]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a0d2:	ee07 3a90 	vmov	s15, r3
9000a0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a0da:	ed97 6a03 	vldr	s12, [r7, #12]
9000a0de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 9000a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a0ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000a0fa:	e021      	b.n	9000a140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000a0fc:	697b      	ldr	r3, [r7, #20]
9000a0fe:	ee07 3a90 	vmov	s15, r3
9000a102:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a106:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 9000a1fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000a10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a10e:	4b37      	ldr	r3, [pc, #220]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a116:	ee07 3a90 	vmov	s15, r3
9000a11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a11e:	ed97 6a03 	vldr	s12, [r7, #12]
9000a122:	eddf 5a34 	vldr	s11, [pc, #208]	@ 9000a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a126:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a132:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a136:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000a13e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000a140:	4b2a      	ldr	r3, [pc, #168]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a144:	0a5b      	lsrs	r3, r3, #9
9000a146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000a14a:	ee07 3a90 	vmov	s15, r3
9000a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000a156:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a15a:	edd7 6a07 	vldr	s13, [r7, #28]
9000a15e:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a166:	ee17 2a90 	vmov	r2, s15
9000a16a:	687b      	ldr	r3, [r7, #4]
9000a16c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
9000a16e:	4b1f      	ldr	r3, [pc, #124]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a172:	0c1b      	lsrs	r3, r3, #16
9000a174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000a178:	ee07 3a90 	vmov	s15, r3
9000a17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a180:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000a184:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a188:	edd7 6a07 	vldr	s13, [r7, #28]
9000a18c:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a194:	ee17 2a90 	vmov	r2, s15
9000a198:	687b      	ldr	r3, [r7, #4]
9000a19a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000a19c:	4b13      	ldr	r3, [pc, #76]	@ (9000a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000a1a0:	0e1b      	lsrs	r3, r3, #24
9000a1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000a1a6:	ee07 3a90 	vmov	s15, r3
9000a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a1ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000a1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a1b6:	edd7 6a07 	vldr	s13, [r7, #28]
9000a1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a1c2:	ee17 2a90 	vmov	r2, s15
9000a1c6:	687b      	ldr	r3, [r7, #4]
9000a1c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
9000a1ca:	e008      	b.n	9000a1de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
9000a1cc:	687b      	ldr	r3, [r7, #4]
9000a1ce:	2200      	movs	r2, #0
9000a1d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000a1d2:	687b      	ldr	r3, [r7, #4]
9000a1d4:	2200      	movs	r2, #0
9000a1d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
9000a1d8:	687b      	ldr	r3, [r7, #4]
9000a1da:	2200      	movs	r2, #0
9000a1dc:	609a      	str	r2, [r3, #8]
}
9000a1de:	bf00      	nop
9000a1e0:	3724      	adds	r7, #36	@ 0x24
9000a1e2:	46bd      	mov	sp, r7
9000a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a1e8:	4770      	bx	lr
9000a1ea:	bf00      	nop
9000a1ec:	58024400 	.word	0x58024400
9000a1f0:	03d09000 	.word	0x03d09000
9000a1f4:	46000000 	.word	0x46000000
9000a1f8:	4c742400 	.word	0x4c742400
9000a1fc:	4a742400 	.word	0x4a742400
9000a200:	4bbebc20 	.word	0x4bbebc20

9000a204 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000a204:	b580      	push	{r7, lr}
9000a206:	b084      	sub	sp, #16
9000a208:	af00      	add	r7, sp, #0
9000a20a:	6078      	str	r0, [r7, #4]
9000a20c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000a20e:	2300      	movs	r3, #0
9000a210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000a212:	4b53      	ldr	r3, [pc, #332]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a216:	f003 0303 	and.w	r3, r3, #3
9000a21a:	2b03      	cmp	r3, #3
9000a21c:	d101      	bne.n	9000a222 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
9000a21e:	2301      	movs	r3, #1
9000a220:	e099      	b.n	9000a356 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000a222:	4b4f      	ldr	r3, [pc, #316]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a224:	681b      	ldr	r3, [r3, #0]
9000a226:	4a4e      	ldr	r2, [pc, #312]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a228:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
9000a22c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a22e:	f7f9 fbe7 	bl	90003a00 <HAL_GetTick>
9000a232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000a234:	e008      	b.n	9000a248 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000a236:	f7f9 fbe3 	bl	90003a00 <HAL_GetTick>
9000a23a:	4602      	mov	r2, r0
9000a23c:	68bb      	ldr	r3, [r7, #8]
9000a23e:	1ad3      	subs	r3, r2, r3
9000a240:	2b02      	cmp	r3, #2
9000a242:	d901      	bls.n	9000a248 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000a244:	2303      	movs	r3, #3
9000a246:	e086      	b.n	9000a356 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000a248:	4b45      	ldr	r3, [pc, #276]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a24a:	681b      	ldr	r3, [r3, #0]
9000a24c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000a250:	2b00      	cmp	r3, #0
9000a252:	d1f0      	bne.n	9000a236 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000a254:	4b42      	ldr	r3, [pc, #264]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a258:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
9000a25c:	687b      	ldr	r3, [r7, #4]
9000a25e:	681b      	ldr	r3, [r3, #0]
9000a260:	031b      	lsls	r3, r3, #12
9000a262:	493f      	ldr	r1, [pc, #252]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a264:	4313      	orrs	r3, r2
9000a266:	628b      	str	r3, [r1, #40]	@ 0x28
9000a268:	687b      	ldr	r3, [r7, #4]
9000a26a:	685b      	ldr	r3, [r3, #4]
9000a26c:	3b01      	subs	r3, #1
9000a26e:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000a272:	687b      	ldr	r3, [r7, #4]
9000a274:	689b      	ldr	r3, [r3, #8]
9000a276:	3b01      	subs	r3, #1
9000a278:	025b      	lsls	r3, r3, #9
9000a27a:	b29b      	uxth	r3, r3
9000a27c:	431a      	orrs	r2, r3
9000a27e:	687b      	ldr	r3, [r7, #4]
9000a280:	68db      	ldr	r3, [r3, #12]
9000a282:	3b01      	subs	r3, #1
9000a284:	041b      	lsls	r3, r3, #16
9000a286:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000a28a:	431a      	orrs	r2, r3
9000a28c:	687b      	ldr	r3, [r7, #4]
9000a28e:	691b      	ldr	r3, [r3, #16]
9000a290:	3b01      	subs	r3, #1
9000a292:	061b      	lsls	r3, r3, #24
9000a294:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000a298:	4931      	ldr	r1, [pc, #196]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a29a:	4313      	orrs	r3, r2
9000a29c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000a29e:	4b30      	ldr	r3, [pc, #192]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a2a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000a2a6:	687b      	ldr	r3, [r7, #4]
9000a2a8:	695b      	ldr	r3, [r3, #20]
9000a2aa:	492d      	ldr	r1, [pc, #180]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2ac:	4313      	orrs	r3, r2
9000a2ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000a2b0:	4b2b      	ldr	r3, [pc, #172]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a2b4:	f023 0220 	bic.w	r2, r3, #32
9000a2b8:	687b      	ldr	r3, [r7, #4]
9000a2ba:	699b      	ldr	r3, [r3, #24]
9000a2bc:	4928      	ldr	r1, [pc, #160]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2be:	4313      	orrs	r3, r2
9000a2c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
9000a2c2:	4b27      	ldr	r3, [pc, #156]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a2c6:	4a26      	ldr	r2, [pc, #152]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2c8:	f023 0310 	bic.w	r3, r3, #16
9000a2cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000a2ce:	4b24      	ldr	r3, [pc, #144]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a2d2:	4b24      	ldr	r3, [pc, #144]	@ (9000a364 <RCCEx_PLL2_Config+0x160>)
9000a2d4:	4013      	ands	r3, r2
9000a2d6:	687a      	ldr	r2, [r7, #4]
9000a2d8:	69d2      	ldr	r2, [r2, #28]
9000a2da:	00d2      	lsls	r2, r2, #3
9000a2dc:	4920      	ldr	r1, [pc, #128]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2de:	4313      	orrs	r3, r2
9000a2e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000a2e2:	4b1f      	ldr	r3, [pc, #124]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a2e6:	4a1e      	ldr	r2, [pc, #120]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2e8:	f043 0310 	orr.w	r3, r3, #16
9000a2ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000a2ee:	683b      	ldr	r3, [r7, #0]
9000a2f0:	2b00      	cmp	r3, #0
9000a2f2:	d106      	bne.n	9000a302 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000a2f4:	4b1a      	ldr	r3, [pc, #104]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a2f8:	4a19      	ldr	r2, [pc, #100]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a2fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
9000a2fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a300:	e00f      	b.n	9000a322 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000a302:	683b      	ldr	r3, [r7, #0]
9000a304:	2b01      	cmp	r3, #1
9000a306:	d106      	bne.n	9000a316 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000a308:	4b15      	ldr	r3, [pc, #84]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a30c:	4a14      	ldr	r2, [pc, #80]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a30e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000a312:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a314:	e005      	b.n	9000a322 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000a316:	4b12      	ldr	r3, [pc, #72]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a31a:	4a11      	ldr	r2, [pc, #68]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a31c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
9000a320:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000a322:	4b0f      	ldr	r3, [pc, #60]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a324:	681b      	ldr	r3, [r3, #0]
9000a326:	4a0e      	ldr	r2, [pc, #56]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a328:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
9000a32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a32e:	f7f9 fb67 	bl	90003a00 <HAL_GetTick>
9000a332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a334:	e008      	b.n	9000a348 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000a336:	f7f9 fb63 	bl	90003a00 <HAL_GetTick>
9000a33a:	4602      	mov	r2, r0
9000a33c:	68bb      	ldr	r3, [r7, #8]
9000a33e:	1ad3      	subs	r3, r2, r3
9000a340:	2b02      	cmp	r3, #2
9000a342:	d901      	bls.n	9000a348 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000a344:	2303      	movs	r3, #3
9000a346:	e006      	b.n	9000a356 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a348:	4b05      	ldr	r3, [pc, #20]	@ (9000a360 <RCCEx_PLL2_Config+0x15c>)
9000a34a:	681b      	ldr	r3, [r3, #0]
9000a34c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000a350:	2b00      	cmp	r3, #0
9000a352:	d0f0      	beq.n	9000a336 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000a354:	7bfb      	ldrb	r3, [r7, #15]
}
9000a356:	4618      	mov	r0, r3
9000a358:	3710      	adds	r7, #16
9000a35a:	46bd      	mov	sp, r7
9000a35c:	bd80      	pop	{r7, pc}
9000a35e:	bf00      	nop
9000a360:	58024400 	.word	0x58024400
9000a364:	ffff0007 	.word	0xffff0007

9000a368 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000a368:	b580      	push	{r7, lr}
9000a36a:	b084      	sub	sp, #16
9000a36c:	af00      	add	r7, sp, #0
9000a36e:	6078      	str	r0, [r7, #4]
9000a370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000a372:	2300      	movs	r3, #0
9000a374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000a376:	4b53      	ldr	r3, [pc, #332]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a37a:	f003 0303 	and.w	r3, r3, #3
9000a37e:	2b03      	cmp	r3, #3
9000a380:	d101      	bne.n	9000a386 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000a382:	2301      	movs	r3, #1
9000a384:	e099      	b.n	9000a4ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000a386:	4b4f      	ldr	r3, [pc, #316]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a388:	681b      	ldr	r3, [r3, #0]
9000a38a:	4a4e      	ldr	r2, [pc, #312]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a38c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
9000a390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a392:	f7f9 fb35 	bl	90003a00 <HAL_GetTick>
9000a396:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a398:	e008      	b.n	9000a3ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000a39a:	f7f9 fb31 	bl	90003a00 <HAL_GetTick>
9000a39e:	4602      	mov	r2, r0
9000a3a0:	68bb      	ldr	r3, [r7, #8]
9000a3a2:	1ad3      	subs	r3, r2, r3
9000a3a4:	2b02      	cmp	r3, #2
9000a3a6:	d901      	bls.n	9000a3ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000a3a8:	2303      	movs	r3, #3
9000a3aa:	e086      	b.n	9000a4ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a3ac:	4b45      	ldr	r3, [pc, #276]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a3ae:	681b      	ldr	r3, [r3, #0]
9000a3b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000a3b4:	2b00      	cmp	r3, #0
9000a3b6:	d1f0      	bne.n	9000a39a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000a3b8:	4b42      	ldr	r3, [pc, #264]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a3bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
9000a3c0:	687b      	ldr	r3, [r7, #4]
9000a3c2:	681b      	ldr	r3, [r3, #0]
9000a3c4:	051b      	lsls	r3, r3, #20
9000a3c6:	493f      	ldr	r1, [pc, #252]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a3c8:	4313      	orrs	r3, r2
9000a3ca:	628b      	str	r3, [r1, #40]	@ 0x28
9000a3cc:	687b      	ldr	r3, [r7, #4]
9000a3ce:	685b      	ldr	r3, [r3, #4]
9000a3d0:	3b01      	subs	r3, #1
9000a3d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000a3d6:	687b      	ldr	r3, [r7, #4]
9000a3d8:	689b      	ldr	r3, [r3, #8]
9000a3da:	3b01      	subs	r3, #1
9000a3dc:	025b      	lsls	r3, r3, #9
9000a3de:	b29b      	uxth	r3, r3
9000a3e0:	431a      	orrs	r2, r3
9000a3e2:	687b      	ldr	r3, [r7, #4]
9000a3e4:	68db      	ldr	r3, [r3, #12]
9000a3e6:	3b01      	subs	r3, #1
9000a3e8:	041b      	lsls	r3, r3, #16
9000a3ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000a3ee:	431a      	orrs	r2, r3
9000a3f0:	687b      	ldr	r3, [r7, #4]
9000a3f2:	691b      	ldr	r3, [r3, #16]
9000a3f4:	3b01      	subs	r3, #1
9000a3f6:	061b      	lsls	r3, r3, #24
9000a3f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000a3fc:	4931      	ldr	r1, [pc, #196]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a3fe:	4313      	orrs	r3, r2
9000a400:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000a402:	4b30      	ldr	r3, [pc, #192]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a406:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
9000a40a:	687b      	ldr	r3, [r7, #4]
9000a40c:	695b      	ldr	r3, [r3, #20]
9000a40e:	492d      	ldr	r1, [pc, #180]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a410:	4313      	orrs	r3, r2
9000a412:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000a414:	4b2b      	ldr	r3, [pc, #172]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a418:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
9000a41c:	687b      	ldr	r3, [r7, #4]
9000a41e:	699b      	ldr	r3, [r3, #24]
9000a420:	4928      	ldr	r1, [pc, #160]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a422:	4313      	orrs	r3, r2
9000a424:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000a426:	4b27      	ldr	r3, [pc, #156]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a42a:	4a26      	ldr	r2, [pc, #152]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a42c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
9000a430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000a432:	4b24      	ldr	r3, [pc, #144]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a436:	4b24      	ldr	r3, [pc, #144]	@ (9000a4c8 <RCCEx_PLL3_Config+0x160>)
9000a438:	4013      	ands	r3, r2
9000a43a:	687a      	ldr	r2, [r7, #4]
9000a43c:	69d2      	ldr	r2, [r2, #28]
9000a43e:	00d2      	lsls	r2, r2, #3
9000a440:	4920      	ldr	r1, [pc, #128]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a442:	4313      	orrs	r3, r2
9000a444:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000a446:	4b1f      	ldr	r3, [pc, #124]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a44a:	4a1e      	ldr	r2, [pc, #120]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a44c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000a450:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000a452:	683b      	ldr	r3, [r7, #0]
9000a454:	2b00      	cmp	r3, #0
9000a456:	d106      	bne.n	9000a466 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000a458:	4b1a      	ldr	r3, [pc, #104]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a45c:	4a19      	ldr	r2, [pc, #100]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a45e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000a462:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a464:	e00f      	b.n	9000a486 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000a466:	683b      	ldr	r3, [r7, #0]
9000a468:	2b01      	cmp	r3, #1
9000a46a:	d106      	bne.n	9000a47a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000a46c:	4b15      	ldr	r3, [pc, #84]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a470:	4a14      	ldr	r2, [pc, #80]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a472:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
9000a476:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000a478:	e005      	b.n	9000a486 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000a47a:	4b12      	ldr	r3, [pc, #72]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a47e:	4a11      	ldr	r2, [pc, #68]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a480:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000a484:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000a486:	4b0f      	ldr	r3, [pc, #60]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a488:	681b      	ldr	r3, [r3, #0]
9000a48a:	4a0e      	ldr	r2, [pc, #56]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a48c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
9000a490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a492:	f7f9 fab5 	bl	90003a00 <HAL_GetTick>
9000a496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a498:	e008      	b.n	9000a4ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000a49a:	f7f9 fab1 	bl	90003a00 <HAL_GetTick>
9000a49e:	4602      	mov	r2, r0
9000a4a0:	68bb      	ldr	r3, [r7, #8]
9000a4a2:	1ad3      	subs	r3, r2, r3
9000a4a4:	2b02      	cmp	r3, #2
9000a4a6:	d901      	bls.n	9000a4ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000a4a8:	2303      	movs	r3, #3
9000a4aa:	e006      	b.n	9000a4ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a4ac:	4b05      	ldr	r3, [pc, #20]	@ (9000a4c4 <RCCEx_PLL3_Config+0x15c>)
9000a4ae:	681b      	ldr	r3, [r3, #0]
9000a4b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000a4b4:	2b00      	cmp	r3, #0
9000a4b6:	d0f0      	beq.n	9000a49a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
9000a4ba:	4618      	mov	r0, r3
9000a4bc:	3710      	adds	r7, #16
9000a4be:	46bd      	mov	sp, r7
9000a4c0:	bd80      	pop	{r7, pc}
9000a4c2:	bf00      	nop
9000a4c4:	58024400 	.word	0x58024400
9000a4c8:	ffff0007 	.word	0xffff0007

9000a4cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
9000a4cc:	b580      	push	{r7, lr}
9000a4ce:	b082      	sub	sp, #8
9000a4d0:	af00      	add	r7, sp, #0
9000a4d2:	6078      	str	r0, [r7, #4]
9000a4d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000a4d6:	687b      	ldr	r3, [r7, #4]
9000a4d8:	2b00      	cmp	r3, #0
9000a4da:	d101      	bne.n	9000a4e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
9000a4dc:	2301      	movs	r3, #1
9000a4de:	e02b      	b.n	9000a538 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000a4e0:	687b      	ldr	r3, [r7, #4]
9000a4e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a4e6:	b2db      	uxtb	r3, r3
9000a4e8:	2b00      	cmp	r3, #0
9000a4ea:	d106      	bne.n	9000a4fa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
9000a4ec:	687b      	ldr	r3, [r7, #4]
9000a4ee:	2200      	movs	r2, #0
9000a4f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
9000a4f4:	6878      	ldr	r0, [r7, #4]
9000a4f6:	f000 f825 	bl	9000a544 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000a4fa:	687b      	ldr	r3, [r7, #4]
9000a4fc:	2202      	movs	r2, #2
9000a4fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000a502:	687b      	ldr	r3, [r7, #4]
9000a504:	681a      	ldr	r2, [r3, #0]
9000a506:	687b      	ldr	r3, [r7, #4]
9000a508:	3304      	adds	r3, #4
9000a50a:	4619      	mov	r1, r3
9000a50c:	4610      	mov	r0, r2
9000a50e:	f001 fb51 	bl	9000bbb4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000a512:	687b      	ldr	r3, [r7, #4]
9000a514:	6818      	ldr	r0, [r3, #0]
9000a516:	687b      	ldr	r3, [r7, #4]
9000a518:	685b      	ldr	r3, [r3, #4]
9000a51a:	461a      	mov	r2, r3
9000a51c:	6839      	ldr	r1, [r7, #0]
9000a51e:	f001 fba5 	bl	9000bc6c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000a522:	4b07      	ldr	r3, [pc, #28]	@ (9000a540 <HAL_SDRAM_Init+0x74>)
9000a524:	681b      	ldr	r3, [r3, #0]
9000a526:	4a06      	ldr	r2, [pc, #24]	@ (9000a540 <HAL_SDRAM_Init+0x74>)
9000a528:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a52c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000a52e:	687b      	ldr	r3, [r7, #4]
9000a530:	2201      	movs	r2, #1
9000a532:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000a536:	2300      	movs	r3, #0
}
9000a538:	4618      	mov	r0, r3
9000a53a:	3708      	adds	r7, #8
9000a53c:	46bd      	mov	sp, r7
9000a53e:	bd80      	pop	{r7, pc}
9000a540:	52004000 	.word	0x52004000

9000a544 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
9000a544:	b480      	push	{r7}
9000a546:	b083      	sub	sp, #12
9000a548:	af00      	add	r7, sp, #0
9000a54a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
9000a54c:	bf00      	nop
9000a54e:	370c      	adds	r7, #12
9000a550:	46bd      	mov	sp, r7
9000a552:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a556:	4770      	bx	lr

9000a558 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000a558:	b580      	push	{r7, lr}
9000a55a:	b086      	sub	sp, #24
9000a55c:	af00      	add	r7, sp, #0
9000a55e:	60f8      	str	r0, [r7, #12]
9000a560:	60b9      	str	r1, [r7, #8]
9000a562:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000a564:	68fb      	ldr	r3, [r7, #12]
9000a566:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a56a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000a56c:	7dfb      	ldrb	r3, [r7, #23]
9000a56e:	2b02      	cmp	r3, #2
9000a570:	d101      	bne.n	9000a576 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
9000a572:	2302      	movs	r3, #2
9000a574:	e021      	b.n	9000a5ba <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000a576:	7dfb      	ldrb	r3, [r7, #23]
9000a578:	2b01      	cmp	r3, #1
9000a57a:	d002      	beq.n	9000a582 <HAL_SDRAM_SendCommand+0x2a>
9000a57c:	7dfb      	ldrb	r3, [r7, #23]
9000a57e:	2b05      	cmp	r3, #5
9000a580:	d118      	bne.n	9000a5b4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000a582:	68fb      	ldr	r3, [r7, #12]
9000a584:	2202      	movs	r2, #2
9000a586:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000a58a:	68fb      	ldr	r3, [r7, #12]
9000a58c:	681b      	ldr	r3, [r3, #0]
9000a58e:	687a      	ldr	r2, [r7, #4]
9000a590:	68b9      	ldr	r1, [r7, #8]
9000a592:	4618      	mov	r0, r3
9000a594:	f001 fbd4 	bl	9000bd40 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000a598:	68bb      	ldr	r3, [r7, #8]
9000a59a:	681b      	ldr	r3, [r3, #0]
9000a59c:	2b02      	cmp	r3, #2
9000a59e:	d104      	bne.n	9000a5aa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000a5a0:	68fb      	ldr	r3, [r7, #12]
9000a5a2:	2205      	movs	r2, #5
9000a5a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000a5a8:	e006      	b.n	9000a5b8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000a5aa:	68fb      	ldr	r3, [r7, #12]
9000a5ac:	2201      	movs	r2, #1
9000a5ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000a5b2:	e001      	b.n	9000a5b8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
9000a5b4:	2301      	movs	r3, #1
9000a5b6:	e000      	b.n	9000a5ba <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
9000a5b8:	2300      	movs	r3, #0
}
9000a5ba:	4618      	mov	r0, r3
9000a5bc:	3718      	adds	r7, #24
9000a5be:	46bd      	mov	sp, r7
9000a5c0:	bd80      	pop	{r7, pc}

9000a5c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000a5c2:	b580      	push	{r7, lr}
9000a5c4:	b082      	sub	sp, #8
9000a5c6:	af00      	add	r7, sp, #0
9000a5c8:	6078      	str	r0, [r7, #4]
9000a5ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000a5cc:	687b      	ldr	r3, [r7, #4]
9000a5ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a5d2:	b2db      	uxtb	r3, r3
9000a5d4:	2b02      	cmp	r3, #2
9000a5d6:	d101      	bne.n	9000a5dc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
9000a5d8:	2302      	movs	r3, #2
9000a5da:	e016      	b.n	9000a60a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000a5dc:	687b      	ldr	r3, [r7, #4]
9000a5de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000a5e2:	b2db      	uxtb	r3, r3
9000a5e4:	2b01      	cmp	r3, #1
9000a5e6:	d10f      	bne.n	9000a608 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000a5e8:	687b      	ldr	r3, [r7, #4]
9000a5ea:	2202      	movs	r2, #2
9000a5ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000a5f0:	687b      	ldr	r3, [r7, #4]
9000a5f2:	681b      	ldr	r3, [r3, #0]
9000a5f4:	6839      	ldr	r1, [r7, #0]
9000a5f6:	4618      	mov	r0, r3
9000a5f8:	f001 fbc6 	bl	9000bd88 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
9000a5fc:	687b      	ldr	r3, [r7, #4]
9000a5fe:	2201      	movs	r2, #1
9000a600:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
9000a604:	2300      	movs	r3, #0
9000a606:	e000      	b.n	9000a60a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
9000a608:	2301      	movs	r3, #1
}
9000a60a:	4618      	mov	r0, r3
9000a60c:	3708      	adds	r7, #8
9000a60e:	46bd      	mov	sp, r7
9000a610:	bd80      	pop	{r7, pc}

9000a612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
9000a612:	b580      	push	{r7, lr}
9000a614:	b082      	sub	sp, #8
9000a616:	af00      	add	r7, sp, #0
9000a618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000a61a:	687b      	ldr	r3, [r7, #4]
9000a61c:	2b00      	cmp	r3, #0
9000a61e:	d101      	bne.n	9000a624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
9000a620:	2301      	movs	r3, #1
9000a622:	e049      	b.n	9000a6b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
9000a624:	687b      	ldr	r3, [r7, #4]
9000a626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
9000a62a:	b2db      	uxtb	r3, r3
9000a62c:	2b00      	cmp	r3, #0
9000a62e:	d106      	bne.n	9000a63e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
9000a630:	687b      	ldr	r3, [r7, #4]
9000a632:	2200      	movs	r2, #0
9000a634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
9000a638:	6878      	ldr	r0, [r7, #4]
9000a63a:	f000 f89d 	bl	9000a778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000a63e:	687b      	ldr	r3, [r7, #4]
9000a640:	2202      	movs	r2, #2
9000a642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000a646:	687b      	ldr	r3, [r7, #4]
9000a648:	681a      	ldr	r2, [r3, #0]
9000a64a:	687b      	ldr	r3, [r7, #4]
9000a64c:	3304      	adds	r3, #4
9000a64e:	4619      	mov	r1, r3
9000a650:	4610      	mov	r0, r2
9000a652:	f000 f8a5 	bl	9000a7a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000a656:	687b      	ldr	r3, [r7, #4]
9000a658:	2201      	movs	r2, #1
9000a65a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000a65e:	687b      	ldr	r3, [r7, #4]
9000a660:	2201      	movs	r2, #1
9000a662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000a666:	687b      	ldr	r3, [r7, #4]
9000a668:	2201      	movs	r2, #1
9000a66a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000a66e:	687b      	ldr	r3, [r7, #4]
9000a670:	2201      	movs	r2, #1
9000a672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000a676:	687b      	ldr	r3, [r7, #4]
9000a678:	2201      	movs	r2, #1
9000a67a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000a67e:	687b      	ldr	r3, [r7, #4]
9000a680:	2201      	movs	r2, #1
9000a682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000a686:	687b      	ldr	r3, [r7, #4]
9000a688:	2201      	movs	r2, #1
9000a68a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000a68e:	687b      	ldr	r3, [r7, #4]
9000a690:	2201      	movs	r2, #1
9000a692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000a696:	687b      	ldr	r3, [r7, #4]
9000a698:	2201      	movs	r2, #1
9000a69a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000a69e:	687b      	ldr	r3, [r7, #4]
9000a6a0:	2201      	movs	r2, #1
9000a6a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000a6a6:	687b      	ldr	r3, [r7, #4]
9000a6a8:	2201      	movs	r2, #1
9000a6aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
9000a6ae:	687b      	ldr	r3, [r7, #4]
9000a6b0:	2201      	movs	r2, #1
9000a6b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000a6b6:	2300      	movs	r3, #0
}
9000a6b8:	4618      	mov	r0, r3
9000a6ba:	3708      	adds	r7, #8
9000a6bc:	46bd      	mov	sp, r7
9000a6be:	bd80      	pop	{r7, pc}

9000a6c0 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
9000a6c0:	b580      	push	{r7, lr}
9000a6c2:	b082      	sub	sp, #8
9000a6c4:	af00      	add	r7, sp, #0
9000a6c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000a6c8:	687b      	ldr	r3, [r7, #4]
9000a6ca:	2202      	movs	r2, #2
9000a6cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
9000a6d0:	687b      	ldr	r3, [r7, #4]
9000a6d2:	681b      	ldr	r3, [r3, #0]
9000a6d4:	6a1a      	ldr	r2, [r3, #32]
9000a6d6:	f241 1311 	movw	r3, #4369	@ 0x1111
9000a6da:	4013      	ands	r3, r2
9000a6dc:	2b00      	cmp	r3, #0
9000a6de:	d10f      	bne.n	9000a700 <HAL_TIM_PWM_DeInit+0x40>
9000a6e0:	687b      	ldr	r3, [r7, #4]
9000a6e2:	681b      	ldr	r3, [r3, #0]
9000a6e4:	6a1a      	ldr	r2, [r3, #32]
9000a6e6:	f240 4344 	movw	r3, #1092	@ 0x444
9000a6ea:	4013      	ands	r3, r2
9000a6ec:	2b00      	cmp	r3, #0
9000a6ee:	d107      	bne.n	9000a700 <HAL_TIM_PWM_DeInit+0x40>
9000a6f0:	687b      	ldr	r3, [r7, #4]
9000a6f2:	681b      	ldr	r3, [r3, #0]
9000a6f4:	681a      	ldr	r2, [r3, #0]
9000a6f6:	687b      	ldr	r3, [r7, #4]
9000a6f8:	681b      	ldr	r3, [r3, #0]
9000a6fa:	f022 0201 	bic.w	r2, r2, #1
9000a6fe:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
9000a700:	6878      	ldr	r0, [r7, #4]
9000a702:	f000 f843 	bl	9000a78c <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
9000a706:	687b      	ldr	r3, [r7, #4]
9000a708:	2200      	movs	r2, #0
9000a70a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000a70e:	687b      	ldr	r3, [r7, #4]
9000a710:	2200      	movs	r2, #0
9000a712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000a716:	687b      	ldr	r3, [r7, #4]
9000a718:	2200      	movs	r2, #0
9000a71a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000a71e:	687b      	ldr	r3, [r7, #4]
9000a720:	2200      	movs	r2, #0
9000a722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000a726:	687b      	ldr	r3, [r7, #4]
9000a728:	2200      	movs	r2, #0
9000a72a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000a72e:	687b      	ldr	r3, [r7, #4]
9000a730:	2200      	movs	r2, #0
9000a732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000a736:	687b      	ldr	r3, [r7, #4]
9000a738:	2200      	movs	r2, #0
9000a73a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000a73e:	687b      	ldr	r3, [r7, #4]
9000a740:	2200      	movs	r2, #0
9000a742:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000a746:	687b      	ldr	r3, [r7, #4]
9000a748:	2200      	movs	r2, #0
9000a74a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000a74e:	687b      	ldr	r3, [r7, #4]
9000a750:	2200      	movs	r2, #0
9000a752:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000a756:	687b      	ldr	r3, [r7, #4]
9000a758:	2200      	movs	r2, #0
9000a75a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
9000a75e:	687b      	ldr	r3, [r7, #4]
9000a760:	2200      	movs	r2, #0
9000a762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
9000a766:	687b      	ldr	r3, [r7, #4]
9000a768:	2200      	movs	r2, #0
9000a76a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
9000a76e:	2300      	movs	r3, #0
}
9000a770:	4618      	mov	r0, r3
9000a772:	3708      	adds	r7, #8
9000a774:	46bd      	mov	sp, r7
9000a776:	bd80      	pop	{r7, pc}

9000a778 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000a778:	b480      	push	{r7}
9000a77a:	b083      	sub	sp, #12
9000a77c:	af00      	add	r7, sp, #0
9000a77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
9000a780:	bf00      	nop
9000a782:	370c      	adds	r7, #12
9000a784:	46bd      	mov	sp, r7
9000a786:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a78a:	4770      	bx	lr

9000a78c <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
9000a78c:	b480      	push	{r7}
9000a78e:	b083      	sub	sp, #12
9000a790:	af00      	add	r7, sp, #0
9000a792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
9000a794:	bf00      	nop
9000a796:	370c      	adds	r7, #12
9000a798:	46bd      	mov	sp, r7
9000a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a79e:	4770      	bx	lr

9000a7a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
9000a7a0:	b480      	push	{r7}
9000a7a2:	b085      	sub	sp, #20
9000a7a4:	af00      	add	r7, sp, #0
9000a7a6:	6078      	str	r0, [r7, #4]
9000a7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000a7aa:	687b      	ldr	r3, [r7, #4]
9000a7ac:	681b      	ldr	r3, [r3, #0]
9000a7ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000a7b0:	687b      	ldr	r3, [r7, #4]
9000a7b2:	4a43      	ldr	r2, [pc, #268]	@ (9000a8c0 <TIM_Base_SetConfig+0x120>)
9000a7b4:	4293      	cmp	r3, r2
9000a7b6:	d013      	beq.n	9000a7e0 <TIM_Base_SetConfig+0x40>
9000a7b8:	687b      	ldr	r3, [r7, #4]
9000a7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a7be:	d00f      	beq.n	9000a7e0 <TIM_Base_SetConfig+0x40>
9000a7c0:	687b      	ldr	r3, [r7, #4]
9000a7c2:	4a40      	ldr	r2, [pc, #256]	@ (9000a8c4 <TIM_Base_SetConfig+0x124>)
9000a7c4:	4293      	cmp	r3, r2
9000a7c6:	d00b      	beq.n	9000a7e0 <TIM_Base_SetConfig+0x40>
9000a7c8:	687b      	ldr	r3, [r7, #4]
9000a7ca:	4a3f      	ldr	r2, [pc, #252]	@ (9000a8c8 <TIM_Base_SetConfig+0x128>)
9000a7cc:	4293      	cmp	r3, r2
9000a7ce:	d007      	beq.n	9000a7e0 <TIM_Base_SetConfig+0x40>
9000a7d0:	687b      	ldr	r3, [r7, #4]
9000a7d2:	4a3e      	ldr	r2, [pc, #248]	@ (9000a8cc <TIM_Base_SetConfig+0x12c>)
9000a7d4:	4293      	cmp	r3, r2
9000a7d6:	d003      	beq.n	9000a7e0 <TIM_Base_SetConfig+0x40>
9000a7d8:	687b      	ldr	r3, [r7, #4]
9000a7da:	4a3d      	ldr	r2, [pc, #244]	@ (9000a8d0 <TIM_Base_SetConfig+0x130>)
9000a7dc:	4293      	cmp	r3, r2
9000a7de:	d108      	bne.n	9000a7f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000a7e0:	68fb      	ldr	r3, [r7, #12]
9000a7e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000a7e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
9000a7e8:	683b      	ldr	r3, [r7, #0]
9000a7ea:	685b      	ldr	r3, [r3, #4]
9000a7ec:	68fa      	ldr	r2, [r7, #12]
9000a7ee:	4313      	orrs	r3, r2
9000a7f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000a7f2:	687b      	ldr	r3, [r7, #4]
9000a7f4:	4a32      	ldr	r2, [pc, #200]	@ (9000a8c0 <TIM_Base_SetConfig+0x120>)
9000a7f6:	4293      	cmp	r3, r2
9000a7f8:	d01f      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a7fa:	687b      	ldr	r3, [r7, #4]
9000a7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a800:	d01b      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a802:	687b      	ldr	r3, [r7, #4]
9000a804:	4a2f      	ldr	r2, [pc, #188]	@ (9000a8c4 <TIM_Base_SetConfig+0x124>)
9000a806:	4293      	cmp	r3, r2
9000a808:	d017      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a80a:	687b      	ldr	r3, [r7, #4]
9000a80c:	4a2e      	ldr	r2, [pc, #184]	@ (9000a8c8 <TIM_Base_SetConfig+0x128>)
9000a80e:	4293      	cmp	r3, r2
9000a810:	d013      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a812:	687b      	ldr	r3, [r7, #4]
9000a814:	4a2d      	ldr	r2, [pc, #180]	@ (9000a8cc <TIM_Base_SetConfig+0x12c>)
9000a816:	4293      	cmp	r3, r2
9000a818:	d00f      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a81a:	687b      	ldr	r3, [r7, #4]
9000a81c:	4a2c      	ldr	r2, [pc, #176]	@ (9000a8d0 <TIM_Base_SetConfig+0x130>)
9000a81e:	4293      	cmp	r3, r2
9000a820:	d00b      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a822:	687b      	ldr	r3, [r7, #4]
9000a824:	4a2b      	ldr	r2, [pc, #172]	@ (9000a8d4 <TIM_Base_SetConfig+0x134>)
9000a826:	4293      	cmp	r3, r2
9000a828:	d007      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a82a:	687b      	ldr	r3, [r7, #4]
9000a82c:	4a2a      	ldr	r2, [pc, #168]	@ (9000a8d8 <TIM_Base_SetConfig+0x138>)
9000a82e:	4293      	cmp	r3, r2
9000a830:	d003      	beq.n	9000a83a <TIM_Base_SetConfig+0x9a>
9000a832:	687b      	ldr	r3, [r7, #4]
9000a834:	4a29      	ldr	r2, [pc, #164]	@ (9000a8dc <TIM_Base_SetConfig+0x13c>)
9000a836:	4293      	cmp	r3, r2
9000a838:	d108      	bne.n	9000a84c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000a83a:	68fb      	ldr	r3, [r7, #12]
9000a83c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000a840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000a842:	683b      	ldr	r3, [r7, #0]
9000a844:	68db      	ldr	r3, [r3, #12]
9000a846:	68fa      	ldr	r2, [r7, #12]
9000a848:	4313      	orrs	r3, r2
9000a84a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000a84c:	68fb      	ldr	r3, [r7, #12]
9000a84e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
9000a852:	683b      	ldr	r3, [r7, #0]
9000a854:	695b      	ldr	r3, [r3, #20]
9000a856:	4313      	orrs	r3, r2
9000a858:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000a85a:	683b      	ldr	r3, [r7, #0]
9000a85c:	689a      	ldr	r2, [r3, #8]
9000a85e:	687b      	ldr	r3, [r7, #4]
9000a860:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000a862:	683b      	ldr	r3, [r7, #0]
9000a864:	681a      	ldr	r2, [r3, #0]
9000a866:	687b      	ldr	r3, [r7, #4]
9000a868:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000a86a:	687b      	ldr	r3, [r7, #4]
9000a86c:	4a14      	ldr	r2, [pc, #80]	@ (9000a8c0 <TIM_Base_SetConfig+0x120>)
9000a86e:	4293      	cmp	r3, r2
9000a870:	d00f      	beq.n	9000a892 <TIM_Base_SetConfig+0xf2>
9000a872:	687b      	ldr	r3, [r7, #4]
9000a874:	4a16      	ldr	r2, [pc, #88]	@ (9000a8d0 <TIM_Base_SetConfig+0x130>)
9000a876:	4293      	cmp	r3, r2
9000a878:	d00b      	beq.n	9000a892 <TIM_Base_SetConfig+0xf2>
9000a87a:	687b      	ldr	r3, [r7, #4]
9000a87c:	4a15      	ldr	r2, [pc, #84]	@ (9000a8d4 <TIM_Base_SetConfig+0x134>)
9000a87e:	4293      	cmp	r3, r2
9000a880:	d007      	beq.n	9000a892 <TIM_Base_SetConfig+0xf2>
9000a882:	687b      	ldr	r3, [r7, #4]
9000a884:	4a14      	ldr	r2, [pc, #80]	@ (9000a8d8 <TIM_Base_SetConfig+0x138>)
9000a886:	4293      	cmp	r3, r2
9000a888:	d003      	beq.n	9000a892 <TIM_Base_SetConfig+0xf2>
9000a88a:	687b      	ldr	r3, [r7, #4]
9000a88c:	4a13      	ldr	r2, [pc, #76]	@ (9000a8dc <TIM_Base_SetConfig+0x13c>)
9000a88e:	4293      	cmp	r3, r2
9000a890:	d103      	bne.n	9000a89a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000a892:	683b      	ldr	r3, [r7, #0]
9000a894:	691a      	ldr	r2, [r3, #16]
9000a896:	687b      	ldr	r3, [r7, #4]
9000a898:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
9000a89a:	687b      	ldr	r3, [r7, #4]
9000a89c:	681b      	ldr	r3, [r3, #0]
9000a89e:	f043 0204 	orr.w	r2, r3, #4
9000a8a2:	687b      	ldr	r3, [r7, #4]
9000a8a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000a8a6:	687b      	ldr	r3, [r7, #4]
9000a8a8:	2201      	movs	r2, #1
9000a8aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
9000a8ac:	687b      	ldr	r3, [r7, #4]
9000a8ae:	68fa      	ldr	r2, [r7, #12]
9000a8b0:	601a      	str	r2, [r3, #0]
}
9000a8b2:	bf00      	nop
9000a8b4:	3714      	adds	r7, #20
9000a8b6:	46bd      	mov	sp, r7
9000a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a8bc:	4770      	bx	lr
9000a8be:	bf00      	nop
9000a8c0:	40010000 	.word	0x40010000
9000a8c4:	40000400 	.word	0x40000400
9000a8c8:	40000800 	.word	0x40000800
9000a8cc:	40000c00 	.word	0x40000c00
9000a8d0:	40010400 	.word	0x40010400
9000a8d4:	40014000 	.word	0x40014000
9000a8d8:	40014400 	.word	0x40014400
9000a8dc:	40014800 	.word	0x40014800

9000a8e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
9000a8e0:	b580      	push	{r7, lr}
9000a8e2:	b082      	sub	sp, #8
9000a8e4:	af00      	add	r7, sp, #0
9000a8e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
9000a8e8:	687b      	ldr	r3, [r7, #4]
9000a8ea:	2b00      	cmp	r3, #0
9000a8ec:	d101      	bne.n	9000a8f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
9000a8ee:	2301      	movs	r3, #1
9000a8f0:	e042      	b.n	9000a978 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
9000a8f2:	687b      	ldr	r3, [r7, #4]
9000a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000a8f8:	2b00      	cmp	r3, #0
9000a8fa:	d106      	bne.n	9000a90a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
9000a8fc:	687b      	ldr	r3, [r7, #4]
9000a8fe:	2200      	movs	r2, #0
9000a900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
9000a904:	6878      	ldr	r0, [r7, #4]
9000a906:	f7f5 ff15 	bl	90000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
9000a90a:	687b      	ldr	r3, [r7, #4]
9000a90c:	2224      	movs	r2, #36	@ 0x24
9000a90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
9000a912:	687b      	ldr	r3, [r7, #4]
9000a914:	681b      	ldr	r3, [r3, #0]
9000a916:	681a      	ldr	r2, [r3, #0]
9000a918:	687b      	ldr	r3, [r7, #4]
9000a91a:	681b      	ldr	r3, [r3, #0]
9000a91c:	f022 0201 	bic.w	r2, r2, #1
9000a920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
9000a922:	687b      	ldr	r3, [r7, #4]
9000a924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a926:	2b00      	cmp	r3, #0
9000a928:	d002      	beq.n	9000a930 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
9000a92a:	6878      	ldr	r0, [r7, #4]
9000a92c:	f000 fe1e 	bl	9000b56c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
9000a930:	6878      	ldr	r0, [r7, #4]
9000a932:	f000 f8b3 	bl	9000aa9c <UART_SetConfig>
9000a936:	4603      	mov	r3, r0
9000a938:	2b01      	cmp	r3, #1
9000a93a:	d101      	bne.n	9000a940 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
9000a93c:	2301      	movs	r3, #1
9000a93e:	e01b      	b.n	9000a978 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000a940:	687b      	ldr	r3, [r7, #4]
9000a942:	681b      	ldr	r3, [r3, #0]
9000a944:	685a      	ldr	r2, [r3, #4]
9000a946:	687b      	ldr	r3, [r7, #4]
9000a948:	681b      	ldr	r3, [r3, #0]
9000a94a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
9000a94e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
9000a950:	687b      	ldr	r3, [r7, #4]
9000a952:	681b      	ldr	r3, [r3, #0]
9000a954:	689a      	ldr	r2, [r3, #8]
9000a956:	687b      	ldr	r3, [r7, #4]
9000a958:	681b      	ldr	r3, [r3, #0]
9000a95a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
9000a95e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
9000a960:	687b      	ldr	r3, [r7, #4]
9000a962:	681b      	ldr	r3, [r3, #0]
9000a964:	681a      	ldr	r2, [r3, #0]
9000a966:	687b      	ldr	r3, [r7, #4]
9000a968:	681b      	ldr	r3, [r3, #0]
9000a96a:	f042 0201 	orr.w	r2, r2, #1
9000a96e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
9000a970:	6878      	ldr	r0, [r7, #4]
9000a972:	f000 fe9d 	bl	9000b6b0 <UART_CheckIdleState>
9000a976:	4603      	mov	r3, r0
}
9000a978:	4618      	mov	r0, r3
9000a97a:	3708      	adds	r7, #8
9000a97c:	46bd      	mov	sp, r7
9000a97e:	bd80      	pop	{r7, pc}

9000a980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
9000a980:	b580      	push	{r7, lr}
9000a982:	b08a      	sub	sp, #40	@ 0x28
9000a984:	af02      	add	r7, sp, #8
9000a986:	60f8      	str	r0, [r7, #12]
9000a988:	60b9      	str	r1, [r7, #8]
9000a98a:	603b      	str	r3, [r7, #0]
9000a98c:	4613      	mov	r3, r2
9000a98e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
9000a990:	68fb      	ldr	r3, [r7, #12]
9000a992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000a996:	2b20      	cmp	r3, #32
9000a998:	d17b      	bne.n	9000aa92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
9000a99a:	68bb      	ldr	r3, [r7, #8]
9000a99c:	2b00      	cmp	r3, #0
9000a99e:	d002      	beq.n	9000a9a6 <HAL_UART_Transmit+0x26>
9000a9a0:	88fb      	ldrh	r3, [r7, #6]
9000a9a2:	2b00      	cmp	r3, #0
9000a9a4:	d101      	bne.n	9000a9aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
9000a9a6:	2301      	movs	r3, #1
9000a9a8:	e074      	b.n	9000aa94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a9aa:	68fb      	ldr	r3, [r7, #12]
9000a9ac:	2200      	movs	r2, #0
9000a9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000a9b2:	68fb      	ldr	r3, [r7, #12]
9000a9b4:	2221      	movs	r2, #33	@ 0x21
9000a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
9000a9ba:	f7f9 f821 	bl	90003a00 <HAL_GetTick>
9000a9be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
9000a9c0:	68fb      	ldr	r3, [r7, #12]
9000a9c2:	88fa      	ldrh	r2, [r7, #6]
9000a9c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
9000a9c8:	68fb      	ldr	r3, [r7, #12]
9000a9ca:	88fa      	ldrh	r2, [r7, #6]
9000a9cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000a9d0:	68fb      	ldr	r3, [r7, #12]
9000a9d2:	689b      	ldr	r3, [r3, #8]
9000a9d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000a9d8:	d108      	bne.n	9000a9ec <HAL_UART_Transmit+0x6c>
9000a9da:	68fb      	ldr	r3, [r7, #12]
9000a9dc:	691b      	ldr	r3, [r3, #16]
9000a9de:	2b00      	cmp	r3, #0
9000a9e0:	d104      	bne.n	9000a9ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
9000a9e2:	2300      	movs	r3, #0
9000a9e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
9000a9e6:	68bb      	ldr	r3, [r7, #8]
9000a9e8:	61bb      	str	r3, [r7, #24]
9000a9ea:	e003      	b.n	9000a9f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
9000a9ec:	68bb      	ldr	r3, [r7, #8]
9000a9ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
9000a9f0:	2300      	movs	r3, #0
9000a9f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
9000a9f4:	e030      	b.n	9000aa58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
9000a9f6:	683b      	ldr	r3, [r7, #0]
9000a9f8:	9300      	str	r3, [sp, #0]
9000a9fa:	697b      	ldr	r3, [r7, #20]
9000a9fc:	2200      	movs	r2, #0
9000a9fe:	2180      	movs	r1, #128	@ 0x80
9000aa00:	68f8      	ldr	r0, [r7, #12]
9000aa02:	f000 feff 	bl	9000b804 <UART_WaitOnFlagUntilTimeout>
9000aa06:	4603      	mov	r3, r0
9000aa08:	2b00      	cmp	r3, #0
9000aa0a:	d005      	beq.n	9000aa18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
9000aa0c:	68fb      	ldr	r3, [r7, #12]
9000aa0e:	2220      	movs	r2, #32
9000aa10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
9000aa14:	2303      	movs	r3, #3
9000aa16:	e03d      	b.n	9000aa94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
9000aa18:	69fb      	ldr	r3, [r7, #28]
9000aa1a:	2b00      	cmp	r3, #0
9000aa1c:	d10b      	bne.n	9000aa36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
9000aa1e:	69bb      	ldr	r3, [r7, #24]
9000aa20:	881b      	ldrh	r3, [r3, #0]
9000aa22:	461a      	mov	r2, r3
9000aa24:	68fb      	ldr	r3, [r7, #12]
9000aa26:	681b      	ldr	r3, [r3, #0]
9000aa28:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000aa2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
9000aa2e:	69bb      	ldr	r3, [r7, #24]
9000aa30:	3302      	adds	r3, #2
9000aa32:	61bb      	str	r3, [r7, #24]
9000aa34:	e007      	b.n	9000aa46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000aa36:	69fb      	ldr	r3, [r7, #28]
9000aa38:	781a      	ldrb	r2, [r3, #0]
9000aa3a:	68fb      	ldr	r3, [r7, #12]
9000aa3c:	681b      	ldr	r3, [r3, #0]
9000aa3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
9000aa40:	69fb      	ldr	r3, [r7, #28]
9000aa42:	3301      	adds	r3, #1
9000aa44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
9000aa46:	68fb      	ldr	r3, [r7, #12]
9000aa48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
9000aa4c:	b29b      	uxth	r3, r3
9000aa4e:	3b01      	subs	r3, #1
9000aa50:	b29a      	uxth	r2, r3
9000aa52:	68fb      	ldr	r3, [r7, #12]
9000aa54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
9000aa58:	68fb      	ldr	r3, [r7, #12]
9000aa5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
9000aa5e:	b29b      	uxth	r3, r3
9000aa60:	2b00      	cmp	r3, #0
9000aa62:	d1c8      	bne.n	9000a9f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
9000aa64:	683b      	ldr	r3, [r7, #0]
9000aa66:	9300      	str	r3, [sp, #0]
9000aa68:	697b      	ldr	r3, [r7, #20]
9000aa6a:	2200      	movs	r2, #0
9000aa6c:	2140      	movs	r1, #64	@ 0x40
9000aa6e:	68f8      	ldr	r0, [r7, #12]
9000aa70:	f000 fec8 	bl	9000b804 <UART_WaitOnFlagUntilTimeout>
9000aa74:	4603      	mov	r3, r0
9000aa76:	2b00      	cmp	r3, #0
9000aa78:	d005      	beq.n	9000aa86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
9000aa7a:	68fb      	ldr	r3, [r7, #12]
9000aa7c:	2220      	movs	r2, #32
9000aa7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
9000aa82:	2303      	movs	r3, #3
9000aa84:	e006      	b.n	9000aa94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
9000aa86:	68fb      	ldr	r3, [r7, #12]
9000aa88:	2220      	movs	r2, #32
9000aa8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
9000aa8e:	2300      	movs	r3, #0
9000aa90:	e000      	b.n	9000aa94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
9000aa92:	2302      	movs	r3, #2
  }
}
9000aa94:	4618      	mov	r0, r3
9000aa96:	3720      	adds	r7, #32
9000aa98:	46bd      	mov	sp, r7
9000aa9a:	bd80      	pop	{r7, pc}

9000aa9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
9000aa9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000aaa0:	b092      	sub	sp, #72	@ 0x48
9000aaa2:	af00      	add	r7, sp, #0
9000aaa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
9000aaa6:	2300      	movs	r3, #0
9000aaa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000aaac:	697b      	ldr	r3, [r7, #20]
9000aaae:	689a      	ldr	r2, [r3, #8]
9000aab0:	697b      	ldr	r3, [r7, #20]
9000aab2:	691b      	ldr	r3, [r3, #16]
9000aab4:	431a      	orrs	r2, r3
9000aab6:	697b      	ldr	r3, [r7, #20]
9000aab8:	695b      	ldr	r3, [r3, #20]
9000aaba:	431a      	orrs	r2, r3
9000aabc:	697b      	ldr	r3, [r7, #20]
9000aabe:	69db      	ldr	r3, [r3, #28]
9000aac0:	4313      	orrs	r3, r2
9000aac2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000aac4:	697b      	ldr	r3, [r7, #20]
9000aac6:	681b      	ldr	r3, [r3, #0]
9000aac8:	681a      	ldr	r2, [r3, #0]
9000aaca:	4bbe      	ldr	r3, [pc, #760]	@ (9000adc4 <UART_SetConfig+0x328>)
9000aacc:	4013      	ands	r3, r2
9000aace:	697a      	ldr	r2, [r7, #20]
9000aad0:	6812      	ldr	r2, [r2, #0]
9000aad2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
9000aad4:	430b      	orrs	r3, r1
9000aad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000aad8:	697b      	ldr	r3, [r7, #20]
9000aada:	681b      	ldr	r3, [r3, #0]
9000aadc:	685b      	ldr	r3, [r3, #4]
9000aade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
9000aae2:	697b      	ldr	r3, [r7, #20]
9000aae4:	68da      	ldr	r2, [r3, #12]
9000aae6:	697b      	ldr	r3, [r7, #20]
9000aae8:	681b      	ldr	r3, [r3, #0]
9000aaea:	430a      	orrs	r2, r1
9000aaec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000aaee:	697b      	ldr	r3, [r7, #20]
9000aaf0:	699b      	ldr	r3, [r3, #24]
9000aaf2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000aaf4:	697b      	ldr	r3, [r7, #20]
9000aaf6:	681b      	ldr	r3, [r3, #0]
9000aaf8:	4ab3      	ldr	r2, [pc, #716]	@ (9000adc8 <UART_SetConfig+0x32c>)
9000aafa:	4293      	cmp	r3, r2
9000aafc:	d004      	beq.n	9000ab08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
9000aafe:	697b      	ldr	r3, [r7, #20]
9000ab00:	6a1b      	ldr	r3, [r3, #32]
9000ab02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000ab04:	4313      	orrs	r3, r2
9000ab06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000ab08:	697b      	ldr	r3, [r7, #20]
9000ab0a:	681b      	ldr	r3, [r3, #0]
9000ab0c:	689a      	ldr	r2, [r3, #8]
9000ab0e:	4baf      	ldr	r3, [pc, #700]	@ (9000adcc <UART_SetConfig+0x330>)
9000ab10:	4013      	ands	r3, r2
9000ab12:	697a      	ldr	r2, [r7, #20]
9000ab14:	6812      	ldr	r2, [r2, #0]
9000ab16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
9000ab18:	430b      	orrs	r3, r1
9000ab1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000ab1c:	697b      	ldr	r3, [r7, #20]
9000ab1e:	681b      	ldr	r3, [r3, #0]
9000ab20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000ab22:	f023 010f 	bic.w	r1, r3, #15
9000ab26:	697b      	ldr	r3, [r7, #20]
9000ab28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000ab2a:	697b      	ldr	r3, [r7, #20]
9000ab2c:	681b      	ldr	r3, [r3, #0]
9000ab2e:	430a      	orrs	r2, r1
9000ab30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000ab32:	697b      	ldr	r3, [r7, #20]
9000ab34:	681b      	ldr	r3, [r3, #0]
9000ab36:	4aa6      	ldr	r2, [pc, #664]	@ (9000add0 <UART_SetConfig+0x334>)
9000ab38:	4293      	cmp	r3, r2
9000ab3a:	d177      	bne.n	9000ac2c <UART_SetConfig+0x190>
9000ab3c:	4ba5      	ldr	r3, [pc, #660]	@ (9000add4 <UART_SetConfig+0x338>)
9000ab3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ab40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000ab44:	2b28      	cmp	r3, #40	@ 0x28
9000ab46:	d86d      	bhi.n	9000ac24 <UART_SetConfig+0x188>
9000ab48:	a201      	add	r2, pc, #4	@ (adr r2, 9000ab50 <UART_SetConfig+0xb4>)
9000ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ab4e:	bf00      	nop
9000ab50:	9000abf5 	.word	0x9000abf5
9000ab54:	9000ac25 	.word	0x9000ac25
9000ab58:	9000ac25 	.word	0x9000ac25
9000ab5c:	9000ac25 	.word	0x9000ac25
9000ab60:	9000ac25 	.word	0x9000ac25
9000ab64:	9000ac25 	.word	0x9000ac25
9000ab68:	9000ac25 	.word	0x9000ac25
9000ab6c:	9000ac25 	.word	0x9000ac25
9000ab70:	9000abfd 	.word	0x9000abfd
9000ab74:	9000ac25 	.word	0x9000ac25
9000ab78:	9000ac25 	.word	0x9000ac25
9000ab7c:	9000ac25 	.word	0x9000ac25
9000ab80:	9000ac25 	.word	0x9000ac25
9000ab84:	9000ac25 	.word	0x9000ac25
9000ab88:	9000ac25 	.word	0x9000ac25
9000ab8c:	9000ac25 	.word	0x9000ac25
9000ab90:	9000ac05 	.word	0x9000ac05
9000ab94:	9000ac25 	.word	0x9000ac25
9000ab98:	9000ac25 	.word	0x9000ac25
9000ab9c:	9000ac25 	.word	0x9000ac25
9000aba0:	9000ac25 	.word	0x9000ac25
9000aba4:	9000ac25 	.word	0x9000ac25
9000aba8:	9000ac25 	.word	0x9000ac25
9000abac:	9000ac25 	.word	0x9000ac25
9000abb0:	9000ac0d 	.word	0x9000ac0d
9000abb4:	9000ac25 	.word	0x9000ac25
9000abb8:	9000ac25 	.word	0x9000ac25
9000abbc:	9000ac25 	.word	0x9000ac25
9000abc0:	9000ac25 	.word	0x9000ac25
9000abc4:	9000ac25 	.word	0x9000ac25
9000abc8:	9000ac25 	.word	0x9000ac25
9000abcc:	9000ac25 	.word	0x9000ac25
9000abd0:	9000ac15 	.word	0x9000ac15
9000abd4:	9000ac25 	.word	0x9000ac25
9000abd8:	9000ac25 	.word	0x9000ac25
9000abdc:	9000ac25 	.word	0x9000ac25
9000abe0:	9000ac25 	.word	0x9000ac25
9000abe4:	9000ac25 	.word	0x9000ac25
9000abe8:	9000ac25 	.word	0x9000ac25
9000abec:	9000ac25 	.word	0x9000ac25
9000abf0:	9000ac1d 	.word	0x9000ac1d
9000abf4:	2301      	movs	r3, #1
9000abf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000abfa:	e222      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000abfc:	2304      	movs	r3, #4
9000abfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac02:	e21e      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac04:	2308      	movs	r3, #8
9000ac06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac0a:	e21a      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac0c:	2310      	movs	r3, #16
9000ac0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac12:	e216      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac14:	2320      	movs	r3, #32
9000ac16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac1a:	e212      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac1c:	2340      	movs	r3, #64	@ 0x40
9000ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac22:	e20e      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac24:	2380      	movs	r3, #128	@ 0x80
9000ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac2a:	e20a      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac2c:	697b      	ldr	r3, [r7, #20]
9000ac2e:	681b      	ldr	r3, [r3, #0]
9000ac30:	4a69      	ldr	r2, [pc, #420]	@ (9000add8 <UART_SetConfig+0x33c>)
9000ac32:	4293      	cmp	r3, r2
9000ac34:	d130      	bne.n	9000ac98 <UART_SetConfig+0x1fc>
9000ac36:	4b67      	ldr	r3, [pc, #412]	@ (9000add4 <UART_SetConfig+0x338>)
9000ac38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ac3a:	f003 0307 	and.w	r3, r3, #7
9000ac3e:	2b05      	cmp	r3, #5
9000ac40:	d826      	bhi.n	9000ac90 <UART_SetConfig+0x1f4>
9000ac42:	a201      	add	r2, pc, #4	@ (adr r2, 9000ac48 <UART_SetConfig+0x1ac>)
9000ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ac48:	9000ac61 	.word	0x9000ac61
9000ac4c:	9000ac69 	.word	0x9000ac69
9000ac50:	9000ac71 	.word	0x9000ac71
9000ac54:	9000ac79 	.word	0x9000ac79
9000ac58:	9000ac81 	.word	0x9000ac81
9000ac5c:	9000ac89 	.word	0x9000ac89
9000ac60:	2300      	movs	r3, #0
9000ac62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac66:	e1ec      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac68:	2304      	movs	r3, #4
9000ac6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac6e:	e1e8      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac70:	2308      	movs	r3, #8
9000ac72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac76:	e1e4      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac78:	2310      	movs	r3, #16
9000ac7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac7e:	e1e0      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac80:	2320      	movs	r3, #32
9000ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac86:	e1dc      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac88:	2340      	movs	r3, #64	@ 0x40
9000ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac8e:	e1d8      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac90:	2380      	movs	r3, #128	@ 0x80
9000ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ac96:	e1d4      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ac98:	697b      	ldr	r3, [r7, #20]
9000ac9a:	681b      	ldr	r3, [r3, #0]
9000ac9c:	4a4f      	ldr	r2, [pc, #316]	@ (9000addc <UART_SetConfig+0x340>)
9000ac9e:	4293      	cmp	r3, r2
9000aca0:	d130      	bne.n	9000ad04 <UART_SetConfig+0x268>
9000aca2:	4b4c      	ldr	r3, [pc, #304]	@ (9000add4 <UART_SetConfig+0x338>)
9000aca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000aca6:	f003 0307 	and.w	r3, r3, #7
9000acaa:	2b05      	cmp	r3, #5
9000acac:	d826      	bhi.n	9000acfc <UART_SetConfig+0x260>
9000acae:	a201      	add	r2, pc, #4	@ (adr r2, 9000acb4 <UART_SetConfig+0x218>)
9000acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000acb4:	9000accd 	.word	0x9000accd
9000acb8:	9000acd5 	.word	0x9000acd5
9000acbc:	9000acdd 	.word	0x9000acdd
9000acc0:	9000ace5 	.word	0x9000ace5
9000acc4:	9000aced 	.word	0x9000aced
9000acc8:	9000acf5 	.word	0x9000acf5
9000accc:	2300      	movs	r3, #0
9000acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acd2:	e1b6      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000acd4:	2304      	movs	r3, #4
9000acd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acda:	e1b2      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000acdc:	2308      	movs	r3, #8
9000acde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ace2:	e1ae      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ace4:	2310      	movs	r3, #16
9000ace6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acea:	e1aa      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000acec:	2320      	movs	r3, #32
9000acee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acf2:	e1a6      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000acf4:	2340      	movs	r3, #64	@ 0x40
9000acf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000acfa:	e1a2      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000acfc:	2380      	movs	r3, #128	@ 0x80
9000acfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad02:	e19e      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad04:	697b      	ldr	r3, [r7, #20]
9000ad06:	681b      	ldr	r3, [r3, #0]
9000ad08:	4a35      	ldr	r2, [pc, #212]	@ (9000ade0 <UART_SetConfig+0x344>)
9000ad0a:	4293      	cmp	r3, r2
9000ad0c:	d130      	bne.n	9000ad70 <UART_SetConfig+0x2d4>
9000ad0e:	4b31      	ldr	r3, [pc, #196]	@ (9000add4 <UART_SetConfig+0x338>)
9000ad10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ad12:	f003 0307 	and.w	r3, r3, #7
9000ad16:	2b05      	cmp	r3, #5
9000ad18:	d826      	bhi.n	9000ad68 <UART_SetConfig+0x2cc>
9000ad1a:	a201      	add	r2, pc, #4	@ (adr r2, 9000ad20 <UART_SetConfig+0x284>)
9000ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ad20:	9000ad39 	.word	0x9000ad39
9000ad24:	9000ad41 	.word	0x9000ad41
9000ad28:	9000ad49 	.word	0x9000ad49
9000ad2c:	9000ad51 	.word	0x9000ad51
9000ad30:	9000ad59 	.word	0x9000ad59
9000ad34:	9000ad61 	.word	0x9000ad61
9000ad38:	2300      	movs	r3, #0
9000ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad3e:	e180      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad40:	2304      	movs	r3, #4
9000ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad46:	e17c      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad48:	2308      	movs	r3, #8
9000ad4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad4e:	e178      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad50:	2310      	movs	r3, #16
9000ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad56:	e174      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad58:	2320      	movs	r3, #32
9000ad5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad5e:	e170      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad60:	2340      	movs	r3, #64	@ 0x40
9000ad62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad66:	e16c      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad68:	2380      	movs	r3, #128	@ 0x80
9000ad6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad6e:	e168      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ad70:	697b      	ldr	r3, [r7, #20]
9000ad72:	681b      	ldr	r3, [r3, #0]
9000ad74:	4a1b      	ldr	r2, [pc, #108]	@ (9000ade4 <UART_SetConfig+0x348>)
9000ad76:	4293      	cmp	r3, r2
9000ad78:	d142      	bne.n	9000ae00 <UART_SetConfig+0x364>
9000ad7a:	4b16      	ldr	r3, [pc, #88]	@ (9000add4 <UART_SetConfig+0x338>)
9000ad7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ad7e:	f003 0307 	and.w	r3, r3, #7
9000ad82:	2b05      	cmp	r3, #5
9000ad84:	d838      	bhi.n	9000adf8 <UART_SetConfig+0x35c>
9000ad86:	a201      	add	r2, pc, #4	@ (adr r2, 9000ad8c <UART_SetConfig+0x2f0>)
9000ad88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ad8c:	9000ada5 	.word	0x9000ada5
9000ad90:	9000adad 	.word	0x9000adad
9000ad94:	9000adb5 	.word	0x9000adb5
9000ad98:	9000adbd 	.word	0x9000adbd
9000ad9c:	9000ade9 	.word	0x9000ade9
9000ada0:	9000adf1 	.word	0x9000adf1
9000ada4:	2300      	movs	r3, #0
9000ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adaa:	e14a      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000adac:	2304      	movs	r3, #4
9000adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adb2:	e146      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000adb4:	2308      	movs	r3, #8
9000adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adba:	e142      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000adbc:	2310      	movs	r3, #16
9000adbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adc2:	e13e      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000adc4:	cfff69f3 	.word	0xcfff69f3
9000adc8:	58000c00 	.word	0x58000c00
9000adcc:	11fff4ff 	.word	0x11fff4ff
9000add0:	40011000 	.word	0x40011000
9000add4:	58024400 	.word	0x58024400
9000add8:	40004400 	.word	0x40004400
9000addc:	40004800 	.word	0x40004800
9000ade0:	40004c00 	.word	0x40004c00
9000ade4:	40005000 	.word	0x40005000
9000ade8:	2320      	movs	r3, #32
9000adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adee:	e128      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000adf0:	2340      	movs	r3, #64	@ 0x40
9000adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adf6:	e124      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000adf8:	2380      	movs	r3, #128	@ 0x80
9000adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adfe:	e120      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000ae00:	697b      	ldr	r3, [r7, #20]
9000ae02:	681b      	ldr	r3, [r3, #0]
9000ae04:	4acb      	ldr	r2, [pc, #812]	@ (9000b134 <UART_SetConfig+0x698>)
9000ae06:	4293      	cmp	r3, r2
9000ae08:	d176      	bne.n	9000aef8 <UART_SetConfig+0x45c>
9000ae0a:	4bcb      	ldr	r3, [pc, #812]	@ (9000b138 <UART_SetConfig+0x69c>)
9000ae0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ae0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000ae12:	2b28      	cmp	r3, #40	@ 0x28
9000ae14:	d86c      	bhi.n	9000aef0 <UART_SetConfig+0x454>
9000ae16:	a201      	add	r2, pc, #4	@ (adr r2, 9000ae1c <UART_SetConfig+0x380>)
9000ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ae1c:	9000aec1 	.word	0x9000aec1
9000ae20:	9000aef1 	.word	0x9000aef1
9000ae24:	9000aef1 	.word	0x9000aef1
9000ae28:	9000aef1 	.word	0x9000aef1
9000ae2c:	9000aef1 	.word	0x9000aef1
9000ae30:	9000aef1 	.word	0x9000aef1
9000ae34:	9000aef1 	.word	0x9000aef1
9000ae38:	9000aef1 	.word	0x9000aef1
9000ae3c:	9000aec9 	.word	0x9000aec9
9000ae40:	9000aef1 	.word	0x9000aef1
9000ae44:	9000aef1 	.word	0x9000aef1
9000ae48:	9000aef1 	.word	0x9000aef1
9000ae4c:	9000aef1 	.word	0x9000aef1
9000ae50:	9000aef1 	.word	0x9000aef1
9000ae54:	9000aef1 	.word	0x9000aef1
9000ae58:	9000aef1 	.word	0x9000aef1
9000ae5c:	9000aed1 	.word	0x9000aed1
9000ae60:	9000aef1 	.word	0x9000aef1
9000ae64:	9000aef1 	.word	0x9000aef1
9000ae68:	9000aef1 	.word	0x9000aef1
9000ae6c:	9000aef1 	.word	0x9000aef1
9000ae70:	9000aef1 	.word	0x9000aef1
9000ae74:	9000aef1 	.word	0x9000aef1
9000ae78:	9000aef1 	.word	0x9000aef1
9000ae7c:	9000aed9 	.word	0x9000aed9
9000ae80:	9000aef1 	.word	0x9000aef1
9000ae84:	9000aef1 	.word	0x9000aef1
9000ae88:	9000aef1 	.word	0x9000aef1
9000ae8c:	9000aef1 	.word	0x9000aef1
9000ae90:	9000aef1 	.word	0x9000aef1
9000ae94:	9000aef1 	.word	0x9000aef1
9000ae98:	9000aef1 	.word	0x9000aef1
9000ae9c:	9000aee1 	.word	0x9000aee1
9000aea0:	9000aef1 	.word	0x9000aef1
9000aea4:	9000aef1 	.word	0x9000aef1
9000aea8:	9000aef1 	.word	0x9000aef1
9000aeac:	9000aef1 	.word	0x9000aef1
9000aeb0:	9000aef1 	.word	0x9000aef1
9000aeb4:	9000aef1 	.word	0x9000aef1
9000aeb8:	9000aef1 	.word	0x9000aef1
9000aebc:	9000aee9 	.word	0x9000aee9
9000aec0:	2301      	movs	r3, #1
9000aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aec6:	e0bc      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000aec8:	2304      	movs	r3, #4
9000aeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aece:	e0b8      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000aed0:	2308      	movs	r3, #8
9000aed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aed6:	e0b4      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000aed8:	2310      	movs	r3, #16
9000aeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aede:	e0b0      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000aee0:	2320      	movs	r3, #32
9000aee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aee6:	e0ac      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000aee8:	2340      	movs	r3, #64	@ 0x40
9000aeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aeee:	e0a8      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000aef0:	2380      	movs	r3, #128	@ 0x80
9000aef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aef6:	e0a4      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000aef8:	697b      	ldr	r3, [r7, #20]
9000aefa:	681b      	ldr	r3, [r3, #0]
9000aefc:	4a8f      	ldr	r2, [pc, #572]	@ (9000b13c <UART_SetConfig+0x6a0>)
9000aefe:	4293      	cmp	r3, r2
9000af00:	d130      	bne.n	9000af64 <UART_SetConfig+0x4c8>
9000af02:	4b8d      	ldr	r3, [pc, #564]	@ (9000b138 <UART_SetConfig+0x69c>)
9000af04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000af06:	f003 0307 	and.w	r3, r3, #7
9000af0a:	2b05      	cmp	r3, #5
9000af0c:	d826      	bhi.n	9000af5c <UART_SetConfig+0x4c0>
9000af0e:	a201      	add	r2, pc, #4	@ (adr r2, 9000af14 <UART_SetConfig+0x478>)
9000af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000af14:	9000af2d 	.word	0x9000af2d
9000af18:	9000af35 	.word	0x9000af35
9000af1c:	9000af3d 	.word	0x9000af3d
9000af20:	9000af45 	.word	0x9000af45
9000af24:	9000af4d 	.word	0x9000af4d
9000af28:	9000af55 	.word	0x9000af55
9000af2c:	2300      	movs	r3, #0
9000af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af32:	e086      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000af34:	2304      	movs	r3, #4
9000af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af3a:	e082      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000af3c:	2308      	movs	r3, #8
9000af3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af42:	e07e      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000af44:	2310      	movs	r3, #16
9000af46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af4a:	e07a      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000af4c:	2320      	movs	r3, #32
9000af4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af52:	e076      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000af54:	2340      	movs	r3, #64	@ 0x40
9000af56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af5a:	e072      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000af5c:	2380      	movs	r3, #128	@ 0x80
9000af5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af62:	e06e      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000af64:	697b      	ldr	r3, [r7, #20]
9000af66:	681b      	ldr	r3, [r3, #0]
9000af68:	4a75      	ldr	r2, [pc, #468]	@ (9000b140 <UART_SetConfig+0x6a4>)
9000af6a:	4293      	cmp	r3, r2
9000af6c:	d130      	bne.n	9000afd0 <UART_SetConfig+0x534>
9000af6e:	4b72      	ldr	r3, [pc, #456]	@ (9000b138 <UART_SetConfig+0x69c>)
9000af70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000af72:	f003 0307 	and.w	r3, r3, #7
9000af76:	2b05      	cmp	r3, #5
9000af78:	d826      	bhi.n	9000afc8 <UART_SetConfig+0x52c>
9000af7a:	a201      	add	r2, pc, #4	@ (adr r2, 9000af80 <UART_SetConfig+0x4e4>)
9000af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000af80:	9000af99 	.word	0x9000af99
9000af84:	9000afa1 	.word	0x9000afa1
9000af88:	9000afa9 	.word	0x9000afa9
9000af8c:	9000afb1 	.word	0x9000afb1
9000af90:	9000afb9 	.word	0x9000afb9
9000af94:	9000afc1 	.word	0x9000afc1
9000af98:	2300      	movs	r3, #0
9000af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af9e:	e050      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000afa0:	2304      	movs	r3, #4
9000afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000afa6:	e04c      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000afa8:	2308      	movs	r3, #8
9000afaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000afae:	e048      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000afb0:	2310      	movs	r3, #16
9000afb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000afb6:	e044      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000afb8:	2320      	movs	r3, #32
9000afba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000afbe:	e040      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000afc0:	2340      	movs	r3, #64	@ 0x40
9000afc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000afc6:	e03c      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000afc8:	2380      	movs	r3, #128	@ 0x80
9000afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000afce:	e038      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000afd0:	697b      	ldr	r3, [r7, #20]
9000afd2:	681b      	ldr	r3, [r3, #0]
9000afd4:	4a5b      	ldr	r2, [pc, #364]	@ (9000b144 <UART_SetConfig+0x6a8>)
9000afd6:	4293      	cmp	r3, r2
9000afd8:	d130      	bne.n	9000b03c <UART_SetConfig+0x5a0>
9000afda:	4b57      	ldr	r3, [pc, #348]	@ (9000b138 <UART_SetConfig+0x69c>)
9000afdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000afde:	f003 0307 	and.w	r3, r3, #7
9000afe2:	2b05      	cmp	r3, #5
9000afe4:	d826      	bhi.n	9000b034 <UART_SetConfig+0x598>
9000afe6:	a201      	add	r2, pc, #4	@ (adr r2, 9000afec <UART_SetConfig+0x550>)
9000afe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000afec:	9000b005 	.word	0x9000b005
9000aff0:	9000b00d 	.word	0x9000b00d
9000aff4:	9000b015 	.word	0x9000b015
9000aff8:	9000b01d 	.word	0x9000b01d
9000affc:	9000b025 	.word	0x9000b025
9000b000:	9000b02d 	.word	0x9000b02d
9000b004:	2302      	movs	r3, #2
9000b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b00a:	e01a      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000b00c:	2304      	movs	r3, #4
9000b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b012:	e016      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000b014:	2308      	movs	r3, #8
9000b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b01a:	e012      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000b01c:	2310      	movs	r3, #16
9000b01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b022:	e00e      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000b024:	2320      	movs	r3, #32
9000b026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b02a:	e00a      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000b02c:	2340      	movs	r3, #64	@ 0x40
9000b02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b032:	e006      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000b034:	2380      	movs	r3, #128	@ 0x80
9000b036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b03a:	e002      	b.n	9000b042 <UART_SetConfig+0x5a6>
9000b03c:	2380      	movs	r3, #128	@ 0x80
9000b03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000b042:	697b      	ldr	r3, [r7, #20]
9000b044:	681b      	ldr	r3, [r3, #0]
9000b046:	4a3f      	ldr	r2, [pc, #252]	@ (9000b144 <UART_SetConfig+0x6a8>)
9000b048:	4293      	cmp	r3, r2
9000b04a:	f040 80f8 	bne.w	9000b23e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000b04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000b052:	2b20      	cmp	r3, #32
9000b054:	dc46      	bgt.n	9000b0e4 <UART_SetConfig+0x648>
9000b056:	2b02      	cmp	r3, #2
9000b058:	f2c0 8082 	blt.w	9000b160 <UART_SetConfig+0x6c4>
9000b05c:	3b02      	subs	r3, #2
9000b05e:	2b1e      	cmp	r3, #30
9000b060:	d87e      	bhi.n	9000b160 <UART_SetConfig+0x6c4>
9000b062:	a201      	add	r2, pc, #4	@ (adr r2, 9000b068 <UART_SetConfig+0x5cc>)
9000b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b068:	9000b0eb 	.word	0x9000b0eb
9000b06c:	9000b161 	.word	0x9000b161
9000b070:	9000b0f3 	.word	0x9000b0f3
9000b074:	9000b161 	.word	0x9000b161
9000b078:	9000b161 	.word	0x9000b161
9000b07c:	9000b161 	.word	0x9000b161
9000b080:	9000b103 	.word	0x9000b103
9000b084:	9000b161 	.word	0x9000b161
9000b088:	9000b161 	.word	0x9000b161
9000b08c:	9000b161 	.word	0x9000b161
9000b090:	9000b161 	.word	0x9000b161
9000b094:	9000b161 	.word	0x9000b161
9000b098:	9000b161 	.word	0x9000b161
9000b09c:	9000b161 	.word	0x9000b161
9000b0a0:	9000b113 	.word	0x9000b113
9000b0a4:	9000b161 	.word	0x9000b161
9000b0a8:	9000b161 	.word	0x9000b161
9000b0ac:	9000b161 	.word	0x9000b161
9000b0b0:	9000b161 	.word	0x9000b161
9000b0b4:	9000b161 	.word	0x9000b161
9000b0b8:	9000b161 	.word	0x9000b161
9000b0bc:	9000b161 	.word	0x9000b161
9000b0c0:	9000b161 	.word	0x9000b161
9000b0c4:	9000b161 	.word	0x9000b161
9000b0c8:	9000b161 	.word	0x9000b161
9000b0cc:	9000b161 	.word	0x9000b161
9000b0d0:	9000b161 	.word	0x9000b161
9000b0d4:	9000b161 	.word	0x9000b161
9000b0d8:	9000b161 	.word	0x9000b161
9000b0dc:	9000b161 	.word	0x9000b161
9000b0e0:	9000b153 	.word	0x9000b153
9000b0e4:	2b40      	cmp	r3, #64	@ 0x40
9000b0e6:	d037      	beq.n	9000b158 <UART_SetConfig+0x6bc>
9000b0e8:	e03a      	b.n	9000b160 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000b0ea:	f7fe fdcd 	bl	90009c88 <HAL_RCCEx_GetD3PCLK1Freq>
9000b0ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b0f0:	e03c      	b.n	9000b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000b0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b0f6:	4618      	mov	r0, r3
9000b0f8:	f7fe fddc 	bl	90009cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b100:	e034      	b.n	9000b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b102:	f107 0318 	add.w	r3, r7, #24
9000b106:	4618      	mov	r0, r3
9000b108:	f7fe ff28 	bl	90009f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b10c:	69fb      	ldr	r3, [r7, #28]
9000b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b110:	e02c      	b.n	9000b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b112:	4b09      	ldr	r3, [pc, #36]	@ (9000b138 <UART_SetConfig+0x69c>)
9000b114:	681b      	ldr	r3, [r3, #0]
9000b116:	f003 0320 	and.w	r3, r3, #32
9000b11a:	2b00      	cmp	r3, #0
9000b11c:	d016      	beq.n	9000b14c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b11e:	4b06      	ldr	r3, [pc, #24]	@ (9000b138 <UART_SetConfig+0x69c>)
9000b120:	681b      	ldr	r3, [r3, #0]
9000b122:	08db      	lsrs	r3, r3, #3
9000b124:	f003 0303 	and.w	r3, r3, #3
9000b128:	4a07      	ldr	r2, [pc, #28]	@ (9000b148 <UART_SetConfig+0x6ac>)
9000b12a:	fa22 f303 	lsr.w	r3, r2, r3
9000b12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b130:	e01c      	b.n	9000b16c <UART_SetConfig+0x6d0>
9000b132:	bf00      	nop
9000b134:	40011400 	.word	0x40011400
9000b138:	58024400 	.word	0x58024400
9000b13c:	40007800 	.word	0x40007800
9000b140:	40007c00 	.word	0x40007c00
9000b144:	58000c00 	.word	0x58000c00
9000b148:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000b14c:	4b9d      	ldr	r3, [pc, #628]	@ (9000b3c4 <UART_SetConfig+0x928>)
9000b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b150:	e00c      	b.n	9000b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b152:	4b9d      	ldr	r3, [pc, #628]	@ (9000b3c8 <UART_SetConfig+0x92c>)
9000b154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b156:	e009      	b.n	9000b16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b15e:	e005      	b.n	9000b16c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000b160:	2300      	movs	r3, #0
9000b162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b164:	2301      	movs	r3, #1
9000b166:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b16a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000b16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b16e:	2b00      	cmp	r3, #0
9000b170:	f000 81de 	beq.w	9000b530 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000b174:	697b      	ldr	r3, [r7, #20]
9000b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b178:	4a94      	ldr	r2, [pc, #592]	@ (9000b3cc <UART_SetConfig+0x930>)
9000b17a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b17e:	461a      	mov	r2, r3
9000b180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b182:	fbb3 f3f2 	udiv	r3, r3, r2
9000b186:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000b188:	697b      	ldr	r3, [r7, #20]
9000b18a:	685a      	ldr	r2, [r3, #4]
9000b18c:	4613      	mov	r3, r2
9000b18e:	005b      	lsls	r3, r3, #1
9000b190:	4413      	add	r3, r2
9000b192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000b194:	429a      	cmp	r2, r3
9000b196:	d305      	bcc.n	9000b1a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000b198:	697b      	ldr	r3, [r7, #20]
9000b19a:	685b      	ldr	r3, [r3, #4]
9000b19c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000b19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000b1a0:	429a      	cmp	r2, r3
9000b1a2:	d903      	bls.n	9000b1ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000b1a4:	2301      	movs	r3, #1
9000b1a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000b1aa:	e1c1      	b.n	9000b530 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b1ae:	2200      	movs	r2, #0
9000b1b0:	60bb      	str	r3, [r7, #8]
9000b1b2:	60fa      	str	r2, [r7, #12]
9000b1b4:	697b      	ldr	r3, [r7, #20]
9000b1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b1b8:	4a84      	ldr	r2, [pc, #528]	@ (9000b3cc <UART_SetConfig+0x930>)
9000b1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b1be:	b29b      	uxth	r3, r3
9000b1c0:	2200      	movs	r2, #0
9000b1c2:	603b      	str	r3, [r7, #0]
9000b1c4:	607a      	str	r2, [r7, #4]
9000b1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
9000b1ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000b1ce:	f7f5 f8d7 	bl	90000380 <__aeabi_uldivmod>
9000b1d2:	4602      	mov	r2, r0
9000b1d4:	460b      	mov	r3, r1
9000b1d6:	4610      	mov	r0, r2
9000b1d8:	4619      	mov	r1, r3
9000b1da:	f04f 0200 	mov.w	r2, #0
9000b1de:	f04f 0300 	mov.w	r3, #0
9000b1e2:	020b      	lsls	r3, r1, #8
9000b1e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000b1e8:	0202      	lsls	r2, r0, #8
9000b1ea:	6979      	ldr	r1, [r7, #20]
9000b1ec:	6849      	ldr	r1, [r1, #4]
9000b1ee:	0849      	lsrs	r1, r1, #1
9000b1f0:	2000      	movs	r0, #0
9000b1f2:	460c      	mov	r4, r1
9000b1f4:	4605      	mov	r5, r0
9000b1f6:	eb12 0804 	adds.w	r8, r2, r4
9000b1fa:	eb43 0905 	adc.w	r9, r3, r5
9000b1fe:	697b      	ldr	r3, [r7, #20]
9000b200:	685b      	ldr	r3, [r3, #4]
9000b202:	2200      	movs	r2, #0
9000b204:	469a      	mov	sl, r3
9000b206:	4693      	mov	fp, r2
9000b208:	4652      	mov	r2, sl
9000b20a:	465b      	mov	r3, fp
9000b20c:	4640      	mov	r0, r8
9000b20e:	4649      	mov	r1, r9
9000b210:	f7f5 f8b6 	bl	90000380 <__aeabi_uldivmod>
9000b214:	4602      	mov	r2, r0
9000b216:	460b      	mov	r3, r1
9000b218:	4613      	mov	r3, r2
9000b21a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000b21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000b222:	d308      	bcc.n	9000b236 <UART_SetConfig+0x79a>
9000b224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000b22a:	d204      	bcs.n	9000b236 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000b22c:	697b      	ldr	r3, [r7, #20]
9000b22e:	681b      	ldr	r3, [r3, #0]
9000b230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000b232:	60da      	str	r2, [r3, #12]
9000b234:	e17c      	b.n	9000b530 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000b236:	2301      	movs	r3, #1
9000b238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000b23c:	e178      	b.n	9000b530 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000b23e:	697b      	ldr	r3, [r7, #20]
9000b240:	69db      	ldr	r3, [r3, #28]
9000b242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000b246:	f040 80c5 	bne.w	9000b3d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000b24a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000b24e:	2b20      	cmp	r3, #32
9000b250:	dc48      	bgt.n	9000b2e4 <UART_SetConfig+0x848>
9000b252:	2b00      	cmp	r3, #0
9000b254:	db7b      	blt.n	9000b34e <UART_SetConfig+0x8b2>
9000b256:	2b20      	cmp	r3, #32
9000b258:	d879      	bhi.n	9000b34e <UART_SetConfig+0x8b2>
9000b25a:	a201      	add	r2, pc, #4	@ (adr r2, 9000b260 <UART_SetConfig+0x7c4>)
9000b25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b260:	9000b2eb 	.word	0x9000b2eb
9000b264:	9000b2f3 	.word	0x9000b2f3
9000b268:	9000b34f 	.word	0x9000b34f
9000b26c:	9000b34f 	.word	0x9000b34f
9000b270:	9000b2fb 	.word	0x9000b2fb
9000b274:	9000b34f 	.word	0x9000b34f
9000b278:	9000b34f 	.word	0x9000b34f
9000b27c:	9000b34f 	.word	0x9000b34f
9000b280:	9000b30b 	.word	0x9000b30b
9000b284:	9000b34f 	.word	0x9000b34f
9000b288:	9000b34f 	.word	0x9000b34f
9000b28c:	9000b34f 	.word	0x9000b34f
9000b290:	9000b34f 	.word	0x9000b34f
9000b294:	9000b34f 	.word	0x9000b34f
9000b298:	9000b34f 	.word	0x9000b34f
9000b29c:	9000b34f 	.word	0x9000b34f
9000b2a0:	9000b31b 	.word	0x9000b31b
9000b2a4:	9000b34f 	.word	0x9000b34f
9000b2a8:	9000b34f 	.word	0x9000b34f
9000b2ac:	9000b34f 	.word	0x9000b34f
9000b2b0:	9000b34f 	.word	0x9000b34f
9000b2b4:	9000b34f 	.word	0x9000b34f
9000b2b8:	9000b34f 	.word	0x9000b34f
9000b2bc:	9000b34f 	.word	0x9000b34f
9000b2c0:	9000b34f 	.word	0x9000b34f
9000b2c4:	9000b34f 	.word	0x9000b34f
9000b2c8:	9000b34f 	.word	0x9000b34f
9000b2cc:	9000b34f 	.word	0x9000b34f
9000b2d0:	9000b34f 	.word	0x9000b34f
9000b2d4:	9000b34f 	.word	0x9000b34f
9000b2d8:	9000b34f 	.word	0x9000b34f
9000b2dc:	9000b34f 	.word	0x9000b34f
9000b2e0:	9000b341 	.word	0x9000b341
9000b2e4:	2b40      	cmp	r3, #64	@ 0x40
9000b2e6:	d02e      	beq.n	9000b346 <UART_SetConfig+0x8aa>
9000b2e8:	e031      	b.n	9000b34e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000b2ea:	f7fd fa97 	bl	9000881c <HAL_RCC_GetPCLK1Freq>
9000b2ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b2f0:	e033      	b.n	9000b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000b2f2:	f7fd faa9 	bl	90008848 <HAL_RCC_GetPCLK2Freq>
9000b2f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b2f8:	e02f      	b.n	9000b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000b2fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b2fe:	4618      	mov	r0, r3
9000b300:	f7fe fcd8 	bl	90009cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b308:	e027      	b.n	9000b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b30a:	f107 0318 	add.w	r3, r7, #24
9000b30e:	4618      	mov	r0, r3
9000b310:	f7fe fe24 	bl	90009f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b314:	69fb      	ldr	r3, [r7, #28]
9000b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b318:	e01f      	b.n	9000b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b31a:	4b2d      	ldr	r3, [pc, #180]	@ (9000b3d0 <UART_SetConfig+0x934>)
9000b31c:	681b      	ldr	r3, [r3, #0]
9000b31e:	f003 0320 	and.w	r3, r3, #32
9000b322:	2b00      	cmp	r3, #0
9000b324:	d009      	beq.n	9000b33a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b326:	4b2a      	ldr	r3, [pc, #168]	@ (9000b3d0 <UART_SetConfig+0x934>)
9000b328:	681b      	ldr	r3, [r3, #0]
9000b32a:	08db      	lsrs	r3, r3, #3
9000b32c:	f003 0303 	and.w	r3, r3, #3
9000b330:	4a24      	ldr	r2, [pc, #144]	@ (9000b3c4 <UART_SetConfig+0x928>)
9000b332:	fa22 f303 	lsr.w	r3, r2, r3
9000b336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b338:	e00f      	b.n	9000b35a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000b33a:	4b22      	ldr	r3, [pc, #136]	@ (9000b3c4 <UART_SetConfig+0x928>)
9000b33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b33e:	e00c      	b.n	9000b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b340:	4b21      	ldr	r3, [pc, #132]	@ (9000b3c8 <UART_SetConfig+0x92c>)
9000b342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b344:	e009      	b.n	9000b35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b34c:	e005      	b.n	9000b35a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000b34e:	2300      	movs	r3, #0
9000b350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b352:	2301      	movs	r3, #1
9000b354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000b35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b35c:	2b00      	cmp	r3, #0
9000b35e:	f000 80e7 	beq.w	9000b530 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b362:	697b      	ldr	r3, [r7, #20]
9000b364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b366:	4a19      	ldr	r2, [pc, #100]	@ (9000b3cc <UART_SetConfig+0x930>)
9000b368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b36c:	461a      	mov	r2, r3
9000b36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b370:	fbb3 f3f2 	udiv	r3, r3, r2
9000b374:	005a      	lsls	r2, r3, #1
9000b376:	697b      	ldr	r3, [r7, #20]
9000b378:	685b      	ldr	r3, [r3, #4]
9000b37a:	085b      	lsrs	r3, r3, #1
9000b37c:	441a      	add	r2, r3
9000b37e:	697b      	ldr	r3, [r7, #20]
9000b380:	685b      	ldr	r3, [r3, #4]
9000b382:	fbb2 f3f3 	udiv	r3, r2, r3
9000b386:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b38a:	2b0f      	cmp	r3, #15
9000b38c:	d916      	bls.n	9000b3bc <UART_SetConfig+0x920>
9000b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b394:	d212      	bcs.n	9000b3bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000b396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b398:	b29b      	uxth	r3, r3
9000b39a:	f023 030f 	bic.w	r3, r3, #15
9000b39e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b3a2:	085b      	lsrs	r3, r3, #1
9000b3a4:	b29b      	uxth	r3, r3
9000b3a6:	f003 0307 	and.w	r3, r3, #7
9000b3aa:	b29a      	uxth	r2, r3
9000b3ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000b3ae:	4313      	orrs	r3, r2
9000b3b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000b3b2:	697b      	ldr	r3, [r7, #20]
9000b3b4:	681b      	ldr	r3, [r3, #0]
9000b3b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000b3b8:	60da      	str	r2, [r3, #12]
9000b3ba:	e0b9      	b.n	9000b530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000b3bc:	2301      	movs	r3, #1
9000b3be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000b3c2:	e0b5      	b.n	9000b530 <UART_SetConfig+0xa94>
9000b3c4:	03d09000 	.word	0x03d09000
9000b3c8:	003d0900 	.word	0x003d0900
9000b3cc:	9000dc5c 	.word	0x9000dc5c
9000b3d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000b3d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000b3d8:	2b20      	cmp	r3, #32
9000b3da:	dc49      	bgt.n	9000b470 <UART_SetConfig+0x9d4>
9000b3dc:	2b00      	cmp	r3, #0
9000b3de:	db7c      	blt.n	9000b4da <UART_SetConfig+0xa3e>
9000b3e0:	2b20      	cmp	r3, #32
9000b3e2:	d87a      	bhi.n	9000b4da <UART_SetConfig+0xa3e>
9000b3e4:	a201      	add	r2, pc, #4	@ (adr r2, 9000b3ec <UART_SetConfig+0x950>)
9000b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b3ea:	bf00      	nop
9000b3ec:	9000b477 	.word	0x9000b477
9000b3f0:	9000b47f 	.word	0x9000b47f
9000b3f4:	9000b4db 	.word	0x9000b4db
9000b3f8:	9000b4db 	.word	0x9000b4db
9000b3fc:	9000b487 	.word	0x9000b487
9000b400:	9000b4db 	.word	0x9000b4db
9000b404:	9000b4db 	.word	0x9000b4db
9000b408:	9000b4db 	.word	0x9000b4db
9000b40c:	9000b497 	.word	0x9000b497
9000b410:	9000b4db 	.word	0x9000b4db
9000b414:	9000b4db 	.word	0x9000b4db
9000b418:	9000b4db 	.word	0x9000b4db
9000b41c:	9000b4db 	.word	0x9000b4db
9000b420:	9000b4db 	.word	0x9000b4db
9000b424:	9000b4db 	.word	0x9000b4db
9000b428:	9000b4db 	.word	0x9000b4db
9000b42c:	9000b4a7 	.word	0x9000b4a7
9000b430:	9000b4db 	.word	0x9000b4db
9000b434:	9000b4db 	.word	0x9000b4db
9000b438:	9000b4db 	.word	0x9000b4db
9000b43c:	9000b4db 	.word	0x9000b4db
9000b440:	9000b4db 	.word	0x9000b4db
9000b444:	9000b4db 	.word	0x9000b4db
9000b448:	9000b4db 	.word	0x9000b4db
9000b44c:	9000b4db 	.word	0x9000b4db
9000b450:	9000b4db 	.word	0x9000b4db
9000b454:	9000b4db 	.word	0x9000b4db
9000b458:	9000b4db 	.word	0x9000b4db
9000b45c:	9000b4db 	.word	0x9000b4db
9000b460:	9000b4db 	.word	0x9000b4db
9000b464:	9000b4db 	.word	0x9000b4db
9000b468:	9000b4db 	.word	0x9000b4db
9000b46c:	9000b4cd 	.word	0x9000b4cd
9000b470:	2b40      	cmp	r3, #64	@ 0x40
9000b472:	d02e      	beq.n	9000b4d2 <UART_SetConfig+0xa36>
9000b474:	e031      	b.n	9000b4da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000b476:	f7fd f9d1 	bl	9000881c <HAL_RCC_GetPCLK1Freq>
9000b47a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b47c:	e033      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000b47e:	f7fd f9e3 	bl	90008848 <HAL_RCC_GetPCLK2Freq>
9000b482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b484:	e02f      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000b486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b48a:	4618      	mov	r0, r3
9000b48c:	f7fe fc12 	bl	90009cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b494:	e027      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b496:	f107 0318 	add.w	r3, r7, #24
9000b49a:	4618      	mov	r0, r3
9000b49c:	f7fe fd5e 	bl	90009f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b4a0:	69fb      	ldr	r3, [r7, #28]
9000b4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b4a4:	e01f      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b4a6:	4b2d      	ldr	r3, [pc, #180]	@ (9000b55c <UART_SetConfig+0xac0>)
9000b4a8:	681b      	ldr	r3, [r3, #0]
9000b4aa:	f003 0320 	and.w	r3, r3, #32
9000b4ae:	2b00      	cmp	r3, #0
9000b4b0:	d009      	beq.n	9000b4c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b4b2:	4b2a      	ldr	r3, [pc, #168]	@ (9000b55c <UART_SetConfig+0xac0>)
9000b4b4:	681b      	ldr	r3, [r3, #0]
9000b4b6:	08db      	lsrs	r3, r3, #3
9000b4b8:	f003 0303 	and.w	r3, r3, #3
9000b4bc:	4a28      	ldr	r2, [pc, #160]	@ (9000b560 <UART_SetConfig+0xac4>)
9000b4be:	fa22 f303 	lsr.w	r3, r2, r3
9000b4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b4c4:	e00f      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000b4c6:	4b26      	ldr	r3, [pc, #152]	@ (9000b560 <UART_SetConfig+0xac4>)
9000b4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b4ca:	e00c      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b4cc:	4b25      	ldr	r3, [pc, #148]	@ (9000b564 <UART_SetConfig+0xac8>)
9000b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b4d0:	e009      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b4d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b4d8:	e005      	b.n	9000b4e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000b4da:	2300      	movs	r3, #0
9000b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b4de:	2301      	movs	r3, #1
9000b4e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b4e4:	bf00      	nop
    }

    if (pclk != 0U)
9000b4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b4e8:	2b00      	cmp	r3, #0
9000b4ea:	d021      	beq.n	9000b530 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b4ec:	697b      	ldr	r3, [r7, #20]
9000b4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b4f0:	4a1d      	ldr	r2, [pc, #116]	@ (9000b568 <UART_SetConfig+0xacc>)
9000b4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b4f6:	461a      	mov	r2, r3
9000b4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b4fa:	fbb3 f2f2 	udiv	r2, r3, r2
9000b4fe:	697b      	ldr	r3, [r7, #20]
9000b500:	685b      	ldr	r3, [r3, #4]
9000b502:	085b      	lsrs	r3, r3, #1
9000b504:	441a      	add	r2, r3
9000b506:	697b      	ldr	r3, [r7, #20]
9000b508:	685b      	ldr	r3, [r3, #4]
9000b50a:	fbb2 f3f3 	udiv	r3, r2, r3
9000b50e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000b510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b512:	2b0f      	cmp	r3, #15
9000b514:	d909      	bls.n	9000b52a <UART_SetConfig+0xa8e>
9000b516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b51c:	d205      	bcs.n	9000b52a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000b51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b520:	b29a      	uxth	r2, r3
9000b522:	697b      	ldr	r3, [r7, #20]
9000b524:	681b      	ldr	r3, [r3, #0]
9000b526:	60da      	str	r2, [r3, #12]
9000b528:	e002      	b.n	9000b530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000b52a:	2301      	movs	r3, #1
9000b52c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000b530:	697b      	ldr	r3, [r7, #20]
9000b532:	2201      	movs	r2, #1
9000b534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000b538:	697b      	ldr	r3, [r7, #20]
9000b53a:	2201      	movs	r2, #1
9000b53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000b540:	697b      	ldr	r3, [r7, #20]
9000b542:	2200      	movs	r2, #0
9000b544:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000b546:	697b      	ldr	r3, [r7, #20]
9000b548:	2200      	movs	r2, #0
9000b54a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000b54c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000b550:	4618      	mov	r0, r3
9000b552:	3748      	adds	r7, #72	@ 0x48
9000b554:	46bd      	mov	sp, r7
9000b556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000b55a:	bf00      	nop
9000b55c:	58024400 	.word	0x58024400
9000b560:	03d09000 	.word	0x03d09000
9000b564:	003d0900 	.word	0x003d0900
9000b568:	9000dc5c 	.word	0x9000dc5c

9000b56c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000b56c:	b480      	push	{r7}
9000b56e:	b083      	sub	sp, #12
9000b570:	af00      	add	r7, sp, #0
9000b572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000b574:	687b      	ldr	r3, [r7, #4]
9000b576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b578:	f003 0308 	and.w	r3, r3, #8
9000b57c:	2b00      	cmp	r3, #0
9000b57e:	d00a      	beq.n	9000b596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000b580:	687b      	ldr	r3, [r7, #4]
9000b582:	681b      	ldr	r3, [r3, #0]
9000b584:	685b      	ldr	r3, [r3, #4]
9000b586:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000b58a:	687b      	ldr	r3, [r7, #4]
9000b58c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000b58e:	687b      	ldr	r3, [r7, #4]
9000b590:	681b      	ldr	r3, [r3, #0]
9000b592:	430a      	orrs	r2, r1
9000b594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000b596:	687b      	ldr	r3, [r7, #4]
9000b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b59a:	f003 0301 	and.w	r3, r3, #1
9000b59e:	2b00      	cmp	r3, #0
9000b5a0:	d00a      	beq.n	9000b5b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000b5a2:	687b      	ldr	r3, [r7, #4]
9000b5a4:	681b      	ldr	r3, [r3, #0]
9000b5a6:	685b      	ldr	r3, [r3, #4]
9000b5a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000b5ac:	687b      	ldr	r3, [r7, #4]
9000b5ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000b5b0:	687b      	ldr	r3, [r7, #4]
9000b5b2:	681b      	ldr	r3, [r3, #0]
9000b5b4:	430a      	orrs	r2, r1
9000b5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000b5b8:	687b      	ldr	r3, [r7, #4]
9000b5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b5bc:	f003 0302 	and.w	r3, r3, #2
9000b5c0:	2b00      	cmp	r3, #0
9000b5c2:	d00a      	beq.n	9000b5da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000b5c4:	687b      	ldr	r3, [r7, #4]
9000b5c6:	681b      	ldr	r3, [r3, #0]
9000b5c8:	685b      	ldr	r3, [r3, #4]
9000b5ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000b5ce:	687b      	ldr	r3, [r7, #4]
9000b5d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000b5d2:	687b      	ldr	r3, [r7, #4]
9000b5d4:	681b      	ldr	r3, [r3, #0]
9000b5d6:	430a      	orrs	r2, r1
9000b5d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000b5da:	687b      	ldr	r3, [r7, #4]
9000b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b5de:	f003 0304 	and.w	r3, r3, #4
9000b5e2:	2b00      	cmp	r3, #0
9000b5e4:	d00a      	beq.n	9000b5fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000b5e6:	687b      	ldr	r3, [r7, #4]
9000b5e8:	681b      	ldr	r3, [r3, #0]
9000b5ea:	685b      	ldr	r3, [r3, #4]
9000b5ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000b5f0:	687b      	ldr	r3, [r7, #4]
9000b5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000b5f4:	687b      	ldr	r3, [r7, #4]
9000b5f6:	681b      	ldr	r3, [r3, #0]
9000b5f8:	430a      	orrs	r2, r1
9000b5fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000b5fc:	687b      	ldr	r3, [r7, #4]
9000b5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b600:	f003 0310 	and.w	r3, r3, #16
9000b604:	2b00      	cmp	r3, #0
9000b606:	d00a      	beq.n	9000b61e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000b608:	687b      	ldr	r3, [r7, #4]
9000b60a:	681b      	ldr	r3, [r3, #0]
9000b60c:	689b      	ldr	r3, [r3, #8]
9000b60e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000b612:	687b      	ldr	r3, [r7, #4]
9000b614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000b616:	687b      	ldr	r3, [r7, #4]
9000b618:	681b      	ldr	r3, [r3, #0]
9000b61a:	430a      	orrs	r2, r1
9000b61c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000b61e:	687b      	ldr	r3, [r7, #4]
9000b620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b622:	f003 0320 	and.w	r3, r3, #32
9000b626:	2b00      	cmp	r3, #0
9000b628:	d00a      	beq.n	9000b640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000b62a:	687b      	ldr	r3, [r7, #4]
9000b62c:	681b      	ldr	r3, [r3, #0]
9000b62e:	689b      	ldr	r3, [r3, #8]
9000b630:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000b634:	687b      	ldr	r3, [r7, #4]
9000b636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000b638:	687b      	ldr	r3, [r7, #4]
9000b63a:	681b      	ldr	r3, [r3, #0]
9000b63c:	430a      	orrs	r2, r1
9000b63e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000b640:	687b      	ldr	r3, [r7, #4]
9000b642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b648:	2b00      	cmp	r3, #0
9000b64a:	d01a      	beq.n	9000b682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000b64c:	687b      	ldr	r3, [r7, #4]
9000b64e:	681b      	ldr	r3, [r3, #0]
9000b650:	685b      	ldr	r3, [r3, #4]
9000b652:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000b656:	687b      	ldr	r3, [r7, #4]
9000b658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000b65a:	687b      	ldr	r3, [r7, #4]
9000b65c:	681b      	ldr	r3, [r3, #0]
9000b65e:	430a      	orrs	r2, r1
9000b660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000b662:	687b      	ldr	r3, [r7, #4]
9000b664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000b666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000b66a:	d10a      	bne.n	9000b682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000b66c:	687b      	ldr	r3, [r7, #4]
9000b66e:	681b      	ldr	r3, [r3, #0]
9000b670:	685b      	ldr	r3, [r3, #4]
9000b672:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000b676:	687b      	ldr	r3, [r7, #4]
9000b678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000b67a:	687b      	ldr	r3, [r7, #4]
9000b67c:	681b      	ldr	r3, [r3, #0]
9000b67e:	430a      	orrs	r2, r1
9000b680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000b682:	687b      	ldr	r3, [r7, #4]
9000b684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b68a:	2b00      	cmp	r3, #0
9000b68c:	d00a      	beq.n	9000b6a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000b68e:	687b      	ldr	r3, [r7, #4]
9000b690:	681b      	ldr	r3, [r3, #0]
9000b692:	685b      	ldr	r3, [r3, #4]
9000b694:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000b698:	687b      	ldr	r3, [r7, #4]
9000b69a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000b69c:	687b      	ldr	r3, [r7, #4]
9000b69e:	681b      	ldr	r3, [r3, #0]
9000b6a0:	430a      	orrs	r2, r1
9000b6a2:	605a      	str	r2, [r3, #4]
  }
}
9000b6a4:	bf00      	nop
9000b6a6:	370c      	adds	r7, #12
9000b6a8:	46bd      	mov	sp, r7
9000b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b6ae:	4770      	bx	lr

9000b6b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000b6b0:	b580      	push	{r7, lr}
9000b6b2:	b098      	sub	sp, #96	@ 0x60
9000b6b4:	af02      	add	r7, sp, #8
9000b6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000b6b8:	687b      	ldr	r3, [r7, #4]
9000b6ba:	2200      	movs	r2, #0
9000b6bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000b6c0:	f7f8 f99e 	bl	90003a00 <HAL_GetTick>
9000b6c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000b6c6:	687b      	ldr	r3, [r7, #4]
9000b6c8:	681b      	ldr	r3, [r3, #0]
9000b6ca:	681b      	ldr	r3, [r3, #0]
9000b6cc:	f003 0308 	and.w	r3, r3, #8
9000b6d0:	2b08      	cmp	r3, #8
9000b6d2:	d12f      	bne.n	9000b734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000b6d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000b6d8:	9300      	str	r3, [sp, #0]
9000b6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000b6dc:	2200      	movs	r2, #0
9000b6de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000b6e2:	6878      	ldr	r0, [r7, #4]
9000b6e4:	f000 f88e 	bl	9000b804 <UART_WaitOnFlagUntilTimeout>
9000b6e8:	4603      	mov	r3, r0
9000b6ea:	2b00      	cmp	r3, #0
9000b6ec:	d022      	beq.n	9000b734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000b6ee:	687b      	ldr	r3, [r7, #4]
9000b6f0:	681b      	ldr	r3, [r3, #0]
9000b6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b6f6:	e853 3f00 	ldrex	r3, [r3]
9000b6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000b6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000b6fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000b702:	653b      	str	r3, [r7, #80]	@ 0x50
9000b704:	687b      	ldr	r3, [r7, #4]
9000b706:	681b      	ldr	r3, [r3, #0]
9000b708:	461a      	mov	r2, r3
9000b70a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000b70c:	647b      	str	r3, [r7, #68]	@ 0x44
9000b70e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000b712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000b714:	e841 2300 	strex	r3, r2, [r1]
9000b718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000b71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b71c:	2b00      	cmp	r3, #0
9000b71e:	d1e6      	bne.n	9000b6ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000b720:	687b      	ldr	r3, [r7, #4]
9000b722:	2220      	movs	r2, #32
9000b724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000b728:	687b      	ldr	r3, [r7, #4]
9000b72a:	2200      	movs	r2, #0
9000b72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000b730:	2303      	movs	r3, #3
9000b732:	e063      	b.n	9000b7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000b734:	687b      	ldr	r3, [r7, #4]
9000b736:	681b      	ldr	r3, [r3, #0]
9000b738:	681b      	ldr	r3, [r3, #0]
9000b73a:	f003 0304 	and.w	r3, r3, #4
9000b73e:	2b04      	cmp	r3, #4
9000b740:	d149      	bne.n	9000b7d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000b742:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000b746:	9300      	str	r3, [sp, #0]
9000b748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000b74a:	2200      	movs	r2, #0
9000b74c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000b750:	6878      	ldr	r0, [r7, #4]
9000b752:	f000 f857 	bl	9000b804 <UART_WaitOnFlagUntilTimeout>
9000b756:	4603      	mov	r3, r0
9000b758:	2b00      	cmp	r3, #0
9000b75a:	d03c      	beq.n	9000b7d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000b75c:	687b      	ldr	r3, [r7, #4]
9000b75e:	681b      	ldr	r3, [r3, #0]
9000b760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b764:	e853 3f00 	ldrex	r3, [r3]
9000b768:	623b      	str	r3, [r7, #32]
   return(result);
9000b76a:	6a3b      	ldr	r3, [r7, #32]
9000b76c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000b770:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000b772:	687b      	ldr	r3, [r7, #4]
9000b774:	681b      	ldr	r3, [r3, #0]
9000b776:	461a      	mov	r2, r3
9000b778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000b77a:	633b      	str	r3, [r7, #48]	@ 0x30
9000b77c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000b780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000b782:	e841 2300 	strex	r3, r2, [r1]
9000b786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000b788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b78a:	2b00      	cmp	r3, #0
9000b78c:	d1e6      	bne.n	9000b75c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000b78e:	687b      	ldr	r3, [r7, #4]
9000b790:	681b      	ldr	r3, [r3, #0]
9000b792:	3308      	adds	r3, #8
9000b794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b796:	693b      	ldr	r3, [r7, #16]
9000b798:	e853 3f00 	ldrex	r3, [r3]
9000b79c:	60fb      	str	r3, [r7, #12]
   return(result);
9000b79e:	68fb      	ldr	r3, [r7, #12]
9000b7a0:	f023 0301 	bic.w	r3, r3, #1
9000b7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
9000b7a6:	687b      	ldr	r3, [r7, #4]
9000b7a8:	681b      	ldr	r3, [r3, #0]
9000b7aa:	3308      	adds	r3, #8
9000b7ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000b7ae:	61fa      	str	r2, [r7, #28]
9000b7b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b7b2:	69b9      	ldr	r1, [r7, #24]
9000b7b4:	69fa      	ldr	r2, [r7, #28]
9000b7b6:	e841 2300 	strex	r3, r2, [r1]
9000b7ba:	617b      	str	r3, [r7, #20]
   return(result);
9000b7bc:	697b      	ldr	r3, [r7, #20]
9000b7be:	2b00      	cmp	r3, #0
9000b7c0:	d1e5      	bne.n	9000b78e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000b7c2:	687b      	ldr	r3, [r7, #4]
9000b7c4:	2220      	movs	r2, #32
9000b7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000b7ca:	687b      	ldr	r3, [r7, #4]
9000b7cc:	2200      	movs	r2, #0
9000b7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000b7d2:	2303      	movs	r3, #3
9000b7d4:	e012      	b.n	9000b7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000b7d6:	687b      	ldr	r3, [r7, #4]
9000b7d8:	2220      	movs	r2, #32
9000b7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000b7de:	687b      	ldr	r3, [r7, #4]
9000b7e0:	2220      	movs	r2, #32
9000b7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000b7e6:	687b      	ldr	r3, [r7, #4]
9000b7e8:	2200      	movs	r2, #0
9000b7ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000b7ec:	687b      	ldr	r3, [r7, #4]
9000b7ee:	2200      	movs	r2, #0
9000b7f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000b7f2:	687b      	ldr	r3, [r7, #4]
9000b7f4:	2200      	movs	r2, #0
9000b7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000b7fa:	2300      	movs	r3, #0
}
9000b7fc:	4618      	mov	r0, r3
9000b7fe:	3758      	adds	r7, #88	@ 0x58
9000b800:	46bd      	mov	sp, r7
9000b802:	bd80      	pop	{r7, pc}

9000b804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000b804:	b580      	push	{r7, lr}
9000b806:	b084      	sub	sp, #16
9000b808:	af00      	add	r7, sp, #0
9000b80a:	60f8      	str	r0, [r7, #12]
9000b80c:	60b9      	str	r1, [r7, #8]
9000b80e:	603b      	str	r3, [r7, #0]
9000b810:	4613      	mov	r3, r2
9000b812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000b814:	e04f      	b.n	9000b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000b816:	69bb      	ldr	r3, [r7, #24]
9000b818:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b81c:	d04b      	beq.n	9000b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000b81e:	f7f8 f8ef 	bl	90003a00 <HAL_GetTick>
9000b822:	4602      	mov	r2, r0
9000b824:	683b      	ldr	r3, [r7, #0]
9000b826:	1ad3      	subs	r3, r2, r3
9000b828:	69ba      	ldr	r2, [r7, #24]
9000b82a:	429a      	cmp	r2, r3
9000b82c:	d302      	bcc.n	9000b834 <UART_WaitOnFlagUntilTimeout+0x30>
9000b82e:	69bb      	ldr	r3, [r7, #24]
9000b830:	2b00      	cmp	r3, #0
9000b832:	d101      	bne.n	9000b838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000b834:	2303      	movs	r3, #3
9000b836:	e04e      	b.n	9000b8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000b838:	68fb      	ldr	r3, [r7, #12]
9000b83a:	681b      	ldr	r3, [r3, #0]
9000b83c:	681b      	ldr	r3, [r3, #0]
9000b83e:	f003 0304 	and.w	r3, r3, #4
9000b842:	2b00      	cmp	r3, #0
9000b844:	d037      	beq.n	9000b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
9000b846:	68bb      	ldr	r3, [r7, #8]
9000b848:	2b80      	cmp	r3, #128	@ 0x80
9000b84a:	d034      	beq.n	9000b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
9000b84c:	68bb      	ldr	r3, [r7, #8]
9000b84e:	2b40      	cmp	r3, #64	@ 0x40
9000b850:	d031      	beq.n	9000b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000b852:	68fb      	ldr	r3, [r7, #12]
9000b854:	681b      	ldr	r3, [r3, #0]
9000b856:	69db      	ldr	r3, [r3, #28]
9000b858:	f003 0308 	and.w	r3, r3, #8
9000b85c:	2b08      	cmp	r3, #8
9000b85e:	d110      	bne.n	9000b882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000b860:	68fb      	ldr	r3, [r7, #12]
9000b862:	681b      	ldr	r3, [r3, #0]
9000b864:	2208      	movs	r2, #8
9000b866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000b868:	68f8      	ldr	r0, [r7, #12]
9000b86a:	f000 f839 	bl	9000b8e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000b86e:	68fb      	ldr	r3, [r7, #12]
9000b870:	2208      	movs	r2, #8
9000b872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000b876:	68fb      	ldr	r3, [r7, #12]
9000b878:	2200      	movs	r2, #0
9000b87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000b87e:	2301      	movs	r3, #1
9000b880:	e029      	b.n	9000b8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000b882:	68fb      	ldr	r3, [r7, #12]
9000b884:	681b      	ldr	r3, [r3, #0]
9000b886:	69db      	ldr	r3, [r3, #28]
9000b888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000b88c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000b890:	d111      	bne.n	9000b8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000b892:	68fb      	ldr	r3, [r7, #12]
9000b894:	681b      	ldr	r3, [r3, #0]
9000b896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000b89a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000b89c:	68f8      	ldr	r0, [r7, #12]
9000b89e:	f000 f81f 	bl	9000b8e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000b8a2:	68fb      	ldr	r3, [r7, #12]
9000b8a4:	2220      	movs	r2, #32
9000b8a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000b8aa:	68fb      	ldr	r3, [r7, #12]
9000b8ac:	2200      	movs	r2, #0
9000b8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000b8b2:	2303      	movs	r3, #3
9000b8b4:	e00f      	b.n	9000b8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000b8b6:	68fb      	ldr	r3, [r7, #12]
9000b8b8:	681b      	ldr	r3, [r3, #0]
9000b8ba:	69da      	ldr	r2, [r3, #28]
9000b8bc:	68bb      	ldr	r3, [r7, #8]
9000b8be:	4013      	ands	r3, r2
9000b8c0:	68ba      	ldr	r2, [r7, #8]
9000b8c2:	429a      	cmp	r2, r3
9000b8c4:	bf0c      	ite	eq
9000b8c6:	2301      	moveq	r3, #1
9000b8c8:	2300      	movne	r3, #0
9000b8ca:	b2db      	uxtb	r3, r3
9000b8cc:	461a      	mov	r2, r3
9000b8ce:	79fb      	ldrb	r3, [r7, #7]
9000b8d0:	429a      	cmp	r2, r3
9000b8d2:	d0a0      	beq.n	9000b816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000b8d4:	2300      	movs	r3, #0
}
9000b8d6:	4618      	mov	r0, r3
9000b8d8:	3710      	adds	r7, #16
9000b8da:	46bd      	mov	sp, r7
9000b8dc:	bd80      	pop	{r7, pc}
	...

9000b8e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000b8e0:	b480      	push	{r7}
9000b8e2:	b095      	sub	sp, #84	@ 0x54
9000b8e4:	af00      	add	r7, sp, #0
9000b8e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000b8e8:	687b      	ldr	r3, [r7, #4]
9000b8ea:	681b      	ldr	r3, [r3, #0]
9000b8ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000b8f0:	e853 3f00 	ldrex	r3, [r3]
9000b8f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000b8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000b8f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000b8fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000b8fe:	687b      	ldr	r3, [r7, #4]
9000b900:	681b      	ldr	r3, [r3, #0]
9000b902:	461a      	mov	r2, r3
9000b904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000b906:	643b      	str	r3, [r7, #64]	@ 0x40
9000b908:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b90a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000b90c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000b90e:	e841 2300 	strex	r3, r2, [r1]
9000b912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b916:	2b00      	cmp	r3, #0
9000b918:	d1e6      	bne.n	9000b8e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000b91a:	687b      	ldr	r3, [r7, #4]
9000b91c:	681b      	ldr	r3, [r3, #0]
9000b91e:	3308      	adds	r3, #8
9000b920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b922:	6a3b      	ldr	r3, [r7, #32]
9000b924:	e853 3f00 	ldrex	r3, [r3]
9000b928:	61fb      	str	r3, [r7, #28]
   return(result);
9000b92a:	69fa      	ldr	r2, [r7, #28]
9000b92c:	4b1e      	ldr	r3, [pc, #120]	@ (9000b9a8 <UART_EndRxTransfer+0xc8>)
9000b92e:	4013      	ands	r3, r2
9000b930:	64bb      	str	r3, [r7, #72]	@ 0x48
9000b932:	687b      	ldr	r3, [r7, #4]
9000b934:	681b      	ldr	r3, [r3, #0]
9000b936:	3308      	adds	r3, #8
9000b938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000b93a:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000b93c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b93e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000b940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000b942:	e841 2300 	strex	r3, r2, [r1]
9000b946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b94a:	2b00      	cmp	r3, #0
9000b94c:	d1e5      	bne.n	9000b91a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000b94e:	687b      	ldr	r3, [r7, #4]
9000b950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000b952:	2b01      	cmp	r3, #1
9000b954:	d118      	bne.n	9000b988 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000b956:	687b      	ldr	r3, [r7, #4]
9000b958:	681b      	ldr	r3, [r3, #0]
9000b95a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b95c:	68fb      	ldr	r3, [r7, #12]
9000b95e:	e853 3f00 	ldrex	r3, [r3]
9000b962:	60bb      	str	r3, [r7, #8]
   return(result);
9000b964:	68bb      	ldr	r3, [r7, #8]
9000b966:	f023 0310 	bic.w	r3, r3, #16
9000b96a:	647b      	str	r3, [r7, #68]	@ 0x44
9000b96c:	687b      	ldr	r3, [r7, #4]
9000b96e:	681b      	ldr	r3, [r3, #0]
9000b970:	461a      	mov	r2, r3
9000b972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000b974:	61bb      	str	r3, [r7, #24]
9000b976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b978:	6979      	ldr	r1, [r7, #20]
9000b97a:	69ba      	ldr	r2, [r7, #24]
9000b97c:	e841 2300 	strex	r3, r2, [r1]
9000b980:	613b      	str	r3, [r7, #16]
   return(result);
9000b982:	693b      	ldr	r3, [r7, #16]
9000b984:	2b00      	cmp	r3, #0
9000b986:	d1e6      	bne.n	9000b956 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000b988:	687b      	ldr	r3, [r7, #4]
9000b98a:	2220      	movs	r2, #32
9000b98c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000b990:	687b      	ldr	r3, [r7, #4]
9000b992:	2200      	movs	r2, #0
9000b994:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000b996:	687b      	ldr	r3, [r7, #4]
9000b998:	2200      	movs	r2, #0
9000b99a:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000b99c:	bf00      	nop
9000b99e:	3754      	adds	r7, #84	@ 0x54
9000b9a0:	46bd      	mov	sp, r7
9000b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b9a6:	4770      	bx	lr
9000b9a8:	effffffe 	.word	0xeffffffe

9000b9ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000b9ac:	b480      	push	{r7}
9000b9ae:	b085      	sub	sp, #20
9000b9b0:	af00      	add	r7, sp, #0
9000b9b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000b9b4:	687b      	ldr	r3, [r7, #4]
9000b9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000b9ba:	2b01      	cmp	r3, #1
9000b9bc:	d101      	bne.n	9000b9c2 <HAL_UARTEx_DisableFifoMode+0x16>
9000b9be:	2302      	movs	r3, #2
9000b9c0:	e027      	b.n	9000ba12 <HAL_UARTEx_DisableFifoMode+0x66>
9000b9c2:	687b      	ldr	r3, [r7, #4]
9000b9c4:	2201      	movs	r2, #1
9000b9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000b9ca:	687b      	ldr	r3, [r7, #4]
9000b9cc:	2224      	movs	r2, #36	@ 0x24
9000b9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000b9d2:	687b      	ldr	r3, [r7, #4]
9000b9d4:	681b      	ldr	r3, [r3, #0]
9000b9d6:	681b      	ldr	r3, [r3, #0]
9000b9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000b9da:	687b      	ldr	r3, [r7, #4]
9000b9dc:	681b      	ldr	r3, [r3, #0]
9000b9de:	681a      	ldr	r2, [r3, #0]
9000b9e0:	687b      	ldr	r3, [r7, #4]
9000b9e2:	681b      	ldr	r3, [r3, #0]
9000b9e4:	f022 0201 	bic.w	r2, r2, #1
9000b9e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000b9ea:	68fb      	ldr	r3, [r7, #12]
9000b9ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000b9f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000b9f2:	687b      	ldr	r3, [r7, #4]
9000b9f4:	2200      	movs	r2, #0
9000b9f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000b9f8:	687b      	ldr	r3, [r7, #4]
9000b9fa:	681b      	ldr	r3, [r3, #0]
9000b9fc:	68fa      	ldr	r2, [r7, #12]
9000b9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ba00:	687b      	ldr	r3, [r7, #4]
9000ba02:	2220      	movs	r2, #32
9000ba04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ba08:	687b      	ldr	r3, [r7, #4]
9000ba0a:	2200      	movs	r2, #0
9000ba0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ba10:	2300      	movs	r3, #0
}
9000ba12:	4618      	mov	r0, r3
9000ba14:	3714      	adds	r7, #20
9000ba16:	46bd      	mov	sp, r7
9000ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba1c:	4770      	bx	lr

9000ba1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ba1e:	b580      	push	{r7, lr}
9000ba20:	b084      	sub	sp, #16
9000ba22:	af00      	add	r7, sp, #0
9000ba24:	6078      	str	r0, [r7, #4]
9000ba26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ba28:	687b      	ldr	r3, [r7, #4]
9000ba2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ba2e:	2b01      	cmp	r3, #1
9000ba30:	d101      	bne.n	9000ba36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000ba32:	2302      	movs	r3, #2
9000ba34:	e02d      	b.n	9000ba92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000ba36:	687b      	ldr	r3, [r7, #4]
9000ba38:	2201      	movs	r2, #1
9000ba3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ba3e:	687b      	ldr	r3, [r7, #4]
9000ba40:	2224      	movs	r2, #36	@ 0x24
9000ba42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ba46:	687b      	ldr	r3, [r7, #4]
9000ba48:	681b      	ldr	r3, [r3, #0]
9000ba4a:	681b      	ldr	r3, [r3, #0]
9000ba4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ba4e:	687b      	ldr	r3, [r7, #4]
9000ba50:	681b      	ldr	r3, [r3, #0]
9000ba52:	681a      	ldr	r2, [r3, #0]
9000ba54:	687b      	ldr	r3, [r7, #4]
9000ba56:	681b      	ldr	r3, [r3, #0]
9000ba58:	f022 0201 	bic.w	r2, r2, #1
9000ba5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000ba5e:	687b      	ldr	r3, [r7, #4]
9000ba60:	681b      	ldr	r3, [r3, #0]
9000ba62:	689b      	ldr	r3, [r3, #8]
9000ba64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000ba68:	687b      	ldr	r3, [r7, #4]
9000ba6a:	681b      	ldr	r3, [r3, #0]
9000ba6c:	683a      	ldr	r2, [r7, #0]
9000ba6e:	430a      	orrs	r2, r1
9000ba70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ba72:	6878      	ldr	r0, [r7, #4]
9000ba74:	f000 f850 	bl	9000bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ba78:	687b      	ldr	r3, [r7, #4]
9000ba7a:	681b      	ldr	r3, [r3, #0]
9000ba7c:	68fa      	ldr	r2, [r7, #12]
9000ba7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ba80:	687b      	ldr	r3, [r7, #4]
9000ba82:	2220      	movs	r2, #32
9000ba84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ba88:	687b      	ldr	r3, [r7, #4]
9000ba8a:	2200      	movs	r2, #0
9000ba8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ba90:	2300      	movs	r3, #0
}
9000ba92:	4618      	mov	r0, r3
9000ba94:	3710      	adds	r7, #16
9000ba96:	46bd      	mov	sp, r7
9000ba98:	bd80      	pop	{r7, pc}

9000ba9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ba9a:	b580      	push	{r7, lr}
9000ba9c:	b084      	sub	sp, #16
9000ba9e:	af00      	add	r7, sp, #0
9000baa0:	6078      	str	r0, [r7, #4]
9000baa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000baa4:	687b      	ldr	r3, [r7, #4]
9000baa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000baaa:	2b01      	cmp	r3, #1
9000baac:	d101      	bne.n	9000bab2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000baae:	2302      	movs	r3, #2
9000bab0:	e02d      	b.n	9000bb0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000bab2:	687b      	ldr	r3, [r7, #4]
9000bab4:	2201      	movs	r2, #1
9000bab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000baba:	687b      	ldr	r3, [r7, #4]
9000babc:	2224      	movs	r2, #36	@ 0x24
9000babe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000bac2:	687b      	ldr	r3, [r7, #4]
9000bac4:	681b      	ldr	r3, [r3, #0]
9000bac6:	681b      	ldr	r3, [r3, #0]
9000bac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000baca:	687b      	ldr	r3, [r7, #4]
9000bacc:	681b      	ldr	r3, [r3, #0]
9000bace:	681a      	ldr	r2, [r3, #0]
9000bad0:	687b      	ldr	r3, [r7, #4]
9000bad2:	681b      	ldr	r3, [r3, #0]
9000bad4:	f022 0201 	bic.w	r2, r2, #1
9000bad8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000bada:	687b      	ldr	r3, [r7, #4]
9000badc:	681b      	ldr	r3, [r3, #0]
9000bade:	689b      	ldr	r3, [r3, #8]
9000bae0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000bae4:	687b      	ldr	r3, [r7, #4]
9000bae6:	681b      	ldr	r3, [r3, #0]
9000bae8:	683a      	ldr	r2, [r7, #0]
9000baea:	430a      	orrs	r2, r1
9000baec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000baee:	6878      	ldr	r0, [r7, #4]
9000baf0:	f000 f812 	bl	9000bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000baf4:	687b      	ldr	r3, [r7, #4]
9000baf6:	681b      	ldr	r3, [r3, #0]
9000baf8:	68fa      	ldr	r2, [r7, #12]
9000bafa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000bafc:	687b      	ldr	r3, [r7, #4]
9000bafe:	2220      	movs	r2, #32
9000bb00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000bb04:	687b      	ldr	r3, [r7, #4]
9000bb06:	2200      	movs	r2, #0
9000bb08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000bb0c:	2300      	movs	r3, #0
}
9000bb0e:	4618      	mov	r0, r3
9000bb10:	3710      	adds	r7, #16
9000bb12:	46bd      	mov	sp, r7
9000bb14:	bd80      	pop	{r7, pc}
	...

9000bb18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000bb18:	b480      	push	{r7}
9000bb1a:	b085      	sub	sp, #20
9000bb1c:	af00      	add	r7, sp, #0
9000bb1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000bb20:	687b      	ldr	r3, [r7, #4]
9000bb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000bb24:	2b00      	cmp	r3, #0
9000bb26:	d108      	bne.n	9000bb3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000bb28:	687b      	ldr	r3, [r7, #4]
9000bb2a:	2201      	movs	r2, #1
9000bb2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000bb30:	687b      	ldr	r3, [r7, #4]
9000bb32:	2201      	movs	r2, #1
9000bb34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000bb38:	e031      	b.n	9000bb9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000bb3a:	2310      	movs	r3, #16
9000bb3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000bb3e:	2310      	movs	r3, #16
9000bb40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000bb42:	687b      	ldr	r3, [r7, #4]
9000bb44:	681b      	ldr	r3, [r3, #0]
9000bb46:	689b      	ldr	r3, [r3, #8]
9000bb48:	0e5b      	lsrs	r3, r3, #25
9000bb4a:	b2db      	uxtb	r3, r3
9000bb4c:	f003 0307 	and.w	r3, r3, #7
9000bb50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000bb52:	687b      	ldr	r3, [r7, #4]
9000bb54:	681b      	ldr	r3, [r3, #0]
9000bb56:	689b      	ldr	r3, [r3, #8]
9000bb58:	0f5b      	lsrs	r3, r3, #29
9000bb5a:	b2db      	uxtb	r3, r3
9000bb5c:	f003 0307 	and.w	r3, r3, #7
9000bb60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000bb62:	7bbb      	ldrb	r3, [r7, #14]
9000bb64:	7b3a      	ldrb	r2, [r7, #12]
9000bb66:	4911      	ldr	r1, [pc, #68]	@ (9000bbac <UARTEx_SetNbDataToProcess+0x94>)
9000bb68:	5c8a      	ldrb	r2, [r1, r2]
9000bb6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000bb6e:	7b3a      	ldrb	r2, [r7, #12]
9000bb70:	490f      	ldr	r1, [pc, #60]	@ (9000bbb0 <UARTEx_SetNbDataToProcess+0x98>)
9000bb72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000bb74:	fb93 f3f2 	sdiv	r3, r3, r2
9000bb78:	b29a      	uxth	r2, r3
9000bb7a:	687b      	ldr	r3, [r7, #4]
9000bb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000bb80:	7bfb      	ldrb	r3, [r7, #15]
9000bb82:	7b7a      	ldrb	r2, [r7, #13]
9000bb84:	4909      	ldr	r1, [pc, #36]	@ (9000bbac <UARTEx_SetNbDataToProcess+0x94>)
9000bb86:	5c8a      	ldrb	r2, [r1, r2]
9000bb88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000bb8c:	7b7a      	ldrb	r2, [r7, #13]
9000bb8e:	4908      	ldr	r1, [pc, #32]	@ (9000bbb0 <UARTEx_SetNbDataToProcess+0x98>)
9000bb90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000bb92:	fb93 f3f2 	sdiv	r3, r3, r2
9000bb96:	b29a      	uxth	r2, r3
9000bb98:	687b      	ldr	r3, [r7, #4]
9000bb9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000bb9e:	bf00      	nop
9000bba0:	3714      	adds	r7, #20
9000bba2:	46bd      	mov	sp, r7
9000bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bba8:	4770      	bx	lr
9000bbaa:	bf00      	nop
9000bbac:	9000dc74 	.word	0x9000dc74
9000bbb0:	9000dc7c 	.word	0x9000dc7c

9000bbb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000bbb4:	b480      	push	{r7}
9000bbb6:	b083      	sub	sp, #12
9000bbb8:	af00      	add	r7, sp, #0
9000bbba:	6078      	str	r0, [r7, #4]
9000bbbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000bbbe:	683b      	ldr	r3, [r7, #0]
9000bbc0:	681b      	ldr	r3, [r3, #0]
9000bbc2:	2b00      	cmp	r3, #0
9000bbc4:	d121      	bne.n	9000bc0a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bbc6:	687b      	ldr	r3, [r7, #4]
9000bbc8:	681a      	ldr	r2, [r3, #0]
9000bbca:	4b27      	ldr	r3, [pc, #156]	@ (9000bc68 <FMC_SDRAM_Init+0xb4>)
9000bbcc:	4013      	ands	r3, r2
9000bbce:	683a      	ldr	r2, [r7, #0]
9000bbd0:	6851      	ldr	r1, [r2, #4]
9000bbd2:	683a      	ldr	r2, [r7, #0]
9000bbd4:	6892      	ldr	r2, [r2, #8]
9000bbd6:	4311      	orrs	r1, r2
9000bbd8:	683a      	ldr	r2, [r7, #0]
9000bbda:	68d2      	ldr	r2, [r2, #12]
9000bbdc:	4311      	orrs	r1, r2
9000bbde:	683a      	ldr	r2, [r7, #0]
9000bbe0:	6912      	ldr	r2, [r2, #16]
9000bbe2:	4311      	orrs	r1, r2
9000bbe4:	683a      	ldr	r2, [r7, #0]
9000bbe6:	6952      	ldr	r2, [r2, #20]
9000bbe8:	4311      	orrs	r1, r2
9000bbea:	683a      	ldr	r2, [r7, #0]
9000bbec:	6992      	ldr	r2, [r2, #24]
9000bbee:	4311      	orrs	r1, r2
9000bbf0:	683a      	ldr	r2, [r7, #0]
9000bbf2:	69d2      	ldr	r2, [r2, #28]
9000bbf4:	4311      	orrs	r1, r2
9000bbf6:	683a      	ldr	r2, [r7, #0]
9000bbf8:	6a12      	ldr	r2, [r2, #32]
9000bbfa:	4311      	orrs	r1, r2
9000bbfc:	683a      	ldr	r2, [r7, #0]
9000bbfe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000bc00:	430a      	orrs	r2, r1
9000bc02:	431a      	orrs	r2, r3
9000bc04:	687b      	ldr	r3, [r7, #4]
9000bc06:	601a      	str	r2, [r3, #0]
9000bc08:	e026      	b.n	9000bc58 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bc0a:	687b      	ldr	r3, [r7, #4]
9000bc0c:	681b      	ldr	r3, [r3, #0]
9000bc0e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000bc12:	683b      	ldr	r3, [r7, #0]
9000bc14:	69d9      	ldr	r1, [r3, #28]
9000bc16:	683b      	ldr	r3, [r7, #0]
9000bc18:	6a1b      	ldr	r3, [r3, #32]
9000bc1a:	4319      	orrs	r1, r3
9000bc1c:	683b      	ldr	r3, [r7, #0]
9000bc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bc20:	430b      	orrs	r3, r1
9000bc22:	431a      	orrs	r2, r3
9000bc24:	687b      	ldr	r3, [r7, #4]
9000bc26:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000bc28:	687b      	ldr	r3, [r7, #4]
9000bc2a:	685a      	ldr	r2, [r3, #4]
9000bc2c:	4b0e      	ldr	r3, [pc, #56]	@ (9000bc68 <FMC_SDRAM_Init+0xb4>)
9000bc2e:	4013      	ands	r3, r2
9000bc30:	683a      	ldr	r2, [r7, #0]
9000bc32:	6851      	ldr	r1, [r2, #4]
9000bc34:	683a      	ldr	r2, [r7, #0]
9000bc36:	6892      	ldr	r2, [r2, #8]
9000bc38:	4311      	orrs	r1, r2
9000bc3a:	683a      	ldr	r2, [r7, #0]
9000bc3c:	68d2      	ldr	r2, [r2, #12]
9000bc3e:	4311      	orrs	r1, r2
9000bc40:	683a      	ldr	r2, [r7, #0]
9000bc42:	6912      	ldr	r2, [r2, #16]
9000bc44:	4311      	orrs	r1, r2
9000bc46:	683a      	ldr	r2, [r7, #0]
9000bc48:	6952      	ldr	r2, [r2, #20]
9000bc4a:	4311      	orrs	r1, r2
9000bc4c:	683a      	ldr	r2, [r7, #0]
9000bc4e:	6992      	ldr	r2, [r2, #24]
9000bc50:	430a      	orrs	r2, r1
9000bc52:	431a      	orrs	r2, r3
9000bc54:	687b      	ldr	r3, [r7, #4]
9000bc56:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000bc58:	2300      	movs	r3, #0
}
9000bc5a:	4618      	mov	r0, r3
9000bc5c:	370c      	adds	r7, #12
9000bc5e:	46bd      	mov	sp, r7
9000bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc64:	4770      	bx	lr
9000bc66:	bf00      	nop
9000bc68:	ffff8000 	.word	0xffff8000

9000bc6c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000bc6c:	b480      	push	{r7}
9000bc6e:	b085      	sub	sp, #20
9000bc70:	af00      	add	r7, sp, #0
9000bc72:	60f8      	str	r0, [r7, #12]
9000bc74:	60b9      	str	r1, [r7, #8]
9000bc76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000bc78:	687b      	ldr	r3, [r7, #4]
9000bc7a:	2b00      	cmp	r3, #0
9000bc7c:	d128      	bne.n	9000bcd0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000bc7e:	68fb      	ldr	r3, [r7, #12]
9000bc80:	689b      	ldr	r3, [r3, #8]
9000bc82:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000bc86:	68bb      	ldr	r3, [r7, #8]
9000bc88:	681b      	ldr	r3, [r3, #0]
9000bc8a:	1e59      	subs	r1, r3, #1
9000bc8c:	68bb      	ldr	r3, [r7, #8]
9000bc8e:	685b      	ldr	r3, [r3, #4]
9000bc90:	3b01      	subs	r3, #1
9000bc92:	011b      	lsls	r3, r3, #4
9000bc94:	4319      	orrs	r1, r3
9000bc96:	68bb      	ldr	r3, [r7, #8]
9000bc98:	689b      	ldr	r3, [r3, #8]
9000bc9a:	3b01      	subs	r3, #1
9000bc9c:	021b      	lsls	r3, r3, #8
9000bc9e:	4319      	orrs	r1, r3
9000bca0:	68bb      	ldr	r3, [r7, #8]
9000bca2:	68db      	ldr	r3, [r3, #12]
9000bca4:	3b01      	subs	r3, #1
9000bca6:	031b      	lsls	r3, r3, #12
9000bca8:	4319      	orrs	r1, r3
9000bcaa:	68bb      	ldr	r3, [r7, #8]
9000bcac:	691b      	ldr	r3, [r3, #16]
9000bcae:	3b01      	subs	r3, #1
9000bcb0:	041b      	lsls	r3, r3, #16
9000bcb2:	4319      	orrs	r1, r3
9000bcb4:	68bb      	ldr	r3, [r7, #8]
9000bcb6:	695b      	ldr	r3, [r3, #20]
9000bcb8:	3b01      	subs	r3, #1
9000bcba:	051b      	lsls	r3, r3, #20
9000bcbc:	4319      	orrs	r1, r3
9000bcbe:	68bb      	ldr	r3, [r7, #8]
9000bcc0:	699b      	ldr	r3, [r3, #24]
9000bcc2:	3b01      	subs	r3, #1
9000bcc4:	061b      	lsls	r3, r3, #24
9000bcc6:	430b      	orrs	r3, r1
9000bcc8:	431a      	orrs	r2, r3
9000bcca:	68fb      	ldr	r3, [r7, #12]
9000bccc:	609a      	str	r2, [r3, #8]
9000bcce:	e02d      	b.n	9000bd2c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000bcd0:	68fb      	ldr	r3, [r7, #12]
9000bcd2:	689a      	ldr	r2, [r3, #8]
9000bcd4:	4b19      	ldr	r3, [pc, #100]	@ (9000bd3c <FMC_SDRAM_Timing_Init+0xd0>)
9000bcd6:	4013      	ands	r3, r2
9000bcd8:	68ba      	ldr	r2, [r7, #8]
9000bcda:	68d2      	ldr	r2, [r2, #12]
9000bcdc:	3a01      	subs	r2, #1
9000bcde:	0311      	lsls	r1, r2, #12
9000bce0:	68ba      	ldr	r2, [r7, #8]
9000bce2:	6952      	ldr	r2, [r2, #20]
9000bce4:	3a01      	subs	r2, #1
9000bce6:	0512      	lsls	r2, r2, #20
9000bce8:	430a      	orrs	r2, r1
9000bcea:	431a      	orrs	r2, r3
9000bcec:	68fb      	ldr	r3, [r7, #12]
9000bcee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000bcf0:	68fb      	ldr	r3, [r7, #12]
9000bcf2:	68db      	ldr	r3, [r3, #12]
9000bcf4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000bcf8:	68bb      	ldr	r3, [r7, #8]
9000bcfa:	681b      	ldr	r3, [r3, #0]
9000bcfc:	1e59      	subs	r1, r3, #1
9000bcfe:	68bb      	ldr	r3, [r7, #8]
9000bd00:	685b      	ldr	r3, [r3, #4]
9000bd02:	3b01      	subs	r3, #1
9000bd04:	011b      	lsls	r3, r3, #4
9000bd06:	4319      	orrs	r1, r3
9000bd08:	68bb      	ldr	r3, [r7, #8]
9000bd0a:	689b      	ldr	r3, [r3, #8]
9000bd0c:	3b01      	subs	r3, #1
9000bd0e:	021b      	lsls	r3, r3, #8
9000bd10:	4319      	orrs	r1, r3
9000bd12:	68bb      	ldr	r3, [r7, #8]
9000bd14:	691b      	ldr	r3, [r3, #16]
9000bd16:	3b01      	subs	r3, #1
9000bd18:	041b      	lsls	r3, r3, #16
9000bd1a:	4319      	orrs	r1, r3
9000bd1c:	68bb      	ldr	r3, [r7, #8]
9000bd1e:	699b      	ldr	r3, [r3, #24]
9000bd20:	3b01      	subs	r3, #1
9000bd22:	061b      	lsls	r3, r3, #24
9000bd24:	430b      	orrs	r3, r1
9000bd26:	431a      	orrs	r2, r3
9000bd28:	68fb      	ldr	r3, [r7, #12]
9000bd2a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000bd2c:	2300      	movs	r3, #0
}
9000bd2e:	4618      	mov	r0, r3
9000bd30:	3714      	adds	r7, #20
9000bd32:	46bd      	mov	sp, r7
9000bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bd38:	4770      	bx	lr
9000bd3a:	bf00      	nop
9000bd3c:	ff0f0fff 	.word	0xff0f0fff

9000bd40 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000bd40:	b480      	push	{r7}
9000bd42:	b085      	sub	sp, #20
9000bd44:	af00      	add	r7, sp, #0
9000bd46:	60f8      	str	r0, [r7, #12]
9000bd48:	60b9      	str	r1, [r7, #8]
9000bd4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000bd4c:	68fb      	ldr	r3, [r7, #12]
9000bd4e:	691a      	ldr	r2, [r3, #16]
9000bd50:	4b0c      	ldr	r3, [pc, #48]	@ (9000bd84 <FMC_SDRAM_SendCommand+0x44>)
9000bd52:	4013      	ands	r3, r2
9000bd54:	68ba      	ldr	r2, [r7, #8]
9000bd56:	6811      	ldr	r1, [r2, #0]
9000bd58:	68ba      	ldr	r2, [r7, #8]
9000bd5a:	6852      	ldr	r2, [r2, #4]
9000bd5c:	4311      	orrs	r1, r2
9000bd5e:	68ba      	ldr	r2, [r7, #8]
9000bd60:	6892      	ldr	r2, [r2, #8]
9000bd62:	3a01      	subs	r2, #1
9000bd64:	0152      	lsls	r2, r2, #5
9000bd66:	4311      	orrs	r1, r2
9000bd68:	68ba      	ldr	r2, [r7, #8]
9000bd6a:	68d2      	ldr	r2, [r2, #12]
9000bd6c:	0252      	lsls	r2, r2, #9
9000bd6e:	430a      	orrs	r2, r1
9000bd70:	431a      	orrs	r2, r3
9000bd72:	68fb      	ldr	r3, [r7, #12]
9000bd74:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000bd76:	2300      	movs	r3, #0
}
9000bd78:	4618      	mov	r0, r3
9000bd7a:	3714      	adds	r7, #20
9000bd7c:	46bd      	mov	sp, r7
9000bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bd82:	4770      	bx	lr
9000bd84:	ffc00000 	.word	0xffc00000

9000bd88 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000bd88:	b480      	push	{r7}
9000bd8a:	b083      	sub	sp, #12
9000bd8c:	af00      	add	r7, sp, #0
9000bd8e:	6078      	str	r0, [r7, #4]
9000bd90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000bd92:	687b      	ldr	r3, [r7, #4]
9000bd94:	695a      	ldr	r2, [r3, #20]
9000bd96:	4b07      	ldr	r3, [pc, #28]	@ (9000bdb4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000bd98:	4013      	ands	r3, r2
9000bd9a:	683a      	ldr	r2, [r7, #0]
9000bd9c:	0052      	lsls	r2, r2, #1
9000bd9e:	431a      	orrs	r2, r3
9000bda0:	687b      	ldr	r3, [r7, #4]
9000bda2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000bda4:	2300      	movs	r3, #0
}
9000bda6:	4618      	mov	r0, r3
9000bda8:	370c      	adds	r7, #12
9000bdaa:	46bd      	mov	sp, r7
9000bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdb0:	4770      	bx	lr
9000bdb2:	bf00      	nop
9000bdb4:	ffffc001 	.word	0xffffc001

9000bdb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000bdb8:	b480      	push	{r7}
9000bdba:	b083      	sub	sp, #12
9000bdbc:	af00      	add	r7, sp, #0
9000bdbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000bdc0:	687b      	ldr	r3, [r7, #4]
9000bdc2:	689b      	ldr	r3, [r3, #8]
9000bdc4:	f043 0201 	orr.w	r2, r3, #1
9000bdc8:	687b      	ldr	r3, [r7, #4]
9000bdca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000bdcc:	2300      	movs	r3, #0
}
9000bdce:	4618      	mov	r0, r3
9000bdd0:	370c      	adds	r7, #12
9000bdd2:	46bd      	mov	sp, r7
9000bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdd8:	4770      	bx	lr

9000bdda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000bdda:	b480      	push	{r7}
9000bddc:	b083      	sub	sp, #12
9000bdde:	af00      	add	r7, sp, #0
9000bde0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000bde2:	687b      	ldr	r3, [r7, #4]
9000bde4:	689b      	ldr	r3, [r3, #8]
9000bde6:	f023 0201 	bic.w	r2, r3, #1
9000bdea:	687b      	ldr	r3, [r7, #4]
9000bdec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000bdee:	2300      	movs	r3, #0
}
9000bdf0:	4618      	mov	r0, r3
9000bdf2:	370c      	adds	r7, #12
9000bdf4:	46bd      	mov	sp, r7
9000bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdfa:	4770      	bx	lr

9000bdfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000bdfc:	b480      	push	{r7}
9000bdfe:	b085      	sub	sp, #20
9000be00:	af00      	add	r7, sp, #0
9000be02:	6078      	str	r0, [r7, #4]
9000be04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000be06:	2300      	movs	r3, #0
9000be08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000be0a:	68fb      	ldr	r3, [r7, #12]
9000be0c:	3301      	adds	r3, #1
9000be0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000be10:	68fb      	ldr	r3, [r7, #12]
9000be12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000be16:	d901      	bls.n	9000be1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000be18:	2303      	movs	r3, #3
9000be1a:	e01b      	b.n	9000be54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000be1c:	687b      	ldr	r3, [r7, #4]
9000be1e:	691b      	ldr	r3, [r3, #16]
9000be20:	2b00      	cmp	r3, #0
9000be22:	daf2      	bge.n	9000be0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000be24:	2300      	movs	r3, #0
9000be26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000be28:	683b      	ldr	r3, [r7, #0]
9000be2a:	019b      	lsls	r3, r3, #6
9000be2c:	f043 0220 	orr.w	r2, r3, #32
9000be30:	687b      	ldr	r3, [r7, #4]
9000be32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000be34:	68fb      	ldr	r3, [r7, #12]
9000be36:	3301      	adds	r3, #1
9000be38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000be3a:	68fb      	ldr	r3, [r7, #12]
9000be3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000be40:	d901      	bls.n	9000be46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000be42:	2303      	movs	r3, #3
9000be44:	e006      	b.n	9000be54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000be46:	687b      	ldr	r3, [r7, #4]
9000be48:	691b      	ldr	r3, [r3, #16]
9000be4a:	f003 0320 	and.w	r3, r3, #32
9000be4e:	2b20      	cmp	r3, #32
9000be50:	d0f0      	beq.n	9000be34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000be52:	2300      	movs	r3, #0
}
9000be54:	4618      	mov	r0, r3
9000be56:	3714      	adds	r7, #20
9000be58:	46bd      	mov	sp, r7
9000be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000be5e:	4770      	bx	lr

9000be60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000be60:	b480      	push	{r7}
9000be62:	b085      	sub	sp, #20
9000be64:	af00      	add	r7, sp, #0
9000be66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000be68:	2300      	movs	r3, #0
9000be6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000be6c:	68fb      	ldr	r3, [r7, #12]
9000be6e:	3301      	adds	r3, #1
9000be70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000be72:	68fb      	ldr	r3, [r7, #12]
9000be74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000be78:	d901      	bls.n	9000be7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000be7a:	2303      	movs	r3, #3
9000be7c:	e018      	b.n	9000beb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000be7e:	687b      	ldr	r3, [r7, #4]
9000be80:	691b      	ldr	r3, [r3, #16]
9000be82:	2b00      	cmp	r3, #0
9000be84:	daf2      	bge.n	9000be6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000be86:	2300      	movs	r3, #0
9000be88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000be8a:	687b      	ldr	r3, [r7, #4]
9000be8c:	2210      	movs	r2, #16
9000be8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000be90:	68fb      	ldr	r3, [r7, #12]
9000be92:	3301      	adds	r3, #1
9000be94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000be96:	68fb      	ldr	r3, [r7, #12]
9000be98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000be9c:	d901      	bls.n	9000bea2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000be9e:	2303      	movs	r3, #3
9000bea0:	e006      	b.n	9000beb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000bea2:	687b      	ldr	r3, [r7, #4]
9000bea4:	691b      	ldr	r3, [r3, #16]
9000bea6:	f003 0310 	and.w	r3, r3, #16
9000beaa:	2b10      	cmp	r3, #16
9000beac:	d0f0      	beq.n	9000be90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000beae:	2300      	movs	r3, #0
}
9000beb0:	4618      	mov	r0, r3
9000beb2:	3714      	adds	r7, #20
9000beb4:	46bd      	mov	sp, r7
9000beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000beba:	4770      	bx	lr

9000bebc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000bebc:	b480      	push	{r7}
9000bebe:	b08b      	sub	sp, #44	@ 0x2c
9000bec0:	af00      	add	r7, sp, #0
9000bec2:	60f8      	str	r0, [r7, #12]
9000bec4:	60b9      	str	r1, [r7, #8]
9000bec6:	4613      	mov	r3, r2
9000bec8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000beca:	68fb      	ldr	r3, [r7, #12]
9000becc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000bece:	68bb      	ldr	r3, [r7, #8]
9000bed0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000bed2:	88fb      	ldrh	r3, [r7, #6]
9000bed4:	089b      	lsrs	r3, r3, #2
9000bed6:	b29b      	uxth	r3, r3
9000bed8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000beda:	88fb      	ldrh	r3, [r7, #6]
9000bedc:	f003 0303 	and.w	r3, r3, #3
9000bee0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000bee2:	2300      	movs	r3, #0
9000bee4:	623b      	str	r3, [r7, #32]
9000bee6:	e014      	b.n	9000bf12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000bee8:	69bb      	ldr	r3, [r7, #24]
9000beea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000beee:	681a      	ldr	r2, [r3, #0]
9000bef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bef2:	601a      	str	r2, [r3, #0]
    pDest++;
9000bef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bef6:	3301      	adds	r3, #1
9000bef8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000befa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000befc:	3301      	adds	r3, #1
9000befe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000bf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bf02:	3301      	adds	r3, #1
9000bf04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000bf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bf08:	3301      	adds	r3, #1
9000bf0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000bf0c:	6a3b      	ldr	r3, [r7, #32]
9000bf0e:	3301      	adds	r3, #1
9000bf10:	623b      	str	r3, [r7, #32]
9000bf12:	6a3a      	ldr	r2, [r7, #32]
9000bf14:	697b      	ldr	r3, [r7, #20]
9000bf16:	429a      	cmp	r2, r3
9000bf18:	d3e6      	bcc.n	9000bee8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000bf1a:	8bfb      	ldrh	r3, [r7, #30]
9000bf1c:	2b00      	cmp	r3, #0
9000bf1e:	d01e      	beq.n	9000bf5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000bf20:	2300      	movs	r3, #0
9000bf22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000bf24:	69bb      	ldr	r3, [r7, #24]
9000bf26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000bf2a:	461a      	mov	r2, r3
9000bf2c:	f107 0310 	add.w	r3, r7, #16
9000bf30:	6812      	ldr	r2, [r2, #0]
9000bf32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000bf34:	693a      	ldr	r2, [r7, #16]
9000bf36:	6a3b      	ldr	r3, [r7, #32]
9000bf38:	b2db      	uxtb	r3, r3
9000bf3a:	00db      	lsls	r3, r3, #3
9000bf3c:	fa22 f303 	lsr.w	r3, r2, r3
9000bf40:	b2da      	uxtb	r2, r3
9000bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bf44:	701a      	strb	r2, [r3, #0]
      i++;
9000bf46:	6a3b      	ldr	r3, [r7, #32]
9000bf48:	3301      	adds	r3, #1
9000bf4a:	623b      	str	r3, [r7, #32]
      pDest++;
9000bf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bf4e:	3301      	adds	r3, #1
9000bf50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000bf52:	8bfb      	ldrh	r3, [r7, #30]
9000bf54:	3b01      	subs	r3, #1
9000bf56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000bf58:	8bfb      	ldrh	r3, [r7, #30]
9000bf5a:	2b00      	cmp	r3, #0
9000bf5c:	d1ea      	bne.n	9000bf34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000bf60:	4618      	mov	r0, r3
9000bf62:	372c      	adds	r7, #44	@ 0x2c
9000bf64:	46bd      	mov	sp, r7
9000bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf6a:	4770      	bx	lr

9000bf6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000bf6c:	b480      	push	{r7}
9000bf6e:	b085      	sub	sp, #20
9000bf70:	af00      	add	r7, sp, #0
9000bf72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000bf74:	687b      	ldr	r3, [r7, #4]
9000bf76:	695b      	ldr	r3, [r3, #20]
9000bf78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000bf7a:	687b      	ldr	r3, [r7, #4]
9000bf7c:	699b      	ldr	r3, [r3, #24]
9000bf7e:	68fa      	ldr	r2, [r7, #12]
9000bf80:	4013      	ands	r3, r2
9000bf82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000bf84:	68fb      	ldr	r3, [r7, #12]
}
9000bf86:	4618      	mov	r0, r3
9000bf88:	3714      	adds	r7, #20
9000bf8a:	46bd      	mov	sp, r7
9000bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf90:	4770      	bx	lr

9000bf92 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000bf92:	b480      	push	{r7}
9000bf94:	b085      	sub	sp, #20
9000bf96:	af00      	add	r7, sp, #0
9000bf98:	6078      	str	r0, [r7, #4]
9000bf9a:	460b      	mov	r3, r1
9000bf9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bf9e:	687b      	ldr	r3, [r7, #4]
9000bfa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000bfa2:	78fb      	ldrb	r3, [r7, #3]
9000bfa4:	015a      	lsls	r2, r3, #5
9000bfa6:	68fb      	ldr	r3, [r7, #12]
9000bfa8:	4413      	add	r3, r2
9000bfaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bfae:	689b      	ldr	r3, [r3, #8]
9000bfb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000bfb2:	78fb      	ldrb	r3, [r7, #3]
9000bfb4:	015a      	lsls	r2, r3, #5
9000bfb6:	68fb      	ldr	r3, [r7, #12]
9000bfb8:	4413      	add	r3, r2
9000bfba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000bfbe:	68db      	ldr	r3, [r3, #12]
9000bfc0:	68ba      	ldr	r2, [r7, #8]
9000bfc2:	4013      	ands	r3, r2
9000bfc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000bfc6:	68bb      	ldr	r3, [r7, #8]
}
9000bfc8:	4618      	mov	r0, r3
9000bfca:	3714      	adds	r7, #20
9000bfcc:	46bd      	mov	sp, r7
9000bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bfd2:	4770      	bx	lr

9000bfd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000bfd4:	b480      	push	{r7}
9000bfd6:	b083      	sub	sp, #12
9000bfd8:	af00      	add	r7, sp, #0
9000bfda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000bfdc:	687b      	ldr	r3, [r7, #4]
9000bfde:	695b      	ldr	r3, [r3, #20]
9000bfe0:	f003 0301 	and.w	r3, r3, #1
}
9000bfe4:	4618      	mov	r0, r3
9000bfe6:	370c      	adds	r7, #12
9000bfe8:	46bd      	mov	sp, r7
9000bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bfee:	4770      	bx	lr

9000bff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000bff0:	b480      	push	{r7}
9000bff2:	b085      	sub	sp, #20
9000bff4:	af00      	add	r7, sp, #0
9000bff6:	6078      	str	r0, [r7, #4]
9000bff8:	460b      	mov	r3, r1
9000bffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000bffc:	687b      	ldr	r3, [r7, #4]
9000bffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000c000:	68fb      	ldr	r3, [r7, #12]
9000c002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c006:	681b      	ldr	r3, [r3, #0]
9000c008:	68fa      	ldr	r2, [r7, #12]
9000c00a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000c00e:	f023 0303 	bic.w	r3, r3, #3
9000c012:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000c014:	68fb      	ldr	r3, [r7, #12]
9000c016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c01a:	681a      	ldr	r2, [r3, #0]
9000c01c:	78fb      	ldrb	r3, [r7, #3]
9000c01e:	f003 0303 	and.w	r3, r3, #3
9000c022:	68f9      	ldr	r1, [r7, #12]
9000c024:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000c028:	4313      	orrs	r3, r2
9000c02a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000c02c:	78fb      	ldrb	r3, [r7, #3]
9000c02e:	2b01      	cmp	r3, #1
9000c030:	d107      	bne.n	9000c042 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000c032:	68fb      	ldr	r3, [r7, #12]
9000c034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c038:	461a      	mov	r2, r3
9000c03a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000c03e:	6053      	str	r3, [r2, #4]
9000c040:	e00c      	b.n	9000c05c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000c042:	78fb      	ldrb	r3, [r7, #3]
9000c044:	2b02      	cmp	r3, #2
9000c046:	d107      	bne.n	9000c058 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000c048:	68fb      	ldr	r3, [r7, #12]
9000c04a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c04e:	461a      	mov	r2, r3
9000c050:	f241 7370 	movw	r3, #6000	@ 0x1770
9000c054:	6053      	str	r3, [r2, #4]
9000c056:	e001      	b.n	9000c05c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000c058:	2301      	movs	r3, #1
9000c05a:	e000      	b.n	9000c05e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000c05c:	2300      	movs	r3, #0
}
9000c05e:	4618      	mov	r0, r3
9000c060:	3714      	adds	r7, #20
9000c062:	46bd      	mov	sp, r7
9000c064:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c068:	4770      	bx	lr

9000c06a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000c06a:	b480      	push	{r7}
9000c06c:	b085      	sub	sp, #20
9000c06e:	af00      	add	r7, sp, #0
9000c070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c072:	687b      	ldr	r3, [r7, #4]
9000c074:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000c076:	68fb      	ldr	r3, [r7, #12]
9000c078:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c07c:	695b      	ldr	r3, [r3, #20]
9000c07e:	b29b      	uxth	r3, r3
}
9000c080:	4618      	mov	r0, r3
9000c082:	3714      	adds	r7, #20
9000c084:	46bd      	mov	sp, r7
9000c086:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c08a:	4770      	bx	lr

9000c08c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000c08c:	b480      	push	{r7}
9000c08e:	b089      	sub	sp, #36	@ 0x24
9000c090:	af00      	add	r7, sp, #0
9000c092:	6078      	str	r0, [r7, #4]
9000c094:	460b      	mov	r3, r1
9000c096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c098:	687b      	ldr	r3, [r7, #4]
9000c09a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000c09c:	78fb      	ldrb	r3, [r7, #3]
9000c09e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000c0a0:	2300      	movs	r3, #0
9000c0a2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000c0a4:	69bb      	ldr	r3, [r7, #24]
9000c0a6:	015a      	lsls	r2, r3, #5
9000c0a8:	69fb      	ldr	r3, [r7, #28]
9000c0aa:	4413      	add	r3, r2
9000c0ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c0b0:	681b      	ldr	r3, [r3, #0]
9000c0b2:	0c9b      	lsrs	r3, r3, #18
9000c0b4:	f003 0303 	and.w	r3, r3, #3
9000c0b8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000c0ba:	69bb      	ldr	r3, [r7, #24]
9000c0bc:	015a      	lsls	r2, r3, #5
9000c0be:	69fb      	ldr	r3, [r7, #28]
9000c0c0:	4413      	add	r3, r2
9000c0c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c0c6:	681b      	ldr	r3, [r3, #0]
9000c0c8:	0fdb      	lsrs	r3, r3, #31
9000c0ca:	f003 0301 	and.w	r3, r3, #1
9000c0ce:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000c0d0:	69bb      	ldr	r3, [r7, #24]
9000c0d2:	015a      	lsls	r2, r3, #5
9000c0d4:	69fb      	ldr	r3, [r7, #28]
9000c0d6:	4413      	add	r3, r2
9000c0d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c0dc:	685b      	ldr	r3, [r3, #4]
9000c0de:	0fdb      	lsrs	r3, r3, #31
9000c0e0:	f003 0301 	and.w	r3, r3, #1
9000c0e4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000c0e6:	687b      	ldr	r3, [r7, #4]
9000c0e8:	689b      	ldr	r3, [r3, #8]
9000c0ea:	f003 0320 	and.w	r3, r3, #32
9000c0ee:	2b20      	cmp	r3, #32
9000c0f0:	d10d      	bne.n	9000c10e <USB_HC_Halt+0x82>
9000c0f2:	68fb      	ldr	r3, [r7, #12]
9000c0f4:	2b00      	cmp	r3, #0
9000c0f6:	d10a      	bne.n	9000c10e <USB_HC_Halt+0x82>
9000c0f8:	693b      	ldr	r3, [r7, #16]
9000c0fa:	2b00      	cmp	r3, #0
9000c0fc:	d005      	beq.n	9000c10a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000c0fe:	697b      	ldr	r3, [r7, #20]
9000c100:	2b01      	cmp	r3, #1
9000c102:	d002      	beq.n	9000c10a <USB_HC_Halt+0x7e>
9000c104:	697b      	ldr	r3, [r7, #20]
9000c106:	2b03      	cmp	r3, #3
9000c108:	d101      	bne.n	9000c10e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000c10a:	2300      	movs	r3, #0
9000c10c:	e0d8      	b.n	9000c2c0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000c10e:	697b      	ldr	r3, [r7, #20]
9000c110:	2b00      	cmp	r3, #0
9000c112:	d002      	beq.n	9000c11a <USB_HC_Halt+0x8e>
9000c114:	697b      	ldr	r3, [r7, #20]
9000c116:	2b02      	cmp	r3, #2
9000c118:	d173      	bne.n	9000c202 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000c11a:	69bb      	ldr	r3, [r7, #24]
9000c11c:	015a      	lsls	r2, r3, #5
9000c11e:	69fb      	ldr	r3, [r7, #28]
9000c120:	4413      	add	r3, r2
9000c122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c126:	681b      	ldr	r3, [r3, #0]
9000c128:	69ba      	ldr	r2, [r7, #24]
9000c12a:	0151      	lsls	r1, r2, #5
9000c12c:	69fa      	ldr	r2, [r7, #28]
9000c12e:	440a      	add	r2, r1
9000c130:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c134:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c138:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c13a:	687b      	ldr	r3, [r7, #4]
9000c13c:	689b      	ldr	r3, [r3, #8]
9000c13e:	f003 0320 	and.w	r3, r3, #32
9000c142:	2b00      	cmp	r3, #0
9000c144:	d14a      	bne.n	9000c1dc <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000c146:	687b      	ldr	r3, [r7, #4]
9000c148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000c14a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000c14e:	2b00      	cmp	r3, #0
9000c150:	d133      	bne.n	9000c1ba <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000c152:	69bb      	ldr	r3, [r7, #24]
9000c154:	015a      	lsls	r2, r3, #5
9000c156:	69fb      	ldr	r3, [r7, #28]
9000c158:	4413      	add	r3, r2
9000c15a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c15e:	681b      	ldr	r3, [r3, #0]
9000c160:	69ba      	ldr	r2, [r7, #24]
9000c162:	0151      	lsls	r1, r2, #5
9000c164:	69fa      	ldr	r2, [r7, #28]
9000c166:	440a      	add	r2, r1
9000c168:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c16c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000c170:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c172:	69bb      	ldr	r3, [r7, #24]
9000c174:	015a      	lsls	r2, r3, #5
9000c176:	69fb      	ldr	r3, [r7, #28]
9000c178:	4413      	add	r3, r2
9000c17a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c17e:	681b      	ldr	r3, [r3, #0]
9000c180:	69ba      	ldr	r2, [r7, #24]
9000c182:	0151      	lsls	r1, r2, #5
9000c184:	69fa      	ldr	r2, [r7, #28]
9000c186:	440a      	add	r2, r1
9000c188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c18c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c190:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000c192:	68bb      	ldr	r3, [r7, #8]
9000c194:	3301      	adds	r3, #1
9000c196:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000c198:	68bb      	ldr	r3, [r7, #8]
9000c19a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000c19e:	d82e      	bhi.n	9000c1fe <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000c1a0:	69bb      	ldr	r3, [r7, #24]
9000c1a2:	015a      	lsls	r2, r3, #5
9000c1a4:	69fb      	ldr	r3, [r7, #28]
9000c1a6:	4413      	add	r3, r2
9000c1a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c1ac:	681b      	ldr	r3, [r3, #0]
9000c1ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000c1b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000c1b6:	d0ec      	beq.n	9000c192 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c1b8:	e081      	b.n	9000c2be <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c1ba:	69bb      	ldr	r3, [r7, #24]
9000c1bc:	015a      	lsls	r2, r3, #5
9000c1be:	69fb      	ldr	r3, [r7, #28]
9000c1c0:	4413      	add	r3, r2
9000c1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c1c6:	681b      	ldr	r3, [r3, #0]
9000c1c8:	69ba      	ldr	r2, [r7, #24]
9000c1ca:	0151      	lsls	r1, r2, #5
9000c1cc:	69fa      	ldr	r2, [r7, #28]
9000c1ce:	440a      	add	r2, r1
9000c1d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c1d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c1d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c1da:	e070      	b.n	9000c2be <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c1dc:	69bb      	ldr	r3, [r7, #24]
9000c1de:	015a      	lsls	r2, r3, #5
9000c1e0:	69fb      	ldr	r3, [r7, #28]
9000c1e2:	4413      	add	r3, r2
9000c1e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c1e8:	681b      	ldr	r3, [r3, #0]
9000c1ea:	69ba      	ldr	r2, [r7, #24]
9000c1ec:	0151      	lsls	r1, r2, #5
9000c1ee:	69fa      	ldr	r2, [r7, #28]
9000c1f0:	440a      	add	r2, r1
9000c1f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c1f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c1fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c1fc:	e05f      	b.n	9000c2be <USB_HC_Halt+0x232>
            break;
9000c1fe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c200:	e05d      	b.n	9000c2be <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000c202:	69bb      	ldr	r3, [r7, #24]
9000c204:	015a      	lsls	r2, r3, #5
9000c206:	69fb      	ldr	r3, [r7, #28]
9000c208:	4413      	add	r3, r2
9000c20a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c20e:	681b      	ldr	r3, [r3, #0]
9000c210:	69ba      	ldr	r2, [r7, #24]
9000c212:	0151      	lsls	r1, r2, #5
9000c214:	69fa      	ldr	r2, [r7, #28]
9000c216:	440a      	add	r2, r1
9000c218:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c21c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c220:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000c222:	69fb      	ldr	r3, [r7, #28]
9000c224:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c228:	691b      	ldr	r3, [r3, #16]
9000c22a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000c22e:	2b00      	cmp	r3, #0
9000c230:	d133      	bne.n	9000c29a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000c232:	69bb      	ldr	r3, [r7, #24]
9000c234:	015a      	lsls	r2, r3, #5
9000c236:	69fb      	ldr	r3, [r7, #28]
9000c238:	4413      	add	r3, r2
9000c23a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c23e:	681b      	ldr	r3, [r3, #0]
9000c240:	69ba      	ldr	r2, [r7, #24]
9000c242:	0151      	lsls	r1, r2, #5
9000c244:	69fa      	ldr	r2, [r7, #28]
9000c246:	440a      	add	r2, r1
9000c248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c24c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000c250:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c252:	69bb      	ldr	r3, [r7, #24]
9000c254:	015a      	lsls	r2, r3, #5
9000c256:	69fb      	ldr	r3, [r7, #28]
9000c258:	4413      	add	r3, r2
9000c25a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c25e:	681b      	ldr	r3, [r3, #0]
9000c260:	69ba      	ldr	r2, [r7, #24]
9000c262:	0151      	lsls	r1, r2, #5
9000c264:	69fa      	ldr	r2, [r7, #28]
9000c266:	440a      	add	r2, r1
9000c268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c26c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c270:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000c272:	68bb      	ldr	r3, [r7, #8]
9000c274:	3301      	adds	r3, #1
9000c276:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000c278:	68bb      	ldr	r3, [r7, #8]
9000c27a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000c27e:	d81d      	bhi.n	9000c2bc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000c280:	69bb      	ldr	r3, [r7, #24]
9000c282:	015a      	lsls	r2, r3, #5
9000c284:	69fb      	ldr	r3, [r7, #28]
9000c286:	4413      	add	r3, r2
9000c288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c28c:	681b      	ldr	r3, [r3, #0]
9000c28e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000c292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000c296:	d0ec      	beq.n	9000c272 <USB_HC_Halt+0x1e6>
9000c298:	e011      	b.n	9000c2be <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c29a:	69bb      	ldr	r3, [r7, #24]
9000c29c:	015a      	lsls	r2, r3, #5
9000c29e:	69fb      	ldr	r3, [r7, #28]
9000c2a0:	4413      	add	r3, r2
9000c2a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c2a6:	681b      	ldr	r3, [r3, #0]
9000c2a8:	69ba      	ldr	r2, [r7, #24]
9000c2aa:	0151      	lsls	r1, r2, #5
9000c2ac:	69fa      	ldr	r2, [r7, #28]
9000c2ae:	440a      	add	r2, r1
9000c2b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c2b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c2b8:	6013      	str	r3, [r2, #0]
9000c2ba:	e000      	b.n	9000c2be <USB_HC_Halt+0x232>
          break;
9000c2bc:	bf00      	nop
    }
  }

  return HAL_OK;
9000c2be:	2300      	movs	r3, #0
}
9000c2c0:	4618      	mov	r0, r3
9000c2c2:	3724      	adds	r7, #36	@ 0x24
9000c2c4:	46bd      	mov	sp, r7
9000c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c2ca:	4770      	bx	lr

9000c2cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000c2cc:	b580      	push	{r7, lr}
9000c2ce:	b088      	sub	sp, #32
9000c2d0:	af00      	add	r7, sp, #0
9000c2d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000c2d4:	2300      	movs	r3, #0
9000c2d6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c2d8:	687b      	ldr	r3, [r7, #4]
9000c2da:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000c2dc:	2300      	movs	r3, #0
9000c2de:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000c2e0:	6878      	ldr	r0, [r7, #4]
9000c2e2:	f7ff fd7a 	bl	9000bdda <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000c2e6:	2110      	movs	r1, #16
9000c2e8:	6878      	ldr	r0, [r7, #4]
9000c2ea:	f7ff fd87 	bl	9000bdfc <USB_FlushTxFifo>
9000c2ee:	4603      	mov	r3, r0
9000c2f0:	2b00      	cmp	r3, #0
9000c2f2:	d001      	beq.n	9000c2f8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000c2f4:	2301      	movs	r3, #1
9000c2f6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000c2f8:	6878      	ldr	r0, [r7, #4]
9000c2fa:	f7ff fdb1 	bl	9000be60 <USB_FlushRxFifo>
9000c2fe:	4603      	mov	r3, r0
9000c300:	2b00      	cmp	r3, #0
9000c302:	d001      	beq.n	9000c308 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000c304:	2301      	movs	r3, #1
9000c306:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000c308:	2300      	movs	r3, #0
9000c30a:	61bb      	str	r3, [r7, #24]
9000c30c:	e01f      	b.n	9000c34e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000c30e:	69bb      	ldr	r3, [r7, #24]
9000c310:	015a      	lsls	r2, r3, #5
9000c312:	697b      	ldr	r3, [r7, #20]
9000c314:	4413      	add	r3, r2
9000c316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c31a:	681b      	ldr	r3, [r3, #0]
9000c31c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000c31e:	693b      	ldr	r3, [r7, #16]
9000c320:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c324:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000c326:	693b      	ldr	r3, [r7, #16]
9000c328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000c32c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000c32e:	693b      	ldr	r3, [r7, #16]
9000c330:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000c334:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000c336:	69bb      	ldr	r3, [r7, #24]
9000c338:	015a      	lsls	r2, r3, #5
9000c33a:	697b      	ldr	r3, [r7, #20]
9000c33c:	4413      	add	r3, r2
9000c33e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c342:	461a      	mov	r2, r3
9000c344:	693b      	ldr	r3, [r7, #16]
9000c346:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000c348:	69bb      	ldr	r3, [r7, #24]
9000c34a:	3301      	adds	r3, #1
9000c34c:	61bb      	str	r3, [r7, #24]
9000c34e:	69bb      	ldr	r3, [r7, #24]
9000c350:	2b0f      	cmp	r3, #15
9000c352:	d9dc      	bls.n	9000c30e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000c354:	2300      	movs	r3, #0
9000c356:	61bb      	str	r3, [r7, #24]
9000c358:	e034      	b.n	9000c3c4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000c35a:	69bb      	ldr	r3, [r7, #24]
9000c35c:	015a      	lsls	r2, r3, #5
9000c35e:	697b      	ldr	r3, [r7, #20]
9000c360:	4413      	add	r3, r2
9000c362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c366:	681b      	ldr	r3, [r3, #0]
9000c368:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000c36a:	693b      	ldr	r3, [r7, #16]
9000c36c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c370:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000c372:	693b      	ldr	r3, [r7, #16]
9000c374:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c378:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000c37a:	693b      	ldr	r3, [r7, #16]
9000c37c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000c380:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000c382:	69bb      	ldr	r3, [r7, #24]
9000c384:	015a      	lsls	r2, r3, #5
9000c386:	697b      	ldr	r3, [r7, #20]
9000c388:	4413      	add	r3, r2
9000c38a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c38e:	461a      	mov	r2, r3
9000c390:	693b      	ldr	r3, [r7, #16]
9000c392:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000c394:	68fb      	ldr	r3, [r7, #12]
9000c396:	3301      	adds	r3, #1
9000c398:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000c39a:	68fb      	ldr	r3, [r7, #12]
9000c39c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000c3a0:	d80c      	bhi.n	9000c3bc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000c3a2:	69bb      	ldr	r3, [r7, #24]
9000c3a4:	015a      	lsls	r2, r3, #5
9000c3a6:	697b      	ldr	r3, [r7, #20]
9000c3a8:	4413      	add	r3, r2
9000c3aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c3ae:	681b      	ldr	r3, [r3, #0]
9000c3b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000c3b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000c3b8:	d0ec      	beq.n	9000c394 <USB_StopHost+0xc8>
9000c3ba:	e000      	b.n	9000c3be <USB_StopHost+0xf2>
        break;
9000c3bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000c3be:	69bb      	ldr	r3, [r7, #24]
9000c3c0:	3301      	adds	r3, #1
9000c3c2:	61bb      	str	r3, [r7, #24]
9000c3c4:	69bb      	ldr	r3, [r7, #24]
9000c3c6:	2b0f      	cmp	r3, #15
9000c3c8:	d9c7      	bls.n	9000c35a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000c3ca:	697b      	ldr	r3, [r7, #20]
9000c3cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c3d0:	461a      	mov	r2, r3
9000c3d2:	f04f 33ff 	mov.w	r3, #4294967295
9000c3d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000c3d8:	687b      	ldr	r3, [r7, #4]
9000c3da:	f04f 32ff 	mov.w	r2, #4294967295
9000c3de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000c3e0:	6878      	ldr	r0, [r7, #4]
9000c3e2:	f7ff fce9 	bl	9000bdb8 <USB_EnableGlobalInt>

  return ret;
9000c3e6:	7ffb      	ldrb	r3, [r7, #31]
}
9000c3e8:	4618      	mov	r0, r3
9000c3ea:	3720      	adds	r7, #32
9000c3ec:	46bd      	mov	sp, r7
9000c3ee:	bd80      	pop	{r7, pc}

9000c3f0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000c3f0:	b580      	push	{r7, lr}
9000c3f2:	b082      	sub	sp, #8
9000c3f4:	af00      	add	r7, sp, #0
9000c3f6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000c3f8:	687b      	ldr	r3, [r7, #4]
9000c3fa:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000c3fe:	1c5a      	adds	r2, r3, #1
9000c400:	687b      	ldr	r3, [r7, #4]
9000c402:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000c406:	6878      	ldr	r0, [r7, #4]
9000c408:	f000 f804 	bl	9000c414 <USBH_HandleSof>
}
9000c40c:	bf00      	nop
9000c40e:	3708      	adds	r7, #8
9000c410:	46bd      	mov	sp, r7
9000c412:	bd80      	pop	{r7, pc}

9000c414 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000c414:	b580      	push	{r7, lr}
9000c416:	b082      	sub	sp, #8
9000c418:	af00      	add	r7, sp, #0
9000c41a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000c41c:	687b      	ldr	r3, [r7, #4]
9000c41e:	781b      	ldrb	r3, [r3, #0]
9000c420:	b2db      	uxtb	r3, r3
9000c422:	2b0b      	cmp	r3, #11
9000c424:	d10a      	bne.n	9000c43c <USBH_HandleSof+0x28>
9000c426:	687b      	ldr	r3, [r7, #4]
9000c428:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000c42c:	2b00      	cmp	r3, #0
9000c42e:	d005      	beq.n	9000c43c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000c430:	687b      	ldr	r3, [r7, #4]
9000c432:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000c436:	699b      	ldr	r3, [r3, #24]
9000c438:	6878      	ldr	r0, [r7, #4]
9000c43a:	4798      	blx	r3
  }
}
9000c43c:	bf00      	nop
9000c43e:	3708      	adds	r7, #8
9000c440:	46bd      	mov	sp, r7
9000c442:	bd80      	pop	{r7, pc}

9000c444 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000c444:	b480      	push	{r7}
9000c446:	b083      	sub	sp, #12
9000c448:	af00      	add	r7, sp, #0
9000c44a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000c44c:	687b      	ldr	r3, [r7, #4]
9000c44e:	2201      	movs	r2, #1
9000c450:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000c454:	bf00      	nop
}
9000c456:	370c      	adds	r7, #12
9000c458:	46bd      	mov	sp, r7
9000c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c45e:	4770      	bx	lr

9000c460 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000c460:	b480      	push	{r7}
9000c462:	b083      	sub	sp, #12
9000c464:	af00      	add	r7, sp, #0
9000c466:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000c468:	687b      	ldr	r3, [r7, #4]
9000c46a:	2200      	movs	r2, #0
9000c46c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000c470:	687b      	ldr	r3, [r7, #4]
9000c472:	2201      	movs	r2, #1
9000c474:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000c478:	bf00      	nop
}
9000c47a:	370c      	adds	r7, #12
9000c47c:	46bd      	mov	sp, r7
9000c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c482:	4770      	bx	lr

9000c484 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000c484:	b480      	push	{r7}
9000c486:	b083      	sub	sp, #12
9000c488:	af00      	add	r7, sp, #0
9000c48a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000c48c:	687b      	ldr	r3, [r7, #4]
9000c48e:	2201      	movs	r2, #1
9000c490:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000c494:	687b      	ldr	r3, [r7, #4]
9000c496:	2200      	movs	r2, #0
9000c498:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000c49c:	687b      	ldr	r3, [r7, #4]
9000c49e:	2200      	movs	r2, #0
9000c4a0:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000c4a4:	2300      	movs	r3, #0
}
9000c4a6:	4618      	mov	r0, r3
9000c4a8:	370c      	adds	r7, #12
9000c4aa:	46bd      	mov	sp, r7
9000c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c4b0:	4770      	bx	lr

9000c4b2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000c4b2:	b580      	push	{r7, lr}
9000c4b4:	b082      	sub	sp, #8
9000c4b6:	af00      	add	r7, sp, #0
9000c4b8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000c4ba:	687b      	ldr	r3, [r7, #4]
9000c4bc:	2201      	movs	r2, #1
9000c4be:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000c4c2:	687b      	ldr	r3, [r7, #4]
9000c4c4:	2200      	movs	r2, #0
9000c4c6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000c4ca:	687b      	ldr	r3, [r7, #4]
9000c4cc:	2200      	movs	r2, #0
9000c4ce:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000c4d2:	6878      	ldr	r0, [r7, #4]
9000c4d4:	f7f4 fef2 	bl	900012bc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000c4d8:	687b      	ldr	r3, [r7, #4]
9000c4da:	791b      	ldrb	r3, [r3, #4]
9000c4dc:	4619      	mov	r1, r3
9000c4de:	6878      	ldr	r0, [r7, #4]
9000c4e0:	f000 f80b 	bl	9000c4fa <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000c4e4:	687b      	ldr	r3, [r7, #4]
9000c4e6:	795b      	ldrb	r3, [r3, #5]
9000c4e8:	4619      	mov	r1, r3
9000c4ea:	6878      	ldr	r0, [r7, #4]
9000c4ec:	f000 f805 	bl	9000c4fa <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000c4f0:	2300      	movs	r3, #0
}
9000c4f2:	4618      	mov	r0, r3
9000c4f4:	3708      	adds	r7, #8
9000c4f6:	46bd      	mov	sp, r7
9000c4f8:	bd80      	pop	{r7, pc}

9000c4fa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000c4fa:	b480      	push	{r7}
9000c4fc:	b083      	sub	sp, #12
9000c4fe:	af00      	add	r7, sp, #0
9000c500:	6078      	str	r0, [r7, #4]
9000c502:	460b      	mov	r3, r1
9000c504:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000c506:	78fb      	ldrb	r3, [r7, #3]
9000c508:	2b0f      	cmp	r3, #15
9000c50a:	d80f      	bhi.n	9000c52c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000c50c:	78fb      	ldrb	r3, [r7, #3]
9000c50e:	687a      	ldr	r2, [r7, #4]
9000c510:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000c514:	009b      	lsls	r3, r3, #2
9000c516:	4413      	add	r3, r2
9000c518:	685a      	ldr	r2, [r3, #4]
9000c51a:	78fb      	ldrb	r3, [r7, #3]
9000c51c:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000c520:	6879      	ldr	r1, [r7, #4]
9000c522:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000c526:	009b      	lsls	r3, r3, #2
9000c528:	440b      	add	r3, r1
9000c52a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000c52c:	2300      	movs	r3, #0
}
9000c52e:	4618      	mov	r0, r3
9000c530:	370c      	adds	r7, #12
9000c532:	46bd      	mov	sp, r7
9000c534:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c538:	4770      	bx	lr
	...

9000c53c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000c53c:	b580      	push	{r7, lr}
9000c53e:	b082      	sub	sp, #8
9000c540:	af00      	add	r7, sp, #0
9000c542:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000c544:	687b      	ldr	r3, [r7, #4]
9000c546:	681b      	ldr	r3, [r3, #0]
9000c548:	4a22      	ldr	r2, [pc, #136]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c54a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000c54c:	687b      	ldr	r3, [r7, #4]
9000c54e:	685b      	ldr	r3, [r3, #4]
9000c550:	4a20      	ldr	r2, [pc, #128]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c552:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000c554:	687b      	ldr	r3, [r7, #4]
9000c556:	689b      	ldr	r3, [r3, #8]
9000c558:	4a1e      	ldr	r2, [pc, #120]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c55a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000c55c:	687b      	ldr	r3, [r7, #4]
9000c55e:	68db      	ldr	r3, [r3, #12]
9000c560:	4a1c      	ldr	r2, [pc, #112]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c562:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000c564:	687b      	ldr	r3, [r7, #4]
9000c566:	691b      	ldr	r3, [r3, #16]
9000c568:	4a1a      	ldr	r2, [pc, #104]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c56a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000c56c:	687b      	ldr	r3, [r7, #4]
9000c56e:	695b      	ldr	r3, [r3, #20]
9000c570:	4a18      	ldr	r2, [pc, #96]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c572:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000c574:	687b      	ldr	r3, [r7, #4]
9000c576:	699b      	ldr	r3, [r3, #24]
9000c578:	4a16      	ldr	r2, [pc, #88]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c57a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000c57c:	687b      	ldr	r3, [r7, #4]
9000c57e:	69db      	ldr	r3, [r3, #28]
9000c580:	4a14      	ldr	r2, [pc, #80]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c582:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000c584:	687b      	ldr	r3, [r7, #4]
9000c586:	6a1b      	ldr	r3, [r3, #32]
9000c588:	4a12      	ldr	r2, [pc, #72]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c58a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000c58c:	687b      	ldr	r3, [r7, #4]
9000c58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000c590:	4a10      	ldr	r2, [pc, #64]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c592:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000c594:	687b      	ldr	r3, [r7, #4]
9000c596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000c598:	4a0e      	ldr	r2, [pc, #56]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c59a:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000c59c:	4b0e      	ldr	r3, [pc, #56]	@ (9000c5d8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c59e:	2200      	movs	r2, #0
9000c5a0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000c5a2:	4b0d      	ldr	r3, [pc, #52]	@ (9000c5d8 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c5a4:	2200      	movs	r2, #0
9000c5a6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000c5a8:	4b0a      	ldr	r3, [pc, #40]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c5aa:	69db      	ldr	r3, [r3, #28]
9000c5ac:	4a0b      	ldr	r2, [pc, #44]	@ (9000c5dc <UTIL_LCD_SetFuncDriver+0xa0>)
9000c5ae:	4611      	mov	r1, r2
9000c5b0:	2000      	movs	r0, #0
9000c5b2:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000c5b4:	4b07      	ldr	r3, [pc, #28]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c5b6:	6a1b      	ldr	r3, [r3, #32]
9000c5b8:	4a09      	ldr	r2, [pc, #36]	@ (9000c5e0 <UTIL_LCD_SetFuncDriver+0xa4>)
9000c5ba:	4611      	mov	r1, r2
9000c5bc:	2000      	movs	r0, #0
9000c5be:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000c5c0:	4b04      	ldr	r3, [pc, #16]	@ (9000c5d4 <UTIL_LCD_SetFuncDriver+0x98>)
9000c5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000c5c4:	4a07      	ldr	r2, [pc, #28]	@ (9000c5e4 <UTIL_LCD_SetFuncDriver+0xa8>)
9000c5c6:	4611      	mov	r1, r2
9000c5c8:	2000      	movs	r0, #0
9000c5ca:	4798      	blx	r3
}
9000c5cc:	bf00      	nop
9000c5ce:	3708      	adds	r7, #8
9000c5d0:	46bd      	mov	sp, r7
9000c5d2:	bd80      	pop	{r7, pc}
9000c5d4:	200013c0 	.word	0x200013c0
9000c5d8:	20001380 	.word	0x20001380
9000c5dc:	20001394 	.word	0x20001394
9000c5e0:	20001398 	.word	0x20001398
9000c5e4:	2000139c 	.word	0x2000139c

9000c5e8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000c5e8:	b580      	push	{r7, lr}
9000c5ea:	b082      	sub	sp, #8
9000c5ec:	af00      	add	r7, sp, #0
9000c5ee:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000c5f0:	4b0a      	ldr	r3, [pc, #40]	@ (9000c61c <UTIL_LCD_SetLayer+0x34>)
9000c5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000c5f4:	2b00      	cmp	r3, #0
9000c5f6:	d00c      	beq.n	9000c612 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000c5f8:	4b08      	ldr	r3, [pc, #32]	@ (9000c61c <UTIL_LCD_SetLayer+0x34>)
9000c5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000c5fc:	4a08      	ldr	r2, [pc, #32]	@ (9000c620 <UTIL_LCD_SetLayer+0x38>)
9000c5fe:	6912      	ldr	r2, [r2, #16]
9000c600:	6879      	ldr	r1, [r7, #4]
9000c602:	4610      	mov	r0, r2
9000c604:	4798      	blx	r3
9000c606:	4603      	mov	r3, r0
9000c608:	2b00      	cmp	r3, #0
9000c60a:	d102      	bne.n	9000c612 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000c60c:	4a04      	ldr	r2, [pc, #16]	@ (9000c620 <UTIL_LCD_SetLayer+0x38>)
9000c60e:	687b      	ldr	r3, [r7, #4]
9000c610:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000c612:	bf00      	nop
9000c614:	3708      	adds	r7, #8
9000c616:	46bd      	mov	sp, r7
9000c618:	bd80      	pop	{r7, pc}
9000c61a:	bf00      	nop
9000c61c:	200013c0 	.word	0x200013c0
9000c620:	20001380 	.word	0x20001380

9000c624 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000c624:	b480      	push	{r7}
9000c626:	b083      	sub	sp, #12
9000c628:	af00      	add	r7, sp, #0
9000c62a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000c62c:	4b06      	ldr	r3, [pc, #24]	@ (9000c648 <UTIL_LCD_SetTextColor+0x24>)
9000c62e:	68db      	ldr	r3, [r3, #12]
9000c630:	4a05      	ldr	r2, [pc, #20]	@ (9000c648 <UTIL_LCD_SetTextColor+0x24>)
9000c632:	015b      	lsls	r3, r3, #5
9000c634:	4413      	add	r3, r2
9000c636:	687a      	ldr	r2, [r7, #4]
9000c638:	601a      	str	r2, [r3, #0]
}
9000c63a:	bf00      	nop
9000c63c:	370c      	adds	r7, #12
9000c63e:	46bd      	mov	sp, r7
9000c640:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c644:	4770      	bx	lr
9000c646:	bf00      	nop
9000c648:	20001380 	.word	0x20001380

9000c64c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000c64c:	b480      	push	{r7}
9000c64e:	b083      	sub	sp, #12
9000c650:	af00      	add	r7, sp, #0
9000c652:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000c654:	4b06      	ldr	r3, [pc, #24]	@ (9000c670 <UTIL_LCD_SetBackColor+0x24>)
9000c656:	68db      	ldr	r3, [r3, #12]
9000c658:	4a05      	ldr	r2, [pc, #20]	@ (9000c670 <UTIL_LCD_SetBackColor+0x24>)
9000c65a:	015b      	lsls	r3, r3, #5
9000c65c:	4413      	add	r3, r2
9000c65e:	3304      	adds	r3, #4
9000c660:	687a      	ldr	r2, [r7, #4]
9000c662:	601a      	str	r2, [r3, #0]
}
9000c664:	bf00      	nop
9000c666:	370c      	adds	r7, #12
9000c668:	46bd      	mov	sp, r7
9000c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c66e:	4770      	bx	lr
9000c670:	20001380 	.word	0x20001380

9000c674 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000c674:	b480      	push	{r7}
9000c676:	b083      	sub	sp, #12
9000c678:	af00      	add	r7, sp, #0
9000c67a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000c67c:	4b06      	ldr	r3, [pc, #24]	@ (9000c698 <UTIL_LCD_SetFont+0x24>)
9000c67e:	68db      	ldr	r3, [r3, #12]
9000c680:	4a05      	ldr	r2, [pc, #20]	@ (9000c698 <UTIL_LCD_SetFont+0x24>)
9000c682:	015b      	lsls	r3, r3, #5
9000c684:	4413      	add	r3, r2
9000c686:	3308      	adds	r3, #8
9000c688:	687a      	ldr	r2, [r7, #4]
9000c68a:	601a      	str	r2, [r3, #0]
}
9000c68c:	bf00      	nop
9000c68e:	370c      	adds	r7, #12
9000c690:	46bd      	mov	sp, r7
9000c692:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c696:	4770      	bx	lr
9000c698:	20001380 	.word	0x20001380

9000c69c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000c69c:	b590      	push	{r4, r7, lr}
9000c69e:	b087      	sub	sp, #28
9000c6a0:	af02      	add	r7, sp, #8
9000c6a2:	60f8      	str	r0, [r7, #12]
9000c6a4:	60b9      	str	r1, [r7, #8]
9000c6a6:	607a      	str	r2, [r7, #4]
9000c6a8:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000c6aa:	4b08      	ldr	r3, [pc, #32]	@ (9000c6cc <UTIL_LCD_FillRGBRect+0x30>)
9000c6ac:	685c      	ldr	r4, [r3, #4]
9000c6ae:	4b08      	ldr	r3, [pc, #32]	@ (9000c6d0 <UTIL_LCD_FillRGBRect+0x34>)
9000c6b0:	6918      	ldr	r0, [r3, #16]
9000c6b2:	6a3b      	ldr	r3, [r7, #32]
9000c6b4:	9301      	str	r3, [sp, #4]
9000c6b6:	683b      	ldr	r3, [r7, #0]
9000c6b8:	9300      	str	r3, [sp, #0]
9000c6ba:	687b      	ldr	r3, [r7, #4]
9000c6bc:	68ba      	ldr	r2, [r7, #8]
9000c6be:	68f9      	ldr	r1, [r7, #12]
9000c6c0:	47a0      	blx	r4
}
9000c6c2:	bf00      	nop
9000c6c4:	3714      	adds	r7, #20
9000c6c6:	46bd      	mov	sp, r7
9000c6c8:	bd90      	pop	{r4, r7, pc}
9000c6ca:	bf00      	nop
9000c6cc:	200013c0 	.word	0x200013c0
9000c6d0:	20001380 	.word	0x20001380

9000c6d4 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000c6d4:	b580      	push	{r7, lr}
9000c6d6:	b084      	sub	sp, #16
9000c6d8:	af02      	add	r7, sp, #8
9000c6da:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000c6dc:	4b07      	ldr	r3, [pc, #28]	@ (9000c6fc <UTIL_LCD_Clear+0x28>)
9000c6de:	695a      	ldr	r2, [r3, #20]
9000c6e0:	4b06      	ldr	r3, [pc, #24]	@ (9000c6fc <UTIL_LCD_Clear+0x28>)
9000c6e2:	6999      	ldr	r1, [r3, #24]
9000c6e4:	687b      	ldr	r3, [r7, #4]
9000c6e6:	9300      	str	r3, [sp, #0]
9000c6e8:	460b      	mov	r3, r1
9000c6ea:	2100      	movs	r1, #0
9000c6ec:	2000      	movs	r0, #0
9000c6ee:	f000 f8eb 	bl	9000c8c8 <UTIL_LCD_FillRect>
}
9000c6f2:	bf00      	nop
9000c6f4:	3708      	adds	r7, #8
9000c6f6:	46bd      	mov	sp, r7
9000c6f8:	bd80      	pop	{r7, pc}
9000c6fa:	bf00      	nop
9000c6fc:	20001380 	.word	0x20001380

9000c700 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000c700:	b580      	push	{r7, lr}
9000c702:	b084      	sub	sp, #16
9000c704:	af00      	add	r7, sp, #0
9000c706:	60f8      	str	r0, [r7, #12]
9000c708:	60b9      	str	r1, [r7, #8]
9000c70a:	4613      	mov	r3, r2
9000c70c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c70e:	4b16      	ldr	r3, [pc, #88]	@ (9000c768 <UTIL_LCD_DisplayChar+0x68>)
9000c710:	68db      	ldr	r3, [r3, #12]
9000c712:	4a15      	ldr	r2, [pc, #84]	@ (9000c768 <UTIL_LCD_DisplayChar+0x68>)
9000c714:	015b      	lsls	r3, r3, #5
9000c716:	4413      	add	r3, r2
9000c718:	3308      	adds	r3, #8
9000c71a:	681b      	ldr	r3, [r3, #0]
9000c71c:	681a      	ldr	r2, [r3, #0]
9000c71e:	79fb      	ldrb	r3, [r7, #7]
9000c720:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000c722:	4911      	ldr	r1, [pc, #68]	@ (9000c768 <UTIL_LCD_DisplayChar+0x68>)
9000c724:	68c9      	ldr	r1, [r1, #12]
9000c726:	4810      	ldr	r0, [pc, #64]	@ (9000c768 <UTIL_LCD_DisplayChar+0x68>)
9000c728:	0149      	lsls	r1, r1, #5
9000c72a:	4401      	add	r1, r0
9000c72c:	3108      	adds	r1, #8
9000c72e:	6809      	ldr	r1, [r1, #0]
9000c730:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c732:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000c736:	4b0c      	ldr	r3, [pc, #48]	@ (9000c768 <UTIL_LCD_DisplayChar+0x68>)
9000c738:	68db      	ldr	r3, [r3, #12]
9000c73a:	480b      	ldr	r0, [pc, #44]	@ (9000c768 <UTIL_LCD_DisplayChar+0x68>)
9000c73c:	015b      	lsls	r3, r3, #5
9000c73e:	4403      	add	r3, r0
9000c740:	3308      	adds	r3, #8
9000c742:	681b      	ldr	r3, [r3, #0]
9000c744:	889b      	ldrh	r3, [r3, #4]
9000c746:	3307      	adds	r3, #7
9000c748:	2b00      	cmp	r3, #0
9000c74a:	da00      	bge.n	9000c74e <UTIL_LCD_DisplayChar+0x4e>
9000c74c:	3307      	adds	r3, #7
9000c74e:	10db      	asrs	r3, r3, #3
9000c750:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c754:	4413      	add	r3, r2
9000c756:	461a      	mov	r2, r3
9000c758:	68b9      	ldr	r1, [r7, #8]
9000c75a:	68f8      	ldr	r0, [r7, #12]
9000c75c:	f000 f8ee 	bl	9000c93c <DrawChar>
}
9000c760:	bf00      	nop
9000c762:	3710      	adds	r7, #16
9000c764:	46bd      	mov	sp, r7
9000c766:	bd80      	pop	{r7, pc}
9000c768:	20001380 	.word	0x20001380

9000c76c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000c76c:	b580      	push	{r7, lr}
9000c76e:	b08a      	sub	sp, #40	@ 0x28
9000c770:	af00      	add	r7, sp, #0
9000c772:	60f8      	str	r0, [r7, #12]
9000c774:	60b9      	str	r1, [r7, #8]
9000c776:	607a      	str	r2, [r7, #4]
9000c778:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000c77a:	2301      	movs	r3, #1
9000c77c:	627b      	str	r3, [r7, #36]	@ 0x24
9000c77e:	2300      	movs	r3, #0
9000c780:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000c782:	2300      	movs	r3, #0
9000c784:	61fb      	str	r3, [r7, #28]
9000c786:	2300      	movs	r3, #0
9000c788:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000c78a:	687b      	ldr	r3, [r7, #4]
9000c78c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000c78e:	e002      	b.n	9000c796 <UTIL_LCD_DisplayStringAt+0x2a>
9000c790:	69fb      	ldr	r3, [r7, #28]
9000c792:	3301      	adds	r3, #1
9000c794:	61fb      	str	r3, [r7, #28]
9000c796:	69bb      	ldr	r3, [r7, #24]
9000c798:	1c5a      	adds	r2, r3, #1
9000c79a:	61ba      	str	r2, [r7, #24]
9000c79c:	781b      	ldrb	r3, [r3, #0]
9000c79e:	2b00      	cmp	r3, #0
9000c7a0:	d1f6      	bne.n	9000c790 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000c7a2:	4b48      	ldr	r3, [pc, #288]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c7a4:	695b      	ldr	r3, [r3, #20]
9000c7a6:	4a47      	ldr	r2, [pc, #284]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c7a8:	68d2      	ldr	r2, [r2, #12]
9000c7aa:	4946      	ldr	r1, [pc, #280]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c7ac:	0152      	lsls	r2, r2, #5
9000c7ae:	440a      	add	r2, r1
9000c7b0:	3208      	adds	r2, #8
9000c7b2:	6812      	ldr	r2, [r2, #0]
9000c7b4:	8892      	ldrh	r2, [r2, #4]
9000c7b6:	fbb3 f3f2 	udiv	r3, r3, r2
9000c7ba:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000c7bc:	78fb      	ldrb	r3, [r7, #3]
9000c7be:	2b03      	cmp	r3, #3
9000c7c0:	d018      	beq.n	9000c7f4 <UTIL_LCD_DisplayStringAt+0x88>
9000c7c2:	2b03      	cmp	r3, #3
9000c7c4:	dc2a      	bgt.n	9000c81c <UTIL_LCD_DisplayStringAt+0xb0>
9000c7c6:	2b01      	cmp	r3, #1
9000c7c8:	d002      	beq.n	9000c7d0 <UTIL_LCD_DisplayStringAt+0x64>
9000c7ca:	2b02      	cmp	r3, #2
9000c7cc:	d015      	beq.n	9000c7fa <UTIL_LCD_DisplayStringAt+0x8e>
9000c7ce:	e025      	b.n	9000c81c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000c7d0:	697a      	ldr	r2, [r7, #20]
9000c7d2:	69fb      	ldr	r3, [r7, #28]
9000c7d4:	1ad3      	subs	r3, r2, r3
9000c7d6:	4a3b      	ldr	r2, [pc, #236]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c7d8:	68d2      	ldr	r2, [r2, #12]
9000c7da:	493a      	ldr	r1, [pc, #232]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c7dc:	0152      	lsls	r2, r2, #5
9000c7de:	440a      	add	r2, r1
9000c7e0:	3208      	adds	r2, #8
9000c7e2:	6812      	ldr	r2, [r2, #0]
9000c7e4:	8892      	ldrh	r2, [r2, #4]
9000c7e6:	fb02 f303 	mul.w	r3, r2, r3
9000c7ea:	085b      	lsrs	r3, r3, #1
9000c7ec:	68fa      	ldr	r2, [r7, #12]
9000c7ee:	4413      	add	r3, r2
9000c7f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c7f2:	e016      	b.n	9000c822 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000c7f4:	68fb      	ldr	r3, [r7, #12]
9000c7f6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c7f8:	e013      	b.n	9000c822 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000c7fa:	697a      	ldr	r2, [r7, #20]
9000c7fc:	69fb      	ldr	r3, [r7, #28]
9000c7fe:	1ad3      	subs	r3, r2, r3
9000c800:	4a30      	ldr	r2, [pc, #192]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c802:	68d2      	ldr	r2, [r2, #12]
9000c804:	492f      	ldr	r1, [pc, #188]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c806:	0152      	lsls	r2, r2, #5
9000c808:	440a      	add	r2, r1
9000c80a:	3208      	adds	r2, #8
9000c80c:	6812      	ldr	r2, [r2, #0]
9000c80e:	8892      	ldrh	r2, [r2, #4]
9000c810:	fb03 f202 	mul.w	r2, r3, r2
9000c814:	68fb      	ldr	r3, [r7, #12]
9000c816:	1ad3      	subs	r3, r2, r3
9000c818:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c81a:	e002      	b.n	9000c822 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000c81c:	68fb      	ldr	r3, [r7, #12]
9000c81e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000c820:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000c822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c824:	2b00      	cmp	r3, #0
9000c826:	d003      	beq.n	9000c830 <UTIL_LCD_DisplayStringAt+0xc4>
9000c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c82a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000c82e:	d31b      	bcc.n	9000c868 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000c830:	2301      	movs	r3, #1
9000c832:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000c834:	e018      	b.n	9000c868 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000c836:	687b      	ldr	r3, [r7, #4]
9000c838:	781b      	ldrb	r3, [r3, #0]
9000c83a:	461a      	mov	r2, r3
9000c83c:	68b9      	ldr	r1, [r7, #8]
9000c83e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000c840:	f7ff ff5e 	bl	9000c700 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000c844:	4b1f      	ldr	r3, [pc, #124]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c846:	68db      	ldr	r3, [r3, #12]
9000c848:	4a1e      	ldr	r2, [pc, #120]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c84a:	015b      	lsls	r3, r3, #5
9000c84c:	4413      	add	r3, r2
9000c84e:	3308      	adds	r3, #8
9000c850:	681b      	ldr	r3, [r3, #0]
9000c852:	889b      	ldrh	r3, [r3, #4]
9000c854:	461a      	mov	r2, r3
9000c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c858:	4413      	add	r3, r2
9000c85a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000c85c:	687b      	ldr	r3, [r7, #4]
9000c85e:	3301      	adds	r3, #1
9000c860:	607b      	str	r3, [r7, #4]
    i++;
9000c862:	6a3b      	ldr	r3, [r7, #32]
9000c864:	3301      	adds	r3, #1
9000c866:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000c868:	687b      	ldr	r3, [r7, #4]
9000c86a:	781b      	ldrb	r3, [r3, #0]
9000c86c:	2b00      	cmp	r3, #0
9000c86e:	bf14      	ite	ne
9000c870:	2301      	movne	r3, #1
9000c872:	2300      	moveq	r3, #0
9000c874:	b2da      	uxtb	r2, r3
9000c876:	4b13      	ldr	r3, [pc, #76]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c878:	6959      	ldr	r1, [r3, #20]
9000c87a:	4b12      	ldr	r3, [pc, #72]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c87c:	68db      	ldr	r3, [r3, #12]
9000c87e:	4811      	ldr	r0, [pc, #68]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c880:	015b      	lsls	r3, r3, #5
9000c882:	4403      	add	r3, r0
9000c884:	3308      	adds	r3, #8
9000c886:	681b      	ldr	r3, [r3, #0]
9000c888:	889b      	ldrh	r3, [r3, #4]
9000c88a:	4618      	mov	r0, r3
9000c88c:	6a3b      	ldr	r3, [r7, #32]
9000c88e:	fb00 f303 	mul.w	r3, r0, r3
9000c892:	1acb      	subs	r3, r1, r3
9000c894:	b29b      	uxth	r3, r3
9000c896:	490b      	ldr	r1, [pc, #44]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c898:	68c9      	ldr	r1, [r1, #12]
9000c89a:	480a      	ldr	r0, [pc, #40]	@ (9000c8c4 <UTIL_LCD_DisplayStringAt+0x158>)
9000c89c:	0149      	lsls	r1, r1, #5
9000c89e:	4401      	add	r1, r0
9000c8a0:	3108      	adds	r1, #8
9000c8a2:	6809      	ldr	r1, [r1, #0]
9000c8a4:	8889      	ldrh	r1, [r1, #4]
9000c8a6:	428b      	cmp	r3, r1
9000c8a8:	bf2c      	ite	cs
9000c8aa:	2301      	movcs	r3, #1
9000c8ac:	2300      	movcc	r3, #0
9000c8ae:	b2db      	uxtb	r3, r3
9000c8b0:	4013      	ands	r3, r2
9000c8b2:	b2db      	uxtb	r3, r3
9000c8b4:	2b00      	cmp	r3, #0
9000c8b6:	d1be      	bne.n	9000c836 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000c8b8:	bf00      	nop
9000c8ba:	bf00      	nop
9000c8bc:	3728      	adds	r7, #40	@ 0x28
9000c8be:	46bd      	mov	sp, r7
9000c8c0:	bd80      	pop	{r7, pc}
9000c8c2:	bf00      	nop
9000c8c4:	20001380 	.word	0x20001380

9000c8c8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000c8c8:	b590      	push	{r4, r7, lr}
9000c8ca:	b087      	sub	sp, #28
9000c8cc:	af02      	add	r7, sp, #8
9000c8ce:	60f8      	str	r0, [r7, #12]
9000c8d0:	60b9      	str	r1, [r7, #8]
9000c8d2:	607a      	str	r2, [r7, #4]
9000c8d4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c8d6:	4b17      	ldr	r3, [pc, #92]	@ (9000c934 <UTIL_LCD_FillRect+0x6c>)
9000c8d8:	69db      	ldr	r3, [r3, #28]
9000c8da:	2b02      	cmp	r3, #2
9000c8dc:	d11a      	bne.n	9000c914 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000c8de:	4b16      	ldr	r3, [pc, #88]	@ (9000c938 <UTIL_LCD_FillRect+0x70>)
9000c8e0:	691c      	ldr	r4, [r3, #16]
9000c8e2:	4b14      	ldr	r3, [pc, #80]	@ (9000c934 <UTIL_LCD_FillRect+0x6c>)
9000c8e4:	6918      	ldr	r0, [r3, #16]
9000c8e6:	6a3b      	ldr	r3, [r7, #32]
9000c8e8:	08db      	lsrs	r3, r3, #3
9000c8ea:	f003 021f 	and.w	r2, r3, #31
9000c8ee:	6a3b      	ldr	r3, [r7, #32]
9000c8f0:	0a9b      	lsrs	r3, r3, #10
9000c8f2:	015b      	lsls	r3, r3, #5
9000c8f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c8f8:	431a      	orrs	r2, r3
9000c8fa:	6a3b      	ldr	r3, [r7, #32]
9000c8fc:	0cdb      	lsrs	r3, r3, #19
9000c8fe:	02db      	lsls	r3, r3, #11
9000c900:	b29b      	uxth	r3, r3
9000c902:	4313      	orrs	r3, r2
9000c904:	9301      	str	r3, [sp, #4]
9000c906:	683b      	ldr	r3, [r7, #0]
9000c908:	9300      	str	r3, [sp, #0]
9000c90a:	687b      	ldr	r3, [r7, #4]
9000c90c:	68ba      	ldr	r2, [r7, #8]
9000c90e:	68f9      	ldr	r1, [r7, #12]
9000c910:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000c912:	e00b      	b.n	9000c92c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000c914:	4b08      	ldr	r3, [pc, #32]	@ (9000c938 <UTIL_LCD_FillRect+0x70>)
9000c916:	691c      	ldr	r4, [r3, #16]
9000c918:	4b06      	ldr	r3, [pc, #24]	@ (9000c934 <UTIL_LCD_FillRect+0x6c>)
9000c91a:	6918      	ldr	r0, [r3, #16]
9000c91c:	6a3b      	ldr	r3, [r7, #32]
9000c91e:	9301      	str	r3, [sp, #4]
9000c920:	683b      	ldr	r3, [r7, #0]
9000c922:	9300      	str	r3, [sp, #0]
9000c924:	687b      	ldr	r3, [r7, #4]
9000c926:	68ba      	ldr	r2, [r7, #8]
9000c928:	68f9      	ldr	r1, [r7, #12]
9000c92a:	47a0      	blx	r4
}
9000c92c:	bf00      	nop
9000c92e:	3714      	adds	r7, #20
9000c930:	46bd      	mov	sp, r7
9000c932:	bd90      	pop	{r4, r7, pc}
9000c934:	20001380 	.word	0x20001380
9000c938:	200013c0 	.word	0x200013c0

9000c93c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000c93c:	b580      	push	{r7, lr}
9000c93e:	b0b2      	sub	sp, #200	@ 0xc8
9000c940:	af02      	add	r7, sp, #8
9000c942:	60f8      	str	r0, [r7, #12]
9000c944:	60b9      	str	r1, [r7, #8]
9000c946:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000c948:	2300      	movs	r3, #0
9000c94a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c94e:	2300      	movs	r3, #0
9000c950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000c954:	4ba5      	ldr	r3, [pc, #660]	@ (9000cbec <DrawChar+0x2b0>)
9000c956:	68db      	ldr	r3, [r3, #12]
9000c958:	4aa4      	ldr	r2, [pc, #656]	@ (9000cbec <DrawChar+0x2b0>)
9000c95a:	015b      	lsls	r3, r3, #5
9000c95c:	4413      	add	r3, r2
9000c95e:	3308      	adds	r3, #8
9000c960:	681b      	ldr	r3, [r3, #0]
9000c962:	88db      	ldrh	r3, [r3, #6]
9000c964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000c968:	4ba0      	ldr	r3, [pc, #640]	@ (9000cbec <DrawChar+0x2b0>)
9000c96a:	68db      	ldr	r3, [r3, #12]
9000c96c:	4a9f      	ldr	r2, [pc, #636]	@ (9000cbec <DrawChar+0x2b0>)
9000c96e:	015b      	lsls	r3, r3, #5
9000c970:	4413      	add	r3, r2
9000c972:	3308      	adds	r3, #8
9000c974:	681b      	ldr	r3, [r3, #0]
9000c976:	889b      	ldrh	r3, [r3, #4]
9000c978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000c97c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c980:	3307      	adds	r3, #7
9000c982:	f023 0207 	bic.w	r2, r3, #7
9000c986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c98a:	1ad3      	subs	r3, r2, r3
9000c98c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000c990:	2300      	movs	r3, #0
9000c992:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c996:	e11c      	b.n	9000cbd2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000c998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c99c:	3307      	adds	r3, #7
9000c99e:	08db      	lsrs	r3, r3, #3
9000c9a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c9a4:	fb02 f303 	mul.w	r3, r2, r3
9000c9a8:	687a      	ldr	r2, [r7, #4]
9000c9aa:	4413      	add	r3, r2
9000c9ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000c9b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c9b4:	3307      	adds	r3, #7
9000c9b6:	08db      	lsrs	r3, r3, #3
9000c9b8:	2b01      	cmp	r3, #1
9000c9ba:	d002      	beq.n	9000c9c2 <DrawChar+0x86>
9000c9bc:	2b02      	cmp	r3, #2
9000c9be:	d006      	beq.n	9000c9ce <DrawChar+0x92>
9000c9c0:	e011      	b.n	9000c9e6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000c9c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c9c6:	781b      	ldrb	r3, [r3, #0]
9000c9c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c9cc:	e01d      	b.n	9000ca0a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000c9ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c9d2:	781b      	ldrb	r3, [r3, #0]
9000c9d4:	021b      	lsls	r3, r3, #8
9000c9d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c9da:	3201      	adds	r2, #1
9000c9dc:	7812      	ldrb	r2, [r2, #0]
9000c9de:	4313      	orrs	r3, r2
9000c9e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c9e4:	e011      	b.n	9000ca0a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000c9e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c9ea:	781b      	ldrb	r3, [r3, #0]
9000c9ec:	041a      	lsls	r2, r3, #16
9000c9ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c9f2:	3301      	adds	r3, #1
9000c9f4:	781b      	ldrb	r3, [r3, #0]
9000c9f6:	021b      	lsls	r3, r3, #8
9000c9f8:	4313      	orrs	r3, r2
9000c9fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c9fe:	3202      	adds	r2, #2
9000ca00:	7812      	ldrb	r2, [r2, #0]
9000ca02:	4313      	orrs	r3, r2
9000ca04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000ca08:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000ca0a:	4b78      	ldr	r3, [pc, #480]	@ (9000cbec <DrawChar+0x2b0>)
9000ca0c:	68db      	ldr	r3, [r3, #12]
9000ca0e:	4a77      	ldr	r2, [pc, #476]	@ (9000cbec <DrawChar+0x2b0>)
9000ca10:	015b      	lsls	r3, r3, #5
9000ca12:	4413      	add	r3, r2
9000ca14:	331c      	adds	r3, #28
9000ca16:	681b      	ldr	r3, [r3, #0]
9000ca18:	2b02      	cmp	r3, #2
9000ca1a:	f040 808c 	bne.w	9000cb36 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000ca1e:	2300      	movs	r3, #0
9000ca20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000ca24:	e074      	b.n	9000cb10 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000ca26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000ca2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ca2e:	1ad2      	subs	r2, r2, r3
9000ca30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000ca34:	4413      	add	r3, r2
9000ca36:	3b01      	subs	r3, #1
9000ca38:	2201      	movs	r2, #1
9000ca3a:	fa02 f303 	lsl.w	r3, r2, r3
9000ca3e:	461a      	mov	r2, r3
9000ca40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000ca44:	4013      	ands	r3, r2
9000ca46:	2b00      	cmp	r3, #0
9000ca48:	d02d      	beq.n	9000caa6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000ca4a:	4b68      	ldr	r3, [pc, #416]	@ (9000cbec <DrawChar+0x2b0>)
9000ca4c:	68db      	ldr	r3, [r3, #12]
9000ca4e:	4a67      	ldr	r2, [pc, #412]	@ (9000cbec <DrawChar+0x2b0>)
9000ca50:	015b      	lsls	r3, r3, #5
9000ca52:	4413      	add	r3, r2
9000ca54:	681b      	ldr	r3, [r3, #0]
9000ca56:	08db      	lsrs	r3, r3, #3
9000ca58:	b29b      	uxth	r3, r3
9000ca5a:	f003 031f 	and.w	r3, r3, #31
9000ca5e:	b29a      	uxth	r2, r3
9000ca60:	4b62      	ldr	r3, [pc, #392]	@ (9000cbec <DrawChar+0x2b0>)
9000ca62:	68db      	ldr	r3, [r3, #12]
9000ca64:	4961      	ldr	r1, [pc, #388]	@ (9000cbec <DrawChar+0x2b0>)
9000ca66:	015b      	lsls	r3, r3, #5
9000ca68:	440b      	add	r3, r1
9000ca6a:	681b      	ldr	r3, [r3, #0]
9000ca6c:	0a9b      	lsrs	r3, r3, #10
9000ca6e:	b29b      	uxth	r3, r3
9000ca70:	015b      	lsls	r3, r3, #5
9000ca72:	b29b      	uxth	r3, r3
9000ca74:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000ca78:	b29b      	uxth	r3, r3
9000ca7a:	4313      	orrs	r3, r2
9000ca7c:	b29a      	uxth	r2, r3
9000ca7e:	4b5b      	ldr	r3, [pc, #364]	@ (9000cbec <DrawChar+0x2b0>)
9000ca80:	68db      	ldr	r3, [r3, #12]
9000ca82:	495a      	ldr	r1, [pc, #360]	@ (9000cbec <DrawChar+0x2b0>)
9000ca84:	015b      	lsls	r3, r3, #5
9000ca86:	440b      	add	r3, r1
9000ca88:	681b      	ldr	r3, [r3, #0]
9000ca8a:	0cdb      	lsrs	r3, r3, #19
9000ca8c:	b29b      	uxth	r3, r3
9000ca8e:	02db      	lsls	r3, r3, #11
9000ca90:	b29b      	uxth	r3, r3
9000ca92:	4313      	orrs	r3, r2
9000ca94:	b29a      	uxth	r2, r3
9000ca96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ca9a:	005b      	lsls	r3, r3, #1
9000ca9c:	33c0      	adds	r3, #192	@ 0xc0
9000ca9e:	443b      	add	r3, r7
9000caa0:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000caa4:	e02f      	b.n	9000cb06 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000caa6:	4b51      	ldr	r3, [pc, #324]	@ (9000cbec <DrawChar+0x2b0>)
9000caa8:	68db      	ldr	r3, [r3, #12]
9000caaa:	4a50      	ldr	r2, [pc, #320]	@ (9000cbec <DrawChar+0x2b0>)
9000caac:	015b      	lsls	r3, r3, #5
9000caae:	4413      	add	r3, r2
9000cab0:	3304      	adds	r3, #4
9000cab2:	681b      	ldr	r3, [r3, #0]
9000cab4:	08db      	lsrs	r3, r3, #3
9000cab6:	b29b      	uxth	r3, r3
9000cab8:	f003 031f 	and.w	r3, r3, #31
9000cabc:	b29a      	uxth	r2, r3
9000cabe:	4b4b      	ldr	r3, [pc, #300]	@ (9000cbec <DrawChar+0x2b0>)
9000cac0:	68db      	ldr	r3, [r3, #12]
9000cac2:	494a      	ldr	r1, [pc, #296]	@ (9000cbec <DrawChar+0x2b0>)
9000cac4:	015b      	lsls	r3, r3, #5
9000cac6:	440b      	add	r3, r1
9000cac8:	3304      	adds	r3, #4
9000caca:	681b      	ldr	r3, [r3, #0]
9000cacc:	0a9b      	lsrs	r3, r3, #10
9000cace:	b29b      	uxth	r3, r3
9000cad0:	015b      	lsls	r3, r3, #5
9000cad2:	b29b      	uxth	r3, r3
9000cad4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000cad8:	b29b      	uxth	r3, r3
9000cada:	4313      	orrs	r3, r2
9000cadc:	b29a      	uxth	r2, r3
9000cade:	4b43      	ldr	r3, [pc, #268]	@ (9000cbec <DrawChar+0x2b0>)
9000cae0:	68db      	ldr	r3, [r3, #12]
9000cae2:	4942      	ldr	r1, [pc, #264]	@ (9000cbec <DrawChar+0x2b0>)
9000cae4:	015b      	lsls	r3, r3, #5
9000cae6:	440b      	add	r3, r1
9000cae8:	3304      	adds	r3, #4
9000caea:	681b      	ldr	r3, [r3, #0]
9000caec:	0cdb      	lsrs	r3, r3, #19
9000caee:	b29b      	uxth	r3, r3
9000caf0:	02db      	lsls	r3, r3, #11
9000caf2:	b29b      	uxth	r3, r3
9000caf4:	4313      	orrs	r3, r2
9000caf6:	b29a      	uxth	r2, r3
9000caf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cafc:	005b      	lsls	r3, r3, #1
9000cafe:	33c0      	adds	r3, #192	@ 0xc0
9000cb00:	443b      	add	r3, r7
9000cb02:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000cb06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cb0a:	3301      	adds	r3, #1
9000cb0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000cb10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000cb14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cb18:	429a      	cmp	r2, r3
9000cb1a:	d384      	bcc.n	9000ca26 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000cb1c:	68b9      	ldr	r1, [r7, #8]
9000cb1e:	1c4b      	adds	r3, r1, #1
9000cb20:	60bb      	str	r3, [r7, #8]
9000cb22:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000cb26:	2301      	movs	r3, #1
9000cb28:	9300      	str	r3, [sp, #0]
9000cb2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cb2e:	68f8      	ldr	r0, [r7, #12]
9000cb30:	f7ff fdb4 	bl	9000c69c <UTIL_LCD_FillRGBRect>
9000cb34:	e048      	b.n	9000cbc8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000cb36:	2300      	movs	r3, #0
9000cb38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000cb3c:	e032      	b.n	9000cba4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000cb3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000cb42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cb46:	1ad2      	subs	r2, r2, r3
9000cb48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000cb4c:	4413      	add	r3, r2
9000cb4e:	3b01      	subs	r3, #1
9000cb50:	2201      	movs	r2, #1
9000cb52:	fa02 f303 	lsl.w	r3, r2, r3
9000cb56:	461a      	mov	r2, r3
9000cb58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000cb5c:	4013      	ands	r3, r2
9000cb5e:	2b00      	cmp	r3, #0
9000cb60:	d00d      	beq.n	9000cb7e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000cb62:	4b22      	ldr	r3, [pc, #136]	@ (9000cbec <DrawChar+0x2b0>)
9000cb64:	68db      	ldr	r3, [r3, #12]
9000cb66:	4a21      	ldr	r2, [pc, #132]	@ (9000cbec <DrawChar+0x2b0>)
9000cb68:	015b      	lsls	r3, r3, #5
9000cb6a:	4413      	add	r3, r2
9000cb6c:	681a      	ldr	r2, [r3, #0]
9000cb6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cb72:	009b      	lsls	r3, r3, #2
9000cb74:	33c0      	adds	r3, #192	@ 0xc0
9000cb76:	443b      	add	r3, r7
9000cb78:	f843 2cac 	str.w	r2, [r3, #-172]
9000cb7c:	e00d      	b.n	9000cb9a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000cb7e:	4b1b      	ldr	r3, [pc, #108]	@ (9000cbec <DrawChar+0x2b0>)
9000cb80:	68db      	ldr	r3, [r3, #12]
9000cb82:	4a1a      	ldr	r2, [pc, #104]	@ (9000cbec <DrawChar+0x2b0>)
9000cb84:	015b      	lsls	r3, r3, #5
9000cb86:	4413      	add	r3, r2
9000cb88:	3304      	adds	r3, #4
9000cb8a:	681a      	ldr	r2, [r3, #0]
9000cb8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cb90:	009b      	lsls	r3, r3, #2
9000cb92:	33c0      	adds	r3, #192	@ 0xc0
9000cb94:	443b      	add	r3, r7
9000cb96:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000cb9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cb9e:	3301      	adds	r3, #1
9000cba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000cba4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000cba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cbac:	429a      	cmp	r2, r3
9000cbae:	d3c6      	bcc.n	9000cb3e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000cbb0:	68b9      	ldr	r1, [r7, #8]
9000cbb2:	1c4b      	adds	r3, r1, #1
9000cbb4:	60bb      	str	r3, [r7, #8]
9000cbb6:	f107 0214 	add.w	r2, r7, #20
9000cbba:	2301      	movs	r3, #1
9000cbbc:	9300      	str	r3, [sp, #0]
9000cbbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cbc2:	68f8      	ldr	r0, [r7, #12]
9000cbc4:	f7ff fd6a 	bl	9000c69c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000cbc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000cbcc:	3301      	adds	r3, #1
9000cbce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000cbd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000cbd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000cbda:	429a      	cmp	r2, r3
9000cbdc:	f4ff aedc 	bcc.w	9000c998 <DrawChar+0x5c>
    }
  }
}
9000cbe0:	bf00      	nop
9000cbe2:	bf00      	nop
9000cbe4:	37c0      	adds	r7, #192	@ 0xc0
9000cbe6:	46bd      	mov	sp, r7
9000cbe8:	bd80      	pop	{r7, pc}
9000cbea:	bf00      	nop
9000cbec:	20001380 	.word	0x20001380

9000cbf0 <sbrk_aligned>:
9000cbf0:	b570      	push	{r4, r5, r6, lr}
9000cbf2:	4e0f      	ldr	r6, [pc, #60]	@ (9000cc30 <sbrk_aligned+0x40>)
9000cbf4:	460c      	mov	r4, r1
9000cbf6:	6831      	ldr	r1, [r6, #0]
9000cbf8:	4605      	mov	r5, r0
9000cbfa:	b911      	cbnz	r1, 9000cc02 <sbrk_aligned+0x12>
9000cbfc:	f000 faec 	bl	9000d1d8 <_sbrk_r>
9000cc00:	6030      	str	r0, [r6, #0]
9000cc02:	4621      	mov	r1, r4
9000cc04:	4628      	mov	r0, r5
9000cc06:	f000 fae7 	bl	9000d1d8 <_sbrk_r>
9000cc0a:	1c43      	adds	r3, r0, #1
9000cc0c:	d103      	bne.n	9000cc16 <sbrk_aligned+0x26>
9000cc0e:	f04f 34ff 	mov.w	r4, #4294967295
9000cc12:	4620      	mov	r0, r4
9000cc14:	bd70      	pop	{r4, r5, r6, pc}
9000cc16:	1cc4      	adds	r4, r0, #3
9000cc18:	f024 0403 	bic.w	r4, r4, #3
9000cc1c:	42a0      	cmp	r0, r4
9000cc1e:	d0f8      	beq.n	9000cc12 <sbrk_aligned+0x22>
9000cc20:	1a21      	subs	r1, r4, r0
9000cc22:	4628      	mov	r0, r5
9000cc24:	f000 fad8 	bl	9000d1d8 <_sbrk_r>
9000cc28:	3001      	adds	r0, #1
9000cc2a:	d1f2      	bne.n	9000cc12 <sbrk_aligned+0x22>
9000cc2c:	e7ef      	b.n	9000cc0e <sbrk_aligned+0x1e>
9000cc2e:	bf00      	nop
9000cc30:	200013ec 	.word	0x200013ec

9000cc34 <_malloc_r>:
9000cc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000cc38:	1ccd      	adds	r5, r1, #3
9000cc3a:	f025 0503 	bic.w	r5, r5, #3
9000cc3e:	3508      	adds	r5, #8
9000cc40:	2d0c      	cmp	r5, #12
9000cc42:	bf38      	it	cc
9000cc44:	250c      	movcc	r5, #12
9000cc46:	2d00      	cmp	r5, #0
9000cc48:	4606      	mov	r6, r0
9000cc4a:	db01      	blt.n	9000cc50 <_malloc_r+0x1c>
9000cc4c:	42a9      	cmp	r1, r5
9000cc4e:	d904      	bls.n	9000cc5a <_malloc_r+0x26>
9000cc50:	230c      	movs	r3, #12
9000cc52:	6033      	str	r3, [r6, #0]
9000cc54:	2000      	movs	r0, #0
9000cc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000cc5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000cd30 <_malloc_r+0xfc>
9000cc5e:	f000 f869 	bl	9000cd34 <__malloc_lock>
9000cc62:	f8d8 3000 	ldr.w	r3, [r8]
9000cc66:	461c      	mov	r4, r3
9000cc68:	bb44      	cbnz	r4, 9000ccbc <_malloc_r+0x88>
9000cc6a:	4629      	mov	r1, r5
9000cc6c:	4630      	mov	r0, r6
9000cc6e:	f7ff ffbf 	bl	9000cbf0 <sbrk_aligned>
9000cc72:	1c43      	adds	r3, r0, #1
9000cc74:	4604      	mov	r4, r0
9000cc76:	d158      	bne.n	9000cd2a <_malloc_r+0xf6>
9000cc78:	f8d8 4000 	ldr.w	r4, [r8]
9000cc7c:	4627      	mov	r7, r4
9000cc7e:	2f00      	cmp	r7, #0
9000cc80:	d143      	bne.n	9000cd0a <_malloc_r+0xd6>
9000cc82:	2c00      	cmp	r4, #0
9000cc84:	d04b      	beq.n	9000cd1e <_malloc_r+0xea>
9000cc86:	6823      	ldr	r3, [r4, #0]
9000cc88:	4639      	mov	r1, r7
9000cc8a:	4630      	mov	r0, r6
9000cc8c:	eb04 0903 	add.w	r9, r4, r3
9000cc90:	f000 faa2 	bl	9000d1d8 <_sbrk_r>
9000cc94:	4581      	cmp	r9, r0
9000cc96:	d142      	bne.n	9000cd1e <_malloc_r+0xea>
9000cc98:	6821      	ldr	r1, [r4, #0]
9000cc9a:	1a6d      	subs	r5, r5, r1
9000cc9c:	4629      	mov	r1, r5
9000cc9e:	4630      	mov	r0, r6
9000cca0:	f7ff ffa6 	bl	9000cbf0 <sbrk_aligned>
9000cca4:	3001      	adds	r0, #1
9000cca6:	d03a      	beq.n	9000cd1e <_malloc_r+0xea>
9000cca8:	6823      	ldr	r3, [r4, #0]
9000ccaa:	442b      	add	r3, r5
9000ccac:	6023      	str	r3, [r4, #0]
9000ccae:	f8d8 3000 	ldr.w	r3, [r8]
9000ccb2:	685a      	ldr	r2, [r3, #4]
9000ccb4:	bb62      	cbnz	r2, 9000cd10 <_malloc_r+0xdc>
9000ccb6:	f8c8 7000 	str.w	r7, [r8]
9000ccba:	e00f      	b.n	9000ccdc <_malloc_r+0xa8>
9000ccbc:	6822      	ldr	r2, [r4, #0]
9000ccbe:	1b52      	subs	r2, r2, r5
9000ccc0:	d420      	bmi.n	9000cd04 <_malloc_r+0xd0>
9000ccc2:	2a0b      	cmp	r2, #11
9000ccc4:	d917      	bls.n	9000ccf6 <_malloc_r+0xc2>
9000ccc6:	1961      	adds	r1, r4, r5
9000ccc8:	42a3      	cmp	r3, r4
9000ccca:	6025      	str	r5, [r4, #0]
9000cccc:	bf18      	it	ne
9000ccce:	6059      	strne	r1, [r3, #4]
9000ccd0:	6863      	ldr	r3, [r4, #4]
9000ccd2:	bf08      	it	eq
9000ccd4:	f8c8 1000 	streq.w	r1, [r8]
9000ccd8:	5162      	str	r2, [r4, r5]
9000ccda:	604b      	str	r3, [r1, #4]
9000ccdc:	4630      	mov	r0, r6
9000ccde:	f000 f82f 	bl	9000cd40 <__malloc_unlock>
9000cce2:	f104 000b 	add.w	r0, r4, #11
9000cce6:	1d23      	adds	r3, r4, #4
9000cce8:	f020 0007 	bic.w	r0, r0, #7
9000ccec:	1ac2      	subs	r2, r0, r3
9000ccee:	bf1c      	itt	ne
9000ccf0:	1a1b      	subne	r3, r3, r0
9000ccf2:	50a3      	strne	r3, [r4, r2]
9000ccf4:	e7af      	b.n	9000cc56 <_malloc_r+0x22>
9000ccf6:	6862      	ldr	r2, [r4, #4]
9000ccf8:	42a3      	cmp	r3, r4
9000ccfa:	bf0c      	ite	eq
9000ccfc:	f8c8 2000 	streq.w	r2, [r8]
9000cd00:	605a      	strne	r2, [r3, #4]
9000cd02:	e7eb      	b.n	9000ccdc <_malloc_r+0xa8>
9000cd04:	4623      	mov	r3, r4
9000cd06:	6864      	ldr	r4, [r4, #4]
9000cd08:	e7ae      	b.n	9000cc68 <_malloc_r+0x34>
9000cd0a:	463c      	mov	r4, r7
9000cd0c:	687f      	ldr	r7, [r7, #4]
9000cd0e:	e7b6      	b.n	9000cc7e <_malloc_r+0x4a>
9000cd10:	461a      	mov	r2, r3
9000cd12:	685b      	ldr	r3, [r3, #4]
9000cd14:	42a3      	cmp	r3, r4
9000cd16:	d1fb      	bne.n	9000cd10 <_malloc_r+0xdc>
9000cd18:	2300      	movs	r3, #0
9000cd1a:	6053      	str	r3, [r2, #4]
9000cd1c:	e7de      	b.n	9000ccdc <_malloc_r+0xa8>
9000cd1e:	230c      	movs	r3, #12
9000cd20:	6033      	str	r3, [r6, #0]
9000cd22:	4630      	mov	r0, r6
9000cd24:	f000 f80c 	bl	9000cd40 <__malloc_unlock>
9000cd28:	e794      	b.n	9000cc54 <_malloc_r+0x20>
9000cd2a:	6005      	str	r5, [r0, #0]
9000cd2c:	e7d6      	b.n	9000ccdc <_malloc_r+0xa8>
9000cd2e:	bf00      	nop
9000cd30:	200013f0 	.word	0x200013f0

9000cd34 <__malloc_lock>:
9000cd34:	4801      	ldr	r0, [pc, #4]	@ (9000cd3c <__malloc_lock+0x8>)
9000cd36:	f000 ba9c 	b.w	9000d272 <__retarget_lock_acquire_recursive>
9000cd3a:	bf00      	nop
9000cd3c:	20001534 	.word	0x20001534

9000cd40 <__malloc_unlock>:
9000cd40:	4801      	ldr	r0, [pc, #4]	@ (9000cd48 <__malloc_unlock+0x8>)
9000cd42:	f000 ba97 	b.w	9000d274 <__retarget_lock_release_recursive>
9000cd46:	bf00      	nop
9000cd48:	20001534 	.word	0x20001534

9000cd4c <std>:
9000cd4c:	2300      	movs	r3, #0
9000cd4e:	b510      	push	{r4, lr}
9000cd50:	4604      	mov	r4, r0
9000cd52:	e9c0 3300 	strd	r3, r3, [r0]
9000cd56:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000cd5a:	6083      	str	r3, [r0, #8]
9000cd5c:	8181      	strh	r1, [r0, #12]
9000cd5e:	6643      	str	r3, [r0, #100]	@ 0x64
9000cd60:	81c2      	strh	r2, [r0, #14]
9000cd62:	6183      	str	r3, [r0, #24]
9000cd64:	4619      	mov	r1, r3
9000cd66:	2208      	movs	r2, #8
9000cd68:	305c      	adds	r0, #92	@ 0x5c
9000cd6a:	f000 f9f9 	bl	9000d160 <memset>
9000cd6e:	4b0d      	ldr	r3, [pc, #52]	@ (9000cda4 <std+0x58>)
9000cd70:	6263      	str	r3, [r4, #36]	@ 0x24
9000cd72:	4b0d      	ldr	r3, [pc, #52]	@ (9000cda8 <std+0x5c>)
9000cd74:	62a3      	str	r3, [r4, #40]	@ 0x28
9000cd76:	4b0d      	ldr	r3, [pc, #52]	@ (9000cdac <std+0x60>)
9000cd78:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000cd7a:	4b0d      	ldr	r3, [pc, #52]	@ (9000cdb0 <std+0x64>)
9000cd7c:	6323      	str	r3, [r4, #48]	@ 0x30
9000cd7e:	4b0d      	ldr	r3, [pc, #52]	@ (9000cdb4 <std+0x68>)
9000cd80:	6224      	str	r4, [r4, #32]
9000cd82:	429c      	cmp	r4, r3
9000cd84:	d006      	beq.n	9000cd94 <std+0x48>
9000cd86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000cd8a:	4294      	cmp	r4, r2
9000cd8c:	d002      	beq.n	9000cd94 <std+0x48>
9000cd8e:	33d0      	adds	r3, #208	@ 0xd0
9000cd90:	429c      	cmp	r4, r3
9000cd92:	d105      	bne.n	9000cda0 <std+0x54>
9000cd94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000cd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000cd9c:	f000 ba68 	b.w	9000d270 <__retarget_lock_init_recursive>
9000cda0:	bd10      	pop	{r4, pc}
9000cda2:	bf00      	nop
9000cda4:	9000cfb1 	.word	0x9000cfb1
9000cda8:	9000cfd3 	.word	0x9000cfd3
9000cdac:	9000d00b 	.word	0x9000d00b
9000cdb0:	9000d02f 	.word	0x9000d02f
9000cdb4:	200013f4 	.word	0x200013f4

9000cdb8 <stdio_exit_handler>:
9000cdb8:	4a02      	ldr	r2, [pc, #8]	@ (9000cdc4 <stdio_exit_handler+0xc>)
9000cdba:	4903      	ldr	r1, [pc, #12]	@ (9000cdc8 <stdio_exit_handler+0x10>)
9000cdbc:	4803      	ldr	r0, [pc, #12]	@ (9000cdcc <stdio_exit_handler+0x14>)
9000cdbe:	f000 b869 	b.w	9000ce94 <_fwalk_sglue>
9000cdc2:	bf00      	nop
9000cdc4:	200000a0 	.word	0x200000a0
9000cdc8:	9000d9b1 	.word	0x9000d9b1
9000cdcc:	200000b0 	.word	0x200000b0

9000cdd0 <cleanup_stdio>:
9000cdd0:	6841      	ldr	r1, [r0, #4]
9000cdd2:	4b0c      	ldr	r3, [pc, #48]	@ (9000ce04 <cleanup_stdio+0x34>)
9000cdd4:	4299      	cmp	r1, r3
9000cdd6:	b510      	push	{r4, lr}
9000cdd8:	4604      	mov	r4, r0
9000cdda:	d001      	beq.n	9000cde0 <cleanup_stdio+0x10>
9000cddc:	f000 fde8 	bl	9000d9b0 <_fflush_r>
9000cde0:	68a1      	ldr	r1, [r4, #8]
9000cde2:	4b09      	ldr	r3, [pc, #36]	@ (9000ce08 <cleanup_stdio+0x38>)
9000cde4:	4299      	cmp	r1, r3
9000cde6:	d002      	beq.n	9000cdee <cleanup_stdio+0x1e>
9000cde8:	4620      	mov	r0, r4
9000cdea:	f000 fde1 	bl	9000d9b0 <_fflush_r>
9000cdee:	68e1      	ldr	r1, [r4, #12]
9000cdf0:	4b06      	ldr	r3, [pc, #24]	@ (9000ce0c <cleanup_stdio+0x3c>)
9000cdf2:	4299      	cmp	r1, r3
9000cdf4:	d004      	beq.n	9000ce00 <cleanup_stdio+0x30>
9000cdf6:	4620      	mov	r0, r4
9000cdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000cdfc:	f000 bdd8 	b.w	9000d9b0 <_fflush_r>
9000ce00:	bd10      	pop	{r4, pc}
9000ce02:	bf00      	nop
9000ce04:	200013f4 	.word	0x200013f4
9000ce08:	2000145c 	.word	0x2000145c
9000ce0c:	200014c4 	.word	0x200014c4

9000ce10 <global_stdio_init.part.0>:
9000ce10:	b510      	push	{r4, lr}
9000ce12:	4b0b      	ldr	r3, [pc, #44]	@ (9000ce40 <global_stdio_init.part.0+0x30>)
9000ce14:	4c0b      	ldr	r4, [pc, #44]	@ (9000ce44 <global_stdio_init.part.0+0x34>)
9000ce16:	4a0c      	ldr	r2, [pc, #48]	@ (9000ce48 <global_stdio_init.part.0+0x38>)
9000ce18:	601a      	str	r2, [r3, #0]
9000ce1a:	4620      	mov	r0, r4
9000ce1c:	2200      	movs	r2, #0
9000ce1e:	2104      	movs	r1, #4
9000ce20:	f7ff ff94 	bl	9000cd4c <std>
9000ce24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000ce28:	2201      	movs	r2, #1
9000ce2a:	2109      	movs	r1, #9
9000ce2c:	f7ff ff8e 	bl	9000cd4c <std>
9000ce30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000ce34:	2202      	movs	r2, #2
9000ce36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ce3a:	2112      	movs	r1, #18
9000ce3c:	f7ff bf86 	b.w	9000cd4c <std>
9000ce40:	2000152c 	.word	0x2000152c
9000ce44:	200013f4 	.word	0x200013f4
9000ce48:	9000cdb9 	.word	0x9000cdb9

9000ce4c <__sfp_lock_acquire>:
9000ce4c:	4801      	ldr	r0, [pc, #4]	@ (9000ce54 <__sfp_lock_acquire+0x8>)
9000ce4e:	f000 ba10 	b.w	9000d272 <__retarget_lock_acquire_recursive>
9000ce52:	bf00      	nop
9000ce54:	20001535 	.word	0x20001535

9000ce58 <__sfp_lock_release>:
9000ce58:	4801      	ldr	r0, [pc, #4]	@ (9000ce60 <__sfp_lock_release+0x8>)
9000ce5a:	f000 ba0b 	b.w	9000d274 <__retarget_lock_release_recursive>
9000ce5e:	bf00      	nop
9000ce60:	20001535 	.word	0x20001535

9000ce64 <__sinit>:
9000ce64:	b510      	push	{r4, lr}
9000ce66:	4604      	mov	r4, r0
9000ce68:	f7ff fff0 	bl	9000ce4c <__sfp_lock_acquire>
9000ce6c:	6a23      	ldr	r3, [r4, #32]
9000ce6e:	b11b      	cbz	r3, 9000ce78 <__sinit+0x14>
9000ce70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ce74:	f7ff bff0 	b.w	9000ce58 <__sfp_lock_release>
9000ce78:	4b04      	ldr	r3, [pc, #16]	@ (9000ce8c <__sinit+0x28>)
9000ce7a:	6223      	str	r3, [r4, #32]
9000ce7c:	4b04      	ldr	r3, [pc, #16]	@ (9000ce90 <__sinit+0x2c>)
9000ce7e:	681b      	ldr	r3, [r3, #0]
9000ce80:	2b00      	cmp	r3, #0
9000ce82:	d1f5      	bne.n	9000ce70 <__sinit+0xc>
9000ce84:	f7ff ffc4 	bl	9000ce10 <global_stdio_init.part.0>
9000ce88:	e7f2      	b.n	9000ce70 <__sinit+0xc>
9000ce8a:	bf00      	nop
9000ce8c:	9000cdd1 	.word	0x9000cdd1
9000ce90:	2000152c 	.word	0x2000152c

9000ce94 <_fwalk_sglue>:
9000ce94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000ce98:	4607      	mov	r7, r0
9000ce9a:	4688      	mov	r8, r1
9000ce9c:	4614      	mov	r4, r2
9000ce9e:	2600      	movs	r6, #0
9000cea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000cea4:	f1b9 0901 	subs.w	r9, r9, #1
9000cea8:	d505      	bpl.n	9000ceb6 <_fwalk_sglue+0x22>
9000ceaa:	6824      	ldr	r4, [r4, #0]
9000ceac:	2c00      	cmp	r4, #0
9000ceae:	d1f7      	bne.n	9000cea0 <_fwalk_sglue+0xc>
9000ceb0:	4630      	mov	r0, r6
9000ceb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000ceb6:	89ab      	ldrh	r3, [r5, #12]
9000ceb8:	2b01      	cmp	r3, #1
9000ceba:	d907      	bls.n	9000cecc <_fwalk_sglue+0x38>
9000cebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000cec0:	3301      	adds	r3, #1
9000cec2:	d003      	beq.n	9000cecc <_fwalk_sglue+0x38>
9000cec4:	4629      	mov	r1, r5
9000cec6:	4638      	mov	r0, r7
9000cec8:	47c0      	blx	r8
9000ceca:	4306      	orrs	r6, r0
9000cecc:	3568      	adds	r5, #104	@ 0x68
9000cece:	e7e9      	b.n	9000cea4 <_fwalk_sglue+0x10>

9000ced0 <iprintf>:
9000ced0:	b40f      	push	{r0, r1, r2, r3}
9000ced2:	b507      	push	{r0, r1, r2, lr}
9000ced4:	4906      	ldr	r1, [pc, #24]	@ (9000cef0 <iprintf+0x20>)
9000ced6:	ab04      	add	r3, sp, #16
9000ced8:	6808      	ldr	r0, [r1, #0]
9000ceda:	f853 2b04 	ldr.w	r2, [r3], #4
9000cede:	6881      	ldr	r1, [r0, #8]
9000cee0:	9301      	str	r3, [sp, #4]
9000cee2:	f000 fa3d 	bl	9000d360 <_vfiprintf_r>
9000cee6:	b003      	add	sp, #12
9000cee8:	f85d eb04 	ldr.w	lr, [sp], #4
9000ceec:	b004      	add	sp, #16
9000ceee:	4770      	bx	lr
9000cef0:	200000ac 	.word	0x200000ac

9000cef4 <_puts_r>:
9000cef4:	6a03      	ldr	r3, [r0, #32]
9000cef6:	b570      	push	{r4, r5, r6, lr}
9000cef8:	6884      	ldr	r4, [r0, #8]
9000cefa:	4605      	mov	r5, r0
9000cefc:	460e      	mov	r6, r1
9000cefe:	b90b      	cbnz	r3, 9000cf04 <_puts_r+0x10>
9000cf00:	f7ff ffb0 	bl	9000ce64 <__sinit>
9000cf04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000cf06:	07db      	lsls	r3, r3, #31
9000cf08:	d405      	bmi.n	9000cf16 <_puts_r+0x22>
9000cf0a:	89a3      	ldrh	r3, [r4, #12]
9000cf0c:	0598      	lsls	r0, r3, #22
9000cf0e:	d402      	bmi.n	9000cf16 <_puts_r+0x22>
9000cf10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cf12:	f000 f9ae 	bl	9000d272 <__retarget_lock_acquire_recursive>
9000cf16:	89a3      	ldrh	r3, [r4, #12]
9000cf18:	0719      	lsls	r1, r3, #28
9000cf1a:	d502      	bpl.n	9000cf22 <_puts_r+0x2e>
9000cf1c:	6923      	ldr	r3, [r4, #16]
9000cf1e:	2b00      	cmp	r3, #0
9000cf20:	d135      	bne.n	9000cf8e <_puts_r+0x9a>
9000cf22:	4621      	mov	r1, r4
9000cf24:	4628      	mov	r0, r5
9000cf26:	f000 f8c5 	bl	9000d0b4 <__swsetup_r>
9000cf2a:	b380      	cbz	r0, 9000cf8e <_puts_r+0x9a>
9000cf2c:	f04f 35ff 	mov.w	r5, #4294967295
9000cf30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000cf32:	07da      	lsls	r2, r3, #31
9000cf34:	d405      	bmi.n	9000cf42 <_puts_r+0x4e>
9000cf36:	89a3      	ldrh	r3, [r4, #12]
9000cf38:	059b      	lsls	r3, r3, #22
9000cf3a:	d402      	bmi.n	9000cf42 <_puts_r+0x4e>
9000cf3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cf3e:	f000 f999 	bl	9000d274 <__retarget_lock_release_recursive>
9000cf42:	4628      	mov	r0, r5
9000cf44:	bd70      	pop	{r4, r5, r6, pc}
9000cf46:	2b00      	cmp	r3, #0
9000cf48:	da04      	bge.n	9000cf54 <_puts_r+0x60>
9000cf4a:	69a2      	ldr	r2, [r4, #24]
9000cf4c:	429a      	cmp	r2, r3
9000cf4e:	dc17      	bgt.n	9000cf80 <_puts_r+0x8c>
9000cf50:	290a      	cmp	r1, #10
9000cf52:	d015      	beq.n	9000cf80 <_puts_r+0x8c>
9000cf54:	6823      	ldr	r3, [r4, #0]
9000cf56:	1c5a      	adds	r2, r3, #1
9000cf58:	6022      	str	r2, [r4, #0]
9000cf5a:	7019      	strb	r1, [r3, #0]
9000cf5c:	68a3      	ldr	r3, [r4, #8]
9000cf5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000cf62:	3b01      	subs	r3, #1
9000cf64:	60a3      	str	r3, [r4, #8]
9000cf66:	2900      	cmp	r1, #0
9000cf68:	d1ed      	bne.n	9000cf46 <_puts_r+0x52>
9000cf6a:	2b00      	cmp	r3, #0
9000cf6c:	da11      	bge.n	9000cf92 <_puts_r+0x9e>
9000cf6e:	4622      	mov	r2, r4
9000cf70:	210a      	movs	r1, #10
9000cf72:	4628      	mov	r0, r5
9000cf74:	f000 f85f 	bl	9000d036 <__swbuf_r>
9000cf78:	3001      	adds	r0, #1
9000cf7a:	d0d7      	beq.n	9000cf2c <_puts_r+0x38>
9000cf7c:	250a      	movs	r5, #10
9000cf7e:	e7d7      	b.n	9000cf30 <_puts_r+0x3c>
9000cf80:	4622      	mov	r2, r4
9000cf82:	4628      	mov	r0, r5
9000cf84:	f000 f857 	bl	9000d036 <__swbuf_r>
9000cf88:	3001      	adds	r0, #1
9000cf8a:	d1e7      	bne.n	9000cf5c <_puts_r+0x68>
9000cf8c:	e7ce      	b.n	9000cf2c <_puts_r+0x38>
9000cf8e:	3e01      	subs	r6, #1
9000cf90:	e7e4      	b.n	9000cf5c <_puts_r+0x68>
9000cf92:	6823      	ldr	r3, [r4, #0]
9000cf94:	1c5a      	adds	r2, r3, #1
9000cf96:	6022      	str	r2, [r4, #0]
9000cf98:	220a      	movs	r2, #10
9000cf9a:	701a      	strb	r2, [r3, #0]
9000cf9c:	e7ee      	b.n	9000cf7c <_puts_r+0x88>
	...

9000cfa0 <puts>:
9000cfa0:	4b02      	ldr	r3, [pc, #8]	@ (9000cfac <puts+0xc>)
9000cfa2:	4601      	mov	r1, r0
9000cfa4:	6818      	ldr	r0, [r3, #0]
9000cfa6:	f7ff bfa5 	b.w	9000cef4 <_puts_r>
9000cfaa:	bf00      	nop
9000cfac:	200000ac 	.word	0x200000ac

9000cfb0 <__sread>:
9000cfb0:	b510      	push	{r4, lr}
9000cfb2:	460c      	mov	r4, r1
9000cfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cfb8:	f000 f8fc 	bl	9000d1b4 <_read_r>
9000cfbc:	2800      	cmp	r0, #0
9000cfbe:	bfab      	itete	ge
9000cfc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000cfc2:	89a3      	ldrhlt	r3, [r4, #12]
9000cfc4:	181b      	addge	r3, r3, r0
9000cfc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000cfca:	bfac      	ite	ge
9000cfcc:	6563      	strge	r3, [r4, #84]	@ 0x54
9000cfce:	81a3      	strhlt	r3, [r4, #12]
9000cfd0:	bd10      	pop	{r4, pc}

9000cfd2 <__swrite>:
9000cfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cfd6:	461f      	mov	r7, r3
9000cfd8:	898b      	ldrh	r3, [r1, #12]
9000cfda:	05db      	lsls	r3, r3, #23
9000cfdc:	4605      	mov	r5, r0
9000cfde:	460c      	mov	r4, r1
9000cfe0:	4616      	mov	r6, r2
9000cfe2:	d505      	bpl.n	9000cff0 <__swrite+0x1e>
9000cfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cfe8:	2302      	movs	r3, #2
9000cfea:	2200      	movs	r2, #0
9000cfec:	f000 f8d0 	bl	9000d190 <_lseek_r>
9000cff0:	89a3      	ldrh	r3, [r4, #12]
9000cff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000cff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000cffa:	81a3      	strh	r3, [r4, #12]
9000cffc:	4632      	mov	r2, r6
9000cffe:	463b      	mov	r3, r7
9000d000:	4628      	mov	r0, r5
9000d002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d006:	f000 b8f7 	b.w	9000d1f8 <_write_r>

9000d00a <__sseek>:
9000d00a:	b510      	push	{r4, lr}
9000d00c:	460c      	mov	r4, r1
9000d00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d012:	f000 f8bd 	bl	9000d190 <_lseek_r>
9000d016:	1c43      	adds	r3, r0, #1
9000d018:	89a3      	ldrh	r3, [r4, #12]
9000d01a:	bf15      	itete	ne
9000d01c:	6560      	strne	r0, [r4, #84]	@ 0x54
9000d01e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000d022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000d026:	81a3      	strheq	r3, [r4, #12]
9000d028:	bf18      	it	ne
9000d02a:	81a3      	strhne	r3, [r4, #12]
9000d02c:	bd10      	pop	{r4, pc}

9000d02e <__sclose>:
9000d02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d032:	f000 b89d 	b.w	9000d170 <_close_r>

9000d036 <__swbuf_r>:
9000d036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d038:	460e      	mov	r6, r1
9000d03a:	4614      	mov	r4, r2
9000d03c:	4605      	mov	r5, r0
9000d03e:	b118      	cbz	r0, 9000d048 <__swbuf_r+0x12>
9000d040:	6a03      	ldr	r3, [r0, #32]
9000d042:	b90b      	cbnz	r3, 9000d048 <__swbuf_r+0x12>
9000d044:	f7ff ff0e 	bl	9000ce64 <__sinit>
9000d048:	69a3      	ldr	r3, [r4, #24]
9000d04a:	60a3      	str	r3, [r4, #8]
9000d04c:	89a3      	ldrh	r3, [r4, #12]
9000d04e:	071a      	lsls	r2, r3, #28
9000d050:	d501      	bpl.n	9000d056 <__swbuf_r+0x20>
9000d052:	6923      	ldr	r3, [r4, #16]
9000d054:	b943      	cbnz	r3, 9000d068 <__swbuf_r+0x32>
9000d056:	4621      	mov	r1, r4
9000d058:	4628      	mov	r0, r5
9000d05a:	f000 f82b 	bl	9000d0b4 <__swsetup_r>
9000d05e:	b118      	cbz	r0, 9000d068 <__swbuf_r+0x32>
9000d060:	f04f 37ff 	mov.w	r7, #4294967295
9000d064:	4638      	mov	r0, r7
9000d066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000d068:	6823      	ldr	r3, [r4, #0]
9000d06a:	6922      	ldr	r2, [r4, #16]
9000d06c:	1a98      	subs	r0, r3, r2
9000d06e:	6963      	ldr	r3, [r4, #20]
9000d070:	b2f6      	uxtb	r6, r6
9000d072:	4283      	cmp	r3, r0
9000d074:	4637      	mov	r7, r6
9000d076:	dc05      	bgt.n	9000d084 <__swbuf_r+0x4e>
9000d078:	4621      	mov	r1, r4
9000d07a:	4628      	mov	r0, r5
9000d07c:	f000 fc98 	bl	9000d9b0 <_fflush_r>
9000d080:	2800      	cmp	r0, #0
9000d082:	d1ed      	bne.n	9000d060 <__swbuf_r+0x2a>
9000d084:	68a3      	ldr	r3, [r4, #8]
9000d086:	3b01      	subs	r3, #1
9000d088:	60a3      	str	r3, [r4, #8]
9000d08a:	6823      	ldr	r3, [r4, #0]
9000d08c:	1c5a      	adds	r2, r3, #1
9000d08e:	6022      	str	r2, [r4, #0]
9000d090:	701e      	strb	r6, [r3, #0]
9000d092:	6962      	ldr	r2, [r4, #20]
9000d094:	1c43      	adds	r3, r0, #1
9000d096:	429a      	cmp	r2, r3
9000d098:	d004      	beq.n	9000d0a4 <__swbuf_r+0x6e>
9000d09a:	89a3      	ldrh	r3, [r4, #12]
9000d09c:	07db      	lsls	r3, r3, #31
9000d09e:	d5e1      	bpl.n	9000d064 <__swbuf_r+0x2e>
9000d0a0:	2e0a      	cmp	r6, #10
9000d0a2:	d1df      	bne.n	9000d064 <__swbuf_r+0x2e>
9000d0a4:	4621      	mov	r1, r4
9000d0a6:	4628      	mov	r0, r5
9000d0a8:	f000 fc82 	bl	9000d9b0 <_fflush_r>
9000d0ac:	2800      	cmp	r0, #0
9000d0ae:	d0d9      	beq.n	9000d064 <__swbuf_r+0x2e>
9000d0b0:	e7d6      	b.n	9000d060 <__swbuf_r+0x2a>
	...

9000d0b4 <__swsetup_r>:
9000d0b4:	b538      	push	{r3, r4, r5, lr}
9000d0b6:	4b29      	ldr	r3, [pc, #164]	@ (9000d15c <__swsetup_r+0xa8>)
9000d0b8:	4605      	mov	r5, r0
9000d0ba:	6818      	ldr	r0, [r3, #0]
9000d0bc:	460c      	mov	r4, r1
9000d0be:	b118      	cbz	r0, 9000d0c8 <__swsetup_r+0x14>
9000d0c0:	6a03      	ldr	r3, [r0, #32]
9000d0c2:	b90b      	cbnz	r3, 9000d0c8 <__swsetup_r+0x14>
9000d0c4:	f7ff fece 	bl	9000ce64 <__sinit>
9000d0c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d0cc:	0719      	lsls	r1, r3, #28
9000d0ce:	d422      	bmi.n	9000d116 <__swsetup_r+0x62>
9000d0d0:	06da      	lsls	r2, r3, #27
9000d0d2:	d407      	bmi.n	9000d0e4 <__swsetup_r+0x30>
9000d0d4:	2209      	movs	r2, #9
9000d0d6:	602a      	str	r2, [r5, #0]
9000d0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d0dc:	81a3      	strh	r3, [r4, #12]
9000d0de:	f04f 30ff 	mov.w	r0, #4294967295
9000d0e2:	e033      	b.n	9000d14c <__swsetup_r+0x98>
9000d0e4:	0758      	lsls	r0, r3, #29
9000d0e6:	d512      	bpl.n	9000d10e <__swsetup_r+0x5a>
9000d0e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d0ea:	b141      	cbz	r1, 9000d0fe <__swsetup_r+0x4a>
9000d0ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d0f0:	4299      	cmp	r1, r3
9000d0f2:	d002      	beq.n	9000d0fa <__swsetup_r+0x46>
9000d0f4:	4628      	mov	r0, r5
9000d0f6:	f000 f8bf 	bl	9000d278 <_free_r>
9000d0fa:	2300      	movs	r3, #0
9000d0fc:	6363      	str	r3, [r4, #52]	@ 0x34
9000d0fe:	89a3      	ldrh	r3, [r4, #12]
9000d100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000d104:	81a3      	strh	r3, [r4, #12]
9000d106:	2300      	movs	r3, #0
9000d108:	6063      	str	r3, [r4, #4]
9000d10a:	6923      	ldr	r3, [r4, #16]
9000d10c:	6023      	str	r3, [r4, #0]
9000d10e:	89a3      	ldrh	r3, [r4, #12]
9000d110:	f043 0308 	orr.w	r3, r3, #8
9000d114:	81a3      	strh	r3, [r4, #12]
9000d116:	6923      	ldr	r3, [r4, #16]
9000d118:	b94b      	cbnz	r3, 9000d12e <__swsetup_r+0x7a>
9000d11a:	89a3      	ldrh	r3, [r4, #12]
9000d11c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000d120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000d124:	d003      	beq.n	9000d12e <__swsetup_r+0x7a>
9000d126:	4621      	mov	r1, r4
9000d128:	4628      	mov	r0, r5
9000d12a:	f000 fc8f 	bl	9000da4c <__smakebuf_r>
9000d12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d132:	f013 0201 	ands.w	r2, r3, #1
9000d136:	d00a      	beq.n	9000d14e <__swsetup_r+0x9a>
9000d138:	2200      	movs	r2, #0
9000d13a:	60a2      	str	r2, [r4, #8]
9000d13c:	6962      	ldr	r2, [r4, #20]
9000d13e:	4252      	negs	r2, r2
9000d140:	61a2      	str	r2, [r4, #24]
9000d142:	6922      	ldr	r2, [r4, #16]
9000d144:	b942      	cbnz	r2, 9000d158 <__swsetup_r+0xa4>
9000d146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000d14a:	d1c5      	bne.n	9000d0d8 <__swsetup_r+0x24>
9000d14c:	bd38      	pop	{r3, r4, r5, pc}
9000d14e:	0799      	lsls	r1, r3, #30
9000d150:	bf58      	it	pl
9000d152:	6962      	ldrpl	r2, [r4, #20]
9000d154:	60a2      	str	r2, [r4, #8]
9000d156:	e7f4      	b.n	9000d142 <__swsetup_r+0x8e>
9000d158:	2000      	movs	r0, #0
9000d15a:	e7f7      	b.n	9000d14c <__swsetup_r+0x98>
9000d15c:	200000ac 	.word	0x200000ac

9000d160 <memset>:
9000d160:	4402      	add	r2, r0
9000d162:	4603      	mov	r3, r0
9000d164:	4293      	cmp	r3, r2
9000d166:	d100      	bne.n	9000d16a <memset+0xa>
9000d168:	4770      	bx	lr
9000d16a:	f803 1b01 	strb.w	r1, [r3], #1
9000d16e:	e7f9      	b.n	9000d164 <memset+0x4>

9000d170 <_close_r>:
9000d170:	b538      	push	{r3, r4, r5, lr}
9000d172:	4d06      	ldr	r5, [pc, #24]	@ (9000d18c <_close_r+0x1c>)
9000d174:	2300      	movs	r3, #0
9000d176:	4604      	mov	r4, r0
9000d178:	4608      	mov	r0, r1
9000d17a:	602b      	str	r3, [r5, #0]
9000d17c:	f7f3 ffdf 	bl	9000113e <_close>
9000d180:	1c43      	adds	r3, r0, #1
9000d182:	d102      	bne.n	9000d18a <_close_r+0x1a>
9000d184:	682b      	ldr	r3, [r5, #0]
9000d186:	b103      	cbz	r3, 9000d18a <_close_r+0x1a>
9000d188:	6023      	str	r3, [r4, #0]
9000d18a:	bd38      	pop	{r3, r4, r5, pc}
9000d18c:	20001530 	.word	0x20001530

9000d190 <_lseek_r>:
9000d190:	b538      	push	{r3, r4, r5, lr}
9000d192:	4d07      	ldr	r5, [pc, #28]	@ (9000d1b0 <_lseek_r+0x20>)
9000d194:	4604      	mov	r4, r0
9000d196:	4608      	mov	r0, r1
9000d198:	4611      	mov	r1, r2
9000d19a:	2200      	movs	r2, #0
9000d19c:	602a      	str	r2, [r5, #0]
9000d19e:	461a      	mov	r2, r3
9000d1a0:	f7f3 fff4 	bl	9000118c <_lseek>
9000d1a4:	1c43      	adds	r3, r0, #1
9000d1a6:	d102      	bne.n	9000d1ae <_lseek_r+0x1e>
9000d1a8:	682b      	ldr	r3, [r5, #0]
9000d1aa:	b103      	cbz	r3, 9000d1ae <_lseek_r+0x1e>
9000d1ac:	6023      	str	r3, [r4, #0]
9000d1ae:	bd38      	pop	{r3, r4, r5, pc}
9000d1b0:	20001530 	.word	0x20001530

9000d1b4 <_read_r>:
9000d1b4:	b538      	push	{r3, r4, r5, lr}
9000d1b6:	4d07      	ldr	r5, [pc, #28]	@ (9000d1d4 <_read_r+0x20>)
9000d1b8:	4604      	mov	r4, r0
9000d1ba:	4608      	mov	r0, r1
9000d1bc:	4611      	mov	r1, r2
9000d1be:	2200      	movs	r2, #0
9000d1c0:	602a      	str	r2, [r5, #0]
9000d1c2:	461a      	mov	r2, r3
9000d1c4:	f7f3 ff82 	bl	900010cc <_read>
9000d1c8:	1c43      	adds	r3, r0, #1
9000d1ca:	d102      	bne.n	9000d1d2 <_read_r+0x1e>
9000d1cc:	682b      	ldr	r3, [r5, #0]
9000d1ce:	b103      	cbz	r3, 9000d1d2 <_read_r+0x1e>
9000d1d0:	6023      	str	r3, [r4, #0]
9000d1d2:	bd38      	pop	{r3, r4, r5, pc}
9000d1d4:	20001530 	.word	0x20001530

9000d1d8 <_sbrk_r>:
9000d1d8:	b538      	push	{r3, r4, r5, lr}
9000d1da:	4d06      	ldr	r5, [pc, #24]	@ (9000d1f4 <_sbrk_r+0x1c>)
9000d1dc:	2300      	movs	r3, #0
9000d1de:	4604      	mov	r4, r0
9000d1e0:	4608      	mov	r0, r1
9000d1e2:	602b      	str	r3, [r5, #0]
9000d1e4:	f7f3 ffe0 	bl	900011a8 <_sbrk>
9000d1e8:	1c43      	adds	r3, r0, #1
9000d1ea:	d102      	bne.n	9000d1f2 <_sbrk_r+0x1a>
9000d1ec:	682b      	ldr	r3, [r5, #0]
9000d1ee:	b103      	cbz	r3, 9000d1f2 <_sbrk_r+0x1a>
9000d1f0:	6023      	str	r3, [r4, #0]
9000d1f2:	bd38      	pop	{r3, r4, r5, pc}
9000d1f4:	20001530 	.word	0x20001530

9000d1f8 <_write_r>:
9000d1f8:	b538      	push	{r3, r4, r5, lr}
9000d1fa:	4d07      	ldr	r5, [pc, #28]	@ (9000d218 <_write_r+0x20>)
9000d1fc:	4604      	mov	r4, r0
9000d1fe:	4608      	mov	r0, r1
9000d200:	4611      	mov	r1, r2
9000d202:	2200      	movs	r2, #0
9000d204:	602a      	str	r2, [r5, #0]
9000d206:	461a      	mov	r2, r3
9000d208:	f7f3 ff7d 	bl	90001106 <_write>
9000d20c:	1c43      	adds	r3, r0, #1
9000d20e:	d102      	bne.n	9000d216 <_write_r+0x1e>
9000d210:	682b      	ldr	r3, [r5, #0]
9000d212:	b103      	cbz	r3, 9000d216 <_write_r+0x1e>
9000d214:	6023      	str	r3, [r4, #0]
9000d216:	bd38      	pop	{r3, r4, r5, pc}
9000d218:	20001530 	.word	0x20001530

9000d21c <__errno>:
9000d21c:	4b01      	ldr	r3, [pc, #4]	@ (9000d224 <__errno+0x8>)
9000d21e:	6818      	ldr	r0, [r3, #0]
9000d220:	4770      	bx	lr
9000d222:	bf00      	nop
9000d224:	200000ac 	.word	0x200000ac

9000d228 <__libc_init_array>:
9000d228:	b570      	push	{r4, r5, r6, lr}
9000d22a:	4d0d      	ldr	r5, [pc, #52]	@ (9000d260 <__libc_init_array+0x38>)
9000d22c:	4c0d      	ldr	r4, [pc, #52]	@ (9000d264 <__libc_init_array+0x3c>)
9000d22e:	1b64      	subs	r4, r4, r5
9000d230:	10a4      	asrs	r4, r4, #2
9000d232:	2600      	movs	r6, #0
9000d234:	42a6      	cmp	r6, r4
9000d236:	d109      	bne.n	9000d24c <__libc_init_array+0x24>
9000d238:	4d0b      	ldr	r5, [pc, #44]	@ (9000d268 <__libc_init_array+0x40>)
9000d23a:	4c0c      	ldr	r4, [pc, #48]	@ (9000d26c <__libc_init_array+0x44>)
9000d23c:	f000 fc64 	bl	9000db08 <_init>
9000d240:	1b64      	subs	r4, r4, r5
9000d242:	10a4      	asrs	r4, r4, #2
9000d244:	2600      	movs	r6, #0
9000d246:	42a6      	cmp	r6, r4
9000d248:	d105      	bne.n	9000d256 <__libc_init_array+0x2e>
9000d24a:	bd70      	pop	{r4, r5, r6, pc}
9000d24c:	f855 3b04 	ldr.w	r3, [r5], #4
9000d250:	4798      	blx	r3
9000d252:	3601      	adds	r6, #1
9000d254:	e7ee      	b.n	9000d234 <__libc_init_array+0xc>
9000d256:	f855 3b04 	ldr.w	r3, [r5], #4
9000d25a:	4798      	blx	r3
9000d25c:	3601      	adds	r6, #1
9000d25e:	e7f2      	b.n	9000d246 <__libc_init_array+0x1e>
9000d260:	90010060 	.word	0x90010060
9000d264:	90010060 	.word	0x90010060
9000d268:	90010060 	.word	0x90010060
9000d26c:	90010064 	.word	0x90010064

9000d270 <__retarget_lock_init_recursive>:
9000d270:	4770      	bx	lr

9000d272 <__retarget_lock_acquire_recursive>:
9000d272:	4770      	bx	lr

9000d274 <__retarget_lock_release_recursive>:
9000d274:	4770      	bx	lr
	...

9000d278 <_free_r>:
9000d278:	b538      	push	{r3, r4, r5, lr}
9000d27a:	4605      	mov	r5, r0
9000d27c:	2900      	cmp	r1, #0
9000d27e:	d041      	beq.n	9000d304 <_free_r+0x8c>
9000d280:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d284:	1f0c      	subs	r4, r1, #4
9000d286:	2b00      	cmp	r3, #0
9000d288:	bfb8      	it	lt
9000d28a:	18e4      	addlt	r4, r4, r3
9000d28c:	f7ff fd52 	bl	9000cd34 <__malloc_lock>
9000d290:	4a1d      	ldr	r2, [pc, #116]	@ (9000d308 <_free_r+0x90>)
9000d292:	6813      	ldr	r3, [r2, #0]
9000d294:	b933      	cbnz	r3, 9000d2a4 <_free_r+0x2c>
9000d296:	6063      	str	r3, [r4, #4]
9000d298:	6014      	str	r4, [r2, #0]
9000d29a:	4628      	mov	r0, r5
9000d29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000d2a0:	f7ff bd4e 	b.w	9000cd40 <__malloc_unlock>
9000d2a4:	42a3      	cmp	r3, r4
9000d2a6:	d908      	bls.n	9000d2ba <_free_r+0x42>
9000d2a8:	6820      	ldr	r0, [r4, #0]
9000d2aa:	1821      	adds	r1, r4, r0
9000d2ac:	428b      	cmp	r3, r1
9000d2ae:	bf01      	itttt	eq
9000d2b0:	6819      	ldreq	r1, [r3, #0]
9000d2b2:	685b      	ldreq	r3, [r3, #4]
9000d2b4:	1809      	addeq	r1, r1, r0
9000d2b6:	6021      	streq	r1, [r4, #0]
9000d2b8:	e7ed      	b.n	9000d296 <_free_r+0x1e>
9000d2ba:	461a      	mov	r2, r3
9000d2bc:	685b      	ldr	r3, [r3, #4]
9000d2be:	b10b      	cbz	r3, 9000d2c4 <_free_r+0x4c>
9000d2c0:	42a3      	cmp	r3, r4
9000d2c2:	d9fa      	bls.n	9000d2ba <_free_r+0x42>
9000d2c4:	6811      	ldr	r1, [r2, #0]
9000d2c6:	1850      	adds	r0, r2, r1
9000d2c8:	42a0      	cmp	r0, r4
9000d2ca:	d10b      	bne.n	9000d2e4 <_free_r+0x6c>
9000d2cc:	6820      	ldr	r0, [r4, #0]
9000d2ce:	4401      	add	r1, r0
9000d2d0:	1850      	adds	r0, r2, r1
9000d2d2:	4283      	cmp	r3, r0
9000d2d4:	6011      	str	r1, [r2, #0]
9000d2d6:	d1e0      	bne.n	9000d29a <_free_r+0x22>
9000d2d8:	6818      	ldr	r0, [r3, #0]
9000d2da:	685b      	ldr	r3, [r3, #4]
9000d2dc:	6053      	str	r3, [r2, #4]
9000d2de:	4408      	add	r0, r1
9000d2e0:	6010      	str	r0, [r2, #0]
9000d2e2:	e7da      	b.n	9000d29a <_free_r+0x22>
9000d2e4:	d902      	bls.n	9000d2ec <_free_r+0x74>
9000d2e6:	230c      	movs	r3, #12
9000d2e8:	602b      	str	r3, [r5, #0]
9000d2ea:	e7d6      	b.n	9000d29a <_free_r+0x22>
9000d2ec:	6820      	ldr	r0, [r4, #0]
9000d2ee:	1821      	adds	r1, r4, r0
9000d2f0:	428b      	cmp	r3, r1
9000d2f2:	bf04      	itt	eq
9000d2f4:	6819      	ldreq	r1, [r3, #0]
9000d2f6:	685b      	ldreq	r3, [r3, #4]
9000d2f8:	6063      	str	r3, [r4, #4]
9000d2fa:	bf04      	itt	eq
9000d2fc:	1809      	addeq	r1, r1, r0
9000d2fe:	6021      	streq	r1, [r4, #0]
9000d300:	6054      	str	r4, [r2, #4]
9000d302:	e7ca      	b.n	9000d29a <_free_r+0x22>
9000d304:	bd38      	pop	{r3, r4, r5, pc}
9000d306:	bf00      	nop
9000d308:	200013f0 	.word	0x200013f0

9000d30c <__sfputc_r>:
9000d30c:	6893      	ldr	r3, [r2, #8]
9000d30e:	3b01      	subs	r3, #1
9000d310:	2b00      	cmp	r3, #0
9000d312:	b410      	push	{r4}
9000d314:	6093      	str	r3, [r2, #8]
9000d316:	da08      	bge.n	9000d32a <__sfputc_r+0x1e>
9000d318:	6994      	ldr	r4, [r2, #24]
9000d31a:	42a3      	cmp	r3, r4
9000d31c:	db01      	blt.n	9000d322 <__sfputc_r+0x16>
9000d31e:	290a      	cmp	r1, #10
9000d320:	d103      	bne.n	9000d32a <__sfputc_r+0x1e>
9000d322:	f85d 4b04 	ldr.w	r4, [sp], #4
9000d326:	f7ff be86 	b.w	9000d036 <__swbuf_r>
9000d32a:	6813      	ldr	r3, [r2, #0]
9000d32c:	1c58      	adds	r0, r3, #1
9000d32e:	6010      	str	r0, [r2, #0]
9000d330:	7019      	strb	r1, [r3, #0]
9000d332:	4608      	mov	r0, r1
9000d334:	f85d 4b04 	ldr.w	r4, [sp], #4
9000d338:	4770      	bx	lr

9000d33a <__sfputs_r>:
9000d33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d33c:	4606      	mov	r6, r0
9000d33e:	460f      	mov	r7, r1
9000d340:	4614      	mov	r4, r2
9000d342:	18d5      	adds	r5, r2, r3
9000d344:	42ac      	cmp	r4, r5
9000d346:	d101      	bne.n	9000d34c <__sfputs_r+0x12>
9000d348:	2000      	movs	r0, #0
9000d34a:	e007      	b.n	9000d35c <__sfputs_r+0x22>
9000d34c:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d350:	463a      	mov	r2, r7
9000d352:	4630      	mov	r0, r6
9000d354:	f7ff ffda 	bl	9000d30c <__sfputc_r>
9000d358:	1c43      	adds	r3, r0, #1
9000d35a:	d1f3      	bne.n	9000d344 <__sfputs_r+0xa>
9000d35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000d360 <_vfiprintf_r>:
9000d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d364:	460d      	mov	r5, r1
9000d366:	b09d      	sub	sp, #116	@ 0x74
9000d368:	4614      	mov	r4, r2
9000d36a:	4698      	mov	r8, r3
9000d36c:	4606      	mov	r6, r0
9000d36e:	b118      	cbz	r0, 9000d378 <_vfiprintf_r+0x18>
9000d370:	6a03      	ldr	r3, [r0, #32]
9000d372:	b90b      	cbnz	r3, 9000d378 <_vfiprintf_r+0x18>
9000d374:	f7ff fd76 	bl	9000ce64 <__sinit>
9000d378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000d37a:	07d9      	lsls	r1, r3, #31
9000d37c:	d405      	bmi.n	9000d38a <_vfiprintf_r+0x2a>
9000d37e:	89ab      	ldrh	r3, [r5, #12]
9000d380:	059a      	lsls	r2, r3, #22
9000d382:	d402      	bmi.n	9000d38a <_vfiprintf_r+0x2a>
9000d384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000d386:	f7ff ff74 	bl	9000d272 <__retarget_lock_acquire_recursive>
9000d38a:	89ab      	ldrh	r3, [r5, #12]
9000d38c:	071b      	lsls	r3, r3, #28
9000d38e:	d501      	bpl.n	9000d394 <_vfiprintf_r+0x34>
9000d390:	692b      	ldr	r3, [r5, #16]
9000d392:	b99b      	cbnz	r3, 9000d3bc <_vfiprintf_r+0x5c>
9000d394:	4629      	mov	r1, r5
9000d396:	4630      	mov	r0, r6
9000d398:	f7ff fe8c 	bl	9000d0b4 <__swsetup_r>
9000d39c:	b170      	cbz	r0, 9000d3bc <_vfiprintf_r+0x5c>
9000d39e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000d3a0:	07dc      	lsls	r4, r3, #31
9000d3a2:	d504      	bpl.n	9000d3ae <_vfiprintf_r+0x4e>
9000d3a4:	f04f 30ff 	mov.w	r0, #4294967295
9000d3a8:	b01d      	add	sp, #116	@ 0x74
9000d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000d3ae:	89ab      	ldrh	r3, [r5, #12]
9000d3b0:	0598      	lsls	r0, r3, #22
9000d3b2:	d4f7      	bmi.n	9000d3a4 <_vfiprintf_r+0x44>
9000d3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000d3b6:	f7ff ff5d 	bl	9000d274 <__retarget_lock_release_recursive>
9000d3ba:	e7f3      	b.n	9000d3a4 <_vfiprintf_r+0x44>
9000d3bc:	2300      	movs	r3, #0
9000d3be:	9309      	str	r3, [sp, #36]	@ 0x24
9000d3c0:	2320      	movs	r3, #32
9000d3c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000d3c6:	f8cd 800c 	str.w	r8, [sp, #12]
9000d3ca:	2330      	movs	r3, #48	@ 0x30
9000d3cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000d57c <_vfiprintf_r+0x21c>
9000d3d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000d3d4:	f04f 0901 	mov.w	r9, #1
9000d3d8:	4623      	mov	r3, r4
9000d3da:	469a      	mov	sl, r3
9000d3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
9000d3e0:	b10a      	cbz	r2, 9000d3e6 <_vfiprintf_r+0x86>
9000d3e2:	2a25      	cmp	r2, #37	@ 0x25
9000d3e4:	d1f9      	bne.n	9000d3da <_vfiprintf_r+0x7a>
9000d3e6:	ebba 0b04 	subs.w	fp, sl, r4
9000d3ea:	d00b      	beq.n	9000d404 <_vfiprintf_r+0xa4>
9000d3ec:	465b      	mov	r3, fp
9000d3ee:	4622      	mov	r2, r4
9000d3f0:	4629      	mov	r1, r5
9000d3f2:	4630      	mov	r0, r6
9000d3f4:	f7ff ffa1 	bl	9000d33a <__sfputs_r>
9000d3f8:	3001      	adds	r0, #1
9000d3fa:	f000 80a7 	beq.w	9000d54c <_vfiprintf_r+0x1ec>
9000d3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000d400:	445a      	add	r2, fp
9000d402:	9209      	str	r2, [sp, #36]	@ 0x24
9000d404:	f89a 3000 	ldrb.w	r3, [sl]
9000d408:	2b00      	cmp	r3, #0
9000d40a:	f000 809f 	beq.w	9000d54c <_vfiprintf_r+0x1ec>
9000d40e:	2300      	movs	r3, #0
9000d410:	f04f 32ff 	mov.w	r2, #4294967295
9000d414:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000d418:	f10a 0a01 	add.w	sl, sl, #1
9000d41c:	9304      	str	r3, [sp, #16]
9000d41e:	9307      	str	r3, [sp, #28]
9000d420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000d424:	931a      	str	r3, [sp, #104]	@ 0x68
9000d426:	4654      	mov	r4, sl
9000d428:	2205      	movs	r2, #5
9000d42a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d42e:	4853      	ldr	r0, [pc, #332]	@ (9000d57c <_vfiprintf_r+0x21c>)
9000d430:	f7f2 ff56 	bl	900002e0 <memchr>
9000d434:	9a04      	ldr	r2, [sp, #16]
9000d436:	b9d8      	cbnz	r0, 9000d470 <_vfiprintf_r+0x110>
9000d438:	06d1      	lsls	r1, r2, #27
9000d43a:	bf44      	itt	mi
9000d43c:	2320      	movmi	r3, #32
9000d43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000d442:	0713      	lsls	r3, r2, #28
9000d444:	bf44      	itt	mi
9000d446:	232b      	movmi	r3, #43	@ 0x2b
9000d448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000d44c:	f89a 3000 	ldrb.w	r3, [sl]
9000d450:	2b2a      	cmp	r3, #42	@ 0x2a
9000d452:	d015      	beq.n	9000d480 <_vfiprintf_r+0x120>
9000d454:	9a07      	ldr	r2, [sp, #28]
9000d456:	4654      	mov	r4, sl
9000d458:	2000      	movs	r0, #0
9000d45a:	f04f 0c0a 	mov.w	ip, #10
9000d45e:	4621      	mov	r1, r4
9000d460:	f811 3b01 	ldrb.w	r3, [r1], #1
9000d464:	3b30      	subs	r3, #48	@ 0x30
9000d466:	2b09      	cmp	r3, #9
9000d468:	d94b      	bls.n	9000d502 <_vfiprintf_r+0x1a2>
9000d46a:	b1b0      	cbz	r0, 9000d49a <_vfiprintf_r+0x13a>
9000d46c:	9207      	str	r2, [sp, #28]
9000d46e:	e014      	b.n	9000d49a <_vfiprintf_r+0x13a>
9000d470:	eba0 0308 	sub.w	r3, r0, r8
9000d474:	fa09 f303 	lsl.w	r3, r9, r3
9000d478:	4313      	orrs	r3, r2
9000d47a:	9304      	str	r3, [sp, #16]
9000d47c:	46a2      	mov	sl, r4
9000d47e:	e7d2      	b.n	9000d426 <_vfiprintf_r+0xc6>
9000d480:	9b03      	ldr	r3, [sp, #12]
9000d482:	1d19      	adds	r1, r3, #4
9000d484:	681b      	ldr	r3, [r3, #0]
9000d486:	9103      	str	r1, [sp, #12]
9000d488:	2b00      	cmp	r3, #0
9000d48a:	bfbb      	ittet	lt
9000d48c:	425b      	neglt	r3, r3
9000d48e:	f042 0202 	orrlt.w	r2, r2, #2
9000d492:	9307      	strge	r3, [sp, #28]
9000d494:	9307      	strlt	r3, [sp, #28]
9000d496:	bfb8      	it	lt
9000d498:	9204      	strlt	r2, [sp, #16]
9000d49a:	7823      	ldrb	r3, [r4, #0]
9000d49c:	2b2e      	cmp	r3, #46	@ 0x2e
9000d49e:	d10a      	bne.n	9000d4b6 <_vfiprintf_r+0x156>
9000d4a0:	7863      	ldrb	r3, [r4, #1]
9000d4a2:	2b2a      	cmp	r3, #42	@ 0x2a
9000d4a4:	d132      	bne.n	9000d50c <_vfiprintf_r+0x1ac>
9000d4a6:	9b03      	ldr	r3, [sp, #12]
9000d4a8:	1d1a      	adds	r2, r3, #4
9000d4aa:	681b      	ldr	r3, [r3, #0]
9000d4ac:	9203      	str	r2, [sp, #12]
9000d4ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000d4b2:	3402      	adds	r4, #2
9000d4b4:	9305      	str	r3, [sp, #20]
9000d4b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000d58c <_vfiprintf_r+0x22c>
9000d4ba:	7821      	ldrb	r1, [r4, #0]
9000d4bc:	2203      	movs	r2, #3
9000d4be:	4650      	mov	r0, sl
9000d4c0:	f7f2 ff0e 	bl	900002e0 <memchr>
9000d4c4:	b138      	cbz	r0, 9000d4d6 <_vfiprintf_r+0x176>
9000d4c6:	9b04      	ldr	r3, [sp, #16]
9000d4c8:	eba0 000a 	sub.w	r0, r0, sl
9000d4cc:	2240      	movs	r2, #64	@ 0x40
9000d4ce:	4082      	lsls	r2, r0
9000d4d0:	4313      	orrs	r3, r2
9000d4d2:	3401      	adds	r4, #1
9000d4d4:	9304      	str	r3, [sp, #16]
9000d4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d4da:	4829      	ldr	r0, [pc, #164]	@ (9000d580 <_vfiprintf_r+0x220>)
9000d4dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000d4e0:	2206      	movs	r2, #6
9000d4e2:	f7f2 fefd 	bl	900002e0 <memchr>
9000d4e6:	2800      	cmp	r0, #0
9000d4e8:	d03f      	beq.n	9000d56a <_vfiprintf_r+0x20a>
9000d4ea:	4b26      	ldr	r3, [pc, #152]	@ (9000d584 <_vfiprintf_r+0x224>)
9000d4ec:	bb1b      	cbnz	r3, 9000d536 <_vfiprintf_r+0x1d6>
9000d4ee:	9b03      	ldr	r3, [sp, #12]
9000d4f0:	3307      	adds	r3, #7
9000d4f2:	f023 0307 	bic.w	r3, r3, #7
9000d4f6:	3308      	adds	r3, #8
9000d4f8:	9303      	str	r3, [sp, #12]
9000d4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000d4fc:	443b      	add	r3, r7
9000d4fe:	9309      	str	r3, [sp, #36]	@ 0x24
9000d500:	e76a      	b.n	9000d3d8 <_vfiprintf_r+0x78>
9000d502:	fb0c 3202 	mla	r2, ip, r2, r3
9000d506:	460c      	mov	r4, r1
9000d508:	2001      	movs	r0, #1
9000d50a:	e7a8      	b.n	9000d45e <_vfiprintf_r+0xfe>
9000d50c:	2300      	movs	r3, #0
9000d50e:	3401      	adds	r4, #1
9000d510:	9305      	str	r3, [sp, #20]
9000d512:	4619      	mov	r1, r3
9000d514:	f04f 0c0a 	mov.w	ip, #10
9000d518:	4620      	mov	r0, r4
9000d51a:	f810 2b01 	ldrb.w	r2, [r0], #1
9000d51e:	3a30      	subs	r2, #48	@ 0x30
9000d520:	2a09      	cmp	r2, #9
9000d522:	d903      	bls.n	9000d52c <_vfiprintf_r+0x1cc>
9000d524:	2b00      	cmp	r3, #0
9000d526:	d0c6      	beq.n	9000d4b6 <_vfiprintf_r+0x156>
9000d528:	9105      	str	r1, [sp, #20]
9000d52a:	e7c4      	b.n	9000d4b6 <_vfiprintf_r+0x156>
9000d52c:	fb0c 2101 	mla	r1, ip, r1, r2
9000d530:	4604      	mov	r4, r0
9000d532:	2301      	movs	r3, #1
9000d534:	e7f0      	b.n	9000d518 <_vfiprintf_r+0x1b8>
9000d536:	ab03      	add	r3, sp, #12
9000d538:	9300      	str	r3, [sp, #0]
9000d53a:	462a      	mov	r2, r5
9000d53c:	4b12      	ldr	r3, [pc, #72]	@ (9000d588 <_vfiprintf_r+0x228>)
9000d53e:	a904      	add	r1, sp, #16
9000d540:	4630      	mov	r0, r6
9000d542:	f3af 8000 	nop.w
9000d546:	4607      	mov	r7, r0
9000d548:	1c78      	adds	r0, r7, #1
9000d54a:	d1d6      	bne.n	9000d4fa <_vfiprintf_r+0x19a>
9000d54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000d54e:	07d9      	lsls	r1, r3, #31
9000d550:	d405      	bmi.n	9000d55e <_vfiprintf_r+0x1fe>
9000d552:	89ab      	ldrh	r3, [r5, #12]
9000d554:	059a      	lsls	r2, r3, #22
9000d556:	d402      	bmi.n	9000d55e <_vfiprintf_r+0x1fe>
9000d558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000d55a:	f7ff fe8b 	bl	9000d274 <__retarget_lock_release_recursive>
9000d55e:	89ab      	ldrh	r3, [r5, #12]
9000d560:	065b      	lsls	r3, r3, #25
9000d562:	f53f af1f 	bmi.w	9000d3a4 <_vfiprintf_r+0x44>
9000d566:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000d568:	e71e      	b.n	9000d3a8 <_vfiprintf_r+0x48>
9000d56a:	ab03      	add	r3, sp, #12
9000d56c:	9300      	str	r3, [sp, #0]
9000d56e:	462a      	mov	r2, r5
9000d570:	4b05      	ldr	r3, [pc, #20]	@ (9000d588 <_vfiprintf_r+0x228>)
9000d572:	a904      	add	r1, sp, #16
9000d574:	4630      	mov	r0, r6
9000d576:	f000 f879 	bl	9000d66c <_printf_i>
9000d57a:	e7e4      	b.n	9000d546 <_vfiprintf_r+0x1e6>
9000d57c:	90010024 	.word	0x90010024
9000d580:	9001002e 	.word	0x9001002e
9000d584:	00000000 	.word	0x00000000
9000d588:	9000d33b 	.word	0x9000d33b
9000d58c:	9001002a 	.word	0x9001002a

9000d590 <_printf_common>:
9000d590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000d594:	4616      	mov	r6, r2
9000d596:	4698      	mov	r8, r3
9000d598:	688a      	ldr	r2, [r1, #8]
9000d59a:	690b      	ldr	r3, [r1, #16]
9000d59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000d5a0:	4293      	cmp	r3, r2
9000d5a2:	bfb8      	it	lt
9000d5a4:	4613      	movlt	r3, r2
9000d5a6:	6033      	str	r3, [r6, #0]
9000d5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000d5ac:	4607      	mov	r7, r0
9000d5ae:	460c      	mov	r4, r1
9000d5b0:	b10a      	cbz	r2, 9000d5b6 <_printf_common+0x26>
9000d5b2:	3301      	adds	r3, #1
9000d5b4:	6033      	str	r3, [r6, #0]
9000d5b6:	6823      	ldr	r3, [r4, #0]
9000d5b8:	0699      	lsls	r1, r3, #26
9000d5ba:	bf42      	ittt	mi
9000d5bc:	6833      	ldrmi	r3, [r6, #0]
9000d5be:	3302      	addmi	r3, #2
9000d5c0:	6033      	strmi	r3, [r6, #0]
9000d5c2:	6825      	ldr	r5, [r4, #0]
9000d5c4:	f015 0506 	ands.w	r5, r5, #6
9000d5c8:	d106      	bne.n	9000d5d8 <_printf_common+0x48>
9000d5ca:	f104 0a19 	add.w	sl, r4, #25
9000d5ce:	68e3      	ldr	r3, [r4, #12]
9000d5d0:	6832      	ldr	r2, [r6, #0]
9000d5d2:	1a9b      	subs	r3, r3, r2
9000d5d4:	42ab      	cmp	r3, r5
9000d5d6:	dc26      	bgt.n	9000d626 <_printf_common+0x96>
9000d5d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000d5dc:	6822      	ldr	r2, [r4, #0]
9000d5de:	3b00      	subs	r3, #0
9000d5e0:	bf18      	it	ne
9000d5e2:	2301      	movne	r3, #1
9000d5e4:	0692      	lsls	r2, r2, #26
9000d5e6:	d42b      	bmi.n	9000d640 <_printf_common+0xb0>
9000d5e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000d5ec:	4641      	mov	r1, r8
9000d5ee:	4638      	mov	r0, r7
9000d5f0:	47c8      	blx	r9
9000d5f2:	3001      	adds	r0, #1
9000d5f4:	d01e      	beq.n	9000d634 <_printf_common+0xa4>
9000d5f6:	6823      	ldr	r3, [r4, #0]
9000d5f8:	6922      	ldr	r2, [r4, #16]
9000d5fa:	f003 0306 	and.w	r3, r3, #6
9000d5fe:	2b04      	cmp	r3, #4
9000d600:	bf02      	ittt	eq
9000d602:	68e5      	ldreq	r5, [r4, #12]
9000d604:	6833      	ldreq	r3, [r6, #0]
9000d606:	1aed      	subeq	r5, r5, r3
9000d608:	68a3      	ldr	r3, [r4, #8]
9000d60a:	bf0c      	ite	eq
9000d60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000d610:	2500      	movne	r5, #0
9000d612:	4293      	cmp	r3, r2
9000d614:	bfc4      	itt	gt
9000d616:	1a9b      	subgt	r3, r3, r2
9000d618:	18ed      	addgt	r5, r5, r3
9000d61a:	2600      	movs	r6, #0
9000d61c:	341a      	adds	r4, #26
9000d61e:	42b5      	cmp	r5, r6
9000d620:	d11a      	bne.n	9000d658 <_printf_common+0xc8>
9000d622:	2000      	movs	r0, #0
9000d624:	e008      	b.n	9000d638 <_printf_common+0xa8>
9000d626:	2301      	movs	r3, #1
9000d628:	4652      	mov	r2, sl
9000d62a:	4641      	mov	r1, r8
9000d62c:	4638      	mov	r0, r7
9000d62e:	47c8      	blx	r9
9000d630:	3001      	adds	r0, #1
9000d632:	d103      	bne.n	9000d63c <_printf_common+0xac>
9000d634:	f04f 30ff 	mov.w	r0, #4294967295
9000d638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d63c:	3501      	adds	r5, #1
9000d63e:	e7c6      	b.n	9000d5ce <_printf_common+0x3e>
9000d640:	18e1      	adds	r1, r4, r3
9000d642:	1c5a      	adds	r2, r3, #1
9000d644:	2030      	movs	r0, #48	@ 0x30
9000d646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000d64a:	4422      	add	r2, r4
9000d64c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000d650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000d654:	3302      	adds	r3, #2
9000d656:	e7c7      	b.n	9000d5e8 <_printf_common+0x58>
9000d658:	2301      	movs	r3, #1
9000d65a:	4622      	mov	r2, r4
9000d65c:	4641      	mov	r1, r8
9000d65e:	4638      	mov	r0, r7
9000d660:	47c8      	blx	r9
9000d662:	3001      	adds	r0, #1
9000d664:	d0e6      	beq.n	9000d634 <_printf_common+0xa4>
9000d666:	3601      	adds	r6, #1
9000d668:	e7d9      	b.n	9000d61e <_printf_common+0x8e>
	...

9000d66c <_printf_i>:
9000d66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000d670:	7e0f      	ldrb	r7, [r1, #24]
9000d672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000d674:	2f78      	cmp	r7, #120	@ 0x78
9000d676:	4691      	mov	r9, r2
9000d678:	4680      	mov	r8, r0
9000d67a:	460c      	mov	r4, r1
9000d67c:	469a      	mov	sl, r3
9000d67e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000d682:	d807      	bhi.n	9000d694 <_printf_i+0x28>
9000d684:	2f62      	cmp	r7, #98	@ 0x62
9000d686:	d80a      	bhi.n	9000d69e <_printf_i+0x32>
9000d688:	2f00      	cmp	r7, #0
9000d68a:	f000 80d1 	beq.w	9000d830 <_printf_i+0x1c4>
9000d68e:	2f58      	cmp	r7, #88	@ 0x58
9000d690:	f000 80b8 	beq.w	9000d804 <_printf_i+0x198>
9000d694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000d69c:	e03a      	b.n	9000d714 <_printf_i+0xa8>
9000d69e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000d6a2:	2b15      	cmp	r3, #21
9000d6a4:	d8f6      	bhi.n	9000d694 <_printf_i+0x28>
9000d6a6:	a101      	add	r1, pc, #4	@ (adr r1, 9000d6ac <_printf_i+0x40>)
9000d6a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000d6ac:	9000d705 	.word	0x9000d705
9000d6b0:	9000d719 	.word	0x9000d719
9000d6b4:	9000d695 	.word	0x9000d695
9000d6b8:	9000d695 	.word	0x9000d695
9000d6bc:	9000d695 	.word	0x9000d695
9000d6c0:	9000d695 	.word	0x9000d695
9000d6c4:	9000d719 	.word	0x9000d719
9000d6c8:	9000d695 	.word	0x9000d695
9000d6cc:	9000d695 	.word	0x9000d695
9000d6d0:	9000d695 	.word	0x9000d695
9000d6d4:	9000d695 	.word	0x9000d695
9000d6d8:	9000d817 	.word	0x9000d817
9000d6dc:	9000d743 	.word	0x9000d743
9000d6e0:	9000d7d1 	.word	0x9000d7d1
9000d6e4:	9000d695 	.word	0x9000d695
9000d6e8:	9000d695 	.word	0x9000d695
9000d6ec:	9000d839 	.word	0x9000d839
9000d6f0:	9000d695 	.word	0x9000d695
9000d6f4:	9000d743 	.word	0x9000d743
9000d6f8:	9000d695 	.word	0x9000d695
9000d6fc:	9000d695 	.word	0x9000d695
9000d700:	9000d7d9 	.word	0x9000d7d9
9000d704:	6833      	ldr	r3, [r6, #0]
9000d706:	1d1a      	adds	r2, r3, #4
9000d708:	681b      	ldr	r3, [r3, #0]
9000d70a:	6032      	str	r2, [r6, #0]
9000d70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000d714:	2301      	movs	r3, #1
9000d716:	e09c      	b.n	9000d852 <_printf_i+0x1e6>
9000d718:	6833      	ldr	r3, [r6, #0]
9000d71a:	6820      	ldr	r0, [r4, #0]
9000d71c:	1d19      	adds	r1, r3, #4
9000d71e:	6031      	str	r1, [r6, #0]
9000d720:	0606      	lsls	r6, r0, #24
9000d722:	d501      	bpl.n	9000d728 <_printf_i+0xbc>
9000d724:	681d      	ldr	r5, [r3, #0]
9000d726:	e003      	b.n	9000d730 <_printf_i+0xc4>
9000d728:	0645      	lsls	r5, r0, #25
9000d72a:	d5fb      	bpl.n	9000d724 <_printf_i+0xb8>
9000d72c:	f9b3 5000 	ldrsh.w	r5, [r3]
9000d730:	2d00      	cmp	r5, #0
9000d732:	da03      	bge.n	9000d73c <_printf_i+0xd0>
9000d734:	232d      	movs	r3, #45	@ 0x2d
9000d736:	426d      	negs	r5, r5
9000d738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d73c:	4858      	ldr	r0, [pc, #352]	@ (9000d8a0 <_printf_i+0x234>)
9000d73e:	230a      	movs	r3, #10
9000d740:	e011      	b.n	9000d766 <_printf_i+0xfa>
9000d742:	6821      	ldr	r1, [r4, #0]
9000d744:	6833      	ldr	r3, [r6, #0]
9000d746:	0608      	lsls	r0, r1, #24
9000d748:	f853 5b04 	ldr.w	r5, [r3], #4
9000d74c:	d402      	bmi.n	9000d754 <_printf_i+0xe8>
9000d74e:	0649      	lsls	r1, r1, #25
9000d750:	bf48      	it	mi
9000d752:	b2ad      	uxthmi	r5, r5
9000d754:	2f6f      	cmp	r7, #111	@ 0x6f
9000d756:	4852      	ldr	r0, [pc, #328]	@ (9000d8a0 <_printf_i+0x234>)
9000d758:	6033      	str	r3, [r6, #0]
9000d75a:	bf14      	ite	ne
9000d75c:	230a      	movne	r3, #10
9000d75e:	2308      	moveq	r3, #8
9000d760:	2100      	movs	r1, #0
9000d762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000d766:	6866      	ldr	r6, [r4, #4]
9000d768:	60a6      	str	r6, [r4, #8]
9000d76a:	2e00      	cmp	r6, #0
9000d76c:	db05      	blt.n	9000d77a <_printf_i+0x10e>
9000d76e:	6821      	ldr	r1, [r4, #0]
9000d770:	432e      	orrs	r6, r5
9000d772:	f021 0104 	bic.w	r1, r1, #4
9000d776:	6021      	str	r1, [r4, #0]
9000d778:	d04b      	beq.n	9000d812 <_printf_i+0x1a6>
9000d77a:	4616      	mov	r6, r2
9000d77c:	fbb5 f1f3 	udiv	r1, r5, r3
9000d780:	fb03 5711 	mls	r7, r3, r1, r5
9000d784:	5dc7      	ldrb	r7, [r0, r7]
9000d786:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000d78a:	462f      	mov	r7, r5
9000d78c:	42bb      	cmp	r3, r7
9000d78e:	460d      	mov	r5, r1
9000d790:	d9f4      	bls.n	9000d77c <_printf_i+0x110>
9000d792:	2b08      	cmp	r3, #8
9000d794:	d10b      	bne.n	9000d7ae <_printf_i+0x142>
9000d796:	6823      	ldr	r3, [r4, #0]
9000d798:	07df      	lsls	r7, r3, #31
9000d79a:	d508      	bpl.n	9000d7ae <_printf_i+0x142>
9000d79c:	6923      	ldr	r3, [r4, #16]
9000d79e:	6861      	ldr	r1, [r4, #4]
9000d7a0:	4299      	cmp	r1, r3
9000d7a2:	bfde      	ittt	le
9000d7a4:	2330      	movle	r3, #48	@ 0x30
9000d7a6:	f806 3c01 	strble.w	r3, [r6, #-1]
9000d7aa:	f106 36ff 	addle.w	r6, r6, #4294967295
9000d7ae:	1b92      	subs	r2, r2, r6
9000d7b0:	6122      	str	r2, [r4, #16]
9000d7b2:	f8cd a000 	str.w	sl, [sp]
9000d7b6:	464b      	mov	r3, r9
9000d7b8:	aa03      	add	r2, sp, #12
9000d7ba:	4621      	mov	r1, r4
9000d7bc:	4640      	mov	r0, r8
9000d7be:	f7ff fee7 	bl	9000d590 <_printf_common>
9000d7c2:	3001      	adds	r0, #1
9000d7c4:	d14a      	bne.n	9000d85c <_printf_i+0x1f0>
9000d7c6:	f04f 30ff 	mov.w	r0, #4294967295
9000d7ca:	b004      	add	sp, #16
9000d7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d7d0:	6823      	ldr	r3, [r4, #0]
9000d7d2:	f043 0320 	orr.w	r3, r3, #32
9000d7d6:	6023      	str	r3, [r4, #0]
9000d7d8:	4832      	ldr	r0, [pc, #200]	@ (9000d8a4 <_printf_i+0x238>)
9000d7da:	2778      	movs	r7, #120	@ 0x78
9000d7dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000d7e0:	6823      	ldr	r3, [r4, #0]
9000d7e2:	6831      	ldr	r1, [r6, #0]
9000d7e4:	061f      	lsls	r7, r3, #24
9000d7e6:	f851 5b04 	ldr.w	r5, [r1], #4
9000d7ea:	d402      	bmi.n	9000d7f2 <_printf_i+0x186>
9000d7ec:	065f      	lsls	r7, r3, #25
9000d7ee:	bf48      	it	mi
9000d7f0:	b2ad      	uxthmi	r5, r5
9000d7f2:	6031      	str	r1, [r6, #0]
9000d7f4:	07d9      	lsls	r1, r3, #31
9000d7f6:	bf44      	itt	mi
9000d7f8:	f043 0320 	orrmi.w	r3, r3, #32
9000d7fc:	6023      	strmi	r3, [r4, #0]
9000d7fe:	b11d      	cbz	r5, 9000d808 <_printf_i+0x19c>
9000d800:	2310      	movs	r3, #16
9000d802:	e7ad      	b.n	9000d760 <_printf_i+0xf4>
9000d804:	4826      	ldr	r0, [pc, #152]	@ (9000d8a0 <_printf_i+0x234>)
9000d806:	e7e9      	b.n	9000d7dc <_printf_i+0x170>
9000d808:	6823      	ldr	r3, [r4, #0]
9000d80a:	f023 0320 	bic.w	r3, r3, #32
9000d80e:	6023      	str	r3, [r4, #0]
9000d810:	e7f6      	b.n	9000d800 <_printf_i+0x194>
9000d812:	4616      	mov	r6, r2
9000d814:	e7bd      	b.n	9000d792 <_printf_i+0x126>
9000d816:	6833      	ldr	r3, [r6, #0]
9000d818:	6825      	ldr	r5, [r4, #0]
9000d81a:	6961      	ldr	r1, [r4, #20]
9000d81c:	1d18      	adds	r0, r3, #4
9000d81e:	6030      	str	r0, [r6, #0]
9000d820:	062e      	lsls	r6, r5, #24
9000d822:	681b      	ldr	r3, [r3, #0]
9000d824:	d501      	bpl.n	9000d82a <_printf_i+0x1be>
9000d826:	6019      	str	r1, [r3, #0]
9000d828:	e002      	b.n	9000d830 <_printf_i+0x1c4>
9000d82a:	0668      	lsls	r0, r5, #25
9000d82c:	d5fb      	bpl.n	9000d826 <_printf_i+0x1ba>
9000d82e:	8019      	strh	r1, [r3, #0]
9000d830:	2300      	movs	r3, #0
9000d832:	6123      	str	r3, [r4, #16]
9000d834:	4616      	mov	r6, r2
9000d836:	e7bc      	b.n	9000d7b2 <_printf_i+0x146>
9000d838:	6833      	ldr	r3, [r6, #0]
9000d83a:	1d1a      	adds	r2, r3, #4
9000d83c:	6032      	str	r2, [r6, #0]
9000d83e:	681e      	ldr	r6, [r3, #0]
9000d840:	6862      	ldr	r2, [r4, #4]
9000d842:	2100      	movs	r1, #0
9000d844:	4630      	mov	r0, r6
9000d846:	f7f2 fd4b 	bl	900002e0 <memchr>
9000d84a:	b108      	cbz	r0, 9000d850 <_printf_i+0x1e4>
9000d84c:	1b80      	subs	r0, r0, r6
9000d84e:	6060      	str	r0, [r4, #4]
9000d850:	6863      	ldr	r3, [r4, #4]
9000d852:	6123      	str	r3, [r4, #16]
9000d854:	2300      	movs	r3, #0
9000d856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d85a:	e7aa      	b.n	9000d7b2 <_printf_i+0x146>
9000d85c:	6923      	ldr	r3, [r4, #16]
9000d85e:	4632      	mov	r2, r6
9000d860:	4649      	mov	r1, r9
9000d862:	4640      	mov	r0, r8
9000d864:	47d0      	blx	sl
9000d866:	3001      	adds	r0, #1
9000d868:	d0ad      	beq.n	9000d7c6 <_printf_i+0x15a>
9000d86a:	6823      	ldr	r3, [r4, #0]
9000d86c:	079b      	lsls	r3, r3, #30
9000d86e:	d413      	bmi.n	9000d898 <_printf_i+0x22c>
9000d870:	68e0      	ldr	r0, [r4, #12]
9000d872:	9b03      	ldr	r3, [sp, #12]
9000d874:	4298      	cmp	r0, r3
9000d876:	bfb8      	it	lt
9000d878:	4618      	movlt	r0, r3
9000d87a:	e7a6      	b.n	9000d7ca <_printf_i+0x15e>
9000d87c:	2301      	movs	r3, #1
9000d87e:	4632      	mov	r2, r6
9000d880:	4649      	mov	r1, r9
9000d882:	4640      	mov	r0, r8
9000d884:	47d0      	blx	sl
9000d886:	3001      	adds	r0, #1
9000d888:	d09d      	beq.n	9000d7c6 <_printf_i+0x15a>
9000d88a:	3501      	adds	r5, #1
9000d88c:	68e3      	ldr	r3, [r4, #12]
9000d88e:	9903      	ldr	r1, [sp, #12]
9000d890:	1a5b      	subs	r3, r3, r1
9000d892:	42ab      	cmp	r3, r5
9000d894:	dcf2      	bgt.n	9000d87c <_printf_i+0x210>
9000d896:	e7eb      	b.n	9000d870 <_printf_i+0x204>
9000d898:	2500      	movs	r5, #0
9000d89a:	f104 0619 	add.w	r6, r4, #25
9000d89e:	e7f5      	b.n	9000d88c <_printf_i+0x220>
9000d8a0:	90010035 	.word	0x90010035
9000d8a4:	90010046 	.word	0x90010046

9000d8a8 <__sflush_r>:
9000d8a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d8b0:	0716      	lsls	r6, r2, #28
9000d8b2:	4605      	mov	r5, r0
9000d8b4:	460c      	mov	r4, r1
9000d8b6:	d454      	bmi.n	9000d962 <__sflush_r+0xba>
9000d8b8:	684b      	ldr	r3, [r1, #4]
9000d8ba:	2b00      	cmp	r3, #0
9000d8bc:	dc02      	bgt.n	9000d8c4 <__sflush_r+0x1c>
9000d8be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d8c0:	2b00      	cmp	r3, #0
9000d8c2:	dd48      	ble.n	9000d956 <__sflush_r+0xae>
9000d8c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d8c6:	2e00      	cmp	r6, #0
9000d8c8:	d045      	beq.n	9000d956 <__sflush_r+0xae>
9000d8ca:	2300      	movs	r3, #0
9000d8cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d8d0:	682f      	ldr	r7, [r5, #0]
9000d8d2:	6a21      	ldr	r1, [r4, #32]
9000d8d4:	602b      	str	r3, [r5, #0]
9000d8d6:	d030      	beq.n	9000d93a <__sflush_r+0x92>
9000d8d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d8da:	89a3      	ldrh	r3, [r4, #12]
9000d8dc:	0759      	lsls	r1, r3, #29
9000d8de:	d505      	bpl.n	9000d8ec <__sflush_r+0x44>
9000d8e0:	6863      	ldr	r3, [r4, #4]
9000d8e2:	1ad2      	subs	r2, r2, r3
9000d8e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d8e6:	b10b      	cbz	r3, 9000d8ec <__sflush_r+0x44>
9000d8e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d8ea:	1ad2      	subs	r2, r2, r3
9000d8ec:	2300      	movs	r3, #0
9000d8ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d8f0:	6a21      	ldr	r1, [r4, #32]
9000d8f2:	4628      	mov	r0, r5
9000d8f4:	47b0      	blx	r6
9000d8f6:	1c43      	adds	r3, r0, #1
9000d8f8:	89a3      	ldrh	r3, [r4, #12]
9000d8fa:	d106      	bne.n	9000d90a <__sflush_r+0x62>
9000d8fc:	6829      	ldr	r1, [r5, #0]
9000d8fe:	291d      	cmp	r1, #29
9000d900:	d82b      	bhi.n	9000d95a <__sflush_r+0xb2>
9000d902:	4a2a      	ldr	r2, [pc, #168]	@ (9000d9ac <__sflush_r+0x104>)
9000d904:	40ca      	lsrs	r2, r1
9000d906:	07d6      	lsls	r6, r2, #31
9000d908:	d527      	bpl.n	9000d95a <__sflush_r+0xb2>
9000d90a:	2200      	movs	r2, #0
9000d90c:	6062      	str	r2, [r4, #4]
9000d90e:	04d9      	lsls	r1, r3, #19
9000d910:	6922      	ldr	r2, [r4, #16]
9000d912:	6022      	str	r2, [r4, #0]
9000d914:	d504      	bpl.n	9000d920 <__sflush_r+0x78>
9000d916:	1c42      	adds	r2, r0, #1
9000d918:	d101      	bne.n	9000d91e <__sflush_r+0x76>
9000d91a:	682b      	ldr	r3, [r5, #0]
9000d91c:	b903      	cbnz	r3, 9000d920 <__sflush_r+0x78>
9000d91e:	6560      	str	r0, [r4, #84]	@ 0x54
9000d920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d922:	602f      	str	r7, [r5, #0]
9000d924:	b1b9      	cbz	r1, 9000d956 <__sflush_r+0xae>
9000d926:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d92a:	4299      	cmp	r1, r3
9000d92c:	d002      	beq.n	9000d934 <__sflush_r+0x8c>
9000d92e:	4628      	mov	r0, r5
9000d930:	f7ff fca2 	bl	9000d278 <_free_r>
9000d934:	2300      	movs	r3, #0
9000d936:	6363      	str	r3, [r4, #52]	@ 0x34
9000d938:	e00d      	b.n	9000d956 <__sflush_r+0xae>
9000d93a:	2301      	movs	r3, #1
9000d93c:	4628      	mov	r0, r5
9000d93e:	47b0      	blx	r6
9000d940:	4602      	mov	r2, r0
9000d942:	1c50      	adds	r0, r2, #1
9000d944:	d1c9      	bne.n	9000d8da <__sflush_r+0x32>
9000d946:	682b      	ldr	r3, [r5, #0]
9000d948:	2b00      	cmp	r3, #0
9000d94a:	d0c6      	beq.n	9000d8da <__sflush_r+0x32>
9000d94c:	2b1d      	cmp	r3, #29
9000d94e:	d001      	beq.n	9000d954 <__sflush_r+0xac>
9000d950:	2b16      	cmp	r3, #22
9000d952:	d11e      	bne.n	9000d992 <__sflush_r+0xea>
9000d954:	602f      	str	r7, [r5, #0]
9000d956:	2000      	movs	r0, #0
9000d958:	e022      	b.n	9000d9a0 <__sflush_r+0xf8>
9000d95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d95e:	b21b      	sxth	r3, r3
9000d960:	e01b      	b.n	9000d99a <__sflush_r+0xf2>
9000d962:	690f      	ldr	r7, [r1, #16]
9000d964:	2f00      	cmp	r7, #0
9000d966:	d0f6      	beq.n	9000d956 <__sflush_r+0xae>
9000d968:	0793      	lsls	r3, r2, #30
9000d96a:	680e      	ldr	r6, [r1, #0]
9000d96c:	bf08      	it	eq
9000d96e:	694b      	ldreq	r3, [r1, #20]
9000d970:	600f      	str	r7, [r1, #0]
9000d972:	bf18      	it	ne
9000d974:	2300      	movne	r3, #0
9000d976:	eba6 0807 	sub.w	r8, r6, r7
9000d97a:	608b      	str	r3, [r1, #8]
9000d97c:	f1b8 0f00 	cmp.w	r8, #0
9000d980:	dde9      	ble.n	9000d956 <__sflush_r+0xae>
9000d982:	6a21      	ldr	r1, [r4, #32]
9000d984:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d986:	4643      	mov	r3, r8
9000d988:	463a      	mov	r2, r7
9000d98a:	4628      	mov	r0, r5
9000d98c:	47b0      	blx	r6
9000d98e:	2800      	cmp	r0, #0
9000d990:	dc08      	bgt.n	9000d9a4 <__sflush_r+0xfc>
9000d992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d99a:	81a3      	strh	r3, [r4, #12]
9000d99c:	f04f 30ff 	mov.w	r0, #4294967295
9000d9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d9a4:	4407      	add	r7, r0
9000d9a6:	eba8 0800 	sub.w	r8, r8, r0
9000d9aa:	e7e7      	b.n	9000d97c <__sflush_r+0xd4>
9000d9ac:	20400001 	.word	0x20400001

9000d9b0 <_fflush_r>:
9000d9b0:	b538      	push	{r3, r4, r5, lr}
9000d9b2:	690b      	ldr	r3, [r1, #16]
9000d9b4:	4605      	mov	r5, r0
9000d9b6:	460c      	mov	r4, r1
9000d9b8:	b913      	cbnz	r3, 9000d9c0 <_fflush_r+0x10>
9000d9ba:	2500      	movs	r5, #0
9000d9bc:	4628      	mov	r0, r5
9000d9be:	bd38      	pop	{r3, r4, r5, pc}
9000d9c0:	b118      	cbz	r0, 9000d9ca <_fflush_r+0x1a>
9000d9c2:	6a03      	ldr	r3, [r0, #32]
9000d9c4:	b90b      	cbnz	r3, 9000d9ca <_fflush_r+0x1a>
9000d9c6:	f7ff fa4d 	bl	9000ce64 <__sinit>
9000d9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d9ce:	2b00      	cmp	r3, #0
9000d9d0:	d0f3      	beq.n	9000d9ba <_fflush_r+0xa>
9000d9d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d9d4:	07d0      	lsls	r0, r2, #31
9000d9d6:	d404      	bmi.n	9000d9e2 <_fflush_r+0x32>
9000d9d8:	0599      	lsls	r1, r3, #22
9000d9da:	d402      	bmi.n	9000d9e2 <_fflush_r+0x32>
9000d9dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d9de:	f7ff fc48 	bl	9000d272 <__retarget_lock_acquire_recursive>
9000d9e2:	4628      	mov	r0, r5
9000d9e4:	4621      	mov	r1, r4
9000d9e6:	f7ff ff5f 	bl	9000d8a8 <__sflush_r>
9000d9ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d9ec:	07da      	lsls	r2, r3, #31
9000d9ee:	4605      	mov	r5, r0
9000d9f0:	d4e4      	bmi.n	9000d9bc <_fflush_r+0xc>
9000d9f2:	89a3      	ldrh	r3, [r4, #12]
9000d9f4:	059b      	lsls	r3, r3, #22
9000d9f6:	d4e1      	bmi.n	9000d9bc <_fflush_r+0xc>
9000d9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d9fa:	f7ff fc3b 	bl	9000d274 <__retarget_lock_release_recursive>
9000d9fe:	e7dd      	b.n	9000d9bc <_fflush_r+0xc>

9000da00 <__swhatbuf_r>:
9000da00:	b570      	push	{r4, r5, r6, lr}
9000da02:	460c      	mov	r4, r1
9000da04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000da08:	2900      	cmp	r1, #0
9000da0a:	b096      	sub	sp, #88	@ 0x58
9000da0c:	4615      	mov	r5, r2
9000da0e:	461e      	mov	r6, r3
9000da10:	da0d      	bge.n	9000da2e <__swhatbuf_r+0x2e>
9000da12:	89a3      	ldrh	r3, [r4, #12]
9000da14:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000da18:	f04f 0100 	mov.w	r1, #0
9000da1c:	bf14      	ite	ne
9000da1e:	2340      	movne	r3, #64	@ 0x40
9000da20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000da24:	2000      	movs	r0, #0
9000da26:	6031      	str	r1, [r6, #0]
9000da28:	602b      	str	r3, [r5, #0]
9000da2a:	b016      	add	sp, #88	@ 0x58
9000da2c:	bd70      	pop	{r4, r5, r6, pc}
9000da2e:	466a      	mov	r2, sp
9000da30:	f000 f848 	bl	9000dac4 <_fstat_r>
9000da34:	2800      	cmp	r0, #0
9000da36:	dbec      	blt.n	9000da12 <__swhatbuf_r+0x12>
9000da38:	9901      	ldr	r1, [sp, #4]
9000da3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000da3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000da42:	4259      	negs	r1, r3
9000da44:	4159      	adcs	r1, r3
9000da46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000da4a:	e7eb      	b.n	9000da24 <__swhatbuf_r+0x24>

9000da4c <__smakebuf_r>:
9000da4c:	898b      	ldrh	r3, [r1, #12]
9000da4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000da50:	079d      	lsls	r5, r3, #30
9000da52:	4606      	mov	r6, r0
9000da54:	460c      	mov	r4, r1
9000da56:	d507      	bpl.n	9000da68 <__smakebuf_r+0x1c>
9000da58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000da5c:	6023      	str	r3, [r4, #0]
9000da5e:	6123      	str	r3, [r4, #16]
9000da60:	2301      	movs	r3, #1
9000da62:	6163      	str	r3, [r4, #20]
9000da64:	b003      	add	sp, #12
9000da66:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000da68:	ab01      	add	r3, sp, #4
9000da6a:	466a      	mov	r2, sp
9000da6c:	f7ff ffc8 	bl	9000da00 <__swhatbuf_r>
9000da70:	9f00      	ldr	r7, [sp, #0]
9000da72:	4605      	mov	r5, r0
9000da74:	4639      	mov	r1, r7
9000da76:	4630      	mov	r0, r6
9000da78:	f7ff f8dc 	bl	9000cc34 <_malloc_r>
9000da7c:	b948      	cbnz	r0, 9000da92 <__smakebuf_r+0x46>
9000da7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000da82:	059a      	lsls	r2, r3, #22
9000da84:	d4ee      	bmi.n	9000da64 <__smakebuf_r+0x18>
9000da86:	f023 0303 	bic.w	r3, r3, #3
9000da8a:	f043 0302 	orr.w	r3, r3, #2
9000da8e:	81a3      	strh	r3, [r4, #12]
9000da90:	e7e2      	b.n	9000da58 <__smakebuf_r+0xc>
9000da92:	89a3      	ldrh	r3, [r4, #12]
9000da94:	6020      	str	r0, [r4, #0]
9000da96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000da9a:	81a3      	strh	r3, [r4, #12]
9000da9c:	9b01      	ldr	r3, [sp, #4]
9000da9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000daa2:	b15b      	cbz	r3, 9000dabc <__smakebuf_r+0x70>
9000daa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000daa8:	4630      	mov	r0, r6
9000daaa:	f000 f81d 	bl	9000dae8 <_isatty_r>
9000daae:	b128      	cbz	r0, 9000dabc <__smakebuf_r+0x70>
9000dab0:	89a3      	ldrh	r3, [r4, #12]
9000dab2:	f023 0303 	bic.w	r3, r3, #3
9000dab6:	f043 0301 	orr.w	r3, r3, #1
9000daba:	81a3      	strh	r3, [r4, #12]
9000dabc:	89a3      	ldrh	r3, [r4, #12]
9000dabe:	431d      	orrs	r5, r3
9000dac0:	81a5      	strh	r5, [r4, #12]
9000dac2:	e7cf      	b.n	9000da64 <__smakebuf_r+0x18>

9000dac4 <_fstat_r>:
9000dac4:	b538      	push	{r3, r4, r5, lr}
9000dac6:	4d07      	ldr	r5, [pc, #28]	@ (9000dae4 <_fstat_r+0x20>)
9000dac8:	2300      	movs	r3, #0
9000daca:	4604      	mov	r4, r0
9000dacc:	4608      	mov	r0, r1
9000dace:	4611      	mov	r1, r2
9000dad0:	602b      	str	r3, [r5, #0]
9000dad2:	f7f3 fb40 	bl	90001156 <_fstat>
9000dad6:	1c43      	adds	r3, r0, #1
9000dad8:	d102      	bne.n	9000dae0 <_fstat_r+0x1c>
9000dada:	682b      	ldr	r3, [r5, #0]
9000dadc:	b103      	cbz	r3, 9000dae0 <_fstat_r+0x1c>
9000dade:	6023      	str	r3, [r4, #0]
9000dae0:	bd38      	pop	{r3, r4, r5, pc}
9000dae2:	bf00      	nop
9000dae4:	20001530 	.word	0x20001530

9000dae8 <_isatty_r>:
9000dae8:	b538      	push	{r3, r4, r5, lr}
9000daea:	4d06      	ldr	r5, [pc, #24]	@ (9000db04 <_isatty_r+0x1c>)
9000daec:	2300      	movs	r3, #0
9000daee:	4604      	mov	r4, r0
9000daf0:	4608      	mov	r0, r1
9000daf2:	602b      	str	r3, [r5, #0]
9000daf4:	f7f3 fb3f 	bl	90001176 <_isatty>
9000daf8:	1c43      	adds	r3, r0, #1
9000dafa:	d102      	bne.n	9000db02 <_isatty_r+0x1a>
9000dafc:	682b      	ldr	r3, [r5, #0]
9000dafe:	b103      	cbz	r3, 9000db02 <_isatty_r+0x1a>
9000db00:	6023      	str	r3, [r4, #0]
9000db02:	bd38      	pop	{r3, r4, r5, pc}
9000db04:	20001530 	.word	0x20001530

9000db08 <_init>:
9000db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000db0a:	bf00      	nop
9000db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000db0e:	bc08      	pop	{r3}
9000db10:	469e      	mov	lr, r3
9000db12:	4770      	bx	lr

9000db14 <_fini>:
9000db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000db16:	bf00      	nop
9000db18:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000db1a:	bc08      	pop	{r3}
9000db1c:	469e      	mov	lr, r3
9000db1e:	4770      	bx	lr
