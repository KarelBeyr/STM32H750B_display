
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d294  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026d4  9000d534  9000d534  0000e534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000fc08  9000fc08  000110cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000fc08  9000fc08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000fc10  9000fc10  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000fc10  9000fc10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000fc14  9000fc14  00010c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000fc18  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  200000d0  9000fce4  000110d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200014a0  9000fce4  000114a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a751  00000000  00000000  000110fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053cc  00000000  00000000  0003b84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002100  00000000  00000000  00040c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019a2  00000000  00000000  00042d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004115d  00000000  00000000  000446ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c82b  00000000  00000000  00085817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018da4c  00000000  00000000  000b2042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023fa8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000976c  00000000  00000000  0023fad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00249240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000d51c 	.word	0x9000d51c

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000d51c 	.word	0x9000d51c

900002e0 <strlen>:
900002e0:	4603      	mov	r3, r0
900002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
900002e6:	2a00      	cmp	r2, #0
900002e8:	d1fb      	bne.n	900002e2 <strlen+0x2>
900002ea:	1a18      	subs	r0, r3, r0
900002ec:	3801      	subs	r0, #1
900002ee:	4770      	bx	lr

900002f0 <memchr>:
900002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002f4:	2a10      	cmp	r2, #16
900002f6:	db2b      	blt.n	90000350 <memchr+0x60>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	d008      	beq.n	90000310 <memchr+0x20>
900002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
90000302:	3a01      	subs	r2, #1
90000304:	428b      	cmp	r3, r1
90000306:	d02d      	beq.n	90000364 <memchr+0x74>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	b342      	cbz	r2, 90000360 <memchr+0x70>
9000030e:	d1f6      	bne.n	900002fe <memchr+0xe>
90000310:	b4f0      	push	{r4, r5, r6, r7}
90000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000031a:	f022 0407 	bic.w	r4, r2, #7
9000031e:	f07f 0700 	mvns.w	r7, #0
90000322:	2300      	movs	r3, #0
90000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000328:	3c08      	subs	r4, #8
9000032a:	ea85 0501 	eor.w	r5, r5, r1
9000032e:	ea86 0601 	eor.w	r6, r6, r1
90000332:	fa85 f547 	uadd8	r5, r5, r7
90000336:	faa3 f587 	sel	r5, r3, r7
9000033a:	fa86 f647 	uadd8	r6, r6, r7
9000033e:	faa5 f687 	sel	r6, r5, r7
90000342:	b98e      	cbnz	r6, 90000368 <memchr+0x78>
90000344:	d1ee      	bne.n	90000324 <memchr+0x34>
90000346:	bcf0      	pop	{r4, r5, r6, r7}
90000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000034c:	f002 0207 	and.w	r2, r2, #7
90000350:	b132      	cbz	r2, 90000360 <memchr+0x70>
90000352:	f810 3b01 	ldrb.w	r3, [r0], #1
90000356:	3a01      	subs	r2, #1
90000358:	ea83 0301 	eor.w	r3, r3, r1
9000035c:	b113      	cbz	r3, 90000364 <memchr+0x74>
9000035e:	d1f8      	bne.n	90000352 <memchr+0x62>
90000360:	2000      	movs	r0, #0
90000362:	4770      	bx	lr
90000364:	3801      	subs	r0, #1
90000366:	4770      	bx	lr
90000368:	2d00      	cmp	r5, #0
9000036a:	bf06      	itte	eq
9000036c:	4635      	moveq	r5, r6
9000036e:	3803      	subeq	r0, #3
90000370:	3807      	subne	r0, #7
90000372:	f015 0f01 	tst.w	r5, #1
90000376:	d107      	bne.n	90000388 <memchr+0x98>
90000378:	3001      	adds	r0, #1
9000037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000037e:	bf02      	ittt	eq
90000380:	3001      	addeq	r0, #1
90000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000386:	3001      	addeq	r0, #1
90000388:	bcf0      	pop	{r4, r5, r6, r7}
9000038a:	3801      	subs	r0, #1
9000038c:	4770      	bx	lr
9000038e:	bf00      	nop

90000390 <__aeabi_uldivmod>:
90000390:	b953      	cbnz	r3, 900003a8 <__aeabi_uldivmod+0x18>
90000392:	b94a      	cbnz	r2, 900003a8 <__aeabi_uldivmod+0x18>
90000394:	2900      	cmp	r1, #0
90000396:	bf08      	it	eq
90000398:	2800      	cmpeq	r0, #0
9000039a:	bf1c      	itt	ne
9000039c:	f04f 31ff 	movne.w	r1, #4294967295
900003a0:	f04f 30ff 	movne.w	r0, #4294967295
900003a4:	f000 b988 	b.w	900006b8 <__aeabi_idiv0>
900003a8:	f1ad 0c08 	sub.w	ip, sp, #8
900003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003b0:	f000 f806 	bl	900003c0 <__udivmoddi4>
900003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003bc:	b004      	add	sp, #16
900003be:	4770      	bx	lr

900003c0 <__udivmoddi4>:
900003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003c4:	9d08      	ldr	r5, [sp, #32]
900003c6:	468e      	mov	lr, r1
900003c8:	4604      	mov	r4, r0
900003ca:	4688      	mov	r8, r1
900003cc:	2b00      	cmp	r3, #0
900003ce:	d14a      	bne.n	90000466 <__udivmoddi4+0xa6>
900003d0:	428a      	cmp	r2, r1
900003d2:	4617      	mov	r7, r2
900003d4:	d962      	bls.n	9000049c <__udivmoddi4+0xdc>
900003d6:	fab2 f682 	clz	r6, r2
900003da:	b14e      	cbz	r6, 900003f0 <__udivmoddi4+0x30>
900003dc:	f1c6 0320 	rsb	r3, r6, #32
900003e0:	fa01 f806 	lsl.w	r8, r1, r6
900003e4:	fa20 f303 	lsr.w	r3, r0, r3
900003e8:	40b7      	lsls	r7, r6
900003ea:	ea43 0808 	orr.w	r8, r3, r8
900003ee:	40b4      	lsls	r4, r6
900003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003f4:	fa1f fc87 	uxth.w	ip, r7
900003f8:	fbb8 f1fe 	udiv	r1, r8, lr
900003fc:	0c23      	lsrs	r3, r4, #16
900003fe:	fb0e 8811 	mls	r8, lr, r1, r8
90000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
90000406:	fb01 f20c 	mul.w	r2, r1, ip
9000040a:	429a      	cmp	r2, r3
9000040c:	d909      	bls.n	90000422 <__udivmoddi4+0x62>
9000040e:	18fb      	adds	r3, r7, r3
90000410:	f101 30ff 	add.w	r0, r1, #4294967295
90000414:	f080 80ea 	bcs.w	900005ec <__udivmoddi4+0x22c>
90000418:	429a      	cmp	r2, r3
9000041a:	f240 80e7 	bls.w	900005ec <__udivmoddi4+0x22c>
9000041e:	3902      	subs	r1, #2
90000420:	443b      	add	r3, r7
90000422:	1a9a      	subs	r2, r3, r2
90000424:	b2a3      	uxth	r3, r4
90000426:	fbb2 f0fe 	udiv	r0, r2, lr
9000042a:	fb0e 2210 	mls	r2, lr, r0, r2
9000042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000432:	fb00 fc0c 	mul.w	ip, r0, ip
90000436:	459c      	cmp	ip, r3
90000438:	d909      	bls.n	9000044e <__udivmoddi4+0x8e>
9000043a:	18fb      	adds	r3, r7, r3
9000043c:	f100 32ff 	add.w	r2, r0, #4294967295
90000440:	f080 80d6 	bcs.w	900005f0 <__udivmoddi4+0x230>
90000444:	459c      	cmp	ip, r3
90000446:	f240 80d3 	bls.w	900005f0 <__udivmoddi4+0x230>
9000044a:	443b      	add	r3, r7
9000044c:	3802      	subs	r0, #2
9000044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000452:	eba3 030c 	sub.w	r3, r3, ip
90000456:	2100      	movs	r1, #0
90000458:	b11d      	cbz	r5, 90000462 <__udivmoddi4+0xa2>
9000045a:	40f3      	lsrs	r3, r6
9000045c:	2200      	movs	r2, #0
9000045e:	e9c5 3200 	strd	r3, r2, [r5]
90000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000466:	428b      	cmp	r3, r1
90000468:	d905      	bls.n	90000476 <__udivmoddi4+0xb6>
9000046a:	b10d      	cbz	r5, 90000470 <__udivmoddi4+0xb0>
9000046c:	e9c5 0100 	strd	r0, r1, [r5]
90000470:	2100      	movs	r1, #0
90000472:	4608      	mov	r0, r1
90000474:	e7f5      	b.n	90000462 <__udivmoddi4+0xa2>
90000476:	fab3 f183 	clz	r1, r3
9000047a:	2900      	cmp	r1, #0
9000047c:	d146      	bne.n	9000050c <__udivmoddi4+0x14c>
9000047e:	4573      	cmp	r3, lr
90000480:	d302      	bcc.n	90000488 <__udivmoddi4+0xc8>
90000482:	4282      	cmp	r2, r0
90000484:	f200 8105 	bhi.w	90000692 <__udivmoddi4+0x2d2>
90000488:	1a84      	subs	r4, r0, r2
9000048a:	eb6e 0203 	sbc.w	r2, lr, r3
9000048e:	2001      	movs	r0, #1
90000490:	4690      	mov	r8, r2
90000492:	2d00      	cmp	r5, #0
90000494:	d0e5      	beq.n	90000462 <__udivmoddi4+0xa2>
90000496:	e9c5 4800 	strd	r4, r8, [r5]
9000049a:	e7e2      	b.n	90000462 <__udivmoddi4+0xa2>
9000049c:	2a00      	cmp	r2, #0
9000049e:	f000 8090 	beq.w	900005c2 <__udivmoddi4+0x202>
900004a2:	fab2 f682 	clz	r6, r2
900004a6:	2e00      	cmp	r6, #0
900004a8:	f040 80a4 	bne.w	900005f4 <__udivmoddi4+0x234>
900004ac:	1a8a      	subs	r2, r1, r2
900004ae:	0c03      	lsrs	r3, r0, #16
900004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004b4:	b280      	uxth	r0, r0
900004b6:	b2bc      	uxth	r4, r7
900004b8:	2101      	movs	r1, #1
900004ba:	fbb2 fcfe 	udiv	ip, r2, lr
900004be:	fb0e 221c 	mls	r2, lr, ip, r2
900004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004c6:	fb04 f20c 	mul.w	r2, r4, ip
900004ca:	429a      	cmp	r2, r3
900004cc:	d907      	bls.n	900004de <__udivmoddi4+0x11e>
900004ce:	18fb      	adds	r3, r7, r3
900004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004d4:	d202      	bcs.n	900004dc <__udivmoddi4+0x11c>
900004d6:	429a      	cmp	r2, r3
900004d8:	f200 80e0 	bhi.w	9000069c <__udivmoddi4+0x2dc>
900004dc:	46c4      	mov	ip, r8
900004de:	1a9b      	subs	r3, r3, r2
900004e0:	fbb3 f2fe 	udiv	r2, r3, lr
900004e4:	fb0e 3312 	mls	r3, lr, r2, r3
900004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004ec:	fb02 f404 	mul.w	r4, r2, r4
900004f0:	429c      	cmp	r4, r3
900004f2:	d907      	bls.n	90000504 <__udivmoddi4+0x144>
900004f4:	18fb      	adds	r3, r7, r3
900004f6:	f102 30ff 	add.w	r0, r2, #4294967295
900004fa:	d202      	bcs.n	90000502 <__udivmoddi4+0x142>
900004fc:	429c      	cmp	r4, r3
900004fe:	f200 80ca 	bhi.w	90000696 <__udivmoddi4+0x2d6>
90000502:	4602      	mov	r2, r0
90000504:	1b1b      	subs	r3, r3, r4
90000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
9000050a:	e7a5      	b.n	90000458 <__udivmoddi4+0x98>
9000050c:	f1c1 0620 	rsb	r6, r1, #32
90000510:	408b      	lsls	r3, r1
90000512:	fa22 f706 	lsr.w	r7, r2, r6
90000516:	431f      	orrs	r7, r3
90000518:	fa0e f401 	lsl.w	r4, lr, r1
9000051c:	fa20 f306 	lsr.w	r3, r0, r6
90000520:	fa2e fe06 	lsr.w	lr, lr, r6
90000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000528:	4323      	orrs	r3, r4
9000052a:	fa00 f801 	lsl.w	r8, r0, r1
9000052e:	fa1f fc87 	uxth.w	ip, r7
90000532:	fbbe f0f9 	udiv	r0, lr, r9
90000536:	0c1c      	lsrs	r4, r3, #16
90000538:	fb09 ee10 	mls	lr, r9, r0, lr
9000053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000540:	fb00 fe0c 	mul.w	lr, r0, ip
90000544:	45a6      	cmp	lr, r4
90000546:	fa02 f201 	lsl.w	r2, r2, r1
9000054a:	d909      	bls.n	90000560 <__udivmoddi4+0x1a0>
9000054c:	193c      	adds	r4, r7, r4
9000054e:	f100 3aff 	add.w	sl, r0, #4294967295
90000552:	f080 809c 	bcs.w	9000068e <__udivmoddi4+0x2ce>
90000556:	45a6      	cmp	lr, r4
90000558:	f240 8099 	bls.w	9000068e <__udivmoddi4+0x2ce>
9000055c:	3802      	subs	r0, #2
9000055e:	443c      	add	r4, r7
90000560:	eba4 040e 	sub.w	r4, r4, lr
90000564:	fa1f fe83 	uxth.w	lr, r3
90000568:	fbb4 f3f9 	udiv	r3, r4, r9
9000056c:	fb09 4413 	mls	r4, r9, r3, r4
90000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000574:	fb03 fc0c 	mul.w	ip, r3, ip
90000578:	45a4      	cmp	ip, r4
9000057a:	d908      	bls.n	9000058e <__udivmoddi4+0x1ce>
9000057c:	193c      	adds	r4, r7, r4
9000057e:	f103 3eff 	add.w	lr, r3, #4294967295
90000582:	f080 8082 	bcs.w	9000068a <__udivmoddi4+0x2ca>
90000586:	45a4      	cmp	ip, r4
90000588:	d97f      	bls.n	9000068a <__udivmoddi4+0x2ca>
9000058a:	3b02      	subs	r3, #2
9000058c:	443c      	add	r4, r7
9000058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000592:	eba4 040c 	sub.w	r4, r4, ip
90000596:	fba0 ec02 	umull	lr, ip, r0, r2
9000059a:	4564      	cmp	r4, ip
9000059c:	4673      	mov	r3, lr
9000059e:	46e1      	mov	r9, ip
900005a0:	d362      	bcc.n	90000668 <__udivmoddi4+0x2a8>
900005a2:	d05f      	beq.n	90000664 <__udivmoddi4+0x2a4>
900005a4:	b15d      	cbz	r5, 900005be <__udivmoddi4+0x1fe>
900005a6:	ebb8 0203 	subs.w	r2, r8, r3
900005aa:	eb64 0409 	sbc.w	r4, r4, r9
900005ae:	fa04 f606 	lsl.w	r6, r4, r6
900005b2:	fa22 f301 	lsr.w	r3, r2, r1
900005b6:	431e      	orrs	r6, r3
900005b8:	40cc      	lsrs	r4, r1
900005ba:	e9c5 6400 	strd	r6, r4, [r5]
900005be:	2100      	movs	r1, #0
900005c0:	e74f      	b.n	90000462 <__udivmoddi4+0xa2>
900005c2:	fbb1 fcf2 	udiv	ip, r1, r2
900005c6:	0c01      	lsrs	r1, r0, #16
900005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005cc:	b280      	uxth	r0, r0
900005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005d2:	463b      	mov	r3, r7
900005d4:	4638      	mov	r0, r7
900005d6:	463c      	mov	r4, r7
900005d8:	46b8      	mov	r8, r7
900005da:	46be      	mov	lr, r7
900005dc:	2620      	movs	r6, #32
900005de:	fbb1 f1f7 	udiv	r1, r1, r7
900005e2:	eba2 0208 	sub.w	r2, r2, r8
900005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005ea:	e766      	b.n	900004ba <__udivmoddi4+0xfa>
900005ec:	4601      	mov	r1, r0
900005ee:	e718      	b.n	90000422 <__udivmoddi4+0x62>
900005f0:	4610      	mov	r0, r2
900005f2:	e72c      	b.n	9000044e <__udivmoddi4+0x8e>
900005f4:	f1c6 0220 	rsb	r2, r6, #32
900005f8:	fa2e f302 	lsr.w	r3, lr, r2
900005fc:	40b7      	lsls	r7, r6
900005fe:	40b1      	lsls	r1, r6
90000600:	fa20 f202 	lsr.w	r2, r0, r2
90000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000608:	430a      	orrs	r2, r1
9000060a:	fbb3 f8fe 	udiv	r8, r3, lr
9000060e:	b2bc      	uxth	r4, r7
90000610:	fb0e 3318 	mls	r3, lr, r8, r3
90000614:	0c11      	lsrs	r1, r2, #16
90000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000061a:	fb08 f904 	mul.w	r9, r8, r4
9000061e:	40b0      	lsls	r0, r6
90000620:	4589      	cmp	r9, r1
90000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000626:	b280      	uxth	r0, r0
90000628:	d93e      	bls.n	900006a8 <__udivmoddi4+0x2e8>
9000062a:	1879      	adds	r1, r7, r1
9000062c:	f108 3cff 	add.w	ip, r8, #4294967295
90000630:	d201      	bcs.n	90000636 <__udivmoddi4+0x276>
90000632:	4589      	cmp	r9, r1
90000634:	d81f      	bhi.n	90000676 <__udivmoddi4+0x2b6>
90000636:	eba1 0109 	sub.w	r1, r1, r9
9000063a:	fbb1 f9fe 	udiv	r9, r1, lr
9000063e:	fb09 f804 	mul.w	r8, r9, r4
90000642:	fb0e 1119 	mls	r1, lr, r9, r1
90000646:	b292      	uxth	r2, r2
90000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000064c:	4542      	cmp	r2, r8
9000064e:	d229      	bcs.n	900006a4 <__udivmoddi4+0x2e4>
90000650:	18ba      	adds	r2, r7, r2
90000652:	f109 31ff 	add.w	r1, r9, #4294967295
90000656:	d2c4      	bcs.n	900005e2 <__udivmoddi4+0x222>
90000658:	4542      	cmp	r2, r8
9000065a:	d2c2      	bcs.n	900005e2 <__udivmoddi4+0x222>
9000065c:	f1a9 0102 	sub.w	r1, r9, #2
90000660:	443a      	add	r2, r7
90000662:	e7be      	b.n	900005e2 <__udivmoddi4+0x222>
90000664:	45f0      	cmp	r8, lr
90000666:	d29d      	bcs.n	900005a4 <__udivmoddi4+0x1e4>
90000668:	ebbe 0302 	subs.w	r3, lr, r2
9000066c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000670:	3801      	subs	r0, #1
90000672:	46e1      	mov	r9, ip
90000674:	e796      	b.n	900005a4 <__udivmoddi4+0x1e4>
90000676:	eba7 0909 	sub.w	r9, r7, r9
9000067a:	4449      	add	r1, r9
9000067c:	f1a8 0c02 	sub.w	ip, r8, #2
90000680:	fbb1 f9fe 	udiv	r9, r1, lr
90000684:	fb09 f804 	mul.w	r8, r9, r4
90000688:	e7db      	b.n	90000642 <__udivmoddi4+0x282>
9000068a:	4673      	mov	r3, lr
9000068c:	e77f      	b.n	9000058e <__udivmoddi4+0x1ce>
9000068e:	4650      	mov	r0, sl
90000690:	e766      	b.n	90000560 <__udivmoddi4+0x1a0>
90000692:	4608      	mov	r0, r1
90000694:	e6fd      	b.n	90000492 <__udivmoddi4+0xd2>
90000696:	443b      	add	r3, r7
90000698:	3a02      	subs	r2, #2
9000069a:	e733      	b.n	90000504 <__udivmoddi4+0x144>
9000069c:	f1ac 0c02 	sub.w	ip, ip, #2
900006a0:	443b      	add	r3, r7
900006a2:	e71c      	b.n	900004de <__udivmoddi4+0x11e>
900006a4:	4649      	mov	r1, r9
900006a6:	e79c      	b.n	900005e2 <__udivmoddi4+0x222>
900006a8:	eba1 0109 	sub.w	r1, r1, r9
900006ac:	46c4      	mov	ip, r8
900006ae:	fbb1 f9fe 	udiv	r9, r1, lr
900006b2:	fb09 f804 	mul.w	r8, r9, r4
900006b6:	e7c4      	b.n	90000642 <__udivmoddi4+0x282>

900006b8 <__aeabi_idiv0>:
900006b8:	4770      	bx	lr
900006ba:	bf00      	nop

900006bc <clearInput>:
#include "appLogic.h"

uint32_t lastCursorTime = 0;

void clearInput(AppContext *ctx) {
900006bc:	b480      	push	{r7}
900006be:	b083      	sub	sp, #12
900006c0:	af00      	add	r7, sp, #0
900006c2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006c4:	687b      	ldr	r3, [r7, #4]
900006c6:	2200      	movs	r2, #0
900006c8:	809a      	strh	r2, [r3, #4]
}
900006ca:	bf00      	nop
900006cc:	370c      	adds	r7, #12
900006ce:	46bd      	mov	sp, r7
900006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006d4:	4770      	bx	lr

900006d6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006d6:	b480      	push	{r7}
900006d8:	b083      	sub	sp, #12
900006da:	af00      	add	r7, sp, #0
900006dc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006de:	687b      	ldr	r3, [r7, #4]
900006e0:	2200      	movs	r2, #0
900006e2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006e4:	687b      	ldr	r3, [r7, #4]
900006e6:	2200      	movs	r2, #0
900006e8:	719a      	strb	r2, [r3, #6]
}
900006ea:	bf00      	nop
900006ec:	370c      	adds	r7, #12
900006ee:	46bd      	mov	sp, r7
900006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006f4:	4770      	bx	lr
	...

900006f8 <backspace>:

void backspace(AppContext *ctx) {
900006f8:	b480      	push	{r7}
900006fa:	b083      	sub	sp, #12
900006fc:	af00      	add	r7, sp, #0
900006fe:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
90000700:	687b      	ldr	r3, [r7, #4]
90000702:	889b      	ldrh	r3, [r3, #4]
90000704:	4a06      	ldr	r2, [pc, #24]	@ (90000720 <backspace+0x28>)
90000706:	fba2 2303 	umull	r2, r3, r2, r3
9000070a:	08db      	lsrs	r3, r3, #3
9000070c:	b29a      	uxth	r2, r3
9000070e:	687b      	ldr	r3, [r7, #4]
90000710:	809a      	strh	r2, [r3, #4]
}
90000712:	bf00      	nop
90000714:	370c      	adds	r7, #12
90000716:	46bd      	mov	sp, r7
90000718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000071c:	4770      	bx	lr
9000071e:	bf00      	nop
90000720:	cccccccd 	.word	0xcccccccd

90000724 <stopPWM>:

void stopPWM(AppContext *ctx) {
90000724:	b480      	push	{r7}
90000726:	b083      	sub	sp, #12
90000728:	af00      	add	r7, sp, #0
9000072a:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = false;
9000072c:	687b      	ldr	r3, [r7, #4]
9000072e:	2200      	movs	r2, #0
90000730:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
  // TODO callbakc
}
90000732:	bf00      	nop
90000734:	370c      	adds	r7, #12
90000736:	46bd      	mov	sp, r7
90000738:	f85d 7b04 	ldr.w	r7, [sp], #4
9000073c:	4770      	bx	lr

9000073e <startPWM>:

void startPWM(AppContext *ctx) {
9000073e:	b480      	push	{r7}
90000740:	b083      	sub	sp, #12
90000742:	af00      	add	r7, sp, #0
90000744:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = true;
90000746:	687b      	ldr	r3, [r7, #4]
90000748:	2201      	movs	r2, #1
9000074a:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ctx->voltage / 4);
  // TODO callbakc
}
9000074c:	bf00      	nop
9000074e:	370c      	adds	r7, #12
90000750:	46bd      	mov	sp, r7
90000752:	f85d 7b04 	ldr.w	r7, [sp], #4
90000756:	4770      	bx	lr

90000758 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000758:	b480      	push	{r7}
9000075a:	b083      	sub	sp, #12
9000075c:	af00      	add	r7, sp, #0
9000075e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
90000760:	687b      	ldr	r3, [r7, #4]
90000762:	2201      	movs	r2, #1
90000764:	701a      	strb	r2, [r3, #0]
}
90000766:	bf00      	nop
90000768:	370c      	adds	r7, #12
9000076a:	46bd      	mov	sp, r7
9000076c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000770:	4770      	bx	lr

90000772 <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
90000772:	b480      	push	{r7}
90000774:	b083      	sub	sp, #12
90000776:	af00      	add	r7, sp, #0
90000778:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
9000077a:	687b      	ldr	r3, [r7, #4]
9000077c:	2200      	movs	r2, #0
9000077e:	701a      	strb	r2, [r3, #0]
}
90000780:	bf00      	nop
90000782:	370c      	adds	r7, #12
90000784:	46bd      	mov	sp, r7
90000786:	f85d 7b04 	ldr.w	r7, [sp], #4
9000078a:	4770      	bx	lr

9000078c <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
9000078c:	b580      	push	{r7, lr}
9000078e:	b082      	sub	sp, #8
90000790:	af00      	add	r7, sp, #0
90000792:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
90000794:	687b      	ldr	r3, [r7, #4]
90000796:	889b      	ldrh	r3, [r3, #4]
90000798:	2b4f      	cmp	r3, #79	@ 0x4f
9000079a:	d904      	bls.n	900007a6 <validateAndSetVoltage+0x1a>
9000079c:	687b      	ldr	r3, [r7, #4]
9000079e:	889b      	ldrh	r3, [r3, #4]
900007a0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
900007a4:	d90c      	bls.n	900007c0 <validateAndSetVoltage+0x34>
  {
    strcpy(ctx->message, "Input voltage has to be in range 80 - 400. Resetting, try again!");
900007a6:	687b      	ldr	r3, [r7, #4]
900007a8:	3309      	adds	r3, #9
900007aa:	4a10      	ldr	r2, [pc, #64]	@ (900007ec <validateAndSetVoltage+0x60>)
900007ac:	4618      	mov	r0, r3
900007ae:	4611      	mov	r1, r2
900007b0:	2341      	movs	r3, #65	@ 0x41
900007b2:	461a      	mov	r2, r3
900007b4:	f00c f8b3 	bl	9000c91e <memcpy>
    clearInput(ctx);
900007b8:	6878      	ldr	r0, [r7, #4]
900007ba:	f7ff ff7f 	bl	900006bc <clearInput>
    return;
900007be:	e012      	b.n	900007e6 <validateAndSetVoltage+0x5a>
  }
  ctx->isVoltageEntered = true;
900007c0:	687b      	ldr	r3, [r7, #4]
900007c2:	2201      	movs	r2, #1
900007c4:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
900007c6:	687b      	ldr	r3, [r7, #4]
900007c8:	889a      	ldrh	r2, [r3, #4]
900007ca:	687b      	ldr	r3, [r7, #4]
900007cc:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
900007ce:	687b      	ldr	r3, [r7, #4]
900007d0:	2200      	movs	r2, #0
900007d2:	809a      	strh	r2, [r3, #4]
  sprintf(ctx->message, "Voltage %d has been successfully entered", ctx->voltage);
900007d4:	687b      	ldr	r3, [r7, #4]
900007d6:	f103 0009 	add.w	r0, r3, #9
900007da:	687b      	ldr	r3, [r7, #4]
900007dc:	885b      	ldrh	r3, [r3, #2]
900007de:	461a      	mov	r2, r3
900007e0:	4903      	ldr	r1, [pc, #12]	@ (900007f0 <validateAndSetVoltage+0x64>)
900007e2:	f00b ff17 	bl	9000c614 <siprintf>

}
900007e6:	3708      	adds	r7, #8
900007e8:	46bd      	mov	sp, r7
900007ea:	bd80      	pop	{r7, pc}
900007ec:	9000d534 	.word	0x9000d534
900007f0:	9000d578 	.word	0x9000d578

900007f4 <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
900007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
900007f6:	b085      	sub	sp, #20
900007f8:	af00      	add	r7, sp, #0
900007fa:	6078      	str	r0, [r7, #4]
900007fc:	460b      	mov	r3, r1
900007fe:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
90000800:	78fb      	ldrb	r3, [r7, #3]
90000802:	3b30      	subs	r3, #48	@ 0x30
90000804:	73fb      	strb	r3, [r7, #15]
  ctx->inputValue = ctx->inputValue * 10 + digit;
90000806:	687b      	ldr	r3, [r7, #4]
90000808:	889b      	ldrh	r3, [r3, #4]
9000080a:	461a      	mov	r2, r3
9000080c:	0092      	lsls	r2, r2, #2
9000080e:	4413      	add	r3, r2
90000810:	005b      	lsls	r3, r3, #1
90000812:	b29a      	uxth	r2, r3
90000814:	7bfb      	ldrb	r3, [r7, #15]
90000816:	b29b      	uxth	r3, r3
90000818:	4413      	add	r3, r2
9000081a:	b29a      	uxth	r2, r3
9000081c:	687b      	ldr	r3, [r7, #4]
9000081e:	809a      	strh	r2, [r3, #4]
  if (ctx->inputValue > 400) {
90000820:	687b      	ldr	r3, [r7, #4]
90000822:	889b      	ldrh	r3, [r3, #4]
90000824:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000828:	d91c      	bls.n	90000864 <updateInput+0x70>
    strcpy(ctx->message, "Input set too high, resetting. Try again");
9000082a:	687b      	ldr	r3, [r7, #4]
9000082c:	3309      	adds	r3, #9
9000082e:	4a0f      	ldr	r2, [pc, #60]	@ (9000086c <updateInput+0x78>)
90000830:	4614      	mov	r4, r2
90000832:	469c      	mov	ip, r3
90000834:	f104 0e20 	add.w	lr, r4, #32
90000838:	4665      	mov	r5, ip
9000083a:	4626      	mov	r6, r4
9000083c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
9000083e:	6028      	str	r0, [r5, #0]
90000840:	6069      	str	r1, [r5, #4]
90000842:	60aa      	str	r2, [r5, #8]
90000844:	60eb      	str	r3, [r5, #12]
90000846:	3410      	adds	r4, #16
90000848:	f10c 0c10 	add.w	ip, ip, #16
9000084c:	4574      	cmp	r4, lr
9000084e:	d1f3      	bne.n	90000838 <updateInput+0x44>
90000850:	4662      	mov	r2, ip
90000852:	4623      	mov	r3, r4
90000854:	cb03      	ldmia	r3!, {r0, r1}
90000856:	6010      	str	r0, [r2, #0]
90000858:	6051      	str	r1, [r2, #4]
9000085a:	781b      	ldrb	r3, [r3, #0]
9000085c:	7213      	strb	r3, [r2, #8]
    clearInput(ctx);
9000085e:	6878      	ldr	r0, [r7, #4]
90000860:	f7ff ff2c 	bl	900006bc <clearInput>
  }
}
90000864:	bf00      	nop
90000866:	3714      	adds	r7, #20
90000868:	46bd      	mov	sp, r7
9000086a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000086c:	9000d5a4 	.word	0x9000d5a4

90000870 <handle_event>:

bool handle_event(AppContext *ctx, KeyboardButton key)
{
90000870:	b580      	push	{r7, lr}
90000872:	b084      	sub	sp, #16
90000874:	af00      	add	r7, sp, #0
90000876:	6078      	str	r0, [r7, #4]
90000878:	460b      	mov	r3, r1
9000087a:	70fb      	strb	r3, [r7, #3]
  if (key == KEY_NULL)
9000087c:	78fb      	ldrb	r3, [r7, #3]
9000087e:	2b4e      	cmp	r3, #78	@ 0x4e
90000880:	d11f      	bne.n	900008c2 <handle_event+0x52>
  {
	  // cursor logic
	  uint32_t now = HAL_GetTick();
90000882:	f002 fd27 	bl	900032d4 <HAL_GetTick>
90000886:	60f8      	str	r0, [r7, #12]
	  if (now - lastCursorTime > 500)
90000888:	4b39      	ldr	r3, [pc, #228]	@ (90000970 <handle_event+0x100>)
9000088a:	681b      	ldr	r3, [r3, #0]
9000088c:	68fa      	ldr	r2, [r7, #12]
9000088e:	1ad3      	subs	r3, r2, r3
90000890:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
90000894:	d913      	bls.n	900008be <handle_event+0x4e>
	  {
		  ctx->displayCursor = !ctx->displayCursor;
90000896:	687b      	ldr	r3, [r7, #4]
90000898:	7a1b      	ldrb	r3, [r3, #8]
9000089a:	2b00      	cmp	r3, #0
9000089c:	bf14      	ite	ne
9000089e:	2301      	movne	r3, #1
900008a0:	2300      	moveq	r3, #0
900008a2:	b2db      	uxtb	r3, r3
900008a4:	f083 0301 	eor.w	r3, r3, #1
900008a8:	b2db      	uxtb	r3, r3
900008aa:	f003 0301 	and.w	r3, r3, #1
900008ae:	b2da      	uxtb	r2, r3
900008b0:	687b      	ldr	r3, [r7, #4]
900008b2:	721a      	strb	r2, [r3, #8]
		  lastCursorTime = now;
900008b4:	4a2e      	ldr	r2, [pc, #184]	@ (90000970 <handle_event+0x100>)
900008b6:	68fb      	ldr	r3, [r7, #12]
900008b8:	6013      	str	r3, [r2, #0]
		  return true;
900008ba:	2301      	movs	r3, #1
900008bc:	e053      	b.n	90000966 <handle_event+0xf6>
	  }
	  return false;
900008be:	2300      	movs	r3, #0
900008c0:	e051      	b.n	90000966 <handle_event+0xf6>
  }
  strcpy(ctx->message, "");
900008c2:	687b      	ldr	r3, [r7, #4]
900008c4:	3309      	adds	r3, #9
900008c6:	2200      	movs	r2, #0
900008c8:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
900008ca:	687b      	ldr	r3, [r7, #4]
900008cc:	781b      	ldrb	r3, [r3, #0]
900008ce:	2b00      	cmp	r3, #0
900008d0:	d13e      	bne.n	90000950 <handle_event+0xe0>
	if (ctx->isPwmRunning == true)
900008d2:	687b      	ldr	r3, [r7, #4]
900008d4:	79db      	ldrb	r3, [r3, #7]
900008d6:	2b00      	cmp	r3, #0
900008d8:	d007      	beq.n	900008ea <handle_event+0x7a>
	{
	  if (key == KEY_Stop) stopPWM(ctx);
900008da:	78fb      	ldrb	r3, [r7, #3]
900008dc:	2b73      	cmp	r3, #115	@ 0x73
900008de:	d102      	bne.n	900008e6 <handle_event+0x76>
900008e0:	6878      	ldr	r0, [r7, #4]
900008e2:	f7ff ff1f 	bl	90000724 <stopPWM>
	  return false; // when PWM is running, we can only press the "STOP" button
900008e6:	2300      	movs	r3, #0
900008e8:	e03d      	b.n	90000966 <handle_event+0xf6>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
900008ea:	687b      	ldr	r3, [r7, #4]
900008ec:	799b      	ldrb	r3, [r3, #6]
900008ee:	2b00      	cmp	r3, #0
900008f0:	d005      	beq.n	900008fe <handle_event+0x8e>
	{
	  if (key == KEY_Start) startPWM(ctx);
900008f2:	78fb      	ldrb	r3, [r7, #3]
900008f4:	2b53      	cmp	r3, #83	@ 0x53
900008f6:	d102      	bne.n	900008fe <handle_event+0x8e>
900008f8:	6878      	ldr	r0, [r7, #4]
900008fa:	f7ff ff20 	bl	9000073e <startPWM>
	}

	if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
900008fe:	78fb      	ldrb	r3, [r7, #3]
90000900:	2b2f      	cmp	r3, #47	@ 0x2f
90000902:	d907      	bls.n	90000914 <handle_event+0xa4>
90000904:	78fb      	ldrb	r3, [r7, #3]
90000906:	2b39      	cmp	r3, #57	@ 0x39
90000908:	d804      	bhi.n	90000914 <handle_event+0xa4>
9000090a:	78fb      	ldrb	r3, [r7, #3]
9000090c:	4619      	mov	r1, r3
9000090e:	6878      	ldr	r0, [r7, #4]
90000910:	f7ff ff70 	bl	900007f4 <updateInput>
	if (key == KEY_Clear) clearVoltage(ctx);
90000914:	78fb      	ldrb	r3, [r7, #3]
90000916:	2b63      	cmp	r3, #99	@ 0x63
90000918:	d102      	bne.n	90000920 <handle_event+0xb0>
9000091a:	6878      	ldr	r0, [r7, #4]
9000091c:	f7ff fedb 	bl	900006d6 <clearVoltage>
	if (key == KEY_Enter) validateAndSetVoltage(ctx);
90000920:	78fb      	ldrb	r3, [r7, #3]
90000922:	2b65      	cmp	r3, #101	@ 0x65
90000924:	d102      	bne.n	9000092c <handle_event+0xbc>
90000926:	6878      	ldr	r0, [r7, #4]
90000928:	f7ff ff30 	bl	9000078c <validateAndSetVoltage>
	if (key == KEY_BkSp) backspace(ctx);
9000092c:	78fb      	ldrb	r3, [r7, #3]
9000092e:	2b62      	cmp	r3, #98	@ 0x62
90000930:	d102      	bne.n	90000938 <handle_event+0xc8>
90000932:	6878      	ldr	r0, [r7, #4]
90000934:	f7ff fee0 	bl	900006f8 <backspace>
	if (key == KEY_F2) setSTATE_F2(ctx);
90000938:	78fb      	ldrb	r3, [r7, #3]
9000093a:	2b40      	cmp	r3, #64	@ 0x40
9000093c:	d102      	bne.n	90000944 <handle_event+0xd4>
9000093e:	6878      	ldr	r0, [r7, #4]
90000940:	f7ff ff0a 	bl	90000758 <setSTATE_F2>
	if (key == KEY_ESC) clearInput(ctx);
90000944:	78fb      	ldrb	r3, [r7, #3]
90000946:	2b60      	cmp	r3, #96	@ 0x60
90000948:	d102      	bne.n	90000950 <handle_event+0xe0>
9000094a:	6878      	ldr	r0, [r7, #4]
9000094c:	f7ff feb6 	bl	900006bc <clearInput>
  }

  if (ctx->currentState == STATE_F2) {
90000950:	687b      	ldr	r3, [r7, #4]
90000952:	781b      	ldrb	r3, [r3, #0]
90000954:	2b01      	cmp	r3, #1
90000956:	d105      	bne.n	90000964 <handle_event+0xf4>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000958:	78fb      	ldrb	r3, [r7, #3]
9000095a:	2b21      	cmp	r3, #33	@ 0x21
9000095c:	d102      	bne.n	90000964 <handle_event+0xf4>
9000095e:	6878      	ldr	r0, [r7, #4]
90000960:	f7ff ff07 	bl	90000772 <setSTATE_F1>
  }
  return true;
90000964:	2301      	movs	r3, #1
}
90000966:	4618      	mov	r0, r3
90000968:	3710      	adds	r7, #16
9000096a:	46bd      	mov	sp, r7
9000096c:	bd80      	pop	{r7, pc}
9000096e:	bf00      	nop
90000970:	200000ec 	.word	0x200000ec

90000974 <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
90000974:	b480      	push	{r7}
90000976:	b083      	sub	sp, #12
90000978:	af00      	add	r7, sp, #0
9000097a:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
9000097c:	687b      	ldr	r3, [r7, #4]
9000097e:	2200      	movs	r2, #0
90000980:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
90000982:	687b      	ldr	r3, [r7, #4]
90000984:	2200      	movs	r2, #0
90000986:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
90000988:	687b      	ldr	r3, [r7, #4]
9000098a:	2200      	movs	r2, #0
9000098c:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
9000098e:	687b      	ldr	r3, [r7, #4]
90000990:	2200      	movs	r2, #0
90000992:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
90000994:	687b      	ldr	r3, [r7, #4]
90000996:	2200      	movs	r2, #0
90000998:	809a      	strh	r2, [r3, #4]
}
9000099a:	bf00      	nop
9000099c:	370c      	adds	r7, #12
9000099e:	46bd      	mov	sp, r7
900009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900009a4:	4770      	bx	lr
	...

900009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900009a8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 900009e4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900009ac:	f002 fbec 	bl	90003188 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900009b0:	f002 fb88 	bl	900030c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900009b4:	480c      	ldr	r0, [pc, #48]	@ (900009e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900009b6:	490d      	ldr	r1, [pc, #52]	@ (900009ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900009b8:	4a0d      	ldr	r2, [pc, #52]	@ (900009f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
900009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
900009bc:	e002      	b.n	900009c4 <LoopCopyDataInit>

900009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900009c2:	3304      	adds	r3, #4

900009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
900009c8:	d3f9      	bcc.n	900009be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900009ca:	4a0a      	ldr	r2, [pc, #40]	@ (900009f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900009cc:	4c0a      	ldr	r4, [pc, #40]	@ (900009f8 <LoopFillZerobss+0x22>)
  movs r3, #0
900009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
900009d0:	e001      	b.n	900009d6 <LoopFillZerobss>

900009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900009d4:	3204      	adds	r2, #4

900009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
900009d8:	d3fb      	bcc.n	900009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
900009da:	f00b ff79 	bl	9000c8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900009de:	f000 f827 	bl	90000a30 <main>
  bx  lr
900009e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900009e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
900009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
900009ec:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
900009f0:	9000fc18 	.word	0x9000fc18
  ldr r2, =_sbss
900009f4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
900009f8:	200014a0 	.word	0x200014a0

900009fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900009fc:	e7fe      	b.n	900009fc <ADC3_IRQHandler>
	...

90000a00 <__io_putchar>:
static void Error_Handler(void);
static void CPU_CACHE_Enable(void);
static void MPU_Config(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
90000a00:	b580      	push	{r7, lr}
90000a02:	b082      	sub	sp, #8
90000a04:	af00      	add	r7, sp, #0
90000a06:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
90000a08:	1d39      	adds	r1, r7, #4
90000a0a:	f04f 33ff 	mov.w	r3, #4294967295
90000a0e:	2201      	movs	r2, #1
90000a10:	4806      	ldr	r0, [pc, #24]	@ (90000a2c <__io_putchar+0x2c>)
90000a12:	f009 f973 	bl	90009cfc <HAL_UART_Transmit>
90000a16:	4603      	mov	r3, r0
90000a18:	2b00      	cmp	r3, #0
90000a1a:	d002      	beq.n	90000a22 <__io_putchar+0x22>
    return -1;
90000a1c:	f04f 33ff 	mov.w	r3, #4294967295
90000a20:	e000      	b.n	90000a24 <__io_putchar+0x24>
  }
  return ch;
90000a22:	687b      	ldr	r3, [r7, #4]
}
90000a24:	4618      	mov	r0, r3
90000a26:	3708      	adds	r7, #8
90000a28:	46bd      	mov	sp, r7
90000a2a:	bd80      	pop	{r7, pc}
90000a2c:	200000f0 	.word	0x200000f0

90000a30 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000a30:	b580      	push	{r7, lr}
90000a32:	b096      	sub	sp, #88	@ 0x58
90000a34:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000a36:	f000 fa8b 	bl	90000f50 <MPU_Config>
  CPU_CACHE_Enable();
90000a3a:	f000 f9f7 	bl	90000e2c <CPU_CACHE_Enable>
  HAL_Init();
90000a3e:	f002 fbbb 	bl	900031b8 <HAL_Init>
  SystemClock_Config();
90000a42:	f000 f8ef 	bl	90000c24 <SystemClock_Config>
  MX_USART3_UART_Init();
90000a46:	f000 f833 	bl	90000ab0 <MX_USART3_UART_Init>
  
  printf("Starting...\r\n");
90000a4a:	4818      	ldr	r0, [pc, #96]	@ (90000aac <main+0x7c>)
90000a4c:	f00b fdda 	bl	9000c604 <puts>

  AppContext ctx;
  InitializeAppContext(&ctx);
90000a50:	1d3b      	adds	r3, r7, #4
90000a52:	4618      	mov	r0, r3
90000a54:	f7ff ff8e 	bl	90000974 <InitializeAppContext>

  InitializeLcd();
90000a58:	f000 fc1a 	bl	90001290 <InitializeLcd>
  UartClearScreen();
90000a5c:	f000 fc56 	bl	9000130c <UartClearScreen>

  InitFlexiKeyboard(); // has to be AFTER InitializeLcd, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a60:	f00a ff2e 	bl	9000b8c0 <InitFlexiKeyboard>

  while (1)
  {
	  HAL_Delay(200);
90000a64:	20c8      	movs	r0, #200	@ 0xc8
90000a66:	f002 fc41 	bl	900032ec <HAL_Delay>
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000a6a:	f00a febf 	bl	9000b7ec <ReadFlexiKeyboard>
90000a6e:	4603      	mov	r3, r0
90000a70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  bool ctxChanged = handle_event(&ctx, key);
90000a74:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
90000a78:	1d3b      	adds	r3, r7, #4
90000a7a:	4611      	mov	r1, r2
90000a7c:	4618      	mov	r0, r3
90000a7e:	f7ff fef7 	bl	90000870 <handle_event>
90000a82:	4603      	mov	r3, r0
90000a84:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	  if (!ctxChanged) continue;
90000a88:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
90000a8c:	f083 0301 	eor.w	r3, r3, #1
90000a90:	b2db      	uxtb	r3, r3
90000a92:	2b00      	cmp	r3, #0
90000a94:	d108      	bne.n	90000aa8 <main+0x78>
	  UartRenderState(&ctx);
90000a96:	1d3b      	adds	r3, r7, #4
90000a98:	4618      	mov	r0, r3
90000a9a:	f000 fc45 	bl	90001328 <UartRenderState>
	  DisplayRenderState(&ctx);
90000a9e:	1d3b      	adds	r3, r7, #4
90000aa0:	4618      	mov	r0, r3
90000aa2:	f000 fc9b 	bl	900013dc <DisplayRenderState>
90000aa6:	e7dd      	b.n	90000a64 <main+0x34>
	  if (!ctxChanged) continue;
90000aa8:	bf00      	nop
  {
90000aaa:	e7db      	b.n	90000a64 <main+0x34>
90000aac:	9000d5d0 	.word	0x9000d5d0

90000ab0 <MX_USART3_UART_Init>:
  }
}

static void MX_USART3_UART_Init(void)
{
90000ab0:	b580      	push	{r7, lr}
90000ab2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000ab4:	4b22      	ldr	r3, [pc, #136]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000ab6:	4a23      	ldr	r2, [pc, #140]	@ (90000b44 <MX_USART3_UART_Init+0x94>)
90000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000aba:	4b21      	ldr	r3, [pc, #132]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000ac4:	2200      	movs	r2, #0
90000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000aca:	2200      	movs	r2, #0
90000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000ace:	4b1c      	ldr	r3, [pc, #112]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000ad0:	2200      	movs	r2, #0
90000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000ad4:	4b1a      	ldr	r3, [pc, #104]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000ad6:	220c      	movs	r2, #12
90000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000ada:	4b19      	ldr	r3, [pc, #100]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000adc:	2200      	movs	r2, #0
90000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000ae0:	4b17      	ldr	r3, [pc, #92]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000ae2:	2200      	movs	r2, #0
90000ae4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000ae6:	4b16      	ldr	r3, [pc, #88]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000ae8:	2200      	movs	r2, #0
90000aea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000aec:	4b14      	ldr	r3, [pc, #80]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000aee:	2200      	movs	r2, #0
90000af0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000af2:	4b13      	ldr	r3, [pc, #76]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000af4:	2200      	movs	r2, #0
90000af6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000af8:	4811      	ldr	r0, [pc, #68]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000afa:	f009 f8af 	bl	90009c5c <HAL_UART_Init>
90000afe:	4603      	mov	r3, r0
90000b00:	2b00      	cmp	r3, #0
90000b02:	d001      	beq.n	90000b08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000b04:	f000 f88a 	bl	90000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b08:	2100      	movs	r1, #0
90000b0a:	480d      	ldr	r0, [pc, #52]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000b0c:	f00a f945 	bl	9000ad9a <HAL_UARTEx_SetTxFifoThreshold>
90000b10:	4603      	mov	r3, r0
90000b12:	2b00      	cmp	r3, #0
90000b14:	d001      	beq.n	90000b1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000b16:	f000 f881 	bl	90000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b1a:	2100      	movs	r1, #0
90000b1c:	4808      	ldr	r0, [pc, #32]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000b1e:	f00a f97a 	bl	9000ae16 <HAL_UARTEx_SetRxFifoThreshold>
90000b22:	4603      	mov	r3, r0
90000b24:	2b00      	cmp	r3, #0
90000b26:	d001      	beq.n	90000b2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000b28:	f000 f878 	bl	90000c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000b2c:	4804      	ldr	r0, [pc, #16]	@ (90000b40 <MX_USART3_UART_Init+0x90>)
90000b2e:	f00a f8fb 	bl	9000ad28 <HAL_UARTEx_DisableFifoMode>
90000b32:	4603      	mov	r3, r0
90000b34:	2b00      	cmp	r3, #0
90000b36:	d001      	beq.n	90000b3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000b38:	f000 f870 	bl	90000c1c <Error_Handler>
  }
}
90000b3c:	bf00      	nop
90000b3e:	bd80      	pop	{r7, pc}
90000b40:	200000f0 	.word	0x200000f0
90000b44:	40004800 	.word	0x40004800

90000b48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000b48:	b580      	push	{r7, lr}
90000b4a:	b0ba      	sub	sp, #232	@ 0xe8
90000b4c:	af00      	add	r7, sp, #0
90000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000b54:	2200      	movs	r2, #0
90000b56:	601a      	str	r2, [r3, #0]
90000b58:	605a      	str	r2, [r3, #4]
90000b5a:	609a      	str	r2, [r3, #8]
90000b5c:	60da      	str	r2, [r3, #12]
90000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b60:	f107 0310 	add.w	r3, r7, #16
90000b64:	22c0      	movs	r2, #192	@ 0xc0
90000b66:	2100      	movs	r1, #0
90000b68:	4618      	mov	r0, r3
90000b6a:	f00b fe4d 	bl	9000c808 <memset>
  if(huart->Instance==USART3)
90000b6e:	687b      	ldr	r3, [r7, #4]
90000b70:	681b      	ldr	r3, [r3, #0]
90000b72:	4a27      	ldr	r2, [pc, #156]	@ (90000c10 <HAL_UART_MspInit+0xc8>)
90000b74:	4293      	cmp	r3, r2
90000b76:	d146      	bne.n	90000c06 <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000b78:	f04f 0202 	mov.w	r2, #2
90000b7c:	f04f 0300 	mov.w	r3, #0
90000b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000b84:	2300      	movs	r3, #0
90000b86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000b8a:	f107 0310 	add.w	r3, r7, #16
90000b8e:	4618      	mov	r0, r3
90000b90:	f007 f82e 	bl	90007bf0 <HAL_RCCEx_PeriphCLKConfig>
90000b94:	4603      	mov	r3, r0
90000b96:	2b00      	cmp	r3, #0
90000b98:	d001      	beq.n	90000b9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000b9a:	f000 f83f 	bl	90000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (90000c14 <HAL_UART_MspInit+0xcc>)
90000ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000ba4:	4a1b      	ldr	r2, [pc, #108]	@ (90000c14 <HAL_UART_MspInit+0xcc>)
90000ba6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000baa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000bae:	4b19      	ldr	r3, [pc, #100]	@ (90000c14 <HAL_UART_MspInit+0xcc>)
90000bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000bb8:	60fb      	str	r3, [r7, #12]
90000bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000bbc:	4b15      	ldr	r3, [pc, #84]	@ (90000c14 <HAL_UART_MspInit+0xcc>)
90000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000bc2:	4a14      	ldr	r2, [pc, #80]	@ (90000c14 <HAL_UART_MspInit+0xcc>)
90000bc4:	f043 0302 	orr.w	r3, r3, #2
90000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000bcc:	4b11      	ldr	r3, [pc, #68]	@ (90000c14 <HAL_UART_MspInit+0xcc>)
90000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000bd2:	f003 0302 	and.w	r3, r3, #2
90000bd6:	60bb      	str	r3, [r7, #8]
90000bd8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000bda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000be2:	2302      	movs	r3, #2
90000be4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000be8:	2300      	movs	r3, #0
90000bea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000bee:	2300      	movs	r3, #0
90000bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000bf4:	2307      	movs	r3, #7
90000bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000bfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000bfe:	4619      	mov	r1, r3
90000c00:	4805      	ldr	r0, [pc, #20]	@ (90000c18 <HAL_UART_MspInit+0xd0>)
90000c02:	f003 f811 	bl	90003c28 <HAL_GPIO_Init>
  }
}
90000c06:	bf00      	nop
90000c08:	37e8      	adds	r7, #232	@ 0xe8
90000c0a:	46bd      	mov	sp, r7
90000c0c:	bd80      	pop	{r7, pc}
90000c0e:	bf00      	nop
90000c10:	40004800 	.word	0x40004800
90000c14:	58024400 	.word	0x58024400
90000c18:	58020400 	.word	0x58020400

90000c1c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000c1c:	b480      	push	{r7}
90000c1e:	af00      	add	r7, sp, #0
  while(1)
90000c20:	bf00      	nop
90000c22:	e7fd      	b.n	90000c20 <Error_Handler+0x4>

90000c24 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000c24:	b580      	push	{r7, lr}
90000c26:	b0ce      	sub	sp, #312	@ 0x138
90000c28:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000c2a:	2300      	movs	r3, #0
90000c2c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c38:	2200      	movs	r2, #0
90000c3a:	601a      	str	r2, [r3, #0]
90000c3c:	4b78      	ldr	r3, [pc, #480]	@ (90000e20 <SystemClock_Config+0x1fc>)
90000c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c40:	4a77      	ldr	r2, [pc, #476]	@ (90000e20 <SystemClock_Config+0x1fc>)
90000c42:	f023 0301 	bic.w	r3, r3, #1
90000c46:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000c48:	4b75      	ldr	r3, [pc, #468]	@ (90000e20 <SystemClock_Config+0x1fc>)
90000c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c4c:	f003 0201 	and.w	r2, r3, #1
90000c50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c58:	601a      	str	r2, [r3, #0]
90000c5a:	4b72      	ldr	r3, [pc, #456]	@ (90000e24 <SystemClock_Config+0x200>)
90000c5c:	699b      	ldr	r3, [r3, #24]
90000c5e:	4a71      	ldr	r2, [pc, #452]	@ (90000e24 <SystemClock_Config+0x200>)
90000c60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000c64:	6193      	str	r3, [r2, #24]
90000c66:	4b6f      	ldr	r3, [pc, #444]	@ (90000e24 <SystemClock_Config+0x200>)
90000c68:	699b      	ldr	r3, [r3, #24]
90000c6a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000c6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c72:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c76:	601a      	str	r2, [r3, #0]
90000c78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c80:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000c82:	bf00      	nop
90000c84:	4b67      	ldr	r3, [pc, #412]	@ (90000e24 <SystemClock_Config+0x200>)
90000c86:	699b      	ldr	r3, [r3, #24]
90000c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000c90:	d1f8      	bne.n	90000c84 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000c92:	2301      	movs	r3, #1
90000c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000ca0:	2300      	movs	r3, #0
90000ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000ca6:	2300      	movs	r3, #0
90000ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000cac:	2302      	movs	r3, #2
90000cae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000cb2:	2302      	movs	r3, #2
90000cb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000cb8:	2305      	movs	r3, #5
90000cba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000cbe:	23a0      	movs	r3, #160	@ 0xa0
90000cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000cc4:	2300      	movs	r3, #0
90000cc6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000cca:	2302      	movs	r3, #2
90000ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000cd0:	2302      	movs	r3, #2
90000cd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000cd6:	2304      	movs	r3, #4
90000cd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000cdc:	2300      	movs	r3, #0
90000cde:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000ce2:	2308      	movs	r3, #8
90000ce4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000ce8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000cec:	4618      	mov	r0, r3
90000cee:	f005 ff99 	bl	90006c24 <HAL_RCC_OscConfig>
90000cf2:	4603      	mov	r3, r0
90000cf4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000cf8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000cfc:	2b00      	cmp	r3, #0
90000cfe:	d001      	beq.n	90000d04 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000d00:	f7ff ff8c 	bl	90000c1c <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000d04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d08:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d0c:	2205      	movs	r2, #5
90000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d14:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d18:	2260      	movs	r2, #96	@ 0x60
90000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d20:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d24:	2202      	movs	r2, #2
90000d26:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000d28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d2c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d30:	220a      	movs	r2, #10
90000d32:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000d34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d38:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d3c:	2212      	movs	r2, #18
90000d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000d40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d44:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d48:	2200      	movs	r2, #0
90000d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000d4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d50:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000d58:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000d5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d5e:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000d62:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000d66:	f04f 0300 	mov.w	r3, #0
90000d6a:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000d6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d76:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000d7e:	f107 0308 	add.w	r3, r7, #8
90000d82:	4618      	mov	r0, r3
90000d84:	f006 ff34 	bl	90007bf0 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000d88:	233f      	movs	r3, #63	@ 0x3f
90000d8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000d8e:	2303      	movs	r3, #3
90000d90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000d94:	2300      	movs	r3, #0
90000d96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000d9a:	2308      	movs	r3, #8
90000d9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000da0:	2340      	movs	r3, #64	@ 0x40
90000da2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000da6:	2340      	movs	r3, #64	@ 0x40
90000da8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000db0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000db4:	2340      	movs	r3, #64	@ 0x40
90000db6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000dba:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000dbe:	2104      	movs	r1, #4
90000dc0:	4618      	mov	r0, r3
90000dc2:	f006 fb89 	bl	900074d8 <HAL_RCC_ClockConfig>
90000dc6:	4603      	mov	r3, r0
90000dc8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000dcc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000dd0:	2b00      	cmp	r3, #0
90000dd2:	d001      	beq.n	90000dd8 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000dd4:	f7ff ff22 	bl	90000c1c <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000dd8:	4b13      	ldr	r3, [pc, #76]	@ (90000e28 <SystemClock_Config+0x204>)
90000dda:	681b      	ldr	r3, [r3, #0]
90000ddc:	4a12      	ldr	r2, [pc, #72]	@ (90000e28 <SystemClock_Config+0x204>)
90000dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000de2:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000de4:	4b10      	ldr	r3, [pc, #64]	@ (90000e28 <SystemClock_Config+0x204>)
90000de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000dea:	4a0f      	ldr	r2, [pc, #60]	@ (90000e28 <SystemClock_Config+0x204>)
90000dec:	f043 0302 	orr.w	r3, r3, #2
90000df0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000df4:	4b0c      	ldr	r3, [pc, #48]	@ (90000e28 <SystemClock_Config+0x204>)
90000df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000dfa:	f003 0202 	and.w	r2, r3, #2
90000dfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e02:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e06:	601a      	str	r2, [r3, #0]
90000e08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e0c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e10:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000e12:	f002 fa9b 	bl	9000334c <HAL_EnableCompensationCell>
}
90000e16:	bf00      	nop
90000e18:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000e1c:	46bd      	mov	sp, r7
90000e1e:	bd80      	pop	{r7, pc}
90000e20:	58000400 	.word	0x58000400
90000e24:	58024800 	.word	0x58024800
90000e28:	58024400 	.word	0x58024400

90000e2c <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000e2c:	b480      	push	{r7}
90000e2e:	b085      	sub	sp, #20
90000e30:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e32:	4b34      	ldr	r3, [pc, #208]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000e34:	695b      	ldr	r3, [r3, #20]
90000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000e3a:	2b00      	cmp	r3, #0
90000e3c:	d11b      	bne.n	90000e76 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000e3e:	f3bf 8f4f 	dsb	sy
}
90000e42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e44:	f3bf 8f6f 	isb	sy
}
90000e48:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000e4a:	4b2e      	ldr	r3, [pc, #184]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000e4c:	2200      	movs	r2, #0
90000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000e52:	f3bf 8f4f 	dsb	sy
}
90000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e58:	f3bf 8f6f 	isb	sy
}
90000e5c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000e5e:	4b29      	ldr	r3, [pc, #164]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000e60:	695b      	ldr	r3, [r3, #20]
90000e62:	4a28      	ldr	r2, [pc, #160]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000e68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e6a:	f3bf 8f4f 	dsb	sy
}
90000e6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e70:	f3bf 8f6f 	isb	sy
}
90000e74:	e000      	b.n	90000e78 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e76:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e78:	4b22      	ldr	r3, [pc, #136]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000e7a:	695b      	ldr	r3, [r3, #20]
90000e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000e80:	2b00      	cmp	r3, #0
90000e82:	d138      	bne.n	90000ef6 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000e84:	4b1f      	ldr	r3, [pc, #124]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000e86:	2200      	movs	r2, #0
90000e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000e8c:	f3bf 8f4f 	dsb	sy
}
90000e90:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000e92:	4b1c      	ldr	r3, [pc, #112]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000e98:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000e9a:	68fb      	ldr	r3, [r7, #12]
90000e9c:	0b5b      	lsrs	r3, r3, #13
90000e9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000ea2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000ea4:	68fb      	ldr	r3, [r7, #12]
90000ea6:	08db      	lsrs	r3, r3, #3
90000ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000eac:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000eae:	68bb      	ldr	r3, [r7, #8]
90000eb0:	015a      	lsls	r2, r3, #5
90000eb2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000eb6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000eb8:	687a      	ldr	r2, [r7, #4]
90000eba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000ebc:	4911      	ldr	r1, [pc, #68]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000ebe:	4313      	orrs	r3, r2
90000ec0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000ec4:	687b      	ldr	r3, [r7, #4]
90000ec6:	1e5a      	subs	r2, r3, #1
90000ec8:	607a      	str	r2, [r7, #4]
90000eca:	2b00      	cmp	r3, #0
90000ecc:	d1ef      	bne.n	90000eae <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000ece:	68bb      	ldr	r3, [r7, #8]
90000ed0:	1e5a      	subs	r2, r3, #1
90000ed2:	60ba      	str	r2, [r7, #8]
90000ed4:	2b00      	cmp	r3, #0
90000ed6:	d1e5      	bne.n	90000ea4 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000ed8:	f3bf 8f4f 	dsb	sy
}
90000edc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000ede:	4b09      	ldr	r3, [pc, #36]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000ee0:	695b      	ldr	r3, [r3, #20]
90000ee2:	4a08      	ldr	r2, [pc, #32]	@ (90000f04 <CPU_CACHE_Enable+0xd8>)
90000ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000ee8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000eea:	f3bf 8f4f 	dsb	sy
}
90000eee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000ef0:	f3bf 8f6f 	isb	sy
}
90000ef4:	e000      	b.n	90000ef8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000ef6:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000ef8:	bf00      	nop
90000efa:	3714      	adds	r7, #20
90000efc:	46bd      	mov	sp, r7
90000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f02:	4770      	bx	lr
90000f04:	e000ed00 	.word	0xe000ed00

90000f08 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000f08:	b580      	push	{r7, lr}
90000f0a:	b082      	sub	sp, #8
90000f0c:	af00      	add	r7, sp, #0
90000f0e:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000f10:	490e      	ldr	r1, [pc, #56]	@ (90000f4c <MX_LTDC_ClockConfig+0x44>)
90000f12:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000f16:	f04f 0300 	mov.w	r3, #0
90000f1a:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (90000f4c <MX_LTDC_ClockConfig+0x44>)
90000f20:	2205      	movs	r2, #5
90000f22:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000f24:	4b09      	ldr	r3, [pc, #36]	@ (90000f4c <MX_LTDC_ClockConfig+0x44>)
90000f26:	22c0      	movs	r2, #192	@ 0xc0
90000f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000f2a:	4b08      	ldr	r3, [pc, #32]	@ (90000f4c <MX_LTDC_ClockConfig+0x44>)
90000f2c:	2202      	movs	r2, #2
90000f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000f30:	4b06      	ldr	r3, [pc, #24]	@ (90000f4c <MX_LTDC_ClockConfig+0x44>)
90000f32:	2214      	movs	r2, #20
90000f34:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000f36:	4b05      	ldr	r3, [pc, #20]	@ (90000f4c <MX_LTDC_ClockConfig+0x44>)
90000f38:	2263      	movs	r2, #99	@ 0x63
90000f3a:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000f3c:	4803      	ldr	r0, [pc, #12]	@ (90000f4c <MX_LTDC_ClockConfig+0x44>)
90000f3e:	f006 fe57 	bl	90007bf0 <HAL_RCCEx_PeriphCLKConfig>
90000f42:	4603      	mov	r3, r0
}
90000f44:	4618      	mov	r0, r3
90000f46:	3708      	adds	r7, #8
90000f48:	46bd      	mov	sp, r7
90000f4a:	bd80      	pop	{r7, pc}
90000f4c:	20000188 	.word	0x20000188

90000f50 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000f50:	b580      	push	{r7, lr}
90000f52:	b084      	sub	sp, #16
90000f54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000f56:	f002 fb19 	bl	9000358c <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000f5a:	2301      	movs	r3, #1
90000f5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000f5e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000f62:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000f64:	2318      	movs	r3, #24
90000f66:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000f68:	2303      	movs	r3, #3
90000f6a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000f6c:	2300      	movs	r3, #0
90000f6e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000f70:	2301      	movs	r3, #1
90000f72:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000f74:	2300      	movs	r3, #0
90000f76:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000f78:	2301      	movs	r3, #1
90000f7a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000f7c:	2300      	movs	r3, #0
90000f7e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000f80:	2300      	movs	r3, #0
90000f82:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000f84:	2300      	movs	r3, #0
90000f86:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000f88:	463b      	mov	r3, r7
90000f8a:	4618      	mov	r0, r3
90000f8c:	f002 fb36 	bl	900035fc <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000f90:	2004      	movs	r0, #4
90000f92:	f002 fb13 	bl	900035bc <HAL_MPU_Enable>
}
90000f96:	bf00      	nop
90000f98:	3710      	adds	r7, #16
90000f9a:	46bd      	mov	sp, r7
90000f9c:	bd80      	pop	{r7, pc}

90000f9e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000f9e:	b480      	push	{r7}
90000fa0:	af00      	add	r7, sp, #0
}
90000fa2:	bf00      	nop
90000fa4:	46bd      	mov	sp, r7
90000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000faa:	4770      	bx	lr

90000fac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000fac:	b480      	push	{r7}
90000fae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000fb0:	bf00      	nop
90000fb2:	e7fd      	b.n	90000fb0 <HardFault_Handler+0x4>

90000fb4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000fb4:	b480      	push	{r7}
90000fb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000fb8:	bf00      	nop
90000fba:	e7fd      	b.n	90000fb8 <MemManage_Handler+0x4>

90000fbc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000fbc:	b480      	push	{r7}
90000fbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000fc0:	bf00      	nop
90000fc2:	e7fd      	b.n	90000fc0 <BusFault_Handler+0x4>

90000fc4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000fc4:	b480      	push	{r7}
90000fc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000fc8:	bf00      	nop
90000fca:	e7fd      	b.n	90000fc8 <UsageFault_Handler+0x4>

90000fcc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000fcc:	b480      	push	{r7}
90000fce:	af00      	add	r7, sp, #0
}
90000fd0:	bf00      	nop
90000fd2:	46bd      	mov	sp, r7
90000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fd8:	4770      	bx	lr

90000fda <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000fda:	b480      	push	{r7}
90000fdc:	af00      	add	r7, sp, #0
}
90000fde:	bf00      	nop
90000fe0:	46bd      	mov	sp, r7
90000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fe6:	4770      	bx	lr

90000fe8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000fe8:	b480      	push	{r7}
90000fea:	af00      	add	r7, sp, #0
}
90000fec:	bf00      	nop
90000fee:	46bd      	mov	sp, r7
90000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ff4:	4770      	bx	lr

90000ff6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000ff6:	b580      	push	{r7, lr}
90000ff8:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000ffa:	f002 f957 	bl	900032ac <HAL_IncTick>
}
90000ffe:	bf00      	nop
90001000:	bd80      	pop	{r7, pc}
	...

90001004 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90001004:	b580      	push	{r7, lr}
90001006:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90001008:	4802      	ldr	r0, [pc, #8]	@ (90001014 <OTG_FS_IRQHandler+0x10>)
9000100a:	f002 ffee 	bl	90003fea <HAL_HCD_IRQHandler>
}
9000100e:	bf00      	nop
90001010:	bd80      	pop	{r7, pc}
90001012:	bf00      	nop
90001014:	2000024c 	.word	0x2000024c

90001018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001018:	b580      	push	{r7, lr}
9000101a:	b086      	sub	sp, #24
9000101c:	af00      	add	r7, sp, #0
9000101e:	60f8      	str	r0, [r7, #12]
90001020:	60b9      	str	r1, [r7, #8]
90001022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001024:	2300      	movs	r3, #0
90001026:	617b      	str	r3, [r7, #20]
90001028:	e00a      	b.n	90001040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
9000102a:	f3af 8000 	nop.w
9000102e:	4601      	mov	r1, r0
90001030:	68bb      	ldr	r3, [r7, #8]
90001032:	1c5a      	adds	r2, r3, #1
90001034:	60ba      	str	r2, [r7, #8]
90001036:	b2ca      	uxtb	r2, r1
90001038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000103a:	697b      	ldr	r3, [r7, #20]
9000103c:	3301      	adds	r3, #1
9000103e:	617b      	str	r3, [r7, #20]
90001040:	697a      	ldr	r2, [r7, #20]
90001042:	687b      	ldr	r3, [r7, #4]
90001044:	429a      	cmp	r2, r3
90001046:	dbf0      	blt.n	9000102a <_read+0x12>
  }

  return len;
90001048:	687b      	ldr	r3, [r7, #4]
}
9000104a:	4618      	mov	r0, r3
9000104c:	3718      	adds	r7, #24
9000104e:	46bd      	mov	sp, r7
90001050:	bd80      	pop	{r7, pc}

90001052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90001052:	b580      	push	{r7, lr}
90001054:	b086      	sub	sp, #24
90001056:	af00      	add	r7, sp, #0
90001058:	60f8      	str	r0, [r7, #12]
9000105a:	60b9      	str	r1, [r7, #8]
9000105c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000105e:	2300      	movs	r3, #0
90001060:	617b      	str	r3, [r7, #20]
90001062:	e009      	b.n	90001078 <_write+0x26>
  {
    __io_putchar(*ptr++);
90001064:	68bb      	ldr	r3, [r7, #8]
90001066:	1c5a      	adds	r2, r3, #1
90001068:	60ba      	str	r2, [r7, #8]
9000106a:	781b      	ldrb	r3, [r3, #0]
9000106c:	4618      	mov	r0, r3
9000106e:	f7ff fcc7 	bl	90000a00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001072:	697b      	ldr	r3, [r7, #20]
90001074:	3301      	adds	r3, #1
90001076:	617b      	str	r3, [r7, #20]
90001078:	697a      	ldr	r2, [r7, #20]
9000107a:	687b      	ldr	r3, [r7, #4]
9000107c:	429a      	cmp	r2, r3
9000107e:	dbf1      	blt.n	90001064 <_write+0x12>
  }
  return len;
90001080:	687b      	ldr	r3, [r7, #4]
}
90001082:	4618      	mov	r0, r3
90001084:	3718      	adds	r7, #24
90001086:	46bd      	mov	sp, r7
90001088:	bd80      	pop	{r7, pc}

9000108a <_close>:

int _close(int file)
{
9000108a:	b480      	push	{r7}
9000108c:	b083      	sub	sp, #12
9000108e:	af00      	add	r7, sp, #0
90001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
90001092:	f04f 33ff 	mov.w	r3, #4294967295
}
90001096:	4618      	mov	r0, r3
90001098:	370c      	adds	r7, #12
9000109a:	46bd      	mov	sp, r7
9000109c:	f85d 7b04 	ldr.w	r7, [sp], #4
900010a0:	4770      	bx	lr

900010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
900010a2:	b480      	push	{r7}
900010a4:	b083      	sub	sp, #12
900010a6:	af00      	add	r7, sp, #0
900010a8:	6078      	str	r0, [r7, #4]
900010aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
900010ac:	683b      	ldr	r3, [r7, #0]
900010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
900010b2:	605a      	str	r2, [r3, #4]
  return 0;
900010b4:	2300      	movs	r3, #0
}
900010b6:	4618      	mov	r0, r3
900010b8:	370c      	adds	r7, #12
900010ba:	46bd      	mov	sp, r7
900010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900010c0:	4770      	bx	lr

900010c2 <_isatty>:

int _isatty(int file)
{
900010c2:	b480      	push	{r7}
900010c4:	b083      	sub	sp, #12
900010c6:	af00      	add	r7, sp, #0
900010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
900010ca:	2301      	movs	r3, #1
}
900010cc:	4618      	mov	r0, r3
900010ce:	370c      	adds	r7, #12
900010d0:	46bd      	mov	sp, r7
900010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
900010d6:	4770      	bx	lr

900010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
900010d8:	b480      	push	{r7}
900010da:	b085      	sub	sp, #20
900010dc:	af00      	add	r7, sp, #0
900010de:	60f8      	str	r0, [r7, #12]
900010e0:	60b9      	str	r1, [r7, #8]
900010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
900010e4:	2300      	movs	r3, #0
}
900010e6:	4618      	mov	r0, r3
900010e8:	3714      	adds	r7, #20
900010ea:	46bd      	mov	sp, r7
900010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900010f0:	4770      	bx	lr
	...

900010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
900010f4:	b580      	push	{r7, lr}
900010f6:	b086      	sub	sp, #24
900010f8:	af00      	add	r7, sp, #0
900010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900010fc:	4a14      	ldr	r2, [pc, #80]	@ (90001150 <_sbrk+0x5c>)
900010fe:	4b15      	ldr	r3, [pc, #84]	@ (90001154 <_sbrk+0x60>)
90001100:	1ad3      	subs	r3, r2, r3
90001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001104:	697b      	ldr	r3, [r7, #20]
90001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001108:	4b13      	ldr	r3, [pc, #76]	@ (90001158 <_sbrk+0x64>)
9000110a:	681b      	ldr	r3, [r3, #0]
9000110c:	2b00      	cmp	r3, #0
9000110e:	d102      	bne.n	90001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90001110:	4b11      	ldr	r3, [pc, #68]	@ (90001158 <_sbrk+0x64>)
90001112:	4a12      	ldr	r2, [pc, #72]	@ (9000115c <_sbrk+0x68>)
90001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001116:	4b10      	ldr	r3, [pc, #64]	@ (90001158 <_sbrk+0x64>)
90001118:	681a      	ldr	r2, [r3, #0]
9000111a:	687b      	ldr	r3, [r7, #4]
9000111c:	4413      	add	r3, r2
9000111e:	693a      	ldr	r2, [r7, #16]
90001120:	429a      	cmp	r2, r3
90001122:	d207      	bcs.n	90001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
90001124:	f00b fbce 	bl	9000c8c4 <__errno>
90001128:	4603      	mov	r3, r0
9000112a:	220c      	movs	r2, #12
9000112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
9000112e:	f04f 33ff 	mov.w	r3, #4294967295
90001132:	e009      	b.n	90001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001134:	4b08      	ldr	r3, [pc, #32]	@ (90001158 <_sbrk+0x64>)
90001136:	681b      	ldr	r3, [r3, #0]
90001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
9000113a:	4b07      	ldr	r3, [pc, #28]	@ (90001158 <_sbrk+0x64>)
9000113c:	681a      	ldr	r2, [r3, #0]
9000113e:	687b      	ldr	r3, [r7, #4]
90001140:	4413      	add	r3, r2
90001142:	4a05      	ldr	r2, [pc, #20]	@ (90001158 <_sbrk+0x64>)
90001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001146:	68fb      	ldr	r3, [r7, #12]
}
90001148:	4618      	mov	r0, r3
9000114a:	3718      	adds	r7, #24
9000114c:	46bd      	mov	sp, r7
9000114e:	bd80      	pop	{r7, pc}
90001150:	20020000 	.word	0x20020000
90001154:	00001000 	.word	0x00001000
90001158:	20000248 	.word	0x20000248
9000115c:	200014a0 	.word	0x200014a0

90001160 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90001160:	b580      	push	{r7, lr}
90001162:	b082      	sub	sp, #8
90001164:	af00      	add	r7, sp, #0
90001166:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001168:	687b      	ldr	r3, [r7, #4]
9000116a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000116e:	4618      	mov	r0, r3
90001170:	f00a fc70 	bl	9000ba54 <USBH_LL_IncTimer>
}
90001174:	bf00      	nop
90001176:	3708      	adds	r7, #8
90001178:	46bd      	mov	sp, r7
9000117a:	bd80      	pop	{r7, pc}

9000117c <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
9000117c:	b580      	push	{r7, lr}
9000117e:	b082      	sub	sp, #8
90001180:	af00      	add	r7, sp, #0
90001182:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90001184:	687b      	ldr	r3, [r7, #4]
90001186:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000118a:	4618      	mov	r0, r3
9000118c:	f00a fcac 	bl	9000bae8 <USBH_LL_Connect>
}
90001190:	bf00      	nop
90001192:	3708      	adds	r7, #8
90001194:	46bd      	mov	sp, r7
90001196:	bd80      	pop	{r7, pc}

90001198 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90001198:	b580      	push	{r7, lr}
9000119a:	b082      	sub	sp, #8
9000119c:	af00      	add	r7, sp, #0
9000119e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
900011a0:	687b      	ldr	r3, [r7, #4]
900011a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011a6:	4618      	mov	r0, r3
900011a8:	f00a fcb5 	bl	9000bb16 <USBH_LL_Disconnect>
}
900011ac:	bf00      	nop
900011ae:	3708      	adds	r7, #8
900011b0:	46bd      	mov	sp, r7
900011b2:	bd80      	pop	{r7, pc}

900011b4 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011b4:	b580      	push	{r7, lr}
900011b6:	b082      	sub	sp, #8
900011b8:	af00      	add	r7, sp, #0
900011ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
900011bc:	687b      	ldr	r3, [r7, #4]
900011be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011c2:	4618      	mov	r0, r3
900011c4:	f00a fc70 	bl	9000baa8 <USBH_LL_PortEnabled>
}
900011c8:	bf00      	nop
900011ca:	3708      	adds	r7, #8
900011cc:	46bd      	mov	sp, r7
900011ce:	bd80      	pop	{r7, pc}

900011d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011d0:	b580      	push	{r7, lr}
900011d2:	b082      	sub	sp, #8
900011d4:	af00      	add	r7, sp, #0
900011d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
900011d8:	687b      	ldr	r3, [r7, #4]
900011da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011de:	4618      	mov	r0, r3
900011e0:	f00a fc70 	bl	9000bac4 <USBH_LL_PortDisabled>
}
900011e4:	bf00      	nop
900011e6:	3708      	adds	r7, #8
900011e8:	46bd      	mov	sp, r7
900011ea:	bd80      	pop	{r7, pc}

900011ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
900011ec:	b480      	push	{r7}
900011ee:	b083      	sub	sp, #12
900011f0:	af00      	add	r7, sp, #0
900011f2:	6078      	str	r0, [r7, #4]
900011f4:	460b      	mov	r3, r1
900011f6:	70fb      	strb	r3, [r7, #3]
900011f8:	4613      	mov	r3, r2
900011fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
900011fc:	bf00      	nop
900011fe:	370c      	adds	r7, #12
90001200:	46bd      	mov	sp, r7
90001202:	f85d 7b04 	ldr.w	r7, [sp], #4
90001206:	4770      	bx	lr

90001208 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90001208:	b580      	push	{r7, lr}
9000120a:	b082      	sub	sp, #8
9000120c:	af00      	add	r7, sp, #0
9000120e:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90001210:	687b      	ldr	r3, [r7, #4]
90001212:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001216:	4618      	mov	r0, r3
90001218:	f002 fff7 	bl	9000420a <HAL_HCD_Stop>
  return USBH_OK;
9000121c:	2300      	movs	r3, #0
}
9000121e:	4618      	mov	r0, r3
90001220:	3708      	adds	r7, #8
90001222:	46bd      	mov	sp, r7
90001224:	bd80      	pop	{r7, pc}
	...

90001228 <ClearCache>:
#include "display.h"

uint32_t x_size, y_size;

void ClearCache()
{
90001228:	b480      	push	{r7}
9000122a:	b085      	sub	sp, #20
9000122c:	af00      	add	r7, sp, #0
9000122e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001232:	60fb      	str	r3, [r7, #12]
90001234:	f44f 23ff 	mov.w	r3, #522240	@ 0x7f800
90001238:	60bb      	str	r3, [r7, #8]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
9000123a:	68bb      	ldr	r3, [r7, #8]
9000123c:	2b00      	cmp	r3, #0
9000123e:	dd1d      	ble.n	9000127c <ClearCache+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
90001240:	68fb      	ldr	r3, [r7, #12]
90001242:	f003 021f 	and.w	r2, r3, #31
90001246:	68bb      	ldr	r3, [r7, #8]
90001248:	4413      	add	r3, r2
9000124a:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
9000124c:	68fb      	ldr	r3, [r7, #12]
9000124e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
90001250:	f3bf 8f4f 	dsb	sy
}
90001254:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
90001256:	4a0d      	ldr	r2, [pc, #52]	@ (9000128c <ClearCache+0x64>)
90001258:	683b      	ldr	r3, [r7, #0]
9000125a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
9000125e:	683b      	ldr	r3, [r7, #0]
90001260:	3320      	adds	r3, #32
90001262:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
90001264:	687b      	ldr	r3, [r7, #4]
90001266:	3b20      	subs	r3, #32
90001268:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
9000126a:	687b      	ldr	r3, [r7, #4]
9000126c:	2b00      	cmp	r3, #0
9000126e:	dcf2      	bgt.n	90001256 <ClearCache+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
90001270:	f3bf 8f4f 	dsb	sy
}
90001274:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001276:	f3bf 8f6f 	isb	sy
}
9000127a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
9000127c:	bf00      	nop
	// otherwise I get LCD artefacts
	SCB_CleanDCache_by_Addr((void *)SDRAM_DEVICE_ADDR, 480*272*4);
}
9000127e:	bf00      	nop
90001280:	3714      	adds	r7, #20
90001282:	46bd      	mov	sp, r7
90001284:	f85d 7b04 	ldr.w	r7, [sp], #4
90001288:	4770      	bx	lr
9000128a:	bf00      	nop
9000128c:	e000ed00 	.word	0xe000ed00

90001290 <InitializeLcd>:

void InitializeLcd(void)
{
90001290:	b580      	push	{r7, lr}
90001292:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90001294:	2101      	movs	r1, #1
90001296:	2000      	movs	r0, #0
90001298:	f000 feb4 	bl	90002004 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
9000129c:	480f      	ldr	r0, [pc, #60]	@ (900012dc <InitializeLcd+0x4c>)
9000129e:	f00a fc7f 	bl	9000bba0 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
900012a2:	2000      	movs	r0, #0
900012a4:	f00a fcd2 	bl	9000bc4c <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
900012a8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900012ac:	f00a fd44 	bl	9000bd38 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
900012b0:	490b      	ldr	r1, [pc, #44]	@ (900012e0 <InitializeLcd+0x50>)
900012b2:	2000      	movs	r0, #0
900012b4:	f001 f860 	bl	90002378 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
900012b8:	490a      	ldr	r1, [pc, #40]	@ (900012e4 <InitializeLcd+0x54>)
900012ba:	2000      	movs	r0, #0
900012bc:	f001 f87a 	bl	900023b4 <BSP_LCD_GetYSize>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
900012c0:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
900012c4:	f00a fce0 	bl	9000bc88 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
900012c8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900012cc:	f00a fcf0 	bl	9000bcb0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
900012d0:	4805      	ldr	r0, [pc, #20]	@ (900012e8 <InitializeLcd+0x58>)
900012d2:	f00a fd01 	bl	9000bcd8 <UTIL_LCD_SetFont>
}
900012d6:	bf00      	nop
900012d8:	bd80      	pop	{r7, pc}
900012da:	bf00      	nop
900012dc:	9000d7b4 	.word	0x9000d7b4
900012e0:	2000062c 	.word	0x2000062c
900012e4:	20000630 	.word	0x20000630
900012e8:	20000068 	.word	0x20000068

900012ec <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
900012ec:	b580      	push	{r7, lr}
900012ee:	b082      	sub	sp, #8
900012f0:	af00      	add	r7, sp, #0
900012f2:	6078      	str	r0, [r7, #4]
900012f4:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
900012f6:	683a      	ldr	r2, [r7, #0]
900012f8:	6879      	ldr	r1, [r7, #4]
900012fa:	4803      	ldr	r0, [pc, #12]	@ (90001308 <uartSetCursorPosition+0x1c>)
900012fc:	f00b f91a 	bl	9000c534 <iprintf>
}
90001300:	bf00      	nop
90001302:	3708      	adds	r7, #8
90001304:	46bd      	mov	sp, r7
90001306:	bd80      	pop	{r7, pc}
90001308:	9000d5e0 	.word	0x9000d5e0

9000130c <UartClearScreen>:

void UartClearScreen() {
9000130c:	b580      	push	{r7, lr}
9000130e:	af00      	add	r7, sp, #0
  printf("\033[2J");
90001310:	4803      	ldr	r0, [pc, #12]	@ (90001320 <UartClearScreen+0x14>)
90001312:	f00b f90f 	bl	9000c534 <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
90001316:	4803      	ldr	r0, [pc, #12]	@ (90001324 <UartClearScreen+0x18>)
90001318:	f00b f90c 	bl	9000c534 <iprintf>
}
9000131c:	bf00      	nop
9000131e:	bd80      	pop	{r7, pc}
90001320:	9000d5ec 	.word	0x9000d5ec
90001324:	9000d5f4 	.word	0x9000d5f4

90001328 <UartRenderState>:

void UartRenderState(AppContext *ctx) {
90001328:	b580      	push	{r7, lr}
9000132a:	b082      	sub	sp, #8
9000132c:	af00      	add	r7, sp, #0
9000132e:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
90001330:	2101      	movs	r1, #1
90001332:	2001      	movs	r0, #1
90001334:	f7ff ffda 	bl	900012ec <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
90001338:	687b      	ldr	r3, [r7, #4]
9000133a:	781b      	ldrb	r3, [r3, #0]
9000133c:	2b00      	cmp	r3, #0
9000133e:	d13a      	bne.n	900013b6 <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
90001340:	481f      	ldr	r0, [pc, #124]	@ (900013c0 <UartRenderState+0x98>)
90001342:	f00b f8f7 	bl	9000c534 <iprintf>
    uartSetCursorPosition(2, 1);
90001346:	2101      	movs	r1, #1
90001348:	2002      	movs	r0, #2
9000134a:	f7ff ffcf 	bl	900012ec <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
9000134e:	687b      	ldr	r3, [r7, #4]
90001350:	889b      	ldrh	r3, [r3, #4]
90001352:	4619      	mov	r1, r3
90001354:	481b      	ldr	r0, [pc, #108]	@ (900013c4 <UartRenderState+0x9c>)
90001356:	f00b f8ed 	bl	9000c534 <iprintf>
    uartSetCursorPosition(3, 1);
9000135a:	2101      	movs	r1, #1
9000135c:	2003      	movs	r0, #3
9000135e:	f7ff ffc5 	bl	900012ec <uartSetCursorPosition>
    if (ctx->voltage > 0) {
90001362:	687b      	ldr	r3, [r7, #4]
90001364:	885b      	ldrh	r3, [r3, #2]
90001366:	2b00      	cmp	r3, #0
90001368:	d006      	beq.n	90001378 <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
9000136a:	687b      	ldr	r3, [r7, #4]
9000136c:	885b      	ldrh	r3, [r3, #2]
9000136e:	4619      	mov	r1, r3
90001370:	4815      	ldr	r0, [pc, #84]	@ (900013c8 <UartRenderState+0xa0>)
90001372:	f00b f8df 	bl	9000c534 <iprintf>
90001376:	e002      	b.n	9000137e <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
90001378:	4814      	ldr	r0, [pc, #80]	@ (900013cc <UartRenderState+0xa4>)
9000137a:	f00b f8db 	bl	9000c534 <iprintf>
    }
    uartSetCursorPosition(4, 1);
9000137e:	2101      	movs	r1, #1
90001380:	2004      	movs	r0, #4
90001382:	f7ff ffb3 	bl	900012ec <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
90001386:	687b      	ldr	r3, [r7, #4]
90001388:	79db      	ldrb	r3, [r3, #7]
9000138a:	2b00      	cmp	r3, #0
9000138c:	d006      	beq.n	9000139c <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
9000138e:	687b      	ldr	r3, [r7, #4]
90001390:	885b      	ldrh	r3, [r3, #2]
90001392:	4619      	mov	r1, r3
90001394:	480e      	ldr	r0, [pc, #56]	@ (900013d0 <UartRenderState+0xa8>)
90001396:	f00b f8cd 	bl	9000c534 <iprintf>
9000139a:	e002      	b.n	900013a2 <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
9000139c:	480d      	ldr	r0, [pc, #52]	@ (900013d4 <UartRenderState+0xac>)
9000139e:	f00b f8c9 	bl	9000c534 <iprintf>
    }
    uartSetCursorPosition(5, 1);
900013a2:	2101      	movs	r1, #1
900013a4:	2005      	movs	r0, #5
900013a6:	f7ff ffa1 	bl	900012ec <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
900013aa:	687b      	ldr	r3, [r7, #4]
900013ac:	3309      	adds	r3, #9
900013ae:	4619      	mov	r1, r3
900013b0:	4809      	ldr	r0, [pc, #36]	@ (900013d8 <UartRenderState+0xb0>)
900013b2:	f00b f8bf 	bl	9000c534 <iprintf>
  }
}
900013b6:	bf00      	nop
900013b8:	3708      	adds	r7, #8
900013ba:	46bd      	mov	sp, r7
900013bc:	bd80      	pop	{r7, pc}
900013be:	bf00      	nop
900013c0:	9000d5f8 	.word	0x9000d5f8
900013c4:	9000d610 	.word	0x9000d610
900013c8:	9000d628 	.word	0x9000d628
900013cc:	9000d63c 	.word	0x9000d63c
900013d0:	9000d650 	.word	0x9000d650
900013d4:	9000d66c 	.word	0x9000d66c
900013d8:	9000d688 	.word	0x9000d688

900013dc <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
900013dc:	b5b0      	push	{r4, r5, r7, lr}
900013de:	b094      	sub	sp, #80	@ 0x50
900013e0:	af00      	add	r7, sp, #0
900013e2:	6078      	str	r0, [r7, #4]
 // UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  if (ctx->currentState == STATE_F1) {
900013e4:	687b      	ldr	r3, [r7, #4]
900013e6:	781b      	ldrb	r3, [r3, #0]
900013e8:	2b00      	cmp	r3, #0
900013ea:	f040 8085 	bne.w	900014f8 <DisplayRenderState+0x11c>
	char buffer[32];  // Make sure it's large enough
    UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"F1: Voltage control", LEFT_MODE);
900013ee:	2303      	movs	r3, #3
900013f0:	4a43      	ldr	r2, [pc, #268]	@ (90001500 <DisplayRenderState+0x124>)
900013f2:	2100      	movs	r1, #0
900013f4:	2000      	movs	r0, #0
900013f6:	f00a fceb 	bl	9000bdd0 <UTIL_LCD_DisplayStringAt>

    char cursor = ' ';
900013fa:	2320      	movs	r3, #32
900013fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (ctx->displayCursor) cursor = '_';
90001400:	687b      	ldr	r3, [r7, #4]
90001402:	7a1b      	ldrb	r3, [r3, #8]
90001404:	2b00      	cmp	r3, #0
90001406:	d002      	beq.n	9000140e <DisplayRenderState+0x32>
90001408:	235f      	movs	r3, #95	@ 0x5f
9000140a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    sprintf(buffer, "Current input: %d%c  ", ctx->inputValue, cursor);
9000140e:	687b      	ldr	r3, [r7, #4]
90001410:	889b      	ldrh	r3, [r3, #4]
90001412:	461a      	mov	r2, r3
90001414:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
90001418:	f107 000c 	add.w	r0, r7, #12
9000141c:	4939      	ldr	r1, [pc, #228]	@ (90001504 <DisplayRenderState+0x128>)
9000141e:	f00b f8f9 	bl	9000c614 <siprintf>
    UTIL_LCD_DisplayStringAt(0, 32, (uint8_t *)buffer, LEFT_MODE);
90001422:	f107 020c 	add.w	r2, r7, #12
90001426:	2303      	movs	r3, #3
90001428:	2120      	movs	r1, #32
9000142a:	2000      	movs	r0, #0
9000142c:	f00a fcd0 	bl	9000bdd0 <UTIL_LCD_DisplayStringAt>

    if (ctx->voltage > 0) {
90001430:	687b      	ldr	r3, [r7, #4]
90001432:	885b      	ldrh	r3, [r3, #2]
90001434:	2b00      	cmp	r3, #0
90001436:	d009      	beq.n	9000144c <DisplayRenderState+0x70>
      sprintf(buffer, "Voltage: %dV  ", ctx->voltage);
90001438:	687b      	ldr	r3, [r7, #4]
9000143a:	885b      	ldrh	r3, [r3, #2]
9000143c:	461a      	mov	r2, r3
9000143e:	f107 030c 	add.w	r3, r7, #12
90001442:	4931      	ldr	r1, [pc, #196]	@ (90001508 <DisplayRenderState+0x12c>)
90001444:	4618      	mov	r0, r3
90001446:	f00b f8e5 	bl	9000c614 <siprintf>
9000144a:	e00a      	b.n	90001462 <DisplayRenderState+0x86>
    } else {
      strcpy(buffer, "Voltage: N/A  ");
9000144c:	f107 030c 	add.w	r3, r7, #12
90001450:	4a2e      	ldr	r2, [pc, #184]	@ (9000150c <DisplayRenderState+0x130>)
90001452:	461c      	mov	r4, r3
90001454:	4613      	mov	r3, r2
90001456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
90001458:	c407      	stmia	r4!, {r0, r1, r2}
9000145a:	8023      	strh	r3, [r4, #0]
9000145c:	3402      	adds	r4, #2
9000145e:	0c1b      	lsrs	r3, r3, #16
90001460:	7023      	strb	r3, [r4, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 64, (uint8_t *)buffer, LEFT_MODE);
90001462:	f107 020c 	add.w	r2, r7, #12
90001466:	2303      	movs	r3, #3
90001468:	2140      	movs	r1, #64	@ 0x40
9000146a:	2000      	movs	r0, #0
9000146c:	f00a fcb0 	bl	9000bdd0 <UTIL_LCD_DisplayStringAt>

    if (ctx->isPwmRunning == true) {
90001470:	687b      	ldr	r3, [r7, #4]
90001472:	79db      	ldrb	r3, [r3, #7]
90001474:	2b00      	cmp	r3, #0
90001476:	d009      	beq.n	9000148c <DisplayRenderState+0xb0>
      sprintf(buffer, "PWM is running at %dV ", ctx->voltage);
90001478:	687b      	ldr	r3, [r7, #4]
9000147a:	885b      	ldrh	r3, [r3, #2]
9000147c:	461a      	mov	r2, r3
9000147e:	f107 030c 	add.w	r3, r7, #12
90001482:	4923      	ldr	r1, [pc, #140]	@ (90001510 <DisplayRenderState+0x134>)
90001484:	4618      	mov	r0, r3
90001486:	f00b f8c5 	bl	9000c614 <siprintf>
9000148a:	e00a      	b.n	900014a2 <DisplayRenderState+0xc6>
    } else {
      strcpy(buffer, "PWM is OFF              ");
9000148c:	f107 030c 	add.w	r3, r7, #12
90001490:	4a20      	ldr	r2, [pc, #128]	@ (90001514 <DisplayRenderState+0x138>)
90001492:	461c      	mov	r4, r3
90001494:	4615      	mov	r5, r2
90001496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90001498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000149a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9000149e:	c403      	stmia	r4!, {r0, r1}
900014a0:	7022      	strb	r2, [r4, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 96, (uint8_t *)buffer, LEFT_MODE);
900014a2:	f107 020c 	add.w	r2, r7, #12
900014a6:	2303      	movs	r3, #3
900014a8:	2160      	movs	r1, #96	@ 0x60
900014aa:	2000      	movs	r0, #0
900014ac:	f00a fc90 	bl	9000bdd0 <UTIL_LCD_DisplayStringAt>


    char padded[25];  // 24 characters + null terminator

    // Step 1: Fill buffer with spaces
    memset(padded, ' ', 24);
900014b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
900014b4:	2218      	movs	r2, #24
900014b6:	2120      	movs	r1, #32
900014b8:	4618      	mov	r0, r3
900014ba:	f00b f9a5 	bl	9000c808 <memset>
    //padded[24] = '\0';

    // Step 2: Copy message into the start of padded buffer
    size_t len = strlen(ctx->message);
900014be:	687b      	ldr	r3, [r7, #4]
900014c0:	3309      	adds	r3, #9
900014c2:	4618      	mov	r0, r3
900014c4:	f7fe ff0c 	bl	900002e0 <strlen>
900014c8:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (len > 24) len = 24;  // truncate if too long
900014ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
900014cc:	2b18      	cmp	r3, #24
900014ce:	d901      	bls.n	900014d4 <DisplayRenderState+0xf8>
900014d0:	2318      	movs	r3, #24
900014d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    memcpy(padded, ctx->message, len);
900014d4:	687b      	ldr	r3, [r7, #4]
900014d6:	f103 0109 	add.w	r1, r3, #9
900014da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
900014de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
900014e0:	4618      	mov	r0, r3
900014e2:	f00b fa1c 	bl	9000c91e <memcpy>


    UTIL_LCD_DisplayStringAt(0, 128, (uint8_t *)padded, LEFT_MODE);
900014e6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
900014ea:	2303      	movs	r3, #3
900014ec:	2180      	movs	r1, #128	@ 0x80
900014ee:	2000      	movs	r0, #0
900014f0:	f00a fc6e 	bl	9000bdd0 <UTIL_LCD_DisplayStringAt>

    ClearCache();
900014f4:	f7ff fe98 	bl	90001228 <ClearCache>


//    uartSetCursorPosition(5, 1);
//    printf("%s                                                               \r\n", ctx->message);
  }
}
900014f8:	bf00      	nop
900014fa:	3750      	adds	r7, #80	@ 0x50
900014fc:	46bd      	mov	sp, r7
900014fe:	bdb0      	pop	{r4, r5, r7, pc}
90001500:	9000d6cc 	.word	0x9000d6cc
90001504:	9000d6e0 	.word	0x9000d6e0
90001508:	9000d6f8 	.word	0x9000d6f8
9000150c:	9000d708 	.word	0x9000d708
90001510:	9000d718 	.word	0x9000d718
90001514:	9000d66c 	.word	0x9000d66c

90001518 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001518:	b580      	push	{r7, lr}
9000151a:	b084      	sub	sp, #16
9000151c:	af00      	add	r7, sp, #0
9000151e:	6078      	str	r0, [r7, #4]
90001520:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
90001522:	687b      	ldr	r3, [r7, #4]
90001524:	2b00      	cmp	r3, #0
90001526:	d103      	bne.n	90001530 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001528:	f04f 33ff 	mov.w	r3, #4294967295
9000152c:	60fb      	str	r3, [r7, #12]
9000152e:	e02c      	b.n	9000158a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90001530:	683b      	ldr	r3, [r7, #0]
90001532:	681a      	ldr	r2, [r3, #0]
90001534:	687b      	ldr	r3, [r7, #4]
90001536:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001538:	683b      	ldr	r3, [r7, #0]
9000153a:	685a      	ldr	r2, [r3, #4]
9000153c:	687b      	ldr	r3, [r7, #4]
9000153e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90001540:	683b      	ldr	r3, [r7, #0]
90001542:	891a      	ldrh	r2, [r3, #8]
90001544:	687b      	ldr	r3, [r7, #4]
90001546:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90001548:	683b      	ldr	r3, [r7, #0]
9000154a:	68da      	ldr	r2, [r3, #12]
9000154c:	687b      	ldr	r3, [r7, #4]
9000154e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90001550:	683b      	ldr	r3, [r7, #0]
90001552:	691a      	ldr	r2, [r3, #16]
90001554:	687b      	ldr	r3, [r7, #4]
90001556:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90001558:	683b      	ldr	r3, [r7, #0]
9000155a:	695a      	ldr	r2, [r3, #20]
9000155c:	687b      	ldr	r3, [r7, #4]
9000155e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90001560:	687b      	ldr	r3, [r7, #4]
90001562:	4a0c      	ldr	r2, [pc, #48]	@ (90001594 <FT5336_RegisterBusIO+0x7c>)
90001564:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90001566:	687b      	ldr	r3, [r7, #4]
90001568:	4a0b      	ldr	r2, [pc, #44]	@ (90001598 <FT5336_RegisterBusIO+0x80>)
9000156a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
9000156c:	687b      	ldr	r3, [r7, #4]
9000156e:	687a      	ldr	r2, [r7, #4]
90001570:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
90001572:	687b      	ldr	r3, [r7, #4]
90001574:	681b      	ldr	r3, [r3, #0]
90001576:	2b00      	cmp	r3, #0
90001578:	d004      	beq.n	90001584 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
9000157a:	687b      	ldr	r3, [r7, #4]
9000157c:	681b      	ldr	r3, [r3, #0]
9000157e:	4798      	blx	r3
90001580:	60f8      	str	r0, [r7, #12]
90001582:	e002      	b.n	9000158a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90001584:	f04f 33ff 	mov.w	r3, #4294967295
90001588:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
9000158a:	68fb      	ldr	r3, [r7, #12]
}
9000158c:	4618      	mov	r0, r3
9000158e:	3710      	adds	r7, #16
90001590:	46bd      	mov	sp, r7
90001592:	bd80      	pop	{r7, pc}
90001594:	900015bd 	.word	0x900015bd
90001598:	900015f1 	.word	0x900015f1

9000159c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
9000159c:	b580      	push	{r7, lr}
9000159e:	b082      	sub	sp, #8
900015a0:	af00      	add	r7, sp, #0
900015a2:	6078      	str	r0, [r7, #4]
900015a4:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900015a6:	687b      	ldr	r3, [r7, #4]
900015a8:	3318      	adds	r3, #24
900015aa:	6839      	ldr	r1, [r7, #0]
900015ac:	4618      	mov	r0, r3
900015ae:	f000 f850 	bl	90001652 <ft5336_chip_id>
900015b2:	4603      	mov	r3, r0
}
900015b4:	4618      	mov	r0, r3
900015b6:	3708      	adds	r7, #8
900015b8:	46bd      	mov	sp, r7
900015ba:	bd80      	pop	{r7, pc}

900015bc <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900015bc:	b590      	push	{r4, r7, lr}
900015be:	b087      	sub	sp, #28
900015c0:	af00      	add	r7, sp, #0
900015c2:	60f8      	str	r0, [r7, #12]
900015c4:	607a      	str	r2, [r7, #4]
900015c6:	461a      	mov	r2, r3
900015c8:	460b      	mov	r3, r1
900015ca:	72fb      	strb	r3, [r7, #11]
900015cc:	4613      	mov	r3, r2
900015ce:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
900015d0:	68fb      	ldr	r3, [r7, #12]
900015d2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900015d4:	697b      	ldr	r3, [r7, #20]
900015d6:	691c      	ldr	r4, [r3, #16]
900015d8:	697b      	ldr	r3, [r7, #20]
900015da:	8918      	ldrh	r0, [r3, #8]
900015dc:	7afb      	ldrb	r3, [r7, #11]
900015de:	b299      	uxth	r1, r3
900015e0:	893b      	ldrh	r3, [r7, #8]
900015e2:	687a      	ldr	r2, [r7, #4]
900015e4:	47a0      	blx	r4
900015e6:	4603      	mov	r3, r0
}
900015e8:	4618      	mov	r0, r3
900015ea:	371c      	adds	r7, #28
900015ec:	46bd      	mov	sp, r7
900015ee:	bd90      	pop	{r4, r7, pc}

900015f0 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900015f0:	b590      	push	{r4, r7, lr}
900015f2:	b087      	sub	sp, #28
900015f4:	af00      	add	r7, sp, #0
900015f6:	60f8      	str	r0, [r7, #12]
900015f8:	607a      	str	r2, [r7, #4]
900015fa:	461a      	mov	r2, r3
900015fc:	460b      	mov	r3, r1
900015fe:	72fb      	strb	r3, [r7, #11]
90001600:	4613      	mov	r3, r2
90001602:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001604:	68fb      	ldr	r3, [r7, #12]
90001606:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001608:	697b      	ldr	r3, [r7, #20]
9000160a:	68dc      	ldr	r4, [r3, #12]
9000160c:	697b      	ldr	r3, [r7, #20]
9000160e:	8918      	ldrh	r0, [r3, #8]
90001610:	7afb      	ldrb	r3, [r7, #11]
90001612:	b299      	uxth	r1, r3
90001614:	893b      	ldrh	r3, [r7, #8]
90001616:	687a      	ldr	r2, [r7, #4]
90001618:	47a0      	blx	r4
9000161a:	4603      	mov	r3, r0
}
9000161c:	4618      	mov	r0, r3
9000161e:	371c      	adds	r7, #28
90001620:	46bd      	mov	sp, r7
90001622:	bd90      	pop	{r4, r7, pc}

90001624 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90001624:	b590      	push	{r4, r7, lr}
90001626:	b085      	sub	sp, #20
90001628:	af00      	add	r7, sp, #0
9000162a:	60f8      	str	r0, [r7, #12]
9000162c:	607a      	str	r2, [r7, #4]
9000162e:	461a      	mov	r2, r3
90001630:	460b      	mov	r3, r1
90001632:	72fb      	strb	r3, [r7, #11]
90001634:	4613      	mov	r3, r2
90001636:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001638:	68fb      	ldr	r3, [r7, #12]
9000163a:	685c      	ldr	r4, [r3, #4]
9000163c:	68fb      	ldr	r3, [r7, #12]
9000163e:	6898      	ldr	r0, [r3, #8]
90001640:	893b      	ldrh	r3, [r7, #8]
90001642:	7af9      	ldrb	r1, [r7, #11]
90001644:	687a      	ldr	r2, [r7, #4]
90001646:	47a0      	blx	r4
90001648:	4603      	mov	r3, r0
}
9000164a:	4618      	mov	r0, r3
9000164c:	3714      	adds	r7, #20
9000164e:	46bd      	mov	sp, r7
90001650:	bd90      	pop	{r4, r7, pc}

90001652 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90001652:	b580      	push	{r7, lr}
90001654:	b084      	sub	sp, #16
90001656:	af00      	add	r7, sp, #0
90001658:	6078      	str	r0, [r7, #4]
9000165a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
9000165c:	2301      	movs	r3, #1
9000165e:	683a      	ldr	r2, [r7, #0]
90001660:	21a8      	movs	r1, #168	@ 0xa8
90001662:	6878      	ldr	r0, [r7, #4]
90001664:	f7ff ffde 	bl	90001624 <ft5336_read_reg>
90001668:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
9000166a:	68fb      	ldr	r3, [r7, #12]
9000166c:	2b00      	cmp	r3, #0
9000166e:	d107      	bne.n	90001680 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
90001670:	683b      	ldr	r3, [r7, #0]
90001672:	781a      	ldrb	r2, [r3, #0]
90001674:	683b      	ldr	r3, [r7, #0]
90001676:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
90001678:	683b      	ldr	r3, [r7, #0]
9000167a:	781a      	ldrb	r2, [r3, #0]
9000167c:	683b      	ldr	r3, [r7, #0]
9000167e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90001680:	68fb      	ldr	r3, [r7, #12]
}
90001682:	4618      	mov	r0, r3
90001684:	3710      	adds	r7, #16
90001686:	46bd      	mov	sp, r7
90001688:	bd80      	pop	{r7, pc}

9000168a <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000168a:	b580      	push	{r7, lr}
9000168c:	b084      	sub	sp, #16
9000168e:	af00      	add	r7, sp, #0
90001690:	6078      	str	r0, [r7, #4]
90001692:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001694:	f04f 33ff 	mov.w	r3, #4294967295
90001698:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000169a:	683b      	ldr	r3, [r7, #0]
9000169c:	681b      	ldr	r3, [r3, #0]
9000169e:	4619      	mov	r1, r3
900016a0:	6878      	ldr	r0, [r7, #4]
900016a2:	f000 f831 	bl	90001708 <MT48LC4M32B2_ClockEnable>
900016a6:	4603      	mov	r3, r0
900016a8:	2b00      	cmp	r3, #0
900016aa:	d128      	bne.n	900016fe <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
900016ac:	2001      	movs	r0, #1
900016ae:	f000 f8e1 	bl	90001874 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900016b2:	683b      	ldr	r3, [r7, #0]
900016b4:	681b      	ldr	r3, [r3, #0]
900016b6:	4619      	mov	r1, r3
900016b8:	6878      	ldr	r0, [r7, #4]
900016ba:	f000 f849 	bl	90001750 <MT48LC4M32B2_Precharge>
900016be:	4603      	mov	r3, r0
900016c0:	2b00      	cmp	r3, #0
900016c2:	d11c      	bne.n	900016fe <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
900016c4:	683b      	ldr	r3, [r7, #0]
900016c6:	6819      	ldr	r1, [r3, #0]
900016c8:	683b      	ldr	r3, [r7, #0]
900016ca:	685b      	ldr	r3, [r3, #4]
900016cc:	461a      	mov	r2, r3
900016ce:	6878      	ldr	r0, [r7, #4]
900016d0:	f000 f896 	bl	90001800 <MT48LC4M32B2_RefreshMode>
900016d4:	4603      	mov	r3, r0
900016d6:	2b00      	cmp	r3, #0
900016d8:	d111      	bne.n	900016fe <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
900016da:	6839      	ldr	r1, [r7, #0]
900016dc:	6878      	ldr	r0, [r7, #4]
900016de:	f000 f85b 	bl	90001798 <MT48LC4M32B2_ModeRegConfig>
900016e2:	4603      	mov	r3, r0
900016e4:	2b00      	cmp	r3, #0
900016e6:	d10a      	bne.n	900016fe <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
900016e8:	683b      	ldr	r3, [r7, #0]
900016ea:	689b      	ldr	r3, [r3, #8]
900016ec:	4619      	mov	r1, r3
900016ee:	6878      	ldr	r0, [r7, #4]
900016f0:	f000 f8ac 	bl	9000184c <MT48LC4M32B2_RefreshRate>
900016f4:	4603      	mov	r3, r0
900016f6:	2b00      	cmp	r3, #0
900016f8:	d101      	bne.n	900016fe <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
900016fa:	2300      	movs	r3, #0
900016fc:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
900016fe:	68fb      	ldr	r3, [r7, #12]
}
90001700:	4618      	mov	r0, r3
90001702:	3710      	adds	r7, #16
90001704:	46bd      	mov	sp, r7
90001706:	bd80      	pop	{r7, pc}

90001708 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001708:	b580      	push	{r7, lr}
9000170a:	b082      	sub	sp, #8
9000170c:	af00      	add	r7, sp, #0
9000170e:	6078      	str	r0, [r7, #4]
90001710:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90001712:	4b0e      	ldr	r3, [pc, #56]	@ (9000174c <MT48LC4M32B2_ClockEnable+0x44>)
90001714:	2201      	movs	r2, #1
90001716:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001718:	4a0c      	ldr	r2, [pc, #48]	@ (9000174c <MT48LC4M32B2_ClockEnable+0x44>)
9000171a:	683b      	ldr	r3, [r7, #0]
9000171c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000171e:	4b0b      	ldr	r3, [pc, #44]	@ (9000174c <MT48LC4M32B2_ClockEnable+0x44>)
90001720:	2201      	movs	r2, #1
90001722:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001724:	4b09      	ldr	r3, [pc, #36]	@ (9000174c <MT48LC4M32B2_ClockEnable+0x44>)
90001726:	2200      	movs	r2, #0
90001728:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000172a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000172e:	4907      	ldr	r1, [pc, #28]	@ (9000174c <MT48LC4M32B2_ClockEnable+0x44>)
90001730:	6878      	ldr	r0, [r7, #4]
90001732:	f008 f8cf 	bl	900098d4 <HAL_SDRAM_SendCommand>
90001736:	4603      	mov	r3, r0
90001738:	2b00      	cmp	r3, #0
9000173a:	d002      	beq.n	90001742 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
9000173c:	f04f 33ff 	mov.w	r3, #4294967295
90001740:	e000      	b.n	90001744 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001742:	2300      	movs	r3, #0
  }
}
90001744:	4618      	mov	r0, r3
90001746:	3708      	adds	r7, #8
90001748:	46bd      	mov	sp, r7
9000174a:	bd80      	pop	{r7, pc}
9000174c:	20000634 	.word	0x20000634

90001750 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001750:	b580      	push	{r7, lr}
90001752:	b082      	sub	sp, #8
90001754:	af00      	add	r7, sp, #0
90001756:	6078      	str	r0, [r7, #4]
90001758:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
9000175a:	4b0e      	ldr	r3, [pc, #56]	@ (90001794 <MT48LC4M32B2_Precharge+0x44>)
9000175c:	2202      	movs	r2, #2
9000175e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001760:	4a0c      	ldr	r2, [pc, #48]	@ (90001794 <MT48LC4M32B2_Precharge+0x44>)
90001762:	683b      	ldr	r3, [r7, #0]
90001764:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001766:	4b0b      	ldr	r3, [pc, #44]	@ (90001794 <MT48LC4M32B2_Precharge+0x44>)
90001768:	2201      	movs	r2, #1
9000176a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000176c:	4b09      	ldr	r3, [pc, #36]	@ (90001794 <MT48LC4M32B2_Precharge+0x44>)
9000176e:	2200      	movs	r2, #0
90001770:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001776:	4907      	ldr	r1, [pc, #28]	@ (90001794 <MT48LC4M32B2_Precharge+0x44>)
90001778:	6878      	ldr	r0, [r7, #4]
9000177a:	f008 f8ab 	bl	900098d4 <HAL_SDRAM_SendCommand>
9000177e:	4603      	mov	r3, r0
90001780:	2b00      	cmp	r3, #0
90001782:	d002      	beq.n	9000178a <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001784:	f04f 33ff 	mov.w	r3, #4294967295
90001788:	e000      	b.n	9000178c <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000178a:	2300      	movs	r3, #0
  }
}
9000178c:	4618      	mov	r0, r3
9000178e:	3708      	adds	r7, #8
90001790:	46bd      	mov	sp, r7
90001792:	bd80      	pop	{r7, pc}
90001794:	20000634 	.word	0x20000634

90001798 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001798:	b580      	push	{r7, lr}
9000179a:	b084      	sub	sp, #16
9000179c:	af00      	add	r7, sp, #0
9000179e:	6078      	str	r0, [r7, #4]
900017a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900017a2:	683b      	ldr	r3, [r7, #0]
900017a4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
900017a6:	683b      	ldr	r3, [r7, #0]
900017a8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900017aa:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
900017ac:	683b      	ldr	r3, [r7, #0]
900017ae:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
900017b0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
900017b2:	683b      	ldr	r3, [r7, #0]
900017b4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
900017b6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
900017b8:	683b      	ldr	r3, [r7, #0]
900017ba:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900017bc:	4313      	orrs	r3, r2
900017be:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
900017c0:	4b0e      	ldr	r3, [pc, #56]	@ (900017fc <MT48LC4M32B2_ModeRegConfig+0x64>)
900017c2:	2204      	movs	r2, #4
900017c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
900017c6:	683b      	ldr	r3, [r7, #0]
900017c8:	681b      	ldr	r3, [r3, #0]
900017ca:	4a0c      	ldr	r2, [pc, #48]	@ (900017fc <MT48LC4M32B2_ModeRegConfig+0x64>)
900017cc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900017ce:	4b0b      	ldr	r3, [pc, #44]	@ (900017fc <MT48LC4M32B2_ModeRegConfig+0x64>)
900017d0:	2201      	movs	r2, #1
900017d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
900017d4:	4a09      	ldr	r2, [pc, #36]	@ (900017fc <MT48LC4M32B2_ModeRegConfig+0x64>)
900017d6:	68fb      	ldr	r3, [r7, #12]
900017d8:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900017da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900017de:	4907      	ldr	r1, [pc, #28]	@ (900017fc <MT48LC4M32B2_ModeRegConfig+0x64>)
900017e0:	6878      	ldr	r0, [r7, #4]
900017e2:	f008 f877 	bl	900098d4 <HAL_SDRAM_SendCommand>
900017e6:	4603      	mov	r3, r0
900017e8:	2b00      	cmp	r3, #0
900017ea:	d002      	beq.n	900017f2 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
900017ec:	f04f 33ff 	mov.w	r3, #4294967295
900017f0:	e000      	b.n	900017f4 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900017f2:	2300      	movs	r3, #0
  }
}
900017f4:	4618      	mov	r0, r3
900017f6:	3710      	adds	r7, #16
900017f8:	46bd      	mov	sp, r7
900017fa:	bd80      	pop	{r7, pc}
900017fc:	20000634 	.word	0x20000634

90001800 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001800:	b580      	push	{r7, lr}
90001802:	b084      	sub	sp, #16
90001804:	af00      	add	r7, sp, #0
90001806:	60f8      	str	r0, [r7, #12]
90001808:	60b9      	str	r1, [r7, #8]
9000180a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
9000180c:	4a0e      	ldr	r2, [pc, #56]	@ (90001848 <MT48LC4M32B2_RefreshMode+0x48>)
9000180e:	687b      	ldr	r3, [r7, #4]
90001810:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001812:	4a0d      	ldr	r2, [pc, #52]	@ (90001848 <MT48LC4M32B2_RefreshMode+0x48>)
90001814:	68bb      	ldr	r3, [r7, #8]
90001816:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001818:	4b0b      	ldr	r3, [pc, #44]	@ (90001848 <MT48LC4M32B2_RefreshMode+0x48>)
9000181a:	2208      	movs	r2, #8
9000181c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000181e:	4b0a      	ldr	r3, [pc, #40]	@ (90001848 <MT48LC4M32B2_RefreshMode+0x48>)
90001820:	2200      	movs	r2, #0
90001822:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001824:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001828:	4907      	ldr	r1, [pc, #28]	@ (90001848 <MT48LC4M32B2_RefreshMode+0x48>)
9000182a:	68f8      	ldr	r0, [r7, #12]
9000182c:	f008 f852 	bl	900098d4 <HAL_SDRAM_SendCommand>
90001830:	4603      	mov	r3, r0
90001832:	2b00      	cmp	r3, #0
90001834:	d002      	beq.n	9000183c <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001836:	f04f 33ff 	mov.w	r3, #4294967295
9000183a:	e000      	b.n	9000183e <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000183c:	2300      	movs	r3, #0
  }
}
9000183e:	4618      	mov	r0, r3
90001840:	3710      	adds	r7, #16
90001842:	46bd      	mov	sp, r7
90001844:	bd80      	pop	{r7, pc}
90001846:	bf00      	nop
90001848:	20000634 	.word	0x20000634

9000184c <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
9000184c:	b580      	push	{r7, lr}
9000184e:	b082      	sub	sp, #8
90001850:	af00      	add	r7, sp, #0
90001852:	6078      	str	r0, [r7, #4]
90001854:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90001856:	6839      	ldr	r1, [r7, #0]
90001858:	6878      	ldr	r0, [r7, #4]
9000185a:	f008 f870 	bl	9000993e <HAL_SDRAM_ProgramRefreshRate>
9000185e:	4603      	mov	r3, r0
90001860:	2b00      	cmp	r3, #0
90001862:	d002      	beq.n	9000186a <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001864:	f04f 33ff 	mov.w	r3, #4294967295
90001868:	e000      	b.n	9000186c <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000186a:	2300      	movs	r3, #0
  }
}
9000186c:	4618      	mov	r0, r3
9000186e:	3708      	adds	r7, #8
90001870:	46bd      	mov	sp, r7
90001872:	bd80      	pop	{r7, pc}

90001874 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001874:	b580      	push	{r7, lr}
90001876:	b084      	sub	sp, #16
90001878:	af00      	add	r7, sp, #0
9000187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
9000187c:	f001 fd2a 	bl	900032d4 <HAL_GetTick>
90001880:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
90001882:	bf00      	nop
90001884:	f001 fd26 	bl	900032d4 <HAL_GetTick>
90001888:	4602      	mov	r2, r0
9000188a:	68fb      	ldr	r3, [r7, #12]
9000188c:	1ad3      	subs	r3, r2, r3
9000188e:	687a      	ldr	r2, [r7, #4]
90001890:	429a      	cmp	r2, r3
90001892:	d8f7      	bhi.n	90001884 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001894:	2300      	movs	r3, #0
}
90001896:	4618      	mov	r0, r3
90001898:	3710      	adds	r7, #16
9000189a:	46bd      	mov	sp, r7
9000189c:	bd80      	pop	{r7, pc}
	...

900018a0 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
900018a0:	b580      	push	{r7, lr}
900018a2:	b082      	sub	sp, #8
900018a4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
900018a6:	2300      	movs	r3, #0
900018a8:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
900018aa:	4b16      	ldr	r3, [pc, #88]	@ (90001904 <BSP_I2C4_Init+0x64>)
900018ac:	4a16      	ldr	r2, [pc, #88]	@ (90001908 <BSP_I2C4_Init+0x68>)
900018ae:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
900018b0:	4b16      	ldr	r3, [pc, #88]	@ (9000190c <BSP_I2C4_Init+0x6c>)
900018b2:	681b      	ldr	r3, [r3, #0]
900018b4:	2b00      	cmp	r3, #0
900018b6:	d11f      	bne.n	900018f8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
900018b8:	4b14      	ldr	r3, [pc, #80]	@ (9000190c <BSP_I2C4_Init+0x6c>)
900018ba:	681b      	ldr	r3, [r3, #0]
900018bc:	3301      	adds	r3, #1
900018be:	4a13      	ldr	r2, [pc, #76]	@ (9000190c <BSP_I2C4_Init+0x6c>)
900018c0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
900018c2:	4810      	ldr	r0, [pc, #64]	@ (90001904 <BSP_I2C4_Init+0x64>)
900018c4:	f004 faf8 	bl	90005eb8 <HAL_I2C_GetState>
900018c8:	4603      	mov	r3, r0
900018ca:	2b00      	cmp	r3, #0
900018cc:	d114      	bne.n	900018f8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
900018ce:	480d      	ldr	r0, [pc, #52]	@ (90001904 <BSP_I2C4_Init+0x64>)
900018d0:	f000 fb06 	bl	90001ee0 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900018d4:	f006 f976 	bl	90007bc4 <HAL_RCC_GetPCLK2Freq>
900018d8:	4603      	mov	r3, r0
900018da:	490d      	ldr	r1, [pc, #52]	@ (90001910 <BSP_I2C4_Init+0x70>)
900018dc:	4618      	mov	r0, r3
900018de:	f000 f889 	bl	900019f4 <I2C_GetTiming>
900018e2:	4603      	mov	r3, r0
900018e4:	4619      	mov	r1, r3
900018e6:	4807      	ldr	r0, [pc, #28]	@ (90001904 <BSP_I2C4_Init+0x64>)
900018e8:	f000 f814 	bl	90001914 <MX_I2C4_Init>
900018ec:	4603      	mov	r3, r0
900018ee:	2b00      	cmp	r3, #0
900018f0:	d002      	beq.n	900018f8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
900018f2:	f06f 0307 	mvn.w	r3, #7
900018f6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
900018f8:	687b      	ldr	r3, [r7, #4]
}
900018fa:	4618      	mov	r0, r3
900018fc:	3708      	adds	r7, #8
900018fe:	46bd      	mov	sp, r7
90001900:	bd80      	pop	{r7, pc}
90001902:	bf00      	nop
90001904:	2000104c 	.word	0x2000104c
90001908:	58001c00 	.word	0x58001c00
9000190c:	20000644 	.word	0x20000644
90001910:	000186a0 	.word	0x000186a0

90001914 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001914:	b580      	push	{r7, lr}
90001916:	b084      	sub	sp, #16
90001918:	af00      	add	r7, sp, #0
9000191a:	6078      	str	r0, [r7, #4]
9000191c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
9000191e:	2300      	movs	r3, #0
90001920:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001922:	687b      	ldr	r3, [r7, #4]
90001924:	683a      	ldr	r2, [r7, #0]
90001926:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001928:	687b      	ldr	r3, [r7, #4]
9000192a:	2200      	movs	r2, #0
9000192c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000192e:	687b      	ldr	r3, [r7, #4]
90001930:	2201      	movs	r2, #1
90001932:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001934:	687b      	ldr	r3, [r7, #4]
90001936:	2200      	movs	r2, #0
90001938:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
9000193a:	687b      	ldr	r3, [r7, #4]
9000193c:	2200      	movs	r2, #0
9000193e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001940:	687b      	ldr	r3, [r7, #4]
90001942:	2200      	movs	r2, #0
90001944:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001946:	687b      	ldr	r3, [r7, #4]
90001948:	2200      	movs	r2, #0
9000194a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
9000194c:	687b      	ldr	r3, [r7, #4]
9000194e:	2200      	movs	r2, #0
90001950:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001952:	6878      	ldr	r0, [r7, #4]
90001954:	f004 f8f0 	bl	90005b38 <HAL_I2C_Init>
90001958:	4603      	mov	r3, r0
9000195a:	2b00      	cmp	r3, #0
9000195c:	d002      	beq.n	90001964 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
9000195e:	2301      	movs	r3, #1
90001960:	73fb      	strb	r3, [r7, #15]
90001962:	e014      	b.n	9000198e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001964:	2300      	movs	r3, #0
90001966:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001968:	68b9      	ldr	r1, [r7, #8]
9000196a:	6878      	ldr	r0, [r7, #4]
9000196c:	f004 fd2c 	bl	900063c8 <HAL_I2CEx_ConfigAnalogFilter>
90001970:	4603      	mov	r3, r0
90001972:	2b00      	cmp	r3, #0
90001974:	d002      	beq.n	9000197c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90001976:	2301      	movs	r3, #1
90001978:	73fb      	strb	r3, [r7, #15]
9000197a:	e008      	b.n	9000198e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
9000197c:	2100      	movs	r1, #0
9000197e:	6878      	ldr	r0, [r7, #4]
90001980:	f004 fd6d 	bl	9000645e <HAL_I2CEx_ConfigDigitalFilter>
90001984:	4603      	mov	r3, r0
90001986:	2b00      	cmp	r3, #0
90001988:	d001      	beq.n	9000198e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
9000198a:	2301      	movs	r3, #1
9000198c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
9000198e:	7bfb      	ldrb	r3, [r7, #15]
}
90001990:	4618      	mov	r0, r3
90001992:	3710      	adds	r7, #16
90001994:	46bd      	mov	sp, r7
90001996:	bd80      	pop	{r7, pc}

90001998 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001998:	b580      	push	{r7, lr}
9000199a:	b088      	sub	sp, #32
9000199c:	af02      	add	r7, sp, #8
9000199e:	60ba      	str	r2, [r7, #8]
900019a0:	461a      	mov	r2, r3
900019a2:	4603      	mov	r3, r0
900019a4:	81fb      	strh	r3, [r7, #14]
900019a6:	460b      	mov	r3, r1
900019a8:	81bb      	strh	r3, [r7, #12]
900019aa:	4613      	mov	r3, r2
900019ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
900019ae:	89b9      	ldrh	r1, [r7, #12]
900019b0:	89f8      	ldrh	r0, [r7, #14]
900019b2:	88fb      	ldrh	r3, [r7, #6]
900019b4:	9300      	str	r3, [sp, #0]
900019b6:	68bb      	ldr	r3, [r7, #8]
900019b8:	2201      	movs	r2, #1
900019ba:	f000 fafd 	bl	90001fb8 <I2C4_ReadReg>
900019be:	4603      	mov	r3, r0
900019c0:	2b00      	cmp	r3, #0
900019c2:	d102      	bne.n	900019ca <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900019c4:	2300      	movs	r3, #0
900019c6:	617b      	str	r3, [r7, #20]
900019c8:	e00c      	b.n	900019e4 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900019ca:	4809      	ldr	r0, [pc, #36]	@ (900019f0 <BSP_I2C4_ReadReg+0x58>)
900019cc:	f004 fa82 	bl	90005ed4 <HAL_I2C_GetError>
900019d0:	4603      	mov	r3, r0
900019d2:	2b04      	cmp	r3, #4
900019d4:	d103      	bne.n	900019de <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900019d6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
900019da:	617b      	str	r3, [r7, #20]
900019dc:	e002      	b.n	900019e4 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900019de:	f06f 0303 	mvn.w	r3, #3
900019e2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900019e4:	697b      	ldr	r3, [r7, #20]
}
900019e6:	4618      	mov	r0, r3
900019e8:	3718      	adds	r7, #24
900019ea:	46bd      	mov	sp, r7
900019ec:	bd80      	pop	{r7, pc}
900019ee:	bf00      	nop
900019f0:	2000104c 	.word	0x2000104c

900019f4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
900019f4:	b580      	push	{r7, lr}
900019f6:	b086      	sub	sp, #24
900019f8:	af00      	add	r7, sp, #0
900019fa:	6078      	str	r0, [r7, #4]
900019fc:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
900019fe:	2300      	movs	r3, #0
90001a00:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001a02:	687b      	ldr	r3, [r7, #4]
90001a04:	2b00      	cmp	r3, #0
90001a06:	d06b      	beq.n	90001ae0 <I2C_GetTiming+0xec>
90001a08:	683b      	ldr	r3, [r7, #0]
90001a0a:	2b00      	cmp	r3, #0
90001a0c:	d068      	beq.n	90001ae0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001a0e:	2300      	movs	r3, #0
90001a10:	613b      	str	r3, [r7, #16]
90001a12:	e060      	b.n	90001ad6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001a14:	4a35      	ldr	r2, [pc, #212]	@ (90001aec <I2C_GetTiming+0xf8>)
90001a16:	693b      	ldr	r3, [r7, #16]
90001a18:	212c      	movs	r1, #44	@ 0x2c
90001a1a:	fb01 f303 	mul.w	r3, r1, r3
90001a1e:	4413      	add	r3, r2
90001a20:	3304      	adds	r3, #4
90001a22:	681b      	ldr	r3, [r3, #0]
90001a24:	683a      	ldr	r2, [r7, #0]
90001a26:	429a      	cmp	r2, r3
90001a28:	d352      	bcc.n	90001ad0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001a2a:	4a30      	ldr	r2, [pc, #192]	@ (90001aec <I2C_GetTiming+0xf8>)
90001a2c:	693b      	ldr	r3, [r7, #16]
90001a2e:	212c      	movs	r1, #44	@ 0x2c
90001a30:	fb01 f303 	mul.w	r3, r1, r3
90001a34:	4413      	add	r3, r2
90001a36:	3308      	adds	r3, #8
90001a38:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001a3a:	683a      	ldr	r2, [r7, #0]
90001a3c:	429a      	cmp	r2, r3
90001a3e:	d847      	bhi.n	90001ad0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001a40:	6939      	ldr	r1, [r7, #16]
90001a42:	6878      	ldr	r0, [r7, #4]
90001a44:	f000 f856 	bl	90001af4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001a48:	6939      	ldr	r1, [r7, #16]
90001a4a:	6878      	ldr	r0, [r7, #4]
90001a4c:	f000 f940 	bl	90001cd0 <I2C_Compute_SCLL_SCLH>
90001a50:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001a52:	68fb      	ldr	r3, [r7, #12]
90001a54:	2b7f      	cmp	r3, #127	@ 0x7f
90001a56:	d842      	bhi.n	90001ade <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001a58:	4925      	ldr	r1, [pc, #148]	@ (90001af0 <I2C_GetTiming+0xfc>)
90001a5a:	68fa      	ldr	r2, [r7, #12]
90001a5c:	4613      	mov	r3, r2
90001a5e:	009b      	lsls	r3, r3, #2
90001a60:	4413      	add	r3, r2
90001a62:	009b      	lsls	r3, r3, #2
90001a64:	440b      	add	r3, r1
90001a66:	681b      	ldr	r3, [r3, #0]
90001a68:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001a6a:	4821      	ldr	r0, [pc, #132]	@ (90001af0 <I2C_GetTiming+0xfc>)
90001a6c:	68fa      	ldr	r2, [r7, #12]
90001a6e:	4613      	mov	r3, r2
90001a70:	009b      	lsls	r3, r3, #2
90001a72:	4413      	add	r3, r2
90001a74:	009b      	lsls	r3, r3, #2
90001a76:	4403      	add	r3, r0
90001a78:	3304      	adds	r3, #4
90001a7a:	681b      	ldr	r3, [r3, #0]
90001a7c:	051b      	lsls	r3, r3, #20
90001a7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001a82:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001a84:	481a      	ldr	r0, [pc, #104]	@ (90001af0 <I2C_GetTiming+0xfc>)
90001a86:	68fa      	ldr	r2, [r7, #12]
90001a88:	4613      	mov	r3, r2
90001a8a:	009b      	lsls	r3, r3, #2
90001a8c:	4413      	add	r3, r2
90001a8e:	009b      	lsls	r3, r3, #2
90001a90:	4403      	add	r3, r0
90001a92:	3308      	adds	r3, #8
90001a94:	681b      	ldr	r3, [r3, #0]
90001a96:	041b      	lsls	r3, r3, #16
90001a98:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001a9c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001a9e:	4814      	ldr	r0, [pc, #80]	@ (90001af0 <I2C_GetTiming+0xfc>)
90001aa0:	68fa      	ldr	r2, [r7, #12]
90001aa2:	4613      	mov	r3, r2
90001aa4:	009b      	lsls	r3, r3, #2
90001aa6:	4413      	add	r3, r2
90001aa8:	009b      	lsls	r3, r3, #2
90001aaa:	4403      	add	r3, r0
90001aac:	330c      	adds	r3, #12
90001aae:	681b      	ldr	r3, [r3, #0]
90001ab0:	021b      	lsls	r3, r3, #8
90001ab2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001ab4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001ab6:	480e      	ldr	r0, [pc, #56]	@ (90001af0 <I2C_GetTiming+0xfc>)
90001ab8:	68fa      	ldr	r2, [r7, #12]
90001aba:	4613      	mov	r3, r2
90001abc:	009b      	lsls	r3, r3, #2
90001abe:	4413      	add	r3, r2
90001ac0:	009b      	lsls	r3, r3, #2
90001ac2:	4403      	add	r3, r0
90001ac4:	3310      	adds	r3, #16
90001ac6:	681b      	ldr	r3, [r3, #0]
90001ac8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001aca:	430b      	orrs	r3, r1
90001acc:	617b      	str	r3, [r7, #20]
        }
        break;
90001ace:	e006      	b.n	90001ade <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001ad0:	693b      	ldr	r3, [r7, #16]
90001ad2:	3301      	adds	r3, #1
90001ad4:	613b      	str	r3, [r7, #16]
90001ad6:	693b      	ldr	r3, [r7, #16]
90001ad8:	2b02      	cmp	r3, #2
90001ada:	d99b      	bls.n	90001a14 <I2C_GetTiming+0x20>
90001adc:	e000      	b.n	90001ae0 <I2C_GetTiming+0xec>
        break;
90001ade:	bf00      	nop
      }
    }
  }

  return ret;
90001ae0:	697b      	ldr	r3, [r7, #20]
}
90001ae2:	4618      	mov	r0, r3
90001ae4:	3718      	adds	r7, #24
90001ae6:	46bd      	mov	sp, r7
90001ae8:	bd80      	pop	{r7, pc}
90001aea:	bf00      	nop
90001aec:	9000d730 	.word	0x9000d730
90001af0:	20000648 	.word	0x20000648

90001af4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001af4:	b480      	push	{r7}
90001af6:	b08f      	sub	sp, #60	@ 0x3c
90001af8:	af00      	add	r7, sp, #0
90001afa:	6078      	str	r0, [r7, #4]
90001afc:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001afe:	2310      	movs	r3, #16
90001b00:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001b02:	687b      	ldr	r3, [r7, #4]
90001b04:	085a      	lsrs	r2, r3, #1
90001b06:	4b6e      	ldr	r3, [pc, #440]	@ (90001cc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001b08:	4413      	add	r3, r2
90001b0a:	687a      	ldr	r2, [r7, #4]
90001b0c:	fbb3 f3f2 	udiv	r3, r3, r2
90001b10:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001b12:	2332      	movs	r3, #50	@ 0x32
90001b14:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001b16:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001b1a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001b1c:	4a69      	ldr	r2, [pc, #420]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b1e:	683b      	ldr	r3, [r7, #0]
90001b20:	212c      	movs	r1, #44	@ 0x2c
90001b22:	fb01 f303 	mul.w	r3, r1, r3
90001b26:	4413      	add	r3, r2
90001b28:	3324      	adds	r3, #36	@ 0x24
90001b2a:	681b      	ldr	r3, [r3, #0]
90001b2c:	4618      	mov	r0, r3
90001b2e:	4a65      	ldr	r2, [pc, #404]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b30:	683b      	ldr	r3, [r7, #0]
90001b32:	212c      	movs	r1, #44	@ 0x2c
90001b34:	fb01 f303 	mul.w	r3, r1, r3
90001b38:	4413      	add	r3, r2
90001b3a:	330c      	adds	r3, #12
90001b3c:	681b      	ldr	r3, [r3, #0]
90001b3e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001b40:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001b42:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001b44:	495f      	ldr	r1, [pc, #380]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b46:	683b      	ldr	r3, [r7, #0]
90001b48:	202c      	movs	r0, #44	@ 0x2c
90001b4a:	fb00 f303 	mul.w	r3, r0, r3
90001b4e:	440b      	add	r3, r1
90001b50:	3328      	adds	r3, #40	@ 0x28
90001b52:	681b      	ldr	r3, [r3, #0]
90001b54:	3303      	adds	r3, #3
90001b56:	69f9      	ldr	r1, [r7, #28]
90001b58:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001b5c:	1ad3      	subs	r3, r2, r3
90001b5e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001b60:	4a58      	ldr	r2, [pc, #352]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b62:	683b      	ldr	r3, [r7, #0]
90001b64:	212c      	movs	r1, #44	@ 0x2c
90001b66:	fb01 f303 	mul.w	r3, r1, r3
90001b6a:	4413      	add	r3, r2
90001b6c:	3310      	adds	r3, #16
90001b6e:	681b      	ldr	r3, [r3, #0]
90001b70:	4618      	mov	r0, r3
90001b72:	4a54      	ldr	r2, [pc, #336]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b74:	683b      	ldr	r3, [r7, #0]
90001b76:	212c      	movs	r1, #44	@ 0x2c
90001b78:	fb01 f303 	mul.w	r3, r1, r3
90001b7c:	4413      	add	r3, r2
90001b7e:	3320      	adds	r3, #32
90001b80:	681b      	ldr	r3, [r3, #0]
90001b82:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001b84:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001b86:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001b88:	494e      	ldr	r1, [pc, #312]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b8a:	683b      	ldr	r3, [r7, #0]
90001b8c:	202c      	movs	r0, #44	@ 0x2c
90001b8e:	fb00 f303 	mul.w	r3, r0, r3
90001b92:	440b      	add	r3, r1
90001b94:	3328      	adds	r3, #40	@ 0x28
90001b96:	681b      	ldr	r3, [r3, #0]
90001b98:	3304      	adds	r3, #4
90001b9a:	69f9      	ldr	r1, [r7, #28]
90001b9c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001ba0:	1ad3      	subs	r3, r2, r3
90001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001ba4:	4a47      	ldr	r2, [pc, #284]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ba6:	683b      	ldr	r3, [r7, #0]
90001ba8:	212c      	movs	r1, #44	@ 0x2c
90001baa:	fb01 f303 	mul.w	r3, r1, r3
90001bae:	4413      	add	r3, r2
90001bb0:	3320      	adds	r3, #32
90001bb2:	681b      	ldr	r3, [r3, #0]
90001bb4:	4618      	mov	r0, r3
90001bb6:	4a43      	ldr	r2, [pc, #268]	@ (90001cc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001bb8:	683b      	ldr	r3, [r7, #0]
90001bba:	212c      	movs	r1, #44	@ 0x2c
90001bbc:	fb01 f303 	mul.w	r3, r1, r3
90001bc0:	4413      	add	r3, r2
90001bc2:	3314      	adds	r3, #20
90001bc4:	681b      	ldr	r3, [r3, #0]
90001bc6:	4403      	add	r3, r0
90001bc8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001bcc:	2b00      	cmp	r3, #0
90001bce:	dc01      	bgt.n	90001bd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001bd0:	2300      	movs	r3, #0
90001bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001bd6:	2b00      	cmp	r3, #0
90001bd8:	dc01      	bgt.n	90001bde <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001bda:	2300      	movs	r3, #0
90001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001bde:	2300      	movs	r3, #0
90001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
90001be2:	e062      	b.n	90001caa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001be4:	2300      	movs	r3, #0
90001be6:	627b      	str	r3, [r7, #36]	@ 0x24
90001be8:	e059      	b.n	90001c9e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001bec:	3301      	adds	r3, #1
90001bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001bf0:	3201      	adds	r2, #1
90001bf2:	fb03 f202 	mul.w	r2, r3, r2
90001bf6:	69fb      	ldr	r3, [r7, #28]
90001bf8:	fb02 f303 	mul.w	r3, r2, r3
90001bfc:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001bfe:	693b      	ldr	r3, [r7, #16]
90001c00:	68fa      	ldr	r2, [r7, #12]
90001c02:	429a      	cmp	r2, r3
90001c04:	d348      	bcc.n	90001c98 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001c06:	2300      	movs	r3, #0
90001c08:	623b      	str	r3, [r7, #32]
90001c0a:	e042      	b.n	90001c92 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c0e:	3301      	adds	r3, #1
90001c10:	6a3a      	ldr	r2, [r7, #32]
90001c12:	fb03 f202 	mul.w	r2, r3, r2
90001c16:	69fb      	ldr	r3, [r7, #28]
90001c18:	fb02 f303 	mul.w	r3, r2, r3
90001c1c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c20:	68ba      	ldr	r2, [r7, #8]
90001c22:	429a      	cmp	r2, r3
90001c24:	d332      	bcc.n	90001c8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001c28:	68ba      	ldr	r2, [r7, #8]
90001c2a:	429a      	cmp	r2, r3
90001c2c:	d82e      	bhi.n	90001c8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001c2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001c32:	429a      	cmp	r2, r3
90001c34:	d02a      	beq.n	90001c8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001c36:	4b24      	ldr	r3, [pc, #144]	@ (90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c38:	681a      	ldr	r2, [r3, #0]
90001c3a:	4924      	ldr	r1, [pc, #144]	@ (90001ccc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001c3c:	4613      	mov	r3, r2
90001c3e:	009b      	lsls	r3, r3, #2
90001c40:	4413      	add	r3, r2
90001c42:	009b      	lsls	r3, r3, #2
90001c44:	440b      	add	r3, r1
90001c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001c48:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001c4a:	4b1f      	ldr	r3, [pc, #124]	@ (90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c4c:	681a      	ldr	r2, [r3, #0]
90001c4e:	491f      	ldr	r1, [pc, #124]	@ (90001ccc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001c50:	4613      	mov	r3, r2
90001c52:	009b      	lsls	r3, r3, #2
90001c54:	4413      	add	r3, r2
90001c56:	009b      	lsls	r3, r3, #2
90001c58:	440b      	add	r3, r1
90001c5a:	3304      	adds	r3, #4
90001c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001c5e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001c60:	4b19      	ldr	r3, [pc, #100]	@ (90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c62:	681a      	ldr	r2, [r3, #0]
90001c64:	4919      	ldr	r1, [pc, #100]	@ (90001ccc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001c66:	4613      	mov	r3, r2
90001c68:	009b      	lsls	r3, r3, #2
90001c6a:	4413      	add	r3, r2
90001c6c:	009b      	lsls	r3, r3, #2
90001c6e:	440b      	add	r3, r1
90001c70:	3308      	adds	r3, #8
90001c72:	6a3a      	ldr	r2, [r7, #32]
90001c74:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c78:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001c7a:	4b13      	ldr	r3, [pc, #76]	@ (90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c7c:	681b      	ldr	r3, [r3, #0]
90001c7e:	3301      	adds	r3, #1
90001c80:	4a11      	ldr	r2, [pc, #68]	@ (90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c82:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001c84:	4b10      	ldr	r3, [pc, #64]	@ (90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c86:	681b      	ldr	r3, [r3, #0]
90001c88:	2b7f      	cmp	r3, #127	@ 0x7f
90001c8a:	d812      	bhi.n	90001cb2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001c8c:	6a3b      	ldr	r3, [r7, #32]
90001c8e:	3301      	adds	r3, #1
90001c90:	623b      	str	r3, [r7, #32]
90001c92:	6a3b      	ldr	r3, [r7, #32]
90001c94:	2b0f      	cmp	r3, #15
90001c96:	d9b9      	bls.n	90001c0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001c9a:	3301      	adds	r3, #1
90001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
90001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001ca0:	2b0f      	cmp	r3, #15
90001ca2:	d9a2      	bls.n	90001bea <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001ca6:	3301      	adds	r3, #1
90001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
90001caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001cac:	2b0f      	cmp	r3, #15
90001cae:	d999      	bls.n	90001be4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001cb0:	e000      	b.n	90001cb4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001cb2:	bf00      	nop
          }
        }
      }
    }
  }
}
90001cb4:	373c      	adds	r7, #60	@ 0x3c
90001cb6:	46bd      	mov	sp, r7
90001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
90001cbc:	4770      	bx	lr
90001cbe:	bf00      	nop
90001cc0:	3b9aca00 	.word	0x3b9aca00
90001cc4:	9000d730 	.word	0x9000d730
90001cc8:	20001048 	.word	0x20001048
90001ccc:	20000648 	.word	0x20000648

90001cd0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001cd0:	b480      	push	{r7}
90001cd2:	b093      	sub	sp, #76	@ 0x4c
90001cd4:	af00      	add	r7, sp, #0
90001cd6:	6078      	str	r0, [r7, #4]
90001cd8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001cda:	f04f 33ff 	mov.w	r3, #4294967295
90001cde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001ce0:	687b      	ldr	r3, [r7, #4]
90001ce2:	085a      	lsrs	r2, r3, #1
90001ce4:	4b7a      	ldr	r3, [pc, #488]	@ (90001ed0 <I2C_Compute_SCLL_SCLH+0x200>)
90001ce6:	4413      	add	r3, r2
90001ce8:	687a      	ldr	r2, [r7, #4]
90001cea:	fbb3 f3f2 	udiv	r3, r3, r2
90001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001cf0:	4a78      	ldr	r2, [pc, #480]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001cf2:	683b      	ldr	r3, [r7, #0]
90001cf4:	212c      	movs	r1, #44	@ 0x2c
90001cf6:	fb01 f303 	mul.w	r3, r1, r3
90001cfa:	4413      	add	r3, r2
90001cfc:	681b      	ldr	r3, [r3, #0]
90001cfe:	085a      	lsrs	r2, r3, #1
90001d00:	4b73      	ldr	r3, [pc, #460]	@ (90001ed0 <I2C_Compute_SCLL_SCLH+0x200>)
90001d02:	4413      	add	r3, r2
90001d04:	4973      	ldr	r1, [pc, #460]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001d06:	683a      	ldr	r2, [r7, #0]
90001d08:	202c      	movs	r0, #44	@ 0x2c
90001d0a:	fb00 f202 	mul.w	r2, r0, r2
90001d0e:	440a      	add	r2, r1
90001d10:	6812      	ldr	r2, [r2, #0]
90001d12:	fbb3 f3f2 	udiv	r3, r3, r2
90001d16:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001d18:	2332      	movs	r3, #50	@ 0x32
90001d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001d1c:	4a6d      	ldr	r2, [pc, #436]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001d1e:	683b      	ldr	r3, [r7, #0]
90001d20:	212c      	movs	r1, #44	@ 0x2c
90001d22:	fb01 f303 	mul.w	r3, r1, r3
90001d26:	4413      	add	r3, r2
90001d28:	3328      	adds	r3, #40	@ 0x28
90001d2a:	681a      	ldr	r2, [r3, #0]
90001d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d2e:	fb02 f303 	mul.w	r3, r2, r3
90001d32:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001d34:	4a67      	ldr	r2, [pc, #412]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001d36:	683b      	ldr	r3, [r7, #0]
90001d38:	212c      	movs	r1, #44	@ 0x2c
90001d3a:	fb01 f303 	mul.w	r3, r1, r3
90001d3e:	4413      	add	r3, r2
90001d40:	3304      	adds	r3, #4
90001d42:	681b      	ldr	r3, [r3, #0]
90001d44:	4a62      	ldr	r2, [pc, #392]	@ (90001ed0 <I2C_Compute_SCLL_SCLH+0x200>)
90001d46:	fbb2 f3f3 	udiv	r3, r2, r3
90001d4a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001d4c:	4a61      	ldr	r2, [pc, #388]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001d4e:	683b      	ldr	r3, [r7, #0]
90001d50:	212c      	movs	r1, #44	@ 0x2c
90001d52:	fb01 f303 	mul.w	r3, r1, r3
90001d56:	4413      	add	r3, r2
90001d58:	3308      	adds	r3, #8
90001d5a:	681b      	ldr	r3, [r3, #0]
90001d5c:	4a5c      	ldr	r2, [pc, #368]	@ (90001ed0 <I2C_Compute_SCLL_SCLH+0x200>)
90001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
90001d62:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001d66:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001d68:	2300      	movs	r3, #0
90001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
90001d6c:	e0a3      	b.n	90001eb6 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001d6e:	495a      	ldr	r1, [pc, #360]	@ (90001ed8 <I2C_Compute_SCLL_SCLH+0x208>)
90001d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001d72:	4613      	mov	r3, r2
90001d74:	009b      	lsls	r3, r3, #2
90001d76:	4413      	add	r3, r2
90001d78:	009b      	lsls	r3, r3, #2
90001d7a:	440b      	add	r3, r1
90001d7c:	681b      	ldr	r3, [r3, #0]
90001d7e:	1c5a      	adds	r2, r3, #1
90001d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d82:	fb02 f303 	mul.w	r3, r2, r3
90001d86:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001d88:	2300      	movs	r3, #0
90001d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001d8c:	e08c      	b.n	90001ea8 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001d90:	6a3b      	ldr	r3, [r7, #32]
90001d92:	441a      	add	r2, r3
90001d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001d96:	3301      	adds	r3, #1
90001d98:	6979      	ldr	r1, [r7, #20]
90001d9a:	fb03 f101 	mul.w	r1, r3, r1
90001d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001da0:	005b      	lsls	r3, r3, #1
90001da2:	440b      	add	r3, r1
90001da4:	4413      	add	r3, r2
90001da6:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001da8:	4a4a      	ldr	r2, [pc, #296]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001daa:	683b      	ldr	r3, [r7, #0]
90001dac:	212c      	movs	r1, #44	@ 0x2c
90001dae:	fb01 f303 	mul.w	r3, r1, r3
90001db2:	4413      	add	r3, r2
90001db4:	3318      	adds	r3, #24
90001db6:	681b      	ldr	r3, [r3, #0]
90001db8:	693a      	ldr	r2, [r7, #16]
90001dba:	429a      	cmp	r2, r3
90001dbc:	d971      	bls.n	90001ea2 <I2C_Compute_SCLL_SCLH+0x1d2>
90001dbe:	693a      	ldr	r2, [r7, #16]
90001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001dc2:	1ad2      	subs	r2, r2, r3
90001dc4:	6a3b      	ldr	r3, [r7, #32]
90001dc6:	1ad3      	subs	r3, r2, r3
90001dc8:	089b      	lsrs	r3, r3, #2
90001dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001dcc:	429a      	cmp	r2, r3
90001dce:	d268      	bcs.n	90001ea2 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001dd0:	2300      	movs	r3, #0
90001dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
90001dd4:	e062      	b.n	90001e9c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001dd8:	6a3b      	ldr	r3, [r7, #32]
90001dda:	441a      	add	r2, r3
90001ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001dde:	3301      	adds	r3, #1
90001de0:	6979      	ldr	r1, [r7, #20]
90001de2:	fb03 f101 	mul.w	r1, r3, r1
90001de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001de8:	005b      	lsls	r3, r3, #1
90001dea:	440b      	add	r3, r1
90001dec:	4413      	add	r3, r2
90001dee:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001df0:	693a      	ldr	r2, [r7, #16]
90001df2:	68fb      	ldr	r3, [r7, #12]
90001df4:	441a      	add	r2, r3
90001df6:	4937      	ldr	r1, [pc, #220]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001df8:	683b      	ldr	r3, [r7, #0]
90001dfa:	202c      	movs	r0, #44	@ 0x2c
90001dfc:	fb00 f303 	mul.w	r3, r0, r3
90001e00:	440b      	add	r3, r1
90001e02:	3320      	adds	r3, #32
90001e04:	681b      	ldr	r3, [r3, #0]
90001e06:	441a      	add	r2, r3
90001e08:	4932      	ldr	r1, [pc, #200]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001e0a:	683b      	ldr	r3, [r7, #0]
90001e0c:	202c      	movs	r0, #44	@ 0x2c
90001e0e:	fb00 f303 	mul.w	r3, r0, r3
90001e12:	440b      	add	r3, r1
90001e14:	3324      	adds	r3, #36	@ 0x24
90001e16:	681b      	ldr	r3, [r3, #0]
90001e18:	4413      	add	r3, r2
90001e1a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001e1c:	68ba      	ldr	r2, [r7, #8]
90001e1e:	69bb      	ldr	r3, [r7, #24]
90001e20:	429a      	cmp	r2, r3
90001e22:	d338      	bcc.n	90001e96 <I2C_Compute_SCLL_SCLH+0x1c6>
90001e24:	68ba      	ldr	r2, [r7, #8]
90001e26:	69fb      	ldr	r3, [r7, #28]
90001e28:	429a      	cmp	r2, r3
90001e2a:	d834      	bhi.n	90001e96 <I2C_Compute_SCLL_SCLH+0x1c6>
90001e2c:	4a29      	ldr	r2, [pc, #164]	@ (90001ed4 <I2C_Compute_SCLL_SCLH+0x204>)
90001e2e:	683b      	ldr	r3, [r7, #0]
90001e30:	212c      	movs	r1, #44	@ 0x2c
90001e32:	fb01 f303 	mul.w	r3, r1, r3
90001e36:	4413      	add	r3, r2
90001e38:	331c      	adds	r3, #28
90001e3a:	681b      	ldr	r3, [r3, #0]
90001e3c:	68fa      	ldr	r2, [r7, #12]
90001e3e:	429a      	cmp	r2, r3
90001e40:	d329      	bcc.n	90001e96 <I2C_Compute_SCLL_SCLH+0x1c6>
90001e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001e44:	68fb      	ldr	r3, [r7, #12]
90001e46:	429a      	cmp	r2, r3
90001e48:	d225      	bcs.n	90001e96 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001e4a:	68ba      	ldr	r2, [r7, #8]
90001e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e4e:	1ad3      	subs	r3, r2, r3
90001e50:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e54:	2b00      	cmp	r3, #0
90001e56:	da02      	bge.n	90001e5e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e5a:	425b      	negs	r3, r3
90001e5c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001e62:	429a      	cmp	r2, r3
90001e64:	d917      	bls.n	90001e96 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e68:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001e6a:	491b      	ldr	r1, [pc, #108]	@ (90001ed8 <I2C_Compute_SCLL_SCLH+0x208>)
90001e6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001e6e:	4613      	mov	r3, r2
90001e70:	009b      	lsls	r3, r3, #2
90001e72:	4413      	add	r3, r2
90001e74:	009b      	lsls	r3, r3, #2
90001e76:	440b      	add	r3, r1
90001e78:	3310      	adds	r3, #16
90001e7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001e7c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001e7e:	4916      	ldr	r1, [pc, #88]	@ (90001ed8 <I2C_Compute_SCLL_SCLH+0x208>)
90001e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001e82:	4613      	mov	r3, r2
90001e84:	009b      	lsls	r3, r3, #2
90001e86:	4413      	add	r3, r2
90001e88:	009b      	lsls	r3, r3, #2
90001e8a:	440b      	add	r3, r1
90001e8c:	330c      	adds	r3, #12
90001e8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001e90:	601a      	str	r2, [r3, #0]
              ret = count;
90001e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001e94:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001e98:	3301      	adds	r3, #1
90001e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
90001e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001e9e:	2bff      	cmp	r3, #255	@ 0xff
90001ea0:	d999      	bls.n	90001dd6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001ea4:	3301      	adds	r3, #1
90001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001eaa:	2bff      	cmp	r3, #255	@ 0xff
90001eac:	f67f af6f 	bls.w	90001d8e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001eb2:	3301      	adds	r3, #1
90001eb4:	637b      	str	r3, [r7, #52]	@ 0x34
90001eb6:	4b09      	ldr	r3, [pc, #36]	@ (90001edc <I2C_Compute_SCLL_SCLH+0x20c>)
90001eb8:	681b      	ldr	r3, [r3, #0]
90001eba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001ebc:	429a      	cmp	r2, r3
90001ebe:	f4ff af56 	bcc.w	90001d6e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001ec4:	4618      	mov	r0, r3
90001ec6:	374c      	adds	r7, #76	@ 0x4c
90001ec8:	46bd      	mov	sp, r7
90001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ece:	4770      	bx	lr
90001ed0:	3b9aca00 	.word	0x3b9aca00
90001ed4:	9000d730 	.word	0x9000d730
90001ed8:	20000648 	.word	0x20000648
90001edc:	20001048 	.word	0x20001048

90001ee0 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001ee0:	b580      	push	{r7, lr}
90001ee2:	b08a      	sub	sp, #40	@ 0x28
90001ee4:	af00      	add	r7, sp, #0
90001ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001ee8:	4b31      	ldr	r3, [pc, #196]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001eee:	4a30      	ldr	r2, [pc, #192]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001ef0:	f043 0308 	orr.w	r3, r3, #8
90001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001ef8:	4b2d      	ldr	r3, [pc, #180]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001efe:	f003 0308 	and.w	r3, r3, #8
90001f02:	613b      	str	r3, [r7, #16]
90001f04:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001f06:	4b2a      	ldr	r3, [pc, #168]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001f0c:	4a28      	ldr	r2, [pc, #160]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f0e:	f043 0308 	orr.w	r3, r3, #8
90001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001f16:	4b26      	ldr	r3, [pc, #152]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001f1c:	f003 0308 	and.w	r3, r3, #8
90001f20:	60fb      	str	r3, [r7, #12]
90001f22:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001f28:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001f2a:	2312      	movs	r3, #18
90001f2c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001f2e:	2300      	movs	r3, #0
90001f30:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001f32:	2302      	movs	r3, #2
90001f34:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001f36:	2304      	movs	r3, #4
90001f38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001f3a:	f107 0314 	add.w	r3, r7, #20
90001f3e:	4619      	mov	r1, r3
90001f40:	481c      	ldr	r0, [pc, #112]	@ (90001fb4 <I2C4_MspInit+0xd4>)
90001f42:	f001 fe71 	bl	90003c28 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001f4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001f4c:	2312      	movs	r3, #18
90001f4e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001f50:	2300      	movs	r3, #0
90001f52:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001f54:	2302      	movs	r3, #2
90001f56:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001f58:	2304      	movs	r3, #4
90001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001f5c:	f107 0314 	add.w	r3, r7, #20
90001f60:	4619      	mov	r1, r3
90001f62:	4814      	ldr	r0, [pc, #80]	@ (90001fb4 <I2C4_MspInit+0xd4>)
90001f64:	f001 fe60 	bl	90003c28 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001f68:	4b11      	ldr	r3, [pc, #68]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001f6e:	4a10      	ldr	r2, [pc, #64]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001f78:	4b0d      	ldr	r3, [pc, #52]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001f82:	60bb      	str	r3, [r7, #8]
90001f84:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001f86:	4b0a      	ldr	r3, [pc, #40]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001f8c:	4a08      	ldr	r2, [pc, #32]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001f92:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001f96:	4b06      	ldr	r3, [pc, #24]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001f9c:	4a04      	ldr	r2, [pc, #16]	@ (90001fb0 <I2C4_MspInit+0xd0>)
90001f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001fa2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001fa6:	bf00      	nop
90001fa8:	3728      	adds	r7, #40	@ 0x28
90001faa:	46bd      	mov	sp, r7
90001fac:	bd80      	pop	{r7, pc}
90001fae:	bf00      	nop
90001fb0:	58024400 	.word	0x58024400
90001fb4:	58020c00 	.word	0x58020c00

90001fb8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001fb8:	b580      	push	{r7, lr}
90001fba:	b088      	sub	sp, #32
90001fbc:	af04      	add	r7, sp, #16
90001fbe:	607b      	str	r3, [r7, #4]
90001fc0:	4603      	mov	r3, r0
90001fc2:	81fb      	strh	r3, [r7, #14]
90001fc4:	460b      	mov	r3, r1
90001fc6:	81bb      	strh	r3, [r7, #12]
90001fc8:	4613      	mov	r3, r2
90001fca:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001fcc:	8978      	ldrh	r0, [r7, #10]
90001fce:	89ba      	ldrh	r2, [r7, #12]
90001fd0:	89f9      	ldrh	r1, [r7, #14]
90001fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001fd6:	9302      	str	r3, [sp, #8]
90001fd8:	8b3b      	ldrh	r3, [r7, #24]
90001fda:	9301      	str	r3, [sp, #4]
90001fdc:	687b      	ldr	r3, [r7, #4]
90001fde:	9300      	str	r3, [sp, #0]
90001fe0:	4603      	mov	r3, r0
90001fe2:	4807      	ldr	r0, [pc, #28]	@ (90002000 <I2C4_ReadReg+0x48>)
90001fe4:	f003 fe4e 	bl	90005c84 <HAL_I2C_Mem_Read>
90001fe8:	4603      	mov	r3, r0
90001fea:	2b00      	cmp	r3, #0
90001fec:	d101      	bne.n	90001ff2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001fee:	2300      	movs	r3, #0
90001ff0:	e001      	b.n	90001ff6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001ff2:	f06f 0307 	mvn.w	r3, #7
}
90001ff6:	4618      	mov	r0, r3
90001ff8:	3710      	adds	r7, #16
90001ffa:	46bd      	mov	sp, r7
90001ffc:	bd80      	pop	{r7, pc}
90001ffe:	bf00      	nop
90002000:	2000104c 	.word	0x2000104c

90002004 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90002004:	b580      	push	{r7, lr}
90002006:	b084      	sub	sp, #16
90002008:	af02      	add	r7, sp, #8
9000200a:	6078      	str	r0, [r7, #4]
9000200c:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
9000200e:	f44f 7388 	mov.w	r3, #272	@ 0x110
90002012:	9300      	str	r3, [sp, #0]
90002014:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90002018:	2200      	movs	r2, #0
9000201a:	6839      	ldr	r1, [r7, #0]
9000201c:	6878      	ldr	r0, [r7, #4]
9000201e:	f000 f805 	bl	9000202c <BSP_LCD_InitEx>
90002022:	4603      	mov	r3, r0
}
90002024:	4618      	mov	r0, r3
90002026:	3708      	adds	r7, #8
90002028:	46bd      	mov	sp, r7
9000202a:	bd80      	pop	{r7, pc}

9000202c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
9000202c:	b580      	push	{r7, lr}
9000202e:	b09e      	sub	sp, #120	@ 0x78
90002030:	af00      	add	r7, sp, #0
90002032:	60f8      	str	r0, [r7, #12]
90002034:	60b9      	str	r1, [r7, #8]
90002036:	607a      	str	r2, [r7, #4]
90002038:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000203a:	2300      	movs	r3, #0
9000203c:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
9000203e:	2300      	movs	r3, #0
90002040:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90002042:	68bb      	ldr	r3, [r7, #8]
90002044:	2b01      	cmp	r3, #1
90002046:	d808      	bhi.n	9000205a <BSP_LCD_InitEx+0x2e>
90002048:	68fb      	ldr	r3, [r7, #12]
9000204a:	2b00      	cmp	r3, #0
9000204c:	d105      	bne.n	9000205a <BSP_LCD_InitEx+0x2e>
9000204e:	687b      	ldr	r3, [r7, #4]
90002050:	2b02      	cmp	r3, #2
90002052:	d006      	beq.n	90002062 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90002054:	687b      	ldr	r3, [r7, #4]
90002056:	2b00      	cmp	r3, #0
90002058:	d003      	beq.n	90002062 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000205a:	f06f 0301 	mvn.w	r3, #1
9000205e:	677b      	str	r3, [r7, #116]	@ 0x74
90002060:	e0a8      	b.n	900021b4 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90002062:	687b      	ldr	r3, [r7, #4]
90002064:	2b02      	cmp	r3, #2
90002066:	d109      	bne.n	9000207c <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90002068:	2302      	movs	r3, #2
9000206a:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
9000206c:	4a54      	ldr	r2, [pc, #336]	@ (900021c0 <BSP_LCD_InitEx+0x194>)
9000206e:	68fb      	ldr	r3, [r7, #12]
90002070:	015b      	lsls	r3, r3, #5
90002072:	4413      	add	r3, r2
90002074:	3310      	adds	r3, #16
90002076:	2202      	movs	r2, #2
90002078:	601a      	str	r2, [r3, #0]
9000207a:	e008      	b.n	9000208e <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
9000207c:	2300      	movs	r3, #0
9000207e:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90002080:	4a4f      	ldr	r2, [pc, #316]	@ (900021c0 <BSP_LCD_InitEx+0x194>)
90002082:	68fb      	ldr	r3, [r7, #12]
90002084:	015b      	lsls	r3, r3, #5
90002086:	4413      	add	r3, r2
90002088:	3310      	adds	r3, #16
9000208a:	2204      	movs	r2, #4
9000208c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
9000208e:	4a4c      	ldr	r2, [pc, #304]	@ (900021c0 <BSP_LCD_InitEx+0x194>)
90002090:	68fb      	ldr	r3, [r7, #12]
90002092:	015b      	lsls	r3, r3, #5
90002094:	4413      	add	r3, r2
90002096:	330c      	adds	r3, #12
90002098:	687a      	ldr	r2, [r7, #4]
9000209a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
9000209c:	4a48      	ldr	r2, [pc, #288]	@ (900021c0 <BSP_LCD_InitEx+0x194>)
9000209e:	68fb      	ldr	r3, [r7, #12]
900020a0:	015b      	lsls	r3, r3, #5
900020a2:	4413      	add	r3, r2
900020a4:	683a      	ldr	r2, [r7, #0]
900020a6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
900020a8:	4a45      	ldr	r2, [pc, #276]	@ (900021c0 <BSP_LCD_InitEx+0x194>)
900020aa:	68fb      	ldr	r3, [r7, #12]
900020ac:	015b      	lsls	r3, r3, #5
900020ae:	4413      	add	r3, r2
900020b0:	3304      	adds	r3, #4
900020b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
900020b6:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
900020b8:	4b42      	ldr	r3, [pc, #264]	@ (900021c4 <BSP_LCD_InitEx+0x198>)
900020ba:	4a43      	ldr	r2, [pc, #268]	@ (900021c8 <BSP_LCD_InitEx+0x19c>)
900020bc:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
900020be:	4b43      	ldr	r3, [pc, #268]	@ (900021cc <BSP_LCD_InitEx+0x1a0>)
900020c0:	4a43      	ldr	r2, [pc, #268]	@ (900021d0 <BSP_LCD_InitEx+0x1a4>)
900020c2:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
900020c4:	483f      	ldr	r0, [pc, #252]	@ (900021c4 <BSP_LCD_InitEx+0x198>)
900020c6:	f000 fcf9 	bl	90002abc <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
900020ca:	4840      	ldr	r0, [pc, #256]	@ (900021cc <BSP_LCD_InitEx+0x1a0>)
900020cc:	f000 fdc2 	bl	90002c54 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
900020d0:	4b40      	ldr	r3, [pc, #256]	@ (900021d4 <BSP_LCD_InitEx+0x1a8>)
900020d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
900020d4:	4b40      	ldr	r3, [pc, #256]	@ (900021d8 <BSP_LCD_InitEx+0x1ac>)
900020d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
900020d8:	2370      	movs	r3, #112	@ 0x70
900020da:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
900020dc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
900020e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
900020e4:	4611      	mov	r1, r2
900020e6:	4618      	mov	r0, r3
900020e8:	f7ff fa16 	bl	90001518 <FT5336_RegisterBusIO>
900020ec:	4603      	mov	r3, r0
900020ee:	2b00      	cmp	r3, #0
900020f0:	da03      	bge.n	900020fa <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
900020f2:	f06f 0304 	mvn.w	r3, #4
900020f6:	677b      	str	r3, [r7, #116]	@ 0x74
900020f8:	e02b      	b.n	90002152 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
900020fa:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
900020fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002102:	4611      	mov	r1, r2
90002104:	4618      	mov	r0, r3
90002106:	f7ff fa49 	bl	9000159c <FT5336_ReadID>
9000210a:	4603      	mov	r3, r0
9000210c:	2b00      	cmp	r3, #0
9000210e:	da03      	bge.n	90002118 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002110:	f06f 0304 	mvn.w	r3, #4
90002114:	677b      	str	r3, [r7, #116]	@ 0x74
90002116:	e01c      	b.n	90002152 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90002118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
9000211a:	2b51      	cmp	r3, #81	@ 0x51
9000211c:	d003      	beq.n	90002126 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
9000211e:	f06f 0306 	mvn.w	r3, #6
90002122:	677b      	str	r3, [r7, #116]	@ 0x74
90002124:	e015      	b.n	90002152 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90002126:	4827      	ldr	r0, [pc, #156]	@ (900021c4 <BSP_LCD_InitEx+0x198>)
90002128:	f7fe feee 	bl	90000f08 <MX_LTDC_ClockConfig>
9000212c:	4603      	mov	r3, r0
9000212e:	2b00      	cmp	r3, #0
90002130:	d003      	beq.n	9000213a <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90002132:	f06f 0303 	mvn.w	r3, #3
90002136:	677b      	str	r3, [r7, #116]	@ 0x74
90002138:	e00b      	b.n	90002152 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
9000213a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
9000213e:	6839      	ldr	r1, [r7, #0]
90002140:	4820      	ldr	r0, [pc, #128]	@ (900021c4 <BSP_LCD_InitEx+0x198>)
90002142:	f000 f84d 	bl	900021e0 <MX_LTDC_Init>
90002146:	4603      	mov	r3, r0
90002148:	2b00      	cmp	r3, #0
9000214a:	d002      	beq.n	90002152 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
9000214c:	f06f 0303 	mvn.w	r3, #3
90002150:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90002152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90002154:	2b00      	cmp	r3, #0
90002156:	d12d      	bne.n	900021b4 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90002158:	2000      	movs	r0, #0
9000215a:	f000 fe0d 	bl	90002d78 <BSP_SDRAM_Init>
9000215e:	4603      	mov	r3, r0
90002160:	2b00      	cmp	r3, #0
90002162:	d002      	beq.n	9000216a <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90002164:	f06f 0303 	mvn.w	r3, #3
90002168:	e025      	b.n	900021b6 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
9000216a:	2300      	movs	r3, #0
9000216c:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
9000216e:	683b      	ldr	r3, [r7, #0]
90002170:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90002172:	2300      	movs	r3, #0
90002174:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90002176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
9000217a:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
9000217c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
9000217e:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90002180:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90002184:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90002186:	f107 0314 	add.w	r3, r7, #20
9000218a:	461a      	mov	r2, r3
9000218c:	2100      	movs	r1, #0
9000218e:	480d      	ldr	r0, [pc, #52]	@ (900021c4 <BSP_LCD_InitEx+0x198>)
90002190:	f000 f872 	bl	90002278 <MX_LTDC_ConfigLayer>
90002194:	4603      	mov	r3, r0
90002196:	2b00      	cmp	r3, #0
90002198:	d002      	beq.n	900021a0 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
9000219a:	f06f 0303 	mvn.w	r3, #3
9000219e:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
900021a0:	480e      	ldr	r0, [pc, #56]	@ (900021dc <BSP_LCD_InitEx+0x1b0>)
900021a2:	f000 fdbf 	bl	90002d24 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
900021a6:	4a06      	ldr	r2, [pc, #24]	@ (900021c0 <BSP_LCD_InitEx+0x194>)
900021a8:	68fb      	ldr	r3, [r7, #12]
900021aa:	015b      	lsls	r3, r3, #5
900021ac:	4413      	add	r3, r2
900021ae:	3318      	adds	r3, #24
900021b0:	2201      	movs	r2, #1
900021b2:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
900021b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
900021b6:	4618      	mov	r0, r3
900021b8:	3778      	adds	r7, #120	@ 0x78
900021ba:	46bd      	mov	sp, r7
900021bc:	bd80      	pop	{r7, pc}
900021be:	bf00      	nop
900021c0:	200011fc 	.word	0x200011fc
900021c4:	20001154 	.word	0x20001154
900021c8:	50001000 	.word	0x50001000
900021cc:	200010ec 	.word	0x200010ec
900021d0:	52001000 	.word	0x52001000
900021d4:	900018a1 	.word	0x900018a1
900021d8:	90001999 	.word	0x90001999
900021dc:	200010a0 	.word	0x200010a0

900021e0 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
900021e0:	b580      	push	{r7, lr}
900021e2:	b084      	sub	sp, #16
900021e4:	af00      	add	r7, sp, #0
900021e6:	60f8      	str	r0, [r7, #12]
900021e8:	60b9      	str	r1, [r7, #8]
900021ea:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
900021ec:	68fb      	ldr	r3, [r7, #12]
900021ee:	4a21      	ldr	r2, [pc, #132]	@ (90002274 <MX_LTDC_Init+0x94>)
900021f0:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
900021f2:	68fb      	ldr	r3, [r7, #12]
900021f4:	2200      	movs	r2, #0
900021f6:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
900021f8:	68fb      	ldr	r3, [r7, #12]
900021fa:	2200      	movs	r2, #0
900021fc:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
900021fe:	68fb      	ldr	r3, [r7, #12]
90002200:	2200      	movs	r2, #0
90002202:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90002204:	68fb      	ldr	r3, [r7, #12]
90002206:	2200      	movs	r2, #0
90002208:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
9000220a:	68fb      	ldr	r3, [r7, #12]
9000220c:	2228      	movs	r2, #40	@ 0x28
9000220e:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90002210:	68fb      	ldr	r3, [r7, #12]
90002212:	222a      	movs	r2, #42	@ 0x2a
90002214:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90002216:	68bb      	ldr	r3, [r7, #8]
90002218:	f103 0235 	add.w	r2, r3, #53	@ 0x35
9000221c:	68fb      	ldr	r3, [r7, #12]
9000221e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90002220:	68bb      	ldr	r3, [r7, #8]
90002222:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
90002226:	68fb      	ldr	r3, [r7, #12]
90002228:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
9000222a:	68fb      	ldr	r3, [r7, #12]
9000222c:	2209      	movs	r2, #9
9000222e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90002230:	68fb      	ldr	r3, [r7, #12]
90002232:	220b      	movs	r2, #11
90002234:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90002236:	687b      	ldr	r3, [r7, #4]
90002238:	f103 020b 	add.w	r2, r3, #11
9000223c:	68fb      	ldr	r3, [r7, #12]
9000223e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90002240:	687b      	ldr	r3, [r7, #4]
90002242:	f103 020d 	add.w	r2, r3, #13
90002246:	68fb      	ldr	r3, [r7, #12]
90002248:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
9000224a:	68fb      	ldr	r3, [r7, #12]
9000224c:	22ff      	movs	r2, #255	@ 0xff
9000224e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
90002252:	68fb      	ldr	r3, [r7, #12]
90002254:	22ff      	movs	r2, #255	@ 0xff
90002256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
9000225a:	68fb      	ldr	r3, [r7, #12]
9000225c:	22ff      	movs	r2, #255	@ 0xff
9000225e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
90002262:	68f8      	ldr	r0, [r7, #12]
90002264:	f004 f947 	bl	900064f6 <HAL_LTDC_Init>
90002268:	4603      	mov	r3, r0
}
9000226a:	4618      	mov	r0, r3
9000226c:	3710      	adds	r7, #16
9000226e:	46bd      	mov	sp, r7
90002270:	bd80      	pop	{r7, pc}
90002272:	bf00      	nop
90002274:	50001000 	.word	0x50001000

90002278 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90002278:	b580      	push	{r7, lr}
9000227a:	b092      	sub	sp, #72	@ 0x48
9000227c:	af00      	add	r7, sp, #0
9000227e:	60f8      	str	r0, [r7, #12]
90002280:	60b9      	str	r1, [r7, #8]
90002282:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90002284:	687b      	ldr	r3, [r7, #4]
90002286:	681b      	ldr	r3, [r3, #0]
90002288:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
9000228a:	687b      	ldr	r3, [r7, #4]
9000228c:	685b      	ldr	r3, [r3, #4]
9000228e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90002290:	687b      	ldr	r3, [r7, #4]
90002292:	689b      	ldr	r3, [r3, #8]
90002294:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90002296:	687b      	ldr	r3, [r7, #4]
90002298:	68db      	ldr	r3, [r3, #12]
9000229a:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
9000229c:	687b      	ldr	r3, [r7, #4]
9000229e:	691b      	ldr	r3, [r3, #16]
900022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
900022a2:	23ff      	movs	r3, #255	@ 0xff
900022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
900022a6:	2300      	movs	r3, #0
900022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
900022aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
900022ae:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900022b0:	2307      	movs	r3, #7
900022b2:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
900022b4:	687b      	ldr	r3, [r7, #4]
900022b6:	695b      	ldr	r3, [r3, #20]
900022b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
900022ba:	687b      	ldr	r3, [r7, #4]
900022bc:	685a      	ldr	r2, [r3, #4]
900022be:	687b      	ldr	r3, [r7, #4]
900022c0:	681b      	ldr	r3, [r3, #0]
900022c2:	1ad3      	subs	r3, r2, r3
900022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
900022c6:	687b      	ldr	r3, [r7, #4]
900022c8:	68da      	ldr	r2, [r3, #12]
900022ca:	687b      	ldr	r3, [r7, #4]
900022cc:	689b      	ldr	r3, [r3, #8]
900022ce:	1ad3      	subs	r3, r2, r3
900022d0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
900022d2:	2300      	movs	r3, #0
900022d4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
900022d8:	2300      	movs	r3, #0
900022da:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
900022de:	2300      	movs	r3, #0
900022e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
900022e4:	f107 0314 	add.w	r3, r7, #20
900022e8:	68ba      	ldr	r2, [r7, #8]
900022ea:	4619      	mov	r1, r3
900022ec:	68f8      	ldr	r0, [r7, #12]
900022ee:	f004 f9a9 	bl	90006644 <HAL_LTDC_ConfigLayer>
900022f2:	4603      	mov	r3, r0
}
900022f4:	4618      	mov	r0, r3
900022f6:	3748      	adds	r7, #72	@ 0x48
900022f8:	46bd      	mov	sp, r7
900022fa:	bd80      	pop	{r7, pc}

900022fc <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
900022fc:	b480      	push	{r7}
900022fe:	b085      	sub	sp, #20
90002300:	af00      	add	r7, sp, #0
90002302:	6078      	str	r0, [r7, #4]
90002304:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002306:	2300      	movs	r3, #0
90002308:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000230a:	687b      	ldr	r3, [r7, #4]
9000230c:	2b00      	cmp	r3, #0
9000230e:	d003      	beq.n	90002318 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002310:	f06f 0301 	mvn.w	r3, #1
90002314:	60fb      	str	r3, [r7, #12]
90002316:	e007      	b.n	90002328 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002318:	4a07      	ldr	r2, [pc, #28]	@ (90002338 <BSP_LCD_GetPixelFormat+0x3c>)
9000231a:	687b      	ldr	r3, [r7, #4]
9000231c:	015b      	lsls	r3, r3, #5
9000231e:	4413      	add	r3, r2
90002320:	330c      	adds	r3, #12
90002322:	681a      	ldr	r2, [r3, #0]
90002324:	683b      	ldr	r3, [r7, #0]
90002326:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002328:	68fb      	ldr	r3, [r7, #12]
}
9000232a:	4618      	mov	r0, r3
9000232c:	3714      	adds	r7, #20
9000232e:	46bd      	mov	sp, r7
90002330:	f85d 7b04 	ldr.w	r7, [sp], #4
90002334:	4770      	bx	lr
90002336:	bf00      	nop
90002338:	200011fc 	.word	0x200011fc

9000233c <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
9000233c:	b480      	push	{r7}
9000233e:	b085      	sub	sp, #20
90002340:	af00      	add	r7, sp, #0
90002342:	6078      	str	r0, [r7, #4]
90002344:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002346:	2300      	movs	r3, #0
90002348:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000234a:	687b      	ldr	r3, [r7, #4]
9000234c:	2b00      	cmp	r3, #0
9000234e:	d003      	beq.n	90002358 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002350:	f06f 0301 	mvn.w	r3, #1
90002354:	60fb      	str	r3, [r7, #12]
90002356:	e006      	b.n	90002366 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002358:	4a06      	ldr	r2, [pc, #24]	@ (90002374 <BSP_LCD_SetActiveLayer+0x38>)
9000235a:	687b      	ldr	r3, [r7, #4]
9000235c:	015b      	lsls	r3, r3, #5
9000235e:	4413      	add	r3, r2
90002360:	3308      	adds	r3, #8
90002362:	683a      	ldr	r2, [r7, #0]
90002364:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002366:	68fb      	ldr	r3, [r7, #12]
}
90002368:	4618      	mov	r0, r3
9000236a:	3714      	adds	r7, #20
9000236c:	46bd      	mov	sp, r7
9000236e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002372:	4770      	bx	lr
90002374:	200011fc 	.word	0x200011fc

90002378 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002378:	b480      	push	{r7}
9000237a:	b085      	sub	sp, #20
9000237c:	af00      	add	r7, sp, #0
9000237e:	6078      	str	r0, [r7, #4]
90002380:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002382:	2300      	movs	r3, #0
90002384:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002386:	687b      	ldr	r3, [r7, #4]
90002388:	2b00      	cmp	r3, #0
9000238a:	d003      	beq.n	90002394 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000238c:	f06f 0301 	mvn.w	r3, #1
90002390:	60fb      	str	r3, [r7, #12]
90002392:	e006      	b.n	900023a2 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90002394:	4a06      	ldr	r2, [pc, #24]	@ (900023b0 <BSP_LCD_GetXSize+0x38>)
90002396:	687b      	ldr	r3, [r7, #4]
90002398:	015b      	lsls	r3, r3, #5
9000239a:	4413      	add	r3, r2
9000239c:	681a      	ldr	r2, [r3, #0]
9000239e:	683b      	ldr	r3, [r7, #0]
900023a0:	601a      	str	r2, [r3, #0]
  }

  return ret;
900023a2:	68fb      	ldr	r3, [r7, #12]
}
900023a4:	4618      	mov	r0, r3
900023a6:	3714      	adds	r7, #20
900023a8:	46bd      	mov	sp, r7
900023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900023ae:	4770      	bx	lr
900023b0:	200011fc 	.word	0x200011fc

900023b4 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
900023b4:	b480      	push	{r7}
900023b6:	b085      	sub	sp, #20
900023b8:	af00      	add	r7, sp, #0
900023ba:	6078      	str	r0, [r7, #4]
900023bc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900023be:	2300      	movs	r3, #0
900023c0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900023c2:	687b      	ldr	r3, [r7, #4]
900023c4:	2b00      	cmp	r3, #0
900023c6:	d003      	beq.n	900023d0 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900023c8:	f06f 0301 	mvn.w	r3, #1
900023cc:	60fb      	str	r3, [r7, #12]
900023ce:	e007      	b.n	900023e0 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900023d0:	4a07      	ldr	r2, [pc, #28]	@ (900023f0 <BSP_LCD_GetYSize+0x3c>)
900023d2:	687b      	ldr	r3, [r7, #4]
900023d4:	015b      	lsls	r3, r3, #5
900023d6:	4413      	add	r3, r2
900023d8:	3304      	adds	r3, #4
900023da:	681a      	ldr	r2, [r3, #0]
900023dc:	683b      	ldr	r3, [r7, #0]
900023de:	601a      	str	r2, [r3, #0]
  }

  return ret;
900023e0:	68fb      	ldr	r3, [r7, #12]
}
900023e2:	4618      	mov	r0, r3
900023e4:	3714      	adds	r7, #20
900023e6:	46bd      	mov	sp, r7
900023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
900023ec:	4770      	bx	lr
900023ee:	bf00      	nop
900023f0:	200011fc 	.word	0x200011fc

900023f4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900023f4:	b580      	push	{r7, lr}
900023f6:	b08e      	sub	sp, #56	@ 0x38
900023f8:	af02      	add	r7, sp, #8
900023fa:	60f8      	str	r0, [r7, #12]
900023fc:	60b9      	str	r1, [r7, #8]
900023fe:	607a      	str	r2, [r7, #4]
90002400:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002402:	2300      	movs	r3, #0
90002404:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
90002406:	683b      	ldr	r3, [r7, #0]
90002408:	330a      	adds	r3, #10
9000240a:	781b      	ldrb	r3, [r3, #0]
9000240c:	461a      	mov	r2, r3
9000240e:	683b      	ldr	r3, [r7, #0]
90002410:	330b      	adds	r3, #11
90002412:	781b      	ldrb	r3, [r3, #0]
90002414:	021b      	lsls	r3, r3, #8
90002416:	441a      	add	r2, r3
90002418:	683b      	ldr	r3, [r7, #0]
9000241a:	330c      	adds	r3, #12
9000241c:	781b      	ldrb	r3, [r3, #0]
9000241e:	041b      	lsls	r3, r3, #16
90002420:	441a      	add	r2, r3
90002422:	683b      	ldr	r3, [r7, #0]
90002424:	330d      	adds	r3, #13
90002426:	781b      	ldrb	r3, [r3, #0]
90002428:	061b      	lsls	r3, r3, #24
9000242a:	4413      	add	r3, r2
9000242c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
9000242e:	683b      	ldr	r3, [r7, #0]
90002430:	3312      	adds	r3, #18
90002432:	781b      	ldrb	r3, [r3, #0]
90002434:	461a      	mov	r2, r3
90002436:	683b      	ldr	r3, [r7, #0]
90002438:	3313      	adds	r3, #19
9000243a:	781b      	ldrb	r3, [r3, #0]
9000243c:	021b      	lsls	r3, r3, #8
9000243e:	441a      	add	r2, r3
90002440:	683b      	ldr	r3, [r7, #0]
90002442:	3314      	adds	r3, #20
90002444:	781b      	ldrb	r3, [r3, #0]
90002446:	041b      	lsls	r3, r3, #16
90002448:	441a      	add	r2, r3
9000244a:	683b      	ldr	r3, [r7, #0]
9000244c:	3315      	adds	r3, #21
9000244e:	781b      	ldrb	r3, [r3, #0]
90002450:	061b      	lsls	r3, r3, #24
90002452:	4413      	add	r3, r2
90002454:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
90002456:	683b      	ldr	r3, [r7, #0]
90002458:	3316      	adds	r3, #22
9000245a:	781b      	ldrb	r3, [r3, #0]
9000245c:	461a      	mov	r2, r3
9000245e:	683b      	ldr	r3, [r7, #0]
90002460:	3317      	adds	r3, #23
90002462:	781b      	ldrb	r3, [r3, #0]
90002464:	021b      	lsls	r3, r3, #8
90002466:	441a      	add	r2, r3
90002468:	683b      	ldr	r3, [r7, #0]
9000246a:	3318      	adds	r3, #24
9000246c:	781b      	ldrb	r3, [r3, #0]
9000246e:	041b      	lsls	r3, r3, #16
90002470:	441a      	add	r2, r3
90002472:	683b      	ldr	r3, [r7, #0]
90002474:	3319      	adds	r3, #25
90002476:	781b      	ldrb	r3, [r3, #0]
90002478:	061b      	lsls	r3, r3, #24
9000247a:	4413      	add	r3, r2
9000247c:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
9000247e:	683b      	ldr	r3, [r7, #0]
90002480:	331c      	adds	r3, #28
90002482:	781b      	ldrb	r3, [r3, #0]
90002484:	461a      	mov	r2, r3
90002486:	683b      	ldr	r3, [r7, #0]
90002488:	331d      	adds	r3, #29
9000248a:	781b      	ldrb	r3, [r3, #0]
9000248c:	021b      	lsls	r3, r3, #8
9000248e:	4413      	add	r3, r2
90002490:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
90002492:	4a37      	ldr	r2, [pc, #220]	@ (90002570 <BSP_LCD_DrawBitmap+0x17c>)
90002494:	68fb      	ldr	r3, [r7, #12]
90002496:	015b      	lsls	r3, r3, #5
90002498:	4413      	add	r3, r2
9000249a:	3308      	adds	r3, #8
9000249c:	681b      	ldr	r3, [r3, #0]
9000249e:	4a35      	ldr	r2, [pc, #212]	@ (90002574 <BSP_LCD_DrawBitmap+0x180>)
900024a0:	2134      	movs	r1, #52	@ 0x34
900024a2:	fb01 f303 	mul.w	r3, r1, r3
900024a6:	4413      	add	r3, r2
900024a8:	335c      	adds	r3, #92	@ 0x5c
900024aa:	681a      	ldr	r2, [r3, #0]
900024ac:	4930      	ldr	r1, [pc, #192]	@ (90002570 <BSP_LCD_DrawBitmap+0x17c>)
900024ae:	68fb      	ldr	r3, [r7, #12]
900024b0:	015b      	lsls	r3, r3, #5
900024b2:	440b      	add	r3, r1
900024b4:	681b      	ldr	r3, [r3, #0]
900024b6:	6879      	ldr	r1, [r7, #4]
900024b8:	fb03 f101 	mul.w	r1, r3, r1
900024bc:	68bb      	ldr	r3, [r7, #8]
900024be:	440b      	add	r3, r1
900024c0:	482b      	ldr	r0, [pc, #172]	@ (90002570 <BSP_LCD_DrawBitmap+0x17c>)
900024c2:	68f9      	ldr	r1, [r7, #12]
900024c4:	0149      	lsls	r1, r1, #5
900024c6:	4401      	add	r1, r0
900024c8:	3110      	adds	r1, #16
900024ca:	6809      	ldr	r1, [r1, #0]
900024cc:	fb01 f303 	mul.w	r3, r1, r3
900024d0:	4413      	add	r3, r2
900024d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900024d4:	693b      	ldr	r3, [r7, #16]
900024d6:	3b20      	subs	r3, #32
900024d8:	2b07      	cmp	r3, #7
900024da:	d802      	bhi.n	900024e2 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900024dc:	2300      	movs	r3, #0
900024de:	627b      	str	r3, [r7, #36]	@ 0x24
900024e0:	e008      	b.n	900024f4 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900024e2:	693b      	ldr	r3, [r7, #16]
900024e4:	3b10      	subs	r3, #16
900024e6:	2b07      	cmp	r3, #7
900024e8:	d802      	bhi.n	900024f0 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900024ea:	2302      	movs	r3, #2
900024ec:	627b      	str	r3, [r7, #36]	@ 0x24
900024ee:	e001      	b.n	900024f4 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
900024f0:	2301      	movs	r3, #1
900024f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900024f4:	697b      	ldr	r3, [r7, #20]
900024f6:	3b01      	subs	r3, #1
900024f8:	69ba      	ldr	r2, [r7, #24]
900024fa:	fb02 f303 	mul.w	r3, r2, r3
900024fe:	693a      	ldr	r2, [r7, #16]
90002500:	08d2      	lsrs	r2, r2, #3
90002502:	fb03 f202 	mul.w	r2, r3, r2
90002506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002508:	4413      	add	r3, r2
9000250a:	683a      	ldr	r2, [r7, #0]
9000250c:	4413      	add	r3, r2
9000250e:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002510:	2300      	movs	r3, #0
90002512:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002514:	e023      	b.n	9000255e <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
90002516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000251a:	9300      	str	r3, [sp, #0]
9000251c:	69bb      	ldr	r3, [r7, #24]
9000251e:	6a39      	ldr	r1, [r7, #32]
90002520:	68f8      	ldr	r0, [r7, #12]
90002522:	f000 fa77 	bl	90002a14 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
90002526:	4a12      	ldr	r2, [pc, #72]	@ (90002570 <BSP_LCD_DrawBitmap+0x17c>)
90002528:	68fb      	ldr	r3, [r7, #12]
9000252a:	015b      	lsls	r3, r3, #5
9000252c:	4413      	add	r3, r2
9000252e:	681b      	ldr	r3, [r3, #0]
90002530:	490f      	ldr	r1, [pc, #60]	@ (90002570 <BSP_LCD_DrawBitmap+0x17c>)
90002532:	68fa      	ldr	r2, [r7, #12]
90002534:	0152      	lsls	r2, r2, #5
90002536:	440a      	add	r2, r1
90002538:	3210      	adds	r2, #16
9000253a:	6812      	ldr	r2, [r2, #0]
9000253c:	fb02 f303 	mul.w	r3, r2, r3
90002540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002542:	4413      	add	r3, r2
90002544:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
90002546:	693b      	ldr	r3, [r7, #16]
90002548:	08db      	lsrs	r3, r3, #3
9000254a:	69ba      	ldr	r2, [r7, #24]
9000254c:	fb02 f303 	mul.w	r3, r2, r3
90002550:	425b      	negs	r3, r3
90002552:	6a3a      	ldr	r2, [r7, #32]
90002554:	4413      	add	r3, r2
90002556:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000255a:	3301      	adds	r3, #1
9000255c:	62fb      	str	r3, [r7, #44]	@ 0x2c
9000255e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002560:	697b      	ldr	r3, [r7, #20]
90002562:	429a      	cmp	r2, r3
90002564:	d3d7      	bcc.n	90002516 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
90002566:	69fb      	ldr	r3, [r7, #28]
}
90002568:	4618      	mov	r0, r3
9000256a:	3730      	adds	r7, #48	@ 0x30
9000256c:	46bd      	mov	sp, r7
9000256e:	bd80      	pop	{r7, pc}
90002570:	200011fc 	.word	0x200011fc
90002574:	20001154 	.word	0x20001154

90002578 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002578:	b580      	push	{r7, lr}
9000257a:	b088      	sub	sp, #32
9000257c:	af00      	add	r7, sp, #0
9000257e:	60f8      	str	r0, [r7, #12]
90002580:	60b9      	str	r1, [r7, #8]
90002582:	607a      	str	r2, [r7, #4]
90002584:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
90002586:	683b      	ldr	r3, [r7, #0]
90002588:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
9000258a:	2300      	movs	r3, #0
9000258c:	61fb      	str	r3, [r7, #28]
9000258e:	e032      	b.n	900025f6 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002590:	2300      	movs	r3, #0
90002592:	617b      	str	r3, [r7, #20]
90002594:	e028      	b.n	900025e8 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
90002596:	69bb      	ldr	r3, [r7, #24]
90002598:	781b      	ldrb	r3, [r3, #0]
9000259a:	461a      	mov	r2, r3
9000259c:	69bb      	ldr	r3, [r7, #24]
9000259e:	3301      	adds	r3, #1
900025a0:	781b      	ldrb	r3, [r3, #0]
900025a2:	021b      	lsls	r3, r3, #8
900025a4:	431a      	orrs	r2, r3
900025a6:	69bb      	ldr	r3, [r7, #24]
900025a8:	3302      	adds	r3, #2
900025aa:	781b      	ldrb	r3, [r3, #0]
900025ac:	041b      	lsls	r3, r3, #16
900025ae:	431a      	orrs	r2, r3
900025b0:	69bb      	ldr	r3, [r7, #24]
900025b2:	3303      	adds	r3, #3
900025b4:	781b      	ldrb	r3, [r3, #0]
900025b6:	061b      	lsls	r3, r3, #24
900025b8:	4313      	orrs	r3, r2
900025ba:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900025bc:	68ba      	ldr	r2, [r7, #8]
900025be:	697b      	ldr	r3, [r7, #20]
900025c0:	18d1      	adds	r1, r2, r3
900025c2:	687a      	ldr	r2, [r7, #4]
900025c4:	69fb      	ldr	r3, [r7, #28]
900025c6:	441a      	add	r2, r3
900025c8:	693b      	ldr	r3, [r7, #16]
900025ca:	68f8      	ldr	r0, [r7, #12]
900025cc:	f000 f95e 	bl	9000288c <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900025d0:	4a0d      	ldr	r2, [pc, #52]	@ (90002608 <BSP_LCD_FillRGBRect+0x90>)
900025d2:	68fb      	ldr	r3, [r7, #12]
900025d4:	015b      	lsls	r3, r3, #5
900025d6:	4413      	add	r3, r2
900025d8:	3310      	adds	r3, #16
900025da:	681b      	ldr	r3, [r3, #0]
900025dc:	69ba      	ldr	r2, [r7, #24]
900025de:	4413      	add	r3, r2
900025e0:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
900025e2:	697b      	ldr	r3, [r7, #20]
900025e4:	3301      	adds	r3, #1
900025e6:	617b      	str	r3, [r7, #20]
900025e8:	697a      	ldr	r2, [r7, #20]
900025ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900025ec:	429a      	cmp	r2, r3
900025ee:	d3d2      	bcc.n	90002596 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
900025f0:	69fb      	ldr	r3, [r7, #28]
900025f2:	3301      	adds	r3, #1
900025f4:	61fb      	str	r3, [r7, #28]
900025f6:	69fa      	ldr	r2, [r7, #28]
900025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900025fa:	429a      	cmp	r2, r3
900025fc:	d3c8      	bcc.n	90002590 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
900025fe:	2300      	movs	r3, #0
}
90002600:	4618      	mov	r0, r3
90002602:	3720      	adds	r7, #32
90002604:	46bd      	mov	sp, r7
90002606:	bd80      	pop	{r7, pc}
90002608:	200011fc 	.word	0x200011fc

9000260c <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000260c:	b580      	push	{r7, lr}
9000260e:	b088      	sub	sp, #32
90002610:	af02      	add	r7, sp, #8
90002612:	60f8      	str	r0, [r7, #12]
90002614:	60b9      	str	r1, [r7, #8]
90002616:	607a      	str	r2, [r7, #4]
90002618:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000261a:	4a21      	ldr	r2, [pc, #132]	@ (900026a0 <BSP_LCD_DrawHLine+0x94>)
9000261c:	68fb      	ldr	r3, [r7, #12]
9000261e:	015b      	lsls	r3, r3, #5
90002620:	4413      	add	r3, r2
90002622:	3308      	adds	r3, #8
90002624:	681b      	ldr	r3, [r3, #0]
90002626:	4a1f      	ldr	r2, [pc, #124]	@ (900026a4 <BSP_LCD_DrawHLine+0x98>)
90002628:	2134      	movs	r1, #52	@ 0x34
9000262a:	fb01 f303 	mul.w	r3, r1, r3
9000262e:	4413      	add	r3, r2
90002630:	335c      	adds	r3, #92	@ 0x5c
90002632:	681a      	ldr	r2, [r3, #0]
90002634:	491a      	ldr	r1, [pc, #104]	@ (900026a0 <BSP_LCD_DrawHLine+0x94>)
90002636:	68fb      	ldr	r3, [r7, #12]
90002638:	015b      	lsls	r3, r3, #5
9000263a:	440b      	add	r3, r1
9000263c:	3310      	adds	r3, #16
9000263e:	681b      	ldr	r3, [r3, #0]
90002640:	4817      	ldr	r0, [pc, #92]	@ (900026a0 <BSP_LCD_DrawHLine+0x94>)
90002642:	68f9      	ldr	r1, [r7, #12]
90002644:	0149      	lsls	r1, r1, #5
90002646:	4401      	add	r1, r0
90002648:	6809      	ldr	r1, [r1, #0]
9000264a:	6878      	ldr	r0, [r7, #4]
9000264c:	fb01 f000 	mul.w	r0, r1, r0
90002650:	68b9      	ldr	r1, [r7, #8]
90002652:	4401      	add	r1, r0
90002654:	fb01 f303 	mul.w	r3, r1, r3
90002658:	4413      	add	r3, r2
9000265a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
9000265c:	68ba      	ldr	r2, [r7, #8]
9000265e:	683b      	ldr	r3, [r7, #0]
90002660:	441a      	add	r2, r3
90002662:	490f      	ldr	r1, [pc, #60]	@ (900026a0 <BSP_LCD_DrawHLine+0x94>)
90002664:	68fb      	ldr	r3, [r7, #12]
90002666:	015b      	lsls	r3, r3, #5
90002668:	440b      	add	r3, r1
9000266a:	681b      	ldr	r3, [r3, #0]
9000266c:	429a      	cmp	r2, r3
9000266e:	d907      	bls.n	90002680 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002670:	4a0b      	ldr	r2, [pc, #44]	@ (900026a0 <BSP_LCD_DrawHLine+0x94>)
90002672:	68fb      	ldr	r3, [r7, #12]
90002674:	015b      	lsls	r3, r3, #5
90002676:	4413      	add	r3, r2
90002678:	681a      	ldr	r2, [r3, #0]
9000267a:	68bb      	ldr	r3, [r7, #8]
9000267c:	1ad3      	subs	r3, r2, r3
9000267e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002680:	6979      	ldr	r1, [r7, #20]
90002682:	6a3b      	ldr	r3, [r7, #32]
90002684:	9301      	str	r3, [sp, #4]
90002686:	2300      	movs	r3, #0
90002688:	9300      	str	r3, [sp, #0]
9000268a:	2301      	movs	r3, #1
9000268c:	683a      	ldr	r2, [r7, #0]
9000268e:	68f8      	ldr	r0, [r7, #12]
90002690:	f000 f956 	bl	90002940 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002694:	2300      	movs	r3, #0
}
90002696:	4618      	mov	r0, r3
90002698:	3718      	adds	r7, #24
9000269a:	46bd      	mov	sp, r7
9000269c:	bd80      	pop	{r7, pc}
9000269e:	bf00      	nop
900026a0:	200011fc 	.word	0x200011fc
900026a4:	20001154 	.word	0x20001154

900026a8 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900026a8:	b580      	push	{r7, lr}
900026aa:	b088      	sub	sp, #32
900026ac:	af02      	add	r7, sp, #8
900026ae:	60f8      	str	r0, [r7, #12]
900026b0:	60b9      	str	r1, [r7, #8]
900026b2:	607a      	str	r2, [r7, #4]
900026b4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900026b6:	4a24      	ldr	r2, [pc, #144]	@ (90002748 <BSP_LCD_DrawVLine+0xa0>)
900026b8:	68fb      	ldr	r3, [r7, #12]
900026ba:	015b      	lsls	r3, r3, #5
900026bc:	4413      	add	r3, r2
900026be:	3308      	adds	r3, #8
900026c0:	681b      	ldr	r3, [r3, #0]
900026c2:	4a22      	ldr	r2, [pc, #136]	@ (9000274c <BSP_LCD_DrawVLine+0xa4>)
900026c4:	2134      	movs	r1, #52	@ 0x34
900026c6:	fb01 f303 	mul.w	r3, r1, r3
900026ca:	4413      	add	r3, r2
900026cc:	335c      	adds	r3, #92	@ 0x5c
900026ce:	681a      	ldr	r2, [r3, #0]
900026d0:	491d      	ldr	r1, [pc, #116]	@ (90002748 <BSP_LCD_DrawVLine+0xa0>)
900026d2:	68fb      	ldr	r3, [r7, #12]
900026d4:	015b      	lsls	r3, r3, #5
900026d6:	440b      	add	r3, r1
900026d8:	3310      	adds	r3, #16
900026da:	681b      	ldr	r3, [r3, #0]
900026dc:	481a      	ldr	r0, [pc, #104]	@ (90002748 <BSP_LCD_DrawVLine+0xa0>)
900026de:	68f9      	ldr	r1, [r7, #12]
900026e0:	0149      	lsls	r1, r1, #5
900026e2:	4401      	add	r1, r0
900026e4:	6809      	ldr	r1, [r1, #0]
900026e6:	6878      	ldr	r0, [r7, #4]
900026e8:	fb01 f000 	mul.w	r0, r1, r0
900026ec:	68b9      	ldr	r1, [r7, #8]
900026ee:	4401      	add	r1, r0
900026f0:	fb01 f303 	mul.w	r3, r1, r3
900026f4:	4413      	add	r3, r2
900026f6:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
900026f8:	687a      	ldr	r2, [r7, #4]
900026fa:	683b      	ldr	r3, [r7, #0]
900026fc:	441a      	add	r2, r3
900026fe:	4912      	ldr	r1, [pc, #72]	@ (90002748 <BSP_LCD_DrawVLine+0xa0>)
90002700:	68fb      	ldr	r3, [r7, #12]
90002702:	015b      	lsls	r3, r3, #5
90002704:	440b      	add	r3, r1
90002706:	3304      	adds	r3, #4
90002708:	681b      	ldr	r3, [r3, #0]
9000270a:	429a      	cmp	r2, r3
9000270c:	d908      	bls.n	90002720 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
9000270e:	4a0e      	ldr	r2, [pc, #56]	@ (90002748 <BSP_LCD_DrawVLine+0xa0>)
90002710:	68fb      	ldr	r3, [r7, #12]
90002712:	015b      	lsls	r3, r3, #5
90002714:	4413      	add	r3, r2
90002716:	3304      	adds	r3, #4
90002718:	681a      	ldr	r2, [r3, #0]
9000271a:	687b      	ldr	r3, [r7, #4]
9000271c:	1ad3      	subs	r3, r2, r3
9000271e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002720:	6979      	ldr	r1, [r7, #20]
90002722:	4a09      	ldr	r2, [pc, #36]	@ (90002748 <BSP_LCD_DrawVLine+0xa0>)
90002724:	68fb      	ldr	r3, [r7, #12]
90002726:	015b      	lsls	r3, r3, #5
90002728:	4413      	add	r3, r2
9000272a:	681b      	ldr	r3, [r3, #0]
9000272c:	3b01      	subs	r3, #1
9000272e:	6a3a      	ldr	r2, [r7, #32]
90002730:	9201      	str	r2, [sp, #4]
90002732:	9300      	str	r3, [sp, #0]
90002734:	683b      	ldr	r3, [r7, #0]
90002736:	2201      	movs	r2, #1
90002738:	68f8      	ldr	r0, [r7, #12]
9000273a:	f000 f901 	bl	90002940 <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000273e:	2300      	movs	r3, #0
}
90002740:	4618      	mov	r0, r3
90002742:	3718      	adds	r7, #24
90002744:	46bd      	mov	sp, r7
90002746:	bd80      	pop	{r7, pc}
90002748:	200011fc 	.word	0x200011fc
9000274c:	20001154 	.word	0x20001154

90002750 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002750:	b580      	push	{r7, lr}
90002752:	b088      	sub	sp, #32
90002754:	af02      	add	r7, sp, #8
90002756:	60f8      	str	r0, [r7, #12]
90002758:	60b9      	str	r1, [r7, #8]
9000275a:	607a      	str	r2, [r7, #4]
9000275c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000275e:	4a1b      	ldr	r2, [pc, #108]	@ (900027cc <BSP_LCD_FillRect+0x7c>)
90002760:	68fb      	ldr	r3, [r7, #12]
90002762:	015b      	lsls	r3, r3, #5
90002764:	4413      	add	r3, r2
90002766:	3308      	adds	r3, #8
90002768:	681b      	ldr	r3, [r3, #0]
9000276a:	4a19      	ldr	r2, [pc, #100]	@ (900027d0 <BSP_LCD_FillRect+0x80>)
9000276c:	2134      	movs	r1, #52	@ 0x34
9000276e:	fb01 f303 	mul.w	r3, r1, r3
90002772:	4413      	add	r3, r2
90002774:	335c      	adds	r3, #92	@ 0x5c
90002776:	681a      	ldr	r2, [r3, #0]
90002778:	4914      	ldr	r1, [pc, #80]	@ (900027cc <BSP_LCD_FillRect+0x7c>)
9000277a:	68fb      	ldr	r3, [r7, #12]
9000277c:	015b      	lsls	r3, r3, #5
9000277e:	440b      	add	r3, r1
90002780:	3310      	adds	r3, #16
90002782:	681b      	ldr	r3, [r3, #0]
90002784:	4811      	ldr	r0, [pc, #68]	@ (900027cc <BSP_LCD_FillRect+0x7c>)
90002786:	68f9      	ldr	r1, [r7, #12]
90002788:	0149      	lsls	r1, r1, #5
9000278a:	4401      	add	r1, r0
9000278c:	6809      	ldr	r1, [r1, #0]
9000278e:	6878      	ldr	r0, [r7, #4]
90002790:	fb01 f000 	mul.w	r0, r1, r0
90002794:	68b9      	ldr	r1, [r7, #8]
90002796:	4401      	add	r1, r0
90002798:	fb01 f303 	mul.w	r3, r1, r3
9000279c:	4413      	add	r3, r2
9000279e:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
900027a0:	6979      	ldr	r1, [r7, #20]
900027a2:	4a0a      	ldr	r2, [pc, #40]	@ (900027cc <BSP_LCD_FillRect+0x7c>)
900027a4:	68fb      	ldr	r3, [r7, #12]
900027a6:	015b      	lsls	r3, r3, #5
900027a8:	4413      	add	r3, r2
900027aa:	681a      	ldr	r2, [r3, #0]
900027ac:	683b      	ldr	r3, [r7, #0]
900027ae:	1ad3      	subs	r3, r2, r3
900027b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900027b2:	9201      	str	r2, [sp, #4]
900027b4:	9300      	str	r3, [sp, #0]
900027b6:	6a3b      	ldr	r3, [r7, #32]
900027b8:	683a      	ldr	r2, [r7, #0]
900027ba:	68f8      	ldr	r0, [r7, #12]
900027bc:	f000 f8c0 	bl	90002940 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900027c0:	2300      	movs	r3, #0
}
900027c2:	4618      	mov	r0, r3
900027c4:	3718      	adds	r7, #24
900027c6:	46bd      	mov	sp, r7
900027c8:	bd80      	pop	{r7, pc}
900027ca:	bf00      	nop
900027cc:	200011fc 	.word	0x200011fc
900027d0:	20001154 	.word	0x20001154

900027d4 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900027d4:	b480      	push	{r7}
900027d6:	b085      	sub	sp, #20
900027d8:	af00      	add	r7, sp, #0
900027da:	60f8      	str	r0, [r7, #12]
900027dc:	60b9      	str	r1, [r7, #8]
900027de:	607a      	str	r2, [r7, #4]
900027e0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900027e2:	4a28      	ldr	r2, [pc, #160]	@ (90002884 <BSP_LCD_ReadPixel+0xb0>)
900027e4:	68fb      	ldr	r3, [r7, #12]
900027e6:	015b      	lsls	r3, r3, #5
900027e8:	4413      	add	r3, r2
900027ea:	3308      	adds	r3, #8
900027ec:	681b      	ldr	r3, [r3, #0]
900027ee:	4a26      	ldr	r2, [pc, #152]	@ (90002888 <BSP_LCD_ReadPixel+0xb4>)
900027f0:	2134      	movs	r1, #52	@ 0x34
900027f2:	fb01 f303 	mul.w	r3, r1, r3
900027f6:	4413      	add	r3, r2
900027f8:	3348      	adds	r3, #72	@ 0x48
900027fa:	681b      	ldr	r3, [r3, #0]
900027fc:	2b00      	cmp	r3, #0
900027fe:	d11c      	bne.n	9000283a <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002800:	4a20      	ldr	r2, [pc, #128]	@ (90002884 <BSP_LCD_ReadPixel+0xb0>)
90002802:	68fb      	ldr	r3, [r7, #12]
90002804:	015b      	lsls	r3, r3, #5
90002806:	4413      	add	r3, r2
90002808:	3308      	adds	r3, #8
9000280a:	681b      	ldr	r3, [r3, #0]
9000280c:	4a1e      	ldr	r2, [pc, #120]	@ (90002888 <BSP_LCD_ReadPixel+0xb4>)
9000280e:	2134      	movs	r1, #52	@ 0x34
90002810:	fb01 f303 	mul.w	r3, r1, r3
90002814:	4413      	add	r3, r2
90002816:	335c      	adds	r3, #92	@ 0x5c
90002818:	681a      	ldr	r2, [r3, #0]
9000281a:	491a      	ldr	r1, [pc, #104]	@ (90002884 <BSP_LCD_ReadPixel+0xb0>)
9000281c:	68fb      	ldr	r3, [r7, #12]
9000281e:	015b      	lsls	r3, r3, #5
90002820:	440b      	add	r3, r1
90002822:	681b      	ldr	r3, [r3, #0]
90002824:	6879      	ldr	r1, [r7, #4]
90002826:	fb03 f101 	mul.w	r1, r3, r1
9000282a:	68bb      	ldr	r3, [r7, #8]
9000282c:	440b      	add	r3, r1
9000282e:	009b      	lsls	r3, r3, #2
90002830:	4413      	add	r3, r2
90002832:	681a      	ldr	r2, [r3, #0]
90002834:	683b      	ldr	r3, [r7, #0]
90002836:	601a      	str	r2, [r3, #0]
90002838:	e01d      	b.n	90002876 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
9000283a:	4a12      	ldr	r2, [pc, #72]	@ (90002884 <BSP_LCD_ReadPixel+0xb0>)
9000283c:	68fb      	ldr	r3, [r7, #12]
9000283e:	015b      	lsls	r3, r3, #5
90002840:	4413      	add	r3, r2
90002842:	3308      	adds	r3, #8
90002844:	681b      	ldr	r3, [r3, #0]
90002846:	4a10      	ldr	r2, [pc, #64]	@ (90002888 <BSP_LCD_ReadPixel+0xb4>)
90002848:	2134      	movs	r1, #52	@ 0x34
9000284a:	fb01 f303 	mul.w	r3, r1, r3
9000284e:	4413      	add	r3, r2
90002850:	335c      	adds	r3, #92	@ 0x5c
90002852:	681a      	ldr	r2, [r3, #0]
90002854:	490b      	ldr	r1, [pc, #44]	@ (90002884 <BSP_LCD_ReadPixel+0xb0>)
90002856:	68fb      	ldr	r3, [r7, #12]
90002858:	015b      	lsls	r3, r3, #5
9000285a:	440b      	add	r3, r1
9000285c:	681b      	ldr	r3, [r3, #0]
9000285e:	6879      	ldr	r1, [r7, #4]
90002860:	fb03 f101 	mul.w	r1, r3, r1
90002864:	68bb      	ldr	r3, [r7, #8]
90002866:	440b      	add	r3, r1
90002868:	005b      	lsls	r3, r3, #1
9000286a:	4413      	add	r3, r2
9000286c:	881b      	ldrh	r3, [r3, #0]
9000286e:	b29b      	uxth	r3, r3
90002870:	461a      	mov	r2, r3
90002872:	683b      	ldr	r3, [r7, #0]
90002874:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002876:	2300      	movs	r3, #0
}
90002878:	4618      	mov	r0, r3
9000287a:	3714      	adds	r7, #20
9000287c:	46bd      	mov	sp, r7
9000287e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002882:	4770      	bx	lr
90002884:	200011fc 	.word	0x200011fc
90002888:	20001154 	.word	0x20001154

9000288c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
9000288c:	b480      	push	{r7}
9000288e:	b085      	sub	sp, #20
90002890:	af00      	add	r7, sp, #0
90002892:	60f8      	str	r0, [r7, #12]
90002894:	60b9      	str	r1, [r7, #8]
90002896:	607a      	str	r2, [r7, #4]
90002898:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000289a:	4a27      	ldr	r2, [pc, #156]	@ (90002938 <BSP_LCD_WritePixel+0xac>)
9000289c:	68fb      	ldr	r3, [r7, #12]
9000289e:	015b      	lsls	r3, r3, #5
900028a0:	4413      	add	r3, r2
900028a2:	3308      	adds	r3, #8
900028a4:	681b      	ldr	r3, [r3, #0]
900028a6:	4a25      	ldr	r2, [pc, #148]	@ (9000293c <BSP_LCD_WritePixel+0xb0>)
900028a8:	2134      	movs	r1, #52	@ 0x34
900028aa:	fb01 f303 	mul.w	r3, r1, r3
900028ae:	4413      	add	r3, r2
900028b0:	3348      	adds	r3, #72	@ 0x48
900028b2:	681b      	ldr	r3, [r3, #0]
900028b4:	2b00      	cmp	r3, #0
900028b6:	d11c      	bne.n	900028f2 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900028b8:	4a1f      	ldr	r2, [pc, #124]	@ (90002938 <BSP_LCD_WritePixel+0xac>)
900028ba:	68fb      	ldr	r3, [r7, #12]
900028bc:	015b      	lsls	r3, r3, #5
900028be:	4413      	add	r3, r2
900028c0:	3308      	adds	r3, #8
900028c2:	681b      	ldr	r3, [r3, #0]
900028c4:	4a1d      	ldr	r2, [pc, #116]	@ (9000293c <BSP_LCD_WritePixel+0xb0>)
900028c6:	2134      	movs	r1, #52	@ 0x34
900028c8:	fb01 f303 	mul.w	r3, r1, r3
900028cc:	4413      	add	r3, r2
900028ce:	335c      	adds	r3, #92	@ 0x5c
900028d0:	681a      	ldr	r2, [r3, #0]
900028d2:	4919      	ldr	r1, [pc, #100]	@ (90002938 <BSP_LCD_WritePixel+0xac>)
900028d4:	68fb      	ldr	r3, [r7, #12]
900028d6:	015b      	lsls	r3, r3, #5
900028d8:	440b      	add	r3, r1
900028da:	681b      	ldr	r3, [r3, #0]
900028dc:	6879      	ldr	r1, [r7, #4]
900028de:	fb03 f101 	mul.w	r1, r3, r1
900028e2:	68bb      	ldr	r3, [r7, #8]
900028e4:	440b      	add	r3, r1
900028e6:	009b      	lsls	r3, r3, #2
900028e8:	4413      	add	r3, r2
900028ea:	461a      	mov	r2, r3
900028ec:	683b      	ldr	r3, [r7, #0]
900028ee:	6013      	str	r3, [r2, #0]
900028f0:	e01b      	b.n	9000292a <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
900028f2:	4a11      	ldr	r2, [pc, #68]	@ (90002938 <BSP_LCD_WritePixel+0xac>)
900028f4:	68fb      	ldr	r3, [r7, #12]
900028f6:	015b      	lsls	r3, r3, #5
900028f8:	4413      	add	r3, r2
900028fa:	3308      	adds	r3, #8
900028fc:	681b      	ldr	r3, [r3, #0]
900028fe:	4a0f      	ldr	r2, [pc, #60]	@ (9000293c <BSP_LCD_WritePixel+0xb0>)
90002900:	2134      	movs	r1, #52	@ 0x34
90002902:	fb01 f303 	mul.w	r3, r1, r3
90002906:	4413      	add	r3, r2
90002908:	335c      	adds	r3, #92	@ 0x5c
9000290a:	681a      	ldr	r2, [r3, #0]
9000290c:	490a      	ldr	r1, [pc, #40]	@ (90002938 <BSP_LCD_WritePixel+0xac>)
9000290e:	68fb      	ldr	r3, [r7, #12]
90002910:	015b      	lsls	r3, r3, #5
90002912:	440b      	add	r3, r1
90002914:	681b      	ldr	r3, [r3, #0]
90002916:	6879      	ldr	r1, [r7, #4]
90002918:	fb03 f101 	mul.w	r1, r3, r1
9000291c:	68bb      	ldr	r3, [r7, #8]
9000291e:	440b      	add	r3, r1
90002920:	005b      	lsls	r3, r3, #1
90002922:	4413      	add	r3, r2
90002924:	683a      	ldr	r2, [r7, #0]
90002926:	b292      	uxth	r2, r2
90002928:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000292a:	2300      	movs	r3, #0
}
9000292c:	4618      	mov	r0, r3
9000292e:	3714      	adds	r7, #20
90002930:	46bd      	mov	sp, r7
90002932:	f85d 7b04 	ldr.w	r7, [sp], #4
90002936:	4770      	bx	lr
90002938:	200011fc 	.word	0x200011fc
9000293c:	20001154 	.word	0x20001154

90002940 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002940:	b580      	push	{r7, lr}
90002942:	b088      	sub	sp, #32
90002944:	af02      	add	r7, sp, #8
90002946:	60f8      	str	r0, [r7, #12]
90002948:	60b9      	str	r1, [r7, #8]
9000294a:	607a      	str	r2, [r7, #4]
9000294c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
9000294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002950:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002952:	4a2d      	ldr	r2, [pc, #180]	@ (90002a08 <LL_FillBuffer+0xc8>)
90002954:	68fb      	ldr	r3, [r7, #12]
90002956:	015b      	lsls	r3, r3, #5
90002958:	4413      	add	r3, r2
9000295a:	330c      	adds	r3, #12
9000295c:	681b      	ldr	r3, [r3, #0]
9000295e:	2b02      	cmp	r3, #2
90002960:	d129      	bne.n	900029b6 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002962:	2302      	movs	r3, #2
90002964:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002968:	0adb      	lsrs	r3, r3, #11
9000296a:	f003 021f 	and.w	r2, r3, #31
9000296e:	4613      	mov	r3, r2
90002970:	011b      	lsls	r3, r3, #4
90002972:	4413      	add	r3, r2
90002974:	015a      	lsls	r2, r3, #5
90002976:	1ad3      	subs	r3, r2, r3
90002978:	3317      	adds	r3, #23
9000297a:	099b      	lsrs	r3, r3, #6
9000297c:	0419      	lsls	r1, r3, #16
9000297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002980:	095b      	lsrs	r3, r3, #5
90002982:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002986:	4613      	mov	r3, r2
90002988:	01db      	lsls	r3, r3, #7
9000298a:	4413      	add	r3, r2
9000298c:	005b      	lsls	r3, r3, #1
9000298e:	4413      	add	r3, r2
90002990:	3321      	adds	r3, #33	@ 0x21
90002992:	099b      	lsrs	r3, r3, #6
90002994:	021b      	lsls	r3, r3, #8
90002996:	4319      	orrs	r1, r3
90002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000299a:	f003 021f 	and.w	r2, r3, #31
9000299e:	4613      	mov	r3, r2
900029a0:	011b      	lsls	r3, r3, #4
900029a2:	4413      	add	r3, r2
900029a4:	015a      	lsls	r2, r3, #5
900029a6:	1ad3      	subs	r3, r2, r3
900029a8:	3317      	adds	r3, #23
900029aa:	099b      	lsrs	r3, r3, #6
900029ac:	430b      	orrs	r3, r1
900029ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
900029b2:	613b      	str	r3, [r7, #16]
    break;
900029b4:	e002      	b.n	900029bc <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900029b6:	2300      	movs	r3, #0
900029b8:	617b      	str	r3, [r7, #20]
    break;
900029ba:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900029bc:	4b13      	ldr	r3, [pc, #76]	@ (90002a0c <LL_FillBuffer+0xcc>)
900029be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
900029c2:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900029c4:	4a11      	ldr	r2, [pc, #68]	@ (90002a0c <LL_FillBuffer+0xcc>)
900029c6:	697b      	ldr	r3, [r7, #20]
900029c8:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900029ca:	4a10      	ldr	r2, [pc, #64]	@ (90002a0c <LL_FillBuffer+0xcc>)
900029cc:	6a3b      	ldr	r3, [r7, #32]
900029ce:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900029d0:	4b0e      	ldr	r3, [pc, #56]	@ (90002a0c <LL_FillBuffer+0xcc>)
900029d2:	4a0f      	ldr	r2, [pc, #60]	@ (90002a10 <LL_FillBuffer+0xd0>)
900029d4:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900029d6:	480d      	ldr	r0, [pc, #52]	@ (90002a0c <LL_FillBuffer+0xcc>)
900029d8:	f000 fe50 	bl	9000367c <HAL_DMA2D_Init>
900029dc:	4603      	mov	r3, r0
900029de:	2b00      	cmp	r3, #0
900029e0:	d10e      	bne.n	90002a00 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900029e2:	68ba      	ldr	r2, [r7, #8]
900029e4:	683b      	ldr	r3, [r7, #0]
900029e6:	9300      	str	r3, [sp, #0]
900029e8:	687b      	ldr	r3, [r7, #4]
900029ea:	6939      	ldr	r1, [r7, #16]
900029ec:	4807      	ldr	r0, [pc, #28]	@ (90002a0c <LL_FillBuffer+0xcc>)
900029ee:	f000 feb3 	bl	90003758 <HAL_DMA2D_Start>
900029f2:	4603      	mov	r3, r0
900029f4:	2b00      	cmp	r3, #0
900029f6:	d103      	bne.n	90002a00 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900029f8:	2132      	movs	r1, #50	@ 0x32
900029fa:	4804      	ldr	r0, [pc, #16]	@ (90002a0c <LL_FillBuffer+0xcc>)
900029fc:	f000 fed7 	bl	900037ae <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002a00:	bf00      	nop
90002a02:	3718      	adds	r7, #24
90002a04:	46bd      	mov	sp, r7
90002a06:	bd80      	pop	{r7, pc}
90002a08:	200011fc 	.word	0x200011fc
90002a0c:	200010ec 	.word	0x200010ec
90002a10:	52001000 	.word	0x52001000

90002a14 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002a14:	b580      	push	{r7, lr}
90002a16:	b088      	sub	sp, #32
90002a18:	af02      	add	r7, sp, #8
90002a1a:	60f8      	str	r0, [r7, #12]
90002a1c:	60b9      	str	r1, [r7, #8]
90002a1e:	607a      	str	r2, [r7, #4]
90002a20:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002a22:	4a23      	ldr	r2, [pc, #140]	@ (90002ab0 <LL_ConvertLineToRGB+0x9c>)
90002a24:	68fb      	ldr	r3, [r7, #12]
90002a26:	015b      	lsls	r3, r3, #5
90002a28:	4413      	add	r3, r2
90002a2a:	330c      	adds	r3, #12
90002a2c:	681b      	ldr	r3, [r3, #0]
90002a2e:	2b02      	cmp	r3, #2
90002a30:	d102      	bne.n	90002a38 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002a32:	2302      	movs	r3, #2
90002a34:	617b      	str	r3, [r7, #20]
    break;
90002a36:	e002      	b.n	90002a3e <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002a38:	2300      	movs	r3, #0
90002a3a:	617b      	str	r3, [r7, #20]
    break;
90002a3c:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002a3e:	4b1d      	ldr	r3, [pc, #116]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a40:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002a44:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002a46:	4a1b      	ldr	r2, [pc, #108]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a48:	697b      	ldr	r3, [r7, #20]
90002a4a:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002a4c:	4b19      	ldr	r3, [pc, #100]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a4e:	2200      	movs	r2, #0
90002a50:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002a52:	4b18      	ldr	r3, [pc, #96]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a54:	2200      	movs	r2, #0
90002a56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002a58:	4b16      	ldr	r3, [pc, #88]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a5a:	22ff      	movs	r2, #255	@ 0xff
90002a5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002a5e:	4a15      	ldr	r2, [pc, #84]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a60:	6a3b      	ldr	r3, [r7, #32]
90002a62:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002a64:	4b13      	ldr	r3, [pc, #76]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a66:	2200      	movs	r2, #0
90002a68:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002a6a:	4b12      	ldr	r3, [pc, #72]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a6c:	4a12      	ldr	r2, [pc, #72]	@ (90002ab8 <LL_ConvertLineToRGB+0xa4>)
90002a6e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002a70:	4810      	ldr	r0, [pc, #64]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a72:	f000 fe03 	bl	9000367c <HAL_DMA2D_Init>
90002a76:	4603      	mov	r3, r0
90002a78:	2b00      	cmp	r3, #0
90002a7a:	d115      	bne.n	90002aa8 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002a7c:	2101      	movs	r1, #1
90002a7e:	480d      	ldr	r0, [pc, #52]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a80:	f000 ff7e 	bl	90003980 <HAL_DMA2D_ConfigLayer>
90002a84:	4603      	mov	r3, r0
90002a86:	2b00      	cmp	r3, #0
90002a88:	d10e      	bne.n	90002aa8 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002a8a:	68b9      	ldr	r1, [r7, #8]
90002a8c:	687a      	ldr	r2, [r7, #4]
90002a8e:	2301      	movs	r3, #1
90002a90:	9300      	str	r3, [sp, #0]
90002a92:	683b      	ldr	r3, [r7, #0]
90002a94:	4807      	ldr	r0, [pc, #28]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002a96:	f000 fe5f 	bl	90003758 <HAL_DMA2D_Start>
90002a9a:	4603      	mov	r3, r0
90002a9c:	2b00      	cmp	r3, #0
90002a9e:	d103      	bne.n	90002aa8 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002aa0:	2132      	movs	r1, #50	@ 0x32
90002aa2:	4804      	ldr	r0, [pc, #16]	@ (90002ab4 <LL_ConvertLineToRGB+0xa0>)
90002aa4:	f000 fe83 	bl	900037ae <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002aa8:	bf00      	nop
90002aaa:	3718      	adds	r7, #24
90002aac:	46bd      	mov	sp, r7
90002aae:	bd80      	pop	{r7, pc}
90002ab0:	200011fc 	.word	0x200011fc
90002ab4:	200010ec 	.word	0x200010ec
90002ab8:	52001000 	.word	0x52001000

90002abc <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002abc:	b580      	push	{r7, lr}
90002abe:	b08e      	sub	sp, #56	@ 0x38
90002ac0:	af00      	add	r7, sp, #0
90002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002ac4:	687b      	ldr	r3, [r7, #4]
90002ac6:	681b      	ldr	r3, [r3, #0]
90002ac8:	4a5b      	ldr	r2, [pc, #364]	@ (90002c38 <LTDC_MspInit+0x17c>)
90002aca:	4293      	cmp	r3, r2
90002acc:	f040 80b0 	bne.w	90002c30 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002ad0:	4b5a      	ldr	r3, [pc, #360]	@ (90002c3c <LTDC_MspInit+0x180>)
90002ad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002ad6:	4a59      	ldr	r2, [pc, #356]	@ (90002c3c <LTDC_MspInit+0x180>)
90002ad8:	f043 0308 	orr.w	r3, r3, #8
90002adc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002ae0:	4b56      	ldr	r3, [pc, #344]	@ (90002c3c <LTDC_MspInit+0x180>)
90002ae2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002ae6:	f003 0308 	and.w	r3, r3, #8
90002aea:	623b      	str	r3, [r7, #32]
90002aec:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002aee:	4b53      	ldr	r3, [pc, #332]	@ (90002c3c <LTDC_MspInit+0x180>)
90002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002af4:	4a51      	ldr	r2, [pc, #324]	@ (90002c3c <LTDC_MspInit+0x180>)
90002af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002afe:	4b4f      	ldr	r3, [pc, #316]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002b08:	61fb      	str	r3, [r7, #28]
90002b0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002b0c:	4b4b      	ldr	r3, [pc, #300]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b12:	4a4a      	ldr	r2, [pc, #296]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b1c:	4b47      	ldr	r3, [pc, #284]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002b26:	61bb      	str	r3, [r7, #24]
90002b28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002b2a:	4b44      	ldr	r3, [pc, #272]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b30:	4a42      	ldr	r2, [pc, #264]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b3a:	4b40      	ldr	r3, [pc, #256]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002b44:	617b      	str	r3, [r7, #20]
90002b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002b48:	4b3c      	ldr	r3, [pc, #240]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b4e:	4a3b      	ldr	r2, [pc, #236]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b58:	4b38      	ldr	r3, [pc, #224]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002b62:	613b      	str	r3, [r7, #16]
90002b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002b66:	4b35      	ldr	r3, [pc, #212]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b6c:	4a33      	ldr	r2, [pc, #204]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b6e:	f043 0308 	orr.w	r3, r3, #8
90002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b76:	4b31      	ldr	r3, [pc, #196]	@ (90002c3c <LTDC_MspInit+0x180>)
90002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b7c:	f003 0308 	and.w	r3, r3, #8
90002b80:	60fb      	str	r3, [r7, #12]
90002b82:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002b84:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002b88:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002b8a:	2302      	movs	r3, #2
90002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002b8e:	2300      	movs	r3, #0
90002b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002b92:	2302      	movs	r3, #2
90002b94:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002b96:	230e      	movs	r3, #14
90002b98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b9e:	4619      	mov	r1, r3
90002ba0:	4827      	ldr	r0, [pc, #156]	@ (90002c40 <LTDC_MspInit+0x184>)
90002ba2:	f001 f841 	bl	90003c28 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002ba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002baa:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002bac:	230e      	movs	r3, #14
90002bae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bb4:	4619      	mov	r1, r3
90002bb6:	4823      	ldr	r0, [pc, #140]	@ (90002c44 <LTDC_MspInit+0x188>)
90002bb8:	f001 f836 	bl	90003c28 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002bbc:	23ff      	movs	r3, #255	@ 0xff
90002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002bc0:	230e      	movs	r3, #14
90002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bc8:	4619      	mov	r1, r3
90002bca:	481f      	ldr	r0, [pc, #124]	@ (90002c48 <LTDC_MspInit+0x18c>)
90002bcc:	f001 f82c 	bl	90003c28 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002bd0:	f240 2302 	movw	r3, #514	@ 0x202
90002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002bd6:	2302      	movs	r3, #2
90002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002bda:	2300      	movs	r3, #0
90002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002bde:	2302      	movs	r3, #2
90002be0:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002be2:	230e      	movs	r3, #14
90002be4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bea:	4619      	mov	r1, r3
90002bec:	4817      	ldr	r0, [pc, #92]	@ (90002c4c <LTDC_MspInit+0x190>)
90002bee:	f001 f81b 	bl	90003c28 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002bf2:	2380      	movs	r3, #128	@ 0x80
90002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002bf6:	2301      	movs	r3, #1
90002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bfe:	4619      	mov	r1, r3
90002c00:	4813      	ldr	r0, [pc, #76]	@ (90002c50 <LTDC_MspInit+0x194>)
90002c02:	f001 f811 	bl	90003c28 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002c06:	2201      	movs	r2, #1
90002c08:	2180      	movs	r1, #128	@ 0x80
90002c0a:	4811      	ldr	r0, [pc, #68]	@ (90002c50 <LTDC_MspInit+0x194>)
90002c0c:	f001 f9d4 	bl	90003fb8 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002c10:	4b0a      	ldr	r3, [pc, #40]	@ (90002c3c <LTDC_MspInit+0x180>)
90002c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002c16:	4a09      	ldr	r2, [pc, #36]	@ (90002c3c <LTDC_MspInit+0x180>)
90002c18:	f043 0308 	orr.w	r3, r3, #8
90002c1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002c20:	4b06      	ldr	r3, [pc, #24]	@ (90002c3c <LTDC_MspInit+0x180>)
90002c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002c26:	4a05      	ldr	r2, [pc, #20]	@ (90002c3c <LTDC_MspInit+0x180>)
90002c28:	f023 0308 	bic.w	r3, r3, #8
90002c2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002c30:	bf00      	nop
90002c32:	3738      	adds	r7, #56	@ 0x38
90002c34:	46bd      	mov	sp, r7
90002c36:	bd80      	pop	{r7, pc}
90002c38:	50001000 	.word	0x50001000
90002c3c:	58024400 	.word	0x58024400
90002c40:	58022000 	.word	0x58022000
90002c44:	58022400 	.word	0x58022400
90002c48:	58022800 	.word	0x58022800
90002c4c:	58021c00 	.word	0x58021c00
90002c50:	58020c00 	.word	0x58020c00

90002c54 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002c54:	b480      	push	{r7}
90002c56:	b085      	sub	sp, #20
90002c58:	af00      	add	r7, sp, #0
90002c5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002c5c:	687b      	ldr	r3, [r7, #4]
90002c5e:	681b      	ldr	r3, [r3, #0]
90002c60:	4a11      	ldr	r2, [pc, #68]	@ (90002ca8 <DMA2D_MspInit+0x54>)
90002c62:	4293      	cmp	r3, r2
90002c64:	d11a      	bne.n	90002c9c <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002c66:	4b11      	ldr	r3, [pc, #68]	@ (90002cac <DMA2D_MspInit+0x58>)
90002c68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002c6c:	4a0f      	ldr	r2, [pc, #60]	@ (90002cac <DMA2D_MspInit+0x58>)
90002c6e:	f043 0310 	orr.w	r3, r3, #16
90002c72:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002c76:	4b0d      	ldr	r3, [pc, #52]	@ (90002cac <DMA2D_MspInit+0x58>)
90002c78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002c7c:	f003 0310 	and.w	r3, r3, #16
90002c80:	60fb      	str	r3, [r7, #12]
90002c82:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002c84:	4b09      	ldr	r3, [pc, #36]	@ (90002cac <DMA2D_MspInit+0x58>)
90002c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002c88:	4a08      	ldr	r2, [pc, #32]	@ (90002cac <DMA2D_MspInit+0x58>)
90002c8a:	f043 0310 	orr.w	r3, r3, #16
90002c8e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002c90:	4b06      	ldr	r3, [pc, #24]	@ (90002cac <DMA2D_MspInit+0x58>)
90002c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002c94:	4a05      	ldr	r2, [pc, #20]	@ (90002cac <DMA2D_MspInit+0x58>)
90002c96:	f023 0310 	bic.w	r3, r3, #16
90002c9a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002c9c:	bf00      	nop
90002c9e:	3714      	adds	r7, #20
90002ca0:	46bd      	mov	sp, r7
90002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ca6:	4770      	bx	lr
90002ca8:	52001000 	.word	0x52001000
90002cac:	58024400 	.word	0x58024400

90002cb0 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002cb0:	b580      	push	{r7, lr}
90002cb2:	b08a      	sub	sp, #40	@ 0x28
90002cb4:	af00      	add	r7, sp, #0
90002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002cb8:	4b18      	ldr	r3, [pc, #96]	@ (90002d1c <TIMx_PWM_MspInit+0x6c>)
90002cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cbe:	4a17      	ldr	r2, [pc, #92]	@ (90002d1c <TIMx_PWM_MspInit+0x6c>)
90002cc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002cc8:	4b14      	ldr	r3, [pc, #80]	@ (90002d1c <TIMx_PWM_MspInit+0x6c>)
90002cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002cd2:	613b      	str	r3, [r7, #16]
90002cd4:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002cd6:	4b11      	ldr	r3, [pc, #68]	@ (90002d1c <TIMx_PWM_MspInit+0x6c>)
90002cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002cdc:	4a0f      	ldr	r2, [pc, #60]	@ (90002d1c <TIMx_PWM_MspInit+0x6c>)
90002cde:	f043 0302 	orr.w	r3, r3, #2
90002ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002ce6:	4b0d      	ldr	r3, [pc, #52]	@ (90002d1c <TIMx_PWM_MspInit+0x6c>)
90002ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002cec:	f003 0302 	and.w	r3, r3, #2
90002cf0:	60fb      	str	r3, [r7, #12]
90002cf2:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002cf4:	2302      	movs	r3, #2
90002cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002cf8:	2300      	movs	r3, #0
90002cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002cfc:	2301      	movs	r3, #1
90002cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002d00:	2303      	movs	r3, #3
90002d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002d04:	2301      	movs	r3, #1
90002d06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002d08:	f107 0314 	add.w	r3, r7, #20
90002d0c:	4619      	mov	r1, r3
90002d0e:	4804      	ldr	r0, [pc, #16]	@ (90002d20 <TIMx_PWM_MspInit+0x70>)
90002d10:	f000 ff8a 	bl	90003c28 <HAL_GPIO_Init>
}
90002d14:	bf00      	nop
90002d16:	3728      	adds	r7, #40	@ 0x28
90002d18:	46bd      	mov	sp, r7
90002d1a:	bd80      	pop	{r7, pc}
90002d1c:	58024400 	.word	0x58024400
90002d20:	58022800 	.word	0x58022800

90002d24 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002d24:	b580      	push	{r7, lr}
90002d26:	b082      	sub	sp, #8
90002d28:	af00      	add	r7, sp, #0
90002d2a:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002d2c:	687b      	ldr	r3, [r7, #4]
90002d2e:	4a11      	ldr	r2, [pc, #68]	@ (90002d74 <TIMx_PWM_Init+0x50>)
90002d30:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002d32:	6878      	ldr	r0, [r7, #4]
90002d34:	f006 fe82 	bl	90009a3c <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002d38:	6878      	ldr	r0, [r7, #4]
90002d3a:	f7ff ffb9 	bl	90002cb0 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002d3e:	687b      	ldr	r3, [r7, #4]
90002d40:	2204      	movs	r2, #4
90002d42:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002d44:	687b      	ldr	r3, [r7, #4]
90002d46:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002d4a:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002d4c:	687b      	ldr	r3, [r7, #4]
90002d4e:	2200      	movs	r2, #0
90002d50:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002d52:	687b      	ldr	r3, [r7, #4]
90002d54:	2200      	movs	r2, #0
90002d56:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002d58:	687b      	ldr	r3, [r7, #4]
90002d5a:	2200      	movs	r2, #0
90002d5c:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002d5e:	687b      	ldr	r3, [r7, #4]
90002d60:	2200      	movs	r2, #0
90002d62:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002d64:	6878      	ldr	r0, [r7, #4]
90002d66:	f006 fe12 	bl	9000998e <HAL_TIM_PWM_Init>
}
90002d6a:	bf00      	nop
90002d6c:	3708      	adds	r7, #8
90002d6e:	46bd      	mov	sp, r7
90002d70:	bd80      	pop	{r7, pc}
90002d72:	bf00      	nop
90002d74:	40010400 	.word	0x40010400

90002d78 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002d78:	b580      	push	{r7, lr}
90002d7a:	b084      	sub	sp, #16
90002d7c:	af00      	add	r7, sp, #0
90002d7e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002d80:	2300      	movs	r3, #0
90002d82:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002d84:	687b      	ldr	r3, [r7, #4]
90002d86:	2b00      	cmp	r3, #0
90002d88:	d003      	beq.n	90002d92 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002d8a:	f06f 0301 	mvn.w	r3, #1
90002d8e:	60fb      	str	r3, [r7, #12]
90002d90:	e044      	b.n	90002e1c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002d92:	687b      	ldr	r3, [r7, #4]
90002d94:	2234      	movs	r2, #52	@ 0x34
90002d96:	fb02 f303 	mul.w	r3, r2, r3
90002d9a:	4a23      	ldr	r2, [pc, #140]	@ (90002e28 <BSP_SDRAM_Init+0xb0>)
90002d9c:	4413      	add	r3, r2
90002d9e:	4618      	mov	r0, r3
90002da0:	f000 f892 	bl	90002ec8 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002da4:	687b      	ldr	r3, [r7, #4]
90002da6:	2234      	movs	r2, #52	@ 0x34
90002da8:	fb02 f303 	mul.w	r3, r2, r3
90002dac:	4a1e      	ldr	r2, [pc, #120]	@ (90002e28 <BSP_SDRAM_Init+0xb0>)
90002dae:	4413      	add	r3, r2
90002db0:	2210      	movs	r2, #16
90002db2:	2104      	movs	r1, #4
90002db4:	4618      	mov	r0, r3
90002db6:	f000 f83b 	bl	90002e30 <MX_SDRAM_BANK2_Init>
90002dba:	4603      	mov	r3, r0
90002dbc:	2b00      	cmp	r3, #0
90002dbe:	d003      	beq.n	90002dc8 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002dc0:	f04f 33ff 	mov.w	r3, #4294967295
90002dc4:	60fb      	str	r3, [r7, #12]
90002dc6:	e029      	b.n	90002e1c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002dc8:	4b18      	ldr	r3, [pc, #96]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002dca:	2208      	movs	r2, #8
90002dcc:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002dce:	4b17      	ldr	r3, [pc, #92]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002dd0:	2203      	movs	r2, #3
90002dd2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002dd4:	4b15      	ldr	r3, [pc, #84]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002dd6:	f240 6203 	movw	r2, #1539	@ 0x603
90002dda:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002ddc:	4b13      	ldr	r3, [pc, #76]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002dde:	2200      	movs	r2, #0
90002de0:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002de2:	4b12      	ldr	r3, [pc, #72]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002de4:	2200      	movs	r2, #0
90002de6:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002de8:	4b10      	ldr	r3, [pc, #64]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002dea:	2230      	movs	r2, #48	@ 0x30
90002dec:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002dee:	4b0f      	ldr	r3, [pc, #60]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002df0:	2200      	movs	r2, #0
90002df2:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002df4:	4b0d      	ldr	r3, [pc, #52]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002dfa:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002dfc:	687b      	ldr	r3, [r7, #4]
90002dfe:	2234      	movs	r2, #52	@ 0x34
90002e00:	fb02 f303 	mul.w	r3, r2, r3
90002e04:	4a08      	ldr	r2, [pc, #32]	@ (90002e28 <BSP_SDRAM_Init+0xb0>)
90002e06:	4413      	add	r3, r2
90002e08:	4908      	ldr	r1, [pc, #32]	@ (90002e2c <BSP_SDRAM_Init+0xb4>)
90002e0a:	4618      	mov	r0, r3
90002e0c:	f7fe fc3d 	bl	9000168a <MT48LC4M32B2_Init>
90002e10:	4603      	mov	r3, r0
90002e12:	2b00      	cmp	r3, #0
90002e14:	d002      	beq.n	90002e1c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002e16:	f06f 0304 	mvn.w	r3, #4
90002e1a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002e1c:	68fb      	ldr	r3, [r7, #12]
}
90002e1e:	4618      	mov	r0, r3
90002e20:	3710      	adds	r7, #16
90002e22:	46bd      	mov	sp, r7
90002e24:	bd80      	pop	{r7, pc}
90002e26:	bf00      	nop
90002e28:	2000121c 	.word	0x2000121c
90002e2c:	20001250 	.word	0x20001250

90002e30 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002e30:	b580      	push	{r7, lr}
90002e32:	b08c      	sub	sp, #48	@ 0x30
90002e34:	af00      	add	r7, sp, #0
90002e36:	60f8      	str	r0, [r7, #12]
90002e38:	60b9      	str	r1, [r7, #8]
90002e3a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002e3c:	4b20      	ldr	r3, [pc, #128]	@ (90002ec0 <MX_SDRAM_BANK2_Init+0x90>)
90002e3e:	4a21      	ldr	r2, [pc, #132]	@ (90002ec4 <MX_SDRAM_BANK2_Init+0x94>)
90002e40:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002e42:	68fb      	ldr	r3, [r7, #12]
90002e44:	2201      	movs	r2, #1
90002e46:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002e48:	68fb      	ldr	r3, [r7, #12]
90002e4a:	2200      	movs	r2, #0
90002e4c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002e4e:	68fb      	ldr	r3, [r7, #12]
90002e50:	68ba      	ldr	r2, [r7, #8]
90002e52:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002e54:	68fb      	ldr	r3, [r7, #12]
90002e56:	687a      	ldr	r2, [r7, #4]
90002e58:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002e5a:	4b19      	ldr	r3, [pc, #100]	@ (90002ec0 <MX_SDRAM_BANK2_Init+0x90>)
90002e5c:	2240      	movs	r2, #64	@ 0x40
90002e5e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002e60:	68fb      	ldr	r3, [r7, #12]
90002e62:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002e66:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002e68:	68fb      	ldr	r3, [r7, #12]
90002e6a:	2200      	movs	r2, #0
90002e6c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002e6e:	68fb      	ldr	r3, [r7, #12]
90002e70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002e74:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002e76:	68fb      	ldr	r3, [r7, #12]
90002e78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002e7e:	68fb      	ldr	r3, [r7, #12]
90002e80:	2200      	movs	r2, #0
90002e82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002e84:	2302      	movs	r3, #2
90002e86:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002e88:	2307      	movs	r3, #7
90002e8a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002e8c:	2304      	movs	r3, #4
90002e8e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002e90:	2307      	movs	r3, #7
90002e92:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002e94:	2302      	movs	r3, #2
90002e96:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002e98:	2302      	movs	r3, #2
90002e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002e9c:	2302      	movs	r3, #2
90002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002ea0:	f107 0314 	add.w	r3, r7, #20
90002ea4:	4619      	mov	r1, r3
90002ea6:	68f8      	ldr	r0, [r7, #12]
90002ea8:	f006 fcce 	bl	90009848 <HAL_SDRAM_Init>
90002eac:	4603      	mov	r3, r0
90002eae:	2b00      	cmp	r3, #0
90002eb0:	d001      	beq.n	90002eb6 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002eb2:	2301      	movs	r3, #1
90002eb4:	e000      	b.n	90002eb8 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002eb6:	2300      	movs	r3, #0
}
90002eb8:	4618      	mov	r0, r3
90002eba:	3730      	adds	r7, #48	@ 0x30
90002ebc:	46bd      	mov	sp, r7
90002ebe:	bd80      	pop	{r7, pc}
90002ec0:	2000121c 	.word	0x2000121c
90002ec4:	52004140 	.word	0x52004140

90002ec8 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002ec8:	b580      	push	{r7, lr}
90002eca:	b08e      	sub	sp, #56	@ 0x38
90002ecc:	af00      	add	r7, sp, #0
90002ece:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002ed0:	4b73      	ldr	r3, [pc, #460]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002ed2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002ed6:	4a72      	ldr	r2, [pc, #456]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002edc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002ee0:	4b6f      	ldr	r3, [pc, #444]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002ee2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002eea:	623b      	str	r3, [r7, #32]
90002eec:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002eee:	4b6c      	ldr	r3, [pc, #432]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002ef0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002ef4:	4a6a      	ldr	r2, [pc, #424]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002ef6:	f043 0301 	orr.w	r3, r3, #1
90002efa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002efe:	4b68      	ldr	r3, [pc, #416]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002f04:	f003 0301 	and.w	r3, r3, #1
90002f08:	61fb      	str	r3, [r7, #28]
90002f0a:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002f0c:	4b64      	ldr	r3, [pc, #400]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f12:	4a63      	ldr	r2, [pc, #396]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f14:	f043 0308 	orr.w	r3, r3, #8
90002f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f1c:	4b60      	ldr	r3, [pc, #384]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f22:	f003 0308 	and.w	r3, r3, #8
90002f26:	61bb      	str	r3, [r7, #24]
90002f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002f2a:	4b5d      	ldr	r3, [pc, #372]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f30:	4a5b      	ldr	r2, [pc, #364]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f32:	f043 0310 	orr.w	r3, r3, #16
90002f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f3a:	4b59      	ldr	r3, [pc, #356]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f40:	f003 0310 	and.w	r3, r3, #16
90002f44:	617b      	str	r3, [r7, #20]
90002f46:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002f48:	4b55      	ldr	r3, [pc, #340]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f4e:	4a54      	ldr	r2, [pc, #336]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f50:	f043 0320 	orr.w	r3, r3, #32
90002f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f58:	4b51      	ldr	r3, [pc, #324]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f5e:	f003 0320 	and.w	r3, r3, #32
90002f62:	613b      	str	r3, [r7, #16]
90002f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002f66:	4b4e      	ldr	r3, [pc, #312]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f6c:	4a4c      	ldr	r2, [pc, #304]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f76:	4b4a      	ldr	r3, [pc, #296]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002f80:	60fb      	str	r3, [r7, #12]
90002f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002f84:	4b46      	ldr	r3, [pc, #280]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f8a:	4a45      	ldr	r2, [pc, #276]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f94:	4b42      	ldr	r3, [pc, #264]	@ (900030a0 <SDRAM_MspInit+0x1d8>)
90002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002f9e:	60bb      	str	r3, [r7, #8]
90002fa0:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002fa2:	2302      	movs	r3, #2
90002fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002fa6:	2301      	movs	r3, #1
90002fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002faa:	2303      	movs	r3, #3
90002fac:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002fae:	230c      	movs	r3, #12
90002fb0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002fb2:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002fbc:	4619      	mov	r1, r3
90002fbe:	4839      	ldr	r0, [pc, #228]	@ (900030a4 <SDRAM_MspInit+0x1dc>)
90002fc0:	f000 fe32 	bl	90003c28 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002fc4:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002fce:	4619      	mov	r1, r3
90002fd0:	4835      	ldr	r0, [pc, #212]	@ (900030a8 <SDRAM_MspInit+0x1e0>)
90002fd2:	f000 fe29 	bl	90003c28 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002fd6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002fda:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002fe0:	4619      	mov	r1, r3
90002fe2:	4832      	ldr	r0, [pc, #200]	@ (900030ac <SDRAM_MspInit+0x1e4>)
90002fe4:	f000 fe20 	bl	90003c28 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002fe8:	f248 1333 	movw	r3, #33075	@ 0x8133
90002fec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ff2:	4619      	mov	r1, r3
90002ff4:	482e      	ldr	r0, [pc, #184]	@ (900030b0 <SDRAM_MspInit+0x1e8>)
90002ff6:	f000 fe17 	bl	90003c28 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002ffa:	23e0      	movs	r3, #224	@ 0xe0
90002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003002:	4619      	mov	r1, r3
90003004:	482b      	ldr	r0, [pc, #172]	@ (900030b4 <SDRAM_MspInit+0x1ec>)
90003006:	f000 fe0f 	bl	90003c28 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000300a:	4b2b      	ldr	r3, [pc, #172]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
9000300c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90003010:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90003012:	4b29      	ldr	r3, [pc, #164]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90003018:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000301a:	4b27      	ldr	r3, [pc, #156]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
9000301c:	2280      	movs	r2, #128	@ 0x80
9000301e:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90003020:	4b25      	ldr	r3, [pc, #148]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003022:	2200      	movs	r2, #0
90003024:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90003026:	4b24      	ldr	r3, [pc, #144]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003028:	f240 2202 	movw	r2, #514	@ 0x202
9000302c:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
9000302e:	4b22      	ldr	r3, [pc, #136]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003030:	f640 0208 	movw	r2, #2056	@ 0x808
90003034:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90003036:	4b20      	ldr	r3, [pc, #128]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003038:	2220      	movs	r2, #32
9000303a:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
9000303c:	4b1e      	ldr	r3, [pc, #120]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
9000303e:	2280      	movs	r2, #128	@ 0x80
90003040:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90003042:	4b1d      	ldr	r3, [pc, #116]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003044:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90003048:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
9000304a:	4b1b      	ldr	r3, [pc, #108]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
9000304c:	2200      	movs	r2, #0
9000304e:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90003050:	4b19      	ldr	r3, [pc, #100]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003052:	2200      	movs	r2, #0
90003054:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90003056:	4b18      	ldr	r3, [pc, #96]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003058:	2280      	movs	r2, #128	@ 0x80
9000305a:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
9000305c:	4b16      	ldr	r3, [pc, #88]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
9000305e:	2200      	movs	r2, #0
90003060:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90003062:	4b15      	ldr	r3, [pc, #84]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003064:	2200      	movs	r2, #0
90003066:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90003068:	4b13      	ldr	r3, [pc, #76]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
9000306a:	4a14      	ldr	r2, [pc, #80]	@ (900030bc <SDRAM_MspInit+0x1f4>)
9000306c:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000306e:	4b14      	ldr	r3, [pc, #80]	@ (900030c0 <SDRAM_MspInit+0x1f8>)
90003070:	4a11      	ldr	r2, [pc, #68]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003072:	631a      	str	r2, [r3, #48]	@ 0x30
90003074:	4b10      	ldr	r3, [pc, #64]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003076:	4a12      	ldr	r2, [pc, #72]	@ (900030c0 <SDRAM_MspInit+0x1f8>)
90003078:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
9000307a:	480f      	ldr	r0, [pc, #60]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
9000307c:	f003 fce2 	bl	90006a44 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90003080:	480d      	ldr	r0, [pc, #52]	@ (900030b8 <SDRAM_MspInit+0x1f0>)
90003082:	f003 fc93 	bl	900069ac <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90003086:	2200      	movs	r2, #0
90003088:	210f      	movs	r1, #15
9000308a:	207a      	movs	r0, #122	@ 0x7a
9000308c:	f000 fa49 	bl	90003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90003090:	207a      	movs	r0, #122	@ 0x7a
90003092:	f000 fa60 	bl	90003556 <HAL_NVIC_EnableIRQ>
}
90003096:	bf00      	nop
90003098:	3738      	adds	r7, #56	@ 0x38
9000309a:	46bd      	mov	sp, r7
9000309c:	bd80      	pop	{r7, pc}
9000309e:	bf00      	nop
900030a0:	58024400 	.word	0x58024400
900030a4:	58020c00 	.word	0x58020c00
900030a8:	58021000 	.word	0x58021000
900030ac:	58021400 	.word	0x58021400
900030b0:	58021800 	.word	0x58021800
900030b4:	58021c00 	.word	0x58021c00
900030b8:	20001270 	.word	0x20001270
900030bc:	52000040 	.word	0x52000040
900030c0:	2000121c 	.word	0x2000121c

900030c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
900030c4:	b480      	push	{r7}
900030c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900030c8:	4b29      	ldr	r3, [pc, #164]	@ (90003170 <SystemInit+0xac>)
900030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900030ce:	4a28      	ldr	r2, [pc, #160]	@ (90003170 <SystemInit+0xac>)
900030d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
900030d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
900030d8:	4b26      	ldr	r3, [pc, #152]	@ (90003174 <SystemInit+0xb0>)
900030da:	681b      	ldr	r3, [r3, #0]
900030dc:	4a25      	ldr	r2, [pc, #148]	@ (90003174 <SystemInit+0xb0>)
900030de:	f043 0301 	orr.w	r3, r3, #1
900030e2:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900030e4:	4b23      	ldr	r3, [pc, #140]	@ (90003174 <SystemInit+0xb0>)
900030e6:	2200      	movs	r2, #0
900030e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900030ea:	4b22      	ldr	r3, [pc, #136]	@ (90003174 <SystemInit+0xb0>)
900030ec:	681a      	ldr	r2, [r3, #0]
900030ee:	4921      	ldr	r1, [pc, #132]	@ (90003174 <SystemInit+0xb0>)
900030f0:	4b21      	ldr	r3, [pc, #132]	@ (90003178 <SystemInit+0xb4>)
900030f2:	4013      	ands	r3, r2
900030f4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
900030f6:	4b1f      	ldr	r3, [pc, #124]	@ (90003174 <SystemInit+0xb0>)
900030f8:	2200      	movs	r2, #0
900030fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
900030fc:	4b1d      	ldr	r3, [pc, #116]	@ (90003174 <SystemInit+0xb0>)
900030fe:	2200      	movs	r2, #0
90003100:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90003102:	4b1c      	ldr	r3, [pc, #112]	@ (90003174 <SystemInit+0xb0>)
90003104:	2200      	movs	r2, #0
90003106:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90003108:	4b1a      	ldr	r3, [pc, #104]	@ (90003174 <SystemInit+0xb0>)
9000310a:	2200      	movs	r2, #0
9000310c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
9000310e:	4b19      	ldr	r3, [pc, #100]	@ (90003174 <SystemInit+0xb0>)
90003110:	2200      	movs	r2, #0
90003112:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003114:	4b17      	ldr	r3, [pc, #92]	@ (90003174 <SystemInit+0xb0>)
90003116:	2200      	movs	r2, #0
90003118:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
9000311a:	4b16      	ldr	r3, [pc, #88]	@ (90003174 <SystemInit+0xb0>)
9000311c:	2200      	movs	r2, #0
9000311e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90003120:	4b14      	ldr	r3, [pc, #80]	@ (90003174 <SystemInit+0xb0>)
90003122:	2200      	movs	r2, #0
90003124:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90003126:	4b13      	ldr	r3, [pc, #76]	@ (90003174 <SystemInit+0xb0>)
90003128:	2200      	movs	r2, #0
9000312a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
9000312c:	4b11      	ldr	r3, [pc, #68]	@ (90003174 <SystemInit+0xb0>)
9000312e:	2200      	movs	r2, #0
90003130:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90003132:	4b10      	ldr	r3, [pc, #64]	@ (90003174 <SystemInit+0xb0>)
90003134:	2200      	movs	r2, #0
90003136:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90003138:	4b0e      	ldr	r3, [pc, #56]	@ (90003174 <SystemInit+0xb0>)
9000313a:	681b      	ldr	r3, [r3, #0]
9000313c:	4a0d      	ldr	r2, [pc, #52]	@ (90003174 <SystemInit+0xb0>)
9000313e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90003142:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90003144:	4b0b      	ldr	r3, [pc, #44]	@ (90003174 <SystemInit+0xb0>)
90003146:	2200      	movs	r2, #0
90003148:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000314a:	4b0c      	ldr	r3, [pc, #48]	@ (9000317c <SystemInit+0xb8>)
9000314c:	681a      	ldr	r2, [r3, #0]
9000314e:	4b0c      	ldr	r3, [pc, #48]	@ (90003180 <SystemInit+0xbc>)
90003150:	4013      	ands	r3, r2
90003152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003156:	d202      	bcs.n	9000315e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90003158:	4b0a      	ldr	r3, [pc, #40]	@ (90003184 <SystemInit+0xc0>)
9000315a:	2201      	movs	r2, #1
9000315c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
9000315e:	4b04      	ldr	r3, [pc, #16]	@ (90003170 <SystemInit+0xac>)
90003160:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90003164:	609a      	str	r2, [r3, #8]
#endif  


}
90003166:	bf00      	nop
90003168:	46bd      	mov	sp, r7
9000316a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000316e:	4770      	bx	lr
90003170:	e000ed00 	.word	0xe000ed00
90003174:	58024400 	.word	0x58024400
90003178:	eaf6ed7f 	.word	0xeaf6ed7f
9000317c:	5c001000 	.word	0x5c001000
90003180:	ffff0000 	.word	0xffff0000
90003184:	51008108 	.word	0x51008108

90003188 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90003188:	b480      	push	{r7}
9000318a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
9000318c:	4b09      	ldr	r3, [pc, #36]	@ (900031b4 <ExitRun0Mode+0x2c>)
9000318e:	68db      	ldr	r3, [r3, #12]
90003190:	4a08      	ldr	r2, [pc, #32]	@ (900031b4 <ExitRun0Mode+0x2c>)
90003192:	f043 0302 	orr.w	r3, r3, #2
90003196:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90003198:	bf00      	nop
9000319a:	4b06      	ldr	r3, [pc, #24]	@ (900031b4 <ExitRun0Mode+0x2c>)
9000319c:	685b      	ldr	r3, [r3, #4]
9000319e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900031a2:	2b00      	cmp	r3, #0
900031a4:	d0f9      	beq.n	9000319a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
900031a6:	bf00      	nop
900031a8:	bf00      	nop
900031aa:	46bd      	mov	sp, r7
900031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900031b0:	4770      	bx	lr
900031b2:	bf00      	nop
900031b4:	58024800 	.word	0x58024800

900031b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900031b8:	b580      	push	{r7, lr}
900031ba:	b082      	sub	sp, #8
900031bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900031be:	2003      	movs	r0, #3
900031c0:	f000 f9a4 	bl	9000350c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900031c4:	f004 fb3e 	bl	90007844 <HAL_RCC_GetSysClockFreq>
900031c8:	4602      	mov	r2, r0
900031ca:	4b15      	ldr	r3, [pc, #84]	@ (90003220 <HAL_Init+0x68>)
900031cc:	699b      	ldr	r3, [r3, #24]
900031ce:	0a1b      	lsrs	r3, r3, #8
900031d0:	f003 030f 	and.w	r3, r3, #15
900031d4:	4913      	ldr	r1, [pc, #76]	@ (90003224 <HAL_Init+0x6c>)
900031d6:	5ccb      	ldrb	r3, [r1, r3]
900031d8:	f003 031f 	and.w	r3, r3, #31
900031dc:	fa22 f303 	lsr.w	r3, r2, r3
900031e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900031e2:	4b0f      	ldr	r3, [pc, #60]	@ (90003220 <HAL_Init+0x68>)
900031e4:	699b      	ldr	r3, [r3, #24]
900031e6:	f003 030f 	and.w	r3, r3, #15
900031ea:	4a0e      	ldr	r2, [pc, #56]	@ (90003224 <HAL_Init+0x6c>)
900031ec:	5cd3      	ldrb	r3, [r2, r3]
900031ee:	f003 031f 	and.w	r3, r3, #31
900031f2:	687a      	ldr	r2, [r7, #4]
900031f4:	fa22 f303 	lsr.w	r3, r2, r3
900031f8:	4a0b      	ldr	r2, [pc, #44]	@ (90003228 <HAL_Init+0x70>)
900031fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900031fc:	4a0b      	ldr	r2, [pc, #44]	@ (9000322c <HAL_Init+0x74>)
900031fe:	687b      	ldr	r3, [r7, #4]
90003200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90003202:	200f      	movs	r0, #15
90003204:	f000 f81c 	bl	90003240 <HAL_InitTick>
90003208:	4603      	mov	r3, r0
9000320a:	2b00      	cmp	r3, #0
9000320c:	d001      	beq.n	90003212 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
9000320e:	2301      	movs	r3, #1
90003210:	e002      	b.n	90003218 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90003212:	f000 f80d 	bl	90003230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90003216:	2300      	movs	r3, #0
}
90003218:	4618      	mov	r0, r3
9000321a:	3708      	adds	r7, #8
9000321c:	46bd      	mov	sp, r7
9000321e:	bd80      	pop	{r7, pc}
90003220:	58024400 	.word	0x58024400
90003224:	9000d7e0 	.word	0x9000d7e0
90003228:	20000004 	.word	0x20000004
9000322c:	20000000 	.word	0x20000000

90003230 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90003230:	b480      	push	{r7}
90003232:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90003234:	bf00      	nop
90003236:	46bd      	mov	sp, r7
90003238:	f85d 7b04 	ldr.w	r7, [sp], #4
9000323c:	4770      	bx	lr
	...

90003240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90003240:	b580      	push	{r7, lr}
90003242:	b082      	sub	sp, #8
90003244:	af00      	add	r7, sp, #0
90003246:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90003248:	4b15      	ldr	r3, [pc, #84]	@ (900032a0 <HAL_InitTick+0x60>)
9000324a:	781b      	ldrb	r3, [r3, #0]
9000324c:	2b00      	cmp	r3, #0
9000324e:	d101      	bne.n	90003254 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90003250:	2301      	movs	r3, #1
90003252:	e021      	b.n	90003298 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90003254:	4b13      	ldr	r3, [pc, #76]	@ (900032a4 <HAL_InitTick+0x64>)
90003256:	681a      	ldr	r2, [r3, #0]
90003258:	4b11      	ldr	r3, [pc, #68]	@ (900032a0 <HAL_InitTick+0x60>)
9000325a:	781b      	ldrb	r3, [r3, #0]
9000325c:	4619      	mov	r1, r3
9000325e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90003262:	fbb3 f3f1 	udiv	r3, r3, r1
90003266:	fbb2 f3f3 	udiv	r3, r2, r3
9000326a:	4618      	mov	r0, r3
9000326c:	f000 f981 	bl	90003572 <HAL_SYSTICK_Config>
90003270:	4603      	mov	r3, r0
90003272:	2b00      	cmp	r3, #0
90003274:	d001      	beq.n	9000327a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90003276:	2301      	movs	r3, #1
90003278:	e00e      	b.n	90003298 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000327a:	687b      	ldr	r3, [r7, #4]
9000327c:	2b0f      	cmp	r3, #15
9000327e:	d80a      	bhi.n	90003296 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003280:	2200      	movs	r2, #0
90003282:	6879      	ldr	r1, [r7, #4]
90003284:	f04f 30ff 	mov.w	r0, #4294967295
90003288:	f000 f94b 	bl	90003522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
9000328c:	4a06      	ldr	r2, [pc, #24]	@ (900032a8 <HAL_InitTick+0x68>)
9000328e:	687b      	ldr	r3, [r7, #4]
90003290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90003292:	2300      	movs	r3, #0
90003294:	e000      	b.n	90003298 <HAL_InitTick+0x58>
    return HAL_ERROR;
90003296:	2301      	movs	r3, #1
}
90003298:	4618      	mov	r0, r3
9000329a:	3708      	adds	r7, #8
9000329c:	46bd      	mov	sp, r7
9000329e:	bd80      	pop	{r7, pc}
900032a0:	2000000c 	.word	0x2000000c
900032a4:	20000000 	.word	0x20000000
900032a8:	20000008 	.word	0x20000008

900032ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
900032ac:	b480      	push	{r7}
900032ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
900032b0:	4b06      	ldr	r3, [pc, #24]	@ (900032cc <HAL_IncTick+0x20>)
900032b2:	781b      	ldrb	r3, [r3, #0]
900032b4:	461a      	mov	r2, r3
900032b6:	4b06      	ldr	r3, [pc, #24]	@ (900032d0 <HAL_IncTick+0x24>)
900032b8:	681b      	ldr	r3, [r3, #0]
900032ba:	4413      	add	r3, r2
900032bc:	4a04      	ldr	r2, [pc, #16]	@ (900032d0 <HAL_IncTick+0x24>)
900032be:	6013      	str	r3, [r2, #0]
}
900032c0:	bf00      	nop
900032c2:	46bd      	mov	sp, r7
900032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900032c8:	4770      	bx	lr
900032ca:	bf00      	nop
900032cc:	2000000c 	.word	0x2000000c
900032d0:	200012dc 	.word	0x200012dc

900032d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900032d4:	b480      	push	{r7}
900032d6:	af00      	add	r7, sp, #0
  return uwTick;
900032d8:	4b03      	ldr	r3, [pc, #12]	@ (900032e8 <HAL_GetTick+0x14>)
900032da:	681b      	ldr	r3, [r3, #0]
}
900032dc:	4618      	mov	r0, r3
900032de:	46bd      	mov	sp, r7
900032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900032e4:	4770      	bx	lr
900032e6:	bf00      	nop
900032e8:	200012dc 	.word	0x200012dc

900032ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900032ec:	b580      	push	{r7, lr}
900032ee:	b084      	sub	sp, #16
900032f0:	af00      	add	r7, sp, #0
900032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900032f4:	f7ff ffee 	bl	900032d4 <HAL_GetTick>
900032f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
900032fa:	687b      	ldr	r3, [r7, #4]
900032fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900032fe:	68fb      	ldr	r3, [r7, #12]
90003300:	f1b3 3fff 	cmp.w	r3, #4294967295
90003304:	d005      	beq.n	90003312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90003306:	4b0a      	ldr	r3, [pc, #40]	@ (90003330 <HAL_Delay+0x44>)
90003308:	781b      	ldrb	r3, [r3, #0]
9000330a:	461a      	mov	r2, r3
9000330c:	68fb      	ldr	r3, [r7, #12]
9000330e:	4413      	add	r3, r2
90003310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90003312:	bf00      	nop
90003314:	f7ff ffde 	bl	900032d4 <HAL_GetTick>
90003318:	4602      	mov	r2, r0
9000331a:	68bb      	ldr	r3, [r7, #8]
9000331c:	1ad3      	subs	r3, r2, r3
9000331e:	68fa      	ldr	r2, [r7, #12]
90003320:	429a      	cmp	r2, r3
90003322:	d8f7      	bhi.n	90003314 <HAL_Delay+0x28>
  {
  }
}
90003324:	bf00      	nop
90003326:	bf00      	nop
90003328:	3710      	adds	r7, #16
9000332a:	46bd      	mov	sp, r7
9000332c:	bd80      	pop	{r7, pc}
9000332e:	bf00      	nop
90003330:	2000000c 	.word	0x2000000c

90003334 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003334:	b480      	push	{r7}
90003336:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003338:	4b03      	ldr	r3, [pc, #12]	@ (90003348 <HAL_GetREVID+0x14>)
9000333a:	681b      	ldr	r3, [r3, #0]
9000333c:	0c1b      	lsrs	r3, r3, #16
}
9000333e:	4618      	mov	r0, r3
90003340:	46bd      	mov	sp, r7
90003342:	f85d 7b04 	ldr.w	r7, [sp], #4
90003346:	4770      	bx	lr
90003348:	5c001000 	.word	0x5c001000

9000334c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
9000334c:	b480      	push	{r7}
9000334e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90003350:	4b05      	ldr	r3, [pc, #20]	@ (90003368 <HAL_EnableCompensationCell+0x1c>)
90003352:	6a1b      	ldr	r3, [r3, #32]
90003354:	4a04      	ldr	r2, [pc, #16]	@ (90003368 <HAL_EnableCompensationCell+0x1c>)
90003356:	f043 0301 	orr.w	r3, r3, #1
9000335a:	6213      	str	r3, [r2, #32]
}
9000335c:	bf00      	nop
9000335e:	46bd      	mov	sp, r7
90003360:	f85d 7b04 	ldr.w	r7, [sp], #4
90003364:	4770      	bx	lr
90003366:	bf00      	nop
90003368:	58000400 	.word	0x58000400

9000336c <__NVIC_SetPriorityGrouping>:
{
9000336c:	b480      	push	{r7}
9000336e:	b085      	sub	sp, #20
90003370:	af00      	add	r7, sp, #0
90003372:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003374:	687b      	ldr	r3, [r7, #4]
90003376:	f003 0307 	and.w	r3, r3, #7
9000337a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000337c:	4b0b      	ldr	r3, [pc, #44]	@ (900033ac <__NVIC_SetPriorityGrouping+0x40>)
9000337e:	68db      	ldr	r3, [r3, #12]
90003380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90003382:	68ba      	ldr	r2, [r7, #8]
90003384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003388:	4013      	ands	r3, r2
9000338a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000338c:	68fb      	ldr	r3, [r7, #12]
9000338e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003390:	68bb      	ldr	r3, [r7, #8]
90003392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003394:	4b06      	ldr	r3, [pc, #24]	@ (900033b0 <__NVIC_SetPriorityGrouping+0x44>)
90003396:	4313      	orrs	r3, r2
90003398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000339a:	4a04      	ldr	r2, [pc, #16]	@ (900033ac <__NVIC_SetPriorityGrouping+0x40>)
9000339c:	68bb      	ldr	r3, [r7, #8]
9000339e:	60d3      	str	r3, [r2, #12]
}
900033a0:	bf00      	nop
900033a2:	3714      	adds	r7, #20
900033a4:	46bd      	mov	sp, r7
900033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900033aa:	4770      	bx	lr
900033ac:	e000ed00 	.word	0xe000ed00
900033b0:	05fa0000 	.word	0x05fa0000

900033b4 <__NVIC_GetPriorityGrouping>:
{
900033b4:	b480      	push	{r7}
900033b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900033b8:	4b04      	ldr	r3, [pc, #16]	@ (900033cc <__NVIC_GetPriorityGrouping+0x18>)
900033ba:	68db      	ldr	r3, [r3, #12]
900033bc:	0a1b      	lsrs	r3, r3, #8
900033be:	f003 0307 	and.w	r3, r3, #7
}
900033c2:	4618      	mov	r0, r3
900033c4:	46bd      	mov	sp, r7
900033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900033ca:	4770      	bx	lr
900033cc:	e000ed00 	.word	0xe000ed00

900033d0 <__NVIC_EnableIRQ>:
{
900033d0:	b480      	push	{r7}
900033d2:	b083      	sub	sp, #12
900033d4:	af00      	add	r7, sp, #0
900033d6:	4603      	mov	r3, r0
900033d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900033da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900033de:	2b00      	cmp	r3, #0
900033e0:	db0b      	blt.n	900033fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900033e2:	88fb      	ldrh	r3, [r7, #6]
900033e4:	f003 021f 	and.w	r2, r3, #31
900033e8:	4907      	ldr	r1, [pc, #28]	@ (90003408 <__NVIC_EnableIRQ+0x38>)
900033ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900033ee:	095b      	lsrs	r3, r3, #5
900033f0:	2001      	movs	r0, #1
900033f2:	fa00 f202 	lsl.w	r2, r0, r2
900033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900033fa:	bf00      	nop
900033fc:	370c      	adds	r7, #12
900033fe:	46bd      	mov	sp, r7
90003400:	f85d 7b04 	ldr.w	r7, [sp], #4
90003404:	4770      	bx	lr
90003406:	bf00      	nop
90003408:	e000e100 	.word	0xe000e100

9000340c <__NVIC_SetPriority>:
{
9000340c:	b480      	push	{r7}
9000340e:	b083      	sub	sp, #12
90003410:	af00      	add	r7, sp, #0
90003412:	4603      	mov	r3, r0
90003414:	6039      	str	r1, [r7, #0]
90003416:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000341c:	2b00      	cmp	r3, #0
9000341e:	db0a      	blt.n	90003436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003420:	683b      	ldr	r3, [r7, #0]
90003422:	b2da      	uxtb	r2, r3
90003424:	490c      	ldr	r1, [pc, #48]	@ (90003458 <__NVIC_SetPriority+0x4c>)
90003426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000342a:	0112      	lsls	r2, r2, #4
9000342c:	b2d2      	uxtb	r2, r2
9000342e:	440b      	add	r3, r1
90003430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003434:	e00a      	b.n	9000344c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003436:	683b      	ldr	r3, [r7, #0]
90003438:	b2da      	uxtb	r2, r3
9000343a:	4908      	ldr	r1, [pc, #32]	@ (9000345c <__NVIC_SetPriority+0x50>)
9000343c:	88fb      	ldrh	r3, [r7, #6]
9000343e:	f003 030f 	and.w	r3, r3, #15
90003442:	3b04      	subs	r3, #4
90003444:	0112      	lsls	r2, r2, #4
90003446:	b2d2      	uxtb	r2, r2
90003448:	440b      	add	r3, r1
9000344a:	761a      	strb	r2, [r3, #24]
}
9000344c:	bf00      	nop
9000344e:	370c      	adds	r7, #12
90003450:	46bd      	mov	sp, r7
90003452:	f85d 7b04 	ldr.w	r7, [sp], #4
90003456:	4770      	bx	lr
90003458:	e000e100 	.word	0xe000e100
9000345c:	e000ed00 	.word	0xe000ed00

90003460 <NVIC_EncodePriority>:
{
90003460:	b480      	push	{r7}
90003462:	b089      	sub	sp, #36	@ 0x24
90003464:	af00      	add	r7, sp, #0
90003466:	60f8      	str	r0, [r7, #12]
90003468:	60b9      	str	r1, [r7, #8]
9000346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
9000346c:	68fb      	ldr	r3, [r7, #12]
9000346e:	f003 0307 	and.w	r3, r3, #7
90003472:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003474:	69fb      	ldr	r3, [r7, #28]
90003476:	f1c3 0307 	rsb	r3, r3, #7
9000347a:	2b04      	cmp	r3, #4
9000347c:	bf28      	it	cs
9000347e:	2304      	movcs	r3, #4
90003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90003482:	69fb      	ldr	r3, [r7, #28]
90003484:	3304      	adds	r3, #4
90003486:	2b06      	cmp	r3, #6
90003488:	d902      	bls.n	90003490 <NVIC_EncodePriority+0x30>
9000348a:	69fb      	ldr	r3, [r7, #28]
9000348c:	3b03      	subs	r3, #3
9000348e:	e000      	b.n	90003492 <NVIC_EncodePriority+0x32>
90003490:	2300      	movs	r3, #0
90003492:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003494:	f04f 32ff 	mov.w	r2, #4294967295
90003498:	69bb      	ldr	r3, [r7, #24]
9000349a:	fa02 f303 	lsl.w	r3, r2, r3
9000349e:	43da      	mvns	r2, r3
900034a0:	68bb      	ldr	r3, [r7, #8]
900034a2:	401a      	ands	r2, r3
900034a4:	697b      	ldr	r3, [r7, #20]
900034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900034a8:	f04f 31ff 	mov.w	r1, #4294967295
900034ac:	697b      	ldr	r3, [r7, #20]
900034ae:	fa01 f303 	lsl.w	r3, r1, r3
900034b2:	43d9      	mvns	r1, r3
900034b4:	687b      	ldr	r3, [r7, #4]
900034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900034b8:	4313      	orrs	r3, r2
}
900034ba:	4618      	mov	r0, r3
900034bc:	3724      	adds	r7, #36	@ 0x24
900034be:	46bd      	mov	sp, r7
900034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900034c4:	4770      	bx	lr
	...

900034c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900034c8:	b580      	push	{r7, lr}
900034ca:	b082      	sub	sp, #8
900034cc:	af00      	add	r7, sp, #0
900034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900034d0:	687b      	ldr	r3, [r7, #4]
900034d2:	3b01      	subs	r3, #1
900034d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900034d8:	d301      	bcc.n	900034de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900034da:	2301      	movs	r3, #1
900034dc:	e00f      	b.n	900034fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900034de:	4a0a      	ldr	r2, [pc, #40]	@ (90003508 <SysTick_Config+0x40>)
900034e0:	687b      	ldr	r3, [r7, #4]
900034e2:	3b01      	subs	r3, #1
900034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900034e6:	210f      	movs	r1, #15
900034e8:	f04f 30ff 	mov.w	r0, #4294967295
900034ec:	f7ff ff8e 	bl	9000340c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900034f0:	4b05      	ldr	r3, [pc, #20]	@ (90003508 <SysTick_Config+0x40>)
900034f2:	2200      	movs	r2, #0
900034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900034f6:	4b04      	ldr	r3, [pc, #16]	@ (90003508 <SysTick_Config+0x40>)
900034f8:	2207      	movs	r2, #7
900034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900034fc:	2300      	movs	r3, #0
}
900034fe:	4618      	mov	r0, r3
90003500:	3708      	adds	r7, #8
90003502:	46bd      	mov	sp, r7
90003504:	bd80      	pop	{r7, pc}
90003506:	bf00      	nop
90003508:	e000e010 	.word	0xe000e010

9000350c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
9000350c:	b580      	push	{r7, lr}
9000350e:	b082      	sub	sp, #8
90003510:	af00      	add	r7, sp, #0
90003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003514:	6878      	ldr	r0, [r7, #4]
90003516:	f7ff ff29 	bl	9000336c <__NVIC_SetPriorityGrouping>
}
9000351a:	bf00      	nop
9000351c:	3708      	adds	r7, #8
9000351e:	46bd      	mov	sp, r7
90003520:	bd80      	pop	{r7, pc}

90003522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003522:	b580      	push	{r7, lr}
90003524:	b086      	sub	sp, #24
90003526:	af00      	add	r7, sp, #0
90003528:	4603      	mov	r3, r0
9000352a:	60b9      	str	r1, [r7, #8]
9000352c:	607a      	str	r2, [r7, #4]
9000352e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003530:	f7ff ff40 	bl	900033b4 <__NVIC_GetPriorityGrouping>
90003534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003536:	687a      	ldr	r2, [r7, #4]
90003538:	68b9      	ldr	r1, [r7, #8]
9000353a:	6978      	ldr	r0, [r7, #20]
9000353c:	f7ff ff90 	bl	90003460 <NVIC_EncodePriority>
90003540:	4602      	mov	r2, r0
90003542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003546:	4611      	mov	r1, r2
90003548:	4618      	mov	r0, r3
9000354a:	f7ff ff5f 	bl	9000340c <__NVIC_SetPriority>
}
9000354e:	bf00      	nop
90003550:	3718      	adds	r7, #24
90003552:	46bd      	mov	sp, r7
90003554:	bd80      	pop	{r7, pc}

90003556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003556:	b580      	push	{r7, lr}
90003558:	b082      	sub	sp, #8
9000355a:	af00      	add	r7, sp, #0
9000355c:	4603      	mov	r3, r0
9000355e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003564:	4618      	mov	r0, r3
90003566:	f7ff ff33 	bl	900033d0 <__NVIC_EnableIRQ>
}
9000356a:	bf00      	nop
9000356c:	3708      	adds	r7, #8
9000356e:	46bd      	mov	sp, r7
90003570:	bd80      	pop	{r7, pc}

90003572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90003572:	b580      	push	{r7, lr}
90003574:	b082      	sub	sp, #8
90003576:	af00      	add	r7, sp, #0
90003578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
9000357a:	6878      	ldr	r0, [r7, #4]
9000357c:	f7ff ffa4 	bl	900034c8 <SysTick_Config>
90003580:	4603      	mov	r3, r0
}
90003582:	4618      	mov	r0, r3
90003584:	3708      	adds	r7, #8
90003586:	46bd      	mov	sp, r7
90003588:	bd80      	pop	{r7, pc}
	...

9000358c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
9000358c:	b480      	push	{r7}
9000358e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90003590:	f3bf 8f5f 	dmb	sy
}
90003594:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003596:	4b07      	ldr	r3, [pc, #28]	@ (900035b4 <HAL_MPU_Disable+0x28>)
90003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000359a:	4a06      	ldr	r2, [pc, #24]	@ (900035b4 <HAL_MPU_Disable+0x28>)
9000359c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900035a0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900035a2:	4b05      	ldr	r3, [pc, #20]	@ (900035b8 <HAL_MPU_Disable+0x2c>)
900035a4:	2200      	movs	r2, #0
900035a6:	605a      	str	r2, [r3, #4]
}
900035a8:	bf00      	nop
900035aa:	46bd      	mov	sp, r7
900035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900035b0:	4770      	bx	lr
900035b2:	bf00      	nop
900035b4:	e000ed00 	.word	0xe000ed00
900035b8:	e000ed90 	.word	0xe000ed90

900035bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900035bc:	b480      	push	{r7}
900035be:	b083      	sub	sp, #12
900035c0:	af00      	add	r7, sp, #0
900035c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900035c4:	4a0b      	ldr	r2, [pc, #44]	@ (900035f4 <HAL_MPU_Enable+0x38>)
900035c6:	687b      	ldr	r3, [r7, #4]
900035c8:	f043 0301 	orr.w	r3, r3, #1
900035cc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900035ce:	4b0a      	ldr	r3, [pc, #40]	@ (900035f8 <HAL_MPU_Enable+0x3c>)
900035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900035d2:	4a09      	ldr	r2, [pc, #36]	@ (900035f8 <HAL_MPU_Enable+0x3c>)
900035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900035d8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900035da:	f3bf 8f4f 	dsb	sy
}
900035de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900035e0:	f3bf 8f6f 	isb	sy
}
900035e4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900035e6:	bf00      	nop
900035e8:	370c      	adds	r7, #12
900035ea:	46bd      	mov	sp, r7
900035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900035f0:	4770      	bx	lr
900035f2:	bf00      	nop
900035f4:	e000ed90 	.word	0xe000ed90
900035f8:	e000ed00 	.word	0xe000ed00

900035fc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
900035fc:	b480      	push	{r7}
900035fe:	b083      	sub	sp, #12
90003600:	af00      	add	r7, sp, #0
90003602:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003604:	687b      	ldr	r3, [r7, #4]
90003606:	785a      	ldrb	r2, [r3, #1]
90003608:	4b1b      	ldr	r3, [pc, #108]	@ (90003678 <HAL_MPU_ConfigRegion+0x7c>)
9000360a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
9000360c:	4b1a      	ldr	r3, [pc, #104]	@ (90003678 <HAL_MPU_ConfigRegion+0x7c>)
9000360e:	691b      	ldr	r3, [r3, #16]
90003610:	4a19      	ldr	r2, [pc, #100]	@ (90003678 <HAL_MPU_ConfigRegion+0x7c>)
90003612:	f023 0301 	bic.w	r3, r3, #1
90003616:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003618:	4a17      	ldr	r2, [pc, #92]	@ (90003678 <HAL_MPU_ConfigRegion+0x7c>)
9000361a:	687b      	ldr	r3, [r7, #4]
9000361c:	685b      	ldr	r3, [r3, #4]
9000361e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003620:	687b      	ldr	r3, [r7, #4]
90003622:	7b1b      	ldrb	r3, [r3, #12]
90003624:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003626:	687b      	ldr	r3, [r7, #4]
90003628:	7adb      	ldrb	r3, [r3, #11]
9000362a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000362c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000362e:	687b      	ldr	r3, [r7, #4]
90003630:	7a9b      	ldrb	r3, [r3, #10]
90003632:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003634:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003636:	687b      	ldr	r3, [r7, #4]
90003638:	7b5b      	ldrb	r3, [r3, #13]
9000363a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000363c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000363e:	687b      	ldr	r3, [r7, #4]
90003640:	7b9b      	ldrb	r3, [r3, #14]
90003642:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003644:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003646:	687b      	ldr	r3, [r7, #4]
90003648:	7bdb      	ldrb	r3, [r3, #15]
9000364a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000364c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000364e:	687b      	ldr	r3, [r7, #4]
90003650:	7a5b      	ldrb	r3, [r3, #9]
90003652:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003656:	687b      	ldr	r3, [r7, #4]
90003658:	7a1b      	ldrb	r3, [r3, #8]
9000365a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000365c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000365e:	687a      	ldr	r2, [r7, #4]
90003660:	7812      	ldrb	r2, [r2, #0]
90003662:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003664:	4a04      	ldr	r2, [pc, #16]	@ (90003678 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003666:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003668:	6113      	str	r3, [r2, #16]
}
9000366a:	bf00      	nop
9000366c:	370c      	adds	r7, #12
9000366e:	46bd      	mov	sp, r7
90003670:	f85d 7b04 	ldr.w	r7, [sp], #4
90003674:	4770      	bx	lr
90003676:	bf00      	nop
90003678:	e000ed90 	.word	0xe000ed90

9000367c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
9000367c:	b580      	push	{r7, lr}
9000367e:	b082      	sub	sp, #8
90003680:	af00      	add	r7, sp, #0
90003682:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003684:	687b      	ldr	r3, [r7, #4]
90003686:	2b00      	cmp	r3, #0
90003688:	d101      	bne.n	9000368e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
9000368a:	2301      	movs	r3, #1
9000368c:	e04f      	b.n	9000372e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
9000368e:	687b      	ldr	r3, [r7, #4]
90003690:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90003694:	b2db      	uxtb	r3, r3
90003696:	2b00      	cmp	r3, #0
90003698:	d106      	bne.n	900036a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
9000369a:	687b      	ldr	r3, [r7, #4]
9000369c:	2200      	movs	r2, #0
9000369e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900036a2:	6878      	ldr	r0, [r7, #4]
900036a4:	f000 f84e 	bl	90003744 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900036a8:	687b      	ldr	r3, [r7, #4]
900036aa:	2202      	movs	r2, #2
900036ac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900036b0:	687b      	ldr	r3, [r7, #4]
900036b2:	681b      	ldr	r3, [r3, #0]
900036b4:	681a      	ldr	r2, [r3, #0]
900036b6:	4b20      	ldr	r3, [pc, #128]	@ (90003738 <HAL_DMA2D_Init+0xbc>)
900036b8:	4013      	ands	r3, r2
900036ba:	687a      	ldr	r2, [r7, #4]
900036bc:	6851      	ldr	r1, [r2, #4]
900036be:	687a      	ldr	r2, [r7, #4]
900036c0:	69d2      	ldr	r2, [r2, #28]
900036c2:	4311      	orrs	r1, r2
900036c4:	687a      	ldr	r2, [r7, #4]
900036c6:	6812      	ldr	r2, [r2, #0]
900036c8:	430b      	orrs	r3, r1
900036ca:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900036cc:	687b      	ldr	r3, [r7, #4]
900036ce:	681b      	ldr	r3, [r3, #0]
900036d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900036d2:	4b1a      	ldr	r3, [pc, #104]	@ (9000373c <HAL_DMA2D_Init+0xc0>)
900036d4:	4013      	ands	r3, r2
900036d6:	687a      	ldr	r2, [r7, #4]
900036d8:	6891      	ldr	r1, [r2, #8]
900036da:	687a      	ldr	r2, [r7, #4]
900036dc:	6992      	ldr	r2, [r2, #24]
900036de:	4311      	orrs	r1, r2
900036e0:	687a      	ldr	r2, [r7, #4]
900036e2:	6812      	ldr	r2, [r2, #0]
900036e4:	430b      	orrs	r3, r1
900036e6:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900036e8:	687b      	ldr	r3, [r7, #4]
900036ea:	681b      	ldr	r3, [r3, #0]
900036ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
900036ee:	4b14      	ldr	r3, [pc, #80]	@ (90003740 <HAL_DMA2D_Init+0xc4>)
900036f0:	4013      	ands	r3, r2
900036f2:	687a      	ldr	r2, [r7, #4]
900036f4:	68d1      	ldr	r1, [r2, #12]
900036f6:	687a      	ldr	r2, [r7, #4]
900036f8:	6812      	ldr	r2, [r2, #0]
900036fa:	430b      	orrs	r3, r1
900036fc:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
900036fe:	687b      	ldr	r3, [r7, #4]
90003700:	681b      	ldr	r3, [r3, #0]
90003702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003704:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003708:	687b      	ldr	r3, [r7, #4]
9000370a:	691b      	ldr	r3, [r3, #16]
9000370c:	051a      	lsls	r2, r3, #20
9000370e:	687b      	ldr	r3, [r7, #4]
90003710:	695b      	ldr	r3, [r3, #20]
90003712:	055b      	lsls	r3, r3, #21
90003714:	431a      	orrs	r2, r3
90003716:	687b      	ldr	r3, [r7, #4]
90003718:	681b      	ldr	r3, [r3, #0]
9000371a:	430a      	orrs	r2, r1
9000371c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000371e:	687b      	ldr	r3, [r7, #4]
90003720:	2200      	movs	r2, #0
90003722:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003724:	687b      	ldr	r3, [r7, #4]
90003726:	2201      	movs	r2, #1
90003728:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
9000372c:	2300      	movs	r3, #0
}
9000372e:	4618      	mov	r0, r3
90003730:	3708      	adds	r7, #8
90003732:	46bd      	mov	sp, r7
90003734:	bd80      	pop	{r7, pc}
90003736:	bf00      	nop
90003738:	fff8ffbf 	.word	0xfff8ffbf
9000373c:	fffffef8 	.word	0xfffffef8
90003740:	ffff0000 	.word	0xffff0000

90003744 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003744:	b480      	push	{r7}
90003746:	b083      	sub	sp, #12
90003748:	af00      	add	r7, sp, #0
9000374a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
9000374c:	bf00      	nop
9000374e:	370c      	adds	r7, #12
90003750:	46bd      	mov	sp, r7
90003752:	f85d 7b04 	ldr.w	r7, [sp], #4
90003756:	4770      	bx	lr

90003758 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003758:	b580      	push	{r7, lr}
9000375a:	b086      	sub	sp, #24
9000375c:	af02      	add	r7, sp, #8
9000375e:	60f8      	str	r0, [r7, #12]
90003760:	60b9      	str	r1, [r7, #8]
90003762:	607a      	str	r2, [r7, #4]
90003764:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003766:	68fb      	ldr	r3, [r7, #12]
90003768:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
9000376c:	2b01      	cmp	r3, #1
9000376e:	d101      	bne.n	90003774 <HAL_DMA2D_Start+0x1c>
90003770:	2302      	movs	r3, #2
90003772:	e018      	b.n	900037a6 <HAL_DMA2D_Start+0x4e>
90003774:	68fb      	ldr	r3, [r7, #12]
90003776:	2201      	movs	r2, #1
90003778:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000377c:	68fb      	ldr	r3, [r7, #12]
9000377e:	2202      	movs	r2, #2
90003780:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003784:	69bb      	ldr	r3, [r7, #24]
90003786:	9300      	str	r3, [sp, #0]
90003788:	683b      	ldr	r3, [r7, #0]
9000378a:	687a      	ldr	r2, [r7, #4]
9000378c:	68b9      	ldr	r1, [r7, #8]
9000378e:	68f8      	ldr	r0, [r7, #12]
90003790:	f000 f9a4 	bl	90003adc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003794:	68fb      	ldr	r3, [r7, #12]
90003796:	681b      	ldr	r3, [r3, #0]
90003798:	681a      	ldr	r2, [r3, #0]
9000379a:	68fb      	ldr	r3, [r7, #12]
9000379c:	681b      	ldr	r3, [r3, #0]
9000379e:	f042 0201 	orr.w	r2, r2, #1
900037a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900037a4:	2300      	movs	r3, #0
}
900037a6:	4618      	mov	r0, r3
900037a8:	3710      	adds	r7, #16
900037aa:	46bd      	mov	sp, r7
900037ac:	bd80      	pop	{r7, pc}

900037ae <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
900037ae:	b580      	push	{r7, lr}
900037b0:	b086      	sub	sp, #24
900037b2:	af00      	add	r7, sp, #0
900037b4:	6078      	str	r0, [r7, #4]
900037b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900037b8:	2300      	movs	r3, #0
900037ba:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900037bc:	687b      	ldr	r3, [r7, #4]
900037be:	681b      	ldr	r3, [r3, #0]
900037c0:	681b      	ldr	r3, [r3, #0]
900037c2:	f003 0301 	and.w	r3, r3, #1
900037c6:	2b00      	cmp	r3, #0
900037c8:	d056      	beq.n	90003878 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900037ca:	f7ff fd83 	bl	900032d4 <HAL_GetTick>
900037ce:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900037d0:	e04b      	b.n	9000386a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900037d2:	687b      	ldr	r3, [r7, #4]
900037d4:	681b      	ldr	r3, [r3, #0]
900037d6:	685b      	ldr	r3, [r3, #4]
900037d8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900037da:	68fb      	ldr	r3, [r7, #12]
900037dc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
900037e0:	2b00      	cmp	r3, #0
900037e2:	d023      	beq.n	9000382c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900037e4:	68fb      	ldr	r3, [r7, #12]
900037e6:	f003 0320 	and.w	r3, r3, #32
900037ea:	2b00      	cmp	r3, #0
900037ec:	d005      	beq.n	900037fa <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900037ee:	687b      	ldr	r3, [r7, #4]
900037f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900037f2:	f043 0202 	orr.w	r2, r3, #2
900037f6:	687b      	ldr	r3, [r7, #4]
900037f8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900037fa:	68fb      	ldr	r3, [r7, #12]
900037fc:	f003 0301 	and.w	r3, r3, #1
90003800:	2b00      	cmp	r3, #0
90003802:	d005      	beq.n	90003810 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003804:	687b      	ldr	r3, [r7, #4]
90003806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003808:	f043 0201 	orr.w	r2, r3, #1
9000380c:	687b      	ldr	r3, [r7, #4]
9000380e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003810:	687b      	ldr	r3, [r7, #4]
90003812:	681b      	ldr	r3, [r3, #0]
90003814:	2221      	movs	r2, #33	@ 0x21
90003816:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003818:	687b      	ldr	r3, [r7, #4]
9000381a:	2204      	movs	r2, #4
9000381c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003820:	687b      	ldr	r3, [r7, #4]
90003822:	2200      	movs	r2, #0
90003824:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003828:	2301      	movs	r3, #1
9000382a:	e0a5      	b.n	90003978 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000382c:	683b      	ldr	r3, [r7, #0]
9000382e:	f1b3 3fff 	cmp.w	r3, #4294967295
90003832:	d01a      	beq.n	9000386a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003834:	f7ff fd4e 	bl	900032d4 <HAL_GetTick>
90003838:	4602      	mov	r2, r0
9000383a:	697b      	ldr	r3, [r7, #20]
9000383c:	1ad3      	subs	r3, r2, r3
9000383e:	683a      	ldr	r2, [r7, #0]
90003840:	429a      	cmp	r2, r3
90003842:	d302      	bcc.n	9000384a <HAL_DMA2D_PollForTransfer+0x9c>
90003844:	683b      	ldr	r3, [r7, #0]
90003846:	2b00      	cmp	r3, #0
90003848:	d10f      	bne.n	9000386a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000384a:	687b      	ldr	r3, [r7, #4]
9000384c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000384e:	f043 0220 	orr.w	r2, r3, #32
90003852:	687b      	ldr	r3, [r7, #4]
90003854:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003856:	687b      	ldr	r3, [r7, #4]
90003858:	2203      	movs	r2, #3
9000385a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000385e:	687b      	ldr	r3, [r7, #4]
90003860:	2200      	movs	r2, #0
90003862:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003866:	2303      	movs	r3, #3
90003868:	e086      	b.n	90003978 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000386a:	687b      	ldr	r3, [r7, #4]
9000386c:	681b      	ldr	r3, [r3, #0]
9000386e:	685b      	ldr	r3, [r3, #4]
90003870:	f003 0302 	and.w	r3, r3, #2
90003874:	2b00      	cmp	r3, #0
90003876:	d0ac      	beq.n	900037d2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003878:	687b      	ldr	r3, [r7, #4]
9000387a:	681b      	ldr	r3, [r3, #0]
9000387c:	69db      	ldr	r3, [r3, #28]
9000387e:	f003 0320 	and.w	r3, r3, #32
90003882:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003884:	687b      	ldr	r3, [r7, #4]
90003886:	681b      	ldr	r3, [r3, #0]
90003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000388a:	f003 0320 	and.w	r3, r3, #32
9000388e:	693a      	ldr	r2, [r7, #16]
90003890:	4313      	orrs	r3, r2
90003892:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003894:	693b      	ldr	r3, [r7, #16]
90003896:	2b00      	cmp	r3, #0
90003898:	d061      	beq.n	9000395e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000389a:	f7ff fd1b 	bl	900032d4 <HAL_GetTick>
9000389e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900038a0:	e056      	b.n	90003950 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900038a2:	687b      	ldr	r3, [r7, #4]
900038a4:	681b      	ldr	r3, [r3, #0]
900038a6:	685b      	ldr	r3, [r3, #4]
900038a8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900038aa:	68fb      	ldr	r3, [r7, #12]
900038ac:	f003 0329 	and.w	r3, r3, #41	@ 0x29
900038b0:	2b00      	cmp	r3, #0
900038b2:	d02e      	beq.n	90003912 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900038b4:	68fb      	ldr	r3, [r7, #12]
900038b6:	f003 0308 	and.w	r3, r3, #8
900038ba:	2b00      	cmp	r3, #0
900038bc:	d005      	beq.n	900038ca <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900038be:	687b      	ldr	r3, [r7, #4]
900038c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038c2:	f043 0204 	orr.w	r2, r3, #4
900038c6:	687b      	ldr	r3, [r7, #4]
900038c8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900038ca:	68fb      	ldr	r3, [r7, #12]
900038cc:	f003 0320 	and.w	r3, r3, #32
900038d0:	2b00      	cmp	r3, #0
900038d2:	d005      	beq.n	900038e0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900038d4:	687b      	ldr	r3, [r7, #4]
900038d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038d8:	f043 0202 	orr.w	r2, r3, #2
900038dc:	687b      	ldr	r3, [r7, #4]
900038de:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900038e0:	68fb      	ldr	r3, [r7, #12]
900038e2:	f003 0301 	and.w	r3, r3, #1
900038e6:	2b00      	cmp	r3, #0
900038e8:	d005      	beq.n	900038f6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900038ea:	687b      	ldr	r3, [r7, #4]
900038ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038ee:	f043 0201 	orr.w	r2, r3, #1
900038f2:	687b      	ldr	r3, [r7, #4]
900038f4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900038f6:	687b      	ldr	r3, [r7, #4]
900038f8:	681b      	ldr	r3, [r3, #0]
900038fa:	2229      	movs	r2, #41	@ 0x29
900038fc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900038fe:	687b      	ldr	r3, [r7, #4]
90003900:	2204      	movs	r2, #4
90003902:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003906:	687b      	ldr	r3, [r7, #4]
90003908:	2200      	movs	r2, #0
9000390a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000390e:	2301      	movs	r3, #1
90003910:	e032      	b.n	90003978 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003912:	683b      	ldr	r3, [r7, #0]
90003914:	f1b3 3fff 	cmp.w	r3, #4294967295
90003918:	d01a      	beq.n	90003950 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000391a:	f7ff fcdb 	bl	900032d4 <HAL_GetTick>
9000391e:	4602      	mov	r2, r0
90003920:	697b      	ldr	r3, [r7, #20]
90003922:	1ad3      	subs	r3, r2, r3
90003924:	683a      	ldr	r2, [r7, #0]
90003926:	429a      	cmp	r2, r3
90003928:	d302      	bcc.n	90003930 <HAL_DMA2D_PollForTransfer+0x182>
9000392a:	683b      	ldr	r3, [r7, #0]
9000392c:	2b00      	cmp	r3, #0
9000392e:	d10f      	bne.n	90003950 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003930:	687b      	ldr	r3, [r7, #4]
90003932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003934:	f043 0220 	orr.w	r2, r3, #32
90003938:	687b      	ldr	r3, [r7, #4]
9000393a:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000393c:	687b      	ldr	r3, [r7, #4]
9000393e:	2203      	movs	r2, #3
90003940:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003944:	687b      	ldr	r3, [r7, #4]
90003946:	2200      	movs	r2, #0
90003948:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
9000394c:	2303      	movs	r3, #3
9000394e:	e013      	b.n	90003978 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003950:	687b      	ldr	r3, [r7, #4]
90003952:	681b      	ldr	r3, [r3, #0]
90003954:	685b      	ldr	r3, [r3, #4]
90003956:	f003 0310 	and.w	r3, r3, #16
9000395a:	2b00      	cmp	r3, #0
9000395c:	d0a1      	beq.n	900038a2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
9000395e:	687b      	ldr	r3, [r7, #4]
90003960:	681b      	ldr	r3, [r3, #0]
90003962:	2212      	movs	r2, #18
90003964:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003966:	687b      	ldr	r3, [r7, #4]
90003968:	2201      	movs	r2, #1
9000396a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000396e:	687b      	ldr	r3, [r7, #4]
90003970:	2200      	movs	r2, #0
90003972:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003976:	2300      	movs	r3, #0
}
90003978:	4618      	mov	r0, r3
9000397a:	3718      	adds	r7, #24
9000397c:	46bd      	mov	sp, r7
9000397e:	bd80      	pop	{r7, pc}

90003980 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003980:	b480      	push	{r7}
90003982:	b087      	sub	sp, #28
90003984:	af00      	add	r7, sp, #0
90003986:	6078      	str	r0, [r7, #4]
90003988:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
9000398a:	687b      	ldr	r3, [r7, #4]
9000398c:	685b      	ldr	r3, [r3, #4]
9000398e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003992:	683b      	ldr	r3, [r7, #0]
90003994:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003996:	687b      	ldr	r3, [r7, #4]
90003998:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
9000399c:	2b01      	cmp	r3, #1
9000399e:	d101      	bne.n	900039a4 <HAL_DMA2D_ConfigLayer+0x24>
900039a0:	2302      	movs	r3, #2
900039a2:	e092      	b.n	90003aca <HAL_DMA2D_ConfigLayer+0x14a>
900039a4:	687b      	ldr	r3, [r7, #4]
900039a6:	2201      	movs	r2, #1
900039a8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900039ac:	687b      	ldr	r3, [r7, #4]
900039ae:	2202      	movs	r2, #2
900039b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900039b4:	683a      	ldr	r2, [r7, #0]
900039b6:	4613      	mov	r3, r2
900039b8:	00db      	lsls	r3, r3, #3
900039ba:	1a9b      	subs	r3, r3, r2
900039bc:	009b      	lsls	r3, r3, #2
900039be:	3328      	adds	r3, #40	@ 0x28
900039c0:	687a      	ldr	r2, [r7, #4]
900039c2:	4413      	add	r3, r2
900039c4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900039c6:	68fb      	ldr	r3, [r7, #12]
900039c8:	685a      	ldr	r2, [r3, #4]
900039ca:	68fb      	ldr	r3, [r7, #12]
900039cc:	689b      	ldr	r3, [r3, #8]
900039ce:	041b      	lsls	r3, r3, #16
900039d0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900039d2:	68fb      	ldr	r3, [r7, #12]
900039d4:	691b      	ldr	r3, [r3, #16]
900039d6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900039d8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900039da:	68fb      	ldr	r3, [r7, #12]
900039dc:	695b      	ldr	r3, [r3, #20]
900039de:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900039e0:	4313      	orrs	r3, r2
900039e2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
900039e4:	4b3c      	ldr	r3, [pc, #240]	@ (90003ad8 <HAL_DMA2D_ConfigLayer+0x158>)
900039e6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900039e8:	68fb      	ldr	r3, [r7, #12]
900039ea:	685b      	ldr	r3, [r3, #4]
900039ec:	2b0a      	cmp	r3, #10
900039ee:	d003      	beq.n	900039f8 <HAL_DMA2D_ConfigLayer+0x78>
900039f0:	68fb      	ldr	r3, [r7, #12]
900039f2:	685b      	ldr	r3, [r3, #4]
900039f4:	2b09      	cmp	r3, #9
900039f6:	d107      	bne.n	90003a08 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900039f8:	68fb      	ldr	r3, [r7, #12]
900039fa:	68db      	ldr	r3, [r3, #12]
900039fc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003a00:	693a      	ldr	r2, [r7, #16]
90003a02:	4313      	orrs	r3, r2
90003a04:	613b      	str	r3, [r7, #16]
90003a06:	e005      	b.n	90003a14 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003a08:	68fb      	ldr	r3, [r7, #12]
90003a0a:	68db      	ldr	r3, [r3, #12]
90003a0c:	061b      	lsls	r3, r3, #24
90003a0e:	693a      	ldr	r2, [r7, #16]
90003a10:	4313      	orrs	r3, r2
90003a12:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003a14:	683b      	ldr	r3, [r7, #0]
90003a16:	2b00      	cmp	r3, #0
90003a18:	d120      	bne.n	90003a5c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003a1a:	687b      	ldr	r3, [r7, #4]
90003a1c:	681b      	ldr	r3, [r3, #0]
90003a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003a20:	697b      	ldr	r3, [r7, #20]
90003a22:	43db      	mvns	r3, r3
90003a24:	ea02 0103 	and.w	r1, r2, r3
90003a28:	687b      	ldr	r3, [r7, #4]
90003a2a:	681b      	ldr	r3, [r3, #0]
90003a2c:	693a      	ldr	r2, [r7, #16]
90003a2e:	430a      	orrs	r2, r1
90003a30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003a32:	687b      	ldr	r3, [r7, #4]
90003a34:	681b      	ldr	r3, [r3, #0]
90003a36:	68fa      	ldr	r2, [r7, #12]
90003a38:	6812      	ldr	r2, [r2, #0]
90003a3a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003a3c:	68fb      	ldr	r3, [r7, #12]
90003a3e:	685b      	ldr	r3, [r3, #4]
90003a40:	2b0a      	cmp	r3, #10
90003a42:	d003      	beq.n	90003a4c <HAL_DMA2D_ConfigLayer+0xcc>
90003a44:	68fb      	ldr	r3, [r7, #12]
90003a46:	685b      	ldr	r3, [r3, #4]
90003a48:	2b09      	cmp	r3, #9
90003a4a:	d135      	bne.n	90003ab8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003a4c:	68fb      	ldr	r3, [r7, #12]
90003a4e:	68da      	ldr	r2, [r3, #12]
90003a50:	687b      	ldr	r3, [r7, #4]
90003a52:	681b      	ldr	r3, [r3, #0]
90003a54:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003a58:	629a      	str	r2, [r3, #40]	@ 0x28
90003a5a:	e02d      	b.n	90003ab8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003a5c:	68fb      	ldr	r3, [r7, #12]
90003a5e:	685b      	ldr	r3, [r3, #4]
90003a60:	2b0b      	cmp	r3, #11
90003a62:	d109      	bne.n	90003a78 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003a64:	68fb      	ldr	r3, [r7, #12]
90003a66:	699b      	ldr	r3, [r3, #24]
90003a68:	049b      	lsls	r3, r3, #18
90003a6a:	693a      	ldr	r2, [r7, #16]
90003a6c:	4313      	orrs	r3, r2
90003a6e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003a70:	697b      	ldr	r3, [r7, #20]
90003a72:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003a76:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003a78:	687b      	ldr	r3, [r7, #4]
90003a7a:	681b      	ldr	r3, [r3, #0]
90003a7c:	69da      	ldr	r2, [r3, #28]
90003a7e:	697b      	ldr	r3, [r7, #20]
90003a80:	43db      	mvns	r3, r3
90003a82:	ea02 0103 	and.w	r1, r2, r3
90003a86:	687b      	ldr	r3, [r7, #4]
90003a88:	681b      	ldr	r3, [r3, #0]
90003a8a:	693a      	ldr	r2, [r7, #16]
90003a8c:	430a      	orrs	r2, r1
90003a8e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003a90:	687b      	ldr	r3, [r7, #4]
90003a92:	681b      	ldr	r3, [r3, #0]
90003a94:	68fa      	ldr	r2, [r7, #12]
90003a96:	6812      	ldr	r2, [r2, #0]
90003a98:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003a9a:	68fb      	ldr	r3, [r7, #12]
90003a9c:	685b      	ldr	r3, [r3, #4]
90003a9e:	2b0a      	cmp	r3, #10
90003aa0:	d003      	beq.n	90003aaa <HAL_DMA2D_ConfigLayer+0x12a>
90003aa2:	68fb      	ldr	r3, [r7, #12]
90003aa4:	685b      	ldr	r3, [r3, #4]
90003aa6:	2b09      	cmp	r3, #9
90003aa8:	d106      	bne.n	90003ab8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003aaa:	68fb      	ldr	r3, [r7, #12]
90003aac:	68da      	ldr	r2, [r3, #12]
90003aae:	687b      	ldr	r3, [r7, #4]
90003ab0:	681b      	ldr	r3, [r3, #0]
90003ab2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003ab6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003ab8:	687b      	ldr	r3, [r7, #4]
90003aba:	2201      	movs	r2, #1
90003abc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003ac0:	687b      	ldr	r3, [r7, #4]
90003ac2:	2200      	movs	r2, #0
90003ac4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003ac8:	2300      	movs	r3, #0
}
90003aca:	4618      	mov	r0, r3
90003acc:	371c      	adds	r7, #28
90003ace:	46bd      	mov	sp, r7
90003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ad4:	4770      	bx	lr
90003ad6:	bf00      	nop
90003ad8:	ff33000f 	.word	0xff33000f

90003adc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003adc:	b480      	push	{r7}
90003ade:	b08b      	sub	sp, #44	@ 0x2c
90003ae0:	af00      	add	r7, sp, #0
90003ae2:	60f8      	str	r0, [r7, #12]
90003ae4:	60b9      	str	r1, [r7, #8]
90003ae6:	607a      	str	r2, [r7, #4]
90003ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003aea:	68fb      	ldr	r3, [r7, #12]
90003aec:	681b      	ldr	r3, [r3, #0]
90003aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003af0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003af4:	683b      	ldr	r3, [r7, #0]
90003af6:	041a      	lsls	r2, r3, #16
90003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003afa:	431a      	orrs	r2, r3
90003afc:	68fb      	ldr	r3, [r7, #12]
90003afe:	681b      	ldr	r3, [r3, #0]
90003b00:	430a      	orrs	r2, r1
90003b02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003b04:	68fb      	ldr	r3, [r7, #12]
90003b06:	681b      	ldr	r3, [r3, #0]
90003b08:	687a      	ldr	r2, [r7, #4]
90003b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003b0c:	68fb      	ldr	r3, [r7, #12]
90003b0e:	685b      	ldr	r3, [r3, #4]
90003b10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003b14:	d174      	bne.n	90003c00 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003b16:	68bb      	ldr	r3, [r7, #8]
90003b18:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003b1c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003b1e:	68bb      	ldr	r3, [r7, #8]
90003b20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003b24:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003b26:	68bb      	ldr	r3, [r7, #8]
90003b28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003b2c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003b2e:	68bb      	ldr	r3, [r7, #8]
90003b30:	b2db      	uxtb	r3, r3
90003b32:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003b34:	68fb      	ldr	r3, [r7, #12]
90003b36:	689b      	ldr	r3, [r3, #8]
90003b38:	2b00      	cmp	r3, #0
90003b3a:	d108      	bne.n	90003b4e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003b3c:	69ba      	ldr	r2, [r7, #24]
90003b3e:	69fb      	ldr	r3, [r7, #28]
90003b40:	431a      	orrs	r2, r3
90003b42:	6a3b      	ldr	r3, [r7, #32]
90003b44:	4313      	orrs	r3, r2
90003b46:	697a      	ldr	r2, [r7, #20]
90003b48:	4313      	orrs	r3, r2
90003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
90003b4c:	e053      	b.n	90003bf6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003b4e:	68fb      	ldr	r3, [r7, #12]
90003b50:	689b      	ldr	r3, [r3, #8]
90003b52:	2b01      	cmp	r3, #1
90003b54:	d106      	bne.n	90003b64 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003b56:	69ba      	ldr	r2, [r7, #24]
90003b58:	69fb      	ldr	r3, [r7, #28]
90003b5a:	4313      	orrs	r3, r2
90003b5c:	697a      	ldr	r2, [r7, #20]
90003b5e:	4313      	orrs	r3, r2
90003b60:	627b      	str	r3, [r7, #36]	@ 0x24
90003b62:	e048      	b.n	90003bf6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003b64:	68fb      	ldr	r3, [r7, #12]
90003b66:	689b      	ldr	r3, [r3, #8]
90003b68:	2b02      	cmp	r3, #2
90003b6a:	d111      	bne.n	90003b90 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003b6c:	69fb      	ldr	r3, [r7, #28]
90003b6e:	0cdb      	lsrs	r3, r3, #19
90003b70:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003b72:	69bb      	ldr	r3, [r7, #24]
90003b74:	0a9b      	lsrs	r3, r3, #10
90003b76:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003b78:	697b      	ldr	r3, [r7, #20]
90003b7a:	08db      	lsrs	r3, r3, #3
90003b7c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003b7e:	69bb      	ldr	r3, [r7, #24]
90003b80:	015a      	lsls	r2, r3, #5
90003b82:	69fb      	ldr	r3, [r7, #28]
90003b84:	02db      	lsls	r3, r3, #11
90003b86:	4313      	orrs	r3, r2
90003b88:	697a      	ldr	r2, [r7, #20]
90003b8a:	4313      	orrs	r3, r2
90003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
90003b8e:	e032      	b.n	90003bf6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003b90:	68fb      	ldr	r3, [r7, #12]
90003b92:	689b      	ldr	r3, [r3, #8]
90003b94:	2b03      	cmp	r3, #3
90003b96:	d117      	bne.n	90003bc8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003b98:	6a3b      	ldr	r3, [r7, #32]
90003b9a:	0fdb      	lsrs	r3, r3, #31
90003b9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003b9e:	69fb      	ldr	r3, [r7, #28]
90003ba0:	0cdb      	lsrs	r3, r3, #19
90003ba2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003ba4:	69bb      	ldr	r3, [r7, #24]
90003ba6:	0adb      	lsrs	r3, r3, #11
90003ba8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003baa:	697b      	ldr	r3, [r7, #20]
90003bac:	08db      	lsrs	r3, r3, #3
90003bae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003bb0:	69bb      	ldr	r3, [r7, #24]
90003bb2:	015a      	lsls	r2, r3, #5
90003bb4:	69fb      	ldr	r3, [r7, #28]
90003bb6:	029b      	lsls	r3, r3, #10
90003bb8:	431a      	orrs	r2, r3
90003bba:	6a3b      	ldr	r3, [r7, #32]
90003bbc:	03db      	lsls	r3, r3, #15
90003bbe:	4313      	orrs	r3, r2
90003bc0:	697a      	ldr	r2, [r7, #20]
90003bc2:	4313      	orrs	r3, r2
90003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
90003bc6:	e016      	b.n	90003bf6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003bc8:	6a3b      	ldr	r3, [r7, #32]
90003bca:	0f1b      	lsrs	r3, r3, #28
90003bcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003bce:	69fb      	ldr	r3, [r7, #28]
90003bd0:	0d1b      	lsrs	r3, r3, #20
90003bd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003bd4:	69bb      	ldr	r3, [r7, #24]
90003bd6:	0b1b      	lsrs	r3, r3, #12
90003bd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003bda:	697b      	ldr	r3, [r7, #20]
90003bdc:	091b      	lsrs	r3, r3, #4
90003bde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003be0:	69bb      	ldr	r3, [r7, #24]
90003be2:	011a      	lsls	r2, r3, #4
90003be4:	69fb      	ldr	r3, [r7, #28]
90003be6:	021b      	lsls	r3, r3, #8
90003be8:	431a      	orrs	r2, r3
90003bea:	6a3b      	ldr	r3, [r7, #32]
90003bec:	031b      	lsls	r3, r3, #12
90003bee:	4313      	orrs	r3, r2
90003bf0:	697a      	ldr	r2, [r7, #20]
90003bf2:	4313      	orrs	r3, r2
90003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003bf6:	68fb      	ldr	r3, [r7, #12]
90003bf8:	681b      	ldr	r3, [r3, #0]
90003bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003bfc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003bfe:	e00d      	b.n	90003c1c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003c00:	68fb      	ldr	r3, [r7, #12]
90003c02:	685b      	ldr	r3, [r3, #4]
90003c04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003c08:	d104      	bne.n	90003c14 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003c0a:	68fb      	ldr	r3, [r7, #12]
90003c0c:	681b      	ldr	r3, [r3, #0]
90003c0e:	68ba      	ldr	r2, [r7, #8]
90003c10:	615a      	str	r2, [r3, #20]
}
90003c12:	e003      	b.n	90003c1c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003c14:	68fb      	ldr	r3, [r7, #12]
90003c16:	681b      	ldr	r3, [r3, #0]
90003c18:	68ba      	ldr	r2, [r7, #8]
90003c1a:	60da      	str	r2, [r3, #12]
}
90003c1c:	bf00      	nop
90003c1e:	372c      	adds	r7, #44	@ 0x2c
90003c20:	46bd      	mov	sp, r7
90003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
90003c26:	4770      	bx	lr

90003c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003c28:	b480      	push	{r7}
90003c2a:	b089      	sub	sp, #36	@ 0x24
90003c2c:	af00      	add	r7, sp, #0
90003c2e:	6078      	str	r0, [r7, #4]
90003c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003c32:	2300      	movs	r3, #0
90003c34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003c36:	4b89      	ldr	r3, [pc, #548]	@ (90003e5c <HAL_GPIO_Init+0x234>)
90003c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003c3a:	e194      	b.n	90003f66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003c3c:	683b      	ldr	r3, [r7, #0]
90003c3e:	681a      	ldr	r2, [r3, #0]
90003c40:	2101      	movs	r1, #1
90003c42:	69fb      	ldr	r3, [r7, #28]
90003c44:	fa01 f303 	lsl.w	r3, r1, r3
90003c48:	4013      	ands	r3, r2
90003c4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003c4c:	693b      	ldr	r3, [r7, #16]
90003c4e:	2b00      	cmp	r3, #0
90003c50:	f000 8186 	beq.w	90003f60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003c54:	683b      	ldr	r3, [r7, #0]
90003c56:	685b      	ldr	r3, [r3, #4]
90003c58:	f003 0303 	and.w	r3, r3, #3
90003c5c:	2b01      	cmp	r3, #1
90003c5e:	d005      	beq.n	90003c6c <HAL_GPIO_Init+0x44>
90003c60:	683b      	ldr	r3, [r7, #0]
90003c62:	685b      	ldr	r3, [r3, #4]
90003c64:	f003 0303 	and.w	r3, r3, #3
90003c68:	2b02      	cmp	r3, #2
90003c6a:	d130      	bne.n	90003cce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003c6c:	687b      	ldr	r3, [r7, #4]
90003c6e:	689b      	ldr	r3, [r3, #8]
90003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003c72:	69fb      	ldr	r3, [r7, #28]
90003c74:	005b      	lsls	r3, r3, #1
90003c76:	2203      	movs	r2, #3
90003c78:	fa02 f303 	lsl.w	r3, r2, r3
90003c7c:	43db      	mvns	r3, r3
90003c7e:	69ba      	ldr	r2, [r7, #24]
90003c80:	4013      	ands	r3, r2
90003c82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003c84:	683b      	ldr	r3, [r7, #0]
90003c86:	68da      	ldr	r2, [r3, #12]
90003c88:	69fb      	ldr	r3, [r7, #28]
90003c8a:	005b      	lsls	r3, r3, #1
90003c8c:	fa02 f303 	lsl.w	r3, r2, r3
90003c90:	69ba      	ldr	r2, [r7, #24]
90003c92:	4313      	orrs	r3, r2
90003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003c96:	687b      	ldr	r3, [r7, #4]
90003c98:	69ba      	ldr	r2, [r7, #24]
90003c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003c9c:	687b      	ldr	r3, [r7, #4]
90003c9e:	685b      	ldr	r3, [r3, #4]
90003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003ca2:	2201      	movs	r2, #1
90003ca4:	69fb      	ldr	r3, [r7, #28]
90003ca6:	fa02 f303 	lsl.w	r3, r2, r3
90003caa:	43db      	mvns	r3, r3
90003cac:	69ba      	ldr	r2, [r7, #24]
90003cae:	4013      	ands	r3, r2
90003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003cb2:	683b      	ldr	r3, [r7, #0]
90003cb4:	685b      	ldr	r3, [r3, #4]
90003cb6:	091b      	lsrs	r3, r3, #4
90003cb8:	f003 0201 	and.w	r2, r3, #1
90003cbc:	69fb      	ldr	r3, [r7, #28]
90003cbe:	fa02 f303 	lsl.w	r3, r2, r3
90003cc2:	69ba      	ldr	r2, [r7, #24]
90003cc4:	4313      	orrs	r3, r2
90003cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003cc8:	687b      	ldr	r3, [r7, #4]
90003cca:	69ba      	ldr	r2, [r7, #24]
90003ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003cce:	683b      	ldr	r3, [r7, #0]
90003cd0:	685b      	ldr	r3, [r3, #4]
90003cd2:	f003 0303 	and.w	r3, r3, #3
90003cd6:	2b03      	cmp	r3, #3
90003cd8:	d017      	beq.n	90003d0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003cda:	687b      	ldr	r3, [r7, #4]
90003cdc:	68db      	ldr	r3, [r3, #12]
90003cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003ce0:	69fb      	ldr	r3, [r7, #28]
90003ce2:	005b      	lsls	r3, r3, #1
90003ce4:	2203      	movs	r2, #3
90003ce6:	fa02 f303 	lsl.w	r3, r2, r3
90003cea:	43db      	mvns	r3, r3
90003cec:	69ba      	ldr	r2, [r7, #24]
90003cee:	4013      	ands	r3, r2
90003cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003cf2:	683b      	ldr	r3, [r7, #0]
90003cf4:	689a      	ldr	r2, [r3, #8]
90003cf6:	69fb      	ldr	r3, [r7, #28]
90003cf8:	005b      	lsls	r3, r3, #1
90003cfa:	fa02 f303 	lsl.w	r3, r2, r3
90003cfe:	69ba      	ldr	r2, [r7, #24]
90003d00:	4313      	orrs	r3, r2
90003d02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003d04:	687b      	ldr	r3, [r7, #4]
90003d06:	69ba      	ldr	r2, [r7, #24]
90003d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003d0a:	683b      	ldr	r3, [r7, #0]
90003d0c:	685b      	ldr	r3, [r3, #4]
90003d0e:	f003 0303 	and.w	r3, r3, #3
90003d12:	2b02      	cmp	r3, #2
90003d14:	d123      	bne.n	90003d5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003d16:	69fb      	ldr	r3, [r7, #28]
90003d18:	08da      	lsrs	r2, r3, #3
90003d1a:	687b      	ldr	r3, [r7, #4]
90003d1c:	3208      	adds	r2, #8
90003d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003d24:	69fb      	ldr	r3, [r7, #28]
90003d26:	f003 0307 	and.w	r3, r3, #7
90003d2a:	009b      	lsls	r3, r3, #2
90003d2c:	220f      	movs	r2, #15
90003d2e:	fa02 f303 	lsl.w	r3, r2, r3
90003d32:	43db      	mvns	r3, r3
90003d34:	69ba      	ldr	r2, [r7, #24]
90003d36:	4013      	ands	r3, r2
90003d38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003d3a:	683b      	ldr	r3, [r7, #0]
90003d3c:	691a      	ldr	r2, [r3, #16]
90003d3e:	69fb      	ldr	r3, [r7, #28]
90003d40:	f003 0307 	and.w	r3, r3, #7
90003d44:	009b      	lsls	r3, r3, #2
90003d46:	fa02 f303 	lsl.w	r3, r2, r3
90003d4a:	69ba      	ldr	r2, [r7, #24]
90003d4c:	4313      	orrs	r3, r2
90003d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003d50:	69fb      	ldr	r3, [r7, #28]
90003d52:	08da      	lsrs	r2, r3, #3
90003d54:	687b      	ldr	r3, [r7, #4]
90003d56:	3208      	adds	r2, #8
90003d58:	69b9      	ldr	r1, [r7, #24]
90003d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003d5e:	687b      	ldr	r3, [r7, #4]
90003d60:	681b      	ldr	r3, [r3, #0]
90003d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003d64:	69fb      	ldr	r3, [r7, #28]
90003d66:	005b      	lsls	r3, r3, #1
90003d68:	2203      	movs	r2, #3
90003d6a:	fa02 f303 	lsl.w	r3, r2, r3
90003d6e:	43db      	mvns	r3, r3
90003d70:	69ba      	ldr	r2, [r7, #24]
90003d72:	4013      	ands	r3, r2
90003d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003d76:	683b      	ldr	r3, [r7, #0]
90003d78:	685b      	ldr	r3, [r3, #4]
90003d7a:	f003 0203 	and.w	r2, r3, #3
90003d7e:	69fb      	ldr	r3, [r7, #28]
90003d80:	005b      	lsls	r3, r3, #1
90003d82:	fa02 f303 	lsl.w	r3, r2, r3
90003d86:	69ba      	ldr	r2, [r7, #24]
90003d88:	4313      	orrs	r3, r2
90003d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003d8c:	687b      	ldr	r3, [r7, #4]
90003d8e:	69ba      	ldr	r2, [r7, #24]
90003d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003d92:	683b      	ldr	r3, [r7, #0]
90003d94:	685b      	ldr	r3, [r3, #4]
90003d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003d9a:	2b00      	cmp	r3, #0
90003d9c:	f000 80e0 	beq.w	90003f60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003da0:	4b2f      	ldr	r3, [pc, #188]	@ (90003e60 <HAL_GPIO_Init+0x238>)
90003da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003da6:	4a2e      	ldr	r2, [pc, #184]	@ (90003e60 <HAL_GPIO_Init+0x238>)
90003da8:	f043 0302 	orr.w	r3, r3, #2
90003dac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003db0:	4b2b      	ldr	r3, [pc, #172]	@ (90003e60 <HAL_GPIO_Init+0x238>)
90003db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003db6:	f003 0302 	and.w	r3, r3, #2
90003dba:	60fb      	str	r3, [r7, #12]
90003dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003dbe:	4a29      	ldr	r2, [pc, #164]	@ (90003e64 <HAL_GPIO_Init+0x23c>)
90003dc0:	69fb      	ldr	r3, [r7, #28]
90003dc2:	089b      	lsrs	r3, r3, #2
90003dc4:	3302      	adds	r3, #2
90003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003dcc:	69fb      	ldr	r3, [r7, #28]
90003dce:	f003 0303 	and.w	r3, r3, #3
90003dd2:	009b      	lsls	r3, r3, #2
90003dd4:	220f      	movs	r2, #15
90003dd6:	fa02 f303 	lsl.w	r3, r2, r3
90003dda:	43db      	mvns	r3, r3
90003ddc:	69ba      	ldr	r2, [r7, #24]
90003dde:	4013      	ands	r3, r2
90003de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003de2:	687b      	ldr	r3, [r7, #4]
90003de4:	4a20      	ldr	r2, [pc, #128]	@ (90003e68 <HAL_GPIO_Init+0x240>)
90003de6:	4293      	cmp	r3, r2
90003de8:	d052      	beq.n	90003e90 <HAL_GPIO_Init+0x268>
90003dea:	687b      	ldr	r3, [r7, #4]
90003dec:	4a1f      	ldr	r2, [pc, #124]	@ (90003e6c <HAL_GPIO_Init+0x244>)
90003dee:	4293      	cmp	r3, r2
90003df0:	d031      	beq.n	90003e56 <HAL_GPIO_Init+0x22e>
90003df2:	687b      	ldr	r3, [r7, #4]
90003df4:	4a1e      	ldr	r2, [pc, #120]	@ (90003e70 <HAL_GPIO_Init+0x248>)
90003df6:	4293      	cmp	r3, r2
90003df8:	d02b      	beq.n	90003e52 <HAL_GPIO_Init+0x22a>
90003dfa:	687b      	ldr	r3, [r7, #4]
90003dfc:	4a1d      	ldr	r2, [pc, #116]	@ (90003e74 <HAL_GPIO_Init+0x24c>)
90003dfe:	4293      	cmp	r3, r2
90003e00:	d025      	beq.n	90003e4e <HAL_GPIO_Init+0x226>
90003e02:	687b      	ldr	r3, [r7, #4]
90003e04:	4a1c      	ldr	r2, [pc, #112]	@ (90003e78 <HAL_GPIO_Init+0x250>)
90003e06:	4293      	cmp	r3, r2
90003e08:	d01f      	beq.n	90003e4a <HAL_GPIO_Init+0x222>
90003e0a:	687b      	ldr	r3, [r7, #4]
90003e0c:	4a1b      	ldr	r2, [pc, #108]	@ (90003e7c <HAL_GPIO_Init+0x254>)
90003e0e:	4293      	cmp	r3, r2
90003e10:	d019      	beq.n	90003e46 <HAL_GPIO_Init+0x21e>
90003e12:	687b      	ldr	r3, [r7, #4]
90003e14:	4a1a      	ldr	r2, [pc, #104]	@ (90003e80 <HAL_GPIO_Init+0x258>)
90003e16:	4293      	cmp	r3, r2
90003e18:	d013      	beq.n	90003e42 <HAL_GPIO_Init+0x21a>
90003e1a:	687b      	ldr	r3, [r7, #4]
90003e1c:	4a19      	ldr	r2, [pc, #100]	@ (90003e84 <HAL_GPIO_Init+0x25c>)
90003e1e:	4293      	cmp	r3, r2
90003e20:	d00d      	beq.n	90003e3e <HAL_GPIO_Init+0x216>
90003e22:	687b      	ldr	r3, [r7, #4]
90003e24:	4a18      	ldr	r2, [pc, #96]	@ (90003e88 <HAL_GPIO_Init+0x260>)
90003e26:	4293      	cmp	r3, r2
90003e28:	d007      	beq.n	90003e3a <HAL_GPIO_Init+0x212>
90003e2a:	687b      	ldr	r3, [r7, #4]
90003e2c:	4a17      	ldr	r2, [pc, #92]	@ (90003e8c <HAL_GPIO_Init+0x264>)
90003e2e:	4293      	cmp	r3, r2
90003e30:	d101      	bne.n	90003e36 <HAL_GPIO_Init+0x20e>
90003e32:	2309      	movs	r3, #9
90003e34:	e02d      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e36:	230a      	movs	r3, #10
90003e38:	e02b      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e3a:	2308      	movs	r3, #8
90003e3c:	e029      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e3e:	2307      	movs	r3, #7
90003e40:	e027      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e42:	2306      	movs	r3, #6
90003e44:	e025      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e46:	2305      	movs	r3, #5
90003e48:	e023      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e4a:	2304      	movs	r3, #4
90003e4c:	e021      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e4e:	2303      	movs	r3, #3
90003e50:	e01f      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e52:	2302      	movs	r3, #2
90003e54:	e01d      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e56:	2301      	movs	r3, #1
90003e58:	e01b      	b.n	90003e92 <HAL_GPIO_Init+0x26a>
90003e5a:	bf00      	nop
90003e5c:	58000080 	.word	0x58000080
90003e60:	58024400 	.word	0x58024400
90003e64:	58000400 	.word	0x58000400
90003e68:	58020000 	.word	0x58020000
90003e6c:	58020400 	.word	0x58020400
90003e70:	58020800 	.word	0x58020800
90003e74:	58020c00 	.word	0x58020c00
90003e78:	58021000 	.word	0x58021000
90003e7c:	58021400 	.word	0x58021400
90003e80:	58021800 	.word	0x58021800
90003e84:	58021c00 	.word	0x58021c00
90003e88:	58022000 	.word	0x58022000
90003e8c:	58022400 	.word	0x58022400
90003e90:	2300      	movs	r3, #0
90003e92:	69fa      	ldr	r2, [r7, #28]
90003e94:	f002 0203 	and.w	r2, r2, #3
90003e98:	0092      	lsls	r2, r2, #2
90003e9a:	4093      	lsls	r3, r2
90003e9c:	69ba      	ldr	r2, [r7, #24]
90003e9e:	4313      	orrs	r3, r2
90003ea0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003ea2:	4938      	ldr	r1, [pc, #224]	@ (90003f84 <HAL_GPIO_Init+0x35c>)
90003ea4:	69fb      	ldr	r3, [r7, #28]
90003ea6:	089b      	lsrs	r3, r3, #2
90003ea8:	3302      	adds	r3, #2
90003eaa:	69ba      	ldr	r2, [r7, #24]
90003eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003eb4:	681b      	ldr	r3, [r3, #0]
90003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003eb8:	693b      	ldr	r3, [r7, #16]
90003eba:	43db      	mvns	r3, r3
90003ebc:	69ba      	ldr	r2, [r7, #24]
90003ebe:	4013      	ands	r3, r2
90003ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003ec2:	683b      	ldr	r3, [r7, #0]
90003ec4:	685b      	ldr	r3, [r3, #4]
90003ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003eca:	2b00      	cmp	r3, #0
90003ecc:	d003      	beq.n	90003ed6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003ece:	69ba      	ldr	r2, [r7, #24]
90003ed0:	693b      	ldr	r3, [r7, #16]
90003ed2:	4313      	orrs	r3, r2
90003ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003eda:	69bb      	ldr	r3, [r7, #24]
90003edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003ee2:	685b      	ldr	r3, [r3, #4]
90003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003ee6:	693b      	ldr	r3, [r7, #16]
90003ee8:	43db      	mvns	r3, r3
90003eea:	69ba      	ldr	r2, [r7, #24]
90003eec:	4013      	ands	r3, r2
90003eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003ef0:	683b      	ldr	r3, [r7, #0]
90003ef2:	685b      	ldr	r3, [r3, #4]
90003ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003ef8:	2b00      	cmp	r3, #0
90003efa:	d003      	beq.n	90003f04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003efc:	69ba      	ldr	r2, [r7, #24]
90003efe:	693b      	ldr	r3, [r7, #16]
90003f00:	4313      	orrs	r3, r2
90003f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003f08:	69bb      	ldr	r3, [r7, #24]
90003f0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003f0c:	697b      	ldr	r3, [r7, #20]
90003f0e:	685b      	ldr	r3, [r3, #4]
90003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f12:	693b      	ldr	r3, [r7, #16]
90003f14:	43db      	mvns	r3, r3
90003f16:	69ba      	ldr	r2, [r7, #24]
90003f18:	4013      	ands	r3, r2
90003f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003f1c:	683b      	ldr	r3, [r7, #0]
90003f1e:	685b      	ldr	r3, [r3, #4]
90003f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003f24:	2b00      	cmp	r3, #0
90003f26:	d003      	beq.n	90003f30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003f28:	69ba      	ldr	r2, [r7, #24]
90003f2a:	693b      	ldr	r3, [r7, #16]
90003f2c:	4313      	orrs	r3, r2
90003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003f30:	697b      	ldr	r3, [r7, #20]
90003f32:	69ba      	ldr	r2, [r7, #24]
90003f34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003f36:	697b      	ldr	r3, [r7, #20]
90003f38:	681b      	ldr	r3, [r3, #0]
90003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f3c:	693b      	ldr	r3, [r7, #16]
90003f3e:	43db      	mvns	r3, r3
90003f40:	69ba      	ldr	r2, [r7, #24]
90003f42:	4013      	ands	r3, r2
90003f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003f46:	683b      	ldr	r3, [r7, #0]
90003f48:	685b      	ldr	r3, [r3, #4]
90003f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003f4e:	2b00      	cmp	r3, #0
90003f50:	d003      	beq.n	90003f5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003f52:	69ba      	ldr	r2, [r7, #24]
90003f54:	693b      	ldr	r3, [r7, #16]
90003f56:	4313      	orrs	r3, r2
90003f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003f5a:	697b      	ldr	r3, [r7, #20]
90003f5c:	69ba      	ldr	r2, [r7, #24]
90003f5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003f60:	69fb      	ldr	r3, [r7, #28]
90003f62:	3301      	adds	r3, #1
90003f64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003f66:	683b      	ldr	r3, [r7, #0]
90003f68:	681a      	ldr	r2, [r3, #0]
90003f6a:	69fb      	ldr	r3, [r7, #28]
90003f6c:	fa22 f303 	lsr.w	r3, r2, r3
90003f70:	2b00      	cmp	r3, #0
90003f72:	f47f ae63 	bne.w	90003c3c <HAL_GPIO_Init+0x14>
  }
}
90003f76:	bf00      	nop
90003f78:	bf00      	nop
90003f7a:	3724      	adds	r7, #36	@ 0x24
90003f7c:	46bd      	mov	sp, r7
90003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f82:	4770      	bx	lr
90003f84:	58000400 	.word	0x58000400

90003f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003f88:	b480      	push	{r7}
90003f8a:	b085      	sub	sp, #20
90003f8c:	af00      	add	r7, sp, #0
90003f8e:	6078      	str	r0, [r7, #4]
90003f90:	460b      	mov	r3, r1
90003f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003f94:	687b      	ldr	r3, [r7, #4]
90003f96:	691a      	ldr	r2, [r3, #16]
90003f98:	887b      	ldrh	r3, [r7, #2]
90003f9a:	4013      	ands	r3, r2
90003f9c:	2b00      	cmp	r3, #0
90003f9e:	d002      	beq.n	90003fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003fa0:	2301      	movs	r3, #1
90003fa2:	73fb      	strb	r3, [r7, #15]
90003fa4:	e001      	b.n	90003faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003fa6:	2300      	movs	r3, #0
90003fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003faa:	7bfb      	ldrb	r3, [r7, #15]
}
90003fac:	4618      	mov	r0, r3
90003fae:	3714      	adds	r7, #20
90003fb0:	46bd      	mov	sp, r7
90003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
90003fb6:	4770      	bx	lr

90003fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003fb8:	b480      	push	{r7}
90003fba:	b083      	sub	sp, #12
90003fbc:	af00      	add	r7, sp, #0
90003fbe:	6078      	str	r0, [r7, #4]
90003fc0:	460b      	mov	r3, r1
90003fc2:	807b      	strh	r3, [r7, #2]
90003fc4:	4613      	mov	r3, r2
90003fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003fc8:	787b      	ldrb	r3, [r7, #1]
90003fca:	2b00      	cmp	r3, #0
90003fcc:	d003      	beq.n	90003fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003fce:	887a      	ldrh	r2, [r7, #2]
90003fd0:	687b      	ldr	r3, [r7, #4]
90003fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003fd4:	e003      	b.n	90003fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003fd6:	887b      	ldrh	r3, [r7, #2]
90003fd8:	041a      	lsls	r2, r3, #16
90003fda:	687b      	ldr	r3, [r7, #4]
90003fdc:	619a      	str	r2, [r3, #24]
}
90003fde:	bf00      	nop
90003fe0:	370c      	adds	r7, #12
90003fe2:	46bd      	mov	sp, r7
90003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
90003fe8:	4770      	bx	lr

90003fea <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003fea:	b580      	push	{r7, lr}
90003fec:	b086      	sub	sp, #24
90003fee:	af00      	add	r7, sp, #0
90003ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003ff2:	687b      	ldr	r3, [r7, #4]
90003ff4:	681b      	ldr	r3, [r3, #0]
90003ff6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003ff8:	693b      	ldr	r3, [r7, #16]
90003ffa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003ffc:	687b      	ldr	r3, [r7, #4]
90003ffe:	681b      	ldr	r3, [r3, #0]
90004000:	4618      	mov	r0, r3
90004002:	f007 f9a5 	bl	9000b350 <USB_GetMode>
90004006:	4603      	mov	r3, r0
90004008:	2b01      	cmp	r3, #1
9000400a:	f040 80fb 	bne.w	90004204 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
9000400e:	687b      	ldr	r3, [r7, #4]
90004010:	681b      	ldr	r3, [r3, #0]
90004012:	4618      	mov	r0, r3
90004014:	f007 f968 	bl	9000b2e8 <USB_ReadInterrupts>
90004018:	4603      	mov	r3, r0
9000401a:	2b00      	cmp	r3, #0
9000401c:	f000 80f1 	beq.w	90004202 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90004020:	687b      	ldr	r3, [r7, #4]
90004022:	681b      	ldr	r3, [r3, #0]
90004024:	4618      	mov	r0, r3
90004026:	f007 f95f 	bl	9000b2e8 <USB_ReadInterrupts>
9000402a:	4603      	mov	r3, r0
9000402c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004030:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90004034:	d104      	bne.n	90004040 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90004036:	687b      	ldr	r3, [r7, #4]
90004038:	681b      	ldr	r3, [r3, #0]
9000403a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
9000403e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90004040:	687b      	ldr	r3, [r7, #4]
90004042:	681b      	ldr	r3, [r3, #0]
90004044:	4618      	mov	r0, r3
90004046:	f007 f94f 	bl	9000b2e8 <USB_ReadInterrupts>
9000404a:	4603      	mov	r3, r0
9000404c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90004050:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90004054:	d104      	bne.n	90004060 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90004056:	687b      	ldr	r3, [r7, #4]
90004058:	681b      	ldr	r3, [r3, #0]
9000405a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
9000405e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90004060:	687b      	ldr	r3, [r7, #4]
90004062:	681b      	ldr	r3, [r3, #0]
90004064:	4618      	mov	r0, r3
90004066:	f007 f93f 	bl	9000b2e8 <USB_ReadInterrupts>
9000406a:	4603      	mov	r3, r0
9000406c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90004070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90004074:	d104      	bne.n	90004080 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90004076:	687b      	ldr	r3, [r7, #4]
90004078:	681b      	ldr	r3, [r3, #0]
9000407a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
9000407e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90004080:	687b      	ldr	r3, [r7, #4]
90004082:	681b      	ldr	r3, [r3, #0]
90004084:	4618      	mov	r0, r3
90004086:	f007 f92f 	bl	9000b2e8 <USB_ReadInterrupts>
9000408a:	4603      	mov	r3, r0
9000408c:	f003 0302 	and.w	r3, r3, #2
90004090:	2b02      	cmp	r3, #2
90004092:	d103      	bne.n	9000409c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90004094:	687b      	ldr	r3, [r7, #4]
90004096:	681b      	ldr	r3, [r3, #0]
90004098:	2202      	movs	r2, #2
9000409a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
9000409c:	687b      	ldr	r3, [r7, #4]
9000409e:	681b      	ldr	r3, [r3, #0]
900040a0:	4618      	mov	r0, r3
900040a2:	f007 f921 	bl	9000b2e8 <USB_ReadInterrupts>
900040a6:	4603      	mov	r3, r0
900040a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900040ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900040b0:	d120      	bne.n	900040f4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
900040b2:	687b      	ldr	r3, [r7, #4]
900040b4:	681b      	ldr	r3, [r3, #0]
900040b6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900040ba:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
900040bc:	68fb      	ldr	r3, [r7, #12]
900040be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900040c2:	681b      	ldr	r3, [r3, #0]
900040c4:	f003 0301 	and.w	r3, r3, #1
900040c8:	2b00      	cmp	r3, #0
900040ca:	d113      	bne.n	900040f4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
900040cc:	2110      	movs	r1, #16
900040ce:	6938      	ldr	r0, [r7, #16]
900040d0:	f007 f852 	bl	9000b178 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
900040d4:	6938      	ldr	r0, [r7, #16]
900040d6:	f007 f881 	bl	9000b1dc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900040da:	687b      	ldr	r3, [r7, #4]
900040dc:	7a5b      	ldrb	r3, [r3, #9]
900040de:	2b02      	cmp	r3, #2
900040e0:	d105      	bne.n	900040ee <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900040e2:	687b      	ldr	r3, [r7, #4]
900040e4:	681b      	ldr	r3, [r3, #0]
900040e6:	2101      	movs	r1, #1
900040e8:	4618      	mov	r0, r3
900040ea:	f007 f93f 	bl	9000b36c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
900040ee:	6878      	ldr	r0, [r7, #4]
900040f0:	f7fd f852 	bl	90001198 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
900040f4:	687b      	ldr	r3, [r7, #4]
900040f6:	681b      	ldr	r3, [r3, #0]
900040f8:	4618      	mov	r0, r3
900040fa:	f007 f8f5 	bl	9000b2e8 <USB_ReadInterrupts>
900040fe:	4603      	mov	r3, r0
90004100:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90004104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004108:	d102      	bne.n	90004110 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
9000410a:	6878      	ldr	r0, [r7, #4]
9000410c:	f001 fca1 	bl	90005a52 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90004110:	687b      	ldr	r3, [r7, #4]
90004112:	681b      	ldr	r3, [r3, #0]
90004114:	4618      	mov	r0, r3
90004116:	f007 f8e7 	bl	9000b2e8 <USB_ReadInterrupts>
9000411a:	4603      	mov	r3, r0
9000411c:	f003 0308 	and.w	r3, r3, #8
90004120:	2b08      	cmp	r3, #8
90004122:	d106      	bne.n	90004132 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90004124:	6878      	ldr	r0, [r7, #4]
90004126:	f7fd f81b 	bl	90001160 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
9000412a:	687b      	ldr	r3, [r7, #4]
9000412c:	681b      	ldr	r3, [r3, #0]
9000412e:	2208      	movs	r2, #8
90004130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90004132:	687b      	ldr	r3, [r7, #4]
90004134:	681b      	ldr	r3, [r3, #0]
90004136:	4618      	mov	r0, r3
90004138:	f007 f8d6 	bl	9000b2e8 <USB_ReadInterrupts>
9000413c:	4603      	mov	r3, r0
9000413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90004142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90004146:	d139      	bne.n	900041bc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90004148:	687b      	ldr	r3, [r7, #4]
9000414a:	681b      	ldr	r3, [r3, #0]
9000414c:	4618      	mov	r0, r3
9000414e:	f007 f94a 	bl	9000b3e6 <USB_HC_ReadInterrupt>
90004152:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004154:	2300      	movs	r3, #0
90004156:	617b      	str	r3, [r7, #20]
90004158:	e025      	b.n	900041a6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
9000415a:	697b      	ldr	r3, [r7, #20]
9000415c:	f003 030f 	and.w	r3, r3, #15
90004160:	68ba      	ldr	r2, [r7, #8]
90004162:	fa22 f303 	lsr.w	r3, r2, r3
90004166:	f003 0301 	and.w	r3, r3, #1
9000416a:	2b00      	cmp	r3, #0
9000416c:	d018      	beq.n	900041a0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
9000416e:	697b      	ldr	r3, [r7, #20]
90004170:	015a      	lsls	r2, r3, #5
90004172:	68fb      	ldr	r3, [r7, #12]
90004174:	4413      	add	r3, r2
90004176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000417a:	681b      	ldr	r3, [r3, #0]
9000417c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90004180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90004184:	d106      	bne.n	90004194 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90004186:	697b      	ldr	r3, [r7, #20]
90004188:	b2db      	uxtb	r3, r3
9000418a:	4619      	mov	r1, r3
9000418c:	6878      	ldr	r0, [r7, #4]
9000418e:	f000 f859 	bl	90004244 <HCD_HC_IN_IRQHandler>
90004192:	e005      	b.n	900041a0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90004194:	697b      	ldr	r3, [r7, #20]
90004196:	b2db      	uxtb	r3, r3
90004198:	4619      	mov	r1, r3
9000419a:	6878      	ldr	r0, [r7, #4]
9000419c:	f000 febb 	bl	90004f16 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900041a0:	697b      	ldr	r3, [r7, #20]
900041a2:	3301      	adds	r3, #1
900041a4:	617b      	str	r3, [r7, #20]
900041a6:	687b      	ldr	r3, [r7, #4]
900041a8:	795b      	ldrb	r3, [r3, #5]
900041aa:	461a      	mov	r2, r3
900041ac:	697b      	ldr	r3, [r7, #20]
900041ae:	4293      	cmp	r3, r2
900041b0:	d3d3      	bcc.n	9000415a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
900041b2:	687b      	ldr	r3, [r7, #4]
900041b4:	681b      	ldr	r3, [r3, #0]
900041b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900041ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
900041bc:	687b      	ldr	r3, [r7, #4]
900041be:	681b      	ldr	r3, [r3, #0]
900041c0:	4618      	mov	r0, r3
900041c2:	f007 f891 	bl	9000b2e8 <USB_ReadInterrupts>
900041c6:	4603      	mov	r3, r0
900041c8:	f003 0310 	and.w	r3, r3, #16
900041cc:	2b10      	cmp	r3, #16
900041ce:	d101      	bne.n	900041d4 <HAL_HCD_IRQHandler+0x1ea>
900041d0:	2301      	movs	r3, #1
900041d2:	e000      	b.n	900041d6 <HAL_HCD_IRQHandler+0x1ec>
900041d4:	2300      	movs	r3, #0
900041d6:	2b00      	cmp	r3, #0
900041d8:	d014      	beq.n	90004204 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900041da:	687b      	ldr	r3, [r7, #4]
900041dc:	681b      	ldr	r3, [r3, #0]
900041de:	699a      	ldr	r2, [r3, #24]
900041e0:	687b      	ldr	r3, [r7, #4]
900041e2:	681b      	ldr	r3, [r3, #0]
900041e4:	f022 0210 	bic.w	r2, r2, #16
900041e8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
900041ea:	6878      	ldr	r0, [r7, #4]
900041ec:	f001 fb52 	bl	90005894 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900041f0:	687b      	ldr	r3, [r7, #4]
900041f2:	681b      	ldr	r3, [r3, #0]
900041f4:	699a      	ldr	r2, [r3, #24]
900041f6:	687b      	ldr	r3, [r7, #4]
900041f8:	681b      	ldr	r3, [r3, #0]
900041fa:	f042 0210 	orr.w	r2, r2, #16
900041fe:	619a      	str	r2, [r3, #24]
90004200:	e000      	b.n	90004204 <HAL_HCD_IRQHandler+0x21a>
      return;
90004202:	bf00      	nop
    }
  }
}
90004204:	3718      	adds	r7, #24
90004206:	46bd      	mov	sp, r7
90004208:	bd80      	pop	{r7, pc}

9000420a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
9000420a:	b580      	push	{r7, lr}
9000420c:	b082      	sub	sp, #8
9000420e:	af00      	add	r7, sp, #0
90004210:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90004212:	687b      	ldr	r3, [r7, #4]
90004214:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004218:	2b01      	cmp	r3, #1
9000421a:	d101      	bne.n	90004220 <HAL_HCD_Stop+0x16>
9000421c:	2302      	movs	r3, #2
9000421e:	e00d      	b.n	9000423c <HAL_HCD_Stop+0x32>
90004220:	687b      	ldr	r3, [r7, #4]
90004222:	2201      	movs	r2, #1
90004224:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004228:	687b      	ldr	r3, [r7, #4]
9000422a:	681b      	ldr	r3, [r3, #0]
9000422c:	4618      	mov	r0, r3
9000422e:	f007 fa0b 	bl	9000b648 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90004232:	687b      	ldr	r3, [r7, #4]
90004234:	2200      	movs	r2, #0
90004236:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
9000423a:	2300      	movs	r3, #0
}
9000423c:	4618      	mov	r0, r3
9000423e:	3708      	adds	r7, #8
90004240:	46bd      	mov	sp, r7
90004242:	bd80      	pop	{r7, pc}

90004244 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004244:	b580      	push	{r7, lr}
90004246:	b086      	sub	sp, #24
90004248:	af00      	add	r7, sp, #0
9000424a:	6078      	str	r0, [r7, #4]
9000424c:	460b      	mov	r3, r1
9000424e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004250:	687b      	ldr	r3, [r7, #4]
90004252:	681b      	ldr	r3, [r3, #0]
90004254:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004256:	697b      	ldr	r3, [r7, #20]
90004258:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000425a:	687b      	ldr	r3, [r7, #4]
9000425c:	681b      	ldr	r3, [r3, #0]
9000425e:	78fa      	ldrb	r2, [r7, #3]
90004260:	4611      	mov	r1, r2
90004262:	4618      	mov	r0, r3
90004264:	f007 f853 	bl	9000b30e <USB_ReadChInterrupts>
90004268:	4603      	mov	r3, r0
9000426a:	f003 0304 	and.w	r3, r3, #4
9000426e:	2b04      	cmp	r3, #4
90004270:	d11a      	bne.n	900042a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004272:	78fb      	ldrb	r3, [r7, #3]
90004274:	015a      	lsls	r2, r3, #5
90004276:	693b      	ldr	r3, [r7, #16]
90004278:	4413      	add	r3, r2
9000427a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000427e:	461a      	mov	r2, r3
90004280:	2304      	movs	r3, #4
90004282:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004284:	78fa      	ldrb	r2, [r7, #3]
90004286:	6879      	ldr	r1, [r7, #4]
90004288:	4613      	mov	r3, r2
9000428a:	011b      	lsls	r3, r3, #4
9000428c:	1a9b      	subs	r3, r3, r2
9000428e:	009b      	lsls	r3, r3, #2
90004290:	440b      	add	r3, r1
90004292:	334d      	adds	r3, #77	@ 0x4d
90004294:	2207      	movs	r2, #7
90004296:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004298:	687b      	ldr	r3, [r7, #4]
9000429a:	681b      	ldr	r3, [r3, #0]
9000429c:	78fa      	ldrb	r2, [r7, #3]
9000429e:	4611      	mov	r1, r2
900042a0:	4618      	mov	r0, r3
900042a2:	f007 f8b1 	bl	9000b408 <USB_HC_Halt>
900042a6:	e09e      	b.n	900043e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
900042a8:	687b      	ldr	r3, [r7, #4]
900042aa:	681b      	ldr	r3, [r3, #0]
900042ac:	78fa      	ldrb	r2, [r7, #3]
900042ae:	4611      	mov	r1, r2
900042b0:	4618      	mov	r0, r3
900042b2:	f007 f82c 	bl	9000b30e <USB_ReadChInterrupts>
900042b6:	4603      	mov	r3, r0
900042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900042bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900042c0:	d11b      	bne.n	900042fa <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
900042c2:	78fb      	ldrb	r3, [r7, #3]
900042c4:	015a      	lsls	r2, r3, #5
900042c6:	693b      	ldr	r3, [r7, #16]
900042c8:	4413      	add	r3, r2
900042ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042ce:	461a      	mov	r2, r3
900042d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
900042d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900042d6:	78fa      	ldrb	r2, [r7, #3]
900042d8:	6879      	ldr	r1, [r7, #4]
900042da:	4613      	mov	r3, r2
900042dc:	011b      	lsls	r3, r3, #4
900042de:	1a9b      	subs	r3, r3, r2
900042e0:	009b      	lsls	r3, r3, #2
900042e2:	440b      	add	r3, r1
900042e4:	334d      	adds	r3, #77	@ 0x4d
900042e6:	2208      	movs	r2, #8
900042e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042ea:	687b      	ldr	r3, [r7, #4]
900042ec:	681b      	ldr	r3, [r3, #0]
900042ee:	78fa      	ldrb	r2, [r7, #3]
900042f0:	4611      	mov	r1, r2
900042f2:	4618      	mov	r0, r3
900042f4:	f007 f888 	bl	9000b408 <USB_HC_Halt>
900042f8:	e075      	b.n	900043e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900042fa:	687b      	ldr	r3, [r7, #4]
900042fc:	681b      	ldr	r3, [r3, #0]
900042fe:	78fa      	ldrb	r2, [r7, #3]
90004300:	4611      	mov	r1, r2
90004302:	4618      	mov	r0, r3
90004304:	f007 f803 	bl	9000b30e <USB_ReadChInterrupts>
90004308:	4603      	mov	r3, r0
9000430a:	f003 0308 	and.w	r3, r3, #8
9000430e:	2b08      	cmp	r3, #8
90004310:	d11a      	bne.n	90004348 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004312:	78fb      	ldrb	r3, [r7, #3]
90004314:	015a      	lsls	r2, r3, #5
90004316:	693b      	ldr	r3, [r7, #16]
90004318:	4413      	add	r3, r2
9000431a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000431e:	461a      	mov	r2, r3
90004320:	2308      	movs	r3, #8
90004322:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004324:	78fa      	ldrb	r2, [r7, #3]
90004326:	6879      	ldr	r1, [r7, #4]
90004328:	4613      	mov	r3, r2
9000432a:	011b      	lsls	r3, r3, #4
9000432c:	1a9b      	subs	r3, r3, r2
9000432e:	009b      	lsls	r3, r3, #2
90004330:	440b      	add	r3, r1
90004332:	334d      	adds	r3, #77	@ 0x4d
90004334:	2206      	movs	r2, #6
90004336:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004338:	687b      	ldr	r3, [r7, #4]
9000433a:	681b      	ldr	r3, [r3, #0]
9000433c:	78fa      	ldrb	r2, [r7, #3]
9000433e:	4611      	mov	r1, r2
90004340:	4618      	mov	r0, r3
90004342:	f007 f861 	bl	9000b408 <USB_HC_Halt>
90004346:	e04e      	b.n	900043e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004348:	687b      	ldr	r3, [r7, #4]
9000434a:	681b      	ldr	r3, [r3, #0]
9000434c:	78fa      	ldrb	r2, [r7, #3]
9000434e:	4611      	mov	r1, r2
90004350:	4618      	mov	r0, r3
90004352:	f006 ffdc 	bl	9000b30e <USB_ReadChInterrupts>
90004356:	4603      	mov	r3, r0
90004358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000435c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004360:	d11b      	bne.n	9000439a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90004362:	78fb      	ldrb	r3, [r7, #3]
90004364:	015a      	lsls	r2, r3, #5
90004366:	693b      	ldr	r3, [r7, #16]
90004368:	4413      	add	r3, r2
9000436a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000436e:	461a      	mov	r2, r3
90004370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90004374:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90004376:	78fa      	ldrb	r2, [r7, #3]
90004378:	6879      	ldr	r1, [r7, #4]
9000437a:	4613      	mov	r3, r2
9000437c:	011b      	lsls	r3, r3, #4
9000437e:	1a9b      	subs	r3, r3, r2
90004380:	009b      	lsls	r3, r3, #2
90004382:	440b      	add	r3, r1
90004384:	334d      	adds	r3, #77	@ 0x4d
90004386:	2209      	movs	r2, #9
90004388:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000438a:	687b      	ldr	r3, [r7, #4]
9000438c:	681b      	ldr	r3, [r3, #0]
9000438e:	78fa      	ldrb	r2, [r7, #3]
90004390:	4611      	mov	r1, r2
90004392:	4618      	mov	r0, r3
90004394:	f007 f838 	bl	9000b408 <USB_HC_Halt>
90004398:	e025      	b.n	900043e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
9000439a:	687b      	ldr	r3, [r7, #4]
9000439c:	681b      	ldr	r3, [r3, #0]
9000439e:	78fa      	ldrb	r2, [r7, #3]
900043a0:	4611      	mov	r1, r2
900043a2:	4618      	mov	r0, r3
900043a4:	f006 ffb3 	bl	9000b30e <USB_ReadChInterrupts>
900043a8:	4603      	mov	r3, r0
900043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900043ae:	2b80      	cmp	r3, #128	@ 0x80
900043b0:	d119      	bne.n	900043e6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900043b2:	78fb      	ldrb	r3, [r7, #3]
900043b4:	015a      	lsls	r2, r3, #5
900043b6:	693b      	ldr	r3, [r7, #16]
900043b8:	4413      	add	r3, r2
900043ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043be:	461a      	mov	r2, r3
900043c0:	2380      	movs	r3, #128	@ 0x80
900043c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900043c4:	78fa      	ldrb	r2, [r7, #3]
900043c6:	6879      	ldr	r1, [r7, #4]
900043c8:	4613      	mov	r3, r2
900043ca:	011b      	lsls	r3, r3, #4
900043cc:	1a9b      	subs	r3, r3, r2
900043ce:	009b      	lsls	r3, r3, #2
900043d0:	440b      	add	r3, r1
900043d2:	334d      	adds	r3, #77	@ 0x4d
900043d4:	2207      	movs	r2, #7
900043d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900043d8:	687b      	ldr	r3, [r7, #4]
900043da:	681b      	ldr	r3, [r3, #0]
900043dc:	78fa      	ldrb	r2, [r7, #3]
900043de:	4611      	mov	r1, r2
900043e0:	4618      	mov	r0, r3
900043e2:	f007 f811 	bl	9000b408 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900043e6:	687b      	ldr	r3, [r7, #4]
900043e8:	681b      	ldr	r3, [r3, #0]
900043ea:	78fa      	ldrb	r2, [r7, #3]
900043ec:	4611      	mov	r1, r2
900043ee:	4618      	mov	r0, r3
900043f0:	f006 ff8d 	bl	9000b30e <USB_ReadChInterrupts>
900043f4:	4603      	mov	r3, r0
900043f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900043fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900043fe:	d112      	bne.n	90004426 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004400:	687b      	ldr	r3, [r7, #4]
90004402:	681b      	ldr	r3, [r3, #0]
90004404:	78fa      	ldrb	r2, [r7, #3]
90004406:	4611      	mov	r1, r2
90004408:	4618      	mov	r0, r3
9000440a:	f006 fffd 	bl	9000b408 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
9000440e:	78fb      	ldrb	r3, [r7, #3]
90004410:	015a      	lsls	r2, r3, #5
90004412:	693b      	ldr	r3, [r7, #16]
90004414:	4413      	add	r3, r2
90004416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000441a:	461a      	mov	r2, r3
9000441c:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004420:	6093      	str	r3, [r2, #8]
90004422:	f000 bd75 	b.w	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004426:	687b      	ldr	r3, [r7, #4]
90004428:	681b      	ldr	r3, [r3, #0]
9000442a:	78fa      	ldrb	r2, [r7, #3]
9000442c:	4611      	mov	r1, r2
9000442e:	4618      	mov	r0, r3
90004430:	f006 ff6d 	bl	9000b30e <USB_ReadChInterrupts>
90004434:	4603      	mov	r3, r0
90004436:	f003 0301 	and.w	r3, r3, #1
9000443a:	2b01      	cmp	r3, #1
9000443c:	f040 8128 	bne.w	90004690 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004440:	78fb      	ldrb	r3, [r7, #3]
90004442:	015a      	lsls	r2, r3, #5
90004444:	693b      	ldr	r3, [r7, #16]
90004446:	4413      	add	r3, r2
90004448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000444c:	461a      	mov	r2, r3
9000444e:	2320      	movs	r3, #32
90004450:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90004452:	78fa      	ldrb	r2, [r7, #3]
90004454:	6879      	ldr	r1, [r7, #4]
90004456:	4613      	mov	r3, r2
90004458:	011b      	lsls	r3, r3, #4
9000445a:	1a9b      	subs	r3, r3, r2
9000445c:	009b      	lsls	r3, r3, #2
9000445e:	440b      	add	r3, r1
90004460:	331b      	adds	r3, #27
90004462:	781b      	ldrb	r3, [r3, #0]
90004464:	2b01      	cmp	r3, #1
90004466:	d119      	bne.n	9000449c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004468:	78fa      	ldrb	r2, [r7, #3]
9000446a:	6879      	ldr	r1, [r7, #4]
9000446c:	4613      	mov	r3, r2
9000446e:	011b      	lsls	r3, r3, #4
90004470:	1a9b      	subs	r3, r3, r2
90004472:	009b      	lsls	r3, r3, #2
90004474:	440b      	add	r3, r1
90004476:	331b      	adds	r3, #27
90004478:	2200      	movs	r2, #0
9000447a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000447c:	78fb      	ldrb	r3, [r7, #3]
9000447e:	015a      	lsls	r2, r3, #5
90004480:	693b      	ldr	r3, [r7, #16]
90004482:	4413      	add	r3, r2
90004484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004488:	685b      	ldr	r3, [r3, #4]
9000448a:	78fa      	ldrb	r2, [r7, #3]
9000448c:	0151      	lsls	r1, r2, #5
9000448e:	693a      	ldr	r2, [r7, #16]
90004490:	440a      	add	r2, r1
90004492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000449a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
9000449c:	687b      	ldr	r3, [r7, #4]
9000449e:	799b      	ldrb	r3, [r3, #6]
900044a0:	2b00      	cmp	r3, #0
900044a2:	d01b      	beq.n	900044dc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900044a4:	78fa      	ldrb	r2, [r7, #3]
900044a6:	6879      	ldr	r1, [r7, #4]
900044a8:	4613      	mov	r3, r2
900044aa:	011b      	lsls	r3, r3, #4
900044ac:	1a9b      	subs	r3, r3, r2
900044ae:	009b      	lsls	r3, r3, #2
900044b0:	440b      	add	r3, r1
900044b2:	3330      	adds	r3, #48	@ 0x30
900044b4:	6819      	ldr	r1, [r3, #0]
900044b6:	78fb      	ldrb	r3, [r7, #3]
900044b8:	015a      	lsls	r2, r3, #5
900044ba:	693b      	ldr	r3, [r7, #16]
900044bc:	4413      	add	r3, r2
900044be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044c2:	691b      	ldr	r3, [r3, #16]
900044c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
900044c8:	78fa      	ldrb	r2, [r7, #3]
900044ca:	1ac9      	subs	r1, r1, r3
900044cc:	6878      	ldr	r0, [r7, #4]
900044ce:	4613      	mov	r3, r2
900044d0:	011b      	lsls	r3, r3, #4
900044d2:	1a9b      	subs	r3, r3, r2
900044d4:	009b      	lsls	r3, r3, #2
900044d6:	4403      	add	r3, r0
900044d8:	3338      	adds	r3, #56	@ 0x38
900044da:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
900044dc:	78fa      	ldrb	r2, [r7, #3]
900044de:	6879      	ldr	r1, [r7, #4]
900044e0:	4613      	mov	r3, r2
900044e2:	011b      	lsls	r3, r3, #4
900044e4:	1a9b      	subs	r3, r3, r2
900044e6:	009b      	lsls	r3, r3, #2
900044e8:	440b      	add	r3, r1
900044ea:	334d      	adds	r3, #77	@ 0x4d
900044ec:	2201      	movs	r2, #1
900044ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
900044f0:	78fa      	ldrb	r2, [r7, #3]
900044f2:	6879      	ldr	r1, [r7, #4]
900044f4:	4613      	mov	r3, r2
900044f6:	011b      	lsls	r3, r3, #4
900044f8:	1a9b      	subs	r3, r3, r2
900044fa:	009b      	lsls	r3, r3, #2
900044fc:	440b      	add	r3, r1
900044fe:	3344      	adds	r3, #68	@ 0x44
90004500:	2200      	movs	r2, #0
90004502:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004504:	78fb      	ldrb	r3, [r7, #3]
90004506:	015a      	lsls	r2, r3, #5
90004508:	693b      	ldr	r3, [r7, #16]
9000450a:	4413      	add	r3, r2
9000450c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004510:	461a      	mov	r2, r3
90004512:	2301      	movs	r3, #1
90004514:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004516:	78fa      	ldrb	r2, [r7, #3]
90004518:	6879      	ldr	r1, [r7, #4]
9000451a:	4613      	mov	r3, r2
9000451c:	011b      	lsls	r3, r3, #4
9000451e:	1a9b      	subs	r3, r3, r2
90004520:	009b      	lsls	r3, r3, #2
90004522:	440b      	add	r3, r1
90004524:	3326      	adds	r3, #38	@ 0x26
90004526:	781b      	ldrb	r3, [r3, #0]
90004528:	2b00      	cmp	r3, #0
9000452a:	d00a      	beq.n	90004542 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
9000452c:	78fa      	ldrb	r2, [r7, #3]
9000452e:	6879      	ldr	r1, [r7, #4]
90004530:	4613      	mov	r3, r2
90004532:	011b      	lsls	r3, r3, #4
90004534:	1a9b      	subs	r3, r3, r2
90004536:	009b      	lsls	r3, r3, #2
90004538:	440b      	add	r3, r1
9000453a:	3326      	adds	r3, #38	@ 0x26
9000453c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000453e:	2b02      	cmp	r3, #2
90004540:	d110      	bne.n	90004564 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004542:	687b      	ldr	r3, [r7, #4]
90004544:	681b      	ldr	r3, [r3, #0]
90004546:	78fa      	ldrb	r2, [r7, #3]
90004548:	4611      	mov	r1, r2
9000454a:	4618      	mov	r0, r3
9000454c:	f006 ff5c 	bl	9000b408 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004550:	78fb      	ldrb	r3, [r7, #3]
90004552:	015a      	lsls	r2, r3, #5
90004554:	693b      	ldr	r3, [r7, #16]
90004556:	4413      	add	r3, r2
90004558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000455c:	461a      	mov	r2, r3
9000455e:	2310      	movs	r3, #16
90004560:	6093      	str	r3, [r2, #8]
90004562:	e03d      	b.n	900045e0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004564:	78fa      	ldrb	r2, [r7, #3]
90004566:	6879      	ldr	r1, [r7, #4]
90004568:	4613      	mov	r3, r2
9000456a:	011b      	lsls	r3, r3, #4
9000456c:	1a9b      	subs	r3, r3, r2
9000456e:	009b      	lsls	r3, r3, #2
90004570:	440b      	add	r3, r1
90004572:	3326      	adds	r3, #38	@ 0x26
90004574:	781b      	ldrb	r3, [r3, #0]
90004576:	2b03      	cmp	r3, #3
90004578:	d00a      	beq.n	90004590 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
9000457a:	78fa      	ldrb	r2, [r7, #3]
9000457c:	6879      	ldr	r1, [r7, #4]
9000457e:	4613      	mov	r3, r2
90004580:	011b      	lsls	r3, r3, #4
90004582:	1a9b      	subs	r3, r3, r2
90004584:	009b      	lsls	r3, r3, #2
90004586:	440b      	add	r3, r1
90004588:	3326      	adds	r3, #38	@ 0x26
9000458a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
9000458c:	2b01      	cmp	r3, #1
9000458e:	d127      	bne.n	900045e0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90004590:	78fb      	ldrb	r3, [r7, #3]
90004592:	015a      	lsls	r2, r3, #5
90004594:	693b      	ldr	r3, [r7, #16]
90004596:	4413      	add	r3, r2
90004598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000459c:	681b      	ldr	r3, [r3, #0]
9000459e:	78fa      	ldrb	r2, [r7, #3]
900045a0:	0151      	lsls	r1, r2, #5
900045a2:	693a      	ldr	r2, [r7, #16]
900045a4:	440a      	add	r2, r1
900045a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900045aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
900045ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900045b0:	78fa      	ldrb	r2, [r7, #3]
900045b2:	6879      	ldr	r1, [r7, #4]
900045b4:	4613      	mov	r3, r2
900045b6:	011b      	lsls	r3, r3, #4
900045b8:	1a9b      	subs	r3, r3, r2
900045ba:	009b      	lsls	r3, r3, #2
900045bc:	440b      	add	r3, r1
900045be:	334c      	adds	r3, #76	@ 0x4c
900045c0:	2201      	movs	r2, #1
900045c2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900045c4:	78fa      	ldrb	r2, [r7, #3]
900045c6:	6879      	ldr	r1, [r7, #4]
900045c8:	4613      	mov	r3, r2
900045ca:	011b      	lsls	r3, r3, #4
900045cc:	1a9b      	subs	r3, r3, r2
900045ce:	009b      	lsls	r3, r3, #2
900045d0:	440b      	add	r3, r1
900045d2:	334c      	adds	r3, #76	@ 0x4c
900045d4:	781a      	ldrb	r2, [r3, #0]
900045d6:	78fb      	ldrb	r3, [r7, #3]
900045d8:	4619      	mov	r1, r3
900045da:	6878      	ldr	r0, [r7, #4]
900045dc:	f7fc fe06 	bl	900011ec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
900045e0:	687b      	ldr	r3, [r7, #4]
900045e2:	799b      	ldrb	r3, [r3, #6]
900045e4:	2b01      	cmp	r3, #1
900045e6:	d13b      	bne.n	90004660 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900045e8:	78fa      	ldrb	r2, [r7, #3]
900045ea:	6879      	ldr	r1, [r7, #4]
900045ec:	4613      	mov	r3, r2
900045ee:	011b      	lsls	r3, r3, #4
900045f0:	1a9b      	subs	r3, r3, r2
900045f2:	009b      	lsls	r3, r3, #2
900045f4:	440b      	add	r3, r1
900045f6:	3338      	adds	r3, #56	@ 0x38
900045f8:	6819      	ldr	r1, [r3, #0]
900045fa:	78fa      	ldrb	r2, [r7, #3]
900045fc:	6878      	ldr	r0, [r7, #4]
900045fe:	4613      	mov	r3, r2
90004600:	011b      	lsls	r3, r3, #4
90004602:	1a9b      	subs	r3, r3, r2
90004604:	009b      	lsls	r3, r3, #2
90004606:	4403      	add	r3, r0
90004608:	3328      	adds	r3, #40	@ 0x28
9000460a:	881b      	ldrh	r3, [r3, #0]
9000460c:	440b      	add	r3, r1
9000460e:	1e59      	subs	r1, r3, #1
90004610:	78fa      	ldrb	r2, [r7, #3]
90004612:	6878      	ldr	r0, [r7, #4]
90004614:	4613      	mov	r3, r2
90004616:	011b      	lsls	r3, r3, #4
90004618:	1a9b      	subs	r3, r3, r2
9000461a:	009b      	lsls	r3, r3, #2
9000461c:	4403      	add	r3, r0
9000461e:	3328      	adds	r3, #40	@ 0x28
90004620:	881b      	ldrh	r3, [r3, #0]
90004622:	fbb1 f3f3 	udiv	r3, r1, r3
90004626:	f003 0301 	and.w	r3, r3, #1
9000462a:	2b00      	cmp	r3, #0
9000462c:	f000 8470 	beq.w	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004630:	78fa      	ldrb	r2, [r7, #3]
90004632:	6879      	ldr	r1, [r7, #4]
90004634:	4613      	mov	r3, r2
90004636:	011b      	lsls	r3, r3, #4
90004638:	1a9b      	subs	r3, r3, r2
9000463a:	009b      	lsls	r3, r3, #2
9000463c:	440b      	add	r3, r1
9000463e:	333c      	adds	r3, #60	@ 0x3c
90004640:	781b      	ldrb	r3, [r3, #0]
90004642:	78fa      	ldrb	r2, [r7, #3]
90004644:	f083 0301 	eor.w	r3, r3, #1
90004648:	b2d8      	uxtb	r0, r3
9000464a:	6879      	ldr	r1, [r7, #4]
9000464c:	4613      	mov	r3, r2
9000464e:	011b      	lsls	r3, r3, #4
90004650:	1a9b      	subs	r3, r3, r2
90004652:	009b      	lsls	r3, r3, #2
90004654:	440b      	add	r3, r1
90004656:	333c      	adds	r3, #60	@ 0x3c
90004658:	4602      	mov	r2, r0
9000465a:	701a      	strb	r2, [r3, #0]
9000465c:	f000 bc58 	b.w	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004660:	78fa      	ldrb	r2, [r7, #3]
90004662:	6879      	ldr	r1, [r7, #4]
90004664:	4613      	mov	r3, r2
90004666:	011b      	lsls	r3, r3, #4
90004668:	1a9b      	subs	r3, r3, r2
9000466a:	009b      	lsls	r3, r3, #2
9000466c:	440b      	add	r3, r1
9000466e:	333c      	adds	r3, #60	@ 0x3c
90004670:	781b      	ldrb	r3, [r3, #0]
90004672:	78fa      	ldrb	r2, [r7, #3]
90004674:	f083 0301 	eor.w	r3, r3, #1
90004678:	b2d8      	uxtb	r0, r3
9000467a:	6879      	ldr	r1, [r7, #4]
9000467c:	4613      	mov	r3, r2
9000467e:	011b      	lsls	r3, r3, #4
90004680:	1a9b      	subs	r3, r3, r2
90004682:	009b      	lsls	r3, r3, #2
90004684:	440b      	add	r3, r1
90004686:	333c      	adds	r3, #60	@ 0x3c
90004688:	4602      	mov	r2, r0
9000468a:	701a      	strb	r2, [r3, #0]
9000468c:	f000 bc40 	b.w	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004690:	687b      	ldr	r3, [r7, #4]
90004692:	681b      	ldr	r3, [r3, #0]
90004694:	78fa      	ldrb	r2, [r7, #3]
90004696:	4611      	mov	r1, r2
90004698:	4618      	mov	r0, r3
9000469a:	f006 fe38 	bl	9000b30e <USB_ReadChInterrupts>
9000469e:	4603      	mov	r3, r0
900046a0:	f003 0320 	and.w	r3, r3, #32
900046a4:	2b20      	cmp	r3, #32
900046a6:	d131      	bne.n	9000470c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900046a8:	78fb      	ldrb	r3, [r7, #3]
900046aa:	015a      	lsls	r2, r3, #5
900046ac:	693b      	ldr	r3, [r7, #16]
900046ae:	4413      	add	r3, r2
900046b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046b4:	461a      	mov	r2, r3
900046b6:	2320      	movs	r3, #32
900046b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
900046ba:	78fa      	ldrb	r2, [r7, #3]
900046bc:	6879      	ldr	r1, [r7, #4]
900046be:	4613      	mov	r3, r2
900046c0:	011b      	lsls	r3, r3, #4
900046c2:	1a9b      	subs	r3, r3, r2
900046c4:	009b      	lsls	r3, r3, #2
900046c6:	440b      	add	r3, r1
900046c8:	331a      	adds	r3, #26
900046ca:	781b      	ldrb	r3, [r3, #0]
900046cc:	2b01      	cmp	r3, #1
900046ce:	f040 841f 	bne.w	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900046d2:	78fa      	ldrb	r2, [r7, #3]
900046d4:	6879      	ldr	r1, [r7, #4]
900046d6:	4613      	mov	r3, r2
900046d8:	011b      	lsls	r3, r3, #4
900046da:	1a9b      	subs	r3, r3, r2
900046dc:	009b      	lsls	r3, r3, #2
900046de:	440b      	add	r3, r1
900046e0:	331b      	adds	r3, #27
900046e2:	2201      	movs	r2, #1
900046e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900046e6:	78fa      	ldrb	r2, [r7, #3]
900046e8:	6879      	ldr	r1, [r7, #4]
900046ea:	4613      	mov	r3, r2
900046ec:	011b      	lsls	r3, r3, #4
900046ee:	1a9b      	subs	r3, r3, r2
900046f0:	009b      	lsls	r3, r3, #2
900046f2:	440b      	add	r3, r1
900046f4:	334d      	adds	r3, #77	@ 0x4d
900046f6:	2203      	movs	r2, #3
900046f8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
900046fa:	687b      	ldr	r3, [r7, #4]
900046fc:	681b      	ldr	r3, [r3, #0]
900046fe:	78fa      	ldrb	r2, [r7, #3]
90004700:	4611      	mov	r1, r2
90004702:	4618      	mov	r0, r3
90004704:	f006 fe80 	bl	9000b408 <USB_HC_Halt>
90004708:	f000 bc02 	b.w	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000470c:	687b      	ldr	r3, [r7, #4]
9000470e:	681b      	ldr	r3, [r3, #0]
90004710:	78fa      	ldrb	r2, [r7, #3]
90004712:	4611      	mov	r1, r2
90004714:	4618      	mov	r0, r3
90004716:	f006 fdfa 	bl	9000b30e <USB_ReadChInterrupts>
9000471a:	4603      	mov	r3, r0
9000471c:	f003 0302 	and.w	r3, r3, #2
90004720:	2b02      	cmp	r3, #2
90004722:	f040 8305 	bne.w	90004d30 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90004726:	78fb      	ldrb	r3, [r7, #3]
90004728:	015a      	lsls	r2, r3, #5
9000472a:	693b      	ldr	r3, [r7, #16]
9000472c:	4413      	add	r3, r2
9000472e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004732:	461a      	mov	r2, r3
90004734:	2302      	movs	r3, #2
90004736:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004738:	78fa      	ldrb	r2, [r7, #3]
9000473a:	6879      	ldr	r1, [r7, #4]
9000473c:	4613      	mov	r3, r2
9000473e:	011b      	lsls	r3, r3, #4
90004740:	1a9b      	subs	r3, r3, r2
90004742:	009b      	lsls	r3, r3, #2
90004744:	440b      	add	r3, r1
90004746:	334d      	adds	r3, #77	@ 0x4d
90004748:	781b      	ldrb	r3, [r3, #0]
9000474a:	2b01      	cmp	r3, #1
9000474c:	d114      	bne.n	90004778 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000474e:	78fa      	ldrb	r2, [r7, #3]
90004750:	6879      	ldr	r1, [r7, #4]
90004752:	4613      	mov	r3, r2
90004754:	011b      	lsls	r3, r3, #4
90004756:	1a9b      	subs	r3, r3, r2
90004758:	009b      	lsls	r3, r3, #2
9000475a:	440b      	add	r3, r1
9000475c:	334d      	adds	r3, #77	@ 0x4d
9000475e:	2202      	movs	r2, #2
90004760:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004762:	78fa      	ldrb	r2, [r7, #3]
90004764:	6879      	ldr	r1, [r7, #4]
90004766:	4613      	mov	r3, r2
90004768:	011b      	lsls	r3, r3, #4
9000476a:	1a9b      	subs	r3, r3, r2
9000476c:	009b      	lsls	r3, r3, #2
9000476e:	440b      	add	r3, r1
90004770:	334c      	adds	r3, #76	@ 0x4c
90004772:	2201      	movs	r2, #1
90004774:	701a      	strb	r2, [r3, #0]
90004776:	e2cc      	b.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90004778:	78fa      	ldrb	r2, [r7, #3]
9000477a:	6879      	ldr	r1, [r7, #4]
9000477c:	4613      	mov	r3, r2
9000477e:	011b      	lsls	r3, r3, #4
90004780:	1a9b      	subs	r3, r3, r2
90004782:	009b      	lsls	r3, r3, #2
90004784:	440b      	add	r3, r1
90004786:	334d      	adds	r3, #77	@ 0x4d
90004788:	781b      	ldrb	r3, [r3, #0]
9000478a:	2b06      	cmp	r3, #6
9000478c:	d114      	bne.n	900047b8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000478e:	78fa      	ldrb	r2, [r7, #3]
90004790:	6879      	ldr	r1, [r7, #4]
90004792:	4613      	mov	r3, r2
90004794:	011b      	lsls	r3, r3, #4
90004796:	1a9b      	subs	r3, r3, r2
90004798:	009b      	lsls	r3, r3, #2
9000479a:	440b      	add	r3, r1
9000479c:	334d      	adds	r3, #77	@ 0x4d
9000479e:	2202      	movs	r2, #2
900047a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900047a2:	78fa      	ldrb	r2, [r7, #3]
900047a4:	6879      	ldr	r1, [r7, #4]
900047a6:	4613      	mov	r3, r2
900047a8:	011b      	lsls	r3, r3, #4
900047aa:	1a9b      	subs	r3, r3, r2
900047ac:	009b      	lsls	r3, r3, #2
900047ae:	440b      	add	r3, r1
900047b0:	334c      	adds	r3, #76	@ 0x4c
900047b2:	2205      	movs	r2, #5
900047b4:	701a      	strb	r2, [r3, #0]
900047b6:	e2ac      	b.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900047b8:	78fa      	ldrb	r2, [r7, #3]
900047ba:	6879      	ldr	r1, [r7, #4]
900047bc:	4613      	mov	r3, r2
900047be:	011b      	lsls	r3, r3, #4
900047c0:	1a9b      	subs	r3, r3, r2
900047c2:	009b      	lsls	r3, r3, #2
900047c4:	440b      	add	r3, r1
900047c6:	334d      	adds	r3, #77	@ 0x4d
900047c8:	781b      	ldrb	r3, [r3, #0]
900047ca:	2b07      	cmp	r3, #7
900047cc:	d00b      	beq.n	900047e6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900047ce:	78fa      	ldrb	r2, [r7, #3]
900047d0:	6879      	ldr	r1, [r7, #4]
900047d2:	4613      	mov	r3, r2
900047d4:	011b      	lsls	r3, r3, #4
900047d6:	1a9b      	subs	r3, r3, r2
900047d8:	009b      	lsls	r3, r3, #2
900047da:	440b      	add	r3, r1
900047dc:	334d      	adds	r3, #77	@ 0x4d
900047de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900047e0:	2b09      	cmp	r3, #9
900047e2:	f040 80a6 	bne.w	90004932 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900047e6:	78fa      	ldrb	r2, [r7, #3]
900047e8:	6879      	ldr	r1, [r7, #4]
900047ea:	4613      	mov	r3, r2
900047ec:	011b      	lsls	r3, r3, #4
900047ee:	1a9b      	subs	r3, r3, r2
900047f0:	009b      	lsls	r3, r3, #2
900047f2:	440b      	add	r3, r1
900047f4:	334d      	adds	r3, #77	@ 0x4d
900047f6:	2202      	movs	r2, #2
900047f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900047fa:	78fa      	ldrb	r2, [r7, #3]
900047fc:	6879      	ldr	r1, [r7, #4]
900047fe:	4613      	mov	r3, r2
90004800:	011b      	lsls	r3, r3, #4
90004802:	1a9b      	subs	r3, r3, r2
90004804:	009b      	lsls	r3, r3, #2
90004806:	440b      	add	r3, r1
90004808:	3344      	adds	r3, #68	@ 0x44
9000480a:	681b      	ldr	r3, [r3, #0]
9000480c:	1c59      	adds	r1, r3, #1
9000480e:	6878      	ldr	r0, [r7, #4]
90004810:	4613      	mov	r3, r2
90004812:	011b      	lsls	r3, r3, #4
90004814:	1a9b      	subs	r3, r3, r2
90004816:	009b      	lsls	r3, r3, #2
90004818:	4403      	add	r3, r0
9000481a:	3344      	adds	r3, #68	@ 0x44
9000481c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000481e:	78fa      	ldrb	r2, [r7, #3]
90004820:	6879      	ldr	r1, [r7, #4]
90004822:	4613      	mov	r3, r2
90004824:	011b      	lsls	r3, r3, #4
90004826:	1a9b      	subs	r3, r3, r2
90004828:	009b      	lsls	r3, r3, #2
9000482a:	440b      	add	r3, r1
9000482c:	3344      	adds	r3, #68	@ 0x44
9000482e:	681b      	ldr	r3, [r3, #0]
90004830:	2b02      	cmp	r3, #2
90004832:	d943      	bls.n	900048bc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004834:	78fa      	ldrb	r2, [r7, #3]
90004836:	6879      	ldr	r1, [r7, #4]
90004838:	4613      	mov	r3, r2
9000483a:	011b      	lsls	r3, r3, #4
9000483c:	1a9b      	subs	r3, r3, r2
9000483e:	009b      	lsls	r3, r3, #2
90004840:	440b      	add	r3, r1
90004842:	3344      	adds	r3, #68	@ 0x44
90004844:	2200      	movs	r2, #0
90004846:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90004848:	78fa      	ldrb	r2, [r7, #3]
9000484a:	6879      	ldr	r1, [r7, #4]
9000484c:	4613      	mov	r3, r2
9000484e:	011b      	lsls	r3, r3, #4
90004850:	1a9b      	subs	r3, r3, r2
90004852:	009b      	lsls	r3, r3, #2
90004854:	440b      	add	r3, r1
90004856:	331a      	adds	r3, #26
90004858:	781b      	ldrb	r3, [r3, #0]
9000485a:	2b01      	cmp	r3, #1
9000485c:	d123      	bne.n	900048a6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
9000485e:	78fa      	ldrb	r2, [r7, #3]
90004860:	6879      	ldr	r1, [r7, #4]
90004862:	4613      	mov	r3, r2
90004864:	011b      	lsls	r3, r3, #4
90004866:	1a9b      	subs	r3, r3, r2
90004868:	009b      	lsls	r3, r3, #2
9000486a:	440b      	add	r3, r1
9000486c:	331b      	adds	r3, #27
9000486e:	2200      	movs	r2, #0
90004870:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
90004872:	78fa      	ldrb	r2, [r7, #3]
90004874:	6879      	ldr	r1, [r7, #4]
90004876:	4613      	mov	r3, r2
90004878:	011b      	lsls	r3, r3, #4
9000487a:	1a9b      	subs	r3, r3, r2
9000487c:	009b      	lsls	r3, r3, #2
9000487e:	440b      	add	r3, r1
90004880:	331c      	adds	r3, #28
90004882:	2200      	movs	r2, #0
90004884:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004886:	78fb      	ldrb	r3, [r7, #3]
90004888:	015a      	lsls	r2, r3, #5
9000488a:	693b      	ldr	r3, [r7, #16]
9000488c:	4413      	add	r3, r2
9000488e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004892:	685b      	ldr	r3, [r3, #4]
90004894:	78fa      	ldrb	r2, [r7, #3]
90004896:	0151      	lsls	r1, r2, #5
90004898:	693a      	ldr	r2, [r7, #16]
9000489a:	440a      	add	r2, r1
9000489c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900048a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900048a4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
900048a6:	78fa      	ldrb	r2, [r7, #3]
900048a8:	6879      	ldr	r1, [r7, #4]
900048aa:	4613      	mov	r3, r2
900048ac:	011b      	lsls	r3, r3, #4
900048ae:	1a9b      	subs	r3, r3, r2
900048b0:	009b      	lsls	r3, r3, #2
900048b2:	440b      	add	r3, r1
900048b4:	334c      	adds	r3, #76	@ 0x4c
900048b6:	2204      	movs	r2, #4
900048b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900048ba:	e229      	b.n	90004d10 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900048bc:	78fa      	ldrb	r2, [r7, #3]
900048be:	6879      	ldr	r1, [r7, #4]
900048c0:	4613      	mov	r3, r2
900048c2:	011b      	lsls	r3, r3, #4
900048c4:	1a9b      	subs	r3, r3, r2
900048c6:	009b      	lsls	r3, r3, #2
900048c8:	440b      	add	r3, r1
900048ca:	334c      	adds	r3, #76	@ 0x4c
900048cc:	2202      	movs	r2, #2
900048ce:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900048d0:	78fa      	ldrb	r2, [r7, #3]
900048d2:	6879      	ldr	r1, [r7, #4]
900048d4:	4613      	mov	r3, r2
900048d6:	011b      	lsls	r3, r3, #4
900048d8:	1a9b      	subs	r3, r3, r2
900048da:	009b      	lsls	r3, r3, #2
900048dc:	440b      	add	r3, r1
900048de:	3326      	adds	r3, #38	@ 0x26
900048e0:	781b      	ldrb	r3, [r3, #0]
900048e2:	2b00      	cmp	r3, #0
900048e4:	d00b      	beq.n	900048fe <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900048e6:	78fa      	ldrb	r2, [r7, #3]
900048e8:	6879      	ldr	r1, [r7, #4]
900048ea:	4613      	mov	r3, r2
900048ec:	011b      	lsls	r3, r3, #4
900048ee:	1a9b      	subs	r3, r3, r2
900048f0:	009b      	lsls	r3, r3, #2
900048f2:	440b      	add	r3, r1
900048f4:	3326      	adds	r3, #38	@ 0x26
900048f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900048f8:	2b02      	cmp	r3, #2
900048fa:	f040 8209 	bne.w	90004d10 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900048fe:	78fb      	ldrb	r3, [r7, #3]
90004900:	015a      	lsls	r2, r3, #5
90004902:	693b      	ldr	r3, [r7, #16]
90004904:	4413      	add	r3, r2
90004906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000490a:	681b      	ldr	r3, [r3, #0]
9000490c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000490e:	68fb      	ldr	r3, [r7, #12]
90004910:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004914:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004916:	68fb      	ldr	r3, [r7, #12]
90004918:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000491c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
9000491e:	78fb      	ldrb	r3, [r7, #3]
90004920:	015a      	lsls	r2, r3, #5
90004922:	693b      	ldr	r3, [r7, #16]
90004924:	4413      	add	r3, r2
90004926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000492a:	461a      	mov	r2, r3
9000492c:	68fb      	ldr	r3, [r7, #12]
9000492e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004930:	e1ee      	b.n	90004d10 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004932:	78fa      	ldrb	r2, [r7, #3]
90004934:	6879      	ldr	r1, [r7, #4]
90004936:	4613      	mov	r3, r2
90004938:	011b      	lsls	r3, r3, #4
9000493a:	1a9b      	subs	r3, r3, r2
9000493c:	009b      	lsls	r3, r3, #2
9000493e:	440b      	add	r3, r1
90004940:	334d      	adds	r3, #77	@ 0x4d
90004942:	781b      	ldrb	r3, [r3, #0]
90004944:	2b05      	cmp	r3, #5
90004946:	f040 80c8 	bne.w	90004ada <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000494a:	78fa      	ldrb	r2, [r7, #3]
9000494c:	6879      	ldr	r1, [r7, #4]
9000494e:	4613      	mov	r3, r2
90004950:	011b      	lsls	r3, r3, #4
90004952:	1a9b      	subs	r3, r3, r2
90004954:	009b      	lsls	r3, r3, #2
90004956:	440b      	add	r3, r1
90004958:	334d      	adds	r3, #77	@ 0x4d
9000495a:	2202      	movs	r2, #2
9000495c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000495e:	78fa      	ldrb	r2, [r7, #3]
90004960:	6879      	ldr	r1, [r7, #4]
90004962:	4613      	mov	r3, r2
90004964:	011b      	lsls	r3, r3, #4
90004966:	1a9b      	subs	r3, r3, r2
90004968:	009b      	lsls	r3, r3, #2
9000496a:	440b      	add	r3, r1
9000496c:	331b      	adds	r3, #27
9000496e:	781b      	ldrb	r3, [r3, #0]
90004970:	2b01      	cmp	r3, #1
90004972:	f040 81ce 	bne.w	90004d12 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004976:	78fa      	ldrb	r2, [r7, #3]
90004978:	6879      	ldr	r1, [r7, #4]
9000497a:	4613      	mov	r3, r2
9000497c:	011b      	lsls	r3, r3, #4
9000497e:	1a9b      	subs	r3, r3, r2
90004980:	009b      	lsls	r3, r3, #2
90004982:	440b      	add	r3, r1
90004984:	3326      	adds	r3, #38	@ 0x26
90004986:	781b      	ldrb	r3, [r3, #0]
90004988:	2b03      	cmp	r3, #3
9000498a:	d16b      	bne.n	90004a64 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
9000498c:	78fa      	ldrb	r2, [r7, #3]
9000498e:	6879      	ldr	r1, [r7, #4]
90004990:	4613      	mov	r3, r2
90004992:	011b      	lsls	r3, r3, #4
90004994:	1a9b      	subs	r3, r3, r2
90004996:	009b      	lsls	r3, r3, #2
90004998:	440b      	add	r3, r1
9000499a:	3348      	adds	r3, #72	@ 0x48
9000499c:	681b      	ldr	r3, [r3, #0]
9000499e:	1c59      	adds	r1, r3, #1
900049a0:	6878      	ldr	r0, [r7, #4]
900049a2:	4613      	mov	r3, r2
900049a4:	011b      	lsls	r3, r3, #4
900049a6:	1a9b      	subs	r3, r3, r2
900049a8:	009b      	lsls	r3, r3, #2
900049aa:	4403      	add	r3, r0
900049ac:	3348      	adds	r3, #72	@ 0x48
900049ae:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
900049b0:	78fa      	ldrb	r2, [r7, #3]
900049b2:	6879      	ldr	r1, [r7, #4]
900049b4:	4613      	mov	r3, r2
900049b6:	011b      	lsls	r3, r3, #4
900049b8:	1a9b      	subs	r3, r3, r2
900049ba:	009b      	lsls	r3, r3, #2
900049bc:	440b      	add	r3, r1
900049be:	3348      	adds	r3, #72	@ 0x48
900049c0:	681b      	ldr	r3, [r3, #0]
900049c2:	2b02      	cmp	r3, #2
900049c4:	d943      	bls.n	90004a4e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
900049c6:	78fa      	ldrb	r2, [r7, #3]
900049c8:	6879      	ldr	r1, [r7, #4]
900049ca:	4613      	mov	r3, r2
900049cc:	011b      	lsls	r3, r3, #4
900049ce:	1a9b      	subs	r3, r3, r2
900049d0:	009b      	lsls	r3, r3, #2
900049d2:	440b      	add	r3, r1
900049d4:	3348      	adds	r3, #72	@ 0x48
900049d6:	2200      	movs	r2, #0
900049d8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
900049da:	78fa      	ldrb	r2, [r7, #3]
900049dc:	6879      	ldr	r1, [r7, #4]
900049de:	4613      	mov	r3, r2
900049e0:	011b      	lsls	r3, r3, #4
900049e2:	1a9b      	subs	r3, r3, r2
900049e4:	009b      	lsls	r3, r3, #2
900049e6:	440b      	add	r3, r1
900049e8:	331b      	adds	r3, #27
900049ea:	2200      	movs	r2, #0
900049ec:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
900049ee:	78fa      	ldrb	r2, [r7, #3]
900049f0:	6879      	ldr	r1, [r7, #4]
900049f2:	4613      	mov	r3, r2
900049f4:	011b      	lsls	r3, r3, #4
900049f6:	1a9b      	subs	r3, r3, r2
900049f8:	009b      	lsls	r3, r3, #2
900049fa:	440b      	add	r3, r1
900049fc:	3344      	adds	r3, #68	@ 0x44
900049fe:	681b      	ldr	r3, [r3, #0]
90004a00:	2b02      	cmp	r3, #2
90004a02:	d809      	bhi.n	90004a18 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004a04:	78fa      	ldrb	r2, [r7, #3]
90004a06:	6879      	ldr	r1, [r7, #4]
90004a08:	4613      	mov	r3, r2
90004a0a:	011b      	lsls	r3, r3, #4
90004a0c:	1a9b      	subs	r3, r3, r2
90004a0e:	009b      	lsls	r3, r3, #2
90004a10:	440b      	add	r3, r1
90004a12:	331c      	adds	r3, #28
90004a14:	2201      	movs	r2, #1
90004a16:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004a18:	78fb      	ldrb	r3, [r7, #3]
90004a1a:	015a      	lsls	r2, r3, #5
90004a1c:	693b      	ldr	r3, [r7, #16]
90004a1e:	4413      	add	r3, r2
90004a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a24:	685b      	ldr	r3, [r3, #4]
90004a26:	78fa      	ldrb	r2, [r7, #3]
90004a28:	0151      	lsls	r1, r2, #5
90004a2a:	693a      	ldr	r2, [r7, #16]
90004a2c:	440a      	add	r2, r1
90004a2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004a36:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004a38:	78fa      	ldrb	r2, [r7, #3]
90004a3a:	6879      	ldr	r1, [r7, #4]
90004a3c:	4613      	mov	r3, r2
90004a3e:	011b      	lsls	r3, r3, #4
90004a40:	1a9b      	subs	r3, r3, r2
90004a42:	009b      	lsls	r3, r3, #2
90004a44:	440b      	add	r3, r1
90004a46:	334c      	adds	r3, #76	@ 0x4c
90004a48:	2204      	movs	r2, #4
90004a4a:	701a      	strb	r2, [r3, #0]
90004a4c:	e014      	b.n	90004a78 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a4e:	78fa      	ldrb	r2, [r7, #3]
90004a50:	6879      	ldr	r1, [r7, #4]
90004a52:	4613      	mov	r3, r2
90004a54:	011b      	lsls	r3, r3, #4
90004a56:	1a9b      	subs	r3, r3, r2
90004a58:	009b      	lsls	r3, r3, #2
90004a5a:	440b      	add	r3, r1
90004a5c:	334c      	adds	r3, #76	@ 0x4c
90004a5e:	2202      	movs	r2, #2
90004a60:	701a      	strb	r2, [r3, #0]
90004a62:	e009      	b.n	90004a78 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a64:	78fa      	ldrb	r2, [r7, #3]
90004a66:	6879      	ldr	r1, [r7, #4]
90004a68:	4613      	mov	r3, r2
90004a6a:	011b      	lsls	r3, r3, #4
90004a6c:	1a9b      	subs	r3, r3, r2
90004a6e:	009b      	lsls	r3, r3, #2
90004a70:	440b      	add	r3, r1
90004a72:	334c      	adds	r3, #76	@ 0x4c
90004a74:	2202      	movs	r2, #2
90004a76:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a78:	78fa      	ldrb	r2, [r7, #3]
90004a7a:	6879      	ldr	r1, [r7, #4]
90004a7c:	4613      	mov	r3, r2
90004a7e:	011b      	lsls	r3, r3, #4
90004a80:	1a9b      	subs	r3, r3, r2
90004a82:	009b      	lsls	r3, r3, #2
90004a84:	440b      	add	r3, r1
90004a86:	3326      	adds	r3, #38	@ 0x26
90004a88:	781b      	ldrb	r3, [r3, #0]
90004a8a:	2b00      	cmp	r3, #0
90004a8c:	d00b      	beq.n	90004aa6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004a8e:	78fa      	ldrb	r2, [r7, #3]
90004a90:	6879      	ldr	r1, [r7, #4]
90004a92:	4613      	mov	r3, r2
90004a94:	011b      	lsls	r3, r3, #4
90004a96:	1a9b      	subs	r3, r3, r2
90004a98:	009b      	lsls	r3, r3, #2
90004a9a:	440b      	add	r3, r1
90004a9c:	3326      	adds	r3, #38	@ 0x26
90004a9e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004aa0:	2b02      	cmp	r3, #2
90004aa2:	f040 8136 	bne.w	90004d12 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004aa6:	78fb      	ldrb	r3, [r7, #3]
90004aa8:	015a      	lsls	r2, r3, #5
90004aaa:	693b      	ldr	r3, [r7, #16]
90004aac:	4413      	add	r3, r2
90004aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ab2:	681b      	ldr	r3, [r3, #0]
90004ab4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004ab6:	68fb      	ldr	r3, [r7, #12]
90004ab8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004abc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004abe:	68fb      	ldr	r3, [r7, #12]
90004ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004ac4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004ac6:	78fb      	ldrb	r3, [r7, #3]
90004ac8:	015a      	lsls	r2, r3, #5
90004aca:	693b      	ldr	r3, [r7, #16]
90004acc:	4413      	add	r3, r2
90004ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ad2:	461a      	mov	r2, r3
90004ad4:	68fb      	ldr	r3, [r7, #12]
90004ad6:	6013      	str	r3, [r2, #0]
90004ad8:	e11b      	b.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004ada:	78fa      	ldrb	r2, [r7, #3]
90004adc:	6879      	ldr	r1, [r7, #4]
90004ade:	4613      	mov	r3, r2
90004ae0:	011b      	lsls	r3, r3, #4
90004ae2:	1a9b      	subs	r3, r3, r2
90004ae4:	009b      	lsls	r3, r3, #2
90004ae6:	440b      	add	r3, r1
90004ae8:	334d      	adds	r3, #77	@ 0x4d
90004aea:	781b      	ldrb	r3, [r3, #0]
90004aec:	2b03      	cmp	r3, #3
90004aee:	f040 8081 	bne.w	90004bf4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004af2:	78fa      	ldrb	r2, [r7, #3]
90004af4:	6879      	ldr	r1, [r7, #4]
90004af6:	4613      	mov	r3, r2
90004af8:	011b      	lsls	r3, r3, #4
90004afa:	1a9b      	subs	r3, r3, r2
90004afc:	009b      	lsls	r3, r3, #2
90004afe:	440b      	add	r3, r1
90004b00:	334d      	adds	r3, #77	@ 0x4d
90004b02:	2202      	movs	r2, #2
90004b04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004b06:	78fa      	ldrb	r2, [r7, #3]
90004b08:	6879      	ldr	r1, [r7, #4]
90004b0a:	4613      	mov	r3, r2
90004b0c:	011b      	lsls	r3, r3, #4
90004b0e:	1a9b      	subs	r3, r3, r2
90004b10:	009b      	lsls	r3, r3, #2
90004b12:	440b      	add	r3, r1
90004b14:	331b      	adds	r3, #27
90004b16:	781b      	ldrb	r3, [r3, #0]
90004b18:	2b01      	cmp	r3, #1
90004b1a:	f040 80fa 	bne.w	90004d12 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b1e:	78fa      	ldrb	r2, [r7, #3]
90004b20:	6879      	ldr	r1, [r7, #4]
90004b22:	4613      	mov	r3, r2
90004b24:	011b      	lsls	r3, r3, #4
90004b26:	1a9b      	subs	r3, r3, r2
90004b28:	009b      	lsls	r3, r3, #2
90004b2a:	440b      	add	r3, r1
90004b2c:	334c      	adds	r3, #76	@ 0x4c
90004b2e:	2202      	movs	r2, #2
90004b30:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004b32:	78fb      	ldrb	r3, [r7, #3]
90004b34:	015a      	lsls	r2, r3, #5
90004b36:	693b      	ldr	r3, [r7, #16]
90004b38:	4413      	add	r3, r2
90004b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b3e:	685b      	ldr	r3, [r3, #4]
90004b40:	78fa      	ldrb	r2, [r7, #3]
90004b42:	0151      	lsls	r1, r2, #5
90004b44:	693a      	ldr	r2, [r7, #16]
90004b46:	440a      	add	r2, r1
90004b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004b50:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004b52:	78fb      	ldrb	r3, [r7, #3]
90004b54:	015a      	lsls	r2, r3, #5
90004b56:	693b      	ldr	r3, [r7, #16]
90004b58:	4413      	add	r3, r2
90004b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b5e:	68db      	ldr	r3, [r3, #12]
90004b60:	78fa      	ldrb	r2, [r7, #3]
90004b62:	0151      	lsls	r1, r2, #5
90004b64:	693a      	ldr	r2, [r7, #16]
90004b66:	440a      	add	r2, r1
90004b68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004b70:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004b72:	78fb      	ldrb	r3, [r7, #3]
90004b74:	015a      	lsls	r2, r3, #5
90004b76:	693b      	ldr	r3, [r7, #16]
90004b78:	4413      	add	r3, r2
90004b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b7e:	68db      	ldr	r3, [r3, #12]
90004b80:	78fa      	ldrb	r2, [r7, #3]
90004b82:	0151      	lsls	r1, r2, #5
90004b84:	693a      	ldr	r2, [r7, #16]
90004b86:	440a      	add	r2, r1
90004b88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b8c:	f023 0320 	bic.w	r3, r3, #32
90004b90:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b92:	78fa      	ldrb	r2, [r7, #3]
90004b94:	6879      	ldr	r1, [r7, #4]
90004b96:	4613      	mov	r3, r2
90004b98:	011b      	lsls	r3, r3, #4
90004b9a:	1a9b      	subs	r3, r3, r2
90004b9c:	009b      	lsls	r3, r3, #2
90004b9e:	440b      	add	r3, r1
90004ba0:	3326      	adds	r3, #38	@ 0x26
90004ba2:	781b      	ldrb	r3, [r3, #0]
90004ba4:	2b00      	cmp	r3, #0
90004ba6:	d00b      	beq.n	90004bc0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ba8:	78fa      	ldrb	r2, [r7, #3]
90004baa:	6879      	ldr	r1, [r7, #4]
90004bac:	4613      	mov	r3, r2
90004bae:	011b      	lsls	r3, r3, #4
90004bb0:	1a9b      	subs	r3, r3, r2
90004bb2:	009b      	lsls	r3, r3, #2
90004bb4:	440b      	add	r3, r1
90004bb6:	3326      	adds	r3, #38	@ 0x26
90004bb8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bba:	2b02      	cmp	r3, #2
90004bbc:	f040 80a9 	bne.w	90004d12 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004bc0:	78fb      	ldrb	r3, [r7, #3]
90004bc2:	015a      	lsls	r2, r3, #5
90004bc4:	693b      	ldr	r3, [r7, #16]
90004bc6:	4413      	add	r3, r2
90004bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004bcc:	681b      	ldr	r3, [r3, #0]
90004bce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004bd0:	68fb      	ldr	r3, [r7, #12]
90004bd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004bd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004bd8:	68fb      	ldr	r3, [r7, #12]
90004bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004bde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004be0:	78fb      	ldrb	r3, [r7, #3]
90004be2:	015a      	lsls	r2, r3, #5
90004be4:	693b      	ldr	r3, [r7, #16]
90004be6:	4413      	add	r3, r2
90004be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004bec:	461a      	mov	r2, r3
90004bee:	68fb      	ldr	r3, [r7, #12]
90004bf0:	6013      	str	r3, [r2, #0]
90004bf2:	e08e      	b.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004bf4:	78fa      	ldrb	r2, [r7, #3]
90004bf6:	6879      	ldr	r1, [r7, #4]
90004bf8:	4613      	mov	r3, r2
90004bfa:	011b      	lsls	r3, r3, #4
90004bfc:	1a9b      	subs	r3, r3, r2
90004bfe:	009b      	lsls	r3, r3, #2
90004c00:	440b      	add	r3, r1
90004c02:	334d      	adds	r3, #77	@ 0x4d
90004c04:	781b      	ldrb	r3, [r3, #0]
90004c06:	2b04      	cmp	r3, #4
90004c08:	d143      	bne.n	90004c92 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004c0a:	78fa      	ldrb	r2, [r7, #3]
90004c0c:	6879      	ldr	r1, [r7, #4]
90004c0e:	4613      	mov	r3, r2
90004c10:	011b      	lsls	r3, r3, #4
90004c12:	1a9b      	subs	r3, r3, r2
90004c14:	009b      	lsls	r3, r3, #2
90004c16:	440b      	add	r3, r1
90004c18:	334d      	adds	r3, #77	@ 0x4d
90004c1a:	2202      	movs	r2, #2
90004c1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004c1e:	78fa      	ldrb	r2, [r7, #3]
90004c20:	6879      	ldr	r1, [r7, #4]
90004c22:	4613      	mov	r3, r2
90004c24:	011b      	lsls	r3, r3, #4
90004c26:	1a9b      	subs	r3, r3, r2
90004c28:	009b      	lsls	r3, r3, #2
90004c2a:	440b      	add	r3, r1
90004c2c:	334c      	adds	r3, #76	@ 0x4c
90004c2e:	2202      	movs	r2, #2
90004c30:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c32:	78fa      	ldrb	r2, [r7, #3]
90004c34:	6879      	ldr	r1, [r7, #4]
90004c36:	4613      	mov	r3, r2
90004c38:	011b      	lsls	r3, r3, #4
90004c3a:	1a9b      	subs	r3, r3, r2
90004c3c:	009b      	lsls	r3, r3, #2
90004c3e:	440b      	add	r3, r1
90004c40:	3326      	adds	r3, #38	@ 0x26
90004c42:	781b      	ldrb	r3, [r3, #0]
90004c44:	2b00      	cmp	r3, #0
90004c46:	d00a      	beq.n	90004c5e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004c48:	78fa      	ldrb	r2, [r7, #3]
90004c4a:	6879      	ldr	r1, [r7, #4]
90004c4c:	4613      	mov	r3, r2
90004c4e:	011b      	lsls	r3, r3, #4
90004c50:	1a9b      	subs	r3, r3, r2
90004c52:	009b      	lsls	r3, r3, #2
90004c54:	440b      	add	r3, r1
90004c56:	3326      	adds	r3, #38	@ 0x26
90004c58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c5a:	2b02      	cmp	r3, #2
90004c5c:	d159      	bne.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004c5e:	78fb      	ldrb	r3, [r7, #3]
90004c60:	015a      	lsls	r2, r3, #5
90004c62:	693b      	ldr	r3, [r7, #16]
90004c64:	4413      	add	r3, r2
90004c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c6a:	681b      	ldr	r3, [r3, #0]
90004c6c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004c6e:	68fb      	ldr	r3, [r7, #12]
90004c70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004c74:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004c76:	68fb      	ldr	r3, [r7, #12]
90004c78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004c7c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004c7e:	78fb      	ldrb	r3, [r7, #3]
90004c80:	015a      	lsls	r2, r3, #5
90004c82:	693b      	ldr	r3, [r7, #16]
90004c84:	4413      	add	r3, r2
90004c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c8a:	461a      	mov	r2, r3
90004c8c:	68fb      	ldr	r3, [r7, #12]
90004c8e:	6013      	str	r3, [r2, #0]
90004c90:	e03f      	b.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004c92:	78fa      	ldrb	r2, [r7, #3]
90004c94:	6879      	ldr	r1, [r7, #4]
90004c96:	4613      	mov	r3, r2
90004c98:	011b      	lsls	r3, r3, #4
90004c9a:	1a9b      	subs	r3, r3, r2
90004c9c:	009b      	lsls	r3, r3, #2
90004c9e:	440b      	add	r3, r1
90004ca0:	334d      	adds	r3, #77	@ 0x4d
90004ca2:	781b      	ldrb	r3, [r3, #0]
90004ca4:	2b08      	cmp	r3, #8
90004ca6:	d126      	bne.n	90004cf6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004ca8:	78fa      	ldrb	r2, [r7, #3]
90004caa:	6879      	ldr	r1, [r7, #4]
90004cac:	4613      	mov	r3, r2
90004cae:	011b      	lsls	r3, r3, #4
90004cb0:	1a9b      	subs	r3, r3, r2
90004cb2:	009b      	lsls	r3, r3, #2
90004cb4:	440b      	add	r3, r1
90004cb6:	334d      	adds	r3, #77	@ 0x4d
90004cb8:	2202      	movs	r2, #2
90004cba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004cbc:	78fa      	ldrb	r2, [r7, #3]
90004cbe:	6879      	ldr	r1, [r7, #4]
90004cc0:	4613      	mov	r3, r2
90004cc2:	011b      	lsls	r3, r3, #4
90004cc4:	1a9b      	subs	r3, r3, r2
90004cc6:	009b      	lsls	r3, r3, #2
90004cc8:	440b      	add	r3, r1
90004cca:	3344      	adds	r3, #68	@ 0x44
90004ccc:	681b      	ldr	r3, [r3, #0]
90004cce:	1c59      	adds	r1, r3, #1
90004cd0:	6878      	ldr	r0, [r7, #4]
90004cd2:	4613      	mov	r3, r2
90004cd4:	011b      	lsls	r3, r3, #4
90004cd6:	1a9b      	subs	r3, r3, r2
90004cd8:	009b      	lsls	r3, r3, #2
90004cda:	4403      	add	r3, r0
90004cdc:	3344      	adds	r3, #68	@ 0x44
90004cde:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004ce0:	78fa      	ldrb	r2, [r7, #3]
90004ce2:	6879      	ldr	r1, [r7, #4]
90004ce4:	4613      	mov	r3, r2
90004ce6:	011b      	lsls	r3, r3, #4
90004ce8:	1a9b      	subs	r3, r3, r2
90004cea:	009b      	lsls	r3, r3, #2
90004cec:	440b      	add	r3, r1
90004cee:	334c      	adds	r3, #76	@ 0x4c
90004cf0:	2204      	movs	r2, #4
90004cf2:	701a      	strb	r2, [r3, #0]
90004cf4:	e00d      	b.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004cf6:	78fa      	ldrb	r2, [r7, #3]
90004cf8:	6879      	ldr	r1, [r7, #4]
90004cfa:	4613      	mov	r3, r2
90004cfc:	011b      	lsls	r3, r3, #4
90004cfe:	1a9b      	subs	r3, r3, r2
90004d00:	009b      	lsls	r3, r3, #2
90004d02:	440b      	add	r3, r1
90004d04:	334d      	adds	r3, #77	@ 0x4d
90004d06:	781b      	ldrb	r3, [r3, #0]
90004d08:	2b02      	cmp	r3, #2
90004d0a:	f000 8100 	beq.w	90004f0e <HCD_HC_IN_IRQHandler+0xcca>
90004d0e:	e000      	b.n	90004d12 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004d10:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004d12:	78fa      	ldrb	r2, [r7, #3]
90004d14:	6879      	ldr	r1, [r7, #4]
90004d16:	4613      	mov	r3, r2
90004d18:	011b      	lsls	r3, r3, #4
90004d1a:	1a9b      	subs	r3, r3, r2
90004d1c:	009b      	lsls	r3, r3, #2
90004d1e:	440b      	add	r3, r1
90004d20:	334c      	adds	r3, #76	@ 0x4c
90004d22:	781a      	ldrb	r2, [r3, #0]
90004d24:	78fb      	ldrb	r3, [r7, #3]
90004d26:	4619      	mov	r1, r3
90004d28:	6878      	ldr	r0, [r7, #4]
90004d2a:	f7fc fa5f 	bl	900011ec <HAL_HCD_HC_NotifyURBChange_Callback>
90004d2e:	e0ef      	b.n	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004d30:	687b      	ldr	r3, [r7, #4]
90004d32:	681b      	ldr	r3, [r3, #0]
90004d34:	78fa      	ldrb	r2, [r7, #3]
90004d36:	4611      	mov	r1, r2
90004d38:	4618      	mov	r0, r3
90004d3a:	f006 fae8 	bl	9000b30e <USB_ReadChInterrupts>
90004d3e:	4603      	mov	r3, r0
90004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004d44:	2b40      	cmp	r3, #64	@ 0x40
90004d46:	d12f      	bne.n	90004da8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004d48:	78fb      	ldrb	r3, [r7, #3]
90004d4a:	015a      	lsls	r2, r3, #5
90004d4c:	693b      	ldr	r3, [r7, #16]
90004d4e:	4413      	add	r3, r2
90004d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d54:	461a      	mov	r2, r3
90004d56:	2340      	movs	r3, #64	@ 0x40
90004d58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004d5a:	78fa      	ldrb	r2, [r7, #3]
90004d5c:	6879      	ldr	r1, [r7, #4]
90004d5e:	4613      	mov	r3, r2
90004d60:	011b      	lsls	r3, r3, #4
90004d62:	1a9b      	subs	r3, r3, r2
90004d64:	009b      	lsls	r3, r3, #2
90004d66:	440b      	add	r3, r1
90004d68:	334d      	adds	r3, #77	@ 0x4d
90004d6a:	2205      	movs	r2, #5
90004d6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004d6e:	78fa      	ldrb	r2, [r7, #3]
90004d70:	6879      	ldr	r1, [r7, #4]
90004d72:	4613      	mov	r3, r2
90004d74:	011b      	lsls	r3, r3, #4
90004d76:	1a9b      	subs	r3, r3, r2
90004d78:	009b      	lsls	r3, r3, #2
90004d7a:	440b      	add	r3, r1
90004d7c:	331a      	adds	r3, #26
90004d7e:	781b      	ldrb	r3, [r3, #0]
90004d80:	2b00      	cmp	r3, #0
90004d82:	d109      	bne.n	90004d98 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d84:	78fa      	ldrb	r2, [r7, #3]
90004d86:	6879      	ldr	r1, [r7, #4]
90004d88:	4613      	mov	r3, r2
90004d8a:	011b      	lsls	r3, r3, #4
90004d8c:	1a9b      	subs	r3, r3, r2
90004d8e:	009b      	lsls	r3, r3, #2
90004d90:	440b      	add	r3, r1
90004d92:	3344      	adds	r3, #68	@ 0x44
90004d94:	2200      	movs	r2, #0
90004d96:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d98:	687b      	ldr	r3, [r7, #4]
90004d9a:	681b      	ldr	r3, [r3, #0]
90004d9c:	78fa      	ldrb	r2, [r7, #3]
90004d9e:	4611      	mov	r1, r2
90004da0:	4618      	mov	r0, r3
90004da2:	f006 fb31 	bl	9000b408 <USB_HC_Halt>
90004da6:	e0b3      	b.n	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004da8:	687b      	ldr	r3, [r7, #4]
90004daa:	681b      	ldr	r3, [r3, #0]
90004dac:	78fa      	ldrb	r2, [r7, #3]
90004dae:	4611      	mov	r1, r2
90004db0:	4618      	mov	r0, r3
90004db2:	f006 faac 	bl	9000b30e <USB_ReadChInterrupts>
90004db6:	4603      	mov	r3, r0
90004db8:	f003 0310 	and.w	r3, r3, #16
90004dbc:	2b10      	cmp	r3, #16
90004dbe:	f040 80a7 	bne.w	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004dc2:	78fa      	ldrb	r2, [r7, #3]
90004dc4:	6879      	ldr	r1, [r7, #4]
90004dc6:	4613      	mov	r3, r2
90004dc8:	011b      	lsls	r3, r3, #4
90004dca:	1a9b      	subs	r3, r3, r2
90004dcc:	009b      	lsls	r3, r3, #2
90004dce:	440b      	add	r3, r1
90004dd0:	3326      	adds	r3, #38	@ 0x26
90004dd2:	781b      	ldrb	r3, [r3, #0]
90004dd4:	2b03      	cmp	r3, #3
90004dd6:	d11b      	bne.n	90004e10 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004dd8:	78fa      	ldrb	r2, [r7, #3]
90004dda:	6879      	ldr	r1, [r7, #4]
90004ddc:	4613      	mov	r3, r2
90004dde:	011b      	lsls	r3, r3, #4
90004de0:	1a9b      	subs	r3, r3, r2
90004de2:	009b      	lsls	r3, r3, #2
90004de4:	440b      	add	r3, r1
90004de6:	3344      	adds	r3, #68	@ 0x44
90004de8:	2200      	movs	r2, #0
90004dea:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004dec:	78fa      	ldrb	r2, [r7, #3]
90004dee:	6879      	ldr	r1, [r7, #4]
90004df0:	4613      	mov	r3, r2
90004df2:	011b      	lsls	r3, r3, #4
90004df4:	1a9b      	subs	r3, r3, r2
90004df6:	009b      	lsls	r3, r3, #2
90004df8:	440b      	add	r3, r1
90004dfa:	334d      	adds	r3, #77	@ 0x4d
90004dfc:	2204      	movs	r2, #4
90004dfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e00:	687b      	ldr	r3, [r7, #4]
90004e02:	681b      	ldr	r3, [r3, #0]
90004e04:	78fa      	ldrb	r2, [r7, #3]
90004e06:	4611      	mov	r1, r2
90004e08:	4618      	mov	r0, r3
90004e0a:	f006 fafd 	bl	9000b408 <USB_HC_Halt>
90004e0e:	e03f      	b.n	90004e90 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e10:	78fa      	ldrb	r2, [r7, #3]
90004e12:	6879      	ldr	r1, [r7, #4]
90004e14:	4613      	mov	r3, r2
90004e16:	011b      	lsls	r3, r3, #4
90004e18:	1a9b      	subs	r3, r3, r2
90004e1a:	009b      	lsls	r3, r3, #2
90004e1c:	440b      	add	r3, r1
90004e1e:	3326      	adds	r3, #38	@ 0x26
90004e20:	781b      	ldrb	r3, [r3, #0]
90004e22:	2b00      	cmp	r3, #0
90004e24:	d00a      	beq.n	90004e3c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004e26:	78fa      	ldrb	r2, [r7, #3]
90004e28:	6879      	ldr	r1, [r7, #4]
90004e2a:	4613      	mov	r3, r2
90004e2c:	011b      	lsls	r3, r3, #4
90004e2e:	1a9b      	subs	r3, r3, r2
90004e30:	009b      	lsls	r3, r3, #2
90004e32:	440b      	add	r3, r1
90004e34:	3326      	adds	r3, #38	@ 0x26
90004e36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e38:	2b02      	cmp	r3, #2
90004e3a:	d129      	bne.n	90004e90 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004e3c:	78fa      	ldrb	r2, [r7, #3]
90004e3e:	6879      	ldr	r1, [r7, #4]
90004e40:	4613      	mov	r3, r2
90004e42:	011b      	lsls	r3, r3, #4
90004e44:	1a9b      	subs	r3, r3, r2
90004e46:	009b      	lsls	r3, r3, #2
90004e48:	440b      	add	r3, r1
90004e4a:	3344      	adds	r3, #68	@ 0x44
90004e4c:	2200      	movs	r2, #0
90004e4e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004e50:	687b      	ldr	r3, [r7, #4]
90004e52:	799b      	ldrb	r3, [r3, #6]
90004e54:	2b00      	cmp	r3, #0
90004e56:	d00a      	beq.n	90004e6e <HCD_HC_IN_IRQHandler+0xc2a>
90004e58:	78fa      	ldrb	r2, [r7, #3]
90004e5a:	6879      	ldr	r1, [r7, #4]
90004e5c:	4613      	mov	r3, r2
90004e5e:	011b      	lsls	r3, r3, #4
90004e60:	1a9b      	subs	r3, r3, r2
90004e62:	009b      	lsls	r3, r3, #2
90004e64:	440b      	add	r3, r1
90004e66:	331b      	adds	r3, #27
90004e68:	781b      	ldrb	r3, [r3, #0]
90004e6a:	2b01      	cmp	r3, #1
90004e6c:	d110      	bne.n	90004e90 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004e6e:	78fa      	ldrb	r2, [r7, #3]
90004e70:	6879      	ldr	r1, [r7, #4]
90004e72:	4613      	mov	r3, r2
90004e74:	011b      	lsls	r3, r3, #4
90004e76:	1a9b      	subs	r3, r3, r2
90004e78:	009b      	lsls	r3, r3, #2
90004e7a:	440b      	add	r3, r1
90004e7c:	334d      	adds	r3, #77	@ 0x4d
90004e7e:	2204      	movs	r2, #4
90004e80:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e82:	687b      	ldr	r3, [r7, #4]
90004e84:	681b      	ldr	r3, [r3, #0]
90004e86:	78fa      	ldrb	r2, [r7, #3]
90004e88:	4611      	mov	r1, r2
90004e8a:	4618      	mov	r0, r3
90004e8c:	f006 fabc 	bl	9000b408 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004e90:	78fa      	ldrb	r2, [r7, #3]
90004e92:	6879      	ldr	r1, [r7, #4]
90004e94:	4613      	mov	r3, r2
90004e96:	011b      	lsls	r3, r3, #4
90004e98:	1a9b      	subs	r3, r3, r2
90004e9a:	009b      	lsls	r3, r3, #2
90004e9c:	440b      	add	r3, r1
90004e9e:	331b      	adds	r3, #27
90004ea0:	781b      	ldrb	r3, [r3, #0]
90004ea2:	2b01      	cmp	r3, #1
90004ea4:	d129      	bne.n	90004efa <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004ea6:	78fa      	ldrb	r2, [r7, #3]
90004ea8:	6879      	ldr	r1, [r7, #4]
90004eaa:	4613      	mov	r3, r2
90004eac:	011b      	lsls	r3, r3, #4
90004eae:	1a9b      	subs	r3, r3, r2
90004eb0:	009b      	lsls	r3, r3, #2
90004eb2:	440b      	add	r3, r1
90004eb4:	331b      	adds	r3, #27
90004eb6:	2200      	movs	r2, #0
90004eb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004eba:	78fb      	ldrb	r3, [r7, #3]
90004ebc:	015a      	lsls	r2, r3, #5
90004ebe:	693b      	ldr	r3, [r7, #16]
90004ec0:	4413      	add	r3, r2
90004ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ec6:	685b      	ldr	r3, [r3, #4]
90004ec8:	78fa      	ldrb	r2, [r7, #3]
90004eca:	0151      	lsls	r1, r2, #5
90004ecc:	693a      	ldr	r2, [r7, #16]
90004ece:	440a      	add	r2, r1
90004ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004ed8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004eda:	78fb      	ldrb	r3, [r7, #3]
90004edc:	015a      	lsls	r2, r3, #5
90004ede:	693b      	ldr	r3, [r7, #16]
90004ee0:	4413      	add	r3, r2
90004ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ee6:	68db      	ldr	r3, [r3, #12]
90004ee8:	78fa      	ldrb	r2, [r7, #3]
90004eea:	0151      	lsls	r1, r2, #5
90004eec:	693a      	ldr	r2, [r7, #16]
90004eee:	440a      	add	r2, r1
90004ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ef4:	f043 0320 	orr.w	r3, r3, #32
90004ef8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004efa:	78fb      	ldrb	r3, [r7, #3]
90004efc:	015a      	lsls	r2, r3, #5
90004efe:	693b      	ldr	r3, [r7, #16]
90004f00:	4413      	add	r3, r2
90004f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f06:	461a      	mov	r2, r3
90004f08:	2310      	movs	r3, #16
90004f0a:	6093      	str	r3, [r2, #8]
90004f0c:	e000      	b.n	90004f10 <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004f0e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004f10:	3718      	adds	r7, #24
90004f12:	46bd      	mov	sp, r7
90004f14:	bd80      	pop	{r7, pc}

90004f16 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004f16:	b580      	push	{r7, lr}
90004f18:	b086      	sub	sp, #24
90004f1a:	af00      	add	r7, sp, #0
90004f1c:	6078      	str	r0, [r7, #4]
90004f1e:	460b      	mov	r3, r1
90004f20:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004f22:	687b      	ldr	r3, [r7, #4]
90004f24:	681b      	ldr	r3, [r3, #0]
90004f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004f28:	697b      	ldr	r3, [r7, #20]
90004f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004f2c:	687b      	ldr	r3, [r7, #4]
90004f2e:	681b      	ldr	r3, [r3, #0]
90004f30:	78fa      	ldrb	r2, [r7, #3]
90004f32:	4611      	mov	r1, r2
90004f34:	4618      	mov	r0, r3
90004f36:	f006 f9ea 	bl	9000b30e <USB_ReadChInterrupts>
90004f3a:	4603      	mov	r3, r0
90004f3c:	f003 0304 	and.w	r3, r3, #4
90004f40:	2b04      	cmp	r3, #4
90004f42:	d11b      	bne.n	90004f7c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004f44:	78fb      	ldrb	r3, [r7, #3]
90004f46:	015a      	lsls	r2, r3, #5
90004f48:	693b      	ldr	r3, [r7, #16]
90004f4a:	4413      	add	r3, r2
90004f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f50:	461a      	mov	r2, r3
90004f52:	2304      	movs	r3, #4
90004f54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004f56:	78fa      	ldrb	r2, [r7, #3]
90004f58:	6879      	ldr	r1, [r7, #4]
90004f5a:	4613      	mov	r3, r2
90004f5c:	011b      	lsls	r3, r3, #4
90004f5e:	1a9b      	subs	r3, r3, r2
90004f60:	009b      	lsls	r3, r3, #2
90004f62:	440b      	add	r3, r1
90004f64:	334d      	adds	r3, #77	@ 0x4d
90004f66:	2207      	movs	r2, #7
90004f68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f6a:	687b      	ldr	r3, [r7, #4]
90004f6c:	681b      	ldr	r3, [r3, #0]
90004f6e:	78fa      	ldrb	r2, [r7, #3]
90004f70:	4611      	mov	r1, r2
90004f72:	4618      	mov	r0, r3
90004f74:	f006 fa48 	bl	9000b408 <USB_HC_Halt>
90004f78:	f000 bc89 	b.w	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004f7c:	687b      	ldr	r3, [r7, #4]
90004f7e:	681b      	ldr	r3, [r3, #0]
90004f80:	78fa      	ldrb	r2, [r7, #3]
90004f82:	4611      	mov	r1, r2
90004f84:	4618      	mov	r0, r3
90004f86:	f006 f9c2 	bl	9000b30e <USB_ReadChInterrupts>
90004f8a:	4603      	mov	r3, r0
90004f8c:	f003 0320 	and.w	r3, r3, #32
90004f90:	2b20      	cmp	r3, #32
90004f92:	f040 8082 	bne.w	9000509a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004f96:	78fb      	ldrb	r3, [r7, #3]
90004f98:	015a      	lsls	r2, r3, #5
90004f9a:	693b      	ldr	r3, [r7, #16]
90004f9c:	4413      	add	r3, r2
90004f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fa2:	461a      	mov	r2, r3
90004fa4:	2320      	movs	r3, #32
90004fa6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004fa8:	78fa      	ldrb	r2, [r7, #3]
90004faa:	6879      	ldr	r1, [r7, #4]
90004fac:	4613      	mov	r3, r2
90004fae:	011b      	lsls	r3, r3, #4
90004fb0:	1a9b      	subs	r3, r3, r2
90004fb2:	009b      	lsls	r3, r3, #2
90004fb4:	440b      	add	r3, r1
90004fb6:	3319      	adds	r3, #25
90004fb8:	781b      	ldrb	r3, [r3, #0]
90004fba:	2b01      	cmp	r3, #1
90004fbc:	d124      	bne.n	90005008 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004fbe:	78fa      	ldrb	r2, [r7, #3]
90004fc0:	6879      	ldr	r1, [r7, #4]
90004fc2:	4613      	mov	r3, r2
90004fc4:	011b      	lsls	r3, r3, #4
90004fc6:	1a9b      	subs	r3, r3, r2
90004fc8:	009b      	lsls	r3, r3, #2
90004fca:	440b      	add	r3, r1
90004fcc:	3319      	adds	r3, #25
90004fce:	2200      	movs	r2, #0
90004fd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004fd2:	78fa      	ldrb	r2, [r7, #3]
90004fd4:	6879      	ldr	r1, [r7, #4]
90004fd6:	4613      	mov	r3, r2
90004fd8:	011b      	lsls	r3, r3, #4
90004fda:	1a9b      	subs	r3, r3, r2
90004fdc:	009b      	lsls	r3, r3, #2
90004fde:	440b      	add	r3, r1
90004fe0:	334c      	adds	r3, #76	@ 0x4c
90004fe2:	2202      	movs	r2, #2
90004fe4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004fe6:	78fa      	ldrb	r2, [r7, #3]
90004fe8:	6879      	ldr	r1, [r7, #4]
90004fea:	4613      	mov	r3, r2
90004fec:	011b      	lsls	r3, r3, #4
90004fee:	1a9b      	subs	r3, r3, r2
90004ff0:	009b      	lsls	r3, r3, #2
90004ff2:	440b      	add	r3, r1
90004ff4:	334d      	adds	r3, #77	@ 0x4d
90004ff6:	2203      	movs	r2, #3
90004ff8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ffa:	687b      	ldr	r3, [r7, #4]
90004ffc:	681b      	ldr	r3, [r3, #0]
90004ffe:	78fa      	ldrb	r2, [r7, #3]
90005000:	4611      	mov	r1, r2
90005002:	4618      	mov	r0, r3
90005004:	f006 fa00 	bl	9000b408 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90005008:	78fa      	ldrb	r2, [r7, #3]
9000500a:	6879      	ldr	r1, [r7, #4]
9000500c:	4613      	mov	r3, r2
9000500e:	011b      	lsls	r3, r3, #4
90005010:	1a9b      	subs	r3, r3, r2
90005012:	009b      	lsls	r3, r3, #2
90005014:	440b      	add	r3, r1
90005016:	331a      	adds	r3, #26
90005018:	781b      	ldrb	r3, [r3, #0]
9000501a:	2b01      	cmp	r3, #1
9000501c:	f040 8437 	bne.w	9000588e <HCD_HC_OUT_IRQHandler+0x978>
90005020:	78fa      	ldrb	r2, [r7, #3]
90005022:	6879      	ldr	r1, [r7, #4]
90005024:	4613      	mov	r3, r2
90005026:	011b      	lsls	r3, r3, #4
90005028:	1a9b      	subs	r3, r3, r2
9000502a:	009b      	lsls	r3, r3, #2
9000502c:	440b      	add	r3, r1
9000502e:	331b      	adds	r3, #27
90005030:	781b      	ldrb	r3, [r3, #0]
90005032:	2b00      	cmp	r3, #0
90005034:	f040 842b 	bne.w	9000588e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90005038:	78fa      	ldrb	r2, [r7, #3]
9000503a:	6879      	ldr	r1, [r7, #4]
9000503c:	4613      	mov	r3, r2
9000503e:	011b      	lsls	r3, r3, #4
90005040:	1a9b      	subs	r3, r3, r2
90005042:	009b      	lsls	r3, r3, #2
90005044:	440b      	add	r3, r1
90005046:	3326      	adds	r3, #38	@ 0x26
90005048:	781b      	ldrb	r3, [r3, #0]
9000504a:	2b01      	cmp	r3, #1
9000504c:	d009      	beq.n	90005062 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
9000504e:	78fa      	ldrb	r2, [r7, #3]
90005050:	6879      	ldr	r1, [r7, #4]
90005052:	4613      	mov	r3, r2
90005054:	011b      	lsls	r3, r3, #4
90005056:	1a9b      	subs	r3, r3, r2
90005058:	009b      	lsls	r3, r3, #2
9000505a:	440b      	add	r3, r1
9000505c:	331b      	adds	r3, #27
9000505e:	2201      	movs	r2, #1
90005060:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90005062:	78fa      	ldrb	r2, [r7, #3]
90005064:	6879      	ldr	r1, [r7, #4]
90005066:	4613      	mov	r3, r2
90005068:	011b      	lsls	r3, r3, #4
9000506a:	1a9b      	subs	r3, r3, r2
9000506c:	009b      	lsls	r3, r3, #2
9000506e:	440b      	add	r3, r1
90005070:	334d      	adds	r3, #77	@ 0x4d
90005072:	2203      	movs	r2, #3
90005074:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005076:	687b      	ldr	r3, [r7, #4]
90005078:	681b      	ldr	r3, [r3, #0]
9000507a:	78fa      	ldrb	r2, [r7, #3]
9000507c:	4611      	mov	r1, r2
9000507e:	4618      	mov	r0, r3
90005080:	f006 f9c2 	bl	9000b408 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90005084:	78fa      	ldrb	r2, [r7, #3]
90005086:	6879      	ldr	r1, [r7, #4]
90005088:	4613      	mov	r3, r2
9000508a:	011b      	lsls	r3, r3, #4
9000508c:	1a9b      	subs	r3, r3, r2
9000508e:	009b      	lsls	r3, r3, #2
90005090:	440b      	add	r3, r1
90005092:	3344      	adds	r3, #68	@ 0x44
90005094:	2200      	movs	r2, #0
90005096:	601a      	str	r2, [r3, #0]
90005098:	e3f9      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
9000509a:	687b      	ldr	r3, [r7, #4]
9000509c:	681b      	ldr	r3, [r3, #0]
9000509e:	78fa      	ldrb	r2, [r7, #3]
900050a0:	4611      	mov	r1, r2
900050a2:	4618      	mov	r0, r3
900050a4:	f006 f933 	bl	9000b30e <USB_ReadChInterrupts>
900050a8:	4603      	mov	r3, r0
900050aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900050ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900050b2:	d111      	bne.n	900050d8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900050b4:	78fb      	ldrb	r3, [r7, #3]
900050b6:	015a      	lsls	r2, r3, #5
900050b8:	693b      	ldr	r3, [r7, #16]
900050ba:	4413      	add	r3, r2
900050bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050c0:	461a      	mov	r2, r3
900050c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
900050c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900050c8:	687b      	ldr	r3, [r7, #4]
900050ca:	681b      	ldr	r3, [r3, #0]
900050cc:	78fa      	ldrb	r2, [r7, #3]
900050ce:	4611      	mov	r1, r2
900050d0:	4618      	mov	r0, r3
900050d2:	f006 f999 	bl	9000b408 <USB_HC_Halt>
900050d6:	e3da      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900050d8:	687b      	ldr	r3, [r7, #4]
900050da:	681b      	ldr	r3, [r3, #0]
900050dc:	78fa      	ldrb	r2, [r7, #3]
900050de:	4611      	mov	r1, r2
900050e0:	4618      	mov	r0, r3
900050e2:	f006 f914 	bl	9000b30e <USB_ReadChInterrupts>
900050e6:	4603      	mov	r3, r0
900050e8:	f003 0301 	and.w	r3, r3, #1
900050ec:	2b01      	cmp	r3, #1
900050ee:	d168      	bne.n	900051c2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900050f0:	78fa      	ldrb	r2, [r7, #3]
900050f2:	6879      	ldr	r1, [r7, #4]
900050f4:	4613      	mov	r3, r2
900050f6:	011b      	lsls	r3, r3, #4
900050f8:	1a9b      	subs	r3, r3, r2
900050fa:	009b      	lsls	r3, r3, #2
900050fc:	440b      	add	r3, r1
900050fe:	3344      	adds	r3, #68	@ 0x44
90005100:	2200      	movs	r2, #0
90005102:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005104:	687b      	ldr	r3, [r7, #4]
90005106:	681b      	ldr	r3, [r3, #0]
90005108:	78fa      	ldrb	r2, [r7, #3]
9000510a:	4611      	mov	r1, r2
9000510c:	4618      	mov	r0, r3
9000510e:	f006 f8fe 	bl	9000b30e <USB_ReadChInterrupts>
90005112:	4603      	mov	r3, r0
90005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005118:	2b40      	cmp	r3, #64	@ 0x40
9000511a:	d112      	bne.n	90005142 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
9000511c:	78fa      	ldrb	r2, [r7, #3]
9000511e:	6879      	ldr	r1, [r7, #4]
90005120:	4613      	mov	r3, r2
90005122:	011b      	lsls	r3, r3, #4
90005124:	1a9b      	subs	r3, r3, r2
90005126:	009b      	lsls	r3, r3, #2
90005128:	440b      	add	r3, r1
9000512a:	3319      	adds	r3, #25
9000512c:	2201      	movs	r2, #1
9000512e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005130:	78fb      	ldrb	r3, [r7, #3]
90005132:	015a      	lsls	r2, r3, #5
90005134:	693b      	ldr	r3, [r7, #16]
90005136:	4413      	add	r3, r2
90005138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000513c:	461a      	mov	r2, r3
9000513e:	2340      	movs	r3, #64	@ 0x40
90005140:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90005142:	78fa      	ldrb	r2, [r7, #3]
90005144:	6879      	ldr	r1, [r7, #4]
90005146:	4613      	mov	r3, r2
90005148:	011b      	lsls	r3, r3, #4
9000514a:	1a9b      	subs	r3, r3, r2
9000514c:	009b      	lsls	r3, r3, #2
9000514e:	440b      	add	r3, r1
90005150:	331b      	adds	r3, #27
90005152:	781b      	ldrb	r3, [r3, #0]
90005154:	2b00      	cmp	r3, #0
90005156:	d019      	beq.n	9000518c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90005158:	78fa      	ldrb	r2, [r7, #3]
9000515a:	6879      	ldr	r1, [r7, #4]
9000515c:	4613      	mov	r3, r2
9000515e:	011b      	lsls	r3, r3, #4
90005160:	1a9b      	subs	r3, r3, r2
90005162:	009b      	lsls	r3, r3, #2
90005164:	440b      	add	r3, r1
90005166:	331b      	adds	r3, #27
90005168:	2200      	movs	r2, #0
9000516a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000516c:	78fb      	ldrb	r3, [r7, #3]
9000516e:	015a      	lsls	r2, r3, #5
90005170:	693b      	ldr	r3, [r7, #16]
90005172:	4413      	add	r3, r2
90005174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005178:	685b      	ldr	r3, [r3, #4]
9000517a:	78fa      	ldrb	r2, [r7, #3]
9000517c:	0151      	lsls	r1, r2, #5
9000517e:	693a      	ldr	r2, [r7, #16]
90005180:	440a      	add	r2, r1
90005182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90005186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000518a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
9000518c:	78fb      	ldrb	r3, [r7, #3]
9000518e:	015a      	lsls	r2, r3, #5
90005190:	693b      	ldr	r3, [r7, #16]
90005192:	4413      	add	r3, r2
90005194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005198:	461a      	mov	r2, r3
9000519a:	2301      	movs	r3, #1
9000519c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
9000519e:	78fa      	ldrb	r2, [r7, #3]
900051a0:	6879      	ldr	r1, [r7, #4]
900051a2:	4613      	mov	r3, r2
900051a4:	011b      	lsls	r3, r3, #4
900051a6:	1a9b      	subs	r3, r3, r2
900051a8:	009b      	lsls	r3, r3, #2
900051aa:	440b      	add	r3, r1
900051ac:	334d      	adds	r3, #77	@ 0x4d
900051ae:	2201      	movs	r2, #1
900051b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900051b2:	687b      	ldr	r3, [r7, #4]
900051b4:	681b      	ldr	r3, [r3, #0]
900051b6:	78fa      	ldrb	r2, [r7, #3]
900051b8:	4611      	mov	r1, r2
900051ba:	4618      	mov	r0, r3
900051bc:	f006 f924 	bl	9000b408 <USB_HC_Halt>
900051c0:	e365      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
900051c2:	687b      	ldr	r3, [r7, #4]
900051c4:	681b      	ldr	r3, [r3, #0]
900051c6:	78fa      	ldrb	r2, [r7, #3]
900051c8:	4611      	mov	r1, r2
900051ca:	4618      	mov	r0, r3
900051cc:	f006 f89f 	bl	9000b30e <USB_ReadChInterrupts>
900051d0:	4603      	mov	r3, r0
900051d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900051d6:	2b40      	cmp	r3, #64	@ 0x40
900051d8:	d139      	bne.n	9000524e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
900051da:	78fa      	ldrb	r2, [r7, #3]
900051dc:	6879      	ldr	r1, [r7, #4]
900051de:	4613      	mov	r3, r2
900051e0:	011b      	lsls	r3, r3, #4
900051e2:	1a9b      	subs	r3, r3, r2
900051e4:	009b      	lsls	r3, r3, #2
900051e6:	440b      	add	r3, r1
900051e8:	334d      	adds	r3, #77	@ 0x4d
900051ea:	2205      	movs	r2, #5
900051ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900051ee:	78fa      	ldrb	r2, [r7, #3]
900051f0:	6879      	ldr	r1, [r7, #4]
900051f2:	4613      	mov	r3, r2
900051f4:	011b      	lsls	r3, r3, #4
900051f6:	1a9b      	subs	r3, r3, r2
900051f8:	009b      	lsls	r3, r3, #2
900051fa:	440b      	add	r3, r1
900051fc:	331a      	adds	r3, #26
900051fe:	781b      	ldrb	r3, [r3, #0]
90005200:	2b00      	cmp	r3, #0
90005202:	d109      	bne.n	90005218 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005204:	78fa      	ldrb	r2, [r7, #3]
90005206:	6879      	ldr	r1, [r7, #4]
90005208:	4613      	mov	r3, r2
9000520a:	011b      	lsls	r3, r3, #4
9000520c:	1a9b      	subs	r3, r3, r2
9000520e:	009b      	lsls	r3, r3, #2
90005210:	440b      	add	r3, r1
90005212:	3319      	adds	r3, #25
90005214:	2201      	movs	r2, #1
90005216:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005218:	78fa      	ldrb	r2, [r7, #3]
9000521a:	6879      	ldr	r1, [r7, #4]
9000521c:	4613      	mov	r3, r2
9000521e:	011b      	lsls	r3, r3, #4
90005220:	1a9b      	subs	r3, r3, r2
90005222:	009b      	lsls	r3, r3, #2
90005224:	440b      	add	r3, r1
90005226:	3344      	adds	r3, #68	@ 0x44
90005228:	2200      	movs	r2, #0
9000522a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000522c:	687b      	ldr	r3, [r7, #4]
9000522e:	681b      	ldr	r3, [r3, #0]
90005230:	78fa      	ldrb	r2, [r7, #3]
90005232:	4611      	mov	r1, r2
90005234:	4618      	mov	r0, r3
90005236:	f006 f8e7 	bl	9000b408 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
9000523a:	78fb      	ldrb	r3, [r7, #3]
9000523c:	015a      	lsls	r2, r3, #5
9000523e:	693b      	ldr	r3, [r7, #16]
90005240:	4413      	add	r3, r2
90005242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005246:	461a      	mov	r2, r3
90005248:	2340      	movs	r3, #64	@ 0x40
9000524a:	6093      	str	r3, [r2, #8]
9000524c:	e31f      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000524e:	687b      	ldr	r3, [r7, #4]
90005250:	681b      	ldr	r3, [r3, #0]
90005252:	78fa      	ldrb	r2, [r7, #3]
90005254:	4611      	mov	r1, r2
90005256:	4618      	mov	r0, r3
90005258:	f006 f859 	bl	9000b30e <USB_ReadChInterrupts>
9000525c:	4603      	mov	r3, r0
9000525e:	f003 0308 	and.w	r3, r3, #8
90005262:	2b08      	cmp	r3, #8
90005264:	d11a      	bne.n	9000529c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90005266:	78fb      	ldrb	r3, [r7, #3]
90005268:	015a      	lsls	r2, r3, #5
9000526a:	693b      	ldr	r3, [r7, #16]
9000526c:	4413      	add	r3, r2
9000526e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005272:	461a      	mov	r2, r3
90005274:	2308      	movs	r3, #8
90005276:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90005278:	78fa      	ldrb	r2, [r7, #3]
9000527a:	6879      	ldr	r1, [r7, #4]
9000527c:	4613      	mov	r3, r2
9000527e:	011b      	lsls	r3, r3, #4
90005280:	1a9b      	subs	r3, r3, r2
90005282:	009b      	lsls	r3, r3, #2
90005284:	440b      	add	r3, r1
90005286:	334d      	adds	r3, #77	@ 0x4d
90005288:	2206      	movs	r2, #6
9000528a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000528c:	687b      	ldr	r3, [r7, #4]
9000528e:	681b      	ldr	r3, [r3, #0]
90005290:	78fa      	ldrb	r2, [r7, #3]
90005292:	4611      	mov	r1, r2
90005294:	4618      	mov	r0, r3
90005296:	f006 f8b7 	bl	9000b408 <USB_HC_Halt>
9000529a:	e2f8      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
9000529c:	687b      	ldr	r3, [r7, #4]
9000529e:	681b      	ldr	r3, [r3, #0]
900052a0:	78fa      	ldrb	r2, [r7, #3]
900052a2:	4611      	mov	r1, r2
900052a4:	4618      	mov	r0, r3
900052a6:	f006 f832 	bl	9000b30e <USB_ReadChInterrupts>
900052aa:	4603      	mov	r3, r0
900052ac:	f003 0310 	and.w	r3, r3, #16
900052b0:	2b10      	cmp	r3, #16
900052b2:	d144      	bne.n	9000533e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900052b4:	78fa      	ldrb	r2, [r7, #3]
900052b6:	6879      	ldr	r1, [r7, #4]
900052b8:	4613      	mov	r3, r2
900052ba:	011b      	lsls	r3, r3, #4
900052bc:	1a9b      	subs	r3, r3, r2
900052be:	009b      	lsls	r3, r3, #2
900052c0:	440b      	add	r3, r1
900052c2:	3344      	adds	r3, #68	@ 0x44
900052c4:	2200      	movs	r2, #0
900052c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
900052c8:	78fa      	ldrb	r2, [r7, #3]
900052ca:	6879      	ldr	r1, [r7, #4]
900052cc:	4613      	mov	r3, r2
900052ce:	011b      	lsls	r3, r3, #4
900052d0:	1a9b      	subs	r3, r3, r2
900052d2:	009b      	lsls	r3, r3, #2
900052d4:	440b      	add	r3, r1
900052d6:	334d      	adds	r3, #77	@ 0x4d
900052d8:	2204      	movs	r2, #4
900052da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
900052dc:	78fa      	ldrb	r2, [r7, #3]
900052de:	6879      	ldr	r1, [r7, #4]
900052e0:	4613      	mov	r3, r2
900052e2:	011b      	lsls	r3, r3, #4
900052e4:	1a9b      	subs	r3, r3, r2
900052e6:	009b      	lsls	r3, r3, #2
900052e8:	440b      	add	r3, r1
900052ea:	3319      	adds	r3, #25
900052ec:	781b      	ldrb	r3, [r3, #0]
900052ee:	2b00      	cmp	r3, #0
900052f0:	d114      	bne.n	9000531c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
900052f2:	78fa      	ldrb	r2, [r7, #3]
900052f4:	6879      	ldr	r1, [r7, #4]
900052f6:	4613      	mov	r3, r2
900052f8:	011b      	lsls	r3, r3, #4
900052fa:	1a9b      	subs	r3, r3, r2
900052fc:	009b      	lsls	r3, r3, #2
900052fe:	440b      	add	r3, r1
90005300:	3318      	adds	r3, #24
90005302:	781b      	ldrb	r3, [r3, #0]
90005304:	2b00      	cmp	r3, #0
90005306:	d109      	bne.n	9000531c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90005308:	78fa      	ldrb	r2, [r7, #3]
9000530a:	6879      	ldr	r1, [r7, #4]
9000530c:	4613      	mov	r3, r2
9000530e:	011b      	lsls	r3, r3, #4
90005310:	1a9b      	subs	r3, r3, r2
90005312:	009b      	lsls	r3, r3, #2
90005314:	440b      	add	r3, r1
90005316:	3319      	adds	r3, #25
90005318:	2201      	movs	r2, #1
9000531a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000531c:	687b      	ldr	r3, [r7, #4]
9000531e:	681b      	ldr	r3, [r3, #0]
90005320:	78fa      	ldrb	r2, [r7, #3]
90005322:	4611      	mov	r1, r2
90005324:	4618      	mov	r0, r3
90005326:	f006 f86f 	bl	9000b408 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000532a:	78fb      	ldrb	r3, [r7, #3]
9000532c:	015a      	lsls	r2, r3, #5
9000532e:	693b      	ldr	r3, [r7, #16]
90005330:	4413      	add	r3, r2
90005332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005336:	461a      	mov	r2, r3
90005338:	2310      	movs	r3, #16
9000533a:	6093      	str	r3, [r2, #8]
9000533c:	e2a7      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
9000533e:	687b      	ldr	r3, [r7, #4]
90005340:	681b      	ldr	r3, [r3, #0]
90005342:	78fa      	ldrb	r2, [r7, #3]
90005344:	4611      	mov	r1, r2
90005346:	4618      	mov	r0, r3
90005348:	f005 ffe1 	bl	9000b30e <USB_ReadChInterrupts>
9000534c:	4603      	mov	r3, r0
9000534e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90005352:	2b80      	cmp	r3, #128	@ 0x80
90005354:	f040 8083 	bne.w	9000545e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90005358:	687b      	ldr	r3, [r7, #4]
9000535a:	799b      	ldrb	r3, [r3, #6]
9000535c:	2b00      	cmp	r3, #0
9000535e:	d111      	bne.n	90005384 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005360:	78fa      	ldrb	r2, [r7, #3]
90005362:	6879      	ldr	r1, [r7, #4]
90005364:	4613      	mov	r3, r2
90005366:	011b      	lsls	r3, r3, #4
90005368:	1a9b      	subs	r3, r3, r2
9000536a:	009b      	lsls	r3, r3, #2
9000536c:	440b      	add	r3, r1
9000536e:	334d      	adds	r3, #77	@ 0x4d
90005370:	2207      	movs	r2, #7
90005372:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005374:	687b      	ldr	r3, [r7, #4]
90005376:	681b      	ldr	r3, [r3, #0]
90005378:	78fa      	ldrb	r2, [r7, #3]
9000537a:	4611      	mov	r1, r2
9000537c:	4618      	mov	r0, r3
9000537e:	f006 f843 	bl	9000b408 <USB_HC_Halt>
90005382:	e062      	b.n	9000544a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005384:	78fa      	ldrb	r2, [r7, #3]
90005386:	6879      	ldr	r1, [r7, #4]
90005388:	4613      	mov	r3, r2
9000538a:	011b      	lsls	r3, r3, #4
9000538c:	1a9b      	subs	r3, r3, r2
9000538e:	009b      	lsls	r3, r3, #2
90005390:	440b      	add	r3, r1
90005392:	3344      	adds	r3, #68	@ 0x44
90005394:	681b      	ldr	r3, [r3, #0]
90005396:	1c59      	adds	r1, r3, #1
90005398:	6878      	ldr	r0, [r7, #4]
9000539a:	4613      	mov	r3, r2
9000539c:	011b      	lsls	r3, r3, #4
9000539e:	1a9b      	subs	r3, r3, r2
900053a0:	009b      	lsls	r3, r3, #2
900053a2:	4403      	add	r3, r0
900053a4:	3344      	adds	r3, #68	@ 0x44
900053a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900053a8:	78fa      	ldrb	r2, [r7, #3]
900053aa:	6879      	ldr	r1, [r7, #4]
900053ac:	4613      	mov	r3, r2
900053ae:	011b      	lsls	r3, r3, #4
900053b0:	1a9b      	subs	r3, r3, r2
900053b2:	009b      	lsls	r3, r3, #2
900053b4:	440b      	add	r3, r1
900053b6:	3344      	adds	r3, #68	@ 0x44
900053b8:	681b      	ldr	r3, [r3, #0]
900053ba:	2b02      	cmp	r3, #2
900053bc:	d922      	bls.n	90005404 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900053be:	78fa      	ldrb	r2, [r7, #3]
900053c0:	6879      	ldr	r1, [r7, #4]
900053c2:	4613      	mov	r3, r2
900053c4:	011b      	lsls	r3, r3, #4
900053c6:	1a9b      	subs	r3, r3, r2
900053c8:	009b      	lsls	r3, r3, #2
900053ca:	440b      	add	r3, r1
900053cc:	3344      	adds	r3, #68	@ 0x44
900053ce:	2200      	movs	r2, #0
900053d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900053d2:	78fa      	ldrb	r2, [r7, #3]
900053d4:	6879      	ldr	r1, [r7, #4]
900053d6:	4613      	mov	r3, r2
900053d8:	011b      	lsls	r3, r3, #4
900053da:	1a9b      	subs	r3, r3, r2
900053dc:	009b      	lsls	r3, r3, #2
900053de:	440b      	add	r3, r1
900053e0:	334c      	adds	r3, #76	@ 0x4c
900053e2:	2204      	movs	r2, #4
900053e4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900053e6:	78fa      	ldrb	r2, [r7, #3]
900053e8:	6879      	ldr	r1, [r7, #4]
900053ea:	4613      	mov	r3, r2
900053ec:	011b      	lsls	r3, r3, #4
900053ee:	1a9b      	subs	r3, r3, r2
900053f0:	009b      	lsls	r3, r3, #2
900053f2:	440b      	add	r3, r1
900053f4:	334c      	adds	r3, #76	@ 0x4c
900053f6:	781a      	ldrb	r2, [r3, #0]
900053f8:	78fb      	ldrb	r3, [r7, #3]
900053fa:	4619      	mov	r1, r3
900053fc:	6878      	ldr	r0, [r7, #4]
900053fe:	f7fb fef5 	bl	900011ec <HAL_HCD_HC_NotifyURBChange_Callback>
90005402:	e022      	b.n	9000544a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005404:	78fa      	ldrb	r2, [r7, #3]
90005406:	6879      	ldr	r1, [r7, #4]
90005408:	4613      	mov	r3, r2
9000540a:	011b      	lsls	r3, r3, #4
9000540c:	1a9b      	subs	r3, r3, r2
9000540e:	009b      	lsls	r3, r3, #2
90005410:	440b      	add	r3, r1
90005412:	334c      	adds	r3, #76	@ 0x4c
90005414:	2202      	movs	r2, #2
90005416:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005418:	78fb      	ldrb	r3, [r7, #3]
9000541a:	015a      	lsls	r2, r3, #5
9000541c:	693b      	ldr	r3, [r7, #16]
9000541e:	4413      	add	r3, r2
90005420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005424:	681b      	ldr	r3, [r3, #0]
90005426:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005428:	68fb      	ldr	r3, [r7, #12]
9000542a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000542e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005430:	68fb      	ldr	r3, [r7, #12]
90005432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005436:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005438:	78fb      	ldrb	r3, [r7, #3]
9000543a:	015a      	lsls	r2, r3, #5
9000543c:	693b      	ldr	r3, [r7, #16]
9000543e:	4413      	add	r3, r2
90005440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005444:	461a      	mov	r2, r3
90005446:	68fb      	ldr	r3, [r7, #12]
90005448:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000544a:	78fb      	ldrb	r3, [r7, #3]
9000544c:	015a      	lsls	r2, r3, #5
9000544e:	693b      	ldr	r3, [r7, #16]
90005450:	4413      	add	r3, r2
90005452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005456:	461a      	mov	r2, r3
90005458:	2380      	movs	r3, #128	@ 0x80
9000545a:	6093      	str	r3, [r2, #8]
9000545c:	e217      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
9000545e:	687b      	ldr	r3, [r7, #4]
90005460:	681b      	ldr	r3, [r3, #0]
90005462:	78fa      	ldrb	r2, [r7, #3]
90005464:	4611      	mov	r1, r2
90005466:	4618      	mov	r0, r3
90005468:	f005 ff51 	bl	9000b30e <USB_ReadChInterrupts>
9000546c:	4603      	mov	r3, r0
9000546e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90005472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90005476:	d11b      	bne.n	900054b0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005478:	78fa      	ldrb	r2, [r7, #3]
9000547a:	6879      	ldr	r1, [r7, #4]
9000547c:	4613      	mov	r3, r2
9000547e:	011b      	lsls	r3, r3, #4
90005480:	1a9b      	subs	r3, r3, r2
90005482:	009b      	lsls	r3, r3, #2
90005484:	440b      	add	r3, r1
90005486:	334d      	adds	r3, #77	@ 0x4d
90005488:	2209      	movs	r2, #9
9000548a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000548c:	687b      	ldr	r3, [r7, #4]
9000548e:	681b      	ldr	r3, [r3, #0]
90005490:	78fa      	ldrb	r2, [r7, #3]
90005492:	4611      	mov	r1, r2
90005494:	4618      	mov	r0, r3
90005496:	f005 ffb7 	bl	9000b408 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
9000549a:	78fb      	ldrb	r3, [r7, #3]
9000549c:	015a      	lsls	r2, r3, #5
9000549e:	693b      	ldr	r3, [r7, #16]
900054a0:	4413      	add	r3, r2
900054a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054a6:	461a      	mov	r2, r3
900054a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900054ac:	6093      	str	r3, [r2, #8]
900054ae:	e1ee      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900054b0:	687b      	ldr	r3, [r7, #4]
900054b2:	681b      	ldr	r3, [r3, #0]
900054b4:	78fa      	ldrb	r2, [r7, #3]
900054b6:	4611      	mov	r1, r2
900054b8:	4618      	mov	r0, r3
900054ba:	f005 ff28 	bl	9000b30e <USB_ReadChInterrupts>
900054be:	4603      	mov	r3, r0
900054c0:	f003 0302 	and.w	r3, r3, #2
900054c4:	2b02      	cmp	r3, #2
900054c6:	f040 81df 	bne.w	90005888 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900054ca:	78fb      	ldrb	r3, [r7, #3]
900054cc:	015a      	lsls	r2, r3, #5
900054ce:	693b      	ldr	r3, [r7, #16]
900054d0:	4413      	add	r3, r2
900054d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054d6:	461a      	mov	r2, r3
900054d8:	2302      	movs	r3, #2
900054da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900054dc:	78fa      	ldrb	r2, [r7, #3]
900054de:	6879      	ldr	r1, [r7, #4]
900054e0:	4613      	mov	r3, r2
900054e2:	011b      	lsls	r3, r3, #4
900054e4:	1a9b      	subs	r3, r3, r2
900054e6:	009b      	lsls	r3, r3, #2
900054e8:	440b      	add	r3, r1
900054ea:	334d      	adds	r3, #77	@ 0x4d
900054ec:	781b      	ldrb	r3, [r3, #0]
900054ee:	2b01      	cmp	r3, #1
900054f0:	f040 8093 	bne.w	9000561a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900054f4:	78fa      	ldrb	r2, [r7, #3]
900054f6:	6879      	ldr	r1, [r7, #4]
900054f8:	4613      	mov	r3, r2
900054fa:	011b      	lsls	r3, r3, #4
900054fc:	1a9b      	subs	r3, r3, r2
900054fe:	009b      	lsls	r3, r3, #2
90005500:	440b      	add	r3, r1
90005502:	334d      	adds	r3, #77	@ 0x4d
90005504:	2202      	movs	r2, #2
90005506:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005508:	78fa      	ldrb	r2, [r7, #3]
9000550a:	6879      	ldr	r1, [r7, #4]
9000550c:	4613      	mov	r3, r2
9000550e:	011b      	lsls	r3, r3, #4
90005510:	1a9b      	subs	r3, r3, r2
90005512:	009b      	lsls	r3, r3, #2
90005514:	440b      	add	r3, r1
90005516:	334c      	adds	r3, #76	@ 0x4c
90005518:	2201      	movs	r2, #1
9000551a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
9000551c:	78fa      	ldrb	r2, [r7, #3]
9000551e:	6879      	ldr	r1, [r7, #4]
90005520:	4613      	mov	r3, r2
90005522:	011b      	lsls	r3, r3, #4
90005524:	1a9b      	subs	r3, r3, r2
90005526:	009b      	lsls	r3, r3, #2
90005528:	440b      	add	r3, r1
9000552a:	3326      	adds	r3, #38	@ 0x26
9000552c:	781b      	ldrb	r3, [r3, #0]
9000552e:	2b02      	cmp	r3, #2
90005530:	d00b      	beq.n	9000554a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
90005532:	78fa      	ldrb	r2, [r7, #3]
90005534:	6879      	ldr	r1, [r7, #4]
90005536:	4613      	mov	r3, r2
90005538:	011b      	lsls	r3, r3, #4
9000553a:	1a9b      	subs	r3, r3, r2
9000553c:	009b      	lsls	r3, r3, #2
9000553e:	440b      	add	r3, r1
90005540:	3326      	adds	r3, #38	@ 0x26
90005542:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005544:	2b03      	cmp	r3, #3
90005546:	f040 8190 	bne.w	9000586a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
9000554a:	687b      	ldr	r3, [r7, #4]
9000554c:	799b      	ldrb	r3, [r3, #6]
9000554e:	2b00      	cmp	r3, #0
90005550:	d115      	bne.n	9000557e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
90005552:	78fa      	ldrb	r2, [r7, #3]
90005554:	6879      	ldr	r1, [r7, #4]
90005556:	4613      	mov	r3, r2
90005558:	011b      	lsls	r3, r3, #4
9000555a:	1a9b      	subs	r3, r3, r2
9000555c:	009b      	lsls	r3, r3, #2
9000555e:	440b      	add	r3, r1
90005560:	333d      	adds	r3, #61	@ 0x3d
90005562:	781b      	ldrb	r3, [r3, #0]
90005564:	78fa      	ldrb	r2, [r7, #3]
90005566:	f083 0301 	eor.w	r3, r3, #1
9000556a:	b2d8      	uxtb	r0, r3
9000556c:	6879      	ldr	r1, [r7, #4]
9000556e:	4613      	mov	r3, r2
90005570:	011b      	lsls	r3, r3, #4
90005572:	1a9b      	subs	r3, r3, r2
90005574:	009b      	lsls	r3, r3, #2
90005576:	440b      	add	r3, r1
90005578:	333d      	adds	r3, #61	@ 0x3d
9000557a:	4602      	mov	r2, r0
9000557c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
9000557e:	687b      	ldr	r3, [r7, #4]
90005580:	799b      	ldrb	r3, [r3, #6]
90005582:	2b01      	cmp	r3, #1
90005584:	f040 8171 	bne.w	9000586a <HCD_HC_OUT_IRQHandler+0x954>
90005588:	78fa      	ldrb	r2, [r7, #3]
9000558a:	6879      	ldr	r1, [r7, #4]
9000558c:	4613      	mov	r3, r2
9000558e:	011b      	lsls	r3, r3, #4
90005590:	1a9b      	subs	r3, r3, r2
90005592:	009b      	lsls	r3, r3, #2
90005594:	440b      	add	r3, r1
90005596:	3334      	adds	r3, #52	@ 0x34
90005598:	681b      	ldr	r3, [r3, #0]
9000559a:	2b00      	cmp	r3, #0
9000559c:	f000 8165 	beq.w	9000586a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
900055a0:	78fa      	ldrb	r2, [r7, #3]
900055a2:	6879      	ldr	r1, [r7, #4]
900055a4:	4613      	mov	r3, r2
900055a6:	011b      	lsls	r3, r3, #4
900055a8:	1a9b      	subs	r3, r3, r2
900055aa:	009b      	lsls	r3, r3, #2
900055ac:	440b      	add	r3, r1
900055ae:	3334      	adds	r3, #52	@ 0x34
900055b0:	6819      	ldr	r1, [r3, #0]
900055b2:	78fa      	ldrb	r2, [r7, #3]
900055b4:	6878      	ldr	r0, [r7, #4]
900055b6:	4613      	mov	r3, r2
900055b8:	011b      	lsls	r3, r3, #4
900055ba:	1a9b      	subs	r3, r3, r2
900055bc:	009b      	lsls	r3, r3, #2
900055be:	4403      	add	r3, r0
900055c0:	3328      	adds	r3, #40	@ 0x28
900055c2:	881b      	ldrh	r3, [r3, #0]
900055c4:	440b      	add	r3, r1
900055c6:	1e59      	subs	r1, r3, #1
900055c8:	78fa      	ldrb	r2, [r7, #3]
900055ca:	6878      	ldr	r0, [r7, #4]
900055cc:	4613      	mov	r3, r2
900055ce:	011b      	lsls	r3, r3, #4
900055d0:	1a9b      	subs	r3, r3, r2
900055d2:	009b      	lsls	r3, r3, #2
900055d4:	4403      	add	r3, r0
900055d6:	3328      	adds	r3, #40	@ 0x28
900055d8:	881b      	ldrh	r3, [r3, #0]
900055da:	fbb1 f3f3 	udiv	r3, r1, r3
900055de:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
900055e0:	68bb      	ldr	r3, [r7, #8]
900055e2:	f003 0301 	and.w	r3, r3, #1
900055e6:	2b00      	cmp	r3, #0
900055e8:	f000 813f 	beq.w	9000586a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
900055ec:	78fa      	ldrb	r2, [r7, #3]
900055ee:	6879      	ldr	r1, [r7, #4]
900055f0:	4613      	mov	r3, r2
900055f2:	011b      	lsls	r3, r3, #4
900055f4:	1a9b      	subs	r3, r3, r2
900055f6:	009b      	lsls	r3, r3, #2
900055f8:	440b      	add	r3, r1
900055fa:	333d      	adds	r3, #61	@ 0x3d
900055fc:	781b      	ldrb	r3, [r3, #0]
900055fe:	78fa      	ldrb	r2, [r7, #3]
90005600:	f083 0301 	eor.w	r3, r3, #1
90005604:	b2d8      	uxtb	r0, r3
90005606:	6879      	ldr	r1, [r7, #4]
90005608:	4613      	mov	r3, r2
9000560a:	011b      	lsls	r3, r3, #4
9000560c:	1a9b      	subs	r3, r3, r2
9000560e:	009b      	lsls	r3, r3, #2
90005610:	440b      	add	r3, r1
90005612:	333d      	adds	r3, #61	@ 0x3d
90005614:	4602      	mov	r2, r0
90005616:	701a      	strb	r2, [r3, #0]
90005618:	e127      	b.n	9000586a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
9000561a:	78fa      	ldrb	r2, [r7, #3]
9000561c:	6879      	ldr	r1, [r7, #4]
9000561e:	4613      	mov	r3, r2
90005620:	011b      	lsls	r3, r3, #4
90005622:	1a9b      	subs	r3, r3, r2
90005624:	009b      	lsls	r3, r3, #2
90005626:	440b      	add	r3, r1
90005628:	334d      	adds	r3, #77	@ 0x4d
9000562a:	781b      	ldrb	r3, [r3, #0]
9000562c:	2b03      	cmp	r3, #3
9000562e:	d120      	bne.n	90005672 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005630:	78fa      	ldrb	r2, [r7, #3]
90005632:	6879      	ldr	r1, [r7, #4]
90005634:	4613      	mov	r3, r2
90005636:	011b      	lsls	r3, r3, #4
90005638:	1a9b      	subs	r3, r3, r2
9000563a:	009b      	lsls	r3, r3, #2
9000563c:	440b      	add	r3, r1
9000563e:	334d      	adds	r3, #77	@ 0x4d
90005640:	2202      	movs	r2, #2
90005642:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005644:	78fa      	ldrb	r2, [r7, #3]
90005646:	6879      	ldr	r1, [r7, #4]
90005648:	4613      	mov	r3, r2
9000564a:	011b      	lsls	r3, r3, #4
9000564c:	1a9b      	subs	r3, r3, r2
9000564e:	009b      	lsls	r3, r3, #2
90005650:	440b      	add	r3, r1
90005652:	331b      	adds	r3, #27
90005654:	781b      	ldrb	r3, [r3, #0]
90005656:	2b01      	cmp	r3, #1
90005658:	f040 8107 	bne.w	9000586a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000565c:	78fa      	ldrb	r2, [r7, #3]
9000565e:	6879      	ldr	r1, [r7, #4]
90005660:	4613      	mov	r3, r2
90005662:	011b      	lsls	r3, r3, #4
90005664:	1a9b      	subs	r3, r3, r2
90005666:	009b      	lsls	r3, r3, #2
90005668:	440b      	add	r3, r1
9000566a:	334c      	adds	r3, #76	@ 0x4c
9000566c:	2202      	movs	r2, #2
9000566e:	701a      	strb	r2, [r3, #0]
90005670:	e0fb      	b.n	9000586a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005672:	78fa      	ldrb	r2, [r7, #3]
90005674:	6879      	ldr	r1, [r7, #4]
90005676:	4613      	mov	r3, r2
90005678:	011b      	lsls	r3, r3, #4
9000567a:	1a9b      	subs	r3, r3, r2
9000567c:	009b      	lsls	r3, r3, #2
9000567e:	440b      	add	r3, r1
90005680:	334d      	adds	r3, #77	@ 0x4d
90005682:	781b      	ldrb	r3, [r3, #0]
90005684:	2b04      	cmp	r3, #4
90005686:	d13a      	bne.n	900056fe <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005688:	78fa      	ldrb	r2, [r7, #3]
9000568a:	6879      	ldr	r1, [r7, #4]
9000568c:	4613      	mov	r3, r2
9000568e:	011b      	lsls	r3, r3, #4
90005690:	1a9b      	subs	r3, r3, r2
90005692:	009b      	lsls	r3, r3, #2
90005694:	440b      	add	r3, r1
90005696:	334d      	adds	r3, #77	@ 0x4d
90005698:	2202      	movs	r2, #2
9000569a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000569c:	78fa      	ldrb	r2, [r7, #3]
9000569e:	6879      	ldr	r1, [r7, #4]
900056a0:	4613      	mov	r3, r2
900056a2:	011b      	lsls	r3, r3, #4
900056a4:	1a9b      	subs	r3, r3, r2
900056a6:	009b      	lsls	r3, r3, #2
900056a8:	440b      	add	r3, r1
900056aa:	334c      	adds	r3, #76	@ 0x4c
900056ac:	2202      	movs	r2, #2
900056ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900056b0:	78fa      	ldrb	r2, [r7, #3]
900056b2:	6879      	ldr	r1, [r7, #4]
900056b4:	4613      	mov	r3, r2
900056b6:	011b      	lsls	r3, r3, #4
900056b8:	1a9b      	subs	r3, r3, r2
900056ba:	009b      	lsls	r3, r3, #2
900056bc:	440b      	add	r3, r1
900056be:	331b      	adds	r3, #27
900056c0:	781b      	ldrb	r3, [r3, #0]
900056c2:	2b01      	cmp	r3, #1
900056c4:	f040 80d1 	bne.w	9000586a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
900056c8:	78fa      	ldrb	r2, [r7, #3]
900056ca:	6879      	ldr	r1, [r7, #4]
900056cc:	4613      	mov	r3, r2
900056ce:	011b      	lsls	r3, r3, #4
900056d0:	1a9b      	subs	r3, r3, r2
900056d2:	009b      	lsls	r3, r3, #2
900056d4:	440b      	add	r3, r1
900056d6:	331b      	adds	r3, #27
900056d8:	2200      	movs	r2, #0
900056da:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900056dc:	78fb      	ldrb	r3, [r7, #3]
900056de:	015a      	lsls	r2, r3, #5
900056e0:	693b      	ldr	r3, [r7, #16]
900056e2:	4413      	add	r3, r2
900056e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900056e8:	685b      	ldr	r3, [r3, #4]
900056ea:	78fa      	ldrb	r2, [r7, #3]
900056ec:	0151      	lsls	r1, r2, #5
900056ee:	693a      	ldr	r2, [r7, #16]
900056f0:	440a      	add	r2, r1
900056f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900056f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900056fa:	6053      	str	r3, [r2, #4]
900056fc:	e0b5      	b.n	9000586a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900056fe:	78fa      	ldrb	r2, [r7, #3]
90005700:	6879      	ldr	r1, [r7, #4]
90005702:	4613      	mov	r3, r2
90005704:	011b      	lsls	r3, r3, #4
90005706:	1a9b      	subs	r3, r3, r2
90005708:	009b      	lsls	r3, r3, #2
9000570a:	440b      	add	r3, r1
9000570c:	334d      	adds	r3, #77	@ 0x4d
9000570e:	781b      	ldrb	r3, [r3, #0]
90005710:	2b05      	cmp	r3, #5
90005712:	d114      	bne.n	9000573e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005714:	78fa      	ldrb	r2, [r7, #3]
90005716:	6879      	ldr	r1, [r7, #4]
90005718:	4613      	mov	r3, r2
9000571a:	011b      	lsls	r3, r3, #4
9000571c:	1a9b      	subs	r3, r3, r2
9000571e:	009b      	lsls	r3, r3, #2
90005720:	440b      	add	r3, r1
90005722:	334d      	adds	r3, #77	@ 0x4d
90005724:	2202      	movs	r2, #2
90005726:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005728:	78fa      	ldrb	r2, [r7, #3]
9000572a:	6879      	ldr	r1, [r7, #4]
9000572c:	4613      	mov	r3, r2
9000572e:	011b      	lsls	r3, r3, #4
90005730:	1a9b      	subs	r3, r3, r2
90005732:	009b      	lsls	r3, r3, #2
90005734:	440b      	add	r3, r1
90005736:	334c      	adds	r3, #76	@ 0x4c
90005738:	2202      	movs	r2, #2
9000573a:	701a      	strb	r2, [r3, #0]
9000573c:	e095      	b.n	9000586a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000573e:	78fa      	ldrb	r2, [r7, #3]
90005740:	6879      	ldr	r1, [r7, #4]
90005742:	4613      	mov	r3, r2
90005744:	011b      	lsls	r3, r3, #4
90005746:	1a9b      	subs	r3, r3, r2
90005748:	009b      	lsls	r3, r3, #2
9000574a:	440b      	add	r3, r1
9000574c:	334d      	adds	r3, #77	@ 0x4d
9000574e:	781b      	ldrb	r3, [r3, #0]
90005750:	2b06      	cmp	r3, #6
90005752:	d114      	bne.n	9000577e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005754:	78fa      	ldrb	r2, [r7, #3]
90005756:	6879      	ldr	r1, [r7, #4]
90005758:	4613      	mov	r3, r2
9000575a:	011b      	lsls	r3, r3, #4
9000575c:	1a9b      	subs	r3, r3, r2
9000575e:	009b      	lsls	r3, r3, #2
90005760:	440b      	add	r3, r1
90005762:	334d      	adds	r3, #77	@ 0x4d
90005764:	2202      	movs	r2, #2
90005766:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
90005768:	78fa      	ldrb	r2, [r7, #3]
9000576a:	6879      	ldr	r1, [r7, #4]
9000576c:	4613      	mov	r3, r2
9000576e:	011b      	lsls	r3, r3, #4
90005770:	1a9b      	subs	r3, r3, r2
90005772:	009b      	lsls	r3, r3, #2
90005774:	440b      	add	r3, r1
90005776:	334c      	adds	r3, #76	@ 0x4c
90005778:	2205      	movs	r2, #5
9000577a:	701a      	strb	r2, [r3, #0]
9000577c:	e075      	b.n	9000586a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000577e:	78fa      	ldrb	r2, [r7, #3]
90005780:	6879      	ldr	r1, [r7, #4]
90005782:	4613      	mov	r3, r2
90005784:	011b      	lsls	r3, r3, #4
90005786:	1a9b      	subs	r3, r3, r2
90005788:	009b      	lsls	r3, r3, #2
9000578a:	440b      	add	r3, r1
9000578c:	334d      	adds	r3, #77	@ 0x4d
9000578e:	781b      	ldrb	r3, [r3, #0]
90005790:	2b07      	cmp	r3, #7
90005792:	d00a      	beq.n	900057aa <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005794:	78fa      	ldrb	r2, [r7, #3]
90005796:	6879      	ldr	r1, [r7, #4]
90005798:	4613      	mov	r3, r2
9000579a:	011b      	lsls	r3, r3, #4
9000579c:	1a9b      	subs	r3, r3, r2
9000579e:	009b      	lsls	r3, r3, #2
900057a0:	440b      	add	r3, r1
900057a2:	334d      	adds	r3, #77	@ 0x4d
900057a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900057a6:	2b09      	cmp	r3, #9
900057a8:	d170      	bne.n	9000588c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900057aa:	78fa      	ldrb	r2, [r7, #3]
900057ac:	6879      	ldr	r1, [r7, #4]
900057ae:	4613      	mov	r3, r2
900057b0:	011b      	lsls	r3, r3, #4
900057b2:	1a9b      	subs	r3, r3, r2
900057b4:	009b      	lsls	r3, r3, #2
900057b6:	440b      	add	r3, r1
900057b8:	334d      	adds	r3, #77	@ 0x4d
900057ba:	2202      	movs	r2, #2
900057bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900057be:	78fa      	ldrb	r2, [r7, #3]
900057c0:	6879      	ldr	r1, [r7, #4]
900057c2:	4613      	mov	r3, r2
900057c4:	011b      	lsls	r3, r3, #4
900057c6:	1a9b      	subs	r3, r3, r2
900057c8:	009b      	lsls	r3, r3, #2
900057ca:	440b      	add	r3, r1
900057cc:	3344      	adds	r3, #68	@ 0x44
900057ce:	681b      	ldr	r3, [r3, #0]
900057d0:	1c59      	adds	r1, r3, #1
900057d2:	6878      	ldr	r0, [r7, #4]
900057d4:	4613      	mov	r3, r2
900057d6:	011b      	lsls	r3, r3, #4
900057d8:	1a9b      	subs	r3, r3, r2
900057da:	009b      	lsls	r3, r3, #2
900057dc:	4403      	add	r3, r0
900057de:	3344      	adds	r3, #68	@ 0x44
900057e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900057e2:	78fa      	ldrb	r2, [r7, #3]
900057e4:	6879      	ldr	r1, [r7, #4]
900057e6:	4613      	mov	r3, r2
900057e8:	011b      	lsls	r3, r3, #4
900057ea:	1a9b      	subs	r3, r3, r2
900057ec:	009b      	lsls	r3, r3, #2
900057ee:	440b      	add	r3, r1
900057f0:	3344      	adds	r3, #68	@ 0x44
900057f2:	681b      	ldr	r3, [r3, #0]
900057f4:	2b02      	cmp	r3, #2
900057f6:	d914      	bls.n	90005822 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900057f8:	78fa      	ldrb	r2, [r7, #3]
900057fa:	6879      	ldr	r1, [r7, #4]
900057fc:	4613      	mov	r3, r2
900057fe:	011b      	lsls	r3, r3, #4
90005800:	1a9b      	subs	r3, r3, r2
90005802:	009b      	lsls	r3, r3, #2
90005804:	440b      	add	r3, r1
90005806:	3344      	adds	r3, #68	@ 0x44
90005808:	2200      	movs	r2, #0
9000580a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
9000580c:	78fa      	ldrb	r2, [r7, #3]
9000580e:	6879      	ldr	r1, [r7, #4]
90005810:	4613      	mov	r3, r2
90005812:	011b      	lsls	r3, r3, #4
90005814:	1a9b      	subs	r3, r3, r2
90005816:	009b      	lsls	r3, r3, #2
90005818:	440b      	add	r3, r1
9000581a:	334c      	adds	r3, #76	@ 0x4c
9000581c:	2204      	movs	r2, #4
9000581e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005820:	e022      	b.n	90005868 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005822:	78fa      	ldrb	r2, [r7, #3]
90005824:	6879      	ldr	r1, [r7, #4]
90005826:	4613      	mov	r3, r2
90005828:	011b      	lsls	r3, r3, #4
9000582a:	1a9b      	subs	r3, r3, r2
9000582c:	009b      	lsls	r3, r3, #2
9000582e:	440b      	add	r3, r1
90005830:	334c      	adds	r3, #76	@ 0x4c
90005832:	2202      	movs	r2, #2
90005834:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005836:	78fb      	ldrb	r3, [r7, #3]
90005838:	015a      	lsls	r2, r3, #5
9000583a:	693b      	ldr	r3, [r7, #16]
9000583c:	4413      	add	r3, r2
9000583e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005842:	681b      	ldr	r3, [r3, #0]
90005844:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005846:	68fb      	ldr	r3, [r7, #12]
90005848:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000584c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
9000584e:	68fb      	ldr	r3, [r7, #12]
90005850:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005854:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005856:	78fb      	ldrb	r3, [r7, #3]
90005858:	015a      	lsls	r2, r3, #5
9000585a:	693b      	ldr	r3, [r7, #16]
9000585c:	4413      	add	r3, r2
9000585e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005862:	461a      	mov	r2, r3
90005864:	68fb      	ldr	r3, [r7, #12]
90005866:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005868:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000586a:	78fa      	ldrb	r2, [r7, #3]
9000586c:	6879      	ldr	r1, [r7, #4]
9000586e:	4613      	mov	r3, r2
90005870:	011b      	lsls	r3, r3, #4
90005872:	1a9b      	subs	r3, r3, r2
90005874:	009b      	lsls	r3, r3, #2
90005876:	440b      	add	r3, r1
90005878:	334c      	adds	r3, #76	@ 0x4c
9000587a:	781a      	ldrb	r2, [r3, #0]
9000587c:	78fb      	ldrb	r3, [r7, #3]
9000587e:	4619      	mov	r1, r3
90005880:	6878      	ldr	r0, [r7, #4]
90005882:	f7fb fcb3 	bl	900011ec <HAL_HCD_HC_NotifyURBChange_Callback>
90005886:	e002      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005888:	bf00      	nop
9000588a:	e000      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x978>
      return;
9000588c:	bf00      	nop
  }
}
9000588e:	3718      	adds	r7, #24
90005890:	46bd      	mov	sp, r7
90005892:	bd80      	pop	{r7, pc}

90005894 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005894:	b580      	push	{r7, lr}
90005896:	b08a      	sub	sp, #40	@ 0x28
90005898:	af00      	add	r7, sp, #0
9000589a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000589c:	687b      	ldr	r3, [r7, #4]
9000589e:	681b      	ldr	r3, [r3, #0]
900058a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
900058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900058a4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
900058a6:	687b      	ldr	r3, [r7, #4]
900058a8:	681b      	ldr	r3, [r3, #0]
900058aa:	6a1b      	ldr	r3, [r3, #32]
900058ac:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
900058ae:	69fb      	ldr	r3, [r7, #28]
900058b0:	f003 030f 	and.w	r3, r3, #15
900058b4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
900058b6:	69fb      	ldr	r3, [r7, #28]
900058b8:	0c5b      	lsrs	r3, r3, #17
900058ba:	f003 030f 	and.w	r3, r3, #15
900058be:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
900058c0:	69fb      	ldr	r3, [r7, #28]
900058c2:	091b      	lsrs	r3, r3, #4
900058c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
900058c8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
900058ca:	697b      	ldr	r3, [r7, #20]
900058cc:	2b02      	cmp	r3, #2
900058ce:	d004      	beq.n	900058da <HCD_RXQLVL_IRQHandler+0x46>
900058d0:	697b      	ldr	r3, [r7, #20]
900058d2:	2b05      	cmp	r3, #5
900058d4:	f000 80b6 	beq.w	90005a44 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900058d8:	e0b7      	b.n	90005a4a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900058da:	693b      	ldr	r3, [r7, #16]
900058dc:	2b00      	cmp	r3, #0
900058de:	f000 80b3 	beq.w	90005a48 <HCD_RXQLVL_IRQHandler+0x1b4>
900058e2:	6879      	ldr	r1, [r7, #4]
900058e4:	69ba      	ldr	r2, [r7, #24]
900058e6:	4613      	mov	r3, r2
900058e8:	011b      	lsls	r3, r3, #4
900058ea:	1a9b      	subs	r3, r3, r2
900058ec:	009b      	lsls	r3, r3, #2
900058ee:	440b      	add	r3, r1
900058f0:	332c      	adds	r3, #44	@ 0x2c
900058f2:	681b      	ldr	r3, [r3, #0]
900058f4:	2b00      	cmp	r3, #0
900058f6:	f000 80a7 	beq.w	90005a48 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
900058fa:	6879      	ldr	r1, [r7, #4]
900058fc:	69ba      	ldr	r2, [r7, #24]
900058fe:	4613      	mov	r3, r2
90005900:	011b      	lsls	r3, r3, #4
90005902:	1a9b      	subs	r3, r3, r2
90005904:	009b      	lsls	r3, r3, #2
90005906:	440b      	add	r3, r1
90005908:	3338      	adds	r3, #56	@ 0x38
9000590a:	681a      	ldr	r2, [r3, #0]
9000590c:	693b      	ldr	r3, [r7, #16]
9000590e:	18d1      	adds	r1, r2, r3
90005910:	6878      	ldr	r0, [r7, #4]
90005912:	69ba      	ldr	r2, [r7, #24]
90005914:	4613      	mov	r3, r2
90005916:	011b      	lsls	r3, r3, #4
90005918:	1a9b      	subs	r3, r3, r2
9000591a:	009b      	lsls	r3, r3, #2
9000591c:	4403      	add	r3, r0
9000591e:	3334      	adds	r3, #52	@ 0x34
90005920:	681b      	ldr	r3, [r3, #0]
90005922:	4299      	cmp	r1, r3
90005924:	f200 8083 	bhi.w	90005a2e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005928:	687b      	ldr	r3, [r7, #4]
9000592a:	6818      	ldr	r0, [r3, #0]
9000592c:	6879      	ldr	r1, [r7, #4]
9000592e:	69ba      	ldr	r2, [r7, #24]
90005930:	4613      	mov	r3, r2
90005932:	011b      	lsls	r3, r3, #4
90005934:	1a9b      	subs	r3, r3, r2
90005936:	009b      	lsls	r3, r3, #2
90005938:	440b      	add	r3, r1
9000593a:	332c      	adds	r3, #44	@ 0x2c
9000593c:	681b      	ldr	r3, [r3, #0]
9000593e:	693a      	ldr	r2, [r7, #16]
90005940:	b292      	uxth	r2, r2
90005942:	4619      	mov	r1, r3
90005944:	f005 fc78 	bl	9000b238 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90005948:	6879      	ldr	r1, [r7, #4]
9000594a:	69ba      	ldr	r2, [r7, #24]
9000594c:	4613      	mov	r3, r2
9000594e:	011b      	lsls	r3, r3, #4
90005950:	1a9b      	subs	r3, r3, r2
90005952:	009b      	lsls	r3, r3, #2
90005954:	440b      	add	r3, r1
90005956:	332c      	adds	r3, #44	@ 0x2c
90005958:	681a      	ldr	r2, [r3, #0]
9000595a:	693b      	ldr	r3, [r7, #16]
9000595c:	18d1      	adds	r1, r2, r3
9000595e:	6878      	ldr	r0, [r7, #4]
90005960:	69ba      	ldr	r2, [r7, #24]
90005962:	4613      	mov	r3, r2
90005964:	011b      	lsls	r3, r3, #4
90005966:	1a9b      	subs	r3, r3, r2
90005968:	009b      	lsls	r3, r3, #2
9000596a:	4403      	add	r3, r0
9000596c:	332c      	adds	r3, #44	@ 0x2c
9000596e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005970:	6879      	ldr	r1, [r7, #4]
90005972:	69ba      	ldr	r2, [r7, #24]
90005974:	4613      	mov	r3, r2
90005976:	011b      	lsls	r3, r3, #4
90005978:	1a9b      	subs	r3, r3, r2
9000597a:	009b      	lsls	r3, r3, #2
9000597c:	440b      	add	r3, r1
9000597e:	3338      	adds	r3, #56	@ 0x38
90005980:	681a      	ldr	r2, [r3, #0]
90005982:	693b      	ldr	r3, [r7, #16]
90005984:	18d1      	adds	r1, r2, r3
90005986:	6878      	ldr	r0, [r7, #4]
90005988:	69ba      	ldr	r2, [r7, #24]
9000598a:	4613      	mov	r3, r2
9000598c:	011b      	lsls	r3, r3, #4
9000598e:	1a9b      	subs	r3, r3, r2
90005990:	009b      	lsls	r3, r3, #2
90005992:	4403      	add	r3, r0
90005994:	3338      	adds	r3, #56	@ 0x38
90005996:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005998:	69bb      	ldr	r3, [r7, #24]
9000599a:	015a      	lsls	r2, r3, #5
9000599c:	6a3b      	ldr	r3, [r7, #32]
9000599e:	4413      	add	r3, r2
900059a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900059a4:	691b      	ldr	r3, [r3, #16]
900059a6:	0cdb      	lsrs	r3, r3, #19
900059a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
900059ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
900059ae:	6879      	ldr	r1, [r7, #4]
900059b0:	69ba      	ldr	r2, [r7, #24]
900059b2:	4613      	mov	r3, r2
900059b4:	011b      	lsls	r3, r3, #4
900059b6:	1a9b      	subs	r3, r3, r2
900059b8:	009b      	lsls	r3, r3, #2
900059ba:	440b      	add	r3, r1
900059bc:	3328      	adds	r3, #40	@ 0x28
900059be:	881b      	ldrh	r3, [r3, #0]
900059c0:	461a      	mov	r2, r3
900059c2:	693b      	ldr	r3, [r7, #16]
900059c4:	4293      	cmp	r3, r2
900059c6:	d13f      	bne.n	90005a48 <HCD_RXQLVL_IRQHandler+0x1b4>
900059c8:	68fb      	ldr	r3, [r7, #12]
900059ca:	2b00      	cmp	r3, #0
900059cc:	d03c      	beq.n	90005a48 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
900059ce:	69bb      	ldr	r3, [r7, #24]
900059d0:	015a      	lsls	r2, r3, #5
900059d2:	6a3b      	ldr	r3, [r7, #32]
900059d4:	4413      	add	r3, r2
900059d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900059da:	681b      	ldr	r3, [r3, #0]
900059dc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900059de:	68bb      	ldr	r3, [r7, #8]
900059e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900059e4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
900059e6:	68bb      	ldr	r3, [r7, #8]
900059e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900059ec:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
900059ee:	69bb      	ldr	r3, [r7, #24]
900059f0:	015a      	lsls	r2, r3, #5
900059f2:	6a3b      	ldr	r3, [r7, #32]
900059f4:	4413      	add	r3, r2
900059f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900059fa:	461a      	mov	r2, r3
900059fc:	68bb      	ldr	r3, [r7, #8]
900059fe:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90005a00:	6879      	ldr	r1, [r7, #4]
90005a02:	69ba      	ldr	r2, [r7, #24]
90005a04:	4613      	mov	r3, r2
90005a06:	011b      	lsls	r3, r3, #4
90005a08:	1a9b      	subs	r3, r3, r2
90005a0a:	009b      	lsls	r3, r3, #2
90005a0c:	440b      	add	r3, r1
90005a0e:	333c      	adds	r3, #60	@ 0x3c
90005a10:	781b      	ldrb	r3, [r3, #0]
90005a12:	f083 0301 	eor.w	r3, r3, #1
90005a16:	b2d8      	uxtb	r0, r3
90005a18:	6879      	ldr	r1, [r7, #4]
90005a1a:	69ba      	ldr	r2, [r7, #24]
90005a1c:	4613      	mov	r3, r2
90005a1e:	011b      	lsls	r3, r3, #4
90005a20:	1a9b      	subs	r3, r3, r2
90005a22:	009b      	lsls	r3, r3, #2
90005a24:	440b      	add	r3, r1
90005a26:	333c      	adds	r3, #60	@ 0x3c
90005a28:	4602      	mov	r2, r0
90005a2a:	701a      	strb	r2, [r3, #0]
      break;
90005a2c:	e00c      	b.n	90005a48 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005a2e:	6879      	ldr	r1, [r7, #4]
90005a30:	69ba      	ldr	r2, [r7, #24]
90005a32:	4613      	mov	r3, r2
90005a34:	011b      	lsls	r3, r3, #4
90005a36:	1a9b      	subs	r3, r3, r2
90005a38:	009b      	lsls	r3, r3, #2
90005a3a:	440b      	add	r3, r1
90005a3c:	334c      	adds	r3, #76	@ 0x4c
90005a3e:	2204      	movs	r2, #4
90005a40:	701a      	strb	r2, [r3, #0]
      break;
90005a42:	e001      	b.n	90005a48 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90005a44:	bf00      	nop
90005a46:	e000      	b.n	90005a4a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005a48:	bf00      	nop
  }
}
90005a4a:	bf00      	nop
90005a4c:	3728      	adds	r7, #40	@ 0x28
90005a4e:	46bd      	mov	sp, r7
90005a50:	bd80      	pop	{r7, pc}

90005a52 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005a52:	b580      	push	{r7, lr}
90005a54:	b086      	sub	sp, #24
90005a56:	af00      	add	r7, sp, #0
90005a58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005a5a:	687b      	ldr	r3, [r7, #4]
90005a5c:	681b      	ldr	r3, [r3, #0]
90005a5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005a60:	697b      	ldr	r3, [r7, #20]
90005a62:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005a64:	693b      	ldr	r3, [r7, #16]
90005a66:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a6a:	681b      	ldr	r3, [r3, #0]
90005a6c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005a6e:	693b      	ldr	r3, [r7, #16]
90005a70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a74:	681b      	ldr	r3, [r3, #0]
90005a76:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005a78:	68bb      	ldr	r3, [r7, #8]
90005a7a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005a7e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005a80:	68fb      	ldr	r3, [r7, #12]
90005a82:	f003 0302 	and.w	r3, r3, #2
90005a86:	2b02      	cmp	r3, #2
90005a88:	d10b      	bne.n	90005aa2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005a8a:	68fb      	ldr	r3, [r7, #12]
90005a8c:	f003 0301 	and.w	r3, r3, #1
90005a90:	2b01      	cmp	r3, #1
90005a92:	d102      	bne.n	90005a9a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005a94:	6878      	ldr	r0, [r7, #4]
90005a96:	f7fb fb71 	bl	9000117c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005a9a:	68bb      	ldr	r3, [r7, #8]
90005a9c:	f043 0302 	orr.w	r3, r3, #2
90005aa0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005aa2:	68fb      	ldr	r3, [r7, #12]
90005aa4:	f003 0308 	and.w	r3, r3, #8
90005aa8:	2b08      	cmp	r3, #8
90005aaa:	d132      	bne.n	90005b12 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005aac:	68bb      	ldr	r3, [r7, #8]
90005aae:	f043 0308 	orr.w	r3, r3, #8
90005ab2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005ab4:	68fb      	ldr	r3, [r7, #12]
90005ab6:	f003 0304 	and.w	r3, r3, #4
90005aba:	2b04      	cmp	r3, #4
90005abc:	d126      	bne.n	90005b0c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005abe:	687b      	ldr	r3, [r7, #4]
90005ac0:	7a5b      	ldrb	r3, [r3, #9]
90005ac2:	2b02      	cmp	r3, #2
90005ac4:	d113      	bne.n	90005aee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005ac6:	68fb      	ldr	r3, [r7, #12]
90005ac8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005acc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90005ad0:	d106      	bne.n	90005ae0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005ad2:	687b      	ldr	r3, [r7, #4]
90005ad4:	681b      	ldr	r3, [r3, #0]
90005ad6:	2102      	movs	r1, #2
90005ad8:	4618      	mov	r0, r3
90005ada:	f005 fc47 	bl	9000b36c <USB_InitFSLSPClkSel>
90005ade:	e011      	b.n	90005b04 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005ae0:	687b      	ldr	r3, [r7, #4]
90005ae2:	681b      	ldr	r3, [r3, #0]
90005ae4:	2101      	movs	r1, #1
90005ae6:	4618      	mov	r0, r3
90005ae8:	f005 fc40 	bl	9000b36c <USB_InitFSLSPClkSel>
90005aec:	e00a      	b.n	90005b04 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90005aee:	687b      	ldr	r3, [r7, #4]
90005af0:	79db      	ldrb	r3, [r3, #7]
90005af2:	2b01      	cmp	r3, #1
90005af4:	d106      	bne.n	90005b04 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005af6:	693b      	ldr	r3, [r7, #16]
90005af8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005afc:	461a      	mov	r2, r3
90005afe:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005b02:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005b04:	6878      	ldr	r0, [r7, #4]
90005b06:	f7fb fb55 	bl	900011b4 <HAL_HCD_PortEnabled_Callback>
90005b0a:	e002      	b.n	90005b12 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005b0c:	6878      	ldr	r0, [r7, #4]
90005b0e:	f7fb fb5f 	bl	900011d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005b12:	68fb      	ldr	r3, [r7, #12]
90005b14:	f003 0320 	and.w	r3, r3, #32
90005b18:	2b20      	cmp	r3, #32
90005b1a:	d103      	bne.n	90005b24 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005b1c:	68bb      	ldr	r3, [r7, #8]
90005b1e:	f043 0320 	orr.w	r3, r3, #32
90005b22:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005b24:	693b      	ldr	r3, [r7, #16]
90005b26:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005b2a:	461a      	mov	r2, r3
90005b2c:	68bb      	ldr	r3, [r7, #8]
90005b2e:	6013      	str	r3, [r2, #0]
}
90005b30:	bf00      	nop
90005b32:	3718      	adds	r7, #24
90005b34:	46bd      	mov	sp, r7
90005b36:	bd80      	pop	{r7, pc}

90005b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005b38:	b580      	push	{r7, lr}
90005b3a:	b082      	sub	sp, #8
90005b3c:	af00      	add	r7, sp, #0
90005b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005b40:	687b      	ldr	r3, [r7, #4]
90005b42:	2b00      	cmp	r3, #0
90005b44:	d101      	bne.n	90005b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005b46:	2301      	movs	r3, #1
90005b48:	e08b      	b.n	90005c62 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005b4a:	687b      	ldr	r3, [r7, #4]
90005b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005b50:	b2db      	uxtb	r3, r3
90005b52:	2b00      	cmp	r3, #0
90005b54:	d106      	bne.n	90005b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005b56:	687b      	ldr	r3, [r7, #4]
90005b58:	2200      	movs	r2, #0
90005b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005b5e:	6878      	ldr	r0, [r7, #4]
90005b60:	f000 f886 	bl	90005c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005b64:	687b      	ldr	r3, [r7, #4]
90005b66:	2224      	movs	r2, #36	@ 0x24
90005b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005b6c:	687b      	ldr	r3, [r7, #4]
90005b6e:	681b      	ldr	r3, [r3, #0]
90005b70:	681a      	ldr	r2, [r3, #0]
90005b72:	687b      	ldr	r3, [r7, #4]
90005b74:	681b      	ldr	r3, [r3, #0]
90005b76:	f022 0201 	bic.w	r2, r2, #1
90005b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005b7c:	687b      	ldr	r3, [r7, #4]
90005b7e:	685a      	ldr	r2, [r3, #4]
90005b80:	687b      	ldr	r3, [r7, #4]
90005b82:	681b      	ldr	r3, [r3, #0]
90005b84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005b8a:	687b      	ldr	r3, [r7, #4]
90005b8c:	681b      	ldr	r3, [r3, #0]
90005b8e:	689a      	ldr	r2, [r3, #8]
90005b90:	687b      	ldr	r3, [r7, #4]
90005b92:	681b      	ldr	r3, [r3, #0]
90005b94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005b9a:	687b      	ldr	r3, [r7, #4]
90005b9c:	68db      	ldr	r3, [r3, #12]
90005b9e:	2b01      	cmp	r3, #1
90005ba0:	d107      	bne.n	90005bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005ba2:	687b      	ldr	r3, [r7, #4]
90005ba4:	689a      	ldr	r2, [r3, #8]
90005ba6:	687b      	ldr	r3, [r7, #4]
90005ba8:	681b      	ldr	r3, [r3, #0]
90005baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005bae:	609a      	str	r2, [r3, #8]
90005bb0:	e006      	b.n	90005bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005bb2:	687b      	ldr	r3, [r7, #4]
90005bb4:	689a      	ldr	r2, [r3, #8]
90005bb6:	687b      	ldr	r3, [r7, #4]
90005bb8:	681b      	ldr	r3, [r3, #0]
90005bba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005bc0:	687b      	ldr	r3, [r7, #4]
90005bc2:	68db      	ldr	r3, [r3, #12]
90005bc4:	2b02      	cmp	r3, #2
90005bc6:	d108      	bne.n	90005bda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005bc8:	687b      	ldr	r3, [r7, #4]
90005bca:	681b      	ldr	r3, [r3, #0]
90005bcc:	685a      	ldr	r2, [r3, #4]
90005bce:	687b      	ldr	r3, [r7, #4]
90005bd0:	681b      	ldr	r3, [r3, #0]
90005bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005bd6:	605a      	str	r2, [r3, #4]
90005bd8:	e007      	b.n	90005bea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005bda:	687b      	ldr	r3, [r7, #4]
90005bdc:	681b      	ldr	r3, [r3, #0]
90005bde:	685a      	ldr	r2, [r3, #4]
90005be0:	687b      	ldr	r3, [r7, #4]
90005be2:	681b      	ldr	r3, [r3, #0]
90005be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005bea:	687b      	ldr	r3, [r7, #4]
90005bec:	681b      	ldr	r3, [r3, #0]
90005bee:	6859      	ldr	r1, [r3, #4]
90005bf0:	687b      	ldr	r3, [r7, #4]
90005bf2:	681a      	ldr	r2, [r3, #0]
90005bf4:	4b1d      	ldr	r3, [pc, #116]	@ (90005c6c <HAL_I2C_Init+0x134>)
90005bf6:	430b      	orrs	r3, r1
90005bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005bfa:	687b      	ldr	r3, [r7, #4]
90005bfc:	681b      	ldr	r3, [r3, #0]
90005bfe:	68da      	ldr	r2, [r3, #12]
90005c00:	687b      	ldr	r3, [r7, #4]
90005c02:	681b      	ldr	r3, [r3, #0]
90005c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005c0a:	687b      	ldr	r3, [r7, #4]
90005c0c:	691a      	ldr	r2, [r3, #16]
90005c0e:	687b      	ldr	r3, [r7, #4]
90005c10:	695b      	ldr	r3, [r3, #20]
90005c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005c16:	687b      	ldr	r3, [r7, #4]
90005c18:	699b      	ldr	r3, [r3, #24]
90005c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005c1c:	687b      	ldr	r3, [r7, #4]
90005c1e:	681b      	ldr	r3, [r3, #0]
90005c20:	430a      	orrs	r2, r1
90005c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005c24:	687b      	ldr	r3, [r7, #4]
90005c26:	69d9      	ldr	r1, [r3, #28]
90005c28:	687b      	ldr	r3, [r7, #4]
90005c2a:	6a1a      	ldr	r2, [r3, #32]
90005c2c:	687b      	ldr	r3, [r7, #4]
90005c2e:	681b      	ldr	r3, [r3, #0]
90005c30:	430a      	orrs	r2, r1
90005c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005c34:	687b      	ldr	r3, [r7, #4]
90005c36:	681b      	ldr	r3, [r3, #0]
90005c38:	681a      	ldr	r2, [r3, #0]
90005c3a:	687b      	ldr	r3, [r7, #4]
90005c3c:	681b      	ldr	r3, [r3, #0]
90005c3e:	f042 0201 	orr.w	r2, r2, #1
90005c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005c44:	687b      	ldr	r3, [r7, #4]
90005c46:	2200      	movs	r2, #0
90005c48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005c4a:	687b      	ldr	r3, [r7, #4]
90005c4c:	2220      	movs	r2, #32
90005c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005c52:	687b      	ldr	r3, [r7, #4]
90005c54:	2200      	movs	r2, #0
90005c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005c58:	687b      	ldr	r3, [r7, #4]
90005c5a:	2200      	movs	r2, #0
90005c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005c60:	2300      	movs	r3, #0
}
90005c62:	4618      	mov	r0, r3
90005c64:	3708      	adds	r7, #8
90005c66:	46bd      	mov	sp, r7
90005c68:	bd80      	pop	{r7, pc}
90005c6a:	bf00      	nop
90005c6c:	02008000 	.word	0x02008000

90005c70 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005c70:	b480      	push	{r7}
90005c72:	b083      	sub	sp, #12
90005c74:	af00      	add	r7, sp, #0
90005c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005c78:	bf00      	nop
90005c7a:	370c      	adds	r7, #12
90005c7c:	46bd      	mov	sp, r7
90005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90005c82:	4770      	bx	lr

90005c84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005c84:	b580      	push	{r7, lr}
90005c86:	b088      	sub	sp, #32
90005c88:	af02      	add	r7, sp, #8
90005c8a:	60f8      	str	r0, [r7, #12]
90005c8c:	4608      	mov	r0, r1
90005c8e:	4611      	mov	r1, r2
90005c90:	461a      	mov	r2, r3
90005c92:	4603      	mov	r3, r0
90005c94:	817b      	strh	r3, [r7, #10]
90005c96:	460b      	mov	r3, r1
90005c98:	813b      	strh	r3, [r7, #8]
90005c9a:	4613      	mov	r3, r2
90005c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005c9e:	68fb      	ldr	r3, [r7, #12]
90005ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005ca4:	b2db      	uxtb	r3, r3
90005ca6:	2b20      	cmp	r3, #32
90005ca8:	f040 80fd 	bne.w	90005ea6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005cac:	6a3b      	ldr	r3, [r7, #32]
90005cae:	2b00      	cmp	r3, #0
90005cb0:	d002      	beq.n	90005cb8 <HAL_I2C_Mem_Read+0x34>
90005cb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005cb4:	2b00      	cmp	r3, #0
90005cb6:	d105      	bne.n	90005cc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005cb8:	68fb      	ldr	r3, [r7, #12]
90005cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005cbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005cc0:	2301      	movs	r3, #1
90005cc2:	e0f1      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005cc4:	68fb      	ldr	r3, [r7, #12]
90005cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005cca:	2b01      	cmp	r3, #1
90005ccc:	d101      	bne.n	90005cd2 <HAL_I2C_Mem_Read+0x4e>
90005cce:	2302      	movs	r3, #2
90005cd0:	e0ea      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
90005cd2:	68fb      	ldr	r3, [r7, #12]
90005cd4:	2201      	movs	r2, #1
90005cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005cda:	f7fd fafb 	bl	900032d4 <HAL_GetTick>
90005cde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005ce0:	697b      	ldr	r3, [r7, #20]
90005ce2:	9300      	str	r3, [sp, #0]
90005ce4:	2319      	movs	r3, #25
90005ce6:	2201      	movs	r2, #1
90005ce8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005cec:	68f8      	ldr	r0, [r7, #12]
90005cee:	f000 f975 	bl	90005fdc <I2C_WaitOnFlagUntilTimeout>
90005cf2:	4603      	mov	r3, r0
90005cf4:	2b00      	cmp	r3, #0
90005cf6:	d001      	beq.n	90005cfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005cf8:	2301      	movs	r3, #1
90005cfa:	e0d5      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005cfc:	68fb      	ldr	r3, [r7, #12]
90005cfe:	2222      	movs	r2, #34	@ 0x22
90005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005d04:	68fb      	ldr	r3, [r7, #12]
90005d06:	2240      	movs	r2, #64	@ 0x40
90005d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005d0c:	68fb      	ldr	r3, [r7, #12]
90005d0e:	2200      	movs	r2, #0
90005d10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005d12:	68fb      	ldr	r3, [r7, #12]
90005d14:	6a3a      	ldr	r2, [r7, #32]
90005d16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005d18:	68fb      	ldr	r3, [r7, #12]
90005d1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005d1e:	68fb      	ldr	r3, [r7, #12]
90005d20:	2200      	movs	r2, #0
90005d22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005d24:	88f8      	ldrh	r0, [r7, #6]
90005d26:	893a      	ldrh	r2, [r7, #8]
90005d28:	8979      	ldrh	r1, [r7, #10]
90005d2a:	697b      	ldr	r3, [r7, #20]
90005d2c:	9301      	str	r3, [sp, #4]
90005d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d30:	9300      	str	r3, [sp, #0]
90005d32:	4603      	mov	r3, r0
90005d34:	68f8      	ldr	r0, [r7, #12]
90005d36:	f000 f8d9 	bl	90005eec <I2C_RequestMemoryRead>
90005d3a:	4603      	mov	r3, r0
90005d3c:	2b00      	cmp	r3, #0
90005d3e:	d005      	beq.n	90005d4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005d40:	68fb      	ldr	r3, [r7, #12]
90005d42:	2200      	movs	r2, #0
90005d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005d48:	2301      	movs	r3, #1
90005d4a:	e0ad      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005d4c:	68fb      	ldr	r3, [r7, #12]
90005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d50:	b29b      	uxth	r3, r3
90005d52:	2bff      	cmp	r3, #255	@ 0xff
90005d54:	d90e      	bls.n	90005d74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005d56:	68fb      	ldr	r3, [r7, #12]
90005d58:	22ff      	movs	r2, #255	@ 0xff
90005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005d5c:	68fb      	ldr	r3, [r7, #12]
90005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d60:	b2da      	uxtb	r2, r3
90005d62:	8979      	ldrh	r1, [r7, #10]
90005d64:	4b52      	ldr	r3, [pc, #328]	@ (90005eb0 <HAL_I2C_Mem_Read+0x22c>)
90005d66:	9300      	str	r3, [sp, #0]
90005d68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005d6c:	68f8      	ldr	r0, [r7, #12]
90005d6e:	f000 faf9 	bl	90006364 <I2C_TransferConfig>
90005d72:	e00f      	b.n	90005d94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005d74:	68fb      	ldr	r3, [r7, #12]
90005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d78:	b29a      	uxth	r2, r3
90005d7a:	68fb      	ldr	r3, [r7, #12]
90005d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005d7e:	68fb      	ldr	r3, [r7, #12]
90005d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d82:	b2da      	uxtb	r2, r3
90005d84:	8979      	ldrh	r1, [r7, #10]
90005d86:	4b4a      	ldr	r3, [pc, #296]	@ (90005eb0 <HAL_I2C_Mem_Read+0x22c>)
90005d88:	9300      	str	r3, [sp, #0]
90005d8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005d8e:	68f8      	ldr	r0, [r7, #12]
90005d90:	f000 fae8 	bl	90006364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005d94:	697b      	ldr	r3, [r7, #20]
90005d96:	9300      	str	r3, [sp, #0]
90005d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d9a:	2200      	movs	r2, #0
90005d9c:	2104      	movs	r1, #4
90005d9e:	68f8      	ldr	r0, [r7, #12]
90005da0:	f000 f91c 	bl	90005fdc <I2C_WaitOnFlagUntilTimeout>
90005da4:	4603      	mov	r3, r0
90005da6:	2b00      	cmp	r3, #0
90005da8:	d001      	beq.n	90005dae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005daa:	2301      	movs	r3, #1
90005dac:	e07c      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005dae:	68fb      	ldr	r3, [r7, #12]
90005db0:	681b      	ldr	r3, [r3, #0]
90005db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005db4:	68fb      	ldr	r3, [r7, #12]
90005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005db8:	b2d2      	uxtb	r2, r2
90005dba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005dbc:	68fb      	ldr	r3, [r7, #12]
90005dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005dc0:	1c5a      	adds	r2, r3, #1
90005dc2:	68fb      	ldr	r3, [r7, #12]
90005dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005dc6:	68fb      	ldr	r3, [r7, #12]
90005dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005dca:	3b01      	subs	r3, #1
90005dcc:	b29a      	uxth	r2, r3
90005dce:	68fb      	ldr	r3, [r7, #12]
90005dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005dd2:	68fb      	ldr	r3, [r7, #12]
90005dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005dd6:	b29b      	uxth	r3, r3
90005dd8:	3b01      	subs	r3, #1
90005dda:	b29a      	uxth	r2, r3
90005ddc:	68fb      	ldr	r3, [r7, #12]
90005dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005de0:	68fb      	ldr	r3, [r7, #12]
90005de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005de4:	b29b      	uxth	r3, r3
90005de6:	2b00      	cmp	r3, #0
90005de8:	d034      	beq.n	90005e54 <HAL_I2C_Mem_Read+0x1d0>
90005dea:	68fb      	ldr	r3, [r7, #12]
90005dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005dee:	2b00      	cmp	r3, #0
90005df0:	d130      	bne.n	90005e54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005df2:	697b      	ldr	r3, [r7, #20]
90005df4:	9300      	str	r3, [sp, #0]
90005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005df8:	2200      	movs	r2, #0
90005dfa:	2180      	movs	r1, #128	@ 0x80
90005dfc:	68f8      	ldr	r0, [r7, #12]
90005dfe:	f000 f8ed 	bl	90005fdc <I2C_WaitOnFlagUntilTimeout>
90005e02:	4603      	mov	r3, r0
90005e04:	2b00      	cmp	r3, #0
90005e06:	d001      	beq.n	90005e0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005e08:	2301      	movs	r3, #1
90005e0a:	e04d      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005e0c:	68fb      	ldr	r3, [r7, #12]
90005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e10:	b29b      	uxth	r3, r3
90005e12:	2bff      	cmp	r3, #255	@ 0xff
90005e14:	d90e      	bls.n	90005e34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005e16:	68fb      	ldr	r3, [r7, #12]
90005e18:	22ff      	movs	r2, #255	@ 0xff
90005e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005e1c:	68fb      	ldr	r3, [r7, #12]
90005e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e20:	b2da      	uxtb	r2, r3
90005e22:	8979      	ldrh	r1, [r7, #10]
90005e24:	2300      	movs	r3, #0
90005e26:	9300      	str	r3, [sp, #0]
90005e28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005e2c:	68f8      	ldr	r0, [r7, #12]
90005e2e:	f000 fa99 	bl	90006364 <I2C_TransferConfig>
90005e32:	e00f      	b.n	90005e54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005e34:	68fb      	ldr	r3, [r7, #12]
90005e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e38:	b29a      	uxth	r2, r3
90005e3a:	68fb      	ldr	r3, [r7, #12]
90005e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005e3e:	68fb      	ldr	r3, [r7, #12]
90005e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e42:	b2da      	uxtb	r2, r3
90005e44:	8979      	ldrh	r1, [r7, #10]
90005e46:	2300      	movs	r3, #0
90005e48:	9300      	str	r3, [sp, #0]
90005e4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005e4e:	68f8      	ldr	r0, [r7, #12]
90005e50:	f000 fa88 	bl	90006364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005e54:	68fb      	ldr	r3, [r7, #12]
90005e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e58:	b29b      	uxth	r3, r3
90005e5a:	2b00      	cmp	r3, #0
90005e5c:	d19a      	bne.n	90005d94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005e5e:	697a      	ldr	r2, [r7, #20]
90005e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005e62:	68f8      	ldr	r0, [r7, #12]
90005e64:	f000 f95a 	bl	9000611c <I2C_WaitOnSTOPFlagUntilTimeout>
90005e68:	4603      	mov	r3, r0
90005e6a:	2b00      	cmp	r3, #0
90005e6c:	d001      	beq.n	90005e72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005e6e:	2301      	movs	r3, #1
90005e70:	e01a      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005e72:	68fb      	ldr	r3, [r7, #12]
90005e74:	681b      	ldr	r3, [r3, #0]
90005e76:	2220      	movs	r2, #32
90005e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005e7a:	68fb      	ldr	r3, [r7, #12]
90005e7c:	681b      	ldr	r3, [r3, #0]
90005e7e:	6859      	ldr	r1, [r3, #4]
90005e80:	68fb      	ldr	r3, [r7, #12]
90005e82:	681a      	ldr	r2, [r3, #0]
90005e84:	4b0b      	ldr	r3, [pc, #44]	@ (90005eb4 <HAL_I2C_Mem_Read+0x230>)
90005e86:	400b      	ands	r3, r1
90005e88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005e8a:	68fb      	ldr	r3, [r7, #12]
90005e8c:	2220      	movs	r2, #32
90005e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005e92:	68fb      	ldr	r3, [r7, #12]
90005e94:	2200      	movs	r2, #0
90005e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005e9a:	68fb      	ldr	r3, [r7, #12]
90005e9c:	2200      	movs	r2, #0
90005e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005ea2:	2300      	movs	r3, #0
90005ea4:	e000      	b.n	90005ea8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005ea6:	2302      	movs	r3, #2
  }
}
90005ea8:	4618      	mov	r0, r3
90005eaa:	3718      	adds	r7, #24
90005eac:	46bd      	mov	sp, r7
90005eae:	bd80      	pop	{r7, pc}
90005eb0:	80002400 	.word	0x80002400
90005eb4:	fe00e800 	.word	0xfe00e800

90005eb8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005eb8:	b480      	push	{r7}
90005eba:	b083      	sub	sp, #12
90005ebc:	af00      	add	r7, sp, #0
90005ebe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005ec0:	687b      	ldr	r3, [r7, #4]
90005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005ec6:	b2db      	uxtb	r3, r3
}
90005ec8:	4618      	mov	r0, r3
90005eca:	370c      	adds	r7, #12
90005ecc:	46bd      	mov	sp, r7
90005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
90005ed2:	4770      	bx	lr

90005ed4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005ed4:	b480      	push	{r7}
90005ed6:	b083      	sub	sp, #12
90005ed8:	af00      	add	r7, sp, #0
90005eda:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005edc:	687b      	ldr	r3, [r7, #4]
90005ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005ee0:	4618      	mov	r0, r3
90005ee2:	370c      	adds	r7, #12
90005ee4:	46bd      	mov	sp, r7
90005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
90005eea:	4770      	bx	lr

90005eec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005eec:	b580      	push	{r7, lr}
90005eee:	b086      	sub	sp, #24
90005ef0:	af02      	add	r7, sp, #8
90005ef2:	60f8      	str	r0, [r7, #12]
90005ef4:	4608      	mov	r0, r1
90005ef6:	4611      	mov	r1, r2
90005ef8:	461a      	mov	r2, r3
90005efa:	4603      	mov	r3, r0
90005efc:	817b      	strh	r3, [r7, #10]
90005efe:	460b      	mov	r3, r1
90005f00:	813b      	strh	r3, [r7, #8]
90005f02:	4613      	mov	r3, r2
90005f04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005f06:	88fb      	ldrh	r3, [r7, #6]
90005f08:	b2da      	uxtb	r2, r3
90005f0a:	8979      	ldrh	r1, [r7, #10]
90005f0c:	4b20      	ldr	r3, [pc, #128]	@ (90005f90 <I2C_RequestMemoryRead+0xa4>)
90005f0e:	9300      	str	r3, [sp, #0]
90005f10:	2300      	movs	r3, #0
90005f12:	68f8      	ldr	r0, [r7, #12]
90005f14:	f000 fa26 	bl	90006364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005f18:	69fa      	ldr	r2, [r7, #28]
90005f1a:	69b9      	ldr	r1, [r7, #24]
90005f1c:	68f8      	ldr	r0, [r7, #12]
90005f1e:	f000 f8b6 	bl	9000608e <I2C_WaitOnTXISFlagUntilTimeout>
90005f22:	4603      	mov	r3, r0
90005f24:	2b00      	cmp	r3, #0
90005f26:	d001      	beq.n	90005f2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005f28:	2301      	movs	r3, #1
90005f2a:	e02c      	b.n	90005f86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005f2c:	88fb      	ldrh	r3, [r7, #6]
90005f2e:	2b01      	cmp	r3, #1
90005f30:	d105      	bne.n	90005f3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005f32:	893b      	ldrh	r3, [r7, #8]
90005f34:	b2da      	uxtb	r2, r3
90005f36:	68fb      	ldr	r3, [r7, #12]
90005f38:	681b      	ldr	r3, [r3, #0]
90005f3a:	629a      	str	r2, [r3, #40]	@ 0x28
90005f3c:	e015      	b.n	90005f6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005f3e:	893b      	ldrh	r3, [r7, #8]
90005f40:	0a1b      	lsrs	r3, r3, #8
90005f42:	b29b      	uxth	r3, r3
90005f44:	b2da      	uxtb	r2, r3
90005f46:	68fb      	ldr	r3, [r7, #12]
90005f48:	681b      	ldr	r3, [r3, #0]
90005f4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005f4c:	69fa      	ldr	r2, [r7, #28]
90005f4e:	69b9      	ldr	r1, [r7, #24]
90005f50:	68f8      	ldr	r0, [r7, #12]
90005f52:	f000 f89c 	bl	9000608e <I2C_WaitOnTXISFlagUntilTimeout>
90005f56:	4603      	mov	r3, r0
90005f58:	2b00      	cmp	r3, #0
90005f5a:	d001      	beq.n	90005f60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005f5c:	2301      	movs	r3, #1
90005f5e:	e012      	b.n	90005f86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005f60:	893b      	ldrh	r3, [r7, #8]
90005f62:	b2da      	uxtb	r2, r3
90005f64:	68fb      	ldr	r3, [r7, #12]
90005f66:	681b      	ldr	r3, [r3, #0]
90005f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005f6a:	69fb      	ldr	r3, [r7, #28]
90005f6c:	9300      	str	r3, [sp, #0]
90005f6e:	69bb      	ldr	r3, [r7, #24]
90005f70:	2200      	movs	r2, #0
90005f72:	2140      	movs	r1, #64	@ 0x40
90005f74:	68f8      	ldr	r0, [r7, #12]
90005f76:	f000 f831 	bl	90005fdc <I2C_WaitOnFlagUntilTimeout>
90005f7a:	4603      	mov	r3, r0
90005f7c:	2b00      	cmp	r3, #0
90005f7e:	d001      	beq.n	90005f84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005f80:	2301      	movs	r3, #1
90005f82:	e000      	b.n	90005f86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005f84:	2300      	movs	r3, #0
}
90005f86:	4618      	mov	r0, r3
90005f88:	3710      	adds	r7, #16
90005f8a:	46bd      	mov	sp, r7
90005f8c:	bd80      	pop	{r7, pc}
90005f8e:	bf00      	nop
90005f90:	80002000 	.word	0x80002000

90005f94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005f94:	b480      	push	{r7}
90005f96:	b083      	sub	sp, #12
90005f98:	af00      	add	r7, sp, #0
90005f9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005f9c:	687b      	ldr	r3, [r7, #4]
90005f9e:	681b      	ldr	r3, [r3, #0]
90005fa0:	699b      	ldr	r3, [r3, #24]
90005fa2:	f003 0302 	and.w	r3, r3, #2
90005fa6:	2b02      	cmp	r3, #2
90005fa8:	d103      	bne.n	90005fb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005faa:	687b      	ldr	r3, [r7, #4]
90005fac:	681b      	ldr	r3, [r3, #0]
90005fae:	2200      	movs	r2, #0
90005fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005fb2:	687b      	ldr	r3, [r7, #4]
90005fb4:	681b      	ldr	r3, [r3, #0]
90005fb6:	699b      	ldr	r3, [r3, #24]
90005fb8:	f003 0301 	and.w	r3, r3, #1
90005fbc:	2b01      	cmp	r3, #1
90005fbe:	d007      	beq.n	90005fd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005fc0:	687b      	ldr	r3, [r7, #4]
90005fc2:	681b      	ldr	r3, [r3, #0]
90005fc4:	699a      	ldr	r2, [r3, #24]
90005fc6:	687b      	ldr	r3, [r7, #4]
90005fc8:	681b      	ldr	r3, [r3, #0]
90005fca:	f042 0201 	orr.w	r2, r2, #1
90005fce:	619a      	str	r2, [r3, #24]
  }
}
90005fd0:	bf00      	nop
90005fd2:	370c      	adds	r7, #12
90005fd4:	46bd      	mov	sp, r7
90005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
90005fda:	4770      	bx	lr

90005fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005fdc:	b580      	push	{r7, lr}
90005fde:	b084      	sub	sp, #16
90005fe0:	af00      	add	r7, sp, #0
90005fe2:	60f8      	str	r0, [r7, #12]
90005fe4:	60b9      	str	r1, [r7, #8]
90005fe6:	603b      	str	r3, [r7, #0]
90005fe8:	4613      	mov	r3, r2
90005fea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005fec:	e03b      	b.n	90006066 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005fee:	69ba      	ldr	r2, [r7, #24]
90005ff0:	6839      	ldr	r1, [r7, #0]
90005ff2:	68f8      	ldr	r0, [r7, #12]
90005ff4:	f000 f8d6 	bl	900061a4 <I2C_IsErrorOccurred>
90005ff8:	4603      	mov	r3, r0
90005ffa:	2b00      	cmp	r3, #0
90005ffc:	d001      	beq.n	90006002 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90005ffe:	2301      	movs	r3, #1
90006000:	e041      	b.n	90006086 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006002:	683b      	ldr	r3, [r7, #0]
90006004:	f1b3 3fff 	cmp.w	r3, #4294967295
90006008:	d02d      	beq.n	90006066 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000600a:	f7fd f963 	bl	900032d4 <HAL_GetTick>
9000600e:	4602      	mov	r2, r0
90006010:	69bb      	ldr	r3, [r7, #24]
90006012:	1ad3      	subs	r3, r2, r3
90006014:	683a      	ldr	r2, [r7, #0]
90006016:	429a      	cmp	r2, r3
90006018:	d302      	bcc.n	90006020 <I2C_WaitOnFlagUntilTimeout+0x44>
9000601a:	683b      	ldr	r3, [r7, #0]
9000601c:	2b00      	cmp	r3, #0
9000601e:	d122      	bne.n	90006066 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90006020:	68fb      	ldr	r3, [r7, #12]
90006022:	681b      	ldr	r3, [r3, #0]
90006024:	699a      	ldr	r2, [r3, #24]
90006026:	68bb      	ldr	r3, [r7, #8]
90006028:	4013      	ands	r3, r2
9000602a:	68ba      	ldr	r2, [r7, #8]
9000602c:	429a      	cmp	r2, r3
9000602e:	bf0c      	ite	eq
90006030:	2301      	moveq	r3, #1
90006032:	2300      	movne	r3, #0
90006034:	b2db      	uxtb	r3, r3
90006036:	461a      	mov	r2, r3
90006038:	79fb      	ldrb	r3, [r7, #7]
9000603a:	429a      	cmp	r2, r3
9000603c:	d113      	bne.n	90006066 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000603e:	68fb      	ldr	r3, [r7, #12]
90006040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006042:	f043 0220 	orr.w	r2, r3, #32
90006046:	68fb      	ldr	r3, [r7, #12]
90006048:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000604a:	68fb      	ldr	r3, [r7, #12]
9000604c:	2220      	movs	r2, #32
9000604e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006052:	68fb      	ldr	r3, [r7, #12]
90006054:	2200      	movs	r2, #0
90006056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
9000605a:	68fb      	ldr	r3, [r7, #12]
9000605c:	2200      	movs	r2, #0
9000605e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90006062:	2301      	movs	r3, #1
90006064:	e00f      	b.n	90006086 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006066:	68fb      	ldr	r3, [r7, #12]
90006068:	681b      	ldr	r3, [r3, #0]
9000606a:	699a      	ldr	r2, [r3, #24]
9000606c:	68bb      	ldr	r3, [r7, #8]
9000606e:	4013      	ands	r3, r2
90006070:	68ba      	ldr	r2, [r7, #8]
90006072:	429a      	cmp	r2, r3
90006074:	bf0c      	ite	eq
90006076:	2301      	moveq	r3, #1
90006078:	2300      	movne	r3, #0
9000607a:	b2db      	uxtb	r3, r3
9000607c:	461a      	mov	r2, r3
9000607e:	79fb      	ldrb	r3, [r7, #7]
90006080:	429a      	cmp	r2, r3
90006082:	d0b4      	beq.n	90005fee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90006084:	2300      	movs	r3, #0
}
90006086:	4618      	mov	r0, r3
90006088:	3710      	adds	r7, #16
9000608a:	46bd      	mov	sp, r7
9000608c:	bd80      	pop	{r7, pc}

9000608e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000608e:	b580      	push	{r7, lr}
90006090:	b084      	sub	sp, #16
90006092:	af00      	add	r7, sp, #0
90006094:	60f8      	str	r0, [r7, #12]
90006096:	60b9      	str	r1, [r7, #8]
90006098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000609a:	e033      	b.n	90006104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
9000609c:	687a      	ldr	r2, [r7, #4]
9000609e:	68b9      	ldr	r1, [r7, #8]
900060a0:	68f8      	ldr	r0, [r7, #12]
900060a2:	f000 f87f 	bl	900061a4 <I2C_IsErrorOccurred>
900060a6:	4603      	mov	r3, r0
900060a8:	2b00      	cmp	r3, #0
900060aa:	d001      	beq.n	900060b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900060ac:	2301      	movs	r3, #1
900060ae:	e031      	b.n	90006114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900060b0:	68bb      	ldr	r3, [r7, #8]
900060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
900060b6:	d025      	beq.n	90006104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900060b8:	f7fd f90c 	bl	900032d4 <HAL_GetTick>
900060bc:	4602      	mov	r2, r0
900060be:	687b      	ldr	r3, [r7, #4]
900060c0:	1ad3      	subs	r3, r2, r3
900060c2:	68ba      	ldr	r2, [r7, #8]
900060c4:	429a      	cmp	r2, r3
900060c6:	d302      	bcc.n	900060ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
900060c8:	68bb      	ldr	r3, [r7, #8]
900060ca:	2b00      	cmp	r3, #0
900060cc:	d11a      	bne.n	90006104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900060ce:	68fb      	ldr	r3, [r7, #12]
900060d0:	681b      	ldr	r3, [r3, #0]
900060d2:	699b      	ldr	r3, [r3, #24]
900060d4:	f003 0302 	and.w	r3, r3, #2
900060d8:	2b02      	cmp	r3, #2
900060da:	d013      	beq.n	90006104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900060dc:	68fb      	ldr	r3, [r7, #12]
900060de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900060e0:	f043 0220 	orr.w	r2, r3, #32
900060e4:	68fb      	ldr	r3, [r7, #12]
900060e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900060e8:	68fb      	ldr	r3, [r7, #12]
900060ea:	2220      	movs	r2, #32
900060ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900060f0:	68fb      	ldr	r3, [r7, #12]
900060f2:	2200      	movs	r2, #0
900060f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
900060f8:	68fb      	ldr	r3, [r7, #12]
900060fa:	2200      	movs	r2, #0
900060fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006100:	2301      	movs	r3, #1
90006102:	e007      	b.n	90006114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006104:	68fb      	ldr	r3, [r7, #12]
90006106:	681b      	ldr	r3, [r3, #0]
90006108:	699b      	ldr	r3, [r3, #24]
9000610a:	f003 0302 	and.w	r3, r3, #2
9000610e:	2b02      	cmp	r3, #2
90006110:	d1c4      	bne.n	9000609c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90006112:	2300      	movs	r3, #0
}
90006114:	4618      	mov	r0, r3
90006116:	3710      	adds	r7, #16
90006118:	46bd      	mov	sp, r7
9000611a:	bd80      	pop	{r7, pc}

9000611c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000611c:	b580      	push	{r7, lr}
9000611e:	b084      	sub	sp, #16
90006120:	af00      	add	r7, sp, #0
90006122:	60f8      	str	r0, [r7, #12]
90006124:	60b9      	str	r1, [r7, #8]
90006126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006128:	e02f      	b.n	9000618a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
9000612a:	687a      	ldr	r2, [r7, #4]
9000612c:	68b9      	ldr	r1, [r7, #8]
9000612e:	68f8      	ldr	r0, [r7, #12]
90006130:	f000 f838 	bl	900061a4 <I2C_IsErrorOccurred>
90006134:	4603      	mov	r3, r0
90006136:	2b00      	cmp	r3, #0
90006138:	d001      	beq.n	9000613e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
9000613a:	2301      	movs	r3, #1
9000613c:	e02d      	b.n	9000619a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000613e:	f7fd f8c9 	bl	900032d4 <HAL_GetTick>
90006142:	4602      	mov	r2, r0
90006144:	687b      	ldr	r3, [r7, #4]
90006146:	1ad3      	subs	r3, r2, r3
90006148:	68ba      	ldr	r2, [r7, #8]
9000614a:	429a      	cmp	r2, r3
9000614c:	d302      	bcc.n	90006154 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
9000614e:	68bb      	ldr	r3, [r7, #8]
90006150:	2b00      	cmp	r3, #0
90006152:	d11a      	bne.n	9000618a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90006154:	68fb      	ldr	r3, [r7, #12]
90006156:	681b      	ldr	r3, [r3, #0]
90006158:	699b      	ldr	r3, [r3, #24]
9000615a:	f003 0320 	and.w	r3, r3, #32
9000615e:	2b20      	cmp	r3, #32
90006160:	d013      	beq.n	9000618a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006162:	68fb      	ldr	r3, [r7, #12]
90006164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006166:	f043 0220 	orr.w	r2, r3, #32
9000616a:	68fb      	ldr	r3, [r7, #12]
9000616c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
9000616e:	68fb      	ldr	r3, [r7, #12]
90006170:	2220      	movs	r2, #32
90006172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90006176:	68fb      	ldr	r3, [r7, #12]
90006178:	2200      	movs	r2, #0
9000617a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
9000617e:	68fb      	ldr	r3, [r7, #12]
90006180:	2200      	movs	r2, #0
90006182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90006186:	2301      	movs	r3, #1
90006188:	e007      	b.n	9000619a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000618a:	68fb      	ldr	r3, [r7, #12]
9000618c:	681b      	ldr	r3, [r3, #0]
9000618e:	699b      	ldr	r3, [r3, #24]
90006190:	f003 0320 	and.w	r3, r3, #32
90006194:	2b20      	cmp	r3, #32
90006196:	d1c8      	bne.n	9000612a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006198:	2300      	movs	r3, #0
}
9000619a:	4618      	mov	r0, r3
9000619c:	3710      	adds	r7, #16
9000619e:	46bd      	mov	sp, r7
900061a0:	bd80      	pop	{r7, pc}
	...

900061a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900061a4:	b580      	push	{r7, lr}
900061a6:	b08a      	sub	sp, #40	@ 0x28
900061a8:	af00      	add	r7, sp, #0
900061aa:	60f8      	str	r0, [r7, #12]
900061ac:	60b9      	str	r1, [r7, #8]
900061ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900061b0:	2300      	movs	r3, #0
900061b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
900061b6:	68fb      	ldr	r3, [r7, #12]
900061b8:	681b      	ldr	r3, [r3, #0]
900061ba:	699b      	ldr	r3, [r3, #24]
900061bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
900061be:	2300      	movs	r3, #0
900061c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
900061c2:	687b      	ldr	r3, [r7, #4]
900061c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900061c6:	69bb      	ldr	r3, [r7, #24]
900061c8:	f003 0310 	and.w	r3, r3, #16
900061cc:	2b00      	cmp	r3, #0
900061ce:	d068      	beq.n	900062a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900061d0:	68fb      	ldr	r3, [r7, #12]
900061d2:	681b      	ldr	r3, [r3, #0]
900061d4:	2210      	movs	r2, #16
900061d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900061d8:	e049      	b.n	9000626e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900061da:	68bb      	ldr	r3, [r7, #8]
900061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
900061e0:	d045      	beq.n	9000626e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900061e2:	f7fd f877 	bl	900032d4 <HAL_GetTick>
900061e6:	4602      	mov	r2, r0
900061e8:	69fb      	ldr	r3, [r7, #28]
900061ea:	1ad3      	subs	r3, r2, r3
900061ec:	68ba      	ldr	r2, [r7, #8]
900061ee:	429a      	cmp	r2, r3
900061f0:	d302      	bcc.n	900061f8 <I2C_IsErrorOccurred+0x54>
900061f2:	68bb      	ldr	r3, [r7, #8]
900061f4:	2b00      	cmp	r3, #0
900061f6:	d13a      	bne.n	9000626e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900061f8:	68fb      	ldr	r3, [r7, #12]
900061fa:	681b      	ldr	r3, [r3, #0]
900061fc:	685b      	ldr	r3, [r3, #4]
900061fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
90006202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90006204:	68fb      	ldr	r3, [r7, #12]
90006206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
9000620a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000620c:	68fb      	ldr	r3, [r7, #12]
9000620e:	681b      	ldr	r3, [r3, #0]
90006210:	699b      	ldr	r3, [r3, #24]
90006212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90006216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000621a:	d121      	bne.n	90006260 <I2C_IsErrorOccurred+0xbc>
9000621c:	697b      	ldr	r3, [r7, #20]
9000621e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90006222:	d01d      	beq.n	90006260 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90006224:	7cfb      	ldrb	r3, [r7, #19]
90006226:	2b20      	cmp	r3, #32
90006228:	d01a      	beq.n	90006260 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000622a:	68fb      	ldr	r3, [r7, #12]
9000622c:	681b      	ldr	r3, [r3, #0]
9000622e:	685a      	ldr	r2, [r3, #4]
90006230:	68fb      	ldr	r3, [r7, #12]
90006232:	681b      	ldr	r3, [r3, #0]
90006234:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006238:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
9000623a:	f7fd f84b 	bl	900032d4 <HAL_GetTick>
9000623e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006240:	e00e      	b.n	90006260 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90006242:	f7fd f847 	bl	900032d4 <HAL_GetTick>
90006246:	4602      	mov	r2, r0
90006248:	69fb      	ldr	r3, [r7, #28]
9000624a:	1ad3      	subs	r3, r2, r3
9000624c:	2b19      	cmp	r3, #25
9000624e:	d907      	bls.n	90006260 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90006250:	6a3b      	ldr	r3, [r7, #32]
90006252:	f043 0320 	orr.w	r3, r3, #32
90006256:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006258:	2301      	movs	r3, #1
9000625a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
9000625e:	e006      	b.n	9000626e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006260:	68fb      	ldr	r3, [r7, #12]
90006262:	681b      	ldr	r3, [r3, #0]
90006264:	699b      	ldr	r3, [r3, #24]
90006266:	f003 0320 	and.w	r3, r3, #32
9000626a:	2b20      	cmp	r3, #32
9000626c:	d1e9      	bne.n	90006242 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000626e:	68fb      	ldr	r3, [r7, #12]
90006270:	681b      	ldr	r3, [r3, #0]
90006272:	699b      	ldr	r3, [r3, #24]
90006274:	f003 0320 	and.w	r3, r3, #32
90006278:	2b20      	cmp	r3, #32
9000627a:	d003      	beq.n	90006284 <I2C_IsErrorOccurred+0xe0>
9000627c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006280:	2b00      	cmp	r3, #0
90006282:	d0aa      	beq.n	900061da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006288:	2b00      	cmp	r3, #0
9000628a:	d103      	bne.n	90006294 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000628c:	68fb      	ldr	r3, [r7, #12]
9000628e:	681b      	ldr	r3, [r3, #0]
90006290:	2220      	movs	r2, #32
90006292:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006294:	6a3b      	ldr	r3, [r7, #32]
90006296:	f043 0304 	orr.w	r3, r3, #4
9000629a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
9000629c:	2301      	movs	r3, #1
9000629e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900062a2:	68fb      	ldr	r3, [r7, #12]
900062a4:	681b      	ldr	r3, [r3, #0]
900062a6:	699b      	ldr	r3, [r3, #24]
900062a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900062aa:	69bb      	ldr	r3, [r7, #24]
900062ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900062b0:	2b00      	cmp	r3, #0
900062b2:	d00b      	beq.n	900062cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
900062b4:	6a3b      	ldr	r3, [r7, #32]
900062b6:	f043 0301 	orr.w	r3, r3, #1
900062ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900062bc:	68fb      	ldr	r3, [r7, #12]
900062be:	681b      	ldr	r3, [r3, #0]
900062c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
900062c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900062c6:	2301      	movs	r3, #1
900062c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900062cc:	69bb      	ldr	r3, [r7, #24]
900062ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900062d2:	2b00      	cmp	r3, #0
900062d4:	d00b      	beq.n	900062ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900062d6:	6a3b      	ldr	r3, [r7, #32]
900062d8:	f043 0308 	orr.w	r3, r3, #8
900062dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900062de:	68fb      	ldr	r3, [r7, #12]
900062e0:	681b      	ldr	r3, [r3, #0]
900062e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900062e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900062e8:	2301      	movs	r3, #1
900062ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900062ee:	69bb      	ldr	r3, [r7, #24]
900062f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900062f4:	2b00      	cmp	r3, #0
900062f6:	d00b      	beq.n	90006310 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
900062f8:	6a3b      	ldr	r3, [r7, #32]
900062fa:	f043 0302 	orr.w	r3, r3, #2
900062fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006300:	68fb      	ldr	r3, [r7, #12]
90006302:	681b      	ldr	r3, [r3, #0]
90006304:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006308:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
9000630a:	2301      	movs	r3, #1
9000630c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006314:	2b00      	cmp	r3, #0
90006316:	d01c      	beq.n	90006352 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006318:	68f8      	ldr	r0, [r7, #12]
9000631a:	f7ff fe3b 	bl	90005f94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000631e:	68fb      	ldr	r3, [r7, #12]
90006320:	681b      	ldr	r3, [r3, #0]
90006322:	6859      	ldr	r1, [r3, #4]
90006324:	68fb      	ldr	r3, [r7, #12]
90006326:	681a      	ldr	r2, [r3, #0]
90006328:	4b0d      	ldr	r3, [pc, #52]	@ (90006360 <I2C_IsErrorOccurred+0x1bc>)
9000632a:	400b      	ands	r3, r1
9000632c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
9000632e:	68fb      	ldr	r3, [r7, #12]
90006330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90006332:	6a3b      	ldr	r3, [r7, #32]
90006334:	431a      	orrs	r2, r3
90006336:	68fb      	ldr	r3, [r7, #12]
90006338:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000633a:	68fb      	ldr	r3, [r7, #12]
9000633c:	2220      	movs	r2, #32
9000633e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90006342:	68fb      	ldr	r3, [r7, #12]
90006344:	2200      	movs	r2, #0
90006346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000634a:	68fb      	ldr	r3, [r7, #12]
9000634c:	2200      	movs	r2, #0
9000634e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
90006352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
90006356:	4618      	mov	r0, r3
90006358:	3728      	adds	r7, #40	@ 0x28
9000635a:	46bd      	mov	sp, r7
9000635c:	bd80      	pop	{r7, pc}
9000635e:	bf00      	nop
90006360:	fe00e800 	.word	0xfe00e800

90006364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006364:	b480      	push	{r7}
90006366:	b087      	sub	sp, #28
90006368:	af00      	add	r7, sp, #0
9000636a:	60f8      	str	r0, [r7, #12]
9000636c:	607b      	str	r3, [r7, #4]
9000636e:	460b      	mov	r3, r1
90006370:	817b      	strh	r3, [r7, #10]
90006372:	4613      	mov	r3, r2
90006374:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006376:	897b      	ldrh	r3, [r7, #10]
90006378:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000637c:	7a7b      	ldrb	r3, [r7, #9]
9000637e:	041b      	lsls	r3, r3, #16
90006380:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006384:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006386:	687b      	ldr	r3, [r7, #4]
90006388:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000638a:	6a3b      	ldr	r3, [r7, #32]
9000638c:	4313      	orrs	r3, r2
9000638e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
90006392:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90006394:	68fb      	ldr	r3, [r7, #12]
90006396:	681b      	ldr	r3, [r3, #0]
90006398:	685a      	ldr	r2, [r3, #4]
9000639a:	6a3b      	ldr	r3, [r7, #32]
9000639c:	0d5b      	lsrs	r3, r3, #21
9000639e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900063a2:	4b08      	ldr	r3, [pc, #32]	@ (900063c4 <I2C_TransferConfig+0x60>)
900063a4:	430b      	orrs	r3, r1
900063a6:	43db      	mvns	r3, r3
900063a8:	ea02 0103 	and.w	r1, r2, r3
900063ac:	68fb      	ldr	r3, [r7, #12]
900063ae:	681b      	ldr	r3, [r3, #0]
900063b0:	697a      	ldr	r2, [r7, #20]
900063b2:	430a      	orrs	r2, r1
900063b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900063b6:	bf00      	nop
900063b8:	371c      	adds	r7, #28
900063ba:	46bd      	mov	sp, r7
900063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900063c0:	4770      	bx	lr
900063c2:	bf00      	nop
900063c4:	03ff63ff 	.word	0x03ff63ff

900063c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900063c8:	b480      	push	{r7}
900063ca:	b083      	sub	sp, #12
900063cc:	af00      	add	r7, sp, #0
900063ce:	6078      	str	r0, [r7, #4]
900063d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900063d2:	687b      	ldr	r3, [r7, #4]
900063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900063d8:	b2db      	uxtb	r3, r3
900063da:	2b20      	cmp	r3, #32
900063dc:	d138      	bne.n	90006450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900063de:	687b      	ldr	r3, [r7, #4]
900063e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900063e4:	2b01      	cmp	r3, #1
900063e6:	d101      	bne.n	900063ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
900063e8:	2302      	movs	r3, #2
900063ea:	e032      	b.n	90006452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
900063ec:	687b      	ldr	r3, [r7, #4]
900063ee:	2201      	movs	r2, #1
900063f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900063f4:	687b      	ldr	r3, [r7, #4]
900063f6:	2224      	movs	r2, #36	@ 0x24
900063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900063fc:	687b      	ldr	r3, [r7, #4]
900063fe:	681b      	ldr	r3, [r3, #0]
90006400:	681a      	ldr	r2, [r3, #0]
90006402:	687b      	ldr	r3, [r7, #4]
90006404:	681b      	ldr	r3, [r3, #0]
90006406:	f022 0201 	bic.w	r2, r2, #1
9000640a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
9000640c:	687b      	ldr	r3, [r7, #4]
9000640e:	681b      	ldr	r3, [r3, #0]
90006410:	681a      	ldr	r2, [r3, #0]
90006412:	687b      	ldr	r3, [r7, #4]
90006414:	681b      	ldr	r3, [r3, #0]
90006416:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
9000641a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
9000641c:	687b      	ldr	r3, [r7, #4]
9000641e:	681b      	ldr	r3, [r3, #0]
90006420:	6819      	ldr	r1, [r3, #0]
90006422:	687b      	ldr	r3, [r7, #4]
90006424:	681b      	ldr	r3, [r3, #0]
90006426:	683a      	ldr	r2, [r7, #0]
90006428:	430a      	orrs	r2, r1
9000642a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
9000642c:	687b      	ldr	r3, [r7, #4]
9000642e:	681b      	ldr	r3, [r3, #0]
90006430:	681a      	ldr	r2, [r3, #0]
90006432:	687b      	ldr	r3, [r7, #4]
90006434:	681b      	ldr	r3, [r3, #0]
90006436:	f042 0201 	orr.w	r2, r2, #1
9000643a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
9000643c:	687b      	ldr	r3, [r7, #4]
9000643e:	2220      	movs	r2, #32
90006440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006444:	687b      	ldr	r3, [r7, #4]
90006446:	2200      	movs	r2, #0
90006448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
9000644c:	2300      	movs	r3, #0
9000644e:	e000      	b.n	90006452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90006450:	2302      	movs	r3, #2
  }
}
90006452:	4618      	mov	r0, r3
90006454:	370c      	adds	r7, #12
90006456:	46bd      	mov	sp, r7
90006458:	f85d 7b04 	ldr.w	r7, [sp], #4
9000645c:	4770      	bx	lr

9000645e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
9000645e:	b480      	push	{r7}
90006460:	b085      	sub	sp, #20
90006462:	af00      	add	r7, sp, #0
90006464:	6078      	str	r0, [r7, #4]
90006466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006468:	687b      	ldr	r3, [r7, #4]
9000646a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
9000646e:	b2db      	uxtb	r3, r3
90006470:	2b20      	cmp	r3, #32
90006472:	d139      	bne.n	900064e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006474:	687b      	ldr	r3, [r7, #4]
90006476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000647a:	2b01      	cmp	r3, #1
9000647c:	d101      	bne.n	90006482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
9000647e:	2302      	movs	r3, #2
90006480:	e033      	b.n	900064ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
90006482:	687b      	ldr	r3, [r7, #4]
90006484:	2201      	movs	r2, #1
90006486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000648a:	687b      	ldr	r3, [r7, #4]
9000648c:	2224      	movs	r2, #36	@ 0x24
9000648e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006492:	687b      	ldr	r3, [r7, #4]
90006494:	681b      	ldr	r3, [r3, #0]
90006496:	681a      	ldr	r2, [r3, #0]
90006498:	687b      	ldr	r3, [r7, #4]
9000649a:	681b      	ldr	r3, [r3, #0]
9000649c:	f022 0201 	bic.w	r2, r2, #1
900064a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900064a2:	687b      	ldr	r3, [r7, #4]
900064a4:	681b      	ldr	r3, [r3, #0]
900064a6:	681b      	ldr	r3, [r3, #0]
900064a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
900064aa:	68fb      	ldr	r3, [r7, #12]
900064ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
900064b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
900064b2:	683b      	ldr	r3, [r7, #0]
900064b4:	021b      	lsls	r3, r3, #8
900064b6:	68fa      	ldr	r2, [r7, #12]
900064b8:	4313      	orrs	r3, r2
900064ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900064bc:	687b      	ldr	r3, [r7, #4]
900064be:	681b      	ldr	r3, [r3, #0]
900064c0:	68fa      	ldr	r2, [r7, #12]
900064c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900064c4:	687b      	ldr	r3, [r7, #4]
900064c6:	681b      	ldr	r3, [r3, #0]
900064c8:	681a      	ldr	r2, [r3, #0]
900064ca:	687b      	ldr	r3, [r7, #4]
900064cc:	681b      	ldr	r3, [r3, #0]
900064ce:	f042 0201 	orr.w	r2, r2, #1
900064d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900064d4:	687b      	ldr	r3, [r7, #4]
900064d6:	2220      	movs	r2, #32
900064d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900064dc:	687b      	ldr	r3, [r7, #4]
900064de:	2200      	movs	r2, #0
900064e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900064e4:	2300      	movs	r3, #0
900064e6:	e000      	b.n	900064ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900064e8:	2302      	movs	r3, #2
  }
}
900064ea:	4618      	mov	r0, r3
900064ec:	3714      	adds	r7, #20
900064ee:	46bd      	mov	sp, r7
900064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900064f4:	4770      	bx	lr

900064f6 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900064f6:	b580      	push	{r7, lr}
900064f8:	b084      	sub	sp, #16
900064fa:	af00      	add	r7, sp, #0
900064fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900064fe:	687b      	ldr	r3, [r7, #4]
90006500:	2b00      	cmp	r3, #0
90006502:	d101      	bne.n	90006508 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90006504:	2301      	movs	r3, #1
90006506:	e08f      	b.n	90006628 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006508:	687b      	ldr	r3, [r7, #4]
9000650a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
9000650e:	b2db      	uxtb	r3, r3
90006510:	2b00      	cmp	r3, #0
90006512:	d106      	bne.n	90006522 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90006514:	687b      	ldr	r3, [r7, #4]
90006516:	2200      	movs	r2, #0
90006518:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
9000651c:	6878      	ldr	r0, [r7, #4]
9000651e:	f000 f887 	bl	90006630 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006522:	687b      	ldr	r3, [r7, #4]
90006524:	2202      	movs	r2, #2
90006526:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000652a:	687b      	ldr	r3, [r7, #4]
9000652c:	681b      	ldr	r3, [r3, #0]
9000652e:	699a      	ldr	r2, [r3, #24]
90006530:	687b      	ldr	r3, [r7, #4]
90006532:	681b      	ldr	r3, [r3, #0]
90006534:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006538:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000653a:	687b      	ldr	r3, [r7, #4]
9000653c:	681b      	ldr	r3, [r3, #0]
9000653e:	6999      	ldr	r1, [r3, #24]
90006540:	687b      	ldr	r3, [r7, #4]
90006542:	685a      	ldr	r2, [r3, #4]
90006544:	687b      	ldr	r3, [r7, #4]
90006546:	689b      	ldr	r3, [r3, #8]
90006548:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000654a:	687b      	ldr	r3, [r7, #4]
9000654c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000654e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006550:	687b      	ldr	r3, [r7, #4]
90006552:	691b      	ldr	r3, [r3, #16]
90006554:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006556:	687b      	ldr	r3, [r7, #4]
90006558:	681b      	ldr	r3, [r3, #0]
9000655a:	430a      	orrs	r2, r1
9000655c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000655e:	687b      	ldr	r3, [r7, #4]
90006560:	695b      	ldr	r3, [r3, #20]
90006562:	041b      	lsls	r3, r3, #16
90006564:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
90006566:	687b      	ldr	r3, [r7, #4]
90006568:	6999      	ldr	r1, [r3, #24]
9000656a:	687b      	ldr	r3, [r7, #4]
9000656c:	681b      	ldr	r3, [r3, #0]
9000656e:	68fa      	ldr	r2, [r7, #12]
90006570:	430a      	orrs	r2, r1
90006572:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90006574:	687b      	ldr	r3, [r7, #4]
90006576:	69db      	ldr	r3, [r3, #28]
90006578:	041b      	lsls	r3, r3, #16
9000657a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
9000657c:	687b      	ldr	r3, [r7, #4]
9000657e:	6a19      	ldr	r1, [r3, #32]
90006580:	687b      	ldr	r3, [r7, #4]
90006582:	681b      	ldr	r3, [r3, #0]
90006584:	68fa      	ldr	r2, [r7, #12]
90006586:	430a      	orrs	r2, r1
90006588:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000658a:	687b      	ldr	r3, [r7, #4]
9000658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000658e:	041b      	lsls	r3, r3, #16
90006590:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
90006592:	687b      	ldr	r3, [r7, #4]
90006594:	6a99      	ldr	r1, [r3, #40]	@ 0x28
90006596:	687b      	ldr	r3, [r7, #4]
90006598:	681b      	ldr	r3, [r3, #0]
9000659a:	68fa      	ldr	r2, [r7, #12]
9000659c:	430a      	orrs	r2, r1
9000659e:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
900065a0:	687b      	ldr	r3, [r7, #4]
900065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900065a4:	041b      	lsls	r3, r3, #16
900065a6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
900065a8:	687b      	ldr	r3, [r7, #4]
900065aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
900065ac:	687b      	ldr	r3, [r7, #4]
900065ae:	681b      	ldr	r3, [r3, #0]
900065b0:	68fa      	ldr	r2, [r7, #12]
900065b2:	430a      	orrs	r2, r1
900065b4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900065b6:	687b      	ldr	r3, [r7, #4]
900065b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
900065bc:	021b      	lsls	r3, r3, #8
900065be:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900065c0:	687b      	ldr	r3, [r7, #4]
900065c2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
900065c6:	041b      	lsls	r3, r3, #16
900065c8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900065ca:	687b      	ldr	r3, [r7, #4]
900065cc:	681b      	ldr	r3, [r3, #0]
900065ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
900065d0:	687b      	ldr	r3, [r7, #4]
900065d2:	681b      	ldr	r3, [r3, #0]
900065d4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
900065d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900065da:	687b      	ldr	r3, [r7, #4]
900065dc:	681b      	ldr	r3, [r3, #0]
900065de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
900065e0:	68ba      	ldr	r2, [r7, #8]
900065e2:	68fb      	ldr	r3, [r7, #12]
900065e4:	4313      	orrs	r3, r2
900065e6:	687a      	ldr	r2, [r7, #4]
900065e8:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
900065ec:	431a      	orrs	r2, r3
900065ee:	687b      	ldr	r3, [r7, #4]
900065f0:	681b      	ldr	r3, [r3, #0]
900065f2:	430a      	orrs	r2, r1
900065f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900065f6:	687b      	ldr	r3, [r7, #4]
900065f8:	681b      	ldr	r3, [r3, #0]
900065fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900065fc:	687b      	ldr	r3, [r7, #4]
900065fe:	681b      	ldr	r3, [r3, #0]
90006600:	f042 0206 	orr.w	r2, r2, #6
90006604:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90006606:	687b      	ldr	r3, [r7, #4]
90006608:	681b      	ldr	r3, [r3, #0]
9000660a:	699a      	ldr	r2, [r3, #24]
9000660c:	687b      	ldr	r3, [r7, #4]
9000660e:	681b      	ldr	r3, [r3, #0]
90006610:	f042 0201 	orr.w	r2, r2, #1
90006614:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006616:	687b      	ldr	r3, [r7, #4]
90006618:	2200      	movs	r2, #0
9000661a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000661e:	687b      	ldr	r3, [r7, #4]
90006620:	2201      	movs	r2, #1
90006622:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
90006626:	2300      	movs	r3, #0
}
90006628:	4618      	mov	r0, r3
9000662a:	3710      	adds	r7, #16
9000662c:	46bd      	mov	sp, r7
9000662e:	bd80      	pop	{r7, pc}

90006630 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006630:	b480      	push	{r7}
90006632:	b083      	sub	sp, #12
90006634:	af00      	add	r7, sp, #0
90006636:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006638:	bf00      	nop
9000663a:	370c      	adds	r7, #12
9000663c:	46bd      	mov	sp, r7
9000663e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006642:	4770      	bx	lr

90006644 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006644:	b5b0      	push	{r4, r5, r7, lr}
90006646:	b084      	sub	sp, #16
90006648:	af00      	add	r7, sp, #0
9000664a:	60f8      	str	r0, [r7, #12]
9000664c:	60b9      	str	r1, [r7, #8]
9000664e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006650:	68fb      	ldr	r3, [r7, #12]
90006652:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90006656:	2b01      	cmp	r3, #1
90006658:	d101      	bne.n	9000665e <HAL_LTDC_ConfigLayer+0x1a>
9000665a:	2302      	movs	r3, #2
9000665c:	e02c      	b.n	900066b8 <HAL_LTDC_ConfigLayer+0x74>
9000665e:	68fb      	ldr	r3, [r7, #12]
90006660:	2201      	movs	r2, #1
90006662:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006666:	68fb      	ldr	r3, [r7, #12]
90006668:	2202      	movs	r2, #2
9000666a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000666e:	68fa      	ldr	r2, [r7, #12]
90006670:	687b      	ldr	r3, [r7, #4]
90006672:	2134      	movs	r1, #52	@ 0x34
90006674:	fb01 f303 	mul.w	r3, r1, r3
90006678:	4413      	add	r3, r2
9000667a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
9000667e:	68bb      	ldr	r3, [r7, #8]
90006680:	4614      	mov	r4, r2
90006682:	461d      	mov	r5, r3
90006684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000668a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000668c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000668e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006690:	682b      	ldr	r3, [r5, #0]
90006692:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90006694:	687a      	ldr	r2, [r7, #4]
90006696:	68b9      	ldr	r1, [r7, #8]
90006698:	68f8      	ldr	r0, [r7, #12]
9000669a:	f000 f811 	bl	900066c0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000669e:	68fb      	ldr	r3, [r7, #12]
900066a0:	681b      	ldr	r3, [r3, #0]
900066a2:	2201      	movs	r2, #1
900066a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900066a6:	68fb      	ldr	r3, [r7, #12]
900066a8:	2201      	movs	r2, #1
900066aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900066ae:	68fb      	ldr	r3, [r7, #12]
900066b0:	2200      	movs	r2, #0
900066b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
900066b6:	2300      	movs	r3, #0
}
900066b8:	4618      	mov	r0, r3
900066ba:	3710      	adds	r7, #16
900066bc:	46bd      	mov	sp, r7
900066be:	bdb0      	pop	{r4, r5, r7, pc}

900066c0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900066c0:	b480      	push	{r7}
900066c2:	b089      	sub	sp, #36	@ 0x24
900066c4:	af00      	add	r7, sp, #0
900066c6:	60f8      	str	r0, [r7, #12]
900066c8:	60b9      	str	r1, [r7, #8]
900066ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900066cc:	68bb      	ldr	r3, [r7, #8]
900066ce:	685a      	ldr	r2, [r3, #4]
900066d0:	68fb      	ldr	r3, [r7, #12]
900066d2:	681b      	ldr	r3, [r3, #0]
900066d4:	68db      	ldr	r3, [r3, #12]
900066d6:	0c1b      	lsrs	r3, r3, #16
900066d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
900066dc:	4413      	add	r3, r2
900066de:	041b      	lsls	r3, r3, #16
900066e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900066e2:	68fb      	ldr	r3, [r7, #12]
900066e4:	681b      	ldr	r3, [r3, #0]
900066e6:	461a      	mov	r2, r3
900066e8:	687b      	ldr	r3, [r7, #4]
900066ea:	01db      	lsls	r3, r3, #7
900066ec:	4413      	add	r3, r2
900066ee:	3384      	adds	r3, #132	@ 0x84
900066f0:	685b      	ldr	r3, [r3, #4]
900066f2:	68fa      	ldr	r2, [r7, #12]
900066f4:	6812      	ldr	r2, [r2, #0]
900066f6:	4611      	mov	r1, r2
900066f8:	687a      	ldr	r2, [r7, #4]
900066fa:	01d2      	lsls	r2, r2, #7
900066fc:	440a      	add	r2, r1
900066fe:	3284      	adds	r2, #132	@ 0x84
90006700:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006704:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006706:	68bb      	ldr	r3, [r7, #8]
90006708:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000670a:	68fb      	ldr	r3, [r7, #12]
9000670c:	681b      	ldr	r3, [r3, #0]
9000670e:	68db      	ldr	r3, [r3, #12]
90006710:	0c1b      	lsrs	r3, r3, #16
90006712:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006716:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006718:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000671a:	68fb      	ldr	r3, [r7, #12]
9000671c:	681b      	ldr	r3, [r3, #0]
9000671e:	4619      	mov	r1, r3
90006720:	687b      	ldr	r3, [r7, #4]
90006722:	01db      	lsls	r3, r3, #7
90006724:	440b      	add	r3, r1
90006726:	3384      	adds	r3, #132	@ 0x84
90006728:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000672a:	69fb      	ldr	r3, [r7, #28]
9000672c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000672e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006730:	68bb      	ldr	r3, [r7, #8]
90006732:	68da      	ldr	r2, [r3, #12]
90006734:	68fb      	ldr	r3, [r7, #12]
90006736:	681b      	ldr	r3, [r3, #0]
90006738:	68db      	ldr	r3, [r3, #12]
9000673a:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000673e:	4413      	add	r3, r2
90006740:	041b      	lsls	r3, r3, #16
90006742:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90006744:	68fb      	ldr	r3, [r7, #12]
90006746:	681b      	ldr	r3, [r3, #0]
90006748:	461a      	mov	r2, r3
9000674a:	687b      	ldr	r3, [r7, #4]
9000674c:	01db      	lsls	r3, r3, #7
9000674e:	4413      	add	r3, r2
90006750:	3384      	adds	r3, #132	@ 0x84
90006752:	689b      	ldr	r3, [r3, #8]
90006754:	68fa      	ldr	r2, [r7, #12]
90006756:	6812      	ldr	r2, [r2, #0]
90006758:	4611      	mov	r1, r2
9000675a:	687a      	ldr	r2, [r7, #4]
9000675c:	01d2      	lsls	r2, r2, #7
9000675e:	440a      	add	r2, r1
90006760:	3284      	adds	r2, #132	@ 0x84
90006762:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006766:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90006768:	68bb      	ldr	r3, [r7, #8]
9000676a:	689a      	ldr	r2, [r3, #8]
9000676c:	68fb      	ldr	r3, [r7, #12]
9000676e:	681b      	ldr	r3, [r3, #0]
90006770:	68db      	ldr	r3, [r3, #12]
90006772:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006776:	4413      	add	r3, r2
90006778:	1c5a      	adds	r2, r3, #1
9000677a:	68fb      	ldr	r3, [r7, #12]
9000677c:	681b      	ldr	r3, [r3, #0]
9000677e:	4619      	mov	r1, r3
90006780:	687b      	ldr	r3, [r7, #4]
90006782:	01db      	lsls	r3, r3, #7
90006784:	440b      	add	r3, r1
90006786:	3384      	adds	r3, #132	@ 0x84
90006788:	4619      	mov	r1, r3
9000678a:	69fb      	ldr	r3, [r7, #28]
9000678c:	4313      	orrs	r3, r2
9000678e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90006790:	68fb      	ldr	r3, [r7, #12]
90006792:	681b      	ldr	r3, [r3, #0]
90006794:	461a      	mov	r2, r3
90006796:	687b      	ldr	r3, [r7, #4]
90006798:	01db      	lsls	r3, r3, #7
9000679a:	4413      	add	r3, r2
9000679c:	3384      	adds	r3, #132	@ 0x84
9000679e:	691b      	ldr	r3, [r3, #16]
900067a0:	68fa      	ldr	r2, [r7, #12]
900067a2:	6812      	ldr	r2, [r2, #0]
900067a4:	4611      	mov	r1, r2
900067a6:	687a      	ldr	r2, [r7, #4]
900067a8:	01d2      	lsls	r2, r2, #7
900067aa:	440a      	add	r2, r1
900067ac:	3284      	adds	r2, #132	@ 0x84
900067ae:	f023 0307 	bic.w	r3, r3, #7
900067b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900067b4:	68fb      	ldr	r3, [r7, #12]
900067b6:	681b      	ldr	r3, [r3, #0]
900067b8:	461a      	mov	r2, r3
900067ba:	687b      	ldr	r3, [r7, #4]
900067bc:	01db      	lsls	r3, r3, #7
900067be:	4413      	add	r3, r2
900067c0:	3384      	adds	r3, #132	@ 0x84
900067c2:	461a      	mov	r2, r3
900067c4:	68bb      	ldr	r3, [r7, #8]
900067c6:	691b      	ldr	r3, [r3, #16]
900067c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900067ca:	68bb      	ldr	r3, [r7, #8]
900067cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
900067d0:	021b      	lsls	r3, r3, #8
900067d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900067d4:	68bb      	ldr	r3, [r7, #8]
900067d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
900067da:	041b      	lsls	r3, r3, #16
900067dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900067de:	68bb      	ldr	r3, [r7, #8]
900067e0:	699b      	ldr	r3, [r3, #24]
900067e2:	061b      	lsls	r3, r3, #24
900067e4:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
900067e6:	68bb      	ldr	r3, [r7, #8]
900067e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
900067ec:	461a      	mov	r2, r3
900067ee:	69fb      	ldr	r3, [r7, #28]
900067f0:	431a      	orrs	r2, r3
900067f2:	69bb      	ldr	r3, [r7, #24]
900067f4:	431a      	orrs	r2, r3
900067f6:	68fb      	ldr	r3, [r7, #12]
900067f8:	681b      	ldr	r3, [r3, #0]
900067fa:	4619      	mov	r1, r3
900067fc:	687b      	ldr	r3, [r7, #4]
900067fe:	01db      	lsls	r3, r3, #7
90006800:	440b      	add	r3, r1
90006802:	3384      	adds	r3, #132	@ 0x84
90006804:	4619      	mov	r1, r3
90006806:	697b      	ldr	r3, [r7, #20]
90006808:	4313      	orrs	r3, r2
9000680a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000680c:	68fb      	ldr	r3, [r7, #12]
9000680e:	681b      	ldr	r3, [r3, #0]
90006810:	461a      	mov	r2, r3
90006812:	687b      	ldr	r3, [r7, #4]
90006814:	01db      	lsls	r3, r3, #7
90006816:	4413      	add	r3, r2
90006818:	3384      	adds	r3, #132	@ 0x84
9000681a:	695b      	ldr	r3, [r3, #20]
9000681c:	68fa      	ldr	r2, [r7, #12]
9000681e:	6812      	ldr	r2, [r2, #0]
90006820:	4611      	mov	r1, r2
90006822:	687a      	ldr	r2, [r7, #4]
90006824:	01d2      	lsls	r2, r2, #7
90006826:	440a      	add	r2, r1
90006828:	3284      	adds	r2, #132	@ 0x84
9000682a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
9000682e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006830:	68fb      	ldr	r3, [r7, #12]
90006832:	681b      	ldr	r3, [r3, #0]
90006834:	461a      	mov	r2, r3
90006836:	687b      	ldr	r3, [r7, #4]
90006838:	01db      	lsls	r3, r3, #7
9000683a:	4413      	add	r3, r2
9000683c:	3384      	adds	r3, #132	@ 0x84
9000683e:	461a      	mov	r2, r3
90006840:	68bb      	ldr	r3, [r7, #8]
90006842:	695b      	ldr	r3, [r3, #20]
90006844:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90006846:	68fb      	ldr	r3, [r7, #12]
90006848:	681b      	ldr	r3, [r3, #0]
9000684a:	461a      	mov	r2, r3
9000684c:	687b      	ldr	r3, [r7, #4]
9000684e:	01db      	lsls	r3, r3, #7
90006850:	4413      	add	r3, r2
90006852:	3384      	adds	r3, #132	@ 0x84
90006854:	69da      	ldr	r2, [r3, #28]
90006856:	68fb      	ldr	r3, [r7, #12]
90006858:	681b      	ldr	r3, [r3, #0]
9000685a:	4619      	mov	r1, r3
9000685c:	687b      	ldr	r3, [r7, #4]
9000685e:	01db      	lsls	r3, r3, #7
90006860:	440b      	add	r3, r1
90006862:	3384      	adds	r3, #132	@ 0x84
90006864:	4619      	mov	r1, r3
90006866:	4b4f      	ldr	r3, [pc, #316]	@ (900069a4 <LTDC_SetConfig+0x2e4>)
90006868:	4013      	ands	r3, r2
9000686a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000686c:	68bb      	ldr	r3, [r7, #8]
9000686e:	69da      	ldr	r2, [r3, #28]
90006870:	68bb      	ldr	r3, [r7, #8]
90006872:	6a1b      	ldr	r3, [r3, #32]
90006874:	68f9      	ldr	r1, [r7, #12]
90006876:	6809      	ldr	r1, [r1, #0]
90006878:	4608      	mov	r0, r1
9000687a:	6879      	ldr	r1, [r7, #4]
9000687c:	01c9      	lsls	r1, r1, #7
9000687e:	4401      	add	r1, r0
90006880:	3184      	adds	r1, #132	@ 0x84
90006882:	4313      	orrs	r3, r2
90006884:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90006886:	68fb      	ldr	r3, [r7, #12]
90006888:	681b      	ldr	r3, [r3, #0]
9000688a:	461a      	mov	r2, r3
9000688c:	687b      	ldr	r3, [r7, #4]
9000688e:	01db      	lsls	r3, r3, #7
90006890:	4413      	add	r3, r2
90006892:	3384      	adds	r3, #132	@ 0x84
90006894:	461a      	mov	r2, r3
90006896:	68bb      	ldr	r3, [r7, #8]
90006898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000689a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000689c:	68bb      	ldr	r3, [r7, #8]
9000689e:	691b      	ldr	r3, [r3, #16]
900068a0:	2b00      	cmp	r3, #0
900068a2:	d102      	bne.n	900068aa <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
900068a4:	2304      	movs	r3, #4
900068a6:	61fb      	str	r3, [r7, #28]
900068a8:	e01b      	b.n	900068e2 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900068aa:	68bb      	ldr	r3, [r7, #8]
900068ac:	691b      	ldr	r3, [r3, #16]
900068ae:	2b01      	cmp	r3, #1
900068b0:	d102      	bne.n	900068b8 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
900068b2:	2303      	movs	r3, #3
900068b4:	61fb      	str	r3, [r7, #28]
900068b6:	e014      	b.n	900068e2 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900068b8:	68bb      	ldr	r3, [r7, #8]
900068ba:	691b      	ldr	r3, [r3, #16]
900068bc:	2b04      	cmp	r3, #4
900068be:	d00b      	beq.n	900068d8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900068c0:	68bb      	ldr	r3, [r7, #8]
900068c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900068c4:	2b02      	cmp	r3, #2
900068c6:	d007      	beq.n	900068d8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900068c8:	68bb      	ldr	r3, [r7, #8]
900068ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900068cc:	2b03      	cmp	r3, #3
900068ce:	d003      	beq.n	900068d8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
900068d0:	68bb      	ldr	r3, [r7, #8]
900068d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900068d4:	2b07      	cmp	r3, #7
900068d6:	d102      	bne.n	900068de <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
900068d8:	2302      	movs	r3, #2
900068da:	61fb      	str	r3, [r7, #28]
900068dc:	e001      	b.n	900068e2 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
900068de:	2301      	movs	r3, #1
900068e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900068e2:	68fb      	ldr	r3, [r7, #12]
900068e4:	681b      	ldr	r3, [r3, #0]
900068e6:	461a      	mov	r2, r3
900068e8:	687b      	ldr	r3, [r7, #4]
900068ea:	01db      	lsls	r3, r3, #7
900068ec:	4413      	add	r3, r2
900068ee:	3384      	adds	r3, #132	@ 0x84
900068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900068f2:	68fa      	ldr	r2, [r7, #12]
900068f4:	6812      	ldr	r2, [r2, #0]
900068f6:	4611      	mov	r1, r2
900068f8:	687a      	ldr	r2, [r7, #4]
900068fa:	01d2      	lsls	r2, r2, #7
900068fc:	440a      	add	r2, r1
900068fe:	3284      	adds	r2, #132	@ 0x84
90006900:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006904:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006906:	68bb      	ldr	r3, [r7, #8]
90006908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000690a:	69fa      	ldr	r2, [r7, #28]
9000690c:	fb02 f303 	mul.w	r3, r2, r3
90006910:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90006912:	68bb      	ldr	r3, [r7, #8]
90006914:	6859      	ldr	r1, [r3, #4]
90006916:	68bb      	ldr	r3, [r7, #8]
90006918:	681b      	ldr	r3, [r3, #0]
9000691a:	1acb      	subs	r3, r1, r3
9000691c:	69f9      	ldr	r1, [r7, #28]
9000691e:	fb01 f303 	mul.w	r3, r1, r3
90006922:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006924:	68f9      	ldr	r1, [r7, #12]
90006926:	6809      	ldr	r1, [r1, #0]
90006928:	4608      	mov	r0, r1
9000692a:	6879      	ldr	r1, [r7, #4]
9000692c:	01c9      	lsls	r1, r1, #7
9000692e:	4401      	add	r1, r0
90006930:	3184      	adds	r1, #132	@ 0x84
90006932:	4313      	orrs	r3, r2
90006934:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90006936:	68fb      	ldr	r3, [r7, #12]
90006938:	681b      	ldr	r3, [r3, #0]
9000693a:	461a      	mov	r2, r3
9000693c:	687b      	ldr	r3, [r7, #4]
9000693e:	01db      	lsls	r3, r3, #7
90006940:	4413      	add	r3, r2
90006942:	3384      	adds	r3, #132	@ 0x84
90006944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90006946:	68fb      	ldr	r3, [r7, #12]
90006948:	681b      	ldr	r3, [r3, #0]
9000694a:	4619      	mov	r1, r3
9000694c:	687b      	ldr	r3, [r7, #4]
9000694e:	01db      	lsls	r3, r3, #7
90006950:	440b      	add	r3, r1
90006952:	3384      	adds	r3, #132	@ 0x84
90006954:	4619      	mov	r1, r3
90006956:	4b14      	ldr	r3, [pc, #80]	@ (900069a8 <LTDC_SetConfig+0x2e8>)
90006958:	4013      	ands	r3, r2
9000695a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000695c:	68fb      	ldr	r3, [r7, #12]
9000695e:	681b      	ldr	r3, [r3, #0]
90006960:	461a      	mov	r2, r3
90006962:	687b      	ldr	r3, [r7, #4]
90006964:	01db      	lsls	r3, r3, #7
90006966:	4413      	add	r3, r2
90006968:	3384      	adds	r3, #132	@ 0x84
9000696a:	461a      	mov	r2, r3
9000696c:	68bb      	ldr	r3, [r7, #8]
9000696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006970:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90006972:	68fb      	ldr	r3, [r7, #12]
90006974:	681b      	ldr	r3, [r3, #0]
90006976:	461a      	mov	r2, r3
90006978:	687b      	ldr	r3, [r7, #4]
9000697a:	01db      	lsls	r3, r3, #7
9000697c:	4413      	add	r3, r2
9000697e:	3384      	adds	r3, #132	@ 0x84
90006980:	681b      	ldr	r3, [r3, #0]
90006982:	68fa      	ldr	r2, [r7, #12]
90006984:	6812      	ldr	r2, [r2, #0]
90006986:	4611      	mov	r1, r2
90006988:	687a      	ldr	r2, [r7, #4]
9000698a:	01d2      	lsls	r2, r2, #7
9000698c:	440a      	add	r2, r1
9000698e:	3284      	adds	r2, #132	@ 0x84
90006990:	f043 0301 	orr.w	r3, r3, #1
90006994:	6013      	str	r3, [r2, #0]
}
90006996:	bf00      	nop
90006998:	3724      	adds	r7, #36	@ 0x24
9000699a:	46bd      	mov	sp, r7
9000699c:	f85d 7b04 	ldr.w	r7, [sp], #4
900069a0:	4770      	bx	lr
900069a2:	bf00      	nop
900069a4:	fffff8f8 	.word	0xfffff8f8
900069a8:	fffff800 	.word	0xfffff800

900069ac <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900069ac:	b580      	push	{r7, lr}
900069ae:	b084      	sub	sp, #16
900069b0:	af00      	add	r7, sp, #0
900069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900069b4:	f7fc fc8e 	bl	900032d4 <HAL_GetTick>
900069b8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900069ba:	687b      	ldr	r3, [r7, #4]
900069bc:	2b00      	cmp	r3, #0
900069be:	d101      	bne.n	900069c4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
900069c0:	2301      	movs	r3, #1
900069c2:	e03b      	b.n	90006a3c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
900069c4:	687b      	ldr	r3, [r7, #4]
900069c6:	2200      	movs	r2, #0
900069c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
900069cc:	687b      	ldr	r3, [r7, #4]
900069ce:	2202      	movs	r2, #2
900069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
900069d4:	687b      	ldr	r3, [r7, #4]
900069d6:	681b      	ldr	r3, [r3, #0]
900069d8:	68da      	ldr	r2, [r3, #12]
900069da:	687b      	ldr	r3, [r7, #4]
900069dc:	681b      	ldr	r3, [r3, #0]
900069de:	f022 0201 	bic.w	r2, r2, #1
900069e2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900069e4:	e00f      	b.n	90006a06 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
900069e6:	f7fc fc75 	bl	900032d4 <HAL_GetTick>
900069ea:	4602      	mov	r2, r0
900069ec:	68fb      	ldr	r3, [r7, #12]
900069ee:	1ad3      	subs	r3, r2, r3
900069f0:	2b05      	cmp	r3, #5
900069f2:	d908      	bls.n	90006a06 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
900069f4:	687b      	ldr	r3, [r7, #4]
900069f6:	2240      	movs	r2, #64	@ 0x40
900069f8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
900069fa:	687b      	ldr	r3, [r7, #4]
900069fc:	2203      	movs	r2, #3
900069fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90006a02:	2301      	movs	r3, #1
90006a04:	e01a      	b.n	90006a3c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006a06:	687b      	ldr	r3, [r7, #4]
90006a08:	681b      	ldr	r3, [r3, #0]
90006a0a:	68db      	ldr	r3, [r3, #12]
90006a0c:	f003 0301 	and.w	r3, r3, #1
90006a10:	2b00      	cmp	r3, #0
90006a12:	d1e8      	bne.n	900069e6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006a14:	6878      	ldr	r0, [r7, #4]
90006a16:	f000 f86d 	bl	90006af4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006a1a:	687b      	ldr	r3, [r7, #4]
90006a1c:	2200      	movs	r2, #0
90006a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006a20:	687b      	ldr	r3, [r7, #4]
90006a22:	2200      	movs	r2, #0
90006a24:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006a26:	687b      	ldr	r3, [r7, #4]
90006a28:	2200      	movs	r2, #0
90006a2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006a2c:	687b      	ldr	r3, [r7, #4]
90006a2e:	2200      	movs	r2, #0
90006a30:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
90006a32:	687b      	ldr	r3, [r7, #4]
90006a34:	2201      	movs	r2, #1
90006a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006a3a:	2300      	movs	r3, #0
}
90006a3c:	4618      	mov	r0, r3
90006a3e:	3710      	adds	r7, #16
90006a40:	46bd      	mov	sp, r7
90006a42:	bd80      	pop	{r7, pc}

90006a44 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90006a44:	b480      	push	{r7}
90006a46:	b083      	sub	sp, #12
90006a48:	af00      	add	r7, sp, #0
90006a4a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006a4c:	687b      	ldr	r3, [r7, #4]
90006a4e:	2b00      	cmp	r3, #0
90006a50:	d101      	bne.n	90006a56 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
90006a52:	2301      	movs	r3, #1
90006a54:	e048      	b.n	90006ae8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90006a56:	687b      	ldr	r3, [r7, #4]
90006a58:	681b      	ldr	r3, [r3, #0]
90006a5a:	68da      	ldr	r2, [r3, #12]
90006a5c:	687b      	ldr	r3, [r7, #4]
90006a5e:	681b      	ldr	r3, [r3, #0]
90006a60:	f022 0201 	bic.w	r2, r2, #1
90006a64:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90006a66:	687b      	ldr	r3, [r7, #4]
90006a68:	681b      	ldr	r3, [r3, #0]
90006a6a:	2200      	movs	r2, #0
90006a6c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006a6e:	687b      	ldr	r3, [r7, #4]
90006a70:	681b      	ldr	r3, [r3, #0]
90006a72:	2200      	movs	r2, #0
90006a74:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006a76:	687b      	ldr	r3, [r7, #4]
90006a78:	681b      	ldr	r3, [r3, #0]
90006a7a:	2200      	movs	r2, #0
90006a7c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006a7e:	687b      	ldr	r3, [r7, #4]
90006a80:	681b      	ldr	r3, [r3, #0]
90006a82:	2200      	movs	r2, #0
90006a84:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006a86:	687b      	ldr	r3, [r7, #4]
90006a88:	681b      	ldr	r3, [r3, #0]
90006a8a:	2200      	movs	r2, #0
90006a8c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006a8e:	687b      	ldr	r3, [r7, #4]
90006a90:	681b      	ldr	r3, [r3, #0]
90006a92:	2200      	movs	r2, #0
90006a94:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006a96:	687b      	ldr	r3, [r7, #4]
90006a98:	681b      	ldr	r3, [r3, #0]
90006a9a:	2200      	movs	r2, #0
90006a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006a9e:	687b      	ldr	r3, [r7, #4]
90006aa0:	681b      	ldr	r3, [r3, #0]
90006aa2:	2200      	movs	r2, #0
90006aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006aa6:	687b      	ldr	r3, [r7, #4]
90006aa8:	681b      	ldr	r3, [r3, #0]
90006aaa:	2200      	movs	r2, #0
90006aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006aae:	687b      	ldr	r3, [r7, #4]
90006ab0:	681b      	ldr	r3, [r3, #0]
90006ab2:	2200      	movs	r2, #0
90006ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006ab6:	687b      	ldr	r3, [r7, #4]
90006ab8:	681b      	ldr	r3, [r3, #0]
90006aba:	221f      	movs	r2, #31
90006abc:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006abe:	687b      	ldr	r3, [r7, #4]
90006ac0:	2200      	movs	r2, #0
90006ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006ac4:	687b      	ldr	r3, [r7, #4]
90006ac6:	2200      	movs	r2, #0
90006ac8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006aca:	687b      	ldr	r3, [r7, #4]
90006acc:	2200      	movs	r2, #0
90006ace:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006ad0:	687b      	ldr	r3, [r7, #4]
90006ad2:	2200      	movs	r2, #0
90006ad4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006ad6:	687b      	ldr	r3, [r7, #4]
90006ad8:	2200      	movs	r2, #0
90006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006ade:	687b      	ldr	r3, [r7, #4]
90006ae0:	2200      	movs	r2, #0
90006ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006ae6:	2300      	movs	r3, #0
}
90006ae8:	4618      	mov	r0, r3
90006aea:	370c      	adds	r7, #12
90006aec:	46bd      	mov	sp, r7
90006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
90006af2:	4770      	bx	lr

90006af4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006af4:	b480      	push	{r7}
90006af6:	b085      	sub	sp, #20
90006af8:	af00      	add	r7, sp, #0
90006afa:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006afc:	687b      	ldr	r3, [r7, #4]
90006afe:	68d9      	ldr	r1, [r3, #12]
90006b00:	687b      	ldr	r3, [r7, #4]
90006b02:	691a      	ldr	r2, [r3, #16]
90006b04:	687b      	ldr	r3, [r7, #4]
90006b06:	681b      	ldr	r3, [r3, #0]
90006b08:	430a      	orrs	r2, r1
90006b0a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b0c:	687b      	ldr	r3, [r7, #4]
90006b0e:	695a      	ldr	r2, [r3, #20]
90006b10:	687b      	ldr	r3, [r7, #4]
90006b12:	699b      	ldr	r3, [r3, #24]
90006b14:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006b16:	687b      	ldr	r3, [r7, #4]
90006b18:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b1a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006b1c:	687b      	ldr	r3, [r7, #4]
90006b1e:	6a1b      	ldr	r3, [r3, #32]
90006b20:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006b22:	687b      	ldr	r3, [r7, #4]
90006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006b26:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006b28:	687b      	ldr	r3, [r7, #4]
90006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006b2c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006b2e:	687b      	ldr	r3, [r7, #4]
90006b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006b32:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006b34:	687b      	ldr	r3, [r7, #4]
90006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006b38:	3b01      	subs	r3, #1
90006b3a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006b3c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006b40:	687b      	ldr	r3, [r7, #4]
90006b42:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b44:	687b      	ldr	r3, [r7, #4]
90006b46:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006b48:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b4a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006b4c:	687b      	ldr	r3, [r7, #4]
90006b4e:	685b      	ldr	r3, [r3, #4]
90006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006b54:	d107      	bne.n	90006b66 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006b56:	687b      	ldr	r3, [r7, #4]
90006b58:	681b      	ldr	r3, [r3, #0]
90006b5a:	691a      	ldr	r2, [r3, #16]
90006b5c:	687b      	ldr	r3, [r7, #4]
90006b5e:	681b      	ldr	r3, [r3, #0]
90006b60:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006b64:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006b66:	687b      	ldr	r3, [r7, #4]
90006b68:	681b      	ldr	r3, [r3, #0]
90006b6a:	2200      	movs	r2, #0
90006b6c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006b6e:	687b      	ldr	r3, [r7, #4]
90006b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006b72:	2b00      	cmp	r3, #0
90006b74:	da11      	bge.n	90006b9a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006b76:	687b      	ldr	r3, [r7, #4]
90006b78:	681b      	ldr	r3, [r3, #0]
90006b7a:	695a      	ldr	r2, [r3, #20]
90006b7c:	687b      	ldr	r3, [r7, #4]
90006b7e:	681b      	ldr	r3, [r3, #0]
90006b80:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006b84:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006b86:	687b      	ldr	r3, [r7, #4]
90006b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006b8a:	425b      	negs	r3, r3
90006b8c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006b8e:	687b      	ldr	r3, [r7, #4]
90006b90:	681b      	ldr	r3, [r3, #0]
90006b92:	68fa      	ldr	r2, [r7, #12]
90006b94:	b292      	uxth	r2, r2
90006b96:	621a      	str	r2, [r3, #32]
90006b98:	e006      	b.n	90006ba8 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006b9a:	687b      	ldr	r3, [r7, #4]
90006b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006b9e:	461a      	mov	r2, r3
90006ba0:	687b      	ldr	r3, [r7, #4]
90006ba2:	681b      	ldr	r3, [r3, #0]
90006ba4:	b292      	uxth	r2, r2
90006ba6:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006ba8:	687b      	ldr	r3, [r7, #4]
90006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006bac:	2b00      	cmp	r3, #0
90006bae:	da15      	bge.n	90006bdc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006bb0:	687b      	ldr	r3, [r7, #4]
90006bb2:	681b      	ldr	r3, [r3, #0]
90006bb4:	695a      	ldr	r2, [r3, #20]
90006bb6:	687b      	ldr	r3, [r7, #4]
90006bb8:	681b      	ldr	r3, [r3, #0]
90006bba:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006bbe:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006bc0:	687b      	ldr	r3, [r7, #4]
90006bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006bc4:	425b      	negs	r3, r3
90006bc6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006bc8:	687b      	ldr	r3, [r7, #4]
90006bca:	681b      	ldr	r3, [r3, #0]
90006bcc:	6a19      	ldr	r1, [r3, #32]
90006bce:	68fb      	ldr	r3, [r7, #12]
90006bd0:	041a      	lsls	r2, r3, #16
90006bd2:	687b      	ldr	r3, [r7, #4]
90006bd4:	681b      	ldr	r3, [r3, #0]
90006bd6:	430a      	orrs	r2, r1
90006bd8:	621a      	str	r2, [r3, #32]
90006bda:	e009      	b.n	90006bf0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006bdc:	687b      	ldr	r3, [r7, #4]
90006bde:	681b      	ldr	r3, [r3, #0]
90006be0:	6a19      	ldr	r1, [r3, #32]
90006be2:	687b      	ldr	r3, [r7, #4]
90006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006be6:	041a      	lsls	r2, r3, #16
90006be8:	687b      	ldr	r3, [r7, #4]
90006bea:	681b      	ldr	r3, [r3, #0]
90006bec:	430a      	orrs	r2, r1
90006bee:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006bf0:	687b      	ldr	r3, [r7, #4]
90006bf2:	685b      	ldr	r3, [r3, #4]
90006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006bf8:	d006      	beq.n	90006c08 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006bfa:	687b      	ldr	r3, [r7, #4]
90006bfc:	685a      	ldr	r2, [r3, #4]
90006bfe:	687b      	ldr	r3, [r7, #4]
90006c00:	681b      	ldr	r3, [r3, #0]
90006c02:	b2d2      	uxtb	r2, r2
90006c04:	629a      	str	r2, [r3, #40]	@ 0x28
90006c06:	e003      	b.n	90006c10 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006c08:	687b      	ldr	r3, [r7, #4]
90006c0a:	681b      	ldr	r3, [r3, #0]
90006c0c:	2200      	movs	r2, #0
90006c0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006c10:	687b      	ldr	r3, [r7, #4]
90006c12:	681b      	ldr	r3, [r3, #0]
90006c14:	2200      	movs	r2, #0
90006c16:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006c18:	bf00      	nop
90006c1a:	3714      	adds	r7, #20
90006c1c:	46bd      	mov	sp, r7
90006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006c22:	4770      	bx	lr

90006c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006c24:	b580      	push	{r7, lr}
90006c26:	b08c      	sub	sp, #48	@ 0x30
90006c28:	af00      	add	r7, sp, #0
90006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006c2c:	687b      	ldr	r3, [r7, #4]
90006c2e:	2b00      	cmp	r3, #0
90006c30:	d102      	bne.n	90006c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006c32:	2301      	movs	r3, #1
90006c34:	f000 bc48 	b.w	900074c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006c38:	687b      	ldr	r3, [r7, #4]
90006c3a:	681b      	ldr	r3, [r3, #0]
90006c3c:	f003 0301 	and.w	r3, r3, #1
90006c40:	2b00      	cmp	r3, #0
90006c42:	f000 8088 	beq.w	90006d56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006c46:	4b99      	ldr	r3, [pc, #612]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006c48:	691b      	ldr	r3, [r3, #16]
90006c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006c50:	4b96      	ldr	r3, [pc, #600]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006c58:	2b10      	cmp	r3, #16
90006c5a:	d007      	beq.n	90006c6c <HAL_RCC_OscConfig+0x48>
90006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006c5e:	2b18      	cmp	r3, #24
90006c60:	d111      	bne.n	90006c86 <HAL_RCC_OscConfig+0x62>
90006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006c64:	f003 0303 	and.w	r3, r3, #3
90006c68:	2b02      	cmp	r3, #2
90006c6a:	d10c      	bne.n	90006c86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006c6c:	4b8f      	ldr	r3, [pc, #572]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006c6e:	681b      	ldr	r3, [r3, #0]
90006c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006c74:	2b00      	cmp	r3, #0
90006c76:	d06d      	beq.n	90006d54 <HAL_RCC_OscConfig+0x130>
90006c78:	687b      	ldr	r3, [r7, #4]
90006c7a:	685b      	ldr	r3, [r3, #4]
90006c7c:	2b00      	cmp	r3, #0
90006c7e:	d169      	bne.n	90006d54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006c80:	2301      	movs	r3, #1
90006c82:	f000 bc21 	b.w	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006c86:	687b      	ldr	r3, [r7, #4]
90006c88:	685b      	ldr	r3, [r3, #4]
90006c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006c8e:	d106      	bne.n	90006c9e <HAL_RCC_OscConfig+0x7a>
90006c90:	4b86      	ldr	r3, [pc, #536]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006c92:	681b      	ldr	r3, [r3, #0]
90006c94:	4a85      	ldr	r2, [pc, #532]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006c9a:	6013      	str	r3, [r2, #0]
90006c9c:	e02e      	b.n	90006cfc <HAL_RCC_OscConfig+0xd8>
90006c9e:	687b      	ldr	r3, [r7, #4]
90006ca0:	685b      	ldr	r3, [r3, #4]
90006ca2:	2b00      	cmp	r3, #0
90006ca4:	d10c      	bne.n	90006cc0 <HAL_RCC_OscConfig+0x9c>
90006ca6:	4b81      	ldr	r3, [pc, #516]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006ca8:	681b      	ldr	r3, [r3, #0]
90006caa:	4a80      	ldr	r2, [pc, #512]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006cb0:	6013      	str	r3, [r2, #0]
90006cb2:	4b7e      	ldr	r3, [pc, #504]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cb4:	681b      	ldr	r3, [r3, #0]
90006cb6:	4a7d      	ldr	r2, [pc, #500]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006cbc:	6013      	str	r3, [r2, #0]
90006cbe:	e01d      	b.n	90006cfc <HAL_RCC_OscConfig+0xd8>
90006cc0:	687b      	ldr	r3, [r7, #4]
90006cc2:	685b      	ldr	r3, [r3, #4]
90006cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006cc8:	d10c      	bne.n	90006ce4 <HAL_RCC_OscConfig+0xc0>
90006cca:	4b78      	ldr	r3, [pc, #480]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006ccc:	681b      	ldr	r3, [r3, #0]
90006cce:	4a77      	ldr	r2, [pc, #476]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006cd4:	6013      	str	r3, [r2, #0]
90006cd6:	4b75      	ldr	r3, [pc, #468]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cd8:	681b      	ldr	r3, [r3, #0]
90006cda:	4a74      	ldr	r2, [pc, #464]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006ce0:	6013      	str	r3, [r2, #0]
90006ce2:	e00b      	b.n	90006cfc <HAL_RCC_OscConfig+0xd8>
90006ce4:	4b71      	ldr	r3, [pc, #452]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006ce6:	681b      	ldr	r3, [r3, #0]
90006ce8:	4a70      	ldr	r2, [pc, #448]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006cee:	6013      	str	r3, [r2, #0]
90006cf0:	4b6e      	ldr	r3, [pc, #440]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cf2:	681b      	ldr	r3, [r3, #0]
90006cf4:	4a6d      	ldr	r2, [pc, #436]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006cfc:	687b      	ldr	r3, [r7, #4]
90006cfe:	685b      	ldr	r3, [r3, #4]
90006d00:	2b00      	cmp	r3, #0
90006d02:	d013      	beq.n	90006d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d04:	f7fc fae6 	bl	900032d4 <HAL_GetTick>
90006d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006d0a:	e008      	b.n	90006d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006d0c:	f7fc fae2 	bl	900032d4 <HAL_GetTick>
90006d10:	4602      	mov	r2, r0
90006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d14:	1ad3      	subs	r3, r2, r3
90006d16:	2b64      	cmp	r3, #100	@ 0x64
90006d18:	d901      	bls.n	90006d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006d1a:	2303      	movs	r3, #3
90006d1c:	e3d4      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006d1e:	4b63      	ldr	r3, [pc, #396]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006d20:	681b      	ldr	r3, [r3, #0]
90006d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006d26:	2b00      	cmp	r3, #0
90006d28:	d0f0      	beq.n	90006d0c <HAL_RCC_OscConfig+0xe8>
90006d2a:	e014      	b.n	90006d56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d2c:	f7fc fad2 	bl	900032d4 <HAL_GetTick>
90006d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d32:	e008      	b.n	90006d46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006d34:	f7fc face 	bl	900032d4 <HAL_GetTick>
90006d38:	4602      	mov	r2, r0
90006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d3c:	1ad3      	subs	r3, r2, r3
90006d3e:	2b64      	cmp	r3, #100	@ 0x64
90006d40:	d901      	bls.n	90006d46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006d42:	2303      	movs	r3, #3
90006d44:	e3c0      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d46:	4b59      	ldr	r3, [pc, #356]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006d48:	681b      	ldr	r3, [r3, #0]
90006d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006d4e:	2b00      	cmp	r3, #0
90006d50:	d1f0      	bne.n	90006d34 <HAL_RCC_OscConfig+0x110>
90006d52:	e000      	b.n	90006d56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006d56:	687b      	ldr	r3, [r7, #4]
90006d58:	681b      	ldr	r3, [r3, #0]
90006d5a:	f003 0302 	and.w	r3, r3, #2
90006d5e:	2b00      	cmp	r3, #0
90006d60:	f000 80ca 	beq.w	90006ef8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006d64:	4b51      	ldr	r3, [pc, #324]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006d66:	691b      	ldr	r3, [r3, #16]
90006d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006d6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006d6e:	4b4f      	ldr	r3, [pc, #316]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006d72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006d74:	6a3b      	ldr	r3, [r7, #32]
90006d76:	2b00      	cmp	r3, #0
90006d78:	d007      	beq.n	90006d8a <HAL_RCC_OscConfig+0x166>
90006d7a:	6a3b      	ldr	r3, [r7, #32]
90006d7c:	2b18      	cmp	r3, #24
90006d7e:	d156      	bne.n	90006e2e <HAL_RCC_OscConfig+0x20a>
90006d80:	69fb      	ldr	r3, [r7, #28]
90006d82:	f003 0303 	and.w	r3, r3, #3
90006d86:	2b00      	cmp	r3, #0
90006d88:	d151      	bne.n	90006e2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d8a:	4b48      	ldr	r3, [pc, #288]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006d8c:	681b      	ldr	r3, [r3, #0]
90006d8e:	f003 0304 	and.w	r3, r3, #4
90006d92:	2b00      	cmp	r3, #0
90006d94:	d005      	beq.n	90006da2 <HAL_RCC_OscConfig+0x17e>
90006d96:	687b      	ldr	r3, [r7, #4]
90006d98:	68db      	ldr	r3, [r3, #12]
90006d9a:	2b00      	cmp	r3, #0
90006d9c:	d101      	bne.n	90006da2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006d9e:	2301      	movs	r3, #1
90006da0:	e392      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006da2:	4b42      	ldr	r3, [pc, #264]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006da4:	681b      	ldr	r3, [r3, #0]
90006da6:	f023 0219 	bic.w	r2, r3, #25
90006daa:	687b      	ldr	r3, [r7, #4]
90006dac:	68db      	ldr	r3, [r3, #12]
90006dae:	493f      	ldr	r1, [pc, #252]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006db0:	4313      	orrs	r3, r2
90006db2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006db4:	f7fc fa8e 	bl	900032d4 <HAL_GetTick>
90006db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dba:	e008      	b.n	90006dce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006dbc:	f7fc fa8a 	bl	900032d4 <HAL_GetTick>
90006dc0:	4602      	mov	r2, r0
90006dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006dc4:	1ad3      	subs	r3, r2, r3
90006dc6:	2b02      	cmp	r3, #2
90006dc8:	d901      	bls.n	90006dce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006dca:	2303      	movs	r3, #3
90006dcc:	e37c      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dce:	4b37      	ldr	r3, [pc, #220]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006dd0:	681b      	ldr	r3, [r3, #0]
90006dd2:	f003 0304 	and.w	r3, r3, #4
90006dd6:	2b00      	cmp	r3, #0
90006dd8:	d0f0      	beq.n	90006dbc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006dda:	f7fc faab 	bl	90003334 <HAL_GetREVID>
90006dde:	4603      	mov	r3, r0
90006de0:	f241 0203 	movw	r2, #4099	@ 0x1003
90006de4:	4293      	cmp	r3, r2
90006de6:	d817      	bhi.n	90006e18 <HAL_RCC_OscConfig+0x1f4>
90006de8:	687b      	ldr	r3, [r7, #4]
90006dea:	691b      	ldr	r3, [r3, #16]
90006dec:	2b40      	cmp	r3, #64	@ 0x40
90006dee:	d108      	bne.n	90006e02 <HAL_RCC_OscConfig+0x1de>
90006df0:	4b2e      	ldr	r3, [pc, #184]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006df2:	685b      	ldr	r3, [r3, #4]
90006df4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006df8:	4a2c      	ldr	r2, [pc, #176]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006dfe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e00:	e07a      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e02:	4b2a      	ldr	r3, [pc, #168]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e04:	685b      	ldr	r3, [r3, #4]
90006e06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006e0a:	687b      	ldr	r3, [r7, #4]
90006e0c:	691b      	ldr	r3, [r3, #16]
90006e0e:	031b      	lsls	r3, r3, #12
90006e10:	4926      	ldr	r1, [pc, #152]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e12:	4313      	orrs	r3, r2
90006e14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e16:	e06f      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e18:	4b24      	ldr	r3, [pc, #144]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e1a:	685b      	ldr	r3, [r3, #4]
90006e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006e20:	687b      	ldr	r3, [r7, #4]
90006e22:	691b      	ldr	r3, [r3, #16]
90006e24:	061b      	lsls	r3, r3, #24
90006e26:	4921      	ldr	r1, [pc, #132]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e28:	4313      	orrs	r3, r2
90006e2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e2c:	e064      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006e2e:	687b      	ldr	r3, [r7, #4]
90006e30:	68db      	ldr	r3, [r3, #12]
90006e32:	2b00      	cmp	r3, #0
90006e34:	d047      	beq.n	90006ec6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006e36:	4b1d      	ldr	r3, [pc, #116]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e38:	681b      	ldr	r3, [r3, #0]
90006e3a:	f023 0219 	bic.w	r2, r3, #25
90006e3e:	687b      	ldr	r3, [r7, #4]
90006e40:	68db      	ldr	r3, [r3, #12]
90006e42:	491a      	ldr	r1, [pc, #104]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e44:	4313      	orrs	r3, r2
90006e46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e48:	f7fc fa44 	bl	900032d4 <HAL_GetTick>
90006e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e4e:	e008      	b.n	90006e62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006e50:	f7fc fa40 	bl	900032d4 <HAL_GetTick>
90006e54:	4602      	mov	r2, r0
90006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e58:	1ad3      	subs	r3, r2, r3
90006e5a:	2b02      	cmp	r3, #2
90006e5c:	d901      	bls.n	90006e62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006e5e:	2303      	movs	r3, #3
90006e60:	e332      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e62:	4b12      	ldr	r3, [pc, #72]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e64:	681b      	ldr	r3, [r3, #0]
90006e66:	f003 0304 	and.w	r3, r3, #4
90006e6a:	2b00      	cmp	r3, #0
90006e6c:	d0f0      	beq.n	90006e50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e6e:	f7fc fa61 	bl	90003334 <HAL_GetREVID>
90006e72:	4603      	mov	r3, r0
90006e74:	f241 0203 	movw	r2, #4099	@ 0x1003
90006e78:	4293      	cmp	r3, r2
90006e7a:	d819      	bhi.n	90006eb0 <HAL_RCC_OscConfig+0x28c>
90006e7c:	687b      	ldr	r3, [r7, #4]
90006e7e:	691b      	ldr	r3, [r3, #16]
90006e80:	2b40      	cmp	r3, #64	@ 0x40
90006e82:	d108      	bne.n	90006e96 <HAL_RCC_OscConfig+0x272>
90006e84:	4b09      	ldr	r3, [pc, #36]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e86:	685b      	ldr	r3, [r3, #4]
90006e88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006e8c:	4a07      	ldr	r2, [pc, #28]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006e92:	6053      	str	r3, [r2, #4]
90006e94:	e030      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
90006e96:	4b05      	ldr	r3, [pc, #20]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006e98:	685b      	ldr	r3, [r3, #4]
90006e9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006e9e:	687b      	ldr	r3, [r7, #4]
90006ea0:	691b      	ldr	r3, [r3, #16]
90006ea2:	031b      	lsls	r3, r3, #12
90006ea4:	4901      	ldr	r1, [pc, #4]	@ (90006eac <HAL_RCC_OscConfig+0x288>)
90006ea6:	4313      	orrs	r3, r2
90006ea8:	604b      	str	r3, [r1, #4]
90006eaa:	e025      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
90006eac:	58024400 	.word	0x58024400
90006eb0:	4b9a      	ldr	r3, [pc, #616]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006eb2:	685b      	ldr	r3, [r3, #4]
90006eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006eb8:	687b      	ldr	r3, [r7, #4]
90006eba:	691b      	ldr	r3, [r3, #16]
90006ebc:	061b      	lsls	r3, r3, #24
90006ebe:	4997      	ldr	r1, [pc, #604]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ec0:	4313      	orrs	r3, r2
90006ec2:	604b      	str	r3, [r1, #4]
90006ec4:	e018      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006ec6:	4b95      	ldr	r3, [pc, #596]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ec8:	681b      	ldr	r3, [r3, #0]
90006eca:	4a94      	ldr	r2, [pc, #592]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ecc:	f023 0301 	bic.w	r3, r3, #1
90006ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006ed2:	f7fc f9ff 	bl	900032d4 <HAL_GetTick>
90006ed6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006ed8:	e008      	b.n	90006eec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006eda:	f7fc f9fb 	bl	900032d4 <HAL_GetTick>
90006ede:	4602      	mov	r2, r0
90006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006ee2:	1ad3      	subs	r3, r2, r3
90006ee4:	2b02      	cmp	r3, #2
90006ee6:	d901      	bls.n	90006eec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006ee8:	2303      	movs	r3, #3
90006eea:	e2ed      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006eec:	4b8b      	ldr	r3, [pc, #556]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006eee:	681b      	ldr	r3, [r3, #0]
90006ef0:	f003 0304 	and.w	r3, r3, #4
90006ef4:	2b00      	cmp	r3, #0
90006ef6:	d1f0      	bne.n	90006eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006ef8:	687b      	ldr	r3, [r7, #4]
90006efa:	681b      	ldr	r3, [r3, #0]
90006efc:	f003 0310 	and.w	r3, r3, #16
90006f00:	2b00      	cmp	r3, #0
90006f02:	f000 80a9 	beq.w	90007058 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006f06:	4b85      	ldr	r3, [pc, #532]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f08:	691b      	ldr	r3, [r3, #16]
90006f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006f0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006f10:	4b82      	ldr	r3, [pc, #520]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006f14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006f16:	69bb      	ldr	r3, [r7, #24]
90006f18:	2b08      	cmp	r3, #8
90006f1a:	d007      	beq.n	90006f2c <HAL_RCC_OscConfig+0x308>
90006f1c:	69bb      	ldr	r3, [r7, #24]
90006f1e:	2b18      	cmp	r3, #24
90006f20:	d13a      	bne.n	90006f98 <HAL_RCC_OscConfig+0x374>
90006f22:	697b      	ldr	r3, [r7, #20]
90006f24:	f003 0303 	and.w	r3, r3, #3
90006f28:	2b01      	cmp	r3, #1
90006f2a:	d135      	bne.n	90006f98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f2c:	4b7b      	ldr	r3, [pc, #492]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f2e:	681b      	ldr	r3, [r3, #0]
90006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f34:	2b00      	cmp	r3, #0
90006f36:	d005      	beq.n	90006f44 <HAL_RCC_OscConfig+0x320>
90006f38:	687b      	ldr	r3, [r7, #4]
90006f3a:	69db      	ldr	r3, [r3, #28]
90006f3c:	2b80      	cmp	r3, #128	@ 0x80
90006f3e:	d001      	beq.n	90006f44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006f40:	2301      	movs	r3, #1
90006f42:	e2c1      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f44:	f7fc f9f6 	bl	90003334 <HAL_GetREVID>
90006f48:	4603      	mov	r3, r0
90006f4a:	f241 0203 	movw	r2, #4099	@ 0x1003
90006f4e:	4293      	cmp	r3, r2
90006f50:	d817      	bhi.n	90006f82 <HAL_RCC_OscConfig+0x35e>
90006f52:	687b      	ldr	r3, [r7, #4]
90006f54:	6a1b      	ldr	r3, [r3, #32]
90006f56:	2b20      	cmp	r3, #32
90006f58:	d108      	bne.n	90006f6c <HAL_RCC_OscConfig+0x348>
90006f5a:	4b70      	ldr	r3, [pc, #448]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f5c:	685b      	ldr	r3, [r3, #4]
90006f5e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006f62:	4a6e      	ldr	r2, [pc, #440]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006f68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f6a:	e075      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f6c:	4b6b      	ldr	r3, [pc, #428]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f6e:	685b      	ldr	r3, [r3, #4]
90006f70:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006f74:	687b      	ldr	r3, [r7, #4]
90006f76:	6a1b      	ldr	r3, [r3, #32]
90006f78:	069b      	lsls	r3, r3, #26
90006f7a:	4968      	ldr	r1, [pc, #416]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f7c:	4313      	orrs	r3, r2
90006f7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f80:	e06a      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f82:	4b66      	ldr	r3, [pc, #408]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f84:	68db      	ldr	r3, [r3, #12]
90006f86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006f8a:	687b      	ldr	r3, [r7, #4]
90006f8c:	6a1b      	ldr	r3, [r3, #32]
90006f8e:	061b      	lsls	r3, r3, #24
90006f90:	4962      	ldr	r1, [pc, #392]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f92:	4313      	orrs	r3, r2
90006f94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f96:	e05f      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006f98:	687b      	ldr	r3, [r7, #4]
90006f9a:	69db      	ldr	r3, [r3, #28]
90006f9c:	2b00      	cmp	r3, #0
90006f9e:	d042      	beq.n	90007026 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006fa0:	4b5e      	ldr	r3, [pc, #376]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fa2:	681b      	ldr	r3, [r3, #0]
90006fa4:	4a5d      	ldr	r2, [pc, #372]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006fac:	f7fc f992 	bl	900032d4 <HAL_GetTick>
90006fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fb2:	e008      	b.n	90006fc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006fb4:	f7fc f98e 	bl	900032d4 <HAL_GetTick>
90006fb8:	4602      	mov	r2, r0
90006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006fbc:	1ad3      	subs	r3, r2, r3
90006fbe:	2b02      	cmp	r3, #2
90006fc0:	d901      	bls.n	90006fc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006fc2:	2303      	movs	r3, #3
90006fc4:	e280      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fc6:	4b55      	ldr	r3, [pc, #340]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fc8:	681b      	ldr	r3, [r3, #0]
90006fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006fce:	2b00      	cmp	r3, #0
90006fd0:	d0f0      	beq.n	90006fb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006fd2:	f7fc f9af 	bl	90003334 <HAL_GetREVID>
90006fd6:	4603      	mov	r3, r0
90006fd8:	f241 0203 	movw	r2, #4099	@ 0x1003
90006fdc:	4293      	cmp	r3, r2
90006fde:	d817      	bhi.n	90007010 <HAL_RCC_OscConfig+0x3ec>
90006fe0:	687b      	ldr	r3, [r7, #4]
90006fe2:	6a1b      	ldr	r3, [r3, #32]
90006fe4:	2b20      	cmp	r3, #32
90006fe6:	d108      	bne.n	90006ffa <HAL_RCC_OscConfig+0x3d6>
90006fe8:	4b4c      	ldr	r3, [pc, #304]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fea:	685b      	ldr	r3, [r3, #4]
90006fec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006ff0:	4a4a      	ldr	r2, [pc, #296]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ff2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006ff6:	6053      	str	r3, [r2, #4]
90006ff8:	e02e      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
90006ffa:	4b48      	ldr	r3, [pc, #288]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ffc:	685b      	ldr	r3, [r3, #4]
90006ffe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90007002:	687b      	ldr	r3, [r7, #4]
90007004:	6a1b      	ldr	r3, [r3, #32]
90007006:	069b      	lsls	r3, r3, #26
90007008:	4944      	ldr	r1, [pc, #272]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000700a:	4313      	orrs	r3, r2
9000700c:	604b      	str	r3, [r1, #4]
9000700e:	e023      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
90007010:	4b42      	ldr	r3, [pc, #264]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007012:	68db      	ldr	r3, [r3, #12]
90007014:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90007018:	687b      	ldr	r3, [r7, #4]
9000701a:	6a1b      	ldr	r3, [r3, #32]
9000701c:	061b      	lsls	r3, r3, #24
9000701e:	493f      	ldr	r1, [pc, #252]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007020:	4313      	orrs	r3, r2
90007022:	60cb      	str	r3, [r1, #12]
90007024:	e018      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90007026:	4b3d      	ldr	r3, [pc, #244]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007028:	681b      	ldr	r3, [r3, #0]
9000702a:	4a3c      	ldr	r2, [pc, #240]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000702c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90007030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007032:	f7fc f94f 	bl	900032d4 <HAL_GetTick>
90007036:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007038:	e008      	b.n	9000704c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000703a:	f7fc f94b 	bl	900032d4 <HAL_GetTick>
9000703e:	4602      	mov	r2, r0
90007040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007042:	1ad3      	subs	r3, r2, r3
90007044:	2b02      	cmp	r3, #2
90007046:	d901      	bls.n	9000704c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90007048:	2303      	movs	r3, #3
9000704a:	e23d      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000704c:	4b33      	ldr	r3, [pc, #204]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000704e:	681b      	ldr	r3, [r3, #0]
90007050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007054:	2b00      	cmp	r3, #0
90007056:	d1f0      	bne.n	9000703a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90007058:	687b      	ldr	r3, [r7, #4]
9000705a:	681b      	ldr	r3, [r3, #0]
9000705c:	f003 0308 	and.w	r3, r3, #8
90007060:	2b00      	cmp	r3, #0
90007062:	d036      	beq.n	900070d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90007064:	687b      	ldr	r3, [r7, #4]
90007066:	695b      	ldr	r3, [r3, #20]
90007068:	2b00      	cmp	r3, #0
9000706a:	d019      	beq.n	900070a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
9000706c:	4b2b      	ldr	r3, [pc, #172]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000706e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007070:	4a2a      	ldr	r2, [pc, #168]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007072:	f043 0301 	orr.w	r3, r3, #1
90007076:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007078:	f7fc f92c 	bl	900032d4 <HAL_GetTick>
9000707c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000707e:	e008      	b.n	90007092 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007080:	f7fc f928 	bl	900032d4 <HAL_GetTick>
90007084:	4602      	mov	r2, r0
90007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007088:	1ad3      	subs	r3, r2, r3
9000708a:	2b02      	cmp	r3, #2
9000708c:	d901      	bls.n	90007092 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
9000708e:	2303      	movs	r3, #3
90007090:	e21a      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007092:	4b22      	ldr	r3, [pc, #136]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007096:	f003 0302 	and.w	r3, r3, #2
9000709a:	2b00      	cmp	r3, #0
9000709c:	d0f0      	beq.n	90007080 <HAL_RCC_OscConfig+0x45c>
9000709e:	e018      	b.n	900070d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900070a0:	4b1e      	ldr	r3, [pc, #120]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900070a4:	4a1d      	ldr	r2, [pc, #116]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070a6:	f023 0301 	bic.w	r3, r3, #1
900070aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900070ac:	f7fc f912 	bl	900032d4 <HAL_GetTick>
900070b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070b2:	e008      	b.n	900070c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900070b4:	f7fc f90e 	bl	900032d4 <HAL_GetTick>
900070b8:	4602      	mov	r2, r0
900070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070bc:	1ad3      	subs	r3, r2, r3
900070be:	2b02      	cmp	r3, #2
900070c0:	d901      	bls.n	900070c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
900070c2:	2303      	movs	r3, #3
900070c4:	e200      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070c6:	4b15      	ldr	r3, [pc, #84]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900070ca:	f003 0302 	and.w	r3, r3, #2
900070ce:	2b00      	cmp	r3, #0
900070d0:	d1f0      	bne.n	900070b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
900070d2:	687b      	ldr	r3, [r7, #4]
900070d4:	681b      	ldr	r3, [r3, #0]
900070d6:	f003 0320 	and.w	r3, r3, #32
900070da:	2b00      	cmp	r3, #0
900070dc:	d039      	beq.n	90007152 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
900070de:	687b      	ldr	r3, [r7, #4]
900070e0:	699b      	ldr	r3, [r3, #24]
900070e2:	2b00      	cmp	r3, #0
900070e4:	d01c      	beq.n	90007120 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
900070e6:	4b0d      	ldr	r3, [pc, #52]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070e8:	681b      	ldr	r3, [r3, #0]
900070ea:	4a0c      	ldr	r2, [pc, #48]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
900070f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900070f2:	f7fc f8ef 	bl	900032d4 <HAL_GetTick>
900070f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
900070f8:	e008      	b.n	9000710c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
900070fa:	f7fc f8eb 	bl	900032d4 <HAL_GetTick>
900070fe:	4602      	mov	r2, r0
90007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007102:	1ad3      	subs	r3, r2, r3
90007104:	2b02      	cmp	r3, #2
90007106:	d901      	bls.n	9000710c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007108:	2303      	movs	r3, #3
9000710a:	e1dd      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000710c:	4b03      	ldr	r3, [pc, #12]	@ (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000710e:	681b      	ldr	r3, [r3, #0]
90007110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007114:	2b00      	cmp	r3, #0
90007116:	d0f0      	beq.n	900070fa <HAL_RCC_OscConfig+0x4d6>
90007118:	e01b      	b.n	90007152 <HAL_RCC_OscConfig+0x52e>
9000711a:	bf00      	nop
9000711c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007120:	4b9b      	ldr	r3, [pc, #620]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007122:	681b      	ldr	r3, [r3, #0]
90007124:	4a9a      	ldr	r2, [pc, #616]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000712a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000712c:	f7fc f8d2 	bl	900032d4 <HAL_GetTick>
90007130:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007132:	e008      	b.n	90007146 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007134:	f7fc f8ce 	bl	900032d4 <HAL_GetTick>
90007138:	4602      	mov	r2, r0
9000713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000713c:	1ad3      	subs	r3, r2, r3
9000713e:	2b02      	cmp	r3, #2
90007140:	d901      	bls.n	90007146 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90007142:	2303      	movs	r3, #3
90007144:	e1c0      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007146:	4b92      	ldr	r3, [pc, #584]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007148:	681b      	ldr	r3, [r3, #0]
9000714a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000714e:	2b00      	cmp	r3, #0
90007150:	d1f0      	bne.n	90007134 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90007152:	687b      	ldr	r3, [r7, #4]
90007154:	681b      	ldr	r3, [r3, #0]
90007156:	f003 0304 	and.w	r3, r3, #4
9000715a:	2b00      	cmp	r3, #0
9000715c:	f000 8081 	beq.w	90007262 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007160:	4b8c      	ldr	r3, [pc, #560]	@ (90007394 <HAL_RCC_OscConfig+0x770>)
90007162:	681b      	ldr	r3, [r3, #0]
90007164:	4a8b      	ldr	r2, [pc, #556]	@ (90007394 <HAL_RCC_OscConfig+0x770>)
90007166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000716a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000716c:	f7fc f8b2 	bl	900032d4 <HAL_GetTick>
90007170:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007172:	e008      	b.n	90007186 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007174:	f7fc f8ae 	bl	900032d4 <HAL_GetTick>
90007178:	4602      	mov	r2, r0
9000717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000717c:	1ad3      	subs	r3, r2, r3
9000717e:	2b64      	cmp	r3, #100	@ 0x64
90007180:	d901      	bls.n	90007186 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90007182:	2303      	movs	r3, #3
90007184:	e1a0      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007186:	4b83      	ldr	r3, [pc, #524]	@ (90007394 <HAL_RCC_OscConfig+0x770>)
90007188:	681b      	ldr	r3, [r3, #0]
9000718a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000718e:	2b00      	cmp	r3, #0
90007190:	d0f0      	beq.n	90007174 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90007192:	687b      	ldr	r3, [r7, #4]
90007194:	689b      	ldr	r3, [r3, #8]
90007196:	2b01      	cmp	r3, #1
90007198:	d106      	bne.n	900071a8 <HAL_RCC_OscConfig+0x584>
9000719a:	4b7d      	ldr	r3, [pc, #500]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000719c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000719e:	4a7c      	ldr	r2, [pc, #496]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071a0:	f043 0301 	orr.w	r3, r3, #1
900071a4:	6713      	str	r3, [r2, #112]	@ 0x70
900071a6:	e02d      	b.n	90007204 <HAL_RCC_OscConfig+0x5e0>
900071a8:	687b      	ldr	r3, [r7, #4]
900071aa:	689b      	ldr	r3, [r3, #8]
900071ac:	2b00      	cmp	r3, #0
900071ae:	d10c      	bne.n	900071ca <HAL_RCC_OscConfig+0x5a6>
900071b0:	4b77      	ldr	r3, [pc, #476]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071b4:	4a76      	ldr	r2, [pc, #472]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071b6:	f023 0301 	bic.w	r3, r3, #1
900071ba:	6713      	str	r3, [r2, #112]	@ 0x70
900071bc:	4b74      	ldr	r3, [pc, #464]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071c0:	4a73      	ldr	r2, [pc, #460]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071c2:	f023 0304 	bic.w	r3, r3, #4
900071c6:	6713      	str	r3, [r2, #112]	@ 0x70
900071c8:	e01c      	b.n	90007204 <HAL_RCC_OscConfig+0x5e0>
900071ca:	687b      	ldr	r3, [r7, #4]
900071cc:	689b      	ldr	r3, [r3, #8]
900071ce:	2b05      	cmp	r3, #5
900071d0:	d10c      	bne.n	900071ec <HAL_RCC_OscConfig+0x5c8>
900071d2:	4b6f      	ldr	r3, [pc, #444]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071d6:	4a6e      	ldr	r2, [pc, #440]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071d8:	f043 0304 	orr.w	r3, r3, #4
900071dc:	6713      	str	r3, [r2, #112]	@ 0x70
900071de:	4b6c      	ldr	r3, [pc, #432]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071e2:	4a6b      	ldr	r2, [pc, #428]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071e4:	f043 0301 	orr.w	r3, r3, #1
900071e8:	6713      	str	r3, [r2, #112]	@ 0x70
900071ea:	e00b      	b.n	90007204 <HAL_RCC_OscConfig+0x5e0>
900071ec:	4b68      	ldr	r3, [pc, #416]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071f0:	4a67      	ldr	r2, [pc, #412]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071f2:	f023 0301 	bic.w	r3, r3, #1
900071f6:	6713      	str	r3, [r2, #112]	@ 0x70
900071f8:	4b65      	ldr	r3, [pc, #404]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071fc:	4a64      	ldr	r2, [pc, #400]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900071fe:	f023 0304 	bic.w	r3, r3, #4
90007202:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90007204:	687b      	ldr	r3, [r7, #4]
90007206:	689b      	ldr	r3, [r3, #8]
90007208:	2b00      	cmp	r3, #0
9000720a:	d015      	beq.n	90007238 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000720c:	f7fc f862 	bl	900032d4 <HAL_GetTick>
90007210:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007212:	e00a      	b.n	9000722a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007214:	f7fc f85e 	bl	900032d4 <HAL_GetTick>
90007218:	4602      	mov	r2, r0
9000721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000721c:	1ad3      	subs	r3, r2, r3
9000721e:	f241 3288 	movw	r2, #5000	@ 0x1388
90007222:	4293      	cmp	r3, r2
90007224:	d901      	bls.n	9000722a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90007226:	2303      	movs	r3, #3
90007228:	e14e      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000722a:	4b59      	ldr	r3, [pc, #356]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000722c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000722e:	f003 0302 	and.w	r3, r3, #2
90007232:	2b00      	cmp	r3, #0
90007234:	d0ee      	beq.n	90007214 <HAL_RCC_OscConfig+0x5f0>
90007236:	e014      	b.n	90007262 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007238:	f7fc f84c 	bl	900032d4 <HAL_GetTick>
9000723c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000723e:	e00a      	b.n	90007256 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007240:	f7fc f848 	bl	900032d4 <HAL_GetTick>
90007244:	4602      	mov	r2, r0
90007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007248:	1ad3      	subs	r3, r2, r3
9000724a:	f241 3288 	movw	r2, #5000	@ 0x1388
9000724e:	4293      	cmp	r3, r2
90007250:	d901      	bls.n	90007256 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90007252:	2303      	movs	r3, #3
90007254:	e138      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007256:	4b4e      	ldr	r3, [pc, #312]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000725a:	f003 0302 	and.w	r3, r3, #2
9000725e:	2b00      	cmp	r3, #0
90007260:	d1ee      	bne.n	90007240 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90007262:	687b      	ldr	r3, [r7, #4]
90007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007266:	2b00      	cmp	r3, #0
90007268:	f000 812d 	beq.w	900074c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000726c:	4b48      	ldr	r3, [pc, #288]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000726e:	691b      	ldr	r3, [r3, #16]
90007270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007274:	2b18      	cmp	r3, #24
90007276:	f000 80bd 	beq.w	900073f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000727a:	687b      	ldr	r3, [r7, #4]
9000727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000727e:	2b02      	cmp	r3, #2
90007280:	f040 809e 	bne.w	900073c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007284:	4b42      	ldr	r3, [pc, #264]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007286:	681b      	ldr	r3, [r3, #0]
90007288:	4a41      	ldr	r2, [pc, #260]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000728a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
9000728e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007290:	f7fc f820 	bl	900032d4 <HAL_GetTick>
90007294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007296:	e008      	b.n	900072aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007298:	f7fc f81c 	bl	900032d4 <HAL_GetTick>
9000729c:	4602      	mov	r2, r0
9000729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072a0:	1ad3      	subs	r3, r2, r3
900072a2:	2b02      	cmp	r3, #2
900072a4:	d901      	bls.n	900072aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900072a6:	2303      	movs	r3, #3
900072a8:	e10e      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900072aa:	4b39      	ldr	r3, [pc, #228]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900072ac:	681b      	ldr	r3, [r3, #0]
900072ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900072b2:	2b00      	cmp	r3, #0
900072b4:	d1f0      	bne.n	90007298 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900072b6:	4b36      	ldr	r3, [pc, #216]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900072b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900072ba:	4b37      	ldr	r3, [pc, #220]	@ (90007398 <HAL_RCC_OscConfig+0x774>)
900072bc:	4013      	ands	r3, r2
900072be:	687a      	ldr	r2, [r7, #4]
900072c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900072c2:	687a      	ldr	r2, [r7, #4]
900072c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900072c6:	0112      	lsls	r2, r2, #4
900072c8:	430a      	orrs	r2, r1
900072ca:	4931      	ldr	r1, [pc, #196]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
900072cc:	4313      	orrs	r3, r2
900072ce:	628b      	str	r3, [r1, #40]	@ 0x28
900072d0:	687b      	ldr	r3, [r7, #4]
900072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900072d4:	3b01      	subs	r3, #1
900072d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
900072da:	687b      	ldr	r3, [r7, #4]
900072dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900072de:	3b01      	subs	r3, #1
900072e0:	025b      	lsls	r3, r3, #9
900072e2:	b29b      	uxth	r3, r3
900072e4:	431a      	orrs	r2, r3
900072e6:	687b      	ldr	r3, [r7, #4]
900072e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900072ea:	3b01      	subs	r3, #1
900072ec:	041b      	lsls	r3, r3, #16
900072ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900072f2:	431a      	orrs	r2, r3
900072f4:	687b      	ldr	r3, [r7, #4]
900072f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900072f8:	3b01      	subs	r3, #1
900072fa:	061b      	lsls	r3, r3, #24
900072fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007300:	4923      	ldr	r1, [pc, #140]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007302:	4313      	orrs	r3, r2
90007304:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90007306:	4b22      	ldr	r3, [pc, #136]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000730a:	4a21      	ldr	r2, [pc, #132]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000730c:	f023 0301 	bic.w	r3, r3, #1
90007310:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007312:	4b1f      	ldr	r3, [pc, #124]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007316:	4b21      	ldr	r3, [pc, #132]	@ (9000739c <HAL_RCC_OscConfig+0x778>)
90007318:	4013      	ands	r3, r2
9000731a:	687a      	ldr	r2, [r7, #4]
9000731c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000731e:	00d2      	lsls	r2, r2, #3
90007320:	491b      	ldr	r1, [pc, #108]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007322:	4313      	orrs	r3, r2
90007324:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90007326:	4b1a      	ldr	r3, [pc, #104]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000732a:	f023 020c 	bic.w	r2, r3, #12
9000732e:	687b      	ldr	r3, [r7, #4]
90007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007332:	4917      	ldr	r1, [pc, #92]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007334:	4313      	orrs	r3, r2
90007336:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007338:	4b15      	ldr	r3, [pc, #84]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000733a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000733c:	f023 0202 	bic.w	r2, r3, #2
90007340:	687b      	ldr	r3, [r7, #4]
90007342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90007344:	4912      	ldr	r1, [pc, #72]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007346:	4313      	orrs	r3, r2
90007348:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000734a:	4b11      	ldr	r3, [pc, #68]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000734c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000734e:	4a10      	ldr	r2, [pc, #64]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007356:	4b0e      	ldr	r3, [pc, #56]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000735a:	4a0d      	ldr	r2, [pc, #52]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000735c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90007362:	4b0b      	ldr	r3, [pc, #44]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007366:	4a0a      	ldr	r2, [pc, #40]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
9000736c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
9000736e:	4b08      	ldr	r3, [pc, #32]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007372:	4a07      	ldr	r2, [pc, #28]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007374:	f043 0301 	orr.w	r3, r3, #1
90007378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
9000737a:	4b05      	ldr	r3, [pc, #20]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
9000737c:	681b      	ldr	r3, [r3, #0]
9000737e:	4a04      	ldr	r2, [pc, #16]	@ (90007390 <HAL_RCC_OscConfig+0x76c>)
90007380:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90007384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007386:	f7fb ffa5 	bl	900032d4 <HAL_GetTick>
9000738a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000738c:	e011      	b.n	900073b2 <HAL_RCC_OscConfig+0x78e>
9000738e:	bf00      	nop
90007390:	58024400 	.word	0x58024400
90007394:	58024800 	.word	0x58024800
90007398:	fffffc0c 	.word	0xfffffc0c
9000739c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900073a0:	f7fb ff98 	bl	900032d4 <HAL_GetTick>
900073a4:	4602      	mov	r2, r0
900073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073a8:	1ad3      	subs	r3, r2, r3
900073aa:	2b02      	cmp	r3, #2
900073ac:	d901      	bls.n	900073b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
900073ae:	2303      	movs	r3, #3
900073b0:	e08a      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900073b2:	4b47      	ldr	r3, [pc, #284]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073b4:	681b      	ldr	r3, [r3, #0]
900073b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900073ba:	2b00      	cmp	r3, #0
900073bc:	d0f0      	beq.n	900073a0 <HAL_RCC_OscConfig+0x77c>
900073be:	e082      	b.n	900074c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900073c0:	4b43      	ldr	r3, [pc, #268]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073c2:	681b      	ldr	r3, [r3, #0]
900073c4:	4a42      	ldr	r2, [pc, #264]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900073ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900073cc:	f7fb ff82 	bl	900032d4 <HAL_GetTick>
900073d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073d2:	e008      	b.n	900073e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900073d4:	f7fb ff7e 	bl	900032d4 <HAL_GetTick>
900073d8:	4602      	mov	r2, r0
900073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073dc:	1ad3      	subs	r3, r2, r3
900073de:	2b02      	cmp	r3, #2
900073e0:	d901      	bls.n	900073e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900073e2:	2303      	movs	r3, #3
900073e4:	e070      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073e6:	4b3a      	ldr	r3, [pc, #232]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073e8:	681b      	ldr	r3, [r3, #0]
900073ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900073ee:	2b00      	cmp	r3, #0
900073f0:	d1f0      	bne.n	900073d4 <HAL_RCC_OscConfig+0x7b0>
900073f2:	e068      	b.n	900074c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
900073f4:	4b36      	ldr	r3, [pc, #216]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900073f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
900073fa:	4b35      	ldr	r3, [pc, #212]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900073fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007400:	687b      	ldr	r3, [r7, #4]
90007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007404:	2b01      	cmp	r3, #1
90007406:	d031      	beq.n	9000746c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007408:	693b      	ldr	r3, [r7, #16]
9000740a:	f003 0203 	and.w	r2, r3, #3
9000740e:	687b      	ldr	r3, [r7, #4]
90007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007412:	429a      	cmp	r2, r3
90007414:	d12a      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007416:	693b      	ldr	r3, [r7, #16]
90007418:	091b      	lsrs	r3, r3, #4
9000741a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
9000741e:	687b      	ldr	r3, [r7, #4]
90007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007422:	429a      	cmp	r2, r3
90007424:	d122      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007426:	68fb      	ldr	r3, [r7, #12]
90007428:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000742c:	687b      	ldr	r3, [r7, #4]
9000742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007430:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007432:	429a      	cmp	r2, r3
90007434:	d11a      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007436:	68fb      	ldr	r3, [r7, #12]
90007438:	0a5b      	lsrs	r3, r3, #9
9000743a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000743e:	687b      	ldr	r3, [r7, #4]
90007440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007442:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007444:	429a      	cmp	r2, r3
90007446:	d111      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007448:	68fb      	ldr	r3, [r7, #12]
9000744a:	0c1b      	lsrs	r3, r3, #16
9000744c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007450:	687b      	ldr	r3, [r7, #4]
90007452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007454:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007456:	429a      	cmp	r2, r3
90007458:	d108      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000745a:	68fb      	ldr	r3, [r7, #12]
9000745c:	0e1b      	lsrs	r3, r3, #24
9000745e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007462:	687b      	ldr	r3, [r7, #4]
90007464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007466:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007468:	429a      	cmp	r2, r3
9000746a:	d001      	beq.n	90007470 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
9000746c:	2301      	movs	r3, #1
9000746e:	e02b      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007470:	4b17      	ldr	r3, [pc, #92]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
90007472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007474:	08db      	lsrs	r3, r3, #3
90007476:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000747a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000747c:	687b      	ldr	r3, [r7, #4]
9000747e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007480:	693a      	ldr	r2, [r7, #16]
90007482:	429a      	cmp	r2, r3
90007484:	d01f      	beq.n	900074c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90007486:	4b12      	ldr	r3, [pc, #72]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
90007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000748a:	4a11      	ldr	r2, [pc, #68]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
9000748c:	f023 0301 	bic.w	r3, r3, #1
90007490:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90007492:	f7fb ff1f 	bl	900032d4 <HAL_GetTick>
90007496:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007498:	bf00      	nop
9000749a:	f7fb ff1b 	bl	900032d4 <HAL_GetTick>
9000749e:	4602      	mov	r2, r0
900074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900074a2:	4293      	cmp	r3, r2
900074a4:	d0f9      	beq.n	9000749a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900074a6:	4b0a      	ldr	r3, [pc, #40]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900074aa:	4b0a      	ldr	r3, [pc, #40]	@ (900074d4 <HAL_RCC_OscConfig+0x8b0>)
900074ac:	4013      	ands	r3, r2
900074ae:	687a      	ldr	r2, [r7, #4]
900074b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
900074b2:	00d2      	lsls	r2, r2, #3
900074b4:	4906      	ldr	r1, [pc, #24]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074b6:	4313      	orrs	r3, r2
900074b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900074ba:	4b05      	ldr	r3, [pc, #20]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900074be:	4a04      	ldr	r2, [pc, #16]	@ (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074c0:	f043 0301 	orr.w	r3, r3, #1
900074c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
900074c6:	2300      	movs	r3, #0
}
900074c8:	4618      	mov	r0, r3
900074ca:	3730      	adds	r7, #48	@ 0x30
900074cc:	46bd      	mov	sp, r7
900074ce:	bd80      	pop	{r7, pc}
900074d0:	58024400 	.word	0x58024400
900074d4:	ffff0007 	.word	0xffff0007

900074d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900074d8:	b580      	push	{r7, lr}
900074da:	b086      	sub	sp, #24
900074dc:	af00      	add	r7, sp, #0
900074de:	6078      	str	r0, [r7, #4]
900074e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900074e2:	687b      	ldr	r3, [r7, #4]
900074e4:	2b00      	cmp	r3, #0
900074e6:	d101      	bne.n	900074ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900074e8:	2301      	movs	r3, #1
900074ea:	e19c      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900074ec:	4b8a      	ldr	r3, [pc, #552]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
900074ee:	681b      	ldr	r3, [r3, #0]
900074f0:	f003 030f 	and.w	r3, r3, #15
900074f4:	683a      	ldr	r2, [r7, #0]
900074f6:	429a      	cmp	r2, r3
900074f8:	d910      	bls.n	9000751c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900074fa:	4b87      	ldr	r3, [pc, #540]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
900074fc:	681b      	ldr	r3, [r3, #0]
900074fe:	f023 020f 	bic.w	r2, r3, #15
90007502:	4985      	ldr	r1, [pc, #532]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
90007504:	683b      	ldr	r3, [r7, #0]
90007506:	4313      	orrs	r3, r2
90007508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000750a:	4b83      	ldr	r3, [pc, #524]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
9000750c:	681b      	ldr	r3, [r3, #0]
9000750e:	f003 030f 	and.w	r3, r3, #15
90007512:	683a      	ldr	r2, [r7, #0]
90007514:	429a      	cmp	r2, r3
90007516:	d001      	beq.n	9000751c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007518:	2301      	movs	r3, #1
9000751a:	e184      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000751c:	687b      	ldr	r3, [r7, #4]
9000751e:	681b      	ldr	r3, [r3, #0]
90007520:	f003 0304 	and.w	r3, r3, #4
90007524:	2b00      	cmp	r3, #0
90007526:	d010      	beq.n	9000754a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007528:	687b      	ldr	r3, [r7, #4]
9000752a:	691a      	ldr	r2, [r3, #16]
9000752c:	4b7b      	ldr	r3, [pc, #492]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000752e:	699b      	ldr	r3, [r3, #24]
90007530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007534:	429a      	cmp	r2, r3
90007536:	d908      	bls.n	9000754a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007538:	4b78      	ldr	r3, [pc, #480]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000753a:	699b      	ldr	r3, [r3, #24]
9000753c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007540:	687b      	ldr	r3, [r7, #4]
90007542:	691b      	ldr	r3, [r3, #16]
90007544:	4975      	ldr	r1, [pc, #468]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
90007546:	4313      	orrs	r3, r2
90007548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000754a:	687b      	ldr	r3, [r7, #4]
9000754c:	681b      	ldr	r3, [r3, #0]
9000754e:	f003 0308 	and.w	r3, r3, #8
90007552:	2b00      	cmp	r3, #0
90007554:	d010      	beq.n	90007578 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007556:	687b      	ldr	r3, [r7, #4]
90007558:	695a      	ldr	r2, [r3, #20]
9000755a:	4b70      	ldr	r3, [pc, #448]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000755c:	69db      	ldr	r3, [r3, #28]
9000755e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007562:	429a      	cmp	r2, r3
90007564:	d908      	bls.n	90007578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007566:	4b6d      	ldr	r3, [pc, #436]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
90007568:	69db      	ldr	r3, [r3, #28]
9000756a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000756e:	687b      	ldr	r3, [r7, #4]
90007570:	695b      	ldr	r3, [r3, #20]
90007572:	496a      	ldr	r1, [pc, #424]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
90007574:	4313      	orrs	r3, r2
90007576:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007578:	687b      	ldr	r3, [r7, #4]
9000757a:	681b      	ldr	r3, [r3, #0]
9000757c:	f003 0310 	and.w	r3, r3, #16
90007580:	2b00      	cmp	r3, #0
90007582:	d010      	beq.n	900075a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007584:	687b      	ldr	r3, [r7, #4]
90007586:	699a      	ldr	r2, [r3, #24]
90007588:	4b64      	ldr	r3, [pc, #400]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000758a:	69db      	ldr	r3, [r3, #28]
9000758c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007590:	429a      	cmp	r2, r3
90007592:	d908      	bls.n	900075a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007594:	4b61      	ldr	r3, [pc, #388]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
90007596:	69db      	ldr	r3, [r3, #28]
90007598:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
9000759c:	687b      	ldr	r3, [r7, #4]
9000759e:	699b      	ldr	r3, [r3, #24]
900075a0:	495e      	ldr	r1, [pc, #376]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900075a2:	4313      	orrs	r3, r2
900075a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900075a6:	687b      	ldr	r3, [r7, #4]
900075a8:	681b      	ldr	r3, [r3, #0]
900075aa:	f003 0320 	and.w	r3, r3, #32
900075ae:	2b00      	cmp	r3, #0
900075b0:	d010      	beq.n	900075d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900075b2:	687b      	ldr	r3, [r7, #4]
900075b4:	69da      	ldr	r2, [r3, #28]
900075b6:	4b59      	ldr	r3, [pc, #356]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900075b8:	6a1b      	ldr	r3, [r3, #32]
900075ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900075be:	429a      	cmp	r2, r3
900075c0:	d908      	bls.n	900075d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900075c2:	4b56      	ldr	r3, [pc, #344]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900075c4:	6a1b      	ldr	r3, [r3, #32]
900075c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900075ca:	687b      	ldr	r3, [r7, #4]
900075cc:	69db      	ldr	r3, [r3, #28]
900075ce:	4953      	ldr	r1, [pc, #332]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900075d0:	4313      	orrs	r3, r2
900075d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900075d4:	687b      	ldr	r3, [r7, #4]
900075d6:	681b      	ldr	r3, [r3, #0]
900075d8:	f003 0302 	and.w	r3, r3, #2
900075dc:	2b00      	cmp	r3, #0
900075de:	d010      	beq.n	90007602 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900075e0:	687b      	ldr	r3, [r7, #4]
900075e2:	68da      	ldr	r2, [r3, #12]
900075e4:	4b4d      	ldr	r3, [pc, #308]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900075e6:	699b      	ldr	r3, [r3, #24]
900075e8:	f003 030f 	and.w	r3, r3, #15
900075ec:	429a      	cmp	r2, r3
900075ee:	d908      	bls.n	90007602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900075f0:	4b4a      	ldr	r3, [pc, #296]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900075f2:	699b      	ldr	r3, [r3, #24]
900075f4:	f023 020f 	bic.w	r2, r3, #15
900075f8:	687b      	ldr	r3, [r7, #4]
900075fa:	68db      	ldr	r3, [r3, #12]
900075fc:	4947      	ldr	r1, [pc, #284]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900075fe:	4313      	orrs	r3, r2
90007600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90007602:	687b      	ldr	r3, [r7, #4]
90007604:	681b      	ldr	r3, [r3, #0]
90007606:	f003 0301 	and.w	r3, r3, #1
9000760a:	2b00      	cmp	r3, #0
9000760c:	d055      	beq.n	900076ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000760e:	4b43      	ldr	r3, [pc, #268]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
90007610:	699b      	ldr	r3, [r3, #24]
90007612:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90007616:	687b      	ldr	r3, [r7, #4]
90007618:	689b      	ldr	r3, [r3, #8]
9000761a:	4940      	ldr	r1, [pc, #256]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000761c:	4313      	orrs	r3, r2
9000761e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007620:	687b      	ldr	r3, [r7, #4]
90007622:	685b      	ldr	r3, [r3, #4]
90007624:	2b02      	cmp	r3, #2
90007626:	d107      	bne.n	90007638 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007628:	4b3c      	ldr	r3, [pc, #240]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000762a:	681b      	ldr	r3, [r3, #0]
9000762c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007630:	2b00      	cmp	r3, #0
90007632:	d121      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007634:	2301      	movs	r3, #1
90007636:	e0f6      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007638:	687b      	ldr	r3, [r7, #4]
9000763a:	685b      	ldr	r3, [r3, #4]
9000763c:	2b03      	cmp	r3, #3
9000763e:	d107      	bne.n	90007650 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007640:	4b36      	ldr	r3, [pc, #216]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
90007642:	681b      	ldr	r3, [r3, #0]
90007644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007648:	2b00      	cmp	r3, #0
9000764a:	d115      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000764c:	2301      	movs	r3, #1
9000764e:	e0ea      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007650:	687b      	ldr	r3, [r7, #4]
90007652:	685b      	ldr	r3, [r3, #4]
90007654:	2b01      	cmp	r3, #1
90007656:	d107      	bne.n	90007668 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007658:	4b30      	ldr	r3, [pc, #192]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000765a:	681b      	ldr	r3, [r3, #0]
9000765c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007660:	2b00      	cmp	r3, #0
90007662:	d109      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007664:	2301      	movs	r3, #1
90007666:	e0de      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007668:	4b2c      	ldr	r3, [pc, #176]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000766a:	681b      	ldr	r3, [r3, #0]
9000766c:	f003 0304 	and.w	r3, r3, #4
90007670:	2b00      	cmp	r3, #0
90007672:	d101      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007674:	2301      	movs	r3, #1
90007676:	e0d6      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007678:	4b28      	ldr	r3, [pc, #160]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
9000767a:	691b      	ldr	r3, [r3, #16]
9000767c:	f023 0207 	bic.w	r2, r3, #7
90007680:	687b      	ldr	r3, [r7, #4]
90007682:	685b      	ldr	r3, [r3, #4]
90007684:	4925      	ldr	r1, [pc, #148]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
90007686:	4313      	orrs	r3, r2
90007688:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000768a:	f7fb fe23 	bl	900032d4 <HAL_GetTick>
9000768e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007690:	e00a      	b.n	900076a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90007692:	f7fb fe1f 	bl	900032d4 <HAL_GetTick>
90007696:	4602      	mov	r2, r0
90007698:	697b      	ldr	r3, [r7, #20]
9000769a:	1ad3      	subs	r3, r2, r3
9000769c:	f241 3288 	movw	r2, #5000	@ 0x1388
900076a0:	4293      	cmp	r3, r2
900076a2:	d901      	bls.n	900076a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
900076a4:	2303      	movs	r3, #3
900076a6:	e0be      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900076a8:	4b1c      	ldr	r3, [pc, #112]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900076aa:	691b      	ldr	r3, [r3, #16]
900076ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
900076b0:	687b      	ldr	r3, [r7, #4]
900076b2:	685b      	ldr	r3, [r3, #4]
900076b4:	00db      	lsls	r3, r3, #3
900076b6:	429a      	cmp	r2, r3
900076b8:	d1eb      	bne.n	90007692 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900076ba:	687b      	ldr	r3, [r7, #4]
900076bc:	681b      	ldr	r3, [r3, #0]
900076be:	f003 0302 	and.w	r3, r3, #2
900076c2:	2b00      	cmp	r3, #0
900076c4:	d010      	beq.n	900076e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900076c6:	687b      	ldr	r3, [r7, #4]
900076c8:	68da      	ldr	r2, [r3, #12]
900076ca:	4b14      	ldr	r3, [pc, #80]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900076cc:	699b      	ldr	r3, [r3, #24]
900076ce:	f003 030f 	and.w	r3, r3, #15
900076d2:	429a      	cmp	r2, r3
900076d4:	d208      	bcs.n	900076e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900076d6:	4b11      	ldr	r3, [pc, #68]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900076d8:	699b      	ldr	r3, [r3, #24]
900076da:	f023 020f 	bic.w	r2, r3, #15
900076de:	687b      	ldr	r3, [r7, #4]
900076e0:	68db      	ldr	r3, [r3, #12]
900076e2:	490e      	ldr	r1, [pc, #56]	@ (9000771c <HAL_RCC_ClockConfig+0x244>)
900076e4:	4313      	orrs	r3, r2
900076e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900076e8:	4b0b      	ldr	r3, [pc, #44]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
900076ea:	681b      	ldr	r3, [r3, #0]
900076ec:	f003 030f 	and.w	r3, r3, #15
900076f0:	683a      	ldr	r2, [r7, #0]
900076f2:	429a      	cmp	r2, r3
900076f4:	d214      	bcs.n	90007720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900076f6:	4b08      	ldr	r3, [pc, #32]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
900076f8:	681b      	ldr	r3, [r3, #0]
900076fa:	f023 020f 	bic.w	r2, r3, #15
900076fe:	4906      	ldr	r1, [pc, #24]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
90007700:	683b      	ldr	r3, [r7, #0]
90007702:	4313      	orrs	r3, r2
90007704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007706:	4b04      	ldr	r3, [pc, #16]	@ (90007718 <HAL_RCC_ClockConfig+0x240>)
90007708:	681b      	ldr	r3, [r3, #0]
9000770a:	f003 030f 	and.w	r3, r3, #15
9000770e:	683a      	ldr	r2, [r7, #0]
90007710:	429a      	cmp	r2, r3
90007712:	d005      	beq.n	90007720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007714:	2301      	movs	r3, #1
90007716:	e086      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
90007718:	52002000 	.word	0x52002000
9000771c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007720:	687b      	ldr	r3, [r7, #4]
90007722:	681b      	ldr	r3, [r3, #0]
90007724:	f003 0304 	and.w	r3, r3, #4
90007728:	2b00      	cmp	r3, #0
9000772a:	d010      	beq.n	9000774e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000772c:	687b      	ldr	r3, [r7, #4]
9000772e:	691a      	ldr	r2, [r3, #16]
90007730:	4b3f      	ldr	r3, [pc, #252]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
90007732:	699b      	ldr	r3, [r3, #24]
90007734:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007738:	429a      	cmp	r2, r3
9000773a:	d208      	bcs.n	9000774e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000773c:	4b3c      	ldr	r3, [pc, #240]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
9000773e:	699b      	ldr	r3, [r3, #24]
90007740:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007744:	687b      	ldr	r3, [r7, #4]
90007746:	691b      	ldr	r3, [r3, #16]
90007748:	4939      	ldr	r1, [pc, #228]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
9000774a:	4313      	orrs	r3, r2
9000774c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000774e:	687b      	ldr	r3, [r7, #4]
90007750:	681b      	ldr	r3, [r3, #0]
90007752:	f003 0308 	and.w	r3, r3, #8
90007756:	2b00      	cmp	r3, #0
90007758:	d010      	beq.n	9000777c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000775a:	687b      	ldr	r3, [r7, #4]
9000775c:	695a      	ldr	r2, [r3, #20]
9000775e:	4b34      	ldr	r3, [pc, #208]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
90007760:	69db      	ldr	r3, [r3, #28]
90007762:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007766:	429a      	cmp	r2, r3
90007768:	d208      	bcs.n	9000777c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000776a:	4b31      	ldr	r3, [pc, #196]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
9000776c:	69db      	ldr	r3, [r3, #28]
9000776e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007772:	687b      	ldr	r3, [r7, #4]
90007774:	695b      	ldr	r3, [r3, #20]
90007776:	492e      	ldr	r1, [pc, #184]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
90007778:	4313      	orrs	r3, r2
9000777a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000777c:	687b      	ldr	r3, [r7, #4]
9000777e:	681b      	ldr	r3, [r3, #0]
90007780:	f003 0310 	and.w	r3, r3, #16
90007784:	2b00      	cmp	r3, #0
90007786:	d010      	beq.n	900077aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007788:	687b      	ldr	r3, [r7, #4]
9000778a:	699a      	ldr	r2, [r3, #24]
9000778c:	4b28      	ldr	r3, [pc, #160]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
9000778e:	69db      	ldr	r3, [r3, #28]
90007790:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007794:	429a      	cmp	r2, r3
90007796:	d208      	bcs.n	900077aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007798:	4b25      	ldr	r3, [pc, #148]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
9000779a:	69db      	ldr	r3, [r3, #28]
9000779c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900077a0:	687b      	ldr	r3, [r7, #4]
900077a2:	699b      	ldr	r3, [r3, #24]
900077a4:	4922      	ldr	r1, [pc, #136]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
900077a6:	4313      	orrs	r3, r2
900077a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900077aa:	687b      	ldr	r3, [r7, #4]
900077ac:	681b      	ldr	r3, [r3, #0]
900077ae:	f003 0320 	and.w	r3, r3, #32
900077b2:	2b00      	cmp	r3, #0
900077b4:	d010      	beq.n	900077d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900077b6:	687b      	ldr	r3, [r7, #4]
900077b8:	69da      	ldr	r2, [r3, #28]
900077ba:	4b1d      	ldr	r3, [pc, #116]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
900077bc:	6a1b      	ldr	r3, [r3, #32]
900077be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900077c2:	429a      	cmp	r2, r3
900077c4:	d208      	bcs.n	900077d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900077c6:	4b1a      	ldr	r3, [pc, #104]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
900077c8:	6a1b      	ldr	r3, [r3, #32]
900077ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900077ce:	687b      	ldr	r3, [r7, #4]
900077d0:	69db      	ldr	r3, [r3, #28]
900077d2:	4917      	ldr	r1, [pc, #92]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
900077d4:	4313      	orrs	r3, r2
900077d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900077d8:	f000 f834 	bl	90007844 <HAL_RCC_GetSysClockFreq>
900077dc:	4602      	mov	r2, r0
900077de:	4b14      	ldr	r3, [pc, #80]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
900077e0:	699b      	ldr	r3, [r3, #24]
900077e2:	0a1b      	lsrs	r3, r3, #8
900077e4:	f003 030f 	and.w	r3, r3, #15
900077e8:	4912      	ldr	r1, [pc, #72]	@ (90007834 <HAL_RCC_ClockConfig+0x35c>)
900077ea:	5ccb      	ldrb	r3, [r1, r3]
900077ec:	f003 031f 	and.w	r3, r3, #31
900077f0:	fa22 f303 	lsr.w	r3, r2, r3
900077f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900077f6:	4b0e      	ldr	r3, [pc, #56]	@ (90007830 <HAL_RCC_ClockConfig+0x358>)
900077f8:	699b      	ldr	r3, [r3, #24]
900077fa:	f003 030f 	and.w	r3, r3, #15
900077fe:	4a0d      	ldr	r2, [pc, #52]	@ (90007834 <HAL_RCC_ClockConfig+0x35c>)
90007800:	5cd3      	ldrb	r3, [r2, r3]
90007802:	f003 031f 	and.w	r3, r3, #31
90007806:	693a      	ldr	r2, [r7, #16]
90007808:	fa22 f303 	lsr.w	r3, r2, r3
9000780c:	4a0a      	ldr	r2, [pc, #40]	@ (90007838 <HAL_RCC_ClockConfig+0x360>)
9000780e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007810:	4a0a      	ldr	r2, [pc, #40]	@ (9000783c <HAL_RCC_ClockConfig+0x364>)
90007812:	693b      	ldr	r3, [r7, #16]
90007814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007816:	4b0a      	ldr	r3, [pc, #40]	@ (90007840 <HAL_RCC_ClockConfig+0x368>)
90007818:	681b      	ldr	r3, [r3, #0]
9000781a:	4618      	mov	r0, r3
9000781c:	f7fb fd10 	bl	90003240 <HAL_InitTick>
90007820:	4603      	mov	r3, r0
90007822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007824:	7bfb      	ldrb	r3, [r7, #15]
}
90007826:	4618      	mov	r0, r3
90007828:	3718      	adds	r7, #24
9000782a:	46bd      	mov	sp, r7
9000782c:	bd80      	pop	{r7, pc}
9000782e:	bf00      	nop
90007830:	58024400 	.word	0x58024400
90007834:	9000d7e0 	.word	0x9000d7e0
90007838:	20000004 	.word	0x20000004
9000783c:	20000000 	.word	0x20000000
90007840:	20000008 	.word	0x20000008

90007844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007844:	b480      	push	{r7}
90007846:	b089      	sub	sp, #36	@ 0x24
90007848:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
9000784a:	4bb3      	ldr	r3, [pc, #716]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000784c:	691b      	ldr	r3, [r3, #16]
9000784e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007852:	2b18      	cmp	r3, #24
90007854:	f200 8155 	bhi.w	90007b02 <HAL_RCC_GetSysClockFreq+0x2be>
90007858:	a201      	add	r2, pc, #4	@ (adr r2, 90007860 <HAL_RCC_GetSysClockFreq+0x1c>)
9000785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000785e:	bf00      	nop
90007860:	900078c5 	.word	0x900078c5
90007864:	90007b03 	.word	0x90007b03
90007868:	90007b03 	.word	0x90007b03
9000786c:	90007b03 	.word	0x90007b03
90007870:	90007b03 	.word	0x90007b03
90007874:	90007b03 	.word	0x90007b03
90007878:	90007b03 	.word	0x90007b03
9000787c:	90007b03 	.word	0x90007b03
90007880:	900078eb 	.word	0x900078eb
90007884:	90007b03 	.word	0x90007b03
90007888:	90007b03 	.word	0x90007b03
9000788c:	90007b03 	.word	0x90007b03
90007890:	90007b03 	.word	0x90007b03
90007894:	90007b03 	.word	0x90007b03
90007898:	90007b03 	.word	0x90007b03
9000789c:	90007b03 	.word	0x90007b03
900078a0:	900078f1 	.word	0x900078f1
900078a4:	90007b03 	.word	0x90007b03
900078a8:	90007b03 	.word	0x90007b03
900078ac:	90007b03 	.word	0x90007b03
900078b0:	90007b03 	.word	0x90007b03
900078b4:	90007b03 	.word	0x90007b03
900078b8:	90007b03 	.word	0x90007b03
900078bc:	90007b03 	.word	0x90007b03
900078c0:	900078f7 	.word	0x900078f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900078c4:	4b94      	ldr	r3, [pc, #592]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078c6:	681b      	ldr	r3, [r3, #0]
900078c8:	f003 0320 	and.w	r3, r3, #32
900078cc:	2b00      	cmp	r3, #0
900078ce:	d009      	beq.n	900078e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900078d0:	4b91      	ldr	r3, [pc, #580]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078d2:	681b      	ldr	r3, [r3, #0]
900078d4:	08db      	lsrs	r3, r3, #3
900078d6:	f003 0303 	and.w	r3, r3, #3
900078da:	4a90      	ldr	r2, [pc, #576]	@ (90007b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
900078dc:	fa22 f303 	lsr.w	r3, r2, r3
900078e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
900078e2:	e111      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900078e4:	4b8d      	ldr	r3, [pc, #564]	@ (90007b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
900078e6:	61bb      	str	r3, [r7, #24]
      break;
900078e8:	e10e      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900078ea:	4b8d      	ldr	r3, [pc, #564]	@ (90007b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
900078ec:	61bb      	str	r3, [r7, #24]
      break;
900078ee:	e10b      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
900078f0:	4b8c      	ldr	r3, [pc, #560]	@ (90007b24 <HAL_RCC_GetSysClockFreq+0x2e0>)
900078f2:	61bb      	str	r3, [r7, #24]
      break;
900078f4:	e108      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900078f6:	4b88      	ldr	r3, [pc, #544]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900078fa:	f003 0303 	and.w	r3, r3, #3
900078fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90007900:	4b85      	ldr	r3, [pc, #532]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007904:	091b      	lsrs	r3, r3, #4
90007906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000790a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000790c:	4b82      	ldr	r3, [pc, #520]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007910:	f003 0301 	and.w	r3, r3, #1
90007914:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007916:	4b80      	ldr	r3, [pc, #512]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000791a:	08db      	lsrs	r3, r3, #3
9000791c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007920:	68fa      	ldr	r2, [r7, #12]
90007922:	fb02 f303 	mul.w	r3, r2, r3
90007926:	ee07 3a90 	vmov	s15, r3
9000792a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000792e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90007932:	693b      	ldr	r3, [r7, #16]
90007934:	2b00      	cmp	r3, #0
90007936:	f000 80e1 	beq.w	90007afc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
9000793a:	697b      	ldr	r3, [r7, #20]
9000793c:	2b02      	cmp	r3, #2
9000793e:	f000 8083 	beq.w	90007a48 <HAL_RCC_GetSysClockFreq+0x204>
90007942:	697b      	ldr	r3, [r7, #20]
90007944:	2b02      	cmp	r3, #2
90007946:	f200 80a1 	bhi.w	90007a8c <HAL_RCC_GetSysClockFreq+0x248>
9000794a:	697b      	ldr	r3, [r7, #20]
9000794c:	2b00      	cmp	r3, #0
9000794e:	d003      	beq.n	90007958 <HAL_RCC_GetSysClockFreq+0x114>
90007950:	697b      	ldr	r3, [r7, #20]
90007952:	2b01      	cmp	r3, #1
90007954:	d056      	beq.n	90007a04 <HAL_RCC_GetSysClockFreq+0x1c0>
90007956:	e099      	b.n	90007a8c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007958:	4b6f      	ldr	r3, [pc, #444]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000795a:	681b      	ldr	r3, [r3, #0]
9000795c:	f003 0320 	and.w	r3, r3, #32
90007960:	2b00      	cmp	r3, #0
90007962:	d02d      	beq.n	900079c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007964:	4b6c      	ldr	r3, [pc, #432]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007966:	681b      	ldr	r3, [r3, #0]
90007968:	08db      	lsrs	r3, r3, #3
9000796a:	f003 0303 	and.w	r3, r3, #3
9000796e:	4a6b      	ldr	r2, [pc, #428]	@ (90007b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
90007970:	fa22 f303 	lsr.w	r3, r2, r3
90007974:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007976:	687b      	ldr	r3, [r7, #4]
90007978:	ee07 3a90 	vmov	s15, r3
9000797c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007980:	693b      	ldr	r3, [r7, #16]
90007982:	ee07 3a90 	vmov	s15, r3
90007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000798a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000798e:	4b62      	ldr	r3, [pc, #392]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007992:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007996:	ee07 3a90 	vmov	s15, r3
9000799a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000799e:	ed97 6a02 	vldr	s12, [r7, #8]
900079a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
900079a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079b6:	ee67 7a27 	vmul.f32	s15, s14, s15
900079ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
900079be:	e087      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079c0:	693b      	ldr	r3, [r7, #16]
900079c2:	ee07 3a90 	vmov	s15, r3
900079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007b2c <HAL_RCC_GetSysClockFreq+0x2e8>
900079ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079d2:	4b51      	ldr	r3, [pc, #324]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079da:	ee07 3a90 	vmov	s15, r3
900079de:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079e2:	ed97 6a02 	vldr	s12, [r7, #8]
900079e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
900079ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079fa:	ee67 7a27 	vmul.f32	s15, s14, s15
900079fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a02:	e065      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a04:	693b      	ldr	r3, [r7, #16]
90007a06:	ee07 3a90 	vmov	s15, r3
90007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007b30 <HAL_RCC_GetSysClockFreq+0x2ec>
90007a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a16:	4b40      	ldr	r3, [pc, #256]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a1e:	ee07 3a90 	vmov	s15, r3
90007a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a26:	ed97 6a02 	vldr	s12, [r7, #8]
90007a2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a46:	e043      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a48:	693b      	ldr	r3, [r7, #16]
90007a4a:	ee07 3a90 	vmov	s15, r3
90007a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007b34 <HAL_RCC_GetSysClockFreq+0x2f0>
90007a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a5a:	4b2f      	ldr	r3, [pc, #188]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a62:	ee07 3a90 	vmov	s15, r3
90007a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a6a:	ed97 6a02 	vldr	s12, [r7, #8]
90007a6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a82:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a8a:	e021      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a8c:	693b      	ldr	r3, [r7, #16]
90007a8e:	ee07 3a90 	vmov	s15, r3
90007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007b30 <HAL_RCC_GetSysClockFreq+0x2ec>
90007a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a9e:	4b1e      	ldr	r3, [pc, #120]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007aa6:	ee07 3a90 	vmov	s15, r3
90007aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007aae:	ed97 6a02 	vldr	s12, [r7, #8]
90007ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
90007ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
90007aca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007ace:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007ad0:	4b11      	ldr	r3, [pc, #68]	@ (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007ad4:	0a5b      	lsrs	r3, r3, #9
90007ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007ada:	3301      	adds	r3, #1
90007adc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007ade:	683b      	ldr	r3, [r7, #0]
90007ae0:	ee07 3a90 	vmov	s15, r3
90007ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007ae8:	edd7 6a07 	vldr	s13, [r7, #28]
90007aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007af4:	ee17 3a90 	vmov	r3, s15
90007af8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007afa:	e005      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007afc:	2300      	movs	r3, #0
90007afe:	61bb      	str	r3, [r7, #24]
      break;
90007b00:	e002      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007b02:	4b07      	ldr	r3, [pc, #28]	@ (90007b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007b04:	61bb      	str	r3, [r7, #24]
      break;
90007b06:	bf00      	nop
  }

  return sysclockfreq;
90007b08:	69bb      	ldr	r3, [r7, #24]
}
90007b0a:	4618      	mov	r0, r3
90007b0c:	3724      	adds	r7, #36	@ 0x24
90007b0e:	46bd      	mov	sp, r7
90007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
90007b14:	4770      	bx	lr
90007b16:	bf00      	nop
90007b18:	58024400 	.word	0x58024400
90007b1c:	03d09000 	.word	0x03d09000
90007b20:	003d0900 	.word	0x003d0900
90007b24:	017d7840 	.word	0x017d7840
90007b28:	46000000 	.word	0x46000000
90007b2c:	4c742400 	.word	0x4c742400
90007b30:	4a742400 	.word	0x4a742400
90007b34:	4bbebc20 	.word	0x4bbebc20

90007b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007b38:	b580      	push	{r7, lr}
90007b3a:	b082      	sub	sp, #8
90007b3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007b3e:	f7ff fe81 	bl	90007844 <HAL_RCC_GetSysClockFreq>
90007b42:	4602      	mov	r2, r0
90007b44:	4b10      	ldr	r3, [pc, #64]	@ (90007b88 <HAL_RCC_GetHCLKFreq+0x50>)
90007b46:	699b      	ldr	r3, [r3, #24]
90007b48:	0a1b      	lsrs	r3, r3, #8
90007b4a:	f003 030f 	and.w	r3, r3, #15
90007b4e:	490f      	ldr	r1, [pc, #60]	@ (90007b8c <HAL_RCC_GetHCLKFreq+0x54>)
90007b50:	5ccb      	ldrb	r3, [r1, r3]
90007b52:	f003 031f 	and.w	r3, r3, #31
90007b56:	fa22 f303 	lsr.w	r3, r2, r3
90007b5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007b5c:	4b0a      	ldr	r3, [pc, #40]	@ (90007b88 <HAL_RCC_GetHCLKFreq+0x50>)
90007b5e:	699b      	ldr	r3, [r3, #24]
90007b60:	f003 030f 	and.w	r3, r3, #15
90007b64:	4a09      	ldr	r2, [pc, #36]	@ (90007b8c <HAL_RCC_GetHCLKFreq+0x54>)
90007b66:	5cd3      	ldrb	r3, [r2, r3]
90007b68:	f003 031f 	and.w	r3, r3, #31
90007b6c:	687a      	ldr	r2, [r7, #4]
90007b6e:	fa22 f303 	lsr.w	r3, r2, r3
90007b72:	4a07      	ldr	r2, [pc, #28]	@ (90007b90 <HAL_RCC_GetHCLKFreq+0x58>)
90007b74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007b76:	4a07      	ldr	r2, [pc, #28]	@ (90007b94 <HAL_RCC_GetHCLKFreq+0x5c>)
90007b78:	687b      	ldr	r3, [r7, #4]
90007b7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007b7c:	4b04      	ldr	r3, [pc, #16]	@ (90007b90 <HAL_RCC_GetHCLKFreq+0x58>)
90007b7e:	681b      	ldr	r3, [r3, #0]
}
90007b80:	4618      	mov	r0, r3
90007b82:	3708      	adds	r7, #8
90007b84:	46bd      	mov	sp, r7
90007b86:	bd80      	pop	{r7, pc}
90007b88:	58024400 	.word	0x58024400
90007b8c:	9000d7e0 	.word	0x9000d7e0
90007b90:	20000004 	.word	0x20000004
90007b94:	20000000 	.word	0x20000000

90007b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007b98:	b580      	push	{r7, lr}
90007b9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007b9c:	f7ff ffcc 	bl	90007b38 <HAL_RCC_GetHCLKFreq>
90007ba0:	4602      	mov	r2, r0
90007ba2:	4b06      	ldr	r3, [pc, #24]	@ (90007bbc <HAL_RCC_GetPCLK1Freq+0x24>)
90007ba4:	69db      	ldr	r3, [r3, #28]
90007ba6:	091b      	lsrs	r3, r3, #4
90007ba8:	f003 0307 	and.w	r3, r3, #7
90007bac:	4904      	ldr	r1, [pc, #16]	@ (90007bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
90007bae:	5ccb      	ldrb	r3, [r1, r3]
90007bb0:	f003 031f 	and.w	r3, r3, #31
90007bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007bb8:	4618      	mov	r0, r3
90007bba:	bd80      	pop	{r7, pc}
90007bbc:	58024400 	.word	0x58024400
90007bc0:	9000d7e0 	.word	0x9000d7e0

90007bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007bc4:	b580      	push	{r7, lr}
90007bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007bc8:	f7ff ffb6 	bl	90007b38 <HAL_RCC_GetHCLKFreq>
90007bcc:	4602      	mov	r2, r0
90007bce:	4b06      	ldr	r3, [pc, #24]	@ (90007be8 <HAL_RCC_GetPCLK2Freq+0x24>)
90007bd0:	69db      	ldr	r3, [r3, #28]
90007bd2:	0a1b      	lsrs	r3, r3, #8
90007bd4:	f003 0307 	and.w	r3, r3, #7
90007bd8:	4904      	ldr	r1, [pc, #16]	@ (90007bec <HAL_RCC_GetPCLK2Freq+0x28>)
90007bda:	5ccb      	ldrb	r3, [r1, r3]
90007bdc:	f003 031f 	and.w	r3, r3, #31
90007be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007be4:	4618      	mov	r0, r3
90007be6:	bd80      	pop	{r7, pc}
90007be8:	58024400 	.word	0x58024400
90007bec:	9000d7e0 	.word	0x9000d7e0

90007bf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007bf4:	b0ca      	sub	sp, #296	@ 0x128
90007bf6:	af00      	add	r7, sp, #0
90007bf8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007bfc:	2300      	movs	r3, #0
90007bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007c02:	2300      	movs	r3, #0
90007c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007c14:	2500      	movs	r5, #0
90007c16:	ea54 0305 	orrs.w	r3, r4, r5
90007c1a:	d049      	beq.n	90007cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007c26:	d02f      	beq.n	90007c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007c28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007c2c:	d828      	bhi.n	90007c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007c2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007c32:	d01a      	beq.n	90007c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007c38:	d822      	bhi.n	90007c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007c3a:	2b00      	cmp	r3, #0
90007c3c:	d003      	beq.n	90007c46 <HAL_RCCEx_PeriphCLKConfig+0x56>
90007c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007c42:	d007      	beq.n	90007c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007c44:	e01c      	b.n	90007c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c46:	4bb8      	ldr	r3, [pc, #736]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c4a:	4ab7      	ldr	r2, [pc, #732]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c52:	e01a      	b.n	90007c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c58:	3308      	adds	r3, #8
90007c5a:	2102      	movs	r1, #2
90007c5c:	4618      	mov	r0, r3
90007c5e:	f001 fc8f 	bl	90009580 <RCCEx_PLL2_Config>
90007c62:	4603      	mov	r3, r0
90007c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c68:	e00f      	b.n	90007c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c6e:	3328      	adds	r3, #40	@ 0x28
90007c70:	2102      	movs	r1, #2
90007c72:	4618      	mov	r0, r3
90007c74:	f001 fd36 	bl	900096e4 <RCCEx_PLL3_Config>
90007c78:	4603      	mov	r3, r0
90007c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c7e:	e004      	b.n	90007c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007c80:	2301      	movs	r3, #1
90007c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c86:	e000      	b.n	90007c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007c88:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c8e:	2b00      	cmp	r3, #0
90007c90:	d10a      	bne.n	90007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007c92:	4ba5      	ldr	r3, [pc, #660]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007c96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007ca0:	4aa1      	ldr	r2, [pc, #644]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ca2:	430b      	orrs	r3, r1
90007ca4:	6513      	str	r3, [r2, #80]	@ 0x50
90007ca6:	e003      	b.n	90007cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
90007cb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007cbc:	f04f 0900 	mov.w	r9, #0
90007cc0:	ea58 0309 	orrs.w	r3, r8, r9
90007cc4:	d047      	beq.n	90007d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007ccc:	2b04      	cmp	r3, #4
90007cce:	d82a      	bhi.n	90007d26 <HAL_RCCEx_PeriphCLKConfig+0x136>
90007cd0:	a201      	add	r2, pc, #4	@ (adr r2, 90007cd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007cd6:	bf00      	nop
90007cd8:	90007ced 	.word	0x90007ced
90007cdc:	90007cfb 	.word	0x90007cfb
90007ce0:	90007d11 	.word	0x90007d11
90007ce4:	90007d2f 	.word	0x90007d2f
90007ce8:	90007d2f 	.word	0x90007d2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007cec:	4b8e      	ldr	r3, [pc, #568]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007cf0:	4a8d      	ldr	r2, [pc, #564]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007cf8:	e01a      	b.n	90007d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cfe:	3308      	adds	r3, #8
90007d00:	2100      	movs	r1, #0
90007d02:	4618      	mov	r0, r3
90007d04:	f001 fc3c 	bl	90009580 <RCCEx_PLL2_Config>
90007d08:	4603      	mov	r3, r0
90007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d0e:	e00f      	b.n	90007d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d14:	3328      	adds	r3, #40	@ 0x28
90007d16:	2100      	movs	r1, #0
90007d18:	4618      	mov	r0, r3
90007d1a:	f001 fce3 	bl	900096e4 <RCCEx_PLL3_Config>
90007d1e:	4603      	mov	r3, r0
90007d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d24:	e004      	b.n	90007d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007d26:	2301      	movs	r3, #1
90007d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007d2c:	e000      	b.n	90007d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d34:	2b00      	cmp	r3, #0
90007d36:	d10a      	bne.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007d38:	4b7b      	ldr	r3, [pc, #492]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007d3c:	f023 0107 	bic.w	r1, r3, #7
90007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007d46:	4a78      	ldr	r2, [pc, #480]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d48:	430b      	orrs	r3, r1
90007d4a:	6513      	str	r3, [r2, #80]	@ 0x50
90007d4c:	e003      	b.n	90007d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007d62:	f04f 0b00 	mov.w	fp, #0
90007d66:	ea5a 030b 	orrs.w	r3, sl, fp
90007d6a:	d04c      	beq.n	90007e06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007d76:	d030      	beq.n	90007dda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007d7c:	d829      	bhi.n	90007dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d7e:	2bc0      	cmp	r3, #192	@ 0xc0
90007d80:	d02d      	beq.n	90007dde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007d82:	2bc0      	cmp	r3, #192	@ 0xc0
90007d84:	d825      	bhi.n	90007dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d86:	2b80      	cmp	r3, #128	@ 0x80
90007d88:	d018      	beq.n	90007dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007d8a:	2b80      	cmp	r3, #128	@ 0x80
90007d8c:	d821      	bhi.n	90007dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d8e:	2b00      	cmp	r3, #0
90007d90:	d002      	beq.n	90007d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007d92:	2b40      	cmp	r3, #64	@ 0x40
90007d94:	d007      	beq.n	90007da6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007d96:	e01c      	b.n	90007dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d98:	4b63      	ldr	r3, [pc, #396]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007d9c:	4a62      	ldr	r2, [pc, #392]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007da4:	e01c      	b.n	90007de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007daa:	3308      	adds	r3, #8
90007dac:	2100      	movs	r1, #0
90007dae:	4618      	mov	r0, r3
90007db0:	f001 fbe6 	bl	90009580 <RCCEx_PLL2_Config>
90007db4:	4603      	mov	r3, r0
90007db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007dba:	e011      	b.n	90007de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dc0:	3328      	adds	r3, #40	@ 0x28
90007dc2:	2100      	movs	r1, #0
90007dc4:	4618      	mov	r0, r3
90007dc6:	f001 fc8d 	bl	900096e4 <RCCEx_PLL3_Config>
90007dca:	4603      	mov	r3, r0
90007dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007dd0:	e006      	b.n	90007de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007dd2:	2301      	movs	r3, #1
90007dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007dd8:	e002      	b.n	90007de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007dda:	bf00      	nop
90007ddc:	e000      	b.n	90007de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007dde:	bf00      	nop
    }

    if (ret == HAL_OK)
90007de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007de4:	2b00      	cmp	r3, #0
90007de6:	d10a      	bne.n	90007dfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007de8:	4b4f      	ldr	r3, [pc, #316]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007dec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007df6:	4a4c      	ldr	r2, [pc, #304]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007df8:	430b      	orrs	r3, r1
90007dfa:	6513      	str	r3, [r2, #80]	@ 0x50
90007dfc:	e003      	b.n	90007e06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007e12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007e16:	2300      	movs	r3, #0
90007e18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007e1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007e20:	460b      	mov	r3, r1
90007e22:	4313      	orrs	r3, r2
90007e24:	d053      	beq.n	90007ece <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007e2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007e32:	d035      	beq.n	90007ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007e38:	d82e      	bhi.n	90007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007e3e:	d031      	beq.n	90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007e40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007e44:	d828      	bhi.n	90007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007e4a:	d01a      	beq.n	90007e82 <HAL_RCCEx_PeriphCLKConfig+0x292>
90007e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007e50:	d822      	bhi.n	90007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e52:	2b00      	cmp	r3, #0
90007e54:	d003      	beq.n	90007e5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007e5a:	d007      	beq.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007e5c:	e01c      	b.n	90007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e5e:	4b32      	ldr	r3, [pc, #200]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e62:	4a31      	ldr	r2, [pc, #196]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e6a:	e01c      	b.n	90007ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e70:	3308      	adds	r3, #8
90007e72:	2100      	movs	r1, #0
90007e74:	4618      	mov	r0, r3
90007e76:	f001 fb83 	bl	90009580 <RCCEx_PLL2_Config>
90007e7a:	4603      	mov	r3, r0
90007e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007e80:	e011      	b.n	90007ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e86:	3328      	adds	r3, #40	@ 0x28
90007e88:	2100      	movs	r1, #0
90007e8a:	4618      	mov	r0, r3
90007e8c:	f001 fc2a 	bl	900096e4 <RCCEx_PLL3_Config>
90007e90:	4603      	mov	r3, r0
90007e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e96:	e006      	b.n	90007ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007e98:	2301      	movs	r3, #1
90007e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007e9e:	e002      	b.n	90007ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007ea0:	bf00      	nop
90007ea2:	e000      	b.n	90007ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
90007ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007eaa:	2b00      	cmp	r3, #0
90007eac:	d10b      	bne.n	90007ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007eae:	4b1e      	ldr	r3, [pc, #120]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007eb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007ebe:	4a1a      	ldr	r2, [pc, #104]	@ (90007f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ec0:	430b      	orrs	r3, r1
90007ec2:	6593      	str	r3, [r2, #88]	@ 0x58
90007ec4:	e003      	b.n	90007ece <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ed6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007eda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007ede:	2300      	movs	r3, #0
90007ee0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007ee4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007ee8:	460b      	mov	r3, r1
90007eea:	4313      	orrs	r3, r2
90007eec:	d056      	beq.n	90007f9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007efa:	d038      	beq.n	90007f6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007f00:	d831      	bhi.n	90007f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007f06:	d034      	beq.n	90007f72 <HAL_RCCEx_PeriphCLKConfig+0x382>
90007f08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007f0c:	d82b      	bhi.n	90007f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007f12:	d01d      	beq.n	90007f50 <HAL_RCCEx_PeriphCLKConfig+0x360>
90007f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007f18:	d825      	bhi.n	90007f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f1a:	2b00      	cmp	r3, #0
90007f1c:	d006      	beq.n	90007f2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007f22:	d00a      	beq.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007f24:	e01f      	b.n	90007f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f26:	bf00      	nop
90007f28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f2c:	4ba2      	ldr	r3, [pc, #648]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f30:	4aa1      	ldr	r2, [pc, #644]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f38:	e01c      	b.n	90007f74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f3e:	3308      	adds	r3, #8
90007f40:	2100      	movs	r1, #0
90007f42:	4618      	mov	r0, r3
90007f44:	f001 fb1c 	bl	90009580 <RCCEx_PLL2_Config>
90007f48:	4603      	mov	r3, r0
90007f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007f4e:	e011      	b.n	90007f74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f54:	3328      	adds	r3, #40	@ 0x28
90007f56:	2100      	movs	r1, #0
90007f58:	4618      	mov	r0, r3
90007f5a:	f001 fbc3 	bl	900096e4 <RCCEx_PLL3_Config>
90007f5e:	4603      	mov	r3, r0
90007f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f64:	e006      	b.n	90007f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007f66:	2301      	movs	r3, #1
90007f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f6c:	e002      	b.n	90007f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f6e:	bf00      	nop
90007f70:	e000      	b.n	90007f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f72:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f78:	2b00      	cmp	r3, #0
90007f7a:	d10b      	bne.n	90007f94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007f7c:	4b8e      	ldr	r3, [pc, #568]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007f80:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007f8c:	4a8a      	ldr	r2, [pc, #552]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f8e:	430b      	orrs	r3, r1
90007f90:	6593      	str	r3, [r2, #88]	@ 0x58
90007f92:	e003      	b.n	90007f9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007fa4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007fac:	2300      	movs	r3, #0
90007fae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007fb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007fb6:	460b      	mov	r3, r1
90007fb8:	4313      	orrs	r3, r2
90007fba:	d03a      	beq.n	90008032 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007fc2:	2b30      	cmp	r3, #48	@ 0x30
90007fc4:	d01f      	beq.n	90008006 <HAL_RCCEx_PeriphCLKConfig+0x416>
90007fc6:	2b30      	cmp	r3, #48	@ 0x30
90007fc8:	d819      	bhi.n	90007ffe <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007fca:	2b20      	cmp	r3, #32
90007fcc:	d00c      	beq.n	90007fe8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007fce:	2b20      	cmp	r3, #32
90007fd0:	d815      	bhi.n	90007ffe <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007fd2:	2b00      	cmp	r3, #0
90007fd4:	d019      	beq.n	9000800a <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007fd6:	2b10      	cmp	r3, #16
90007fd8:	d111      	bne.n	90007ffe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007fda:	4b77      	ldr	r3, [pc, #476]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007fde:	4a76      	ldr	r2, [pc, #472]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007fe6:	e011      	b.n	9000800c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fec:	3308      	adds	r3, #8
90007fee:	2102      	movs	r1, #2
90007ff0:	4618      	mov	r0, r3
90007ff2:	f001 fac5 	bl	90009580 <RCCEx_PLL2_Config>
90007ff6:	4603      	mov	r3, r0
90007ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007ffc:	e006      	b.n	9000800c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007ffe:	2301      	movs	r3, #1
90008000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008004:	e002      	b.n	9000800c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90008006:	bf00      	nop
90008008:	e000      	b.n	9000800c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000800a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000800c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008010:	2b00      	cmp	r3, #0
90008012:	d10a      	bne.n	9000802a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90008014:	4b68      	ldr	r3, [pc, #416]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008018:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
9000801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008022:	4a65      	ldr	r2, [pc, #404]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008024:	430b      	orrs	r3, r1
90008026:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008028:	e003      	b.n	90008032 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000802e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008036:	e9d3 2300 	ldrd	r2, r3, [r3]
9000803a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
9000803e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90008042:	2300      	movs	r3, #0
90008044:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90008048:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
9000804c:	460b      	mov	r3, r1
9000804e:	4313      	orrs	r3, r2
90008050:	d051      	beq.n	900080f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000805c:	d035      	beq.n	900080ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
9000805e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008062:	d82e      	bhi.n	900080c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008064:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90008068:	d031      	beq.n	900080ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
9000806a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
9000806e:	d828      	bhi.n	900080c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008074:	d01a      	beq.n	900080ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90008076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000807a:	d822      	bhi.n	900080c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
9000807c:	2b00      	cmp	r3, #0
9000807e:	d003      	beq.n	90008088 <HAL_RCCEx_PeriphCLKConfig+0x498>
90008080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008084:	d007      	beq.n	90008096 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90008086:	e01c      	b.n	900080c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008088:	4b4b      	ldr	r3, [pc, #300]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000808a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000808c:	4a4a      	ldr	r2, [pc, #296]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000808e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008094:	e01c      	b.n	900080d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000809a:	3308      	adds	r3, #8
9000809c:	2100      	movs	r1, #0
9000809e:	4618      	mov	r0, r3
900080a0:	f001 fa6e 	bl	90009580 <RCCEx_PLL2_Config>
900080a4:	4603      	mov	r3, r0
900080a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900080aa:	e011      	b.n	900080d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080b0:	3328      	adds	r3, #40	@ 0x28
900080b2:	2100      	movs	r1, #0
900080b4:	4618      	mov	r0, r3
900080b6:	f001 fb15 	bl	900096e4 <RCCEx_PLL3_Config>
900080ba:	4603      	mov	r3, r0
900080bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900080c0:	e006      	b.n	900080d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900080c2:	2301      	movs	r3, #1
900080c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900080c8:	e002      	b.n	900080d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900080ca:	bf00      	nop
900080cc:	e000      	b.n	900080d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900080ce:	bf00      	nop
    }

    if (ret == HAL_OK)
900080d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080d4:	2b00      	cmp	r3, #0
900080d6:	d10a      	bne.n	900080ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
900080d8:	4b37      	ldr	r3, [pc, #220]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900080dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
900080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
900080e6:	4a34      	ldr	r2, [pc, #208]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080e8:	430b      	orrs	r3, r1
900080ea:	6513      	str	r3, [r2, #80]	@ 0x50
900080ec:	e003      	b.n	900080f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
900080ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
900080fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
90008102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90008106:	2300      	movs	r3, #0
90008108:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
9000810c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90008110:	460b      	mov	r3, r1
90008112:	4313      	orrs	r3, r2
90008114:	d056      	beq.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000811a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000811c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008120:	d033      	beq.n	9000818a <HAL_RCCEx_PeriphCLKConfig+0x59a>
90008122:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008126:	d82c      	bhi.n	90008182 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000812c:	d02f      	beq.n	9000818e <HAL_RCCEx_PeriphCLKConfig+0x59e>
9000812e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008132:	d826      	bhi.n	90008182 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008134:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008138:	d02b      	beq.n	90008192 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
9000813a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
9000813e:	d820      	bhi.n	90008182 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008144:	d012      	beq.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x57c>
90008146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000814a:	d81a      	bhi.n	90008182 <HAL_RCCEx_PeriphCLKConfig+0x592>
9000814c:	2b00      	cmp	r3, #0
9000814e:	d022      	beq.n	90008196 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90008150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008154:	d115      	bne.n	90008182 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000815a:	3308      	adds	r3, #8
9000815c:	2101      	movs	r1, #1
9000815e:	4618      	mov	r0, r3
90008160:	f001 fa0e 	bl	90009580 <RCCEx_PLL2_Config>
90008164:	4603      	mov	r3, r0
90008166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000816a:	e015      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000816c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008170:	3328      	adds	r3, #40	@ 0x28
90008172:	2101      	movs	r1, #1
90008174:	4618      	mov	r0, r3
90008176:	f001 fab5 	bl	900096e4 <RCCEx_PLL3_Config>
9000817a:	4603      	mov	r3, r0
9000817c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008180:	e00a      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008182:	2301      	movs	r3, #1
90008184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008188:	e006      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000818a:	bf00      	nop
9000818c:	e004      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000818e:	bf00      	nop
90008190:	e002      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008192:	bf00      	nop
90008194:	e000      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008196:	bf00      	nop
    }

    if (ret == HAL_OK)
90008198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000819c:	2b00      	cmp	r3, #0
9000819e:	d10d      	bne.n	900081bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900081a0:	4b05      	ldr	r3, [pc, #20]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900081a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
900081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900081ae:	4a02      	ldr	r2, [pc, #8]	@ (900081b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081b0:	430b      	orrs	r3, r1
900081b2:	6513      	str	r3, [r2, #80]	@ 0x50
900081b4:	e006      	b.n	900081c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
900081b6:	bf00      	nop
900081b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900081bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
900081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
900081cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
900081d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
900081d4:	2300      	movs	r3, #0
900081d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
900081da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
900081de:	460b      	mov	r3, r1
900081e0:	4313      	orrs	r3, r2
900081e2:	d055      	beq.n	90008290 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900081ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900081f0:	d033      	beq.n	9000825a <HAL_RCCEx_PeriphCLKConfig+0x66a>
900081f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900081f6:	d82c      	bhi.n	90008252 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900081fc:	d02f      	beq.n	9000825e <HAL_RCCEx_PeriphCLKConfig+0x66e>
900081fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008202:	d826      	bhi.n	90008252 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008208:	d02b      	beq.n	90008262 <HAL_RCCEx_PeriphCLKConfig+0x672>
9000820a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000820e:	d820      	bhi.n	90008252 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008214:	d012      	beq.n	9000823c <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000821a:	d81a      	bhi.n	90008252 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000821c:	2b00      	cmp	r3, #0
9000821e:	d022      	beq.n	90008266 <HAL_RCCEx_PeriphCLKConfig+0x676>
90008220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008224:	d115      	bne.n	90008252 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000822a:	3308      	adds	r3, #8
9000822c:	2101      	movs	r1, #1
9000822e:	4618      	mov	r0, r3
90008230:	f001 f9a6 	bl	90009580 <RCCEx_PLL2_Config>
90008234:	4603      	mov	r3, r0
90008236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000823a:	e015      	b.n	90008268 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008240:	3328      	adds	r3, #40	@ 0x28
90008242:	2101      	movs	r1, #1
90008244:	4618      	mov	r0, r3
90008246:	f001 fa4d 	bl	900096e4 <RCCEx_PLL3_Config>
9000824a:	4603      	mov	r3, r0
9000824c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008250:	e00a      	b.n	90008268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90008252:	2301      	movs	r3, #1
90008254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008258:	e006      	b.n	90008268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000825a:	bf00      	nop
9000825c:	e004      	b.n	90008268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000825e:	bf00      	nop
90008260:	e002      	b.n	90008268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008262:	bf00      	nop
90008264:	e000      	b.n	90008268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008266:	bf00      	nop
    }

    if (ret == HAL_OK)
90008268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000826c:	2b00      	cmp	r3, #0
9000826e:	d10b      	bne.n	90008288 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008270:	4ba3      	ldr	r3, [pc, #652]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008274:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000827c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008280:	4a9f      	ldr	r2, [pc, #636]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008282:	430b      	orrs	r3, r1
90008284:	6593      	str	r3, [r2, #88]	@ 0x58
90008286:	e003      	b.n	90008290 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000828c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008294:	e9d3 2300 	ldrd	r2, r3, [r3]
90008298:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
9000829c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
900082a0:	2300      	movs	r3, #0
900082a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
900082a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
900082aa:	460b      	mov	r3, r1
900082ac:	4313      	orrs	r3, r2
900082ae:	d037      	beq.n	90008320 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
900082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900082b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900082ba:	d00e      	beq.n	900082da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900082bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900082c0:	d816      	bhi.n	900082f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
900082c2:	2b00      	cmp	r3, #0
900082c4:	d018      	beq.n	900082f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
900082c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900082ca:	d111      	bne.n	900082f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900082cc:	4b8c      	ldr	r3, [pc, #560]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900082d0:	4a8b      	ldr	r2, [pc, #556]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900082d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900082d8:	e00f      	b.n	900082fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900082da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082de:	3308      	adds	r3, #8
900082e0:	2101      	movs	r1, #1
900082e2:	4618      	mov	r0, r3
900082e4:	f001 f94c 	bl	90009580 <RCCEx_PLL2_Config>
900082e8:	4603      	mov	r3, r0
900082ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900082ee:	e004      	b.n	900082fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900082f0:	2301      	movs	r3, #1
900082f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900082f6:	e000      	b.n	900082fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900082f8:	bf00      	nop
    }

    if (ret == HAL_OK)
900082fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082fe:	2b00      	cmp	r3, #0
90008300:	d10a      	bne.n	90008318 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90008302:	4b7f      	ldr	r3, [pc, #508]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008306:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
9000830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000830e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008310:	4a7b      	ldr	r2, [pc, #492]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008312:	430b      	orrs	r3, r1
90008314:	6513      	str	r3, [r2, #80]	@ 0x50
90008316:	e003      	b.n	90008320 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000831c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90008320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008324:	e9d3 2300 	ldrd	r2, r3, [r3]
90008328:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
9000832c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90008330:	2300      	movs	r3, #0
90008332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90008336:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
9000833a:	460b      	mov	r3, r1
9000833c:	4313      	orrs	r3, r2
9000833e:	d039      	beq.n	900083b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008346:	2b03      	cmp	r3, #3
90008348:	d81c      	bhi.n	90008384 <HAL_RCCEx_PeriphCLKConfig+0x794>
9000834a:	a201      	add	r2, pc, #4	@ (adr r2, 90008350 <HAL_RCCEx_PeriphCLKConfig+0x760>)
9000834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008350:	9000838d 	.word	0x9000838d
90008354:	90008361 	.word	0x90008361
90008358:	9000836f 	.word	0x9000836f
9000835c:	9000838d 	.word	0x9000838d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008360:	4b67      	ldr	r3, [pc, #412]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008364:	4a66      	ldr	r2, [pc, #408]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000836a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
9000836c:	e00f      	b.n	9000838e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008372:	3308      	adds	r3, #8
90008374:	2102      	movs	r1, #2
90008376:	4618      	mov	r0, r3
90008378:	f001 f902 	bl	90009580 <RCCEx_PLL2_Config>
9000837c:	4603      	mov	r3, r0
9000837e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90008382:	e004      	b.n	9000838e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008384:	2301      	movs	r3, #1
90008386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000838a:	e000      	b.n	9000838e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
9000838c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000838e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008392:	2b00      	cmp	r3, #0
90008394:	d10a      	bne.n	900083ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90008396:	4b5a      	ldr	r3, [pc, #360]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000839a:	f023 0103 	bic.w	r1, r3, #3
9000839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900083a4:	4a56      	ldr	r2, [pc, #344]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083a6:	430b      	orrs	r3, r1
900083a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
900083aa:	e003      	b.n	900083b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
900083ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900083b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
900083bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900083c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
900083c4:	2300      	movs	r3, #0
900083c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
900083ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
900083ce:	460b      	mov	r3, r1
900083d0:	4313      	orrs	r3, r2
900083d2:	f000 809f 	beq.w	90008514 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900083d6:	4b4b      	ldr	r3, [pc, #300]	@ (90008504 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083d8:	681b      	ldr	r3, [r3, #0]
900083da:	4a4a      	ldr	r2, [pc, #296]	@ (90008504 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900083e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900083e2:	f7fa ff77 	bl	900032d4 <HAL_GetTick>
900083e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900083ea:	e00b      	b.n	90008404 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900083ec:	f7fa ff72 	bl	900032d4 <HAL_GetTick>
900083f0:	4602      	mov	r2, r0
900083f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900083f6:	1ad3      	subs	r3, r2, r3
900083f8:	2b64      	cmp	r3, #100	@ 0x64
900083fa:	d903      	bls.n	90008404 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
900083fc:	2303      	movs	r3, #3
900083fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008402:	e005      	b.n	90008410 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008404:	4b3f      	ldr	r3, [pc, #252]	@ (90008504 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008406:	681b      	ldr	r3, [r3, #0]
90008408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000840c:	2b00      	cmp	r3, #0
9000840e:	d0ed      	beq.n	900083ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90008410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008414:	2b00      	cmp	r3, #0
90008416:	d179      	bne.n	9000850c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008418:	4b39      	ldr	r3, [pc, #228]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000841a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
9000841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008424:	4053      	eors	r3, r2
90008426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000842a:	2b00      	cmp	r3, #0
9000842c:	d015      	beq.n	9000845a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000842e:	4b34      	ldr	r3, [pc, #208]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008436:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
9000843a:	4b31      	ldr	r3, [pc, #196]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000843c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000843e:	4a30      	ldr	r2, [pc, #192]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90008444:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90008446:	4b2e      	ldr	r3, [pc, #184]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000844a:	4a2d      	ldr	r2, [pc, #180]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000844c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90008450:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90008452:	4a2b      	ldr	r2, [pc, #172]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008454:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008458:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000845e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008466:	d118      	bne.n	9000849a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008468:	f7fa ff34 	bl	900032d4 <HAL_GetTick>
9000846c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008470:	e00d      	b.n	9000848e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90008472:	f7fa ff2f 	bl	900032d4 <HAL_GetTick>
90008476:	4602      	mov	r2, r0
90008478:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
9000847c:	1ad2      	subs	r2, r2, r3
9000847e:	f241 3388 	movw	r3, #5000	@ 0x1388
90008482:	429a      	cmp	r2, r3
90008484:	d903      	bls.n	9000848e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90008486:	2303      	movs	r3, #3
90008488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
9000848c:	e005      	b.n	9000849a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000848e:	4b1c      	ldr	r3, [pc, #112]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008492:	f003 0302 	and.w	r3, r3, #2
90008496:	2b00      	cmp	r3, #0
90008498:	d0eb      	beq.n	90008472 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
9000849a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000849e:	2b00      	cmp	r3, #0
900084a0:	d129      	bne.n	900084f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900084aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
900084ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
900084b2:	d10e      	bne.n	900084d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
900084b4:	4b12      	ldr	r3, [pc, #72]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084b6:	691b      	ldr	r3, [r3, #16]
900084b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
900084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900084c4:	091a      	lsrs	r2, r3, #4
900084c6:	4b10      	ldr	r3, [pc, #64]	@ (90008508 <HAL_RCCEx_PeriphCLKConfig+0x918>)
900084c8:	4013      	ands	r3, r2
900084ca:	4a0d      	ldr	r2, [pc, #52]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084cc:	430b      	orrs	r3, r1
900084ce:	6113      	str	r3, [r2, #16]
900084d0:	e005      	b.n	900084de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
900084d2:	4b0b      	ldr	r3, [pc, #44]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084d4:	691b      	ldr	r3, [r3, #16]
900084d6:	4a0a      	ldr	r2, [pc, #40]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
900084dc:	6113      	str	r3, [r2, #16]
900084de:	4b08      	ldr	r3, [pc, #32]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
900084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900084ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
900084ee:	4a04      	ldr	r2, [pc, #16]	@ (90008500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084f0:	430b      	orrs	r3, r1
900084f2:	6713      	str	r3, [r2, #112]	@ 0x70
900084f4:	e00e      	b.n	90008514 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900084f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
900084fe:	e009      	b.n	90008514 <HAL_RCCEx_PeriphCLKConfig+0x924>
90008500:	58024400 	.word	0x58024400
90008504:	58024800 	.word	0x58024800
90008508:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
9000850c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008518:	e9d3 2300 	ldrd	r2, r3, [r3]
9000851c:	f002 0301 	and.w	r3, r2, #1
90008520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008524:	2300      	movs	r3, #0
90008526:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
9000852a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
9000852e:	460b      	mov	r3, r1
90008530:	4313      	orrs	r3, r2
90008532:	f000 8089 	beq.w	90008648 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000853a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
9000853c:	2b28      	cmp	r3, #40	@ 0x28
9000853e:	d86b      	bhi.n	90008618 <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008540:	a201      	add	r2, pc, #4	@ (adr r2, 90008548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
90008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008546:	bf00      	nop
90008548:	90008621 	.word	0x90008621
9000854c:	90008619 	.word	0x90008619
90008550:	90008619 	.word	0x90008619
90008554:	90008619 	.word	0x90008619
90008558:	90008619 	.word	0x90008619
9000855c:	90008619 	.word	0x90008619
90008560:	90008619 	.word	0x90008619
90008564:	90008619 	.word	0x90008619
90008568:	900085ed 	.word	0x900085ed
9000856c:	90008619 	.word	0x90008619
90008570:	90008619 	.word	0x90008619
90008574:	90008619 	.word	0x90008619
90008578:	90008619 	.word	0x90008619
9000857c:	90008619 	.word	0x90008619
90008580:	90008619 	.word	0x90008619
90008584:	90008619 	.word	0x90008619
90008588:	90008603 	.word	0x90008603
9000858c:	90008619 	.word	0x90008619
90008590:	90008619 	.word	0x90008619
90008594:	90008619 	.word	0x90008619
90008598:	90008619 	.word	0x90008619
9000859c:	90008619 	.word	0x90008619
900085a0:	90008619 	.word	0x90008619
900085a4:	90008619 	.word	0x90008619
900085a8:	90008621 	.word	0x90008621
900085ac:	90008619 	.word	0x90008619
900085b0:	90008619 	.word	0x90008619
900085b4:	90008619 	.word	0x90008619
900085b8:	90008619 	.word	0x90008619
900085bc:	90008619 	.word	0x90008619
900085c0:	90008619 	.word	0x90008619
900085c4:	90008619 	.word	0x90008619
900085c8:	90008621 	.word	0x90008621
900085cc:	90008619 	.word	0x90008619
900085d0:	90008619 	.word	0x90008619
900085d4:	90008619 	.word	0x90008619
900085d8:	90008619 	.word	0x90008619
900085dc:	90008619 	.word	0x90008619
900085e0:	90008619 	.word	0x90008619
900085e4:	90008619 	.word	0x90008619
900085e8:	90008621 	.word	0x90008621
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900085ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085f0:	3308      	adds	r3, #8
900085f2:	2101      	movs	r1, #1
900085f4:	4618      	mov	r0, r3
900085f6:	f000 ffc3 	bl	90009580 <RCCEx_PLL2_Config>
900085fa:	4603      	mov	r3, r0
900085fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008600:	e00f      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008606:	3328      	adds	r3, #40	@ 0x28
90008608:	2101      	movs	r1, #1
9000860a:	4618      	mov	r0, r3
9000860c:	f001 f86a 	bl	900096e4 <RCCEx_PLL3_Config>
90008610:	4603      	mov	r3, r0
90008612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008616:	e004      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008618:	2301      	movs	r3, #1
9000861a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000861e:	e000      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90008620:	bf00      	nop
    }

    if (ret == HAL_OK)
90008622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008626:	2b00      	cmp	r3, #0
90008628:	d10a      	bne.n	90008640 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000862a:	4bbf      	ldr	r3, [pc, #764]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000862c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000862e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
90008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008638:	4abb      	ldr	r2, [pc, #748]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000863a:	430b      	orrs	r3, r1
9000863c:	6553      	str	r3, [r2, #84]	@ 0x54
9000863e:	e003      	b.n	90008648 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000864c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008650:	f002 0302 	and.w	r3, r2, #2
90008654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008658:	2300      	movs	r3, #0
9000865a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000865e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
90008662:	460b      	mov	r3, r1
90008664:	4313      	orrs	r3, r2
90008666:	d041      	beq.n	900086ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90008668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000866c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
9000866e:	2b05      	cmp	r3, #5
90008670:	d824      	bhi.n	900086bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
90008672:	a201      	add	r2, pc, #4	@ (adr r2, 90008678 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008678:	900086c5 	.word	0x900086c5
9000867c:	90008691 	.word	0x90008691
90008680:	900086a7 	.word	0x900086a7
90008684:	900086c5 	.word	0x900086c5
90008688:	900086c5 	.word	0x900086c5
9000868c:	900086c5 	.word	0x900086c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008694:	3308      	adds	r3, #8
90008696:	2101      	movs	r1, #1
90008698:	4618      	mov	r0, r3
9000869a:	f000 ff71 	bl	90009580 <RCCEx_PLL2_Config>
9000869e:	4603      	mov	r3, r0
900086a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900086a4:	e00f      	b.n	900086c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900086a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086aa:	3328      	adds	r3, #40	@ 0x28
900086ac:	2101      	movs	r1, #1
900086ae:	4618      	mov	r0, r3
900086b0:	f001 f818 	bl	900096e4 <RCCEx_PLL3_Config>
900086b4:	4603      	mov	r3, r0
900086b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900086ba:	e004      	b.n	900086c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086bc:	2301      	movs	r3, #1
900086be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086c2:	e000      	b.n	900086c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
900086c4:	bf00      	nop
    }

    if (ret == HAL_OK)
900086c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086ca:	2b00      	cmp	r3, #0
900086cc:	d10a      	bne.n	900086e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900086ce:	4b96      	ldr	r3, [pc, #600]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900086d2:	f023 0107 	bic.w	r1, r3, #7
900086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900086dc:	4a92      	ldr	r2, [pc, #584]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086de:	430b      	orrs	r3, r1
900086e0:	6553      	str	r3, [r2, #84]	@ 0x54
900086e2:	e003      	b.n	900086ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900086ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
900086f4:	f002 0304 	and.w	r3, r2, #4
900086f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
900086fc:	2300      	movs	r3, #0
900086fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
90008702:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
90008706:	460b      	mov	r3, r1
90008708:	4313      	orrs	r3, r2
9000870a:	d044      	beq.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008714:	2b05      	cmp	r3, #5
90008716:	d825      	bhi.n	90008764 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008718:	a201      	add	r2, pc, #4	@ (adr r2, 90008720 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
9000871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000871e:	bf00      	nop
90008720:	9000876d 	.word	0x9000876d
90008724:	90008739 	.word	0x90008739
90008728:	9000874f 	.word	0x9000874f
9000872c:	9000876d 	.word	0x9000876d
90008730:	9000876d 	.word	0x9000876d
90008734:	9000876d 	.word	0x9000876d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000873c:	3308      	adds	r3, #8
9000873e:	2101      	movs	r1, #1
90008740:	4618      	mov	r0, r3
90008742:	f000 ff1d 	bl	90009580 <RCCEx_PLL2_Config>
90008746:	4603      	mov	r3, r0
90008748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000874c:	e00f      	b.n	9000876e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000874e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008752:	3328      	adds	r3, #40	@ 0x28
90008754:	2101      	movs	r1, #1
90008756:	4618      	mov	r0, r3
90008758:	f000 ffc4 	bl	900096e4 <RCCEx_PLL3_Config>
9000875c:	4603      	mov	r3, r0
9000875e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008762:	e004      	b.n	9000876e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008764:	2301      	movs	r3, #1
90008766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000876a:	e000      	b.n	9000876e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
9000876c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000876e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008772:	2b00      	cmp	r3, #0
90008774:	d10b      	bne.n	9000878e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90008776:	4b6c      	ldr	r3, [pc, #432]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000877a:	f023 0107 	bic.w	r1, r3, #7
9000877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008786:	4a68      	ldr	r2, [pc, #416]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008788:	430b      	orrs	r3, r1
9000878a:	6593      	str	r3, [r2, #88]	@ 0x58
9000878c:	e003      	b.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000878e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000879a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000879e:	f002 0320 	and.w	r3, r2, #32
900087a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
900087a6:	2300      	movs	r3, #0
900087a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
900087ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
900087b0:	460b      	mov	r3, r1
900087b2:	4313      	orrs	r3, r2
900087b4:	d055      	beq.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
900087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900087be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900087c2:	d033      	beq.n	9000882c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
900087c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900087c8:	d82c      	bhi.n	90008824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900087ce:	d02f      	beq.n	90008830 <HAL_RCCEx_PeriphCLKConfig+0xc40>
900087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900087d4:	d826      	bhi.n	90008824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900087da:	d02b      	beq.n	90008834 <HAL_RCCEx_PeriphCLKConfig+0xc44>
900087dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900087e0:	d820      	bhi.n	90008824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900087e6:	d012      	beq.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900087e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900087ec:	d81a      	bhi.n	90008824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087ee:	2b00      	cmp	r3, #0
900087f0:	d022      	beq.n	90008838 <HAL_RCCEx_PeriphCLKConfig+0xc48>
900087f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900087f6:	d115      	bne.n	90008824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087fc:	3308      	adds	r3, #8
900087fe:	2100      	movs	r1, #0
90008800:	4618      	mov	r0, r3
90008802:	f000 febd 	bl	90009580 <RCCEx_PLL2_Config>
90008806:	4603      	mov	r3, r0
90008808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000880c:	e015      	b.n	9000883a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008812:	3328      	adds	r3, #40	@ 0x28
90008814:	2102      	movs	r1, #2
90008816:	4618      	mov	r0, r3
90008818:	f000 ff64 	bl	900096e4 <RCCEx_PLL3_Config>
9000881c:	4603      	mov	r3, r0
9000881e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008822:	e00a      	b.n	9000883a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008824:	2301      	movs	r3, #1
90008826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000882a:	e006      	b.n	9000883a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000882c:	bf00      	nop
9000882e:	e004      	b.n	9000883a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008830:	bf00      	nop
90008832:	e002      	b.n	9000883a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008834:	bf00      	nop
90008836:	e000      	b.n	9000883a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008838:	bf00      	nop
    }

    if (ret == HAL_OK)
9000883a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000883e:	2b00      	cmp	r3, #0
90008840:	d10b      	bne.n	9000885a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90008842:	4b39      	ldr	r3, [pc, #228]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008846:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
9000884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000884e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90008852:	4a35      	ldr	r2, [pc, #212]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008854:	430b      	orrs	r3, r1
90008856:	6553      	str	r3, [r2, #84]	@ 0x54
90008858:	e003      	b.n	90008862 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000885a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000885e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008866:	e9d3 2300 	ldrd	r2, r3, [r3]
9000886a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
9000886e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
90008872:	2300      	movs	r3, #0
90008874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008878:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
9000887c:	460b      	mov	r3, r1
9000887e:	4313      	orrs	r3, r2
90008880:	d058      	beq.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000888a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000888e:	d033      	beq.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008890:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008894:	d82c      	bhi.n	900088f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000889a:	d02f      	beq.n	900088fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
9000889c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900088a0:	d826      	bhi.n	900088f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900088a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
900088a6:	d02b      	beq.n	90008900 <HAL_RCCEx_PeriphCLKConfig+0xd10>
900088a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
900088ac:	d820      	bhi.n	900088f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900088ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900088b2:	d012      	beq.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xcea>
900088b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900088b8:	d81a      	bhi.n	900088f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900088ba:	2b00      	cmp	r3, #0
900088bc:	d022      	beq.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0xd14>
900088be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900088c2:	d115      	bne.n	900088f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088c8:	3308      	adds	r3, #8
900088ca:	2100      	movs	r1, #0
900088cc:	4618      	mov	r0, r3
900088ce:	f000 fe57 	bl	90009580 <RCCEx_PLL2_Config>
900088d2:	4603      	mov	r3, r0
900088d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900088d8:	e015      	b.n	90008906 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088de:	3328      	adds	r3, #40	@ 0x28
900088e0:	2102      	movs	r1, #2
900088e2:	4618      	mov	r0, r3
900088e4:	f000 fefe 	bl	900096e4 <RCCEx_PLL3_Config>
900088e8:	4603      	mov	r3, r0
900088ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900088ee:	e00a      	b.n	90008906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900088f0:	2301      	movs	r3, #1
900088f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900088f6:	e006      	b.n	90008906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088f8:	bf00      	nop
900088fa:	e004      	b.n	90008906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088fc:	bf00      	nop
900088fe:	e002      	b.n	90008906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008900:	bf00      	nop
90008902:	e000      	b.n	90008906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008904:	bf00      	nop
    }

    if (ret == HAL_OK)
90008906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000890a:	2b00      	cmp	r3, #0
9000890c:	d10e      	bne.n	9000892c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000890e:	4b06      	ldr	r3, [pc, #24]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008912:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000891a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000891e:	4a02      	ldr	r2, [pc, #8]	@ (90008928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008920:	430b      	orrs	r3, r1
90008922:	6593      	str	r3, [r2, #88]	@ 0x58
90008924:	e006      	b.n	90008934 <HAL_RCCEx_PeriphCLKConfig+0xd44>
90008926:	bf00      	nop
90008928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
9000892c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008938:	e9d3 2300 	ldrd	r2, r3, [r3]
9000893c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90008940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90008944:	2300      	movs	r3, #0
90008946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
9000894a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
9000894e:	460b      	mov	r3, r1
90008950:	4313      	orrs	r3, r2
90008952:	d055      	beq.n	90008a00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
9000895c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008960:	d033      	beq.n	900089ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008962:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008966:	d82c      	bhi.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000896c:	d02f      	beq.n	900089ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
9000896e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008972:	d826      	bhi.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008974:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008978:	d02b      	beq.n	900089d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
9000897a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
9000897e:	d820      	bhi.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008984:	d012      	beq.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90008986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000898a:	d81a      	bhi.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000898c:	2b00      	cmp	r3, #0
9000898e:	d022      	beq.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008994:	d115      	bne.n	900089c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000899a:	3308      	adds	r3, #8
9000899c:	2100      	movs	r1, #0
9000899e:	4618      	mov	r0, r3
900089a0:	f000 fdee 	bl	90009580 <RCCEx_PLL2_Config>
900089a4:	4603      	mov	r3, r0
900089a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900089aa:	e015      	b.n	900089d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089b0:	3328      	adds	r3, #40	@ 0x28
900089b2:	2102      	movs	r1, #2
900089b4:	4618      	mov	r0, r3
900089b6:	f000 fe95 	bl	900096e4 <RCCEx_PLL3_Config>
900089ba:	4603      	mov	r3, r0
900089bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900089c0:	e00a      	b.n	900089d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089c2:	2301      	movs	r3, #1
900089c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089c8:	e006      	b.n	900089d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089ca:	bf00      	nop
900089cc:	e004      	b.n	900089d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089ce:	bf00      	nop
900089d0:	e002      	b.n	900089d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089d2:	bf00      	nop
900089d4:	e000      	b.n	900089d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089d6:	bf00      	nop
    }

    if (ret == HAL_OK)
900089d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089dc:	2b00      	cmp	r3, #0
900089de:	d10b      	bne.n	900089f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900089e0:	4ba1      	ldr	r3, [pc, #644]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900089e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
900089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900089f0:	4a9d      	ldr	r2, [pc, #628]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089f2:	430b      	orrs	r3, r1
900089f4:	6593      	str	r3, [r2, #88]	@ 0x58
900089f6:	e003      	b.n	90008a00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a08:	f002 0308 	and.w	r3, r2, #8
90008a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90008a10:	2300      	movs	r3, #0
90008a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008a16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008a1a:	460b      	mov	r3, r1
90008a1c:	4313      	orrs	r3, r2
90008a1e:	d01e      	beq.n	90008a5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008a2c:	d10c      	bne.n	90008a48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a32:	3328      	adds	r3, #40	@ 0x28
90008a34:	2102      	movs	r1, #2
90008a36:	4618      	mov	r0, r3
90008a38:	f000 fe54 	bl	900096e4 <RCCEx_PLL3_Config>
90008a3c:	4603      	mov	r3, r0
90008a3e:	2b00      	cmp	r3, #0
90008a40:	d002      	beq.n	90008a48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008a42:	2301      	movs	r3, #1
90008a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008a48:	4b87      	ldr	r3, [pc, #540]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008a4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008a58:	4a83      	ldr	r2, [pc, #524]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a5a:	430b      	orrs	r3, r1
90008a5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a66:	f002 0310 	and.w	r3, r2, #16
90008a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008a6e:	2300      	movs	r3, #0
90008a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
90008a74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008a78:	460b      	mov	r3, r1
90008a7a:	4313      	orrs	r3, r2
90008a7c:	d01e      	beq.n	90008abc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008a8a:	d10c      	bne.n	90008aa6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a90:	3328      	adds	r3, #40	@ 0x28
90008a92:	2102      	movs	r1, #2
90008a94:	4618      	mov	r0, r3
90008a96:	f000 fe25 	bl	900096e4 <RCCEx_PLL3_Config>
90008a9a:	4603      	mov	r3, r0
90008a9c:	2b00      	cmp	r3, #0
90008a9e:	d002      	beq.n	90008aa6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008aa0:	2301      	movs	r3, #1
90008aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008aa6:	4b70      	ldr	r3, [pc, #448]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008aaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008ab6:	4a6c      	ldr	r2, [pc, #432]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ab8:	430b      	orrs	r3, r1
90008aba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ac4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008acc:	2300      	movs	r3, #0
90008ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008ad2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008ad6:	460b      	mov	r3, r1
90008ad8:	4313      	orrs	r3, r2
90008ada:	d03e      	beq.n	90008b5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ae0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008ae8:	d022      	beq.n	90008b30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008aee:	d81b      	bhi.n	90008b28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008af0:	2b00      	cmp	r3, #0
90008af2:	d003      	beq.n	90008afc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008af8:	d00b      	beq.n	90008b12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008afa:	e015      	b.n	90008b28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b00:	3308      	adds	r3, #8
90008b02:	2100      	movs	r1, #0
90008b04:	4618      	mov	r0, r3
90008b06:	f000 fd3b 	bl	90009580 <RCCEx_PLL2_Config>
90008b0a:	4603      	mov	r3, r0
90008b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008b10:	e00f      	b.n	90008b32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b16:	3328      	adds	r3, #40	@ 0x28
90008b18:	2102      	movs	r1, #2
90008b1a:	4618      	mov	r0, r3
90008b1c:	f000 fde2 	bl	900096e4 <RCCEx_PLL3_Config>
90008b20:	4603      	mov	r3, r0
90008b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008b26:	e004      	b.n	90008b32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b28:	2301      	movs	r3, #1
90008b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b2e:	e000      	b.n	90008b32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008b30:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b36:	2b00      	cmp	r3, #0
90008b38:	d10b      	bne.n	90008b52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008b3a:	4b4b      	ldr	r3, [pc, #300]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008b3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008b4a:	4a47      	ldr	r2, [pc, #284]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b4c:	430b      	orrs	r3, r1
90008b4e:	6593      	str	r3, [r2, #88]	@ 0x58
90008b50:	e003      	b.n	90008b5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008b66:	67bb      	str	r3, [r7, #120]	@ 0x78
90008b68:	2300      	movs	r3, #0
90008b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008b6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008b70:	460b      	mov	r3, r1
90008b72:	4313      	orrs	r3, r2
90008b74:	d03b      	beq.n	90008bee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008b7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008b82:	d01f      	beq.n	90008bc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008b88:	d818      	bhi.n	90008bbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008b8e:	d003      	beq.n	90008b98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008b94:	d007      	beq.n	90008ba6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008b96:	e011      	b.n	90008bbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008b98:	4b33      	ldr	r3, [pc, #204]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008b9c:	4a32      	ldr	r2, [pc, #200]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008ba4:	e00f      	b.n	90008bc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008baa:	3328      	adds	r3, #40	@ 0x28
90008bac:	2101      	movs	r1, #1
90008bae:	4618      	mov	r0, r3
90008bb0:	f000 fd98 	bl	900096e4 <RCCEx_PLL3_Config>
90008bb4:	4603      	mov	r3, r0
90008bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008bba:	e004      	b.n	90008bc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008bbc:	2301      	movs	r3, #1
90008bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008bc2:	e000      	b.n	90008bc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
90008bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bca:	2b00      	cmp	r3, #0
90008bcc:	d10b      	bne.n	90008be6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008bce:	4b26      	ldr	r3, [pc, #152]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008bd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008bde:	4a22      	ldr	r2, [pc, #136]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008be0:	430b      	orrs	r3, r1
90008be2:	6553      	str	r3, [r2, #84]	@ 0x54
90008be4:	e003      	b.n	90008bee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008bfa:	673b      	str	r3, [r7, #112]	@ 0x70
90008bfc:	2300      	movs	r3, #0
90008bfe:	677b      	str	r3, [r7, #116]	@ 0x74
90008c00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008c04:	460b      	mov	r3, r1
90008c06:	4313      	orrs	r3, r2
90008c08:	d034      	beq.n	90008c74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008c10:	2b00      	cmp	r3, #0
90008c12:	d003      	beq.n	90008c1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008c18:	d007      	beq.n	90008c2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008c1a:	e011      	b.n	90008c40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008c1c:	4b12      	ldr	r3, [pc, #72]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008c20:	4a11      	ldr	r2, [pc, #68]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008c28:	e00e      	b.n	90008c48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c2e:	3308      	adds	r3, #8
90008c30:	2102      	movs	r1, #2
90008c32:	4618      	mov	r0, r3
90008c34:	f000 fca4 	bl	90009580 <RCCEx_PLL2_Config>
90008c38:	4603      	mov	r3, r0
90008c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008c3e:	e003      	b.n	90008c48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008c40:	2301      	movs	r3, #1
90008c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c46:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c4c:	2b00      	cmp	r3, #0
90008c4e:	d10d      	bne.n	90008c6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008c50:	4b05      	ldr	r3, [pc, #20]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008c54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008c5e:	4a02      	ldr	r2, [pc, #8]	@ (90008c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c60:	430b      	orrs	r3, r1
90008c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008c64:	e006      	b.n	90008c74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008c66:	bf00      	nop
90008c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008c80:	66bb      	str	r3, [r7, #104]	@ 0x68
90008c82:	2300      	movs	r3, #0
90008c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008c86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008c8a:	460b      	mov	r3, r1
90008c8c:	4313      	orrs	r3, r2
90008c8e:	d00c      	beq.n	90008caa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c94:	3328      	adds	r3, #40	@ 0x28
90008c96:	2102      	movs	r1, #2
90008c98:	4618      	mov	r0, r3
90008c9a:	f000 fd23 	bl	900096e4 <RCCEx_PLL3_Config>
90008c9e:	4603      	mov	r3, r0
90008ca0:	2b00      	cmp	r3, #0
90008ca2:	d002      	beq.n	90008caa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008ca4:	2301      	movs	r3, #1
90008ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cae:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008cb6:	663b      	str	r3, [r7, #96]	@ 0x60
90008cb8:	2300      	movs	r3, #0
90008cba:	667b      	str	r3, [r7, #100]	@ 0x64
90008cbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008cc0:	460b      	mov	r3, r1
90008cc2:	4313      	orrs	r3, r2
90008cc4:	d038      	beq.n	90008d38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008cd2:	d018      	beq.n	90008d06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008cd8:	d811      	bhi.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008cde:	d014      	beq.n	90008d0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008ce4:	d80b      	bhi.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008ce6:	2b00      	cmp	r3, #0
90008ce8:	d011      	beq.n	90008d0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008cee:	d106      	bne.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008cf0:	4bc3      	ldr	r3, [pc, #780]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008cf4:	4ac2      	ldr	r2, [pc, #776]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008cfc:	e008      	b.n	90008d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008cfe:	2301      	movs	r3, #1
90008d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d04:	e004      	b.n	90008d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008d06:	bf00      	nop
90008d08:	e002      	b.n	90008d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008d0a:	bf00      	nop
90008d0c:	e000      	b.n	90008d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d14:	2b00      	cmp	r3, #0
90008d16:	d10b      	bne.n	90008d30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008d18:	4bb9      	ldr	r3, [pc, #740]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008d1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008d28:	4ab5      	ldr	r2, [pc, #724]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d2a:	430b      	orrs	r3, r1
90008d2c:	6553      	str	r3, [r2, #84]	@ 0x54
90008d2e:	e003      	b.n	90008d38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008d44:	65bb      	str	r3, [r7, #88]	@ 0x58
90008d46:	2300      	movs	r3, #0
90008d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008d4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008d4e:	460b      	mov	r3, r1
90008d50:	4313      	orrs	r3, r2
90008d52:	d009      	beq.n	90008d68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008d54:	4baa      	ldr	r3, [pc, #680]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008d58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008d62:	4aa7      	ldr	r2, [pc, #668]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d64:	430b      	orrs	r3, r1
90008d66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008d74:	653b      	str	r3, [r7, #80]	@ 0x50
90008d76:	2300      	movs	r3, #0
90008d78:	657b      	str	r3, [r7, #84]	@ 0x54
90008d7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008d7e:	460b      	mov	r3, r1
90008d80:	4313      	orrs	r3, r2
90008d82:	d00a      	beq.n	90008d9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008d84:	4b9e      	ldr	r3, [pc, #632]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d86:	691b      	ldr	r3, [r3, #16]
90008d88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008d94:	4a9a      	ldr	r2, [pc, #616]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d96:	430b      	orrs	r3, r1
90008d98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008da2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008da6:	64bb      	str	r3, [r7, #72]	@ 0x48
90008da8:	2300      	movs	r3, #0
90008daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008dac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008db0:	460b      	mov	r3, r1
90008db2:	4313      	orrs	r3, r2
90008db4:	d009      	beq.n	90008dca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008db6:	4b92      	ldr	r3, [pc, #584]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008dba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008dc4:	4a8e      	ldr	r2, [pc, #568]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dc6:	430b      	orrs	r3, r1
90008dc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
90008dd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008dd6:	643b      	str	r3, [r7, #64]	@ 0x40
90008dd8:	2300      	movs	r3, #0
90008dda:	647b      	str	r3, [r7, #68]	@ 0x44
90008ddc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008de0:	460b      	mov	r3, r1
90008de2:	4313      	orrs	r3, r2
90008de4:	d00e      	beq.n	90008e04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008de6:	4b86      	ldr	r3, [pc, #536]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008de8:	691b      	ldr	r3, [r3, #16]
90008dea:	4a85      	ldr	r2, [pc, #532]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008df0:	6113      	str	r3, [r2, #16]
90008df2:	4b83      	ldr	r3, [pc, #524]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008df4:	6919      	ldr	r1, [r3, #16]
90008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008dfe:	4a80      	ldr	r2, [pc, #512]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e00:	430b      	orrs	r3, r1
90008e02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008e10:	63bb      	str	r3, [r7, #56]	@ 0x38
90008e12:	2300      	movs	r3, #0
90008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008e16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008e1a:	460b      	mov	r3, r1
90008e1c:	4313      	orrs	r3, r2
90008e1e:	d009      	beq.n	90008e34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008e20:	4b77      	ldr	r3, [pc, #476]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008e24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008e2e:	4a74      	ldr	r2, [pc, #464]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e30:	430b      	orrs	r3, r1
90008e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008e40:	633b      	str	r3, [r7, #48]	@ 0x30
90008e42:	2300      	movs	r3, #0
90008e44:	637b      	str	r3, [r7, #52]	@ 0x34
90008e46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008e4a:	460b      	mov	r3, r1
90008e4c:	4313      	orrs	r3, r2
90008e4e:	d00a      	beq.n	90008e66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008e50:	4b6b      	ldr	r3, [pc, #428]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008e54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008e60:	4a67      	ldr	r2, [pc, #412]	@ (90009000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e62:	430b      	orrs	r3, r1
90008e64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e6e:	2100      	movs	r1, #0
90008e70:	62b9      	str	r1, [r7, #40]	@ 0x28
90008e72:	f003 0301 	and.w	r3, r3, #1
90008e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008e78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008e7c:	460b      	mov	r3, r1
90008e7e:	4313      	orrs	r3, r2
90008e80:	d011      	beq.n	90008ea6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e86:	3308      	adds	r3, #8
90008e88:	2100      	movs	r1, #0
90008e8a:	4618      	mov	r0, r3
90008e8c:	f000 fb78 	bl	90009580 <RCCEx_PLL2_Config>
90008e90:	4603      	mov	r3, r0
90008e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e9a:	2b00      	cmp	r3, #0
90008e9c:	d003      	beq.n	90008ea6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
90008eae:	2100      	movs	r1, #0
90008eb0:	6239      	str	r1, [r7, #32]
90008eb2:	f003 0302 	and.w	r3, r3, #2
90008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
90008eb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008ebc:	460b      	mov	r3, r1
90008ebe:	4313      	orrs	r3, r2
90008ec0:	d011      	beq.n	90008ee6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ec6:	3308      	adds	r3, #8
90008ec8:	2101      	movs	r1, #1
90008eca:	4618      	mov	r0, r3
90008ecc:	f000 fb58 	bl	90009580 <RCCEx_PLL2_Config>
90008ed0:	4603      	mov	r3, r0
90008ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008eda:	2b00      	cmp	r3, #0
90008edc:	d003      	beq.n	90008ee6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
90008eee:	2100      	movs	r1, #0
90008ef0:	61b9      	str	r1, [r7, #24]
90008ef2:	f003 0304 	and.w	r3, r3, #4
90008ef6:	61fb      	str	r3, [r7, #28]
90008ef8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008efc:	460b      	mov	r3, r1
90008efe:	4313      	orrs	r3, r2
90008f00:	d011      	beq.n	90008f26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f06:	3308      	adds	r3, #8
90008f08:	2102      	movs	r1, #2
90008f0a:	4618      	mov	r0, r3
90008f0c:	f000 fb38 	bl	90009580 <RCCEx_PLL2_Config>
90008f10:	4603      	mov	r3, r0
90008f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f1a:	2b00      	cmp	r3, #0
90008f1c:	d003      	beq.n	90008f26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f2e:	2100      	movs	r1, #0
90008f30:	6139      	str	r1, [r7, #16]
90008f32:	f003 0308 	and.w	r3, r3, #8
90008f36:	617b      	str	r3, [r7, #20]
90008f38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008f3c:	460b      	mov	r3, r1
90008f3e:	4313      	orrs	r3, r2
90008f40:	d011      	beq.n	90008f66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f46:	3328      	adds	r3, #40	@ 0x28
90008f48:	2100      	movs	r1, #0
90008f4a:	4618      	mov	r0, r3
90008f4c:	f000 fbca 	bl	900096e4 <RCCEx_PLL3_Config>
90008f50:	4603      	mov	r3, r0
90008f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f5a:	2b00      	cmp	r3, #0
90008f5c:	d003      	beq.n	90008f66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f6e:	2100      	movs	r1, #0
90008f70:	60b9      	str	r1, [r7, #8]
90008f72:	f003 0310 	and.w	r3, r3, #16
90008f76:	60fb      	str	r3, [r7, #12]
90008f78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008f7c:	460b      	mov	r3, r1
90008f7e:	4313      	orrs	r3, r2
90008f80:	d011      	beq.n	90008fa6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f86:	3328      	adds	r3, #40	@ 0x28
90008f88:	2101      	movs	r1, #1
90008f8a:	4618      	mov	r0, r3
90008f8c:	f000 fbaa 	bl	900096e4 <RCCEx_PLL3_Config>
90008f90:	4603      	mov	r3, r0
90008f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f9a:	2b00      	cmp	r3, #0
90008f9c:	d003      	beq.n	90008fa6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fae:	2100      	movs	r1, #0
90008fb0:	6039      	str	r1, [r7, #0]
90008fb2:	f003 0320 	and.w	r3, r3, #32
90008fb6:	607b      	str	r3, [r7, #4]
90008fb8:	e9d7 1200 	ldrd	r1, r2, [r7]
90008fbc:	460b      	mov	r3, r1
90008fbe:	4313      	orrs	r3, r2
90008fc0:	d011      	beq.n	90008fe6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fc6:	3328      	adds	r3, #40	@ 0x28
90008fc8:	2102      	movs	r1, #2
90008fca:	4618      	mov	r0, r3
90008fcc:	f000 fb8a 	bl	900096e4 <RCCEx_PLL3_Config>
90008fd0:	4603      	mov	r3, r0
90008fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fda:	2b00      	cmp	r3, #0
90008fdc:	d003      	beq.n	90008fe6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008fe6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008fea:	2b00      	cmp	r3, #0
90008fec:	d101      	bne.n	90008ff2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008fee:	2300      	movs	r3, #0
90008ff0:	e000      	b.n	90008ff4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008ff2:	2301      	movs	r3, #1
}
90008ff4:	4618      	mov	r0, r3
90008ff6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90008ffa:	46bd      	mov	sp, r7
90008ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90009000:	58024400 	.word	0x58024400

90009004 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90009004:	b580      	push	{r7, lr}
90009006:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90009008:	f7fe fd96 	bl	90007b38 <HAL_RCC_GetHCLKFreq>
9000900c:	4602      	mov	r2, r0
9000900e:	4b06      	ldr	r3, [pc, #24]	@ (90009028 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90009010:	6a1b      	ldr	r3, [r3, #32]
90009012:	091b      	lsrs	r3, r3, #4
90009014:	f003 0307 	and.w	r3, r3, #7
90009018:	4904      	ldr	r1, [pc, #16]	@ (9000902c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
9000901a:	5ccb      	ldrb	r3, [r1, r3]
9000901c:	f003 031f 	and.w	r3, r3, #31
90009020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90009024:	4618      	mov	r0, r3
90009026:	bd80      	pop	{r7, pc}
90009028:	58024400 	.word	0x58024400
9000902c:	9000d7e0 	.word	0x9000d7e0

90009030 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90009030:	b480      	push	{r7}
90009032:	b089      	sub	sp, #36	@ 0x24
90009034:	af00      	add	r7, sp, #0
90009036:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009038:	4ba1      	ldr	r3, [pc, #644]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000903a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000903c:	f003 0303 	and.w	r3, r3, #3
90009040:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90009042:	4b9f      	ldr	r3, [pc, #636]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009046:	0b1b      	lsrs	r3, r3, #12
90009048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000904c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000904e:	4b9c      	ldr	r3, [pc, #624]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009052:	091b      	lsrs	r3, r3, #4
90009054:	f003 0301 	and.w	r3, r3, #1
90009058:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000905a:	4b99      	ldr	r3, [pc, #612]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000905c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9000905e:	08db      	lsrs	r3, r3, #3
90009060:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009064:	693a      	ldr	r2, [r7, #16]
90009066:	fb02 f303 	mul.w	r3, r2, r3
9000906a:	ee07 3a90 	vmov	s15, r3
9000906e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009072:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90009076:	697b      	ldr	r3, [r7, #20]
90009078:	2b00      	cmp	r3, #0
9000907a:	f000 8111 	beq.w	900092a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
9000907e:	69bb      	ldr	r3, [r7, #24]
90009080:	2b02      	cmp	r3, #2
90009082:	f000 8083 	beq.w	9000918c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90009086:	69bb      	ldr	r3, [r7, #24]
90009088:	2b02      	cmp	r3, #2
9000908a:	f200 80a1 	bhi.w	900091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
9000908e:	69bb      	ldr	r3, [r7, #24]
90009090:	2b00      	cmp	r3, #0
90009092:	d003      	beq.n	9000909c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90009094:	69bb      	ldr	r3, [r7, #24]
90009096:	2b01      	cmp	r3, #1
90009098:	d056      	beq.n	90009148 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
9000909a:	e099      	b.n	900091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000909c:	4b88      	ldr	r3, [pc, #544]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000909e:	681b      	ldr	r3, [r3, #0]
900090a0:	f003 0320 	and.w	r3, r3, #32
900090a4:	2b00      	cmp	r3, #0
900090a6:	d02d      	beq.n	90009104 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900090a8:	4b85      	ldr	r3, [pc, #532]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090aa:	681b      	ldr	r3, [r3, #0]
900090ac:	08db      	lsrs	r3, r3, #3
900090ae:	f003 0303 	and.w	r3, r3, #3
900090b2:	4a84      	ldr	r2, [pc, #528]	@ (900092c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
900090b4:	fa22 f303 	lsr.w	r3, r2, r3
900090b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900090ba:	68bb      	ldr	r3, [r7, #8]
900090bc:	ee07 3a90 	vmov	s15, r3
900090c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090c4:	697b      	ldr	r3, [r7, #20]
900090c6:	ee07 3a90 	vmov	s15, r3
900090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
900090ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900090d2:	4b7b      	ldr	r3, [pc, #492]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900090d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900090da:	ee07 3a90 	vmov	s15, r3
900090de:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090e2:	ed97 6a03 	vldr	s12, [r7, #12]
900090e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900090ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
900090ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
900090f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900090f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900090fa:	ee67 7a27 	vmul.f32	s15, s14, s15
900090fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009102:	e087      	b.n	90009214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009104:	697b      	ldr	r3, [r7, #20]
90009106:	ee07 3a90 	vmov	s15, r3
9000910a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000910e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900092cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90009112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009116:	4b6a      	ldr	r3, [pc, #424]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000911a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000911e:	ee07 3a90 	vmov	s15, r3
90009122:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009126:	ed97 6a03 	vldr	s12, [r7, #12]
9000912a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000912e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009132:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000913a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000913e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009146:	e065      	b.n	90009214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009148:	697b      	ldr	r3, [r7, #20]
9000914a:	ee07 3a90 	vmov	s15, r3
9000914e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009152:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90009156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000915a:	4b59      	ldr	r3, [pc, #356]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000915c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000915e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009162:	ee07 3a90 	vmov	s15, r3
90009166:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000916a:	ed97 6a03 	vldr	s12, [r7, #12]
9000916e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009172:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009176:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000917a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000917e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009182:	ee67 7a27 	vmul.f32	s15, s14, s15
90009186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000918a:	e043      	b.n	90009214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000918c:	697b      	ldr	r3, [r7, #20]
9000918e:	ee07 3a90 	vmov	s15, r3
90009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009196:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
9000919a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000919e:	4b48      	ldr	r3, [pc, #288]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091a6:	ee07 3a90 	vmov	s15, r3
900091aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091ae:	ed97 6a03 	vldr	s12, [r7, #12]
900091b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900091b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900091ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
900091be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900091c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900091c6:	ee67 7a27 	vmul.f32	s15, s14, s15
900091ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900091ce:	e021      	b.n	90009214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900091d0:	697b      	ldr	r3, [r7, #20]
900091d2:	ee07 3a90 	vmov	s15, r3
900091d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900091de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091e2:	4b37      	ldr	r3, [pc, #220]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091ea:	ee07 3a90 	vmov	s15, r3
900091ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091f2:	ed97 6a03 	vldr	s12, [r7, #12]
900091f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900091fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
900091fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009206:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000920a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000920e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009212:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90009214:	4b2a      	ldr	r3, [pc, #168]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009218:	0a5b      	lsrs	r3, r3, #9
9000921a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000921e:	ee07 3a90 	vmov	s15, r3
90009222:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000922a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000922e:	edd7 6a07 	vldr	s13, [r7, #28]
90009232:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000923a:	ee17 2a90 	vmov	r2, s15
9000923e:	687b      	ldr	r3, [r7, #4]
90009240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
90009242:	4b1f      	ldr	r3, [pc, #124]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009246:	0c1b      	lsrs	r3, r3, #16
90009248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000924c:	ee07 3a90 	vmov	s15, r3
90009250:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009254:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009258:	ee37 7a87 	vadd.f32	s14, s15, s14
9000925c:	edd7 6a07 	vldr	s13, [r7, #28]
90009260:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009268:	ee17 2a90 	vmov	r2, s15
9000926c:	687b      	ldr	r3, [r7, #4]
9000926e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90009270:	4b13      	ldr	r3, [pc, #76]	@ (900092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009274:	0e1b      	lsrs	r3, r3, #24
90009276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000927a:	ee07 3a90 	vmov	s15, r3
9000927e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009286:	ee37 7a87 	vadd.f32	s14, s15, s14
9000928a:	edd7 6a07 	vldr	s13, [r7, #28]
9000928e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009296:	ee17 2a90 	vmov	r2, s15
9000929a:	687b      	ldr	r3, [r7, #4]
9000929c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
9000929e:	e008      	b.n	900092b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900092a0:	687b      	ldr	r3, [r7, #4]
900092a2:	2200      	movs	r2, #0
900092a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900092a6:	687b      	ldr	r3, [r7, #4]
900092a8:	2200      	movs	r2, #0
900092aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
900092ac:	687b      	ldr	r3, [r7, #4]
900092ae:	2200      	movs	r2, #0
900092b0:	609a      	str	r2, [r3, #8]
}
900092b2:	bf00      	nop
900092b4:	3724      	adds	r7, #36	@ 0x24
900092b6:	46bd      	mov	sp, r7
900092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900092bc:	4770      	bx	lr
900092be:	bf00      	nop
900092c0:	58024400 	.word	0x58024400
900092c4:	03d09000 	.word	0x03d09000
900092c8:	46000000 	.word	0x46000000
900092cc:	4c742400 	.word	0x4c742400
900092d0:	4a742400 	.word	0x4a742400
900092d4:	4bbebc20 	.word	0x4bbebc20

900092d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
900092d8:	b480      	push	{r7}
900092da:	b089      	sub	sp, #36	@ 0x24
900092dc:	af00      	add	r7, sp, #0
900092de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900092e0:	4ba1      	ldr	r3, [pc, #644]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900092e4:	f003 0303 	and.w	r3, r3, #3
900092e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
900092ea:	4b9f      	ldr	r3, [pc, #636]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900092ee:	0d1b      	lsrs	r3, r3, #20
900092f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900092f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
900092f6:	4b9c      	ldr	r3, [pc, #624]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092fa:	0a1b      	lsrs	r3, r3, #8
900092fc:	f003 0301 	and.w	r3, r3, #1
90009300:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
90009302:	4b99      	ldr	r3, [pc, #612]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90009306:	08db      	lsrs	r3, r3, #3
90009308:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000930c:	693a      	ldr	r2, [r7, #16]
9000930e:	fb02 f303 	mul.w	r3, r2, r3
90009312:	ee07 3a90 	vmov	s15, r3
90009316:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000931a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
9000931e:	697b      	ldr	r3, [r7, #20]
90009320:	2b00      	cmp	r3, #0
90009322:	f000 8111 	beq.w	90009548 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90009326:	69bb      	ldr	r3, [r7, #24]
90009328:	2b02      	cmp	r3, #2
9000932a:	f000 8083 	beq.w	90009434 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
9000932e:	69bb      	ldr	r3, [r7, #24]
90009330:	2b02      	cmp	r3, #2
90009332:	f200 80a1 	bhi.w	90009478 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90009336:	69bb      	ldr	r3, [r7, #24]
90009338:	2b00      	cmp	r3, #0
9000933a:	d003      	beq.n	90009344 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
9000933c:	69bb      	ldr	r3, [r7, #24]
9000933e:	2b01      	cmp	r3, #1
90009340:	d056      	beq.n	900093f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90009342:	e099      	b.n	90009478 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009344:	4b88      	ldr	r3, [pc, #544]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009346:	681b      	ldr	r3, [r3, #0]
90009348:	f003 0320 	and.w	r3, r3, #32
9000934c:	2b00      	cmp	r3, #0
9000934e:	d02d      	beq.n	900093ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009350:	4b85      	ldr	r3, [pc, #532]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009352:	681b      	ldr	r3, [r3, #0]
90009354:	08db      	lsrs	r3, r3, #3
90009356:	f003 0303 	and.w	r3, r3, #3
9000935a:	4a84      	ldr	r2, [pc, #528]	@ (9000956c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
9000935c:	fa22 f303 	lsr.w	r3, r2, r3
90009360:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009362:	68bb      	ldr	r3, [r7, #8]
90009364:	ee07 3a90 	vmov	s15, r3
90009368:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000936c:	697b      	ldr	r3, [r7, #20]
9000936e:	ee07 3a90 	vmov	s15, r3
90009372:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000937a:	4b7b      	ldr	r3, [pc, #492]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000937e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009382:	ee07 3a90 	vmov	s15, r3
90009386:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000938a:	ed97 6a03 	vldr	s12, [r7, #12]
9000938e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009392:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009396:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000939a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000939e:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093a2:	ee67 7a27 	vmul.f32	s15, s14, s15
900093a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
900093aa:	e087      	b.n	900094bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900093ac:	697b      	ldr	r3, [r7, #20]
900093ae:	ee07 3a90 	vmov	s15, r3
900093b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009574 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900093ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900093be:	4b6a      	ldr	r3, [pc, #424]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900093c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900093c6:	ee07 3a90 	vmov	s15, r3
900093ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
900093ce:	ed97 6a03 	vldr	s12, [r7, #12]
900093d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900093d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900093da:	ee76 7aa7 	vadd.f32	s15, s13, s15
900093de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093e6:	ee67 7a27 	vmul.f32	s15, s14, s15
900093ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900093ee:	e065      	b.n	900094bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900093f0:	697b      	ldr	r3, [r7, #20]
900093f2:	ee07 3a90 	vmov	s15, r3
900093f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
900093fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009402:	4b59      	ldr	r3, [pc, #356]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009406:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000940a:	ee07 3a90 	vmov	s15, r3
9000940e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009412:	ed97 6a03 	vldr	s12, [r7, #12]
90009416:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000941a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000941e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009426:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000942a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000942e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009432:	e043      	b.n	900094bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009434:	697b      	ldr	r3, [r7, #20]
90009436:	ee07 3a90 	vmov	s15, r3
9000943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000943e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90009442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009446:	4b48      	ldr	r3, [pc, #288]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000944a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000944e:	ee07 3a90 	vmov	s15, r3
90009452:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009456:	ed97 6a03 	vldr	s12, [r7, #12]
9000945a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000945e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009462:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000946a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000946e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009476:	e021      	b.n	900094bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009478:	697b      	ldr	r3, [r7, #20]
9000947a:	ee07 3a90 	vmov	s15, r3
9000947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009482:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000948a:	4b37      	ldr	r3, [pc, #220]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000948c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000948e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009492:	ee07 3a90 	vmov	s15, r3
90009496:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000949a:	ed97 6a03 	vldr	s12, [r7, #12]
9000949e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900094a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900094a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900094aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900094ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
900094b2:	ee67 7a27 	vmul.f32	s15, s14, s15
900094b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900094ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
900094bc:	4b2a      	ldr	r3, [pc, #168]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900094be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900094c0:	0a5b      	lsrs	r3, r3, #9
900094c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900094c6:	ee07 3a90 	vmov	s15, r3
900094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900094d2:	ee37 7a87 	vadd.f32	s14, s15, s14
900094d6:	edd7 6a07 	vldr	s13, [r7, #28]
900094da:	eec6 7a87 	vdiv.f32	s15, s13, s14
900094de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900094e2:	ee17 2a90 	vmov	r2, s15
900094e6:	687b      	ldr	r3, [r7, #4]
900094e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
900094ea:	4b1f      	ldr	r3, [pc, #124]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900094ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900094ee:	0c1b      	lsrs	r3, r3, #16
900094f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900094f4:	ee07 3a90 	vmov	s15, r3
900094f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009500:	ee37 7a87 	vadd.f32	s14, s15, s14
90009504:	edd7 6a07 	vldr	s13, [r7, #28]
90009508:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000950c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009510:	ee17 2a90 	vmov	r2, s15
90009514:	687b      	ldr	r3, [r7, #4]
90009516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009518:	4b13      	ldr	r3, [pc, #76]	@ (90009568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000951a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000951c:	0e1b      	lsrs	r3, r3, #24
9000951e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009522:	ee07 3a90 	vmov	s15, r3
90009526:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000952a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000952e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009532:	edd7 6a07 	vldr	s13, [r7, #28]
90009536:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000953a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000953e:	ee17 2a90 	vmov	r2, s15
90009542:	687b      	ldr	r3, [r7, #4]
90009544:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90009546:	e008      	b.n	9000955a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90009548:	687b      	ldr	r3, [r7, #4]
9000954a:	2200      	movs	r2, #0
9000954c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000954e:	687b      	ldr	r3, [r7, #4]
90009550:	2200      	movs	r2, #0
90009552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90009554:	687b      	ldr	r3, [r7, #4]
90009556:	2200      	movs	r2, #0
90009558:	609a      	str	r2, [r3, #8]
}
9000955a:	bf00      	nop
9000955c:	3724      	adds	r7, #36	@ 0x24
9000955e:	46bd      	mov	sp, r7
90009560:	f85d 7b04 	ldr.w	r7, [sp], #4
90009564:	4770      	bx	lr
90009566:	bf00      	nop
90009568:	58024400 	.word	0x58024400
9000956c:	03d09000 	.word	0x03d09000
90009570:	46000000 	.word	0x46000000
90009574:	4c742400 	.word	0x4c742400
90009578:	4a742400 	.word	0x4a742400
9000957c:	4bbebc20 	.word	0x4bbebc20

90009580 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90009580:	b580      	push	{r7, lr}
90009582:	b084      	sub	sp, #16
90009584:	af00      	add	r7, sp, #0
90009586:	6078      	str	r0, [r7, #4]
90009588:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000958a:	2300      	movs	r3, #0
9000958c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000958e:	4b53      	ldr	r3, [pc, #332]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009592:	f003 0303 	and.w	r3, r3, #3
90009596:	2b03      	cmp	r3, #3
90009598:	d101      	bne.n	9000959e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
9000959a:	2301      	movs	r3, #1
9000959c:	e099      	b.n	900096d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000959e:	4b4f      	ldr	r3, [pc, #316]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900095a0:	681b      	ldr	r3, [r3, #0]
900095a2:	4a4e      	ldr	r2, [pc, #312]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900095a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
900095a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900095aa:	f7f9 fe93 	bl	900032d4 <HAL_GetTick>
900095ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900095b0:	e008      	b.n	900095c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
900095b2:	f7f9 fe8f 	bl	900032d4 <HAL_GetTick>
900095b6:	4602      	mov	r2, r0
900095b8:	68bb      	ldr	r3, [r7, #8]
900095ba:	1ad3      	subs	r3, r2, r3
900095bc:	2b02      	cmp	r3, #2
900095be:	d901      	bls.n	900095c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
900095c0:	2303      	movs	r3, #3
900095c2:	e086      	b.n	900096d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900095c4:	4b45      	ldr	r3, [pc, #276]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900095c6:	681b      	ldr	r3, [r3, #0]
900095c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900095cc:	2b00      	cmp	r3, #0
900095ce:	d1f0      	bne.n	900095b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
900095d0:	4b42      	ldr	r3, [pc, #264]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900095d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900095d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900095d8:	687b      	ldr	r3, [r7, #4]
900095da:	681b      	ldr	r3, [r3, #0]
900095dc:	031b      	lsls	r3, r3, #12
900095de:	493f      	ldr	r1, [pc, #252]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900095e0:	4313      	orrs	r3, r2
900095e2:	628b      	str	r3, [r1, #40]	@ 0x28
900095e4:	687b      	ldr	r3, [r7, #4]
900095e6:	685b      	ldr	r3, [r3, #4]
900095e8:	3b01      	subs	r3, #1
900095ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
900095ee:	687b      	ldr	r3, [r7, #4]
900095f0:	689b      	ldr	r3, [r3, #8]
900095f2:	3b01      	subs	r3, #1
900095f4:	025b      	lsls	r3, r3, #9
900095f6:	b29b      	uxth	r3, r3
900095f8:	431a      	orrs	r2, r3
900095fa:	687b      	ldr	r3, [r7, #4]
900095fc:	68db      	ldr	r3, [r3, #12]
900095fe:	3b01      	subs	r3, #1
90009600:	041b      	lsls	r3, r3, #16
90009602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009606:	431a      	orrs	r2, r3
90009608:	687b      	ldr	r3, [r7, #4]
9000960a:	691b      	ldr	r3, [r3, #16]
9000960c:	3b01      	subs	r3, #1
9000960e:	061b      	lsls	r3, r3, #24
90009610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009614:	4931      	ldr	r1, [pc, #196]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009616:	4313      	orrs	r3, r2
90009618:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000961a:	4b30      	ldr	r3, [pc, #192]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
9000961c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000961e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
90009622:	687b      	ldr	r3, [r7, #4]
90009624:	695b      	ldr	r3, [r3, #20]
90009626:	492d      	ldr	r1, [pc, #180]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009628:	4313      	orrs	r3, r2
9000962a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000962c:	4b2b      	ldr	r3, [pc, #172]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
9000962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009630:	f023 0220 	bic.w	r2, r3, #32
90009634:	687b      	ldr	r3, [r7, #4]
90009636:	699b      	ldr	r3, [r3, #24]
90009638:	4928      	ldr	r1, [pc, #160]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
9000963a:	4313      	orrs	r3, r2
9000963c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
9000963e:	4b27      	ldr	r3, [pc, #156]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009642:	4a26      	ldr	r2, [pc, #152]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009644:	f023 0310 	bic.w	r3, r3, #16
90009648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000964a:	4b24      	ldr	r3, [pc, #144]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
9000964c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000964e:	4b24      	ldr	r3, [pc, #144]	@ (900096e0 <RCCEx_PLL2_Config+0x160>)
90009650:	4013      	ands	r3, r2
90009652:	687a      	ldr	r2, [r7, #4]
90009654:	69d2      	ldr	r2, [r2, #28]
90009656:	00d2      	lsls	r2, r2, #3
90009658:	4920      	ldr	r1, [pc, #128]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
9000965a:	4313      	orrs	r3, r2
9000965c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000965e:	4b1f      	ldr	r3, [pc, #124]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009662:	4a1e      	ldr	r2, [pc, #120]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009664:	f043 0310 	orr.w	r3, r3, #16
90009668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000966a:	683b      	ldr	r3, [r7, #0]
9000966c:	2b00      	cmp	r3, #0
9000966e:	d106      	bne.n	9000967e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90009670:	4b1a      	ldr	r3, [pc, #104]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009674:	4a19      	ldr	r2, [pc, #100]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009676:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
9000967a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000967c:	e00f      	b.n	9000969e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000967e:	683b      	ldr	r3, [r7, #0]
90009680:	2b01      	cmp	r3, #1
90009682:	d106      	bne.n	90009692 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90009684:	4b15      	ldr	r3, [pc, #84]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009688:	4a14      	ldr	r2, [pc, #80]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
9000968a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000968e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009690:	e005      	b.n	9000969e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90009692:	4b12      	ldr	r3, [pc, #72]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009696:	4a11      	ldr	r2, [pc, #68]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
90009698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
9000969c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000969e:	4b0f      	ldr	r3, [pc, #60]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900096a0:	681b      	ldr	r3, [r3, #0]
900096a2:	4a0e      	ldr	r2, [pc, #56]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900096a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
900096a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900096aa:	f7f9 fe13 	bl	900032d4 <HAL_GetTick>
900096ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900096b0:	e008      	b.n	900096c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
900096b2:	f7f9 fe0f 	bl	900032d4 <HAL_GetTick>
900096b6:	4602      	mov	r2, r0
900096b8:	68bb      	ldr	r3, [r7, #8]
900096ba:	1ad3      	subs	r3, r2, r3
900096bc:	2b02      	cmp	r3, #2
900096be:	d901      	bls.n	900096c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
900096c0:	2303      	movs	r3, #3
900096c2:	e006      	b.n	900096d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900096c4:	4b05      	ldr	r3, [pc, #20]	@ (900096dc <RCCEx_PLL2_Config+0x15c>)
900096c6:	681b      	ldr	r3, [r3, #0]
900096c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900096cc:	2b00      	cmp	r3, #0
900096ce:	d0f0      	beq.n	900096b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
900096d0:	7bfb      	ldrb	r3, [r7, #15]
}
900096d2:	4618      	mov	r0, r3
900096d4:	3710      	adds	r7, #16
900096d6:	46bd      	mov	sp, r7
900096d8:	bd80      	pop	{r7, pc}
900096da:	bf00      	nop
900096dc:	58024400 	.word	0x58024400
900096e0:	ffff0007 	.word	0xffff0007

900096e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
900096e4:	b580      	push	{r7, lr}
900096e6:	b084      	sub	sp, #16
900096e8:	af00      	add	r7, sp, #0
900096ea:	6078      	str	r0, [r7, #4]
900096ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900096ee:	2300      	movs	r3, #0
900096f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900096f2:	4b53      	ldr	r3, [pc, #332]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900096f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900096f6:	f003 0303 	and.w	r3, r3, #3
900096fa:	2b03      	cmp	r3, #3
900096fc:	d101      	bne.n	90009702 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
900096fe:	2301      	movs	r3, #1
90009700:	e099      	b.n	90009836 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90009702:	4b4f      	ldr	r3, [pc, #316]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009704:	681b      	ldr	r3, [r3, #0]
90009706:	4a4e      	ldr	r2, [pc, #312]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
9000970c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000970e:	f7f9 fde1 	bl	900032d4 <HAL_GetTick>
90009712:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009714:	e008      	b.n	90009728 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009716:	f7f9 fddd 	bl	900032d4 <HAL_GetTick>
9000971a:	4602      	mov	r2, r0
9000971c:	68bb      	ldr	r3, [r7, #8]
9000971e:	1ad3      	subs	r3, r2, r3
90009720:	2b02      	cmp	r3, #2
90009722:	d901      	bls.n	90009728 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90009724:	2303      	movs	r3, #3
90009726:	e086      	b.n	90009836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009728:	4b45      	ldr	r3, [pc, #276]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
9000972a:	681b      	ldr	r3, [r3, #0]
9000972c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009730:	2b00      	cmp	r3, #0
90009732:	d1f0      	bne.n	90009716 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90009734:	4b42      	ldr	r3, [pc, #264]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009738:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
9000973c:	687b      	ldr	r3, [r7, #4]
9000973e:	681b      	ldr	r3, [r3, #0]
90009740:	051b      	lsls	r3, r3, #20
90009742:	493f      	ldr	r1, [pc, #252]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009744:	4313      	orrs	r3, r2
90009746:	628b      	str	r3, [r1, #40]	@ 0x28
90009748:	687b      	ldr	r3, [r7, #4]
9000974a:	685b      	ldr	r3, [r3, #4]
9000974c:	3b01      	subs	r3, #1
9000974e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009752:	687b      	ldr	r3, [r7, #4]
90009754:	689b      	ldr	r3, [r3, #8]
90009756:	3b01      	subs	r3, #1
90009758:	025b      	lsls	r3, r3, #9
9000975a:	b29b      	uxth	r3, r3
9000975c:	431a      	orrs	r2, r3
9000975e:	687b      	ldr	r3, [r7, #4]
90009760:	68db      	ldr	r3, [r3, #12]
90009762:	3b01      	subs	r3, #1
90009764:	041b      	lsls	r3, r3, #16
90009766:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000976a:	431a      	orrs	r2, r3
9000976c:	687b      	ldr	r3, [r7, #4]
9000976e:	691b      	ldr	r3, [r3, #16]
90009770:	3b01      	subs	r3, #1
90009772:	061b      	lsls	r3, r3, #24
90009774:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009778:	4931      	ldr	r1, [pc, #196]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
9000977a:	4313      	orrs	r3, r2
9000977c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000977e:	4b30      	ldr	r3, [pc, #192]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009782:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
90009786:	687b      	ldr	r3, [r7, #4]
90009788:	695b      	ldr	r3, [r3, #20]
9000978a:	492d      	ldr	r1, [pc, #180]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
9000978c:	4313      	orrs	r3, r2
9000978e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90009790:	4b2b      	ldr	r3, [pc, #172]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009794:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90009798:	687b      	ldr	r3, [r7, #4]
9000979a:	699b      	ldr	r3, [r3, #24]
9000979c:	4928      	ldr	r1, [pc, #160]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
9000979e:	4313      	orrs	r3, r2
900097a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900097a2:	4b27      	ldr	r3, [pc, #156]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097a6:	4a26      	ldr	r2, [pc, #152]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
900097ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
900097ae:	4b24      	ldr	r3, [pc, #144]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
900097b2:	4b24      	ldr	r3, [pc, #144]	@ (90009844 <RCCEx_PLL3_Config+0x160>)
900097b4:	4013      	ands	r3, r2
900097b6:	687a      	ldr	r2, [r7, #4]
900097b8:	69d2      	ldr	r2, [r2, #28]
900097ba:	00d2      	lsls	r2, r2, #3
900097bc:	4920      	ldr	r1, [pc, #128]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097be:	4313      	orrs	r3, r2
900097c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
900097c2:	4b1f      	ldr	r3, [pc, #124]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097c6:	4a1e      	ldr	r2, [pc, #120]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900097cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900097ce:	683b      	ldr	r3, [r7, #0]
900097d0:	2b00      	cmp	r3, #0
900097d2:	d106      	bne.n	900097e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
900097d4:	4b1a      	ldr	r3, [pc, #104]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097d8:	4a19      	ldr	r2, [pc, #100]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
900097de:	62d3      	str	r3, [r2, #44]	@ 0x2c
900097e0:	e00f      	b.n	90009802 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900097e2:	683b      	ldr	r3, [r7, #0]
900097e4:	2b01      	cmp	r3, #1
900097e6:	d106      	bne.n	900097f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
900097e8:	4b15      	ldr	r3, [pc, #84]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097ec:	4a14      	ldr	r2, [pc, #80]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
900097f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
900097f4:	e005      	b.n	90009802 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
900097f6:	4b12      	ldr	r3, [pc, #72]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097fa:	4a11      	ldr	r2, [pc, #68]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
900097fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90009800:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90009802:	4b0f      	ldr	r3, [pc, #60]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009804:	681b      	ldr	r3, [r3, #0]
90009806:	4a0e      	ldr	r2, [pc, #56]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
90009808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
9000980c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000980e:	f7f9 fd61 	bl	900032d4 <HAL_GetTick>
90009812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009814:	e008      	b.n	90009828 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009816:	f7f9 fd5d 	bl	900032d4 <HAL_GetTick>
9000981a:	4602      	mov	r2, r0
9000981c:	68bb      	ldr	r3, [r7, #8]
9000981e:	1ad3      	subs	r3, r2, r3
90009820:	2b02      	cmp	r3, #2
90009822:	d901      	bls.n	90009828 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90009824:	2303      	movs	r3, #3
90009826:	e006      	b.n	90009836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009828:	4b05      	ldr	r3, [pc, #20]	@ (90009840 <RCCEx_PLL3_Config+0x15c>)
9000982a:	681b      	ldr	r3, [r3, #0]
9000982c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009830:	2b00      	cmp	r3, #0
90009832:	d0f0      	beq.n	90009816 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90009834:	7bfb      	ldrb	r3, [r7, #15]
}
90009836:	4618      	mov	r0, r3
90009838:	3710      	adds	r7, #16
9000983a:	46bd      	mov	sp, r7
9000983c:	bd80      	pop	{r7, pc}
9000983e:	bf00      	nop
90009840:	58024400 	.word	0x58024400
90009844:	ffff0007 	.word	0xffff0007

90009848 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009848:	b580      	push	{r7, lr}
9000984a:	b082      	sub	sp, #8
9000984c:	af00      	add	r7, sp, #0
9000984e:	6078      	str	r0, [r7, #4]
90009850:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
90009852:	687b      	ldr	r3, [r7, #4]
90009854:	2b00      	cmp	r3, #0
90009856:	d101      	bne.n	9000985c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90009858:	2301      	movs	r3, #1
9000985a:	e02b      	b.n	900098b4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000985c:	687b      	ldr	r3, [r7, #4]
9000985e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009862:	b2db      	uxtb	r3, r3
90009864:	2b00      	cmp	r3, #0
90009866:	d106      	bne.n	90009876 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90009868:	687b      	ldr	r3, [r7, #4]
9000986a:	2200      	movs	r2, #0
9000986c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90009870:	6878      	ldr	r0, [r7, #4]
90009872:	f000 f825 	bl	900098c0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90009876:	687b      	ldr	r3, [r7, #4]
90009878:	2202      	movs	r2, #2
9000987a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000987e:	687b      	ldr	r3, [r7, #4]
90009880:	681a      	ldr	r2, [r3, #0]
90009882:	687b      	ldr	r3, [r7, #4]
90009884:	3304      	adds	r3, #4
90009886:	4619      	mov	r1, r3
90009888:	4610      	mov	r0, r2
9000988a:	f001 fb51 	bl	9000af30 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000988e:	687b      	ldr	r3, [r7, #4]
90009890:	6818      	ldr	r0, [r3, #0]
90009892:	687b      	ldr	r3, [r7, #4]
90009894:	685b      	ldr	r3, [r3, #4]
90009896:	461a      	mov	r2, r3
90009898:	6839      	ldr	r1, [r7, #0]
9000989a:	f001 fba5 	bl	9000afe8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000989e:	4b07      	ldr	r3, [pc, #28]	@ (900098bc <HAL_SDRAM_Init+0x74>)
900098a0:	681b      	ldr	r3, [r3, #0]
900098a2:	4a06      	ldr	r2, [pc, #24]	@ (900098bc <HAL_SDRAM_Init+0x74>)
900098a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900098a8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900098aa:	687b      	ldr	r3, [r7, #4]
900098ac:	2201      	movs	r2, #1
900098ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
900098b2:	2300      	movs	r3, #0
}
900098b4:	4618      	mov	r0, r3
900098b6:	3708      	adds	r7, #8
900098b8:	46bd      	mov	sp, r7
900098ba:	bd80      	pop	{r7, pc}
900098bc:	52004000 	.word	0x52004000

900098c0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
900098c0:	b480      	push	{r7}
900098c2:	b083      	sub	sp, #12
900098c4:	af00      	add	r7, sp, #0
900098c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
900098c8:	bf00      	nop
900098ca:	370c      	adds	r7, #12
900098cc:	46bd      	mov	sp, r7
900098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
900098d2:	4770      	bx	lr

900098d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
900098d4:	b580      	push	{r7, lr}
900098d6:	b086      	sub	sp, #24
900098d8:	af00      	add	r7, sp, #0
900098da:	60f8      	str	r0, [r7, #12]
900098dc:	60b9      	str	r1, [r7, #8]
900098de:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
900098e0:	68fb      	ldr	r3, [r7, #12]
900098e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900098e6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900098e8:	7dfb      	ldrb	r3, [r7, #23]
900098ea:	2b02      	cmp	r3, #2
900098ec:	d101      	bne.n	900098f2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
900098ee:	2302      	movs	r3, #2
900098f0:	e021      	b.n	90009936 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
900098f2:	7dfb      	ldrb	r3, [r7, #23]
900098f4:	2b01      	cmp	r3, #1
900098f6:	d002      	beq.n	900098fe <HAL_SDRAM_SendCommand+0x2a>
900098f8:	7dfb      	ldrb	r3, [r7, #23]
900098fa:	2b05      	cmp	r3, #5
900098fc:	d118      	bne.n	90009930 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900098fe:	68fb      	ldr	r3, [r7, #12]
90009900:	2202      	movs	r2, #2
90009902:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90009906:	68fb      	ldr	r3, [r7, #12]
90009908:	681b      	ldr	r3, [r3, #0]
9000990a:	687a      	ldr	r2, [r7, #4]
9000990c:	68b9      	ldr	r1, [r7, #8]
9000990e:	4618      	mov	r0, r3
90009910:	f001 fbd4 	bl	9000b0bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009914:	68bb      	ldr	r3, [r7, #8]
90009916:	681b      	ldr	r3, [r3, #0]
90009918:	2b02      	cmp	r3, #2
9000991a:	d104      	bne.n	90009926 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000991c:	68fb      	ldr	r3, [r7, #12]
9000991e:	2205      	movs	r2, #5
90009920:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009924:	e006      	b.n	90009934 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
90009926:	68fb      	ldr	r3, [r7, #12]
90009928:	2201      	movs	r2, #1
9000992a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000992e:	e001      	b.n	90009934 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90009930:	2301      	movs	r3, #1
90009932:	e000      	b.n	90009936 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90009934:	2300      	movs	r3, #0
}
90009936:	4618      	mov	r0, r3
90009938:	3718      	adds	r7, #24
9000993a:	46bd      	mov	sp, r7
9000993c:	bd80      	pop	{r7, pc}

9000993e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000993e:	b580      	push	{r7, lr}
90009940:	b082      	sub	sp, #8
90009942:	af00      	add	r7, sp, #0
90009944:	6078      	str	r0, [r7, #4]
90009946:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009948:	687b      	ldr	r3, [r7, #4]
9000994a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000994e:	b2db      	uxtb	r3, r3
90009950:	2b02      	cmp	r3, #2
90009952:	d101      	bne.n	90009958 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90009954:	2302      	movs	r3, #2
90009956:	e016      	b.n	90009986 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90009958:	687b      	ldr	r3, [r7, #4]
9000995a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000995e:	b2db      	uxtb	r3, r3
90009960:	2b01      	cmp	r3, #1
90009962:	d10f      	bne.n	90009984 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009964:	687b      	ldr	r3, [r7, #4]
90009966:	2202      	movs	r2, #2
90009968:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000996c:	687b      	ldr	r3, [r7, #4]
9000996e:	681b      	ldr	r3, [r3, #0]
90009970:	6839      	ldr	r1, [r7, #0]
90009972:	4618      	mov	r0, r3
90009974:	f001 fbc6 	bl	9000b104 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90009978:	687b      	ldr	r3, [r7, #4]
9000997a:	2201      	movs	r2, #1
9000997c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90009980:	2300      	movs	r3, #0
90009982:	e000      	b.n	90009986 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90009984:	2301      	movs	r3, #1
}
90009986:	4618      	mov	r0, r3
90009988:	3708      	adds	r7, #8
9000998a:	46bd      	mov	sp, r7
9000998c:	bd80      	pop	{r7, pc}

9000998e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
9000998e:	b580      	push	{r7, lr}
90009990:	b082      	sub	sp, #8
90009992:	af00      	add	r7, sp, #0
90009994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90009996:	687b      	ldr	r3, [r7, #4]
90009998:	2b00      	cmp	r3, #0
9000999a:	d101      	bne.n	900099a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
9000999c:	2301      	movs	r3, #1
9000999e:	e049      	b.n	90009a34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900099a0:	687b      	ldr	r3, [r7, #4]
900099a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
900099a6:	b2db      	uxtb	r3, r3
900099a8:	2b00      	cmp	r3, #0
900099aa:	d106      	bne.n	900099ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
900099ac:	687b      	ldr	r3, [r7, #4]
900099ae:	2200      	movs	r2, #0
900099b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
900099b4:	6878      	ldr	r0, [r7, #4]
900099b6:	f000 f89d 	bl	90009af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900099ba:	687b      	ldr	r3, [r7, #4]
900099bc:	2202      	movs	r2, #2
900099be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900099c2:	687b      	ldr	r3, [r7, #4]
900099c4:	681a      	ldr	r2, [r3, #0]
900099c6:	687b      	ldr	r3, [r7, #4]
900099c8:	3304      	adds	r3, #4
900099ca:	4619      	mov	r1, r3
900099cc:	4610      	mov	r0, r2
900099ce:	f000 f8a5 	bl	90009b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
900099d2:	687b      	ldr	r3, [r7, #4]
900099d4:	2201      	movs	r2, #1
900099d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900099da:	687b      	ldr	r3, [r7, #4]
900099dc:	2201      	movs	r2, #1
900099de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900099e2:	687b      	ldr	r3, [r7, #4]
900099e4:	2201      	movs	r2, #1
900099e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900099ea:	687b      	ldr	r3, [r7, #4]
900099ec:	2201      	movs	r2, #1
900099ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900099f2:	687b      	ldr	r3, [r7, #4]
900099f4:	2201      	movs	r2, #1
900099f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
900099fa:	687b      	ldr	r3, [r7, #4]
900099fc:	2201      	movs	r2, #1
900099fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009a02:	687b      	ldr	r3, [r7, #4]
90009a04:	2201      	movs	r2, #1
90009a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009a0a:	687b      	ldr	r3, [r7, #4]
90009a0c:	2201      	movs	r2, #1
90009a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009a12:	687b      	ldr	r3, [r7, #4]
90009a14:	2201      	movs	r2, #1
90009a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009a1a:	687b      	ldr	r3, [r7, #4]
90009a1c:	2201      	movs	r2, #1
90009a1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009a22:	687b      	ldr	r3, [r7, #4]
90009a24:	2201      	movs	r2, #1
90009a26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009a2a:	687b      	ldr	r3, [r7, #4]
90009a2c:	2201      	movs	r2, #1
90009a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90009a32:	2300      	movs	r3, #0
}
90009a34:	4618      	mov	r0, r3
90009a36:	3708      	adds	r7, #8
90009a38:	46bd      	mov	sp, r7
90009a3a:	bd80      	pop	{r7, pc}

90009a3c <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009a3c:	b580      	push	{r7, lr}
90009a3e:	b082      	sub	sp, #8
90009a40:	af00      	add	r7, sp, #0
90009a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
90009a44:	687b      	ldr	r3, [r7, #4]
90009a46:	2202      	movs	r2, #2
90009a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009a4c:	687b      	ldr	r3, [r7, #4]
90009a4e:	681b      	ldr	r3, [r3, #0]
90009a50:	6a1a      	ldr	r2, [r3, #32]
90009a52:	f241 1311 	movw	r3, #4369	@ 0x1111
90009a56:	4013      	ands	r3, r2
90009a58:	2b00      	cmp	r3, #0
90009a5a:	d10f      	bne.n	90009a7c <HAL_TIM_PWM_DeInit+0x40>
90009a5c:	687b      	ldr	r3, [r7, #4]
90009a5e:	681b      	ldr	r3, [r3, #0]
90009a60:	6a1a      	ldr	r2, [r3, #32]
90009a62:	f240 4344 	movw	r3, #1092	@ 0x444
90009a66:	4013      	ands	r3, r2
90009a68:	2b00      	cmp	r3, #0
90009a6a:	d107      	bne.n	90009a7c <HAL_TIM_PWM_DeInit+0x40>
90009a6c:	687b      	ldr	r3, [r7, #4]
90009a6e:	681b      	ldr	r3, [r3, #0]
90009a70:	681a      	ldr	r2, [r3, #0]
90009a72:	687b      	ldr	r3, [r7, #4]
90009a74:	681b      	ldr	r3, [r3, #0]
90009a76:	f022 0201 	bic.w	r2, r2, #1
90009a7a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
90009a7c:	6878      	ldr	r0, [r7, #4]
90009a7e:	f000 f843 	bl	90009b08 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
90009a82:	687b      	ldr	r3, [r7, #4]
90009a84:	2200      	movs	r2, #0
90009a86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009a8a:	687b      	ldr	r3, [r7, #4]
90009a8c:	2200      	movs	r2, #0
90009a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009a92:	687b      	ldr	r3, [r7, #4]
90009a94:	2200      	movs	r2, #0
90009a96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009a9a:	687b      	ldr	r3, [r7, #4]
90009a9c:	2200      	movs	r2, #0
90009a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009aa2:	687b      	ldr	r3, [r7, #4]
90009aa4:	2200      	movs	r2, #0
90009aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009aaa:	687b      	ldr	r3, [r7, #4]
90009aac:	2200      	movs	r2, #0
90009aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009ab2:	687b      	ldr	r3, [r7, #4]
90009ab4:	2200      	movs	r2, #0
90009ab6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009aba:	687b      	ldr	r3, [r7, #4]
90009abc:	2200      	movs	r2, #0
90009abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009ac2:	687b      	ldr	r3, [r7, #4]
90009ac4:	2200      	movs	r2, #0
90009ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009aca:	687b      	ldr	r3, [r7, #4]
90009acc:	2200      	movs	r2, #0
90009ace:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009ad2:	687b      	ldr	r3, [r7, #4]
90009ad4:	2200      	movs	r2, #0
90009ad6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009ada:	687b      	ldr	r3, [r7, #4]
90009adc:	2200      	movs	r2, #0
90009ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
90009ae2:	687b      	ldr	r3, [r7, #4]
90009ae4:	2200      	movs	r2, #0
90009ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90009aea:	2300      	movs	r3, #0
}
90009aec:	4618      	mov	r0, r3
90009aee:	3708      	adds	r7, #8
90009af0:	46bd      	mov	sp, r7
90009af2:	bd80      	pop	{r7, pc}

90009af4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009af4:	b480      	push	{r7}
90009af6:	b083      	sub	sp, #12
90009af8:	af00      	add	r7, sp, #0
90009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009afc:	bf00      	nop
90009afe:	370c      	adds	r7, #12
90009b00:	46bd      	mov	sp, r7
90009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b06:	4770      	bx	lr

90009b08 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009b08:	b480      	push	{r7}
90009b0a:	b083      	sub	sp, #12
90009b0c:	af00      	add	r7, sp, #0
90009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009b10:	bf00      	nop
90009b12:	370c      	adds	r7, #12
90009b14:	46bd      	mov	sp, r7
90009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b1a:	4770      	bx	lr

90009b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009b1c:	b480      	push	{r7}
90009b1e:	b085      	sub	sp, #20
90009b20:	af00      	add	r7, sp, #0
90009b22:	6078      	str	r0, [r7, #4]
90009b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009b26:	687b      	ldr	r3, [r7, #4]
90009b28:	681b      	ldr	r3, [r3, #0]
90009b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009b2c:	687b      	ldr	r3, [r7, #4]
90009b2e:	4a43      	ldr	r2, [pc, #268]	@ (90009c3c <TIM_Base_SetConfig+0x120>)
90009b30:	4293      	cmp	r3, r2
90009b32:	d013      	beq.n	90009b5c <TIM_Base_SetConfig+0x40>
90009b34:	687b      	ldr	r3, [r7, #4]
90009b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009b3a:	d00f      	beq.n	90009b5c <TIM_Base_SetConfig+0x40>
90009b3c:	687b      	ldr	r3, [r7, #4]
90009b3e:	4a40      	ldr	r2, [pc, #256]	@ (90009c40 <TIM_Base_SetConfig+0x124>)
90009b40:	4293      	cmp	r3, r2
90009b42:	d00b      	beq.n	90009b5c <TIM_Base_SetConfig+0x40>
90009b44:	687b      	ldr	r3, [r7, #4]
90009b46:	4a3f      	ldr	r2, [pc, #252]	@ (90009c44 <TIM_Base_SetConfig+0x128>)
90009b48:	4293      	cmp	r3, r2
90009b4a:	d007      	beq.n	90009b5c <TIM_Base_SetConfig+0x40>
90009b4c:	687b      	ldr	r3, [r7, #4]
90009b4e:	4a3e      	ldr	r2, [pc, #248]	@ (90009c48 <TIM_Base_SetConfig+0x12c>)
90009b50:	4293      	cmp	r3, r2
90009b52:	d003      	beq.n	90009b5c <TIM_Base_SetConfig+0x40>
90009b54:	687b      	ldr	r3, [r7, #4]
90009b56:	4a3d      	ldr	r2, [pc, #244]	@ (90009c4c <TIM_Base_SetConfig+0x130>)
90009b58:	4293      	cmp	r3, r2
90009b5a:	d108      	bne.n	90009b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009b5c:	68fb      	ldr	r3, [r7, #12]
90009b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
90009b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009b64:	683b      	ldr	r3, [r7, #0]
90009b66:	685b      	ldr	r3, [r3, #4]
90009b68:	68fa      	ldr	r2, [r7, #12]
90009b6a:	4313      	orrs	r3, r2
90009b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90009b6e:	687b      	ldr	r3, [r7, #4]
90009b70:	4a32      	ldr	r2, [pc, #200]	@ (90009c3c <TIM_Base_SetConfig+0x120>)
90009b72:	4293      	cmp	r3, r2
90009b74:	d01f      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009b76:	687b      	ldr	r3, [r7, #4]
90009b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009b7c:	d01b      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009b7e:	687b      	ldr	r3, [r7, #4]
90009b80:	4a2f      	ldr	r2, [pc, #188]	@ (90009c40 <TIM_Base_SetConfig+0x124>)
90009b82:	4293      	cmp	r3, r2
90009b84:	d017      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009b86:	687b      	ldr	r3, [r7, #4]
90009b88:	4a2e      	ldr	r2, [pc, #184]	@ (90009c44 <TIM_Base_SetConfig+0x128>)
90009b8a:	4293      	cmp	r3, r2
90009b8c:	d013      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009b8e:	687b      	ldr	r3, [r7, #4]
90009b90:	4a2d      	ldr	r2, [pc, #180]	@ (90009c48 <TIM_Base_SetConfig+0x12c>)
90009b92:	4293      	cmp	r3, r2
90009b94:	d00f      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009b96:	687b      	ldr	r3, [r7, #4]
90009b98:	4a2c      	ldr	r2, [pc, #176]	@ (90009c4c <TIM_Base_SetConfig+0x130>)
90009b9a:	4293      	cmp	r3, r2
90009b9c:	d00b      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009b9e:	687b      	ldr	r3, [r7, #4]
90009ba0:	4a2b      	ldr	r2, [pc, #172]	@ (90009c50 <TIM_Base_SetConfig+0x134>)
90009ba2:	4293      	cmp	r3, r2
90009ba4:	d007      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009ba6:	687b      	ldr	r3, [r7, #4]
90009ba8:	4a2a      	ldr	r2, [pc, #168]	@ (90009c54 <TIM_Base_SetConfig+0x138>)
90009baa:	4293      	cmp	r3, r2
90009bac:	d003      	beq.n	90009bb6 <TIM_Base_SetConfig+0x9a>
90009bae:	687b      	ldr	r3, [r7, #4]
90009bb0:	4a29      	ldr	r2, [pc, #164]	@ (90009c58 <TIM_Base_SetConfig+0x13c>)
90009bb2:	4293      	cmp	r3, r2
90009bb4:	d108      	bne.n	90009bc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009bb6:	68fb      	ldr	r3, [r7, #12]
90009bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90009bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009bbe:	683b      	ldr	r3, [r7, #0]
90009bc0:	68db      	ldr	r3, [r3, #12]
90009bc2:	68fa      	ldr	r2, [r7, #12]
90009bc4:	4313      	orrs	r3, r2
90009bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009bc8:	68fb      	ldr	r3, [r7, #12]
90009bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
90009bce:	683b      	ldr	r3, [r7, #0]
90009bd0:	695b      	ldr	r3, [r3, #20]
90009bd2:	4313      	orrs	r3, r2
90009bd4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009bd6:	683b      	ldr	r3, [r7, #0]
90009bd8:	689a      	ldr	r2, [r3, #8]
90009bda:	687b      	ldr	r3, [r7, #4]
90009bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90009bde:	683b      	ldr	r3, [r7, #0]
90009be0:	681a      	ldr	r2, [r3, #0]
90009be2:	687b      	ldr	r3, [r7, #4]
90009be4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009be6:	687b      	ldr	r3, [r7, #4]
90009be8:	4a14      	ldr	r2, [pc, #80]	@ (90009c3c <TIM_Base_SetConfig+0x120>)
90009bea:	4293      	cmp	r3, r2
90009bec:	d00f      	beq.n	90009c0e <TIM_Base_SetConfig+0xf2>
90009bee:	687b      	ldr	r3, [r7, #4]
90009bf0:	4a16      	ldr	r2, [pc, #88]	@ (90009c4c <TIM_Base_SetConfig+0x130>)
90009bf2:	4293      	cmp	r3, r2
90009bf4:	d00b      	beq.n	90009c0e <TIM_Base_SetConfig+0xf2>
90009bf6:	687b      	ldr	r3, [r7, #4]
90009bf8:	4a15      	ldr	r2, [pc, #84]	@ (90009c50 <TIM_Base_SetConfig+0x134>)
90009bfa:	4293      	cmp	r3, r2
90009bfc:	d007      	beq.n	90009c0e <TIM_Base_SetConfig+0xf2>
90009bfe:	687b      	ldr	r3, [r7, #4]
90009c00:	4a14      	ldr	r2, [pc, #80]	@ (90009c54 <TIM_Base_SetConfig+0x138>)
90009c02:	4293      	cmp	r3, r2
90009c04:	d003      	beq.n	90009c0e <TIM_Base_SetConfig+0xf2>
90009c06:	687b      	ldr	r3, [r7, #4]
90009c08:	4a13      	ldr	r2, [pc, #76]	@ (90009c58 <TIM_Base_SetConfig+0x13c>)
90009c0a:	4293      	cmp	r3, r2
90009c0c:	d103      	bne.n	90009c16 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90009c0e:	683b      	ldr	r3, [r7, #0]
90009c10:	691a      	ldr	r2, [r3, #16]
90009c12:	687b      	ldr	r3, [r7, #4]
90009c14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009c16:	687b      	ldr	r3, [r7, #4]
90009c18:	681b      	ldr	r3, [r3, #0]
90009c1a:	f043 0204 	orr.w	r2, r3, #4
90009c1e:	687b      	ldr	r3, [r7, #4]
90009c20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009c22:	687b      	ldr	r3, [r7, #4]
90009c24:	2201      	movs	r2, #1
90009c26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009c28:	687b      	ldr	r3, [r7, #4]
90009c2a:	68fa      	ldr	r2, [r7, #12]
90009c2c:	601a      	str	r2, [r3, #0]
}
90009c2e:	bf00      	nop
90009c30:	3714      	adds	r7, #20
90009c32:	46bd      	mov	sp, r7
90009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
90009c38:	4770      	bx	lr
90009c3a:	bf00      	nop
90009c3c:	40010000 	.word	0x40010000
90009c40:	40000400 	.word	0x40000400
90009c44:	40000800 	.word	0x40000800
90009c48:	40000c00 	.word	0x40000c00
90009c4c:	40010400 	.word	0x40010400
90009c50:	40014000 	.word	0x40014000
90009c54:	40014400 	.word	0x40014400
90009c58:	40014800 	.word	0x40014800

90009c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009c5c:	b580      	push	{r7, lr}
90009c5e:	b082      	sub	sp, #8
90009c60:	af00      	add	r7, sp, #0
90009c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009c64:	687b      	ldr	r3, [r7, #4]
90009c66:	2b00      	cmp	r3, #0
90009c68:	d101      	bne.n	90009c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009c6a:	2301      	movs	r3, #1
90009c6c:	e042      	b.n	90009cf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009c6e:	687b      	ldr	r3, [r7, #4]
90009c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009c74:	2b00      	cmp	r3, #0
90009c76:	d106      	bne.n	90009c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009c78:	687b      	ldr	r3, [r7, #4]
90009c7a:	2200      	movs	r2, #0
90009c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009c80:	6878      	ldr	r0, [r7, #4]
90009c82:	f7f6 ff61 	bl	90000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009c86:	687b      	ldr	r3, [r7, #4]
90009c88:	2224      	movs	r2, #36	@ 0x24
90009c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009c8e:	687b      	ldr	r3, [r7, #4]
90009c90:	681b      	ldr	r3, [r3, #0]
90009c92:	681a      	ldr	r2, [r3, #0]
90009c94:	687b      	ldr	r3, [r7, #4]
90009c96:	681b      	ldr	r3, [r3, #0]
90009c98:	f022 0201 	bic.w	r2, r2, #1
90009c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009c9e:	687b      	ldr	r3, [r7, #4]
90009ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009ca2:	2b00      	cmp	r3, #0
90009ca4:	d002      	beq.n	90009cac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009ca6:	6878      	ldr	r0, [r7, #4]
90009ca8:	f000 fe1e 	bl	9000a8e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009cac:	6878      	ldr	r0, [r7, #4]
90009cae:	f000 f8b3 	bl	90009e18 <UART_SetConfig>
90009cb2:	4603      	mov	r3, r0
90009cb4:	2b01      	cmp	r3, #1
90009cb6:	d101      	bne.n	90009cbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009cb8:	2301      	movs	r3, #1
90009cba:	e01b      	b.n	90009cf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009cbc:	687b      	ldr	r3, [r7, #4]
90009cbe:	681b      	ldr	r3, [r3, #0]
90009cc0:	685a      	ldr	r2, [r3, #4]
90009cc2:	687b      	ldr	r3, [r7, #4]
90009cc4:	681b      	ldr	r3, [r3, #0]
90009cc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009ccc:	687b      	ldr	r3, [r7, #4]
90009cce:	681b      	ldr	r3, [r3, #0]
90009cd0:	689a      	ldr	r2, [r3, #8]
90009cd2:	687b      	ldr	r3, [r7, #4]
90009cd4:	681b      	ldr	r3, [r3, #0]
90009cd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009cdc:	687b      	ldr	r3, [r7, #4]
90009cde:	681b      	ldr	r3, [r3, #0]
90009ce0:	681a      	ldr	r2, [r3, #0]
90009ce2:	687b      	ldr	r3, [r7, #4]
90009ce4:	681b      	ldr	r3, [r3, #0]
90009ce6:	f042 0201 	orr.w	r2, r2, #1
90009cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009cec:	6878      	ldr	r0, [r7, #4]
90009cee:	f000 fe9d 	bl	9000aa2c <UART_CheckIdleState>
90009cf2:	4603      	mov	r3, r0
}
90009cf4:	4618      	mov	r0, r3
90009cf6:	3708      	adds	r7, #8
90009cf8:	46bd      	mov	sp, r7
90009cfa:	bd80      	pop	{r7, pc}

90009cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009cfc:	b580      	push	{r7, lr}
90009cfe:	b08a      	sub	sp, #40	@ 0x28
90009d00:	af02      	add	r7, sp, #8
90009d02:	60f8      	str	r0, [r7, #12]
90009d04:	60b9      	str	r1, [r7, #8]
90009d06:	603b      	str	r3, [r7, #0]
90009d08:	4613      	mov	r3, r2
90009d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009d0c:	68fb      	ldr	r3, [r7, #12]
90009d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009d12:	2b20      	cmp	r3, #32
90009d14:	d17b      	bne.n	90009e0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009d16:	68bb      	ldr	r3, [r7, #8]
90009d18:	2b00      	cmp	r3, #0
90009d1a:	d002      	beq.n	90009d22 <HAL_UART_Transmit+0x26>
90009d1c:	88fb      	ldrh	r3, [r7, #6]
90009d1e:	2b00      	cmp	r3, #0
90009d20:	d101      	bne.n	90009d26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009d22:	2301      	movs	r3, #1
90009d24:	e074      	b.n	90009e10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009d26:	68fb      	ldr	r3, [r7, #12]
90009d28:	2200      	movs	r2, #0
90009d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009d2e:	68fb      	ldr	r3, [r7, #12]
90009d30:	2221      	movs	r2, #33	@ 0x21
90009d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009d36:	f7f9 facd 	bl	900032d4 <HAL_GetTick>
90009d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009d3c:	68fb      	ldr	r3, [r7, #12]
90009d3e:	88fa      	ldrh	r2, [r7, #6]
90009d40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009d44:	68fb      	ldr	r3, [r7, #12]
90009d46:	88fa      	ldrh	r2, [r7, #6]
90009d48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009d4c:	68fb      	ldr	r3, [r7, #12]
90009d4e:	689b      	ldr	r3, [r3, #8]
90009d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009d54:	d108      	bne.n	90009d68 <HAL_UART_Transmit+0x6c>
90009d56:	68fb      	ldr	r3, [r7, #12]
90009d58:	691b      	ldr	r3, [r3, #16]
90009d5a:	2b00      	cmp	r3, #0
90009d5c:	d104      	bne.n	90009d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009d5e:	2300      	movs	r3, #0
90009d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009d62:	68bb      	ldr	r3, [r7, #8]
90009d64:	61bb      	str	r3, [r7, #24]
90009d66:	e003      	b.n	90009d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009d68:	68bb      	ldr	r3, [r7, #8]
90009d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009d6c:	2300      	movs	r3, #0
90009d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009d70:	e030      	b.n	90009dd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009d72:	683b      	ldr	r3, [r7, #0]
90009d74:	9300      	str	r3, [sp, #0]
90009d76:	697b      	ldr	r3, [r7, #20]
90009d78:	2200      	movs	r2, #0
90009d7a:	2180      	movs	r1, #128	@ 0x80
90009d7c:	68f8      	ldr	r0, [r7, #12]
90009d7e:	f000 feff 	bl	9000ab80 <UART_WaitOnFlagUntilTimeout>
90009d82:	4603      	mov	r3, r0
90009d84:	2b00      	cmp	r3, #0
90009d86:	d005      	beq.n	90009d94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009d88:	68fb      	ldr	r3, [r7, #12]
90009d8a:	2220      	movs	r2, #32
90009d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009d90:	2303      	movs	r3, #3
90009d92:	e03d      	b.n	90009e10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009d94:	69fb      	ldr	r3, [r7, #28]
90009d96:	2b00      	cmp	r3, #0
90009d98:	d10b      	bne.n	90009db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009d9a:	69bb      	ldr	r3, [r7, #24]
90009d9c:	881b      	ldrh	r3, [r3, #0]
90009d9e:	461a      	mov	r2, r3
90009da0:	68fb      	ldr	r3, [r7, #12]
90009da2:	681b      	ldr	r3, [r3, #0]
90009da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009da8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009daa:	69bb      	ldr	r3, [r7, #24]
90009dac:	3302      	adds	r3, #2
90009dae:	61bb      	str	r3, [r7, #24]
90009db0:	e007      	b.n	90009dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009db2:	69fb      	ldr	r3, [r7, #28]
90009db4:	781a      	ldrb	r2, [r3, #0]
90009db6:	68fb      	ldr	r3, [r7, #12]
90009db8:	681b      	ldr	r3, [r3, #0]
90009dba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009dbc:	69fb      	ldr	r3, [r7, #28]
90009dbe:	3301      	adds	r3, #1
90009dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009dc2:	68fb      	ldr	r3, [r7, #12]
90009dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009dc8:	b29b      	uxth	r3, r3
90009dca:	3b01      	subs	r3, #1
90009dcc:	b29a      	uxth	r2, r3
90009dce:	68fb      	ldr	r3, [r7, #12]
90009dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009dd4:	68fb      	ldr	r3, [r7, #12]
90009dd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009dda:	b29b      	uxth	r3, r3
90009ddc:	2b00      	cmp	r3, #0
90009dde:	d1c8      	bne.n	90009d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009de0:	683b      	ldr	r3, [r7, #0]
90009de2:	9300      	str	r3, [sp, #0]
90009de4:	697b      	ldr	r3, [r7, #20]
90009de6:	2200      	movs	r2, #0
90009de8:	2140      	movs	r1, #64	@ 0x40
90009dea:	68f8      	ldr	r0, [r7, #12]
90009dec:	f000 fec8 	bl	9000ab80 <UART_WaitOnFlagUntilTimeout>
90009df0:	4603      	mov	r3, r0
90009df2:	2b00      	cmp	r3, #0
90009df4:	d005      	beq.n	90009e02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009df6:	68fb      	ldr	r3, [r7, #12]
90009df8:	2220      	movs	r2, #32
90009dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009dfe:	2303      	movs	r3, #3
90009e00:	e006      	b.n	90009e10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009e02:	68fb      	ldr	r3, [r7, #12]
90009e04:	2220      	movs	r2, #32
90009e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009e0a:	2300      	movs	r3, #0
90009e0c:	e000      	b.n	90009e10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009e0e:	2302      	movs	r3, #2
  }
}
90009e10:	4618      	mov	r0, r3
90009e12:	3720      	adds	r7, #32
90009e14:	46bd      	mov	sp, r7
90009e16:	bd80      	pop	{r7, pc}

90009e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009e1c:	b092      	sub	sp, #72	@ 0x48
90009e1e:	af00      	add	r7, sp, #0
90009e20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009e22:	2300      	movs	r3, #0
90009e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009e28:	697b      	ldr	r3, [r7, #20]
90009e2a:	689a      	ldr	r2, [r3, #8]
90009e2c:	697b      	ldr	r3, [r7, #20]
90009e2e:	691b      	ldr	r3, [r3, #16]
90009e30:	431a      	orrs	r2, r3
90009e32:	697b      	ldr	r3, [r7, #20]
90009e34:	695b      	ldr	r3, [r3, #20]
90009e36:	431a      	orrs	r2, r3
90009e38:	697b      	ldr	r3, [r7, #20]
90009e3a:	69db      	ldr	r3, [r3, #28]
90009e3c:	4313      	orrs	r3, r2
90009e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009e40:	697b      	ldr	r3, [r7, #20]
90009e42:	681b      	ldr	r3, [r3, #0]
90009e44:	681a      	ldr	r2, [r3, #0]
90009e46:	4bbe      	ldr	r3, [pc, #760]	@ (9000a140 <UART_SetConfig+0x328>)
90009e48:	4013      	ands	r3, r2
90009e4a:	697a      	ldr	r2, [r7, #20]
90009e4c:	6812      	ldr	r2, [r2, #0]
90009e4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009e50:	430b      	orrs	r3, r1
90009e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009e54:	697b      	ldr	r3, [r7, #20]
90009e56:	681b      	ldr	r3, [r3, #0]
90009e58:	685b      	ldr	r3, [r3, #4]
90009e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009e5e:	697b      	ldr	r3, [r7, #20]
90009e60:	68da      	ldr	r2, [r3, #12]
90009e62:	697b      	ldr	r3, [r7, #20]
90009e64:	681b      	ldr	r3, [r3, #0]
90009e66:	430a      	orrs	r2, r1
90009e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009e6a:	697b      	ldr	r3, [r7, #20]
90009e6c:	699b      	ldr	r3, [r3, #24]
90009e6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009e70:	697b      	ldr	r3, [r7, #20]
90009e72:	681b      	ldr	r3, [r3, #0]
90009e74:	4ab3      	ldr	r2, [pc, #716]	@ (9000a144 <UART_SetConfig+0x32c>)
90009e76:	4293      	cmp	r3, r2
90009e78:	d004      	beq.n	90009e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009e7a:	697b      	ldr	r3, [r7, #20]
90009e7c:	6a1b      	ldr	r3, [r3, #32]
90009e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009e80:	4313      	orrs	r3, r2
90009e82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009e84:	697b      	ldr	r3, [r7, #20]
90009e86:	681b      	ldr	r3, [r3, #0]
90009e88:	689a      	ldr	r2, [r3, #8]
90009e8a:	4baf      	ldr	r3, [pc, #700]	@ (9000a148 <UART_SetConfig+0x330>)
90009e8c:	4013      	ands	r3, r2
90009e8e:	697a      	ldr	r2, [r7, #20]
90009e90:	6812      	ldr	r2, [r2, #0]
90009e92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009e94:	430b      	orrs	r3, r1
90009e96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009e98:	697b      	ldr	r3, [r7, #20]
90009e9a:	681b      	ldr	r3, [r3, #0]
90009e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009e9e:	f023 010f 	bic.w	r1, r3, #15
90009ea2:	697b      	ldr	r3, [r7, #20]
90009ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009ea6:	697b      	ldr	r3, [r7, #20]
90009ea8:	681b      	ldr	r3, [r3, #0]
90009eaa:	430a      	orrs	r2, r1
90009eac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009eae:	697b      	ldr	r3, [r7, #20]
90009eb0:	681b      	ldr	r3, [r3, #0]
90009eb2:	4aa6      	ldr	r2, [pc, #664]	@ (9000a14c <UART_SetConfig+0x334>)
90009eb4:	4293      	cmp	r3, r2
90009eb6:	d177      	bne.n	90009fa8 <UART_SetConfig+0x190>
90009eb8:	4ba5      	ldr	r3, [pc, #660]	@ (9000a150 <UART_SetConfig+0x338>)
90009eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009ec0:	2b28      	cmp	r3, #40	@ 0x28
90009ec2:	d86d      	bhi.n	90009fa0 <UART_SetConfig+0x188>
90009ec4:	a201      	add	r2, pc, #4	@ (adr r2, 90009ecc <UART_SetConfig+0xb4>)
90009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009eca:	bf00      	nop
90009ecc:	90009f71 	.word	0x90009f71
90009ed0:	90009fa1 	.word	0x90009fa1
90009ed4:	90009fa1 	.word	0x90009fa1
90009ed8:	90009fa1 	.word	0x90009fa1
90009edc:	90009fa1 	.word	0x90009fa1
90009ee0:	90009fa1 	.word	0x90009fa1
90009ee4:	90009fa1 	.word	0x90009fa1
90009ee8:	90009fa1 	.word	0x90009fa1
90009eec:	90009f79 	.word	0x90009f79
90009ef0:	90009fa1 	.word	0x90009fa1
90009ef4:	90009fa1 	.word	0x90009fa1
90009ef8:	90009fa1 	.word	0x90009fa1
90009efc:	90009fa1 	.word	0x90009fa1
90009f00:	90009fa1 	.word	0x90009fa1
90009f04:	90009fa1 	.word	0x90009fa1
90009f08:	90009fa1 	.word	0x90009fa1
90009f0c:	90009f81 	.word	0x90009f81
90009f10:	90009fa1 	.word	0x90009fa1
90009f14:	90009fa1 	.word	0x90009fa1
90009f18:	90009fa1 	.word	0x90009fa1
90009f1c:	90009fa1 	.word	0x90009fa1
90009f20:	90009fa1 	.word	0x90009fa1
90009f24:	90009fa1 	.word	0x90009fa1
90009f28:	90009fa1 	.word	0x90009fa1
90009f2c:	90009f89 	.word	0x90009f89
90009f30:	90009fa1 	.word	0x90009fa1
90009f34:	90009fa1 	.word	0x90009fa1
90009f38:	90009fa1 	.word	0x90009fa1
90009f3c:	90009fa1 	.word	0x90009fa1
90009f40:	90009fa1 	.word	0x90009fa1
90009f44:	90009fa1 	.word	0x90009fa1
90009f48:	90009fa1 	.word	0x90009fa1
90009f4c:	90009f91 	.word	0x90009f91
90009f50:	90009fa1 	.word	0x90009fa1
90009f54:	90009fa1 	.word	0x90009fa1
90009f58:	90009fa1 	.word	0x90009fa1
90009f5c:	90009fa1 	.word	0x90009fa1
90009f60:	90009fa1 	.word	0x90009fa1
90009f64:	90009fa1 	.word	0x90009fa1
90009f68:	90009fa1 	.word	0x90009fa1
90009f6c:	90009f99 	.word	0x90009f99
90009f70:	2301      	movs	r3, #1
90009f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f76:	e222      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009f78:	2304      	movs	r3, #4
90009f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f7e:	e21e      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009f80:	2308      	movs	r3, #8
90009f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f86:	e21a      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009f88:	2310      	movs	r3, #16
90009f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f8e:	e216      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009f90:	2320      	movs	r3, #32
90009f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f96:	e212      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009f98:	2340      	movs	r3, #64	@ 0x40
90009f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f9e:	e20e      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009fa0:	2380      	movs	r3, #128	@ 0x80
90009fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fa6:	e20a      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009fa8:	697b      	ldr	r3, [r7, #20]
90009faa:	681b      	ldr	r3, [r3, #0]
90009fac:	4a69      	ldr	r2, [pc, #420]	@ (9000a154 <UART_SetConfig+0x33c>)
90009fae:	4293      	cmp	r3, r2
90009fb0:	d130      	bne.n	9000a014 <UART_SetConfig+0x1fc>
90009fb2:	4b67      	ldr	r3, [pc, #412]	@ (9000a150 <UART_SetConfig+0x338>)
90009fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009fb6:	f003 0307 	and.w	r3, r3, #7
90009fba:	2b05      	cmp	r3, #5
90009fbc:	d826      	bhi.n	9000a00c <UART_SetConfig+0x1f4>
90009fbe:	a201      	add	r2, pc, #4	@ (adr r2, 90009fc4 <UART_SetConfig+0x1ac>)
90009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009fc4:	90009fdd 	.word	0x90009fdd
90009fc8:	90009fe5 	.word	0x90009fe5
90009fcc:	90009fed 	.word	0x90009fed
90009fd0:	90009ff5 	.word	0x90009ff5
90009fd4:	90009ffd 	.word	0x90009ffd
90009fd8:	9000a005 	.word	0x9000a005
90009fdc:	2300      	movs	r3, #0
90009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fe2:	e1ec      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009fe4:	2304      	movs	r3, #4
90009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fea:	e1e8      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009fec:	2308      	movs	r3, #8
90009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ff2:	e1e4      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009ff4:	2310      	movs	r3, #16
90009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ffa:	e1e0      	b.n	9000a3be <UART_SetConfig+0x5a6>
90009ffc:	2320      	movs	r3, #32
90009ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a002:	e1dc      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a004:	2340      	movs	r3, #64	@ 0x40
9000a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a00a:	e1d8      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a00c:	2380      	movs	r3, #128	@ 0x80
9000a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a012:	e1d4      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a014:	697b      	ldr	r3, [r7, #20]
9000a016:	681b      	ldr	r3, [r3, #0]
9000a018:	4a4f      	ldr	r2, [pc, #316]	@ (9000a158 <UART_SetConfig+0x340>)
9000a01a:	4293      	cmp	r3, r2
9000a01c:	d130      	bne.n	9000a080 <UART_SetConfig+0x268>
9000a01e:	4b4c      	ldr	r3, [pc, #304]	@ (9000a150 <UART_SetConfig+0x338>)
9000a020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a022:	f003 0307 	and.w	r3, r3, #7
9000a026:	2b05      	cmp	r3, #5
9000a028:	d826      	bhi.n	9000a078 <UART_SetConfig+0x260>
9000a02a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a030 <UART_SetConfig+0x218>)
9000a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a030:	9000a049 	.word	0x9000a049
9000a034:	9000a051 	.word	0x9000a051
9000a038:	9000a059 	.word	0x9000a059
9000a03c:	9000a061 	.word	0x9000a061
9000a040:	9000a069 	.word	0x9000a069
9000a044:	9000a071 	.word	0x9000a071
9000a048:	2300      	movs	r3, #0
9000a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a04e:	e1b6      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a050:	2304      	movs	r3, #4
9000a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a056:	e1b2      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a058:	2308      	movs	r3, #8
9000a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a05e:	e1ae      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a060:	2310      	movs	r3, #16
9000a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a066:	e1aa      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a068:	2320      	movs	r3, #32
9000a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a06e:	e1a6      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a070:	2340      	movs	r3, #64	@ 0x40
9000a072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a076:	e1a2      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a078:	2380      	movs	r3, #128	@ 0x80
9000a07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a07e:	e19e      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a080:	697b      	ldr	r3, [r7, #20]
9000a082:	681b      	ldr	r3, [r3, #0]
9000a084:	4a35      	ldr	r2, [pc, #212]	@ (9000a15c <UART_SetConfig+0x344>)
9000a086:	4293      	cmp	r3, r2
9000a088:	d130      	bne.n	9000a0ec <UART_SetConfig+0x2d4>
9000a08a:	4b31      	ldr	r3, [pc, #196]	@ (9000a150 <UART_SetConfig+0x338>)
9000a08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a08e:	f003 0307 	and.w	r3, r3, #7
9000a092:	2b05      	cmp	r3, #5
9000a094:	d826      	bhi.n	9000a0e4 <UART_SetConfig+0x2cc>
9000a096:	a201      	add	r2, pc, #4	@ (adr r2, 9000a09c <UART_SetConfig+0x284>)
9000a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a09c:	9000a0b5 	.word	0x9000a0b5
9000a0a0:	9000a0bd 	.word	0x9000a0bd
9000a0a4:	9000a0c5 	.word	0x9000a0c5
9000a0a8:	9000a0cd 	.word	0x9000a0cd
9000a0ac:	9000a0d5 	.word	0x9000a0d5
9000a0b0:	9000a0dd 	.word	0x9000a0dd
9000a0b4:	2300      	movs	r3, #0
9000a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ba:	e180      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a0bc:	2304      	movs	r3, #4
9000a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0c2:	e17c      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a0c4:	2308      	movs	r3, #8
9000a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ca:	e178      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a0cc:	2310      	movs	r3, #16
9000a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0d2:	e174      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a0d4:	2320      	movs	r3, #32
9000a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0da:	e170      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a0dc:	2340      	movs	r3, #64	@ 0x40
9000a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0e2:	e16c      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a0e4:	2380      	movs	r3, #128	@ 0x80
9000a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ea:	e168      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a0ec:	697b      	ldr	r3, [r7, #20]
9000a0ee:	681b      	ldr	r3, [r3, #0]
9000a0f0:	4a1b      	ldr	r2, [pc, #108]	@ (9000a160 <UART_SetConfig+0x348>)
9000a0f2:	4293      	cmp	r3, r2
9000a0f4:	d142      	bne.n	9000a17c <UART_SetConfig+0x364>
9000a0f6:	4b16      	ldr	r3, [pc, #88]	@ (9000a150 <UART_SetConfig+0x338>)
9000a0f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a0fa:	f003 0307 	and.w	r3, r3, #7
9000a0fe:	2b05      	cmp	r3, #5
9000a100:	d838      	bhi.n	9000a174 <UART_SetConfig+0x35c>
9000a102:	a201      	add	r2, pc, #4	@ (adr r2, 9000a108 <UART_SetConfig+0x2f0>)
9000a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a108:	9000a121 	.word	0x9000a121
9000a10c:	9000a129 	.word	0x9000a129
9000a110:	9000a131 	.word	0x9000a131
9000a114:	9000a139 	.word	0x9000a139
9000a118:	9000a165 	.word	0x9000a165
9000a11c:	9000a16d 	.word	0x9000a16d
9000a120:	2300      	movs	r3, #0
9000a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a126:	e14a      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a128:	2304      	movs	r3, #4
9000a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a12e:	e146      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a130:	2308      	movs	r3, #8
9000a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a136:	e142      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a138:	2310      	movs	r3, #16
9000a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a13e:	e13e      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a140:	cfff69f3 	.word	0xcfff69f3
9000a144:	58000c00 	.word	0x58000c00
9000a148:	11fff4ff 	.word	0x11fff4ff
9000a14c:	40011000 	.word	0x40011000
9000a150:	58024400 	.word	0x58024400
9000a154:	40004400 	.word	0x40004400
9000a158:	40004800 	.word	0x40004800
9000a15c:	40004c00 	.word	0x40004c00
9000a160:	40005000 	.word	0x40005000
9000a164:	2320      	movs	r3, #32
9000a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a16a:	e128      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a16c:	2340      	movs	r3, #64	@ 0x40
9000a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a172:	e124      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a174:	2380      	movs	r3, #128	@ 0x80
9000a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a17a:	e120      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a17c:	697b      	ldr	r3, [r7, #20]
9000a17e:	681b      	ldr	r3, [r3, #0]
9000a180:	4acb      	ldr	r2, [pc, #812]	@ (9000a4b0 <UART_SetConfig+0x698>)
9000a182:	4293      	cmp	r3, r2
9000a184:	d176      	bne.n	9000a274 <UART_SetConfig+0x45c>
9000a186:	4bcb      	ldr	r3, [pc, #812]	@ (9000a4b4 <UART_SetConfig+0x69c>)
9000a188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a18a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a18e:	2b28      	cmp	r3, #40	@ 0x28
9000a190:	d86c      	bhi.n	9000a26c <UART_SetConfig+0x454>
9000a192:	a201      	add	r2, pc, #4	@ (adr r2, 9000a198 <UART_SetConfig+0x380>)
9000a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a198:	9000a23d 	.word	0x9000a23d
9000a19c:	9000a26d 	.word	0x9000a26d
9000a1a0:	9000a26d 	.word	0x9000a26d
9000a1a4:	9000a26d 	.word	0x9000a26d
9000a1a8:	9000a26d 	.word	0x9000a26d
9000a1ac:	9000a26d 	.word	0x9000a26d
9000a1b0:	9000a26d 	.word	0x9000a26d
9000a1b4:	9000a26d 	.word	0x9000a26d
9000a1b8:	9000a245 	.word	0x9000a245
9000a1bc:	9000a26d 	.word	0x9000a26d
9000a1c0:	9000a26d 	.word	0x9000a26d
9000a1c4:	9000a26d 	.word	0x9000a26d
9000a1c8:	9000a26d 	.word	0x9000a26d
9000a1cc:	9000a26d 	.word	0x9000a26d
9000a1d0:	9000a26d 	.word	0x9000a26d
9000a1d4:	9000a26d 	.word	0x9000a26d
9000a1d8:	9000a24d 	.word	0x9000a24d
9000a1dc:	9000a26d 	.word	0x9000a26d
9000a1e0:	9000a26d 	.word	0x9000a26d
9000a1e4:	9000a26d 	.word	0x9000a26d
9000a1e8:	9000a26d 	.word	0x9000a26d
9000a1ec:	9000a26d 	.word	0x9000a26d
9000a1f0:	9000a26d 	.word	0x9000a26d
9000a1f4:	9000a26d 	.word	0x9000a26d
9000a1f8:	9000a255 	.word	0x9000a255
9000a1fc:	9000a26d 	.word	0x9000a26d
9000a200:	9000a26d 	.word	0x9000a26d
9000a204:	9000a26d 	.word	0x9000a26d
9000a208:	9000a26d 	.word	0x9000a26d
9000a20c:	9000a26d 	.word	0x9000a26d
9000a210:	9000a26d 	.word	0x9000a26d
9000a214:	9000a26d 	.word	0x9000a26d
9000a218:	9000a25d 	.word	0x9000a25d
9000a21c:	9000a26d 	.word	0x9000a26d
9000a220:	9000a26d 	.word	0x9000a26d
9000a224:	9000a26d 	.word	0x9000a26d
9000a228:	9000a26d 	.word	0x9000a26d
9000a22c:	9000a26d 	.word	0x9000a26d
9000a230:	9000a26d 	.word	0x9000a26d
9000a234:	9000a26d 	.word	0x9000a26d
9000a238:	9000a265 	.word	0x9000a265
9000a23c:	2301      	movs	r3, #1
9000a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a242:	e0bc      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a244:	2304      	movs	r3, #4
9000a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a24a:	e0b8      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a24c:	2308      	movs	r3, #8
9000a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a252:	e0b4      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a254:	2310      	movs	r3, #16
9000a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a25a:	e0b0      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a25c:	2320      	movs	r3, #32
9000a25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a262:	e0ac      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a264:	2340      	movs	r3, #64	@ 0x40
9000a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a26a:	e0a8      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a26c:	2380      	movs	r3, #128	@ 0x80
9000a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a272:	e0a4      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a274:	697b      	ldr	r3, [r7, #20]
9000a276:	681b      	ldr	r3, [r3, #0]
9000a278:	4a8f      	ldr	r2, [pc, #572]	@ (9000a4b8 <UART_SetConfig+0x6a0>)
9000a27a:	4293      	cmp	r3, r2
9000a27c:	d130      	bne.n	9000a2e0 <UART_SetConfig+0x4c8>
9000a27e:	4b8d      	ldr	r3, [pc, #564]	@ (9000a4b4 <UART_SetConfig+0x69c>)
9000a280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a282:	f003 0307 	and.w	r3, r3, #7
9000a286:	2b05      	cmp	r3, #5
9000a288:	d826      	bhi.n	9000a2d8 <UART_SetConfig+0x4c0>
9000a28a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a290 <UART_SetConfig+0x478>)
9000a28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a290:	9000a2a9 	.word	0x9000a2a9
9000a294:	9000a2b1 	.word	0x9000a2b1
9000a298:	9000a2b9 	.word	0x9000a2b9
9000a29c:	9000a2c1 	.word	0x9000a2c1
9000a2a0:	9000a2c9 	.word	0x9000a2c9
9000a2a4:	9000a2d1 	.word	0x9000a2d1
9000a2a8:	2300      	movs	r3, #0
9000a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2ae:	e086      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a2b0:	2304      	movs	r3, #4
9000a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2b6:	e082      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a2b8:	2308      	movs	r3, #8
9000a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2be:	e07e      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a2c0:	2310      	movs	r3, #16
9000a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2c6:	e07a      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a2c8:	2320      	movs	r3, #32
9000a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2ce:	e076      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a2d0:	2340      	movs	r3, #64	@ 0x40
9000a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2d6:	e072      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a2d8:	2380      	movs	r3, #128	@ 0x80
9000a2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2de:	e06e      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a2e0:	697b      	ldr	r3, [r7, #20]
9000a2e2:	681b      	ldr	r3, [r3, #0]
9000a2e4:	4a75      	ldr	r2, [pc, #468]	@ (9000a4bc <UART_SetConfig+0x6a4>)
9000a2e6:	4293      	cmp	r3, r2
9000a2e8:	d130      	bne.n	9000a34c <UART_SetConfig+0x534>
9000a2ea:	4b72      	ldr	r3, [pc, #456]	@ (9000a4b4 <UART_SetConfig+0x69c>)
9000a2ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a2ee:	f003 0307 	and.w	r3, r3, #7
9000a2f2:	2b05      	cmp	r3, #5
9000a2f4:	d826      	bhi.n	9000a344 <UART_SetConfig+0x52c>
9000a2f6:	a201      	add	r2, pc, #4	@ (adr r2, 9000a2fc <UART_SetConfig+0x4e4>)
9000a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a2fc:	9000a315 	.word	0x9000a315
9000a300:	9000a31d 	.word	0x9000a31d
9000a304:	9000a325 	.word	0x9000a325
9000a308:	9000a32d 	.word	0x9000a32d
9000a30c:	9000a335 	.word	0x9000a335
9000a310:	9000a33d 	.word	0x9000a33d
9000a314:	2300      	movs	r3, #0
9000a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a31a:	e050      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a31c:	2304      	movs	r3, #4
9000a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a322:	e04c      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a324:	2308      	movs	r3, #8
9000a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a32a:	e048      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a32c:	2310      	movs	r3, #16
9000a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a332:	e044      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a334:	2320      	movs	r3, #32
9000a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a33a:	e040      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a33c:	2340      	movs	r3, #64	@ 0x40
9000a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a342:	e03c      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a344:	2380      	movs	r3, #128	@ 0x80
9000a346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a34a:	e038      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a34c:	697b      	ldr	r3, [r7, #20]
9000a34e:	681b      	ldr	r3, [r3, #0]
9000a350:	4a5b      	ldr	r2, [pc, #364]	@ (9000a4c0 <UART_SetConfig+0x6a8>)
9000a352:	4293      	cmp	r3, r2
9000a354:	d130      	bne.n	9000a3b8 <UART_SetConfig+0x5a0>
9000a356:	4b57      	ldr	r3, [pc, #348]	@ (9000a4b4 <UART_SetConfig+0x69c>)
9000a358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a35a:	f003 0307 	and.w	r3, r3, #7
9000a35e:	2b05      	cmp	r3, #5
9000a360:	d826      	bhi.n	9000a3b0 <UART_SetConfig+0x598>
9000a362:	a201      	add	r2, pc, #4	@ (adr r2, 9000a368 <UART_SetConfig+0x550>)
9000a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a368:	9000a381 	.word	0x9000a381
9000a36c:	9000a389 	.word	0x9000a389
9000a370:	9000a391 	.word	0x9000a391
9000a374:	9000a399 	.word	0x9000a399
9000a378:	9000a3a1 	.word	0x9000a3a1
9000a37c:	9000a3a9 	.word	0x9000a3a9
9000a380:	2302      	movs	r3, #2
9000a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a386:	e01a      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a388:	2304      	movs	r3, #4
9000a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a38e:	e016      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a390:	2308      	movs	r3, #8
9000a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a396:	e012      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a398:	2310      	movs	r3, #16
9000a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a39e:	e00e      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a3a0:	2320      	movs	r3, #32
9000a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3a6:	e00a      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a3a8:	2340      	movs	r3, #64	@ 0x40
9000a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3ae:	e006      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a3b0:	2380      	movs	r3, #128	@ 0x80
9000a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3b6:	e002      	b.n	9000a3be <UART_SetConfig+0x5a6>
9000a3b8:	2380      	movs	r3, #128	@ 0x80
9000a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a3be:	697b      	ldr	r3, [r7, #20]
9000a3c0:	681b      	ldr	r3, [r3, #0]
9000a3c2:	4a3f      	ldr	r2, [pc, #252]	@ (9000a4c0 <UART_SetConfig+0x6a8>)
9000a3c4:	4293      	cmp	r3, r2
9000a3c6:	f040 80f8 	bne.w	9000a5ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a3ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a3ce:	2b20      	cmp	r3, #32
9000a3d0:	dc46      	bgt.n	9000a460 <UART_SetConfig+0x648>
9000a3d2:	2b02      	cmp	r3, #2
9000a3d4:	f2c0 8082 	blt.w	9000a4dc <UART_SetConfig+0x6c4>
9000a3d8:	3b02      	subs	r3, #2
9000a3da:	2b1e      	cmp	r3, #30
9000a3dc:	d87e      	bhi.n	9000a4dc <UART_SetConfig+0x6c4>
9000a3de:	a201      	add	r2, pc, #4	@ (adr r2, 9000a3e4 <UART_SetConfig+0x5cc>)
9000a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a3e4:	9000a467 	.word	0x9000a467
9000a3e8:	9000a4dd 	.word	0x9000a4dd
9000a3ec:	9000a46f 	.word	0x9000a46f
9000a3f0:	9000a4dd 	.word	0x9000a4dd
9000a3f4:	9000a4dd 	.word	0x9000a4dd
9000a3f8:	9000a4dd 	.word	0x9000a4dd
9000a3fc:	9000a47f 	.word	0x9000a47f
9000a400:	9000a4dd 	.word	0x9000a4dd
9000a404:	9000a4dd 	.word	0x9000a4dd
9000a408:	9000a4dd 	.word	0x9000a4dd
9000a40c:	9000a4dd 	.word	0x9000a4dd
9000a410:	9000a4dd 	.word	0x9000a4dd
9000a414:	9000a4dd 	.word	0x9000a4dd
9000a418:	9000a4dd 	.word	0x9000a4dd
9000a41c:	9000a48f 	.word	0x9000a48f
9000a420:	9000a4dd 	.word	0x9000a4dd
9000a424:	9000a4dd 	.word	0x9000a4dd
9000a428:	9000a4dd 	.word	0x9000a4dd
9000a42c:	9000a4dd 	.word	0x9000a4dd
9000a430:	9000a4dd 	.word	0x9000a4dd
9000a434:	9000a4dd 	.word	0x9000a4dd
9000a438:	9000a4dd 	.word	0x9000a4dd
9000a43c:	9000a4dd 	.word	0x9000a4dd
9000a440:	9000a4dd 	.word	0x9000a4dd
9000a444:	9000a4dd 	.word	0x9000a4dd
9000a448:	9000a4dd 	.word	0x9000a4dd
9000a44c:	9000a4dd 	.word	0x9000a4dd
9000a450:	9000a4dd 	.word	0x9000a4dd
9000a454:	9000a4dd 	.word	0x9000a4dd
9000a458:	9000a4dd 	.word	0x9000a4dd
9000a45c:	9000a4cf 	.word	0x9000a4cf
9000a460:	2b40      	cmp	r3, #64	@ 0x40
9000a462:	d037      	beq.n	9000a4d4 <UART_SetConfig+0x6bc>
9000a464:	e03a      	b.n	9000a4dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a466:	f7fe fdcd 	bl	90009004 <HAL_RCCEx_GetD3PCLK1Freq>
9000a46a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a46c:	e03c      	b.n	9000a4e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a46e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a472:	4618      	mov	r0, r3
9000a474:	f7fe fddc 	bl	90009030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a47c:	e034      	b.n	9000a4e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a47e:	f107 0318 	add.w	r3, r7, #24
9000a482:	4618      	mov	r0, r3
9000a484:	f7fe ff28 	bl	900092d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a488:	69fb      	ldr	r3, [r7, #28]
9000a48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a48c:	e02c      	b.n	9000a4e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a48e:	4b09      	ldr	r3, [pc, #36]	@ (9000a4b4 <UART_SetConfig+0x69c>)
9000a490:	681b      	ldr	r3, [r3, #0]
9000a492:	f003 0320 	and.w	r3, r3, #32
9000a496:	2b00      	cmp	r3, #0
9000a498:	d016      	beq.n	9000a4c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a49a:	4b06      	ldr	r3, [pc, #24]	@ (9000a4b4 <UART_SetConfig+0x69c>)
9000a49c:	681b      	ldr	r3, [r3, #0]
9000a49e:	08db      	lsrs	r3, r3, #3
9000a4a0:	f003 0303 	and.w	r3, r3, #3
9000a4a4:	4a07      	ldr	r2, [pc, #28]	@ (9000a4c4 <UART_SetConfig+0x6ac>)
9000a4a6:	fa22 f303 	lsr.w	r3, r2, r3
9000a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a4ac:	e01c      	b.n	9000a4e8 <UART_SetConfig+0x6d0>
9000a4ae:	bf00      	nop
9000a4b0:	40011400 	.word	0x40011400
9000a4b4:	58024400 	.word	0x58024400
9000a4b8:	40007800 	.word	0x40007800
9000a4bc:	40007c00 	.word	0x40007c00
9000a4c0:	58000c00 	.word	0x58000c00
9000a4c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a4c8:	4b9d      	ldr	r3, [pc, #628]	@ (9000a740 <UART_SetConfig+0x928>)
9000a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4cc:	e00c      	b.n	9000a4e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a4ce:	4b9d      	ldr	r3, [pc, #628]	@ (9000a744 <UART_SetConfig+0x92c>)
9000a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4d2:	e009      	b.n	9000a4e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a4d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4da:	e005      	b.n	9000a4e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a4dc:	2300      	movs	r3, #0
9000a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a4e0:	2301      	movs	r3, #1
9000a4e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a4e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4ea:	2b00      	cmp	r3, #0
9000a4ec:	f000 81de 	beq.w	9000a8ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a4f0:	697b      	ldr	r3, [r7, #20]
9000a4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a4f4:	4a94      	ldr	r2, [pc, #592]	@ (9000a748 <UART_SetConfig+0x930>)
9000a4f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a4fa:	461a      	mov	r2, r3
9000a4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4fe:	fbb3 f3f2 	udiv	r3, r3, r2
9000a502:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a504:	697b      	ldr	r3, [r7, #20]
9000a506:	685a      	ldr	r2, [r3, #4]
9000a508:	4613      	mov	r3, r2
9000a50a:	005b      	lsls	r3, r3, #1
9000a50c:	4413      	add	r3, r2
9000a50e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a510:	429a      	cmp	r2, r3
9000a512:	d305      	bcc.n	9000a520 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a514:	697b      	ldr	r3, [r7, #20]
9000a516:	685b      	ldr	r3, [r3, #4]
9000a518:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a51c:	429a      	cmp	r2, r3
9000a51e:	d903      	bls.n	9000a528 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a520:	2301      	movs	r3, #1
9000a522:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a526:	e1c1      	b.n	9000a8ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a52a:	2200      	movs	r2, #0
9000a52c:	60bb      	str	r3, [r7, #8]
9000a52e:	60fa      	str	r2, [r7, #12]
9000a530:	697b      	ldr	r3, [r7, #20]
9000a532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a534:	4a84      	ldr	r2, [pc, #528]	@ (9000a748 <UART_SetConfig+0x930>)
9000a536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a53a:	b29b      	uxth	r3, r3
9000a53c:	2200      	movs	r2, #0
9000a53e:	603b      	str	r3, [r7, #0]
9000a540:	607a      	str	r2, [r7, #4]
9000a542:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a54a:	f7f5 ff21 	bl	90000390 <__aeabi_uldivmod>
9000a54e:	4602      	mov	r2, r0
9000a550:	460b      	mov	r3, r1
9000a552:	4610      	mov	r0, r2
9000a554:	4619      	mov	r1, r3
9000a556:	f04f 0200 	mov.w	r2, #0
9000a55a:	f04f 0300 	mov.w	r3, #0
9000a55e:	020b      	lsls	r3, r1, #8
9000a560:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a564:	0202      	lsls	r2, r0, #8
9000a566:	6979      	ldr	r1, [r7, #20]
9000a568:	6849      	ldr	r1, [r1, #4]
9000a56a:	0849      	lsrs	r1, r1, #1
9000a56c:	2000      	movs	r0, #0
9000a56e:	460c      	mov	r4, r1
9000a570:	4605      	mov	r5, r0
9000a572:	eb12 0804 	adds.w	r8, r2, r4
9000a576:	eb43 0905 	adc.w	r9, r3, r5
9000a57a:	697b      	ldr	r3, [r7, #20]
9000a57c:	685b      	ldr	r3, [r3, #4]
9000a57e:	2200      	movs	r2, #0
9000a580:	469a      	mov	sl, r3
9000a582:	4693      	mov	fp, r2
9000a584:	4652      	mov	r2, sl
9000a586:	465b      	mov	r3, fp
9000a588:	4640      	mov	r0, r8
9000a58a:	4649      	mov	r1, r9
9000a58c:	f7f5 ff00 	bl	90000390 <__aeabi_uldivmod>
9000a590:	4602      	mov	r2, r0
9000a592:	460b      	mov	r3, r1
9000a594:	4613      	mov	r3, r2
9000a596:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a59a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a59e:	d308      	bcc.n	9000a5b2 <UART_SetConfig+0x79a>
9000a5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a5a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a5a6:	d204      	bcs.n	9000a5b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a5a8:	697b      	ldr	r3, [r7, #20]
9000a5aa:	681b      	ldr	r3, [r3, #0]
9000a5ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a5ae:	60da      	str	r2, [r3, #12]
9000a5b0:	e17c      	b.n	9000a8ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a5b2:	2301      	movs	r3, #1
9000a5b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a5b8:	e178      	b.n	9000a8ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a5ba:	697b      	ldr	r3, [r7, #20]
9000a5bc:	69db      	ldr	r3, [r3, #28]
9000a5be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a5c2:	f040 80c5 	bne.w	9000a750 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a5c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a5ca:	2b20      	cmp	r3, #32
9000a5cc:	dc48      	bgt.n	9000a660 <UART_SetConfig+0x848>
9000a5ce:	2b00      	cmp	r3, #0
9000a5d0:	db7b      	blt.n	9000a6ca <UART_SetConfig+0x8b2>
9000a5d2:	2b20      	cmp	r3, #32
9000a5d4:	d879      	bhi.n	9000a6ca <UART_SetConfig+0x8b2>
9000a5d6:	a201      	add	r2, pc, #4	@ (adr r2, 9000a5dc <UART_SetConfig+0x7c4>)
9000a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a5dc:	9000a667 	.word	0x9000a667
9000a5e0:	9000a66f 	.word	0x9000a66f
9000a5e4:	9000a6cb 	.word	0x9000a6cb
9000a5e8:	9000a6cb 	.word	0x9000a6cb
9000a5ec:	9000a677 	.word	0x9000a677
9000a5f0:	9000a6cb 	.word	0x9000a6cb
9000a5f4:	9000a6cb 	.word	0x9000a6cb
9000a5f8:	9000a6cb 	.word	0x9000a6cb
9000a5fc:	9000a687 	.word	0x9000a687
9000a600:	9000a6cb 	.word	0x9000a6cb
9000a604:	9000a6cb 	.word	0x9000a6cb
9000a608:	9000a6cb 	.word	0x9000a6cb
9000a60c:	9000a6cb 	.word	0x9000a6cb
9000a610:	9000a6cb 	.word	0x9000a6cb
9000a614:	9000a6cb 	.word	0x9000a6cb
9000a618:	9000a6cb 	.word	0x9000a6cb
9000a61c:	9000a697 	.word	0x9000a697
9000a620:	9000a6cb 	.word	0x9000a6cb
9000a624:	9000a6cb 	.word	0x9000a6cb
9000a628:	9000a6cb 	.word	0x9000a6cb
9000a62c:	9000a6cb 	.word	0x9000a6cb
9000a630:	9000a6cb 	.word	0x9000a6cb
9000a634:	9000a6cb 	.word	0x9000a6cb
9000a638:	9000a6cb 	.word	0x9000a6cb
9000a63c:	9000a6cb 	.word	0x9000a6cb
9000a640:	9000a6cb 	.word	0x9000a6cb
9000a644:	9000a6cb 	.word	0x9000a6cb
9000a648:	9000a6cb 	.word	0x9000a6cb
9000a64c:	9000a6cb 	.word	0x9000a6cb
9000a650:	9000a6cb 	.word	0x9000a6cb
9000a654:	9000a6cb 	.word	0x9000a6cb
9000a658:	9000a6cb 	.word	0x9000a6cb
9000a65c:	9000a6bd 	.word	0x9000a6bd
9000a660:	2b40      	cmp	r3, #64	@ 0x40
9000a662:	d02e      	beq.n	9000a6c2 <UART_SetConfig+0x8aa>
9000a664:	e031      	b.n	9000a6ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a666:	f7fd fa97 	bl	90007b98 <HAL_RCC_GetPCLK1Freq>
9000a66a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a66c:	e033      	b.n	9000a6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a66e:	f7fd faa9 	bl	90007bc4 <HAL_RCC_GetPCLK2Freq>
9000a672:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a674:	e02f      	b.n	9000a6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a67a:	4618      	mov	r0, r3
9000a67c:	f7fe fcd8 	bl	90009030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a684:	e027      	b.n	9000a6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a686:	f107 0318 	add.w	r3, r7, #24
9000a68a:	4618      	mov	r0, r3
9000a68c:	f7fe fe24 	bl	900092d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a690:	69fb      	ldr	r3, [r7, #28]
9000a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a694:	e01f      	b.n	9000a6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a696:	4b2d      	ldr	r3, [pc, #180]	@ (9000a74c <UART_SetConfig+0x934>)
9000a698:	681b      	ldr	r3, [r3, #0]
9000a69a:	f003 0320 	and.w	r3, r3, #32
9000a69e:	2b00      	cmp	r3, #0
9000a6a0:	d009      	beq.n	9000a6b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a6a2:	4b2a      	ldr	r3, [pc, #168]	@ (9000a74c <UART_SetConfig+0x934>)
9000a6a4:	681b      	ldr	r3, [r3, #0]
9000a6a6:	08db      	lsrs	r3, r3, #3
9000a6a8:	f003 0303 	and.w	r3, r3, #3
9000a6ac:	4a24      	ldr	r2, [pc, #144]	@ (9000a740 <UART_SetConfig+0x928>)
9000a6ae:	fa22 f303 	lsr.w	r3, r2, r3
9000a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a6b4:	e00f      	b.n	9000a6d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a6b6:	4b22      	ldr	r3, [pc, #136]	@ (9000a740 <UART_SetConfig+0x928>)
9000a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a6ba:	e00c      	b.n	9000a6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a6bc:	4b21      	ldr	r3, [pc, #132]	@ (9000a744 <UART_SetConfig+0x92c>)
9000a6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a6c0:	e009      	b.n	9000a6d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a6c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a6c8:	e005      	b.n	9000a6d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a6ca:	2300      	movs	r3, #0
9000a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a6ce:	2301      	movs	r3, #1
9000a6d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a6d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a6d8:	2b00      	cmp	r3, #0
9000a6da:	f000 80e7 	beq.w	9000a8ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a6de:	697b      	ldr	r3, [r7, #20]
9000a6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a6e2:	4a19      	ldr	r2, [pc, #100]	@ (9000a748 <UART_SetConfig+0x930>)
9000a6e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a6e8:	461a      	mov	r2, r3
9000a6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a6ec:	fbb3 f3f2 	udiv	r3, r3, r2
9000a6f0:	005a      	lsls	r2, r3, #1
9000a6f2:	697b      	ldr	r3, [r7, #20]
9000a6f4:	685b      	ldr	r3, [r3, #4]
9000a6f6:	085b      	lsrs	r3, r3, #1
9000a6f8:	441a      	add	r2, r3
9000a6fa:	697b      	ldr	r3, [r7, #20]
9000a6fc:	685b      	ldr	r3, [r3, #4]
9000a6fe:	fbb2 f3f3 	udiv	r3, r2, r3
9000a702:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a706:	2b0f      	cmp	r3, #15
9000a708:	d916      	bls.n	9000a738 <UART_SetConfig+0x920>
9000a70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a70c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a710:	d212      	bcs.n	9000a738 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a714:	b29b      	uxth	r3, r3
9000a716:	f023 030f 	bic.w	r3, r3, #15
9000a71a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a71e:	085b      	lsrs	r3, r3, #1
9000a720:	b29b      	uxth	r3, r3
9000a722:	f003 0307 	and.w	r3, r3, #7
9000a726:	b29a      	uxth	r2, r3
9000a728:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a72a:	4313      	orrs	r3, r2
9000a72c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a72e:	697b      	ldr	r3, [r7, #20]
9000a730:	681b      	ldr	r3, [r3, #0]
9000a732:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a734:	60da      	str	r2, [r3, #12]
9000a736:	e0b9      	b.n	9000a8ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a738:	2301      	movs	r3, #1
9000a73a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a73e:	e0b5      	b.n	9000a8ac <UART_SetConfig+0xa94>
9000a740:	03d09000 	.word	0x03d09000
9000a744:	003d0900 	.word	0x003d0900
9000a748:	9000d7f0 	.word	0x9000d7f0
9000a74c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a750:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a754:	2b20      	cmp	r3, #32
9000a756:	dc49      	bgt.n	9000a7ec <UART_SetConfig+0x9d4>
9000a758:	2b00      	cmp	r3, #0
9000a75a:	db7c      	blt.n	9000a856 <UART_SetConfig+0xa3e>
9000a75c:	2b20      	cmp	r3, #32
9000a75e:	d87a      	bhi.n	9000a856 <UART_SetConfig+0xa3e>
9000a760:	a201      	add	r2, pc, #4	@ (adr r2, 9000a768 <UART_SetConfig+0x950>)
9000a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a766:	bf00      	nop
9000a768:	9000a7f3 	.word	0x9000a7f3
9000a76c:	9000a7fb 	.word	0x9000a7fb
9000a770:	9000a857 	.word	0x9000a857
9000a774:	9000a857 	.word	0x9000a857
9000a778:	9000a803 	.word	0x9000a803
9000a77c:	9000a857 	.word	0x9000a857
9000a780:	9000a857 	.word	0x9000a857
9000a784:	9000a857 	.word	0x9000a857
9000a788:	9000a813 	.word	0x9000a813
9000a78c:	9000a857 	.word	0x9000a857
9000a790:	9000a857 	.word	0x9000a857
9000a794:	9000a857 	.word	0x9000a857
9000a798:	9000a857 	.word	0x9000a857
9000a79c:	9000a857 	.word	0x9000a857
9000a7a0:	9000a857 	.word	0x9000a857
9000a7a4:	9000a857 	.word	0x9000a857
9000a7a8:	9000a823 	.word	0x9000a823
9000a7ac:	9000a857 	.word	0x9000a857
9000a7b0:	9000a857 	.word	0x9000a857
9000a7b4:	9000a857 	.word	0x9000a857
9000a7b8:	9000a857 	.word	0x9000a857
9000a7bc:	9000a857 	.word	0x9000a857
9000a7c0:	9000a857 	.word	0x9000a857
9000a7c4:	9000a857 	.word	0x9000a857
9000a7c8:	9000a857 	.word	0x9000a857
9000a7cc:	9000a857 	.word	0x9000a857
9000a7d0:	9000a857 	.word	0x9000a857
9000a7d4:	9000a857 	.word	0x9000a857
9000a7d8:	9000a857 	.word	0x9000a857
9000a7dc:	9000a857 	.word	0x9000a857
9000a7e0:	9000a857 	.word	0x9000a857
9000a7e4:	9000a857 	.word	0x9000a857
9000a7e8:	9000a849 	.word	0x9000a849
9000a7ec:	2b40      	cmp	r3, #64	@ 0x40
9000a7ee:	d02e      	beq.n	9000a84e <UART_SetConfig+0xa36>
9000a7f0:	e031      	b.n	9000a856 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a7f2:	f7fd f9d1 	bl	90007b98 <HAL_RCC_GetPCLK1Freq>
9000a7f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a7f8:	e033      	b.n	9000a862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a7fa:	f7fd f9e3 	bl	90007bc4 <HAL_RCC_GetPCLK2Freq>
9000a7fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a800:	e02f      	b.n	9000a862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a806:	4618      	mov	r0, r3
9000a808:	f7fe fc12 	bl	90009030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a810:	e027      	b.n	9000a862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a812:	f107 0318 	add.w	r3, r7, #24
9000a816:	4618      	mov	r0, r3
9000a818:	f7fe fd5e 	bl	900092d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a81c:	69fb      	ldr	r3, [r7, #28]
9000a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a820:	e01f      	b.n	9000a862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a822:	4b2d      	ldr	r3, [pc, #180]	@ (9000a8d8 <UART_SetConfig+0xac0>)
9000a824:	681b      	ldr	r3, [r3, #0]
9000a826:	f003 0320 	and.w	r3, r3, #32
9000a82a:	2b00      	cmp	r3, #0
9000a82c:	d009      	beq.n	9000a842 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a82e:	4b2a      	ldr	r3, [pc, #168]	@ (9000a8d8 <UART_SetConfig+0xac0>)
9000a830:	681b      	ldr	r3, [r3, #0]
9000a832:	08db      	lsrs	r3, r3, #3
9000a834:	f003 0303 	and.w	r3, r3, #3
9000a838:	4a28      	ldr	r2, [pc, #160]	@ (9000a8dc <UART_SetConfig+0xac4>)
9000a83a:	fa22 f303 	lsr.w	r3, r2, r3
9000a83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a840:	e00f      	b.n	9000a862 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a842:	4b26      	ldr	r3, [pc, #152]	@ (9000a8dc <UART_SetConfig+0xac4>)
9000a844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a846:	e00c      	b.n	9000a862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a848:	4b25      	ldr	r3, [pc, #148]	@ (9000a8e0 <UART_SetConfig+0xac8>)
9000a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a84c:	e009      	b.n	9000a862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a84e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a854:	e005      	b.n	9000a862 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a856:	2300      	movs	r3, #0
9000a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a85a:	2301      	movs	r3, #1
9000a85c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a860:	bf00      	nop
    }

    if (pclk != 0U)
9000a862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a864:	2b00      	cmp	r3, #0
9000a866:	d021      	beq.n	9000a8ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a868:	697b      	ldr	r3, [r7, #20]
9000a86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a86c:	4a1d      	ldr	r2, [pc, #116]	@ (9000a8e4 <UART_SetConfig+0xacc>)
9000a86e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a872:	461a      	mov	r2, r3
9000a874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a876:	fbb3 f2f2 	udiv	r2, r3, r2
9000a87a:	697b      	ldr	r3, [r7, #20]
9000a87c:	685b      	ldr	r3, [r3, #4]
9000a87e:	085b      	lsrs	r3, r3, #1
9000a880:	441a      	add	r2, r3
9000a882:	697b      	ldr	r3, [r7, #20]
9000a884:	685b      	ldr	r3, [r3, #4]
9000a886:	fbb2 f3f3 	udiv	r3, r2, r3
9000a88a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a88e:	2b0f      	cmp	r3, #15
9000a890:	d909      	bls.n	9000a8a6 <UART_SetConfig+0xa8e>
9000a892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a898:	d205      	bcs.n	9000a8a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a89c:	b29a      	uxth	r2, r3
9000a89e:	697b      	ldr	r3, [r7, #20]
9000a8a0:	681b      	ldr	r3, [r3, #0]
9000a8a2:	60da      	str	r2, [r3, #12]
9000a8a4:	e002      	b.n	9000a8ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a8a6:	2301      	movs	r3, #1
9000a8a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a8ac:	697b      	ldr	r3, [r7, #20]
9000a8ae:	2201      	movs	r2, #1
9000a8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a8b4:	697b      	ldr	r3, [r7, #20]
9000a8b6:	2201      	movs	r2, #1
9000a8b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a8bc:	697b      	ldr	r3, [r7, #20]
9000a8be:	2200      	movs	r2, #0
9000a8c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a8c2:	697b      	ldr	r3, [r7, #20]
9000a8c4:	2200      	movs	r2, #0
9000a8c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a8c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a8cc:	4618      	mov	r0, r3
9000a8ce:	3748      	adds	r7, #72	@ 0x48
9000a8d0:	46bd      	mov	sp, r7
9000a8d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a8d6:	bf00      	nop
9000a8d8:	58024400 	.word	0x58024400
9000a8dc:	03d09000 	.word	0x03d09000
9000a8e0:	003d0900 	.word	0x003d0900
9000a8e4:	9000d7f0 	.word	0x9000d7f0

9000a8e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a8e8:	b480      	push	{r7}
9000a8ea:	b083      	sub	sp, #12
9000a8ec:	af00      	add	r7, sp, #0
9000a8ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a8f0:	687b      	ldr	r3, [r7, #4]
9000a8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8f4:	f003 0308 	and.w	r3, r3, #8
9000a8f8:	2b00      	cmp	r3, #0
9000a8fa:	d00a      	beq.n	9000a912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a8fc:	687b      	ldr	r3, [r7, #4]
9000a8fe:	681b      	ldr	r3, [r3, #0]
9000a900:	685b      	ldr	r3, [r3, #4]
9000a902:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a906:	687b      	ldr	r3, [r7, #4]
9000a908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a90a:	687b      	ldr	r3, [r7, #4]
9000a90c:	681b      	ldr	r3, [r3, #0]
9000a90e:	430a      	orrs	r2, r1
9000a910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a912:	687b      	ldr	r3, [r7, #4]
9000a914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a916:	f003 0301 	and.w	r3, r3, #1
9000a91a:	2b00      	cmp	r3, #0
9000a91c:	d00a      	beq.n	9000a934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a91e:	687b      	ldr	r3, [r7, #4]
9000a920:	681b      	ldr	r3, [r3, #0]
9000a922:	685b      	ldr	r3, [r3, #4]
9000a924:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a928:	687b      	ldr	r3, [r7, #4]
9000a92a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a92c:	687b      	ldr	r3, [r7, #4]
9000a92e:	681b      	ldr	r3, [r3, #0]
9000a930:	430a      	orrs	r2, r1
9000a932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a934:	687b      	ldr	r3, [r7, #4]
9000a936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a938:	f003 0302 	and.w	r3, r3, #2
9000a93c:	2b00      	cmp	r3, #0
9000a93e:	d00a      	beq.n	9000a956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a940:	687b      	ldr	r3, [r7, #4]
9000a942:	681b      	ldr	r3, [r3, #0]
9000a944:	685b      	ldr	r3, [r3, #4]
9000a946:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a94a:	687b      	ldr	r3, [r7, #4]
9000a94c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a94e:	687b      	ldr	r3, [r7, #4]
9000a950:	681b      	ldr	r3, [r3, #0]
9000a952:	430a      	orrs	r2, r1
9000a954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a956:	687b      	ldr	r3, [r7, #4]
9000a958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a95a:	f003 0304 	and.w	r3, r3, #4
9000a95e:	2b00      	cmp	r3, #0
9000a960:	d00a      	beq.n	9000a978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a962:	687b      	ldr	r3, [r7, #4]
9000a964:	681b      	ldr	r3, [r3, #0]
9000a966:	685b      	ldr	r3, [r3, #4]
9000a968:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a96c:	687b      	ldr	r3, [r7, #4]
9000a96e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a970:	687b      	ldr	r3, [r7, #4]
9000a972:	681b      	ldr	r3, [r3, #0]
9000a974:	430a      	orrs	r2, r1
9000a976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a978:	687b      	ldr	r3, [r7, #4]
9000a97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a97c:	f003 0310 	and.w	r3, r3, #16
9000a980:	2b00      	cmp	r3, #0
9000a982:	d00a      	beq.n	9000a99a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a984:	687b      	ldr	r3, [r7, #4]
9000a986:	681b      	ldr	r3, [r3, #0]
9000a988:	689b      	ldr	r3, [r3, #8]
9000a98a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a98e:	687b      	ldr	r3, [r7, #4]
9000a990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a992:	687b      	ldr	r3, [r7, #4]
9000a994:	681b      	ldr	r3, [r3, #0]
9000a996:	430a      	orrs	r2, r1
9000a998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a99a:	687b      	ldr	r3, [r7, #4]
9000a99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a99e:	f003 0320 	and.w	r3, r3, #32
9000a9a2:	2b00      	cmp	r3, #0
9000a9a4:	d00a      	beq.n	9000a9bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a9a6:	687b      	ldr	r3, [r7, #4]
9000a9a8:	681b      	ldr	r3, [r3, #0]
9000a9aa:	689b      	ldr	r3, [r3, #8]
9000a9ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a9b0:	687b      	ldr	r3, [r7, #4]
9000a9b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a9b4:	687b      	ldr	r3, [r7, #4]
9000a9b6:	681b      	ldr	r3, [r3, #0]
9000a9b8:	430a      	orrs	r2, r1
9000a9ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a9bc:	687b      	ldr	r3, [r7, #4]
9000a9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a9c4:	2b00      	cmp	r3, #0
9000a9c6:	d01a      	beq.n	9000a9fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a9c8:	687b      	ldr	r3, [r7, #4]
9000a9ca:	681b      	ldr	r3, [r3, #0]
9000a9cc:	685b      	ldr	r3, [r3, #4]
9000a9ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a9d2:	687b      	ldr	r3, [r7, #4]
9000a9d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a9d6:	687b      	ldr	r3, [r7, #4]
9000a9d8:	681b      	ldr	r3, [r3, #0]
9000a9da:	430a      	orrs	r2, r1
9000a9dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a9de:	687b      	ldr	r3, [r7, #4]
9000a9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a9e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a9e6:	d10a      	bne.n	9000a9fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a9e8:	687b      	ldr	r3, [r7, #4]
9000a9ea:	681b      	ldr	r3, [r3, #0]
9000a9ec:	685b      	ldr	r3, [r3, #4]
9000a9ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000a9f2:	687b      	ldr	r3, [r7, #4]
9000a9f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000a9f6:	687b      	ldr	r3, [r7, #4]
9000a9f8:	681b      	ldr	r3, [r3, #0]
9000a9fa:	430a      	orrs	r2, r1
9000a9fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000a9fe:	687b      	ldr	r3, [r7, #4]
9000aa00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aa02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000aa06:	2b00      	cmp	r3, #0
9000aa08:	d00a      	beq.n	9000aa20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000aa0a:	687b      	ldr	r3, [r7, #4]
9000aa0c:	681b      	ldr	r3, [r3, #0]
9000aa0e:	685b      	ldr	r3, [r3, #4]
9000aa10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000aa14:	687b      	ldr	r3, [r7, #4]
9000aa16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000aa18:	687b      	ldr	r3, [r7, #4]
9000aa1a:	681b      	ldr	r3, [r3, #0]
9000aa1c:	430a      	orrs	r2, r1
9000aa1e:	605a      	str	r2, [r3, #4]
  }
}
9000aa20:	bf00      	nop
9000aa22:	370c      	adds	r7, #12
9000aa24:	46bd      	mov	sp, r7
9000aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aa2a:	4770      	bx	lr

9000aa2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000aa2c:	b580      	push	{r7, lr}
9000aa2e:	b098      	sub	sp, #96	@ 0x60
9000aa30:	af02      	add	r7, sp, #8
9000aa32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000aa34:	687b      	ldr	r3, [r7, #4]
9000aa36:	2200      	movs	r2, #0
9000aa38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000aa3c:	f7f8 fc4a 	bl	900032d4 <HAL_GetTick>
9000aa40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000aa42:	687b      	ldr	r3, [r7, #4]
9000aa44:	681b      	ldr	r3, [r3, #0]
9000aa46:	681b      	ldr	r3, [r3, #0]
9000aa48:	f003 0308 	and.w	r3, r3, #8
9000aa4c:	2b08      	cmp	r3, #8
9000aa4e:	d12f      	bne.n	9000aab0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000aa50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000aa54:	9300      	str	r3, [sp, #0]
9000aa56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000aa58:	2200      	movs	r2, #0
9000aa5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000aa5e:	6878      	ldr	r0, [r7, #4]
9000aa60:	f000 f88e 	bl	9000ab80 <UART_WaitOnFlagUntilTimeout>
9000aa64:	4603      	mov	r3, r0
9000aa66:	2b00      	cmp	r3, #0
9000aa68:	d022      	beq.n	9000aab0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000aa6a:	687b      	ldr	r3, [r7, #4]
9000aa6c:	681b      	ldr	r3, [r3, #0]
9000aa6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000aa72:	e853 3f00 	ldrex	r3, [r3]
9000aa76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000aa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000aa7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000aa7e:	653b      	str	r3, [r7, #80]	@ 0x50
9000aa80:	687b      	ldr	r3, [r7, #4]
9000aa82:	681b      	ldr	r3, [r3, #0]
9000aa84:	461a      	mov	r2, r3
9000aa86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000aa88:	647b      	str	r3, [r7, #68]	@ 0x44
9000aa8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000aa8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000aa90:	e841 2300 	strex	r3, r2, [r1]
9000aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000aa96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000aa98:	2b00      	cmp	r3, #0
9000aa9a:	d1e6      	bne.n	9000aa6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000aa9c:	687b      	ldr	r3, [r7, #4]
9000aa9e:	2220      	movs	r2, #32
9000aaa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000aaa4:	687b      	ldr	r3, [r7, #4]
9000aaa6:	2200      	movs	r2, #0
9000aaa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000aaac:	2303      	movs	r3, #3
9000aaae:	e063      	b.n	9000ab78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000aab0:	687b      	ldr	r3, [r7, #4]
9000aab2:	681b      	ldr	r3, [r3, #0]
9000aab4:	681b      	ldr	r3, [r3, #0]
9000aab6:	f003 0304 	and.w	r3, r3, #4
9000aaba:	2b04      	cmp	r3, #4
9000aabc:	d149      	bne.n	9000ab52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000aabe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000aac2:	9300      	str	r3, [sp, #0]
9000aac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000aac6:	2200      	movs	r2, #0
9000aac8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000aacc:	6878      	ldr	r0, [r7, #4]
9000aace:	f000 f857 	bl	9000ab80 <UART_WaitOnFlagUntilTimeout>
9000aad2:	4603      	mov	r3, r0
9000aad4:	2b00      	cmp	r3, #0
9000aad6:	d03c      	beq.n	9000ab52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000aad8:	687b      	ldr	r3, [r7, #4]
9000aada:	681b      	ldr	r3, [r3, #0]
9000aadc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000aae0:	e853 3f00 	ldrex	r3, [r3]
9000aae4:	623b      	str	r3, [r7, #32]
   return(result);
9000aae6:	6a3b      	ldr	r3, [r7, #32]
9000aae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000aaec:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000aaee:	687b      	ldr	r3, [r7, #4]
9000aaf0:	681b      	ldr	r3, [r3, #0]
9000aaf2:	461a      	mov	r2, r3
9000aaf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000aaf6:	633b      	str	r3, [r7, #48]	@ 0x30
9000aaf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000aafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000aafe:	e841 2300 	strex	r3, r2, [r1]
9000ab02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000ab04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000ab06:	2b00      	cmp	r3, #0
9000ab08:	d1e6      	bne.n	9000aad8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000ab0a:	687b      	ldr	r3, [r7, #4]
9000ab0c:	681b      	ldr	r3, [r3, #0]
9000ab0e:	3308      	adds	r3, #8
9000ab10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ab12:	693b      	ldr	r3, [r7, #16]
9000ab14:	e853 3f00 	ldrex	r3, [r3]
9000ab18:	60fb      	str	r3, [r7, #12]
   return(result);
9000ab1a:	68fb      	ldr	r3, [r7, #12]
9000ab1c:	f023 0301 	bic.w	r3, r3, #1
9000ab20:	64bb      	str	r3, [r7, #72]	@ 0x48
9000ab22:	687b      	ldr	r3, [r7, #4]
9000ab24:	681b      	ldr	r3, [r3, #0]
9000ab26:	3308      	adds	r3, #8
9000ab28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000ab2a:	61fa      	str	r2, [r7, #28]
9000ab2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ab2e:	69b9      	ldr	r1, [r7, #24]
9000ab30:	69fa      	ldr	r2, [r7, #28]
9000ab32:	e841 2300 	strex	r3, r2, [r1]
9000ab36:	617b      	str	r3, [r7, #20]
   return(result);
9000ab38:	697b      	ldr	r3, [r7, #20]
9000ab3a:	2b00      	cmp	r3, #0
9000ab3c:	d1e5      	bne.n	9000ab0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000ab3e:	687b      	ldr	r3, [r7, #4]
9000ab40:	2220      	movs	r2, #32
9000ab42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000ab46:	687b      	ldr	r3, [r7, #4]
9000ab48:	2200      	movs	r2, #0
9000ab4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000ab4e:	2303      	movs	r3, #3
9000ab50:	e012      	b.n	9000ab78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000ab52:	687b      	ldr	r3, [r7, #4]
9000ab54:	2220      	movs	r2, #32
9000ab56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000ab5a:	687b      	ldr	r3, [r7, #4]
9000ab5c:	2220      	movs	r2, #32
9000ab5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ab62:	687b      	ldr	r3, [r7, #4]
9000ab64:	2200      	movs	r2, #0
9000ab66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000ab68:	687b      	ldr	r3, [r7, #4]
9000ab6a:	2200      	movs	r2, #0
9000ab6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000ab6e:	687b      	ldr	r3, [r7, #4]
9000ab70:	2200      	movs	r2, #0
9000ab72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ab76:	2300      	movs	r3, #0
}
9000ab78:	4618      	mov	r0, r3
9000ab7a:	3758      	adds	r7, #88	@ 0x58
9000ab7c:	46bd      	mov	sp, r7
9000ab7e:	bd80      	pop	{r7, pc}

9000ab80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000ab80:	b580      	push	{r7, lr}
9000ab82:	b084      	sub	sp, #16
9000ab84:	af00      	add	r7, sp, #0
9000ab86:	60f8      	str	r0, [r7, #12]
9000ab88:	60b9      	str	r1, [r7, #8]
9000ab8a:	603b      	str	r3, [r7, #0]
9000ab8c:	4613      	mov	r3, r2
9000ab8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000ab90:	e04f      	b.n	9000ac32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000ab92:	69bb      	ldr	r3, [r7, #24]
9000ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ab98:	d04b      	beq.n	9000ac32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab9a:	f7f8 fb9b 	bl	900032d4 <HAL_GetTick>
9000ab9e:	4602      	mov	r2, r0
9000aba0:	683b      	ldr	r3, [r7, #0]
9000aba2:	1ad3      	subs	r3, r2, r3
9000aba4:	69ba      	ldr	r2, [r7, #24]
9000aba6:	429a      	cmp	r2, r3
9000aba8:	d302      	bcc.n	9000abb0 <UART_WaitOnFlagUntilTimeout+0x30>
9000abaa:	69bb      	ldr	r3, [r7, #24]
9000abac:	2b00      	cmp	r3, #0
9000abae:	d101      	bne.n	9000abb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000abb0:	2303      	movs	r3, #3
9000abb2:	e04e      	b.n	9000ac52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000abb4:	68fb      	ldr	r3, [r7, #12]
9000abb6:	681b      	ldr	r3, [r3, #0]
9000abb8:	681b      	ldr	r3, [r3, #0]
9000abba:	f003 0304 	and.w	r3, r3, #4
9000abbe:	2b00      	cmp	r3, #0
9000abc0:	d037      	beq.n	9000ac32 <UART_WaitOnFlagUntilTimeout+0xb2>
9000abc2:	68bb      	ldr	r3, [r7, #8]
9000abc4:	2b80      	cmp	r3, #128	@ 0x80
9000abc6:	d034      	beq.n	9000ac32 <UART_WaitOnFlagUntilTimeout+0xb2>
9000abc8:	68bb      	ldr	r3, [r7, #8]
9000abca:	2b40      	cmp	r3, #64	@ 0x40
9000abcc:	d031      	beq.n	9000ac32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000abce:	68fb      	ldr	r3, [r7, #12]
9000abd0:	681b      	ldr	r3, [r3, #0]
9000abd2:	69db      	ldr	r3, [r3, #28]
9000abd4:	f003 0308 	and.w	r3, r3, #8
9000abd8:	2b08      	cmp	r3, #8
9000abda:	d110      	bne.n	9000abfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000abdc:	68fb      	ldr	r3, [r7, #12]
9000abde:	681b      	ldr	r3, [r3, #0]
9000abe0:	2208      	movs	r2, #8
9000abe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000abe4:	68f8      	ldr	r0, [r7, #12]
9000abe6:	f000 f839 	bl	9000ac5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000abea:	68fb      	ldr	r3, [r7, #12]
9000abec:	2208      	movs	r2, #8
9000abee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000abf2:	68fb      	ldr	r3, [r7, #12]
9000abf4:	2200      	movs	r2, #0
9000abf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000abfa:	2301      	movs	r3, #1
9000abfc:	e029      	b.n	9000ac52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000abfe:	68fb      	ldr	r3, [r7, #12]
9000ac00:	681b      	ldr	r3, [r3, #0]
9000ac02:	69db      	ldr	r3, [r3, #28]
9000ac04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000ac08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000ac0c:	d111      	bne.n	9000ac32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000ac0e:	68fb      	ldr	r3, [r7, #12]
9000ac10:	681b      	ldr	r3, [r3, #0]
9000ac12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000ac16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000ac18:	68f8      	ldr	r0, [r7, #12]
9000ac1a:	f000 f81f 	bl	9000ac5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000ac1e:	68fb      	ldr	r3, [r7, #12]
9000ac20:	2220      	movs	r2, #32
9000ac22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ac26:	68fb      	ldr	r3, [r7, #12]
9000ac28:	2200      	movs	r2, #0
9000ac2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000ac2e:	2303      	movs	r3, #3
9000ac30:	e00f      	b.n	9000ac52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000ac32:	68fb      	ldr	r3, [r7, #12]
9000ac34:	681b      	ldr	r3, [r3, #0]
9000ac36:	69da      	ldr	r2, [r3, #28]
9000ac38:	68bb      	ldr	r3, [r7, #8]
9000ac3a:	4013      	ands	r3, r2
9000ac3c:	68ba      	ldr	r2, [r7, #8]
9000ac3e:	429a      	cmp	r2, r3
9000ac40:	bf0c      	ite	eq
9000ac42:	2301      	moveq	r3, #1
9000ac44:	2300      	movne	r3, #0
9000ac46:	b2db      	uxtb	r3, r3
9000ac48:	461a      	mov	r2, r3
9000ac4a:	79fb      	ldrb	r3, [r7, #7]
9000ac4c:	429a      	cmp	r2, r3
9000ac4e:	d0a0      	beq.n	9000ab92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000ac50:	2300      	movs	r3, #0
}
9000ac52:	4618      	mov	r0, r3
9000ac54:	3710      	adds	r7, #16
9000ac56:	46bd      	mov	sp, r7
9000ac58:	bd80      	pop	{r7, pc}
	...

9000ac5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000ac5c:	b480      	push	{r7}
9000ac5e:	b095      	sub	sp, #84	@ 0x54
9000ac60:	af00      	add	r7, sp, #0
9000ac62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000ac64:	687b      	ldr	r3, [r7, #4]
9000ac66:	681b      	ldr	r3, [r3, #0]
9000ac68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ac6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000ac6c:	e853 3f00 	ldrex	r3, [r3]
9000ac70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000ac72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000ac74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000ac78:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000ac7a:	687b      	ldr	r3, [r7, #4]
9000ac7c:	681b      	ldr	r3, [r3, #0]
9000ac7e:	461a      	mov	r2, r3
9000ac80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000ac82:	643b      	str	r3, [r7, #64]	@ 0x40
9000ac84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ac86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000ac88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000ac8a:	e841 2300 	strex	r3, r2, [r1]
9000ac8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000ac90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ac92:	2b00      	cmp	r3, #0
9000ac94:	d1e6      	bne.n	9000ac64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000ac96:	687b      	ldr	r3, [r7, #4]
9000ac98:	681b      	ldr	r3, [r3, #0]
9000ac9a:	3308      	adds	r3, #8
9000ac9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ac9e:	6a3b      	ldr	r3, [r7, #32]
9000aca0:	e853 3f00 	ldrex	r3, [r3]
9000aca4:	61fb      	str	r3, [r7, #28]
   return(result);
9000aca6:	69fa      	ldr	r2, [r7, #28]
9000aca8:	4b1e      	ldr	r3, [pc, #120]	@ (9000ad24 <UART_EndRxTransfer+0xc8>)
9000acaa:	4013      	ands	r3, r2
9000acac:	64bb      	str	r3, [r7, #72]	@ 0x48
9000acae:	687b      	ldr	r3, [r7, #4]
9000acb0:	681b      	ldr	r3, [r3, #0]
9000acb2:	3308      	adds	r3, #8
9000acb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000acb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000acb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000acba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000acbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000acbe:	e841 2300 	strex	r3, r2, [r1]
9000acc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000acc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000acc6:	2b00      	cmp	r3, #0
9000acc8:	d1e5      	bne.n	9000ac96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000acca:	687b      	ldr	r3, [r7, #4]
9000accc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000acce:	2b01      	cmp	r3, #1
9000acd0:	d118      	bne.n	9000ad04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000acd2:	687b      	ldr	r3, [r7, #4]
9000acd4:	681b      	ldr	r3, [r3, #0]
9000acd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000acd8:	68fb      	ldr	r3, [r7, #12]
9000acda:	e853 3f00 	ldrex	r3, [r3]
9000acde:	60bb      	str	r3, [r7, #8]
   return(result);
9000ace0:	68bb      	ldr	r3, [r7, #8]
9000ace2:	f023 0310 	bic.w	r3, r3, #16
9000ace6:	647b      	str	r3, [r7, #68]	@ 0x44
9000ace8:	687b      	ldr	r3, [r7, #4]
9000acea:	681b      	ldr	r3, [r3, #0]
9000acec:	461a      	mov	r2, r3
9000acee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000acf0:	61bb      	str	r3, [r7, #24]
9000acf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000acf4:	6979      	ldr	r1, [r7, #20]
9000acf6:	69ba      	ldr	r2, [r7, #24]
9000acf8:	e841 2300 	strex	r3, r2, [r1]
9000acfc:	613b      	str	r3, [r7, #16]
   return(result);
9000acfe:	693b      	ldr	r3, [r7, #16]
9000ad00:	2b00      	cmp	r3, #0
9000ad02:	d1e6      	bne.n	9000acd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000ad04:	687b      	ldr	r3, [r7, #4]
9000ad06:	2220      	movs	r2, #32
9000ad08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ad0c:	687b      	ldr	r3, [r7, #4]
9000ad0e:	2200      	movs	r2, #0
9000ad10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000ad12:	687b      	ldr	r3, [r7, #4]
9000ad14:	2200      	movs	r2, #0
9000ad16:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000ad18:	bf00      	nop
9000ad1a:	3754      	adds	r7, #84	@ 0x54
9000ad1c:	46bd      	mov	sp, r7
9000ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad22:	4770      	bx	lr
9000ad24:	effffffe 	.word	0xeffffffe

9000ad28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000ad28:	b480      	push	{r7}
9000ad2a:	b085      	sub	sp, #20
9000ad2c:	af00      	add	r7, sp, #0
9000ad2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ad30:	687b      	ldr	r3, [r7, #4]
9000ad32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ad36:	2b01      	cmp	r3, #1
9000ad38:	d101      	bne.n	9000ad3e <HAL_UARTEx_DisableFifoMode+0x16>
9000ad3a:	2302      	movs	r3, #2
9000ad3c:	e027      	b.n	9000ad8e <HAL_UARTEx_DisableFifoMode+0x66>
9000ad3e:	687b      	ldr	r3, [r7, #4]
9000ad40:	2201      	movs	r2, #1
9000ad42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ad46:	687b      	ldr	r3, [r7, #4]
9000ad48:	2224      	movs	r2, #36	@ 0x24
9000ad4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ad4e:	687b      	ldr	r3, [r7, #4]
9000ad50:	681b      	ldr	r3, [r3, #0]
9000ad52:	681b      	ldr	r3, [r3, #0]
9000ad54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ad56:	687b      	ldr	r3, [r7, #4]
9000ad58:	681b      	ldr	r3, [r3, #0]
9000ad5a:	681a      	ldr	r2, [r3, #0]
9000ad5c:	687b      	ldr	r3, [r7, #4]
9000ad5e:	681b      	ldr	r3, [r3, #0]
9000ad60:	f022 0201 	bic.w	r2, r2, #1
9000ad64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000ad66:	68fb      	ldr	r3, [r7, #12]
9000ad68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000ad6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000ad6e:	687b      	ldr	r3, [r7, #4]
9000ad70:	2200      	movs	r2, #0
9000ad72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ad74:	687b      	ldr	r3, [r7, #4]
9000ad76:	681b      	ldr	r3, [r3, #0]
9000ad78:	68fa      	ldr	r2, [r7, #12]
9000ad7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ad7c:	687b      	ldr	r3, [r7, #4]
9000ad7e:	2220      	movs	r2, #32
9000ad80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ad84:	687b      	ldr	r3, [r7, #4]
9000ad86:	2200      	movs	r2, #0
9000ad88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ad8c:	2300      	movs	r3, #0
}
9000ad8e:	4618      	mov	r0, r3
9000ad90:	3714      	adds	r7, #20
9000ad92:	46bd      	mov	sp, r7
9000ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad98:	4770      	bx	lr

9000ad9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ad9a:	b580      	push	{r7, lr}
9000ad9c:	b084      	sub	sp, #16
9000ad9e:	af00      	add	r7, sp, #0
9000ada0:	6078      	str	r0, [r7, #4]
9000ada2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ada4:	687b      	ldr	r3, [r7, #4]
9000ada6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000adaa:	2b01      	cmp	r3, #1
9000adac:	d101      	bne.n	9000adb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000adae:	2302      	movs	r3, #2
9000adb0:	e02d      	b.n	9000ae0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000adb2:	687b      	ldr	r3, [r7, #4]
9000adb4:	2201      	movs	r2, #1
9000adb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000adba:	687b      	ldr	r3, [r7, #4]
9000adbc:	2224      	movs	r2, #36	@ 0x24
9000adbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000adc2:	687b      	ldr	r3, [r7, #4]
9000adc4:	681b      	ldr	r3, [r3, #0]
9000adc6:	681b      	ldr	r3, [r3, #0]
9000adc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000adca:	687b      	ldr	r3, [r7, #4]
9000adcc:	681b      	ldr	r3, [r3, #0]
9000adce:	681a      	ldr	r2, [r3, #0]
9000add0:	687b      	ldr	r3, [r7, #4]
9000add2:	681b      	ldr	r3, [r3, #0]
9000add4:	f022 0201 	bic.w	r2, r2, #1
9000add8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000adda:	687b      	ldr	r3, [r7, #4]
9000addc:	681b      	ldr	r3, [r3, #0]
9000adde:	689b      	ldr	r3, [r3, #8]
9000ade0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000ade4:	687b      	ldr	r3, [r7, #4]
9000ade6:	681b      	ldr	r3, [r3, #0]
9000ade8:	683a      	ldr	r2, [r7, #0]
9000adea:	430a      	orrs	r2, r1
9000adec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000adee:	6878      	ldr	r0, [r7, #4]
9000adf0:	f000 f850 	bl	9000ae94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000adf4:	687b      	ldr	r3, [r7, #4]
9000adf6:	681b      	ldr	r3, [r3, #0]
9000adf8:	68fa      	ldr	r2, [r7, #12]
9000adfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000adfc:	687b      	ldr	r3, [r7, #4]
9000adfe:	2220      	movs	r2, #32
9000ae00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ae04:	687b      	ldr	r3, [r7, #4]
9000ae06:	2200      	movs	r2, #0
9000ae08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ae0c:	2300      	movs	r3, #0
}
9000ae0e:	4618      	mov	r0, r3
9000ae10:	3710      	adds	r7, #16
9000ae12:	46bd      	mov	sp, r7
9000ae14:	bd80      	pop	{r7, pc}

9000ae16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ae16:	b580      	push	{r7, lr}
9000ae18:	b084      	sub	sp, #16
9000ae1a:	af00      	add	r7, sp, #0
9000ae1c:	6078      	str	r0, [r7, #4]
9000ae1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ae20:	687b      	ldr	r3, [r7, #4]
9000ae22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ae26:	2b01      	cmp	r3, #1
9000ae28:	d101      	bne.n	9000ae2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000ae2a:	2302      	movs	r3, #2
9000ae2c:	e02d      	b.n	9000ae8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000ae2e:	687b      	ldr	r3, [r7, #4]
9000ae30:	2201      	movs	r2, #1
9000ae32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ae36:	687b      	ldr	r3, [r7, #4]
9000ae38:	2224      	movs	r2, #36	@ 0x24
9000ae3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ae3e:	687b      	ldr	r3, [r7, #4]
9000ae40:	681b      	ldr	r3, [r3, #0]
9000ae42:	681b      	ldr	r3, [r3, #0]
9000ae44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ae46:	687b      	ldr	r3, [r7, #4]
9000ae48:	681b      	ldr	r3, [r3, #0]
9000ae4a:	681a      	ldr	r2, [r3, #0]
9000ae4c:	687b      	ldr	r3, [r7, #4]
9000ae4e:	681b      	ldr	r3, [r3, #0]
9000ae50:	f022 0201 	bic.w	r2, r2, #1
9000ae54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000ae56:	687b      	ldr	r3, [r7, #4]
9000ae58:	681b      	ldr	r3, [r3, #0]
9000ae5a:	689b      	ldr	r3, [r3, #8]
9000ae5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000ae60:	687b      	ldr	r3, [r7, #4]
9000ae62:	681b      	ldr	r3, [r3, #0]
9000ae64:	683a      	ldr	r2, [r7, #0]
9000ae66:	430a      	orrs	r2, r1
9000ae68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ae6a:	6878      	ldr	r0, [r7, #4]
9000ae6c:	f000 f812 	bl	9000ae94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ae70:	687b      	ldr	r3, [r7, #4]
9000ae72:	681b      	ldr	r3, [r3, #0]
9000ae74:	68fa      	ldr	r2, [r7, #12]
9000ae76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ae78:	687b      	ldr	r3, [r7, #4]
9000ae7a:	2220      	movs	r2, #32
9000ae7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ae80:	687b      	ldr	r3, [r7, #4]
9000ae82:	2200      	movs	r2, #0
9000ae84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ae88:	2300      	movs	r3, #0
}
9000ae8a:	4618      	mov	r0, r3
9000ae8c:	3710      	adds	r7, #16
9000ae8e:	46bd      	mov	sp, r7
9000ae90:	bd80      	pop	{r7, pc}
	...

9000ae94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000ae94:	b480      	push	{r7}
9000ae96:	b085      	sub	sp, #20
9000ae98:	af00      	add	r7, sp, #0
9000ae9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000ae9c:	687b      	ldr	r3, [r7, #4]
9000ae9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000aea0:	2b00      	cmp	r3, #0
9000aea2:	d108      	bne.n	9000aeb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000aea4:	687b      	ldr	r3, [r7, #4]
9000aea6:	2201      	movs	r2, #1
9000aea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000aeac:	687b      	ldr	r3, [r7, #4]
9000aeae:	2201      	movs	r2, #1
9000aeb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000aeb4:	e031      	b.n	9000af1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000aeb6:	2310      	movs	r3, #16
9000aeb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000aeba:	2310      	movs	r3, #16
9000aebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000aebe:	687b      	ldr	r3, [r7, #4]
9000aec0:	681b      	ldr	r3, [r3, #0]
9000aec2:	689b      	ldr	r3, [r3, #8]
9000aec4:	0e5b      	lsrs	r3, r3, #25
9000aec6:	b2db      	uxtb	r3, r3
9000aec8:	f003 0307 	and.w	r3, r3, #7
9000aecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000aece:	687b      	ldr	r3, [r7, #4]
9000aed0:	681b      	ldr	r3, [r3, #0]
9000aed2:	689b      	ldr	r3, [r3, #8]
9000aed4:	0f5b      	lsrs	r3, r3, #29
9000aed6:	b2db      	uxtb	r3, r3
9000aed8:	f003 0307 	and.w	r3, r3, #7
9000aedc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000aede:	7bbb      	ldrb	r3, [r7, #14]
9000aee0:	7b3a      	ldrb	r2, [r7, #12]
9000aee2:	4911      	ldr	r1, [pc, #68]	@ (9000af28 <UARTEx_SetNbDataToProcess+0x94>)
9000aee4:	5c8a      	ldrb	r2, [r1, r2]
9000aee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000aeea:	7b3a      	ldrb	r2, [r7, #12]
9000aeec:	490f      	ldr	r1, [pc, #60]	@ (9000af2c <UARTEx_SetNbDataToProcess+0x98>)
9000aeee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000aef0:	fb93 f3f2 	sdiv	r3, r3, r2
9000aef4:	b29a      	uxth	r2, r3
9000aef6:	687b      	ldr	r3, [r7, #4]
9000aef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000aefc:	7bfb      	ldrb	r3, [r7, #15]
9000aefe:	7b7a      	ldrb	r2, [r7, #13]
9000af00:	4909      	ldr	r1, [pc, #36]	@ (9000af28 <UARTEx_SetNbDataToProcess+0x94>)
9000af02:	5c8a      	ldrb	r2, [r1, r2]
9000af04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000af08:	7b7a      	ldrb	r2, [r7, #13]
9000af0a:	4908      	ldr	r1, [pc, #32]	@ (9000af2c <UARTEx_SetNbDataToProcess+0x98>)
9000af0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000af0e:	fb93 f3f2 	sdiv	r3, r3, r2
9000af12:	b29a      	uxth	r2, r3
9000af14:	687b      	ldr	r3, [r7, #4]
9000af16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000af1a:	bf00      	nop
9000af1c:	3714      	adds	r7, #20
9000af1e:	46bd      	mov	sp, r7
9000af20:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af24:	4770      	bx	lr
9000af26:	bf00      	nop
9000af28:	9000d808 	.word	0x9000d808
9000af2c:	9000d810 	.word	0x9000d810

9000af30 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000af30:	b480      	push	{r7}
9000af32:	b083      	sub	sp, #12
9000af34:	af00      	add	r7, sp, #0
9000af36:	6078      	str	r0, [r7, #4]
9000af38:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000af3a:	683b      	ldr	r3, [r7, #0]
9000af3c:	681b      	ldr	r3, [r3, #0]
9000af3e:	2b00      	cmp	r3, #0
9000af40:	d121      	bne.n	9000af86 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000af42:	687b      	ldr	r3, [r7, #4]
9000af44:	681a      	ldr	r2, [r3, #0]
9000af46:	4b27      	ldr	r3, [pc, #156]	@ (9000afe4 <FMC_SDRAM_Init+0xb4>)
9000af48:	4013      	ands	r3, r2
9000af4a:	683a      	ldr	r2, [r7, #0]
9000af4c:	6851      	ldr	r1, [r2, #4]
9000af4e:	683a      	ldr	r2, [r7, #0]
9000af50:	6892      	ldr	r2, [r2, #8]
9000af52:	4311      	orrs	r1, r2
9000af54:	683a      	ldr	r2, [r7, #0]
9000af56:	68d2      	ldr	r2, [r2, #12]
9000af58:	4311      	orrs	r1, r2
9000af5a:	683a      	ldr	r2, [r7, #0]
9000af5c:	6912      	ldr	r2, [r2, #16]
9000af5e:	4311      	orrs	r1, r2
9000af60:	683a      	ldr	r2, [r7, #0]
9000af62:	6952      	ldr	r2, [r2, #20]
9000af64:	4311      	orrs	r1, r2
9000af66:	683a      	ldr	r2, [r7, #0]
9000af68:	6992      	ldr	r2, [r2, #24]
9000af6a:	4311      	orrs	r1, r2
9000af6c:	683a      	ldr	r2, [r7, #0]
9000af6e:	69d2      	ldr	r2, [r2, #28]
9000af70:	4311      	orrs	r1, r2
9000af72:	683a      	ldr	r2, [r7, #0]
9000af74:	6a12      	ldr	r2, [r2, #32]
9000af76:	4311      	orrs	r1, r2
9000af78:	683a      	ldr	r2, [r7, #0]
9000af7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000af7c:	430a      	orrs	r2, r1
9000af7e:	431a      	orrs	r2, r3
9000af80:	687b      	ldr	r3, [r7, #4]
9000af82:	601a      	str	r2, [r3, #0]
9000af84:	e026      	b.n	9000afd4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000af86:	687b      	ldr	r3, [r7, #4]
9000af88:	681b      	ldr	r3, [r3, #0]
9000af8a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000af8e:	683b      	ldr	r3, [r7, #0]
9000af90:	69d9      	ldr	r1, [r3, #28]
9000af92:	683b      	ldr	r3, [r7, #0]
9000af94:	6a1b      	ldr	r3, [r3, #32]
9000af96:	4319      	orrs	r1, r3
9000af98:	683b      	ldr	r3, [r7, #0]
9000af9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000af9c:	430b      	orrs	r3, r1
9000af9e:	431a      	orrs	r2, r3
9000afa0:	687b      	ldr	r3, [r7, #4]
9000afa2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000afa4:	687b      	ldr	r3, [r7, #4]
9000afa6:	685a      	ldr	r2, [r3, #4]
9000afa8:	4b0e      	ldr	r3, [pc, #56]	@ (9000afe4 <FMC_SDRAM_Init+0xb4>)
9000afaa:	4013      	ands	r3, r2
9000afac:	683a      	ldr	r2, [r7, #0]
9000afae:	6851      	ldr	r1, [r2, #4]
9000afb0:	683a      	ldr	r2, [r7, #0]
9000afb2:	6892      	ldr	r2, [r2, #8]
9000afb4:	4311      	orrs	r1, r2
9000afb6:	683a      	ldr	r2, [r7, #0]
9000afb8:	68d2      	ldr	r2, [r2, #12]
9000afba:	4311      	orrs	r1, r2
9000afbc:	683a      	ldr	r2, [r7, #0]
9000afbe:	6912      	ldr	r2, [r2, #16]
9000afc0:	4311      	orrs	r1, r2
9000afc2:	683a      	ldr	r2, [r7, #0]
9000afc4:	6952      	ldr	r2, [r2, #20]
9000afc6:	4311      	orrs	r1, r2
9000afc8:	683a      	ldr	r2, [r7, #0]
9000afca:	6992      	ldr	r2, [r2, #24]
9000afcc:	430a      	orrs	r2, r1
9000afce:	431a      	orrs	r2, r3
9000afd0:	687b      	ldr	r3, [r7, #4]
9000afd2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000afd4:	2300      	movs	r3, #0
}
9000afd6:	4618      	mov	r0, r3
9000afd8:	370c      	adds	r7, #12
9000afda:	46bd      	mov	sp, r7
9000afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000afe0:	4770      	bx	lr
9000afe2:	bf00      	nop
9000afe4:	ffff8000 	.word	0xffff8000

9000afe8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000afe8:	b480      	push	{r7}
9000afea:	b085      	sub	sp, #20
9000afec:	af00      	add	r7, sp, #0
9000afee:	60f8      	str	r0, [r7, #12]
9000aff0:	60b9      	str	r1, [r7, #8]
9000aff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000aff4:	687b      	ldr	r3, [r7, #4]
9000aff6:	2b00      	cmp	r3, #0
9000aff8:	d128      	bne.n	9000b04c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000affa:	68fb      	ldr	r3, [r7, #12]
9000affc:	689b      	ldr	r3, [r3, #8]
9000affe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b002:	68bb      	ldr	r3, [r7, #8]
9000b004:	681b      	ldr	r3, [r3, #0]
9000b006:	1e59      	subs	r1, r3, #1
9000b008:	68bb      	ldr	r3, [r7, #8]
9000b00a:	685b      	ldr	r3, [r3, #4]
9000b00c:	3b01      	subs	r3, #1
9000b00e:	011b      	lsls	r3, r3, #4
9000b010:	4319      	orrs	r1, r3
9000b012:	68bb      	ldr	r3, [r7, #8]
9000b014:	689b      	ldr	r3, [r3, #8]
9000b016:	3b01      	subs	r3, #1
9000b018:	021b      	lsls	r3, r3, #8
9000b01a:	4319      	orrs	r1, r3
9000b01c:	68bb      	ldr	r3, [r7, #8]
9000b01e:	68db      	ldr	r3, [r3, #12]
9000b020:	3b01      	subs	r3, #1
9000b022:	031b      	lsls	r3, r3, #12
9000b024:	4319      	orrs	r1, r3
9000b026:	68bb      	ldr	r3, [r7, #8]
9000b028:	691b      	ldr	r3, [r3, #16]
9000b02a:	3b01      	subs	r3, #1
9000b02c:	041b      	lsls	r3, r3, #16
9000b02e:	4319      	orrs	r1, r3
9000b030:	68bb      	ldr	r3, [r7, #8]
9000b032:	695b      	ldr	r3, [r3, #20]
9000b034:	3b01      	subs	r3, #1
9000b036:	051b      	lsls	r3, r3, #20
9000b038:	4319      	orrs	r1, r3
9000b03a:	68bb      	ldr	r3, [r7, #8]
9000b03c:	699b      	ldr	r3, [r3, #24]
9000b03e:	3b01      	subs	r3, #1
9000b040:	061b      	lsls	r3, r3, #24
9000b042:	430b      	orrs	r3, r1
9000b044:	431a      	orrs	r2, r3
9000b046:	68fb      	ldr	r3, [r7, #12]
9000b048:	609a      	str	r2, [r3, #8]
9000b04a:	e02d      	b.n	9000b0a8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b04c:	68fb      	ldr	r3, [r7, #12]
9000b04e:	689a      	ldr	r2, [r3, #8]
9000b050:	4b19      	ldr	r3, [pc, #100]	@ (9000b0b8 <FMC_SDRAM_Timing_Init+0xd0>)
9000b052:	4013      	ands	r3, r2
9000b054:	68ba      	ldr	r2, [r7, #8]
9000b056:	68d2      	ldr	r2, [r2, #12]
9000b058:	3a01      	subs	r2, #1
9000b05a:	0311      	lsls	r1, r2, #12
9000b05c:	68ba      	ldr	r2, [r7, #8]
9000b05e:	6952      	ldr	r2, [r2, #20]
9000b060:	3a01      	subs	r2, #1
9000b062:	0512      	lsls	r2, r2, #20
9000b064:	430a      	orrs	r2, r1
9000b066:	431a      	orrs	r2, r3
9000b068:	68fb      	ldr	r3, [r7, #12]
9000b06a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000b06c:	68fb      	ldr	r3, [r7, #12]
9000b06e:	68db      	ldr	r3, [r3, #12]
9000b070:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b074:	68bb      	ldr	r3, [r7, #8]
9000b076:	681b      	ldr	r3, [r3, #0]
9000b078:	1e59      	subs	r1, r3, #1
9000b07a:	68bb      	ldr	r3, [r7, #8]
9000b07c:	685b      	ldr	r3, [r3, #4]
9000b07e:	3b01      	subs	r3, #1
9000b080:	011b      	lsls	r3, r3, #4
9000b082:	4319      	orrs	r1, r3
9000b084:	68bb      	ldr	r3, [r7, #8]
9000b086:	689b      	ldr	r3, [r3, #8]
9000b088:	3b01      	subs	r3, #1
9000b08a:	021b      	lsls	r3, r3, #8
9000b08c:	4319      	orrs	r1, r3
9000b08e:	68bb      	ldr	r3, [r7, #8]
9000b090:	691b      	ldr	r3, [r3, #16]
9000b092:	3b01      	subs	r3, #1
9000b094:	041b      	lsls	r3, r3, #16
9000b096:	4319      	orrs	r1, r3
9000b098:	68bb      	ldr	r3, [r7, #8]
9000b09a:	699b      	ldr	r3, [r3, #24]
9000b09c:	3b01      	subs	r3, #1
9000b09e:	061b      	lsls	r3, r3, #24
9000b0a0:	430b      	orrs	r3, r1
9000b0a2:	431a      	orrs	r2, r3
9000b0a4:	68fb      	ldr	r3, [r7, #12]
9000b0a6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000b0a8:	2300      	movs	r3, #0
}
9000b0aa:	4618      	mov	r0, r3
9000b0ac:	3714      	adds	r7, #20
9000b0ae:	46bd      	mov	sp, r7
9000b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0b4:	4770      	bx	lr
9000b0b6:	bf00      	nop
9000b0b8:	ff0f0fff 	.word	0xff0f0fff

9000b0bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000b0bc:	b480      	push	{r7}
9000b0be:	b085      	sub	sp, #20
9000b0c0:	af00      	add	r7, sp, #0
9000b0c2:	60f8      	str	r0, [r7, #12]
9000b0c4:	60b9      	str	r1, [r7, #8]
9000b0c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000b0c8:	68fb      	ldr	r3, [r7, #12]
9000b0ca:	691a      	ldr	r2, [r3, #16]
9000b0cc:	4b0c      	ldr	r3, [pc, #48]	@ (9000b100 <FMC_SDRAM_SendCommand+0x44>)
9000b0ce:	4013      	ands	r3, r2
9000b0d0:	68ba      	ldr	r2, [r7, #8]
9000b0d2:	6811      	ldr	r1, [r2, #0]
9000b0d4:	68ba      	ldr	r2, [r7, #8]
9000b0d6:	6852      	ldr	r2, [r2, #4]
9000b0d8:	4311      	orrs	r1, r2
9000b0da:	68ba      	ldr	r2, [r7, #8]
9000b0dc:	6892      	ldr	r2, [r2, #8]
9000b0de:	3a01      	subs	r2, #1
9000b0e0:	0152      	lsls	r2, r2, #5
9000b0e2:	4311      	orrs	r1, r2
9000b0e4:	68ba      	ldr	r2, [r7, #8]
9000b0e6:	68d2      	ldr	r2, [r2, #12]
9000b0e8:	0252      	lsls	r2, r2, #9
9000b0ea:	430a      	orrs	r2, r1
9000b0ec:	431a      	orrs	r2, r3
9000b0ee:	68fb      	ldr	r3, [r7, #12]
9000b0f0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000b0f2:	2300      	movs	r3, #0
}
9000b0f4:	4618      	mov	r0, r3
9000b0f6:	3714      	adds	r7, #20
9000b0f8:	46bd      	mov	sp, r7
9000b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0fe:	4770      	bx	lr
9000b100:	ffc00000 	.word	0xffc00000

9000b104 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000b104:	b480      	push	{r7}
9000b106:	b083      	sub	sp, #12
9000b108:	af00      	add	r7, sp, #0
9000b10a:	6078      	str	r0, [r7, #4]
9000b10c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000b10e:	687b      	ldr	r3, [r7, #4]
9000b110:	695a      	ldr	r2, [r3, #20]
9000b112:	4b07      	ldr	r3, [pc, #28]	@ (9000b130 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000b114:	4013      	ands	r3, r2
9000b116:	683a      	ldr	r2, [r7, #0]
9000b118:	0052      	lsls	r2, r2, #1
9000b11a:	431a      	orrs	r2, r3
9000b11c:	687b      	ldr	r3, [r7, #4]
9000b11e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000b120:	2300      	movs	r3, #0
}
9000b122:	4618      	mov	r0, r3
9000b124:	370c      	adds	r7, #12
9000b126:	46bd      	mov	sp, r7
9000b128:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b12c:	4770      	bx	lr
9000b12e:	bf00      	nop
9000b130:	ffffc001 	.word	0xffffc001

9000b134 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b134:	b480      	push	{r7}
9000b136:	b083      	sub	sp, #12
9000b138:	af00      	add	r7, sp, #0
9000b13a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000b13c:	687b      	ldr	r3, [r7, #4]
9000b13e:	689b      	ldr	r3, [r3, #8]
9000b140:	f043 0201 	orr.w	r2, r3, #1
9000b144:	687b      	ldr	r3, [r7, #4]
9000b146:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b148:	2300      	movs	r3, #0
}
9000b14a:	4618      	mov	r0, r3
9000b14c:	370c      	adds	r7, #12
9000b14e:	46bd      	mov	sp, r7
9000b150:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b154:	4770      	bx	lr

9000b156 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b156:	b480      	push	{r7}
9000b158:	b083      	sub	sp, #12
9000b15a:	af00      	add	r7, sp, #0
9000b15c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000b15e:	687b      	ldr	r3, [r7, #4]
9000b160:	689b      	ldr	r3, [r3, #8]
9000b162:	f023 0201 	bic.w	r2, r3, #1
9000b166:	687b      	ldr	r3, [r7, #4]
9000b168:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b16a:	2300      	movs	r3, #0
}
9000b16c:	4618      	mov	r0, r3
9000b16e:	370c      	adds	r7, #12
9000b170:	46bd      	mov	sp, r7
9000b172:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b176:	4770      	bx	lr

9000b178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000b178:	b480      	push	{r7}
9000b17a:	b085      	sub	sp, #20
9000b17c:	af00      	add	r7, sp, #0
9000b17e:	6078      	str	r0, [r7, #4]
9000b180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000b182:	2300      	movs	r3, #0
9000b184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b186:	68fb      	ldr	r3, [r7, #12]
9000b188:	3301      	adds	r3, #1
9000b18a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b18c:	68fb      	ldr	r3, [r7, #12]
9000b18e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b192:	d901      	bls.n	9000b198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000b194:	2303      	movs	r3, #3
9000b196:	e01b      	b.n	9000b1d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b198:	687b      	ldr	r3, [r7, #4]
9000b19a:	691b      	ldr	r3, [r3, #16]
9000b19c:	2b00      	cmp	r3, #0
9000b19e:	daf2      	bge.n	9000b186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000b1a0:	2300      	movs	r3, #0
9000b1a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000b1a4:	683b      	ldr	r3, [r7, #0]
9000b1a6:	019b      	lsls	r3, r3, #6
9000b1a8:	f043 0220 	orr.w	r2, r3, #32
9000b1ac:	687b      	ldr	r3, [r7, #4]
9000b1ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b1b0:	68fb      	ldr	r3, [r7, #12]
9000b1b2:	3301      	adds	r3, #1
9000b1b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b1b6:	68fb      	ldr	r3, [r7, #12]
9000b1b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b1bc:	d901      	bls.n	9000b1c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000b1be:	2303      	movs	r3, #3
9000b1c0:	e006      	b.n	9000b1d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000b1c2:	687b      	ldr	r3, [r7, #4]
9000b1c4:	691b      	ldr	r3, [r3, #16]
9000b1c6:	f003 0320 	and.w	r3, r3, #32
9000b1ca:	2b20      	cmp	r3, #32
9000b1cc:	d0f0      	beq.n	9000b1b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000b1ce:	2300      	movs	r3, #0
}
9000b1d0:	4618      	mov	r0, r3
9000b1d2:	3714      	adds	r7, #20
9000b1d4:	46bd      	mov	sp, r7
9000b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1da:	4770      	bx	lr

9000b1dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000b1dc:	b480      	push	{r7}
9000b1de:	b085      	sub	sp, #20
9000b1e0:	af00      	add	r7, sp, #0
9000b1e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000b1e4:	2300      	movs	r3, #0
9000b1e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b1e8:	68fb      	ldr	r3, [r7, #12]
9000b1ea:	3301      	adds	r3, #1
9000b1ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b1ee:	68fb      	ldr	r3, [r7, #12]
9000b1f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b1f4:	d901      	bls.n	9000b1fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000b1f6:	2303      	movs	r3, #3
9000b1f8:	e018      	b.n	9000b22c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b1fa:	687b      	ldr	r3, [r7, #4]
9000b1fc:	691b      	ldr	r3, [r3, #16]
9000b1fe:	2b00      	cmp	r3, #0
9000b200:	daf2      	bge.n	9000b1e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000b202:	2300      	movs	r3, #0
9000b204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000b206:	687b      	ldr	r3, [r7, #4]
9000b208:	2210      	movs	r2, #16
9000b20a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b20c:	68fb      	ldr	r3, [r7, #12]
9000b20e:	3301      	adds	r3, #1
9000b210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b212:	68fb      	ldr	r3, [r7, #12]
9000b214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b218:	d901      	bls.n	9000b21e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b21a:	2303      	movs	r3, #3
9000b21c:	e006      	b.n	9000b22c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b21e:	687b      	ldr	r3, [r7, #4]
9000b220:	691b      	ldr	r3, [r3, #16]
9000b222:	f003 0310 	and.w	r3, r3, #16
9000b226:	2b10      	cmp	r3, #16
9000b228:	d0f0      	beq.n	9000b20c <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b22a:	2300      	movs	r3, #0
}
9000b22c:	4618      	mov	r0, r3
9000b22e:	3714      	adds	r7, #20
9000b230:	46bd      	mov	sp, r7
9000b232:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b236:	4770      	bx	lr

9000b238 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b238:	b480      	push	{r7}
9000b23a:	b08b      	sub	sp, #44	@ 0x2c
9000b23c:	af00      	add	r7, sp, #0
9000b23e:	60f8      	str	r0, [r7, #12]
9000b240:	60b9      	str	r1, [r7, #8]
9000b242:	4613      	mov	r3, r2
9000b244:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b246:	68fb      	ldr	r3, [r7, #12]
9000b248:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b24a:	68bb      	ldr	r3, [r7, #8]
9000b24c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b24e:	88fb      	ldrh	r3, [r7, #6]
9000b250:	089b      	lsrs	r3, r3, #2
9000b252:	b29b      	uxth	r3, r3
9000b254:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b256:	88fb      	ldrh	r3, [r7, #6]
9000b258:	f003 0303 	and.w	r3, r3, #3
9000b25c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b25e:	2300      	movs	r3, #0
9000b260:	623b      	str	r3, [r7, #32]
9000b262:	e014      	b.n	9000b28e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b264:	69bb      	ldr	r3, [r7, #24]
9000b266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b26a:	681a      	ldr	r2, [r3, #0]
9000b26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b26e:	601a      	str	r2, [r3, #0]
    pDest++;
9000b270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b272:	3301      	adds	r3, #1
9000b274:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b278:	3301      	adds	r3, #1
9000b27a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b27e:	3301      	adds	r3, #1
9000b280:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b284:	3301      	adds	r3, #1
9000b286:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b288:	6a3b      	ldr	r3, [r7, #32]
9000b28a:	3301      	adds	r3, #1
9000b28c:	623b      	str	r3, [r7, #32]
9000b28e:	6a3a      	ldr	r2, [r7, #32]
9000b290:	697b      	ldr	r3, [r7, #20]
9000b292:	429a      	cmp	r2, r3
9000b294:	d3e6      	bcc.n	9000b264 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b296:	8bfb      	ldrh	r3, [r7, #30]
9000b298:	2b00      	cmp	r3, #0
9000b29a:	d01e      	beq.n	9000b2da <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b29c:	2300      	movs	r3, #0
9000b29e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b2a0:	69bb      	ldr	r3, [r7, #24]
9000b2a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b2a6:	461a      	mov	r2, r3
9000b2a8:	f107 0310 	add.w	r3, r7, #16
9000b2ac:	6812      	ldr	r2, [r2, #0]
9000b2ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b2b0:	693a      	ldr	r2, [r7, #16]
9000b2b2:	6a3b      	ldr	r3, [r7, #32]
9000b2b4:	b2db      	uxtb	r3, r3
9000b2b6:	00db      	lsls	r3, r3, #3
9000b2b8:	fa22 f303 	lsr.w	r3, r2, r3
9000b2bc:	b2da      	uxtb	r2, r3
9000b2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b2c0:	701a      	strb	r2, [r3, #0]
      i++;
9000b2c2:	6a3b      	ldr	r3, [r7, #32]
9000b2c4:	3301      	adds	r3, #1
9000b2c6:	623b      	str	r3, [r7, #32]
      pDest++;
9000b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b2ca:	3301      	adds	r3, #1
9000b2cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b2ce:	8bfb      	ldrh	r3, [r7, #30]
9000b2d0:	3b01      	subs	r3, #1
9000b2d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b2d4:	8bfb      	ldrh	r3, [r7, #30]
9000b2d6:	2b00      	cmp	r3, #0
9000b2d8:	d1ea      	bne.n	9000b2b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b2dc:	4618      	mov	r0, r3
9000b2de:	372c      	adds	r7, #44	@ 0x2c
9000b2e0:	46bd      	mov	sp, r7
9000b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2e6:	4770      	bx	lr

9000b2e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b2e8:	b480      	push	{r7}
9000b2ea:	b085      	sub	sp, #20
9000b2ec:	af00      	add	r7, sp, #0
9000b2ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b2f0:	687b      	ldr	r3, [r7, #4]
9000b2f2:	695b      	ldr	r3, [r3, #20]
9000b2f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b2f6:	687b      	ldr	r3, [r7, #4]
9000b2f8:	699b      	ldr	r3, [r3, #24]
9000b2fa:	68fa      	ldr	r2, [r7, #12]
9000b2fc:	4013      	ands	r3, r2
9000b2fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b300:	68fb      	ldr	r3, [r7, #12]
}
9000b302:	4618      	mov	r0, r3
9000b304:	3714      	adds	r7, #20
9000b306:	46bd      	mov	sp, r7
9000b308:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b30c:	4770      	bx	lr

9000b30e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b30e:	b480      	push	{r7}
9000b310:	b085      	sub	sp, #20
9000b312:	af00      	add	r7, sp, #0
9000b314:	6078      	str	r0, [r7, #4]
9000b316:	460b      	mov	r3, r1
9000b318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b31a:	687b      	ldr	r3, [r7, #4]
9000b31c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b31e:	78fb      	ldrb	r3, [r7, #3]
9000b320:	015a      	lsls	r2, r3, #5
9000b322:	68fb      	ldr	r3, [r7, #12]
9000b324:	4413      	add	r3, r2
9000b326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b32a:	689b      	ldr	r3, [r3, #8]
9000b32c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b32e:	78fb      	ldrb	r3, [r7, #3]
9000b330:	015a      	lsls	r2, r3, #5
9000b332:	68fb      	ldr	r3, [r7, #12]
9000b334:	4413      	add	r3, r2
9000b336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b33a:	68db      	ldr	r3, [r3, #12]
9000b33c:	68ba      	ldr	r2, [r7, #8]
9000b33e:	4013      	ands	r3, r2
9000b340:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b342:	68bb      	ldr	r3, [r7, #8]
}
9000b344:	4618      	mov	r0, r3
9000b346:	3714      	adds	r7, #20
9000b348:	46bd      	mov	sp, r7
9000b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b34e:	4770      	bx	lr

9000b350 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b350:	b480      	push	{r7}
9000b352:	b083      	sub	sp, #12
9000b354:	af00      	add	r7, sp, #0
9000b356:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b358:	687b      	ldr	r3, [r7, #4]
9000b35a:	695b      	ldr	r3, [r3, #20]
9000b35c:	f003 0301 	and.w	r3, r3, #1
}
9000b360:	4618      	mov	r0, r3
9000b362:	370c      	adds	r7, #12
9000b364:	46bd      	mov	sp, r7
9000b366:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b36a:	4770      	bx	lr

9000b36c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b36c:	b480      	push	{r7}
9000b36e:	b085      	sub	sp, #20
9000b370:	af00      	add	r7, sp, #0
9000b372:	6078      	str	r0, [r7, #4]
9000b374:	460b      	mov	r3, r1
9000b376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b378:	687b      	ldr	r3, [r7, #4]
9000b37a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b37c:	68fb      	ldr	r3, [r7, #12]
9000b37e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b382:	681b      	ldr	r3, [r3, #0]
9000b384:	68fa      	ldr	r2, [r7, #12]
9000b386:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b38a:	f023 0303 	bic.w	r3, r3, #3
9000b38e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b390:	68fb      	ldr	r3, [r7, #12]
9000b392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b396:	681a      	ldr	r2, [r3, #0]
9000b398:	78fb      	ldrb	r3, [r7, #3]
9000b39a:	f003 0303 	and.w	r3, r3, #3
9000b39e:	68f9      	ldr	r1, [r7, #12]
9000b3a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b3a4:	4313      	orrs	r3, r2
9000b3a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b3a8:	78fb      	ldrb	r3, [r7, #3]
9000b3aa:	2b01      	cmp	r3, #1
9000b3ac:	d107      	bne.n	9000b3be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b3ae:	68fb      	ldr	r3, [r7, #12]
9000b3b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b3b4:	461a      	mov	r2, r3
9000b3b6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b3ba:	6053      	str	r3, [r2, #4]
9000b3bc:	e00c      	b.n	9000b3d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b3be:	78fb      	ldrb	r3, [r7, #3]
9000b3c0:	2b02      	cmp	r3, #2
9000b3c2:	d107      	bne.n	9000b3d4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b3c4:	68fb      	ldr	r3, [r7, #12]
9000b3c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b3ca:	461a      	mov	r2, r3
9000b3cc:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b3d0:	6053      	str	r3, [r2, #4]
9000b3d2:	e001      	b.n	9000b3d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b3d4:	2301      	movs	r3, #1
9000b3d6:	e000      	b.n	9000b3da <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b3d8:	2300      	movs	r3, #0
}
9000b3da:	4618      	mov	r0, r3
9000b3dc:	3714      	adds	r7, #20
9000b3de:	46bd      	mov	sp, r7
9000b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b3e4:	4770      	bx	lr

9000b3e6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b3e6:	b480      	push	{r7}
9000b3e8:	b085      	sub	sp, #20
9000b3ea:	af00      	add	r7, sp, #0
9000b3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b3ee:	687b      	ldr	r3, [r7, #4]
9000b3f0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b3f2:	68fb      	ldr	r3, [r7, #12]
9000b3f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b3f8:	695b      	ldr	r3, [r3, #20]
9000b3fa:	b29b      	uxth	r3, r3
}
9000b3fc:	4618      	mov	r0, r3
9000b3fe:	3714      	adds	r7, #20
9000b400:	46bd      	mov	sp, r7
9000b402:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b406:	4770      	bx	lr

9000b408 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b408:	b480      	push	{r7}
9000b40a:	b089      	sub	sp, #36	@ 0x24
9000b40c:	af00      	add	r7, sp, #0
9000b40e:	6078      	str	r0, [r7, #4]
9000b410:	460b      	mov	r3, r1
9000b412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b414:	687b      	ldr	r3, [r7, #4]
9000b416:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b418:	78fb      	ldrb	r3, [r7, #3]
9000b41a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b41c:	2300      	movs	r3, #0
9000b41e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b420:	69bb      	ldr	r3, [r7, #24]
9000b422:	015a      	lsls	r2, r3, #5
9000b424:	69fb      	ldr	r3, [r7, #28]
9000b426:	4413      	add	r3, r2
9000b428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b42c:	681b      	ldr	r3, [r3, #0]
9000b42e:	0c9b      	lsrs	r3, r3, #18
9000b430:	f003 0303 	and.w	r3, r3, #3
9000b434:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b436:	69bb      	ldr	r3, [r7, #24]
9000b438:	015a      	lsls	r2, r3, #5
9000b43a:	69fb      	ldr	r3, [r7, #28]
9000b43c:	4413      	add	r3, r2
9000b43e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b442:	681b      	ldr	r3, [r3, #0]
9000b444:	0fdb      	lsrs	r3, r3, #31
9000b446:	f003 0301 	and.w	r3, r3, #1
9000b44a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b44c:	69bb      	ldr	r3, [r7, #24]
9000b44e:	015a      	lsls	r2, r3, #5
9000b450:	69fb      	ldr	r3, [r7, #28]
9000b452:	4413      	add	r3, r2
9000b454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b458:	685b      	ldr	r3, [r3, #4]
9000b45a:	0fdb      	lsrs	r3, r3, #31
9000b45c:	f003 0301 	and.w	r3, r3, #1
9000b460:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b462:	687b      	ldr	r3, [r7, #4]
9000b464:	689b      	ldr	r3, [r3, #8]
9000b466:	f003 0320 	and.w	r3, r3, #32
9000b46a:	2b20      	cmp	r3, #32
9000b46c:	d10d      	bne.n	9000b48a <USB_HC_Halt+0x82>
9000b46e:	68fb      	ldr	r3, [r7, #12]
9000b470:	2b00      	cmp	r3, #0
9000b472:	d10a      	bne.n	9000b48a <USB_HC_Halt+0x82>
9000b474:	693b      	ldr	r3, [r7, #16]
9000b476:	2b00      	cmp	r3, #0
9000b478:	d005      	beq.n	9000b486 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b47a:	697b      	ldr	r3, [r7, #20]
9000b47c:	2b01      	cmp	r3, #1
9000b47e:	d002      	beq.n	9000b486 <USB_HC_Halt+0x7e>
9000b480:	697b      	ldr	r3, [r7, #20]
9000b482:	2b03      	cmp	r3, #3
9000b484:	d101      	bne.n	9000b48a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b486:	2300      	movs	r3, #0
9000b488:	e0d8      	b.n	9000b63c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b48a:	697b      	ldr	r3, [r7, #20]
9000b48c:	2b00      	cmp	r3, #0
9000b48e:	d002      	beq.n	9000b496 <USB_HC_Halt+0x8e>
9000b490:	697b      	ldr	r3, [r7, #20]
9000b492:	2b02      	cmp	r3, #2
9000b494:	d173      	bne.n	9000b57e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b496:	69bb      	ldr	r3, [r7, #24]
9000b498:	015a      	lsls	r2, r3, #5
9000b49a:	69fb      	ldr	r3, [r7, #28]
9000b49c:	4413      	add	r3, r2
9000b49e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4a2:	681b      	ldr	r3, [r3, #0]
9000b4a4:	69ba      	ldr	r2, [r7, #24]
9000b4a6:	0151      	lsls	r1, r2, #5
9000b4a8:	69fa      	ldr	r2, [r7, #28]
9000b4aa:	440a      	add	r2, r1
9000b4ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b4b4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4b6:	687b      	ldr	r3, [r7, #4]
9000b4b8:	689b      	ldr	r3, [r3, #8]
9000b4ba:	f003 0320 	and.w	r3, r3, #32
9000b4be:	2b00      	cmp	r3, #0
9000b4c0:	d14a      	bne.n	9000b558 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b4c2:	687b      	ldr	r3, [r7, #4]
9000b4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b4c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b4ca:	2b00      	cmp	r3, #0
9000b4cc:	d133      	bne.n	9000b536 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b4ce:	69bb      	ldr	r3, [r7, #24]
9000b4d0:	015a      	lsls	r2, r3, #5
9000b4d2:	69fb      	ldr	r3, [r7, #28]
9000b4d4:	4413      	add	r3, r2
9000b4d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4da:	681b      	ldr	r3, [r3, #0]
9000b4dc:	69ba      	ldr	r2, [r7, #24]
9000b4de:	0151      	lsls	r1, r2, #5
9000b4e0:	69fa      	ldr	r2, [r7, #28]
9000b4e2:	440a      	add	r2, r1
9000b4e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b4ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b4ee:	69bb      	ldr	r3, [r7, #24]
9000b4f0:	015a      	lsls	r2, r3, #5
9000b4f2:	69fb      	ldr	r3, [r7, #28]
9000b4f4:	4413      	add	r3, r2
9000b4f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4fa:	681b      	ldr	r3, [r3, #0]
9000b4fc:	69ba      	ldr	r2, [r7, #24]
9000b4fe:	0151      	lsls	r1, r2, #5
9000b500:	69fa      	ldr	r2, [r7, #28]
9000b502:	440a      	add	r2, r1
9000b504:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b508:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b50c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b50e:	68bb      	ldr	r3, [r7, #8]
9000b510:	3301      	adds	r3, #1
9000b512:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b514:	68bb      	ldr	r3, [r7, #8]
9000b516:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b51a:	d82e      	bhi.n	9000b57a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b51c:	69bb      	ldr	r3, [r7, #24]
9000b51e:	015a      	lsls	r2, r3, #5
9000b520:	69fb      	ldr	r3, [r7, #28]
9000b522:	4413      	add	r3, r2
9000b524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b528:	681b      	ldr	r3, [r3, #0]
9000b52a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b52e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b532:	d0ec      	beq.n	9000b50e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b534:	e081      	b.n	9000b63a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b536:	69bb      	ldr	r3, [r7, #24]
9000b538:	015a      	lsls	r2, r3, #5
9000b53a:	69fb      	ldr	r3, [r7, #28]
9000b53c:	4413      	add	r3, r2
9000b53e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b542:	681b      	ldr	r3, [r3, #0]
9000b544:	69ba      	ldr	r2, [r7, #24]
9000b546:	0151      	lsls	r1, r2, #5
9000b548:	69fa      	ldr	r2, [r7, #28]
9000b54a:	440a      	add	r2, r1
9000b54c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b550:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b554:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b556:	e070      	b.n	9000b63a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b558:	69bb      	ldr	r3, [r7, #24]
9000b55a:	015a      	lsls	r2, r3, #5
9000b55c:	69fb      	ldr	r3, [r7, #28]
9000b55e:	4413      	add	r3, r2
9000b560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b564:	681b      	ldr	r3, [r3, #0]
9000b566:	69ba      	ldr	r2, [r7, #24]
9000b568:	0151      	lsls	r1, r2, #5
9000b56a:	69fa      	ldr	r2, [r7, #28]
9000b56c:	440a      	add	r2, r1
9000b56e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b576:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b578:	e05f      	b.n	9000b63a <USB_HC_Halt+0x232>
            break;
9000b57a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b57c:	e05d      	b.n	9000b63a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b57e:	69bb      	ldr	r3, [r7, #24]
9000b580:	015a      	lsls	r2, r3, #5
9000b582:	69fb      	ldr	r3, [r7, #28]
9000b584:	4413      	add	r3, r2
9000b586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b58a:	681b      	ldr	r3, [r3, #0]
9000b58c:	69ba      	ldr	r2, [r7, #24]
9000b58e:	0151      	lsls	r1, r2, #5
9000b590:	69fa      	ldr	r2, [r7, #28]
9000b592:	440a      	add	r2, r1
9000b594:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b59c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b59e:	69fb      	ldr	r3, [r7, #28]
9000b5a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b5a4:	691b      	ldr	r3, [r3, #16]
9000b5a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b5aa:	2b00      	cmp	r3, #0
9000b5ac:	d133      	bne.n	9000b616 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b5ae:	69bb      	ldr	r3, [r7, #24]
9000b5b0:	015a      	lsls	r2, r3, #5
9000b5b2:	69fb      	ldr	r3, [r7, #28]
9000b5b4:	4413      	add	r3, r2
9000b5b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5ba:	681b      	ldr	r3, [r3, #0]
9000b5bc:	69ba      	ldr	r2, [r7, #24]
9000b5be:	0151      	lsls	r1, r2, #5
9000b5c0:	69fa      	ldr	r2, [r7, #28]
9000b5c2:	440a      	add	r2, r1
9000b5c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b5cc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b5ce:	69bb      	ldr	r3, [r7, #24]
9000b5d0:	015a      	lsls	r2, r3, #5
9000b5d2:	69fb      	ldr	r3, [r7, #28]
9000b5d4:	4413      	add	r3, r2
9000b5d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5da:	681b      	ldr	r3, [r3, #0]
9000b5dc:	69ba      	ldr	r2, [r7, #24]
9000b5de:	0151      	lsls	r1, r2, #5
9000b5e0:	69fa      	ldr	r2, [r7, #28]
9000b5e2:	440a      	add	r2, r1
9000b5e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b5ec:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b5ee:	68bb      	ldr	r3, [r7, #8]
9000b5f0:	3301      	adds	r3, #1
9000b5f2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b5f4:	68bb      	ldr	r3, [r7, #8]
9000b5f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b5fa:	d81d      	bhi.n	9000b638 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b5fc:	69bb      	ldr	r3, [r7, #24]
9000b5fe:	015a      	lsls	r2, r3, #5
9000b600:	69fb      	ldr	r3, [r7, #28]
9000b602:	4413      	add	r3, r2
9000b604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b608:	681b      	ldr	r3, [r3, #0]
9000b60a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b60e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b612:	d0ec      	beq.n	9000b5ee <USB_HC_Halt+0x1e6>
9000b614:	e011      	b.n	9000b63a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b616:	69bb      	ldr	r3, [r7, #24]
9000b618:	015a      	lsls	r2, r3, #5
9000b61a:	69fb      	ldr	r3, [r7, #28]
9000b61c:	4413      	add	r3, r2
9000b61e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b622:	681b      	ldr	r3, [r3, #0]
9000b624:	69ba      	ldr	r2, [r7, #24]
9000b626:	0151      	lsls	r1, r2, #5
9000b628:	69fa      	ldr	r2, [r7, #28]
9000b62a:	440a      	add	r2, r1
9000b62c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b634:	6013      	str	r3, [r2, #0]
9000b636:	e000      	b.n	9000b63a <USB_HC_Halt+0x232>
          break;
9000b638:	bf00      	nop
    }
  }

  return HAL_OK;
9000b63a:	2300      	movs	r3, #0
}
9000b63c:	4618      	mov	r0, r3
9000b63e:	3724      	adds	r7, #36	@ 0x24
9000b640:	46bd      	mov	sp, r7
9000b642:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b646:	4770      	bx	lr

9000b648 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b648:	b580      	push	{r7, lr}
9000b64a:	b088      	sub	sp, #32
9000b64c:	af00      	add	r7, sp, #0
9000b64e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b650:	2300      	movs	r3, #0
9000b652:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b654:	687b      	ldr	r3, [r7, #4]
9000b656:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b658:	2300      	movs	r3, #0
9000b65a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b65c:	6878      	ldr	r0, [r7, #4]
9000b65e:	f7ff fd7a 	bl	9000b156 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b662:	2110      	movs	r1, #16
9000b664:	6878      	ldr	r0, [r7, #4]
9000b666:	f7ff fd87 	bl	9000b178 <USB_FlushTxFifo>
9000b66a:	4603      	mov	r3, r0
9000b66c:	2b00      	cmp	r3, #0
9000b66e:	d001      	beq.n	9000b674 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b670:	2301      	movs	r3, #1
9000b672:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b674:	6878      	ldr	r0, [r7, #4]
9000b676:	f7ff fdb1 	bl	9000b1dc <USB_FlushRxFifo>
9000b67a:	4603      	mov	r3, r0
9000b67c:	2b00      	cmp	r3, #0
9000b67e:	d001      	beq.n	9000b684 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b680:	2301      	movs	r3, #1
9000b682:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b684:	2300      	movs	r3, #0
9000b686:	61bb      	str	r3, [r7, #24]
9000b688:	e01f      	b.n	9000b6ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b68a:	69bb      	ldr	r3, [r7, #24]
9000b68c:	015a      	lsls	r2, r3, #5
9000b68e:	697b      	ldr	r3, [r7, #20]
9000b690:	4413      	add	r3, r2
9000b692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b696:	681b      	ldr	r3, [r3, #0]
9000b698:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b69a:	693b      	ldr	r3, [r7, #16]
9000b69c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b6a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b6a2:	693b      	ldr	r3, [r7, #16]
9000b6a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b6a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b6aa:	693b      	ldr	r3, [r7, #16]
9000b6ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b6b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b6b2:	69bb      	ldr	r3, [r7, #24]
9000b6b4:	015a      	lsls	r2, r3, #5
9000b6b6:	697b      	ldr	r3, [r7, #20]
9000b6b8:	4413      	add	r3, r2
9000b6ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6be:	461a      	mov	r2, r3
9000b6c0:	693b      	ldr	r3, [r7, #16]
9000b6c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b6c4:	69bb      	ldr	r3, [r7, #24]
9000b6c6:	3301      	adds	r3, #1
9000b6c8:	61bb      	str	r3, [r7, #24]
9000b6ca:	69bb      	ldr	r3, [r7, #24]
9000b6cc:	2b0f      	cmp	r3, #15
9000b6ce:	d9dc      	bls.n	9000b68a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b6d0:	2300      	movs	r3, #0
9000b6d2:	61bb      	str	r3, [r7, #24]
9000b6d4:	e034      	b.n	9000b740 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b6d6:	69bb      	ldr	r3, [r7, #24]
9000b6d8:	015a      	lsls	r2, r3, #5
9000b6da:	697b      	ldr	r3, [r7, #20]
9000b6dc:	4413      	add	r3, r2
9000b6de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6e2:	681b      	ldr	r3, [r3, #0]
9000b6e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b6e6:	693b      	ldr	r3, [r7, #16]
9000b6e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b6ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b6ee:	693b      	ldr	r3, [r7, #16]
9000b6f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b6f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b6f6:	693b      	ldr	r3, [r7, #16]
9000b6f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b6fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b6fe:	69bb      	ldr	r3, [r7, #24]
9000b700:	015a      	lsls	r2, r3, #5
9000b702:	697b      	ldr	r3, [r7, #20]
9000b704:	4413      	add	r3, r2
9000b706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b70a:	461a      	mov	r2, r3
9000b70c:	693b      	ldr	r3, [r7, #16]
9000b70e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b710:	68fb      	ldr	r3, [r7, #12]
9000b712:	3301      	adds	r3, #1
9000b714:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b716:	68fb      	ldr	r3, [r7, #12]
9000b718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b71c:	d80c      	bhi.n	9000b738 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b71e:	69bb      	ldr	r3, [r7, #24]
9000b720:	015a      	lsls	r2, r3, #5
9000b722:	697b      	ldr	r3, [r7, #20]
9000b724:	4413      	add	r3, r2
9000b726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b72a:	681b      	ldr	r3, [r3, #0]
9000b72c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b734:	d0ec      	beq.n	9000b710 <USB_StopHost+0xc8>
9000b736:	e000      	b.n	9000b73a <USB_StopHost+0xf2>
        break;
9000b738:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b73a:	69bb      	ldr	r3, [r7, #24]
9000b73c:	3301      	adds	r3, #1
9000b73e:	61bb      	str	r3, [r7, #24]
9000b740:	69bb      	ldr	r3, [r7, #24]
9000b742:	2b0f      	cmp	r3, #15
9000b744:	d9c7      	bls.n	9000b6d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b746:	697b      	ldr	r3, [r7, #20]
9000b748:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b74c:	461a      	mov	r2, r3
9000b74e:	f04f 33ff 	mov.w	r3, #4294967295
9000b752:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b754:	687b      	ldr	r3, [r7, #4]
9000b756:	f04f 32ff 	mov.w	r2, #4294967295
9000b75a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b75c:	6878      	ldr	r0, [r7, #4]
9000b75e:	f7ff fce9 	bl	9000b134 <USB_EnableGlobalInt>

  return ret;
9000b762:	7ffb      	ldrb	r3, [r7, #31]
}
9000b764:	4618      	mov	r0, r3
9000b766:	3720      	adds	r7, #32
9000b768:	46bd      	mov	sp, r7
9000b76a:	bd80      	pop	{r7, pc}

9000b76c <setAllRowsInactive>:
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;
KeyboardButton receivedChar;

void setAllRowsInactive(void)
{
9000b76c:	b580      	push	{r7, lr}
9000b76e:	b082      	sub	sp, #8
9000b770:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000b772:	2300      	movs	r3, #0
9000b774:	607b      	str	r3, [r7, #4]
9000b776:	e00f      	b.n	9000b798 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000b778:	4a0b      	ldr	r2, [pc, #44]	@ (9000b7a8 <setAllRowsInactive+0x3c>)
9000b77a:	687b      	ldr	r3, [r7, #4]
9000b77c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b780:	4a09      	ldr	r2, [pc, #36]	@ (9000b7a8 <setAllRowsInactive+0x3c>)
9000b782:	687b      	ldr	r3, [r7, #4]
9000b784:	00db      	lsls	r3, r3, #3
9000b786:	4413      	add	r3, r2
9000b788:	889b      	ldrh	r3, [r3, #4]
9000b78a:	2200      	movs	r2, #0
9000b78c:	4619      	mov	r1, r3
9000b78e:	f7f8 fc13 	bl	90003fb8 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000b792:	687b      	ldr	r3, [r7, #4]
9000b794:	3301      	adds	r3, #1
9000b796:	607b      	str	r3, [r7, #4]
9000b798:	687b      	ldr	r3, [r7, #4]
9000b79a:	2b04      	cmp	r3, #4
9000b79c:	ddec      	ble.n	9000b778 <setAllRowsInactive+0xc>
    }
}
9000b79e:	bf00      	nop
9000b7a0:	bf00      	nop
9000b7a2:	3708      	adds	r7, #8
9000b7a4:	46bd      	mov	sp, r7
9000b7a6:	bd80      	pop	{r7, pc}
9000b7a8:	20000010 	.word	0x20000010

9000b7ac <setRowActive>:

void setRowActive(int row)
{
9000b7ac:	b580      	push	{r7, lr}
9000b7ae:	b082      	sub	sp, #8
9000b7b0:	af00      	add	r7, sp, #0
9000b7b2:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000b7b4:	687b      	ldr	r3, [r7, #4]
9000b7b6:	2b00      	cmp	r3, #0
9000b7b8:	db12      	blt.n	9000b7e0 <setRowActive+0x34>
9000b7ba:	687b      	ldr	r3, [r7, #4]
9000b7bc:	2b04      	cmp	r3, #4
9000b7be:	dc0f      	bgt.n	9000b7e0 <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000b7c0:	f7ff ffd4 	bl	9000b76c <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000b7c4:	4a08      	ldr	r2, [pc, #32]	@ (9000b7e8 <setRowActive+0x3c>)
9000b7c6:	687b      	ldr	r3, [r7, #4]
9000b7c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b7cc:	4a06      	ldr	r2, [pc, #24]	@ (9000b7e8 <setRowActive+0x3c>)
9000b7ce:	687b      	ldr	r3, [r7, #4]
9000b7d0:	00db      	lsls	r3, r3, #3
9000b7d2:	4413      	add	r3, r2
9000b7d4:	889b      	ldrh	r3, [r3, #4]
9000b7d6:	2201      	movs	r2, #1
9000b7d8:	4619      	mov	r1, r3
9000b7da:	f7f8 fbed 	bl	90003fb8 <HAL_GPIO_WritePin>
9000b7de:	e000      	b.n	9000b7e2 <setRowActive+0x36>
        return;
9000b7e0:	bf00      	nop
}
9000b7e2:	3708      	adds	r7, #8
9000b7e4:	46bd      	mov	sp, r7
9000b7e6:	bd80      	pop	{r7, pc}
9000b7e8:	20000010 	.word	0x20000010

9000b7ec <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000b7ec:	b580      	push	{r7, lr}
9000b7ee:	b084      	sub	sp, #16
9000b7f0:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000b7f2:	2300      	movs	r3, #0
9000b7f4:	60fb      	str	r3, [r7, #12]
9000b7f6:	e04e      	b.n	9000b896 <ReadFlexiKeyboard+0xaa>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000b7f8:	68f8      	ldr	r0, [r7, #12]
9000b7fa:	f7ff ffd7 	bl	9000b7ac <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000b7fe:	200a      	movs	r0, #10
9000b800:	f7f7 fd74 	bl	900032ec <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000b804:	2300      	movs	r3, #0
9000b806:	60bb      	str	r3, [r7, #8]
9000b808:	e03f      	b.n	9000b88a <ReadFlexiKeyboard+0x9e>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000b80a:	4a27      	ldr	r2, [pc, #156]	@ (9000b8a8 <ReadFlexiKeyboard+0xbc>)
9000b80c:	68bb      	ldr	r3, [r7, #8]
9000b80e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000b812:	4925      	ldr	r1, [pc, #148]	@ (9000b8a8 <ReadFlexiKeyboard+0xbc>)
9000b814:	68bb      	ldr	r3, [r7, #8]
9000b816:	00db      	lsls	r3, r3, #3
9000b818:	440b      	add	r3, r1
9000b81a:	889b      	ldrh	r3, [r3, #4]
9000b81c:	4619      	mov	r1, r3
9000b81e:	4610      	mov	r0, r2
9000b820:	f7f8 fbb2 	bl	90003f88 <HAL_GPIO_ReadPin>
9000b824:	4603      	mov	r3, r0
9000b826:	2b01      	cmp	r3, #1
9000b828:	d12c      	bne.n	9000b884 <ReadFlexiKeyboard+0x98>
            {
                uint32_t now = HAL_GetTick();
9000b82a:	f7f7 fd53 	bl	900032d4 <HAL_GetTick>
9000b82e:	6078      	str	r0, [r7, #4]

                // Debounce/repeat suppression
                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) {
9000b830:	4b1e      	ldr	r3, [pc, #120]	@ (9000b8ac <ReadFlexiKeyboard+0xc0>)
9000b832:	681b      	ldr	r3, [r3, #0]
9000b834:	68fa      	ldr	r2, [r7, #12]
9000b836:	429a      	cmp	r2, r3
9000b838:	d10d      	bne.n	9000b856 <ReadFlexiKeyboard+0x6a>
9000b83a:	4b1d      	ldr	r3, [pc, #116]	@ (9000b8b0 <ReadFlexiKeyboard+0xc4>)
9000b83c:	681b      	ldr	r3, [r3, #0]
9000b83e:	68ba      	ldr	r2, [r7, #8]
9000b840:	429a      	cmp	r2, r3
9000b842:	d108      	bne.n	9000b856 <ReadFlexiKeyboard+0x6a>
9000b844:	4b1b      	ldr	r3, [pc, #108]	@ (9000b8b4 <ReadFlexiKeyboard+0xc8>)
9000b846:	681b      	ldr	r3, [r3, #0]
9000b848:	687a      	ldr	r2, [r7, #4]
9000b84a:	1ad3      	subs	r3, r2, r3
9000b84c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000b850:	d201      	bcs.n	9000b856 <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000b852:	234e      	movs	r3, #78	@ 0x4e
9000b854:	e023      	b.n	9000b89e <ReadFlexiKeyboard+0xb2>
                }

                lastRow = row;
9000b856:	4a15      	ldr	r2, [pc, #84]	@ (9000b8ac <ReadFlexiKeyboard+0xc0>)
9000b858:	68fb      	ldr	r3, [r7, #12]
9000b85a:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000b85c:	4a14      	ldr	r2, [pc, #80]	@ (9000b8b0 <ReadFlexiKeyboard+0xc4>)
9000b85e:	68bb      	ldr	r3, [r7, #8]
9000b860:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000b862:	4a14      	ldr	r2, [pc, #80]	@ (9000b8b4 <ReadFlexiKeyboard+0xc8>)
9000b864:	687b      	ldr	r3, [r7, #4]
9000b866:	6013      	str	r3, [r2, #0]

                receivedChar = keymap[row][col];
9000b868:	4913      	ldr	r1, [pc, #76]	@ (9000b8b8 <ReadFlexiKeyboard+0xcc>)
9000b86a:	68fa      	ldr	r2, [r7, #12]
9000b86c:	4613      	mov	r3, r2
9000b86e:	009b      	lsls	r3, r3, #2
9000b870:	4413      	add	r3, r2
9000b872:	18ca      	adds	r2, r1, r3
9000b874:	68bb      	ldr	r3, [r7, #8]
9000b876:	4413      	add	r3, r2
9000b878:	781a      	ldrb	r2, [r3, #0]
9000b87a:	4b10      	ldr	r3, [pc, #64]	@ (9000b8bc <ReadFlexiKeyboard+0xd0>)
9000b87c:	701a      	strb	r2, [r3, #0]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
9000b87e:	4b0f      	ldr	r3, [pc, #60]	@ (9000b8bc <ReadFlexiKeyboard+0xd0>)
9000b880:	781b      	ldrb	r3, [r3, #0]
9000b882:	e00c      	b.n	9000b89e <ReadFlexiKeyboard+0xb2>
        for (int col = 0; col < NUM_COLS; col++)
9000b884:	68bb      	ldr	r3, [r7, #8]
9000b886:	3301      	adds	r3, #1
9000b888:	60bb      	str	r3, [r7, #8]
9000b88a:	68bb      	ldr	r3, [r7, #8]
9000b88c:	2b04      	cmp	r3, #4
9000b88e:	ddbc      	ble.n	9000b80a <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000b890:	68fb      	ldr	r3, [r7, #12]
9000b892:	3301      	adds	r3, #1
9000b894:	60fb      	str	r3, [r7, #12]
9000b896:	68fb      	ldr	r3, [r7, #12]
9000b898:	2b04      	cmp	r3, #4
9000b89a:	ddad      	ble.n	9000b7f8 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000b89c:	234e      	movs	r3, #78	@ 0x4e
}
9000b89e:	4618      	mov	r0, r3
9000b8a0:	3710      	adds	r7, #16
9000b8a2:	46bd      	mov	sp, r7
9000b8a4:	bd80      	pop	{r7, pc}
9000b8a6:	bf00      	nop
9000b8a8:	20000038 	.word	0x20000038
9000b8ac:	20000060 	.word	0x20000060
9000b8b0:	20000064 	.word	0x20000064
9000b8b4:	200012e0 	.word	0x200012e0
9000b8b8:	9000d818 	.word	0x9000d818
9000b8bc:	200012e4 	.word	0x200012e4

9000b8c0 <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000b8c0:	b580      	push	{r7, lr}
9000b8c2:	b090      	sub	sp, #64	@ 0x40
9000b8c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000b8c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b8ca:	2200      	movs	r2, #0
9000b8cc:	601a      	str	r2, [r3, #0]
9000b8ce:	605a      	str	r2, [r3, #4]
9000b8d0:	609a      	str	r2, [r3, #8]
9000b8d2:	60da      	str	r2, [r3, #12]
9000b8d4:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000b8d6:	4b5c      	ldr	r3, [pc, #368]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b8d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8dc:	4a5a      	ldr	r2, [pc, #360]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b8de:	f043 0301 	orr.w	r3, r3, #1
9000b8e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8e6:	4b58      	ldr	r3, [pc, #352]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b8e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8ec:	f003 0301 	and.w	r3, r3, #1
9000b8f0:	623b      	str	r3, [r7, #32]
9000b8f2:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000b8f4:	4b54      	ldr	r3, [pc, #336]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b8f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8fa:	4a53      	ldr	r2, [pc, #332]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b8fc:	f043 0302 	orr.w	r3, r3, #2
9000b900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b904:	4b50      	ldr	r3, [pc, #320]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b90a:	f003 0302 	and.w	r3, r3, #2
9000b90e:	61fb      	str	r3, [r7, #28]
9000b910:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000b912:	4b4d      	ldr	r3, [pc, #308]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b918:	4a4b      	ldr	r2, [pc, #300]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b91a:	f043 0308 	orr.w	r3, r3, #8
9000b91e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b922:	4b49      	ldr	r3, [pc, #292]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b928:	f003 0308 	and.w	r3, r3, #8
9000b92c:	61bb      	str	r3, [r7, #24]
9000b92e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000b930:	4b45      	ldr	r3, [pc, #276]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b936:	4a44      	ldr	r2, [pc, #272]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b938:	f043 0310 	orr.w	r3, r3, #16
9000b93c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b940:	4b41      	ldr	r3, [pc, #260]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b946:	f003 0310 	and.w	r3, r3, #16
9000b94a:	617b      	str	r3, [r7, #20]
9000b94c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000b94e:	4b3e      	ldr	r3, [pc, #248]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b954:	4a3c      	ldr	r2, [pc, #240]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b95a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b95e:	4b3a      	ldr	r3, [pc, #232]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b968:	613b      	str	r3, [r7, #16]
9000b96a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000b96c:	4b36      	ldr	r3, [pc, #216]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b96e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b972:	4a35      	ldr	r2, [pc, #212]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000b978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b97c:	4b32      	ldr	r3, [pc, #200]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b97e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b986:	60fb      	str	r3, [r7, #12]
9000b988:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000b98a:	4b2f      	ldr	r3, [pc, #188]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b990:	4a2d      	ldr	r2, [pc, #180]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b99a:	4b2b      	ldr	r3, [pc, #172]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000b9a4:	60bb      	str	r3, [r7, #8]
9000b9a6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000b9a8:	4b27      	ldr	r3, [pc, #156]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b9aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9ae:	4a26      	ldr	r2, [pc, #152]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b9b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000b9b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b9b8:	4b23      	ldr	r3, [pc, #140]	@ (9000ba48 <InitFlexiKeyboard+0x188>)
9000b9ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000b9c2:	607b      	str	r3, [r7, #4]
9000b9c4:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000b9c6:	2301      	movs	r3, #1
9000b9c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000b9ca:	2300      	movs	r3, #0
9000b9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000b9ce:	2300      	movs	r3, #0
9000b9d0:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000b9d2:	2300      	movs	r3, #0
9000b9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b9d6:	e012      	b.n	9000b9fe <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000b9d8:	4a1c      	ldr	r2, [pc, #112]	@ (9000ba4c <InitFlexiKeyboard+0x18c>)
9000b9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b9dc:	00db      	lsls	r3, r3, #3
9000b9de:	4413      	add	r3, r2
9000b9e0:	889b      	ldrh	r3, [r3, #4]
9000b9e2:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000b9e4:	4a19      	ldr	r2, [pc, #100]	@ (9000ba4c <InitFlexiKeyboard+0x18c>)
9000b9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b9e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b9ec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b9f0:	4611      	mov	r1, r2
9000b9f2:	4618      	mov	r0, r3
9000b9f4:	f7f8 f918 	bl	90003c28 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000b9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b9fa:	3301      	adds	r3, #1
9000b9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b9fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000ba00:	2b04      	cmp	r3, #4
9000ba02:	dde9      	ble.n	9000b9d8 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000ba04:	2300      	movs	r3, #0
9000ba06:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000ba08:	2302      	movs	r3, #2
9000ba0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000ba0c:	2300      	movs	r3, #0
9000ba0e:	63bb      	str	r3, [r7, #56]	@ 0x38
9000ba10:	e012      	b.n	9000ba38 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000ba12:	4a0f      	ldr	r2, [pc, #60]	@ (9000ba50 <InitFlexiKeyboard+0x190>)
9000ba14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba16:	00db      	lsls	r3, r3, #3
9000ba18:	4413      	add	r3, r2
9000ba1a:	889b      	ldrh	r3, [r3, #4]
9000ba1c:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000ba1e:	4a0c      	ldr	r2, [pc, #48]	@ (9000ba50 <InitFlexiKeyboard+0x190>)
9000ba20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000ba26:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000ba2a:	4611      	mov	r1, r2
9000ba2c:	4618      	mov	r0, r3
9000ba2e:	f7f8 f8fb 	bl	90003c28 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000ba32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba34:	3301      	adds	r3, #1
9000ba36:	63bb      	str	r3, [r7, #56]	@ 0x38
9000ba38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba3a:	2b04      	cmp	r3, #4
9000ba3c:	dde9      	ble.n	9000ba12 <InitFlexiKeyboard+0x152>
	}
}
9000ba3e:	bf00      	nop
9000ba40:	bf00      	nop
9000ba42:	3740      	adds	r7, #64	@ 0x40
9000ba44:	46bd      	mov	sp, r7
9000ba46:	bd80      	pop	{r7, pc}
9000ba48:	58024400 	.word	0x58024400
9000ba4c:	20000010 	.word	0x20000010
9000ba50:	20000038 	.word	0x20000038

9000ba54 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000ba54:	b580      	push	{r7, lr}
9000ba56:	b082      	sub	sp, #8
9000ba58:	af00      	add	r7, sp, #0
9000ba5a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000ba5c:	687b      	ldr	r3, [r7, #4]
9000ba5e:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000ba62:	1c5a      	adds	r2, r3, #1
9000ba64:	687b      	ldr	r3, [r7, #4]
9000ba66:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000ba6a:	6878      	ldr	r0, [r7, #4]
9000ba6c:	f000 f804 	bl	9000ba78 <USBH_HandleSof>
}
9000ba70:	bf00      	nop
9000ba72:	3708      	adds	r7, #8
9000ba74:	46bd      	mov	sp, r7
9000ba76:	bd80      	pop	{r7, pc}

9000ba78 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000ba78:	b580      	push	{r7, lr}
9000ba7a:	b082      	sub	sp, #8
9000ba7c:	af00      	add	r7, sp, #0
9000ba7e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000ba80:	687b      	ldr	r3, [r7, #4]
9000ba82:	781b      	ldrb	r3, [r3, #0]
9000ba84:	b2db      	uxtb	r3, r3
9000ba86:	2b0b      	cmp	r3, #11
9000ba88:	d10a      	bne.n	9000baa0 <USBH_HandleSof+0x28>
9000ba8a:	687b      	ldr	r3, [r7, #4]
9000ba8c:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000ba90:	2b00      	cmp	r3, #0
9000ba92:	d005      	beq.n	9000baa0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000ba94:	687b      	ldr	r3, [r7, #4]
9000ba96:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000ba9a:	699b      	ldr	r3, [r3, #24]
9000ba9c:	6878      	ldr	r0, [r7, #4]
9000ba9e:	4798      	blx	r3
  }
}
9000baa0:	bf00      	nop
9000baa2:	3708      	adds	r7, #8
9000baa4:	46bd      	mov	sp, r7
9000baa6:	bd80      	pop	{r7, pc}

9000baa8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000baa8:	b480      	push	{r7}
9000baaa:	b083      	sub	sp, #12
9000baac:	af00      	add	r7, sp, #0
9000baae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000bab0:	687b      	ldr	r3, [r7, #4]
9000bab2:	2201      	movs	r2, #1
9000bab4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000bab8:	bf00      	nop
}
9000baba:	370c      	adds	r7, #12
9000babc:	46bd      	mov	sp, r7
9000babe:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bac2:	4770      	bx	lr

9000bac4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000bac4:	b480      	push	{r7}
9000bac6:	b083      	sub	sp, #12
9000bac8:	af00      	add	r7, sp, #0
9000baca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000bacc:	687b      	ldr	r3, [r7, #4]
9000bace:	2200      	movs	r2, #0
9000bad0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000bad4:	687b      	ldr	r3, [r7, #4]
9000bad6:	2201      	movs	r2, #1
9000bad8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000badc:	bf00      	nop
}
9000bade:	370c      	adds	r7, #12
9000bae0:	46bd      	mov	sp, r7
9000bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bae6:	4770      	bx	lr

9000bae8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000bae8:	b480      	push	{r7}
9000baea:	b083      	sub	sp, #12
9000baec:	af00      	add	r7, sp, #0
9000baee:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000baf0:	687b      	ldr	r3, [r7, #4]
9000baf2:	2201      	movs	r2, #1
9000baf4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000baf8:	687b      	ldr	r3, [r7, #4]
9000bafa:	2200      	movs	r2, #0
9000bafc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000bb00:	687b      	ldr	r3, [r7, #4]
9000bb02:	2200      	movs	r2, #0
9000bb04:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bb08:	2300      	movs	r3, #0
}
9000bb0a:	4618      	mov	r0, r3
9000bb0c:	370c      	adds	r7, #12
9000bb0e:	46bd      	mov	sp, r7
9000bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb14:	4770      	bx	lr

9000bb16 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000bb16:	b580      	push	{r7, lr}
9000bb18:	b082      	sub	sp, #8
9000bb1a:	af00      	add	r7, sp, #0
9000bb1c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000bb1e:	687b      	ldr	r3, [r7, #4]
9000bb20:	2201      	movs	r2, #1
9000bb22:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000bb26:	687b      	ldr	r3, [r7, #4]
9000bb28:	2200      	movs	r2, #0
9000bb2a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000bb2e:	687b      	ldr	r3, [r7, #4]
9000bb30:	2200      	movs	r2, #0
9000bb32:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000bb36:	6878      	ldr	r0, [r7, #4]
9000bb38:	f7f5 fb66 	bl	90001208 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000bb3c:	687b      	ldr	r3, [r7, #4]
9000bb3e:	791b      	ldrb	r3, [r3, #4]
9000bb40:	4619      	mov	r1, r3
9000bb42:	6878      	ldr	r0, [r7, #4]
9000bb44:	f000 f80b 	bl	9000bb5e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000bb48:	687b      	ldr	r3, [r7, #4]
9000bb4a:	795b      	ldrb	r3, [r3, #5]
9000bb4c:	4619      	mov	r1, r3
9000bb4e:	6878      	ldr	r0, [r7, #4]
9000bb50:	f000 f805 	bl	9000bb5e <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bb54:	2300      	movs	r3, #0
}
9000bb56:	4618      	mov	r0, r3
9000bb58:	3708      	adds	r7, #8
9000bb5a:	46bd      	mov	sp, r7
9000bb5c:	bd80      	pop	{r7, pc}

9000bb5e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000bb5e:	b480      	push	{r7}
9000bb60:	b083      	sub	sp, #12
9000bb62:	af00      	add	r7, sp, #0
9000bb64:	6078      	str	r0, [r7, #4]
9000bb66:	460b      	mov	r3, r1
9000bb68:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000bb6a:	78fb      	ldrb	r3, [r7, #3]
9000bb6c:	2b0f      	cmp	r3, #15
9000bb6e:	d80f      	bhi.n	9000bb90 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000bb70:	78fb      	ldrb	r3, [r7, #3]
9000bb72:	687a      	ldr	r2, [r7, #4]
9000bb74:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bb78:	009b      	lsls	r3, r3, #2
9000bb7a:	4413      	add	r3, r2
9000bb7c:	685a      	ldr	r2, [r3, #4]
9000bb7e:	78fb      	ldrb	r3, [r7, #3]
9000bb80:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000bb84:	6879      	ldr	r1, [r7, #4]
9000bb86:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bb8a:	009b      	lsls	r3, r3, #2
9000bb8c:	440b      	add	r3, r1
9000bb8e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000bb90:	2300      	movs	r3, #0
}
9000bb92:	4618      	mov	r0, r3
9000bb94:	370c      	adds	r7, #12
9000bb96:	46bd      	mov	sp, r7
9000bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb9c:	4770      	bx	lr
	...

9000bba0 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000bba0:	b580      	push	{r7, lr}
9000bba2:	b082      	sub	sp, #8
9000bba4:	af00      	add	r7, sp, #0
9000bba6:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000bba8:	687b      	ldr	r3, [r7, #4]
9000bbaa:	681b      	ldr	r3, [r3, #0]
9000bbac:	4a22      	ldr	r2, [pc, #136]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbae:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000bbb0:	687b      	ldr	r3, [r7, #4]
9000bbb2:	685b      	ldr	r3, [r3, #4]
9000bbb4:	4a20      	ldr	r2, [pc, #128]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbb6:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000bbb8:	687b      	ldr	r3, [r7, #4]
9000bbba:	689b      	ldr	r3, [r3, #8]
9000bbbc:	4a1e      	ldr	r2, [pc, #120]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbbe:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000bbc0:	687b      	ldr	r3, [r7, #4]
9000bbc2:	68db      	ldr	r3, [r3, #12]
9000bbc4:	4a1c      	ldr	r2, [pc, #112]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbc6:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000bbc8:	687b      	ldr	r3, [r7, #4]
9000bbca:	691b      	ldr	r3, [r3, #16]
9000bbcc:	4a1a      	ldr	r2, [pc, #104]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbce:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000bbd0:	687b      	ldr	r3, [r7, #4]
9000bbd2:	695b      	ldr	r3, [r3, #20]
9000bbd4:	4a18      	ldr	r2, [pc, #96]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbd6:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000bbd8:	687b      	ldr	r3, [r7, #4]
9000bbda:	699b      	ldr	r3, [r3, #24]
9000bbdc:	4a16      	ldr	r2, [pc, #88]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbde:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000bbe0:	687b      	ldr	r3, [r7, #4]
9000bbe2:	69db      	ldr	r3, [r3, #28]
9000bbe4:	4a14      	ldr	r2, [pc, #80]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbe6:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000bbe8:	687b      	ldr	r3, [r7, #4]
9000bbea:	6a1b      	ldr	r3, [r3, #32]
9000bbec:	4a12      	ldr	r2, [pc, #72]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbee:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000bbf0:	687b      	ldr	r3, [r7, #4]
9000bbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bbf4:	4a10      	ldr	r2, [pc, #64]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbf6:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000bbf8:	687b      	ldr	r3, [r7, #4]
9000bbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bbfc:	4a0e      	ldr	r2, [pc, #56]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bbfe:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000bc00:	4b0e      	ldr	r3, [pc, #56]	@ (9000bc3c <UTIL_LCD_SetFuncDriver+0x9c>)
9000bc02:	2200      	movs	r2, #0
9000bc04:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000bc06:	4b0d      	ldr	r3, [pc, #52]	@ (9000bc3c <UTIL_LCD_SetFuncDriver+0x9c>)
9000bc08:	2200      	movs	r2, #0
9000bc0a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000bc0c:	4b0a      	ldr	r3, [pc, #40]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc0e:	69db      	ldr	r3, [r3, #28]
9000bc10:	4a0b      	ldr	r2, [pc, #44]	@ (9000bc40 <UTIL_LCD_SetFuncDriver+0xa0>)
9000bc12:	4611      	mov	r1, r2
9000bc14:	2000      	movs	r0, #0
9000bc16:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000bc18:	4b07      	ldr	r3, [pc, #28]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc1a:	6a1b      	ldr	r3, [r3, #32]
9000bc1c:	4a09      	ldr	r2, [pc, #36]	@ (9000bc44 <UTIL_LCD_SetFuncDriver+0xa4>)
9000bc1e:	4611      	mov	r1, r2
9000bc20:	2000      	movs	r0, #0
9000bc22:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000bc24:	4b04      	ldr	r3, [pc, #16]	@ (9000bc38 <UTIL_LCD_SetFuncDriver+0x98>)
9000bc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bc28:	4a07      	ldr	r2, [pc, #28]	@ (9000bc48 <UTIL_LCD_SetFuncDriver+0xa8>)
9000bc2a:	4611      	mov	r1, r2
9000bc2c:	2000      	movs	r0, #0
9000bc2e:	4798      	blx	r3
}
9000bc30:	bf00      	nop
9000bc32:	3708      	adds	r7, #8
9000bc34:	46bd      	mov	sp, r7
9000bc36:	bd80      	pop	{r7, pc}
9000bc38:	20001328 	.word	0x20001328
9000bc3c:	200012e8 	.word	0x200012e8
9000bc40:	200012fc 	.word	0x200012fc
9000bc44:	20001300 	.word	0x20001300
9000bc48:	20001304 	.word	0x20001304

9000bc4c <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000bc4c:	b580      	push	{r7, lr}
9000bc4e:	b082      	sub	sp, #8
9000bc50:	af00      	add	r7, sp, #0
9000bc52:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000bc54:	4b0a      	ldr	r3, [pc, #40]	@ (9000bc80 <UTIL_LCD_SetLayer+0x34>)
9000bc56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bc58:	2b00      	cmp	r3, #0
9000bc5a:	d00c      	beq.n	9000bc76 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000bc5c:	4b08      	ldr	r3, [pc, #32]	@ (9000bc80 <UTIL_LCD_SetLayer+0x34>)
9000bc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bc60:	4a08      	ldr	r2, [pc, #32]	@ (9000bc84 <UTIL_LCD_SetLayer+0x38>)
9000bc62:	6912      	ldr	r2, [r2, #16]
9000bc64:	6879      	ldr	r1, [r7, #4]
9000bc66:	4610      	mov	r0, r2
9000bc68:	4798      	blx	r3
9000bc6a:	4603      	mov	r3, r0
9000bc6c:	2b00      	cmp	r3, #0
9000bc6e:	d102      	bne.n	9000bc76 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000bc70:	4a04      	ldr	r2, [pc, #16]	@ (9000bc84 <UTIL_LCD_SetLayer+0x38>)
9000bc72:	687b      	ldr	r3, [r7, #4]
9000bc74:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000bc76:	bf00      	nop
9000bc78:	3708      	adds	r7, #8
9000bc7a:	46bd      	mov	sp, r7
9000bc7c:	bd80      	pop	{r7, pc}
9000bc7e:	bf00      	nop
9000bc80:	20001328 	.word	0x20001328
9000bc84:	200012e8 	.word	0x200012e8

9000bc88 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000bc88:	b480      	push	{r7}
9000bc8a:	b083      	sub	sp, #12
9000bc8c:	af00      	add	r7, sp, #0
9000bc8e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000bc90:	4b06      	ldr	r3, [pc, #24]	@ (9000bcac <UTIL_LCD_SetTextColor+0x24>)
9000bc92:	68db      	ldr	r3, [r3, #12]
9000bc94:	4a05      	ldr	r2, [pc, #20]	@ (9000bcac <UTIL_LCD_SetTextColor+0x24>)
9000bc96:	015b      	lsls	r3, r3, #5
9000bc98:	4413      	add	r3, r2
9000bc9a:	687a      	ldr	r2, [r7, #4]
9000bc9c:	601a      	str	r2, [r3, #0]
}
9000bc9e:	bf00      	nop
9000bca0:	370c      	adds	r7, #12
9000bca2:	46bd      	mov	sp, r7
9000bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bca8:	4770      	bx	lr
9000bcaa:	bf00      	nop
9000bcac:	200012e8 	.word	0x200012e8

9000bcb0 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000bcb0:	b480      	push	{r7}
9000bcb2:	b083      	sub	sp, #12
9000bcb4:	af00      	add	r7, sp, #0
9000bcb6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000bcb8:	4b06      	ldr	r3, [pc, #24]	@ (9000bcd4 <UTIL_LCD_SetBackColor+0x24>)
9000bcba:	68db      	ldr	r3, [r3, #12]
9000bcbc:	4a05      	ldr	r2, [pc, #20]	@ (9000bcd4 <UTIL_LCD_SetBackColor+0x24>)
9000bcbe:	015b      	lsls	r3, r3, #5
9000bcc0:	4413      	add	r3, r2
9000bcc2:	3304      	adds	r3, #4
9000bcc4:	687a      	ldr	r2, [r7, #4]
9000bcc6:	601a      	str	r2, [r3, #0]
}
9000bcc8:	bf00      	nop
9000bcca:	370c      	adds	r7, #12
9000bccc:	46bd      	mov	sp, r7
9000bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcd2:	4770      	bx	lr
9000bcd4:	200012e8 	.word	0x200012e8

9000bcd8 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000bcd8:	b480      	push	{r7}
9000bcda:	b083      	sub	sp, #12
9000bcdc:	af00      	add	r7, sp, #0
9000bcde:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000bce0:	4b06      	ldr	r3, [pc, #24]	@ (9000bcfc <UTIL_LCD_SetFont+0x24>)
9000bce2:	68db      	ldr	r3, [r3, #12]
9000bce4:	4a05      	ldr	r2, [pc, #20]	@ (9000bcfc <UTIL_LCD_SetFont+0x24>)
9000bce6:	015b      	lsls	r3, r3, #5
9000bce8:	4413      	add	r3, r2
9000bcea:	3308      	adds	r3, #8
9000bcec:	687a      	ldr	r2, [r7, #4]
9000bcee:	601a      	str	r2, [r3, #0]
}
9000bcf0:	bf00      	nop
9000bcf2:	370c      	adds	r7, #12
9000bcf4:	46bd      	mov	sp, r7
9000bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcfa:	4770      	bx	lr
9000bcfc:	200012e8 	.word	0x200012e8

9000bd00 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000bd00:	b590      	push	{r4, r7, lr}
9000bd02:	b087      	sub	sp, #28
9000bd04:	af02      	add	r7, sp, #8
9000bd06:	60f8      	str	r0, [r7, #12]
9000bd08:	60b9      	str	r1, [r7, #8]
9000bd0a:	607a      	str	r2, [r7, #4]
9000bd0c:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000bd0e:	4b08      	ldr	r3, [pc, #32]	@ (9000bd30 <UTIL_LCD_FillRGBRect+0x30>)
9000bd10:	685c      	ldr	r4, [r3, #4]
9000bd12:	4b08      	ldr	r3, [pc, #32]	@ (9000bd34 <UTIL_LCD_FillRGBRect+0x34>)
9000bd14:	6918      	ldr	r0, [r3, #16]
9000bd16:	6a3b      	ldr	r3, [r7, #32]
9000bd18:	9301      	str	r3, [sp, #4]
9000bd1a:	683b      	ldr	r3, [r7, #0]
9000bd1c:	9300      	str	r3, [sp, #0]
9000bd1e:	687b      	ldr	r3, [r7, #4]
9000bd20:	68ba      	ldr	r2, [r7, #8]
9000bd22:	68f9      	ldr	r1, [r7, #12]
9000bd24:	47a0      	blx	r4
}
9000bd26:	bf00      	nop
9000bd28:	3714      	adds	r7, #20
9000bd2a:	46bd      	mov	sp, r7
9000bd2c:	bd90      	pop	{r4, r7, pc}
9000bd2e:	bf00      	nop
9000bd30:	20001328 	.word	0x20001328
9000bd34:	200012e8 	.word	0x200012e8

9000bd38 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000bd38:	b580      	push	{r7, lr}
9000bd3a:	b084      	sub	sp, #16
9000bd3c:	af02      	add	r7, sp, #8
9000bd3e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000bd40:	4b07      	ldr	r3, [pc, #28]	@ (9000bd60 <UTIL_LCD_Clear+0x28>)
9000bd42:	695a      	ldr	r2, [r3, #20]
9000bd44:	4b06      	ldr	r3, [pc, #24]	@ (9000bd60 <UTIL_LCD_Clear+0x28>)
9000bd46:	6999      	ldr	r1, [r3, #24]
9000bd48:	687b      	ldr	r3, [r7, #4]
9000bd4a:	9300      	str	r3, [sp, #0]
9000bd4c:	460b      	mov	r3, r1
9000bd4e:	2100      	movs	r1, #0
9000bd50:	2000      	movs	r0, #0
9000bd52:	f000 f8eb 	bl	9000bf2c <UTIL_LCD_FillRect>
}
9000bd56:	bf00      	nop
9000bd58:	3708      	adds	r7, #8
9000bd5a:	46bd      	mov	sp, r7
9000bd5c:	bd80      	pop	{r7, pc}
9000bd5e:	bf00      	nop
9000bd60:	200012e8 	.word	0x200012e8

9000bd64 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000bd64:	b580      	push	{r7, lr}
9000bd66:	b084      	sub	sp, #16
9000bd68:	af00      	add	r7, sp, #0
9000bd6a:	60f8      	str	r0, [r7, #12]
9000bd6c:	60b9      	str	r1, [r7, #8]
9000bd6e:	4613      	mov	r3, r2
9000bd70:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bd72:	4b16      	ldr	r3, [pc, #88]	@ (9000bdcc <UTIL_LCD_DisplayChar+0x68>)
9000bd74:	68db      	ldr	r3, [r3, #12]
9000bd76:	4a15      	ldr	r2, [pc, #84]	@ (9000bdcc <UTIL_LCD_DisplayChar+0x68>)
9000bd78:	015b      	lsls	r3, r3, #5
9000bd7a:	4413      	add	r3, r2
9000bd7c:	3308      	adds	r3, #8
9000bd7e:	681b      	ldr	r3, [r3, #0]
9000bd80:	681a      	ldr	r2, [r3, #0]
9000bd82:	79fb      	ldrb	r3, [r7, #7]
9000bd84:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bd86:	4911      	ldr	r1, [pc, #68]	@ (9000bdcc <UTIL_LCD_DisplayChar+0x68>)
9000bd88:	68c9      	ldr	r1, [r1, #12]
9000bd8a:	4810      	ldr	r0, [pc, #64]	@ (9000bdcc <UTIL_LCD_DisplayChar+0x68>)
9000bd8c:	0149      	lsls	r1, r1, #5
9000bd8e:	4401      	add	r1, r0
9000bd90:	3108      	adds	r1, #8
9000bd92:	6809      	ldr	r1, [r1, #0]
9000bd94:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bd96:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bd9a:	4b0c      	ldr	r3, [pc, #48]	@ (9000bdcc <UTIL_LCD_DisplayChar+0x68>)
9000bd9c:	68db      	ldr	r3, [r3, #12]
9000bd9e:	480b      	ldr	r0, [pc, #44]	@ (9000bdcc <UTIL_LCD_DisplayChar+0x68>)
9000bda0:	015b      	lsls	r3, r3, #5
9000bda2:	4403      	add	r3, r0
9000bda4:	3308      	adds	r3, #8
9000bda6:	681b      	ldr	r3, [r3, #0]
9000bda8:	889b      	ldrh	r3, [r3, #4]
9000bdaa:	3307      	adds	r3, #7
9000bdac:	2b00      	cmp	r3, #0
9000bdae:	da00      	bge.n	9000bdb2 <UTIL_LCD_DisplayChar+0x4e>
9000bdb0:	3307      	adds	r3, #7
9000bdb2:	10db      	asrs	r3, r3, #3
9000bdb4:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bdb8:	4413      	add	r3, r2
9000bdba:	461a      	mov	r2, r3
9000bdbc:	68b9      	ldr	r1, [r7, #8]
9000bdbe:	68f8      	ldr	r0, [r7, #12]
9000bdc0:	f000 f8ee 	bl	9000bfa0 <DrawChar>
}
9000bdc4:	bf00      	nop
9000bdc6:	3710      	adds	r7, #16
9000bdc8:	46bd      	mov	sp, r7
9000bdca:	bd80      	pop	{r7, pc}
9000bdcc:	200012e8 	.word	0x200012e8

9000bdd0 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000bdd0:	b580      	push	{r7, lr}
9000bdd2:	b08a      	sub	sp, #40	@ 0x28
9000bdd4:	af00      	add	r7, sp, #0
9000bdd6:	60f8      	str	r0, [r7, #12]
9000bdd8:	60b9      	str	r1, [r7, #8]
9000bdda:	607a      	str	r2, [r7, #4]
9000bddc:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000bdde:	2301      	movs	r3, #1
9000bde0:	627b      	str	r3, [r7, #36]	@ 0x24
9000bde2:	2300      	movs	r3, #0
9000bde4:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000bde6:	2300      	movs	r3, #0
9000bde8:	61fb      	str	r3, [r7, #28]
9000bdea:	2300      	movs	r3, #0
9000bdec:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000bdee:	687b      	ldr	r3, [r7, #4]
9000bdf0:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000bdf2:	e002      	b.n	9000bdfa <UTIL_LCD_DisplayStringAt+0x2a>
9000bdf4:	69fb      	ldr	r3, [r7, #28]
9000bdf6:	3301      	adds	r3, #1
9000bdf8:	61fb      	str	r3, [r7, #28]
9000bdfa:	69bb      	ldr	r3, [r7, #24]
9000bdfc:	1c5a      	adds	r2, r3, #1
9000bdfe:	61ba      	str	r2, [r7, #24]
9000be00:	781b      	ldrb	r3, [r3, #0]
9000be02:	2b00      	cmp	r3, #0
9000be04:	d1f6      	bne.n	9000bdf4 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000be06:	4b48      	ldr	r3, [pc, #288]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000be08:	695b      	ldr	r3, [r3, #20]
9000be0a:	4a47      	ldr	r2, [pc, #284]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000be0c:	68d2      	ldr	r2, [r2, #12]
9000be0e:	4946      	ldr	r1, [pc, #280]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000be10:	0152      	lsls	r2, r2, #5
9000be12:	440a      	add	r2, r1
9000be14:	3208      	adds	r2, #8
9000be16:	6812      	ldr	r2, [r2, #0]
9000be18:	8892      	ldrh	r2, [r2, #4]
9000be1a:	fbb3 f3f2 	udiv	r3, r3, r2
9000be1e:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000be20:	78fb      	ldrb	r3, [r7, #3]
9000be22:	2b03      	cmp	r3, #3
9000be24:	d018      	beq.n	9000be58 <UTIL_LCD_DisplayStringAt+0x88>
9000be26:	2b03      	cmp	r3, #3
9000be28:	dc2a      	bgt.n	9000be80 <UTIL_LCD_DisplayStringAt+0xb0>
9000be2a:	2b01      	cmp	r3, #1
9000be2c:	d002      	beq.n	9000be34 <UTIL_LCD_DisplayStringAt+0x64>
9000be2e:	2b02      	cmp	r3, #2
9000be30:	d015      	beq.n	9000be5e <UTIL_LCD_DisplayStringAt+0x8e>
9000be32:	e025      	b.n	9000be80 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000be34:	697a      	ldr	r2, [r7, #20]
9000be36:	69fb      	ldr	r3, [r7, #28]
9000be38:	1ad3      	subs	r3, r2, r3
9000be3a:	4a3b      	ldr	r2, [pc, #236]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000be3c:	68d2      	ldr	r2, [r2, #12]
9000be3e:	493a      	ldr	r1, [pc, #232]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000be40:	0152      	lsls	r2, r2, #5
9000be42:	440a      	add	r2, r1
9000be44:	3208      	adds	r2, #8
9000be46:	6812      	ldr	r2, [r2, #0]
9000be48:	8892      	ldrh	r2, [r2, #4]
9000be4a:	fb02 f303 	mul.w	r3, r2, r3
9000be4e:	085b      	lsrs	r3, r3, #1
9000be50:	68fa      	ldr	r2, [r7, #12]
9000be52:	4413      	add	r3, r2
9000be54:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be56:	e016      	b.n	9000be86 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000be58:	68fb      	ldr	r3, [r7, #12]
9000be5a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be5c:	e013      	b.n	9000be86 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000be5e:	697a      	ldr	r2, [r7, #20]
9000be60:	69fb      	ldr	r3, [r7, #28]
9000be62:	1ad3      	subs	r3, r2, r3
9000be64:	4a30      	ldr	r2, [pc, #192]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000be66:	68d2      	ldr	r2, [r2, #12]
9000be68:	492f      	ldr	r1, [pc, #188]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000be6a:	0152      	lsls	r2, r2, #5
9000be6c:	440a      	add	r2, r1
9000be6e:	3208      	adds	r2, #8
9000be70:	6812      	ldr	r2, [r2, #0]
9000be72:	8892      	ldrh	r2, [r2, #4]
9000be74:	fb03 f202 	mul.w	r2, r3, r2
9000be78:	68fb      	ldr	r3, [r7, #12]
9000be7a:	1ad3      	subs	r3, r2, r3
9000be7c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be7e:	e002      	b.n	9000be86 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000be80:	68fb      	ldr	r3, [r7, #12]
9000be82:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be84:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000be88:	2b00      	cmp	r3, #0
9000be8a:	d003      	beq.n	9000be94 <UTIL_LCD_DisplayStringAt+0xc4>
9000be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000be8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000be92:	d31b      	bcc.n	9000becc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000be94:	2301      	movs	r3, #1
9000be96:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000be98:	e018      	b.n	9000becc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000be9a:	687b      	ldr	r3, [r7, #4]
9000be9c:	781b      	ldrb	r3, [r3, #0]
9000be9e:	461a      	mov	r2, r3
9000bea0:	68b9      	ldr	r1, [r7, #8]
9000bea2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000bea4:	f7ff ff5e 	bl	9000bd64 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bea8:	4b1f      	ldr	r3, [pc, #124]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000beaa:	68db      	ldr	r3, [r3, #12]
9000beac:	4a1e      	ldr	r2, [pc, #120]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000beae:	015b      	lsls	r3, r3, #5
9000beb0:	4413      	add	r3, r2
9000beb2:	3308      	adds	r3, #8
9000beb4:	681b      	ldr	r3, [r3, #0]
9000beb6:	889b      	ldrh	r3, [r3, #4]
9000beb8:	461a      	mov	r2, r3
9000beba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bebc:	4413      	add	r3, r2
9000bebe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000bec0:	687b      	ldr	r3, [r7, #4]
9000bec2:	3301      	adds	r3, #1
9000bec4:	607b      	str	r3, [r7, #4]
    i++;
9000bec6:	6a3b      	ldr	r3, [r7, #32]
9000bec8:	3301      	adds	r3, #1
9000beca:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000becc:	687b      	ldr	r3, [r7, #4]
9000bece:	781b      	ldrb	r3, [r3, #0]
9000bed0:	2b00      	cmp	r3, #0
9000bed2:	bf14      	ite	ne
9000bed4:	2301      	movne	r3, #1
9000bed6:	2300      	moveq	r3, #0
9000bed8:	b2da      	uxtb	r2, r3
9000beda:	4b13      	ldr	r3, [pc, #76]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000bedc:	6959      	ldr	r1, [r3, #20]
9000bede:	4b12      	ldr	r3, [pc, #72]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000bee0:	68db      	ldr	r3, [r3, #12]
9000bee2:	4811      	ldr	r0, [pc, #68]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000bee4:	015b      	lsls	r3, r3, #5
9000bee6:	4403      	add	r3, r0
9000bee8:	3308      	adds	r3, #8
9000beea:	681b      	ldr	r3, [r3, #0]
9000beec:	889b      	ldrh	r3, [r3, #4]
9000beee:	4618      	mov	r0, r3
9000bef0:	6a3b      	ldr	r3, [r7, #32]
9000bef2:	fb00 f303 	mul.w	r3, r0, r3
9000bef6:	1acb      	subs	r3, r1, r3
9000bef8:	b29b      	uxth	r3, r3
9000befa:	490b      	ldr	r1, [pc, #44]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000befc:	68c9      	ldr	r1, [r1, #12]
9000befe:	480a      	ldr	r0, [pc, #40]	@ (9000bf28 <UTIL_LCD_DisplayStringAt+0x158>)
9000bf00:	0149      	lsls	r1, r1, #5
9000bf02:	4401      	add	r1, r0
9000bf04:	3108      	adds	r1, #8
9000bf06:	6809      	ldr	r1, [r1, #0]
9000bf08:	8889      	ldrh	r1, [r1, #4]
9000bf0a:	428b      	cmp	r3, r1
9000bf0c:	bf2c      	ite	cs
9000bf0e:	2301      	movcs	r3, #1
9000bf10:	2300      	movcc	r3, #0
9000bf12:	b2db      	uxtb	r3, r3
9000bf14:	4013      	ands	r3, r2
9000bf16:	b2db      	uxtb	r3, r3
9000bf18:	2b00      	cmp	r3, #0
9000bf1a:	d1be      	bne.n	9000be9a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000bf1c:	bf00      	nop
9000bf1e:	bf00      	nop
9000bf20:	3728      	adds	r7, #40	@ 0x28
9000bf22:	46bd      	mov	sp, r7
9000bf24:	bd80      	pop	{r7, pc}
9000bf26:	bf00      	nop
9000bf28:	200012e8 	.word	0x200012e8

9000bf2c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000bf2c:	b590      	push	{r4, r7, lr}
9000bf2e:	b087      	sub	sp, #28
9000bf30:	af02      	add	r7, sp, #8
9000bf32:	60f8      	str	r0, [r7, #12]
9000bf34:	60b9      	str	r1, [r7, #8]
9000bf36:	607a      	str	r2, [r7, #4]
9000bf38:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bf3a:	4b17      	ldr	r3, [pc, #92]	@ (9000bf98 <UTIL_LCD_FillRect+0x6c>)
9000bf3c:	69db      	ldr	r3, [r3, #28]
9000bf3e:	2b02      	cmp	r3, #2
9000bf40:	d11a      	bne.n	9000bf78 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000bf42:	4b16      	ldr	r3, [pc, #88]	@ (9000bf9c <UTIL_LCD_FillRect+0x70>)
9000bf44:	691c      	ldr	r4, [r3, #16]
9000bf46:	4b14      	ldr	r3, [pc, #80]	@ (9000bf98 <UTIL_LCD_FillRect+0x6c>)
9000bf48:	6918      	ldr	r0, [r3, #16]
9000bf4a:	6a3b      	ldr	r3, [r7, #32]
9000bf4c:	08db      	lsrs	r3, r3, #3
9000bf4e:	f003 021f 	and.w	r2, r3, #31
9000bf52:	6a3b      	ldr	r3, [r7, #32]
9000bf54:	0a9b      	lsrs	r3, r3, #10
9000bf56:	015b      	lsls	r3, r3, #5
9000bf58:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bf5c:	431a      	orrs	r2, r3
9000bf5e:	6a3b      	ldr	r3, [r7, #32]
9000bf60:	0cdb      	lsrs	r3, r3, #19
9000bf62:	02db      	lsls	r3, r3, #11
9000bf64:	b29b      	uxth	r3, r3
9000bf66:	4313      	orrs	r3, r2
9000bf68:	9301      	str	r3, [sp, #4]
9000bf6a:	683b      	ldr	r3, [r7, #0]
9000bf6c:	9300      	str	r3, [sp, #0]
9000bf6e:	687b      	ldr	r3, [r7, #4]
9000bf70:	68ba      	ldr	r2, [r7, #8]
9000bf72:	68f9      	ldr	r1, [r7, #12]
9000bf74:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000bf76:	e00b      	b.n	9000bf90 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000bf78:	4b08      	ldr	r3, [pc, #32]	@ (9000bf9c <UTIL_LCD_FillRect+0x70>)
9000bf7a:	691c      	ldr	r4, [r3, #16]
9000bf7c:	4b06      	ldr	r3, [pc, #24]	@ (9000bf98 <UTIL_LCD_FillRect+0x6c>)
9000bf7e:	6918      	ldr	r0, [r3, #16]
9000bf80:	6a3b      	ldr	r3, [r7, #32]
9000bf82:	9301      	str	r3, [sp, #4]
9000bf84:	683b      	ldr	r3, [r7, #0]
9000bf86:	9300      	str	r3, [sp, #0]
9000bf88:	687b      	ldr	r3, [r7, #4]
9000bf8a:	68ba      	ldr	r2, [r7, #8]
9000bf8c:	68f9      	ldr	r1, [r7, #12]
9000bf8e:	47a0      	blx	r4
}
9000bf90:	bf00      	nop
9000bf92:	3714      	adds	r7, #20
9000bf94:	46bd      	mov	sp, r7
9000bf96:	bd90      	pop	{r4, r7, pc}
9000bf98:	200012e8 	.word	0x200012e8
9000bf9c:	20001328 	.word	0x20001328

9000bfa0 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000bfa0:	b580      	push	{r7, lr}
9000bfa2:	b0b2      	sub	sp, #200	@ 0xc8
9000bfa4:	af02      	add	r7, sp, #8
9000bfa6:	60f8      	str	r0, [r7, #12]
9000bfa8:	60b9      	str	r1, [r7, #8]
9000bfaa:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000bfac:	2300      	movs	r3, #0
9000bfae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bfb2:	2300      	movs	r3, #0
9000bfb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bfb8:	4ba5      	ldr	r3, [pc, #660]	@ (9000c250 <DrawChar+0x2b0>)
9000bfba:	68db      	ldr	r3, [r3, #12]
9000bfbc:	4aa4      	ldr	r2, [pc, #656]	@ (9000c250 <DrawChar+0x2b0>)
9000bfbe:	015b      	lsls	r3, r3, #5
9000bfc0:	4413      	add	r3, r2
9000bfc2:	3308      	adds	r3, #8
9000bfc4:	681b      	ldr	r3, [r3, #0]
9000bfc6:	88db      	ldrh	r3, [r3, #6]
9000bfc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bfcc:	4ba0      	ldr	r3, [pc, #640]	@ (9000c250 <DrawChar+0x2b0>)
9000bfce:	68db      	ldr	r3, [r3, #12]
9000bfd0:	4a9f      	ldr	r2, [pc, #636]	@ (9000c250 <DrawChar+0x2b0>)
9000bfd2:	015b      	lsls	r3, r3, #5
9000bfd4:	4413      	add	r3, r2
9000bfd6:	3308      	adds	r3, #8
9000bfd8:	681b      	ldr	r3, [r3, #0]
9000bfda:	889b      	ldrh	r3, [r3, #4]
9000bfdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000bfe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bfe4:	3307      	adds	r3, #7
9000bfe6:	f023 0207 	bic.w	r2, r3, #7
9000bfea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bfee:	1ad3      	subs	r3, r2, r3
9000bff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000bff4:	2300      	movs	r3, #0
9000bff6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bffa:	e11c      	b.n	9000c236 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000bffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c000:	3307      	adds	r3, #7
9000c002:	08db      	lsrs	r3, r3, #3
9000c004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c008:	fb02 f303 	mul.w	r3, r2, r3
9000c00c:	687a      	ldr	r2, [r7, #4]
9000c00e:	4413      	add	r3, r2
9000c010:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000c014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c018:	3307      	adds	r3, #7
9000c01a:	08db      	lsrs	r3, r3, #3
9000c01c:	2b01      	cmp	r3, #1
9000c01e:	d002      	beq.n	9000c026 <DrawChar+0x86>
9000c020:	2b02      	cmp	r3, #2
9000c022:	d006      	beq.n	9000c032 <DrawChar+0x92>
9000c024:	e011      	b.n	9000c04a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000c026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c02a:	781b      	ldrb	r3, [r3, #0]
9000c02c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c030:	e01d      	b.n	9000c06e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000c032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c036:	781b      	ldrb	r3, [r3, #0]
9000c038:	021b      	lsls	r3, r3, #8
9000c03a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c03e:	3201      	adds	r2, #1
9000c040:	7812      	ldrb	r2, [r2, #0]
9000c042:	4313      	orrs	r3, r2
9000c044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c048:	e011      	b.n	9000c06e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000c04a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c04e:	781b      	ldrb	r3, [r3, #0]
9000c050:	041a      	lsls	r2, r3, #16
9000c052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c056:	3301      	adds	r3, #1
9000c058:	781b      	ldrb	r3, [r3, #0]
9000c05a:	021b      	lsls	r3, r3, #8
9000c05c:	4313      	orrs	r3, r2
9000c05e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c062:	3202      	adds	r2, #2
9000c064:	7812      	ldrb	r2, [r2, #0]
9000c066:	4313      	orrs	r3, r2
9000c068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c06c:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c06e:	4b78      	ldr	r3, [pc, #480]	@ (9000c250 <DrawChar+0x2b0>)
9000c070:	68db      	ldr	r3, [r3, #12]
9000c072:	4a77      	ldr	r2, [pc, #476]	@ (9000c250 <DrawChar+0x2b0>)
9000c074:	015b      	lsls	r3, r3, #5
9000c076:	4413      	add	r3, r2
9000c078:	331c      	adds	r3, #28
9000c07a:	681b      	ldr	r3, [r3, #0]
9000c07c:	2b02      	cmp	r3, #2
9000c07e:	f040 808c 	bne.w	9000c19a <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000c082:	2300      	movs	r3, #0
9000c084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c088:	e074      	b.n	9000c174 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c08a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c08e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c092:	1ad2      	subs	r2, r2, r3
9000c094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c098:	4413      	add	r3, r2
9000c09a:	3b01      	subs	r3, #1
9000c09c:	2201      	movs	r2, #1
9000c09e:	fa02 f303 	lsl.w	r3, r2, r3
9000c0a2:	461a      	mov	r2, r3
9000c0a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c0a8:	4013      	ands	r3, r2
9000c0aa:	2b00      	cmp	r3, #0
9000c0ac:	d02d      	beq.n	9000c10a <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000c0ae:	4b68      	ldr	r3, [pc, #416]	@ (9000c250 <DrawChar+0x2b0>)
9000c0b0:	68db      	ldr	r3, [r3, #12]
9000c0b2:	4a67      	ldr	r2, [pc, #412]	@ (9000c250 <DrawChar+0x2b0>)
9000c0b4:	015b      	lsls	r3, r3, #5
9000c0b6:	4413      	add	r3, r2
9000c0b8:	681b      	ldr	r3, [r3, #0]
9000c0ba:	08db      	lsrs	r3, r3, #3
9000c0bc:	b29b      	uxth	r3, r3
9000c0be:	f003 031f 	and.w	r3, r3, #31
9000c0c2:	b29a      	uxth	r2, r3
9000c0c4:	4b62      	ldr	r3, [pc, #392]	@ (9000c250 <DrawChar+0x2b0>)
9000c0c6:	68db      	ldr	r3, [r3, #12]
9000c0c8:	4961      	ldr	r1, [pc, #388]	@ (9000c250 <DrawChar+0x2b0>)
9000c0ca:	015b      	lsls	r3, r3, #5
9000c0cc:	440b      	add	r3, r1
9000c0ce:	681b      	ldr	r3, [r3, #0]
9000c0d0:	0a9b      	lsrs	r3, r3, #10
9000c0d2:	b29b      	uxth	r3, r3
9000c0d4:	015b      	lsls	r3, r3, #5
9000c0d6:	b29b      	uxth	r3, r3
9000c0d8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c0dc:	b29b      	uxth	r3, r3
9000c0de:	4313      	orrs	r3, r2
9000c0e0:	b29a      	uxth	r2, r3
9000c0e2:	4b5b      	ldr	r3, [pc, #364]	@ (9000c250 <DrawChar+0x2b0>)
9000c0e4:	68db      	ldr	r3, [r3, #12]
9000c0e6:	495a      	ldr	r1, [pc, #360]	@ (9000c250 <DrawChar+0x2b0>)
9000c0e8:	015b      	lsls	r3, r3, #5
9000c0ea:	440b      	add	r3, r1
9000c0ec:	681b      	ldr	r3, [r3, #0]
9000c0ee:	0cdb      	lsrs	r3, r3, #19
9000c0f0:	b29b      	uxth	r3, r3
9000c0f2:	02db      	lsls	r3, r3, #11
9000c0f4:	b29b      	uxth	r3, r3
9000c0f6:	4313      	orrs	r3, r2
9000c0f8:	b29a      	uxth	r2, r3
9000c0fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0fe:	005b      	lsls	r3, r3, #1
9000c100:	33c0      	adds	r3, #192	@ 0xc0
9000c102:	443b      	add	r3, r7
9000c104:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000c108:	e02f      	b.n	9000c16a <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000c10a:	4b51      	ldr	r3, [pc, #324]	@ (9000c250 <DrawChar+0x2b0>)
9000c10c:	68db      	ldr	r3, [r3, #12]
9000c10e:	4a50      	ldr	r2, [pc, #320]	@ (9000c250 <DrawChar+0x2b0>)
9000c110:	015b      	lsls	r3, r3, #5
9000c112:	4413      	add	r3, r2
9000c114:	3304      	adds	r3, #4
9000c116:	681b      	ldr	r3, [r3, #0]
9000c118:	08db      	lsrs	r3, r3, #3
9000c11a:	b29b      	uxth	r3, r3
9000c11c:	f003 031f 	and.w	r3, r3, #31
9000c120:	b29a      	uxth	r2, r3
9000c122:	4b4b      	ldr	r3, [pc, #300]	@ (9000c250 <DrawChar+0x2b0>)
9000c124:	68db      	ldr	r3, [r3, #12]
9000c126:	494a      	ldr	r1, [pc, #296]	@ (9000c250 <DrawChar+0x2b0>)
9000c128:	015b      	lsls	r3, r3, #5
9000c12a:	440b      	add	r3, r1
9000c12c:	3304      	adds	r3, #4
9000c12e:	681b      	ldr	r3, [r3, #0]
9000c130:	0a9b      	lsrs	r3, r3, #10
9000c132:	b29b      	uxth	r3, r3
9000c134:	015b      	lsls	r3, r3, #5
9000c136:	b29b      	uxth	r3, r3
9000c138:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c13c:	b29b      	uxth	r3, r3
9000c13e:	4313      	orrs	r3, r2
9000c140:	b29a      	uxth	r2, r3
9000c142:	4b43      	ldr	r3, [pc, #268]	@ (9000c250 <DrawChar+0x2b0>)
9000c144:	68db      	ldr	r3, [r3, #12]
9000c146:	4942      	ldr	r1, [pc, #264]	@ (9000c250 <DrawChar+0x2b0>)
9000c148:	015b      	lsls	r3, r3, #5
9000c14a:	440b      	add	r3, r1
9000c14c:	3304      	adds	r3, #4
9000c14e:	681b      	ldr	r3, [r3, #0]
9000c150:	0cdb      	lsrs	r3, r3, #19
9000c152:	b29b      	uxth	r3, r3
9000c154:	02db      	lsls	r3, r3, #11
9000c156:	b29b      	uxth	r3, r3
9000c158:	4313      	orrs	r3, r2
9000c15a:	b29a      	uxth	r2, r3
9000c15c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c160:	005b      	lsls	r3, r3, #1
9000c162:	33c0      	adds	r3, #192	@ 0xc0
9000c164:	443b      	add	r3, r7
9000c166:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000c16a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c16e:	3301      	adds	r3, #1
9000c170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c174:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c17c:	429a      	cmp	r2, r3
9000c17e:	d384      	bcc.n	9000c08a <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000c180:	68b9      	ldr	r1, [r7, #8]
9000c182:	1c4b      	adds	r3, r1, #1
9000c184:	60bb      	str	r3, [r7, #8]
9000c186:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000c18a:	2301      	movs	r3, #1
9000c18c:	9300      	str	r3, [sp, #0]
9000c18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c192:	68f8      	ldr	r0, [r7, #12]
9000c194:	f7ff fdb4 	bl	9000bd00 <UTIL_LCD_FillRGBRect>
9000c198:	e048      	b.n	9000c22c <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000c19a:	2300      	movs	r3, #0
9000c19c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c1a0:	e032      	b.n	9000c208 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c1a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c1a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c1aa:	1ad2      	subs	r2, r2, r3
9000c1ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c1b0:	4413      	add	r3, r2
9000c1b2:	3b01      	subs	r3, #1
9000c1b4:	2201      	movs	r2, #1
9000c1b6:	fa02 f303 	lsl.w	r3, r2, r3
9000c1ba:	461a      	mov	r2, r3
9000c1bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c1c0:	4013      	ands	r3, r2
9000c1c2:	2b00      	cmp	r3, #0
9000c1c4:	d00d      	beq.n	9000c1e2 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000c1c6:	4b22      	ldr	r3, [pc, #136]	@ (9000c250 <DrawChar+0x2b0>)
9000c1c8:	68db      	ldr	r3, [r3, #12]
9000c1ca:	4a21      	ldr	r2, [pc, #132]	@ (9000c250 <DrawChar+0x2b0>)
9000c1cc:	015b      	lsls	r3, r3, #5
9000c1ce:	4413      	add	r3, r2
9000c1d0:	681a      	ldr	r2, [r3, #0]
9000c1d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c1d6:	009b      	lsls	r3, r3, #2
9000c1d8:	33c0      	adds	r3, #192	@ 0xc0
9000c1da:	443b      	add	r3, r7
9000c1dc:	f843 2cac 	str.w	r2, [r3, #-172]
9000c1e0:	e00d      	b.n	9000c1fe <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000c1e2:	4b1b      	ldr	r3, [pc, #108]	@ (9000c250 <DrawChar+0x2b0>)
9000c1e4:	68db      	ldr	r3, [r3, #12]
9000c1e6:	4a1a      	ldr	r2, [pc, #104]	@ (9000c250 <DrawChar+0x2b0>)
9000c1e8:	015b      	lsls	r3, r3, #5
9000c1ea:	4413      	add	r3, r2
9000c1ec:	3304      	adds	r3, #4
9000c1ee:	681a      	ldr	r2, [r3, #0]
9000c1f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c1f4:	009b      	lsls	r3, r3, #2
9000c1f6:	33c0      	adds	r3, #192	@ 0xc0
9000c1f8:	443b      	add	r3, r7
9000c1fa:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000c1fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c202:	3301      	adds	r3, #1
9000c204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c208:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c20c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c210:	429a      	cmp	r2, r3
9000c212:	d3c6      	bcc.n	9000c1a2 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000c214:	68b9      	ldr	r1, [r7, #8]
9000c216:	1c4b      	adds	r3, r1, #1
9000c218:	60bb      	str	r3, [r7, #8]
9000c21a:	f107 0214 	add.w	r2, r7, #20
9000c21e:	2301      	movs	r3, #1
9000c220:	9300      	str	r3, [sp, #0]
9000c222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c226:	68f8      	ldr	r0, [r7, #12]
9000c228:	f7ff fd6a 	bl	9000bd00 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000c22c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000c230:	3301      	adds	r3, #1
9000c232:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c236:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c23a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000c23e:	429a      	cmp	r2, r3
9000c240:	f4ff aedc 	bcc.w	9000bffc <DrawChar+0x5c>
    }
  }
}
9000c244:	bf00      	nop
9000c246:	bf00      	nop
9000c248:	37c0      	adds	r7, #192	@ 0xc0
9000c24a:	46bd      	mov	sp, r7
9000c24c:	bd80      	pop	{r7, pc}
9000c24e:	bf00      	nop
9000c250:	200012e8 	.word	0x200012e8

9000c254 <sbrk_aligned>:
9000c254:	b570      	push	{r4, r5, r6, lr}
9000c256:	4e0f      	ldr	r6, [pc, #60]	@ (9000c294 <sbrk_aligned+0x40>)
9000c258:	460c      	mov	r4, r1
9000c25a:	6831      	ldr	r1, [r6, #0]
9000c25c:	4605      	mov	r5, r0
9000c25e:	b911      	cbnz	r1, 9000c266 <sbrk_aligned+0x12>
9000c260:	f000 fb0e 	bl	9000c880 <_sbrk_r>
9000c264:	6030      	str	r0, [r6, #0]
9000c266:	4621      	mov	r1, r4
9000c268:	4628      	mov	r0, r5
9000c26a:	f000 fb09 	bl	9000c880 <_sbrk_r>
9000c26e:	1c43      	adds	r3, r0, #1
9000c270:	d103      	bne.n	9000c27a <sbrk_aligned+0x26>
9000c272:	f04f 34ff 	mov.w	r4, #4294967295
9000c276:	4620      	mov	r0, r4
9000c278:	bd70      	pop	{r4, r5, r6, pc}
9000c27a:	1cc4      	adds	r4, r0, #3
9000c27c:	f024 0403 	bic.w	r4, r4, #3
9000c280:	42a0      	cmp	r0, r4
9000c282:	d0f8      	beq.n	9000c276 <sbrk_aligned+0x22>
9000c284:	1a21      	subs	r1, r4, r0
9000c286:	4628      	mov	r0, r5
9000c288:	f000 fafa 	bl	9000c880 <_sbrk_r>
9000c28c:	3001      	adds	r0, #1
9000c28e:	d1f2      	bne.n	9000c276 <sbrk_aligned+0x22>
9000c290:	e7ef      	b.n	9000c272 <sbrk_aligned+0x1e>
9000c292:	bf00      	nop
9000c294:	20001354 	.word	0x20001354

9000c298 <_malloc_r>:
9000c298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c29c:	1ccd      	adds	r5, r1, #3
9000c29e:	f025 0503 	bic.w	r5, r5, #3
9000c2a2:	3508      	adds	r5, #8
9000c2a4:	2d0c      	cmp	r5, #12
9000c2a6:	bf38      	it	cc
9000c2a8:	250c      	movcc	r5, #12
9000c2aa:	2d00      	cmp	r5, #0
9000c2ac:	4606      	mov	r6, r0
9000c2ae:	db01      	blt.n	9000c2b4 <_malloc_r+0x1c>
9000c2b0:	42a9      	cmp	r1, r5
9000c2b2:	d904      	bls.n	9000c2be <_malloc_r+0x26>
9000c2b4:	230c      	movs	r3, #12
9000c2b6:	6033      	str	r3, [r6, #0]
9000c2b8:	2000      	movs	r0, #0
9000c2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c2be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000c394 <_malloc_r+0xfc>
9000c2c2:	f000 f869 	bl	9000c398 <__malloc_lock>
9000c2c6:	f8d8 3000 	ldr.w	r3, [r8]
9000c2ca:	461c      	mov	r4, r3
9000c2cc:	bb44      	cbnz	r4, 9000c320 <_malloc_r+0x88>
9000c2ce:	4629      	mov	r1, r5
9000c2d0:	4630      	mov	r0, r6
9000c2d2:	f7ff ffbf 	bl	9000c254 <sbrk_aligned>
9000c2d6:	1c43      	adds	r3, r0, #1
9000c2d8:	4604      	mov	r4, r0
9000c2da:	d158      	bne.n	9000c38e <_malloc_r+0xf6>
9000c2dc:	f8d8 4000 	ldr.w	r4, [r8]
9000c2e0:	4627      	mov	r7, r4
9000c2e2:	2f00      	cmp	r7, #0
9000c2e4:	d143      	bne.n	9000c36e <_malloc_r+0xd6>
9000c2e6:	2c00      	cmp	r4, #0
9000c2e8:	d04b      	beq.n	9000c382 <_malloc_r+0xea>
9000c2ea:	6823      	ldr	r3, [r4, #0]
9000c2ec:	4639      	mov	r1, r7
9000c2ee:	4630      	mov	r0, r6
9000c2f0:	eb04 0903 	add.w	r9, r4, r3
9000c2f4:	f000 fac4 	bl	9000c880 <_sbrk_r>
9000c2f8:	4581      	cmp	r9, r0
9000c2fa:	d142      	bne.n	9000c382 <_malloc_r+0xea>
9000c2fc:	6821      	ldr	r1, [r4, #0]
9000c2fe:	1a6d      	subs	r5, r5, r1
9000c300:	4629      	mov	r1, r5
9000c302:	4630      	mov	r0, r6
9000c304:	f7ff ffa6 	bl	9000c254 <sbrk_aligned>
9000c308:	3001      	adds	r0, #1
9000c30a:	d03a      	beq.n	9000c382 <_malloc_r+0xea>
9000c30c:	6823      	ldr	r3, [r4, #0]
9000c30e:	442b      	add	r3, r5
9000c310:	6023      	str	r3, [r4, #0]
9000c312:	f8d8 3000 	ldr.w	r3, [r8]
9000c316:	685a      	ldr	r2, [r3, #4]
9000c318:	bb62      	cbnz	r2, 9000c374 <_malloc_r+0xdc>
9000c31a:	f8c8 7000 	str.w	r7, [r8]
9000c31e:	e00f      	b.n	9000c340 <_malloc_r+0xa8>
9000c320:	6822      	ldr	r2, [r4, #0]
9000c322:	1b52      	subs	r2, r2, r5
9000c324:	d420      	bmi.n	9000c368 <_malloc_r+0xd0>
9000c326:	2a0b      	cmp	r2, #11
9000c328:	d917      	bls.n	9000c35a <_malloc_r+0xc2>
9000c32a:	1961      	adds	r1, r4, r5
9000c32c:	42a3      	cmp	r3, r4
9000c32e:	6025      	str	r5, [r4, #0]
9000c330:	bf18      	it	ne
9000c332:	6059      	strne	r1, [r3, #4]
9000c334:	6863      	ldr	r3, [r4, #4]
9000c336:	bf08      	it	eq
9000c338:	f8c8 1000 	streq.w	r1, [r8]
9000c33c:	5162      	str	r2, [r4, r5]
9000c33e:	604b      	str	r3, [r1, #4]
9000c340:	4630      	mov	r0, r6
9000c342:	f000 f82f 	bl	9000c3a4 <__malloc_unlock>
9000c346:	f104 000b 	add.w	r0, r4, #11
9000c34a:	1d23      	adds	r3, r4, #4
9000c34c:	f020 0007 	bic.w	r0, r0, #7
9000c350:	1ac2      	subs	r2, r0, r3
9000c352:	bf1c      	itt	ne
9000c354:	1a1b      	subne	r3, r3, r0
9000c356:	50a3      	strne	r3, [r4, r2]
9000c358:	e7af      	b.n	9000c2ba <_malloc_r+0x22>
9000c35a:	6862      	ldr	r2, [r4, #4]
9000c35c:	42a3      	cmp	r3, r4
9000c35e:	bf0c      	ite	eq
9000c360:	f8c8 2000 	streq.w	r2, [r8]
9000c364:	605a      	strne	r2, [r3, #4]
9000c366:	e7eb      	b.n	9000c340 <_malloc_r+0xa8>
9000c368:	4623      	mov	r3, r4
9000c36a:	6864      	ldr	r4, [r4, #4]
9000c36c:	e7ae      	b.n	9000c2cc <_malloc_r+0x34>
9000c36e:	463c      	mov	r4, r7
9000c370:	687f      	ldr	r7, [r7, #4]
9000c372:	e7b6      	b.n	9000c2e2 <_malloc_r+0x4a>
9000c374:	461a      	mov	r2, r3
9000c376:	685b      	ldr	r3, [r3, #4]
9000c378:	42a3      	cmp	r3, r4
9000c37a:	d1fb      	bne.n	9000c374 <_malloc_r+0xdc>
9000c37c:	2300      	movs	r3, #0
9000c37e:	6053      	str	r3, [r2, #4]
9000c380:	e7de      	b.n	9000c340 <_malloc_r+0xa8>
9000c382:	230c      	movs	r3, #12
9000c384:	6033      	str	r3, [r6, #0]
9000c386:	4630      	mov	r0, r6
9000c388:	f000 f80c 	bl	9000c3a4 <__malloc_unlock>
9000c38c:	e794      	b.n	9000c2b8 <_malloc_r+0x20>
9000c38e:	6005      	str	r5, [r0, #0]
9000c390:	e7d6      	b.n	9000c340 <_malloc_r+0xa8>
9000c392:	bf00      	nop
9000c394:	20001358 	.word	0x20001358

9000c398 <__malloc_lock>:
9000c398:	4801      	ldr	r0, [pc, #4]	@ (9000c3a0 <__malloc_lock+0x8>)
9000c39a:	f000 babe 	b.w	9000c91a <__retarget_lock_acquire_recursive>
9000c39e:	bf00      	nop
9000c3a0:	2000149c 	.word	0x2000149c

9000c3a4 <__malloc_unlock>:
9000c3a4:	4801      	ldr	r0, [pc, #4]	@ (9000c3ac <__malloc_unlock+0x8>)
9000c3a6:	f000 bab9 	b.w	9000c91c <__retarget_lock_release_recursive>
9000c3aa:	bf00      	nop
9000c3ac:	2000149c 	.word	0x2000149c

9000c3b0 <std>:
9000c3b0:	2300      	movs	r3, #0
9000c3b2:	b510      	push	{r4, lr}
9000c3b4:	4604      	mov	r4, r0
9000c3b6:	e9c0 3300 	strd	r3, r3, [r0]
9000c3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000c3be:	6083      	str	r3, [r0, #8]
9000c3c0:	8181      	strh	r1, [r0, #12]
9000c3c2:	6643      	str	r3, [r0, #100]	@ 0x64
9000c3c4:	81c2      	strh	r2, [r0, #14]
9000c3c6:	6183      	str	r3, [r0, #24]
9000c3c8:	4619      	mov	r1, r3
9000c3ca:	2208      	movs	r2, #8
9000c3cc:	305c      	adds	r0, #92	@ 0x5c
9000c3ce:	f000 fa1b 	bl	9000c808 <memset>
9000c3d2:	4b0d      	ldr	r3, [pc, #52]	@ (9000c408 <std+0x58>)
9000c3d4:	6263      	str	r3, [r4, #36]	@ 0x24
9000c3d6:	4b0d      	ldr	r3, [pc, #52]	@ (9000c40c <std+0x5c>)
9000c3d8:	62a3      	str	r3, [r4, #40]	@ 0x28
9000c3da:	4b0d      	ldr	r3, [pc, #52]	@ (9000c410 <std+0x60>)
9000c3dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000c3de:	4b0d      	ldr	r3, [pc, #52]	@ (9000c414 <std+0x64>)
9000c3e0:	6323      	str	r3, [r4, #48]	@ 0x30
9000c3e2:	4b0d      	ldr	r3, [pc, #52]	@ (9000c418 <std+0x68>)
9000c3e4:	6224      	str	r4, [r4, #32]
9000c3e6:	429c      	cmp	r4, r3
9000c3e8:	d006      	beq.n	9000c3f8 <std+0x48>
9000c3ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000c3ee:	4294      	cmp	r4, r2
9000c3f0:	d002      	beq.n	9000c3f8 <std+0x48>
9000c3f2:	33d0      	adds	r3, #208	@ 0xd0
9000c3f4:	429c      	cmp	r4, r3
9000c3f6:	d105      	bne.n	9000c404 <std+0x54>
9000c3f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000c3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c400:	f000 ba8a 	b.w	9000c918 <__retarget_lock_init_recursive>
9000c404:	bd10      	pop	{r4, pc}
9000c406:	bf00      	nop
9000c408:	9000c659 	.word	0x9000c659
9000c40c:	9000c67b 	.word	0x9000c67b
9000c410:	9000c6b3 	.word	0x9000c6b3
9000c414:	9000c6d7 	.word	0x9000c6d7
9000c418:	2000135c 	.word	0x2000135c

9000c41c <stdio_exit_handler>:
9000c41c:	4a02      	ldr	r2, [pc, #8]	@ (9000c428 <stdio_exit_handler+0xc>)
9000c41e:	4903      	ldr	r1, [pc, #12]	@ (9000c42c <stdio_exit_handler+0x10>)
9000c420:	4803      	ldr	r0, [pc, #12]	@ (9000c430 <stdio_exit_handler+0x14>)
9000c422:	f000 b869 	b.w	9000c4f8 <_fwalk_sglue>
9000c426:	bf00      	nop
9000c428:	20000070 	.word	0x20000070
9000c42c:	9000d325 	.word	0x9000d325
9000c430:	20000080 	.word	0x20000080

9000c434 <cleanup_stdio>:
9000c434:	6841      	ldr	r1, [r0, #4]
9000c436:	4b0c      	ldr	r3, [pc, #48]	@ (9000c468 <cleanup_stdio+0x34>)
9000c438:	4299      	cmp	r1, r3
9000c43a:	b510      	push	{r4, lr}
9000c43c:	4604      	mov	r4, r0
9000c43e:	d001      	beq.n	9000c444 <cleanup_stdio+0x10>
9000c440:	f000 ff70 	bl	9000d324 <_fflush_r>
9000c444:	68a1      	ldr	r1, [r4, #8]
9000c446:	4b09      	ldr	r3, [pc, #36]	@ (9000c46c <cleanup_stdio+0x38>)
9000c448:	4299      	cmp	r1, r3
9000c44a:	d002      	beq.n	9000c452 <cleanup_stdio+0x1e>
9000c44c:	4620      	mov	r0, r4
9000c44e:	f000 ff69 	bl	9000d324 <_fflush_r>
9000c452:	68e1      	ldr	r1, [r4, #12]
9000c454:	4b06      	ldr	r3, [pc, #24]	@ (9000c470 <cleanup_stdio+0x3c>)
9000c456:	4299      	cmp	r1, r3
9000c458:	d004      	beq.n	9000c464 <cleanup_stdio+0x30>
9000c45a:	4620      	mov	r0, r4
9000c45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c460:	f000 bf60 	b.w	9000d324 <_fflush_r>
9000c464:	bd10      	pop	{r4, pc}
9000c466:	bf00      	nop
9000c468:	2000135c 	.word	0x2000135c
9000c46c:	200013c4 	.word	0x200013c4
9000c470:	2000142c 	.word	0x2000142c

9000c474 <global_stdio_init.part.0>:
9000c474:	b510      	push	{r4, lr}
9000c476:	4b0b      	ldr	r3, [pc, #44]	@ (9000c4a4 <global_stdio_init.part.0+0x30>)
9000c478:	4c0b      	ldr	r4, [pc, #44]	@ (9000c4a8 <global_stdio_init.part.0+0x34>)
9000c47a:	4a0c      	ldr	r2, [pc, #48]	@ (9000c4ac <global_stdio_init.part.0+0x38>)
9000c47c:	601a      	str	r2, [r3, #0]
9000c47e:	4620      	mov	r0, r4
9000c480:	2200      	movs	r2, #0
9000c482:	2104      	movs	r1, #4
9000c484:	f7ff ff94 	bl	9000c3b0 <std>
9000c488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000c48c:	2201      	movs	r2, #1
9000c48e:	2109      	movs	r1, #9
9000c490:	f7ff ff8e 	bl	9000c3b0 <std>
9000c494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000c498:	2202      	movs	r2, #2
9000c49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c49e:	2112      	movs	r1, #18
9000c4a0:	f7ff bf86 	b.w	9000c3b0 <std>
9000c4a4:	20001494 	.word	0x20001494
9000c4a8:	2000135c 	.word	0x2000135c
9000c4ac:	9000c41d 	.word	0x9000c41d

9000c4b0 <__sfp_lock_acquire>:
9000c4b0:	4801      	ldr	r0, [pc, #4]	@ (9000c4b8 <__sfp_lock_acquire+0x8>)
9000c4b2:	f000 ba32 	b.w	9000c91a <__retarget_lock_acquire_recursive>
9000c4b6:	bf00      	nop
9000c4b8:	2000149d 	.word	0x2000149d

9000c4bc <__sfp_lock_release>:
9000c4bc:	4801      	ldr	r0, [pc, #4]	@ (9000c4c4 <__sfp_lock_release+0x8>)
9000c4be:	f000 ba2d 	b.w	9000c91c <__retarget_lock_release_recursive>
9000c4c2:	bf00      	nop
9000c4c4:	2000149d 	.word	0x2000149d

9000c4c8 <__sinit>:
9000c4c8:	b510      	push	{r4, lr}
9000c4ca:	4604      	mov	r4, r0
9000c4cc:	f7ff fff0 	bl	9000c4b0 <__sfp_lock_acquire>
9000c4d0:	6a23      	ldr	r3, [r4, #32]
9000c4d2:	b11b      	cbz	r3, 9000c4dc <__sinit+0x14>
9000c4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c4d8:	f7ff bff0 	b.w	9000c4bc <__sfp_lock_release>
9000c4dc:	4b04      	ldr	r3, [pc, #16]	@ (9000c4f0 <__sinit+0x28>)
9000c4de:	6223      	str	r3, [r4, #32]
9000c4e0:	4b04      	ldr	r3, [pc, #16]	@ (9000c4f4 <__sinit+0x2c>)
9000c4e2:	681b      	ldr	r3, [r3, #0]
9000c4e4:	2b00      	cmp	r3, #0
9000c4e6:	d1f5      	bne.n	9000c4d4 <__sinit+0xc>
9000c4e8:	f7ff ffc4 	bl	9000c474 <global_stdio_init.part.0>
9000c4ec:	e7f2      	b.n	9000c4d4 <__sinit+0xc>
9000c4ee:	bf00      	nop
9000c4f0:	9000c435 	.word	0x9000c435
9000c4f4:	20001494 	.word	0x20001494

9000c4f8 <_fwalk_sglue>:
9000c4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c4fc:	4607      	mov	r7, r0
9000c4fe:	4688      	mov	r8, r1
9000c500:	4614      	mov	r4, r2
9000c502:	2600      	movs	r6, #0
9000c504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c508:	f1b9 0901 	subs.w	r9, r9, #1
9000c50c:	d505      	bpl.n	9000c51a <_fwalk_sglue+0x22>
9000c50e:	6824      	ldr	r4, [r4, #0]
9000c510:	2c00      	cmp	r4, #0
9000c512:	d1f7      	bne.n	9000c504 <_fwalk_sglue+0xc>
9000c514:	4630      	mov	r0, r6
9000c516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c51a:	89ab      	ldrh	r3, [r5, #12]
9000c51c:	2b01      	cmp	r3, #1
9000c51e:	d907      	bls.n	9000c530 <_fwalk_sglue+0x38>
9000c520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c524:	3301      	adds	r3, #1
9000c526:	d003      	beq.n	9000c530 <_fwalk_sglue+0x38>
9000c528:	4629      	mov	r1, r5
9000c52a:	4638      	mov	r0, r7
9000c52c:	47c0      	blx	r8
9000c52e:	4306      	orrs	r6, r0
9000c530:	3568      	adds	r5, #104	@ 0x68
9000c532:	e7e9      	b.n	9000c508 <_fwalk_sglue+0x10>

9000c534 <iprintf>:
9000c534:	b40f      	push	{r0, r1, r2, r3}
9000c536:	b507      	push	{r0, r1, r2, lr}
9000c538:	4906      	ldr	r1, [pc, #24]	@ (9000c554 <iprintf+0x20>)
9000c53a:	ab04      	add	r3, sp, #16
9000c53c:	6808      	ldr	r0, [r1, #0]
9000c53e:	f853 2b04 	ldr.w	r2, [r3], #4
9000c542:	6881      	ldr	r1, [r0, #8]
9000c544:	9301      	str	r3, [sp, #4]
9000c546:	f000 fbc5 	bl	9000ccd4 <_vfiprintf_r>
9000c54a:	b003      	add	sp, #12
9000c54c:	f85d eb04 	ldr.w	lr, [sp], #4
9000c550:	b004      	add	sp, #16
9000c552:	4770      	bx	lr
9000c554:	2000007c 	.word	0x2000007c

9000c558 <_puts_r>:
9000c558:	6a03      	ldr	r3, [r0, #32]
9000c55a:	b570      	push	{r4, r5, r6, lr}
9000c55c:	6884      	ldr	r4, [r0, #8]
9000c55e:	4605      	mov	r5, r0
9000c560:	460e      	mov	r6, r1
9000c562:	b90b      	cbnz	r3, 9000c568 <_puts_r+0x10>
9000c564:	f7ff ffb0 	bl	9000c4c8 <__sinit>
9000c568:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c56a:	07db      	lsls	r3, r3, #31
9000c56c:	d405      	bmi.n	9000c57a <_puts_r+0x22>
9000c56e:	89a3      	ldrh	r3, [r4, #12]
9000c570:	0598      	lsls	r0, r3, #22
9000c572:	d402      	bmi.n	9000c57a <_puts_r+0x22>
9000c574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c576:	f000 f9d0 	bl	9000c91a <__retarget_lock_acquire_recursive>
9000c57a:	89a3      	ldrh	r3, [r4, #12]
9000c57c:	0719      	lsls	r1, r3, #28
9000c57e:	d502      	bpl.n	9000c586 <_puts_r+0x2e>
9000c580:	6923      	ldr	r3, [r4, #16]
9000c582:	2b00      	cmp	r3, #0
9000c584:	d135      	bne.n	9000c5f2 <_puts_r+0x9a>
9000c586:	4621      	mov	r1, r4
9000c588:	4628      	mov	r0, r5
9000c58a:	f000 f8e7 	bl	9000c75c <__swsetup_r>
9000c58e:	b380      	cbz	r0, 9000c5f2 <_puts_r+0x9a>
9000c590:	f04f 35ff 	mov.w	r5, #4294967295
9000c594:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c596:	07da      	lsls	r2, r3, #31
9000c598:	d405      	bmi.n	9000c5a6 <_puts_r+0x4e>
9000c59a:	89a3      	ldrh	r3, [r4, #12]
9000c59c:	059b      	lsls	r3, r3, #22
9000c59e:	d402      	bmi.n	9000c5a6 <_puts_r+0x4e>
9000c5a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c5a2:	f000 f9bb 	bl	9000c91c <__retarget_lock_release_recursive>
9000c5a6:	4628      	mov	r0, r5
9000c5a8:	bd70      	pop	{r4, r5, r6, pc}
9000c5aa:	2b00      	cmp	r3, #0
9000c5ac:	da04      	bge.n	9000c5b8 <_puts_r+0x60>
9000c5ae:	69a2      	ldr	r2, [r4, #24]
9000c5b0:	429a      	cmp	r2, r3
9000c5b2:	dc17      	bgt.n	9000c5e4 <_puts_r+0x8c>
9000c5b4:	290a      	cmp	r1, #10
9000c5b6:	d015      	beq.n	9000c5e4 <_puts_r+0x8c>
9000c5b8:	6823      	ldr	r3, [r4, #0]
9000c5ba:	1c5a      	adds	r2, r3, #1
9000c5bc:	6022      	str	r2, [r4, #0]
9000c5be:	7019      	strb	r1, [r3, #0]
9000c5c0:	68a3      	ldr	r3, [r4, #8]
9000c5c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c5c6:	3b01      	subs	r3, #1
9000c5c8:	60a3      	str	r3, [r4, #8]
9000c5ca:	2900      	cmp	r1, #0
9000c5cc:	d1ed      	bne.n	9000c5aa <_puts_r+0x52>
9000c5ce:	2b00      	cmp	r3, #0
9000c5d0:	da11      	bge.n	9000c5f6 <_puts_r+0x9e>
9000c5d2:	4622      	mov	r2, r4
9000c5d4:	210a      	movs	r1, #10
9000c5d6:	4628      	mov	r0, r5
9000c5d8:	f000 f881 	bl	9000c6de <__swbuf_r>
9000c5dc:	3001      	adds	r0, #1
9000c5de:	d0d7      	beq.n	9000c590 <_puts_r+0x38>
9000c5e0:	250a      	movs	r5, #10
9000c5e2:	e7d7      	b.n	9000c594 <_puts_r+0x3c>
9000c5e4:	4622      	mov	r2, r4
9000c5e6:	4628      	mov	r0, r5
9000c5e8:	f000 f879 	bl	9000c6de <__swbuf_r>
9000c5ec:	3001      	adds	r0, #1
9000c5ee:	d1e7      	bne.n	9000c5c0 <_puts_r+0x68>
9000c5f0:	e7ce      	b.n	9000c590 <_puts_r+0x38>
9000c5f2:	3e01      	subs	r6, #1
9000c5f4:	e7e4      	b.n	9000c5c0 <_puts_r+0x68>
9000c5f6:	6823      	ldr	r3, [r4, #0]
9000c5f8:	1c5a      	adds	r2, r3, #1
9000c5fa:	6022      	str	r2, [r4, #0]
9000c5fc:	220a      	movs	r2, #10
9000c5fe:	701a      	strb	r2, [r3, #0]
9000c600:	e7ee      	b.n	9000c5e0 <_puts_r+0x88>
	...

9000c604 <puts>:
9000c604:	4b02      	ldr	r3, [pc, #8]	@ (9000c610 <puts+0xc>)
9000c606:	4601      	mov	r1, r0
9000c608:	6818      	ldr	r0, [r3, #0]
9000c60a:	f7ff bfa5 	b.w	9000c558 <_puts_r>
9000c60e:	bf00      	nop
9000c610:	2000007c 	.word	0x2000007c

9000c614 <siprintf>:
9000c614:	b40e      	push	{r1, r2, r3}
9000c616:	b510      	push	{r4, lr}
9000c618:	b09d      	sub	sp, #116	@ 0x74
9000c61a:	ab1f      	add	r3, sp, #124	@ 0x7c
9000c61c:	9002      	str	r0, [sp, #8]
9000c61e:	9006      	str	r0, [sp, #24]
9000c620:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000c624:	480a      	ldr	r0, [pc, #40]	@ (9000c650 <siprintf+0x3c>)
9000c626:	9107      	str	r1, [sp, #28]
9000c628:	9104      	str	r1, [sp, #16]
9000c62a:	490a      	ldr	r1, [pc, #40]	@ (9000c654 <siprintf+0x40>)
9000c62c:	f853 2b04 	ldr.w	r2, [r3], #4
9000c630:	9105      	str	r1, [sp, #20]
9000c632:	2400      	movs	r4, #0
9000c634:	a902      	add	r1, sp, #8
9000c636:	6800      	ldr	r0, [r0, #0]
9000c638:	9301      	str	r3, [sp, #4]
9000c63a:	941b      	str	r4, [sp, #108]	@ 0x6c
9000c63c:	f000 fa24 	bl	9000ca88 <_svfiprintf_r>
9000c640:	9b02      	ldr	r3, [sp, #8]
9000c642:	701c      	strb	r4, [r3, #0]
9000c644:	b01d      	add	sp, #116	@ 0x74
9000c646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c64a:	b003      	add	sp, #12
9000c64c:	4770      	bx	lr
9000c64e:	bf00      	nop
9000c650:	2000007c 	.word	0x2000007c
9000c654:	ffff0208 	.word	0xffff0208

9000c658 <__sread>:
9000c658:	b510      	push	{r4, lr}
9000c65a:	460c      	mov	r4, r1
9000c65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c660:	f000 f8fc 	bl	9000c85c <_read_r>
9000c664:	2800      	cmp	r0, #0
9000c666:	bfab      	itete	ge
9000c668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c66a:	89a3      	ldrhlt	r3, [r4, #12]
9000c66c:	181b      	addge	r3, r3, r0
9000c66e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c672:	bfac      	ite	ge
9000c674:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c676:	81a3      	strhlt	r3, [r4, #12]
9000c678:	bd10      	pop	{r4, pc}

9000c67a <__swrite>:
9000c67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c67e:	461f      	mov	r7, r3
9000c680:	898b      	ldrh	r3, [r1, #12]
9000c682:	05db      	lsls	r3, r3, #23
9000c684:	4605      	mov	r5, r0
9000c686:	460c      	mov	r4, r1
9000c688:	4616      	mov	r6, r2
9000c68a:	d505      	bpl.n	9000c698 <__swrite+0x1e>
9000c68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c690:	2302      	movs	r3, #2
9000c692:	2200      	movs	r2, #0
9000c694:	f000 f8d0 	bl	9000c838 <_lseek_r>
9000c698:	89a3      	ldrh	r3, [r4, #12]
9000c69a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c69e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c6a2:	81a3      	strh	r3, [r4, #12]
9000c6a4:	4632      	mov	r2, r6
9000c6a6:	463b      	mov	r3, r7
9000c6a8:	4628      	mov	r0, r5
9000c6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c6ae:	f000 b8f7 	b.w	9000c8a0 <_write_r>

9000c6b2 <__sseek>:
9000c6b2:	b510      	push	{r4, lr}
9000c6b4:	460c      	mov	r4, r1
9000c6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c6ba:	f000 f8bd 	bl	9000c838 <_lseek_r>
9000c6be:	1c43      	adds	r3, r0, #1
9000c6c0:	89a3      	ldrh	r3, [r4, #12]
9000c6c2:	bf15      	itete	ne
9000c6c4:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c6c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c6ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c6ce:	81a3      	strheq	r3, [r4, #12]
9000c6d0:	bf18      	it	ne
9000c6d2:	81a3      	strhne	r3, [r4, #12]
9000c6d4:	bd10      	pop	{r4, pc}

9000c6d6 <__sclose>:
9000c6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c6da:	f000 b89d 	b.w	9000c818 <_close_r>

9000c6de <__swbuf_r>:
9000c6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c6e0:	460e      	mov	r6, r1
9000c6e2:	4614      	mov	r4, r2
9000c6e4:	4605      	mov	r5, r0
9000c6e6:	b118      	cbz	r0, 9000c6f0 <__swbuf_r+0x12>
9000c6e8:	6a03      	ldr	r3, [r0, #32]
9000c6ea:	b90b      	cbnz	r3, 9000c6f0 <__swbuf_r+0x12>
9000c6ec:	f7ff feec 	bl	9000c4c8 <__sinit>
9000c6f0:	69a3      	ldr	r3, [r4, #24]
9000c6f2:	60a3      	str	r3, [r4, #8]
9000c6f4:	89a3      	ldrh	r3, [r4, #12]
9000c6f6:	071a      	lsls	r2, r3, #28
9000c6f8:	d501      	bpl.n	9000c6fe <__swbuf_r+0x20>
9000c6fa:	6923      	ldr	r3, [r4, #16]
9000c6fc:	b943      	cbnz	r3, 9000c710 <__swbuf_r+0x32>
9000c6fe:	4621      	mov	r1, r4
9000c700:	4628      	mov	r0, r5
9000c702:	f000 f82b 	bl	9000c75c <__swsetup_r>
9000c706:	b118      	cbz	r0, 9000c710 <__swbuf_r+0x32>
9000c708:	f04f 37ff 	mov.w	r7, #4294967295
9000c70c:	4638      	mov	r0, r7
9000c70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c710:	6823      	ldr	r3, [r4, #0]
9000c712:	6922      	ldr	r2, [r4, #16]
9000c714:	1a98      	subs	r0, r3, r2
9000c716:	6963      	ldr	r3, [r4, #20]
9000c718:	b2f6      	uxtb	r6, r6
9000c71a:	4283      	cmp	r3, r0
9000c71c:	4637      	mov	r7, r6
9000c71e:	dc05      	bgt.n	9000c72c <__swbuf_r+0x4e>
9000c720:	4621      	mov	r1, r4
9000c722:	4628      	mov	r0, r5
9000c724:	f000 fdfe 	bl	9000d324 <_fflush_r>
9000c728:	2800      	cmp	r0, #0
9000c72a:	d1ed      	bne.n	9000c708 <__swbuf_r+0x2a>
9000c72c:	68a3      	ldr	r3, [r4, #8]
9000c72e:	3b01      	subs	r3, #1
9000c730:	60a3      	str	r3, [r4, #8]
9000c732:	6823      	ldr	r3, [r4, #0]
9000c734:	1c5a      	adds	r2, r3, #1
9000c736:	6022      	str	r2, [r4, #0]
9000c738:	701e      	strb	r6, [r3, #0]
9000c73a:	6962      	ldr	r2, [r4, #20]
9000c73c:	1c43      	adds	r3, r0, #1
9000c73e:	429a      	cmp	r2, r3
9000c740:	d004      	beq.n	9000c74c <__swbuf_r+0x6e>
9000c742:	89a3      	ldrh	r3, [r4, #12]
9000c744:	07db      	lsls	r3, r3, #31
9000c746:	d5e1      	bpl.n	9000c70c <__swbuf_r+0x2e>
9000c748:	2e0a      	cmp	r6, #10
9000c74a:	d1df      	bne.n	9000c70c <__swbuf_r+0x2e>
9000c74c:	4621      	mov	r1, r4
9000c74e:	4628      	mov	r0, r5
9000c750:	f000 fde8 	bl	9000d324 <_fflush_r>
9000c754:	2800      	cmp	r0, #0
9000c756:	d0d9      	beq.n	9000c70c <__swbuf_r+0x2e>
9000c758:	e7d6      	b.n	9000c708 <__swbuf_r+0x2a>
	...

9000c75c <__swsetup_r>:
9000c75c:	b538      	push	{r3, r4, r5, lr}
9000c75e:	4b29      	ldr	r3, [pc, #164]	@ (9000c804 <__swsetup_r+0xa8>)
9000c760:	4605      	mov	r5, r0
9000c762:	6818      	ldr	r0, [r3, #0]
9000c764:	460c      	mov	r4, r1
9000c766:	b118      	cbz	r0, 9000c770 <__swsetup_r+0x14>
9000c768:	6a03      	ldr	r3, [r0, #32]
9000c76a:	b90b      	cbnz	r3, 9000c770 <__swsetup_r+0x14>
9000c76c:	f7ff feac 	bl	9000c4c8 <__sinit>
9000c770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c774:	0719      	lsls	r1, r3, #28
9000c776:	d422      	bmi.n	9000c7be <__swsetup_r+0x62>
9000c778:	06da      	lsls	r2, r3, #27
9000c77a:	d407      	bmi.n	9000c78c <__swsetup_r+0x30>
9000c77c:	2209      	movs	r2, #9
9000c77e:	602a      	str	r2, [r5, #0]
9000c780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c784:	81a3      	strh	r3, [r4, #12]
9000c786:	f04f 30ff 	mov.w	r0, #4294967295
9000c78a:	e033      	b.n	9000c7f4 <__swsetup_r+0x98>
9000c78c:	0758      	lsls	r0, r3, #29
9000c78e:	d512      	bpl.n	9000c7b6 <__swsetup_r+0x5a>
9000c790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c792:	b141      	cbz	r1, 9000c7a6 <__swsetup_r+0x4a>
9000c794:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c798:	4299      	cmp	r1, r3
9000c79a:	d002      	beq.n	9000c7a2 <__swsetup_r+0x46>
9000c79c:	4628      	mov	r0, r5
9000c79e:	f000 f8cd 	bl	9000c93c <_free_r>
9000c7a2:	2300      	movs	r3, #0
9000c7a4:	6363      	str	r3, [r4, #52]	@ 0x34
9000c7a6:	89a3      	ldrh	r3, [r4, #12]
9000c7a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c7ac:	81a3      	strh	r3, [r4, #12]
9000c7ae:	2300      	movs	r3, #0
9000c7b0:	6063      	str	r3, [r4, #4]
9000c7b2:	6923      	ldr	r3, [r4, #16]
9000c7b4:	6023      	str	r3, [r4, #0]
9000c7b6:	89a3      	ldrh	r3, [r4, #12]
9000c7b8:	f043 0308 	orr.w	r3, r3, #8
9000c7bc:	81a3      	strh	r3, [r4, #12]
9000c7be:	6923      	ldr	r3, [r4, #16]
9000c7c0:	b94b      	cbnz	r3, 9000c7d6 <__swsetup_r+0x7a>
9000c7c2:	89a3      	ldrh	r3, [r4, #12]
9000c7c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c7c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c7cc:	d003      	beq.n	9000c7d6 <__swsetup_r+0x7a>
9000c7ce:	4621      	mov	r1, r4
9000c7d0:	4628      	mov	r0, r5
9000c7d2:	f000 fdf5 	bl	9000d3c0 <__smakebuf_r>
9000c7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c7da:	f013 0201 	ands.w	r2, r3, #1
9000c7de:	d00a      	beq.n	9000c7f6 <__swsetup_r+0x9a>
9000c7e0:	2200      	movs	r2, #0
9000c7e2:	60a2      	str	r2, [r4, #8]
9000c7e4:	6962      	ldr	r2, [r4, #20]
9000c7e6:	4252      	negs	r2, r2
9000c7e8:	61a2      	str	r2, [r4, #24]
9000c7ea:	6922      	ldr	r2, [r4, #16]
9000c7ec:	b942      	cbnz	r2, 9000c800 <__swsetup_r+0xa4>
9000c7ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c7f2:	d1c5      	bne.n	9000c780 <__swsetup_r+0x24>
9000c7f4:	bd38      	pop	{r3, r4, r5, pc}
9000c7f6:	0799      	lsls	r1, r3, #30
9000c7f8:	bf58      	it	pl
9000c7fa:	6962      	ldrpl	r2, [r4, #20]
9000c7fc:	60a2      	str	r2, [r4, #8]
9000c7fe:	e7f4      	b.n	9000c7ea <__swsetup_r+0x8e>
9000c800:	2000      	movs	r0, #0
9000c802:	e7f7      	b.n	9000c7f4 <__swsetup_r+0x98>
9000c804:	2000007c 	.word	0x2000007c

9000c808 <memset>:
9000c808:	4402      	add	r2, r0
9000c80a:	4603      	mov	r3, r0
9000c80c:	4293      	cmp	r3, r2
9000c80e:	d100      	bne.n	9000c812 <memset+0xa>
9000c810:	4770      	bx	lr
9000c812:	f803 1b01 	strb.w	r1, [r3], #1
9000c816:	e7f9      	b.n	9000c80c <memset+0x4>

9000c818 <_close_r>:
9000c818:	b538      	push	{r3, r4, r5, lr}
9000c81a:	4d06      	ldr	r5, [pc, #24]	@ (9000c834 <_close_r+0x1c>)
9000c81c:	2300      	movs	r3, #0
9000c81e:	4604      	mov	r4, r0
9000c820:	4608      	mov	r0, r1
9000c822:	602b      	str	r3, [r5, #0]
9000c824:	f7f4 fc31 	bl	9000108a <_close>
9000c828:	1c43      	adds	r3, r0, #1
9000c82a:	d102      	bne.n	9000c832 <_close_r+0x1a>
9000c82c:	682b      	ldr	r3, [r5, #0]
9000c82e:	b103      	cbz	r3, 9000c832 <_close_r+0x1a>
9000c830:	6023      	str	r3, [r4, #0]
9000c832:	bd38      	pop	{r3, r4, r5, pc}
9000c834:	20001498 	.word	0x20001498

9000c838 <_lseek_r>:
9000c838:	b538      	push	{r3, r4, r5, lr}
9000c83a:	4d07      	ldr	r5, [pc, #28]	@ (9000c858 <_lseek_r+0x20>)
9000c83c:	4604      	mov	r4, r0
9000c83e:	4608      	mov	r0, r1
9000c840:	4611      	mov	r1, r2
9000c842:	2200      	movs	r2, #0
9000c844:	602a      	str	r2, [r5, #0]
9000c846:	461a      	mov	r2, r3
9000c848:	f7f4 fc46 	bl	900010d8 <_lseek>
9000c84c:	1c43      	adds	r3, r0, #1
9000c84e:	d102      	bne.n	9000c856 <_lseek_r+0x1e>
9000c850:	682b      	ldr	r3, [r5, #0]
9000c852:	b103      	cbz	r3, 9000c856 <_lseek_r+0x1e>
9000c854:	6023      	str	r3, [r4, #0]
9000c856:	bd38      	pop	{r3, r4, r5, pc}
9000c858:	20001498 	.word	0x20001498

9000c85c <_read_r>:
9000c85c:	b538      	push	{r3, r4, r5, lr}
9000c85e:	4d07      	ldr	r5, [pc, #28]	@ (9000c87c <_read_r+0x20>)
9000c860:	4604      	mov	r4, r0
9000c862:	4608      	mov	r0, r1
9000c864:	4611      	mov	r1, r2
9000c866:	2200      	movs	r2, #0
9000c868:	602a      	str	r2, [r5, #0]
9000c86a:	461a      	mov	r2, r3
9000c86c:	f7f4 fbd4 	bl	90001018 <_read>
9000c870:	1c43      	adds	r3, r0, #1
9000c872:	d102      	bne.n	9000c87a <_read_r+0x1e>
9000c874:	682b      	ldr	r3, [r5, #0]
9000c876:	b103      	cbz	r3, 9000c87a <_read_r+0x1e>
9000c878:	6023      	str	r3, [r4, #0]
9000c87a:	bd38      	pop	{r3, r4, r5, pc}
9000c87c:	20001498 	.word	0x20001498

9000c880 <_sbrk_r>:
9000c880:	b538      	push	{r3, r4, r5, lr}
9000c882:	4d06      	ldr	r5, [pc, #24]	@ (9000c89c <_sbrk_r+0x1c>)
9000c884:	2300      	movs	r3, #0
9000c886:	4604      	mov	r4, r0
9000c888:	4608      	mov	r0, r1
9000c88a:	602b      	str	r3, [r5, #0]
9000c88c:	f7f4 fc32 	bl	900010f4 <_sbrk>
9000c890:	1c43      	adds	r3, r0, #1
9000c892:	d102      	bne.n	9000c89a <_sbrk_r+0x1a>
9000c894:	682b      	ldr	r3, [r5, #0]
9000c896:	b103      	cbz	r3, 9000c89a <_sbrk_r+0x1a>
9000c898:	6023      	str	r3, [r4, #0]
9000c89a:	bd38      	pop	{r3, r4, r5, pc}
9000c89c:	20001498 	.word	0x20001498

9000c8a0 <_write_r>:
9000c8a0:	b538      	push	{r3, r4, r5, lr}
9000c8a2:	4d07      	ldr	r5, [pc, #28]	@ (9000c8c0 <_write_r+0x20>)
9000c8a4:	4604      	mov	r4, r0
9000c8a6:	4608      	mov	r0, r1
9000c8a8:	4611      	mov	r1, r2
9000c8aa:	2200      	movs	r2, #0
9000c8ac:	602a      	str	r2, [r5, #0]
9000c8ae:	461a      	mov	r2, r3
9000c8b0:	f7f4 fbcf 	bl	90001052 <_write>
9000c8b4:	1c43      	adds	r3, r0, #1
9000c8b6:	d102      	bne.n	9000c8be <_write_r+0x1e>
9000c8b8:	682b      	ldr	r3, [r5, #0]
9000c8ba:	b103      	cbz	r3, 9000c8be <_write_r+0x1e>
9000c8bc:	6023      	str	r3, [r4, #0]
9000c8be:	bd38      	pop	{r3, r4, r5, pc}
9000c8c0:	20001498 	.word	0x20001498

9000c8c4 <__errno>:
9000c8c4:	4b01      	ldr	r3, [pc, #4]	@ (9000c8cc <__errno+0x8>)
9000c8c6:	6818      	ldr	r0, [r3, #0]
9000c8c8:	4770      	bx	lr
9000c8ca:	bf00      	nop
9000c8cc:	2000007c 	.word	0x2000007c

9000c8d0 <__libc_init_array>:
9000c8d0:	b570      	push	{r4, r5, r6, lr}
9000c8d2:	4d0d      	ldr	r5, [pc, #52]	@ (9000c908 <__libc_init_array+0x38>)
9000c8d4:	4c0d      	ldr	r4, [pc, #52]	@ (9000c90c <__libc_init_array+0x3c>)
9000c8d6:	1b64      	subs	r4, r4, r5
9000c8d8:	10a4      	asrs	r4, r4, #2
9000c8da:	2600      	movs	r6, #0
9000c8dc:	42a6      	cmp	r6, r4
9000c8de:	d109      	bne.n	9000c8f4 <__libc_init_array+0x24>
9000c8e0:	4d0b      	ldr	r5, [pc, #44]	@ (9000c910 <__libc_init_array+0x40>)
9000c8e2:	4c0c      	ldr	r4, [pc, #48]	@ (9000c914 <__libc_init_array+0x44>)
9000c8e4:	f000 fe1a 	bl	9000d51c <_init>
9000c8e8:	1b64      	subs	r4, r4, r5
9000c8ea:	10a4      	asrs	r4, r4, #2
9000c8ec:	2600      	movs	r6, #0
9000c8ee:	42a6      	cmp	r6, r4
9000c8f0:	d105      	bne.n	9000c8fe <__libc_init_array+0x2e>
9000c8f2:	bd70      	pop	{r4, r5, r6, pc}
9000c8f4:	f855 3b04 	ldr.w	r3, [r5], #4
9000c8f8:	4798      	blx	r3
9000c8fa:	3601      	adds	r6, #1
9000c8fc:	e7ee      	b.n	9000c8dc <__libc_init_array+0xc>
9000c8fe:	f855 3b04 	ldr.w	r3, [r5], #4
9000c902:	4798      	blx	r3
9000c904:	3601      	adds	r6, #1
9000c906:	e7f2      	b.n	9000c8ee <__libc_init_array+0x1e>
9000c908:	9000fc10 	.word	0x9000fc10
9000c90c:	9000fc10 	.word	0x9000fc10
9000c910:	9000fc10 	.word	0x9000fc10
9000c914:	9000fc14 	.word	0x9000fc14

9000c918 <__retarget_lock_init_recursive>:
9000c918:	4770      	bx	lr

9000c91a <__retarget_lock_acquire_recursive>:
9000c91a:	4770      	bx	lr

9000c91c <__retarget_lock_release_recursive>:
9000c91c:	4770      	bx	lr

9000c91e <memcpy>:
9000c91e:	440a      	add	r2, r1
9000c920:	4291      	cmp	r1, r2
9000c922:	f100 33ff 	add.w	r3, r0, #4294967295
9000c926:	d100      	bne.n	9000c92a <memcpy+0xc>
9000c928:	4770      	bx	lr
9000c92a:	b510      	push	{r4, lr}
9000c92c:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c930:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c934:	4291      	cmp	r1, r2
9000c936:	d1f9      	bne.n	9000c92c <memcpy+0xe>
9000c938:	bd10      	pop	{r4, pc}
	...

9000c93c <_free_r>:
9000c93c:	b538      	push	{r3, r4, r5, lr}
9000c93e:	4605      	mov	r5, r0
9000c940:	2900      	cmp	r1, #0
9000c942:	d041      	beq.n	9000c9c8 <_free_r+0x8c>
9000c944:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c948:	1f0c      	subs	r4, r1, #4
9000c94a:	2b00      	cmp	r3, #0
9000c94c:	bfb8      	it	lt
9000c94e:	18e4      	addlt	r4, r4, r3
9000c950:	f7ff fd22 	bl	9000c398 <__malloc_lock>
9000c954:	4a1d      	ldr	r2, [pc, #116]	@ (9000c9cc <_free_r+0x90>)
9000c956:	6813      	ldr	r3, [r2, #0]
9000c958:	b933      	cbnz	r3, 9000c968 <_free_r+0x2c>
9000c95a:	6063      	str	r3, [r4, #4]
9000c95c:	6014      	str	r4, [r2, #0]
9000c95e:	4628      	mov	r0, r5
9000c960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c964:	f7ff bd1e 	b.w	9000c3a4 <__malloc_unlock>
9000c968:	42a3      	cmp	r3, r4
9000c96a:	d908      	bls.n	9000c97e <_free_r+0x42>
9000c96c:	6820      	ldr	r0, [r4, #0]
9000c96e:	1821      	adds	r1, r4, r0
9000c970:	428b      	cmp	r3, r1
9000c972:	bf01      	itttt	eq
9000c974:	6819      	ldreq	r1, [r3, #0]
9000c976:	685b      	ldreq	r3, [r3, #4]
9000c978:	1809      	addeq	r1, r1, r0
9000c97a:	6021      	streq	r1, [r4, #0]
9000c97c:	e7ed      	b.n	9000c95a <_free_r+0x1e>
9000c97e:	461a      	mov	r2, r3
9000c980:	685b      	ldr	r3, [r3, #4]
9000c982:	b10b      	cbz	r3, 9000c988 <_free_r+0x4c>
9000c984:	42a3      	cmp	r3, r4
9000c986:	d9fa      	bls.n	9000c97e <_free_r+0x42>
9000c988:	6811      	ldr	r1, [r2, #0]
9000c98a:	1850      	adds	r0, r2, r1
9000c98c:	42a0      	cmp	r0, r4
9000c98e:	d10b      	bne.n	9000c9a8 <_free_r+0x6c>
9000c990:	6820      	ldr	r0, [r4, #0]
9000c992:	4401      	add	r1, r0
9000c994:	1850      	adds	r0, r2, r1
9000c996:	4283      	cmp	r3, r0
9000c998:	6011      	str	r1, [r2, #0]
9000c99a:	d1e0      	bne.n	9000c95e <_free_r+0x22>
9000c99c:	6818      	ldr	r0, [r3, #0]
9000c99e:	685b      	ldr	r3, [r3, #4]
9000c9a0:	6053      	str	r3, [r2, #4]
9000c9a2:	4408      	add	r0, r1
9000c9a4:	6010      	str	r0, [r2, #0]
9000c9a6:	e7da      	b.n	9000c95e <_free_r+0x22>
9000c9a8:	d902      	bls.n	9000c9b0 <_free_r+0x74>
9000c9aa:	230c      	movs	r3, #12
9000c9ac:	602b      	str	r3, [r5, #0]
9000c9ae:	e7d6      	b.n	9000c95e <_free_r+0x22>
9000c9b0:	6820      	ldr	r0, [r4, #0]
9000c9b2:	1821      	adds	r1, r4, r0
9000c9b4:	428b      	cmp	r3, r1
9000c9b6:	bf04      	itt	eq
9000c9b8:	6819      	ldreq	r1, [r3, #0]
9000c9ba:	685b      	ldreq	r3, [r3, #4]
9000c9bc:	6063      	str	r3, [r4, #4]
9000c9be:	bf04      	itt	eq
9000c9c0:	1809      	addeq	r1, r1, r0
9000c9c2:	6021      	streq	r1, [r4, #0]
9000c9c4:	6054      	str	r4, [r2, #4]
9000c9c6:	e7ca      	b.n	9000c95e <_free_r+0x22>
9000c9c8:	bd38      	pop	{r3, r4, r5, pc}
9000c9ca:	bf00      	nop
9000c9cc:	20001358 	.word	0x20001358

9000c9d0 <__ssputs_r>:
9000c9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c9d4:	688e      	ldr	r6, [r1, #8]
9000c9d6:	461f      	mov	r7, r3
9000c9d8:	42be      	cmp	r6, r7
9000c9da:	680b      	ldr	r3, [r1, #0]
9000c9dc:	4682      	mov	sl, r0
9000c9de:	460c      	mov	r4, r1
9000c9e0:	4690      	mov	r8, r2
9000c9e2:	d82d      	bhi.n	9000ca40 <__ssputs_r+0x70>
9000c9e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000c9e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000c9ec:	d026      	beq.n	9000ca3c <__ssputs_r+0x6c>
9000c9ee:	6965      	ldr	r5, [r4, #20]
9000c9f0:	6909      	ldr	r1, [r1, #16]
9000c9f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000c9f6:	eba3 0901 	sub.w	r9, r3, r1
9000c9fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000c9fe:	1c7b      	adds	r3, r7, #1
9000ca00:	444b      	add	r3, r9
9000ca02:	106d      	asrs	r5, r5, #1
9000ca04:	429d      	cmp	r5, r3
9000ca06:	bf38      	it	cc
9000ca08:	461d      	movcc	r5, r3
9000ca0a:	0553      	lsls	r3, r2, #21
9000ca0c:	d527      	bpl.n	9000ca5e <__ssputs_r+0x8e>
9000ca0e:	4629      	mov	r1, r5
9000ca10:	f7ff fc42 	bl	9000c298 <_malloc_r>
9000ca14:	4606      	mov	r6, r0
9000ca16:	b360      	cbz	r0, 9000ca72 <__ssputs_r+0xa2>
9000ca18:	6921      	ldr	r1, [r4, #16]
9000ca1a:	464a      	mov	r2, r9
9000ca1c:	f7ff ff7f 	bl	9000c91e <memcpy>
9000ca20:	89a3      	ldrh	r3, [r4, #12]
9000ca22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000ca26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000ca2a:	81a3      	strh	r3, [r4, #12]
9000ca2c:	6126      	str	r6, [r4, #16]
9000ca2e:	6165      	str	r5, [r4, #20]
9000ca30:	444e      	add	r6, r9
9000ca32:	eba5 0509 	sub.w	r5, r5, r9
9000ca36:	6026      	str	r6, [r4, #0]
9000ca38:	60a5      	str	r5, [r4, #8]
9000ca3a:	463e      	mov	r6, r7
9000ca3c:	42be      	cmp	r6, r7
9000ca3e:	d900      	bls.n	9000ca42 <__ssputs_r+0x72>
9000ca40:	463e      	mov	r6, r7
9000ca42:	6820      	ldr	r0, [r4, #0]
9000ca44:	4632      	mov	r2, r6
9000ca46:	4641      	mov	r1, r8
9000ca48:	f000 fcf6 	bl	9000d438 <memmove>
9000ca4c:	68a3      	ldr	r3, [r4, #8]
9000ca4e:	1b9b      	subs	r3, r3, r6
9000ca50:	60a3      	str	r3, [r4, #8]
9000ca52:	6823      	ldr	r3, [r4, #0]
9000ca54:	4433      	add	r3, r6
9000ca56:	6023      	str	r3, [r4, #0]
9000ca58:	2000      	movs	r0, #0
9000ca5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000ca5e:	462a      	mov	r2, r5
9000ca60:	f000 fd26 	bl	9000d4b0 <_realloc_r>
9000ca64:	4606      	mov	r6, r0
9000ca66:	2800      	cmp	r0, #0
9000ca68:	d1e0      	bne.n	9000ca2c <__ssputs_r+0x5c>
9000ca6a:	6921      	ldr	r1, [r4, #16]
9000ca6c:	4650      	mov	r0, sl
9000ca6e:	f7ff ff65 	bl	9000c93c <_free_r>
9000ca72:	230c      	movs	r3, #12
9000ca74:	f8ca 3000 	str.w	r3, [sl]
9000ca78:	89a3      	ldrh	r3, [r4, #12]
9000ca7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000ca7e:	81a3      	strh	r3, [r4, #12]
9000ca80:	f04f 30ff 	mov.w	r0, #4294967295
9000ca84:	e7e9      	b.n	9000ca5a <__ssputs_r+0x8a>
	...

9000ca88 <_svfiprintf_r>:
9000ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ca8c:	4698      	mov	r8, r3
9000ca8e:	898b      	ldrh	r3, [r1, #12]
9000ca90:	061b      	lsls	r3, r3, #24
9000ca92:	b09d      	sub	sp, #116	@ 0x74
9000ca94:	4607      	mov	r7, r0
9000ca96:	460d      	mov	r5, r1
9000ca98:	4614      	mov	r4, r2
9000ca9a:	d510      	bpl.n	9000cabe <_svfiprintf_r+0x36>
9000ca9c:	690b      	ldr	r3, [r1, #16]
9000ca9e:	b973      	cbnz	r3, 9000cabe <_svfiprintf_r+0x36>
9000caa0:	2140      	movs	r1, #64	@ 0x40
9000caa2:	f7ff fbf9 	bl	9000c298 <_malloc_r>
9000caa6:	6028      	str	r0, [r5, #0]
9000caa8:	6128      	str	r0, [r5, #16]
9000caaa:	b930      	cbnz	r0, 9000caba <_svfiprintf_r+0x32>
9000caac:	230c      	movs	r3, #12
9000caae:	603b      	str	r3, [r7, #0]
9000cab0:	f04f 30ff 	mov.w	r0, #4294967295
9000cab4:	b01d      	add	sp, #116	@ 0x74
9000cab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000caba:	2340      	movs	r3, #64	@ 0x40
9000cabc:	616b      	str	r3, [r5, #20]
9000cabe:	2300      	movs	r3, #0
9000cac0:	9309      	str	r3, [sp, #36]	@ 0x24
9000cac2:	2320      	movs	r3, #32
9000cac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cac8:	f8cd 800c 	str.w	r8, [sp, #12]
9000cacc:	2330      	movs	r3, #48	@ 0x30
9000cace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000cc6c <_svfiprintf_r+0x1e4>
9000cad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000cad6:	f04f 0901 	mov.w	r9, #1
9000cada:	4623      	mov	r3, r4
9000cadc:	469a      	mov	sl, r3
9000cade:	f813 2b01 	ldrb.w	r2, [r3], #1
9000cae2:	b10a      	cbz	r2, 9000cae8 <_svfiprintf_r+0x60>
9000cae4:	2a25      	cmp	r2, #37	@ 0x25
9000cae6:	d1f9      	bne.n	9000cadc <_svfiprintf_r+0x54>
9000cae8:	ebba 0b04 	subs.w	fp, sl, r4
9000caec:	d00b      	beq.n	9000cb06 <_svfiprintf_r+0x7e>
9000caee:	465b      	mov	r3, fp
9000caf0:	4622      	mov	r2, r4
9000caf2:	4629      	mov	r1, r5
9000caf4:	4638      	mov	r0, r7
9000caf6:	f7ff ff6b 	bl	9000c9d0 <__ssputs_r>
9000cafa:	3001      	adds	r0, #1
9000cafc:	f000 80a7 	beq.w	9000cc4e <_svfiprintf_r+0x1c6>
9000cb00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000cb02:	445a      	add	r2, fp
9000cb04:	9209      	str	r2, [sp, #36]	@ 0x24
9000cb06:	f89a 3000 	ldrb.w	r3, [sl]
9000cb0a:	2b00      	cmp	r3, #0
9000cb0c:	f000 809f 	beq.w	9000cc4e <_svfiprintf_r+0x1c6>
9000cb10:	2300      	movs	r3, #0
9000cb12:	f04f 32ff 	mov.w	r2, #4294967295
9000cb16:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cb1a:	f10a 0a01 	add.w	sl, sl, #1
9000cb1e:	9304      	str	r3, [sp, #16]
9000cb20:	9307      	str	r3, [sp, #28]
9000cb22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000cb26:	931a      	str	r3, [sp, #104]	@ 0x68
9000cb28:	4654      	mov	r4, sl
9000cb2a:	2205      	movs	r2, #5
9000cb2c:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cb30:	484e      	ldr	r0, [pc, #312]	@ (9000cc6c <_svfiprintf_r+0x1e4>)
9000cb32:	f7f3 fbdd 	bl	900002f0 <memchr>
9000cb36:	9a04      	ldr	r2, [sp, #16]
9000cb38:	b9d8      	cbnz	r0, 9000cb72 <_svfiprintf_r+0xea>
9000cb3a:	06d0      	lsls	r0, r2, #27
9000cb3c:	bf44      	itt	mi
9000cb3e:	2320      	movmi	r3, #32
9000cb40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cb44:	0711      	lsls	r1, r2, #28
9000cb46:	bf44      	itt	mi
9000cb48:	232b      	movmi	r3, #43	@ 0x2b
9000cb4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cb4e:	f89a 3000 	ldrb.w	r3, [sl]
9000cb52:	2b2a      	cmp	r3, #42	@ 0x2a
9000cb54:	d015      	beq.n	9000cb82 <_svfiprintf_r+0xfa>
9000cb56:	9a07      	ldr	r2, [sp, #28]
9000cb58:	4654      	mov	r4, sl
9000cb5a:	2000      	movs	r0, #0
9000cb5c:	f04f 0c0a 	mov.w	ip, #10
9000cb60:	4621      	mov	r1, r4
9000cb62:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cb66:	3b30      	subs	r3, #48	@ 0x30
9000cb68:	2b09      	cmp	r3, #9
9000cb6a:	d94b      	bls.n	9000cc04 <_svfiprintf_r+0x17c>
9000cb6c:	b1b0      	cbz	r0, 9000cb9c <_svfiprintf_r+0x114>
9000cb6e:	9207      	str	r2, [sp, #28]
9000cb70:	e014      	b.n	9000cb9c <_svfiprintf_r+0x114>
9000cb72:	eba0 0308 	sub.w	r3, r0, r8
9000cb76:	fa09 f303 	lsl.w	r3, r9, r3
9000cb7a:	4313      	orrs	r3, r2
9000cb7c:	9304      	str	r3, [sp, #16]
9000cb7e:	46a2      	mov	sl, r4
9000cb80:	e7d2      	b.n	9000cb28 <_svfiprintf_r+0xa0>
9000cb82:	9b03      	ldr	r3, [sp, #12]
9000cb84:	1d19      	adds	r1, r3, #4
9000cb86:	681b      	ldr	r3, [r3, #0]
9000cb88:	9103      	str	r1, [sp, #12]
9000cb8a:	2b00      	cmp	r3, #0
9000cb8c:	bfbb      	ittet	lt
9000cb8e:	425b      	neglt	r3, r3
9000cb90:	f042 0202 	orrlt.w	r2, r2, #2
9000cb94:	9307      	strge	r3, [sp, #28]
9000cb96:	9307      	strlt	r3, [sp, #28]
9000cb98:	bfb8      	it	lt
9000cb9a:	9204      	strlt	r2, [sp, #16]
9000cb9c:	7823      	ldrb	r3, [r4, #0]
9000cb9e:	2b2e      	cmp	r3, #46	@ 0x2e
9000cba0:	d10a      	bne.n	9000cbb8 <_svfiprintf_r+0x130>
9000cba2:	7863      	ldrb	r3, [r4, #1]
9000cba4:	2b2a      	cmp	r3, #42	@ 0x2a
9000cba6:	d132      	bne.n	9000cc0e <_svfiprintf_r+0x186>
9000cba8:	9b03      	ldr	r3, [sp, #12]
9000cbaa:	1d1a      	adds	r2, r3, #4
9000cbac:	681b      	ldr	r3, [r3, #0]
9000cbae:	9203      	str	r2, [sp, #12]
9000cbb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cbb4:	3402      	adds	r4, #2
9000cbb6:	9305      	str	r3, [sp, #20]
9000cbb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000cc7c <_svfiprintf_r+0x1f4>
9000cbbc:	7821      	ldrb	r1, [r4, #0]
9000cbbe:	2203      	movs	r2, #3
9000cbc0:	4650      	mov	r0, sl
9000cbc2:	f7f3 fb95 	bl	900002f0 <memchr>
9000cbc6:	b138      	cbz	r0, 9000cbd8 <_svfiprintf_r+0x150>
9000cbc8:	9b04      	ldr	r3, [sp, #16]
9000cbca:	eba0 000a 	sub.w	r0, r0, sl
9000cbce:	2240      	movs	r2, #64	@ 0x40
9000cbd0:	4082      	lsls	r2, r0
9000cbd2:	4313      	orrs	r3, r2
9000cbd4:	3401      	adds	r4, #1
9000cbd6:	9304      	str	r3, [sp, #16]
9000cbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cbdc:	4824      	ldr	r0, [pc, #144]	@ (9000cc70 <_svfiprintf_r+0x1e8>)
9000cbde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cbe2:	2206      	movs	r2, #6
9000cbe4:	f7f3 fb84 	bl	900002f0 <memchr>
9000cbe8:	2800      	cmp	r0, #0
9000cbea:	d036      	beq.n	9000cc5a <_svfiprintf_r+0x1d2>
9000cbec:	4b21      	ldr	r3, [pc, #132]	@ (9000cc74 <_svfiprintf_r+0x1ec>)
9000cbee:	bb1b      	cbnz	r3, 9000cc38 <_svfiprintf_r+0x1b0>
9000cbf0:	9b03      	ldr	r3, [sp, #12]
9000cbf2:	3307      	adds	r3, #7
9000cbf4:	f023 0307 	bic.w	r3, r3, #7
9000cbf8:	3308      	adds	r3, #8
9000cbfa:	9303      	str	r3, [sp, #12]
9000cbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cbfe:	4433      	add	r3, r6
9000cc00:	9309      	str	r3, [sp, #36]	@ 0x24
9000cc02:	e76a      	b.n	9000cada <_svfiprintf_r+0x52>
9000cc04:	fb0c 3202 	mla	r2, ip, r2, r3
9000cc08:	460c      	mov	r4, r1
9000cc0a:	2001      	movs	r0, #1
9000cc0c:	e7a8      	b.n	9000cb60 <_svfiprintf_r+0xd8>
9000cc0e:	2300      	movs	r3, #0
9000cc10:	3401      	adds	r4, #1
9000cc12:	9305      	str	r3, [sp, #20]
9000cc14:	4619      	mov	r1, r3
9000cc16:	f04f 0c0a 	mov.w	ip, #10
9000cc1a:	4620      	mov	r0, r4
9000cc1c:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cc20:	3a30      	subs	r2, #48	@ 0x30
9000cc22:	2a09      	cmp	r2, #9
9000cc24:	d903      	bls.n	9000cc2e <_svfiprintf_r+0x1a6>
9000cc26:	2b00      	cmp	r3, #0
9000cc28:	d0c6      	beq.n	9000cbb8 <_svfiprintf_r+0x130>
9000cc2a:	9105      	str	r1, [sp, #20]
9000cc2c:	e7c4      	b.n	9000cbb8 <_svfiprintf_r+0x130>
9000cc2e:	fb0c 2101 	mla	r1, ip, r1, r2
9000cc32:	4604      	mov	r4, r0
9000cc34:	2301      	movs	r3, #1
9000cc36:	e7f0      	b.n	9000cc1a <_svfiprintf_r+0x192>
9000cc38:	ab03      	add	r3, sp, #12
9000cc3a:	9300      	str	r3, [sp, #0]
9000cc3c:	462a      	mov	r2, r5
9000cc3e:	4b0e      	ldr	r3, [pc, #56]	@ (9000cc78 <_svfiprintf_r+0x1f0>)
9000cc40:	a904      	add	r1, sp, #16
9000cc42:	4638      	mov	r0, r7
9000cc44:	f3af 8000 	nop.w
9000cc48:	1c42      	adds	r2, r0, #1
9000cc4a:	4606      	mov	r6, r0
9000cc4c:	d1d6      	bne.n	9000cbfc <_svfiprintf_r+0x174>
9000cc4e:	89ab      	ldrh	r3, [r5, #12]
9000cc50:	065b      	lsls	r3, r3, #25
9000cc52:	f53f af2d 	bmi.w	9000cab0 <_svfiprintf_r+0x28>
9000cc56:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cc58:	e72c      	b.n	9000cab4 <_svfiprintf_r+0x2c>
9000cc5a:	ab03      	add	r3, sp, #12
9000cc5c:	9300      	str	r3, [sp, #0]
9000cc5e:	462a      	mov	r2, r5
9000cc60:	4b05      	ldr	r3, [pc, #20]	@ (9000cc78 <_svfiprintf_r+0x1f0>)
9000cc62:	a904      	add	r1, sp, #16
9000cc64:	4638      	mov	r0, r7
9000cc66:	f000 f9bb 	bl	9000cfe0 <_printf_i>
9000cc6a:	e7ed      	b.n	9000cc48 <_svfiprintf_r+0x1c0>
9000cc6c:	9000fbd4 	.word	0x9000fbd4
9000cc70:	9000fbde 	.word	0x9000fbde
9000cc74:	00000000 	.word	0x00000000
9000cc78:	9000c9d1 	.word	0x9000c9d1
9000cc7c:	9000fbda 	.word	0x9000fbda

9000cc80 <__sfputc_r>:
9000cc80:	6893      	ldr	r3, [r2, #8]
9000cc82:	3b01      	subs	r3, #1
9000cc84:	2b00      	cmp	r3, #0
9000cc86:	b410      	push	{r4}
9000cc88:	6093      	str	r3, [r2, #8]
9000cc8a:	da08      	bge.n	9000cc9e <__sfputc_r+0x1e>
9000cc8c:	6994      	ldr	r4, [r2, #24]
9000cc8e:	42a3      	cmp	r3, r4
9000cc90:	db01      	blt.n	9000cc96 <__sfputc_r+0x16>
9000cc92:	290a      	cmp	r1, #10
9000cc94:	d103      	bne.n	9000cc9e <__sfputc_r+0x1e>
9000cc96:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cc9a:	f7ff bd20 	b.w	9000c6de <__swbuf_r>
9000cc9e:	6813      	ldr	r3, [r2, #0]
9000cca0:	1c58      	adds	r0, r3, #1
9000cca2:	6010      	str	r0, [r2, #0]
9000cca4:	7019      	strb	r1, [r3, #0]
9000cca6:	4608      	mov	r0, r1
9000cca8:	f85d 4b04 	ldr.w	r4, [sp], #4
9000ccac:	4770      	bx	lr

9000ccae <__sfputs_r>:
9000ccae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000ccb0:	4606      	mov	r6, r0
9000ccb2:	460f      	mov	r7, r1
9000ccb4:	4614      	mov	r4, r2
9000ccb6:	18d5      	adds	r5, r2, r3
9000ccb8:	42ac      	cmp	r4, r5
9000ccba:	d101      	bne.n	9000ccc0 <__sfputs_r+0x12>
9000ccbc:	2000      	movs	r0, #0
9000ccbe:	e007      	b.n	9000ccd0 <__sfputs_r+0x22>
9000ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ccc4:	463a      	mov	r2, r7
9000ccc6:	4630      	mov	r0, r6
9000ccc8:	f7ff ffda 	bl	9000cc80 <__sfputc_r>
9000cccc:	1c43      	adds	r3, r0, #1
9000ccce:	d1f3      	bne.n	9000ccb8 <__sfputs_r+0xa>
9000ccd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000ccd4 <_vfiprintf_r>:
9000ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ccd8:	460d      	mov	r5, r1
9000ccda:	b09d      	sub	sp, #116	@ 0x74
9000ccdc:	4614      	mov	r4, r2
9000ccde:	4698      	mov	r8, r3
9000cce0:	4606      	mov	r6, r0
9000cce2:	b118      	cbz	r0, 9000ccec <_vfiprintf_r+0x18>
9000cce4:	6a03      	ldr	r3, [r0, #32]
9000cce6:	b90b      	cbnz	r3, 9000ccec <_vfiprintf_r+0x18>
9000cce8:	f7ff fbee 	bl	9000c4c8 <__sinit>
9000ccec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000ccee:	07d9      	lsls	r1, r3, #31
9000ccf0:	d405      	bmi.n	9000ccfe <_vfiprintf_r+0x2a>
9000ccf2:	89ab      	ldrh	r3, [r5, #12]
9000ccf4:	059a      	lsls	r2, r3, #22
9000ccf6:	d402      	bmi.n	9000ccfe <_vfiprintf_r+0x2a>
9000ccf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000ccfa:	f7ff fe0e 	bl	9000c91a <__retarget_lock_acquire_recursive>
9000ccfe:	89ab      	ldrh	r3, [r5, #12]
9000cd00:	071b      	lsls	r3, r3, #28
9000cd02:	d501      	bpl.n	9000cd08 <_vfiprintf_r+0x34>
9000cd04:	692b      	ldr	r3, [r5, #16]
9000cd06:	b99b      	cbnz	r3, 9000cd30 <_vfiprintf_r+0x5c>
9000cd08:	4629      	mov	r1, r5
9000cd0a:	4630      	mov	r0, r6
9000cd0c:	f7ff fd26 	bl	9000c75c <__swsetup_r>
9000cd10:	b170      	cbz	r0, 9000cd30 <_vfiprintf_r+0x5c>
9000cd12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cd14:	07dc      	lsls	r4, r3, #31
9000cd16:	d504      	bpl.n	9000cd22 <_vfiprintf_r+0x4e>
9000cd18:	f04f 30ff 	mov.w	r0, #4294967295
9000cd1c:	b01d      	add	sp, #116	@ 0x74
9000cd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cd22:	89ab      	ldrh	r3, [r5, #12]
9000cd24:	0598      	lsls	r0, r3, #22
9000cd26:	d4f7      	bmi.n	9000cd18 <_vfiprintf_r+0x44>
9000cd28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cd2a:	f7ff fdf7 	bl	9000c91c <__retarget_lock_release_recursive>
9000cd2e:	e7f3      	b.n	9000cd18 <_vfiprintf_r+0x44>
9000cd30:	2300      	movs	r3, #0
9000cd32:	9309      	str	r3, [sp, #36]	@ 0x24
9000cd34:	2320      	movs	r3, #32
9000cd36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cd3a:	f8cd 800c 	str.w	r8, [sp, #12]
9000cd3e:	2330      	movs	r3, #48	@ 0x30
9000cd40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000cef0 <_vfiprintf_r+0x21c>
9000cd44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000cd48:	f04f 0901 	mov.w	r9, #1
9000cd4c:	4623      	mov	r3, r4
9000cd4e:	469a      	mov	sl, r3
9000cd50:	f813 2b01 	ldrb.w	r2, [r3], #1
9000cd54:	b10a      	cbz	r2, 9000cd5a <_vfiprintf_r+0x86>
9000cd56:	2a25      	cmp	r2, #37	@ 0x25
9000cd58:	d1f9      	bne.n	9000cd4e <_vfiprintf_r+0x7a>
9000cd5a:	ebba 0b04 	subs.w	fp, sl, r4
9000cd5e:	d00b      	beq.n	9000cd78 <_vfiprintf_r+0xa4>
9000cd60:	465b      	mov	r3, fp
9000cd62:	4622      	mov	r2, r4
9000cd64:	4629      	mov	r1, r5
9000cd66:	4630      	mov	r0, r6
9000cd68:	f7ff ffa1 	bl	9000ccae <__sfputs_r>
9000cd6c:	3001      	adds	r0, #1
9000cd6e:	f000 80a7 	beq.w	9000cec0 <_vfiprintf_r+0x1ec>
9000cd72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000cd74:	445a      	add	r2, fp
9000cd76:	9209      	str	r2, [sp, #36]	@ 0x24
9000cd78:	f89a 3000 	ldrb.w	r3, [sl]
9000cd7c:	2b00      	cmp	r3, #0
9000cd7e:	f000 809f 	beq.w	9000cec0 <_vfiprintf_r+0x1ec>
9000cd82:	2300      	movs	r3, #0
9000cd84:	f04f 32ff 	mov.w	r2, #4294967295
9000cd88:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cd8c:	f10a 0a01 	add.w	sl, sl, #1
9000cd90:	9304      	str	r3, [sp, #16]
9000cd92:	9307      	str	r3, [sp, #28]
9000cd94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000cd98:	931a      	str	r3, [sp, #104]	@ 0x68
9000cd9a:	4654      	mov	r4, sl
9000cd9c:	2205      	movs	r2, #5
9000cd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cda2:	4853      	ldr	r0, [pc, #332]	@ (9000cef0 <_vfiprintf_r+0x21c>)
9000cda4:	f7f3 faa4 	bl	900002f0 <memchr>
9000cda8:	9a04      	ldr	r2, [sp, #16]
9000cdaa:	b9d8      	cbnz	r0, 9000cde4 <_vfiprintf_r+0x110>
9000cdac:	06d1      	lsls	r1, r2, #27
9000cdae:	bf44      	itt	mi
9000cdb0:	2320      	movmi	r3, #32
9000cdb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cdb6:	0713      	lsls	r3, r2, #28
9000cdb8:	bf44      	itt	mi
9000cdba:	232b      	movmi	r3, #43	@ 0x2b
9000cdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cdc0:	f89a 3000 	ldrb.w	r3, [sl]
9000cdc4:	2b2a      	cmp	r3, #42	@ 0x2a
9000cdc6:	d015      	beq.n	9000cdf4 <_vfiprintf_r+0x120>
9000cdc8:	9a07      	ldr	r2, [sp, #28]
9000cdca:	4654      	mov	r4, sl
9000cdcc:	2000      	movs	r0, #0
9000cdce:	f04f 0c0a 	mov.w	ip, #10
9000cdd2:	4621      	mov	r1, r4
9000cdd4:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cdd8:	3b30      	subs	r3, #48	@ 0x30
9000cdda:	2b09      	cmp	r3, #9
9000cddc:	d94b      	bls.n	9000ce76 <_vfiprintf_r+0x1a2>
9000cdde:	b1b0      	cbz	r0, 9000ce0e <_vfiprintf_r+0x13a>
9000cde0:	9207      	str	r2, [sp, #28]
9000cde2:	e014      	b.n	9000ce0e <_vfiprintf_r+0x13a>
9000cde4:	eba0 0308 	sub.w	r3, r0, r8
9000cde8:	fa09 f303 	lsl.w	r3, r9, r3
9000cdec:	4313      	orrs	r3, r2
9000cdee:	9304      	str	r3, [sp, #16]
9000cdf0:	46a2      	mov	sl, r4
9000cdf2:	e7d2      	b.n	9000cd9a <_vfiprintf_r+0xc6>
9000cdf4:	9b03      	ldr	r3, [sp, #12]
9000cdf6:	1d19      	adds	r1, r3, #4
9000cdf8:	681b      	ldr	r3, [r3, #0]
9000cdfa:	9103      	str	r1, [sp, #12]
9000cdfc:	2b00      	cmp	r3, #0
9000cdfe:	bfbb      	ittet	lt
9000ce00:	425b      	neglt	r3, r3
9000ce02:	f042 0202 	orrlt.w	r2, r2, #2
9000ce06:	9307      	strge	r3, [sp, #28]
9000ce08:	9307      	strlt	r3, [sp, #28]
9000ce0a:	bfb8      	it	lt
9000ce0c:	9204      	strlt	r2, [sp, #16]
9000ce0e:	7823      	ldrb	r3, [r4, #0]
9000ce10:	2b2e      	cmp	r3, #46	@ 0x2e
9000ce12:	d10a      	bne.n	9000ce2a <_vfiprintf_r+0x156>
9000ce14:	7863      	ldrb	r3, [r4, #1]
9000ce16:	2b2a      	cmp	r3, #42	@ 0x2a
9000ce18:	d132      	bne.n	9000ce80 <_vfiprintf_r+0x1ac>
9000ce1a:	9b03      	ldr	r3, [sp, #12]
9000ce1c:	1d1a      	adds	r2, r3, #4
9000ce1e:	681b      	ldr	r3, [r3, #0]
9000ce20:	9203      	str	r2, [sp, #12]
9000ce22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000ce26:	3402      	adds	r4, #2
9000ce28:	9305      	str	r3, [sp, #20]
9000ce2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000cf00 <_vfiprintf_r+0x22c>
9000ce2e:	7821      	ldrb	r1, [r4, #0]
9000ce30:	2203      	movs	r2, #3
9000ce32:	4650      	mov	r0, sl
9000ce34:	f7f3 fa5c 	bl	900002f0 <memchr>
9000ce38:	b138      	cbz	r0, 9000ce4a <_vfiprintf_r+0x176>
9000ce3a:	9b04      	ldr	r3, [sp, #16]
9000ce3c:	eba0 000a 	sub.w	r0, r0, sl
9000ce40:	2240      	movs	r2, #64	@ 0x40
9000ce42:	4082      	lsls	r2, r0
9000ce44:	4313      	orrs	r3, r2
9000ce46:	3401      	adds	r4, #1
9000ce48:	9304      	str	r3, [sp, #16]
9000ce4a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ce4e:	4829      	ldr	r0, [pc, #164]	@ (9000cef4 <_vfiprintf_r+0x220>)
9000ce50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000ce54:	2206      	movs	r2, #6
9000ce56:	f7f3 fa4b 	bl	900002f0 <memchr>
9000ce5a:	2800      	cmp	r0, #0
9000ce5c:	d03f      	beq.n	9000cede <_vfiprintf_r+0x20a>
9000ce5e:	4b26      	ldr	r3, [pc, #152]	@ (9000cef8 <_vfiprintf_r+0x224>)
9000ce60:	bb1b      	cbnz	r3, 9000ceaa <_vfiprintf_r+0x1d6>
9000ce62:	9b03      	ldr	r3, [sp, #12]
9000ce64:	3307      	adds	r3, #7
9000ce66:	f023 0307 	bic.w	r3, r3, #7
9000ce6a:	3308      	adds	r3, #8
9000ce6c:	9303      	str	r3, [sp, #12]
9000ce6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000ce70:	443b      	add	r3, r7
9000ce72:	9309      	str	r3, [sp, #36]	@ 0x24
9000ce74:	e76a      	b.n	9000cd4c <_vfiprintf_r+0x78>
9000ce76:	fb0c 3202 	mla	r2, ip, r2, r3
9000ce7a:	460c      	mov	r4, r1
9000ce7c:	2001      	movs	r0, #1
9000ce7e:	e7a8      	b.n	9000cdd2 <_vfiprintf_r+0xfe>
9000ce80:	2300      	movs	r3, #0
9000ce82:	3401      	adds	r4, #1
9000ce84:	9305      	str	r3, [sp, #20]
9000ce86:	4619      	mov	r1, r3
9000ce88:	f04f 0c0a 	mov.w	ip, #10
9000ce8c:	4620      	mov	r0, r4
9000ce8e:	f810 2b01 	ldrb.w	r2, [r0], #1
9000ce92:	3a30      	subs	r2, #48	@ 0x30
9000ce94:	2a09      	cmp	r2, #9
9000ce96:	d903      	bls.n	9000cea0 <_vfiprintf_r+0x1cc>
9000ce98:	2b00      	cmp	r3, #0
9000ce9a:	d0c6      	beq.n	9000ce2a <_vfiprintf_r+0x156>
9000ce9c:	9105      	str	r1, [sp, #20]
9000ce9e:	e7c4      	b.n	9000ce2a <_vfiprintf_r+0x156>
9000cea0:	fb0c 2101 	mla	r1, ip, r1, r2
9000cea4:	4604      	mov	r4, r0
9000cea6:	2301      	movs	r3, #1
9000cea8:	e7f0      	b.n	9000ce8c <_vfiprintf_r+0x1b8>
9000ceaa:	ab03      	add	r3, sp, #12
9000ceac:	9300      	str	r3, [sp, #0]
9000ceae:	462a      	mov	r2, r5
9000ceb0:	4b12      	ldr	r3, [pc, #72]	@ (9000cefc <_vfiprintf_r+0x228>)
9000ceb2:	a904      	add	r1, sp, #16
9000ceb4:	4630      	mov	r0, r6
9000ceb6:	f3af 8000 	nop.w
9000ceba:	4607      	mov	r7, r0
9000cebc:	1c78      	adds	r0, r7, #1
9000cebe:	d1d6      	bne.n	9000ce6e <_vfiprintf_r+0x19a>
9000cec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cec2:	07d9      	lsls	r1, r3, #31
9000cec4:	d405      	bmi.n	9000ced2 <_vfiprintf_r+0x1fe>
9000cec6:	89ab      	ldrh	r3, [r5, #12]
9000cec8:	059a      	lsls	r2, r3, #22
9000ceca:	d402      	bmi.n	9000ced2 <_vfiprintf_r+0x1fe>
9000cecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cece:	f7ff fd25 	bl	9000c91c <__retarget_lock_release_recursive>
9000ced2:	89ab      	ldrh	r3, [r5, #12]
9000ced4:	065b      	lsls	r3, r3, #25
9000ced6:	f53f af1f 	bmi.w	9000cd18 <_vfiprintf_r+0x44>
9000ceda:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cedc:	e71e      	b.n	9000cd1c <_vfiprintf_r+0x48>
9000cede:	ab03      	add	r3, sp, #12
9000cee0:	9300      	str	r3, [sp, #0]
9000cee2:	462a      	mov	r2, r5
9000cee4:	4b05      	ldr	r3, [pc, #20]	@ (9000cefc <_vfiprintf_r+0x228>)
9000cee6:	a904      	add	r1, sp, #16
9000cee8:	4630      	mov	r0, r6
9000ceea:	f000 f879 	bl	9000cfe0 <_printf_i>
9000ceee:	e7e4      	b.n	9000ceba <_vfiprintf_r+0x1e6>
9000cef0:	9000fbd4 	.word	0x9000fbd4
9000cef4:	9000fbde 	.word	0x9000fbde
9000cef8:	00000000 	.word	0x00000000
9000cefc:	9000ccaf 	.word	0x9000ccaf
9000cf00:	9000fbda 	.word	0x9000fbda

9000cf04 <_printf_common>:
9000cf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000cf08:	4616      	mov	r6, r2
9000cf0a:	4698      	mov	r8, r3
9000cf0c:	688a      	ldr	r2, [r1, #8]
9000cf0e:	690b      	ldr	r3, [r1, #16]
9000cf10:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000cf14:	4293      	cmp	r3, r2
9000cf16:	bfb8      	it	lt
9000cf18:	4613      	movlt	r3, r2
9000cf1a:	6033      	str	r3, [r6, #0]
9000cf1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000cf20:	4607      	mov	r7, r0
9000cf22:	460c      	mov	r4, r1
9000cf24:	b10a      	cbz	r2, 9000cf2a <_printf_common+0x26>
9000cf26:	3301      	adds	r3, #1
9000cf28:	6033      	str	r3, [r6, #0]
9000cf2a:	6823      	ldr	r3, [r4, #0]
9000cf2c:	0699      	lsls	r1, r3, #26
9000cf2e:	bf42      	ittt	mi
9000cf30:	6833      	ldrmi	r3, [r6, #0]
9000cf32:	3302      	addmi	r3, #2
9000cf34:	6033      	strmi	r3, [r6, #0]
9000cf36:	6825      	ldr	r5, [r4, #0]
9000cf38:	f015 0506 	ands.w	r5, r5, #6
9000cf3c:	d106      	bne.n	9000cf4c <_printf_common+0x48>
9000cf3e:	f104 0a19 	add.w	sl, r4, #25
9000cf42:	68e3      	ldr	r3, [r4, #12]
9000cf44:	6832      	ldr	r2, [r6, #0]
9000cf46:	1a9b      	subs	r3, r3, r2
9000cf48:	42ab      	cmp	r3, r5
9000cf4a:	dc26      	bgt.n	9000cf9a <_printf_common+0x96>
9000cf4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000cf50:	6822      	ldr	r2, [r4, #0]
9000cf52:	3b00      	subs	r3, #0
9000cf54:	bf18      	it	ne
9000cf56:	2301      	movne	r3, #1
9000cf58:	0692      	lsls	r2, r2, #26
9000cf5a:	d42b      	bmi.n	9000cfb4 <_printf_common+0xb0>
9000cf5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000cf60:	4641      	mov	r1, r8
9000cf62:	4638      	mov	r0, r7
9000cf64:	47c8      	blx	r9
9000cf66:	3001      	adds	r0, #1
9000cf68:	d01e      	beq.n	9000cfa8 <_printf_common+0xa4>
9000cf6a:	6823      	ldr	r3, [r4, #0]
9000cf6c:	6922      	ldr	r2, [r4, #16]
9000cf6e:	f003 0306 	and.w	r3, r3, #6
9000cf72:	2b04      	cmp	r3, #4
9000cf74:	bf02      	ittt	eq
9000cf76:	68e5      	ldreq	r5, [r4, #12]
9000cf78:	6833      	ldreq	r3, [r6, #0]
9000cf7a:	1aed      	subeq	r5, r5, r3
9000cf7c:	68a3      	ldr	r3, [r4, #8]
9000cf7e:	bf0c      	ite	eq
9000cf80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000cf84:	2500      	movne	r5, #0
9000cf86:	4293      	cmp	r3, r2
9000cf88:	bfc4      	itt	gt
9000cf8a:	1a9b      	subgt	r3, r3, r2
9000cf8c:	18ed      	addgt	r5, r5, r3
9000cf8e:	2600      	movs	r6, #0
9000cf90:	341a      	adds	r4, #26
9000cf92:	42b5      	cmp	r5, r6
9000cf94:	d11a      	bne.n	9000cfcc <_printf_common+0xc8>
9000cf96:	2000      	movs	r0, #0
9000cf98:	e008      	b.n	9000cfac <_printf_common+0xa8>
9000cf9a:	2301      	movs	r3, #1
9000cf9c:	4652      	mov	r2, sl
9000cf9e:	4641      	mov	r1, r8
9000cfa0:	4638      	mov	r0, r7
9000cfa2:	47c8      	blx	r9
9000cfa4:	3001      	adds	r0, #1
9000cfa6:	d103      	bne.n	9000cfb0 <_printf_common+0xac>
9000cfa8:	f04f 30ff 	mov.w	r0, #4294967295
9000cfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000cfb0:	3501      	adds	r5, #1
9000cfb2:	e7c6      	b.n	9000cf42 <_printf_common+0x3e>
9000cfb4:	18e1      	adds	r1, r4, r3
9000cfb6:	1c5a      	adds	r2, r3, #1
9000cfb8:	2030      	movs	r0, #48	@ 0x30
9000cfba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000cfbe:	4422      	add	r2, r4
9000cfc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000cfc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000cfc8:	3302      	adds	r3, #2
9000cfca:	e7c7      	b.n	9000cf5c <_printf_common+0x58>
9000cfcc:	2301      	movs	r3, #1
9000cfce:	4622      	mov	r2, r4
9000cfd0:	4641      	mov	r1, r8
9000cfd2:	4638      	mov	r0, r7
9000cfd4:	47c8      	blx	r9
9000cfd6:	3001      	adds	r0, #1
9000cfd8:	d0e6      	beq.n	9000cfa8 <_printf_common+0xa4>
9000cfda:	3601      	adds	r6, #1
9000cfdc:	e7d9      	b.n	9000cf92 <_printf_common+0x8e>
	...

9000cfe0 <_printf_i>:
9000cfe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000cfe4:	7e0f      	ldrb	r7, [r1, #24]
9000cfe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000cfe8:	2f78      	cmp	r7, #120	@ 0x78
9000cfea:	4691      	mov	r9, r2
9000cfec:	4680      	mov	r8, r0
9000cfee:	460c      	mov	r4, r1
9000cff0:	469a      	mov	sl, r3
9000cff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000cff6:	d807      	bhi.n	9000d008 <_printf_i+0x28>
9000cff8:	2f62      	cmp	r7, #98	@ 0x62
9000cffa:	d80a      	bhi.n	9000d012 <_printf_i+0x32>
9000cffc:	2f00      	cmp	r7, #0
9000cffe:	f000 80d1 	beq.w	9000d1a4 <_printf_i+0x1c4>
9000d002:	2f58      	cmp	r7, #88	@ 0x58
9000d004:	f000 80b8 	beq.w	9000d178 <_printf_i+0x198>
9000d008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d00c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000d010:	e03a      	b.n	9000d088 <_printf_i+0xa8>
9000d012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000d016:	2b15      	cmp	r3, #21
9000d018:	d8f6      	bhi.n	9000d008 <_printf_i+0x28>
9000d01a:	a101      	add	r1, pc, #4	@ (adr r1, 9000d020 <_printf_i+0x40>)
9000d01c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000d020:	9000d079 	.word	0x9000d079
9000d024:	9000d08d 	.word	0x9000d08d
9000d028:	9000d009 	.word	0x9000d009
9000d02c:	9000d009 	.word	0x9000d009
9000d030:	9000d009 	.word	0x9000d009
9000d034:	9000d009 	.word	0x9000d009
9000d038:	9000d08d 	.word	0x9000d08d
9000d03c:	9000d009 	.word	0x9000d009
9000d040:	9000d009 	.word	0x9000d009
9000d044:	9000d009 	.word	0x9000d009
9000d048:	9000d009 	.word	0x9000d009
9000d04c:	9000d18b 	.word	0x9000d18b
9000d050:	9000d0b7 	.word	0x9000d0b7
9000d054:	9000d145 	.word	0x9000d145
9000d058:	9000d009 	.word	0x9000d009
9000d05c:	9000d009 	.word	0x9000d009
9000d060:	9000d1ad 	.word	0x9000d1ad
9000d064:	9000d009 	.word	0x9000d009
9000d068:	9000d0b7 	.word	0x9000d0b7
9000d06c:	9000d009 	.word	0x9000d009
9000d070:	9000d009 	.word	0x9000d009
9000d074:	9000d14d 	.word	0x9000d14d
9000d078:	6833      	ldr	r3, [r6, #0]
9000d07a:	1d1a      	adds	r2, r3, #4
9000d07c:	681b      	ldr	r3, [r3, #0]
9000d07e:	6032      	str	r2, [r6, #0]
9000d080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000d088:	2301      	movs	r3, #1
9000d08a:	e09c      	b.n	9000d1c6 <_printf_i+0x1e6>
9000d08c:	6833      	ldr	r3, [r6, #0]
9000d08e:	6820      	ldr	r0, [r4, #0]
9000d090:	1d19      	adds	r1, r3, #4
9000d092:	6031      	str	r1, [r6, #0]
9000d094:	0606      	lsls	r6, r0, #24
9000d096:	d501      	bpl.n	9000d09c <_printf_i+0xbc>
9000d098:	681d      	ldr	r5, [r3, #0]
9000d09a:	e003      	b.n	9000d0a4 <_printf_i+0xc4>
9000d09c:	0645      	lsls	r5, r0, #25
9000d09e:	d5fb      	bpl.n	9000d098 <_printf_i+0xb8>
9000d0a0:	f9b3 5000 	ldrsh.w	r5, [r3]
9000d0a4:	2d00      	cmp	r5, #0
9000d0a6:	da03      	bge.n	9000d0b0 <_printf_i+0xd0>
9000d0a8:	232d      	movs	r3, #45	@ 0x2d
9000d0aa:	426d      	negs	r5, r5
9000d0ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d0b0:	4858      	ldr	r0, [pc, #352]	@ (9000d214 <_printf_i+0x234>)
9000d0b2:	230a      	movs	r3, #10
9000d0b4:	e011      	b.n	9000d0da <_printf_i+0xfa>
9000d0b6:	6821      	ldr	r1, [r4, #0]
9000d0b8:	6833      	ldr	r3, [r6, #0]
9000d0ba:	0608      	lsls	r0, r1, #24
9000d0bc:	f853 5b04 	ldr.w	r5, [r3], #4
9000d0c0:	d402      	bmi.n	9000d0c8 <_printf_i+0xe8>
9000d0c2:	0649      	lsls	r1, r1, #25
9000d0c4:	bf48      	it	mi
9000d0c6:	b2ad      	uxthmi	r5, r5
9000d0c8:	2f6f      	cmp	r7, #111	@ 0x6f
9000d0ca:	4852      	ldr	r0, [pc, #328]	@ (9000d214 <_printf_i+0x234>)
9000d0cc:	6033      	str	r3, [r6, #0]
9000d0ce:	bf14      	ite	ne
9000d0d0:	230a      	movne	r3, #10
9000d0d2:	2308      	moveq	r3, #8
9000d0d4:	2100      	movs	r1, #0
9000d0d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000d0da:	6866      	ldr	r6, [r4, #4]
9000d0dc:	60a6      	str	r6, [r4, #8]
9000d0de:	2e00      	cmp	r6, #0
9000d0e0:	db05      	blt.n	9000d0ee <_printf_i+0x10e>
9000d0e2:	6821      	ldr	r1, [r4, #0]
9000d0e4:	432e      	orrs	r6, r5
9000d0e6:	f021 0104 	bic.w	r1, r1, #4
9000d0ea:	6021      	str	r1, [r4, #0]
9000d0ec:	d04b      	beq.n	9000d186 <_printf_i+0x1a6>
9000d0ee:	4616      	mov	r6, r2
9000d0f0:	fbb5 f1f3 	udiv	r1, r5, r3
9000d0f4:	fb03 5711 	mls	r7, r3, r1, r5
9000d0f8:	5dc7      	ldrb	r7, [r0, r7]
9000d0fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000d0fe:	462f      	mov	r7, r5
9000d100:	42bb      	cmp	r3, r7
9000d102:	460d      	mov	r5, r1
9000d104:	d9f4      	bls.n	9000d0f0 <_printf_i+0x110>
9000d106:	2b08      	cmp	r3, #8
9000d108:	d10b      	bne.n	9000d122 <_printf_i+0x142>
9000d10a:	6823      	ldr	r3, [r4, #0]
9000d10c:	07df      	lsls	r7, r3, #31
9000d10e:	d508      	bpl.n	9000d122 <_printf_i+0x142>
9000d110:	6923      	ldr	r3, [r4, #16]
9000d112:	6861      	ldr	r1, [r4, #4]
9000d114:	4299      	cmp	r1, r3
9000d116:	bfde      	ittt	le
9000d118:	2330      	movle	r3, #48	@ 0x30
9000d11a:	f806 3c01 	strble.w	r3, [r6, #-1]
9000d11e:	f106 36ff 	addle.w	r6, r6, #4294967295
9000d122:	1b92      	subs	r2, r2, r6
9000d124:	6122      	str	r2, [r4, #16]
9000d126:	f8cd a000 	str.w	sl, [sp]
9000d12a:	464b      	mov	r3, r9
9000d12c:	aa03      	add	r2, sp, #12
9000d12e:	4621      	mov	r1, r4
9000d130:	4640      	mov	r0, r8
9000d132:	f7ff fee7 	bl	9000cf04 <_printf_common>
9000d136:	3001      	adds	r0, #1
9000d138:	d14a      	bne.n	9000d1d0 <_printf_i+0x1f0>
9000d13a:	f04f 30ff 	mov.w	r0, #4294967295
9000d13e:	b004      	add	sp, #16
9000d140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d144:	6823      	ldr	r3, [r4, #0]
9000d146:	f043 0320 	orr.w	r3, r3, #32
9000d14a:	6023      	str	r3, [r4, #0]
9000d14c:	4832      	ldr	r0, [pc, #200]	@ (9000d218 <_printf_i+0x238>)
9000d14e:	2778      	movs	r7, #120	@ 0x78
9000d150:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000d154:	6823      	ldr	r3, [r4, #0]
9000d156:	6831      	ldr	r1, [r6, #0]
9000d158:	061f      	lsls	r7, r3, #24
9000d15a:	f851 5b04 	ldr.w	r5, [r1], #4
9000d15e:	d402      	bmi.n	9000d166 <_printf_i+0x186>
9000d160:	065f      	lsls	r7, r3, #25
9000d162:	bf48      	it	mi
9000d164:	b2ad      	uxthmi	r5, r5
9000d166:	6031      	str	r1, [r6, #0]
9000d168:	07d9      	lsls	r1, r3, #31
9000d16a:	bf44      	itt	mi
9000d16c:	f043 0320 	orrmi.w	r3, r3, #32
9000d170:	6023      	strmi	r3, [r4, #0]
9000d172:	b11d      	cbz	r5, 9000d17c <_printf_i+0x19c>
9000d174:	2310      	movs	r3, #16
9000d176:	e7ad      	b.n	9000d0d4 <_printf_i+0xf4>
9000d178:	4826      	ldr	r0, [pc, #152]	@ (9000d214 <_printf_i+0x234>)
9000d17a:	e7e9      	b.n	9000d150 <_printf_i+0x170>
9000d17c:	6823      	ldr	r3, [r4, #0]
9000d17e:	f023 0320 	bic.w	r3, r3, #32
9000d182:	6023      	str	r3, [r4, #0]
9000d184:	e7f6      	b.n	9000d174 <_printf_i+0x194>
9000d186:	4616      	mov	r6, r2
9000d188:	e7bd      	b.n	9000d106 <_printf_i+0x126>
9000d18a:	6833      	ldr	r3, [r6, #0]
9000d18c:	6825      	ldr	r5, [r4, #0]
9000d18e:	6961      	ldr	r1, [r4, #20]
9000d190:	1d18      	adds	r0, r3, #4
9000d192:	6030      	str	r0, [r6, #0]
9000d194:	062e      	lsls	r6, r5, #24
9000d196:	681b      	ldr	r3, [r3, #0]
9000d198:	d501      	bpl.n	9000d19e <_printf_i+0x1be>
9000d19a:	6019      	str	r1, [r3, #0]
9000d19c:	e002      	b.n	9000d1a4 <_printf_i+0x1c4>
9000d19e:	0668      	lsls	r0, r5, #25
9000d1a0:	d5fb      	bpl.n	9000d19a <_printf_i+0x1ba>
9000d1a2:	8019      	strh	r1, [r3, #0]
9000d1a4:	2300      	movs	r3, #0
9000d1a6:	6123      	str	r3, [r4, #16]
9000d1a8:	4616      	mov	r6, r2
9000d1aa:	e7bc      	b.n	9000d126 <_printf_i+0x146>
9000d1ac:	6833      	ldr	r3, [r6, #0]
9000d1ae:	1d1a      	adds	r2, r3, #4
9000d1b0:	6032      	str	r2, [r6, #0]
9000d1b2:	681e      	ldr	r6, [r3, #0]
9000d1b4:	6862      	ldr	r2, [r4, #4]
9000d1b6:	2100      	movs	r1, #0
9000d1b8:	4630      	mov	r0, r6
9000d1ba:	f7f3 f899 	bl	900002f0 <memchr>
9000d1be:	b108      	cbz	r0, 9000d1c4 <_printf_i+0x1e4>
9000d1c0:	1b80      	subs	r0, r0, r6
9000d1c2:	6060      	str	r0, [r4, #4]
9000d1c4:	6863      	ldr	r3, [r4, #4]
9000d1c6:	6123      	str	r3, [r4, #16]
9000d1c8:	2300      	movs	r3, #0
9000d1ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d1ce:	e7aa      	b.n	9000d126 <_printf_i+0x146>
9000d1d0:	6923      	ldr	r3, [r4, #16]
9000d1d2:	4632      	mov	r2, r6
9000d1d4:	4649      	mov	r1, r9
9000d1d6:	4640      	mov	r0, r8
9000d1d8:	47d0      	blx	sl
9000d1da:	3001      	adds	r0, #1
9000d1dc:	d0ad      	beq.n	9000d13a <_printf_i+0x15a>
9000d1de:	6823      	ldr	r3, [r4, #0]
9000d1e0:	079b      	lsls	r3, r3, #30
9000d1e2:	d413      	bmi.n	9000d20c <_printf_i+0x22c>
9000d1e4:	68e0      	ldr	r0, [r4, #12]
9000d1e6:	9b03      	ldr	r3, [sp, #12]
9000d1e8:	4298      	cmp	r0, r3
9000d1ea:	bfb8      	it	lt
9000d1ec:	4618      	movlt	r0, r3
9000d1ee:	e7a6      	b.n	9000d13e <_printf_i+0x15e>
9000d1f0:	2301      	movs	r3, #1
9000d1f2:	4632      	mov	r2, r6
9000d1f4:	4649      	mov	r1, r9
9000d1f6:	4640      	mov	r0, r8
9000d1f8:	47d0      	blx	sl
9000d1fa:	3001      	adds	r0, #1
9000d1fc:	d09d      	beq.n	9000d13a <_printf_i+0x15a>
9000d1fe:	3501      	adds	r5, #1
9000d200:	68e3      	ldr	r3, [r4, #12]
9000d202:	9903      	ldr	r1, [sp, #12]
9000d204:	1a5b      	subs	r3, r3, r1
9000d206:	42ab      	cmp	r3, r5
9000d208:	dcf2      	bgt.n	9000d1f0 <_printf_i+0x210>
9000d20a:	e7eb      	b.n	9000d1e4 <_printf_i+0x204>
9000d20c:	2500      	movs	r5, #0
9000d20e:	f104 0619 	add.w	r6, r4, #25
9000d212:	e7f5      	b.n	9000d200 <_printf_i+0x220>
9000d214:	9000fbe5 	.word	0x9000fbe5
9000d218:	9000fbf6 	.word	0x9000fbf6

9000d21c <__sflush_r>:
9000d21c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d224:	0716      	lsls	r6, r2, #28
9000d226:	4605      	mov	r5, r0
9000d228:	460c      	mov	r4, r1
9000d22a:	d454      	bmi.n	9000d2d6 <__sflush_r+0xba>
9000d22c:	684b      	ldr	r3, [r1, #4]
9000d22e:	2b00      	cmp	r3, #0
9000d230:	dc02      	bgt.n	9000d238 <__sflush_r+0x1c>
9000d232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d234:	2b00      	cmp	r3, #0
9000d236:	dd48      	ble.n	9000d2ca <__sflush_r+0xae>
9000d238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d23a:	2e00      	cmp	r6, #0
9000d23c:	d045      	beq.n	9000d2ca <__sflush_r+0xae>
9000d23e:	2300      	movs	r3, #0
9000d240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d244:	682f      	ldr	r7, [r5, #0]
9000d246:	6a21      	ldr	r1, [r4, #32]
9000d248:	602b      	str	r3, [r5, #0]
9000d24a:	d030      	beq.n	9000d2ae <__sflush_r+0x92>
9000d24c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d24e:	89a3      	ldrh	r3, [r4, #12]
9000d250:	0759      	lsls	r1, r3, #29
9000d252:	d505      	bpl.n	9000d260 <__sflush_r+0x44>
9000d254:	6863      	ldr	r3, [r4, #4]
9000d256:	1ad2      	subs	r2, r2, r3
9000d258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d25a:	b10b      	cbz	r3, 9000d260 <__sflush_r+0x44>
9000d25c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d25e:	1ad2      	subs	r2, r2, r3
9000d260:	2300      	movs	r3, #0
9000d262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d264:	6a21      	ldr	r1, [r4, #32]
9000d266:	4628      	mov	r0, r5
9000d268:	47b0      	blx	r6
9000d26a:	1c43      	adds	r3, r0, #1
9000d26c:	89a3      	ldrh	r3, [r4, #12]
9000d26e:	d106      	bne.n	9000d27e <__sflush_r+0x62>
9000d270:	6829      	ldr	r1, [r5, #0]
9000d272:	291d      	cmp	r1, #29
9000d274:	d82b      	bhi.n	9000d2ce <__sflush_r+0xb2>
9000d276:	4a2a      	ldr	r2, [pc, #168]	@ (9000d320 <__sflush_r+0x104>)
9000d278:	40ca      	lsrs	r2, r1
9000d27a:	07d6      	lsls	r6, r2, #31
9000d27c:	d527      	bpl.n	9000d2ce <__sflush_r+0xb2>
9000d27e:	2200      	movs	r2, #0
9000d280:	6062      	str	r2, [r4, #4]
9000d282:	04d9      	lsls	r1, r3, #19
9000d284:	6922      	ldr	r2, [r4, #16]
9000d286:	6022      	str	r2, [r4, #0]
9000d288:	d504      	bpl.n	9000d294 <__sflush_r+0x78>
9000d28a:	1c42      	adds	r2, r0, #1
9000d28c:	d101      	bne.n	9000d292 <__sflush_r+0x76>
9000d28e:	682b      	ldr	r3, [r5, #0]
9000d290:	b903      	cbnz	r3, 9000d294 <__sflush_r+0x78>
9000d292:	6560      	str	r0, [r4, #84]	@ 0x54
9000d294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d296:	602f      	str	r7, [r5, #0]
9000d298:	b1b9      	cbz	r1, 9000d2ca <__sflush_r+0xae>
9000d29a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d29e:	4299      	cmp	r1, r3
9000d2a0:	d002      	beq.n	9000d2a8 <__sflush_r+0x8c>
9000d2a2:	4628      	mov	r0, r5
9000d2a4:	f7ff fb4a 	bl	9000c93c <_free_r>
9000d2a8:	2300      	movs	r3, #0
9000d2aa:	6363      	str	r3, [r4, #52]	@ 0x34
9000d2ac:	e00d      	b.n	9000d2ca <__sflush_r+0xae>
9000d2ae:	2301      	movs	r3, #1
9000d2b0:	4628      	mov	r0, r5
9000d2b2:	47b0      	blx	r6
9000d2b4:	4602      	mov	r2, r0
9000d2b6:	1c50      	adds	r0, r2, #1
9000d2b8:	d1c9      	bne.n	9000d24e <__sflush_r+0x32>
9000d2ba:	682b      	ldr	r3, [r5, #0]
9000d2bc:	2b00      	cmp	r3, #0
9000d2be:	d0c6      	beq.n	9000d24e <__sflush_r+0x32>
9000d2c0:	2b1d      	cmp	r3, #29
9000d2c2:	d001      	beq.n	9000d2c8 <__sflush_r+0xac>
9000d2c4:	2b16      	cmp	r3, #22
9000d2c6:	d11e      	bne.n	9000d306 <__sflush_r+0xea>
9000d2c8:	602f      	str	r7, [r5, #0]
9000d2ca:	2000      	movs	r0, #0
9000d2cc:	e022      	b.n	9000d314 <__sflush_r+0xf8>
9000d2ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d2d2:	b21b      	sxth	r3, r3
9000d2d4:	e01b      	b.n	9000d30e <__sflush_r+0xf2>
9000d2d6:	690f      	ldr	r7, [r1, #16]
9000d2d8:	2f00      	cmp	r7, #0
9000d2da:	d0f6      	beq.n	9000d2ca <__sflush_r+0xae>
9000d2dc:	0793      	lsls	r3, r2, #30
9000d2de:	680e      	ldr	r6, [r1, #0]
9000d2e0:	bf08      	it	eq
9000d2e2:	694b      	ldreq	r3, [r1, #20]
9000d2e4:	600f      	str	r7, [r1, #0]
9000d2e6:	bf18      	it	ne
9000d2e8:	2300      	movne	r3, #0
9000d2ea:	eba6 0807 	sub.w	r8, r6, r7
9000d2ee:	608b      	str	r3, [r1, #8]
9000d2f0:	f1b8 0f00 	cmp.w	r8, #0
9000d2f4:	dde9      	ble.n	9000d2ca <__sflush_r+0xae>
9000d2f6:	6a21      	ldr	r1, [r4, #32]
9000d2f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d2fa:	4643      	mov	r3, r8
9000d2fc:	463a      	mov	r2, r7
9000d2fe:	4628      	mov	r0, r5
9000d300:	47b0      	blx	r6
9000d302:	2800      	cmp	r0, #0
9000d304:	dc08      	bgt.n	9000d318 <__sflush_r+0xfc>
9000d306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d30e:	81a3      	strh	r3, [r4, #12]
9000d310:	f04f 30ff 	mov.w	r0, #4294967295
9000d314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d318:	4407      	add	r7, r0
9000d31a:	eba8 0800 	sub.w	r8, r8, r0
9000d31e:	e7e7      	b.n	9000d2f0 <__sflush_r+0xd4>
9000d320:	20400001 	.word	0x20400001

9000d324 <_fflush_r>:
9000d324:	b538      	push	{r3, r4, r5, lr}
9000d326:	690b      	ldr	r3, [r1, #16]
9000d328:	4605      	mov	r5, r0
9000d32a:	460c      	mov	r4, r1
9000d32c:	b913      	cbnz	r3, 9000d334 <_fflush_r+0x10>
9000d32e:	2500      	movs	r5, #0
9000d330:	4628      	mov	r0, r5
9000d332:	bd38      	pop	{r3, r4, r5, pc}
9000d334:	b118      	cbz	r0, 9000d33e <_fflush_r+0x1a>
9000d336:	6a03      	ldr	r3, [r0, #32]
9000d338:	b90b      	cbnz	r3, 9000d33e <_fflush_r+0x1a>
9000d33a:	f7ff f8c5 	bl	9000c4c8 <__sinit>
9000d33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d342:	2b00      	cmp	r3, #0
9000d344:	d0f3      	beq.n	9000d32e <_fflush_r+0xa>
9000d346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d348:	07d0      	lsls	r0, r2, #31
9000d34a:	d404      	bmi.n	9000d356 <_fflush_r+0x32>
9000d34c:	0599      	lsls	r1, r3, #22
9000d34e:	d402      	bmi.n	9000d356 <_fflush_r+0x32>
9000d350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d352:	f7ff fae2 	bl	9000c91a <__retarget_lock_acquire_recursive>
9000d356:	4628      	mov	r0, r5
9000d358:	4621      	mov	r1, r4
9000d35a:	f7ff ff5f 	bl	9000d21c <__sflush_r>
9000d35e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d360:	07da      	lsls	r2, r3, #31
9000d362:	4605      	mov	r5, r0
9000d364:	d4e4      	bmi.n	9000d330 <_fflush_r+0xc>
9000d366:	89a3      	ldrh	r3, [r4, #12]
9000d368:	059b      	lsls	r3, r3, #22
9000d36a:	d4e1      	bmi.n	9000d330 <_fflush_r+0xc>
9000d36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d36e:	f7ff fad5 	bl	9000c91c <__retarget_lock_release_recursive>
9000d372:	e7dd      	b.n	9000d330 <_fflush_r+0xc>

9000d374 <__swhatbuf_r>:
9000d374:	b570      	push	{r4, r5, r6, lr}
9000d376:	460c      	mov	r4, r1
9000d378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d37c:	2900      	cmp	r1, #0
9000d37e:	b096      	sub	sp, #88	@ 0x58
9000d380:	4615      	mov	r5, r2
9000d382:	461e      	mov	r6, r3
9000d384:	da0d      	bge.n	9000d3a2 <__swhatbuf_r+0x2e>
9000d386:	89a3      	ldrh	r3, [r4, #12]
9000d388:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000d38c:	f04f 0100 	mov.w	r1, #0
9000d390:	bf14      	ite	ne
9000d392:	2340      	movne	r3, #64	@ 0x40
9000d394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000d398:	2000      	movs	r0, #0
9000d39a:	6031      	str	r1, [r6, #0]
9000d39c:	602b      	str	r3, [r5, #0]
9000d39e:	b016      	add	sp, #88	@ 0x58
9000d3a0:	bd70      	pop	{r4, r5, r6, pc}
9000d3a2:	466a      	mov	r2, sp
9000d3a4:	f000 f862 	bl	9000d46c <_fstat_r>
9000d3a8:	2800      	cmp	r0, #0
9000d3aa:	dbec      	blt.n	9000d386 <__swhatbuf_r+0x12>
9000d3ac:	9901      	ldr	r1, [sp, #4]
9000d3ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000d3b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000d3b6:	4259      	negs	r1, r3
9000d3b8:	4159      	adcs	r1, r3
9000d3ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000d3be:	e7eb      	b.n	9000d398 <__swhatbuf_r+0x24>

9000d3c0 <__smakebuf_r>:
9000d3c0:	898b      	ldrh	r3, [r1, #12]
9000d3c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000d3c4:	079d      	lsls	r5, r3, #30
9000d3c6:	4606      	mov	r6, r0
9000d3c8:	460c      	mov	r4, r1
9000d3ca:	d507      	bpl.n	9000d3dc <__smakebuf_r+0x1c>
9000d3cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000d3d0:	6023      	str	r3, [r4, #0]
9000d3d2:	6123      	str	r3, [r4, #16]
9000d3d4:	2301      	movs	r3, #1
9000d3d6:	6163      	str	r3, [r4, #20]
9000d3d8:	b003      	add	sp, #12
9000d3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000d3dc:	ab01      	add	r3, sp, #4
9000d3de:	466a      	mov	r2, sp
9000d3e0:	f7ff ffc8 	bl	9000d374 <__swhatbuf_r>
9000d3e4:	9f00      	ldr	r7, [sp, #0]
9000d3e6:	4605      	mov	r5, r0
9000d3e8:	4639      	mov	r1, r7
9000d3ea:	4630      	mov	r0, r6
9000d3ec:	f7fe ff54 	bl	9000c298 <_malloc_r>
9000d3f0:	b948      	cbnz	r0, 9000d406 <__smakebuf_r+0x46>
9000d3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d3f6:	059a      	lsls	r2, r3, #22
9000d3f8:	d4ee      	bmi.n	9000d3d8 <__smakebuf_r+0x18>
9000d3fa:	f023 0303 	bic.w	r3, r3, #3
9000d3fe:	f043 0302 	orr.w	r3, r3, #2
9000d402:	81a3      	strh	r3, [r4, #12]
9000d404:	e7e2      	b.n	9000d3cc <__smakebuf_r+0xc>
9000d406:	89a3      	ldrh	r3, [r4, #12]
9000d408:	6020      	str	r0, [r4, #0]
9000d40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d40e:	81a3      	strh	r3, [r4, #12]
9000d410:	9b01      	ldr	r3, [sp, #4]
9000d412:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000d416:	b15b      	cbz	r3, 9000d430 <__smakebuf_r+0x70>
9000d418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d41c:	4630      	mov	r0, r6
9000d41e:	f000 f837 	bl	9000d490 <_isatty_r>
9000d422:	b128      	cbz	r0, 9000d430 <__smakebuf_r+0x70>
9000d424:	89a3      	ldrh	r3, [r4, #12]
9000d426:	f023 0303 	bic.w	r3, r3, #3
9000d42a:	f043 0301 	orr.w	r3, r3, #1
9000d42e:	81a3      	strh	r3, [r4, #12]
9000d430:	89a3      	ldrh	r3, [r4, #12]
9000d432:	431d      	orrs	r5, r3
9000d434:	81a5      	strh	r5, [r4, #12]
9000d436:	e7cf      	b.n	9000d3d8 <__smakebuf_r+0x18>

9000d438 <memmove>:
9000d438:	4288      	cmp	r0, r1
9000d43a:	b510      	push	{r4, lr}
9000d43c:	eb01 0402 	add.w	r4, r1, r2
9000d440:	d902      	bls.n	9000d448 <memmove+0x10>
9000d442:	4284      	cmp	r4, r0
9000d444:	4623      	mov	r3, r4
9000d446:	d807      	bhi.n	9000d458 <memmove+0x20>
9000d448:	1e43      	subs	r3, r0, #1
9000d44a:	42a1      	cmp	r1, r4
9000d44c:	d008      	beq.n	9000d460 <memmove+0x28>
9000d44e:	f811 2b01 	ldrb.w	r2, [r1], #1
9000d452:	f803 2f01 	strb.w	r2, [r3, #1]!
9000d456:	e7f8      	b.n	9000d44a <memmove+0x12>
9000d458:	4402      	add	r2, r0
9000d45a:	4601      	mov	r1, r0
9000d45c:	428a      	cmp	r2, r1
9000d45e:	d100      	bne.n	9000d462 <memmove+0x2a>
9000d460:	bd10      	pop	{r4, pc}
9000d462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000d466:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000d46a:	e7f7      	b.n	9000d45c <memmove+0x24>

9000d46c <_fstat_r>:
9000d46c:	b538      	push	{r3, r4, r5, lr}
9000d46e:	4d07      	ldr	r5, [pc, #28]	@ (9000d48c <_fstat_r+0x20>)
9000d470:	2300      	movs	r3, #0
9000d472:	4604      	mov	r4, r0
9000d474:	4608      	mov	r0, r1
9000d476:	4611      	mov	r1, r2
9000d478:	602b      	str	r3, [r5, #0]
9000d47a:	f7f3 fe12 	bl	900010a2 <_fstat>
9000d47e:	1c43      	adds	r3, r0, #1
9000d480:	d102      	bne.n	9000d488 <_fstat_r+0x1c>
9000d482:	682b      	ldr	r3, [r5, #0]
9000d484:	b103      	cbz	r3, 9000d488 <_fstat_r+0x1c>
9000d486:	6023      	str	r3, [r4, #0]
9000d488:	bd38      	pop	{r3, r4, r5, pc}
9000d48a:	bf00      	nop
9000d48c:	20001498 	.word	0x20001498

9000d490 <_isatty_r>:
9000d490:	b538      	push	{r3, r4, r5, lr}
9000d492:	4d06      	ldr	r5, [pc, #24]	@ (9000d4ac <_isatty_r+0x1c>)
9000d494:	2300      	movs	r3, #0
9000d496:	4604      	mov	r4, r0
9000d498:	4608      	mov	r0, r1
9000d49a:	602b      	str	r3, [r5, #0]
9000d49c:	f7f3 fe11 	bl	900010c2 <_isatty>
9000d4a0:	1c43      	adds	r3, r0, #1
9000d4a2:	d102      	bne.n	9000d4aa <_isatty_r+0x1a>
9000d4a4:	682b      	ldr	r3, [r5, #0]
9000d4a6:	b103      	cbz	r3, 9000d4aa <_isatty_r+0x1a>
9000d4a8:	6023      	str	r3, [r4, #0]
9000d4aa:	bd38      	pop	{r3, r4, r5, pc}
9000d4ac:	20001498 	.word	0x20001498

9000d4b0 <_realloc_r>:
9000d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d4b4:	4607      	mov	r7, r0
9000d4b6:	4614      	mov	r4, r2
9000d4b8:	460d      	mov	r5, r1
9000d4ba:	b921      	cbnz	r1, 9000d4c6 <_realloc_r+0x16>
9000d4bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d4c0:	4611      	mov	r1, r2
9000d4c2:	f7fe bee9 	b.w	9000c298 <_malloc_r>
9000d4c6:	b92a      	cbnz	r2, 9000d4d4 <_realloc_r+0x24>
9000d4c8:	f7ff fa38 	bl	9000c93c <_free_r>
9000d4cc:	4625      	mov	r5, r4
9000d4ce:	4628      	mov	r0, r5
9000d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d4d4:	f000 f81a 	bl	9000d50c <_malloc_usable_size_r>
9000d4d8:	4284      	cmp	r4, r0
9000d4da:	4606      	mov	r6, r0
9000d4dc:	d802      	bhi.n	9000d4e4 <_realloc_r+0x34>
9000d4de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000d4e2:	d8f4      	bhi.n	9000d4ce <_realloc_r+0x1e>
9000d4e4:	4621      	mov	r1, r4
9000d4e6:	4638      	mov	r0, r7
9000d4e8:	f7fe fed6 	bl	9000c298 <_malloc_r>
9000d4ec:	4680      	mov	r8, r0
9000d4ee:	b908      	cbnz	r0, 9000d4f4 <_realloc_r+0x44>
9000d4f0:	4645      	mov	r5, r8
9000d4f2:	e7ec      	b.n	9000d4ce <_realloc_r+0x1e>
9000d4f4:	42b4      	cmp	r4, r6
9000d4f6:	4622      	mov	r2, r4
9000d4f8:	4629      	mov	r1, r5
9000d4fa:	bf28      	it	cs
9000d4fc:	4632      	movcs	r2, r6
9000d4fe:	f7ff fa0e 	bl	9000c91e <memcpy>
9000d502:	4629      	mov	r1, r5
9000d504:	4638      	mov	r0, r7
9000d506:	f7ff fa19 	bl	9000c93c <_free_r>
9000d50a:	e7f1      	b.n	9000d4f0 <_realloc_r+0x40>

9000d50c <_malloc_usable_size_r>:
9000d50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d510:	1f18      	subs	r0, r3, #4
9000d512:	2b00      	cmp	r3, #0
9000d514:	bfbc      	itt	lt
9000d516:	580b      	ldrlt	r3, [r1, r0]
9000d518:	18c0      	addlt	r0, r0, r3
9000d51a:	4770      	bx	lr

9000d51c <_init>:
9000d51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d51e:	bf00      	nop
9000d520:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d522:	bc08      	pop	{r3}
9000d524:	469e      	mov	lr, r3
9000d526:	4770      	bx	lr

9000d528 <_fini>:
9000d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d52a:	bf00      	nop
9000d52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d52e:	bc08      	pop	{r3}
9000d530:	469e      	mov	lr, r3
9000d532:	4770      	bx	lr
